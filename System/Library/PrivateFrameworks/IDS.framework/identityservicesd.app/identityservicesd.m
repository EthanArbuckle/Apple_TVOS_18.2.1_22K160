void sub_100003F00( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_100004E90(uint64_t a1)
{
  v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) uniqueID]);
  [v1 requestKeyMaterialForGroup:v2 sessionID:v3 toSpecificMembers:0 requireMKM:1 requireSKM:0];
}

id sub_1000052CC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) sendKeyMaterialsRecoveryRequestToGroup:*(void *)(a1 + 40) requireMKM:1 requireSKM:0];
}

void sub_1000056F4(uint64_t a1)
{
  v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) uniqueID]);
  [v1 requestKeyMaterialForGroup:v2 sessionID:v3 toSpecificMembers:0 requireMKM:1 requireSKM:0];
}

LABEL_15:
      v24 = (void *)objc_claimAutoreleasedReturnValue([v6 serviceName]);
      v25 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:v24]);

      if (v25)
      {
        v26 = (void *)objc_claimAutoreleasedReturnValue([v6 serviceName]);
        -[IDSOpportunisticCache limitDataInDictionary:forService:](self, "limitDataInDictionary:forService:", v7, v26);

        keychainCache = self->_keychainCache;
        v28 = (void *)objc_claimAutoreleasedReturnValue([v6 serviceName]);
        v29 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](keychainCache, "objectForKeyedSubscript:", v28));
        if (v29)
        {

LABEL_19:
          v31 = (void *)objc_claimAutoreleasedReturnValue([v6 serviceName]);
          v32 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:v31]);
          v33 = self->_keychainCache;
          v34 = (void *)objc_claimAutoreleasedReturnValue([v6 serviceName]);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v33, "setObject:forKeyedSubscript:", v32, v34);

          goto LABEL_20;
        }

        v30 = -[NSMutableDictionary count](self->_keychainCache, "count");
      }

  -[IDSPeerAggregateMessage setAdditionalDictionary:](v17, "setAdditionalDictionary:", v25);

  return v17;
}
}
}
}

  return v10;
}

  return v10;
}

  v12 = 0LL;
LABEL_18:

  return v12;
}

  return v10;
}

        v16 = (void *)objc_claimAutoreleasedReturnValue([v11 service]);
        if ([v16 adHocServiceType] == 5)
        {
          v17 = [v11 accountType];

          if (v17 != 2) {
            -[NSMutableArray addObject:](v31, "addObject:", v11);
          }
        }

        else
        {
        }
      }

      v8 = [v6 countByEnumeratingWithState:&v41 objects:v48 count:16];
    }

    while (v8);
  }

  v18 = v33;
  if ((v5 & 1) == 0)
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccountController userDefaults](v33, "userDefaults"));
    [v19 setAppBool:1 forKey:@"MigratedToNewDisabledState"];
  }

  v40 = 0u;
  v38 = 0u;
  v39 = 0u;
  v37 = 0u;
  v20 = v31;
  v21 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v20,  "countByEnumeratingWithState:objects:count:",  &v37,  v47,  16LL);
  if (v21)
  {
    v22 = v21;
    v23 = *(void *)v38;
    v32 = 138412290LL;
    do
    {
      for (j = 0LL; j != v22; j = (char *)j + 1)
      {
        if (*(void *)v38 != v23) {
          objc_enumerationMutation(v20);
        }
        v25 = *(void **)(*((void *)&v37 + 1) + 8LL * (void)j);
        v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog internalCleanup](&OBJC_CLASS___IMRGLog, "internalCleanup", v32));
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          v27 = (void *)objc_claimAutoreleasedReturnValue([v25 smallDescription]);
          *(_DWORD *)buf = v32;
          v46 = v27;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Removing account %@", buf, 0xCu);

          v18 = v33;
        }

        -[IDSDAccountController _removeAccount:](v18, "_removeAccount:", v25);
      }

      v22 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v20,  "countByEnumeratingWithState:objects:count:",  &v37,  v47,  16LL);
    }

    while (v22);
  }

  v28 = -[IDSDAccountController hasForcedReRegistered](v18, "hasForcedReRegistered");
  v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  v30 = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
  if ((v28 & 1) != 0)
  {
    if (v30)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "We've already re-registered, ignoring...",  buf,  2u);
    }
  }

  else
  {
    if (v30)
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v46) = 60;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Scheduling a re-register in %d seconds",  buf,  8u);
    }

    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472LL;
    v35[2] = sub_1001455C4;
    v35[3] = &unk_1008F6418;
    v35[4] = v18;
    v36 = 0;
    im_dispatch_after_primary_queue(v35, 60.0);
  }

  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3221225472LL;
  v34[2] = sub_1001457FC;
  v34[3] = &unk_1008F6010;
  v34[4] = v18;
  im_dispatch_after_primary_queue(v34, 60.0);
}

  os_activity_scope_leave(&state);
  cut_arc_os_release(&v17);
}
}

    v21 = IDSServerMessagingErrorDomain;
    v32 = NSUnderlyingErrorKey;
    v33 = v10;
    v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v33,  &v32,  1LL));
    v23 = v21;
    v24 = 3LL;
    goto LABEL_18;
  }

  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
    sub_1006A4F74();
  }
LABEL_21:
}

  return v7;
}

  return v10;
}

  sub_10032CF20(v19, a7);
  v27 = bind(v19, (const sockaddr *)[v14 sa], 0x1Cu);
  v28 = *__error();
  v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( NSData,  "dataWithBytes:length:",  (char *)[v14 sa6] + 8,  16));
    v31 = *((_DWORD *)[v14 sa6] + 6);
    *(_DWORD *)buf = 138413570;
    v48 = v13;
    v49 = 2112;
    *(void *)v50 = v14;
    *(_WORD *)&v50[8] = 2112;
    v51 = v30;
    v52 = 1024;
    v53 = v31;
    v54 = 1024;
    v55 = v27;
    v56 = 1024;
    v57 = v28;
    _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "for device %@: binding to [%@ [%@] @ scopeid=%d] iRet=%d (errno=%d)",  buf,  0x32u);
  }

  if (v27)
  {
    close(v19);
    v32 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"device %@: can't bind to [%@ @ scopeid=%d]: errno=%d: %s",  v13,  v14,  *((unsigned int *)[v14 sa6] + 6),  v28,  strerror(v28));
    v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
    v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v33,  NSLocalizedDescriptionKey));
    v35 = 5002LL;
  }

  else
  {
    v36 = connect(v19, (const sockaddr *)[v15 sa], 0x1Cu);
    v37 = *__error();
    v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      v39 = (void *)objc_claimAutoreleasedReturnValue( +[IDSSockAddrWrapper wrapperWithSockAddr:]( IDSSockAddrWrapper,  "wrapperWithSockAddr:",  [v15 sa]));
      v40 = *((_DWORD *)[v15 sa6] + 6);
      *(_DWORD *)buf = 138413058;
      v48 = v39;
      v49 = 1024;
      *(_DWORD *)v50 = v40;
      *(_WORD *)&v50[4] = 1024;
      *(_DWORD *)&v50[6] = v36;
      LOWORD(v51) = 1024;
      *(_DWORD *)((char *)&v51 + 2) = v37;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "connecting to [%@ @ scope=%u] %d (%d)",  buf,  0x1Eu);
    }

    if (!v36 || (_DWORD)v37 == 36)
    {
      (*((void (**)(id, void, void, void, void, uint64_t, void, void, void))v16 + 2))( v16,  0LL,  0LL,  0LL,  0LL,  v19,  0LL,  0LL,  0LL);
      goto LABEL_25;
    }

    close(v19);
    v41 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"device %@: can't connect to %@: errno=%d: %s",  v13,  v15,  v37,  strerror(v37));
    v33 = (void *)objc_claimAutoreleasedReturnValue(v41);
    v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v33,  NSLocalizedDescriptionKey));
    v35 = 5003LL;
  }

  v42 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSUTun",  v35,  v34));

  (*((void (**)(id, void, void, void, void, uint64_t, void, void, void *))v16 + 2))( v16,  0LL,  0LL,  0LL,  0LL,  0xFFFFFFFFLL,  0LL,  0LL,  v42);
LABEL_25:
}

  return v11;
}

  v25 = (void *)objc_claimAutoreleasedReturnValue([v7 pushTopic]);
  if ([v25 isEqualToString:v19])
  {
    v26 = (void *)objc_claimAutoreleasedReturnValue([v6 command]);
    v27 = [v26 isEqualToNumber:&off_100947DD0];

    if ((v27 & 1) == 0) {
      goto LABEL_19;
    }
LABEL_5:
    v16 = 0;
    goto LABEL_6;
  }

LABEL_19:
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  v55 = (void *)objc_claimAutoreleasedReturnValue([v28 accountsOnService:v7]);

  if ([v55 count] == (id)1)
  {
    v29 = OSLogHandleForIDSCategory("IDSDaemon");
    v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Only 1 account exists on this service, We will need to proxy this and include the default device as a destinatio n for the message as well",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v31) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Only 1 account exists on this service, We will need to proxy this and include the default device as a destination for the message as well");
    }
    v16 = 1;
  }

  else
  {
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    obj = v55;
    v53 = [obj countByEnumeratingWithState:&v61 objects:v70 count:16];
    if (v53)
    {
      v51 = *(void *)v62;
      v50 = IDSDevicePropertyIdentities;
      v32 = IDSDevicePropertyIdentitiesURI;
      do
      {
        for (i = 0LL; i != v53; i = (char *)i + 1)
        {
          if (*(void *)v62 != v51) {
            objc_enumerationMutation(obj);
          }
          v56 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*((void *)&v61 + 1) + 8 * (void)i),  "defaultPairedDependentRegistration",  v48,  v49));
          if (v56)
          {
            v33 = OSLogHandleForIDSCategory("IDSDaemon");
            v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              v66 = v56;
              _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Found Default paired device %@ ",  buf,  0xCu);
            }

            if (os_log_shim_legacy_logging_enabled(v35)
              && _IDSShouldLog(0LL, @"IDSDaemon"))
            {
              v48 = v56;
              _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Found Default paired device %@ ");
            }

            v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "objectForKey:", v50, v48));
            v59 = 0u;
            v60 = 0u;
            v57 = 0u;
            v58 = 0u;
            v37 = v36;
            v38 = [v37 countByEnumeratingWithState:&v57 objects:v69 count:16];
            if (v38)
            {
              v39 = *(void *)v58;
              while (2)
              {
                for (j = 0LL; j != v38; j = (char *)j + 1)
                {
                  if (*(void *)v58 != v39) {
                    objc_enumerationMutation(v37);
                  }
                  v41 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*((void *)&v57 + 1) + 8 * (void)j),  "_stringForKey:",  v32,  v48));
                  v42 = OSLogHandleForIDSCategory("IDSDaemon");
                  v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
                  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 138412546;
                    v66 = v41;
                    v67 = 2112;
                    v68 = v8;
                    _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "Comparing %@  To %@ ",  buf,  0x16u);
                  }

                  if (os_log_shim_legacy_logging_enabled(v44)
                    && _IDSShouldLog(0LL, @"IDSDaemon"))
                  {
                    v48 = v41;
                    v49 = v8;
                    _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Comparing %@  To %@ ");
                  }

                  if (_FTAreIDsEquivalent(v41, v8))
                  {
                    v45 = OSLogHandleForIDSCategory("IDSDaemon");
                    v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
                    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "These ID's are the same, We will not be proxying this message",  buf,  2u);
                    }

                    if (os_log_shim_legacy_logging_enabled(v47)
                      && _IDSShouldLog(0LL, @"IDSDaemon"))
                    {
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"These ID's are the same, We will not be proxying this message");
                    }

                    v16 = 0;
                    goto LABEL_61;
                  }
                }

                v38 = [v37 countByEnumeratingWithState:&v57 objects:v69 count:16];
                if (v38) {
                  continue;
                }
                break;
              }
            }
          }
        }

        v53 = [obj countByEnumeratingWithState:&v61 objects:v70 count:16];
        v16 = 1;
      }

      while (v53);
    }

    else
    {
      v16 = 1;
    }

  return (NSData *)v9;
}

  v24 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BACA0, &OBJC_CLASS___NSNumber_ptr);
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
  return result;
}

  type metadata accessor for IDSGroupSessionClientDataKey(0LL);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v23);
  __break(1u);
}

  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  v9 = *(void *)(v4 + 40);
  swift_bridgeObjectRetain(v4);
  v10 = NSObject._rawHashValue(seed:)(v9);
  v11 = -1LL << *(_BYTE *)(v4 + 32);
  v12 = v10 & ~v11;
  if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
    goto LABEL_15;
  }
  sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
  v13 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
  v14 = static NSObject.== infix(_:_:)(v13, a1);

  if ((v14 & 1) == 0)
  {
    v15 = ~v11;
    do
    {
      v12 = (v12 + 1) & v15;
      if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
        goto LABEL_15;
      }
      v16 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
      v17 = static NSObject.== infix(_:_:)(v16, a1);
    }

    while ((v17 & 1) == 0);
  }

  swift_bridgeObjectRelease(v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v19 = *v2;
  v22 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100436A00(&qword_1009B9D90);
    v19 = v22;
  }

  v8 = *(void *)(*(void *)(v19 + 48) + 8 * v12);
  sub_1004370C0(v12);
  v20 = *v2;
  *uint64_t v2 = v22;
  swift_bridgeObjectRelease(v20);
  return v8;
}

  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for SenderKeyURIPair);
  __break(1u);
  return result;
}

    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  v9 = *(void *)(v4 + 40);
  swift_bridgeObjectRetain(v4);
  v10 = NSObject._rawHashValue(seed:)(v9);
  v11 = -1LL << *(_BYTE *)(v4 + 32);
  v12 = v10 & ~v11;
  if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
    goto LABEL_15;
  }
  type metadata accessor for IDSGroupEncryptionControllerMember();
  v13 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
  v14 = static NSObject.== infix(_:_:)(v13, a1);

  if ((v14 & 1) == 0)
  {
    v15 = ~v11;
    do
    {
      v12 = (v12 + 1) & v15;
      if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
        goto LABEL_15;
      }
      v16 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
      v17 = static NSObject.== infix(_:_:)(v16, a1);
    }

    while ((v17 & 1) == 0);
  }

  swift_bridgeObjectRelease(v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v19 = *v2;
  v22 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100489A8C();
    v19 = v22;
  }

  v8 = *(void *)(*(void *)(v19 + 48) + 8 * v12);
  sub_1004370C0(v12);
  v20 = *v2;
  *uint64_t v2 = v22;
  swift_bridgeObjectRelease(v20);
  return v8;
}

    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  v9 = *(void *)(v4 + 40);
  swift_bridgeObjectRetain(v4);
  v10 = NSObject._rawHashValue(seed:)(v9);
  v11 = -1LL << *(_BYTE *)(v4 + 32);
  v12 = v10 & ~v11;
  if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
    goto LABEL_15;
  }
  sub_10041D3C4(0LL, (unint64_t *)&qword_1009BBE30, &OBJC_CLASS___IDSPushToken_ptr);
  v13 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
  v14 = static NSObject.== infix(_:_:)(v13, a1);

  if ((v14 & 1) == 0)
  {
    v15 = ~v11;
    do
    {
      v12 = (v12 + 1) & v15;
      if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
        goto LABEL_15;
      }
      v16 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
      v17 = static NSObject.== infix(_:_:)(v16, a1);
    }

    while ((v17 & 1) == 0);
  }

  swift_bridgeObjectRelease(v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v19 = *v2;
  v22 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1004245A4();
    v19 = v22;
  }

  v8 = *(void *)(*(void *)(v19 + 48) + 8 * v12);
  sub_1004370C0(v12);
  v20 = *v2;
  *uint64_t v2 = v22;
  swift_bridgeObjectRelease(v20);
  return v8;
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  v9 = *(void *)(v4 + 40);
  swift_bridgeObjectRetain(v4);
  v10 = NSObject._rawHashValue(seed:)(v9);
  v11 = -1LL << *(_BYTE *)(v4 + 32);
  v12 = v10 & ~v11;
  if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
    goto LABEL_15;
  }
  type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
  v13 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
  v14 = static NSObject.== infix(_:_:)(v13, a1);

  if ((v14 & 1) == 0)
  {
    v15 = ~v11;
    do
    {
      v12 = (v12 + 1) & v15;
      if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
        goto LABEL_15;
      }
      v16 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
      v17 = static NSObject.== infix(_:_:)(v16, a1);
    }

    while ((v17 & 1) == 0);
  }

  swift_bridgeObjectRelease(v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v19 = *v2;
  v22 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100436A00((uint64_t *)&unk_1009B97D0);
    v19 = v22;
  }

  v8 = *(void *)(*(void *)(v19 + 48) + 8 * v12);
  sub_1004370C0(v12);
  v20 = *v2;
  *uint64_t v2 = v22;
  swift_bridgeObjectRelease(v20);
  return v8;
}

  v32 = sub_10041D3C4(0LL, a6, a7);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v32);
  __break(1u);
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
}

  v24 = sub_10041D3C4(0LL, &qword_1009BC3B0, off_1008F3918);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

LABEL_20:
      v16 = -[IDSOpportunisticCache saveOpportunisticCache:withError:]( self,  "saveOpportunisticCache:withError:",  v7,  a4);
      goto LABEL_21;
    }

    v10 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
    v11 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v10]);

    if (v11
      && (v12 = (void *)objc_claimAutoreleasedReturnValue([v11 data]),
          v13 = (void *)objc_claimAutoreleasedReturnValue([v6 data]),
          v14 = [v12 isEqual:v13],
          v13,
          v12,
          v14))
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue([v6 options]);
      [v11 setOptions:v15];
    }

    else
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue([v6 data]);

      if (v17)
      {
        v15 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
        [v9 setObject:v6 forKeyedSubscript:v15];
      }

      else
      {
        if (!v11)
        {
LABEL_14:

          goto LABEL_15;
        }

        v15 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
        [v9 removeObjectForKey:v15];
      }
    }

    goto LABEL_14;
  }

  v16 = 0;
LABEL_21:

  return v16;
}

        v21 = 0;
        goto LABEL_28;
      }

      *a4 = value[0];
    }

    else
    {
      if (!v11) {
        goto LABEL_20;
      }
      if (-[NSMapTable count](self->_serviceNameToStreamIDMap, "count") > 0xFFFE)
      {
        -[NSMapTable count](self->_serviceNameToStreamIDMap, "count");
        _IMWarn(@"ServiceMap is at maximum capacity! %lu");
        v21 = 0;
        *a6 = 0;
        goto LABEL_28;
      }

      do
      {
        nextStreamID = (const void *)self->_nextStreamID;
        if ((((_DWORD)nextStreamID + 1) & 0x10000) != 0) {
          v27 = 1;
        }
        else {
          v27 = (_WORD)nextStreamID + 1;
        }
        self->_nextStreamID = v27;
      }

      while (NSMapMember(self->_streamIDToServiceNameMap, nextStreamID, 0LL, (void **)value));
      *a4 = (unsigned __int16)nextStreamID;
      *a6 = 1;
      -[NSMapTable setObject:forKey:](self->_serviceNameToStreamIDMap, "setObject:forKey:", nextStreamID, v14);
      -[NSMapTable setObject:forKey:](self->_streamIDToServiceNameMap, "setObject:forKey:", v14, nextStreamID);
    }

    v21 = 1;
    goto LABEL_28;
  }

  *(void *)&out[29] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)out = v16;
  *(_OWORD *)&out[16] = v16;
  *(void *)((char *)&value[1] + 13) = 0xAAAAAAAAAAAAAAAALL;
  value[0] = v16;
  value[1] = v16;
  uuid_unparse_upper(self->_remoteInstanceID, out);
  uuid_unparse_upper((const unsigned __int8 *)a7, (char *)value);
  v17 = OSLogHandleForTransportCategory("UTunPeerServiceMap");
  v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v30 = out;
    v31 = 2080;
    v32 = value;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Remote instance ID do not match: old [%s] new [%s]",  buf,  0x16u);
  }

  v20 = os_log_shim_legacy_logging_enabled(v19);
  if ((_DWORD)v20)
  {
    if (_IDSShouldLogTransport(v20))
    {
      _IDSLogTransport( @"UTunPeerServiceMap",  @"IDS",  @"Remote instance ID do not match: old [%s] new [%s]");
      if (_IDSShouldLog(0LL, @"UTunPeerServiceMap")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunPeerServiceMap",  @"Remote instance ID do not match: old [%s] new [%s]");
      }
    }
  }

  v21 = 0;
  *a8 = 1;
LABEL_28:
  os_unfair_lock_unlock(p_lock);

  return v21;
}

  v26 = 0LL;
LABEL_46:

  return v26;
}

  if (v7 != 24)
  {
    v32 = 1;
    goto LABEL_31;
  }

  v20 = [v6 priority];
  v21 = [v6 protectionClass];
  v22 = [v6 encrypted];
  v23 = [v6 sequenceNumber];
  v24 = [v6 streamID];
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[IDSUTunDeliveryController sharedInstance](&OBJC_CLASS___IDSUTunDeliveryController, "sharedInstance"));
  v26 = (void *)objc_claimAutoreleasedReturnValue([v25 topicForStreamID:v24]);

  if (v26)
  {
    v27 = v20;
    v28 = OSLogHandleForTransportCategory("SPConnection");
    v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138414082;
      v45 = @"idsotr";
      v46 = 2048;
      v47 = v27;
      v48 = 1024;
      v49 = v21;
      v50 = 1024;
      v51 = v22;
      v52 = 1024;
      v53 = v23;
      v54 = 1024;
      v55 = v15;
      v56 = 1024;
      v57 = v14 != 0LL;
      v58 = 2112;
      v59 = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Recv OTR message for %@-%ld-%u E:%u SN:%u FI:%u D:%u T:%@",  buf,  0x3Eu);
    }

    v31 = os_log_shim_legacy_logging_enabled(v30);
    if ((_DWORD)v31)
    {
      if (_IDSShouldLogTransport(v31))
      {
        _IDSLogTransport( @"SPConnection",  @"IDS",  @"Recv OTR message for %@-%ld-%u E:%u SN:%u FI:%u D:%u T:%@");
        if (_IDSShouldLog(0LL, @"SPConnection")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"SPConnection",  @"Recv OTR message for %@-%ld-%u E:%u SN:%u FI:%u D:%u T:%@");
        }
      }
    }
  }

  v32 = 1;
LABEL_29:

LABEL_31:
  objc_autoreleasePoolPop(v5);

  return v32;
}

  return v10;
}
}

    goto LABEL_34;
  }

  if (&v11[(bswap32(*((unsigned __int16 *)v11 + 2)) >> 16) + 6] > &v6[v7])
  {
    v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v30) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "control message: OTRNegotiation cannot decode negotiation data",  (uint8_t *)&v30,  2u);
    }

    goto LABEL_20;
  }

  v19 = *(_DWORD *)v11;
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:"));
  v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
  v22 = bswap32(v19);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    v30 = 67109634;
    v31 = v8;
    v32 = 2112;
    v33 = v15;
    v34 = 1024;
    v35 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "got control message: OTRNegotiationData (%uB) for %@, count:%08x",  (uint8_t *)&v30,  0x18u);
  }

  v23 = (void *)objc_claimAutoreleasedReturnValue(+[IDSOTRController sharedInstance](&OBJC_CLASS___IDSOTRController, "sharedInstance"));
  [v23 processNegotiationData:v20 deviceUniqueID:IDSDeviceDefaultPairedDeviceUniqueID token:v15 negotiationCount:v22];

  v24 = 1;
LABEL_35:

  return v24;
}
}
}
}

  return v20;
}
}

    v8 = (v16 - 1) & v16;
    v11 = __clz(__rbit64(v16)) + (v4 << 6);
LABEL_5:
    v12 = *(void **)(*(void *)(a3 + 48) + 8 * v11);
    v13 = *(uint64_t (**)(void))((swift_isaMask & *v12) + 0x80LL);
    v14 = v12;
    LOBYTE(v13) = v13();

    if ((v13 & 1) == 0)
    {
      *(unint64_t *)((char *)a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
      if (__OFADD__(v21++, 1LL))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        sub_100400B0C(a1, a2, v21, a3);
        return;
      }
    }
  }

  v17 = v15 + 3;
  if (v17 >= v9) {
    goto LABEL_24;
  }
  v16 = *(void *)(v5 + 8 * v17);
  if (v16)
  {
    v4 = v17;
    goto LABEL_20;
  }

  while (1)
  {
    v4 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v4 >= v9) {
      goto LABEL_24;
    }
    v16 = *(void *)(v5 + 8 * v4);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }

    v9 = (v16 - 1) & v16;
    v11 = __clz(__rbit64(v16)) + (v6 << 6);
LABEL_5:
    v12 = *(void *)(*(void *)(a3 + 56) + 8 * v11);
    v13 = *(id *)(*(void *)(a3 + 48) + 8 * v11);
    swift_retain(v12);
    v14 = a4(v13, v12);

    result = swift_release(v12);
    if ((v14 & 1) != 0)
    {
      *(unint64_t *)((char *)v20 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
      if (__OFADD__(v21++, 1LL))
      {
        __break(1u);
        return sub_1004377EC(v20, a2, v21, a3);
      }
    }
  }

  v17 = v15 + 3;
  if (v17 >= v23) {
    return sub_1004377EC(v20, a2, v21, a3);
  }
  v16 = *(void *)(v22 + 8 * v17);
  if (v16)
  {
    v6 = v17;
    goto LABEL_20;
  }

  while (1)
  {
    v6 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v6 >= v23) {
      return sub_1004377EC(v20, a2, v21, a3);
    }
    v16 = *(void *)(v22 + 8 * v6);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }

    v12 = (v16 - 1) & v16;
  }

  v17 = v15 + 3;
  if (v17 >= v29)
  {
LABEL_25:
    swift_release(v30);
    return;
  }

  v16 = *(void *)(v28 + 8 * v17);
  if (v16)
  {
    v8 = v17;
    goto LABEL_20;
  }

  while (1)
  {
    v8 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v8 >= v29) {
      goto LABEL_25;
    }
    v16 = *(void *)(v28 + 8 * v8);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }

  if (a1 < 0) {
    v13 = a1;
  }
  else {
    v13 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v13);
  if (!v2) {
    goto LABEL_24;
  }
LABEL_3:
  id v3 = 4LL;
  while (1)
  {
    if ((a1 & 0xC000000000000001LL) != 0) {
      v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, a1);
    }
    else {
      v4 = *(id *)(a1 + 8 * v3);
    }
    v5 = v4;
    v6 = v3 - 3;
    if (__OFADD__(v3 - 4, 1LL))
    {
      __break(1u);
      goto LABEL_20;
    }

    result = [v4 prefixedURI];
    if (!result) {
      break;
    }
    v8 = result;
    if ([result _appearsToBeDSID]
      || [v8 _appearsToBePseudonymID]
      || [v8 _appearsToBeTemporaryID])
    {
    }

    else
    {
      v9 = [v5 tokenFreeURI];

      if (v9)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v11 = *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        v10 = *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v11 >= v10 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1LL);
        }
        v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
        specialized Array._endMutation()(v12);
      }
    }

    ++v3;
    if (v6 == v2) {
      goto LABEL_24;
    }
  }

  __break(1u);
  return result;
}

      v59 = (v65 - 1) & v65;
      for (i = __clz(__rbit64(v65)) + (v61 << 6); ; i = v62 | (v61 << 6))
      {
        sub_1003F5FC8( *(void *)(v277 + 48) + *(void *)(v31 + 72) * i,  (uint64_t)v52,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        v67 = sub_1003F600C((uint64_t)v52, (uint64_t)v47, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        v68 = (os_log_s *)Logger.logObject.getter(v67);
        v69 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v68, v69))
        {
          v70 = swift_slowAlloc(22LL, -1LL);
          v71 = v52;
          v72 = swift_slowAlloc(64LL, -1LL);
          v285[0] = v72;
          *(_DWORD *)v70 = v276.n128_u32[0];
          v73 = sub_1003FFBB0(0xD000000000000027LL, v270, v285);
          *(void *)(v70 + 4) = v73;
          *(_WORD *)(v70 + 12) = 2080;
          v74 = UUID.uuidString.getter(v73);
          v76 = v75;
          *(void *)(v70 + 14) = sub_1003FFBB0(v74, v75, v285);
          swift_bridgeObjectRelease(v76);
          sub_1003F6050((uint64_t)v47, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          _os_log_impl((void *)&_mh_execute_header, v68, v69, "%s: including MKM with MKI: %s", (uint8_t *)v70, 0x16u);
          swift_arrayDestroy(v72, 2LL, v269);
          v77 = v72;
          v52 = v71;
          swift_slowDealloc(v77, -1LL, -1LL);
          v31 = v271;
          swift_slowDealloc(v70, -1LL, -1LL);

          if (!v59) {
            goto LABEL_7;
          }
        }

        else
        {

          sub_1003F6050((uint64_t)v47, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          if (!v59) {
            goto LABEL_7;
          }
        }

    v13 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_5:
    v16 = *(void **)(*(void *)(a3 + 48) + 8 * v15);
    sub_1003F5FC8( *(void *)(a3 + 56) + *(void *)(v4 + 72) * v15,  (uint64_t)v8,  type metadata accessor for IDSGroupEncryptionPublicIdentity);
    v17 = v16;
    v18 = sub_1004D32E8();
    sub_1003F6050((uint64_t)v8, type metadata accessor for IDSGroupEncryptionPublicIdentity);

    if ((v18 & 1) == 0)
    {
      *(unint64_t *)((char *)v25 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      if (__OFADD__(v26++, 1LL))
      {
        __break(1u);
LABEL_24:
        sub_10049CFA8(v25, v24, v26, (void *)a3);
        return;
      }
    }
  }

  v21 = v19 + 3;
  if (v21 >= v28) {
    goto LABEL_24;
  }
  v20 = *(void *)(v27 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_20;
  }

  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v9 >= v28) {
      goto LABEL_24;
    }
    v20 = *(void *)(v27 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_20;
    }
  }

    v6 = (v17 - 1) & v17;
    v11 = __clz(__rbit64(v17)) + (v8 << 6);
LABEL_5:
    v12 = *(void **)(*(void *)(v2 + 56) + 8 * v11);
    v13 = *v7;
    v14 = *(void (**)(uint64_t))((swift_isaMask & *v12) + 0x1A0LL);
    v15 = v12;
    v14(v13);
  }

  v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_21:
    swift_release(v2);
    return;
  }

  v17 = *(void *)(v3 + 8 * v18);
  if (v17)
  {
    v8 = v18;
    goto LABEL_20;
  }

  while (1)
  {
    v8 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v8 >= v9) {
      goto LABEL_21;
    }
    v17 = *(void *)(v3 + 8 * v8);
    ++v18;
    if (v17) {
      goto LABEL_20;
    }
  }

    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = *(void **)(*(void *)(v2 + 56) + 8 * v10);
    v12 = *(void (**)(void))((swift_isaMask & *v11) + 0x218LL);
    v13 = v11;
    v12();
  }

  v16 = v14 + 3;
  if (v16 >= v8)
  {
LABEL_21:
    swift_release(v2);
    return;
  }

  v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    id v3 = v16;
    goto LABEL_20;
  }

  while (1)
  {
    id v3 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_21;
    }
    v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }

void sub_1000071D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v4 = *(void **)(a1 + 32);
  id v13 = v3;
  v5 = (void *)objc_claimAutoreleasedReturnValue([v3 serviceName]);
  v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v5]);

  if (!v6)
  {
    v7 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    v8 = *(void **)(a1 + 32);
    v9 = (void *)objc_claimAutoreleasedReturnValue([v13 serviceName]);
    [v8 setObject:v7 forKeyedSubscript:v9];
  }

  v10 = *(void **)(a1 + 32);
  v11 = (void *)objc_claimAutoreleasedReturnValue([v13 serviceName]);
  v12 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:v11]);

  [v12 addObject:v13];
}

void sub_100007508(id a1)
{
  v1 = objc_alloc_init(&OBJC_CLASS___IDSDeviceHeartbeatCenter);
  uint64_t v2 = (void *)qword_1009BE588;
  qword_1009BE588 = (uint64_t)v1;
}
}

  ;
}

id sub_100007E64(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateDependentRegistrations];
}

id sub_10000803C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _heartBeat];
}

void sub_100008138(id a1)
{
  off_1009BE590 = (_UNKNOWN *)IMWeakLinkSymbol("PLLogRegisteredEvent", @"PowerLog");
}

LABEL_21:
            }

            continue;
          }
        }

        v12 = [v10 countByEnumeratingWithState:&v22 objects:v28 count:16];
      }

      while (v12);
    }

    if (!-[NSMutableDictionary count](self->_usersToHeartbeatDatesMap, "count")) {
      -[IDSDeviceHeartbeatCenter invalidateTimer](self, "invalidateTimer");
    }

    objc_autoreleasePoolPop(context);
  }

  else
  {
    if (v5)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Not setup yet, ignoring accounts change...",  buf,  2u);
    }
  }

  return v24;
}

  os_unfair_lock_unlock(p_lock);
  return v7 == 0 || v3;
}

    -[IDSSocketPairConnection _endSession](self, "_endSession");
    return;
  }

  v27 = OSLogHandleForIDSCategory("FTMessageDelivery");
  v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    v29 = self->_connectedSocket;
    *(_DWORD *)v48 = 67109120;
    *(_DWORD *)&v48[4] = v29;
    _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "No data to send on socket, suspending {socket:%d}",  v48,  8u);
  }

  if (os_log_shim_legacy_logging_enabled(v30))
  {
    if (MarcoShouldLog(@"IDSAgent")) {
      MarcoLog( 0LL,  @"IDSAgent",  @"SPConnection",  @"No data to send on socket, suspending {socket:%d}");
    }
    if (IMShouldLog(@"IDS", 0LL)) {
      IMLogString( 0LL,  @"IDS",  @"IDSAgent",  @"FTMessageDelivery",  @"No data to send on socket, suspending {socket:%d}");
    }
  }

  priority = self->_priority;
  self->_writeSocketIsResumed = 0;
  IDSTransportThreadInitWithPriority(priority);
  IDSTransportThreadSuspendSocketWithPriority(self->_connectedSocket, 2LL, self->_priority);
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472LL;
  v41[2] = sub_100048598;
  v41[3] = &unk_1008F79C0;
  v41[4] = self;
  -[IDSSocketPairConnection _callDelegateWithBlock:](self, "_callDelegateWithBlock:", v41);
}
}
  }
            }
          }

          v11 = [v9 countByEnumeratingWithState:&v52 objects:v61 count:16];
        }

        while (v11);
      }

      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v22 = v36;
      v23 = [v22 countByEnumeratingWithState:&v44 objects:v57 count:16];
      if (v23)
      {
        v24 = v23;
        v25 = *(void *)v45;
        do
        {
          for (k = 0LL; k != v24; k = (char *)k + 1)
          {
            if (*(void *)v45 != v25) {
              objc_enumerationMutation(v22);
            }
            v27 = *(void **)(*((void *)&v44 + 1) + 8LL * (void)k);
            if ([v27 accountType] == 1)
            {
              v28 = (void *)objc_claimAutoreleasedReturnValue([v27 unprefixedURIStringsFromRegistration]);
              v40 = 0u;
              v41 = 0u;
              v42 = 0u;
              v43 = 0u;
              v29 = v28;
              v30 = [v29 countByEnumeratingWithState:&v40 objects:v56 count:16];
              if (v30)
              {
                v31 = v30;
                v32 = *(void *)v41;
                while (2)
                {
                  for (m = 0LL; m != v31; m = (char *)m + 1)
                  {
                    if (*(void *)v41 != v32) {
                      objc_enumerationMutation(v29);
                    }
                    if (IMStringIsPhoneNumber(*(void *)(*((void *)&v40 + 1) + 8LL * (void)m)))
                    {
                      v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)buf = 138412290;
                        v59 = v27;
                        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "We found a phone number alias on the FaceTime account, triggering GDR request for %@",  buf,  0xCu);
                      }

                      a1 = v39;
                      [*(id *)(v39 + 32) issueGetDependentRequestForAccount:v27];
                      goto LABEL_42;
                    }
                  }

                  v31 = [v29 countByEnumeratingWithState:&v40 objects:v56 count:16];
                  a1 = v39;
                  if (v31) {
                    continue;
                  }
                  break;
                }
              }

    v33 = _IDSLinkPacketBufferCreate( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSUDPGlobalLink.m",  612LL);
    v34 = v33;
    if (self->_state != 4)
    {
      *(_DWORD *)(v33 + 48) = v10;
      memcpy((void *)(v33 + 56), __src, *(unsigned __int8 *)__src);
      memcpy((void *)(v34 + 184), a7, a7->sa_len);
LABEL_28:
      memset(v117, 170, sizeof(v117));
      v37 = -[NSData getAttribute:attribute:](v13, "getAttribute:attribute:", 32773LL, v117);
      if ((_DWORD)v37)
      {
        v38 = *(unsigned __int16 *)&v117[12];
        v39 = ids_monotonic_time(v37);
        v40 = bswap32(v38) >> 16;
        if (qword_1009BEBB0 != -1)
        {
          v102 = v39;
          dispatch_once(&qword_1009BEBB0, &stru_1008FBA88);
          v39 = v102;
        }
      }

      else
      {
        v41 = 0;
        v40 = 0LL;
      }

      v42 = (NSData *)[[IDSStunMessage alloc] initWithType:257];
      v43 = *(void *)v34;
      v44 = (void *)objc_claimAutoreleasedReturnValue(-[NSData transactionID](v13, "transactionID"));
      v45 = *(void *)(v34 + 8);
      keyData = self->_keyData;
      -[NSData stunResponseToBuffer:outputLength:transactionID:reqCount:echoTime:delay:keyData:remainingLength:]( v42,  "stunResponseToBuffer:outputLength:transactionID:reqCount:echoTime:delay:keyData:remainingLength:",  v43,  v34 + 16,  v44,  v103,  v40,  v41,  keyData,  v45);

      v46 = OSLogHandleForTransportCategory("UGL");
      v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        v48 = SAToIPPortString(v108, 128LL, __src);
        v49 = *(_DWORD *)(v34 + 48);
        v50 = SAToIPPortString(v107, 128LL, a7);
        *(_DWORD *)v109 = 138413058;
        v110 = (const char *)v42;
        v111 = 2080;
        v112 = v48;
        v113 = 1024;
        v114 = v49;
        v115 = 2080;
        v116 = v50;
        _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "send binding response %@ for [%s(%u)-%s].",  v109,  0x26u);
      }

      v52 = os_log_shim_legacy_logging_enabled(v51);
      if ((_DWORD)v52)
      {
        if (_IDSShouldLogTransport(v52))
        {
          v53 = SAToIPPortString(v108, 128LL, __src);
          v54 = *(unsigned int *)(v34 + 48);
          v55 = SAToIPPortString(v107, 128LL, a7);
          v100 = v54;
          v101 = v55;
          keyData = v42;
          v99 = v53;
          _IDSLogTransport(@"UGL", @"IDS", @"send binding response %@ for [%s(%u)-%s].");
          if (_IDSShouldLog(0LL, @"UGL"))
          {
            v56 = SAToIPPortString(v108, 128LL, __src);
            v57 = *(unsigned int *)(v34 + 48);
            v58 = SAToIPPortString(v107, 128LL, a7);
            v100 = v57;
            v101 = v58;
            keyData = v42;
            v99 = v56;
            _IDSLogV(0LL, @"IDSFoundation", @"UGL", @"send binding response %@ for [%s(%u)-%s].");
          }
        }
      }

      v59 = (unint64_t)-[IDSUDPLink sendPacketBuffer:toDeviceUniqueID:cbuuid:]( self->_udpLink,  "sendPacketBuffer:toDeviceUniqueID:cbuuid:",  v34,  self->_deviceUniqueID,  v105);
      if (v59)
      {
        v60 = OSLogHandleForTransportCategory("UGL");
        v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
        {
          if (v59 > 0xF) {
            v62 = "UnexpectedSendResult";
          }
          else {
            v62 = (const char *)_IDSLinkSendResultStrings[v59];
          }
          *(_DWORD *)v109 = 136315138;
          v110 = v62;
          _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEFAULT,  "send binding response failed with %s",  v109,  0xCu);
        }

        v68 = os_log_shim_legacy_logging_enabled(v67);
        if ((_DWORD)v68 && _IDSShouldLogTransport(v68))
        {
          v69 = v59 > 0xF ? "UnexpectedSendResult" : (char *)_IDSLinkSendResultStrings[v59];
          keyData = (NSData *)v69;
          _IDSLogTransport(@"UGL", @"IDS", @"send binding response failed with %s");
          if (_IDSShouldLog(0LL, @"UGL"))
          {
            if (v59 > 0xF) {
              v86 = "UnexpectedSendResult";
            }
            else {
              v86 = (const char *)_IDSLinkSendResultStrings[v59];
            }
            keyData = (NSData *)v86;
            _IDSLogV(0LL, @"IDSFoundation", @"UGL", @"send binding response failed with %s");
          }
        }
      }

      goto LABEL_94;
    }

    ss_family = self->_destinationAddress.ss_family;
    if (ss_family == a7->sa_family)
    {
      if (ss_family == 30)
      {
        if (*(unsigned __int16 *)self->_destinationAddress.__ss_pad1 == *(unsigned __int16 *)a7->sa_data)
        {
          v36 = self->_destinationAddress.__ss_align == *(void *)&a7->sa_data[6]
             && *(void *)self->_destinationAddress.__ss_pad2 == *(void *)&a7[1].sa_len;
          goto LABEL_59;
        }
      }

      else if (ss_family == 2 {
             && *(unsigned __int16 *)self->_destinationAddress.__ss_pad1 == *(unsigned __int16 *)a7->sa_data)
      }
      {
        v36 = *(_DWORD *)&self->_destinationAddress.__ss_pad1[2] == *(_DWORD *)&a7->sa_data[2];
LABEL_59:
        v70 = v36;
        p_sourceInterfaceIndex = &self->_sourceInterfaceIndex;
        if (self->_sourceInterfaceIndex != (_DWORD)v10 || (v70 & 1) == 0) {
          goto LABEL_66;
        }
        goto LABEL_28;
      }
    }

    p_sourceInterfaceIndex = &self->_sourceInterfaceIndex;
LABEL_66:
    p_destinationAddress = &self->_destinationAddress;
    v73 = OSLogHandleForTransportCategory("UGL");
    v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
    {
      v75 = SAToIPPortString(v107, 128LL, a7);
      v76 = *p_sourceInterfaceIndex;
      v77 = SAToIPPortString(v108, 128LL, p_destinationAddress);
      *(_DWORD *)v117 = 136315650;
      *(void *)&v117[4] = v75;
      *(_WORD *)&v117[12] = 1024;
      *(_DWORD *)&v117[14] = v76;
      *(_WORD *)&v117[18] = 2080;
      *(void *)&v117[20] = v77;
      _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEFAULT,  "skip binding response to %s, socket on if_index %d is already connected to %s.",  v117,  0x1Cu);
    }

    v79 = os_log_shim_legacy_logging_enabled(v78);
    if ((_DWORD)v79)
    {
      if (_IDSShouldLogTransport(v79))
      {
        v80 = SAToIPPortString(v107, 128LL, a7);
        v81 = *p_sourceInterfaceIndex;
        v82 = SAToIPPortString(v108, 128LL, p_destinationAddress);
        v99 = v81;
        v100 = v82;
        keyData = (NSData *)v80;
        _IDSLogTransport( @"UGL",  @"IDS",  @"skip binding response to %s, socket on if_index %d is already connected to %s.");
        if (_IDSShouldLog(0LL, @"UGL"))
        {
          v83 = SAToIPPortString(v107, 128LL, a7);
          v84 = *p_sourceInterfaceIndex;
          v85 = SAToIPPortString(v108, 128LL, p_destinationAddress);
          v99 = v84;
          v100 = v85;
          keyData = (NSData *)v83;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"UGL",  @"skip binding response to %s, socket on if_index %d is already connected to %s.");
        }
      }
    }

    _IDSLinkPacketBufferRelease( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSUDPGlobalLink.m",  631LL,  v34);
    goto LABEL_94;
  }

  v63 = OSLogHandleForTransportCategory("UGL");
  v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v117 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "process nomination request before Accept, this should NOT happen.",  v117,  2u);
  }

  v66 = os_log_shim_legacy_logging_enabled(v65);
  if ((_DWORD)v66)
  {
    if (_IDSShouldLogTransport(v66))
    {
      _IDSLogTransport( @"UGL",  @"IDS",  @"process nomination request before Accept, this should NOT happen.");
      if (_IDSShouldLog(0LL, @"UGL")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"UGL",  @"process nomination request before Accept, this should NOT happen.");
      }
    }
  }

            continue;
          }

          if (v36)
          {
            *(_DWORD *)buf = 138412290;
            v50 = v31;
            _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "updateLightweightMemberTypes: member %@ is now standard and wasn't before; should get MKMs",
              buf,
              0xCu);
          }

          [v42 addObject:v31];
        }

        v28 = [v26 countByEnumeratingWithState:&v44 objects:v48 count:16];
      }

      while (v28);
    }

    v14 = v40;
    id v13 = v41;
    v15 = v39;
    v16 = v42;
  }

  os_unfair_lock_unlock(&self->_lock);
  if ([v16 count])
  {
    v37 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      v38 = [v16 count];
      *(_DWORD *)buf = 134218242;
      v50 = v38;
      v51 = 2112;
      v52 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "updateLightweightMemberTypes: have %lu new standard members: %@",  buf,  0x16u);
    }

    -[IDSGroupEncryptionController1 requestKeyMaterialForGroup:sessionID:toSpecificMembers:requireMKM:requireSKM:]( self,  "requestKeyMaterialForGroup:sessionID:toSpecificMembers:requireMKM:requireSKM:",  v14,  v15,  v16,  1LL,  1LL);
  }

  -[IDSGroupEncryptionController1 _updateRelevantEncryptedDataBlobForSession:]( self,  "_updateRelevantEncryptedDataBlobForSession:",  v15);
  -[IDSGroupEncryptionController1 updateServerDesiredKeyMaterialsForGroup:sessionID:]( self,  "updateServerDesiredKeyMaterialsForGroup:sessionID:",  v14,  v15);
}
}

  return v25;
}

  return v25;
}

  return v25;
}

  -[IDSUTunConnection _removeSocketPairMessage:localMessage:reason:responseCode:]( v26,  "_removeSocketPairMessage:localMessage:reason:responseCode:",  v27,  v28,  v25,  v29);
  v31 = -[IDSUTunConnection _inflightMessageCountForClass:](self, "_inflightMessageCountForClass:", v8);
  if (v9 && !v31) {
    -[IDSUTunConnection _handleBecomingEmptyForDataProtectionClass:]( self,  "_handleBecomingEmptyForDataProtectionClass:",  v8);
  }
}

        v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      v6 = [v4 countByEnumeratingWithState:&v57 objects:v67 count:16];
    }

    while (v6);
  }

  return Mutable;
}

  return v22;
}

      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "guid", v35, v36));
      v22 = (void *)objc_claimAutoreleasedReturnValue([a1[6] alternateGUID]);
      +[IDSDMessageStore deleteOutgoingMessageWithGUID:alternateGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteOutgoingMessageWithGUID:alternateGUID:",  v21,  v22);

LABEL_33:
    }
  }
}

          sub_1003F7C80(v106);
          v107 = (uint64_t)v140;
          return sub_1003F6050(v107, type metadata accessor for IDSGroupEncryptionKeyMaterialController.State);
        }
      }

      swift_bridgeObjectRelease(v91);
      swift_bridgeObjectRelease(v89);
      swift_bridgeObjectRelease(v87);
      v108 = swift_bridgeObjectRelease(v85);
      v109 = (os_log_s *)Logger.logObject.getter(v108);
      v110 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v109, v110))
      {
        v111 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        v112 = swift_slowAlloc(32LL, -1LL);
        v150 = v112;
        *(_DWORD *)v111 = 136315138;
        v152 = sub_1003FFBB0(0x5F28657461647075LL, 0xEA0000000000293ALL, &v150);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &v153, v111 + 4, v111 + 12);
        _os_log_impl( (void *)&_mh_execute_header,  v109,  v110,  "%s: This is initially setting members, should not roll/ratchet, but should ensure we have a key",  v111,  0xCu);
        swift_arrayDestroy(v112, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v112, -1LL, -1LL);
        swift_slowDealloc(v111, -1LL, -1LL);
      }

      v113 = v138;
      v114 = (uint64_t)v142;
      v115 = (uint64_t)v140;
      v116 = *(void *)((char *)v137 + (void)v142);
      if ((v116 & 0xC000000000000001LL) != 0)
      {
        if (v116 < 0) {
          v117 = *(void *)((char *)v137 + (void)v142);
        }
        else {
          v117 = v116 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(*(void *)((char *)v137 + (void)v142));
        v118 = __CocoaSet.count.getter(v117);
        swift_bridgeObjectRelease(v116);
        if (v118 < 1) {
          goto LABEL_31;
        }
      }

      else if (*(uint64_t *)(v116 + 16) < 1)
      {
        goto LABEL_31;
      }

      (*(void (**)(uint64_t))((swift_isaMask & *v113) + 0x1E8LL))(v114);
LABEL_31:
      v107 = v115;
      return sub_1003F6050(v107, type metadata accessor for IDSGroupEncryptionKeyMaterialController.State);
    }
  }

  v69 = (char *)v2 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_l;
  v70 = (os_log_s *)Logger.logObject.getter(Strong);
  v71 = static os_log_type_t.default.getter();
  v72 = v8;
  if (os_log_type_enabled(v70, v71))
  {
    v73 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v74 = swift_slowAlloc(32LL, -1LL);
    v150 = v74;
    *(_DWORD *)v73 = 136315138;
    v152 = sub_1003FFBB0(0x5F28657461647075LL, 0xEA0000000000293ALL, &v150);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &v153, v73 + 4, v73 + 12);
    _os_log_impl((void *)&_mh_execute_header, v70, v71, "%s: not updating because session has gone away", v73, 0xCu);
    swift_arrayDestroy(v74, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v74, -1LL, -1LL);
    swift_slowDealloc(v73, -1LL, -1LL);
  }

  v76 = (os_log_s *)Logger.logObject.getter(v75);
  v77 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v76, v77))
  {
    v78 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v79 = swift_slowAlloc(32LL, -1LL);
    v150 = v79;
    *(_DWORD *)v78 = 136315138;
    v152 = sub_1003FFBB0(0x5F28657461647075LL, 0xEA0000000000293ALL, &v150);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &v153, v78 + 4, v78 + 12);
    _os_log_impl((void *)&_mh_execute_header, v76, v77, "%s: setting state to .noKey", v78, 0xCu);
    swift_arrayDestroy(v79, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v79, -1LL, -1LL);
    swift_slowDealloc(v78, -1LL, -1LL);
  }

  sub_1003F6050(a1, type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState);
  swift_storeEnumTagMultiPayload(a1, v72, 2LL);
  return (*(uint64_t (**)(char *, void, unint64_t, uint64_t))((swift_isaMask & *v2) + 0x208LL))( v69,  0LL,  0xE000000000000000LL,  a1);
}

    v52 = (v11 - 1) & v11;
    v53 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
    goto LABEL_22;
  }

  v52 = (v5 - 1) & v5;
  v53 = v6;
  v9 = __clz(__rbit64(v5)) | (v6 << 6);
LABEL_22:
  v51 = *(_DWORD *)(*(void *)(v50 + 48) + 4 * v9);
  v14 = *(void *)(*(void *)(v50 + 56) + 8 * v9);
  swift_bridgeObjectRetain(v14);
  v15 = (void *)sub_100412104((uint64_t)&_swiftEmptyArrayStorage);
  v16 = 0LL;
  v55 = v14 + 64;
  v17 = 1LL << *(_BYTE *)(v14 + 32);
  if (v17 < 64) {
    v18 = ~(-1LL << v17);
  }
  else {
    v18 = -1LL;
  }
  v19 = v18 & *(void *)(v14 + 64);
  v56 = (unint64_t)(v17 + 63) >> 6;
  v57 = v14;
  while (1)
  {
    if (v19)
    {
      v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v22 = v21 | (v16 << 6);
    }

    else
    {
      v23 = v16 + 1;
      if (__OFADD__(v16, 1LL)) {
        goto LABEL_58;
      }
      if (v23 >= v56)
      {
LABEL_5:
        swift_release(v57);
        v7 = [objc_allocWithZone(NSNumber) initWithUnsignedInt:v51];
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v54);
        sub_100419A00((uint64_t)v15, v7, isUniquelyReferenced_nonNull_native);
        uint64_t v2 = v54;

        swift_bridgeObjectRelease(0x8000000000000000LL);
        v5 = v52;
        v6 = v53;
        goto LABEL_6;
      }

      v24 = *(void *)(v55 + 8 * v23);
      ++v16;
      if (!v24)
      {
        v16 = v23 + 1;
        if (v23 + 1 >= v56) {
          goto LABEL_5;
        }
        v24 = *(void *)(v55 + 8 * v16);
        if (!v24)
        {
          v16 = v23 + 2;
          if (v23 + 2 >= v56) {
            goto LABEL_5;
          }
          v24 = *(void *)(v55 + 8 * v16);
          if (!v24)
          {
            v25 = v23 + 3;
            if (v25 >= v56) {
              goto LABEL_5;
            }
            v24 = *(void *)(v55 + 8 * v25);
            if (!v24)
            {
              while (1)
              {
                v16 = v25 + 1;
                if (__OFADD__(v25, 1LL)) {
                  goto LABEL_59;
                }
                if (v16 >= v56) {
                  goto LABEL_5;
                }
                v24 = *(void *)(v55 + 8 * v16);
                ++v25;
                if (v24) {
                  goto LABEL_43;
                }
              }
            }

            v16 = v25;
          }
        }
      }

    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1LL << v3) - 1;
  }

  else
  {
    v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1LL << result) - 1;
  }

  *v22 = v24 & v23;
  v25 = *(void *)(a2 + 16);
  v26 = __OFSUB__(v25, 1LL);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

  v27 = sub_100438A1C( (uint64_t)v6,  (unint64_t *)&unk_1009BC270,  &OBJC_CLASS___IDSURI_ptr,  (unint64_t *)&unk_1009BAC00,  &qword_1009B9D90);
  swift_bridgeObjectRelease(v6);
  v28 = (Swift::Int *)(v132 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_membersByURI);
  swift_beginAccess( v132 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_membersByURI,  &v137,  0LL,  0LL);
  swift_bridgeObjectRetain(*v28);
  sub_100428B44(v29);
  v31 = v30;
  swift_bridgeObjectRetain(v27);
  v32 = (uint64_t)sub_100428E34(v31, v27);
  v33 = sub_100428E34(v27, v31);
  v34 = (void *)swift_bridgeObjectRelease(v27);
  if ((v32 & 0xC000000000000001LL) != 0)
  {
    if (v32 < 0) {
      v35 = v32;
    }
    else {
      v35 = v32 & 0xFFFFFFFFFFFFFF8LL;
    }
    v36 = __CocoaSet.makeIterator()(v35);
    v37 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
    v38 = sub_100438928( (unint64_t *)&unk_1009BAC00,  (unint64_t *)&unk_1009BC270,  &OBJC_CLASS___IDSURI_ptr);
    v34 = Set.Iterator.init(_cocoa:)(&v138, v36, v37, v38);
    v32 = v138;
    v134 = v139;
    v39 = v140;
    v40 = v141;
    v41 = v142;
  }

  else
  {
    v40 = 0LL;
    v42 = -1LL << *(_BYTE *)(v32 + 32);
    v134 = v32 + 56;
    v43 = ~v42;
    v44 = -v42;
    if (v44 < 64) {
      v45 = ~(-1LL << v44);
    }
    else {
      v45 = -1LL;
    }
    v41 = v45 & *(void *)(v32 + 56);
    v39 = v43;
  }

  v133 = (unint64_t)(v39 + 64) >> 6;
  v130 = (uint64_t)v33;
  while (v32 < 0)
  {
    v51 = __CocoaSet.Iterator.next()(v34);
    if (!v51) {
      goto LABEL_69;
    }
    v52 = v51;
    v136[0] = v51;
    v53 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
    swift_unknownObjectRetain(v52, v54);
    swift_dynamicCast(v143, v136, (char *)&type metadata for Swift.AnyObject + 8, v53, 7LL);
    v55 = (id)v143[0];
    swift_unknownObjectRelease(v52, v56);
    v50 = v40;
    v48 = v41;
    if (!v55) {
      goto LABEL_69;
    }
LABEL_54:
    v60 = type metadata accessor for IDSGroupPushMaterialExchangeMember(0LL);
    v61 = swift_allocObject(v60, *(unsigned int *)(v60 + 48), *(unsigned __int16 *)(v60 + 52));
    v62 = v61 + OBJC_IVAR____TtC17identityservicesd34IDSGroupPushMaterialExchangeMember_sentPublicIdentity;
    v63 = type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56LL))(v62, 1LL, 1LL, v63);
    *(void *)(v61 + 16) = v55;
    swift_beginAccess(v28, v143, 33LL, 0LL);
    v64 = *v28;
    if ((*v28 & 0xC000000000000001LL) != 0)
    {
      if (v64 >= 0) {
        v64 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      v65 = v55;
      v66 = __CocoaDictionary.count.getter(v64);
      if (__OFADD__(v66, 1LL)) {
        goto LABEL_115;
      }
      v64 = sub_100434114(v64, v66 + 1);
      *v28 = v64;
    }

    else
    {
      v67 = v55;
    }

    v68 = swift_isUniquelyReferenced_nonNull_native(v64);
    v136[0] = *v28;
    v69 = v136[0];
    *v28 = 0x8000000000000000LL;
    v71 = sub_100433024((uint64_t)v55);
    v72 = *(void *)(v69 + 16);
    v73 = (v70 & 1) == 0;
    v74 = v72 + v73;
    if (__OFADD__(v72, v73))
    {
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      v129 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v129);
      __break(1u);
      return result;
    }

    v75 = v70;
    if (*(void *)(v69 + 24) >= v74)
    {
      if ((v68 & 1) == 0) {
        sub_100435224();
      }
    }

    else
    {
      sub_10043434C(v74, v68);
      v76 = sub_100433024((uint64_t)v55);
      if ((v75 & 1) != (v77 & 1)) {
        goto LABEL_121;
      }
      v71 = v76;
    }

    v78 = (void *)v136[0];
    v79 = 8 * v71;
    if ((v75 & 1) != 0)
    {
      v46 = *(void *)(v136[0] + 56LL);
      swift_release(*(void *)(v46 + v79));
      *(void *)(v46 + v79) = v61;
    }

    else
    {
      *(void *)(v136[0] + 8 * (v71 >> 6) + 64) |= 1LL << v71;
      *(void *)(v78[6] + 8 * v71) = v55;
      *(void *)(v78[7] + 8 * v71) = v61;
      v80 = v78[2];
      v81 = __OFADD__(v80, 1LL);
      v82 = v80 + 1;
      if (v81) {
        goto LABEL_116;
      }
      v78[2] = v82;
      v83 = v55;
    }

    v47 = *v28;
    *v28 = (Swift::Int)v78;
    swift_bridgeObjectRelease(v47);
    swift_endAccess(v143);

    v40 = v50;
    v41 = v48;
  }

  if (v41)
  {
    v48 = (v41 - 1) & v41;
    v49 = __clz(__rbit64(v41)) | (v40 << 6);
    v50 = v40;
    goto LABEL_53;
  }

  v57 = v40 + 1;
  if (__OFADD__(v40, 1LL)) {
    goto LABEL_118;
  }
  if (v57 < v133)
  {
    v58 = *(void *)(v134 + 8 * v57);
    v50 = v40 + 1;
    if (!v58)
    {
      v50 = v40 + 2;
      if (v40 + 2 >= v133) {
        goto LABEL_69;
      }
      v58 = *(void *)(v134 + 8 * v50);
      if (!v58)
      {
        v50 = v40 + 3;
        if (v40 + 3 >= v133) {
          goto LABEL_69;
        }
        v58 = *(void *)(v134 + 8 * v50);
        if (!v58)
        {
          v50 = v40 + 4;
          if (v40 + 4 >= v133) {
            goto LABEL_69;
          }
          v58 = *(void *)(v134 + 8 * v50);
          if (!v58)
          {
            v59 = v40 + 5;
            do
            {
              if (v133 == v59) {
                goto LABEL_69;
              }
              v58 = *(void *)(v134 + 8 * v59++);
            }

            while (!v58);
            v50 = v59 - 1;
          }
        }
      }
    }

    v48 = (v58 - 1) & v58;
    v49 = __clz(__rbit64(v58)) + (v50 << 6);
LABEL_53:
    v55 = *(id *)(*(void *)(v32 + 48) + 8 * v49);
    if (!v55) {
      goto LABEL_69;
    }
    goto LABEL_54;
  }

  if (v47 < 0) {
    v72 = v47;
  }
  else {
    v72 = v47 & 0xFFFFFFFFFFFFFF8LL;
  }
  while (1)
  {
    while (1)
    {
      v78 = v142;
      v79 = v143;
      v80 = v144;
      sub_10049545C(v142, v143, v144, v47);
      v82 = v81;
      v83 = *(id *)&v81[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_pushToken];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v84);
      v85 = v145[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v85);
      v86 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v85, v83);
      specialized ContiguousArray._endMutation()(v86);
      if ((v47 & 0xC000000000000001LL) != 0) {
        break;
      }
      v73 = sub_100437F28(v78, v79, v80, v47);
      v75 = v74;
      v77 = v76;
      sub_1004398F4(v78, v79, v80);
      v142 = v73;
      v143 = v75;
      v144 = v77 & 1;
      if (!--v68) {
        goto LABEL_31;
      }
    }

    if ((v80 & 1) == 0) {
      break;
    }
    v87 = __CocoaSet.Index.handleBitPattern.getter(v78, v79);
    if (v87) {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v87);
    }
    else {
      isUniquelyReferenced_nonNull_native = 1LL;
    }
    v89 = sub_1003F5CB4(&qword_1009BB760);
    v90 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify(v141, v89);
    __CocoaSet.formIndex(after:isUnique:)(v91, isUniquelyReferenced_nonNull_native, v72);
    v90(v141, 0LL);
    if (!--v68)
    {
LABEL_31:
      sub_1004398F4(v142, v143, v144);
      v62 = v145;
      swift_bridgeObjectRelease(v47);
      v42 = (void *)v139;
      goto LABEL_33;
    }
  }

  __break(1u);
}

    swift_bridgeObjectRelease(v2);
    v31 = _swiftEmptyArrayStorage;
LABEL_22:
    v32 = sub_100438A1C( (uint64_t)v31,  (unint64_t *)&qword_1009BBE30,  &OBJC_CLASS___IDSPushToken_ptr,  (unint64_t *)&qword_1009BC4C0,  (uint64_t *)&unk_1009B99A0);
    swift_bridgeObjectRelease(v31);
    return v32;
  }

  if (v1 < 0) {
    v4 = v1;
  }
  else {
    v4 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  v5 = __CocoaSet.count.getter(v4);
  if (!v5) {
    goto LABEL_21;
  }
  v6 = v5;
  v37 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v5);
  v34 = __CocoaSet.startIndex.getter(v4);
  v35 = v7;
  v36 = 1;
  if (v6 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }

    swift_bridgeObjectRelease(v2);
    v31 = _swiftEmptyArrayStorage;
LABEL_22:
    v32 = sub_100438A1C( (uint64_t)v31,  (unint64_t *)&qword_1009BBE30,  &OBJC_CLASS___IDSPushToken_ptr,  (unint64_t *)&qword_1009BC4C0,  (uint64_t *)&unk_1009B99A0);
    swift_bridgeObjectRelease(v31);
    return v32;
  }

  if (v1 < 0) {
    v4 = v1;
  }
  else {
    v4 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  v5 = __CocoaSet.count.getter(v4);
  if (!v5) {
    goto LABEL_21;
  }
  v6 = v5;
  v37 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v5);
  v34 = __CocoaSet.startIndex.getter(v4);
  v35 = v7;
  v36 = 1;
  if (v6 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }

    swift_bridgeObjectRelease(v2);
    v31 = _swiftEmptyArrayStorage;
LABEL_22:
    v32 = sub_100438A1C( (uint64_t)v31,  (unint64_t *)&qword_1009BBE30,  &OBJC_CLASS___IDSPushToken_ptr,  (unint64_t *)&qword_1009BC4C0,  (uint64_t *)&unk_1009B99A0);
    swift_bridgeObjectRelease(v31);
    return v32;
  }

  if (v1 < 0) {
    v4 = v1;
  }
  else {
    v4 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  v5 = __CocoaSet.count.getter(v4);
  if (!v5) {
    goto LABEL_21;
  }
  v6 = v5;
  v37 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v5);
  v34 = __CocoaSet.startIndex.getter(v4);
  v35 = v7;
  v36 = 1;
  if (v6 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }

    v23 = (v31 - 1) & v31;
    v29 = __clz(__rbit64(v31)) + (v30 << 6);
    v24 = v30;
  }

  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

    v50 = (v26 - 1) & v26;
    v51 = v27;
    v24 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_22:
    v29 = *(void *)(v47 + 48);
    v30 = *(void *)(v46 + 72);
    v49 = v24;
    sub_1003F5FC8(v29 + v30 * v24, (uint64_t)v15, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    if (*(void *)(v23 + 16)
      && (v31 = *(void *)(v23 + 40),
          v32 = sub_10040A2B0( &qword_1009B90D0,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718E98),  v33 = dispatch thunk of Hashable._rawHashValue(seed:)(v31, v6, v32),  v34 = -1LL << *(_BYTE *)(v23 + 32),  v35 = v33 & ~v34,  ((*(void *)(v52 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v35) & 1) != 0))
    {
      v36 = ~v34;
      while (1)
      {
        sub_1003F5FC8( *(void *)(v23 + 48) + v35 * v30,  (uint64_t)v10,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        v37 = sub_10040A2B0( &qword_1009B90D8,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718ED8);
        v38 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v15, v6, v37);
        sub_1003F6050((uint64_t)v10, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        if ((v38 & 1) != 0) {
          break;
        }
        v35 = (v35 + 1) & v36;
        if (((*(void *)(v52 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v35) & 1) == 0) {
          goto LABEL_27;
        }
      }

      result = sub_1003F6050((uint64_t)v15, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      v22 = v50;
      v16 = v51;
    }

    else
    {
LABEL_27:
      result = sub_1003F6050((uint64_t)v15, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      *(unint64_t *)((char *)v43 + ((v49 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v49;
      v39 = __OFADD__(v48++, 1LL);
      v22 = v50;
      v16 = v51;
      if (v39)
      {
        __break(1u);
LABEL_30:
        v40 = v47;
        swift_retain(v47);
        return sub_1004C63D0(v43, v42, v48, v40);
      }
    }
  }

  v28 = v16 + 4;
  if (v16 + 4 >= v45) {
    goto LABEL_30;
  }
  v26 = *(void *)(v44 + 8 * v28);
  if (v26)
  {
    v27 = v16 + 4;
    goto LABEL_21;
  }

  while (1)
  {
    v27 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v27 >= v45) {
      goto LABEL_30;
    }
    v26 = *(void *)(v44 + 8 * v27);
    ++v28;
    if (v26) {
      goto LABEL_21;
    }
  }

void sub_100008BA4( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

id sub_1000091A8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _processIncomingPacket];
}

LABEL_43:
  return v15;
}
    }

    v30 = [obj countByEnumeratingWithState:&v77 objects:v94 count:16];
  }

  while (v30);
LABEL_45:

  os_unfair_lock_unlock(lock);
  v55 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
  if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v86 = v29;
    _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "_protectedCachedKeyMaterialsForDestination: returning %@",  buf,  0xCu);
  }

  v11 = v58;
  if (a6) {
    *a6 = (id)objc_claimAutoreleasedReturnValue([v63 membershipURIs]);
  }
  v56 = v29;
LABEL_53:

LABEL_57:
  return v56;
}

    v24 = 0LL;
LABEL_44:
    -[IDSUTunConnection _removeSocketPairMessage:localMessage:reason:responseCode:]( self,  "_removeSocketPairMessage:localMessage:reason:responseCode:",  v24,  v20,  @"queue one identifier",  13LL);
  }

  v34 = (void *)objc_claimAutoreleasedReturnValue([v73 expirationDate]);
  v35 = v34 == 0LL;

  if (v35)
  {
    if (-[IDSUTunConnection _isWiProxPeer](self, "_isWiProxPeer")) {
      v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  30.0));
    }
    else {
      v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  120.0));
    }
    [v73 setExpirationDate:v36];
  }

  v37 = (void *)objc_claimAutoreleasedReturnValue([v73 resourcePath]);
  v38 = v37 == 0LL;

  if (!v38) {
    [v73 setManualQueueRemoval:1];
  }
  -[IDSLocalDeliveryQueue enqueueMessage:](self->_deliveryQueue, "enqueueMessage:", v73);
  self->_cachedBytes[[v73 dataProtectionClass]] = -1;
  +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
  objc_msgSend(v73, "setTimeEnqueued:");
  v39 = (void *)objc_claimAutoreleasedReturnValue([v73 fallbackBlock]);

  if (v39)
  {
    fallbackMessages = self->_fallbackMessages;
    if (!fallbackMessages)
    {
      v41 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      v42 = self->_fallbackMessages;
      self->_fallbackMessages = v41;

      fallbackMessages = self->_fallbackMessages;
    }

    -[NSMutableArray addObject:](fallbackMessages, "addObject:", v73);
    v43 = (void *)objc_claimAutoreleasedReturnValue([v73 topic]);
    v44 = [v43 isEqualToString:@"com.apple.private.alloy.phonecontinuity"];

    -[IDSUTunConnection _resetFallbackTimeout:useNextFallback:]( self,  "_resetFallbackTimeout:useNextFallback:",  v44,  0.0);
  }

  isMagnetIndicatingPeerIsAwake = self->_isMagnetIndicatingPeerIsAwake;
  v47 = [v73 nonWaking] ^ 1;
  v48 = isMagnetIndicatingPeerIsAwake;
  if (-[IDSUTunConnection _isMagnetConnection](self, "_isMagnetConnection")
    && (id)-[IDSUTunConnection _currentLink](self, "_currentLink") != (id)1
    && [v73 nonCloudWaking])
  {
    v49 = OSLogHandleForTransportCategory("UTunConnection");
    v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
    {
      v51 = (IDSUTunConnection *)objc_claimAutoreleasedReturnValue([v73 messageUUID]);
      *(_DWORD *)buf = 138412290;
      v88 = v51;
      _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "Attempting to send nonCloudWaking message on non-magnet connection. Coallescing {guid: %@}",  buf,  0xCu);
    }

    v53 = os_log_shim_legacy_logging_enabled(v52);
    if ((_DWORD)v53)
    {
      if (_IDSShouldLogTransport(v53))
      {
        v66 = (IDSUTunConnection *)objc_claimAutoreleasedReturnValue([v73 messageUUID]);
        _IDSLogTransport( @"UTunConnection",  @"IDS",  @"Attempting to send nonCloudWaking message on non-magnet connection. Coallescing {guid: %@}");

        if (_IDSShouldLog(0LL, @"UTunConnection"))
        {
          v66 = (IDSUTunConnection *)objc_claimAutoreleasedReturnValue(objc_msgSend(v73, "messageUUID", v66));
          _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"Attempting to send nonCloudWaking message on non-magnet connection. Coallescing {guid: %@}");
        }
      }
    }

    -[IDSUTunConnection _startMessagesDequeueMessagesTimer](self, "_startMessagesDequeueMessagesTimer", v66);
    v48 = 0;
    v47 = 0;
  }

  socketConnection = self->_socketConnection;
  v55 = objc_opt_class(&OBJC_CLASS___IDSSocketPairConnection, v46);
  if ((objc_opt_isKindOfClass(socketConnection, v55) & 1) != 0) {
    v56 = self->_socketConnection;
  }
  else {
    v56 = 0LL;
  }
  if ((unint64_t)-[IDSSocketPairConnectionProtocol inFlightMessageCount](v56, "inFlightMessageCount") <= 5)
  {
    if ((v48 | v47) == 1)
    {
      [v73 setDidWakeHint:v47 & !v48];
      v57 = OSLogHandleForIDSCategory("UTunConnection");
      v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412546;
        v88 = self;
        v89 = 1024;
        LODWORD(v90) = v47 & !v48;
        _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEBUG,  "%@ socket buffer is empty, dequeuing a message.  didWakeHint(%d)",  buf,  0x12u);
      }

      if (os_log_shim_legacy_logging_enabled(v59)
        && _IDSShouldLog(2LL, @"UTunConnection"))
      {
        v66 = self;
        v68 = (__CFString *)(v47 & !v48);
        _IDSLogV( 2LL,  @"IDSFoundation",  @"UTunConnection",  @"%@ socket buffer is empty, dequeuing a message.  didWakeHint(%d)");
      }

      -[IDSUTunConnection _dequeueMessages](self, "_dequeueMessages", v66, v68);
    }

    else
    {
      v60 = OSLogHandleForIDSCategory("UTunConnection");
      v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v88 = self;
        _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEFAULT,  "%@ Waiting for remote device wake before dequeuing message.",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v62)
        && _IDSShouldLog(0LL, @"UTunConnection"))
      {
        v66 = self;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"%@ Waiting for remote device wake before dequeuing message.");
      }
    }
  }

  v63 = (void *)objc_claimAutoreleasedReturnValue(-[IMTimer fireDate](self->_timeoutTimer, "fireDate", v66));
  v64 = (void *)objc_claimAutoreleasedReturnValue([v73 expirationDate]);
  if (!v63 || [v63 compare:v64] == (id)1) {
    -[IDSUTunConnection _resetTimeout:](self, "_resetTimeout:", v64);
  }

  os_activity_scope_leave(&state);
  cut_arc_os_release(&v84);
}
}
    }
  }

  else
  {
    v17 = 0;
  }

  return v17;
}

  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
}

      v19 = (v24 - 1) & v24;
      v22 = __clz(__rbit64(v24)) + (v16 << 6);
    }

    v26 = *(void *)(*(void *)(v57 + 48) + 8 * v22);
    v27 = (uint64_t *)(*(void *)(v57 + 56) + 16 * v22);
    v28 = *v27;
    v29 = v27[1];
    v30 = objc_allocWithZone(&OBJC_CLASS___NSNumber);
    sub_1004028CC(v28, v29);
    v31 = [v30 initWithUnsignedLongLong:v26];
    sub_1004028CC(v28, v29);
    v32 = swift_isUniquelyReferenced_nonNull_native(v15);
    uint64_t v2 = (unint64_t)v15;
    v34 = sub_100417D64((uint64_t)v31);
    v35 = v15[2];
    v36 = (v33 & 1) == 0;
    v37 = v35 + v36;
    if (__OFADD__(v35, v36))
    {
      __break(1u);
      goto LABEL_56;
    }

    v38 = v33;
    if (v15[3] >= v37)
    {
      if ((v32 & 1) != 0)
      {
        if ((v33 & 1) != 0) {
          goto LABEL_26;
        }
      }

      else
      {
        sub_10041A314();
        if ((v38 & 1) != 0) {
          goto LABEL_26;
        }
      }
    }

    else
    {
      sub_100418644(v37, v32);
      v39 = sub_100417D64((uint64_t)v31);
      if ((v38 & 1) != (v40 & 1)) {
        goto LABEL_62;
      }
      v34 = v39;
      if ((v38 & 1) != 0)
      {
LABEL_26:
        v20 = v15[7] + 16 * v34;
        sub_100402A84(*(void *)v20, *(void *)(v20 + 8));
        *(void *)v20 = v28;
        *(void *)(v20 + 8) = v29;
        goto LABEL_27;
      }
    }

    v15[(v34 >> 6) + 8] |= 1LL << v34;
    *(void *)(v15[6] + 8 * v34) = v31;
    v41 = (uint64_t *)(v15[7] + 16 * v34);
    *v41 = v28;
    v41[1] = v29;
    v42 = v15[2];
    v43 = __OFADD__(v42, 1LL);
    v44 = v42 + 1;
    if (v43) {
      break;
    }
    v15[2] = v44;
    v45 = v31;
LABEL_27:

    swift_bridgeObjectRelease(0x8000000000000000LL);
    sub_100402A84(v28, v29);
  }

  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  v47 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BACA0, &OBJC_CLASS___NSNumber_ptr);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v47);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
}

            v43 = (v50 - 1) & v50;
            v48 = __clz(__rbit64(v50)) + (v39 << 6);
LABEL_44:
            sub_1003F5FC8( *(void *)(v38 + 48) + *(void *)(v82 + 72) * v48,  (uint64_t)v10,  type metadata accessor for IDSGroupEncryptionMaterialData);
            sub_1003F600C((uint64_t)v10, (uint64_t)v6, type metadata accessor for IDSGroupEncryptionMaterialData);
            v52 = sub_100420394((uint64_t)v6, (uint64_t)v20);
            if (v52)
            {
              v53 = v52;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              v55 = *(void *)((v84 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
              v54 = *(void *)((v84 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
              if (v55 >= v54 >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v55 + 1, 1LL);
              }
              v56 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v55, v53);
              specialized Array._endMutation()(v56);

              v20 = v81;
            }

            else
            {
              v44 = v78;
              sub_1003F5FC8((uint64_t)v20, v78, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
              v45 = v77;
              sub_10041AC80(v77, v44);
              v46 = v45;
              v20 = v81;
              sub_1003F6050(v46, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
            }

            sub_1003F6050((uint64_t)v6, type metadata accessor for IDSGroupEncryptionMaterialData);
          }

          v51 = v49 + 3;
          if (v51 < v80) {
            break;
          }
LABEL_48:
          swift_release(v38);
          v57 = v84;
          v58 = sub_100420134(v84);
          swift_bridgeObjectRelease(v57);
          v59 = objc_allocWithZone(&OBJC_CLASS___NSMutableArray);
          isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v58);
          v61 = [v59 initWithArray:isa];

          v62 = v74;
          [v74 setMaterialInfos:v61];

          v63 = v62;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          v65 = *(void *)((v85 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          v64 = *(void *)((v85 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v65 >= v64 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v64 > 1, v65 + 1, 1LL);
          }
          v66 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v65, v63);
          specialized Array._endMutation()(v66);

          sub_1003F6050((uint64_t)v20, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
          v27 = v75;
          v28 = v76;
          if (!v75) {
            goto LABEL_7;
          }
LABEL_51:
          v67 = __clz(__rbit64(v27));
          v27 &= v27 - 1;
        }

        v50 = *(void *)(v79 + 8 * v51);
        if (!v50)
        {
          while (1)
          {
            v39 = v51 + 1;
            if (__OFADD__(v51, 1LL)) {
              goto LABEL_54;
            }
            if (v39 >= v80) {
              goto LABEL_48;
            }
            v50 = *(void *)(v79 + 8 * v39);
            ++v51;
            if (v50) {
              goto LABEL_43;
            }
          }
        }

        v39 = v51;
        goto LABEL_43;
      }

      v31 = v29 + 3;
      if (v31 < v70)
      {
        v30 = *(void *)(v69 + 8 * v31);
        if (v30)
        {
          v28 = v31;
          goto LABEL_20;
        }

        while (1)
        {
          v28 = v31 + 1;
          if (__OFADD__(v31, 1LL)) {
            goto LABEL_56;
          }
          if (v28 >= v70) {
            break;
          }
          v30 = *(void *)(v69 + 8 * v28);
          ++v31;
          if (v30) {
            goto LABEL_20;
          }
        }
      }
    }

        v342 = (v105 - 1) & v105;
        v343 = v106;
        v103 = __clz(__rbit64(v105)) + ((void)v106 << 6);
      }

      v108 = 8 * v103;
      v101 = *(void **)(*(void *)(v83 + 56) + v108);
      v97 = *(id *)(*(void *)(v83 + 48) + v108);
      swift_retain(v101);
      if (!v97) {
        goto LABEL_59;
      }
    }

    v124 = v122(v121, 1LL, v123);
    a2 = v334;
    if (v124 == 1)
    {
      sub_10040A274(v327, &qword_1009B99F0);
      sub_10040A274(v65, &qword_1009B99F0);
      sub_10040A274((uint64_t)v337, &qword_1009B99F0);
LABEL_53:
      v130 = 0xE700000000000000LL;
      v131 = 0x746E6572727563LL;
      goto LABEL_55;
    }

    goto LABEL_51;
  }

        v45 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0xA8LL))(v39);
        v46 = (uint64_t)v53;
        v47 = (*(double (**)(void))((swift_isaMask & *v2) + 0x2E0LL))();
        sub_1004F9FE0(v46, v47);

        return (id)swift_bridgeObjectRelease(v46);
      }

      return (id)swift_bridgeObjectRelease(v5);
    }
  }

  return result;
}

  result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

LABEL_34:
    v32 = os_channel_advance_slot(rxRing, next_slot);
    if (v32)
    {
      v33 = OSLogHandleForTransportCategory("BTDatagramLink");
      v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__n[0]) = 67109120;
        HIDWORD(__n[0]) = v32;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "os_channel_advance_slot failed for read %d",  (uint8_t *)__n,  8u);
      }

      v36 = os_log_shim_legacy_logging_enabled(v35);
      if ((_DWORD)v36 && _IDSShouldLogTransport(v36))
      {
        _IDSLogTransport(@"BTDatagramLink", @"IDS", @"os_channel_advance_slot failed for read %d");
        if (_IDSShouldLog(0LL, @"BTDatagramLink")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"BTDatagramLink",  @"os_channel_advance_slot failed for read %d");
        }
      }
    }

    os_channel_sync(self->_channel, 1LL);
  }

  else
  {
    v23 = OSLogHandleForTransportCategory("BTDatagramLink");
    v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__n[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "os_channel_available_slot_count gave no slots to read",  (uint8_t *)__n,  2u);
    }

    v26 = os_log_shim_legacy_logging_enabled(v25);
    if ((_DWORD)v26)
    {
      if (_IDSShouldLogTransport(v26))
      {
        _IDSLogTransport( @"BTDatagramLink",  @"IDS",  @"os_channel_available_slot_count gave no slots to read");
        if (_IDSShouldLog(0LL, @"BTDatagramLink")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"BTDatagramLink",  @"os_channel_available_slot_count gave no slots to read");
        }
      }
    }
  }

    goto LABEL_35;
  }

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
  if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v8,  OS_LOG_TYPE_DEFAULT,  "Tried to disable a primary account with no unique ID, ignoring...",  buf,  2u);
  }

          goto LABEL_35;
        }

        v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v40 = v6;
          v8 = "Tried to enable a restricted account, ignoring.. { account: %@ }";
          goto LABEL_13;
        }
      }
    }

    else
    {
      v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v40 = v4;
        v8 = "Tried to enable a primary account we don't know about, ignoring... { uniqueID: %@ }";
        goto LABEL_13;
      }
    }

                      uint64_t v2 = v76;
                      goto LABEL_35;
                    }

                    if (!v38)
                    {
                      v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
                      if (os_log_type_enabled(v40, OS_LOG_TYPE_FAULT))
                      {
                        *(_DWORD *)buf = 138412802;
                        v102 = v35;
                        v103 = 2112;
                        v104 = (uint64_t)v16;
                        v105 = 2112;
                        v106 = v36;
                        _os_log_fault_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_FAULT,  "Failed to create account { service: %@, uniqueID: %@, dicitonary: %@ }",  buf,  0x20u);
                      }

                      goto LABEL_34;
                    }

                    -[IDSDAccountController _addAccountDuringInitialSetup:](v2, "_addAccountDuringInitialSetup:", v38);
                  }

          if (!v3) {
            return 1;
          }
          registrationInfo = self->_registrationInfo;
          if (registrationInfo
            && (id)-[IDSRegistration registrationStatus](registrationInfo, "registrationStatus") == (id)8)
          {
            v28 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationController sharedInstance]( &OBJC_CLASS___IDSRegistrationController,  "sharedInstance"));
            [v28 unregisterInfo:self->_registrationInfo];
          }

          v29 = self->_registrationInfo;
          v30 = self->_registrationInfo;
          self->_registrationInfo = 0LL;

          v31 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationController sharedInstance]( &OBJC_CLASS___IDSRegistrationController,  "sharedInstance"));
          [v31 cancelActionsForRegistrationInfo:v29];

          v32 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationController sharedInstance]( &OBJC_CLASS___IDSRegistrationController,  "sharedInstance"));
          [v32 stopTrackingRegistration:v29];

          p_vtable = &OBJC_METACLASS___IDSPerServiceApplicationKeyManager.vtable;
          v34 = (void *)objc_claimAutoreleasedReturnValue(+[IDSHeartbeatCenter sharedInstance](&OBJC_CLASS___IDSHeartbeatCenter, "sharedInstance"));
          [v34 removeRegistrationInfo:v29];

          v35 = -[IDSDAccount _neededRegistrationType](self, "_neededRegistrationType");
          switch((int)v35)
          {
            case 0:
              v38 = objc_claimAutoreleasedReturnValue(-[IDSDAccount userUniqueIdentifier](self, "userUniqueIdentifier"));
              v39 = (void *)v38;
              v40 = @"phone-number-registration";
              if (v38) {
                v40 = (__CFString *)v38;
              }
              v37 = v40;

              break;
            case 1:
              v36 = objc_claimAutoreleasedReturnValue(-[IDSDAccount loginID](self, "loginID"));
              goto LABEL_46;
            case 2:
            case 3:
              v36 = objc_claimAutoreleasedReturnValue(-[IDSDAccount userUniqueIdentifier](self, "userUniqueIdentifier"));
LABEL_46:
              v37 = (__CFString *)v36;
              break;
            default:
              v37 = 0LL;
              break;
          }

          v41 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeychainManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeychainManager,  "sharedInstance"));
          v42 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount serviceType](self, "serviceType"));
          v43 = (IDSRegistration *)objc_claimAutoreleasedReturnValue( [v41 registrationWithServiceType:v42 registrationType:v35 value:v37]);
          v44 = self->_registrationInfo;
          self->_registrationInfo = v43;

          -[IDSRegistration setShouldAutoRegisterAllHandles:]( self->_registrationInfo,  "setShouldAutoRegisterAllHandles:",  -[IDSDAccount shouldAutoRegisterAllHandles](self, "shouldAutoRegisterAllHandles"));
          -[IDSRegistration setShouldRegisterUsingDSHandle:]( self->_registrationInfo,  "setShouldRegisterUsingDSHandle:",  -[IDSDAccount shouldRegisterUsingDSHandle](self, "shouldRegisterUsingDSHandle"));
          v45 = self->_registrationInfo;
          v222 = (os_log_s *)v37;
          if (v45)
          {
            if ((_DWORD)v35 != 1) {
              goto LABEL_77;
            }
            v46 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration regionID](v45, "regionID"));
            v47 = &IMInsertBoolsToXPCDictionary_ptr;
            if ([v46 length])
            {
              v48 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration regionBasePhoneNumber](self->_registrationInfo, "regionBasePhoneNumber"));
              v49 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration regionServerContext](self->_registrationInfo, "regionServerContext"));
              v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 3LL));
              v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 0xFFFFFFFFLL));
              v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                *(void *)v239 = v46;
                _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "Found pre-existing regionID %@",  buf,  0xCu);
              }

              v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                *(void *)v239 = v48;
                _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "Found pre-existing base phone number %@",  buf,  0xCu);
              }

              v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                *(void *)v239 = v49;
                _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "Found pre-existing region context %@",  buf,  0xCu);
              }

              v55 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
              v56 = v46;
              v47 = &IMInsertBoolsToXPCDictionary_ptr;
              if (v56) {
                CFDictionarySetValue((CFMutableDictionaryRef)v55, kIDSServiceDefaultsProfileRegionIDKey, v56);
              }

              v57 = v48;
              if (v57) {
                CFDictionarySetValue((CFMutableDictionaryRef)v55, kIDSServiceDefaultsProfileBaseNumberKey, v57);
              }

              v58 = v49;
              if (v58) {
                CFDictionarySetValue((CFMutableDictionaryRef)v55, kIDSServiceDefaultsProfileServerContextKey, v58);
              }

              v59 = v50;
              if (v59) {
                CFDictionarySetValue((CFMutableDictionaryRef)v55, kIDSServiceDefaultsProfileValdationStatusKey, v59);
              }

              v60 = v51;
              if (v60) {
                CFDictionarySetValue((CFMutableDictionaryRef)v55, kIDSServiceDefaultsProfileValdationErrorCodeKey, v60);
              }

              v61 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v55,  kIDSServiceDefaultsProfileKey));
              -[IDSDAccount _writeAccountDefaults:force:](self, "_writeAccountDefaults:force:", v61, 1LL);

              p_vtable = (void **)(&OBJC_METACLASS___IDSPerServiceApplicationKeyManager + 24);
            }

            v62 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration vettedEmails](self->_registrationInfo, "vettedEmails"));
            v236[0] = _NSConcreteStackBlock;
            v236[1] = 3221225472LL;
            v236[2] = sub_1001DE92C;
            v236[3] = &unk_1008F8348;
            v236[4] = self;
            v63 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "__imArrayByApplyingBlock:", v236));

            v64 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount vettedAliases](self, "vettedAliases"));
            v65 = [v64 count];

            if (v65)
            {
              v66 = self->_registrationInfo;
              v67 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount vettedAliases](self, "vettedAliases"));
              -[IDSRegistration setVettedEmails:](v66, "setVettedEmails:", v67);
            }

            if ([v63 count])
            {
              v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                *(void *)v239 = v63;
                _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "Found pre-existing confirmedEmails emails %@",  buf,  0xCu);
              }

              v69 = (void *)objc_claimAutoreleasedReturnValue( [v47[479] dictionaryWithObject:v63 forKey:kIDSServiceDefaultsVettedAliasesKey]);
              -[IDSDAccount _writeAccountDefaults:force:](self, "_writeAccountDefaults:force:", v69, 1LL);
            }
          }

          else
          {
            v46 = (void *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
            if (!os_log_type_enabled((os_log_t)v46, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_76;
            }
            v63 = (id)objc_claimAutoreleasedReturnValue(-[IDSDAccount serviceType](self, "serviceType"));
            *(_DWORD *)buf = 138412546;
            *(void *)v239 = v63;
            *(_WORD *)&v239[8] = 2112;
            v240 = v37;
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v46,  OS_LOG_TYPE_DEFAULT,  "Didn't find a registration in the keychain for %@ %@",  buf,  0x16u);
          }

LABEL_76:
          if (!self->_registrationInfo)
          {
            v71 = 0LL;
            goto LABEL_82;
          }

      v46 = v26;
LABEL_35:
      v59[0] = 0xAAAAAAAAAAAAAAAALL;
      v59[1] = 0xAAAAAAAAAAAAAAAALL;
      os_packet_get_flow_uuid(v12, v59);
      v27 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", v59);
      v28 = (os_log_s *)objc_claimAutoreleasedReturnValue([v23[219] Multiplexer]);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        if (v25 <= 2621727)
        {
          if (v25 <= 1048703)
          {
            if (!v25)
            {
              v29 = "BE";
              goto LABEL_61;
            }

            v29 = "BK_SYS";
            if (v25 == 524432)
            {
LABEL_61:
              *(_DWORD *)buf = 138413570;
              *(void *)v49 = v27;
              *(_WORD *)&v49[8] = 1024;
              v50 = v16;
              v51 = 2048;
              v52 = object_address;
              v53 = 1024;
              v54 = data_offset;
              v55 = 2080;
              v56 = v29;
              v57 = 1024;
              v58 = v46;
              _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "multiplexer outgoing [%@] packetLength %u bufletAddress %p bufletOffset %u serviceClass %s trafficClass %d\n",  buf,  0x32u);
              goto LABEL_62;
            }
          }

          else
          {
            switch(v25)
            {
              case 1048704:
                v29 = "BK";
                goto LABEL_61;
              case 1572880:
                v29 = "RD";
                goto LABEL_61;
              case 2097184:
                v29 = "OAM";
                goto LABEL_61;
            }
          }
        }

        else if (v25 > 3670319)
        {
          switch(v25)
          {
            case 3670320:
              v29 = "SIG";
              goto LABEL_61;
            case 4194688:
              v29 = "VO";
              goto LABEL_61;
            case 4718992:
              v29 = "CTL";
              goto LABEL_61;
          }
        }

        else
        {
          switch(v25)
          {
            case 2621728:
              v29 = "AV";
              goto LABEL_61;
            case 3146000:
              v29 = "RV";
              goto LABEL_61;
            case 3670272:
              v29 = "VI";
              goto LABEL_61;
          }
        }

        v29 = "UNKNOWN";
        goto LABEL_61;
      }
}

    id v3 = OSLogHandleForIDSCategory("Warning");
    v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v7 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "IDSEncryptionErrorType unknown/unhandled error type: %d",  buf,  8u);
    }

    if (os_log_shim_legacy_logging_enabled(v5))
    {
      _IDSWarnV(@"IDSFoundation", @"IDSEncryptionErrorType unknown/unhandled error type: %d");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"IDSEncryptionErrorType unknown/unhandled error type: %d");
      _IDSLogTransport(@"Warning", @"IDS", @"IDSEncryptionErrorType unknown/unhandled error type: %d");
    }

    return a1;
  }

  switch(a1)
  {
    case 800LL:
      result = 15LL;
      break;
    case 801LL:
      result = 16LL;
      break;
    case 802LL:
      result = 17LL;
      break;
    case 803LL:
      result = 18LL;
      break;
    case 804LL:
      result = 19LL;
      break;
    default:
      switch(a1)
      {
        case 900LL:
          result = 21LL;
          break;
        case 901LL:
          result = 20LL;
          break;
        case 902LL:
          result = 23LL;
          break;
        case 903LL:
          result = 22LL;
          break;
        default:
          goto LABEL_34;
      }

      break;
  }

  return result;
}

      v18 = self;
LABEL_35:
      if (v18->_vifShouldReadMultiple)
      {
        v120[0] = _NSConcreteStackBlock;
        v120[1] = 3221225472LL;
        v120[2] = sub_10032AF24;
        v120[3] = &unk_1009015A8;
        v120[4] = v18;
        v31 = v108;
        v121 = v31;
        MultipleIPPayloadsHandler = NEVirtualInterfaceSetReadMultipleIPPayloadsHandler(v3, v120);
        v33 = *__error();
        v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          v35 = *((void *)v31 + 1);
          if (MultipleIPPayloadsHandler) {
            v36 = 0;
          }
          else {
            v36 = v33;
          }
          *(_DWORD *)buf = 138412802;
          *(void *)&buf[4] = v35;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = MultipleIPPayloadsHandler;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v36;
          _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "%@: SetReadMultipleIPPayloadHandler %d (%d)",  buf,  0x18u);
        }

        v37 = NEVirtualInterfaceSetMaxPendingPackets(v3, self->_vifMaxPendingPackets);
        v38 = *__error();
        v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          v40 = *((void *)v31 + 1);
          if (v37) {
            v41 = 0;
          }
          else {
            v41 = v38;
          }
          *(_DWORD *)buf = 138412802;
          *(void *)&buf[4] = v40;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v37;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v41;
          _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "%@: SetMaxPendingPackets %d (%d)",  buf,  0x18u);
        }
      }

      else
      {
        v118[0] = _NSConcreteStackBlock;
        v118[1] = 3221225472LL;
        v118[2] = sub_10032AFA4;
        v118[3] = &unk_1009015D0;
        v118[4] = v18;
        v42 = v108;
        v119 = v42;
        IPPayloadHandler = NEVirtualInterfaceSetReadIPPayloadHandler(v3, v118);
        v44 = *__error();
        v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          v46 = *((void *)v42 + 1);
          if (IPPayloadHandler) {
            v47 = 0;
          }
          else {
            v47 = v44;
          }
          *(_DWORD *)buf = 138412802;
          *(void *)&buf[4] = v46;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = IPPayloadHandler;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v47;
          _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "%@: SetReadIPPayloadHandler %d (%d)",  buf,  0x18u);
        }
      }

      goto LABEL_53;
    }

    v25 = *__error();
    v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "NEVirtualInterfaceDupSocket failed with error(%d)",  buf,  8u);
    }

    goto LABEL_25;
  }

  v4 = 1;
  while (1)
  {
    v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue([v108 cbuuid]);
      *(_DWORD *)buf = 138412546;
      *(void *)&buf[4] = v6;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "NEVICreate failed for %@! - %d try",  buf,  0x12u);
    }

    if (v4 == 3) {
      break;
    }
    usleep(0x1F4u);
    id v3 = (const void *)NEVirtualInterfaceCreate(kCFAllocatorDefault, 1LL, 0LL, 0LL);
    ++v4;
    if (v3) {
      goto LABEL_7;
    }
  }

  v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v28 = (void *)objc_claimAutoreleasedReturnValue([v108 cbuuid]);
    *(_DWORD *)buf = 138412546;
    *(void *)&buf[4] = v28;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "NEVICreate failed for %@! after %d tries",  buf,  0x12u);
  }

  v27 = 0;
LABEL_92:

  return v27;
}

  return v6;
}

  v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    v33 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s ktDataSignature](v14, "ktDataSignature"));
    *(_DWORD *)buf = 67109378;
    v76 = v5;
    v77 = 2112;
    v78 = v33;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Expected KT Data Signature for registrations matches what we registered for keyIndex. { keyIndex: %u, expectedKTDa taSignature: %@ }",  buf,  0x12u);
  }

  v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    v35 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s ktDataForRegistration](v14, "ktDataForRegistration"));
    v36 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s ktPublicAccountKey](v14, "ktPublicAccountKey"));
    v37 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s ktDataSignature](v14, "ktDataSignature"));
    *(_DWORD *)buf = 67109890;
    v76 = v5;
    v77 = 2112;
    v78 = v35;
    v79 = 2112;
    v80 = v36;
    v81 = 2112;
    v82 = v37;
    _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Completed registration of previously unregistered KT Data for key index { keyIndex: %u, ktDataForRegistration: %@, ktPublicAccountKey: %@, ktDataSignature: %@ }",  buf,  0x26u);
  }

  v38 = (void *)objc_claimAutoreleasedReturnValue([v13 registeredKTData]);
  if (v38)
  {
    v39 = (void *)objc_claimAutoreleasedReturnValue([v13 registeredKTData]);
    v40 = (void *)objc_claimAutoreleasedReturnValue([v39 ktDataForRegistration]);
    if (v40)
    {
      v41 = (void *)objc_claimAutoreleasedReturnValue([v13 registeredKTData]);
      v42 = (void *)objc_claimAutoreleasedReturnValue([v41 ktDataSignature]);
      if (v42)
      {
        v43 = (void *)objc_claimAutoreleasedReturnValue([v13 registeredKTData]);
        v44 = (void *)objc_claimAutoreleasedReturnValue([v43 ktPublicAccountKey]);
        v71 = v41;
        v45 = v44 != 0LL;

        v46 = v45;
        v41 = v71;
      }

      else
      {
        v46 = 0;
      }
    }

    else
    {
      v46 = 0;
    }
  }

  else
  {
    v46 = 0;
  }

  v55 = objc_claimAutoreleasedReturnValue([v13 unregisteredKTData]);
  if (v55)
  {
    v56 = (void *)v55;
    v57 = (void *)objc_claimAutoreleasedReturnValue([v13 unregisteredKTData]);
    v58 = (void *)objc_claimAutoreleasedReturnValue([v57 ktDataForRegistration]);
    if (v58)
    {
      v72 = (void *)objc_claimAutoreleasedReturnValue([v13 unregisteredKTData]);
      v59 = (void *)objc_claimAutoreleasedReturnValue([v72 ktDataSignature]);
      if (v59)
      {
        v70 = v46;
        v60 = (void *)objc_claimAutoreleasedReturnValue([v13 unregisteredKTData]);
        v61 = (void *)objc_claimAutoreleasedReturnValue([v60 ktPublicAccountKey]);
        v62 = v61 != 0LL;

        v46 = v70;
      }

      else
      {
        v62 = 0;
      }
    }

    else
    {
      v62 = 0;
    }

    v63 = !v46;
    v65 = !v62;
    if (v46 && (v65 & 1) == 0)
    {
      v66 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
      [v66 logMetric:&off_100947DE8 withName:@"kt-reg-state-change"];
      v64 = v73;
LABEL_74:

      goto LABEL_75;
    }

    v64 = v73;
    if (((v46 | v65) & 1) == 0)
    {
      v67 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
      v66 = v67;
      v68 = &off_100947E00;
      goto LABEL_73;
    }
  }

  else
  {
    v62 = 0;
    v63 = !v46;
    v64 = v73;
  }

  if (!v63 && !v62)
  {
    v67 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    v66 = v67;
    v68 = &off_100947E18;
LABEL_73:
    [v67 logMetric:v68 withName:@"kt-reg-state-change"];
    goto LABEL_74;
  }

  if (!v46 && !v62)
  {
    v67 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    v66 = v67;
    v68 = &off_100947E30;
    goto LABEL_73;
  }

    id v13 = 0LL;
    goto LABEL_35;
  }

  v10 = (__CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  v11 = self->_registrationCert;
  if (v11)
  {
    CFDictionarySetValue(v10, @"ids-registration-cert", v11);
  }

  else
  {
    v15 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1006AAB98();
    }
  }

  v16 = self->_uris;
  if (v16) {
    CFDictionarySetValue(v10, @"uris", v16);
  }

  v17 = self->_keyTransparencyEnrolledURIs;
  if (v17) {
    CFDictionarySetValue(v10, @"kt-uris", v17);
  }

  v18 = self->_idsUserID;
  if (v18) {
    CFDictionarySetValue(v10, @"ids-user-id", v18);
  }

  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", self->_needsRenewal));
  if (v19) {
    CFDictionarySetValue(v10, @"needs-renewal", v19);
  }

  v20 = self->_mainID;
  if (v20)
  {
    CFDictionarySetValue(v10, @"main-id", v20);
  }

  else
  {
    v21 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1006AAB18();
    }
  }

  v22 = self->_temporaryPhoneEmail;
  if (v22) {
    CFDictionarySetValue(v10, @"temporary-phone-email", v22);
  }

  v23 = self->_pushToken;
  if (v23)
  {
    CFDictionarySetValue(v10, @"push-token", v23);
  }

  else
  {
    v24 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1006AAA98();
    }
  }

  v25 = self->_registrationDate;
  if (v25)
  {
    CFDictionarySetValue(v10, @"registration-date", v25);
  }

  else
  {
    v26 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1006AAA18();
    }
  }

  v27 = self->_applicationVersion;
  if (v27)
  {
    CFDictionarySetValue(v10, @"invitation-version", v27);
  }

  else
  {
    v28 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1006AA998();
    }
  }

  v29 = self->_IDSVersion;
  if (v29)
  {
    CFDictionarySetValue(v10, @"ids-version", v29);
  }

  else
  {
    v30 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1006AA918();
    }
  }

  v31 = self->_environment;
  if (v31)
  {
    CFDictionarySetValue(v10, @"environment", v31);
  }

  else
  {
    v32 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1006AA898();
    }
  }

  v33 = v3;
  CFDictionarySetValue(v10, @"type", v33);

  v34 = v6;
  CFDictionarySetValue(v10, @"service", v34);

  v35 = self->_serviceIdentifier;
  if (v35)
  {
    CFDictionarySetValue(v10, @"service-identifier", v35);
  }

  else
  {
    v36 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1006AA818();
    }
  }

  v37 = self->_identityVersion;
  if (v37) {
    CFDictionarySetValue(v10, @"identity-version", v37);
  }

  v38 = self->_profileID;
  if (v38) {
    CFDictionarySetValue(v10, @"profile-id", v38);
  }

  v39 = self->_keyPairSignature;
  if (v39) {
    CFDictionarySetValue(v10, @"identity-rsa-pair-signature", v39);
  }

  v40 = self->_nextRegistrationDate;
  if (v40) {
    CFDictionarySetValue(v10, @"next-registration-date", v40);
  }

  v41 = self->_dsHandle;
  if (v41) {
    CFDictionarySetValue(v10, @"self-handle", v41);
  }

  v42 = self->_dependentRegistrationsTTL;
  if (v42) {
    CFDictionarySetValue(v10, @"dependant-registrations-ttl", v42);
  }

  v43 = self->_dependentRegistrationResponseCode;
  if (v43) {
    CFDictionarySetValue(v10, @"dependant-registrations-response-code", v43);
  }

  v44 = self->_dependentRegistrationAuthRetries;
  if (v44) {
    CFDictionarySetValue(v10, @"dependant-registrations-auth-retries", v44);
  }

  v45 = self->_userUniqueIdentifier;
  if (v45) {
    CFDictionarySetValue(v10, @"user-unique-identifier", v45);
  }

  v46 = self->_contextInfo;
  if (v46) {
    CFDictionarySetValue(v10, @"context-info", v46);
  }

  if (!-[IDSRegistration registrationType](self, "registrationType"))
  {
    v47 = self->_isC2K;
    if (v47) {
      CFDictionarySetValue(v10, @"cdma", v47);
    }
  }

  v48 = self->_deviceName;
  if (v48) {
    CFDictionarySetValue(v10, @"device-name", v48);
  }

  v49 = self->_regionID;
  if (v49) {
    CFDictionarySetValue(v10, @"region-id", v49);
  }

  v50 = self->_regionBasePhoneNumber;
  if (v50) {
    CFDictionarySetValue(v10, @"region-base-phone-number", v50);
  }

  v51 = self->_regionServerContext;
  if (v51) {
    CFDictionarySetValue(v10, @"region-server-context", v51);
  }

  v52 = self->_dependentRegistrations;
  if (v52) {
    CFDictionarySetValue(v10, @"dependant-registrations", v52);
  }

  v53 = v7;
  if (v53) {
    CFDictionarySetValue(v10, @"did-reg-with-kt-account-key", v53);
  }

  v54 = v9;
  if (v54) {
    CFDictionarySetValue(v10, @"did-reg-with-kt-device-signature", v54);
  }

  v55 = v8;
  if (v55) {
    CFDictionarySetValue(v10, @"opted-into-kt", v55);
  }

  if (!self->_deviceName)
  {
    v56 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
    v57 = (NSString *)objc_claimAutoreleasedReturnValue([v56 deviceName]);
    deviceName = self->_deviceName;
    self->_deviceName = v57;
  }

  v12 = v10;
  id v13 = v12;
LABEL_35:

  return (NSDictionary *)v13;
}

  __break(1u);
  return result;
}

              sub_10041D3BC(v1);
              return;
            }
          }
        }
      }
    }

    swift_release(v136);
    return;
  }

  __break(1u);
LABEL_36:
  __break(1u);
}

  __break(1u);
  return result;
}

  if (a1 < 0) {
    v65 = a1;
  }
  else {
    v65 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1);
  v51 = _CocoaArrayWrapper.endIndex.getter(v65);
  result = swift_bridgeObjectRelease(a1);
  v52 = v67;
  if (!v51) {
    goto LABEL_38;
  }
LABEL_20:
  if (v51 >= 1)
  {
    v74 = v4;
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      v53 = 0LL;
      v54 = v68;
      v55 = (uint64_t)v66;
      do
      {
        v56 = specialized _ArrayBuffer._getElementSlowPath(_:)(v53++, a1);
        Date.addingTimeInterval(_:)(v56, a3);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v54 + 56))(v55, 0LL, 1LL, v52);
        sub_100448AD4(v55);
        a2 = (uint64_t)v78;
        swift_unknownObjectRelease(v56, v57);
      }

      while (v51 != v53);
      swift_bridgeObjectRelease(a1);
    }

    else
    {
      v58 = v52;
      v59 = 0LL;
      v60 = v68;
      v61 = (uint64_t)v66;
      do
      {
        v62 = *(void *)(a1 + 8 * v59++ + 32);
        v63 = swift_retain(v62);
        Date.addingTimeInterval(_:)(v63, a3);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v60 + 56))(v61, 0LL, 1LL, v58);
        sub_100448AD4(v61);
        a2 = (uint64_t)v78;
        swift_release(v62);
      }

      while (v51 != v59);
      swift_bridgeObjectRelease(a1);
      v52 = v58;
    }

    v25 = v75;
    v14 = v76;
    goto LABEL_39;
  }

  __break(1u);
  return result;
}

LABEL_39:
  v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v69 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "Missing IDS Registration entitlement -- failing creation of IDSDXPCBAASigner collaborator {connection: %@}",  buf,  0xCu);
  }

  v47 = 0LL;
LABEL_48:

  return v47;
}

      CSDBSqliteStatementReset(v12);
      if (v20) {
        CFRelease(v20);
      }
    }
  }

  if (v7) {
    CFRelease(v7);
  }
}

    v25 = 0LL;
    goto LABEL_40;
  }

  v12 = (void *)v11;
  if (!v10)
  {
    if (a6) {
      *a6 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSSigningErrorDomain,  15LL,  0LL));
    }
    v31 = OSLogHandleForIDSCategory("Encryption");
    v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "No diversifier supplied for an application key. Failing...",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v33) && _IDSShouldLog(0LL, @"Encryption")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Encryption",  @"No diversifier supplied for an application key. Failing...");
    }
    CFRelease(v12);
    goto LABEL_39;
  }

  if (qword_1009BE6E8 != -1) {
    dispatch_once(&qword_1009BE6E8, &stru_1008F7748);
  }
  id v13 = (void *)qword_1009BE6E0;
  v14 = (void *)objc_claimAutoreleasedReturnValue([v10 diversifier]);
  v15 = (void *)objc_claimAutoreleasedReturnValue([v10 trackingPreventionSecret]);
  v43 = 0LL;
  v16 = [v13 diversifyPrivateKey:v12 withDocumentIdentifier:v14 trackingPreventionSalt:v15 error:&v43];
  v17 = v43;
  if (!v16)
  {

    if (!v17) {
      goto LABEL_31;
    }
    goto LABEL_28;
  }

  v18 = (void *)qword_1009BE6E0;
  v19 = (void *)objc_claimAutoreleasedReturnValue([v10 diversifier]);
  v20 = (void *)objc_claimAutoreleasedReturnValue([v10 trackingPreventionSecret]);
  v42 = v17;
  v21 = [v18 diversifyPrivateKey:v12 withDocumentIdentifier:v19 trackingPreventionSalt:v20 error:&v42];
  v22 = v42;

  v23 = (__SecKey *)CFRetain(v21);
  if (!v23)
  {
    v17 = v22;
    if (!v22)
    {
LABEL_31:
      v34 = 0LL;
      if (!a6)
      {
LABEL_33:
        v35 = OSLogHandleForIDSCategory("Encryption");
        v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412802;
          v47 = (CFErrorRef)v12;
          v48 = 2112;
          v49 = v10;
          v50 = 2112;
          v51 = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "Failed to diversify key for signing { tempIdentity: %@, diversifier: %@, mpError: %@ }",  buf,  0x20u);
        }

        if (os_log_shim_legacy_logging_enabled(v37)
          && _IDSShouldLog(0LL, @"Encryption"))
        {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"Encryption",  @"Failed to diversify key for signing { tempIdentity: %@, diversifier: %@, mpError: %@ }");
        }

        CFRelease(v12);

        goto LABEL_39;
      }

    result = 0;
    self->_osChannelNeedSync = 0;
  }

  return result;
}

    v34 = [v21 mutableCopy];
    -[IDSAccountSync _addPhoneNumbersToAccount:withNonPreferredPhoneAccounts:]( v44,  "_addPhoneNumbersToAccount:withNonPreferredPhoneAccounts:",  v34,  v30);
    if ((v33 & 1) == 0)
    {
      v35 = kIDSServiceDefaultsDisplayNameKey;
      v36 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKeyedSubscript:kIDSServiceDefaultsDisplayNameKey]);
      v37 = (void *)objc_claimAutoreleasedReturnValue([v22 objectForKeyedSubscript:kIDSServiceDefaultsAliasesKey]);
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "__imArrayByApplyingBlock:", &stru_1008F9B98));
      v39 = (void *)objc_claimAutoreleasedReturnValue([v38 firstObject]);

      if (![v36 length] && objc_msgSend(v39, "length"))
      {
        [v34 setObject:v39 forKey:v35];
        v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog accountSync](&OBJC_CLASS___IMRGLog, "accountSync"));
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v53 = v39;
          _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "Setting callerID for Apple ID account to phone number {phoneNumber: %@}",  buf,  0xCu);
        }
      }

      v30 = v47;
    }

    -[NSMutableArray addObject:](v16, "addObject:", v34);

    goto LABEL_47;
  }

  v10 = 0LL;
LABEL_54:

  return v10;
}

      v34 = 1LL;
      goto LABEL_38;
    }

    v23 = (void *)objc_claimAutoreleasedReturnValue([v3 prefixedURI]);
    if ([v23 rangeOfString:@"@"] == (id)0x7FFFFFFFFFFFFFFFLL)
    {
    }

    else
    {
      v28 = (void *)objc_claimAutoreleasedReturnValue([v3 prefixedURI]);
      v29 = [v28 rangeOfString:@"."];

      if (v29 != (id)0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_39;
      }
    }

    v30 = OSLogHandleForIDSCategory("IDQuery");
    v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v37[0] = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "  => Invalid URI, email, with no '@' and '.' characters: %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v32))
    {
      MarcoLogMadridLevel( @"IDSDaemonQueries",  0LL,  @"IDQuery",  @"  => Invalid URI, email, with no '@' and '.' characters: %@");
      IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"  => Invalid URI, email, with no '@' and '.' characters: %@");
      if ((_IMWillLog(@"IDQuery", v33) & 1) != 0) {
        _IMAlwaysLog(0LL, @"IDQuery", @"  => Invalid URI, email, with no '@' and '.' characters: %@");
      }
    }

    goto LABEL_37;
  }

  v5 = (void *)objc_claimAutoreleasedReturnValue([v3 unprefixedURI]);
  v6 = [v5 length];

  v7 = OSLogHandleForIDSCategory("IDQuery");
  v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v37[0] = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Failed type check! {key: %@, class: %@}",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v9))
  {
    MarcoLogMadridLevel( @"IDSDaemonQueries",  0LL,  @"IDQuery",  @"  => Invalid URI, below our minimum length: %@");
    IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"  => Invalid URI, below our minimum length: %@");
    if ((_IMWillLog(@"IDQuery", v10) & 1) != 0) {
      _IMAlwaysLog(0LL, @"IDQuery", @"  => Invalid URI, below our minimum length: %@");
    }
  }

  v28 = 0LL;
LABEL_41:

  return v28;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    v77 = (v84 - 1) & v84;
    v81 = __clz(__rbit64(v84)) + (v79 << 6);
LABEL_40:
    v86 = (uint64_t)v181;
    sub_1003F5FC8( *(void *)(v73 + 48) + *(void *)(v188 + 72) * v81,  (uint64_t)v181,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    sub_1003F600C(v86, v72, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    sub_1003F5FC8(v72, v71, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    v87 = swift_bridgeObjectRetain_n(a3, 2LL);
    v88 = (os_log_s *)Logger.logObject.getter(v87);
    v89 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v88, v89))
    {
      v90 = swift_slowAlloc(22LL, -1LL);
      v91 = swift_slowAlloc(64LL, -1LL);
      v191[0] = v91;
      *(_DWORD *)v90 = v182.n128_u32[0];
      swift_bridgeObjectRetain(a3);
      *(void *)(v90 + 4) = sub_1003FFBB0(v187, a3, v191);
      swift_bridgeObjectRelease_n(a3, 3LL);
      *(_WORD *)(v90 + 12) = 2080;
      v92 = sub_10040A2B0( &qword_1009B9880,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer,  (uint64_t)&unk_10071BF54);
      v93 = dispatch thunk of CustomStringConvertible.description.getter(v183, v92);
      v95 = v94;
      *(void *)(v90 + 14) = sub_1003FFBB0(v93, v94, v191);
      swift_bridgeObjectRelease(v95);
      sub_1003F6050(v186, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
      _os_log_impl((void *)&_mh_execute_header, v88, v89, "%s        %s", (uint8_t *)v90, 0x16u);
      swift_arrayDestroy(v91, 2LL, v174);
      v96 = v91;
      v72 = (uint64_t)v175;
      swift_slowDealloc(v96, -1LL, -1LL);
      v97 = v90;
      v71 = v186;
      swift_slowDealloc(v97, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a3, 2LL);
      sub_1003F6050(v71, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    }

    sub_1003F6050(v72, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
  }

  v85 = v82 + 3;
  if (v85 < (uint64_t)v177)
  {
    v84 = *(void *)(v176 + 8 * v85);
    if (!v84)
    {
      while (1)
      {
        v79 = v85 + 1;
        if (__OFADD__(v85, 1LL)) {
          break;
        }
        v84 = *(void *)(v176 + 8 * v79);
        ++v85;
        if (v84) {
          goto LABEL_39;
        }
      }

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

  sub_10041D3BC(v31);
  if ((v180 & 0xC000000000000001LL) != 0)
  {
    if (v180 < 0) {
      v72 = v180;
    }
    else {
      v72 = v180 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v180);
    v73 = __CocoaSet.makeIterator()(v72);
    v74 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
    v75 = sub_100438928( (unint64_t *)&unk_1009BAC00,  (unint64_t *)&unk_1009BC270,  &OBJC_CLASS___IDSURI_ptr);
    v76 = Set.Iterator.init(_cocoa:)(v201, v73, v74, v75);
    v77 = v201[0];
    v184 = v201[1];
    v78 = v201[2];
    v79 = v201[3];
    v80 = v201[4];
  }

  else
  {
    v81 = -1LL << *(_BYTE *)(v180 + 32);
    v184 = v180 + 56;
    v82 = ~v81;
    v83 = -v81;
    if (v83 < 64) {
      v84 = ~(-1LL << v83);
    }
    else {
      v84 = -1LL;
    }
    v80 = v84 & *(void *)(v180 + 56);
    swift_bridgeObjectRetain(v180);
    v78 = v82;
    v79 = 0LL;
    v77 = (uint64_t)v76;
  }

  v183 = (unint64_t)(v78 + 64) >> 6;
  v187 = v77;
  while (2)
  {
    if (v77 < 0)
    {
      v88 = __CocoaSet.Iterator.next()(v76);
      if (!v88) {
        goto LABEL_74;
      }
      v89 = v88;
      v198 = v88;
      v90 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
      swift_unknownObjectRetain(v89, v91);
      swift_dynamicCast(&v202, &v198, (char *)&type metadata for Swift.AnyObject + 8, v90, 7LL);
      v92 = v202;
      swift_unknownObjectRelease(v89, v93);
      v87 = v79;
      v85 = v80;
      if (!v92) {
        goto LABEL_74;
      }
      goto LABEL_72;
    }

    if (v80)
    {
      v85 = (v80 - 1) & v80;
      v86 = __clz(__rbit64(v80)) | (v79 << 6);
      v87 = v79;
LABEL_71:
      v92 = *(id *)(*(void *)(v77 + 48) + 8 * v86);
      if (!v92) {
        goto LABEL_74;
      }
LABEL_72:
      v193 = v85;
      v195 = v87;
      type metadata accessor for IDSGroupEncryptionControllerMember();
      v190 = v92;
      v97 = v92;
      v98 = sub_10040E118((uint64_t)v97, 1);
      v99 = (os_unfair_lock_s *)(*(uint64_t (**)(void))((swift_isaMask & *v5) + 0x110LL))();
      os_unfair_lock_lock(v99 + 4);
      swift_beginAccess( (char *)v5 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_membersByURI,  &v202,  33LL,  0LL);
      v100 = v97;
      v101 = v98;
      sub_1004B08EC((uint64_t)v101, v100);
      swift_endAccess(&v202);

      os_unfair_lock_unlock(v99 + 4);
      swift_release(v99);
      v102 = v5;
      v103 = v100;
      v104 = v101;
      v105 = v102;
      v106 = v103;
      v107 = v104;
      v108 = (os_log_s *)Logger.logObject.getter(v107);
      v109 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v108, v109))
      {
        v110 = swift_slowAlloc(32LL, -1LL);
        v111 = (void *)swift_slowAlloc(16LL, -1LL);
        v112 = swift_slowAlloc(32LL, -1LL);
        v202 = (void *)v112;
        *(_DWORD *)v110 = v188;
        v113 = *(void *)&v105[OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_id];
        v114 = *(void *)&v105[OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_id + 8];
        swift_bridgeObjectRetain(v114);
        *(void *)(v110 + 4) = sub_1003FFBB0(v113, v114, (uint64_t *)&v202);
        swift_bridgeObjectRelease(v114);

        *(_WORD *)(v110 + 12) = 2112;
        *(void *)(v110 + 14) = v106;
        *v111 = v190;

        *(_WORD *)(v110 + 22) = 2112;
        *(void *)(v110 + 24) = v107;
        v111[1] = v107;

        _os_log_impl( (void *)&_mh_execute_header,  v108,  v109,  "Group %s: updateMembers: added member with URI %@: %@",  (uint8_t *)v110,  0x20u);
        v115 = sub_1003F5CB4(&qword_1009B92C8);
        swift_arrayDestroy(v111, 2LL, v115);
        v116 = v111;
        v5 = v197;
        swift_slowDealloc(v116, -1LL, -1LL);
        swift_arrayDestroy(v112, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v112, -1LL, -1LL);
        swift_slowDealloc(v110, -1LL, -1LL);
      }

      else
      {
      }

      v80 = v193;
      v79 = v195;
      v77 = v187;
      continue;
    }

    break;
  }

  v94 = v79 + 1;
  if (__OFADD__(v79, 1LL)) {
    goto LABEL_149;
  }
  if (v94 < v183)
  {
    v95 = *(void *)(v184 + 8 * v94);
    v87 = v79 + 1;
    if (!v95)
    {
      v87 = v79 + 2;
      if (v79 + 2 >= v183) {
        goto LABEL_74;
      }
      v95 = *(void *)(v184 + 8 * v87);
      if (!v95)
      {
        v87 = v79 + 3;
        if (v79 + 3 >= v183) {
          goto LABEL_74;
        }
        v95 = *(void *)(v184 + 8 * v87);
        if (!v95)
        {
          v87 = v79 + 4;
          if (v79 + 4 >= v183) {
            goto LABEL_74;
          }
          v95 = *(void *)(v184 + 8 * v87);
          if (!v95)
          {
            v96 = v79 + 5;
            do
            {
              if (v183 == v96) {
                goto LABEL_74;
              }
              v95 = *(void *)(v184 + 8 * v96++);
            }

            while (!v95);
            v87 = v96 - 1;
          }
        }
      }
    }

    v85 = (v95 - 1) & v95;
    v86 = __clz(__rbit64(v95)) + (v87 << 6);
    goto LABEL_71;
  }

    v12 = (v25 - 1) & v25;
    v20 = __clz(__rbit64(v25)) + (v26 << 6);
    v11 = v26;
    goto LABEL_40;
  }

  __break(1u);
  return result;
}

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

  swift_bridgeObjectRelease(v17);
  v50 = v66;
  swift_bridgeObjectRelease(v65);
  return v50;
}

  if (v28 < 0) {
    v107 = v28;
  }
  else {
    v107 = v28 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v28);
  v93 = _CocoaArrayWrapper.endIndex.getter(v107);
  result = swift_bridgeObjectRelease(v28);
LABEL_21:
  v119 = v60;
  if (!v93)
  {
LABEL_33:
    swift_bridgeObjectRelease(v28);
    v102 = (void (*)(char *, char *))v128;
    v128(v115, (uint64_t)v58);
    v103 = *(void (**)(char *, uint64_t))(v121 + 8);
    v104 = v58;
    v105 = v122;
    v103(v130, v122);
    v103(v127, v105);
    v103((char *)v129, v105);
    v102(v117, v104);
    return ((uint64_t (*)(char *, char *))v102)(v116, v104);
  }

  if (v93 >= 1)
  {
    v94 = 0LL;
    v95 = v28 & 0xC000000000000001LL;
    v96 = v28;
    do
    {
      if (v95)
      {
        v97 = specialized _ArrayBuffer._getElementSlowPath(_:)(v94, v28);
      }

      else
      {
        v97 = *(void *)(v28 + 8 * v94 + 32);
        swift_retain(v97);
      }

      v98 = v124;
      sub_1004487E0(v124);
      v99 = v123;
      v58 = (char *)v131;
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v123 + 48))(v98, 1LL, v131) == 1)
      {
        swift_release(v97);
        sub_10040A274((uint64_t)v98, &qword_1009BC130);
      }

      else
      {
        v100 = *(void (**)(char *, void *, char *))(v99 + 32);
        v101 = v114;
        v100(v114, v98, v58);
        if ((static Date.< infix(_:_:)(v101, v115) & 1) != 0)
        {
          dispatch thunk of ModelContext.delete<A>(_:)(v97, v125, v61);
          v58 = (char *)v131;
          swift_release(v97);
          v128(v101, (uint64_t)v58);
        }

        else
        {
          v128(v101, (uint64_t)v58);
          swift_release(v97);
        }
      }

      v28 = v96;
      ++v94;
    }

    while (v93 != v94);
    goto LABEL_33;
  }

  __break(1u);
  return result;
}

void sub_10000ADD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

uint64_t sub_10000ADF0(uint64_t a1)
{
  __int128 v138 = 0u;
  __int128 v139 = 0u;
  __int128 v140 = 0u;
  __int128 v141 = 0u;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id obj = (id)objc_claimAutoreleasedReturnValue([WeakRetained persistenceManagers]);
  id v111 = [obj countByEnumeratingWithState:&v138 objects:v151 count:16];
  if (v111)
  {
    uint64_t v110 = *(void *)v139;
    do
    {
      for (i = 0LL; i != v111; i = (char *)i + 1)
      {
        if (*(void *)v139 != v110) {
          objc_enumerationMutation(obj);
        }
        v1 = *(void **)(*((void *)&v138 + 1) + 8LL * (void)i);
        uint64_t v2 = OSLogHandleForIDSCategory("Sysdiagnose-Oversized");
        id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Query cache:", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled(v4)
          && _IDSShouldLog(0LL, @"Sysdiagnose-Oversized"))
        {
          _IDSLogV(0LL, @"IDSFoundation", @"Sysdiagnose-Oversized", @"Query cache:");
        }

        __int128 v136 = 0u;
        __int128 v137 = 0u;
        __int128 v134 = 0u;
        __int128 v135 = 0u;
        id v114 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "allPeerIDKeys", v106, v107, v108));
        id v116 = [v114 countByEnumeratingWithState:&v134 objects:v150 count:16];
        if (v116)
        {
          uint64_t v115 = *(void *)v135;
          do
          {
            for (j = 0LL; j != v116; j = (char *)j + 1)
            {
              if (*(void *)v135 != v115) {
                objc_enumerationMutation(v114);
              }
              v5 = *(void **)(*((void *)&v134 + 1) + 8LL * (void)j);
              id v120 = v5;
              uint64_t v6 = OSLogHandleForIDSCategory("Sysdiagnose-Oversized");
              v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
              if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
              {
                v8 = (__CFString *)objc_claimAutoreleasedReturnValue([v5 service]);
                v9 = (void *)objc_claimAutoreleasedReturnValue([v5 fromURI]);
                v10 = (void *)objc_claimAutoreleasedReturnValue([v5 toURI]);
                *(_DWORD *)buf = 138543875;
                v145 = v8;
                __int16 v146 = 2113;
                v147 = v9;
                __int16 v148 = 2113;
                v149 = v10;
                _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Key: <%{public}@,from:%{private}@,to:%{private}@>",  buf,  0x20u);
              }

              if (os_log_shim_legacy_logging_enabled(v11)
                && _IDSShouldLog(0LL, @"Sysdiagnose-Oversized"))
              {
                v12 = (__CFString *)objc_claimAutoreleasedReturnValue([v5 service]);
                v107 = (void *)objc_claimAutoreleasedReturnValue([v5 fromURI]);
                v108 = (void *)objc_claimAutoreleasedReturnValue([v5 toURI]);
                v106 = v12;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"Sysdiagnose-Oversized",  @"Key: <%{public}@,from:%{private}@,to:%{private}@>");
              }

              char v133 = 0;
              id v13 = *(void **)(a1 + 32);
              v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "service", v106));
              v15 = (void *)objc_claimAutoreleasedReturnValue([v5 fromURI]);
              v16 = (void *)objc_claimAutoreleasedReturnValue([v5 toURI]);
              v17 = (void *)objc_claimAutoreleasedReturnValue( [v13 _endpointsForService:v14 fromURI:v15 toURI:v16 ignoreExpiration:1 ignoreCache:0 hitCache:&v133]);

              __int128 v131 = 0u;
              __int128 v132 = 0u;
              __int128 v129 = 0u;
              __int128 v130 = 0u;
              id v122 = v17;
              id v18 = [v122 countByEnumeratingWithState:&v129 objects:v143 count:16];
              if (v18)
              {
                uint64_t v123 = *(void *)v130;
                do
                {
                  for (k = 0LL; k != v18; k = (char *)k + 1)
                  {
                    if (*(void *)v130 != v123) {
                      objc_enumerationMutation(v122);
                    }
                    v20 = *(void **)(*((void *)&v129 + 1) + 8LL * (void)k);
                    v21 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "serializedPublicLegacyIdentity", v106));
                    uint64_t v22 = OSLogHandleForIDSCategory("Sysdiagnose");
                    v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
                    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
                    {
                      v24 = (__CFString *)objc_claimAutoreleasedReturnValue([v20 URI]);
                      *(_DWORD *)buf = 138412290;
                      v145 = v24;
                      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "        URI: %@", buf, 0xCu);
                    }

                    if (os_log_shim_legacy_logging_enabled(v25)
                      && _IDSShouldLog(0LL, @"Sysdiagnose"))
                    {
                      v106 = (__CFString *)objc_claimAutoreleasedReturnValue([v20 URI]);
                      _IDSLogV(0LL, @"IDSFoundation", @"Sysdiagnose", @"        URI: %@");
                    }

                    uint64_t v26 = OSLogHandleForIDSCategory("Sysdiagnose");
                    v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
                    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
                    {
                      v28 = (__CFString *)objc_claimAutoreleasedReturnValue([v20 shortHandle]);
                      *(_DWORD *)buf = 138412290;
                      v145 = v28;
                      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "        Short Handle: %@",  buf,  0xCu);
                    }

                    if (os_log_shim_legacy_logging_enabled(v29)
                      && _IDSShouldLog(0LL, @"Sysdiagnose"))
                    {
                      v106 = (__CFString *)objc_claimAutoreleasedReturnValue([v20 shortHandle]);
                      _IDSLogV(0LL, @"IDSFoundation", @"Sysdiagnose", @"        Short Handle: %@");
                    }

                    uint64_t v30 = OSLogHandleForIDSCategory("Sysdiagnose");
                    v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
                    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
                    {
                      v32 = (void *)objc_claimAutoreleasedReturnValue([v20 pushToken]);
                      v33 = (__CFString *)(id)objc_claimAutoreleasedReturnValue([v32 debugDescription]);
                      *(_DWORD *)buf = 138412290;
                      v145 = v33;
                      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "        Push token: %@",  buf,  0xCu);
                    }

                    if (os_log_shim_legacy_logging_enabled(v34)
                      && _IDSShouldLog(0LL, @"Sysdiagnose"))
                    {
                      v35 = (void *)objc_claimAutoreleasedReturnValue([v20 pushToken]);
                      v106 = (__CFString *)objc_claimAutoreleasedReturnValue([v35 debugDescription]);
                      _IDSLogV(0LL, @"IDSFoundation", @"Sysdiagnose", @"        Push token: %@");
                    }

                    uint64_t v36 = OSLogHandleForIDSCategory("Sysdiagnose");
                    v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
                    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
                    {
                      v38 = (void *)objc_claimAutoreleasedReturnValue([v20 sessionToken]);
                      v39 = (__CFString *)(id)objc_claimAutoreleasedReturnValue([v38 debugDescription]);
                      *(_DWORD *)buf = 138412290;
                      v145 = v39;
                      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "        Session token: %@",  buf,  0xCu);
                    }

                    if (os_log_shim_legacy_logging_enabled(v40)
                      && _IDSShouldLog(0LL, @"Sysdiagnose"))
                    {
                      v41 = (void *)objc_claimAutoreleasedReturnValue([v20 sessionToken]);
                      v106 = (__CFString *)objc_claimAutoreleasedReturnValue([v41 debugDescription]);
                      _IDSLogV(0LL, @"IDSFoundation", @"Sysdiagnose", @"        Session token: %@");
                    }

                    uint64_t v42 = OSLogHandleForIDSCategory("Sysdiagnose");
                    v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
                    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
                    {
                      v44 = (__CFString *)objc_claimAutoreleasedReturnValue([v20 expireDate]);
                      *(_DWORD *)buf = 138412290;
                      v145 = v44;
                      _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "        Expire: %@",  buf,  0xCu);
                    }

                    if (os_log_shim_legacy_logging_enabled(v45)
                      && _IDSShouldLog(0LL, @"Sysdiagnose"))
                    {
                      v106 = (__CFString *)objc_claimAutoreleasedReturnValue([v20 expireDate]);
                      _IDSLogV(0LL, @"IDSFoundation", @"Sysdiagnose", @"        Expire: %@");
                    }

                    uint64_t v46 = OSLogHandleForIDSCategory("Sysdiagnose");
                    v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
                    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
                    {
                      v48 = (__CFString *)objc_claimAutoreleasedReturnValue([v20 refreshDate]);
                      *(_DWORD *)buf = 138412290;
                      v145 = v48;
                      _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "        Refresh: %@",  buf,  0xCu);
                    }

                    if (os_log_shim_legacy_logging_enabled(v49)
                      && _IDSShouldLog(0LL, @"Sysdiagnose"))
                    {
                      v106 = (__CFString *)objc_claimAutoreleasedReturnValue([v20 refreshDate]);
                      _IDSLogV(0LL, @"IDSFoundation", @"Sysdiagnose", @"        Refresh: %@");
                    }

                    uint64_t v50 = OSLogHandleForIDSCategory("Sysdiagnose");
                    v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
                    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 138412290;
                      v145 = v21;
                      _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "        Public Key: %@",  buf,  0xCu);
                    }

                    if (os_log_shim_legacy_logging_enabled(v52)
                      && _IDSShouldLog(0LL, @"Sysdiagnose"))
                    {
                      v106 = v21;
                      _IDSLogV(0LL, @"IDSFoundation", @"Sysdiagnose", @"        Public Key: %@");
                    }
                  }

                  id v18 = [v122 countByEnumeratingWithState:&v129 objects:v143 count:16];
                }

                while (v18);
              }

              if (v133)
              {
                v53 = *(void **)(a1 + 32);
                v54 = (void *)objc_claimAutoreleasedReturnValue([v120 service]);
                v55 = (void *)objc_claimAutoreleasedReturnValue([v120 fromURI]);
                uint64_t v56 = objc_claimAutoreleasedReturnValue([v120 toURI]);
                v118 = (void *)objc_claimAutoreleasedReturnValue( [v53 _endpointsForService:v54 fromURI:v55 toURI:v56 ignoreExpiration:1 ignoreCache:1 hitCache:0]);

                v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v122));
                v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v118));
                LOBYTE(v56) = [v57 isEqualToSet:v58];

                if ((v56 & 1) == 0)
                {
                  uint64_t v59 = OSLogHandleForIDSCategory("Sysdiagnose");
                  v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
                  if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
                  {
                    v61 = (__CFString *)objc_claimAutoreleasedReturnValue([v120 service]);
                    v62 = (void *)objc_claimAutoreleasedReturnValue([v120 fromURI]);
                    v63 = (void *)objc_claimAutoreleasedReturnValue([v120 toURI]);
                    *(_DWORD *)buf = 138543875;
                    v145 = v61;
                    __int16 v146 = 2113;
                    v147 = v62;
                    __int16 v148 = 2113;
                    v149 = v63;
                    _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "Persisted Result for Key: <%{public}@,from:%{private}@,to:%{private}@>",  buf,  0x20u);
                  }

                  if (os_log_shim_legacy_logging_enabled(v64)
                    && _IDSShouldLog(0LL, @"Sysdiagnose"))
                  {
                    v65 = (__CFString *)objc_claimAutoreleasedReturnValue([v120 service]);
                    v107 = (void *)objc_claimAutoreleasedReturnValue([v120 fromURI]);
                    v108 = (void *)objc_claimAutoreleasedReturnValue([v120 toURI]);
                    v106 = v65;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"Sysdiagnose",  @"Persisted Result for Key: <%{public}@,from:%{private}@,to:%{private}@>");
                  }

                  __int128 v127 = 0u;
                  __int128 v128 = 0u;
                  __int128 v125 = 0u;
                  __int128 v126 = 0u;
                  id v121 = v118;
                  id v66 = [v121 countByEnumeratingWithState:&v125 objects:v142 count:16];
                  if (v66)
                  {
                    uint64_t v124 = *(void *)v126;
                    do
                    {
                      for (m = 0LL; m != v66; m = (char *)m + 1)
                      {
                        if (*(void *)v126 != v124) {
                          objc_enumerationMutation(v121);
                        }
                        v68 = *(void **)(*((void *)&v125 + 1) + 8LL * (void)m);
                        v69 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "serializedPublicLegacyIdentity", v106));
                        uint64_t v70 = OSLogHandleForIDSCategory("Sysdiagnose");
                        v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
                        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
                        {
                          v72 = (__CFString *)objc_claimAutoreleasedReturnValue([v68 URI]);
                          *(_DWORD *)buf = 138412290;
                          v145 = v72;
                          _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEFAULT,  "        URI: %@",  buf,  0xCu);
                        }

                        if (os_log_shim_legacy_logging_enabled(v73)
                          && _IDSShouldLog(0LL, @"Sysdiagnose"))
                        {
                          v106 = (__CFString *)objc_claimAutoreleasedReturnValue([v68 URI]);
                          _IDSLogV(0LL, @"IDSFoundation", @"Sysdiagnose", @"        URI: %@");
                        }

                        uint64_t v74 = OSLogHandleForIDSCategory("Sysdiagnose");
                        v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);
                        if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
                        {
                          v76 = (__CFString *)objc_claimAutoreleasedReturnValue([v68 shortHandle]);
                          *(_DWORD *)buf = 138412290;
                          v145 = v76;
                          _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEFAULT,  "        Short Handle: %@",  buf,  0xCu);
                        }

                        if (os_log_shim_legacy_logging_enabled(v77)
                          && _IDSShouldLog(0LL, @"Sysdiagnose"))
                        {
                          v106 = (__CFString *)objc_claimAutoreleasedReturnValue([v68 shortHandle]);
                          _IDSLogV(0LL, @"IDSFoundation", @"Sysdiagnose", @"        Short Handle: %@");
                        }

                        uint64_t v78 = OSLogHandleForIDSCategory("Sysdiagnose");
                        v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
                        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
                        {
                          v80 = (void *)objc_claimAutoreleasedReturnValue([v68 pushToken]);
                          v81 = (__CFString *)(id)objc_claimAutoreleasedReturnValue([v80 debugDescription]);
                          *(_DWORD *)buf = 138412290;
                          v145 = v81;
                          _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEFAULT,  "        Push token: %@",  buf,  0xCu);
                        }

                        if (os_log_shim_legacy_logging_enabled(v82)
                          && _IDSShouldLog(0LL, @"Sysdiagnose"))
                        {
                          v83 = (void *)objc_claimAutoreleasedReturnValue([v68 pushToken]);
                          v106 = (__CFString *)objc_claimAutoreleasedReturnValue([v83 debugDescription]);
                          _IDSLogV(0LL, @"IDSFoundation", @"Sysdiagnose", @"        Push token: %@");
                        }

                        uint64_t v84 = OSLogHandleForIDSCategory("Sysdiagnose");
                        v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
                        if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
                        {
                          v86 = (void *)objc_claimAutoreleasedReturnValue([v68 sessionToken]);
                          v87 = (__CFString *)(id)objc_claimAutoreleasedReturnValue([v86 debugDescription]);
                          *(_DWORD *)buf = 138412290;
                          v145 = v87;
                          _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEFAULT,  "        Session token: %@",  buf,  0xCu);
                        }

                        if (os_log_shim_legacy_logging_enabled(v88)
                          && _IDSShouldLog(0LL, @"Sysdiagnose"))
                        {
                          v89 = (void *)objc_claimAutoreleasedReturnValue([v68 sessionToken]);
                          v106 = (__CFString *)objc_claimAutoreleasedReturnValue([v89 debugDescription]);
                          _IDSLogV( 0LL,  @"IDSFoundation",  @"Sysdiagnose",  @"        Session token: %@");
                        }

                        uint64_t v90 = OSLogHandleForIDSCategory("Sysdiagnose");
                        v91 = (os_log_s *)objc_claimAutoreleasedReturnValue(v90);
                        if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
                        {
                          v92 = (__CFString *)objc_claimAutoreleasedReturnValue([v68 expireDate]);
                          *(_DWORD *)buf = 138412290;
                          v145 = v92;
                          _os_log_impl( (void *)&_mh_execute_header,  v91,  OS_LOG_TYPE_DEFAULT,  "        Expire: %@",  buf,  0xCu);
                        }

                        if (os_log_shim_legacy_logging_enabled(v93)
                          && _IDSShouldLog(0LL, @"Sysdiagnose"))
                        {
                          v106 = (__CFString *)objc_claimAutoreleasedReturnValue([v68 expireDate]);
                          _IDSLogV(0LL, @"IDSFoundation", @"Sysdiagnose", @"        Expire: %@");
                        }

                        uint64_t v94 = OSLogHandleForIDSCategory("Sysdiagnose");
                        v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
                        if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
                        {
                          v96 = (__CFString *)objc_claimAutoreleasedReturnValue([v68 refreshDate]);
                          *(_DWORD *)buf = 138412290;
                          v145 = v96;
                          _os_log_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_DEFAULT,  "        Refresh: %@",  buf,  0xCu);
                        }

                        if (os_log_shim_legacy_logging_enabled(v97)
                          && _IDSShouldLog(0LL, @"Sysdiagnose"))
                        {
                          v106 = (__CFString *)objc_claimAutoreleasedReturnValue([v68 refreshDate]);
                          _IDSLogV(0LL, @"IDSFoundation", @"Sysdiagnose", @"        Refresh: %@");
                        }

                        uint64_t v98 = OSLogHandleForIDSCategory("Sysdiagnose");
                        v99 = (os_log_s *)objc_claimAutoreleasedReturnValue(v98);
                        if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)buf = 138412290;
                          v145 = v69;
                          _os_log_impl( (void *)&_mh_execute_header,  v99,  OS_LOG_TYPE_DEFAULT,  "        Public Key: %@",  buf,  0xCu);
                        }

                        if (os_log_shim_legacy_logging_enabled(v100)
                          && _IDSShouldLog(0LL, @"Sysdiagnose"))
                        {
                          v106 = v69;
                          _IDSLogV(0LL, @"IDSFoundation", @"Sysdiagnose", @"        Public Key: %@");
                        }
                      }

                      id v66 = [v121 countByEnumeratingWithState:&v125 objects:v142 count:16];
                    }

                    while (v66);
                  }
                }
              }
            }

            id v116 = [v114 countByEnumeratingWithState:&v134 objects:v150 count:16];
          }

          while (v116);
        }
      }

      id v111 = [obj countByEnumeratingWithState:&v138 objects:v151 count:16];
    }

    while (v111);
  }

  v101 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sysdiagnose_oversized](&OBJC_CLASS___IMRGLog, "sysdiagnose_oversized"));
  if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
  {
    v102 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keyTransparencyVerifier]);
    unsigned int v103 = [v102 isOptedInForServiceIdentifier:@"com.apple.madrid"];
    v104 = @"NO";
    if (v103) {
      v104 = @"YES";
    }
    *(_DWORD *)buf = 138412290;
    v145 = v104;
    _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "KT Opt In State: %@", buf, 0xCu);
  }

  return 0LL;
}

LABEL_209:
                      }

                      else
                      {
                        __int128 v139 = 0LL;
                      }

                      objc_autoreleasePoolPop(context);
                      LOBYTE(v205) = v226;
                      LOBYTE(v201) = v256;
                      v147 = -[IDSEndpoint initWithURI:serviceIdentifier:clientData:KTLoggableData:KTDeviceSignature:mismatchedAccountFlag:ktCapableFlag:pushToken:sessionToken:expireDate:refreshDate:anonymizedSenderID:verifiedBusiness:serializedPublicMessageProtectionIdentity:queryTimeInterval:serializedNGMDeviceIdentity:serializedNGMDevicePrekey:serializedApplicationPublicKey:endpointURIProperties:familyEndpointData:gameCenterData:]( objc_alloc(&OBJC_CLASS___IDSEndpoint),  "initWithURI:serviceIdentifier:clientData:KTLoggableData:KTDeviceSignature:mismatchedAccou ntFlag:ktCapableFlag:pushToken:sessionToken:expireDate:refreshDate:anonymizedSenderID:ver ifiedBusiness:serializedPublicMessageProtectionIdentity:queryTimeInterval:serializedNGMDe viceIdentity:serializedNGMDevicePrekey:serializedApplicationPublicKey:endpointURIProperti es:familyEndpointData:gameCenterData:",  v14,  v11,  v128,  v266,  v262,  v252,  v137,  v201,  v272,  v263,  v248,  v249,  v227,  v205,  v237,  v235,  v236,  v139,  v250,  v259,  v253);
                      -[NSMutableArray addObject:](v238, "addObject:", v147);

                      v257 = 1;
                    }
                  }

                  else
                  {
                    v144 = OSLogHandleForIDSCategory("PeerLookup_SwiftData");
                    v145 = (os_log_s *)objc_claimAutoreleasedReturnValue(v144);
                    if (os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl( (void *)&_mh_execute_header,  v145,  OS_LOG_TYPE_DEFAULT,  "   No known push token found, ignoring",  buf,  2u);
                    }

                    if (os_log_shim_legacy_logging_enabled(v146)
                      && _IDSShouldLog(0LL, @"PeerLookup_SwiftData"))
                    {
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup_SwiftData",  @"   No known push token found, ignoring");
                    }
                  }
                }

                else
                {
                  v109 = OSLogHandleForIDSCategory("Warning");
                  uint64_t v110 = (os_log_s *)objc_claimAutoreleasedReturnValue(v109);
                  if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 138412290;
                    v326 = (uint64_t)v272;
                    _os_log_impl( (void *)&_mh_execute_header,  v110,  OS_LOG_TYPE_ERROR,  "   No known iMessage public key found for token, skipping this identity: %@",  buf,  0xCu);
                  }

                  if (os_log_shim_legacy_logging_enabled(v111))
                  {
                    _IDSWarnV( @"IDSFoundation",  @"   No known iMessage public key found for token, skipping this identity: %@");
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"   No known iMessage public key found for token, skipping this identity: %@");
                    v199 = v272;
                    _IDSLogTransport( @"Warning",  @"IDS",  @"   No known iMessage public key found for token, skipping this identity: %@");
                  }
                }

                uint64_t v26 = v251 + 1;
              }

              while ((id)(v251 + 1) != v244);
              v244 = [v231 countByEnumeratingWithState:&v309 objects:v324 count:16];
            }

            while (v244);
          }

          else
          {
            v257 = 0;
          }

          __int16 v148 = objc_alloc(&OBJC_CLASS___KTVerifierResult);
          v149 = (void *)objc_claimAutoreleasedReturnValue( +[IDSKeyTransparencyVerifier keyTransparencyURIPrefixForServiceIdentifier:]( &OBJC_CLASS___IDSKeyTransparencyVerifier,  "keyTransparencyURIPrefixForServiceIdentifier:",  v11));
          v150 = (void *)objc_claimAutoreleasedReturnValue([v14 prefixedURI]);
          v151 = (void *)objc_claimAutoreleasedReturnValue([v149 stringByAppendingString:v150]);
          v152 = (void *)objc_claimAutoreleasedReturnValue( +[IDSKeyTransparencyVerifier keyTransparencyApplicationForServiceIdentifier:]( &OBJC_CLASS___IDSKeyTransparencyVerifier,  "keyTransparencyApplicationForServiceIdentifier:",  v11));
          v271 = [v148 initPendingForUri:v151 application:v152];

          v153 = objc_alloc(&OBJC_CLASS___IDSQueryKeyTransparencyContext);
          v154 = (void *)objc_claimAutoreleasedReturnValue(-[IDSKeyTransparencyIndex accountKey](v210, "accountKey"));
          v269 = -[IDSQueryKeyTransparencyContext initWithVerifierResult:ticket:accountKey:queryResponseTime:ktOptIn:]( v153,  "initWithVerifierResult:ticket:accountKey:queryResponseTime:ktOptIn:",  v271,  0LL,  v154,  v208,  v207);

          v155 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v222, "objectForKeyedSubscript:", v14));
          LODWORD(v148) = v155 == 0LL;

          if ((_DWORD)v148)
          {
            v275 = (void *)objc_claimAutoreleasedReturnValue( -[IDSPeerIDManager_SwiftData peerTokensForURI:fromURI:service:]( self,  "peerTokensForURI:fromURI:service:",  v14,  v10,  v11));
            v156 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
            v300 = 0u;
            v299 = 0u;
            v298 = 0u;
            v297 = 0u;
            v157 = v238;
            v158 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v157,  "countByEnumeratingWithState:objects:count:",  &v297,  v320,  16LL);
            if (v158)
            {
              v159 = *(void *)v298;
              do
              {
                for (k = 0LL; k != v158; k = (char *)k + 1)
                {
                  if (*(void *)v298 != v159) {
                    objc_enumerationMutation(v157);
                  }
                  v161 = *(void **)(*((void *)&v297 + 1) + 8LL * (void)k);
                  v162 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v161, "pushTokenObject", v199));

                  if (v162)
                  {
                    v163 = (void *)objc_claimAutoreleasedReturnValue([v161 pushTokenObject]);
                    [v156 addObject:v163];
                  }
                }

                v158 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v157,  "countByEnumeratingWithState:objects:count:",  &v297,  v320,  16LL);
              }

              while (v158);
            }

            if ([v275 count] && (objc_msgSend(v275, "isEqualToSet:", v156) & 1) == 0)
            {
              v164 = [v156 mutableCopy];
              [v164 minusSet:v275];
              v165 = OSLogHandleForIDSCategory("PeerLookup_SwiftData");
              v166 = (os_log_s *)objc_claimAutoreleasedReturnValue(v165);
              if (os_log_type_enabled(v166, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138413058;
                v326 = (uint64_t)v14;
                v327 = 2112;
                v328 = (_UNKNOWN **)v10;
                v329 = 2112;
                v330 = v11;
                v331 = 2112;
                v332 = v164;
                _os_log_impl( (void *)&_mh_execute_header,  v166,  OS_LOG_TYPE_DEFAULT,  "Detected devices set changed for uri: %@, fromURI: %@, service: %@ {new: %@}",  buf,  0x2Au);
              }

              if (os_log_shim_legacy_logging_enabled(v167)
                && _IDSShouldLog(0LL, @"PeerLookup_SwiftData"))
              {
                v203 = v11;
                v204 = v164;
                v199 = v14;
                v202 = (_UNKNOWN **)v10;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup_SwiftData",  @"Detected devices set changed for uri: %@, fromURI: %@, service: %@ {new: %@}");
              }
            }

            v168 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID", v199));
            v169 = OSLogHandleForIDSCategory("PeerLookup_SwiftData");
            v170 = (os_log_s *)objc_claimAutoreleasedReturnValue(v169);
            if (os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412802;
              v326 = (uint64_t)v11;
              v327 = 2112;
              v328 = (_UNKNOWN **)v14;
              v329 = 2112;
              v330 = v168;
              _os_log_impl( (void *)&_mh_execute_header,  v170,  OS_LOG_TYPE_DEFAULT,  "Will save endpoints to SwiftData DB for service: %@, uri: %@, uuid: %@",  buf,  0x20u);
            }

            if (os_log_shim_legacy_logging_enabled(v171)
              && _IDSShouldLog(0LL, @"PeerLookup_SwiftData"))
            {
              v202 = (_UNKNOWN **)v14;
              v203 = v168;
              v199 = v11;
              _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup_SwiftData",  @"Will save endpoints to SwiftData DB for service: %@, uri: %@, uuid: %@");
            }

            v172 = -[IDSPeerIDKey initWithService:fromURI:toURI:]( objc_alloc(&OBJC_CLASS___IDSPeerIDKey),  "initWithService:fromURI:toURI:",  v11,  v10,  v14);
            v173 = -[IDSPeerIDValue initWithEndpoints:keyTransparencyContext:]( objc_alloc(&OBJC_CLASS___IDSPeerIDValue),  "initWithEndpoints:keyTransparencyContext:",  v157,  v269);
            -[NSCache setObject:forKey:cost:]( self->_dbCache,  "setObject:forKey:cost:",  v173,  v172,  -[NSMutableArray count](v157, "count"));
            v293[0] = _NSConcreteStackBlock;
            v293[1] = 3221225472LL;
            v293[2] = sub_10000F24C;
            v293[3] = &unk_1008F6080;
            v174 = v11;
            v294 = v174;
            v295 = v14;
            v175 = v168;
            v296 = v175;
            [v206 saveEndpoints:v157 ktContext:v269 service:v174 fromURI:v10 toURI:v14 completion:v293];
          }

          v291 = 0u;
          v292 = 0u;
          v289 = 0u;
          v290 = 0u;
          v273 = (id)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allValues](self->_clientDataUpdateBlocks, "allValues", v199));
          v176 = [v273 countByEnumeratingWithState:&v289 objects:v319 count:16];
          if (v176)
          {
            v276 = *(void *)v290;
            do
            {
              for (m = 0LL; m != v176; m = (char *)m + 1)
              {
                if (*(void *)v290 != v276) {
                  objc_enumerationMutation(v273);
                }
                v178 = *(void *)(*((void *)&v289 + 1) + 8LL * (void)m);
                v285 = 0u;
                v286 = 0u;
                v287 = 0u;
                v288 = 0u;
                v179 = v238;
                v180 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v179,  "countByEnumeratingWithState:objects:count:",  &v285,  v318,  16LL);
                if (v180)
                {
                  v181 = *(void *)v286;
                  do
                  {
                    for (n = 0LL; n != v180; n = (char *)n + 1)
                    {
                      if (*(void *)v286 != v181) {
                        objc_enumerationMutation(v179);
                      }
                      (*(void (**)(uint64_t, id, void *, id, void))(v178 + 16))( v178,  v11,  v14,  v10,  *(void *)(*((void *)&v285 + 1) + 8LL * (void)n));
                    }

                    v180 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v179,  "countByEnumeratingWithState:objects:count:",  &v285,  v318,  16LL);
                  }

                  while (v180);
                }
              }

              v176 = [v273 countByEnumeratingWithState:&v289 objects:v319 count:16];
            }

            while (v176);
          }

          if ((v257 & 1) == 0) {
            -[IDSPeerIDManager_SwiftData forgetPeerTokensForURI:fromURI:service:]( self,  "forgetPeerTokensForURI:fromURI:service:",  v14,  v10,  v11);
          }
          v183 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v257 & 1));
          -[NSMutableDictionary setObject:forKeyedSubscript:](v215, "setObject:forKeyedSubscript:", v183, v14);

          v184 = -[NSMutableArray copy](v238, "copy");
          -[NSMutableDictionary setObject:forKeyedSubscript:](v222, "setObject:forKeyedSubscript:", v184, v14);
        }

        else
        {
          -[IDSPeerIDManager_SwiftData forgetPeerTokensForURI:fromURI:service:]( self,  "forgetPeerTokensForURI:fromURI:service:",  v14,  v10,  v11);
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v215,  "setObject:forKeyedSubscript:",  &__kCFBooleanFalse,  v14);
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v222,  "setObject:forKeyedSubscript:",  &__NSArray0__struct,  v14);
        }

        v12 = v217 + 1;
      }

      while ((id)(v217 + 1) != v216);
      v185 = [obj countByEnumeratingWithState:&v313 objects:v335 count:16];
      v216 = v185;
    }

    while (v185);
  }

  v186 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v186, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v186,  OS_LOG_TYPE_DEFAULT,  "Remote query finished - kicking KT peer verification",  buf,  2u);
  }

  v187 = (void *)objc_claimAutoreleasedReturnValue(-[IDSPeerIDManager_SwiftData keyTransparencyVerifier](self, "keyTransparencyVerifier"));
  [v187 kickPeerVerificationForURIs:obj service:v11 localURI:v10 fetchNow:0 withCompletion:&stru_1008F60C0];

  v283 = 0u;
  v284 = 0u;
  v281 = 0u;
  v282 = 0u;
  v188 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allValues](self->_endpointQueryListeners, "allValues"));
  v189 = [v188 countByEnumeratingWithState:&v281 objects:v317 count:16];
  if (v189)
  {
    v190 = *(void *)v282;
    do
    {
      for (ii = 0LL; ii != v189; ii = (char *)ii + 1)
      {
        if (*(void *)v282 != v190) {
          objc_enumerationMutation(v188);
        }
        v192 = *(void **)(*((void *)&v281 + 1) + 8LL * (void)ii);
        v193 = (void *)objc_claimAutoreleasedReturnValue([v192 queryCompletionBlock]);
        if (v193)
        {
          v194 = (void *)objc_claimAutoreleasedReturnValue([v192 queue]);
          v195 = v194 == 0LL;

          if (!v195)
          {
            v196 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v192 queue]);
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472LL;
            block[2] = sub_10000F528;
            block[3] = &unk_1008F60E8;
            block[4] = v192;
            v278 = v11;
            v279 = v10;
            v280 = v222;
            dispatch_async(v196, block);
          }
        }
      }

      v189 = [v188 countByEnumeratingWithState:&v281 objects:v317 count:16];
    }

    while (v189);
  }

  v197 = -[NSMutableDictionary copy](v215, "copy");
  return v197;
}

void sub_10000F24C(void *a1, int a2, void *a3)
{
  id v5 = a3;
  if (v5 || !a2)
  {
    uint64_t v12 = OSLogHandleForIDSCategory("PeerLookup_SwiftData");
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = a1[4];
      uint64_t v15 = a1[5];
      uint64_t v16 = a1[6];
      *(_DWORD *)buf = 138413058;
      uint64_t v19 = v14;
      __int16 v20 = 2112;
      uint64_t v21 = v15;
      __int16 v22 = 2112;
      id v23 = v5;
      __int16 v24 = 2112;
      uint64_t v25 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Error saving endpoints to SwiftData DB for service: %@, uri: %@, error: %@, uuid: %@",  buf,  0x2Au);
    }

    if (os_log_shim_legacy_logging_enabled(v17)
      && _IDSShouldLog(0LL, @"PeerLookup_SwiftData"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup_SwiftData",  @"Error saving endpoints to SwiftData DB for service: %@, uri: %@, error: %@, uuid: %@");
    }
  }

  else
  {
    uint64_t v6 = OSLogHandleForIDSCategory("PeerLookup_SwiftData");
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = a1[4];
      uint64_t v9 = a1[5];
      v10 = (void *)a1[6];
      *(_DWORD *)buf = 138412802;
      uint64_t v19 = v8;
      __int16 v20 = 2112;
      uint64_t v21 = v9;
      __int16 v22 = 2112;
      id v23 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Successfully saved endpoints to SwiftData DB for service: %@, uri: %@, uuid: %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v11)
      && _IDSShouldLog(0LL, @"PeerLookup_SwiftData"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup_SwiftData",  @"Successfully saved endpoints to SwiftData DB for service: %@, uri: %@, uuid: %@");
    }
  }
}

void sub_10000F474(id a1, NSArray *a2, NSError *a3)
{
  id v3 = a3;
  if (v3)
  {
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Failed kicking KT peer verification for query { error: %@ }",  (uint8_t *)&v5,  0xCu);
    }
  }
}

void sub_10000F528(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queryCompletionBlock]);
  (*((void (**)(id, void, void, void))v2 + 2))( v2,  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56));
}

LABEL_25:
        -[NSMutableArray addObjectsFromArray:](v53, "addObjectsFromArray:", v31);
        uint64_t v15 = v47;
        -[NSMutableDictionary setObject:forKeyedSubscript:](v47, "setObject:forKeyedSubscript:", v53, v21);
      }

      uint64_t v16 = obj;
      uint64_t v50 = [obj countByEnumeratingWithState:&v63 objects:v68 count:16];
    }

    while (v50);

    uint64_t v14 = v44;
    uint64_t v40 = v43;
    if (!v44) {
      uint64_t v40 = 0;
    }
    if ((v40 & v17) == 1)
    {
      LOBYTE(v42) = 0;
      -[IDSPeerIDManager_SwiftData startQueryForURIs:fromIdentity:fromURI:fromService:forSending:forRefresh:isForced:reason:completionBlock:]( self,  "startQueryForURIs:fromIdentity:fromURI:fromService:forSending:forRefresh:isForced:reason:completionBlock:",  v48,  v44,  v51,  v49,  0LL,  1LL,  v42,  @"EndpointForURI",  0LL);
    }
  }

  else
  {
  }

  return v15;
}

  uint64_t v17 = 0;
LABEL_33:

  return v17;
}

    -[IDSRegistrationController _notifyRegistrationSuccess:](self, "_notifyRegistrationSuccess:", v5);
    goto LABEL_26;
  }

  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v26 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Ignoring succeeded registration, registration is disabled: %@",  buf,  0xCu);
  }

LABEL_26:
}

        uint64_t v25 = im_primary_queue(v23, v24);
        uint64_t v26 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v25);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_1000793F8;
        block[3] = &unk_1008F6010;
        block[4] = *(void *)(a1 + 32);
        v27 = dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT,  QOS_CLASS_USER_INTERACTIVE,  0,  block);
        dispatch_async(v26, v27);

        goto LABEL_26;
      }
    }

    goto LABEL_25;
  }

  uint64_t v30 = *(void *)(a1 + 32);
  v31 = *(void *)(v30 + 96);
  if (v31)
  {
    v32 = (void *)(v31 - 1);
    v33 = (id)v30;
    objc_sync_enter(v33);
    uint64_t v34 = *(void **)(*(void *)(a1 + 32) + 144LL);
    v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v32));
    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v34 objectForKey:v35]);

    objc_sync_exit(v33);
    if (v36)
    {
      v37 = [v36 intValue];
    }

    else
    {
      v41 = OSLogHandleForTransportCategory("IDSDSession");
      uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v55 = v32;
        _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "Lost race condition - missing connection for extra connection %lu",  buf,  0xCu);
      }

      v44 = os_log_shim_legacy_logging_enabled(v43);
      if ((_DWORD)v44)
      {
        if (_IDSShouldLogTransport(v44))
        {
          _IDSLogTransport( @"IDSDSession",  @"IDS",  @"Lost race condition - missing connection for extra connection %lu");
          if (_IDSShouldLog(0LL, @"IDSDSession")) {
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Lost race condition - missing connection for extra connection %lu");
          }
        }
      }

      v37 = -1;
    }

    uint64_t v30 = *(void *)(a1 + 32);
    uint64_t v40 = *(void *)(v30 + 96) + 1LL;
  }

  else
  {
    v37 = *(_DWORD *)(v30 + 584);
    uint64_t v40 = 1LL;
  }

  *(void *)(v30 + 96) = v40;
  if (v37 == -1) {
    goto LABEL_17;
  }
  v48[0] = _NSConcreteStackBlock;
  v48[1] = 3221225472LL;
  v48[2] = sub_10007951C;
  v48[3] = &unk_1008F8828;
  v48[4] = *(void *)(a1 + 32);
  uint64_t v49 = v6;
  uint64_t v50 = v37;
  IDSTransportThreadAddBlock(v48, v45);
  __int16 v20 = &v49;
LABEL_16:

LABEL_17:
  if (*(double *)(*(void *)(a1 + 32) + 416LL) == 0.0)
  {
    if (qword_1009BE930 != -1) {
      dispatch_once(&qword_1009BE930, &stru_1008F91C0);
    }
    *(double *)(*(void *)(a1 + 32) + 416LL) = *(double *)&qword_1009BE938 * (double)mach_continuous_time();
  }

    int v5 = v37;
  }
}

  return v13;
}

  return v20;
}

        v32 = (uint64_t)v14;
LABEL_47:

        uint64_t v14 = (os_log_s *)v32;
LABEL_48:

        goto LABEL_49;
      }
    }

    uint64_t v64 = v10;
    v31 = IMStripLoginID(v14);
    v32 = objc_claimAutoreleasedReturnValue(v31);

    if (v16)
    {
      v33 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
      uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue([v33 accountWithUniqueID:v16]);

      if (v34)
      {
        v35 = v34;
        uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s service](v34, "service"));
        v37 = (void *)objc_claimAutoreleasedReturnValue([v36 identifier]);
        v38 = [v37 isEqualToIgnoringCase:v15];

        if ((v38 & 1) != 0)
        {
          v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            __int16 v24 = v35;
            v72 = v35;
            _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "Not creating new account, we have existing: %@",  buf,  0xCu);
          }

          else
          {
            __int16 v24 = v35;
          }

      uint64_t v11 = (char *)v11 + 1;
    }

    while (v7 != v11);
    uint64_t v19 = [obj countByEnumeratingWithState:&v36 objects:v40 count:16];
    v7 = v19;
    v31 += (uint64_t)v11;
  }

  while (v19);

  if (v9)
  {
    [*(id *)(*(void *)(a1 + 32) + 24) removeObjectsAtIndexes:v9];
    if (![*(id *)(*(void *)(a1 + 32) + 24) count])
    {
      __int16 v20 = *(void *)(a1 + 32);
      uint64_t v21 = *(void **)(v20 + 24);
      *(void *)(v20 + 24) = 0LL;
    }
  }

  if (v32)
  {
    [v32 timeIntervalSinceNow];
    id v23 = v22;
    [*(id *)(a1 + 32) _fallbackTimeoutForService:v30];
    uint64_t v25 = v23 + v24;
    v33 = 1;
  }

  else
  {
    v32 = 0LL;
    if ((v33 & 1) != 0) {
      uint64_t v25 = 60.0;
    }
    else {
      uint64_t v25 = 0.0;
    }
  }

      LODWORD(v17) = 0;
    }
  }

  else
  {
    uint64_t v42 = OSLogHandleForIDSCategory("IDQuery");
    v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v55 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  " => Bogus ID query for: %@   ignoring this",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v44))
    {
      MarcoLogMadridLevel( @"IDSDaemonQueries",  0LL,  @"IDQuery",  @" => Bogus ID query for: %@   ignoring this");
      IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @" => Bogus ID query for: %@   ignoring this");
      if ((_IMWillLog(@"IDQuery", v45) & 1) != 0) {
        _IMAlwaysLog(0LL, @"IDQuery", @" => Bogus ID query for: %@   ignoring this");
      }
    }

    LODWORD(v17) = 2;
  }

        -[NSMutableArray addObjectsFromArray:](v53, "addObjectsFromArray:", v31);
        uint64_t v15 = v47;
        -[NSMutableDictionary setObject:forKeyedSubscript:](v47, "setObject:forKeyedSubscript:", v53, v21);
      }

      uint64_t v16 = obj;
      uint64_t v50 = [obj countByEnumeratingWithState:&v63 objects:v68 count:16];
    }

    while (v50);

    uint64_t v14 = v44;
    uint64_t v40 = v43;
    if (!v44) {
      uint64_t v40 = 0;
    }
    if ((v40 & v17) == 1)
    {
      LOBYTE(v42) = 0;
      -[IDSPeerIDManager_OLD startQueryForURIs:fromIdentity:fromURI:fromService:forSending:forRefresh:isForced:reason:completionBlock:]( self,  "startQueryForURIs:fromIdentity:fromURI:fromService:forSending:forRefresh:isForced:reason:completionBlock:",  v48,  v44,  v51,  v49,  0LL,  1LL,  v42,  @"EndpointForURI",  0LL);
    }
  }

  else
  {
  }

  return v15;
}

        id v18 = 0;
      }

      else
      {
        id v18 = 1;
      }
            }

            uint64_t v16 = [v15 countByEnumeratingWithState:&v32 objects:v41 count:16];
          }

          while (v16);
        }

        -[IDSDaemon _processLocalMessagesWithAccountUUIDs:priority:dataProtectionClass:]( self,  "_processLocalMessagesWithAccountUUIDs:priority:dataProtectionClass:",  v14,  300,  [v31 intValue]);

        uint64_t v12 = v30 + 1;
      }

      while ((id)(v30 + 1) != v29);
      uint64_t v29 = [obj countByEnumeratingWithState:&v36 objects:v42 count:16];
    }

    while (v29);
  }
}

            -[IDSDaemon _addIncomingGUIDsWithGuid:isLocal:hasLock:]( self,  "_addIncomingGUIDsWithGuid:isLocal:hasLock:",  v10,  v8,  1LL,  v28,  v29,  v30);
            goto LABEL_26;
          }
        }
      }

      uint64_t v14 = 1;
    }

    if (!v8) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }

  uint64_t v14 = 0;
LABEL_28:

  return v14;
}
}

    uint64_t v15 = (v23 - 1) & v23;
    uint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
LABEL_26:
    uint64_t v25 = *(void *)(v40 + 72);
    sub_1003F600C( *(void *)(v9 + 48) + v25 * v21,  (uint64_t)v8,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v26 = *(void *)(v11 + 40);
    v27 = sub_10040A2B0( &qword_1009B90D0,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718E98);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v41, v27);
    v28 = -1LL << *(_BYTE *)(v11 + 32);
    uint64_t v29 = result & ~v28;
    uint64_t v30 = v29 >> 6;
    if (((-1LL << v29) & ~*(void *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1LL << v29) & ~*(void *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }

        v33 = v30 == v32;
        if (v30 == v32) {
          uint64_t v30 = 0LL;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v16 + 8 * v30);
      }

      while (v34 == -1);
      uint64_t v19 = __clz(__rbit64(~v34)) + (v30 << 6);
    }

    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    result = sub_1003F600C( (uint64_t)v8,  *(void *)(v11 + 48) + v19 * v25,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    ++*(void *)(v11 + 16);
  }

  __int16 v24 = v22 + 3;
  if (v24 < v38)
  {
    id v23 = v39[v24];
    if (!v23)
    {
      while (1)
      {
        id v18 = v24 + 1;
        if (__OFADD__(v24, 1LL)) {
          goto LABEL_41;
        }
        if (v18 >= v38) {
          goto LABEL_35;
        }
        id v23 = v39[v18];
        ++v24;
        if (v23) {
          goto LABEL_25;
        }
      }
    }

    id v18 = v24;
    goto LABEL_25;
  }

    uint64_t v15 = (v23 - 1) & v23;
    uint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
LABEL_26:
    uint64_t v25 = *(void *)(v39 + 72);
    sub_1003F5FC8( *(void *)(v9 + 48) + v25 * v21,  (uint64_t)v8,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v26 = *(void *)(v11 + 40);
    v27 = sub_10040A2B0( &qword_1009B90D0,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718E98);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v40, v27);
    v28 = -1LL << *(_BYTE *)(v11 + 32);
    uint64_t v29 = result & ~v28;
    uint64_t v30 = v29 >> 6;
    if (((-1LL << v29) & ~*(void *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1LL << v29) & ~*(void *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        v33 = v30 == v32;
        if (v30 == v32) {
          uint64_t v30 = 0LL;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v16 + 8 * v30);
      }

      while (v34 == -1);
      uint64_t v19 = __clz(__rbit64(~v34)) + (v30 << 6);
    }

    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    result = sub_1003F600C( (uint64_t)v8,  *(void *)(v11 + 48) + v19 * v25,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    ++*(void *)(v11 + 16);
  }

  __int16 v24 = v22 + 3;
  if (v24 >= v38)
  {
LABEL_35:
    result = swift_release_n(v9, 2LL);
    id v2 = v36;
    goto LABEL_37;
  }

  id v23 = *(void *)(v37 + 8 * v24);
  if (v23)
  {
    id v18 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    id v18 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v18 >= v38) {
      goto LABEL_35;
    }
    id v23 = *(void *)(v37 + 8 * v18);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v15 = (v23 - 1) & v23;
    uint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
LABEL_26:
    uint64_t v25 = *(void *)(v40 + 72);
    sub_1003F600C( *(void *)(v9 + 48) + v25 * v21,  (uint64_t)v8,  type metadata accessor for IDSGroupEncryptionMaterialData);
    uint64_t v26 = *(void *)(v11 + 40);
    v27 = sub_10040A2B0( &qword_1009B9288,  type metadata accessor for IDSGroupEncryptionMaterialData,  (uint64_t)&unk_10071C750);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v41, v27);
    v28 = -1LL << *(_BYTE *)(v11 + 32);
    uint64_t v29 = result & ~v28;
    uint64_t v30 = v29 >> 6;
    if (((-1LL << v29) & ~*(void *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1LL << v29) & ~*(void *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }

        v33 = v30 == v32;
        if (v30 == v32) {
          uint64_t v30 = 0LL;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v16 + 8 * v30);
      }

      while (v34 == -1);
      uint64_t v19 = __clz(__rbit64(~v34)) + (v30 << 6);
    }

    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    result = sub_1003F600C( (uint64_t)v8,  *(void *)(v11 + 48) + v19 * v25,  type metadata accessor for IDSGroupEncryptionMaterialData);
    ++*(void *)(v11 + 16);
  }

  __int16 v24 = v22 + 3;
  if (v24 < v38)
  {
    id v23 = v39[v24];
    if (!v23)
    {
      while (1)
      {
        id v18 = v24 + 1;
        if (__OFADD__(v24, 1LL)) {
          goto LABEL_41;
        }
        if (v18 >= v38) {
          goto LABEL_35;
        }
        id v23 = v39[v18];
        ++v24;
        if (v23) {
          goto LABEL_25;
        }
      }
    }

    id v18 = v24;
    goto LABEL_25;
  }

    uint64_t v15 = (v23 - 1) & v23;
    uint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
LABEL_26:
    uint64_t v25 = *(void *)(v39 + 72);
    sub_1003F5FC8( *(void *)(v9 + 48) + v25 * v21,  (uint64_t)v8,  type metadata accessor for IDSGroupEncryptionMaterialData);
    uint64_t v26 = *(void *)(v11 + 40);
    v27 = sub_10040A2B0( &qword_1009B9288,  type metadata accessor for IDSGroupEncryptionMaterialData,  (uint64_t)&unk_10071C750);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v40, v27);
    v28 = -1LL << *(_BYTE *)(v11 + 32);
    uint64_t v29 = result & ~v28;
    uint64_t v30 = v29 >> 6;
    if (((-1LL << v29) & ~*(void *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1LL << v29) & ~*(void *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        v33 = v30 == v32;
        if (v30 == v32) {
          uint64_t v30 = 0LL;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v16 + 8 * v30);
      }

      while (v34 == -1);
      uint64_t v19 = __clz(__rbit64(~v34)) + (v30 << 6);
    }

    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    result = sub_1003F600C( (uint64_t)v8,  *(void *)(v11 + 48) + v19 * v25,  type metadata accessor for IDSGroupEncryptionMaterialData);
    ++*(void *)(v11 + 16);
  }

  __int16 v24 = v22 + 3;
  if (v24 >= v38)
  {
LABEL_35:
    result = swift_release_n(v9, 2LL);
    id v2 = v36;
    goto LABEL_37;
  }

  id v23 = *(void *)(v37 + 8 * v24);
  if (v23)
  {
    id v18 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    id v18 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v18 >= v38) {
      goto LABEL_35;
    }
    id v23 = *(void *)(v37 + 8 * v18);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    id v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    uint64_t v19 = v17;
    result = (void *)swift_bridgeObjectRetain(v18);
  }

  __int16 v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    id v18 = 16 * v15;
    id v23 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v23;
    uint64_t v19 = v17;
    result = (void *)sub_1004028CC(v23, *((unint64_t *)&v23 + 1));
  }

  __int16 v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    id v18 = (v26 - 1) & v26;
    __int16 v20 = __clz(__rbit64(v26)) + (v15 << 6);
LABEL_12:
    uint64_t v21 = *(void *)(v4 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v8, *(void *)(v9 + 48) + v21, v3);
    __int16 v22 = 8 * v20;
    id v23 = *(void *)(*(void *)(v9 + 56) + 8 * v20);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v11 + 48) + v21, v8, v3);
    *(void *)(*(void *)(v11 + 56) + v22) = v23;
    result = (void *)swift_unknownObjectRetain(v23, v24);
  }

  v27 = v25 + 2;
  if (v27 >= v31) {
    goto LABEL_26;
  }
  uint64_t v26 = *(void *)(v30 + 8 * v27);
  if (v26)
  {
    uint64_t v15 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v15 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v15 >= v31) {
      goto LABEL_26;
    }
    uint64_t v26 = *(void *)(v30 + 8 * v15);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 4 * v15;
    uint64_t v17 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
    id v18 = 8 * v15;
    uint64_t v19 = *(void *)(*(void *)(v2 + 56) + v18);
    *(_DWORD *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v18) = v19;
    swift_bridgeObjectRetain(v19);
  }

  __int16 v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    id v18 = 16 * v15;
    uint64_t v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
    result = (void *)sub_1004028CC(v19, *((unint64_t *)&v19 + 1));
  }

  __int16 v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v15 = (v23 - 1) & v23;
    id v18 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_12:
    uint64_t v19 = 4 * v18;
    __int16 v20 = *(_DWORD *)(*(void *)(v6 + 48) + 4 * v18);
    uint64_t v21 = *(void *)(v28 + 72) * v18;
    sub_1003F5FC8( *(void *)(v6 + 56) + v21,  (uint64_t)v5,  type metadata accessor for IDSDSessionKeyValueDeliveryLocalEntry);
    *(_DWORD *)(*(void *)(v8 + 48) + v19) = v20;
    result = (void *)sub_1003F600C( (uint64_t)v5,  *(void *)(v8 + 56) + v21,  type metadata accessor for IDSDSessionKeyValueDeliveryLocalEntry);
  }

  __int16 v24 = v22 + 2;
  if (v24 >= v16)
  {
LABEL_26:
    result = (void *)swift_release(v6);
    v1 = v26;
    goto LABEL_28;
  }

  id v23 = *(void *)(v27 + 8 * v24);
  if (v23)
  {
    uint64_t v12 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v12 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_26;
    }
    id v23 = *(void *)(v27 + 8 * v12);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v15 = (v23 - 1) & v23;
    uint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
LABEL_26:
    uint64_t v25 = *(void *)(v40 + 72);
    sub_1003F600C( *(void *)(v9 + 48) + v25 * v21,  (uint64_t)v8,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    uint64_t v26 = *(void *)(v11 + 40);
    v27 = sub_10040A2B0( (unint64_t *)&unk_1009B9980,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer,  (uint64_t)&unk_10071BF14);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v41, v27);
    v28 = -1LL << *(_BYTE *)(v11 + 32);
    uint64_t v29 = result & ~v28;
    uint64_t v30 = v29 >> 6;
    if (((-1LL << v29) & ~*(void *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1LL << v29) & ~*(void *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }

        v33 = v30 == v32;
        if (v30 == v32) {
          uint64_t v30 = 0LL;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v16 + 8 * v30);
      }

      while (v34 == -1);
      uint64_t v19 = __clz(__rbit64(~v34)) + (v30 << 6);
    }

    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    result = sub_1003F600C( (uint64_t)v8,  *(void *)(v11 + 48) + v19 * v25,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    ++*(void *)(v11 + 16);
  }

  __int16 v24 = v22 + 3;
  if (v24 < v38)
  {
    id v23 = v39[v24];
    if (!v23)
    {
      while (1)
      {
        id v18 = v24 + 1;
        if (__OFADD__(v24, 1LL)) {
          goto LABEL_41;
        }
        if (v18 >= v38) {
          goto LABEL_35;
        }
        id v23 = v39[v18];
        ++v24;
        if (v23) {
          goto LABEL_25;
        }
      }
    }

    id v18 = v24;
    goto LABEL_25;
  }

    uint64_t v15 = (v23 - 1) & v23;
    uint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
LABEL_26:
    uint64_t v25 = *(void *)(v39 + 72);
    sub_1003F5FC8( *(void *)(v9 + 48) + v25 * v21,  (uint64_t)v8,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    uint64_t v26 = *(void *)(v11 + 40);
    v27 = sub_10040A2B0( (unint64_t *)&unk_1009B9980,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer,  (uint64_t)&unk_10071BF14);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v40, v27);
    v28 = -1LL << *(_BYTE *)(v11 + 32);
    uint64_t v29 = result & ~v28;
    uint64_t v30 = v29 >> 6;
    if (((-1LL << v29) & ~*(void *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1LL << v29) & ~*(void *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        v33 = v30 == v32;
        if (v30 == v32) {
          uint64_t v30 = 0LL;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v16 + 8 * v30);
      }

      while (v34 == -1);
      uint64_t v19 = __clz(__rbit64(~v34)) + (v30 << 6);
    }

    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    result = sub_1003F600C( (uint64_t)v8,  *(void *)(v11 + 48) + v19 * v25,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    ++*(void *)(v11 + 16);
  }

  __int16 v24 = v22 + 3;
  if (v24 >= v38)
  {
LABEL_35:
    result = swift_release_n(v9, 2LL);
    id v2 = v36;
    goto LABEL_37;
  }

  id v23 = *(void *)(v37 + 8 * v24);
  if (v23)
  {
    id v18 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    id v18 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v18 >= v38) {
      goto LABEL_35;
    }
    id v23 = *(void *)(v37 + 8 * v18);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

  __break(1u);
  return result;
}

    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    id v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    uint64_t v19 = v17;
    result = (void *)swift_retain(v18);
  }

  __int16 v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v19 - 1) & v19;
    uint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    result = (void *)swift_retain(v17);
  }

  __int16 v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    uint64_t v9 = v20;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    id v18 = v17[1];
    __int16 v20 = 32 * v15;
    sub_10040A668(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    __CFString *v21 = v19;
    v21[1] = v18;
    sub_10040DAE8(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    swift_bridgeObjectRetain(v18);
  }

  __int16 v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }

  id v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    id v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

  *id v2 = v7;
  return result;
}

    swift_bridgeObjectRelease(v59);
    swift_bridgeObjectRelease(v89);
    v79 = swift_bridgeObjectRelease(v90);
    v28 = (Class)Logger.logObject.getter(v79);
    v80 = static os_log_type_t.error.getter();
    if (os_log_type_enabled((os_log_t)v28, v80))
    {
      v81 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v81 = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v28, v80, "No destinations to send to - aborting", v81, 2u);
      swift_slowDealloc(v81, -1LL, -1LL);
    }

    sub_10040AD00(v35, v36);
    goto LABEL_28;
  }

  __break(1u);
}

  v61 = swift_release(v43);
  v62 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v3) + 0xA8LL))(v61);
  v63 = v91;
  v65 = v86;
  uint64_t v64 = v87;
  id v66 = (uint64_t)v81;
  sub_1004EB850(v86, v87, (uint64_t)v81, v82, (uint64_t)v80, (uint64_t)v91);

  swift_bridgeObjectRelease(v63);
  sub_10040A274(v66, (uint64_t *)&unk_1009BAC60);
  v67 = v85;
  sub_10047ACE0(v65, v85);
  v68 = type metadata accessor for SenderKeyAndState(0LL);
  v69 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 48LL);
  if (v69(v67, 1LL, v68) == 1)
  {
    sub_10040A274(v67, (uint64_t *)&unk_1009BAC60);
  }

  else
  {
    uint64_t v70 = v84;
    sub_1003F5FC8(v67, v84, type metadata accessor for SenderKeyInfo);
    sub_1003F6050(v67, type metadata accessor for SenderKeyAndState);
    v71 = *(void *)(v70 + 16);
    v72 = *(void *)(v70 + 24);
    sub_1004028CC(v71, v72);
    sub_1003F6050(v70, type metadata accessor for SenderKeyInfo);
    uint64_t v73 = Data.base64EncodedString(options:)(0LL);
    sub_100402A84(v71, v72);
    sub_10043316C(&v88, v73._countAndFlagsBits, (uint64_t)v73._object);
    swift_bridgeObjectRelease(v89);
  }

  uint64_t v74 = v83;
  sub_10047ACE0(v64, v83);
  if (v69(v74, 1LL, v68) == 1)
  {
    sub_10040A274(v74, (uint64_t *)&unk_1009BAC60);
  }

  else
  {
    v75 = v84;
    sub_1003F5FC8(v74, v84, type metadata accessor for SenderKeyInfo);
    sub_1003F6050(v74, type metadata accessor for SenderKeyAndState);
    v76 = *(void *)(v75 + 16);
    uint64_t v77 = *(void *)(v75 + 24);
    sub_1004028CC(v76, v77);
    sub_1003F6050(v75, type metadata accessor for SenderKeyInfo);
    uint64_t v78 = Data.base64EncodedString(options:)(0LL);
    sub_100402A84(v76, v77);
    sub_10043316C(&v88, v78._countAndFlagsBits, (uint64_t)v78._object);
    swift_bridgeObjectRelease(v89);
  }

  v79 = v92;
  sub_10046D9B0((uint64_t)v92);
  swift_bridgeObjectRelease(v79);
  sub_10040A274(v64, (uint64_t *)&unk_1009BAC60);
  sub_10040A274(v65, (uint64_t *)&unk_1009BAC60);
}

    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    id v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    uint64_t v19 = v17;
    swift_bridgeObjectRetain(v18);
  }

  __int16 v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v22 - 1) & v22;
    uint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = 8 * v15;
    id v18 = *(void *)(*(void *)(v2 + 56) + v17);
    __int16 v24 = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = v24;
    *(void *)(*(void *)(v4 + 56) + v17) = v18;
    uint64_t v19 = (id)v24;
    __int16 v20 = *((id *)&v24 + 1);
    result = (void *)swift_retain(v18);
  }

  id v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  __int16 v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    uint64_t v9 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    __int16 v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

      uint64_t v34 = (v42 - 1) & v42;
      v80 = v41;
      v39 = __clz(__rbit64(v42)) + (v41 << 6);
    }

    v44 = 8 * v39;
    uint64_t v45 = *(void *)(v13 + 56);
    uint64_t v46 = v13;
    v47 = *(void **)(*(void *)(v13 + 48) + v44);
    v48 = *(void *)(v45 + v44);
    uint64_t v49 = v79;
    uint64_t v50 = v47;
    swift_bridgeObjectRetain(v48);
    uint64_t v52 = sub_10047951C(v51, v49);

    swift_bridgeObjectRelease(v48);
    swift_beginAccess(v30, v84, 33LL, 0LL);
    v53 = v50;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v30);
    uint64_t v82 = *v30;
    v55 = (void *)v82;
    *uint64_t v30 = 0x8000000000000000LL;
    v57 = sub_100433024((uint64_t)v53);
    v58 = v55[2];
    uint64_t v59 = (v56 & 1) == 0;
    v60 = v58 + v59;
    if (__OFADD__(v58, v59)) {
      break;
    }
    v61 = v56;
    if (v55[3] >= v60)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v64 = 8 * v57;
        if ((v56 & 1) != 0) {
          goto LABEL_11;
        }
      }

      else
      {
        sub_10046E6C8();
        v55 = (void *)v82;
        uint64_t v64 = 8 * v57;
        if ((v61 & 1) != 0) {
          goto LABEL_11;
        }
      }
    }

    else
    {
      sub_10046DC5C(v60, isUniquelyReferenced_nonNull_native);
      v55 = (void *)v82;
      v62 = sub_100433024((uint64_t)v53);
      if ((v61 & 1) != (v63 & 1)) {
        goto LABEL_47;
      }
      v57 = v62;
      uint64_t v64 = 8 * v62;
      if ((v61 & 1) != 0)
      {
LABEL_11:
        uint64_t v36 = v55[7];
        swift_bridgeObjectRelease(*(void *)(v36 + v64));
        *(void *)(v36 + v64) = v52;
        goto LABEL_12;
      }
    }

    v55[(v57 >> 6) + 8] |= 1LL << v57;
    *(void *)(v55[6] + v64) = v53;
    *(void *)(v55[7] + v64) = v52;
    v65 = v55[2];
    uint64_t v40 = __OFADD__(v65, 1LL);
    id v66 = v65 + 1;
    if (v40) {
      goto LABEL_44;
    }
    v55[2] = v66;
    v67 = v53;
LABEL_12:
    v37 = *v30;
    *uint64_t v30 = (uint64_t)v55;
    swift_bridgeObjectRelease(v37);

    swift_endAccess(v84);
    id v13 = v46;
  }

  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  v71 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v71);
  __break(1u);
  return result;
}

    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 56) + 8 * v15);
    id v18 = 16 * v15;
    uint64_t v19 = *(_OWORD *)(*(void *)(v2 + 48) + v18);
    *(_OWORD *)(*(void *)(v4 + 48) + v18) = v19;
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    sub_1004028CC(v19, *((unint64_t *)&v19 + 1));
    result = v17;
  }

  __int16 v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

  __break(1u);
  return result;
}

    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    id v18 = 16 * v15;
    id v23 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v23;
    uint64_t v19 = v17;
    result = (void *)sub_1004028CC(v23, *((unint64_t *)&v23 + 1));
  }

  __int16 v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    id v18 = *v16;
    uint64_t v17 = v16[1];
    LOBYTE(v16) = *(_BYTE *)(*(void *)(v2 + 56) + v15);
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + 16 * v15);
    *uint64_t v19 = v18;
    v19[1] = v17;
    *(_BYTE *)(*(void *)(v4 + 56) + v15) = (_BYTE)v16;
    swift_bridgeObjectRetain(v17);
  }

  __int16 v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    id v18 = v17[1];
    uint64_t v19 = 8 * v15;
    __int16 v20 = *(void **)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    __CFString *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = v20;
  }

  __int16 v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  id v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    id v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v16 = (v24 - 1) & v24;
    uint64_t v19 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_12:
    __int16 v20 = 8 * v19;
    uint64_t v21 = *(void **)(*(void *)(v6 + 48) + 8 * v19);
    __int16 v22 = *(void *)(v27 + 72) * v19;
    sub_1003F5FC8(*(void *)(v6 + 56) + v22, (uint64_t)v5, type metadata accessor for IDSGroupEncryptionPublicIdentity);
    *(void *)(*(void *)(v8 + 48) + v20) = v21;
    sub_10049E2E4((uint64_t)v5, *(void *)(v8 + 56) + v22);
    result = v21;
  }

  uint64_t v25 = v23 + 2;
  if (v25 >= v17)
  {
LABEL_26:
    result = (id)swift_release(v6);
    v1 = v26;
    goto LABEL_28;
  }

  __int16 v24 = *(void *)(v10 + 8 * v25);
  if (v24)
  {
    id v13 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    id v13 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v13 >= v17) {
      goto LABEL_26;
    }
    __int16 v24 = *(void *)(v10 + 8 * v13);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

    id v13 = (v22 - 1) & v22;
    uint64_t v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    id v18 = *(void **)(*(void *)(v3 + 48) + v17);
    uint64_t v19 = *(void **)(*(void *)(v3 + 56) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    *(void *)(*(void *)(v5 + 56) + v17) = v19;
    __int16 v20 = v18;
    result = v19;
  }

  id v23 = v21 + 2;
  if (v23 >= v14) {
    goto LABEL_26;
  }
  __int16 v22 = *(void *)(v7 + 8 * v23);
  if (v22)
  {
    v10 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    __int16 v22 = *(void *)(v7 + 8 * v10);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v19 - 1) & v19;
    uint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    result = v17;
  }

  __int16 v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    uint64_t v9 = v20;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    id v18 = v17[1];
    uint64_t v19 = 8 * v15;
    __int16 v20 = *(void **)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    __CFString *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = v20;
  }

  __int16 v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  id v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    id v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v16 = (v24 - 1) & v24;
    __int16 v22 = __clz(__rbit64(v24)) + (v19 << 6);
LABEL_26:
    uint64_t v26 = v10;
    v27 = *(void *)(v10 + 48);
    v28 = *(void *)(v43 + 72);
    uint64_t v29 = *(void (**)(char *, unint64_t, uint64_t))(v43 + 32);
    v29(v9, v27 + v28 * v22, v5);
    uint64_t v30 = *(void *)(v12 + 40);
    v31 = sub_10040A2B0( &qword_1009B9300,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v5, v31);
    v32 = -1LL << *(_BYTE *)(v12 + 32);
    v33 = result & ~v32;
    uint64_t v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      __int16 v20 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v35 = 0;
      uint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }

        v37 = v34 == v36;
        if (v34 == v36) {
          uint64_t v34 = 0LL;
        }
        v35 |= v37;
        v38 = *(void *)(v17 + 8 * v34);
      }

      while (v38 == -1);
      __int16 v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v29)(*(void *)(v12 + 48) + v20 * v28, v9, v5);
    ++*(void *)(v12 + 16);
    v10 = v26;
  }

  uint64_t v25 = v23 + 3;
  if (v25 < v41)
  {
    __int16 v24 = v42[v25];
    if (!v24)
    {
      while (1)
      {
        uint64_t v19 = v25 + 1;
        if (__OFADD__(v25, 1LL)) {
          goto LABEL_41;
        }
        if (v19 >= v41) {
          goto LABEL_35;
        }
        __int16 v24 = v42[v19];
        ++v25;
        if (v24) {
          goto LABEL_25;
        }
      }
    }

    uint64_t v19 = v25;
    goto LABEL_25;
  }

    uint64_t v17 = (v25 - 1) & v25;
    id v23 = __clz(__rbit64(v25)) + (v20 << 6);
LABEL_26:
    v27 = *(void *)(v6 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v10, *(void *)(v11 + 48) + v27 * v23, v5);
    v28 = *(void *)(v13 + 40);
    uint64_t v29 = sub_10040A2B0( &qword_1009B9300,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v28, v5, v29);
    uint64_t v30 = -1LL << *(_BYTE *)(v13 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1LL << v31) & ~*(void *)(v18 + 8 * (v31 >> 6))) != 0)
    {
      uint64_t v21 = __clz(__rbit64((-1LL << v31) & ~*(void *)(v18 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v33 = 0;
      uint64_t v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        v35 = v32 == v34;
        if (v32 == v34) {
          v32 = 0LL;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v18 + 8 * v32);
      }

      while (v36 == -1);
      uint64_t v21 = __clz(__rbit64(~v36)) + (v32 << 6);
    }

    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))( *(void *)(v13 + 48) + v21 * v27,  v10,  v5);
    ++*(void *)(v13 + 16);
  }

  uint64_t v26 = v24 + 3;
  if (v26 >= v40)
  {
LABEL_35:
    result = swift_release_n(v11, 2LL);
    id v3 = v38;
    goto LABEL_37;
  }

  uint64_t v25 = *(void *)(v39 + 8 * v26);
  if (v25)
  {
    __int16 v20 = v26;
    goto LABEL_25;
  }

  while (1)
  {
    __int16 v20 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v20 >= v40) {
      goto LABEL_35;
    }
    uint64_t v25 = *(void *)(v39 + 8 * v20);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }

  __break(1u);
  return result;
}

    uint64_t v12 = (v19 - 1) & v19;
    uint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    swift_bridgeObjectRetain(v17);
  }

  __int16 v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    uint64_t v9 = v20;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    id v18 = v17[1];
    uint64_t v19 = 8 * v15;
    __int16 v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    __CFString *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v20);
  }

  __int16 v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  id v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    id v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    id v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    uint64_t v19 = v17;
    result = v18;
  }

  __int16 v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

uint64_t sub_10001012C(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 pushToken]);
  uint64_t v4 = [v2 isEqualToData:v3] ^ 1;

  return v4;
}

id sub_100010170(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 rawToken]);
  int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 pushToken]);

  id v6 = [v4 isEqualToData:v5];
  return v6;
}

id sub_1000102F8(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 pushTokenObject]);
  id v4 = [v3 isEqualToPushToken:*(void *)(a1 + 32)];

  return v4;
}

id sub_1000106E0(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 pushTokenObject]);
  id v4 = [v3 isEqualToPushToken:*(void *)(a1 + 32)];

  return v4;
}

id sub_1000113A8(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 pushTokenObject]);
  id v4 = [v3 isEqualToPushToken:*(void *)(a1 + 32)];

  return v4;
}

uint64_t sub_100011738(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v17;
    while (2)
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v17 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v16 + 1) + 8LL * (void)i);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v9, (void)v16));
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v3 capabilities]);
        id v12 = [v11 valueForCapability:v9];
        id v13 = [v10 integerValue];

        if (v12 != v13)
        {
          uint64_t v14 = 0LL;
          goto LABEL_11;
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }

  uint64_t v14 = 1LL;
LABEL_11:

  return v14;
}

LABEL_7:
          v61 = 0LL;
          goto LABEL_10;
        }

        v61 = (void *)objc_claimAutoreleasedReturnValue([v60 objectForKey:v16]);
LABEL_10:
        if ((v62 & 2) != 0)
        {
          __int128 v19 = (void *)objc_claimAutoreleasedReturnValue( -[IDSPeerIDManager_SwiftData verifierResultsForURIs:service:fromURI:]( self,  "verifierResultsForURIs:service:fromURI:",  obj,  v53,  v52));
          __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKey:v16]);

          if (v20)
          {
            uint64_t v21 = objc_alloc(&OBJC_CLASS___IDSIDKTData);
            __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKey:v16]);
            __int128 v18 = [v21 initWithVerifierResult:v22 requestID:0];

            id v23 = OSLogHandleForIDSCategory("PeerLookup_SwiftData");
            __int16 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKey:v16]);
              uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( -[IDSPeerIDManager_SwiftData lightDescriptionForVerifierResult:]( self,  "lightDescriptionForVerifierResult:",  v25));
              *(_DWORD *)buf = 138412546;
              uint64_t v73 = v16;
              uint64_t v74 = 2112;
              v75 = v26;
              _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "URI %@ found a KTVerifierResult %@",  buf,  0x16u);
            }

            if (os_log_shim_legacy_logging_enabled(v27)
              && _IDSShouldLog(0LL, @"PeerLookup_SwiftData"))
            {
              v28 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKey:v16]);
              v48 = v16;
              uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue( -[IDSPeerIDManager_SwiftData lightDescriptionForVerifierResult:]( self,  "lightDescriptionForVerifierResult:",  v28));
              _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup_SwiftData",  @"URI %@ found a KTVerifierResult %@");
            }
          }

          else
          {
            v32 = OSLogHandleForIDSCategory("PeerLookup_SwiftData");
            v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              uint64_t v73 = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "URI %@ didn't find a KTVerifierResult",  buf,  0xCu);
            }

            if (os_log_shim_legacy_logging_enabled(v34)
              && _IDSShouldLog(0LL, @"PeerLookup_SwiftData"))
            {
              v48 = v16;
              _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup_SwiftData",  @"URI %@ didn't find a KTVerifierResult");
            }

            __int128 v18 = 0LL;
          }
        }

        else
        {
          __int128 v18 = 0LL;
        }

        if ((v62 & 4) != 0)
        {
          uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v60 objectForKey:v16]);
          v65 = 0u;
          id v66 = 0u;
          v63 = 0u;
          uint64_t v64 = 0u;
          v35 = 0LL;
          v37 = [v36 countByEnumeratingWithState:&v63 objects:v71 count:16];
          if (v37)
          {
            v38 = *(void *)v64;
            do
            {
              for (j = 0LL; j != v37; j = (char *)j + 1)
              {
                if (*(void *)v64 != v38) {
                  objc_enumerationMutation(v36);
                }
                uint64_t v40 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v63 + 1) + 8 * (void)j), "gameCenterData", v48, v49, v50));
                v41 = (void *)v40;
                if (v35)
                {
                  uint64_t v42 = objc_claimAutoreleasedReturnValue([v35 compareAgainstData:v40]);

                  v35 = (void *)v42;
                }

                else
                {
                  v35 = (void *)v40;
                }
              }

              v37 = [v36 countByEnumeratingWithState:&v63 objects:v71 count:16];
            }

            while (v37);
          }
        }

        else
        {
          v35 = 0LL;
        }

        v43 = objc_alloc(&OBJC_CLASS___IDSIDInfoResult);
        v44 = (void *)objc_claimAutoreleasedReturnValue([v16 prefixedURI]);
        uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v57 objectForKey:v16]);
        uint64_t v46 = objc_msgSend( v43,  "initWithURI:status:endpoints:ktData:gameCenterData:",  v44,  objc_msgSend(v45, "integerValue"),  v61,  v18,  v35);

        if (v46) {
          CFDictionarySetValue((CFMutableDictionaryRef)theDict, v16, v46);
        }
      }

      uint64_t v59 = [obj countByEnumeratingWithState:&v67 objects:v76 count:16];
    }

    while (v59);
  }

  return theDict;
}
}

      goto LABEL_28;
    }
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString loginID](v3, "loginID"));
  if (!IMAreEmailsLogicallyTheSame(v9, *(void *)(a1 + 32)))
  {

    goto LABEL_22;
  }

  v10 = *(unsigned __int8 *)(a1 + 48);

  if (v10)
  {
LABEL_22:
    __int128 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v17 = *(const __CFString **)(a1 + 32);
      __int128 v18 = objc_claimAutoreleasedReturnValue(-[__CFString loginID](v3, "loginID"));
      __int128 v19 = (void *)v18;
      __int16 v20 = *(unsigned __int8 *)(a1 + 48);
      id v23 = 138412802;
      __int16 v24 = v17;
      if (v20) {
        uint64_t v21 = @"YES";
      }
      else {
        uint64_t v21 = @"NO";
      }
      uint64_t v25 = 2112;
      uint64_t v26 = v18;
      v27 = 2112;
      v28 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "  => Account does not appear to be primary, we shouldn't be here...  {primaryUserName: %@, loginID: %@, hasActiv eAppleIDBasedAccounts: %@}",  (uint8_t *)&v23,  0x20u);
    }

    goto LABEL_28;
  }

  if (-[__CFString isEnabled](v3, "isEnabled")
    && (int)-[__CFString registrationStatus](v3, "registrationStatus") > 1)
  {
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v22 = (__CFString *)objc_claimAutoreleasedReturnValue(-[__CFString uniqueID](v3, "uniqueID"));
      id v23 = 138412290;
      __int16 v24 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "   Account appears to be in good form: %@",  (uint8_t *)&v23,  0xCu);
    }

    goto LABEL_7;
  }

  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    else {
      id v12 = @"NO";
    }
    else {
      id v13 = @"YES";
    }
    id v23 = 138412546;
    __int16 v24 = v12;
    uint64_t v25 = 2112;
    uint64_t v26 = (uint64_t)v13;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "   Account isn't enabled or registerd -- enabling {isEnabled: %@, unregistered: %@}",  (uint8_t *)&v23,  0x16u);
  }

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountController]);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString uniqueID](v3, "uniqueID"));
  [v14 enableAccountWithUniqueID:v15];

  -[__CFString registerAccount](v3, "registerAccount");
LABEL_28:
  objc_autoreleasePoolPop(v4);
}

    return;
  }

  -[IDSCountdown startCountingDown](self->_pairedDeviceInfoRequestCountdown, "startCountingDown");
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog watchPairing](&OBJC_CLASS___IMRGLog, "watchPairing"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "-[IDSPairingManager _requestPairedDeviceInfo]";
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s Sending paired device info request.",  (uint8_t *)&buf,  0xCu);
  }

  *(void *)&buf = 0LL;
  *((void *)&buf + 1) = &buf;
  uint64_t v11 = 0x3032000000LL;
  id v12 = sub_10017490C;
  id v13 = sub_10017491C;
  uint64_t v14 = (IDSRemoteCredential *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v14 = objc_alloc_init(&OBJC_CLASS___IDSRemoteCredential);
  [*(id *)(*((void *)&buf + 1) + 40) setWantsRetries:1];
  uint64_t v8 = *(void **)(*((void *)&buf + 1) + 40LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100174924;
  v9[3] = &unk_1008F6878;
  v9[4] = &buf;
  [v8 sendIDSLocalDeviceInfoRequestWithCompletionBlock:v9];
  _Block_object_dispose(&buf, 8);
}
}

  return v6;
}

    goto LABEL_8;
  }

  v28 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration profileID](self->_registrationInfo, "profileID"));
  else {
    uint64_t v29 = 0;
  }

  v32 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration userID](self->_registrationInfo, "userID"));
  v33 = [v9 isEqualToIgnoringCase:v32];

  if (!v29 && (v33 & 1) == 0)
  {
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog GDR](&OBJC_CLASS___IMRGLog, "GDR"));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount uniqueID](self, "uniqueID"));
      v39 = 138412290;
      uint64_t v40 = v30;
      v31 = "  Unknown profile ID ID, not proceeding for: %@";
      goto LABEL_53;
    }

    goto LABEL_7;
  }

  if (-[IDSDAccount accountType](self, "accountType") == 3)
  {
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog GDR](&OBJC_CLASS___IMRGLog, "GDR"));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount uniqueID](self, "uniqueID"));
      v39 = 138412290;
      uint64_t v40 = v30;
      v31 = " => Ignoring a device update from device ID account for: %@";
      goto LABEL_53;
    }

    goto LABEL_7;
  }

  if (v10)
  {
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration pushToken](self->_registrationInfo, "pushToken"));
    v35 = [v10 isEqualToData:v34];

    if (v35)
    {
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog GDR](&OBJC_CLASS___IMRGLog, "GDR"));
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount uniqueID](self, "uniqueID"));
        v39 = 138412290;
        uint64_t v40 = v30;
        v31 = " => Ignoring a device update from myself for: %@";
        goto LABEL_53;
      }

      goto LABEL_7;
    }
  }

  uint64_t v36 = -[IDSDAccount isDeviceRegistered](self, "isDeviceRegistered");
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog GDR](&OBJC_CLASS___IMRGLog, "GDR"));
  v37 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  if ((v36 & 1) == 0)
  {
    if (v37)
    {
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount uniqueID](self, "uniqueID"));
      v39 = 138412290;
      uint64_t v40 = v30;
      v31 = " => Ignoring, we're not registered for: %@";
      goto LABEL_53;
    }

    goto LABEL_7;
  }

  if (v37)
  {
    v38 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount uniqueID](self, "uniqueID"));
    v39 = 138412290;
    uint64_t v40 = v38;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  " => Kicking off device and handles gathering for: %@",  (uint8_t *)&v39,  0xCu);
  }

  if (-[IDSRegistration registrationType](self->_registrationInfo, "registrationType") == 1) {
    -[IDSDAccount _updateHandles:](self, "_updateHandles:", 1LL);
  }
  -[IDSDAccount _issueCriticalDependentCheck](self, "_issueCriticalDependentCheck");
LABEL_8:
}

          v61 = 0LL;
          goto LABEL_10;
        }

        v61 = (void *)objc_claimAutoreleasedReturnValue([v60 objectForKey:v16]);
LABEL_10:
        if ((v62 & 2) != 0)
        {
          __int128 v19 = (void *)objc_claimAutoreleasedReturnValue( -[IDSPeerIDManager_OLD verifierResultsForURIs:service:fromURI:]( self,  "verifierResultsForURIs:service:fromURI:",  obj,  v53,  v52));
          __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKey:v16]);

          if (v20)
          {
            uint64_t v21 = objc_alloc(&OBJC_CLASS___IDSIDKTData);
            __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKey:v16]);
            __int128 v18 = [v21 initWithVerifierResult:v22 requestID:0];

            id v23 = OSLogHandleForIDSCategory("PeerLookup_OLD");
            __int16 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKey:v16]);
              uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( -[IDSPeerIDManager_OLD lightDescriptionForVerifierResult:]( self,  "lightDescriptionForVerifierResult:",  v25));
              *(_DWORD *)buf = 138412546;
              uint64_t v73 = v16;
              uint64_t v74 = 2112;
              v75 = v26;
              _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "URI %@ found a KTVerifierResult %@",  buf,  0x16u);
            }

            if (os_log_shim_legacy_logging_enabled(v27)
              && _IDSShouldLog(0LL, @"PeerLookup_OLD"))
            {
              v28 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKey:v16]);
              v48 = v16;
              uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue( -[IDSPeerIDManager_OLD lightDescriptionForVerifierResult:]( self,  "lightDescriptionForVerifierResult:",  v28));
              _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup_OLD",  @"URI %@ found a KTVerifierResult %@");
            }
          }

          else
          {
            v32 = OSLogHandleForIDSCategory("PeerLookup_OLD");
            v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              uint64_t v73 = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "URI %@ didn't find a KTVerifierResult",  buf,  0xCu);
            }

            if (os_log_shim_legacy_logging_enabled(v34)
              && _IDSShouldLog(0LL, @"PeerLookup_OLD"))
            {
              v48 = v16;
              _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup_OLD",  @"URI %@ didn't find a KTVerifierResult");
            }

            __int128 v18 = 0LL;
          }
        }

        else
        {
          __int128 v18 = 0LL;
        }

        if ((v62 & 4) != 0)
        {
          uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v60 objectForKey:v16]);
          v65 = 0u;
          id v66 = 0u;
          v63 = 0u;
          uint64_t v64 = 0u;
          v35 = 0LL;
          v37 = [v36 countByEnumeratingWithState:&v63 objects:v71 count:16];
          if (v37)
          {
            v38 = *(void *)v64;
            do
            {
              for (j = 0LL; j != v37; j = (char *)j + 1)
              {
                if (*(void *)v64 != v38) {
                  objc_enumerationMutation(v36);
                }
                uint64_t v40 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v63 + 1) + 8 * (void)j), "gameCenterData", v48, v49, v50));
                v41 = (void *)v40;
                if (v35)
                {
                  uint64_t v42 = objc_claimAutoreleasedReturnValue([v35 compareAgainstData:v40]);

                  v35 = (void *)v42;
                }

                else
                {
                  v35 = (void *)v40;
                }
              }

              v37 = [v36 countByEnumeratingWithState:&v63 objects:v71 count:16];
            }

            while (v37);
          }
        }

        else
        {
          v35 = 0LL;
        }

        v43 = objc_alloc(&OBJC_CLASS___IDSIDInfoResult);
        v44 = (void *)objc_claimAutoreleasedReturnValue([v16 prefixedURI]);
        uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v57 objectForKey:v16]);
        uint64_t v46 = objc_msgSend( v43,  "initWithURI:status:endpoints:ktData:gameCenterData:",  v44,  objc_msgSend(v45, "integerValue"),  v61,  v18,  v35);

        if (v46) {
          CFDictionarySetValue((CFMutableDictionaryRef)theDict, v16, v46);
        }
      }

      uint64_t v59 = [obj countByEnumeratingWithState:&v67 objects:v76 count:16];
    }

    while (v59);
  }

  return theDict;
}

  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration _user](self, "_user"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration _userStore](self, "_userStore"));
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 authenticationCertificateForUser:v6]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v11 dataRepresentation]);

  if (!v9)
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeychainManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeychainManager,  "sharedInstance"));
    id v13 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration idsUserID](self, "idsUserID"));
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v12 authenticationCertForID:v13]);

    if (v9)
    {
      if (v6)
      {
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration idsUserID](self, "idsUserID"));
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 _stripFZIDPrefix]);

        __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v6 unprefixedIdentifier]);
        __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v6 phoneUserWithUpdatedPhoneNumber:v15 phoneBookNumber:v16]);

        __int128 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v21 = 138412802;
          __int16 v22 = v6;
          id v23 = 2112;
          __int16 v24 = v17;
          uint64_t v25 = 2048;
          uint64_t v26 = self;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Updating user with correct phoneNumber {user: %@, updatedUser: %@, self: %p}",  (uint8_t *)&v21,  0x20u);
        }

        __int128 v19 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration _userStore](self, "_userStore"));
        [v19 updateUser:v17];
      }
    }
  }

  __break(1u);
}

  if (v12)
  {
    v27 = v12;
    v28 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
    uint64_t v29 = sub_1003F5CB4((uint64_t *)&unk_1009BC2C0);
    uint64_t v30 = sub_100438928( (unint64_t *)&unk_1009BAC00,  (unint64_t *)&unk_1009BC270,  &OBJC_CLASS___IDSURI_ptr);
    v31 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v27, v28, v29, v30);
  }

  else
  {
    v31 = 0LL;
  }

  swift_retain(v13);
  v32 = a2;
  v36(a2, v34, v11, v21, a5, a6, a7, a8, v31);
  swift_release(v13);

  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(a7);
  swift_bridgeObjectRelease(a5);
  swift_bridgeObjectRelease(v11);
  return swift_bridgeObjectRelease(v34);
}

  __break(1u);
}

          v51 = __clz(__rbit64(v48));
          uint64_t v52 = (v48 - 1) & v48;
        }
      }

      uint64_t v56 = v54 + 3;
      if (v56 < v125)
      {
        v55 = *(void *)(v124 + 8 * v56);
        if (v55)
        {
          uint64_t v50 = v56;
          goto LABEL_21;
        }

        while (1)
        {
          uint64_t v50 = v56 + 1;
          if (__OFADD__(v56, 1LL)) {
            goto LABEL_36;
          }
          if (v50 >= v125) {
            break;
          }
          v55 = *(void *)(v124 + 8 * v50);
          ++v56;
          if (v55) {
            goto LABEL_21;
          }
        }
      }
    }

id sub_10001254C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 service]);
  if ([v4 isEqualToString:*(void *)(a1 + 32)])
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 fromURI]);
    id v6 = [v5 isEqual:*(void *)(a1 + 40)];
  }

  else
  {
    id v6 = 0LL;
  }

  return v6;
}

id sub_100012688(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 service]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

LABEL_23:
      }

      v38 = [v34 countByEnumeratingWithState:&v45 objects:v54 count:16];
    }

    while (v38);
  }

  return theDict;
}
}

  v55 = v17;
  v33 = objc_alloc(&OBJC_CLASS___IDSActivityUpdate);
  uint64_t v34 = IDSActivityMonitorPresenceSubActivity;
  v35 = (void *)objc_claimAutoreleasedReturnValue([v6 token]);
  uint64_t v36 = [v6 activityTimestamp];
  v37 = (void *)objc_claimAutoreleasedReturnValue([v6 metadataBlob]);
  v38 = objc_msgSend( v33,  "initWithSubActivity:pushToken:serverTimestamp:clientContext:isDeviceOnline:",  v34,  v35,  v36,  v37,  objc_msgSend(v6, "activityStatus"));

  v39 = (void *)objc_claimAutoreleasedReturnValue([0 allObjects]);
  if (v39)
  {
    [v38 setURIs:v39];
  }

  else
  {
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v17 URIs]);
    [v38 setURIs:v40];
  }

  v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v67 = v38;
    _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "Looking up for listeners for update: %@",  buf,  0xCu);
  }

  uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(-[IDSActivityMonitorStateManager stateProvider](self, "stateProvider"));
  v71 = v38;
  v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v71, 1LL));
  [v42 storeUpdates:v43 forActivity:v56];

  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  uint64_t v59 = 0u;
  v44 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_listenersByActivity,  "objectForKeyedSubscript:",  v56));
  uint64_t v45 = [v44 countByEnumeratingWithState:&v58 objects:v70 count:16];
  if (v45)
  {
    uint64_t v46 = v45;
    v47 = *(void *)v59;
    do
    {
      for (j = 0LL; j != v46; j = (char *)j + 1)
      {
        if (*(void *)v59 != v47) {
          objc_enumerationMutation(v44);
        }
        uint64_t v49 = *(void **)(*((void *)&v58 + 1) + 8LL * (void)j);
        uint64_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          v67 = v49;
          v68 = 2112;
          v69 = v38;
          _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "Alerting listener %@ about update %@",  buf,  0x16u);
        }

        [v49 activityMonitorManager:self receivedUpdate:v38 forActivity:v56];
      }

      uint64_t v46 = [v44 countByEnumeratingWithState:&v58 objects:v70 count:16];
    }

    while (v46);
  }

  id v5 = v52;
  id v6 = v54;
  uint64_t v9 = v56;
LABEL_38:
}

      id v13 = (char *)v13 + 1;
    }

    while (v10 != v13);
    __int16 v24 = [v8 countByEnumeratingWithState:&v27 objects:v33 count:16];
    v10 = v24;
  }

  while (v24);
LABEL_30:

  uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "...Done", buf, 2u);
  }

  if ((v11 & 1) != 0)
  {
    if (qword_1009BE8A0 != -1) {
      dispatch_once(&qword_1009BE8A0, &stru_1008F7D68);
    }
    if (off_1009BE898) {
      ((void (*)(uint64_t, const __CFString *, NSDictionary *, void))off_1009BE898)( 13LL,  @"IdentityServicesHeartbeat",  +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  @"sending IdentityServices Heartbeat",  @"action"),  0LL);
    }
  }

  -[IDSHeartbeatCenter updateHeartbeat](v26, "updateHeartbeat");
}

  return v13;
}

    if (qword_1009BE930 != -1) {
      dispatch_once(&qword_1009BE930, &stru_1008F91C0);
    }
    self->_firstMKMReceivedTime = *(double *)&qword_1009BE938 * (double)mach_continuous_time();
  }

    v31 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog FeatureToggler]( &OBJC_CLASS___IDSFoundationLog,  "FeatureToggler",  v33,  v34,  v35));
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v43 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Missing IDS Registration entitlement -- failing creation of IDSXPCFeatureToggler collaborator {connection: %@}",  buf,  0xCu);
    }

    uint64_t v30 = 0LL;
    goto LABEL_26;
  }

  uint64_t v36 = a4;
  uint64_t v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  __int128 v16 = v12;
  __int128 v17 = [v16 countByEnumeratingWithState:&v38 objects:v44 count:16];
  if (!v17)
  {

    goto LABEL_23;
  }

  __int128 v19 = v17;
  v33 = v7;
  uint64_t v34 = self;
  v35 = v10;
  __int16 v20 = 0;
  uint64_t v21 = *(void *)v39;
  do
  {
    for (i = 0LL; i != v19; i = (char *)i + 1)
    {
      if (*(void *)v39 != v21) {
        objc_enumerationMutation(v16);
      }
      id v23 = *(void **)(*((void *)&v38 + 1) + 8LL * (void)i);
      __int16 v24 = objc_opt_class(&OBJC_CLASS___NSString, v18);
    }

    __int128 v19 = [v16 countByEnumeratingWithState:&v38 objects:v44 count:16];
  }

  while (v19);

  self = v34;
  uint64_t v7 = v33;
  a4 = v36;
  if ((v20 & 1) == 0) {
    goto LABEL_23;
  }
LABEL_19:
  v37.receiver = self;
  v37.super_class = (Class)&OBJC_CLASS___IDSDXPCFeatureToggler;
  v28 = -[IDSDXPCFeatureToggler init](&v37, "init", v33, v34, v35);
  p_isa = (id *)&v28->super.isa;
  if (v28)
  {
    objc_storeStrong((id *)&v28->_queue, a4);
    objc_storeStrong(p_isa + 2, v7);
  }

  self = p_isa;
  uint64_t v30 = self;
LABEL_26:

  return v30;
}
}

    __int16 v24 = 0LL;
    goto LABEL_24;
  }

  __int16 v24 = -[IDSDSession initWithAccount:destinations:options:]( objc_alloc(&OBJC_CLASS___IDSDSession),  "initWithAccount:destinations:options:",  v5,  v6,  v4);
  if (v24)
  {
    os_unfair_lock_lock(&self->_lock);
    -[NSMutableDictionary setObject:forKey:](self->_sessions, "setObject:forKey:", v24, v32);
    os_unfair_lock_unlock(&self->_lock);
    -[IDSDSession setRemoteBlob:](v24, "setRemoteBlob:", v30);
    uint64_t v26 = v24;
  }

  else
  {
    v27 = OSLogHandleForIDSCategory("Warning");
    v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v34 = @"SessionController";
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "%@ - Failed to create incoming session",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v29))
    {
      _IDSWarnV(@"IDSFoundation", @"%@ - Failed to create incoming session");
      _IDSLogV(0LL, @"IDSFoundation", @"Warning", @"%@ - Failed to create incoming session");
      _IDSLogTransport(@"Warning", @"IDS", @"%@ - Failed to create incoming session");
    }
  }

LABEL_24:
  return v24;
}

  os_activity_scope_leave(&state);
  cut_arc_os_release(&v50);
}

  uint64_t v21 = v13;

  return v21;
}
      }

      v38 = [v34 countByEnumeratingWithState:&v45 objects:v54 count:16];
    }

    while (v38);
  }

  return theDict;
}
}

    uint64_t v29 = 0LL;
    goto LABEL_24;
  }

  uint64_t v29 = (void *)v28;
LABEL_24:

  return v29;
}
}

  uint64_t v34 = v15;
LABEL_37:

  return v34;
}
}

        id v13 = (char *)v13 + 1;
      }

      while (v10 != v13);
      v38 = [v7 countByEnumeratingWithState:&v43 objects:v53 count:16];
      v10 = v38;
    }

    while (v38);
  }

  return v41;
}

    v10 = (v16 - 1) & v16;
    uint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    __int128 v18 = v9[5];
    __int128 v19 = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    result = NSObject._rawHashValue(seed:)(v18);
    __int16 v20 = -1LL << *((_BYTE *)v9 + 32);
    uint64_t v21 = result & ~v20;
    __int16 v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      id v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      __int16 v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        uint64_t v26 = v22 == v25;
        if (v22 == v25) {
          __int16 v22 = 0LL;
        }
        v24 |= v26;
        v27 = *(void *)(v12 + 8 * v22);
      }

      while (v27 == -1);
      id v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }

    *(void *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    *(void *)(v9[6] + 8 * v23) = v19;
    ++v9[2];
    if (__OFSUB__(v5--, 1LL))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (!v5) {
      goto LABEL_36;
    }
  }

  __int128 v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_36;
  }
  __int128 v16 = v29[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_36;
    }
    __int128 v16 = v29[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }

    __int128 v18 = (v27 - 1) & v27;
    __int16 v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_24:
    uint64_t v29 = *(void *)(v7 + 72);
    uint64_t v30 = *(void *)(v12 + 48) + v29 * v24;
    if ((v48 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v11, v30, v6);
      v31 = *(void *)(*(void *)(v12 + 56) + 8 * v24);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v11, v30, v6);
      v31 = *(void *)(*(void *)(v12 + 56) + 8 * v24);
      swift_unknownObjectRetain(v31, v32);
    }

    v33 = *(void *)(v14 + 40);
    uint64_t v34 = sub_10040A2B0( &qword_1009B9300,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v6, v34);
    v35 = -1LL << *(_BYTE *)(v14 + 32);
    uint64_t v36 = result & ~v35;
    v37 = v36 >> 6;
    if (((-1LL << v36) & ~*(void *)(v19 + 8 * (v36 >> 6))) != 0)
    {
      __int16 v22 = __clz(__rbit64((-1LL << v36) & ~*(void *)(v19 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v40 = v37 == v39;
        if (v37 == v39) {
          v37 = 0LL;
        }
        v38 |= v40;
        v41 = *(void *)(v19 + 8 * v37);
      }

      while (v41 == -1);
      __int16 v22 = __clz(__rbit64(~v41)) + (v37 << 6);
    }

    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))( *(void *)(v14 + 48) + v29 * v22,  v11,  v6);
    *(void *)(*(void *)(v14 + 56) + 8 * v22) = v31;
    ++*(void *)(v14 + 16);
  }

  swift_release(v12);
  id v3 = v44;
  uint64_t v26 = v46;
  if ((v48 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v42 = 1LL << *(_BYTE *)(v12 + 32);
  if (v42 >= 64) {
    bzero(v26, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v26 = -1LL << v42;
  }
  *(void *)(v12 + 16) = 0LL;
LABEL_43:
  result = swift_release(v12);
  *id v3 = v14;
  return result;
}

        __int128 v17 = (v23 - 1) & v23;
        uint64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }

      uint64_t v25 = *(_DWORD *)(*(void *)(v10 + 48) + 4 * v21);
      uint64_t v26 = *(void *)(v39 + 72);
      v27 = *(void *)(v10 + 56) + v26 * v21;
      if ((v40 & 1) != 0) {
        sub_1003F600C(v27, (uint64_t)v9, type metadata accessor for IDSDSessionKeyValueDeliveryLocalEntry);
      }
      else {
        sub_1003F5FC8(v27, (uint64_t)v9, type metadata accessor for IDSDSessionKeyValueDeliveryLocalEntry);
      }
      Hasher.init(_seed:)(v41, *(void *)(v12 + 40));
      Hasher._combine(_:)(v25);
      result = Hasher._finalize()();
      v28 = -1LL << *(_BYTE *)(v12 + 32);
      uint64_t v29 = result & ~v28;
      uint64_t v30 = v29 >> 6;
      if (((-1LL << v29) & ~*(void *)(v18 + 8 * (v29 >> 6))) != 0)
      {
        __int128 v19 = __clz(__rbit64((-1LL << v29) & ~*(void *)(v18 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          v33 = v30 == v32;
          if (v30 == v32) {
            uint64_t v30 = 0LL;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v18 + 8 * v30);
        }

        while (v34 == -1);
        __int128 v19 = __clz(__rbit64(~v34)) + (v30 << 6);
      }

      *(void *)(v18 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
      *(_DWORD *)(*(void *)(v12 + 48) + 4 * v19) = v25;
      result = sub_1003F600C( (uint64_t)v9,  *(void *)(v12 + 56) + v26 * v19,  type metadata accessor for IDSDSessionKeyValueDeliveryLocalEntry);
      ++*(void *)(v12 + 16);
    }
  }

  result = swift_release(v10);
LABEL_43:
  *id v3 = v12;
  return result;
}

    v118 = (v46 - 1) & v46;
    v44 = __clz(__rbit64(v46)) + (v42 << 6);
LABEL_24:
    v48 = v115;
    uint64_t v49 = *(void *)(v116 + 72);
    sub_1003F5FC8( *(void *)(a4 + 48) + v49 * v44,  v115,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    sub_1003F600C(v48, (uint64_t)v32, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    uint64_t v50 = *(void *)&a2[v114];
    v51 = *(void *)(v50 + 16);
    v117 = v42;
    if (!v51) {
      goto LABEL_30;
    }
    uint64_t v52 = *(void *)(v50 + 40);
    v53 = sub_10040A2B0( (unint64_t *)&unk_1009B9980,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer,  (uint64_t)&unk_10071BF14);
    swift_bridgeObjectRetain(v50);
    v54 = dispatch thunk of Hashable._rawHashValue(seed:)(v52, v21, v53);
    v55 = -1LL << *(_BYTE *)(v50 + 32);
    uint64_t v56 = v54 & ~v55;
    if (((*(void *)(v50 + 56 + ((v56 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v56) & 1) != 0)
    {
      v57 = ~v55;
      while (1)
      {
        sub_1003F5FC8( *(void *)(v50 + 48) + v56 * v49,  (uint64_t)v28,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
        v58 = sub_10040A2B0( (unint64_t *)&unk_1009B97E0,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer,  (uint64_t)&unk_10071BF7C);
        uint64_t v59 = dispatch thunk of static Equatable.== infix(_:_:)(v28, v32, v21, v58);
        sub_1003F6050((uint64_t)v28, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
        if ((v59 & 1) != 0) {
          break;
        }
        uint64_t v56 = (v56 + 1) & v57;
        if (((*(void *)(v50 + 56 + ((v56 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v56) & 1) == 0) {
          goto LABEL_29;
        }
      }

      swift_bridgeObjectRelease(v50);
      sub_1003F6050((uint64_t)v32, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
      a4 = v111;
      a2 = v112;
      v43 = (uint64_t)v113;
      uint64_t v42 = v117;
      v41 = v118;
    }

    else
    {
LABEL_29:
      swift_bridgeObjectRelease(v50);
      a4 = v111;
      a2 = v112;
      v43 = (uint64_t)v113;
      uint64_t v42 = v117;
LABEL_30:
      sub_1003F5FC8((uint64_t)v32, v43, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
      if (swift_getEnumCaseMultiPayload(v43, v21))
      {
        sub_1003F6050((uint64_t)v32, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
        sub_1003F6050(v43, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
      }

      else
      {
        v60 = v108;
        sub_1003F600C(v43, v108, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
        v107 = *(void *)&a2[v97];
        v61 = v60;
        v62 = v98;
        sub_1003F5FC8(v61, v98, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
        v63 = *(unsigned __int8 *)(v100 + 80);
        uint64_t v64 = (v63 + 24) & ~v63;
        v65 = swift_allocObject(&unk_1009058E0, v64 + v99, v63 | 7);
        *(void *)(v65 + 16) = a2;
        sub_1003F600C(v62, v65 + v64, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
        aBlock[4] = sub_100425EAC;
        id v121 = v65;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256LL;
        aBlock[2] = sub_1003F8400;
        aBlock[3] = &unk_1009058F8;
        id v66 = _Block_copy(aBlock);
        v67 = a2;
        v68 = v101;
        static DispatchQoS.unspecified.getter(v67);
        v119 = &_swiftEmptyArrayStorage;
        v69 = sub_10040A2B0( (unint64_t *)&unk_1009BAC40,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v70 = sub_1003F5CB4((uint64_t *)&unk_1009B9870);
        v71 = sub_1004021DC((unint64_t *)&qword_1009BAC50, (uint64_t *)&unk_1009B9870);
        v72 = v104;
        uint64_t v73 = v106;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v119, v70, v71, v106, v69);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v68, v72, v66);
        v43 = (uint64_t)v113;
        uint64_t v74 = v66;
        a4 = v111;
        _Block_release(v74);
        v75 = v73;
        uint64_t v42 = v117;
        (*(void (**)(char *, uint64_t))(v105 + 8))(v72, v75);
        v76 = v68;
        a2 = v112;
        (*(void (**)(char *, uint64_t))(v102 + 8))(v76, v103);
        sub_1003F6050(v108, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
        sub_1003F6050((uint64_t)v32, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
        swift_release(v121);
      }

      v41 = v118;
    }
  }

  v47 = v45 + 3;
  if (v47 < v110)
  {
    uint64_t v46 = *(void *)(v109 + 8 * v47);
    if (!v46)
    {
      while (1)
      {
        uint64_t v42 = v47 + 1;
        if (__OFADD__(v47, 1LL)) {
          goto LABEL_43;
        }
        if (v42 >= v110) {
          goto LABEL_37;
        }
        uint64_t v46 = *(void *)(v109 + 8 * v42);
        ++v47;
        if (v46) {
          goto LABEL_23;
        }
      }
    }

    uint64_t v42 = v47;
    goto LABEL_23;
  }

    __int128 v19 = (v25 - 1) & v25;
    id v23 = __clz(__rbit64(v25)) + (v21 << 6);
LABEL_6:
    sub_1003F5FC8( *(void *)(a1 + 48) + *(void *)(v7 + 72) * v23,  (uint64_t)v15,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    sub_1003F600C((uint64_t)v15, (uint64_t)v11, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    sub_10042393C((uint64_t)v11, (uint64_t)v6);
    sub_100425F6C((uint64_t)v6);
    sub_1003F6050((uint64_t)v11, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
  }

  uint64_t v26 = v24 + 4;
  if (v26 >= v20)
  {
LABEL_24:
    swift_release(a1);
    return;
  }

  uint64_t v25 = *(void *)(v28 + 8 * v26);
  if (v25)
  {
    uint64_t v21 = v26;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v21 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v21 >= v20) {
      goto LABEL_24;
    }
    uint64_t v25 = *(void *)(v28 + 8 * v21);
    ++v26;
    if (v25) {
      goto LABEL_23;
    }
  }

    v10 = (v16 - 1) & v16;
    uint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    __int128 v18 = v9[5];
    __int128 v19 = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    result = NSObject._rawHashValue(seed:)(v18);
    __int16 v20 = -1LL << *((_BYTE *)v9 + 32);
    uint64_t v21 = result & ~v20;
    __int16 v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      id v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      __int16 v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        uint64_t v26 = v22 == v25;
        if (v22 == v25) {
          __int16 v22 = 0LL;
        }
        v24 |= v26;
        v27 = *(void *)(v12 + 8 * v22);
      }

      while (v27 == -1);
      id v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }

    *(void *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    *(void *)(v9[6] + 8 * v23) = v19;
    ++v9[2];
    if (__OFSUB__(v5--, 1LL))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (!v5) {
      goto LABEL_36;
    }
  }

  __int128 v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_36;
  }
  __int128 v16 = v29[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_36;
    }
    __int128 v16 = v29[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }

      __break(1u);
      goto LABEL_24;
    }

    __break(1u);
    goto LABEL_23;
  }

  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }

  if (a4 < 0) {
    uint64_t v8 = a4;
  }
  else {
    uint64_t v8 = a4 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t v9 = __CocoaSet.element(at:)(a1, a2, v8);
  uint64_t v25 = v9;
  v10 = type metadata accessor for IDSGroupEncryptionControllerMember();
  swift_unknownObjectRetain(v9, v11);
  swift_dynamicCast(&v26, &v25, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
  swift_unknownObjectRelease(v9, v12);
}

  __break(1u);
LABEL_24:
  __int128 v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v16,  1092LL,  0);
  __break(1u);
  return result;
}

    uint64_t v14 = (v21 - 1) & v21;
    __int128 v19 = __clz(__rbit64(v21)) + (v17 << 6);
LABEL_8:
    sub_1003F600C( *(void *)(v9 + 48) + *(void *)(v4 + 72) * v19,  (uint64_t)v8,  type metadata accessor for SenderKeyInfo);
    result = sub_100471AFC(v8, v10);
  }

  __int16 v22 = v20 + 3;
  if (v22 < v15)
  {
    uint64_t v21 = v12[v22];
    if (!v21)
    {
      while (1)
      {
        __int128 v17 = v22 + 1;
        if (__OFADD__(v22, 1LL)) {
          goto LABEL_30;
        }
        if (v17 >= v15) {
          goto LABEL_24;
        }
        uint64_t v21 = v12[v17];
        ++v22;
        if (v21) {
          goto LABEL_23;
        }
      }
    }

    __int128 v17 = v22;
    goto LABEL_23;
  }

    uint64_t v14 = (v21 - 1) & v21;
    __int128 v19 = __clz(__rbit64(v21)) + (v17 << 6);
LABEL_8:
    sub_1003F5FC8( *(void *)(v9 + 48) + *(void *)(v4 + 72) * v19,  (uint64_t)v8,  type metadata accessor for SenderKeyInfo);
    result = sub_100471AFC(v8, v10);
  }

  __int16 v22 = v20 + 3;
  if (v22 >= v15)
  {
LABEL_24:
    result = swift_release_n(v9, 2LL);
    goto LABEL_26;
  }

  uint64_t v21 = *(void *)(v12 + 8 * v22);
  if (v21)
  {
    __int128 v17 = v22;
    goto LABEL_23;
  }

  while (1)
  {
    __int128 v17 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v17 >= v15) {
      goto LABEL_24;
    }
    uint64_t v21 = *(void *)(v12 + 8 * v17);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }

    id v6 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_6:
    uint64_t v11 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    id v12 = *v11;
    id v13 = v11[1];
    sub_1004028CC(*v11, v13);
    sub_100475CAC(v12, v13, &v17);
    sub_10040AD00(v17, *((unint64_t *)&v17 + 1));
    sub_100402A84(v12, v13);
  }

  __int128 v16 = v14 + 4;
  if (v16 >= v7)
  {
LABEL_24:
    swift_release(a1);
    return;
  }

  uint64_t v15 = *(void *)(v3 + 8 * v16);
  if (v15)
  {
    uint64_t v8 = v16;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v8 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v8 >= v7) {
      goto LABEL_24;
    }
    uint64_t v15 = *(void *)(v3 + 8 * v8);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }

    uint64_t v9 = (v15 - 1) & v15;
    id v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    __int128 v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    __int128 v18 = *v17;
    __int128 v19 = v17[1];
    Hasher.init(_seed:)(v32, v8[5]);
    sub_1004028CC(v18, v19);
    Data.hash(into:)(v32, v18, v19);
    result = Hasher._finalize()();
    __int16 v20 = -1LL << *((_BYTE *)v8 + 32);
    uint64_t v21 = result & ~v20;
    __int16 v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      id v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      __int16 v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        uint64_t v26 = v22 == v25;
        if (v22 == v25) {
          __int16 v22 = 0LL;
        }
        v24 |= v26;
        v27 = *(void *)(v11 + 8 * v22);
      }

      while (v27 == -1);
      id v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }

    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    v28 = (uint64_t *)(v8[6] + 16 * v23);
    __CFString *v28 = v18;
    v28[1] = v19;
    ++v8[2];
    if (__OFSUB__(v5--, 1LL))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (!v5) {
      goto LABEL_36;
    }
  }

  __int128 v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  uint64_t v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }

  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    uint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC3D0, &OBJC_CLASS___IDSEndpoint_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

    uint64_t v21 = (v27 - 1) & v27;
    __int16 v24 = __clz(__rbit64(v27)) + (v17 << 6);
LABEL_8:
    sub_1003F5FC8( *(void *)(v16 + 48) + *(void *)(v30 + 72) * v24,  (uint64_t)v6,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v25 = sub_10043A878();
    [v13 recvKeyMaterial:v25];

    sub_1003F6050((uint64_t)v6, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
  }

  v28 = v26 + 3;
  if (v28 >= v22)
  {
LABEL_24:
    swift_unknownObjectRelease(v13, v15);
    swift_release(v16);
    return;
  }

  v27 = *(void *)(v18 + 8 * v28);
  if (v27)
  {
    __int128 v17 = v28;
    goto LABEL_23;
  }

  while (1)
  {
    __int128 v17 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v17 >= v22) {
      goto LABEL_24;
    }
    v27 = *(void *)(v18 + 8 * v17);
    ++v28;
    if (v27) {
      goto LABEL_23;
    }
  }

    v10 = (v16 - 1) & v16;
    uint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    __int128 v18 = v9[5];
    __int128 v19 = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    result = NSObject._rawHashValue(seed:)(v18);
    __int16 v20 = -1LL << *((_BYTE *)v9 + 32);
    uint64_t v21 = result & ~v20;
    __int16 v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      id v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      __int16 v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        uint64_t v26 = v22 == v25;
        if (v22 == v25) {
          __int16 v22 = 0LL;
        }
        v24 |= v26;
        v27 = *(void *)(v12 + 8 * v22);
      }

      while (v27 == -1);
      id v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }

    *(void *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    *(void *)(v9[6] + 8 * v23) = v19;
    ++v9[2];
    if (__OFSUB__(v5--, 1LL))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (!v5) {
      goto LABEL_36;
    }
  }

  __int128 v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_36;
  }
  __int128 v16 = v29[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_36;
    }
    __int128 v16 = v29[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }

      __break(1u);
      goto LABEL_24;
    }

    __break(1u);
    goto LABEL_23;
  }

  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }

  if (a4 < 0) {
    uint64_t v8 = a4;
  }
  else {
    uint64_t v8 = a4 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t v9 = __CocoaSet.element(at:)(a1, a2, v8);
  uint64_t v25 = v9;
  v10 = type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
  swift_unknownObjectRetain(v9, v11);
  swift_dynamicCast(&v26, &v25, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
  swift_unknownObjectRelease(v9, v12);
}

    __int128 v17 = (v26 - 1) & v26;
    id v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_24:
    v28 = *(void **)(*(void *)(v11 + 48) + 8 * v23);
    uint64_t v29 = *(void *)(v6 + 72);
    uint64_t v30 = *(void *)(v11 + 56) + v29 * v23;
    if ((v43 & 1) != 0)
    {
      sub_10049E2E4(v30, (uint64_t)v10);
    }

    else
    {
      sub_1003F5FC8(v30, (uint64_t)v10, type metadata accessor for IDSGroupEncryptionPublicIdentity);
      v31 = v28;
    }

    result = NSObject._rawHashValue(seed:)(*(void *)(v13 + 40));
    v32 = -1LL << *(_BYTE *)(v13 + 32);
    v33 = result & ~v32;
    uint64_t v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v18 + 8 * (v33 >> 6))) != 0)
    {
      uint64_t v21 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v18 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v35 = 0;
      uint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        v37 = v34 == v36;
        if (v34 == v36) {
          uint64_t v34 = 0LL;
        }
        v35 |= v37;
        v38 = *(void *)(v18 + 8 * v34);
      }

      while (v38 == -1);
      uint64_t v21 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
    *(void *)(*(void *)(v13 + 48) + 8 * v21) = v28;
    result = sub_10049E2E4((uint64_t)v10, *(void *)(v13 + 56) + v29 * v21);
    ++*(void *)(v13 + 16);
  }

  swift_release(v11);
  id v3 = v40;
  uint64_t v25 = v42;
  if ((v43 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  v39 = 1LL << *(_BYTE *)(v11 + 32);
  if (v39 >= 64) {
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v25 = -1LL << v39;
  }
  *(void *)(v11 + 16) = 0LL;
LABEL_43:
  result = swift_release(v11);
  *id v3 = v13;
  return result;
}

  __break(1u);
}

  __break(1u);
}

    uint64_t v9 = (v22 - 1) & v22;
    uint64_t v11 = __clz(__rbit64(v22)) + (v6 << 6);
LABEL_6:
    id v12 = *(char **)(*(void *)(v5 + 56) + 8 * v11);
    id v13 = OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_mkmController;
    uint64_t v14 = *(void **)&v12[OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_mkmController];
    uint64_t v15 = *(void (**)(void))((swift_isaMask & *v14) + 0xB8LL);
    __int128 v16 = v12;
    __int128 v17 = v14;
    v15(a1 & 1);

    __int128 v18 = *(void **)&v12[v13];
    __int128 v19 = *(void (**)(void))((swift_isaMask & *v18) + 0x1F8LL);
    __int16 v20 = v18;
    v19();
  }

  id v23 = v21 + 4;
  if (v23 >= v28)
  {
LABEL_24:
    swift_release(v5);
    v1 = v26;
    id v2 = v25;
    id v3 = v24;
    goto LABEL_25;
  }

  __int16 v22 = *(void *)(v27 + 8 * v23);
  if (v22)
  {
    id v6 = v23;
    goto LABEL_23;
  }

  while (1)
  {
    id v6 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v6 >= v28) {
      goto LABEL_24;
    }
    __int16 v22 = *(void *)(v27 + 8 * v6);
    ++v23;
    if (v22) {
      goto LABEL_23;
    }
  }

    uint64_t v11 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    __int128 v19 = v10[5];
    __int16 v20 = *(id *)(*(void *)(v5 + 48) + 8 * v15);
    result = NSObject._rawHashValue(seed:)(v19);
    uint64_t v21 = -1LL << *((_BYTE *)v10 + 32);
    __int16 v22 = result & ~v21;
    id v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      __int16 v24 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v25 = 0;
      uint64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        v27 = v23 == v26;
        if (v23 == v26) {
          id v23 = 0LL;
        }
        v25 |= v27;
        v28 = *(void *)(v13 + 8 * v23);
      }

      while (v28 == -1);
      __int16 v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }

    *(void *)(v13 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v24;
    *(void *)(v10[6] + 8 * v24) = v20;
    ++v10[2];
    if (__OFSUB__(v6--, 1LL))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (!v6) {
      goto LABEL_36;
    }
  }

  __int128 v18 = v16 + 3;
  if (v18 >= a2) {
    goto LABEL_36;
  }
  __int128 v17 = v30[v18];
  if (v17)
  {
    id v12 = v18;
    goto LABEL_23;
  }

  while (1)
  {
    id v12 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v12 >= a2) {
      goto LABEL_36;
    }
    __int128 v17 = v30[v12];
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }

    __int16 v24 = (v33 - 1) & v33;
    uint64_t v30 = __clz(__rbit64(v33)) + (v27 << 6);
LABEL_24:
    v35 = *(void *)(v11 + 72);
    uint64_t v36 = *(void *)(v18 + 48) + v35 * v30;
    if ((v56 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v11 + 32))(v15, v36, v10);
      v37 = *(void *)(v18 + 56);
      v38 = *(void *)(v55 + 72);
      sub_1004C77E4(v37 + v38 * v30, v57);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v15, v36, v10);
      v39 = *(void *)(v18 + 56);
      v38 = *(void *)(v55 + 72);
      sub_1003F5FC8(v39 + v38 * v30, v57, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    }

    uint64_t v40 = *(void *)(v20 + 40);
    v41 = sub_10040A2B0( &qword_1009B9300,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v40, v10, v41);
    uint64_t v42 = -1LL << *(_BYTE *)(v20 + 32);
    v43 = result & ~v42;
    v44 = v43 >> 6;
    if (((-1LL << v43) & ~*(void *)(v25 + 8 * (v43 >> 6))) != 0)
    {
      v28 = __clz(__rbit64((-1LL << v43) & ~*(void *)(v25 + 8 * (v43 >> 6)))) | v43 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v45 = 0;
      uint64_t v46 = (unint64_t)(63 - v42) >> 6;
      do
      {
        if (++v44 == v46 && (v45 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        v47 = v44 == v46;
        if (v44 == v46) {
          v44 = 0LL;
        }
        v45 |= v47;
        v48 = *(void *)(v25 + 8 * v44);
      }

      while (v48 == -1);
      v28 = __clz(__rbit64(~v48)) + (v44 << 6);
    }

    *(void *)(v25 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v28;
    (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(*(void *)(v20 + 48) + v35 * v28, v15, v10);
    result = sub_1004C77E4(v57, *(void *)(v20 + 56) + v38 * v28);
    ++*(void *)(v20 + 16);
  }

  swift_release(v18);
  id v3 = v51;
  v32 = v53;
  if ((v56 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v49 = 1LL << *(_BYTE *)(v18 + 32);
  if (v49 >= 64) {
    bzero(v32, ((unint64_t)(v49 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v32 = -1LL << v49;
  }
  *(void *)(v18 + 16) = 0LL;
LABEL_43:
  result = swift_release(v18);
  *id v3 = v20;
  return result;
}

        id v12 = (v25 - 1) & v25;
        id v23 = __clz(__rbit64(v25)) + (v16 << 6);
      }

      v27 = 8 * v23;
      v28 = *(void **)(*(void *)(v5 + 48) + v27);
      uint64_t v29 = *(void *)(*(void *)(v5 + 56) + v27);
      if ((v37 & 1) == 0)
      {
        uint64_t v30 = v28;
        swift_bridgeObjectRetain(v29);
      }

      result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
      __int128 v17 = -1LL << *(_BYTE *)(v8 + 32);
      __int128 v18 = result & ~v17;
      __int128 v19 = v18 >> 6;
      if (((-1LL << v18) & ~*(void *)(v14 + 8 * (v18 >> 6))) != 0)
      {
        __int16 v20 = __clz(__rbit64((-1LL << v18) & ~*(void *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }

          v33 = v19 == v32;
          if (v19 == v32) {
            __int128 v19 = 0LL;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v14 + 8 * v19);
        }

        while (v34 == -1);
        __int16 v20 = __clz(__rbit64(~v34)) + (v19 << 6);
      }

      *(void *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
      uint64_t v21 = 8 * v20;
      *(void *)(*(void *)(v8 + 48) + v21) = v28;
      *(void *)(*(void *)(v8 + 56) + v21) = v29;
      ++*(void *)(v8 + 16);
    }
  }

  result = swift_release(v5);
  *id v3 = v8;
  return result;
}

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution(0LL);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

    mach_msg_destroy(&msg);
    return v12;
  }

  mig_put_reply_port(msg.msgh_local_port);
  return v12;
}

id sub_100012A48(id a1, NSString *a2)
{
  id v2 = a2;
  if (-[NSString isEqualToString:](v2, "isEqualToString:", kFZServiceDefaultsSentinelAlias)
    || -[NSString isEqualToString:](v2, "isEqualToString:", kIDSServiceDefaultsSentinelSelfAlias))
  {
    id v3 = 0LL;
  }

  else
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", v2));
  }

  return v3;
}

void sub_1000131B8(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (v5 || !a2)
  {
    uint64_t v10 = OSLogHandleForIDSCategory("PeerLookup_SwiftData");
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      uint64_t v15 = v12;
      __int16 v16 = 2112;
      id v17 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Failed to update SwiftData DB with new KT peer verification results for URI: %@ {error: %@}",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v13)
      && _IDSShouldLog(0LL, @"PeerLookup_SwiftData"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup_SwiftData",  @"Failed to update SwiftData DB with new KT peer verification results for URI: %@ {error: %@}");
    }
  }

  else
  {
    uint64_t v6 = OSLogHandleForIDSCategory("PeerLookup_SwiftData");
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v15 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Successfully updated SwiftData DB with new KT peer verification results for URI: %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v9)
      && _IDSShouldLog(0LL, @"PeerLookup_SwiftData"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup_SwiftData",  @"Successfully updated SwiftData DB with new KT peer verification results for URI: %@");
    }
  }
}

id sub_1000136C0(id a1, IDSURI *a2)
{
  id v2 = a2;
  id v3 = objc_autoreleasePoolPush();
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[IDSURI tokenFreeURI](v2, "tokenFreeURI"));
  objc_autoreleasePoolPop(v3);

  return v4;
}

void sub_100013710( uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, unsigned int a8, void *a9, unsigned __int8 a10)
{
  id v52 = a2;
  id v51 = a3;
  id v16 = a4;
  id v50 = a5;
  id v49 = a6;
  id v48 = a7;
  id v47 = a9;
  id v17 = *(void **)(a1 + 32);
  __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) allObjects]);
  v54 = (void *)objc_claimAutoreleasedReturnValue( [v17 endpointsForURIs:v18 service:*(void *)(a1 + 48) fromURI:*(void *)(a1 + 56)]);

  __int128 v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  __int128 v61 = 0u;
  __int128 v62 = 0u;
  __int128 v63 = 0u;
  __int128 v64 = 0u;
  uint64_t v56 = a1;
  id obj = *(id *)(a1 + 64);
  id v20 = [obj countByEnumeratingWithState:&v61 objects:v65 count:16];
  if (v20)
  {
    id v21 = v20;
    uint64_t v22 = *(void *)v62;
    id v23 = &__NSArray0__struct;
    do
    {
      __int16 v24 = 0LL;
      id v53 = v21;
      do
      {
        if (*(void *)v62 != v22) {
          objc_enumerationMutation(obj);
        }
        uint64_t v25 = *(void **)(*((void *)&v61 + 1) + 8LL * (void)v24);
        uint64_t v26 = objc_autoreleasePoolPush();
        uint64_t v27 = objc_claimAutoreleasedReturnValue([v25 pushToken]);
        v28 = (void *)objc_claimAutoreleasedReturnValue([v25 tokenFreeURI]);
        v58 = (void *)v27;
        if (![v16 count])
        {
          if (!v27) {
            goto LABEL_17;
          }
LABEL_11:
          v31 = *(void **)(v56 + 72);
          goto LABEL_12;
        }

        unsigned __int8 v29 = [v16 containsObject:v28];
        unsigned __int8 v30 = v29;
        if (!v27)
        {
          if ((v29 & 1) != 0) {
            v41 = v54;
          }
          else {
LABEL_17:
          }
            v41 = *(void **)(v56 + 72);
          v32 = (void *)objc_claimAutoreleasedReturnValue([v41 objectForKeyedSubscript:v28]);
          [v19 setObject:v32 forKeyedSubscript:v28];
          goto LABEL_19;
        }

        v31 = v54;
        if ((v30 & 1) == 0) {
          goto LABEL_11;
        }
LABEL_12:
        v57 = v26;
        v32 = (void *)objc_claimAutoreleasedReturnValue([v31 objectForKeyedSubscript:v28]);
        v59[0] = _NSConcreteStackBlock;
        v59[1] = 3221225472LL;
        v59[2] = sub_100013AE0;
        v59[3] = &unk_1008F6110;
        id v60 = v58;
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "__imArrayByFilteringWithBlock:", v59));
        uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:v28]);
        v35 = v34;
        if (v34)
        {
          uint64_t v36 = v19;
          v37 = v23;
          uint64_t v38 = v22;
          id v39 = v16;
          uint64_t v40 = objc_claimAutoreleasedReturnValue([v34 arrayByAddingObjectsFromArray:v33]);

          v33 = (void *)v40;
          id v16 = v39;
          uint64_t v22 = v38;
          id v23 = v37;
          __int128 v19 = v36;
          id v21 = v53;
        }

        [v19 setObject:v33 forKeyedSubscript:v28];

        uint64_t v26 = v57;
LABEL_19:

        uint64_t v42 = objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:v28]);
        v43 = (void *)v42;
        if (v42) {
          v44 = (void *)v42;
        }
        else {
          v44 = v23;
        }
        [v19 setObject:v44 forKeyedSubscript:v28];

        objc_autoreleasePoolPop(v26);
        __int16 v24 = (char *)v24 + 1;
      }

      while (v21 != v24);
      id v21 = [obj countByEnumeratingWithState:&v61 objects:v65 count:16];
    }

    while (v21);
  }

  uint64_t v45 = *(void *)(v56 + 80);
  if (v45) {
    (*(void (**)(uint64_t, id, id, id, id, void, id, void, void *))(v45 + 16))( v45,  v52,  v50,  v49,  v48,  a8,  v47,  a10,  v19);
  }
}

id sub_100013AE0(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 pushTokenObject]);
  id v4 = [v3 isEqualToPushToken:*(void *)(a1 + 32)];

  return v4;
}

void sub_1000141F0(id a1, BOOL a2, NSError *a3)
{
  id v4 = a3;
  if (v4 || !a2)
  {
    uint64_t v5 = OSLogHandleForIDSCategory("PeerLookup_SwiftData");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Failed deleting peer and personal entries from DB",  v8,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v7)
      && _IDSShouldLog(0LL, @"PeerLookup_SwiftData"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup_SwiftData",  @"Failed deleting peer and personal entries from DB");
    }
  }
}

void sub_10001475C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if (v5 || (a2 & 1) == 0)
  {
    uint64_t v6 = OSLogHandleForIDSCategory("PeerLookup_SwiftData");
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412802;
      uint64_t v12 = v8;
      __int16 v13 = 2112;
      uint64_t v14 = v9;
      __int16 v15 = 2112;
      id v16 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Failed deleting endpoints for URIs: %@ services: %@  {deleteError: %@}",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v10)
      && _IDSShouldLog(0LL, @"PeerLookup_SwiftData"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup_SwiftData",  @"Failed deleting endpoints for URIs: %@ services: %@  {deleteError: %@}");
    }
  }
}

void sub_100014CF8(void *a1, char a2, void *a3)
{
  id v5 = a3;
  if (v5 || (a2 & 1) == 0)
  {
    uint64_t v6 = OSLogHandleForIDSCategory("PeerLookup_SwiftData");
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = a1[4];
      uint64_t v9 = a1[5];
      uint64_t v10 = a1[6];
      *(_DWORD *)buf = 138413058;
      uint64_t v13 = v8;
      __int16 v14 = 2112;
      uint64_t v15 = v9;
      __int16 v16 = 2112;
      uint64_t v17 = v10;
      __int16 v18 = 2112;
      id v19 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Failed deleting endpoints for URI: %@  from URI: %@  service: %@  {deleteError: %@}",  buf,  0x2Au);
    }

    if (os_log_shim_legacy_logging_enabled(v11)
      && _IDSShouldLog(0LL, @"PeerLookup_SwiftData"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup_SwiftData",  @"Failed deleting endpoints for URI: %@  from URI: %@  service: %@  {deleteError: %@}");
    }
  }
}

void sub_100015348(void *a1, char a2, void *a3)
{
  id v5 = a3;
  if (v5 || (a2 & 1) == 0)
  {
    uint64_t v6 = OSLogHandleForIDSCategory("PeerLookup_SwiftData");
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = a1[4];
      uint64_t v9 = a1[5];
      uint64_t v10 = a1[6];
      *(_DWORD *)buf = 138413058;
      uint64_t v13 = v8;
      __int16 v14 = 2112;
      uint64_t v15 = v9;
      __int16 v16 = 2112;
      uint64_t v17 = v10;
      __int16 v18 = 2112;
      id v19 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Failed deleting endpoints for URI: %@  from URI: %@  services: %@  {deleteError: %@}",  buf,  0x2Au);
    }

    if (os_log_shim_legacy_logging_enabled(v11)
      && _IDSShouldLog(0LL, @"PeerLookup_SwiftData"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup_SwiftData",  @"Failed deleting endpoints for URI: %@  from URI: %@  services: %@  {deleteError: %@}");
    }
  }
}

id sub_10001589C(id a1, NSString *a2)
{
  id v2 = a2;
  if (-[NSString isEqualToString:](v2, "isEqualToString:", kFZServiceDefaultsSentinelAlias)
    && -[NSString isEqualToString:](v2, "isEqualToString:", kIDSServiceDefaultsSentinelSelfAlias))
  {
    id v3 = 0LL;
  }

  else
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", v2));
  }

  return v3;
}

void sub_100015B48(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if (v5 || (a2 & 1) == 0)
  {
    uint64_t v10 = OSLogHandleForIDSCategory("PeerLookup_SwiftData");
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      uint64_t v15 = v12;
      __int16 v16 = 2112;
      id v17 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Failed deleting endpoints for service: %@  {deleteError: %@}",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v13)
      && _IDSShouldLog(0LL, @"PeerLookup_SwiftData"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup_SwiftData",  @"Failed deleting endpoints for service: %@  {deleteError: %@}");
    }
  }

  else
  {
    uint64_t v6 = OSLogHandleForIDSCategory("PeerLookup_SwiftData");
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v15 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Successfully deleted endpoints for service: %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v9)
      && _IDSShouldLog(0LL, @"PeerLookup_SwiftData"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup_SwiftData",  @"Successfully deleted endpoints for service: %@");
    }
  }
}

LABEL_22:
            __int16 v16 = v24;
          }
        }

        else
        {
          LOBYTE(v14) = 1;
        }
      }

      else
      {
        LOBYTE(v14) = 0;
      }
    }
  }

  else
  {
    LOBYTE(v14) = 1;
  }

  return (char)v14;
}

  if (v95)
  {
    id v39 = (void *)objc_claimAutoreleasedReturnValue( +[IDSMessageMetricReporter errorToReportForLegacyError:]( &OBJC_CLASS___IDSMessageMetricReporter,  "errorToReportForLegacyError:",  v95));
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v39 domain]);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v23,  "setObject:forKeyedSubscript:",  v40,  @"ids_legacy_error_domain");

    v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v39 code]));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v23,  "setObject:forKeyedSubscript:",  v41,  @"ids_legacy_error_code");
  }

  if (v94)
  {
    uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue( +[IDSMessageMetricReporter errorToReportForNGMError:]( &OBJC_CLASS___IDSMessageMetricReporter,  "errorToReportForNGMError:",  v94));
    v43 = (void *)objc_claimAutoreleasedReturnValue([v42 domain]);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v23,  "setObject:forKeyedSubscript:",  v43,  @"ids_secondary_error_domain");

    v44 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v42 code]));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v23,  "setObject:forKeyedSubscript:",  v44,  @"ids_secondary_error_code");
  }

  if (v97)
  {
    uint64_t v45 = objc_opt_class(&OBJC_CLASS___NSDictionary, v29);
    id v47 = objc_opt_class(&OBJC_CLASS___NSMutableDictionary, v46);
    id v49 = objc_opt_class(&OBJC_CLASS___NSString, v48);
    id v51 = +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  v45,  v47,  v49,  objc_opt_class(&OBJC_CLASS___NSNumber, v50),  0LL);
    id v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
    v108 = 0LL;
    id v53 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver _strictlyUnarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "_strictlyUnarchivedObjectOfClasses:fromData:error:",  v52,  v97,  &v108));
    v54 = v108;

    if (v54)
    {
      v55 = OSLogHandleForIDSCategory("1to1EC");
      uint64_t v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        uint64_t v110 = v54;
        id v111 = 2112;
        v112 = v97;
        _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEFAULT,  "Failed to get payload metadata {payloadMetadataError: %@, payloadMetadataData: %@}",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v57) && _IDSShouldLog(0LL, @"1to1EC"))
      {
        uint64_t v84 = v54;
        v85 = v97;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"1to1EC",  @"Failed to get payload metadata {payloadMetadataError: %@, payloadMetadataData: %@}");
      }
    }

    if (v53)
    {
      -[NSMutableDictionary addEntriesFromDictionary:](v23, "addEntriesFromDictionary:", v53);
    }
  }

  if (v93 && v92)
  {
    v58 = (void *)objc_claimAutoreleasedReturnValue(+[IMUserDefaults sharedDefaults](&OBJC_CLASS___IMUserDefaults, "sharedDefaults"));
    uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([v58 appValueForKey:@"ConversationSalt"]);

    __int128 v61 = objc_opt_class(&OBJC_CLASS___NSData, v60);
    if ((objc_opt_isKindOfClass(v59, v61) & 1) != 0)
    {
      __int128 v62 = v59;
    }

    else
    {
      __int128 v63 = -[NSMutableData initWithLength:](objc_alloc(&OBJC_CLASS___NSMutableData), "initWithLength:", 32LL);
      arc4random_buf(-[NSMutableData mutableBytes](v63, "mutableBytes"), 0x20uLL);
      __int128 v62 = -[NSMutableData copy](v63, "copy");

      if (v62)
      {
        __int128 v64 = (void *)objc_claimAutoreleasedReturnValue(+[IMUserDefaults sharedDefaults](&OBJC_CLASS___IMUserDefaults, "sharedDefaults"));
        [v64 setAppValue:v62 forKey:@"ConversationSalt"];
      }
    }

    if (v62)
    {
      v65 = [v93 mutableCopy];
      [v65 appendData:v92];
      id v66 = IDSSaltedHash(v62, v65);
      v67 = (void *)objc_claimAutoreleasedReturnValue(v66);
      if (v67) {
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v23,  "setObject:forKeyedSubscript:",  v67,  @"ids_conversation_id");
      }
    }
  }

  v68 = (void *)objc_claimAutoreleasedReturnValue( +[CUTReporting RTCSessionPromiseWithBatchingInterval:]( &OBJC_CLASS___CUTReporting,  "RTCSessionPromiseWithBatchingInterval:",  30.0,  v84,  v85));
  v106[0] = _NSConcreteStackBlock;
  v106[1] = 3221225472LL;
  v106[2] = sub_10003F314;
  v106[3] = &unk_1008F7798;
  v69 = v23;
  v107 = v69;
  [v68 registerResultBlock:v106];
  if (+[IDSAutoBugCapture isSupported](&OBJC_CLASS___IDSAutoBugCapture, "isSupported"))
  {
    if (v90) {
      v89 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:"));
    }
    else {
      v89 = 0LL;
    }
    uint64_t v70 = [v19 BOOLValue];
    v71 = [v20 BOOLValue];
    v72 = [v98 BOOLValue];
    if ((v19 == 0LL) | v70 & 1) {
      uint64_t v73 = 0;
    }
    else {
      uint64_t v73 = !+[IDSMessageMetricReporter _shouldIgnoreAutoBugCaptureForECFailure:]( &OBJC_CLASS___IDSMessageMetricReporter,  "_shouldIgnoreAutoBugCaptureForECFailure:",  v96);
    }
    if (v20) {
      uint64_t v74 = v71;
    }
    else {
      uint64_t v74 = 1;
    }
    if ((v74 & 1) != 0) {
      v75 = 0;
    }
    else {
      v75 = !+[IDSMessageMetricReporter _shouldIgnoreAutoBugCaptureForLegacyFailure:]( &OBJC_CLASS___IDSMessageMetricReporter,  "_shouldIgnoreAutoBugCaptureForLegacyFailure:",  v95);
    }
    if (v98) {
      v76 = v72;
    }
    else {
      v76 = 1;
    }
    if ((v73 | v75) == 1)
    {
      uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v69,  "objectForKeyedSubscript:",  @"ids_EC_error_domain"));
      v87 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v69,  "objectForKeyedSubscript:",  @"ids_EC_error_code"));
      v86 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v69,  "objectForKeyedSubscript:",  @"ids_legacy_error_domain"));
      uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v69,  "objectForKeyedSubscript:",  @"ids_legacy_error_code"));
      if ((v73 & v75) == 1)
      {
        v79 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"EC (%@:%@) and Legacy (%@:%@)",  v77,  v87,  v86,  v78));
      }

      else if (v73)
      {
        v79 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"EC (%@:%@)",  v77,  v87));
      }

      else if (v75)
      {
        v79 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Legacy (%@:%@)",  v86,  v78));
      }

      else
      {
        v79 = 0LL;
      }

      v102[0] = _NSConcreteStackBlock;
      v102[1] = 3221225472LL;
      v102[2] = sub_10003F488;
      v102[3] = &unk_1008F77C0;
      v80 = v79;
      unsigned int v103 = v80;
      v104 = v20;
      v105 = v19;
      +[IDSAutoBugCapture triggerCaptureWithEvent:destinations:context:completion:]( &OBJC_CLASS___IDSAutoBugCapture,  "triggerCaptureWithEvent:destinations:context:completion:",  101LL,  v89,  v80,  v102);
    }

    else
    {
      v80 = 0LL;
    }

    if ((v76 & 1) == 0)
    {
      v81 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v69,  "objectForKeyedSubscript:",  @"ids_secondary_error_domain"));
      uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v69,  "objectForKeyedSubscript:",  @"ids_secondary_error_code"));
      if (![v81 isEqualToString:@"com.apple.messageprotection"]
        || ([v82 isEqualToNumber:&off_100946810] & 1) == 0
        && ([v82 isEqualToNumber:&off_100946828] & 1) == 0)
      {
        v83 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Secondary (%@:%@)",  v81,  v82));

        v99[0] = _NSConcreteStackBlock;
        v99[1] = 3221225472LL;
        v99[2] = sub_10003F588;
        v99[3] = &unk_1008F77E8;
        v80 = v83;
        uint64_t v100 = v80;
        v101 = v98;
        +[IDSAutoBugCapture triggerCaptureWithEvent:destinations:context:completion:]( &OBJC_CLASS___IDSAutoBugCapture,  "triggerCaptureWithEvent:destinations:context:completion:",  105LL,  v89,  v80,  v99);
      }
    }
  }

LABEL_82:
}

        self->_linkProtocol = v12;
      }
    }

    else if (sub_10009797C((uint64_t)(v6 + 3), &self->_relayPort))
    {
      __int16 v14 = OSLogHandleForTransportCategory("IDSDSession");
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v16 = self->_relayPort;
        *(_DWORD *)buf = 67109120;
        id v20 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "use TCP for QR, port: %u", buf, 8u);
      }

      __int16 v18 = os_log_shim_legacy_logging_enabled(v17);
      if (!(_DWORD)v18 || !_IDSShouldLogTransport(v18))
      {
        uint64_t v12 = 3LL;
        goto LABEL_22;
      }

      _IDSLogTransport(@"IDSDSession", @"IDS", @"use TCP for QR, port: %u");
      uint64_t v12 = 3LL;
      if ((_IDSShouldLog(0LL, @"IDSDSession") & 1) != 0)
      {
        uint64_t v13 = @"use TCP for QR, port: %u";
        goto LABEL_19;
      }

      goto LABEL_22;
    }
  }
}

LABEL_23:
}

    v37 = (void *)objc_claimAutoreleasedReturnValue([v24 groupMembers]);
    uint64_t v38 = *(void **)(a1 + 56);
    id v39 = (void *)objc_claimAutoreleasedReturnValue([v37 allKeys]);
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472LL;
    v48[2] = sub_100100C88;
    v48[3] = &unk_1008FA3D0;
    id v49 = v24;
    id v50 = *(id *)(a1 + 64);
    id v51 = *(id *)(a1 + 72);
    id v52 = *(id *)(a1 + 40);
    id v53 = *(id *)(a1 + 80);
    uint64_t v40 = v24;
    [v38 _participantsForDestinations:v39 completion:v48];
  }

  else
  {
    unsigned __int8 v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ENLog groupContext](&OBJC_CLASS___ENLog, "groupContext"));
    if (os_log_type_enabled(v30, OS_LOG_TYPE_FAULT)) {
      sub_10069B7D0(a1, v30, v31, v32, v33, v34, v35, v36);
    }

    (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
  }
}

    uint64_t v27 = 0;
    goto LABEL_23;
  }

  SAToIPPortString(v52, 128LL, a6);
  SAToIPPortString(v51, 128LL, a7);
  IDSLinkPacketBufferAddBufferStart(a9, 25LL);
  a9->var2 = v50;
  uint64_t v22 = OSLogHandleForTransportCategory("UGL");
  id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    var2 = a9->var2;
    *(_DWORD *)buf = 134218754;
    uint64_t v42 = var2;
    v43 = 2080;
    v44 = v52;
    uint64_t v45 = 1024;
    uint64_t v46 = v14;
    id v47 = 2080;
    id v48 = v51;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "receive indication data (%zdB) for [%s(%u)-%s].",  buf,  0x26u);
  }

  uint64_t v26 = os_log_shim_legacy_logging_enabled(v25);
  if ((_DWORD)v26)
  {
    if (_IDSShouldLogTransport(v26))
    {
      id v39 = v14;
      uint64_t v40 = v51;
      v37 = a9->var2;
      uint64_t v38 = v52;
      _IDSLogTransport(@"UGL", @"IDS", @"receive indication data (%zdB) for [%s(%u)-%s].");
      if (_IDSShouldLog(0LL, @"UGL"))
      {
        id v39 = v14;
        uint64_t v40 = v51;
        v37 = a9->var2;
        uint64_t v38 = v52;
        _IDSLogV(0LL, @"IDSFoundation", @"UGL", @"receive indication data (%zdB) for [%s(%u)-%s].");
      }
    }
  }

  -[IDSUDPGlobalLink _forwardPacketBuffer:fromDeviceUniqueID:cbuuid:]( self,  "_forwardPacketBuffer:fromDeviceUniqueID:cbuuid:",  a9,  v19,  v20,  v37,  v38,  v39,  v40);
  uint64_t v27 = 1;
LABEL_23:

  return v27;
}
  }
}

        -[IDSDAccount _setValidationStatus:error:forAlias:info:addToCurrentHandlesIfNeeded:forceAdd:]( self,  "_setValidationStatus:error:forAlias:info:addToCurrentHandlesIfNeeded:forceAdd:",  1LL,  0LL,  v13,  0LL,  0LL,  0LL);

        goto LABEL_23;
      }

      if (v17 != 5051)
      {
        if (v17 == 5055) {
          goto LABEL_13;
        }
        if (v17 == 5052)
        {

          -[IDSDAccount _setValidationStatus:error:forAlias:info:addToCurrentHandlesIfNeeded:forceAdd:]( self,  "_setValidationStatus:error:forAlias:info:addToCurrentHandlesIfNeeded:forceAdd:",  2LL,  0xFFFFFFFFLL,  0LL,  0LL,  0LL,  0LL);
LABEL_23:
          uint64_t v13 = 0LL;
LABEL_24:
          __int16 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            id v19 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount uniqueID](self, "uniqueID"));
            *(_DWORD *)buf = 138412546;
            *(void *)&uint8_t buf[4] = v19;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v13;
            _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Not adding registered phone alias to appleID account {uniqueID: %@, phoneAlias: %@}",  buf,  0x16u);
          }

          goto LABEL_26;
        }

        goto LABEL_22;
      }

      __int16 v18 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      CFDictionarySetValue(v18, @"uri", v13);
      if (v14) {
        CFDictionarySetValue(v18, @"device-name", v14);
      }
      if (v15) {
        CFDictionarySetValue(v18, @"is-user-visible", v15);
      }
      -[NSMutableArray addObject:](v80, "addObject:", v18);
      -[NSMutableArray addObject:](v81, "addObject:", v13);
LABEL_26:
    }

    uint64_t v8 = [obj countByEnumeratingWithState:&v101 objects:v119 count:16];
  }

  while (v8);
LABEL_28:

  *(void *)buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000LL;
  id v116 = sub_1001E6F64;
  v117 = sub_1001E6F74;
  v118 = (NSMutableArray *)0xAAAAAAAAAAAAAAAALL;
  v118 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  uint64_t v77 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(objc_msgSend(v82, "__imArrayByApplyingBlock:", &stru_1008FDA48));
  v97[0] = _NSConcreteStackBlock;
  v97[1] = 3221225472LL;
  v97[2] = sub_1001E6FBC;
  v97[3] = &unk_1008FDA70;
  v97[4] = self;
  uint64_t v100 = buf;
  uint64_t v74 = (NSMutableArray *)v82;
  uint64_t v98 = v74;
  v75 = (NSMutableArray *)v78;
  v99 = v75;
  v83 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(-[NSMutableArray __imArrayByApplyingBlock:](v81, "__imArrayByApplyingBlock:", v97));
  if ([*(id *)(*(void *)&buf[8] + 40) count]) {
    v76 = (NSMutableArray *)objc_claimAutoreleasedReturnValue( -[NSMutableArray arrayByAddingObjectsFromArray:]( v77,  "arrayByAddingObjectsFromArray:",  *(void *)(*(void *)&buf[8] + 40LL)));
  }
  else {
    v76 = v77;
  }
  id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v106 = 138412290;
    v107 = v75;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "My current handles: %@", v106, 0xCu);
  }

  id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v106 = 138412290;
    v107 = v74;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "My current vetted handles: %@", v106, 0xCu);
  }

  uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v106 = 138412290;
    v107 = v77;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "My current vetted emails: %@", v106, 0xCu);
  }

  id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v106 = 138412290;
    v107 = v76;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Asserted Emails: %@", v106, 0xCu);
  }

  __int16 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v106 = 138412290;
    v107 = v81;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "My new aliases: %@", v106, 0xCu);
  }

  uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v106 = 138412290;
    v107 = v83;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Newly added: %@", v106, 0xCu);
  }

  if (!-[NSMutableArray count](v83, "count"))
  {
    uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_78;
    }
    *(_WORD *)v106 = 0;
    uint64_t v27 = "** No new handles!";
    goto LABEL_77;
  }

  if (-[IDSDAccount shouldAutoRegisterAllHandles](self, "shouldAutoRegisterAllHandles"))
  {
    uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_78;
    }
    *(_WORD *)v106 = 0;
    uint64_t v27 = " => All handle based account, not showing available notification";
LABEL_77:
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, v27, v106, 2u);
    goto LABEL_78;
  }

  if (-[IDSDAccount shouldRegisterUsingDSHandle](self, "shouldRegisterUsingDSHandle"))
  {
    uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_78;
    }
    *(_WORD *)v106 = 0;
    uint64_t v27 = " => DS handle based account, not showing available notification";
    goto LABEL_77;
  }

  v28 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount service](self, "service"));
  unsigned __int8 v29 = [v28 shouldShowUsageNotifications];

  if (!v29)
  {
    uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_78;
    }
    *(_WORD *)v106 = 0;
    uint64_t v27 = "** Not showing notification, service is not configured to show them";
    goto LABEL_77;
  }

  v95 = 0u;
  v96 = 0u;
  uint64_t v93 = 0u;
  uint64_t v94 = 0u;
  uint64_t v26 = v80;
  unsigned __int8 v30 = -[os_log_s countByEnumeratingWithState:objects:count:]( v26,  "countByEnumeratingWithState:objects:count:",  &v93,  v114,  16LL);
  if (!v30) {
    goto LABEL_78;
  }
  v85 = *(void *)v94;
  v79 = v26;
  while (2)
  {
    v31 = 0LL;
    while (2)
    {
      if (*(void *)v94 != v85) {
        objc_enumerationMutation(v79);
      }
      v32 = *(void **)(*((void *)&v93 + 1) + 8 * v31);
      v33 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([v32 objectForKey:@"uri"]);
      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v32 objectForKey:@"device-name"]);
      if ((-[NSMutableArray containsObject:](v83, "containsObject:", v33) & 1) != 0)
      {
        v35 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationController registeredPhoneNumbers]( &OBJC_CLASS___IDSRegistrationController,  "registeredPhoneNumbers"));
        uint64_t v36 = [v35 containsObject:v33];

        if (v36)
        {
          v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v106 = 0;
            uint64_t v38 = v37;
            id v39 = " => Not adding, this is my phone number";
            goto LABEL_64;
          }
        }

        else if (-[IDSDAccount wasRecentlySelectedAlias:](self, "wasRecentlySelectedAlias:", v33))
        {
          uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v106 = 138412290;
            v107 = v33;
            _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "Alias was recently selected, just adding {alias: %@}",  v106,  0xCu);
          }

          v44 = IMSingleObjectArray(v33, v41, v42, v43);
          v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
          -[IDSDAccount addAliases:](self, "addAliases:", v37);
          -[IDSDAccount validateAliases:](self, "validateAliases:", v37);
        }

        else
        {
          uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount serviceType](self, "serviceType"));
          uint64_t v46 = _StringForIDSRegistrationServiceType();
          v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);

          id v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          {
            id v48 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration mainID](self->_registrationInfo, "mainID"));
            *(_DWORD *)v106 = 138413058;
            v107 = v33;
            v108 = 2112;
            v109 = v34;
            uint64_t v110 = 2112;
            id v111 = v48;
            v112 = 2112;
            v113 = v37;
            _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "** Adding notification for %@  on device %@  on apple ID: %@ for service: %@",  v106,  0x2Au);
          }

          -[IDSDAccount markAsVettedAlias:](self, "markAsVettedAlias:", v33);
          id v49 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount appleIDNotificationCenter](self, "appleIDNotificationCenter"));
          id v50 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount uniqueID](self, "uniqueID"));
          id v51 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration mainID](self->_registrationInfo, "mainID"));
          id v52 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount serviceType](self, "serviceType"));
          v92[0] = _NSConcreteStackBlock;
          v92[1] = 3221225472LL;
          v92[2] = sub_1001E7040;
          v92[3] = &unk_1008FDA98;
          v92[4] = self;
          [v49 addAvailableNotificationForSession:v50 appleID:v51 alias:v33 deviceName:v34 serviceType:v52 completionBlock:v92];
        }
      }

      else
      {
        v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v106 = 0;
          uint64_t v38 = v37;
          id v39 = " => Not adding, new handles does not contain this alias";
LABEL_64:
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, v39, v106, 2u);
        }
      }

      if (v30 != (id)++v31) {
        continue;
      }
      break;
    }

    uint64_t v26 = v79;
    unsigned __int8 v30 = -[os_log_s countByEnumeratingWithState:objects:count:]( v79,  "countByEnumeratingWithState:objects:count:",  &v93,  v114,  16LL);
    if (v30) {
      continue;
    }
    break;
  }

    uint64_t v25 = 0LL;
    goto LABEL_23;
  }

  __int16 v14 = objc_opt_class(&OBJC_CLASS___NSArray, v12);
  if ((objc_opt_isKindOfClass(v13, v14) & 1) == 0 || ![v13 count])
  {
    uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMIDSLog activityMonitor](&OBJC_CLASS___IMIDSLog, "activityMonitor"));
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v40 = v10;
      v41 = 2112;
      uint64_t v42 = v13;
      uint64_t v27 = "Invalid activity monitor entitlement -- failing creation of IDSDXPCActivityMonitor collaborator {connection:"
            " %@, activityMonitorEntitlementValue: %@}";
      v28 = v26;
      unsigned __int8 v29 = 22;
LABEL_21:
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, v27, buf, v29);
      goto LABEL_22;
    }

    goto LABEL_22;
  }

  v32 = self;
  v33 = v9;
  v37 = 0u;
  uint64_t v38 = 0u;
  v35 = 0u;
  uint64_t v36 = 0u;
  uint64_t v15 = v13;
  __int16 v16 = [v15 countByEnumeratingWithState:&v35 objects:v45 count:16];
  if (v16)
  {
    __int16 v18 = v16;
    id v19 = *(void *)v36;
    while (2)
    {
      for (i = 0LL; i != v18; i = (char *)i + 1)
      {
        if (*(void *)v36 != v19) {
          objc_enumerationMutation(v15);
        }
        id v21 = *(void *)(*((void *)&v35 + 1) + 8LL * (void)i);
        uint64_t v22 = objc_opt_class(&OBJC_CLASS___NSString, v17);
        if ((objc_opt_isKindOfClass(v21, v22) & 1) == 0)
        {
          v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMIDSLog activityMonitor](&OBJC_CLASS___IMIDSLog, "activityMonitor"));
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412546;
            uint64_t v40 = v10;
            v41 = 2112;
            uint64_t v42 = v15;
            _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Found a non-string activity monitor entitlement value -- failing creation of IDSDXPCActivityMonitor collab orator {connection: %@, activityMonitorEntitlementValue: %@}",  buf,  0x16u);
          }

          uint64_t v25 = 0LL;
          uint64_t v9 = v33;
          self = v32;
          goto LABEL_23;
        }
      }

      __int16 v18 = [v15 countByEnumeratingWithState:&v35 objects:v45 count:16];
      if (v18) {
        continue;
      }
      break;
    }
  }

  v34.receiver = v32;
  v34.super_class = (Class)&OBJC_CLASS___IDSDXPCActivityMonitor;
  id v23 = -[IDSDXPCActivityMonitor init](&v34, "init");
  uint64_t v9 = v33;
  if (v23)
  {
    __int16 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMIDSLog activityMonitor](&OBJC_CLASS___IMIDSLog, "activityMonitor"));
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218498;
      uint64_t v40 = v23;
      v41 = 2112;
      uint64_t v42 = v15;
      v43 = 2112;
      v44 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Created XPCActivityMonitor {self: %p, activityMonitorEntitlementValue: %@, connection: %@}",  buf,  0x20u);
    }

    objc_storeStrong((id *)&v23->_queue, a3);
    objc_storeStrong((id *)&v23->_activityMonitorEntitlements, v13);
    objc_storeStrong((id *)&v23->_stateManager, a5);
  }

  self = v23;
  uint64_t v25 = self;
LABEL_23:

  return v25;
}

      -[IDSRegistrationCenter _dequeuePendingRequestsIfNecessary](self, "_dequeuePendingRequestsIfNecessary");
      goto LABEL_23;
    }

    if (-[IDSRegistrationCenter _checkOverRegistrations](self, "_checkOverRegistrations"))
    {
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
      if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT)) {
        sub_1006A41F4();
      }

      v47[0] = _NSConcreteStackBlock;
      v47[1] = 3221225472LL;
      v47[2] = sub_100215E28;
      v47[3] = &unk_1008F6010;
      v47[4] = self;
      im_dispatch_after_primary_queue(v47, 120.0);
    }

    else if (-[IDSRegistrationCenter _hasOngoingAuthentications](self, "_hasOngoingAuthentications"))
    {
      __int16 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "*** We have an ongoing authentication, deferring register",  buf,  2u);
      }

      v46[0] = _NSConcreteStackBlock;
      v46[1] = 3221225472LL;
      v46[2] = sub_100215E30;
      v46[3] = &unk_1008F6010;
      v46[4] = self;
      im_dispatch_after_primary_queue(v46, 2.0);
    }

    else
    {
      -[IDSRegistrationCenter _shouldDisableSecondaryRegistration](self, "_shouldDisableSecondaryRegistration");
      id v19 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCTAdapter sharedInstance](&OBJC_CLASS___IDSCTAdapter, "sharedInstance"));
      v37 = [v19 hasMultipleSIMs];

      id v20 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCTAdapter sharedInstance](&OBJC_CLASS___IDSCTAdapter, "sharedInstance"));
      uint64_t v36 = [v20 dualSIMCapabilityEnabled];

      id v21 = (void *)objc_claimAutoreleasedReturnValue(+[FTUserConfiguration sharedInstance](&OBJC_CLASS___FTUserConfiguration, "sharedInstance"));
      v35 = [v21 isDeviceInDualPhoneIdentityMode];

      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringGUID](&OBJC_CLASS___NSString, "stringGUID"));
      uint64_t v34 = objc_alloc_init(&OBJC_CLASS___IDSRegistrationMessage);
      id v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Sending IDS %@",  v5));
      sub_10012E874(0, @"Registration", v23, 0LL);

      __int16 v24 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationController sharedInstance]( &OBJC_CLASS___IDSRegistrationController,  "sharedInstance"));
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 activeRegistrationsToRegister]);
      uint64_t v26 = [v25 _copyForEnumerating];

      -[NSMutableArray addObjectsFromArray:](self->_currentRegistrations, "addObjectsFromArray:", v26);
      uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Constructing client data objects", buf, 2u);
      }

      v28 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeyManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeyManager,  "sharedInstance"));
      unsigned __int8 v29 = (void *)objc_claimAutoreleasedReturnValue( +[IDSKeyTransparencyVerifier sharedInstance]( &OBJC_CLASS___IDSKeyTransparencyVerifier,  "sharedInstance"));
      unsigned __int8 v30 = (void *)objc_claimAutoreleasedReturnValue( +[IDSClientDataGenerator clientDatasForRegistrations:keyStore:keyTransparencyVerifier:]( &OBJC_CLASS___IDSClientDataGenerator,  "clientDatasForRegistrations:keyStore:keyTransparencyVerifier:",  v26,  v28,  v29));

      v38[0] = _NSConcreteStackBlock;
      v38[1] = 3221225472LL;
      v38[2] = sub_100215E38;
      v38[3] = &unk_1008FE2B0;
      v38[4] = self;
      v31 = v26;
      id v39 = v31;
      v44 = (v36 | v37) & v35;
      v32 = v34;
      uint64_t v40 = v32;
      v33 = v22;
      v41 = v33;
      uint64_t v42 = (__CFString *)v5;
      v43 = (__CFString *)v6;
      uint64_t v45 = v3;
      [v30 registerResultBlock:v38];
    }
  }

  else
  {
    __int16 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Waiting for setup/first unlock to complete before sending registration message -- deferring registration",  buf,  2u);
    }

    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472LL;
    v48[2] = sub_100215E20;
    v48[3] = &unk_1008F6010;
    v48[4] = self;
    im_dispatch_after_primary_queue(v48, 60.0);
  }

LABEL_23:
    __int16 v16 = 0;
    goto LABEL_24;
  }

  if (([v4 canSendRegistration] & 1) == 0)
  {
    __int16 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v22 = v4;
      uint64_t v15 = "Not registering, not able to register: %@";
      goto LABEL_21;
    }

    goto LABEL_22;
  }

  uint64_t v7 = [v4 stopAtAuthentication];
  if (v4) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 1;
  }
  if ((v8 & 1) != 0) {
    goto LABEL_23;
  }
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v22 = v4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending registration for %@", buf, 0xCu);
  }

  queuedRegistrations = self->_queuedRegistrations;
  if (!queuedRegistrations)
  {
    uint64_t v11 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v12 = self->_queuedRegistrations;
    self->_queuedRegistrations = v11;

    queuedRegistrations = self->_queuedRegistrations;
  }

  if (-[NSMutableArray containsObject:](queuedRegistrations, "containsObject:", v4))
  {
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v22 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Updating registration to the queue (replacing existing): %@",  buf,  0xCu);
    }

    -[NSMutableArray removeObject:](self->_queuedRegistrations, "removeObject:", v4);
  }

  else
  {
    __int16 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v22 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Adding registration to the queue: %@",  buf,  0xCu);
    }
  }

  -[NSMutableArray addObject:](self->_queuedRegistrations, "addObject:", v4);
  -[CUTDeferredTaskQueue enqueueExecutionWithTarget:afterDelay:]( self->_sendRegistrationTask,  "enqueueExecutionWithTarget:afterDelay:",  self,  3.0);
  __int16 v16 = 1;
LABEL_24:
  os_activity_scope_leave(&state);
  cut_arc_os_release(&v20);

  return v16;
}

            __int16 v16 = v24;
          }
        }

        else
        {
          LOBYTE(v14) = 1;
        }
      }

      else
      {
        LOBYTE(v14) = 0;
      }
    }
  }

  else
  {
    LOBYTE(v14) = 1;
  }

  return (char)v14;
}

        close(v5);
LABEL_23:
        IDSCheckFileDescriptorUsageWithSource("IDSUTunController.m", 7184LL, 0LL);
        return;
      }

      if (!v11) {
        goto LABEL_22;
      }
      *(_DWORD *)id v19 = 136315138;
      *(void *)id v20 = a1;
      uint64_t v12 = "Cannot set interface state to available for %s on disconnect";
    }

    uint64_t v13 = v10;
    __int16 v14 = 12;
    goto LABEL_21;
  }

  uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v16 = "<null>";
    if (a1) {
      __int16 v16 = a1;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Cannot use invalid interface name [%s]",  buf,  0xCu);
  }
}

    __int16 v24 = 0;
    goto LABEL_23;
  }

  __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:@"start-count"]);
  id v19 = (uint64_t)[v18 integerValue];

  if (v19 < 5) {
    goto LABEL_22;
  }
  id v20 = OSLogHandleForTransportCategory("DevicePolicy");
  id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v32 = 10800.0 - v17;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "blackout due to repeated fairplay failure (blackout ending in %0.6lf seconds)",  buf,  0xCu);
  }

  id v23 = os_log_shim_legacy_logging_enabled(v22);
  if ((_DWORD)v23)
  {
    if (_IDSShouldLogTransport(v23))
    {
      _IDSLogTransport( @"DevicePolicy",  @"IDS",  @"blackout due to repeated fairplay failure (blackout ending in %0.6lf seconds)");
      if (_IDSShouldLog(0LL, @"DevicePolicy")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"DevicePolicy",  @"blackout due to repeated fairplay failure (blackout ending in %0.6lf seconds)");
      }
    }
  }

  __int16 v24 = 1;
LABEL_23:

  os_unfair_lock_unlock(p_lock);
  return v24;
}

          goto LABEL_23;
        }

        uint64_t v25 = v15;
        uint64_t v26 = v14;
      }

      __int16 v16 = (void *)objc_claimAutoreleasedReturnValue(-[IDSKeyTransparencyEntry signedData](self, "signedData"));
      id v17 = (void *)objc_claimAutoreleasedReturnValue(-[IDSKeyTransparencyEntry signedData](v6, "signedData"));
      __int16 v18 = [v16 isEqualToData:v17];
      if ((v18 & 1) != 0
        || (id v19 = objc_claimAutoreleasedReturnValue(-[IDSKeyTransparencyEntry signedData](self, "signedData")),
            id v20 = objc_claimAutoreleasedReturnValue(-[IDSKeyTransparencyEntry signedData](v6, "signedData")),
            __int16 v24 = (void *)v19,
            id v21 = (void *)v19,
            id v3 = (void *)v20,
            [v21 isEqual:v20]))
      {
        uint64_t v22 = -[IDSKeyTransparencyEntry ktCapable](self, "ktCapable");
        uint64_t v11 = v22 ^ -[IDSKeyTransparencyEntry ktCapable](v6, "ktCapable") ^ 1;
        if ((v18 & 1) != 0)
        {
LABEL_19:

          uint64_t v15 = v25;
          __int16 v14 = v26;
          if (v12 == v13) {
            goto LABEL_21;
          }
          goto LABEL_20;
        }
      }

      else
      {
        LOBYTE(v11) = 0;
      }

      goto LABEL_19;
    }

    LOBYTE(v11) = 0;
  }

    uint64_t v22 = (v27 - 1) & v27;
    uint64_t v25 = __clz(__rbit64(v27)) + (v18 << 6);
LABEL_5:
    sub_1003F5FC8( *(void *)(a1 + 48) + *(void *)(v4 + 72) * v25,  (uint64_t)v17,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    sub_1003F600C((uint64_t)v17, (uint64_t)v8, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    sub_10041AC80((uint64_t)v12, (uint64_t)v8);
    result = sub_1003F6050((uint64_t)v12, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
  }

  v28 = v26 + 4;
  if (v28 >= v23)
  {
LABEL_23:
    swift_release(a1);
    return v30;
  }

  uint64_t v27 = *(void *)(v29 + 8 * v28);
  if (v27)
  {
    __int16 v18 = v28;
    goto LABEL_22;
  }

  while (1)
  {
    __int16 v18 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v18 >= v23) {
      goto LABEL_23;
    }
    uint64_t v27 = *(void *)(v29 + 8 * v18);
    ++v28;
    if (v27) {
      goto LABEL_22;
    }
  }

    uint64_t v26 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
    uint64_t v27 = -1LL << *(_BYTE *)(v2 + 32);
    v28 = v26 & ~v27;
    if (((*(void *)(v16 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v28) & 1) == 0) {
      goto LABEL_13;
    }
    sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
    unsigned __int8 v29 = *(id *)(*(void *)(v2 + 48) + 8 * v28);
    unsigned __int8 v30 = static NSObject.== infix(_:_:)(v29, v19);

    if ((v30 & 1) != 0) {
      break;
    }
    v31 = ~v27;
    while (1)
    {
      v28 = (v28 + 1) & v31;
      if (((*(void *)(v16 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v28) & 1) == 0) {
        break;
      }
      v32 = *(id *)(*(void *)(v2 + 48) + 8 * v28);
      v33 = static NSObject.== infix(_:_:)(v32, v19);

      if ((v33 & 1) != 0) {
        goto LABEL_50;
      }
    }

  __int16 v24 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  uint64_t v25 = (void *)(*(void *)(v24 + 48) + 16 * a3);
  *uint64_t v25 = a1;
  v25[1] = a2;
  uint64_t v26 = *(void *)(v24 + 16);
  uint64_t v27 = __OFADD__(v26, 1LL);
  v28 = v26 + 1;
  if (v27) {
    __break(1u);
  }
  else {
    *(void *)(v24 + 16) = v28;
  }
}

    uint64_t v26 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
    uint64_t v27 = -1LL << *(_BYTE *)(v2 + 32);
    v28 = v26 & ~v27;
    if (((*(void *)(v16 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v28) & 1) == 0) {
      goto LABEL_13;
    }
    type metadata accessor for IDSGroupEncryptionControllerMember();
    unsigned __int8 v29 = *(id *)(*(void *)(v2 + 48) + 8 * v28);
    unsigned __int8 v30 = static NSObject.== infix(_:_:)(v29, v19);

    if ((v30 & 1) != 0) {
      break;
    }
    v31 = ~v27;
    while (1)
    {
      v28 = (v28 + 1) & v31;
      if (((*(void *)(v16 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v28) & 1) == 0) {
        break;
      }
      v32 = *(id *)(*(void *)(v2 + 48) + 8 * v28);
      v33 = static NSObject.== infix(_:_:)(v32, v19);

      if ((v33 & 1) != 0) {
        goto LABEL_50;
      }
    }

    id v20 = (v25 - 1) & v25;
    id v23 = __clz(__rbit64(v25)) + (v16 << 6);
LABEL_5:
    sub_1003F5FC8( *(void *)(a1 + 48) + *(void *)(v2 + 72) * v23,  (uint64_t)v15,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    sub_1003F600C((uint64_t)v15, (uint64_t)v6, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    sub_10041AC80((uint64_t)v10, (uint64_t)v6);
    result = sub_1003F6050((uint64_t)v10, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
  }

  uint64_t v26 = v24 + 4;
  if (v26 >= v21) {
    return swift_release(a1);
  }
  uint64_t v25 = *(void *)(v28 + 8 * v26);
  if (v25)
  {
    __int16 v16 = v26;
    goto LABEL_22;
  }

  while (1)
  {
    __int16 v16 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v16 >= v21) {
      return swift_release(a1);
    }
    uint64_t v25 = *(void *)(v28 + 8 * v16);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }

    unsigned __int8 v30 = (v35 - 1) & v35;
    v33 = __clz(__rbit64(v35)) + (v26 << 6);
LABEL_23:
    sub_1003F5FC8( *(void *)(v25 + 48) + *((void *)v64 + 9) * v33,  (uint64_t)v20,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    sub_1003F600C((uint64_t)v20, (uint64_t)v16, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    v37 = sub_10043A878();
    uint64_t v38 = [v37 dictionaryRepresentation];

    if (v38)
    {
      id v39 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v38,  &type metadata for AnyHashable,  v61,  &protocol witness table for AnyHashable);

      if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0) {
        v31 = sub_100494200(0LL, v31[2] + 1LL, 1, v31);
      }
      v1 = v31[2];
      uint64_t v40 = v31[3];
      if (v1 >= v40 >> 1) {
        v31 = sub_100494200((void *)(v40 > 1), v1 + 1, 1, v31);
      }
      v31[2] = v1 + 1;
      v31[v1 + 4] = v39;
    }

    sub_1003F6050((uint64_t)v16, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
  }

  uint64_t v36 = v34 + 3;
  if (v36 < v63)
  {
    v35 = *(void *)(v62 + 8 * v36);
    if (!v35)
    {
      while (1)
      {
        uint64_t v26 = v36 + 1;
        if (__OFADD__(v36, 1LL)) {
          break;
        }
        if (v26 >= v63) {
          goto LABEL_28;
        }
        v35 = *(void *)(v62 + 8 * v26);
        ++v36;
        if (v35) {
          goto LABEL_22;
        }
      }

    uint64_t v26 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
    uint64_t v27 = -1LL << *(_BYTE *)(v2 + 32);
    v28 = v26 & ~v27;
    if (((*(void *)(v16 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v28) & 1) == 0) {
      goto LABEL_13;
    }
    sub_10041D3C4(0LL, (unint64_t *)&qword_1009BBE30, &OBJC_CLASS___IDSPushToken_ptr);
    unsigned __int8 v29 = *(id *)(*(void *)(v2 + 48) + 8 * v28);
    unsigned __int8 v30 = static NSObject.== infix(_:_:)(v29, v19);

    if ((v30 & 1) != 0) {
      break;
    }
    v31 = ~v27;
    while (1)
    {
      v28 = (v28 + 1) & v31;
      if (((*(void *)(v16 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v28) & 1) == 0) {
        break;
      }
      v32 = *(id *)(*(void *)(v2 + 48) + 8 * v28);
      v33 = static NSObject.== infix(_:_:)(v32, v19);

      if ((v33 & 1) != 0) {
        goto LABEL_50;
      }
    }

    uint64_t v9 = (v14 - 1) & v14;
    uint64_t v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_5:
    sub_1004ADAA8( (Swift::Int *)v16,  *(id *)(*(void *)(a1 + 56) + 8 * v12),  type metadata accessor for IDSGroupEncryptionControllerParticipant,  (uint64_t *)&unk_1009B97D0);
  }

  uint64_t v15 = v13 + 4;
  if (v15 >= v10)
  {
LABEL_23:
    swift_release(a1);
    return;
  }

  __int16 v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
    id v5 = v15;
    goto LABEL_22;
  }

  while (1)
  {
    id v5 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_23;
    }
    __int16 v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_22;
    }
  }

    uint64_t v7 = (v15 - 1) & v15;
    uint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    uint64_t v11 = *(void **)(*(void *)(v2 + 56) + 8 * v10);
    uint64_t v12 = *(void (**)(void))((swift_isaMask & *v11) + 0x1C8LL);
    uint64_t v13 = v11;
    v12();
  }

  __int16 v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release(v2);
    return;
  }

  uint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    id v3 = v16;
    goto LABEL_22;
  }

  while (1)
  {
    id v3 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    uint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }

    uint64_t v8 = (v16 - 1) & v16;
    uint64_t v11 = __clz(__rbit64(v16)) + (v4 << 6);
LABEL_5:
    uint64_t v12 = *(void **)(*(void *)(v3 + 56) + 8 * v11);
    uint64_t v13 = *(void (**)(void))((swift_isaMask & *v12) + 0x1D8LL);
    __int16 v14 = v12;
    v13();
  }

  id v17 = v15 + 4;
  if (v17 >= v9)
  {
LABEL_23:
    swift_release(v3);
    (*(void (**)(void))((swift_isaMask & *v1) + 0x220LL))(0LL);
    return;
  }

  __int16 v16 = *(void *)(v5 + 8 * v17);
  if (v16)
  {
    id v4 = v17;
    goto LABEL_22;
  }

  while (1)
  {
    id v4 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v4 >= v9) {
      goto LABEL_23;
    }
    __int16 v16 = *(void *)(v5 + 8 * v4);
    ++v17;
    if (v16) {
      goto LABEL_22;
    }
  }

    uint64_t v7 = (v15 - 1) & v15;
    uint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    uint64_t v11 = *(void **)(*(void *)(v2 + 56) + 8 * v10);
    uint64_t v12 = *(void (**)(void))((swift_isaMask & *v11) + 0x220LL);
    uint64_t v13 = v11;
    v12();
  }

  __int16 v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release(v2);
    return;
  }

  uint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    id v3 = v16;
    goto LABEL_22;
  }

  while (1)
  {
    id v3 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    uint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }

    uint64_t v7 = (v15 - 1) & v15;
    uint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    uint64_t v11 = *(void **)(*(void *)(v2 + 56) + 8 * v10);
    uint64_t v12 = *(void (**)(void))((swift_isaMask & *v11) + 0x1D0LL);
    uint64_t v13 = v11;
    v12();
  }

  __int16 v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release(v2);
    return;
  }

  uint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    id v3 = v16;
    goto LABEL_22;
  }

  while (1)
  {
    id v3 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    uint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }

    uint64_t v7 = (v15 - 1) & v15;
    uint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    uint64_t v11 = *(void **)(*(void *)(v2 + 56) + 8 * v10);
    uint64_t v12 = *(void (**)(void))((swift_isaMask & *v11) + 0x268LL);
    uint64_t v13 = v11;
    v12();
  }

  __int16 v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release(v2);
    return;
  }

  uint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    id v3 = v16;
    goto LABEL_22;
  }

  while (1)
  {
    id v3 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    uint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }

    v242 = (os_log_t)((v83 - 1) & v83);
    v245 = v84;
    v80 = __clz(__rbit64(v83)) + ((void)v84 << 6);
LABEL_23:
    v86 = v236;
    sub_1003F5FC8( *(void *)(v241 + 48) + *(void *)(v25 + 72) * v80,  v236,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    sub_1004C77E4(v86, v68);
    v87 = *(_DWORD *)(v68 + *(int *)(v24 + 40));
    if (v87 == -1) {
      goto LABEL_106;
    }
    sub_10043AFC0(v87 + 1, v23);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v25 + 48))(v23, 1LL, v24) == 1)
    {
      sub_10040A274((uint64_t)v23, &qword_1009B8E08);
      uint64_t v88 = (uint64_t)v227;
      v89 = sub_1003F5FC8(v68, (uint64_t)v227, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
      v91 = static os_log_type_t.default.getter(v90);
      if (os_log_type_enabled(v90, v91))
      {
        v92 = swift_slowAlloc(22LL, -1LL);
        v225 = swift_slowAlloc(64LL, -1LL);
        v253 = v225;
        *(_DWORD *)v92 = v229.n128_u32[0];
        v252 = (os_log_t)sub_1003FFBB0(0x4B74656863746172LL, 0xED00002928737965LL, &v253);
        uint64_t v93 = v226;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, v226, v92 + 4, v92 + 12);
        *(_WORD *)(v92 + 12) = 2080;
        uint64_t v94 = sub_10040A2B0( &qword_1009B90F0,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718F00);
        __int16 v24 = v247;
        v95 = dispatch thunk of CustomStringConvertible.description.getter(v247, v94);
        uint64_t v97 = v96;
        v252 = (os_log_t)sub_1003FFBB0(v95, v96, &v253);
        v81 = v248;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, v93, v92 + 14, v92 + 22);
        swift_bridgeObjectRelease(v97);
        sub_1003F6050(v88, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        _os_log_impl( (void *)&_mh_execute_header,  v90,  v91,  "%s: ratchet failed for keyWithoutParticipantID: %s",  (uint8_t *)v92,  0x16u);
        uint64_t v98 = v225;
        swift_arrayDestroy(v225, 2LL, v220);
        swift_slowDealloc(v98, -1LL, -1LL);
        v99 = v92;
        id v4 = v244;
        swift_slowDealloc(v99, -1LL, -1LL);
      }

      else
      {

        sub_1003F6050(v88, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        __int16 v24 = v247;
      }

      v68 = (uint64_t)v233;
      v75 = v239;
      (*(void (**)(uint64_t, char *, uint64_t))(v81 + 16))(v239, &v233[*(int *)(v24 + 20)], v4);
      v76 = v237;
      sub_1003F5FC8(v68, v237, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v66);
      v253 = (uint64_t)v66;
      sub_1004C5554(v76, v75, isUniquelyReferenced_nonNull_native);
      id v66 = (os_log_t)v253;
      swift_bridgeObjectRelease(0x8000000000000000LL);
      (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v75, v4);
      uint64_t v78 = v238;
      sub_1003F5FC8(v68, v238, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      sub_100400D68(v76, v78);
      v79 = v76;
      uint64_t v25 = v246;
    }

    else
    {
      uint64_t v100 = v235;
      sub_1004C77E4((uint64_t)v23, v235);
      v101 = (uint64_t)v228;
      v102 = sub_1003F5FC8(v100, (uint64_t)v228, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      unsigned int v103 = (os_log_s *)Logger.logObject.getter(v102);
      v104 = static os_log_type_t.default.getter(v103);
      if (os_log_type_enabled(v103, v104))
      {
        v105 = swift_slowAlloc(22LL, -1LL);
        v225 = swift_slowAlloc(64LL, -1LL);
        v253 = v225;
        *(_DWORD *)v105 = v229.n128_u32[0];
        v252 = (os_log_t)sub_1003FFBB0(0x4B74656863746172LL, 0xED00002928737965LL, &v253);
        v106 = v226;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, v226, v105 + 4, v105 + 12);
        *(_WORD *)(v105 + 12) = 2080;
        v107 = sub_10040A2B0( &qword_1009B90F0,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718F00);
        v108 = v247;
        v109 = dispatch thunk of CustomStringConvertible.description.getter(v247, v107);
        id v111 = v110;
        v252 = (os_log_t)sub_1003FFBB0(v109, v110, &v253);
        v81 = v248;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, v106, v105 + 14, v105 + 22);
        swift_bridgeObjectRelease(v111);
        sub_1003F6050(v101, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        _os_log_impl( (void *)&_mh_execute_header,  v103,  v104,  "%s: ratchet to new remote keyWithoutParticipantID: %s",  (uint8_t *)v105,  0x16u);
        v112 = v225;
        swift_arrayDestroy(v225, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v112, -1LL, -1LL);
        v113 = v105;
        id v4 = v244;
        swift_slowDealloc(v113, -1LL, -1LL);
      }

      else
      {

        sub_1003F6050(v101, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        v108 = v247;
      }

      id v114 = v235;
      uint64_t v115 = v239;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v81 + 16))(v239, v235 + *(int *)(v108 + 20), v4);
      id v116 = v237;
      sub_1003F5FC8(v114, v237, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      v117 = swift_isUniquelyReferenced_nonNull_native(v66);
      v253 = (uint64_t)v66;
      sub_1004C5554(v116, v115, v117);
      id v66 = (os_log_t)v253;
      swift_bridgeObjectRelease(0x8000000000000000LL);
      (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v115, v4);
      v118 = v238;
      sub_1003F5FC8(v114, v238, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      sub_100400D68(v116, v118);
      sub_1003F6050(v116, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      v79 = v114;
      __int16 v24 = v108;
      uint64_t v25 = v246;
      v68 = (uint64_t)v233;
    }

    sub_1003F6050(v79, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    sub_1003F6050(v68, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    id v23 = v234;
    uint64_t v74 = v245;
    v72 = (unint64_t)v242;
  }

  v85 = (char *)v74 + 4;
  v83 = *(void *)&v231[8 * (void)v85];
  if (v83)
  {
    uint64_t v84 = (os_log_s *)((char *)v74 + 4);
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v84 = (os_log_s *)(v85 + 1);
    if (__OFADD__(v85, 1LL)) {
      goto LABEL_110;
    }
    v83 = *(void *)&v231[8 * (void)v84];
    ++v85;
    if (v83) {
      goto LABEL_22;
    }
  }

    id v20 = (v26 - 1) & v26;
    uint64_t v22 = __clz(__rbit64(v26)) + (v17 << 6);
LABEL_9:
    id v23 = *(void *)(v7 + 72) * v22;
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v11, *(void *)(v12 + 48) + v23, v6);
    __int16 v24 = *(void *)(v31 + 72) * v22;
    sub_1003F5FC8( *(void *)(v12 + 56) + v24,  (uint64_t)v4,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(void *)(v14 + 48) + v23, v11, v6);
    result = (void *)sub_1004C77E4((uint64_t)v4, *(void *)(v14 + 56) + v24);
  }

  uint64_t v27 = v25 + 2;
  if (v27 >= v30) {
    goto LABEL_23;
  }
  uint64_t v26 = *(void *)(v29 + 8 * v27);
  if (v26)
  {
    id v17 = v27;
    goto LABEL_22;
  }

  while (1)
  {
    id v17 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v17 >= v30) {
      goto LABEL_23;
    }
    uint64_t v26 = *(void *)(v29 + 8 * v17);
    ++v27;
    if (v26) {
      goto LABEL_22;
    }
  }

              uint64_t v13 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v9);
              uint64_t v15 = *v13;
              __int16 v14 = v13[1];
              Hasher.init(_seed:)(__s1, *(void *)(a1 + 40));
              sub_1004028CC(v15, v14);
              Data.hash(into:)(__s1, v15, v14);
              __int16 v16 = Hasher._finalize()() & ~(-1LL << *(_BYTE *)(a1 + 32));
              if (((*(void *)(v8 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0) {
                __asm { BR              X8 }
              }

              sub_100402A84(v15, v14);
              id v2 = 0LL;
              goto LABEL_25;
            }

            while (1)
            {
              uint64_t v11 = v12 + 1;
              if (__OFADD__(v12, 1LL)) {
                __break(1u);
              }
              if (v11 >= v18) {
                break;
              }
              uint64_t v10 = v19[v11];
              ++v12;
              if (v10) {
                goto LABEL_21;
              }
            }
          }
        }
      }
    }

    id v2 = 1LL;
    goto LABEL_25;
  }

  return 0LL;
}

        id v39 = (v12 - 1) & v12;
        v41 = v13;
        uint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
      }

      uint64_t v15 = (uint64_t *)(*(void *)(a4 + 48) + 16 * v10);
      id v17 = *v15;
      __int16 v16 = v15[1];
      Hasher.init(_seed:)(&__s1, *(void *)(a3 + 40));
      sub_1004028CC(v17, v16);
      Data.hash(into:)(&__s1, v17, v16);
      __int16 v18 = Hasher._finalize()() & ~(-1LL << *(_BYTE *)(a3 + 32));
      if (((*(void *)(v43 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v18) & 1) != 0) {
        __asm { BR              X8 }
      }

      sub_100402A84(v17, v16);
      uint64_t v9 = v39;
      uint64_t v6 = v41;
    }
  }

  id v19 = 0LL;
  uint64_t v34 = a3 + 56;
  id v20 = 1LL << *(_BYTE *)(a3 + 32);
  if (v20 < 64) {
    id v21 = ~(-1LL << v20);
  }
  else {
    id v21 = -1LL;
  }
  uint64_t v22 = v21 & *(void *)(a3 + 56);
  v37 = (unint64_t)(v20 + 63) >> 6;
  v44 = a4 + 56;
  while (1)
  {
    if (v22)
    {
      uint64_t v40 = (v22 - 1) & v22;
      uint64_t v42 = v19;
      id v23 = __clz(__rbit64(v22)) | (v19 << 6);
      goto LABEL_46;
    }

    __int16 v24 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_50:
      __break(1u);
      JUMPOUT(0x100506BF8LL);
    }

    if (v24 >= v37) {
      goto LABEL_48;
    }
    uint64_t v25 = *(void *)(v34 + 8 * v24);
    uint64_t v26 = v19 + 1;
    if (!v25)
    {
      uint64_t v26 = v19 + 2;
      if (v19 + 2 >= v37) {
        goto LABEL_48;
      }
      uint64_t v25 = *(void *)(v34 + 8 * v26);
      if (!v25)
      {
        uint64_t v26 = v19 + 3;
        if (v19 + 3 >= v37) {
          goto LABEL_48;
        }
        uint64_t v25 = *(void *)(v34 + 8 * v26);
        if (!v25) {
          break;
        }
      }
    }

  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100016DF8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(result + 16))( result,  a2,  a5,  a6,  a7,  a8,  a9,  a10);
  }
  return result;
}

void sub_100017700(void *a1)
{
  if (!*(void *)(a1[4] + 24LL))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    uint64_t v3 = a1[4];
    id v4 = *(void **)(v3 + 24);
    *(void *)(v3 + 24) = Mutable;
  }

  id v5 = -[IDSPeerIDManagerEndpointQueryListener initWithQueryCompletionBlock:queue:]( objc_alloc(&OBJC_CLASS___IDSPeerIDManagerEndpointQueryListener),  "initWithQueryCompletionBlock:queue:",  a1[7],  a1[5]);
  [*(id *)(a1[4] + 24) setObject:v5 forKey:a1[6]];
}

void sub_100017910(uint64_t a1)
{
  if (![*(id *)(*(void *)(a1 + 32) + 24) count])
  {
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = *(void **)(v2 + 24);
    *(void *)(v2 + 24) = 0LL;
  }

uint64_t sub_100017C34(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100017C44(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) endpointsForURIs:*(void *)(a1 + 40) service:*(void *)(a1 + 48) fromURI:*(void *)(a1 + 56)]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100017CE8;
  v6[3] = &unk_1008F6358;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 64);
  id v4 = *(id *)(a1 + 72);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_100017CE8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

id sub_100018390(id a1, NSString *a2)
{
  uint64_t v2 = a2;
  if (-[NSString isEqualToString:](v2, "isEqualToString:", kFZServiceDefaultsSentinelAlias)
    || -[NSString isEqualToString:](v2, "isEqualToString:", kIDSServiceDefaultsSentinelSelfAlias))
  {
    uint64_t v3 = 0LL;
  }

  else
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", v2));
  }

  return v3;
}

void sub_1000195DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (([v5 isUserDisabled] & 1) == 0)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) restrictions]);
    if ([v7 shouldDisableService:v6])
    {
    }

    else
    {
      id v8 = [v5 registrationError];

      if (v8 == (id)2)
      {
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
          int v11 = 138412546;
          id v12 = v5;
          __int16 v13 = 2112;
          __int16 v14 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "After SIM insertion, user denied SMS registration found, changing error {accounts: %@, service: %@",  (uint8_t *)&v11,  0x16u);
        }

        [v5 _updateRegistrationStatusWithError:1 info:0];
      }
    }
  }
}

void sub_1000199E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100019A08(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  BOOL v7 = -[__CFString registrationError](v5, "registrationError") == (id)2
    || -[__CFString registrationError](v5, "registrationError") == (id)35
    || -[__CFString registrationError](v5, "registrationError") == (id)38
    || -[__CFString registrationError](v5, "registrationError") == (id)39
    || -[__CFString registrationError](v5, "registrationError") == (id)36;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) restrictions]);
  unsigned int v9 = [v8 shouldDisableService:v6];

  unsigned __int8 v10 = -[__CFString isUserDisabled](v5, "isUserDisabled");
  int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if ((v10 & 1) != 0 || (v9 & 1) != 0 || v7)
  {
    if (v12)
    {
      else {
        __int16 v14 = @"NO";
      }
      if (v9) {
        uint64_t v15 = @"YES";
      }
      else {
        uint64_t v15 = @"NO";
      }
      *(_DWORD *)buf = 138413058;
      id v19 = v14;
      __int16 v20 = 2112;
      id v21 = v15;
      __int16 v22 = 2048;
      id v23 = -[__CFString registrationError](v5, "registrationError");
      __int16 v24 = 2112;
      uint64_t v25 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Not enabling account after registration state changed {isUserDisabled: %@, shouldDisableService: %@, registratio nError: %ld, account: %@}",  buf,  0x2Au);
    }
  }

  else
  {
    if (v12)
    {
      __int16 v13 = (__CFString *)objc_claimAutoreleasedReturnValue([v6 identifier]);
      *(_DWORD *)buf = 138412546;
      id v19 = v5;
      __int16 v20 = 2112;
      id v21 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "After registration state changed, enabling account: %@ on service: %@",  buf,  0x16u);
    }

    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_100019C84;
    v16[3] = &unk_1008F5F80;
    v16[4] = *(void *)(a1 + 32);
    id v17 = v5;
    im_dispatch_after_primary_queue(v16, 0.0);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }
}

void sub_100019C84(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountController]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uniqueID]);
  [v3 enableAccountWithUniqueID:v2];
}

void sub_10001A2CC(uint64_t a1)
{
  id v2 = +[NRDeviceIdentifier newDeviceIdentifierWithBluetoothUUID:]( &OBJC_CLASS___NRDeviceIdentifier,  "newDeviceIdentifierWithBluetoothUUID:",  *(void *)(a1 + 32));
  id v3 = objc_alloc(&OBJC_CLASS___NRDeviceMonitor);
  id v5 = *(void **)(a1 + 40);
  id v4 = (id *)(a1 + 40);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 nrMonitorQueue]);
  BOOL v7 = -[NRDeviceMonitor initWithDeviceIdentifier:delegate:queue:]( v3,  "initWithDeviceIdentifier:delegate:queue:",  v2,  v5,  v6);
  [*v4 setNrDeviceMonitor:v7];

  id v8 = (void *)objc_claimAutoreleasedReturnValue([*v4 nrDeviceMonitor]);
  unsigned int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IPsecLink](&OBJC_CLASS___IDSFoundationLog, "IPsecLink"));
  unsigned __int8 v10 = v9;
  if (v8)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = (void *)objc_claimAutoreleasedReturnValue([*v4 nrDeviceMonitor]);
      BOOL v12 = (void *)objc_claimAutoreleasedReturnValue([v11 deviceIdentifier]);
      id v13 = *v4;
      int v14 = 138412546;
      uint64_t v15 = v12;
      __int16 v16 = 2048;
      id v17 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "NRDeviceMonitor created {deviceIdentifier: %@, pointer: %p}",  (uint8_t *)&v14,  0x16u);
    }
  }

  else if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    sub_100694028((uint64_t *)v4, v10);
  }
}

id sub_10001A6F0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 nrDeviceBridge:*(void *)(a1 + 32) defaultPeerConnectivityDidChange:*(unsigned __int8 *)(a1 + 40)];

  return _[*(id *)(a1 + 32) _notifyIDSNanoRegistryPluginManagerOnWatch:*(unsigned __int8 *)(a1 + 40)];
}

void sub_10001A8A8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 nrDeviceBridge:*(void *)(a1 + 32) defaultPeerNearbyDidChange:*(unsigned __int8 *)(a1 + 40)];
}

void sub_10001AA60(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 nrDeviceBridge:*(void *)(a1 + 32) defaultPeerCloudConnectivityDidChange:*(unsigned __int8 *)(a1 + 40)];
}

void sub_10001AC1C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 nrDeviceBridge:*(void *)(a1 + 32) deviceMagnetIndicationOfAwakeStateDidChange:*(unsigned __int8 *)(a1 + 40)];
}

void sub_10001AE60(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 nrDeviceBridge:*(void *)(a1 + 32) linkType:*(unsigned __int8 *)(a1 + 40)];
}

void sub_10001B018(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 nrDeviceBridge:*(void *)(a1 + 32) defaultPeerClassCConnectivityDidChange:*(unsigned __int8 *)(a1 + 40)];
}

void sub_10001B5A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_10001B5D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
    dispatch_assert_queue_V2(v5);

    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog query](&OBJC_CLASS___IDSFoundationLog, "query"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v11 = 138412546;
      uint64_t v12 = v7;
      __int16 v13 = 2112;
      id v14 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Received endpoints for initial subscription state {self: %@, endpoints: %@}",  (uint8_t *)&v11,  0x16u);
    }

    [WeakRetained _registerEndpointQueryCompletionBlock];
    id v8 = [v3 mutableCopy];
    [WeakRetained setEndpointMap:v8];

    uint64_t v9 = *(void *)(a1 + 40);
    unsigned __int8 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) resolvedEndpoints]);
    (*(void (**)(uint64_t, void *, void))(v9 + 16))(v9, v10, 0LL);
  }
}

void sub_10001B93C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10001B960(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v10 = a3;
  id v6 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v8 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
    dispatch_assert_queue_V2(v9);

    [v8 _noteSourceDidDiscoverEndpointMap:v6 forLocalURI:v10];
  }
}

void sub_10001BDDC(id a1)
{
  v1 = objc_alloc_init(&OBJC_CLASS___IDSPublicIdentityCache);
  id v2 = (void *)qword_1009BE5A8;
  qword_1009BE5A8 = (uint64_t)v1;
}

void sub_10001C158(id a1, BOOL a2, NSError *a3)
{
  BOOL v3 = a2;
  id v4 = a3;
  uint64_t v5 = OSLogHandleForIDSCategory("IDSPublicIdentityCache");
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = @"NO";
    if (v3) {
      uint64_t v7 = @"YES";
    }
    *(_DWORD *)buf = 138412546;
    id v10 = v7;
    __int16 v11 = 2112;
    uint64_t v12 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Saved public identity data to SwiftData DB { success: %@ saveError: %@ }",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v8)
    && _IDSShouldLog(0LL, @"IDSPublicIdentityCache"))
  {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSPublicIdentityCache",  @"Saved public identity data to SwiftData DB { success: %@ saveError: %@ }");
  }
}

void sub_10001CC24(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if (v5 || (a2 & 1) == 0)
  {
    uint64_t v6 = OSLogHandleForIDSCategory("IDSPublicIdentityCache");
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412802;
      uint64_t v12 = v8;
      __int16 v13 = 2112;
      uint64_t v14 = v9;
      __int16 v15 = 2112;
      id v16 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Failed to delete public identities with startDate: %@ endDate: %@ {deleteError: %@}",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v10)
      && _IDSShouldLog(0LL, @"IDSPublicIdentityCache"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSPublicIdentityCache",  @"Failed to delete public identities with startDate: %@ endDate: %@ {deleteError: %@}");
    }
  }
}

LABEL_26:
      id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](&OBJC_CLASS___NSSet, "set", v29, v30));
      goto LABEL_27;
    }
  }

  else
  {
    __int16 v15 = (void *)objc_claimAutoreleasedReturnValue(-[IDSKVStore storedKeysAfterDate:error:](self->_kvStore, "storedKeysAfterDate:error:", v9, a5));
    __int16 v11 = v15;
    if (!v15 || ![v15 count])
    {
      uint64_t v25 = OSLogHandleForIDSCategory("IDSPublicIdentityCache");
      uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        uint64_t v34 = v8;
        v35 = 2112;
        uint64_t v36 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Found no recent URIs for service: %@ in last resort cache since date %@",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v27)
        && _IDSShouldLog(0LL, @"IDSPublicIdentityCache"))
      {
        unsigned __int8 v29 = v8;
        unsigned __int8 v30 = v9;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSPublicIdentityCache",  @"Found no recent URIs for service: %@ in last resort cache since date %@");
      }

      goto LABEL_26;
    }

    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472LL;
    v31[2] = sub_10001D180;
    v31[3] = &unk_1008F64D0;
    v32 = v8;
    id v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "__imArrayByApplyingBlock:", v31));

    __int16 v11 = (void *)v16;
  }

  id v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "__imArrayByFilteringWithBlock:", &stru_1008F6510));
  __int16 v18 = (void *)v17;
  id v19 = &__NSArray0__struct;
  if (v17) {
    id v19 = (void *)v17;
  }
  __int16 v20 = v19;

  id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v20));
  __int16 v22 = OSLogHandleForIDSCategory("IDSPublicIdentityCache");
  id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412802;
    uint64_t v34 = v8;
    v35 = 2112;
    uint64_t v36 = v9;
    v37 = 2112;
    uint64_t v38 = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Fetched recent URIs for service: %@ in last resort cache since date %@ { URIs: %@ }",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v24)
    && _IDSShouldLog(0LL, @"IDSPublicIdentityCache"))
  {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSPublicIdentityCache",  @"Fetched recent URIs for service: %@ in last resort cache since date %@ { URIs: %@ }");
  }

LABEL_27:
  return v21;
}

  -[NSRecursiveLock unlock](self->_lock, "unlock");
}

    LOBYTE(a_Block_object_dispose(va, 8) = 1;
    goto LABEL_35;
  }

  unsigned __int8 v30 = OSLogHandleForIDSCategory("IDSKeychainWrapper");
  v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "  => Will clear keychain cache", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled(v32)
    && _IDSShouldLog(0LL, @"IDSKeychainWrapper"))
  {
    _IDSLogV(0LL, @"IDSFoundation", @"IDSKeychainWrapper", @"  => Will clear keychain cache");
  }

  if ((IMRemoveKeychainData(IDSKeychainServiceName, v16, &v42) & 1) != 0) {
    goto LABEL_26;
  }
  v33 = OSLogHandleForIDSCategory("IDSKeychainWrapper");
  uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    id v48 = v16;
    id v49 = 1024;
    id v50 = v42;
    _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "  => Failed removing keychain data for account %@ (error: %d)",  buf,  0x12u);
  }

  if (os_log_shim_legacy_logging_enabled(v35)
    && _IDSShouldLog(0LL, @"IDSKeychainWrapper"))
  {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSKeychainWrapper",  @"  => Failed removing keychain data for account %@ (error: %d)");
  }

  if (a8)
  {
    v43 = @"IDSKeychainWrapperErrorOSStatus";
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v42));
    v44 = v27;
    v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v44,  &v43,  1LL));
    unsigned __int8 v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSKeychainWrapperErrorDomain",  -2000LL,  v28));
    goto LABEL_34;
  }

      -[IDSPeerAggregateMessage setIndividualPeerMessages:](self, "setIndividualPeerMessages:", v19);
    }
  }
}
}

  if (v17) {
    *a5 = v17;
  }
  if (v16) {
    *a4 = v16;
  }

  return v21;
}

    BOOL v3 = 1;
LABEL_27:

    goto LABEL_28;
  }

  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSOffGridStateManager](&OBJC_CLASS___IDSFoundationLog, "IDSOffGridStateManager"));
  if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v2,  OS_LOG_TYPE_DEFAULT,  "We already have a request in progress, should not reprovision.",  buf,  2u);
  }

  BOOL v3 = 0;
LABEL_28:

  return v3;
}

  os_activity_scope_leave(&state);
  cut_arc_os_release(&v26);
}

  return v7;
}

  id v51 = kIDSQRAllocateKey_IDSSessionID;
  id v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_IDSSessionID, v940, v983, v1026));
  v54 = objc_opt_class(&OBJC_CLASS___NSData, v53);
  v55 = objc_opt_isKindOfClass(v52, v54);

  uint64_t v56 = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v51]);
  v57 = v56;
  if ((v55 & 1) != 0)
  {
    IDSSessionID = self->_IDSSessionID;
    self->_IDSSessionID = v56;
LABEL_28:

    goto LABEL_35;
  }

  if (v57)
  {
    uint64_t v59 = OSLogHandleForIDSCategory("QRAllocator");
    id v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
    {
      __int128 v61 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v51]);
      __int128 v63 = (id)objc_opt_class(&OBJC_CLASS___NSData, v62);
      __int128 v64 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v51]);
      id v66 = (id)objc_opt_class(v64, v65);
      *(_DWORD *)buf = 138412802;
      v1070 = v61;
      v1071 = 2112;
      v1072 = v63;
      v1073 = 2112;
      v1074 = v66;
      _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v67))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        IDSSessionID = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v51]);
        v69 = objc_opt_class(&OBJC_CLASS___NSData, v68);
        uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v51]);
        v984 = v69;
        v1027 = objc_opt_class(v70, v71);
        v941 = IDSSessionID;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_28;
      }
    }
  }

  id v51 = (void *)objc_claimAutoreleasedReturnValue([v142 primaryRegistration]);
  id v52 = (void *)objc_claimAutoreleasedReturnValue([v51 dsHandle]);
  char v133 = (void *)objc_claimAutoreleasedReturnValue([v52 _stripFZIDPrefix]);

  id v53 = (void *)objc_claimAutoreleasedReturnValue([v142 service]);
  v54 = [v53 shouldRegisterUsingDSHandle];

  v55 = (void *)objc_claimAutoreleasedReturnValue([v142 service]);
  uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v55 identifier]);
  v57 = _IDSPrefersPhoneNumbersForServiceIdentifier(v56);

  __int128 v134 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKey:IDSSessionToIDKey]);
  v58 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKey:IDSGroupSessionMessagesCallerIDKey]);
  __int128 v136 = v58;
  if (v58)
  {
    uint64_t v59 = v58;
  }

  else
  {
    if (v134) {
      id v60 = objc_claimAutoreleasedReturnValue([v134 prefixedURI]);
    }
    else {
      id v60 = objc_claimAutoreleasedReturnValue([v142 displayName]);
    }
    __int128 v61 = (void *)v60;
    __int128 v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v142, "unprefixedURIStringsFromRegistration", v128, v130, v131));
    __int128 v63 = (void *)objc_claimAutoreleasedReturnValue([v142 pseudonyms]);
    uint64_t v59 = (id)_IDSCopyCallerIDWithSelfMessagingHint(v61, v62, v63, v133, v54, v57, v39);
  }

  __int128 v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v138, "identifier", v128));
  v65 = objc_claimAutoreleasedReturnValue( +[IDSURI URIWithUnprefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithUnprefixedURI:withServiceLoggingHint:",  v59,  v64));
  fromURI = v16->_fromURI;
  v16->_fromURI = (IDSURI *)v65;

  v67 = (void *)objc_claimAutoreleasedReturnValue([v142 unprefixedURIStringsFromRegistration]);
  v68 = (void *)objc_claimAutoreleasedReturnValue(-[IDSURI unprefixedURI](v16->_fromURI, "unprefixedURI"));
  v69 = [v67 containsObject:v68];

  uint64_t v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
  v71 = v70;
  if ((v69 & 1) != 0)
  {
    if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
    {
      v72 = v16->_uniqueID;
      uint64_t v73 = v16->_fromURI;
      accountID = v16->_accountID;
      v75 = (void *)objc_claimAutoreleasedReturnValue([v142 unprefixedURIStringsFromRegistration]);
      *(_DWORD *)buf = 138413314;
      v155 = (uint64_t)v72;
      v156 = 2112;
      v157 = (const __CFString *)v73;
      v158 = 2112;
      v159 = (uint64_t)v136;
      v160 = 2112;
      v161 = accountID;
      v162 = 2112;
      v163 = v75;
      _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEFAULT,  "Resolved IDSDSession fromID { sessionID: %@, fromID: %@, clientSpecifiedFromID: %@, accountID: %@, accountAliasStrings: %@ }",  buf,  0x34u);
    }
  }

  else if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
  {
    uint64_t v124 = v16->_uniqueID;
    __int128 v125 = v16->_fromURI;
    __int128 v126 = v16->_accountID;
    __int128 v127 = (void *)objc_claimAutoreleasedReturnValue([v142 unprefixedURIStringsFromRegistration]);
    *(_DWORD *)buf = 138413314;
    v155 = (uint64_t)v124;
    v156 = 2112;
    v157 = (const __CFString *)v125;
    v158 = 2112;
    v159 = (uint64_t)v136;
    v160 = 2112;
    v161 = v126;
    v162 = 2112;
    v163 = v127;
    _os_log_error_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_ERROR,  "Resolved IDSDSession fromID is not a valid selected alias on the account! This may cause messaging failures. { ses sionID: %@, fromID: %@, clientSpecifiedFromID: %@, accountID: %@, accountAliasStrings: %@ }",  buf,  0x34u);
  }

  v76 = (void *)objc_claimAutoreleasedReturnValue([v138 identifier]);
  if ([v76 isEqualToIgnoringCase:@"com.apple.private.alloy.phonecontinuity"])
  {
    uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue(+[IMLockdownManager sharedInstance](&OBJC_CLASS___IMLockdownManager, "sharedInstance"));
    uint64_t v78 = [v77 isInternalInstall];

    v79 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKey:v132]);
    v80 = v79 == 0LL;

    if (v80)
    {
      useBTDatagramPipe = 1;
      v16->_useBTDatagramPipe = 1;
    }

    else
    {
      useBTDatagramPipe = v16->_useBTDatagramPipe;
    }

    v16->_useBTDatagramPipe = IMGetDomainBoolForKeyWithDefaultValue( @"com.apple.ids",  @"useBTDatagramPipe",  useBTDatagramPipe != 0);
    uint64_t v93 = OSLogHandleForTransportCategory("IDSDSession");
    uint64_t v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);
    if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
    {
      v95 = (__CFString *)objc_claimAutoreleasedReturnValue(-[IDSDSessionSharedState uniqueID](v16, "uniqueID"));
      *(_DWORD *)buf = 138412546;
      v155 = (uint64_t)v76;
      v156 = 2112;
      v157 = v95;
      _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_DEFAULT,  "QuickRelay is disabled for service: %@, session: %@.",  buf,  0x16u);
    }

    uint64_t v97 = os_log_shim_legacy_logging_enabled(v96);
    if ((_DWORD)v97)
    {
      if (_IDSShouldLogTransport(v97))
      {
        __int128 v129 = v76;
        __int128 v130 = (__CFString *)objc_claimAutoreleasedReturnValue(-[IDSDSessionSharedState uniqueID](v16, "uniqueID"));
        _IDSLogTransport( @"IDSDSession",  @"IDS",  @"QuickRelay is disabled for service: %@, session: %@.");

        if (_IDSShouldLog(0LL, @"IDSDSession"))
        {
          uint64_t v98 = (__CFString *)objc_claimAutoreleasedReturnValue(-[IDSDSessionSharedState uniqueID](v16, "uniqueID", v76, v130));
          __int128 v129 = v76;
          __int128 v130 = v98;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"QuickRelay is disabled for service: %@, session: %@.");
        }
      }
    }

    v16->_connectionTimeout = 5.0;
  }

  else
  {
    v16->_enableQuickRelay = 1;
    v16->_connectionTimeout = 30.0;
    uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKey:IDSGroupSessionStartedAsUPlusOneKey]);
    v83 = [v82 BOOLValue];

    uint64_t v84 = OSLogHandleForTransportCategory("IDSDSession");
    v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
    if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
    {
      v86 = objc_claimAutoreleasedReturnValue(-[IDSDSessionSharedState uniqueID](v16, "uniqueID"));
      v87 = (void *)v86;
      uint64_t v88 = &stru_100912B50;
      *(_DWORD *)buf = 138412802;
      v155 = (uint64_t)v76;
      v156 = 2112;
      if (v83) {
        uint64_t v88 = @" (U+1)";
      }
      v157 = v88;
      v158 = 2112;
      v159 = v86;
      _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEFAULT,  "QuickRelay is enabled for service: %@%@, session: %@.",  buf,  0x20u);
    }

    uint64_t v90 = os_log_shim_legacy_logging_enabled(v89);
    if ((_DWORD)v90 && _IDSShouldLogTransport(v90))
    {
      v91 = v83 ? @" (U+1)" : &stru_100912B50;
      __int128 v130 = v91;
      __int128 v131 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSessionSharedState uniqueID](v16, "uniqueID"));
      __int128 v129 = v76;
      _IDSLogTransport( @"IDSDSession",  @"IDS",  @"QuickRelay is enabled for service: %@%@, session: %@.");

      if (_IDSShouldLog(0LL, @"IDSDSession"))
      {
        v92 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSessionSharedState uniqueID](v16, "uniqueID", v76, v91, v131));
        __int128 v130 = v91;
        __int128 v131 = v92;
        __int128 v129 = v76;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"QuickRelay is enabled for service: %@%@, session: %@.");
      }
    }
  }

  __int16 v146 = 0u;
  v147 = 0u;
  v144 = 0u;
  v145 = 0u;
  v99 = v38;
  uint64_t v100 = [v99 countByEnumeratingWithState:&v144 objects:v153 count:16];
  if (!v100)
  {
LABEL_79:

    uint64_t v110 = objc_claimAutoreleasedReturnValue([v14 objectForKey:IDSSessionDestinationLightWeightStatusesKey]);
    destinationsLightweightStatus = v16->_destinationsLightweightStatus;
    v16->_destinationsLightweightStatus = (NSDictionary *)v110;

    if (v16->_destinationsLightweightStatus)
    {
      v112 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
      if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
      {
        v113 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary description](v16->_destinationsLightweightStatus, "description"));
        id v114 = IDSLoggableDescriptionForObjectOnService(v113, v76);
        uint64_t v115 = (void *)objc_claimAutoreleasedReturnValue(v114);
        *(_DWORD *)buf = 138412290;
        v155 = (uint64_t)v115;
        _os_log_impl( (void *)&_mh_execute_header,  v112,  OS_LOG_TYPE_DEFAULT,  "Destinations lightweight status: %@",  buf,  0xCu);
      }
    }

    id v116 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKey:", IDSSessionUnauthenticatedPublicKey, v129));
    if (v116)
    {
      v117 = objc_claimAutoreleasedReturnValue(-[IDSDSessionSharedState publicIdentityFromData:](v16, "publicIdentityFromData:", v116));
      remoteUnauthenticatedPublicIdentity = v16->_remoteUnauthenticatedPublicIdentity;
      v16->_remoteUnauthenticatedPublicIdentity = (IDSMPPublicLegacyIdentity *)v117;
    }

    goto LABEL_86;
  }

  v101 = *(void *)v145;
LABEL_64:
  v102 = 0LL;
  while (1)
  {
    if (*(void *)v145 != v101) {
      objc_enumerationMutation(v99);
    }
    if (-[IDSDSessionSharedState destinationIsGuestDevice:]( v16,  "destinationIsGuestDevice:",  *(void *)(*((void *)&v144 + 1) + 8 * v102),  v129,  v130,  v131))
    {
      break;
    }

    if (v100 == (id)++v102)
    {
      uint64_t v100 = [v99 countByEnumeratingWithState:&v144 objects:v153 count:16];
      if (v100) {
        goto LABEL_64;
      }
      goto LABEL_79;
    }
  }

  v143 = 0LL;
  unsigned int v103 = objc_claimAutoreleasedReturnValue( +[IDSMPFullLegacyIdentity identityWithError:]( &OBJC_CLASS___IDSMPFullLegacyIdentity,  "identityWithError:",  &v143));
  v104 = v143;
  if (v103)
  {
    v105 = OSLogHandleForTransportCategory("IDSDSession");
    v106 = (os_log_s *)objc_claimAutoreleasedReturnValue(v105);
    if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138477827;
      v155 = v103;
      _os_log_impl( (void *)&_mh_execute_header,  v106,  OS_LOG_TYPE_DEFAULT,  "Created local unauthenticated full identity {fullIdentity: %{private}@}",  buf,  0xCu);
    }

    v108 = os_log_shim_legacy_logging_enabled(v107);
    if ((_DWORD)v108)
    {
      if (_IDSShouldLogTransport(v108))
      {
        __int128 v129 = (void *)v103;
        _IDSLogTransport( @"IDSDSession",  @"IDS",  @"Created local unauthenticated full identity {fullIdentity: %{private}@}");
        if (_IDSShouldLog(0LL, @"IDSDSession"))
        {
          __int128 v129 = (void *)v103;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Created local unauthenticated full identity {fullIdentity: %{private}@}");
        }
      }
    }

    localUnauthenticatedFullIdentity = v16->_localUnauthenticatedFullIdentity;
    v16->_localUnauthenticatedFullIdentity = (IDSMPFullLegacyIdentity *)v103;

    goto LABEL_79;
  }

  id v121 = OSLogHandleForIDSCategory("Warning");
  id v122 = (os_log_s *)objc_claimAutoreleasedReturnValue(v121);
  if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138477827;
    v155 = (uint64_t)v99;
    _os_log_impl( (void *)&_mh_execute_header,  v122,  OS_LOG_TYPE_ERROR,  "Failed to create full identity for unauthenticated destination {destinations: %{private}@}",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v123))
  {
    _IDSWarnV( @"IDSFoundation",  @"Failed to create full identity for unauthenticated destination {destinations: %{private}@}");
    _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Failed to create full identity for unauthenticated destination {destinations: %{private}@}");
    _IDSLogTransport( @"Warning",  @"IDS",  @"Failed to create full identity for unauthenticated destination {destinations: %{private}@}");
  }

  v119 = 0LL;
LABEL_87:

  return v119;
}
}

        id v23 = (void *)objc_claimAutoreleasedReturnValue(-[IDSKeyTransparencyVerifier registrationDataSource](self, "registrationDataSource"));
        __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([v32 serviceIdentifier]);
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v7 deviceID]);
        uint64_t v26 = [v23 expectedRemoteKeyTransparencyEligibilityForServiceIdentifier:v24 pushToken:v25];

        if (v26 == (id)1) {
          uint64_t v27 = v14 ^ 1;
        }
        else {
          uint64_t v27 = 0LL;
        }
        [v7 setSuccessfulSync:v27];
        [v7 setKtCapable:v19];
      }

      unsigned __int8 v30 = [obj countByEnumeratingWithState:&v41 objects:v48 count:16];
    }

    while (v30);
  }
}

        uint64_t v10 = (v19 - 1) & v19;
        id v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }

      id v21 = *(void *)(*(void *)(v3 + 48) + 8 * v17);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      __int16 v22 = -1LL << *(_BYTE *)(v6 + 32);
      id v23 = result & ~v22;
      __int16 v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        __int16 v15 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v27 = v24 == v26;
          if (v24 == v26) {
            __int16 v24 = 0LL;
          }
          v25 |= v27;
          v28 = *(void *)(v12 + 8 * v24);
        }

        while (v28 == -1);
        __int16 v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *id v2 = v6;
  return result;
}

  __break(1u);
}

  swift_release(v16);
  v28 = v40;
  unsigned __int8 v29 = *(os_unfair_lock_s **)((char *)v32 + v31);
  swift_retain(v29);
  os_unfair_lock_unlock(v29 + 4);
  swift_release(v29);
  return v28;
}

        uint64_t v10 = (v19 - 1) & v19;
        id v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }

      id v21 = *(void *)(*(void *)(v3 + 48) + 8 * v17);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      __int16 v22 = -1LL << *(_BYTE *)(v6 + 32);
      id v23 = result & ~v22;
      __int16 v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        __int16 v15 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v27 = v24 == v26;
          if (v24 == v26) {
            __int16 v24 = 0LL;
          }
          v25 |= v27;
          v28 = *(void *)(v12 + 8 * v24);
        }

        while (v28 == -1);
        __int16 v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *id v2 = v6;
  return result;
}

    uint64_t v10 = (v19 - 1) & v19;
    id v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
    id v21 = *(void *)(v6 + 40);
    __int16 v22 = *(id *)(*(void *)(v3 + 48) + 8 * v17);
    uint64_t result = NSObject._rawHashValue(seed:)(v21);
    id v23 = -1LL << *(_BYTE *)(v6 + 32);
    __int16 v24 = result & ~v23;
    uint64_t v25 = v24 >> 6;
    if (((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      __int16 v15 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        v28 = v25 == v27;
        if (v25 == v27) {
          uint64_t v25 = 0LL;
        }
        v26 |= v28;
        unsigned __int8 v29 = *(void *)(v12 + 8 * v25);
      }

      while (v29 == -1);
      __int16 v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    *(void *)(*(void *)(v6 + 48) + 8 * v15) = v22;
    ++*(void *)(v6 + 16);
  }

  __int16 v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    id v2 = v30;
    goto LABEL_38;
  }

  id v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    uint64_t v14 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_36;
    }
    id v19 = *(void *)(v8 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

        uint64_t v9 = (v19 - 1) & v19;
        id v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      id v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
      __int16 v22 = *v21;
      id v23 = v21[1];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      uint64_t result = Hasher._finalize()();
      __int16 v24 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v25 = result & ~v24;
      uint64_t v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          unsigned __int8 v29 = v26 == v28;
          if (v26 == v28) {
            uint64_t v26 = 0LL;
          }
          v27 |= v29;
          unsigned __int8 v30 = *(void *)(v11 + 8 * v26);
        }

        while (v30 == -1);
        uint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      __int16 v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
      void *v15 = v22;
      v15[1] = v23;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *id v2 = v6;
  return result;
}

        __int16 v11 = (v20 - 1) & v20;
        __int16 v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }

      __int16 v22 = *(void *)(*(void *)(v4 + 48) + 8 * v18);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
      id v23 = -1LL << *(_BYTE *)(v7 + 32);
      __int16 v24 = result & ~v23;
      uint64_t v25 = v24 >> 6;
      if (((-1LL << v24) & ~*(void *)(v13 + 8 * (v24 >> 6))) != 0)
      {
        id v16 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v26 = 0;
        uint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          v28 = v25 == v27;
          if (v25 == v27) {
            uint64_t v25 = 0LL;
          }
          v26 |= v28;
          unsigned __int8 v29 = *(void *)(v13 + 8 * v25);
        }

        while (v29 == -1);
        id v16 = __clz(__rbit64(~v29)) + (v25 << 6);
      }

      *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v22;
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release(v4);
  *BOOL v3 = v7;
  return result;
}

    uint64_t v10 = (v19 - 1) & v19;
    id v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    id v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
    __int16 v22 = *v21;
    id v23 = v21[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    uint64_t result = Hasher._finalize()();
    __int16 v24 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v25 = result & ~v24;
    uint64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        unsigned __int8 v29 = v26 == v28;
        if (v26 == v28) {
          uint64_t v26 = 0LL;
        }
        v27 |= v29;
        unsigned __int8 v30 = *(void *)(v11 + 8 * v26);
      }

      while (v30 == -1);
      uint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    __int16 v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
    void *v15 = v22;
    v15[1] = v23;
    ++*(void *)(v6 + 16);
  }

  __int16 v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    id v2 = v31;
    goto LABEL_38;
  }

  id v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    __int16 v13 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    __int16 v13 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_36;
    }
    id v19 = *(void *)(v8 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

    __int16 v11 = (v20 - 1) & v20;
    __int16 v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_27:
    __int16 v22 = *(void *)(v7 + 40);
    id v23 = *(id *)(*(void *)(v4 + 48) + 8 * v18);
    uint64_t result = NSObject._rawHashValue(seed:)(v22);
    __int16 v24 = -1LL << *(_BYTE *)(v7 + 32);
    uint64_t v25 = result & ~v24;
    uint64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v13 + 8 * (v25 >> 6))) != 0)
    {
      id v16 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        unsigned __int8 v29 = v26 == v28;
        if (v26 == v28) {
          uint64_t v26 = 0LL;
        }
        v27 |= v29;
        unsigned __int8 v30 = *(void *)(v13 + 8 * v26);
      }

      while (v30 == -1);
      id v16 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
    *(void *)(*(void *)(v7 + 48) + 8 * v16) = v23;
    ++*(void *)(v7 + 16);
  }

  id v21 = v19 + 3;
  if (v21 >= v12)
  {
LABEL_36:
    uint64_t result = swift_release_n(v4, 2LL);
    BOOL v3 = v31;
    goto LABEL_38;
  }

  __int16 v20 = *(void *)(v9 + 8 * v21);
  if (v20)
  {
    __int16 v15 = v21;
    goto LABEL_26;
  }

  while (1)
  {
    __int16 v15 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v15 >= v12) {
      goto LABEL_36;
    }
    __int16 v20 = *(void *)(v9 + 8 * v15);
    ++v21;
    if (v20) {
      goto LABEL_26;
    }
  }

  __break(1u);
  return result;
}

        uint64_t v9 = (v19 - 1) & v19;
        id v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      id v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
      __int16 v22 = *v21;
      id v23 = v21[1];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      Data.hash(into:)(v34, v22, v23);
      uint64_t result = Hasher._finalize()();
      __int16 v24 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v25 = result & ~v24;
      uint64_t v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          unsigned __int8 v29 = v26 == v28;
          if (v26 == v28) {
            uint64_t v26 = 0LL;
          }
          v27 |= v29;
          unsigned __int8 v30 = *(void *)(v11 + 8 * v26);
        }

        while (v30 == -1);
        uint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      __int16 v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
      void *v15 = v22;
      v15[1] = v23;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *id v2 = v6;
  return result;
}

        uint64_t v10 = (v19 - 1) & v19;
        id v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }

      id v21 = *(void *)(*(void *)(v3 + 48) + 8 * v17);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      __int16 v22 = -1LL << *(_BYTE *)(v6 + 32);
      id v23 = result & ~v22;
      __int16 v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        __int16 v15 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v27 = v24 == v26;
          if (v24 == v26) {
            __int16 v24 = 0LL;
          }
          v25 |= v27;
          v28 = *(void *)(v12 + 8 * v24);
        }

        while (v28 == -1);
        __int16 v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *id v2 = v6;
  return result;
}

    uint64_t v10 = (v19 - 1) & v19;
    id v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    id v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
    __int16 v22 = *v21;
    id v23 = v21[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    sub_1004028CC(v22, v23);
    Data.hash(into:)(v33, v22, v23);
    uint64_t result = Hasher._finalize()();
    __int16 v24 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v25 = result & ~v24;
    uint64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        unsigned __int8 v29 = v26 == v28;
        if (v26 == v28) {
          uint64_t v26 = 0LL;
        }
        v27 |= v29;
        unsigned __int8 v30 = *(void *)(v11 + 8 * v26);
      }

      while (v30 == -1);
      uint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    __int16 v15 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v14);
    void *v15 = v22;
    v15[1] = v23;
    ++*(void *)(v6 + 16);
  }

  __int16 v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    id v2 = v31;
    goto LABEL_38;
  }

  id v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    __int16 v13 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    __int16 v13 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_36;
    }
    id v19 = *(void *)(v8 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

    uint64_t v10 = (v19 - 1) & v19;
    id v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
    id v21 = *(void *)(v6 + 40);
    __int16 v22 = *(id *)(*(void *)(v3 + 48) + 8 * v17);
    uint64_t result = NSObject._rawHashValue(seed:)(v21);
    id v23 = -1LL << *(_BYTE *)(v6 + 32);
    __int16 v24 = result & ~v23;
    uint64_t v25 = v24 >> 6;
    if (((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      __int16 v15 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        v28 = v25 == v27;
        if (v25 == v27) {
          uint64_t v25 = 0LL;
        }
        v26 |= v28;
        unsigned __int8 v29 = *(void *)(v12 + 8 * v25);
      }

      while (v29 == -1);
      __int16 v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    *(void *)(*(void *)(v6 + 48) + 8 * v15) = v22;
    ++*(void *)(v6 + 16);
  }

  __int16 v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_36:
    uint64_t result = swift_release_n(v3, 2LL);
    id v2 = v30;
    goto LABEL_38;
  }

  id v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    uint64_t v14 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_36;
    }
    id v19 = *(void *)(v8 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
}

    swift_bridgeObjectRelease(v8);
    return 0LL;
  }

  __int16 v22 = 64LL;
LABEL_11:
  uint64_t v14 = __clz(__rbit64(v21)) + v22;
LABEL_5:
  __int16 v15 = *(char **)(*(void *)(v8 + 56) + 8 * v14);
  id v16 = *(void (**)(void))((swift_isaMask & **(void **)&v15[*a1]) + 0x118LL);
  id v17 = v15;
  v16();
  __int16 v18 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48LL))(v7, 1LL, v18) == 1)
  {
    swift_bridgeObjectRelease(v9);

    sub_10040A274((uint64_t)v7, &qword_1009B8E08);
    return 0LL;
  }

  id v19 = sub_10043A878();
  swift_bridgeObjectRelease(v9);

  sub_1003F6050((uint64_t)v7, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
  return v19;
}

        __int16 v11 = (v18 - 1) & v18;
        id v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }

      __int16 v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
      uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), v20);
      id v21 = -1LL << *(_BYTE *)(v6 + 32);
      __int16 v22 = result & ~v21;
      id v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        __int16 v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v26 = v23 == v25;
          if (v23 == v25) {
            id v23 = 0LL;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v23);
        }

        while (v27 == -1);
        uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  *id v2 = v6;
  return result;
}

    __int16 v11 = (v18 - 1) & v18;
    id v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    __int16 v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), v20);
    id v21 = -1LL << *(_BYTE *)(v6 + 32);
    __int16 v22 = result & ~v21;
    id v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      __int16 v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v26 = v23 == v25;
        if (v23 == v25) {
          id v23 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v13 + 8 * v23);
      }

      while (v27 == -1);
      uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
    ++*(void *)(v6 + 16);
  }

  id v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    uint64_t result = swift_release(v3);
    id v2 = v28;
    goto LABEL_38;
  }

  __int16 v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    uint64_t v7 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_36;
    }
    __int16 v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

id sub_10001D180(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 componentsSeparatedByString:@"-"]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectAtIndex:2]);

  if ([v5 isEqualToString:*(void *)(a1 + 32)])
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 componentsSeparatedByString:@"-"]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectAtIndex:1]);

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", v7));
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  return v8;
}

BOOL sub_10001D240(id a1, IDSURI *a2)
{
  id v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[IDSURI prefixedURI](v2, "prefixedURI"));
  if ([v3 _appearsToBeDSID])
  {
    LOBYTE(v4) = 0;
  }

  else
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(-[IDSURI prefixedURI](v2, "prefixedURI"));
    if ([v5 _appearsToBePseudonymID])
    {
      LOBYTE(v4) = 0;
    }

    else
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[IDSURI prefixedURI](v2, "prefixedURI"));
      unsigned int v4 = [v6 _appearsToBeTemporaryID] ^ 1;
    }
  }

  return v4;
}

void sub_10001E004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001E3E8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    if (a2 == 2)
    {
      objc_begin_catch(exception_object);
      objc_end_catch();
      JUMPOUT(0x10001E324LL);
    }

    objc_begin_catch(exception_object);
    os_unfair_lock_unlock(v2);
    objc_exception_rethrow();
    __break(1u);
    JUMPOUT(0x10001E460LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_10001E484(void *a1)
{
}

LABEL_48:
  os_unfair_lock_unlock(p_lock);
  return v17;
}

    goto LABEL_49;
  }

  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled((os_log_t)v27, OS_LOG_TYPE_ERROR)) {
    sub_100694CCC(self);
  }
  v31 = 0LL;
  v32 = 0LL;
  v33 = 0LL;
  uint64_t v34 = 0LL;
LABEL_76:

  if (a3) {
    v65 = *a3;
  }
  else {
    v65 = 0LL;
  }
  -[IDSNGMKeyLoadingErrorContainer setIdentityToRegisterError:]( self->_recentKeyLoadingErrors,  "setIdentityToRegisterError:",  v65);
  -[NSRecursiveLock unlock](self->_lock, "unlock");
  if (!v34) {
    goto LABEL_81;
  }
  id v66 = -[IDSPublicIdentityData initWithPublicLegacyIdentityData:publicNGMIdentityData:publicNGMPrekeyData:NGMVersion:]( objc_alloc(&OBJC_CLASS___IDSPublicIdentityData),  "initWithPublicLegacyIdentityData:publicNGMIdentityData:publicNGMPrekeyData:NGMVersion:",  v34,  v33,  v32,  v31);
LABEL_82:

  return v66;
}
          }

          self = v92;
          goto LABEL_50;
        }

        v28 = (void *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
        if (os_log_type_enabled((os_log_t)v28, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v28,  OS_LOG_TYPE_DEFAULT,  "updateServerDesiredKeyMaterialsForGroup: skip local participant",  buf,  2u);
        }

      uint64_t v36 = 0LL;
      if (v12 && IDSGlobalLinkOptionQRSessionInfoKey) {
        uint64_t v36 = (void *)CFDictionaryGetValue(v12, IDSGlobalLinkOptionQRSessionInfoKey);
      }
      uint64_t v27 = v36;
      v37 = (const void *)IDSGlobalLinkOptionSessionInfoCommandFlagKey;
      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue( -[__CFDictionary objectForKey:]( v12,  "objectForKey:",  IDSGlobalLinkOptionSessionInfoCommandFlagKey));
      id v39 = [v38 unsignedIntValue];

      if ((_DWORD)v39)
      {
        uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v39));
        if (v40)
        {
          CFDictionarySetValue(v27, v37, v40);
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1006A48A4();
        }
      }

      goto LABEL_58;
    }
  }

  else
  {
    id v23 = (const void *)IDSGlobalLinkOptionNewLinkOptionsKey;
    if (v12) {
      __int16 v24 = IDSGlobalLinkOptionNewLinkOptionsKey == 0LL;
    }
    else {
      __int16 v24 = 1;
    }
    uint64_t v25 = !v24;
    if (v24) {
      uint64_t v26 = 0LL;
    }
    else {
      uint64_t v26 = CFDictionaryGetValue(v12, IDSGlobalLinkOptionNewLinkOptionsKey);
    }
    __int16 v22 = -[IDSLinkManager _newGlobalLinkForDeviceUniqueID:cbuuid:options:]( self,  "_newGlobalLinkForDeviceUniqueID:cbuuid:options:",  0LL,  v10,  v26,  v41,  v43,  v45);
    if (v22)
    {
      if (v25)
      {
        v28 = (id)CFDictionaryGetValue(v12, v23);
        unsigned __int8 v29 = 0LL;
        if (v28 && kIDSQRAllocateKey_AlternateDelegate) {
          unsigned __int8 v29 = (void *)CFDictionaryGetValue((CFDictionaryRef)v28, kIDSQRAllocateKey_AlternateDelegate);
        }
      }

      else
      {
        v28 = 0LL;
        unsigned __int8 v29 = 0LL;
      }

      unsigned __int8 v30 = v29;
      v31 = OSLogHandleForIDSCategory("LinkManager");
      v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        id v48 = v30;
        id v49 = 2112;
        id v50 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Set alternateDelegate %@ for %@",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v33)
        && _IDSShouldLog(0LL, @"LinkManager"))
      {
        uint64_t v42 = v30;
        v44 = v10;
        _IDSLogV(0LL, @"IDSFoundation", @"LinkManager", @"Set alternateDelegate %@ for %@");
      }

      objc_msgSend(v22, "setAlternateDelegate:", v30, v42, v44);
      if (kIDSQRAllocateKey_ClientUniquePID) {
        uint64_t v34 = v12 != 0LL;
      }
      else {
        uint64_t v34 = 0;
      }
      if (v34) {
        v35 = (void *)CFDictionaryGetValue(v12, kIDSQRAllocateKey_ClientUniquePID);
      }
      else {
        v35 = 0LL;
      }
      objc_msgSend(v22, "setClientUniquePID:", objc_msgSend(v35, "unsignedLongLongValue"));

      goto LABEL_48;
    }
  }

  uint64_t v27 = v12;
LABEL_59:
}
}
}

  __break(1u);
}

  __break(1u);
LABEL_49:
  __break(1u);
}

    v235 = (v133 - 1) & v133;
    v236 = v132;
    __int128 v130 = __clz(__rbit64(v133)) + (v132 << 6);
LABEL_49:
    __int128 v135 = 8 * v130;
    __int128 v136 = *(void *)(*((void *)v233 + 6) + v135);
    v253 = *(void *)(*((void *)v233 + 7) + v135);
    swift_bridgeObjectRetain(v253);
    v234 = (_BYTE *)v136;
    sub_1004BC450((uint64_t)v224, v136, v129);
    __int128 v137 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v25 + 48);
    if (v137((_BYTE *)v129, 1LL, v24) == 1)
    {
      sub_10040A274(v129, &qword_1009B8E08);
    }

    else
    {
      __int128 v138 = v221;
      sub_1004C77E4(v129, v221);
      __int128 v139 = *(_DWORD *)(v138 + *(int *)(v24 + 40));
      if (v139 == -1) {
        goto LABEL_108;
      }
      sub_10043AFC0(v139 + 1, v125);
      if (v137(v125, 1LL, v24) == 1)
      {
        sub_10040A274((uint64_t)v125, &qword_1009B8E08);
        __int128 v140 = v215;
        __int128 v141 = sub_1003F5FC8(v138, v215, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        v142 = (os_log_s *)Logger.logObject.getter(v141);
        v143 = static os_log_type_t.default.getter(v142);
        if (os_log_type_enabled(v142, v143))
        {
          v144 = swift_slowAlloc(22LL, -1LL);
          v245 = (os_log_t)swift_slowAlloc(64LL, -1LL);
          v252 = v245;
          *(_DWORD *)v144 = v229.n128_u32[0];
          v242 = v142;
          v251 = sub_1003FFBB0(0x4B74656863746172LL, 0xED00002928737965LL, (uint64_t *)&v252);
          v145 = (uint64_t)v228;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v228, v144 + 4, v144 + 12);
          *(_WORD *)(v144 + 12) = 2080;
          __int16 v146 = sub_10040A2B0( &qword_1009B90F0,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718F00);
          v147 = dispatch thunk of CustomStringConvertible.description.getter(v247, v146);
          v149 = v148;
          v251 = sub_1003FFBB0(v147, v148, (uint64_t *)&v252);
          v81 = v248;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v145, v144 + 14, v144 + 22);
          swift_bridgeObjectRelease(v149);
          sub_1003F6050(v140, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          v150 = v242;
          _os_log_impl( (void *)&_mh_execute_header,  v242,  v143,  "%s: cannot ratchet for key: %s",  (uint8_t *)v144,  0x16u);
          v151 = v245;
          swift_arrayDestroy(v245, 2LL, v226);
          swift_slowDealloc(v151, -1LL, -1LL);
          v152 = v144;
          __int16 v24 = v247;
          swift_slowDealloc(v152, -1LL, -1LL);

          v153 = v221;
        }

        else
        {
          sub_1003F6050(v140, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);

          v153 = v138;
        }

        sub_1003F6050(v153, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        uint64_t v25 = v246;
      }

      else
      {
        v154 = v218;
        sub_1004C77E4((uint64_t)v125, v218);
        v155 = v216;
        v156 = sub_1003F5FC8(v154, v216, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        v157 = (os_log_s *)Logger.logObject.getter(v156);
        v158 = static os_log_type_t.default.getter(v157);
        v159 = v158;
        if (os_log_type_enabled(v157, v158))
        {
          v160 = swift_slowAlloc(22LL, -1LL);
          v245 = v157;
          v161 = v24;
          v162 = v160;
          v163 = (os_log_t)swift_slowAlloc(64LL, -1LL);
          v252 = v163;
          *(_DWORD *)v162 = v229.n128_u32[0];
          LODWORD(v242) = v159;
          v251 = sub_1003FFBB0(0x4B74656863746172LL, 0xED00002928737965LL, (uint64_t *)&v252);
          v164 = (uint64_t)v228;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v228, v162 + 4, v162 + 12);
          *(_WORD *)(v162 + 12) = 2080;
          v165 = sub_10040A2B0( &qword_1009B90F0,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718F00);
          v166 = dispatch thunk of CustomStringConvertible.description.getter(v161, v165);
          v168 = v167;
          v251 = sub_1003FFBB0(v166, v167, (uint64_t *)&v252);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v164, v162 + 14, v162 + 22);
          swift_bridgeObjectRelease(v168);
          sub_1003F6050(v155, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          v169 = v245;
          _os_log_impl( (void *)&_mh_execute_header,  v245,  (os_log_type_t)v242,  "%s: ratchet to new remote key: %s",  (uint8_t *)v162,  0x16u);
          swift_arrayDestroy(v163, 2LL, (char *)&type metadata for Any + 8);
          v170 = v163;
          uint64_t v25 = v246;
          swift_slowDealloc(v170, -1LL, -1LL);
          swift_slowDealloc(v162, -1LL, -1LL);
        }

        else
        {

          sub_1003F6050(v155, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        }

        v171 = v219;
        v172 = v218;
        v173 = v238;
        sub_1003F5FC8(v218, v238, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        v174 = v237;
        sub_100400D68(v237, v173);
        sub_1003F6050(v174, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        v175 = v253;
        swift_bridgeObjectRetain_n(v253, 2LL);
        v176 = (os_log_t)sub_1004C2F00(v175);
        swift_bridgeObjectRelease(v175);
        v252 = v176;
        sub_1004C2E80(&v252);
        if (v171) {
          goto LABEL_113;
        }
        v219 = 0LL;
        swift_bridgeObjectRelease_n(v175, 2LL);
        v177 = v252;
        v178 = *((void *)v252 + 2);
        if (v178 >= 2) {
          v179 = v178 - 2;
        }
        else {
          v179 = 0LL;
        }
        v180 = sub_1004C7048( (uint64_t)v252 + ((*(unsigned __int8 *)(v25 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80)),  v179,  (2 * v178) | 1);
        swift_release(v177);
        v253 = v180;
        __int16 v24 = v247;
        v81 = v248;
        v181 = v172;
        v182 = v172 + *(int *)(v247 + 20);
        v183 = v217;
        (*(void (**)(char *, uint64_t, uint64_t))(v248 + 16))(v217, v182, v4);
        v184 = v239;
        sub_1004C2168(v239, v183);
        (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v184, v4);
        sub_1003F6050(v181, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        sub_1003F6050(v221, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      }
    }

    v185 = *(void *)(v253 + 56);
    v241 = v253 + 56;
    v186 = 1LL << *(_BYTE *)(v253 + 32);
    if (v186 < 64) {
      v187 = ~(-1LL << v186);
    }
    else {
      v187 = -1LL;
    }
    v188 = v187 & v185;
    v242 = (os_log_t)((unint64_t)(v186 + 63) >> 6);
    v245 = (os_log_t)v253;
    swift_bridgeObjectRetain(v253);
    v189 = 0LL;
LABEL_71:
    if (v188)
    {
      v190 = __clz(__rbit64(v188));
      v188 &= v188 - 1;
      v191 = v190 | (v189 << 6);
    }

    else
    {
      __int128 v131 = __OFADD__(v189++, 1LL);
      if (v131) {
        goto LABEL_104;
      }
      if (v189 >= (uint64_t)v242)
      {
LABEL_35:
        __int128 v125 = v222;
        swift_release(v245);
        __int128 v126 = v253;
        __int128 v127 = v230;
        __int128 v128 = swift_isUniquelyReferenced_nonNull_native(v230);
        v252 = v127;
        sub_1004C56D4(v126, (uint64_t)v234, v128);
        v230 = v252;
        swift_bridgeObjectRelease(0x8000000000000000LL);
        v81 = v248;
        uint64_t v123 = v235;
        uint64_t v124 = v236;
        continue;
      }

      v192 = *(void *)(v241 + 8 * v189);
      if (!v192)
      {
        v193 = v189 + 1;
        v192 = *(void *)(v241 + 8 * v193);
        if (!v192)
        {
          v193 = v189 + 2;
          v192 = *(void *)(v241 + 8 * v193);
          if (!v192)
          {
            v193 = v189 + 3;
            v192 = *(void *)(v241 + 8 * v193);
            if (!v192)
            {
              while (1)
              {
                v189 = v193 + 1;
                if (__OFADD__(v193, 1LL)) {
                  goto LABEL_105;
                }
                v192 = *(void *)(v241 + 8 * v189);
                ++v193;
                if (v192) {
                  goto LABEL_83;
                }
              }
            }
          }
        }

        v189 = v193;
      }

  swift_retain(a3);
  return sub_10047726C(a1, a2, 0LL, a3);
}

void sub_10001E930(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    if (a2 == 2)
    {
      objc_begin_catch(exception_object);
      objc_end_catch();
      JUMPOUT(0x10001E83CLL);
    }

    objc_begin_catch(exception_object);
    os_unfair_lock_unlock(v2);
    objc_exception_rethrow();
    __break(1u);
    JUMPOUT(0x10001E9E4LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_10001EC04(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock(v2);
    objc_exception_rethrow();
    __break(1u);
    JUMPOUT(0x10001EC54LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_10001F00C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock(v2);
    objc_exception_rethrow();
    __break(1u);
    JUMPOUT(0x10001F07CLL);
  }

  _Unwind_Resume(exception_object);
}

void sub_10001F0E8(void *a1)
{
}

void sub_10001F0FC(_Unwind_Exception *a1)
{
}

void sub_10001F328(void *a1)
{
}

void sub_10001F33C(_Unwind_Exception *a1)
{
}

void sub_10001F3B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_10001F700(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a5;
  uint64_t v11 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    id v22 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "Get Service User ID's Completed with response %@",  buf,  0xCu);
  }

  id v14 = v8;
  id v16 = *(void **)(a1 + 40);
  __int16 v15 = (void *)(a1 + 40);
  id v17 = (void *)*(v15 - 1);
  __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([v16 localObject]);
  id v19 = (void *)objc_claimAutoreleasedReturnValue([v17 broadcasterForLocalObject:v18 messageContext:*v15]);

  if (v19)
  {
    __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([v14 responseServiceUserIDs]);
    [v19 serviceUserIDs:v20 error:v9];
  }
}

void sub_10001FB14(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a5;
  uint64_t v11 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    id v46 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "Get Admin Access Tokens Completed with response %@",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v13) && _IDSShouldLog(1LL, @"IDSDaemon"))
  {
    id v44 = v8;
    _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"Get Admin Access Tokens Completed with response %@");
  }

  id v14 = v8;
  __int16 v15 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v16 = (void *)objc_claimAutoreleasedReturnValue([v14 responseAccessoryID]);
  if (v16)
  {
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v14 responseAdminAcccessToken]);
    BOOL v18 = v17 == 0LL;

    if (!v18)
    {
      id v19 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([v14 responseAccessoryID]);
      if (v20)
      {
        CFDictionarySetValue((CFMutableDictionaryRef)v19, @"accessory-id", v20);
      }

      else
      {
        BOOL v21 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
        if (v21) {
          sub_10069452C(v21, v22, v23, v24, v25, v26, v27, v28);
        }
      }

      unsigned __int8 v29 = (void *)objc_claimAutoreleasedReturnValue([v14 responseAdminAcccessToken]);
      if (v29)
      {
        CFDictionarySetValue((CFMutableDictionaryRef)v19, @"access-token", v29);
      }

      else
      {
        BOOL v30 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
        if (v30) {
          sub_1006944A0(v30, v31, v32, v33, v34, v35, v36, v37);
        }
      }

      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v14 responseExpiry]);
      if (v38) {
        CFDictionarySetValue((CFMutableDictionaryRef)v19, @"expiry", v38);
      }

      if (v15 && v19) {
        CFArrayAppendValue((CFMutableArrayRef)v15, v19);
      }
    }
  }

  uint64_t v40 = *(void **)(a1 + 40);
  id v39 = (void *)(a1 + 40);
  v41 = (void *)*(v39 - 1);
  uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "localObject", v44));
  v43 = (void *)objc_claimAutoreleasedReturnValue([v41 broadcasterForLocalObject:v42 messageContext:*v39]);

  if (v43) {
    [v43 adminAccessTokens:v15 error:v9];
  }
}

void sub_100020048(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a5;
  uint64_t v11 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    id v22 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "Get Consent Tokens Completed with response %@",  buf,  0xCu);
  }

  id v14 = v8;
  __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 responseConsentTokens]);
  id v17 = *(void **)(a1 + 40);
  id v16 = (void *)(a1 + 40);
  BOOL v18 = (void *)*(v16 - 1);
  id v19 = (void *)objc_claimAutoreleasedReturnValue([v17 localObject]);
  __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([v18 broadcasterForLocalObject:v19 messageContext:*v16]);

  if (v20) {
    [v20 consentTokens:v15 error:v9];
  }
}

void sub_10002045C(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a5;
  uint64_t v11 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    id v22 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "Get User Access Tokens Completed with response %@",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v13) && _IDSShouldLog(1LL, @"IDSDaemon")) {
    _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"Get User Access Tokens Completed with response %@");
  }
  id v14 = v8;
  __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 responseAccessTokens]);
  id v17 = *(void **)(a1 + 40);
  id v16 = (void *)(a1 + 40);
  BOOL v18 = (void *)*(v16 - 1);
  id v19 = (void *)objc_claimAutoreleasedReturnValue([v17 localObject]);
  __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([v18 broadcasterForLocalObject:v19 messageContext:*v16]);

  if (v20) {
    [v20 userAccessTokens:v15 error:v9];
  }
}

void sub_100020A94(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  id v2 = (void *)qword_1009BE5B0;
  qword_1009BE5B0 = (uint64_t)v1;
}

id sub_100020C14(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) appendString:a2];
}

void sub_100021028(uint64_t a1)
{
  id v1 = objc_alloc(*(Class *)(a1 + 32));
  id v2 = objc_alloc(&OBJC_CLASS___IDSActivityStateProvider);
  id v13 = (id)objc_claimAutoreleasedReturnValue(+[IMUserDefaults sharedDefaults](&OBJC_CLASS___IMUserDefaults, "sharedDefaults"));
  id v3 = -[IDSActivityStateProvider initWithUserDefaults:](v2, "initWithUserDefaults:", v13);
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( +[FTMessageDelivery APNSMessageDeliveryClass]( FTMessageDelivery,  "APNSMessageDeliveryClass"),  "sharedInstance"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPeerIDManager sharedInstance](&OBJC_CLASS___IDSPeerIDManager, "sharedInstance"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance"));
  uint64_t v9 = im_primary_queue(v7, v8);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  id v11 = [v1 initWithStateProvider:v3 messageDelivery:v4 peerIDManager:v5 accountController:v6 serviceController:v7 queue:v10];
  uint64_t v12 = (void *)qword_1009BE5C0;
  qword_1009BE5C0 = (uint64_t)v11;
}

void sub_100021E78( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, void *a9)
{
  id v11 = a9;
  if (a6)
  {
    uint64_t v27 = a1;
    uint64_t v12 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    id v28 = v11;
    id v13 = v11;
    id v14 = [v13 countByEnumeratingWithState:&v33 objects:v38 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v34;
      do
      {
        id v17 = 0LL;
        do
        {
          if (*(void *)v34 != v16) {
            objc_enumerationMutation(v13);
          }
          uint64_t v18 = *(void *)(*((void *)&v33 + 1) + 8LL * (void)v17);
          __int128 v29 = 0u;
          __int128 v30 = 0u;
          __int128 v31 = 0u;
          __int128 v32 = 0u;
          id v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", v18, v27));
          id v20 = [v19 countByEnumeratingWithState:&v29 objects:v37 count:16];
          if (v20)
          {
            id v21 = v20;
            uint64_t v22 = *(void *)v30;
            do
            {
              uint64_t v23 = 0LL;
              do
              {
                if (*(void *)v30 != v22) {
                  objc_enumerationMutation(v19);
                }
                -[NSMutableArray addObject:](v12, "addObject:", v24);

                uint64_t v23 = (char *)v23 + 1;
              }

              while (v21 != v23);
              id v21 = [v19 countByEnumeratingWithState:&v29 objects:v37 count:16];
            }

            while (v21);
          }

          id v17 = (char *)v17 + 1;
        }

        while (v17 != v15);
        id v15 = [v13 countByEnumeratingWithState:&v33 objects:v38 count:16];
      }

      while (v15);
    }

    [*(id *)(v27 + 32) _subscribeForInfo:*(void *)(v27 + 40) withDescription:*(void *)(v27 + 48) resolvedTokens:v12 withCompletion:*(void *)(v27 + 56)];
    id v11 = v28;
  }

  else
  {
    uint64_t v25 = *(void *)(a1 + 56);
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSActivityMonitorErrorDomain,  -201LL,  0LL));
    (*(void (**)(uint64_t, void *))(v25 + 16))(v25, v26);
  }
}

void sub_100022240(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateProvider]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 storedActivityTopics]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithSet:](&OBJC_CLASS___NSMutableSet, "setWithSet:", v7));

  [v8 removeObject:*(void *)(a1 + 40)];
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateProvider]);
  [v9 setStoredActivityTopics:v8];

  if (a3) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = [v5 responseStatus] == 0;
  }
  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateProvider]);
  [v11 storeActivityDescription:0 forActivity:*(void *)(a1 + 40)];

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateProvider]);
  [v12 removeSubscriptionForActivity:*(void *)(a1 + 40) subActivity:*(void *)(a1 + 48)];

  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateProvider]);
  unsigned __int8 v14 = [v13 hasActiveSubscription];

  if ((v14 & 1) == 0)
  {
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v19) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "No active subscriptions, disabling presence on the server.",  (uint8_t *)&v19,  2u);
    }

    [*(id *)(a1 + 32) stopListeningOnActivity:@"com.apple.icloud.presence"];
  }

  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *(void *)(a1 + 40);
    int v19 = 138412546;
    uint64_t v20 = v17;
    __int16 v21 = 1024;
    BOOL v22 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Activity unregister for activity topic %@ finished.  Success? %d",  (uint8_t *)&v19,  0x12u);
  }

  if (v10) {
    uint64_t v18 = 0LL;
  }
  else {
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSActivityMonitorErrorDomain,  -300LL,  0LL));
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1000226F0(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a5;
  id v11 = v8;
  uint64_t v12 = v11;
  if (v9) {
    BOOL v13 = 0;
  }
  else {
    BOOL v13 = [v11 responseStatus] == 0;
  }
  unsigned __int8 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateProvider]);
  uint64_t v15 = objc_claimAutoreleasedReturnValue([v14 storedActivityTopics]);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithSet:](&OBJC_CLASS___NSMutableSet, "setWithSet:", v15));

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) activity]);
  LOBYTE(v15) = [v16 containsObject:v17];

  if ((v15 & 1) == 0)
  {
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) activity]);
    [v16 addObject:v18];

    int v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateProvider]);
    [v19 setStoredActivityTopics:v16];
  }

  if (v13)
  {
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateProvider]);
    unsigned __int8 v21 = [v20 hasActiveSubscription];

    if ((v21 & 1) == 0)
    {
      BOOL v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v32) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "The first subscription succeeded, enabling presence on the server.",  (uint8_t *)&v32,  2u);
      }

      [*(id *)(a1 + 32) startListeningOnActivity:@"com.apple.icloud.presence"];
    }

    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateProvider]);
    uint64_t v24 = *(void **)(a1 + 40);
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 activity]);
    [v23 storeActivityDescription:v24 forActivity:v25];

    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateProvider]);
    uint64_t v27 = *(void *)(a1 + 48);
    id v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) activity]);
    [v26 storeSubscription:v27 forActivity:v28];
  }

  __int128 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) activity]);
    int v32 = 138412546;
    __int128 v33 = v30;
    __int16 v34 = 1024;
    BOOL v35 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Activity register for activity topic %@ finished.  Success? %d",  (uint8_t *)&v32,  0x12u);
  }

  if (v13) {
    __int128 v31 = 0LL;
  }
  else {
    __int128 v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSActivityMonitorErrorDomain,  -300LL,  0LL));
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

id sub_100022AB8(id a1, id a2)
{
  id v2 = a2;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSString, v3);
  if ((objc_opt_isKindOfClass(v2, v4) & 1) != 0
    && [v2 isEqualToString:@"com.apple.icloud.presence"])
  {
    id v5 = v2;
  }

  else
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@%@",  @"com.apple.icloud.presence.",  v2));
  }

  uint64_t v6 = v5;

  return v6;
}

void sub_100023728(id a1, unsigned int a2, NSObject *a3, BOOL *a4, BOOL *a5)
{
  if ((objc_opt_respondsToSelector(a3, "invalidate") & 1) != 0) {
    -[NSObject invalidate](a3, "invalidate");
  }
}

void sub_1000240A0(id a1)
{
  mach_timebase_info info = (mach_timebase_info)0xAAAAAAAAAAAAAAAALL;
  mach_timebase_info(&info);
  LODWORD(v2) = info.denom;
  LODWORD(v1) = info.numer;
  *(double *)&qword_1009BE5D8 = (double)v1 / (double)v2 / 1000000000.0;
}

void sub_1000242CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
}

void sub_1000243C4(_Unwind_Exception *a1)
{
}

void sub_1000243E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v10 = v5;
  if (a3)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = sub_10002449C(a3);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    (*(void (**)(uint64_t, id, void *))(v6 + 16))(v6, v10, v8);
  }

  else
  {
    if (v5)
    {
      [*(id *)(a1 + 32) _rollAccountKeyWithFullCluster:v5 completion:*(void *)(a1 + 40)];
      goto LABEL_6;
    }

    uint64_t v9 = *(void *)(a1 + 40);
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"Engram Error",  65543LL,  0LL));
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0LL, v8);
  }

LABEL_6:
}

id sub_10002449C(void *a1)
{
  if (a1) {
    a1 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"Engram Error",  a1,  0LL));
  }
  return a1;
}

void sub_100024578(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  if (!a3)
  {
    if (v5)
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 groupID]);
      if (!v11) {
        sub_1006945E0();
      }

      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v6 groupID]);
      if (!v12)
      {
        uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog accountIdentity](&OBJC_CLASS___IDSFoundationLog, "accountIdentity"));
        if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT)) {
          sub_100694608((uint64_t)v6, v16);
        }

        uint64_t v7 = *(void *)(a1 + 48);
        uint64_t v9 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"Engram Error",  262145LL,  0LL));
        goto LABEL_3;
      }

      uint64_t v13 = IDSMPServiceIdentityTypeForName(*(void *)(a1 + 32));
      id v10 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([v6 adminServiceIdentityWithType:v13]);
      uint64_t v14 = objc_claimAutoreleasedReturnValue([v6 signingServiceIdentityWithType:v13]);
      if (v14)
      {
        id v15 = (id)v14;
        (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
LABEL_28:

        goto LABEL_29;
      }

      id v10 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      __int128 v28 = 0u;
      __int128 v29 = 0u;
      __int128 v30 = 0u;
      __int128 v31 = 0u;
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v6 fullServiceIdentitiesSigning]);
      id v18 = [v17 countByEnumeratingWithState:&v28 objects:v32 count:16];
      if (v18)
      {
        id v19 = v18;
        uint64_t v20 = *(void *)v29;
        do
        {
          for (i = 0LL; i != v19; i = (char *)i + 1)
          {
            if (*(void *)v29 != v20) {
              objc_enumerationMutation(v17);
            }
            BOOL v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v28 + 1) + 8 * (void)i) identityServiceTypeName]);
            -[NSMutableArray addObject:](v10, "addObject:", v22);
          }

          id v19 = [v17 countByEnumeratingWithState:&v28 objects:v32 count:16];
        }

        while (v19);
      }
    }

    else
    {
      id v10 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    }

    id v15 = -[NSMutableArray mutableCopy](v10, "mutableCopy");
    if (v6) {
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v6 fullAccountIdentity]);
    }
    else {
      uint64_t v23 = 0LL;
    }
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    v25[2] = sub_1000248B8;
    v25[3] = &unk_1008F66D8;
    uint64_t v24 = *(void **)(a1 + 40);
    id v27 = *(id *)(a1 + 48);
    id v26 = *(id *)(a1 + 32);
    [v24 _createAccountKeysWithFullAccountIdentity:v23 serviceTypeNames:v15 oldCluster:v6 completion:v25];

    goto LABEL_28;
  }

  uint64_t v7 = *(void *)(a1 + 48);
  id v8 = sub_10002449C(a3);
  uint64_t v9 = objc_claimAutoreleasedReturnValue(v8);
LABEL_3:
  id v10 = (NSMutableArray *)v9;
  (*(void (**)(uint64_t, void, void, void, uint64_t))(v7 + 16))(v7, 0LL, 0LL, 0LL, v9);
LABEL_29:
}

void sub_1000248B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v14 = v5;
  if (a3)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = sub_10002449C(a3);
    uint64_t v8 = objc_claimAutoreleasedReturnValue(v7);
  }

  else
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 groupID]);
    if (!v10) {
      sub_10069467C();
    }

    id v11 = (void *)objc_claimAutoreleasedReturnValue([v14 groupID]);
    if (v11)
    {
      uint64_t v12 = IDSMPServiceIdentityTypeForName(*(void *)(a1 + 32));
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v14 adminServiceIdentityWithType:v12]);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v14 signingServiceIdentityWithType:v12]);
      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();

      goto LABEL_7;
    }

    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v8 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"Engram Error",  262145LL,  0LL));
  }

  uint64_t v9 = (void *)v8;
  (*(void (**)(uint64_t, void, void, void, uint64_t))(v6 + 16))(v6, 0LL, 0LL, 0LL, v8);
LABEL_7:
}

void sub_100024A74(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 groupName]);
  if (v7)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keychainElectionStore]);
    id v19 = 0LL;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 fetchFullClusterWithIdentifier:v7 error:&v19]);
    id v10 = v19;

    if (v9)
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 groupID]);

      if (v11)
      {
        id v12 = v10;
        uint64_t v13 = v9;
      }

      else
      {
        id v15 = (void *)objc_claimAutoreleasedReturnValue([v5 groupID]);
        id v18 = v10;
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v9 clusterByUpdatingGroupID:v15 error:&v18]);
        id v12 = v18;

        if (!v13)
        {
          uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog accountIdentity](&OBJC_CLASS___IDSFoundationLog, "accountIdentity"));
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v5 groupID]);
            *(_DWORD *)buf = 138543874;
            unsigned __int8 v21 = 0LL;
            __int16 v22 = 2114;
            id v23 = v17;
            __int16 v24 = 2114;
            id v25 = v12;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Failed to update groupID {accountIdentityCluster: %{public}@, groupID: %{public}@, error: %{public}@}",  buf,  0x20u);
          }
        }
      }

      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();

      id v10 = v12;
    }

    else
    {
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog accountIdentity](&OBJC_CLASS___IDSFoundationLog, "accountIdentity"));
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543618;
        unsigned __int8 v21 = v7;
        __int16 v22 = 2114;
        id v23 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Failed to get fullClusterFromKeychain {accountGroupkey: %{public}@, error: %{public}@}",  buf,  0x16u);
      }

      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    }
  }

  else
  {
    +[IDSCloudKitKeyElectionStore isItemNotFoundError:]( &OBJC_CLASS___IDSCloudKitKeyElectionStore,  "isItemNotFoundError:",  v6);
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_100024F08(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    id v4 = sub_10002449C(a3);
    id v5 = (id)objc_claimAutoreleasedReturnValue(v4);
    (*(void (**)(uint64_t, void, id))(v3 + 16))(v3, 0LL, v5);
  }

  else
  {
    (*(void (**)(void))(v3 + 16))(*(void *)(a1 + 32));
  }

void sub_100025CD8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,os_activity_scope_state_s state,char a61)
{
}

void sub_100025DA8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6
    || (+[IDSCloudKitKeyElectionStore isItemNotFoundError:]( &OBJC_CLASS___IDSCloudKitKeyElectionStore,  "isItemNotFoundError:",  v6) & 1) != 0)
  {
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog accountIdentity](&OBJC_CLASS___IDSFoundationLog, "accountIdentity"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138477827;
      id v33 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Fetched CloudKit account -- Continue {fetchedCloudKitItem: %{private}@}",  buf,  0xCu);
    }

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 groupName]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 groupID]);
    if (v10 && (uint64_t v11 = objc_opt_class(&OBJC_CLASS___ENGroupID, v9), (objc_opt_isKindOfClass(v10, v11) & 1) == 0))
    {
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog accountIdentity](&OBJC_CLASS___IDSFoundationLog, "accountIdentity"));
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138477827;
        id v33 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Unexpected existingGroupID class -- Fail {fetchedCloudKitItem: %{private}@}",  buf,  0xCu);
      }
    }

    else
    {
      if (!v8 || ([v8 isEqualToString:*(void *)(a1 + 48)] & 1) != 0)
      {
        id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keychainElectionStore]);
        uint64_t v13 = *(void **)(a1 + 40);
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472LL;
        v19[2] = sub_100026198;
        v19[3] = &unk_1008F67C8;
        id v14 = v13;
        uint64_t v15 = *(void *)(a1 + 32);
        id v20 = v14;
        uint64_t v21 = v15;
        id v30 = *(id *)(a1 + 120);
        id v22 = *(id *)(a1 + 56);
        id v23 = *(id *)(a1 + 64);
        id v24 = *(id *)(a1 + 72);
        id v25 = *(id *)(a1 + 80);
        __int128 v31 = *(_OWORD *)(a1 + 128);
        id v26 = *(id *)(a1 + 88);
        id v27 = *(id *)(a1 + 96);
        id v28 = *(id *)(a1 + 104);
        id v29 = *(id *)(a1 + 112);
        [v12 storeFullCluster:v14 completion:v19];

LABEL_19:
        goto LABEL_20;
      }

      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog accountIdentity](&OBJC_CLASS___IDSFoundationLog, "accountIdentity"));
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 138543618;
        id v33 = v8;
        __int16 v34 = 2114;
        uint64_t v35 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "recordName mismatch -- Fail {recordName: %{public}@, existingIdentityGroupName: %{public}@}",  buf,  0x16u);
      }
    }

    [*(id *)(a1 + 32) _cleanupFailedElectionWithFullAccountIdentityCluster:*(void *)(a1 + 40)];
    (*(void (**)(void))(*(void *)(a1 + 120) + 16LL))();
    goto LABEL_19;
  }

  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog accountIdentity](&OBJC_CLASS___IDSFoundationLog, "accountIdentity"));
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    id v33 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Failed to fetch item from CloudKit -- Fail {fetchError: %{public}@}",  buf,  0xCu);
  }

  [*(id *)(a1 + 32) _cleanupFailedElectionWithFullAccountIdentityCluster:*(void *)(a1 + 40)];
  (*(void (**)(void))(*(void *)(a1 + 120) + 16LL))();
LABEL_20:
}

void sub_100026198(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog accountIdentity](&OBJC_CLASS___IDSFoundationLog, "accountIdentity"));
  uint64_t v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      id v22 = v6;
      __int16 v23 = 2114;
      uint64_t v24 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Failed to store cluster in keychain -- Fail {storeError: %{public}@, newCluster: %{public}@}",  buf,  0x16u);
    }

    [*(id *)(a1 + 40) _cleanupFailedElectionWithFullAccountIdentityCluster:*(void *)(a1 + 32)];
    (*(void (**)(void))(*(void *)(a1 + 112) + 16LL))();
  }

  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Stored cluster in Keychain", buf, 2u);
    }

    id v10 = objc_alloc_init(&OBJC_CLASS___IDSGroupServerKeyElectionStoreItem);
    -[IDSGroupServerKeyElectionStoreItem setAccountBlob:](v10, "setAccountBlob:", *(void *)(a1 + 48));
    -[IDSGroupServerKeyElectionStoreItem setSignature:](v10, "setSignature:", *(void *)(a1 + 56));
    -[IDSGroupServerKeyElectionStoreItem setGroupID:](v10, "setGroupID:", *(void *)(a1 + 64));
    -[IDSGroupServerKeyElectionStoreItem setForwardingTicket:](v10, "setForwardingTicket:", *(void *)(a1 + 72));
    -[IDSGroupServerKeyElectionStoreItem setParentPg:](v10, "setParentPg:", *(void *)(a1 + 120));
    -[IDSGroupServerKeyElectionStoreItem setNewPg:](v10, "setNewPg:", *(void *)(a1 + 128));
    -[IDSGroupServerKeyElectionStoreItem setParentVersion:](v10, "setParentVersion:", *(void *)(a1 + 80));
    -[IDSGroupServerKeyElectionStoreItem setENID:](v10, "setENID:", *(void *)(a1 + 88));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) groupServerElectionStore]);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_100026410;
    v15[3] = &unk_1008F67A0;
    uint64_t v16 = v10;
    int8x16_t v14 = *(int8x16_t *)(a1 + 32);
    id v12 = (id)v14.i64[0];
    int8x16_t v17 = vextq_s8(v14, v14, 8uLL);
    id v20 = *(id *)(a1 + 112);
    id v18 = *(id *)(a1 + 96);
    id v19 = *(id *)(a1 + 104);
    uint64_t v13 = v10;
    [v11 storeItem:v13 withCompletion:v15];
  }
}

void sub_100026410(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog accountIdentity](&OBJC_CLASS___IDSFoundationLog, "accountIdentity"));
  uint64_t v11 = v10;
  if (v9)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      id v26 = v12;
      __int16 v27 = 2114;
      id v28 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Failed to store in group server {groupServerItem: %{public}@, groupServerError: %{public}@",  buf,  0x16u);
    }

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v9 domain]);
    [*(id *)(a1 + 40) _cleanupFailedElectionWithFullAccountIdentityCluster:*(void *)(a1 + 48)];
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      int8x16_t v14 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      id v26 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "Stored cluster in GroupServer {groupServerItem: %{public}@}",  buf,  0xCu);
    }

    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog accountIdentity](&OBJC_CLASS___IDSFoundationLog, "accountIdentity"));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v26 = v8;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "!setState groupServerGroupID=%@", buf, 0xCu);
    }

    id v16 = objc_alloc_init(&OBJC_CLASS___IDSCloudKitKeyElectionStoreItem);
    [v16 setGroupName:*(void *)(a1 + 56)];
    [v16 setGroupID:v8];
    int8x16_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) cloudKitElectionStore]);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_100026704;
    v19[3] = &unk_1008F6778;
    id v20 = v16;
    id v24 = *(id *)(a1 + 72);
    id v21 = *(id *)(a1 + 48);
    id v22 = *(id *)(a1 + 64);
    id v23 = v8;
    id v18 = v16;
    [v17 storeAccountIdentityItem:v18 withCompletion:v19];
  }
}

void sub_100026704(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog accountIdentity](&OBJC_CLASS___IDSFoundationLog, "accountIdentity"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = *(void **)(a1 + 32);
      int v15 = 138543618;
      id v16 = v8;
      __int16 v17 = 2114;
      id v18 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Failed to save identityItem to CloudKit -- Fail {cloudKitItem: %{public}@, cloudKitSetError: %{public}@}",  (uint8_t *)&v15,  0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    id v9 = *(id *)(a1 + 40);
    if (!*(void *)(a1 + 48))
    {
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog accountIdentity](&OBJC_CLASS___IDSFoundationLog, "accountIdentity"));
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = *(void **)(a1 + 40);
        id v12 = *(void **)(a1 + 56);
        int v15 = 138543618;
        id v16 = v11;
        __int16 v17 = 2114;
        id v18 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Updating newCluster groupID {newCluster: %{public}@, groupID: %{public}@}",  (uint8_t *)&v15,  0x16u);
      }

      uint64_t v13 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clusterByUpdatingGroupID:*(void *)(a1 + 56) error:0]);
      id v9 = (id)v13;
    }

    int8x16_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog accountIdentity](&OBJC_CLASS___IDSFoundationLog, "accountIdentity"));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      int v15 = 138543362;
      id v16 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "Stored Cluster in CloudKit -- Done {cluster: %{public}@}",  (uint8_t *)&v15,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }
}

void sub_100027198(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___IDSRegistrationKeyManager);
  unint64_t v2 = (void *)qword_1009BE5E8;
  qword_1009BE5E8 = (uint64_t)v1;
}

void sub_100027200(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[IDSRegistrationKeyManager sharedInstance](&OBJC_CLASS___IDSRegistrationKeyManager, "sharedInstance"));
  [v1 _loadIfNeeded:1];
}

LABEL_27:
    goto LABEL_28;
  }

  if (v5)
  {
    __int16 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218243;
      id v30 = a4;
      __int128 v31 = 2113;
      int v32 = 0LL;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Removing identity from keychain because deleteIfNull == YES, {identityIdentifier: %ld, identityContainer: %{private}@}",  buf,  0x16u);
    }

    id v18 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager identityDataSource](self, "identityDataSource"));
    id v26 = 0LL;
    id v19 = [v18 removeIdentityContainer:0 withIdentifier:a4 dataProtectionClass:0 error:&v26];
    uint64_t v13 = v26;

    id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    int v15 = v20;
    if (v19)
    {
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218243;
        id v30 = a4;
        __int128 v31 = 2113;
        int v32 = 0LL;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Purged identity and removed it from keychain {identityIdentifier: %ld, identityContainer: %{private}@}",  buf,  0x16u);
      }
    }

    else if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      sub_10069490C((uint64_t)v13);
    }

    id v16 = 1;
    goto LABEL_27;
  }

  uint64_t v13 = 0LL;
  id v16 = 1;
LABEL_28:
  -[NSRecursiveLock unlock](self->_lock, "unlock");

  return v16;
}

      CSDBSqliteStatementReset(v6);
      if (v14) {
        CFRelease(v14);
      }
    }
  }

  id v23 = *(const void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  if (v23)
  {
    CFRelease(v23);
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0LL;
  }

    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v16, (uint8_t *)&v22, 0xCu);
    goto LABEL_28;
  }

  int8x16_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    id v22 = 138412290;
    id v23 = v1;
    id v16 = "Missing MainID, Not sending IDS Authentication/Register for: %@";
    goto LABEL_27;
  }

    return;
  }

  if (v1 <= 29)
  {
    if (v1 != 15)
    {
      if (v1 == 29)
      {
        uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
        [v3 logState];

        id v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSRegistrationCenter sharedInstance](&OBJC_CLASS___IDSRegistrationCenter, "sharedInstance"));
        [v4 logState];

        id v5 = (void *)objc_claimAutoreleasedReturnValue(+[IDSTrafficMonitor sharedInstance](&OBJC_CLASS___IDSTrafficMonitor, "sharedInstance"));
        [v5 logState];

        id v22 = (id)objc_claimAutoreleasedReturnValue(+[IDSPublicKeyStorage sharedInstance](&OBJC_CLASS___IDSPublicKeyStorage, "sharedInstance"));
        [v22 logState];

        return;
      }

      goto LABEL_28;
    }

    goto LABEL_11;
  }

  if (v1 == 30)
  {
    int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMIDSLog daemon](&OBJC_CLASS___IMIDSLog, "daemon"));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "*** Clearing ID status cache ***", v24, 2u);
    }

    id v16 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPeerIDManager sharedInstance](&OBJC_CLASS___IDSPeerIDManager, "sharedInstance"));
    [v16 clearCacheAndPersistImmediately:1];

    __int16 v17 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPublicKeyStorage sharedInstance](&OBJC_CLASS___IDSPublicKeyStorage, "sharedInstance"));
    [v17 clearCache];

    id v18 = (void *)objc_claimAutoreleasedReturnValue( +[IDSIDStatusQueryController sharedInstance]( &OBJC_CLASS___IDSIDStatusQueryController,  "sharedInstance"));
    [v18 clearCache];

    id v19 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDuetInterface sharedInstance](&OBJC_CLASS___IDSDuetInterface, "sharedInstance"));
    [v19 clearAdmissionCheckCache];

    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
    -[os_log_s performBlockSyncPriority:](v11, "performBlockSyncPriority:", &stru_1008F9248);
    goto LABEL_27;
  }

  if (v1 != 31)
  {
LABEL_28:
    id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMIDSLog daemon](&OBJC_CLASS___IMIDSLog, "daemon"));
    if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT)) {
      sub_10069951C(v2, v20, v21);
    }

    return;
  }

  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMIDSLog daemon](&OBJC_CLASS___IMIDSLog, "daemon"));
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "*** Reloading Logging Settings ***", v23, 2u);
  }

  uint64_t v13 = _IMSyncLoggingSettings();
  MarcoSyncLoggingsPreferences(v13);
  int8x16_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[IDSUTunController sharedInstance](&OBJC_CLASS___IDSUTunController, "sharedInstance"));
  [v14 reloadSettings];

  sub_1000EEBC8();
}

    *((_BYTE *)self + 80) |= 0x20u;
    goto LABEL_8;
  }

  if (![v9 length])
  {
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog GDR](&OBJC_CLASS___IMRGLog, "GDR"));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      id v30 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount uniqueID](self, "uniqueID"));
      id v39 = 138412290;
      uint64_t v40 = v30;
      __int128 v31 = "  Empty user ID, ignoring for: %@";
LABEL_53:
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v31, (uint8_t *)&v39, 0xCu);
    }

        LOBYTE(v7) = 0;
LABEL_30:

        goto LABEL_31;
      }
    }

    id v30 = 0u;
    __int128 v31 = 0u;
    id v28 = 0u;
    id v29 = 0u;
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSessionInvitationManager sharedState](self, "sharedState"));
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 destinations]);

    uint64_t v13 = [v12 countByEnumeratingWithState:&v28 objects:v33 count:16];
    if (v13)
    {
      int8x16_t v14 = v13;
      int v15 = *(void *)v29;
      while (2)
      {
        for (j = 0LL; j != v14; j = (char *)j + 1)
        {
          if (*(void *)v29 != v15) {
            objc_enumerationMutation(v12);
          }
          if ([*(id *)(*((void *)&v28 + 1) + 8 * (void)j) isEqualToURI:v4])
          {
            LOBYTE(v7) = 1;
            goto LABEL_30;
          }
        }

        int8x16_t v14 = [v12 countByEnumeratingWithState:&v28 objects:v33 count:16];
        if (v14) {
          continue;
        }
        break;
      }
    }

    goto LABEL_27;
  }

  LOBYTE(v7) = 1;
LABEL_31:

  return (char)v7;
}
    }

    else
    {
      id v18 = 0;
    }
  }

  else
  {
    id v18 = 1;
  }

  return v18;
}
}

  int v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v35 code]));
LABEL_28:
  FTAWDLogRegistrationProfileAuthenticate(0LL, 0LL, v33, v29, v30, v13, v31, v32);
  if (v22) {

  }
  if (v24) {
LABEL_34:
  }
  os_activity_scope_leave(&state);
  cut_arc_os_release(&v41);
}

  return v29;
}

      goto LABEL_28;
    }

    id v7 = v46;
  }

  else
  {
    __int128 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "No Public Account Key provided for optInOutRequest.",  buf,  2u);
    }

    int v32 = objc_alloc(&OBJC_CLASS___IDSKTOptInResult);
    id v26 = (id)objc_claimAutoreleasedReturnValue( -[IDSKeyTransparencyVerifier _clientErrorWithCode:debugDescription:underlyingError:]( self,  "_clientErrorWithCode:debugDescription:underlyingError:",  -8000LL,  @"No kt applications provided for opt in status update.",  0LL));
    uint64_t v13 = [v32 initWithSuccess:0 optedInOutURIs:0 serverSMTByURI:0 error:v26];
    v7[2](v7, v13);
  }

    __int16 v17 = (v23 - 1) & v23;
    id v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_12:
    id v21 = *(void *)(v2 + 72) * v20;
    sub_1003F5FC8( *(void *)(v7 + 48) + v21,  (uint64_t)v6,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t result = (void *)sub_1003F600C( (uint64_t)v6,  *(void *)(v9 + 48) + v21,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
  }

  id v24 = v22 + 3;
  if (v24 >= v18)
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v7);
    id v1 = v26;
    goto LABEL_30;
  }

  id v23 = *(void *)(v11 + 8 * v24);
  if (v23)
  {
    int8x16_t v14 = v24;
    goto LABEL_27;
  }

  while (1)
  {
    int8x16_t v14 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v14 >= v18) {
      goto LABEL_28;
    }
    id v23 = *(void *)(v11 + 8 * v14);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }

    __int16 v17 = (v23 - 1) & v23;
    id v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_12:
    id v21 = *(void *)(v2 + 72) * v20;
    sub_1003F5FC8(*(void *)(v7 + 48) + v21, (uint64_t)v6, type metadata accessor for IDSGroupEncryptionMaterialData);
    uint64_t result = (void *)sub_1003F600C( (uint64_t)v6,  *(void *)(v9 + 48) + v21,  type metadata accessor for IDSGroupEncryptionMaterialData);
  }

  id v24 = v22 + 3;
  if (v24 >= v18)
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v7);
    id v1 = v26;
    goto LABEL_30;
  }

  id v23 = *(void *)(v11 + 8 * v24);
  if (v23)
  {
    int8x16_t v14 = v24;
    goto LABEL_27;
  }

  while (1)
  {
    int8x16_t v14 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v14 >= v18) {
      goto LABEL_28;
    }
    id v23 = *(void *)(v11 + 8 * v14);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }

    __int16 v17 = (v23 - 1) & v23;
    id v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_12:
    id v21 = *(void *)(v2 + 72) * v20;
    sub_1003F5FC8( *(void *)(v7 + 48) + v21,  (uint64_t)v6,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    uint64_t result = (void *)sub_1003F600C( (uint64_t)v6,  *(void *)(v9 + 48) + v21,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
  }

  id v24 = v22 + 3;
  if (v24 >= v18)
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v7);
    id v1 = v26;
    goto LABEL_30;
  }

  id v23 = *(void *)(v11 + 8 * v24);
  if (v23)
  {
    int8x16_t v14 = v24;
    goto LABEL_27;
  }

  while (1)
  {
    int8x16_t v14 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v14 >= v18) {
      goto LABEL_28;
    }
    id v23 = *(void *)(v11 + 8 * v14);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }

  __break(1u);
}

    id v12 = (v19 - 1) & v19;
    int v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    id v16 = 8 * v15;
    __int16 v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = v17;
  }

  id v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  id v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    id v9 = v20;
    goto LABEL_27;
  }

  while (1)
  {
    id v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    id v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }

    id v12 = (v21 - 1) & v21;
    int v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    id v16 = 16 * v15;
    __int16 v17 = (void *)(*(void *)(v2 + 48) + v16);
    id v18 = v17[1];
    id v19 = (void *)(*(void *)(v4 + 48) + v16);
    *id v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain(v18);
  }

  id v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  id v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    id v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    id v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    id v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

    uint64_t v13 = (v20 - 1) & v20;
    id v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    __int16 v17 = 8 * v16;
    id v18 = *(void **)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    uint64_t result = v18;
  }

  id v21 = v19 + 3;
  if (v21 >= v14) {
    goto LABEL_28;
  }
  id v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    id v10 = v21;
    goto LABEL_27;
  }

  while (1)
  {
    id v10 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    id v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_27;
    }
  }

  __break(1u);
}

    id v12 = (v19 - 1) & v19;
    int v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    id v16 = 16 * v15;
    __int16 v17 = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = (void *)sub_1004028CC(v17, *((unint64_t *)&v17 + 1));
  }

  id v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  id v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    id v9 = v20;
    goto LABEL_27;
  }

  while (1)
  {
    id v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    id v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }

    __int16 v17 = (v23 - 1) & v23;
    id v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_12:
    id v21 = *(void *)(v2 + 72) * v20;
    sub_1003F5FC8(*(void *)(v7 + 48) + v21, (uint64_t)v6, type metadata accessor for SenderKeyInfo);
    uint64_t result = (void *)sub_1003F600C((uint64_t)v6, *(void *)(v9 + 48) + v21, type metadata accessor for SenderKeyInfo);
  }

  id v24 = v22 + 3;
  if (v24 >= v18)
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v7);
    id v1 = v26;
    goto LABEL_30;
  }

  id v23 = *(void *)(v11 + 8 * v24);
  if (v23)
  {
    int8x16_t v14 = v24;
    goto LABEL_27;
  }

  while (1)
  {
    int8x16_t v14 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v14 >= v18) {
      goto LABEL_28;
    }
    id v23 = *(void *)(v11 + 8 * v14);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }

    id v12 = (v19 - 1) & v19;
    int v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    id v16 = 8 * v15;
    __int16 v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = v17;
  }

  id v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  id v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    id v9 = v20;
    goto LABEL_27;
  }

  while (1)
  {
    id v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    id v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }

  __break(1u);
}

    id v12 = (v19 - 1) & v19;
    int v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    id v16 = 8 * v15;
    __int16 v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = v17;
  }

  id v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  id v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    id v9 = v20;
    goto LABEL_27;
  }

  while (1)
  {
    id v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    id v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }

  __break(1u);
LABEL_28:
  __break(1u);
}

  __break(1u);
}

    int v32 = sub_1003F5CB4(&qword_1009BB7C0);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL))(v10, 1LL, 1LL, v32);
    id v22 = 0LL;
LABEL_28:
    sub_10049E49C((uint64_t)v10, (uint64_t)v14);
    id v33 = sub_1003F5CB4(&qword_1009BB7C0);
    if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48LL))(v14, 1LL, v33) == 1)
    {
      uint64_t result = swift_release(v72);
      *v67 = v15;
      return result;
    }

    uint64_t v74 = v22;
    __int16 v34 = *v14;
    sub_10049E2E4((uint64_t)v14 + *(int *)(v33 + 48), (uint64_t)v6);
    uint64_t v35 = v34;
    __int128 v36 = sub_1004D3220();
    if (v37 >> 60 != 15)
    {
      uint64_t v45 = (const __CFData *)v37;
      id v46 = v36;
      id v47 = v10;
      id v48 = v6;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v15);
      v75 = v15;
      id v51 = sub_10049A934((uint64_t)v35);
      id v52 = v15[2];
      id v53 = (v50 & 1) == 0;
      v54 = v52 + v53;
      if (__OFADD__(v52, v53))
      {
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }

      v55 = v50;
      if (v15[3] >= v54)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          int v15 = v75;
          if ((v50 & 1) == 0) {
            goto LABEL_38;
          }
        }

        else
        {
          sub_10049C4F4();
          int v15 = v75;
          if ((v55 & 1) == 0) {
            goto LABEL_38;
          }
        }
      }

      else
      {
        sub_10049AD30(v54, isUniquelyReferenced_nonNull_native);
        uint64_t v56 = sub_10049A934((uint64_t)v35);
        if ((v55 & 1) != (v57 & 1)) {
          goto LABEL_51;
        }
        id v51 = v56;
        int v15 = v75;
        if ((v55 & 1) == 0)
        {
LABEL_38:
          v15[(v51 >> 6) + 8] |= 1LL << v51;
          *(void *)(v15[6] + 8 * v51) = v35;
          v58 = (CFDataRef *)(v15[7] + 16 * v51);
          void *v58 = v46;
          v58[1] = v45;
          uint64_t v59 = v15[2];
          id v60 = __OFADD__(v59, 1LL);
          __int128 v61 = v59 + 1;
          if (v60) {
            goto LABEL_49;
          }
          v15[2] = v61;
          __int128 v62 = v35;
          goto LABEL_43;
        }
      }

      __int128 v63 = v15[7] + 16 * v51;
      sub_100402A84(*(void *)v63, *(void *)(v63 + 8));
      *(void *)__int128 v63 = v46;
      *(void *)(v63 + _Block_object_dispose(va, 8) = v45;
LABEL_43:

      swift_bridgeObjectRelease(0x8000000000000000LL);
      id v6 = v48;
      id v10 = v47;
      int8x16_t v14 = v70;
      goto LABEL_6;
    }

    swift_bridgeObjectRetain(v15);
    uint64_t v38 = sub_10049A934((uint64_t)v35);
    uint64_t v40 = v39;
    swift_bridgeObjectRelease(v15);
    if ((v40 & 1) != 0)
    {
      v41 = swift_isUniquelyReferenced_nonNull_native(v15);
      v75 = v15;
      if ((v41 & 1) == 0)
      {
        sub_10049C4F4();
        int v15 = v75;
      }

      uint64_t v42 = (uint64_t *)(v15[7] + 16 * v38);
      v43 = *v42;
      id v44 = v42[1];
      sub_10049B958(v38, (uint64_t)v15);

      swift_bridgeObjectRelease(0x8000000000000000LL);
      sub_100402A84(v43, v44);
    }

    else
    {
    }

LABEL_6:
    sub_1003F6050((uint64_t)v6, type metadata accessor for IDSGroupEncryptionPublicIdentity);
    id v20 = v74;
  }

  id v30 = *(void *)(v68 + 8 * v31);
  if (v30)
  {
LABEL_16:
    id v29 = v31;
LABEL_13:
    id v22 = (v30 - 1) & v30;
    id v23 = __clz(__rbit64(v30)) + (v29 << 6);
    uint64_t v73 = v29;
    goto LABEL_9;
  }

  while (1)
  {
    id v29 = v31 + 1;
    if (__OFADD__(v31, 1LL)) {
      break;
    }
    if (v29 >= v69)
    {
      uint64_t v73 = v66;
      goto LABEL_27;
    }

    id v30 = *(void *)(v68 + 8 * v29);
    ++v31;
    if (v30) {
      goto LABEL_13;
    }
  }

  __break(1u);
}

    id v12 = (v17 - 1) & v17;
    int v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }

  id v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  __int16 v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    id v9 = v18;
    goto LABEL_27;
  }

  while (1)
  {
    id v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    __int16 v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }

    id v46 = sub_1003F5CB4(&qword_1009BBCB0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56LL))(v22, 1LL, 1LL, v46);
    uint64_t v38 = 0LL;
LABEL_28:
    sub_1004C7FA8((uint64_t)v22, (uint64_t)v26);
    id v47 = sub_1003F5CB4(&qword_1009BBCB0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v47 - 8) + 48LL))(v26, 1LL, v47) == 1)
    {
      swift_release(v71);
      *__int128 v64 = v82;
      return;
    }

    v76 = v38;
    sub_1004C77E4((uint64_t)&v26[*(int *)(v47 + 48)], v77);
    id v48 = v74[3];
    if (*(void *)(v48 + 16)
      && (id v49 = v77 + *(int *)(v67 + 20),
          id v50 = *(void *)(v48 + 40),
          v51 = sub_10040A2B0( &qword_1009B9300,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID),  v79 = v49,  id v52 = dispatch thunk of Hashable._rawHashValue(seed:)(v50, v81, v51),  v53 = -1LL << *(_BYTE *)(v48 + 32),  v54 = v52 & ~v53,  ((*(void *)(v48 + 56 + ((v54 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v54) & 1) != 0))
    {
      v55 = ~v53;
      uint64_t v56 = *(void *)(v80 + 72);
      v57 = *(void (**)(char *, unint64_t, uint64_t))(v80 + 16);
      while (1)
      {
        v58 = v78;
        uint64_t v59 = v81;
        v57(v78, *(void *)(v48 + 48) + v56 * v54, v81);
        id v60 = sub_10040A2B0( &qword_1009B9808,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        __int128 v61 = dispatch thunk of static Equatable.== infix(_:_:)(v58, v79, v59, v60);
        __int128 v36 = *(void (**)(char *, uint64_t))(v80 + 8);
        v36(v58, v59);
        if ((v61 & 1) != 0) {
          break;
        }
        v54 = (v54 + 1) & v55;
        if (((*(void *)(v48 + 56 + ((v54 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v54) & 1) == 0) {
          goto LABEL_5;
        }
      }

      sub_1003F6050(v77, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    }

    else
    {
LABEL_5:
      id v33 = v77;
      __int16 v34 = v70;
      sub_1003F5FC8(v77, v70, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v35 = v69;
      sub_100400D68(v69, v34);
      sub_1003F6050(v35, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      sub_1003F6050(v33, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      __int128 v36 = *(void (**)(char *, uint64_t))(v80 + 8);
    }

    id v26 = v72;
    id v22 = v73;
    v36(v72, v81);
    __int128 v31 = v76;
  }

  id v44 = *(void *)(v65 + 8 * v45);
  if (v44)
  {
LABEL_16:
    v43 = v45;
LABEL_13:
    uint64_t v38 = (v44 - 1) & v44;
    id v39 = __clz(__rbit64(v44)) + (v43 << 6);
    v75 = v43;
    goto LABEL_9;
  }

  while (1)
  {
    v43 = v45 + 1;
    if (__OFADD__(v45, 1LL)) {
      break;
    }
    if (v43 >= v66)
    {
      v75 = v63;
      goto LABEL_27;
    }

    id v44 = *(void *)(v65 + 8 * v43);
    ++v45;
    if (v44) {
      goto LABEL_13;
    }
  }

    uint64_t v45 = sub_1003F5CB4(&qword_1009BBCB0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56LL))(v25, 1LL, 1LL, v45);
    uint64_t v84 = 0LL;
LABEL_28:
    sub_1004C7FA8((uint64_t)v25, (uint64_t)v29);
    id v46 = sub_1003F5CB4(&qword_1009BBCB0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v46 - 8) + 48LL))(v29, 1LL, v46) == 1)
    {
      swift_release(v79);
      *uint64_t v70 = v89;
      return;
    }

    sub_1004C77E4((uint64_t)&v29[*(int *)(v46 + 48)], (uint64_t)v21);
    id v47 = *v31;
    id v48 = &v21[*(int *)(v82 + 20)];
    if (!*(void *)(*v31 + 16LL))
    {
      v54 = *(void (**)(void, void, void))(v5 + 16);
LABEL_37:
      __int128 v64 = v5;
      goto LABEL_38;
    }

    id v49 = *(void *)(v47 + 40);
    id v50 = sub_10040A2B0( &qword_1009B9300,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    id v51 = dispatch thunk of Hashable._rawHashValue(seed:)(v49, v4, v50);
    id v52 = -1LL << *(_BYTE *)(v47 + 32);
    id v53 = v51 & ~v52;
    v87 = v47 + 56;
    v54 = *(void (**)(void, void, void))(v5 + 16);
    if (((*(void *)(v47 + 56 + ((v53 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v53) & 1) == 0)
    {
      id v21 = v74;
      goto LABEL_37;
    }

    v85 = ~v52;
    v55 = v5;
    uint64_t v56 = *(void *)(v5 + 72);
    do
    {
      v57 = v88;
      v58 = v86;
      uint64_t v59 = v54;
      v54(v88, *(void *)(v47 + 48) + v56 * v53, v86);
      id v60 = sub_10040A2B0( &qword_1009B9808,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      __int128 v61 = v48;
      __int128 v62 = dispatch thunk of static Equatable.== infix(_:_:)(v57, v48, v58, v60);
      __int128 v63 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
      v63(v57, v58);
      if ((v62 & 1) != 0)
      {
        __int128 v31 = v72;
        id v5 = v55;
        id v4 = v86;
        id v21 = v74;
        goto LABEL_6;
      }

      id v53 = (v53 + 1) & v85;
      id v48 = v61;
      v54 = v59;
    }

    while (((*(void *)(v87 + ((v53 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v53) & 1) != 0);
    __int128 v31 = v72;
    __int128 v64 = v55;
    id v4 = v86;
    id v21 = v74;
LABEL_38:
    v65 = v78;
    v54(v78, v48, v4);
    id v66 = v88;
    sub_1004C2168(v88, v65);
    id v5 = v64;
    __int128 v63 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
    v63(v66, v4);
    v67 = v77;
    sub_1003F5FC8((uint64_t)v21, v77, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    v68 = v76;
    sub_100400D68(v76, v67);
    sub_1003F6050(v68, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
LABEL_6:
    sub_1003F6050((uint64_t)v21, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    id v29 = v80;
    v63((uint64_t)v80, v4);
    id v25 = v81;
    __int128 v36 = v84;
  }

  v43 = *(void *)(v71 + 8 * v44);
  if (v43)
  {
LABEL_16:
    uint64_t v42 = v44;
LABEL_13:
    v83 = v42;
    uint64_t v84 = (v43 - 1) & v43;
    uint64_t v38 = __clz(__rbit64(v43)) + (v42 << 6);
    goto LABEL_9;
  }

  while (1)
  {
    uint64_t v42 = v44 + 1;
    if (__OFADD__(v44, 1LL)) {
      break;
    }
    if (v42 >= v73)
    {
      v83 = v69;
      goto LABEL_27;
    }

    v43 = *(void *)(v71 + 8 * v42);
    ++v44;
    if (v43) {
      goto LABEL_13;
    }
  }

    id v20 = (v26 - 1) & v26;
    id v23 = __clz(__rbit64(v26)) + (v17 << 6);
LABEL_12:
    id v24 = *(void *)(v5 + 72) * v23;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v9, *(void *)(v10 + 48) + v24, v4);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))( *(void *)(v12 + 48) + v24,  v9,  v4);
  }

  __int16 v27 = v25 + 3;
  if (v27 >= v21)
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v10);
    uint64_t v3 = v29;
    goto LABEL_30;
  }

  id v26 = *(void *)(v14 + 8 * v27);
  if (v26)
  {
    __int16 v17 = v27;
    goto LABEL_27;
  }

  while (1)
  {
    __int16 v17 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v17 >= v21) {
      goto LABEL_28;
    }
    id v26 = *(void *)(v14 + 8 * v17);
    ++v27;
    if (v26) {
      goto LABEL_27;
    }
  }

LABEL_11:
    goto LABEL_12;
  }

  int8x16_t v14 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager keychainWrapper](self, "keychainWrapper"));
  id v16 = 0LL;
  int v15 = [v14 removeDataForIdentifier:v7 dataProtectionClass:2 error:&v16];
  id v12 = v16;

  if ((v15 & 1) == 0)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_ERROR)) {
      sub_100694990();
    }
    goto LABEL_11;
  }

    return 0;
  }

  if (a3)
  {
    var0 = a3->var0;
    var2 = a3->var2;
  }

  else
  {
    var0 = 0LL;
    var2 = 0;
  }

  if (self->_closed)
  {
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog ClientChannel](&OBJC_CLASS___IDSFoundationLog, "ClientChannel"));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      int8x16_t v14 = "writePacketBuffer: channel closed";
      goto LABEL_10;
    }

    goto LABEL_11;
  }

  if (var2 | a5)
  {
    osChannelTXRing = self->_osChannelTXRing;
    if (os_channel_available_slot_count(osChannelTXRing))
    {
      *(void *)&__int16 v17 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v67 = v17;
      v68 = v17;
      *(_OWORD *)buf = v17;
      *(_OWORD *)&buf[16] = v17;
      next_slot = os_channel_get_next_slot(osChannelTXRing, 0LL, buf);
      if (self->_hasMetadata) {
        id v19 = a5 + 2;
      }
      else {
        id v19 = 0;
      }
      id v20 = v19 + var2;
      if (!(v19 + var2))
      {
        id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog ClientChannel](&OBJC_CLASS___IDSFoundationLog, "ClientChannel"));
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          hasMetadata = self->_hasMetadata;
          *(_DWORD *)id v53 = 138412802;
          if (hasMetadata) {
            __int128 v31 = @"YES";
          }
          else {
            __int128 v31 = @"NO";
          }
          v54 = v31;
          v55 = 1024;
          *(_DWORD *)uint64_t v56 = a5;
          *(_WORD *)&v56[4] = 1024;
          *(_DWORD *)&v56[6] = var2;
          _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "writePacketBuffer: Ignoring a zero-byte message. hasMetadata = %@, metadataSize = %u, datagramSize = %u",  v53,  0x18u);
        }

        return 1;
      }

      if (v20 > *(unsigned __int16 *)&buf[2])
      {
        id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog ClientChannel](&OBJC_CLASS___IDSFoundationLog, "ClientChannel"));
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)id v53 = 134218496;
          v54 = (const __CFString *)var2;
          v55 = 2048;
          *(void *)uint64_t v56 = a5;
          *(_WORD *)&v56[8] = 2048;
          v57 = *(unsigned __int16 *)&buf[2];
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "writePacketBuffer: have data %lu metadata %lu to send to client but not enough bytes %lu in slot",  v53,  0x20u);
        }

        return 1;
      }

      int v32 = next_slot;
      if (!self->_verboseFunctionalLogging)
      {
LABEL_57:
        *(_WORD *)buf = 0;
        *(_WORD *)&buf[2] = v20;
        v43 = *(void *)&buf[16];
        if (self->_hasMetadata)
        {
          **(_WORD **)&buf[16] = bswap32(a5) >> 16;
          if (a5) {
            memcpy((void *)(v43 + 2), a4, a5);
          }
          if (!var2) {
            goto LABEL_64;
          }
          id v44 = (void *)(v43 + a5 + 2);
          uint64_t v45 = var2;
        }

        else
        {
          uint64_t v45 = var2;
          id v44 = *(void **)&buf[16];
        }

        memcpy(v44, var0, v45);
LABEL_64:
        uuid_copy(*(unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&buf[24], self->_flowID);
        os_channel_set_slot_properties(osChannelTXRing, v32, buf);
        id v46 = os_channel_advance_slot(osChannelTXRing, v32);
        if (v46)
        {
          id v47 = v46;
          -[IDSClientChannel osChannelInfoLog](self, "osChannelInfoLog");
          id v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog ClientChannel](&OBJC_CLASS___IDSFoundationLog, "ClientChannel"));
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)id v53 = 67109120;
            LODWORD(v54) = v47;
            _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "writePacketBuffer: advance_slot failed for write %d",  v53,  8u);
          }
        }

        if (a6)
        {
          self->_osChannelNeedSync = 1;
        }

        else
        {
          id v49 = os_channel_sync(self->_osChannel, 0LL);
          if (v49)
          {
            id v50 = v49;
            -[IDSClientChannel osChannelInfoLog](self, "osChannelInfoLog");
            id v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog ClientChannel](&OBJC_CLASS___IDSFoundationLog, "ClientChannel"));
            if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)id v53 = 67109120;
              LODWORD(v54) = v50;
              _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "writePacketBuffer: os_channel_sync for TX failed %d",  v53,  8u);
            }
          }

          self->_osChannelNeedSync = 0;
        }

        return 1;
      }

      log = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog ClientChannel](&OBJC_CLASS___IDSFoundationLog, "ClientChannel"));
      id v33 = os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT);
      if (var2)
      {
        if (v33)
        {
          if (a3)
          {
            __int16 v34 = *(unsigned __int8 *)a3->var0;
            uint64_t v35 = *((unsigned __int8 *)a3->var0 + 1);
            __int128 v36 = *((unsigned __int8 *)a3->var0 + 2);
            uint64_t v37 = *((unsigned __int8 *)a3->var0 + 3);
          }

          else
          {
            __int128 v36 = 0;
            __int16 v34 = 0;
            uint64_t v35 = 0;
            uint64_t v37 = 0;
          }

          *(_DWORD *)id v53 = 134219520;
          v54 = (const __CFString *)var2;
          v55 = 2048;
          *(void *)uint64_t v56 = a5;
          *(_WORD *)&v56[8] = 2048;
          v57 = *(unsigned __int16 *)&buf[2];
          v58 = 1024;
          uint64_t v59 = v34;
          id v60 = 1024;
          __int128 v61 = v35;
          __int128 v62 = 1024;
          __int128 v63 = v36;
          __int128 v64 = 1024;
          v65 = v37;
          uint64_t v42 = "writePacketBuffer: have data %lu metadata %lu bytes %lu in slot, data [%02x%02x%02x%02x ...]";
          goto LABEL_55;
        }
      }

      else if (v33)
      {
        uint64_t v38 = *(unsigned __int8 *)a4;
        id v39 = *((unsigned __int8 *)a4 + 1);
        uint64_t v40 = *((unsigned __int8 *)a4 + 2);
        v41 = *((unsigned __int8 *)a4 + 3);
        *(_DWORD *)id v53 = 134219520;
        v54 = 0LL;
        v55 = 2048;
        *(void *)uint64_t v56 = a5;
        *(_WORD *)&v56[8] = 2048;
        v57 = *(unsigned __int16 *)&buf[2];
        v58 = 1024;
        uint64_t v59 = v38;
        id v60 = 1024;
        __int128 v61 = v39;
        __int128 v62 = 1024;
        __int128 v63 = v40;
        __int128 v64 = 1024;
        v65 = v41;
        uint64_t v42 = "writePacketBuffer: have data %lu metadata %lu bytes %lu in slot, metadata [%02x%02x%02x%02x ...]";
LABEL_55:
        _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, v42, v53, 0x38u);
      }

      goto LABEL_57;
    }

    -[IDSClientChannel osChannelInfoLog](self, "osChannelInfoLog");
    id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog ClientChannel](&OBJC_CLASS___IDSFoundationLog, "ClientChannel"));
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = var2;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = a5;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "writePacketBuffer: have data %lu metadata %lu to send to client but no slots",  buf,  0x16u);
    }

    if (!self->_osChannelNeedSync) {
      return 0;
    }
    __int16 v27 = os_channel_sync(self->_osChannel, 0LL);
    if (v27)
    {
      id v28 = v27;
      id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog ClientChannel](&OBJC_CLASS___IDSFoundationLog, "ClientChannel"));
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v28;
        goto LABEL_37;
      }

      goto LABEL_38;
    }

    goto LABEL_39;
  }

  id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog ClientChannel](&OBJC_CLASS___IDSFoundationLog, "ClientChannel"));
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "writePacketBuffer: have no data to send to client",  buf,  2u);
  }

  uint64_t result = 0;
  if (self->_osChannelNeedSync && !a6)
  {
    id v23 = os_channel_sync(self->_osChannel, 0LL);
    if (v23)
    {
      id v24 = v23;
      -[IDSClientChannel osChannelInfoLog](self, "osChannelInfoLog");
      id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog ClientChannel](&OBJC_CLASS___IDSFoundationLog, "ClientChannel"));
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v24;
LABEL_37:
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "writePacketBuffer: os_channel_sync for TX failed %d",  buf,  8u);
      }

    return 0;
  }

  if (a3) {
    id v9 = a4;
  }
  else {
    id v9 = 0LL;
  }
  if (self->_closed)
  {
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog ClientChannel](&OBJC_CLASS___IDSFoundationLog, "ClientChannel"));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      uint64_t v11 = "writeBuffer: channel closed";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v11, buf, 2u);
      goto LABEL_11;
    }

    goto LABEL_11;
  }

  if (v9 | a6)
  {
    osChannelTXRing = self->_osChannelTXRing;
    if (os_channel_available_slot_count(osChannelTXRing))
    {
      *(void *)&__int16 v17 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
      __int128 v64 = v17;
      v65 = v17;
      *(_OWORD *)buf = v17;
      *(_OWORD *)&buf[16] = v17;
      next_slot = os_channel_get_next_slot(osChannelTXRing, 0LL, buf);
      if (self->_hasMetadata) {
        id v19 = a6 + 2;
      }
      else {
        id v19 = 0;
      }
      id v20 = v19 + v9;
      if (v19 + v9 > *(unsigned __int16 *)&buf[2])
      {
        id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog ClientChannel](&OBJC_CLASS___IDSFoundationLog, "ClientChannel"));
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          id v49 = 134218496;
          id v50 = v9;
          id v51 = 2048;
          id v52 = a6;
          id v53 = 2048;
          v54 = *(unsigned __int16 *)&buf[2];
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "writeBuffer: have data %lu metadata %lu to send to client but not enough bytes %lu in slot",  (uint8_t *)&v49,  0x20u);
        }

        return 1;
      }

      id v29 = next_slot;
      if (!self->_verboseFunctionalLogging)
      {
LABEL_50:
        *(_WORD *)buf = 0;
        *(_WORD *)&buf[2] = v20;
        v41 = *(void *)&buf[16];
        if (self->_hasMetadata)
        {
          **(_WORD **)&buf[16] = bswap32(a6) >> 16;
          if (a6) {
            memcpy((void *)(v41 + 2), a5, a6);
          }
          if (!(_DWORD)v9) {
            goto LABEL_57;
          }
          uint64_t v42 = (void *)(v41 + a6 + 2);
        }

        else
        {
          uint64_t v42 = *(void **)&buf[16];
        }

        memcpy(v42, a3, v9);
LABEL_57:
        uuid_copy(*(unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&buf[24], self->_flowID);
        os_channel_set_slot_properties(osChannelTXRing, v29, buf);
        v43 = os_channel_advance_slot(osChannelTXRing, v29);
        if (v43)
        {
          id v44 = v43;
          -[IDSClientChannel osChannelInfoLog](self, "osChannelInfoLog");
          uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog ClientChannel](&OBJC_CLASS___IDSFoundationLog, "ClientChannel"));
          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
          {
            id v49 = 67109120;
            LODWORD(v50) = v44;
            _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "writeBuffer: advance_slot failed for write %d",  (uint8_t *)&v49,  8u);
          }
        }

        if (a7)
        {
          self->_osChannelNeedSync = 1;
        }

        else
        {
          id v46 = os_channel_sync(self->_osChannel, 0LL);
          if (v46)
          {
            id v47 = v46;
            -[IDSClientChannel osChannelInfoLog](self, "osChannelInfoLog");
            id v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog ClientChannel](&OBJC_CLASS___IDSFoundationLog, "ClientChannel"));
            if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
            {
              id v49 = 67109120;
              LODWORD(v50) = v47;
              _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "writeBuffer: os_channel_sync for TX failed %d",  (uint8_t *)&v49,  8u);
            }
          }

          self->_osChannelNeedSync = 0;
        }

        return 1;
      }

      id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog ClientChannel](&OBJC_CLASS___IDSFoundationLog, "ClientChannel"));
      __int128 v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v9)
      {
        if (v31)
        {
          if (a3)
          {
            int v32 = *a3;
            id v33 = a3[1];
            __int16 v34 = a3[2];
            uint64_t v35 = a3[3];
          }

          else
          {
            __int16 v34 = 0;
            int v32 = 0;
            id v33 = 0;
            uint64_t v35 = 0;
          }

          id v49 = 134219520;
          id v50 = v9;
          id v51 = 2048;
          id v52 = a6;
          id v53 = 2048;
          v54 = *(unsigned __int16 *)&buf[2];
          v55 = 1024;
          uint64_t v56 = v32;
          v57 = 1024;
          v58 = v33;
          uint64_t v59 = 1024;
          id v60 = v34;
          __int128 v61 = 1024;
          __int128 v62 = v35;
          uint64_t v40 = "writeBuffer: have data %lu metadata %lu bytes %lu in slot, data [%02x%02x%02x%02x ...]";
          goto LABEL_48;
        }
      }

      else if (v31)
      {
        __int128 v36 = *(unsigned __int8 *)a5;
        uint64_t v37 = *((unsigned __int8 *)a5 + 1);
        uint64_t v38 = *((unsigned __int8 *)a5 + 2);
        id v39 = *((unsigned __int8 *)a5 + 3);
        id v49 = 134219520;
        id v50 = 0LL;
        id v51 = 2048;
        id v52 = a6;
        id v53 = 2048;
        v54 = *(unsigned __int16 *)&buf[2];
        v55 = 1024;
        uint64_t v56 = v36;
        v57 = 1024;
        v58 = v37;
        uint64_t v59 = 1024;
        id v60 = v38;
        __int128 v61 = 1024;
        __int128 v62 = v39;
        uint64_t v40 = "writeBuffer: have data %lu metadata %lu bytes %lu in slot, metadata [%02x%02x%02x%02x ...]";
LABEL_48:
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, v40, (uint8_t *)&v49, 0x38u);
      }

      goto LABEL_50;
    }

    -[IDSClientChannel osChannelInfoLog](self, "osChannelInfoLog");
    id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog ClientChannel](&OBJC_CLASS___IDSFoundationLog, "ClientChannel"));
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = v9;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = a6;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "writeBuffer: have data %lu metadata %lu to send to client but no slots",  buf,  0x16u);
    }

    if (!self->_osChannelNeedSync) {
      return 0;
    }
    __int16 v27 = os_channel_sync(self->_osChannel, 0LL);
    if (v27)
    {
      id v28 = v27;
      id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog ClientChannel](&OBJC_CLASS___IDSFoundationLog, "ClientChannel"));
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v28;
        goto LABEL_36;
      }

      goto LABEL_37;
    }

    goto LABEL_38;
  }

  id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog ClientChannel](&OBJC_CLASS___IDSFoundationLog, "ClientChannel"));
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "writeBuffer: have no data to send to client",  buf,  2u);
  }

  uint64_t result = 0;
  if (self->_osChannelNeedSync && !a7)
  {
    id v23 = os_channel_sync(self->_osChannel, 0LL);
    if (v23)
    {
      id v24 = v23;
      -[IDSClientChannel osChannelInfoLog](self, "osChannelInfoLog");
      id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog ClientChannel](&OBJC_CLASS___IDSFoundationLog, "ClientChannel"));
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v24;
LABEL_36:
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "writeBuffer: os_channel_sync for TX failed %d",  buf,  8u);
      }

  id v23 = v18;
LABEL_20:

  return v23;
}

  -[NSMutableArray addObject:](self->_outgoingMessageArray, "addObject:", v6);
LABEL_12:
  if (!-[NSData length](self->_outgoingData, "length")) {
    -[IDSSocketPairConnection _queueNextOutgoingData](self, "_queueNextOutgoingData");
  }
  os_unfair_lock_unlock(&self->_lock);
  IDSTransportThreadInitWithPriority(self->_priority);
  priority = self->_priority;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  v17[2] = sub_100048828;
  v17[3] = &unk_1008F7948;
  v17[4] = self;
  IDSTransportThreadAddBlockWithPriority(priority, v17);

  return 1;
}

  return (char)v3;
}

    return 0;
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCTAdapter sharedInstance](&OBJC_CLASS___IDSCTAdapter, "sharedInstance"));
  if (![v4 isAnySIMUsable])
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[IMMobileNetworkManager sharedInstance](&OBJC_CLASS___IMMobileNetworkManager, "sharedInstance"));
    id v9 = [v8 requiresSIMInserted];

    if (!v9) {
      return 1;
    }
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = 0;
      id v6 = " SIM is not inserted, cannot register";
      id v7 = (uint8_t *)&v11;
      goto LABEL_10;
    }

    goto LABEL_11;
  }

  return 1;
}

  return v4;
}

  return v4;
}

  int8x16_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _provisionedTemporaryUser]);
  if ([v14 finishedRegistration]
    && ([v14 hasNotifiedSuccess] & 1) == 0)
  {
    [*(id *)(a1 + 40) _notifyHomeNumberSuccessForUser:v14];
  }

  [*(id *)(a1 + 40) setDisplayingAddNumberPrompt:0];
}
}

    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMIDSLog daemon](&OBJC_CLASS___IMIDSLog, "daemon"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Quit - notifying about shutdown", buf, 2u);
    }

    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v8, "__mainThreadPostNotificationName:object:", @"IDSDaemonShutdownNotification", 0);

    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMIDSLog daemon](&OBJC_CLASS___IMIDSLog, "daemon"));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Quit - shutting down daemon", v26, 2u);
    }

    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
    [v10 shutdown];

    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMIDSLog daemon](&OBJC_CLASS___IMIDSLog, "daemon"));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Quit - goodbye!", v25, 2u);
    }
}

    goto LABEL_12;
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 object]);
  id v10 = -[IDSTTLCache _delegate_shouldEvictObject:forKey:](self, "_delegate_shouldEvictObject:forKey:", v9, v4);

  if (!v10)
  {
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utilities](&OBJC_CLASS___IDSFoundationLog, "utilities"));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 138477827;
      id v16 = v4;
      int8x16_t v14 = "Delegate return NO to shouldEvict -- Bail {key: %{private}@}";
      goto LABEL_10;
    }

    goto LABEL_11;
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(-[IDSTTLCache backingStore](self, "backingStore"));
  [v11 removeObjectForKey:v4];

  id v12 = (void *)objc_claimAutoreleasedReturnValue([v8 object]);
  -[IDSTTLCache _delegate_DidEvictObject:forKey:](self, "_delegate_DidEvictObject:forKey:", v12, v4);

  -[IDSTTLCache _stopEvictionTimerIfEmpty](self, "_stopEvictionTimerIfEmpty");
LABEL_12:
}

  return (unint64_t)v6;
}

  os_unfair_lock_unlock(p_lock);
  return v10;
}

  os_activity_scope_leave(&state);
  cut_arc_os_release(&v44);
}
}
}

  id v19 = *(void *)(a1 + 56);
  id v20 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSSigningErrorDomain,  10LL,  0LL));
  (*(void (**)(uint64_t, void, id))(v19 + 16))(v19, 0LL, v20);
}

  if (v11) {
    v11[2](v11, 0LL);
  }
LABEL_50:
}

LABEL_12:
      return;
    case 3u:
      if ((unint64_t)v14 <= 0xA)
      {
        id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
          *(_DWORD *)buf = 138412290;
          v401 = v36;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%@: UTCMType_CloseChannel insufficient header",  buf,  0xCu);
        }

        goto LABEL_11;
      }

      __int128 v62 = __rev16(*(unsigned __int16 *)(v13 + 1));
      __int128 v63 = __rev16(*(unsigned __int16 *)(v13 + 3));
      __int128 v64 = __rev16(*(unsigned __int16 *)(v13 + 5));
      v65 = __rev16(*(unsigned __int16 *)(v13 + 7));
      id v66 = __rev16(*(unsigned __int16 *)(v13 + 9));
      v67 = v62 + v63 + v64 + v65 + v66 + 11;
      if (v14 != (char *)v67)
      {
        id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          v99 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
          *(_DWORD *)buf = 138412802;
          v401 = v99;
          v402 = 1024;
          *(_DWORD *)v403 = (_DWORD)v16;
          *(_WORD *)&v403[4] = 2048;
          *(void *)&v403[6] = v67;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%@: UTCMType_CloseChannel unexpected size (%u != %lu)",  buf,  0x1Cu);
        }

        goto LABEL_11;
      }

      if ((_DWORD)v62)
      {
        v54 = -[NSString initWithBytes:length:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytes:length:encoding:",  v13 + 11,  v62,  4LL);
        if (!v54)
        {
          v54 = (NSString *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
          if (os_log_type_enabled((os_log_t)v54, OS_LOG_TYPE_DEFAULT))
          {
            v68 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
            *(_DWORD *)buf = 138412290;
            v401 = v68;
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v54,  OS_LOG_TYPE_DEFAULT,  "%@: UTCMType_CloseChannel cannot decode remoteConnectionGUID",  buf,  0xCu);
          }

          goto LABEL_123;
        }
      }

      else
      {
        v54 = 0LL;
      }

      if ((_DWORD)v63)
      {
        id v121 = -[NSString initWithBytes:length:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytes:length:encoding:",  &v13[v62 + 11],  v63,  4LL);
        if (!v121)
        {
          id v121 = (NSString *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
          if (os_log_type_enabled((os_log_t)v121, OS_LOG_TYPE_DEFAULT))
          {
            id v122 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
            *(_DWORD *)buf = 138412290;
            v401 = v122;
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v121,  OS_LOG_TYPE_DEFAULT,  "%@: UTCMType_CloseChannel cannot decode localConnectionGUID",  buf,  0xCu);
          }

          goto LABEL_252;
        }
      }

      else
      {
        id v121 = 0LL;
      }

      v389 = -[NSString initWithBytes:length:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytes:length:encoding:",  &v13[v62 + 11 + v63],  v64,  4LL);
      if (!v389)
      {
        __int128 v129 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
        {
          v144 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
          *(_DWORD *)buf = 138412290;
          v401 = v144;
          _os_log_impl( (void *)&_mh_execute_header,  v129,  OS_LOG_TYPE_DEFAULT,  "%@: UTCMType_CloseChannel cannot decode account",  buf,  0xCu);
        }

        goto LABEL_251;
      }

      __int128 v128 = &v13[v62 + 11 + v63 + v64];
      __int128 v129 = -[NSString initWithBytes:length:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytes:length:encoding:",  v128,  v65,  4LL);
      if (!v129)
      {
        __int128 v130 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
        {
          v160 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
          *(_DWORD *)buf = 138412290;
          v401 = v160;
          _os_log_impl( (void *)&_mh_execute_header,  v130,  OS_LOG_TYPE_DEFAULT,  "%@: UTCMType_CloseChannel cannot decode service",  buf,  0xCu);
        }

        goto LABEL_250;
      }

      __int128 v130 = -[NSString initWithBytes:length:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytes:length:encoding:",  &v128[v65],  v66,  4LL);
      if (!v130)
      {
        __int128 v131 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
        {
          v183 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
          *(_DWORD *)buf = 138412290;
          v401 = v183;
          _os_log_impl( (void *)&_mh_execute_header,  v131,  OS_LOG_TYPE_DEFAULT,  "%@: UTCMType_CloseChannel cannot decode name",  buf,  0xCu);
        }

        goto LABEL_249;
      }

      __int128 v131 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSGenericConnectionID idWithAccount:service:name:]( &OBJC_CLASS___IDSGenericConnectionID,  "idWithAccount:service:name:",  v389,  v129,  v130));
      __int128 v132 = (void *)objc_claimAutoreleasedReturnValue([v393 connectionsByID]);
      v385 = (NSString *)objc_claimAutoreleasedReturnValue([v132 objectForKey:v131]);

      char v133 = OSLogHandleForTransportCategory("UTun-oversized");
      __int128 v134 = (os_log_s *)objc_claimAutoreleasedReturnValue(v133);
      if (os_log_type_enabled(v134, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v135 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
        *(_DWORD *)buf = 138414082;
        v401 = v135;
        v402 = 2112;
        *(void *)v403 = v121;
        *(_WORD *)&v403[8] = 2112;
        *(void *)&v403[10] = v54;
        *(_WORD *)&v403[18] = 2112;
        *(void *)&v403[20] = v389;
        *(_WORD *)v404 = 2112;
        *(void *)&v404[2] = v129;
        *(_WORD *)v405 = 2112;
        *(void *)&v405[2] = v130;
        *(_WORD *)v406 = 2112;
        *(void *)&v406[2] = v385;
        *(_WORD *)v407 = 2112;
        *(void *)&v407[2] = v393;
        _os_log_impl( (void *)&_mh_execute_header,  v134,  OS_LOG_TYPE_DEFAULT,  "%@: got control message: close channel localConnectionGUID[%@] remoteConnectionGUID[%@] account:[%@] service[% @] name[%@] for connection[%@] deviceInfo[%@]",  buf,  0x52u);
      }

      __int128 v137 = os_log_shim_legacy_logging_enabled(v136);
      if ((_DWORD)v137)
      {
        if (_IDSShouldLogTransport(v137))
        {
          v350 = v385;
          v351 = (NSString *)v393;
          v348 = v129;
          v349 = v130;
          v346 = v54;
          v347 = v389;
          v328 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
          v345 = v121;
          _IDSLogTransport( @"UTun-oversized",  @"IDS",  @"%@: got control message: close channel localConnectionGUID[%@] remoteConnectionGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]");

          if (_IDSShouldLog(0LL, @"UTun-oversized"))
          {
            __int128 v138 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v393, "vifName", v328, v121, v54, v389, v129, v130, v385, v393));
            v350 = v385;
            v351 = (NSString *)v393;
            v348 = v129;
            v349 = v130;
            v346 = v54;
            v347 = v389;
            v328 = v138;
            v345 = v121;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"UTun-oversized",  @"%@: got control message: close channel localConnectionGUID[%@] remoteConnectionGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]");
          }
        }
      }

      if (!v385) {
        goto LABEL_248;
      }
      __int128 v139 = (void *)objc_claimAutoreleasedReturnValue(-[NSString remoteConnectionGUID](v385, "remoteConnectionGUID"));
      __int128 v140 = [v139 isEqualToString:v54];

      if (v140)
      {
      }

      else
      {
        v217 = (void *)objc_claimAutoreleasedReturnValue(-[NSString localConnectionGUID](v385, "localConnectionGUID"));
        v218 = [v217 isEqualToString:v121];

        v219 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v219, OS_LOG_TYPE_FAULT)) {
          sub_1006A874C(v219, v220, v221, v222, v223, v224, v225, v226);
        }
      }

      v227 = objc_msgSend(v393, "portMap", v328, v345, v346, v347, v348, v349, v350, v351);
      v228 = (void *)objc_claimAutoreleasedReturnValue(-[NSString addressPair](v385, "addressPair"));
      v229 = (void *)objc_claimAutoreleasedReturnValue([v228 localAddress]);
      -[IDSUTunController releasePortIfNecessary:port:]( v390,  "releasePortIfNecessary:port:",  v227,  [v229 saPortHostOrder]);

      -[IDSUTunController removeConnection:fromDeviceConnectionInfo:removeCode:removeReason:]( v390,  "removeConnection:fromDeviceConnectionInfo:removeCode:removeReason:",  v385,  v393,  5051LL,  @"remote close");
      -[IDSUTunController checkSuspendTrafficForDevice:wait:](v390, "checkSuspendTrafficForDevice:wait:", v393, 1LL);
LABEL_248:

LABEL_249:
LABEL_250:

LABEL_251:
LABEL_252:

      goto LABEL_123;
    case 4u:
      -[IDSUTunController processCompressionRequest:fromDeviceConnectionInfo:]( v390,  "processCompressionRequest:fromDeviceConnectionInfo:",  v394,  v393);
      goto LABEL_12;
    case 5u:
      -[IDSUTunController processCompressionResponse:fromDeviceConnectionInfo:]( v390,  "processCompressionResponse:fromDeviceConnectionInfo:",  v394,  v393);
      goto LABEL_12;
    case 6u:
      if ((unint64_t)v14 <= 0x17)
      {
        id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          id v48 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
          *(_DWORD *)buf = 138412290;
          v401 = v48;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%@: SetupEncryptedChannel insufficient header",  buf,  0xCu);
        }

        goto LABEL_11;
      }

      v69 = __rev16(*((unsigned __int16 *)v13 + 3));
      uint64_t v70 = __rev16(*((unsigned __int16 *)v13 + 5));
      v71 = __rev16(*((unsigned __int16 *)v13 + 6));
      v72 = __rev16(*((unsigned __int16 *)v13 + 7));
      uint64_t v73 = __rev16(*((unsigned __int16 *)v13 + 11));
      if (!(_DWORD)v69 || !(_DWORD)v70 || !(_DWORD)v71 || !(_DWORD)v72 || !(_DWORD)v73)
      {
        uint64_t v100 = v73;
        id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          v101 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
          *(_DWORD *)buf = 138413570;
          v401 = v101;
          v402 = 1024;
          *(_DWORD *)v403 = v69;
          *(_WORD *)&v403[4] = 1024;
          *(_DWORD *)&v403[6] = v70;
          *(_WORD *)&v403[10] = 1024;
          *(_DWORD *)&v403[12] = v71;
          *(_WORD *)&v403[16] = 1024;
          *(_DWORD *)&v403[18] = v72;
          *(_WORD *)&v403[22] = 1024;
          *(_DWORD *)&v403[24] = v100;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%@: SetupEncryptedChannel unexpected remoteGUID/account/service/name/key lengths (%u, %u, %u, %u, %u)",  buf,  0x2Au);
        }

        goto LABEL_11;
      }

      uint64_t v74 = __rev16(*((unsigned __int16 *)v13 + 4));
      v75 = v69 + v74 + v70 + v71 + v72 + v73 + 24;
      if (v14 != (char *)v75)
      {
        id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          v118 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
          *(_DWORD *)buf = 138412802;
          v401 = v118;
          v402 = 1024;
          *(_DWORD *)v403 = (_DWORD)v16;
          *(_WORD *)&v403[4] = 2048;
          *(void *)&v403[6] = v75;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%@: SetupEncryptedChannel unexpected size (%u != %lu)",  buf,  0x1Cu);
        }

        goto LABEL_11;
      }

      v362 = v73;
      v376 = (NSString *)v13[1];
      v379 = v72;
      v370 = *((unsigned __int16 *)v13 + 1);
      v373 = *((unsigned __int16 *)v13 + 2);
      v364 = *((_DWORD *)v13 + 4);
      v367 = *((unsigned __int16 *)v13 + 10);
      v76 = -[NSString initWithBytes:length:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytes:length:encoding:",  v13 + 24,  v69,  4LL);
      if (!v76)
      {
        v145 = OSLogHandleForTransportCategory("IDSNetworking");
        __int16 v146 = (os_log_s *)objc_claimAutoreleasedReturnValue(v145);
        if (os_log_type_enabled(v146, OS_LOG_TYPE_DEFAULT))
        {
          v147 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
          *(_DWORD *)buf = 138412290;
          v401 = v147;
          _os_log_impl( (void *)&_mh_execute_header,  v146,  OS_LOG_TYPE_DEFAULT,  "%@: SetupEncryptedChannel cannot decode remoteConnectionGUID",  buf,  0xCu);
        }

        v149 = os_log_shim_legacy_logging_enabled(v148);
        if ((_DWORD)v149)
        {
          if (_IDSShouldLogTransport(v149))
          {
            v330 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
            _IDSLogTransport( @"IDSNetworking",  @"IDS",  @"%@: SetupEncryptedChannel cannot decode remoteConnectionGUID");

            if (_IDSShouldLog(0LL, @"IDSNetworking"))
            {
              v331 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v393, "vifName", v330));
              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSNetworking",  @"%@: SetupEncryptedChannel cannot decode remoteConnectionGUID");
            }
          }
        }

        goto LABEL_335;
      }

      uint64_t v77 = &v13[v69 + 24];
      if ((_DWORD)v74)
      {
        v388 = -[NSString initWithBytes:length:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytes:length:encoding:",  &v13[v69 + 24],  v74,  4LL);
        if (!v388)
        {
          v184 = OSLogHandleForTransportCategory("IDSNetworking");
          v185 = (os_log_s *)objc_claimAutoreleasedReturnValue(v184);
          if (os_log_type_enabled(v185, OS_LOG_TYPE_DEFAULT))
          {
            v186 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
            *(_DWORD *)buf = 138412290;
            v401 = v186;
            _os_log_impl( (void *)&_mh_execute_header,  v185,  OS_LOG_TYPE_DEFAULT,  "%@: SetupEncryptedChannel cannot decode account",  buf,  0xCu);
          }

          v188 = os_log_shim_legacy_logging_enabled(v187);
          if ((_DWORD)v188)
          {
            if (_IDSShouldLogTransport(v188))
            {
              v338 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
              _IDSLogTransport( @"IDSNetworking",  @"IDS",  @"%@: SetupEncryptedChannel cannot decode account");

              if (_IDSShouldLog(0LL, @"IDSNetworking"))
              {
                v339 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v393, "vifName", v338));
                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSNetworking",  @"%@: SetupEncryptedChannel cannot decode account");
              }
            }
          }

          goto LABEL_335;
        }

        v77 += v74;
      }

      else
      {
        v388 = 0LL;
      }

      v386 = -[NSString initWithBytes:length:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytes:length:encoding:",  v77,  v70,  4LL);
      if (!v386)
      {
        v178 = OSLogHandleForTransportCategory("IDSNetworking");
        v179 = (os_log_s *)objc_claimAutoreleasedReturnValue(v178);
        if (os_log_type_enabled(v179, OS_LOG_TYPE_DEFAULT))
        {
          v180 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
          *(_DWORD *)buf = 138412290;
          v401 = v180;
          _os_log_impl( (void *)&_mh_execute_header,  v179,  OS_LOG_TYPE_DEFAULT,  "%@: SetupEncryptedChannel cannot decode remoteConnectionGUID",  buf,  0xCu);
        }

        v182 = os_log_shim_legacy_logging_enabled(v181);
        if ((_DWORD)v182)
        {
          if (_IDSShouldLogTransport(v182))
          {
            v336 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
            _IDSLogTransport( @"IDSNetworking",  @"IDS",  @"%@: SetupEncryptedChannel cannot decode remoteConnectionGUID");

            if (_IDSShouldLog(0LL, @"IDSNetworking"))
            {
              v337 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v393, "vifName", v336));
              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSNetworking",  @"%@: SetupEncryptedChannel cannot decode remoteConnectionGUID");
            }
          }
        }

        goto LABEL_322;
      }

      v161 = &v77[v70];
      v382 = -[NSString initWithBytes:length:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytes:length:encoding:",  &v77[v70],  v71,  4LL);
      if (!v382)
      {
        v211 = OSLogHandleForTransportCategory("IDSNetworking");
        v212 = (os_log_s *)objc_claimAutoreleasedReturnValue(v211);
        if (os_log_type_enabled(v212, OS_LOG_TYPE_DEFAULT))
        {
          v213 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
          *(_DWORD *)buf = 138412290;
          v401 = v213;
          _os_log_impl( (void *)&_mh_execute_header,  v212,  OS_LOG_TYPE_DEFAULT,  "%@: SetupEncryptedChannel cannot decode service",  buf,  0xCu);
        }

        v215 = os_log_shim_legacy_logging_enabled(v214);
        if (!(_DWORD)v215) {
          goto LABEL_321;
        }
        v342 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
        _IDSLogTransport(@"IDSNetworking", @"IDS", @"%@: SetupEncryptedChannel cannot decode service");

        v216 = (NSString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v393, "vifName", v342));
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSNetworking",  @"%@: SetupEncryptedChannel cannot decode service");
LABEL_320:

LABEL_321:
LABEL_322:

        goto LABEL_335;
      }

      v162 = &v161[v71];
      v361 = -[NSString initWithBytes:length:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytes:length:encoding:",  &v161[v71],  v379,  4LL);
      if (!v361)
      {
        v230 = OSLogHandleForTransportCategory("IDSNetworking");
        v231 = (os_log_s *)objc_claimAutoreleasedReturnValue(v230);
        if (os_log_type_enabled(v231, OS_LOG_TYPE_DEFAULT))
        {
          v232 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
          *(_DWORD *)buf = 138412290;
          v401 = v232;
          _os_log_impl( (void *)&_mh_execute_header,  v231,  OS_LOG_TYPE_DEFAULT,  "%@: SetupEncryptedChannel cannot decode name",  buf,  0xCu);
        }

        v234 = os_log_shim_legacy_logging_enabled(v233);
        if ((_DWORD)v234)
        {
          if (_IDSShouldLogTransport(v234))
          {
            v343 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
            _IDSLogTransport( @"IDSNetworking",  @"IDS",  @"%@: SetupEncryptedChannel cannot decode name");

            if (_IDSShouldLog(0LL, @"IDSNetworking"))
            {
              v344 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v393, "vifName", v343));
              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSNetworking",  @"%@: SetupEncryptedChannel cannot decode name");
            }
          }
        }

        goto LABEL_319;
      }

      v360 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGenericConnectionID idWithAccount:service:name:]( &OBJC_CLASS___IDSGenericConnectionID,  "idWithAccount:service:name:",  v386,  v382));
      v163 = (void *)objc_claimAutoreleasedReturnValue([v393 connectionsByID]);
      v164 = (os_log_s *)objc_claimAutoreleasedReturnValue([v163 objectForKey:v360]);

      v165 = (void *)objc_claimAutoreleasedReturnValue([v393 localSA]);
      v358 = (void *)__rev16(v373);
      v375 = (void *)objc_claimAutoreleasedReturnValue( +[IDSSockAddrWrapper wrapperWithWrapper:andPortHostOrder:]( &OBJC_CLASS___IDSSockAddrWrapper,  "wrapperWithWrapper:andPortHostOrder:",  v165));

      v166 = (void *)objc_claimAutoreleasedReturnValue([v393 remoteSA]);
      v357 = (void *)__rev16(v370);
      v371 = (void *)objc_claimAutoreleasedReturnValue( +[IDSSockAddrWrapper wrapperWithWrapper:andPortHostOrder:]( &OBJC_CLASS___IDSSockAddrWrapper,  "wrapperWithWrapper:andPortHostOrder:",  v166));

      v359 = (void *)objc_claimAutoreleasedReturnValue( +[IDSSockAddrWrapperPair wrapperPairWithLocalAddress:remoteAddress:]( &OBJC_CLASS___IDSSockAddrWrapperPair,  "wrapperPairWithLocalAddress:remoteAddress:",  v375,  v371));
      v365 = (NSString *)bswap32(v364);
      v368 = (NSString *)__rev16(v367);
      v167 = OSLogHandleForTransportCategory("UTun-oversized");
      v168 = (os_log_s *)objc_claimAutoreleasedReturnValue(v167);
      if (os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT))
      {
        v169 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
        *(_DWORD *)buf = 138415362;
        v401 = v169;
        v402 = 1024;
        *(_DWORD *)v403 = (_DWORD)v365;
        *(_WORD *)&v403[4] = 1024;
        *(_DWORD *)&v403[6] = (_DWORD)v368;
        *(_WORD *)&v403[10] = 1024;
        *(_DWORD *)&v403[12] = (_DWORD)v376;
        *(_WORD *)&v403[16] = 1024;
        *(_DWORD *)&v403[18] = (_DWORD)v358;
        *(_WORD *)&v403[22] = 1024;
        *(_DWORD *)&v403[24] = (_DWORD)v357;
        *(_WORD *)v404 = 2112;
        *(void *)&v404[2] = v76;
        *(_WORD *)v405 = 2112;
        *(void *)&v405[2] = v388;
        *(_WORD *)v406 = 2112;
        *(void *)&v406[2] = v386;
        *(_WORD *)v407 = 2112;
        *(void *)&v407[2] = v382;
        *(_WORD *)v408 = 2112;
        *(void *)&v408[2] = v361;
        *(_WORD *)v409 = 2112;
        *(void *)&v409[2] = v164;
        v410 = 2112;
        v411 = v393;
        _os_log_impl( (void *)&_mh_execute_header,  v168,  OS_LOG_TYPE_DEFAULT,  "%@: got control message: setup encrypted channel ssrc:%08x startSeq:%04x proto:%d ports[%u:::%u] remoteGUID[%@ ] forLocalGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]",  buf,  0x70u);
      }

      v171 = os_log_shim_legacy_logging_enabled(v170);
      if ((_DWORD)v171)
      {
        if (_IDSShouldLogTransport(v171))
        {
          v355 = v164;
          v356 = v393;
          v353 = v382;
          v354 = v361;
          v351 = v388;
          v352 = v386;
          v349 = v357;
          v350 = v76;
          v347 = v376;
          v348 = v358;
          v345 = v365;
          v346 = v368;
          v328 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
          _IDSLogTransport( @"UTun-oversized",  @"IDS",  @"%@: got control message: setup encrypted channel ssrc:%08x startSeq:%04x proto:%d ports[%u:::%u] remoteGUID[%@] forLocalGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]");

          if (_IDSShouldLog(0LL, @"UTun-oversized"))
          {
            v172 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v393,  "vifName",  v328,  v365,  v368,  v376,  v358,  v357,  v76,  v388,  v386,  v382,  v361,  v164,  v393));
            v355 = v164;
            v356 = v393;
            v353 = v382;
            v354 = v361;
            v351 = v388;
            v352 = v386;
            v349 = v357;
            v350 = v76;
            v348 = v358;
            v346 = v368;
            v347 = v376;
            v328 = v172;
            v345 = v365;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"UTun-oversized",  @"%@: got control message: setup encrypted channel ssrc:%08x startSeq:%04x proto:%d ports[%u:::%u] remoteGUID[%@] forLocalGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]");
          }
        }
      }

      if (v388 && !v164)
      {
        v164 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v164, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v164,  OS_LOG_TYPE_DEFAULT,  "control message in reply to cleaned up connection",  buf,  2u);
        }

        goto LABEL_318;
      }

      if (v388 && v164)
      {
        v235 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s localConnectionGUID](v164, "localConnectionGUID"));
        v236 = [v235 isEqualToString:v388];

        if ((v236 & 1) == 0)
        {
          v237 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
          if (os_log_type_enabled(v237, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v237,  OS_LOG_TYPE_DEFAULT,  "control message not for current connection - assume local is current for now (message is old) and send Clo seChannel for remote attempt",  buf,  2u);
          }

          v238 = (void *)objc_claimAutoreleasedReturnValue([v393 controlChannel]);
          v239 = sub_10032ED20(0LL, v76, v386, v382, v361);
          v240 = (void *)objc_claimAutoreleasedReturnValue(v239);
          [v238 sendMessage:v240];

          goto LABEL_318;
        }
      }

      else if (!v164)
      {
        goto LABEL_304;
      }

      v252 = (void *)objc_claimAutoreleasedReturnValue( -[os_log_s localConnectionGUID]( v164,  "localConnectionGUID",  v328,  v345,  v346,  v347,  v348,  v349,  v350,  v351,  v352,  v353,  v354,  v355,  v356));
      if (-[NSString isEqualToString:](v388, "isEqualToString:", v252))
      {
        v253 = (-[os_log_s stateFlags](v164, "stateFlags") & 8) == 0;

        if (!v253)
        {
          v254 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
          if (os_log_type_enabled(v254, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v254,  OS_LOG_TYPE_DEFAULT,  "control message repeated for current connection - assume local is current and remote reconciled",  buf,  2u);
          }

  objc_autoreleasePoolPop(v3);
  return v5;
}

    goto LABEL_12;
  }

  LOBYTE(v9) = 1;
LABEL_12:

  return v9;
}

  if (*a1 != (_DWORD)v7)
  {
    int v15 = a1[4];
    goto LABEL_20;
  }

  id v8 = (char *)realloc(*((void **)a1 + 1), 32 * v7);
  id v16 = (os_log_s *)+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController");
  __int16 v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (v17)
    {
      id v18 = *a1;
      id v24 = 67109376;
      *(_DWORD *)id v25 = v18;
      *(_WORD *)&void v25[4] = 1024;
      *(_DWORD *)&v25[6] = 2 * v7;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "UI32Table_Set: table resize from %d to %d",  (uint8_t *)&v24,  0xEu);
    }

    *((void *)a1 + 1) = v8;
    *a1 = 2 * v7;
    int v15 = a1[4];
    goto LABEL_20;
  }

  if (v17)
  {
    id v24 = 138412290;
    *(void *)id v25 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "UI32Table_Set: cannot allocate memory for %@",  (uint8_t *)&v24,  0xCu);
  }
}

    v15[(v9 >> 6) + 8] |= 1LL << v9;
    id v20 = 8 * v9;
    *(void *)(v15[6] + v20) = a2;
    *(void *)(v15[7] + v20) = a1;
    id v21 = v15[2];
    id v22 = __OFADD__(v21, 1LL);
    id v23 = v21 + 1;
    if (!v22)
    {
      v15[2] = v23;
      return a2;
    }

    goto LABEL_14;
  }

  sub_100418370(v12, a3 & 1);
  id v18 = sub_100417D64((uint64_t)a2);
  if ((v13 & 1) == (v19 & 1))
  {
    id v9 = v18;
    int v15 = (void *)*v4;
    if ((v13 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v16[(v10 >> 6) + 8] |= 1LL << v10;
    *(_DWORD *)(v16[6] + 4 * v10) = a2;
    *(void *)(v16[7] + 8 * v10) = a1;
    id v20 = v16[2];
    id v21 = __OFADD__(v20, 1LL);
    id v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return;
    }

    goto LABEL_14;
  }

  sub_100418CAC(v13, a3 & 1);
  id v18 = sub_100417D0C(a2);
  if ((v14 & 1) == (v19 & 1))
  {
    id v10 = v18;
    id v16 = (void *)*v4;
    if ((v14 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    *(void *)(v18[6] + 8 * v12) = a3;
    id v21 = (void *)(v18[7] + 16 * v12);
    void *v21 = a1;
    v21[1] = a2;
    id v22 = v18[2];
    id v23 = __OFADD__(v22, 1LL);
    id v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      return result;
    }

    goto LABEL_14;
  }

  sub_100418F7C(result, a4 & 1);
  uint64_t result = sub_100417DF8(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    id v12 = result;
    id v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v16[(v10 >> 6) + 8] |= 1LL << v10;
    id v19 = 8 * v10;
    *(void *)(v16[6] + v19) = a2;
    *(void *)(v16[7] + v19) = a1;
    id v20 = v16[2];
    id v21 = __OFADD__(v20, 1LL);
    id v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return result;
    }

    goto LABEL_14;
  }

  sub_100434620(result, a3 & 1);
  uint64_t result = sub_100417DF8(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    id v10 = result;
    id v16 = (void *)*v4;
    if ((v14 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v17[(v11 >> 6) + 8] |= 1LL << v11;
    id v22 = (void *)(v17[6] + 16 * v11);
    *id v22 = a2;
    v22[1] = a3;
    *(void *)(v17[7] + 8 * v11) = a1;
    id v23 = v17[2];
    id v24 = __OFADD__(v23, 1LL);
    id v25 = v23 + 1;
    if (!v24)
    {
      v17[2] = v25;
      id v26 = a2;
      return a3;
    }

    goto LABEL_14;
  }

  sub_10046DF30(v14, a4 & 1);
  id v20 = sub_10046D590(a2, a3);
  if ((v15 & 1) == (v21 & 1))
  {
    uint64_t v11 = v20;
    __int16 v17 = (void *)*v5;
    if ((v15 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    id v21 = (uint64_t *)(v18[6] + 16 * v12);
    void *v21 = a2;
    v21[1] = a3;
    *(_BYTE *)(v18[7] + v12) = a1 & 1;
    id v22 = v18[2];
    id v23 = __OFADD__(v22, 1LL);
    id v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  sub_10049B004(v15, a4 & 1);
  id v19 = sub_100417D94(a2, a3);
  if ((v16 & 1) == (v20 & 1))
  {
    id v12 = v19;
    id v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    id v22 = (uint64_t *)(v18[6] + 16 * v12);
    *id v22 = a2;
    v22[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    id v23 = v18[2];
    id v24 = __OFADD__(v23, 1LL);
    id v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  sub_10049B30C(v15, a4 & 1);
  id v20 = sub_100417D94(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    id v12 = v20;
    id v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

              sub_10041D3BC(v28);

              id v1 = v60;
              id v9 = v63;
              id v7 = v64;
              continue;
            }
          }
        }
      }

  id v16 = *(void *)(*(void *)(v4 + 56) + 8 * a1);
  sub_100434BD0(a1, v4);
  __int16 v17 = *v2;
  *unint64_t v2 = v4;
  swift_bridgeObjectRelease(v17);
  return v16;
}

  id v16 = *(void *)(*(void *)(v4 + 56) + 8 * a1);
  sub_100434BD0(a1, v4);
  __int16 v17 = *v2;
  *unint64_t v2 = v4;
  swift_bridgeObjectRelease(v17);
  return v16;
}

    v23[(v17 >> 6) + 8] |= 1LL << v17;
    __int16 v27 = 8 * v17;
    *(void *)(v23[6] + v27) = a2;
    *(void *)(v23[7] + v27) = a1;
    id v28 = v23[2];
    id v29 = __OFADD__(v28, 1LL);
    id v30 = v28 + 1;
    if (!v29)
    {
      v23[2] = v30;
      __int128 v31 = a2;
      return;
    }

    goto LABEL_14;
  }

  sub_1004AF9E4(v20, a3 & 1, a5);
  id v25 = a4(a2);
  if ((v21 & 1) == (v26 & 1))
  {
    __int16 v17 = v25;
    id v23 = (void *)*v12;
    if ((v21 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v16[(v10 >> 6) + 8] |= 1LL << v10;
    id v20 = 8 * v10;
    *(void *)(v16[6] + v20) = a2;
    *(void *)(v16[7] + v20) = a1;
    id v21 = v16[2];
    id v22 = __OFADD__(v21, 1LL);
    id v23 = v21 + 1;
    if (!v22)
    {
      v16[2] = v23;
      return;
    }

    goto LABEL_14;
  }

  sub_1004AFCB0(v13, a3 & 1);
  id v18 = sub_100417DF8(a2);
  if ((v14 & 1) == (v19 & 1))
  {
    id v10 = v18;
    id v16 = (void *)*v4;
    if ((v14 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    id v22 = (uint64_t *)(v18[6] + 16 * v12);
    *id v22 = a2;
    v22[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    id v23 = v18[2];
    id v24 = __OFADD__(v23, 1LL);
    id v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  sub_1004AFF60(v15, a4 & 1);
  id v20 = sub_100417D94(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    id v12 = v20;
    id v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v16[(v10 >> 6) + 8] |= 1LL << v10;
    id v20 = 8 * v10;
    *(void *)(v16[6] + v20) = a2;
    *(void *)(v16[7] + v20) = a1;
    id v21 = v16[2];
    id v22 = __OFADD__(v21, 1LL);
    id v23 = v21 + 1;
    if (!v22)
    {
      v16[2] = v23;
      return;
    }

    goto LABEL_14;
  }

  sub_1004C4FCC(v13, a3 & 1);
  id v18 = sub_100417DF8(a2);
  if ((v14 & 1) == (v19 & 1))
  {
    id v10 = v18;
    id v16 = (void *)*v4;
    if ((v14 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v15[(v9 >> 6) + 8] |= 1LL << v9;
    id v19 = 8 * v9;
    *(void *)(v15[6] + v19) = a2;
    *(void *)(v15[7] + v19) = a1;
    id v20 = v15[2];
    id v21 = __OFADD__(v20, 1LL);
    id v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      id v23 = a2;
      return;
    }

    goto LABEL_14;
  }

  sub_10050960C(v12, a3 & 1);
  __int16 v17 = sub_100504874((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    id v9 = v17;
    int v15 = (void *)*v4;
    if ((v13 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

LABEL_12:
  -[NSRecursiveLock unlock](self->_lock, "unlock");
}

  return Mutable;
}
}

  objc_autoreleasePoolPop(v10);
  return v12;
}

  __int128 v63 = (void *)objc_claimAutoreleasedReturnValue([v68 objectForKeyedSubscript:IDSDataChannelProbingLinkIDsKey]);
  id v66 = [v63 count];
  if (v66)
  {
    v83 = 0u;
    uint64_t v84 = 0u;
    v81 = 0u;
    uint64_t v82 = 0u;
    id obj = v63;
    v76 = [obj countByEnumeratingWithState:&v81 objects:v95 count:16];
    if (v76)
    {
      uint64_t v77 = 0;
      uint64_t v11 = 0LL;
      key = (void *)IDSDataChannelTimeStampKey;
      v72 = (void *)IDSDataChannelNumberReorderedPacketsKey;
      uint64_t v70 = (void *)IDSDataChannelNumberResponseKey;
      v71 = (void *)IDSDataChannelNumberRequestsKey;
      v69 = (void *)IDSDataChannelProbingRequestOffsetAndRTTKey;
      __int128 v64 = *(void *)v82;
      id v12 = *(void *)v82;
      while (1)
      {
        if (v12 != v64)
        {
          uint64_t v13 = v11;
          objc_enumerationMutation(obj);
          uint64_t v11 = v13;
        }

        v75 = v11;
        int8x16_t v14 = *(void **)(*((void *)&v81 + 1) + 8 * v11);
        bzero(buf, 0x1000uLL);
        int v15 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue([v68 objectForKeyedSubscript:v14]);
        buf[3] = v66;
        uint64_t v78 = v77 + 1;
        v91[0] = v77 + 1;
        v91[1] = [v14 charValue];
        if (v15) {
          id v16 = key != 0LL;
        }
        else {
          id v16 = 0;
        }
        if (v16) {
          Value = (void *)CFDictionaryGetValue(v15, key);
        }
        else {
          Value = 0LL;
        }
        *(_DWORD *)&v91[2] = bswap32([Value unsignedIntValue]);
        if (v15 != 0LL && v72 != 0LL) {
          id v18 = (void *)CFDictionaryGetValue(v15, v72);
        }
        else {
          id v18 = 0LL;
        }
        *(_WORD *)&v91[6] = __rev16([v18 unsignedShortValue]);
        if (v15 != 0LL && v71 != 0LL) {
          id v19 = (void *)CFDictionaryGetValue(v15, v71);
        }
        else {
          id v19 = 0LL;
        }
        *(_WORD *)&v91[8] = __rev16([v19 unsignedShortValue]);
        if (v15 != 0LL && v70 != 0LL) {
          id v20 = (void *)CFDictionaryGetValue(v15, v70);
        }
        else {
          id v20 = 0LL;
        }
        LOWORD(v92) = __rev16([v20 unsignedShortValue]);
        if (v15 != 0LL && v69 != 0LL) {
          id v21 = (void *)CFDictionaryGetValue(v15, v69);
        }
        else {
          id v21 = 0LL;
        }
        id v22 = v21;
        id v23 = [v22 count];
        WORD1(v92) = bswap32(v23) >> 16;
        id v24 = (unsigned __int16)v23;
        uint64_t v74 = (unsigned __int16)v23;
        if ((_WORD)v23)
        {
          id v25 = 0LL;
          id v26 = 0LL;
          __int16 v27 = 4LL * (unsigned __int16)v23;
          while (1)
          {
            id v28 = (void *)objc_claimAutoreleasedReturnValue([v22 objectAtIndexedSubscript:v26]);
            id v29 = (void *)objc_claimAutoreleasedReturnValue([v28 objectAtIndexedSubscript:0]);
            id v30 = [v29 unsignedShortValue];

            *(_WORD *)((char *)&v92 + v25 + 4) = __rev16(v30);
            if (v25 == 4076) {
              break;
            }
            __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([v22 objectAtIndexedSubscript:v26]);
            int v32 = (void *)objc_claimAutoreleasedReturnValue([v31 objectAtIndexedSubscript:1]);
            id v33 = [v32 unsignedShortValue];

            *(_WORD *)((char *)&v92 + v25 + 6) = __rev16(v33);
            ++v26;
            v25 += 4LL;
            if (v27 == v25)
            {
              __int16 v34 = (char *)&v92 + v25 + 4;
              goto LABEL_50;
            }
          }

          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT)) {
            sub_100698920(&v79, v80);
          }
          uint64_t v35 = OSLogHandleForIDSCategory("IDSDSession");
          __int128 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v85 = 138412546;
            *(void *)v86 = v14;
            *(_WORD *)&v86[8] = 1024;
            *(_DWORD *)v87 = 1019;
            _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "didGetLinkProbingStatus: linkID: %@, rtt overflow, i: %d",  v85,  0x12u);
          }

          __int16 v34 = v95;
          if (os_log_shim_legacy_logging_enabled(v37)
            && _IDSShouldLog(0LL, @"IDSDSession"))
          {
            uint64_t v56 = (unint64_t)v14;
            v58 = 1019LL;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"didGetLinkProbingStatus: linkID: %@, rtt overflow, i: %d");
          }

          id v24 = 1019;
        }

        else
        {
          LOWORD(v34) = (unsigned __int16)&v92 + 4;
        }

        if (v24 != (_DWORD)v74)
        {

          goto LABEL_67;
        }

  return v6;
}

    goto LABEL_13;
  }

LABEL_15:
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    else {
      id v12 = @"NO";
    }
    else {
      uint64_t v13 = @"YES";
    }
    id v16 = 138412546;
    __int16 v17 = (uint64_t)v12;
    id v18 = 2112;
    id v19 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "   Account isn't enabled and/or registered -- enabling {isEnabled: %@, unregistered: %@}",  (uint8_t *)&v16,  0x16u);
  }

  int8x16_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountController]);
  int v15 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString uniqueID](v3, "uniqueID"));
  [v14 enableAccountWithUniqueID:v15];

  -[__CFString registerAccount](v3, "registerAccount");
LABEL_13:
  objc_autoreleasePoolPop(v4);
}

    pthread_mutex_unlock(p_listenerLock);
  }

  else
  {
    id v7 = 0LL;
  }

  return v7;
}

        objc_autoreleasePoolPop(v11);
        id v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v39 objects:v44 count:16];
    }

    while (v7);
  }

  objc_autoreleasePoolPop(context);
  __int16 v17 = objc_autoreleasePoolPush();
  id v18 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 accounts]);

  uint64_t v37 = 0u;
  uint64_t v38 = 0u;
  uint64_t v35 = 0u;
  __int128 v36 = 0u;
  id v20 = v19;
  id v21 = [v20 countByEnumeratingWithState:&v35 objects:v43 count:16];
  if (v21)
  {
    id v22 = v21;
    id v23 = *(void *)v36;
    do
    {
      id v24 = 0LL;
      do
      {
        if (*(void *)v36 != v23) {
          objc_enumerationMutation(v20);
        }
        id v25 = *(void **)(*((void *)&v35 + 1) + 8LL * (void)v24);
        id v26 = objc_autoreleasePoolPush();
        if ([v25 isRegistered])
        {
          __int16 v27 = (void *)objc_claimAutoreleasedReturnValue([v25 service]);
          id v28 = -[NSMutableSet containsObject:](v3, "containsObject:", v27);

          if (v28)
          {
            id v29 = (void *)objc_claimAutoreleasedReturnValue([v25 service]);
            id v30 = (void *)objc_claimAutoreleasedReturnValue([v29 pushTopic]);
            -[NSMutableSet addObject:](v34, "addObject:", v30);
          }
        }

        objc_autoreleasePoolPop(v26);
        id v24 = (char *)v24 + 1;
      }

      while (v22 != v24);
      id v22 = [v20 countByEnumeratingWithState:&v35 objects:v43 count:16];
    }

    while (v22);
  }

  objc_autoreleasePoolPop(v17);
  return v34;
}

    __int16 v17 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSValidationSessionErrorDomain",  -6000LL,  0LL));
    id v18 = -[IDSValidationSigningResult initWithAbsintheResultData:absintheServerKey:absintheError:baaResult:]( objc_alloc(&OBJC_CLASS___IDSValidationSigningResult),  "initWithAbsintheResultData:absintheServerKey:absintheError:baaResult:",  0LL,  0LL,  v17,  0LL);
    (*((void (**)(id, IDSValidationSigningResult *))v7 + 2))(v7, v18);
LABEL_13:

LABEL_14:
  }
}
  }

  else
  {
    id v6 = 0LL;
  }

  return v6;
}
  }

  else
  {
    id v6 = 0LL;
  }

  return v6;
}
  }

  else
  {
    id v6 = 0LL;
  }

  return v6;
}

  id v19 = 0LL;
LABEL_15:

  return v19;
}
}
}

  -[NSRecursiveLock unlock](self->_lock, "unlock");
  -[IDSRegistrationKeychainManager _saveToKeychain](self, "_saveToKeychain");
}

      previousBytesSent = self->_previousBytesSent;
      totalBytesSent = self->_totalBytesSent;
      previousBytesReceived = self->_previousBytesReceived;
      totalBytesReceived = self->_totalBytesReceived;
      int8x16_t v14 = -[NSMutableString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithFormat:",  @"                            Since last report (for %.1fs)\tCumulative total\n",  *(void *)&v6);
      int v15 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allKeys](self->_cbuuidToLinks, "allKeys"));
      context = objc_autoreleasePoolPush();
      uint64_t v98 = 0u;
      v99 = 0u;
      v96 = 0u;
      uint64_t v97 = 0u;
      id obj = v15;
      id v16 = [obj countByEnumeratingWithState:&v96 objects:v102 count:16];
      if (v16)
      {
        __int16 v17 = *(void *)v97;
        do
        {
          for (i = 0LL; i != v16; i = (char *)i + 1)
          {
            if (*(void *)v97 != v17) {
              objc_enumerationMutation(obj);
            }
            id v19 = *(const void **)(*((void *)&v96 + 1) + 8LL * (void)i);
            deviceIDToCurrentLink = self->_deviceIDToCurrentLink;
            if (deviceIDToCurrentLink) {
              id v21 = v19 == 0LL;
            }
            else {
              id v21 = 1;
            }
            if (v21) {
              Value = 0LL;
            }
            else {
              Value = (void *)CFDictionaryGetValue( (CFDictionaryRef)deviceIDToCurrentLink,  *(const void **)(*((void *)&v96 + 1) + 8LL * (void)i));
            }
            id v23 = Value;
            id v24 = 0LL;
            if (self->_cbuuidToLinks && v19) {
              id v24 = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_cbuuidToLinks, v19);
            }
            id v25 = (void *)objc_claimAutoreleasedReturnValue([v24 allValues]);
            uint64_t v94 = 0u;
            v95 = 0u;
            v92 = 0u;
            uint64_t v93 = 0u;
            id v26 = [v25 countByEnumeratingWithState:&v92 objects:v101 count:16];
            if (v26)
            {
              __int16 v27 = *(void *)v93;
              do
              {
                for (j = 0LL; j != v26; j = (char *)j + 1)
                {
                  if (*(void *)v93 != v27) {
                    objc_enumerationMutation(v25);
                  }
                  id v29 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*((void *)&v92 + 1) + 8 * (void)j),  "generateLinkReport:isCurrentLink:",  objc_msgSend(*(id *)(*((void *)&v92 + 1) + 8 * (void)j), "isEqual:", v23),  a3));
                  -[NSMutableString appendString:](v14, "appendString:", v29);
                }

                id v26 = [v25 countByEnumeratingWithState:&v92 objects:v101 count:16];
              }

              while (v26);
            }
          }

          id v16 = [obj countByEnumeratingWithState:&v96 objects:v102 count:16];
        }

        while (v16);
      }

      id v30 = totalBytesSent - previousBytesSent;
      totalPacketsSent = self->_totalPacketsSent;
      previousPacketsSent = self->_previousPacketsSent;
      int v32 = formattedBytes(v30, v31);
      v86 = (void *)objc_claimAutoreleasedReturnValue(v32);
      id v33 = formattedSpeed((unint64_t)((double)(8 * v30) / v6 + 0.5));
      __int16 v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
      uint64_t v35 = self->_totalPacketsSent;
      uint64_t v37 = formattedBytes(self->_totalBytesSent, v36);
      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
      totalPacketsReceived = self->_totalPacketsReceived;
      previousPacketsReceived = self->_previousPacketsReceived;
      uint64_t v42 = formattedBytes(totalBytesReceived - previousBytesReceived, v41);
      v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
      id v44 = formattedSpeed((unint64_t)((double)(8 * (totalBytesReceived - previousBytesReceived)) / v6 + 0.5));
      uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
      id v46 = self->_totalPacketsReceived;
      id v48 = formattedBytes(self->_totalBytesReceived, v47);
      id v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
      -[NSMutableString appendFormat:]( v14,  "appendFormat:",  @"  Combined              Tx %6llu pkts %@B %@bps     %6llu pkts %@B\n                        Rx %6llu pkts %@B %@bps     %6llu pkts %@B\n                   Dropped %6llu pkts                       %6llu pkts",  totalPacketsSent - previousPacketsSent,  v86,  v34,  v35,  v38,  totalPacketsReceived - previousPacketsReceived,  v43,  v45,  v46,  v49,  self->_totalPacketsDropped - self->_previousPacketsDropped,  self->_totalPacketsDropped);

      objc_autoreleasePoolPop(context);
      id v50 = (void *)objc_claimAutoreleasedReturnValue(+[IDSUTunController sharedInstance](&OBJC_CLASS___IDSUTunController, "sharedInstance"));
      id v51 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v50,  "onTransportThread_PerServiceDataTransferredForDevice:services:",  kIDSDefaultPairedDeviceID,  0));
      id v52 = sub_100224320(v51);
      id v53 = (void *)objc_claimAutoreleasedReturnValue(v52);

      -[NSMutableString appendString:](v14, "appendString:", @"\n\nStreaming Usage Statistics:\n");
      v54 = -[NSMutableString appendString:](v14, "appendString:", v53);
      uint64_t v56 = im_primary_queue(v54, v55);
      v57 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v56);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100225DA4;
      block[3] = &unk_1008F5F80;
      uint64_t v90 = v14;
      v91 = self;
      v58 = v14;
      dispatch_async(v57, block);

      uint64_t v59 = *(_OWORD *)&self->_totalBytesReceived;
      *(_OWORD *)&self->_previousBytesSent = *(_OWORD *)&self->_totalBytesSent;
      *(_OWORD *)&self->_previousBytesReceived = v59;
      self->_previousPacketsDropped = self->_totalPacketsDropped;

      goto LABEL_36;
    }

    if (a3 - self->_previousReportFileOpenTime < self->_minReportFileOpenTimeInterval) {
      return 0LL;
    }
    self->_previousReportFileOpenTime = a3;
    __int128 v61 = self->_reporterFile;
    __int128 v62 = open(self->_reporterFile, 5);
    self->_reporterFd = v62;
    if (v62 != -1)
    {
      __int128 v63 = OSLogHandleForIDSCategory("LinkManager");
      __int128 v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__s = 136315138;
        *(void *)&__s[4] = v61;
        _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "opened FIFO file %s for writing",  (uint8_t *)__s,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v65)
        && _IDSShouldLog(0LL, @"LinkManager"))
      {
        _IDSLogV(0LL, @"IDSFoundation", @"LinkManager", @"opened FIFO file %s for writing");
      }

      v67 = self->_reporterTimer;
      if (v67) {
        dispatch_source_cancel((dispatch_source_t)v67);
      }
      v68 = im_primary_queue(v67, v66);
      v69 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v68);
      uint64_t v70 = (OS_dispatch_source *)dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  v69);
      v71 = self->_reporterTimer;
      self->_reporterTimer = v70;

      v72 = self->_reporterTimer;
      uint64_t v73 = dispatch_time(0LL, 5000000000LL);
      dispatch_source_set_timer((dispatch_source_t)v72, v73, 0x12A05F200uLL, 0x5F5E100uLL);
      uint64_t v74 = self->_reporterTimer;
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472LL;
      handler[2] = sub_100225D1C;
      handler[3] = &unk_1008F6010;
      handler[4] = self;
      dispatch_source_set_event_handler((dispatch_source_t)v74, handler);
      dispatch_resume((dispatch_object_t)self->_reporterTimer);
      reporterFd = self->_reporterFd;
      if (reporterFd == -1) {
        goto LABEL_12;
      }
      goto LABEL_5;
    }

    v75 = *__error();
    if (v75 != 6)
    {
      v76 = OSLogHandleForIDSCategory("LinkManager");
      uint64_t v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(v76);
      if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__s = 136315394;
        *(void *)&__s[4] = v61;
        *(_WORD *)&__s[12] = 1024;
        *(_DWORD *)&__s[14] = v75;
        _os_log_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_DEFAULT,  "cannot open reporting FIFO file %s, errno=%d",  (uint8_t *)__s,  0x12u);
      }

      if (os_log_shim_legacy_logging_enabled(v78)
        && _IDSShouldLog(0LL, @"LinkManager"))
      {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"LinkManager",  @"cannot open reporting FIFO file %s, errno=%d");
      }
    }
  }

  return 0LL;
}

  id v20 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSSigningErrorDomain,  10LL,  0LL));
  id v21 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id v22 = *(void **)(v21 + 40);
  *(void *)(v21 + 40) = v20;
}

  id v26 = self->_requestID;
  if (v26)
  {
    if (-[NSData bytes](v26, "bytes"))
    {
      __int16 v27 = -[NSUUID initWithUUIDBytes:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDBytes:",  -[NSData bytes](self->_requestID, "bytes"));
      id v28 = (id)objc_claimAutoreleasedReturnValue(-[NSUUID UUIDString](v27, "UUIDString"));
    }

    else
    {
      id v28 = 0LL;
    }

    -[IDSQuickRelayAllocateMessage setRequestIDStr:](self, "setRequestIDStr:", v28, v939, v982, v1025);
  }

  id v29 = kIDSQRAllocateKey_AllocateType;
  id v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_AllocateType, v939, v982, v1025));
  __int128 v31 = &IMInsertBoolsToXPCDictionary_ptr;
  id v33 = objc_opt_class(&OBJC_CLASS___NSNumber, v32);
  __int16 v34 = objc_opt_isKindOfClass(v30, v33);

  uint64_t v35 = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v29]);
  __int128 v36 = v35;
  if ((v34 & 1) != 0)
  {
    allocateType = self->_allocateType;
    self->_allocateType = v35;
LABEL_19:

    goto LABEL_26;
  }

  if (v36)
  {
    uint64_t v38 = OSLogHandleForIDSCategory("QRAllocator");
    id v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v40 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v29]);
      uint64_t v42 = (id)objc_opt_class(&OBJC_CLASS___NSNumber, v41);
      v43 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v29]);
      uint64_t v45 = (id)objc_opt_class(v43, v44);
      *(_DWORD *)buf = 138412802;
      v1070 = v40;
      v1071 = 2112;
      v1072 = v42;
      v1073 = 2112;
      v1074 = v45;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v46))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        allocateType = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v29]);
        id v48 = objc_opt_class(&OBJC_CLASS___NSNumber, v47);
        id v49 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v29]);
        v983 = v48;
        v1026 = objc_opt_class(v49, v50);
        v940 = allocateType;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_19;
      }
    }
  }
}

    int8x16_t v14 = (void *)*((void *)a1 + 1);
    if (*a1 != (_DWORD)v7) {
      goto LABEL_17;
    }
    int8x16_t v14 = realloc(*((void **)a1 + 1), 16LL * (2 * v7));
    int v15 = (os_log_s *)+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController");
    id v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (v14)
    {
      if (v16)
      {
        __int16 v17 = *a1;
        id v22 = 67109376;
        *(_DWORD *)id v23 = v17;
        *(_WORD *)&v23[4] = 1024;
        *(_DWORD *)&v23[6] = 2 * v7;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "NSSTable_Set: table resize from %d to %d",  (uint8_t *)&v22,  0xEu);
      }

      *((void *)a1 + 1) = v14;
      *a1 = 2 * v7;
      goto LABEL_17;
    }

    if (!v16) {
      return;
    }
    id v22 = 138412290;
    *(void *)id v23 = a3;
    uint64_t v11 = "NSSTable_Set: cannot allocate memory for %@";
    id v12 = v15;
LABEL_9:
    uint64_t v13 = 12;
LABEL_20:
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v22, v13);
    return;
  }

  LODWORD(v7) = 0;
  int8x16_t v14 = (void *)*((void *)a1 + 1);
LABEL_17:
  v14[2 * (int)v7 + 1] = a3;
  ++a1[4];
  *(void *)(*((void *)a1 + 1) + 16 * (int)v7) = [a2 copy];
LABEL_18:
  id v18 = (os_log_s *)+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController");
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    id v19 = a1[4];
    id v22 = 138413058;
    *(void *)id v23 = a2;
    *(_WORD *)&v23[8] = 1024;
    *(_DWORD *)id v24 = v7;
    *(_WORD *)&v24[4] = 1024;
    *(_DWORD *)&v24[6] = v19;
    id v25 = 2112;
    id v26 = a3;
    uint64_t v11 = "NSSTable_Set: key %8@ at %d (total elements: %d) store object %@";
    id v12 = v18;
    uint64_t v13 = 34;
    goto LABEL_20;
  }

  id v24 = v33;
  id v25 = *v32;
  *(void *)(*v32 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = sub_1003F600C( v24,  *(void *)(v25 + 48) + *(void *)(v31 + 72) * a2,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
  __int16 v27 = *(void *)(v25 + 16);
  id v28 = __OFADD__(v27, 1LL);
  id v29 = v27 + 1;
  if (!v28)
  {
    *(void *)(v25 + 16) = v29;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

  id v24 = v33;
  id v25 = *v32;
  *(void *)(*v32 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = sub_1003F600C( v24,  *(void *)(v25 + 48) + *(void *)(v31 + 72) * a2,  type metadata accessor for IDSGroupEncryptionMaterialData);
  __int16 v27 = *(void *)(v25 + 16);
  id v28 = __OFADD__(v27, 1LL);
  id v29 = v27 + 1;
  if (!v28)
  {
    *(void *)(v25 + 16) = v29;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

  id v24 = v33;
  id v25 = *v32;
  *(void *)(*v32 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = sub_1003F600C( v24,  *(void *)(v25 + 48) + *(void *)(v31 + 72) * a2,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
  __int16 v27 = *(void *)(v25 + 16);
  id v28 = __OFADD__(v27, 1LL);
  id v29 = v27 + 1;
  if (!v28)
  {
    *(void *)(v25 + 16) = v29;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

        id v20 = NSObject._rawHashValue(seed:)(*(void *)(a3 + 40));
        id v21 = -1LL << *(_BYTE *)(a3 + 32);
        id v22 = v20 & ~v21;
        id v23 = v22 >> 6;
        id v24 = 1LL << v22;
        if (((1LL << v22) & *(void *)(v42 + 8 * (v22 >> 6))) == 0) {
          goto LABEL_3;
        }
        sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
        id v25 = *(id *)(*(void *)(a3 + 48) + 8 * v22);
        id v26 = static NSObject.== infix(_:_:)(v25, v13);

        if ((v26 & 1) != 0) {
          break;
        }
        __int16 v27 = ~v21;
        for (i = v22 + 1; ; i = v29 + 1)
        {
          id v29 = i & v27;
          id v30 = *(id *)(*(void *)(a3 + 48) + 8 * v29);
          __int128 v31 = static NSObject.== infix(_:_:)(v30, v13);

          if ((v31 & 1) != 0)
          {

            id v23 = v29 >> 6;
            id v24 = 1LL << v29;
            goto LABEL_25;
          }
        }

        __int16 v17 = 1;
        goto LABEL_13;
      }
    }

    else if ((v12 & 1) != 0)
    {
      goto LABEL_9;
    }

    id v16 = sub_10040DC6C(v6, 0);
    if ((v13 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_12;
  }

  return result;
}

        id v20 = NSObject._rawHashValue(seed:)(*(void *)(a3 + 40));
        id v21 = -1LL << *(_BYTE *)(a3 + 32);
        id v22 = v20 & ~v21;
        id v23 = v22 >> 6;
        id v24 = 1LL << v22;
        if (((1LL << v22) & *(void *)(v43 + 8 * (v22 >> 6))) == 0) {
          goto LABEL_3;
        }
        type metadata accessor for IDSGroupEncryptionControllerMember();
        id v25 = *(id *)(*(void *)(a3 + 48) + 8 * v22);
        id v26 = static NSObject.== infix(_:_:)(v25, v13);

        if ((v26 & 1) != 0) {
          break;
        }
        __int16 v27 = ~v21;
        for (i = v22 + 1; ; i = v29 + 1)
        {
          id v29 = i & v27;
          id v30 = *(id *)(*(void *)(a3 + 48) + 8 * v29);
          __int128 v31 = static NSObject.== infix(_:_:)(v30, v13);

          if ((v31 & 1) != 0)
          {

            id v23 = v29 >> 6;
            id v24 = 1LL << v29;
            goto LABEL_25;
          }
        }

        id v20 = NSObject._rawHashValue(seed:)(*(void *)(a3 + 40));
        id v21 = -1LL << *(_BYTE *)(a3 + 32);
        id v22 = v20 & ~v21;
        id v23 = v22 >> 6;
        id v24 = 1LL << v22;
        if (((1LL << v22) & *(void *)(v42 + 8 * (v22 >> 6))) == 0) {
          goto LABEL_3;
        }
        sub_10041D3C4(0LL, (unint64_t *)&qword_1009BBE30, &OBJC_CLASS___IDSPushToken_ptr);
        id v25 = *(id *)(*(void *)(a3 + 48) + 8 * v22);
        id v26 = static NSObject.== infix(_:_:)(v25, v13);

        if ((v26 & 1) != 0) {
          break;
        }
        __int16 v27 = ~v21;
        for (i = v22 + 1; ; i = v29 + 1)
        {
          id v29 = i & v27;
          id v30 = *(id *)(*(void *)(a3 + 48) + 8 * v29);
          __int128 v31 = static NSObject.== infix(_:_:)(v30, v13);

          if ((v31 & 1) != 0)
          {

            id v23 = v29 >> 6;
            id v24 = 1LL << v29;
            goto LABEL_25;
          }
        }

  id v26 = v33;
  __int16 v27 = *v32;
  *(void *)(*v32 + 8 * (v5 >> 6) + 56) |= 1LL << v5;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))( *(void *)(v27 + 48) + *(void *)(v7 + 72) * v5,  v26,  v6);
  id v29 = *(void *)(v27 + 16);
  id v30 = __OFADD__(v29, 1LL);
  __int128 v31 = v29 + 1;
  if (!v30)
  {
    *(void *)(v27 + 16) = v31;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

  uint64_t result = swift_bridgeObjectRelease(v3);
LABEL_13:
  *unint64_t v2 = v4 != 0;
  return result;
}

LABEL_8:
    id v8 = 0LL;
    goto LABEL_9;
  }

  id v8 = -[NSString initWithData:encoding:](objc_alloc(&OBJC_CLASS___NSString), "initWithData:encoding:", v6, 4LL);
  if (!v8)
  {
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543618;
      id v16 = v4;
      __int16 v17 = 2114;
      id v18 = v6;
      id v10 = "Unable to deserialize build of identity generation {itemName: %{public}@, serializedBuildOfIdentityGeneration: %{public}@}";
      uint64_t v11 = v9;
      id v12 = 22;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, buf, v12);
      goto LABEL_8;
    }

    goto LABEL_8;
  }

    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    -[os_log_s __mainThreadPostNotificationName:object:]( v3,  "__mainThreadPostNotificationName:object:",  IDSRegistrationKeyManagerKTRegDataUpdatedNotification,  *(void *)(a1 + 32));
    goto LABEL_9;
  }

  [*(id *)(*(void *)(a1 + 32) + 8) lock];
  unint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 120) hasUnregisteredKTData];
  [*(id *)(*(void *)(a1 + 32) + 8) unlock];
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  id v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      id v7 = 0;
      id v5 = (uint8_t *)&v7;
LABEL_7:
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Posting notification of unregistered KT data",  v5,  2u);
      goto LABEL_8;
    }

    goto LABEL_8;
  }

  if (v4)
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Skipping notification of unregistered KT data; we've already done it",
      v6,
      2u);
  }

    id v16 = 0;
    goto LABEL_23;
  }

  if (v13)
  {
    if (a7)
    {
      int v15 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSSigningErrorDomain,  15LL,  0LL));
LABEL_7:
      id v16 = 0;
      *a7 = v15;
      goto LABEL_23;
    }

    goto LABEL_8;
  }

  error = 0LL;
  __int16 v17 = SecKeyVerifySignature(a5, kSecKeyAlgorithmECDSASignatureMessageX962SHA256, v11, v12, &error);
  id v18 = error;
  if (!a7 || v17)
  {
    if (error) {
      CFRelease(error);
    }
  }

  else
  {
    if (error)
    {
      id v28 = NSUnderlyingErrorKey;
      id v29 = error;
      id v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v29,  &v28,  1LL));
      id v20 = OSLogHandleForIDSCategory("Encryption");
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        __int16 v27 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Security Error verifying signing data: %@",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v22)
        && _IDSShouldLog(0LL, @"Encryption"))
      {
        id v24 = v18;
        _IDSLogV(0LL, @"IDSFoundation", @"Encryption", @"Security Error verifying signing data: %@");
      }
    }

    else
    {
      id v19 = 0LL;
    }

    *a7 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSSigningErrorDomain,  13LL,  v19,  v24));
  }

  id v16 = 1;
LABEL_23:

  return v16;
}

    goto LABEL_9;
  }

  if (self->_closed)
  {
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog ClientChannel](&OBJC_CLASS___IDSFoundationLog, "ClientChannel"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = 0;
      id v7 = "setWriteHandler: channel closed";
      id v8 = (uint8_t *)&v16;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v7, v8, 2u);
      goto LABEL_8;
    }

    goto LABEL_8;
  }

  if (self->_osChannel)
  {
    if (v4)
    {
      id v9 = [v4 copy];
      writeHandler = self->_writeHandler;
      self->_writeHandler = v9;

      fd = os_channel_get_fd(self->_osChannel, v11);
      IDSTransportThreadResumeSocket(fd, 2LL);
    }

    else
    {
      uint64_t v13 = self->_writeHandler;
      self->_writeHandler = 0LL;

      int v15 = os_channel_get_fd(self->_osChannel, v14);
      IDSTransportThreadSuspendSocket(v15, 2LL);
    }
  }

    uint64_t v11 = 0LL;
    goto LABEL_9;
  }

  if (v9) {
    goto LABEL_8;
  }
  id v10 = (void *)objc_claimAutoreleasedReturnValue(-[IDSSigningEncrypter fullDeviceIdentitySigner](self, "fullDeviceIdentitySigner"));
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 signData:v8 withSignatureType:a4 error:a5]);

LABEL_9:
  return v11;
}

    return 1;
  }

  return 0;
}

    uint64_t v11 = 0LL;
    goto LABEL_9;
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 primaryRegistration]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 registrationCert]);

  if (!v11)
  {
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 138412546;
      id v16 = v6;
      __int16 v17 = 2112;
      id v18 = v7;
      uint64_t v13 = "Couldn't find device certificate (service: %@)  (uri: %@)";
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v15, 0x16u);
      goto LABEL_8;
    }

    goto LABEL_8;
  }

  [v4 invalidate];
  id v9 = 0;
LABEL_9:

  return v9;
}

        id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog healthDebugging](&OBJC_CLASS___IMRGLog, "healthDebugging"));
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) smallDescription]);
          __int16 v17 = 138412546;
          id v18 = v3;
          id v19 = 2112;
          id v20 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Broadcaster for localDeviceAdded %@ on account %@",  (uint8_t *)&v17,  0x16u);
        }

        goto LABEL_11;
      }
    }

    goto LABEL_8;
  }

    goto LABEL_9;
  }

  if (!v7)
  {
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = 138412290;
      uint64_t v13 = v4;
      id v10 = "We don't have any key material for the group %@";
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v12, 0xCu);
      goto LABEL_8;
    }

    goto LABEL_8;
  }

    goto LABEL_9;
  }

  if (!v8)
  {
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = 138412290;
      int8x16_t v14 = v5;
      uint64_t v11 = "We don't have any stable key material for the group %@";
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v13, 0xCu);
      goto LABEL_8;
    }

    goto LABEL_8;
  }

    isLinkForDefaultPeerConnected = self->_isLinkForDefaultPeerConnected;
    self->_isLinkForDefaultPeerConnected = v3;
    id v9 = OSLogHandleForTransportCategory("UTunDelivery");
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = @"YES";
      if (isLinkForDefaultPeerConnected) {
        id v12 = @"YES";
      }
      else {
        id v12 = @"NO";
      }
      if (!v3) {
        uint64_t v11 = @"NO";
      }
      *(_DWORD *)buf = 138412546;
      id v30 = v12;
      __int128 v31 = 2112;
      int v32 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "default peer connectivity changed: %@ -> %@",  buf,  0x16u);
    }

    int8x16_t v14 = os_log_shim_legacy_logging_enabled(v13);
    if ((_DWORD)v14 && _IDSShouldLogTransport(v14))
    {
      int v15 = isLinkForDefaultPeerConnected ? @"YES" : @"NO";
      id v16 = v3 ? @"YES" : @"NO";
      __int16 v27 = v15;
      id v28 = v16;
      _IDSLogTransport(@"UTunDelivery", @"IDS", @"default peer connectivity changed: %@ -> %@");
      if (_IDSShouldLog(0LL, @"UTunDelivery"))
      {
        __int16 v27 = v15;
        id v28 = v16;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunDelivery",  @"default peer connectivity changed: %@ -> %@");
      }
    }

    __int16 v17 = -[IDSUTunDeliveryController _copyPairedDevice](self, "_copyPairedDevice", v27, v28);
    id v18 = v17;
    if (v17)
    {
      if (isLinkForDefaultPeerConnected != v3)
      {
        [v17 setIsConnected:v3];
        -[IDSUTunDeliveryController peerConnectivityChanged:](self, "peerConnectivityChanged:", v18);
      }
    }

    else
    {
      id v19 = OSLogHandleForTransportCategory("UTunDelivery");
      id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "default peer connectivity changed but no default peer",  buf,  2u);
      }

      id v22 = os_log_shim_legacy_logging_enabled(v21);
      if ((_DWORD)v22)
      {
        if (_IDSShouldLogTransport(v22))
        {
          _IDSLogTransport( @"UTunDelivery",  @"IDS",  @"default peer connectivity changed but no default peer");
          if (_IDSShouldLog(0LL, @"UTunDelivery")) {
            _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunDelivery",  @"default peer connectivity changed but no default peer");
          }
        }
      }
    }

    return;
  }

  if (self->_localAccountSetupCompleted)
  {
    -[IDSUTunDeliveryController enableConnectionForDefaultPairedDevice:]( self,  "enableConnectionForDefaultPairedDevice:",  1LL);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(-[IDSUTunDeliveryController nrDevicePreferencesHandler](self, "nrDevicePreferencesHandler"));

    if (v5)
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue(-[IDSUTunDeliveryController nrDevicePreferencesHandler](self, "nrDevicePreferencesHandler"));
      [v6 revokeAvailabilityForCloudMessaging];
LABEL_7:

      goto LABEL_8;
    }

    goto LABEL_8;
  }

  self->_defaultPeerConnectedDeferred = 1;
  id v23 = OSLogHandleForTransportCategory("UTunDelivery");
  id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "local account setup has not finished yet - defer default peer connected",  buf,  2u);
  }

  id v26 = os_log_shim_legacy_logging_enabled(v25);
  if ((_DWORD)v26)
  {
    if (_IDSShouldLogTransport(v26))
    {
      _IDSLogTransport( @"UTunDelivery",  @"IDS",  @"local account setup has not finished yet - defer default peer connected");
      if (_IDSShouldLog(0LL, @"UTunDelivery")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunDelivery",  @"local account setup has not finished yet - defer default peer connected");
      }
    }
  }
}
}
}
}

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

    goto LABEL_9;
  }

  if (v4 <= 99)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v6 accountsOfAdHocType:2]);

    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 pairedDeviceUniqueID]);
    [v3 markLocalDestinationDeviceUUIDForAccounts:v5 deviceUUID:v8];

    [v3 updateInternalMigrationVersionOnDatabaseWithValue:100];
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog liveMigration](&OBJC_CLASS___IMRGLog, "liveMigration"));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Updated DB to version 100", v10, 2u);
    }

    goto LABEL_8;
  }
}

  return (_IDSSessionConnection *)v5;
}

  uint64_t v94 = 0LL;
  v95 = 0LL;
  uint64_t v93 = 0LL;
  -[IDSDAccount _splitDestinations:intoLocalDestinations:remoteDestinations:rapportDestinations:sendParameters:]( self,  "_splitDestinations:intoLocalDestinations:remoteDestinations:rapportDestinations:sendParameters:",  v63,  &v95,  &v94,  &v93,  v15,  v55);
  id v22 = v95;
  id v23 = (uint64_t (*)(uint64_t, uint64_t))v94;
  id v24 = v93;
  id v25 = (void *)objc_claimAutoreleasedReturnValue([v22 allKeys]);
  v92[0] = _NSConcreteStackBlock;
  v92[1] = 3221225472LL;
  v92[2] = sub_1002D1AD4;
  v92[3] = &unk_1008F64D0;
  v92[4] = self;
  __int128 v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "__imArrayByApplyingBlock:", v92));

  if ([v15 localDelivery]
    && [v23 count]
    && (id v26 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount service](self, "service")),
        __int16 v27 = [v26 shouldAllowProxyDelivery],
        v26,
        (v27 & 1) == 0))
  {
    uint64_t v40 = OSLogHandleForIDSCategory("Warning");
    v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v96 = 138412802;
      *(void *)&v96[4] = self;
      *(_WORD *)&v96[12] = 2112;
      *(void *)&v96[14] = v63;
      *(_WORD *)&v96[22] = 2112;
      uint64_t v97 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_ERROR,  "Account %@ was asked to send to %@ with forced local delivery but there are unaddressible remote destinations %@ - failing message.",  v96,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v42))
    {
      _IDSWarnV( @"IDSFoundation",  @"Account %@ was asked to send to %@ with forced local delivery but there are unaddressible remote destinations %@ - failing message.");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Account %@ was asked to send to %@ with forced local delivery but there are unaddressible remote destinations %@ - failing message.");
      v57 = v63;
      v58 = v23;
      uint64_t v56 = self;
      _IDSLogTransport( @"Warning",  @"IDS",  @"Account %@ was asked to send to %@ with forced local delivery but there are unaddressible remote destinations %@ - failing message.");
    }

    id v28 = 0;
  }

  else
  {
    id v28 = 1;
  }

  if (objc_msgSend(v23, "count", v56, v57, v58) || objc_msgSend(v22, "count") || objc_msgSend(v24, "count"))
  {
    if ((v28 & 1) != 0)
    {
      v91[0] = 0LL;
      v91[1] = v91;
      v91[2] = 0x2020000000LL;
      v91[3] = 0LL;
      v87 = 0LL;
      uint64_t v88 = &v87;
      v89 = 0x2020000000LL;
      uint64_t v90 = -86;
      uint64_t v90 = [v22 count] == 0;
      v85[0] = 0LL;
      v85[1] = v85;
      v85[2] = 0x2020000000LL;
      v86 = -86;
      v86 = [v23 count] == 0;
      *(void *)v96 = 0LL;
      *(void *)&v96[8] = v96;
      *(void *)&v96[16] = 0x3032000000LL;
      uint64_t v97 = sub_1002CC060;
      uint64_t v98 = sub_1002CC070;
      v99 = 0LL;
      if (v21)
      {
        id v29 = OSLogHandleForIDSCategory("IDSDAccount");
        id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Setting localLastCall to YES for this proxied outgoing message so that the completion does not rely on the local reflection",  buf,  2u);
        }

        if (os_log_shim_legacy_logging_enabled(v31)
          && _IDSShouldLog(0LL, @"IDSDAccount"))
        {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"Setting localLastCall to YES for this proxied outgoing message so that the completion does not rely on the local reflection");
        }

        *((_BYTE *)v88 + cut_arc_os_release(v1 - 24) = 1;
      }

      if ([v22 count])
      {
        int v32 = [v15 copy];
        id v33 = v32;
        if (v21) {
          [v32 setTimeout:IDSMaxMessageTimeout];
        }
        [v33 setFinalDestinationURIs:v62];
        v76[0] = _NSConcreteStackBlock;
        v76[1] = 3221225472LL;
        v76[2] = sub_1002D1B4C;
        v76[3] = &unk_100900008;
        uint64_t v82 = v21;
        v83 = [v23 count] == 0;
        v79 = v96;
        v80 = v91;
        uint64_t v78 = &v87;
        v76[4] = self;
        uint64_t v77 = v17;
        v81 = v85;
        -[IDSDAccount _sendLocallyWithSendParameters:uriToLocalDestination:data:protobuf:completionBlock:]( self,  "_sendLocallyWithSendParameters:uriToLocalDestination:data:protobuf:completionBlock:",  v33,  v22,  v60,  v61,  v76);
      }

      if ([v24 count])
      {
        __int16 v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "__imArrayByApplyingBlock:", &stru_100900028));
        if (v16) {
          (*((void (**)(id, void *, void, void))v16 + 2))(v16, v34, 0LL, 0LL);
        }
        uint64_t v35 = [v15 copy];
        [v35 setFinalDestinationURIs:v34];
        v74[0] = _NSConcreteStackBlock;
        v74[1] = 3221225472LL;
        v74[2] = sub_1002D1EB0;
        v74[3] = &unk_1008FA288;
        v75 = v17;
        -[IDSDAccount _rapportSendWithSendParameters:completionBlock:]( self,  "_rapportSendWithSendParameters:completionBlock:",  v35,  v74);
      }

      if (v16)
      {
        v70[0] = _NSConcreteStackBlock;
        v70[1] = 3221225472LL;
        v70[2] = sub_1002D1EBC;
        v70[3] = &unk_1008FFF10;
        v71 = v22;
        v72 = v62;
        uint64_t v73 = v16;
        __int128 v36 = objc_retainBlock(v70);
      }

      else
      {
        __int128 v36 = 0LL;
      }

      if ([v23 count])
      {
        uint64_t v37 = [v15 copy];
        uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "__imArrayByApplyingBlock:", &stru_100900048));
        [v37 setFinalDestinationURIs:v38];

        v64[0] = _NSConcreteStackBlock;
        v64[1] = 3221225472LL;
        v64[2] = sub_1002D1FE4;
        v64[3] = &unk_100900070;
        v64[4] = self;
        id v66 = v85;
        v67 = v96;
        v68 = v91;
        v65 = v17;
        v69 = &v87;
        -[IDSDAccount _sendRemotelyWithSendParameters:data:protobuf:willSendBlock:completionBlock:]( self,  "_sendRemotelyWithSendParameters:data:protobuf:willSendBlock:completionBlock:",  v37,  v60,  v61,  v36,  v64);
      }

      else
      {
        id v39 = [v22 count];
        if (v16 && v39) {
          (*((void (**)(id, void *, void, void))v16 + 2))(v16, v62, 0LL, 0LL);
        }
      }

      _Block_object_dispose(v96, 8);
      _Block_object_dispose(v85, 8);
      _Block_object_dispose(&v87, 8);
      _Block_object_dispose(v91, 8);
      goto LABEL_59;
    }
  }

  else
  {
    id v49 = OSLogHandleForIDSCategory("Warning");
    id v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v96 = 138412546;
      *(void *)&v96[4] = self;
      *(_WORD *)&v96[12] = 2112;
      *(void *)&v96[14] = v63;
      _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_ERROR,  "Account %@ was asked to send to %@ but we were unable to resolve any actual destinations - failing message.",  v96,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v51))
    {
      _IDSWarnV( @"IDSFoundation",  @"Account %@ was asked to send to %@ but we were unable to resolve any actual destinations - failing message.");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Account %@ was asked to send to %@ but we were unable to resolve any actual destinations - failing message.");
      _IDSLogTransport( @"Warning",  @"IDS",  @"Account %@ was asked to send to %@ but we were unable to resolve any actual destinations - failing message.");
    }
  }

  id v52 = objc_alloc(&OBJC_CLASS___NSError);
  id v53 = -[NSError initWithDomain:code:userInfo:](v52, "initWithDomain:code:userInfo:", IDSSendErrorDomain, 1LL, 0LL);
  if (v17)
  {
    v54 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  1LL,  v53,  1LL);
    (*((void (**)(id, IDSDeliveryContext *))v17 + 2))(v17, v54);
  }

LABEL_59:
}

    uint64_t v11 = a3;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_1003303B4;
    v13[3] = &unk_100901788;
    id v16 = *(id *)(a1 + 32);
    int8x16_t v14 = v5;
    int v15 = v11;
    id v9 = v11;
    IDSTransportThreadAddBlock(v13, v12);

    goto LABEL_12;
  }

  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    id v10 = "nw_service_connector_start_request returned EINPROGRESS - exit";
    goto LABEL_11;
  }

  return v8;
}

  uint64_t v11 = 1;
  if (a3 > 600)
  {
  }

  else if (!a3 || a3 == 202 || a3 == 501)
  {
    goto LABEL_14;
  }

    LOBYTE(v9) = 1;
    goto LABEL_9;
  }

  if (-[os_log_s containsString:](v5, "containsString:", @"-"))
  {
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = 138412546;
      int8x16_t v14 = v5;
      int v15 = 2112;
      id v16 = v6;
      id v8 = "Signature DSID appears to be malformed. Falling back and using signature without dsid validation. { signature"
           "DSID: %@, accountDSID: %@ }";
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v13, 0x16u);
      goto LABEL_8;
    }

    goto LABEL_8;
  }

  id v7 = v5;
  if ((-[os_log_s hasPrefix:](v7, "hasPrefix:", @"D:") & 1) == 0)
  {
    uint64_t v11 = objc_claimAutoreleasedReturnValue([@"D:" stringByAppendingString:v7]);

    id v7 = (os_log_s *)v11;
  }

  id v9 = [v6 isEqualToString:v7];
  if (v9)
  {
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = 138412546;
      int8x16_t v14 = v7;
      int v15 = 2112;
      id v16 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Signature DSID appears to match account dsid. { signatureDSID: %@, accountDSID: %@ }",  (uint8_t *)&v13,  0x16u);
    }
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueIdentifier]);

  return v6;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

LABEL_9:
  -[NSRecursiveLock unlock](self->_lock, "unlock");
  return v8;
}
}

  return 0;
}
}
}
  }
}

    id v23 = 0LL;
    goto LABEL_10;
  }

  v29.receiver = self;
  v29.super_class = (Class)&OBJC_CLASS___IDSDXPCFirewall;
  id v12 = -[IDSDXPCFirewall init](&v29, "init");
  self = v12;
  if (v12)
  {
    objc_storeStrong((id *)&v12->_queue, a4);
    processMessageTimer = self->_processMessageTimer;
    self->_processMessageTimer = 0LL;

    objc_storeStrong((id *)&self->_service, a3);
    int8x16_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance"));
    int v15 = (void *)objc_claimAutoreleasedReturnValue([v14 serviceWithName:v9]);

    if (v15)
    {
      self->_category = [v15 controlCategory];
      id v16 = objc_alloc(&OBJC_CLASS___NSSet);
      __int16 v17 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance"));
      id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 serviceNameToControlCategoryMap]);
      id v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_category));
      id v20 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKey:v19]);
      id v21 = -[NSSet initWithArray:](v16, "initWithArray:", v20);
      impactedServices = self->_impactedServices;
      self->_impactedServices = v21;

      goto LABEL_5;
    }

    id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSFirewall](&OBJC_CLASS___IDSFoundationLog, "IDSFirewall"));
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      id v25 = "Invalid service name. Could not fetch service properties.";
      id v26 = v24;
      __int16 v27 = 2;
      goto LABEL_8;
    }

    goto LABEL_9;
  }

  return v11;
}

      if (v16 <= 0x100u)
      {
        if (v16 == 1)
        {
          memset(buf, 170, 0x5D0uLL);
          memset(__b, 170, sizeof(__b));
          id v28 = *(_OWORD *)&a3->var18.__ss_pad2[64];
          uint64_t v90 = *(_OWORD *)&a3->var18.__ss_pad2[48];
          v91 = v28;
          id v29 = *(_OWORD *)&a3->var18.__ss_pad2[96];
          v92 = *(_OWORD *)&a3->var18.__ss_pad2[80];
          uint64_t v93 = v29;
          id v30 = *(_OWORD *)a3->var18.__ss_pad2;
          v86 = *(_OWORD *)&a3->var18.ss_len;
          v87 = v30;
          __int128 v31 = *(_OWORD *)&a3->var18.__ss_pad2[32];
          uint64_t v88 = *(_OWORD *)&a3->var18.__ss_pad2[16];
          v89 = v31;
          int v32 = *(_OWORD *)&a3->var19.__ss_pad2[64];
          id v33 = *(_OWORD *)&a3->var19.__ss_pad2[80];
          uint64_t v82 = *(_OWORD *)&a3->var19.__ss_pad2[48];
          v83 = v32;
          __int16 v34 = *(_OWORD *)&a3->var19.__ss_pad2[96];
          uint64_t v84 = v33;
          v85 = v34;
          uint64_t v35 = *(_OWORD *)a3->var19.__ss_pad2;
          uint64_t v78 = *(_OWORD *)&a3->var19.ss_len;
          v79 = v35;
          __int128 v36 = *(_OWORD *)&a3->var19.__ss_pad2[32];
          v80 = *(_OWORD *)&a3->var19.__ss_pad2[16];
          v81 = v36;
          var17 = a3->var17;
          v57[0] = _NSConcreteStackBlock;
          v57[1] = 3221225472LL;
          v57[2] = sub_100155A48;
          v57[3] = &unk_1008FBA68;
          v57[4] = self;
          uint64_t v38 = v15;
          v58 = v38;
          __int128 v64 = v90;
          v65 = v91;
          id v66 = v92;
          v67 = v93;
          id v60 = v86;
          __int128 v61 = v87;
          __int128 v62 = v88;
          __int128 v63 = v89;
          uint64_t v74 = v84;
          v75 = v85;
          uint64_t v73 = v83;
          v72 = v82;
          v71 = v81;
          uint64_t v70 = v80;
          v69 = v79;
          uint64_t v59 = v12;
          uint64_t v77 = var17;
          v68 = v78;
          v76 = a5;
          id v39 = objc_retainBlock(v57);
          if ([v38 getAttribute:37 attribute:buf]
            && [v38 getAttribute:6 attribute:__b]
            && !self->_remotePartyID)
          {
            uint64_t v45 = OSLogHandleForTransportCategory("UGL");
            id v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint64_t v56 = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "delay nomination request before Accept.",  v56,  2u);
            }

            id v48 = os_log_shim_legacy_logging_enabled(v47);
            if ((_DWORD)v48)
            {
              if (_IDSShouldLogTransport(v48))
              {
                _IDSLogTransport(@"UGL", @"IDS", @"delay nomination request before Accept.");
              }
            }

            if (self->_nominateBlocks
              || (id v49 = objc_alloc_init(&OBJC_CLASS___NSMutableArray),
                  id v50 = self->_nominateBlocks,
                  self->_nominateBlocks = v49,
                  v50,
                  self->_nominateBlocks))
            {
              id v51 = objc_msgSend(v39, "copy", v55);
              id v52 = v51 == 0LL;

              if (!v52)
              {
                nominateBlocks = self->_nominateBlocks;
                v54 = [v39 copy];
                CFArrayAppendValue((CFMutableArrayRef)nominateBlocks, v54);
              }
            }
          }

          else
          {
            ((void (*)(void *))v39[2])(v39);
          }

          goto LABEL_42;
        }

        if (v16 == 23)
        {
          -[IDSUDPGlobalLink _processStunDataIndication:fromDevice:localIfIndex:localAddress:remmoteAddress:arrivalTime:packetBuffer:fromDeviceUniqueID:cbuuid:]( self,  "_processStunDataIndication:fromDevice:localIfIndex:localAddress:remmoteAddress:arrivalTime:packetBuffer:from DeviceUniqueID:cbuuid:",  v15,  v12,  a3->var17,  &a3->var18,  &a3->var19,  a3,  a5,  v13,  v14);
          goto LABEL_42;
        }
      }

      else
      {
        switch(v16)
        {
          case 0x101u:
            -[IDSUDPGlobalLink _processStunBindingResponse:fromDevice:localIfIndex:localAddress:remmoteAddress:arrivalTime:]( self,  "_processStunBindingResponse:fromDevice:localIfIndex:localAddress:remmoteAddress:arrivalTime:",  v15,  v12,  a3->var17,  &a3->var18,  &a3->var19,  a5);
            goto LABEL_42;
          case 0xEE3u:
            -[IDSUDPGlobalLink _processStunEchoRequest:fromDevice:localIfIndex:localAddress:remmoteAddress:arrivalTime:]( self,  "_processStunEchoRequest:fromDevice:localIfIndex:localAddress:remmoteAddress:arrivalTime:",  v15,  v12,  a3->var17,  &a3->var18,  &a3->var19,  a5);
            goto LABEL_42;
          case 0xFE3u:
            -[IDSUDPGlobalLink _processStunEchoResponse:fromDevice:localIfIndex:localAddress:remmoteAddress:arrivalTime:]( self,  "_processStunEchoResponse:fromDevice:localIfIndex:localAddress:remmoteAddress:arrivalTime:",  v15,  v12,  a3->var17,  &a3->var18,  &a3->var19,  a5);
LABEL_42:
            __int16 v27 = 1;
            goto LABEL_43;
        }
      }

      uint64_t v40 = OSLogHandleForTransportCategory("UGL");
      v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "_processStunPacket - receive invalid STUN message, type (%04X)",  buf,  8u);
      }

      v43 = os_log_shim_legacy_logging_enabled(v42);
      if ((_DWORD)v43)
      {
        if (_IDSShouldLogTransport(v43))
        {
          _IDSLogTransport( @"UGL",  @"IDS",  @"_processStunPacket - receive invalid STUN message, type (%04X)");
          if (_IDSShouldLog(0LL, @"UGL")) {
            _IDSLogV( 0LL,  @"IDSFoundation",  @"UGL",  @"_processStunPacket - receive invalid STUN message, type (%04X)");
          }
        }
      }

      goto LABEL_42;
    }

    id v23 = OSLogHandleForTransportCategory("UGL");
    id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "failed to verify message intergrity for stun packet type %04x.",  buf,  8u);
    }

    id v26 = os_log_shim_legacy_logging_enabled(v25);
    if ((_DWORD)v26)
    {
      if (_IDSShouldLogTransport(v26))
      {
        _IDSLogTransport( @"UGL",  @"IDS",  @"failed to verify message intergrity for stun packet type %04x.");
        if (_IDSShouldLog(0LL, @"UGL")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"UGL",  @"failed to verify message intergrity for stun packet type %04x.");
        }
      }
    }
  }

  else
  {
    id v20 = OSLogHandleForIDSCategory("UGL");
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "_processStunPacket failed.", buf, 2u);
    }
  }

  __int16 v27 = 0;
LABEL_43:

  return v27;
}

  os_unfair_lock_unlock(p_lock);

  return v8;
}

  os_unfair_lock_unlock(p_lock);

  return v9;
}

            id v9 = IDSDSessionMessageRealTimeEncryptionPublicKey;
            id v10 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) objectForKey:IDSDSessionMessageRealTimeEncryptionPublicKey]);

            if (!v10)
            {
LABEL_31:
              v179[2]();
              id WeakRetained = objc_loadWeakRetained((id *)(a1 + 128));
              [WeakRetained updateCriticalReliabilityState];

              goto LABEL_32;
            }

            uint64_t v11 = OSLogHandleForIDSCategory("SessionController");
            id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
            uint64_t v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
            if (v13)
            {
              int8x16_t v14 = *(void **)(a1 + 80);
              int v15 = ids_monotonic_time(v13);
              *(_DWORD *)buf = 138412546;
              v190 = v14;
              v191 = 2048;
              v192 = v15;
              _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Receiving Key Material (%@) [PreKey] -- %f",  buf,  0x16u);
            }

            if (os_log_shim_legacy_logging_enabled(v16))
            {
              __int16 v17 = _IDSShouldLog(0LL, @"SessionController");
              if ((_DWORD)v17)
              {
                id v18 = *(void **)(a1 + 80);
                v170 = ids_monotonic_time(v17);
                v166 = v18;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"SessionController",  @"Receiving Key Material (%@) [PreKey] -- %f");
              }
            }

            id v19 = *(void **)(a1 + 88);
            id v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "rawToken", v166, *(void *)&v170));
            [v19 reportPreKeyReceivedOverPushFromToken:v20];

            id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v9]);
            id v23 = objc_opt_class(&OBJC_CLASS___NSString, v22);
            if ((objc_opt_isKindOfClass(v21, v23) & 1) != 0)
            {
              id v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v9]);
              id v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSData _IDSDataFromBase64String:]( &OBJC_CLASS___NSData,  "_IDSDataFromBase64String:",  v24));
            }

            else
            {
              id v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v9]);
              __int16 v27 = objc_opt_class(&OBJC_CLASS___NSData, v26);
              if ((objc_opt_isKindOfClass(v24, v27) & 1) == 0)
              {
                id v28 = 0LL;
                goto LABEL_23;
              }

              id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v9]);
            }

            id v28 = v25;

LABEL_23:
            __int16 v34 = objc_opt_class(&OBJC_CLASS___NSNumber, v33);
            uint64_t v35 = sub_1001D39BC(v34, *(void **)(a1 + 32), IDSDSessionMessageRealTimeEncryptionWrapModeKey);
            __int128 v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
            if (v28)
            {
              uint64_t v37 = OSLogHandleForIDSCategory("SessionController");
              uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
              if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
              {
                id v39 = *(double *)(a1 + 96);
                uint64_t v40 = *(const __CFString **)(a1 + 40);
                *(_DWORD *)buf = 138478339;
                v190 = v28;
                v191 = 2112;
                v192 = v39;
                v193 = 2112;
                v194 = v40;
                _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "Storing the public key %{private}@ for %@ token %@",  buf,  0x20u);
              }

              if (os_log_shim_legacy_logging_enabled(v41)
                && _IDSShouldLog(0LL, @"SessionController"))
              {
                v171 = *(void *)(a1 + 96);
                v172 = *(const __CFString **)(a1 + 40);
                v167 = v28;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"SessionController",  @"Storing the public key %{private}@ for %@ token %@");
              }

              uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance",  v167,  v171,  v172));
              objc_msgSend( v42,  "setRealTimeEncryptionPublicKey:forDevice:fromURI:groupID:sessionID:serverDate:wrapMode:",  v28,  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  objc_msgSend(v36, "integerValue"));
            }

            goto LABEL_31;
          }
        }

        v152 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v148]);
        v153 = [v152 BOOLValue];

        v154 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v150]);
        v155 = [v154 BOOLValue];

        if ((v153 | v155) == 1)
        {
          v156 = OSLogHandleForIDSCategory("SessionController");
          v157 = (os_log_s *)objc_claimAutoreleasedReturnValue(v156);
          if (os_log_type_enabled(v157, OS_LOG_TYPE_DEFAULT))
          {
            v158 = *(void **)(a1 + 104);
            v159 = @"NO";
            if (v153) {
              *(double *)&v160 = COERCE_DOUBLE(@"YES");
            }
            else {
              *(double *)&v160 = COERCE_DOUBLE(@"NO");
            }
            *(_DWORD *)buf = 138412802;
            v190 = v158;
            v191 = 2112;
            if (v155) {
              v159 = @"YES";
            }
            v192 = *(double *)&v160;
            v193 = 2112;
            v194 = v159;
            _os_log_impl( (void *)&_mh_execute_header,  v157,  OS_LOG_TYPE_DEFAULT,  "Received the key recovery request for group %@, needsToRecoverMKM: %@, needsToRecoverSKM: %@",  buf,  0x20u);
          }

          if (os_log_shim_legacy_logging_enabled(v161)
            && _IDSShouldLog(0LL, @"SessionController"))
          {
            v162 = @"NO";
            if (v153) {
              *(double *)&v163 = COERCE_DOUBLE(@"YES");
            }
            else {
              *(double *)&v163 = COERCE_DOUBLE(@"NO");
            }
            if (v155) {
              v162 = @"YES";
            }
            v170 = *(double *)&v163;
            v172 = v162;
            v166 = *(void **)(a1 + 104);
            _IDSLogV( 0LL,  @"IDSFoundation",  @"SessionController",  @"Received the key recovery request for group %@, needsToRecoverMKM: %@, needsToRecoverSKM: %@");
          }

          v164 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance",  v166,  *(void *)&v170,  v172));
          BYTE1(v169) = v155;
          LOBYTE(v169) = v153;
          objc_msgSend( v164,  "processIncomingKeyMaterialsRecoveryRequest:fromDevice:fromURI:groupID:sessionID:serverDate:requireMKM:requireSKM:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  v169);
        }

        goto LABEL_9;
      }
    }

    uint64_t v45 = objc_opt_class(&OBJC_CLASS___NSDictionary, v31);
    id v46 = sub_1001D39BC(v45, *(void **)(a1 + 32), v29);
    v178 = (void *)objc_claimAutoreleasedReturnValue(v46);
    v180 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    id v48 = objc_opt_class(&OBJC_CLASS___NSDictionary, v47);
    id v49 = sub_1001D39BC(v48, *(void **)(a1 + 32), v32);
    v177 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue(v49));
    if (v178)
    {
      id v51 = OSLogHandleForIDSCategory("SessionController");
      id v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
      id v53 = os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT);
      if (v53)
      {
        v54 = *(void **)(a1 + 80);
        *(_DWORD *)buf = 138412546;
        v190 = v54;
        v191 = 2048;
        v192 = ids_monotonic_time(v53);
        _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "Receiving Key Material (%@) [MKM] -- %f",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v55))
      {
        uint64_t v56 = _IDSShouldLog(0LL, @"SessionController");
        if ((_DWORD)v56)
        {
          v57 = *(void **)(a1 + 80);
          v170 = ids_monotonic_time(v56);
          v166 = v57;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"SessionController",  @"Receiving Key Material (%@) [MKM] -- %f");
        }
      }

      if (v177 == 0.0)
      {
        v58 = 0;
        goto LABEL_49;
      }
    }

    else if (v177 == 0.0)
    {
      uint64_t v94 = 1;
LABEL_96:
      uint64_t v110 = objc_opt_class(&OBJC_CLASS___NSArray, v50);
      id v111 = sub_1001D39BC(v110, *(void **)(a1 + 32), IDSDSessionMessageRealTimeEncryptionKeyAllValidKeyMaterialsKey);
      v176 = (void *)objc_claimAutoreleasedReturnValue(v111);
      v112 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) objectForKey:IDSDSessionMessageRealTimeEncryptionKeyAllValidKeyMaterialsURIsKey]);
      v175 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "__imArrayByApplyingBlock:", &stru_1008FD828));

      v113 = v94 ^ 1;
      if (!v176) {
        v113 = 1;
      }
      if ((v113 & 1) == 0)
      {
        v185 = 0u;
        v186 = 0u;
        v183 = 0u;
        v184 = 0u;
        id obj = v176;
        id v114 = [obj countByEnumeratingWithState:&v183 objects:v188 count:16];
        if (v114)
        {
          uint64_t v115 = *(void *)v184;
          id v116 = IDSRealTimeEncryptionParticipantID;
          while (2)
          {
            v117 = 0LL;
            do
            {
              if (*(void *)v184 != v115) {
                objc_enumerationMutation(obj);
              }
              v118 = *(void **)(*((void *)&v183 + 1) + 8LL * (void)v117);
              v119 = OSLogHandleForIDSCategory("SessionController");
              id v120 = (os_log_s *)objc_claimAutoreleasedReturnValue(v119);
              if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
              {
                id v121 = *(double *)(a1 + 96);
                id v122 = *(const __CFString **)(a1 + 40);
                *(_DWORD *)buf = 138478339;
                v190 = v118;
                v191 = 2112;
                v192 = v121;
                v193 = 2112;
                v194 = v122;
                _os_log_impl( (void *)&_mh_execute_header,  v120,  OS_LOG_TYPE_DEFAULT,  "Storing all valid master key materials %{private}@ for %@ token %@",  buf,  0x20u);
              }

              if (os_log_shim_legacy_logging_enabled(v123)
                && _IDSShouldLog(0LL, @"SessionController"))
              {
                v170 = *(double *)(a1 + 96);
                v172 = *(const __CFString **)(a1 + 40);
                v166 = v118;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"SessionController",  @"Storing all valid master key materials %{private}@ for %@ token %@");
              }

              uint64_t v124 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v118, "objectForKeyedSubscript:", v116, v166, *(void *)&v170, v172));
              __int128 v125 = [v124 unsignedLongLongValue];

              [*(id *)(a1 + 88) reportMKMReceivedOverPushViaCacheForParticipantID:v125 material:v118];
              __int128 v126 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
              __int128 v127 = *(void *)(a1 + 40);
              __int128 v128 = *(void *)(a1 + 48);
              __int128 v129 = *(void *)(a1 + 104);
              __int128 v130 = *(void *)(a1 + 112);
              v182 = 0LL;
              LOWORD(v172) = 1;
              v170 = COERCE_DOUBLE(&v182);
              LOBYTE(v166) = 0;
              __int128 v131 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v126,  "receivedAndSetKeyMaterial:stableKeyMaterial:forDevice:fromURI:groupID:sessionID:fromSen der:error:forMKM:forSKM:",  v118,  0,  v127,  v128,  v129,  v130));
              __int128 v132 = v182;

              if (v131)
              {
                char v133 = (void *)objc_claimAutoreleasedReturnValue([v131 objectForKey:@"ids-rtencryption-master-key-material-key"]);
                if (v133)
                {
                  [v180 addObject:v133];
                }

                else if (v132)
                {
                  __int128 v139 = (void *)objc_claimAutoreleasedReturnValue([v132 domain]);
                  if ([v139 isEqualToString:@"IDSRealTimeEncryptionControllerErrorDomain"])
                  {
                    __int128 v140 = [v132 code] == (id)-2000;

                    if (v140)
                    {
                      v142 = OSLogHandleForIDSCategory("SessionController");
                      v143 = (os_log_s *)objc_claimAutoreleasedReturnValue(v142);
                      if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl( (void *)&_mh_execute_header,  v143,  OS_LOG_TYPE_DEFAULT,  "Failed to decrypt a key material in the broadcast group -- skipping the remaining key material",  buf,  2u);
                      }

                      if (os_log_shim_legacy_logging_enabled(v145)
                        && _IDSShouldLog(0LL, @"SessionController"))
                      {
                        _IDSLogV( 0LL,  @"IDSFoundation",  @"SessionController",  @"Failed to decrypt a key material in the broadcast group -- skipping the remaining key material");
                      }

                      goto LABEL_133;
                    }
                  }

                  else
                  {
                  }
                }
              }

              else
              {
                __int128 v134 = OSLogHandleForIDSCategory("SessionController");
                __int128 v135 = (os_log_s *)objc_claimAutoreleasedReturnValue(v134);
                if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
                {
                  __int128 v136 = *(void **)(a1 + 96);
                  __int128 v137 = *(double *)(a1 + 40);
                  *(_DWORD *)buf = 138412546;
                  v190 = v136;
                  v191 = 2112;
                  v192 = v137;
                  _os_log_impl( (void *)&_mh_execute_header,  v135,  OS_LOG_TYPE_DEFAULT,  "not received any valid remote cached MKMs for %@ token %@",  buf,  0x16u);
                }

                if (os_log_shim_legacy_logging_enabled(v138)
                  && _IDSShouldLog(0LL, @"SessionController"))
                {
                  v166 = *(void **)(a1 + 96);
                  v170 = *(double *)(a1 + 40);
                  _IDSLogV( 0LL,  @"IDSFoundation",  @"SessionController",  @"not received any valid remote cached MKMs for %@ token %@");
                }
              }

              v117 = (char *)v117 + 1;
            }

            while (v114 != v117);
            __int128 v141 = [obj countByEnumeratingWithState:&v183 objects:v188 count:16];
            id v114 = v141;
            if (v141) {
              continue;
            }
            break;
          }
        }

    goto LABEL_10;
  }

  if (-[IDSDAccount accountType](self, "accountType") == 2)
  {
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(-[IDSDAccount uniqueID](self, "uniqueID"));
      sub_1006A1798();
    }

    goto LABEL_9;
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[IDSRegistrationController sharedInstance](&OBJC_CLASS___IDSRegistrationController, "sharedInstance"));
  [v8 unregisterInfo:self->_registrationInfo];

  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[IDSRegistrationController sharedInstance](&OBJC_CLASS___IDSRegistrationController, "sharedInstance"));
  [v9 stopTrackingRegistration:self->_registrationInfo];

  if (!-[IDSRegistration registrationType](self->_registrationInfo, "registrationType")) {
    -[IDSRegistration setAuthenticationToken:](self->_registrationInfo, "setAuthenticationToken:", 0LL);
  }
  -[IDSDAccount _notifyListenersAndSetDependentRegistrations:onRegistrationInfo:]( self,  "_notifyListenersAndSetDependentRegistrations:onRegistrationInfo:",  0LL,  self->_registrationInfo);
  -[IDSRegistration saveToKeychain](self->_registrationInfo, "saveToKeychain");
LABEL_10:
  os_activity_scope_leave(&state);
  cut_arc_os_release(&v11);
}

    return;
  }

  if (-[IDSRegistration registrationType](self->_registrationInfo, "registrationType") != 1
    && -[IDSRegistration registrationType](self->_registrationInfo, "registrationType"))
  {
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount uniqueID](self, "uniqueID"));
      *(_DWORD *)buf = 138412290;
      id v30 = v6;
      id v7 = " => Not updating handles, this is not an apple ID or phone based account for: %@";
LABEL_8:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v7, buf, 0xCu);

      goto LABEL_9;
    }

    goto LABEL_9;
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount systemMonitor](self, "systemMonitor"));
  id v9 = [v8 isUnderFirstDataProtectionLock];

  if (v9)
  {
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Device is still under first data protection lock, deferring request",  buf,  2u);
    }

    *((_BYTE *)self + 80) |= 0x40u;
  }

  else
  {
    uint64_t v11 = *((unsigned __int8 *)self + 80);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    uint64_t v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if ((v11 & 0x10) != 0)
    {
      if (v13)
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Not issuing handle gathering, we're in progress now",  buf,  2u);
      }
    }

    else
    {
      if (v13)
      {
        int8x16_t v14 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount uniqueID](self, "uniqueID"));
        *(_DWORD *)buf = 138412290;
        id v30 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  " => Kicking off handle gathering for: %@",  buf,  0xCu);
      }

      *((_BYTE *)self + 80) |= 0x10u;
      int v15 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount _unprefixedURIStringsFromAccountInfo](self, "_unprefixedURIStringsFromAccountInfo"));
      id v16 = [v15 copy];

      __int16 v17 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount vettedAliases](self, "vettedAliases"));
      id v18 = [v17 copy];

      id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v30 = v16;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "  (currentAliases: %@)", buf, 0xCu);
      }

      id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v30 = v18;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "  (currentVettedAliases: %@)", buf, 0xCu);
      }

      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        id v22 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount uniqueID](self, "uniqueID"));
        *(_DWORD *)buf = 138412290;
        id v30 = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "  * Sending handle update request for: %@",  buf,  0xCu);
      }

      id v23 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount registrationCenter](self, "registrationCenter"));
      registrationInfo = self->_registrationInfo;
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472LL;
      v26[2] = sub_1001E7524;
      v26[3] = &unk_1008FDAC0;
      v26[4] = self;
      __int16 v27 = v16;
      id v28 = v18;
      id v25 = v18;
      id v12 = (os_log_s *)v16;
      [v23 queryValidatedEmailsForRegistration:registrationInfo allowPasswordPrompt:v3 completionBlock:v26];
    }
  }
}
}
}

    id v5 = 0;
    goto LABEL_10;
  }

  id v5 = 1;
LABEL_10:

  return v5;
}

    return;
  }

  if (v5)
  {
    id v6 = *(void *)(a1 + 32);
    id v9 = 138412290;
    id v10 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "User hit default button on IDS registration alert { actionURL: %@ }",  (uint8_t *)&v9,  0xCu);
  }

  if (*(void *)(a1 + 32))
  {
    id v4 = -[NSURL initWithString:](objc_alloc(&OBJC_CLASS___NSURL), "initWithString:", *(void *)(a1 + 32));
    if (v4)
    {
      id v7 = objc_msgSend( (id)IMWeakLinkClass(@"LSApplicationWorkspace", @"MobileCoreServices"),  "defaultWorkspace");
      id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      [v8 openURL:v4 withOptions:0];
    }

    goto LABEL_9;
  }
}

    id v20 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
    id v49 = (void *)objc_claimAutoreleasedReturnValue([v20 serviceWithPushTopic:v11]);

    id v46 = [v49 dataProtectionClass];
    id v21 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon systemMonitor](self, "systemMonitor"));
    id v22 = v12;
    id v23 = [v21 isUnderFirstDataProtectionLock];

    id v24 = v49;
    if (!v23
      || [v49 dataProtectionClass]
      || ([v49 shouldHaveRestrictedStorage] & 1) != 0)
    {
      if (([v49 passThroughMessagesFromStorage] & 1) != 0
        || [v49 shouldHaveRestrictedStorage])
      {
        id v25 = self;
        id v26 = v10;
        __int16 v27 = v11;
        id v28 = v50;
        id v12 = v22;
LABEL_15:
        -[IDSDaemon _processIncomingRemoteNiceMessage:forTopic:fromURI:storedGuid:messageContext:]( v25,  "_processIncomingRemoteNiceMessage:forTopic:fromURI:storedGuid:messageContext:",  v26,  v27,  v28,  0LL,  v22);
LABEL_33:

        goto LABEL_34;
      }

      id v29 = -[IDSDaemon _isBulkingStorageMessagesForService:](self, "_isBulkingStorageMessagesForService:", v11);
      if ((v16 & 1) == 0 && (v29 & 1) == 0 && !v18)
      {
        id v12 = v22;
        id v25 = self;
        id v26 = v10;
        __int16 v27 = v11;
        id v28 = v50;
        goto LABEL_15;
      }

      id v30 = OSLogHandleForIDSCategory("IDSDaemon");
      __int128 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.opaque[0]) = 138412290;
        *(uint64_t *)((char *)buf.opaque + 4) = (uint64_t)v10;
        _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Message is from server storage %@",  (uint8_t *)&buf,  0xCu);
      }

      v51[0] = _NSConcreteStackBlock;
      v51[1] = 3221225472LL;
      v51[2] = sub_100384528;
      v51[3] = &unk_100902818;
      id v33 = v10;
      v55 = v18 >> 1;
      id v12 = v22;
      id v52 = v33;
      id v53 = self;
      v54 = v22;
      __int16 v34 = objc_retainBlock(v51);
      id v44 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _messageStoreForDataProtectionClass:]( self,  "_messageStoreForDataProtectionClass:",  v46));
      id v47 = (void *)objc_claimAutoreleasedReturnValue([v33 rawMessage]);
      uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v50 prefixedURI]);
      v43 = (void *)objc_claimAutoreleasedReturnValue([v33 pushUUID]);
      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v33 encryptedPayload]);
      objc_msgSend( v44,  "storeIncomingMessage:forTopic:fromID:messageUUID:messagePayload:dedupBehavior:completionBlock:",  v47,  v11,  v45,  v43,  v35,  -[IDSDaemon _dedupBehaviorForNiceMessage:](self, "_dedupBehaviorForNiceMessage:", v33),  v34);
    }

    else
    {
      v57 = _os_activity_create( (void *)&_mh_execute_header,  "Storing under first lock",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
      memset(&buf, 170, sizeof(buf));
      os_activity_scope_enter(v57, &buf);
      __int128 v36 = OSLogHandleForIDSCategory("IDSDaemon");
      uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
      id v12 = v22;
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v56 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  " => Deferring message, service wants messages after first unlock only",  v56,  2u);
      }

      if (os_log_shim_legacy_logging_enabled(v38) && _IDSShouldLog(0LL, @"IDSDaemon")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @" => Deferring message, service wants messages after first unlock only");
      }
      id v39 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon messageStoreForDataProtectionClass:](self, "messageStoreForDataProtectionClass:", 2LL));
      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v10 rawMessage]);
      id v48 = (void *)objc_claimAutoreleasedReturnValue([v50 prefixedURI]);
      v41 = (void *)objc_claimAutoreleasedReturnValue([v10 pushUUID]);
      uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v10 encryptedPayload]);
      objc_msgSend( v39,  "storeIncomingMessage:forTopic:fromID:messageUUID:messagePayload:dedupBehavior:completionBlock:",  v40,  v11,  v48,  v41,  v42,  -[IDSDaemon _dedupBehaviorForNiceMessage:](self, "_dedupBehaviorForNiceMessage:", v10),  0);

      os_activity_scope_leave(&buf);
      cut_arc_os_release(&v57);
    }

    id v24 = v49;
    goto LABEL_33;
  }

  if ((v16 & 1) != 0) {
    -[IDSDaemon _noteItemFromStorage:](self, "_noteItemFromStorage:", 0LL);
  }
LABEL_34:
}

  return v9;
}

    id v24 = 0LL;
    goto LABEL_10;
  }

LABEL_12:
  __int16 v27 = (void *)objc_claimAutoreleasedReturnValue([v11 transparencyStatus]);
  id v28 = [v27 integerValue];

  if (v28) {
    id v29 = @"☠️";
  }
  else {
    id v29 = @"✅";
  }
  id v30 = (void *)objc_claimAutoreleasedReturnValue([v10 URI]);
  __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([v11 transparencyStatus]);
  int v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"🔍 🔓 %@\nKT query\n{ %@, %@ }",  v29,  v30,  v31));
  -[IDSKeyTransparencyVerifier _presentInternalVerificationAlertWithText:]( self,  "_presentInternalVerificationAlertWithText:",  v32);

  id v24 = (void *)objc_claimAutoreleasedReturnValue( -[IDSKeyTransparencyVerifier _transparencyTicketForQueryResultsWithIndex:verificationState:entries:]( self,  "_transparencyTicketForQueryResultsWithIndex:verificationState:entries:",  v10,  v11,  v12));
LABEL_10:

  return v24;
}

    id v25 = v21 + 1;
    if (__OFADD__(v21, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v25 >= v38) {
      break;
    }
    id v26 = *(void *)(v37 + 8 * v25);
    ++v21;
    if (v26) {
      goto LABEL_22;
    }
    id v21 = v25 + 1;
    if (v25 + 1 >= v38) {
      break;
    }
    id v26 = *(void *)(v37 + 8 * v21);
    if (v26) {
      goto LABEL_22;
    }
    id v21 = v25 + 2;
    if (v25 + 2 >= v38) {
      break;
    }
    id v26 = *(void *)(v37 + 8 * v21);
    if (v26) {
      goto LABEL_22;
    }
    __int16 v27 = v25 + 3;
    if (v27 >= v38) {
      break;
    }
    id v26 = *(void *)(v37 + 8 * v27);
    if (v26)
    {
      id v21 = v27;
LABEL_22:
      id v20 = (v26 - 1) & v26;
      id v24 = __clz(__rbit64(v26)) + (v21 << 6);
      goto LABEL_23;
    }

    while (1)
    {
      id v21 = v27 + 1;
      if (__OFADD__(v27, 1LL)) {
        break;
      }
      if (v21 >= v38) {
        goto LABEL_26;
      }
      id v26 = *(void *)(v37 + 8 * v21);
      ++v27;
      if (v26) {
        goto LABEL_22;
      }
    }

  uint64_t v35 = 0LL;
LABEL_10:
  __int128 v36 = [objc_allocWithZone(IMUserDefaults) init];
  uint64_t v37 = [objc_allocWithZone(NSNumber) initWithUnsignedInteger:v35];
  uint64_t v38 = String._bridgeToObjectiveC()();
  [v36 setAppValue:v37 forKey:v38];

  id v39 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent(0LL);
  sub_100410FD0(v61, (uint64_t)v27, &qword_1009BC130);
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v23, v62, v60);
  swift_bridgeObjectRetain(a11);
  uint64_t v40 = v64;
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRetain(a9);
  v41 = sub_10044CE7C(v63, v40, (uint64_t)v27, v23, v65, v66, v67, a9, a10, a11, v35);
  uint64_t v42 = sub_10040A2B0( &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
  dispatch thunk of ModelContext.insert<A>(_:)(v41, v39, v42);
  if (v35 <= *(void *)sub_1004D4864()) {
    return swift_release(v41);
  }
  __chkstk_darwin(v43, v44);
  v52[2] = v45;
  v70[0] = v39;
  id v46 = v54;
  Predicate.init(_:)(sub_100513420, v52, 1LL, v70);
  id v47 = v55;
  id v48 = (uint64_t)v57;
  id v49 = v56;
  (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v57, v46, v56);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v47 + 56))(v48, 0LL, 1LL, v49);
  id v50 = v58;
  dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)(v39, v48, 1LL, v39, v42);
  swift_release(v41);
  if (v50) {
    swift_errorRelease(v50);
  }
  sub_10040A274(v48, &qword_1009BC530);
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v46, v49);
}

LABEL_37:
        __int128 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          v224 = v3;
          int v32 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
          id v33 = (void *)objc_claimAutoreleasedReturnValue([v32 signature]);
          if (v33) {
            __int16 v34 = @"YES";
          }
          else {
            __int16 v34 = @"NO";
          }
          uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
          if ([v35 publicKey]) {
            __int128 v36 = @"YES";
          }
          else {
            __int128 v36 = @"NO";
          }
          uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
          if ([v37 privateKey]) {
            uint64_t v38 = @"YES";
          }
          else {
            uint64_t v38 = @"NO";
          }
          *(_DWORD *)buf = 138412802;
          v249 = v34;
          v250 = 2112;
          v251 = v36;
          v252 = 2112;
          v253 = v38;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Unable to load a registration key pair {signature: %@, publicKey: %@, privateKey: %@}",  buf,  0x20u);

          uint64_t v3 = v224;
        }

        self->_loaded = 0;
        goto LABEL_49;
      }
    }

    goto LABEL_37;
  }

            id v12 = 1;
LABEL_38:
            id v47 = v4;
            id v49 = v26;
            __int16 v34 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager identityDataSource](self, "identityDataSource"));
            uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "dataRepresentationForNGMVersion:", objc_msgSend(v30, "unsignedIntValue")));

            __int128 v36 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager keychainWrapper](self, "keychainWrapper"));
            uint64_t v56 = v51;
            uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue( [v36 dataForIdentifier:@"ngm-message-protection-public-data-registered-version" error:&v56]);
            v54 = v56;

            uint64_t v38 = v37;
            if ([v37 length])
            {
              id v39 = [v37 isEqual:v35];
              id v22 = v52;
              id v4 = v47;
              if ((v39 & 1) != 0)
              {
LABEL_46:

                int v32 = v49;
LABEL_47:

LABEL_48:
                uint64_t v11 = v54;
                -[NSRecursiveLock lock](self->_lock, "lock");
                if (-[IDSPerServiceApplicationKeyManager needsPublicDataUpdatedForKeyIndex:]( self->_applicationKeyManager,  "needsPublicDataUpdatedForKeyIndex:",  v5))
                {
                  uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "Application service key needs update",  buf,  2u);
                  }

                  id v12 = 1;
                }

                if (-[IDSKTRegistrationDataManager needsPublicDataUpdatedForKeyIndex:]( self->_ktRegistrationDataManager,  "needsPublicDataUpdatedForKeyIndex:",  v4))
                {
                  v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "KT Registration Data needs update",  buf,  2u);
                  }

                  id v12 = 1;
                }

                -[NSRecursiveLock unlock](self->_lock, "unlock");

LABEL_57:
                goto LABEL_58;
              }

              uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138543618;
                __int128 v63 = (os_log_s *)v38;
                __int128 v64 = 2114;
                v65 = v35;
                _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "Registered ngmVersionData doesn't match current data -- returning YES {registeredNGMVersionData: %{pub lic}@, publicNGMVersionData: %{public}@}",  buf,  0x16u);
              }
            }

            else
            {
              uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
              {
                v41 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
                *(_DWORD *)buf = 138543619;
                __int128 v63 = v54;
                __int128 v64 = 2113;
                v65 = v41;
                _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "Registered ngm data version is empty -- returning YES {error: %{public}@, config: %{private}@}",  buf,  0x16u);
              }

              id v22 = v52;
              id v4 = v47;
            }

            id v12 = 1;
            goto LABEL_46;
          }

          __int128 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138478083;
            __int128 v63 = v26;
            __int128 v64 = 2113;
            v65 = v53;
            _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Registered ngm identity data doesn't match current data -- returning YES {registeredNGMIdentityData: %{pri vate}@, publicNGMIdentityData: %{private}@}",  buf,  0x16u);
          }
        }

        else
        {
          __int128 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            id v33 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
            *(_DWORD *)buf = 138543619;
            __int128 v63 = v51;
            __int128 v64 = 2113;
            v65 = v33;
            _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Registered ngm data is empty -- returning YES { error: %{public}@, config: %{private}@}",  buf,  0x16u);
          }
        }

        id v30 = v52;
        uint64_t v13 = v48;
        goto LABEL_37;
      }

      int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138478083;
        __int128 v63 = v13;
        __int128 v64 = 2113;
        v65 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Registered legacy data doesn't match current data -- returning YES {registeredLegacyData: %{private}@, publicL egacyData: %{private}@}",  buf,  0x16u);
      }
    }

    else
    {
      int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        id v16 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
        *(_DWORD *)buf = 138543619;
        __int128 v63 = v54;
        __int128 v64 = 2113;
        v65 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Registered legacy data is empty -- returning YES {error: %{public}@, config: %{private}@}",  buf,  0x16u);
      }
    }

    id v12 = 1;
    goto LABEL_17;
  }

  id v12 = 0;
LABEL_58:

  return v12;
}
    }

  __int16 v34 = 0LL;
LABEL_38:

  return v34;
}

      v218 = 0LL;
LABEL_159:

      unint64_t v2 = v206;
      goto LABEL_160;
    }

    v207 = (NSString *)objc_claimAutoreleasedReturnValue([v217 groupData]);
    if (v207)
    {
      int v15 = +[NSKeyedUnarchiver ids_secureUnarchiveObjectOfClass:withData:]( &OBJC_CLASS___NSKeyedUnarchiver,  "ids_secureUnarchiveObjectOfClass:withData:",  objc_opt_class(&OBJC_CLASS___IDSDestination, v14),  v207);
      id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      [v217 setDestinations:v16];
    }

    __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountController]);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v217 mainAccountUUID]);
    v218 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([v17 accountWithUniqueID:v18]);

    id v19 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary service](v218, "service"));
    id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 pushTopic]);
    LODWORD(v1_Block_object_dispose(va, 8) = [v20 hasPrefix:@"com.apple.private.alloy.continuity"];

    if ((_DWORD)v18) {
      kdebug_trace(722010240LL, 0LL, 0LL, 0LL, 0LL);
    }
    if (!v218)
    {
      id v44 = OSLogHandleForIDSCategory("IDSDaemon");
      uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        id v46 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([v217 mainAccountUUID]);
        *(_DWORD *)buf = 138412290;
        v242 = v46;
        _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "(Messaging1) No account found for ID: %@",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v47) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        v191 = (void *)objc_claimAutoreleasedReturnValue([v217 mainAccountUUID]);
        _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"(Messaging1) No account found for ID: %@");
      }

      IMLogBacktrace(@"IDSDaemon");
      goto LABEL_37;
    }

    if ([v217 forceQuery] == (id)1)
    {
      id v21 = *(void **)(a1 + 32);
      id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localObject]);
      id v23 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary service](v218, "service"));
      id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 identifier]);
      LOBYTE(v21) = [v21 validateListenerForLocalObject:v22 andCheckEntitlement:kIDSForceQuerySendParameterEntitlement forAccessToServiceWithIdentifier:v24];

      if ((v21 & 1) == 0)
      {
        id v48 = objc_alloc(&OBJC_CLASS___NSString);
        id v49 = (void *)objc_claimAutoreleasedReturnValue([v217 messageUUID]);
        id v50 = -[NSString initWithData:encoding:](v48, "initWithData:encoding:", v49, 4LL);

        id v51 = OSLogHandleForIDSCategory("IDSDaemon");
        id v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        {
          id v53 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary service](v218, "service"));
          v54 = (void *)objc_claimAutoreleasedReturnValue([v53 identifier]);
          *(_DWORD *)buf = 138412546;
          v242 = (NSMutableDictionary *)v50;
          v243 = 2112;
          v244 = v54;
          _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "Message using force query parameter but does not have appropriate entitlement! { messageID: %@, service: %@}",  buf,  0x16u);
        }

        if (os_log_shim_legacy_logging_enabled(v55)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary service](v218, "service"));
          v198 = (void *)objc_claimAutoreleasedReturnValue([v56 identifier]);
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Message using force query parameter but does not have appropriate entitlement! { messageID: %@, service: %@}");
        }

        goto LABEL_159;
      }
    }

    id v25 = OSLogHandleForIDSCategory("IDSDaemon");
    id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Gossip - Trying to fetch STH.", buf, 2u);
    }

    id v28 = (void *)objc_claimAutoreleasedReturnValue([v217 destinations]);
    if (v28)
    {
      id v29 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary service](v218, "service"));
      id v30 = (void *)objc_claimAutoreleasedReturnValue([v29 pushTopic]);
      if (v30)
      {
        __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([v217 fromID]);
        int v32 = v31 == 0LL;

        if (!v32)
        {
          id v33 = (void *)objc_claimAutoreleasedReturnValue(+[IDSKTGossipManager sharedInstance](&OBJC_CLASS___IDSKTGossipManager, "sharedInstance"));
          __int16 v34 = (void *)objc_claimAutoreleasedReturnValue([v217 destinations]);
          uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary service](v218, "service"));
          __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v35 pushTopic]);
          uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v217 fromID]);
          v205 = (void *)objc_claimAutoreleasedReturnValue( [v33 gossipSTHPayloadForDestinations:v34 forServiceIdentifier:v36 fromID:v37]);

          if (v205)
          {
            v239 = NGMEncryptedAttributeKTGossipData;
            v240 = v205;
            uint64_t v38 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v240,  &v239,  1LL));
            id v39 = OSLogHandleForIDSCategory("IDSDaemon");
            uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
            if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              v242 = (NSMutableDictionary *)v38;
              _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "Gossip - Encrypted Attributes: %@",  buf,  0xCu);
            }

            if (os_log_shim_legacy_logging_enabled(v41)
              && _IDSShouldLog(0LL, @"IDSDaemon"))
            {
              v190 = v38;
              _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Gossip - Encrypted Attributes: %@");
            }

            uint64_t v42 = v217;
            v43 = (void *)v38;
            goto LABEL_51;
          }
        }
      }

      else
      {
      }
    }

    v57 = OSLogHandleForIDSCategory("IDSDaemon");
    v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEFAULT,  "Gossip - Retrieved nil STH. Will not gossip.",  buf,  2u);
    }

    v205 = 0LL;
    v43 = 0LL;
    uint64_t v42 = v217;
LABEL_51:
    v204 = v43;
    [v42 setEncryptionAttributes:v190];
    id v60 = (void *)objc_claimAutoreleasedReturnValue([v217 dataToEncrypt]);
    if (v60)
    {
      __int128 v61 = 1;
    }

    else
    {
      __int128 v62 = (void *)objc_claimAutoreleasedReturnValue([v217 protobuf]);
      __int128 v61 = v62 != 0LL;
    }

    if (([*(id *)(a1 + 32) _isUnderFirstDataProtectionLock] & v61) != 1)
    {
LABEL_66:
      uint64_t v74 = *(void **)(a1 + 32);
      v75 = (void *)objc_claimAutoreleasedReturnValue([v217 destinations]);
      LOBYTE(v74) = [v74 _canSendMessageWithAccount:v218 toDestination:v75];

      if ((v74 & 1) != 0)
      {
        if (-[NSMutableDictionary accountType](v218, "accountType") != 2)
        {
          v230 = 0u;
          v231 = 0u;
          v229 = 0u;
          v228 = 0u;
          v76 = (void *)objc_claimAutoreleasedReturnValue([v217 destinations]);
          id obj = (id)objc_claimAutoreleasedReturnValue([v76 destinationURIs]);

          v216 = [obj countByEnumeratingWithState:&v228 objects:v238 count:16];
          if (v216)
          {
            v213 = *(void *)v229;
            v210 = IDSDevicePropertyIdentities;
            v211 = IDSDevicePropertyPushToken;
            do
            {
              for (i = 0LL; i != v216; i = (char *)i + 1)
              {
                if (*(void *)v229 != v213) {
                  objc_enumerationMutation(obj);
                }
                uint64_t v78 = *(NSMutableDictionary **)(*((void *)&v228 + 1) + 8LL * (void)i);
                if (-[NSMutableDictionary hasPrefix:](v78, "hasPrefix:", @"device:"))
                {
                  v79 = OSLogHandleForIDSCategory("IDSDaemon");
                  v80 = (os_log_s *)objc_claimAutoreleasedReturnValue(v79);
                  if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_DEFAULT,  "Attempting to send to a local device using modern addressing, however we are not a local account, Swapping out destination for internet style addressing",  buf,  2u);
                  }

                  if (os_log_shim_legacy_logging_enabled(v81)
                    && _IDSShouldLog(0LL, @"IDSDaemon"))
                  {
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Attempting to send to a local device using modern addressing, however we are not a local account, Swapping out destination for internet style addressing");
                  }

                  uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary _stripFZIDPrefix](v78, "_stripFZIDPrefix"));
                  v83 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary service](v218, "service"));
                  uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary dependentRegistrationMatchingUUID:includingTinker:]( v218,  "dependentRegistrationMatchingUUID:includingTinker:",  v82,  [v83 wantsTinkerDevices]));

                  if (v84)
                  {
                    v85 = (void *)objc_claimAutoreleasedReturnValue([v84 _dataForKey:v211]);
                    v86 = (void *)objc_claimAutoreleasedReturnValue([v84 _arrayForKey:v210]);
                    v87 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary service](v218, "service"));
                    uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue([v87 pushTopic]);

                    v89 = (void *)_IDSCopyIDForPushTokenAndIdentitiesWithService(v85, v86, v88);
                    uint64_t v90 = objc_alloc(&OBJC_CLASS___NSMutableSet);
                    v91 = (void *)objc_claimAutoreleasedReturnValue([v217 destinations]);
                    v92 = (void *)objc_claimAutoreleasedReturnValue([v91 destinationURIs]);
                    uint64_t v93 = -[NSMutableSet initWithSet:](v90, "initWithSet:", v92);

                    -[NSMutableSet removeObject:](v93, "removeObject:", v78);
                    if (v89)
                    {
                      -[NSMutableSet addObject:](v93, "addObject:", v89);
                    }

                    else
                    {
                      uint64_t v94 = OSLogHandleForIDSCategory("IDSDaemon");
                      v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
                      if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)buf = 138413058;
                        v242 = v78;
                        v243 = 2112;
                        v244 = v85;
                        v245 = 2112;
                        v246 = v88;
                        v247 = 2112;
                        v248 = v86;
                        _os_log_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_DEFAULT,  "Cloud destination could not be formed { destination: %@, token: %@, topic: %@, identities: %@ }",  buf,  0x2Au);
                      }

                      if (os_log_shim_legacy_logging_enabled(v96)
                        && _IDSShouldLog(0LL, @"IDSDaemon"))
                      {
                        v200 = v88;
                        v202 = v86;
                        v192 = v78;
                        v197 = v85;
                        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Cloud destination could not be formed { destination: %@, token: %@, topic: %@, identities: %@ }");
                      }
                    }

                    uint64_t v97 = (void *)objc_claimAutoreleasedReturnValue( +[NSSet setWithSet:]( &OBJC_CLASS___NSSet,  "setWithSet:",  v93,  v192,  v197,  v200,  v202));
                    uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDestination destinationWithStrings:]( &OBJC_CLASS___IDSDestination,  "destinationWithStrings:",  v97));
                    [v217 setDestinations:v98];
                  }
                }
              }

              v216 = [obj countByEnumeratingWithState:&v228 objects:v238 count:16];
            }

            while (v216);
          }
        }

        v99 = (void *)objc_claimAutoreleasedReturnValue([v217 command]);
        uint64_t v100 = [v99 isEqual:&off_100947AB8];

        if (v100)
        {
          v101 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) opportunisticDeliveryController]);
          v102 = (void *)objc_claimAutoreleasedReturnValue([v217 destinations]);
          [v101 sendOpportunisticDataIfNeededToDestination:v102 completion:0];
        }

        v69 = (IMMessageContext *)objc_claimAutoreleasedReturnValue([v217 fromID]);
        unsigned int v103 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serviceController]);
        v104 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary service](v218, "service"));
        v105 = (void *)objc_claimAutoreleasedReturnValue([v104 pushTopic]);
        v106 = (void *)objc_claimAutoreleasedReturnValue([v103 serviceWithPushTopic:v105]);
        v107 = [v106 shouldAllowProxyDelivery];

        if (-[IMMessageContext length](v69, "length")) {
          v108 = v107;
        }
        else {
          v108 = 0;
        }
        if (v108 == 1
          && (v109 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary unprefixedURIStringsFromRegistration]( v218,  "unprefixedURIStringsFromRegistration")),  uint64_t v110 = (void *)objc_claimAutoreleasedReturnValue(-[IMMessageContext _stripFZIDPrefix](v69, "_stripFZIDPrefix")),  v111 = [v109 containsObject:v110],  v110,  v109,  (v111 & 1) == 0))
        {
          v182 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountController]);
          v183 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary service](v218, "service"));
          v215 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([v182 localAccountOnService:v183]);

          v184 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary loginID](v215, "loginID"));
          v185 = (void *)objc_claimAutoreleasedReturnValue([v184 _stripFZIDPrefix]);
          v186 = (void *)objc_claimAutoreleasedReturnValue(-[IMMessageContext _stripFZIDPrefix](v69, "_stripFZIDPrefix"));
          v187 = _FTAreIDsEquivalent(v185, v186);

          if (v187)
          {
            v188 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary uniqueID](v215, "uniqueID"));
            [v217 setAccountUUID:v188];

            v189 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary uniqueID](v215, "uniqueID"));
            [v217 setMainAccountUUID:v189];
          }
        }

        else
        {
          v215 = 0LL;
        }

        v112 = (void *)objc_claimAutoreleasedReturnValue(-[IMMessageContext _stripFZIDPrefix](v69, "_stripFZIDPrefix"));
        IsPhoneNumber = IMStringIsPhoneNumber(v112);

        if (!IsPhoneNumber) {
          goto LABEL_118;
        }
        id v114 = *(void **)(a1 + 32);
        uint64_t v115 = (void *)objc_claimAutoreleasedReturnValue(-[IMMessageContext _stripFZIDPrefix](v69, "_stripFZIDPrefix"));
        id v116 = (void *)_IDSCopyIDForPhoneNumberWithOptions(v115, 0LL, 1LL);
        v117 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary service](v218, "service"));
        v118 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
        v119 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary service](v218, "service"));
        id v120 = (void *)objc_claimAutoreleasedReturnValue([v118 appleIDAccountOnService:v119]);
        LODWORD(v114) = [v114 shouldDropMessageIfOutOfFamilyPhoneNumber:v116 forService:v117 withAppleIDAccount:v120];

        if ((_DWORD)v114)
        {
          id v121 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
          id v122 = (void *)objc_claimAutoreleasedReturnValue([v217 subService]);
          if (v122) {
            CFDictionarySetValue((CFMutableDictionaryRef)v121, IDSMessageContextServiceIdentifierKey, v122);
          }

          uint64_t v123 = (void *)objc_claimAutoreleasedReturnValue([v217 localDestinationDeviceUUID]);
          if (v123) {
            CFDictionarySetValue((CFMutableDictionaryRef)v121, IDSMessageContextOriginalDestinationDeviceKey, v123);
          }

          uint64_t v124 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
          __int128 v125 = *(void **)(a1 + 32);
          v225[0] = _NSConcreteStackBlock;
          v225[1] = 3221225472LL;
          v225[2] = sub_10035C6F4;
          v225[3] = &unk_100901F60;
          v226 = v217;
          v227 = v121;
          v214 = v121;
          __int128 v126 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary service](v218, "service"));
          __int128 v127 = (void *)objc_claimAutoreleasedReturnValue([v126 pushTopic]);
          [v125 enqueueBroadcast:v225 forTopic:v127 entitlement:kIDSMessagingEntitlement command:0 capabilities:kIDSListenerCapConsumesLaunchOnDemandOutgoingMessageUpdates messageContext:v124];

          __int128 v128 = v226;
        }

        else
        {
LABEL_118:
          if (v215)
          {
            __int128 v138 = v215;

            __int128 v139 = OSLogHandleForIDSCategory("IDSDaemon");
            __int128 v140 = (os_log_s *)objc_claimAutoreleasedReturnValue(v139);
            if (os_log_type_enabled(v140, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              v242 = v138;
              _os_log_impl( (void *)&_mh_execute_header,  v140,  OS_LOG_TYPE_DEFAULT,  "Switching to using local account since it has the alias corresponding to the fromID: %@",  buf,  0xCu);
            }

            if (os_log_shim_legacy_logging_enabled(v141)
              && _IDSShouldLog(0LL, @"IDSDaemon"))
            {
              v192 = v138;
              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Switching to using local account since it has the alias corresponding to the fromID: %@");
            }
          }

          else
          {
            __int128 v138 = v218;
          }

          v142 = -[NSMutableDictionary newSendMessageContext](v138, "newSendMessageContext", v192);
          [v142 setListenerID:v206];
          [v142 setEntitlements:v208];
          v143 = *(void **)(a1 + 32);
          v144 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary service](v138, "service"));
          LODWORD(v143) = [v143 _shouldIncludeDefaultDeviceAsDestinationForMessageWithParams:v217 service:v144];

          if ((_DWORD)v143)
          {
            v145 = *(void **)(a1 + 32);
            __int16 v146 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary service](v138, "service"));
            v147 = [v145 _shouldMessageBeProxied:v217 service:v146];
          }

          else
          {
            v147 = 0LL;
          }

          [v142 setShouldIncludeDefaultDevice:v147];
          v214 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([v217 subService]);
          if (-[NSMutableDictionary length](v214, "length"))
          {
            [v142 setSubService:v214];
            __int16 v148 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serviceController]);
            v149 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([v148 serviceWithPushTopic:v214]);

            v150 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountController]);
            v151 = (void *)objc_claimAutoreleasedReturnValue([v150 localAccountOnService:v149]);

            v152 = (void *)objc_claimAutoreleasedReturnValue([v151 uniqueID]);
            [v217 setAccountUUID:v152];
            [v217 setSubServiceAccountUUID:v152];
            v153 = OSLogHandleForIDSCategory("IDSDaemon");
            v154 = (os_log_s *)objc_claimAutoreleasedReturnValue(v153);
            if (os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412546;
              v242 = v214;
              v243 = 2112;
              v244 = v152;
              _os_log_impl( (void *)&_mh_execute_header,  v154,  OS_LOG_TYPE_DEFAULT,  "subServiceName %@ subServiceUUID %@",  buf,  0x16u);
            }

            if (os_log_shim_legacy_logging_enabled(v155)
              && _IDSShouldLog(0LL, @"IDSDaemon"))
            {
              v193 = v214;
              v197 = v152;
              _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"subServiceName %@ subServiceUUID %@");
            }

            if (!v151)
            {
              v156 = OSLogHandleForIDSCategory("Warning");
              v157 = (os_log_s *)objc_claimAutoreleasedReturnValue(v156);
              if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                v242 = v149;
                _os_log_impl( (void *)&_mh_execute_header,  v157,  OS_LOG_TYPE_ERROR,  "Couldn't find sub-account for service name %@",  buf,  0xCu);
              }

              if (os_log_shim_legacy_logging_enabled(v158))
              {
                _IDSWarnV(@"IDSFoundation", @"Couldn't find sub-account for service name %@");
                _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Couldn't find sub-account for service name %@");
                v193 = v149;
                _IDSLogTransport(@"Warning", @"IDS", @"Couldn't find sub-account for service name %@");
              }
            }
          }

          v159 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary service](v138, "service", v193, v197));
          __int128 v128 = (void *)objc_claimAutoreleasedReturnValue([v159 identifier]);

          v219 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary smallDescription](v138, "smallDescription"));
          if ([v217 priority] == (id)300
            && (objc_msgSend( (id)objc_opt_class(*(void *)(a1 + 32), v160),  "entitlementDictionary:isEntitledToAccessService:forEntitlement:forAccount:shouldWarn:",  v208,  v128,  kIDSHighPriorityMessagingEntitlement,  v219,  0) & 1) == 0)
          {
            v162 = (void *)objc_opt_class(*(void *)(a1 + 32), v161);
            v163 = (NSMutableDictionary *)kIDSUrgentPriorityMessagingEntitlement;
            if (([v162 entitlementDictionary:v208 isEntitledToAccessService:v128 forEntitlement:kIDSUrgentPriorityMessagingEntitlement forAccount:v219 shouldWarn:0] & 1) == 0)
            {
              v164 = OSLogHandleForIDSCategory("Warning");
              v165 = (os_log_s *)objc_claimAutoreleasedReturnValue(v164);
              if (os_log_type_enabled(v165, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412546;
                v242 = v163;
                v243 = 2112;
                v244 = v128;
                _os_log_impl( (void *)&_mh_execute_header,  v165,  OS_LOG_TYPE_ERROR,  "**** IDSDaemon: Urgent priority messaging requires entitlement for %@, DOWNGRADING MESSAGE PRIORITY TO DEFAULT - violator %@ ****",  buf,  0x16u);
              }

              if (os_log_shim_legacy_logging_enabled(v166))
              {
                _IDSWarnV( @"IDSFoundation",  @"**** IDSDaemon: Urgent priority messaging requires entitlement for %@, DOWNGRADING MESSAGE PRIORITY TO DEFAULT - violator %@ ****");
                _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"**** IDSDaemon: Urgent priority messaging requires entitlement for %@, DOWNGRADING MESSAGE PRIORITY TO DEFAULT - violator %@ ****");
                v194 = v163;
                v199 = v128;
                *(void *)&v167 = _IDSLogTransport( @"Warning",  @"IDS",  @"**** IDSDaemon: Urgent priority messaging requires entitlement for %@, DOWNGRADING MESSAGE PRIORITY TO DEFAULT - violator %@ ****").n128_u64[0];
              }

              objc_msgSend(v217, "setPriority:", 200, v167, v194, v199);
            }
          }

          v168 = [v217 priority];
          if (v168 != (id)100 && v168 != (id)200 && v168 != (id)300)
          {
            v169 = OSLogHandleForIDSCategory("Warning");
            v170 = (os_log_s *)objc_claimAutoreleasedReturnValue(v169);
            if (os_log_type_enabled(v170, OS_LOG_TYPE_ERROR))
            {
              v171 = (NSMutableDictionary *)[v217 priority];
              *(_DWORD *)buf = 134218242;
              v242 = v171;
              v243 = 2112;
              v244 = v128;
              _os_log_impl( (void *)&_mh_execute_header,  v170,  OS_LOG_TYPE_ERROR,  "Client has specified a priority we do not recognize: %lu. Perpetrator: %@. Forcing default priority.",  buf,  0x16u);
            }

            if (os_log_shim_legacy_logging_enabled(v172))
            {
              v195 = [v217 priority];
              _IDSWarnV( @"IDSFoundation",  @"Client has specified a priority we do not recognize: %lu. Perpetrator: %@. Forcing default priority.");
              v196 = objc_msgSend(v217, "priority", v195, v128);
              _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Client has specified a priority we do not recognize: %lu. Perpetrator: %@. Forcing default priority.");
              v194 = (NSMutableDictionary *)objc_msgSend(v217, "priority", v196, v128);
              v199 = v128;
              *(void *)&v173 = _IDSLogTransport( @"Warning",  @"IDS",  @"Client has specified a priority we do not recognize: %lu. Perpetrator: %@. Forcing default priority.").n128_u64[0];
            }

            objc_msgSend(v217, "setPriority:", 200, v173, v194, v199);
          }

          v174 = [v217 priority];
          v176 = (void *)objc_opt_class(*(void *)(a1 + 32), v175);
          v177 = *(void *)(a1 + 40);
          v178 = (void *)objc_claimAutoreleasedReturnValue([v142 servicePushTopic]);
          v179 = (void *)objc_claimAutoreleasedReturnValue( [v176 progressBlockForSendParameters:v217 messageContext:v177 topic:v178 forObject:*(void *)(a1 + 32)]);

          v180 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
          v220[0] = _NSConcreteStackBlock;
          v220[1] = 3221225472LL;
          v220[2] = sub_10035C814;
          v220[3] = &unk_1008F9578;
          v220[4] = *(void *)(a1 + 32);
          v221 = v217;
          v222 = *(id *)(a1 + 40);
          uint64_t v124 = (IMMessageContext *)v142;
          v223 = v124;
          v181 = v179;
          v224 = v181;
          [v180 performBlockWithPriority:v220 priority:v174];

          v218 = v138;
        }

        goto LABEL_158;
      }

      __int128 v129 = OSLogHandleForIDSCategory("IDSDaemon");
      __int128 v130 = (os_log_s *)objc_claimAutoreleasedReturnValue(v129);
      if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v130,  OS_LOG_TYPE_DEFAULT,  "Result of can send message with account was no",  buf,  2u);
      }

      if (os_log_shim_legacy_logging_enabled(v131)
        && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Result of can send message with account was no");
      }

      __int128 v132 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      char v133 = (void *)objc_claimAutoreleasedReturnValue([v217 subService]);
      if (v133) {
        CFDictionarySetValue((CFMutableDictionaryRef)v132, IDSMessageContextServiceIdentifierKey, v133);
      }

      __int128 v134 = (void *)objc_claimAutoreleasedReturnValue([v217 localDestinationDeviceUUID]);
      if (v134) {
        CFDictionarySetValue((CFMutableDictionaryRef)v132, IDSMessageContextOriginalDestinationDeviceKey, v134);
      }

      v69 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
      __int128 v135 = *(void **)(a1 + 32);
      v232[0] = _NSConcreteStackBlock;
      v232[1] = 3221225472LL;
      v232[2] = sub_10035C5D4;
      v232[3] = &unk_100901F60;
      v232[4] = v217;
      v233 = v132;
      v215 = v132;
      __int128 v136 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary service](v218, "service"));
      __int128 v137 = (void *)objc_claimAutoreleasedReturnValue([v136 pushTopic]);
      [v135 enqueueBroadcast:v232 forTopic:v137 entitlement:kIDSMessagingEntitlement command:0 capabilities:kIDSListenerCapConsumesLaunchOnDemandOutgoingMessageUpdates messageContext:v69];

      uint64_t v73 = v232;
    }

    else
    {
      __int128 v63 = OSLogHandleForIDSCategory("IDSDaemon");
      __int128 v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "Client is attempting to send a message under first data protection lock, failing message",  buf,  2u);
      }

      if (os_log_shim_legacy_logging_enabled(v65) && _IDSShouldLog(0LL, @"IDSDaemon")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Client is attempting to send a message under first data protection lock, failing message");
      }
      id v66 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      v67 = (void *)objc_claimAutoreleasedReturnValue([v217 subService]);
      if (v67) {
        CFDictionarySetValue((CFMutableDictionaryRef)v66, IDSMessageContextServiceIdentifierKey, v67);
      }

      v68 = (void *)objc_claimAutoreleasedReturnValue([v217 localDestinationDeviceUUID]);
      if (v68) {
        CFDictionarySetValue((CFMutableDictionaryRef)v66, IDSMessageContextOriginalDestinationDeviceKey, v68);
      }

      v69 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
      uint64_t v70 = *(void **)(a1 + 32);
      v234[0] = _NSConcreteStackBlock;
      v234[1] = 3221225472LL;
      v234[2] = sub_10035C4B4;
      v234[3] = &unk_100901F60;
      v234[4] = v217;
      v235 = v66;
      v215 = v66;
      v71 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary service](v218, "service"));
      v72 = (void *)objc_claimAutoreleasedReturnValue([v71 pushTopic]);
      [v70 enqueueBroadcast:v234 forTopic:v72 entitlement:kIDSMessagingEntitlement command:0 capabilities:kIDSListenerCapConsumesLaunchOnDemandOutgoingMessageUpdates messageContext:v69];

      uint64_t v73 = v234;
    }

    uint64_t v124 = (IMMessageContext *)v73[4];
LABEL_158:

    goto LABEL_159;
  }

  v217 = 0LL;
  v218 = 0LL;
LABEL_160:
}
}

            swift_release(v49);
            v69 = v140;
            uint64_t v70 = *(void *)&v140[v141];
            v71 = v134;
            if (*(void *)(v134 + 16) <= *(void *)(v70 + 16) >> 3)
            {
              aBlock[0] = *(void *)&v140[v141];
              swift_bridgeObjectRetain(v70);
              sub_100422F60(v71);
              v72 = (void *)aBlock[0];
            }

            else
            {
              swift_bridgeObjectRetain(*(void *)&v140[v141]);
              v72 = sub_1004233A8(v71, v70);
            }

            uint64_t v73 = v143;
            uint64_t v74 = v139;
            v75 = *(void *)&v69[v139];
            *(void *)&v69[v139] = v72;
            swift_bridgeObjectRelease(v75);
            v76 = *(void *)&v69[v74];
            uint64_t v77 = v69;
            swift_bridgeObjectRetain_n(v73, 2LL);
            uint64_t v78 = v77;
            __int128 v141 = v76;
            swift_bridgeObjectRetain(v76);
            swift_bridgeObjectRetain(v71);
            id v47 = (os_log_s *)Logger.logObject.getter(v79);
            LOBYTE(v4_Block_object_dispose(va, 8) = static os_log_type_t.default.getter();
            v80 = os_log_type_enabled(v47, (os_log_type_t)v48);
            v144 = v78;
            if (!v80)
            {

              swift_bridgeObjectRelease_n(v73, 2LL);
              v86 = swift_bridgeObjectRelease_n(v71, 2LL);
              goto LABEL_45;
            }

            id v12 = swift_slowAlloc(42LL, -1LL);
            v81 = v74;
            v55 = swift_slowAlloc(32LL, -1LL);
            aBlock[0] = v55;
            *(_DWORD *)id v12 = 136315906;
            v157 = sub_1003FFBB0(0xD00000000000001FLL, v136 | 0x8000000000000000LL, aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, &v158, v12 + 4, v12 + 12);
            *(_WORD *)(v12 + 12) = 2048;
            uint64_t v82 = *(void *)(*(void *)&v69[v81] + 16LL);

            v157 = v82;
            id v49 = v143;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, &v158, v12 + 14, v12 + 22);

            *(_WORD *)(v12 + 22) = 2048;
            if (!((unint64_t)v49 >> 62))
            {
              v83 = *(void *)((v49 & 0xFFFFFFFFFFFFF8LL) + 0x10);
              goto LABEL_43;
            }

            goto LABEL_86;
          }
        }
      }

  swift_release(a4);
  v81 = *(void *)&a2[v114];
  uint64_t v82 = v96;
  *(void *)&a2[v114] = v96;
  swift_bridgeObjectRetain(v82);
  swift_bridgeObjectRelease(v81);
  v83 = OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_currentlySent;
  uint64_t v84 = *(void *)&a2[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_currentlySent];
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(v84);
  v85 = sub_10041F890(a4, v84);
  v86 = *(void *)&a2[v83];
  *(void *)&a2[v83] = v85;
  swift_bridgeObjectRelease(v86);
  v87 = *(void *)&a2[v94];
  uint64_t v88 = __OFADD__(v87, 1LL);
  v89 = v87 + 1;
  if (!v88)
  {
    *(void *)&a2[v94] = v89;
    uint64_t v90 = *(os_unfair_lock_s **)&a2[v95];
    swift_retain(v90);
    os_unfair_lock_unlock(v90 + 4);
    swift_release(v90);
    return;
  }

          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v11, 1LL, 1LL, v13);
          id v23 = 0LL;
LABEL_38:
          sub_10040A274((uint64_t)v11, &qword_1009B90E8);
          goto LABEL_39;
        }

        v30 += 3LL;
      }
    }

LABEL_50:
  if (v3 && !self->_identityLoaded)
  {
    if (-[IDSRegistrationKeyManager _isUnderFirstDataProtectionLock](self, "_isUnderFirstDataProtectionLock"))
    {
      id v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "We are under first data protection lock, we can not load our identity now",  buf,  2u);
      }

      self->_identityLoaded = 0;
      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager systemMonitor](self, "systemMonitor"));
      [v40 _addEarlyListener:self];

      if (!self->_detectedMigrationNeeded) {
        -[IDSRegistrationKeyManager loadPairingIdentities:](self, "loadPairingIdentities:", 1LL);
      }
      goto LABEL_183;
    }

    -[IDSRateLimiter noteItem:](self->_loadingRateLimiter, "noteItem:", @"registrationKeyManagerRateLimit");
    self->_identityLoaded = 1;
    v41 = objc_alloc_init(&OBJC_CLASS___IDSNGMKeyLoadingErrorContainer);
    recentKeyLoadingErrors = self->_recentKeyLoadingErrors;
    self->_recentKeyLoadingErrors = v41;

    v43 = (void *)objc_claimAutoreleasedReturnValue(+[IMUserDefaults sharedDefaults](&OBJC_CLASS___IMUserDefaults, "sharedDefaults"));
    id v44 = (void *)objc_claimAutoreleasedReturnValue([v43 appValueForKey:@"hasRegIdentityContainer"]);
    -[IDSNGMKeyLoadingErrorContainer setShouldHaveRegisteredIdentity:]( self->_recentKeyLoadingErrors,  "setShouldHaveRegisteredIdentity:",  v44);

    uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(+[IMUserDefaults sharedDefaults](&OBJC_CLASS___IMUserDefaults, "sharedDefaults"));
    id v46 = (void *)objc_claimAutoreleasedReturnValue([v45 appValueForKey:@"hasUnregIdentityContainer"]);
    -[IDSNGMKeyLoadingErrorContainer setShouldHaveUnregisteredIdentity:]( self->_recentKeyLoadingErrors,  "setShouldHaveUnregisteredIdentity:",  v46);

    id v47 = (void *)objc_claimAutoreleasedReturnValue(+[IMUserDefaults sharedDefaults](&OBJC_CLASS___IMUserDefaults, "sharedDefaults"));
    self->_failedToGeneratedPublicDataForNGMIdentity = [v47 appBoolForKey:@"failedToGeneratedPublicDataForNGMIdentity"];

    id v48 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager identityDataSource](self, "identityDataSource"));
    v238 = 0LL;
    v239 = 0LL;
    id v49 = (void *)objc_claimAutoreleasedReturnValue( [v48 loadIdentityContainerWithIdentifier:2 withLegacyFallback:1 serializationDidChange:v244 + 3 deserializationDidFa il:(char *)&v242 + 1 needsEncryptionIdentityRoll:&v242 nonLegacyError:&v239 error:&v238]);
    v225 = v239;
    v227 = (__CFString *)v238;
    id v50 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
    [v50 setRegisteredIdentityContainer:v49];

    id v51 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
    id v52 = (void *)objc_claimAutoreleasedReturnValue([v51 registeredIdentityContainer]);

    if (v52)
    {
      id v53 = (void *)objc_claimAutoreleasedReturnValue( -[IDSRegistrationKeyManager _loadAndDeserializeBuildOfIdentityGenerationForItemName:]( self,  "_loadAndDeserializeBuildOfIdentityGenerationForItemName:",  @"build-of-identity-generation"));
      v54 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
      [v54 setBuildOfIdentityGeneration:v53];

      v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
        v57 = (__CFString *)objc_claimAutoreleasedReturnValue([v56 registeredIdentityContainer]);
        v58 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
        uint64_t v59 = (__CFString *)objc_claimAutoreleasedReturnValue([v58 buildOfIdentityGeneration]);
        *(_DWORD *)buf = 138478083;
        v249 = v57;
        v250 = 2112;
        v251 = v59;
        _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "Successfully loaded message protection identity from keychain {_config.registeredIdentityContainer: %{private} @, buildOfGeneration: %@}",  buf,  0x16u);
      }
    }

    else
    {
      id v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v61 = @"YES";
        if (!HIBYTE(v242)) {
          __int128 v61 = @"NO";
        }
        *(_DWORD *)buf = 138543618;
        v249 = v227;
        v250 = 2114;
        v251 = v61;
        _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "Unable to load message protection identity from keychain {error: %{public}@, deserializationDidFail: %{public}@}",  buf,  0x16u);
      }

      if (!+[IDSKeychainWrapper isUpgradePendingError:]( &OBJC_CLASS___IDSKeychainWrapper,  "isUpgradePendingError:",  v227)
        || !-[IDSRegistrationKeyManager _isUnderFirstDataProtectionLock](self, "_isUnderFirstDataProtectionLock"))
      {
LABEL_70:
        __int128 v63 = self->_recentKeyLoadingErrors;
        if (HIBYTE(v242)) {
          -[IDSNGMKeyLoadingErrorContainer setRegisteredDeserializationError:]( v63,  "setRegisteredDeserializationError:",  v225);
        }
        else {
          -[IDSNGMKeyLoadingErrorContainer setRegisteredKeychainError:](v63, "setRegisteredKeychainError:", v225);
        }
        if (self->_detectedMigrationNeeded)
        {
          __int128 v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "We're under first lock, and this requires migration -- not doing anything here",  buf,  2u);
          }

          self->_identityLoaded = 0;
LABEL_182:

LABEL_183:
          v175 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
          v176 = (void *)objc_claimAutoreleasedReturnValue([v175 registeredIdentityContainer]);
          v177 = (void *)objc_claimAutoreleasedReturnValue([v176 legacyFullIdentity]);
          v178 =  -[IDSRegistrationKeyManager _getPublicMessageProtectionDataForIdentity:]( self,  "_getPublicMessageProtectionDataForIdentity:",  v177);

          v179 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
          v180 = (void *)objc_claimAutoreleasedReturnValue([v179 unregisteredIdentityContainer]);
          v181 = (void *)objc_claimAutoreleasedReturnValue([v180 legacyFullIdentity]);
          v182 =  -[IDSRegistrationKeyManager _getPublicMessageProtectionDataForIdentity:]( self,  "_getPublicMessageProtectionDataForIdentity:",  v181);

          v183 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
          v184 = (void *)objc_claimAutoreleasedReturnValue([v183 identityClassA]);
          v185 =  -[IDSRegistrationKeyManager _getPublicMessageProtectionDataForIdentity:]( self,  "_getPublicMessageProtectionDataForIdentity:",  v184);

          v186 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
          v187 = (void *)objc_claimAutoreleasedReturnValue([v186 identityClassC]);
          v188 =  -[IDSRegistrationKeyManager _getPublicMessageProtectionDataForIdentity:]( self,  "_getPublicMessageProtectionDataForIdentity:",  v187);

          v189 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
          v190 = (void *)objc_claimAutoreleasedReturnValue([v189 identityClassD]);
          v191 =  -[IDSRegistrationKeyManager _getPublicMessageProtectionDataForIdentity:]( self,  "_getPublicMessageProtectionDataForIdentity:",  v190);

          goto LABEL_184;
        }

        *(_WORD *)((char *)v241 + 1) = 0;
        v65 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager identityDataSource](self, "identityDataSource"));
        v236 = v227;
        v237 = 0LL;
        id v66 = (void *)objc_claimAutoreleasedReturnValue( [v65 loadIdentityContainerWithIdentifier:1 withLegacyFallback:0 serializationDidChange:v244 + 3 deserializationD idFail:&v241[1] needsEncryptionIdentityRoll:(char *)v241 + 1 nonLegacyError:&v237 error:&v236]);
        v223 = v237;
        v67 = v236;

        v68 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
        [v68 setUnregisteredIdentityContainer:v66];

        HIBYTE(v242) = (HIBYTE(v242) | LOBYTE(v241[1])) != 0;
        LOBYTE(v242) = (v242 | HIBYTE(v241[0])) != 0;
        v69 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
        uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue([v69 unregisteredIdentityContainer]);

        if (v70)
        {
          v71 = (void *)objc_claimAutoreleasedReturnValue( -[IDSRegistrationKeyManager _loadAndDeserializeBuildOfIdentityGenerationForItemName:]( self,  "_loadAndDeserializeBuildOfIdentityGenerationForItemName:",  @"build-of-unregistered-identity-generation"));
          v72 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
          [v72 setBuildOfUnregisteredIdentityGeneration:v71];

          uint64_t v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
            v75 = (__CFString *)objc_claimAutoreleasedReturnValue([v74 unregisteredIdentityContainer]);
            v76 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
            uint64_t v77 = (__CFString *)objc_claimAutoreleasedReturnValue([v76 buildOfUnregisteredIdentityGeneration]);
            *(_DWORD *)buf = 138478083;
            v249 = v75;
            v250 = 2112;
            v251 = v77;
            _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEFAULT,  "Successfully loaded unregistered message protection identity from keychain {_config.unregisteredIdentity: %{private}@, buildOfGeneration: %@}",  buf,  0x16u);
          }
        }

        else
        {
          uint64_t v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v78 = @"YES";
            if (!HIBYTE(v242)) {
              uint64_t v78 = @"NO";
            }
            *(_DWORD *)buf = 138543618;
            v249 = v67;
            v250 = 2114;
            v251 = v78;
            _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEFAULT,  "Unable to load unregistered message protection identity from keychain {error: %{public}@, deserializationD idFail: %{public}@}",  buf,  0x16u);
          }
        }

        v79 = self->_recentKeyLoadingErrors;
        if (LOBYTE(v241[1])) {
          -[IDSNGMKeyLoadingErrorContainer setUnregisteredDeserializationError:]( v79,  "setUnregisteredDeserializationError:",  v223);
        }
        else {
          -[IDSNGMKeyLoadingErrorContainer setUnregisteredKeychainError:](v79, "setUnregisteredKeychainError:", v223);
        }
        LOBYTE(v241[0]) = 0;
        v235 = 0;
        v80 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager identityDataSource](self, "identityDataSource"));
        v234 = v67;
        v81 = (void *)objc_claimAutoreleasedReturnValue( [v80 loadIdentityContainerWithIdentifier:3 withLegacyFallback:1 serializationDidChange:v244 + 3 deserializationD idFail:v241 needsEncryptionIdentityRoll:&v235 nonLegacyError:0 error:&v234]);
        v227 = v234;

        uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
        [v82 setPreviousRegisteredIdentityContainer:v81];

        v83 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
        uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue([v83 previousRegisteredIdentityContainer]);

        if (v84)
        {
          v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
          {
            v86 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
            v87 = (__CFString *)objc_claimAutoreleasedReturnValue([v86 previousRegisteredIdentityContainer]);
            *(_DWORD *)buf = 138477827;
            v249 = v87;
            _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEFAULT,  "Successfully loaded previous message protection identity from keychain {previousMessageProtectionKey: %{private}@}",  buf,  0xCu);
          }
        }

        else
        {
          v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v88 = @"YES";
            if (!LOBYTE(v241[0])) {
              uint64_t v88 = @"NO";
            }
            *(_DWORD *)buf = 138543618;
            v249 = v227;
            v250 = 2114;
            v251 = v88;
            _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEFAULT,  "Unable to load previous message protection identity from keychain {error: %{public}@, previousIdentityDese rializationFailed: %{public}@}",  buf,  0x16u);
          }
        }

        v89 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
        uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue([v89 previousRegisteredIdentityContainer]);

        if (v90)
        {
          -[IDSRegistrationKeyManager _purgePreviousIdentityDelay](self, "_purgePreviousIdentityDelay");
          -[IDSRegistrationKeyManager _schedulePurgeOfPreviousIdentityAfterDelay:]( self,  "_schedulePurgeOfPreviousIdentityAfterDelay:");
        }

        -[IDSRegistrationKeyManager loadPairingIdentities:](self, "loadPairingIdentities:", 1LL);
        v91 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
        if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
        {
          v221 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
          v219 = (void *)objc_claimAutoreleasedReturnValue([v221 registeredIdentityContainer]);
          if (v219) {
            v92 = @"YES";
          }
          else {
            v92 = @"NO";
          }
          v208 = v92;
          v217 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
          v216 = (void *)objc_claimAutoreleasedReturnValue([v217 registeredIdentityContainer]);
          v215 = (void *)objc_claimAutoreleasedReturnValue([v216 ngmFullDeviceIdentity]);
          if (v215) {
            uint64_t v93 = @"YES";
          }
          else {
            uint64_t v93 = @"NO";
          }
          v207 = v93;
          v214 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
          v213 = (void *)objc_claimAutoreleasedReturnValue([v214 unregisteredIdentityContainer]);
          if (v213) {
            uint64_t v94 = @"YES";
          }
          else {
            uint64_t v94 = @"NO";
          }
          v206 = v94;
          v212 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
          v211 = (void *)objc_claimAutoreleasedReturnValue([v212 unregisteredIdentityContainer]);
          v210 = (void *)objc_claimAutoreleasedReturnValue([v211 ngmFullDeviceIdentity]);
          if (v210) {
            v95 = @"YES";
          }
          else {
            v95 = @"NO";
          }
          v209 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
          v96 = (void *)objc_claimAutoreleasedReturnValue([v209 registeredIdentityContainer]);
          uint64_t v97 = (__CFString *)objc_claimAutoreleasedReturnValue([v96 ngmVersion]);
          uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
          v99 = (void *)objc_claimAutoreleasedReturnValue([v98 unregisteredIdentityContainer]);
          uint64_t v100 = (void *)objc_claimAutoreleasedReturnValue([v99 ngmVersion]);
          v101 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager identityDataSource](self, "identityDataSource"));
          v102 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v101 ngmVersion]));
          *(_DWORD *)buf = 138413826;
          v249 = v208;
          v250 = 2112;
          v251 = v207;
          v252 = 2112;
          v253 = v206;
          v254 = 2112;
          v255 = v95;
          v256 = 2112;
          v257 = v97;
          v258 = 2112;
          v259 = v100;
          v260 = 2112;
          v261 = v102;
          _os_log_impl( (void *)&_mh_execute_header,  v91,  OS_LOG_TYPE_DEFAULT,  "Considering regeneration {registeredIdentity: %@, registeredNGM: %@, unregisteredIdentity: %@, unregisteredN GM: %@, registeredVersion: %@, unregisteredVersion: %@, currentVersion: %@}",  buf,  0x48u);
        }

        if (LOBYTE(v241[1]))
        {
          unsigned int v103 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
          v104 = (void *)objc_claimAutoreleasedReturnValue([v103 unregisteredIdentityContainer]);
          v222 = v104 == 0LL;
        }

        else
        {
          v222 = 0;
        }

        v105 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
        v220 = (void *)objc_claimAutoreleasedReturnValue([v105 registeredIdentityContainer]);

        v106 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
        v107 = (void *)objc_claimAutoreleasedReturnValue([v106 registeredIdentityContainer]);
        v108 = (void *)objc_claimAutoreleasedReturnValue([v107 ngmFullDeviceIdentity]);
        if (v108)
        {
          v109 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
          uint64_t v110 = (void *)objc_claimAutoreleasedReturnValue([v109 registeredIdentityContainer]);
          id v111 = (void *)objc_claimAutoreleasedReturnValue([v110 ngmVersion]);
          v112 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager identityDataSource](self, "identityDataSource"));
          v113 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v112 ngmVersion]));
          id v114 = [v111 isEqualToNumber:v113];

          uint64_t v115 = v114 ^ 1;
        }

        else
        {
          uint64_t v115 = 1;
        }

        v218 = v115;

        id v116 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
        v117 = (void *)objc_claimAutoreleasedReturnValue([v116 unregisteredIdentityContainer]);
        v118 = (void *)objc_claimAutoreleasedReturnValue([v117 ngmFullDeviceIdentity]);
        if (v118)
        {
          v119 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
          id v120 = (void *)objc_claimAutoreleasedReturnValue([v119 unregisteredIdentityContainer]);
          id v121 = (void *)objc_claimAutoreleasedReturnValue([v120 ngmVersion]);
          id v122 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager identityDataSource](self, "identityDataSource"));
          uint64_t v123 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v122 ngmVersion]));
          uint64_t v124 = [v121 isEqualToNumber:v123];

          __int128 v125 = v124 ^ 1;
        }

        else
        {
          __int128 v125 = 1;
        }

        __int128 v126 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
        __int128 v127 = (void *)objc_claimAutoreleasedReturnValue([v126 unregisteredIdentityContainer]);
        __int128 v128 = v127 != 0LL;
        if (v127) {
          __int128 v129 = v125;
        }
        else {
          __int128 v129 = 1;
        }
        if ((v129 & 1) == 0)
        {
          __int128 v130 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
          __int128 v131 = (void *)objc_claimAutoreleasedReturnValue([v130 unregisteredIdentityContainer]);
          __int128 v132 = (void *)objc_claimAutoreleasedReturnValue([v131 legacyFullIdentity]);
          __int128 v128 = v132 == 0LL;
        }

        if (((v222 || v220 == 0LL) | v218 | v128) == 1)
        {
          if ((v125 & 1) != 0
            || (char v133 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config")),
                __int128 v134 = (void *)objc_claimAutoreleasedReturnValue([v133 unregisteredIdentityContainer]),
                __int128 v135 = (void *)objc_claimAutoreleasedReturnValue([v134 legacyFullIdentity]),
                __int128 v136 = v135 == 0LL,
                v135,
                v134,
                v133,
                v136))
          {
            v142 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
            if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
            {
              v143 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
              v144 = (__CFString *)objc_claimAutoreleasedReturnValue([v143 registeredIdentityContainer]);
              v145 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
              __int16 v146 = (__CFString *)objc_claimAutoreleasedReturnValue([v145 unregisteredIdentityContainer]);
              v147 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager identityDataSource](self, "identityDataSource"));
              __int16 v148 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v147 ngmVersion]));
              *(_DWORD *)buf = 138412802;
              v249 = v144;
              v250 = 2112;
              v251 = v146;
              v252 = 2112;
              v253 = v148;
              _os_log_impl( (void *)&_mh_execute_header,  v142,  OS_LOG_TYPE_DEFAULT,  "We have no registered or unregistered identity loaded -- generating a new message protection identity {r egisteredIdentityContainer: %@, unregisteredIdentityContainer: %@, identityDataSource.ngmVersion: %@}",  buf,  0x20u);
            }

            v149 = (void *)objc_claimAutoreleasedReturnValue( -[IDSNGMKeyLoadingErrorContainer shouldHaveUnregisteredIdentity]( self->_recentKeyLoadingErrors,  "shouldHaveUnregisteredIdentity"));
            if (v149)
            {
              v150 = (void *)objc_claimAutoreleasedReturnValue( -[IDSNGMKeyLoadingErrorContainer unregisteredDeserializationError]( self->_recentKeyLoadingErrors,  "unregisteredDeserializationError"));

              if (v150)
              {
                v151 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                if (os_log_type_enabled(v151, OS_LOG_TYPE_FAULT))
                {
                  objc_claimAutoreleasedReturnValue( -[IDSNGMKeyLoadingErrorContainer registeredDeserializationError]( self->_recentKeyLoadingErrors,  "registeredDeserializationError"));
                  sub_100694B9C();
                }
              }

              else
              {
                v156 = (void *)objc_claimAutoreleasedReturnValue( -[IDSNGMKeyLoadingErrorContainer unregisteredKeychainError]( self->_recentKeyLoadingErrors,  "unregisteredKeychainError"));

                if (v156)
                {
                  v151 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                  if (os_log_type_enabled(v151, OS_LOG_TYPE_FAULT))
                  {
                    objc_claimAutoreleasedReturnValue( -[IDSNGMKeyLoadingErrorContainer registeredKeychainError]( self->_recentKeyLoadingErrors,  "registeredKeychainError"));
                    sub_100694B5C();
                  }
                }

                else
                {
                  v151 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                  if (os_log_type_enabled(v151, OS_LOG_TYPE_FAULT)) {
                    sub_100694B30();
                  }
                }
              }
            }

            v158 = (void *)objc_claimAutoreleasedReturnValue( -[IDSNGMKeyLoadingErrorContainer shouldHaveRegisteredIdentity]( self->_recentKeyLoadingErrors,  "shouldHaveRegisteredIdentity"));

            if (v158)
            {
              v159 = (void *)objc_claimAutoreleasedReturnValue( -[IDSNGMKeyLoadingErrorContainer registeredDeserializationError]( self->_recentKeyLoadingErrors,  "registeredDeserializationError"));

              if (v159)
              {
                v160 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                if (os_log_type_enabled(v160, OS_LOG_TYPE_FAULT))
                {
                  objc_claimAutoreleasedReturnValue( -[IDSNGMKeyLoadingErrorContainer registeredDeserializationError]( self->_recentKeyLoadingErrors,  "registeredDeserializationError"));
                  sub_100694AF0();
                }
              }

              else
              {
                v161 = (void *)objc_claimAutoreleasedReturnValue( -[IDSNGMKeyLoadingErrorContainer registeredKeychainError]( self->_recentKeyLoadingErrors,  "registeredKeychainError"));

                if (v161)
                {
                  v160 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                  if (os_log_type_enabled(v160, OS_LOG_TYPE_FAULT))
                  {
                    objc_claimAutoreleasedReturnValue( -[IDSNGMKeyLoadingErrorContainer registeredKeychainError]( self->_recentKeyLoadingErrors,  "registeredKeychainError"));
                    sub_100694AB0();
                  }
                }

                else
                {
                  v160 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                  if (os_log_type_enabled(v160, OS_LOG_TYPE_FAULT)) {
                    sub_100694A84();
                  }
                }
              }
            }

            v162 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
            v163 = (void *)objc_claimAutoreleasedReturnValue([v162 unregisteredIdentityContainer]);
            v164 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
            if (v163) {
              v165 = (void *)objc_claimAutoreleasedReturnValue([v164 unregisteredIdentityContainer]);
            }
            else {
              v165 = (void *)objc_claimAutoreleasedReturnValue([v164 registeredIdentityContainer]);
            }
            __int128 v137 = v165;

            v166 = (void *)objc_claimAutoreleasedReturnValue([v137 legacyFullIdentity]);
            v167 = -[IDSRegistrationKeyManager _generateUnregisteredIdentityWithExistingLegacyIdentity:existingNGMIdentity:]( self,  "_generateUnregisteredIdentityWithExistingLegacyIdentity:existingNGMIdentity:",  v166,  0LL);

            if (v167) {
              -[IDSRegistrationKeyManager _notifyUnregisteredIdentityRegenerated]( self,  "_notifyUnregisteredIdentityRegenerated");
            }
          }

          else
          {
            __int128 v137 = (id)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
            if (os_log_type_enabled((os_log_t)v137, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v137,  OS_LOG_TYPE_DEFAULT,  "We have no registered identity loaded, but we found an unregistered identity -- no need to generate",  buf,  2u);
            }
          }
        }

        else
        {
          if (-[IDSRegistrationKeyManager _shouldRegenerateRegisteredIdentity]( self,  "_shouldRegenerateRegisteredIdentity"))
          {
            __int128 v138 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
            if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v138,  OS_LOG_TYPE_DEFAULT,  "We need to regenerate the registered identity",  buf,  2u);
            }

            __int128 v139 = (void *)objc_claimAutoreleasedReturnValue( -[IDSNGMKeyLoadingErrorContainer shouldHaveRegisteredIdentity]( self->_recentKeyLoadingErrors,  "shouldHaveRegisteredIdentity"));
            if (v139)
            {
              __int128 v140 = (void *)objc_claimAutoreleasedReturnValue( -[IDSNGMKeyLoadingErrorContainer registeredDeserializationError]( self->_recentKeyLoadingErrors,  "registeredDeserializationError"));

              if (v140)
              {
                __int128 v141 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                if (os_log_type_enabled(v141, OS_LOG_TYPE_FAULT))
                {
                  objc_claimAutoreleasedReturnValue( -[IDSNGMKeyLoadingErrorContainer registeredDeserializationError]( self->_recentKeyLoadingErrors,  "registeredDeserializationError"));
                  sub_100694AF0();
                }
              }

              else
              {
                v157 = (void *)objc_claimAutoreleasedReturnValue( -[IDSNGMKeyLoadingErrorContainer registeredKeychainError]( self->_recentKeyLoadingErrors,  "registeredKeychainError"));

                if (v157)
                {
                  __int128 v141 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                  if (os_log_type_enabled(v141, OS_LOG_TYPE_FAULT))
                  {
                    objc_claimAutoreleasedReturnValue( -[IDSNGMKeyLoadingErrorContainer registeredKeychainError]( self->_recentKeyLoadingErrors,  "registeredKeychainError"));
                    sub_100694AB0();
                  }
                }

                else
                {
                  __int128 v141 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                  if (os_log_type_enabled(v141, OS_LOG_TYPE_FAULT)) {
                    sub_100694A84();
                  }
                }
              }
            }

            -[IDSRegistrationKeyManager _identityRegenerationDelay](self, "_identityRegenerationDelay");
            -[IDSRegistrationKeyManager _scheduleRegenerationOfRegisteredIdentityAfterDelay:]( self,  "_scheduleRegenerationOfRegisteredIdentityAfterDelay:");
            goto LABEL_173;
          }

          __int128 v137 = (id)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled((os_log_t)v137, OS_LOG_TYPE_DEFAULT))
          {
            v152 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
            v153 = (__CFString *)objc_claimAutoreleasedReturnValue([v152 registeredIdentityContainer]);
            v154 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
            v155 = (__CFString *)objc_claimAutoreleasedReturnValue([v154 unregisteredIdentityContainer]);
            *(_DWORD *)buf = 138412546;
            v249 = v153;
            v250 = 2112;
            v251 = v155;
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v137,  OS_LOG_TYPE_DEFAULT,  "No need to regenerate message protection identity {identity: %@, unregisteredIdentity: %@}",  buf,  0x16u);
          }
        }

LABEL_173:
        v233 = 0;
        -[IDSPerServiceApplicationKeyManager loadIdentitiesWithSerializationDidChange:deserializationDidFail:identityGenerated:]( self->_applicationKeyManager,  "loadIdentitiesWithSerializationDidChange:deserializationDidFail:identityGenerated:",  v244 + 3,  (char *)&v242 + 1,  &v233);
        if (v233) {
          -[IDSRegistrationKeyManager _notifyUnregisteredIdentityRegenerated]( self,  "_notifyUnregisteredIdentityRegenerated");
        }
        if (+[IDSKeyTransparencyVerifier isKeyTransparencyEnabled]( &OBJC_CLASS___IDSKeyTransparencyVerifier,  "isKeyTransparencyEnabled"))
        {
          v232 = 0;
          -[IDSKTRegistrationDataManager loadKTRegistrationDatasWithShouldGenerateKTData:]( self->_ktRegistrationDataManager,  "loadKTRegistrationDatasWithShouldGenerateKTData:",  &v232);
          if (v232)
          {
            v231 = 0LL;
            v168 = (void *)objc_claimAutoreleasedReturnValue( -[IDSRegistrationKeyManager publicMessageProtectionIdentityDataToRegisterWithError:]( self,  "publicMessageProtectionIdentityDataToRegisterWithError:",  &v231));
            v169 = v231;
            v171 = im_primary_queue(v169, v170);
            v172 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v171);
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472LL;
            block[2] = sub_10002AC2C;
            block[3] = &unk_1008F5F80;
            block[4] = self;
            v173 = v168;
            v230 = v173;
            dispatch_async(v172, block);
          }
        }

        else
        {
          v174 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR)) {
            sub_100694A58();
          }
        }

        goto LABEL_182;
      }

      __int128 v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEFAULT,  "We're under lock, and this requires migration -- we need to migrate",  buf,  2u);
      }

      self->_detectedMigrationNeeded = 1;
      v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager systemMonitor](self, "systemMonitor"));
      -[os_log_s _addEarlyListener:](v55, "_addEarlyListener:", self);
    }

    goto LABEL_70;
  }

        buf[0] = 60;
        uint64_t v38 = (unsigned __int16)((_WORD)v34 - (unsigned __int16)buf);
        *(_WORD *)&buf[1] = bswap32(v38 - 3) >> 16;
        id v39 = OSLogHandleForIDSCategory("IDSDSession");
        uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v85 = 67109890;
          *(_DWORD *)v86 = v78;
          *(_WORD *)&v86[4] = 1024;
          *(_DWORD *)&v86[6] = v66;
          *(_WORD *)v87 = 2112;
          *(void *)&v87[2] = v14;
          uint64_t v88 = 1024;
          v89 = v38 - 3;
          _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "currentLinkCount: %u/%u, linkID: %@, size: %u",  v85,  0x1Eu);
        }

        if (os_log_shim_legacy_logging_enabled(v41)
          && _IDSShouldLog(0LL, @"IDSDSession"))
        {
          id v60 = v14;
          __int128 v61 = (v38 - 3);
          uint64_t v56 = v78;
          v58 = v66;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"currentLinkCount: %u/%u, linkID: %@, size: %u");
        }

        -[IDSDSession writeToClientChannel:packetBuffer:metaData:metadataSize:]( self,  "writeToClientChannel:packetBuffer:metaData:metadataSize:",  self->_clientChannel,  0LL,  buf,  v38,  v56,  v58,  v60,  v61);

        uint64_t v11 = v75 + 1;
        if (v75 + 1 >= (unint64_t)v76)
        {
          v76 = [obj countByEnumeratingWithState:&v81 objects:v95 count:16];
          if (!v76)
          {
            uint64_t v74 = 0LL;
            ++v77;
            goto LABEL_67;
          }

          uint64_t v11 = 0LL;
        }

        id v12 = *(void *)v82;
        ++v77;
      }
    }

    uint64_t v77 = 0;
    uint64_t v74 = 0LL;
LABEL_67:

    if (v66 != v77)
    {
      uint64_t v45 = OSLogHandleForIDSCategory("IDSDSession");
      id v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)v91 = v77;
        *(_WORD *)&v91[4] = 1024;
        *(_DWORD *)&v91[6] = v66;
        LOWORD(v92) = 1024;
        *(_DWORD *)((char *)&v92 + 2) = v74;
        _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "processedLinks: %u/%u, lastCount: %u",  buf,  0x14u);
      }

      if (os_log_shim_legacy_logging_enabled(v47)
        && _IDSShouldLog(0LL, @"IDSDSession"))
      {
        v58 = v66;
        id v60 = (void *)v74;
        uint64_t v56 = v77;
        _IDSLogV(0LL, @"IDSFoundation", @"IDSDSession", @"processedLinks: %u/%u, lastCount: %u");
      }

      id v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo", v56, v58, v60));
      id v49 = (void *)objc_claimAutoreleasedReturnValue([v48 processName]);
      IMLogSimulateCrashForProcess(v49, @"processedLinks not equal to totalLinkIDs", 0LL);
    }
  }

  else
  {
    uint64_t v42 = OSLogHandleForIDSCategory("IDSDSession");
    v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "didGetLinkProbingStatus: No valid linkIDs",  buf,  2u);
    }
  }

LABEL_75:
}
}

              id v24 = (char *)v24 + 1;
            }

            while (v23 != v24);
            uint64_t v42 = [v21 countByEnumeratingWithState:&v93 objects:v111 count:16];
            id v23 = v42;
            if (!v42)
            {
LABEL_55:

              if ((-[os_log_s shouldAutoRegisterAllHandles](v83, "shouldAutoRegisterAllHandles") & 1) == 0) {
                [v14 _attachOrphanedPhoneAliases:v76 toRecipientAccounts:v75 withAccountsToEnable:v74];
              }

              __int16 v17 = v72;
              i = v73;
              id v19 = v71;
              break;
            }
          }
        }

        objc_autoreleasePoolPop(v17);
      }

      uint64_t v70 = [obj countByEnumeratingWithState:&v97 objects:v112 count:16];
    }

    while (v70);
  }

  v43 = (os_log_s *)objc_claimAutoreleasedReturnValue([v10[440] registration]);
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
  {
    id v44 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [p_isa[1] count]));
    *(_DWORD *)buf = 138412290;
    v104 = v44;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Loaded accounts { count: %@ }", buf, 0xCu);
  }

  uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue([v10[440] registration]);
  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG)) {
    sub_10069D92C();
  }

  v91 = 0u;
  v92 = 0u;
  v89 = 0u;
  uint64_t v90 = 0u;
  id v46 = v74;
  id v47 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v46,  "countByEnumeratingWithState:objects:count:",  &v89,  v102,  16LL);
  if (v47)
  {
    id v48 = v47;
    id v49 = *(void *)v90;
    do
    {
      for (j = 0LL; j != v48; j = (char *)j + 1)
      {
        if (*(void *)v90 != v49) {
          objc_enumerationMutation(v46);
        }
        id v51 = *(void *)(*((void *)&v89 + 1) + 8LL * (void)j);
        id v52 = objc_autoreleasePoolPush();
        [p_isa _enableAccountWithUniqueID:v51];
        objc_autoreleasePoolPop(v52);
      }

      id v48 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v46,  "countByEnumeratingWithState:objects:count:",  &v89,  v102,  16LL);
    }

    while (v48);
  }

  v87 = 0u;
  uint64_t v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  id v53 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allValues](v46, "allValues"));
  v54 = [v53 countByEnumeratingWithState:&v85 objects:v101 count:16];
  if (v54)
  {
    v55 = v54;
    uint64_t v56 = *(void *)v86;
    do
    {
      for (k = 0LL; k != v55; k = (char *)k + 1)
      {
        if (*(void *)v86 != v56) {
          objc_enumerationMutation(v53);
        }
        v58 = *(void **)(*((void *)&v85 + 1) + 8LL * (void)k);
        uint64_t v59 = objc_autoreleasePoolPush();
        [v58 _cleanupAccount];
        objc_autoreleasePoolPop(v59);
      }

      v55 = [v53 countByEnumeratingWithState:&v85 objects:v101 count:16];
    }

    while (v55);
  }

  if ((v78 & 1) == 0)
  {
    id v60 = (void *)objc_claimAutoreleasedReturnValue([p_isa userDefaults]);
    [v60 setAppBool:1 forKey:@"performed-user-intent-migrate"];

    __int128 v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEFAULT,  "Performed one time user intent migration on upgrade",  buf,  2u);
    }
  }

  __int128 v62 = [p_isa[1] count] != 0;

  return v62;
}
      }

      uint64_t v100 = [obj countByEnumeratingWithState:&v103 objects:v120 count:16];
    }

    while (v100);
  }

  id v53 = v85;
  v54 = v82;
  if (v82)
  {
    v55 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
    {
      identityForDevice = self->_identityForDevice;
      *(_DWORD *)buf = 138412546;
      v109 = identityForDevice;
      uint64_t v110 = 2112;
      id v111 = v82;
      _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "updateServerDesiredKeyMaterialsForGroup preKey:%@ preKeyData:%@",  buf,  0x16u);
    }

    v57 = objc_alloc(&OBJC_CLASS___IDSServerDesiredPreKeyMaterialSet);
    v58 = -[IDSGroupEncryptionController1 realTimeEncryptionPublicKeyWrappingMode]( self,  "realTimeEncryptionPublicKeyWrappingMode");
    uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    id v60 = -[IDSServerDesiredPreKeyMaterialSet initWithPublicPreKeyData:wrapMode:creationDate:]( v57,  "initWithPublicPreKeyData:wrapMode:creationDate:",  v82,  v58,  v59);
    [v84 addObject:v60];
  }

  __int128 v61 = (void *)objc_claimAutoreleasedReturnValue(-[IDSGroupEncryptionController1 sessionController](self, "sessionController"));
  __int128 v62 = (void *)objc_claimAutoreleasedReturnValue([v61 sessionWithUniqueID:v87]);

  __int128 v63 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  __int128 v64 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](self->_accountIDs, "objectForKeyedSubscript:", v85));
  v65 = (void *)objc_claimAutoreleasedReturnValue([v63 accountWithUniqueID:v64]);

  if (v62)
  {
    id v66 = objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](self->_fromURIs, "objectForKeyedSubscript:", v85));
    v67 = (os_log_s *)v66;
    if (v65 && v66)
    {
      v68 = (os_log_s *)objc_claimAutoreleasedReturnValue([v62 encryptedDataBlob]);
      v69 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
      uint64_t v70 = os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT);
      if (v68)
      {
        if (v70)
        {
          *(_DWORD *)buf = 138412290;
          v109 = v68;
          _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_DEFAULT,  "updateServerDesiredKeyMaterialsForGroup: add encryptedDataBlob: %@",  buf,  0xCu);
        }

        v69 = -[IDSServerDesiredEncryptedDataBlobMaterialSet initWithEncryptedBlobData:type:requireSignature:]( objc_alloc(&OBJC_CLASS___IDSServerDesiredEncryptedDataBlobMaterialSet),  "initWithEncryptedBlobData:type:requireSignature:",  v68,  12LL,  0LL);
        [v84 addObject:v69];
      }

      else if (v70)
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_DEFAULT,  "updateServerDesiredKeyMaterialsForGroup: haven't got the blob",  buf,  2u);
      }

      v72 = (void *)objc_claimAutoreleasedReturnValue([v62 encryptedMirageHandshakeBlob]);
      uint64_t v73 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
      uint64_t v74 = os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT);
      if (v72)
      {
        if (v74)
        {
          *(_DWORD *)buf = 138412290;
          v109 = v72;
          _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEFAULT,  "updateServerDesiredKeyMaterialsForGroup: add encryptedMirageHandshakeBlob: %@",  buf,  0xCu);
        }

        uint64_t v73 = -[IDSServerDesiredEncryptedDataBlobMaterialSet initWithEncryptedBlobData:type:requireSignature:]( objc_alloc(&OBJC_CLASS___IDSServerDesiredEncryptedDataBlobMaterialSet),  "initWithEncryptedBlobData:type:requireSignature:",  v72,  6LL,  0LL);
        [v84 addObject:v73];
      }

      else if (v74)
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEFAULT,  "updateServerDesiredKeyMaterialsForGroup: haven't got the handshake blob",  buf,  2u);
      }

      id v53 = v85;

      v75 = (void *)objc_claimAutoreleasedReturnValue([v62 getDesiredMaterialSetForEncryptedData]);
      v76 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
      uint64_t v77 = os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT);
      if (v75)
      {
        if (v77)
        {
          *(_DWORD *)buf = 138412290;
          v109 = v75;
          _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEFAULT,  "updateServerDesiredKeyMaterialsForGroup: add desiredMaterialSetForEncryptedData: %@",  buf,  0xCu);
        }

        uint64_t v78 = v84;
        [v84 unionSet:v75];
      }

      else
      {
        if (v77)
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEFAULT,  "updateServerDesiredKeyMaterialsForGroup: haven't got the desiredMaterialSetForEncryptedData",  buf,  2u);
        }

        uint64_t v78 = v84;
      }

      v79 = [v78 copy];
      v101[0] = _NSConcreteStackBlock;
      v101[1] = 3221225472LL;
      v101[2] = sub_100192C30;
      v101[3] = &unk_1008FC550;
      v102 = v65;
      [v62 setServerDesiredKeyMaterials:v79 signer:v101];

      v71 = v80;
    }

    else
    {
      v68 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
      v71 = v80;
      if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412802;
        v109 = v65;
        uint64_t v110 = 2112;
        id v111 = v67;
        v112 = 2112;
        v113 = v85;
        _os_log_error_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_ERROR,  "updateServerDesiredKeyMaterialsForGroup: account: %@ fromID: %@ - failed to get the account forGroup: %@",  buf,  0x20u);
      }
    }

    v54 = v82;
  }

  else
  {
    v67 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
    v71 = v80;
    if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR)) {
      sub_10069F86C();
    }
  }
}

    id v46 = (const __CFString *)objc_claimAutoreleasedReturnValue(v45);

LABEL_51:
    v55 = objc_alloc(&OBJC_CLASS___IDSSystemAccountAdapter);
    v57 = im_primary_queue(v55, v56);
    v58 = (void *)objc_claimAutoreleasedReturnValue(v57);
    uint64_t v59 = -[IDSSystemAccountAdapter initWithQueue:](v55, "initWithQueue:", v58);

    uint64_t v97 = 0LL;
    id v60 = (void *)objc_claimAutoreleasedReturnValue(-[IDSSystemAccountAdapter iCloudSystemAccountWithError:](v59, "iCloudSystemAccountWithError:", &v97));
    __int128 v61 = v97;
    __int128 v62 = objc_claimAutoreleasedReturnValue([v60 username]);
    v86 = v61;
    v87 = v59;
    v85 = v60;
    v89 = (void *)v62;
    else {
      __int128 v63 = @"If you recently signed in to this device, you can ignore this notification.";
    }
    __int128 v64 = IMLocalizedStringFromTableInBundle(v63, @"IDSLocalizable", v96, v63);
    v65 = objc_claimAutoreleasedReturnValue(v64);
    id v66 = IMLocalizedStringFromTableInBundle( @"Device Added to Your Account",  @"IDSLocalizable",  v96,  @"Device Added to Your Account");
    v67 = objc_claimAutoreleasedReturnValue(v66);
    uint64_t v88 = (__CFString *)v46;
    v68 = objc_claimAutoreleasedReturnValue( -[IDSAppleIDNotificationCenter _localizedServicesAccessStringForDevice:serviceMessage:]( v90,  "_localizedServicesAccessStringForDevice:serviceMessage:",  v94,  v46));
    v81 = objc_alloc_init((Class)IMWeakLinkClass(@"AAAccountUserNotificationPublisher", @"AppleAccount"));
    v69 = objc_alloc_init((Class)IMWeakLinkClass(@"AAAccountUserNotificationContext", @"AppleAccount"));
    v83 = (void *)v67;
    [v69 setTitle:v67];
    uint64_t v84 = (void *)v65;
    uint64_t v82 = (void *)v68;
    uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v68, v65));
    [v69 setMessage:v70];

    [v69 setAction:0];
    v71 = IDSDailyAccountAddedNotificationMetricTotalKey;
    v72 = (void *)objc_claimAutoreleasedReturnValue( -[IDSPersistentMap objectForKey:]( v90->_dailyMetricsData,  "objectForKey:",  IDSDailyAccountAddedNotificationMetricTotalKey));
    [v72 doubleValue];
    uint64_t v74 = (uint64_t)v73;

    v75 = (void *)objc_claimAutoreleasedReturnValue( -[IDSPersistentMap objectForKey:]( v90->_dailyMetricsData,  "objectForKey:",  IDSDailyAccountAddedNotificationMetricDuplicateKey));
    [v75 doubleValue];

    dailyMetricsData = v90->_dailyMetricsData;
    uint64_t v77 = v74 + 1;
    uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v74 + 1));
    -[IDSPersistentMap setObject:forKey:](dailyMetricsData, "setObject:forKey:", v78, v71);

    v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
    {
      v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v77));
      *(_DWORD *)buf = 138412290;
      v107 = v80;
      _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEFAULT,  "Posting new device notification. Number of notifications posted today: %@",  buf,  0xCu);
    }

    [v81 postAccountUserNotificationWith:v69 completion:&stru_1008FC960];
    uint64_t v38 = v92;
  }
}

            v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "data", v65, v67, v69));
            goto LABEL_76;
          }

          id v21 = self->_otrTokenIdentifier;
          id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u-%1u-%@",  @"idsotr",  v17,  v18,  v21));
        }

        else
        {
          id v22 = 0LL;
        }

        if ((_DWORD)v14) {
          goto LABEL_30;
        }
        goto LABEL_50;
      }

      if (v20 || (_DWORD)v16 != 43258)
      {
        if (v20) {
          goto LABEL_18;
        }
      }

      else if (self->_priority == v17)
      {
        id v20 = @"com.apple.private.alloy.utunconnection";
        goto LABEL_18;
      }

      __int128 v62 = OSLogHandleForIDSCategory("Warning");
      __int128 v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
      if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67110144;
        *(_DWORD *)v79 = v6;
        *(_WORD *)&v79[4] = 1024;
        *(_DWORD *)&v79[6] = (_DWORD)v72;
        *(_WORD *)v80 = 1024;
        *(_DWORD *)&v80[2] = (_DWORD)v16;
        *(_WORD *)&v80[6] = 1024;
        *(_DWORD *)&v80[8] = v15;
        *(_WORD *)&v80[12] = 1024;
        *(_DWORD *)&v80[14] = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_ERROR,  "*** Recv OTR message with unknown topic, command:%d, sequenceNumber:%u, streamID:%04x, version:%u, priority:%d",  buf,  0x20u);
      }

      if (os_log_shim_legacy_logging_enabled(v64))
      {
        _IDSWarnV( @"IDSFoundation",  @"*** Recv OTR message with unknown topic, command:%d, sequenceNumber:%u, streamID:%04x, version:%u, priority:%d");
        _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"*** Recv OTR message with unknown topic, command:%d, sequenceNumber:%u, streamID:%04x, version:%u, priority:%d");
        _IDSLogTransport( @"Warning",  @"IDS",  @"*** Recv OTR message with unknown topic, command:%d, sequenceNumber:%u, streamID:%04x, version:%u, priority:%d");
      }

      id v20 = 0LL;
      id v22 = 0LL;
      goto LABEL_85;
    }

    int v15 = objc_msgSend(v4, "versionNumber", v65);
    int8x16_t v14 = [v4 encrypted];
    id v16 = [v4 streamID];
    __int16 v17 = [v4 priority];
    v72 = [v4 sequenceNumber];
    id v18 = 0LL;
    goto LABEL_16;
  }

  id v7 = OSLogHandleForIDSCategory("Warning");
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v79 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Attempt to decrypt invalid message type %u.",  buf,  8u);
  }

  if (os_log_shim_legacy_logging_enabled(v9))
  {
    _IDSWarnV(@"IDSFoundation", @"Attempt to decrypt invalid message type %u.");
    _IDSLogV(0LL, @"IDSFoundation", @"Warning", @"Attempt to decrypt invalid message type %u.");
    _IDSLogTransport(@"Warning", @"IDS", @"Attempt to decrypt invalid message type %u.");
  }

  id v10 = 0LL;
LABEL_78:

  return v10;
}

  v41 = *(_BYTE *)(v2 + 32);
  uint64_t v42 = v41 & 0x3F;
  v43 = (1LL << v41) + 63;
  id v44 = v43 >> 6;
  uint64_t v45 = 8 * (v43 >> 6);
  if (v42 < 0xE || swift_stdlib_isStackAllocationSafe(8 * (v43 >> 6), 8LL))
  {
    __chkstk_darwin(v39, v40);
    memcpy((char *)&v51 - ((v45 + 15) & 0x3FFFFFFFFFFFFFF0LL), (const void *)(v2 + 56), v45);
    sub_1004360D0((unint64_t *)((char *)&v51 - ((v45 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v44, v2, v28, &v53);
    id v47 = v46;
    swift_release(v2);
    sub_10041D3BC(v53);
  }

  else
  {
    id v48 = (void *)swift_slowAlloc(v45, -1LL);
    memcpy(v48, (const void *)(v2 + 56), v45);
    sub_1004360D0((unint64_t *)v48, v44, v2, v28, &v53);
    id v47 = v49;
    swift_release(v2);
    sub_10041D3BC(v53);
    swift_slowDealloc(v48, -1LL, -1LL);
  }

  return (void *)v47;
}

  v41 = *(_BYTE *)(v2 + 32);
  uint64_t v42 = v41 & 0x3F;
  v43 = (1LL << v41) + 63;
  id v44 = v43 >> 6;
  uint64_t v45 = 8 * (v43 >> 6);
  if (v42 < 0xE || swift_stdlib_isStackAllocationSafe(8 * (v43 >> 6), 8LL))
  {
    __chkstk_darwin(v39, v40);
    memcpy((char *)&v51 - ((v45 + 15) & 0x3FFFFFFFFFFFFFF0LL), (const void *)(v2 + 56), v45);
    sub_1004895AC((unint64_t *)((char *)&v51 - ((v45 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v44, v2, v28, &v53);
    id v47 = v46;
    swift_release(v2);
    sub_10041D3BC(v53);
  }

  else
  {
    id v48 = (void *)swift_slowAlloc(v45, -1LL);
    memcpy(v48, (const void *)(v2 + 56), v45);
    sub_1004895AC((unint64_t *)v48, v44, v2, v28, &v53);
    id v47 = v49;
    swift_release(v2);
    sub_10041D3BC(v53);
    swift_slowDealloc(v48, -1LL, -1LL);
  }

  return (void *)v47;
}

  v41 = *(_BYTE *)(v2 + 32);
  uint64_t v42 = v41 & 0x3F;
  v43 = (1LL << v41) + 63;
  id v44 = v43 >> 6;
  uint64_t v45 = 8 * (v43 >> 6);
  if (v42 < 0xE || swift_stdlib_isStackAllocationSafe(8 * (v43 >> 6), 8LL))
  {
    __chkstk_darwin(v39, v40);
    memcpy((char *)&v51 - ((v45 + 15) & 0x3FFFFFFFFFFFFFF0LL), (const void *)(v2 + 56), v45);
    sub_100494CF4((unint64_t *)((char *)&v51 - ((v45 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v44, v2, v28, &v53);
    id v47 = v46;
    swift_release(v2);
    sub_10041D3BC(v53);
  }

  else
  {
    id v48 = (void *)swift_slowAlloc(v45, -1LL);
    memcpy(v48, (const void *)(v2 + 56), v45);
    sub_100494CF4((unint64_t *)v48, v44, v2, v28, &v53);
    id v47 = v49;
    swift_release(v2);
    sub_10041D3BC(v53);
    swift_slowDealloc(v48, -1LL, -1LL);
  }

  return (void *)v47;
}

  __break(1u);
LABEL_51:
  v65 = sub_10041D3C4(0LL, (unint64_t *)&qword_1009BBE30, &OBJC_CLASS___IDSPushToken_ptr);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v65);
  __break(1u);
  return result;
}

              id v44 = 0LL;
              swift_release(v4);
              sub_10041D3BC(v1);
              return (Swift::Int)v4;
            }
          }
        }
      }
    }

    if (v22 < v21) {
      goto LABEL_129;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0) {
      id v16 = sub_1004C4884(0LL, *((void *)v16 + 2) + 1LL, 1, v16);
    }
    v55 = *((void *)v16 + 2);
    v54 = *((void *)v16 + 3);
    id v20 = v55 + 1;
    id v18 = v131;
    if (v55 >= v54 >> 1)
    {
      v105 = sub_1004C4884((char *)(v54 > 1), v55 + 1, 1, v16);
      id v18 = v131;
      id v16 = v105;
    }

    *((void *)v16 + 2) = v20;
    uint64_t v56 = &v16[16 * v55 + 32];
    *(void *)uint64_t v56 = v21;
    *((void *)v56 + 1) = v22;
    __int128 v125 = (void *)v22;
    if (v55)
    {
      v57 = v16 + 32;
      while (1)
      {
        v58 = v20 - 1;
        if (v20 >= 4)
        {
          __int128 v63 = &v57[16 * v20];
          __int128 v64 = *((void *)v63 - 8);
          v65 = *((void *)v63 - 7);
          v69 = __OFSUB__(v65, v64);
          id v66 = v65 - v64;
          if (v69) {
            goto LABEL_118;
          }
          v68 = *((void *)v63 - 6);
          v67 = *((void *)v63 - 5);
          v69 = __OFSUB__(v67, v68);
          __int128 v61 = v67 - v68;
          __int128 v62 = v69;
          if (v69) {
            goto LABEL_119;
          }
          uint64_t v70 = v20 - 2;
          v71 = &v57[16 * v20 - 32];
          uint64_t v73 = *(void *)v71;
          v72 = *((void *)v71 + 1);
          v69 = __OFSUB__(v72, v73);
          uint64_t v74 = v72 - v73;
          if (v69) {
            goto LABEL_121;
          }
          v69 = __OFADD__(v61, v74);
          v75 = v61 + v74;
          if (v69) {
            goto LABEL_124;
          }
          if (v75 >= v66)
          {
            uint64_t v93 = &v57[16 * v58];
            v95 = *(void *)v93;
            uint64_t v94 = *((void *)v93 + 1);
            v69 = __OFSUB__(v94, v95);
            v96 = v94 - v95;
            if (v69) {
              goto LABEL_128;
            }
            v86 = v61 < v96;
            goto LABEL_88;
          }
        }

        else
        {
          if (v20 != 3)
          {
            v87 = *((void *)v16 + 4);
            uint64_t v88 = *((void *)v16 + 5);
            v69 = __OFSUB__(v88, v87);
            v80 = v88 - v87;
            v81 = v69;
            goto LABEL_82;
          }

          id v60 = *((void *)v16 + 4);
          uint64_t v59 = *((void *)v16 + 5);
          v69 = __OFSUB__(v59, v60);
          __int128 v61 = v59 - v60;
          __int128 v62 = v69;
        }

        if ((v62 & 1) != 0) {
          goto LABEL_120;
        }
        uint64_t v70 = v20 - 2;
        v76 = &v57[16 * v20 - 32];
        uint64_t v78 = *(void *)v76;
        uint64_t v77 = *((void *)v76 + 1);
        v79 = __OFSUB__(v77, v78);
        v80 = v77 - v78;
        v81 = v79;
        if (v79) {
          goto LABEL_123;
        }
        uint64_t v82 = &v57[16 * v58];
        uint64_t v84 = *(void *)v82;
        v83 = *((void *)v82 + 1);
        v69 = __OFSUB__(v83, v84);
        v85 = v83 - v84;
        if (v69) {
          goto LABEL_126;
        }
        if (__OFADD__(v80, v85)) {
          goto LABEL_127;
        }
        if (v80 + v85 >= v61)
        {
          v86 = v61 < v85;
LABEL_88:
          if (v86) {
            v58 = v70;
          }
          goto LABEL_90;
        }

LABEL_184:
  -[NSRecursiveLock unlock](self->_lock, "unlock");
  if (IMGetAppBoolForKey(@"ForceRefreshIdentityWithServer"))
  {
    IMSetAppBoolForKey(@"ForceRefreshIdentityWithServer", 0LL);
    v192 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v192, OS_LOG_TYPE_DEFAULT))
    {
      v241[1] = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v192,  OS_LOG_TYPE_DEFAULT,  " ********************************************************************",  (uint8_t *)&v241[1],  2u);
    }

    v193 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v193, OS_LOG_TYPE_DEFAULT))
    {
      v241[1] = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v193,  OS_LOG_TYPE_DEFAULT,  " ********  DEFAULT SET TO FORCE IDENTITY REFRESH  *******************",  (uint8_t *)&v241[1],  2u);
    }

    v194 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v194, OS_LOG_TYPE_DEFAULT))
    {
      v241[1] = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v194,  OS_LOG_TYPE_DEFAULT,  " ********************************************************************",  (uint8_t *)&v241[1],  2u);
    }

    v228[0] = _NSConcreteStackBlock;
    v228[1] = 3221225472LL;
    v228[2] = sub_10002AC38;
    v228[3] = &unk_1008F6878;
    v228[4] = &v243;
    v195 = v228;
    if (qword_1009BE5F0 != -1) {
      dispatch_once(&qword_1009BE5F0, v195);
    }
  }

  if (*((unsigned __int8 *)v244 + 24) | HIBYTE(v242))
  {
    if (!-[IDSRegistrationKeyManager _save](self, "_save")) {
      goto LABEL_221;
    }
    if (*((_BYTE *)v244 + 24))
    {
      v200 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v200, OS_LOG_TYPE_DEFAULT))
      {
        v241[1] = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v200,  OS_LOG_TYPE_DEFAULT,  " ********************************************************************",  (uint8_t *)&v241[1],  2u);
      }

      v201 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v201, OS_LOG_TYPE_DEFAULT))
      {
        v241[1] = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v201,  OS_LOG_TYPE_DEFAULT,  " ****************  IDENTITY SERIALIZATION UPDATED  ******************",  (uint8_t *)&v241[1],  2u);
      }

      v202 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v202, OS_LOG_TYPE_DEFAULT))
      {
        v241[1] = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v202,  OS_LOG_TYPE_DEFAULT,  " ********************************************************************",  (uint8_t *)&v241[1],  2u);
      }

      self->_needsReRegister = 1;
    }

    if (HIBYTE(v242))
    {
      v203 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v203, OS_LOG_TYPE_DEFAULT))
      {
        v241[1] = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v203,  OS_LOG_TYPE_DEFAULT,  " ********************************************************************",  (uint8_t *)&v241[1],  2u);
      }

      v204 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v204, OS_LOG_TYPE_DEFAULT))
      {
        v241[1] = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v204,  OS_LOG_TYPE_DEFAULT,  " ************************  IDENTITY REBUILT  ************************",  (uint8_t *)&v241[1],  2u);
      }

      v205 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v205, OS_LOG_TYPE_DEFAULT))
      {
        v241[1] = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v205,  OS_LOG_TYPE_DEFAULT,  " ********************************************************************",  (uint8_t *)&v241[1],  2u);
      }

      v199 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
      objc_msgSend( v199,  "__mainThreadPostNotificationName:object:",  @"__kIDSRegistrationKeyManagerPrivateIdentityRebuiltNotification",  self);
      goto LABEL_220;
    }
  }

  if ((_BYTE)v242)
  {
    v196 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v196, OS_LOG_TYPE_DEFAULT))
    {
      v241[1] = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v196,  OS_LOG_TYPE_DEFAULT,  " ********************************************************************",  (uint8_t *)&v241[1],  2u);
    }

    v197 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v197, OS_LOG_TYPE_DEFAULT))
    {
      v241[1] = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v197,  OS_LOG_TYPE_DEFAULT,  " *****************  NEEDS ENCRYPTION IDENTITY ROLL  *****************",  (uint8_t *)&v241[1],  2u);
    }

    v198 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v198, OS_LOG_TYPE_DEFAULT))
    {
      v241[1] = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v198,  OS_LOG_TYPE_DEFAULT,  " ********************************************************************",  (uint8_t *)&v241[1],  2u);
    }

    v199 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    objc_msgSend( v199,  "__mainThreadPostNotificationName:object:",  @"__kIDSRegistrationKeyManagerEncryptionIdentityNeedsRollNotification",  self);
LABEL_220:
  }

  __break(1u);
}

LABEL_221:
  _Block_object_dispose(&v243, 8);
}

void sub_10002AAF0(_Unwind_Exception *a1)
{
}

id sub_10002AC2C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _generateKTRegistrationData:*(void *)(a1 + 40)];
}

uint64_t sub_10002AC38(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

LABEL_13:
  -[NSRecursiveLock unlock](self->_lock, "unlock");
  return v11;
}

  return v11;
}

    id v28 = 1;
    goto LABEL_15;
  }

  id v28 = 0;
LABEL_15:
  id v29 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithPrefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithPrefixedURI:withServiceLoggingHint:",  v17,  v18,  v56,  v59,  v62));
  if ((v28 & 1) != 0)
  {
    id v30 = 0LL;
  }

  else
  {
    if (a5 == 7000)
    {
      id v48 = OSLogHandleForIDSCategory("Warning");
      id v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        v71 = (int64_t)v17;
        v72 = 2112;
        uint64_t v73 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_ERROR,  "Message was rate limited from the server, failing message (%@ -> %@)",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v50))
      {
        _IDSWarnV(@"IDSFoundation", @"Message was rate limited from the server, failing message (%@ -> %@)");
        _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Message was rate limited from the server, failing message (%@ -> %@)");
        v57 = v17;
        id v60 = v16;
        _IDSLogTransport( @"Warning",  @"IDS",  @"Message was rate limited from the server, failing message (%@ -> %@)");
      }

      if (+[IDSAutoBugCapture isSupported](&OBJC_CLASS___IDSAutoBugCapture, "isSupported", v57, v60)) {
        +[IDSAutoBugCapture triggerCaptureWithEvent:context:completion:]( &OBJC_CLASS___IDSAutoBugCapture,  "triggerCaptureWithEvent:context:completion:",  102LL,  @"NiceRateLimited",  &stru_1008F83F0);
      }
    }

    else if (a5 == 5032)
    {
      __int128 v31 = OSLogHandleForIDSCategory("IDSDelivery");
      int v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        id v33 = (void *)objc_claimAutoreleasedReturnValue([v15 targetToken]);
        __int16 v34 = (id)objc_claimAutoreleasedReturnValue([v33 debugDescription]);
        uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v15 targetSessionToken]);
        __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v35 debugDescription]);
        *(_DWORD *)buf = 138413570;
        v71 = (int64_t)v15;
        v72 = 2112;
        uint64_t v73 = v16;
        uint64_t v74 = 2112;
        v75 = v17;
        v76 = 2112;
        uint64_t v77 = v34;
        uint64_t v78 = 2112;
        v79 = v36;
        v80 = 2112;
        v81 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Bad signature {message: %@, localURI: %@, remoteURI: %@, remotePushToken: %@, sessionToken: %@, service: %@}",  buf,  0x3Eu);
      }

      if (os_log_shim_legacy_logging_enabled(v37)
        && _IDSShouldLog(0LL, @"IDSDelivery"))
      {
        uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v15 targetToken]);
        id v39 = (void *)objc_claimAutoreleasedReturnValue([v38 debugDescription]);
        uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v15 targetSessionToken]);
        id v66 = (void *)objc_claimAutoreleasedReturnValue([v40 debugDescription]);
        v67 = v18;
        __int128 v64 = v17;
        v65 = v39;
        v57 = v15;
        id v60 = v16;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDelivery",  @"Bad signature {message: %@, localURI: %@, remoteURI: %@, remotePushToken: %@, sessionToken: %@, service: %@}");
      }

      v41 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPeerIDManager sharedInstance]( &OBJC_CLASS___IDSPeerIDManager,  "sharedInstance",  v57,  v60,  v64,  v65,  v66,  v67));
      uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v15 targetToken]);
      LOBYTE(v61) = 0;
      v43 = (void *)objc_claimAutoreleasedReturnValue( [v41 sessionTokenForURI:v16 pushToken:v42 fromURI:v29 service:v18 expirationDate:0 refreshDate:0 fromIdentity:v68 includeSelfDevice:v61]);

      id v44 = OSLogHandleForIDSCategory("IDSDelivery");
      uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v71 = (int64_t)v43;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, " current sessionToken: %@", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v46)
        && _IDSShouldLog(0LL, @"IDSDelivery"))
      {
        v58 = v43;
        _IDSLogV(0LL, @"IDSFoundation", @"IDSDelivery", @" current sessionToken: %@");
      }

      id v47 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPeerIDManager sharedInstance](&OBJC_CLASS___IDSPeerIDManager, "sharedInstance", v58));
      [v47 forgetPeerTokensForURI:v16 fromURI:v29 service:v18];
    }

    else
    {
      id v51 = OSLogHandleForIDSCategory("Warning");
      id v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "Unknown Error, Failing message", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled(v53))
      {
        _IDSWarnV(@"IDSFoundation", @"Unknown Error, Failing message");
        _IDSLogV(0LL, @"IDSFoundation", @"Warning", @"Unknown Error, Failing message");
        _IDSLogTransport(@"Warning", @"IDS", @"Unknown Error, Failing message");
      }
    }

    v54 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v69,  NSUnderlyingErrorKey,  0LL));
    id v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSSendErrorDomain,  2LL,  v54));
  }

  return v30;
}
}

  id v25 = -[IDSEntitlements initWithEntitlements:]( objc_alloc(&OBJC_CLASS___IDSEntitlements),  "initWithEntitlements:",  v18);
  *(void *)buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000LL;
  id v50 = sub_100112DDC;
  id v51 = sub_100112DEC;
  id v52 = 0LL;
  v38[0] = _NSConcreteStackBlock;
  v38[1] = 3221225472LL;
  v38[2] = sub_1001179F4;
  v38[3] = &unk_1008FAE10;
  v38[4] = buf;
  id v26 = -[IDSDaemon _setupListenerConnection:listenerID:pid:setupInfo:entitlements:setupCompletionBlock:]( self,  "_setupListenerConnection:listenerID:pid:setupInfo:entitlements:setupCompletionBlock:",  v35,  v36,  a4,  v34,  v25,  v38);
  *a9 = (id)IMCreateXPCObjectFromDictionary(*(void *)(*(void *)&buf[8] + 40LL));
  __int16 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMIDSLog daemon_oversized](&OBJC_CLASS___IMIDSLog, "daemon_oversized"));
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    id v28 = (void *)objc_claimAutoreleasedReturnValue(-[IDSEntitlements dictionaryRepresentation](v25, "dictionaryRepresentation"));
    *(_DWORD *)id v39 = 67110146;
    uint64_t v40 = v26;
    v41 = 2112;
    uint64_t v42 = v36;
    v43 = 1024;
    id v44 = a4;
    uint64_t v45 = 2112;
    id v46 = v18;
    id v47 = 2112;
    id v48 = v28;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Granting access %d to listener: %@ pid: %d usingSync: YES givenEntitlements: %@ parsedEntitlements: %@",  v39,  0x2Cu);
  }

  _Block_object_dispose(buf, 8);
  return v26;
}

    goto LABEL_14;
  }

  if (v3)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 protocolChecker]);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue([v7 protocol]);

    int64 = xpc_dictionary_get_int64(*(xpc_object_t *)(a1 + 40), "priority");
    if (int64)
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      v11[2] = sub_10011E240;
      v11[3] = &unk_1008F9060;
      id v12 = *(id *)(a1 + 40);
      uint64_t v13 = v3;
      id v4 = v4;
      int8x16_t v14 = v4;
      int v15 = int64;
      [v9 performBlockWithPriority:v11 priority:int64];
    }

    else
    {
      id v10 = (void *)IMCreateInvocationFromXPCObjectWithProtocol(*(void *)(a1 + 40), v3, v4, 0LL);
      if (v10)
      {
        else {
          [v3 _enqueueInvocation:v10];
        }
      }

      CFRelease(v3);
    }

    goto LABEL_13;
  }

        int8x16_t v14 = 0;
        goto LABEL_14;
      }
    }
  }

  id v12 = 0LL;
LABEL_7:
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    id v21 = 67109378;
    id v22 = v10;
    id v23 = 2112;
    id v24 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "got control message: SuspendOTRNegotiationData (%uB) for %@",  (uint8_t *)&v21,  0x12u);
  }

  -[IDSUTunControlChannel suspendOTRNegotiation:](self, "suspendOTRNegotiation:", v12);
  int8x16_t v14 = 1;
LABEL_14:

  return v14;
}
}
  }

  return v7;
}

  id v20 = (void *)objc_claimAutoreleasedReturnValue([v5 service]);
  id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 pushTopic]);
  id v22 = [v21 isEqualToIgnoringCase:@"com.apple.private.alloy.accountssync"];

  if (v22)
  {
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog accountsDebugging](&OBJC_CLASS___IMRGLog, "accountsDebugging"));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v23) = 0;
      uint64_t v11 = "Broadcaster for account added";
      goto LABEL_16;
    }

    goto LABEL_17;
  }
  }

  else
  {
    id v8 = v4;
  }

  return v8;
}
}

  id v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "service", v58, v59));
  __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([v30 identifier]);
  int v32 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithPrefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithPrefixedURI:withServiceLoggingHint:",  v27,  v31));

LABEL_14:
  return v32;
}
  }

  else
  {
    id v6 = 0LL;
  }

  return v6;
}

      if ([*(id *)(a1 + 32) _performFallbackIfNecessary:v12])
      {
        if (v9) {
          -[NSMutableIndexSet addIndex:](v9, "addIndex:", (char *)v11 + v31);
        }
        else {
          id v9 = -[NSMutableIndexSet initWithIndex:]( objc_alloc(&OBJC_CLASS___NSMutableIndexSet),  "initWithIndex:",  (char *)v11 + v31);
        }
      }

      else if (!v32)
      {
        [v12 timeEnqueued];
        int v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:"));
        __int16 v17 = v13;

        id v30 = v17;
      }

  return v6;
}

  id v23 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount service](self, "service"));
  id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 identifier]);
  if ([v24 isEqualToString:v17])
  {
    id v25 = (void *)objc_claimAutoreleasedReturnValue([v4 command]);
    id v26 = [v25 isEqualToNumber:&off_100947968];

    if ((v26 & 1) != 0)
    {
LABEL_15:
      __int16 v27 = 0;
      goto LABEL_16;
    }
  }

  else
  {
  }

  id v29 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount accountController](self, "accountController"));
  id v30 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount service](self, "service"));
  v57 = (void *)objc_claimAutoreleasedReturnValue([v29 accountsOnService:v30]);

  if ([v57 count] == (id)1)
  {
    __int128 v31 = OSLogHandleForIDSCategory("IDSDaemon");
    int v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Only 1 account exists on this service, We will need to proxy this and include the default paired device as a destination",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v33) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Only 1 account exists on this service, We will need to proxy this and include the default paired device as a destination");
    }
    __int16 v27 = 1;
  }

  else
  {
    v65 = 0u;
    id v66 = 0u;
    __int128 v63 = 0u;
    __int128 v64 = 0u;
    id obj = v57;
    v55 = [obj countByEnumeratingWithState:&v63 objects:v72 count:16];
    if (v55)
    {
      id v53 = *(void *)v64;
      id v52 = IDSDevicePropertyIdentities;
      __int16 v34 = IDSDevicePropertyIdentitiesURI;
      do
      {
        for (i = 0LL; i != v55; i = (char *)i + 1)
        {
          if (*(void *)v64 != v53) {
            objc_enumerationMutation(obj);
          }
          v58 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*((void *)&v63 + 1) + 8 * (void)i),  "defaultPairedDependentRegistration",  v50,  v51));
          if (v58)
          {
            uint64_t v35 = OSLogHandleForIDSCategory("IDSDaemon");
            __int128 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
            if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              v68 = v58;
              _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "Found Default paired device %@ ",  buf,  0xCu);
            }

            if (os_log_shim_legacy_logging_enabled(v37)
              && _IDSShouldLog(0LL, @"IDSDaemon"))
            {
              id v50 = v58;
              _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Found Default paired device %@ ");
            }

            uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "objectForKey:", v52, v50));
            __int128 v61 = 0u;
            __int128 v62 = 0u;
            uint64_t v59 = 0u;
            id v60 = 0u;
            id v39 = v38;
            uint64_t v40 = [v39 countByEnumeratingWithState:&v59 objects:v71 count:16];
            if (v40)
            {
              v41 = *(void *)v60;
              while (2)
              {
                for (j = 0LL; j != v40; j = (char *)j + 1)
                {
                  if (*(void *)v60 != v41) {
                    objc_enumerationMutation(v39);
                  }
                  v43 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*((void *)&v59 + 1) + 8 * (void)j),  "_stringForKey:",  v34,  v50));
                  id v44 = OSLogHandleForIDSCategory("IDSDaemon");
                  uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
                  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 138412546;
                    v68 = v43;
                    v69 = 2112;
                    uint64_t v70 = v5;
                    _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "Comparing %@  To %@ ",  buf,  0x16u);
                  }

                  if (os_log_shim_legacy_logging_enabled(v46)
                    && _IDSShouldLog(0LL, @"IDSDaemon"))
                  {
                    id v50 = v43;
                    id v51 = v5;
                    _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Comparing %@  To %@ ");
                  }

                  if (_FTAreIDsEquivalent(v43, v5))
                  {
                    id v47 = OSLogHandleForIDSCategory("IDSDaemon");
                    id v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
                    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "These ID's are the same, We will not be proxying this message",  buf,  2u);
                    }

                    if (os_log_shim_legacy_logging_enabled(v49)
                      && _IDSShouldLog(0LL, @"IDSDaemon"))
                    {
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"These ID's are the same, We will not be proxying this message");
                    }

                    __int16 v27 = 0;
                    goto LABEL_60;
                  }
                }

                uint64_t v40 = [v39 countByEnumeratingWithState:&v59 objects:v71 count:16];
                if (v40) {
                  continue;
                }
                break;
              }
            }
          }
        }

        v55 = [obj countByEnumeratingWithState:&v63 objects:v72 count:16];
        __int16 v27 = 1;
      }

      while (v55);
    }

    else
    {
      __int16 v27 = 1;
    }

    CSDBSqliteStatementReset(v6);
    if (v7) {
      CFRelease(v7);
    }
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
  }

    CSDBSqliteStatementReset(v6);
    if (v7) {
      CFRelease(v7);
    }
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
  }

    CSDBSqliteStatementReset(v6);
    if (v7) {
      CFRelease(v7);
    }
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
  }

          id v12 = 1;
          goto LABEL_14;
        }

        uint64_t v13 = OSLogHandleForIDSCategory("Warning");
        int8x16_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          int v15 = (void *)objc_claimAutoreleasedReturnValue([v5 accountGUID]);
          *(_DWORD *)buf = 138412290;
          id v49 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Found stored outgoing message from account with guid %@ which no longer exists or is not local type.",  buf,  0xCu);
        }

        if (os_log_shim_legacy_logging_enabled(v16))
        {
          __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([v5 accountGUID]);
          _IDSWarnV( @"IDSFoundation",  @"Found stored outgoing message from account with guid %@ which no longer exists or is not local type.");

          int v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "accountGUID", v31));
          _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Found stored outgoing message from account with guid %@ which no longer exists or is not local type.");

          id v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "accountGUID", v32));
          _IDSLogTransport( @"Warning",  @"IDS",  @"Found stored outgoing message from account with guid %@ which no longer exists or is not local type.");
          goto LABEL_13;
        }

        id v12 = 1;
LABEL_15:
        __int16 v17 = *(void *)(v36 + 40);
        if (v17)
        {
          id v18 = (void *)objc_claimAutoreleasedReturnValue([v9 service]);
          id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 allowedTrafficClasses]);
          LOBYTE(v17) = _IDSIsTrafficAllowed(v17, v19);
        }

        if (v12 && (v17 & 1) == 0)
        {
          id v20 = (void *)objc_claimAutoreleasedReturnValue([v9 service]);
          id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 pushTopic]);

          if (v21)
          {
            id v22 = (void *)objc_claimAutoreleasedReturnValue([v9 service]);
            id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 pushTopic]);
            id v24 = (void *)objc_claimAutoreleasedReturnValue(+[IMPair pairWithFirst:second:](&OBJC_CLASS___IMPair, "pairWithFirst:second:", v23, v5));

            -[NSMutableArray addObject:](v34, "addObject:", v24);
          }

          else
          {
            -[NSMutableArray addObject:](v33, "addObject:", v5);
          }
        }

        objc_autoreleasePoolPop(v6);
      }

      unint64_t v2 = [obj countByEnumeratingWithState:&v44 objects:v50 count:16];
    }

    while (v2);
  }

  id v25 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472LL;
  v37[2] = sub_100372ED8;
  v37[3] = &unk_1008FC5F0;
  id v26 = *(void *)(v36 + 48);
  __int16 v27 = *(void **)(v36 + 56);
  v43 = *(void *)(v36 + 72);
  uint64_t v38 = v33;
  id v39 = v34;
  uint64_t v40 = v26;
  v41 = v27;
  uint64_t v42 = *(id *)(v36 + 64);
  id v28 = *(void *)(v36 + 80);
  id v29 = v34;
  id v30 = v33;
  [v25 performBlockWithPriority:v37 priority:v28];
}
}

  return v13;
}
}

    uint64_t result = sub_1003FFE38(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    id v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  id v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }

  sub_1004335E0(v3);
  return (void *)v2;
}

    uint64_t v3 = v53;
    uint64_t v11 = v55;
    id v10 = v56;
    id v12 = v57;
  }

  __break(1u);
  return result;
}

  sub_100488A3C(v3);
  return (void *)v2;
}

    uint64_t v3 = v53;
    uint64_t v11 = v55;
    id v10 = v56;
    id v12 = v57;
  }

  sub_10049430C(v3);
  return (void *)v2;
}

    uint64_t v3 = v53;
    uint64_t v11 = v55;
    id v10 = v56;
    id v12 = v57;
  }

  __break(1u);
  return result;
}

void sub_10002CC28(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v4 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "IDSRegistrationKeyManager notified of time change",  v4,  2u);
    }

    [a2 _retryGenerationIfNeeded];
  }

id sub_10002CEC4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _retryGenerationIfNeeded];
}

LABEL_18:
      id v19 = 0;
LABEL_35:

      goto LABEL_36;
    }

    if (v35)
    {
      *(_DWORD *)buf = 138412290;
      id v60 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "generatedIdentityContainer is different from the registered and unregistered container -- has changes -- Updatin g unregistered container {generatedIdentityContainer: %@}",  buf,  0xCu);
    }

    __int128 v36 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
    [v36 setUnregisteredIdentityContainer:v23];

    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v37 unregisteredIdentityContainer]);

    if (v38)
    {
      id v39 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v39 productBuildVersion]);
      v41 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
      [v41 setBuildOfUnregisteredIdentityGeneration:v40];

      uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      {
        v43 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
        id v44 = (void *)objc_claimAutoreleasedReturnValue([v43 buildOfUnregisteredIdentityGeneration]);
        *(_DWORD *)buf = 138412290;
        id v60 = v44;
        _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "Generated a new unregistered identity {build: %@}",  buf,  0xCu);
      }
    }

    else
    {
      uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v45, OS_LOG_TYPE_FAULT)) {
        sub_10069522C();
      }
    }

    +[IDSMessageMetricReporter noteKeyGenerationForMetric]( &OBJC_CLASS___IDSMessageMetricReporter,  "noteKeyGenerationForMetric");
    id v46 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
    id v47 = (void *)objc_claimAutoreleasedReturnValue([v46 unregisteredIdentityContainer]);
    id v48 = objc_claimAutoreleasedReturnValue([v47 ngmFullDeviceIdentity]);
    if (v48)
    {
      id v49 = (void *)v48;
      id v50 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
      id v51 = (void *)objc_claimAutoreleasedReturnValue([v50 unregisteredIdentityContainer]);
      id v52 = (void *)objc_claimAutoreleasedReturnValue([v51 ngmVersion]);

      if (v52)
      {
        self->_generationRetryCount = 0LL;
LABEL_34:
        -[IDSRegistrationKeyManager _save](self, "_save");
        id v19 = 1;
        id v20 = v55;
        goto LABEL_35;
      }
    }

    else
    {
    }

    ++self->_generationRetryCount;
    -[IDSRegistrationKeyManager _retryGenerationAfterDelay](self, "_retryGenerationAfterDelay");
    goto LABEL_34;
  }

  id v9 = (void *)v8;
  id v10 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 unregisteredIdentityContainer]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 ngmVersion]);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager identityDataSource](self, "identityDataSource"));
  int8x16_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v13 ngmVersion]));
  int v15 = [v12 isEqualToNumber:v14];

  if ((v15 & 1) == 0) {
    goto LABEL_7;
  }
  id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v17 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 unregisteredIdentityContainer]);
    *(_DWORD *)buf = 138412290;
    id v60 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Called _generateUnregisteredIdentityWithExistingLegacyIdentity but we have a valid unregisteredIdentity -- no chan ged {unregisteredIdentityContainer: %@}",  buf,  0xCu);
  }

  id v19 = 0;
  id v20 = v54;
LABEL_36:

  return v19;
}

      CSDBSqliteStatementReset(v6);
      if (v9) {
        CFRelease(v9);
      }
    }
  }

  id v18 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0LL;
  }

    encryptionBlock = 0LL;
    id v8 = 0LL;
    id v20 = 0LL;
    id v9 = 0LL;
    id v7 = 0LL;
    __int16 v27 = 0;
    goto LABEL_53;
  }

  id v7 = v3;
  if ([v7 command] != 24)
  {
    id v18 = (NSData *)objc_claimAutoreleasedReturnValue([v7 underlyingData]);
    id v8 = 0LL;
    id v19 = 0;
    id v20 = 0LL;
    id v9 = 0LL;
    id v21 = self->_outgoingData;
    self->_outgoingData = v18;
LABEL_24:

    LODWORD(v52) = 0;
    goto LABEL_25;
  }

  id v8 = v7;
  id v50 = [v8 protectionClass];
  id v49 = [v8 priority];
  id v47 = [v8 streamID];
  id v53 = [v8 sequenceNumber];
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 topic]);
  id v10 = self->_connectionID;
  if (v10) {
    uint64_t v11 = sub_100265688(v49, v50, (uint64_t)v10);
  }
  else {
    uint64_t v11 = sub_100265648(v49, v50);
  }
  id v20 = (void *)objc_claimAutoreleasedReturnValue(v11);
  if (![v8 shouldEncrypt])
  {
    __int128 v31 = (NSData *)objc_claimAutoreleasedReturnValue([v8 underlyingData]);
    id v21 = self->_outgoingData;
    self->_outgoingData = v31;
    id v19 = v53;
    goto LABEL_24;
  }

  id v28 = (uint64_t (**)(id, id, void *))self->_encryptionBlock;
  if (v28)
  {
    uint64_t v13 = (id)objc_claimAutoreleasedReturnValue([v8 data]);
    id v29 = v28[2](v28, v13, v20);
    encryptionBlock = (uint64_t (**)(id, void *, void *))objc_claimAutoreleasedReturnValue(v29);
    id v51 = 0;
    id v52 = 1LL;
    id v7 = v8;
    id v30 = 1;
LABEL_40:

    kdebug_trace(722010292LL, v53, 0LL, 0LL, 0LL);
    if (encryptionBlock)
    {
      LODWORD(v46) = v53;
      __int128 v36 = [[IDSSocketPairOTRMessage alloc] initWithVersion:1 encrypted:v52 shouldEncrypt:v52 protectionClass:v50 streamID:v47 priority:v49 sequenceNumber:v46 data:encryptionBlock];
      uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v8 topic]);
      [v36 setTopic:v37];

      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v8 context]);
      [v36 setContext:v38];

      id v39 = (NSData *)objc_claimAutoreleasedReturnValue([v36 underlyingData]);
      uint64_t v40 = self->_outgoingData;
      self->_outgoingData = v39;
    }

    goto LABEL_42;
  }

  LODWORD(v52) = 1;
  id v19 = v53;
LABEL_25:
  id v53 = v19;
  kdebug_trace(722010292LL, v19, 0LL, 0LL, 0LL);
  encryptionBlock = 0LL;
  id v51 = 0;
  id v30 = 1;
LABEL_42:
  if (v8 && v9)
  {
    v41 = OSLogHandleForTransportCategory("SPConnection");
    uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138413314;
      uint64_t v56 = v20;
      v57 = 1024;
      v58 = v52;
      uint64_t v59 = 1024;
      id v60 = v53;
      __int128 v61 = 1024;
      __int128 v62 = v51;
      __int128 v63 = 2114;
      __int128 v64 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "Send OTR message for %@ E:%u SN:%u FI:%u T:%{public}@.",  buf,  0x28u);
    }

    id v44 = os_log_shim_legacy_logging_enabled(v43);
    if ((_DWORD)v44)
    {
      if (_IDSShouldLogTransport(v44))
      {
        _IDSLogTransport( @"SPConnection",  @"IDS",  @"Send OTR message for %@ E:%u SN:%u FI:%u T:%{public}@.");
        if (_IDSShouldLog(0LL, @"SPConnection")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"SPConnection",  @"Send OTR message for %@ E:%u SN:%u FI:%u T:%{public}@.");
        }
      }
    }
  }

  __int16 v27 = v30 != 0;
  if (v7
    && (unint64_t)-[NSMutableArray count](self->_outgoingMessageArray, "count") <= self->_inFlightMessageCountLowWaterMark)
  {
    v54[0] = _NSConcreteStackBlock;
    v54[1] = 3221225472LL;
    v54[2] = sub_100047E04;
    v54[3] = &unk_1008F79C0;
    v54[4] = self;
    -[IDSSocketPairConnection _callDelegateWithBlock:](self, "_callDelegateWithBlock:", v54);
  }

            continue;
          }

          *(double *)buf = v3;
          -[IDSHeartbeatCenter _registration:needsRenewal:](self, "_registration:needsRenewal:", v11, buf);
        }
      }

      id v7 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v4,  "countByEnumeratingWithState:objects:count:",  &v19,  v24,  16LL);
      if (!v7) {
        goto LABEL_23;
      }
    }
  }

  id v9 = v3;
LABEL_23:

  return fmax(v9, 1.0);
}

  if (v15 && v13)
  {
    ((void (*)(void *, id, void))v13[2])(v13, v15, 0LL);
    goto LABEL_21;
  }

  id v16 = [*(id *)(a1 + 32) avoidMainQueue];
  if ((_DWORD)v16)
  {
    id v18 = OSLogHandleForIDSCategory("Encryption");
    id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      id v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remoteURI]);
      int v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localURI]);
      id v20 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) service]);
      *(_DWORD *)buf = 138412802;
      uint64_t v56 = v33;
      v57 = 2112;
      v58 = v32;
      uint64_t v59 = 2112;
      id v60 = v20;
      __int128 v31 = (void *)v20;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Need to query for signing verification but should avoid main -- failing {remoteURI: %@, localURI: %@, service: %@}",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v21))
    {
      id v23 = *(void **)(a1 + 32);
      id v22 = (id *)(a1 + 32);
      id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 remoteURI]);
      id v29 = (void *)objc_claimAutoreleasedReturnValue([*v22 localURI]);
      id v30 = (void *)objc_claimAutoreleasedReturnValue([*v22 service]);
      id v28 = v24;
      _IDSLogEventV( @"IDSFoundation",  @"Encryption",  @"Need to query for signing verification but should avoid main -- failing {remoteURI: %@, localURI: %@, service: %@}");
    }

    id v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSSigningErrorDomain,  6LL,  0LL,  v28,  v29,  v30));
    ((void (*)(void *, void, void *))v3[2])(v3, 0LL, v25);
  }

  else
  {
    id v26 = im_primary_queue(v16, v17);
    __int16 v27 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v26);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10006FAB4;
    block[3] = &unk_1008F86C0;
    block[4] = *(void *)(a1 + 32);
    uint64_t v42 = v3;
    v41 = *(id *)(a1 + 56);
    v43 = v9;
    id v44 = v13;
    dispatch_async(v27, block);
  }

    id v18 = 0LL;
    goto LABEL_26;
  }

  __int16 v17 = (void *)objc_claimAutoreleasedReturnValue( -[IDSPublicKeyStorage publicDeviceIdentityContainerForDeviceID:]( self->_publicKeyStorage,  "publicDeviceIdentityContainerForDeviceID:",  self->_deviceID));
  if (v17)
  {
    id v18 = (void *)objc_claimAutoreleasedReturnValue( -[IDSMPFullDeviceIdentityContainerEncrypter legacyEncryptData:withEncryptedAttributes:withPublicDeviceIdentityContainer:error:]( self->_fullDeviceIdentityContainerEncrypter,  "legacyEncryptData:withEncryptedAttributes:withPublicDeviceIdentityContainer:error:",  v8,  v9,  v17,  a5));
  }

  else
  {
    id v22 = OSLogHandleForIDSCategory("Warning");
    id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      id v24 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeviceIDEncrypter deviceID](self, "deviceID"));
      *(_DWORD *)buf = 138412290;
      __int128 v31 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "Missing identity to encrypt with {deviceID: %@}",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v25))
    {
      __int16 v27 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeviceIDEncrypter deviceID](self, "deviceID"));
      _IDSWarnV(@"IDSFoundation", @"Missing identity to encrypt with {deviceID: %@}");

      id v28 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeviceIDEncrypter deviceID](self, "deviceID", v27));
      _IDSLogV(0LL, @"IDSFoundation", @"Warning", @"Missing identity to encrypt with {deviceID: %@}");

      id v29 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeviceIDEncrypter deviceID](self, "deviceID", v28));
      _IDSLogTransport(@"Warning", @"IDS", @"Missing identity to encrypt with {deviceID: %@}");
    }

    id v18 = 0LL;
    if (a5) {
      *a5 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSEncryptionErrorDomain,  4LL,  0LL));
    }
  }

LABEL_26:
  return v18;
}

        goto LABEL_19;
      }

    goto LABEL_19;
  }

  int8x16_t v14 = (void *)objc_claimAutoreleasedReturnValue([v3 launchDarwinNotification]);

  if (v14)
  {
    int v15 = OSLogHandleForTransportCategory("IDSDaemon");
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v3 launchDarwinNotification]);
      *(_DWORD *)buf = 138412546;
      id v25 = v17;
      id v26 = 2112;
      __int16 v27 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Broadcast: Broadcasting darwin notification %@ to awaken clients of %@.\n",  buf,  0x16u);
    }

    id v19 = os_log_shim_legacy_logging_enabled(v18);
    if ((_DWORD)v19 && _IDSShouldLogTransport(v19))
    {
      id v20 = (void *)objc_claimAutoreleasedReturnValue([v3 launchDarwinNotification]);
      id v23 = v4;
      _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Broadcast: Broadcasting darwin notification %@ to awaken clients of %@.\n");
    }

    id v7 = (_xpc_connection_s *) objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "launchDarwinNotification", v20, v23));
    notify_post((const char *)-[_xpc_connection_s UTF8String](v7, "UTF8String"));
    goto LABEL_18;
  }

  return v19;
}
}

    id v39 = -[NSUUID initWithUUIDString:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDString:", v11);
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue( -[IDSPairingManager _createRegistrationProperties:maxCompatibilityVersion:BTOutOfBandKey:supportsIPsecWithSPPLink:bluetoothMACAddress:]( self,  "_createRegistrationProperties:maxCompatibilityVersion:BTOutOfBandKey:supportsIPsecWithSPPLink:blue toothMACAddress:",  0LL,  0LL,  v12,  0LL,  0LL));
    [v40 setIsAltAccountPairing:a6 == 1];
    -[IDSPairingManager _networkRelayRegisterDeviceWithCBUUID:properties:shouldPairDirectlyOverIPsec:]( self,  "_networkRelayRegisterDeviceWithCBUUID:properties:shouldPairDirectlyOverIPsec:",  v39,  v40,  1LL);
    v41 = (void *)objc_claimAutoreleasedReturnValue(-[IDSPairingManager pairedDeviceRepository](self, "pairedDeviceRepository"));
    [v41 updatePairedDeviceWithCBUUID:v11 supportIPsec:1];

    uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(-[IDSPairingManager pairedDeviceRepository](self, "pairedDeviceRepository"));
    LOWORD(v52) = 10;
    objc_msgSend( v42,  "updatePairedDeviceWithCBUUID:deviceUniqueID:buildVersion:productVersion:productName:pairingProtocolVersion:minComp atibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:",  v11,  0,  0,  0,  0,  0,  0,  v52);

    goto LABEL_19;
  }

  __int16 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog NRPairing](&OBJC_CLASS___IMRGLog, "NRPairing"));
  if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT)) {
    sub_10069E428();
  }

  id v18 = 0;
LABEL_37:

  return v18;
}

  return v12;
}
    }
  }

  objc_autoreleasePoolPop(context);
  id v20 = -[NSMutableDictionary copy](v3, "copy");

  return v20;
}

    os_unfair_lock_unlock(p_lock);
  }

  else
  {
    uint64_t v13 = OSLogHandleForIDSCategory("Warning");
    int8x16_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v23 = @"SessionController";
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%@ - No instance ID provided to lookup session, bailing...",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v15))
    {
      _IDSWarnV(@"IDSFoundation", @"%@ - No instance ID provided to lookup session, bailing...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - No instance ID provided to lookup session, bailing...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - No instance ID provided to lookup session, bailing...");
    }

    id v7 = 0LL;
  }

  return v7;
}

  id v28 = IMGetDomainValueForKey(@"com.apple.ids", @"DisableRangeExtension");
  id v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
  id v30 = v29;
  if (v29 && [v29 BOOLValue] && !self->_doesDefaultDevicePreferInfraWiFi)
  {
    id v46 = OSLogHandleForTransportCategory("LinkManager");
    id v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "Skip wifi handshake due to disabled range extension via defaults.",  buf,  2u);
    }

    id v49 = os_log_shim_legacy_logging_enabled(v48);
    if ((_DWORD)v49)
    {
      if (_IDSShouldLogTransport(v49))
      {
        _IDSLogTransport( @"LinkManager",  @"IDS",  @"Skip wifi handshake due to disabled range extension via defaults.");
        if (_IDSShouldLog(0LL, @"LinkManager")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"LinkManager",  @"Skip wifi handshake due to disabled range extension via defaults.");
        }
      }
    }

    __int16 v27 = 0;
  }

  else
  {
    __int16 v27 = -[IDSLinkManager _startUDPLinkHandshakeForDefaultDevice:immediately:]( self,  "_startUDPLinkHandshakeForDefaultDevice:immediately:",  isKindOfClass & 1,  self->_doesDefaultDevicePreferInfraWiFi,  v50,  v51);
  }

  if (v25) {
    goto LABEL_23;
  }
LABEL_24:
  if ((v21 & 1) != 0)
  {
    __int128 v31 = 1LL;
  }

  else
  {
    int v32 = objc_opt_class(&OBJC_CLASS___IDSUDPLink, v24);
    if ((objc_opt_isKindOfClass(v7, v32) & 1) != 0)
    {
      __int128 v31 = 2LL;
    }

    else
    {
      __int16 v34 = objc_opt_class(&OBJC_CLASS___IDSGlobalLink, v33);
      if ((objc_opt_isKindOfClass(v7, v34) & 1) != 0) {
        __int128 v31 = (unint64_t)[v7 defaultLinkType];
      }
      else {
        __int128 v31 = 0LL;
      }
    }
  }

  if (self->_currentDefaultDeviceLinkType != v31)
  {
    uint64_t v35 = objc_claimAutoreleasedReturnValue([v7 linkTypeString]);
    if (v35) {
      __int128 v36 = (__CFString *)v35;
    }
    else {
      __int128 v36 = @"NoLink";
    }
    uint64_t v37 = OSLogHandleForTransportCategory("LinkManager");
    uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      currentDefaultDeviceLinkType = self->_currentDefaultDeviceLinkType;
      *(_DWORD *)buf = 134218498;
      id v53 = currentDefaultDeviceLinkType;
      v54 = 2048;
      v55 = v31;
      uint64_t v56 = 2112;
      v57 = v36;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "Link type changed from %lu to %lu, current link: %@",  buf,  0x20u);
    }

    v41 = os_log_shim_legacy_logging_enabled(v40);
    if ((_DWORD)v41)
    {
      if (_IDSShouldLogTransport(v41))
      {
        _IDSLogTransport( @"LinkManager",  @"IDS",  @"Link type changed from %lu to %lu, current link: %@");
        if (_IDSShouldLog(0LL, @"LinkManager")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"LinkManager",  @"Link type changed from %lu to %lu, current link: %@");
        }
      }
    }

    self->_currentDefaultDeviceLinkType = v31;
    if (v31 == 1)
    {
      -[IDSLinkManager disconnectGlobalLinkForDevice:isReinitiating:completionHandler:]( self,  "disconnectGlobalLinkForDevice:isReinitiating:completionHandler:",  v23,  0LL,  0LL);
      -[IDSLinkManager _clearWiFiAssociationPowerAssertion](self, "_clearWiFiAssociationPowerAssertion");
      -[IDSLinkManager _bringUpWiFi:](self, "_bringUpWiFi:", 0LL);
    }

    uint64_t v42 = objc_alloc(&OBJC_CLASS___NSDictionary);
    v43 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  self->_currentDefaultDeviceLinkType));
    id v44 = -[NSDictionary initWithObjectsAndKeys:](v42, "initWithObjectsAndKeys:", v43, @"IDSLinkType", 0LL);

    IDSPowerLogDictionary(@"IDS Local Link", v44);
    if (v31 == 2 && self->_doesDefaultDevicePreferInfraWiFi) {
      -[IDSLinkManager _subscribeToWRMForLinkRecommendation:](self, "_subscribeToWRMForLinkRecommendation:", 0LL);
    }
    else {
      -[IDSLinkManager _unsubscribeFromWRMForLinkRecommendation](self, "_unsubscribeFromWRMForLinkRecommendation");
    }
    uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(+[IDSWRMExchange sharedInstance](&OBJC_CLASS___IDSWRMExchange, "sharedInstance"));
    objc_msgSend( v45,  "handleActiveLinkChange:",  -[IDSLinkManager _getWRMLinkTypeFromIDSLinkType:]( self,  "_getWRMLinkTypeFromIDSLinkType:",  self->_currentDefaultDeviceLinkType));
  }
}
}

    id v33 = OSLogHandleForTransportCategory("QRAllocator");
    __int16 v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412802;
      __int128 v140 = v135;
      __int128 v141 = 2112;
      v142 = v26;
      v143 = 2112;
      v144 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Duplicated responses for sessionID: %@, %@, %@",  buf,  0x20u);
    }

    __int128 v36 = os_log_shim_legacy_logging_enabled(v35);
    if ((_DWORD)v36)
    {
      if (_IDSShouldLogTransport(v36))
      {
        __int128 v129 = v26;
        __int128 v130 = v9;
        __int128 v127 = v135;
        _IDSLogTransport(@"QRAllocator", @"IDS", @"Duplicated responses for sessionID: %@, %@, %@");
        if (_IDSShouldLog(0LL, @"QRAllocator"))
        {
          __int128 v129 = v26;
          __int128 v130 = v9;
          __int128 v127 = v135;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"Duplicated responses for sessionID: %@, %@, %@");
        }
      }
    }

    uint64_t v37 = kIDSQRAllocateKey_RecipientID;
    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", kIDSQRAllocateKey_RecipientID, v127, v129, v130));
    id v39 = [v38 unsignedLongLongValue];
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v26 objectForKeyedSubscript:v37]);
    LODWORD(v39) = v39 == [v40 unsignedLongLongValue];

    if ((_DWORD)v39)
    {
      v41 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:kIDSQRAllocateKey_RelayExpiryTimestamp]);
      __int128 v132 = v41;
      if (v41)
      {
        uint64_t v42 = OSLogHandleForTransportCategory("QRAllocator");
        v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Saving duplicate response!", buf, 2u);
        }

        uint64_t v45 = os_log_shim_legacy_logging_enabled(v44);
        if ((_DWORD)v45)
        {
          if (_IDSShouldLogTransport(v45))
          {
            _IDSLogTransport(@"QRAllocator", @"IDS", @"Saving duplicate response!");
          }
        }

        if (!self->_duplicateAllocateResponses)
        {
          CFMutableDictionaryRef Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
          duplicateAllocateResponses = self->_duplicateAllocateResponses;
          self->_duplicateAllocateResponses = Mutable;
        }

        groupIDToDuplicateResponseCleanupTimers = self->_groupIDToDuplicateResponseCleanupTimers;
        if (!groupIDToDuplicateResponseCleanupTimers)
        {
          id v49 = (NSMutableDictionary *)CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
          id v50 = self->_groupIDToDuplicateResponseCleanupTimers;
          self->_groupIDToDuplicateResponseCleanupTimers = v49;

          groupIDToDuplicateResponseCleanupTimers = self->_groupIDToDuplicateResponseCleanupTimers;
        }

        id v51 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKey:]( groupIDToDuplicateResponseCleanupTimers,  "objectForKey:",  v13));
        id v52 = v51;
        if (v51) {
          dispatch_source_cancel(v51);
        }
        -[NSMutableDictionary setObject:forKey:](self->_duplicateAllocateResponses, "setObject:forKey:", v9, v13);
        id v53 = (char *)[v132 unsignedLongLongValue];
        v54 = time(0LL);
        uint64_t v56 = im_primary_queue(v54, v55);
        v57 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v56);
        source = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, v57);

        v58 = dispatch_time(0LL, 1000000LL * (void)&v53[-1000 * v54 - 10]);
        dispatch_source_set_timer(source, v58, 0xFFFFFFFFFFFFFFFFLL, 0x5F5E100uLL);
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472LL;
        handler[2] = sub_10028F830;
        handler[3] = &unk_1008F5F80;
        handler[4] = self;
        uint64_t v59 = v13;
        __int128 v137 = v59;
        dispatch_source_set_event_handler(source, handler);
        dispatch_resume(source);
        id v60 = OSLogHandleForTransportCategory("QRAllocator");
        __int128 v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEFAULT,  "Duplicate response purge timer started!",  buf,  2u);
        }

        __int128 v63 = os_log_shim_legacy_logging_enabled(v62);
        if ((_DWORD)v63)
        {
          if (_IDSShouldLogTransport(v63))
          {
            _IDSLogTransport(@"QRAllocator", @"IDS", @"Duplicate response purge timer started!");
            if (_IDSShouldLog(0LL, @"QRAllocator")) {
              _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"Duplicate response purge timer started!");
            }
          }
        }

        -[NSMutableDictionary setObject:forKey:]( self->_groupIDToDuplicateResponseCleanupTimers,  "setObject:forKey:",  source,  v59);

LABEL_90:
        v41 = v132;
      }
    }

    else
    {
      if (!v133) {
        goto LABEL_92;
      }
      v41 = (void *)objc_claimAutoreleasedReturnValue([v133 fromURI]);
      __int128 v132 = v41;
      if (v41)
      {
        source = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([v41 prefixedURI]);
        uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue( -[IDSQuickRelayAllocator _getURIForRecipientFromResponse:]( self,  "_getURIForRecipientFromResponse:",  v9));
        if (-[dispatch_source_s isEqualToString:](source, "isEqualToString:", v84))
        {
          v85 = (void *)objc_claimAutoreleasedReturnValue( -[IDSQuickRelayAllocator _mergeParticipantID2PushTokenMapping:sourceResponse:mappingChange:]( self,  "_mergeParticipantID2PushTokenMapping:sourceResponse:mappingChange:",  v9,  v26,  &v138));

          id v9 = v85;
          *a5 = v9;
          -[IDSQuickRelayAllocator _setResponseForQRGroupID:groupID:]( self,  "_setResponseForQRGroupID:groupID:",  v9,  v13);
          v86 = OSLogHandleForTransportCategory("QRAllocator");
          v87 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
          if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            __int128 v140 = v9;
            _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "message added to cache: %@", buf, 0xCu);
          }

          v89 = os_log_shim_legacy_logging_enabled(v88);
          if ((_DWORD)v89)
          {
            if (_IDSShouldLogTransport(v89))
            {
              _IDSLogTransport(@"QRAllocator", @"IDS", @"message added to cache: %@");
            }
          }

          if (v138)
          {
            -[IDSQuickRelayAllocator _notifyParticipantID2PushTokenMappingChange:]( self,  "_notifyParticipantID2PushTokenMappingChange:",  v9);
            -[IDSQuickRelayAllocator _notifyURIToParticipantIDMappingChange:]( self,  "_notifyURIToParticipantIDMappingChange:",  v9);
          }

          id v23 = 1;
          goto LABEL_147;
        }

        goto LABEL_90;
      }
    }

LABEL_92:
    uint64_t v90 = kIDSQRAllocateKey_QRConnectStatus;
    v91 = (void *)objc_claimAutoreleasedReturnValue([v26 objectForKey:kIDSQRAllocateKey_QRConnectStatus]);
    uint64_t v93 = objc_opt_class(&OBJC_CLASS___NSString, v92);
    if ((objc_opt_isKindOfClass(v91, v93) & 1) != 0)
    {
      uint64_t v94 = (void *)objc_claimAutoreleasedReturnValue([v26 objectForKey:v90]);
      v95 = objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v94));
    }

    else
    {
      uint64_t v94 = (void *)objc_claimAutoreleasedReturnValue([v26 objectForKey:v90]);
      uint64_t v97 = objc_opt_class(&OBJC_CLASS___NSData, v96);
      if ((objc_opt_isKindOfClass(v94, v97) & 1) == 0)
      {
        uint64_t v98 = 0LL;
LABEL_98:

        if (v98)
        {
          v99 = OSLogHandleForTransportCategory("QRAllocator");
          uint64_t v100 = (os_log_s *)objc_claimAutoreleasedReturnValue(v99);
          if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            __int128 v140 = v98;
            _os_log_impl( (void *)&_mh_execute_header,  v100,  OS_LOG_TYPE_DEFAULT,  "cached allocation response has issue: %@",  buf,  0xCu);
          }

          v102 = os_log_shim_legacy_logging_enabled(v101);
          if ((_DWORD)v102)
          {
            if (_IDSShouldLogTransport(v102))
            {
              __int128 v128 = v98;
              _IDSLogTransport(@"QRAllocator", @"IDS", @"cached allocation response has issue: %@");
              if (_IDSShouldLog(0LL, @"QRAllocator"))
              {
                __int128 v128 = v98;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"cached allocation response has issue: %@");
              }
            }
          }

          unsigned int v103 = (void *)objc_claimAutoreleasedReturnValue( -[IDSQuickRelayAllocator _mergeParticipantID2PushTokenMapping:sourceResponse:mappingChange:]( self,  "_mergeParticipantID2PushTokenMapping:sourceResponse:mappingChange:",  v9,  v26,  &v138,  v128));

          id v9 = v103;
          *a5 = v9;
          -[IDSQuickRelayAllocator _setResponseForQRGroupID:groupID:]( self,  "_setResponseForQRGroupID:groupID:",  v9,  v13);
          v104 = OSLogHandleForTransportCategory("QRAllocator");
          v105 = (os_log_s *)objc_claimAutoreleasedReturnValue(v104);
          if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            __int128 v140 = v9;
            _os_log_impl( (void *)&_mh_execute_header,  v105,  OS_LOG_TYPE_DEFAULT,  "message added to cache: %@",  buf,  0xCu);
          }

          v107 = os_log_shim_legacy_logging_enabled(v106);
          if ((_DWORD)v107)
          {
            if (_IDSShouldLogTransport(v107))
            {
              _IDSLogTransport(@"QRAllocator", @"IDS", @"message added to cache: %@");
            }
          }

          id v23 = 1;
          goto LABEL_146;
        }

        v108 = (void *)objc_claimAutoreleasedReturnValue( -[IDSQuickRelayAllocator _mergeParticipantID2PushTokenMapping:sourceResponse:mappingChange:]( self,  "_mergeParticipantID2PushTokenMapping:sourceResponse:mappingChange:",  v26,  v9,  &v138));
        if (v108 != v26) {
          -[IDSQuickRelayAllocator _setResponseForQRGroupID:groupID:]( self,  "_setResponseForQRGroupID:groupID:",  v108,  v13);
        }
        if (v138)
        {
          -[IDSQuickRelayAllocator _notifyParticipantID2PushTokenMappingChange:]( self,  "_notifyParticipantID2PushTokenMappingChange:",  v108);
          -[IDSQuickRelayAllocator _notifyURIToParticipantIDMappingChange:]( self,  "_notifyURIToParticipantIDMappingChange:",  v108);
        }

        v109 = (void *)objc_claimAutoreleasedReturnValue([v134 objectForKey:kIDSQRAllocateKey_IDSSessionID]);
        if (v109)
        {
          if (v133)
          {
            if ([v133 shouldConnectToQRServer])
            {
              uint64_t v110 = OSLogHandleForTransportCategory("QRAllocator");
              id v111 = (os_log_s *)objc_claimAutoreleasedReturnValue(v110);
              if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, "use duplicated response", buf, 2u);
              }

              v113 = os_log_shim_legacy_logging_enabled(v112);
              if ((_DWORD)v113)
              {
                if (_IDSShouldLogTransport(v113))
                {
                  _IDSLogTransport(@"QRAllocator", @"IDS", @"use duplicated response");
                }
              }

              id v23 = 1;
              goto LABEL_145;
            }

            id v122 = OSLogHandleForTransportCategory("QRAllocator");
            uint64_t v123 = (os_log_s *)objc_claimAutoreleasedReturnValue(v122);
            if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v123,  OS_LOG_TYPE_DEFAULT,  "ignore duplicated response",  buf,  2u);
            }

            __int128 v125 = os_log_shim_legacy_logging_enabled(v124);
            if ((_DWORD)v125)
            {
              if (_IDSShouldLogTransport(v125))
              {
                _IDSLogTransport(@"QRAllocator", @"IDS", @"ignore duplicated response");
              }
            }
          }

          else
          {
            v118 = OSLogHandleForTransportCategory("QRAllocator");
            v119 = (os_log_s *)objc_claimAutoreleasedReturnValue(v118);
            if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              __int128 v140 = v109;
              _os_log_impl( (void *)&_mh_execute_header,  v119,  OS_LOG_TYPE_DEFAULT,  "failed to find IDSDSession object for %@",  buf,  0xCu);
            }

            id v121 = os_log_shim_legacy_logging_enabled(v120);
            if ((_DWORD)v121)
            {
              if (_IDSShouldLogTransport(v121))
              {
                _IDSLogTransport(@"QRAllocator", @"IDS", @"failed to find IDSDSession object for %@");
                if (_IDSShouldLog(0LL, @"QRAllocator")) {
                  _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"failed to find IDSDSession object for %@");
                }
              }
            }
          }
        }

        else
        {
          id v114 = OSLogHandleForTransportCategory("QRAllocator");
          uint64_t v115 = (os_log_s *)objc_claimAutoreleasedReturnValue(v114);
          if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            __int128 v140 = v134;
            _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEFAULT, "no IDSDSession ID in %@", buf, 0xCu);
          }

          v117 = os_log_shim_legacy_logging_enabled(v116);
          if ((_DWORD)v117)
          {
            if (_IDSShouldLogTransport(v117))
            {
              _IDSLogTransport(@"QRAllocator", @"IDS", @"no IDSDSession ID in %@");
            }
          }
        }

        id v23 = 0;
LABEL_145:

LABEL_146:
LABEL_147:

LABEL_148:
        goto LABEL_149;
      }

      v95 = objc_claimAutoreleasedReturnValue([v26 objectForKey:v90]);
    }

    uint64_t v98 = (void *)v95;
    goto LABEL_98;
  }

  id v19 = OSLogHandleForTransportCategory("QRAllocator");
  id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    __int128 v140 = v9;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "No groupID in %@", buf, 0xCu);
  }

  id v22 = os_log_shim_legacy_logging_enabled(v21);
  if ((_DWORD)v22)
  {
    if (_IDSShouldLogTransport(v22))
    {
      _IDSLogTransport(@"QRAllocator", @"IDS", @"No groupID in %@");
    }
  }

  id v23 = 0;
LABEL_149:

  return v23;
}

          id v8 = 0;
          goto LABEL_19;
        }
      }
    }
  }

  id v6 = (void *)v7;
LABEL_12:
  id v8 = 0;
LABEL_13:

LABEL_19:
  return v8;
}
}
        }

        id v29 = [obj countByEnumeratingWithState:&v34 objects:v39 count:16];
      }

      while (v29);
    }

    else
    {
      __int16 v27 = 0;
    }

    id v7 = v25;
    id v23 = v27;
  }

  else
  {
    id v23 = 0;
  }

  return v23 & 1;
}

  return (char)v9;
}

    goto LABEL_19;
  }

  os_unfair_lock_unlock(p_lock);
  id WeakRetained = (id)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
  if (os_log_type_enabled((os_log_t)WeakRetained, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v23 = self;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)WeakRetained,  OS_LOG_TYPE_DEFAULT,  "writePacketBuffer called but invalidated - %@",  buf,  0xCu);
  }

LABEL_19:
        goto LABEL_20;
      }
    }

    else
    {
    }

    id v18 = -[IDSTemporaryPhoneUser initWithPhoneUser:]( objc_alloc(&OBJC_CLASS___IDSTemporaryPhoneUser),  "initWithPhoneUser:",  v11);
    id v24 = -[IDSTemporaryPhoneUserCredential initWithPhoneAuthenticationCertificate:]( objc_alloc(&OBJC_CLASS___IDSTemporaryPhoneUserCredential),  "initWithPhoneAuthenticationCertificate:",  v10);
    id v25 = -[IDSTemporaryPhoneUserAddTransaction initWithUser:credential:]( objc_alloc(&OBJC_CLASS___IDSTemporaryPhoneUserAddTransaction),  "initWithUser:credential:",  v18,  v24);
    id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      id v28 = 138412290;
      id v29 = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Phone user removed. Adding transaction %@",  (uint8_t *)&v28,  0xCu);
    }

    __int16 v27 = (void *)objc_claimAutoreleasedReturnValue(-[IDSTemporaryPhoneUserSynchronizer transactionQueue](self, "transactionQueue"));
    [v27 appendItem:v25];

    [v8 reloadUsersForRealm:2];
    goto LABEL_18;
  }

  id v6 = v17;
LABEL_19:
  id v10 = (v16 - 1) & v16;
  for (i = __clz(__rbit64(v16)) + (v6 << 6); ; i = v13 | (v6 << 6))
  {
    id v18 = *(void *)(*(void *)(a3 + 56) + 8 * i);
    id v22 = v18;
    swift_retain(v18);
    id v19 = v5(&v22);
    if (v3) {
      break;
    }
    if ((v19 & 1) != 0)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v11 = v23[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      id v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v18);
      uint64_t result = specialized ContiguousArray._endMutation()(v12);
      if (!v10) {
        goto LABEL_7;
      }
    }

    else
    {
      uint64_t result = swift_release(v18);
      if (!v10) {
        goto LABEL_7;
      }
    }

      __break(1u);
      goto LABEL_19;
    }

    __break(1u);
    goto LABEL_18;
  }

  if ((a3 & 1) == 0)
  {
LABEL_20:
    __break(1u);
    return;
  }

  if (a4 < 0) {
    id v7 = a4;
  }
  else {
    id v7 = a4 & 0xFFFFFFFFFFFFFF8LL;
  }
  id v8 = __CocoaDictionary.key(at:)(a1, a2, v7);
  id v20 = v8;
  id v9 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
  swift_unknownObjectRetain(v8, v10);
  swift_dynamicCast(&v21, &v20, (char *)&type metadata for Swift.AnyObject + 8, v9, 7LL);
  swift_unknownObjectRelease(v8, v11);
}

    sub_1003F6050((uint64_t)v17, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    goto LABEL_58;
  }

void sub_10002D864(uint64_t a1)
{
  unint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) config]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 unregisteredIdentityContainer]);
  if (v3)
  {

    [*(id *)(*(void *)(a1 + 32) + 8) unlock];
LABEL_4:
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Posting notification of identity regeneration",  buf,  2u);
    }

    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    objc_msgSend( v6,  "__mainThreadPostNotificationName:object:",  @"__kIDSRegistrationKeyManagerPrivateIdentityGeneratedNotification",  *(void *)(a1 + 32));
    goto LABEL_7;
  }

  unsigned __int8 v4 = [*(id *)(*(void *)(a1 + 32) + 80) hasUnregisteredIdentity];

  [*(id *)(*(void *)(a1 + 32) + 8) unlock];
  if ((v4 & 1) != 0) {
    goto LABEL_4;
  }
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v7 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v6,  OS_LOG_TYPE_DEFAULT,  "Skipping notification of identity regeneration; we've already done it",
      v7,
      2u);
  }

void sub_10002DB34(uint64_t a1)
{
  if (([*(id *)(a1 + 32) _shouldCheckUnregisteredKTData] & 1) == 0)
  {
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      id v5 = buf;
      goto LABEL_7;
    }

LABEL_40:
        id v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
        if (os_log_type_enabled(v52, OS_LOG_TYPE_FAULT))
        {
          id v122 = @"NO";
          if (v39) {
            uint64_t v123 = @"YES";
          }
          else {
            uint64_t v123 = @"NO";
          }
          if (v40) {
            uint64_t v124 = @"YES";
          }
          else {
            uint64_t v124 = @"NO";
          }
          *(_DWORD *)buf = 138412802;
          v157 = v123;
          v158 = 2112;
          v159 = (uint64_t)v124;
          if ((_DWORD)v41) {
            id v122 = @"YES";
          }
          v160 = 2112;
          v161 = (id)v122;
          _os_log_fault_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_FAULT,  "Completed registration of public identity, but it's not the identity we expected {legacyDataMatches: %@, ngm IdentityDataMatches: %@, ngmPrekeyDataMatches: %@}",  buf,  0x20u);
        }

        uint64_t v13 = v138;
        goto LABEL_60;
      }

      id v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        __int128 v125 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager config](self, "config"));
        __int128 v126 = objc_claimAutoreleasedReturnValue([v125 unappliedRollingTicket]);
        __int128 v127 = (void *)v126;
        __int128 v128 = @"NO";
        *(_DWORD *)buf = 138544387;
        v157 = v23;
        v158 = 2112;
        if (v29) {
          __int128 v129 = @"YES";
        }
        else {
          __int128 v129 = @"NO";
        }
        v159 = v126;
        if (v32) {
          __int128 v128 = @"YES";
        }
        v160 = 2113;
        v161 = v19;
        v162 = 2113;
        v163 = v129;
        v164 = 2113;
        v165 = v128;
        _os_log_error_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "Failed to get expectedNGMPublicIdentityData/expectedNGMPublicPrekeyData -- Not updating registered data {error : %{public}@, unappliedRollingTicket: %@, publicUnregisteredIdentityContainer: %{private}@, expectedNGMPublicI dentityData: %{private}@, expectedNGMPublicPrekeyData: %{private}@}",  buf,  0x34u);
      }
    }

    else
    {
      id v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
        sub_100695490();
      }
      __int128 v140 = 0LL;
      id v29 = 0LL;
      int v32 = 0LL;
      id v23 = v20;
    }

    goto LABEL_19;
  }

  uint64_t v45 = objc_claimAutoreleasedReturnValue(-[IDSPeerAggregateMessage priority](self, "priority"));
  if (v45)
  {
    id v46 = (void *)v45;
    id v47 = (void *)objc_claimAutoreleasedReturnValue(-[IDSPeerAggregateMessage priority](self, "priority"));
    id v48 = [v47 intValue];

    if (v48 != 10)
    {
      id v49 = (void *)objc_claimAutoreleasedReturnValue(-[IDSPeerAggregateMessage priority](self, "priority"));
      if (v49) {
        CFDictionarySetValue(v11, @"pri", v49);
      }
    }
  }

  id v50 = (void *)objc_claimAutoreleasedReturnValue(-[IDSPeerAggregateMessage chunkNumber](self, "chunkNumber"));
  if (v50) {
    CFDictionarySetValue(v11, @"fcn", v50);
  }

  if (-[IDSPeerAggregateMessage isFinalMessage](self, "isFinalMessage")) {
    CFDictionarySetValue(v11, @"flc", &off_100946900);
  }
  id v51 = (void *)objc_claimAutoreleasedReturnValue(-[IDSPeerAggregateMessage deliveryMinimumTimeDelay](self, "deliveryMinimumTimeDelay"));

  if (v51)
  {
    id v52 = (void *)objc_claimAutoreleasedReturnValue(-[IDSPeerAggregateMessage deliveryMinimumTimeDelay](self, "deliveryMinimumTimeDelay"));
    if (v52) {
      CFDictionarySetValue(v11, IDSDeliveryMinimumTimeDelayKey, v52);
    }
  }

  id v53 = (void *)objc_claimAutoreleasedReturnValue(-[IDSPeerAggregateMessage deliveryMinimumTime](self, "deliveryMinimumTime"));

  if (v53)
  {
    v54 = (void *)objc_claimAutoreleasedReturnValue(-[IDSPeerAggregateMessage deliveryMinimumTime](self, "deliveryMinimumTime"));
    if (v54) {
      CFDictionarySetValue(v11, IDSDeliveryMinimumTimeKey, v54);
    }
  }

  v55 = (void *)objc_claimAutoreleasedReturnValue(-[IDSPeerAggregateMessage groupPayload](self, "groupPayload"));
  if (v55) {
    CFDictionarySetValue(v11, @"P", v55);
  }

  uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(-[IDSPeerAggregateMessage groupIdentifer](self, "groupIdentifer"));
  if (v56) {
    CFDictionarySetValue(v11, @"gI", v56);
  }

  v57 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  v75 = 0u;
  v76 = 0u;
  uint64_t v77 = 0u;
  uint64_t v78 = 0u;
  v58 = self->_individualPeerMessages;
  uint64_t v59 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v58,  "countByEnumeratingWithState:objects:count:",  &v75,  v83,  16LL);
  if (v59)
  {
    id v60 = v59;
    __int128 v61 = *(void *)v76;
    do
    {
      for (i = 0LL; i != v60; i = (char *)i + 1)
      {
        if (*(void *)v76 != v61) {
          objc_enumerationMutation(v58);
        }
        __int128 v63 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*((void *)&v75 + 1) + 8 * (void)i),  "dictionaryRepresentation",  (void)v75));
        -[NSMutableArray addObject:](v57, "addObject:", v63);
      }

      id v60 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v58,  "countByEnumeratingWithState:objects:count:",  &v75,  v83,  16LL);
    }

    while (v60);
  }

  __int128 v64 = v57;
  if (v64)
  {
    CFDictionarySetValue(v11, @"dtl", v64);
  }

  else
  {
    v65 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v65) {
      sub_100696A88(v65, v66, v67, v68, v69, v70, v71, v72);
    }
  }

  uint64_t v73 = v11;
  return v73;
}

          i = v64;
        }

        else
        {
          uint64_t v13 = (id)objc_claimAutoreleasedReturnValue(+[ENLog groupContext](&OBJC_CLASS___ENLog, "groupContext"));
          if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_DEFAULT))
          {
            v41 = (void *)objc_claimAutoreleasedReturnValue([v6 publicKeyData]);
            uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(v65 + 40) count]));
            *(_DWORD *)buf = 138543618;
            uint64_t v97 = v41;
            uint64_t v98 = 2114;
            v99 = v42;
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v13,  OS_LOG_TYPE_DEFAULT,  "No sponsor pair {entry.publicKeyData: %{public}@, keyToSponsorPairMap.lenth: %{public}@}",  buf,  0x16u);
          }
        }
      }

      __int128 v63 = [obj countByEnumeratingWithState:&v91 objects:v105 count:16];
    }

    while (v63);
  }

  v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ENLog groupContext](&OBJC_CLASS___ENLog, "groupContext"));
  if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
  {
    id v44 = *(void **)(v65 + 48);
    *(_DWORD *)buf = 138543362;
    uint64_t v97 = v44;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "got groups %{public}@", buf, 0xCu);
  }

  v83 = 0u;
  uint64_t v84 = 0u;
  v81 = 0u;
  uint64_t v82 = 0u;
  uint64_t v45 = *(id *)(v65 + 48);
  id v46 = [v45 countByEnumeratingWithState:&v81 objects:v95 count:16];
  if (v46)
  {
    id v47 = v46;
    id v48 = *(void *)v82;
LABEL_47:
    id v49 = 0LL;
    while (1)
    {
      if (*(void *)v82 != v48) {
        objc_enumerationMutation(v45);
      }
      id v50 = *(void **)(*((void *)&v81 + 1) + 8 * v49);
      id v51 = (void *)objc_claimAutoreleasedReturnValue([v50 groupID]);
      id v52 = [v51 isEqual:*(void *)(v65 + 72)];

      if ((v52 & 1) != 0) {
        break;
      }
      if (v47 == (id)++v49)
      {
        id v47 = [v45 countByEnumeratingWithState:&v81 objects:v95 count:16];
        if (v47) {
          goto LABEL_47;
        }
        goto LABEL_53;
      }
    }

    id v53 = v50;

    if (!v53) {
      goto LABEL_56;
    }
    v54 = *(void **)(v65 + 80);
    v55 = (void *)objc_claimAutoreleasedReturnValue([v53 groupMembers]);
    uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v55 allKeys]);
    v75[0] = _NSConcreteStackBlock;
    v75[1] = 3221225472LL;
    v75[2] = sub_1000FFA14;
    v75[3] = &unk_1008FA3D0;
    v76 = v53;
    uint64_t v77 = *(id *)(v65 + 56);
    uint64_t v78 = *(id *)(v65 + 88);
    v79 = *(id *)(v65 + 72);
    v80 = *(id *)(v65 + 104);
    v57 = v53;
    [v54 _participantsForDestinations:v56 completion:v75];
  }

  else
  {
LABEL_53:

LABEL_56:
    v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ENLog groupContext](&OBJC_CLASS___ENLog, "groupContext"));
    if (os_log_type_enabled(v58, OS_LOG_TYPE_FAULT)) {
      sub_10069B4B0();
    }

    (*(void (**)(void))(*(void *)(v65 + 104) + 16LL))();
  }
}

        id v19 = 0;
LABEL_41:

        goto LABEL_42;
      }

      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_40;
      }
      *(_DWORD *)buf = 138412290;
      int v32 = v4;
      id v20 = "Not sending IDS authentication, we have no profile ID for registration: %@";
    }

    goto LABEL_41;
  }

  uint64_t v11 = -[IDSRegistration shouldAutoRegisterAllHandles](self, "shouldAutoRegisterAllHandles");
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  uint64_t v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  if (v11)
  {
    if (v13)
    {
      int8x16_t v14 = (IDSRegistration *)objc_claimAutoreleasedReturnValue(-[IDSRegistration idsUserID](self, "idsUserID"));
      int v15 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration serviceType](self, "serviceType"));
      *(_DWORD *)buf = 138412546;
      v91 = v14;
      v92 = 2112;
      uint64_t v93 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  " ... finding emails to register for auto register based account: %@:%@",  buf,  0x16u);
    }

    id v16 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration confirmedEmails](self, "confirmedEmails"));
    __int16 v17 = [v16 count];

    if (v17)
    {
      id v18 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration confirmedEmails](self, "confirmedEmails"));
      -[NSMutableSet addObjectsFromArray:](v3, "addObjectsFromArray:", v18);

      id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        id v20 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration confirmedEmails](self, "confirmedEmails"));
        id v21 = IMLoggingStringForArray(v20);
        id v22 = (IDSRegistration *)objc_claimAutoreleasedReturnValue(v21);
        *(_DWORD *)buf = 138412290;
        v91 = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  " => Auto adding confirmed emails: %@ to URI set",  buf,  0xCu);
      }
    }

    else
    {
      id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, " => No confirmed emails...", buf, 2u);
      }
    }

    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration vettedEmails](self, "vettedEmails"));
    id v39 = [v38 count];

    if (v39)
    {
      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration vettedEmails](self, "vettedEmails"));
      -[NSMutableSet addObjectsFromArray:](v3, "addObjectsFromArray:", v40);

      v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration vettedEmails](self, "vettedEmails"));
        v43 = IMLoggingStringForArray(v42);
        id v44 = (IDSRegistration *)objc_claimAutoreleasedReturnValue(v43);
        *(_DWORD *)buf = 138412290;
        v91 = v44;
        _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  " => Auto adding vetted emails: %@ to URI set",  buf,  0xCu);
      }
    }

    else
    {
      v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, " => No confirmed emails...", buf, 2u);
      }
    }

    uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration candidateEmails](self, "candidateEmails"));
    id v46 = [v45 count];

    if (v46)
    {
      id v47 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration candidateEmails](self, "candidateEmails"));
      -[NSMutableSet addObjectsFromArray:](v3, "addObjectsFromArray:", v47);

      id v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      {
        id v49 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration candidateEmails](self, "candidateEmails"));
        id v50 = IMLoggingStringForArray(v49);
        id v51 = (IDSRegistration *)objc_claimAutoreleasedReturnValue(v50);
        *(_DWORD *)buf = 138412290;
        v91 = v51;
        _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  " => Added candidate emails: %@ to URI set",  buf,  0xCu);
      }
    }

    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[IDSRegistration dsHandle](self, "dsHandle"));
    if (-[os_log_s length](v5, "length"))
    {
      id v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, " => Removing DS Handle", buf, 2u);
      }

      -[NSMutableSet removeObject:](v3, "removeObject:", v5);
    }

    goto LABEL_40;
  }

  if (v13)
  {
    id v23 = (IDSRegistration *)objc_claimAutoreleasedReturnValue(-[IDSRegistration idsUserID](self, "idsUserID"));
    id v24 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration serviceType](self, "serviceType"));
    *(_DWORD *)buf = 138412546;
    v91 = v23;
    v92 = 2112;
    uint64_t v93 = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  " ... finding emails to register for manual handle selection account: %@:%@",  buf,  0x16u);
  }

  id v25 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration confirmedEmails](self, "confirmedEmails"));
  id v26 = [v25 count];

  if (v26)
  {
    __int16 v27 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration confirmedEmails](self, "confirmedEmails"));
    -[NSMutableSet addObjectsFromArray:](v3, "addObjectsFromArray:", v27);

    id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      id v29 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration confirmedEmails](self, "confirmedEmails"));
      id v30 = IMLoggingStringForArray(v29);
      __int128 v31 = (IDSRegistration *)objc_claimAutoreleasedReturnValue(v30);
      *(_DWORD *)buf = 138412290;
      v91 = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  " => Added confirmed emails: %@ to URI set",  buf,  0xCu);
    }
  }

  int v32 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration candidateEmails](self, "candidateEmails"));
  id v33 = [v32 count];

  if (v33)
  {
    __int16 v34 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration candidateEmails](self, "candidateEmails"));
    -[NSMutableSet addObjectsFromArray:](v3, "addObjectsFromArray:", v34);

    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration candidateEmails](self, "candidateEmails"));
      __int128 v36 = IMLoggingStringForArray(v35);
      uint64_t v37 = (IDSRegistration *)objc_claimAutoreleasedReturnValue(v36);
      *(_DWORD *)buf = 138412290;
      v91 = v37;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  " => Added candidate emails: %@ to URI set",  buf,  0xCu);
    }

    goto LABEL_40;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

              sub_10041D3BC(v1);
              return;
            }
          }
        }
      }
    }

    uint64_t v77 = (v68 - 1) & v68;
    v79 = __clz(__rbit64(v68)) + (v64 << 6);
LABEL_23:
    id v29 = *(uint64_t **)(*(void *)(v51 + 56) + 8 * v79);
    id v49 = *(char **)((swift_isaMask & *v2) + 0x178LL);
    v80 = swift_retain(v29);
    ((void (*)(uint64_t))v49)(v80);
    swift_release(v29);
  }

  v83 = v81 + 4;
  if (v83 < v39)
  {
    v68 = *(void *)(v63 + 8 * v83);
    if (v68)
    {
      __int128 v64 = v83;
      goto LABEL_40;
    }

    while (1)
    {
      __int128 v64 = v83 + 1;
      if (__OFADD__(v83, 1LL)) {
        break;
      }
      if (v64 >= v39) {
        goto LABEL_41;
      }
      v68 = *(void *)(v63 + 8 * v64);
      ++v83;
      if (v68) {
        goto LABEL_40;
      }
    }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    __int128 v132 = (v142 - 1) & v142;
    __int128 v140 = __clz(__rbit64(v142)) + (v135 << 6);
LABEL_41:
    v144 = *((void *)v128 + 6) + 16 * v140;
    v145 = *(void **)(v144 + 8);
    __int16 v146 = *(id *)v144;
    v147 = v145;
    __int16 v148 = v146;
    v149 = v147;
    v150 = v148;
    v151 = v149;
    __int128 v138 = (os_log_s *)v150;
    __int128 v137 = (os_log_s *)v151;
    v152 = (os_log_s *)Logger.logObject.getter(v137);
    v153 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v152, v153))
    {
      v154 = swift_slowAlloc(22LL, -1LL);
      v155 = (os_log_s **)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)v154 = v171[0];
      *(void *)(v154 + 4) = v138;
      *v155 = v138;

      *(_WORD *)(v154 + 12) = 2112;
      *(void *)(v154 + 14) = v137;
      v155[1] = v137;

      _os_log_impl( (void *)&_mh_execute_header,  v152,  v153,  "Scheduled item - toURI: %@, fromURI: %@",  (uint8_t *)v154,  0x16u);
      v156 = sub_1003F5CB4(&qword_1009B92C8);
      swift_arrayDestroy(v155, 2LL, v156);
      swift_slowDealloc(v155, -1LL, -1LL);
      swift_slowDealloc(v154, -1LL, -1LL);
      __int128 v136 = v152;
    }

    else
    {

      __int128 v136 = v138;
      __int128 v137 = v138;
      __int128 v138 = v152;
    }
  }

  v143 = v141 + 3;
  if (v143 >= v133)
  {
LABEL_43:

    swift_release(v168);
    swift_release(v128);

    return;
  }

  v142 = v172[v143];
  if (v142)
  {
    __int128 v135 = v143;
    goto LABEL_40;
  }

  while (1)
  {
    __int128 v135 = v143 + 1;
    if (__OFADD__(v143, 1LL)) {
      break;
    }
    if (v135 >= v133) {
      goto LABEL_43;
    }
    v142 = v172[v135];
    ++v143;
    if (v142) {
      goto LABEL_40;
    }
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

              sub_10041D3BC(v1);
              return;
            }
          }
        }
      }
    }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

            __break(1u);
LABEL_41:
            __break(1u);
            return result;
          }

          ++v16;
        }

LABEL_61:
  v151 = 0LL;
  uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue( -[IDSRegistrationKeyManager publicMessageProtectionDeviceIdentityContainerToRegister:]( self,  "publicMessageProtectionDeviceIdentityContainerToRegister:",  &v151));
  v79 = v151;
  __int128 v141 = v78;
  v80 = (void *)objc_claimAutoreleasedReturnValue([v78 legacyPublicIdentity]);
  v150 = v79;
  v81 = objc_claimAutoreleasedReturnValue([v80 dataRepresentationWithError:&v150]);
  uint64_t v82 = (__CFString *)v150;

  v83 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  uint64_t v84 = v83;
  __int128 v139 = (void *)v81;
  if (!v81)
  {
    if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR)) {
      sub_100695324();
    }
    v87 = v82;
    goto LABEL_70;
  }

  if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v157 = @"message-protection-public-data-registered";
    v158 = 2112;
    v159 = v81;
    _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_DEFAULT,  "Saving public legacy message protection data {identifier: %@, data: %@}",  buf,  0x16u);
  }

  v85 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager keychainWrapper](self, "keychainWrapper"));
  v149 = v82;
  v86 = [v85 saveData:v81 forIdentifier:@"message-protection-public-data-registered" allowSync:0 dataProtectionClass:0 error:&v149];
  v87 = v149;

  if ((v86 & 1) == 0)
  {
    uint64_t v84 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543619;
      v157 = v87;
      v158 = 2113;
      v159 = v81;
      _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_DEFAULT,  "Failed to save legacy public message protection data {error: %{public}@, publicData: %{private}@}",  buf,  0x16u);
    }

        if (IDSIsiMessageRegistrationServiceType(v20))
        {
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v217, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v216, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v215, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v214, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v213, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v212, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v211, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v210, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v209, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v208, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v207, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v206, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v205, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v204, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v203, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v202, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v201, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v200, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v200, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v199, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v198, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v197, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v196, &off_100946C60);
          v68 = _IDSECVersion();
          v69 = (void *)objc_claimAutoreleasedReturnValue(v68);
          if (v69) {
            CFDictionarySetValue((CFMutableDictionaryRef)v21, v177, v69);
          }

          CFDictionarySetValue((CFMutableDictionaryRef)v21, v195, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v194, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v193, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v192, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v226, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v191, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v190, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v189, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v225, &__kCFBooleanTrue);
          refreshed = _IDSGroupPhotoRefreshVersionNumber();
          v71 = (void *)objc_claimAutoreleasedReturnValue(refreshed);
          if (v71) {
            CFDictionarySetValue((CFMutableDictionaryRef)v21, v176, v71);
          }

          CFDictionarySetValue((CFMutableDictionaryRef)v21, v227, &__kCFBooleanTrue);
          v72 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
          if ([v72 deviceType] == (id)2)
          {

            goto LABEL_95;
          }

          uint64_t v94 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
          v95 = [v94 deviceType];

          if (v95 == (id)6) {
LABEL_95:
          }
            CFDictionarySetValue((CFMutableDictionaryRef)v21, v181, &__kCFBooleanTrue);
          v96 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
          uint64_t v97 = [v96 supportsHEIFEncoding];

          if (v97) {
            CFDictionarySetValue((CFMutableDictionaryRef)v21, v179, &__kCFBooleanTrue);
          }
          uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
          v99 = [v98 supportsAnimojiV2];

          if (v99) {
            CFDictionarySetValue((CFMutableDictionaryRef)v21, v178, &__kCFBooleanTrue);
          }
          uint64_t v100 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
          v101 = [v100 supportsZelkova];

          if (v101) {
            CFDictionarySetValue((CFMutableDictionaryRef)v21, v182, &__kCFBooleanTrue);
          }
          v102 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
          unsigned int v103 = [v102 supportsHDRdecoding];

          v104 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v103));
          if (v104) {
            CFDictionarySetValue((CFMutableDictionaryRef)v21, v183, v104);
          }

          CFDictionarySetValue((CFMutableDictionaryRef)v21, v221, &__kCFBooleanFalse);
          v105 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
          v106 = [v105 supportsUWB];

          if (v106) {
            CFDictionarySetValue((CFMutableDictionaryRef)v21, v185, &__kCFBooleanTrue);
          }
          v107 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
          if ([v107 deviceType] == (id)2)
          {

            id v16 = v224;
            goto LABEL_127;
          }

          id v122 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
          uint64_t v123 = [v122 deviceType];

          uint64_t v124 = v123 == (id)6;
          id v16 = v224;
          if (v124) {
LABEL_127:
          }
            CFDictionarySetValue((CFMutableDictionaryRef)v21, v218, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v188, &__kCFBooleanTrue);
          __int128 v125 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
          __int128 v126 = [v125 supportsEmojiImages];

          if (v126) {
            CFDictionarySetValue((CFMutableDictionaryRef)v21, v166, &__kCFBooleanTrue);
          }
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v187, &__kCFBooleanTrue);
          __int128 v127 = _IDSSenderKeyMessageVersionNumber();
          __int128 v128 = (void *)objc_claimAutoreleasedReturnValue(v127);
          if (v128) {
            CFDictionarySetValue((CFMutableDictionaryRef)v21, v175, v128);
          }

          uint64_t v93 = v186;
          goto LABEL_135;
        }

        uint64_t v73 = &IMInsertBoolsToXPCDictionary_ptr;
        if (IDSIsMultiplex1RegistrationServiceType(v20))
        {
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v174, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v173, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v172, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v171, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v170, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v226, &__kCFBooleanTrue);
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v225, &__kCFBooleanTrue);
          if (a9) {
            CFDictionarySetValue((CFMutableDictionaryRef)v21, v156, &__kCFBooleanTrue);
          }
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v169, &__kCFBooleanTrue);
          uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
          v75 = [v74 supportsFMDV2];

          if (v75) {
            CFDictionarySetValue((CFMutableDictionaryRef)v21, v155, &__kCFBooleanTrue);
          }
          v76 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
          if ([v76 deviceType] == (id)2) {
            goto LABEL_78;
          }
          uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
          if ([v77 deviceType] == (id)6) {
            goto LABEL_77;
          }
          uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
          if ([v78 deviceType] == (id)4)
          {

LABEL_77:
            id v16 = v224;
LABEL_78:

LABEL_79:
            CFDictionarySetValue((CFMutableDictionaryRef)v21, v163, &__kCFBooleanTrue);
          }

          else
          {
            __int128 v135 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
            v142 = [v135 deviceType];

            uint64_t v73 = &IMInsertBoolsToXPCDictionary_ptr;
            id v16 = v224;
            if (v142 == (id)3) {
              goto LABEL_79;
            }
          }

          CFDictionarySetValue((CFMutableDictionaryRef)v21, v168, &__kCFBooleanTrue);
          v79 = (void *)objc_claimAutoreleasedReturnValue([v73[163] sharedInstance]);
          v80 = [v79 supportsKeySharing];

          if (v80) {
            CFDictionarySetValue((CFMutableDictionaryRef)v21, v154, &__kCFBooleanTrue);
          }
          v81 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
          uint64_t v82 = [v81 supportsHarmony];

          if (v82) {
            CFDictionarySetValue((CFMutableDictionaryRef)v21, v153, &__kCFBooleanTrue);
          }
          v83 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
          uint64_t v84 = [v83 supportsManateeForAppleCash];

          if (v84) {
            CFDictionarySetValue((CFMutableDictionaryRef)v21, v152, &__kCFBooleanTrue);
          }
          v85 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
          v86 = [v85 supportsRegionForAppleCash];

          if (v86) {
            CFDictionarySetValue((CFMutableDictionaryRef)v21, v151, &__kCFBooleanTrue);
          }
          v87 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
          uint64_t v88 = [v87 supportsUWB];

          if (v88) {
            CFDictionarySetValue((CFMutableDictionaryRef)v21, v185, &__kCFBooleanTrue);
          }
          v89 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
          uint64_t v90 = [v89 supportsHomeKitResident];

          if (v90) {
            CFDictionarySetValue((CFMutableDictionaryRef)v21, v150, &__kCFBooleanTrue);
          }
          v91 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
          v92 = [v91 supportsZelkova];

          uint64_t v93 = v227;
          if (v92)
          {
            CFDictionarySetValue((CFMutableDictionaryRef)v21, v182, &__kCFBooleanTrue);
            uint64_t v93 = v227;
          }

          goto LABEL_135;
        }

        CFDictionarySetValue((CFMutableDictionaryRef)v21, v161, &__kCFBooleanTrue);
        CFDictionarySetValue((CFMutableDictionaryRef)v21, v160, &__kCFBooleanTrue);
        v108 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
        v109 = [v108 isGreenTea];

        if (v109) {
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v145, &__kCFBooleanTrue);
        }
        CFDictionarySetValue((CFMutableDictionaryRef)v21, v159, &__kCFBooleanTrue);
        uint64_t v110 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
        id v111 = [v110 supportsVenice];

        if ((v111 & 1) == 0) {
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v144, &__kCFBooleanTrue);
        }
        CFDictionarySetValue((CFMutableDictionaryRef)v21, v158, &__kCFBooleanTrue);
        CFDictionarySetValue((CFMutableDictionaryRef)v21, v157, &__kCFBooleanTrue);
        v112 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
        v113 = [v112 supportsHEIFEncoding];

        if (v113) {
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v179, &__kCFBooleanTrue);
        }
        id v114 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
        uint64_t v115 = [v114 supportsAnimojiV2];

        if (v115) {
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v178, &__kCFBooleanTrue);
        }
        id v116 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
        v117 = [v116 supportsHDRdecoding];

        v118 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v117));
        if (v118) {
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v183, v118);
        }

        CFDictionarySetValue((CFMutableDictionaryRef)v21, v221, &__kCFBooleanFalse);
        v119 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
        id v120 = [v119 supportsUWB];

        if (v120) {
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v185, &__kCFBooleanTrue);
        }
        id v121 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
        if ([v121 deviceType] == (id)2)
        {

          uint64_t v93 = v218;
LABEL_135:
          CFDictionarySetValue((CFMutableDictionaryRef)v21, v93, &__kCFBooleanTrue);
          goto LABEL_136;
        }

        __int128 v129 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
        __int128 v130 = [v129 deviceType];

        uint64_t v93 = v218;
        if (v130 == (id)6) {
          goto LABEL_135;
        }
LABEL_136:
        CFDictionarySetValue((CFMutableDictionaryRef)v21, v228, &__kCFBooleanTrue);
        -[NSMutableDictionary setObject:forKeyedSubscript:](v231, "setObject:forKeyedSubscript:", v21, v20);

        id v19 = (char *)v19 + 1;
        id v18 = &IMInsertBoolsToXPCDictionary_ptr;
      }

      while (v234 != v19);
      __int128 v137 = [obj countByEnumeratingWithState:&v238 objects:v250 count:16];
      v234 = v137;
    }

    while (v137);
  }

  __int128 v138 = v231;
  return v138;
}

    objc_msgSend( v15,  "setObject:forKey:",  &__kCFBooleanTrue,  IDSOpenSocketOptionSetAllowlistUUIDForStreamingSocket,  v53);
    id v49 = (void *)objc_claimAutoreleasedReturnValue(+[IDSUTunController sharedInstance](&OBJC_CLASS___IDSUTunController, "sharedInstance"));
    id v50 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
    id v51 = (void *)objc_claimAutoreleasedReturnValue([v50 queueForPriority:v40]);
    v64[0] = _NSConcreteStackBlock;
    v64[1] = 3221225472LL;
    v64[2] = sub_10011A084;
    v64[3] = &unk_1008FAEC8;
    v65 = v7;
    v71 = v17;
    id v66 = v5;
    v67 = v59;
    v68 = self;
    v69 = v6;
    uint64_t v70 = v63;
    [v49 openSocketWithOptions:v15 queue:v51 completionHandler:v64];

LABEL_62:
  }

              if (v109)
              {
                id v46 = (void *)objc_claimAutoreleasedReturnValue([v41 loginID]);
                if ([v46 length] || -[__CFString length](v107, "length"))
                {
                  id v47 = (void *)objc_claimAutoreleasedReturnValue([v41 loginID]);
                  id v48 = [v47 isEqualToIgnoringCase:v107];

                  id v6 = &IMInsertBoolsToXPCDictionary_ptr;
                  if ((v48 & 1) == 0)
                  {
                    id v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                    __int16 v17 = v108;
                    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
                    {
                      id v50 = (uint64_t (*__ptr32 *)(int, int, id))objc_claimAutoreleasedReturnValue([v41 smallDescription]);
                      *(_DWORD *)buf = 138412546;
                      __int128 v128 = v50;
                      __int128 v129 = 2112;
                      __int128 v130 = v107;
                      _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "  => Found **mismatched** adhoc account %@ primary ID %@, deleting...",  buf,  0x16u);

                      id v6 = &IMInsertBoolsToXPCDictionary_ptr;
                    }

LABEL_70:
                    id v51 = v110;
                    if (!v110) {
                      id v51 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
                    }
                    uint64_t v110 = v51;
                    -[NSMutableArray addObject:](v51, "addObject:", v41);
                    uint64_t v38 = 1;
                    continue;
                  }
                }

                else
                {
                }
              }

              __int16 v17 = v108;
              if ((v38 & 1) != 0) {
                goto LABEL_70;
              }
              if (v43)
              {
                id v52 = (os_log_s *)objc_claimAutoreleasedReturnValue([v6[440] registration]);
                if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG)) {
                  sub_10069D830(v124, v41, &v125, v52);
                }

                id v53 = v41;
                uint64_t v38 = 0;
                uint64_t v37 = v53;
              }

              else
              {
                uint64_t v38 = 0;
              }
            }

            __int128 v36 = [obj countByEnumeratingWithState:&v115 objects:v126 count:16];
          }

          while (v36);

          v54 = v107;
          if (!v37)
          {
            BOOL v4 = v96;
            self = v100;
            id v21 = v98;
            goto LABEL_85;
          }

          BOOL v4 = v96;
          v55 = (void *)objc_claimAutoreleasedReturnValue([v96 uniqueID]);
          uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s identifier](v95, "identifier"));
          v57 = (void *)objc_claimAutoreleasedReturnValue([v37 primaryAccount]);
          self = v100;
          __int16 v27 = (os_log_s *)v37;
          if (v57 != v96)
          {

            goto LABEL_89;
          }

          id v66 = (void *)objc_claimAutoreleasedReturnValue([v37 primaryAccountUniqueID]);
          v67 = [v66 isEqualToIgnoringCase:v55];

          if ((v67 & 1) == 0)
          {
LABEL_89:
            [v37 setObject:v56 forKey:v94];
            [v37 setObject:v55 forKey:v93];
            [v37 setObject:v106 forKey:v92];
            v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
            if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
            {
              v69 = (uint64_t (*__ptr32 *)(int, int, id))objc_claimAutoreleasedReturnValue([v37 smallDescription]);
              *(_DWORD *)buf = 138412290;
              __int128 v128 = v69;
              _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "  => Updating primary account info for %@",  buf,  0xCu);
            }

            -[IDSDAccountController delayedSaveSettings](v100, "delayedSaveSettings");
          }

          id v6 = &IMInsertBoolsToXPCDictionary_ptr;
LABEL_93:
          v113 = 0u;
          id v114 = 0u;
          id v111 = 0u;
          v112 = 0u;
          uint64_t v70 = v110;
          v71 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v70,  "countByEnumeratingWithState:objects:count:",  &v111,  v123,  16LL);
          id v19 = v99;
          if (v71)
          {
            v72 = v71;
            uint64_t v73 = *(void *)v112;
            do
            {
              for (k = 0LL; k != v72; k = (char *)k + 1)
              {
                if (*(void *)v112 != v73) {
                  objc_enumerationMutation(v70);
                }
                -[IDSDAccountController _removeAccount:]( self,  "_removeAccount:",  *(void *)(*((void *)&v111 + 1) + 8LL * (void)k));
              }

              v72 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v70,  "countByEnumeratingWithState:objects:count:",  &v111,  v123,  16LL);
            }

            while (v72);
          }

          int v15 = (uint64_t (*__ptr32 *)(int, int, id))[v4 isEnabled];
          i = v103;
          if ((_DWORD)v15 != -[os_log_s isEnabled](v27, "isEnabled"))
          {
            v75 = [v4 isEnabled];
            v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
            uint64_t v77 = os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT);
            if (v75)
            {
              if (v77)
              {
                uint64_t v78 = (uint64_t (*__ptr32 *)(int, int, id))objc_claimAutoreleasedReturnValue( -[os_log_s smallDescription]( v27,  "smallDescription"));
                *(_DWORD *)buf = 138412290;
                __int128 v128 = v78;
                _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEFAULT,  "  * Enabling account: %@",  buf,  0xCu);
              }

              int v15 = (uint64_t (*__ptr32 *)(int, int, id))objc_claimAutoreleasedReturnValue(-[os_log_s uniqueID](v27, "uniqueID"));
              -[IDSDAccountController _enableAccountWithUniqueID:](self, "_enableAccountWithUniqueID:", v15);
            }

            else
            {
              if (v77)
              {
                v79 = (uint64_t (*__ptr32 *)(int, int, id))objc_claimAutoreleasedReturnValue( -[os_log_s smallDescription]( v27,  "smallDescription"));
                *(_DWORD *)buf = 138412290;
                __int128 v128 = v79;
                _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEFAULT,  "  * Disabling account: %@",  buf,  0xCu);
              }

              int v15 = (uint64_t (*__ptr32 *)(int, int, id))objc_claimAutoreleasedReturnValue(-[os_log_s uniqueID](v27, "uniqueID"));
              -[IDSDAccountController _disableAccountWithUniqueID:](self, "_disableAccountWithUniqueID:", v15);
            }
          }

LABEL_110:
          id v18 = v104;

LABEL_111:
          objc_autoreleasePoolPop(v18);
        }

        v102 = [v19 countByEnumeratingWithState:&v119 objects:v135 count:16];
      }

      while (v102);
    }

    [v4 refreshAdHocServiceNames];
    v80 = v90;
    int8x16_t v14 = (os_log_s *)v107;
    if (!v90)
    {
      id v18 = (void *)objc_claimAutoreleasedReturnValue([v4 registration]);
      v81 = objc_claimAutoreleasedReturnValue([v18 adHocServiceNames]);
      if (!v81)
      {

LABEL_128:
LABEL_129:
        id v5 = v89;

LABEL_130:
        goto LABEL_131;
      }

      int v15 = (uint64_t (*__ptr32 *)(int, int, id))v81;
    }

    uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue([v4 registration]);
    v83 = (void *)objc_claimAutoreleasedReturnValue([v82 adHocServiceNames]);
    uint64_t v84 = [v90 isEqualToArray:v83];

    v80 = v90;
    if (!v90)
    {
    }

    if ((v84 & 1) == 0 && [v4 isRegistered])
    {
      v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEFAULT,  "  => Triggering a re-register for primary account",  buf,  2u);
      }

      v86 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
      {
        v87 = (void *)objc_claimAutoreleasedReturnValue([v4 registration]);
        uint64_t v88 = (__CFString *)objc_claimAutoreleasedReturnValue([v87 adHocServiceNames]);
        *(_DWORD *)buf = 138412546;
        __int128 v128 = (uint64_t (*__ptr32 *)(int, int, id))v90;
        __int128 v129 = 2112;
        __int128 v130 = v88;
        _os_log_impl( (void *)&_mh_execute_header,  v86,  OS_LOG_TYPE_DEFAULT,  " current service names %@ new service names %@",  buf,  0x16u);
      }

      [v4 registerAccount];
    }

    goto LABEL_128;
  }
  }

LABEL_6:
  return v16;
}

LABEL_70:
  }

  uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue([v141 ngmPublicDeviceIdentity]);
  v89 = objc_claimAutoreleasedReturnValue([v88 identityData]);

  uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue([v141 ngmPublicDeviceIdentity]);
  v91 = objc_claimAutoreleasedReturnValue([v90 prekeyData]);

  v92 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  uint64_t v93 = v92;
  __int128 v135 = (void *)v91;
  __int128 v137 = (void *)v89;
  if (!v89 || !v91)
  {
    if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR)) {
      sub_1006952BC();
    }
    goto LABEL_86;
  }

  if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v157 = @"ngm-message-protection-public-data-registered";
    v158 = 2112;
    v159 = v89;
    _os_log_impl( (void *)&_mh_execute_header,  v93,  OS_LOG_TYPE_DEFAULT,  "Saving public ngm message protection identity data {identifier: %@, data: %@}",  buf,  0x16u);
  }

  uint64_t v94 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager keychainWrapper](self, "keychainWrapper"));
  __int16 v148 = v87;
  v95 = [v94 saveData:v89 forIdentifier:@"ngm-message-protection-public-data-registered" allowSync:0 dataProtectionClass:0 error:&v148];
  v96 = v148;

  if ((v95 & 1) == 0)
  {
    uint64_t v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543619;
      v157 = v96;
      v158 = 2113;
      v159 = (uint64_t)v137;
      _os_log_impl( (void *)&_mh_execute_header,  v97,  OS_LOG_TYPE_DEFAULT,  "Failed to save ngm public message protection identity data {error: %{public}@, publicData: %{private}@}",  buf,  0x16u);
    }
  }

  uint64_t v98 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v157 = @"ngm-message-protection-public-prekey-data-registered";
    v158 = 2112;
    v159 = (uint64_t)v135;
    _os_log_impl( (void *)&_mh_execute_header,  v98,  OS_LOG_TYPE_DEFAULT,  "Saving public ngm message protection prekey data {identifier: %@, data: %@}",  buf,  0x16u);
  }

  v99 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager keychainWrapper](self, "keychainWrapper"));
  v147 = v96;
  uint64_t v100 = [v99 saveData:v135 forIdentifier:@"ngm-message-protection-public-prekey-data-registered" allowSync:0 dataProtectionClass:0 error:&v147];
  v87 = v147;

  if ((v100 & 1) == 0)
  {
    uint64_t v93 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543619;
      v157 = v87;
      v158 = 2113;
      v159 = (uint64_t)v135;
      _os_log_impl( (void *)&_mh_execute_header,  v93,  OS_LOG_TYPE_DEFAULT,  "Failed to save ngm public message protection prekey data {error: %{public}@, publicData: %{private}@}",  buf,  0x16u);
    }

  _Block_object_dispose(&v126, 8);
}

LABEL_86:
  }

  v101 = (void *)objc_claimAutoreleasedReturnValue([v141 ngmVersion]);
  if (v101)
  {
    v102 = v13;
    unsigned int v103 = v10;
    v104 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager identityDataSource](self, "identityDataSource"));
    v105 = (os_log_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(v104, "dataRepresentationForNGMVersion:", objc_msgSend(v101, "unsignedIntValue")));

    v106 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543874;
      v157 = @"ngm-message-protection-public-data-registered-version";
      v158 = 2114;
      v159 = (uint64_t)v101;
      v160 = 2114;
      v161 = v105;
      _os_log_impl( (void *)&_mh_execute_header,  v106,  OS_LOG_TYPE_DEFAULT,  "Saving public ngm version data {identifier: %{public}@, ngmVersion: %{public}@, ngmVersionData: %{public}@}",  buf,  0x20u);
    }

    v107 = v101;

    v108 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationKeyManager keychainWrapper](self, "keychainWrapper"));
    __int16 v146 = v87;
    v109 = [v108 saveData:v105 forIdentifier:@"ngm-message-protection-public-data-registered-version" allowSync:0 dataProtectionClass:0 error:&v146];
    uint64_t v110 = v146;

    if ((v109 & 1) != 0)
    {
      v101 = v107;
    }

    else
    {
      id v111 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      v101 = v107;
      if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543874;
        v157 = v110;
        v158 = 2114;
        v159 = (uint64_t)v107;
        v160 = 2114;
        v161 = v105;
        _os_log_error_impl( (void *)&_mh_execute_header,  v111,  OS_LOG_TYPE_ERROR,  "Failed to public ngm version data {error: %{public}@, ngmVersion: %{public}@, ngmVersionData: %{public}@}",  buf,  0x20u);
      }
    }

    id v10 = v103;
    uint64_t v13 = v102;
  }

  else
  {
    v105 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v105, OS_LOG_TYPE_FAULT)) {
      sub_100695258();
    }
    uint64_t v110 = v87;
  }

  __int128 v131 = (__CFString *)v110;

  v144 = 0u;
  v145 = 0u;
  v142 = 0u;
  v143 = 0u;
  v112 = v13;
  v113 = -[__CFString countByEnumeratingWithState:objects:count:]( v112,  "countByEnumeratingWithState:objects:count:",  &v142,  v155,  16LL);
  if (v113)
  {
    id v114 = v113;
    __int128 v130 = v101;
    uint64_t v115 = v10;
    id v116 = 0;
    v117 = *(void *)v143;
    do
    {
      for (i = 0LL; i != v114; i = (char *)i + 1)
      {
        if (*(void *)v143 != v117) {
          objc_enumerationMutation(v112);
        }
        v119 = *(void **)(*((void *)&v142 + 1) + 8LL * (void)i);
        id v120 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString objectForKeyedSubscript:](v112, "objectForKeyedSubscript:", v119));
        if (v120) {
          v116 |= -[IDSPerServiceApplicationKeyManager notePublicIdentityDidRegisterKeyData:forKeyIndex:]( self->_applicationKeyManager,  "notePublicIdentityDidRegisterKeyData:forKeyIndex:",  v120,  (unsigned __int16)[v119 unsignedIntValue]);
        }
      }

      id v114 = -[__CFString countByEnumeratingWithState:objects:count:]( v112,  "countByEnumeratingWithState:objects:count:",  &v142,  v155,  16LL);
    }

    while (v114);

    id v10 = v115;
    v101 = v130;
    if ((v116 & 1) != 0) {
      -[IDSRegistrationKeyManager _save](self, "_save");
    }
  }

  else
  {
  }

  if (self->_needsReRegister)
  {
    id v121 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v121, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v121,  OS_LOG_TYPE_DEFAULT,  "Clearing flag about needing a re-register; it looks to be successful",
        buf,
        2u);
    }

    self->_needsReRegister = 0;
  }

  -[NSRecursiveLock unlock](self->_lock, "unlock");
}
}

LABEL_19:
  -[NSRecursiveLock unlock](self->_lock, "unlock");
}

        goto LABEL_20;
      }

      id v20 = os_nexus_attr_create();
      if (!v20)
      {
        id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog ClientChannelManager]( &OBJC_CLASS___IDSFoundationLog,  "ClientChannelManager"));
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          id v24 = "os_nexus_attr_create failed";
          goto LABEL_18;
        }

        goto LABEL_19;
      }

      id v21 = v20;
      os_nexus_attr_set(v20, 2LL, 256LL);
      os_nexus_attr_set(v21, 3LL, 256LL);
      strcpy((char *)v3->_osNexusName, "IDSClientChannelNexusOS");
      id v22 = os_nexus_controller_register_provider(v3->_osNexusController, v3->_osNexusName, 0LL, v21, v3->_osNexusUUID);
      os_nexus_attr_destroy(v21);
      if (v22)
      {
        id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog ClientChannelManager]( &OBJC_CLASS___IDSFoundationLog,  "ClientChannelManager"));
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          id v24 = "os_nexus_controller_register_provider failed";
LABEL_18:
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, v24, buf, 2u);
          goto LABEL_19;
        }

        goto LABEL_19;
      }

      NEVirtualInterfaceSetReadAutomatically(v3->_vifRef, 1LL);
      IPPayloadHandler = NEVirtualInterfaceSetReadIPPayloadHandler(v3->_vifRef, &stru_1008F7888);
      id v28 = NEVirtualInterfaceSetMTU(v3->_vifRef, 2000LL);
      vifRef = v3->_vifRef;
      __int128 v63 = 0;
      __int128 v62 = 0LL;
      id v60 = 7708LL;
      __int128 v61 = 33022LL;
      id v30 = v18;
      arc4random_buf(&v62, 8uLL);
      *(void *)&__int128 v31 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v31 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&buf[30] = v31;
      *(_OWORD *)buf = v31;
      *(_OWORD *)&uint8_t buf[16] = v31;
      inet_ntop(30, &v61, buf, 0x2Eu);
      int v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", buf));
      id v33 = (void *)objc_claimAutoreleasedReturnValue([v32 stringByAppendingString:@"%"]);
      __int16 v34 = (void *)objc_claimAutoreleasedReturnValue([v33 stringByAppendingString:v30]);

      uint64_t v35 = NEVirtualInterfaceAddAddress(vifRef, v34, 0LL);
      __int128 v36 = NEVirtualInterfaceSetRankNever(v3->_vifRef, 1LL);
      updated = NEVirtualInterfaceUpdateAdHocService(v3->_vifRef);
      uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog ClientChannelManager]( &OBJC_CLASS___IDSFoundationLog,  "ClientChannelManager"));
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        id v39 = @"YES";
        if (IPPayloadHandler) {
          uint64_t v40 = @"YES";
        }
        else {
          uint64_t v40 = @"NO";
        }
        *(_DWORD *)buf = 138413570;
        *(void *)&uint8_t buf[4] = v30;
        if (v28) {
          v41 = @"YES";
        }
        else {
          v41 = @"NO";
        }
        *(void *)&buf[14] = v40;
        *(_WORD *)&buf[12] = 2112;
        if (v35) {
          uint64_t v42 = @"YES";
        }
        else {
          uint64_t v42 = @"NO";
        }
        *(_WORD *)&buf[22] = 2112;
        *(void *)&buf[24] = v41;
        if (v36) {
          v43 = @"YES";
        }
        else {
          v43 = @"NO";
        }
        *(_WORD *)&buf[32] = 2112;
        if (!updated) {
          id v39 = @"NO";
        }
        *(void *)&buf[34] = v42;
        *(_WORD *)&buf[42] = 2112;
        *(void *)&buf[44] = v43;
        v65 = 2112;
        id v66 = v39;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "Created interface %@ for IDS Nexus %@ %@ %@ %@ %@",  buf,  0x3Eu);
      }

      id v44 = objc_alloc_init(&OBJC_CLASS___IDSNexusAgent);
      agent = v3->_agent;
      v3->_agent = v44;

      id v46 = v3->_agent;
      id v47 = objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
      -[IDSNexusAgent setAgentUUID:](v46, "setAgentUUID:", v47);

      -[IDSNexusAgent setActive:](v3->_agent, "setActive:", 1LL);
      id v48 = objc_alloc(&OBJC_CLASS___NWNetworkAgentRegistration);
      id v50 = -[NWNetworkAgentRegistration initWithNetworkAgentClass:]( v48,  "initWithNetworkAgentClass:",  objc_opt_class(&OBJC_CLASS___IDSNexusAgent, v49));
      registration = v3->_registration;
      v3->_registration = v50;

      LOBYTE(v47) = -[NWNetworkAgentRegistration registerNetworkAgent:]( v3->_registration,  "registerNetworkAgent:",  v3->_agent);
      id v52 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog ClientChannelManager]( &OBJC_CLASS___IDSFoundationLog,  "ClientChannelManager"));
      id v53 = os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT);
      if ((v47 & 1) == 0)
      {
        if (v53)
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "registerNetworkAgent failed", buf, 2u);
        }

        IDSNetworkingLogDump("IDSNexusManager agent registration", 16LL);
        goto LABEL_20;
      }

      if (v53)
      {
        v54 = v3->_agent;
        v55 = (void *)objc_claimAutoreleasedReturnValue(-[IDSNexusAgent agentUUID](v54, "agentUUID"));
        else {
          uint64_t v56 = @"NO";
        }
        v57 = (void *)objc_claimAutoreleasedReturnValue(-[NWNetworkAgentRegistration registeredUUID](v3->_registration, "registeredUUID"));
        *(_DWORD *)buf = 134218754;
        *(void *)&uint8_t buf[4] = v54;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v55;
        *(_WORD *)&buf[22] = 2112;
        *(void *)&buf[24] = v56;
        *(_WORD *)&buf[32] = 2112;
        *(void *)&buf[34] = v57;
        _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "Registered IDS Nexus Agent (%p) %@ (isRegistered %@ registrationUUID %@)",  buf,  0x2Au);
      }

      if ((-[NWNetworkAgentRegistration addNetworkAgentToInterfaceNamed:]( v3->_registration,  "addNetworkAgentToInterfaceNamed:",  v30) & 1) == 0)
      {
        id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog ClientChannelManager]( &OBJC_CLASS___IDSFoundationLog,  "ClientChannelManager"));
        if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_19;
        }
        *(_WORD *)buf = 0;
        id v24 = "addNetworkAgentToInterfaceNamed failed";
        goto LABEL_18;
      }

LABEL_45:
      id v26 = v3;
      goto LABEL_46;
    }

    id v18 = (void *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog ClientChannelManager](&OBJC_CLASS___IDSFoundationLog, "ClientChannelManager"));
    if (os_log_type_enabled((os_log_t)v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      id v25 = "NEVirtualInterfaceCreate failed";
      goto LABEL_13;
    }
  }

  else
  {
    id v18 = (void *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog ClientChannelManager](&OBJC_CLASS___IDSFoundationLog, "ClientChannelManager"));
    if (os_log_type_enabled((os_log_t)v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      id v25 = "nw_nexus_create failed";
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v18, OS_LOG_TYPE_DEFAULT, v25, buf, 2u);
    }
  }

  LODWORD(v25) = a4->var23;
  v95 = v25;
  else {
    id v25 = v25;
  }
  uint64_t v94 = v25;
  if ((int)v25 >= 1)
  {
    id v26 = 0LL;
    p_var28 = &a4->var28;
    var3 = a4->var24[0].var3;
    while (1)
    {
      *(void *)v108 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&id v28 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)buf = v28;
      *(_OWORD *)&uint8_t buf[16] = v28;
      IDSByteBufferInitForWrite(buf);
      id v29 = a4->var25;
      v105 = a4->var25;
      var21 = a4->var21;
      var22 = a4->var22;
      id v30 = (char *)a4 + 96 * v26;
      __int128 v31 = v30 + 448;
      int v32 = *((_DWORD *)v30 + 134);
      if (!self->_multiplexerEnabled) {
        break;
      }
      if (v95 > 1)
      {
        __int16 v34 = _IDSLinkPacketBufferCreateWithUserBuffer( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSDSession.m",  5355LL,  *v31,  a4->var24[v26].var1);
        uint64_t v35 = v34;
        if ((v32 & 1) != 0)
        {
          *(_DWORD *)(v34 + 536) |= 1u;
          *(void *)(v34 + 48_Block_object_dispose((const void *)(v1 - 224), 8) = a4->var24[v26].var4;
        }

        id v33 = -[IDSMultiplexerGroupSessionTransport tryConsumePacketBuffer:]( self->_multiplexerTransport,  "tryConsumePacketBuffer:",  v34,  v75,  v77,  v79);
        _IDSLinkPacketBufferRelease( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSDSession.m",  5361LL,  v35);
      }

      else
      {
        id v33 = -[IDSMultiplexerGroupSessionTransport tryConsumePacketBuffer:]( self->_multiplexerTransport,  "tryConsumePacketBuffer:",  a4);
      }

      if (v105 > 0) {
        goto LABEL_33;
      }
      if ((v33 & 1) == 0) {
        goto LABEL_113;
      }
LABEL_116:
      IDSByteBufferRelease(buf);
      ++v26;
      var3 += 48;
      if (v26 == v94) {
        goto LABEL_117;
      }
    }

    if (v29 > 0)
    {
      id v33 = 0;
LABEL_33:
      IDSByteBufferWriteField(buf, 1LL, &v105, 1LL);
      IDSByteBufferWriteField(buf, 14LL, &var21, 2LL);
      IDSByteBufferWriteField(buf, 20LL, &var22, 1LL);
      __int128 v36 = *p_var28;
      if (*p_var28 > 0.0) {
        IDSByteBufferWriteField(buf, 22LL, p_var28, 8LL);
      }
      if ((v32 & 2) != 0)
      {
        uint64_t v37 = (char *)a4 + 96 * v26;
        uint64_t v38 = *((_DWORD *)v37 + 115);
        id v39 = v38 < 1 ? 1 : v33;
        if ((v39 & 1) == 0)
        {
          uint64_t v40 = v37 + 460;
          memset(v106, 170, 24);
          IDSByteBufferWriteField(buf, 35LL, v40, 1LL);
          v41 = *v40;
          if ((int)v41 < 1)
          {
            v43 = v106;
          }

          else
          {
            uint64_t v42 = v106;
            v43 = &v106[v41];
            id v44 = var3;
            do
            {
              uint64_t v45 = *v44++;
              *v42++ = bswap32(v45) >> 16;
              --v41;
            }

            while (v41);
          }

          IDSByteBufferWriteField(buf, 36LL, v106, (unsigned __int16)((_WORD)v43 - (unsigned __int16)v106));
        }
      }

      if ((v32 & 1) != 0) {
        id v46 = v33;
      }
      else {
        id v46 = 1;
      }
      if ((v46 & 1) == 0)
      {
        *(void *)v106 = bswap64(a4->var24[v26].var4);
        IDSByteBufferWriteField(buf, 24LL, v106, 8LL);
      }

      if ((v32 & 8) != 0) {
        id v47 = v33;
      }
      else {
        id v47 = 1;
      }
      if ((v47 & 1) == 0)
      {
        LOBYTE(v106[0]) = a4->var24[v26].var5;
        IDSByteBufferWriteField(buf, 23LL, v106, 1LL);
      }

      if ((v32 & 0x10) != 0) {
        id v48 = v33;
      }
      else {
        id v48 = 1;
      }
      if ((v48 & 1) == 0)
      {
        v106[0] = bswap32(a4->var24[v26].var6) >> 16;
        IDSByteBufferWriteField(buf, 38LL, v106, 2LL);
      }

      if ((v32 & 0x20) != 0)
      {
        LOBYTE(v106[0]) = a4->var24[v26].var7;
        if ((v33 & 1) == 0) {
          IDSByteBufferWriteField(buf, 43LL, v106, 1LL);
        }
        -[IDSDSession _lightweightParticipantSync:](self, "_lightweightParticipantSync:", v36, v75);
      }

      if ((v32 & 4) != 0) {
        id v49 = v33;
      }
      else {
        id v49 = 1;
      }
      if ((v49 & 1) == 0) {
        IDSByteBufferWriteField(buf, 37LL, &a4->var24[v26].var8, 1LL);
      }
      if ((v32 & 0x80) != 0) {
        id v50 = v33;
      }
      else {
        id v50 = 1;
      }
      if ((v50 & 1) == 0) {
        IDSByteBufferWriteField(buf, 51LL, &a4->var24[v26].var9, 1LL);
      }
      if ((v32 & 0x40) != 0)
      {
        v102 = bswap32(a4->var24[v26].var10) >> 16;
        IDSByteBufferWriteField(buf, 45LL, &v102, 2LL);
        v101 = bswap32(a4->var24[v26].var11.var0) >> 16;
        IDSByteBufferWriteField(buf, 46LL, &v101, 2LL);
        uint64_t v100 = bswap32(a4->var24[v26].var11.var1) >> 16;
        IDSByteBufferWriteField(buf, 47LL, &v100, 2LL);
        v99 = bswap32(a4->var24[v26].var11.var2) >> 16;
        IDSByteBufferWriteField(buf, 48LL, &v99, 2LL);
        uint64_t v98 = bswap32(a4->var24[v26].var11.var3) >> 16;
        IDSByteBufferWriteField(buf, 49LL, &v98, 2LL);
        uint64_t v97 = bswap32(a4->var24[v26].var11.var4) >> 16;
        IDSByteBufferWriteField(buf, 50LL, &v97, 2LL);
        if (!a4->var2)
        {
          id v51 = OSLogHandleForIDSCategory("IDSDSession");
          id v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v106 = 67109632;
            *(_DWORD *)&v106[2] = v94;
            v106[4] = 1024;
            *(_DWORD *)&v106[5] = v102;
            v106[7] = 1024;
            *(_DWORD *)&v106[8] = HIBYTE(v102);
            _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "totalIncomingPackets= %d, statsID: %0x, %0x",  (uint8_t *)v106,  0x14u);
          }

          if (os_log_shim_legacy_logging_enabled(v53)
            && _IDSShouldLog(0LL, @"IDSDSession"))
          {
            uint64_t v77 = v102;
            v79 = HIBYTE(v102);
            v75 = v94;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"totalIncomingPackets= %d, statsID: %0x, %0x");
          }
        }
      }

      if ((v32 & 0x100) != 0) {
        v54 = v33;
      }
      else {
        v54 = 1;
      }
      if ((v54 & 1) == 0) {
        IDSByteBufferWriteField(buf, 52LL, &a4->var24[v26].var12, 1LL);
      }
      if ((v32 & 0x400) != 0) {
        v55 = v33;
      }
      else {
        v55 = 1;
      }
      if ((v55 & 1) == 0)
      {
        LOBYTE(v106[0]) = 1;
        IDSByteBufferWriteField(buf, 67LL, v106, 1LL);
      }

      if ((v32 & 0x2000) != 0 && ((a4->var24[v26].var16 - LOBYTE(self->_currentSessionStateCounter)) & 0x80) == 0)
      {
        uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState", v36));
        v57 = [v56 sharedSession];

        if (v57)
        {
          id v60 = im_primary_queue(v58, v59);
          __int128 v61 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v60);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472LL;
          block[2] = sub_10009E12C;
          block[3] = &unk_1008F6010;
          block[4] = self;
          __int128 v62 = dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT,  QOS_CLASS_USER_INITIATED,  0,  block);
          dispatch_async(v61, v62);
        }
      }

      if ((v32 & 0x10000) != 0) {
        __int128 v63 = v33;
      }
      else {
        __int128 v63 = 1;
      }
      if ((v63 & 1) == 0)
      {
        LOBYTE(v106[0]) = 1;
        IDSByteBufferWriteField(buf, 71LL, v106, 1LL);
      }

      if ((v32 & 0x20000) != 0) {
        __int128 v64 = v33;
      }
      else {
        __int128 v64 = 1;
      }
      if ((v64 & 1) == 0)
      {
        LOBYTE(v106[0]) = 1;
        IDSByteBufferWriteField(buf, 72LL, v106, 1LL);
      }

      if ((v33 & 1) != 0)
      {
        if ((v32 & 0x40) != 0) {
          -[IDSDSession writeToClientChannel:packetBuffer:metaData:metadataSize:]( self,  "writeToClientChannel:packetBuffer:metaData:metadataSize:",  self->_clientChannel,  0LL,  v36);
        }
        goto LABEL_116;
      }
    }

            self = v19;
            id v9 = v18;
            id v8 = v40;
            int8x16_t v14 = v39;
          }

          id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue([v9[440] registration]);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412802;
            id v50 = v14;
            id v51 = 2112;
            id v52 = v11;
            id v53 = 2112;
            v54 = v17;
            _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Notified of registration success for service: %@   registration: %@   account: %@",  buf,  0x20u);
          }

          id v25 = [v17 accountType];
          if (v8 & 1 | (v25 != 0))
          {
            if (v25 == 1)
            {
              id v26 = (void *)objc_claimAutoreleasedReturnValue([v17 service]);
              __int16 v27 = [v26 iCloudBasedService];

              if (!(v35 & 1 | ((v27 & 1) == 0)))
              {
                id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue([v9[440] registration]);
                if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Kicking Apple ID iCloud based accounts repair",  buf,  2u);
                }

                -[IDSAccountRepair repairiCloudBasedAccounts](self, "repairiCloudBasedAccounts");
                uint64_t v35 = 1;
              }

              if ((v27 & 1) == 0)
              {
                id v29 = (void *)objc_claimAutoreleasedReturnValue([v17 dsID]);
                if ((-[NSMutableSet containsObject:](v34, "containsObject:", v29) & 1) == 0)
                {
                  id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue([v9[440] registration]);
                  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 138412290;
                    id v50 = v29;
                    _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Kicking Apple ID non-iCloud based accounts matching dsID: %@ repair",  buf,  0xCu);
                  }

                  __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([v17 service]);
                  -[IDSAccountRepair _repairAccountsWithSuccessfullAppleIDRegistrationForDSID:service:]( self,  "_repairAccountsWithSuccessfullAppleIDRegistrationForDSID:service:",  v29,  v31);

                  -[NSMutableSet addObject:](v34, "addObject:", v29);
                }
              }
            }
          }

          else
          {
            int v32 = (os_log_s *)objc_claimAutoreleasedReturnValue([v9[440] registration]);
            if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Kicking phone number accounts repair",  buf,  2u);
            }

            -[IDSAccountRepair _repairAccountsWithSuccessfulPhoneNumberRegistration]( self,  "_repairAccountsWithSuccessfulPhoneNumberRegistration");
            id v8 = 1;
          }
        }

        uint64_t v38 = [obj countByEnumeratingWithState:&v45 objects:v56 count:16];
      }

      while (v38);
    }

    BOOL v4 = v33;
    __int16 v7 = (os_log_s *)v34;
  }
}
}

    goto LABEL_20;
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
  if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v6,  OS_LOG_TYPE_DEFAULT,  "Tried to disable a primary account with no unique ID, ignoring...",  buf,  2u);
  }

        if (([v13 isAdHocAccount] & 1) != 0
          || ![v13 isRegistered])
        {
          id v10 = 0LL;
        }

        else
        {
          id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = v27;
            id v39 = v13;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Using %@ to trigger a re-register",  buf,  0xCu);
          }

          id v10 = v13;
        }

        continue;
      }

      int8x16_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = (void *)objc_claimAutoreleasedReturnValue([v13 smallDescription]);
        *(_DWORD *)buf = v27;
        id v39 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Cleaning up local account %@", buf, 0xCu);
      }

      -[NSMutableSet addObject:](v5, "addObject:", v13);
      if (!v10) {
        goto LABEL_19;
      }
    }

    id v8 = [obj countByEnumeratingWithState:&v33 objects:v40 count:16];
  }

  while (v8);
LABEL_30:

  __int128 v31 = 0u;
  int v32 = 0u;
  id v29 = 0u;
  id v30 = 0u;
  id v21 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v5, "allObjects"));
  id v22 = [v21 countByEnumeratingWithState:&v29 objects:v37 count:16];
  if (v22)
  {
    id v23 = v22;
    id v24 = *(void *)v30;
    do
    {
      for (j = 0LL; j != v23; j = (char *)j + 1)
      {
        if (*(void *)v30 != v24) {
          objc_enumerationMutation(v21);
        }
        -[IDSDAccountController _removeAccount:]( self,  "_removeAccount:",  *(void *)(*((void *)&v29 + 1) + 8LL * (void)j));
      }

      id v23 = [v21 countByEnumeratingWithState:&v29 objects:v37 count:16];
    }

    while (v23);
  }

  if ((v9 & (v10 != 0LL)) == 1)
  {
    id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "One of the local accounts was registered in the cloud, triggering a re-register to update",  buf,  2u);
    }

    [v10 registerAccount];
  }
}

  return v19;
}

  return v19;
}
}

  id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
  {
    int v32 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_participantsWaitingForStableKeyMaterials,  "objectForKeyedSubscript:",  v6));
    *(_DWORD *)buf = 138412802;
    id v44 = v10;
    uint64_t v45 = 2112;
    id v46 = v6;
    id v47 = 2112;
    id v48 = v32;
    _os_log_error_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "sendKeyMaterialsToWaitingParticipantsForGroup - didn't send any SKMs to %@ of the group %@ (pending participants %@)",  buf,  0x20u);
  }

LABEL_22:
  sub_100190804((id *)&v41);
}

  id v24 = *(void **)(a1 + 48);
  id v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v16));
  [v24 setObject:v25 forKey:v5];
}

  id v24 = *(void **)(a1 + 48);
  id v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v16));
  [v24 setObject:v25 forKey:v5];
}
}

  return v20;
}

  id v18 = OSLogHandleForIDSCategory("IDSDaemon");
  id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    id v20 = (id)objc_claimAutoreleasedReturnValue([a1[6] guid]);
    id v21 = [v3 lastCall];
    id v22 = @"NO";
    if (v21) {
      id v22 = @"YES";
    }
    *(_DWORD *)buf = 138412546;
    __int128 v36 = v20;
    uint64_t v37 = 2112;
    uint64_t v38 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Deleting sent outgoing non-urgent local message with guid %@? %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v23) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v24 = (void *)objc_claimAutoreleasedReturnValue([a1[6] guid]);
    id v25 = [v3 lastCall];
    id v26 = @"NO";
    if (v25) {
      id v26 = @"YES";
    }
    id v29 = v24;
    id v30 = v26;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Deleting sent outgoing non-urgent local message with guid %@? %@");
  }

  __int16 v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "guid", v29, v30));
  id v28 = (void *)objc_claimAutoreleasedReturnValue([a1[6] alternateGUID]);
  +[IDSDMessageStore deleteOutgoingMessageWithGUID:alternateGUID:dataProtectionClass:]( IDSDMessageStore,  "deleteOutgoingMessageWithGUID:alternateGUID:dataProtectionClass:",  v27,  v28,  [a1[7] dataProtectionClass]);

LABEL_29:
}

  id v18 = OSLogHandleForIDSCategory("IDSDaemon");
  id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    id v20 = (id)objc_claimAutoreleasedReturnValue([a1[6] guid]);
    id v21 = [v3 lastCall];
    id v22 = @"NO";
    if (v21) {
      id v22 = @"YES";
    }
    *(_DWORD *)buf = 138412546;
    __int128 v36 = v20;
    uint64_t v37 = 2112;
    uint64_t v38 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Deleting sent outgoing non-urgent local message with guid %@? %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v23) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v24 = (void *)objc_claimAutoreleasedReturnValue([a1[6] guid]);
    id v25 = [v3 lastCall];
    id v26 = @"NO";
    if (v25) {
      id v26 = @"YES";
    }
    id v29 = v24;
    id v30 = v26;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Deleting sent outgoing non-urgent local message with guid %@? %@");
  }

  __int16 v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "guid", v29, v30));
  id v28 = (void *)objc_claimAutoreleasedReturnValue([a1[6] alternateGUID]);
  +[IDSDMessageStore deleteOutgoingMessageWithGUID:alternateGUID:dataProtectionClass:]( IDSDMessageStore,  "deleteOutgoingMessageWithGUID:alternateGUID:dataProtectionClass:",  v27,  v28,  [a1[7] dataProtectionClass]);

LABEL_29:
}

    id v30 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v33 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString rawMessage](v16, "rawMessage"));
    if (v33)
    {
      CFDictionarySetValue((CFMutableDictionaryRef)v30, IDSIncomingMessagePushPayloadKey, v33);
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1006A8818();
    }

    if (value) {
      CFDictionarySetValue((CFMutableDictionaryRef)v30, IDSIncomingMessageOriginalEncryptionTypeKey, value);
    }
    if (v23) {
      CFDictionarySetValue((CFMutableDictionaryRef)v30, IDSIncomingMessageDecryptedDataKey, v23);
    }
    ((void (**)(void, NSMutableDictionary *, void, id))v22)[2](v22, v30, 0LL, v20);
LABEL_28:
  }
}
}

        objc_autoreleasePoolPop(v11);
        id v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      __int16 v7 = [v5 countByEnumeratingWithState:&v32 objects:v39 count:16];
    }

    while (v7);
  }

  objc_autoreleasePoolPop(context);
  id v16 = objc_autoreleasePoolPush();
  __int16 v17 = -[NSArray initWithArray:copyItems:](objc_alloc(&OBJC_CLASS___NSArray), "initWithArray:copyItems:", v25, 1LL);

  id v28 = 0u;
  id v29 = 0u;
  id v26 = 0u;
  __int16 v27 = 0u;
  id v18 = v17;
  id v19 = -[NSArray countByEnumeratingWithState:objects:count:]( v18,  "countByEnumeratingWithState:objects:count:",  &v26,  v36,  16LL);
  if (v19)
  {
    id v20 = v19;
    id v21 = *(void *)v27;
    do
    {
      for (i = 0LL; i != v20; i = (char *)i + 1)
      {
        if (*(void *)v27 != v21) {
          objc_enumerationMutation(v18);
        }
        -[IDSDServiceController _loadService:]( self,  "_loadService:",  *(void *)(*((void *)&v26 + 1) + 8LL * (void)i));
      }

      id v20 = -[NSArray countByEnumeratingWithState:objects:count:]( v18,  "countByEnumeratingWithState:objects:count:",  &v26,  v36,  16LL);
    }

    while (v20);
  }

  objc_autoreleasePoolPop(v16);
  id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
    sub_1006AACB0();
  }
}
}

        uint64_t v56 = __clz(__rbit64(v53));
        v53 &= v53 - 1;
      }
    }

    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
    do
    {
      __break(1u);
LABEL_86:
      if (v49 < 0) {
        char v133 = v49;
      }
      else {
        char v133 = v49 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v49);
      v83 = _CocoaArrayWrapper.endIndex.getter(v133);
      swift_bridgeObjectRelease(v49);
LABEL_43:
      swift_bridgeObjectRelease(v49);
      v157 = v83;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, &v158, v12 + 24, v12 + 32);
      swift_bridgeObjectRelease(v49);
      *(_WORD *)(v12 + 32) = 2048;
      uint64_t v84 = v134;
      v85 = *(void *)(v134 + 16);
      swift_bridgeObjectRelease(v134);
      v157 = v85;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, &v158, v12 + 34, v12 + 42);
      swift_bridgeObjectRelease(v84);
      _os_log_impl( (void *)&_mh_execute_header,  v47,  (os_log_type_t)v48,  "%s: set currentlySent to %ld materials (%ld succeeded wrapping, %ld failed)",  (uint8_t *)v12,  0x2Au);
      swift_arrayDestroy(v55, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);

      v69 = v140;
      uint64_t v74 = v139;
LABEL_45:
      v87 = v136;
      id v47 = (os_log_s *)Logger.logObject.getter(v86);
      uint64_t v88 = static os_log_type_t.debug.getter();
      id v12 = v88;
      if (os_log_type_enabled(v47, v88))
      {
        v89 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v90 = swift_slowAlloc(32LL, -1LL);
        aBlock[0] = v90;
        *(_DWORD *)v89 = 136315138;
        v157 = sub_1003FFBB0(0xD00000000000001FLL, v87 | 0x8000000000000000LL, aBlock);
        uint64_t v74 = v139;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, &v158, v89 + 4, v89 + 12);
        _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v12, "%s: newly sent", v89, 0xCu);
        swift_arrayDestroy(v90, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v90, -1LL, -1LL);
        swift_slowDealloc(v89, -1LL, -1LL);
      }

      id v48 = v135;
      id v49 = *(void *)&v69[v74];
      v91 = *(void *)(v49 + 56);
      v147 = v49 + 56;
      v92 = 1LL << *(_BYTE *)(v49 + 32);
      uint64_t v93 = -1LL;
      if (v92 < 64) {
        uint64_t v93 = ~(-1LL << v92);
      }
      v55 = v93 & v91;
      v151 = (unint64_t)(v92 + 63) >> 6;
      swift_bridgeObjectRetain(v49);
      uint64_t v94 = 0LL;
      __int16 v146 = v87 | 0x8000000000000000LL;
      v145 = (unint64_t)&type metadata for Any + 8;
      while (v55)
      {
        while (1)
        {
          v95 = __clz(__rbit64(v55));
          v55 &= v55 - 1;
          v96 = v95 | (v94 << 6);
LABEL_67:
          uint64_t v100 = v149;
          sub_1003F5FC8( *(void *)(v49 + 48) + *(void *)(v152.n128_u64[0] + 72) * v96,  v149,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
          v101 = sub_1003F600C( v100,  (uint64_t)v48,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
          id v47 = v153;
          v102 = (os_log_s *)Logger.logObject.getter(v101);
          unsigned int v103 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v102, v103)) {
            break;
          }

          sub_1003F6050((uint64_t)v48, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
          if (!v55) {
            goto LABEL_53;
          }
        }

        id v12 = swift_slowAlloc(22LL, -1LL);
        v104 = swift_slowAlloc(64LL, -1LL);
        aBlock[0] = v104;
        *(_DWORD *)id v12 = v148.n128_u32[0];
        *(void *)(v12 + 4) = sub_1003FFBB0(0xD00000000000001FLL, v146, aBlock);
        *(_WORD *)(v12 + 12) = 2080;
        v105 = sub_10040A2B0( &qword_1009B9880,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer,  (uint64_t)&unk_10071BF54);
        v106 = dispatch thunk of CustomStringConvertible.description.getter(v150, v105);
        id v47 = (os_log_s *)v107;
        *(void *)(v12 + 14) = sub_1003FFBB0(v106, v107, aBlock);
        swift_bridgeObjectRelease(v47);
        sub_1003F6050((uint64_t)v48, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
        _os_log_impl((void *)&_mh_execute_header, v102, v103, "%s    %s", (uint8_t *)v12, 0x16u);
        swift_arrayDestroy(v104, 2LL, v145);
        swift_slowDealloc(v104, -1LL, -1LL);
        swift_slowDealloc(v12, -1LL, -1LL);
      }

  swift_release(v209);
  uint64_t v73 = *(os_unfair_lock_s **)((char *)v2 + v64);
  swift_retain(v73);
  os_unfair_lock_lock(v73 + 4);
  swift_release(v73);
  uint64_t v74 = (void *)((char *)v2
                 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_participantsById);
  swift_beginAccess( (char *)v2 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_participantsById,  &v214,  0LL,  0LL);
  id v51 = *v74;
  __int128 v63 = *v74 + 64;
  v75 = 1LL << *(_BYTE *)(*v74 + 32);
  v76 = -1LL;
  if (v75 < 64) {
    v76 = ~(-1LL << v75);
  }
  uint64_t v77 = v76 & *(void *)(*v74 + 64);
  id v39 = (unint64_t)(v75 + 63) >> 6;
  swift_bridgeObjectRetain(*v74);
  __int128 v64 = 0LL;
  v69 = v189;
  while (1)
  {
    if (v77)
    {
      uint64_t v78 = __clz(__rbit64(v77));
      v77 &= v77 - 1;
      v79 = v78 | (v64 << 6);
      goto LABEL_23;
    }

    v81 = v64 + 1;
    if (__OFADD__(v64, 1LL))
    {
      __break(1u);
      __break(1u);
      goto LABEL_91;
    }

    uint64_t v82 = (uint64_t)v201;
    if (v81 >= v39) {
      goto LABEL_41;
    }
    v68 = *(void *)(v63 + 8 * v81);
    ++v64;
    if (!v68)
    {
      __int128 v64 = v81 + 1;
      if (v81 + 1 >= v39) {
        goto LABEL_41;
      }
      v68 = *(void *)(v63 + 8 * v64);
      if (!v68)
      {
        __int128 v64 = v81 + 2;
        if (v81 + 2 >= v39) {
          goto LABEL_41;
        }
        v68 = *(void *)(v63 + 8 * v64);
        if (!v68)
        {
          __int128 v64 = v81 + 3;
          if (v81 + 3 >= v39) {
            goto LABEL_41;
          }
          v68 = *(void *)(v63 + 8 * v64);
          if (!v68) {
            break;
          }
        }
      }
    }

      __break(1u);
      goto LABEL_20;
    }

    __break(1u);
    goto LABEL_19;
  }

  if ((a4 & 1) == 0)
  {
LABEL_21:
    __break(1u);
    return;
  }

  if (a5 < 0) {
    id v9 = a5;
  }
  else {
    id v9 = a5 & 0xFFFFFFFFFFFFFF8LL;
  }
  id v10 = __CocoaDictionary.lookup(_:)(a2, a3, v9);
  id v12 = v11;
  id v28 = v10;
  uint64_t v13 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
  swift_unknownObjectRetain(v10, v14);
  swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v13, 7LL);
  swift_unknownObjectRelease(v10, v15);
  id v28 = v12;
  id v16 = type metadata accessor for IDSGroupPushMaterialExchangeMember(0LL);
  swift_unknownObjectRetain(v12, v17);
  swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v16, 7LL);
  *a1 = v29;
  swift_unknownObjectRelease(v12, v18);
}

  swift_bridgeObjectRelease(v16);
  __int128 v125 = (id)objc_opt_self(&OBJC_CLASS___IDSPeerIDManager);
  uint64_t v37 = [v125 sharedInstance];
  if (!v37) {
    goto LABEL_83;
  }
  uint64_t v38 = v37;
  id v39 = v148;
  uint64_t v40 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
  swift_bridgeObjectRetain(v39);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v39);
  uint64_t v42 = String._bridgeToObjectiveC()();
  v43 = [v38 endpointsForURIs:isa service:v42 fromURI:v129];

  if (v43)
  {
    id v44 = sub_1003F5CB4((uint64_t *)&unk_1009BC2C0);
    uint64_t v45 = sub_100438928( (unint64_t *)&unk_1009BAC00,  (unint64_t *)&unk_1009BC270,  &OBJC_CLASS___IDSURI_ptr);
    __int128 v126 = v40;
    id v46 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v43, v40, v44, v45);

    a4 = 0LL;
    id v47 = 1LL << *(_BYTE *)(v46 + 32);
    id v48 = -1LL;
    if (v47 < 64) {
      id v48 = ~(-1LL << v47);
    }
    id v16 = v48 & *(void *)(v46 + 64);
    __int128 v131 = v46 + 64;
    char v133 = (unint64_t)(v47 + 63) >> 6;
    while (1)
    {
      if (v16)
      {
        id v50 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        id v51 = v50 | (a4 << 6);
      }

      else
      {
        id v52 = __OFADD__(a4++, 1LL);
        if (v52) {
          goto LABEL_68;
        }
        if (a4 >= v133)
        {
LABEL_54:
          swift_release(v46);
          v76 = *v123;
          if ((unint64_t)*v123 >> 62)
          {
            if (v76 < 0) {
              v113 = *v123;
            }
            else {
              v113 = v76 & 0xFFFFFFFFFFFFFF8LL;
            }
            swift_bridgeObjectRetain(*v123);
            id v114 = _CocoaArrayWrapper.endIndex.getter(v113);
            swift_bridgeObjectRelease(v76);
            uint64_t v77 = v122;
            if (!v114) {
              goto LABEL_78;
            }
LABEL_56:
            uint64_t v78 = swift_retain_n(v77, 2LL);
            v79 = (os_log_s *)Logger.logObject.getter(v78);
            v80 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v79, v80))
            {
              v81 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
              uint64_t v82 = swift_slowAlloc(32LL, -1LL);
              aBlock = v82;
              *(_DWORD *)v81 = 136315138;
              swift_beginAccess(v123, v138, 0LL, 0LL);
              v83 = *(void *)(v77 + 16);
              swift_bridgeObjectRetain(v83);
              v85 = Array.description.getter(v84, v126);
              v87 = v86;
              uint64_t v88 = v83;
              id v12 = v136;
              swift_bridgeObjectRelease(v88);
              v145 = sub_1003FFBB0(v85, v87, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &v146, v81 + 4, v81 + 12);
              swift_bridgeObjectRelease(v87);
              swift_release_n(v77, 2LL);
              _os_log_impl( (void *)&_mh_execute_header,  v79,  v80,  "We don't have cached results for %s - need to query",  v81,  0xCu);
              swift_arrayDestroy(v82, 1LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v82, -1LL, -1LL);
              swift_slowDealloc(v81, -1LL, -1LL);
            }

            else
            {

              swift_release_n(v77, 2LL);
            }

            v89 = [a1 _registrationCert];
            if (!v89)
            {
              v107 = swift_bridgeObjectRelease(v148);
              v108 = (os_log_s *)Logger.logObject.getter(v107);
              v109 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v108, v109))
              {
                uint64_t v110 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                *(_WORD *)uint64_t v110 = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v108,  v109,  "Cannot query without a cert - returning",  v110,  2u);
                id v111 = v110;
                uint64_t v77 = v122;
                swift_slowDealloc(v111, -1LL, -1LL);
              }

              goto LABEL_79;
            }

            uint64_t v90 = v89;
            v91 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v89);
            uint64_t v93 = v92;

            uint64_t v94 = [v125 sharedInstance];
            if (!v94) {
              goto LABEL_85;
            }
            v95 = v94;
            swift_bridgeObjectRelease(v148);
            swift_beginAccess(v123, &v145, 0LL, 0LL);
            v96 = *(void *)(v77 + 16);
            swift_bridgeObjectRetain(v96);
            uint64_t v97 = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease(v96);
            __int128 v137 = v91;
            uint64_t v98 = Data._bridgeToObjectiveC()().super.isa;
            v99 = String._bridgeToObjectiveC()();
            aBlock = 0LL;
            __int128 v140 = 0xE000000000000000LL;
            _StringGuts.grow(_:)(26LL);
            swift_bridgeObjectRelease(v140);
            aBlock = 0xD000000000000017LL;
            __int128 v140 = 0x8000000100840D20LL;
            String.append(_:)(v119);
            v100._countAndFlagsBits = 93LL;
            v100._object = (void *)0xE100000000000000LL;
            String.append(_:)(v100);
            __int128 v134 = v93;
            v101 = v140;
            v102 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v101);
            unsigned int v103 = (void *)swift_allocObject(&unk_100906250, 56LL, 7LL);
            v103[2] = v135;
            v103[3] = v122;
            v103[4] = v12;
            v103[5] = a8;
            v103[6] = a9;
            v143 = sub_100478CA8;
            v144 = v103;
            aBlock = (unint64_t)_NSConcreteStackBlock;
            __int128 v140 = 1107296256LL;
            __int128 v141 = sub_10045DB9C;
            v142 = &unk_100906268;
            v104 = _Block_copy(&aBlock);
            v105 = v144;
            v106 = v135;
            swift_retain(v122);
            swift_retain(v12);
            swift_retain(a9);
            swift_release(v105);
            LOBYTE(v11_Block_object_dispose((const void *)(v1 - 224), 8) = 0;
            [v95 startQueryForURIs:v97 fromIdentity:v98 fromURI:v129 fromService:v99 forSending:0 forRefresh:0 isForced:v118 reason:v102 completionBlock:v104];
            _Block_release(v104);

            uint64_t v77 = v122;
            sub_100402A84(v137, v134);
          }

          else
          {
            uint64_t v77 = v122;
            if (*(void *)((v76 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
              goto LABEL_56;
            }
LABEL_78:
            swift_bridgeObjectRelease(v148);
LABEL_79:
            uint64_t v115 = *(void *)(v12 + 16);
            id v116 = swift_bridgeObjectRetain(v115);
            a8(v116);
            swift_bridgeObjectRelease(v115);
          }

          swift_release(v77);
          return swift_release(v12);
        }

        id v53 = *(void *)(v131 + 8 * a4);
        if (!v53)
        {
          v54 = a4 + 1;
          if (a4 + 1 >= v133) {
            goto LABEL_54;
          }
          id v53 = *(void *)(v131 + 8 * v54);
          if (!v53)
          {
            v54 = a4 + 2;
            if (a4 + 2 >= v133) {
              goto LABEL_54;
            }
            id v53 = *(void *)(v131 + 8 * v54);
            if (!v53)
            {
              v54 = a4 + 3;
              if (a4 + 3 >= v133) {
                goto LABEL_54;
              }
              id v53 = *(void *)(v131 + 8 * v54);
              if (!v53)
              {
                while (1)
                {
                  a4 = v54 + 1;
                  if (__OFADD__(v54, 1LL)) {
                    goto LABEL_69;
                  }
                  if (a4 >= v133) {
                    goto LABEL_54;
                  }
                  id v53 = *(void *)(v131 + 8 * a4);
                  ++v54;
                  if (v53) {
                    goto LABEL_38;
                  }
                }
              }
            }
          }

          a4 = v54;
        }

  if (v4 != v7) {
    goto LABEL_21;
  }
  id v8 = 1;
  __int16 v7 = v4;
LABEL_22:
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

        uint64_t result = swift_release_n(v76, 2LL);
        os_log_s *v75 = v89;
        return result;
      }
    }

    v54 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    swift_retain(v76);
LABEL_18:
    v54(v28, 1LL, 1LL, v10);
    goto LABEL_19;
  }

  __break(1u);
  return result;
}

id sub_10002F7B0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _generateKTRegistrationData:*(void *)(a1 + 40)];
}

void sub_100030034(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 40) && !*(_BYTE *)(a1 + 41) && !*(_BYTE *)(a1 + 42)) {
    return;
  }
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) publicMessageProtectionDataToRegisterForClassA]);
  if (!v2) {
    return;
  }
  id v20 = (id)v2;
  uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) publicMessageProtectionDataToRegisterForClassC]);
  if (!v3)
  {
LABEL_21:

    return;
  }

  BOOL v4 = (void *)v3;
  uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) publicMessageProtectionDataToRegisterForClassD]);
  if (!v5)
  {
LABEL_20:

    goto LABEL_21;
  }

  id v6 = (void *)v5;
  __int16 v7 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
  uint64_t v8 = objc_claimAutoreleasedReturnValue([v7 pairedDevicePublicKey]);
  if (!v8)
  {
LABEL_19:

    goto LABEL_20;
  }

  id v9 = (void *)v8;
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
  uint64_t v11 = objc_claimAutoreleasedReturnValue([v10 pairedDevicePublicClassAKey]);
  if (!v11)
  {

    goto LABEL_19;
  }

  id v12 = (void *)v11;
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
  int8x16_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 pairedDevicePublicClassCKey]);

  if (v14)
  {
    uint64_t v15 = OSLogHandleForTransportCategory("ClassKeys");
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "We saved our keys, resuming OTR session negotiation",  buf,  2u);
    }

    uint64_t v18 = os_log_shim_legacy_logging_enabled(v17);
    if ((_DWORD)v18 && _IDSShouldLogTransport(v18))
    {
      _IDSLogTransport(@"ClassKeys", @"IDS", @"We saved our keys, resuming OTR session negotiation");
      if (_IDSShouldLog(0LL, @"ClassKeys")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"ClassKeys",  @"We saved our keys, resuming OTR session negotiation");
      }
    }

    id v19 = (void *)objc_claimAutoreleasedReturnValue(+[IDSOTRController sharedInstance](&OBJC_CLASS___IDSOTRController, "sharedInstance"));
    [v19 resumeSessionNegotiation];
  }

void sub_1000317DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 40LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      LOWORD(v14) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Already scheduled timer for purge of previous identity",  (uint8_t *)&v14,  2u);
    }
  }

  else
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v14 = 134217984;
      uint64_t v15 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Scheduling timer for purge of previous identity {delay: %f}",  (uint8_t *)&v14,  0xCu);
    }

    id v6 = objc_alloc(&OBJC_CLASS___IMTimer);
    double v7 = *(double *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v10 = im_primary_queue(v6, v9);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    uint64_t v11 = -[IMTimer initWithTimeInterval:name:shouldWake:target:selector:userInfo:queue:]( v6,  "initWithTimeInterval:name:shouldWake:target:selector:userInfo:queue:",  @"com.apple.identityservicesd.identity-purge",  0LL,  v8,  "_purgePreviousIdentityTimerFired",  0LL,  v3,  v7);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;
  }
}

id sub_1000319B0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _purgePreviousIdentityTimerFired];
}

void sub_100031A84(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0LL;
}

void sub_100031B34(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 48LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      LOWORD(v14) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Already scheduled timer for purge of previous identity",  (uint8_t *)&v14,  2u);
    }
  }

  else
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v14 = 134217984;
      uint64_t v15 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Scheduling timer for regneration of registered identity {delay: %f}",  (uint8_t *)&v14,  0xCu);
    }

    id v6 = objc_alloc(&OBJC_CLASS___IMTimer);
    double v7 = *(double *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v10 = im_primary_queue(v6, v9);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    uint64_t v11 = -[IMTimer initWithTimeInterval:name:shouldWake:target:selector:userInfo:queue:]( v6,  "initWithTimeInterval:name:shouldWake:target:selector:userInfo:queue:",  @"com.apple.identityservicesd.identity-regenerate",  0LL,  v8,  "_regenerateIdentityTimerFired",  0LL,  v3,  v7);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void **)(v12 + 48);
    *(void *)(v12 + 4_Block_object_dispose((const void *)(v1 - 224), 8) = v11;
  }
}

id sub_100031D08(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _regenerateIdentityTimerFired];
}

void sub_100031E3C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 48);
  *(void *)(v2 + 4_Block_object_dispose((const void *)(v1 - 224), 8) = 0LL;
}

void sub_10003269C( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_1000326B0(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_1000326BC( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_1000326DC(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_1000326E8( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

  ;
}

  ;
}

void sub_10003273C( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_100032750(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

void sub_100032770(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

  ;
}

  ;
}

  ;
}

void sub_1000327BC(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_1000327C8(uint64_t a1, uint64_t a2)
{
  return a2;
}

  ;
}

  ;
}

uint64_t sub_1000327F4(uint64_t result, uint64_t a2, float a3)
{
  *(float *)a2 = a3;
  *(void *)(a2 + 4) = result;
  return result;
}

  ;
}

  ;
}

void sub_100032B38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100032B60(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100032B70(uint64_t a1)
{
}

void sub_100032B78(uint64_t a1)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL))
  {
    uint64_t v2 = (void **)IMWeakLinkSymbol("CNContactIdentifierKey", @"Contacts");
    if (v2) {
      uint64_t v3 = *v2;
    }
    else {
      uint64_t v3 = 0LL;
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), v3);
  }

void *sub_100032D14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11, unsigned __int8 a12, unsigned __int8 a13, unsigned __int8 a14, uint64_t a15, uint64_t a16, unsigned __int8 a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, unsigned __int8 a22, uint64_t a23, unsigned __int8 a24, uint64_t a25, unsigned __int8 a26, unsigned __int8 a27, unsigned __int8 a28, unsigned __int8 a29, unsigned __int8 a30, uint64_t a31, uint64_t a32, unsigned __int8 a33, uint64_t a34, unsigned __int8 a35, uint64_t a36, unsigned __int8 a37, uint64_t a38, uint64_t a39, uint64_t a40, unsigned __int8 a41, unsigned __int8 a42, uint64_t a43, unsigned __int8 a44, unsigned __int8 a45, unsigned __int8 a46, unsigned __int8 a47, unsigned __int8 a48, unsigned __int8 a49, uint64_t a50,uint64_t a51,unsigned __int8 a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56)
{
  id v64 = a56;
  pthread_once(&stru_1009B4F00, (void (*)(void))sub_100037F88);
  uint64_t Instance = _CFRuntimeCreateInstance(a1, qword_1009BE600, 16LL, 0LL);
  id v66 = (void *)Instance;
  if (Instance)
  {
    uint64_t v75 = a8;
    *(void *)(Instance + 16) = 0LL;
    *(void *)(Instance + cut_arc_os_release(v1 - 24) = 0LL;
    *(_DWORD *)(Instance + 16) = 0;
    id v67 = v64;
    [v67 ensureDatabaseIsInitialized];
    v69 = (const void *)CSDBRecordCreate(&off_1008F6910);

    if (v69)
    {
      id v74 = v64;
      uint64_t v71 = 0LL;
      v76[0] = a2;
      v76[1] = a3;
      v76[2] = a4;
      v76[3] = a5;
      v76[4] = a6;
      v76[5] = a7;
      v76[6] = v75;
      v76[7] = a9;
      v76[8] = a10;
      v76[9] = a11;
      v76[10] = a12;
      v76[11] = a13;
      v76[12] = a14;
      v76[13] = a15;
      v76[14] = a16;
      v76[15] = a17;
      v76[16] = a18;
      v76[17] = a19;
      v76[18] = a20;
      v76[19] = a21;
      v76[20] = a22;
      v76[21] = a23;
      v76[22] = a24;
      v76[23] = a25;
      v76[24] = a26;
      v76[25] = a27;
      v76[26] = a28;
      v76[27] = a30;
      v76[28] = a31;
      v76[29] = a32;
      v76[30] = a33;
      v76[31] = a34;
      v76[32] = a35;
      v76[33] = a36;
      v76[34] = a37;
      v76[35] = a38;
      v76[36] = a39;
      v76[37] = a40;
      v76[38] = a41;
      v76[39] = a42;
      v76[40] = a43;
      v76[41] = a29;
      v76[42] = a44;
      v76[43] = a45;
      v76[44] = a46;
      v76[45] = a47;
      v76[46] = a48;
      v76[47] = a49;
      v76[48] = a50;
      v76[49] = a51;
      v76[50] = a52;
      v76[51] = a53;
      v76[52] = a54;
      v76[53] = a55;
      do
      {
        CSDBRecordSetProperty(v69, dword_1009BE608[v71], v76[v71]);
        ++v71;
      }

      while (v71 != 54);
      if (sub_100033074((uint64_t)v69, v67))
      {
        v66[3] = (int)CSDBRecordGetID(v69);
        id v64 = v74;
      }

      else
      {
        CFRelease(v66);
        id v66 = 0LL;
        id v64 = v74;
      }

      CFRelease(v69);
    }

    else
    {
      CFRelease(v66);
      id v66 = 0LL;
    }
  }

  return v66;
}

uint64_t sub_100033074(uint64_t a1, void *a2)
{
  uint64_t v9 = 0LL;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2020000000LL;
  char v12 = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000331E0;
  v5[3] = &unk_1008F68F0;
  double v7 = &v9;
  uint64_t v8 = a1;
  id v2 = a2;
  id v6 = v2;
  sub_1003AFCA0(v5, v2);
  uint64_t v3 = *((unsigned __int8 *)v10 + 24);

  _Block_object_dispose(&v9, 8);
  return v3;
}

void sub_100033120(_Unwind_Exception *a1)
{
}

const void *sub_100033138(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = a4;
  pthread_once(&stru_1009B4F00, (void (*)(void))sub_100037F88);
  uint64_t Instance = _CFRuntimeCreateInstance(a1, qword_1009BE600, 16LL, 0LL);
  if (Instance)
  {
    uint64_t v9 = (const void *)Instance;
    *(void *)(Instance + 16) = 0LL;
    *(void *)(Instance + cut_arc_os_release(v1 - 24) = a2;
    *(_DWORD *)(Instance + 16) = 0;
    if (a3) {
      uint64_t v10 = (const void *)sub_10003329C(a2, v7);
    }
    else {
      uint64_t v10 = (const void *)sub_100033390(a2, v7);
    }
    if (v10)
    {
      uint64_t v11 = v9;
    }

    else
    {
      uint64_t v10 = v9;
      uint64_t v11 = 0LL;
    }

    CFRelease(v10);
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  return v11;
}

void sub_1000331E0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 48))
  {
    CSDBRecordStoreAddRecord(a2);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = CSDBRecordSaveStore(a2);
    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
    {
      if (CSDBRecordStoreGetDatabase(a2))
      {
        if (_IMWillLog(@"IMDSpotlight", v4)) {
          _IMAlwaysLog( 0LL,  @"IMDSpotlight",  @"Done with IDSOutgoingMessageRecordAddMessageRecord, lets update Spotlight with this message record.");
        }
        int ID = CSDBRecordGetID(*(void *)(a1 + 48));
        id v6 = sub_100033138((uint64_t)kCFAllocatorDefault, ID, 0, *(void **)(a1 + 32));
        if (v6) {
          CFRelease(v6);
        }
      }
    }
  }

uint64_t sub_10003329C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v7 = 0LL;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2020000000LL;
  uint64_t v10 = 0LL;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100033350;
  v6[3] = &unk_1008F69B8;
  void v6[4] = &v7;
  v6[5] = a1;
  sub_1003AFCA0(v6, v3);
  uint64_t v4 = v8[3];
  _Block_object_dispose(&v7, 8);

  return v4;
}

void sub_100033338( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100033350(uint64_t a1, uint64_t a2)
{
  uint64_t result = CSDBRecordStoreCopyInstanceOfClassWithUID(a2, &off_1008F6910, *(unsigned int *)(a1 + 40));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_100033390(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v7 = 0LL;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2020000000LL;
  uint64_t v10 = 0LL;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100033444;
  v6[3] = &unk_1008F69B8;
  void v6[4] = &v7;
  v6[5] = a1;
  sub_1003AFD04(v6, v3);
  uint64_t v4 = v8[3];
  _Block_object_dispose(&v7, 8);

  return v4;
}

void sub_10003342C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100033444(uint64_t a1, uint64_t a2)
{
  uint64_t result = CSDBRecordStoreCopyInstanceOfClassWithUID(a2, &off_1008F6910, *(unsigned int *)(a1 + 40));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

BOOL sub_100033484(const __CFString *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a1 && CFStringGetLength(a1))
  {
    uint64_t v10 = 0LL;
    uint64_t v11 = &v10;
    if (a2) {
      id v6 = @"SELECT COUNT(1) FROM outgoing_message WHERE guid = ? AND alternate_guid = ? AND pending_delete = 0 LIMIT 1;";
    }
    else {
      id v6 = @"SELECT COUNT(1) FROM outgoing_message WHERE guid = ? AND pending_delete = 0 LIMIT 1;";
    }
    uint64_t v12 = 0x2020000000LL;
    char v13 = 0;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100033580;
    v9[3] = &unk_1008F69E0;
    v9[5] = a1;
    v9[6] = a2;
    v9[4] = &v10;
    sub_1003AFDCC((uint64_t)v6, v9, v5);
    BOOL v7 = *((_BYTE *)v11 + 24) != 0;
    _Block_object_dispose(&v10, 8);
  }

  else
  {
    BOOL v7 = 0LL;
  }

  return v7;
}

void sub_100033568( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100033580(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1[6];
  if (v6) {
    CSDBSqliteBindTextFromCFString(a4, v6);
  }
  uint64_t result = CSDBSqliteStep(a4);
  if ((_DWORD)result)
  {
    uint64_t result = CSDBSqliteStatementInteger64ResultColumn(a4, 0LL);
    *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) = result > 0;
  }

  return result;
}

uint64_t sub_1000335E8()
{
  return 0LL;
}

uint64_t sub_1000335F0(uint64_t a1, uint64_t a2, char a3, void *a4, void *a5)
{
  id v9 = a4;
  uint64_t v19 = 0LL;
  id v20 = &v19;
  uint64_t v21 = 0x2020000000LL;
  uint64_t v22 = 0LL;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_1000336E0;
  v13[3] = &unk_1008F6A08;
  char v18 = a3;
  id v10 = a5;
  uint64_t v16 = a2;
  uint64_t v17 = a1;
  id v14 = v10;
  uint64_t v15 = &v19;
  sub_1003AFD68(v13, v9);
  uint64_t v11 = v20[3];

  _Block_object_dispose(&v19, 8);
  return v11;
}

void sub_1000336C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1000336E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0LL, 0LL);
  CFStringAppend( Mutable,  @"SELECT DISTINCT account_guid FROM outgoing_message WHERE priority = ? AND is_sent = 0 AND pending_delete = 0 ");
  if (*(_BYTE *)(a1 + 64)) {
    CFStringAppend(Mutable, @"AND duet_identifiers IS NOT NULL ");
  }
  if ([*(id *)(a1 + 32) count])
  {
    CFStringAppend(Mutable, @"AND message_type ");
    uint64_t v6 = (const __CFString *)CSDBGenerateInClauseForCount([*(id *)(a1 + 32) count]);
    CFStringAppend(Mutable, v6);
  }

  CFStringAppend(Mutable, @"LIMIT ?");
  uint64_t v7 = CSDBSqliteDatabaseStatementForReading(a3, Mutable);
  if (v7)
  {
    uint64_t v8 = v7;
    if (*(void *)(v7 + 8))
    {
      CSDBSqliteBindInt64(v7, *(void *)(a1 + 48));
      if ([*(id *)(a1 + 32) count])
      {
        __int128 v19 = 0u;
        __int128 v20 = 0u;
        __int128 v17 = 0u;
        __int128 v18 = 0u;
        id v9 = *(id *)(a1 + 32);
        id v10 = [v9 countByEnumeratingWithState:&v17 objects:v21 count:16];
        if (v10)
        {
          id v11 = v10;
          uint64_t v12 = *(void *)v18;
          do
          {
            for (i = 0LL; i != v11; i = (char *)i + 1)
            {
              if (*(void *)v18 != v12) {
                objc_enumerationMutation(v9);
              }
              CSDBSqliteBindInt64( v8,  objc_msgSend(*(id *)(*((void *)&v17 + 1) + 8 * (void)i), "longLongValue", (void)v17));
            }

            id v11 = [v9 countByEnumeratingWithState:&v17 objects:v21 count:16];
          }

          while (v11);
        }
      }

      CSDBSqliteBindInt64(v8, *(void *)(a1 + 56));
      while (1)
      {
        uint64_t v14 = CSDBSqliteStatementCopyStringResult(v8);
        if (!v14) {
          break;
        }
        uint64_t v15 = (const void *)v14;
        uint64_t v16 = *(__CFArray **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
        if (!v16)
        {
          *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = CFArrayCreateMutable( 0LL,  0LL,  &kCFTypeArrayCallBacks);
          uint64_t v16 = *(__CFArray **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
        }

        CFArrayAppendValue(v16, v15);
        CFRelease(v15);
      }

      CSDBSqliteStatementReset(v8);
    }
  }

  if (Mutable) {
    CFRelease(Mutable);
  }
}

uint64_t sub_10003391C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v9 = 0LL;
  id v10 = &v9;
  uint64_t v11 = 0x2020000000LL;
  uint64_t v12 = 0LL;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1000339E0;
  v8[3] = &unk_1008F6A30;
  v8[5] = a2;
  v8[6] = a1;
  v8[4] = &v9;
  sub_1003AFD68(v8, v5);
  uint64_t v6 = v10[3];
  _Block_object_dispose(&v9, 8);

  return v6;
}

void sub_1000339C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1000339E0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = CSDBSqliteDatabaseStatementForReading( a3,  @"SELECT duet_identifiers FROM outgoing_message WHERE priority = ? AND is_sent = 0 AND bypass_duet = 0 AND pending_delete = 0 AND account_guid = ? ");
  if (result)
  {
    uint64_t v5 = result;
    if (*(void *)(result + 8))
    {
      CSDBSqliteBindInt64(result, a1[5]);
      uint64_t v6 = a1[6];
      if (v6) {
        CSDBSqliteBindTextFromCFString(v5, v6);
      }
      while (1)
      {
        uint64_t v7 = CSDBSqliteStatementCopyDataResult(v5);
        if (!v7) {
          break;
        }
        uint64_t v8 = (const void *)v7;
        uint64_t v9 = *(__CFArray **)(*(void *)(a1[4] + 8LL) + 24LL);
        if (!v9)
        {
          *(void *)(*(void *)(a1[4] + 8LL) + 24LL) = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
          uint64_t v9 = *(__CFArray **)(*(void *)(a1[4] + 8LL) + 24LL);
        }

        CFArrayAppendValue(v9, v8);
        CFRelease(v8);
      }

      return CSDBSqliteStatementReset(v5);
    }
  }

  return result;
}

uint64_t sub_100033AC0(void *a1)
{
  id v1 = a1;
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  uint64_t v8 = 0LL;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100033B70;
  v4[3] = &unk_1008F6A58;
  v4[4] = &v5;
  sub_1003AFD68(v4, v1);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_100033B58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100033B70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = CSDBSqliteDatabaseStatementForReading( a3,  @"SELECT SUM(stored_size) FROM outgoing_message WHERE pending_delete = 0 ");
  if (result)
  {
    uint64_t v5 = result;
    if (*(void *)(result + 8))
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = CSDBSqliteStatementInteger64Result(result, 0LL);
      return CSDBSqliteStatementReset(v5);
    }
  }

  return result;
}

uint64_t sub_100033BD4(void *a1)
{
  id v1 = a1;
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  uint64_t v8 = 0LL;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100033C84;
  v4[3] = &unk_1008F6A58;
  v4[4] = &v5;
  sub_1003AFD68(v4, v1);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_100033C6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100033C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = CSDBSqliteDatabaseStatementForReading( a3,  @"SELECT account_guid, count(ROWID) FROM outgoing_message GROUP BY account_guid");
  if (result)
  {
    uint64_t v5 = result;
    if (*(void *)(result + 8))
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = CSDBSqliteStatementCopyAllRowsStringsForColumnsAtIndices( result,  &off_1009486B8);
      return CSDBSqliteStatementReset(v5);
    }
  }

  return result;
}

uint64_t sub_100033CEC(void *a1)
{
  id v1 = a1;
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  uint64_t v8 = 0LL;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100033D9C;
  v4[3] = &unk_1008F6A58;
  v4[4] = &v5;
  sub_1003AFD68(v4, v1);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_100033D84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100033D9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = CSDBSqliteDatabaseStatementForReading( a3,  @"SELECT account_guid, MAX(sum_stored_size) FROM (SELECT account_guid, SUM(stored_size) AS sum_stored_size FROM outgoing_message WHERE pending_delete = 0 GROUP BY account_guid) ");
  if (result)
  {
    uint64_t v5 = result;
    if (*(void *)(result + 8))
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = CSDBSqliteStatementCopyStringsForColumnsAtIndices( result,  &off_1009486D0);
      return CSDBSqliteStatementReset(v5);
    }
  }

  return result;
}

uint64_t sub_100033E04(void *a1)
{
  id v1 = a1;
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  uint64_t v8 = 0LL;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100033EB4;
  v4[3] = &unk_1008F6A58;
  v4[4] = &v5;
  sub_1003AFD68(v4, v1);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_100033E9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100033EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = CSDBSqliteDatabaseStatementForReading( a3,  @"SELECT account_guid, count(ROWID) FROM outgoing_message GROUP BY account_guid ORDER BY count(ROWID) DESC LIMIT 1 ");
  if (result)
  {
    uint64_t v5 = result;
    if (*(void *)(result + 8))
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = CSDBSqliteStatementCopyStringsForColumnsAtIndices( result,  &off_1009486E8);
      return CSDBSqliteStatementReset(v5);
    }
  }

  return result;
}

__CFArray *sub_100033F1C(const __CFArray *a1, void *a2)
{
  id v3 = a2;
  CFIndex Count = CFArrayGetCount(a1);
  CFMutableDictionaryRef Mutable = 0LL;
  if (Count << 32)
  {
    CFIndex v6 = 0LL;
    CFIndex v7 = (int)Count;
    else {
      uint64_t v8 = (int)Count;
    }
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v6);
      int ID = CSDBRecordGetID(ValueAtIndex);
      uint64_t v11 = sub_100033138((uint64_t)kCFAllocatorDefault, ID, 0, v3);
      uint64_t v12 = v11;
      if (!Mutable) {
        break;
      }
      if (v11) {
        goto LABEL_7;
      }
LABEL_8:
      if (v8 == ++v6) {
        goto LABEL_12;
      }
    }

    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, v7, &kCFTypeArrayCallBacks);
    if (!v12) {
      goto LABEL_8;
    }
LABEL_7:
    CFArrayAppendValue(Mutable, v12);
    CFRelease(v12);
    goto LABEL_8;
  }

uint64_t sub_100034010(uint64_t a1, void *a2, char a3)
{
  uint64_t v11 = 0LL;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000LL;
  uint64_t v14 = 0LL;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1000340DC;
  v6[3] = &unk_1008F6A80;
  char v10 = a3;
  uint64_t v8 = &v11;
  uint64_t v9 = a1;
  id v3 = a2;
  id v7 = v3;
  sub_1003AFD68(v6, v3);
  uint64_t v4 = v12[3];

  _Block_object_dispose(&v11, 8);
  return v4;
}

void sub_1000340C4(_Unwind_Exception *a1)
{
}

void sub_1000340DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0LL, 0LL);
  id v7 = Mutable;
  if (*(_BYTE *)(a1 + 56)) {
    uint64_t v8 = @"SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, include_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, kt_uri_verification_map, wants_firewall_donation, send_mode, delivery_minimum_time_delay, delivery_minimum_time FROM outgoing_message ";
  }
  else {
    uint64_t v8 = @"SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, NULL AS message_data, NULL AS data, NULL AS protobuf_data, destinations, NULL AS data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, include_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, kt_uri_verification_map, wants_firewall_donation, send_mode, delivery_minimum_time_delay, delivery_minimum_time FROM outgoing_message ";
  }
  CFStringAppend(Mutable, v8);
  CFStringAppend(v7, @"WHERE pending_delete = 0 AND guid = ? ");
  uint64_t v9 = CSDBSqliteDatabaseStatementForReading(a3, v7);
  if (v9)
  {
    uint64_t v10 = v9;
    if (*(void *)(v9 + 8))
    {
      CSDBSqliteBindTextFromCFString(v9, *(void *)(a1 + 48));
      uint64_t v11 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_1008F6910, v10, 0LL, 0LL);
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = sub_100033F1C(v11, *(void **)(a1 + 32));
      CSDBSqliteStatementReset(v10);
      if (v11) {
        CFRelease(v11);
      }
    }
  }

  if (v7) {
    CFRelease(v7);
  }
}

uint64_t sub_1000341D0(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v13 = 0LL;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2020000000LL;
  uint64_t v16 = 0LL;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1000342AC;
  v7[3] = &unk_1008F6AA8;
  char v12 = a4;
  uint64_t v10 = a2;
  uint64_t v11 = a1;
  uint64_t v9 = &v13;
  id v4 = a3;
  id v8 = v4;
  sub_1003AFD68(v7, v4);
  uint64_t v5 = v14[3];

  _Block_object_dispose(&v13, 8);
  return v5;
}

void sub_100034294(_Unwind_Exception *a1)
{
}

void sub_1000342AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0LL, 0LL);
  id v7 = Mutable;
  if (*(_BYTE *)(a1 + 64)) {
    id v8 = @"SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, include_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, kt_uri_verification_map, wants_firewall_donation, send_mode, delivery_minimum_time_delay, delivery_minimum_time FROM outgoing_message ";
  }
  else {
    id v8 = @"SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, NULL AS message_data, NULL AS data, NULL AS protobuf_data, destinations, NULL AS data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, include_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, kt_uri_verification_map, wants_firewall_donation, send_mode, delivery_minimum_time_delay, delivery_minimum_time FROM outgoing_message ";
  }
  CFStringAppend(Mutable, v8);
  CFStringAppend(v7, @"WHERE is_sent = 0 AND pending_delete = 0 AND account_guid = ? ");
  if (*(void *)(a1 + 48)) {
    uint64_t v9 = @"AND local_destination_device_uuid = ? ";
  }
  else {
    uint64_t v9 = @"AND local_destination_device_uuid is null ";
  }
  CFStringAppend(v7, v9);
  uint64_t v10 = CSDBSqliteDatabaseStatementForReading(a3, v7);
  if (v10)
  {
    uint64_t v11 = v10;
    if (*(void *)(v10 + 8))
    {
      CSDBSqliteBindTextFromCFString(v10, *(void *)(a1 + 56));
      uint64_t v12 = *(void *)(a1 + 48);
      if (v12) {
        CSDBSqliteBindTextFromCFString(v11, v12);
      }
      uint64_t v13 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_1008F6910, v11, 0LL, 0LL);
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = sub_100033F1C(v13, *(void **)(a1 + 32));
      CSDBSqliteStatementReset(v11);
      if (v13) {
        CFRelease(v13);
      }
    }
  }

  if (v7) {
    CFRelease(v7);
  }
}

uint64_t sub_1000343D4(uint64_t a1, void *a2, char a3)
{
  uint64_t v11 = 0LL;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000LL;
  uint64_t v14 = 0LL;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1000344A0;
  v6[3] = &unk_1008F6A80;
  char v10 = a3;
  id v8 = &v11;
  uint64_t v9 = a1;
  id v3 = a2;
  id v7 = v3;
  sub_1003AFD68(v6, v3);
  uint64_t v4 = v12[3];

  _Block_object_dispose(&v11, 8);
  return v4;
}

void sub_100034488(_Unwind_Exception *a1)
{
}

void sub_1000344A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0LL, 0LL);
  id v7 = Mutable;
  if (*(_BYTE *)(a1 + 56)) {
    id v8 = @"SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, include_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, kt_uri_verification_map, wants_firewall_donation, send_mode, delivery_minimum_time_delay, delivery_minimum_time FROM outgoing_message ";
  }
  else {
    id v8 = @"SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, NULL AS message_data, NULL AS data, NULL AS protobuf_data, destinations, NULL AS data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, include_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, kt_uri_verification_map, wants_firewall_donation, send_mode, delivery_minimum_time_delay, delivery_minimum_time FROM outgoing_message ";
  }
  CFStringAppend(Mutable, v8);
  CFStringAppend( v7,  @"WHERE is_sent = 0 AND pending_delete = 0 AND expiration_date > 0 AND expiration_date <= ? LIMIT ? ");
  uint64_t v9 = CSDBSqliteDatabaseStatementForReading(a3, v7);
  if (v9)
  {
    uint64_t v10 = v9;
    if (*(void *)(v9 + 8))
    {
      +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
      CSDBSqliteBindInt64(v10, (uint64_t)v11);
      CSDBSqliteBindInt64(v10, *(void *)(a1 + 48));
      uint64_t v12 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_1008F6910, v10, 0LL, 0LL);
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = sub_100033F1C(v12, *(void **)(a1 + 32));
      CSDBSqliteStatementReset(v10);
      if (v12) {
        CFRelease(v12);
      }
    }
  }

  if (v7) {
    CFRelease(v7);
  }
}

uint64_t sub_1000345AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v7 = 0LL;
  id v8 = &v7;
  uint64_t v9 = 0x2020000000LL;
  uint64_t v10 = 0LL;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100034660;
  v6[3] = &unk_1008F6AD0;
  void v6[4] = &v7;
  v6[5] = a1;
  sub_1003AFD68(v6, v3);
  uint64_t v4 = v8[3];
  _Block_object_dispose(&v7, 8);

  return v4;
}

void sub_100034648( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100034660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0LL, 0LL);
  CFStringAppend( Mutable,  @"SELECT DISTINCT account_guid FROM outgoing_message WHERE is_sent = 0 AND pending_delete = 0 LIMIT ? ");
  uint64_t v6 = CSDBSqliteDatabaseStatementForReading(a3, Mutable);
  if (v6)
  {
    uint64_t v7 = v6;
    if (*(void *)(v6 + 8))
    {
      CSDBSqliteBindInt64(v6, *(void *)(a1 + 40));
      while (1)
      {
        uint64_t v8 = CSDBSqliteStatementCopyStringResult(v7);
        if (!v8) {
          break;
        }
        uint64_t v9 = (const void *)v8;
        uint64_t v10 = *(__CFArray **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
        if (!v10)
        {
          *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = CFArrayCreateMutable( 0LL,  0LL,  &kCFTypeArrayCallBacks);
          uint64_t v10 = *(__CFArray **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
        }

        CFArrayAppendValue(v10, v9);
        CFRelease(v9);
      }

      CSDBSqliteStatementReset(v7);
    }
  }

  if (Mutable) {
    CFRelease(Mutable);
  }
}

uint64_t sub_100034764(void *a1, uint64_t a2, uint64_t a3, void *a4, char a5)
{
  id v8 = a1;
  id v9 = a4;
  if ([v8 count])
  {
    uint64_t v18 = 0LL;
    __int128 v19 = &v18;
    uint64_t v20 = 0x2020000000LL;
    uint64_t v21 = 0LL;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_100034874;
    v12[3] = &unk_1008F6AF8;
    char v17 = a5;
    uint64_t v15 = &v18;
    uint64_t v16 = a3;
    id v13 = v8;
    id v14 = v9;
    sub_1003AFD68(v12, v14);
    uint64_t v10 = v19[3];

    _Block_object_dispose(&v18, 8);
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  return v10;
}

void sub_10003485C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100034874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0LL, 0LL);
  uint64_t v7 = Mutable;
  if (*(_BYTE *)(a1 + 64)) {
    id v8 = @"SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, include_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, kt_uri_verification_map, wants_firewall_donation, send_mode, delivery_minimum_time_delay, delivery_minimum_time FROM outgoing_message ";
  }
  else {
    id v8 = @"SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, NULL AS message_data, NULL AS data, NULL AS protobuf_data, destinations, NULL AS data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, include_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, kt_uri_verification_map, wants_firewall_donation, send_mode, delivery_minimum_time_delay, delivery_minimum_time FROM outgoing_message ";
  }
  CFStringAppend(Mutable, v8);
  CFStringAppend(v7, @"WHERE is_sent = 0 AND pending_delete = 0 AND account_guid ");
  id v9 = (const __CFString *)CSDBGenerateInClauseForCount([*(id *)(a1 + 32) count]);
  CFStringAppend(v7, v9);
  CFStringAppend(v7, @"LIMIT ? ");
  uint64_t v10 = CSDBSqliteDatabaseStatementForReading(a3, v7);
  if (v10)
  {
    uint64_t v11 = v10;
    if (*(void *)(v10 + 8))
    {
      CSDBSqliteBindTextFromCFArrayOfCFStrings(v10, *(void *)(a1 + 32));
      CSDBSqliteBindInt64(v11, *(void *)(a1 + 56));
      uint64_t v12 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_1008F6910, v11, 0LL, 0LL);
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = sub_100033F1C(v12, *(void **)(a1 + 40));
      CSDBSqliteStatementReset(v11);
      if (v12) {
        CFRelease(v12);
      }
    }
  }

  if (v7) {
    CFRelease(v7);
  }
}

uint64_t sub_10003499C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char a6)
{
  id v11 = a1;
  id v12 = a5;
  if ([v11 count])
  {
    uint64_t v23 = 0LL;
    id v24 = &v23;
    uint64_t v25 = 0x2020000000LL;
    uint64_t v26 = 0LL;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_100034ADC;
    v15[3] = &unk_1008F6B20;
    char v22 = a6;
    uint64_t v19 = a3;
    uint64_t v20 = a2;
    uint64_t v21 = a4;
    id v16 = v11;
    uint64_t v18 = &v23;
    id v17 = v12;
    sub_1003AFD68(v15, v17);
    uint64_t v13 = v24[3];

    _Block_object_dispose(&v23, 8);
  }

  else
  {
    _IMWarn(@"NULL accountGUIDs passed to %s");
    uint64_t v13 = 0LL;
  }

  return v13;
}

void sub_100034AC4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_100034ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0LL, 0LL);
  uint64_t v7 = Mutable;
  if (*(_BYTE *)(a1 + 80)) {
    id v8 = @"SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, include_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, kt_uri_verification_map, wants_firewall_donation, send_mode, delivery_minimum_time_delay, delivery_minimum_time FROM outgoing_message ";
  }
  else {
    id v8 = @"SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, NULL AS message_data, NULL AS data, NULL AS protobuf_data, destinations, NULL AS data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, include_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, kt_uri_verification_map, wants_firewall_donation, send_mode, delivery_minimum_time_delay, delivery_minimum_time FROM outgoing_message ";
  }
  CFStringAppend(Mutable, v8);
  CFStringAppend(v7, @"WHERE is_sent = 0 AND pending_delete = 0 AND account_guid ");
  id v9 = (const __CFString *)CSDBGenerateInClauseForCount([*(id *)(a1 + 32) count]);
  CFStringAppend(v7, v9);
  CFStringAppend(v7, @"AND priority = ? ");
  if (*(void *)(a1 + 56)) {
    uint64_t v10 = @"AND local_destination_device_uuid = ? ";
  }
  else {
    uint64_t v10 = @"AND local_destination_device_uuid is null ";
  }
  CFStringAppend(v7, v10);
  CFStringAppend(v7, @"LIMIT ? ");
  uint64_t v11 = CSDBSqliteDatabaseStatementForReading(a3, v7);
  if (v11)
  {
    uint64_t v12 = v11;
    if (*(void *)(v11 + 8))
    {
      CSDBSqliteBindTextFromCFArrayOfCFStrings(v11, *(void *)(a1 + 32));
      CSDBSqliteBindInt64(v12, *(void *)(a1 + 64));
      uint64_t v13 = *(void *)(a1 + 56);
      if (v13) {
        CSDBSqliteBindTextFromCFString(v12, v13);
      }
      CSDBSqliteBindInt64(v12, *(void *)(a1 + 72));
      id v14 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_1008F6910, v12, 0LL, 0LL);
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = sub_100033F1C(v14, *(void **)(a1 + 40));
      CSDBSqliteStatementReset(v12);
      if (v14) {
        CFRelease(v14);
      }
    }
  }

  if (v7) {
    CFRelease(v7);
  }
}

uint64_t sub_100034C54( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char a6, uint64_t a7, _BYTE *a8)
{
  id v15 = a1;
  id v16 = a5;
  if ([v15 count])
  {
    uint64_t v33 = 0LL;
    __int16 v34 = &v33;
    uint64_t v35 = 0x2020000000LL;
    uint64_t v36 = 0LL;
    uint64_t v29 = 0LL;
    id v30 = &v29;
    uint64_t v31 = 0x2020000000LL;
    char v32 = 1;
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_100034DE4;
    v19[3] = &unk_1008F6B48;
    char v28 = a6;
    uint64_t v24 = a3;
    uint64_t v25 = a2;
    uint64_t v26 = a7;
    uint64_t v27 = a4;
    id v20 = v15;
    char v22 = &v33;
    id v21 = v16;
    uint64_t v23 = &v29;
    sub_1003AFD68(v19, v21);
    if (a8) {
      *a8 = *((_BYTE *)v30 + 24);
    }
    uint64_t v17 = v34[3];

    _Block_object_dispose(&v29, 8);
    _Block_object_dispose(&v33, 8);
  }

  else
  {
    _IMWarn(@"NULL accountGUIDs passed to %s");
    uint64_t v17 = 0LL;
  }

  return v17;
}

void sub_100034DC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

void sub_100034DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0LL, 0LL);
  uint64_t v7 = Mutable;
  if (*(_BYTE *)(a1 + 96)) {
    id v8 = @"SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, include_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, kt_uri_verification_map, wants_firewall_donation, send_mode, delivery_minimum_time_delay, delivery_minimum_time FROM outgoing_message ";
  }
  else {
    id v8 = @"SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, NULL AS message_data, NULL AS data, NULL AS protobuf_data, destinations, NULL AS data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, include_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, kt_uri_verification_map, wants_firewall_donation, send_mode, delivery_minimum_time_delay, delivery_minimum_time FROM outgoing_message ";
  }
  CFStringAppend(Mutable, v8);
  CFStringAppend(v7, @"WHERE is_sent = 0 AND pending_delete = 0 AND account_guid ");
  id v9 = (const __CFString *)CSDBGenerateInClauseForCount([*(id *)(a1 + 32) count]);
  CFStringAppend(v7, v9);
  CFStringAppend(v7, @"AND priority = ? ");
  CFStringAppend(v7, @"AND message_type = ? ");
  if (*(void *)(a1 + 64)) {
    uint64_t v10 = @"AND local_destination_device_uuid = ? ";
  }
  else {
    uint64_t v10 = @"AND local_destination_device_uuid is null ";
  }
  CFStringAppend(v7, v10);
  CFStringAppend(v7, @"LIMIT ? ");
  uint64_t v11 = CSDBSqliteDatabaseStatementForReading(a3, v7);
  if (v11 && (uint64_t v12 = v11, *(void *)(v11 + 8)))
  {
    CSDBSqliteBindTextFromCFArrayOfCFStrings(v11, *(void *)(a1 + 32));
    CSDBSqliteBindInt64(v12, *(void *)(a1 + 72));
    CSDBSqliteBindInt64(v12, *(void *)(a1 + 80));
    uint64_t v13 = *(void *)(a1 + 64);
    if (v13) {
      CSDBSqliteBindTextFromCFString(v12, v13);
    }
    CSDBSqliteBindInt64(v12, *(void *)(a1 + 88));
    id v14 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_1008F6910, v12, 0LL, 0LL);
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = sub_100033F1C(v14, *(void **)(a1 + 40));
    CSDBSqliteStatementReset(v12);
    if (v14) {
      CFRelease(v14);
    }
    if (v7) {
      goto LABEL_14;
    }
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 0;
    if (v7) {
LABEL_14:
    }
      CFRelease(v7);
  }

uint64_t sub_100034F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, void *a7, int a8)
{
  id v15 = a7;
  if (a4)
  {
    uint64_t v34 = 0LL;
    uint64_t v35 = &v34;
    uint64_t v36 = 0x2020000000LL;
    uint64_t v37 = 0LL;
    uint64_t v30 = 0LL;
    uint64_t v31 = &v30;
    uint64_t v32 = 0x2020000000LL;
    CFMutableStringRef Mutable = (CFMutableStringRef)0xAAAAAAAAAAAAAAAALL;
    CFMutableStringRef Mutable = CFStringCreateMutable(0LL, 0LL);
    CFStringAppend((CFMutableStringRef)v31[3], @"SELECT DISTINCT ");
    if (a8) {
      uint64_t v16 = @"ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, include_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, kt_uri_verification_map, wants_firewall_donation, send_mode, delivery_minimum_time_delay, delivery_minimum_time ";
    }
    else {
      uint64_t v16 = @"ROWID, guid, alternate_guid, account_guid, from_identifier, NULL AS message_data, NULL AS data, NULL AS protobuf_data, destinations, NULL AS data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, include_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, kt_uri_verification_map, wants_firewall_donation, send_mode, delivery_minimum_time_delay, delivery_minimum_time ";
    }
    CFStringAppend((CFMutableStringRef)v31[3], v16);
    CFStringAppend((CFMutableStringRef)v31[3], @" FROM(  SELECT ");
    CFStringAppend((CFMutableStringRef)v31[3], v16);
    CFStringAppend( (CFMutableStringRef)v31[3],  @"  FROM outgoing_message o   WHERE priority = ? AND pending_delete = 0 AND is_sent = 0 AND account_guid = ? AND (bypass_duet = ? OR bypass_duet = ?) ");
    if (a6) {
      uint64_t v17 = @"AND local_destination_device_uuid = ? ";
    }
    else {
      uint64_t v17 = @"AND local_destination_device_uuid is null ";
    }
    CFStringAppend((CFMutableStringRef)v31[3], v17);
    CFStringAppend( (CFMutableStringRef)v31[3],  @"  ORDER BY ROWID ASC   LIMIT ? AS ofilt WHERE (SELECT SUM(stored_size) FROM outgoing_message s where s.ROWID <= ofilt.ROWID) <= ? UNION SELECT "));
    CFStringAppend((CFMutableStringRef)v31[3], v16);
    CFStringAppend((CFMutableStringRef)v31[3], @" FROM(  SELECT ");
    CFStringAppend((CFMutableStringRef)v31[3], v16);
    CFStringAppend( (CFMutableStringRef)v31[3],  @" FROM outgoing_message   WHERE priority = ? AND pending_delete = 0 AND is_sent = 0 AND account_guid = ? AND (bypass_duet = ? OR bypass_duet = ?) ");
    CFStringAppend((CFMutableStringRef)v31[3], v17);
    CFStringAppend((CFMutableStringRef)v31[3], @"  ORDER BY ROWID ASC LIMIT 1 "));
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_100035224;
    v20[3] = &unk_1008F6B70;
    char v22 = &v30;
    uint64_t v24 = a3;
    uint64_t v25 = a4;
    char v29 = a5;
    uint64_t v26 = a6;
    uint64_t v27 = a1;
    uint64_t v28 = a2;
    id v21 = v15;
    uint64_t v23 = &v34;
    sub_1003AFD68(v20, v21);
    uint64_t v18 = v35[3];

    _Block_object_dispose(&v30, 8);
    _Block_object_dispose(&v34, 8);
  }

  else
  {
    _IMWarn(@"NULL accountGUID passed to %s");
    uint64_t v18 = 0LL;
  }

  return v18;
}

void sub_1000351F8(_Unwind_Exception *a1)
{
}

void sub_100035224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = CSDBSqliteDatabaseStatementForReading(a3, *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL));
  if (v5)
  {
    uint64_t v6 = v5;
    if (*(void *)(v5 + 8))
    {
      CSDBSqliteBindInt64(v5, *(void *)(a1 + 56));
      CSDBSqliteBindTextFromCFString(v6, *(void *)(a1 + 64));
      CSDBSqliteBindInt64(v6, *(_BYTE *)(a1 + 96) == 0);
      CSDBSqliteBindInt64(v6, 0LL);
      uint64_t v7 = *(void *)(a1 + 72);
      if (v7) {
        CSDBSqliteBindTextFromCFString(v6, v7);
      }
      CSDBSqliteBindInt64(v6, *(void *)(a1 + 80));
      CSDBSqliteBindInt64(v6, *(void *)(a1 + 88));
      CSDBSqliteBindInt64(v6, *(void *)(a1 + 56));
      CSDBSqliteBindTextFromCFString(v6, *(void *)(a1 + 64));
      CSDBSqliteBindInt64(v6, *(_BYTE *)(a1 + 96) == 0);
      CSDBSqliteBindInt64(v6, 0LL);
      uint64_t v8 = *(void *)(a1 + 72);
      if (v8) {
        CSDBSqliteBindTextFromCFString(v6, v8);
      }
      id v9 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_1008F6910, v6, 0LL, 0LL);
      CFIndex Count = CFArrayGetCount(v9);
      if (Count << 32)
      {
        CFIndex v11 = 0LL;
        CFIndex v12 = (int)Count;
        else {
          uint64_t v13 = (int)Count;
        }
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v9, v11);
          int ID = CSDBRecordGetID(ValueAtIndex);
          uint64_t v16 = sub_100033138((uint64_t)kCFAllocatorDefault, ID, 0, *(void **)(a1 + 32));
          uint64_t v17 = v16;
          if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL)) {
            break;
          }
          if (v16) {
            goto LABEL_13;
          }
LABEL_14:
          if (v13 == ++v11) {
            goto LABEL_18;
          }
        }

        *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = CFArrayCreateMutable( kCFAllocatorDefault,  v12,  &kCFTypeArrayCallBacks);
        if (!v17) {
          goto LABEL_14;
        }
LABEL_13:
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL), v17);
        CFRelease(v17);
        goto LABEL_14;
      }

uint64_t sub_100035440( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, void *a7, int a8, void *a9)
{
  id v16 = a7;
  id v17 = a9;
  if (a4)
  {
    uint64_t v39 = 0LL;
    uint64_t v40 = &v39;
    uint64_t v41 = 0x2020000000LL;
    uint64_t v42 = 0LL;
    uint64_t v35 = 0LL;
    uint64_t v36 = &v35;
    uint64_t v37 = 0x2020000000LL;
    CFMutableStringRef Mutable = (CFMutableStringRef)0xAAAAAAAAAAAAAAAALL;
    CFMutableStringRef Mutable = CFStringCreateMutable(0LL, 0LL);
    CFStringAppend((CFMutableStringRef)v36[3], @"SELECT DISTINCT ");
    if (a8) {
      uint64_t v18 = @"ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, include_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, kt_uri_verification_map, wants_firewall_donation, send_mode, delivery_minimum_time_delay, delivery_minimum_time ";
    }
    else {
      uint64_t v18 = @"ROWID, guid, alternate_guid, account_guid, from_identifier, NULL AS message_data, NULL AS data, NULL AS protobuf_data, destinations, NULL AS data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, include_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, kt_uri_verification_map, wants_firewall_donation, send_mode, delivery_minimum_time_delay, delivery_minimum_time ";
    }
    CFStringAppend((CFMutableStringRef)v36[3], v18);
    CFStringAppend((CFMutableStringRef)v36[3], @" FROM(  SELECT ");
    CFStringAppend((CFMutableStringRef)v36[3], v18);
    CFStringAppend( (CFMutableStringRef)v36[3],  @"  FROM outgoing_message o   WHERE priority = ? AND pending_delete = 0 AND is_sent = 0 AND account_guid = ? AND (bypass_duet = ? OR bypass_duet = ?) ");
    if (a6) {
      uint64_t v19 = @"AND local_destination_device_uuid = ? ";
    }
    else {
      uint64_t v19 = @"AND local_destination_device_uuid is null ";
    }
    CFStringAppend((CFMutableStringRef)v36[3], v19);
    CFStringAppend( (CFMutableStringRef)v36[3],  @"  ORDER BY ROWID ASC   LIMIT ? AS ofilt WHERE (SELECT SUM(stored_size) FROM outgoing_message s where s.ROWID <= ofilt.ROWID) <= ? UNION SELECT "));
    CFStringAppend((CFMutableStringRef)v36[3], v18);
    CFStringAppend((CFMutableStringRef)v36[3], @" FROM(  SELECT ");
    CFStringAppend((CFMutableStringRef)v36[3], v18);
    CFStringAppend( (CFMutableStringRef)v36[3],  @" FROM outgoing_message   WHERE priority = ? AND pending_delete = 0 AND is_sent = 0 AND account_guid = ? AND (bypass_duet = ? OR bypass_duet = ?) ");
    CFStringAppend((CFMutableStringRef)v36[3], v19);
    if ([v17 count])
    {
      CFStringAppend((CFMutableStringRef)v36[3], @"AND message_type ");
      id v20 = (__CFString *)v36[3];
      id v21 = (const __CFString *)CSDBGenerateInClauseForCount([v17 count]);
      CFStringAppend(v20, v21);
    }

    CFStringAppend((CFMutableStringRef)v36[3], @"  ORDER BY ROWID ASC LIMIT 1 "));
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_10003573C;
    v24[3] = &unk_1008F6B98;
    uint64_t v27 = &v35;
    uint64_t v29 = a3;
    uint64_t v30 = a4;
    char v34 = a5;
    uint64_t v31 = a6;
    uint64_t v32 = a1;
    uint64_t v33 = a2;
    id v25 = v17;
    id v26 = v16;
    uint64_t v28 = &v39;
    sub_1003AFD68(v24, v26);
    uint64_t v22 = v40[3];

    _Block_object_dispose(&v35, 8);
    _Block_object_dispose(&v39, 8);
  }

  else
  {
    _IMWarn(@"NULL accountGUID passed to %s");
    uint64_t v22 = 0LL;
  }

  return v22;
}

void sub_100035710(_Unwind_Exception *a1)
{
}

void sub_10003573C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = CSDBSqliteDatabaseStatementForReading(a3, *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL));
  if (v5)
  {
    uint64_t v6 = v5;
    if (*(void *)(v5 + 8))
    {
      CSDBSqliteBindInt64(v5, *(void *)(a1 + 64));
      CSDBSqliteBindTextFromCFString(v6, *(void *)(a1 + 72));
      CSDBSqliteBindInt64(v6, *(_BYTE *)(a1 + 104) == 0);
      CSDBSqliteBindInt64(v6, 0LL);
      uint64_t v7 = *(void *)(a1 + 80);
      if (v7) {
        CSDBSqliteBindTextFromCFString(v6, v7);
      }
      CSDBSqliteBindInt64(v6, *(void *)(a1 + 88));
      CSDBSqliteBindInt64(v6, *(void *)(a1 + 96));
      CSDBSqliteBindInt64(v6, *(void *)(a1 + 64));
      CSDBSqliteBindTextFromCFString(v6, *(void *)(a1 + 72));
      CSDBSqliteBindInt64(v6, *(_BYTE *)(a1 + 104) == 0);
      CSDBSqliteBindInt64(v6, 0LL);
      uint64_t v8 = *(void *)(a1 + 80);
      if (v8) {
        CSDBSqliteBindTextFromCFString(v6, v8);
      }
      if ([*(id *)(a1 + 32) count])
      {
        __int128 v26 = 0u;
        __int128 v27 = 0u;
        __int128 v24 = 0u;
        __int128 v25 = 0u;
        id v9 = *(id *)(a1 + 32);
        id v10 = [v9 countByEnumeratingWithState:&v24 objects:v28 count:16];
        if (v10)
        {
          id v11 = v10;
          uint64_t v12 = *(void *)v25;
          do
          {
            uint64_t v13 = 0LL;
            do
            {
              if (*(void *)v25 != v12) {
                objc_enumerationMutation(v9);
              }
              CSDBSqliteBindInt64( v6,  objc_msgSend(*(id *)(*((void *)&v24 + 1) + 8 * (void)v13), "longLongValue", (void)v24));
              uint64_t v13 = (char *)v13 + 1;
            }

            while (v11 != v13);
            id v11 = [v9 countByEnumeratingWithState:&v24 objects:v28 count:16];
          }

          while (v11);
        }
      }

      id v14 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_1008F6910, v6, 0LL, 0LL);
      CFIndex Count = CFArrayGetCount(v14);
      if (Count << 32)
      {
        CFIndex v16 = 0LL;
        CFIndex v17 = (int)Count;
        else {
          uint64_t v18 = (int)Count;
        }
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v14, v16);
          int ID = CSDBRecordGetID(ValueAtIndex);
          id v21 = sub_100033138((uint64_t)kCFAllocatorDefault, ID, 0, *(void **)(a1 + 40));
          uint64_t v22 = v21;
          if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL)) {
            break;
          }
          if (v21) {
            goto LABEL_22;
          }
LABEL_23:
          if (v18 == ++v16) {
            goto LABEL_27;
          }
        }

        *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = CFArrayCreateMutable( kCFAllocatorDefault,  v17,  &kCFTypeArrayCallBacks);
        if (!v22) {
          goto LABEL_23;
        }
LABEL_22:
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL), v22);
        CFRelease(v22);
        goto LABEL_23;
      }

uint64_t sub_100035A30(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, void *a6, char a7)
{
  uint64_t v19 = 0LL;
  id v20 = &v19;
  uint64_t v21 = 0x2020000000LL;
  uint64_t v22 = 0LL;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100035B2C;
  v10[3] = &unk_1008F6BC0;
  char v17 = a7;
  char v18 = a4;
  uint64_t v13 = a3;
  uint64_t v14 = a5;
  uint64_t v15 = a2;
  uint64_t v16 = a1;
  id v7 = a6;
  id v11 = v7;
  uint64_t v12 = &v19;
  sub_1003AFD68(v10, v7);
  uint64_t v8 = v20[3];

  _Block_object_dispose(&v19, 8);
  return v8;
}

void sub_100035B14( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_100035B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFMutableStringRef Mutable = CFStringCreateMutable(0LL, 0LL);
  id v7 = Mutable;
  if (*(_BYTE *)(a1 + 80)) {
    uint64_t v8 = @"SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, include_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, kt_uri_verification_map, wants_firewall_donation, send_mode, delivery_minimum_time_delay, delivery_minimum_time FROM outgoing_message ";
  }
  else {
    uint64_t v8 = @"SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, NULL AS message_data, NULL AS data, NULL AS protobuf_data, destinations, NULL AS data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, include_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, kt_uri_verification_map, wants_firewall_donation, send_mode, delivery_minimum_time_delay, delivery_minimum_time FROM outgoing_message ";
  }
  CFStringAppend(Mutable, v8);
  CFStringAppend(v7, @"WHERE priority = ? AND is_sent = 0 AND pending_delete = 0 ");
  if (*(void *)(a1 + 48)) {
    CFStringAppend(v7, @"AND account_guid = ? ");
  }
  if (*(_BYTE *)(a1 + 81)) {
    CFStringAppend(v7, @"AND bypass_duet = 0 ");
  }
  if (*(void *)(a1 + 56)) {
    id v9 = @"AND local_destination_device_uuid = ? ";
  }
  else {
    id v9 = @"AND local_destination_device_uuid is null ";
  }
  CFStringAppend(v7, v9);
  CFStringAppend(v7, @"ORDER BY ROWID ASC LIMIT ?");
  uint64_t v10 = CSDBSqliteDatabaseStatementForReading(a3, v7);
  if (v10)
  {
    uint64_t v11 = v10;
    if (*(void *)(v10 + 8))
    {
      CSDBSqliteBindInt64(v10, *(void *)(a1 + 64));
      uint64_t v12 = *(void *)(a1 + 48);
      if (v12) {
        CSDBSqliteBindTextFromCFString(v11, v12);
      }
      uint64_t v13 = *(void *)(a1 + 56);
      if (v13) {
        CSDBSqliteBindTextFromCFString(v11, v13);
      }
      CSDBSqliteBindInt64(v11, *(void *)(a1 + 72));
      uint64_t v14 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_1008F6910, v11, 0LL, 0LL);
      CFIndex Count = CFArrayGetCount(v14);
      if (Count << 32)
      {
        CFIndex v16 = 0LL;
        CFIndex v17 = (int)Count;
        else {
          uint64_t v18 = (int)Count;
        }
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v14, v16);
          int ID = CSDBRecordGetID(ValueAtIndex);
          uint64_t v21 = sub_100033138((uint64_t)kCFAllocatorDefault, ID, 0, *(void **)(a1 + 32));
          uint64_t v22 = v21;
          if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
            break;
          }
          if (v21) {
            goto LABEL_23;
          }
LABEL_24:
          if (v18 == ++v16) {
            goto LABEL_28;
          }
        }

        *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = CFArrayCreateMutable( kCFAllocatorDefault,  v17,  &kCFTypeArrayCallBacks);
        if (!v22) {
          goto LABEL_24;
        }
LABEL_23:
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL), v22);
        CFRelease(v22);
        goto LABEL_24;
      }

LABEL_28:
      CSDBSqliteStatementReset(v11);
      if (v14) {
        CFRelease(v14);
      }
    }
  }

  if (v7) {
    CFRelease(v7);
  }
}

    id v52 = NSUnderlyingErrorKey;
    id v53 = v17;
    char v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v53,  &v52,  1LL));
    if (!a6) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }

  CFRelease(v12);

  error = 0LL;
  __int128 v24 = SecKeyCreateSignature(v23, kSecKeyAlgorithmECDSASignatureMessageX962SHA256, dataToSign, &error);
  __int128 v25 = v24;
  __int128 v26 = error;
  if (!a6 || v24)
  {
    if (error)
    {
      CFRelease(error);
      error = 0LL;
    }
  }

  else
  {
    if (error)
    {
      id v44 = NSUnderlyingErrorKey;
      uint64_t v45 = error;
      __int128 v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v45,  &v44,  1LL));
      uint64_t v28 = OSLogHandleForIDSCategory("Encryption");
      uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v47 = v26;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Security Error signing data: %@",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v30)
        && _IDSShouldLog(0LL, @"Encryption"))
      {
        uint64_t v39 = v26;
        _IDSLogV(0LL, @"IDSFoundation", @"Encryption", @"Security Error signing data: %@");
      }
    }

    else
    {
      __int128 v27 = 0LL;
    }

    *a6 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSSigningErrorDomain,  13LL,  v27,  v39));
  }

  CFRelease(v23);
LABEL_40:

  return v25;
}

  os_activity_scope_leave(&state);
  cut_arc_os_release(&v34);
}

        id v3 = 0LL;
        goto LABEL_33;
      }

      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_28;
      }
      uint64_t v22 = 138412290;
      uint64_t v23 = v1;
      CFIndex v16 = "Missing regionID, Not sending IDS Authentication/Register for: %@";
    }

    IDSTransportThreadRemoveSocket(*(unsigned int *)(a1 + 56));
    close(*(_DWORD *)(a1 + 56));
    CFIndex v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) controlChannel]);
    [v17 setConnecting:0];

    [*(id *)(a1 + 40) startControlChannelWithDevice:*(void *)(a1 + 32) endpoint:0];
    return;
  }

  IDSTransportThreadRemoveSocket(*(unsigned int *)(a1 + 56));
  legacy_tcp_socket = (void *)nw_parameters_create_legacy_tcp_socket(_nw_parameters_configure_protocol_default_configuration);
  nw_parameters_set_data_mode(legacy_tcp_socket, 2LL);
  uint64_t v19 = (void *)nw_connection_create_with_connected_socket_and_parameters(*(unsigned int *)(a1 + 56), legacy_tcp_socket);
  [*(id *)(a1 + 40) didConnectControlChannelForDeviceConnectionInfo:*(void *)(a1 + 32) connection:v19 error:*(void *)(a1 + 48)];
}

    __int128 v24 = IDSOSDataChannelFd(self->_dataChannel, v7);
    IDSTransportThreadSuspendSocket(v24, 2LL);
    self->_writeSuspended = 1;
    return;
  }

  id v3 = OSLogHandleForTransportCategory("BTLink");
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "ready but already suspended", buf, 2u);
  }

  uint64_t v6 = os_log_shim_legacy_logging_enabled(v5);
  if ((_DWORD)v6 && _IDSShouldLogTransport(v6))
  {
    _IDSLogTransport(@"BTLink", @"IDS", @"ready but already suspended");
  }

  self->_state = 3LL;
  if (!self->_writeSuspended) {
    goto LABEL_28;
  }
}
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

    __break(1u);
LABEL_29:
    if (!_CocoaArrayWrapper.endIndex.getter(&_swiftEmptyArrayStorage)) {
      goto LABEL_2;
    }
    sub_1004251E4((uint64_t)&_swiftEmptyArrayStorage);
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  sub_10041D3BC(v7);
  return (void *)v2;
}

  __break(1u);
  return result;
}

  swift_release(v25);
  uint64_t v41 = v57;
  uint64_t v42 = (os_unfair_lock_s *)(*(void *)((char *)v57
                                       + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_lock)
                           + 16LL);
  os_unfair_lock_lock(v42);
  __int128 v25 = (uint64_t)v58;
  sub_100492DB0(v41, (uint64_t)v58);
  os_unfair_lock_unlock(v42);
  v43 = v60;
  sub_100410FD0(v25, v60, &qword_1009B8E08);
  if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v64 + 6))(v43, 1LL, v56) == 1)
  {
    sub_10040A274(v43, &qword_1009B8E08);
    if (!v31[2]) {
      goto LABEL_39;
    }
    goto LABEL_30;
  }

  uint64_t v1 = v59;
  sub_1003F600C(v43, v59, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
  id v51 = sub_10043A878();
  id v52 = [v51 dictionaryRepresentation];

  if (v52)
  {
    __int128 v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v52,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

    if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0) {
      goto LABEL_43;
    }
    goto LABEL_36;
  }

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
  return result;
}

uint64_t sub_100035D7C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, void *a6, char a7, void *a8)
{
  id v15 = a6;
  uint64_t v30 = 0LL;
  uint64_t v31 = &v30;
  uint64_t v32 = 0x2020000000LL;
  uint64_t v33 = 0LL;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_100035EA4;
  v20[3] = &unk_1008F6BE8;
  char v28 = a7;
  char v29 = a4;
  uint64_t v24 = a3;
  uint64_t v25 = a5;
  id v16 = a8;
  id v21 = v16;
  uint64_t v26 = a2;
  uint64_t v27 = a1;
  id v17 = v15;
  id v22 = v17;
  uint64_t v23 = &v30;
  sub_1003AFD68(v20, v17);
  uint64_t v18 = v31[3];

  _Block_object_dispose(&v30, 8);
  return v18;
}

void sub_100035E8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_100035EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFMutableStringRef Mutable = CFStringCreateMutable(0LL, 0LL);
  id v7 = Mutable;
  if (*(_BYTE *)(a1 + 88)) {
    uint64_t v8 = @"SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, include_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, kt_uri_verification_map, wants_firewall_donation, send_mode, delivery_minimum_time_delay, delivery_minimum_time FROM outgoing_message ";
  }
  else {
    uint64_t v8 = @"SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, NULL AS message_data, NULL AS data, NULL AS protobuf_data, destinations, NULL AS data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, include_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, kt_uri_verification_map, wants_firewall_donation, send_mode, delivery_minimum_time_delay, delivery_minimum_time FROM outgoing_message ";
  }
  CFStringAppend(Mutable, v8);
  CFStringAppend(v7, @"WHERE priority = ? AND is_sent = 0 AND pending_delete = 0 ");
  if (*(void *)(a1 + 56)) {
    CFStringAppend(v7, @"AND account_guid = ? ");
  }
  if (*(_BYTE *)(a1 + 89)) {
    CFStringAppend(v7, @"AND bypass_duet = 0 ");
  }
  if (*(void *)(a1 + 64)) {
    id v9 = @"AND local_destination_device_uuid = ? ";
  }
  else {
    id v9 = @"AND local_destination_device_uuid is null ";
  }
  CFStringAppend(v7, v9);
  if ([*(id *)(a1 + 32) count])
  {
    CFStringAppend(v7, @"AND message_type ");
    uint64_t v10 = (const __CFString *)CSDBGenerateInClauseForCount([*(id *)(a1 + 32) count]);
    CFStringAppend(v7, v10);
  }

  CFStringAppend(v7, @"ORDER BY ROWID ASC LIMIT ?");
  uint64_t v11 = CSDBSqliteDatabaseStatementForReading(a3, v7);
  if (v11)
  {
    uint64_t v12 = v11;
    if (*(void *)(v11 + 8))
    {
      CSDBSqliteBindInt64(v11, *(void *)(a1 + 72));
      uint64_t v13 = *(void *)(a1 + 56);
      if (v13) {
        CSDBSqliteBindTextFromCFString(v12, v13);
      }
      uint64_t v14 = *(void *)(a1 + 64);
      if (v14) {
        CSDBSqliteBindTextFromCFString(v12, v14);
      }
      if ([*(id *)(a1 + 32) count])
      {
        __int128 v31 = 0u;
        __int128 v32 = 0u;
        __int128 v29 = 0u;
        __int128 v30 = 0u;
        id v15 = *(id *)(a1 + 32);
        id v16 = [v15 countByEnumeratingWithState:&v29 objects:v33 count:16];
        if (v16)
        {
          id v17 = v16;
          uint64_t v18 = *(void *)v30;
          do
          {
            uint64_t v19 = 0LL;
            do
            {
              if (*(void *)v30 != v18) {
                objc_enumerationMutation(v15);
              }
              CSDBSqliteBindInt64( v12,  objc_msgSend(*(id *)(*((void *)&v29 + 1) + 8 * (void)v19), "longLongValue", (void)v29));
              uint64_t v19 = (char *)v19 + 1;
            }

            while (v17 != v19);
            id v17 = [v15 countByEnumeratingWithState:&v29 objects:v33 count:16];
          }

          while (v17);
        }
      }

      CSDBSqliteBindInt64(v12, *(void *)(a1 + 80));
      id v20 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_1008F6910, v12, 0LL, 0LL);
      CFIndex Count = CFArrayGetCount(v20);
      if (Count << 32)
      {
        CFIndex v22 = 0LL;
        CFIndex v23 = (int)Count;
        else {
          uint64_t v24 = (int)Count;
        }
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v20, v22);
          int ID = CSDBRecordGetID(ValueAtIndex);
          uint64_t v27 = sub_100033138((uint64_t)kCFAllocatorDefault, ID, 0, *(void **)(a1 + 40));
          char v28 = v27;
          if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL)) {
            break;
          }
          if (v27) {
            goto LABEL_34;
          }
LABEL_35:
          if (v24 == ++v22) {
            goto LABEL_39;
          }
        }

        *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = CFArrayCreateMutable( kCFAllocatorDefault,  v23,  &kCFTypeArrayCallBacks);
        if (!v28) {
          goto LABEL_35;
        }
LABEL_34:
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL), v28);
        CFRelease(v28);
        goto LABEL_35;
      }

void sub_1000361E8(uint64_t a1, char a2, void *a3)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100036244;
  v3[3] = &unk_1008F6C08;
  char v4 = a2;
  v3[4] = a1;
  sub_1003AFE40((uint64_t)@"UPDATE outgoing_message SET is_sent = ? WHERE guid = ?", v3, a3);
}

uint64_t sub_100036244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CSDBSqliteStatementPerform(a4);
}

void sub_100036280(void *a1)
{
  sub_1003AFE40((uint64_t)@"UPDATE outgoing_message SET is_sent = 0", &stru_1008F6C48, a1);
}

void sub_100036298(id a1, CSDBRecordStore *a2, CSDBSqliteDatabase *a3, CSDBSqliteStatement *a4)
{
}

void sub_1000362A0(void *a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100036320;
  v4[3] = &unk_1008F6C70;
  id v5 = a2;
  id v3 = v5;
  sub_1003AFE40( (uint64_t)@"UPDATE outgoing_message SET is_sent = 0 WHERE local_destination_device_uuid = ?",  v4,  a1);
}

uint64_t sub_100036320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CSDBSqliteStatementPerform(a4);
}

void sub_10003634C(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if ([v5 count])
  {
    CFMutableStringRef Mutable = CFStringCreateMutable(0LL, 0LL);
    CFStringAppend( Mutable,  @"UPDATE outgoing_message SET local_destination_device_uuid = ? WHERE is_sent = 0 AND pending_delete = 0 AND account_guid ");
    id v9 = (const __CFString *)CSDBGenerateInClauseForCount([v5 count]);
    CFStringAppend(Mutable, v9);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100036464;
    v10[3] = &unk_1008F6C98;
    id v11 = v6;
    id v12 = v5;
    sub_1003AFE40((uint64_t)Mutable, v10, v7);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }

  else
  {
    _IMWarn(@"Empty/nil accountGUIDs passed to %s");
  }
}

uint64_t sub_100036464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CSDBSqliteStatementPerform(a4);
}

void sub_1000364A0(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (![v5 count]) {
    _IMWarn(@"NULL accountGUIDs passed to %s");
  }
  CFMutableStringRef Mutable = CFStringCreateMutable(0LL, 0LL);
  CFStringAppend( Mutable,  @"UPDATE outgoing_message SET pending_delete = 1 WHERE local_destination_device_uuid = ? AND account_guid ");
  id v9 = (const __CFString *)CSDBGenerateInClauseForCount([v5 count]);
  CFStringAppend(Mutable, v9);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000365B8;
  v12[3] = &unk_1008F6C98;
  id v13 = v6;
  id v14 = v5;
  id v10 = v5;
  id v11 = v6;
  sub_1003AFE40((uint64_t)Mutable, v12, v7);

  if (Mutable) {
    CFRelease(Mutable);
  }
}

uint64_t sub_1000365B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CSDBSqliteStatementPerform(a4);
}

uint64_t sub_1000365F4(uint64_t a1, void *a2, char a3)
{
  uint64_t v11 = 0LL;
  id v12 = &v11;
  uint64_t v13 = 0x2020000000LL;
  uint64_t v14 = 0LL;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1000366C0;
  v6[3] = &unk_1008F6A80;
  char v10 = a3;
  uint64_t v8 = &v11;
  uint64_t v9 = a1;
  id v3 = a2;
  id v7 = v3;
  sub_1003AFD68(v6, v3);
  uint64_t v4 = v12[3];

  _Block_object_dispose(&v11, 8);
  return v4;
}

void sub_1000366A8(_Unwind_Exception *a1)
{
}

void sub_1000366C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFMutableStringRef Mutable = CFStringCreateMutable(0LL, 0LL);
  id v7 = Mutable;
  if (*(_BYTE *)(a1 + 56)) {
    uint64_t v8 = @"SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, include_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, kt_uri_verification_map, wants_firewall_donation, send_mode, delivery_minimum_time_delay, delivery_minimum_time FROM outgoing_message ";
  }
  else {
    uint64_t v8 = @"SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, NULL AS message_data, NULL AS data, NULL AS protobuf_data, destinations, NULL AS data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, include_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, kt_uri_verification_map, wants_firewall_donation, send_mode, delivery_minimum_time_delay, delivery_minimum_time FROM outgoing_message ";
  }
  CFStringAppend(Mutable, v8);
  CFStringAppend(v7, @"WHERE pending_delete = 1 LIMIT ? ");
  uint64_t v9 = CSDBSqliteDatabaseStatementForReading(a3, v7);
  if (v9)
  {
    uint64_t v10 = v9;
    if (*(void *)(v9 + 8))
    {
      CSDBSqliteBindInt64(v9, *(void *)(a1 + 48));
      uint64_t v11 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_1008F6910, v10, 0LL, 0LL);
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = sub_100033F1C(v11, *(void **)(a1 + 32));
      CSDBSqliteStatementReset(v10);
      if (v11) {
        CFRelease(v11);
      }
    }
  }

  if (v7) {
    CFRelease(v7);
  }
}

uint64_t sub_1000367B4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char a5)
{
  uint64_t v15 = 0LL;
  id v16 = &v15;
  uint64_t v17 = 0x2020000000LL;
  uint64_t v18 = 0LL;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100036894;
  v8[3] = &unk_1008F6CC0;
  char v14 = a5;
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  uint64_t v10 = &v15;
  uint64_t v11 = a1;
  id v5 = a4;
  id v9 = v5;
  sub_1003AFD68(v8, v5);
  uint64_t v6 = v16[3];

  _Block_object_dispose(&v15, 8);
  return v6;
}

void sub_10003687C(_Unwind_Exception *a1)
{
}

void sub_100036894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFMutableStringRef Mutable = CFStringCreateMutable(0LL, 0LL);
  id v7 = Mutable;
  if (*(_BYTE *)(a1 + 72)) {
    uint64_t v8 = @"SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, include_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, kt_uri_verification_map, wants_firewall_donation, send_mode, delivery_minimum_time_delay, delivery_minimum_time FROM outgoing_message ";
  }
  else {
    uint64_t v8 = @"SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, NULL AS message_data, NULL AS data, NULL AS protobuf_data, destinations, NULL AS data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, include_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, kt_uri_verification_map, wants_firewall_donation, send_mode, delivery_minimum_time_delay, delivery_minimum_time FROM outgoing_message ";
  }
  CFStringAppend(Mutable, v8);
  CFStringAppend( v7,  @"WHERE is_sent = 0 AND pending_delete = 0 AND enqueued_date > 0 AND enqueued_date <= ? AND local_destination_device_uuid IS NOT NULL AND local_destination_device_uuid != ? LIMIT ? ");
  uint64_t v9 = CSDBSqliteDatabaseStatementForReading(a3, v7);
  if (v9)
  {
    uint64_t v10 = v9;
    if (*(void *)(v9 + 8))
    {
      CSDBSqliteBindInt64(v9, *(void *)(a1 + 48));
      CSDBSqliteBindTextFromCFString(v10, *(void *)(a1 + 56));
      CSDBSqliteBindInt64(v10, *(void *)(a1 + 64));
      uint64_t v11 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_1008F6910, v10, 0LL, 0LL);
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = sub_100033F1C(v11, *(void **)(a1 + 32));
      CSDBSqliteStatementReset(v10);
      if (v11) {
        CFRelease(v11);
      }
    }
  }

  if (v7) {
    CFRelease(v7);
  }
}

void sub_1000369A0(int a1, void *a2)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_1000369F0;
  v2[3] = &unk_1008F6CE0;
  int v3 = a1;
  sub_1003AFD68(v2, a2);
}

uint64_t sub_1000369F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CSDBSqliteConnectionSetIntegerForProperty( *(void *)(a3 + 8),  @"InternalMigration",  *(unsigned int *)(a1 + 32));
}

uint64_t sub_100036A08(void *a1)
{
  id v1 = a1;
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  int v8 = -1431655766;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100036ABC;
  v4[3] = &unk_1008F6A58;
  void v4[4] = &v5;
  sub_1003AFD68(v4, v1);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_100036AA4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100036ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = CSDBSqliteConnectionIntegerForProperty(*(void *)(a3 + 8), @"InternalMigration");
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_100036AF4(void *a1)
{
  id v1 = a1;
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  int v8 = -1431655766;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100036BA8;
  v4[3] = &unk_1008F6A58;
  void v4[4] = &v5;
  sub_1003AFD68(v4, v1);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_100036B90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100036BA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = CSDBSqliteDatabaseCheckpointAndVacuum(*(void *)(a3 + 8));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

void sub_100036BD8(void *a1)
{
}

void sub_100036BE8(id a1, CSDBRecordStore *a2, CSDBSqliteDatabase *a3)
{
}

void sub_100036BF0(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  unsigned int v9 = [v6 dataProtectionClass];
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v10 = v5;
  id v11 = [v10 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v19;
    do
    {
      for (i = 0LL; i != v12; i = (char *)i + 1)
      {
        if (*(void *)v19 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)i);
        if (objc_msgSend(v15, "dataProtectionClass", (void)v18) == v9)
        {
          id v16 = (__CFString *)objc_claimAutoreleasedReturnValue([v15 guid]);
          uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v15 alternateGUID]);
          sub_100036D8C(v16, v17, v6, v7);
        }
      }

      id v12 = [v10 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }

    while (v12);
  }
}

void sub_100036D8C(const __CFString *a1, const void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (_IMWillLog(@"IDSOutgoingMessageRecord", v9)) {
    _IMAlwaysLog( 0LL,  @"IDSOutgoingMessageRecord",  @"IDSOutgoingMessageRecordDeleteMessage %@ alternateGUID %@");
  }
  if (a1 && CFStringGetLength(a1))
  {
    uint64_t v17 = 0LL;
    __int128 v18 = &v17;
    if (a2) {
      id v10 = @"SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, include_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, kt_uri_verification_map, wants_firewall_donation, send_mode, delivery_minimum_time_delay, delivery_minimum_time FROM outgoing_message WHERE guid = ? AND alternate_guid = ? ORDER BY ROWID ASC;";
    }
    else {
      id v10 = @"SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, include_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, kt_uri_verification_map, wants_firewall_donation, send_mode, delivery_minimum_time_delay, delivery_minimum_time FROM outgoing_message WHERE guid = ? ORDER BY ROWID ASC;";
    }
    uint64_t v19 = 0x2020000000LL;
    char v20 = 0;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_100036F2C;
    v16[3] = &unk_1008F69E0;
    void v16[5] = a1;
    v16[6] = a2;
    v16[4] = &v17;
    sub_1003AFDCC((uint64_t)v10, v16, v7);
    if (!*((_BYTE *)v18 + 24))
    {
      CFRetain(a1);
      if (a2) {
        CFRetain(a2);
      }
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      v11[2] = sub_100036FF4;
      v11[3] = &unk_1008F6D70;
      char v14 = a1;
      uint64_t v15 = a2;
      id v12 = v8;
      id v13 = v7;
      sub_1003AFB28(v11, 0LL, v12);
    }

    _Block_object_dispose(&v17, 8);
  }
}

void sub_100036F14(_Unwind_Exception *a1)
{
}

uint64_t sub_100036F2C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1[6];
  if (v7) {
    CSDBSqliteBindTextFromCFString(a4, v7);
  }
  id v8 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_1008F6910, a4, 0LL, 0LL);
  int Count = CFArrayGetCount(v8);
  if (Count >= 1)
  {
    CFIndex v10 = 0LL;
    uint64_t v11 = Count;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v8, v10);
      CSDBRecordStoreRemoveRecord(a2, ValueAtIndex);
      ++v10;
    }

    while (v11 != v10);
  }

  CFRelease(v8);
  *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) = CSDBRecordSaveStore(a2);
  return CSDBRecordStoreInvalidateCachesWithStore(a2);
}

void sub_100036FF4(uint64_t a1, uint64_t a2)
{
  if (_IMWillLog(@"IDSOutgoingMessageRecord", a2))
  {
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    _IMAlwaysLog( 0LL,  @"IDSOutgoingMessageRecord",  @"Could not delete outgoing message from database. Postponing delete. Guid: %@  AlternateGuid: %@");
  }

  objc_msgSend(*(id *)(a1 + 32), "ensureDatabaseIsInitialized", v7, v8);
  if (*(void *)(a1 + 56)) {
    int v3 = ", alternate_guid) VALUES (?, ?, ?)";
  }
  else {
    int v3 = ") VALUES (?, ?)";
  }
  CFStringRef v4 = CFStringCreateWithFormat( kCFAllocatorDefault,  0LL,  CFSTR("INSERT OR IGNORE INTO outgoing_messages_to_delete (data_protection_class, guid%s;"),
         v3);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100037108;
  v9[3] = &unk_1008F6D48;
  id v10 = *(id *)(a1 + 40);
  __int128 v11 = *(_OWORD *)(a1 + 48);
  sub_1003AFE40((uint64_t)v4, v9, *(void **)(a1 + 32));
  CFRelease(v4);
  id v5 = *(const void **)(a1 + 48);
  if (v5) {
    CFRelease(v5);
  }
  id v6 = *(const void **)(a1 + 56);
  if (v6) {
    CFRelease(v6);
  }
}

uint64_t sub_100037108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    CSDBSqliteBindTextFromCFString(a4, v6);
  }
  uint64_t result = CSDBSqliteStatementPerform(a4);
  if ((_DWORD)result != 101)
  {
    uint64_t result = _IMWillLog(@"IDSOutgoingMessageRecord", v8);
    if ((_DWORD)result) {
      return _IMAlwaysLog(0LL, @"IDSOutgoingMessageRecord", @"Could not postpone delete.");
    }
  }

  return result;
}

void sub_100037198(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (_IMWillLog(@"IDSOutgoingMessageRecord", v4)) {
    _IMAlwaysLog( 0LL,  @"IDSOutgoingMessageRecord",  @"IDSOutgoingMessageRecordDeleteMessageWithQueueOneIdentifier %@");
  }
  if (a1)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_10003723C;
    v5[3] = &unk_1008F6D90;
    void v5[4] = a1;
    sub_1003AFDCC( (uint64_t)@"SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, include_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, kt_uri_verification_map, wants_firewall_donation, send_mode, delivery_minimum_time_delay, delivery_minimum_time FROM outgoing_message WHERE queue_one_identifier = ? ORDER BY ROWID ASC;",
      v5,
      v3);
  }
}

uint64_t sub_10003723C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_1008F6910, a4, 0LL, 0LL);
  int Count = CFArrayGetCount(v6);
  if (Count >= 1)
  {
    CFIndex v8 = 0LL;
    uint64_t v9 = Count;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v6, v8);
      CSDBRecordStoreRemoveRecord(a2, ValueAtIndex);
      ++v8;
    }

    while (v9 != v8);
  }

  CFRelease(v6);
  CSDBRecordSaveStore(a2);
  return CSDBRecordStoreInvalidateCachesWithStore(a2);
}

void sub_1000372DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_100037380;
    v5[3] = &unk_1008F6D90;
    void v5[4] = a1;
    sub_1003AFE40((uint64_t)@"DELETE FROM outgoing_message WHERE account_guid = ? ", v5, v3);
  }
}

uint64_t sub_100037380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CSDBSqliteStatementPerform(a4);
}

void sub_1000373AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  id v65 = a57;
  if (a1)
  {
    v68[0] = _NSConcreteStackBlock;
    v68[2] = sub_10003778C;
    v68[3] = &unk_1008F6DE0;
    uint64_t v70 = a1;
    uint64_t v67 = a1 + 16;
    v68[1] = 3221225472LL;
    id v66 = v65;
    uint64_t v72 = a3;
    uint64_t v73 = a4;
    uint64_t v74 = a5;
    uint64_t v75 = a6;
    uint64_t v76 = a7;
    uint64_t v77 = a8;
    uint64_t v78 = a9;
    uint64_t v79 = a10;
    uint64_t v80 = a11;
    uint64_t v81 = a12;
    uint64_t v82 = a13;
    uint64_t v83 = a14;
    uint64_t v84 = a15;
    uint64_t v85 = a16;
    uint64_t v86 = a17;
    uint64_t v87 = a18;
    uint64_t v88 = a19;
    uint64_t v89 = a20;
    uint64_t v90 = a21;
    uint64_t v91 = a22;
    uint64_t v92 = a23;
    uint64_t v93 = a24;
    uint64_t v94 = a25;
    uint64_t v95 = a26;
    uint64_t v96 = a27;
    uint64_t v97 = a28;
    id v69 = v65;
    uint64_t v71 = a2;
    uint64_t v98 = a29;
    uint64_t v99 = a30;
    uint64_t v100 = a31;
    uint64_t v101 = a32;
    uint64_t v102 = a33;
    uint64_t v103 = a34;
    uint64_t v104 = a35;
    uint64_t v105 = a36;
    uint64_t v106 = a37;
    uint64_t v107 = a38;
    uint64_t v108 = a39;
    uint64_t v109 = a40;
    uint64_t v110 = a41;
    uint64_t v111 = a42;
    uint64_t v112 = a43;
    uint64_t v113 = a44;
    uint64_t v114 = a45;
    uint64_t v115 = a46;
    uint64_t v116 = a47;
    uint64_t v117 = a48;
    uint64_t v118 = a49;
    uint64_t v119 = a50;
    uint64_t v120 = a51;
    uint64_t v121 = a52;
    uint64_t v122 = a53;
    uint64_t v123 = a54;
    uint64_t v124 = a55;
    uint64_t v125 = a56;
    sub_1003AFBE0(v67, v68, v69);
  }

  else
  {
    id v66 = v65;
    _IMWarn(@"NULL message passed to %s");
  }
}

void sub_10003778C(uint64_t a1)
{
  uint64_t v2 = sub_100033390(*(void *)(*(void *)(a1 + 40) + 24LL), *(void **)(a1 + 32));
  if (v2)
  {
    id v3 = (const void *)v2;
    if (*(void *)(a1 + 48)) {
      **(void **)(a1 + 4_Block_object_dispose((const void *)(v1 - 96), 8) = (int)CSDBRecordGetID(v2);
    }
    if (*(void *)(a1 + 56)) {
      **(void **)(a1 + 56) = CSDBRecordCopyProperty(v3, dword_1009BE608[0]);
    }
    if (*(void *)(a1 + 64)) {
      **(void **)(a1 + 64) = CSDBRecordCopyProperty(v3, dword_1009BE60C);
    }
    if (*(void *)(a1 + 72)) {
      **(void **)(a1 + 72) = CSDBRecordCopyProperty(v3, dword_1009BE610);
    }
    if (*(void *)(a1 + 80)) {
      **(void **)(a1 + 80) = CSDBRecordCopyProperty(v3, dword_1009BE614);
    }
    if (*(void *)(a1 + 88)) {
      **(void **)(a1 + 8_Block_object_dispose((const void *)(v1 - 96), 8) = CSDBRecordCopyProperty(v3, dword_1009BE618);
    }
    if (*(void *)(a1 + 96)) {
      **(void **)(a1 + 96) = CSDBRecordCopyProperty(v3, dword_1009BE61C);
    }
    if (*(void *)(a1 + 104)) {
      **(void **)(a1 + 104) = CSDBRecordCopyProperty(v3, dword_1009BE620);
    }
    if (*(void *)(a1 + 112)) {
      **(void **)(a1 + 112) = CSDBRecordCopyProperty(v3, dword_1009BE624);
    }
    if (*(void *)(a1 + 120)) {
      **(void **)(a1 + 120) = CSDBRecordCopyProperty(v3, dword_1009BE628);
    }
    if (*(void *)(a1 + 128)) {
      **(_BYTE **)(a1 + 12_Block_object_dispose((const void *)(v1 - 96), 8) = CSDBRecordGetProperty(v3, dword_1009BE62C) != 0;
    }
    if (*(void *)(a1 + 136)) {
      **(_BYTE **)(a1 + 136) = CSDBRecordGetProperty(v3, dword_1009BE630) != 0;
    }
    if (*(void *)(a1 + 144)) {
      **(_BYTE **)(a1 + 144) = CSDBRecordGetProperty(v3, dword_1009BE634) != 0;
    }
    if (*(void *)(a1 + 152)) {
      **(_BYTE **)(a1 + 152) = CSDBRecordGetProperty(v3, dword_1009BE638) != 0;
    }
    if (*(void *)(a1 + 160)) {
      **(void **)(a1 + 160) = CSDBRecordGetProperty(v3, dword_1009BE63C);
    }
    if (*(void *)(a1 + 168)) {
      **(void **)(a1 + 16_Block_object_dispose((const void *)(v1 - 96), 8) = CSDBRecordGetProperty(v3, dword_1009BE640);
    }
    if (*(void *)(a1 + 176)) {
      **(_BYTE **)(a1 + 176) = CSDBRecordGetProperty(v3, dword_1009BE644) != 0;
    }
    if (*(void *)(a1 + 184)) {
      **(void **)(a1 + 184) = CSDBRecordCopyProperty(v3, dword_1009BE648);
    }
    if (*(void *)(a1 + 192)) {
      **(void **)(a1 + 192) = CSDBRecordCopyProperty(v3, dword_1009BE64C);
    }
    if (*(void *)(a1 + 200)) {
      **(void **)(a1 + 200) = CSDBRecordGetProperty(v3, dword_1009BE650);
    }
    if (*(void *)(a1 + 208)) {
      **(void **)(a1 + 20_Block_object_dispose((const void *)(v1 - 96), 8) = CSDBRecordGetProperty(v3, dword_1009BE654);
    }
    if (*(void *)(a1 + 216)) {
      **(_BYTE **)(a1 + 216) = CSDBRecordGetProperty(v3, dword_1009BE658) != 0;
    }
    if (*(void *)(a1 + 224)) {
      **(void **)(a1 + 2cut_arc_os_release(v1 - 24) = CSDBRecordCopyProperty(v3, dword_1009BE65C);
    }
    if (*(void *)(a1 + 232)) {
      **(_BYTE **)(a1 + 232) = CSDBRecordGetProperty(v3, dword_1009BE660) != 0;
    }
    if (*(void *)(a1 + 240)) {
      **(void **)(a1 + 240) = CSDBRecordCopyProperty(v3, dword_1009BE664);
    }
    if (*(void *)(a1 + 248)) {
      **(_BYTE **)(a1 + 24_Block_object_dispose((const void *)(v1 - 96), 8) = CSDBRecordGetProperty(v3, dword_1009BE668) != 0;
    }
    if (*(void *)(a1 + 256)) {
      **(_BYTE **)(a1 + 256) = CSDBRecordGetProperty(v3, dword_1009BE66C) != 0;
    }
    if (*(void *)(a1 + 264)) {
      **(_BYTE **)(a1 + 264) = CSDBRecordGetProperty(v3, dword_1009BE670) != 0;
    }
    if (*(void *)(a1 + 272)) {
      **(_BYTE **)(a1 + 272) = CSDBRecordGetProperty(v3, dword_1009BE6AC) != 0;
    }
    if (*(void *)(a1 + 280)) {
      **(_BYTE **)(a1 + 280) = CSDBRecordGetProperty(v3, dword_1009BE674) != 0;
    }
    if (*(void *)(a1 + 288)) {
      **(void **)(a1 + 28_Block_object_dispose((const void *)(v1 - 96), 8) = CSDBRecordGetProperty(v3, dword_1009BE678);
    }
    if (*(void *)(a1 + 296)) {
      **(void **)(a1 + 296) = CSDBRecordCopyProperty(v3, dword_1009BE67C);
    }
    if (*(void *)(a1 + 304)) {
      **(_BYTE **)(a1 + 304) = CSDBRecordGetProperty(v3, dword_1009BE680) != 0;
    }
    if (*(void *)(a1 + 312)) {
      **(void **)(a1 + 312) = CSDBRecordCopyProperty(v3, dword_1009BE684);
    }
    if (*(void *)(a1 + 320)) {
      **(_BYTE **)(a1 + 320) = CSDBRecordGetProperty(v3, dword_1009BE688) != 0;
    }
    if (*(void *)(a1 + 328)) {
      **(void **)(a1 + 32_Block_object_dispose((const void *)(v1 - 96), 8) = CSDBRecordCopyProperty(v3, dword_1009BE68C);
    }
    if (*(void *)(a1 + 336)) {
      **(_BYTE **)(a1 + 336) = CSDBRecordGetProperty(v3, dword_1009BE690) != 0;
    }
    if (*(void *)(a1 + 344)) {
      **(void **)(a1 + 344) = CSDBRecordCopyProperty(v3, dword_1009BE694);
    }
    if (*(void *)(a1 + 352))
    {
      **(void **)(a1 + 352) = CSDBRecordGetProperty(v3, dword_1009BE698);
      **(void **)(a1 + 352) = CSDBRecordGetProperty(v3, dword_1009BE698);
    }

    if (*(void *)(a1 + 360)) {
      **(void **)(a1 + 360) = CSDBRecordGetProperty(v3, dword_1009BE69C);
    }
    if (*(void *)(a1 + 368)) {
      **(_BYTE **)(a1 + 36_Block_object_dispose((const void *)(v1 - 96), 8) = CSDBRecordGetProperty(v3, dword_1009BE6A0) != 0;
    }
    if (*(void *)(a1 + 376)) {
      **(_BYTE **)(a1 + 376) = CSDBRecordGetProperty(v3, dword_1009BE6A4) != 0;
    }
    if (*(void *)(a1 + 384)) {
      **(void **)(a1 + 384) = CSDBRecordGetProperty(v3, dword_1009BE6A8);
    }
    if (*(void *)(a1 + 392)) {
      **(_BYTE **)(a1 + 392) = CSDBRecordGetProperty(v3, dword_1009BE6B0) != 0;
    }
    if (*(void *)(a1 + 400)) {
      **(_BYTE **)(a1 + 400) = CSDBRecordGetProperty(v3, dword_1009BE6B4) != 0;
    }
    if (*(void *)(a1 + 408)) {
      **(_BYTE **)(a1 + 40_Block_object_dispose((const void *)(v1 - 96), 8) = CSDBRecordGetProperty(v3, dword_1009BE6B8) != 0;
    }
    if (*(void *)(a1 + 416)) {
      **(_BYTE **)(a1 + 416) = CSDBRecordGetProperty(v3, dword_1009BE6BC) != 0;
    }
    if (*(void *)(a1 + 424)) {
      **(_BYTE **)(a1 + 4cut_arc_os_release(v1 - 24) = CSDBRecordGetProperty(v3, dword_1009BE6C0) != 0;
    }
    if (*(void *)(a1 + 432)) {
      **(_BYTE **)(a1 + 432) = CSDBRecordGetProperty(v3, dword_1009BE6C4) != 0;
    }
    if (*(void *)(a1 + 440)) {
      **(void **)(a1 + 440) = CSDBRecordGetProperty(v3, dword_1009BE6C8);
    }
    if (*(void *)(a1 + 448)) {
      **(void **)(a1 + 44_Block_object_dispose((const void *)(v1 - 96), 8) = CSDBRecordCopyProperty(v3, dword_1009BE6CC);
    }
    if (*(void *)(a1 + 456)) {
      **(_BYTE **)(a1 + 456) = CSDBRecordGetProperty(v3, dword_1009BE6D0) != 0;
    }
    if (*(void *)(a1 + 464)) {
      **(void **)(a1 + 464) = CSDBRecordGetProperty(v3, dword_1009BE6D4);
    }
    if (*(void *)(a1 + 472)) {
      **(void **)(a1 + 472) = CSDBRecordGetProperty(v3, dword_1009BE6D8);
    }
    if (*(void *)(a1 + 480)) {
      **(void **)(a1 + 480) = CSDBRecordGetProperty(v3, dword_1009BE6DC);
    }
    CFRelease(v3);
  }

uint64_t sub_100037F88()
{
  uint64_t v0 = 0LL;
  qword_1009BE600 = _CFRuntimeRegisterClass(&unk_1008F6E00);
  uint64_t v1 = &off_1008F6E60;
  do
  {
    uint64_t v2 = *v1;
    v1 += 5;
    uint64_t result = CSDBRecordIndexOfPropertyNamed(&off_1008F6E60, 54LL, v2);
    dword_1009BE608[v0++] = result;
  }

  while (v0 != 54);
  return result;
}

uint64_t sub_100037FF4(uint64_t result)
{
  *(void *)(result + cut_arc_os_release(v1 - 24) = -1LL;
  return result;
}

void sub_100038000(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  *(void *)(a1 + cut_arc_os_release(v1 - 24) = -1LL;
  os_unfair_lock_unlock(v2);
}

BOOL sub_100038034(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 24) == *(void *)(a2 + 24);
}

uint64_t sub_100038048(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

CFStringRef sub_100038050(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  id v3 = CFGetAllocator(a1);
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFStringRef v5 = CFStringCreateWithFormat(v3, 0LL, @"<IDSOutgoingMessageRecord %p [%p]>{}", a1, v4);
  os_unfair_lock_unlock(v2);
  return v5;
}

void sub_1000385F0(uint64_t a1)
{
  double v3 = v2;
  [*(id *)(a1 + 40) doubleValue];
  unint64_t v58 = llround((v3 - v4) * 1000.0);
  [*(id *)(a1 + 48) doubleValue];
  double v6 = v5;
  [*(id *)(a1 + 40) doubleValue];
  unint64_t v57 = llround((v6 - v7) * 1000.0);
  [*(id *)(a1 + 56) doubleValue];
  double v9 = v8;
  [*(id *)(a1 + 48) doubleValue];
  uint64_t v11 = llround((v9 - v10) * 1000.0);
  [*(id *)(a1 + 64) doubleValue];
  double v13 = v12;
  [*(id *)(a1 + 32) doubleValue];
  uint64_t v15 = llround((v13 - v14) * 1000.0);
  [*(id *)(a1 + 48) doubleValue];
  double v17 = v16;
  [*(id *)(a1 + 64) doubleValue];
  unint64_t v19 = llround((v17 - v18) * 1000.0);
  [*(id *)(a1 + 56) doubleValue];
  double v21 = v20;
  [*(id *)(a1 + 64) doubleValue];
  uint64_t v23 = llround((v21 - v22) * 1000.0);
  [*(id *)(a1 + 56) doubleValue];
  double v25 = v24;
  [*(id *)(a1 + 72) doubleValue];
  uint64_t v27 = llround((v25 - v26) * 1000.0);
  uint64_t v28 = v15 & ~(v15 >> 63);
  uint64_t v29 = v11 & ~(v11 >> 63);
  uint64_t v30 = v27 & ~(v27 >> 63);
  uint64_t v31 = *(void *)(a1 + 56);
  uint64_t v56 = v23 & ~(v23 >> 63);
  if (v31) {
    uint64_t v32 = v23 & ~(v23 >> 63);
  }
  else {
    uint64_t v32 = -1LL;
  }
  if (v31) {
    uint64_t v33 = v27 & ~(v27 >> 63);
  }
  else {
    uint64_t v33 = -1LL;
  }
  if (v31) {
    uint64_t v34 = v29;
  }
  else {
    uint64_t v34 = -1LL;
  }
  uint64_t v35 = OSLogHandleForTransportCategory("IDSAWDLogging");
  uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    int v37 = *(unsigned __int8 *)(a1 + 96);
    *(_DWORD *)buf = 134219778;
    if (v37) {
      uint64_t v38 = @"YES";
    }
    else {
      uint64_t v38 = @"NO";
    }
    unint64_t v60 = v58;
    __int16 v61 = 2048;
    unint64_t v62 = v57;
    __int16 v63 = 2048;
    uint64_t v64 = v34;
    __int16 v65 = 2048;
    uint64_t v66 = v28;
    __int16 v67 = 2048;
    unint64_t v68 = v19;
    __int16 v69 = 2048;
    uint64_t v70 = v32;
    __int16 v71 = 2048;
    uint64_t v72 = v33;
    __int16 v73 = 2112;
    uint64_t v74 = v38;
    _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "IDSDeviceConnectionForService - clientInitToDaemonOpenSocket %lldms, clientInitToClientOpenSocketHandler %lldms, c lientOpenSocketHandlerToIncomingFirstPacket %lldms, daemonOpenSocketToDaemonCompletionHandler %lldms, daemonComple tionHandlerToClientOpenSocketCompletion %lldms, daemonCompletionHandlerToIncomingFirstPacket %lldms, connectionIni tToIncomingFirstPacket %lldms, success %@",  buf,  0x52u);
  }

  uint64_t v40 = os_log_shim_legacy_logging_enabled(v39);
  if ((_DWORD)v40 && _IDSShouldLogTransport(v40))
  {
    uint64_t v41 = *(_BYTE *)(a1 + 96) ? @"YES" : @"NO";
    uint64_t v54 = v33;
    v55 = v41;
    unint64_t v52 = v19;
    uint64_t v53 = v32;
    uint64_t v50 = v34;
    uint64_t v51 = v28;
    unint64_t v48 = v58;
    unint64_t v49 = v57;
    _IDSLogTransport( @"IDSAWDLogging",  @"IDS",  @"IDSDeviceConnectionForService - clientInitToDaemonOpenSocket %lldms, clientInitToClientOpenSocketHandler %lldms, clientOpenSocketHandlerToIncomingFirstPacket %lldms, daemonOpenSocketToDaemonCompletionHandler %lldms, daemonCompletionHandlerToClientOpenSocketCompletion %lldms, daemonCompletionHandlerToIncomingFirstPacket %lldms, connectionInitToIncomingFirstPacket %lldms, success %@");
    if (_IDSShouldLog(0LL, @"IDSAWDLogging"))
    {
      uint64_t v42 = @"YES";
      if (!*(_BYTE *)(a1 + 96)) {
        uint64_t v42 = @"NO";
      }
      uint64_t v54 = v33;
      v55 = (__CFString *)v42;
      unint64_t v52 = v19;
      uint64_t v53 = v32;
      uint64_t v50 = v34;
      uint64_t v51 = v28;
      unint64_t v48 = v58;
      unint64_t v49 = v57;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSAWDLogging",  @"IDSDeviceConnectionForService - clientInitToDaemonOpenSocket %lldms, clientInitToClientOpenSocketHandler %lldms, clientOpenSocketHandlerToIncomingFirstPacket %lldms, daemonOpenSocketToDaemonCompletionHandler %lldms, daemonCompletionHandlerToClientOpenSocketCompletion %lldms, daemonCompletionHandlerToIncomingFirstPacket %lldms, connectionInitToIncomingFirstPacket %lldms, success %@");
    }
  }

  v43 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 80),  "_metricContainerForMetricType:",  2555932,  v48,  v49,  v50,  v51,  v52,  v53,  v54,  v55));
  if (v43)
  {
    id v44 = objc_alloc_init((Class)IMWeakLinkClass( @"AWDIDSDeviceConnectionDurationEvent",  @"WirelessDiagnostics"));
    uint64_t v45 = *(void **)(a1 + 88);
    if (v45)
    {
      BOOL v46 = v31 == 0;
      id v47 = [v45 copy];
      [v44 setServiceName:v47];

      [v44 setSuccess:*(unsigned __int8 *)(a1 + 96)];
      [v44 setClientInitToDaemonOpenSocket:v58];
      [v44 setClientInitToClientOpenSocketHandler:v57];
      [v44 setDaemonOpenSocketToDaemonCompletionHandler:v28];
      [v44 setDaemonCompletionHandlerToClientOpenSocketCompletion:v19];
      if (!v46)
      {
        [v44 setConnectionInitToIncomingFirstPacket:v30];
        [v44 setClientOpenSocketHandlerToIncomingFirstPacket:v29];
        [v44 setDaemonCompletionHandlerToIncomingFirstPacket:v56];
      }

      [*(id *)(a1 + 80) _submitAWDMetric:v44 withContainer:v43];
    }
  }
}

void sub_10003930C(void *a1)
{
  double v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery_oversized](&OBJC_CLASS___IDSFoundationLog, "delivery_oversized"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = a1[5];
    uint64_t v5 = a1[6];
    int v6 = 138412802;
    uint64_t v7 = v3;
    __int16 v8 = 2112;
    uint64_t v9 = v4;
    __int16 v10 = 2112;
    uint64_t v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "GUID %@ Fanout %@ contains:\n%@",  (uint8_t *)&v6,  0x20u);
  }
}

void sub_10003B32C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 state] == (id)1)
  {
    uint64_t v4 = OSLogHandleForIDSCategory("Encryption");
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
      *(_DWORD *)buf = 138412290;
      uint64_t v35 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "   Public/Private decryption failed with error: %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v7) && _IDSShouldLog(0LL, @"Encryption"))
    {
      double v24 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Encryption",  @"   Public/Private decryption failed with error: %@");
    }

    __int16 v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "previousFullDeviceIdentityContainer", v24));
    if (v8)
    {
      uint64_t v9 = OSLogHandleForIDSCategory("Encryption");
      __int16 v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v35 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Using previous full identity: %@",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v11)
        && _IDSShouldLog(0LL, @"Encryption"))
      {
        double v25 = v8;
        _IDSLogV(0LL, @"IDSFoundation", @"Encryption", @"Using previous full identity: %@");
      }

      uint64_t v26 = *(void *)(a1 + 48);
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "authenticatedData", v25));
      id v12 = [*(id *)(a1 + 56) messageType];
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) guid]);
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) sendingURI]);
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v30 prefixedURI]);
      double v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) sendingPushToken]);
      double v14 = (void *)objc_claimAutoreleasedReturnValue([v13 rawToken]);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) receivingURI]);
      double v16 = (void *)objc_claimAutoreleasedReturnValue([v15 prefixedURI]);
      double v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) receivingPushToken]);
      double v18 = (void *)objc_claimAutoreleasedReturnValue([v17 rawToken]);
      unint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( [v8 unsealMessage:v26 authenticatedData:v29 messageType:v12 guid:v28 sendingURI:v27 sendingPushToken:v14 receivingURI:v16 receiv ingPushToken:v18 signedByPublicIdentity:*(void *)(a1 + 64) usingIdentityWithIdentifier:*(void *)(a1 + 72)]);
      v31[0] = _NSConcreteStackBlock;
      v31[1] = 3221225472LL;
      v31[2] = sub_10003B71C;
      v31[3] = &unk_1008F7700;
      id v32 = *(id *)(a1 + 40);
      id v33 = v3;
      [v19 registerResultBlock:v31];

      double v20 = v32;
    }

    else
    {
      uint64_t v23 = *(void **)(a1 + 40);
      double v20 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
      [v23 failWithError:v20];
    }
  }

  else
  {
    double v21 = *(void **)(a1 + 40);
    double v22 = (void *)objc_claimAutoreleasedReturnValue([v3 value]);
    [v21 fulfillWithValue:v22];
  }
}

void sub_10003B71C(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = [v6 state];
  uint64_t v4 = *(void **)(a1 + 32);
  if (v3 == (id)1)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
    [v4 failWithError:v5];
  }

  else
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v6 value]);
    [v4 fulfillWithValue:v5];
  }
}

LABEL_32:
      *a6 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSSigningErrorDomain,  15LL,  v34));
      goto LABEL_33;
    }

    double v17 = 1;
    goto LABEL_33;
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
  id v12 = [v11 faceTimeSupported];

  if ((v12 & 1) != 0) {
    goto LABEL_32;
  }
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v27 = 0;
    uint64_t v7 = "System does not support FaceTime";
    __int16 v8 = (uint8_t *)&v27;
    goto LABEL_24;
  }

    os_unfair_lock_unlock(p_clientChannelLock);
    uint64_t v9 = 1;
    goto LABEL_33;
  }

  __int16 v8 = v7;
  double v14 = OSLogHandleForIDSCategory("IDSDSession");
  uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    uint64_t v28 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Have %lu cached client data to send",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v16) && _IDSShouldLog(0LL, @"IDSDSession"))
  {
    uint64_t v26 = v8;
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDSession", @"Have %lu cached client data to send");
  }

  double v17 = 0LL;
  while (1)
  {
    double v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectAtIndexedSubscript:", v17, v26));
    if (![v18 metadataSize] && !objc_msgSend(v18, "packetBuffer"))
    {
      double v20 = OSLogHandleForTransportCategory("IDSDSession");
      double v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "_checkAndSendCachedDataForClient: there is no real packet or metadata",  buf,  2u);
      }

      uint64_t v23 = os_log_shim_legacy_logging_enabled(v22);
      if ((_DWORD)v23)
      {
        if (_IDSShouldLogTransport(v23))
        {
          _IDSLogTransport( @"IDSDSession",  @"IDS",  @"_checkAndSendCachedDataForClient: there is no real packet or metadata");
          if (_IDSShouldLog(0LL, @"IDSDSession")) {
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"_checkAndSendCachedDataForClient: there is no real packet or metadata");
          }
        }
      }

      goto LABEL_21;
    }

    unint64_t v19 = objc_msgSend( v4,  "writePacketBuffer:metaData:metadataSize:moreComing:",  objc_msgSend(v18, "packetBuffer"),  objc_msgSend(v18, "metadata"),  objc_msgSend(v18, "metadataSize"),  1);

    if (!v19) {
      break;
    }
LABEL_21:
    if (v8 == ++v17) {
      goto LABEL_31;
    }
  }

  if (v8 == v17)
  {
LABEL_31:
    double v24 = (void *)objc_claimAutoreleasedReturnValue([v4 cachedDataForClient]);
    [v24 removeAllObjects];

    [v4 setWriteHandler:0];
    goto LABEL_32;
  }

  if ((_DWORD)v17)
  {
    [v4 writePacketBuffer:0 metaData:0 metadataSize:0 moreComing:0];
    objc_msgSend(v6, "removeObjectsInRange:", 0, v17);
  }
    }

    uint64_t v105 = [obj countByEnumeratingWithState:&v112 objects:v125 count:16];
  }

  while (v105);

  uint64_t v40 = (os_log_s *)v96;
  if (v96)
  {
    uint64_t v41 = objc_claimAutoreleasedReturnValue([v96 objectForKeyedSubscript:v92]);
    uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(-[IDSAccountSync serviceController](self, "serviceController"));
    id obj = (id)v41;
    v43 = (void *)objc_claimAutoreleasedReturnValue([v42 serviceWithIdentifier:v41]);

    LODWORD(v42) = [v43 iCloudBasedService];
    id v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog accountSync](&OBJC_CLASS___IMRGLog, "accountSync"));
    uint64_t v45 = os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT);
    uint64_t v4 = v91;
    if ((_DWORD)v42)
    {
      if (v45)
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "This is an iCloud based service, ignoring Apple ID account",  buf,  2u);
      }
    }

    else
    {
      uint64_t v106 = v43;
      if (v45)
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "Found valid apple ID account, cleaning up sentinel alias",  buf,  2u);
      }

      BOOL v46 = (void *)objc_claimAutoreleasedReturnValue([v96 objectForKeyedSubscript:v93]);
      id v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "__imArrayByFilteringWithBlock:", &stru_1008F9C98));
      id v44 = (os_log_s *)[v47 mutableCopy];

      unint64_t v48 = kIDSServiceDefaultsVettedAliasesKey;
      unint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v96 objectForKeyedSubscript:kIDSServiceDefaultsVettedAliasesKey]);
      uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "__imArrayByFilteringWithBlock:", &stru_1008F9CB8));
      uint64_t v51 = [v50 mutableCopy];

      if (v5)
      {
        v118[0] = kIDSServiceDefaultsAliasKey;
        v118[1] = kIDSServiceDefaultsAliasStatusKey;
        v119[0] = v5;
        v119[1] = &off_100946C30;
        unint64_t v52 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v119,  v118,  2LL));
        -[os_log_s addObject:](v44, "addObject:", v52);

        [v51 addObject:v5];
      }

      [v96 setObject:v44 forKeyedSubscript:v93];
      [v96 setObject:v51 forKeyedSubscript:v48];
      uint64_t v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog accountSync](&OBJC_CLASS___IMRGLog, "accountSync"));
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        v55 = (void *)objc_opt_class(v95, v54);
        uint64_t v117 = v96;
        uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v117, 1LL));
        unint64_t v57 = (void *)objc_claimAutoreleasedReturnValue([v55 usefulLoggingDescriptionAccountInfos:v56]);
        *(_DWORD *)buf = 138412290;
        uint64_t v121 = (uint64_t)v57;
        _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "Found valid Apple ID account, creating real account with remote info %@",  buf,  0xCu);
      }

      unint64_t v58 = (__CFString *)objc_claimAutoreleasedReturnValue([v96 objectForKey:v94]);
      uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue(-[IDSAccountSync accountController](v95, "accountController"));
      unint64_t v60 = (IDSDAccount *)objc_claimAutoreleasedReturnValue([v59 accountWithServiceName:obj loginID:v58]);

      if (v60)
      {
        __int16 v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog accountSync](&OBJC_CLASS___IMRGLog, "accountSync"));
        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          uint64_t v121 = (uint64_t)obj;
          uint64_t v122 = 2112;
          uint64_t v123 = v58;
          _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEFAULT,  "Found existing account for service %@ and loginID %@",  buf,  0x16u);
        }

        -[IDSDAccount _updateAccountWithAccountInfo:](v60, "_updateAccountWithAccountInfo:", v96);
      }

      else
      {
        uint64_t v104 = v51;
        unint64_t v62 = objc_alloc(&OBJC_CLASS___IDSDAccount);
        __int16 v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringGUID](&OBJC_CLASS___NSString, "stringGUID"));
        uint64_t v64 = v58;
        unint64_t v60 = -[IDSDAccount initWithLoginID:service:uniqueID:accountType:accountConfig:]( v62,  "initWithLoginID:service:uniqueID:accountType:accountConfig:",  v58,  v106,  v63,  1LL,  v96);

        __int16 v65 = (void *)objc_claimAutoreleasedReturnValue(-[IDSAccountSync accountController](v95, "accountController"));
        [v65 addPrimaryAccount:v60];

        uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue(-[IDSAccountSync accountController](v95, "accountController"));
        __int16 v67 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount uniqueID](v60, "uniqueID"));
        [v66 enablePrimaryAccountWithUniqueID:v67];

        unint64_t v68 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount linkedAccounts](v60, "linkedAccounts"));
        __int16 v69 = [v68 count];

        if (v69)
        {
          uint64_t v51 = v104;
        }

        else
        {
          uint64_t v102 = v44;
          uint64_t v110 = 0u;
          uint64_t v111 = 0u;
          uint64_t v108 = 0u;
          uint64_t v109 = 0u;
          uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance"));
          uint64_t v99 = v60;
          __int16 v71 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount service](v60, "service"));
          uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue([v70 linkedServicesForService:v71]);

          __int16 v73 = [v72 countByEnumeratingWithState:&v108 objects:v116 count:16];
          p_cache = (objc_class *)&OBJC_CLASS___IDSActivityPushListener.cache;
          if (v73)
          {
            uint64_t v75 = v73;
            uint64_t v76 = *(void *)v109;
            do
            {
              for (j = 0LL; j != v75; j = (char *)j + 1)
              {
                if (*(void *)v109 != v76) {
                  objc_enumerationMutation(v72);
                }
                uint64_t v78 = *(void *)(*((void *)&v108 + 1) + 8LL * (void)j);
                uint64_t v79 = p_cache;
                uint64_t v80 = objc_alloc(p_cache + 348);
                uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringGUID](&OBJC_CLASS___NSString, "stringGUID"));
                uint64_t v82 = [v80 initWithLoginID:v64 service:v78 uniqueID:v81 accountType:1 accountConfig:v96];

                uint64_t v83 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog accountSync](&OBJC_CLASS___IMRGLog, "accountSync"));
                if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412290;
                  uint64_t v121 = (uint64_t)v82;
                  _os_log_impl( (void *)&_mh_execute_header,  v83,  OS_LOG_TYPE_DEFAULT,  "  Creating a linked account: %@",  buf,  0xCu);
                }

                uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue(-[IDSAccountSync accountController](v95, "accountController"));
                [v84 addPrimaryAccount:v82];

                uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue(-[IDSAccountSync accountController](v95, "accountController"));
                uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue([v82 uniqueID]);
                [v85 enablePrimaryAccountWithUniqueID:v86];

                p_cache = v79;
              }

              uint64_t v75 = [v72 countByEnumeratingWithState:&v108 objects:v116 count:16];
            }

            while (v75);
          }

          uint64_t v4 = v91;
          uint64_t v40 = (os_log_s *)v96;
          id v44 = v102;
          uint64_t v51 = v104;
          unint64_t v60 = v99;
        }

        unint64_t v58 = v64;
      }

      uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue(-[IDSAccountSync accountController](v95, "accountController"));
      uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount uniqueID](v60, "uniqueID"));
      [v87 enablePrimaryAccountWithUniqueID:v88];

      uint64_t v89 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount linkedAccounts](v60, "linkedAccounts"));
      v107[0] = _NSConcreteStackBlock;
      v107[1] = 3221225472LL;
      v107[2] = sub_1000E0150;
      v107[3] = &unk_1008F9CE0;
      v107[4] = v95;
      objc_msgSend(v89, "__imForEach:", v107);

      if (!-[IDSDAccount isRegistered](v60, "isRegistered"))
      {
        -[IDSDAccount registerAccount](v60, "registerAccount");
        uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount linkedAccounts](v60, "linkedAccounts"));
        objc_msgSend(v90, "__imForEach:", &stru_1008F9D20);
      }

      v43 = v106;
    }

LABEL_69:
  }

  else
  {
    uint64_t v4 = v91;
  }

LABEL_71:
}

    BOOL v46 = (void *)objc_claimAutoreleasedReturnValue([v9 registeredDeserializationError]);
    if (!v46) {
      goto LABEL_38;
    }
    id v47 = (void *)objc_claimAutoreleasedReturnValue([v9 shouldHaveRegisteredIdentity]);
    if (v47)
    {
      unint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v9 shouldHaveRegisteredIdentity]);
      unint64_t v49 = [v48 BOOLValue];

      if (!v49)
      {
LABEL_38:
        v55 = (void *)objc_claimAutoreleasedReturnValue([v9 unregisteredKeychainError]);
        if (!v55) {
          goto LABEL_49;
        }
        uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v9 shouldHaveUnregisteredIdentity]);
        if (v56)
        {
          unint64_t v57 = (void *)objc_claimAutoreleasedReturnValue([v9 shouldHaveUnregisteredIdentity]);
          unint64_t v58 = [v57 BOOLValue];

          if (!v58) {
            goto LABEL_49;
          }
        }

        else
        {
        }

        uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([v9 unregisteredKeychainError]);
        unint64_t v60 = (void *)objc_claimAutoreleasedReturnValue([v59 domain]);

        __int16 v61 = (void *)objc_claimAutoreleasedReturnValue([v9 unregisteredKeychainError]);
        unint64_t v62 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v61 code]));

        __int16 v63 = (void *)objc_claimAutoreleasedReturnValue([v9 unregisteredKeychainError]);
        uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([v63 userInfo]);

        __int16 v65 = (void *)objc_claimAutoreleasedReturnValue([v64 objectForKey:@"IDSKeychainWrapperErrorOSStatus"]);
        uint64_t v66 = [v60 isEqualToString:@"IDSKeychainWrapperErrorDomain"];
        if (v65) {
          __int16 v67 = v66;
        }
        else {
          __int16 v67 = 0;
        }
        if (v67 == 1)
        {
          unint64_t v68 = v65;

          unint64_t v62 = v68;
        }

        __int16 v69 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @" (unregKeychain %@:%ld)",  v60,  [v62 integerValue]));
        uint64_t v70 = objc_claimAutoreleasedReturnValue([v26 stringByAppendingString:v69]);

        uint64_t v26 = (void *)v70;
LABEL_49:
        __int16 v71 = (void *)objc_claimAutoreleasedReturnValue([v9 unregisteredDeserializationError]);
        if (v71)
        {
          uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue([v9 shouldHaveUnregisteredIdentity]);
          if (v72)
          {
            __int16 v73 = (void *)objc_claimAutoreleasedReturnValue([v9 shouldHaveUnregisteredIdentity]);
            uint64_t v74 = [v73 BOOLValue];

            if (!v74) {
              goto LABEL_55;
            }
          }

          else
          {
          }

          uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue([v9 unregisteredDeserializationError]);
          uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue([v75 domain]);
          uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue([v9 unregisteredDeserializationError]);
          uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @" (unregDeserial %@:%ld)",  v76,  [v77 code]));
          uint64_t v79 = objc_claimAutoreleasedReturnValue([v26 stringByAppendingString:v78]);

          uint64_t v26 = (void *)v79;
        }

      uint64_t v34 = v22 - v11;
      uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog phoneRepair](&OBJC_CLASS___IMRGLog, "phoneRepair"));
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v36 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  v34));
        *(_DWORD *)buf = 138412290;
        uint64_t v45 = v36;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Next repair date %@", buf, 0xCu);
      }

      int v37 = objc_alloc(&OBJC_CLASS___IMDispatchTimer);
      uint64_t v39 = im_primary_queue(v37, v38);
      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
      v43[0] = _NSConcreteStackBlock;
      v43[1] = 3221225472LL;
      v43[2] = sub_1000EDF20;
      v43[3] = &unk_1008F8088;
      v43[4] = self;
      uint64_t v41 = -[IMDispatchTimer initWithQueue:interval:repeats:handlerBlock:]( v37,  "initWithQueue:interval:repeats:handlerBlock:",  v40,  (unint64_t)v34,  0LL,  v43);
      uint64_t v42 = self->_phoneRepairTimer;
      self->_phoneRepairTimer = v41;

      goto LABEL_35;
    }

    double v20 = (void *)objc_claimAutoreleasedReturnValue(-[IDSAccountRepair userDefaults](self, "userDefaults"));
    double v18 = (void *)objc_claimAutoreleasedReturnValue([v20 appValueForKey:@"InitialRepairInterval"]);

    if (v18)
    {
      [v18 doubleValue];
      double v22 = v21;
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[IMRGLog phoneRepair](&OBJC_CLASS___IMRGLog, "phoneRepair"));
      if (!os_log_type_enabled((os_log_t)v23, OS_LOG_TYPE_DEFAULT))
      {
LABEL_31:

        goto LABEL_32;
      }

      double v24 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  v22));
      *(_DWORD *)buf = 138412290;
      uint64_t v45 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v23,  OS_LOG_TYPE_DEFAULT,  "Loaded initial repair date %@",  buf,  0xCu);
    }

    else
    {
      uint64_t v29 = arc4random_uniform(0x278D00u);
      uint64_t v30 = v29;
      else {
        uint64_t v31 = (double)v30;
      }
      double v22 = v11 + v31;
      id v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog phoneRepair](&OBJC_CLASS___IMRGLog, "phoneRepair"));
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        id v33 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  v22));
        *(_DWORD *)buf = 138412290;
        uint64_t v45 = v33;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Generated inital repair date %@",  buf,  0xCu);
      }

      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(-[IDSAccountRepair userDefaults](self, "userDefaults"));
      double v24 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v22));
      [v23 setAppValue:v24 forKey:@"InitialRepairInterval"];
    }

    goto LABEL_31;
  }

LABEL_33:
LABEL_34:

      goto LABEL_35;
    }

    uint64_t v27 = os_channel_attr_create();
    if (!v27)
    {
      double v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_32;
      }
      *(_WORD *)&buf[0].sa_len = 0;
      double v25 = "connectTransportThreadForClient: os_channel_attr_create failed";
      goto LABEL_31;
    }

    uint64_t v28 = v27;
    os_channel_attr_set_key(v27, out, 16LL);
    os_channel_attr_set(v28, 7LL, 1LL);
    os_channel_attr_set(v28, 26LL, 1LL);
    extended = os_channel_create_extended(v100, 1LL, 0LL, 0xFFFFFFFFLL, v28);
    os_channel_attr_destroy(v28, v30);
    if (!extended)
    {
      double v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_32;
      }
      *(_WORD *)&buf[0].sa_len = 0;
      double v25 = "os_channel_create_extended failed";
      goto LABEL_31;
    }

    uint64_t v76 = extended;
    uint64_t v77 = v6;
    *(void *)&buf[0].sa_len = 7680LL;
    memset(&buf[0].sa_data[6], 0, 20);
    *(_WORD *)buf[0].sa_data = __rev16(nw_endpoint_get_port(endpoint));
    buf[0].sa_len = 28;
    address = nw_endpoint_create_address(buf);
    memset(&buf[0].sa_data[2], 0, 24);
    *(_DWORD *)&buf[0].sa_len = 7708;
    id v32 = nw_endpoint_create_address(buf);
    id v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t v94 = 138412546;
      uint64_t v95 = address;
      uint64_t v96 = 2112;
      uint64_t v97 = v32;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "registration nexusdata localEndpoint %@ remoteEndpoint %@",  v94,  0x16u);
    }

    uint64_t v92 = 0LL;
    uint64_t v34 = nw_path_create_assign_message(&v92, v100, 0LL, out, 16LL, address, 0LL);
    uint64_t v78 = v32;
    if (!v34)
    {
      uint64_t v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v94 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "nw_path_create_assign_message failed",  v94,  2u);
      }

      id v6 = v77;
      goto LABEL_76;
    }

    uint64_t v35 = (void *)v34;
    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(-[IDSTransportLevelAgent registration](self->_agent, "registration"));
    int v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v35, v92));
    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v4 clientUUID]);
    uint64_t v84 = [v36 assignNexusData:v37 toClient:v38];

    free(v35);
    if ((v84 & 1) == 0)
    {
      uint64_t v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
      id v6 = v77;
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v94 = 0;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "assignNexusData:toClient: failed", v94, 2u);
      }

      goto LABEL_76;
    }

    lock = &self->_lock;
    os_unfair_lock_lock(&self->_lock);
    uint64_t v39 = objc_alloc_init(&OBJC_CLASS___IDSMultiplexerConnection);
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v4 clientUUID]);
    -[IDSMultiplexerConnection setClientUUID:](v39, "setClientUUID:", v40);

    id v6 = v77;
    -[IDSMultiplexerConnection setPath:](v39, "setPath:", v77);
    uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v4 multiplexerParams]);
    -[IDSMultiplexerConnection setMultiplexerParams:](v39, "setMultiplexerParams:", v41);

    -[IDSMultiplexerConnection setParameters:](v39, "setParameters:", v15);
    -[IDSMultiplexerConnection setPid:](v39, "setPid:", v19);
    uint64_t v42 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", v101);
    -[IDSMultiplexerConnection setProcessUUID:](v39, "setProcessUUID:", v42);

    uint64_t v74 = address;
    -[IDSMultiplexerConnection setLocalEndpoint:](v39, "setLocalEndpoint:", address);
    -[IDSMultiplexerConnection setRemoteEndpoint:](v39, "setRemoteEndpoint:", v78);
    -[IDSMultiplexerConnection setLocalPort:](v39, "setLocalPort:", nw_endpoint_get_port(endpoint));
    -[IDSMultiplexerConnection setRemotePort:](v39, "setRemotePort:", 0LL);
    v43 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", v100);
    -[IDSMultiplexerConnection setNexusInstanceUUID:](v39, "setNexusInstanceUUID:", v43);

    LODWORD(v43) = nw_endpoint_get_port(endpoint);
    -[IDSMultiplexerConnection setPortsSignature:]( v39,  "setPortsSignature:",  nw_endpoint_get_port(v86) | ((_DWORD)v43 << 16));
    if ((nw_parameters_get_data_mode(v15) & 0xFFFFFFFE) == 2) {
      -[IDSMultiplexerConnection setIsTCP:](v39, "setIsTCP:", 1LL, lock);
    }
    connections = self->_connections;
    uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "clientUUID", lock));
    uint64_t v75 = v39;
    -[NSMutableDictionary setObject:forKeyedSubscript:](connections, "setObject:forKeyedSubscript:", v39, v45);

    BOOL v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t v94 = 138412290;
      uint64_t v95 = v39;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "Created listener %@", v94, 0xCu);
    }

    id v47 = (void *)objc_claimAutoreleasedReturnValue([v4 multiplexerParams]);
    unint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v47 salt]);

    uint64_t v83 = v15;
    if (v48)
    {
      uint64_t v90 = 0u;
      uint64_t v91 = 0u;
      uint64_t v88 = 0u;
      uint64_t v89 = 0u;
      unint64_t v49 = self->_transports;
      uint64_t v85 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v49,  "countByEnumeratingWithState:objects:count:",  &v88,  v93,  16LL);
      if (v85)
      {
        uint64_t v81 = 0LL;
        uint64_t v82 = v4;
        uint64_t v80 = *(void *)v89;
        do
        {
          for (i = 0LL; i != v85; i = (char *)i + 1)
          {
            uint64_t v51 = self;
            if (*(void *)v89 != v80) {
              objc_enumerationMutation(v49);
            }
            unint64_t v52 = v49;
            uint64_t v53 = *(void *)(*((void *)&v88 + 1) + 8LL * (void)i);
            uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v82 multiplexerParams]);
            v55 = (void *)objc_claimAutoreleasedReturnValue([v54 sessionID]);
            uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v82 multiplexerParams]);
            unint64_t v57 = (void *)objc_claimAutoreleasedReturnValue([v56 salt]);
            unint64_t v58 = IDSIDAliasHashUUIDString(v53, v57);
            uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
            unint64_t v60 = [v55 isEqualToString:v59];

            if (v60)
            {
              self = v51;
              __int16 v61 = objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v51->_transports, "objectForKeyedSubscript:", v53));

              uint64_t v81 = (void *)v61;
              uint64_t v15 = v83;
            }

            else
            {
              uint64_t v15 = v83;
              self = v51;
            }

            unint64_t v62 = &IMInsertBoolsToXPCDictionary_ptr;
            unint64_t v49 = v52;
          }

          uint64_t v85 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v52,  "countByEnumeratingWithState:objects:count:",  &v88,  v93,  16LL);
        }

        while (v85);
        __int16 v63 = v81;
        uint64_t v4 = v82;
        id v6 = v77;
        uint64_t v7 = v79;
        goto LABEL_70;
      }

      __int16 v63 = 0LL;
      id v6 = v77;
    }

    else
    {
      transports = self->_transports;
      unint64_t v49 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([v4 multiplexerParams]);
      uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary sessionID](v49, "sessionID"));
      __int16 v67 = transports;
      uint64_t v15 = v83;
      __int16 v63 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v67, "objectForKeyedSubscript:", v66));
    }

    unint64_t v62 = &IMInsertBoolsToXPCDictionary_ptr;
LABEL_70:

    if (v63)
    {
      uint64_t v64 = (os_log_s *)v75;
      -[IDSMultiplexerConnection setTransport:](v75, "setTransport:", v63);
      -[IDSMultiplexerConnection setOsChannel:](v75, "setOsChannel:", v76);
      os_unfair_lock_unlock(locka);
      [v63 addListenerConnection:v75];
    }

    else
    {
      unint64_t v68 = (os_log_s *)objc_claimAutoreleasedReturnValue([v62[219] Multiplexer]);
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v69 = (void *)objc_claimAutoreleasedReturnValue([v4 multiplexerParams]);
        uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue([v69 sessionID]);
        __int16 v71 = self->_transports;
        *(_DWORD *)uint64_t v94 = 138412546;
        uint64_t v95 = v70;
        uint64_t v96 = 2112;
        uint64_t v97 = v71;
        _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "Can't find transport for %@ in transports %@",  v94,  0x16u);

        uint64_t v15 = v83;
      }

      os_unfair_lock_unlock(locka);
      uint64_t v64 = (os_log_s *)v75;
      __int16 v63 = 0LL;
    }

    address = v74;
LABEL_76:

    goto LABEL_33;
  }

  uint64_t v7 = (nw_endpoint *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    double v13 = (void *)objc_claimAutoreleasedReturnValue([v4 clientUUID]);
    *(_DWORD *)&buf[0].sa_len = 138412290;
    *(void *)&buf[0].sa_data[2] = v13;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "no nw_path for client %@", &buf[0].sa_len, 0xCu);
  }

  return v3;
}
}

    goto LABEL_8;
  }

  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_1006A3294(self);
  }
LABEL_7:
  id v6 = v4;
LABEL_8:
}

  return v17;
}
}
}

  if (objc_msgSend(*(id *)(v141 + 40), "isEqualToString:", IDSServiceNameiMessage, v123))
  {
    uint64_t v40 = [*(id *)(v141 + 32) unsignedIntValue];
    if ((_DWORD)v40 == 100)
    {
      uint64_t v42 = im_primary_queue(v40, v41);
      v43 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v42);
      v174[0] = _NSConcreteStackBlock;
      v174[1] = 3221225472LL;
      v174[2] = sub_10037CF78;
      v174[3] = &unk_1008F5F58;
      v174[4] = *(void *)(v141 + 88);
      v175 = *(id *)(v141 + 96);
      v176 = *(id *)(v141 + 104);
      dispatch_async(v43, v174);

      id v44 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v141 + 88) senderKeyDistributionManager]);
      uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v141 + 80) senderPushToken]);
      [v44 markLastIMessagedPeerToken:v45 localURI:*(void *)(v141 + 104) remoteURI:*(void *)(v141 + 96)];
    }
  }

  BOOL v46 = v141;
  if (*(void *)(v141 + 120))
  {
    id v47 = [*(id *)(v141 + 32) unsignedIntValue];
    BOOL v46 = v141;
    if (v47 == 133)
    {
      unint64_t v48 = OSLogHandleForIDSCategory("IDSDaemon_SenderKey");
      unint64_t v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v50 = *(void **)(v141 + 72);
        uint64_t v51 = *(void **)(v141 + 96);
        unint64_t v52 = *(void *)(v141 + 104);
        *(_DWORD *)buf = 138412802;
        v194 = v50;
        v195 = 2112;
        v196 = v51;
        v197 = 2112;
        v198 = v52;
        _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "Received SenderKeyDistributionMessage with GUID %@ fromURI: %@ toURI: %@",  buf,  0x20u);
      }

      if (os_log_shim_legacy_logging_enabled(v53)
        && _IDSShouldLog(0LL, @"IDSDaemon_SenderKey"))
      {
        __int128 v127 = *(void *)(v141 + 96);
        __int128 v129 = *(void *)(v141 + 104);
        uint64_t v124 = *(void *)(v141 + 72);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon_SenderKey",  @"Received SenderKeyDistributionMessage with GUID %@ fromURI: %@ toURI: %@");
      }

      uint64_t v54 = IDSIncomingMessageDecryptedDataKey;
      v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v187[5], "objectForKey:", IDSIncomingMessageDecryptedDataKey, v124, v127, v129));
      unint64_t v57 = objc_opt_class(&OBJC_CLASS___NSString, v56);
      if ((objc_opt_isKindOfClass(v55, v57) & 1) != 0)
      {
        unint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([v187[5] objectForKey:v54]);
        uint64_t v59 = objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v58));
      }

      else
      {
        unint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([v187[5] objectForKey:v54]);
        uint64_t v110 = objc_opt_class(&OBJC_CLASS___NSData, v109);
        if ((objc_opt_isKindOfClass(v58, v110) & 1) == 0)
        {
          uint64_t v111 = 0LL;
          goto LABEL_90;
        }

        uint64_t v59 = objc_claimAutoreleasedReturnValue([v187[5] objectForKey:v54]);
      }

      uint64_t v111 = (void *)v59;
LABEL_90:

      uint64_t v112 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v141 + 88) senderKeyDistributionManager]);
      uint64_t v113 = (void *)objc_claimAutoreleasedReturnValue( [v112 processedKeyMessageWithRemoteURI:*(void *)(v141 + 96) localURI:*(void *)(v141 + 104) messageData:v111 messageGUID:*(void *)(v141 + 72)]);

      [*(id *)(v141 + 88) _sendCertifiedDeliveryReceiptForSenderKeyDistributionMessage:*(void *)(v141 + 80) service:*(void *)(v141 + 40) keyIDs:v113];
      +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  *(void *)(v141 + 128));
      (*(void (**)(void))(*(void *)(v141 + 192) + 16LL))();

      goto LABEL_107;
    }
  }

  if ([*(id *)(v46 + 88) isFirewallOnForService:*(void *)(v46 + 112)])
  {
    unint64_t v60 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPeerIDManager sharedInstance](&OBJC_CLASS___IDSPeerIDManager, "sharedInstance"));
    __int16 v61 = *(void *)(v141 + 96);
    unint64_t v62 = *(void *)(v141 + 104);
    __int16 v63 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v141 + 112) queryService]);
    __int128 v130 = (void *)objc_claimAutoreleasedReturnValue([v60 senderCorrelationIdentifierForURI:v61 fromURI:v62 service:v63]);

    if ([*(id *)(v141 + 88) shouldFirewallDropMessageForFromURI:*(void *)(v141 + 96) mergeID:v130 service:*(void *)(v141 + 112)])
    {
      uint64_t v64 = OSLogHandleForIDSCategory("IDSDaemon");
      __int16 v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v66 = *(void **)(v141 + 72);
        __int16 v67 = *(void **)(v141 + 96);
        *(_DWORD *)buf = 138412546;
        v194 = v66;
        v195 = 2112;
        v196 = v67;
        _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEFAULT,  "Message %@ is coming from an account that is firewalled from talking to this device. Sender Was: %@",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v68) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        uint64_t v124 = *(void *)(v141 + 72);
        __int128 v127 = *(void *)(v141 + 96);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Message %@ is coming from an account that is firewalled from talking to this device. Sender Was: %@");
      }

      objc_msgSend( *(id *)(v141 + 88),  "noteBlockedMessageFromURI:service:",  *(void *)(v141 + 96),  *(void *)(v141 + 112),  v124,  v127);
      if (+[IDSDaemon _commandIsSessionCommand:]( IDSDaemon,  "_commandIsSessionCommand:",  [(id)v181[5] integerValue])
        || +[IDSDaemon _commandIsSessionGroupSessionCommand:]( IDSDaemon,  "_commandIsSessionGroupSessionCommand:",  [(id)v181[5] integerValue]))
      {
        __int16 v69 = OSLogHandleForIDSCategory("IDSDaemon");
        uint64_t v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);
        if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v71 = *(void **)(v141 + 72);
          *(_DWORD *)buf = 138412290;
          v194 = v71;
          _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEFAULT,  "Firewalled message %@ is coming for session.",  buf,  0xCu);
        }

        if (os_log_shim_legacy_logging_enabled(v72)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          uint64_t v125 = *(void *)(v141 + 72);
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Firewalled message %@ is coming for session.");
        }

        __int16 v73 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDSessionController sharedInstance]( &OBJC_CLASS___IDSDSessionController,  "sharedInstance",  v125));
        uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue([v73 groupSessionGroupIDs]);

        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        uint64_t v75 = v74;
        uint64_t v76 = [v75 countByEnumeratingWithState:&v170 objects:v192 count:16];
        if (v76)
        {
          uint64_t v77 = 0;
          uint64_t v78 = *(void *)v171;
          do
          {
            for (i = 0LL; i != v76; i = (char *)i + 1)
            {
              if (*(void *)v171 != v78) {
                objc_enumerationMutation(v75);
              }
              uint64_t v80 = *(void *)(*((void *)&v170 + 1) + 8LL * (void)i);
              uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDSessionController sharedInstance]( &OBJC_CLASS___IDSDSessionController,  "sharedInstance"));
              uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue([v81 sessionWithGroupID:v80]);

              if (v82)
              {
                uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue([v82 getFromService]);
                uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v141 + 112) identifier]);
                if ([v83 isEqualToIgnoringCase:v84])
                {
                  uint64_t v85 = [v82 destinationsContainFromURI:*(void *)(v141 + 96)];

                  if (v85)
                  {
                    if ([v82 groupSessionState] == 1)
                    {
                      uint64_t v86 = OSLogHandleForIDSCategory("IDSDaemon");
                      uint64_t v87 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
                      if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
                      {
                        uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v141 + 112) identifier]);
                        uint64_t v89 = (void *)objc_claimAutoreleasedReturnValue([v82 groupID]);
                        *(_DWORD *)buf = 138412546;
                        v194 = v88;
                        v195 = 2112;
                        v196 = v89;
                        _os_log_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_DEFAULT,  "Ending session for service %@ with groupID %@",  buf,  0x16u);
                      }

                      if (os_log_shim_legacy_logging_enabled(v90)
                        && _IDSShouldLog(0LL, @"IDSDaemon"))
                      {
                        __int128 v126 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v141 + 112) identifier]);
                        __int128 v128 = (void *)objc_claimAutoreleasedReturnValue([v82 groupID]);
                        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Ending session for service %@ with groupID %@");
                      }

                      objc_msgSend(v82, "endSessionWithReason:", 48, v126, v128);
                    }

                    uint64_t v77 = 1;
                  }
                }

                else
                {
                }
              }
            }

            uint64_t v76 = [v75 countByEnumeratingWithState:&v170 objects:v192 count:16];
          }

          while (v76);

          if ((v77 & 1) != 0) {
            goto LABEL_106;
          }
        }

        else
        {
        }
      }

      uint64_t v121 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v141 + 88) firewallNotificationCenter]);
      [v121 postNotificationForURI:*(void *)(v141 + 96) onService:*(void *)(v141 + 112) shouldRateLimit:1 command:v181[5]];

LABEL_106:
      +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  *(void *)(v141 + 128));
      uint64_t v122 = [[IDSMissingMessageMetric alloc] initWithReason:702 guid:*(void *)(v141 + 72) service:*(void *)(v141 + 40) additionalInformation:0];
      +[IDSMissingMessageMetricReporter sendMetric:](&OBJC_CLASS___IDSMissingMessageMetricReporter, "sendMetric:", v122);
      [*(id *)(v141 + 88) _sendCertifiedDeliveryReceiptIfNeededForNiceMessage:*(void *)(v141 + 80) service:*(void *)(v141 + 40) failureReason:&off_100947D28 failureReasonMessage:0 generateDeliveryReceipt:0];
      (*(void (**)(void))(*(void *)(v141 + 192) + 16LL))();

      uint64_t v111 = v130;
      goto LABEL_107;
    }
  }

  v142[0] = _NSConcreteStackBlock;
  v142[1] = 3221225472LL;
  v142[2] = sub_10037D1F4;
  v142[3] = &unk_1009026D8;
  v167 = &v186;
  v143 = *(id *)(v141 + 96);
  v144 = *(id *)(v141 + 136);
  v145 = *(id *)(v141 + 104);
  __int16 v146 = *(id *)(v141 + 112);
  v147 = *(id *)(v141 + 72);
  __int128 v140 = *(int8x16_t *)(v141 + 80);
  uint64_t v91 = (id)v140.i64[0];
  __int16 v148 = vextq_s8(v140, v140, 8uLL);
  v149 = *(id *)(v141 + 40);
  v150 = v139;
  v151 = *(id *)(v141 + 128);
  uint64_t v92 = v132;
  v152 = v92;
  v166 = *(id *)(v141 + 192);
  v168 = &v180;
  v169 = *(_BYTE *)(v141 + 201);
  v153 = *(id *)(v141 + 32);
  v154 = v133;
  v155 = v138;
  v156 = v135;
  v157 = v137;
  v158 = v136;
  v159 = *(id *)(v141 + 144);
  v160 = *(id *)(v141 + 152);
  v161 = *(id *)(v141 + 160);
  v162 = v134;
  v163 = *(id *)(v141 + 168);
  v164 = *(id *)(v141 + 176);
  v165 = *(id *)(v141 + 184);
  uint64_t v93 = objc_retainBlock(v142);
  if (*(_BYTE *)(v141 + 202))
  {
    uint64_t v94 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v141 + 80) failureReason]);
    uint64_t v95 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v141 + 80) failureMessageID]);
    uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v141 + 80) failureReasonMessage]);
    uint64_t v97 = (__CFDictionary *)[v187[5] mutableCopy];
    uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPeerIDManager sharedInstance](&OBJC_CLASS___IDSPeerIDManager, "sharedInstance"));
    uint64_t v99 = *(void *)(v141 + 136);
    uint64_t v101 = *(void *)(v141 + 96);
    uint64_t v100 = *(void *)(v141 + 104);
    uint64_t v102 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v141 + 112) queryService]);
    uint64_t v103 = [v98 shouldShowPeerErrorsFor:v101 pushToken:v99 fromURI:v100 service:v102];

    uint64_t v104 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v103));
    if (v104) {
      CFDictionarySetValue(v97, IDSIncomingMessageShouldShowPeerErrorsKey, v104);
    }

    objc_storeStrong(v187 + 5, v97);
    uint64_t v105 = *(void **)(v141 + 88);
    uint64_t v106 = v187[5];
    uint64_t v107 = *(void **)(v141 + 112);
    uint64_t v108 = (void *)objc_claimAutoreleasedReturnValue([v107 queryService]);
    [v105 _processMessageError:v103 topLevelMessage:v106 error:v94 messageID:v95 failureReasonMessage:v96 service:v107 serviceType:v108 pushToken:*(void *)(v141 + 136) fromURI:*(void *)(v141 + 96) to URI:*(void *)(v141 + 104) groupID:*(void *)(v141 + 176) completionBlock:v93];
  }

  else if (v92)
  {
    ((void (*)(void *, void, void, id))v93[2])( v93,  0,  0,  objc_msgSend(*(id *)(v141 + 88), "_shouldDropMessageForIncomingDecryptionErrorType:", objc_msgSend(v92, "code")));
  }

  else
  {
    uint64_t v114 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v115 = (os_log_s *)objc_claimAutoreleasedReturnValue(v114);
    if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v115,  OS_LOG_TYPE_DEFAULT,  "No Message Error, Processing Immediately",  buf,  2u);
    }

    ((void (*)(void *, void, void, void))v93[2])(v93, 0LL, 0LL, 0LL);
  }

  uint64_t v111 = v143;
LABEL_107:

  _Block_object_dispose(&v180, 8);
  _Block_object_dispose(&v186, 8);
}

      uint64_t v27 = objc_alloc(&OBJC_CLASS___IDSKTRegistrationData);
      uint64_t v36 = 0LL;
      uint64_t v28 = -[IDSKTRegistrationData initWithDataRepresentation:error:]( v27,  "initWithDataRepresentation:error:",  v14,  &v36);
      uint64_t v29 = v36;
      uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
      uint64_t v31 = v30;
      if (v28)
      {
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          uint64_t v41 = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Successfully deserialized registered KT Data from keychain for keyIndex, saving to config. { keyIndex: %u }",  buf,  8u);
        }

        -[IDSKTRegistrationDataConfig setRegisteredKTData:](v6, "setRegisteredKTData:", v28);
      }

      else
      {
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109378;
          uint64_t v41 = v5;
          uint64_t v42 = 2112;
          v43 = v29;
          _os_log_error_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_ERROR,  "Failed to deserialize registerd KT Data from keychain for keyIndex, need to generate new KT Data. { keyIndex : %u, error: %@ }",  buf,  0x12u);
        }

        uint64_t v34 = 1;
      }

      goto LABEL_40;
    }

    double v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      uint64_t v41 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "No KT data found in keychain, we need to generate a new one for keyIndex. { keyIndex: %u }",  buf,  8u);
    }

    double v25 = self->_serviceIndexToKTRegDataConfigs;
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  (unsigned __int16)v5));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v25, "setObject:forKeyedSubscript:", v6, v26);
    uint64_t v34 = 1;
LABEL_41:

    ++v5;
  }

  while (v5 != 4);
  if (a3) {
    *a3 = v34 & 1;
  }
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    uint64_t result = swift_bridgeObjectRelease(v14);
    id v33 = v40;
    if ((v40 & 0x8000000000000000LL) != 0 || (v40 & 0x4000000000000000LL) != 0)
    {
      swift_bridgeObjectRetain(v40);
      uint64_t v34 = _CocoaArrayWrapper.endIndex.getter(v37);
      uint64_t result = swift_release(v33);
      if (v34)
      {
LABEL_35:
        if (v34 >= 1)
        {
          for (k = 0LL; k != v34; ++k)
          {
            if ((v33 & 0xC000000000000001LL) != 0)
            {
              uint64_t v36 = specialized _ArrayBuffer._getElementSlowPath(_:)(k, v33);
            }

            else
            {
              uint64_t v36 = *(void *)(v33 + 8 * k + 32);
              swift_retain(v36);
            }

            dispatch thunk of ModelContext.delete<A>(_:)(v36, v12, v13);
            swift_release(v36);
          }

          return swift_release(v33);
        }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

void sub_10003C0C4(id a1)
{
  qword_1009BE6E0 = IMWeakLinkClass(@"GLTKeyDiversification", @"MessageProtection");
}

id sub_10003CC58(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) setAggregatableMessages:v3];
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v22 objects:v28 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v23;
    do
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v23 != v8) {
          objc_enumerationMutation(v5);
        }
        __int16 v10 = *(void **)(*((void *)&v22 + 1) + 8LL * (void)i);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 targetPeerID]);
        id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 targetToken]);
        double v13 = (void *)objc_claimAutoreleasedReturnValue([v11 URIByAddingPushToken:v12]);

        if (v13) {
          -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v10, v13);
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v22 objects:v28 count:16];
    }

    while (v7);
  }

  double v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery](&OBJC_CLASS___IDSFoundationLog, "delivery"));
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138412290;
    uint64_t v27 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "GUID %@ finished constructing aggregatable messages",  buf,  0xCu);
  }

  double v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"GUID %@ Message to send per destination:\n%@",  *(void *)(a1 + 40),  v4));
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_10003CEB0;
  v20[3] = &unk_1008F6010;
  id v21 = v16;
  id v17 = v16;
  cut_dispatch_log_queue(v20);
  double v18 = (void *)objc_claimAutoreleasedReturnValue( +[CUTUnsafePromise fulfilledPromiseWithValue:]( &OBJC_CLASS___CUTUnsafePromise,  "fulfilledPromiseWithValue:",  *(void *)(a1 + 32)));

  return v18;
}

void sub_10003CEB0(uint64_t a1)
{
  double v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery_oversized](&OBJC_CLASS___IDSFoundationLog, "delivery_oversized"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315651;
    id v5 = "IDSIMLMessageFactoryComponent.m";
    __int16 v6 = 1024;
    int v7 = 72;
    __int16 v8 = 2113;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s:%d %{private}@", (uint8_t *)&v4, 0x1Cu);
  }
}

void sub_10003DF6C(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

void sub_10003DF80(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

  ;
}

  ;
}

void sub_10003E560(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 state])
  {
    uint64_t v4 = OSLogHandleForIDSCategory("1to1EC");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v6 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
      *(_DWORD *)buf = 138412290;
      uint64_t v11 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Failed to setup RTCReporting to report EC metric { error: %@ }",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v7) && _IDSShouldLog(0LL, @"1to1EC"))
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
      _IDSLogV( 0LL,  @"IDSFoundation",  @"1to1EC",  @"Failed to setup RTCReporting to report EC metric { error: %@ }");
    }
  }

  else
  {
    __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([v3 value]);
    [v8 sendMessageWithCategory:32 type:97 payload:*(void *)(a1 + 32) error:0];
  }
}

void sub_10003F314(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 state])
  {
    uint64_t v4 = OSLogHandleForIDSCategory("1to1EC");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v6 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
      *(_DWORD *)buf = 138412290;
      uint64_t v11 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Failed to setup RTCReporting to report EC metric { error: %@ }",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v7) && _IDSShouldLog(0LL, @"1to1EC"))
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
      _IDSLogV( 0LL,  @"IDSFoundation",  @"1to1EC",  @"Failed to setup RTCReporting to report EC metric { error: %@ }");
    }
  }

  else
  {
    __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([v3 value]);
    [v8 sendMessageWithCategory:32 type:97 payload:*(void *)(a1 + 32) error:0];
  }
}

void sub_10003F488(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = a1[4];
    uint64_t v7 = @"YES";
    if (a1[5]) {
      __int16 v8 = @"YES";
    }
    else {
      __int16 v8 = @"NO";
    }
    if (!a1[6]) {
      uint64_t v7 = @"NO";
    }
    int v9 = 138413058;
    uint64_t v10 = v6;
    __int16 v11 = 2112;
    id v12 = v8;
    __int16 v13 = 2112;
    double v14 = v7;
    __int16 v15 = 2112;
    id v16 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Finished capturing AutoBugCapture diagnostics for decryption failure { context: %@, legacySuccess: %@, ECSuccess: %@, error: %@ }",  (uint8_t *)&v9,  0x2Au);
  }
}

void sub_10003F588(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (*(void *)(a1 + 40)) {
      uint64_t v7 = @"YES";
    }
    else {
      uint64_t v7 = @"NO";
    }
    int v8 = 138412802;
    uint64_t v9 = v6;
    __int16 v10 = 2112;
    __int16 v11 = v7;
    __int16 v12 = 2112;
    id v13 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Finished capturing AutoBugCapture diagnostics for decryption failure { context: %@, secondarySuccess: %@, error: %@ }",  (uint8_t *)&v8,  0x20u);
  }
}

LABEL_6:
    int v8 = 0;
    goto LABEL_7;
  }

  int v8 = 1;
LABEL_7:

  return v8;
}

    uint64_t v6 = 1LL;
    goto LABEL_7;
  }

  switch(v5)
  {
    case -1011LL:
    case -1008LL:
    case -1004LL:
    case -1002LL:
    case -1001LL:
    case -999LL:
    case -998LL:
      goto LABEL_6;
    case -1010LL:
    case -1009LL:
    case -1007LL:
    case -1006LL:
    case -1005LL:
    case -1003LL:
    case -1000LL:
      break;
    default:
      if (v5 == -2000 || v5 == -1200) {
        goto LABEL_6;
      }
      break;
  }

  return v8;
}

  return v6;
}
        }

        goto LABEL_53;
      case 8LL:
        uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Custom Test 8 - filling utun os_channel...",  (uint8_t *)&buf,  2u);
        }

        uint64_t v31 = sub_1003BBA5C(*(void *)(a1 + 32) + 8LL, kIDSDefaultPairedDeviceID);
        id v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
        id v33 = 0;
        uint64_t v75 = 0;
        __int16 v73 = 0u;
        uint64_t v74 = 0u;
        __int16 v71 = 0u;
        uint64_t v72 = 0u;
        buf = 0u;
        uint64_t v70 = 0u;
        do
        {
          uint64_t v34 = *(void **)(a1 + 32);
          uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v32 remoteSA]);
          uint64_t v36 = [v35 sa];
          int v37 = (void *)objc_claimAutoreleasedReturnValue([v32 localSA]);
          LODWORD(v34) = objc_msgSend( v34,  "handleUtunChannelWrite:source:destination:upperProtocol:bytes:bytesLen:",  v32,  v36,  objc_msgSend(v37, "sa"),  6,  &buf,  100);

          ++v33;
        }

        while ((_DWORD)v34);
        uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int16 v67 = 67109120;
          unint64_t v68 = v33;
          _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "Custom Test 8 - filled utun os_channel after %d dummy writes",  v67,  8u);
        }

        goto LABEL_42;
      case 9LL:
LABEL_42:
        uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "Custom Test 9 - Inject Corrupted BT packet.",  (uint8_t *)&buf,  2u);
        }

        uint64_t v40 = *(void *)(a1 + 32);
        uint64_t v41 = v40 + 8;
        uint64_t v42 = kIDSDefaultPairedDeviceID;
        v43 = *(id *)(v40 + 96);
        id v44 = sub_1003BBA5C(v41, v42);
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v44);
        uint64_t v45 = (void *)_IDSLinkPacketBufferCreate( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSUTunController.m",  1379LL);
        BOOL v46 = (_WORD *)*v45;
        id v47 = (void *)objc_claimAutoreleasedReturnValue( [&stru_100912B50 stringByPaddingToLength:1000 withString:@"a" startingAtIndex:0]);
        unint64_t v48 = objc_claimAutoreleasedReturnValue([v47 dataUsingEncoding:4]);
        memcpy(v46, [v48 bytes], (size_t)objc_msgSend(v48, "length"));
        v45[2] = [v48 length];
        v45[3] = [v48 length];
        *BOOL v46 = -1;
        [v43 injectFakePacketInBTLink:v45 cbuuid:v6[1]];

        free(v45);
        goto LABEL_53;
      case 10LL:
        unint64_t v49 = IMGetCachedDomainBoolForKeyWithDefaultValue( @"com.apple.ids",  @"ControlChannelAvoidMainQueue",  0LL);
        uint64_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v51 = @"NO";
          if (v49) {
            uint64_t v51 = @"YES";
          }
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = v51;
          _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "Custom Test 10 - Control Message + main queue deadlock test (avoidMainQueue: %@",  (uint8_t *)&buf,  0xCu);
        }

        unint64_t v52 = *(void *)(a1 + 32) + 8LL;
        v63[0] = _NSConcreteStackBlock;
        v63[1] = 3221225472LL;
        v63[2] = sub_100325460;
        v63[3] = &unk_100901558;
        uint64_t v64 = v49;
        __int16 v65 = 0;
        uint64_t v53 = v63;
        goto LABEL_57;
      case 11LL:
        uint64_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "Custom Test 11 - simulate starting control channel again",  (uint8_t *)&buf,  2u);
        }

        v55 = sub_1003BBA5C(*(void *)(a1 + 32) + 8LL, kIDSDefaultPairedDeviceID);
        uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
        v61[0] = _NSConcreteStackBlock;
        v61[1] = 3221225472LL;
        v61[2] = sub_100325984;
        v61[3] = &unk_1008F8800;
        v61[4] = *(void *)(a1 + 32);
        unint64_t v62 = v56;
        uint64_t v6 = v56;
        IDSTransportThreadAddBlock(v61, v57);

        goto LABEL_53;
      case 12LL:
        unint64_t v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEFAULT,  "Custom Test 12 - Kill all links",  (uint8_t *)&buf,  2u);
        }

        uint64_t v59 = *(void *)(a1 + 32);
        unint64_t v52 = v59 + 8;
        v60[0] = _NSConcreteStackBlock;
        v60[1] = 3221225472LL;
        v60[2] = sub_100325994;
        v60[3] = &unk_100901580;
        v60[4] = v59;
        uint64_t v53 = v60;
LABEL_57:
        sub_1003BBD80(v52, (uint64_t)v53);
        break;
      default:
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 134217984;
          *(void *)((char *)&buf + 4) = v3;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v6,  OS_LOG_TYPE_DEFAULT,  "Custom Test - unsupported %ld",  (uint8_t *)&buf,  0xCu);
        }

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration _user](self, "_user"));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration _userStore](self, "_userStore"));
    int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 authenticationCertificateForUser:v6]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 dataRepresentation]);

LABEL_14:
    goto LABEL_15;
  }

          __int128 v23 = __clz(__rbit64(v21));
          v21 &= v21 - 1;
        }
      }

      uint64_t v27 = v25 + 3;
      if (v27 < v39)
      {
        uint64_t v26 = *(void *)(v38 + 8 * v27);
        if (v26)
        {
          id v17 = v27;
          goto LABEL_20;
        }

        while (1)
        {
          id v17 = v27 + 1;
          if (__OFADD__(v27, 1LL)) {
            goto LABEL_26;
          }
          if (v17 >= v39) {
            break;
          }
          uint64_t v26 = *(void *)(v38 + 8 * v17);
          ++v27;
          if (v26) {
            goto LABEL_20;
          }
        }
      }
    }

    id v13 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
  }

  swift_release(a3);
  swift_release(v18);
  return swift_release(v23);
}

        unint64_t v62 = __clz(__rbit64(v59));
        v59 &= v59 - 1;
      }
    }
  }

BOOL sub_100040454(id a1, OS_nw_frame *a2)
{
  return 1;
}

LABEL_38:
    }

    uint64_t result = 0;
    self->_osChannelNeedSync = 0;
  }

  return result;
}

        uint64_t v6 = v44 + 1;
        id v5 = &IMInsertBoolsToXPCDictionary_ptr;
      }

      while ((id)(v44 + 1) != v42);
      uint64_t v42 = [obj countByEnumeratingWithState:&v55 objects:v66 count:16];
    }

    while (v42);
  }
}

  [*(id *)(*(void *)(a1 + 32) + 104) invalidate];
  uint64_t v26 = *(void **)(*(void *)(a1 + 32) + 104LL);
  *(void *)(*(void *)(a1 + 32) + 104LL) = 0LL;

  if ((v33 & 1) != 0) {
    [*(id *)(a1 + 32) _resetFallbackTimeout:1 useNextFallback:v25];
  }
  objc_autoreleasePoolPop(context);
}

    return;
  }

  if (!v10)
  {
    __int16 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v14[0]) = 0;
      __int16 v12 = "     ==> We're idle, ending this heartbeat madness now";
LABEL_37:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)v14, 2u);
      goto LABEL_38;
    }

    goto LABEL_38;
  }

  if (!-[IDSPhoneNumberValidationStateMachine _deviceCanRegisterPresently](self, "_deviceCanRegisterPresently"))
  {
    __int16 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v14[0]) = 0;
      __int16 v12 = "     ==> Device can't register now, waiting...";
      goto LABEL_37;
    }

    goto LABEL_38;
  }

  if (!-[IDSPhoneNumberValidationStateMachine _validSIMStateForRegistration](self, "_validSIMStateForRegistration"))
  {
    __int16 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v14[0]) = 0;
      __int16 v12 = "     ==> SIM is not ready to register, waiting...";
      goto LABEL_37;
    }

    goto LABEL_38;
  }

  if (!-[IDSPhoneNumberValidationStateMachine _isPhoneNumberIdentificationSupported]( self,  "_isPhoneNumberIdentificationSupported"))
  {
    __int16 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v14[0]) = 0;
      __int16 v12 = "     ==> Registration is not supported, skipping heartbeat";
      goto LABEL_37;
    }

    goto LABEL_38;
  }

  if (self->_status == 1)
  {
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v14[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "     ==> Waiting to begin SMS, starting now",  (uint8_t *)v14,  2u);
    }

    -[IDSPhoneNumberValidationStateMachine _tryToSendSMSIdentification](self, "_tryToSendSMSIdentification");
  }
}

      id v5 = v45;
    }

    *(void *)&v8[8 * v33] = v35 | v34;
    *(void *)(v4[6] + 8 * v32) = v29;
    uint64_t v41 = v4[2];
    __int16 v11 = __OFADD__(v41, 1LL);
    uint64_t v42 = v41 + 1;
    if (v11) {
      goto LABEL_45;
    }
    v4[2] = v42;
LABEL_31:
    if (++v27 == v5) {
      return;
    }
  }

      id v5 = v45;
    }

    *(void *)&v8[8 * v33] = v35 | v34;
    *(void *)(v4[6] + 8 * v32) = v29;
    uint64_t v41 = v4[2];
    __int16 v11 = __OFADD__(v41, 1LL);
    uint64_t v42 = v41 + 1;
    if (v11) {
      goto LABEL_45;
    }
    v4[2] = v42;
LABEL_31:
    if (++v27 == v5) {
      return;
    }
  }

        id v17 = (v27 - 1) & v27;
        double v18 = __clz(__rbit64(v27)) + (v19 << 6);
      }

      __int128 v24 = *(id *)(*(void *)(a1 + 48) + 8 * v18);
      if (!v24) {
        goto LABEL_42;
      }
      while (1)
      {
        uint64_t v29 = (void *)sub_100435750(v24);

        __int16 v11 = v19;
        __int16 v12 = v17;
        if ((a1 & 0x8000000000000000LL) == 0) {
          break;
        }
LABEL_20:
        double v20 = __CocoaSet.Iterator.next()(v9);
        if (v20)
        {
          id v21 = v20;
          uint64_t v31 = v20;
          __int128 v22 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
          swift_unknownObjectRetain(v21, v23);
          swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v22, 7LL);
          __int128 v24 = v32;
          swift_unknownObjectRelease(v21, v25);
          unint64_t v19 = v11;
          id v17 = v12;
          if (v24) {
            continue;
          }
        }

        goto LABEL_42;
      }
    }
  }

  if (v3 < 0) {
    id v4 = *v1;
  }
  else {
    id v4 = v3 & 0xFFFFFFFFFFFFFF8LL;
  }
  if (__CocoaSet.count.getter(v4)) {
    goto LABEL_8;
  }
}

        id v16 = (v53 - 1) & v53;
        uint64_t v51 = __clz(__rbit64(v53)) + (a4 << 6);
      }

      v55 = 8 * v51;
      uint64_t v56 = *(void **)(*(void *)(v46 + 48) + v55);
      unint64_t v57 = *(void *)(*(void *)(v46 + 56) + v55);
      unint64_t v58 = v135;
      uint64_t v59 = v56;
      swift_bridgeObjectRetain(v57);
      __int16 v61 = sub_10047951C(v60, v58);

      swift_bridgeObjectRelease(v57);
      unint64_t v62 = v59;
      __int16 v63 = *(void **)(v12 + 16);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v63);
      aBlock = (unint64_t)v63;
      *(void *)(v12 + 16) = 0x8000000000000000LL;
      uint64_t v66 = sub_100433024((uint64_t)v62);
      __int16 v67 = v63[2];
      unint64_t v68 = (v65 & 1) == 0;
      __int16 v69 = v67 + v68;
      if (__OFADD__(v67, v68))
      {
        __break(1u);
LABEL_66:
        __break(1u);
        goto LABEL_67;
      }

      __int16 v12 = v65;
      if (v63[3] >= v69)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          uint64_t v72 = 8 * v66;
          if ((v65 & 1) != 0) {
            goto LABEL_24;
          }
        }

        else
        {
          sub_10046E6C8();
          __int16 v63 = (void *)aBlock;
          uint64_t v72 = 8 * v66;
          if ((v12 & 1) != 0) {
            goto LABEL_24;
          }
        }
      }

      else
      {
        sub_10046DC5C(v69, isUniquelyReferenced_nonNull_native);
        __int16 v63 = (void *)aBlock;
        uint64_t v70 = sub_100433024((uint64_t)v62);
        if ((v12 & 1) != (v71 & 1)) {
          goto LABEL_86;
        }
        uint64_t v66 = v70;
        uint64_t v72 = 8 * v70;
        if ((v12 & 1) != 0)
        {
LABEL_24:
          unint64_t v49 = v63[7];
          swift_bridgeObjectRelease(*(void *)(v49 + v72));
          *(void *)(v49 + v72) = v61;
          goto LABEL_25;
        }
      }

      v63[(v66 >> 6) + 8] |= 1LL << v66;
      *(void *)(v63[6] + v72) = v62;
      *(void *)(v63[7] + v72) = v61;
      __int16 v73 = v63[2];
      unint64_t v52 = __OFADD__(v73, 1LL);
      uint64_t v74 = v73 + 1;
      if (v52) {
        goto LABEL_66;
      }
      v63[2] = v74;
      uint64_t v75 = v62;
LABEL_25:
      __int16 v12 = v136;
      *(void *)(v136 + 16) = v63;
      swift_bridgeObjectRelease(0x8000000000000000LL);
    }
  }

        id v17 = (v27 - 1) & v27;
        double v18 = __clz(__rbit64(v27)) + (v19 << 6);
      }

      __int128 v24 = *(id *)(*(void *)(a1 + 48) + 8 * v18);
      if (!v24) {
        goto LABEL_42;
      }
      while (1)
      {
        uint64_t v29 = (void *)sub_1004893E8(v24);

        __int16 v11 = v19;
        __int16 v12 = v17;
        if ((a1 & 0x8000000000000000LL) == 0) {
          break;
        }
LABEL_20:
        double v20 = __CocoaSet.Iterator.next()(v9);
        if (v20)
        {
          id v21 = v20;
          uint64_t v31 = v20;
          __int128 v22 = type metadata accessor for IDSGroupEncryptionControllerMember();
          swift_unknownObjectRetain(v21, v23);
          swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v22, 7LL);
          __int128 v24 = v32;
          swift_unknownObjectRelease(v21, v25);
          unint64_t v19 = v11;
          id v17 = v12;
          if (v24) {
            continue;
          }
        }

        goto LABEL_42;
      }
    }
  }

  if (v3 < 0) {
    id v4 = *v1;
  }
  else {
    id v4 = v3 & 0xFFFFFFFFFFFFFF8LL;
  }
  if (__CocoaSet.count.getter(v4)) {
    goto LABEL_8;
  }
}

        id v17 = (v27 - 1) & v27;
        double v18 = __clz(__rbit64(v27)) + (v19 << 6);
      }

      __int128 v24 = *(id *)(*(void *)(a1 + 48) + 8 * v18);
      if (!v24) {
        goto LABEL_42;
      }
      while (1)
      {
        uint64_t v29 = (void *)sub_100494B20(v24);

        __int16 v11 = v19;
        __int16 v12 = v17;
        if ((a1 & 0x8000000000000000LL) == 0) {
          break;
        }
LABEL_20:
        double v20 = __CocoaSet.Iterator.next()(v9);
        if (v20)
        {
          id v21 = v20;
          uint64_t v31 = v20;
          __int128 v22 = sub_10041D3C4(0LL, (unint64_t *)&qword_1009BBE30, &OBJC_CLASS___IDSPushToken_ptr);
          swift_unknownObjectRetain(v21, v23);
          swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v22, 7LL);
          __int128 v24 = v32;
          swift_unknownObjectRelease(v21, v25);
          unint64_t v19 = v11;
          id v17 = v12;
          if (v24) {
            continue;
          }
        }

        goto LABEL_42;
      }
    }
  }

  if (v3 < 0) {
    id v4 = *v1;
  }
  else {
    id v4 = v3 & 0xFFFFFFFFFFFFFF8LL;
  }
  if (__CocoaSet.count.getter(v4)) {
    goto LABEL_8;
  }
}

    uint64_t v40 = (v56 - 1) & v56;
    uint64_t v41 = __clz(__rbit64(v56)) + (v42 << 6);
LABEL_39:
    unint64_t v58 = 8 * v41;
    uint64_t v59 = *(void **)(*(void *)(v30 + 56) + v58);
    unint64_t v49 = *(id *)(*(void *)(v30 + 48) + v58);
    uint64_t v53 = v59;
    a2 = v155;
    if (!v49) {
      goto LABEL_42;
    }
    while (1)
    {

      v160 = (void *)a2;
      v161 = a3;
      swift_bridgeObjectRetain(a3);
      v60._countAndFlagsBits = 0x2020202020202020LL;
      v60._object = (void *)0xE800000000000000LL;
      String.append(_:)(v60);
      __int16 v61 = v161;
      (*(void (**)(uint64_t, void *, unint64_t))((swift_isaMask & *v53) + 0x98LL))(v156, v160, v161);

      swift_bridgeObjectRelease(v61);
      uint64_t v39 = v42;
      uint64_t v35 = v40;
      if ((v30 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_22:
      v43 = __CocoaDictionary.Iterator.next()(v31);
      if (v43)
      {
        uint64_t v45 = v43;
        BOOL v46 = v44;
        v158 = (void *)v43;
        id v47 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
        swift_unknownObjectRetain(v45, v48);
        swift_dynamicCast(&v160, &v158, v151, v47, 7LL);
        unint64_t v49 = v160;
        swift_unknownObjectRelease(v45, v50);
        v158 = (void *)v46;
        uint64_t v51 = type metadata accessor for IDSGroupEncryptionControllerMember();
        swift_unknownObjectRetain(v46, v52);
        swift_dynamicCast(&v160, &v158, v151, v51, 7LL);
        uint64_t v53 = v160;
        swift_unknownObjectRelease(v46, v54);
        uint64_t v42 = v39;
        uint64_t v40 = v35;
        if (v49) {
          continue;
        }
      }

      goto LABEL_42;
    }
  }

  unint64_t v57 = v39 + 5;
  while (v152 != v57)
  {
    uint64_t v56 = *(void *)(v153 + 8 * v57++);
    if (v56)
    {
      uint64_t v42 = v57 - 1;
      goto LABEL_38;
    }
  }

  __break(1u);
}

LABEL_14:
}

    goto LABEL_15;
  }

  uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSDictionary, v7);
  if ((objc_opt_isKindOfClass(v13, v9) & 1) != 0)
  {
    Value = (const __CFDictionary *)v13;
    if (Value) {
      Value = (const __CFDictionary *)CFDictionaryGetValue(Value, @"originalMessage");
    }
    __int16 v11 = Value;
    if (-[__CFDictionary command](v11, "command") == 24)
    {
      __int16 v12 = v11;
      if (-[__CFDictionary shouldEncrypt](v12, "shouldEncrypt")
        && *(_DWORD *)(a1 + 40) == -[__CFDictionary protectionClass](v12, "protectionClass"))
      {
        [*(id *)(a1 + 32) addIndex:a3];
      }
    }

    goto LABEL_14;
  }

  return v4;
}

  return (char)v7;
}
}

    uint64_t v83 = 0;
    goto LABEL_62;
  }

  -[IDSDaemon _cleanupListenerWithPid:](self, "_cleanupListenerWithPid:", v11);
  double v18 = -[IMLocalObject initWithTarget:connection:protocol:forceSecureCoding:offMainThread:]( objc_alloc(&OBJC_CLASS___IMLocalObject),  "initWithTarget:connection:protocol:forceSecureCoding:offMainThread:",  self,  v14,  &OBJC_PROTOCOL___IDSDaemonProtocol,  1LL,  _os_feature_enabled_impl("IDS", "UseNewThreadArch_v1"));
  uint64_t v83 = v18 != 0LL;
  if (v18)
  {
    uint64_t v80 = -[IMRemoteObject initWithConnection:protocol:alreadyConfigured:forceSecureCoding:]( objc_alloc(&OBJC_CLASS___IMRemoteObject),  "initWithConnection:protocol:alreadyConfigured:forceSecureCoding:",  v14,  &OBJC_PROTOCOL___IDSDaemonListenerProtocol,  1LL,  1LL);
    -[IMRemoteObject setPid:](v80, "setPid:", v11);
    pthread_mutex_lock(&self->_listenerLock);
    uint64_t v76 = -[NSMutableSet count](self->_listenerCachedServices, "count");
    unint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKey:@"capabilities"]);
    if (v19)
    {
      double v20 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKey:@"capabilities"]);
      id v21 = [v20 unsignedIntValue];
    }

    else
    {
      id v21 = 0LL;
    }

    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKey:@"services"]);
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v28));
    uint64_t v30 = v29;
    if (v29) {
      uint64_t v79 = v29;
    }
    else {
      uint64_t v79 = (id)objc_claimAutoreleasedReturnValue(+[NSSet set](&OBJC_CLASS___NSSet, "set"));
    }

    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKey:@"commands"]);
    id v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v31));
    id v33 = v32;
    if (v32) {
      uint64_t v78 = v32;
    }
    else {
      uint64_t v78 = (id)objc_claimAutoreleasedReturnValue(+[NSSet set](&OBJC_CLASS___NSSet, "set"));
    }

    uint64_t v34 = objc_alloc(&OBJC_CLASS___NSMutableSet);
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKey:@"notificationServices"]);
    uint64_t v36 = -[NSMutableSet initWithArray:](v34, "initWithArray:", v35);
    int v37 = v36;
    if (v36) {
      uint64_t v81 = v36;
    }
    else {
      uint64_t v81 = (NSMutableSet *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
    }

    uint64_t v38 = objc_claimAutoreleasedReturnValue([v16 objectForKey:@"bundleID"]);
    uint64_t v39 = (void *)v38;
    uint64_t v40 = &stru_100912B50;
    if (v38) {
      uint64_t v40 = (__CFString *)v38;
    }
    uint64_t v41 = v40;

    uint64_t v77 = -[__CFString length](v41, "length") != 0LL;
    uint64_t v82 = -[IDSIPCListener initWithRemoteObject:localObject:ID:capabilities:entitlements:services:notificationServices:commands:bundleID:]( objc_alloc(&OBJC_CLASS___IDSIPCListener),  "initWithRemoteObject:localObject:ID:capabilities:entitlements:services:notificationServices:commands:bundleID:",  v80,  v18,  v15,  v21,  v86,  v79,  v81,  v78,  v41);
    -[NSMutableArray addObject:](self->_listeners, "addObject:");
    if (!self->_listenerCachedServices)
    {
      uint64_t v42 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
      listenerCachedServices = self->_listenerCachedServices;
      self->_listenerCachedServices = v42;
    }

    if (!self->_listenerCachedCommands)
    {
      id v44 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
      listenerCachedCommands = self->_listenerCachedCommands;
      self->_listenerCachedCommands = v44;
    }

    BOOL v46 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKey:@"processName"]);
    -[IMLocalObject setProcessName:](v18, "setProcessName:", v46);
    -[IMRemoteObject setProcessName:](v80, "setProcessName:", v46);
    id v47 = OSLogHandleForTransportCategory("IDSDaemon");
    unint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v49 = (id)objc_claimAutoreleasedReturnValue(-[IMLocalObject processName](v18, "processName"));
      uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue(-[IMLocalObject connection](v18, "connection"));
      *(_DWORD *)buf = 138414082;
      uint64_t v89 = v15;
      uint64_t v90 = 2112;
      uint64_t v91 = v41;
      uint64_t v92 = 2112;
      uint64_t v93 = v16;
      uint64_t v94 = 2112;
      uint64_t v95 = v86;
      uint64_t v96 = 1024;
      uint64_t v97 = v11;
      uint64_t v98 = 2112;
      uint64_t v99 = v49;
      uint64_t v100 = 2048;
      uint64_t v101 = v50;
      uint64_t v102 = 2112;
      uint64_t v103 = v81;
      _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "Setting up connection to listener ID: %@  bundle ID: %@  setupInfo %@ entitlements %@  pid: %d  name: %@  connec tion: %p notificationServices %@",  buf,  0x4Eu);
    }

    unint64_t v52 = os_log_shim_legacy_logging_enabled(v51);
    if ((_DWORD)v52)
    {
      if (_IDSShouldLogTransport(v52))
      {
        uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue(-[IMLocalObject processName](v18, "processName"));
        uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue(-[IMLocalObject connection](v18, "connection"));
        uint64_t v75 = v81;
        uint64_t v72 = v11;
        __int16 v73 = v53;
        uint64_t v70 = v16;
        __int16 v71 = v86;
        unint64_t v68 = v15;
        __int16 v69 = v41;
        _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Setting up connection to listener ID: %@  bundle ID: %@  setupInfo %@ entitlements %@  pid: %d  name: %@  connection: %p notificationServices %@");

        if (_IDSShouldLog(0LL, @"IDSDaemon"))
        {
          uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue(-[IMLocalObject processName](v18, "processName", v15, v41, v16, v86, v11, v53, v74, v81));
          uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue(-[IMLocalObject connection](v18, "connection"));
          uint64_t v75 = v81;
          uint64_t v72 = v11;
          __int16 v73 = v54;
          uint64_t v70 = v16;
          __int16 v71 = v86;
          unint64_t v68 = v15;
          __int16 v69 = v41;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Setting up connection to listener ID: %@  bundle ID: %@  setupInfo %@ entitlements %@  pid: %d  name: %@  connection: %p notificationServices %@");
        }
      }
    }

    if (objc_msgSend( v15,  "isEqualToIgnoringCase:",  @"com.apple.healthd",  v68,  v69,  v70,  v71,  v72,  v73,  v74,  v75))
    {
      v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog healthDebug](&OBJC_CLASS___IMRGLog, "healthDebug"));
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v56 = (id)objc_claimAutoreleasedReturnValue(-[IMLocalObject processName](v18, "processName"));
        unint64_t v57 = (void *)objc_claimAutoreleasedReturnValue(-[IMLocalObject connection](v18, "connection"));
        *(_DWORD *)buf = 138414082;
        uint64_t v89 = v15;
        uint64_t v90 = 2112;
        uint64_t v91 = v41;
        uint64_t v92 = 2112;
        uint64_t v93 = v16;
        uint64_t v94 = 2112;
        uint64_t v95 = v86;
        uint64_t v96 = 1024;
        uint64_t v97 = v11;
        uint64_t v98 = 2112;
        uint64_t v99 = v56;
        uint64_t v100 = 2048;
        uint64_t v101 = v57;
        uint64_t v102 = 2112;
        uint64_t v103 = v81;
        _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "Setting up connection to listener ID: %@  bundle ID: %@  setupInfo %@ entitlements %@  pid: %d  name: %@  conn ection: %p notificationServices %@",  buf,  0x4Eu);
      }
    }

    unint64_t v58 = -[NSMutableArray indexOfObjectIdenticalTo:](self->_listeners, "indexOfObjectIdenticalTo:", v82) != (id)0x7FFFFFFFFFFFFFFFLL;

    uint64_t v59 = -[NSMutableSet count](self->_listenerCachedServices, "count");
    if (v59 && v76 != v59)
    {
      -[IDSDaemon updateTopics](self, "updateTopics");
      -[IDSDaemon _updatePushCommandsLocked](self, "_updatePushCommandsLocked");
    }

    unint64_t v60 = -[NSMutableSet copy](v81, "copy");
    if (v58)
    {
      __int16 v61 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKey:@"context"]);
      unint64_t v62 = -[IDSDaemon _newSetupInfoWithContext:](self, "_newSetupInfoWithContext:", v61);

      if (_IDSSupportsDirectMessaging())
      {
        __int16 v63 = -[IDSDaemon _copyDirectMessagingMetadataForRemoteObject:]( self,  "_copyDirectMessagingMetadataForRemoteObject:",  v82);
        if (v63)
        {
          uint64_t v64 = -[NSMutableDictionary initWithDictionary:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithDictionary:",  v62);
          -[NSMutableDictionary addEntriesFromDictionary:](v64, "addEntriesFromDictionary:", v63);
        }

        else
        {
          uint64_t v64 = v62;
        }
      }

      else
      {
        uint64_t v64 = v62;
      }

      v85[2](v85, v64, v18);
    }

    if (v77) {
      -[IDSDaemon refreshBundleIDs](self, "refreshBundleIDs");
    }
    __int16 v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v65 addObserver:self selector:"localObjectDiedNotification:" name:IMLocalObjectDidDisconnectNotification object:v18];

    uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v66 addObserver:self selector:"remoteObjectDiedNotification:" name:IMRemoteObjectDidDisconnectNotification object:v80];

    pthread_mutex_unlock(&self->_listenerLock);
    -[IDSDaemon _resetBroadcastQueuesForServices:](self, "_resetBroadcastQueuesForServices:", v60);
    -[IDSDaemon _flushBroadcastQueuesForServices:existingServices:]( self,  "_flushBroadcastQueuesForServices:existingServices:",  v60,  v60);
  }

LABEL_62:
  objc_autoreleasePoolPop(context);

  return v83;
}
}

    __int16 v10 = 0;
  }
          }

          id v21 = (char *)v21 + 1;
        }

        while (v19 != v21);
        uint64_t v30 = [v17 countByEnumeratingWithState:&v35 objects:v41 count:16];
        unint64_t v19 = v30;
      }

      while (v30);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    if (v15)
    {
      uint64_t v31 = *(const __CFString **)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v43 = v31;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Failed to query for handles {%@}", buf, 0xCu);
    }

    id v32 = IDSFirewallErrorDomain;
    uint64_t v39 = NSLocalizedDescriptionKey;
    uint64_t v40 = @"Failed to query for merge id due to unsuccessful request";
    id v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v40,  &v39,  1LL));
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v32,  6LL,  v33));

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

  unint64_t v19 = objc_alloc(&OBJC_CLASS___IDSGroupMasterKeyMaterialCollection);
  double v20 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v7, "allObjects"));
  id v21 = (void *)objc_claimAutoreleasedReturnValue(-[IDSGroupMasterKeyMaterialCache membershipURIs](self, "membershipURIs"));
  __int128 v22 = -[IDSGroupMasterKeyMaterialCollection initWithMasterKeyMaterials:membershipURIs:]( v19,  "initWithMasterKeyMaterials:membershipURIs:",  v20,  v21);

  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472LL;
  v26[2] = sub_100132458;
  v26[3] = &unk_1008F8F20;
  uint64_t v30 = v4;
  uint64_t v27 = v6;
  uint64_t v28 = (id)objc_claimAutoreleasedReturnValue(-[IDSGroupMasterKeyMaterialCollection description](v22, "description"));
  uint64_t v29 = self;
  __int128 v23 = v28;
  __int128 v24 = v6;
  cut_dispatch_log_queue(v26);

  return v22;
}

    goto LABEL_15;
  }

  __int16 v11 = (void *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
  if (os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_ERROR)) {
    sub_10069F558();
  }
LABEL_15:
}

  return v10;
}

    goto LABEL_15;
  }

  if (-[IDSDAccount isAdHocAccount](self, "isAdHocAccount"))
  {
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount primaryAccount](self, "primaryAccount"));
      *(_DWORD *)buf = 138412290;
      unint64_t v19 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, " => Forwarding to Primary: %@", buf, 0xCu);
    }

    __int16 v10 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount primaryAccount](self, "primaryAccount"));
    [v10 _reregisterAndReidentify:v3];
  }

  else
  {
    __int16 v11 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount systemMonitor](self, "systemMonitor"));
    __int16 v12 = [v11 isUnderFirstDataProtectionLock];

    if (v12)
    {
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Device is still under first data protection lock, deferring request",  buf,  2u);
      }

      if (v3)
      {
        double v14 = 80LL;
        __int16 v15 = *((_BYTE *)self + 80) | 0x80;
      }

      else
      {
        double v14 = 81LL;
        __int16 v15 = *((_BYTE *)self + 81) | 1;
      }

      *((_BYTE *)&self->super.isa + v14) = v15;
    }

    else
    {
      if (v3) {
        -[IDSDAccount _removeAuthenticationCredentials](self, "_removeAuthenticationCredentials");
      }
      -[IDSDAccount _registerAccount](self, "_registerAccount");
    }
  }

      *((_BYTE *)self + 80) |= 0x20u;
      return;
    }

    if ((*((_BYTE *)self + 80) & 8) != 0)
    {
      double v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog GDR](&OBJC_CLASS___IMRGLog, "GDR"));
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        id v17 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount uniqueID](self, "uniqueID"));
        *(_DWORD *)buf = 138412290;
        double v20 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Not issuing dependancy check, we're in progress now for: %@",  buf,  0xCu);
      }
    }

    else
    {
      *((_BYTE *)self + 80) |= 8u;
      __int16 v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog GDR](&OBJC_CLASS___IMRGLog, "GDR"));
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v11 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount uniqueID](self, "uniqueID"));
        __int16 v12 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount service](self, "service"));
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 queryService]);
        *(_DWORD *)buf = 138412546;
        double v20 = v11;
        id v21 = 2112;
        __int128 v22 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Issued dependent registration check for account: %@   service: %@",  buf,  0x16u);
      }

      double v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[IDSDAccount registrationCenter](self, "registrationCenter"));
      __int16 v15 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s gdrCenter](v14, "gdrCenter"));
      registrationInfo = self->_registrationInfo;
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472LL;
      v18[2] = sub_1001E9370;
      v18[3] = &unk_1008FDAE8;
      v18[4] = self;
      [v15 getDependentRegistrations:registrationInfo completionBlock:v18];
    }
  }

      ++v4;
      id v5 = v14;
      if (v6 == v4) {
        goto LABEL_17;
      }
    }

    __int16 v15 = 10;
LABEL_13:
    byte_1009BEE78[v14] = v15;
    LODWORD(v14) = v5 + 3;
    goto LABEL_14;
  }

  LODWORD(v14) = 0;
LABEL_17:
  byte_1009BEE78[(int)v14] = 0;
  return result;
}

  self->_totalPacketsDropped += (int)v7;
  if ((int)v7 >= 1)
  {
    __int128 v23 = v7;
    do
    {
      __int128 v24 = (uint64_t)*a3++;
      _IDSLinkPacketBufferRelease( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSLinkManager.m",  2237LL,  v24);
      --v23;
    }

    while (v23);
  }

  __int128 v25 = 0LL;
LABEL_18:

  return v13;
}

  return v12;
}

    __int16 v10 = 0;
  }

        double v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v22[0]) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Unregistered KT Data does not yet have necessary fields to register.",  (uint8_t *)v22,  2u);
        }

        LOBYTE(v9) = 0;
        goto LABEL_17;
      }
    }

    goto LABEL_14;
  }
}
}

  return v10;
}

      __int16 v15 = v27;
      id v13 = v28;
    }

    __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKey:IDSDevicePropertyPrivateDeviceData]);
    __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKey:v7]);

    __int128 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v26 = @"YES";
      *(_DWORD *)buf = 138413314;
      uint64_t v34 = v8;
      if (!v17) {
        uint64_t v26 = @"NO";
      }
      uint64_t v35 = 2112;
      uint64_t v36 = v10;
      int v37 = 2112;
      uint64_t v38 = v26;
      uint64_t v39 = 2112;
      uint64_t v40 = v7;
      uint64_t v41 = 2112;
      uint64_t v42 = v11;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "Returning dependent registration property for key { serviceIdentifier: %@, pushToken: %@, foundCandidate: %@, ke y: %@, value: %@ }",  buf,  0x34u);
    }
  }

  return v11;
}

  id v16 = (void *)objc_claimAutoreleasedReturnValue([v3 pushToken]);
  if (!v16 || !v13)
  {

    goto LABEL_19;
  }

  if (!v14)
  {
LABEL_19:
    unint64_t v19 = 0LL;
    goto LABEL_20;
  }

  id v17 = objc_alloc(&OBJC_CLASS___IDSKeyTransparencyEntry);
  double v18 = (void *)objc_claimAutoreleasedReturnValue([v3 pushToken]);
  unint64_t v19 = -[IDSKeyTransparencyEntry initWithPushToken:loggableData:signedData:]( v17,  "initWithPushToken:loggableData:signedData:",  v18,  v13,  v14);

  -[IDSKeyTransparencyEntry setKtCapable:](v19, "setKtCapable:", 1LL);
  double v20 = (void *)objc_claimAutoreleasedReturnValue([v3 productName]);
  -[IDSKeyTransparencyEntry setProductName:](v19, "setProductName:", v20);

  id v21 = (void *)objc_claimAutoreleasedReturnValue([v3 buildVersion]);
  -[IDSKeyTransparencyEntry setBuildVersion:](v19, "setBuildVersion:", v21);

  -[IDSKeyTransparencyEntry setTransparencyVersion:]( v19,  "setTransparencyVersion:",  [v3 transparencyVersion]);
LABEL_20:

  return v19;
}

  v165 = a3[5];
  v166 = &a1[v165];
  v167 = &a2[v165];
  v168 = *(_OWORD *)v167;
  v166[16] = v167[16];
  *(_OWORD *)v166 = v168;
  a1[a3[6]] = a2[a3[6]];
  v169 = a3[7];
  *(void *)(swift_unknownObjectWeakCopyAssign(&a1[v169], &a2[v169]) + _Block_object_dispose((const void *)(v1 - 96), 8) = *(void *)&a2[v169 + 8];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  v170 = a3[9];
  v171 = *(void *)&a2[v170];
  v172 = *(void *)&a1[v170];
  *(void *)&a1[v170] = v171;
  swift_bridgeObjectRetain(v171);
  swift_bridgeObjectRelease(v172);
  v173 = a3[10];
  v174 = *(void *)&a2[v173];
  v175 = *(void *)&a1[v173];
  *(void *)&a1[v173] = v174;
  swift_bridgeObjectRetain(v174);
  swift_bridgeObjectRelease(v175);
  v176 = a3[11];
  v177 = *(void *)&a1[v176];
  v178 = *(void *)&a2[v176];
  *(void *)&a1[v176] = v178;
  swift_retain(v178);
  swift_release(v177);
  a1[a3[12]] = a2[a3[12]];
  v179 = a3[13];
  v180 = *(void *)&a2[v179];
  v181 = *(void *)&a1[v179];
  *(void *)&a1[v179] = v180;
  swift_bridgeObjectRetain(v180);
  swift_bridgeObjectRelease(v181);
  v182 = a3[14];
  v183 = &a1[v182];
  v184 = &a2[v182];
  v185 = type metadata accessor for Date(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v185 - 8) + 24LL))(v183, v184, v185);
  *(void *)&a1[a3[15]] = *(void *)&a2[a3[15]];
  return a1;
}

  uint64_t v80 = a3[5];
  uint64_t v81 = a3[6];
  uint64_t v82 = &a1[v80];
  uint64_t v83 = &a2[v80];
  *(_OWORD *)uint64_t v82 = *(_OWORD *)v83;
  uint64_t v84 = a2[v81];
  v82[16] = v83[16];
  a1[v81] = v84;
  uint64_t v85 = a3[7];
  *(void *)(swift_unknownObjectWeakTakeAssign(&a1[v85], &a2[v85]) + _Block_object_dispose((const void *)(v1 - 96), 8) = *(void *)&a2[v85 + 8];
  uint64_t v86 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  uint64_t v87 = *(void *)&a1[v86];
  *(void *)&a1[v86] = *(void *)&a2[v86];
  swift_bridgeObjectRelease(v87);
  uint64_t v88 = a3[10];
  uint64_t v89 = *(void *)&a1[v88];
  *(void *)&a1[v88] = *(void *)&a2[v88];
  swift_bridgeObjectRelease(v89);
  uint64_t v90 = a3[11];
  uint64_t v91 = *(void *)&a1[v90];
  *(void *)&a1[v90] = *(void *)&a2[v90];
  swift_release(v91);
  uint64_t v92 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  uint64_t v93 = *(void *)&a1[v92];
  *(void *)&a1[v92] = *(void *)&a2[v92];
  swift_bridgeObjectRelease(v93);
  uint64_t v94 = a3[14];
  uint64_t v95 = &a1[v94];
  uint64_t v96 = &a2[v94];
  uint64_t v97 = type metadata accessor for Date(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v97 - 8) + 40LL))(v95, v96, v97);
  *(void *)&a1[a3[15]] = *(void *)&a2[a3[15]];
  return a1;
}

  unint64_t v19 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v19 + 48) + 8 * a2) = a1;
  double v20 = *(void *)(v19 + 16);
  id v21 = __OFADD__(v20, 1LL);
  __int128 v22 = v20 + 1;
  if (v21) {
    __break(1u);
  }
  else {
    *(void *)(v19 + 16) = v22;
  }
}

  __int128 v24 = *v9;
  *(void *)(*v9 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v24 + 48) + 8 * a2) = a1;
  __int128 v25 = *(void *)(v24 + 16);
  uint64_t v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v24 + 16) = v27;
  }
}

  __break(1u);
}

  unint64_t v19 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v19 + 48) + 8 * a2) = a1;
  double v20 = *(void *)(v19 + 16);
  id v21 = __OFADD__(v20, 1LL);
  __int128 v22 = v20 + 1;
  if (v21) {
    __break(1u);
  }
  else {
    *(void *)(v19 + 16) = v22;
  }
}

        swift_bridgeObjectRelease_n(v2, 2LL);
        goto LABEL_15;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v2);
    }
  }

  __int16 v12 = swift_bridgeObjectRetain_n(v2, 2LL);
  id v13 = (os_log_s *)Logger.logObject.getter(v12);
  double v14 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v13, v14)) {
    goto LABEL_14;
  }
  __int16 v15 = swift_slowAlloc(22LL, -1LL);
  id v16 = swift_slowAlloc(64LL, -1LL);
  __int128 v22 = v16;
  *(_DWORD *)__int16 v15 = 136315394;
  id v21 = sub_1003FFBB0(0xD00000000000001ALL, 0x8000000100842230LL, &v22);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v15 + 4, v15 + 12);
  *(_WORD *)(v15 + 12) = 2080;
  swift_bridgeObjectRetain(v2);
  id v21 = sub_1003FFBB0(v1, v2, &v22);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v15 + 14, v15 + 22);
  swift_bridgeObjectRelease_n(v2, 3LL);
  id v17 = "%s: does not need to clean up for group %s.";
LABEL_10:
  _os_log_impl((void *)&_mh_execute_header, v13, v14, v17, (uint8_t *)v15, 0x16u);
  swift_arrayDestroy(v16, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v16, -1LL, -1LL);
  swift_slowDealloc(v15, -1LL, -1LL);

LABEL_15:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 32));
  return swift_release(v3);
}

  __int128 v22 = *v7;
  *(void *)(*v7 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v22 + 48) + 8 * a2) = a1;
  __int128 v23 = *(void *)(v22 + 16);
  __int128 v24 = __OFADD__(v23, 1LL);
  __int128 v25 = v23 + 1;
  if (v24) {
    __break(1u);
  }
  else {
    *(void *)(v22 + 16) = v25;
  }
}

  id v13 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v13 + 48) + 8 * a2) = v5;
  double v14 = *(void *)(v13 + 16);
  __int16 v15 = __OFADD__(v14, 1LL);
  id v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v13 + 16) = v16;
  }
  return result;
}

    return;
  }

  uint64_t v9 = OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_state;
  __int16 v10 = *(void *)(v1 + OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_state);
  __int16 v11 = v10 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v10 + 16LL);
  __int16 v12 = (os_unfair_lock_s *)(v10 + ((*(unsigned int *)(*(void *)v10 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  swift_retain(v10);
  os_unfair_lock_lock(v12);
  sub_1004BED84(v11, (char *)&v36);
  os_unfair_lock_unlock(v12);
  LOBYTE(v11) = v36;
  id v13 = swift_release(v10);
  oslog = (os_log_t)Logger.logObject.getter(v13);
  double v14 = static os_log_type_t.default.getter(oslog);
  __int16 v15 = os_log_type_enabled(oslog, v14);
  if ((v11 & 1) == 0)
  {
    if (v15)
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v30 = swift_slowAlloc(32LL, -1LL);
      uint64_t v36 = v30;
      *(_DWORD *)uint64_t v29 = 136315138;
      uint64_t v35 = sub_1003FFBB0(0x4B74656863746172LL, 0xED00002928737965LL, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v29 + 4, v29 + 12);
      id v33 = v14;
      uint64_t v31 = "%s: ratchet canceled because we just ratcheted recently";
      id v32 = oslog;
      goto LABEL_10;
    }

    goto LABEL_14;
  }

  if (v15)
  {
    id v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v17 = swift_slowAlloc(32LL, -1LL);
    uint64_t v36 = v17;
    *(_DWORD *)id v16 = 136315138;
    uint64_t v35 = sub_1003FFBB0(0x4B74656863746172LL, 0xED00002928737965LL, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v16 + 4, v16 + 12);
    _os_log_impl((void *)&_mh_execute_header, oslog, v14, "%s: ratchet (rolling)", v16, 0xCu);
    swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  double v18 = *(void *)(v1 + v9);
  unint64_t v19 = (void *)(v18 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v18 + 16LL));
  double v20 = (os_unfair_lock_s *)(v18 + ((*(unsigned int *)(*(void *)v18 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  swift_retain(v18);
  os_unfair_lock_lock(v20);
  sub_1004BEE68(v19, v1);
  os_unfair_lock_unlock(v20);
  id v21 = swift_release(v18);
  __int128 v22 = ((uint64_t (*)(uint64_t))v2)(v21);
  if (v22)
  {
    __int128 v24 = v22;
    __int128 v25 = v23;
    uint64_t v26 = swift_getObjectType(v22);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v1, v26, v25);
    swift_unknownObjectRelease(v24, v27);
  }

            uint64_t v30 = v32;
            goto LABEL_21;
          }

void sub_100041E04(id a1)
{
  dword_1009BE720 = 4;
  qword_1009BE768 = (uint64_t)sub_100041E54;
  unk_1009BE770 = sub_1000423D0;
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___IDSClientChannelManager);
  double v2 = (void *)qword_1009BE6F8;
  qword_1009BE6F8 = (uint64_t)v1;
}

void sub_100041E54(uint64_t a1, uint64_t a2)
{
  if (qword_1009BE838 != -1) {
    dispatch_once(&qword_1009BE838, &stru_1008F7920);
  }
  uint64_t v3 = mach_continuous_time();
  double v4 = *(double *)&qword_1009BE840;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v5 readHandler]);
  if (v6)
  {
    int v8 = (uint64_t (**)(void, void, void, void, void, void))v6;
    double v9 = v4 * (double)v3;
    *(void *)&__int128 v7 = 134217984LL;
    __int128 v40 = v7;
    uint64_t v41 = a1;
    while (1)
    {
      v44[0] = 0xAAAAAAAAAAAAAAAALL;
      v44[1] = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v10 = nw_frame_array_first(v44);
      uint64_t v11 = objc_claimAutoreleasedReturnValue(v10);
      if (v11)
      {
        __int16 v12 = (void *)v11;
        id v13 = 0LL;
        do
        {
          double v14 = v13;
          uint64_t v15 = nw_frame_array_next(1LL, v12);
          id v13 = (void *)objc_claimAutoreleasedReturnValue(v15);

          unsigned int v43 = -1431655766;
          id v16 = (unsigned __int16 *)nw_frame_unclaimed_bytes(v12, &v43);
          if (qword_1009BE838 != -1) {
            dispatch_once(&qword_1009BE838, &stru_1008F7920);
          }
          double v17 = *(double *)&qword_1009BE840 * (double)mach_continuous_time();
          if ([v5 verboseFunctionalLogging])
          {
            double v18 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog ClientChannelManager]( &OBJC_CLASS___IDSFoundationLog,  "ClientChannelManager"));
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              unint64_t v19 = v43;
              id v20 = objc_retainBlock(v8);
              *(_DWORD *)buf = 134218752;
              unint64_t v46 = v19;
              __int16 v47 = 2048;
              unint64_t v48 = (unint64_t)v20;
              __int16 v49 = 2048;
              double v50 = v17 - v9;
              __int16 v51 = 2048;
              double v52 = v17;
              _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "processing data (total %lu) from client (handle %p) getInputFrameTime %0.6lf [%013.6lf]",  buf,  0x2Au);
            }
          }

          uint64_t v21 = v43;
          if (v5[8])
          {
            if (v43 <= 1)
            {
              __int128 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog ClientChannelManager]( &OBJC_CLASS___IDSFoundationLog,  "ClientChannelManager"));
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = v40;
                unint64_t v46 = v43;
                _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "input_available but not enough bytes (%lu) in frame",  buf,  0xCu);
              }

              nw_frame_finalize(v12, 0LL);
              id v23 = v13;
              goto LABEL_33;
            }

            uint64_t v25 = __rev16(*v16);
            if ((_DWORD)v25) {
              __int128 v24 = v16 + 1;
            }
            else {
              __int128 v24 = 0LL;
            }
            uint64_t v26 = (v25 + 2);
            id v16 = (unsigned __int16 *)((char *)v16 + v26);
            uint64_t v21 = v43 - v26;
          }

          else
          {
            __int128 v24 = 0LL;
            uint64_t v25 = 0LL;
          }

          uint64_t v27 = ((uint64_t (**)(void, unsigned __int16 *, uint64_t, unsigned __int16 *, uint64_t, void))v8)[2]( v8,  v16,  v21,  v24,  v25,  0LL);
          if (qword_1009BE838 != -1) {
            dispatch_once(&qword_1009BE838, &stru_1008F7920);
          }
          uint64_t v28 = mach_continuous_time();
          double v29 = *(double *)&qword_1009BE840;
          nw_frame_finalize(v12, v27);
          id v30 = v13;

          if (qword_1009BE838 != -1) {
            dispatch_once(&qword_1009BE838, &stru_1008F7920);
          }
          uint64_t v31 = mach_continuous_time();
          double v32 = *(double *)&qword_1009BE840;
          __int16 v12 = (void *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog ClientChannelManager]( &OBJC_CLASS___IDSFoundationLog,  "ClientChannelManager"));
          if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_DEFAULT))
          {
            double v33 = v29 * (double)v28;
            double v34 = v32 * (double)v31;
            double v35 = COERCE_DOUBLE(objc_retainBlock(v8));
            double v36 = v35;
            *(_DWORD *)buf = 134220034;
            *(double *)&int v37 = COERCE_DOUBLE(@"NO");
            if ((_DWORD)v27) {
              *(double *)&int v37 = COERCE_DOUBLE(@"YES");
            }
            unint64_t v46 = v21;
            __int16 v47 = 2048;
            unint64_t v48 = v25;
            __int16 v49 = 2048;
            double v50 = v35;
            __int16 v51 = 2112;
            double v52 = *(double *)&v37;
            __int16 v53 = 2048;
            uint64_t v54 = v41;
            __int16 v55 = 2048;
            uint64_t v56 = a2;
            __int16 v57 = 2048;
            double v58 = v33 - v17;
            __int16 v59 = 2048;
            double v60 = v34 - v33;
            __int16 v61 = 2048;
            double v62 = v33;
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v12,  OS_LOG_TYPE_DEFAULT,  "processing data (total %lu metadata %lu) from client (handle %p) (success %@) protocol %p output_handler % p readHandlerTime %0.6lf finalizeTime %0.6lf [%013.6lf]",  buf,  0x5Cu);
          }

LABEL_33:
LABEL_34:
          __int16 v12 = v13;
        }

        while (v13);
      }

      id v5 = *(id *)(v41 + 40);
      int v8 = (uint64_t (**)(void, void, void, void, void, void))objc_claimAutoreleasedReturnValue([v5 readHandler]);
      if (!v8) {
        goto LABEL_36;
      }
    }

    uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog ClientChannelManager](&OBJC_CLASS___IDSFoundationLog, "ClientChannelManager"));
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      id v39 = objc_retainBlock(v8);
      *(_DWORD *)buf = v40;
      unint64_t v46 = (unint64_t)v39;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "input_available but no frames (handle %p)",  buf,  0xCu);
    }
  }

  else
  {
LABEL_36:
    int v8 = (uint64_t (**)(void, void, void, void, void, void))objc_claimAutoreleasedReturnValue( +[IDSFoundationLog ClientChannelManager]( &OBJC_CLASS___IDSFoundationLog,  "ClientChannelManager",  v40));
    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v8,  OS_LOG_TYPE_DEFAULT,  "input_available but no readHandler",  buf,  2u);
    }
  }
}

  return v3;
}

        goto LABEL_34;
      }

      double v9 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
      if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v39 = v6;
        uint64_t v10 = "Tried to disable ad hoc account directly, ignoring... { uniqueID: %@ }";
LABEL_10:
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v9, OS_LOG_TYPE_DEFAULT, v10, buf, 0xCu);
      }
    }

    else
    {
      double v9 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
      if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v39 = v6;
        uint64_t v10 = "Tried to disable a primary account we don't know about, ignoring... { uniqueID: %@ }";
        goto LABEL_10;
      }
    }
    }

    else
    {
      [v350 setResponseAlertInfo:&off_1009489F0];
    }
  }

  if (v20)
  {
    id v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v434 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "  Message delivery failed with code: %d",  buf,  8u);
    }
  }

  if (v342)
  {
    uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)v434 = v20;
      *(_WORD *)&v434[4] = 2112;
      *(void *)&v434[6] = v342;
      _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "  Message delivery failed with result code: %d  error: %@",  buf,  0x12u);
    }
  }

  v345 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  v419 = 0u;
  v418 = 0u;
  v417 = 0u;
  v416 = 0u;
  id obj = v17;
  unint64_t v46 = [obj countByEnumeratingWithState:&v416 objects:v442 count:16];
  if (v46)
  {
    __int16 v47 = *(void *)v417;
    do
    {
      for (j = 0LL; j != v46; j = (char *)j + 1)
      {
        if (*(void *)v417 != v47) {
          objc_enumerationMutation(obj);
        }
        __int16 v49 = *(void **)(*((void *)&v416 + 1) + 8LL * (void)j);
        double v50 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [v49 absintheRetries]));
        __int16 v51 = (void *)objc_claimAutoreleasedReturnValue([v49 guid]);
        -[NSMutableDictionary setObject:forKey:](v345, "setObject:forKey:", v50, v51);

        [v49 setAbsintheRetries:0];
      }

      unint64_t v46 = [obj countByEnumeratingWithState:&v416 objects:v442 count:16];
    }

    while (v46);
  }

  v315 = (void *)objc_claimAutoreleasedReturnValue([v350 responseAlertInfo]);
  switch(v20)
  {
    case 0x1771uLL:
      uint64_t v90 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v90,  OS_LOG_TYPE_DEFAULT,  "Server rejected registration; failing all candidate registrations",
          buf,
          2u);
      }

      v378 = 0u;
      v379 = 0u;
      v376 = 0u;
      v377 = 0u;
      v336 = obj;
      uint64_t v91 = [v336 countByEnumeratingWithState:&v376 objects:v430 count:16];
      if (v91)
      {
        uint64_t v92 = *(void *)v377;
        do
        {
          for (k = 0LL; k != v91; k = (char *)k + 1)
          {
            if (*(void *)v377 != v92) {
              objc_enumerationMutation(v336);
            }
            -[IDSRegistrationCenter _notifyRegistrationFailure:responseCode:registrationError:error:info:]( v353,  "_notifyRegistrationFailure:responseCode:registrationError:error:info:",  *(void *)(*((void *)&v376 + 1) + 8LL * (void)k),  6001LL,  31LL,  v342,  v315);
          }

          uint64_t v91 = [v336 countByEnumeratingWithState:&v376 objects:v430 count:16];
        }

        while (v91);
      }

      goto LABEL_396;
    case 0x1772uLL:
    case 0x1773uLL:
    case 0x1776uLL:
    case 0x1777uLL:
      goto LABEL_100;
    case 0x1774uLL:
      uint64_t v98 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
      if (os_log_type_enabled(v98, OS_LOG_TYPE_FAULT)) {
        sub_1006A4258();
      }

      -[IDSValidationQueue cleanupValidationInfoForSubsystemMechanism:]( v353->_validationQueue,  "cleanupValidationInfoForSubsystemMechanism:",  1LL);
      v387 = 0u;
      v386 = 0u;
      v384 = 0u;
      v385 = 0u;
      v336 = obj;
      uint64_t v99 = [v336 countByEnumeratingWithState:&v384 objects:v432 count:16];
      if (!v99) {
        goto LABEL_396;
      }
      uint64_t v100 = 0;
      uint64_t v101 = *(void *)v385;
      do
      {
        for (m = 0LL; m != v99; m = (char *)m + 1)
        {
          if (*(void *)v385 != v101) {
            objc_enumerationMutation(v336);
          }
          uint64_t v103 = *(void **)(*((void *)&v384 + 1) + 8LL * (void)m);
          uint64_t v104 = (void *)objc_claimAutoreleasedReturnValue([v103 guid]);
          uint64_t v105 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v345, "objectForKey:", v104));
          uint64_t v106 = [v105 intValue];

          if (v106 > 2)
          {
            uint64_t v108 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
            if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(void *)v434 = v103;
              _os_log_impl( (void *)&_mh_execute_header,  v108,  OS_LOG_TYPE_DEFAULT,  " Maximum absinthe retries reached, failing registration %@",  buf,  0xCu);
            }

            -[IDSRegistrationCenter _notifyRegistrationFailure:responseCode:registrationError:error:info:]( v353,  "_notifyRegistrationFailure:responseCode:registrationError:error:info:",  v103,  6004LL,  29LL,  v342,  v315);
          }

          else
          {
            uint64_t v107 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
            if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)v434 = v106;
              _os_log_impl( (void *)&_mh_execute_header,  v107,  OS_LOG_TYPE_DEFAULT,  " Retries so far: %d  trying again",  buf,  8u);
            }

            [v103 setAbsintheRetries:(v106 + 1)];
            uint64_t v100 = 1;
          }
        }

        uint64_t v99 = [v336 countByEnumeratingWithState:&v384 objects:v432 count:16];
      }

      while (v99);

      p_isa = (id *)&v353->super.isa;
      if ((v100 & 1) != 0)
      {
        -[IDSValidationQueue removeFromQueue:subsystem:]( v353->_validationQueue,  "removeFromQueue:subsystem:",  v350,  1LL);
        -[IDSRegistrationCenter _sendRegistrationAsDeregister:](v353, "_sendRegistrationAsDeregister:", v354);
      }

      goto LABEL_397;
    case 0x1775uLL:
    case 0x1778uLL:
      double v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "Bad signature, will refresh credentials for all registrations",  buf,  2u);
      }

      sub_10012E874(0, @"Registration", @"Bad signature, need to send SMS", 1073LL);
      v374 = 0u;
      v375 = 0u;
      v372 = 0u;
      v373 = 0u;
      v336 = obj;
      __int16 v53 = [v336 countByEnumeratingWithState:&v372 objects:v429 count:16];
      if (v53)
      {
        uint64_t v54 = *(void *)v373;
        do
        {
          for (n = 0LL; n != v53; n = (char *)n + 1)
          {
            if (*(void *)v373 != v54) {
              objc_enumerationMutation(v336);
            }
            -[IDSRegistrationCenter _notifyRegistrationFailure:responseCode:registrationError:error:info:]( v353,  "_notifyRegistrationFailure:responseCode:registrationError:error:info:",  *(void *)(*((void *)&v372 + 1) + 8LL * (void)n),  v20,  37LL,  v342,  v315);
          }

          __int16 v53 = [v336 countByEnumeratingWithState:&v372 objects:v429 count:16];
        }

        while (v53);
      }

      goto LABEL_396;
    case 0x1779uLL:
      uint64_t v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_DEFAULT,  "Server rejected registration permanently; failing all candidate registrations",
          buf,
          2u);
      }

      v382 = 0u;
      v383 = 0u;
      v380 = 0u;
      v381 = 0u;
      v336 = obj;
      uint64_t v95 = [v336 countByEnumeratingWithState:&v380 objects:v431 count:16];
      if (v95)
      {
        uint64_t v96 = *(void *)v381;
        do
        {
          for (ii = 0LL; ii != v95; ii = (char *)ii + 1)
          {
            if (*(void *)v381 != v96) {
              objc_enumerationMutation(v336);
            }
            -[IDSRegistrationCenter _notifyRegistrationFailure:responseCode:registrationError:error:info:]( v353,  "_notifyRegistrationFailure:responseCode:registrationError:error:info:",  *(void *)(*((void *)&v380 + 1) + 8LL * (void)ii),  6009LL,  38LL,  v342,  v315);
          }

          uint64_t v95 = [v336 countByEnumeratingWithState:&v380 objects:v431 count:16];
        }

        while (v95);
      }

      goto LABEL_396;
    default:
      if (!v20)
      {
        uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
        v336 = (id)objc_claimAutoreleasedReturnValue([v56 deviceName]);

        IMSetDomainBoolForKey(@"com.apple.conference", @"restoredFromBackup", 0LL);
        v337 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        v415 = 0u;
        v414 = 0u;
        v413 = 0u;
        v412 = 0u;
        __int16 v57 = (void *)objc_claimAutoreleasedReturnValue([v350 services]);
        double v58 = [v57 countByEnumeratingWithState:&v412 objects:v441 count:16];
        v319 = v57;
        if (v58)
        {
          v317 = 0LL;
          v318 = v58;
          v313 = 0LL;
          v314 = 0LL;
          allocator = 0LL;
          v321 = *(void *)v413;
          v329 = _IDSIdentityClientDataMessageProtectionNGMDevicePrekeyDataKey;
          v331 = _IDSIdentityClientDataMessageProtectionIdentityKey;
          v327 = IDSRegistrationPropertyKeyTransparencyDeviceKeySignature;
          do
          {
            for (jj = 0LL; jj != v318; jj = (char *)jj + 1)
            {
              if (*(void *)v413 != v321) {
                objc_enumerationMutation(v319);
              }
              __int16 v59 = *(void **)(*((void *)&v412 + 1) + 8LL * (void)jj);
              v408 = 0u;
              v409 = 0u;
              v410 = 0u;
              v411 = 0u;
              v334 = v59;
              v325 = (id)objc_claimAutoreleasedReturnValue([v59 objectForKey:@"users"]);
              v339 = [v325 countByEnumeratingWithState:&v408 objects:v440 count:16];
              if (v339)
              {
                v332 = *(void *)v409;
                do
                {
                  for (kk = 0LL; kk != v339; kk = (char *)kk + 1)
                  {
                    if (*(void *)v409 != v332) {
                      objc_enumerationMutation(v325);
                    }
                    double v60 = *(void **)(*((void *)&v408 + 1) + 8LL * (void)kk);
                    v355 = (void *)objc_claimAutoreleasedReturnValue([v60 objectForKey:@"client-data"]);
                    __int16 v61 = (void *)objc_claimAutoreleasedReturnValue([v355 objectForKey:v331]);
                    v343 = v60;
                    v340 = v61;
                    if (v61)
                    {
                      double v62 = v61;

                      v317 = v62;
                    }

                    v348 = (void *)objc_claimAutoreleasedReturnValue([v355 objectForKey:v329]);
                    __int16 v63 = objc_alloc(&OBJC_CLASS___IDSProtoKeyTransparencyLoggableData);
                    uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([v343 objectForKey:@"kt-loggable-data"]);
                    v357 = -[IDSProtoKeyTransparencyLoggableData initWithData:](v63, "initWithData:", v64);

                    v351 = (void *)objc_claimAutoreleasedReturnValue(-[IDSProtoKeyTransparencyLoggableData ngmPublicIdentity](v357, "ngmPublicIdentity"));
                    if (v351 && v348)
                    {
                      __int16 v65 = v351;

                      uint64_t v66 = v348;
                      v313 = v66;
                      v314 = v65;
                    }

                    if (-[IDSProtoKeyTransparencyLoggableData applicationPublicIdentitysCount]( v357,  "applicationPublicIdentitysCount"))
                    {
                      v407 = 0u;
                      v406 = 0u;
                      v405 = 0u;
                      v404 = 0u;
                      __int16 v67 = (void *)objc_claimAutoreleasedReturnValue( -[IDSProtoKeyTransparencyLoggableData applicationPublicIdentitys]( v357,  "applicationPublicIdentitys"));
                      unint64_t v68 = [v67 countByEnumeratingWithState:&v404 objects:v439 count:16];
                      if (v68)
                      {
                        __int16 v69 = *(void *)v405;
                        do
                        {
                          for (mm = 0LL; mm != v68; mm = (char *)mm + 1)
                          {
                            if (*(void *)v405 != v69) {
                              objc_enumerationMutation(v67);
                            }
                            __int16 v71 = *(void **)(*((void *)&v404 + 1) + 8LL * (void)mm);
                            if ([v71 hasKeyIndex]
                              && [v71 hasPublicIdentity])
                            {
                              uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [v71 keyIndex]));
                              __int16 v73 = (void *)objc_claimAutoreleasedReturnValue([v71 publicIdentity]);
                              CFMutableStringRef Mutable = allocator;
                              if (!allocator) {
                                CFMutableStringRef Mutable = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
                              }
                              allocator = Mutable;
                              -[__CFDictionary setObject:forKeyedSubscript:]( Mutable,  "setObject:forKeyedSubscript:",  v73,  v72);
                            }
                          }

                          unint64_t v68 = [v67 countByEnumeratingWithState:&v404 objects:v439 count:16];
                        }

                        while (v68);
                      }
                    }

                    uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue([v334 objectForKey:@"service"]);
                    uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDServiceController sharedInstance]( &OBJC_CLASS___IDSDServiceController,  "sharedInstance"));
                    uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue([v76 serviceWithIdentifier:v75]);

                    if ([v77 adHocServiceType])
                    {
                      uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDServiceController sharedInstance]( &OBJC_CLASS___IDSDServiceController,  "sharedInstance"));
                      uint64_t v79 = objc_claimAutoreleasedReturnValue( objc_msgSend( v78,  "primaryServiceForAdhocServiceType:",  objc_msgSend(v77, "adHocServiceType")));

                      uint64_t v77 = (void *)v79;
                    }

                    if ([v77 ktRegistrationDataIndex])
                    {
                      uint64_t v80 = objc_alloc_init(&OBJC_CLASS___IDSKTRegistrationData);
                      uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue([v343 objectForKey:@"kt-loggable-data"]);
                      uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue([v343 objectForKey:@"kt-account-key"]);
                      uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue([v355 objectForKey:v327]);
                      -[IDSKTRegistrationData setKtDataForRegistration:](v80, "setKtDataForRegistration:", v81);
                      -[IDSKTRegistrationData setKtPublicAccountKey:](v80, "setKtPublicAccountKey:", v82);
                      -[IDSKTRegistrationData setKtDataSignature:](v80, "setKtDataSignature:", v83);
                      uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( NSNumber,  "numberWithUnsignedShort:",  [v77 ktRegistrationDataIndex]));
                      -[NSMutableDictionary setObject:forKeyedSubscript:]( v337,  "setObject:forKeyedSubscript:",  v80,  v84);
                    }
                  }

                  v339 = [v325 countByEnumeratingWithState:&v408 objects:v440 count:16];
                }

                while (v339);
              }
            }

            v318 = [v319 countByEnumeratingWithState:&v412 objects:v441 count:16];
          }

          while (v318);
        }

        else
        {
          v317 = 0LL;
          v313 = 0LL;
          v314 = 0LL;
          allocator = 0LL;
        }

        uint64_t v119 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeyManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeyManager,  "sharedInstance"));
        [v119 notePublicIdentityDidRegisterLegacyData:v317 ngmIdentityData:v314 ngmPrekeyData:v313 keyIndexToIdentityData:allocator];

        uint64_t v120 = (void *)objc_claimAutoreleasedReturnValue([v350 responseServices]);
        v294 = (void *)objc_claimAutoreleasedReturnValue([v350 responseHBI]);
        uint64_t v121 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
        if (os_log_type_enabled(v121, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412802;
          *(void *)v434 = v305;
          *(_WORD *)&v434[8] = 2112;
          *(void *)&v434[10] = v294;
          *(_WORD *)&v434[18] = 2112;
          *(void *)&v434[20] = v120;
          _os_log_impl( (void *)&_mh_execute_header,  v121,  OS_LOG_TYPE_DEFAULT,  "Received registration response for: %@   HBI: %@  services: %@",  buf,  0x20u);
        }

        uint64_t v122 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
        v296 = [v122 isC2KEquipment];

        v307 = -[NSMutableArray initWithArray:](objc_alloc(&OBJC_CLASS___NSMutableArray), "initWithArray:", obj);
        v403 = 0u;
        v402 = 0u;
        v401 = 0u;
        v400 = 0u;
        v287 = v120;
        uint64_t v123 = [v287 countByEnumeratingWithState:&v400 objects:v438 count:16];
        if (!v123)
        {
          v271 = v287;
          goto LABEL_388;
        }

        v335 = 0;
        uint64_t v124 = *(void *)v401;
        v291 = (void *)kIDSServiceDefaultsSentinelAlias;
        v281 = *(void *)v401;
        while (1)
        {
          uint64_t v125 = 0LL;
          v282 = v123;
          do
          {
            if (*(void *)v401 != v124) {
              objc_enumerationMutation(v287);
            }
            __int128 v126 = *(void **)(*((void *)&v400 + 1) + 8 * v125);
            v352 = (void *)objc_claimAutoreleasedReturnValue([v126 objectForKey:@"service"]);
            __int128 v127 = objc_claimAutoreleasedReturnValue([v126 objectForKey:@"status"]);
            __int128 v128 = (void *)objc_claimAutoreleasedReturnValue([v126 objectForKey:@"users"]);
            v290 = v126;
            __int128 v129 = objc_claimAutoreleasedReturnValue([v126 objectForKey:@"message"]);
            __int128 v130 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
            v283 = v125;
            if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412802;
              *(void *)v434 = v352;
              *(_WORD *)&v434[8] = 2112;
              *(void *)&v434[10] = v127;
              *(_WORD *)&v434[18] = 2114;
              *(void *)&v434[20] = v129;
              _os_log_impl( (void *)&_mh_execute_header,  v130,  OS_LOG_TYPE_DEFAULT,  "Processing registration response for service { service: %@, status: %@, serverErrorDetail: %{public}@ }",  buf,  0x20u);
            }

            v284 = (void *)v127;
            v285 = (void *)v129;

            v399 = 0u;
            v398 = 0u;
            v397 = 0u;
            v396 = 0u;
            v289 = v128;
            __int128 v131 = [v289 countByEnumeratingWithState:&v396 objects:v437 count:16];
            if (v131)
            {
              v288 = *(void *)v397;
              do
              {
                v293 = 0LL;
                v286 = v131;
                do
                {
                  if (*(void *)v397 != v288) {
                    objc_enumerationMutation(v289);
                  }
                  __int128 v132 = *(void **)(*((void *)&v396 + 1) + 8LL * (void)v293);
                  v310 = (void *)objc_claimAutoreleasedReturnValue([v132 objectForKey:@"user-id"]);
                  v295 = v132;
                  char v133 = (void *)objc_claimAutoreleasedReturnValue([v132 objectForKey:@"status"]);
                  v292 = (void *)objc_claimAutoreleasedReturnValue([v290 objectForKey:@"message"]);
                  if ([v310 hasPrefix:@"P:"]
                    && IDSDebuggingShouldFakePhoneNumberChallenge())
                  {
                    __int128 v134 = IMGetDomainValueForKey( @"com.apple.registration",  @"phoneUserCodeOverrideService");
                    __int128 v135 = (void *)objc_claimAutoreleasedReturnValue(v134);
                    __int128 v137 = objc_opt_class(&OBJC_CLASS___NSString, v136);
                    if ((objc_opt_isKindOfClass(v135, v137) & 1) == 0
                      || ![v135 length]
                      || [v135 isEqualToString:v352])
                    {
                      __int128 v138 = +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  IMGetDomainIntForKey(@"com.apple.registration", @"phoneUserCodeOverride"));
                      v308 = (void *)objc_claimAutoreleasedReturnValue(v138);
                      goto LABEL_204;
                    }

    goto LABEL_34;
  }

  double v14 = (void *)objc_claimAutoreleasedReturnValue(-[IDSAppleIDRegistrationCenter _queueForKey:](self, "_queueForKey:", off_1009B8960));
  [v14 removeObject:v11];

  sub_10012E874(0, @"Registration", @"Authentication failure", 1073LL);
  uint64_t v15 = -[NSMutableArray _copyForEnumerating](self->_handlers, "_copyForEnumerating");
  uint64_t v38 = 0u;
  id v39 = 0u;
  double v36 = 0u;
  int v37 = 0u;
  id v16 = v15;
  double v17 = [v16 countByEnumeratingWithState:&v36 objects:v42 count:16];
  if (v17)
  {
    double v18 = *(void *)v37;
    do
    {
      for (i = 0LL; i != v17; i = (char *)i + 1)
      {
        if (*(void *)v37 != v18) {
          objc_enumerationMutation(v16);
        }
        id v20 = *(void **)(*((void *)&v36 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v20, "center:failedAuthentication:error:info:") & 1) != 0) {
          [v20 center:self failedAuthentication:v11 error:a5 info:v12];
        }
      }

      double v17 = [v16 countByEnumeratingWithState:&v36 objects:v42 count:16];
    }

    while (v17);
  }

  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v35 domain]);
  __int128 v22 = [v21 isEqualToString:NSPOSIXErrorDomain];

  id v23 = (void *)objc_claimAutoreleasedReturnValue([v35 domain]);
  if ([v23 isEqualToString:NSURLErrorDomain])
  {
    __int128 v24 = 1;
  }

  else
  {
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v35 domain]);
    __int128 v24 = [v25 isEqualToString:kCFErrorDomainCFNetwork];
  }

  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[FTNetworkSupport sharedInstance](&OBJC_CLASS___FTNetworkSupport, "sharedInstance"));
  uint64_t v27 = [v26 wiFiActiveAndReachable];

  if (v27) {
    uint64_t v28 = 2;
  }
  else {
    uint64_t v28 = 1;
  }
  double v33 = v28;
  double v29 = sub_10019EA40(a4);
  id v30 = sub_10019EF00(a5);
  if (((v24 | v22) & 1) != 0)
  {
    id v13 = 0LL;
    if (v24) {
      goto LABEL_23;
    }
LABEL_26:
    uint64_t v31 = 0LL;
    if (!v22) {
      goto LABEL_24;
    }
    goto LABEL_27;
  }

  id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v35 code]));
  if (!v24) {
    goto LABEL_26;
  }
LABEL_23:
  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v35 code]));
  if (!v22)
  {
LABEL_24:
    double v32 = 0LL;
    goto LABEL_28;
  }

      double v33 = 0LL;
    }

    double v9 = v41;
  }

  else
  {
LABEL_22:
    double v33 = 0LL;
  }

  return v33;
}

    uint64_t v11 = (v25 - 1) & v25;
    __int128 v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    uint64_t v31 = 8 * v22;
    double v32 = *(void **)(*(void *)(v5 + 48) + v31);
    double v33 = *(void *)(*(void *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      double v34 = v32;
      swift_bridgeObjectRetain(v33);
    }

    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    id v16 = -1LL << *(_BYTE *)(v8 + 32);
    double v17 = result & ~v16;
    double v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        double v29 = v18 == v28;
        if (v18 == v28) {
          double v18 = 0LL;
        }
        v27 |= v29;
        id v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      unint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    id v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v20) = v32;
    *(void *)(*(void *)(v8 + 56) + v20) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v36;
  __int128 v24 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  double v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    unsigned __int16 *v24 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

        __int16 v12 = (v24 - 1) & v24;
        __int128 v22 = __clz(__rbit64(v24)) + (v16 << 6);
      }

      id v30 = *(void **)(*(void *)(v5 + 48) + 8 * v22);
      double v34 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v22);
      if ((a2 & 1) == 0)
      {
        uint64_t v31 = v30;
        sub_1004028CC(v34, *((unint64_t *)&v34 + 1));
      }

      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
      double v17 = -1LL << *(_BYTE *)(v8 + 32);
      double v18 = result & ~v17;
      unint64_t v19 = v18 >> 6;
      if (((-1LL << v18) & ~*(void *)(v14 + 8 * (v18 >> 6))) != 0)
      {
        id v20 = __clz(__rbit64((-1LL << v18) & ~*(void *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v26 = 0;
        uint64_t v27 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          uint64_t v28 = v19 == v27;
          if (v19 == v27) {
            unint64_t v19 = 0LL;
          }
          v26 |= v28;
          double v29 = *(void *)(v14 + 8 * v19);
        }

        while (v29 == -1);
        id v20 = __clz(__rbit64(~v29)) + (v19 << 6);
      }

      *(void *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
      *(void *)(*(void *)(v8 + 48) + 8 * v20) = v30;
      *(_OWORD *)(*(void *)(v8 + 56) + 16 * v20) = v34;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
LABEL_43:
  *uint64_t v3 = v8;
  return result;
}

        __int16 v12 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }

      uint64_t v27 = *(void *)(v5 + 56);
      uint64_t v28 = *(_DWORD *)(*(void *)(v5 + 48) + 4 * v19);
      double v29 = *(void *)(v27 + 8 * v19);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain(*(void *)(v27 + 8 * v19));
      }
      Hasher.init(_seed:)(v34, *(void *)(v8 + 40));
      Hasher._combine(_:)(v28);
      uint64_t result = Hasher._finalize()();
      double v14 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v15 = result & ~v14;
      id v16 = v15 >> 6;
      if (((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        double v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        id v23 = 0;
        __int128 v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          uint64_t v25 = v16 == v24;
          if (v16 == v24) {
            id v16 = 0LL;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v13 + 8 * v16);
        }

        while (v26 == -1);
        double v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }

      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      *(_DWORD *)(*(void *)(v8 + 48) + 4 * v17) = v28;
      *(void *)(*(void *)(v8 + 56) + 8 * v17) = v29;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
LABEL_43:
  *uint64_t v3 = v8;
  return result;
}

        id v13 = (v23 - 1) & v23;
        uint64_t v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }

      double v29 = *(void *)(*(void *)(v5 + 48) + 8 * v21);
      double v32 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v21);
      if ((a2 & 1) == 0) {
        sub_1004028CC(v32, *((unint64_t *)&v32 + 1));
      }
      uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v8 + 40), v29);
      id v16 = -1LL << *(_BYTE *)(v8 + 32);
      double v17 = result & ~v16;
      double v18 = v17 >> 6;
      if (((-1LL << v17) & ~*(void *)(v15 + 8 * (v17 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v15 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          uint64_t v27 = v18 == v26;
          if (v18 == v26) {
            double v18 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v15 + 8 * v18);
        }

        while (v28 == -1);
        unint64_t v19 = __clz(__rbit64(~v28)) + (v18 << 6);
      }

      *(void *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
      *(void *)(*(void *)(v8 + 48) + 8 * v19) = v29;
      *(_OWORD *)(*(void *)(v8 + 56) + 16 * v19) = v32;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
LABEL_43:
  *uint64_t v3 = v8;
  return result;
}

      __int16 v53 = (v59 - 1) & v59;
      for (i = __clz(__rbit64(v59)) + (v55 << 6); ; i = v56 | (v55 << 6))
      {
        __int16 v61 = v151;
        sub_1003F5FC8( *(void *)(v49 + 48) + *(void *)(v152.n128_u64[0] + 72) * i,  v151,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
        double v62 = sub_1003F600C(v61, v12, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
        __int16 v47 = v153;
        __int16 v63 = (os_log_s *)Logger.logObject.getter(v62);
        uint64_t v64 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v63, v64))
        {
          __int16 v65 = swift_slowAlloc(22LL, -1LL);
          unint64_t v48 = (uint64_t (*__ptr32 *)(int, int, id))swift_slowAlloc(64LL, -1LL);
          aBlock[0] = (uint64_t)v48;
          *(_DWORD *)__int16 v65 = v148.n128_u32[0];
          *(void *)(v65 + 4) = sub_1003FFBB0(0xD00000000000001FLL, v145, aBlock);
          *(_WORD *)(v65 + 12) = 2080;
          uint64_t v66 = sub_10040A2B0( &qword_1009B9880,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer,  (uint64_t)&unk_10071BF54);
          __int16 v67 = dispatch thunk of CustomStringConvertible.description.getter(v150, v66);
          __int16 v47 = (os_log_s *)v68;
          *(void *)(v65 + 14) = sub_1003FFBB0(v67, v68, aBlock);
          swift_bridgeObjectRelease(v47);
          sub_1003F6050(v12, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
          _os_log_impl((void *)&_mh_execute_header, v63, v64, "%s    %s", (uint8_t *)v65, 0x16u);
          swift_arrayDestroy(v48, 2LL, v144);
          swift_slowDealloc(v48, -1LL, -1LL);
          swift_slowDealloc(v65, -1LL, -1LL);

          if (!v53) {
            goto LABEL_20;
          }
        }

        else
        {

          sub_1003F6050(v12, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
          if (!v53) {
            goto LABEL_20;
          }
        }

          __int16 v61 = 0LL;
          double v62 = v48;
          double v36 = 1LL;
          goto LABEL_7;
        }

        __int16 v61 = 0LL;
        double v62 = v32 + 3;
        double v36 = 1LL;
LABEL_7:
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56))(v28, v36, 1LL, v13);
        int v37 = v64;
        *a5 = v30;
        a5[1] = v37;
        uint64_t v38 = v62;
        a5[2] = v63;
        a5[3] = v38;
        a5[4] = v61;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v28, 1LL, v13) == 1)
        {
          sub_100425F6C(v28);
          swift_retain(v27);
          return (void *)sub_1004242BC(v57, v55, v56, v27);
        }

        sub_1003F600C(v28, (uint64_t)v22, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
        id v39 = *(void *)(v27 + 40);
        __int128 v40 = sub_10040A2B0( (unint64_t *)&unk_1009B9980,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer,  (uint64_t)&unk_10071BF14);
        uint64_t v41 = dispatch thunk of Hashable._rawHashValue(seed:)(v39, v13, v40);
        uint64_t v42 = -1LL << *(_BYTE *)(v27 + 32);
        unsigned int v43 = v41 & ~v42;
        if (((*(void *)(v65 + ((v43 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v43) & 1) != 0) {
          break;
        }
LABEL_3:
        uint64_t result = (void *)sub_1003F6050( (uint64_t)v22,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
        uint64_t v28 = (uint64_t)v58;
        a5 = v59;
      }

      id v44 = ~v42;
      uint64_t v45 = *(void *)(v60 + 72);
      while (1)
      {
        sub_1003F5FC8( *(void *)(v27 + 48) + v45 * v43,  (uint64_t)v17,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
        unint64_t v46 = sub_10040A2B0( (unint64_t *)&unk_1009B97E0,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer,  (uint64_t)&unk_10071BF7C);
        __int16 v47 = dispatch thunk of static Equatable.== infix(_:_:)(v17, v22, v13, v46);
        sub_1003F6050((uint64_t)v17, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
        if ((v47 & 1) != 0) {
          break;
        }
        unsigned int v43 = (v43 + 1) & v44;
        if (((*(void *)(v65 + ((v43 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v43) & 1) == 0) {
          goto LABEL_3;
        }
      }

      uint64_t result = (void *)sub_1003F6050( (uint64_t)v22,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
      __int16 v51 = (v43 >> 3) & 0x1FFFFFFFFFFFFFF8LL;
      uint64_t v28 = (uint64_t)v58;
      double v52 = *(unint64_t *)((char *)v57 + v51);
      *(unint64_t *)((char *)v57 + v51) = v52 & ~(1LL << v43);
      a5 = v59;
    }

    while ((v52 & (1LL << v43)) == 0);
    uint64_t v26 = v56 - 1;
    if (__OFSUB__(v56, 1LL))
    {
LABEL_41:
      __break(1u);
      return result;
    }

    if (v56 != 1) {
      continue;
    }
    return &_swiftEmptySetSingleton;
  }

    uint64_t v11 = (v25 - 1) & v25;
    __int128 v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    uint64_t v31 = 8 * v22;
    double v32 = *(void **)(*(void *)(v5 + 48) + v31);
    double v33 = *(void *)(*(void *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      double v34 = v32;
      swift_retain(v33);
    }

    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    id v16 = -1LL << *(_BYTE *)(v8 + 32);
    double v17 = result & ~v16;
    double v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        double v29 = v18 == v28;
        if (v18 == v28) {
          double v18 = 0LL;
        }
        v27 |= v29;
        id v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      unint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    id v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v20) = v32;
    *(void *)(*(void *)(v8 + 56) + v20) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v36;
  __int128 v24 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  double v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    unsigned __int16 *v24 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

        id v13 = (v23 - 1) & v23;
        uint64_t v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }

      double v29 = 8 * v21;
      id v30 = *(void *)(v5 + 56);
      uint64_t v31 = *(void *)(*(void *)(v5 + 48) + v29);
      double v32 = *(void *)(v30 + v29);
      if ((a2 & 1) == 0) {
        swift_retain(*(void *)(v30 + v29));
      }
      uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v8 + 40), v31);
      uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
      id v16 = result & ~v15;
      double v17 = v16 >> 6;
      if (((-1LL << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        double v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          uint64_t v27 = v17 == v26;
          if (v17 == v26) {
            double v17 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v14 + 8 * v17);
        }

        while (v28 == -1);
        double v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }

      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
      unint64_t v19 = 8 * v18;
      *(void *)(*(void *)(v8 + 48) + v19) = v31;
      *(void *)(*(void *)(v8 + 56) + v19) = v32;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v25 - 1) & v25;
    __int128 v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    uint64_t v31 = 8 * v22;
    double v32 = *(void **)(*(void *)(v5 + 48) + v31);
    double v33 = *(void *)(*(void *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      double v34 = v32;
      swift_bridgeObjectRetain(v33);
    }

    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    id v16 = -1LL << *(_BYTE *)(v8 + 32);
    double v17 = result & ~v16;
    double v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        double v29 = v18 == v28;
        if (v18 == v28) {
          double v18 = 0LL;
        }
        v27 |= v29;
        id v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      unint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    id v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v20) = v32;
    *(void *)(*(void *)(v8 + 56) + v20) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v36;
  __int128 v24 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  double v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    unsigned __int16 *v24 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v32 - 1) & v32;
    double v29 = __clz(__rbit64(v32)) + (v14 << 6);
LABEL_34:
    uint64_t v38 = *(void *)(*(void *)(v5 + 56) + 8 * v29);
    unint64_t v48 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v29);
    id v39 = *(void **)(*(void *)(v5 + 48) + 16 * v29 + 8);
    if ((v47 & 1) == 0)
    {
      __int128 v40 = (id)v48;
      uint64_t v41 = v39;
      swift_retain(v38);
    }

    Hasher.init(_seed:)(v49, *(void *)(v8 + 40));
    uint64_t v15 = [(id)v48 prefixedURI];
    id v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    double v18 = v17;

    String.hash(into:)(v49, v16, v18);
    swift_bridgeObjectRelease(v18);
    unint64_t v19 = [v39 prefixedURI];
    id v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    __int128 v22 = v21;

    String.hash(into:)(v49, v20, v22);
    swift_bridgeObjectRelease(v22);
    uint64_t result = Hasher._finalize()();
    id v23 = -1LL << *(_BYTE *)(v8 + 32);
    __int128 v24 = result & ~v23;
    uint64_t v25 = v24 >> 6;
    if (((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      uint64_t v26 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
      uint64_t v27 = v48;
    }

    else
    {
      double v34 = 0;
      double v35 = (unint64_t)(63 - v23) >> 6;
      uint64_t v27 = v48;
      do
      {
        if (++v25 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        double v36 = v25 == v35;
        if (v25 == v35) {
          uint64_t v25 = 0LL;
        }
        v34 |= v36;
        int v37 = *(void *)(v12 + 8 * v25);
      }

      while (v37 == -1);
      uint64_t v26 = __clz(__rbit64(~v37)) + (v25 << 6);
    }

    *(void *)(v12 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v26;
    *(_OWORD *)(*(void *)(v8 + 48) + 16 * v26) = v27;
    *(void *)(*(void *)(v8 + 56) + 8 * v26) = v38;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v43;
  uint64_t v31 = v45;
  if ((v47 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v42 = 1LL << *(_BYTE *)(v5 + 32);
  if (v42 >= 64) {
    bzero(v31, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    uint64_t *v31 = -1LL << v42;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v25 - 1) & v25;
    __int128 v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    uint64_t v31 = *(void **)(*(void *)(v5 + 56) + 8 * v22);
    int v37 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v22);
    double v32 = *(void *)(*(void *)(v5 + 48) + 16 * v22 + 8);
    if ((a2 & 1) == 0)
    {
      sub_1004028CC(v37, v32);
      double v33 = v31;
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    Data.hash(into:)(v38, v37, v32);
    uint64_t result = Hasher._finalize()();
    id v16 = -1LL << *(_BYTE *)(v8 + 32);
    double v17 = result & ~v16;
    double v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
      id v20 = v37;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v16) >> 6;
      id v20 = v37;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        double v29 = v18 == v28;
        if (v18 == v28) {
          double v18 = 0LL;
        }
        v27 |= v29;
        id v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      unint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    *(_OWORD *)(*(void *)(v8 + 48) + 16 * v19) = v20;
    *(void *)(*(void *)(v8 + 56) + 8 * v19) = v31;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v35;
  __int128 v24 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  double v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v24, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    unsigned __int16 *v24 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

  uint64_t v99 = (uint64_t)&_swiftEmptySetSingleton;
LABEL_34:
  while (2)
  {
    uint64_t v101 = ((uint64_t (*)(uint64_t))v59)(v94);
    if (v101)
    {
      uint64_t v103 = v101;
      uint64_t v104 = v102;
      uint64_t v105 = swift_getObjectType(v101);
      __int16 v59 = (*(uint64_t (**)(uint64_t, uint64_t))(v104 + 24))(v105, v104);
      swift_unknownObjectRelease(v103, v106);
    }

    else if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0 {
           && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    }
    {
      sub_10041C0F0((uint64_t)_swiftEmptyArrayStorage);
      __int16 v59 = v247;
    }

    else
    {
      __int16 v59 = (uint64_t)&_swiftEmptySetSingleton;
    }

    swift_bridgeObjectRetain_n(v99, 2LL);
    uint64_t v107 = swift_bridgeObjectRetain_n(v59, 2LL);
    uint64_t v108 = (os_log_s *)Logger.logObject.getter(v107);
    uint64_t v109 = static os_log_type_t.default.getter();
    uint64_t v110 = v109;
    uint64_t v111 = os_log_type_enabled(v108, v109);
    j = v59;
    if (v111)
    {
      uint64_t v112 = swift_slowAlloc(32LL, -1LL);
      LODWORD(v274) = v110;
      uint64_t v113 = v112;
      v273 = swift_slowAlloc(96LL, -1LL);
      v285[0] = v273;
      *(_DWORD *)uint64_t v113 = 136315650;
      v283 = sub_1003FFBB0(0xD000000000000027LL, v260 | 0x8000000000000000LL, v285);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v283, v284, v113 + 4, v113 + 12);
      *(_WORD *)(v113 + 12) = 2080;
      uint64_t v114 = type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
      uint64_t v115 = sub_10040A2B0( (unint64_t *)&unk_1009B97C0,  type metadata accessor for IDSGroupEncryptionControllerParticipant,  (uint64_t)&protocol conformance descriptor for NSObject);
      swift_bridgeObjectRetain(v99);
      uint64_t v117 = Set.description.getter(v116, v114, v115);
      uint64_t v119 = v118;
      swift_bridgeObjectRelease(v99);
      v283 = sub_1003FFBB0(v117, v119, v285);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v283, v284, v113 + 14, v113 + 22);
      swift_bridgeObjectRelease_n(v99, 2LL);
      swift_bridgeObjectRelease(v119);
      *(_WORD *)(v113 + 22) = 2080;
      swift_bridgeObjectRetain(j);
      uint64_t v120 = Set.description.getter(j, v114, v115);
      uint64_t v122 = v121;
      swift_bridgeObjectRelease(j);
      v283 = sub_1003FFBB0(v120, v122, v285);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v283, v284, v113 + 24, v113 + 32);
      swift_bridgeObjectRelease_n(j, 2LL);
      swift_bridgeObjectRelease(v122);
      _os_log_impl( (void *)&_mh_execute_header,  v108,  (os_log_type_t)v274,  "%s: computing for standard participants: %s; lightweight participants: %s",
        (uint8_t *)v113,
        0x20u);
      __int16 v59 = v273;
      swift_arrayDestroy(v273, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1LL, -1LL);
      swift_slowDealloc(v113, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v59, 2LL);
      swift_bridgeObjectRelease_n(v99, 2LL);
    }

    uint64_t v124 = (uint64_t)v258;
    uint64_t v125 = v275;
    if ((v99 & 0xC000000000000001LL) != 0)
    {
      if (v99 < 0) {
        __int128 v126 = v99;
      }
      else {
        __int128 v126 = v99 & 0xFFFFFFFFFFFFFF8LL;
      }
      __int128 v127 = __CocoaSet.makeIterator()(v126);
      __int128 v128 = type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
      __int128 v129 = sub_10040A2B0( (unint64_t *)&unk_1009B97C0,  type metadata accessor for IDSGroupEncryptionControllerParticipant,  (uint64_t)&protocol conformance descriptor for NSObject);
      uint64_t v123 = Set.Iterator.init(_cocoa:)(&v283, v127, v128, v129);
      uint64_t v99 = v283;
      v271 = v284[0];
      __int128 v130 = v284[1];
      __int128 v131 = v284[2];
      __int128 v132 = v284[3];
    }

    else
    {
      __int128 v131 = 0LL;
      char v133 = -1LL << *(_BYTE *)(v99 + 32);
      __int128 v134 = *(void *)(v99 + 56);
      v271 = v99 + 56;
      __int128 v135 = ~v133;
      __int128 v136 = -v133;
      if (v136 < 64) {
        __int128 v137 = ~(-1LL << v136);
      }
      else {
        __int128 v137 = -1LL;
      }
      __int128 v132 = v137 & v134;
      __int128 v130 = v135;
    }

    v269 = (char *)(v99 & 0x7FFFFFFFFFFFFFFFLL);
    v249 = v130;
    v270 = (unint64_t)(v130 + 64) >> 6;
    v254 = v260 | 0x8000000000000000LL;
    v253 = (char *)&type metadata for Any + 8;
    v259 = (unint64_t)&type metadata for Swift.AnyObject + 8;
    v255 = v99;
    while (v99 < 0)
    {
      __int128 v141 = __CocoaSet.Iterator.next()(v123);
      if (!v141) {
        goto LABEL_83;
      }
      v142 = v141;
      v280 = (void *)v141;
      v143 = type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
      swift_unknownObjectRetain(v142, v144);
      swift_dynamicCast(v285, &v280, v259, v143, 7LL);
      v145 = (void *)v285[0];
      v147 = (void *)swift_unknownObjectRelease(v142, v146);
      __int128 v140 = v131;
      __int128 v138 = v132;
      if (!v145) {
        goto LABEL_83;
      }
LABEL_75:
      v273 = v138;
      v274 = v140;
      v151 = OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_participantID;
      v152 = *(void *)((char *)v145
                       + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_participantID);
      v153 = *(uint64_t (**)(__n128))((swift_isaMask & *v125) + 0x198LL);
      if (v152 == ((uint64_t (*)(void *))v153)(v147))
      {
        __int16 v59 = v145;
        v154 = (os_log_s *)Logger.logObject.getter(v59);
        v155 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v154, v155))
        {
          v156 = swift_slowAlloc(22LL, -1LL);
          v157 = (void *)swift_slowAlloc(8LL, -1LL);
          v158 = swift_slowAlloc(32LL, -1LL);
          v285[0] = v158;
          *(_DWORD *)v156 = v276.n128_u32[0];
          *(void *)(v156 + 4) = sub_1003FFBB0(0xD000000000000027LL, v254, v285);
          *(_WORD *)(v156 + 12) = 2112;
          *(void *)(v156 + 14) = v59;
          *v157 = v145;

          _os_log_impl( (void *)&_mh_execute_header,  v154,  v155,  "%s: skipping standard localParticipant %@",  (uint8_t *)v156,  0x16u);
          v159 = sub_1003F5CB4(&qword_1009B92C8);
          swift_arrayDestroy(v157, 1LL, v159);
          swift_slowDealloc(v157, -1LL, -1LL);
          v160 = v158;
          v161 = v253;
LABEL_81:
          swift_arrayDestroy(v160, 1LL, v161);
          v165 = v158;
          uint64_t v125 = v275;
          swift_slowDealloc(v165, -1LL, -1LL);
          swift_slowDealloc(v156, -1LL, -1LL);
          goto LABEL_52;
        }

        goto LABEL_51;
      }

      (*(void (**)(void))((swift_isaMask & *v145) + 0x108LL))();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v267 + 48))(v124, 1LL, v268) == 1)
      {
        sub_10040A274(v124, &qword_1009B97A8);
        __int16 v59 = v145;
        v154 = (os_log_s *)Logger.logObject.getter(v59);
        v162 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v154, v162))
        {
          v156 = swift_slowAlloc(22LL, -1LL);
          v163 = (void *)swift_slowAlloc(8LL, -1LL);
          v158 = swift_slowAlloc(32LL, -1LL);
          v285[0] = v158;
          *(_DWORD *)v156 = v276.n128_u32[0];
          *(void *)(v156 + 4) = sub_1003FFBB0(0xD000000000000027LL, v260 | 0x8000000000000000LL, v285);
          *(_WORD *)(v156 + 12) = 2112;
          *(void *)(v156 + 14) = v59;
          *v163 = v145;

          _os_log_impl( (void *)&_mh_execute_header,  v154,  v162,  "%s: Cannot generate desired material for %@: don't have standard participant's public key",  (uint8_t *)v156,  0x16u);
          v164 = sub_1003F5CB4(&qword_1009B92C8);
          swift_arrayDestroy(v163, 1LL, v164);
          swift_slowDealloc(v163, -1LL, -1LL);
          v161 = (char *)&type metadata for Any + 8;
          v160 = v158;
          goto LABEL_81;
        }

        __int16 v12 = (v24 - 1) & v24;
        __int128 v22 = __clz(__rbit64(v24)) + (v16 << 6);
      }

      id v30 = *(void **)(*(void *)(v5 + 48) + 8 * v22);
      double v34 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v22);
      if ((a2 & 1) == 0)
      {
        uint64_t v31 = v30;
        sub_1004028CC(v34, *((unint64_t *)&v34 + 1));
      }

      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
      double v17 = -1LL << *(_BYTE *)(v8 + 32);
      double v18 = result & ~v17;
      unint64_t v19 = v18 >> 6;
      if (((-1LL << v18) & ~*(void *)(v14 + 8 * (v18 >> 6))) != 0)
      {
        id v20 = __clz(__rbit64((-1LL << v18) & ~*(void *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v26 = 0;
        uint64_t v27 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          uint64_t v28 = v19 == v27;
          if (v19 == v27) {
            unint64_t v19 = 0LL;
          }
          v26 |= v28;
          double v29 = *(void *)(v14 + 8 * v19);
        }

        while (v29 == -1);
        id v20 = __clz(__rbit64(~v29)) + (v19 << 6);
      }

      *(void *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
      *(void *)(*(void *)(v8 + 48) + 8 * v20) = v30;
      *(_OWORD *)(*(void *)(v8 + 56) + 16 * v20) = v34;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
LABEL_43:
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    id v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    double v32 = *v30;
    uint64_t v31 = v30[1];
    double v33 = *(_BYTE *)(*(void *)(v5 + 56) + v21);
    if ((v38 & 1) == 0) {
      swift_bridgeObjectRetain(v30[1]);
    }
    Hasher.init(_seed:)(v39, *(void *)(v8 + 40));
    String.hash(into:)(v39, v32, v31);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    id v16 = result & ~v15;
    double v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      double v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          double v17 = 0LL;
        }
        v26 |= v28;
        double v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      double v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(_BYTE *)(*(void *)(v8 + 56) + v1_Block_object_dispose((const void *)(v1 - 96), 8) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v35;
  id v23 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  double v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    id v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    double v32 = *v30;
    uint64_t v31 = v30[1];
    double v33 = *(void **)(*(void *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      double v34 = v33;
    }

    Hasher.init(_seed:)(v40, *(void *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    id v16 = result & ~v15;
    double v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      double v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          double v17 = 0LL;
        }
        v26 |= v28;
        double v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      double v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v1_Block_object_dispose((const void *)(v1 - 96), 8) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v36;
  id v23 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  double v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v23 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    __int16 v12 = (v26 - 1) & v26;
    id v23 = __clz(__rbit64(v26)) + (v16 << 6);
LABEL_34:
    double v32 = 8 * v23;
    double v33 = *(void **)(*(void *)(v6 + 48) + v32);
    double v34 = *(void **)(*(void *)(v6 + 56) + v32);
    if ((a2 & 1) == 0)
    {
      double v35 = v33;
      double v36 = v34;
    }

    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v9 + 40));
    double v17 = -1LL << *(_BYTE *)(v9 + 32);
    double v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1LL << v18) & ~*(void *)(v14 + 8 * (v18 >> 6))) != 0)
    {
      id v20 = __clz(__rbit64((-1LL << v18) & ~*(void *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v28 = 0;
      double v29 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        id v30 = v19 == v29;
        if (v19 == v29) {
          unint64_t v19 = 0LL;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v14 + 8 * v19);
      }

      while (v31 == -1);
      id v20 = __clz(__rbit64(~v31)) + (v19 << 6);
    }

    *(void *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    uint64_t v21 = 8 * v20;
    *(void *)(*(void *)(v9 + 48) + v21) = v33;
    *(void *)(*(void *)(v9 + 56) + v21) = v34;
    ++*(void *)(v9 + 16);
  }

  swift_release(v6);
  double v4 = v38;
  uint64_t v25 = (void *)(v6 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  int v37 = 1LL << *(_BYTE *)(v6 + 32);
  if (v37 >= 64) {
    bzero(v25, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v25 = -1LL << v37;
  }
  *(void *)(v6 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v6);
  NSMutableDictionary *v4 = v9;
  return result;
}

        id v13 = (v23 - 1) & v23;
        uint64_t v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }

      double v29 = 8 * v21;
      id v30 = *(void *)(*(void *)(v5 + 48) + v29);
      uint64_t v31 = *(void **)(*(void *)(v5 + 56) + v29);
      if ((a2 & 1) == 0) {
        double v32 = v31;
      }
      uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v8 + 40), v30);
      uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
      id v16 = result & ~v15;
      double v17 = v16 >> 6;
      if (((-1LL << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        double v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          uint64_t v27 = v17 == v26;
          if (v17 == v26) {
            double v17 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v14 + 8 * v17);
        }

        while (v28 == -1);
        double v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }

      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
      unint64_t v19 = 8 * v18;
      *(void *)(*(void *)(v8 + 48) + v19) = v30;
      *(void *)(*(void *)(v8 + 56) + v19) = v31;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
LABEL_43:
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    id v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    double v32 = *v30;
    uint64_t v31 = v30[1];
    double v33 = *(void **)(*(void *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      double v34 = v33;
    }

    Hasher.init(_seed:)(v40, *(void *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    id v16 = result & ~v15;
    double v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      double v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          double v17 = 0LL;
        }
        v26 |= v28;
        double v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      double v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v1_Block_object_dispose((const void *)(v1 - 96), 8) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v36;
  id v23 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  double v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v23 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

        id v13 = (v23 - 1) & v23;
        uint64_t v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }

      double v29 = 8 * v21;
      id v30 = *(void *)(v5 + 56);
      uint64_t v31 = *(void *)(*(void *)(v5 + 48) + v29);
      double v32 = *(void *)(v30 + v29);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain(*(void *)(v30 + v29));
      }
      uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v8 + 40), v31);
      uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
      id v16 = result & ~v15;
      double v17 = v16 >> 6;
      if (((-1LL << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        double v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v25 = 0;
        uint64_t v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          uint64_t v27 = v17 == v26;
          if (v17 == v26) {
            double v17 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v14 + 8 * v17);
        }

        while (v28 == -1);
        double v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }

      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
      unint64_t v19 = 8 * v18;
      *(void *)(*(void *)(v8 + 48) + v19) = v31;
      *(void *)(*(void *)(v8 + 56) + v19) = v32;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    id v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    double v32 = *v30;
    uint64_t v31 = v30[1];
    double v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_bridgeObjectRetain(v33);
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    id v16 = result & ~v15;
    double v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      double v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          double v17 = 0LL;
        }
        v26 |= v28;
        double v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      double v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v1_Block_object_dispose((const void *)(v1 - 96), 8) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  id v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  double v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v25 - 1) & v25;
    __int128 v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    uint64_t v31 = 8 * v22;
    double v32 = *(void **)(*(void *)(v5 + 48) + v31);
    double v33 = *(void **)(*(void *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      double v34 = v32;
      double v35 = v33;
    }

    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    id v16 = -1LL << *(_BYTE *)(v8 + 32);
    double v17 = result & ~v16;
    double v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        double v29 = v18 == v28;
        if (v18 == v28) {
          double v18 = 0LL;
        }
        v27 |= v29;
        id v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      unint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    id v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v20) = v32;
    *(void *)(*(void *)(v8 + 56) + v20) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v37;
  __int128 v24 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  double v36 = 1LL << *(_BYTE *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    unsigned __int16 *v24 = -1LL << v36;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

            sub_10041D3BC(v1);
            return;
          }
        }
      }
    }

void sub_1000423D0(uint64_t a1, uint64_t a2)
{
  double v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog ClientChannelManager](&OBJC_CLASS___IDSFoundationLog, "ClientChannelManager"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 134218240;
    uint64_t v6 = a1;
    __int16 v7 = 2048;
    uint64_t v8 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "output available protocol %p output_handler %p",  (uint8_t *)&v5,  0x16u);
  }
}

uint64_t sub_100042C20(int a1, unsigned __int16 **a2, unsigned __int16 **a3, unsigned int *a4)
{
  if (!a1)
  {
    *a3 = 0LL;
    *a4 = 0;
    return 1LL;
  }

  int v5 = a2[2];
  if (v5 <= 1)
  {
    uint64_t v6 = a2[2];
    uint64_t v7 = OSLogHandleForTransportCategory("IDSClientChannel");
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v19 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "data should have metadata but not enough bytes (%lu)",  buf,  0xCu);
    }

    uint64_t result = os_log_shim_legacy_logging_enabled(v9);
    if ((_DWORD)result)
    {
      uint64_t result = _IDSShouldLogTransport(result);
      if ((_DWORD)result)
      {
        _IDSLogTransport( @"IDSClientChannel",  @"IDS",  @"data should have metadata but not enough bytes (%lu)");
        uint64_t result = _IDSShouldLog(0LL, @"IDSClientChannel");
        if ((_DWORD)result)
        {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSClientChannel",  @"data should have metadata but not enough bytes (%lu)");
          return 0LL;
        }
      }
    }

    return result;
  }

  uint64_t v11 = *a2;
  unsigned int v12 = __rev16(**a2);
  *a4 = v12;
  if (!v12)
  {
    double v17 = 0LL;
LABEL_21:
    *a3 = v17;
    IDSLinkPacketBufferAddBufferStart(a2, v12 + 2);
    return 1LL;
  }

  if (v12 <= (int)v5 - 2)
  {
    double v17 = v11 + 1;
    goto LABEL_21;
  }

  uint64_t v13 = OSLogHandleForTransportCategory("IDSClientChannel");
  double v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v15 = *a4;
    *(_DWORD *)buf = 67109120;
    LODWORD(v19) = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "metadataSize is bigger than the actual packet buffer size (%u)",  buf,  8u);
  }

  uint64_t result = os_log_shim_legacy_logging_enabled(v16);
  if ((_DWORD)result)
  {
    uint64_t result = _IDSShouldLogTransport(result);
    if ((_DWORD)result)
    {
      _IDSLogTransport( @"IDSClientChannel",  @"IDS",  @"metadataSize is bigger than the actual packet buffer size (%u)");
      uint64_t result = _IDSShouldLog(0LL, @"IDSClientChannel");
      if ((_DWORD)result)
      {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSClientChannel",  @"metadataSize is bigger than the actual packet buffer size (%u)");
        return 0LL;
      }
    }
  }

  return result;
}

void sub_100043434(_Unwind_Exception *a1)
{
}

void sub_1000434A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v1 + 9))
  {
    IDSTransportThreadRemoveSocket(*(unsigned int *)(a1 + 48));
    return;
  }

  uint64_t v2 = *(void *)(v1 + 88);
  uint64_t v3 = *(void *)(a1 + 40);
  double v4 = (unsigned __int8 *)(id)v1;
  int v5 = (double *)&unk_1009BE000;
  if (([v4 verboseFunctionalLogging] & 1) != 0
    || [v4 verbosePerformanceLogging])
  {
    if (qword_1009BE838 != -1) {
      dispatch_once(&qword_1009BE838, &stru_1008F7920);
    }
    double v6 = *(double *)&qword_1009BE840 * (double)mach_continuous_time();
    int v7 = 1;
  }

  else
  {
    int v7 = 0;
    double v6 = 0.0;
  }

  unsigned int v8 = os_channel_available_slot_count(v3);
  if (v8)
  {
    unsigned int v9 = v8;
    uint64_t v42 = v2;
    uint64_t next_slot = 0LL;
    int v11 = 0;
    uint64_t v45 = v4;
    while (1)
    {
      double v12 = 0.0;
      if (v7)
      {
        if (qword_1009BE838 != -1) {
          dispatch_once(&qword_1009BE838, &stru_1008F7920);
        }
        double v12 = v5[264] * (double)mach_continuous_time();
      }

      *(void *)&__int128 v13 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
      __int128 v57 = v13;
      __int128 v58 = v13;
      *(_OWORD *)uint64_t v56 = v13;
      *(_OWORD *)&v56[16] = v13;
      uint64_t next_slot = os_channel_get_next_slot(v3, next_slot, v56);
      uint64_t v14 = _IDSLinkPacketBufferCreate( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSClientChannelManager.m",  1091LL);
      uint64_t v15 = v14;
      if (*(void *)(v14 + 8) >= (unint64_t)*(unsigned __int16 *)&v56[2])
      {
        if (*(_WORD *)&v56[2])
        {
          memcpy(*(void **)v14, *(const void **)&v56[16], *(unsigned __int16 *)&v56[2]);
          *(void *)(v15 + 16) = *(unsigned __int16 *)&v56[2];
          __int16 v47 = (unsigned __int16 *)0xAAAAAAAAAAAAAAAALL;
          unsigned int v46 = -1431655766;
          if ((sub_100042C20(v4[8], (unsigned __int16 **)v15, &v47, &v46) & 1) != 0)
          {
            double v18 = (void (**)(void, void, void, void, void))objc_claimAutoreleasedReturnValue( [v4 packetBufferHandler]);
            double v19 = 0.0;
            if (v7)
            {
              if (qword_1009BE838 != -1) {
                dispatch_once(&qword_1009BE838, &stru_1008F7920);
              }
              double v19 = v5[264] * (double)mach_continuous_time();
            }

            if (v18)
            {
              uint64_t v20 = v46;
              ((void (**)(void, uint64_t, unsigned __int16 *, void, void))v18)[2]( v18,  v15,  v47,  v46,  0LL);
              if (v7)
              {
                if (qword_1009BE838 != -1) {
                  dispatch_once(&qword_1009BE838, &stru_1008F7920);
                }
                uint64_t v43 = mach_continuous_time();
                double v21 = *(double *)&qword_1009BE840;
                __int128 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog ClientChannelManager]( &OBJC_CLASS___IDSFoundationLog,  "ClientChannelManager"));
                if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
                {
                  double v23 = v21 * (double)v43;
                  uint64_t v44 = *(unsigned __int16 *)&v56[2];
                  uint64_t v41 = *(void *)(v15 + 16);
                  id v24 = objc_retainBlock(v18);
                  *(_DWORD *)buf = 134219264;
                  *(void *)__int16 v49 = v44;
                  *(_WORD *)&v49[8] = 2048;
                  *(void *)&v49[10] = v41;
                  *(_WORD *)&v49[18] = 2048;
                  *(void *)&v49[20] = v20;
                  __int16 v50 = 2048;
                  id v51 = v24;
                  __int16 v52 = 2048;
                  double v53 = v19 - v12;
                  __int16 v54 = 2048;
                  double v55 = v23 - v19;
                  _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "_clientChannel_read_datagrams got slot %lu data %lu metadata %lu packetBufferHandler %p slotParseTim e %0.6lf handlerCallTime %0.6lf",  buf,  0x3Eu);
                }

                goto LABEL_44;
              }
            }

            else
            {
              _IDSLinkPacketBufferRelease( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSClientChannelManager.m",  1117LL,  v15);
              __int128 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog ClientChannelManager]( &OBJC_CLASS___IDSFoundationLog,  "ClientChannelManager"));
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315138;
                *(void *)__int16 v49 = "_clientChannel_read_datagrams";
                _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "%s: packetBufferHandler is nil",  buf,  0xCu);
              }

LABEL_44:
              double v4 = v45;
            }

            int v5 = (double *)&unk_1009BE000;
            goto LABEL_40;
          }

          uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog ClientChannelManager]( &OBJC_CLASS___IDSFoundationLog,  "ClientChannelManager"));
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v27 = @"YES";
            if (!v4[8]) {
              uint64_t v27 = @"NO";
            }
            uint64_t v28 = *(void *)(v15 + 16);
            *(_DWORD *)buf = 67109634;
            *(_DWORD *)__int16 v49 = v11;
            *(_WORD *)&v49[4] = 2112;
            *(void *)&v49[6] = v27;
            *(_WORD *)&v49[14] = 2048;
            *(void *)&v49[16] = v28;
            _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "cannot parse slot %d hasMetadata %@ length %ld",  buf,  0x1Cu);
          }

          uint64_t v17 = 1110LL;
        }

        else
        {
          uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog ClientChannelManager]( &OBJC_CLASS___IDSFoundationLog,  "ClientChannelManager"));
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)__int16 v49 = v11;
            _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "channel has no data in slot %d",  buf,  8u);
          }

          uint64_t v17 = 1098LL;
        }
      }

      else
      {
        uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog ClientChannelManager]( &OBJC_CLASS___IDSFoundationLog,  "ClientChannelManager"));
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)__int16 v49 = v11;
          *(_WORD *)&v49[4] = 1024;
          *(_DWORD *)&v49[6] = *(unsigned __int16 *)&v56[2];
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "channel has too much data in slot %d length %u",  buf,  0xEu);
        }

        uint64_t v17 = 1094LL;
      }

      _IDSLinkPacketBufferRelease( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSClientChannelManager.m",  v17,  v15);
LABEL_40:
      if (v9 == ++v11)
      {
        int v29 = os_channel_advance_slot(v3, next_slot);
        if (v29)
        {
          int v30 = v29;
          [v4 osChannelInfoLog];
          uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog ClientChannelManager]( &OBJC_CLASS___IDSFoundationLog,  "ClientChannelManager"));
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t v56 = 67109120;
            *(_DWORD *)&v56[4] = v30;
            _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "os_channel_advance_slot failed for read %d",  v56,  8u);
          }
        }

        int v32 = os_channel_sync(v42, 1LL);
        if (v32)
        {
          int v33 = v32;
          [v4 osChannelInfoLog];
          double v34 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog ClientChannelManager]( &OBJC_CLASS___IDSFoundationLog,  "ClientChannelManager"));
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t v56 = 67109120;
            *(_DWORD *)&v56[4] = v33;
            _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "os_channel_sync for RX failed %d",  v56,  8u);
          }
        }

        if (v7)
        {
          if (qword_1009BE838 != -1) {
            dispatch_once(&qword_1009BE838, &stru_1008F7920);
          }
          uint64_t v35 = mach_continuous_time();
          double v36 = v5[264];
          int v37 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog ClientChannelManager]( &OBJC_CLASS___IDSFoundationLog,  "ClientChannelManager"));
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t v56 = 134218240;
            *(void *)&v56[4] = v9;
            *(_WORD *)&v56[12] = 2048;
            *(double *)&v56[14] = v36 * (double)v35 - v6;
            uint64_t v38 = "_clientChannel_read_datagrams processed %lu slots total time %0.6lf";
            id v39 = v37;
            uint32_t v40 = 22;
            goto LABEL_61;
          }

          goto LABEL_62;
        }

        goto LABEL_63;
      }
    }
  }

  [v4 osChannelInfoLog];
  int v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog ClientChannelManager](&OBJC_CLASS___IDSFoundationLog, "ClientChannelManager"));
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v56 = 0;
    uint64_t v38 = "_clientChannel_read_datagrams gave no slots to read";
    id v39 = v37;
    uint32_t v40 = 2;
LABEL_61:
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, v38, v56, v40);
  }
}
  }

    goto LABEL_45;
  }

  int v7 = (nw_endpoint *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 clientUUID]);
    *(_DWORD *)buf = 138412290;
    *(void *)__int16 v71 = v13;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "no nw_path for client %@", buf, 0xCu);
    goto LABEL_44;
  }
}
}

    id v51 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSKeyTransparencyVerifierErrorDomain",  v23,  0LL));
    goto LABEL_45;
  }

  id v24 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:@"kt-opt-in-results"]);
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 firstObject]);

  if (v25)
  {
    double v55 = v10;
    __int128 v57 = a1;
    theDict = (__CFDictionary *)v13;
    double v53 = v25;
    __int16 v54 = v11;
    uint64_t v64 = 0u;
    __int16 v65 = 0u;
    double v62 = 0u;
    __int16 v63 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:@"uris"]);
    uint64_t v26 = [obj countByEnumeratingWithState:&v62 objects:v82 count:16];
    if (v26)
    {
      uint64_t v27 = v26;
      uint64_t v28 = *(void *)v63;
      do
      {
        for (k = 0LL; k != v27; k = (char *)k + 1)
        {
          if (*(void *)v63 != v28) {
            objc_enumerationMutation(obj);
          }
          int v30 = *(void **)(*((void *)&v62 + 1) + 8LL * (void)k);
          uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v30 objectForKey:@"uri"]);
          int v32 = (void *)objc_claimAutoreleasedReturnValue([v30 objectForKey:@"kt-blob"]);
          int v33 = (void *)objc_claimAutoreleasedReturnValue([v30 objectForKey:@"status"]);
          double v34 = (void *)objc_claimAutoreleasedReturnValue([v30 objectForKey:@"kt-status"]);
          uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138413058;
            uint64_t v75 = v31;
            uint64_t v76 = 2112;
            uint64_t v77 = v32;
            uint64_t v78 = 2112;
            uint64_t v79 = v33;
            uint64_t v80 = 2112;
            uint64_t v81 = v34;
            _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "KT Opt In/Out Result Response. {URI: %@, SMT: %@, IDS Server Status: %@, KT Server Status: %@}",  buf,  0x2Au);
          }

          double v36 = -[IDSURI initWithPrefixedURI:](objc_alloc(&OBJC_CLASS___IDSURI), "initWithPrefixedURI:", v31);
          -[NSMutableArray addObject:](v12, "addObject:", v36);
          if (v32) {
            CFDictionarySetValue(theDict, v36, v32);
          }
        }

        uint64_t v27 = [obj countByEnumeratingWithState:&v62 objects:v82 count:16];
      }

      while (v27);
    }

    int v11 = v54;
    uint64_t v10 = v55;
    __int128 v13 = (NSMutableDictionary *)theDict;
    a1 = v57;
    uint64_t v25 = v53;
  }

  int v37 = *(void *)(a1 + 40);
  uint64_t v38 = objc_alloc(&OBJC_CLASS___IDSKTOptInResult);
  id v39 = 1LL;
  uint32_t v40 = v12;
  uint64_t v41 = v13;
  uint64_t v42 = 0LL;
LABEL_46:
  __int16 v52 = [v38 initWithSuccess:v39 optedInOutURIs:v40 serverSMTByURI:v41 error:v42];
  (*(void (**)(uint64_t, id))(v37 + 16))(v37, v52);
}

  if (!qword_1009C0A10 || (uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:"))) == 0)
  {
    int v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "remoteCallInfoData", v49));
    if (v32)
    {
    }

    else
    {
      double v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remoteCallInfoData]);
      int v37 = v36 == 0LL;

      if (!v37)
      {
LABEL_53:
        uint64_t v31 = 0LL;
        goto LABEL_54;
      }
    }

    int v33 = OSLogHandleForIDSCategory("Warning");
    double v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "callInfoData was nil", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled(v35))
    {
      _IDSWarnV(@"IDSFoundation", @"callInfoData was nil");
      _IDSLogV(0LL, @"IDSFoundation", @"Warning", @"callInfoData was nil");
      _IDSLogTransport(@"Warning", @"IDS", @"callInfoData was nil");
    }

    goto LABEL_53;
  }

  uint64_t v93 = kIDSQRAllocateKey_Recipients;
  uint64_t v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_Recipients, v942, v985, v1028));
  uint64_t v96 = objc_opt_class(&OBJC_CLASS___NSArray, v95);
  uint64_t v97 = objc_opt_isKindOfClass(v94, v96);

  uint64_t v98 = (NSArray *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v93]);
  uint64_t v99 = v98;
  if ((v97 & 1) != 0)
  {
    recipients = self->_recipients;
    self->_recipients = v98;
LABEL_46:

    goto LABEL_53;
  }

  if (v99)
  {
    uint64_t v101 = OSLogHandleForIDSCategory("QRAllocator");
    uint64_t v102 = (os_log_s *)objc_claimAutoreleasedReturnValue(v101);
    if (os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v103 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v93]);
      uint64_t v105 = (id)objc_opt_class(&OBJC_CLASS___NSArray, v104);
      uint64_t v106 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v93]);
      uint64_t v108 = (id)objc_opt_class(v106, v107);
      *(_DWORD *)buf = 138412802;
      v1070 = v103;
      v1071 = 2112;
      v1072 = v105;
      v1073 = 2112;
      v1074 = v108;
      _os_log_impl( (void *)&_mh_execute_header,  v102,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v109))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        recipients = (NSArray *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v93]);
        uint64_t v111 = objc_opt_class(&OBJC_CLASS___NSArray, v110);
        uint64_t v112 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v93]);
        v986 = v111;
        v1029 = objc_opt_class(v112, v113);
        v943 = recipients;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_46;
      }
    }
  }

  __break(1u);
}
    }

    if (v34)
    {
      uint64_t v41 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      uint64_t v42 = v41 | (v33 << 6);
LABEL_65:
      __int16 v47 = (char *)*(id *)(*(void *)(v28 + 48) + 8 * v42);
      if (!v47) {
        goto LABEL_11;
      }
      goto LABEL_66;
    }

    __int16 v49 = v33 + 1;
    if (!__OFADD__(v33, 1LL))
    {
      if (v49 >= v65) {
        goto LABEL_11;
      }
      __int16 v50 = *(void *)(v66 + 8 * v49);
      ++v33;
      if (!v50)
      {
        int v33 = v40 + 2;
        if (v40 + 2 >= v65) {
          goto LABEL_11;
        }
        __int16 v50 = *(void *)(v66 + 8 * v33);
        if (!v50)
        {
          int v33 = v40 + 3;
          if (v40 + 3 >= v65) {
            goto LABEL_11;
          }
          __int16 v50 = *(void *)(v66 + 8 * v33);
          if (!v50)
          {
            int v33 = v40 + 4;
            if (v40 + 4 >= v65) {
              goto LABEL_11;
            }
            __int16 v50 = *(void *)(v66 + 8 * v33);
            if (!v50)
            {
              id v51 = v40 + 5;
              while (v65 != v51)
              {
                __int16 v50 = *(void *)(v66 + 8 * v51++);
                if (v50)
                {
                  int v33 = v51 - 1;
                  goto LABEL_64;
                }
              }

    sub_10040A274(v102, &qword_1009B8E08);
    swift_release(v186);
    goto LABEL_45;
  }

  __int16 v69 = (os_log_s *)Logger.logObject.getter(v68);
  uint64_t v70 = static os_log_type_t.default.getter(v69);
  if (os_log_type_enabled(v69, v70))
  {
    __int16 v71 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v72 = swift_slowAlloc(32LL, -1LL);
    v190[0] = v72;
    *(_DWORD *)__int16 v71 = 136315138;
    v189 = (void *)sub_1003FFBB0(0x2865766965636572LL, 0xED0000293A79656BLL, v190);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, v190, v71 + 4, v71 + 12);
    _os_log_impl((void *)&_mh_execute_header, v69, v70, "%s: skipping because we already have the key", v71, 0xCu);
    swift_arrayDestroy(v72, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v72, -1LL, -1LL);
    swift_slowDealloc(v71, -1LL, -1LL);
  }
}

LABEL_62:
LABEL_63:
}

      v47[2](v47, v20);
      _IDSLinkPacketBufferRelease( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSMultiplexerUtils.m",  175LL,  v20);

      int v7 = v23;
      a2 = v45;
LABEL_63:
      if (!--v9) {
        goto LABEL_76;
      }
    }
  }

  int v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)double v60 = 0;
    uint64_t v31 = "readOSChannel - no slots to read";
    int v32 = v30;
    int v33 = 2;
    goto LABEL_83;
  }

        -[NSMutableArray addObject:](v206, "addObject:", v22, *(void *)&v180);
        continue;
      }

      int v32 = COERCE_DOUBLE((id)-[IDSIDStatusQueryController _IDStatusForURI:fromService:]( v212,  "_IDStatusForURI:fromService:",  v22,  v211));
      int v33 = (void *)objc_claimAutoreleasedReturnValue( -[IDSIDStatusQueryController _lookupDateForURI:fromService:]( v212,  "_lookupDateForURI:fromService:",  v22,  v211));
      double v34 = (void *)objc_claimAutoreleasedReturnValue( -[IDSIDStatusQueryController _validExpiryForURI:fromService:]( v212,  "_validExpiryForURI:fromService:",  v22,  v211));
      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue( -[IDSIDStatusQueryController _negativeTTLForURI:fromService:]( v212,  "_negativeTTLForURI:fromService:",  v22,  v211));
      [v33 doubleValue];
      int v37 = v36;
      -[IDSIDStatusDependencyProvider currentTime](v212->_dependencyProvider, "currentTime");
      id v39 = v38;
      if (v35)
      {
        [v35 doubleValue];
      }

      else
      {
        if (!v34 || !sub_10027B3C0())
        {
          uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(-[IDSIDStatusQueryController peerIDManager](v212, "peerIDManager"));
          [v42 timeToCacheURI:v22 fromURI:v209 service:v211 forStatus:*(void *)&v32];
          uint64_t v41 = v43;

          goto LABEL_27;
        }

        [v34 doubleValue];
      }

      uint64_t v41 = v40;
LABEL_27:
      uint64_t v44 = vabdd_f64(v39, v37);
      uint64_t v45 = -[IDSIDStatusQueryController cachedIDStatusForID:fromURI:fromService:]( v212,  "cachedIDStatusForID:fromURI:fromService:",  v22,  v209,  v211);
      if (v45 != 1 || v44 >= v41)
      {
        if (v207)
        {
          if (!v33 || v44 >= v41)
          {
            if (!v33) {
              -[NSMutableArray addObject:](v201, "addObject:", v22);
            }
            __int16 v59 = OSLogHandleForIDSCategory("IDQuery");
            double v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
            if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138413570;
              *(void *)v235 = v22;
              *(_WORD *)&v235[8] = 1024;
              *(_DWORD *)&v235[10] = LODWORD(v32);
              *(_WORD *)&v235[14] = 2048;
              *(double *)&v235[16] = v37;
              v236 = 2048;
              v237 = v39;
              v238 = 2048;
              v239 = v44;
              v240 = 2048;
              v241 = v41;
              _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  " => Issuing ID query for URIs: %@   (Current status: %d  Last time: %f   Current time: %f  Difference: % f  Needed Difference: %f)",  buf,  0x3Au);
            }

            if (os_log_shim_legacy_logging_enabled(v61))
            {
              MarcoLogMadridLevel( @"IDSDaemonQueries",  0LL,  @"IDQuery",  @" => Issuing ID query for URIs: %@   (Current status: %d  Last time: %f   Current time: %f  Difference: %f  Needed Difference: %f)");
              v190 = v44;
              v188 = v37;
              v189 = v39;
              v180 = *(double *)&v22;
              v187 = v32;
              IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @" => Issuing ID query for URIs: %@   (Current status: %d  Last time: %f   Current time: %f  Difference: %f  Needed Difference: %f)");
              if ((_IMWillLog(@"IDQuery", v62) & 1) != 0)
              {
                v190 = v44;
                v188 = v37;
                v189 = v39;
                v180 = *(double *)&v22;
                v187 = v32;
                _IMAlwaysLog( 0LL,  @"IDQuery",  @" => Issuing ID query for URIs: %@   (Current status: %d  Last time: %f   Current time: %f  Difference: %f  Needed Difference: %f)");
              }
            }

            goto LABEL_62;
          }

          if (v45)
          {
            __int16 v47 = OSLogHandleForIDSCategory("IDQuery");
            unint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
            if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67110144;
              *(_DWORD *)v235 = LODWORD(v32);
              *(_WORD *)&v235[4] = 2048;
              *(double *)&v235[6] = v39;
              *(_WORD *)&v235[14] = 2048;
              *(double *)&v235[16] = v37;
              v236 = 2048;
              v237 = v44;
              v238 = 2048;
              v239 = v41;
              _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  " => Not looking up... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f",  buf,  0x30u);
            }

            if (os_log_shim_legacy_logging_enabled(v49))
            {
              MarcoLogMadridLevel( @"IDSDaemonQueries",  0LL,  @"IDQuery",  @" => Not looking up... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f");
              v189 = v44;
              v190 = v41;
              v187 = v39;
              v188 = v37;
              v180 = v32;
              IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @" => Not looking up... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f");
              if ((_IMWillLog(@"IDQuery", v50) & 1) != 0)
              {
                v189 = v44;
                v190 = v41;
                v187 = v39;
                v188 = v37;
                v180 = v32;
                _IMAlwaysLog( 0LL,  @"IDQuery",  @" => Not looking up... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f");
              }
            }
          }

          else
          {
            __int16 v63 = OSLogHandleForIDSCategory("IDQuery");
            uint64_t v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
            if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67110144;
              *(_DWORD *)v235 = LODWORD(v32);
              *(_WORD *)&v235[4] = 2048;
              *(double *)&v235[6] = v39;
              *(_WORD *)&v235[14] = 2048;
              *(double *)&v235[16] = v37;
              v236 = 2048;
              v237 = v44;
              v238 = 2048;
              v239 = v41;
              _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  " => We can't look up, but can piggyback... current status: %d  current time: %f   last looked up: %f  di fference: %f  difference needed: %f",  buf,  0x30u);
            }

            if (os_log_shim_legacy_logging_enabled(v65))
            {
              MarcoLogMadridLevel( @"IDSDaemonQueries",  0LL,  @"IDQuery",  @" => We can't look up, but can piggyback... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f");
              v189 = v44;
              v190 = v41;
              v187 = v39;
              v188 = v37;
              v180 = v32;
              IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @" => We can't look up, but can piggyback... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f");
              if ((_IMWillLog(@"IDQuery", v66) & 1) != 0)
              {
                v189 = v44;
                v190 = v41;
                v187 = v39;
                v188 = v37;
                v180 = v32;
                _IMAlwaysLog( 0LL,  @"IDQuery",  @" => We can't look up, but can piggyback... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f");
              }
            }

            -[NSMutableArray addObject:](v202, "addObject:", v22, *(void *)&v180);
          }
        }

        else
        {
          double v55 = OSLogHandleForIDSCategory("IDQuery");
          uint64_t v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
          if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67110144;
            *(_DWORD *)v235 = LODWORD(v32);
            *(_WORD *)&v235[4] = 2048;
            *(double *)&v235[6] = v39;
            *(_WORD *)&v235[14] = 2048;
            *(double *)&v235[16] = v37;
            v236 = 2048;
            v237 = v44;
            v238 = 2048;
            v239 = v41;
            _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEFAULT,  " => Not looking up, query not allowed... current status: %d  current time: %f   last looked up: %f  differ ence: %f  difference needed: %f",  buf,  0x30u);
          }

          if (os_log_shim_legacy_logging_enabled(v57))
          {
            MarcoLogMadridLevel( @"IDSDaemonQueries",  0LL,  @"IDQuery",  @" => Not looking up, query not allowed... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f");
            v189 = v44;
            v190 = v41;
            v187 = v39;
            v188 = v37;
            v180 = v32;
            IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @" => Not looking up, query not allowed... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f");
            if ((_IMWillLog(@"IDQuery", v58) & 1) != 0)
            {
              v189 = v44;
              v190 = v41;
              v187 = v39;
              v188 = v37;
              v180 = v32;
              _IMAlwaysLog( 0LL,  @"IDQuery",  @" => Not looking up, query not allowed... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f");
            }
          }
        }
      }

      else if (([v211 isEqualToString:@"com.apple.madrid"] & 1) == 0 {
             && ([v211 isEqualToString:@"com.apple.private.alloy.willow"] & 1) == 0
      }
             && ([v211 isEqualToString:@"com.apple.private.alloy.biz"] & 1) == 0)
      {
        id v51 = OSLogHandleForIDSCategory("IDQuery");
        __int16 v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  " => Not looking up... status is Valid",  buf,  2u);
        }

        if (os_log_shim_legacy_logging_enabled(v53))
        {
          MarcoLogMadridLevel( @"IDSDaemonQueries",  0LL,  @"IDQuery",  @" => Not looking up... status is Valid");
          IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @" => Not looking up... status is Valid");
          if ((_IMWillLog(@"IDQuery", v54) & 1) != 0) {
            _IMAlwaysLog(0LL, @"IDQuery", @" => Not looking up... status is Valid");
          }
        }

        v204 = 1;
      }
    }

    double v19 = [obj countByEnumeratingWithState:&v227 objects:v242 count:16];
  }

  while (v19);
LABEL_79:

  -[NSRecursiveLock unlock](v212->_lock, "unlock");
  v221[0] = _NSConcreteStackBlock;
  v221[1] = 3221225472LL;
  v221[2] = sub_10027B428;
  v221[3] = &unk_1008FF3B8;
  v208 = v209;
  v222 = v208;
  v223 = v212;
  uint64_t v70 = v211;
  v224 = v70;
  v192 = v196;
  v226 = v192;
  v194 = v18;
  v225 = v194;
  v193 = objc_retainBlock(v221);
  __int16 v71 = COERCE_DOUBLE(v70);
  uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance"));
  v198 = (void *)objc_claimAutoreleasedReturnValue([v72 serviceWithIdentifier:*(void *)&v71]);

  __int16 v73 = v71;
  if ([v198 adHocServiceType])
  {
    uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance"));
    uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "primaryServiceForAdhocServiceType:", objc_msgSend(v198, "adHocServiceType")));

    __int16 v73 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue([v75 identifier]));
  }

  startQueryDateByTopLevelService = v212->_startQueryDateByTopLevelService;
  if (!startQueryDateByTopLevelService)
  {
    CFMutableStringRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    uint64_t v78 = v212->_startQueryDateByTopLevelService;
    v212->_startQueryDateByTopLevelService = (NSMutableDictionary *)Mutable;

    startQueryDateByTopLevelService = v212->_startQueryDateByTopLevelService;
  }

  v205 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( startQueryDateByTopLevelService,  "objectForKeyedSubscript:",  *(void *)&v73,  *(void *)&v180));
  [v205 timeIntervalSinceNow];
  uint64_t v80 = v79;
  uint64_t v81 = sub_10027B998(*(void **)&v73);
  uint64_t v82 = fabs(v80);
  if (v205)
  {
    if (v82 > (double)(3600 * v81))
    {
      uint64_t v83 = OSLogHandleForIDSCategory("IDQuery");
      uint64_t v84 = (os_log_s *)objc_claimAutoreleasedReturnValue(v83);
      if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v85 = sub_10027B998(*(void **)&v73);
        *(_DWORD *)buf = 134217984;
        *(void *)v235 = v85;
        _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_DEFAULT,  "Over %ld hour(s), resetting query per hour(s) count",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v86))
      {
        sub_10027B998(*(void **)&v73);
        MarcoLogMadridLevel( @"IDSDaemonQueries",  0LL,  @"IDQuery",  @"Over %ld hour(s), resetting query per hour(s) count");
        v181 = (void *)(int)sub_10027B998(*(void **)&v73);
        IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"Over %ld hour(s), resetting query per hour(s) count");
        if ((_IMWillLog(@"IDQuery", v87) & 1) != 0)
        {
          v181 = (void *)(int)sub_10027B998(*(void **)&v73);
          _IMAlwaysLog(0LL, @"IDQuery", @"Over %ld hour(s), resetting query per hour(s) count");
        }
      }

      numQueriesThisHourByTopLevelService = v212->_numQueriesThisHourByTopLevelService;
      if (!numQueriesThisHourByTopLevelService)
      {
        uint64_t v89 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        uint64_t v90 = v212->_numQueriesThisHourByTopLevelService;
        v212->_numQueriesThisHourByTopLevelService = (NSMutableDictionary *)v89;

        numQueriesThisHourByTopLevelService = v212->_numQueriesThisHourByTopLevelService;
      }

      -[NSMutableDictionary setObject:forKeyedSubscript:]( numQueriesThisHourByTopLevelService,  "setObject:forKeyedSubscript:",  &off_1009476B0,  *(void *)&v73,  v181);
      reportedRateLimitedThisHour = v212->_reportedRateLimitedThisHour;
      if (!reportedRateLimitedThisHour)
      {
        uint64_t v92 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
        uint64_t v93 = v212->_reportedRateLimitedThisHour;
        v212->_reportedRateLimitedThisHour = v92;

        reportedRateLimitedThisHour = v212->_reportedRateLimitedThisHour;
      }

      -[NSMutableSet removeObject:](reportedRateLimitedThisHour, "removeObject:", *(void *)&v73);
      goto LABEL_95;
    }
  }

  else
  {
LABEL_95:
    v205 = (void *)objc_claimAutoreleasedReturnValue(-[IDSIDStatusDependencyProvider currentDate](v212->_dependencyProvider, "currentDate"));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v212->_startQueryDateByTopLevelService,  "setObject:forKeyedSubscript:",  v205,  *(void *)&v73);
    uint64_t v94 = OSLogHandleForIDSCategory("IDQuery");
    uint64_t v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
    if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)v235 = v205;
      _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "New start query date %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v96))
    {
      MarcoLogMadridLevel(@"IDSDaemonQueries", 0LL, @"IDQuery", @"New start query date %@");
      v181 = v205;
      IMLogString(0LL, @"IDSIDQuery", @"IDS", @"IDQuery", @"New start query date %@");
      if ((_IMWillLog(@"IDQuery", v97) & 1) != 0)
      {
        v181 = v205;
        _IMAlwaysLog(0LL, @"IDQuery", @"New start query date %@");
      }
    }
  }

  uint64_t v98 = objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v212->_numQueriesThisHourByTopLevelService,  "objectForKeyedSubscript:",  *(void *)&v73,  v181));
  uint64_t v99 = (void *)v98;
  uint64_t v100 = &off_1009476B0;
  if (v98) {
    uint64_t v100 = (_UNKNOWN **)v98;
  }
  v200 = v100;

  uint64_t v101 = [v200 intValue];
  v203 = *(id *)&v73;
  uint64_t v102 = (void *)objc_claimAutoreleasedReturnValue( +[IDSServerBag sharedInstanceForBagType:]( &OBJC_CLASS___IDSServerBag,  "sharedInstanceForBagType:",  1LL));
  uint64_t v103 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"device-queries-per-hour-%@",  v203));
  uint64_t v104 = (void *)objc_claimAutoreleasedReturnValue([v102 objectForKey:v103]);

  if (v104)
  {
    uint64_t v105 = [v104 intValue];
  }

  else if ([v203 isEqualToString:@"com.apple.private.alloy.arcade"])
  {
    uint64_t v105 = 1000;
  }

  else
  {
    uint64_t v105 = 200;
  }

  if (v101 < v105
    || a10
    && ((uint64_t v107 = (void *)objc_claimAutoreleasedReturnValue( +[IDSServerBag sharedInstanceForBagType:]( IDSServerBag,  "sharedInstanceForBagType:",  0)),  v108 = (void *)objc_claimAutoreleasedReturnValue([v107 objectForKey:@"client-query-allow-bypass-limit"]),  v107,  !v108)
     || (uint64_t v109 = [v108 BOOLValue], v108, v109)))
  {
    if (-[NSMutableArray count](v206, "count")) {
      uint64_t v106 = 1;
    }
    else {
      uint64_t v106 = -[NSMutableArray count](v202, "count") != 0LL;
    }
    if (((v204 ^ 1) & 1) == 0 && (!a10 || !v106))
    {
      __int128 v130 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue( -[IDSIDStatusQueryController _cachedResultsForURIs:fromURI:fromService:]( v212,  "_cachedResultsForURIs:fromURI:fromService:",  v194,  v208,  *(void *)&v71));
      __int128 v131 = OSLogHandleForIDSCategory("IDQuery");
      __int128 v132 = (os_log_s *)objc_claimAutoreleasedReturnValue(v131);
      if (os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)v235 = v130;
        _os_log_impl( (void *)&_mh_execute_header,  v132,  OS_LOG_TYPE_DEFAULT,  "We have at least one valid result, returning cached results %@",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v133))
      {
        MarcoLogMadridLevel( @"IDSDaemonQueries",  0LL,  @"IDQuery",  @"We have at least one valid result, returning cached results %@");
        v182 = v130;
        IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"We have at least one valid result, returning cached results %@");
        if ((_IMWillLog(@"IDQuery", v134) & 1) != 0)
        {
          v182 = v130;
          _IMAlwaysLog(0LL, @"IDQuery", @"We have at least one valid result, returning cached results %@");
        }
      }

      -[IDSIDStatusQueryController _sendIDStatusChanges:forService:URI:success:error:]( v212,  "_sendIDStatusChanges:forService:URI:success:error:",  v130,  *(void *)&v71,  v208,  1LL,  0LL,  v182);
      if (v192) {
        v192[2]();
      }
LABEL_205:

      goto LABEL_206;
    }

    v219 = 0u;
    v220 = 0u;
    v217 = 0u;
    v218 = 0u;
    __int128 v135 = v201;
    __int128 v136 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v135,  "countByEnumeratingWithState:objects:count:",  &v217,  v233,  16LL);
    if (v136)
    {
      __int128 v137 = *(void *)v218;
      do
      {
        for (j = 0LL; j != v136; j = (char *)j + 1)
        {
          if (*(void *)v218 != v137) {
            objc_enumerationMutation(v135);
          }
          __int128 v139 = *(void *)(*((void *)&v217 + 1) + 8LL * (void)j);
          __int128 v140 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 0LL));
          __int128 v141 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v140,  v139));

          -[IDSIDStatusQueryController _updateCacheWithStatusUpdates:fromURI:fromService:success:hadError:negativeCacheHints:]( v212,  "_updateCacheWithStatusUpdates:fromURI:fromService:success:hadError:negativeCacheHints:",  v141,  v208,  *(void *)&v71,  0LL,  0LL,  0LL);
        }

        __int128 v136 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v135,  "countByEnumeratingWithState:objects:count:",  &v217,  v233,  16LL);
      }

      while (v136);
    }

    if (v197)
    {
      v142 = sub_10027B3C0();
      if (-[NSMutableArray count](v206, "count") || !-[NSMutableArray count](v202, "count"))
      {
        v143 = (void *)objc_claimAutoreleasedReturnValue(-[IDSIDStatusQueryController peerIDManager](v212, "peerIDManager"));
        v144 = v143;
        v145 = @"StatusLookup";
        if (v195) {
          v145 = v195;
        }
        LOBYTE(v182) = a9;
        __int128 v128 = [v143 startQueryForURIs:v206 fromIdentity:v197 fromURI:v208 fromService:*(void *)&v71 forSending:1 forRefresh:v142 isForced:v182 reason:v145  completionBlock:v193];

        if (!v212->_numQueriesThisHourByTopLevelService)
        {
          __int16 v146 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          v147 = v212->_numQueriesThisHourByTopLevelService;
          v212->_numQueriesThisHourByTopLevelService = (NSMutableDictionary *)v146;
        }

        __int16 v148 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  (char *)-[NSMutableArray count](v206, "count") + (int)[v200 intValue]));
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v212->_numQueriesThisHourByTopLevelService,  "setObject:forKeyedSubscript:",  v148,  v203);

        v149 = OSLogHandleForIDSCategory("IDQuery");
        v150 = (os_log_s *)objc_claimAutoreleasedReturnValue(v149);
        if (os_log_type_enabled(v150, OS_LOG_TYPE_DEFAULT))
        {
          v151 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v212->_numQueriesThisHourByTopLevelService,  "objectForKeyedSubscript:",  v203));
          *(_DWORD *)buf = 138412546;
          *(void *)v235 = v151;
          *(_WORD *)&v235[8] = 2112;
          *(void *)&v235[10] = v203;
          _os_log_impl( (void *)&_mh_execute_header,  v150,  OS_LOG_TYPE_DEFAULT,  "We're at %@ queries for this hour for service: %@",  buf,  0x16u);
        }

        if (os_log_shim_legacy_logging_enabled(v152))
        {
          v183 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v212->_numQueriesThisHourByTopLevelService,  "objectForKeyedSubscript:",  v203));
          MarcoLogMadridLevel( @"IDSDaemonQueries",  0LL,  @"IDQuery",  @"We're at %@ queries for this hour for service: %@");

          v184 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v212->_numQueriesThisHourByTopLevelService,  "objectForKeyedSubscript:",  v203,  v183,  v203));
          IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"We're at %@ queries for this hour for service: %@");

          if ((_IMWillLog(@"IDQuery", v153) & 1) != 0)
          {
            v185 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v212->_numQueriesThisHourByTopLevelService,  "objectForKeyedSubscript:",  v203,  v184,  v203));
            _IMAlwaysLog(0LL, @"IDQuery", @"We're at %@ queries for this hour for service: %@");
          }
        }

        goto LABEL_192;
      }

      if (-[NSMutableArray count](v202, "count"))
      {
        v158 = -[IDSPeerIDQueryContext initWithSending:refresh:messaging:resultExpected:preventNewQuery:isForced:]( objc_alloc(&OBJC_CLASS___IDSPeerIDQueryContext),  "initWithSending:refresh:messaging:resultExpected:preventNewQuery:isForced:",  1LL,  v142,  0LL,  0LL,  1LL,  a9);
        v159 = (void *)objc_claimAutoreleasedReturnValue(-[IDSIDStatusQueryController peerIDManager](v212, "peerIDManager"));
        v160 = v159;
        if (v195) {
          v161 = v195;
        }
        else {
          v161 = @"StatusLookupPiggyback";
        }
        __int128 v128 = [v159 startQueryForURIs:v202 fromIdentity:v197 fromURI:v208 fromService:*(void *)&v71 context:v158 reason:v161 completionBlock:v193];

        if (((v128 | v204 ^ 1) & 1) == 0)
        {
          v162 = (void *)objc_claimAutoreleasedReturnValue( -[IDSIDStatusQueryController _cachedResultsForURIs:fromURI:fromService:]( v212,  "_cachedResultsForURIs:fromURI:fromService:",  v194,  v208,  *(void *)&v71));
          v163 = OSLogHandleForIDSCategory("IDQuery");
          v164 = (os_log_s *)objc_claimAutoreleasedReturnValue(v163);
          if (os_log_type_enabled(v164, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)v235 = v162;
            _os_log_impl( (void *)&_mh_execute_header,  v164,  OS_LOG_TYPE_DEFAULT,  "We have at least one valid result, returning cached results %@",  buf,  0xCu);
          }

          if (os_log_shim_legacy_logging_enabled(v165))
          {
            MarcoLogMadridLevel( @"IDSDaemonQueries",  0LL,  @"IDQuery",  @"We have at least one valid result, returning cached results %@");
            v186 = v162;
            IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"We have at least one valid result, returning cached results %@");
            if ((_IMWillLog(@"IDQuery", v166) & 1) != 0)
            {
              v186 = v162;
              _IMAlwaysLog( 0LL,  @"IDQuery",  @"We have at least one valid result, returning cached results %@");
            }
          }

          -[IDSIDStatusQueryController _sendIDStatusChanges:forService:URI:success:error:]( v212,  "_sendIDStatusChanges:forService:URI:success:error:",  v162,  *(void *)&v71,  v208,  1LL,  0LL,  v186);
          if (v192) {
            ((void (*)(void (**)(void), void *, id, id, uint64_t, void))v192[2])( v192,  v162,  v208,  *(id *)&v71,  1LL,  0LL);
          }
        }

        goto LABEL_192;
      }
    }

    else
    {
      if (v212->_allowProxyQueries && -[NSMutableArray count](v206, "count"))
      {
        v154 = OSLogHandleForIDSCategory("IDQuery");
        v155 = (os_log_s *)objc_claimAutoreleasedReturnValue(v154);
        if (os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v155,  OS_LOG_TYPE_DEFAULT,  "Device does not have a cert, attempting to proxy the query",  buf,  2u);
        }

        if (os_log_shim_legacy_logging_enabled(v156))
        {
          MarcoLogMadridLevel( @"IDSDaemonQueries",  0LL,  @"IDQuery",  @"Device does not have a cert, attempting to proxy the query");
          IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"Device does not have a cert, attempting to proxy the query");
          if ((_IMWillLog(@"IDQuery", v157) & 1) != 0) {
            _IMAlwaysLog(0LL, @"IDQuery", @"Device does not have a cert, attempting to proxy the query");
          }
        }

        __int128 v130 = -[IDSIDStatusDependencyProvider newRemoteCredential](v212->_dependencyProvider, "newRemoteCredential");
        v213[0] = _NSConcreteStackBlock;
        v213[1] = 3221225472LL;
        v213[2] = sub_10027BA58;
        v213[3] = &unk_1008FF3E0;
        v213[4] = v212;
        v214 = v208;
        v215 = *(id *)&v71;
        v216 = v192;
        [v130 requestIDStatusForURIs:obj service:v215 lightQuery:v191 allowQuery:v207 completionBlock:v213];

        goto LABEL_205;
      }

      v167 = OSLogHandleForIDSCategory("IDQuery");
      v168 = (os_log_s *)objc_claimAutoreleasedReturnValue(v167);
      if (os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT))
      {
        v169 = @"YES";
        if (!v212->_allowProxyQueries) {
          v169 = @"NO";
        }
        *(_DWORD *)buf = 138412546;
        *(void *)v235 = v169;
        *(_WORD *)&v235[8] = 2112;
        *(void *)&v235[10] = v206;
        _os_log_impl( (void *)&_mh_execute_header,  v168,  OS_LOG_TYPE_DEFAULT,  "Device does not have a cert {_allowProxyQueries: %@, URIsToQuery: %@}",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v170))
      {
        MarcoLogMadridLevel( @"IDSDaemonQueries",  0LL,  @"IDQuery",  @"Device does not have a cert {_allowProxyQueries: %@, URIsToQuery: %@}");
        IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"Device does not have a cert {_allowProxyQueries: %@, URIsToQuery: %@}");
        if ((_IMWillLog(@"IDQuery", v171) & 1) != 0) {
          _IMAlwaysLog( 0LL,  @"IDQuery",  @"Device does not have a cert {_allowProxyQueries: %@, URIsToQuery: %@}");
        }
      }
    }

    __int128 v128 = 0;
LABEL_192:
    __int128 v129 = 0;
    goto LABEL_193;
  }

  uint64_t v110 = OSLogHandleForIDSCategory("IDQuery");
  uint64_t v111 = (os_log_s *)objc_claimAutoreleasedReturnValue(v110);
  if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    *(void *)v235 = v200;
    *(_WORD *)&v235[8] = 2112;
    *(double *)&v235[10] = v71;
    _os_log_impl( (void *)&_mh_execute_header,  v111,  OS_LOG_TYPE_DEFAULT,  "We're at %@ queries for this hour for service: %@, can't do more",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v112))
  {
    MarcoLogMadridLevel( @"IDSDaemonQueries",  0LL,  @"IDQuery",  @"We're at %@ queries for this hour for service: %@, can't do more");
    v182 = v200;
    v187 = v71;
    IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"We're at %@ queries for this hour for service: %@, can't do more");
    if ((_IMWillLog(@"IDQuery", v113) & 1) != 0)
    {
      v182 = v200;
      v187 = v71;
      _IMAlwaysLog(0LL, @"IDQuery", @"We're at %@ queries for this hour for service: %@, can't do more");
    }
  }

  uint64_t v114 = v212->_reportedRateLimitedThisHour;
  if (!v114)
  {
    uint64_t v115 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    uint64_t v116 = v212->_reportedRateLimitedThisHour;
    v212->_reportedRateLimitedThisHour = v115;

    uint64_t v114 = v212->_reportedRateLimitedThisHour;
  }

  if ((-[NSMutableSet containsObject:](v114, "containsObject:", v203, v182, *(void *)&v187) & 1) == 0)
  {
    -[NSMutableSet addObject:](v212->_reportedRateLimitedThisHour, "addObject:", v203);
    if (+[IDSAutoBugCapture isSupported](&OBJC_CLASS___IDSAutoBugCapture, "isSupported"))
    {
      uint64_t v117 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"(%@)", v203));
      +[IDSAutoBugCapture triggerCaptureWithEvent:context:completion:]( &OBJC_CLASS___IDSAutoBugCapture,  "triggerCaptureWithEvent:context:completion:",  103LL,  v117,  &stru_1008FF400);
    }

    uint64_t v118 = objc_alloc(&OBJC_CLASS___IDSQueryRateLimitedMetric);
    uint64_t v119 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v82));
    uint64_t v120 = [v118 initWithTopLevelService:v203 count:v200 timeSinceStart:v119];

    uint64_t v121 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCoreAnalyticsLogger defaultLogger](&OBJC_CLASS___IDSCoreAnalyticsLogger, "defaultLogger"));
    [v121 logMetric:v120];

    uint64_t v122 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v123 = *(id *)&v71;
    if (v123) {
      CFDictionarySetValue((CFMutableDictionaryRef)v122, @"service", v123);
    }

    uint64_t v124 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
    if (v124) {
      CFDictionarySetValue((CFMutableDictionaryRef)v122, @"isRateLimited", v124);
    }

    uint64_t v125 = v200;
    CFDictionarySetValue((CFMutableDictionaryRef)v122, @"numQueriesThisHour", v125);

    __int128 v126 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v82));
    if (v126) {
      CFDictionarySetValue((CFMutableDictionaryRef)v122, @"timeSinceStart", v126);
    }

    __int128 v127 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    [v127 logHardFailureForEventNamed:@"IDSQueryMetric" withAttributes:v122];
  }

  __int128 v128 = 0;
  __int128 v129 = 1;
LABEL_193:
  if (((v128 | v204) & 1) == 0)
  {
    __int128 v130 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue( -[IDSIDStatusQueryController _cachedResultsForURIs:fromURI:fromService:]( v212,  "_cachedResultsForURIs:fromURI:fromService:",  v194,  v208,  *(void *)&v71));
    v172 = OSLogHandleForIDSCategory("IDQuery");
    v173 = (os_log_s *)objc_claimAutoreleasedReturnValue(v172);
    if (os_log_type_enabled(v173, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)v235 = v130;
      _os_log_impl( (void *)&_mh_execute_header,  v173,  OS_LOG_TYPE_DEFAULT,  "We didn't query anything, returning cached results %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v174))
    {
      MarcoLogMadridLevel( @"IDSDaemonQueries",  0LL,  @"IDQuery",  @"We didn't query anything, returning cached results %@");
      IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"We didn't query anything, returning cached results %@");
      if ((_IMWillLog(@"IDQuery", v175) & 1) != 0) {
        _IMAlwaysLog(0LL, @"IDQuery", @"We didn't query anything, returning cached results %@");
      }
    }

    v176 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Query on the service %@ is being rate limited { numQueriesThisHour: %@ }",  *(void *)&v71,  v200));
    v177 = (void *)v176;
    if (v129)
    {
      v231 = NSLocalizedDescriptionKey;
      v232 = v176;
      v178 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v232,  &v231,  1LL));
      v179 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSPeerIDManagerErrorDomain,  5LL,  v178));
    }

    else
    {
      v179 = 0LL;
    }

    -[IDSIDStatusQueryController _sendIDStatusChanges:forService:URI:success:error:]( v212,  "_sendIDStatusChanges:forService:URI:success:error:",  v130,  *(void *)&v71,  v208,  1LL,  v179);
    if (v192) {
      v192[2]();
    }

    goto LABEL_205;
  }

  __int128 v135 = kIDSQRAllocateKey_ActiveRelaySessionToken;
  __int128 v136 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_ActiveRelaySessionToken, v944, v987, v1030));
  __int128 v138 = objc_opt_class(&OBJC_CLASS___NSData, v137);
  __int128 v139 = objc_opt_isKindOfClass(v136, v138);

  __int128 v140 = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v135]);
  __int128 v141 = v140;
  if ((v139 & 1) != 0)
  {
    activeRelaySessionToken = self->_activeRelaySessionToken;
    self->_activeRelaySessionToken = v140;
LABEL_64:

    goto LABEL_71;
  }

  if (v141)
  {
    v143 = OSLogHandleForIDSCategory("QRAllocator");
    v144 = (os_log_s *)objc_claimAutoreleasedReturnValue(v143);
    if (os_log_type_enabled(v144, OS_LOG_TYPE_DEBUG))
    {
      v145 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v135]);
      v147 = (id)objc_opt_class(&OBJC_CLASS___NSData, v146);
      __int16 v148 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v135]);
      v150 = (id)objc_opt_class(v148, v149);
      *(_DWORD *)buf = 138412802;
      v1070 = v145;
      v1071 = 2112;
      v1072 = v147;
      v1073 = 2112;
      v1074 = v150;
      _os_log_impl( (void *)&_mh_execute_header,  v144,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v151))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        activeRelaySessionToken = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v135]);
        v153 = objc_opt_class(&OBJC_CLASS___NSData, v152);
        v154 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v135]);
        v988 = v153;
        v1031 = objc_opt_class(v154, v155);
        v945 = activeRelaySessionToken;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_64;
      }
    }
  }

void sub_100043C48(uint64_t a1)
{
  id v2 = objc_retainBlock(*(id *)(*(void *)(a1 + 32) + 136LL));
  uint64_t v3 = v2;
  if (v2)
  {
    (*((void (**)(id))v2 + 2))(v2);
  }

  else
  {
    double v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog ClientChannelManager](&OBJC_CLASS___IDSFoundationLog, "ClientChannelManager"));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412290;
      uint64_t v7 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "clientChannel %@ has no write handler - suspend",  (uint8_t *)&v6,  0xCu);
    }

    IDSTransportThreadSuspendSocket(*(unsigned int *)(a1 + 40), 2LL);
  }
}

void sub_1000441BC(_Unwind_Exception *a1)
{
}

void sub_10004483C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_unfair_lock_t lock)
{
}

void sub_100044AF4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[IDSDSessionController sharedInstance](&OBJC_CLASS___IDSDSessionController, "sharedInstance"));
  [v2 cleanupSessionWithChannelDestination:*(void *)(a1 + 32) clientChannelUUID:*(void *)(a1 + 40)];
}

void sub_100044B38(uint64_t a1, uint64_t a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t fd = os_channel_get_fd(*(void *)(*(void *)(a1 + 32) + 88LL), a2);
    IDSTransportThreadRemoveSocket(fd);
    os_channel_destroy(*(void *)(*(void *)(a1 + 32) + 88LL), v4);
    *(void *)(*(void *)(a1 + 32) + 88LL) = 0LL;
    os_channel_attr_destroy(*(void *)(*(void *)(a1 + 32) + 96LL), v5);
    *(void *)(*(void *)(a1 + 32) + 96LL) = 0LL;
    *(void *)(*(void *)(a1 + 32) + 104LL) = 0LL;
    os_nexus_controller_free_provider_instance(*(void *)(*(void *)(a1 + 40) + 72LL), *(void *)(a1 + 32) + 32LL);
    *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 1;
    id v9 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) packetBufferHandler]);
    int v6 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"client %@ closed connection",  *(void *)(a1 + 48));
    uint64_t v7 = -[NSDictionary initWithObjectsAndKeys:]( objc_alloc(&OBJC_CLASS___NSDictionary),  "initWithObjectsAndKeys:",  v6,  NSLocalizedDescriptionKey,  0LL);
    unsigned int v8 = -[NSError initWithDomain:code:userInfo:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithDomain:code:userInfo:",  @"ClientChannel",  9001LL,  v7);
    if (v9) {
      (*((void (**)(id, void, void, void, NSError *))v9 + 2))(v9, 0LL, 0LL, 0LL, v8);
    }
  }

void sub_100044E40(_Unwind_Exception *a1)
{
}

void sub_100045088(_Unwind_Exception *a1)
{
}

void sub_100045168(id a1)
{
  mach_timebase_info info = (mach_timebase_info)0xAAAAAAAAAAAAAAAALL;
  mach_timebase_info(&info);
  LODWORD(v2) = info.denom;
  LODWORD(v1) = info.numer;
  *(double *)&qword_1009BE840 = (double)v1 / (double)v2 / 1000000000.0;
}

uint64_t sub_100045540(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v2 = *(void *)(result + 32);
    uint64_t v3 = *(unsigned int *)(v2 + 136);
    void v4[4] = v2;
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_1000455B8;
    v5[3] = &unk_1008F6010;
    void v5[4] = v2;
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_1000455F0;
    v4[3] = &unk_1008F6010;
    return IDSTransportThreadAddSocketWithPriority(v3, v5, v4, *(void *)(v2 + 160));
  }

  return result;
}

void sub_1000455B8(uint64_t a1)
{
}

void sub_1000455F0(uint64_t a1)
{
}

void sub_100045974(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 40LL));
    [*(id *)(a1 + 32) _endSession];
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 40LL));
  }

void sub_100045BDC(uint64_t a1, void *a2)
{
  id v9 = a2;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSDictionary, v3);
  char isKindOfClass = objc_opt_isKindOfClass(v9, v4);
  int v6 = *(void **)(a1 + 32);
  if ((isKindOfClass & 1) != 0)
  {
    uint64_t v7 = objc_claimAutoreleasedReturnValue([v9 objectForKey:@"originalMessage"]);

    id v8 = (id)v7;
  }

  else
  {
    id v8 = v9;
  }

  id v10 = v8;
  [v6 addObject:v8];
}

void sub_100045D90(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

void sub_100046354(uint64_t a1, void *a2, uint64_t a3)
{
  id v13 = a2;
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___IDSSocketPairOTRMessage, v5);
  if ((objc_opt_isKindOfClass(v13, v6) & 1) != 0)
  {
    id v8 = v13;
    if ([v8 shouldEncrypt]
      && *(_DWORD *)(a1 + 40) == [v8 protectionClass])
    {
      [*(id *)(a1 + 32) addIndex:a3];
    }

void sub_10004646C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "connectionDidReachInFlightMessageLowWaterMark:") & 1) != 0) {
    [v3 connectionDidReachInFlightMessageLowWaterMark:*(void *)(a1 + 32)];
  }
}

void sub_100046C94(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___IDSSocketPairDataMessage, v4);
  if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0
    && (objc_opt_respondsToSelector(v6, "connection:didReceiveData:withIdentifier:") & 1) != 0)
  {
    objc_msgSend( v6,  "connection:didReceiveData:withIdentifier:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  objc_msgSend(*(id *)(a1 + 32), "sequenceNumber"));
  }

  if ((objc_opt_respondsToSelector(v6, "connection:didReceiveDataMessage:") & 1) != 0) {
    [v6 connection:*(void *)(a1 + 40) didReceiveDataMessage:*(void *)(a1 + 32)];
  }
}

LABEL_55:
    -[IDSSocketPairConnection _endSession](self, "_endSession", *(void *)&v49);
    return;
  }

  if (qword_1009BE848 != -1) {
    dispatch_once(&qword_1009BE848, &stru_1008F7A08);
  }
  self->_lastSocketActivityTime = *(double *)&qword_1009BE850 * (double)mach_continuous_time();
  if (self->_notifyWhenConnectionReceivesBytes)
  {
    self->_notifyWhenConnectionReceivesBytes = 0;
    v51[0] = _NSConcreteStackBlock;
    v51[1] = 3221225472LL;
    v51[2] = sub_100047644;
    v51[3] = &unk_1008F79C0;
    v51[4] = self;
    -[IDSSocketPairConnection _callDelegateWithBlock:](self, "_callDelegateWithBlock:", v51);
  }

  self->_bytesReceived += v3;
  if (!self->_headerData)
  {
    uint64_t v7 = -[NSMutableData initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableData),  "initWithCapacity:",  +[IDSSocketPairMessage headerDataSize](&OBJC_CLASS___IDSSocketPairMessage, "headerDataSize"));
    headerData = self->_headerData;
    self->_headerData = v7;
  }

  uint64_t v9 = 0LL;
  id v10 = 0;
  while (1)
  {
    int v11 = +[IDSSocketPairMessage headerDataSize]( &OBJC_CLASS___IDSSocketPairMessage,  "headerDataSize",  *(void *)&v49,  *(void *)&v50);
    double v12 = -[NSMutableData length](self->_headerData, "length");
    id v13 = v11 - v12;
    if (v11 == v12) {
      goto LABEL_20;
    }
    uint64_t v14 = self->_headerData;
    uint64_t v15 = &__b[v9];
    if (v3 - v10 < v13)
    {
      -[NSMutableData appendBytes:length:](v14, "appendBytes:length:", v15);
      id v10 = v3;
LABEL_20:
      currentDataLength = self->_currentDataLength;
      goto LABEL_23;
    }

    -[NSMutableData appendBytes:length:](v14, "appendBytes:length:", v15, v13);
    currentDataLength = +[IDSSocketPairMessage dataLengthFromHeaderData:]( &OBJC_CLASS___IDSSocketPairMessage,  "dataLengthFromHeaderData:",  self->_headerData);
    self->_currentDataLength = currentDataLength;
    if (currentDataLength > self->_maxAllowedMessageSize) {
      break;
    }
    v10 += v13;
LABEL_23:
    currentMessageData = self->_currentMessageData;
    if (!currentMessageData)
    {
      if (currentDataLength)
      {
        double v18 = -[NSMutableData initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableData),  "initWithCapacity:",  self->_currentDataLength);
        double v19 = self->_currentMessageData;
        self->_currentMessageData = v18;

        currentDataLength = self->_currentDataLength;
        currentMessageData = self->_currentMessageData;
      }

      else
      {
        currentMessageData = 0LL;
      }
    }

    uint64_t v20 = currentDataLength - -[NSMutableData length](currentMessageData, "length");
    if ((_DWORD)v20)
    {
      double v21 = self->_currentMessageData;
      __int128 v22 = &__b[v10];
      if (v3 - v10 >= v20)
      {
        -[NSMutableData appendBytes:length:](v21, "appendBytes:length:", v22, v20);
        v10 += v20;
      }

      else
      {
        -[NSMutableData appendBytes:length:](v21, "appendBytes:length:", v22);
        id v10 = v3;
      }
    }

    double v23 = self->_currentDataLength;
    if (v23 == -[NSMutableData length](self->_currentMessageData, "length"))
    {
      id v24 = -[NSMutableData length](self->_headerData, "length");
      if (v24 == +[IDSSocketPairMessage headerDataSize]( &OBJC_CLASS___IDSSocketPairMessage,  "headerDataSize"))
      {
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[IDSSocketPairMessage messageWithHeaderData:data:]( &OBJC_CLASS___IDSSocketPairMessage,  "messageWithHeaderData:data:",  self->_headerData,  self->_currentMessageData));
        if (!-[IDSSocketPairConnection _processIncomingMessage:](self, "_processIncomingMessage:", v25))
        {
          uint64_t v45 = OSLogHandleForTransportCategory("SPConnection");
          unsigned int v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "_processIncomingMessage failed.",  buf,  2u);
          }

          unint64_t v48 = os_log_shim_legacy_logging_enabled(v47);
          if ((_DWORD)v48)
          {
            if (_IDSShouldLogTransport(v48))
            {
              _IDSLogTransport(@"SPConnection", @"IDS", @"_processIncomingMessage failed.");
            }
          }

          return;
        }

        uint64_t v26 = self->_currentMessageData;
        self->_currentMessageData = 0LL;

        -[NSMutableData setLength:](self->_headerData, "setLength:", 0LL);
        self->_currentDataLength = 0;
      }
    }

    if (self->_lastDateCheck == 0.0) {
      self->_lastDateCheck = IMTimeOfDay();
    }
    uint64_t v27 = IMTimeOfDay();
    uint64_t v28 = v27 - self->_lastDateCheck;
    if (v28 >= 1.0)
    {
      int v29 = (double)(8 * self->_bytesReceived) / v28;
      self->_prevBPS = v29 * 0.1 + self->_prevBPS * 0.9;
      int v30 = OSLogHandleForIDSCategory("FTMessageDelivery");
      uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        prevBPS = self->_prevBPS;
        *(_DWORD *)buf = 134218240;
        *(double *)double v53 = prevBPS;
        *(_WORD *)&v53[8] = 2048;
        __int16 v54 = v29;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "BPS: avg %f instant %f", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v33))
      {
        if (MarcoShouldLog(@"IDSAgent"))
        {
          __int16 v49 = self->_prevBPS;
          __int16 v50 = v29;
          MarcoLog(0LL, @"IDSAgent", @"SPConnection", @"BPS: avg %f instant %f");
        }

        if (IMShouldLog(@"IDS", 0LL))
        {
          __int16 v49 = self->_prevBPS;
          __int16 v50 = v29;
          IMLogString(0LL, @"IDS", @"IDSAgent", @"FTMessageDelivery", @"BPS: avg %f instant %f");
        }
      }

      self->_bytesReceived = 0LL;
      self->_lastDateCheck = v27;
    }

    uint64_t v9 = v10;
    if (v3 <= v10) {
      return;
    }
  }

  uint32_t v40 = OSLogHandleForIDSCategory("Warning");
  uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
  if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
  {
    uint64_t v42 = self->_currentDataLength;
    maxAllowedMessageSize = self->_maxAllowedMessageSize;
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)double v53 = v42;
    *(_WORD *)&v53[4] = 1024;
    *(_DWORD *)&v53[6] = maxAllowedMessageSize;
    _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_ERROR,  "Received message size: %u, maximum allowed size: %u",  buf,  0xEu);
  }

  if (os_log_shim_legacy_logging_enabled(v44))
  {
    _IDSWarnV(@"IDSFoundation", @"Received message size: %u, maximum allowed size: %u");
    _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Received message size: %u, maximum allowed size: %u");
    *(void *)&__int16 v49 = self->_currentDataLength;
    *(void *)&__int16 v50 = self->_maxAllowedMessageSize;
    _IDSLogTransport(@"Warning", @"IDS", @"Received message size: %u, maximum allowed size: %u");
  }

  -[IDSSocketPairConnection _endSession](self, "_endSession", *(void *)&v49, *(void *)&v50);
}

        uint64_t v80 = (void *)objc_claimAutoreleasedReturnValue([v9 generationError]);

        if (v80)
        {
          uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue([v9 generationError]);
          uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue([v81 domain]);
          uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue([v9 generationError]);
          uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @" (generate %@:%ld)",  v82,  [v83 code]));
          uint64_t v85 = objc_claimAutoreleasedReturnValue([v26 stringByAppendingString:v84]);

          uint64_t v26 = (void *)v85;
        }

        uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue([v9 rollingError]);

        if (v86)
        {
          uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue([v9 rollingError]);
          uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue([v87 domain]);
          uint64_t v89 = (void *)objc_claimAutoreleasedReturnValue([v9 rollingError]);
          uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @" (rolling %@:%ld)",  v88,  [v89 code]));
          uint64_t v91 = objc_claimAutoreleasedReturnValue([v26 stringByAppendingString:v90]);

          uint64_t v26 = (void *)v91;
        }

        uint64_t v92 = (void *)objc_claimAutoreleasedReturnValue([v9 identityToRegisterError]);

        if (v92)
        {
          uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue([v9 identityToRegisterError]);
          uint64_t v94 = (void *)objc_claimAutoreleasedReturnValue([v93 domain]);
          uint64_t v95 = (void *)objc_claimAutoreleasedReturnValue([v9 identityToRegisterError]);
          uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @" (toRegister %@:%ld)",  v94,  [v95 code]));
          uint64_t v97 = objc_claimAutoreleasedReturnValue([v26 stringByAppendingString:v96]);

          uint64_t v26 = (void *)v97;
        }

        v139[0] = _NSConcreteStackBlock;
        v139[1] = 3221225472LL;
        v139[2] = sub_1000E3988;
        v139[3] = &unk_1008F77E8;
        uint64_t v98 = v26;
        __int128 v140 = v98;
        __int128 v141 = v9;
        +[IDSAutoBugCapture triggerCaptureWithEvent:context:completion:]( &OBJC_CLASS___IDSAutoBugCapture,  "triggerCaptureWithEvent:context:completion:",  202LL,  v98,  v139);

LABEL_62:
        uint64_t v99 = (void *)objc_claimAutoreleasedReturnValue([a1 serviceTypesFromRegistrations:v125]);
        uint64_t v100 = (void *)objc_claimAutoreleasedReturnValue([a1 serviceTypesFromRegistrations:v125 withRegistrationType:1]);
        v129[0] = _NSConcreteStackBlock;
        v129[1] = 3221225472LL;
        v129[2] = sub_1000E3A5C;
        v129[3] = &unk_1008F9E10;
        __int128 v138 = a1;
        uint64_t v101 = v99;
        __int128 v130 = v101;
        __int128 v136 = v143;
        __int128 v131 = v128;
        __int128 v132 = v7;
        __int128 v137 = v145;
        uint64_t v102 = v100;
        char v133 = v102;
        __int128 v134 = v126;
        uint64_t v103 = v127;
        __int128 v135 = v103;
        [a1 _fetchKTDataSignatureForServiceTypes:v101 publicIdentityData:v132 keyStore:v131 withCompletion:v129];
        int v33 = (void *)objc_claimAutoreleasedReturnValue([v103 promise]);

        goto LABEL_63;
      }
    }

    else
    {
    }

    __int16 v50 = (void *)objc_claimAutoreleasedReturnValue([v9 registeredDeserializationError]);
    id v51 = (void *)objc_claimAutoreleasedReturnValue([v50 domain]);
    __int16 v52 = (void *)objc_claimAutoreleasedReturnValue([v9 registeredDeserializationError]);
    double v53 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @" (regDeserial %@:%ld)",  v51,  [v52 code]));
    __int16 v54 = objc_claimAutoreleasedReturnValue([v26 stringByAppendingString:v53]);

    uint64_t v26 = (void *)v54;
    goto LABEL_38;
  }

  uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v31, OS_LOG_TYPE_FAULT)) {
    sub_10069A8E8((uint64_t)v126, (uint64_t)v7, v31);
  }

  int v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSClientDataErrorDomain",  -2000LL,  0LL));
  [v127 failWithError:v32];

  int v33 = (void *)objc_claimAutoreleasedReturnValue([v127 promise]);
LABEL_63:

  _Block_object_dispose(v143, 8);
  _Block_object_dispose(v145, 8);

  return v33;
}

    uint64_t v118 = 0LL;
    goto LABEL_56;
  }

                      __int16 v47 = (os_log_s *)objc_claimAutoreleasedReturnValue([v5[440] warning]);
                      if (os_log_type_enabled(v47, OS_LOG_TYPE_FAULT)) {
                        sub_1006A1088();
                      }

                      -[IDSDAccount _registerAccount](self, "_registerAccount");
                      *((_BYTE *)self + 80) |= 4u;
                      goto LABEL_58;
                    }

                    unsigned int v46 = (os_log_s *)objc_claimAutoreleasedReturnValue([v5[440] warning]);
                    if (os_log_type_enabled(v46, OS_LOG_TYPE_FAULT)) {
                      sub_1006A10E0();
                    }

                    uint64_t v45 = @"ForceRegistration";
                  }

                  IMSetDomainBoolForKey(@"com.apple.conference", v45, 0LL);
                  goto LABEL_55;
                }

                id v51 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration authenticationCert](self->_registrationInfo, "authenticationCert"));

                if (!v51)
                {
                  uint64_t v5 = &IMInsertBoolsToXPCDictionary_ptr;
                  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                  if (!os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_40;
                  }
                  *(_WORD *)buf = 0;
                  double v21 = "Registered but missing an authentication cert, forcing re-register";
LABEL_20:
                  __int128 v22 = (os_log_s *)v20;
                  double v23 = 2;
LABEL_21:
                  _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v21, buf, v23);
                  goto LABEL_40;
                }
              }

              LOBYTE(v40) = 0;
              goto LABEL_75;
            }

            uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
            if (!os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_40;
            }
            *(_DWORD *)buf = 138412546;
            __int128 v57 = v10;
            __int128 v58 = 2112;
            __int16 v59 = v6;
            double v21 = "Registration application protocol versions are different, we'll force a server registration   (%@ -> %@)";
          }

          else
          {
            uint64_t v5 = &IMInsertBoolsToXPCDictionary_ptr;
            uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
            if (!os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_40;
            }
            *(_DWORD *)buf = 138412546;
            __int128 v57 = 0LL;
            __int128 v58 = 2112;
            __int16 v59 = v6;
            double v21 = "Registration application protocol version is empty, we'll force a server registration   (%@ -> %@)";
          }

          __int128 v22 = (os_log_s *)v20;
          double v23 = 22;
          goto LABEL_21;
        }

        uint64_t v5 = &IMInsertBoolsToXPCDictionary_ptr;
        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
        if (!os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_40;
        }
        id v39 = _IDSIdentityVersionNumber();
        double v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
        *(_DWORD *)buf = 138412546;
        __int128 v57 = (uint64_t)v55;
        __int128 v58 = 2112;
        __int16 v59 = v36;
        int v37 = "Registration identity versions different, we'll force a server registration   (%@ -> %@)";
      }

      else
      {
        uint64_t v5 = &IMInsertBoolsToXPCDictionary_ptr;
        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
        if (!os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_40;
        }
        uint64_t v38 = _IDSIDProtocolVersionNumber();
        double v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
        *(_DWORD *)buf = 138412546;
        __int128 v57 = v11;
        __int128 v58 = 2112;
        __int16 v59 = v36;
        int v37 = "Registration identity protocol versions different, we'll force a server registration   (%@ -> %@)";
      }
    }

    else
    {
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (!os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_40;
      }
      uint64_t v35 = _IDSIDProtocolVersionNumber();
      double v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
      *(_DWORD *)buf = 138412546;
      __int128 v57 = 0LL;
      __int128 v58 = 2112;
      __int16 v59 = v36;
      int v37 = "Registration identity protocol version is empty, we'll force a server registration   (%@ -> %@)";
    }

    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v20, OS_LOG_TYPE_DEFAULT, v37, buf, 0x16u);

    uint64_t v5 = &IMInsertBoolsToXPCDictionary_ptr;
    goto LABEL_40;
  }

  __break(1u);
LABEL_56:
  __break(1u);
}

    if (v74 >= v59) {
      goto LABEL_76;
    }
    if (__OFSUB__(v74, v76)) {
      goto LABEL_157;
    }
    if (v74 - v76 >= v75) {
      goto LABEL_76;
    }
    if (__OFADD__(v76, v75)) {
      goto LABEL_160;
    }
    if (v76 + v75 >= v59) {
      uint64_t v104 = v59;
    }
    else {
      uint64_t v104 = v76 + v75;
    }
    if (v104 >= v76)
    {
      if (v74 == v104) {
        goto LABEL_76;
      }
      uint64_t v105 = (uint64_t)v61;
      v187 = v58;
      v185 = v2;
      uint64_t v106 = *(void *)(v200 + 72);
      v210 = v106 * (v74 - 1);
      v205 = v106;
      uint64_t v107 = v74 * v106;
      v194 = v104;
      while (2)
      {
        uint64_t v111 = 0LL;
        v206 = v107;
        v207 = v74;
        while (2)
        {
          uint64_t v112 = *v212;
          uint64_t v113 = v107 + v111 + *v212;
          uint64_t v109 = (uint64_t)v208;
          sub_1003F5FC8(v113, (uint64_t)v208, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          sub_1003F5FC8(v210 + v111 + v112, v105, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          uint64_t v108 = v105;
          uint64_t v114 = *(int *)(v211 + 40);
          uint64_t v115 = *(_DWORD *)(v109 + v114);
          uint64_t v116 = *(_DWORD *)(v105 + v114);
          if (v115 < v116)
          {
LABEL_73:
            uint64_t v105 = v108;
            sub_1003F6050(v108, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
            sub_1003F6050(v109, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
            uint64_t v123 = *v212;
            if (!*v212) {
              goto LABEL_162;
            }
            uint64_t v107 = v206;
            uint64_t v124 = v123 + v206 + v111;
            uint64_t v125 = v123 + v210 + v111;
            sub_1004C77E4(v124, v209);
            swift_arrayInitWithTakeFrontToBack(v124, v125, 1LL, v211);
            sub_1004C77E4(v209, v125);
            v111 -= v205;
            ++v76;
            uint64_t v110 = v207;
            if (v207 == v76) {
              goto LABEL_67;
            }
            continue;
          }

          break;
        }

        uint64_t v117 = v109;
        uint64_t v118 = v203;
        sub_1003F5FC8(v117, v203, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        uint64_t v119 = v105;
        uint64_t v120 = (uint64_t)v202;
        sub_1003F5FC8(v119, (uint64_t)v202, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        if (v115 == v116)
        {
          uint64_t v121 = v211;
          uint64_t v122 = *(_DWORD *)(v118 + *(int *)(v211 + 44));
          sub_1003F6050(v118, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          LODWORD(v121) = *(_DWORD *)(v120 + *(int *)(v121 + 44));
          sub_1003F6050(v120, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          uint64_t v108 = (uint64_t)v204;
          uint64_t v109 = (uint64_t)v208;
          goto LABEL_73;
        }

        sub_1003F6050(v120, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        sub_1003F6050(v118, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        uint64_t v108 = (uint64_t)v204;
        uint64_t v109 = (uint64_t)v208;
LABEL_66:
        uint64_t v105 = v108;
        sub_1003F6050(v108, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        sub_1003F6050(v109, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        uint64_t v107 = v206;
        uint64_t v110 = v207;
LABEL_67:
        uint64_t v74 = v110 + 1;
        v210 += v205;
        v107 += v205;
        uint64_t v76 = v196;
        if (v74 != v194) {
          continue;
        }
        break;
      }

      uint64_t v74 = v194;
      uint64_t v2 = v185;
      __int128 v58 = v187;
      uint64_t v35 = v199;
      uint64_t v45 = v201;
LABEL_76:
      if (v74 < v76) {
        goto LABEL_152;
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v58);
      v207 = v74;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        __int128 v58 = sub_1004C4884(0LL, *((void *)v58 + 2) + 1LL, 1, v58);
      }
      __int128 v128 = *((void *)v58 + 2);
      __int128 v127 = *((void *)v58 + 3);
      double v62 = v128 + 1;
      if (v128 >= v127 >> 1) {
        __int128 v58 = sub_1004C4884((char *)(v127 > 1), v128 + 1, 1, v58);
      }
      *((void *)v58 + 2) = v62;
      __int128 v129 = v58 + 32;
      __int128 v130 = &v58[16 * v128 + 32];
      __int128 v131 = v207;
      *(void *)__int128 v130 = v76;
      *((void *)v130 + 1) = v131;
      if (v128)
      {
        while (2)
        {
          __int128 v132 = v62 - 1;
          if (v62 >= 4)
          {
            __int128 v137 = &v129[16 * v62];
            __int128 v138 = *((void *)v137 - 8);
            __int128 v139 = *((void *)v137 - 7);
            v143 = __OFSUB__(v139, v138);
            __int128 v140 = v139 - v138;
            if (v143) {
              goto LABEL_141;
            }
            v142 = *((void *)v137 - 6);
            __int128 v141 = *((void *)v137 - 5);
            v143 = __OFSUB__(v141, v142);
            __int128 v135 = v141 - v142;
            __int128 v136 = v143;
            if (v143) {
              goto LABEL_142;
            }
            v144 = v62 - 2;
            v145 = &v129[16 * v62 - 32];
            v147 = *(void *)v145;
            __int16 v146 = *((void *)v145 + 1);
            v143 = __OFSUB__(v146, v147);
            __int16 v148 = v146 - v147;
            if (v143) {
              goto LABEL_144;
            }
            v143 = __OFADD__(v135, v148);
            v149 = v135 + v148;
            if (v143) {
              goto LABEL_147;
            }
            if (v149 >= v140)
            {
              v167 = &v129[16 * v132];
              v169 = *(void *)v167;
              v168 = *((void *)v167 + 1);
              v143 = __OFSUB__(v168, v169);
              v170 = v168 - v169;
              if (v143) {
                goto LABEL_151;
              }
              v160 = v135 < v170;
            }

            else
            {
LABEL_95:
              if ((v136 & 1) != 0) {
                goto LABEL_143;
              }
              v144 = v62 - 2;
              v150 = &v129[16 * v62 - 32];
              v152 = *(void *)v150;
              v151 = *((void *)v150 + 1);
              v153 = __OFSUB__(v151, v152);
              v154 = v151 - v152;
              v155 = v153;
              if (v153) {
                goto LABEL_146;
              }
              v156 = &v129[16 * v132];
              v158 = *(void *)v156;
              v157 = *((void *)v156 + 1);
              v143 = __OFSUB__(v157, v158);
              v159 = v157 - v158;
              if (v143) {
                goto LABEL_149;
              }
              if (__OFADD__(v154, v159)) {
                goto LABEL_150;
              }
              if (v154 + v159 < v135) {
                goto LABEL_107;
              }
              v160 = v135 < v159;
            }

            if (v160) {
              __int128 v132 = v144;
            }
          }

          else
          {
            if (v62 == 3)
            {
              __int128 v134 = *((void *)v58 + 4);
              char v133 = *((void *)v58 + 5);
              v143 = __OFSUB__(v133, v134);
              __int128 v135 = v133 - v134;
              __int128 v136 = v143;
              goto LABEL_95;
            }

            v161 = *((void *)v58 + 4);
            v162 = *((void *)v58 + 5);
            v143 = __OFSUB__(v162, v161);
            v154 = v162 - v161;
            v155 = v143;
LABEL_107:
            if ((v155 & 1) != 0) {
              goto LABEL_145;
            }
            v163 = &v129[16 * v132];
            v165 = *(void *)v163;
            v164 = *((void *)v163 + 1);
            v143 = __OFSUB__(v164, v165);
            v166 = v164 - v165;
            if (v143) {
              goto LABEL_148;
            }
            if (v166 < v154) {
              goto LABEL_14;
            }
          }

          v171 = v132 - 1;
          if (v132 - 1 >= v62)
          {
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
            goto LABEL_161;
          }

          if (!*v212) {
            goto LABEL_163;
          }
          v172 = v58;
          v173 = &v129[16 * v171];
          v174 = *(void *)v173;
          v175 = &v129[16 * v132];
          v176 = *((void *)v175 + 1);
          sub_1004C41C4( *v212 + *(void *)(v200 + 72) * *(void *)v173,  *v212 + *(void *)(v200 + 72) * *(void *)v175,  *v212 + *(void *)(v200 + 72) * v176,  v198);
          if (v2) {
            goto LABEL_135;
          }
          if (v176 < v174) {
            goto LABEL_138;
          }
          if (v132 > *((void *)v172 + 2)) {
            goto LABEL_139;
          }
          *(void *)v173 = v174;
          *(void *)&v129[16 * v171 + 8] = v176;
          v177 = *((void *)v172 + 2);
          if (v132 >= v177) {
            goto LABEL_140;
          }
          __int128 v58 = v172;
          double v62 = v177 - 1;
          memmove(&v129[16 * v132], v175 + 16, 16 * (v177 - 1 - v132));
          *((void *)v172 + 2) = v177 - 1;
          uint64_t v35 = v199;
          uint64_t v45 = v201;
          if (v177 <= 2) {
            goto LABEL_14;
          }
          continue;
        }
      }

      double v62 = 1LL;
LABEL_14:
      __int16 v59 = v212[1];
      double v60 = v207;
      __int16 v61 = v204;
      if (v207 >= v59) {
        goto LABEL_124;
      }
      continue;
    }

    break;
  }

void sub_100047644(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "connectionDidReceiveBytes:") & 1) != 0) {
    [v3 connectionDidReceiveBytes:*(void *)(a1 + 32)];
  }
}

LABEL_53:
  return v27;
}
    }

    else if (a4 == 2)
    {
      uint64_t v70 = 0u;
      __int16 v71 = 0u;
      unint64_t v68 = 0u;
      __int16 v69 = 0u;
      id v13 = (void *)objc_claimAutoreleasedReturnValue(-[IDSAccountSync serviceController](self, "serviceController"));
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 allServices]);

      uint64_t v15 = [v14 countByEnumeratingWithState:&v68 objects:v75 count:16];
      if (!v15) {
        goto LABEL_53;
      }
      uint64_t v16 = v15;
      uint64_t v17 = *(void *)v69;
      id v51 = kIDSServiceDefaultsHasEverRegistered;
      __int16 v50 = kIDSServiceDefaultsRegistrationInfoKey;
      __int16 v49 = kIDSServiceDefaultsUniqueIDKey;
      while (1)
      {
        double v18 = 0LL;
        do
        {
          if (*(void *)v69 != v17) {
            objc_enumerationMutation(v14);
          }
          double v19 = *(void **)(*((void *)&v68 + 1) + 8LL * (void)v18);
          if ((objc_msgSend(v19, "useiMessageCallerID", v49) & 1) != 0
            || (uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 pushTopic]),
                double v21 = [v20 isEqualToIgnoringCase:@"com.apple.madrid"],
                v20,
                v21))
          {
            __int128 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue([v9[440] accountSync]);
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
            {
              double v23 = (void *)objc_claimAutoreleasedReturnValue([v19 serviceName]);
              *(_DWORD *)buf = 138412290;
              uint64_t v78 = v23;
              _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Service: %@ also wants to use the iMessage CallerID, attempting to update it",  buf,  0xCu);
            }

            id v24 = (void *)objc_claimAutoreleasedReturnValue(-[IDSAccountSync accountController](self, "accountController"));
            uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 accountsOnService:v19 withType:1]);

            if ([v25 count])
            {
              uint64_t v66 = 0u;
              __int16 v67 = 0u;
              uint64_t v64 = 0u;
              __int16 v65 = 0u;
              uint64_t v26 = v25;
              uint64_t v27 = [v26 countByEnumeratingWithState:&v64 objects:v74 count:16];
              if (v27)
              {
                uint64_t v28 = v27;
                int v29 = *(void *)v65;
                do
                {
                  for (k = 0LL; k != v28; k = (char *)k + 1)
                  {
                    if (*(void *)v65 != v29) {
                      objc_enumerationMutation(v26);
                    }
                    [*(id *)(*((void *)&v64 + 1) + 8 * (void)k) setDisplayName:v7];
                  }

                  uint64_t v28 = [v26 countByEnumeratingWithState:&v64 objects:v74 count:16];
                }

                while (v28);
                self = v55;
                uint64_t v9 = &IMInsertBoolsToXPCDictionary_ptr;
              }

    theDict = 0LL;
LABEL_54:

    goto LABEL_55;
  }

  __int128 v134 = 0LL;
LABEL_89:

LABEL_90:
  Value = 0LL;
  if (v17 && kIDSQRAllocateKey_RecipientPushToken) {
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)v17, kIDSQRAllocateKey_RecipientPushToken);
  }
  theDicta = Value;
  uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKey:v35]);
  uint64_t v79 = [v78 intValue];

  if (v138 || v79 != 2)
  {
    uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:kIDSQRAllocateKey_waitingForAllocation]);
    uint64_t v84 = [v83 BOOLValue];

    if (v84)
    {
      uint64_t v85 = OSLogHandleForTransportCategory("QRAllocator");
      uint64_t v86 = (os_log_s *)objc_claimAutoreleasedReturnValue(v85);
      if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v156 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v86,  OS_LOG_TYPE_DEFAULT,  "Will not send QR allocation request for session: %@",  buf,  0xCu);
      }

      uint64_t v88 = os_log_shim_legacy_logging_enabled(v87);
      if ((_DWORD)v88)
      {
        if (_IDSShouldLogTransport(v88))
        {
          _IDSLogTransport( @"QRAllocator",  @"IDS",  @"Will not send QR allocation request for session: %@");
          if (_IDSShouldLog(0LL, @"QRAllocator")) {
            _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"Will not send QR allocation request for session: %@");
          }
        }
      }

      double v34 = 0LL;
    }

    else
    {
      v142[0] = _NSConcreteStackBlock;
      v142[1] = 3221225472LL;
      v142[2] = sub_100291E04;
      v142[3] = &unk_1008FF6B0;
      v142[4] = self;
      uint64_t v89 = v137;
      v143 = v89;
      v144 = theDicta;
      uint64_t v90 = v138;
      v145 = v90;
      uint64_t v91 = v139;
      __int16 v146 = v91;
      v147 = v17;
      uint64_t v92 = v136;
      v152 = v92;
      __int16 v148 = v16;
      v153 = a12;
      v149 = v134;
      uint64_t v93 = v141;
      v150 = v93;
      v154 = v135;
      uint64_t v94 = v77;
      v151 = v94;
      uint64_t v95 = objc_retainBlock(v142);
      if ([v90 count])
      {
        -[IDSQuickRelayAllocator _sendIDQueryRequest:fromIdentity:fromURI:fromService:completionBlock:]( self,  "_sendIDQueryRequest:fromIdentity:fromURI:fromService:completionBlock:",  v90,  v91,  v93,  v89,  v95);
      }

      else if (v92)
      {
        uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  @"Missing recipientIDs",  NSLocalizedDescriptionKey));
        uint64_t v97 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"QRAllocator",  7001LL,  v96));

        (*((void (**)(id, void *, void))v92 + 2))(v92, v97, 0LL);
      }

      double v34 = (void *)objc_claimAutoreleasedReturnValue([v94 UUIDString]);
    }
  }

  else
  {
    uint64_t v80 = (void *)objc_claimAutoreleasedReturnValue(-[IDSQuickRelayAllocator _getSelfAllocationFromCache:](self, "_getSelfAllocationFromCache:", v16));
    uint64_t v81 = v80;
    if (v80)
    {
      uint64_t v82 = v80;
    }

    else
    {
      LODWORD(v129) = a11;
      uint64_t v82 = (id)objc_claimAutoreleasedReturnValue( -[IDSQuickRelayAllocator _setupAllocation:fromURI:sessionID:isSessionIDRemoteDeviceID:options:prevConnectStatus:requestUUID:connectReadyHandler:withPreferredLocalInterface:]( self,  "_setupAllocation:fromURI:sessionID:isSessionIDRemoteDeviceID:options:prevConnectStatus:requestUUID:c onnectReadyHandler:withPreferredLocalInterface:",  0LL,  v141,  v16,  v135,  v17,  0LL,  v77,  v136,  v129));
    }

    double v34 = v82;
  }

LABEL_113:
  return v34;
}

  uint64_t v114 = kIDSQRAllocateKey_ActiveRelayIP;
  uint64_t v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_ActiveRelayIP, v943, v986, v1029));
  uint64_t v117 = objc_opt_class(&OBJC_CLASS___NSData, v116);
  uint64_t v118 = objc_opt_isKindOfClass(v115, v117);

  uint64_t v119 = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v114]);
  uint64_t v120 = v119;
  if ((v118 & 1) != 0)
  {
    activeRelayIP = self->_activeRelayIP;
    self->_activeRelayIP = v119;
LABEL_55:

    goto LABEL_62;
  }

  if (v120)
  {
    uint64_t v122 = OSLogHandleForIDSCategory("QRAllocator");
    uint64_t v123 = (os_log_s *)objc_claimAutoreleasedReturnValue(v122);
    if (os_log_type_enabled(v123, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v124 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v114]);
      __int128 v126 = (id)objc_opt_class(&OBJC_CLASS___NSData, v125);
      __int128 v127 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v114]);
      __int128 v129 = (id)objc_opt_class(v127, v128);
      *(_DWORD *)buf = 138412802;
      v1070 = v124;
      v1071 = 2112;
      v1072 = v126;
      v1073 = 2112;
      v1074 = v129;
      _os_log_impl( (void *)&_mh_execute_header,  v123,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v130))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        activeRelayIP = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v114]);
        __int128 v132 = objc_opt_class(&OBJC_CLASS___NSData, v131);
        char v133 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v114]);
        v987 = v132;
        v1030 = objc_opt_class(v133, v134);
        v944 = activeRelayIP;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_55;
      }
    }
  }

        break;
    }
  }

              id v51 = v201;
              __int16 v50 = v203;
LABEL_54:

              __int16 v52 = (__CFString *)v207;
              goto LABEL_55;
            }

            if (!v43 && ![v40 wantsPhoneNumberAccount]
              || ([v40 iCloudBasedService] & v33 | v44) == 1)
            {
              uint64_t v45 = v40;
              -[IDSDAccountController forceRemoveAccount:](v2->_accountController, "forceRemoveAccount:", v36);
              unsigned int v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (!os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_53;
              }
              *(_DWORD *)buf = 138412290;
              v249 = v36;
              __int16 v47 = v46;
              unint64_t v48 = "Removing unwanted account for service {account: %@}";
              __int16 v49 = 12;
              goto LABEL_52;
            }

            if (-[__CFString isTemporary](v36, "isTemporary")
              && !-[__CFString accountType](v36, "accountType")
              && (!v194
               || !-[IDSUserAccountSynchronizer _allowHomeNumberForUser:simCarrierIdentifiers:userCarrierIdentifiers:]( v2,  "_allowHomeNumberForUser:simCarrierIdentifiers:userCarrierIdentifiers:",  v42,  v184,  v192)))
            {
              uint64_t v45 = v40;
              -[IDSDAccountController forceRemoveAccount:](v2->_accountController, "forceRemoveAccount:", v36);
              unsigned int v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (!os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_53;
              }
              uint64_t v92 = -[IDSUserAccountSynchronizer _allowHomeNumberForUser:simCarrierIdentifiers:userCarrierIdentifiers:]( v2,  "_allowHomeNumberForUser:simCarrierIdentifiers:userCarrierIdentifiers:",  v207,  v184,  v192);
              *(_DWORD *)buf = 138412802;
              uint64_t v93 = @"NO";
              if (v92) {
                uint64_t v93 = @"YES";
              }
              v249 = v36;
              v250 = 2112;
              v251 = v187;
              v252 = 2112;
              v253 = v93;
              __int16 v47 = v46;
              unint64_t v48 = "Removing unwanted temporary phone account for service {account: %@, isHSA2: %@, allowHomeNumber: %@}";
              __int16 v49 = 32;
LABEL_52:
              _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, v48, buf, v49);
              goto LABEL_53;
            }

            if (v42 && v205 && -[__CFString disableRegistration](v205, "disableRegistration"))
            {
              uint64_t v45 = v40;
              double v53 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  -[__CFString isUserDisabled](v36, "isUserDisabled")));
              __int16 v54 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString service](v36, "service"));
              double v55 = (void *)objc_claimAutoreleasedReturnValue([v54 identifier]);
              -[NSMutableDictionary setObject:forKeyedSubscript:](v193, "setObject:forKeyedSubscript:", v53, v55);

              -[IDSDAccountController forceRemoveAccount:](v2->_accountController, "forceRemoveAccount:", v36);
              unsigned int v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412802;
                v249 = v36;
                v250 = 2112;
                v251 = v207;
                v252 = 2112;
                v253 = v205;
                _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "Removing unwanted account for service, user is disabled {account: %@, matchingUser: %@, userProperties: %@}",  buf,  0x20u);
              }

              goto LABEL_123;
            }

            if (v209 || ![v177 count])
            {
              if ([v177 containsObject:v209])
              {
                v189 = v40;
                v231 = 0u;
                v232 = 0u;
                v229 = 0u;
                v230 = 0u;
                uint64_t v56 = v185;
                __int128 v57 = -[__CFString countByEnumeratingWithState:objects:count:]( v56,  "countByEnumeratingWithState:objects:count:",  &v229,  v247,  16LL);
                if (v57)
                {
                  __int128 v58 = v57;
                  __int16 v59 = 0;
                  double v60 = *(void *)v230;
                  do
                  {
                    for (i = 0LL; i != v58; i = (char *)i + 1)
                    {
                      if (*(void *)v230 != v60) {
                        objc_enumerationMutation(v56);
                      }
                      double v62 = *(void **)(*((void *)&v229 + 1) + 8LL * (void)i);
                      if (![v62 realm])
                      {
                        __int16 v63 = (void *)objc_claimAutoreleasedReturnValue([v62 uniqueIdentifier]);
                        uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString userUniqueIdentifier](v36, "userUniqueIdentifier"));
                        __int16 v65 = [v63 isEqualToString:v64];

                        if (v65)
                        {
                          uint64_t v66 = v62;
                          __int16 v67 = objc_claimAutoreleasedReturnValue(-[__CFString loginID](v36, "loginID"));
                          if (v67)
                          {
                            unint64_t v68 = (void *)v67;
                            __int16 v69 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString loginID](v36, "loginID"));
                            uint64_t v70 = -[__CFString differsFromPhoneNumber:]( v66,  "differsFromPhoneNumber:",  v69);

                            if (v70)
                            {
                              __int16 v71 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  -[__CFString isUserDisabled](v36, "isUserDisabled")));
                              uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString service](v36, "service"));
                              __int16 v73 = (void *)objc_claimAutoreleasedReturnValue([v72 identifier]);
                              -[NSMutableDictionary setObject:forKeyedSubscript:]( v193,  "setObject:forKeyedSubscript:",  v71,  v73);

                              uint64_t v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                              if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
                              {
                                *(_DWORD *)buf = 138412802;
                                v249 = v209;
                                v250 = 2112;
                                v251 = v66;
                                v252 = 2112;
                                v253 = v36;
                                _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEFAULT,  "Detected account has mismatching user. Marking for removal {uniqueIdentifier: %@, user : %@, account: %@}",  buf,  0x20u);
                              }

                              __int16 v59 = 1;
                            }
                          }
                        }
                      }
                    }

                    __int128 v58 = -[__CFString countByEnumeratingWithState:objects:count:]( v56,  "countByEnumeratingWithState:objects:count:",  &v229,  v247,  16LL);
                  }

                  while (v58);
                }

                else
                {
                  __int16 v59 = 0;
                }

                uint64_t v84 = v59 & 1;
                uint64_t v2 = v186;
                int v33 = v182 ^ 1;
                uint64_t v45 = v189;
              }

              else
              {
                if (!-[__CFString accountType](v36, "accountType"))
                {
                  accountController = v2->_accountController;
                  uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString service](v36, "service"));
                  uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDAccountController appleIDAccountOnService:]( accountController,  "appleIDAccountOnService:",  v76));

                  uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString vettedAliases](v36, "vettedAliases"));
                  uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue([v78 firstObject]);

                  if (v77 && v79) {
                    [v77 markAsWasSelectedAlias:v79];
                  }
                }

                uint64_t v80 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  -[__CFString isUserDisabled](v36, "isUserDisabled")));
                uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString service](v36, "service"));
                uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue([v81 identifier]);
                -[NSMutableDictionary setObject:forKeyedSubscript:](v193, "setObject:forKeyedSubscript:", v80, v82);

                -[IDSDAccountController forceRemoveAccount:](v2->_accountController, "forceRemoveAccount:", v36);
                uint64_t v83 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412546;
                  v249 = v209;
                  v250 = 2112;
                  v251 = v36;
                  _os_log_impl( (void *)&_mh_execute_header,  v83,  OS_LOG_TYPE_DEFAULT,  "Removing account without matching user {uniqueIdentifier: %@, account: %@}",  buf,  0x16u);
                }

                uint64_t v84 = 0;
                int v33 = v182 ^ 1;
                uint64_t v45 = v40;
              }

              __int16 v52 = (__CFString *)v207;
            }

            else
            {
              uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString registration](v36, "registration"));
              uint64_t v86 = [v85 registrationType];

              uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString registration](v36, "registration"));
              uint64_t v88 = [v87 registrationType];

              uint64_t v89 = v176;
              if (v88 == 2
                || ((uint64_t v94 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString registration](v36, "registration")),
                     uint64_t v95 = [v94 registrationType],
                     v94,
                     v95)
                  ? (uint64_t v89 = v174)
                  : (uint64_t v89 = v175),
                    !v95 || v86 == 3))
              {
                uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray firstObject](v89, "firstObject"));
                uint64_t v91 = objc_claimAutoreleasedReturnValue([v90 uniqueIdentifier]);
              }

              else
              {
                uint64_t v91 = 0LL;
              }

              v209 = (__CFString *)v91;
              -[__CFString setUserUniqueIdentifier:](v36, "setUserUniqueIdentifier:", v91);
              uint64_t v96 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              uint64_t v45 = v40;
              __int16 v52 = (__CFString *)v207;
              if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412546;
                v249 = v209;
                v250 = 2112;
                v251 = v36;
                _os_log_impl( (void *)&_mh_execute_header,  v96,  OS_LOG_TYPE_DEFAULT,  "Migrating account to use users {uniqueIdentifier: %@, account: %@}",  buf,  0x16u);
              }

              uint64_t v84 = 0;
            }

            if (v209)
            {
              uint64_t v97 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString service](v36, "service"));
              uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue([v97 identifier]);

              if (v98)
              {
                uint64_t v99 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString service](v36, "service"));
                uint64_t v100 = (void *)objc_claimAutoreleasedReturnValue([v99 identifier]);
                uint64_t v101 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v181, "objectForKeyedSubscript:", v100));
                uint64_t v102 = v101;
                if (v101)
                {
                  unsigned int v46 = v101;
                }

                else
                {
                  unsigned int v46 = (os_log_s *)(id)objc_claimAutoreleasedReturnValue(+[NSSet set](&OBJC_CLASS___NSSet, "set"));
                }

                if (((-[os_log_s containsObject:](v46, "containsObject:", v209) | v84) & 1) != 0)
                {
                  uint64_t v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                  int v33 = v182 ^ 1;
                  id v51 = v201;
                  if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 138412546;
                    v249 = v209;
                    v250 = 2112;
                    v251 = v36;
                    _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_DEFAULT,  "Removing extra account for user without matching user {uniqueIdentifier: %@, account: %@}",  buf,  0x16u);
                  }

                  -[IDSDAccountController forceRemoveAccount:](v2->_accountController, "forceRemoveAccount:", v36);
                  __int16 v50 = v203;
                  goto LABEL_54;
                }

                uint64_t v104 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s setByAddingObject:](v46, "setByAddingObject:", v209));
                uint64_t v105 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString service](v36, "service"));
                uint64_t v106 = (void *)objc_claimAutoreleasedReturnValue([v105 identifier]);
                -[NSMutableDictionary setObject:forKeyedSubscript:](v181, "setObject:forKeyedSubscript:", v104, v106);

LABEL_123:
                int v33 = v182 ^ 1;
                goto LABEL_53;
              }
            }

            else
            {
              v209 = 0LL;
            }

            id v51 = v201;
            __int16 v50 = v203;
LABEL_55:

            uint64_t v35 = v50 + 1;
          }

          while (v35 != v199);
          uint64_t v107 = [obj countByEnumeratingWithState:&v234 objects:v254 count:16];
          v199 = v107;
        }

        while (v107);
      }

      uint64_t v108 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringGUID](&OBJC_CLASS___NSString, "stringGUID"));
      uint64_t v109 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary description](v181, "description"));
      uint64_t v110 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary description](v193, "description"));
      uint64_t v111 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v249 = v108;
        _os_log_impl( (void *)&_mh_execute_header,  v111,  OS_LOG_TYPE_DEFAULT,  "Logging current and disabled account info with guid %@",  buf,  0xCu);
      }

      v226[0] = _NSConcreteStackBlock;
      v226[1] = 3221225472LL;
      v226[2] = sub_1003A03DC;
      v226[3] = &unk_1008F5F80;
      uint64_t v112 = v108;
      v227 = v112;
      v172 = v109;
      v228 = v172;
      cut_dispatch_log_queue(v226);
      v223[0] = _NSConcreteStackBlock;
      v223[1] = 3221225472LL;
      v223[2] = sub_1003A0494;
      v223[3] = &unk_1008F5F80;
      v171 = v112;
      v224 = v171;
      v170 = v110;
      v225 = v170;
      cut_dispatch_log_queue(v223);
      v221 = 0u;
      v222 = 0u;
      v219 = 0u;
      v220 = 0u;
      uint64_t v113 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDServiceController allPrimaryServices](v2->_serviceController, "allPrimaryServices"));
      uint64_t v114 = [v113 countByEnumeratingWithState:&v219 objects:v246 count:16];
      uint64_t v115 = (void *)v184;
      if (v114)
      {
        uint64_t v116 = v114;
        uint64_t v117 = *(void *)v220;
        if (v194) {
          uint64_t v118 = @"YES";
        }
        else {
          uint64_t v118 = @"NO";
        }
        v190 = v118;
        p_cache = &OBJC_CLASS___IDSActivityPushListener.cache;
        v178 = *(void *)v220;
        v179 = v113;
        do
        {
          uint64_t v120 = 0LL;
          v180 = v116;
          do
          {
            if (*(void *)v220 != v117)
            {
              uint64_t v121 = v120;
              objc_enumerationMutation(v113);
              uint64_t v120 = v121;
            }

            v188 = v120;
            uint64_t v122 = *(__CFString **)(*((void *)&v219 + 1) + 8 * v120);
            if (((-[__CFString wantsPhoneNumberAccount](v122, "wantsPhoneNumberAccount") & 1) != 0
               || -[__CFString wantsATVDeviceAccount](v122, "wantsATVDeviceAccount"))
              && !-[IDSRestrictions shouldDisableService:](v2->_restrictions, "shouldDisableService:", v122)
              && (v182 | -[__CFString iCloudBasedService](v122, "iCloudBasedService") ^ 1) == 1)
            {
              uint64_t v123 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString identifier](v122, "identifier"));
              uint64_t v124 = objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v181, "objectForKeyedSubscript:", v123));

              uint64_t v125 = (void *)v124;
              v217 = 0u;
              v218 = 0u;
              v215 = 0u;
              v216 = 0u;
              v202 = v185;
              v206 = -[__CFString countByEnumeratingWithState:objects:count:]( v202,  "countByEnumeratingWithState:objects:count:",  &v215,  v245,  16LL);
              if (!v206) {
                goto LABEL_204;
              }
              v204 = *(void *)v216;
              v198 = v122;
              v200 = (void *)v124;
              while (1)
              {
                __int128 v126 = 0LL;
                do
                {
                  if (*(void *)v216 != v204) {
                    objc_enumerationMutation(v202);
                  }
                  v208 = v126;
                  __int128 v127 = *(void **)(*((void *)&v215 + 1) + 8 * v126);
                  v210 = (__CFString *)objc_claimAutoreleasedReturnValue([v127 uniqueIdentifier]);
                  if ((objc_msgSend(v125, "containsObject:") & 1) == 0
                    && ([v127 realm] && objc_msgSend(v127, "realm") != (id)2
                     || -[__CFString wantsPhoneNumberAccount](v122, "wantsPhoneNumberAccount")))
                  {
                    if (!-[__CFString disabledOnTinkerWatch](v122, "disabledOnTinkerWatch")
                      || (__int128 v128 = (void *)objc_claimAutoreleasedReturnValue([p_cache + 408 sharedInstance]),
                          __int128 v129 = [v128 isCurrentDeviceTinkerConfiguredWatch],
                          v128,
                          uint64_t v125 = v200,
                          (v129 & 1) == 0))
                    {
                      if ([v127 realm] != (id)3
                        || -[__CFString wantsATVDeviceAccount](v122, "wantsATVDeviceAccount"))
                      {
                        if ([v127 realm] == (id)2
                          && (!v194
                           || !-[IDSUserAccountSynchronizer _allowHomeNumberForUser:simCarrierIdentifiers:userCarrierIdentifiers:]( v2,  "_allowHomeNumberForUser:simCarrierIdentifiers:userCarrierIdentifiers:",  v127,  v115,  v192)))
                        {
                          __int128 v130 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                          if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
                          {
                            __int128 v137 = -[IDSUserAccountSynchronizer _allowHomeNumberForUser:simCarrierIdentifiers:userCarrierIdentifiers:]( v2,  "_allowHomeNumberForUser:simCarrierIdentifiers:userCarrierIdentifiers:",  v127,  v115,  v192);
                            *(_DWORD *)buf = 138412546;
                            __int128 v138 = @"YES";
                            if (!v137) {
                              __int128 v138 = @"NO";
                            }
                            v249 = v190;
                            v250 = 2112;
                            v251 = v138;
                            _os_log_impl( (void *)&_mh_execute_header,  v130,  OS_LOG_TYPE_DEFAULT,  "Not creating account for temporary user {isHSA2: %@, allowHomeNumber: %@}",  buf,  0x16u);
                          }

                          goto LABEL_201;
                        }

                        __int128 v130 = (os_log_s *)objc_claimAutoreleasedReturnValue( -[IDSUserStore propertiesForUser:]( v2->_userStore,  "propertiesForUser:",  v127));
                        if ((-[os_log_s disableRegistration](v130, "disableRegistration") & 1) != 0)
                        {
LABEL_201:

                          goto LABEL_202;
                        }

                        __int128 v131 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                        if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)buf = 138412546;
                          v249 = v210;
                          v250 = 2112;
                          v251 = v122;
                          _os_log_impl( (void *)&_mh_execute_header,  v131,  OS_LOG_TYPE_DEFAULT,  "Creating missing accounts for user {uniqueIdentifier: %@, service: %@}",  buf,  0x16u);
                        }

                        __int128 v132 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString identifier](v122, "identifier"));
                        char v133 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v193,  "objectForKeyedSubscript:",  v132));

                        v196 = v130;
                        v195 = v133;
                        if (v133)
                        {
                          __int128 v134 = [v133 BOOLValue];
                          LOBYTE(v135) = (_BYTE)v134;
                          __int128 v136 = v134;
LABEL_189:
                          [v127 realm];
                          v154 = (*((uint64_t (**)(void))v2->_accountBuilder + 2))();
                          v155 = (__CFString *)objc_claimAutoreleasedReturnValue(v154);
                          -[__CFString setUserUniqueIdentifier:](v155, "setUserUniqueIdentifier:", v210);
                          if ([v127 realm] == (id)2)
                          {
                            -[__CFString setIsTemporary:](v155, "setIsTemporary:", 1LL);
                            v156 = (void *)objc_claimAutoreleasedReturnValue([v127 unprefixedIdentifier]);
                            -[__CFString setLoginID:](v155, "setLoginID:", v156);

                            if ([v127 hasBeenProvisioned])
                            {
                              v157 = (void *)objc_claimAutoreleasedReturnValue([v127 expirationDate]);
                              -[__CFString setExpirationDate:](v155, "setExpirationDate:", v157);
                            }
                          }

                          if ([v127 realm] == (id)3)
                          {
                            v158 = (void *)objc_claimAutoreleasedReturnValue([v127 unprefixedIdentifier]);
                            -[__CFString setLoginID:](v155, "setLoginID:", v158);

                            v159 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString identifier](v198, "identifier"));
                            v160 = [v159 isEqualToString:@"com.apple.private.alloy.facetime.multi"];

                            if (v160) {
                              +[IDSDeviceAccountMigration migrateATVToSupportDeviceAccountsIfNeededWithAccountController:serviceController:]( &OBJC_CLASS___IDSDeviceAccountMigration,  "migrateATVToSupportDeviceAccountsIfNeededWithAccountController:serviceController:",  v2->_accountController,  v2->_serviceController);
                            }
                          }

                          -[IDSDAccountController addAccount:](v2->_accountController, "addAccount:", v155);
                          if ((v135 & 1) != 0)
                          {
                            v161 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                            p_cache = (void **)(&OBJC_CLASS___IDSActivityPushListener + 16);
                            if (os_log_type_enabled(v161, OS_LOG_TYPE_DEFAULT))
                            {
                              *(_DWORD *)buf = 138412546;
                              v249 = v210;
                              v250 = 2112;
                              v251 = v155;
                              _os_log_impl( (void *)&_mh_execute_header,  v161,  OS_LOG_TYPE_DEFAULT,  "Disabling account {uniqueIdentifier: %@, account: %@}",  buf,  0x16u);
                            }

                            v162 = v2->_accountController;
                            v163 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString uniqueID](v155, "uniqueID"));
                            -[IDSDAccountController disableAccountWithUniqueID:]( v162,  "disableAccountWithUniqueID:",  v163);

                            -[__CFString setIsUserDisabled:](v155, "setIsUserDisabled:", v136);
                          }

                          else
                          {
                            v164 = v2->_accountController;
                            v165 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString uniqueID](v155, "uniqueID"));
                            -[IDSDAccountController enableAccountWithUniqueID:]( v164,  "enableAccountWithUniqueID:",  v165);

                            -[__CFString registerAccount](v155, "registerAccount");
                            p_cache = (void **)(&OBJC_CLASS___IDSActivityPushListener + 16);
                          }

                          uint64_t v122 = v198;
                          uint64_t v125 = v200;
                          __int128 v130 = v196;
                          goto LABEL_201;
                        }

                        __int128 v139 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDAccountController accountsOnService:]( v2->_accountController,  "accountsOnService:",  v122));
                        v191 = v139;
                        if ([v139 count])
                        {
                          v213 = 0u;
                          v214 = 0u;
                          v211 = 0u;
                          v212 = 0u;
                          __int128 v140 = v139;
                          __int128 v141 = [v140 countByEnumeratingWithState:&v211 objects:v244 count:16];
                          if (v141)
                          {
                            v142 = v141;
                            v143 = 0;
                            v144 = 0;
                            v145 = 0;
                            __int16 v146 = 0;
                            v147 = *(void *)v212;
                            do
                            {
                              for (j = 0LL; j != v142; j = (char *)j + 1)
                              {
                                if (*(void *)v212 != v147) {
                                  objc_enumerationMutation(v140);
                                }
                                v149 = *(void **)(*((void *)&v211 + 1) + 8LL * (void)j);
                                if ((![v127 realm] || objc_msgSend(v127, "realm") == (id)2)
                                  && ![v149 accountType]
                                  || [v127 realm] == (id)3
                                  && [v149 accountType] == 3)
                                {
                                  v144 = [v149 isUserDisabled];
                                  v143 |= v144;
                                  __int16 v146 = 1;
                                }

                                else if ((v145 & 1) != 0)
                                {
                                  v145 = 1;
                                }

                                else
                                {
                                  v145 = [v149 isUserDisabled];
                                }
                              }

                              v142 = [v140 countByEnumeratingWithState:&v211 objects:v244 count:16];
                            }

                            while (v142);

                            if ((v143 & 1) != 0)
                            {
                              LOBYTE(v135) = 1;
                              uint64_t v115 = (void *)v184;
                              goto LABEL_187;
                            }

                            uint64_t v115 = (void *)v184;
                          }

                          else
                          {

                            __int16 v146 = 0;
                            v145 = 0;
                            v144 = 0;
                          }

                          LOBYTE(v135) = (v146 ^ 1) & v145;
LABEL_187:
                          __int128 v136 = (id)(v144 & 1);
                          uint64_t v2 = v186;
                        }

                        else
                        {
                          v150 = (void *)objc_claimAutoreleasedReturnValue( -[IDSUserAccountSynchronizer cachedDisabledByService]( v2,  "cachedDisabledByService"));
                          v151 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString identifier](v122, "identifier"));
                          v152 = (void *)objc_claimAutoreleasedReturnValue([v150 objectForKeyedSubscript:v151]);
                          __int128 v135 = [v152 BOOLValue];

                          v153 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString identifier](v122, "identifier"));
                          -[NSMutableDictionary setObject:forKeyedSubscript:]( v193,  "setObject:forKeyedSubscript:",  &__kCFBooleanFalse,  v153);

                          __int128 v136 = v135;
                        }

                        goto LABEL_189;
                      }
                    }
                  }

      uint64_t v97 = v94 + 1;
      if (__OFADD__(v94, 1LL)) {
        goto LABEL_82;
      }
      if (v97 < v151)
      {
        uint64_t v98 = *(void *)(v147 + 8 * v97);
        ++v94;
        if (v98) {
          goto LABEL_66;
        }
        uint64_t v94 = v97 + 1;
        if (v97 + 1 < v151)
        {
          uint64_t v98 = *(void *)(v147 + 8 * v94);
          if (v98) {
            goto LABEL_66;
          }
          uint64_t v94 = v97 + 2;
          if (v97 + 2 < v151)
          {
            uint64_t v98 = *(void *)(v147 + 8 * v94);
            if (v98) {
              goto LABEL_66;
            }
            uint64_t v99 = v97 + 3;
            if (v99 < v151)
            {
              uint64_t v98 = *(void *)(v147 + 8 * v99);
              if (v98)
              {
                uint64_t v94 = v99;
LABEL_66:
                double v55 = (v98 - 1) & v98;
                uint64_t v96 = __clz(__rbit64(v98)) + (v94 << 6);
                goto LABEL_67;
              }

              while (1)
              {
                uint64_t v94 = v99 + 1;
                if (__OFADD__(v99, 1LL)) {
                  goto LABEL_84;
                }
                if (v94 >= v151) {
                  break;
                }
                uint64_t v98 = *(void *)(v147 + 8 * v94);
                ++v99;
                if (v98) {
                  goto LABEL_66;
                }
              }
            }
          }
        }
      }

      swift_release(v49);
      double v12 = (uint64_t)v144;
      uint64_t v108 = *(void *)&v144[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_sendGenerationCount];
      __int16 v49 = v108 + 1;
    }

    while (__OFADD__(v108, 1LL));
    *(void *)&v144[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_sendGenerationCount] = v49;
    uint64_t v109 = *(os_unfair_lock_s **)&v138[v137];
    swift_retain(v109);
    os_unfair_lock_unlock(v109 + 4);
    swift_release(v109);
    uint64_t v110 = v12 + OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_handlers;
    swift_beginAccess( v12 + OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_handlers,  &v157,  0LL,  0LL);
    uint64_t v111 = *(void *)v110;
    uint64_t v112 = *(void *)(*(void *)v110 + 16LL);
    if (v112)
    {
      uint64_t v113 = v111 + 32;
      v149 = *(void *)v110;
      uint64_t v114 = swift_bridgeObjectRetain(v111);
      v114.n128_u64[0] = 136315138LL;
      v152 = v114;
      v151 = v136 | 0x8000000000000000LL;
      v150 = (char *)&type metadata for Any + 8;
      uint64_t v115 = v144;
      uint64_t v116 = v142;
      uint64_t v117 = v141;
      do
      {
        uint64_t v118 = sub_100425540(v113, (uint64_t)v156);
        uint64_t v119 = (os_log_s *)Logger.logObject.getter(v118);
        uint64_t v120 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v119, v120))
        {
          uint64_t v121 = swift_slowAlloc(12LL, -1LL);
          uint64_t v122 = swift_slowAlloc(32LL, -1LL);
          aBlock[0] = v122;
          *(_DWORD *)uint64_t v121 = v152.n128_u32[0];
          *(void *)(v121 + 4) = sub_1003FFBB0(0xD00000000000001FLL, v151, aBlock);
          _os_log_impl((void *)&_mh_execute_header, v119, v120, "%s: sending to handler", (uint8_t *)v121, 0xCu);
          swift_arrayDestroy(v122, 1LL, v150);
          swift_slowDealloc(v122, -1LL, -1LL);
          swift_slowDealloc(v121, -1LL, -1LL);
        }

        Strong = swift_unknownObjectWeakLoadStrong(v156);
        if (Strong)
        {
          uint64_t v124 = (void *)Strong;
          sub_10041D3C4(0LL, &qword_1009B9978, &OBJC_CLASS___IDSQRProtoMaterial_ptr);
          isa = Array._bridgeToObjectiveC()().super.isa;
          __int128 v126 = (void *)swift_allocObject(&unk_100905890, 48LL, 7LL);
          v126[2] = v115;
          v126[3] = v49;
          v126[4] = v116;
          v126[5] = v117;
          aBlock[4] = (uint64_t)sub_100425DDC;
          v155 = v126;
          aBlock[0] = (uint64_t)_NSConcreteStackBlock;
          aBlock[1] = 1107296256LL;
          aBlock[2] = (uint64_t)sub_10041FAB8;
          aBlock[3] = (uint64_t)&unk_1009058A8;
          __int128 v127 = _Block_copy(aBlock);
          __int128 v128 = v155;
          __int128 v129 = v115;
          swift_bridgeObjectRetain(v116);
          swift_bridgeObjectRetain(v117);
          swift_release(v128);
          [v124 qrMaterialExchangePutMaterial:isa completionHandler:v127];
          _Block_release(v127);
          swift_unknownObjectRelease(v124, v130);
        }

        sub_10041C0A0((uint64_t)v156);
        v113 += 8LL;
        --v112;
      }

      while (v112);
      swift_bridgeObjectRelease(v143);
      __int128 v131 = v142;
      __int128 v132 = v149;
    }

    else
    {
      __int128 v132 = v142;
      __int128 v131 = v143;
    }

    swift_bridgeObjectRelease(v131);
    swift_bridgeObjectRelease(v132);
    return swift_bridgeObjectRelease(v141);
  }

  else
  {
    swift_bridgeObjectRelease(v32);
    uint64_t v38 = *(os_unfair_lock_s **)&v138[v137];
    swift_retain(v38);
    os_unfair_lock_unlock(v38 + 4);
    return swift_release(v38);
  }

void sub_100047E04(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "connectionDidReachInFlightMessageLowWaterMark:") & 1) != 0) {
    [v3 connectionDidReachInFlightMessageLowWaterMark:*(void *)(a1 + 32)];
  }
}

void sub_100048598(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "connectionBecameEmpty:") & 1) != 0) {
    [v3 connectionBecameEmpty:*(void *)(a1 + 32)];
  }
}

void sub_100048828(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 40LL));
    uint64_t v3 = *(void *)(a1 + 32);
    if (!*(_BYTE *)(v3 + 140))
    {
      *(_BYTE *)(v3 + 140) = 1;
      IDSTransportThreadResumeSocketWithPriority( *(unsigned int *)(*(void *)(a1 + 32) + 136LL),  2LL,  *(void *)(*(void *)(a1 + 32) + 160LL));
      uint64_t v3 = *(void *)(a1 + 32);
    }

    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 40));
  }

void sub_100048A5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "connectionDidClose:") & 1) != 0) {
    [v3 connectionDidClose:*(void *)(a1 + 32)];
  }
}

void sub_100048DD4(id a1)
{
  mach_timebase_info info = (mach_timebase_info)0xAAAAAAAAAAAAAAAALL;
  mach_timebase_info(&info);
  LODWORD(v2) = info.denom;
  LODWORD(v1) = info.numer;
  *(double *)&qword_1009BE850 = (double)v1 / (double)v2 / 1000000000.0;
}

BOOL sub_100049058(id a1, ACAccount *a2)
{
  unint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[ACAccount accountPropertyForKey:](a2, "accountPropertyForKey:", @"primaryAccount"));
  unsigned __int8 v3 = [v2 BOOLValue];

  return v3;
}

BOOL sub_100049118(id a1, ACAccount *a2)
{
  return -[ACAccount isActive](a2, "isActive");
}

BOOL sub_100049188(id a1, ACAccount *a2)
{
  unint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[ACAccount accountPropertyForKey:](a2, "accountPropertyForKey:", @"primaryAccount"));
  unsigned __int8 v3 = [v2 BOOLValue];

  return v3;
}

BOOL sub_100049230(id a1, ACAccount *a2)
{
  return -[ACAccount isActive](a2, "isActive");
}

void sub_100049310(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    uint64_t v9 = (NSError *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _systemAccountRepresentationOfACAccount:v5 DSIDKey:*(void *)(a1 + 40)]);
    int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138412546;
      uint64_t v17 = v12;
      __int16 v18 = 2112;
      double v19 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Done checking for system signed in account { identifier: %@, systemAccount: %@ }",  buf,  0x16u);
    }

    uint64_t v13 = *(void *)(a1 + 56);
    if (!v13) {
      goto LABEL_9;
    }
    id v10 = *(void (**)(void))(v13 + 16);
LABEL_8:
    v10();
LABEL_9:

    goto LABEL_10;
  }

  if (*(void *)(a1 + 56))
  {
    uint64_t v7 = objc_alloc(&OBJC_CLASS___NSError);
    NSErrorUserInfoKey v14 = NSUnderlyingErrorKey;
    id v15 = v6;
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
    uint64_t v9 = -[NSError initWithDomain:code:userInfo:]( v7,  "initWithDomain:code:userInfo:",  @"IDSSystemAccountAdapterErrorDomain",  -1000LL,  v8);

    id v10 = *(void (**)(void))(*(void *)(a1 + 56) + 16LL);
    goto LABEL_8;
  }

LABEL_10:
}

    uint64_t v13 = v6 < 0.0;
    if (v6 < 0.0)
    {
      NSErrorUserInfoKey v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = 134217984;
        uint64_t v17 = fabs(v6);
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "*************** Heartbeat: We need to register now! {timeToNextRegister: %f} *********************",  (uint8_t *)&v16,  0xCu);
      }
    }

    if (a4) {
      goto LABEL_22;
    }
    goto LABEL_23;
  }

  if (+[IDSRegistrationController validSIMStateForRegistration]( &OBJC_CLASS___IDSRegistrationController,  "validSIMStateForRegistration"))
  {
    goto LABEL_10;
  }

  int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_19;
  }
  uint64_t v16 = 138412290;
  uint64_t v17 = *(double *)&v5;
  uint64_t v12 = "Skipping this registration for heartbeat consideration, it is an SMS one - and the SIM is not present: %@";
LABEL_18:
  _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v16, 0xCu);
LABEL_19:

  uint64_t v13 = 0;
  if (a4)
  {
    if (v6 < 14400.0) {
      id v6 = 14400.0;
    }
LABEL_22:
    *a4 = v6;
  }
}

    goto LABEL_11;
  }

  if (a5 == 18
    && ([v9 runningSimpleAuthentication] & 1) == 0
    && [v9 registrationType] == 1)
  {
    if ((int)[v9 retries] <= 3)
    {
      objc_msgSend(v9, "setRetries:", objc_msgSend(v9, "retries") + 1);
      [v9 setRegistrationCert:0];
      [v9 setUris:0];
      [v9 setRegistrationStatus:3];
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSAppleIDRegistrationCenter sharedInstance]( &OBJC_CLASS___IDSAppleIDRegistrationCenter,  "sharedInstance"));
      -[os_log_s authenticateRegistration:forceNewToken:](v13, "authenticateRegistration:forceNewToken:", v9, 1LL);
      goto LABEL_10;
    }

    [v9 setRetries:0];
  }

  uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    double v21 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Authentication failed. Notifying, and unregistering %@",  buf,  0xCu);
  }

  -[IDSRegistrationController _notifyRegistrationFailure:error:info:]( self,  "_notifyRegistrationFailure:error:info:",  v9,  a5,  v10);
LABEL_11:
}

  if (-[NSMutableSet count](v22, "count")) {
    int v29 = 1;
  }
  else {
    int v29 = -[NSMutableSet count](v23, "count") != 0LL;
  }
  uint64_t v79 = v23;
  if (-[NSMutableSet count](v24, "count")) {
    int v30 = 1;
  }
  else {
    int v30 = -[NSMutableSet count](v80, "count") != 0LL;
  }
  uint64_t v31 = objc_autoreleasePoolPush();
  if ((v12 & 1) == 0 && [v82 count])
  {
    if (v29)
    {
      if (!v22) {
        __int128 v22 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
      }
      int v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v82, "__imSetFromArray"));
      -[NSMutableSet unionSet:](v22, "unionSet:", v32);
    }

    if (v30)
    {
      if (!v24) {
        id v24 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
      }
      int v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v82, "__imSetFromArray"));
      -[NSMutableSet unionSet:](v24, "unionSet:", v33);
    }
  }

  if ((v20 & 1) == 0 && [v81 count])
  {
    if (v29)
    {
      if (!v79) {
        uint64_t v79 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
      }
      double v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v81, "__imSetFromArray"));
      -[NSMutableSet unionSet:](v79, "unionSet:", v34);
    }

    if (v30)
    {
      if (!v24) {
        id v24 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
      }
      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v81, "__imSetFromArray"));
      -[NSMutableSet unionSet:](v24, "unionSet:", v35);
    }
  }

  objc_autoreleasePoolPop(v31);
  if (self->_groupSessionState == 1 && (v29 || v30))
  {
    double v36 = OSLogHandleForTransportCategory("IDSDSession");
    int v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
      id v39 = objc_claimAutoreleasedReturnValue([v38 groupID]);
      uint32_t v40 = (void *)v39;
      uint64_t v41 = @"NO";
      if (v29) {
        uint64_t v42 = @"YES";
      }
      else {
        uint64_t v42 = @"NO";
      }
      *(_DWORD *)buf = 138412802;
      uint64_t v105 = v39;
      uint64_t v107 = v42;
      uint64_t v106 = 2112;
      if (v30) {
        uint64_t v41 = @"YES";
      }
      uint64_t v108 = 2112;
      uint64_t v109 = v41;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "setRequiredCapabilities triggered leave to unsupported members {groupID: %@, needToSendJoin: %@, needToSendLeave: %@}",  buf,  0x20u);
    }

    uint64_t v44 = os_log_shim_legacy_logging_enabled(v43);
    if ((_DWORD)v44)
    {
      uint64_t v44 = _IDSShouldLogTransport(v44);
      if ((_DWORD)v44)
      {
        unsigned int v46 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
        __int16 v47 = (void *)objc_claimAutoreleasedReturnValue([v46 groupID]);
        if (v29) {
          unint64_t v48 = @"YES";
        }
        else {
          unint64_t v48 = @"NO";
        }
        if (v30) {
          __int16 v49 = @"YES";
        }
        else {
          __int16 v49 = @"NO";
        }
        _IDSLogTransport( @"IDSDSession",  @"IDS",  @"setRequiredCapabilities triggered leave to unsupported members {groupID: %@, needToSendJoin: %@, needToSendLeave: %@}");

        uint64_t v44 = _IDSShouldLog(0LL, @"IDSDSession");
        if ((_DWORD)v44)
        {
          __int16 v50 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState", v47, v48, v49));
          uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue([v50 groupID]);
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"setRequiredCapabilities triggered leave to unsupported members {groupID: %@, needToSendJoin: %@, needToSendLeave: %@}");
        }
      }
    }

    id v51 = im_primary_queue(v44, v45);
    __int16 v52 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v51);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10009604C;
    block[3] = &unk_1008F8CC8;
    uint64_t v88 = v30;
    block[4] = self;
    uint64_t v84 = v24;
    uint64_t v85 = v80;
    uint64_t v89 = v29;
    uint64_t v86 = v22;
    uint64_t v87 = v79;
    double v53 = dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT,  QOS_CLASS_USER_INITIATED,  0,  block);
    dispatch_async(v52, v53);
  }

  else
  {
    __int16 v54 = OSLogHandleForTransportCategory("IDSDSession");
    double v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
      __int128 v57 = objc_claimAutoreleasedReturnValue([v56 groupID]);
      __int128 v58 = (void *)v57;
      __int16 v59 = @"NO";
      groupSessionState = self->_groupSessionState;
      *(_DWORD *)buf = 138413058;
      if (v29) {
        __int16 v61 = @"YES";
      }
      else {
        __int16 v61 = @"NO";
      }
      uint64_t v105 = v57;
      if (v30) {
        __int16 v59 = @"YES";
      }
      uint64_t v106 = 2112;
      uint64_t v107 = v61;
      uint64_t v108 = 2112;
      uint64_t v109 = v59;
      uint64_t v110 = 1024;
      uint64_t v111 = groupSessionState;
      _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "setRequiredCapabilities not triggering a leave to unsupported members {groupID: %@, needToSendJoin: %@, needToSe ndLeave: %@, groupSessionState: %d}",  buf,  0x26u);
    }

    __int16 v63 = os_log_shim_legacy_logging_enabled(v62);
    if ((_DWORD)v63 && _IDSShouldLogTransport(v63))
    {
      uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
      __int16 v65 = (void *)objc_claimAutoreleasedReturnValue([v64 groupID]);
      uint64_t v66 = v29 ? @"YES" : @"NO";
      __int16 v67 = v30 ? @"YES" : @"NO";
      __int16 v71 = self->_groupSessionState;
      _IDSLogTransport( @"IDSDSession",  @"IDS",  @"setRequiredCapabilities not triggering a leave to unsupported members {groupID: %@, needToSendJoin: %@, needToSendLeave: %@, groupSessionState: %d}");

      if (_IDSShouldLog(0LL, @"IDSDSession"))
      {
        unint64_t v68 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState", v65, v66, v67, v71));
        __int16 v69 = (void *)objc_claimAutoreleasedReturnValue([v68 groupID]);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"setRequiredCapabilities not triggering a leave to unsupported members {groupID: %@, needToSendJoin: %@, needToSendLeave: %@, groupSessionState: %d}");
      }
    }
  }

  objc_autoreleasePoolPop(context);
}

    goto LABEL_11;
  }

  if (v9)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 clientUUID]);
    *(_DWORD *)buf = 138412290;
    __int16 v18 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Assigning empty nexus data message for client UUID %@",  buf,  0xCu);
  }

  int v11 = (void *)objc_claimAutoreleasedReturnValue(-[IDSTransportLevelAgent registration](self->_agent, "registration"));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v7, v16));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v6 clientUUID]);
  NSErrorUserInfoKey v14 = [v11 assignNexusData:v12 toClient:v13];

  free(v7);
  if ((v14 & 1) == 0)
  {
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      id v15 = "resetConnection: assignNexusData:toClient: failed";
LABEL_9:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v15, buf, 2u);
      goto LABEL_10;
    }

    goto LABEL_10;
  }

  return v2;
}

  double v21 = OSLogHandleForTransportCategory("UGL");
  __int128 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    if (v20 > 0xF) {
      double v23 = "UnexpectedSendResult";
    }
    else {
      double v23 = (const char *)_IDSLinkSendResultStrings[v20];
    }
    *(_DWORD *)buf = 134218242;
    uint64_t v31 = var2;
    int v32 = 2080;
    int v33 = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "sending a packet (%zdB) = %s", buf, 0x16u);
  }

  uint64_t v26 = os_log_shim_legacy_logging_enabled(v25);
  if ((_DWORD)v26)
  {
    if (_IDSShouldLogTransport(v26))
    {
      _IDSLogTransport(@"UGL", @"IDS", @"sending a packet (%zdB) = %s");
    }
  }

  return v20;
}

    goto LABEL_11;
  }

  if (-[IDSDAccount isAdHocAccount](self, "isAdHocAccount"))
  {
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = (__CFString *)objc_claimAutoreleasedReturnValue(-[IDSDAccount primaryAccount](self, "primaryAccount"));
      *(_DWORD *)buf = 138412290;
      unsigned int v46 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, " => Forwarding to Primary: %@", buf, 0xCu);
    }

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount primaryAccount](self, "primaryAccount"));
    [v9 _registerAccount];
  }

  else if (+[IDSRegistrationController canStartRegistrationForAccountType:]( &OBJC_CLASS___IDSRegistrationController,  "canStartRegistrationForAccountType:",  -[IDSDAccount accountType](self, "accountType")))
  {
    id v10 = objc_claimAutoreleasedReturnValue(+[IDSRestoreMonitor sharedInstance](&OBJC_CLASS___IDSRestoreMonitor, "sharedInstance"));
    [(id)v10 removeTarget:self];

    -[IDSDAccount _migrateRegistrationIfNeeded](self, "_migrateRegistrationIfNeeded");
    int v11 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationPushHandler pushToken](self->_pushHandler, "pushToken"));
    LOBYTE(v10) = v11 == 0LL;

    if ((v10 & 1) != 0)
    {
      double v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog pushToken](&OBJC_CLASS___IMRGLog, "pushToken"));
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v22 = (__CFString *)(id)objc_claimAutoreleasedReturnValue(-[IDSRegistration pushToken](self->_registrationInfo, "pushToken"));
        double v23 = (IDSDAccount *)(id)objc_claimAutoreleasedReturnValue(-[IDSRegistrationPushHandler pushToken](self->_pushHandler, "pushToken"));
        uint64_t v25 = IMGetEnvironmentName(v23, v24);
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
        *(_DWORD *)buf = 138412802;
        unsigned int v46 = v22;
        __int16 v47 = 2112;
        unint64_t v48 = v23;
        __int16 v49 = 2112;
        __int16 v50 = v26;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Asked to register, but haven't received push token yet, waiting... (Mine: %@  APSD: %@  Env: %@)",  buf,  0x20u);
      }

      if (!-[IDSRegistration registrationStatus](self->_registrationInfo, "registrationStatus"))
      {
        -[IDSRegistration setRegistrationStatus:](self->_registrationInfo, "setRegistrationStatus:", 2LL);
        -[IDSDAccount _updateRegistrationStatusWithError:info:]( self,  "_updateRegistrationStatusWithError:info:",  -1LL,  0LL);
      }
    }

    else
    {
      registrationInfo = self->_registrationInfo;
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationPushHandler pushToken](self->_pushHandler, "pushToken"));
      -[IDSRegistration setPushToken:](registrationInfo, "setPushToken:", v13);

      if (-[IDSRegistration registrationStatus](self->_registrationInfo, "registrationStatus") <= 5) {
        -[IDSRegistration setVettedEmails:](self->_registrationInfo, "setVettedEmails:", 0LL);
      }
      -[IDSRegistration setNeedsMigration:](self->_registrationInfo, "setNeedsMigration:", 0LL);
      NSErrorUserInfoKey v14 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount systemMonitor](self, "systemMonitor"));
      id v15 = [v14 isUnderFirstDataProtectionLock];

      if (v15)
      {
        uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Device is still under first data protection lock, deferring request",  buf,  2u);
        }

        *((_BYTE *)self + 81) |= 1u;
      }

      else
      {
        uint64_t v41 = 0u;
        uint64_t v42 = 0u;
        id v39 = 0u;
        uint32_t v40 = 0u;
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDAccount _unprefixedURIStringsFromAccountInfo]( self,  "_unprefixedURIStringsFromAccountInfo"));
        uint64_t v28 = [v27 countByEnumeratingWithState:&v39 objects:v51 count:16];
        if (v28)
        {
          int v30 = *(void *)v40;
          *(void *)&int v29 = 138412290LL;
          uint64_t v38 = v29;
          do
          {
            for (i = 0LL; i != v28; i = (char *)i + 1)
            {
              if (*(void *)v40 != v30) {
                objc_enumerationMutation(v27);
              }
              int v32 = *(const __CFString **)(*((void *)&v39 + 1) + 8LL * (void)i);
              if ((id)-[IDSDAccount _validationStatusForAlias:](self, "_validationStatusForAlias:", v32, v38) == (id)3)
              {
                int v33 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration candidateEmails](self->_registrationInfo, "candidateEmails"));
                if ([v33 containsObject:v32])
                {
                }

                else
                {
                  double v34 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration confirmedEmails](self->_registrationInfo, "confirmedEmails"));
                  uint64_t v35 = [v34 containsObject:v32];

                  if ((v35 & 1) == 0)
                  {
                    double v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = v38;
                      unsigned int v46 = v32;
                      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "We were missing candidate alias: %@, adding it",  buf,  0xCu);
                    }

                    -[IDSRegistration addCandidateEmail:](self->_registrationInfo, "addCandidateEmail:", v32);
                  }
                }
              }
            }

            uint64_t v28 = [v27 countByEnumeratingWithState:&v39 objects:v51 count:16];
          }

          while (v28);
        }

        int v37 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationController sharedInstance]( &OBJC_CLASS___IDSRegistrationController,  "sharedInstance"));
        objc_msgSend( v37,  "registerInfo:requireSilentAuth:",  self->_registrationInfo,  -[IDSDAccount _isPasswordPromptPermissibleDuringAuthentication]( self,  "_isPasswordPromptPermissibleDuringAuthentication") ^ 1);
      }
    }
  }

  else
  {
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      unsigned int v46 = @"NO";
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Asked to register, but haven't completed upgrade/restore, current state: %@",  buf,  0xCu);
    }

    -[IDSRegistration setRegistrationStatus:](self->_registrationInfo, "setRegistrationStatus:", 1LL);
    -[IDSDAccount _updateRegistrationStatusWithError:info:](self, "_updateRegistrationStatusWithError:info:", -1LL, 0LL);
    __int16 v18 = (void *)objc_claimAutoreleasedReturnValue(+[IDSRestoreMonitor sharedInstance](&OBJC_CLASS___IDSRestoreMonitor, "sharedInstance"));
    double v19 = [v18 hasActionForTarget:self];

    if ((v19 & 1) == 0)
    {
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[IDSRestoreMonitor sharedInstance](&OBJC_CLASS___IDSRestoreMonitor, "sharedInstance"));
      [v20 addTarget:self actionBlock:&stru_1008FDA28];
    }
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v4));

  return v16;
}

    goto LABEL_11;
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
    sub_1006A44D0(a4, v10);
  }

  switch(a4)
  {
    case 6001LL:
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_1006A43C8();
      }
      goto LABEL_10;
    case 6002LL:
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_1006A43F4();
      }
      goto LABEL_10;
    case 6003LL:
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_1006A4420();
      }
      goto LABEL_10;
    case 6005LL:
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_1006A444C();
      }
      goto LABEL_10;
    case 6008LL:
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_1006A4478();
      }
      goto LABEL_10;
    case 6009LL:
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_1006A44A4();
      }
      goto LABEL_10;
    default:
      break;
  }

LABEL_19:
    int v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSPinnedIdentity](&OBJC_CLASS___IDSFoundationLog, "IDSPinnedIdentity"));
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
      sub_1006A925C();
    }

    id v8 = v38;
    if ((_os_feature_enabled_impl("IDS", "PinnedIdentityEnforcement") & 1) != 0)
    {
      double v19 = 0LL;
LABEL_23:
      int v30 = 0;
LABEL_39:

      goto LABEL_40;
    }

    uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSPinnedIdentity](&OBJC_CLASS___IDSFoundationLog, "IDSPinnedIdentity"));
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Hit failure, but enforcement FF is disabled. Returning YES.",  buf,  2u);
    }

    double v19 = 0LL;
LABEL_37:

LABEL_38:
    int v30 = 1;
    goto LABEL_39;
  }

  uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSPinnedIdentity](&OBJC_CLASS___IDSFoundationLog, "IDSPinnedIdentity"));
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
    sub_1006A91E8();
  }

  if ((_os_feature_enabled_impl("IDS", "PinnedIdentityEnforcement") & 1) == 0)
  {
    double v19 = (id)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSPinnedIdentity](&OBJC_CLASS___IDSFoundationLog, "IDSPinnedIdentity"));
    if (os_log_type_enabled((os_log_t)v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v19,  OS_LOG_TYPE_DEFAULT,  "Hit failure, but enforcement FF is disabled. Returning YES.",  buf,  2u);
    }

    goto LABEL_38;
  }

  int v30 = 0;
LABEL_40:

  return v30;
}

  return Mutable;
}

  uint64_t v12 = *v4;
  *(void *)(*v4 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  uint64_t v13 = (Swift::Int *)(*(void *)(v12 + 48) + 16 * a3);
  *uint64_t v13 = v7;
  v13[1] = a2;
  NSErrorUserInfoKey v14 = *(void *)(v12 + 16);
  id v15 = __OFADD__(v14, 1LL);
  uint64_t v16 = v14 + 1;
  if (v15)
  {
    __break(1u);
    JUMPOUT(0x100472624LL);
  }

  *(void *)(v12 + 16) = v16;
  return result;
}

  __int16 v49 = *v56;
  *(void *)(*v56 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = sub_1003F600C( (uint64_t)a1,  *(void *)(v49 + 48) + *(void *)(v55 + 72) * a2,  type metadata accessor for SenderKeyInfo);
  id v51 = *(void *)(v49 + 16);
  __int16 v52 = __OFADD__(v51, 1LL);
  double v53 = v51 + 1;
  if (v52)
  {
    __break(1u);
    JUMPOUT(0x100473D40LL);
  }

  *(void *)(v49 + 16) = v53;
  return result;
}

  __int128 v130 = v6;
  double v55 = *(void **)((char *)v42
                   + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_mkmController);
  __int128 v131 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v42) + 0x180LL);
  uint64_t v56 = v131(v41);
  __int128 v57 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v55) + 0x170LL);
  __int128 v135 = v55;
  LODWORD(v134) = v57(v56);
  __int128 v58 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v137) + 0xE8LL))(v140);
  __int16 v59 = (*(uint64_t (**)(void))((swift_isaMask & *v42) + 0x108LL))();
  __int16 v61 = v59;
  double v62 = _swiftEmptyArrayStorage;
  if (!v59) {
    goto LABEL_34;
  }
  __int16 v63 = v60;
  __int128 v137 = (void *)v58;
  ObjectType = swift_getObjectType(v59);
  __int16 v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 8))(ObjectType, v63);
  swift_unknownObjectRelease(v61, v65);
  if ((v47 & 0xC000000000000001LL) == 0)
  {
    unint64_t v68 = *(void *)(v47 + 16);
    if (v68)
    {
      v145 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v68);
      v142 = sub_1004382EC(v47);
      v143 = v70;
      v144 = v71 & 1;
      goto LABEL_21;
    }

    goto LABEL_32;
  }

  if (v47 < 0) {
    uint64_t v66 = v47;
  }
  else {
    uint64_t v66 = v47 & 0xFFFFFFFFFFFFFF8LL;
  }
  __int16 v67 = __CocoaSet.count.getter(v66);
  if (!v67)
  {
LABEL_32:
    swift_bridgeObjectRelease(v47);
LABEL_33:
    __int128 v58 = (uint64_t)v137;
LABEL_34:
    uint64_t v92 = sub_100496018((uint64_t)v62);
    swift_bridgeObjectRelease(v62);
    uint64_t v93 = (uint64_t)sub_100492274(v58, v92);
    uint64_t v94 = v93;
    if ((v93 & 0xC000000000000001LL) != 0)
    {
      if (v93 >= 0) {
        v93 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      uint64_t v95 = __CocoaSet.count.getter(v93);
    }

    else
    {
      uint64_t v95 = *(void *)(v93 + 16);
    }

    swift_bridgeObjectRelease(v94);
    if (v95)
    {
      if ((v58 & 0xC000000000000001LL) != 0)
      {
        if (v58 < 0) {
          uint64_t v96 = v58;
        }
        else {
          uint64_t v96 = v58 & 0xFFFFFFFFFFFFFF8LL;
        }
        uint64_t v97 = __CocoaSet.count.getter(v96);
      }

      else
      {
        uint64_t v97 = *(void *)(v58 + 16);
      }

      swift_bridgeObjectRelease(v58);
      uint64_t v98 = v97 > 0;
    }

    else
    {
      swift_bridgeObjectRelease(v58);
      uint64_t v98 = 1;
    }

    LODWORD(v139) = v98;
    uint64_t v99 = (void *)((char *)v42 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_l);
    uint64_t v100 = v42;
    uint64_t v101 = (os_log_s *)Logger.logObject.getter(v100);
    uint64_t v102 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v101, v102))
    {
      uint64_t v103 = swift_slowAlloc(44LL, -1LL);
      uint64_t v104 = swift_slowAlloc(32LL, -1LL);
      v141[0] = v104;
      *(_DWORD *)uint64_t v103 = 136316162;
      v142 = sub_1003FFBB0(0xD000000000000020LL, 0x8000000100842150LL, v141);
      __int128 v137 = v99;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v103 + 4, v103 + 12);
      *(_WORD *)(v103 + 12) = 1024;
      LODWORD(v142) = v134 & 1;
      uint64_t v105 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, (char *)&v142 + 4, v103 + 14, v103 + 18);
      *(_WORD *)(v103 + 1_Block_object_dispose((const void *)(v1 - 96), 8) = 2048;
      v142 = v131(v105);
      uint64_t v106 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v103 + 20, v103 + 28);
      *(_WORD *)(v103 + 2_Block_object_dispose((const void *)(v1 - 96), 8) = 2048;
      uint64_t v107 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v135) + 0x128LL))(v106);

      v142 = v107;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v103 + 30, v103 + 38);

      *(_WORD *)(v103 + 3_Block_object_dispose((const void *)(v1 - 96), 8) = 1024;
      LODWORD(v142) = v139;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, (char *)&v142 + 4, v103 + 40, v103 + 44);
      _os_log_impl( (void *)&_mh_execute_header,  v101,  v102,  "%s: hasHardRollOccurred:%{BOOL}d (%llu < %llu) hasSentToAnyone:%{BOOL}d",  (uint8_t *)v103,  0x2Cu);
      swift_arrayDestroy(v104, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v104, -1LL, -1LL);
      swift_slowDealloc(v103, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v108 = (uint64_t)v136;
    uint64_t v109 = *(void **)((char *)v100
                    + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_idsdSessionProvider);
    uint64_t v110 = String._bridgeToObjectiveC()();
    uint64_t v111 = [v109 sessionWithUniqueID:v110];

    if (v111)
    {
      uint64_t v112 = (*(uint64_t (**)(void))((swift_isaMask & *v135) + 0x1E0LL))();
      if (v112)
      {
        uint64_t v114 = (void *)v112;
        if (((v134 | v139) & 1) != 0)
        {
          uint64_t v115 = sub_1003F5FC8(v140, v108, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          uint64_t v116 = (os_log_s *)Logger.logObject.getter(v115);
          uint64_t v117 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v116, v117))
          {
            uint64_t v118 = swift_slowAlloc(22LL, -1LL);
            __int128 v139 = swift_slowAlloc(64LL, -1LL);
            v141[0] = v139;
            *(_DWORD *)uint64_t v118 = 136315394;
            v142 = sub_1003FFBB0(0xD000000000000020LL, 0x8000000100842150LL, v141);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v118 + 4, v118 + 12);
            *(_WORD *)(v118 + 12) = 2080;
            __int128 v137 = (void *)(v118 + 14);
            uint64_t v119 = sub_10040A2B0( &qword_1009B90F0,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718F00);
            uint64_t v120 = v130;
            uint64_t v121 = dispatch thunk of CustomStringConvertible.description.getter(v130, v119);
            uint64_t v123 = v122;
            v142 = sub_1003FFBB0(v121, v122, v141);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v137, v118 + 22);
            swift_bridgeObjectRelease(v123);
            sub_1003F6050(v108, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
            _os_log_impl((void *)&_mh_execute_header, v116, v117, "%s: sending to avc %s", (uint8_t *)v118, 0x16u);
            uint64_t v124 = v139;
            swift_arrayDestroy(v139, 2LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v124, -1LL, -1LL);
            swift_slowDealloc(v118, -1LL, -1LL);
          }

          else
          {

            sub_1003F6050(v108, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
            uint64_t v120 = v130;
          }

          __int128 v126 = (uint64_t)v132;
          __int128 v127 = [v111 recvKeyMaterial:v114];
          __int128 v128 = (*(uint64_t (**)(id))((swift_isaMask & *v135) + 0x128LL))(v127);
          (*(void (**)(uint64_t))((swift_isaMask & *v100) + 0x188LL))(v128);
          sub_1003F5FC8(v140, v126, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          uint64_t v125 = 1;
          v133((char *)v126, 0LL, 1LL, v120);
          (*(void (**)(uint64_t))((swift_isaMask & *v100) + 0x158LL))(v126);
          swift_unknownObjectRelease(v111, v129);

          goto LABEL_59;
        }

        swift_unknownObjectRelease(v111, v113);
      }

      else
      {
        swift_unknownObjectRelease(v111, v113);
      }
    }

  __break(1u);
  return result;
}

  if (v2 < 0) {
    id v10 = v2;
  }
  else {
    id v10 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v16 = v34;
      uint64_t v17 = v35;
      __int16 v18 = v36;
      sub_10049545C(v34, v35, v36, v2);
      uint64_t v20 = v19;
      double v21 = *(id *)&v19[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_pushToken];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v22);
      double v23 = v37[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
      id v24 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v21);
      uint64_t result = specialized ContiguousArray._endMutation()(v24);
      if (v3) {
        break;
      }
      int v11 = sub_100437F28(v16, v17, v18, v2);
      uint64_t v13 = v12;
      id v15 = v14;
      sub_1004398F4(v16, v17, v18);
      double v34 = v11;
      uint64_t v35 = v13;
      double v36 = v15 & 1;
      if (!--v6) {
        goto LABEL_20;
      }
    }

    if ((v18 & 1) == 0) {
      break;
    }
    uint64_t v26 = __CocoaSet.Index.handleBitPattern.getter(v16, v17);
    if (v26) {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
    }
    else {
      isUniquelyReferenced_nonNull_native = 1LL;
    }
    uint64_t v28 = sub_1003F5CB4(&qword_1009BB760);
    int v29 = (void (*)(_BYTE *, void))Set.Index._asCocoa.modify(v33, v28);
    __CocoaSet.formIndex(after:isUnique:)(v30, isUniquelyReferenced_nonNull_native, v10);
    v29(v33, 0LL);
    if (!--v6)
    {
LABEL_20:
      sub_1004398F4(v34, v35, v36);
      uint64_t v31 = v37;
      swift_bridgeObjectRelease(v2);
      goto LABEL_22;
    }
  }

  __break(1u);
  return result;
}

  if (v2 < 0) {
    id v10 = v2;
  }
  else {
    id v10 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v16 = v34;
      uint64_t v17 = v35;
      __int16 v18 = v36;
      sub_10049545C(v34, v35, v36, v2);
      uint64_t v20 = v19;
      double v21 = *(id *)&v19[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_pushToken];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v22);
      double v23 = v37[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
      id v24 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v21);
      uint64_t result = specialized ContiguousArray._endMutation()(v24);
      if (v3) {
        break;
      }
      int v11 = sub_100437F28(v16, v17, v18, v2);
      uint64_t v13 = v12;
      id v15 = v14;
      sub_1004398F4(v16, v17, v18);
      double v34 = v11;
      uint64_t v35 = v13;
      double v36 = v15 & 1;
      if (!--v6) {
        goto LABEL_20;
      }
    }

    if ((v18 & 1) == 0) {
      break;
    }
    uint64_t v26 = __CocoaSet.Index.handleBitPattern.getter(v16, v17);
    if (v26) {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
    }
    else {
      isUniquelyReferenced_nonNull_native = 1LL;
    }
    uint64_t v28 = sub_1003F5CB4(&qword_1009BB760);
    int v29 = (void (*)(_BYTE *, void))Set.Index._asCocoa.modify(v33, v28);
    __CocoaSet.formIndex(after:isUnique:)(v30, isUniquelyReferenced_nonNull_native, v10);
    v29(v33, 0LL);
    if (!--v6)
    {
LABEL_20:
      sub_1004398F4(v34, v35, v36);
      uint64_t v31 = v37;
      swift_bridgeObjectRelease(v2);
      goto LABEL_22;
    }
  }

  __break(1u);
  return result;
}

  if (v2 < 0) {
    id v10 = v2;
  }
  else {
    id v10 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v16 = v34;
      uint64_t v17 = v35;
      __int16 v18 = v36;
      sub_10049545C(v34, v35, v36, v2);
      uint64_t v20 = v19;
      double v21 = *(id *)&v19[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_pushToken];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v22);
      double v23 = v37[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
      id v24 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v21);
      uint64_t result = specialized ContiguousArray._endMutation()(v24);
      if (v3) {
        break;
      }
      int v11 = sub_100437F28(v16, v17, v18, v2);
      uint64_t v13 = v12;
      id v15 = v14;
      sub_1004398F4(v16, v17, v18);
      double v34 = v11;
      uint64_t v35 = v13;
      double v36 = v15 & 1;
      if (!--v6) {
        goto LABEL_20;
      }
    }

    if ((v18 & 1) == 0) {
      break;
    }
    uint64_t v26 = __CocoaSet.Index.handleBitPattern.getter(v16, v17);
    if (v26) {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
    }
    else {
      isUniquelyReferenced_nonNull_native = 1LL;
    }
    uint64_t v28 = sub_1003F5CB4(&qword_1009BB760);
    int v29 = (void (*)(_BYTE *, void))Set.Index._asCocoa.modify(v33, v28);
    __CocoaSet.formIndex(after:isUnique:)(v30, isUniquelyReferenced_nonNull_native, v10);
    v29(v33, 0LL);
    if (!--v6)
    {
LABEL_20:
      sub_1004398F4(v34, v35, v36);
      uint64_t v31 = v37;
      swift_bridgeObjectRelease(v2);
      goto LABEL_22;
    }
  }

  __break(1u);
  return result;
}

  swift_bridgeObjectRelease(a2);
  return 0LL;
}

void sub_1000495A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_1000496B4;
  block[3] = &unk_1008F7AF8;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(a1 + 40);
  id v14 = v6;
  uint64_t v15 = v8;
  block[1] = 3221225472LL;
  id v13 = v5;
  id v16 = v9;
  id v18 = *(id *)(a1 + 56);
  id v17 = *(id *)(a1 + 48);
  id v19 = *(id *)(a1 + 64);
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v7, block);
}

void sub_1000496B4(uint64_t a1)
{
  if (*(void *)(a1 + 32) && !*(void *)(a1 + 40))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 48),  "_firstAccountInStore:withType:matchingCriteria:",  *(void *)(a1 + 56)));
  }

  else
  {
    unint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 64);
      uint64_t v4 = *(void *)(a1 + 40);
      int v6 = 138412546;
      uint64_t v7 = v3;
      __int16 v8 = 2112;
      uint64_t v9 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Did not find account type { identifier: %@, accountsError: %@ }",  (uint8_t *)&v6,  0x16u);
    }

    id v5 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
}

void sub_100049D98(id a1)
{
  unint64_t v1 = *(const void **)IMWeakLinkSymbol("ACAccountTypeIdentifierAppleAccount", @"Accounts");
  qword_1009BE860 = (uint64_t)v1;
  if (v1) {
    CFRetain(v1);
  }
}

void sub_100049DD4(id a1)
{
  unint64_t v1 = *(const void **)IMWeakLinkSymbol("ACAccountTypeIdentifieriTunesStore", @"Accounts");
  qword_1009BE870 = (uint64_t)v1;
  if (v1) {
    CFRetain(v1);
  }
}

void sub_10004A080(uint64_t a1)
{
  unint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog opportunistic](&OBJC_CLASS___IDSFoundationLog, "opportunistic"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 56);
    id v7 = [*(id *)(a1 + 64) length];
    *(_DWORD *)buf = 138413314;
    uint64_t v14 = v3;
    __int16 v15 = 2112;
    uint64_t v16 = v4;
    __int16 v17 = 2112;
    uint64_t v18 = v5;
    __int16 v19 = 2112;
    uint64_t v20 = v6;
    __int16 v21 = 2048;
    id v22 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Asked to send opportunistic data {identifier: %@, service: %@, uniqueID: %@, options: %@, dataLength: %llu}",  buf,  0x34u);
  }

  __int16 v8 = *(void **)(*(void *)(a1 + 72) + 16LL);
  id v9 = [[IDSOpportunisticData alloc] initWithData:*(void *)(a1 + 64) identifier:*(void *)(a1 + 32) serviceName:*(void *)(a1 + 40) accountUniqueID:*(void *)(a1 + 48) options:*(void *)(a1 + 56)];
  id v12 = 0LL;
  [v8 addData:v9 withError:&v12];
  id v10 = v12;

  uint64_t v11 = *(void *)(a1 + 80);
  if (v11) {
    (*(void (**)(uint64_t, id))(v11 + 16))(v11, v10);
  }
}

void sub_10004A29C(void *a1)
{
  unint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog opportunistic](&OBJC_CLASS___IDSFoundationLog, "opportunistic"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = a1[5];
    *(_DWORD *)buf = 138412546;
    uint64_t v12 = v3;
    __int16 v13 = 2112;
    uint64_t v14 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Asked to cancel opportunistic data {identifier: %@, service: %@}",  buf,  0x16u);
  }

  uint64_t v5 = a1[5];
  uint64_t v6 = *(void **)(a1[6] + 16LL);
  uint64_t v7 = a1[4];
  id v10 = 0LL;
  [v6 removeDataWithIdentifier:v7 serviceName:v5 withError:&v10];
  id v8 = v10;
  uint64_t v9 = a1[7];
  if (v9) {
    (*(void (**)(uint64_t, id))(v9 + 16))(v9, v8);
  }
}

uint64_t sub_10004A568(uint64_t a1)
{
  if ([*(id *)(a1 + 32) diceRoll])
  {
    unint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) selectDataForDestination:*(void *)(a1 + 40)]);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog opportunistic](&OBJC_CLASS___IDSFoundationLog, "opportunistic"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      int v7 = 138412546;
      uint64_t v8 = v4;
      __int16 v9 = 2112;
      id v10 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Passed dice roll {destination: %@, data: %@}",  (uint8_t *)&v7,  0x16u);
    }

    if (v2
      && [*(id *)(a1 + 32) sendOpportunisticData:v2 toDestination:*(void *)(a1 + 40)])
    {
      [v2 incrementSendCountForDestination:*(void *)(a1 + 40)];
      uint64_t v5 = 1LL;
    }

    else
    {
      uint64_t v5 = 0LL;
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, v5);
  }
  return result;
}

void sub_10004AA90(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog opportunistic](&OBJC_CLASS___IDSFoundationLog, "opportunistic"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = [v3 idsResponseCode];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
    unsigned int v9 = [v3 lastCall];
    int v11 = 138413314;
    id v10 = @"NO";
    uint64_t v12 = v5;
    __int16 v13 = 2112;
    if (v9) {
      id v10 = @"YES";
    }
    uint64_t v14 = v6;
    __int16 v15 = 2048;
    id v16 = v7;
    __int16 v17 = 2112;
    uint64_t v18 = v8;
    __int16 v19 = 2112;
    uint64_t v20 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Message for opportunistic data got response {identifier: %@, guid: %@, responseCode: %lu, error: %@, lastCall: %@}",  (uint8_t *)&v11,  0x34u);
  }
}

void sub_10004ABC0(uint64_t a1)
{
  unint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog opportunistic](&OBJC_CLASS___IDSFoundationLog, "opportunistic"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v5 = *(void *)(a1 + 64);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
    uint64_t v7 = *(void *)(a1 + 72);
    *(_DWORD *)buf = 138413314;
    uint64_t v16 = v3;
    __int16 v17 = 2112;
    uint64_t v18 = v4;
    __int16 v19 = 2112;
    uint64_t v20 = v5;
    __int16 v21 = 2112;
    id v22 = v6;
    __int16 v23 = 2112;
    uint64_t v24 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Sent opportunistic message {identifier: %@, guid: %@, service: %@, accountUUID: %@, destination: %@}",  buf,  0x34u);
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10004ADA4;
  v11[3] = &unk_1008F7C28;
  id v12 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 32);
  id v14 = *(id *)(a1 + 72);
  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) service]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 pushTopic]);
  [v8 enqueueBroadcast:v11 forTopic:v10 entitlement:kIDSMessagingEntitlement command:0 capabilities:kIDSListenerCapConsumesLaunchOnDemandOutgoingMessageUpdates messageContext:0];
}

void sub_10004ADA4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = a2;
  id v8 = (id)objc_claimAutoreleasedReturnValue([v4 uniqueID]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) normalizedURIStrings]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 allObjects]);
  [v5 didSendOpportunisticDataWithIdentifier:v3 onAccount:v8 toIDs:v7];
}

uint64_t sub_10004C268(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10004C27C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = [v3 idsResponseCode];
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
    unsigned int v8 = [v3 lastCall];
    unsigned int v9 = @"NO";
    int v11 = 138413058;
    uint64_t v12 = v5;
    __int16 v13 = 2048;
    if (v8) {
      unsigned int v9 = @"YES";
    }
    id v14 = v6;
    __int16 v15 = 2112;
    uint64_t v16 = v7;
    __int16 v17 = 2112;
    uint64_t v18 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Message %@ got response code %lu error %@ lastCall %@",  (uint8_t *)&v11,  0x2Au);
  }

  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(uint64_t, id))(v10 + 16))(v10, v3);
  }
}

void sub_10004D990(id a1)
{
  unint64_t v1 = objc_alloc_init(&OBJC_CLASS___IDSNanoRegistryPluginManager);
  unint64_t v2 = (void *)qword_1009BE878;
  qword_1009BE878 = (uint64_t)v1;
}

id sub_10004DA80(uint64_t a1)
{
  unint64_t v2 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 24);
  *(void *)(v3 + cut_arc_os_release(v1 - 24) = v2;

  return _[*(id *)(a1 + 32) _initializePlugin];
}

void sub_10004DB38(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) count];
  [*(id *)(*(void *)(a1 + 32) + 24) addObject:*(void *)(a1 + 40)];
  if (!v2)
  {
    if ([*(id *)(a1 + 32) pluginImplementsWatchDidStartAdvertising])
    {
      id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) plugin]);
      [v3 watchDidStartAdvertising];
    }
  }

_BYTE *sub_10004DC08(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) pluginImplementsWatchDidStartAdvertising];
  if ((_DWORD)result)
  {
    uint64_t result = *(_BYTE **)(a1 + 32);
    if (!result[10])
    {
      id v3 = (void *)objc_claimAutoreleasedReturnValue([result plugin]);
      [v3 watchDidStartAdvertising];

      *(_BYTE *)(*(void *)(a1 + 32) + 10LL) = 1;
      uint64_t v4 = OSLogHandleForIDSCategory("IDSNanoRegistryPluginManager");
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        if (*(_BYTE *)(*(void *)(a1 + 32) + 10LL)) {
          id v6 = @"YES";
        }
        else {
          id v6 = @"NO";
        }
        *(_DWORD *)buf = 138412290;
        unsigned int v9 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Bundle {isAdvertising:%@}", buf, 0xCu);
      }

      uint64_t result = (_BYTE *)os_log_shim_legacy_logging_enabled(v7);
      if ((_DWORD)result)
      {
        uint64_t result = (_BYTE *)_IDSShouldLog(0LL, @"IDSNanoRegistryPluginManager");
        if ((_DWORD)result) {
          return (_BYTE *)_IDSLogV( 0LL,  @"IDSFoundation",  @"IDSNanoRegistryPluginManager",  @"Bundle {isAdvertising:%@}");
        }
      }
    }
  }

  return result;
}

void sub_10004DDFC(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) count];
  [*(id *)(*(void *)(a1 + 32) + 24) removeObject:*(void *)(a1 + 40)];
  if (v2 == (id)1 && ![*(id *)(*(void *)(a1 + 32) + 24) count])
  {
    if ([*(id *)(a1 + 32) pluginImplementsWatchDidStopAdvertising])
    {
      id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) plugin]);
      [v3 watchDidStopAdvertising];
    }
  }

_BYTE *sub_10004DEE0(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) pluginImplementsWatchDidStopAdvertising];
  if ((_DWORD)result)
  {
    uint64_t result = *(_BYTE **)(a1 + 32);
    if (result[10])
    {
      id v3 = (void *)objc_claimAutoreleasedReturnValue([result plugin]);
      [v3 watchDidStopAdvertising];

      *(_BYTE *)(*(void *)(a1 + 32) + 10LL) = 0;
      uint64_t v4 = OSLogHandleForIDSCategory("IDSNanoRegistryPluginManager");
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        if (*(_BYTE *)(*(void *)(a1 + 32) + 10LL)) {
          id v6 = @"YES";
        }
        else {
          id v6 = @"NO";
        }
        *(_DWORD *)buf = 138412290;
        unsigned int v9 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Bundle {isAdvertising:%@}", buf, 0xCu);
      }

      uint64_t result = (_BYTE *)os_log_shim_legacy_logging_enabled(v7);
      if ((_DWORD)result)
      {
        uint64_t result = (_BYTE *)_IDSShouldLog(0LL, @"IDSNanoRegistryPluginManager");
        if ((_DWORD)result) {
          return (_BYTE *)_IDSLogV( 0LL,  @"IDSFoundation",  @"IDSNanoRegistryPluginManager",  @"Bundle {isAdvertising:%@}");
        }
      }
    }
  }

  return result;
}

id sub_10004E0AC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _initializePluginWithClass:*(void *)(a1 + 40)];
}

uint64_t sub_10004E134(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10004ED6C(id a1)
{
  unint64_t v1 = objc_alloc_init(&OBJC_CLASS___IDSHeartbeatCenter);
  id v2 = (void *)qword_1009BE890;
  qword_1009BE890 = (uint64_t)v1;
}

void sub_10004EE48(id a1, IDSHeartbeatCenter *a2)
{
}

void sub_10004F2B0(id a1)
{
  off_1009BE898 = (_UNKNOWN *)IMWeakLinkSymbol("PLLogRegisteredEvent", @"PowerLog");
}

LABEL_16:
          continue;
        }

        if (v15)
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v24 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "  => adding pending registration: %@",  buf,  0xCu);
        }

        -[NSMutableArray addObject:](v18, "addObject:", v8);
      }

      uint64_t v5 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v3,  "countByEnumeratingWithState:objects:count:",  &v19,  v25,  16LL);
    }

    while (v5);
  }

  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v24 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Registrations pending heartbeat: %@",  buf,  0xCu);
  }

  return v18;
}

  if (v15) {
LABEL_21:
  }
    CFRelease(v15);

  if (v10)
  {
  }

  if (v4)
  {
  }
}

  v161 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int16 v23 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v160[0] = v23;
  v160[1] = v23;
  IDSByteBufferInitForWrite(v160);
  memset(buf, 170, sizeof(buf));
  v170 = 0u;
  v171 = 0u;
  v172 = 0u;
  v173 = 0u;
  v174 = 0u;
  v175 = 0u;
  v176 = 0;
  LOBYTE(v172) = v154;
  uint64_t v24 = IDSGlobalLinkAttributeIPFamilyKey;
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:IDSGlobalLinkAttributeIPFamilyKey]);
  BYTE1(v172) = [v25 unsignedCharValue];

  uint64_t v26 = IDSGlobalLinkAttributeTransportKey;
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:IDSGlobalLinkAttributeTransportKey]);
  BYTE2(v172) = [v27 unsignedCharValue];

  uint64_t v28 = IDSGlobalLinkAttributeRATKey;
  int v29 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:IDSGlobalLinkAttributeRATKey]);
  BYTE3(v172) = [v29 unsignedCharValue];

  int v30 = IDSGlobalLinkAttributeConstantOverheadKey;
  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:IDSGlobalLinkAttributeConstantOverheadKey]);
  int v32 = [v31 unsignedShortValue];

  int v33 = (void *)objc_claimAutoreleasedReturnValue([v157 objectForKeyedSubscript:v30]);
  double v34 = [v33 unsignedShortValue];

  uint64_t v35 = IDSGlobalLinkAttributeMTUKey;
  double v36 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:IDSGlobalLinkAttributeMTUKey]);
  int v37 = [v36 unsignedShortValue];

  uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v157 objectForKey:v35]);
  id v39 = [v38 unsignedShortValue];

  uint32_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v162 = 138413570;
    *(void *)&v162[4] = self;
    *(_WORD *)&v162[12] = 1024;
    *(_DWORD *)&v162[14] = v154;
    *(_WORD *)&v162[18] = 1024;
    *(_DWORD *)&v162[20] = v37;
    *(_WORD *)&v162[24] = 1024;
    *(_DWORD *)&v162[26] = v39;
    *(_WORD *)&v162[30] = 1024;
    LODWORD(v163) = v32;
    WORD2(v163) = 1024;
    *(_DWORD *)((char *)&v163 + 6) = v34;
    _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "<%@> linkID %d: localMTU: %d; remoteMTU: %d; localOverhead: %d; remoteOverhead: %d",
      v162,
      0x2Au);
  }

  if (v37 >= v39) {
    uint64_t v41 = v39;
  }
  else {
    uint64_t v41 = v37;
  }
  WORD3(v173) = v41;
  if (v32 <= v34) {
    uint64_t v42 = v34;
  }
  else {
    uint64_t v42 = v32;
  }
  HIWORD(v175) = v42;
  uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v157 objectForKey:v24]);
  BYTE4(v172) = [v43 unsignedCharValue];

  uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v157 objectForKey:v26]);
  BYTE5(v172) = [v44 unsignedCharValue];

  uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v157 objectForKey:v28]);
  BYTE6(v172) = [v45 unsignedCharValue];

  [v153 getUUIDBytes:&v170];
  v152 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:IDSGlobalLinkAttributeRelaySessionIDKey]);
  if (v152)
  {
    unsigned int v46 = -[NSUUID initWithUUIDString:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDString:", v152);
    -[NSUUID getUUIDBytes:](v46, "getUUIDBytes:", &v171);
  }

  __int16 v47 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:IDSGlobalLinkAttributeRelayServerDegradedKey]);
  BYTE7(v172) = [v47 BOOLValue];

  unint64_t v48 = IDSGlobalLinkAttributeLinkFlagsKey;
  __int16 v49 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:IDSGlobalLinkAttributeLinkFlagsKey]);
  WORD4(v172) = (unsigned __int16)[v49 unsignedShortValue];

  __int16 v50 = (void *)objc_claimAutoreleasedReturnValue([v157 objectForKey:v48]);
  WORD5(v172) = (unsigned __int16)[v50 unsignedShortValue];

  id v51 = IDSGlobalLinkAttributeDataSoMaskKey;
  __int16 v52 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:IDSGlobalLinkAttributeDataSoMaskKey]);
  HIDWORD(v172) = [v52 unsignedIntValue];

  double v53 = (void *)objc_claimAutoreleasedReturnValue([v157 objectForKey:v51]);
  LODWORD(v173) = [v53 unsignedIntValue];

  __int16 v54 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:IDSGlobalLinkAttributeIsVirtualLinkKey]);
  BYTE12(v173) = [v54 BOOLValue];

  double v55 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:IDSGlobalLinkAttributeDelegatedLinkIDKey]);
  BYTE13(v174) = [v55 charValue];

  uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:IDSGlobalLinkAttributeLocalRelayLinkIDKey]);
  WORD4(v173) = (unsigned __int16)[v56 unsignedShortValue];

  __int128 v57 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:IDSGlobalLinkAttributeRemoteRelayLinkIDKey]);
  WORD5(v173) = (unsigned __int16)[v57 unsignedShortValue];

  __int128 v58 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:IDSGlobalLinkAttributeLinkChannelNumberKey]);
  WORD2(v173) = (unsigned __int16)[v58 unsignedShortValue];

  __int16 v59 = objc_claimAutoreleasedReturnValue([v12 objectForKey:IDSGlobalLinkAttributeInterfaceNameKey]);
  double v60 = [v59 UTF8String];

  __strlcpy_chk((char *)&v174 + 14, v60, 16LL, 16LL);
  *(_OWORD *)&buf[64] = v174;
  *(_OWORD *)&buf[80] = v175;
  *(_DWORD *)&buf[96] = v176;
  *(_OWORD *)buf = v170;
  *(_OWORD *)&uint8_t buf[16] = v171;
  *(_OWORD *)&buf[32] = v172;
  *(_OWORD *)&buf[48] = v173;
  v151 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:IDSGlobalLinkAttributeConnectionsKey]);
  __int16 v61 = JWEncodeDictionary(v151);
  double v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
  __int16 v63 = [v62 length];

  if ((unsigned __int16)v63 - 1 > 0xF96)
  {
    uint64_t v66 = &buf[100];
  }

  else
  {
    *(_WORD *)&buf[100] = bswap32(v63) >> 16;
    uint64_t v64 = JWEncodeDictionary(v151);
    __int16 v65 = objc_claimAutoreleasedReturnValue(v64);
    __memcpy_chk(&buf[102], [v65 bytes], (unsigned __int16)v63, 3991);

    uint64_t v66 = &buf[(unsigned __int16)v63 + 102];
  }

  __int16 v67 = objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:IDSGlobalLinkAttributeRelayProtocolStackKey]);
  unint64_t v68 = (void *)v67;
  __int16 v69 = @"(unknown)";
  if (v67) {
    __int16 v69 = (__CFString *)v67;
  }
  v150 = v69;

  uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString dataUsingEncoding:](v150, "dataUsingEncoding:", 4LL));
  __int16 v71 = [v70 length];

  if ((_WORD)v71 && v169 - v66 >= (unsigned __int16)v71 + 2)
  {
    *(_WORD *)uint64_t v66 = bswap32(v71) >> 16;
    uint64_t v72 = (char *)(v66 + 2);
    __int16 v73 = objc_claimAutoreleasedReturnValue(-[__CFString dataUsingEncoding:](v150, "dataUsingEncoding:", 4LL));
    memcpy(v72, [v73 bytes], (unsigned __int16)v71);

    uint64_t v66 = (uint8_t *)&v72[(unsigned __int16)v71];
  }

  uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:IDSGlobalLinkAttributeQRExperiments]);
  uint64_t v75 = JWEncodeDictionary(v74);
  uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue(v75);
  uint64_t v77 = [v76 length];

  if ((_WORD)v77 && v169 - v66 >= (unsigned __int16)v77 + 2)
  {
    *(_WORD *)uint64_t v66 = bswap32(v77) >> 16;
    uint64_t v78 = (char *)(v66 + 2);
    uint64_t v79 = JWEncodeDictionary(v74);
    uint64_t v80 = objc_claimAutoreleasedReturnValue(v79);
    memcpy(v78, [v80 bytes], (unsigned __int16)v77);

    uint64_t v66 = (uint8_t *)&v78[(unsigned __int16)v77];
  }

  if (BYTE2(v172) - 2 > 2)
  {
    uint64_t v85 = (uint64_t)v66;
  }

  else
  {
    uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:IDSQuickRelayServerProviderKey]);
    *uint64_t v66 = [v81 unsignedCharValue];

    uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:IDSGlobalLinkAttributeRelaySessionTokenKey]);
    uint64_t v83 = [v82 length];
    uint64_t v84 = v83;
    uint64_t v85 = (uint64_t)(v66 + 1);
    if ((_WORD)v83 && (uint64_t)&v169[-v85] >= (unsigned __int16)v83 + 2)
    {
      *(_WORD *)(v66 + 1) = bswap32(v83) >> 16;
      memcpy(v66 + 3, [v82 bytes], (unsigned __int16)v83);
      uint64_t v85 = (uint64_t)&v66[v84 + 3];
    }

    uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:IDSGlobalLinkAttributeRelaySessionKeyKey]);
    uint64_t v87 = [v86 length];
    uint64_t v88 = v87;
    if ((_WORD)v87 && (uint64_t)&v169[-v85] >= (unsigned __int16)v87 + 2)
    {
      *(_WORD *)uint64_t v85 = bswap32(v87) >> 16;
      uint64_t v89 = (void *)(v85 + 2);
      memcpy(v89, [v86 bytes], (unsigned __int16)v87);
      uint64_t v85 = (uint64_t)v89 + v88;
    }

    uint64_t v90 = IDSGlobalLinkAttributeHBHEncryptionKey;
    uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:IDSGlobalLinkAttributeHBHEncryptionKey]);
    uint64_t v92 = [v91 length];

    if ((_WORD)v92 && (uint64_t)&v169[-v85] >= (unsigned __int16)v92 + 2)
    {
      *(_WORD *)uint64_t v85 = bswap32(v92) >> 16;
      uint64_t v93 = (void *)(v85 + 2);
      uint64_t v94 = objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:v90]);
      memcpy(v93, [v94 bytes], (unsigned __int16)v92);

      uint64_t v85 = (uint64_t)v93 + (unsigned __int16)v92;
    }

    uint64_t v95 = IDSGlobalLinkAttributeHBHDecryptionKey;
    uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:IDSGlobalLinkAttributeHBHDecryptionKey]);
    uint64_t v97 = [v96 length];

    if ((_WORD)v97 && (uint64_t)&v169[-v85] >= (unsigned __int16)v97 + 2)
    {
      *(_WORD *)uint64_t v85 = bswap32(v97) >> 16;
      uint64_t v98 = (void *)(v85 + 2);
      uint64_t v99 = objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:v95]);
      memcpy(v98, [v99 bytes], (unsigned __int16)v97);

      uint64_t v85 = (uint64_t)v98 + (unsigned __int16)v97;
    }
  }

  uint64_t v100 = v85 - (void)buf;
  if ((int)(v85 - (void)buf) <= 0)
  {
    uint64_t v111 = OSLogHandleForIDSCategory("IDSDSession");
    uint64_t v112 = (os_log_s *)objc_claimAutoreleasedReturnValue(v111);
    if (os_log_type_enabled(v112, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v162 = 136315394;
      *(void *)&v162[4] = "-[IDSDSession link:didConnectUnderlyingLink:linkUUID:localAttributes:remoteAttributes:]";
      *(_WORD *)&v162[12] = 1024;
      *(_DWORD *)&v162[14] = v85 - (void)buf;
      _os_log_impl( (void *)&_mh_execute_header,  v112,  OS_LOG_TYPE_DEBUG,  "%s incorrect attribute length: %d",  v162,  0x12u);
    }

    if (os_log_shim_legacy_logging_enabled(v113)
      && _IDSShouldLog(2LL, @"IDSDSession"))
    {
      _IDSLogV(2LL, @"IDSFoundation", @"IDSDSession", @"%s incorrect attribute length: %d");
    }

    IDSByteBufferRelease(v160);
  }

  else
  {
    IDSByteBufferWriteField(v160, 2LL, buf, (unsigned __int16)(v85 - (void)buf));
    -[IDSDSession writeToClientChannel:packetBuffer:metaData:metadataSize:]( self,  "writeToClientChannel:packetBuffer:metaData:metadataSize:",  self->_clientChannel,  0LL);
    IDSByteBufferRelease(v160);
    uint64_t v101 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:IDSGlobalLinkAttributeLocalAddressKey]);
    uint64_t v102 = (void *)objc_claimAutoreleasedReturnValue([v157 objectForKeyedSubscript:IDSGlobalLinkAttributeRemoteAddressKey]);
    uint64_t v103 = OSLogHandleForIDSCategory("IDSDSession");
    uint64_t v104 = (os_log_s *)objc_claimAutoreleasedReturnValue(v103);
    if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v162 = 67109634;
      *(_DWORD *)&v162[4] = v154;
      *(_WORD *)&v162[8] = 2112;
      *(void *)&v162[10] = v101;
      *(_WORD *)&v162[18] = 2112;
      *(void *)&v162[20] = v102;
      _os_log_impl( (void *)&_mh_execute_header,  v104,  OS_LOG_TYPE_DEFAULT,  "didConnectUnderlyingLink, linkid:%d, localAddress:%@, remoteAddress:%@",  v162,  0x1Cu);
    }

    if (os_log_shim_legacy_logging_enabled(v105)
      && _IDSShouldLog(0LL, @"IDSDSession"))
    {
      v142 = v101;
      v144 = v102;
      __int128 v140 = (int)v154;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"didConnectUnderlyingLink, linkid:%d, localAddress:%@, remoteAddress:%@");
    }

    if (v101 && v102)
    {
      uint64_t v106 = (void *)objc_claimAutoreleasedReturnValue(+[IMPair pairWithFirst:second:](&OBJC_CLASS___IMPair, "pairWithFirst:second:", v101, v102));
      linkIDToLocalRemoteEndpointPair = self->_linkIDToLocalRemoteEndpointPair;
      if (!linkIDToLocalRemoteEndpointPair)
      {
        CFMutableStringRef Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
        uint64_t v109 = self->_linkIDToLocalRemoteEndpointPair;
        self->_linkIDToLocalRemoteEndpointPair = Mutable;

        linkIDToLocalRemoteEndpointPair = self->_linkIDToLocalRemoteEndpointPair;
      }

      uint64_t v110 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithChar:](&OBJC_CLASS___NSNumber, "numberWithChar:", v154, v140, v142, v144));
      -[NSMutableDictionary setObject:forKey:](linkIDToLocalRemoteEndpointPair, "setObject:forKey:", v106, v110);
    }

    v165 = v174;
    v166 = v175;
    v167 = v176;
    *(_OWORD *)v162 = v170;
    *(_OWORD *)&v162[16] = v171;
    v163 = v172;
    v164 = v173;
    -[IDSDSession _buildCellularNetworkInfoSessionEvent:]( self,  "_buildCellularNetworkInfoSessionEvent:",  v162,  v140,  v142);
  }

  if ((int)v100 > 0)
  {
LABEL_71:
    connectedLinkint Count = self->_connectedLinkCount;
    self->_connectedLinkint Count = connectedLinkCount + 1;
    if (!connectedLinkCount)
    {
      uint64_t v115 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
      uint64_t v116 = (void *)objc_claimAutoreleasedReturnValue([v115 uniqueID]);
      uint64_t v117 = [v116 copy];

      uint64_t v120 = im_primary_queue(v118, v119);
      uint64_t v121 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v120);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10009F4C4;
      block[3] = &unk_1008F5F80;
      void block[4] = self;
      v159 = v117;
      uint64_t v122 = v117;
      uint64_t v123 = dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT,  QOS_CLASS_USER_INTERACTIVE,  0,  block);
      dispatch_async(v121, v123);
    }
  }
}
}
}

      goto LABEL_17;
    }

    uint64_t v10 = 0;
  }

    -[IDSUTunControlChannel _handleFairplayAuthenticationFailure](self, "_handleFairplayAuthenticationFailure");
    __int16 v19 = 0;
    goto LABEL_21;
  }

  __int16 v15 = (uint64_t)(v8 + 5);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v8 + 5, v13));
  __int16 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v25 = 67109378;
    LODWORD(v26[0]) = v13;
    WORD2(v26[0]) = 2112;
    *(void *)((char *)v26 + 6) = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "recv FairplayDeviceSessionInfo (%uB):%@",  (uint8_t *)&v25,  0x12u);
  }

  sub_10052D318(self->_grappaHostSessionID, v15, v13);
  __int16 v19 = v18 == 0;
  if (v18)
  {
    uint64_t v20 = v18;
    __int16 v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v25 = 67109120;
      LODWORD(v26[0]) = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "GrappaHostEstablishKey failed with error %d",  (uint8_t *)&v25,  8u);
    }

    -[IDSUTunControlChannel _handleFairplayAuthenticationFailure](self, "_handleFairplayAuthenticationFailure");
  }

  else
  {
    self->_fairplayAuthState = 2;
    id v22 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDevicePolicyController sharedInstance]( &OBJC_CLASS___IDSDevicePolicyController,  "sharedInstance"));
    [v22 endFairplayAuthenticationForDeviceWithCbuuid:self->_cbuuid];

    __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v25) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Grappa authentication is complete on host.",  (uint8_t *)&v25,  2u);
    }
  }

LABEL_21:
  return v19;
}
}

  return (char)v3;
}

        self = v45;
      }

      else
      {

        id v22 = 0LL;
        __int16 v23 = 0LL;
      }
}
}

  return v15;
}

      self = v22;
      uint64_t v5 = &IMInsertBoolsToXPCDictionary_ptr;
      uint64_t v7 = &off_100717000;
    }
  }

  else
  {
    int v11 = 0LL;
  }

  __int16 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue([v5[440] iCloud]);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = *((void *)v7 + 46);
    int v29 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Checking IdentityServices accounts to know if we should attempt a repair { foundAccount: %@ }",  buf,  0xCu);
  }

  if (v11)
  {
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v11 credential]);
    __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([v18 token]);

    if (v19)
    {
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue([v5[440] iCloud]);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Auth token found on account -- attempting to kick iCloud repair logic",  buf,  2u);
      }

      __int16 v21 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSignInResponder registrationConductor](self, "registrationConductor"));
      [v21 kickiCloudRepair];
    }
  }
}
}

    -[NSMutableArray addObject:](self->_registrationData, "addObject:", v4);
    unsigned int v9 = -[IDSRegistrationKeychainManager _saveToKeychain](self, "_saveToKeychain");
  }

  else
  {
    unsigned int v9 = 0;
  }

  -[NSRecursiveLock unlock](self->_lock, "unlock");

  return v9;
}

  __int16 v15 = 0;
LABEL_50:
  objc_autoreleasePoolPop(v8);

  return v15;
}
}
  }

  return v9;
}

    id v14 = self->_publicIdentityData;
    os_unfair_lock_unlock(p_lock);
    return v14;
  }

  cf = 0LL;
  if (qword_1009C0CC8 != -1) {
    dispatch_once(&qword_1009C0CC8, &stru_100903C58);
  }
  if (off_1009C0CC0)
  {
    int v11 = (const __CFData *)off_1009C0CC0(self->_publicIdentity, &cf);
    if (v11)
    {
      if (!cf)
      {
        Copy = (NSData *)CFDataCreateCopy(0LL, v11);
        __int16 v13 = self->_publicIdentityData;
        self->_publicIdentityData = Copy;

        CFRelease(v11);
        if (cf) {
          CFRelease(cf);
        }
        goto LABEL_16;
      }
    }
  }

  __int16 v15 = OSLogHandleForTransportCategory("IDSRTEncryptionController");
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    groupint ID = self->_groupID;
    *(_DWORD *)buf = 134218499;
    __int16 v23 = self;
    uint64_t v24 = 2113;
    uint64_t v25 = (NSData *)groupID;
    uint64_t v26 = 2112;
    uint64_t v27 = cf;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "%p: Couldn't the public key data for the group %{private}@ (error: %@)",  buf,  0x20u);
  }

  __int16 v19 = os_log_shim_legacy_logging_enabled(v18);
  if ((_DWORD)v19)
  {
    if (_IDSShouldLogTransport(v19))
    {
      _IDSLogTransport( @"IDSRTEncryptionController",  @"IDS",  @"%p: Couldn't the public key data for the group %{private}@ (error: %@)");
      if (_IDSShouldLog(0LL, @"IDSRTEncryptionController")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSRTEncryptionController",  @"%p: Couldn't the public key data for the group %{private}@ (error: %@)");
      }
    }
  }

  if (cf)
  {
    CFRelease(cf);
    cf = 0LL;
  }

  os_unfair_lock_unlock(p_lock);
  id v14 = 0LL;
  return v14;
}

        uint64_t v35 = 0u;
        double v36 = 0u;
        int v33 = 0u;
        double v34 = 0u;
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:v8]);
        __int16 v19 = [v18 countByEnumeratingWithState:&v33 objects:v45 count:16];
        if (v19)
        {
          uint64_t v20 = *(void *)v34;
          while (2)
          {
            for (k = 0LL; k != v19; k = (char *)k + 1)
            {
              if (*(void *)v34 != v20) {
                objc_enumerationMutation(v18);
              }
              id v22 = *(void **)(*((void *)&v33 + 1) + 8LL * (void)k);
              if ([v22 ktCapableFlag])
              {
                __int16 v19 = [v22 ktCapableFlag];
                goto LABEL_26;
              }
            }

            __int16 v19 = [v18 countByEnumeratingWithState:&v33 objects:v45 count:16];
            if (v19) {
              continue;
            }
            break;
          }
        }

        id v2 = v101;
LABEL_22:
        (*(void (**)(unint64_t, unint64_t))((swift_isaMask & *v2) + 0x408LL))( 0xD000000000000019LL,  0x8000000100842760LL);
        return v5;
      }

      sub_100402A84(v24, v26);
    }

    uint64_t v76 = v2;
    uint64_t v77 = a1;
    uint64_t v78 = (os_log_s *)Logger.logObject.getter(v77);
    uint64_t v79 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v78, v79))
    {
      uint64_t v80 = swift_slowAlloc(22LL, -1LL);
      uint64_t v81 = swift_slowAlloc(32LL, -1LL);
      v105[0] = v81;
      *(_DWORD *)uint64_t v80 = 136315394;
      uint64_t v102 = v2;
      uint64_t v82 = *(void *)((char *)v76 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_id);
      uint64_t v83 = *(void *)((char *)v76 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_id + 8);
      swift_bridgeObjectRetain(v83);
      uint64_t v104 = (id)sub_1003FFBB0(v82, v83, v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v80 + 4, v80 + 12);
      swift_bridgeObjectRelease(v83);

      *(_WORD *)(v80 + 12) = 2048;
      uint64_t v104 = [v77 participantIdentifier];
      id v2 = v102;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v80 + 14, v80 + 22);

      _os_log_impl( (void *)&_mh_execute_header,  v78,  v79,  "Group %s: ensureParticipant: participant %llu missing pushToken",  (uint8_t *)v80,  0x16u);
      swift_arrayDestroy(v81, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v81, -1LL, -1LL);
      swift_slowDealloc(v80, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v5 = 0LL;
    goto LABEL_22;
  }

  return v5;
}

  int v37 = *(void *)(v2 + v21);
  *(void *)(v2 + v21) = a1;
  swift_bridgeObjectRetain(a1);
  return swift_bridgeObjectRelease(v37);
}

id sub_10005003C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _serverHeartBeatTimerHit:*(void *)(a1 + 40)];
}

void sub_1000505FC( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_100051DC8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[IDSWPLinkManager sharedInstance](&OBJC_CLASS___IDSWPLinkManager, "sharedInstance"));
  [v2 addConnectivityDelegate:*(void *)(a1 + 32)];
}

uint64_t sub_1000521D8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_10005236C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudConnection]);

    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 40);
      id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudConnection]);
      (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
    }
  }

void sub_100052578(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudConnection]);

    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 40);
      id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudConnection]);
      (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
    }
  }

LABEL_17:
    __int16 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog UTunPeer](&OBJC_CLASS___IDSFoundationLog, "UTunPeer"));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      uint64_t v18 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Priority is %d - defaulting to Urgent",  buf,  8u);
    }

    goto LABEL_20;
  }

  if (a4)
  {
    if (a4 == 100)
    {
      int v11 = 9LL;
LABEL_21:
      uint64_t v12 = (&self->super.isa)[v11];
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472LL;
      v14[2] = sub_100052810;
      v14[3] = &unk_1008F7DB8;
      uint64_t v16 = v9;
      __int16 v15 = v8;
      -[objc_class enumerateObjectsUsingBlock:](v12, "enumerateObjectsUsingBlock:", v14);

      goto LABEL_22;
    }

    goto LABEL_17;
  }

  uint64_t v12 = (objc_class *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog UTunPeer](&OBJC_CLASS___IDSFoundationLog, "UTunPeer"));
  if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_FAULT)) {
    sub_10069655C((os_log_t)v12);
  }
LABEL_22:
}

  if ((_DWORD)v16 != *a1) {
    goto LABEL_28;
  }
  __int16 v23 = a1[1];
  if (v23 > (int)v16)
  {
    uint64_t v24 = (char *)*((void *)a1 + 1);
LABEL_27:
    uint64_t v31 = &v24[424 * (int)v16];
    *(void *)uint64_t v31 = a5;
    *((_DWORD *)v31 + 71) = 0;
    *((_DWORD *)v31 + 2) = a2;
    memcpy(v31 + 16, a3, *a3);
    memcpy((void *)(*((void *)a1 + 1) + 424LL * *a1 + 144), a4, *a4);
    memcpy((void *)(*((void *)a1 + 1) + 424LL * *a1 + 288), a6, a7);
    int v32 = *a1;
    *(_DWORD *)(*((void *)a1 + 1) + 424LL * v32 + 416) = a7;
    *a1 = v32 + 1;
LABEL_28:
    int v33 = OSLogHandleForTransportCategory("UGL");
    double v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v35 = *a1;
      *(_DWORD *)buf = 136315906;
      *(void *)uint64_t v42 = v49;
      *(_WORD *)&v42[8] = 2080;
      uint64_t v43 = v48;
      uint64_t v44 = 2048;
      uint64_t v45 = a5;
      unsigned int v46 = 1024;
      __int16 v47 = v35;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "added pair [%s-%s], state (%ld), total %d pair(s).",  buf,  0x26u);
    }

    int v37 = os_log_shim_legacy_logging_enabled(v36);
    if ((_DWORD)v37 && _IDSShouldLogTransport(v37))
    {
      _IDSLogTransport(@"UGL", @"IDS", @"added pair [%s-%s], state (%ld), total %d pair(s).");
    }

    return 1LL;
  }

  uint64_t v25 = (char *)realloc(*((void **)a1 + 1), 848LL * v23);
  if (v25)
  {
    uint64_t v24 = v25;
    uint64_t v26 = 2 * v23;
    uint64_t v27 = OSLogHandleForIDSCategory("UGL");
    uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      int v29 = a1[1];
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)uint64_t v42 = v29;
      *(_WORD *)&v42[4] = 1024;
      *(_DWORD *)&v42[6] = v26;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "increase capacity %d->%d", buf, 0xEu);
    }

    *((void *)a1 + 1) = v24;
    a1[1] = v26;
    LODWORD(v16) = *a1;
    goto LABEL_27;
  }

  uint64_t v38 = OSLogHandleForIDSCategory("UGL");
  id v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "failed with realloc", buf, 2u);
  }

  uint64_t result = os_log_shim_legacy_logging_enabled(v40);
  if ((_DWORD)result)
  {
    uint64_t result = _IDSShouldLog(0LL, @"UGL");
    if ((_DWORD)result)
    {
      _IDSLogV(0LL, @"IDSFoundation", @"UGL", @"failed with realloc");
      return 0LL;
    }
  }

  return result;
}

    v6[2](v6, 0LL);
    goto LABEL_18;
  }

  int v11 = 0;
  uint64_t v12 = *(void *)v36;
  do
  {
    for (i = 0LL; i != v10; i = (char *)i + 1)
    {
      if (*(void *)v36 != v12) {
        objc_enumerationMutation(v9);
      }
      v11 |= IDSIsMultiplex1RegistrationServiceType(*(void *)(*((void *)&v35 + 1) + 8LL * (void)i));
    }

    uint64_t v10 = [v9 countByEnumeratingWithState:&v35 objects:v39 count:16];
  }

  while (v10);

  if ((v11 & 1) == 0) {
    goto LABEL_15;
  }
  *(void *)buf = 0LL;
  int v32 = buf;
  int v33 = 0x2020000000LL;
  double v34 = 0;
  uint64_t v16 = im_primary_queue(v14, v15);
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472LL;
  v27[2] = sub_1000E6160;
  v27[3] = &unk_1008F9F70;
  __int16 v17 = (id)objc_claimAutoreleasedReturnValue(v16);
  int v29 = buf;
  int v30 = v8;
  uint64_t v28 = v17;
  uint64_t v18 = objc_retainBlock(v27);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  v23[2] = sub_1000E6348;
  v23[3] = &unk_1008F9ED8;
  __int16 v19 = v17;
  uint64_t v24 = v19;
  uint64_t v25 = v6;
  uint64_t v26 = buf;
  uint64_t v20 = objc_retainBlock(v23);
  __int16 v21 = dispatch_time(0LL, 10000000000LL);
  im_dispatch_async_with_timeout(v21, v18, v20, &stru_1008F9F90);

  _Block_object_dispose(buf, 8);
LABEL_18:
}

    goto LABEL_18;
  }

  accountIDMap = self->_accountIDMap;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 uniqueID]);
  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](accountIDMap, "objectForKey:", v7));

  unsigned int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  uint64_t v10 = v9;
  if (v8)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      sub_10069D524(v5, v10);
    }
    goto LABEL_17;
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v23 = 138412290;
    uint64_t v24 = v5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Adding account %@", (uint8_t *)&v23, 0xCu);
  }

  -[NSRecursiveLock lock](self->_accountIDMapLock, "lock");
  uint64_t v12 = self->_accountIDMap;
  __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([v5 uniqueID]);
  -[NSMutableDictionary setObject:forKey:](v12, "setObject:forKey:", v5, v13);

  -[NSRecursiveLock unlock](self->_accountIDMapLock, "unlock");
  -[IDSDAccountController delayedSaveSettings](self, "delayedSaveSettings");
  if (![v5 isTemporary]
    || (id v14 = (void *)objc_claimAutoreleasedReturnValue([v5 expirationDate]), v14, v14))
  {
    __int16 v15 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccountController daemon](self, "daemon"));
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v5 service]);
    __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 pushTopic]);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v15 broadcasterForTopic:v17 ignoreServiceListener:1 messageContext:0]);

    __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([v5 accountSetupInfo]);
    [v18 accountAdded:v19];
LABEL_12:

    goto LABEL_13;
  }

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled((os_log_t)v18, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([v5 uniqueID]);
    __int16 v23 = 138412290;
    uint64_t v24 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v18,  OS_LOG_TYPE_DEFAULT,  "Delaying broadcast for unprovisioned temporary account %@",  (uint8_t *)&v23,  0xCu);
    goto LABEL_12;
  }
}

      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_participantsInfoForGroup,  "objectForKeyedSubscript:",  v8));
      unsigned int v46 = 0u;
      __int16 v47 = 0u;
      unint64_t v48 = 0u;
      __int16 v49 = 0u;
      uint64_t v25 = v24;
      uint64_t v26 = [v25 countByEnumeratingWithState:&v46 objects:v60 count:16];
      uint64_t v27 = v25;
      if (v26)
      {
        uint64_t v28 = v26;
        uint32_t v40 = v22;
        uint64_t v41 = v23;
        uint64_t v42 = p_lock;
        uint64_t v43 = v8;
        int v29 = *(void *)v47;
LABEL_19:
        int v30 = 0LL;
        while (1)
        {
          if (*(void *)v47 != v29) {
            objc_enumerationMutation(v25);
          }
          uint64_t v31 = *(void **)(*((void *)&v46 + 1) + 8 * v30);
          int v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "participantPushToken", v40, v41, v42, v43));
          int v33 = (void *)objc_claimAutoreleasedReturnValue([v6 rawToken]);
          double v34 = [v32 isEqualToData:v33];

          if ((v34 & 1) != 0) {
            break;
          }
          if (v28 == (id)++v30)
          {
            uint64_t v28 = [v25 countByEnumeratingWithState:&v46 objects:v60 count:16];
            if (v28) {
              goto LABEL_19;
            }
            uint64_t v27 = v25;
            p_lock = v42;
            unsigned int v8 = v43;
            id v22 = v40;
            __int16 v23 = v41;
            goto LABEL_30;
          }
        }

        uint64_t v27 = v31;

        p_lock = v42;
        unsigned int v8 = v43;
        id v22 = v40;
        __int16 v23 = v41;
        if (!v27) {
          goto LABEL_31;
        }
        [v25 removeObject:v27];
        uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          double v55 = v27;
          uint64_t v56 = 2112;
          __int128 v57 = v43;
          _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "Removed participantInfo: %@ from group: %@}",  buf,  0x16u);
        }
      }
    }

    id v6 = [obj countByEnumeratingWithState:&v29 objects:v41 count:16];
  }

  while (v6);
LABEL_19:

  if (-[NSMutableArray count](v4, "count"))
  {
    [*(id *)(v27 + 32) setEndpoints:v4];
    [*(id *)(v27 + 40) fulfillWithValue:*(void *)(v27 + 32)];
  }

  else
  {
    id v22 = IDSSendErrorDomain;
    __int16 v23 = *(void *)(v27 + 32);
    int v33 = @"IDSPipelineParameter";
    double v34 = v23;
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v34,  &v33,  1LL));
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v22,  38LL,  v24));

    [*(id *)(v27 + 40) failWithError:v25];
    id v4 = v26;
  }
}
}

    return;
  }

  uint64_t v10 = v17;
  int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
  uint64_t v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    if (v12)
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v20 = 0x402E000000000000LL;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Keychain upgrade pending, trying again in %f seconds",  buf,  0xCu);
    }

    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_1003D0214;
    v16[3] = &unk_1008F6010;
    v16[4] = self;
    unsigned int v8 = 15.0;
    unsigned int v9 = v16;
    goto LABEL_13;
  }

  if (v12)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Re-certifying device (in background)", buf, 2u);
  }

  global_queue = dispatch_get_global_queue(0LL, 0LL);
  id v14 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_1003D021C;
  v15[3] = &unk_1008F6010;
  void v15[4] = self;
  dispatch_async(v14, v15);
}

  return v10;
}

  id v6 = *a1;
  uint64_t v7 = v6 >= 2;
  unsigned int v8 = v6 - 2;
  if (!v7) {
    unsigned int v8 = -1;
  }
  return (v8 + 1);
}

      swift_unknownObjectRelease(v12, v21);
      unint64_t v1 = v44;
      uint64_t v5 = v46;
      if (v9 == v46) {
        return;
      }
    }
  }

  uint64_t v27 = 0LL;
  uint64_t v43 = v1 + 32;
  uint64_t v45 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (v27 != v45)
  {
    uint64_t v28 = v4[5];
    int v29 = *(id *)(v43 + 8 * v27);
    int v30 = NSObject._rawHashValue(seed:)(v28);
    uint64_t v31 = -1LL << *((_BYTE *)v4 + 32);
    int v32 = v30 & ~v31;
    int v33 = v32 >> 6;
    double v34 = *(void *)&v8[8 * (v32 >> 6)];
    uint64_t v35 = 1LL << v32;
    if (((1LL << v32) & v34) != 0)
    {
      sub_10041D3C4(0LL, (unint64_t *)&qword_1009BBE30, &OBJC_CLASS___IDSPushToken_ptr);
      double v36 = *(id *)(v4[6] + 8 * v32);
      int v37 = static NSObject.== infix(_:_:)(v36, v29);

      if ((v37 & 1) != 0)
      {
LABEL_30:

        goto LABEL_31;
      }

      uint64_t v38 = ~v31;
      while (1)
      {
        int v32 = (v32 + 1) & v38;
        int v33 = v32 >> 6;
        double v34 = *(void *)&v8[8 * (v32 >> 6)];
        uint64_t v35 = 1LL << v32;
        if ((v34 & (1LL << v32)) == 0) {
          break;
        }
        id v39 = *(id *)(v4[6] + 8 * v32);
        uint32_t v40 = static NSObject.== infix(_:_:)(v39, v29);

        if ((v40 & 1) != 0) {
          goto LABEL_30;
        }
      }
    }

    *(void *)&v8[8 * v33] = v35 | v34;
    *(void *)(v4[6] + 8 * v32) = v29;
    uint64_t v41 = v4[2];
    int v11 = __OFADD__(v41, 1LL);
    uint64_t v42 = v41 + 1;
    if (v11) {
      goto LABEL_44;
    }
    v4[2] = v42;
LABEL_31:
    if (++v27 == v46) {
      return;
    }
  }

        __int16 v67 = __clz(__rbit64(v68)) + (v69 << 6);
LABEL_18:
        __int16 v71 = (uint64_t)v208;
        sub_1003F5FC8( *(void *)(v209 + 48) + *(void *)(v51 + 72) * v67,  (uint64_t)v208,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
        sub_1003F600C(v71, (uint64_t)v55, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
        uint64_t v72 = (char *)&loc_100429F30 + *((int *)qword_10042B148 + swift_getEnumCaseMultiPayload(v55, v50));
        __asm { BR              X9 }
      }
    }
  }

  id v6 = *a1;
  uint64_t v7 = v6 >= 8;
  unsigned int v8 = v6 - 8;
  if (!v7) {
    unsigned int v8 = -1;
  }
  return (v8 + 1);
}

  sub_1003F6050((uint64_t)v11, type metadata accessor for SenderKeyInfo);
  sub_1003F6050((uint64_t)v7, type metadata accessor for SenderKeyInfo);
  return v44 & 1;
}

  id v6 = *a1;
  uint64_t v7 = v6 >= 3;
  unsigned int v8 = v6 - 3;
  if (!v7) {
    unsigned int v8 = -1;
  }
  return (v8 + 1);
}

  id v6 = *a1;
  uint64_t v7 = v6 >= 7;
  unsigned int v8 = v6 - 7;
  if (!v7) {
    unsigned int v8 = -1;
  }
  return (v8 + 1);
}

  id v6 = *a1;
  uint64_t v7 = v6 >= 4;
  unsigned int v8 = v6 - 4;
  if (!v7) {
    unsigned int v8 = -1;
  }
  return (v8 + 1);
}

  id v6 = *a1;
  uint64_t v7 = v6 >= 0xE;
  unsigned int v8 = v6 - 14;
  if (!v7) {
    unsigned int v8 = -1;
  }
  return (v8 + 1);
}

  id v6 = *a1;
  uint64_t v7 = v6 >= 5;
  unsigned int v8 = v6 - 5;
  if (!v7) {
    unsigned int v8 = -1;
  }
  return (v8 + 1);
}

void sub_100052810(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6 = a2;
  if ([v6 dataProtectionClass] == 3
    || [v6 dataProtectionClass] == *(_DWORD *)(a1 + 40))
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
    *a4 = 1;
  }
}

void sub_100052B84(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudConnection]);
    [v2 setCbuuid:*(void *)(a1 + 40)];
  }

void sub_100052C78(_Unwind_Exception *a1)
{
}

void sub_100052C90(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog UTunPeer](&OBJC_CLASS___IDSFoundationLog, "UTunPeer"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 56);
    uint64_t v6 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 67109634;
    int v15 = v5;
    __int16 v16 = 1024;
    int v17 = v6;
    __int16 v18 = 2112;
    id v19 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "sendAckForMessageWithSequenceNumber: class %d priority %d connection %@",  buf,  0x18u);
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100052DF4;
  v10[3] = &unk_1008F78B0;
  uint64_t v8 = *(void *)(a1 + 48);
  id v11 = v3;
  uint64_t v12 = v8;
  int v13 = *(_DWORD *)(a1 + 60);
  id v9 = v3;
  objc_msgSend(v7, "performBlockWithPriority:priority:", v10, objc_msgSend(v9, "idsPriority"));

  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
}

void sub_100052DF4(uint64_t a1)
{
  if (*(void *)(a1 + 40) == 2LL
    && (id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudConnection]),
        v2,
        v2))
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudConnection]);
  }

  else
  {
    id v3 = *(id *)(a1 + 32);
  }

  id v4 = v3;
  [v3 sendAckForMessageWithSequenceNumber:*(unsigned int *)(a1 + 48)];
}

void sub_100052F3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100052F54(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 40) == 6LL)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue([a2 cloudConnection]);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v3 hasSpaceForMessagesWithDataProtectionClass:*(unsigned int *)(a1 + 48)];
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [a2 hasSpaceForMessagesWithDataProtectionClass:*(unsigned int *)(a1 + 48)];
  }

void sub_100053930( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
}

uint64_t sub_10005397C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10005398C(uint64_t a1)
{
}

void sub_100053994(uint64_t a1)
{
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 64LL);
  id v3 = [v2 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v18;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v18 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)i);
        uint64_t v8 = *(void **)(a1 + 32);
        id v9 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "sendingMessageStatistics", (void)v17));
        id v11 = [v8 _copyStatisticsDict:v10];
        [v9 addObject:v11];

        uint64_t v12 = *(void **)(a1 + 32);
        int v13 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
        id v14 = (void *)objc_claimAutoreleasedReturnValue([v7 cloudConnection]);
        int v15 = (void *)objc_claimAutoreleasedReturnValue([v14 sendingMessageStatistics]);
        id v16 = [v12 _copyStatisticsDict:v15];
        [v13 addObject:v16];
      }

      id v4 = [v2 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }

    while (v4);
  }
}

void sub_100053B20(uint64_t a1)
{
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 56LL);
  id v3 = [v2 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v18;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v18 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)i);
        uint64_t v8 = *(void **)(a1 + 32);
        id v9 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "sendingMessageStatistics", (void)v17));
        id v11 = [v8 _copyStatisticsDict:v10];
        [v9 addObject:v11];

        uint64_t v12 = *(void **)(a1 + 32);
        int v13 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
        id v14 = (void *)objc_claimAutoreleasedReturnValue([v7 cloudConnection]);
        int v15 = (void *)objc_claimAutoreleasedReturnValue([v14 sendingMessageStatistics]);
        id v16 = [v12 _copyStatisticsDict:v15];
        [v13 addObject:v16];
      }

      id v4 = [v2 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }

    while (v4);
  }
}

void sub_100053CAC(uint64_t a1)
{
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 72LL);
  id v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v12;
    do
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(a1 + 32);
        uint64_t v8 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
        id v9 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*((void *)&v11 + 1) + 8 * (void)v6),  "sendingMessageStatistics",  (void)v11));
        id v10 = [v7 _copyStatisticsDict:v9];
        [v8 addObject:v10];

        uint64_t v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v4);
  }
}

void sub_100053EB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100053ED0(uint64_t a1)
{
  id v2 = *(id **)(a1 + 32);
  id v7 = (id)objc_claimAutoreleasedReturnValue([v2[9] objectAtIndexedSubscript:0]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v7 queueStatistics]);
  id v4 = [v2 _copyStatisticsDict:v3];
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_10005401C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100054034(uint64_t a1)
{
  id v2 = *(id **)(a1 + 32);
  id v7 = (id)objc_claimAutoreleasedReturnValue([v2[8] objectAtIndexedSubscript:0]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v7 queueStatistics]);
  id v4 = [v2 _copyStatisticsDict:v3];
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_100054180( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100054198(uint64_t a1)
{
  id v2 = *(id **)(a1 + 32);
  id v7 = (id)objc_claimAutoreleasedReturnValue([v2[7] objectAtIndexedSubscript:0]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v7 queueStatistics]);
  id v4 = [v2 _copyStatisticsDict:v3];
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_1000542E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000542FC(uint64_t a1)
{
  id v2 = *(id **)(a1 + 32);
  id v8 = (id)objc_claimAutoreleasedReturnValue([v2[7] objectAtIndexedSubscript:0]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v8 cloudConnection]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 queueStatistics]);
  id v5 = [v2 _copyStatisticsDict:v4];
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_100054458( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100054470(uint64_t a1)
{
  id v2 = *(id **)(a1 + 32);
  id v8 = (id)objc_claimAutoreleasedReturnValue([v2[8] objectAtIndexedSubscript:0]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v8 cloudConnection]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 queueStatistics]);
  id v5 = [v2 _copyStatisticsDict:v4];
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_100054DB8(void *a1, void *a2)
{
  id v3 = (void *)a1[4];
  id v4 = (void *)a1[5];
  id v5 = a2;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 cumulativeOutgoingStatistics]);
  id v7 = [v4 _copyStatisticsDict:v6];
  [v3 addObject:v7];

  id v9 = (void *)a1[5];
  id v8 = (void *)a1[6];
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 cumulativeIncomingStatistics]);
  id v11 = [v9 _copyStatisticsDict:v10];
  [v8 addObject:v11];

  __int128 v12 = (void *)a1[4];
  __int128 v13 = (void *)a1[5];
  __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v5 cloudConnection]);
  int v15 = (void *)objc_claimAutoreleasedReturnValue([v14 cumulativeOutgoingStatistics]);
  id v16 = [v13 _copyStatisticsDict:v15];
  [v12 addObject:v16];

  __int128 v19 = a1 + 5;
  __int128 v17 = (void *)a1[5];
  __int128 v18 = (void *)v19[1];
  id v22 = (id)objc_claimAutoreleasedReturnValue([v5 cloudConnection]);

  __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v22 cumulativeIncomingStatistics]);
  id v21 = [v17 _copyStatisticsDict:v20];
  [v18 addObject:v21];
}

void sub_1000555C8(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) object]);
  [v1 _powerlogDictionaryForSockets];
}

void sub_1000559CC(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) object]);
  [v1 _powerlogDictionaryForPriority:300];
}

void sub_100055A00(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) object]);
  [v1 _powerlogDictionaryForPriority:200];
}

void sub_100055A34(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) object]);
  [v1 _powerlogDictionaryForPriority:100];
}

void sub_100055E50(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) object]);
  [v1 _powerlogDictionaryForPriority:300];
}

void sub_100055E84(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) object]);
  [v1 _powerlogDictionaryForPriority:200];
}

void sub_100055EB8(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) object]);
  [v1 _powerlogDictionaryForPriority:100];
}

void sub_100056194(id a1, IDSUTunConnection *a2)
{
}

void sub_1000563F0(uint64_t a1)
{
  uint64_t v2 = OSLogHandleForTransportCategory("UTunConnection");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudConnection]);
    *(_DWORD *)buf = 138412290;
    id v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "enable connection %@.", buf, 0xCu);
  }

  uint64_t v6 = os_log_shim_legacy_logging_enabled(v5);
  if ((_DWORD)v6)
  {
    if (_IDSShouldLogTransport(v6))
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudConnection]);
      _IDSLogTransport(@"UTunConnection", @"IDS", @"enable connection %@.");

      if (_IDSShouldLog(0LL, @"UTunConnection"))
      {
        id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudConnection", v8));
        _IDSLogV(0LL, @"IDSFoundation", @"UTunConnection", @"enable connection %@.");
      }
    }
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudConnection", v8));
  [v7 setEnabled:1];
}

void sub_100056820(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForTransportCategory("UTunConnection");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "disable connection %@.", buf, 0xCu);
  }

  uint64_t v7 = os_log_shim_legacy_logging_enabled(v6);
  if ((_DWORD)v7)
  {
    if (_IDSShouldLogTransport(v7))
    {
      id v8 = v3;
      _IDSLogTransport(@"UTunConnection", @"IDS", @"disable connection %@.");
      if (_IDSShouldLog(0LL, @"UTunConnection"))
      {
        id v8 = v3;
        _IDSLogV(0LL, @"IDSFoundation", @"UTunConnection", @"disable connection %@.");
      }
    }
  }

  objc_msgSend(v3, "setEnabled:", 0, v8);
  [v3 flushAllMessagesForReason:*(void *)(a1 + 32)];
}

void sub_100056974(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForTransportCategory("UTunConnection");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "disable connection %@.", buf, 0xCu);
  }

  uint64_t v7 = os_log_shim_legacy_logging_enabled(v6);
  if ((_DWORD)v7)
  {
    if (_IDSShouldLogTransport(v7))
    {
      id v8 = v3;
      _IDSLogTransport(@"UTunConnection", @"IDS", @"disable connection %@.");
      if (_IDSShouldLog(0LL, @"UTunConnection"))
      {
        id v8 = v3;
        _IDSLogV(0LL, @"IDSFoundation", @"UTunConnection", @"disable connection %@.");
      }
    }
  }

  objc_msgSend(v3, "setEnabled:", 0, v8);
  [v3 flushAllMessagesForReason:*(void *)(a1 + 32)];
}

void sub_100056D4C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudConnection]);
  [v2 setEnabled:0];

  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudConnection]);
  [v3 flushAllMessagesForReason:*(void *)(a1 + 40)];
}

id sub_100056E10(uint64_t a1, void *a2)
{
  return [a2 setEnableOTR:*(unsigned __int8 *)(a1 + 32)];
}

id sub_100056E94(uint64_t a1, void *a2)
{
  return [a2 setIsMagnetIndicatingPeerIsAwake:*(unsigned __int8 *)(a1 + 32)];
}

id sub_100057770(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _checkServicesPreferringInfraWiFi:*(unsigned int *)(a1 + 40)];
}

id sub_100057AD8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _checkServicesPreferringInfraWiFi:*(unsigned int *)(a1 + 40)];
}

void sub_100057CA8(id a1, IDSUTunConnection *a2)
{
}

void sub_100057D4C(id a1, IDSUTunConnection *a2)
{
}

void sub_100057D80(id a1, IDSUTunConnection *a2)
{
}

void sub_100057DDC(id a1, IDSUTunConnection *a2)
{
}

id sub_100057E6C(uint64_t a1, void *a2)
{
  return [a2 cancelMessageID:*(void *)(a1 + 32)];
}

id sub_100057F00(uint64_t a1, void *a2)
{
  return [a2 kickProgressBlockForMessageID:*(void *)(a1 + 32)];
}

void sub_100058410( _Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, os_activity_scope_state_s state)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x100058264LL);
  }

  os_activity_scope_leave(&state);
  cut_arc_os_release(v24 - 120);
  _Unwind_Resume(exc_buf);
}

void sub_100058490(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDevicePolicyController sharedInstance](&OBJC_CLASS___IDSDevicePolicyController, "sharedInstance"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cbuuid]);
  id v4 = [v2 shouldBlackOutDeviceWithCbuuid:v3];

  uint64_t v5 = objc_alloc(&OBJC_CLASS___IDSDeliveryContext);
  uint64_t v6 = *(void *)(a1 + 40);
  [*(id *)(a1 + 32) rtt];
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v4));
  id v9 = -[IDSDeliveryContext initWithResponseCode:deviceID:currentAverageRTT:isDeviceBlackedOut:localMessageState:]( v5,  "initWithResponseCode:deviceID:currentAverageRTT:isDeviceBlackedOut:localMessageState:",  15LL,  v6,  v7,  v8,  &off_1009468E8);

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100058584(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDevicePolicyController sharedInstance](&OBJC_CLASS___IDSDevicePolicyController, "sharedInstance"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cbuuid]);
  id v4 = [v2 shouldBlackOutDeviceWithCbuuid:v3];

  uint64_t v5 = objc_alloc(&OBJC_CLASS___IDSDeliveryContext);
  uint64_t v6 = *(void *)(a1 + 40);
  [*(id *)(a1 + 32) rtt];
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v4));
  id v9 = -[IDSDeliveryContext initWithResponseCode:deviceID:currentAverageRTT:isDeviceBlackedOut:localMessageState:]( v5,  "initWithResponseCode:deviceID:currentAverageRTT:isDeviceBlackedOut:localMessageState:",  30LL,  v6,  v7,  v8,  &off_1009468E8);

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100058780( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100058798(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v9 = v3;
  if (*(_BYTE *)(a1 + 40))
  {
    uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 cloudConnection]);
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8LL);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }

  else
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8LL);
    id v8 = v3;
    uint64_t v6 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v8;
  }
}

void sub_100058A74(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 32);
  unsigned int v3 = [*(id *)(a1 + 32) isConnected];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v2[16]));
  [*(id *)(*(void *)v2 + 80) setObject:v4 forKeyedSubscript:*(void *)(a1 + 40)];

  unsigned int v5 = [*(id *)v2 isConnected];
  uint64_t v6 = OSLogHandleForIDSCategory("UTunPeer");
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = @"NO";
    if (v3) {
      id v10 = @"YES";
    }
    else {
      id v10 = @"NO";
    }
    *(_DWORD *)buf = 138412802;
    uint64_t v14 = v8;
    __int16 v15 = 2112;
    if (v5) {
      id v9 = @"YES";
    }
    id v16 = v10;
    __int16 v17 = 2112;
    __int128 v18 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%@ wasConnected? %@ isConnected in aggregate? %@",  buf,  0x20u);
  }

  if (v3 != v5)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 152LL));
    [WeakRetained peerConnectivityChanged:*(void *)(a1 + 32)];
  }

void sub_100059344(uint64_t a1, void *a2)
{
  id v6 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 276LL));
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 88) objectForKeyedSubscript:v6]);
  unsigned int v4 = [v3 BOOLValue];

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 276LL));
  if (v4)
  {
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v6 cloudConnection]);
    [v5 setEnabled:1];
  }
}

void sub_100059C90(id a1, IDSUTunConnection *a2)
{
}

void sub_100059C9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  if (*(_BYTE *)(a1 + 32) || (BOOL v4 = [v3 idsPriority] == (id)300, v5 = v6, v4))
  {
    [v6 setEnabled:1];
    unsigned int v5 = v6;
  }
}

LABEL_41:
}

LABEL_42:
      goto LABEL_43;
    }

    if (v9)
    {
      *(_DWORD *)buf = 138412290;
      *(void *)__int16 v71 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "client endpoint %@", buf, 0xCu);
    }

    if (nw_endpoint_get_type(v7) == nw_endpoint_type_host)
    {
      port = nw_endpoint_get_port(v7);
      uint64_t v11 = nw_endpoint_copy_port_string(v7);
      __int128 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)__int16 v71 = port;
        *(_WORD *)&v71[4] = 2080;
        *(void *)&v71[6] = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "port %u portString %s", buf, 0x12u);
      }

      free(v11);
      goto LABEL_14;
    }

    __int128 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = (nw_endpoint *)objc_claimAutoreleasedReturnValue([v4 clientUUID]);
      *(_DWORD *)buf = 138412290;
      *(void *)__int16 v71 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "client endpoint type not 'host' for client %@",  buf,  0xCu);
LABEL_43:
    }

                uint64_t v11 = v62;
              }

              int v29 = v60;
              uint64_t v64 = [v60 countByEnumeratingWithState:&v73 objects:v90 count:16];
            }

            while (v64);
            uint64_t v28 = obja;
          }
        }

        else
        {
          int v29 = (id)objc_claimAutoreleasedReturnValue(+[IMRGLog GDR](&OBJC_CLASS___IMRGLog, "GDR"));
          if (os_log_type_enabled((os_log_t)v29, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412802;
            uint64_t v83 = v67;
            uint64_t v84 = 2112;
            uint64_t v85 = v68;
            uint64_t v86 = 2112;
            uint64_t v87 = v66;
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v29,  OS_LOG_TYPE_DEFAULT,  " *** Not notifying for device name: %@  service: %@, don't have any valid handles!   hardware: %@",  buf,  0x20u);
          }
        }

    if ((v34 & 1) != 0) {
      -[IDSDAccount _reregister](self, "_reregister");
    }
  }

  else
  {
    __int128 v12 = (id)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v12, OS_LOG_TYPE_DEFAULT, "Empty aliases, ignoring", buf, 2u);
    }
  }
}
}

  if (!-[NSMutableSet count](v3, "count"))
  {

    id v3 = 0LL;
  }

  uint64_t v83 = self;
  if (+[IDSRegistrationController systemSupportsPhoneNumberRegistration]( &OBJC_CLASS___IDSRegistrationController,  "systemSupportsPhoneNumberRegistration"))
  {
    double v53 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCTAdapter sharedInstance](&OBJC_CLASS___IDSCTAdapter, "sharedInstance"));
    uint64_t v89 = 0LL;
    __int16 v54 = (void *)objc_claimAutoreleasedReturnValue([v53 currentSIMsWithError:&v89]);
    double v55 = v89;
    uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "__imArrayByApplyingBlock:", &stru_100902C38));
    __int128 v57 = (IDSRegistration *)[v56 mutableCopy];

    __int128 v58 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration _userStore](self, "_userStore"));
    __int16 v59 = (void *)objc_claimAutoreleasedReturnValue([v58 usersWithRealm:2]);
    double v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "__imArrayByApplyingBlock:", &stru_100902C58));
    -[IDSRegistration addObjectsFromArray:](v57, "addObjectsFromArray:", v60);

    __int16 v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v91 = v57;
      uint64_t v92 = 2112;
      uint64_t v93 = v55;
      _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEFAULT,  "   Device numbers: %@, error: %@",  buf,  0x16u);
    }
  }

  else
  {
    __int128 v57 = 0LL;
  }

  double v62 = v3;
  uint64_t v85 = 0u;
  uint64_t v86 = 0u;
  uint64_t v87 = 0u;
  uint64_t v88 = 0u;
  uint64_t v82 = -[NSMutableSet mutableCopy](v3, "mutableCopy");
  id obj = (id)objc_claimAutoreleasedReturnValue([v82 allObjects]);
  __int16 v63 = [obj countByEnumeratingWithState:&v85 objects:v96 count:16];
  if (v63)
  {
    uint64_t v64 = v63;
    __int16 v65 = *(void *)v86;
    uint64_t v66 = kIDSServiceDefaultsSentinelAlias;
    do
    {
      for (i = 0LL; i != v64; i = (char *)i + 1)
      {
        if (*(void *)v86 != v65) {
          objc_enumerationMutation(obj);
        }
        unint64_t v68 = *(IDSRegistration **)(*((void *)&v85 + 1) + 8LL * (void)i);
        if (!-[IDSRegistration caseInsensitiveCompare:](v68, "caseInsensitiveCompare:", v66))
        {
          __int16 v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_DEFAULT,  " => Found sentinel alias, stripping",  buf,  2u);
          }

          -[NSMutableSet removeObject:](v62, "removeObject:", v68);
        }

        if (-[IDSRegistration count](v57, "count"))
        {
          uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration lowercaseString](v68, "lowercaseString"));
          __int16 v71 = -[IDSRegistration containsObject:](v57, "containsObject:", v70);

          if (v71)
          {
            uint64_t v72 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
            if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
            {
              __int16 v73 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration serviceType](v83, "serviceType"));
              *(_DWORD *)buf = 138412546;
              uint64_t v91 = v68;
              uint64_t v92 = 2112;
              uint64_t v93 = v73;
              _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_DEFAULT,  "Skipping device number: %@  for service: %@",  buf,  0x16u);
            }

            -[NSMutableSet removeObject:](v62, "removeObject:", v68);
          }
        }
      }

      uint64_t v64 = [obj countByEnumeratingWithState:&v85 objects:v96 count:16];
    }

    while (v64);
  }

  uint64_t v74 = v62;
  uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v62, "allObjects"));
  uint64_t v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v77 = IMLoggingStringForArray(v75);
    uint64_t v78 = (IDSRegistration *)objc_claimAutoreleasedReturnValue(v77);
    uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration serviceType](v83, "serviceType"));
    uint64_t v80 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration idsUserID](v83, "idsUserID"));
    *(_DWORD *)buf = 138412802;
    uint64_t v91 = v78;
    uint64_t v92 = 2112;
    uint64_t v93 = v79;
    uint64_t v94 = 2112;
    uint64_t v95 = v80;
    _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEFAULT,  " => Final emails to register: %@    for service: %@  account: %@",  buf,  0x20u);
  }

  return (NSArray *)v75;
}

  swift_release(v51);
  int v29 = (void *)((char *)v2 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_membersByURI);
  swift_beginAccess( (char *)v2 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_membersByURI,  v213,  0LL,  0LL);
  uint64_t v86 = __chkstk_darwin(v84, v85);
  *(&v171 - 2) = (uint64_t)v2;
  uint64_t v87 = swift_bridgeObjectRetain(v86);
  uint64_t v90 = sub_1004391BC(v88, (uint64_t (*)(id, uint64_t))sub_10043897C, (uint64_t)(&v171 - 4), v87, v89);
  id v51 = (uint64_t)sub_100428954(v90);
  uint64_t v91 = swift_bridgeObjectRelease(v90);
  uint64_t v92 = *(void (**)(uint64_t))((swift_isaMask & *v2) + 0xF0LL);
  v92(v91);
  uint64_t v93 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(v198 + 48);
  uint64_t v94 = v199;
  if (v93(v82, 1LL, v199) == 1)
  {
    swift_bridgeObjectRelease(v51);
    sub_10040A274(v82, &qword_1009B99F0);
LABEL_48:
    id v39 = v200;
    goto LABEL_49;
  }

  uint64_t v95 = sub_1003F600C(v82, v69, type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet);
  uint64_t v96 = (uint64_t)v182;
  v92(v95);
  if (v93(v96, 1LL, v94))
  {
    sub_10040A274(v96, &qword_1009B99F0);
    swift_bridgeObjectRelease(v51);
LABEL_47:
    sub_1003F6050(v69, type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet);
    goto LABEL_48;
  }

  uint64_t v97 = v196;
  sub_1003F5FC8(v96, v196, type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet);
  sub_10040A274(v96, &qword_1009B99F0);
  uint64_t v98 = v97 + *((int *)v94 + 5);
  uint64_t v99 = v180;
  sub_1003F600C(v98, v180, type metadata accessor for IDSGroupEncryptionPublicIdentity);
  uint64_t v100 = v99;
  __int16 v63 = v181;
  sub_1003F600C(v100, v181, type metadata accessor for IDSGroupEncryptionPublicIdentity);
  uint64_t v101 = sub_1004D3220();
  if (v102 >> 60 == 15)
  {
    swift_bridgeObjectRelease(v51);
    sub_1003F6050(v63, type metadata accessor for IDSGroupEncryptionPublicIdentity);
    goto LABEL_47;
  }

  __int16 v49 = (char *)v101;
  uint64_t v64 = v102;
  unint64_t v68 = (unint64_t)v51 >> 62;
  id v39 = v200;
  uint64_t v105 = *(void *)((v51 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v105 >= 1) {
    goto LABEL_52;
  }
LABEL_97:
  sub_10040AD00((uint64_t)v49, v64);
  swift_bridgeObjectRelease(v51);
  sub_1003F6050(v63, type metadata accessor for IDSGroupEncryptionPublicIdentity);
  sub_1003F6050(v69, type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet);
LABEL_49:
  uint64_t v103 = *(os_unfair_lock_s **)((char *)v2 + v39);
  swift_retain(v103);
  os_unfair_lock_unlock(v103 + 4);
  return swift_release(v103);
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

    v153 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 128LL))(v132);
    if (v153)
    {
      v155 = v153;
      v156 = v154;
      ObjectType = swift_getObjectType(v153);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v156 + 16))( v3,  v133,  v129,  v102,  ObjectType,  v156);
      swift_release(v186);
      swift_unknownObjectRelease(v155, v158);
      sub_10040A274(v102, &qword_1009B8E08);
LABEL_45:
      uint64_t v77 = sub_10040A274(v129, &qword_1009B8E08);
      goto LABEL_46;
    }

  __break(1u);
}

  __break(1u);
  return result;
}

id sub_10005A2D0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleCBUUIDDidConnect:*(void *)(a1 + 40) isDefaultPairedDevice:*(unsigned __int8 *)(a1 + 48) isAlwaysConnected:*(unsigned __int8 *)(a1 + 49)];
}

id sub_10005A2E4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleCBUUIDFailToConnect:*(void *)(a1 + 40) withReason:0];
}

void sub_10005A4B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 idsPriority] == (id)300) {
    [v3 setEnabled:0 withReason:*(void *)(a1 + 32)];
  }
  else {
    [v3 setEnabled:0];
  }
}

void sub_10005A7CC(id a1, IDSUTunConnection *a2)
{
  uint64_t v2 = a2;
  if (-[IDSUTunConnection isEnabled](v2, "isEnabled") && !-[IDSUTunConnection isIdle](v2, "isIdle")) {
    -[IDSUTunConnection resumeConnectivity](v2, "resumeConnectivity");
  }
}

void sub_10005AA6C(_Unwind_Exception *a1)
{
}

void sub_10005AA8C(uint64_t a1)
{
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
LABEL_3:
    uint64_t v6 = 0LL;
    while (1)
    {
      if (*(void *)v8 != v5) {
        objc_enumerationMutation(v2);
      }
      *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = objc_msgSend( *(id *)(*((void *)&v7 + 1)
                                                                                            + 8 * v6),
                                                                                      "isIdle",
                                                                                      (void)v7);
      if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
        break;
      }
      if (v4 == (id)++v6)
      {
        id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
        if (v4) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
}

void sub_10005AB94(uint64_t a1)
{
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
LABEL_3:
    uint64_t v6 = 0LL;
    while (1)
    {
      if (*(void *)v8 != v5) {
        objc_enumerationMutation(v2);
      }
      *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = objc_msgSend( *(id *)(*((void *)&v7 + 1)
                                                                                            + 8 * v6),
                                                                                      "isIdle",
                                                                                      (void)v7);
      if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
        break;
      }
      if (v4 == (id)++v6)
      {
        id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
        if (v4) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
}

void sub_10005AC9C(uint64_t a1)
{
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
LABEL_3:
    uint64_t v6 = 0LL;
    while (1)
    {
      if (*(void *)v8 != v5) {
        objc_enumerationMutation(v2);
      }
      *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = objc_msgSend( *(id *)(*((void *)&v7 + 1)
                                                                                            + 8 * v6),
                                                                                      "isIdle",
                                                                                      (void)v7);
      if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
        break;
      }
      if (v4 == (id)++v6)
      {
        id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
        if (v4) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
}

id sub_10005AE9C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _disableTimerFired:a2];
}

void sub_10005AEFC(id a1, IDSUTunConnection *a2)
{
}

double sub_10005AF08()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstance](&OBJC_CLASS___IDSServerBag, "sharedInstance"));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([v0 objectForKey:@"gl-cloud-msg-disable-interval"]);

  if (v1)
  {
    [v1 doubleValue];
    double v3 = v2;
  }

  else
  {
    double v3 = 10.0;
  }

  return v3;
}

void sub_10005B0E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_10005B0FC(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
LABEL_3:
    uint64_t v6 = 0LL;
    while (1)
    {
      if (*(void *)v9 != v5) {
        objc_enumerationMutation(v2);
      }
      __int128 v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v8 + 1) + 8 * v6), "cloudConnection", (void)v8));
      *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v7 isIdle];

      if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
        break;
      }
      if (v4 == (id)++v6)
      {
        id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
        if (v4) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
}

void sub_10005B21C(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
LABEL_3:
    uint64_t v6 = 0LL;
    while (1)
    {
      if (*(void *)v9 != v5) {
        objc_enumerationMutation(v2);
      }
      __int128 v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v8 + 1) + 8 * v6), "cloudConnection", (void)v8));
      *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v7 isIdle];

      if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
        break;
      }
      if (v4 == (id)++v6)
      {
        id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
        if (v4) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
}

id sub_10005B440(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _cloudDisableTimerFired:a2];
}

void sub_10005BB6C(uint64_t a1)
{
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        __int128 v7 = *(void **)(*((void *)&v9 + 1) + 8LL * (void)i);
        objc_msgSend( v7,  "forceOTRNegotiation:priority:completionBlock:",  *(void *)(a1 + 40),  *(void *)(a1 + 56),  *(void *)(a1 + 48),  (void)v9);
        if (*(_BYTE *)(a1 + 64))
        {
          __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([v7 cloudConnection]);
          [v8 forceOTRNegotiation:*(void *)(a1 + 40) priority:*(void *)(a1 + 56) completionBlock:*(void *)(a1 + 48)];
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v4);
  }
}

void sub_10005BC94(uint64_t a1)
{
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        __int128 v7 = *(void **)(*((void *)&v9 + 1) + 8LL * (void)i);
        objc_msgSend( v7,  "forceOTRNegotiation:priority:completionBlock:",  *(void *)(a1 + 40),  *(void *)(a1 + 56),  *(void *)(a1 + 48),  (void)v9);
        if (*(_BYTE *)(a1 + 64))
        {
          __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([v7 cloudConnection]);
          [v8 forceOTRNegotiation:*(void *)(a1 + 40) priority:*(void *)(a1 + 56) completionBlock:*(void *)(a1 + 48)];
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v4);
  }
}

void sub_10005BDBC(uint64_t a1)
{
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        __int128 v7 = *(void **)(*((void *)&v9 + 1) + 8LL * (void)i);
        objc_msgSend( v7,  "forceOTRNegotiation:priority:completionBlock:",  *(void *)(a1 + 40),  *(void *)(a1 + 56),  *(void *)(a1 + 48),  (void)v9);
        if (*(_BYTE *)(a1 + 64))
        {
          __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([v7 cloudConnection]);
          [v8 forceOTRNegotiation:*(void *)(a1 + 40) priority:*(void *)(a1 + 56) completionBlock:*(void *)(a1 + 48)];
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v4);
  }
}

id sub_10005BF64(uint64_t a1, void *a2)
{
  return [a2 admissionPolicyChangedForTopic:*(void *)(a1 + 32) allowed:*(unsigned __int8 *)(a1 + 40)];
}

LABEL_35:
  double v36 = OSLogHandleForIDSCategory("IDSKeychainWrapper");
  int v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, " => Done saving IDS keychain data", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled(v38)
    && _IDSShouldLog(0LL, @"IDSKeychainWrapper"))
  {
    _IDSLogV(0LL, @"IDSFoundation", @"IDSKeychainWrapper", @" => Done saving IDS keychain data");
  }

  return (char)a8;
}

          sub_1000BB6DC(*(void *)(a1 + 8) + v16, v11, v13, a4, a5, a6, v41);
          goto LABEL_36;
        }

        if (v17 == 5) {
          break;
        }
        v16 += 424LL;
        if (424LL * v15 == v16)
        {
          id v16 = 0LL;
          __int128 v18 = *(void *)(a1 + 8);
          __int128 v19 = 424LL * v15;
          while (*(void *)(v18 + v16) != 3LL)
          {
            v16 += 424LL;
            if (v19 == v16) {
              goto LABEL_36;
            }
          }

          ++*(_DWORD *)(v18 + v16 + 284);
          double v34 = OSLogHandleForTransportCategory("UGL");
          uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
          {
            double v36 = SAToIPPortString(v49, 128LL, *(void *)(a1 + 8) + v16 + 16);
            int v37 = *(void *)(a1 + 8) + v16;
            uint64_t v38 = *(_DWORD *)(v37 + 8);
            *(_DWORD *)buf = 136315650;
            uint64_t v43 = v36;
            uint64_t v44 = 1024;
            uint64_t v45 = v38;
            unsigned int v46 = 2080;
            __int16 v47 = SAToIPPortString(v48, 128LL, v37 + 144);
            _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "Nominate new connection [%s(%u)-%s].",  buf,  0x1Cu);
          }

          uint32_t v40 = os_log_shim_legacy_logging_enabled(v39);
          if ((_DWORD)v40)
          {
            if (_IDSShouldLogTransport(v40))
            {
              SAToIPPortString(v49, 128LL, *(void *)(a1 + 8) + v16 + 16);
              SAToIPPortString(v48, 128LL, *(void *)(a1 + 8) + v16 + 144);
              _IDSLogTransport(@"UGL", @"IDS", @"Nominate new connection [%s(%u)-%s].");
              if (_IDSShouldLog(0LL, @"UGL"))
              {
                SAToIPPortString(v49, 128LL, *(void *)(a1 + 8) + v16 + 16);
                SAToIPPortString(v48, 128LL, *(void *)(a1 + 8) + v16 + 144);
                _IDSLogV(0LL, @"IDSFoundation", @"UGL", @"Nominate new connection [%s(%u)-%s].");
              }
            }
          }

          goto LABEL_35;
        }
      }

      uint64_t v27 = OSLogHandleForTransportCategory("UGL");
      uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        int v29 = SAToIPPortString(v49, 128LL, *(void *)(a1 + 8) + v16 + 16);
        int v30 = *(void *)(a1 + 8) + v16;
        uint64_t v31 = *(_DWORD *)(v30 + 8);
        *(_DWORD *)buf = 136315650;
        uint64_t v43 = v29;
        uint64_t v44 = 1024;
        uint64_t v45 = v31;
        unsigned int v46 = 2080;
        __int16 v47 = SAToIPPortString(v48, 128LL, v30 + 144);
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Nominate connection [%s(%u)-%s] is done, skip.",  buf,  0x1Cu);
      }

      int v33 = os_log_shim_legacy_logging_enabled(v32);
      if ((_DWORD)v33)
      {
        if (_IDSShouldLogTransport(v33))
        {
          SAToIPPortString(v49, 128LL, *(void *)(a1 + 8) + v16 + 16);
          SAToIPPortString(v48, 128LL, *(void *)(a1 + 8) + v16 + 144);
          _IDSLogTransport(@"UGL", @"IDS", @"Nominate connection [%s(%u)-%s] is done, skip.");
          if (_IDSShouldLog(0LL, @"UGL"))
          {
            SAToIPPortString(v49, 128LL, *(void *)(a1 + 8) + v16 + 16);
            SAToIPPortString(v48, 128LL, *(void *)(a1 + 8) + v16 + 144);
            _IDSLogV(0LL, @"IDSFoundation", @"UGL", @"Nominate connection [%s(%u)-%s] is done, skip.");
          }
        }
      }
    }

                if (v19 + 1 >= 2
                  && (v19 != 1
                   || -[IDSAccountRepair _checkForOtherRegisteredTopLevelPhoneAccountMatchingThisAccount:]( v9,  "_checkForOtherRegisteredTopLevelPhoneAccountMatchingThisAccount:",  v14)))
                {
                  goto LABEL_57;
                }

                goto LABEL_20;
              }

              __int128 v58 = v11;
              uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(-[IDSAccountRepair accountController](v9, "accountController"));
              double v36 = (void *)objc_claimAutoreleasedReturnValue([v35 accountsWithType:0]);

              __int16 v69 = 0u;
              uint64_t v70 = 0u;
              unint64_t v68 = 0u;
              __int16 v67 = 0u;
              int v37 = v36;
              uint64_t v38 = [v37 countByEnumeratingWithState:&v67 objects:v77 count:16];
              if (!v38)
              {

                goto LABEL_20;
              }

              id v39 = v38;
              uint32_t v40 = 0;
              id obj = v37;
              double v62 = *(void *)v68;
              do
              {
                for (i = 0LL; i != v39; i = (char *)i + 1)
                {
                  if (*(void *)v68 != v62) {
                    objc_enumerationMutation(obj);
                  }
                  uint64_t v42 = *(void **)(*((void *)&v67 + 1) + 8LL * (void)i);
                  uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v42 userUniqueIdentifier]);
                  uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v14 userUniqueIdentifier]);
                  if ([v43 isEqual:v44])
                  {
                    uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v42 uniqueID]);
                    unsigned int v46 = (void *)objc_claimAutoreleasedReturnValue([v63 uniqueID]);
                    __int16 v47 = [v45 isEqual:v46];

                    __int128 v9 = self;
                    uint64_t v14 = v63;

                    if ((v47 & 1) == 0)
                    {
                      unint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)buf = 138412290;
                        uint64_t v76 = v42;
                        _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  " => Kicking alternate SMS based account: %@",  buf,  0xCu);
                      }

                      __int16 v49 = (void *)objc_claimAutoreleasedReturnValue(-[IDSAccountRepair accountController](self, "accountController"));
                      __int16 v50 = (void *)objc_claimAutoreleasedReturnValue([v42 uniqueID]);
                      [v49 enableAccountWithUniqueID:v50];

                      [v42 registerAccount];
                      id v51 = (void *)objc_claimAutoreleasedReturnValue([v42 linkedAccounts]);
                      v66[0] = _NSConcreteStackBlock;
                      v66[1] = 3221225472LL;
                      v66[2] = sub_1000E9090;
                      v66[3] = &unk_1008F9CE0;
                      v66[4] = self;
                      objc_msgSend(v51, "__imForEach:", v66);

                      uint64_t v14 = v63;
                    }
                  }

                  else
                  {
                  }

                  if ((v40 & 1) == 0) {
                    uint32_t v40 = -[IDSAccountRepair _isPhoneAccount:registeredAndMatchingThisAccount:]( v9,  "_isPhoneAccount:registeredAndMatchingThisAccount:",  v42,  v14);
                  }
                }

                id v39 = [obj countByEnumeratingWithState:&v67 objects:v77 count:16];
              }

              while (v39);

              __int128 v8 = v57;
              __int128 v11 = v58;
              if ((v40 & 1) != 0)
              {
LABEL_57:
                double v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412290;
                  uint64_t v76 = v14;
                  _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  " => Kicking SMS based account: %@",  buf,  0xCu);
                }

                __int16 v54 = (void *)objc_claimAutoreleasedReturnValue(-[IDSAccountRepair accountController](v9, "accountController"));
                double v55 = (void *)objc_claimAutoreleasedReturnValue([v14 uniqueID]);
                [v54 enableAccountWithUniqueID:v55];

                uint64_t v28 = v63;
                [v63 registerAccount];
                int v29 = (void *)objc_claimAutoreleasedReturnValue([v63 linkedAccounts]);
                v65[0] = _NSConcreteStackBlock;
                v65[1] = 3221225472LL;
                v65[2] = sub_1000E9188;
                v65[3] = &unk_1008F9CE0;
                v65[4] = v9;
                objc_msgSend(v29, "__imForEach:", v65);
                __int128 v12 = v59;
LABEL_60:

                __int128 v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412290;
                  uint64_t v76 = v28;
                  uint64_t v24 = v20;
                  uint64_t v25 = " ** Tried to repair account: %@";
LABEL_62:
                  _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v25, buf, 0xCu);
                }
              }

              else
              {
LABEL_20:
                __int128 v20 = (os_log_s *)objc_claimAutoreleasedReturnValue([v14 service]);
                if (-[os_log_s iCloudBasedService](v20, "iCloudBasedService"))
                {
                  id v21 = [v14 isEnabled];

                  __int128 v12 = v59;
                  if ((v21 & 1) != 0) {
                    goto LABEL_64;
                  }
                  id v22 = [v14 registrationError];
                  __int128 v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                  __int16 v23 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
                  if (v22 != (id)38)
                  {
                    if (v23)
                    {
                      *(_DWORD *)buf = 138412290;
                      uint64_t v76 = v14;
                      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  " => Kicking iCloud SMS based account: %@",  buf,  0xCu);
                    }

                    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(-[IDSAccountRepair accountController](v9, "accountController"));
                    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v14 uniqueID]);
                    [v26 enableAccountWithUniqueID:v27];

                    uint64_t v28 = v63;
                    [v63 registerAccount];
                    int v29 = (void *)objc_claimAutoreleasedReturnValue([v63 linkedAccounts]);
                    v64[0] = _NSConcreteStackBlock;
                    v64[1] = 3221225472LL;
                    v64[2] = sub_1000E9280;
                    v64[3] = &unk_1008F9CE0;
                    v64[4] = v9;
                    objc_msgSend(v29, "__imForEach:", v64);
                    goto LABEL_60;
                  }

                  if (v23)
                  {
                    *(_DWORD *)buf = 138412290;
                    uint64_t v76 = v14;
                    uint64_t v24 = v20;
                    uint64_t v25 = " => Not kicking iCloud SMS based account: %@";
                    goto LABEL_62;
                  }
                }

                else
                {
                  __int128 v12 = v59;
                }
              }
            }
          }
        }

      return;
    }

    -[IMDispatchTimer invalidate](self->_phoneRepairTimer, "invalidate");
    phoneRepairTimer = self->_phoneRepairTimer;
    self->_phoneRepairTimer = 0LL;

    +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
    __int128 v11 = v10;
    __int128 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[IDSAccountRepair _lastRepairIntervalFromPrefs](self, "_lastRepairIntervalFromPrefs"));
    uint64_t v5 = v12;
    if (v12)
    {
      -[os_log_s doubleValue](v12, "doubleValue");
      uint64_t v14 = v13;
      __int16 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog phoneRepair](&OBJC_CLASS___IMRGLog, "phoneRepair"));
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        -[os_log_s doubleValue](v5, "doubleValue");
        id v16 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:"));
        *(_DWORD *)buf = 138412290;
        uint64_t v45 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Loaded last repair date %@", buf, 0xCu);
      }

      __int16 v17 = (void *)objc_claimAutoreleasedReturnValue(-[IDSAccountRepair _totalRepairCountFromPrefs](self, "_totalRepairCountFromPrefs"));
      __int128 v18 = v17;
      if (v17) {
        __int128 v19 = (uint64_t)[v17 integerValue] - 1;
      }
      else {
        __int128 v19 = -1LL;
      }
      uint64_t v25 = v19 & ~(v19 >> 63);
      self->_lastBagRepairInterval = sub_1000ED708();
      +[IDSAccountRepair _phoneNumberRepairIntervalForCount:]( &OBJC_CLASS___IDSAccountRepair,  "_phoneNumberRepairIntervalForCount:",  v25);
      id v22 = v14 + v26;
      if (v22 < v11)
      {
        uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog phoneRepair](&OBJC_CLASS___IMRGLog, "phoneRepair"));
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v28 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  v22));
          *(_DWORD *)buf = 138412290;
          uint64_t v45 = v28;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "We've missed the next repair date %@, repairing now...",  buf,  0xCu);
        }

        -[IDSAccountRepair _phoneNumberRepairTimerHit:](self, "_phoneNumberRepairTimerHit:", 0LL);
        goto LABEL_35;
      }

  return 0;
}
}

  int v29 = (void *)objc_claimAutoreleasedReturnValue([v7 objectAtIndexedSubscript:0]);
  [*(id *)(a1 + 32) setBAACert:v29];

  int v30 = (void *)objc_claimAutoreleasedReturnValue([v7 objectAtIndexedSubscript:1]);
  [*(id *)(a1 + 32) setIntermediateRootCert:v30];

  [*(id *)(a1 + 32) setBIKKeyRef:a2];
  if ([*(id *)(a1 + 32) _shouldUseDebugPiscoLogging])
  {
    uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sysdiagnose_oversized](&OBJC_CLASS___IMRGLog, "sysdiagnose_oversized"));
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      int v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) BAACert]);
      *(_DWORD *)buf = 138412290;
      *(void *)uint64_t v64 = v32;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "[Pisco] {BAACert: %@}", buf, 0xCu);
    }

    int v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sysdiagnose_oversized](&OBJC_CLASS___IMRGLog, "sysdiagnose_oversized"));
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      double v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) intermediateRootCert]);
      *(_DWORD *)buf = 138412290;
      *(void *)uint64_t v64 = v34;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "[Pisco] {intermediateRootCert: %@}",  buf,  0xCu);
    }
  }

  if ([*(id *)(a1 + 32) _shouldUsePSCBAA])
  {
    uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Using PSC BAA validation", buf, 2u);
    }

    objc_msgSend(*(id *)(a1 + 32), "setStateFlags:", (unint64_t)objc_msgSend(*(id *)(a1 + 32), "stateFlags") | 1);
    double v36 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) BAACert]);
    if (v36)
    {
      int v37 = (void *)v36;
      uint64_t v38 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) intermediateRootCert]);
      if (v38)
      {
        id v39 = (void *)v38;
        uint32_t v40 = [*(id *)(a1 + 32) BIKKeyRef];

        if (!v40) {
          goto LABEL_56;
        }
        uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "Adding option to new validation session",  buf,  2u);
        }

        __int16 v54 = [*(id *)(a1 + 32) BIKKeyRef];
        double v55 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) BAACert]);
        double v53 = [v55 bytes];
        uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) BAACert]);
        uint64_t v43 = [v42 length];
        uint64_t v44 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) intermediateRootCert]);
        uint64_t v45 = [v44 bytes];
        unsigned int v46 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) intermediateRootCert]);
        LODWORD(v45) = sub_1005E4334( (uint64_t)&v60,  (uint64_t)v54,  (uint64_t)v53,  v43,  (uint64_t)v45,  (int)[v46 length]);

        if (!(_DWORD)v45 && v60)
        {
          __int16 v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "Successfully added option to validation session",  buf,  2u);
          }

          [*(id *)(a1 + 32) setPscSession:v60];
          objc_msgSend( *(id *)(a1 + 32),  "setStateFlags:",  (unint64_t)objc_msgSend(*(id *)(a1 + 32), "stateFlags") | 0x10);
          goto LABEL_56;
        }

        int v37 = (void *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
        if (os_log_type_enabled((os_log_t)v37, OS_LOG_TYPE_FAULT)) {
          sub_10069D104();
        }
      }
    }
  }
}

    goto LABEL_36;
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
  if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v6,  OS_LOG_TYPE_DEFAULT,  "Tried to enable a primary account with no unique ID, ignoring...",  buf,  2u);
  }

                  double v34 = (char *)v34 + 1;
                  uint64_t v28 = v30;
                }

                while (v32 != v34);
                uint64_t v43 = [v77 countByEnumeratingWithState:&v86 objects:v100 count:16];
                int v32 = v43;
              }

              while (v43);
            }

            uint64_t v14 = v69;
            __int128 v10 = v70;
            uint64_t v44 = v72;
            if (v69
              && -[os_log_s isEqualToString:](v65, "isEqualToString:", v69)
              && [v72 count])
            {
              uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                uint64_t v102 = v69;
                _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "Clearing legacy domain { domain: %@ }",  buf,  0xCu);
              }

              uint64_t v84 = 0u;
              uint64_t v85 = 0u;
              uint64_t v82 = 0u;
              uint64_t v83 = 0u;
              unsigned int v46 = v72;
              __int16 v47 = [v46 countByEnumeratingWithState:&v82 objects:v99 count:16];
              if (v47)
              {
                unint64_t v48 = v47;
                __int16 v49 = *(void *)v83;
                do
                {
                  for (i = 0LL; i != v48; i = (char *)i + 1)
                  {
                    if (*(void *)v83 != v49) {
                      objc_enumerationMutation(v46);
                    }
                    id v51 = *(void *)(*((void *)&v82 + 1) + 8LL * (void)i);
                    __int16 v52 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccountController userDefaults](v2, "userDefaults"));
                    [v52 setValue:0 forKey:v51 appID:v69];
                  }

                  unint64_t v48 = [v46 countByEnumeratingWithState:&v82 objects:v99 count:16];
                }

                while (v48);
              }

              double v53 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccountController userDefaults](v2, "userDefaults"));
              [v53 synchronizeAppID:v69];

              uint64_t v44 = v72;
              uint64_t v28 = v30;
            }

            __int128 v9 = v66;
            uint64_t v6 = v67;
            __int128 v8 = v71;
          }

    __int128 v13 = (id)v53;
  }
}

    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v20, buf, 0xCu);
    goto LABEL_40;
  }

  __int128 v19 = 0;
LABEL_42:
  os_activity_scope_leave(&state);
  cut_arc_os_release(&v30);

  return v19;
}

  uint64_t v72 = kIDSQRAllocateKey_SenderURI;
  __int16 v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_SenderURI, v941, v984, v1027));
  uint64_t v75 = objc_opt_class(&OBJC_CLASS___NSString, v74);
  uint64_t v76 = objc_opt_isKindOfClass(v73, v75);

  uint64_t v77 = (NSString *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v72]);
  uint64_t v78 = v77;
  if ((v76 & 1) != 0)
  {
    senderURI = self->_senderURI;
    self->_senderURI = v77;
LABEL_37:

    goto LABEL_44;
  }

  if (v78)
  {
    uint64_t v80 = OSLogHandleForIDSCategory("QRAllocator");
    uint64_t v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
    if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v82 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v72]);
      uint64_t v84 = (id)objc_opt_class(&OBJC_CLASS___NSString, v83);
      uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v72]);
      uint64_t v87 = (id)objc_opt_class(v85, v86);
      *(_DWORD *)buf = 138412802;
      v1070 = v82;
      v1071 = 2112;
      v1072 = v84;
      v1073 = 2112;
      v1074 = v87;
      _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v88))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        senderURI = (NSString *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v72]);
        uint64_t v90 = objc_opt_class(&OBJC_CLASS___NSString, v89);
        uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v72]);
        v985 = v90;
        v1028 = objc_opt_class(v91, v92);
        v942 = senderURI;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_37;
      }
    }
  }

  swift_release(v9);
  id v2 = v37;
  uint64_t v35 = 1LL << *(_BYTE *)(v9 + 32);
  if (v35 > 63) {
    bzero(v39, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    os_log_s *v39 = -1LL << v35;
  }
  *(void *)(v9 + 16) = 0LL;
LABEL_39:
  uint64_t result = swift_release(v9);
  *id v2 = v11;
  return result;
}

  swift_release(v9);
  id v2 = v37;
  uint64_t v35 = 1LL << *(_BYTE *)(v9 + 32);
  if (v35 > 63) {
    bzero(v39, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    os_log_s *v39 = -1LL << v35;
  }
  *(void *)(v9 + 16) = 0LL;
LABEL_39:
  uint64_t result = swift_release(v9);
  *id v2 = v11;
  return result;
}

  swift_release(v9);
  id v2 = v37;
  uint64_t v35 = 1LL << *(_BYTE *)(v9 + 32);
  if (v35 > 63) {
    bzero(v39, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    os_log_s *v39 = -1LL << v35;
  }
  *(void *)(v9 + 16) = 0LL;
LABEL_39:
  uint64_t result = swift_release(v9);
  *id v2 = v11;
  return result;
}

    int v33 = (v47 - 1) & v47;
    id v39 = __clz(__rbit64(v47)) + (v32 << 6);
    goto LABEL_36;
  }

  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

    sub_10041D3BC(v6);
    return;
  }

  __break(1u);
}

  __break(1u);
  return result;
}

  swift_release(v10);
  id v3 = v40;
  id v39 = 1LL << *(_BYTE *)(v10 + 32);
  if (v39 > 63) {
    bzero(v42, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v42 = -1LL << v39;
  }
  *(void *)(v10 + 16) = 0LL;
LABEL_39:
  uint64_t result = swift_release(v10);
  *id v3 = v12;
  return result;
}

uint64_t sub_10005D6E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10005DC08(id a1)
{
  off_1009BE8A8 = (_UNKNOWN *)IMWeakLinkSymbol("SecOTRSSignAndProtectMessage", @"Security");
}

void sub_10005DC34(id a1)
{
  off_1009BE8B8 = (_UNKNOWN *)IMWeakLinkSymbol("SecOTRSVerifyAndExposeMessage", @"Security");
}

id sub_10005DC60()
{
  CFTypeRef cf = 0LL;
  if (qword_1009BE8D0 != -1) {
    dispatch_once(&qword_1009BE8D0, &stru_1008F81A8);
  }
  if (!off_1009BE8C8 || ((v0 = (void *)off_1009BE8C8(0LL, &cf)) != 0LL ? (BOOL v1 = cf == 0LL) : (BOOL v1 = 0), !v1))
  {
    uint64_t v2 = OSLogHandleForTransportCategory("IDSSecMWCreateSessionSeed");
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      CFTypeRef v9 = cf;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "SecMWCreateSessionSeed for Key Material (error %@)",  buf,  0xCu);
    }

    uint64_t v5 = os_log_shim_legacy_logging_enabled(v4);
    if ((_DWORD)v5)
    {
      if (_IDSShouldLogTransport(v5))
      {
        _IDSLogTransport( @"IDSSecMWCreateSessionSeed",  @"IDS",  @"SecMWCreateSessionSeed for Key Material (error %@)");
        if (_IDSShouldLog(0LL, @"IDSSecMWCreateSessionSeed")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSSecMWCreateSessionSeed",  @"SecMWCreateSessionSeed for Key Material (error %@)");
        }
      }
    }

    uint64_t v0 = (void *)cf;
    if (cf)
    {
      CFRelease(cf);
      uint64_t v0 = 0LL;
    }
  }

  return v0;
}

void sub_10005DDF4(id a1)
{
  off_1009BE8C8 = (uint64_t (*)(void, void))IMWeakLinkSymbol( "SecMWCreateSessionSeed",  @"MessageProtection");
}

id sub_10005DE20()
{
  CFTypeRef cf = 0LL;
  if (qword_1009BE8E0 != -1) {
    dispatch_once(&qword_1009BE8E0, &stru_1008F81C8);
  }
  if (!off_1009BE8D8 || ((v0 = (void *)off_1009BE8D8(0LL, &cf)) != 0LL ? (BOOL v1 = cf == 0LL) : (BOOL v1 = 0), !v1))
  {
    uint64_t v2 = OSLogHandleForTransportCategory("IDSSecMWCreateSessionSalt");
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      CFTypeRef v9 = cf;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "_SecMWCreateSessionSalt for Key Salt (error %@)",  buf,  0xCu);
    }

    uint64_t v5 = os_log_shim_legacy_logging_enabled(v4);
    if ((_DWORD)v5)
    {
      if (_IDSShouldLogTransport(v5))
      {
        _IDSLogTransport( @"IDSSecMWCreateSessionSalt",  @"IDS",  @"_SecMWCreateSessionSalt for Key Salt (error %@)");
        if (_IDSShouldLog(0LL, @"IDSSecMWCreateSessionSalt")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSSecMWCreateSessionSalt",  @"_SecMWCreateSessionSalt for Key Salt (error %@)");
        }
      }
    }

    uint64_t v0 = (void *)cf;
    if (cf)
    {
      CFRelease(cf);
      uint64_t v0 = 0LL;
    }
  }

  return v0;
}

void sub_10005DFB4(id a1)
{
  off_1009BE8D8 = (uint64_t (*)(void, void))IMWeakLinkSymbol( "SecMWCreateSessionSalt",  @"MessageProtection");
}

id sub_10005DFE0(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  id v16 = 0LL;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[GFTKeyWrapping wrapSeed:to:legacy:error:]( &OBJC_CLASS___GFTKeyWrapping,  "wrapSeed:to:legacy:error:",  v5,  a2,  a3,  &v16));
  id v7 = v16;
  __int128 v8 = v7;
  if (v6) {
    BOOL v9 = v7 == 0LL;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    id v14 = v6;
  }

  else
  {
    uint64_t v10 = OSLogHandleForTransportCategory("IDSGFTKeyWrappingWrapSeed");
    __int128 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      __int128 v18 = v8;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "wrapSeed (error %@)", buf, 0xCu);
    }

    uint64_t v13 = os_log_shim_legacy_logging_enabled(v12);
    if ((_DWORD)v13)
    {
      if (_IDSShouldLogTransport(v13))
      {
        _IDSLogTransport(@"IDSGFTKeyWrappingWrapSeed", @"IDS", @"wrapSeed (error %@)");
      }
    }

    id v14 = 0LL;
  }

  return v14;
}

id sub_10005E17C(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  id v16 = 0LL;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[GFTKeyWrapping unwrapSeed:usingKey:legacy:error:]( &OBJC_CLASS___GFTKeyWrapping,  "unwrapSeed:usingKey:legacy:error:",  v5,  a2,  a3,  &v16));
  id v7 = v16;
  __int128 v8 = v7;
  if (v6) {
    BOOL v9 = v7 == 0LL;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    id v14 = v6;
  }

  else
  {
    uint64_t v10 = OSLogHandleForTransportCategory("IDSGFTKeyWrappingUnwrapSeed");
    __int128 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      __int128 v18 = v8;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "unwrapSeed (error %@)", buf, 0xCu);
    }

    uint64_t v13 = os_log_shim_legacy_logging_enabled(v12);
    if ((_DWORD)v13)
    {
      if (_IDSShouldLogTransport(v13))
      {
        _IDSLogTransport(@"IDSGFTKeyWrappingUnwrapSeed", @"IDS", @"unwrapSeed (error %@)");
      }
    }

    id v14 = 0LL;
  }

  return v14;
}

id sub_10005E318(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v14 = 0LL;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[GFTKeyWrapping encrypt:toKey:error:]( &OBJC_CLASS___GFTKeyWrapping,  "encrypt:toKey:error:",  v3,  a2,  &v14));
  id v5 = v14;
  uint64_t v6 = v5;
  if (v4) {
    BOOL v7 = v5 == 0LL;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    id v12 = v4;
  }

  else
  {
    uint64_t v8 = OSLogHandleForTransportCategory("IDSGFTKeyWrappingUnwrapSeed");
    BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "unwrapSeed (error %@)", buf, 0xCu);
    }

    uint64_t v11 = os_log_shim_legacy_logging_enabled(v10);
    if ((_DWORD)v11)
    {
      if (_IDSShouldLogTransport(v11))
      {
        _IDSLogTransport(@"IDSGFTKeyWrappingUnwrapSeed", @"IDS", @"unwrapSeed (error %@)");
      }
    }

    id v12 = 0LL;
  }

  return v12;
}

id sub_10005E4AC(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v14 = 0LL;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[GFTKeyWrapping decrypt:usingKey:error:]( &OBJC_CLASS___GFTKeyWrapping,  "decrypt:usingKey:error:",  v3,  a2,  &v14));
  id v5 = v14;
  uint64_t v6 = v5;
  if (v4) {
    BOOL v7 = v5 == 0LL;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    id v12 = v4;
  }

  else
  {
    uint64_t v8 = OSLogHandleForTransportCategory("IDSGFTKeyWrappingUnwrapSeed");
    BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "unwrapSeed (error %@)", buf, 0xCu);
    }

    uint64_t v11 = os_log_shim_legacy_logging_enabled(v10);
    if ((_DWORD)v11)
    {
      if (_IDSShouldLogTransport(v11))
      {
        _IDSLogTransport(@"IDSGFTKeyWrappingUnwrapSeed", @"IDS", @"unwrapSeed (error %@)");
      }
    }

    id v12 = 0LL;
  }

  return v12;
}

uint64_t sub_10005E640(void *a1, uint64_t a2)
{
  id v3 = a1;
  CFTypeRef cf = 0LL;
  if (qword_1009BE8F0 != -1) {
    dispatch_once(&qword_1009BE8F0, &stru_1008F81E8);
  }
  if (!off_1009BE8E8 || (uint64_t v4 = off_1009BE8E8(v3, a2, &cf)) == 0 || cf)
  {
    uint64_t v5 = OSLogHandleForTransportCategory("IDSSecKeyCreateWithData");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      CFTypeRef v12 = cf;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "(error %@)", buf, 0xCu);
    }

    uint64_t v8 = os_log_shim_legacy_logging_enabled(v7);
    if ((_DWORD)v8)
    {
      if (_IDSShouldLogTransport(v8))
      {
        _IDSLogTransport(@"IDSSecKeyCreateWithData", @"IDS", @"(error %@)");
      }
    }

    if (cf) {
      CFRelease(cf);
    }
    uint64_t v4 = 0LL;
  }

  return v4;
}

void sub_10005E7EC(id a1)
{
  off_1009BE8E8 = (uint64_t (*)(void, void, void))IMWeakLinkSymbol( "SecKeyCreateWithData",  @"MessageProtection");
}

uint64_t sub_10005E818(uint64_t a1, uint64_t a2)
{
  if (qword_1009BE900 != -1) {
    dispatch_once(&qword_1009BE900, &stru_1008F8208);
  }
  if (off_1009BE8F8) {
    return off_1009BE8F8(0LL, a2);
  }
  else {
    return 0LL;
  }
}

void sub_10005E880(id a1)
{
  off_1009BE8F8 = (uint64_t (*)(void, void))IMWeakLinkSymbol( "SecMWCreateEphemeralDeviceIdentity",  @"MessageProtection");
}

id sub_10005E93C(id a1, IDSURI *a2)
{
  return -[IDSURI prefixedURI](a2, "prefixedURI");
}

LABEL_42:
  -[NSMutableArray sortUsingComparator:](v72, "sortUsingComparator:", &stru_1008F82B0);
  uint64_t v41 = OSLogHandleForIDSCategory("IDQuery");
  uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v43 = @"YES";
    if (v69) {
      uint64_t v44 = @"YES";
    }
    else {
      uint64_t v44 = @"NO";
    }
    if (!v12) {
      uint64_t v43 = @"NO";
    }
    *(_DWORD *)buf = 138412546;
    uint64_t v86 = v44;
    uint64_t v87 = 2112;
    uint64_t v88 = v43;
    _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "Selecting account {forOutsideiCloudMessaging: %@, iCloudUsableForOutside: %@}",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v45))
  {
    unsigned int v46 = v69 ? @"YES" : @"NO";
    __int16 v47 = v12 ? @"YES" : @"NO";
    MarcoLogMadridLevel( @"IDSDaemonQueries",  0LL,  @"IDQuery",  @"Selecting account {forOutsideiCloudMessaging: %@, iCloudUsableForOutside: %@}");
    double v60 = v46;
    uint64_t v66 = v47;
    IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"Selecting account {forOutsideiCloudMessaging: %@, iCloudUsableForOutside: %@}");
    if ((_IMWillLog(@"IDQuery", v48) & 1) != 0)
    {
      double v60 = v46;
      uint64_t v66 = v47;
      _IMAlwaysLog( 0LL,  @"IDQuery",  @"Selecting account {forOutsideiCloudMessaging: %@, iCloudUsableForOutside: %@}");
    }
  }

  if (-[NSMutableArray count](v72, "count", v60, v66))
  {
    __int16 v49 = (id)objc_claimAutoreleasedReturnValue(-[NSMutableArray firstObject](v72, "firstObject"));
LABEL_72:
    uint32_t v40 = v49;
    goto LABEL_73;
  }

  if (!v67 || ![v75 isEnabled])
  {
    if (!v13)
    {
      uint32_t v40 = 0LL;
      goto LABEL_73;
    }

      -[IDSBTLELink _localDetectedCorruption](self, "_localDetectedCorruption", v37, v38, v39, v40);
      goto LABEL_43;
    }

    uint64_t v25 = OSLogHandleForIDSCategory("BTLELink");
    uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = [v4 length];
      *(_DWORD *)buf = 134217984;
      *(void *)&uint64_t v42 = v27;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Received data too small (%lu) - rejecting",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v28) && _IDSShouldLog(0LL, @"BTLELink"))
    {
      [v4 length];
      _IDSLogV(0LL, @"IDSFoundation", @"BTLELink", @"Received data too small (%lu) - rejecting");
    }
  }

  else
  {
    id v22 = OSLogHandleForIDSCategory("BTLELink");
    __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Received zero-length data - rejecting",  buf,  2u);
    }
  }
            }
          }

          uint64_t v24 = [v22 countByEnumeratingWithState:&v44 objects:v57 count:16];
        }

        while (v24);
      }
    }
  }

  uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userDefaults]);
  [v35 setAppBool:1 forKey:@"GDRRequestMadeForRelayRepair"];
}

    goto LABEL_43;
  }

  double v34 = !v22;
  if (v146 && self->_iCloudSignInDate)
  {
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v8 registeredTime]);
    double v36 = v35 != 0LL;
  }

  else
  {
    double v36 = 0;
  }

  manateeAvailableDate = self->_manateeAvailableDate;
  if (manateeAvailableDate) {
    uint64_t v38 = v34;
  }
  else {
    uint64_t v38 = 1;
  }
  if ((v38 & 1) != 0)
  {
    __int128 v141 = 0;
  }

  else
  {
    id v39 = (void *)objc_claimAutoreleasedReturnValue([v8 registeredTime]);
    __int128 v141 = v39 != 0LL;
  }

  if (v146 && self->_manateeAvailableDate)
  {
    uint32_t v40 = (void *)objc_claimAutoreleasedReturnValue([v8 registeredTime]);
    v142 = v40 != 0LL;
  }

  else
  {
    v142 = 0;
  }

  uint64_t v41 = !v145;
  if (v9) {
    uint64_t v41 = 1;
  }
  if ((v41 & 1) != 0)
  {
    v143 = 0;
  }

  else
  {
    uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v8 registeredTime]);
    v143 = v42 != 0LL;
  }

  if (v146)
  {
    uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v8 registeredTime]);
    v144 = v43 != 0LL;
  }

  else
  {
    v144 = 0;
  }

  if (((v32 | v30) & 1) == 0 && !self->_hasReportediCloudBuddyTime)
  {
    __int128 v139 = v36;
    uint64_t v44 = self->_buddyFinishDate;
    if (v44)
    {
      -[NSDate timeIntervalSinceDate:](v44, "timeIntervalSinceDate:", self->_iCloudSignInDate);
      unsigned int v46 = v45;
      __int16 v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v48 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u",  @"IDS_iCloudBuddyTime",  v5));
        *(_DWORD *)buf = 138412546;
        __int16 v148 = v48;
        v149 = 2048;
        v150 = v46;
        _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "Reporting KT Metric {metricName: %@, timeInterval: %f}",  buf,  0x16u);
      }

      __int16 v49 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
      __int16 v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v46));
      id v51 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u",  @"IDS_iCloudBuddyTime",  v5));
      [v49 logMetric:v50 withName:v51];
    }

    else
    {
      __int16 v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        double v53 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u",  @"IDS_iCloudBuddyTime",  v5));
        *(_DWORD *)buf = 138412290;
        __int16 v148 = v53;
        _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "Reporting KT Metric success. {metricName: %@}",  buf,  0xCu);
      }

      __int16 v49 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
      __int16 v50 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u",  @"IDS_iCloudBuddyTime",  v5));
      [v49 logSuccessForEventNamed:v50];
    }

    self->_hasReportediCloudBuddyTime = 1;
    double v36 = v139;
  }

  if (v31 && !self->_hasReportediCloudManateeTime)
  {
    __int16 v54 = v36;
    -[NSDate timeIntervalSinceDate:](self->_manateeAvailableDate, "timeIntervalSinceDate:", self->_iCloudSignInDate);
    uint64_t v56 = v55;
    __int128 v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v58 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u",  @"IDS_iCloudManateeTime",  v5));
      *(_DWORD *)buf = 138412546;
      __int16 v148 = v58;
      v149 = 2048;
      v150 = v56;
      _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "Reporting KT Metric {metricName: %@, timeInterval: %f",  buf,  0x16u);
    }

    __int16 v59 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    double v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v56));
    __int16 v61 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u",  @"IDS_iCloudManateeTime",  v5));
    [v59 logMetric:v60 withName:v61];

    self->_hasReportediCloudManateeTime = 1;
    double v36 = v54;
  }

  if (v140)
  {
    double v62 = v36;
    __int16 v63 = (void *)objc_claimAutoreleasedReturnValue([v8 registeredTime]);
    [v63 timeIntervalSinceDate:self->_iCloudSignInDate];
    __int16 v65 = v64;

    uint64_t v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v67 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u",  @"IDS_iCloudIDSNoKTRegTime",  v5));
      *(_DWORD *)buf = 138412546;
      __int16 v148 = v67;
      v149 = 2048;
      v150 = v65;
      _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "Reporting KT Metric {metricName: %@, timeInterval: %f",  buf,  0x16u);
    }

    unint64_t v68 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    __int16 v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v65));
    uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u",  @"IDS_iCloudIDSNoKTRegTime",  v5));
    [v68 logMetric:v69 withName:v70];

    double v36 = v62;
  }

  if (v36)
  {
    __int16 v71 = (void *)objc_claimAutoreleasedReturnValue([v8 registeredTime]);
    [v71 timeIntervalSinceDate:self->_iCloudSignInDate];
    __int16 v73 = v72;

    uint64_t v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v75 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u",  @"IDS_iCloudIDSKTRegTime",  v5));
      *(_DWORD *)buf = 138412546;
      __int16 v148 = v75;
      v149 = 2048;
      v150 = v73;
      _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEFAULT,  "Reporting KT Metric {metricName: %@, timeInterval: %f",  buf,  0x16u);
    }

    uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v73));
    uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u",  @"IDS_iCloudIDSKTRegTime",  v5));
    [v76 logMetric:v77 withName:v78];
  }

  if (manateeAvailableDate) {
    uint64_t v79 = v30;
  }
  else {
    uint64_t v79 = 1;
  }
  if ((v79 & 1) == 0 && !self->_hasReportedManateeBuddyTime)
  {
    uint64_t v80 = self->_buddyFinishDate;
    if (v80)
    {
      -[NSDate timeIntervalSinceDate:](v80, "timeIntervalSinceDate:", self->_manateeAvailableDate);
      uint64_t v82 = v81;
      uint64_t v83 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
      if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v84 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u",  @"IDS_manateeBuddyTime",  v5));
        *(_DWORD *)buf = 138412546;
        __int16 v148 = v84;
        v149 = 2048;
        v150 = v82;
        _os_log_impl( (void *)&_mh_execute_header,  v83,  OS_LOG_TYPE_DEFAULT,  "Reporting KT Metric {metricName: %@, timeInterval: %f",  buf,  0x16u);
      }

      uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
      uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v82));
      uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u",  @"IDS_manateeBuddyTime",  v5));
      [v85 logMetric:v86 withName:v87];
    }

    else
    {
      uint64_t v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
      if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v89 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u",  @"IDS_manateeBuddyTime",  v5));
        *(_DWORD *)buf = 138412290;
        __int16 v148 = v89;
        _os_log_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_DEFAULT,  "Reporting KT Metric success. {metricName: %@}",  buf,  0xCu);
      }

      uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
      uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u",  @"IDS_manateeBuddyTime",  v5));
      [v85 logSuccessForEventNamed:v86];
    }

    self->_hasReportedManateeBuddyTime = 1;
  }

  if (v141)
  {
    uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue([v8 registeredTime]);
    [v90 timeIntervalSinceDate:self->_manateeAvailableDate];
    uint64_t v92 = v91;

    uint64_t v93 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v94 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u",  @"IDS_manateeIDSNoKTRegTime",  v5));
      *(_DWORD *)buf = 138412546;
      __int16 v148 = v94;
      v149 = 2048;
      v150 = v92;
      _os_log_impl( (void *)&_mh_execute_header,  v93,  OS_LOG_TYPE_DEFAULT,  "Reporting KT Metric {metricName: %@, timeInterval: %f",  buf,  0x16u);
    }

    uint64_t v95 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v92));
    uint64_t v97 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u",  @"IDS_manateeIDSNoKTRegTime",  v5));
    [v95 logMetric:v96 withName:v97];
  }

  if (v142)
  {
    uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue([v8 registeredTime]);
    [v98 timeIntervalSinceDate:self->_manateeAvailableDate];
    uint64_t v100 = v99;

    uint64_t v101 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v102 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u",  @"IDS_manateeIDSKTRegTime",  v5));
      *(_DWORD *)buf = 138412546;
      __int16 v148 = v102;
      v149 = 2048;
      v150 = v100;
      _os_log_impl( (void *)&_mh_execute_header,  v101,  OS_LOG_TYPE_DEFAULT,  "Reporting KT Metric {metricName: %@, timeInterval: %f",  buf,  0x16u);
    }

    uint64_t v103 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    uint64_t v104 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v100));
    uint64_t v105 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u",  @"IDS_manateeIDSKTRegTime",  v5));
    [v103 logMetric:v104 withName:v105];
  }

  if (v143 && !v30)
  {
    if (self->_buddyFinishDate)
    {
      uint64_t v106 = (void *)objc_claimAutoreleasedReturnValue([v8 registeredTime]);
      [v106 timeIntervalSinceDate:self->_buddyFinishDate];
      uint64_t v108 = v107;

      uint64_t v109 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
      if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v110 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u",  @"IDS_buddyIDSNoKTRegTime",  v5));
        *(_DWORD *)buf = 138412546;
        __int16 v148 = v110;
        v149 = 2048;
        v150 = v108;
        _os_log_impl( (void *)&_mh_execute_header,  v109,  OS_LOG_TYPE_DEFAULT,  "Reporting KT Metric {metricName: %@, timeInterval: %f",  buf,  0x16u);
      }

      uint64_t v111 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
      uint64_t v112 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v108));
      uint64_t v113 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u",  @"IDS_buddyIDSNoKTRegTime",  v5));
      [v111 logMetric:v112 withName:v113];
    }

    else
    {
      uint64_t v114 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
      if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v115 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u",  @"IDS_buddyIDSNoKTRegTime",  v5));
        *(_DWORD *)buf = 138412290;
        __int16 v148 = v115;
        _os_log_impl( (void *)&_mh_execute_header,  v114,  OS_LOG_TYPE_DEFAULT,  "Reporting KT Metric success. {metricName: %@}",  buf,  0xCu);
      }

      uint64_t v111 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
      uint64_t v112 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u",  @"IDS_buddyIDSNoKTRegTime",  v5));
      [v111 logSuccessForEventNamed:v112];
    }
  }

  if (v144 && !v30)
  {
    if (self->_buddyFinishDate)
    {
      uint64_t v116 = (void *)objc_claimAutoreleasedReturnValue([v8 registeredTime]);
      [v116 timeIntervalSinceDate:self->_buddyFinishDate];
      uint64_t v118 = v117;

      uint64_t v119 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
      if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v120 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u",  @"IDS_buddyIDSKTRegTime",  v5));
        *(_DWORD *)buf = 138412546;
        __int16 v148 = v120;
        v149 = 2048;
        v150 = v118;
        _os_log_impl( (void *)&_mh_execute_header,  v119,  OS_LOG_TYPE_DEFAULT,  "Reporting KT Metric {metricName: %@, timeInterval: %f",  buf,  0x16u);
      }

      uint64_t v121 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
      uint64_t v122 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v118));
      uint64_t v123 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u",  @"IDS_buddyIDSKTRegTime",  v5));
      [v121 logMetric:v122 withName:v123];
    }

    else
    {
      uint64_t v124 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
      if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v125 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u",  @"IDS_buddyIDSKTRegTime",  v5));
        *(_DWORD *)buf = 138412290;
        __int16 v148 = v125;
        _os_log_impl( (void *)&_mh_execute_header,  v124,  OS_LOG_TYPE_DEFAULT,  "Reporting KT Metric success. {metricName: %@}",  buf,  0xCu);
      }

      uint64_t v121 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
      uint64_t v122 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u",  @"IDS_buddyIDSKTRegTime",  v5));
      [v121 logSuccessForEventNamed:v122];
    }
  }

  if (v146)
  {
    __int128 v126 = (void *)objc_claimAutoreleasedReturnValue([v9 registeredTime]);
    if (v126)
    {
      __int128 v127 = (void *)objc_claimAutoreleasedReturnValue([v8 registeredTime]);
      __int128 v128 = (void *)objc_claimAutoreleasedReturnValue([v9 registeredTime]);
      [v127 timeIntervalSinceDate:v128];
      __int128 v130 = v129;
    }

    else
    {
      __int128 v130 = 0.0;
    }

    __int128 v131 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v132 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u",  @"IDS_IDSNoKTRegIDSKTRegTime",  v5));
      *(_DWORD *)buf = 138412546;
      __int16 v148 = v132;
      v149 = 2048;
      v150 = v130;
      _os_log_impl( (void *)&_mh_execute_header,  v131,  OS_LOG_TYPE_DEFAULT,  "Reporting KT Metric {metricName: %@, timeInterval: %f",  buf,  0x16u);
    }

    char v133 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    __int128 v134 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v130));
    __int128 v135 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u",  @"IDS_IDSNoKTRegIDSKTRegTime",  v5));
    [v133 logMetric:v134 withName:v135];
  }

  if (!v145)
  {
    iCloudSignInDate = self->_iCloudSignInDate;
    self->_iCloudSignInDate = 0LL;

    __int128 v137 = self->_buddyFinishDate;
    self->_buddyFinishDate = 0LL;

    __int128 v138 = self->_manateeAvailableDate;
    self->_manateeAvailableDate = 0LL;

    *(_WORD *)&self->_hasReportediCloudBuddyTime = 0;
    self->_hasReportedManateeBuddyTime = 0;
  }

  uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    uint64_t v27 = "Finished reporting KT time metrics.";
    goto LABEL_137;
  }

  swift_release(v73);
  uint64_t v98 = swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v99 = (os_log_s *)Logger.logObject.getter(v98);
  uint64_t v100 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v99, v100))
  {
    uint64_t v101 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v102 = swift_slowAlloc(32LL, -1LL);
    v191[0] = v102;
    *(_DWORD *)uint64_t v101 = 136315138;
    swift_bridgeObjectRetain(a3);
    v190 = sub_1003FFBB0(v187, a3, v191);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, v191, v101 + 4, v101 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v99, v100, "%s    ", v101, 0xCu);
    swift_arrayDestroy(v102, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v102, -1LL, -1LL);
    swift_slowDealloc(v101, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  uint64_t v103 = swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v104 = (os_log_s *)Logger.logObject.getter(v103);
  uint64_t v105 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v104, v105))
  {
    uint64_t v106 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v107 = swift_slowAlloc(32LL, -1LL);
    v191[0] = v107;
    *(_DWORD *)uint64_t v106 = 136315138;
    swift_bridgeObjectRetain(a3);
    v190 = sub_1003FFBB0(v187, a3, v191);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, v191, v106 + 4, v106 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v104, v105, "%s    Sent Materials:", v106, 0xCu);
    swift_arrayDestroy(v107, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v107, -1LL, -1LL);
    swift_slowDealloc(v106, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  v176 = OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_currentlySent;
  uint64_t v108 = *(void *)&v173[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_currentlySent];
  uint64_t v109 = *(void *)(v108 + 56);
  v181 = (void *)(v108 + 56);
  uint64_t v110 = 1LL << *(_BYTE *)(v108 + 32);
  uint64_t v111 = -1LL;
  if (v110 < 64) {
    uint64_t v111 = ~(-1LL << v110);
  }
  uint64_t v112 = v111 & v109;
  v186 = (unint64_t)(v110 + 63) >> 6;
  swift_bridgeObjectRetain(v108);
  uint64_t v113 = 0LL;
  v177 = (char *)&type metadata for Any + 8;
  uint64_t v114 = (uint64_t)v185;
  while (2)
  {
    if (v112)
    {
      uint64_t v115 = __clz(__rbit64(v112));
      v112 &= v112 - 1;
      uint64_t v116 = v115 | (v113 << 6);
LABEL_69:
      uint64_t v120 = v180;
      sub_1003F5FC8( *(void *)(v108 + 48) + *(void *)(v188 + 72) * v116,  v180,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
      sub_1003F600C(v120, v83, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
      sub_1003F5FC8(v83, v114, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
      uint64_t v121 = swift_bridgeObjectRetain_n(a3, 2LL);
      uint64_t v122 = (os_log_s *)Logger.logObject.getter(v121);
      uint64_t v123 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v122, v123))
      {
        uint64_t v124 = swift_slowAlloc(22LL, -1LL);
        uint64_t v125 = swift_slowAlloc(64LL, -1LL);
        v191[0] = v125;
        *(_DWORD *)uint64_t v124 = v182.n128_u32[0];
        swift_bridgeObjectRetain(a3);
        *(void *)(v124 + 4) = sub_1003FFBB0(v187, a3, v191);
        swift_bridgeObjectRelease_n(a3, 3LL);
        *(_WORD *)(v124 + 12) = 2080;
        __int128 v126 = sub_10040A2B0( &qword_1009B9880,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer,  (uint64_t)&unk_10071BF54);
        __int128 v127 = dispatch thunk of CustomStringConvertible.description.getter(v183, v126);
        __int128 v129 = v128;
        *(void *)(v124 + 14) = sub_1003FFBB0(v127, v128, v191);
        swift_bridgeObjectRelease(v129);
        sub_1003F6050((uint64_t)v185, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
        _os_log_impl((void *)&_mh_execute_header, v122, v123, "%s        %s", (uint8_t *)v124, 0x16u);
        swift_arrayDestroy(v125, 2LL, v177);
        __int128 v130 = v125;
        uint64_t v83 = (uint64_t)v178;
        swift_slowDealloc(v130, -1LL, -1LL);
        __int128 v131 = v124;
        uint64_t v114 = (uint64_t)v185;
        swift_slowDealloc(v131, -1LL, -1LL);
      }

      else
      {
        swift_bridgeObjectRelease_n(a3, 2LL);
        sub_1003F6050(v114, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
      }

      sub_1003F6050(v83, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
      continue;
    }

    break;
  }

  uint64_t v117 = v113 + 1;
  if (__OFADD__(v113, 1LL)) {
    goto LABEL_102;
  }
  if (v117 >= v186)
  {
LABEL_71:
    swift_release(v108);
    __int128 v132 = swift_bridgeObjectRetain_n(a3, 2LL);
    char v133 = (os_log_s *)Logger.logObject.getter(v132);
    __int128 v134 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v133, v134))
    {
      __int128 v135 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      __int128 v136 = swift_slowAlloc(32LL, -1LL);
      v191[0] = v136;
      *(_DWORD *)__int128 v135 = 136315138;
      swift_bridgeObjectRetain(a3);
      v190 = sub_1003FFBB0(v187, a3, v191);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, v191, v135 + 4, v135 + 12);
      swift_bridgeObjectRelease_n(a3, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v133, v134, "%s    Delta:", v135, 0xCu);
      swift_arrayDestroy(v136, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v136, -1LL, -1LL);
      swift_slowDealloc(v135, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a3, 2LL);
    }

    __int128 v137 = v184;
    __int128 v138 = *(void *)&v173[v171];
    __int128 v139 = *(void *)&v173[v176];
    if (*(void *)(v139 + 16) <= *(void *)(v138 + 16) >> 3)
    {
      v191[0] = *(void *)&v173[v171];
      swift_bridgeObjectRetain(v138);
      swift_bridgeObjectRetain(v139);
      sub_100422F60(v142);
      swift_bridgeObjectRelease(v139);
      __int128 v141 = (void *)v191[0];
    }

    else
    {
      swift_bridgeObjectRetain(*(void *)&v173[v171]);
      swift_bridgeObjectRetain(v139);
      __int128 v141 = sub_1004233A8(v140, v138);
      swift_bridgeObjectRelease(v139);
    }

    v143 = (uint64_t)v172;
    v144 = 0LL;
    v145 = v141[7];
    v185 = v141 + 7;
    __int16 v146 = 1LL << *((_BYTE *)v141 + 32);
    v147 = -1LL;
    if (v146 < 64) {
      v147 = ~(-1LL << v146);
    }
    __int16 v148 = v147 & v145;
    v186 = (unint64_t)(v146 + 63) >> 6;
    v180 = (uint64_t)&type metadata for Any + 8;
    v181 = v141;
    while (1)
    {
      if (v148)
      {
        v149 = __clz(__rbit64(v148));
        v148 &= v148 - 1;
        v150 = v149 | (v144 << 6);
      }

      else
      {
        v151 = v144 + 1;
        if (__OFADD__(v144, 1LL)) {
          goto LABEL_103;
        }
        if (v151 >= v186)
        {
LABEL_100:
          swift_release(v141);
          v167 = *(os_unfair_lock_s **)&v170[v169];
          swift_retain(v167);
          os_unfair_lock_unlock(v167 + 4);
          swift_release(v167);
          return;
        }

        v152 = v185[v151];
        ++v144;
        if (!v152)
        {
          v144 = v151 + 1;
          if (v151 + 1 >= v186) {
            goto LABEL_100;
          }
          v152 = v185[v144];
          if (!v152)
          {
            v144 = v151 + 2;
            if (v151 + 2 >= v186) {
              goto LABEL_100;
            }
            v152 = v185[v144];
            if (!v152)
            {
              v153 = v151 + 3;
              if (v153 >= v186) {
                goto LABEL_100;
              }
              v152 = v185[v153];
              if (!v152)
              {
                while (1)
                {
                  v144 = v153 + 1;
                  if (__OFADD__(v153, 1LL)) {
                    goto LABEL_106;
                  }
                  if (v144 >= v186) {
                    goto LABEL_100;
                  }
                  v152 = v185[v144];
                  ++v153;
                  if (v152) {
                    goto LABEL_97;
                  }
                }
              }

              v144 = v153;
            }
          }
        }

  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
}

                  sub_10041D3BC(a1);
                  return;
                }
              }
            }
          }
        }

    uint64_t v114 = (v124 - 1) & v124;
    uint64_t v121 = __clz(__rbit64(v124)) + (v116 << 6);
LABEL_43:
    __int128 v126 = *(void *)(v110 + 48) + 16 * v121;
    __int128 v127 = *(void **)(v126 + 8);
    __int128 v128 = *(id *)v126;
    __int128 v129 = v127;
    __int128 v130 = v128;
    __int128 v131 = v129;
    __int128 v132 = v130;
    char v133 = v131;
    uint64_t v119 = (os_log_s *)v132;
    uint64_t v118 = (os_log_s *)v133;
    __int128 v134 = (os_log_s *)Logger.logObject.getter(v118);
    __int128 v135 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v134, v135))
    {
      __int128 v136 = swift_slowAlloc(22LL, -1LL);
      __int128 v137 = (os_log_s **)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)__int128 v136 = v149.n128_u32[0];
      *(void *)(v136 + 4) = v119;
      *__int128 v137 = v119;

      *(_WORD *)(v136 + 12) = 2112;
      *(void *)(v136 + 14) = v118;
      v137[1] = v118;

      _os_log_impl( (void *)&_mh_execute_header,  v134,  v135,  "Scheduled item - toURI: %@, fromURI: %@",  (uint8_t *)v136,  0x16u);
      __int128 v138 = sub_1003F5CB4(&qword_1009B92C8);
      swift_arrayDestroy(v137, 2LL, v138);
      swift_slowDealloc(v137, -1LL, -1LL);
      swift_slowDealloc(v136, -1LL, -1LL);
      uint64_t v117 = v134;
    }

    else
    {

      uint64_t v117 = v119;
      uint64_t v118 = v119;
      uint64_t v119 = v134;
    }
  }

  uint64_t v125 = v122 + 3;
  if (v125 >= (uint64_t)v152)
  {
LABEL_45:

    swift_release(v123);
    swift_release(v110);

    return;
  }

  uint64_t v124 = *(void *)&v151[8 * v125];
  if (v124)
  {
    uint64_t v116 = v125;
    goto LABEL_42;
  }

  while (1)
  {
    uint64_t v116 = v125 + 1;
    if (__OFADD__(v125, 1LL)) {
      break;
    }
    uint64_t v124 = *(void *)&v151[8 * v116];
    ++v125;
    if (v124) {
      goto LABEL_42;
    }
  }

                  sub_10041D3BC(a1);
                  return;
                }
              }
            }
          }
        }

      __break(1u);
LABEL_43:
      uint64_t v31 = sub_100494200(0LL, v31[2] + 1LL, 1, v31);
LABEL_36:
      __int16 v54 = v31[2];
      double v53 = v31[3];
      if (v54 >= v53 >> 1) {
        uint64_t v31 = sub_100494200((void *)(v53 > 1), v54 + 1, 1, v31);
      }
      v31[2] = v54 + 1;
      v31[v54 + 4] = v26;
      sub_1003F6050(v1, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      if (!v31[2])
      {
LABEL_39:
        swift_unknownObjectRelease(v55, v44);
        sub_10040A274(v25, &qword_1009B8E08);
        swift_bridgeObjectRelease(v31);
        return;
      }

                  sub_10041D3BC(a1);
                  return;
                }
              }
            }
          }
        }

        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
        unint64_t v68 = (char *)v13;
        sub_1004AE34C(v52, v55, isUniquelyReferenced_nonNull_native);
        uint64_t v13 = v68;

        uint64_t v27 = swift_bridgeObjectRelease(0x8000000000000000LL);
        goto LABEL_43;
      }

  sub_10041D3BC(v30);
  double v62 = swift_bridgeObjectRetain_n(a3, 2LL);
  __int16 v63 = (os_log_s *)Logger.logObject.getter(v62);
  uint64_t v64 = static os_log_type_t.default.getter(v63);
  if (os_log_type_enabled(v63, v64))
  {
    __int16 v65 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v66 = swift_slowAlloc(32LL, -1LL);
    v160 = (void *)v66;
    *(_DWORD *)__int16 v65 = 136315138;
    swift_bridgeObjectRetain(a3);
    v158 = (void *)sub_1003FFBB0(a2, a3, (uint64_t *)&v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v65 + 4, v65 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "%s    ", v65, 0xCu);
    swift_arrayDestroy(v66, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v66, -1LL, -1LL);
    swift_slowDealloc(v65, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  __int16 v67 = swift_bridgeObjectRetain_n(a3, 2LL);
  unint64_t v68 = (os_log_s *)Logger.logObject.getter(v67);
  __int16 v69 = static os_log_type_t.default.getter(v68);
  if (os_log_type_enabled(v68, v69))
  {
    uint64_t v70 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    __int16 v71 = swift_slowAlloc(32LL, -1LL);
    v160 = (void *)v71;
    *(_DWORD *)uint64_t v70 = 136315138;
    swift_bridgeObjectRetain(a3);
    v158 = (void *)sub_1003FFBB0(a2, a3, (uint64_t *)&v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v70 + 4, v70 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v68, v69, "%s    Participants:", v70, 0xCu);
    swift_arrayDestroy(v71, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v71, -1LL, -1LL);
    swift_slowDealloc(v70, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  __int16 v73 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *(void *)v150) + 0x258LL))(v72);
  uint64_t v74 = v73;
  if ((v73 & 0xC000000000000001LL) != 0)
  {
    if (v73 >= 0) {
      v73 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v75 = __CocoaSet.makeIterator()(v73);
    uint64_t v76 = type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
    uint64_t v77 = sub_10040A2B0( (unint64_t *)&unk_1009B97C0,  type metadata accessor for IDSGroupEncryptionControllerParticipant,  (uint64_t)&protocol conformance descriptor for NSObject);
    __int16 v73 = (uint64_t)Set.Iterator.init(_cocoa:)(&v160, v75, v76, v77);
    uint64_t v74 = (uint64_t)v160;
    uint64_t v78 = v161;
    uint64_t v79 = v162;
    uint64_t v80 = v163;
    uint64_t v81 = v164;
  }

  else
  {
    uint64_t v80 = 0LL;
    uint64_t v82 = -1LL << *(_BYTE *)(v73 + 32);
    uint64_t v78 = v73 + 56;
    uint64_t v79 = ~v82;
    uint64_t v83 = -v82;
    if (v83 < 64) {
      uint64_t v84 = ~(-1LL << v83);
    }
    else {
      uint64_t v84 = -1LL;
    }
    uint64_t v81 = v84 & *(void *)(v73 + 56);
  }

  uint64_t v85 = (unint64_t)(v79 + 64) >> 6;
  if (v74 < 0) {
    goto LABEL_59;
  }
LABEL_57:
  if (v81)
  {
    uint64_t v86 = (v81 - 1) & v81;
    uint64_t v87 = __clz(__rbit64(v81)) | (v80 << 6);
    uint64_t v88 = v80;
LABEL_76:
    uint64_t v93 = *(id *)(*(void *)(v74 + 48) + 8 * v87);
    if (!v93) {
      goto LABEL_79;
    }
    while (1)
    {
      v158 = (void *)v155;
      v159 = a3;
      swift_bridgeObjectRetain(a3);
      v98._countAndFlagsBits = 0x2020202020202020LL;
      v98._object = (void *)0xE800000000000000LL;
      String.append(_:)(v98);
      uint64_t v99 = v159;
      (*(void (**)(uint64_t, void *, unint64_t))((swift_isaMask & *v93) + 0x150LL))(v156, v158, v159);

      __int16 v73 = swift_bridgeObjectRelease(v99);
      uint64_t v80 = v88;
      uint64_t v81 = v86;
      if ((v74 & 0x8000000000000000LL) == 0) {
        goto LABEL_57;
      }
LABEL_59:
      uint64_t v89 = __CocoaSet.Iterator.next()(v73);
      if (v89)
      {
        uint64_t v90 = v89;
        v157 = v89;
        uint64_t v91 = type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
        swift_unknownObjectRetain(v90, v92);
        swift_dynamicCast(&v158, &v157, (char *)&type metadata for Swift.AnyObject + 8, v91, 7LL);
        uint64_t v93 = v158;
        swift_unknownObjectRelease(v90, v94);
        uint64_t v88 = v80;
        uint64_t v86 = v81;
        if (v93) {
          continue;
        }
      }

      goto LABEL_79;
    }
  }

  uint64_t v95 = v80 + 1;
  if (__OFADD__(v80, 1LL)) {
    goto LABEL_132;
  }
  if (v95 < v85)
  {
    uint64_t v96 = *(void *)(v78 + 8 * v95);
    uint64_t v88 = v80 + 1;
    if (!v96)
    {
      uint64_t v88 = v80 + 2;
      if (v80 + 2 >= v85) {
        goto LABEL_79;
      }
      uint64_t v96 = *(void *)(v78 + 8 * v88);
      if (!v96)
      {
        uint64_t v88 = v80 + 3;
        if (v80 + 3 >= v85) {
          goto LABEL_79;
        }
        uint64_t v96 = *(void *)(v78 + 8 * v88);
        if (!v96)
        {
          uint64_t v88 = v80 + 4;
          if (v80 + 4 >= v85) {
            goto LABEL_79;
          }
          uint64_t v96 = *(void *)(v78 + 8 * v88);
          if (!v96)
          {
            uint64_t v97 = v80 + 5;
            do
            {
              if (v85 == v97) {
                goto LABEL_79;
              }
              uint64_t v96 = *(void *)(v78 + 8 * v97++);
            }

            while (!v96);
            uint64_t v88 = v97 - 1;
          }
        }
      }
    }

    uint64_t v86 = (v96 - 1) & v96;
    uint64_t v87 = __clz(__rbit64(v96)) + (v88 << 6);
    goto LABEL_76;
  }

        uint64_t v93 = v51 + v47;
        a4 = v92;
        if (v92 < v89)
        {
          a2 = v52;
          if (v52 < a3) {
            continue;
          }
        }

        goto LABEL_74;
      }
    }

    goto LABEL_74;
  }

  __break(1u);
  return result;
}

    sub_100508D50((void **)&v58, (const void **)&v57, &v56);
    return 1LL;
  }

LABEL_71:
    __int16 v49 = v13;
    goto LABEL_72;
  }

  uint32_t v40 = v75;
  __int16 v50 = OSLogHandleForIDSCategory("IDQuery");
  id v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
  if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Selected local account", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled(v52))
  {
    MarcoLogMadridLevel(@"IDSDaemonQueries", 0LL, @"IDQuery", @"Selected local account");
    IMLogString(0LL, @"IDSIDQuery", @"IDS", @"IDQuery", @"Selected local account");
    if ((_IMWillLog(@"IDQuery", v53) & 1) != 0) {
      _IMAlwaysLog(0LL, @"IDQuery", @"Selected local account");
    }
  }

      [WeakRetained endSessionWithReason:v12];

LABEL_85:
      goto LABEL_86;
    }

    __int16 v15 = OSLogHandleForTransportCategory("IDSDSession");
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sharedState]);
      __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v17 uniqueID]);
      *(_DWORD *)buf = 138412290;
      __int128 v139 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Connect to QR server succeeded for %@.",  buf,  0xCu);
    }

    __int128 v20 = os_log_shim_legacy_logging_enabled(v19);
    if ((_DWORD)v20)
    {
      if (_IDSShouldLogTransport(v20))
      {
        id v21 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sharedState]);
        uint64_t v107 = (void *)objc_claimAutoreleasedReturnValue([v21 uniqueID]);
        _IDSLogTransport(@"IDSDSession", @"IDS", @"Connect to QR server succeeded for %@.");

        if (_IDSShouldLog(0LL, @"IDSDSession"))
        {
          id v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "sharedState", v107));
          uint64_t v107 = (void *)objc_claimAutoreleasedReturnValue([v22 uniqueID]);
          _IDSLogV(0LL, @"IDSFoundation", @"IDSDSession", @"Connect to QR server succeeded for %@.");
        }
      }
    }

    if (IMGetDomainBoolForKey(@"com.apple.ids", @"reinitiateAfter15s")
      && !*(_BYTE *)(v133 + 56)
      && !WeakRetained[644])
    {
      __int16 v23 = OSLogHandleForTransportCategory("IDSDSession");
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sharedState]);
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 uniqueID]);
        *(_DWORD *)buf = 138412290;
        __int128 v139 = v26;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Will reinitiate after 15s for %@.",  buf,  0xCu);
      }

      uint64_t v28 = os_log_shim_legacy_logging_enabled(v27);
      if ((_DWORD)v28)
      {
        if (_IDSShouldLogTransport(v28))
        {
          int v29 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sharedState]);
          uint64_t v107 = (void *)objc_claimAutoreleasedReturnValue([v29 uniqueID]);
          _IDSLogTransport(@"IDSDSession", @"IDS", @"Will reinitiate after 15s for %@.");

          if (_IDSShouldLog(0LL, @"IDSDSession"))
          {
            int v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "sharedState", v107));
            uint64_t v107 = (void *)objc_claimAutoreleasedReturnValue([v30 uniqueID]);
            _IDSLogV(0LL, @"IDSFoundation", @"IDSDSession", @"Will reinitiate after 15s for %@.");
          }
        }
      }

      WeakRetained[644] = 1;
      uint64_t v31 = dispatch_time(0LL, 15000000000LL);
      int v33 = im_primary_queue(v31, v32);
      double v34 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v33);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10008CD98;
      block[3] = &unk_1008F8A78;
      objc_copyWeak(&v136, v3);
      dispatch_after(v31, v34, block);

      objc_destroyWeak(&v136);
    }

    if (*(_BYTE *)(v133 + 57))
    {
      uint64_t v114 = objc_alloc(&OBJC_CLASS___IDSGroupSessionParticipantUpdate);
      uint64_t v35 = objc_alloc(&OBJC_CLASS___NSUUID);
      __int128 v130 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v133 + 40) sharedState]);
      __int128 v129 = (void *)objc_claimAutoreleasedReturnValue([v130 groupID]);
      uint64_t v116 = -[NSUUID initWithUUIDString:](v35, "initWithUUIDString:", v129);
      __int128 v128 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(v133 + 40) + 184) isInitiator]);
      uint64_t v113 = [v128 BOOLValue];
      __int128 v127 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(v133 + 40) + 184) participantID]);
      uint64_t v112 = [v127 unsignedLongLongValue];
      uint64_t v125 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v133 + 40) accountController]);
      __int128 v126 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v133 + 40) sharedState]);
      uint64_t v124 = (void *)objc_claimAutoreleasedReturnValue([v126 accountID]);
      uint64_t v123 = (void *)objc_claimAutoreleasedReturnValue([v125 accountWithUniqueID:v124]);
      uint64_t v122 = (void *)objc_claimAutoreleasedReturnValue([v123 primaryRegistration]);
      uint64_t v118 = (void *)objc_claimAutoreleasedReturnValue([v122 pushToken]);
      uint64_t v121 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v133 + 40) sharedState]);
      uint64_t v120 = (void *)objc_claimAutoreleasedReturnValue([v121 fromURI]);
      uint64_t v119 = (void *)objc_claimAutoreleasedReturnValue([v120 prefixedURI]);
      uint64_t v115 = (void *)_IDSCopyIDForTokenWithURI(v118, v119);
      uint64_t v117 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(v133 + 40) + 184) joinType]);
      double v36 = [v117 integerValue] == (id)1;
      int v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date", v107));
      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(v133 + 40) + 184) participantData]);
      id v39 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v133 + 40) sharedState]);
      uint32_t v40 = (void *)objc_claimAutoreleasedReturnValue([v39 destinations]);
      uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v40 allObjects]);
      uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v133 + 32) objectForKeyedSubscript:kIDSQRAllocateKey_URIToParticipantID]);
      uint64_t v43 = objc_alloc(&OBJC_CLASS___NSUUID);
      uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(v133 + 40) + 184) relaySessionID]);
      uint64_t v45 = -[NSUUID initWithUUIDString:](v43, "initWithUUIDString:", v44);
      LOBYTE(v10_Block_object_dispose(va, 8) = 0;
      uint64_t v13 = (__CFDictionary *)[v114 initWithGroupUUID:v116 isInitiator:v113 participantIdentifier:v112 participantDestinationID:v115 participant UpdateType:1 participantUpdateSubtype:v36 fromServer:v108 serverDate:v37 participantData:v38 clientContextD ata:0 members:v41 participantIDs:v42 relaySessionID:v45];

      unsigned int v46 = (void *)objc_claimAutoreleasedReturnValue(-[__CFDictionary participantIDs](v13, "participantIDs"));
      [*(id *)(*(void *)(v133 + 40) + 184) setUrisToParticipantIDs:v46];

      if (*(_DWORD *)(*(void *)(v133 + 40) + 176LL))
      {
        __int16 v47 = OSLogHandleForTransportCategory("IDSDSession");
        unint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v49 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v133 + 40) sharedState]);
          __int16 v50 = (void *)objc_claimAutoreleasedReturnValue([v49 groupID]);
          id v51 = *(_DWORD *)(*(void *)(v133 + 40) + 176LL);
          *(_DWORD *)buf = 138412546;
          __int128 v139 = v50;
          __int128 v140 = 1024;
          *(_DWORD *)__int128 v141 = v51;
          _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "Not in join state, group = %@, state = %d",  buf,  0x12u);
        }

        double v53 = os_log_shim_legacy_logging_enabled(v52);
        if (!(_DWORD)v53) {
          goto LABEL_84;
        }
        __int16 v54 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v133 + 40) sharedState]);
        uint64_t v109 = (void *)objc_claimAutoreleasedReturnValue([v54 groupID]);
        uint64_t v111 = *(unsigned int *)(*(void *)(v133 + 40) + 176LL);
        _IDSLogTransport(@"IDSDSession", @"IDS", @"Not in join state, group = %@, state = %d");

        double v55 = (IMMessageContext *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v133 + 40), "sharedState", v109, v111));
        uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(-[IMMessageContext groupID](v55, "groupID"));
        uint64_t v109 = v56;
        uint64_t v111 = *(unsigned int *)(*(void *)(v133 + 40) + 176LL);
        _IDSLogV(0LL, @"IDSFoundation", @"IDSDSession", @"Not in join state, group = %@, state = %d");
      }

      else
      {
        uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v133 + 40) sharedState]);
        uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue([v87 groupID]);

        if (v88)
        {
          uint64_t v91 = im_primary_queue(v89, v90);
          uint64_t v92 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v91);
          v134[0] = _NSConcreteStackBlock;
          v134[1] = 3221225472LL;
          v134[2] = sub_10008CFC0;
          v134[3] = &unk_1008F6010;
          v134[4] = *(void *)(v133 + 40);
          uint64_t v93 = dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT,  QOS_CLASS_USER_INTERACTIVE,  0,  v134);
          dispatch_async(v92, v93);
        }

        else
        {
          uint64_t v94 = OSLogHandleForTransportCategory("IDSDSession");
          uint64_t v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
          if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_DEFAULT,  "Cannot fan out the join notification to the group, no groupID!",  buf,  2u);
          }

          uint64_t v97 = os_log_shim_legacy_logging_enabled(v96);
          if ((_DWORD)v97)
          {
            if (_IDSShouldLogTransport(v97))
            {
              _IDSLogTransport( @"IDSDSession",  @"IDS",  @"Cannot fan out the join notification to the group, no groupID!");
              if (_IDSShouldLog(0LL, @"IDSDSession")) {
                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Cannot fan out the join notification to the group, no groupID!");
              }
            }
          }
        }

        double v55 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
        -[IMMessageContext setShouldBoost:](v55, "setShouldBoost:", 1LL);
        uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
        uint64_t v99 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v133 + 40) sharedState]);
        uint64_t v100 = (void *)objc_claimAutoreleasedReturnValue([v99 pushTopic]);
        uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue( [v98 broadcasterForTopic:v100 entitlement:kIDSSessionEntitlement command:0 messageContext:v55]);

        uint64_t v101 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v133 + 40) sharedState]);
        uint64_t v102 = (void *)objc_claimAutoreleasedReturnValue([v101 uniqueID]);
        uint64_t v103 = (void *)objc_claimAutoreleasedReturnValue(-[__CFDictionary dictionaryRepresentation](v13, "dictionaryRepresentation"));
        [v56 sessionDidJoinGroup:v102 participantUpdateDictionary:v103 error:0];

        *(_DWORD *)(*(void *)(v133 + 40) + 176LL) = 1;
      }

LABEL_84:
      uint64_t v104 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance",  v109,  v111));
      uint64_t v105 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v133 + 40) sharedState]);
      uint64_t v106 = (void *)objc_claimAutoreleasedReturnValue([v105 groupID]);
      [v104 resetKeyMaterialCacheTimerIfNeeded:v106];

      goto LABEL_85;
    }

    uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sharedState]);
    uint64_t v85 = [v84 isInitiator];

    if ((v85 & 1) == 0)
    {
      uint64_t v13 = (__CFDictionary *)objc_claimAutoreleasedReturnValue([WeakRetained sharedState]);
      uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue(-[__CFDictionary uniqueID](v13, "uniqueID"));
      [WeakRetained openSocketToDevice:v86];

      goto LABEL_85;
    }
  }

        return;
      }
    }
  }

    uint64_t v45 = (os_log_s *)obj;
LABEL_72:

    goto LABEL_73;
  }

  uint64_t v24 = 0LL;
LABEL_73:

  return v24;
}

    if (v160) {
      v160[2](v160, &__NSArray0__struct);
    }
    goto LABEL_133;
  }

  uint64_t v72 = v49;
  if (obj && !a28)
  {
    __int16 v73 = OSLogHandleForIDSCategory("IDSDelivery");
    uint64_t v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEFAULT,  "Incoming urgent message for a topic with coalesce messages in queue",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v75) && _IDSShouldLog(0LL, @"IDSDelivery")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDelivery",  @"Incoming urgent message for a topic with coalesce messages in queue");
    }
    -[IDSCoalesceMessageQueueManager enqueueMessage:forTopic:sendMode:]( self->_coalesceMessageQueueManager,  "enqueueMessage:forTopic:sendMode:",  theDict,  v49,  &off_100947458);
    -[IDSCoalesceMessageQueueManager flushCoalesceQueueForTopic:]( self->_coalesceMessageQueueManager,  "flushCoalesceQueueForTopic:",  v49);
    goto LABEL_71;
  }

  LOBYTE(v13_Block_object_dispose(va, 8) = a28;
  HIDWORD(v13_Block_object_dispose(va, 8) = a22;
  LOBYTE(v136) = a22;
  LOBYTE(v134) = a20;
  BYTE2(v132) = a18;
  LOWORD(v132) = __PAIR16__(a17, a16);
  LOWORD(v130) = __PAIR16__(a13, a12);
  -[IDSDeliveryController _queueMessage:service:dataToEncrypt:withEncryptedAttributes:fromID:fromShortHandle:fromIdentity:toID:toURIs:originallyToURIs:ktURIVerificationMap:canUseLargePayload:sendOnePerToken:registrationProperties:fakeMessage:alwaysSkipSelf:alwaysIncludeSelf:forceQuery:disallowRefresh:prioritizedTokenList:wantsFirewallDonation:destinationObject:willSendBlock:completionBlock:fromCoalesceQueue:]( self,  "_queueMessage:service:dataToEncrypt:withEncryptedAttributes:fromID:fromShortHandle:fromIdentity:toID:toURIs:original lyToURIs:ktURIVerificationMap:canUseLargePayload:sendOnePerToken:registrationProperties:fakeMessage:alwaysSkipSelf:a lwaysIncludeSelf:forceQuery:disallowRefresh:prioritizedTokenList:wantsFirewallDonation:destinationObject:willSendBlo ck:completionBlock:fromCoalesceQueue:",  v157,  v49,  v150,  v149,  v164,  v148,  v147,  v146,  v162,  v162,  v151,  v130,  v145,  v132,  a19,  v134,  v144,  v136,  v142,  v158,  v159,  v138);
  v170 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  v165 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  v209 = 0u;
  v210 = 0u;
  v207 = 0u;
  v208 = 0u;
  obja = v162;
  uint64_t v76 = [obja countByEnumeratingWithState:&v207 objects:v217 count:16];
  if (!v76) {
    goto LABEL_93;
  }
  uint64_t v77 = *(void *)v208;
  do
  {
    for (i = 0LL; i != v76; i = (char *)i + 1)
    {
      if (*(void *)v208 != v77) {
        objc_enumerationMutation(obja);
      }
      uint64_t v79 = *(void **)(*((void *)&v207 + 1) + 8LL * (void)i);
      uint64_t v80 = (void *)objc_claimAutoreleasedReturnValue([v79 pushToken]);
      uint64_t v81 = objc_claimAutoreleasedReturnValue( +[IDSDeliveryController tokenURINegativeCacheItemForTokenURI:service:]( &OBJC_CLASS___IDSDeliveryController,  "tokenURINegativeCacheItemForTokenURI:service:",  v79,  v72));
      uint64_t v82 = (void *)v81;
      if (v80) {
        uint64_t v83 = v81 == 0;
      }
      else {
        uint64_t v83 = 1;
      }
      uint64_t v84 = !v83;
      if (!v83)
      {
        uint64_t v85 = -[IDSRateLimiter underLimitForItem:]( self->_tokenURINegativeCache,  "underLimitForItem:",  v81);
        uint64_t v86 = v165;
        if ((v85 & 1) == 0) {
          goto LABEL_90;
        }
      }

      if (a19 == 1
        || (uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeliveryController peerIDManager](self, "peerIDManager")),
            uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithPrefixedURI:withServiceLoggingHint:]( IDSURI,  "URIWithPrefixedURI:withServiceLoggingHint:",  v164,  v172)),  v89 = [v87 hasPeerTokensForURI:v79 fromURI:v88 service:v172],  v88,  v87,  (v89 & 1) == 0))
      {
        uint64_t v86 = v170;
        if (v84)
        {
          -[IDSRateLimiter noteItem:](self->_tokenURINegativeCache, "noteItem:", v82);
          uint64_t v86 = v170;
        }

  v156 = kIDSQRAllocateKey_ExistingRelayIP;
  v157 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_ExistingRelayIP, v945, v988, v1031));
  v159 = objc_opt_class(&OBJC_CLASS___NSData, v158);
  v160 = objc_opt_isKindOfClass(v157, v159);

  v161 = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v156]);
  v162 = v161;
  if ((v160 & 1) != 0)
  {
    existingRelayIP = self->_existingRelayIP;
    self->_existingRelayIP = v161;
LABEL_73:

    goto LABEL_80;
  }

  if (v162)
  {
    v164 = OSLogHandleForIDSCategory("QRAllocator");
    v165 = (os_log_s *)objc_claimAutoreleasedReturnValue(v164);
    if (os_log_type_enabled(v165, OS_LOG_TYPE_DEBUG))
    {
      v166 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v156]);
      v168 = (id)objc_opt_class(&OBJC_CLASS___NSData, v167);
      v169 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v156]);
      v171 = (id)objc_opt_class(v169, v170);
      *(_DWORD *)buf = 138412802;
      v1070 = v166;
      v1071 = 2112;
      v1072 = v168;
      v1073 = 2112;
      v1074 = v171;
      _os_log_impl( (void *)&_mh_execute_header,  v165,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v172))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        existingRelayIP = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v156]);
        v174 = objc_opt_class(&OBJC_CLASS___NSData, v173);
        v175 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v156]);
        v989 = v174;
        v1032 = objc_opt_class(v175, v176);
        v946 = existingRelayIP;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_73;
      }
    }
  }

    v226 = sub_1003F6050(v164, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
    goto LABEL_50;
  }

  v542 = &_swiftEmptyArrayStorage;
LABEL_85:
  v324 = v520(v226);
  v325 = (*(uint64_t (**)(uint64_t))(*(void *)v324 + 184LL))(v324);
  swift_release(v324);
  v326 = v519;
  sub_100410FD0(v531, v519, &qword_1009B8E08);
  if ((v325 & 1) != 0)
  {
    v327 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v550 + 48))(v326, 1LL, v551);
    v328 = sub_10040A274(v326, &qword_1009B8E08);
    if (v327 != 1)
    {
      v329 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v547) + 0x120LL))(v328);
      if (v329)
      {
        v332 = v329;
        v333 = v330;
        ObjectType = swift_getObjectType(v329);
        v335 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(v333 + 8))(v132[2], ObjectType, v333);
        swift_unknownObjectRelease(v332, v336);
      }

      else
      {
        v335 = &_swiftEmptySetSingleton;
      }

      v337 = (uint64_t)v543;
      v338 = v540;
      v339 = 0LL;
      v340 = v335[7];
      v537 = v335 + 7;
      v341 = 1LL << *((_BYTE *)v335 + 32);
      v342 = -1LL;
      if (v341 < 64) {
        v342 = ~(-1LL << v341);
      }
      v343 = v342 & v340;
      v544 = (char *)v547 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_l;
      v538 = (unint64_t)(v341 + 63) >> 6;
      v344 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent;
      *(void *)&v331 = 136315650LL;
      v535 = v331;
      v525 = (uint64_t)"state(forKind:participant:)";
      v533 = (_BYTE *)0x800000010083F500LL;
      *(void *)&v532 = (char *)&type metadata for Any + 8;
      v545 = v335;
      while (1)
      {
        if (v343)
        {
          v552 = (char *)((v343 - 1) & v343);
          v553 = v339;
          v345 = __clz(__rbit64(v343)) | (v339 << 6);
        }

        else
        {
          v346 = v339 + 1;
          if (__OFADD__(v339, 1LL))
          {
            __break(1u);
            goto LABEL_178;
          }

          if (v346 >= v538) {
            goto LABEL_131;
          }
          v347 = v537[v346];
          v348 = v339 + 1;
          if (!v347)
          {
            v348 = v339 + 2;
            if (v339 + 2 >= v538) {
              goto LABEL_131;
            }
            v347 = v537[v348];
            if (!v347)
            {
              v348 = v339 + 3;
              if (v339 + 3 >= v538) {
                goto LABEL_131;
              }
              v347 = v537[v348];
              if (!v347)
              {
                v349 = v339 + 4;
                if (v339 + 4 >= v538)
                {
LABEL_131:
                  v401 = swift_release(v335);
                  v402 = v520(v401);
                  (*(void (**)(void))(*(void *)v402 + 192LL))(0LL);
                  swift_release(v402);
                  goto LABEL_132;
                }

                v347 = v537[v349];
                if (!v347)
                {
                  while (1)
                  {
                    v348 = v349 + 1;
                    if (__OFADD__(v349, 1LL)) {
                      break;
                    }
                    if (v348 >= v538) {
                      goto LABEL_131;
                    }
                    v347 = v537[v348];
                    ++v349;
                    if (v347) {
                      goto LABEL_111;
                    }
                  }

LABEL_73:
  __int16 v54 = OSLogHandleForIDSCategory("IDQuery");
  double v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
  if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v56 = (__CFString *)objc_claimAutoreleasedReturnValue([v40 smallDescription]);
    *(_DWORD *)buf = 138412290;
    uint64_t v86 = v56;
    _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "Selected account {registeredAccount: %@}",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v57))
  {
    uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([v40 smallDescription]);
    MarcoLogMadridLevel( @"IDSDaemonQueries",  0LL,  @"IDQuery",  @"Selected account {registeredAccount: %@}");

    __int16 v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "smallDescription", v64));
    IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"Selected account {registeredAccount: %@}");

    if ((_IMWillLog(@"IDQuery", v58) & 1) != 0)
    {
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "smallDescription", v65));
      _IMAlwaysLog(0LL, @"IDQuery", @"Selected account {registeredAccount: %@}");
      goto LABEL_78;
    }
  }

  objc_autoreleasePoolPop(context);
  if (v123)
  {
    __int16 v71 = 1;
  }

  else
  {
    uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
    __int16 v71 = [v72 activePairedDeviceHasPairingType:0];
  }

  if ((v130 & 1) == 0)
  {
    __int16 v73 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
    uint64_t v74 = [v73 isPaired] & v71;

    if (v74 == 1)
    {
      uint64_t v75 = objc_alloc(&OBJC_CLASS___NSMutableDictionary);
      uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
      uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue([v76 pairedDevice]);
      uint64_t v78 = -[NSMutableDictionary initWithDictionary:](v75, "initWithDictionary:", v77);

      uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount service](v160, "service"));
      uint64_t v80 = (void *)objc_claimAutoreleasedReturnValue([v79 identifier]);

      if (v80) {
        CFDictionarySetValue(v78, IDSDevicePropertyService, v80);
      }

      if (v78)
      {
        uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
        uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue([v81 pairedDeviceUniqueID]);

        -[NSMutableArray addObject:](v158, "addObject:", v78);
        -[NSMutableSet removeObject:](v143, "removeObject:", v82);
      }
    }
  }

  if (!v141)
  {
    v168 = 0u;
    v169 = 0u;
    v166 = 0u;
    v167 = 0u;
    uint64_t v83 = v143;
    uint64_t v84 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v83,  "countByEnumeratingWithState:objects:count:",  &v166,  v179,  16LL);
    if (v84)
    {
      uint64_t v85 = v84;
      uint64_t v86 = *(void *)v167;
      uint64_t v87 = (const void *)IDSDevicePropertyService;
      do
      {
        for (i = 0LL; i != v85; i = (char *)i + 1)
        {
          if (*(void *)v167 != v86) {
            objc_enumerationMutation(v83);
          }
          uint64_t v89 = *(void *)(*((void *)&v166 + 1) + 8LL * (void)i);
          uint64_t v90 = objc_alloc(&OBJC_CLASS___NSMutableDictionary);
          uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
          uint64_t v92 = (void *)objc_claimAutoreleasedReturnValue([v91 pairedDeviceForUniqueID:v89]);
          uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue([v92 dictionaryRepresentation]);
          uint64_t v94 = -[NSMutableDictionary initWithDictionary:](v90, "initWithDictionary:", v93);

          uint64_t v95 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount service](v160, "service"));
          uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue([v95 identifier]);

          if (v96) {
            CFDictionarySetValue(v94, v87, v96);
          }

          if (v94) {
            -[NSMutableArray addObject:](v158, "addObject:", v94);
          }
        }

        uint64_t v85 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v83,  "countByEnumeratingWithState:objects:count:",  &v166,  v179,  16LL);
      }

      while (v85);
    }
  }

  uint64_t v97 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  v154 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  v162 = 0u;
  v163 = 0u;
  v164 = 0u;
  v165 = 0u;
  v157 = v158;
  uint64_t v98 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v157,  "countByEnumeratingWithState:objects:count:",  &v162,  v178,  16LL);
  if (v98)
  {
    uint64_t v99 = v98;
    uint64_t v100 = 0LL;
    uint64_t v101 = 0LL;
    v161 = *(void *)v163;
    uint64_t v102 = IDSDevicePropertyIdentifierOverride;
    uint64_t v103 = IDSDevicePropertyPrivateDeviceData;
    obja = (id)IDSPrivateDeviceDataUniqueID;
    v159 = v97;
    uint64_t v104 = IDSPrivateDeviceDataRegistrationDate;
    do
    {
      for (j = 0LL; j != v99; j = (char *)j + 1)
      {
        if (*(void *)v163 != v161) {
          objc_enumerationMutation(v157);
        }
        uint64_t v106 = *(void **)(*((void *)&v162 + 1) + 8LL * (void)j);
        uint64_t v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "objectForKey:", v102, context));

        if ([v107 length])
        {
          uint64_t v100 = v107;
        }

        else
        {
          uint64_t v108 = (void *)objc_claimAutoreleasedReturnValue([v106 objectForKey:v103]);
          uint64_t v100 = (void *)objc_claimAutoreleasedReturnValue([v108 _stringForKey:obja]);

          uint64_t v97 = v159;
        }

        if ([v100 length])
        {
          uint64_t v109 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v97, "objectForKey:", v100));

          if (v109)
          {
            uint64_t v110 = (void *)objc_claimAutoreleasedReturnValue([v109 objectForKey:v103]);
            uint64_t v111 = (void *)objc_claimAutoreleasedReturnValue([v110 objectForKey:v104]);
            [v111 doubleValue];
            uint64_t v113 = v112;

            uint64_t v114 = (void *)objc_claimAutoreleasedReturnValue([v106 objectForKey:v103]);
            uint64_t v115 = (void *)objc_claimAutoreleasedReturnValue([v114 objectForKey:v104]);
            [v115 doubleValue];
            uint64_t v117 = v116;

            if (v113 >= v117)
            {
              uint64_t v118 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                v175 = v106;
                _os_log_impl( (void *)&_mh_execute_header,  v118,  OS_LOG_TYPE_DEFAULT,  "Duplicated device %@, ignoring...",  buf,  0xCu);
              }
            }

            else
            {
              -[NSMutableDictionary setObject:forKey:](v159, "setObject:forKey:", v106, v100);
              uint64_t v118 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (os_log_type_enabled(v118, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138412546;
                v175 = v109;
                v176 = 2112;
                v177 = v106;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v118,  OS_LOG_TYPE_DEBUG,  "Found duplicate device %@, replaced with newer device %@",  buf,  0x16u);
              }
            }

            uint64_t v101 = v109;
            uint64_t v97 = v159;
          }

          else
          {
            -[NSMutableDictionary setObject:forKey:](v97, "setObject:forKey:", v106, v100);
            uint64_t v101 = 0LL;
          }
        }

        else
        {
          -[NSMutableArray addObject:](v154, "addObject:", v106);
        }
      }

      uint64_t v99 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v157,  "countByEnumeratingWithState:objects:count:",  &v162,  v178,  16LL);
    }

    while (v99);
  }

  else
  {
    uint64_t v100 = 0LL;
    uint64_t v101 = 0LL;
  }

  uint64_t v119 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allValues](v97, "allValues"));
  -[NSMutableArray addObjectsFromArray:](v154, "addObjectsFromArray:", v119);

  uint64_t v120 = v154;
  objc_autoreleasePoolPop(v124);
  return v120;
}

          __int16 v67 = [v183 isEqualToString:@"com.apple.private.alloy.facetime.multi"];
          if (v37) {
            unint64_t v68 = 1;
          }
          else {
            unint64_t v68 = v67;
          }
          if ((v68 & 1) != 0
            || (__int16 v69 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCTAdapter sharedInstance](&OBJC_CLASS___IDSCTAdapter, "sharedInstance")),
                uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString unprefixedURI](v31, "unprefixedURI")),
                __int16 v71 = [v69 isPhoneNumberEmergencyNumber:v70],
                v70,
                v69,
                !v71))
          {
            uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue(+[IDSTrafficMonitor sharedInstance](&OBJC_CLASS___IDSTrafficMonitor, "sharedInstance"));
            uint64_t v77 = [v76 noteQueryForService:v183 requestor:@"unknown"];

            if ((v77 & 1) != 0)
            {
              -[NSMutableArray addObject:](v177, "addObject:", v31);
              if ((v172 & HIDWORD(v171) & 1) != 0)
              {
                HIDWORD(v171) = 1;
                v172 = 1;
              }

              else
              {
                uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString unprefixedURI](v31, "unprefixedURI"));
                IsEmail = IMStringIsEmail(v81);

                uint64_t v83 = BYTE4(v171) | IsEmail ^ 1;
                uint64_t v84 = v171 | 2;
                HIDWORD(v171) |= IsEmail ^ 1;
                v172 |= IsEmail;
                if ((v172 & 1) == 0) {
                  uint64_t v84 = v171;
                }
                LODWORD(v171) = v84 | v83 & 1;
              }
            }

            else
            {
              uint64_t v78 = OSLogHandleForIDSCategory("Warning");
              uint64_t v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
              if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v240 = 138412290;
                *(void *)&v240[4] = v31;
                _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_ERROR,  "******** Not querying URI %@ service is over budget, not performing query ********",  v240,  0xCu);
              }

              if (os_log_shim_legacy_logging_enabled(v80))
              {
                _IDSWarnV( @"IDSFoundation",  @"******** Not querying URI %@ service is over budget, not performing query ********");
                _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"******** Not querying URI %@ service is over budget, not performing query ********");
                v150 = v31;
                _IDSLogTransport( @"Warning",  @"IDS",  @"******** Not querying URI %@ service is over budget, not performing query ********");
              }
            }
          }

          else
          {
            uint64_t v72 = OSLogHandleForIDSCategory("PeerLookup");
            __int16 v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(v72);
            if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v240 = 138412290;
              *(void *)&v240[4] = v31;
              _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEFAULT,  "******** URI %@ is an emergency number, not performing query ********",  v240,  0xCu);
            }

            if (os_log_shim_legacy_logging_enabled(v74))
            {
              uint64_t v75 = _IDSShouldLog(0LL, @"PeerLookup");
              __int16 v52 = @"******** URI %@ is an emergency number, not performing query ********";
              double v60 = v31;
              if (v75) {
                goto LABEL_64;
              }
            }
          }

          goto LABEL_65;
        }

        unsigned int v46 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString prefixedURI](v31, "prefixedURI"));
        __int16 v47 = [v46 rangeOfString:@"@"] == (id)0x7FFFFFFFFFFFFFFFLL;

        if (!v47) {
          goto LABEL_73;
        }
        unint64_t v48 = OSLogHandleForIDSCategory("PeerLookup");
        __int16 v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v240 = 138412290;
          *(void *)&v240[4] = v31;
          _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "******** Found malformed email in query set: %@, failing *********",  v240,  0xCu);
        }

        if (os_log_shim_legacy_logging_enabled(v50))
        {
          id v51 = _IDSShouldLog(0LL, @"PeerLookup");
          __int16 v52 = @"******** Found malformed email in query set: %@, failing *********";
          goto LABEL_63;
        }
      }

      else
      {
        __int16 v61 = OSLogHandleForIDSCategory("PeerLookup");
        double v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
        if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v240 = 138412290;
          *(void *)&v240[4] = v31;
          _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEFAULT,  "******** Found sentinel alias in query set: %@, failing *********",  v240,  0xCu);
        }

        if (os_log_shim_legacy_logging_enabled(v63))
        {
          id v51 = _IDSShouldLog(0LL, @"PeerLookup");
          __int16 v52 = @"******** Found sentinel alias in query set: %@, failing *********";
LABEL_63:
          double v60 = v31;
          if ((v51 & 1) == 0) {
            goto LABEL_65;
          }
LABEL_64:
          v150 = v60;
          _IDSLogV(0LL, @"IDSFoundation", @"PeerLookup", v52);
        }
      }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

LABEL_79:
  return v40;
}

              goto LABEL_80;
            }

            uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v5 authenticationCert]);
            unsigned int v46 = v45 == 0LL;

            if (!v46) {
              goto LABEL_64;
            }
          }

          else
          {
          }

          uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            uint64_t v92 = (unint64_t)v5;
            _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "Sending authentication for registration for new auth token and auth cert: %@",  buf,  0xCu);
          }

          uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue( +[IDSAppleIDRegistrationCenter sharedInstance]( &OBJC_CLASS___IDSAppleIDRegistrationCenter,  "sharedInstance"));
          [v43 authenticateRegistration:v5 requireSilentAuth:v4];

          HIBYTE(v87) = 1;
          goto LABEL_79;
        case 2u:
          int v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            uint64_t v92 = (unint64_t)v5;
            _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Request to register Home Number for info: %@",  buf,  0xCu);
          }

          if (-[IDSRegistrationController _performCorrectServerRequestForTemporaryPhoneRegistration:sentAuthentication:sentIDSAction:]( self,  "_performCorrectServerRequestForTemporaryPhoneRegistration:sentAuthentication:sentIDSAction:",  v5,  (char *)&v87 + 1,  &v87))
          {
            goto LABEL_80;
          }

          uint64_t v31 = 11LL;
LABEL_43:
          -[IDSRegistrationController _notifyRegistrationFailure:error:info:]( self,  "_notifyRegistrationFailure:error:info:",  v5,  v31,  0LL);
          goto LABEL_22;
        case 3u:
          uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            uint64_t v92 = (unint64_t)v5;
            _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "Request to register Device ID for info: %@",  buf,  0xCu);
          }

          LOBYTE(v87) = -[IDSRegistrationController _performCorrectServerRequestForDeviceIDRegistration:]( self,  "_performCorrectServerRequestForDeviceIDRegistration:",  v5);
          goto LABEL_80;
        default:
          int v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
          if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT)) {
            sub_1006969C4((uint64_t)v5, buf, (int)[v5 registrationType], v32);
          }

          uint64_t v31 = 1LL;
          goto LABEL_43;
      }
    }

    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v92 = (unint64_t)v5;
      __int16 v15 = "Unsupported registration on this system: %@";
      id v16 = v14;
      __int16 v17 = 12;
      goto LABEL_19;
    }
  }

  else
  {
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      __int16 v15 = "Cannot register, unsupported";
      id v16 = v14;
      __int16 v17 = 2;
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, buf, v17);
    }
  }

  __int128 v18 = 1LL;
LABEL_21:

  -[IDSRegistrationController _notifyRegistrationFailure:error:info:]( self,  "_notifyRegistrationFailure:error:info:",  v5,  v18,  0LL);
LABEL_22:
  __int128 v19 = 0;
LABEL_23:
  os_activity_scope_leave(&state);
  cut_arc_os_release(&v89);

  return v19;
}

  sub_10041D3BC(v74);
  uint64_t v100 = swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v101 = (os_log_s *)Logger.logObject.getter(v100);
  uint64_t v102 = static os_log_type_t.default.getter(v101);
  if (os_log_type_enabled(v101, v102))
  {
    uint64_t v103 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v104 = swift_slowAlloc(32LL, -1LL);
    v158 = (void *)v104;
    *(_DWORD *)uint64_t v103 = 136315138;
    swift_bridgeObjectRetain(a3);
    uint64_t v105 = v155;
    v157 = sub_1003FFBB0(v155, a3, (uint64_t *)&v158);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, &v158, v103 + 4, v103 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v101, v102, "%s    ", v103, 0xCu);
    swift_arrayDestroy(v104, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v104, -1LL, -1LL);
    swift_slowDealloc(v103, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);

    uint64_t v105 = v155;
  }

  uint64_t v107 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *(void *)v150) + 0x158LL))(v106);
  uint64_t v110 = (os_unfair_lock_s *)(__chkstk_darwin(v108, v109) + 16);
  os_unfair_lock_lock(v110);
  sub_1004B23EC( &OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_formerlyActiveParticipantsByID,  (uint64_t *)&v158);
  uint64_t v111 = (uint64_t)v158;
  os_unfair_lock_unlock(v110);
  swift_release(v107);
  uint64_t v112 = swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v113 = (os_log_s *)Logger.logObject.getter(v112);
  uint64_t v114 = static os_log_type_t.default.getter(v113);
  if (os_log_type_enabled(v113, v114))
  {
    uint64_t v115 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v116 = swift_slowAlloc(32LL, -1LL);
    v158 = (void *)v116;
    *(_DWORD *)uint64_t v115 = 136315138;
    swift_bridgeObjectRetain(a3);
    v157 = sub_1003FFBB0(v105, a3, (uint64_t *)&v158);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, &v158, v115 + 4, v115 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v113, v114, "%s    Formerly Active Participants:", v115, 0xCu);
    swift_arrayDestroy(v116, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v116, -1LL, -1LL);
    swift_slowDealloc(v115, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  uint64_t v117 = v111 + 64;
  uint64_t v118 = 1LL << *(_BYTE *)(v111 + 32);
  uint64_t v119 = -1LL;
  if (v118 < 64) {
    uint64_t v119 = ~(-1LL << v118);
  }
  uint64_t v120 = v119 & *(void *)(v111 + 64);
  uint64_t v121 = (unint64_t)(v118 + 63) >> 6;
  swift_bridgeObjectRetain(v111);
  uint64_t v122 = 0LL;
  while (2)
  {
    if (v120)
    {
      uint64_t v123 = __clz(__rbit64(v120));
      v120 &= v120 - 1;
      uint64_t v124 = v123 | (v122 << 6);
LABEL_89:
      uint64_t v125 = *(void **)(*(void *)(v111 + 56) + 8 * v124);
      v158 = (void *)v105;
      v159 = a3;
      swift_bridgeObjectRetain(a3);
      __int128 v126 = v125;
      v127._countAndFlagsBits = 0x2020202020202020LL;
      v127._object = (void *)0xE800000000000000LL;
      String.append(_:)(v127);
      __int128 v128 = v159;
      (*(void (**)(uint64_t, void *, unint64_t))((swift_isaMask & *v126) + 0x150LL))( v156,  v158,  v159);

      swift_bridgeObjectRelease(v128);
      continue;
    }

    break;
  }

  __int128 v129 = v122 + 1;
  if (__OFADD__(v122, 1LL))
  {
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
    goto LABEL_131;
  }

  if (v129 >= v121) {
    goto LABEL_107;
  }
  __int128 v130 = *(void *)(v117 + 8 * v129);
  ++v122;
  if (v130) {
    goto LABEL_106;
  }
  uint64_t v122 = v129 + 1;
  if (v129 + 1 >= v121) {
    goto LABEL_107;
  }
  __int128 v130 = *(void *)(v117 + 8 * v122);
  if (v130) {
    goto LABEL_106;
  }
  uint64_t v122 = v129 + 2;
  if (v129 + 2 >= v121) {
    goto LABEL_107;
  }
  __int128 v130 = *(void *)(v117 + 8 * v122);
  if (v130) {
    goto LABEL_106;
  }
  uint64_t v122 = v129 + 3;
  if (v129 + 3 >= v121) {
    goto LABEL_107;
  }
  __int128 v130 = *(void *)(v117 + 8 * v122);
  if (v130)
  {
LABEL_106:
    uint64_t v120 = (v130 - 1) & v130;
    uint64_t v124 = __clz(__rbit64(v130)) + (v122 << 6);
    goto LABEL_89;
  }

  __int128 v131 = v129 + 4;
  if (v131 >= v121)
  {
LABEL_107:
    __int128 v132 = swift_release(v111);
    char v133 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *(void *)v150) + 0x140LL))(v132);
    __int128 v134 = v133;
    __int128 v135 = 0LL;
    __int128 v136 = v133 + 64;
    __int128 v137 = 1LL << *(_BYTE *)(v133 + 32);
    __int128 v138 = -1LL;
    if (v137 < 64) {
      __int128 v138 = ~(-1LL << v137);
    }
    __int128 v139 = v138 & *(void *)(v133 + 64);
    __int128 v140 = (unint64_t)(v137 + 63) >> 6;
    while (1)
    {
      if (v139)
      {
        __int128 v141 = __clz(__rbit64(v139));
        v139 &= v139 - 1;
        v142 = v141 | (v135 << 6);
      }

      else
      {
        v147 = v135 + 1;
        if (__OFADD__(v135, 1LL)) {
          goto LABEL_129;
        }
        if (v147 >= v140)
        {
LABEL_127:
          swift_bridgeObjectRelease(v111);
          swift_release(v134);
          return;
        }

        __int16 v148 = *(void *)(v136 + 8 * v147);
        ++v135;
        if (!v148)
        {
          __int128 v135 = v147 + 1;
          if (v147 + 1 >= v140) {
            goto LABEL_127;
          }
          __int16 v148 = *(void *)(v136 + 8 * v135);
          if (!v148)
          {
            __int128 v135 = v147 + 2;
            if (v147 + 2 >= v140) {
              goto LABEL_127;
            }
            __int16 v148 = *(void *)(v136 + 8 * v135);
            if (!v148)
            {
              v149 = v147 + 3;
              if (v149 >= v140) {
                goto LABEL_127;
              }
              __int16 v148 = *(void *)(v136 + 8 * v149);
              if (!v148)
              {
                while (1)
                {
                  __int128 v135 = v149 + 1;
                  if (__OFADD__(v149, 1LL)) {
                    goto LABEL_130;
                  }
                  if (v135 >= v140) {
                    goto LABEL_127;
                  }
                  __int16 v148 = *(void *)(v136 + 8 * v135);
                  ++v149;
                  if (v148) {
                    goto LABEL_126;
                  }
                }
              }

              __int128 v135 = v149;
            }
          }
        }

id sub_10005F28C(id a1, id a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a2 _stripPotentialTokenURIWithToken:0]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _stripFZIDPrefix]);

  return v3;
}

uint64_t sub_10005F2CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) invisibleAliases]);
  else {
    uint64_t v5 = [v3 hasSuffix:@"inbox.appleid.apple.com"] ^ 1;
  }

  return v5;
}

int64_t sub_10005F33C(id a1, IDSDAccount *a2, IDSDAccount *a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount loginID](a2, "loginID"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount loginID](v4, "loginID"));

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

void sub_10005F844(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog opportunistic](&OBJC_CLASS___IDSFoundationLog, "opportunistic"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
    int v6 = 138412546;
    id v7 = v3;
    __int16 v8 = 2112;
    BOOL v9 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Retrieved opportunistic cache {cache: %@, connection: %@}",  (uint8_t *)&v6,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10005FF44(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    sub_100696870((uint64_t)v3, v4);
  }

  if (![v3 registrationType] || objc_msgSend(v3, "registrationType") == 2)
  {
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      sub_100696830(v5);
    }

    int v6 = (void *)objc_claimAutoreleasedReturnValue([v3 phoneNumber]);
    if (v6) {
      [*(id *)(a1 + 32) addObject:v6];
    }
  }
}

void sub_10006005C(id a1)
{
  BOOL v1 = objc_alloc_init(&OBJC_CLASS___IDSRegistrationController);
  uint64_t v2 = (void *)qword_1009BE910;
  qword_1009BE910 = (uint64_t)v1;
}

void sub_1000603F4()
{
  uint64_t v0 = objc_autoreleasePoolPush();
  BOOL v1 = (void *)objc_claimAutoreleasedReturnValue(+[IDSRegistrationController sharedInstance](&OBJC_CLASS___IDSRegistrationController, "sharedInstance"));
  [v1 _systemConfigurationPrefsChanged];

  objc_autoreleasePoolPop(v0);
}

LABEL_103:
              uint64_t v75 = v81
                 || (__int16 v73 = (void *)objc_claimAutoreleasedReturnValue([v5 authenticationCert]),
                     uint64_t v74 = v73 == 0LL,
                     v73,
                     !v74)
                 || [v5 registrationType] == 3;
              if (v87 || !v75)
              {
                if (HIBYTE(v87)) {
                  LOBYTE(v75) = 1;
                }
                if (!v75)
                {
                  uint64_t v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                  if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEFAULT,  "...we didn't authenticate, and we can't ids authentcate or register. not good!",  buf,  2u);
                  }
                }
              }

              else
              {
                if (!v81)
                {
                  uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue([v5 authenticationCert]);
                  uint64_t v77 = v76 == 0LL;

                  if (v77)
                  {
                    uint64_t v80 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                    if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_DEFAULT,  "We were told that we're done authentication here, but we have no token... bailing register",  buf,  2u);
                    }

                    -[IDSRegistrationController _notifyRegistrationFailure:error:info:]( self,  "_notifyRegistrationFailure:error:info:",  v5,  11LL,  0LL);
                    goto LABEL_125;
                  }
                }

                uint64_t v78 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412290;
                  uint64_t v92 = (unint64_t)v5;
                  _os_log_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_DEFAULT,  "...trying to IDS Auth or Register: %@",  buf,  0xCu);
                }

                if (!sub_100061C40(v5))
                {
LABEL_125:
                  __int128 v19 = 0;
                  goto LABEL_126;
                }
              }

              -[IDSRegistrationController _notifyRegistrationStarting:](self, "_notifyRegistrationStarting:", v5);
              -[IDSRegistrationController startTrackingActiveRegistration:]( self,  "startTrackingActiveRegistration:",  v5);
              __int128 v19 = 1;
LABEL_126:

              goto LABEL_23;
            }

            __int16 v52 = (void *)objc_claimAutoreleasedReturnValue([v5 authenticationCert]);
            double v53 = v52 == 0LL;

            if (!v53) {
              goto LABEL_69;
            }
          }

          else
          {
          }

          [v5 setRegistrationStatus:4];
          uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue( +[IDSSMSRegistrationCenter sharedInstance]( &OBJC_CLASS___IDSSMSRegistrationCenter,  "sharedInstance"));
          [v44 sendRegistration:v5];

          HIBYTE(v87) = 1;
          goto LABEL_80;
        case 1u:
          int v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            uint64_t v92 = (unint64_t)v5;
            _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "Request to register apple ID based info: %@",  buf,  0xCu);
          }

          double v34 = (void *)objc_claimAutoreleasedReturnValue([v5 authenticationToken]);
          uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v5 profileID]);
          if ([v35 length])
          {
            if (v34)
            {

              double v36 = (void *)objc_claimAutoreleasedReturnValue([v5 authenticationCert]);
              int v37 = v36 == 0LL;

              if (v37)
              {
                uint64_t v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412290;
                  uint64_t v92 = (unint64_t)v5;
                  _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEFAULT,  "Sending IDS authentication for registration with existing auth token: %@",  buf,  0xCu);
                }

                LOBYTE(v87) = -[IDSRegistrationController _sendIDSAuthenticationForRegistration:]( self,  "_sendIDSAuthenticationForRegistration:",  v5);
                goto LABEL_79;
              }

              uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v5 authenticationCert]);
              id v39 = v38 == 0LL;

              if (!v39)
              {
                uint32_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412290;
                  uint64_t v92 = (unint64_t)v5;
                  _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "Sending IDS authentication for registration with existing auth token/cert: %@",  buf,  0xCu);
                }

                if (-[IDSRegistrationController _sendIDSAuthenticationOrRegistrationIfNeeded:]( self,  "_sendIDSAuthenticationOrRegistrationIfNeeded:",  v5))
                {
                  LOBYTE(v87) = 1;
                  goto LABEL_79;
                }

                __int16 v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_78;
                }
                *(_DWORD *)buf = 138412290;
                uint64_t v92 = (unint64_t)v5;
                id v51 = "Ensuring validation checks for: %@";
                goto LABEL_77;
              }

        __int16 v49 = 1;
        goto LABEL_124;
      }

      if ((_DWORD)v7 == -1)
      {
        uint64_t v81 = OSLogHandleForIDSCategory("Traffic");
        uint64_t v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(v81);
        if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "     No budget specified", buf, 2u);
        }

        goto LABEL_103;
      }

      uint64_t v117 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"peer%@-message-budget-default-daily-%u",  v25,  v7));
      double v62 = (void *)objc_claimAutoreleasedReturnValue( +[IDSServerBag sharedInstanceForBagType:]( &OBJC_CLASS___IDSServerBag,  "sharedInstanceForBagType:",  1LL));
      __int16 v63 = (__CFString *)objc_claimAutoreleasedReturnValue([v62 objectForKey:v117]);

      if ((int)-[__CFString intValue](v63, "intValue") < 1)
      {
        uint64_t v93 = OSLogHandleForIDSCategory("Traffic");
        uint64_t v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);
        if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "     No budget specified", buf, 2u);
        }
      }

      else
      {
        uint64_t v64 = OSLogHandleForIDSCategory("Traffic");
        __int16 v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
        if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412802;
          uint64_t v123 = v25;
          uint64_t v124 = 2112;
          uint64_t v125 = v63;
          __int128 v126 = 2112;
          __int128 v127 = v121;
          _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEFAULT,  "     Server daily%@ default budget is: %@   Current count is: %@",  buf,  0x20u);
        }

        if (os_log_shim_legacy_logging_enabled(v66) && _IDSShouldLog(0LL, @"Traffic"))
        {
          uint64_t v110 = v63;
          uint64_t v113 = v121;
          uint64_t v107 = v25;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"Traffic",  @"     Server daily%@ default budget is: %@   Current count is: %@");
        }

        __int16 v67 = -[__CFString unsignedLongLongValue](v121, "unsignedLongLongValue", v107, v110, v113);
        if (v67 > -[__CFString unsignedLongLongValue](v63, "unsignedLongLongValue"))
        {
          unint64_t v68 = OSLogHandleForTransportCategory("Traffic");
          __int16 v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(v68);
          if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412802;
            uint64_t v123 = v25;
            uint64_t v124 = 2112;
            uint64_t v125 = v63;
            __int128 v126 = 2112;
            __int128 v127 = v121;
            _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_DEFAULT,  "     **** We are over budget - Server daily%@ default budget is: %@   Current count is: %@",  buf,  0x20u);
          }

          __int16 v71 = os_log_shim_legacy_logging_enabled(v70);
          if ((_DWORD)v71)
          {
            if (_IDSShouldLogTransport(v71))
            {
              uint64_t v110 = v63;
              uint64_t v113 = v121;
              uint64_t v107 = v25;
              _IDSLogTransport( @"Traffic",  @"IDS",  @"     **** We are over budget - Server daily%@ default budget is: %@   Current count is: %@");
              if (_IDSShouldLog(0LL, @"Traffic"))
              {
                uint64_t v110 = v63;
                uint64_t v113 = v121;
                uint64_t v107 = v25;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"Traffic",  @"     **** We are over budget - Server daily%@ default budget is: %@   Current count is: %@");
              }
            }
          }

          __int16 v49 = 0;
          goto LABEL_123;
        }
      }

      __int16 v49 = 1;
LABEL_123:

      goto LABEL_124;
    }

    if (!-[__CFString isEqualToIgnoringCase:]( v10,  "isEqualToIgnoringCase:",  @"outgoing-server-messages"))
    {
      if (!-[__CFString isEqualToIgnoringCase:](v10, "isEqualToIgnoringCase:", @"query-requests"))
      {
        if (!-[__CFString isEqualToIgnoringCase:](v10, "isEqualToIgnoringCase:", @"queries"))
        {
          id v21 = 1;
          goto LABEL_125;
        }

        __int16 v50 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"query-budget-daily-%@",  v11));
        uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue( +[IDSServerBag sharedInstanceForBagType:]( &OBJC_CLASS___IDSServerBag,  "sharedInstanceForBagType:",  1LL));
        __int16 v52 = (__CFString *)objc_claimAutoreleasedReturnValue([v84 objectForKey:v50]);

        uint64_t v85 = -[__CFString intValue](v52, "intValue");
        id v21 = v85 < 1;
        if (v85 < 1)
        {
          uint64_t v103 = OSLogHandleForIDSCategory("Traffic");
          uint64_t v104 = (os_log_s *)objc_claimAutoreleasedReturnValue(v103);
          if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEFAULT, "     No budget specified", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled(v105) && (_IDSShouldLog(0LL, @"Traffic") & 1) != 0)
          {
            __int16 v61 = @"     No budget specified";
            goto LABEL_140;
          }
        }

        else
        {
          uint64_t v86 = OSLogHandleForIDSCategory("Traffic");
          uint64_t v87 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
          if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412546;
            uint64_t v123 = v52;
            uint64_t v124 = 2112;
            uint64_t v125 = v121;
            _os_log_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_DEFAULT,  "     Server daily budget is: %@   Current count is: %@",  buf,  0x16u);
          }

          if (os_log_shim_legacy_logging_enabled(v88)
            && _IDSShouldLog(0LL, @"Traffic"))
          {
            uint64_t v107 = v52;
            uint64_t v110 = v121;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"Traffic",  @"     Server daily budget is: %@   Current count is: %@");
          }

          uint64_t v89 = -[__CFString unsignedLongLongValue](v121, "unsignedLongLongValue", v107, v110);
          if (v89 > -[__CFString unsignedLongLongValue](v52, "unsignedLongLongValue"))
          {
            uint64_t v90 = OSLogHandleForIDSCategory("Traffic");
            uint64_t v91 = (os_log_s *)objc_claimAutoreleasedReturnValue(v90);
            if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v91,  OS_LOG_TYPE_DEFAULT,  "     **** we are over budget",  buf,  2u);
            }

            if (!os_log_shim_legacy_logging_enabled(v92)
              || (_IDSShouldLog(0LL, @"Traffic") & 1) == 0)
            {
              id v21 = 0;
              goto LABEL_150;
            }

            __int16 v61 = @"     **** we are over budget";
            goto LABEL_140;
          }
        }

        id v21 = 1;
        goto LABEL_150;
      }

      __int16 v50 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"query-ui-budget-daily-%@",  v11));
      uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue( +[IDSServerBag sharedInstanceForBagType:]( &OBJC_CLASS___IDSServerBag,  "sharedInstanceForBagType:",  1LL));
      __int16 v52 = (__CFString *)objc_claimAutoreleasedReturnValue([v72 objectForKey:v50]);

      __int16 v73 = -[__CFString intValue](v52, "intValue");
      id v21 = v73 < 1;
      if (v73 < 1)
      {
        uint64_t v100 = OSLogHandleForIDSCategory("Traffic");
        uint64_t v101 = (os_log_s *)objc_claimAutoreleasedReturnValue(v100);
        if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "     No budget specified", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled(v102) && (_IDSShouldLog(0LL, @"Traffic") & 1) != 0)
        {
          __int16 v61 = @"     No budget specified";
          goto LABEL_140;
        }
      }

      else
      {
        uint64_t v74 = OSLogHandleForIDSCategory("Traffic");
        uint64_t v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);
        if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          uint64_t v123 = v52;
          uint64_t v124 = 2112;
          uint64_t v125 = v121;
          _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEFAULT,  "     Server daily budget is: %@   Current count is: %@",  buf,  0x16u);
        }

        if (os_log_shim_legacy_logging_enabled(v76) && _IDSShouldLog(0LL, @"Traffic"))
        {
          uint64_t v107 = v52;
          uint64_t v110 = v121;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"Traffic",  @"     Server daily budget is: %@   Current count is: %@");
        }

        uint64_t v77 = -[__CFString unsignedLongLongValue](v121, "unsignedLongLongValue", v107, v110);
        if (v77 > -[__CFString unsignedLongLongValue](v52, "unsignedLongLongValue"))
        {
          uint64_t v78 = OSLogHandleForIDSCategory("Traffic");
          uint64_t v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
          if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "     **** we are over budget", buf, 2u);
          }

          if (!os_log_shim_legacy_logging_enabled(v80) || (_IDSShouldLog(0LL, @"Traffic") & 1) == 0)
          {
            id v21 = 0;
            goto LABEL_150;
          }

          __int16 v61 = @"     **** we are over budget";
          goto LABEL_140;
        }
      }

      id v21 = 1;
      goto LABEL_150;
    }

    __int16 v50 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"server-message-budget-daily-%@",  v11));
    id v51 = (void *)objc_claimAutoreleasedReturnValue( +[IDSServerBag sharedInstanceForBagType:]( &OBJC_CLASS___IDSServerBag,  "sharedInstanceForBagType:",  1LL));
    __int16 v52 = (__CFString *)objc_claimAutoreleasedReturnValue([v51 objectForKey:v50]);

    double v53 = -[__CFString intValue](v52, "intValue");
    id v21 = v53 < 1;
    if (v53 < 1)
    {
      uint64_t v97 = OSLogHandleForIDSCategory("Traffic");
      uint64_t v98 = (os_log_s *)objc_claimAutoreleasedReturnValue(v97);
      if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_DEFAULT, "     No budget specified", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled(v99) && (_IDSShouldLog(0LL, @"Traffic") & 1) != 0)
      {
        __int16 v61 = @"     No budget specified";
        goto LABEL_140;
      }
    }

    else
    {
      __int16 v54 = OSLogHandleForIDSCategory("Traffic");
      double v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        uint64_t v123 = v52;
        uint64_t v124 = 2112;
        uint64_t v125 = v121;
        _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "     Server daily budget is: %@   Current count is: %@",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v56) && _IDSShouldLog(0LL, @"Traffic"))
      {
        uint64_t v107 = v52;
        uint64_t v110 = v121;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"Traffic",  @"     Server daily budget is: %@   Current count is: %@");
      }

      __int128 v57 = -[__CFString unsignedLongLongValue](v121, "unsignedLongLongValue", v107, v110);
      if (v57 > -[__CFString unsignedLongLongValue](v52, "unsignedLongLongValue"))
      {
        __int128 v58 = OSLogHandleForIDSCategory("Traffic");
        __int16 v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "     **** we are over budget", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled(v60) && (_IDSShouldLog(0LL, @"Traffic") & 1) != 0)
        {
          __int16 v61 = @"     **** we are over budget";
LABEL_140:
          _IDSLogV(0LL, @"IDSFoundation", @"Traffic", v61);
          goto LABEL_150;
        }

        id v21 = 0;
LABEL_150:

        goto LABEL_125;
      }
    }

    id v21 = 1;
    goto LABEL_150;
  }

  id v21 = 1;
LABEL_126:

  return v21;
}

    sub_10041D3BC(v120);
    v143 = v245;
    v234 = v245 & 0xC000000000000001LL;
    if ((v245 & 0xC000000000000001LL) != 0)
    {
      v144 = v245 & 0xFFFFFFFFFFFFFF8LL;
      if (v245 < 0) {
        v145 = v245;
      }
      else {
        v145 = v245 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v245);
      __int16 v146 = __CocoaSet.count.getter(v145);
      if (!v146) {
        goto LABEL_124;
      }
      v147 = v146;
      v244 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v146);
      v241 = (void *)__CocoaSet.startIndex.getter(v145);
      v242 = v148;
      v243 = 1;
      if ((v147 & 0x8000000000000000LL) == 0) {
        goto LABEL_112;
      }
      __break(1u);
    }

    v147 = *(void *)(v143 + 16);
    swift_bridgeObjectRetain(v143);
    if (v147)
    {
      v244 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v147);
      v241 = (void *)sub_1004382EC(v143);
      v242 = v149;
      v243 = v150 & 1;
      v144 = v143 & 0xFFFFFFFFFFFFFF8LL;
LABEL_112:
      v233 = (void *)objc_opt_self(&OBJC_CLASS___IDSDestination);
      if (v143 < 0) {
        v151 = (_BYTE *)v143;
      }
      else {
        v151 = (_BYTE *)v144;
      }
      v231 = v151;
      v232 = v143;
      while (1)
      {
        while (1)
        {
          v157 = (int64_t)v241;
          v158 = v242;
          v159 = v243;
          sub_10049545C((uint64_t)v241, v242, v243, v143);
          v161 = v160;
          v162 = *(void *)&v160[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_allocatedURI
                                + 8];
          v163 =  objc_msgSend( *(id *)&v160[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_pushToken],  "rawToken",  swift_bridgeObjectRetain(v162).n128_f64[0]);
          v164 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v163);
          v166 = v165;

          v167 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v162);
          isa = Data._bridgeToObjectiveC()().super.isa;
          v169 = [v233 destinationWithAlias:v167 pushToken:isa];
          sub_100402A84(v164, v166);

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v170);
          v171 = v244[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v171);
          v172 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v171, v169);
          uint64_t result = (id)specialized ContiguousArray._endMutation()(v172);
          if (v234) {
            break;
          }
          v143 = v232;
          v152 = (void *)sub_100437F28(v157, v158, v159, v232);
          v154 = v153;
          v156 = v155;
          sub_1004398F4(v157, v158, v159);
          v241 = v152;
          v242 = v154;
          v243 = v156 & 1;
          if (!--v147) {
            goto LABEL_123;
          }
        }

        v143 = v232;
        if ((v159 & 1) == 0) {
          break;
        }
        v173 = __CocoaSet.Index.handleBitPattern.getter(v157, v158);
        if (v173) {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v173);
        }
        else {
          isUniquelyReferenced_nonNull_native = 1LL;
        }
        v175 = sub_1003F5CB4(&qword_1009BB760);
        v176 = (void (*)(void ***, void))Set.Index._asCocoa.modify(&aBlock, v175);
        __CocoaSet.formIndex(after:isUnique:)(v177, isUniquelyReferenced_nonNull_native, v231);
        v176(&aBlock, 0LL);
        if (!--v147)
        {
LABEL_123:
          sub_1004398F4((uint64_t)v241, v242, v243);
          v178 = v244;
          swift_bridgeObjectRelease(v143);
          goto LABEL_125;
        }
      }

      __break(1u);
      goto LABEL_133;
    }

LABEL_64:
              __int16 v47 = (void *)objc_claimAutoreleasedReturnValue([v5 authenticationCert]);
              if (v47)
              {
                unint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v5 regionID]);
                __int16 v49 = [v48 length] == 0;

                if (!v49)
                {
                  __int16 v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                  if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
                  {
LABEL_78:

                    -[IDSRegistrationController _ensureProfileQueriesAreReadyForRegistratration:]( self,  "_ensureProfileQueriesAreReadyForRegistratration:",  v5);
                    goto LABEL_79;
                  }

                  *(_DWORD *)buf = 138412290;
                  uint64_t v92 = (unint64_t)v5;
                  id v51 = "Registration looks correct, ensuring validation checks: %@";
LABEL_77:
                  _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, v51, buf, 0xCu);
                  goto LABEL_78;
                }
              }

        uint64_t v13 = (char *)v13 + 1;
      }

      while (v13 != v11);
      uint64_t v56 = [v8 countByEnumeratingWithState:&v71 objects:v78 count:16];
      uint64_t v11 = v56;
      if (!v56)
      {
LABEL_68:

        uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          int v6 = " => Done repair attempt";
LABEL_70:
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v6, buf, 2u);
        }

    uint64_t v122 = 0u;
    uint64_t v123 = 0u;
    uint64_t v120 = 0u;
    uint64_t v121 = 0u;
    uint64_t v77 = (__CFString *)v5;
    uint64_t v78 = -[__CFString countByEnumeratingWithState:objects:count:]( v77,  "countByEnumeratingWithState:objects:count:",  &v120,  v148,  16LL);
    if (v78)
    {
      uint64_t v79 = v78;
      uint64_t v80 = *(void *)v121;
      do
      {
        for (j = 0LL; j != v79; j = (char *)j + 1)
        {
          if (*(void *)v121 != v80) {
            objc_enumerationMutation(v77);
          }
          uint64_t v82 = *(void **)(*((void *)&v120 + 1) + 8LL * (void)j);
          uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue([v82 uniqueIdentifier]);
          uint64_t v84 = -[NSMutableArray containsObject:](v26, "containsObject:", v83);

          if ((v84 & 1) == 0) {
            -[__CFString removeObject:](v9, "removeObject:", v82);
          }
        }

        uint64_t v79 = -[__CFString countByEnumeratingWithState:objects:count:]( v77,  "countByEnumeratingWithState:objects:count:",  &v120,  v148,  16LL);
      }

      while (v79);
    }

    uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString __imSetByApplyingBlock:](v9, "__imSetByApplyingBlock:", &stru_1008FDE60));
    uint64_t v86 = objc_autoreleasePoolPush();
    if ((v114 & 1) != 0)
    {
      uint64_t v87 = 0;
      uint64_t v88 = v111;
      if (!v111)
      {
LABEL_75:
        uint64_t v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v107, "__imSetFromArray"));
        uint64_t v90 = [v89 isEqualToSet:v85];

        uint64_t v88 = v111;
LABEL_78:
        if ((v87 | v90) == 1)
        {
          if ((unint64_t)[v88 count] < 2)
          {
            uint64_t v93 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
          }

          else
          {
            uint64_t v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "__imSetFromArray"));
            uint64_t v93 = [v92 mutableCopy];
          }

          [v93 unionSet:v85];
          userConfiguration = v106->_userConfiguration;
          uint64_t v95 = (void *)objc_claimAutoreleasedReturnValue([v93 allObjects]);
          -[FTUserConfiguration silentlySetSelectedPhoneNumberRegistrationSubscriptionLabels:]( userConfiguration,  "silentlySetSelectedPhoneNumberRegistrationSubscriptionLabels:",  v95);

          uint64_t v88 = v111;
        }

        objc_autoreleasePoolPop(v86);
        uint64_t v96 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
        if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
        {
          if (v100) {
            uint64_t v97 = @"YES";
          }
          else {
            uint64_t v97 = @"NO";
          }
          *(_DWORD *)buf = 138413826;
          if (v105) {
            uint64_t v98 = @"YES";
          }
          else {
            uint64_t v98 = @"NO";
          }
          __int128 v135 = v77;
          __int128 v136 = 2112;
          __int128 v137 = v9;
          __int128 v138 = 2112;
          __int128 v139 = v97;
          __int128 v140 = 2112;
          __int128 v141 = (uint64_t)v98;
          v142 = 2112;
          v143 = v88;
          v144 = 2112;
          v145 = (uint64_t)v107;
          __int16 v146 = 2112;
          v147 = obj;
          _os_log_impl( (void *)&_mh_execute_header,  v96,  OS_LOG_TYPE_DEFAULT,  "Finished synchronizing Sims to users {currentUsers: %@, updatedUsers: %@, dualMode: %@, inManualSelectionMod e %@, selectedLabelIDs: %@, tempLabelIDs: %@, sims: %@}",  buf,  0x48u);
        }

        __int16 v23 = v9;
        goto LABEL_92;
      }
    }

    else
    {
      uint64_t v88 = v111;
      uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v111, "__imSetFromArray"));
      uint64_t v87 = [v85 isSubsetOfSet:v91] ^ 1;

      if (!v111) {
        goto LABEL_75;
      }
    }

    uint64_t v90 = 0;
    goto LABEL_78;
  }

  id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "This device does not support identification -- returning no users",  buf,  2u);
  }

  __int16 v23 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSSet set](&OBJC_CLASS___NSSet, "set"));
LABEL_92:

  return v23;
}

                  uint64_t v43 = (void *)v88;
                  if (v88 && v89)
                  {

                    __int16 v61 = (void *)objc_claimAutoreleasedReturnValue( +[IDSEncryptionController sharedInstance]( &OBJC_CLASS___IDSEncryptionController,  "sharedInstance"));
                    __int16 v63 = *(void *)(a1 + 64);
                    double v62 = *(void *)(a1 + 72);
                    v93[0] = _NSConcreteStackBlock;
                    v93[1] = 3221225472LL;
                    v93[2] = sub_10035A4B4;
                    v93[3] = &unk_1008F6298;
                    uint64_t v64 = *(void *)(a1 + 56);
                    uint64_t v94 = *(id *)(a1 + 48);
                    uint64_t v95 = *(id *)(a1 + 32);
                    LOBYTE(v81) = 0;
                    LODWORD(v76) = v90;
                    [v61 publicKeyVerifySignedData:v64 matchesData:v63 forSignatureType:v83 identity:v88 toURI:v82 pushToken:v18 service:v62 localURI:v89 w ithKeyType:v76 keyDiversifier:v91 priority:300 completion:v93 avoidMainQueue:v81];

                    __int16 v65 = v94;
                    goto LABEL_83;
                  }

                  uint64_t v45 = v87 + 1;
                }

                while ((id)(v87 + 1) != v86);
                uint64_t v86 = [obj countByEnumeratingWithState:&v100 objects:v106 count:16];
                if (v86) {
                  continue;
                }
                break;
              }
            }

            else
            {
              uint64_t v89 = 0LL;
              uint64_t v43 = 0LL;
            }

            uint64_t v66 = OSLogHandleForIDSCategory("IDSDaemon");
            __int16 v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
            if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
            {
              unint64_t v68 = *(void *)(a1 + 48);
              *(_DWORD *)buf = 138412290;
              uint64_t v108 = v68;
              _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEFAULT,  "Daemon dropping request %@ because we are not registered",  buf,  0xCu);
            }

            if (os_log_shim_legacy_logging_enabled(v69)
              && _IDSShouldLog(0LL, @"IDSDaemon"))
            {
              uint64_t v74 = *(void *)(a1 + 48);
              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Daemon dropping request %@ because we are not registered");
            }

            __int16 v65 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSSigningErrorDomain,  14LL,  0LL,  v74));
            [*(id *)(a1 + 32) setReply:1];
            uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
            __int16 v71 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localObject]);
            uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue([v70 broadcasterForLocalObject:v71 messageContext:*(void *)(a1 + 32)]);

            [v72 finishedVerifyingSignedDataForRequest:*(void *)(a1 + 48) success:0 error:v65];
LABEL_83:
          }

          else
          {
            double v55 = OSLogHandleForIDSCategory("IDSDaemon");
            uint64_t v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
            if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
            {
              __int128 v57 = *(void *)(a1 + 48);
              *(_DWORD *)buf = 138412290;
              uint64_t v108 = v57;
              _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEFAULT,  "Daemon dropping request %@ because tokenURI malformed",  buf,  0xCu);
            }

            if (os_log_shim_legacy_logging_enabled(v58)
              && _IDSShouldLog(0LL, @"IDSDaemon"))
            {
              uint64_t v74 = *(void *)(a1 + 48);
              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Daemon dropping request %@ because tokenURI malformed");
            }

            uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSSigningErrorDomain,  2LL,  0LL,  v74));
            [*(id *)(a1 + 32) setReply:1];
            __int16 v59 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
            double v60 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localObject]);
            uint64_t v89 = (IDSURI *)objc_claimAutoreleasedReturnValue([v59 broadcasterForLocalObject:v60 messageContext:*(void *)(a1 + 32)]);

            -[IDSURI finishedVerifyingSignedDataForRequest:success:error:]( v89,  "finishedVerifyingSignedDataForRequest:success:error:",  *(void *)(a1 + 48),  0LL,  v43);
          }
        }

        else
        {
          uint64_t v13 = OSLogHandleForIDSCategory("IDSDaemon");
          id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v15 = *(void *)(a1 + 48);
            id v16 = *(void *)(a1 + 96);
            *(_DWORD *)buf = 138412802;
            uint64_t v108 = v15;
            uint64_t v109 = 2048;
            uint64_t v110 = v16;
            uint64_t v111 = 2048;
            uint64_t v112 = 0LL;
            _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Daemon dropping request %@ because it has a mismatched verification algorithm %ld and key type %ld",  buf,  0x20u);
          }

          if (os_log_shim_legacy_logging_enabled(v17)
            && _IDSShouldLog(0LL, @"IDSDaemon"))
          {
            *((void *)&v73 + 1) = *(void *)(a1 + 96);
            uint64_t v75 = 0LL;
            *(void *)&__int16 v73 = *(void *)(a1 + 48);
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Daemon dropping request %@ because it has a mismatched verification algorithm %ld and key type %ld");
          }

          __int128 v18 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSSigningErrorDomain,  1LL,  0LL,  v73,  v75,  v77,  v78,  v79,  v80));
          [*(id *)(a1 + 32) setReply:1];
          __int128 v19 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
          __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localObject]);
          id v21 = (void *)objc_claimAutoreleasedReturnValue([v19 broadcasterForLocalObject:v20 messageContext:*(void *)(a1 + 32)]);

          [v21 finishedVerifyingSignedDataForRequest:*(void *)(a1 + 48) success:0 error:v18];
        }
      }

      else
      {
        int v32 = OSLogHandleForIDSCategory("IDSDaemon");
        int v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          double v34 = *(void *)(a1 + 48);
          *(_DWORD *)buf = 138412290;
          uint64_t v108 = v34;
          _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "Daemon dropping request %@ because it is not a token URI",  buf,  0xCu);
        }

        if (os_log_shim_legacy_logging_enabled(v35)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          *(void *)&__int16 v73 = *(void *)(a1 + 48);
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Daemon dropping request %@ because it is not a token URI");
        }

        __int128 v18 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSSigningErrorDomain,  2LL,  0LL,  v73,  v75,  v77,  v78,  v79,  v80));
        [*(id *)(a1 + 32) setReply:1];
        double v36 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
        int v37 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localObject]);
        id v21 = (void *)objc_claimAutoreleasedReturnValue([v36 broadcasterForLocalObject:v37 messageContext:*(void *)(a1 + 32)]);

        [v21 finishedVerifyingSignedDataForRequest:*(void *)(a1 + 48) success:0 error:v18];
      }
    }

    else
    {
      uint64_t v26 = OSLogHandleForIDSCategory("IDSDaemon");
      uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v28 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 138412290;
        uint64_t v108 = v28;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Daemon dropping request %@ because unentitled",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v29) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        *(void *)&__int16 v73 = *(void *)(a1 + 48);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Daemon dropping request %@ because unentitled");
      }

      __int128 v18 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSSigningErrorDomain,  4LL,  0LL,  v73,  v75,  v77,  v78,  v79,  v80));
      [*(id *)(a1 + 32) setReply:1];
      int v30 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localObject]);
      id v21 = (void *)objc_claimAutoreleasedReturnValue([v30 broadcasterForLocalObject:v31 messageContext:*(void *)(a1 + 32)]);

      [v21 finishedVerifyingSignedDataForRequest:*(void *)(a1 + 48) success:0 error:v18];
    }

    goto LABEL_33;
  }

  id v22 = OSLogHandleForIDSCategory("IDSDaemon");
  __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v24 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138412290;
    uint64_t v108 = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Daemon dropping request %@ because it is missing required parameter",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v25) && _IDSShouldLog(0LL, @"IDSDaemon")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Daemon dropping request %@ because it is missing required parameter");
  }
  if (*(void *)(a1 + 48))
  {
    __int128 v18 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSSigningErrorDomain,  1LL,  0LL));
    id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 88) listenerRemoteObjectForLocalObject:v92]);
    [v21 finishedVerifyingSignedDataForRequest:*(void *)(a1 + 48) success:0 error:v18];
LABEL_33:
  }
}

LABEL_65:
        id v7 = v109;
        goto LABEL_66;
      }

      loga = (os_log_t)objc_claimAutoreleasedReturnValue([v21 registeredKTData]);
      if (!loga) {
        goto LABEL_70;
      }
      uint64_t v105 = (void *)objc_claimAutoreleasedReturnValue([v21 registeredKTData]);
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v105 ktDataForRegistration]);
      int v32 = (void *)objc_claimAutoreleasedReturnValue([v23 tbsKTIDSRegistrationData]);
      uint64_t v104 = v31;
      if (![v31 isEqualToData:v32])
      {

LABEL_69:
LABEL_70:
        __int128 v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)uint64_t v125 = @"kt-sig-resp";
          _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "Reporting KT metric success. { metricName: %@ }",  buf,  0xCu);
        }

        __int128 v58 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
        [v58 logSuccessForEventNamed:@"kt-sig-resp"];

        __int16 v59 = (void *)objc_claimAutoreleasedReturnValue([v23 publicKey]);
        double v60 = (void *)objc_claimAutoreleasedReturnValue([v21 unregisteredKTData]);
        [v60 setKtPublicAccountKey:v59];

        __int16 v61 = (void *)objc_claimAutoreleasedReturnValue([v23 signature]);
        double v62 = (void *)objc_claimAutoreleasedReturnValue([v21 unregisteredKTData]);
        [v62 setKtDataSignature:v61];

        __int16 v63 = (void *)objc_claimAutoreleasedReturnValue([v23 dsid]);
        uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([v21 unregisteredKTData]);
        [v64 setDsid:v63];

        uint64_t v103 = 1;
        goto LABEL_73;
      }

      uint64_t v101 = (void *)objc_claimAutoreleasedReturnValue([v21 registeredKTData]);
      int v33 = (void *)objc_claimAutoreleasedReturnValue([v101 ktPublicAccountKey]);
      double v34 = (void *)objc_claimAutoreleasedReturnValue([v23 publicKey]);
      uint64_t v102 = [v33 isEqualToData:v34];

      id v7 = v109;
      if (!v102) {
        goto LABEL_70;
      }
      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v21 registeredKTData]);
      double v36 = (void *)objc_claimAutoreleasedReturnValue([v35 ktDataSignature]);
      if (v36)
      {
      }

      else
      {
        __int16 v65 = (void *)objc_claimAutoreleasedReturnValue([v23 signature]);

        if (v65)
        {
          loga = (os_log_t)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
          if (os_log_type_enabled(loga, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  loga,  OS_LOG_TYPE_DEFAULT,  "We previously registered without a signature, but we have one now.",  buf,  2u);
          }

          goto LABEL_69;
        }
      }

      int v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)uint64_t v125 = @"kt-sig-resp";
        _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "Reporting KT metric success. { metricName: %@ }",  buf,  0xCu);
      }

      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
      [v38 logSuccessForEventNamed:@"kt-sig-resp"];

      id v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)uint64_t v125 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "KT data for registration and public account key are unchanged from what is registered. No update needed for ke y index. { keyIndex: %u }",  buf,  8u);
      }

      [v21 setUnregisteredKTData:0];
LABEL_73:
      log = 1;
LABEL_66:

      id v16 = (char *)v16 + 1;
    }

    while (v15 != v16);
    uint64_t v66 = [obj countByEnumeratingWithState:&v112 objects:v130 count:16];
    __int16 v15 = v66;
  }

  while (v66);
  if ((log & 1) != 0)
  {
    __int16 v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    int v6 = v100;
    if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "Persisting changes.", buf, 2u);
    }

    -[IDSKTRegistrationDataManager serializeAndPersistKTDatasDeleteIfNull:]( self,  "serializeAndPersistKTDatasDeleteIfNull:",  1LL);
  }

  else
  {
    int v6 = v100;
  }

  if ((v103 & 1) == 0) {
    goto LABEL_118;
  }
  uint64_t v86 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v86,  OS_LOG_TYPE_DEFAULT,  "Updated unregistered data. Need to upload to KVS.",  buf,  2u);
  }

  -[IDSKTRegistrationDataManager updateKVSWithCurrentKTRegistrationData](self, "updateKVSWithCurrentKTRegistrationData");
  uint64_t v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEFAULT,  "Updated unregistered data. Need to reregister.",  buf,  2u);
  }

  uint64_t v87 = 1;
LABEL_141:

LABEL_142:
  return v87;
}

      double v34 = (v50 - 1) & v50;
      uint64_t v42 = __clz(__rbit64(v50)) + (v33 << 6);
      goto LABEL_65;
    }

    break;
  }

  __break(1u);
LABEL_74:
  __break(1u);
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

void sub_100061B90( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, os_activity_scope_state_s state, char a25)
{
}

void *sub_100061C40(void *a1)
{
  id v1 = a1;
  unsigned int v2 = [v1 registrationType];
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v1 mainID]);

  if (v3)
  {
    if ([v1 registrationType] == 1
      && (uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v1 profileID]),
          id v5 = [v4 length],
          v4,
          !v5))
    {
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_28;
      }
      int v22 = 138412290;
      id v23 = v1;
      id v16 = "Missing ProfileID, Not sending IDS Authentication/Register for: %@";
    }

    else
    {
      if ([v1 registrationType] != 1
        || (int v6 = (void *)objc_claimAutoreleasedReturnValue([v1 regionID]),
            id v7 = [v6 length],
            v6,
            v7))
      {
        if ([v1 registrationType] != 1
          || (__int16 v8 = (void *)objc_claimAutoreleasedReturnValue([v1 regionBasePhoneNumber]),
              id v9 = [v8 length],
              v8,
              v9))
        {
          uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v1 authenticationCert]);
          uint64_t v11 = v10;
          if (v10 || v2 == 3)
          {

            if (!v11) {
              goto LABEL_11;
            }
          }

          else
          {
            CFTypeRef v12 = (void *)objc_claimAutoreleasedReturnValue([v1 authenticationToken]);

            if (v12)
            {
LABEL_11:
              uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
              {
                int v22 = 138412290;
                id v23 = v1;
                _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Sending IDS Authentication for: %@",  (uint8_t *)&v22,  0xCu);
              }

              id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationCenter sharedInstance]( &OBJC_CLASS___IDSRegistrationCenter,  "sharedInstance"));
              id v15 = -[os_log_s authenticateRegistration:](v14, "authenticateRegistration:", v1);
LABEL_32:
              id v3 = v15;
              goto LABEL_33;
            }
          }

          uint64_t v17 = objc_claimAutoreleasedReturnValue([v1 authenticationCert]);
          if (v17)
          {
            __int128 v18 = (void *)v17;
            unsigned __int8 v19 = [v1 stopAtAuthentication];

            if ((v19 & 1) == 0)
            {
              __int128 v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
              {
                int v22 = 138412290;
                id v23 = v1;
                _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Sending IDS Registration for: %@",  (uint8_t *)&v22,  0xCu);
              }

              id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationCenter sharedInstance]( &OBJC_CLASS___IDSRegistrationCenter,  "sharedInstance"));
              id v15 = -[os_log_s sendRegistration:](v14, "sendRegistration:", v1);
              goto LABEL_32;
            }
          }

          id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_28;
          }
          int v22 = 138412290;
          id v23 = v1;
          id v16 = "Not sending IDS Registration or Authentication for: %@";
          goto LABEL_27;
        }

        id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          int v22 = 138412290;
          id v23 = v1;
          id v16 = "Missing regionBasePhoneNumber, Not sending IDS Authentication/Register for: %@";
          goto LABEL_27;
        }

void sub_100062CD4(_Unwind_Exception *a1)
{
}

void sub_100062EE4()
{
}

void sub_1000630F0()
{
}

void sub_1000633F4()
{
}

void sub_10006341C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, os_activity_scope_state_s state, char a23)
{
}

void sub_100063434(uint64_t a1, int a2)
{
  if (!a2) {
    sub_100063438();
  }
  objc_terminate();
  -[IDSRegistrationController _notifyRegistrationSuccess:](v2, v3, v4);
}

void sub_1000636C8()
{
}

void sub_1000636EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, os_activity_scope_state_s state, char a23)
{
}

void sub_100063704(uint64_t a1, int a2)
{
  if (!a2) {
    sub_100063708();
  }
  objc_terminate();
  -[IDSRegistrationController _notifyAllRegistrationSuccess:](v2, v3, v4);
}

void sub_1000639B8()
{
}

void sub_100063B64()
{
}

void sub_100063E1C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 138412802;
    uint64_t v10 = v8;
    __int16 v11 = 2112;
    id v12 = v5;
    __int16 v13 = 2112;
    id v14 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Finished capturing AutoBugCapture diagnostics for registration failure { context: %@, sessionID: %@, error: %@ }",  (uint8_t *)&v9,  0x20u);
  }
}

void sub_100064244(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) userUniqueIdentifier]);
  [v1 _postHomeNumberNotificationBeforeAlertForIdentifier:v2 forcefully:0];
}

uint64_t sub_100065620(uint64_t a1)
{
  uint64_t result = (uint64_t)[*(id *)(a1 + 32) registrationStatus];
  if (result <= 6) {
    return (uint64_t)_[*(id *)(a1 + 40) _notifyRegistrationUpdated:*(void *)(a1 + 32)];
  }
  return result;
}

id sub_100066E38(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 mainID]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_im_normalizedURIString"));
  LODWORD(a1) = [v5 isEqualToString:*(void *)(a1 + 32)];

  if ((_DWORD)a1) {
    id v6 = v3;
  }
  else {
    id v6 = 0LL;
  }

  return v6;
}

id sub_100066F24(uint64_t a1, void *a2)
{
  id v3 = a2;
  else {
    id v4 = 0LL;
  }

  return v4;
}

id sub_100066FB0(id a1, id a2)
{
  id v2 = a2;
  if ([v2 canSendRegistration]
    && ([v2 stopAtAuthentication] & 1) == 0)
  {
    id v3 = v2;
  }

  else
  {
    id v3 = 0LL;
  }

  return v3;
}

id sub_100067738(uint64_t a1)
{
  return [*(id *)(a1 + 32) _postHomeNumberNotificationBeforeAlertForIdentifier:*(void *)(a1 + 40) forcefully:1];
}

void sub_100067DF8(uint64_t a1, void *a2)
{
  id v3 = [a2 response];
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "User didn't hit default button on disable phone number alert",  buf,  2u);
    }

    id v6 = objc_alloc(&OBJC_CLASS___NSMutableSet);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[FTUserConfiguration sharedInstance](&OBJC_CLASS___FTUserConfiguration, "sharedInstance"));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 selectedPhoneNumberRegistrationSubscriptionLabels]);
    id v4 = -[NSMutableSet initWithArray:](v6, "initWithArray:", v8);

    -[os_log_s removeObject:](v4, "removeObject:", *(void *)(a1 + 32));
    int v9 = (void *)objc_claimAutoreleasedReturnValue(+[FTUserConfiguration sharedInstance](&OBJC_CLASS___FTUserConfiguration, "sharedInstance"));
    if (([v9 isDeviceInDualPhoneIdentityMode] & 1) == 0)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[FTUserConfiguration sharedInstance](&OBJC_CLASS___FTUserConfiguration, "sharedInstance"));
      unsigned __int8 v11 = [v10 isDeviceInManualPhoneSelectionMode];

      if ((v11 & 1) != 0)
      {
LABEL_8:
        id v12 = (void *)objc_claimAutoreleasedReturnValue(+[FTUserConfiguration sharedInstance](&OBJC_CLASS___FTUserConfiguration, "sharedInstance"));
        __int16 v13 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s allObjects](v4, "allObjects"));
        [v12 setSelectedPhoneNumberRegistrationSubscriptionLabels:v13];

        goto LABEL_11;
      }

      int v9 = (void *)objc_claimAutoreleasedReturnValue(+[FTUserConfiguration sharedInstance](&OBJC_CLASS___FTUserConfiguration, "sharedInstance"));
      [v9 setIsDeviceInManualPhoneSelectionMode:1];
    }

    goto LABEL_8;
  }

  if (v5)
  {
    *(_WORD *)id v15 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "User hit no to disable phone number alert -- ignoring",  v15,  2u);
  }

void sub_10006A008(id a1, NSString *a2, NSError *a3)
{
  id v4 = a2;
  BOOL v5 = a3;
  uint64_t v6 = OSLogHandleForIDSCategory("IDSDelivery");
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    uint64_t v10 = v4;
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Triggered auto bug capture for rate limiting {session : %@, error: %@}",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v8) && _IDSShouldLog(0LL, @"IDSDelivery")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDelivery",  @"Triggered auto bug capture for rate limiting {session : %@, error: %@}");
  }
}

id sub_10006B148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setObject:a3 forKey:a2];
}

uint64_t IDSProtoKeyTransparencyLoggableDataReadFrom(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        uint64_t Data = PBReaderReadData(a2);
        uint64_t v13 = objc_claimAutoreleasedReturnValue(Data);
        id v14 = *(void **)(a1 + 24);
        *(void *)(a1 + cut_arc_os_release(v1 - 24) = v13;

        goto LABEL_47;
      case 2u:
        char v16 = 0;
        unsigned int v17 = 0;
        uint64_t v18 = 0LL;
        *(_BYTE *)(a1 + 36) |= 2u;
        while (2)
        {
          unint64_t v19 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v19 == -1LL || v19 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v20 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19 + 1;
            v18 |= (unint64_t)(v20 & 0x7F) << v16;
            if (v20 < 0)
            {
              v16 += 7;
              BOOL v9 = v17++ >= 9;
              if (v9)
              {
                LODWORD(v1_Block_object_dispose(va, 8) = 0;
                goto LABEL_41;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v1_Block_object_dispose(va, 8) = 0;
        }
LABEL_41:
        uint64_t v26 = 32LL;
        goto LABEL_46;
      case 3u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v18 = 0LL;
        *(_BYTE *)(a1 + 36) |= 1u;
        while (2)
        {
          unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1LL || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v24 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
            v18 |= (unint64_t)(v24 & 0x7F) << v21;
            if (v24 < 0)
            {
              v21 += 7;
              BOOL v9 = v22++ >= 9;
              if (v9)
              {
                LODWORD(v1_Block_object_dispose(va, 8) = 0;
                goto LABEL_45;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v1_Block_object_dispose(va, 8) = 0;
        }
LABEL_45:
        uint64_t v26 = 16LL;
LABEL_46:
        *(_DWORD *)(a1 + v26) = v18;
        goto LABEL_47;
      case 4u:
        uint64_t v25 = objc_alloc_init(&OBJC_CLASS___IDSProtoApplicationKeyEntry);
        [(id)a1 addApplicationPublicIdentity:v25];
        v27[0] = 0xAAAAAAAAAAAAAAAALL;
        v27[1] = 0xAAAAAAAAAAAAAAAALL;
        if (PBReaderPlaceMark(a2, v27)
          && (IDSProtoApplicationKeyEntryReadFrom((uint64_t)v25, a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v27);

LABEL_47:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0LL;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_47;
    }
  }

void sub_10006CFA0(id *a1)
{
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472LL;
  v25[2] = sub_10006D2D4;
  v25[3] = &unk_1008F7BB0;
  id v2 = a1 + 4;
  void v25[4] = a1[4];
  id v26 = a1[5];
  id v27 = v2[2];
  id v28 = v2[4];
  id v3 = objc_retainBlock(v25);
  char v4 = (void *)objc_claimAutoreleasedReturnValue([*v2 _lookupEndpoint]);
  LOBYTE(v2) = v4 == 0LL;

  if ((v2 & 1) != 0)
  {
    id v5 = [a1[4] avoidMainQueue];
    if ((_DWORD)v5)
    {
      uint64_t v7 = OSLogHandleForIDSCategory("Encryption");
      char v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([a1[4] remoteURI]);
        int v10 = (void *)objc_claimAutoreleasedReturnValue([a1[4] localURI]);
        __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([a1[4] service]);
        *(_DWORD *)buf = 138412802;
        int v30 = v9;
        __int16 v31 = 2112;
        int v32 = v10;
        __int16 v33 = 2112;
        double v34 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Need to query for encryption but should avoid main -- failing {remoteURI: %@, localURI: %@, service: %@}",  buf,  0x20u);
      }

      if (os_log_shim_legacy_logging_enabled(v12))
      {
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([a1[4] remoteURI]);
        unint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([a1[4] localURI]);
        char v20 = (void *)objc_claimAutoreleasedReturnValue([a1[4] service]);
        uint64_t v18 = v13;
        _IDSLogEventV( @"IDSFoundation",  @"Encryption",  @"Need to query for encryption but should avoid main -- failing {remoteURI: %@, localURI: %@, service: %@}");
      }

      id v14 = a1[8];
      id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSEncryptionErrorDomain,  6LL,  0LL,  v18,  v19,  v20));
      (*((void (**)(id, void, void *, void))v14 + 2))(v14, 0LL, v15, 0LL);
    }

    uint64_t v16 = im_primary_queue(v5, v6);
    unsigned int v17 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10006D5A0;
    block[3] = &unk_1008F8490;
    void block[4] = a1[4];
    id v22 = a1[7];
    unint64_t v23 = v3;
    id v24 = a1[8];
    dispatch_async(v17, block);
  }

  else
  {
    ((void (*)(void *))v3[2])(v3);
  }
}

void sub_10006D2D4(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v24 = 0LL;
  id v25 = 0LL;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 legacyEncryptData:v3 withEncryptedAttributes:v4 usedIdentifier:&v25 error:&v24]);
  id v6 = v25;
  id v7 = v24;
  id v8 = [*(id *)(a1 + 32) avoidMainQueue];
  if ((_DWORD)v8)
  {
    uint64_t v10 = *(void *)(a1 + 56);
    __int16 v11 = -[IDSEncryptionMetadata initWithMPIdentityIdentifier:]( objc_alloc(&OBJC_CLASS___IDSEncryptionMetadata),  "initWithMPIdentityIdentifier:",  v6);
    (*(void (**)(uint64_t, void *, id, IDSEncryptionMetadata *))(v10 + 16))(v10, v5, v7, v11);
  }

  uint64_t v12 = im_primary_queue(v8, v9);
  uint64_t v13 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v12);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10006D428;
  block[3] = &unk_1008F8440;
  id v19 = v5;
  id v20 = v7;
  uint64_t v21 = *(void *)(a1 + 32);
  id v14 = *(id *)(a1 + 56);
  id v22 = v6;
  id v23 = v14;
  id v15 = v6;
  id v16 = v7;
  id v17 = v5;
  dispatch_async(v13, block);
}

void sub_10006D428(uint64_t a1)
{
  if (!*(void *)(a1 + 32) || *(void *)(a1 + 40))
  {
    uint64_t v2 = OSLogHandleForIDSCategory("Encryption");
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Flushing peer tokens, in hopes this resolves in the next error",  v13,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v4)) {
      _IDSLogEventV( @"IDSFoundation",  @"Encryption",  @"Flushing peer tokens, in hopes this resolves in the next error");
    }
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) peerIDManager]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) remoteURI]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) localURI]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) service]);
    [v5 forgetPeerTokensForURI:v6 fromURI:v7 service:v8];
  }

  if (([*(id *)(a1 + 48) avoidMainQueue] & 1) == 0)
  {
    uint64_t v9 = *(void *)(a1 + 64);
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = -[IDSEncryptionMetadata initWithMPIdentityIdentifier:]( objc_alloc(&OBJC_CLASS___IDSEncryptionMetadata),  "initWithMPIdentityIdentifier:",  *(void *)(a1 + 56));
    (*(void (**)(uint64_t, uint64_t, uint64_t, IDSEncryptionMetadata *))(v9 + 16))(v9, v10, v11, v12);
  }

void sub_10006D5A0(id *a1)
{
  uint64_t v2 = OSLogHandleForIDSCategory("Encryption");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1[4] remoteURI]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([a1[4] localURI]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([a1[4] service]);
    *(_DWORD *)buf = 138412802;
    id v25 = v4;
    __int16 v26 = 2112;
    id v27 = v5;
    __int16 v28 = 2112;
    int v29 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Missing encryption keys -- querying {remoteURI: %@, localURI: %@, service: %@}",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v7))
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([a1[4] remoteURI]);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([a1[4] localURI]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([a1[4] service]);
    id v16 = v8;
    _IDSLogEventV( @"IDSFoundation",  @"Encryption",  @"Missing encryption keys -- querying {remoteURI: %@, localURI: %@, service: %@}");
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "peerIDManager", v16, v18, v19));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([a1[4] remoteURI]);
  uint64_t v11 = IMSingleObjectArray();
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([a1[4] cert]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([a1[4] localURI]);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([a1[4] service]);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_10006D86C;
  v20[3] = &unk_1008F8468;
  void v20[4] = a1[4];
  id v21 = a1[5];
  id v22 = a1[6];
  id v23 = a1[7];
  LOBYTE(v17) = 0;
  [v9 startQueryForURIs:v12 fromIdentity:v13 fromURI:v14 fromService:v15 forSending:1 forRefresh:0 isForced:v17 reason:@"URIEncrypt" completionBlock:v20];
}

void sub_10006D86C( uint64_t a1, void *a2, void *a3, void *a4, void *a5, int a6, void *a7, uint64_t a8, void *a9)
{
  id v33 = a2;
  id v34 = a3;
  id v15 = a4;
  id v35 = a5;
  id v16 = a7;
  id v17 = a9;
  uint64_t v18 = OSLogHandleForIDSCategory("Encryption");
  id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    if (a6) {
      id v20 = @"YES";
    }
    else {
      id v20 = @"NO";
    }
    id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remoteURI]);
    id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localURI]);
    id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) service]);
    *(_DWORD *)buf = 138413058;
    int v37 = v20;
    __int16 v38 = 2112;
    id v39 = v21;
    __int16 v40 = 2112;
    uint64_t v41 = v22;
    __int16 v42 = 2112;
    uint64_t v43 = v23;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Encryption query completed {success: %@, remoteURI: %@, localURI: %@, service: %@}",  buf,  0x2Au);
  }

  if (os_log_shim_legacy_logging_enabled(v24))
  {
    if (a6) {
      id v25 = @"YES";
    }
    else {
      id v25 = @"NO";
    }
    __int16 v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remoteURI]);
    __int16 v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localURI]);
    int v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) service]);
    int v29 = v25;
    int v30 = v26;
    _IDSLogEventV( @"IDSFoundation",  @"Encryption",  @"Encryption query completed {success: %@, remoteURI: %@, localURI: %@, service: %@}");
  }

  if (a6 && ([*(id *)(a1 + 32) avoidMainQueue] & 1) == 0)
  {
    [*(id *)(a1 + 40) performAsyncBlock:*(void *)(a1 + 48)];
  }

  else if ((objc_msgSend(*(id *)(a1 + 32), "avoidMainQueue", v29, v30, v31, v32) & 1) == 0)
  {
    uint64_t v27 = *(void *)(a1 + 56);
    __int16 v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSEncryptionErrorDomain,  1LL,  0LL));
    (*(void (**)(uint64_t, void, void *, void))(v27 + 16))(v27, 0LL, v28, 0LL);
  }
}

void sub_10006DC74(uint64_t a1)
{
  v49[0] = _NSConcreteStackBlock;
  v49[1] = 3221225472LL;
  v49[2] = sub_10006E194;
  v49[3] = &unk_1008F8508;
  uint64_t v2 = (id *)(a1 + 32);
  v49[4] = *(void *)(a1 + 32);
  id v50 = *(id *)(a1 + 40);
  id v51 = *(id *)(a1 + 48);
  id v52 = *(id *)(a1 + 56);
  uint64_t v3 = *(void **)(a1 + 64);
  char v55 = *(_BYTE *)(a1 + 88);
  id v53 = v3;
  id v54 = *(id *)(a1 + 80);
  uint64_t v4 = objc_retainBlock(v49);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*v2 replayCommitter]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 decryptedDataForKey:*(void *)(a1 + 64)]);

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 encryptedAttributes]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 decryptedData]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 additionalDecryptionResult]);
  id v10 = *v2;
  if (v8)
  {
    id v11 = [v10 avoidMainQueue];
    if ((_DWORD)v11)
    {
      uint64_t v13 = *(void *)(a1 + 80);
      id v14 = -[IDSDecryptionMetadata initWithUsedLastResortCache:usedCachedData:additionalDecryptionResult:]( objc_alloc(&OBJC_CLASS___IDSDecryptionMetadata),  "initWithUsedLastResortCache:usedCachedData:additionalDecryptionResult:",  0LL,  1LL,  v9);
      (*(void (**)(uint64_t, void *, void *, void, IDSDecryptionMetadata *))(v13 + 16))( v13,  v8,  v7,  0LL,  v14);
    }

    else
    {
      uint64_t v20 = im_primary_queue(v11, v12);
      id v21 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v20);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10006E740;
      block[3] = &unk_1008F8530;
      id v48 = *(id *)(a1 + 80);
      id v45 = v8;
      id v46 = v7;
      id v47 = v9;
      dispatch_async(v21, block);
    }
  }

  else
  {
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v10 _lookupEndpoint]);
    BOOL v16 = v15 == 0LL;

    id v17 = *(void **)(a1 + 32);
    if (v16)
    {
      id v22 = [v17 avoidMainQueue];
      if ((_DWORD)v22)
      {
        uint64_t v24 = OSLogHandleForIDSCategory("Encryption");
        id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remoteURI]);
          __int16 v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localURI]);
          uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) service]);
          *(_DWORD *)buf = 138412802;
          __int128 v57 = v38;
          __int16 v58 = 2112;
          __int16 v59 = v26;
          __int16 v60 = 2112;
          __int16 v61 = v27;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Need to query for decryption but should avoid main -- failing {remoteURI: %@, localURI: %@, service: %@}",  buf,  0x20u);
        }

        if (os_log_shim_legacy_logging_enabled(v28))
        {
          int v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remoteURI]);
          double v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localURI]);
          int v37 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) service]);
          id v35 = v29;
          _IDSLogEventV( @"IDSFoundation",  @"Encryption",  @"Need to query for decryption but should avoid main -- failing {remoteURI: %@, localURI: %@, service: %@}");
        }

        uint64_t v30 = *(void *)(a1 + 80);
        __int16 v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSDecryptionErrorDomain,  1LL,  0LL,  v35,  v36,  v37));
        int v32 = objc_alloc_init(&OBJC_CLASS___IDSDecryptionMetadata);
        (*(void (**)(uint64_t, void, void, void *, IDSDecryptionMetadata *))(v30 + 16))( v30,  0LL,  0LL,  v31,  v32);
      }

      uint64_t v33 = im_primary_queue(v22, v23);
      id v34 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v33);
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472LL;
      v39[2] = sub_10006E7B4;
      v39[3] = &unk_1008F85A8;
      v39[4] = *(void *)(a1 + 32);
      id v40 = *(id *)(a1 + 72);
      __int16 v42 = v4;
      id v43 = *(id *)(a1 + 80);
      id v41 = v9;
      dispatch_async(v34, v39);
    }

    else
    {
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 _lookupEndpoint]);
      id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 publicDeviceIdentityContainer]);

      ((void (*)(void *, void *, void, void))v4[2])(v4, v19, 0LL, 0LL);
    }
  }
}

void sub_10006E194(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7 = a4;
  id v8 = *(void **)(a1 + 32);
  id v9 = a2;
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 fullDeviceIdentityContainerEncrypter]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue( [v10 decryptData:*(void *)(a1 + 40) decryptionContext:*(void *)(a1 + 48) withPublicDeviceIdentityContainer:v9 usingIdentifier:*(void *)(a1 + 56) isRetry:*(unsigned __int8 *)(a1 + 80)]);

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_10006E29C;
  v14[3] = &unk_1008F84E0;
  char v19 = a3;
  uint64_t v12 = *(void *)(a1 + 32);
  id v15 = v7;
  uint64_t v16 = v12;
  id v17 = *(id *)(a1 + 64);
  id v18 = *(id *)(a1 + 72);
  id v13 = v7;
  [v11 registerResultBlock:v14];
}

void sub_10006E29C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 state] == (id)1)
  {
    if (*(_BYTE *)(a1 + 64)
      && *(void *)(a1 + 32)
      && (uint64_t v4 = *(void **)(a1 + 40),
          id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 error]),
          LOBYTE(v4) = [v4 _isReplayError:v5],
          v5,
          (v4 & 1) == 0))
    {
      id v6 = *(id *)(a1 + 32);
    }

    else
    {
      id v6 = (id)objc_claimAutoreleasedReturnValue([v3 error]);
    }

    id v7 = v6;
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _lookupEndpoint]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 domain]);
    if ([v9 isEqualToString:IDSDecryptionErrorDomain]
      && ([v7 code] == (id)12 || objc_msgSend(v7, "code") == (id)9))
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 identityContainerDeserializationError]);

      if (v10)
      {
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 domain]);
        id v12 = [v7 code];
        NSErrorUserInfoKey v39 = NSUnderlyingErrorKey;
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v8 identityContainerDeserializationError]);
        id v40 = v13;
        id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v40,  &v39,  1LL));
        uint64_t v15 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v11,  v12,  v14));

        id v7 = (void *)v15;
      }
    }

    else
    {
    }

    uint64_t v20 = -[IDSDecryptionMetadata initWithUsedLastResortCache:usedCachedData:additionalDecryptionResult:]( objc_alloc(&OBJC_CLASS___IDSDecryptionMetadata),  "initWithUsedLastResortCache:usedCachedData:additionalDecryptionResult:",  *(unsigned __int8 *)(a1 + 64),  0LL,  0LL);

    id v17 = 0LL;
    id v18 = 0LL;
    char v19 = 0LL;
  }

  else
  {
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v3 value]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 decryptedData]);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v16 encryptedAttributes]);
    char v19 = (void *)objc_claimAutoreleasedReturnValue([v16 additionalDecryptionResult]);
    uint64_t v20 = -[IDSDecryptionMetadata initWithUsedLastResortCache:usedCachedData:additionalDecryptionResult:]( objc_alloc(&OBJC_CLASS___IDSDecryptionMetadata),  "initWithUsedLastResortCache:usedCachedData:additionalDecryptionResult:",  *(unsigned __int8 *)(a1 + 64),  0LL,  v19);
    if (!CUTIsInternalInstall()
      || (+[IMUserDefaults isWritePushPayloadsToDiskEnabled]( &OBJC_CLASS___IMUserDefaults,  "isWritePushPayloadsToDiskEnabled") & 1) == 0)
    {
      id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) replayCommitter]);
      id v22 = (void *)objc_claimAutoreleasedReturnValue([v16 commitBlock]);
      [v21 holdCommitBlock:v22 andDecryptedData:v17 withEncryptedAttributes:v18 forKey:*(void *)(a1 + 48)];
    }

    id v7 = 0LL;
  }

  id v23 = [*(id *)(a1 + 40) avoidMainQueue];
  if ((_DWORD)v23) {
    id v23 = (id)(*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
  uint64_t v25 = im_primary_queue(v23, v24);
  __int16 v26 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v25);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10006E664;
  block[3] = &unk_1008F84B8;
  id v33 = v17;
  id v34 = v7;
  uint64_t v35 = *(void *)(a1 + 40);
  id v27 = *(id *)(a1 + 56);
  int v37 = v20;
  id v38 = v27;
  id v36 = v18;
  uint64_t v28 = v20;
  id v29 = v18;
  id v30 = v7;
  id v31 = v17;
  dispatch_async(v26, block);
}

uint64_t sub_10006E664(uint64_t a1)
{
  if (!*(void *)(a1 + 32) || *(void *)(a1 + 40))
  {
    uint64_t v2 = OSLogHandleForIDSCategory("Encryption");
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v6 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Flushing peer tokens, in hopes this resolves in the next error",  v6,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v4)) {
      _IDSLogEventV( @"IDSFoundation",  @"Encryption",  @"Flushing peer tokens, in hopes this resolves in the next error");
    }
  }

  uint64_t result = (uint64_t)[*(id *)(a1 + 48) avoidMainQueue];
  if ((result & 1) == 0) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }
  return result;
}

void sub_10006E740(void *a1)
{
  uint64_t v1 = a1[7];
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = -[IDSDecryptionMetadata initWithUsedLastResortCache:usedCachedData:additionalDecryptionResult:]( objc_alloc(&OBJC_CLASS___IDSDecryptionMetadata),  "initWithUsedLastResortCache:usedCachedData:additionalDecryptionResult:",  0LL,  1LL,  a1[6]);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, IDSDecryptionMetadata *))(v1 + 16))(v1, v2, v3, 0LL, v4);
}

void sub_10006E7B4(id *a1)
{
  uint64_t v2 = a1 + 4;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1[4] remoteURI]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 prefixedURI]);
  unsigned __int8 v5 = [v4 _appearsToBePseudonymID];
  id v6 = *v2;
  if ((v5 & 1) != 0)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 remoteURI]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 prefixedURI]);
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 pushToken]);
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue([a1[4] rateLimiter]);
  unsigned int v10 = [v9 underLimitForItem:v8];

  uint64_t v11 = OSLogHandleForIDSCategory("Encryption");
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    if (v10) {
      id v13 = @"YES";
    }
    else {
      id v13 = @"NO";
    }
    id v14 = (void *)objc_claimAutoreleasedReturnValue([a1[4] remoteURI]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([a1[4] localURI]);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([a1[4] service]);
    *(_DWORD *)buf = 138413058;
    __int16 v60 = v13;
    __int16 v61 = 2112;
    double v62 = v14;
    __int16 v63 = 2112;
    uint64_t v64 = v15;
    __int16 v65 = 2112;
    uint64_t v66 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Missing decryption keys, need to query {underLimit: %@, remoteURI: %@, localURI: %@, service: %@}",  buf,  0x2Au);
  }

  if (os_log_shim_legacy_logging_enabled(v17))
  {
    if (v10) {
      id v18 = @"YES";
    }
    else {
      id v18 = @"NO";
    }
    char v19 = (void *)objc_claimAutoreleasedReturnValue([a1[4] remoteURI]);
    uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([a1[4] localURI]);
    id v45 = (void *)objc_claimAutoreleasedReturnValue([a1[4] service]);
    __int16 v42 = v18;
    id v43 = v19;
    _IDSLogEventV( @"IDSFoundation",  @"Encryption",  @"Missing decryption keys, need to query {underLimit: %@, remoteURI: %@, localURI: %@, service: %@}");
  }

  id v20 = a1[4];
  if (!v10)
  {
    buf[0] = 0;
    uint64_t v34 = objc_claimAutoreleasedReturnValue([a1[4] _lookupIdentityWithLastResortFallback:buf]);
    uint64_t v35 = (void *)v34;
    if (!v34 || buf[0])
    {
      BOOL v37 = v34 != 0;
      id v36 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSDecryptionErrorDomain,  17LL,  0LL,  v42,  v43,  v44,  v45));
      if (!v37)
      {
        id v40 = a1[8];
        id v41 = objc_alloc(&OBJC_CLASS___IDSDecryptionMetadata);
        NSErrorUserInfoKey v39 = -[IDSDecryptionMetadata initWithUsedLastResortCache:usedCachedData:additionalDecryptionResult:]( v41,  "initWithUsedLastResortCache:usedCachedData:additionalDecryptionResult:",  buf[0],  0LL,  a1[6]);
        (*((void (**)(id, void, void, id, IDSDecryptionMetadata *))v40 + 2))(v40, 0LL, 0LL, v36, v39);
        goto LABEL_22;
      }
    }

    else
    {
      id v36 = 0LL;
    }

    id v38 = a1[5];
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472LL;
    v48[2] = sub_10006F240;
    v48[3] = &unk_1008F8558;
    id v51 = (IDSDecryptionMetadata *)a1[7];
    id v49 = v35;
    uint8_t v52 = buf[0];
    id v36 = v36;
    id v50 = v36;
    [v38 performAsyncBlock:v48];

    NSErrorUserInfoKey v39 = v51;
LABEL_22:

    goto LABEL_23;
  }

  id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 peerIDManager]);
  id v22 = (void *)objc_claimAutoreleasedReturnValue([a1[4] remoteURI]);
  id v23 = (void *)objc_claimAutoreleasedReturnValue([a1[4] localURI]);
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([a1[4] service]);
  [v21 forgetPeerTokensForURI:v22 fromURI:v23 service:v24];

  id v46 = -[IDSPeerIDQueryContext initWithSending:refresh:messaging:resultExpected:preventNewQuery:]( objc_alloc(&OBJC_CLASS___IDSPeerIDQueryContext),  "initWithSending:refresh:messaging:resultExpected:preventNewQuery:",  0LL,  0LL,  0LL,  1LL,  0LL);
  id v47 = (void *)objc_claimAutoreleasedReturnValue([a1[4] peerIDManager]);
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([a1[4] remoteURI]);
  uint64_t v29 = IMSingleObjectArray(v25, v26, v27, v28);
  id v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
  id v31 = (void *)objc_claimAutoreleasedReturnValue([a1[4] cert]);
  int v32 = (void *)objc_claimAutoreleasedReturnValue([a1[4] localURI]);
  id v33 = (void *)objc_claimAutoreleasedReturnValue([a1[4] service]);
  v53[0] = _NSConcreteStackBlock;
  v53[1] = 3221225472LL;
  v53[2] = sub_10006ED4C;
  v53[3] = &unk_1008F8580;
  v53[4] = a1[4];
  id v54 = v8;
  id v55 = a1[5];
  id v57 = a1[7];
  id v58 = a1[8];
  id v56 = a1[6];
  [v47 startQueryForURIs:v30 fromIdentity:v31 fromURI:v32 fromService:v33 context:v46 reason:@"URIDecrypt" completionBlock:v53];

LABEL_23:
}

void sub_10006ED4C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, int a6, void *a7, char a8, void *a9)
{
  id v45 = a2;
  id v46 = a3;
  id v47 = a4;
  id v15 = a5;
  id v16 = a7;
  id v17 = a9;
  uint64_t v18 = OSLogHandleForIDSCategory("Encryption");
  char v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    if (a6) {
      id v20 = @"YES";
    }
    else {
      id v20 = @"NO";
    }
    id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remoteURI]);
    id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localURI]);
    id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) service]);
    *(_DWORD *)buf = 138413058;
    id v58 = v20;
    __int16 v59 = 2112;
    __int16 v60 = v21;
    __int16 v61 = 2112;
    double v62 = v22;
    __int16 v63 = 2112;
    uint64_t v64 = v23;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Decryption query completed {success: %@, remoteURI: %@, localURI: %@, service: %@}",  buf,  0x2Au);
  }

  if (os_log_shim_legacy_logging_enabled(v24))
  {
    if (a6) {
      uint64_t v25 = @"YES";
    }
    else {
      uint64_t v25 = @"NO";
    }
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remoteURI]);
    __int16 v42 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localURI]);
    id v43 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) service]);
    id v40 = v25;
    id v41 = v26;
    _IDSLogEventV( @"IDSFoundation",  @"Encryption",  @"Decryption query completed {success: %@, remoteURI: %@, localURI: %@, service: %@}");
  }

  buf[0] = 0;
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_lookupIdentityWithLastResortFallback:", buf, v40, v41, v42, v43));
  if (v27 && !buf[0])
  {
    uint64_t v28 = 0LL;
    goto LABEL_20;
  }

  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remoteURI]);
  id v30 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKey:v29]);

  if (v30)
  {
    NSErrorUserInfoKey v55 = NSUnderlyingErrorKey;
    id v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remoteURI]);
    int v32 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKey:v31]);
    id v56 = v32;
    id v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v56,  &v55,  1LL));
  }

  else
  {
    if (!a6)
    {
      id v33 = 0LL;
      goto LABEL_19;
    }

    NSErrorUserInfoKey v53 = NSUnderlyingErrorKey;
    id v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSPeerIDManagerErrorDomain,  4LL,  0LL));
    id v54 = v31;
    id v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v54,  &v53,  1LL));
  }

LABEL_19:
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSDecryptionErrorDomain,  2LL,  v33));

LABEL_20:
  if (!((v27 == 0) | [*(id *)(a1 + 32) avoidMainQueue] & 1))
  {
    if (buf[0])
    {
      id v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rateLimiter]);
      [v38 noteItem:*(void *)(a1 + 40)];
    }

    NSErrorUserInfoKey v39 = *(void **)(a1 + 48);
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472LL;
    v48[2] = sub_10006F228;
    v48[3] = &unk_1008F8558;
    id v51 = (IDSDecryptionMetadata *)*(id *)(a1 + 64);
    id v49 = v27;
    uint8_t v52 = buf[0];
    id v50 = v28;
    [v39 performAsyncBlock:v48];

    BOOL v37 = v51;
    goto LABEL_28;
  }

  if (([*(id *)(a1 + 32) avoidMainQueue] & 1) == 0)
  {
    if ((a8 & 1) == 0)
    {
      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rateLimiter]);
      [v34 noteItem:*(void *)(a1 + 40)];
    }

    uint64_t v35 = *(void *)(a1 + 72);
    id v36 = objc_alloc(&OBJC_CLASS___IDSDecryptionMetadata);
    BOOL v37 = -[IDSDecryptionMetadata initWithUsedLastResortCache:usedCachedData:additionalDecryptionResult:]( v36,  "initWithUsedLastResortCache:usedCachedData:additionalDecryptionResult:",  buf[0],  0LL,  *(void *)(a1 + 56));
    (*(void (**)(uint64_t, void, void, void *, IDSDecryptionMetadata *))(v35 + 16))( v35,  0LL,  0LL,  v28,  v37);
LABEL_28:
  }
}

uint64_t sub_10006F228(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 56),  *(void *)(a1 + 40));
}

uint64_t sub_10006F240(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 56),  *(void *)(a1 + 40));
}

void sub_10006F350(uint64_t a1)
{
  v53[0] = _NSConcreteStackBlock;
  v53[1] = 3221225472LL;
  v53[2] = sub_10006F84C;
  v53[3] = &unk_1008F85F8;
  uint64_t v2 = (id *)(a1 + 32);
  v53[4] = *(void *)(a1 + 32);
  id v54 = *(id *)(a1 + 64);
  uint64_t v3 = objc_retainBlock(v53);
  unsigned int v4 = [*v2 _isNGMKeyType];
  if (v4)
  {
    v49[0] = _NSConcreteStackBlock;
    v49[1] = 3221225472LL;
    v49[2] = sub_10006F930;
    v49[3] = &unk_1008F8620;
    unsigned __int8 v5 = v49;
    id v6 = *(void **)(a1 + 40);
    v49[4] = *(void *)(a1 + 32);
    uint64_t v34 = &v50;
    id v50 = v6;
    id v36 = &v51;
    id v7 = *(id *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 72);
    id v51 = v7;
    v52[1] = v8;
    id v38 = (id *)v52;
    v52[0] = v3;
  }

  else
  {
    unsigned __int8 v5 = 0LL;
  }

  id v9 = objc_retainBlock(v5);
  unsigned int v10 = [*(id *)(a1 + 32) _isSecKeyType];
  if (v10)
  {
    v45[0] = _NSConcreteStackBlock;
    v45[1] = 3221225472LL;
    v45[2] = sub_10006F9E4;
    v45[3] = &unk_1008F8648;
    uint64_t v11 = v45;
    id v12 = *(void **)(a1 + 40);
    v45[4] = *(void *)(a1 + 32);
    uint64_t v35 = &v46;
    id v46 = v12;
    BOOL v37 = &v47;
    id v47 = *(id *)(a1 + 48);
    NSErrorUserInfoKey v39 = (id *)&v48;
    id v48 = v3;
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  id v13 = objc_retainBlock(v11);
  if ([*(id *)(a1 + 32) _isNGMKeyType]) {
    id v14 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _lookupNGMVerificationIdentityShouldUseLastResort:0 usedLastResort:0]);
  }
  else {
    id v14 = 0LL;
  }
  if ([*(id *)(a1 + 32) _isSecKeyType])
  {
    id v15 = [*(id *)(a1 + 32) _copyLookupSecVerificationIdentity];
    if (!v14) {
      goto LABEL_18;
    }
  }

  else
  {
    id v15 = 0LL;
    if (!v14) {
      goto LABEL_18;
    }
  }

  if (v9)
  {
    ((void (*)(void *, void *, void))v9[2])(v9, v14, 0LL);
    goto LABEL_16;
  }

void sub_10006F84C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = [*(id *)(a1 + 32) avoidMainQueue];
  if ((_DWORD)v6)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    uint64_t v8 = im_primary_queue(v6, v7);
    id v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10006F91C;
    block[3] = &unk_1008F7D90;
    id v12 = *(id *)(a1 + 40);
    char v13 = a2;
    id v11 = v5;
    dispatch_async(v9, block);
  }
}

uint64_t sub_10006F91C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(unsigned __int8 *)(a1 + 48),  *(void *)(a1 + 32));
}

void sub_10006F930(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fullDeviceIdentitySigner]);
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 64);
    id v9 = 0LL;
    [v4 verifySignedData:v5 matchesData:v6 forType:v7 withPublicDeviceIdentity:v3 error:&v9];
    id v8 = v9;

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
}

void sub_10006F9E4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fullDeviceIdentitySigner]);
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keyDiversifier]);
    id v9 = 0LL;
    [v4 verifySignedData:v6 matchesData:v5 withSecPublicDeviceIdentity:a2 diversifier:v7 error:&v9];
    id v8 = v9;

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

void sub_10006FAB4(id *a1)
{
  uint64_t v2 = a1 + 4;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a1[4] remoteURI]);
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 prefixedURI]);
  unsigned __int8 v5 = [v4 _appearsToBePseudonymID];
  uint64_t v6 = *v2;
  if ((v5 & 1) != 0)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 remoteURI]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 prefixedURI]);
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 pushToken]);
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue([a1[4] rateLimiter]);
  unsigned int v10 = [v9 underLimitForItem:v8];

  uint64_t v11 = OSLogHandleForIDSCategory("Encryption");
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    if (v10) {
      char v13 = @"YES";
    }
    else {
      char v13 = @"NO";
    }
    id v14 = (void *)objc_claimAutoreleasedReturnValue([a1[4] remoteURI]);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([a1[4] localURI]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([a1[4] service]);
    *(_DWORD *)buf = 138413058;
    NSErrorUserInfoKey v53 = v13;
    __int16 v54 = 2112;
    NSErrorUserInfoKey v55 = v14;
    __int16 v56 = 2112;
    __int16 v57 = v15;
    __int16 v58 = 2112;
    __int16 v59 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Missing signing verification key, need to query {underLimit: %@, remoteURI: %@, localURI: %@, service: %@}",  buf,  0x2Au);
  }

  if (os_log_shim_legacy_logging_enabled(v17))
  {
    if (v10) {
      uint64_t v18 = @"YES";
    }
    else {
      uint64_t v18 = @"NO";
    }
    char v19 = (void *)objc_claimAutoreleasedReturnValue([a1[4] remoteURI]);
    NSErrorUserInfoKey v39 = (void *)objc_claimAutoreleasedReturnValue([a1[4] localURI]);
    id v40 = (void *)objc_claimAutoreleasedReturnValue([a1[4] service]);
    BOOL v37 = v18;
    id v38 = v19;
    _IDSLogEventV( @"IDSFoundation",  @"Encryption",  @"Missing signing verification key, need to query {underLimit: %@, remoteURI: %@, localURI: %@, service: %@}");
  }

  if (!v10)
  {
    buf[0] = 0;
    if ([a1[4] _isNGMKeyType])
    {
      id v33 = (id)objc_claimAutoreleasedReturnValue([a1[4] _lookupNGMVerificationIdentityShouldUseLastResort:1 usedLastResort:buf]);
      if (v33)
      {
        id v34 = a1[7];
        if (v34)
        {
          id v35 = a1[5];
          v43[0] = _NSConcreteStackBlock;
          v43[1] = 3221225472LL;
          v43[2] = sub_1000704A0;
          v43[3] = &unk_1008F6358;
          id v45 = v34;
          id v33 = v33;
          id v44 = v33;
          [v35 performAsyncBlock:v43];

          id v36 = v45;
LABEL_22:

          goto LABEL_23;
        }
      }
    }

    else
    {
      id v33 = 0LL;
    }

    id v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSSigningErrorDomain,  8LL,  0LL,  v37,  v38,  v39,  v40));
    (*((void (**)(void))a1[6] + 2))();
    goto LABEL_22;
  }

  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([a1[4] peerIDManager]);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([a1[4] remoteURI]);
  id v22 = (void *)objc_claimAutoreleasedReturnValue([a1[4] localURI]);
  id v23 = (void *)objc_claimAutoreleasedReturnValue([a1[4] service]);
  [v20 forgetPeerTokensForURI:v21 fromURI:v22 service:v23];

  id v41 = -[IDSPeerIDQueryContext initWithSending:refresh:messaging:resultExpected:preventNewQuery:]( objc_alloc(&OBJC_CLASS___IDSPeerIDQueryContext),  "initWithSending:refresh:messaging:resultExpected:preventNewQuery:",  0LL,  0LL,  0LL,  1LL,  0LL);
  __int16 v42 = (void *)objc_claimAutoreleasedReturnValue([a1[4] peerIDManager]);
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([a1[4] remoteURI]);
  uint64_t v28 = IMSingleObjectArray(v24, v25, v26, v27);
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
  id v30 = (void *)objc_claimAutoreleasedReturnValue([a1[4] cert]);
  id v31 = (void *)objc_claimAutoreleasedReturnValue([a1[4] localURI]);
  int v32 = (void *)objc_claimAutoreleasedReturnValue([a1[4] service]);
  v46[0] = _NSConcreteStackBlock;
  v46[1] = 3221225472LL;
  v46[2] = sub_10006FFF0;
  v46[3] = &unk_1008F8698;
  v46[4] = a1[4];
  id v47 = v8;
  id v49 = a1[6];
  id v48 = a1[5];
  id v50 = a1[7];
  id v51 = a1[8];
  [v42 startQueryForURIs:v29 fromIdentity:v30 fromURI:v31 fromService:v32 context:v41 reason:@"URIVerify" completionBlock:v46];

LABEL_23:
}

void sub_10006FFF0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, int a6, void *a7, char a8, void *a9)
{
  id v42 = a2;
  id v43 = a3;
  id v15 = a4;
  id v44 = a5;
  id v16 = a7;
  id v17 = a9;
  uint64_t v18 = OSLogHandleForIDSCategory("Encryption");
  char v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    if (a6) {
      uint64_t v20 = @"YES";
    }
    else {
      uint64_t v20 = @"NO";
    }
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remoteURI]);
    id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localURI]);
    id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) service]);
    *(_DWORD *)buf = 138413058;
    *(void *)&uint8_t buf[4] = v20;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v21;
    *(_WORD *)&buf[22] = 2112;
    unint64_t v52 = (unint64_t)v22;
    __int16 v53 = 2112;
    __int16 v54 = v23;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Signing verification query completed {success: %@, remoteURI: %@, localURI: %@, service: %@}",  buf,  0x2Au);
  }

  if (os_log_shim_legacy_logging_enabled(v24))
  {
    if (a6) {
      uint64_t v25 = @"YES";
    }
    else {
      uint64_t v25 = @"NO";
    }
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remoteURI]);
    NSErrorUserInfoKey v39 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localURI]);
    id v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) service]);
    BOOL v37 = v25;
    id v38 = v26;
    _IDSLogEventV( @"IDSFoundation",  @"Encryption",  @"Signing verification query completed {success: %@, remoteURI: %@, localURI: %@, service: %@}");
  }

  char v50 = 0;
  if (objc_msgSend(*(id *)(a1 + 32), "_isNGMKeyType", v37, v38, v39, v40)) {
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _lookupNGMVerificationIdentityShouldUseLastResort:1 usedLastResort:&v50]);
  }
  else {
    uint64_t v27 = 0LL;
  }
  *(void *)buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x2020000000LL;
  unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
  else {
    id v28 = 0LL;
  }
  unint64_t v52 = (unint64_t)v28;
  if (v27 || *(void *)(*(void *)&buf[8] + 24LL))
  {
    if (v50)
    {
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rateLimiter]);
      [v29 noteItem:*(void *)(a1 + 40)];
    }

    id v30 = *(void **)(a1 + 48);
    v45[0] = _NSConcreteStackBlock;
    v45[1] = 3221225472LL;
    v45[2] = sub_100070430;
    v45[3] = &unk_1008F8670;
    id v47 = *(id *)(a1 + 64);
    id v46 = v27;
    id v48 = *(id *)(a1 + 72);
    id v49 = buf;
    [v30 performAsyncBlock:v45];

    id v31 = v47;
  }

  else
  {
    int v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _lookupEndpoint]);

    uint64_t v33 = 7LL;
    if (a6) {
      uint64_t v33 = 9LL;
    }
    if (v32) {
      uint64_t v34 = 10LL;
    }
    else {
      uint64_t v34 = v33;
    }
    id v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSSigningErrorDomain,  v34,  0LL));
    if ((a8 & 1) == 0)
    {
      id v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rateLimiter]);
      [v35 noteItem:*(void *)(a1 + 40)];
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    id v36 = *(const void **)(*(void *)&buf[8] + 24LL);
    if (v36)
    {
      CFRelease(v36);
      *(void *)(*(void *)&buf[8] + 24LL) = 0LL;
    }
  }

  _Block_object_dispose(buf, 8);
}

void sub_1000703EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_100070430(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2)
  {
    id v3 = a1 + 4;
  }

  else
  {
    uint64_t v2 = a1[6];
    if (!v2) {
      goto LABEL_6;
    }
    id v3 = (void *)(*(void *)(a1[7] + 8LL) + 24LL);
  }

  (*(void (**)(uint64_t, void, void))(v2 + 16))(v2, *v3, 0LL);
LABEL_6:
  unsigned int v4 = *(const void **)(*(void *)(a1[7] + 8LL) + 24LL);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(*(void *)(a1[7] + 8LL) + 24LL) = 0LL;
  }

uint64_t sub_1000704A0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_10007122C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_100071250(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100071260(uint64_t a1)
{
}

void sub_100071268(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  uint64_t v5 = *(void *)(a1[8] + 8LL);
  id obj = *(id *)(v5 + 40);
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v2 _legacyEncryptData:v3 withEncryptedAttributes:v4 error:&obj]);
  objc_storeStrong((id *)(v5 + 40), obj);
  uint64_t v7 = *(void *)(a1[7] + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_100071500(id *a1)
{
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_100071798;
  v21[3] = &unk_1008F7BB0;
  uint64_t v2 = a1 + 4;
  v21[4] = a1[4];
  id v22 = a1[5];
  id v23 = v2[2];
  id v24 = v2[4];
  uint64_t v3 = objc_retainBlock(v21);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*v2 publicKeyStorage]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*v2 deviceID]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 publicDeviceIdentityContainerForDeviceID:v5]);
  BOOL v7 = v6 == 0LL;

  if (v7)
  {
    uint64_t v8 = OSLogHandleForIDSCategory("Encryption");
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([a1[4] deviceID]);
      *(_DWORD *)buf = 138412290;
      uint64_t v26 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Missing device encryption keys -- querying {deviceID: %@}",  buf,  0xCu);
    }

    uint64_t v12 = os_log_shim_legacy_logging_enabled(v11);
    if ((_DWORD)v12)
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue([a1[4] deviceID]);
      _IDSLogEventV( @"IDSFoundation",  @"Encryption",  @"Missing device encryption keys -- querying {deviceID: %@}");
    }

    uint64_t v14 = im_primary_queue(v12, v13);
    id v15 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v14);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100071834;
    block[3] = &unk_1008F8490;
    void block[4] = a1[4];
    id v18 = a1[7];
    char v19 = v3;
    id v20 = a1[8];
    dispatch_async(v15, block);
  }

  else
  {
    ((void (*)(void *))v3[2])(v3);
  }
}

void sub_100071798(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  id v10 = 0LL;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v2 _legacyEncryptData:v3 withEncryptedAttributes:v4 error:&v10]);
  id v6 = v10;
  uint64_t v7 = a1[7];
  uint64_t v8 = objc_alloc(&OBJC_CLASS___IDSEncryptionMetadata);
  id v9 = -[IDSEncryptionMetadata initWithMPIdentityIdentifier:]( v8,  "initWithMPIdentityIdentifier:",  IDSMPLegacyIdentityIdentifier);
  (*(void (**)(uint64_t, void *, id, IDSEncryptionMetadata *))(v7 + 16))(v7, v5, v6, v9);
}

void sub_100071834(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountController]);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1000718E4;
  v4[3] = &unk_1008F8468;
  uint64_t v3 = *(void **)(a1 + 40);
  void v4[4] = *(void *)(a1 + 32);
  id v5 = v3;
  id v6 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  [v2 issueDependentIDQueriesWithCompletionBlock:v4];
}

void sub_1000718E4( uint64_t a1, void *a2, void *a3, void *a4, void *a5, int a6, void *a7, uint64_t a8, void *a9)
{
  id v15 = a2;
  id v16 = a3;
  id v17 = a4;
  id v18 = a5;
  id v19 = a7;
  id v20 = a9;
  uint64_t v21 = OSLogHandleForIDSCategory("Encryption");
  id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v23 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceID]);
    id v24 = (void *)v23;
    uint64_t v25 = @"NO";
    if (a6) {
      uint64_t v25 = @"YES";
    }
    *(_DWORD *)buf = 138412546;
    id v31 = v25;
    __int16 v32 = 2112;
    uint64_t v33 = v23;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Device encryption query completed {success: %@, deviceID: %@}",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v26))
  {
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceID]);
    _IDSLogEventV( @"IDSFoundation",  @"Encryption",  @"Device encryption query completed {success: %@, deviceID: %@}");
  }

  if (a6)
  {
    [*(id *)(a1 + 40) performAsyncBlock:*(void *)(a1 + 48)];
  }

  else
  {
    uint64_t v27 = *(void *)(a1 + 56);
    id v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSEncryptionErrorDomain,  1LL,  0LL));
    (*(void (**)(uint64_t, void, void *, void))(v27 + 16))(v27, 0LL, v28, 0LL);
  }
}

void sub_100071C88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100071CAC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v6 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id obj = *(id *)(v6 + 40);
  uint64_t v7 = objc_claimAutoreleasedReturnValue([v2 _decryptData:v3 usingIdentifier:v4 isRetry:v5 error:&obj]);
  objc_storeStrong((id *)(v6 + 40), obj);
  uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

void sub_100071E20(id *a1)
{
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_1000720C0;
  v21[3] = &unk_1008F8788;
  uint64_t v2 = a1 + 4;
  v21[4] = a1[4];
  id v22 = a1[5];
  id v23 = v2[2];
  char v25 = *((_BYTE *)v2 + 40);
  id v24 = v2[4];
  uint64_t v3 = objc_retainBlock(v21);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*v2 publicKeyStorage]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*v2 deviceID]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 publicDeviceIdentityContainerForDeviceID:v5]);
  BOOL v7 = v6 == 0LL;

  if (v7)
  {
    uint64_t v8 = OSLogHandleForIDSCategory("Encryption");
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([a1[4] deviceID]);
      *(_DWORD *)buf = 138412290;
      uint64_t v27 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Missing device decryption keys -- querying {deviceID: %@}",  buf,  0xCu);
    }

    uint64_t v12 = os_log_shim_legacy_logging_enabled(v11);
    if ((_DWORD)v12)
    {
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([a1[4] deviceID]);
      _IDSLogEventV( @"IDSFoundation",  @"Encryption",  @"Missing device decryption keys -- querying {deviceID: %@}");
    }

    uint64_t v14 = im_primary_queue(v12, v13);
    uint64_t v15 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v14);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100072340;
    block[3] = &unk_1008F8490;
    void block[4] = a1[4];
    id v18 = a1[7];
    id v19 = v3;
    id v20 = a1[8];
    dispatch_async(v15, block);
  }

  else
  {
    ((void (*)(void *))v3[2])(v3);
  }
}

void sub_1000720C0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _decryptData:*(void *)(a1 + 40) usingIdentifier:*(void *)(a1 + 48) isRetry:*(unsigned __int8 *)(a1 + 64)]);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10007214C;
  v3[3] = &unk_1008F8760;
  id v4 = *(id *)(a1 + 56);
  [v2 registerResultBlock:v3];
}

void sub_10007214C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___IDSDecryptionMetadata);
  if ([v3 state] == (id)1)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    uint64_t v6 = 0LL;
    BOOL v7 = 0LL;
  }

  else
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 value]);
    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([v8 decryptedData]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v8 encryptedAttributes]);
    uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 commitBlock]);
    id v10 = (void *)v9;
    if (v9)
    {
      id v16 = 0LL;
      char v11 = (*(uint64_t (**)(uint64_t, id *))(v9 + 16))(v9, &v16);
      id v12 = v16;
      if ((v11 & 1) == 0)
      {
        uint64_t v13 = OSLogHandleForIDSCategory("Encryption");
        uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          id v18 = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Error committing replay state for device ID decryption { error: %@ }",  buf,  0xCu);
        }

        if (os_log_shim_legacy_logging_enabled(v15)) {
          _IDSLogEventV( @"IDSFoundation",  @"Encryption",  @"Error committing replay state for device ID decryption { error: %@ }");
        }
      }
    }

    uint64_t v5 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))(*(void *)(a1 + 32));
}

void sub_100072340(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rateLimiter]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceID]);
  unsigned int v4 = [v2 underLimitForItem:v3];

  if (v4)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountController]);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1000724A8;
    v10[3] = &unk_1008F8468;
    uint64_t v6 = *(void **)(a1 + 40);
    void v10[4] = *(void *)(a1 + 32);
    id v11 = v6;
    id v12 = *(id *)(a1 + 48);
    id v13 = *(id *)(a1 + 56);
    [v5 issueDependentIDQueriesWithCompletionBlock:v10];
  }

  else
  {
    uint64_t v7 = *(void *)(a1 + 56);
    id v9 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSDecryptionErrorDomain,  17LL,  0LL));
    uint64_t v8 = objc_alloc_init(&OBJC_CLASS___IDSDecryptionMetadata);
    (*(void (**)(uint64_t, void, void, id, IDSDecryptionMetadata *))(v7 + 16))(v7, 0LL, 0LL, v9, v8);
  }

void sub_1000724A8(uint64_t a1, void *a2, void *a3, void *a4, void *a5, int a6, void *a7, char a8, void *a9)
{
  id v16 = a2;
  id v42 = a3;
  id v43 = a4;
  id v44 = a5;
  id v17 = a7;
  id v18 = a9;
  id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) publicKeyStorage]);
  id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceID]);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v19 publicDeviceIdentityContainerForDeviceID:v20]);

  uint64_t v22 = OSLogHandleForIDSCategory("Encryption");
  id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v24 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceID]);
    char v25 = (void *)v24;
    uint64_t v26 = @"NO";
    if (v21) {
      uint64_t v27 = @"YES";
    }
    else {
      uint64_t v27 = @"NO";
    }
    *(_DWORD *)buf = 138412802;
    if (a6) {
      uint64_t v26 = @"YES";
    }
    id v48 = v26;
    __int16 v49 = 2112;
    char v50 = v27;
    __int16 v51 = 2112;
    uint64_t v52 = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Device decryption query completed {success: %@, hasKeyAfterQuery: %@, deviceID: %@}",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v28))
  {
    if (a6) {
      uint64_t v29 = @"YES";
    }
    else {
      uint64_t v29 = @"NO";
    }
    if (v21) {
      id v30 = @"YES";
    }
    else {
      id v30 = @"NO";
    }
    id v40 = v30;
    id v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceID]);
    NSErrorUserInfoKey v39 = v29;
    _IDSLogEventV( @"IDSFoundation",  @"Encryption",  @"Device decryption query completed {success: %@, hasKeyAfterQuery: %@, deviceID: %@}");
  }

  if (a6 && v21)
  {
    [*(id *)(a1 + 40) performAsyncBlock:*(void *)(a1 + 48)];
  }

  else
  {
    if ((a8 & 1) == 0)
    {
      id v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rateLimiter]);
      __int16 v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceID]);
      [v31 noteItem:v32];
    }

    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKey:", v16, v39, v40, v41, v42, v43, v44));

    if (v33)
    {
      NSErrorUserInfoKey v45 = NSUnderlyingErrorKey;
      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKey:v16]);
      id v46 = v34;
      id v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v46,  &v45,  1LL));
    }

    else
    {
      id v35 = 0LL;
    }

    uint64_t v36 = *(void *)(a1 + 56);
    BOOL v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSDecryptionErrorDomain,  2LL,  v35));
    id v38 = objc_alloc_init(&OBJC_CLASS___IDSDecryptionMetadata);
    (*(void (**)(uint64_t, void, void, void *, IDSDecryptionMetadata *))(v36 + 16))( v36,  0LL,  0LL,  v37,  v38);
  }
}

LABEL_149:
LABEL_150:
  v226 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v15, "sharedState"));
  [v226 setInviteTimeout:30.0];

  v193 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v15, "sharedState"));
  -[dispatch_queue_attr_s setEndSessionTimeout:](v193, "setEndSessionTimeout:", 2.0);
LABEL_151:

  v227 = [v376 integerValue];
  v228 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v15, "sharedState"));
  [v228 setTransportType:v227];

  if ([v384 unsignedIntegerValue]) {
    v229 = (uint64_t)[v384 unsignedIntegerValue];
  }
  else {
    v229 = 2LL;
  }
  v230 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v15, "sharedState"));
  [v230 setConnectionCountHint:v229];

  v15->_reason = 0;
  v231 = OSLogHandleForTransportCategory("IDSDSession");
  v232 = (os_log_s *)objc_claimAutoreleasedReturnValue(v231);
  if (os_log_type_enabled(v232, OS_LOG_TYPE_DEFAULT))
  {
    v233 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v15, "sharedState"));
    v234 = (_UNKNOWN **)[v233 connectionCountHint];
    v235 = (const __CFString *)[v384 unsignedIntegerValue];
    *(_DWORD *)buf = 134218240;
    v405 = v234;
    v406 = 2048;
    v407 = v235;
    _os_log_impl( (void *)&_mh_execute_header,  v232,  OS_LOG_TYPE_DEFAULT,  " self.sharedState.connectionCountHint: %lu, [connectionCountHint unsignedIntegerValue]: %lu",  buf,  0x16u);
  }

  v237 = os_log_shim_legacy_logging_enabled(v236);
  if ((_DWORD)v237)
  {
    if (_IDSShouldLogTransport(v237))
    {
      v238 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v15, "sharedState"));
      *(void *)&v370 = [v238 connectionCountHint];
      *((void *)&v370 + 1) = [v384 unsignedIntegerValue];
      _IDSLogTransport( @"IDSDSession",  @"IDS",  @" self.sharedState.connectionCountHint: %lu, [connectionCountHint unsignedIntegerValue]: %lu");

      if (_IDSShouldLog(0LL, @"IDSDSession"))
      {
        v239 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v15, "sharedState", v370));
        *(void *)&v370 = [v239 connectionCountHint];
        *((void *)&v370 + 1) = [v384 unsignedIntegerValue];
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @" self.sharedState.connectionCountHint: %lu, [connectionCountHint unsignedIntegerValue]: %lu");
      }
    }
  }

  v240 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v15, "sharedState", v370));
  v241 = (void *)objc_claimAutoreleasedReturnValue([v240 serviceName]);
  if ((_DWORD)v21) {
    v242 = 4LL;
  }
  else {
    v242 = 8LL;
  }
  DLCSessionBeginSession(v241, @"IDSDSession", v242, -[IDSDSession _loggingFlags](v15, "_loggingFlags"));

  v397 = 0LL;
  IMGetConferenceSettings(0LL, &v397, 0LL, 0LL, 0LL);
  v374 = v397;
  v243 = OSLogHandleForIDSCategory("IDSDSession");
  v244 = (os_log_s *)objc_claimAutoreleasedReturnValue(v243);
  if (os_log_type_enabled(v244, OS_LOG_TYPE_DEFAULT))
  {
    v245 = (_TtC17identityservicesd45IDSGroupDefaultRootMaterialExchangeController *)-[__CFString count](v391, "count");
    v246 = @"incoming";
    *(_DWORD *)buf = 138413058;
    if ((_DWORD)v21) {
      v246 = @"outgoing";
    }
    v405 = (_UNKNOWN **)v246;
    v406 = 2112;
    v407 = v388;
    v408 = 2048;
    v409 = v245;
    v410 = 2112;
    v411 = v391;
    _os_log_impl( (void *)&_mh_execute_header,  v244,  OS_LOG_TYPE_DEFAULT,  "Created session (%@) %@ with %lu destinations %@",  buf,  0x2Au);
  }

  v247 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v15, "sharedState"));
  v248 = (void *)objc_claimAutoreleasedReturnValue([v247 serviceName]);
  if ((_DWORD)v21) {
    v249 = @"outgoing";
  }
  else {
    v249 = @"incoming";
  }
  -[__CFString count](v391, "count");
  *(void *)&v370 = v249;
  *((void *)&v370 + 1) = v388;
  DLCSessionLogWithLevel( v248,  @"IDSDSession",  0LL,  0LL,  @"Created session (%@) %@ with %lu destinations %@");

  v250 = -[NSString initWithString:](objc_alloc(&OBJC_CLASS___NSString), "initWithString:", v390);
  serviceIdentifier = v15->_serviceIdentifier;
  v15->_serviceIdentifier = v250;

  v375 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString componentsSeparatedByString:](v388, "componentsSeparatedByString:", @"-"));
  theDict = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionarySetValue(theDict, @"state", &off_100946948);
  v252 = (void *)objc_claimAutoreleasedReturnValue( -[NSString substringFromIndex:]( v15->_serviceIdentifier,  "substringFromIndex:",  [@"com.apple.private.alloy." length]));
  if (v252) {
    CFDictionarySetValue(theDict, @"serviceName", v252);
  }

  v253 = (void *)objc_claimAutoreleasedReturnValue([v375 objectAtIndexedSubscript:0]);
  if (v253) {
    CFDictionarySetValue(theDict, @"sessionID", v253);
  }

  v254 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v21));
  if (v254) {
    CFDictionarySetValue(theDict, @"isInitiator", v254);
  }

  IDSPowerLogDictionary(@"IDSDSession", theDict);
  if ((v21 & 1) == 0)
  {
    v255 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v15, "sharedState"));
    [v255 setInvitationTimer];

    v256 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v15, "sharedState"));
    [v256 setState:2];

    if (qword_1009BE930 == -1)
    {
LABEL_182:
      v15->_inviteRecvTime = *(double *)&qword_1009BE938 * (double)mach_continuous_time();
      goto LABEL_184;
    }
}

      v142 = OSLogHandleForIDSCategory("IDSDaemon");
      v143 = (os_log_s *)objc_claimAutoreleasedReturnValue(v142);
      if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
      {
        v144 = (char *)(id)objc_claimAutoreleasedReturnValue([v116 messageUUID]);
        v145 = (char *)(id)objc_claimAutoreleasedReturnValue([v116 destinations]);
        *(_DWORD *)buf = 138412802;
        v302 = v144;
        v303 = 2112;
        v304 = v145;
        v305 = 2112;
        v306 = (char *)keyb;
        _os_log_impl( (void *)&_mh_execute_header,  v143,  OS_LOG_TYPE_DEFAULT,  "Proxy message original parameters {messageUUID: %@, destinations: %@, targettingAccount: %@}",  buf,  0x20u);
      }

      if (os_log_shim_legacy_logging_enabled(v146)
        && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        v147 = (char *)objc_claimAutoreleasedReturnValue([v116 messageUUID]);
        v170 = (id)objc_claimAutoreleasedReturnValue([v116 destinations]);
        v175 = keyb;
        v167 = v147;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Proxy message original parameters {messageUUID: %@, destinations: %@, targettingAccount: %@}");
      }

      __int16 v148 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
      v251 = 0u;
      v252 = 0u;
      v249 = 0u;
      v250 = 0u;
      v149 = (void *)objc_claimAutoreleasedReturnValue([v116 destinations]);
      v150 = (void *)objc_claimAutoreleasedReturnValue([v149 destinationURIs]);

      v151 = [v150 countByEnumeratingWithState:&v249 objects:v297 count:16];
      if (v151)
      {
        v152 = *(void *)v250;
        v153 = IDSDefaultPairedDevice;
        do
        {
          for (j = 0LL; j != v151; j = (char *)j + 1)
          {
            if (*(void *)v250 != v152) {
              objc_enumerationMutation(v150);
            }
            v155 = *(void **)(*((void *)&v249 + 1) + 8LL * (void)j);
          }

          v151 = [v150 countByEnumeratingWithState:&v249 objects:v297 count:16];
        }

        while (v151);
      }

      v156 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDestination destinationWithStrings:]( &OBJC_CLASS___IDSDestination,  "destinationWithStrings:",  v148));
      [v116 setDestinations:v156];

      v157 = (void *)objc_claimAutoreleasedReturnValue([keyb uniqueID]);
      [v116 setAccountUUID:v157];

      [keyb sendMessageWithSendParameters:v116 willSendBlock:&stru_100902350 completionBlock:&stru_100902370];
      goto LABEL_164;
    }

    if (v80 != 229)
    {
LABEL_117:
      uint64_t v111 = OSLogHandleForIDSCategory("Warning");
      uint64_t v112 = (os_log_s *)objc_claimAutoreleasedReturnValue(v111);
      if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
      {
        uint64_t v113 = (char *)[v83 unsignedIntegerValue];
        *(_DWORD *)buf = 136315394;
        v302 = "-[IDSDaemon(Messaging) _processIncomingLocalMessage:topic:command:deviceID:btUUID:context:storedGUID:prio"
               "rity:connectionType:didWakeHint:]";
        v303 = 2048;
        v304 = v113;
        _os_log_impl( (void *)&_mh_execute_header,  v112,  OS_LOG_TYPE_ERROR,  "%s: Unknown incoming local message type received, %lu",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v114))
      {
        v171 = [v210 unsignedIntegerValue];
        _IDSWarnV(@"IDSFoundation", @"%s: Unknown incoming local message type received, %lu");
        v172 = objc_msgSend( v210,  "unsignedIntegerValue",  "-[IDSDaemon(Messaging) _processIncomingLocalMessage:topic:command:deviceID:btUUID:context:storedGUID:pr iority:connectionType:didWakeHint:]",  v171);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%s: Unknown incoming local message type received, %lu");
        objc_msgSend( v210,  "unsignedIntegerValue",  "-[IDSDaemon(Messaging) _processIncomingLocalMessage:topic:command:deviceID:btUUID:context:storedGUID:priority: connectionType:didWakeHint:]",  v172);
        _IDSLogTransport(@"Warning", @"IDS", @"%s: Unknown incoming local message type received, %lu");
      }

LABEL_243:
    dispatch_once(&qword_1009BE930, &stru_1008F91C0);
    goto LABEL_182;
  }

  if ((v380 & 1) != 0)
  {
    if (!v15->_startedAsUPlusOneSession) {
      goto LABEL_184;
    }
    if (qword_1009BE930 == -1) {
      goto LABEL_182;
    }
    goto LABEL_243;
  }

  v257 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v15, "sharedState"));
  [v257 setState:1];

LABEL_184:
  startedAsUPlusOneSession = v15->_startedAsUPlusOneSession;
  v259 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v15, "sharedState"));
  [v259 setIsInUPlusOneMode:startedAsUPlusOneSession];

  v260 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDSessionController sharedInstance](&OBJC_CLASS___IDSDSessionController, "sharedInstance"));
  [v260 updateCriticalReliabilityState];

  v15->_socketDescriptor = -1;
  v261 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  extraConnections = v15->_extraConnections;
  v15->_extraConnections = v261;

  v263 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  participantIDToAVCBlob = v15->_participantIDToAVCBlob;
  v15->_participantIDToAVCBlob = v263;

  v265 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  participantIDToTypeToEncryptedIDSContextBlobs = v15->_participantIDToTypeToEncryptedIDSContextBlobs;
  v15->_participantIDToTypeToEncryptedIDSContextBlobs = v265;

  v15->_linkProtocol = 2LL;
  v267 = IMGetDomainValueForKey(@"com.apple.ids", @"QuickRelayLinkProtocol");
  v382 = (void *)objc_claimAutoreleasedReturnValue(v267);
  if (v382) {
    -[IDSDSession _setLinkProtocol:](v15, "_setLinkProtocol:", v382);
  }
  if (!v380) {
    goto LABEL_211;
  }
  v268 = objc_claimAutoreleasedReturnValue(+[NSMutableData data](&OBJC_CLASS___NSMutableData, "data"));
  sessionInfoMetauint64_t Data = v15->_sessionInfoMetaData;
  v15->_sessionInfoMetauint64_t Data = (NSMutableData *)v268;

  v270 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v15, "sharedState"));
  [v270 setSharedSession:1];

  v271 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v15, "sharedState"));
  [v271 setUseQRDirectly:1];

  v272 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v15, "sharedState"));
  v273 = (void *)objc_claimAutoreleasedReturnValue([v272 uniqueID]);
  -[IDSDSession openSocketToDevice:](v15, "openSocketToDevice:", v273);

  if (v15->_isLightweightParticipant)
  {
    v274 = OSLogHandleForTransportCategory("IDSDSession");
    v275 = (os_log_s *)objc_claimAutoreleasedReturnValue(v274);
    if (os_log_type_enabled(v275, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v275,  OS_LOG_TYPE_DEFAULT,  "Skip IDSClientChannel because this is a lighweight participant.",  buf,  2u);
    }

    v277 = os_log_shim_legacy_logging_enabled(v276);
    if ((_DWORD)v277)
    {
      if (_IDSShouldLogTransport(v277))
      {
        _IDSLogTransport( @"IDSDSession",  @"IDS",  @"Skip IDSClientChannel because this is a lighweight participant.");
        if (_IDSShouldLog(0LL, @"IDSDSession")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Skip IDSClientChannel because this is a lighweight participant.");
        }
      }
    }
  }

  else
  {
    -[IDSDSession registerClientChannel](v15, "registerClientChannel");
  }

  if (v15->_multiplexerEnabled) {
    -[IDSDSession registerMultiplexerTransport](v15, "registerMultiplexerTransport");
  }
  v278 = objc_claimAutoreleasedReturnValue([v14 objectForKey:kIDSQRAllocateKey_Reason]);
  qrReason = v15->_qrReason;
  v15->_qrReason = (NSNumber *)v278;

  v280 = objc_claimAutoreleasedReturnValue([v14 objectForKey:kIDSQRAllocateKey_QRError]);
  qrError = v15->_qrError;
  v15->_qrError = (NSNumber *)v280;

  v282 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession accountController](v15, "accountController"));
  v283 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v15, "sharedState"));
  v284 = (void *)objc_claimAutoreleasedReturnValue([v283 accountID]);
  v285 = (void *)objc_claimAutoreleasedReturnValue([v282 accountWithUniqueID:v284]);
  v286 = (void *)objc_claimAutoreleasedReturnValue([v285 primaryRegistration]);
  v287 = (void *)objc_claimAutoreleasedReturnValue([v286 pushToken]);
  v288 = (void *)objc_claimAutoreleasedReturnValue([v385 identifier]);
  v381 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPushToken pushTokenWithData:withServiceLoggingHint:]( &OBJC_CLASS___IDSPushToken,  "pushTokenWithData:withServiceLoggingHint:",  v287,  v288));

  if (v381)
  {
    v289 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession groupStatusNotificationController](v15, "groupStatusNotificationController"));
    v290 = (void *)objc_claimAutoreleasedReturnValue([v289 queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000767AC;
    block[3] = &unk_1008F6010;
    v291 = v15;
    v396 = v291;
    v292 = v290;
    v293 = dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT,  QOS_CLASS_USER_INITIATED,  0,  block);
    dispatch_async(v292, v293);

    v294 = OSLogHandleForTransportCategory("IDSDSession");
    v295 = (os_log_s *)objc_claimAutoreleasedReturnValue(v294);
    if (os_log_type_enabled(v295, OS_LOG_TYPE_DEFAULT))
    {
      v296 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v291, "sharedState"));
      v297 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue([v296 destinations]);
      *(_DWORD *)buf = 138412290;
      v405 = v297;
      _os_log_impl((void *)&_mh_execute_header, v295, OS_LOG_TYPE_DEFAULT, "Destinations are %@", buf, 0xCu);
    }

    v299 = os_log_shim_legacy_logging_enabled(v298);
    if ((_DWORD)v299)
    {
      if (_IDSShouldLogTransport(v299))
      {
        v300 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v291, "sharedState"));
        *(void *)&v370 = objc_claimAutoreleasedReturnValue([v300 destinations]);
        _IDSLogTransport(@"IDSDSession", @"IDS", @"Destinations are %@");

        if (_IDSShouldLog(0LL, @"IDSDSession"))
        {
          v301 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v291, "sharedState", (void)v370));
          *(void *)&v370 = objc_claimAutoreleasedReturnValue([v301 destinations]);
          _IDSLogV(0LL, @"IDSFoundation", @"IDSDSession", @"Destinations are %@");
        }
      }
    }

    v302 = OSLogHandleForTransportCategory("IDSDSession");
    v303 = (os_log_s *)objc_claimAutoreleasedReturnValue(v302);
    if (os_log_type_enabled(v303, OS_LOG_TYPE_DEFAULT))
    {
      v304 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v291, "sharedState"));
      v305 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue([v304 destinationsLightweightStatus]);
      *(_DWORD *)buf = 138412290;
      v405 = v305;
      _os_log_impl( (void *)&_mh_execute_header,  v303,  OS_LOG_TYPE_DEFAULT,  "Lightweight status per destination: %@",  buf,  0xCu);
    }

    v307 = os_log_shim_legacy_logging_enabled(v306);
    if ((_DWORD)v307)
    {
      if (_IDSShouldLogTransport(v307))
      {
        v308 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v291, "sharedState"));
        *(void *)&v370 = objc_claimAutoreleasedReturnValue([v308 destinationsLightweightStatus]);
        _IDSLogTransport(@"IDSDSession", @"IDS", @"Lightweight status per destination: %@");

        if (_IDSShouldLog(0LL, @"IDSDSession"))
        {
          v309 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v291, "sharedState", (void)v370));
          *(void *)&v370 = objc_claimAutoreleasedReturnValue([v309 destinationsLightweightStatus]);
          _IDSLogV(0LL, @"IDSFoundation", @"IDSDSession", @"Lightweight status per destination: %@");
        }
      }
    }

    v310 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance",  (void)v370));
    v311 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v291, "sharedState"));
    v312 = (void *)objc_claimAutoreleasedReturnValue([v311 accountID]);
    v313 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v291, "sharedState"));
    v314 = (void *)objc_claimAutoreleasedReturnValue([v313 fromURI]);
    v315 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v291, "sharedState"));
    v316 = (void *)objc_claimAutoreleasedReturnValue([v315 groupID]);
    [v310 setAccount:v312 fromURI:v314 forGroup:v316];

    v319 = im_primary_queue(v317, v318);
    v320 = (void *)objc_claimAutoreleasedReturnValue(v319);
    v392[0] = _NSConcreteStackBlock;
    v392[1] = 3221225472LL;
    v392[2] = sub_100076920;
    v392[3] = &unk_1008F5F80;
    v393 = v291;
    v321 = v381;
    v394 = v321;
    v322 = v320;
    v323 = dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT,  QOS_CLASS_USER_INITIATED,  0,  v392);
    dispatch_async(v322, v323);

LABEL_211:
    v324 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKey:IDSGroupSessionWantDidInitCallbackKey]);
    v325 = [v324 BOOLValue];

    if (v325)
    {
      v326 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
      -[IMMessageContext setShouldBoost:](v326, "setShouldBoost:", 1LL);
      v327 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
      v328 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v15, "sharedState"));
      v329 = (void *)objc_claimAutoreleasedReturnValue([v328 pushTopic]);
      v330 = (void *)objc_claimAutoreleasedReturnValue( [v327 broadcasterForTopic:v329 entitlement:kIDSSessionEntitlement command:0 messageContext:v326]);

      v331 = OSLogHandleForTransportCategory("IDSDSession");
      v332 = (os_log_s *)objc_claimAutoreleasedReturnValue(v331);
      if (os_log_type_enabled(v332, OS_LOG_TYPE_DEFAULT))
      {
        v333 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v15, "sharedState"));
        v334 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue([v333 uniqueID]);
        *(_DWORD *)buf = 138412290;
        v405 = v334;
        _os_log_impl( (void *)&_mh_execute_header,  v332,  OS_LOG_TYPE_DEFAULT,  "Broadcasting did initialize group session: %@",  buf,  0xCu);
      }

      v336 = os_log_shim_legacy_logging_enabled(v335);
      if ((_DWORD)v336)
      {
        if (_IDSShouldLogTransport(v336))
        {
          v337 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v15, "sharedState"));
          *(void *)&v370 = objc_claimAutoreleasedReturnValue([v337 uniqueID]);
          _IDSLogTransport(@"IDSDSession", @"IDS", @"Broadcasting did initialize group session: %@");

          if (_IDSShouldLog(0LL, @"IDSDSession"))
          {
            v338 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v15, "sharedState", (void)v370));
            *(void *)&v370 = objc_claimAutoreleasedReturnValue([v338 uniqueID]);
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Broadcasting did initialize group session: %@");
          }
        }
      }

      v339 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v15, "sharedState", (void)v370));
      v340 = (void *)objc_claimAutoreleasedReturnValue([v339 uniqueID]);
      [v330 groupSessionDidInitialize:v340 error:0];
      v341 = 1;
      goto LABEL_219;
    }

    v341 = 1;
    goto LABEL_228;
  }

  v342 = OSLogHandleForTransportCategory("IDSDSession");
  v343 = (os_log_s *)objc_claimAutoreleasedReturnValue(v342);
  if (os_log_type_enabled(v343, OS_LOG_TYPE_DEFAULT))
  {
    v344 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v15, "sharedState"));
    v345 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue([v344 groupID]);
    v346 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v15, "sharedState"));
    v347 = (__CFString *)objc_claimAutoreleasedReturnValue([v346 serviceName]);
    *(_DWORD *)buf = 138412546;
    v405 = v345;
    v406 = 2112;
    v407 = v347;
    _os_log_impl( (void *)&_mh_execute_header,  v343,  OS_LOG_TYPE_DEFAULT,  "Could not create session: %@ because failed to get this device push token for the service: %@",  buf,  0x16u);
  }

  v349 = os_log_shim_legacy_logging_enabled(v348);
  if ((_DWORD)v349)
  {
    if (_IDSShouldLogTransport(v349))
    {
      v350 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v15, "sharedState"));
      v351 = (void *)objc_claimAutoreleasedReturnValue([v350 groupID]);
      v352 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v15, "sharedState"));
      *(void *)&v370 = v351;
      *((void *)&v370 + 1) = objc_claimAutoreleasedReturnValue([v352 serviceName]);
      _IDSLogTransport( @"IDSDSession",  @"IDS",  @"Could not create session: %@ because failed to get this device push token for the service: %@");

      if (_IDSShouldLog(0LL, @"IDSDSession"))
      {
        v326 = (IMMessageContext *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v15, "sharedState", v351, *((void *)&v370 + 1)));
        v330 = (void *)objc_claimAutoreleasedReturnValue(-[IMMessageContext groupID](v326, "groupID"));
        v339 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](v15, "sharedState"));
        v340 = (void *)objc_claimAutoreleasedReturnValue([v339 serviceName]);
        *(void *)&v370 = v330;
        *((void *)&v370 + 1) = v340;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Could not create session: %@ because failed to get this device push token for the service: %@");
        v341 = 0;
LABEL_219:

        goto LABEL_228;
      }
    }
  }

  v341 = 0;
LABEL_228:

  if ((v341 & 1) == 0)
  {
    v353 = 0LL;
    goto LABEL_231;
  }

LABEL_229:
  -[IDSDSession submitAWDMetricsForIDSSessionStarted](v15, "submitAWDMetricsForIDSSessionStarted", v370);
  v353 = v15;
LABEL_231:

  return v353;
}

double sub_1000766FC()
{
  if (qword_1009BE930 != -1) {
    dispatch_once(&qword_1009BE930, &stru_1008F91C0);
  }
  return *(double *)&qword_1009BE938 * (double)mach_continuous_time();
}

void sub_100076748(void *a1, dispatch_qos_class_t a2, void *a3)
{
  uint64_t v5 = a1;
  id v6 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, a2, 0, a3);
  dispatch_async(v5, v6);
}

void sub_1000767AC(uint64_t a1)
{
  id v15 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) groupStatusNotificationController]);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v14 destinations]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v13 allObjects]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v12 groupID]);
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 uniqueID]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 fromURI]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountController]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 accountID]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 accountWithUniqueID:v10]);
  [v15 pushTokenLookup:v2 forGroup:v3 sessionID:v5 fromURI:v7 account:v11 completionBlock:0];
}

id sub_100076920(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _generateKeys:*(void *)(a1 + 40)];
}

void sub_1000786F0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(unsigned __int8 *)(a1 + 40);
    int v5 = *(unsigned __int8 *)(a1 + 41);
    *(_DWORD *)buf = 138412802;
    uint64_t v9 = v3;
    __int16 v10 = 1024;
    int v11 = v4;
    __int16 v12 = 1024;
    int v13 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "<%@> _lightweightParticipantSync: generationCounterLSB: %u, currentGenerationCounterLSB: %u, request up-to-date li ghtweight participants",  buf,  0x18u);
  }

  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  &off_100946978,  IDSGlobalLinkOptionSessionInfoRequestTypeKey,  0LL));
  [v6 requestSessionInfoWithOptions:v7];
}

void sub_100078DE4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  [v6 setVerboseFunctionalLogging:*(unsigned __int8 *)(*(void *)(a1 + 32) + 601)];
  [v6 setVerbosePerformanceLogging:*(unsigned __int8 *)(*(void *)(a1 + 32) + 602)];
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 description]);
  uint64_t v8 = OSLogHandleForTransportCategory("IDSDSession");
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 96LL);
    *(_DWORD *)buf = 138412546;
    NSErrorUserInfoKey v55 = v7;
    __int16 v56 = 2048;
    uint64_t v57 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Client channel connected %@ (connections claimed %lu)",  buf,  0x16u);
  }

  uint64_t v12 = os_log_shim_legacy_logging_enabled(v11);
  if ((_DWORD)v12)
  {
    if (_IDSShouldLogTransport(v12))
    {
      id v46 = v7;
      uint64_t v47 = *(void *)(*(void *)(a1 + 32) + 96LL);
      _IDSLogTransport( @"IDSDSession",  @"IDS",  @"Client channel connected %@ (connections claimed %lu)");
      if (_IDSShouldLog(0LL, @"IDSDSession"))
      {
        id v46 = v7;
        uint64_t v47 = *(void *)(*(void *)(a1 + 32) + 96LL);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Client channel connected %@ (connections claimed %lu)");
      }
    }
  }

  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 896), "clientChannelConnected", v46, v47);
  int v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  if ([v14 clientType] == (id)1)
  {
LABEL_11:

LABEL_12:
    goto LABEL_13;
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  if ([v15 clientType] == (id)5)
  {

    goto LABEL_11;
  }

  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  BOOL v29 = [v28 clientType] == (id)6;

  if (v29)
  {
LABEL_13:
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    if ([v21 clientType] != (id)1)
    {
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
      if ([v22 clientType] != (id)5)
      {
        id v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
        BOOL v39 = [v38 clientType] == (id)6;

        if (!v39)
        {
LABEL_14:
          v51[0] = _NSConcreteStackBlock;
          v51[1] = 3221225472LL;
          v51[2] = sub_100079404;
          v51[3] = &unk_1008F8800;
          v51[4] = *(void *)(a1 + 32);
          id v16 = v6;
          id v52 = v16;
          IDSTransportThreadAddBlock(v51, v17);
          id v18 = (void *)objc_claimAutoreleasedReturnValue(+[IMLockdownManager sharedInstance](&OBJC_CLASS___IMLockdownManager, "sharedInstance"));
          unsigned int v19 = [v18 isInternalInstall];

          id v20 = &v52;
          if (v19) {
            [*(id *)(a1 + 32) _checkAndRunClientChannelTests:v16];
          }
          goto LABEL_16;
        }

id sub_1000793F8(uint64_t a1)
{
  return [*(id *)(a1 + 32) endSessionWithReason:20];
}

void *sub_100079404(void *result, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v2 = result;
    uint64_t v3 = result[4];
    int v4 = *(void **)(v3 + 72);
    if (v4)
    {
      id v5 = (void *)v2[5];
      id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 cachedDataForClient]);
      [v5 setCachedDataForClient:v6];

      uint64_t v3 = v2[4];
    }

    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 88));
    objc_storeStrong((id *)(v2[4] + 72LL), (id)v2[5]);
    os_unfair_lock_unlock((os_unfair_lock_t)(v2[4] + 88LL));
    uint64_t v7 = objc_claimAutoreleasedReturnValue([(id)v2[5] uuid]);
    uint64_t v8 = v2[4];
    uint64_t v9 = *(void **)(v8 + 80);
    *(void *)(v8 + 80) = v7;

    [(id)v2[4] _connectQRDirectlyToClientChannel:v2[5]];
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([(id)v2[4] utunController]);
    id v11 = [(id)v2[5] clientUniquePID];
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([(id)v2[4] sharedState]);
    int v13 = (void *)objc_claimAutoreleasedReturnValue([v12 uniqueID]);
    objc_msgSend(v10, "onTransportThread_setClientUniquePID:sessionID:", v11, v13);

    [(id)v2[4] _checkAndSendCachedDataForClient:v2[5]];
    return [(id)v2[5] writePacketBuffer:0 metaData:0 metadataSize:0 moreComing:0];
  }

  return result;
}

void *sub_10007951C(void *result, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v2 = result;
    uint64_t v3 = result[4];
    if (*(_BYTE *)(v3 + 48))
    {
      if (*(void *)(v3 + 72))
      {
        int v4 = (void *)v2[5];
        id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v3 + 72) cachedDataForClient]);
        [v4 setCachedDataForClient:v5];

        uint64_t v3 = v2[4];
      }

      os_unfair_lock_lock((os_unfair_lock_t)(v3 + 88));
      objc_storeStrong((id *)(v2[4] + 72LL), (id)v2[5]);
      os_unfair_lock_unlock((os_unfair_lock_t)(v2[4] + 88LL));
      [(id)v2[4] _connectSocketDescriptor:*((unsigned int *)v2 + 12) toClientChannel:v2[5]];
      [(id)v2[4] _checkAndSendCachedDataForClient:v2[5]];
      return [(id)v2[5] writePacketBuffer:0 metaData:0 metadataSize:0 moreComing:0];
    }

    else
    {
      return [(id)v3 _connectSocketDescriptor:*((unsigned int *)v2 + 12) toClientChannel:v2[5]];
    }
  }

  return result;
}

void sub_100079A24(id a1)
{
  off_1009BE920 = (_UNKNOWN *)IMWeakLinkSymbol("WriteStackshotReportWithPID", @"CrashReporterSupport");
}

id sub_100079A50(uint64_t a1)
{
  return [*(id *)(a1 + 32) endSessionWithReason:20];
}

LABEL_91:
        if (v74 < v85) {
          [v69 removeObjectAtIndex:v74];
        }
LABEL_93:
        *(void *)buf = 0xAAAAAAAAAAAAAAAALL;
        objc_initWeak((id *)buf, v11);
        location = (id)0xAAAAAAAAAAAAAAAALL;
        objc_initWeak(&location, self);
        v87[0] = _NSConcreteStackBlock;
        v87[1] = 3221225472LL;
        v87[2] = sub_10007A74C;
        v87[3] = &unk_1008F8898;
        objc_copyWeak(&v88, (id *)buf);
        objc_copyWeak(&v89, &location);
        -[IDSClientChannel setWriteHandler:](v11, "setWriteHandler:", v87);
        objc_destroyWeak(&v89);
        objc_destroyWeak(&v88);
        objc_destroyWeak(&location);
        objc_destroyWeak((id *)buf);
        goto LABEL_94;
      }

      uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession accountController](self, "accountController"));
      uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
      uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue([v83 accountID]);
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v84 accountWithUniqueID:v82]);
      BOOL v29 = (void *)objc_claimAutoreleasedReturnValue([v28 service]);
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v29 serviceName]);
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
      __int16 v32 = (void *)objc_claimAutoreleasedReturnValue([v31 uniqueID]);
      uint64_t v26 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@-%@", v30, v32));

      LODWORD(v29) = IMGetDomainBoolForKey(@"com.apple.ids", @"SessionLogDumpSimulateCrash");
      id v33 = IMGetDomainBoolForKey(@"com.apple.ids", @"SessionLogDumpSysdiagnose");
      uint64_t v34 = IMGetDomainBoolForKey(@"com.apple.ids", @"SessionLogDumpPacketCapture");
      id v35 = IMGetDomainBoolForKey(@"com.apple.ids", @"SessionLogDumplskq");
      uint64_t v36 = IMGetDomainBoolForKey(@"com.apple.ids", @"SessionLogDumplsof");
      if ((_DWORD)v29) {
        unsigned int v37 = 2;
      }
      else {
        unsigned int v37 = 0;
      }
      if (v33) {
        v37 |= 4u;
      }
      if (v34) {
        v37 |= 8u;
      }
      id v38 = v37 | v35;
      if (v36) {
        BOOL v39 = v38 | 0x10;
      }
      else {
        BOOL v39 = v38;
      }
      if ((_DWORD)v39)
      {
        uint64_t v26 = v26;
        IDSNetworkingLogDump([v26 UTF8String], v39);
      }
    }

    goto LABEL_37;
  }

  __int16 v53 = OSLogHandleForTransportCategory("IDSDSession");
  __int16 v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "writeToClientChannel: there is no real packet or metadata.",  buf,  2u);
  }

  __int16 v56 = os_log_shim_legacy_logging_enabled(v55);
  if ((_DWORD)v56)
  {
    if (_IDSShouldLogTransport(v56))
    {
      _IDSLogTransport( @"IDSDSession",  @"IDS",  @"writeToClientChannel: there is no real packet or metadata.");
      if (_IDSShouldLog(0LL, @"IDSDSession")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"writeToClientChannel: there is no real packet or metadata.");
      }
    }
  }

  return v3;
}

            __break(1u);
            goto LABEL_92;
          }

          goto LABEL_19;
        }

LABEL_95:
}

void sub_10007A74C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  int v4 = v3;
  if (v3 && WeakRetained)
  {
    [v3 _checkAndSendCachedDataForClient:WeakRetained];
    [WeakRetained writePacketBuffer:0 metaData:0 metadataSize:0 moreComing:0];
  }

  else
  {
    uint64_t v5 = OSLogHandleForTransportCategory("IDSClientChannel");
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      id v10 = WeakRetained;
      __int16 v11 = 2048;
      uint64_t v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%p: writeHandler: IDSDSession %p", buf, 0x16u);
    }

    uint64_t v8 = os_log_shim_legacy_logging_enabled(v7);
    if ((_DWORD)v8)
    {
      if (_IDSShouldLogTransport(v8))
      {
        _IDSLogTransport(@"IDSClientChannel", @"IDS", @"%p: writeHandler: IDSDSession %p");
      }
    }
  }
}

LABEL_3:
  os_unfair_lock_unlock(p_clientChannelLock);
  uint64_t v9 = 0;
LABEL_33:

  return v9;
}

  if ([*(id *)(a1 + 32) mechanism] != (id)1)
  {
    uint64_t v5 = 0LL;
    goto LABEL_9;
  }

  uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
LABEL_5:
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) baaSigner]);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 baaResult]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) BAACert]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) intermediateRootCert]);
  __int16 v11 = (void *)objc_claimAutoreleasedReturnValue( [v6 headersBySigningData:v7 baaSigningResult:v8 baaCert:v9 intermediateRootCert:v10]);

  if (v11) {
    -[NSMutableDictionary addEntriesFromDictionary:](v5, "addEntriesFromDictionary:", v11);
  }

LABEL_9:
  uint64_t v12 = objc_claimAutoreleasedReturnValue([v3 absintheError]);
  if (v12)
  {
    int v13 = (void *)v12;
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v3 baaResult]);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 error]);

    if (v15)
    {
      id v16 = objc_alloc(&OBJC_CLASS___NSError);
      id v49 = NSMultipleUnderlyingErrorsKey;
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v3 absintheError]);
      v48[0] = v17;
      id v18 = (void *)objc_claimAutoreleasedReturnValue([v3 baaResult]);
      unsigned int v19 = (void *)objc_claimAutoreleasedReturnValue([v18 error]);
      v48[1] = v19;
      id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v48, 2LL));
      unsigned int v50 = v20;
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v50,  &v49,  1LL));
      uint64_t v22 = -[NSError initWithDomain:code:userInfo:]( v16,  "initWithDomain:code:userInfo:",  @"IDSValidationSessionErrorDomain",  -5000LL,  v21);

LABEL_21:
      goto LABEL_22;
    }
  }

  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v3 absintheError]);

  if (v23)
  {
    uint64_t v22 = (NSError *)objc_claimAutoreleasedReturnValue([v3 absintheError]);
    goto LABEL_22;
  }

  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v3 baaResult]);
  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v30 error]);

  if (v31)
  {
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v3 baaResult]);
    uint64_t v22 = (NSError *)objc_claimAutoreleasedReturnValue([v17 error]);
    goto LABEL_21;
  }

  uint64_t v22 = 0LL;
LABEL_22:
  __int16 v32 = (void *)objc_claimAutoreleasedReturnValue([v3 baaResult]);
  id v33 = (void *)objc_claimAutoreleasedReturnValue([v32 icloudDigest]);

  if (v33)
  {
    uint64_t v34 = objc_alloc(&OBJC_CLASS___IDSBAASignerContext);
    id v35 = (void *)objc_claimAutoreleasedReturnValue([v3 baaResult]);
    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v35 icloudDigest]);
    unsigned int v37 = -[IDSBAASignerContext initWithSigningDigest:](v34, "initWithSigningDigest:", v36);
  }

  else
  {
    unsigned int v37 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

  *(void *)(a1 + v3[10]) = v7;
  *(void *)(a1 + v3[11]) = 0LL;
  *(_BYTE *)(a1 + v3[12]) = 0;
  *(void *)(a1 + v3[13]) = _swiftEmptyArrayStorage;
  uint64_t result = Date.init(timeIntervalSince1970:)(0.0);
  *(void *)(a1 + v3[15]) = 1LL;
  return result;
}

        uint64_t v5 = a5;
      }

LABEL_25:
      uint64_t v5 = a5;
      uint64_t v36 = a1[v23];
      a1[v23] = v36 & ~v24;
    }

    while ((v24 & v36) == 0);
    uint64_t v8 = v39 - 1;
    if (__OFSUB__(v39, 1LL))
    {
LABEL_47:
      __break(1u);
      return;
    }

    if (v39 != 1) {
      continue;
    }
    break;
  }

        uint64_t v5 = a5;
      }

LABEL_25:
      uint64_t v36 = a1[v23];
      a1[v23] = v36 & ~v24;
      unsigned int v37 = (v24 & v36) == 0;
      uint64_t v5 = a5;
    }

    while (v37);
    uint64_t v8 = v40 - 1;
    if (__OFSUB__(v40, 1LL))
    {
LABEL_47:
      __break(1u);
      return;
    }

    if (v40 != 1) {
      continue;
    }
    break;
  }

        uint64_t v5 = a5;
      }

LABEL_25:
      uint64_t v5 = a5;
      uint64_t v36 = a1[v23];
      a1[v23] = v36 & ~v24;
    }

    while ((v24 & v36) == 0);
    uint64_t v8 = v39 - 1;
    if (__OFSUB__(v39, 1LL))
    {
LABEL_47:
      __break(1u);
      return;
    }

    if (v39 != 1) {
      continue;
    }
    break;
  }

uint64_t sub_10007AE10(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v2 = result;
    int v21 = -1431655766;
    *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    void v20[4] = v3;
    void v20[5] = v3;
    v20[3] = v3;
    v20[1] = v3;
    v20[2] = v3;
    v20[0] = v3;
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
    __int128 v11 = v3;
    __int128 v12 = v3;
    IDSByteBufferInitForWriteWithAllocatedSpace(&v11, v20, 100LL);
    char v10 = 1;
    IDSByteBufferWriteField(&v11, 1LL, &v10, 1LL);
    uint64_t v4 = (unsigned __int16)(v12 - v11);
    int v5 = -1;
    do
      ++v5;
    while (([*(id *)(v2 + 32) writePacketBuffer:0 metaData:v20 metadataSize:v4 moreComing:1] & 1) != 0);
    IDSByteBufferRelease(&v11);
    uint64_t v6 = OSLogHandleForTransportCategory("IDSDSession");
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(v2 + 32);
      *(_DWORD *)buf = 67109634;
      int v15 = v5;
      __int16 v16 = 1024;
      int v17 = v4;
      __int16 v18 = 2112;
      uint64_t v19 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "generateClientChannelDataTest: wrote %d test metadata (size %u) into client channel %@",  buf,  0x18u);
    }

    uint64_t result = os_log_shim_legacy_logging_enabled(v9);
    if ((_DWORD)result)
    {
      uint64_t result = _IDSShouldLogTransport(result);
      if ((_DWORD)result)
      {
        _IDSLogTransport( @"IDSDSession",  @"IDS",  @"generateClientChannelDataTest: wrote %d test metadata (size %u) into client channel %@");
        uint64_t result = _IDSShouldLog(0LL, @"IDSDSession");
        if ((_DWORD)result) {
          return _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"generateClientChannelDataTest: wrote %d test metadata (size %u) into client channel %@");
        }
      }
    }
  }

  return result;
}

uint64_t sub_10007B00C(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v2 = result;
    int v22 = -1431655766;
    *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v21[4] = v3;
    void v21[5] = v3;
    v21[3] = v3;
    v21[1] = v3;
    v21[2] = v3;
    v21[0] = v3;
    unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
    __int128 v12 = v3;
    __int128 v13 = v3;
    IDSByteBufferInitForWriteWithAllocatedSpace(&v12, v21, 100LL);
    char v11 = 1;
    IDSByteBufferWriteField(&v12, 1LL, &v11, 1LL);
    uint64_t v4 = (unsigned __int16)(v13 - v12);
    int v5 = 79;
    do
      ++v5;
    while (([*(id *)(v2 + 32) writePacketBuffer:0 metaData:v21 metadataSize:v4 moreComing:1] & 1) != 0);
    int v6 = 80;
    do
    {
      [*(id *)(v2 + 40) writeToClientChannel:*(void *)(v2 + 32) packetBuffer:0 metaData:v21 metadataSize:v4];
      --v6;
    }

    while (v6);
    IDSByteBufferRelease(&v12);
    uint64_t v7 = OSLogHandleForTransportCategory("IDSDSession");
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(v2 + 32);
      *(_DWORD *)buf = 67109634;
      int v16 = v5;
      __int16 v17 = 1024;
      int v18 = v4;
      __int16 v19 = 2112;
      uint64_t v20 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "overflowClientChannelDataTest wrote %d test metadata (size %u) into client channel %@",  buf,  0x18u);
    }

    uint64_t result = os_log_shim_legacy_logging_enabled(v10);
    if ((_DWORD)result)
    {
      uint64_t result = _IDSShouldLogTransport(result);
      if ((_DWORD)result)
      {
        _IDSLogTransport( @"IDSDSession",  @"IDS",  @"overflowClientChannelDataTest wrote %d test metadata (size %u) into client channel %@");
        uint64_t result = _IDSShouldLog(0LL, @"IDSDSession");
        if ((_DWORD)result) {
          return _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"overflowClientChannelDataTest wrote %d test metadata (size %u) into client channel %@");
        }
      }
    }
  }

  return result;
}

uint64_t sub_10007B228(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v2 = result;
    int v22 = -1431655766;
    *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v21[4] = v3;
    void v21[5] = v3;
    v21[3] = v3;
    v21[1] = v3;
    v21[2] = v3;
    v21[0] = v3;
    unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
    __int128 v12 = v3;
    __int128 v13 = v3;
    IDSByteBufferInitForWriteWithAllocatedSpace(&v12, v21, 100LL);
    char v11 = 1;
    IDSByteBufferWriteField(&v12, 1LL, &v11, 1LL);
    uint64_t v4 = (unsigned __int16)(v13 - v12);
    int v5 = 79;
    do
      ++v5;
    while (([*(id *)(v2 + 32) writePacketBuffer:0 metaData:(void)v12 metadataSize:v4 moreComing:1] & 1) != 0);
    int v6 = 80;
    do
    {
      [*(id *)(v2 + 40) writeToClientChannel:*(void *)(v2 + 32) packetBuffer:0 metaData:v21 metadataSize:v4];
      --v6;
    }

    while (v6);
    IDSByteBufferRelease(&v12);
    uint64_t v7 = OSLogHandleForTransportCategory("IDSDSession");
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(v2 + 32);
      *(_DWORD *)buf = 67109634;
      int v16 = v5;
      __int16 v17 = 1024;
      int v18 = v4;
      __int16 v19 = 2112;
      uint64_t v20 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "overflowClientChannelDataTest wrote %d test metadata (size %u) into client channel %@",  buf,  0x18u);
    }

    uint64_t result = os_log_shim_legacy_logging_enabled(v10);
    if ((_DWORD)result)
    {
      uint64_t result = _IDSShouldLogTransport(result);
      if ((_DWORD)result)
      {
        _IDSLogTransport( @"IDSDSession",  @"IDS",  @"overflowClientChannelDataTest wrote %d test metadata (size %u) into client channel %@");
        uint64_t result = _IDSShouldLog(0LL, @"IDSDSession");
        if ((_DWORD)result) {
          return _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"overflowClientChannelDataTest wrote %d test metadata (size %u) into client channel %@");
        }
      }
    }
  }

  return result;
}

id sub_10007B890(uint64_t a1)
{
  return [*(id *)(a1 + 32) endSessionWithReason:23];
}

id sub_10007B89C(uint64_t a1)
{
  return [*(id *)(a1 + 32) endSessionWithReason:20];
}

uint64_t sub_10007B8A8(uint64_t a1)
{
  uint64_t v2 = _IDSLinkPacketBufferCreate( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSDSession.m",  1542LL);
  __int128 v3 = (void *)read(*(_DWORD *)(a1 + 48), *(void **)v2, 0x7D0uLL);
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v4 + 602) || *(_BYTE *)(v4 + 601))
  {
    uint64_t v5 = OSLogHandleForIDSCategory("IDSDSession");
    int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 134218498;
      *(void *)&uint8_t buf[4] = v3;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v7;
      *(_WORD *)&buf[18] = 2112;
      *(void *)&buf[20] = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "got data %ld from socket %d clientChannel %@",  buf,  0x1Cu);
    }

    if (os_log_shim_legacy_logging_enabled(v9) && _IDSShouldLog(0LL, @"IDSDSession"))
    {
      uint64_t v36 = *(unsigned int *)(a1 + 48);
      uint64_t v37 = *(void *)(a1 + 40);
      id v35 = v3;
      _IDSLogV(0LL, @"IDSFoundation", @"IDSDSession", @"got data %ld from socket %d clientChannel %@");
    }
  }

  if (!v3)
  {
    int v12 = *__error();
    IDSTransportThreadSuspendSocket(*(unsigned int *)(a1 + 48), 1LL);
    uint64_t v13 = OSLogHandleForIDSCategory("IDSDataChannels");
    unint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = v15;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "<%@> read returned 0 bytes errno %d",  buf,  0x12u);
    }

    if (os_log_shim_legacy_logging_enabled(v16)
      && _IDSShouldLog(0LL, @"IDSDataChannels"))
    {
      _IDSLogV(0LL, @"IDSFoundation", @"IDSDataChannels", @"<%@> read returned 0 bytes errno %d");
    }

    goto LABEL_43;
  }

  if (v3 != (void *)-1LL)
  {
    *(void *)(v2 + 16) = v3;
    if ([*(id *)(a1 + 40) hasMetadata])
    {
      uint64_t v17 = *(void *)(v2 + 16);
      uint64_t v18 = *(void *)v2 + v17;
      unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v19 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)buf = v19;
      *(_OWORD *)&uint8_t buf[16] = v19;
      IDSByteBufferInitForWriteWithAllocatedSpace(buf, v18, v17);
      char v41 = 1;
      __int16 v40 = 0;
      __int16 v39 = 0;
      char v38 = 0;
      IDSByteBufferWriteField(buf, 1LL, &v41, 1LL);
      IDSByteBufferWriteField(buf, 14LL, &v40, 2LL);
      IDSByteBufferWriteField(buf, 20LL, (char *)&v39 + 1, 1LL);
      IDSByteBufferWriteField(buf, 23LL, &v38, 1LL);
      IDSByteBufferWriteField(buf, 35LL, &v39, 1LL);
      __int16 v20 = *(_WORD *)&buf[16];
      __int16 v21 = *(_WORD *)buf;
      IDSByteBufferRelease(buf);
      uint64_t v22 = (unsigned __int16)(v20 - v21);
    }

    else
    {
      uint64_t v18 = 0LL;
      uint64_t v22 = 0LL;
    }

    objc_msgSend( *(id *)(a1 + 32),  "writeToClientChannel:packetBuffer:metaData:metadataSize:",  *(void *)(a1 + 40),  v2,  v18,  v22,  v35,  v36,  v37);
LABEL_43:
    uint64_t v29 = 1598LL;
    return _IDSLinkPacketBufferRelease( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSDSession.m",  v29,  v2);
  }

  unsigned int v10 = *__error();
  if (v10 <= 0x24 && ((1LL << v10) & 0x1800000010LL) != 0)
  {
    BOOL v11 = 1;
  }

  else
  {
    __int128 v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sharedState", v35, v36, v37));
    id v23 = [v3 transportType];
    BOOL v11 = v10 == 61 && v23 == 0LL;
  }

  if (v10 > 0x24 || ((1LL << v10) & 0x1800000010LL) == 0) {

  }
  if (!v11)
  {
    IDSTransportThreadSuspendSocket(*(unsigned int *)(a1 + 48), 1LL);
    uint64_t v30 = OSLogHandleForIDSCategory("IDSDSession");
    uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v32 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = v32;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v10;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "<%@> read failed errno %d", buf, 0x12u);
    }

    goto LABEL_43;
  }

  uint64_t v25 = OSLogHandleForIDSCategory("IDSDSession");
  uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v27 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412546;
    *(void *)&uint8_t buf[4] = v27;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "<%@> read nonfatal failure errno %d",  buf,  0x12u);
  }

  uint64_t v29 = 1555LL;
  return _IDSLinkPacketBufferRelease( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSDSession.m",  v29,  v2);
}

uint64_t sub_10007BE0C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, void *a5)
{
  uint64_t v8 = a5;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  if (v8)
  {
    uint64_t v10 = OSLogHandleForTransportCategory("IDSDSession");
    BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v95 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "_connectSocketDescriptor: ClientChannel read error %@",  buf,  0xCu);
    }

    uint64_t v13 = os_log_shim_legacy_logging_enabled(v12);
    if ((_DWORD)v13)
    {
      if (_IDSShouldLogTransport(v13))
      {
        _IDSLogTransport( @"IDSDSession",  @"IDS",  @"_connectSocketDescriptor: ClientChannel read error %@");
        if (_IDSShouldLog(0LL, @"IDSDSession")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"_connectSocketDescriptor: ClientChannel read error %@");
        }
      }
    }

    if (WeakRetained
      && (unint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sharedState]),
          BOOL v15 = [v14 clientType] == (id)6,
          v14,
          !v15))
    {
      uint64_t v36 = OSLogHandleForTransportCategory("IDSDSession");
      uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        char v38 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sharedState]);
        unsigned int v39 = [v38 clientType];
        *(_DWORD *)buf = 67109120;
        LODWORD(v95) = v39;
        _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "_connectSocketDescriptor: clientType: %u, end session",  buf,  8u);
      }

      uint64_t v41 = os_log_shim_legacy_logging_enabled(v40);
      if ((_DWORD)v41)
      {
        uint64_t v41 = _IDSShouldLogTransport(v41);
        if ((_DWORD)v41)
        {
          unint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sharedState]);
          id v87 = [v43 clientType];
          _IDSLogTransport( @"IDSDSession",  @"IDS",  @"_connectSocketDescriptor: clientType: %u, end session");

          uint64_t v41 = _IDSShouldLog(0LL, @"IDSDSession");
          if ((_DWORD)v41)
          {
            uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "sharedState", v87));
            [v44 clientType];
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"_connectSocketDescriptor: clientType: %u, end session");
          }
        }
      }

      if (!*((_BYTE *)WeakRetained + 636))
      {
        uint64_t v45 = im_primary_queue(v41, v42);
        id v46 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v45);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_10007CA90;
        block[3] = &unk_1008F6010;
        void block[4] = WeakRetained;
        dispatch_block_t v47 = dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT,  QOS_CLASS_USER_INITIATED,  0,  block);
        dispatch_async(v46, v47);
      }
    }

    else
    {
      uint64_t v16 = OSLogHandleForTransportCategory("IDSDSession");
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        uint64_t v95 = WeakRetained;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "_connectSocketDescriptor: strongSelf: %p, not ending session because we have not been told to",  buf,  0xCu);
      }

      uint64_t v19 = os_log_shim_legacy_logging_enabled(v18);
      if ((_DWORD)v19)
      {
        if (_IDSShouldLogTransport(v19))
        {
          _IDSLogTransport( @"IDSDSession",  @"IDS",  @"_connectSocketDescriptor: strongSelf: %p, not ending session because we have not been told to");
          if (_IDSShouldLog(0LL, @"IDSDSession")) {
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"_connectSocketDescriptor: strongSelf: %p, not ending session because we have not been told to");
          }
        }
      }
    }

    _IDSLinkPacketBufferRelease( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSDSession.m",  1620LL,  a2);
    goto LABEL_49;
  }

  __int16 v20 = *(void **)(a1 + 32);
  if (!v20 || ([v20 closed] & 1) != 0 || !WeakRetained)
  {
    uint64_t v32 = OSLogHandleForTransportCategory("IDSDSession");
    uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "_connectSocketDescriptor: ClientChannel or Session has been invalidated; not writing",
        buf,
        2u);
    }

    uint64_t v35 = os_log_shim_legacy_logging_enabled(v34);
    if ((_DWORD)v35)
    {
      if (_IDSShouldLogTransport(v35))
      {
        _IDSLogTransport( @"IDSDSession",  @"IDS",  @"_connectSocketDescriptor: ClientChannel or Session has been invalidated; not writing");
        if (_IDSShouldLog(0LL, @"IDSDSession")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"_connectSocketDescriptor: ClientChannel or Session has been invalidated; not writing");
        }
      }
    }

    _IDSLinkPacketBufferRelease( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSDSession.m",  1628LL,  a2);
    goto LABEL_49;
  }

  if (*((_BYTE *)WeakRetained + 602) || *((_BYTE *)WeakRetained + 601))
  {
    uint64_t v21 = OSLogHandleForIDSCategory("IDSDSession");
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      id v23 = *(id **)(a2 + 16);
      int v24 = *(_DWORD *)(a1 + 64);
      *(_DWORD *)buf = 134218754;
      uint64_t v95 = v23;
      __int16 v96 = 2048;
      *(void *)uint64_t v97 = a4;
      *(_WORD *)&v97[8] = 2112;
      uint64_t v98 = 0LL;
      __int16 v99 = 1024;
      int v100 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Client channel read packetBuffer %lu metadata_size %lu error %@ for socket %d",  buf,  0x26u);
    }

    if (os_log_shim_legacy_logging_enabled(v25) && _IDSShouldLog(0LL, @"IDSDSession"))
    {
      uint64_t v89 = 0LL;
      uint64_t v90 = *(unsigned int *)(a1 + 64);
      uint64_t v86 = *(void *)(a2 + 16);
      uint64_t v88 = a4;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Client channel read packetBuffer %lu metadata_size %lu error %@ for socket %d");
    }
  }

  if (!*(void *)(a2 + 16))
  {
    uint64_t v49 = OSLogHandleForIDSCategory("IDSDSession");
    unsigned int v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
    {
      int v51 = *(_DWORD *)(a1 + 64);
      *(_DWORD *)buf = 134218240;
      uint64_t v95 = (id *)a4;
      __int16 v96 = 1024;
      *(_DWORD *)uint64_t v97 = v51;
      _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "Bug in client: Client channel read only metadata for socket session - dropping metadata_size %lu for socket %d",  buf,  0x12u);
    }

    if (os_log_shim_legacy_logging_enabled(v52) && _IDSShouldLog(0LL, @"IDSDSession")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Bug in client: Client channel read only metadata for socket session - dropping metadata_size %lu for socket %d");
    }
    _IDSLinkPacketBufferRelease( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSDSession.m",  1638LL,  a2);
    goto LABEL_49;
  }

  if (*((_BYTE *)WeakRetained + 48))
  {
    id v26 = WeakRetained[13];
    if (!v26
      || (uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 connection])) == 0
      || (uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained[13] deviceConnectionInfo]),
          BOOL v29 = v28 == 0LL,
          v28,
          v27,
          v29))
    {
      _IDSLinkPacketBufferRelease( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSDSession.m",  1646LL,  a2);
      goto LABEL_49;
    }

    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) utunController]);
    id v31 = objc_msgSend(v30, "onTransportThread_SendWithConnectionContext:packetBuffer:", WeakRetained[13], a2);

    if (v31)
    {
      a2 = 0LL;
      goto LABEL_59;
    }

    goto LABEL_49;
  }

  __int16 v53 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sharedState]);
  BOOL v54 = [v53 state] == 8;

  if (v54)
  {
    if (*(void *)(a2 + 16)) {
      goto LABEL_59;
    }
LABEL_67:
    _IDSLinkPacketBufferRelease( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSDSession.m",  1661LL,  a2);
    goto LABEL_49;
  }

  ssize_t v63 = write(*(_DWORD *)(a1 + 64), *(const void **)a2, *(void *)(a2 + 16));
  uint64_t v64 = (void *)v63;
  if (v63 == *(void *)(a2 + 16)) {
    goto LABEL_67;
  }
  if (v63 >= 1)
  {
    if (*((_BYTE *)WeakRetained + 602) || *((_BYTE *)WeakRetained + 601))
    {
      uint64_t v65 = OSLogHandleForIDSCategory("IDSDSession");
      uint64_t v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
      if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v67 = *(void *)(a2 + 16);
        *(_DWORD *)buf = 138412802;
        uint64_t v95 = WeakRetained;
        __int16 v96 = 1024;
        *(_DWORD *)uint64_t v97 = (_DWORD)v64;
        *(_WORD *)&v97[4] = 1024;
        *(_DWORD *)&v97[6] = v67;
        _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "<%@> write failed to send all bytes %d < %d",  buf,  0x18u);
      }

      if (os_log_shim_legacy_logging_enabled(v68)
        && _IDSShouldLog(0LL, @"IDSDSession"))
      {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"<%@> write failed to send all bytes %d < %d");
      }
    }

    goto LABEL_65;
  }

  if (!v63)
  {
LABEL_59:
    int v55 = *__error();
    uint64_t v56 = OSLogHandleForIDSCategory("IDSDSession");
    uint64_t v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v95 = WeakRetained;
      __int16 v96 = 1024;
      *(_DWORD *)uint64_t v97 = v55;
      _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "<%@> write failed connection terminated %d",  buf,  0x12u);
    }

    uint64_t v59 = os_log_shim_legacy_logging_enabled(v58);
    if ((_DWORD)v59)
    {
      uint64_t v59 = _IDSShouldLog(0LL, @"IDSDSession");
      if ((_DWORD)v59) {
        uint64_t v59 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"<%@> write failed connection terminated %d");
      }
    }

    uint64_t v61 = im_primary_queue(v59, v60);
    double v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
    v92[0] = _NSConcreteStackBlock;
    v92[1] = 3221225472LL;
    v92[2] = sub_10007CA9C;
    v92[3] = &unk_1008F6010;
    v92[4] = WeakRetained;
    sub_100076748(v62, QOS_CLASS_USER_INITIATED, v92);

LABEL_65:
    _IDSLinkPacketBufferRelease( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSDSession.m",  1700LL,  a2);
    goto LABEL_49;
  }

  unsigned int v69 = *__error();
  if (v69 <= 0x37 && ((1LL << v69) & 0x80000800000010LL) != 0)
  {
    BOOL v70 = 1;
  }

  else
  {
    uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "sharedState", v86, v88, v89, v90));
    id v71 = [v64 transportType];
    BOOL v70 = v69 == 61 && v71 == 0LL;
  }

  if (v69 > 0x37 || ((1LL << v69) & 0x80000800000010LL) == 0) {

  }
  if (!v70)
  {
    uint64_t v76 = OSLogHandleForIDSCategory("IDSDSession");
    uint64_t v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(v76);
    if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v95 = WeakRetained;
      __int16 v96 = 1024;
      *(_DWORD *)uint64_t v97 = v69;
      _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "<%@> write failed errno %d", buf, 0x12u);
    }

    uint64_t v79 = (id *)(a1 + 56);
    id v80 = objc_loadWeakRetained(v79);

    if (v80)
    {
      id v83 = objc_loadWeakRetained(v79);
      [v83 invalidate];
    }

    uint64_t v84 = im_primary_queue(v81, v82);
    uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue(v84);
    v91[0] = _NSConcreteStackBlock;
    v91[1] = 3221225472LL;
    v91[2] = sub_10007CAA8;
    v91[3] = &unk_1008F6010;
    v91[4] = WeakRetained;
    sub_100076748(v85, QOS_CLASS_USER_INITIATED, v91);

    goto LABEL_65;
  }

  if (*((_BYTE *)WeakRetained + 602) || *((_BYTE *)WeakRetained + 601))
  {
    uint64_t v73 = OSLogHandleForIDSCategory("IDSDSession");
    uint64_t v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v95 = WeakRetained;
      __int16 v96 = 1024;
      *(_DWORD *)uint64_t v97 = v69;
      _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEFAULT,  "<%@> write nonfatal failure errno %d",  buf,  0x12u);
    }
  }

  _IDSLinkPacketBufferRelease( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSDSession.m",  1684LL,  a2);
LABEL_49:

  return 1LL;
}

id sub_10007CA90(uint64_t a1)
{
  return [*(id *)(a1 + 32) endSessionWithReason:11];
}

id sub_10007CA9C(uint64_t a1)
{
  return [*(id *)(a1 + 32) endSessionWithReason:15];
}

id sub_10007CAA8(uint64_t a1)
{
  return [*(id *)(a1 + 32) endSessionWithReason:15];
}

void sub_10007CAB4(uint64_t a1, uint64_t a2, int a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10007CB1C;
  v5[3] = &unk_1008F8828;
  __int128 v3 = *(void **)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  int v7 = a3;
  id v6 = v3;
  IDSTransportThreadAddBlock(v5, v4);
}

uint64_t sub_10007CB1C(uint64_t a1)
{
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8[0] = v2;
  v8[1] = v2;
  IDSByteBufferInitForWrite(v8);
  int v15 = 0;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  memset(v10, 0, sizeof(v10));
  LOWORD(v11) = 513;
  __int128 v3 = *(void **)(a1 + 32);
  BYTE2(v11) = v3[38];
  BYTE3(v11) = *(_DWORD *)(a1 + 48);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 sharedState]);
  unsigned int v5 = [v4 useBTDatagramPipe];

  if (v5) {
    __int16 v6 = 655;
  }
  else {
    __int16 v6 = 1450;
  }
  WORD3(v12) = v6;
  WORD2(v11) = 514;
  BYTE6(v11) = 0;
  IDSByteBufferWriteField(v8, 2LL, v10, 100LL);
  objc_msgSend(*(id *)(a1 + 32), "writeToClientChannel:packetBuffer:metaData:metadataSize:", *(void *)(a1 + 40), 0);
  return IDSByteBufferRelease(v8);
}

LABEL_772:
            break;
          default:
LABEL_372:
            v353 = OSLogHandleForTransportCategory("IDSDSession");
            v354 = (os_log_s *)objc_claimAutoreleasedReturnValue(v353);
            if (os_log_type_enabled(v354, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v669;
              _os_log_impl((void *)&_mh_execute_header, v354, OS_LOG_TYPE_DEFAULT, "Unknown metadata type: %u", buf, 8u);
            }

            v356 = os_log_shim_legacy_logging_enabled(v355);
            if ((_DWORD)v356)
            {
              if (_IDSShouldLogTransport(v356))
              {
                v628 = v669;
                _IDSLogTransport(@"IDSDSession", @"IDS", @"Unknown metadata type: %u");
                if (_IDSShouldLog(0LL, @"IDSDSession"))
                {
                  v628 = v669;
                  _IDSLogV(0LL, @"IDSFoundation", @"IDSDSession", @"Unknown metadata type: %u");
                }
              }
            }

            break;
        }
      }

      else
      {
        switch(v669)
        {
          case 1u:
            if (v667 == 1)
            {
              uint64_t v42 = *v668;
              unint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithChar:](&OBJC_CLASS___NSNumber, "numberWithChar:", v42));
              -[__CFDictionary setObject:forKeyedSubscript:]( Mutable,  "setObject:forKeyedSubscript:",  v43,  @"ccmdtpli");

              if (self->_verboseFunctionalLogging)
              {
                uint64_t v44 = OSLogHandleForIDSCategory("IDSDSession");
                uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
                if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
                {
                  if (qword_1009BE930 != -1) {
                    dispatch_once(&qword_1009BE930, &stru_1008F91C0);
                  }
                  id v46 = mach_continuous_time();
                  *(_DWORD *)buf = 67109376;
                  *(_DWORD *)&uint8_t buf[4] = v42;
                  *(_WORD *)&buf[8] = 2048;
                  *(double *)&buf[10] = *(double *)&qword_1009BE938 * (double)v46;
                  _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "got PacketLinkID %d [%013.6lf]",  buf,  0x12u);
                }

                if (os_log_shim_legacy_logging_enabled(v47)
                  && _IDSShouldLog(0LL, @"IDSDSession"))
                {
                  if (qword_1009BE930 != -1) {
                    dispatch_once(&qword_1009BE930, &stru_1008F91C0);
                  }
                  v629 = *(double *)&qword_1009BE938 * (double)mach_continuous_time();
                  v628 = v42;
                  _IDSLogV(0LL, @"IDSFoundation", @"IDSDSession", @"got PacketLinkID %d [%013.6lf]");
                }
              }
            }

            else
            {
              v357 = OSLogHandleForTransportCategory("IDSDSession");
              v358 = (os_log_s *)objc_claimAutoreleasedReturnValue(v357);
              if (os_log_type_enabled(v358, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v667;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v358,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_PacketLinkID should be 1 byte, not %u bytes, field: %u",  buf,  0xEu);
              }

              v360 = os_log_shim_legacy_logging_enabled(v359);
              if ((_DWORD)v360)
              {
                if (_IDSShouldLogTransport(v360))
                {
                  v628 = v667;
                  *(void *)&v629 = v669;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_PacketLinkID should be 1 byte, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    v628 = v667;
                    *(void *)&v629 = v669;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_PacketLinkID should be 1 byte, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          case 2u:
            if (v667 == 4)
            {
              id v48 = v668;
              uint64_t v49 = *v668++;
              *(void *)&unsigned int v50 = *v668;
              v668 = v48 + 4;
              int v51 = OSLogHandleForIDSCategory("IDSDSession");
              uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
              if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v49;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = LODWORD(v50);
                _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "got connectedLinkID %d connectedLinkAttributes %u",  buf,  0xEu);
              }

              if (os_log_shim_legacy_logging_enabled(v53)
                && _IDSShouldLog(0LL, @"IDSDSession"))
              {
                v628 = v49;
                v629 = v50;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"got connectedLinkID %d connectedLinkAttributes %u");
              }
            }

            else
            {
              v361 = OSLogHandleForTransportCategory("IDSDSession");
              v362 = (os_log_s *)objc_claimAutoreleasedReturnValue(v361);
              if (os_log_type_enabled(v362, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v667;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v362,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_LinkConnected should be 4 bytes, not %u bytes, field: %u",  buf,  0xEu);
              }

              v364 = os_log_shim_legacy_logging_enabled(v363);
              if ((_DWORD)v364)
              {
                if (_IDSShouldLogTransport(v364))
                {
                  v628 = v667;
                  *(void *)&v629 = v669;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_LinkConnected should be 4 bytes, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    v628 = v667;
                    *(void *)&v629 = v669;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_LinkConnected should be 4 bytes, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          case 3u:
            if (v667 == 1)
            {
              BOOL v54 = *v668++;
              int v55 = OSLogHandleForIDSCategory("IDSDSession");
              uint64_t v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
              if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v54;
                _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEFAULT,  "got disconnectedLinkID %d",  buf,  8u);
              }

              if (os_log_shim_legacy_logging_enabled(v57)
                && _IDSShouldLog(0LL, @"IDSDSession"))
              {
                v628 = v54;
                _IDSLogV(0LL, @"IDSFoundation", @"IDSDSession", @"got disconnectedLinkID %d");
              }
            }

            else
            {
              v365 = OSLogHandleForTransportCategory("IDSDSession");
              v366 = (os_log_s *)objc_claimAutoreleasedReturnValue(v365);
              if (os_log_type_enabled(v366, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v667;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v366,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_LinkDisconnected should be 1 byte, not %u bytes, field: %u",  buf,  0xEu);
              }

              v368 = os_log_shim_legacy_logging_enabled(v367);
              if ((_DWORD)v368)
              {
                if (_IDSShouldLogTransport(v368))
                {
                  v628 = v667;
                  *(void *)&v629 = v669;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_LinkDisconnected should be 1 byte, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    v628 = v667;
                    *(void *)&v629 = v669;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_LinkDisconnected should be 1 byte, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          case 4u:
            if (v667 == 1)
            {
              uint64_t v58 = *v668++;
              uint64_t v59 = OSLogHandleForIDSCategory("IDSDSession");
              uint64_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
              if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v58;
                _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "got defaultLinkID %d", buf, 8u);
              }

              if (os_log_shim_legacy_logging_enabled(v61)
                && _IDSShouldLog(0LL, @"IDSDSession"))
              {
                v628 = v58;
                _IDSLogV(0LL, @"IDSFoundation", @"IDSDSession", @"got defaultLinkID %d");
              }

              double v62 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession utunController](self, "utunController", v628));
              ssize_t v63 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
              uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([v63 uniqueID]);
              objc_msgSend(v62, "onTransportThread_SetDefaultUnderlyingLink:linkID:", v64, (char)v58);
            }

            else
            {
              v369 = OSLogHandleForTransportCategory("IDSDSession");
              v370 = (os_log_s *)objc_claimAutoreleasedReturnValue(v369);
              if (os_log_type_enabled(v370, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v667;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v370,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_DefaultLinkID should be 1 byte, not %u bytes, field: %u",  buf,  0xEu);
              }

              v372 = os_log_shim_legacy_logging_enabled(v371);
              if ((_DWORD)v372)
              {
                if (_IDSShouldLogTransport(v372))
                {
                  v628 = v667;
                  *(void *)&v629 = v669;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_DefaultLinkID should be 1 byte, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    v628 = v667;
                    *(void *)&v629 = v669;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_DefaultLinkID should be 1 byte, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          case 5u:
            if (v667 == 1)
            {
              uint64_t v65 = *v668++;
              uint64_t v66 = OSLogHandleForIDSCategory("IDSDSession");
              uint64_t v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
              if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v65;
                _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "got ratType %u", buf, 8u);
              }

              if (os_log_shim_legacy_logging_enabled(v68)
                && _IDSShouldLog(0LL, @"IDSDSession"))
              {
                v628 = v65;
                _IDSLogV(0LL, @"IDSFoundation", @"IDSDSession", @"got ratType %u");
              }
            }

            else
            {
              v373 = OSLogHandleForTransportCategory("IDSDSession");
              v374 = (os_log_s *)objc_claimAutoreleasedReturnValue(v373);
              if (os_log_type_enabled(v374, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v667;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v374,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_RATChanged should be 1 bytes, not %u bytes, field: %u",  buf,  0xEu);
              }

              v376 = os_log_shim_legacy_logging_enabled(v375);
              if ((_DWORD)v376)
              {
                if (_IDSShouldLogTransport(v376))
                {
                  v628 = v667;
                  *(void *)&v629 = v669;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_RATChanged should be 1 bytes, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    v628 = v667;
                    *(void *)&v629 = v669;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_RATChanged should be 1 bytes, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          case 6u:
            if (v667 == 6)
            {
              unsigned int v69 = v668;
              *(void *)&BOOL v70 = *v668++;
              id v71 = *v668;
              v668 = v69 + 2;
              uint64_t v72 = *(_DWORD *)(v69 + 2);
              v668 = v69 + 6;
              uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession utunController](self, "utunController"));
              uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
              uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue([v74 uniqueID]);
              uint64_t v76 = bswap32(v72);
              objc_msgSend( v73,  "onTransportThread_SetPacketNotificationFilter:linkID:uniqueTag:isEnabled:",  v75,  SLOBYTE(v70),  v76,  v71 != 0);

              uint64_t v77 = OSLogHandleForIDSCategory("IDSDSession");
              uint64_t v78 = (os_log_s *)objc_claimAutoreleasedReturnValue(v77);
              if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 134218240;
                *(void *)&uint8_t buf[4] = v76;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = LODWORD(v70);
                _os_log_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_DEFAULT,  "got basebandRegKey %lu (linkID: %d)",  buf,  0x12u);
              }

              if (os_log_shim_legacy_logging_enabled(v79)
                && _IDSShouldLog(0LL, @"IDSDSession"))
              {
                v628 = v76;
                v629 = v70;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"got basebandRegKey %lu (linkID: %d)");
              }
            }

            else
            {
              v377 = OSLogHandleForTransportCategory("IDSDSession");
              v378 = (os_log_s *)objc_claimAutoreleasedReturnValue(v377);
              if (os_log_type_enabled(v378, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v667;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v378,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_BasebandRegistrationKey should be 4 bytes, not %u bytes, field: %u",  buf,  0xEu);
              }

              v380 = os_log_shim_legacy_logging_enabled(v379);
              if ((_DWORD)v380)
              {
                if (_IDSShouldLogTransport(v380))
                {
                  v628 = v667;
                  *(void *)&v629 = v669;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_BasebandRegistrationKey should be 4 bytes, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    v628 = v667;
                    *(void *)&v629 = v669;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_BasebandRegistrationKey should be 4 bytes, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          case 7u:
            if (v667 == 1)
            {
              v641 = *v668++;
              id v80 = OSLogHandleForIDSCategory("IDSDSession");
              uint64_t v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
              if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v641;
                _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_DEFAULT,  "got kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey %u",  buf,  8u);
              }

              if (os_log_shim_legacy_logging_enabled(v82)
                && _IDSShouldLog(0LL, @"IDSDSession"))
              {
                v628 = v641;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"got kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey %u");
              }

              goto LABEL_703;
            }

            v381 = OSLogHandleForTransportCategory("IDSDSession");
            v382 = (os_log_s *)objc_claimAutoreleasedReturnValue(v381);
            if (os_log_type_enabled(v382, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)&uint8_t buf[4] = v667;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v669;
              _os_log_impl( (void *)&_mh_execute_header,  v382,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey should be 1 bytes, not %u bytes, field: %u",  buf,  0xEu);
            }

            v384 = os_log_shim_legacy_logging_enabled(v383);
            if ((_DWORD)v384)
            {
              if (_IDSShouldLogTransport(v384))
              {
                v628 = v667;
                *(void *)&v629 = v669;
                _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey should be 1 bytes, not %u bytes, field: %u");
                if (_IDSShouldLog(0LL, @"IDSDSession"))
                {
                  v628 = v667;
                  *(void *)&v629 = v669;
                  _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey should be 1 bytes, not %u bytes, field: %u");
                }
              }
            }

            break;
          case 8u:
            if ((v645 & 1) != 0)
            {
              if (((10 * (_DWORD)v641) | 1) == v667)
              {
                id v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
                uint64_t v84 = *v668++;
                for (i = v641; i; --i)
                {
                  uint64_t v86 = v668;
                  id v87 = *v668++;
                  uint64_t v88 = *(_DWORD *)v668;
                  v668 = v86 + 5;
                  uint64_t v89 = v86[5];
                  v668 = v86 + 6;
                  uint64_t v90 = *((unsigned __int16 *)v86 + 3);
                  uint64_t v91 = *((unsigned __int16 *)v86 + 4);
                  v668 = v86 + 10;
                  v673[0] = v651;
                  uint64_t v92 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  v87,  v628));
                  v674[0] = v92;
                  v673[1] = v650;
                  uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  bswap32(v88)));
                  v674[1] = v93;
                  v673[2] = v649;
                  uint64_t v94 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  v89));
                  v674[2] = v94;
                  v673[3] = v648;
                  uint64_t v95 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  bswap32(v90) >> 16));
                  v674[3] = v95;
                  v673[4] = v647;
                  __int16 v96 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  bswap32(v91) >> 16));
                  v674[4] = v96;
                  uint64_t v97 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v674,  v673,  5LL));

                  [v83 addObject:v97];
                }

                uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession utunController](self, "utunController", v628));
                __int16 v99 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
                int v100 = (void *)objc_claimAutoreleasedReturnValue([v99 uniqueID]);
                objc_msgSend(v98, "onTransportThread_DropIPPackets:linkID:payloadArray:", v100, v84, v83);

                uint64_t v101 = OSLogHandleForIDSCategory("IDSDSession");
                uint64_t v102 = (os_log_s *)objc_claimAutoreleasedReturnValue(v101);
                if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412290;
                  *(void *)&uint8_t buf[4] = v83;
                  _os_log_impl( (void *)&_mh_execute_header,  v102,  OS_LOG_TYPE_DEFAULT,  "got basebandQueueFlush %@",  buf,  0xCu);
                }

                if (os_log_shim_legacy_logging_enabled(v103)
                  && _IDSShouldLog(0LL, @"IDSDSession"))
                {
                  v628 = (uint64_t)v83;
                  _IDSLogV(0LL, @"IDSFoundation", @"IDSDSession", @"got basebandQueueFlush %@");
                }
              }

              else
              {
                v568 = OSLogHandleForTransportCategory("IDSDSession");
                v569 = (os_log_s *)objc_claimAutoreleasedReturnValue(v568);
                if (os_log_type_enabled(v569, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 67109632;
                  *(_DWORD *)&uint8_t buf[4] = (10 * v641) | 1;
                  *(_WORD *)&buf[8] = 1024;
                  *(_DWORD *)&buf[10] = v667;
                  *(_WORD *)&buf[14] = 1024;
                  *(_DWORD *)&uint8_t buf[16] = v669;
                  _os_log_impl( (void *)&_mh_execute_header,  v569,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey should be %u bytes, not %u bytes, field: %u",  buf,  0x14u);
                }

                v571 = os_log_shim_legacy_logging_enabled(v570);
                if ((_DWORD)v571)
                {
                  if (_IDSShouldLogTransport(v571))
                  {
                    *(void *)&v629 = v667;
                    *(void *)&v630 = v669;
                    v628 = (10 * (_DWORD)v641) | 1u;
                    _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey should be %u bytes, not %u bytes, field: %u");
                    if (_IDSShouldLog(0LL, @"IDSDSession"))
                    {
                      *(void *)&v629 = v667;
                      *(void *)&v630 = v669;
                      v628 = (10 * (_DWORD)v641) | 1u;
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey should be %u bytes, not %u bytes, field: %u");
                    }
                  }
                }
              }

LABEL_703:
              LOBYTE(v645) = 1;
            }

            else
            {
              v385 = OSLogHandleForTransportCategory("IDSDSession");
              v386 = (os_log_s *)objc_claimAutoreleasedReturnValue(v385);
              if (os_log_type_enabled(v386, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v386,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_BasebandQueueFlushPayloadKey should know its size. needs kClientChannelMeta dataType_BasebandQueueFlushPayloadSizeKey",  buf,  2u);
              }

              v388 = os_log_shim_legacy_logging_enabled(v387);
              if ((_DWORD)v388)
              {
                if (_IDSShouldLogTransport(v388))
                {
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_BasebandQueueFlushPayloadKey should know its size. needs kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey");
                  if (_IDSShouldLog(0LL, @"IDSDSession")) {
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_BasebandQueueFlushPayloadKey should know its size. needs kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey");
                  }
                }
              }

              LOBYTE(v645) = 0;
            }

            break;
          case 9u:
            if (v667 == 10)
            {
              v671 = *(void *)v668;
              v672 = *((_WORD *)v668 + 4);
              uint64_t v104 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
              for (j = 0LL; j != 10; ++j)
              {
                if (!*((_BYTE *)&v671 + j)) {
                  break;
                }
                uint64_t v106 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithChar:]( &OBJC_CLASS___NSNumber,  "numberWithChar:",  *((char *)&v671 + j)));
                [v104 addObject:v106];
              }

              uint64_t v107 = OSLogHandleForIDSCategory("IDSDSession");
              uint64_t v108 = (os_log_s *)objc_claimAutoreleasedReturnValue(v107);
              if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                *(void *)&uint8_t buf[4] = v104;
                _os_log_impl( (void *)&_mh_execute_header,  v108,  OS_LOG_TYPE_DEFAULT,  "got kClientChannelMetadataType_DiscardLinkIDsKey %@",  buf,  0xCu);
              }

              if (os_log_shim_legacy_logging_enabled(v109)
                && _IDSShouldLog(0LL, @"IDSDSession"))
              {
                v628 = (uint64_t)v104;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"got kClientChannelMetadataType_DiscardLinkIDsKey %@");
              }

              uint64_t v110 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession utunController](self, "utunController", v628));
              uint64_t v111 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
              uint64_t v112 = (void *)objc_claimAutoreleasedReturnValue([v111 uniqueID]);
              objc_msgSend(v110, "onTransportThread_StopKeepAlive:linkIDs:", v112, v104);
            }

            else
            {
              v389 = OSLogHandleForTransportCategory("IDSDSession");
              v390 = (os_log_s *)objc_claimAutoreleasedReturnValue(v389);
              if (os_log_type_enabled(v390, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)&uint8_t buf[4] = 10;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v667;
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&uint8_t buf[16] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v390,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_KeepAliveLinksKey should be %u bytes, not %u bytes, field: %u",  buf,  0x14u);
              }

              v392 = os_log_shim_legacy_logging_enabled(v391);
              if ((_DWORD)v392)
              {
                if (_IDSShouldLogTransport(v392))
                {
                  *(void *)&v629 = v667;
                  *(void *)&v630 = v669;
                  v628 = 10LL;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_KeepAliveLinksKey should be %u bytes, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    *(void *)&v629 = v667;
                    *(void *)&v630 = v669;
                    v628 = 10LL;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_KeepAliveLinksKey should be %u bytes, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          case 0xAu:
            if (v667 == 1)
            {
              *(void *)&v642 = *v668;
              uint64_t v113 = OSLogHandleForIDSCategory("IDSDSession");
              uint64_t v114 = (os_log_s *)objc_claimAutoreleasedReturnValue(v113);
              if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = LODWORD(v642);
                _os_log_impl( (void *)&_mh_execute_header,  v114,  OS_LOG_TYPE_DEFAULT,  "got kClientChannelMetadataType_PreConnectionDataSizeKey %u",  buf,  8u);
              }

              if (os_log_shim_legacy_logging_enabled(v115)
                && _IDSShouldLog(0LL, @"IDSDSession"))
              {
                v628 = *(void *)&v642;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"got kClientChannelMetadataType_PreConnectionDataSizeKey %u");
              }

              goto LABEL_710;
            }

            v393 = OSLogHandleForTransportCategory("IDSDSession");
            v394 = (os_log_s *)objc_claimAutoreleasedReturnValue(v393);
            if (os_log_type_enabled(v394, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)&uint8_t buf[4] = v667;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v669;
              _os_log_impl( (void *)&_mh_execute_header,  v394,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_PreConnectionDataSizeKey should be 1 bytes, not %u bytes, field: %u",  buf,  0xEu);
            }

            v396 = os_log_shim_legacy_logging_enabled(v395);
            if ((_DWORD)v396)
            {
              if (_IDSShouldLogTransport(v396))
              {
                v628 = v667;
                *(void *)&v629 = v669;
                _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_PreConnectionDataSizeKey should be 1 bytes, not %u bytes, field: %u");
                if (_IDSShouldLog(0LL, @"IDSDSession"))
                {
                  v628 = v667;
                  *(void *)&v629 = v669;
                  _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_PreConnectionDataSizeKey should be 1 bytes, not %u bytes, field: %u");
                }
              }
            }

            break;
          case 0xBu:
            if ((v645 & 0x100000000LL) != 0)
            {
              if (v667 == LOBYTE(v642))
              {
                uint64_t v116 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  v668,  LODWORD(v642)));
                uint64_t v117 = OSLogHandleForIDSCategory("IDSDSession");
                uint64_t v118 = (os_log_s *)objc_claimAutoreleasedReturnValue(v117);
                if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412546;
                  *(void *)&uint8_t buf[4] = v116;
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = LODWORD(v642);
                  _os_log_impl( (void *)&_mh_execute_header,  v118,  OS_LOG_TYPE_DEFAULT,  "got preConnectionData %@, size:%u bytes.",  buf,  0x12u);
                }

                if (os_log_shim_legacy_logging_enabled(v119)
                  && _IDSShouldLog(0LL, @"IDSDSession"))
                {
                  v628 = (uint64_t)v116;
                  v629 = v642;
                  _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"got preConnectionData %@, size:%u bytes.");
                }

                *(void *)buf = 0xAAAAAAAAAAAAAAAALL;
                objc_initWeak((id *)buf, self);
                uint64_t v120 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession utunController](self, "utunController"));
                uint64_t v121 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
                uint64_t v122 = (void *)objc_claimAutoreleasedReturnValue([v121 uniqueID]);
                v662[0] = _NSConcreteStackBlock;
                v662[1] = 3221225472LL;
                v662[2] = sub_100084884;
                v662[3] = &unk_1008F8938;
                objc_copyWeak(&v664, (id *)buf);
                uint64_t v123 = v116;
                v663 = v123;
                objc_msgSend(v120, "onTransportThread_SendSKEData:skeData:completionHandler:", v122, v123, v662);

                objc_destroyWeak(&v664);
                objc_destroyWeak((id *)buf);
              }

              else
              {
                v572 = OSLogHandleForTransportCategory("IDSDSession");
                v573 = (os_log_s *)objc_claimAutoreleasedReturnValue(v572);
                if (os_log_type_enabled(v573, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 67109632;
                  *(_DWORD *)&uint8_t buf[4] = LODWORD(v642);
                  *(_WORD *)&buf[8] = 1024;
                  *(_DWORD *)&buf[10] = v667;
                  *(_WORD *)&buf[14] = 1024;
                  *(_DWORD *)&uint8_t buf[16] = v669;
                  _os_log_impl( (void *)&_mh_execute_header,  v573,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_PreConnectionDataKey should be %u bytes, not %u bytes, field: %u",  buf,  0x14u);
                }

                v575 = os_log_shim_legacy_logging_enabled(v574);
                if ((_DWORD)v575)
                {
                  if (_IDSShouldLogTransport(v575))
                  {
                    *(void *)&v629 = v667;
                    *(void *)&v630 = v669;
                    v628 = *(void *)&v642;
                    _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_PreConnectionDataKey should be %u bytes, not %u bytes, field: %u");
                    if (_IDSShouldLog(0LL, @"IDSDSession"))
                    {
                      *(void *)&v629 = v667;
                      *(void *)&v630 = v669;
                      v628 = *(void *)&v642;
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_PreConnectionDataKey should be %u bytes, not %u bytes, field: %u");
                    }
                  }
                }
              }

LABEL_710:
              BYTE4(v645) = 1;
            }

            else
            {
              v397 = OSLogHandleForTransportCategory("IDSDSession");
              v398 = (os_log_s *)objc_claimAutoreleasedReturnValue(v397);
              if (os_log_type_enabled(v398, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v398,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_PreConnectionDataKey should know its size. needs kClientChannelMetadataType _PreConnectionDataSizeKey",  buf,  2u);
              }

              v400 = os_log_shim_legacy_logging_enabled(v399);
              if ((_DWORD)v400)
              {
                if (_IDSShouldLogTransport(v400))
                {
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_PreConnectionDataKey should know its size. needs kClientChannelMetadataType_PreConnectionDataSizeKey");
                  if (_IDSShouldLog(0LL, @"IDSDSession")) {
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_PreConnectionDataKey should know its size. needs kClientChannelMetadataType_PreConnectionDataSizeKey");
                  }
                }
              }

              BYTE4(v645) = 0;
            }

            break;
          case 0xCu:
            if (v667 == 2)
            {
              uint64_t v124 = v668;
              uint64_t v125 = *v668++;
              __int128 v126 = *v668;
              v668 = v124 + 2;
              __int128 v127 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession utunController](self, "utunController"));
              __int128 v128 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
              __int128 v129 = (void *)objc_claimAutoreleasedReturnValue([v128 uniqueID]);
              objc_msgSend( v127,  "onTransportThread_UpdateProtocolQualityOfService:linkID:isGood:",  v129,  (char)v125,  v126 != 0);

              __int128 v130 = OSLogHandleForIDSCategory("IDSDSession");
              __int128 v131 = (os_log_s *)objc_claimAutoreleasedReturnValue(v130);
              if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
              {
                __int128 v132 = @"YES";
                if (!v126) {
                  __int128 v132 = @"NO";
                }
                *(_DWORD *)buf = 138412546;
                *(void *)&uint8_t buf[4] = v132;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v125;
                _os_log_impl( (void *)&_mh_execute_header,  v131,  OS_LOG_TYPE_DEFAULT,  "got updateQoSIsGood %@ (linkID: %d)",  buf,  0x12u);
              }

              if (os_log_shim_legacy_logging_enabled(v133)
                && _IDSShouldLog(0LL, @"IDSDSession"))
              {
                __int128 v134 = @"YES";
                if (!v126) {
                  __int128 v134 = @"NO";
                }
                v628 = (uint64_t)v134;
                *(void *)&v629 = v125;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"got updateQoSIsGood %@ (linkID: %d)");
              }
            }

            else
            {
              v401 = OSLogHandleForTransportCategory("IDSDSession");
              v402 = (os_log_s *)objc_claimAutoreleasedReturnValue(v401);
              if (os_log_type_enabled(v402, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)&uint8_t buf[4] = 2;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v667;
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&uint8_t buf[16] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v402,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_UpdateQoSIsGoodKey should be %u bytes, not %u bytes, field: %u",  buf,  0x14u);
              }

              v404 = os_log_shim_legacy_logging_enabled(v403);
              if ((_DWORD)v404)
              {
                if (_IDSShouldLogTransport(v404))
                {
                  *(void *)&v629 = v667;
                  *(void *)&v630 = v669;
                  v628 = 2LL;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_UpdateQoSIsGoodKey should be %u bytes, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    *(void *)&v629 = v667;
                    *(void *)&v630 = v669;
                    v628 = 2LL;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_UpdateQoSIsGoodKey should be %u bytes, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          case 0xDu:
            if (v667 == 1)
            {
              __int128 v135 = OSLogHandleForIDSCategory("IDSDSession");
              __int128 v136 = (os_log_s *)objc_claimAutoreleasedReturnValue(v135);
              if (os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v136,  OS_LOG_TYPE_DEFAULT,  "got kClientChannelMetadataType_QueryRSSI",  buf,  2u);
              }

              if (os_log_shim_legacy_logging_enabled(v137)
                && _IDSShouldLog(0LL, @"IDSDSession"))
              {
                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"got kClientChannelMetadataType_QueryRSSI");
              }

              *(_DWORD *)buf = 0;
              LODWORD(v671) = 0;
              v661 = 0;
              __int128 v138 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession utunController](self, "utunController", v628));
              __int128 v139 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
              __int128 v140 = (void *)objc_claimAutoreleasedReturnValue([v139 uniqueID]);
              objc_msgSend( v138,  "onTransportThread_CurrentCellularSignalStrength:signalRaw:signalStrength:signalGrade:",  v140,  buf,  &v671,  &v661);

              -[IDSDSession didReceiveCurrentCellularSignalRaw:signalStrength:signalGrade:]( self,  "didReceiveCurrentCellularSignalRaw:signalStrength:signalGrade:",  *(unsigned int *)buf,  v671,  v661);
            }

            else
            {
              v405 = OSLogHandleForTransportCategory("IDSDSession");
              v406 = (os_log_s *)objc_claimAutoreleasedReturnValue(v405);
              if (os_log_type_enabled(v406, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)&uint8_t buf[4] = 1;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v667;
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&uint8_t buf[16] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v406,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_QueryRSSI should be %u bytes, not %u bytes, field: %u",  buf,  0x14u);
              }

              v408 = os_log_shim_legacy_logging_enabled(v407);
              if ((_DWORD)v408)
              {
                if (_IDSShouldLogTransport(v408))
                {
                  *(void *)&v629 = v667;
                  *(void *)&v630 = v669;
                  v628 = 1LL;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_QueryRSSI should be %u bytes, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    *(void *)&v629 = v667;
                    *(void *)&v630 = v669;
                    v628 = 1LL;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_QueryRSSI should be %u bytes, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          case 0xEu:
            if (v667 == 2)
            {
              __int128 v141 = __rev16(*(unsigned __int16 *)v668);
              v668 += 2;
              v142 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  v141));
              -[__CFDictionary setObject:forKeyedSubscript:]( Mutable,  "setObject:forKeyedSubscript:",  v142,  @"ccmdttc");

              if (self->_verboseFunctionalLogging)
              {
                v143 = OSLogHandleForIDSCategory("IDSDSession");
                v144 = (os_log_s *)objc_claimAutoreleasedReturnValue(v143);
                if (os_log_type_enabled(v144, OS_LOG_TYPE_DEFAULT))
                {
                  if (qword_1009BE930 != -1) {
                    dispatch_once(&qword_1009BE930, &stru_1008F91C0);
                  }
                  v145 = mach_continuous_time();
                  *(_DWORD *)buf = 67109376;
                  *(_DWORD *)&uint8_t buf[4] = v141;
                  *(_WORD *)&buf[8] = 2048;
                  *(double *)&buf[10] = *(double *)&qword_1009BE938 * (double)v145;
                  _os_log_impl( (void *)&_mh_execute_header,  v144,  OS_LOG_TYPE_DEFAULT,  "got trafficClass %u [%013.6lf]",  buf,  0x12u);
                }

                if (os_log_shim_legacy_logging_enabled(v146)
                  && _IDSShouldLog(0LL, @"IDSDSession"))
                {
                  if (qword_1009BE930 != -1) {
                    dispatch_once(&qword_1009BE930, &stru_1008F91C0);
                  }
                  v629 = *(double *)&qword_1009BE938 * (double)mach_continuous_time();
                  v628 = v141;
                  _IDSLogV(0LL, @"IDSFoundation", @"IDSDSession", @"got trafficClass %u [%013.6lf]");
                }
              }
            }

            else
            {
              v409 = OSLogHandleForTransportCategory("IDSDSession");
              v410 = (os_log_s *)objc_claimAutoreleasedReturnValue(v409);
              if (os_log_type_enabled(v410, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)&uint8_t buf[4] = 2;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v667;
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&uint8_t buf[16] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v410,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_TrafficClassKey should be %u byte, not %u bytes, field: %u",  buf,  0x14u);
              }

              v412 = os_log_shim_legacy_logging_enabled(v411);
              if ((_DWORD)v412)
              {
                if (_IDSShouldLogTransport(v412))
                {
                  *(void *)&v629 = v667;
                  *(void *)&v630 = v669;
                  v628 = 2LL;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_TrafficClassKey should be %u byte, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    *(void *)&v629 = v667;
                    *(void *)&v630 = v669;
                    v628 = 2LL;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_TrafficClassKey should be %u byte, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          case 0xFu:
            if (v667 == 5)
            {
              v147 = v668;
              __int16 v148 = *v668++;
              v149 = bswap32(*(_DWORD *)v668);
              v668 = v147 + 5;
              v150 = OSLogHandleForIDSCategory("IDSDSession");
              v151 = (os_log_s *)objc_claimAutoreleasedReturnValue(v150);
              if (os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v149;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v148;
                _os_log_impl( (void *)&_mh_execute_header,  v151,  OS_LOG_TYPE_DEFAULT,  "got maxBitrate %u (linkID: %d)",  buf,  0xEu);
              }

              if (os_log_shim_legacy_logging_enabled(v152)
                && _IDSShouldLog(0LL, @"IDSDSession"))
              {
                v628 = v149;
                *(void *)&v629 = v148;
                _IDSLogV(0LL, @"IDSFoundation", @"IDSDSession", @"got maxBitrate %u (linkID: %d)");
              }
            }

            else
            {
              v413 = OSLogHandleForTransportCategory("IDSDSession");
              v414 = (os_log_s *)objc_claimAutoreleasedReturnValue(v413);
              if (os_log_type_enabled(v414, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)&uint8_t buf[4] = 5;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v667;
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&uint8_t buf[16] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v414,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_MaxBitrateKey should be %u bytes, not %u bytes, field: %u",  buf,  0x14u);
              }

              v416 = os_log_shim_legacy_logging_enabled(v415);
              if ((_DWORD)v416)
              {
                if (_IDSShouldLogTransport(v416))
                {
                  *(void *)&v629 = v667;
                  *(void *)&v630 = v669;
                  v628 = 5LL;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_MaxBitrateKey should be %u bytes, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    *(void *)&v629 = v667;
                    *(void *)&v630 = v669;
                    v628 = 5LL;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_MaxBitrateKey should be %u bytes, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          case 0x12u:
            if (v667 == 8)
            {
              a5->var30 = bswap64(*(void *)v668);
            }

            else
            {
              v417 = OSLogHandleForTransportCategory("IDSDSession");
              v418 = (os_log_s *)objc_claimAutoreleasedReturnValue(v417);
              if (os_log_type_enabled(v418, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)&uint8_t buf[4] = 8;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v667;
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&uint8_t buf[16] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v418,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_ExpireTimestamp should be %u bytes, not %u bytes, field: %u",  buf,  0x14u);
              }

              v420 = os_log_shim_legacy_logging_enabled(v419);
              if ((_DWORD)v420)
              {
                if (_IDSShouldLogTransport(v420))
                {
                  *(void *)&v629 = v667;
                  *(void *)&v630 = v669;
                  v628 = 8LL;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_ExpireTimestamp should be %u bytes, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    *(void *)&v629 = v667;
                    *(void *)&v630 = v669;
                    v628 = 8LL;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_ExpireTimestamp should be %u bytes, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          case 0x13u:
            if (v667 == 1)
            {
              v153 = *v668 != 0;
              v154 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession utunController](self, "utunController"));
              v155 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
              v156 = (void *)objc_claimAutoreleasedReturnValue([v155 uniqueID]);
              objc_msgSend(v154, "onTransportThread_setWiFiAssistState:isWiFiAssistEnabled:", v156, v153);
            }

            else
            {
              v421 = OSLogHandleForTransportCategory("IDSDSession");
              v422 = (os_log_s *)objc_claimAutoreleasedReturnValue(v421);
              if (os_log_type_enabled(v422, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)&uint8_t buf[4] = 1;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v667;
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&uint8_t buf[16] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v422,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_WiFiAssistEnableKey should be %u bytes, not %u bytes, field: %u",  buf,  0x14u);
              }

              v424 = os_log_shim_legacy_logging_enabled(v423);
              if ((_DWORD)v424)
              {
                if (_IDSShouldLogTransport(v424))
                {
                  *(void *)&v629 = v667;
                  *(void *)&v630 = v669;
                  v628 = 1LL;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_WiFiAssistEnableKey should be %u bytes, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    *(void *)&v629 = v667;
                    *(void *)&v630 = v669;
                    v628 = 1LL;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_WiFiAssistEnableKey should be %u bytes, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          case 0x14u:
            if (v667 == 1)
            {
              v157 = *v668++;
              v158 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  v157));
              -[__CFDictionary setObject:forKeyedSubscript:]( Mutable,  "setObject:forKeyedSubscript:",  v158,  @"ccmdtdscp");

              if (self->_verboseFunctionalLogging)
              {
                v159 = OSLogHandleForIDSCategory("IDSDSession");
                v160 = (os_log_s *)objc_claimAutoreleasedReturnValue(v159);
                if (os_log_type_enabled(v160, OS_LOG_TYPE_DEFAULT))
                {
                  if (qword_1009BE930 != -1) {
                    dispatch_once(&qword_1009BE930, &stru_1008F91C0);
                  }
                  v161 = mach_continuous_time();
                  *(_DWORD *)buf = 67109376;
                  *(_DWORD *)&uint8_t buf[4] = v157;
                  *(_WORD *)&buf[8] = 2048;
                  *(double *)&buf[10] = *(double *)&qword_1009BE938 * (double)v161;
                  _os_log_impl( (void *)&_mh_execute_header,  v160,  OS_LOG_TYPE_DEFAULT,  "got DSCP %u [%013.6lf]",  buf,  0x12u);
                }

                if (os_log_shim_legacy_logging_enabled(v162)
                  && _IDSShouldLog(0LL, @"IDSDSession"))
                {
                  if (qword_1009BE930 != -1) {
                    dispatch_once(&qword_1009BE930, &stru_1008F91C0);
                  }
                  v629 = *(double *)&qword_1009BE938 * (double)mach_continuous_time();
                  v628 = v157;
                  _IDSLogV(0LL, @"IDSFoundation", @"IDSDSession", @"got DSCP %u [%013.6lf]");
                }
              }
            }

            else
            {
              v425 = OSLogHandleForTransportCategory("IDSDSession");
              v426 = (os_log_s *)objc_claimAutoreleasedReturnValue(v425);
              if (os_log_type_enabled(v426, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)&uint8_t buf[4] = 1;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v667;
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&uint8_t buf[16] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v426,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_DSCPKey should be %u byte, not %u bytes, field: %u",  buf,  0x14u);
              }

              v428 = os_log_shim_legacy_logging_enabled(v427);
              if ((_DWORD)v428)
              {
                if (_IDSShouldLogTransport(v428))
                {
                  *(void *)&v629 = v667;
                  *(void *)&v630 = v669;
                  v628 = 1LL;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_DSCPKey should be %u byte, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    *(void *)&v629 = v667;
                    *(void *)&v630 = v669;
                    v628 = 1LL;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_DSCPKey should be %u byte, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          case 0x15u:
            if (v667 == 16)
            {
              *(_OWORD *)a5->var29 = *(_OWORD *)v668;
            }

            else
            {
              v429 = OSLogHandleForTransportCategory("IDSDSession");
              v430 = (os_log_s *)objc_claimAutoreleasedReturnValue(v429);
              if (os_log_type_enabled(v430, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)&uint8_t buf[4] = 16;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v667;
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&uint8_t buf[16] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v430,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_PacketUUID should be %u bytes, not %u bytes, field: %u",  buf,  0x14u);
              }

              v432 = os_log_shim_legacy_logging_enabled(v431);
              if ((_DWORD)v432)
              {
                if (_IDSShouldLogTransport(v432))
                {
                  *(void *)&v629 = v667;
                  *(void *)&v630 = v669;
                  v628 = 16LL;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_PacketUUID should be %u bytes, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    *(void *)&v629 = v667;
                    *(void *)&v630 = v669;
                    v628 = 16LL;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_PacketUUID should be %u bytes, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          case 0x17u:
            if (v667 == 1)
            {
              v163 = *v668;
              v164 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  v163));
              -[__CFDictionary setObject:forKeyedSubscript:]( Mutable,  "setObject:forKeyedSubscript:",  v164,  @"ccmdtcp");

              if (self->_verboseFunctionalLogging)
              {
                v165 = OSLogHandleForIDSCategory("IDSDSession");
                v166 = (os_log_s *)objc_claimAutoreleasedReturnValue(v165);
                if (os_log_type_enabled(v166, OS_LOG_TYPE_DEFAULT))
                {
                  if (qword_1009BE930 != -1) {
                    dispatch_once(&qword_1009BE930, &stru_1008F91C0);
                  }
                  v167 = mach_continuous_time();
                  *(_DWORD *)buf = 67109376;
                  *(_DWORD *)&uint8_t buf[4] = v163;
                  *(_WORD *)&buf[8] = 2048;
                  *(double *)&buf[10] = *(double *)&qword_1009BE938 * (double)v167;
                  _os_log_impl( (void *)&_mh_execute_header,  v166,  OS_LOG_TYPE_DEFAULT,  "got Channel Priority %u [%013.6lf]",  buf,  0x12u);
                }

                if (os_log_shim_legacy_logging_enabled(v168)
                  && _IDSShouldLog(0LL, @"IDSDSession"))
                {
                  if (qword_1009BE930 != -1) {
                    dispatch_once(&qword_1009BE930, &stru_1008F91C0);
                  }
                  v629 = *(double *)&qword_1009BE938 * (double)mach_continuous_time();
                  v628 = v163;
                  _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"got Channel Priority %u [%013.6lf]");
                }
              }
            }

            else
            {
              v433 = OSLogHandleForTransportCategory("IDSDSession");
              v434 = (os_log_s *)objc_claimAutoreleasedReturnValue(v433);
              if (os_log_type_enabled(v434, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v667;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v434,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_PriorityKey should be 1 byte, not %u bytes, field: %u",  buf,  0xEu);
              }

              v436 = os_log_shim_legacy_logging_enabled(v435);
              if ((_DWORD)v436)
              {
                if (_IDSShouldLogTransport(v436))
                {
                  v628 = v667;
                  *(void *)&v629 = v669;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_PriorityKey should be 1 byte, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    v628 = v667;
                    *(void *)&v629 = v669;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_PriorityKey should be 1 byte, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          case 0x18u:
            if (v667 == 8)
            {
              v169 = bswap64(*(void *)v668);
              v668 += 8;
              v170 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v169));
              -[__CFDictionary setObject:forKeyedSubscript:]( Mutable,  "setObject:forKeyedSubscript:",  v170,  @"ccmdtpid");

              if (self->_verboseFunctionalLogging)
              {
                v171 = OSLogHandleForIDSCategory("IDSDSession");
                v172 = (os_log_s *)objc_claimAutoreleasedReturnValue(v171);
                if (os_log_type_enabled(v172, OS_LOG_TYPE_DEFAULT))
                {
                  if (qword_1009BE930 != -1) {
                    dispatch_once(&qword_1009BE930, &stru_1008F91C0);
                  }
                  v173 = mach_continuous_time();
                  *(_DWORD *)buf = 134218240;
                  *(void *)&uint8_t buf[4] = v169;
                  *(_WORD *)&buf[12] = 2048;
                  *(double *)&buf[14] = *(double *)&qword_1009BE938 * (double)v173;
                  _os_log_impl( (void *)&_mh_execute_header,  v172,  OS_LOG_TYPE_DEFAULT,  "got Participant ID %llu [%013.6lf]",  buf,  0x16u);
                }

                if (os_log_shim_legacy_logging_enabled(v174)
                  && _IDSShouldLog(0LL, @"IDSDSession"))
                {
                  if (qword_1009BE930 != -1) {
                    dispatch_once(&qword_1009BE930, &stru_1008F91C0);
                  }
                  v629 = *(double *)&qword_1009BE938 * (double)mach_continuous_time();
                  v628 = v169;
                  _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"got Participant ID %llu [%013.6lf]");
                }
              }
            }

            else
            {
              v437 = OSLogHandleForTransportCategory("IDSDSession");
              v438 = (os_log_s *)objc_claimAutoreleasedReturnValue(v437);
              if (os_log_type_enabled(v438, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v667;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v438,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_PriorityKey should be 8 byte, not %u bytes, field: %u",  buf,  0xEu);
              }

              v440 = os_log_shim_legacy_logging_enabled(v439);
              if ((_DWORD)v440)
              {
                if (_IDSShouldLogTransport(v440))
                {
                  v628 = v667;
                  *(void *)&v629 = v669;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_PriorityKey should be 8 byte, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    v628 = v667;
                    *(void *)&v629 = v669;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_PriorityKey should be 8 byte, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          case 0x1Du:
            if (v667 == 1)
            {
              v175 = *v668;
              v176 = OSLogHandleForIDSCategory("IDSDSession");
              v177 = (os_log_s *)objc_claimAutoreleasedReturnValue(v176);
              if (os_log_type_enabled(v177, OS_LOG_TYPE_DEFAULT))
              {
                if (v175) {
                  v178 = @"YES";
                }
                else {
                  v178 = @"NO";
                }
                v179 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState", v628));
                v180 = (void *)objc_claimAutoreleasedReturnValue([v179 groupID]);
                *(_DWORD *)buf = 138412546;
                *(void *)&uint8_t buf[4] = v178;
                *(_WORD *)&buf[12] = 2112;
                *(void *)&buf[14] = v180;
                _os_log_impl( (void *)&_mh_execute_header,  v177,  OS_LOG_TYPE_DEFAULT,  "got kClientChannelMetadataType_EncryptionInfoKey %@ group: %@",  buf,  0x16u);
              }

              if (os_log_shim_legacy_logging_enabled(v181)
                && _IDSShouldLog(0LL, @"IDSDSession"))
              {
                if (v175) {
                  v182 = @"YES";
                }
                else {
                  v182 = @"NO";
                }
                v183 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState", v628));
                v628 = (uint64_t)v182;
                v629 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue([v183 groupID]));
                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"got kClientChannelMetadataType_EncryptionInfoKey %@ group: %@");
              }

              if (v175)
              {
                v184 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
                v185 = (void *)objc_claimAutoreleasedReturnValue([v184 groupID]);

                if (v185)
                {
                  v186 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
                  v187 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
                  v188 = (void *)objc_claimAutoreleasedReturnValue([v187 accountID]);
                  v189 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
                  v190 = (void *)objc_claimAutoreleasedReturnValue([v189 fromURI]);
                  v191 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
                  v192 = (void *)objc_claimAutoreleasedReturnValue([v191 groupID]);
                  [v186 setAccount:v188 fromURI:v190 forGroup:v192];

                  v195 = im_primary_queue(v193, v194);
                  v196 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v195);
                  block[0] = _NSConcreteStackBlock;
                  block[1] = 3221225472LL;
                  block[2] = sub_1000849E4;
                  block[3] = &unk_1008F6010;
                  void block[4] = self;
                  v197 = dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT,  QOS_CLASS_USER_INITIATED,  0,  block);
                  dispatch_async(v196, v197);
                }
              }

              else
              {
                v613 = OSLogHandleForTransportCategory("IDSDSession");
                v614 = (os_log_s *)objc_claimAutoreleasedReturnValue(v613);
                if (os_log_type_enabled(v614, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v614,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_EncryptionInfoKey FALSE. We won't pass the encryption information to the client.",  buf,  2u);
                }

                v616 = os_log_shim_legacy_logging_enabled(v615);
                if ((_DWORD)v616)
                {
                  if (_IDSShouldLogTransport(v616))
                  {
                    _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_EncryptionInfoKey FALSE. We won't pass the encryption information to the client.");
                    if (_IDSShouldLog(0LL, @"IDSDSession")) {
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_EncryptionInfoKey FALSE. We won't pass the encryption information to the client.");
                    }
                  }
                }
              }
            }

            else
            {
              v441 = OSLogHandleForTransportCategory("IDSDSession");
              v442 = (os_log_s *)objc_claimAutoreleasedReturnValue(v441);
              if (os_log_type_enabled(v442, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v667;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v442,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_EncryptionInfoKey should be 1 byte, not %u bytes, field: %u",  buf,  0xEu);
              }

              v444 = os_log_shim_legacy_logging_enabled(v443);
              if ((_DWORD)v444)
              {
                if (_IDSShouldLogTransport(v444))
                {
                  v628 = v667;
                  *(void *)&v629 = v669;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_EncryptionInfoKey should be 1 byte, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    v628 = v667;
                    *(void *)&v629 = v669;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_EncryptionInfoKey should be 1 byte, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          case 0x23u:
            if (v667 == 1)
            {
              v198 = *v668;
              if (v198 < 0xD)
              {
                v640 = *v668;
                if (self->_verboseFunctionalLogging)
                {
                  v576 = OSLogHandleForIDSCategory("IDSDSession");
                  v577 = (os_log_s *)objc_claimAutoreleasedReturnValue(v576);
                  if (os_log_type_enabled(v577, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 67109120;
                    *(_DWORD *)&uint8_t buf[4] = v198;
                    _os_log_impl( (void *)&_mh_execute_header,  v577,  OS_LOG_TYPE_DEFAULT,  "got streamIDCount %u",  buf,  8u);
                  }

                  if (os_log_shim_legacy_logging_enabled(v578)
                    && _IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    v628 = v198;
                    _IDSLogV(0LL, @"IDSFoundation", @"IDSDSession", @"got streamIDCount %u");
                  }
                }
              }

              else
              {
                v199 = OSLogHandleForIDSCategory("IDSDSession");
                v200 = (os_log_s *)objc_claimAutoreleasedReturnValue(v199);
                if (os_log_type_enabled(v200, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 67109120;
                  *(_DWORD *)&uint8_t buf[4] = v198;
                  _os_log_impl( (void *)&_mh_execute_header,  v200,  OS_LOG_TYPE_DEFAULT,  "got invalid streamIDCount %u",  buf,  8u);
                }

                if (os_log_shim_legacy_logging_enabled(v201)
                  && _IDSShouldLog(0LL, @"IDSDSession"))
                {
                  v628 = v198;
                  _IDSLogV(0LL, @"IDSFoundation", @"IDSDSession", @"got invalid streamIDCount %u");
                }

                v640 = 0;
              }
            }

            break;
          case 0x24u:
            if (v640 >= 1)
            {
              if (2 * (v640 & 0x7FFF) == v667)
              {
                v202 = v640;
                var3 = a5->var24[0].var3;
                do
                {
                  v204 = v668 + 2;
                  *var3 = bswap32(*(unsigned __int16 *)v668) >> 16;
                  v668 = v204;
                  if (self->_verboseFunctionalLogging)
                  {
                    v205 = OSLogHandleForTransportCategory("IDSDSession");
                    v206 = (os_log_s *)objc_claimAutoreleasedReturnValue(v205);
                    if (os_log_type_enabled(v206, OS_LOG_TYPE_DEFAULT))
                    {
                      v207 = *var3;
                      *(_DWORD *)buf = 67109120;
                      *(_DWORD *)&uint8_t buf[4] = v207;
                      _os_log_impl((void *)&_mh_execute_header, v206, OS_LOG_TYPE_DEFAULT, "got streamID %u", buf, 8u);
                    }

                    v209 = os_log_shim_legacy_logging_enabled(v208);
                    if ((_DWORD)v209)
                    {
                      if (_IDSShouldLogTransport(v209))
                      {
                        v628 = *var3;
                        _IDSLogTransport(@"IDSDSession", @"IDS", @"got streamID %u");
                        if (_IDSShouldLog(0LL, @"IDSDSession"))
                        {
                          v628 = *var3;
                          _IDSLogV(0LL, @"IDSFoundation", @"IDSDSession", @"got streamID %u");
                        }
                      }
                    }
                  }

                  ++var3;
                  --v202;
                }

                while (v202);
                a5->var24[0].var20 |= 2u;
                a5->var24[0].var2 = v640;
              }

              else
              {
                v553 = OSLogHandleForTransportCategory("IDSDSession");
                v554 = (os_log_s *)objc_claimAutoreleasedReturnValue(v553);
                if (os_log_type_enabled(v554, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 67109376;
                  *(_DWORD *)&uint8_t buf[4] = v667;
                  *(_WORD *)&buf[8] = 1024;
                  *(_DWORD *)&buf[10] = 2 * (v640 & 0x7FFF);
                  _os_log_impl( (void *)&_mh_execute_header,  v554,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_StreamIDsKey: size mismatch (%u != %u), ignore.",  buf,  0xEu);
                }

                v556 = os_log_shim_legacy_logging_enabled(v555);
                if ((_DWORD)v556)
                {
                  if (_IDSShouldLogTransport(v556))
                  {
                    v628 = v667;
                    *(void *)&v629 = 2 * (v640 & 0x7FFFu);
                    _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_StreamIDsKey: size mismatch (%u != %u), ignore.");
                    if (_IDSShouldLog(0LL, @"IDSDSession"))
                    {
                      v628 = v667;
                      *(void *)&v629 = 2 * (v640 & 0x7FFFu);
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_StreamIDsKey: size mismatch (%u != %u), ignore.");
                    }
                  }
                }
              }
            }

            break;
          case 0x25u:
            if (v667 == 1)
            {
              -[__CFDictionary setObject:forKeyedSubscript:]( Mutable,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"ccmdtipc");
            }

            else
            {
              v445 = OSLogHandleForTransportCategory("IDSDSession");
              v446 = (os_log_s *)objc_claimAutoreleasedReturnValue(v445);
              if (os_log_type_enabled(v446, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v667;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v446,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_CountPacketKey should be 1 byte, not %u bytes, field: %u",  buf,  0xEu);
              }

              v448 = os_log_shim_legacy_logging_enabled(v447);
              if ((_DWORD)v448)
              {
                if (_IDSShouldLogTransport(v448))
                {
                  v628 = v667;
                  *(void *)&v629 = v669;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_CountPacketKey should be 1 byte, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    v628 = v667;
                    *(void *)&v629 = v669;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_CountPacketKey should be 1 byte, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          case 0x26u:
            if (v667 == 2)
            {
              v301 = __rev16(*(unsigned __int16 *)v668);
              v668 += 2;
              v302 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  v301));
              -[__CFDictionary setObject:forKeyedSubscript:]( Mutable,  "setObject:forKeyedSubscript:",  v302,  @"ccmdtpgid");

              if (self->_verboseFunctionalLogging)
              {
                v303 = OSLogHandleForIDSCategory("IDSDSession");
                v304 = (os_log_s *)objc_claimAutoreleasedReturnValue(v303);
                if (os_log_type_enabled(v304, OS_LOG_TYPE_DEFAULT))
                {
                  if (qword_1009BE930 != -1) {
                    dispatch_once(&qword_1009BE930, &stru_1008F91C0);
                  }
                  v305 = mach_continuous_time();
                  *(_DWORD *)buf = 67109376;
                  *(_DWORD *)&uint8_t buf[4] = v301;
                  *(_WORD *)&buf[8] = 2048;
                  *(double *)&buf[10] = *(double *)&qword_1009BE938 * (double)v305;
                  _os_log_impl( (void *)&_mh_execute_header,  v304,  OS_LOG_TYPE_DEFAULT,  "got probeGroupID %u [%013.6lf]",  buf,  0x12u);
                }

                if (os_log_shim_legacy_logging_enabled(v306)
                  && _IDSShouldLog(0LL, @"IDSDSession"))
                {
                  if (qword_1009BE930 != -1) {
                    dispatch_once(&qword_1009BE930, &stru_1008F91C0);
                  }
                  v629 = *(double *)&qword_1009BE938 * (double)mach_continuous_time();
                  v628 = v301;
                  _IDSLogV(0LL, @"IDSFoundation", @"IDSDSession", @"got probeGroupID %u [%013.6lf]");
                }
              }
            }

            else
            {
              v493 = OSLogHandleForTransportCategory("IDSDSession");
              v494 = (os_log_s *)objc_claimAutoreleasedReturnValue(v493);
              if (os_log_type_enabled(v494, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v667;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v494,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_ProbeGroupIDKey should be 2 byte, not %u bytes, field: %u",  buf,  0xEu);
              }

              v496 = os_log_shim_legacy_logging_enabled(v495);
              if ((_DWORD)v496)
              {
                if (_IDSShouldLogTransport(v496))
                {
                  v628 = v667;
                  *(void *)&v629 = v669;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_ProbeGroupIDKey should be 2 byte, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    v628 = v667;
                    *(void *)&v629 = v669;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_ProbeGroupIDKey should be 2 byte, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          case 0x27u:
            uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v668, v667));
            if (v27)
            {
              v210 = (void *)objc_claimAutoreleasedReturnValue( +[IDSSessionInfoMetadataSerializer deserializeSessionInfoMetadata:]( &OBJC_CLASS___IDSSessionInfoMetadataSerializer,  "deserializeSessionInfoMetadata:",  v27));
              v211 = v210;
              if (v210)
              {
                [v210 setObject:&off_100946990 forKeyedSubscript:v634];
                -[IDSDSession requestSessionInfoWithOptions:](self, "requestSessionInfoWithOptions:", v211);
              }

              else
              {
                v579 = OSLogHandleForTransportCategory("IDSSession");
                v580 = (os_log_s *)objc_claimAutoreleasedReturnValue(v579);
                if (os_log_type_enabled(v580, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v580,  OS_LOG_TYPE_DEFAULT,  "There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_SessionInfoKey",  buf,  2u);
                }

                v582 = os_log_shim_legacy_logging_enabled(v581);
                if ((_DWORD)v582)
                {
                  if (_IDSShouldLogTransport(v582))
                  {
                    _IDSLogTransport( @"IDSSession",  @"IDS",  @"There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_SessionInfoKey");
                    if (_IDSShouldLog(0LL, @"IDSSession")) {
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSSession",  @"There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_SessionInfoKey");
                    }
                  }
                }
              }
            }

            else
            {
              v525 = OSLogHandleForTransportCategory("IDSDSession");
              v526 = (os_log_s *)objc_claimAutoreleasedReturnValue(v525);
              if (os_log_type_enabled(v526, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v526,  OS_LOG_TYPE_DEFAULT,  "Couldn't get NSData for kClientChannelMetadataType_SessionInfoKey.",  buf,  2u);
              }

              v528 = os_log_shim_legacy_logging_enabled(v527);
              if ((_DWORD)v528)
              {
                if (_IDSShouldLogTransport(v528))
                {
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"Couldn't get NSData for kClientChannelMetadataType_SessionInfoKey.");
                  if (_IDSShouldLog(0LL, @"IDSDSession")) {
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Couldn't get NSData for kClientChannelMetadataType_SessionInfoKey.");
                  }
                }
              }
            }

            goto LABEL_772;
          case 0x28u:
            uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v668, v667));
            if (v27)
            {
              v212 = (void *)objc_claimAutoreleasedReturnValue( +[IDSSessionInfoMetadataSerializer deserializeSessionInfoMetadata:]( &OBJC_CLASS___IDSSessionInfoMetadataSerializer,  "deserializeSessionInfoMetadata:",  v27));
              if (v212)
              {
                v213 = OSLogHandleForTransportCategory("IDSSession");
                v214 = (os_log_s *)objc_claimAutoreleasedReturnValue(v213);
                if (os_log_type_enabled(v214, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412290;
                  *(void *)&uint8_t buf[4] = v212;
                  _os_log_impl( (void *)&_mh_execute_header,  v214,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_StatsKey: send stats request with options: %@",  buf,  0xCu);
                }

                v216 = os_log_shim_legacy_logging_enabled(v215);
                if ((_DWORD)v216)
                {
                  if (_IDSShouldLogTransport(v216))
                  {
                    v628 = (uint64_t)v212;
                    _IDSLogTransport( @"IDSSession",  @"IDS",  @"kClientChannelMetadataType_StatsKey: send stats request with options: %@");
                    if (_IDSShouldLog(0LL, @"IDSSession"))
                    {
                      v628 = (uint64_t)v212;
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSSession",  @"kClientChannelMetadataType_StatsKey: send stats request with options: %@");
                    }
                  }
                }

                v657[0] = _NSConcreteStackBlock;
                v657[1] = 3221225472LL;
                v657[2] = sub_100084D08;
                v657[3] = &unk_1008F8800;
                v657[4] = self;
                v658 = v212;
                IDSTransportThreadAddBlock(v657, v217);
              }

              else
              {
                v583 = OSLogHandleForTransportCategory("IDSSession");
                v584 = (os_log_s *)objc_claimAutoreleasedReturnValue(v583);
                if (os_log_type_enabled(v584, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v584,  OS_LOG_TYPE_DEFAULT,  "There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_StatsKey",  buf,  2u);
                }

                v586 = os_log_shim_legacy_logging_enabled(v585);
                if ((_DWORD)v586)
                {
                  if (_IDSShouldLogTransport(v586))
                  {
                    _IDSLogTransport( @"IDSSession",  @"IDS",  @"There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_StatsKey");
                    if (_IDSShouldLog(0LL, @"IDSSession")) {
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSSession",  @"There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_StatsKey");
                    }
                  }
                }
              }
            }

            else
            {
              v529 = OSLogHandleForTransportCategory("IDSDSession");
              v530 = (os_log_s *)objc_claimAutoreleasedReturnValue(v529);
              if (os_log_type_enabled(v530, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v530,  OS_LOG_TYPE_DEFAULT,  "Couldn't get NSData for kClientChannelMetadataType_StatsKey.",  buf,  2u);
              }

              v532 = os_log_shim_legacy_logging_enabled(v531);
              if ((_DWORD)v532)
              {
                if (_IDSShouldLogTransport(v532))
                {
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"Couldn't get NSData for kClientChannelMetadataType_StatsKey.");
                  if (_IDSShouldLog(0LL, @"IDSDSession")) {
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Couldn't get NSData for kClientChannelMetadataType_StatsKey.");
                  }
                }
              }
            }

            goto LABEL_772;
          case 0x29u:
            if (v667 == 1)
            {
              v218 = *v668;
              v219 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  v218));
              -[__CFDictionary setObject:forKeyedSubscript:]( Mutable,  "setObject:forKeyedSubscript:",  v219,  @"ccmdtcdc");

              if (self->_verboseFunctionalLogging)
              {
                v220 = OSLogHandleForTransportCategory("IDSDSession");
                v221 = (os_log_s *)objc_claimAutoreleasedReturnValue(v220);
                if (os_log_type_enabled(v221, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 67109120;
                  *(_DWORD *)&uint8_t buf[4] = v218;
                  _os_log_impl( (void *)&_mh_execute_header,  v221,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_CurrentDatagramCount %u",  buf,  8u);
                }

                v223 = os_log_shim_legacy_logging_enabled(v222);
                if ((_DWORD)v223)
                {
                  if (_IDSShouldLogTransport(v223))
                  {
                    v628 = v218;
                    _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_CurrentDatagramCount %u");
                    if (_IDSShouldLog(0LL, @"IDSDSession"))
                    {
                      v628 = v218;
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_CurrentDatagramCount %u");
                    }
                  }
                }
              }
            }

            else
            {
              v449 = OSLogHandleForTransportCategory("IDSDSession");
              v450 = (os_log_s *)objc_claimAutoreleasedReturnValue(v449);
              if (os_log_type_enabled(v450, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v667;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v450,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_CurrentDatagramCount should be 1 byte, not %u bytes, field: %u",  buf,  0xEu);
              }

              v452 = os_log_shim_legacy_logging_enabled(v451);
              if ((_DWORD)v452)
              {
                if (_IDSShouldLogTransport(v452))
                {
                  v628 = v667;
                  *(void *)&v629 = v669;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_CurrentDatagramCount should be 1 byte, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    v628 = v667;
                    *(void *)&v629 = v669;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_CurrentDatagramCount should be 1 byte, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          case 0x2Au:
            if (v667 == 1)
            {
              v224 = *v668;
              v225 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  v224));
              -[__CFDictionary setObject:forKeyedSubscript:]( Mutable,  "setObject:forKeyedSubscript:",  v225,  @"ccmdttdc");

              if (self->_verboseFunctionalLogging)
              {
                v226 = OSLogHandleForTransportCategory("IDSDSession");
                v227 = (os_log_s *)objc_claimAutoreleasedReturnValue(v226);
                if (os_log_type_enabled(v227, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 67109120;
                  *(_DWORD *)&uint8_t buf[4] = v224;
                  _os_log_impl( (void *)&_mh_execute_header,  v227,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_TotalDatagramCount %u",  buf,  8u);
                }

                v229 = os_log_shim_legacy_logging_enabled(v228);
                if ((_DWORD)v229)
                {
                  if (_IDSShouldLogTransport(v229))
                  {
                    v628 = v224;
                    _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_TotalDatagramCount %u");
                    if (_IDSShouldLog(0LL, @"IDSDSession"))
                    {
                      v628 = v224;
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_TotalDatagramCount %u");
                    }
                  }
                }
              }
            }

            else
            {
              v453 = OSLogHandleForTransportCategory("IDSDSession");
              v454 = (os_log_s *)objc_claimAutoreleasedReturnValue(v453);
              if (os_log_type_enabled(v454, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v667;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v454,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_TotalDatagramCount should be 1 byte, not %u bytes, field: %u",  buf,  0xEu);
              }

              v456 = os_log_shim_legacy_logging_enabled(v455);
              if ((_DWORD)v456)
              {
                if (_IDSShouldLogTransport(v456))
                {
                  v628 = v667;
                  *(void *)&v629 = v669;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_TotalDatagramCount should be 1 byte, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    v628 = v667;
                    *(void *)&v629 = v669;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_TotalDatagramCount should be 1 byte, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          case 0x2Du:
            if (v667 == 2)
            {
              v307 = __rev16(*(unsigned __int16 *)v668);
              v668 += 2;
              v308 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  v307));
              -[__CFDictionary setObject:forKeyedSubscript:]( Mutable,  "setObject:forKeyedSubscript:",  v308,  @"ccmdtsid");

              v309 = OSLogHandleForIDSCategory("IDSDSession");
              v310 = (os_log_s *)objc_claimAutoreleasedReturnValue(v309);
              if (os_log_type_enabled(v310, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v307;
                _os_log_impl((void *)&_mh_execute_header, v310, OS_LOG_TYPE_DEBUG, "got statsID %u", buf, 8u);
              }

              if (os_log_shim_legacy_logging_enabled(v311)
                && _IDSShouldLog(1LL, @"IDSDSession"))
              {
                v628 = v307;
                _IDSLogV(1LL, @"IDSFoundation", @"IDSDSession", @"got statsID %u");
              }
            }

            else
            {
              v497 = OSLogHandleForTransportCategory("IDSDSession");
              v498 = (os_log_s *)objc_claimAutoreleasedReturnValue(v497);
              if (os_log_type_enabled(v498, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v667;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v498,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_StatsID should be 2 byte, not %u bytes, field: %u",  buf,  0xEu);
              }

              v500 = os_log_shim_legacy_logging_enabled(v499);
              if ((_DWORD)v500)
              {
                if (_IDSShouldLogTransport(v500))
                {
                  v628 = v667;
                  *(void *)&v629 = v669;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_StatsID should be 2 byte, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    v628 = v667;
                    *(void *)&v629 = v669;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_StatsID should be 2 byte, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          case 0x33u:
            if (v667 == 1)
            {
              a5->var24[0].var20 |= 0x80u;
              a5->var24[0].var9 = 1;
            }

            else
            {
              v457 = OSLogHandleForTransportCategory("IDSDSession");
              v458 = (os_log_s *)objc_claimAutoreleasedReturnValue(v457);
              if (os_log_type_enabled(v458, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v667;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v458,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_OptOutPriorityFilter should be 1 byte, not %u bytes, field: %u",  buf,  0xEu);
              }

              v460 = os_log_shim_legacy_logging_enabled(v459);
              if ((_DWORD)v460)
              {
                if (_IDSShouldLogTransport(v460))
                {
                  v628 = v667;
                  *(void *)&v629 = v669;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_OptOutPriorityFilter should be 1 byte, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    v628 = v667;
                    *(void *)&v629 = v669;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_OptOutPriorityFilter should be 1 byte, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          case 0x34u:
            if (v667 == 1)
            {
              a5->var24[0].var20 |= 0x100u;
              a5->var24[0].var12 = 1;
            }

            else
            {
              v461 = OSLogHandleForTransportCategory("IDSDSession");
              v462 = (os_log_s *)objc_claimAutoreleasedReturnValue(v461);
              if (os_log_type_enabled(v462, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v667;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v462,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_TransitionPacketFlag should be 1 byte, not %u bytes, field: %u",  buf,  0xEu);
              }

              v464 = os_log_shim_legacy_logging_enabled(v463);
              if ((_DWORD)v464)
              {
                if (_IDSShouldLogTransport(v464))
                {
                  v628 = v667;
                  *(void *)&v629 = v669;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_TransitionPacketFlag should be 1 byte, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    v628 = v667;
                    *(void *)&v629 = v669;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_TransitionPacketFlag should be 1 byte, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          case 0x35u:
            if (v667 == 1)
            {
              v312 = OSLogHandleForIDSCategory("IDSDSession");
              v313 = (os_log_s *)objc_claimAutoreleasedReturnValue(v312);
              if (os_log_type_enabled(v313, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v313,  OS_LOG_TYPE_DEFAULT,  "got kClientChannelMetadataType_ForceUpdateEncryptionInfoKey",  buf,  2u);
              }

              if (os_log_shim_legacy_logging_enabled(v314)
                && _IDSShouldLog(0LL, @"IDSDSession"))
              {
                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"got kClientChannelMetadataType_ForceUpdateEncryptionInfoKey");
              }

              v315 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState", v628));
              v316 = (void *)objc_claimAutoreleasedReturnValue([v315 groupID]);

              if (v316)
              {
                v319 = im_primary_queue(v317, v318);
                v320 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v319);
                v659[0] = _NSConcreteStackBlock;
                v659[1] = 3221225472LL;
                v659[2] = sub_100084B78;
                v659[3] = &unk_1008F6010;
                v659[4] = self;
                v321 = dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT,  QOS_CLASS_USER_INITIATED,  0,  v659);
                dispatch_async(v320, v321);
              }

              else
              {
                v617 = OSLogHandleForTransportCategory("IDSDSession");
                v618 = (os_log_s *)objc_claimAutoreleasedReturnValue(v617);
                if (os_log_type_enabled(v618, OS_LOG_TYPE_DEFAULT))
                {
                  v619 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
                  v620 = (void *)objc_claimAutoreleasedReturnValue([v619 uniqueID]);
                  *(_DWORD *)buf = 138412290;
                  *(void *)&uint8_t buf[4] = v620;
                  _os_log_impl( (void *)&_mh_execute_header,  v618,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_ForceUpdateEncryptionInfoKey coudln't get the group ID for the session %@!",  buf,  0xCu);
                }

                v622 = os_log_shim_legacy_logging_enabled(v621);
                if ((_DWORD)v622)
                {
                  if (_IDSShouldLogTransport(v622))
                  {
                    v623 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
                    v628 = objc_claimAutoreleasedReturnValue([v623 uniqueID]);
                    _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_ForceUpdateEncryptionInfoKey coudln't get the group ID for the session %@!");

                    if (_IDSShouldLog(0LL, @"IDSDSession"))
                    {
                      v624 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState", v628));
                      v628 = objc_claimAutoreleasedReturnValue([v624 uniqueID]);
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_ForceUpdateEncryptionInfoKey coudln't get the group ID for the session %@!");
                    }
                  }
                }
              }
            }

            else
            {
              v501 = OSLogHandleForTransportCategory("IDSDSession");
              v502 = (os_log_s *)objc_claimAutoreleasedReturnValue(v501);
              if (os_log_type_enabled(v502, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v667;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v502,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_ForceUpdateEncryptionInfoKey should be 1 byte, not %u bytes, field: %u",  buf,  0xEu);
              }

              v504 = os_log_shim_legacy_logging_enabled(v503);
              if ((_DWORD)v504)
              {
                if (_IDSShouldLogTransport(v504))
                {
                  v628 = v667;
                  *(void *)&v629 = v669;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_ForceUpdateEncryptionInfoKey should be 1 byte, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    v628 = v667;
                    *(void *)&v629 = v669;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_ForceUpdateEncryptionInfoKey should be 1 byte, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          case 0x39u:
            uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v668, v667));
            if (v27)
            {
              v230 = (void *)objc_claimAutoreleasedReturnValue( +[IDSSessionInfoMetadataSerializer deserializeSessionInfoMetadata:]( &OBJC_CLASS___IDSSessionInfoMetadataSerializer,  "deserializeSessionInfoMetadata:",  v27));
              if (v230)
              {
                v231 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession utunController](self, "utunController"));
                v232 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
                v233 = (void *)objc_claimAutoreleasedReturnValue([v232 uniqueID]);
                objc_msgSend(v231, "onTransportThread_startLinkProbing:options:", v233, v230);
              }

              else
              {
                v587 = OSLogHandleForTransportCategory("IDSSession");
                v588 = (os_log_s *)objc_claimAutoreleasedReturnValue(v587);
                if (os_log_type_enabled(v588, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v588,  OS_LOG_TYPE_DEFAULT,  "There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_StartLinkProbingKey",  buf,  2u);
                }

                v590 = os_log_shim_legacy_logging_enabled(v589);
                if ((_DWORD)v590)
                {
                  if (_IDSShouldLogTransport(v590))
                  {
                    _IDSLogTransport( @"IDSSession",  @"IDS",  @"There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_StartLinkProbingKey");
                    if (_IDSShouldLog(0LL, @"IDSSession")) {
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSSession",  @"There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_StartLinkProbingKey");
                    }
                  }
                }
              }
            }

            else
            {
              v533 = OSLogHandleForTransportCategory("IDSDSession");
              v534 = (os_log_s *)objc_claimAutoreleasedReturnValue(v533);
              if (os_log_type_enabled(v534, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v534,  OS_LOG_TYPE_DEFAULT,  "Couldn't get NSData for kClientChannelMetadataType_StartLinkProbingKey.",  buf,  2u);
              }

              v536 = os_log_shim_legacy_logging_enabled(v535);
              if ((_DWORD)v536)
              {
                if (_IDSShouldLogTransport(v536))
                {
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"Couldn't get NSData for kClientChannelMetadataType_StartLinkProbingKey.");
                  if (_IDSShouldLog(0LL, @"IDSDSession")) {
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Couldn't get NSData for kClientChannelMetadataType_StartLinkProbingKey.");
                  }
                }
              }
            }

            goto LABEL_772;
          case 0x3Au:
            uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v668, v667));
            if (v27)
            {
              v234 = (void *)objc_claimAutoreleasedReturnValue( +[IDSSessionInfoMetadataSerializer deserializeSessionInfoMetadata:]( &OBJC_CLASS___IDSSessionInfoMetadataSerializer,  "deserializeSessionInfoMetadata:",  v27));
              if (v234)
              {
                v235 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession utunController](self, "utunController"));
                v236 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
                v237 = (void *)objc_claimAutoreleasedReturnValue([v236 uniqueID]);
                objc_msgSend(v235, "onTransportThread_stopLinkProbing:options:", v237, v234);
              }

              else
              {
                v591 = OSLogHandleForTransportCategory("IDSSession");
                v592 = (os_log_s *)objc_claimAutoreleasedReturnValue(v591);
                if (os_log_type_enabled(v592, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v592,  OS_LOG_TYPE_DEFAULT,  "There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_StopLinkProbingKey",  buf,  2u);
                }

                v594 = os_log_shim_legacy_logging_enabled(v593);
                if ((_DWORD)v594)
                {
                  if (_IDSShouldLogTransport(v594))
                  {
                    _IDSLogTransport( @"IDSSession",  @"IDS",  @"There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_StopLinkProbingKey");
                    if (_IDSShouldLog(0LL, @"IDSSession")) {
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSSession",  @"There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_StopLinkProbingKey");
                    }
                  }
                }
              }
            }

            else
            {
              v537 = OSLogHandleForTransportCategory("IDSDSession");
              v538 = (os_log_s *)objc_claimAutoreleasedReturnValue(v537);
              if (os_log_type_enabled(v538, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v538,  OS_LOG_TYPE_DEFAULT,  "Couldn't get NSData for kClientChannelMetadataType_StopLinkProbingKey.",  buf,  2u);
              }

              v540 = os_log_shim_legacy_logging_enabled(v539);
              if ((_DWORD)v540)
              {
                if (_IDSShouldLogTransport(v540))
                {
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"Couldn't get NSData for kClientChannelMetadataType_StopLinkProbingKey.");
                  if (_IDSShouldLog(0LL, @"IDSDSession")) {
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Couldn't get NSData for kClientChannelMetadataType_StopLinkProbingKey.");
                  }
                }
              }
            }

            goto LABEL_772;
          case 0x3Bu:
            uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v668, v667));
            if (v27)
            {
              v238 = (void *)objc_claimAutoreleasedReturnValue( +[IDSSessionInfoMetadataSerializer deserializeSessionInfoMetadata:]( &OBJC_CLASS___IDSSessionInfoMetadataSerializer,  "deserializeSessionInfoMetadata:",  v27));
              if (v238)
              {
                v239 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession utunController](self, "utunController"));
                v240 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
                v241 = (void *)objc_claimAutoreleasedReturnValue([v240 uniqueID]);
                objc_msgSend(v239, "onTransportThread_queryLinkProbingStatus:options:", v241, v238);
              }

              else
              {
                v595 = OSLogHandleForTransportCategory("IDSSession");
                v596 = (os_log_s *)objc_claimAutoreleasedReturnValue(v595);
                if (os_log_type_enabled(v596, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v596,  OS_LOG_TYPE_DEFAULT,  "There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_QueryLinkStatusKey",  buf,  2u);
                }

                v598 = os_log_shim_legacy_logging_enabled(v597);
                if ((_DWORD)v598)
                {
                  if (_IDSShouldLogTransport(v598))
                  {
                    _IDSLogTransport( @"IDSSession",  @"IDS",  @"There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_QueryLinkStatusKey");
                    if (_IDSShouldLog(0LL, @"IDSSession")) {
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSSession",  @"There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_QueryLinkStatusKey");
                    }
                  }
                }
              }
            }

            else
            {
              v541 = OSLogHandleForTransportCategory("IDSDSession");
              v542 = (os_log_s *)objc_claimAutoreleasedReturnValue(v541);
              if (os_log_type_enabled(v542, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v542,  OS_LOG_TYPE_DEFAULT,  "Couldn't get NSData for kClientChannelMetadataType_QueryLinkStatusKey.",  buf,  2u);
              }

              v544 = os_log_shim_legacy_logging_enabled(v543);
              if ((_DWORD)v544)
              {
                if (_IDSShouldLogTransport(v544))
                {
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"Couldn't get NSData for kClientChannelMetadataType_QueryLinkStatusKey.");
                  if (_IDSShouldLog(0LL, @"IDSDSession")) {
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Couldn't get NSData for kClientChannelMetadataType_QueryLinkStatusKey.");
                  }
                }
              }
            }

            goto LABEL_772;
          case 0x40u:
            uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v668, v667));
            if (v27)
            {
              v242 = (void *)objc_claimAutoreleasedReturnValue( +[IDSSessionInfoMetadataSerializer deserializeSessionInfoMetadata:]( &OBJC_CLASS___IDSSessionInfoMetadataSerializer,  "deserializeSessionInfoMetadata:",  v27));
              if (v242)
              {
                v243 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession utunController](self, "utunController"));
                v244 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
                v245 = (void *)objc_claimAutoreleasedReturnValue([v244 uniqueID]);
                objc_msgSend(v243, "onTransportThread_flushLinkProbingStatus:options:", v245, v242);
              }

              else
              {
                v599 = OSLogHandleForTransportCategory("IDSSession");
                v600 = (os_log_s *)objc_claimAutoreleasedReturnValue(v599);
                if (os_log_type_enabled(v600, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v600,  OS_LOG_TYPE_DEFAULT,  "There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_flushLinkProbingStatusKey",  buf,  2u);
                }

                v602 = os_log_shim_legacy_logging_enabled(v601);
                if ((_DWORD)v602)
                {
                  if (_IDSShouldLogTransport(v602))
                  {
                    _IDSLogTransport( @"IDSSession",  @"IDS",  @"There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_flushLinkProbingStatusKey");
                    if (_IDSShouldLog(0LL, @"IDSSession")) {
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSSession",  @"There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_flushLinkProbingStatusKey");
                    }
                  }
                }
              }
            }

            else
            {
              v545 = OSLogHandleForTransportCategory("IDSDSession");
              v546 = (os_log_s *)objc_claimAutoreleasedReturnValue(v545);
              if (os_log_type_enabled(v546, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v546,  OS_LOG_TYPE_DEFAULT,  "Couldn't get NSData for kClientChannelMetadataType_flushLinkProbingStatusKey.",  buf,  2u);
              }

              v548 = os_log_shim_legacy_logging_enabled(v547);
              if ((_DWORD)v548)
              {
                if (_IDSShouldLogTransport(v548))
                {
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"Couldn't get NSData for kClientChannelMetadataType_flushLinkProbingStatusKey.");
                  if (_IDSShouldLog(0LL, @"IDSDSession")) {
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Couldn't get NSData for kClientChannelMetadataType_flushLinkProbingStatusKey.");
                  }
                }
              }
            }

            goto LABEL_772;
          case 0x41u:
            if (v667 == 4)
            {
              v246 = *(_DWORD *)v668;
              v668 += 4;
              v247 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession utunController](self, "utunController"));
              v248 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
              v249 = (void *)objc_claimAutoreleasedReturnValue([v248 uniqueID]);
              objc_msgSend(v247, "onTransportThread_setRemoteDeviceVersion:version:", v249, bswap32(v246));
            }

            else
            {
              v465 = OSLogHandleForTransportCategory("IDSDSession");
              v466 = (os_log_s *)objc_claimAutoreleasedReturnValue(v465);
              if (os_log_type_enabled(v466, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)&uint8_t buf[4] = 4;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v667;
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&uint8_t buf[16] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v466,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_RemoteDeviceVersionKey should be %u bytes, not %u bytes, field: %u",  buf,  0x14u);
              }

              v468 = os_log_shim_legacy_logging_enabled(v467);
              if ((_DWORD)v468)
              {
                if (_IDSShouldLogTransport(v468))
                {
                  *(void *)&v629 = v667;
                  *(void *)&v630 = v669;
                  v628 = 4LL;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_RemoteDeviceVersionKey should be %u bytes, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    *(void *)&v629 = v667;
                    *(void *)&v630 = v669;
                    v628 = 4LL;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_RemoteDeviceVersionKey should be %u bytes, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          case 0x42u:
            if (v667)
            {
              v250 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
              v251 = v667;
              *(void *)&v252 = v667 >> 3;
              v253 = OSLogHandleForTransportCategory("IDSDSession");
              v254 = (os_log_s *)objc_claimAutoreleasedReturnValue(v253);
              if (os_log_type_enabled(v254, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v667;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = LODWORD(v252);
                _os_log_impl( (void *)&_mh_execute_header,  v254,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_MKMParticipantIDsKey: size: %u, count: %u",  buf,  0xEu);
              }

              v256 = os_log_shim_legacy_logging_enabled(v255);
              if ((_DWORD)v256)
              {
                if (_IDSShouldLogTransport(v256))
                {
                  v628 = v667;
                  v629 = v252;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_MKMParticipantIDsKey: size: %u, count: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    v628 = v667;
                    v629 = v252;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_MKMParticipantIDsKey: size: %u, count: %u");
                  }
                }
              }

              if (v251 >= 8)
              {
                v557 = 0LL;
                if (LODWORD(v252) <= 1) {
                  v558 = 1;
                }
                else {
                  v558 = LODWORD(v252);
                }
                v559 = 8LL * v558;
                do
                {
                  v560 = *(void *)&v668[v557];
                  v561 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v560,  v628));
                  -[NSMutableArray addObject:](v250, "addObject:", v561);

                  v562 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDSession _getPushTokenFromParticipantID:]( self,  "_getPushTokenFromParticipantID:",  v560));
                  if (v562)
                  {
                    v563 = (void *)objc_claimAutoreleasedReturnValue( -[IDSGFTMetricsCollector joinCycleForToken:]( self->_metricsCollector,  "joinCycleForToken:",  v562));
                    [v563 requestedKM];
                  }

                  else
                  {
                    v564 = OSLogHandleForTransportCategory("IDSDSession");
                    v565 = (os_log_s *)objc_claimAutoreleasedReturnValue(v564);
                    if (os_log_type_enabled(v565, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 134217984;
                      *(void *)&uint8_t buf[4] = v560;
                      _os_log_impl( (void *)&_mh_execute_header,  v565,  OS_LOG_TYPE_DEFAULT,  "Couldn't get URI for MKMParticipantID %llu",  buf,  0xCu);
                    }

                    v567 = os_log_shim_legacy_logging_enabled(v566);
                    if ((_DWORD)v567)
                    {
                      if (_IDSShouldLogTransport(v567))
                      {
                        v628 = v560;
                        _IDSLogTransport( @"IDSDSession",  @"IDS",  @"Couldn't get URI for MKMParticipantID %llu");
                        if (_IDSShouldLog(0LL, @"IDSDSession"))
                        {
                          v628 = v560;
                          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Couldn't get URI for MKMParticipantID %llu");
                        }
                      }
                    }
                  }

                  v557 += 8LL;
                }

                while (v559 != v557);
              }

              v257 = OSLogHandleForTransportCategory("IDSDSession");
              v258 = (os_log_s *)objc_claimAutoreleasedReturnValue(v257);
              if (os_log_type_enabled(v258, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                *(void *)&uint8_t buf[4] = v250;
                _os_log_impl( (void *)&_mh_execute_header,  v258,  OS_LOG_TYPE_DEFAULT,  "participantIDArray: %@",  buf,  0xCu);
              }

              v260 = os_log_shim_legacy_logging_enabled(v259);
              if ((_DWORD)v260)
              {
                if (_IDSShouldLogTransport(v260))
                {
                  v628 = (uint64_t)v250;
                  _IDSLogTransport(@"IDSDSession", @"IDS", @"participantIDArray: %@");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    v628 = (uint64_t)v250;
                    _IDSLogV(0LL, @"IDSFoundation", @"IDSDSession", @"participantIDArray: %@");
                  }
                }
              }

              v261 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance",  v628));
              v262 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
              v263 = (void *)objc_claimAutoreleasedReturnValue([v262 groupID]);
              v264 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
              v265 = (void *)objc_claimAutoreleasedReturnValue([v264 uniqueID]);
              [v261 sendKeyMaterialsRecoveryRequestToParticipants:v250 groupID:v263 sessionID:v265 requireMKM:1 requireSKM:0];
            }

            else
            {
              v521 = OSLogHandleForTransportCategory("IDSDSession");
              v522 = (os_log_s *)objc_claimAutoreleasedReturnValue(v521);
              if (os_log_type_enabled(v522, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v522,  OS_LOG_TYPE_DEFAULT,  "Couldn't get valid kClientChannelMetadataType_MKMParticipantIDsKey.",  buf,  2u);
              }

              v524 = os_log_shim_legacy_logging_enabled(v523);
              if ((_DWORD)v524)
              {
                if (_IDSShouldLogTransport(v524))
                {
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"Couldn't get valid kClientChannelMetadataType_MKMParticipantIDsKey.");
                  if (_IDSShouldLog(0LL, @"IDSDSession")) {
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Couldn't get valid kClientChannelMetadataType_MKMParticipantIDsKey.");
                  }
                }
              }
            }

            break;
          case 0x43u:
            if (v667 == 1)
            {
              -[__CFDictionary setObject:forKeyedSubscript:]( Mutable,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"ccmdtnhbhe");
            }

            else
            {
              v469 = OSLogHandleForTransportCategory("IDSDSession");
              v470 = (os_log_s *)objc_claimAutoreleasedReturnValue(v469);
              if (os_log_type_enabled(v470, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = 1;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v667;
                _os_log_impl( (void *)&_mh_execute_header,  v470,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_NeedsHBHEncryption should be %u byte, not %u",  buf,  0xEu);
              }

              v472 = os_log_shim_legacy_logging_enabled(v471);
              if ((_DWORD)v472)
              {
                if (_IDSShouldLogTransport(v472))
                {
                  v628 = 1LL;
                  *(void *)&v629 = v667;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_NeedsHBHEncryption should be %u byte, not %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    v628 = 1LL;
                    *(void *)&v629 = v667;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_NeedsHBHEncryption should be %u byte, not %u");
                  }
                }
              }
            }

            break;
          case 0x44u:
            if (v667 == 2)
            {
              v266 = v668;
              v267 = *v668++;
              v268 = *v668;
              v668 = v266 + 2;
              if (v267)
              {
                self->_switchedToUPlusMany = 0;
                v269 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
                [v269 setIsInUPlusOneMode:1];

                v270 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
                [v270 setIsInitiator:v268 != 0];

                v271 = OSLogHandleForTransportCategory("IDSDSession");
                v272 = (os_log_s *)objc_claimAutoreleasedReturnValue(v271);
                if (os_log_type_enabled(v272, OS_LOG_TYPE_DEFAULT))
                {
                  v273 = @"NO";
                  if (v268) {
                    v273 = @"YES";
                  }
                  *(_DWORD *)buf = 138412290;
                  *(void *)&uint8_t buf[4] = v273;
                  _os_log_impl( (void *)&_mh_execute_header,  v272,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_IsUPlusOneEnabledKey [U+1] enabling with isInitiator: %@",  buf,  0xCu);
                }

                v275 = os_log_shim_legacy_logging_enabled(v274);
                if ((_DWORD)v275 && _IDSShouldLogTransport(v275))
                {
                  v276 = v268 ? @"YES" : @"NO";
                  v628 = (uint64_t)v276;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_IsUPlusOneEnabledKey [U+1] enabling with isInitiator: %@");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    v628 = (uint64_t)v276;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_IsUPlusOneEnabledKey [U+1] enabling with isInitiator: %@");
                  }
                }
              }

              else
              {
                self->_switchedToUPlusMany = 1;
                v607 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
                [v607 setIsInUPlusOneMode:0];
              }

              v608 = v267 != 0;
              v609 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
              -[IDSGFTMetricsCollector setIsInitiator:]( self->_metricsCollector,  "setIsInitiator:",  [v609 isInitiator]);

              v610 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession utunController](self, "utunController"));
              v611 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
              v612 = (void *)objc_claimAutoreleasedReturnValue([v611 uniqueID]);
              objc_msgSend(v610, "onTransportThread_setUPlusOneModeForSessionID:isUPlusOneEnabled:", v612, v608);
            }

            else
            {
              v473 = OSLogHandleForTransportCategory("IDSDSession");
              v474 = (os_log_s *)objc_claimAutoreleasedReturnValue(v473);
              if (os_log_type_enabled(v474, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)&uint8_t buf[4] = 2;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v667;
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&uint8_t buf[16] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v474,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_IsUPlusOneEnabledKey should be %u bytes, not %u bytes, field: %u",  buf,  0x14u);
              }

              v476 = os_log_shim_legacy_logging_enabled(v475);
              if ((_DWORD)v476)
              {
                if (_IDSShouldLogTransport(v476))
                {
                  *(void *)&v629 = v667;
                  *(void *)&v630 = v669;
                  v628 = 2LL;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_IsUPlusOneEnabledKey should be %u bytes, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    *(void *)&v629 = v667;
                    *(void *)&v630 = v669;
                    v628 = 2LL;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_IsUPlusOneEnabledKey should be %u bytes, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          case 0x45u:
            if (v667 == 8)
            {
              v277 = *v668;
              v278 = v668[1];
              v279 = v668[2];
              v280 = v668[3];
              v281 = v668[4];
              v282 = v668[5];
              v632 = v668[6];
              v631 = v668[7];
              v668 += 8;
              v283 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
              v284 = (void *)objc_claimAutoreleasedReturnValue([v283 groupID]);

              if (v284)
              {
                v285 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
                v286 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
                v287 = (void *)objc_claimAutoreleasedReturnValue([v286 groupID]);
                [v285 storeEncryptionSequenceNumber:(v277 << 56) | (v278 << 48) | (v279 << 40) | (v280 << 32) | (v281 << 24) | (v282 << 16) | (v632 << 8) | v631 groupID:v287];
              }
            }

            else
            {
              v477 = OSLogHandleForTransportCategory("IDSDSession");
              v478 = (os_log_s *)objc_claimAutoreleasedReturnValue(v477);
              if (os_log_type_enabled(v478, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)&uint8_t buf[4] = 8;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v667;
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&uint8_t buf[16] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v478,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_EncryptionSequenceNumber should be %u bytes, not %u bytes, field: %u",  buf,  0x14u);
              }

              v480 = os_log_shim_legacy_logging_enabled(v479);
              if ((_DWORD)v480)
              {
                if (_IDSShouldLogTransport(v480))
                {
                  *(void *)&v629 = v667;
                  *(void *)&v630 = v669;
                  v628 = 8LL;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_EncryptionSequenceNumber should be %u bytes, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    *(void *)&v629 = v667;
                    *(void *)&v630 = v669;
                    v628 = 8LL;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_EncryptionSequenceNumber should be %u bytes, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          case 0x47u:
            if (v667 == 1)
            {
              a5->var24[0].var20 |= 0x10000u;
              a5->var24[0].var17 = 1;
            }

            else
            {
              v481 = OSLogHandleForTransportCategory("IDSDSession");
              v482 = (os_log_s *)objc_claimAutoreleasedReturnValue(v481);
              if (os_log_type_enabled(v482, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = 1;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v667;
                _os_log_impl( (void *)&_mh_execute_header,  v482,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_RetransmittedPacket should be %u byte, not %u",  buf,  0xEu);
              }

              v484 = os_log_shim_legacy_logging_enabled(v483);
              if ((_DWORD)v484)
              {
                if (_IDSShouldLogTransport(v484))
                {
                  v628 = 1LL;
                  *(void *)&v629 = v667;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_RetransmittedPacket should be %u byte, not %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    v628 = 1LL;
                    *(void *)&v629 = v667;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_RetransmittedPacket should be %u byte, not %u");
                  }
                }
              }
            }

            break;
          case 0x48u:
            if (v667 == 1)
            {
              a5->var24[0].var20 |= 0x20000u;
              a5->var24[0].var18 = 1;
            }

            else
            {
              v485 = OSLogHandleForTransportCategory("IDSDSession");
              v486 = (os_log_s *)objc_claimAutoreleasedReturnValue(v485);
              if (os_log_type_enabled(v486, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = 1;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v667;
                _os_log_impl( (void *)&_mh_execute_header,  v486,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_NonRetransmittablePacket should be %u byte, not %u",  buf,  0xEu);
              }

              v488 = os_log_shim_legacy_logging_enabled(v487);
              if ((_DWORD)v488)
              {
                if (_IDSShouldLogTransport(v488))
                {
                  v628 = 1LL;
                  *(void *)&v629 = v667;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_NonRetransmittablePacket should be %u byte, not %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    v628 = 1LL;
                    *(void *)&v629 = v667;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_NonRetransmittablePacket should be %u byte, not %u");
                  }
                }
              }
            }

            break;
          case 0x4Cu:
            if (v667 == 1)
            {
              v322 = *v668;
              v655[0] = _NSConcreteStackBlock;
              v655[1] = 3221225472LL;
              v655[2] = sub_100084D7C;
              v655[3] = &unk_1008F8960;
              v655[4] = self;
              v656 = v322;
              IDSTransportThreadAddBlock(v655, v8);
            }

            else
            {
              v505 = OSLogHandleForTransportCategory("IDSDSession");
              v506 = (os_log_s *)objc_claimAutoreleasedReturnValue(v505);
              if (os_log_type_enabled(v506, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = 1;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v667;
                _os_log_impl( (void *)&_mh_execute_header,  v506,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_ChildConnectionID should be %u bytes, not %u bytes",  buf,  0xEu);
              }

              v508 = os_log_shim_legacy_logging_enabled(v507);
              if ((_DWORD)v508)
              {
                if (_IDSShouldLogTransport(v508))
                {
                  v628 = 1LL;
                  *(void *)&v629 = v667;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_ChildConnectionID should be %u bytes, not %u bytes");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    v628 = 1LL;
                    *(void *)&v629 = v667;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_ChildConnectionID should be %u bytes, not %u bytes");
                  }
                }
              }
            }

            break;
          case 0x4Du:
            uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v668, v667));
            if (v27)
            {
              v323 = (void *)objc_claimAutoreleasedReturnValue( +[IDSSessionInfoMetadataSerializer deserializeSessionInfoMetadata:]( &OBJC_CLASS___IDSSessionInfoMetadataSerializer,  "deserializeSessionInfoMetadata:",  v27));
              if (v323)
              {
                v324 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession utunController](self, "utunController"));
                v325 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
                v326 = (void *)objc_claimAutoreleasedReturnValue([v325 uniqueID]);
                objc_msgSend(v324, "onTransportThread_sendStatsRequestWithOptions:options:", v326, v323);
              }

              else
              {
                v603 = OSLogHandleForTransportCategory("IDSSession");
                v604 = (os_log_s *)objc_claimAutoreleasedReturnValue(v603);
                if (os_log_type_enabled(v604, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v604,  OS_LOG_TYPE_DEFAULT,  "There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_StatsRequestData",  buf,  2u);
                }

                v606 = os_log_shim_legacy_logging_enabled(v605);
                if ((_DWORD)v606)
                {
                  if (_IDSShouldLogTransport(v606))
                  {
                    _IDSLogTransport( @"IDSSession",  @"IDS",  @"There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_StatsRequestData");
                    if (_IDSShouldLog(0LL, @"IDSSession")) {
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSSession",  @"There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_StatsRequestData");
                    }
                  }
                }
              }
            }

            else
            {
              v549 = OSLogHandleForTransportCategory("IDSDSession");
              v550 = (os_log_s *)objc_claimAutoreleasedReturnValue(v549);
              if (os_log_type_enabled(v550, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v550,  OS_LOG_TYPE_DEFAULT,  "Couldn't get NSData for kClientChannelMetadataType_StatsRequestData.",  buf,  2u);
              }

              v552 = os_log_shim_legacy_logging_enabled(v551);
              if ((_DWORD)v552)
              {
                if (_IDSShouldLogTransport(v552))
                {
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"Couldn't get NSData for kClientChannelMetadataType_StatsRequestData.");
                  if (_IDSShouldLog(0LL, @"IDSDSession")) {
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Couldn't get NSData for kClientChannelMetadataType_StatsRequestData.");
                  }
                }
              }
            }

            goto LABEL_772;
          case 0x4Eu:
          case 0x4Fu:
          case 0x50u:
            unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v668, v667));
            uint64_t v10 = JWDecodeDictionary();
            __int128 v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
            __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:v646]);
            if (v12
              && (__int128 v13 = objc_opt_self(&OBJC_CLASS___NSString),
                  __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(v13),
                  char isKindOfClass = objc_opt_isKindOfClass(v12, v14),
                  v14,
                  (isKindOfClass & 1) != 0))
            {
              uint64_t v16 = -[NSUUID initWithUUIDString:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDString:", v12);
              if (!v16)
              {
                uint64_t v17 = OSLogHandleForTransportCategory("IDSDSession");
                uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
                if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "_extractFieldBytesFromMetadata report dictionary: could not read MKI as UUID",  buf,  2u);
                }

                __int16 v20 = os_log_shim_legacy_logging_enabled(v19);
                if ((_DWORD)v20)
                {
                  if (_IDSShouldLogTransport(v20))
                  {
                    _IDSLogTransport( @"IDSDSession",  @"IDS",  @"_extractFieldBytesFromMetadata report dictionary: could not read MKI as UUID");
                    if (_IDSShouldLog(0LL, @"IDSDSession")) {
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"_extractFieldBytesFromMetadata report dictionary: could not read MKI as UUID");
                    }
                  }
                }
              }

              uint64_t v21 = v636;
              if (((v669 & 0xFE) == 0x4E || (uint64_t v21 = v635, v669 == 80))
                && (uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v21, v628)),
                    (id v23 = v22) != 0LL))
              {
                [v22 doubleValue];
                uint64_t v25 = v24;
                switch(v669)
                {
                  case 'P':
                    v625 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:v633]);
                    v626 = [v625 BOOLValue];

                    -[IDSGFTMetricsCollector avcReceiveMKMTime:forMKI:isGeneratedLocally:]( self->_metricsCollector,  "avcReceiveMKMTime:forMKI:isGeneratedLocally:",  v16,  v626,  v25);
                    break;
                  case 'O':
                    -[IDSGFTMetricsCollector firstOutgoingPacketTime:forMKI:]( self->_metricsCollector,  "firstOutgoingPacketTime:forMKI:",  v16,  v24);
                    break;
                  case 'N':
                    -[IDSGFTMetricsCollector firstIncomingPacketTime:forMKI:]( self->_metricsCollector,  "firstIncomingPacketTime:forMKI:",  v16,  v24);
                    break;
                }
              }

              else
              {
                v517 = OSLogHandleForTransportCategory("IDSDSession");
                v518 = (os_log_s *)objc_claimAutoreleasedReturnValue(v517);
                if (os_log_type_enabled(v518, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v518,  OS_LOG_TYPE_DEFAULT,  "_extractFieldBytesFromMetadata report dictionary: could not read times",  buf,  2u);
                }

                v520 = os_log_shim_legacy_logging_enabled(v519);
                if ((_DWORD)v520)
                {
                  if (_IDSShouldLogTransport(v520))
                  {
                    _IDSLogTransport( @"IDSDSession",  @"IDS",  @"_extractFieldBytesFromMetadata report dictionary: could not read times");
                    if (_IDSShouldLog(0LL, @"IDSDSession")) {
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"_extractFieldBytesFromMetadata report dictionary: could not read times");
                    }
                  }
                }

                id v23 = 0LL;
              }
            }

            else
            {
              char v38 = OSLogHandleForTransportCategory("IDSDSession");
              unsigned int v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
              if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "_extractFieldBytesFromMetadata report dictionary: could not read MKI",  buf,  2u);
              }

              uint64_t v41 = os_log_shim_legacy_logging_enabled(v40);
              if ((_DWORD)v41)
              {
                if (_IDSShouldLogTransport(v41))
                {
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"_extractFieldBytesFromMetadata report dictionary: could not read MKI");
                  if (_IDSShouldLog(0LL, @"IDSDSession")) {
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"_extractFieldBytesFromMetadata report dictionary: could not read MKI");
                  }
                }
              }
            }

            break;
          case 0x51u:
            v288 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v668, v667));
            v289 = JWDecodeDictionary();
            v290 = (void *)objc_claimAutoreleasedReturnValue(v289);
            v291 = (void *)objc_claimAutoreleasedReturnValue([v290 objectForKeyedSubscript:v639]);
            v292 = (void *)objc_claimAutoreleasedReturnValue([v290 objectForKeyedSubscript:v644]);
            v293 = [v292 unsignedCharValue];
            v294 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession utunController](self, "utunController"));
            v295 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
            v296 = (void *)objc_claimAutoreleasedReturnValue([v295 uniqueID]);
            objc_msgSend(v294, "onTransportThread_reportLinkEventForSessionID:eventName:linkID:", v296, v291, v293);

            break;
          case 0x53u:
            v327 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v668, v667));
            v328 = JWDecodeDictionary();
            v329 = (void *)objc_claimAutoreleasedReturnValue(v328);
            v330 = (void *)objc_claimAutoreleasedReturnValue([v329 objectForKeyedSubscript:v644]);
            v331 = [v330 unsignedCharValue];

            v332 = (void *)objc_claimAutoreleasedReturnValue([v329 objectForKeyedSubscript:v638]);
            [v332 doubleValue];
            v334 = v333;

            v335 = (void *)objc_claimAutoreleasedReturnValue([v329 objectForKeyedSubscript:v637]);
            [v335 doubleValue];
            v337 = v336;

            v338 = OSLogHandleForTransportCategory("IDSDSession");
            v339 = (os_log_s *)objc_claimAutoreleasedReturnValue(v338);
            if (os_log_type_enabled(v339, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109632;
              *(_DWORD *)&uint8_t buf[4] = (_DWORD)v331;
              *(_WORD *)&buf[8] = 2048;
              *(double *)&buf[10] = v334;
              *(_WORD *)&buf[18] = 2048;
              *(double *)&buf[20] = v337;
              _os_log_impl( (void *)&_mh_execute_header,  v339,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_LinkMetricsKey: linkID:%d lastPacketReceivedTime:%f lastPacketSentTime:%f",  buf,  0x1Cu);
            }

            v341 = os_log_shim_legacy_logging_enabled(v340);
            if ((_DWORD)v341)
            {
              if (_IDSShouldLogTransport(v341))
              {
                v629 = v334;
                v630 = v337;
                v628 = v331;
                _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_LinkMetricsKey: linkID:%d lastPacketReceivedTime:%f lastPacketSentTime:%f");
                if (_IDSShouldLog(0LL, @"IDSDSession"))
                {
                  v629 = v334;
                  v630 = v337;
                  v628 = (uint64_t)v331;
                  _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_LinkMetricsKey: linkID:%d lastPacketReceivedTime:%f lastPacketSentTime:%f");
                }
              }
            }

            v342 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDSession utunController]( self,  "utunController",  v628,  *(void *)&v629,  *(void *)&v630));
            v343 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
            v344 = (void *)objc_claimAutoreleasedReturnValue([v343 uniqueID]);
            objc_msgSend( v342,  "onTransportThread_reportLinkMetricsForSessionID:linkID:lastPacketReceivedTime:lastPacketSentTime:",  v344,  v331,  v334,  v337);

            break;
          case 0x54u:
            if (v667 == 1)
            {
              v297 = *v668++;
              v298 = OSLogHandleForIDSCategory("IDSDSession");
              v299 = (os_log_s *)objc_claimAutoreleasedReturnValue(v298);
              if (os_log_type_enabled(v299, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v297;
                _os_log_impl( (void *)&_mh_execute_header,  v299,  OS_LOG_TYPE_DEFAULT,  "got hasCompoundPacket %u",  buf,  8u);
              }

              if (os_log_shim_legacy_logging_enabled(v300)
                && _IDSShouldLog(0LL, @"IDSDSession"))
              {
                v628 = v297;
                _IDSLogV(0LL, @"IDSFoundation", @"IDSDSession", @"got hasCompoundPacket %u");
              }

              if ((_DWORD)v297) {
                -[IDSGFTMetricsCollector hasSentCompoundPacket](self->_metricsCollector, "hasSentCompoundPacket");
              }
            }

            else
            {
              v489 = OSLogHandleForTransportCategory("IDSDSession");
              v490 = (os_log_s *)objc_claimAutoreleasedReturnValue(v489);
              if (os_log_type_enabled(v490, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v667;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v669;
                _os_log_impl( (void *)&_mh_execute_header,  v490,  OS_LOG_TYPE_DEFAULT,  "kClientChannelMetadataType_CompoundPacketKey should be 1 bytes, not %u bytes, field: %u",  buf,  0xEu);
              }

              v492 = os_log_shim_legacy_logging_enabled(v491);
              if ((_DWORD)v492)
              {
                if (_IDSShouldLogTransport(v492))
                {
                  v628 = v667;
                  *(void *)&v629 = v669;
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"kClientChannelMetadataType_CompoundPacketKey should be 1 bytes, not %u bytes, field: %u");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    v628 = v667;
                    *(void *)&v629 = v669;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"kClientChannelMetadataType_CompoundPacketKey should be 1 bytes, not %u bytes, field: %u");
                  }
                }
              }
            }

            break;
          default:
            goto LABEL_372;
        }
      }
    }

    while ((IDSByteBufferReadField(v665, &v669, &v668, &v667) & 1) != 0);
  }

  IDSByteBufferRelease(v665);
  return Mutable;
}

void sub_100084708( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id *location)
{
}

void sub_100084884(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = OSLogHandleForTransportCategory("IDSDSession");
    unsigned int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v11 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "sendSKEData failed with error: %@. Will retry.",  buf,  0xCu);
    }

    uint64_t v7 = os_log_shim_legacy_logging_enabled(v6);
    if ((_DWORD)v7)
    {
      if (_IDSShouldLogTransport(v7))
      {
        _IDSLogTransport(@"IDSDSession", @"IDS", @"sendSKEData failed with error: %@. Will retry.");
        if (_IDSShouldLog(0LL, @"IDSDSession")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"sendSKEData failed with error: %@. Will retry.");
        }
      }
    }

    id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
    unint64_t v9 = WeakRetained;
    if (WeakRetained) {
      objc_storeStrong(WeakRetained + 72, *(id *)(a1 + 32));
    }
  }
}

void sub_1000849E4(uint64_t a1)
{
  __int128 v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountController]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 accountID]);
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v2 accountWithUniqueID:v4]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 primaryRegistration]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 pushToken]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 serviceName]);
  id v17 = (id)objc_claimAutoreleasedReturnValue( +[IDSPushToken pushTokenWithData:withServiceLoggingHint:]( &OBJC_CLASS___IDSPushToken,  "pushTokenWithData:withServiceLoggingHint:",  v7,  v9));

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
  id v11 = [v10 createRealTimeEncryptionFullIdentityForDevice:v17 completionBlock:0];

  __int128 v12 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
  __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 groupID]);
  int v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 uniqueID]);
  [v12 reliablyRequestKeyMaterialForGroup:v14 sessionID:v16];
}

void sub_100084B78(uint64_t a1)
{
  __int128 v2 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 accountID]);
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 fromURI]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 groupID]);
  [v2 setAccount:v4 fromURI:v6 forGroup:v8];

  unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 groupID]);
  [v9 resetKeysForGroup:v11 shouldRemoveCurrentParticipants:1];

  id v16 = (id)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
  __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v12 groupID]);
  __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  int v15 = (void *)objc_claimAutoreleasedReturnValue([v14 uniqueID]);
  [v16 requestKeyMaterialForGroup:v13 sessionID:v15];
}

void sub_100084D08(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) utunController]);
  __int128 v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
  objc_msgSend(v4, "onTransportThread_sendStatsRequest:options:", v3, *(void *)(a1 + 40));
}

void sub_100084D7C(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) utunController]);
  uint64_t v2 = *(char *)(a1 + 40);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
  objc_msgSend(v5, "onTransportThread_requestChildConnectionIDForLinkID:sessionID:", v2, v4);
}

void sub_10008500C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

id sub_100085050(uint64_t a1)
{
  return [*(id *)(a1 + 32) endSessionWithReason:20];
}

uint64_t sub_10008505C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, void *a5)
{
  id v8 = a5;
  if (qword_1009BE930 != -1) {
    dispatch_once(&qword_1009BE930, &stru_1008F91C0);
  }
  uint64_t v9 = mach_continuous_time();
  if (v8)
  {
    uint64_t v10 = OSLogHandleForTransportCategory("IDSDSession");
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
      *(_DWORD *)buf = 138412546;
      *(void *)uint64_t v95 = v8;
      *(_WORD *)&v95[8] = 1024;
      LODWORD(v96) = [v12 state];
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "_connectQRDirectlyToClientChannel: ClientChannel read error %@, self.sharedState.state %d",  buf,  0x12u);
    }

    uint64_t v14 = os_log_shim_legacy_logging_enabled(v13);
    if ((_DWORD)v14)
    {
      if (_IDSShouldLogTransport(v14))
      {
        int v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
        id v81 = [v15 state];
        _IDSLogTransport( @"IDSDSession",  @"IDS",  @"_connectQRDirectlyToClientChannel: ClientChannel read error %@, self.sharedState.state %d");

        if (_IDSShouldLog(0LL, @"IDSDSession"))
        {
          id v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sharedState", v8, v81));
          [v16 state];
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"_connectQRDirectlyToClientChannel: ClientChannel read error %@, self.sharedState.state %d");
        }
      }
    }

    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v18 = WeakRetained;
    if (WeakRetained
      && (uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sharedState]),
          BOOL v20 = [v19 clientType] == (id)6,
          v19,
          !v20))
    {
      BOOL v29 = (void *)objc_claimAutoreleasedReturnValue([v18 sharedState]);
      unsigned int v30 = [v29 state];

      uint64_t v31 = OSLogHandleForTransportCategory("IDSDSession");
      uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)uint64_t v95 = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "_connectQRDirectlyToClientChannel: state: %u",  buf,  8u);
      }

      uint64_t v34 = os_log_shim_legacy_logging_enabled(v33);
      if ((_DWORD)v34)
      {
        uint64_t v34 = _IDSShouldLogTransport(v34);
        if ((_DWORD)v34)
        {
          _IDSLogTransport(@"IDSDSession", @"IDS", @"_connectQRDirectlyToClientChannel: state: %u");
          uint64_t v34 = _IDSShouldLog(0LL, @"IDSDSession");
          if ((_DWORD)v34) {
            uint64_t v34 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"_connectQRDirectlyToClientChannel: state: %u");
          }
        }
      }

      if (!v18[636] && v30 != 7)
      {
        uint64_t v36 = im_primary_queue(v34, v35);
        uint64_t v37 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v36);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_100085D1C;
        block[3] = &unk_1008F6010;
        void block[4] = *(void *)(a1 + 32);
        dispatch_block_t v38 = dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT,  QOS_CLASS_USER_INITIATED,  0,  block);
        dispatch_async(v37, v38);
      }
    }

    else
    {
      uint64_t v21 = OSLogHandleForTransportCategory("IDSDSession");
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)uint64_t v95 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "_connectQRDirectlyToClientChannel: strongSelf: %p, not ending session because we have not been told to.",  buf,  0xCu);
      }

      uint64_t v24 = os_log_shim_legacy_logging_enabled(v23);
      if ((_DWORD)v24)
      {
        if (_IDSShouldLogTransport(v24))
        {
          _IDSLogTransport( @"IDSDSession",  @"IDS",  @"_connectQRDirectlyToClientChannel: strongSelf: %p, not ending session because we have not been told to.");
          if (_IDSShouldLog(0LL, @"IDSDSession")) {
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"_connectQRDirectlyToClientChannel: strongSelf: %p, not ending session because we have not been told to.");
          }
        }
      }
    }

    _IDSLinkPacketBufferRelease( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSDSession.m",  2556LL,  a2);
    goto LABEL_99;
  }

  unint64_t v83 = v9;
  uint64_t v18 = 0LL;
  double v25 = *(double *)&qword_1009BE938;
  if (a3 && a4) {
    uint64_t v18 = (_BYTE *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _extractFieldBytesFromMetadata:a3 ofSize:a4 packetBuffer:a2]);
  }
  uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:@"ccmdtcdc"]);
  unsigned int v26 = [v91 unsignedCharValue];
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:@"ccmdttdc"]);
  uint64_t v90 = v27;
  if (v27) {
    uint64_t v28 = (uint64_t)[v27 unsignedCharValue];
  }
  else {
    uint64_t v28 = 1LL;
  }
  unsigned int v39 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:@"ccmdtpli"]);
  uint64_t v89 = v39;
  if (v39) {
    *(_BYTE *)(a2 + 1216) = [v39 charValue];
  }
  uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:@"ccmdttc"]);
  uint64_t v88 = v40;
  if (v40) {
    *(_WORD *)(a2 + 440) = (unsigned __int16)[v40 unsignedShortValue];
  }
  uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:@"ccmdtdscp"]);
  id v87 = v41;
  if (v41) {
    *(_BYTE *)(a2 + 442) = [v41 unsignedCharValue];
  }
  uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:@"ccmdtpid"]);
  uint64_t v86 = v42;
  if (v42)
  {
    *(_DWORD *)(a2 + 536) |= 1u;
    *(void *)(a2 + 48_Block_object_dispose((const void *)(v11 - 112), 8) = [v42 unsignedLongLongValue];
  }

  unint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:@"ccmdtpgid"]);
  uint64_t v85 = v43;
  if (v43)
  {
    *(_DWORD *)(a2 + 536) |= 0x10u;
    *(_WORD *)(a2 + 49_Block_object_dispose((const void *)(v11 - 112), 8) = (unsigned __int16)[v43 unsignedShortValue];
  }

  uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:@"ccmdtsid"]);
  uint64_t v45 = v44;
  if (v44)
  {
    *(_DWORD *)(a2 + 536) |= 0x40u;
    *(_WORD *)(a2 + 504) = (unsigned __int16)[v44 unsignedShortValue];
  }

  id v46 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:@"ccmdtcp"]);
  uint64_t v84 = v46;
  if (v46)
  {
    *(_DWORD *)(a2 + 536) |= 8u;
    *(_BYTE *)(a2 + 496) = [v46 unsignedCharValue];
  }

  dispatch_block_t v47 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:@"ccmdtipc"]);
  unsigned int v48 = [v47 BOOLValue];

  if (v48)
  {
    *(_DWORD *)(a2 + 536) |= 4u;
    *(_BYTE *)(a2 + 501) = 1;
  }

  uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:@"ccmdtnhbhe"]);
  unsigned int v50 = [v49 BOOLValue];

  if (v50)
  {
    *(_DWORD *)(a2 + 536) |= 0x400u;
    *(_BYTE *)(a2 + 517) = 1;
  }

  if (qword_1009BE930 != -1) {
    dispatch_once(&qword_1009BE930, &stru_1008F91C0);
  }
  uint64_t v82 = mach_continuous_time();
  uint64_t v51 = *(void *)(a2 + 16);
  BOOL v52 = v51 <= 0 && v45 == 0LL;
  double v53 = *(double *)&qword_1009BE938;
  if (v52 || !(_DWORD)v28)
  {
    if (v51 < 1 || v28 < 9)
    {
      uint64_t v67 = OSLogHandleForTransportCategory("IDSDSession");
      uint64_t v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)uint64_t v95 = v51;
        *(_WORD *)&v95[4] = 1024;
        *(_DWORD *)&v95[6] = v26;
        LOWORD(v96) = 1024;
        *(_DWORD *)((char *)&v96 + 2) = v28;
        _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "not sending to UTunController - packetBufferLength %d currentDatagramCount %u totalDatagramCount %u",  buf,  0x14u);
      }

      uint64_t v70 = os_log_shim_legacy_logging_enabled(v69);
      if ((_DWORD)v70)
      {
        if (_IDSShouldLogTransport(v70))
        {
          _IDSLogTransport( @"IDSDSession",  @"IDS",  @"not sending to UTunController - packetBufferLength %d currentDatagramCount %u totalDatagramCount %u");
          if (_IDSShouldLog(0LL, @"IDSDSession")) {
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"not sending to UTunController - packetBufferLength %d currentDatagramCount %u totalDatagramCount %u");
          }
        }
      }

      _IDSLinkPacketBufferRelease( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSDSession.m",  2642LL,  a2);
    }

    else
    {
      uint64_t v59 = OSLogHandleForTransportCategory("IDSDSession");
      uint64_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)uint64_t v95 = 8;
        *(_WORD *)&v95[4] = 1024;
        *(_DWORD *)&v95[6] = v28;
        _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "Can't send more than %u over the compound data channel! totalDatagramCount %u",  buf,  0xEu);
      }

      uint64_t v62 = os_log_shim_legacy_logging_enabled(v61);
      if ((_DWORD)v62)
      {
        if (_IDSShouldLogTransport(v62))
        {
          _IDSLogTransport( @"IDSDSession",  @"IDS",  @"Can't send more than %u over the compound data channel! totalDatagramCount %u");
          if (_IDSShouldLog(0LL, @"IDSDSession")) {
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Can't send more than %u over the compound data channel! totalDatagramCount %u");
          }
        }
      }

      _IDSLinkPacketBufferRelease( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSDSession.m",  2639LL,  a2);
    }

LABEL_85:
    unint64_t v58 = 0LL;
    goto LABEL_86;
  }

  *(void *)(*(void *)(a1 + 32) + 8LL * v26 + 44_Block_object_dispose((const void *)(v11 - 112), 8) = a2;
  BOOL v54 = *(_BYTE **)(a1 + 32);
  if ((_DWORD)v28 - 1 != v26)
  {
    if (!v54[602] && !v54[601])
    {
      unint64_t v58 = 0LL;
      goto LABEL_86;
    }

    uint64_t v63 = OSLogHandleForTransportCategory("IDSDSession");
    uint64_t v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
    if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)uint64_t v95 = v26;
      *(_WORD *)&v95[4] = 1024;
      *(_DWORD *)&v95[6] = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "not sending to UTunController - currentDatagramCount %u totalDatagramCount %u",  buf,  0xEu);
    }

    uint64_t v66 = os_log_shim_legacy_logging_enabled(v65);
    if ((_DWORD)v66)
    {
      if (_IDSShouldLogTransport(v66))
      {
        _IDSLogTransport( @"IDSDSession",  @"IDS",  @"not sending to UTunController - currentDatagramCount %u totalDatagramCount %u");
        if (_IDSShouldLog(0LL, @"IDSDSession")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"not sending to UTunController - currentDatagramCount %u totalDatagramCount %u");
        }
      }
    }

    goto LABEL_85;
  }

  int v55 = (void *)objc_claimAutoreleasedReturnValue([v54 utunController]);
  uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue([v56 uniqueID]);
  unint64_t v58 = (unint64_t)objc_msgSend( v55,  "onTransportThread_SendToGlobalLinkWithSessionID:packetBufferArray:arraySize:",  v57,  *(void *)(a1 + 32) + 448,  v28);

LABEL_86:
  if (qword_1009BE930 != -1) {
    dispatch_once(&qword_1009BE930, &stru_1008F91C0);
  }
  uint64_t v71 = mach_continuous_time();
  uint64_t v72 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v72 + 602) || *(_BYTE *)(v72 + 601))
  {
    double v73 = v25 * (double)v83;
    double v74 = v53 * (double)v82;
    double v75 = *(double *)&qword_1009BE938 * (double)v71;
    uint64_t v76 = OSLogHandleForIDSCategory("IDSDSession");
    uint64_t v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(v76);
    if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
    {
      if (v58 > 0xF) {
        uint64_t v78 = "UnexpectedSendResult";
      }
      else {
        uint64_t v78 = (const char *)_IDSLinkSendResultStrings[v58];
      }
      *(_DWORD *)buf = 134219266;
      *(void *)uint64_t v95 = v51;
      *(_WORD *)&v95[8] = 2048;
      uint64_t v96 = a4;
      __int16 v97 = 2080;
      uint64_t v98 = v78;
      __int16 v99 = 2048;
      double v100 = v74 - v73;
      __int16 v101 = 2048;
      double v102 = v75 - v74;
      __int16 v103 = 2048;
      double v104 = v75;
      _os_log_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_DEFAULT,  "Client channel read datagram_size %lu metadata_size %lu sendResult %s processTime %0.6lf sendTime %0.6lf [%013.6lf]",  buf,  0x3Eu);
    }

    if (os_log_shim_legacy_logging_enabled(v79) && _IDSShouldLog(0LL, @"IDSDSession")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Client channel read datagram_size %lu metadata_size %lu sendResult %s processTime %0.6lf sendTime %0.6lf [%013.6lf]");
    }
  }

LABEL_99:
  return 1LL;
}

                uint64_t v10 = 0LL;
                goto LABEL_77;
              }

              uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue( +[IDSOTRController sharedInstance]( &OBJC_CLASS___IDSOTRController,  "sharedInstance",  v65,  v67,  v69));
              uint64_t v34 = [v33 isSessionReady:v22];
              if ((_DWORD)v16 == 43258) {
                uint64_t v35 = 1;
              }
              else {
                uint64_t v35 = v34;
              }

              if ((v35 & 1) != 0
                || (uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(+[IDSOTRController sharedInstance](&OBJC_CLASS___IDSOTRController, "sharedInstance")),
                    uint64_t v37 = [v36 hasMessagableOTRSessionForToken:v22],
                    v36,
                    v37))
              {
                uint64_t v77 = 0LL;
                dispatch_block_t v38 = (void *)objc_claimAutoreleasedReturnValue([v4 data]);
                unsigned int v39 = ids_monotonic_time(v38);
                uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(-[IDSUTunConnection _encryptionController](self, "_encryptionController"));
                uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v40 OTRDecryptData:v38 OTRToken:v22 priority:v17 error:&v77]);

                unint64_t v43 = ids_monotonic_time(v42);
                if (!v77)
                {
                  uint64_t v44 = v43 - v39;
                  uint64_t v45 = OSLogHandleForIDSCategory("UTunConnection");
                  id v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
                  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
                  {
                    dispatch_block_t v47 = [v38 length];
                    unsigned int v48 = [v41 length];
                    *(_DWORD *)buf = 138413058;
                    *(void *)uint64_t v79 = v22;
                    *(_WORD *)&v79[8] = 2048;
                    *(void *)id v80 = v47;
                    *(_WORD *)&v80[8] = 2048;
                    *(void *)&v80[10] = v48;
                    id v81 = 2048;
                    uint64_t v82 = v44;
                    _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "Decrypted message for %@  original size: %lu  unencrypted size: %lu  elapsed: %.6f",  buf,  0x2Au);
                  }

                  if (os_log_shim_legacy_logging_enabled(v49)
                    && _IDSShouldLog(0LL, @"UTunConnection"))
                  {
                    uint64_t v71 = v44;
                    uint64_t v68 = [v38 length];
                    uint64_t v70 = [v41 length];
                    uint64_t v66 = v22;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"Decrypted message for %@  original size: %lu  unencrypted size: %lu  elapsed: %.6f");
                  }

                  if ((v35 & 1) == 0)
                  {
                    unsigned int v50 = (void *)objc_claimAutoreleasedReturnValue(+[IDSOTRController sharedInstance](&OBJC_CLASS___IDSOTRController, "sharedInstance"));
                    [v50 setSessionReady:v22];
                  }

                  uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance",  v66,  v68,  v70,  *(void *)&v71));
                  v75[0] = _NSConcreteStackBlock;
                  v75[1] = 3221225472LL;
                  v75[2] = sub_100252EDC;
                  v75[3] = &unk_1008F5F80;
                  v75[4] = self;
                  uint64_t v76 = v22;
                  [v51 performBlockWithPriority:v75 priority:self->_priority];

                  goto LABEL_76;
                }
              }

              else
              {
                BOOL v52 = OSLogHandleForTransportCategory("UTunConnection");
                double v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
                if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412290;
                  *(void *)uint64_t v79 = v22;
                  _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "*** OTR session for %@ is not ready.",  buf,  0xCu);
                }

                int v55 = os_log_shim_legacy_logging_enabled(v54);
                if ((_DWORD)v55)
                {
                  if (_IDSShouldLogTransport(v55))
                  {
                    uint64_t v66 = v22;
                    _IDSLogTransport( @"UTunConnection",  @"IDS",  @"*** OTR session for %@ is not ready.");
                    if (_IDSShouldLog(0LL, @"UTunConnection"))
                    {
                      uint64_t v66 = v22;
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"*** OTR session for %@ is not ready.");
                    }
                  }
                }

                if ((_DWORD)v18 == 1
                  && -[IDSUTunConnection _storeIncomingClassADataMesageIfNeeded:topic:sequenceNumber:]( self,  "_storeIncomingClassADataMesageIfNeeded:topic:sequenceNumber:",  v4,  v20,  v72))
                {
                  uint64_t v56 = OSLogHandleForTransportCategory("UTunConnection");
                  uint64_t v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
                  if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 138412546;
                    *(void *)uint64_t v79 = v22;
                    *(_WORD *)&v79[8] = 1024;
                    *(_DWORD *)id v80 = (_DWORD)v72;
                    _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "Stored class A OTR message for %@ sequenceNumber:%u, ignore decryption failure.",  buf,  0x12u);
                  }

                  uint64_t v59 = os_log_shim_legacy_logging_enabled(v58);
                  if ((_DWORD)v59)
                  {
                    if (_IDSShouldLogTransport(v59))
                    {
                      _IDSLogTransport( @"UTunConnection",  @"IDS",  @"Stored class A OTR message for %@ sequenceNumber:%u, ignore decryption failure.");
                      if (_IDSShouldLog(0LL, @"UTunConnection")) {
                        _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"Stored class A OTR message for %@ sequenceNumber:%u, ignore decryption failure.");
                      }
                    }
                  }

                  uint64_t v41 = 0LL;
                  goto LABEL_76;
                }

                uint64_t v41 = 0LL;
              }

              uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance",  v66));
              v73[0] = _NSConcreteStackBlock;
              v73[1] = 3221225472LL;
              v73[2] = sub_100252EE8;
              v73[3] = &unk_1008F5F80;
              v73[4] = self;
              double v74 = v22;
              [v60 performBlockWithPriority:v73 priority:self->_priority];

LABEL_76:
              uint64_t v10 = v41;
LABEL_77:

              goto LABEL_78;
            }

    v335 = (v162 - 1) & v162;
    v336 = v163;
    v160 = __clz(__rbit64(v162)) + ((void)v163 << 6);
LABEL_86:
    v165 = *(void *)(*(void *)(v332 + 56) + 8 * v160);
    swift_retain_n(v165, 5LL);
    v166 = swift_bridgeObjectRetain_n(a3, 2LL);
    v167 = (os_log_s *)Logger.logObject.getter(v166);
    v168 = static os_log_type_t.default.getter();
    v169 = os_log_type_enabled(v167, v168);
    v342 = v165;
    if (v169)
    {
      v170 = swift_slowAlloc(32LL, -1LL);
      v171 = (void *)swift_slowAlloc(16LL, -1LL);
      v329 = swift_slowAlloc(32LL, -1LL);
      v344 = v329;
      *(_DWORD *)v170 = v320.n128_u32[0];
      swift_bridgeObjectRetain(a3);
      v346 = sub_1003FFBB0(a2, a3, &v344);
      v172 = a3;
      v173 = (uint64_t)v337;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, v337, v170 + 4, v170 + 12);
      swift_bridgeObjectRelease_n(v172, 3LL);
      *(_WORD *)(v170 + 12) = 2112;
      v174 = *(void **)(v342 + 24);
      v346 = (uint64_t)v174;
      v175 = v174;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, v173, v170 + 14, v170 + 22);
      *v171 = v174;
      swift_release_n(v342, 2LL);
      *(_WORD *)(v170 + 22) = 2112;
      v176 = *(void **)(v342 + 16);
      v346 = (uint64_t)v176;
      v177 = v176;
      v178 = v173;
      a3 = v172;
      v165 = v342;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, v178, v170 + 24, v170 + 32);
      v171[1] = v176;
      swift_release_n(v165, 2LL);
      _os_log_impl( (void *)&_mh_execute_header,  v167,  v168,  "%s        Participant %@: pushToken=%@:",  (uint8_t *)v170,  0x20u);
      v179 = sub_1003F5CB4(&qword_1009B92C8);
      swift_arrayDestroy(v171, 2LL, v179);
      swift_slowDealloc(v171, -1LL, -1LL);
      v180 = v329;
      swift_arrayDestroy(v329, 1LL, v319);
      swift_slowDealloc(v180, -1LL, -1LL);
      swift_slowDealloc(v170, -1LL, -1LL);
    }

    else
    {
      swift_release_n(v165, 4LL);
      swift_bridgeObjectRelease_n(a3, 2LL);
    }

    v181 = swift_bridgeObjectRetain_n(a3, 2LL);
    v182 = (os_log_s *)Logger.logObject.getter(v181);
    v183 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v182, v183))
    {
      v184 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v185 = swift_slowAlloc(32LL, -1LL);
      v344 = v185;
      *(_DWORD *)v184 = v330.n128_u32[0];
      swift_bridgeObjectRetain(a3);
      a2 = v334;
      v346 = sub_1003FFBB0(v334, a3, &v344);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, v337, v184 + 4, v184 + 12);
      swift_bridgeObjectRelease_n(a3, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v182, v183, "%s            MKM:", v184, 0xCu);
      swift_arrayDestroy(v185, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v185, -1LL, -1LL);
      swift_slowDealloc(v184, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a3, 2LL);

      a2 = v334;
    }

    swift_bridgeObjectRetain_n(a3, 2LL);
    v186 = swift_retain_n(v165, 2LL);
    v187 = (os_log_s *)Logger.logObject.getter(v186);
    v188 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v187, v188))
    {
      v189 = swift_slowAlloc(18LL, -1LL);
      v190 = swift_slowAlloc(32LL, -1LL);
      v344 = v190;
      *(_DWORD *)v189 = v341.n128_u32[0];
      swift_bridgeObjectRetain(a3);
      v346 = sub_1003FFBB0(a2, a3, &v344);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, v337, v189 + 4, v189 + 12);
      v191 = swift_bridgeObjectRelease_n(a3, 3LL);
      *(_WORD *)(v189 + 12) = 1024;
      v192 = (*(uint64_t (**)(uint64_t))(*(void *)v165 + 120LL))(v191);
      v193 = (*(uint64_t (**)(uint64_t))(*(void *)v192 + 184LL))(v192);
      swift_release(v165);
      swift_release(v192);
      LODWORD(v346) = v193 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, v331, v189 + 14, v189 + 18);
      swift_release(v165);
      _os_log_impl( (void *)&_mh_execute_header,  v187,  v188,  "%s                desiresCache: %{BOOL}d",  (uint8_t *)v189,  0x12u);
      swift_arrayDestroy(v190, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v190, -1LL, -1LL);
      swift_slowDealloc(v189, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a3, 2LL);

      swift_release_n(v165, 2LL);
    }

    swift_bridgeObjectRetain_n(a3, 2LL);
    v194 = swift_retain_n(v165, 2LL);
    v195 = (os_log_s *)Logger.logObject.getter(v194);
    v196 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v195, v196))
    {
      v197 = swift_slowAlloc(22LL, -1LL);
      v198 = swift_slowAlloc(64LL, -1LL);
      v346 = v198;
      *(_DWORD *)v197 = v341.n128_u32[0];
      swift_bridgeObjectRetain(a3);
      v344 = sub_1003FFBB0(a2, a3, &v346);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v343, v197 + 4, v197 + 12);
      v199 = swift_bridgeObjectRelease_n(a3, 3LL);
      *(_WORD *)(v197 + 12) = 2080;
      v200 = (*(uint64_t (**)(uint64_t))(*(void *)v165 + 120LL))(v199);
      v201 = (uint64_t)v321;
      (*(void (**)(uint64_t))(*(void *)v200 + 160LL))(v200);
      swift_release(v200);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v338 + 48))(v201, 1LL, v339))
      {
        sub_10040A274(v201, &qword_1009B99D8);
        v202 = 0LL;
        v203 = 0LL;
      }

      else
      {
        v204 = v333;
        sub_1003F5FC8(v201, v333, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
        sub_10040A274(v201, &qword_1009B99D8);
        v202 = sub_1004D05CC();
        v203 = v205;
        v165 = v342;
        sub_1003F6050(v204, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
      }

      v344 = v202;
      v345 = v203;
      v206 = sub_1003F5CB4(&qword_1009B9A38);
      v207 = String.init<A>(describing:)(&v344, v206);
      v209 = v208;
      v344 = sub_1003FFBB0(v207, v208, &v346);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v343, v197 + 14, v197 + 22);
      swift_release_n(v165, 2LL);
      swift_bridgeObjectRelease(v209);
      _os_log_impl( (void *)&_mh_execute_header,  v195,  v196,  "%s                desiredKeyMaterial: %s",  (uint8_t *)v197,  0x16u);
      swift_arrayDestroy(v198, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v198, -1LL, -1LL);
      swift_slowDealloc(v197, -1LL, -1LL);
    }

    else
    {
      swift_release_n(v165, 2LL);
      swift_bridgeObjectRelease_n(a3, 2LL);
    }

    swift_bridgeObjectRetain_n(a3, 2LL);
    v210 = swift_retain_n(v165, 2LL);
    v211 = (os_log_s *)Logger.logObject.getter(v210);
    v212 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v211, v212))
    {
      v213 = swift_slowAlloc(22LL, -1LL);
      v214 = swift_slowAlloc(64LL, -1LL);
      v346 = v214;
      *(_DWORD *)v213 = v341.n128_u32[0];
      swift_bridgeObjectRetain(a3);
      v344 = sub_1003FFBB0(a2, a3, &v346);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v343, v213 + 4, v213 + 12);
      v215 = swift_bridgeObjectRelease_n(a3, 3LL);
      *(_WORD *)(v213 + 12) = 2080;
      v216 = (*(uint64_t (**)(uint64_t))(*(void *)v165 + 120LL))(v215);
      v217 = (uint64_t)v322;
      (*(void (**)(uint64_t))(*(void *)v216 + 136LL))(v216);
      swift_release(v216);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v338 + 48))(v217, 1LL, v339))
      {
        sub_10040A274(v217, &qword_1009B99D8);
        v218 = 0LL;
        v219 = 0LL;
      }

      else
      {
        v220 = v333;
        sub_1003F5FC8(v217, v333, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
        sub_10040A274(v217, &qword_1009B99D8);
        v218 = sub_1004D05CC();
        v219 = v221;
        v165 = v342;
        sub_1003F6050(v220, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
      }

      v344 = v218;
      v345 = v219;
      v222 = sub_1003F5CB4(&qword_1009B9A38);
      v223 = String.init<A>(describing:)(&v344, v222);
      v225 = v224;
      v344 = sub_1003FFBB0(v223, v224, &v346);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v343, v213 + 14, v213 + 22);
      swift_release_n(v165, 2LL);
      swift_bridgeObjectRelease(v225);
      _os_log_impl( (void *)&_mh_execute_header,  v211,  v212,  "%s                sendingKeyMaterial: %s",  (uint8_t *)v213,  0x16u);
      swift_arrayDestroy(v214, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v214, -1LL, -1LL);
      swift_slowDealloc(v213, -1LL, -1LL);
    }

    else
    {
      swift_release_n(v165, 2LL);
      swift_bridgeObjectRelease_n(a3, 2LL);
    }

    swift_bridgeObjectRetain_n(a3, 2LL);
    v226 = swift_retain_n(v165, 2LL);
    v227 = (os_log_s *)Logger.logObject.getter(v226);
    v228 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v227, v228))
    {
      v229 = swift_slowAlloc(22LL, -1LL);
      v230 = swift_slowAlloc(64LL, -1LL);
      v346 = v230;
      *(_DWORD *)v229 = v341.n128_u32[0];
      swift_bridgeObjectRetain(a3);
      v344 = sub_1003FFBB0(a2, a3, &v346);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v343, v229 + 4, v229 + 12);
      v231 = swift_bridgeObjectRelease_n(a3, 3LL);
      *(_WORD *)(v229 + 12) = 2080;
      v232 = (*(uint64_t (**)(uint64_t))(*(void *)v165 + 120LL))(v231);
      v233 = (uint64_t)v323;
      (*(void (**)(uint64_t))(*(void *)v232 + 112LL))(v232);
      swift_release(v232);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v338 + 48))(v233, 1LL, v339))
      {
        sub_10040A274(v233, &qword_1009B99D8);
        v234 = 0LL;
        v235 = 0LL;
      }

      else
      {
        v236 = v333;
        sub_1003F5FC8(v233, v333, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
        sub_10040A274(v233, &qword_1009B99D8);
        v234 = sub_1004D05CC();
        v235 = v237;
        v165 = v342;
        sub_1003F6050(v236, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
      }

      v344 = v234;
      v345 = v235;
      v238 = sub_1003F5CB4(&qword_1009B9A38);
      v239 = String.init<A>(describing:)(&v344, v238);
      v241 = v240;
      v344 = sub_1003FFBB0(v239, v240, &v346);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v343, v229 + 14, v229 + 22);
      swift_release_n(v165, 2LL);
      swift_bridgeObjectRelease(v241);
      _os_log_impl( (void *)&_mh_execute_header,  v227,  v228,  "%s                sentKeyMaterial: %s",  (uint8_t *)v229,  0x16u);
      swift_arrayDestroy(v230, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v230, -1LL, -1LL);
      swift_slowDealloc(v229, -1LL, -1LL);
    }

    else
    {
      swift_release_n(v165, 2LL);
      swift_bridgeObjectRelease_n(a3, 2LL);
    }

    v242 = swift_bridgeObjectRetain_n(a3, 2LL);
    v243 = (os_log_s *)Logger.logObject.getter(v242);
    v244 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v243, v244))
    {
      v245 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v246 = swift_slowAlloc(32LL, -1LL);
      v344 = v246;
      *(_DWORD *)v245 = v330.n128_u32[0];
      swift_bridgeObjectRetain(a3);
      v346 = sub_1003FFBB0(a2, a3, &v344);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, v337, v245 + 4, v245 + 12);
      swift_bridgeObjectRelease_n(a3, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v243, v244, "%s            SKM:", v245, 0xCu);
      swift_arrayDestroy(v246, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v246, -1LL, -1LL);
      swift_slowDealloc(v245, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a3, 2LL);
    }

    swift_bridgeObjectRetain_n(a3, 2LL);
    v247 = swift_retain_n(v165, 2LL);
    v248 = (os_log_s *)Logger.logObject.getter(v247);
    v249 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v248, v249))
    {
      v250 = swift_slowAlloc(18LL, -1LL);
      v251 = swift_slowAlloc(32LL, -1LL);
      v344 = v251;
      *(_DWORD *)v250 = v341.n128_u32[0];
      swift_bridgeObjectRetain(a3);
      v346 = sub_1003FFBB0(a2, a3, &v344);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, v337, v250 + 4, v250 + 12);
      v252 = swift_bridgeObjectRelease_n(a3, 3LL);
      *(_WORD *)(v250 + 12) = 1024;
      v253 = (*(uint64_t (**)(uint64_t))(*(void *)v165 + 144LL))(v252);
      v254 = (*(uint64_t (**)(uint64_t))(*(void *)v253 + 184LL))(v253);
      swift_release(v165);
      swift_release(v253);
      LODWORD(v346) = v254 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, v331, v250 + 14, v250 + 18);
      swift_release(v165);
      _os_log_impl( (void *)&_mh_execute_header,  v248,  v249,  "%s                desiresCache: %{BOOL}d",  (uint8_t *)v250,  0x12u);
      swift_arrayDestroy(v251, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v251, -1LL, -1LL);
      swift_slowDealloc(v250, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a3, 2LL);

      swift_release_n(v165, 2LL);
    }

    swift_bridgeObjectRetain_n(a3, 2LL);
    v255 = swift_retain_n(v165, 2LL);
    v256 = (os_log_s *)Logger.logObject.getter(v255);
    v257 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v256, v257))
    {
      v258 = swift_slowAlloc(22LL, -1LL);
      v259 = swift_slowAlloc(64LL, -1LL);
      v346 = v259;
      *(_DWORD *)v258 = v341.n128_u32[0];
      swift_bridgeObjectRetain(a3);
      v344 = sub_1003FFBB0(a2, a3, &v346);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v343, v258 + 4, v258 + 12);
      v260 = swift_bridgeObjectRelease_n(a3, 3LL);
      *(_WORD *)(v258 + 12) = 2080;
      v261 = (*(uint64_t (**)(uint64_t))(*(void *)v165 + 144LL))(v260);
      v262 = (uint64_t)v324;
      (*(void (**)(uint64_t))(*(void *)v261 + 160LL))(v261);
      swift_release(v261);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v338 + 48))(v262, 1LL, v339))
      {
        sub_10040A274(v262, &qword_1009B99D8);
        v263 = 0LL;
        v264 = 0LL;
      }

      else
      {
        v265 = v333;
        sub_1003F5FC8(v262, v333, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
        sub_10040A274(v262, &qword_1009B99D8);
        v263 = sub_1004D05CC();
        v264 = v266;
        v165 = v342;
        sub_1003F6050(v265, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
      }

      v344 = v263;
      v345 = v264;
      v267 = sub_1003F5CB4(&qword_1009B9A38);
      v268 = String.init<A>(describing:)(&v344, v267);
      v270 = v269;
      v344 = sub_1003FFBB0(v268, v269, &v346);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v343, v258 + 14, v258 + 22);
      swift_release_n(v165, 2LL);
      swift_bridgeObjectRelease(v270);
      _os_log_impl( (void *)&_mh_execute_header,  v256,  v257,  "%s                desiredKeyMaterial: %s",  (uint8_t *)v258,  0x16u);
      swift_arrayDestroy(v259, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v259, -1LL, -1LL);
      swift_slowDealloc(v258, -1LL, -1LL);
    }

    else
    {
      swift_release_n(v165, 2LL);
      swift_bridgeObjectRelease_n(a3, 2LL);
    }

    swift_bridgeObjectRetain_n(a3, 2LL);
    v271 = swift_retain_n(v165, 2LL);
    v272 = (os_log_s *)Logger.logObject.getter(v271);
    v273 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v272, v273))
    {
      v274 = swift_slowAlloc(22LL, -1LL);
      v275 = swift_slowAlloc(64LL, -1LL);
      v346 = v275;
      *(_DWORD *)v274 = v341.n128_u32[0];
      swift_bridgeObjectRetain(a3);
      v344 = sub_1003FFBB0(a2, a3, &v346);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v343, v274 + 4, v274 + 12);
      v276 = swift_bridgeObjectRelease_n(a3, 3LL);
      *(_WORD *)(v274 + 12) = 2080;
      v277 = (*(uint64_t (**)(uint64_t))(*(void *)v165 + 144LL))(v276);
      v278 = (uint64_t)v325;
      (*(void (**)(uint64_t))(*(void *)v277 + 136LL))(v277);
      swift_release(v277);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v338 + 48))(v278, 1LL, v339))
      {
        sub_10040A274(v278, &qword_1009B99D8);
        v279 = 0LL;
        v280 = 0LL;
      }

      else
      {
        v281 = v333;
        sub_1003F5FC8(v278, v333, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
        sub_10040A274(v278, &qword_1009B99D8);
        v279 = sub_1004D05CC();
        v280 = v282;
        v165 = v342;
        sub_1003F6050(v281, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
      }

      v344 = v279;
      v345 = v280;
      v283 = sub_1003F5CB4(&qword_1009B9A38);
      v284 = String.init<A>(describing:)(&v344, v283);
      v286 = v285;
      v344 = sub_1003FFBB0(v284, v285, &v346);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v343, v274 + 14, v274 + 22);
      swift_release_n(v165, 2LL);
      swift_bridgeObjectRelease(v286);
      _os_log_impl( (void *)&_mh_execute_header,  v272,  v273,  "%s                sendingKeyMaterial: %s",  (uint8_t *)v274,  0x16u);
      swift_arrayDestroy(v275, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v275, -1LL, -1LL);
      swift_slowDealloc(v274, -1LL, -1LL);
    }

    else
    {
      swift_release_n(v165, 2LL);
      swift_bridgeObjectRelease_n(a3, 2LL);
    }

    swift_bridgeObjectRetain_n(a3, 2LL);
    v287 = swift_retain_n(v165, 2LL);
    v288 = (os_log_s *)Logger.logObject.getter(v287);
    v289 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v288, v289))
    {
      v290 = swift_slowAlloc(22LL, -1LL);
      v291 = swift_slowAlloc(64LL, -1LL);
      v346 = v291;
      *(_DWORD *)v290 = v341.n128_u32[0];
      swift_bridgeObjectRetain(a3);
      v344 = sub_1003FFBB0(a2, a3, &v346);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v343, v290 + 4, v290 + 12);
      v292 = swift_bridgeObjectRelease_n(a3, 3LL);
      *(_WORD *)(v290 + 12) = 2080;
      v293 = (*(uint64_t (**)(uint64_t))(*(void *)v165 + 144LL))(v292);
      v294 = (uint64_t)v326;
      (*(void (**)(uint64_t))(*(void *)v293 + 112LL))(v293);
      swift_release(v293);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v338 + 48))(v294, 1LL, v339))
      {
        sub_10040A274(v294, &qword_1009B99D8);
        v295 = 0LL;
        v296 = 0LL;
      }

      else
      {
        v297 = v333;
        sub_1003F5FC8(v294, v333, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
        sub_10040A274(v294, &qword_1009B99D8);
        v295 = sub_1004D05CC();
        v296 = v298;
        v165 = v342;
        sub_1003F6050(v297, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
      }

      v344 = v295;
      v345 = v296;
      v299 = sub_1003F5CB4(&qword_1009B9A38);
      v300 = String.init<A>(describing:)(&v344, v299);
      v302 = v301;
      v344 = sub_1003FFBB0(v300, v301, &v346);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v343, v290 + 14, v290 + 22);
      swift_release_n(v165, 2LL);
      swift_bridgeObjectRelease(v302);
      _os_log_impl( (void *)&_mh_execute_header,  v288,  v289,  "%s                sentKeyMaterial: %s",  (uint8_t *)v290,  0x16u);
      swift_arrayDestroy(v291, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v291, -1LL, -1LL);
      swift_slowDealloc(v290, -1LL, -1LL);

      swift_release(v165);
    }

    else
    {
      swift_bridgeObjectRelease_n(a3, 2LL);

      swift_release_n(v165, 3LL);
    }

    v157 = v335;
    v159 = v336;
  }

  v164 = (char *)v159 + 4;
  if ((uint64_t)v159 + 4 >= v328)
  {
LABEL_136:
    swift_release(v332);
    v303 = *(os_unfair_lock_s **)&v305[v304];
    swift_retain(v303);
    os_unfair_lock_unlock(v303 + 4);
    swift_release(v303);
    return;
  }

  v162 = *(void *)(v327 + 8LL * (void)v164);
  if (v162)
  {
    v163 = (os_log_s *)((char *)v159 + 4);
    goto LABEL_85;
  }

  while (1)
  {
    v163 = (os_log_s *)(v164 + 1);
    if (__OFADD__(v164, 1LL)) {
      break;
    }
    v162 = *(void *)(v327 + 8LL * (void)v163);
    ++v164;
    if (v162) {
      goto LABEL_85;
    }
  }

id sub_100085D1C(uint64_t a1)
{
  return [*(id *)(a1 + 32) endSessionWithReason:11];
}

void sub_100086918(uint64_t a1)
{
  BOOL v20 = *(void **)(a1 + 32);
  id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
  id v16 = (void *)objc_claimAutoreleasedReturnValue([v17 destinations]);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v16 allObjects]);
  int v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v15 uniqueID]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountController]);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
  uint64_t v14 = v2;
  __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v13 accountID]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "accountWithUniqueID:"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 _registrationCert]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 fromURI]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 unprefixedURI]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 _bestGuessURI]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) identifier]);
  uint64_t v10 = *(void *)(a1 + 56);
  v21[1] = 3221225472LL;
  v21[2] = sub_100086B38;
  v21[3] = &unk_1008F89B0;
  v21[0] = _NSConcreteStackBlock;
  objc_copyWeak(v23, (id *)(a1 + 72));
  v23[1] = *(id *)(a1 + 80);
  id v22 = *(id *)(a1 + 64);
  id v11 =  [v20 setupNewAllocation:v19 sessionID:v18 fromIdentity:v4 fromURI:v8 fromService:v9 options:v10 connectReadyHandler:v21];

  objc_destroyWeak(v23);
}

void sub_100086B24( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id *location)
{
}

void sub_100086B38(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v5 = *(void *)(a1 + 48);
    if (v5 == 2)
    {
      uint64_t v10 = im_primary_queue(WeakRetained, v3);
      uint64_t v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v10);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472LL;
      v12[2] = sub_100086C74;
      v12[3] = &unk_1008F5F80;
      void v12[4] = v4;
      id v8 = &v13;
      id v13 = *(id *)(a1 + 32);
      uint64_t v9 = v12;
      goto LABEL_6;
    }

    if (v5 == 1)
    {
      uint64_t v6 = im_primary_queue(WeakRetained, v3);
      uint64_t v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v6);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472LL;
      v14[2] = sub_100086C68;
      v14[3] = &unk_1008F5F80;
      void v14[4] = v4;
      id v8 = &v15;
      id v15 = *(id *)(a1 + 32);
      uint64_t v9 = v14;
LABEL_6:
      dispatch_block_t v11 = dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT,  QOS_CLASS_USER_INITIATED,  0,  v9);
      dispatch_async(v7, v11);
    }
  }
}

id sub_100086C68(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _sendingOfflineActiveParticipantInfoRequest:*(void *)(a1 + 40)];
}

id sub_100086C74(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _sendStreamSubscriptionRequest:*(void *)(a1 + 40)];
}

void sub_100086C80(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) utunController]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
  objc_msgSend( v4,  "onTransportThread_getSessionInfo:relayGroupID:relaySessionID:options:",  v3,  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56));
}

void sub_100086F8C(uint64_t a1)
{
  id v8 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v8, "setShouldBoost:", 1LL);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 pushTopic]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( [v2 broadcasterForTopic:v4 entitlement:kIDSSessionEntitlement command:0 messageContext:v8]);

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
  [v5 session:v7 didReceiveURIsForParticipantIDs:*(void *)(a1 + 40) withRequestID:*(void *)(a1 + 48)];
}

void sub_100087270(uint64_t a1)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) utunController]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 groupID]);
  objc_msgSend(v6, "onTransportThread_registerPluginForGroup:relayGroupID:options:", v3, v5, *(void *)(a1 + 40));
}

void sub_10008750C(uint64_t a1)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) utunController]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 groupID]);
  objc_msgSend(v6, "onTransportThread_registerPluginForGroup:relayGroupID:options:", v3, v5, *(void *)(a1 + 40));
}

void sub_100087AC0(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) utunController]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
  objc_msgSend( v4,  "onTransportThread_getSessionInfo:relayGroupID:relaySessionID:options:",  v3,  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56));
}

void sub_100088494(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) utunController]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
  objc_msgSend( v4,  "onTransportThread_getSessionInfo:relayGroupID:relaySessionID:options:",  v3,  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56));
}

void sub_100089A1C(id *a1)
{
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  unint64_t v5 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v4[0] = v3;
  v4[1] = v3;
  IDSByteBufferInitForWrite(v4);
  IDSByteBufferWriteField( v4, 70, [a1[4] bytes], (unsigned __int16)objc_msgSend(a1[4], "length"));
  objc_msgSend(a1[5], "writeToClientChannel:packetBuffer:metaData:metadataSize:", WeakRetained, 0);
  IDSByteBufferRelease(v4);
}

LABEL_117:
                uint64_t v72 = self;
                CFDictionarySetValue(v198, kIDSQRAllocateKey_AlternateDelegate, v72);

                p_clientChannelLock = &v72->_clientChannelLock;
                os_unfair_lock_lock(&v72->_clientChannelLock);
                double v74 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  -[IDSClientChannel clientUniquePID](v72->_clientChannel, "clientUniquePID")));
                if (v74)
                {
                  CFDictionarySetValue(v198, kIDSQRAllocateKey_ClientUniquePID, v74);
                }

                else
                {
                  double v75 = &_os_log_default;
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    sub_100697CFC();
                  }
                }

                os_unfair_lock_unlock(p_clientChannelLock);
                goto LABEL_123;
              }
            }
          }

          goto LABEL_117;
        }
      }

      else
      {
      }
    }

    uint64_t v107 = OSLogHandleForTransportCategory("IDSDSession");
    uint64_t v108 = (os_log_s *)objc_claimAutoreleasedReturnValue(v107);
    if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v109 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
      uint64_t v110 = (void *)objc_claimAutoreleasedReturnValue([v109 groupID]);
      groupStatusNotificationParams = self->_groupStatusNotificationParams;
      uint64_t v112 = (__CFString *)objc_claimAutoreleasedReturnValue( -[IDSGroupStatusNotificationParameters participantID]( groupStatusNotificationParams,  "participantID"));
      uint64_t v113 = (__CFString *)objc_claimAutoreleasedReturnValue( -[IDSGroupStatusNotificationParameters relaySessionID]( self->_groupStatusNotificationParams,  "relaySessionID"));
      uint64_t v114 = (void *)objc_claimAutoreleasedReturnValue( -[IDSGroupStatusNotificationParameters participantData]( self->_groupStatusNotificationParams,  "participantData"));
      *(_DWORD *)buf = 138413314;
      *(void *)&uint8_t buf[4] = v110;
      v206 = 2048;
      v207 = groupStatusNotificationParams;
      v208 = 2112;
      v209 = v112;
      v210 = 2112;
      v211 = v113;
      v212 = 2112;
      v213 = v114;
      _os_log_impl( (void *)&_mh_execute_header,  v108,  OS_LOG_TYPE_DEFAULT,  "connectQRServer for group %@ failed due to missing (params %p, participantID %@, relaySessionID %@, participantData %@)",  buf,  0x34u);
    }

    uint64_t v116 = os_log_shim_legacy_logging_enabled(v115);
    if ((_DWORD)v116)
    {
      if (_IDSShouldLogTransport(v116))
      {
        uint64_t v117 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
        uint64_t v118 = (void *)objc_claimAutoreleasedReturnValue([v117 groupID]);
        uint64_t v119 = self->_groupStatusNotificationParams;
        uint64_t v120 = (void *)objc_claimAutoreleasedReturnValue(-[IDSGroupStatusNotificationParameters participantID](v119, "participantID"));
        v185 = (void *)objc_claimAutoreleasedReturnValue( -[IDSGroupStatusNotificationParameters relaySessionID]( self->_groupStatusNotificationParams,  "relaySessionID"));
        v188 = (void *)objc_claimAutoreleasedReturnValue( -[IDSGroupStatusNotificationParameters participantData]( self->_groupStatusNotificationParams,  "participantData"));
        _IDSLogTransport( @"IDSDSession",  @"IDS",  @"connectQRServer for group %@ failed due to missing (params %p, participantID %@, relaySessionID %@, participantData %@)");

        if (_IDSShouldLog(0LL, @"IDSDSession"))
        {
          uint64_t v121 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState", v118, v119, v120, v185, v188));
          uint64_t v122 = (void *)objc_claimAutoreleasedReturnValue([v121 groupID]);
          uint64_t v124 = self->_groupStatusNotificationParams;
          p_groupStatusNotificationParams = &self->_groupStatusNotificationParams;
          uint64_t v125 = (void *)objc_claimAutoreleasedReturnValue(-[IDSGroupStatusNotificationParameters participantID](v124, "participantID"));
          v186 = (void *)objc_claimAutoreleasedReturnValue( -[IDSGroupStatusNotificationParameters relaySessionID]( *p_groupStatusNotificationParams,  "relaySessionID"));
          v189 = (void *)objc_claimAutoreleasedReturnValue( -[IDSGroupStatusNotificationParameters participantData]( *p_groupStatusNotificationParams,  "participantData"));
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"connectQRServer for group %@ failed due to missing (params %p, participantID %@, relaySessionID %@, participantData %@)");
        }
      }
    }

    goto LABEL_241;
  }

  uint64_t v19 = OSLogHandleForTransportCategory("IDSDSession");
  BOOL v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "connectQRServer failed due to invalid parameter.",  buf,  2u);
  }

  id v22 = os_log_shim_legacy_logging_enabled(v21);
  if ((_DWORD)v22)
  {
    if (_IDSShouldLogTransport(v22))
    {
      _IDSLogTransport(@"IDSDSession", @"IDS", @"connectQRServer failed due to invalid parameter.");
      if (_IDSShouldLog(0LL, @"IDSDSession")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"connectQRServer failed due to invalid parameter.");
      }
    }
  }

  uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date", v75));
  [v65 timeIntervalSince1970];
  uint64_t v67 = v66;
  uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
  [v68 setLastPacketTime:v67];

LABEL_118:
  return 1;
}

      swift_bridgeObjectRelease(v23);
      __int128 v130 = v132;
      v132[2] = 0LL;
      return swift_bridgeObjectRelease(v130);
    }
  }

  else
  {
    BOOL v20 = v19 >> 1;
    uint64_t v21 = static Array._allocateBufferUninitialized(minimumCapacity:)(v19 >> 1, v141);
    *(void *)(v21 + 16) = v20;
    id v22 = *(unsigned __int8 *)(v140 + 80);
    __int128 v132 = (void *)v21;
    __int128 v139 = v21 + ((v22 + 32) & ~v22);
  }

  uint64_t v24 = 0LL;
  uint64_t v23 = (char *)_swiftEmptyArrayStorage;
  __int16 v146 = a1;
  while (1)
  {
    __int128 v135 = v23;
    unsigned int v26 = v24;
    uint64_t v27 = v24 + 1;
    if ((uint64_t)(v24 + 1) >= v17)
    {
      uint64_t v44 = v24 + 1;
      uint64_t v23 = v135;
      uint64_t v45 = v24;
      goto LABEL_58;
    }

    __int128 v134 = v2;
    uint64_t v28 = *a1;
    BOOL v29 = *(void *)(v140 + 72);
    unsigned int v30 = *a1 + v29 * v27;
    __int16 v148 = v17;
    uint64_t v31 = v143;
    sub_1004D7E28(v30, (uint64_t)v143);
    uint64_t v32 = v144;
    sub_1004D7E28(v28 + v29 * v26, (uint64_t)v144);
    v145 = *v31;
    uint64_t v33 = *v32;
    sub_1004D7E6C((uint64_t)v32);
    uint64_t v34 = (uint64_t)v31;
    uint64_t v35 = v148;
    sub_1004D7E6C(v34);
    __int128 v138 = v26;
    v142 = v28;
    v149 = v29;
    if ((uint64_t)(v26 + 2) >= v35)
    {
      dispatch_block_t v38 = v26 + 2;
    }

    else
    {
      uint64_t v36 = v29 * v27;
      uint64_t v37 = v28;
      dispatch_block_t v38 = v26 + 2;
      unsigned int v39 = v29 * (v26 + 2);
      while (1)
      {
        uint64_t v40 = v145 < v33;
        uint64_t v41 = v143;
        sub_1004D7E28(v37 + v39, (uint64_t)v143);
        uint64_t v42 = v144;
        sub_1004D7E28(v37 + v36, (uint64_t)v144);
        unint64_t v43 = *v41 >= *v42;
        sub_1004D7E6C((uint64_t)v42);
        sub_1004D7E6C((uint64_t)v41);
        if (v40 == v43) {
          break;
        }
        v37 += v149;
        if (v148 == ++v38)
        {
          uint64_t v35 = v148;
          dispatch_block_t v38 = v148;
          a1 = v146;
          goto LABEL_24;
        }
      }

      a1 = v146;
      uint64_t v35 = v148;
    }

LABEL_242:
}

  v560 = kIDSQRAllocateKey_PreviousRelayIP;
  v561 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_PreviousRelayIP, v964, v1007, v1050));
  v563 = objc_opt_class(&OBJC_CLASS___NSData, v562);
  v564 = objc_opt_isKindOfClass(v561, v563);

  v565 = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v560]);
  v566 = v565;
  if ((v564 & 1) != 0)
  {
    previousRelayIP = self->_previousRelayIP;
    self->_previousRelayIP = v565;
LABEL_244:

    goto LABEL_251;
  }

  if (v566)
  {
    v568 = OSLogHandleForIDSCategory("QRAllocator");
    v569 = (os_log_s *)objc_claimAutoreleasedReturnValue(v568);
    if (os_log_type_enabled(v569, OS_LOG_TYPE_DEBUG))
    {
      v570 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v560]);
      v572 = (id)objc_opt_class(&OBJC_CLASS___NSData, v571);
      v573 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v560]);
      v575 = (id)objc_opt_class(v573, v574);
      *(_DWORD *)buf = 138412802;
      v1070 = v570;
      v1071 = 2112;
      v1072 = v572;
      v1073 = 2112;
      v1074 = v575;
      _os_log_impl( (void *)&_mh_execute_header,  v569,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v576))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        previousRelayIP = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v560]);
        v578 = objc_opt_class(&OBJC_CLASS___NSData, v577);
        v579 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v560]);
        v1008 = v578;
        v1051 = objc_opt_class(v579, v580);
        v965 = previousRelayIP;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_244;
      }
    }
  }

void sub_10008B9B4( _Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, id location)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x10008B0ACLL);
  }

  _Unwind_Resume(exc_buf);
}

void sub_10008BA6C(uint64_t a1, void *a2)
{
  id v131 = a2;
  uint64_t v133 = a1;
  __int128 v3 = (id *)(a1 + 48);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    if (v131)
    {
      uint64_t v4 = OSLogHandleForTransportCategory("IDSDSession");
      unint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        id v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sharedState]);
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
        *(_DWORD *)buf = 138412546;
        __int128 v139 = v7;
        __int16 v140 = 2112;
        *(void *)__int128 v141 = v131;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Connect to QR server failed for %@ with error %@.",  buf,  0x16u);
      }

      uint64_t v9 = os_log_shim_legacy_logging_enabled(v8);
      if ((_DWORD)v9)
      {
        if (_IDSShouldLogTransport(v9))
        {
          uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sharedState]);
          uint64_t v107 = (void *)objc_claimAutoreleasedReturnValue([v10 uniqueID]);
          id v110 = v131;
          _IDSLogTransport( @"IDSDSession",  @"IDS",  @"Connect to QR server failed for %@ with error %@.");

          if (_IDSShouldLog(0LL, @"IDSDSession"))
          {
            dispatch_block_t v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "sharedState", v107, v131));
            uint64_t v107 = (void *)objc_claimAutoreleasedReturnValue([v11 uniqueID]);
            id v110 = v131;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Connect to QR server failed for %@ with error %@.");
          }
        }
      }

      id v12 = objc_msgSend(WeakRetained, "globalLinkErrorToSessionEndReason:", objc_msgSend(v131, "code", v107, v110));
      id v13 = (__CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v12));
      if (v14)
      {
        CFDictionarySetValue(v13, kIDSQRAllocateKey_ErrorCode, v14);
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1006986F8();
      }

      v142[0] = 0xAAAAAAAAAAAAAAAALL;
      v142[1] = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v57 = objc_alloc(&OBJC_CLASS___NSUUID);
      unint64_t v58 = (const void *)kIDSQRAllocateKey_RequestID;
      uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v133 + 32) objectForKeyedSubscript:kIDSQRAllocateKey_RequestID]);
      uint64_t v60 = -[NSUUID initWithUUIDString:](v57, "initWithUUIDString:", v59);
      -[NSUUID getUUIDBytes:](v60, "getUUIDBytes:", v142);

      id v61 = (id)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v142, 16LL));
      if (v61)
      {
        CFDictionarySetValue(v13, v58, v61);
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1006985FC();
      }

      uint64_t v62 = (const void *)kIDSQRAllocateKey_RelayAddress;
      uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v133 + 32) objectForKeyedSubscript:kIDSQRAllocateKey_RelayAddress]);
      if (v63)
      {
        CFDictionarySetValue(v13, v62, v63);
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1006985FC();
      }

      uint64_t v64 = (const void *)kIDSQRAllocateKey_RelayPort;
      uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v133 + 32) objectForKeyedSubscript:kIDSQRAllocateKey_RelayPort]);
      if (v65)
      {
        CFDictionarySetValue(v13, v64, v65);
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1006985FC();
      }

      uint64_t v66 = (const void *)kIDSQRAllocateKey_RelayAddressIPv6;
      uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v133 + 32) objectForKeyedSubscript:kIDSQRAllocateKey_RelayAddressIPv6]);
      if (v67) {
        CFDictionarySetValue(v13, v66, v67);
      }

      uint64_t v68 = (const void *)kIDSQRAllocateKey_AppID;
      uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v133 + 32) objectForKeyedSubscript:kIDSQRAllocateKey_AppID]);
      if (v69)
      {
        CFDictionarySetValue(v13, v68, v69);
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1006985FC();
      }

      uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue(+[IMDeviceSupport sharedInstance](&OBJC_CLASS___IMDeviceSupport, "sharedInstance"));
      uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue([v70 userAgentString]);

      id v72 = v71;
      if (v72)
      {
        CFDictionarySetValue(v13, kIDSQRAllocateKey_UserAgent, v72);
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_100698678();
      }

      double v73 = (const void *)kIDSQRAllocateKey_ReportingDataBlob;
      double v74 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v133 + 32) objectForKeyedSubscript:kIDSQRAllocateKey_ReportingDataBlob]);
      if (v74)
      {
        CFDictionarySetValue(v13, v73, v74);
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1006985FC();
      }

      double v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
      if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v133 + 40) sharedState]);
        uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue([v76 uniqueID]);
        *(_DWORD *)buf = 138412802;
        __int128 v139 = v77;
        __int16 v140 = 1024;
        *(_DWORD *)__int128 v141 = (_DWORD)v12;
        *(_WORD *)&v141[4] = 2112;
        *(void *)&v141[6] = v72;
        _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEFAULT,  "Sending server message QR metrics report for session %@ end reason %d, ua: %@",  buf,  0x1Cu);
      }

      uint64_t v78 = -[IDSServerMessage initWithPayload:command:]( objc_alloc(&OBJC_CLASS___IDSServerMessage),  "initWithPayload:command:",  v13,  &off_1009469D8);
      uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDeliveryController sharedInstance](&OBJC_CLASS___IDSDeliveryController, "sharedInstance"));
      v137[0] = _NSConcreteStackBlock;
      v137[1] = 3221225472LL;
      v137[2] = sub_10008CC24;
      v137[3] = &unk_1008F8A50;
      v137[4] = *(void *)(v133 + 40);
      [v79 sendIDSMessage:v78 service:0 topic:kIDSQuickRelayPushTopic completionBlock:v137];

      id v80 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v133 + 40) sharedState]);
      if ([v80 isInitiator])
      {
        id v81 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v133 + 40) sharedState]);
        if ([v81 clientType] == (id)1)
        {

LABEL_70:
          [*(id *)(v133 + 40) _sendSessionEndWithData:0];
          goto LABEL_71;
        }

        uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v133 + 40) sharedState]);
        BOOL v83 = [v82 clientType] == (id)5;

        if (v83) {
          goto LABEL_70;
        }
      }

      else
      {
      }

void sub_10008CC24(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 idsResponseCode];
  unint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 uniqueID]);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 deliveryError]);
      int v11 = 138412546;
      id v12 = v8;
      __int16 v13 = 2112;
      uint64_t v14 = v9;
      uint64_t v10 = "Failed sending server message QR metrics report for session %@, delivery error %@";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v11, 0x16u);
    }
  }

  else if (v6)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 uniqueID]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 deliveryError]);
    int v11 = 138412546;
    id v12 = v8;
    __int16 v13 = 2112;
    uint64_t v14 = v9;
    uint64_t v10 = "Finished sending server message QR metrics report for session %@ delivery error %@";
    goto LABEL_6;
  }
}

void sub_10008CD98(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v2 = OSLogHandleForTransportCategory("IDSDSession");
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sharedState]);
      unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 uniqueID]);
      unsigned int v6 = [WeakRetained sharedSessionHasJoined];
      uint64_t v7 = @"NO";
      if (v6) {
        uint64_t v7 = @"YES";
      }
      *(_DWORD *)buf = 138412546;
      uint64_t v19 = v5;
      __int16 v20 = 2112;
      uint64_t v21 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "reinitiate 15s have passed for %@; has joined: %@.",
        buf,
        0x16u);
    }

    uint64_t v9 = os_log_shim_legacy_logging_enabled(v8);
    if ((_DWORD)v9 && _IDSShouldLogTransport(v9))
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sharedState]);
      int v11 = (void *)objc_claimAutoreleasedReturnValue([v10 uniqueID]);
      id v12 = [WeakRetained sharedSessionHasJoined] ? @"YES" : @"NO";
      id v16 = v11;
      id v17 = v12;
      _IDSLogTransport(@"IDSDSession", @"IDS", @"reinitiate 15s have passed for %@; has joined: %@.");

      if (_IDSShouldLog(0LL, @"IDSDSession"))
      {
        __int16 v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "sharedState", v11, v17));
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 uniqueID]);
        else {
          uint64_t v15 = @"NO";
        }
        id v16 = v14;
        id v17 = (__CFString *)v15;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"reinitiate 15s have passed for %@; has joined: %@.");
      }
    }
  }
}

void sub_10008CFC0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) groupStatusNotificationController]);
  unsigned int v39 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v39 groupID]);
  dispatch_block_t v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v38 destinations]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v37 allObjects]);
  unint64_t v5 = *(void **)(a1 + 32);
  uint64_t v34 = v5[23];
  uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v5 accountController]);
  BOOL v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v36 accountID]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v35 accountWithUniqueID:v6]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 fromURI]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  int v11 = (void *)objc_claimAutoreleasedReturnValue([v10 uniqueID]);
  unsigned __int8 v12 = [*(id *)(a1 + 32) shouldReportUPlusOneKey];
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472LL;
  v41[2] = sub_10008D3B8;
  v41[3] = &unk_1008F8AA0;
  v41[4] = *(void *)(a1 + 32);
  LOBYTE(v33) = v12;
  [v2 notifyJoinToGroup:v3 members:v4 params:v34 fromAccount:v7 fromURI:v9 sessionID:v11 isUPlusOne:v33 completionBlock:v41];

  if (*(_BYTE *)(*(void *)(a1 + 32) + 636LL))
  {
    uint64_t v13 = OSLogHandleForTransportCategory("IDSDSession");
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "lightweight participant: create keys",  buf,  2u);
    }

    uint64_t v16 = os_log_shim_legacy_logging_enabled(v15);
    if ((_DWORD)v16 && _IDSShouldLogTransport(v16))
    {
      _IDSLogTransport(@"IDSDSession", @"IDS", @"lightweight participant: create keys");
    }

    id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountController]);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 accountID]);
    __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([v17 accountWithUniqueID:v19]);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 primaryRegistration]);
    id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 pushToken]);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 serviceName]);
    double v25 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPushToken pushTokenWithData:withServiceLoggingHint:]( &OBJC_CLASS___IDSPushToken,  "pushTokenWithData:withServiceLoggingHint:",  v22,  v24));

    unsigned int v26 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
    id v27 = [v26 createRealTimeEncryptionFullIdentityForDevice:v25 completionBlock:0];

    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
    BOOL v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    unsigned int v30 = (void *)objc_claimAutoreleasedReturnValue([v29 groupID]);
    dispatch_time_t v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v31 uniqueID]);
    [v28 reliablyRequestKeyMaterialForGroup:v30 sessionID:v32];
  }

void sub_10008D3B8(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  uint64_t v13 = OSLogHandleForTransportCategory("IDSDSession");
  uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = @"NO";
    if ((_DWORD)a6) {
      uint64_t v15 = @"YES";
    }
    *(_DWORD *)buf = 138412546;
    id v22 = v11;
    __int16 v23 = 2112;
    uint64_t v24 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Completed send of join notification fanout message { groupID: %@, success: %@ }",  buf,  0x16u);
  }

  uint64_t v17 = os_log_shim_legacy_logging_enabled(v16);
  if ((_DWORD)v17 && _IDSShouldLogTransport(v17))
  {
    if ((_DWORD)a6) {
      uint64_t v18 = @"YES";
    }
    else {
      uint64_t v18 = @"NO";
    }
    id v19 = v11;
    __int16 v20 = v18;
    _IDSLogTransport( @"IDSDSession",  @"IDS",  @"Completed send of join notification fanout message { groupID: %@, success: %@ }");
    if (_IDSShouldLog(0LL, @"IDSDSession"))
    {
      id v19 = v11;
      __int16 v20 = v18;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Completed send of join notification fanout message { groupID: %@, success: %@ }");
    }
  }

  objc_msgSend(*(id *)(a1 + 32), "_noteJoinNotificationDidDeliverWithSuccess:", a6, v19, v20);
}

void sub_10008DAEC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x10008D988LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_10008DB50(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v2 = OSLogHandleForTransportCategory("IDSDSession");
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sharedState]);
      unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 groupID]);
      *(_DWORD *)buf = 138412290;
      id v12 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Failed to receive all APNS courier acks for reliable join notification before timeout -- ending session { groupID: %@ }",  buf,  0xCu);
    }

    uint64_t v7 = os_log_shim_legacy_logging_enabled(v6);
    if ((_DWORD)v7)
    {
      if (_IDSShouldLogTransport(v7))
      {
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sharedState]);
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 groupID]);
        _IDSLogTransport( @"IDSDSession",  @"IDS",  @"Failed to receive all APNS courier acks for reliable join notification before timeout -- ending session { groupID: %@ }");

        if (_IDSShouldLog(0LL, @"IDSDSession"))
        {
          uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "sharedState", v10));
          id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 groupID]);
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Failed to receive all APNS courier acks for reliable join notification before timeout -- ending session { groupID: %@ }");
        }
      }
    }

    objc_msgSend(WeakRetained, "endSessionWithReason:", 40, v10);
  }
}

void sub_10008EC80(id a1, BOOL a2)
{
  if (!a2) {
    IDSTransportThreadAssertRealTimeMode(1LL);
  }
}

id sub_10008EC90(uint64_t a1, uint64_t a2)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  if ([v4 clientType] == (id)4)
  {
    int v5 = *(unsigned __int8 *)(a2 + 1216);

    if (!v5) {
      *(_BYTE *)(a2 + 1216) = 1;
    }
  }

  else
  {
  }

  return [*(id *)(a1 + 32) link:0 didReceivePacket:a2 fromDeviceUniqueID:0 cbuuid:0];
}

void sub_10008ED04( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9)
{
  id v13 = a2;
  id v14 = a8;
  id v15 = a9;
  uint64_t v16 = OSLogHandleForTransportCategory("IDSDSession");
  uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109634;
    int v26 = a6;
    __int16 v27 = 1024;
    int v28 = a7;
    __int16 v29 = 2112;
    id v30 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Open socket for session complete (socket: %d, initial link type:%d) (error: %@)",  buf,  0x18u);
  }

  uint64_t v19 = os_log_shim_legacy_logging_enabled(v18);
  if ((_DWORD)v19)
  {
    if (_IDSShouldLogTransport(v19))
    {
      uint64_t v23 = a7;
      id v24 = v15;
      uint64_t v22 = a6;
      _IDSLogTransport( @"IDSDSession",  @"IDS",  @"Open socket for session complete (socket: %d, initial link type:%d) (error: %@)");
      if (_IDSShouldLog(0LL, @"IDSDSession"))
      {
        uint64_t v23 = a7;
        id v24 = v15;
        uint64_t v22 = a6;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Open socket for session complete (socket: %d, initial link type:%d) (error: %@)");
      }
    }
  }

  objc_msgSend(*(id *)(a1 + 32), "_setInitialLinkType:", a7, v22, v23, v24);
  __int16 v20 = *(_DWORD **)(a1 + 32);
  if ((a6 & 0x80000000) != 0 || v15)
  {
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 sharedState]);
    [v21 clearAllTimers];

    [*(id *)(a1 + 32) endSessionWithReason:10];
  }

  else
  {
    v20[146] = a6;
    [*(id *)(a1 + 32) checkAndCallSessionStart];
  }
}

void sub_10008EEEC( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9)
{
  id v12 = a2;
  id v13 = a8;
  id v14 = a9;
  uint64_t v15 = OSLogHandleForTransportCategory("IDSDSession");
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    int v17 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109634;
    int v30 = v17;
    __int16 v31 = 1024;
    int v32 = a6;
    __int16 v33 = 2112;
    id v34 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Open socket for session complete (extra #%d) (socket: %d) (error: %@)",  buf,  0x18u);
  }

  uint64_t v19 = os_log_shim_legacy_logging_enabled(v18);
  if ((_DWORD)v19)
  {
    if (_IDSShouldLogTransport(v19))
    {
      uint64_t v27 = a6;
      id v28 = v14;
      uint64_t v26 = *(unsigned int *)(a1 + 40);
      _IDSLogTransport( @"IDSDSession",  @"IDS",  @"Open socket for session complete (extra #%d) (socket: %d) (error: %@)");
      if (_IDSShouldLog(0LL, @"IDSDSession"))
      {
        uint64_t v27 = a6;
        id v28 = v14;
        uint64_t v26 = *(unsigned int *)(a1 + 40);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Open socket for session complete (extra #%d) (socket: %d) (error: %@)");
      }
    }
  }

  __int16 v20 = *(void **)(a1 + 32);
  if ((a6 & 0x80000000) != 0 || v14)
  {
    double v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "sharedState", v26, v27, v28));
    [v25 clearAllTimers];

    [*(id *)(a1 + 32) endSessionWithReason:10];
  }

  else
  {
    id v21 = v20;
    objc_sync_enter(v21);
    uint64_t v22 = *(void **)(*(void *)(a1 + 32) + 144LL);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a6));
    id v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40)));
    [v22 setObject:v23 forKey:v24];

    objc_sync_exit(v21);
    [*(id *)(a1 + 32) checkAndCallSessionStart];
  }
}

void sub_10008F6BC(uint64_t a1)
{
  uint64_t v4 = IDSQuickRelayServerProviderKey;
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 40)));
  int v5 = v2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v5,  &v4,  1LL));
  [v1 link:v1 didReceiveReportEvent:v3];
}

void sub_10008F818(_Unwind_Exception *a1)
{
}

void sub_10008FE00( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_10008FE40(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) utunController]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sharedState]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
    objc_msgSend(v2, "onTransportThread_SendSKEData:skeData:completionHandler:", v4, WeakRetained[72], &stru_1008F8BE8);

    int v5 = (void *)WeakRetained[72];
    WeakRetained[72] = 0LL;
  }
}

void sub_10008FEE4(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    uint64_t v3 = OSLogHandleForTransportCategory("IDSDSession");
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v8 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Retry sendSKEData failed with error: %@. Give up.",  buf,  0xCu);
    }

    uint64_t v6 = os_log_shim_legacy_logging_enabled(v5);
    if ((_DWORD)v6)
    {
      if (_IDSShouldLogTransport(v6))
      {
        _IDSLogTransport(@"IDSDSession", @"IDS", @"Retry sendSKEData failed with error: %@. Give up.");
        if (_IDSShouldLog(0LL, @"IDSDSession")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Retry sendSKEData failed with error: %@. Give up.");
        }
      }
    }
  }
}

uint64_t sub_1000903C0(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    uint64_t v4 = *(void **)(a1 + 32);
    id v5 = a3;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 sharedState]);
    [v6 setLocalBlob:v5];
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100091428(id a1, BOOL a2)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[IDSDSessionController sharedInstance](&OBJC_CLASS___IDSDSessionController, "sharedInstance"));
  [v2 updateCriticalReliabilityState];
}

void sub_100091500(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = OSLogHandleForTransportCategory("IDSDSession");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v13 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "disconnectGlobalLink failed with error %@",  buf,  0xCu);
    }

    uint64_t v7 = os_log_shim_legacy_logging_enabled(v6);
    if ((_DWORD)v7)
    {
      if (_IDSShouldLogTransport(v7))
      {
        id v11 = v3;
        _IDSLogTransport(@"IDSDSession", @"IDS", @"disconnectGlobalLink failed with error %@");
        if (_IDSShouldLog(0LL, @"IDSDSession"))
        {
          id v11 = v3;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"disconnectGlobalLink failed with error %@");
        }
      }
    }
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "utunController", v11));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 uniqueID]);
  [v8 stopGlobalLinkForDevice:v10];
}

id sub_1000917C4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) didSessionReinitiated];
}

LABEL_49:
  double v74 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
  double v75 = (void *)objc_claimAutoreleasedReturnValue([v74 uniqueID]);
  -[IDSDSession _closeSocketToDevice:](self, "_closeSocketToDevice:", v75);

  -[IDSDSession _closeSocketToDevice:](self, "_closeSocketToDevice:", kIDSDefaultPairedDeviceID);
  uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
  LODWORD(v75) = [v76 enableQuickRelay];

  if ((_DWORD)v75)
  {
    -[IDSDSession _cleanupQuickRelaySession](self, "_cleanupQuickRelaySession");
  }

  else
  {
    uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession utunController](self, "utunController"));
    uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
    uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue([v78 uniqueID]);
    [v77 stopUDPGlobalLinkForDevice:v79];
  }

  id v80 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
  id v81 = [v80 clientType] == (id)4;

  if (v81)
  {
    uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
    BOOL v83 = (void *)objc_claimAutoreleasedReturnValue([v82 uniqueID]);
    uint64_t v84 = [v83 copy];

    unsigned __int8 v85 = dispatch_time(0LL, 5000000000LL);
    id v87 = im_primary_queue(v85, v86);
    uint64_t v88 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v87);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100092C24;
    block[3] = &unk_1008F6010;
    uint64_t v125 = v84;
    uint64_t v89 = v84;
    dispatch_after(v85, v88, block);
  }

  uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
  if ([v90 sharedSession] && self->_groupSessionState == 2)
  {
    uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
    uint64_t v92 = [v91 state] == 8;

    if (!v92)
    {
      dispatch_block_t v93 = OSLogHandleForTransportCategory("IDSDSession");
      uint64_t v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);
      if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v95 = (IDSClientChannel *)objc_claimAutoreleasedReturnValue( -[IDSGroupStatusNotificationParameters participantID]( self->_groupStatusNotificationParams,  "participantID"));
        *(_DWORD *)buf = 138412290;
        __int128 v127 = v95;
        _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_DEFAULT,  "The client left the group session. IDSGroupSession can be removed. _groupStatusNotificationParams.participantint ID = %@",  buf,  0xCu);
      }

      uint64_t v97 = os_log_shim_legacy_logging_enabled(v96);
      if ((_DWORD)v97)
      {
        if (_IDSShouldLogTransport(v97))
        {
          id v110 = (IMMessageContext *)objc_claimAutoreleasedReturnValue( -[IDSGroupStatusNotificationParameters participantID]( self->_groupStatusNotificationParams,  "participantID"));
          _IDSLogTransport( @"IDSDSession",  @"IDS",  @"The client left the group session. IDSGroupSession can be removed. _groupStatusNotificationParams.participantint ID = %@");

          if (_IDSShouldLog(0LL, @"IDSDSession"))
          {
            id v110 = (IMMessageContext *)objc_claimAutoreleasedReturnValue( -[IDSGroupStatusNotificationParameters participantID]( self->_groupStatusNotificationParams,  "participantID",  v110));
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"The client left the group session. IDSGroupSession can be removed. _groupStatusNotificationParams.participantint ID = %@");
          }
        }
      }

      uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState", v110));
      __int16 v99 = (void *)objc_claimAutoreleasedReturnValue([v98 uniqueID]);
      double v100 = [v99 copy];

      __int16 v103 = im_primary_queue(v101, v102);
      double v104 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v103);
      v122[0] = _NSConcreteStackBlock;
      v122[1] = 3221225472LL;
      v122[2] = sub_100092C94;
      v122[3] = &unk_1008F5F80;
      v122[4] = self;
      uint64_t v123 = v100;
      uint64_t v105 = v100;
      uint64_t v106 = dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT,  QOS_CLASS_USER_INITIATED,  0,  v122);
      dispatch_async(v104, v106);
    }
  }

  else
  {
  }

    int v55 = OSLogHandleForTransportCategory("IDSDaemon");
    uint64_t v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
    {
      uint64_t v57 = [v15 broadcastID];
      *(_DWORD *)buf = 134218242;
      *(void *)&uint8_t buf[4] = v57;
      uint64_t v107 = 2112;
      uint64_t v108 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_INFO,  "Broadcast: Enqueueing broadcast %lld on topic %@ \n",  buf,  0x16u);
    }

    uint64_t v59 = os_log_shim_legacy_logging_enabled(v58);
    if ((_DWORD)v59 && _IDSShouldLogTransport(v59))
    {
      double v73 = [v15 broadcastID];
      double v74 = v16;
      _IDSLogTransport(@"IDSDaemon", @"IDS", @"Broadcast: Enqueueing broadcast %lld on topic %@ \n");
    }

    pthread_mutex_lock(p_listenerLock);
    id v87 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon broadcastAttemptQueueFromPriority:](self, "broadcastAttemptQueueFromPriority:", v84));
    uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue([v92 identifier]);
    id v61 = (void *)objc_claimAutoreleasedReturnValue([v87 objectForKey:v60]);

    if (!v61)
    {
      id v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
      uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue([v92 identifier]);
      [v87 setObject:v61 forKey:v62];
    }

    unsigned __int8 v85 = v61;
    objc_msgSend(v61, "addObject:", v15, v73, v74);
    if ((v88 & 1) != 0) {
      uint64_t v63 = 0LL;
    }
    else {
      uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    }
    uint64_t v64 = [v15 broadcastID];
    *(void *)buf = 0xAAAAAAAAAAAAAAAALL;
    objc_initWeak((id *)buf, v15);
    v94[0] = _NSConcreteStackBlock;
    v94[1] = 3221225472LL;
    v94[2] = sub_100114B7C;
    v94[3] = &unk_1008FAD10;
    __int16 v101 = v91;
    objc_copyWeak(v102, (id *)buf);
    v94[4] = self;
    uint64_t v95 = v92;
    uint64_t v96 = v17;
    uint64_t v65 = v18;
    __int16 v103 = v93;
    uint64_t v97 = v65;
    v102[1] = v64;
    uint64_t v98 = v16;
    __int16 v99 = v19;
    uint64_t v66 = v63;
    double v100 = v66;
    uint64_t v67 = objc_retainBlock(v94);
    [v15 setBroadcastBlock:v67];
    pthread_mutex_unlock(p_listenerLock);

    objc_destroyWeak(v102);
    objc_destroyWeak((id *)buf);

    goto LABEL_60;
  }

  double v25 = OSLogHandleForTransportCategory("IDSDaemon");
  uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Daemon was hard reset, not enqueuing broadcast",  buf,  2u);
  }

  id v28 = os_log_shim_legacy_logging_enabled(v27);
LABEL_71:
  os_activity_scope_leave(&state);
  cut_arc_os_release(&v105);
}
}
}

    uint64_t v67 = *(_BYTE *)(a1 + 137) == 0;
    uint64_t v68 = *(void **)(a1 + 88);
    uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "rawToken", v166, *(void *)&v170));
    if (v67) {
      [v68 reportMKMReceivedOverPushFromToken:v69 material:v178];
    }
    else {
      [v68 reportMKMReceivedOverQRFromToken:v69 material:v178];
    }

    goto LABEL_53;
  }

  v179[2]();
  uint64_t v8 = objc_loadWeakRetained((id *)(a1 + 128));
  [v8 updateCriticalReliabilityState];

LABEL_32:
}

        dispatch_block_t v38 = (char *)v38 + 1;
      }

      while (v36 != v38);
      unsigned int v48 = [v55 countByEnumeratingWithState:&v61 objects:v71 count:16];
      BOOL v36 = v48;
    }

    while (v48);
  }

  os_activity_scope_leave(&state);
  cut_arc_os_release(&v70);
}

  return v22;
}

LABEL_65:
  -[IDSDSession setShouldConnectToQRServer:](self, "setShouldConnectToQRServer:", 0LL);
  uint64_t v107 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession sharedState](self, "sharedState"));
  [v107 setState:8];

  v121[0] = _NSConcreteStackBlock;
  v121[1] = 3221225472LL;
  v121[2] = sub_100092D58;
  v121[3] = &unk_1008F7948;
  v121[4] = self;
  IDSTransportThreadAddBlock(v121, v108);
  self->_channelDataCachedTime = 0.0;
}

    objc_autoreleasePoolPop(v10);
  }
}

      __int16 v29 = (char *)v29 + 1;
    }

    while (v27 != v29);
    unsigned __int8 v85 = [obj countByEnumeratingWithState:&v216 objects:v242 count:16];
    uint64_t v27 = v85;
  }

  while (v85);
LABEL_96:

  if (-[NSMutableArray count](v177, "count"))
  {
    uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    v176 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray __imArrayByApplyingBlock:](v177, "__imArrayByApplyingBlock:", &stru_100901BA0));
    id v87 = objc_alloc_init(&OBJC_CLASS___IDSIDQueryMessage);
    -[IDSIDQueryMessage setURIs:](v87, "setURIs:", v176);
    uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray prefixedURI](v12, "prefixedURI"));
    -[IDSIDQueryMessage setSelfURI:](v87, "setSelfURI:", v88);

    -[IDSIDQueryMessage setIDCertificate:](v87, "setIDCertificate:", v169);
    -[IDSIDQueryMessage setIdentityPrivateKey:](v87, "setIdentityPrivateKey:", v163);
    -[IDSIDQueryMessage setTimeout:](v87, "setTimeout:", v25);
    v174 = (void *)objc_claimAutoreleasedReturnValue(-[IDSPeerIDPushHandler pushToken](self->_pushHandler, "pushToken"));
    -[IDSIDQueryMessage setPushToken:](v87, "setPushToken:", v174);
    -[IDSIDQueryMessage setTopic:](v87, "setTopic:", @"com.apple.ids.query");
    -[IDSIDQueryMessage setUnderlyingService:](v87, "setUnderlyingService:", v183);
    -[IDSIDQueryMessage setImportanceLevel:](v87, "setImportanceLevel:", 2LL);
    if (v166) {
      uint64_t v89 = @"true";
    }
    else {
      uint64_t v89 = 0LL;
    }
    -[IDSIDQueryMessage setRequiredForMessaging:](v87, "setRequiredForMessaging:", v89, v150);
    -[IDSIDQueryMessage setResultExpected:](v87, "setResultExpected:", v165);
    -[IDSIDQueryMessage setIsForced:](v87, "setIsForced:", v164);
    uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance"));
    v181 = (void *)objc_claimAutoreleasedReturnValue([v90 serviceWithIdentifier:v183]);

    uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance"));
    v173 = (void *)objc_claimAutoreleasedReturnValue([v91 allPrimaryServices]);

    if ([v181 adHocServiceType] != 5)
    {
      if ([v173 containsObject:v181])
      {
      }

      else
      {
        -[IDSIDQueryMessage setSubService:](v87, "setSubService:", v183);
      }
    }

    if ([v181 forceHTTPQueriesOnly])
    {
      double v102 = OSLogHandleForIDSCategory("PeerLookup");
      __int16 v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
      if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v240 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_DEFAULT,  "Service wants to force HTTP queries, setting importance level lower to ensure it doesnt use APS",  v240,  2u);
      }

      if (os_log_shim_legacy_logging_enabled(v104) && (_IDSShouldLog(0LL, @"PeerLookup") & 1) != 0)
      {
        uint64_t v105 = @"Service wants to force HTTP queries, setting importance level lower to ensure it doesnt use APS";
        goto LABEL_125;
      }

      goto LABEL_126;
    }

    if (IMGetDomainBoolForKey(@"com.apple.registration", @"forceHTTPQueries"))
    {
      uint64_t v106 = OSLogHandleForIDSCategory("PeerLookup");
      uint64_t v107 = (os_log_s *)objc_claimAutoreleasedReturnValue(v106);
      if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v240 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v107,  OS_LOG_TYPE_DEFAULT,  "*** We are currently forcing HTTP queries due to a default; remove default to re-enable QORP!",
          v240,
          2u);
      }

      if (os_log_shim_legacy_logging_enabled(v108)
        && _IDSShouldLog(0LL, @"PeerLookup"))
      {
        uint64_t v105 = @"*** We are currently forcing HTTP queries due to a default; remove default to re-enable QORP!";
LABEL_125:
        _IDSLogV(0LL, @"IDSFoundation", @"PeerLookup", v105);
      }

void sub_100092B9C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1000929ACLL);
  }

  _Unwind_Resume(a1);
}

void sub_100092C24(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSUTunDeliveryController sharedInstance](&OBJC_CLASS___IDSUTunDeliveryController, "sharedInstance"));
  [v2 removeUTunPeerWithSessionID:*(void *)(a1 + 32) reason:0 shouldWait:0];

  id v3 = (id)objc_claimAutoreleasedReturnValue(+[IDSUTunDeliveryController sharedInstance](&OBJC_CLASS___IDSUTunDeliveryController, "sharedInstance"));
  [v3 unlockContinuityPeer:*(void *)(a1 + 32)];
}

void sub_100092C94(uint64_t a1)
{
  uint64_t v6 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v6, "setShouldBoost:", 1LL);
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 pushTopic]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( [v2 broadcasterForTopic:v4 entitlement:kIDSSessionEntitlement command:0 messageContext:v6]);

  [v5 groupSessionDidTerminate:*(void *)(a1 + 40)];
}

void sub_100092D58(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[IDSDSessionController sharedInstance](&OBJC_CLASS___IDSDSessionController, "sharedInstance"));
  [v1 updateCriticalReliabilityState];
}

void sub_10009300C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[IDSUTunDeliveryController sharedInstance](&OBJC_CLASS___IDSUTunDeliveryController, "sharedInstance"));
  [v2 defaultPeerSetLinkPreferences:*(void *)(a1 + 32)];
}

void sub_1000933FC(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = OSLogHandleForTransportCategory("IDSDSession");
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v21 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Unhooking and closing socket descriptors from TransportThread %@ (possibly not on TransportThread)",  buf,  0xCu);
    }

    uint64_t v7 = os_log_shim_legacy_logging_enabled(v6);
    if ((_DWORD)v7)
    {
      if (_IDSShouldLogTransport(v7))
      {
        uint64_t v14 = *(void *)(a1 + 32);
        _IDSLogTransport( @"IDSDSession",  @"IDS",  @"Unhooking and closing socket descriptors from TransportThread %@ (possibly not on TransportThread)");
        if (_IDSShouldLog(0LL, @"IDSDSession"))
        {
          uint64_t v14 = *(void *)(a1 + 32);
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Unhooking and closing socket descriptors from TransportThread %@ (possibly not on TransportThread)");
        }
      }
    }

    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    id v8 = *(id *)(a1 + 32);
    id v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v16;
      do
      {
        id v11 = 0LL;
        do
        {
          if (*(void *)v16 != v10) {
            objc_enumerationMutation(v8);
          }
          id v12 = objc_msgSend(*(id *)(*((void *)&v15 + 1) + 8 * (void)v11), "intValue", v14);
          int v13 = (int)v12;
          if ((_DWORD)v12 != -1)
          {
            IDSTransportThreadRemoveSocket(v12);
            close(v13);
          }

          id v11 = (char *)v11 + 1;
        }

        while (v9 != v11);
        id v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }

      while (v9);
    }
  }

void sub_1000942A0(id a1, BOOL a2)
{
  if (!a2) {
    IDSTransportThreadAssertRealTimeMode(0LL);
  }
}

void sub_10009494C(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[IDSDSessionController sharedInstance](&OBJC_CLASS___IDSDSessionController, "sharedInstance"));
  [v1 updateCriticalReliabilityState];
}

uint64_t sub_100095C1C(void *a1, void *a2, NSSet **a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = objc_autoreleasePoolPush();
  if (![v10 count] && !objc_msgSend(v9, "count"))
  {
    __int128 v17 = 0LL;
    uint64_t v21 = 0LL;
    goto LABEL_14;
  }

  if ([v10 count] && !objc_msgSend(v9, "count"))
  {
    __int128 v15 = -[NSSet initWithArray:](objc_alloc(&OBJC_CLASS___NSSet), "initWithArray:", v10);
    id v16 = 0LL;
    __int128 v17 = 0LL;
    uint64_t v21 = 1LL;
  }

  else
  {
    if (![v10 count] && objc_msgSend(v9, "count"))
    {
      __int128 v17 = -[NSSet initWithArray:](objc_alloc(&OBJC_CLASS___NSSet), "initWithArray:", v9);
      uint64_t v21 = 1LL;
LABEL_14:
      objc_autoreleasePoolPop(v11);
      id v16 = 0LL;
      __int128 v15 = 0LL;
      goto LABEL_26;
    }

    uint64_t v26 = a3;
    uint64_t v27 = v11;
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v10));
    int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v9));
    unsigned int v14 = [v12 isEqualToSet:v13];
    if ((v14 & 1) != 0)
    {
      __int128 v15 = 0LL;
      id v16 = 0LL;
      __int128 v17 = 0LL;
    }

    else
    {
      id v24 = a5;
      double v25 = a4;
      id v18 = [v13 mutableCopy];
      [v18 minusSet:v12];
      id v19 = [v12 mutableCopy];
      [v19 minusSet:v13];
      id v20 = [v13 mutableCopy];
      [v20 intersectSet:v12];
      if ([v19 count]) {
        __int128 v15 = (NSSet *)[v19 copy];
      }
      else {
        __int128 v15 = 0LL;
      }
      if ([v18 count]) {
        __int128 v17 = (NSSet *)[v18 copy];
      }
      else {
        __int128 v17 = 0LL;
      }
      uint64_t v23 = v18;
      if ([v20 count]) {
        id v16 = v20;
      }
      else {
        id v16 = 0LL;
      }

      a5 = v24;
      a4 = v25;
    }

    uint64_t v21 = v14 ^ 1;

    a3 = v26;
    id v11 = v27;
  }

  objc_autoreleasePoolPop(v11);
  if (v15)
  {
    __int128 v15 = v15;
    *a3 = v15;
  }

void sub_100095E9C( int a1, int a2, void *a3, void *a4, void *a5, NSMutableSet **a6, NSMutableSet **a7, NSMutableSet **a8, NSMutableSet **a9)
{
  id v24 = a3;
  id v16 = a4;
  id v17 = a5;
  if ([v24 count])
  {
    id v18 = *a8;
    if (!*a8)
    {
      id v18 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
      *a8 = v18;
    }

    -[NSMutableSet unionSet:](v18, "unionSet:", v24);
    if (a1 && [v17 count])
    {
      id v19 = *a6;
      if (!*a6)
      {
        id v19 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
        *a6 = v19;
      }

      -[NSMutableSet unionSet:](v19, "unionSet:", v24);
    }
  }

  if ([v16 count])
  {
    if ([v24 count])
    {
      id v20 = *a9;
      if (!*a9)
      {
        id v20 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
        *a9 = v20;
      }

      -[NSMutableSet unionSet:](v20, "unionSet:", v16);
    }

    if ([v17 count])
    {
      uint64_t v21 = *a6;
      if (!*a6)
      {
        uint64_t v21 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
        *a6 = v21;
      }

      -[NSMutableSet unionSet:](v21, "unionSet:", v16);
    }
  }

  if ([v17 count])
  {
    uint64_t v22 = *a7;
    if (!*a7)
    {
      uint64_t v22 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
      *a7 = v22;
    }

    -[NSMutableSet unionSet:](v22, "unionSet:", v17);
    if (a2 && [v24 count])
    {
      uint64_t v23 = *a9;
      if (!*a9)
      {
        uint64_t v23 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
        *a9 = v23;
      }

      -[NSMutableSet unionSet:](v23, "unionSet:", v17);
    }
  }
}

void sub_10009604C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72))
  {
    unsigned int v39 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) groupStatusNotificationController]);
    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    double v25 = (void *)objc_claimAutoreleasedReturnValue([v37 groupID]);
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    __int16 v33 = (void *)objc_claimAutoreleasedReturnValue([v35 destinations]);
    id v24 = (void *)objc_claimAutoreleasedReturnValue([v33 allObjects]);
    id v2 = *(void **)(a1 + 32);
    uint64_t v23 = v2[23];
    __int16 v29 = (void *)objc_claimAutoreleasedReturnValue([v2 accountController]);
    __int16 v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v31 accountID]);
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v29 accountWithUniqueID:v27]);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 fromURI]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 uniqueID]);
    unsigned __int8 v7 = [*(id *)(a1 + 32) shouldReportUPlusOneKey];
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) allObjects]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) allObjects]);
    LOBYTE(v21) = v7;
    [v39 notifyLeaveToSpecificMembersOfGroup:v25 members:v24 params:v23 fromAccount:v22 fromURI:v4 sessionID:v6 isUPlusOne:v21 requiredCapabilites:v8 re quiredLackOfCapabilities:v9];
  }

  if (*(_BYTE *)(a1 + 73))
  {
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) groupStatusNotificationController]);
    dispatch_block_t v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v38 groupID]);
    BOOL v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    id v34 = (void *)objc_claimAutoreleasedReturnValue([v36 destinations]);
    id v28 = (void *)objc_claimAutoreleasedReturnValue([v34 allObjects]);
    id v11 = *(void **)(a1 + 32);
    uint64_t v26 = v11[23];
    int v30 = (void *)objc_claimAutoreleasedReturnValue([v11 accountController]);
    int v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v32 accountID]);
    int v13 = (void *)objc_claimAutoreleasedReturnValue([v30 accountWithUniqueID:v12]);
    unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 fromURI]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 uniqueID]);
    unsigned __int8 v18 = [*(id *)(a1 + 32) shouldReportUPlusOneKey];
    id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) allObjects]);
    id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) allObjects]);
    LOBYTE(v21) = v18;
    [v40 notifyJoinToSpecificMembersOfGroup:v10 members:v28 params:v26 fromAccount:v13 fromURI:v15 sessionID:v17 isUPlusOne:v21 requiredCapabilites:v19 req uiredLackOfCapabilities:v20];
  }

uint64_t sub_10009797C(uint64_t a1, _WORD *a2)
{
  if (*(_BYTE *)a1 != 58) {
    return *a2 != 0;
  }
  int v3 = atoi((const char *)(a1 + 1));
  int v4 = v3;
  if ((v3 - 1) >= 0xFFFF)
  {
    uint64_t v6 = OSLogHandleForTransportCategory("QRAllocator");
    unsigned __int8 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, " invalid port %d", buf, 8u);
    }

    uint64_t result = os_log_shim_legacy_logging_enabled(v8);
    if ((_DWORD)result)
    {
      uint64_t result = _IDSShouldLogTransport(result);
      if ((_DWORD)result)
      {
        _IDSLogTransport(@"QRAllocator", @"IDS", @" invalid port %d");
        uint64_t result = _IDSShouldLog(0LL, @"QRAllocator");
        if ((_DWORD)result)
        {
          _IDSLogV(0LL, @"IDSFoundation", @"QRAllocator", @" invalid port %d");
          return 0LL;
        }
      }
    }
  }

  else
  {
    *a2 = v3;
    return 1LL;
  }

  return result;
}

id sub_100097C40(uint64_t a1)
{
  if (!*(void *)(*(void *)(a1 + 32) + 536LL))
  {
    id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(void **)(v3 + 536);
    *(void *)(v3 + 536) = v2;
  }

  uint64_t v5 = OSLogHandleForTransportCategory("IDSDSession");
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    uint64_t v15 = v7;
    __int16 v16 = 2112;
    uint64_t v17 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "<%@> add the new QR event for the RTC report: %@",  buf,  0x16u);
  }

  uint64_t v10 = os_log_shim_legacy_logging_enabled(v9);
  if ((_DWORD)v10)
  {
    if (_IDSShouldLogTransport(v10))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = *(void *)(a1 + 40);
      _IDSLogTransport(@"IDSDSession", @"IDS", @"<%@> add the new QR event for the RTC report: %@");
      if (_IDSShouldLog(0LL, @"IDSDSession"))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        uint64_t v13 = *(void *)(a1 + 40);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"<%@> add the new QR event for the RTC report: %@");
      }
    }
  }

  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 536), "addObject:", *(void *)(a1 + 40), v12, v13);
}

id sub_100097DB4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _sendQREventToAVC:*(void *)(a1 + 40)];
}

void sub_100098BF0(uint64_t a1)
{
  id v11 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
  uint64_t v12 = *(void *)(a1 + 32);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 groupID]);
  int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountController]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 accountID]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 accountWithUniqueID:v6]);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v8 = *(void **)(a1 + 64);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100098D60;
  v13[3] = &unk_1008F8CF0;
  uint64_t v10 = *(void *)(a1 + 48);
  void v13[4] = *(void *)(a1 + 40);
  id v14 = v8;
  id v15 = *(id *)(a1 + 48);
  id v16 = *(id *)(a1 + 56);
  [v11 processedQRMKMPayloadFromData:v12 forGroupID:v3 account:v7 remoteURI:v10 localURI:v9 tokens:v14 completionHandler:v13];
}

void sub_100098D60(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = OSLogHandleForTransportCategory("IDSDSession");
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      if (qword_1009BE930 != -1) {
        dispatch_once(&qword_1009BE930, &stru_1008F91C0);
      }
      *(_DWORD *)buf = 134217984;
      double v38 = *(double *)&qword_1009BE938 * (double)mach_continuous_time();
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Receiving Key Material (QR) [*KM] -- %f",  buf,  0xCu);
    }

    uint64_t v10 = os_log_shim_legacy_logging_enabled(v9);
    if ((_DWORD)v10 && _IDSShouldLogTransport(v10))
    {
      if (qword_1009BE930 != -1) {
        dispatch_once(&qword_1009BE930, &stru_1008F91C0);
      }
      double v31 = *(double *)&qword_1009BE938 * (double)mach_continuous_time();
      _IDSLogTransport(@"IDSDSession", @"IDS", @"Receiving Key Material (QR) [*KM] -- %f");
      if (_IDSShouldLog(0LL, @"IDSDSession"))
      {
        if (qword_1009BE930 != -1) {
          dispatch_once(&qword_1009BE930, &stru_1008F91C0);
        }
        double v31 = *(double *)&qword_1009BE938 * (double)mach_continuous_time();
        _IDSLogV(0LL, @"IDSFoundation", @"IDSDSession", @"Receiving Key Material (QR) [*KM] -- %f");
      }
    }

    id v11 = *(void **)(*(void *)(a1 + 32) + 896LL);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "firstObject", *(void *)&v31));
    [v11 receivedKMOverQRFromToken:v12];

    uint64_t v13 = OSLogHandleForTransportCategory("IDSDSession");
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      double v15 = *(double *)(a1 + 40);
      uint64_t v16 = *(void *)(a1 + 48);
      uint64_t v17 = *(void *)(a1 + 56);
      *(_DWORD *)buf = 138412802;
      double v38 = v15;
      __int16 v39 = 2112;
      uint64_t v40 = v16;
      __int16 v41 = 2112;
      uint64_t v42 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Received remote key material message from tokens %@ fromURI %@ toURI %@",  buf,  0x20u);
    }

    uint64_t v19 = os_log_shim_legacy_logging_enabled(v18);
    if ((_DWORD)v19)
    {
      uint64_t v19 = _IDSShouldLogTransport(v19);
      if ((_DWORD)v19)
      {
        _IDSLogTransport( @"IDSDSession",  @"IDS",  @"Received remote key material message from tokens %@ fromURI %@ toURI %@");
        uint64_t v19 = _IDSShouldLog(0LL, @"IDSDSession");
        if ((_DWORD)v19) {
          uint64_t v19 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Received remote key material message from tokens %@ fromURI %@ toURI %@");
        }
      }
    }

    uint64_t v21 = im_primary_queue(v19, v20);
    uint64_t v22 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v21);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100099260;
    block[3] = &unk_1008F60E8;
    id v33 = v5;
    id v34 = v6;
    id v35 = *(id *)(a1 + 48);
    id v36 = *(id *)(a1 + 56);
    dispatch_block_t v23 = dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT,  QOS_CLASS_USER_INITIATED,  0,  block);
    dispatch_async(v22, v23);
  }

  else
  {
    uint64_t v24 = OSLogHandleForTransportCategory("IDSDSession");
    double v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      double v26 = *(double *)(a1 + 40);
      uint64_t v27 = *(void *)(a1 + 48);
      uint64_t v28 = *(void *)(a1 + 56);
      *(_DWORD *)buf = 138412802;
      double v38 = v26;
      __int16 v39 = 2112;
      uint64_t v40 = v27;
      __int16 v41 = 2112;
      uint64_t v42 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Could not process remote key material message from tokens %@ fromURI %@ toURI %@",  buf,  0x20u);
    }

    uint64_t v30 = os_log_shim_legacy_logging_enabled(v29);
    if ((_DWORD)v30)
    {
      if (_IDSShouldLogTransport(v30))
      {
        _IDSLogTransport( @"IDSDSession",  @"IDS",  @"Could not process remote key material message from tokens %@ fromURI %@ toURI %@");
        if (_IDSShouldLog(0LL, @"IDSDSession")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Could not process remote key material message from tokens %@ fromURI %@ toURI %@");
        }
      }
    }
  }
}

void sub_100099260(void *a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[IDSDSessionController sharedInstance](&OBJC_CLASS___IDSDSessionController, "sharedInstance"));
  uint64_t v2 = a1[4];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPushToken pushTokenWithData:](&OBJC_CLASS___IDSPushToken, "pushTokenWithData:", a1[5]));
  [v4 processIncomingGroupSessionMessage:v2 fromToken:v3 fromURI:a1[6] toURI:a1[7] topic:0 idsMessageContext:0];
}

LABEL_89:
}

  v198 = kIDSQRAllocateKey_ExistingRelaySignature;
  v199 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_ExistingRelaySignature, v947, v990, v1033));
  v201 = objc_opt_class(&OBJC_CLASS___NSData, v200);
  v202 = objc_opt_isKindOfClass(v199, v201);

  v203 = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v198]);
  v204 = v203;
  if ((v202 & 1) != 0)
  {
    existingRelaySignature = self->_existingRelaySignature;
    self->_existingRelaySignature = v203;
LABEL_91:

    goto LABEL_98;
  }

  if (v204)
  {
    v206 = OSLogHandleForIDSCategory("QRAllocator");
    v207 = (os_log_s *)objc_claimAutoreleasedReturnValue(v206);
    if (os_log_type_enabled(v207, OS_LOG_TYPE_DEBUG))
    {
      v208 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v198]);
      v210 = (id)objc_opt_class(&OBJC_CLASS___NSData, v209);
      v211 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v198]);
      v213 = (id)objc_opt_class(v211, v212);
      *(_DWORD *)buf = 138412802;
      v1070 = v208;
      v1071 = 2112;
      v1072 = v210;
      v1073 = 2112;
      v1074 = v213;
      _os_log_impl( (void *)&_mh_execute_header,  v207,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v214))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        existingRelaySignature = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v198]);
        v216 = objc_opt_class(&OBJC_CLASS___NSData, v215);
        v217 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v198]);
        v991 = v216;
        v1034 = objc_opt_class(v217, v218);
        v948 = existingRelaySignature;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_91;
      }
    }
  }

  __int128 v138 = sub_10041D3BC(v14);
  uint64_t v2 = (uint64_t)v188;
  __int128 v139 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v188) + 0x140LL))(v138);
  id v14 = v139;
  __int16 v140 = 0LL;
  a1 = v139 + 64;
  __int128 v141 = 1LL << *(_BYTE *)(v139 + 32);
  v142 = -1LL;
  if (v141 < 64) {
    v142 = ~(-1LL << v141);
  }
  v143 = v142 & *(void *)(v139 + 64);
  uint64_t v16 = (unint64_t)(v141 + 63) >> 6;
  double v15 = v167;
  while (2)
  {
    if (v143)
    {
      v144 = __clz(__rbit64(v143));
      v143 &= v143 - 1;
      v145 = v144 | (v140 << 6);
LABEL_93:
      __int16 v146 = *(id *)(*(void *)(v14 + 56) + 8 * v145);
      v147 = ((uint64_t (*)(void))v15)();
      uint64_t v2 = (uint64_t)v146;
      (*(void (**)(void))((swift_isaMask & *v146) + 0x240LL))();

      swift_bridgeObjectRelease(v147);
      continue;
    }

    break;
  }

  __int16 v148 = v140 + 1;
  if (__OFADD__(v140, 1LL)) {
    goto LABEL_113;
  }
  v149 = v188;
  if (v148 < v16)
  {
    v150 = *(void *)(a1 + 8 * v148);
    ++v140;
    if (!v150)
    {
      __int16 v140 = v148 + 1;
      if (v148 + 1 >= v16) {
        goto LABEL_109;
      }
      v150 = *(void *)(a1 + 8 * v140);
      if (!v150)
      {
        __int16 v140 = v148 + 2;
        if (v148 + 2 >= v16) {
          goto LABEL_109;
        }
        v150 = *(void *)(a1 + 8 * v140);
        if (!v150)
        {
          v151 = v148 + 3;
          if (v151 >= v16) {
            goto LABEL_109;
          }
          v150 = *(void *)(a1 + 8 * v151);
          if (!v150)
          {
            while (1)
            {
              __int16 v140 = v151 + 1;
              if (__OFADD__(v151, 1LL)) {
                goto LABEL_114;
              }
              if (v140 >= v16) {
                goto LABEL_109;
              }
              v150 = *(void *)(a1 + 8 * v140);
              ++v151;
              if (v150) {
                goto LABEL_108;
              }
            }
          }

          __int16 v140 = v151;
        }
      }
    }

        if ((v101 & 1) != 0) {
          goto LABEL_127;
        }
        uint64_t v109 = &v75[16 * v78];
        uint64_t v111 = *(void *)v109;
        id v110 = *((void *)v109 + 1);
        uint64_t v89 = __OFSUB__(v110, v111);
        id v112 = v110 - v111;
        if (v89) {
          goto LABEL_130;
        }
        if (v112 < v100) {
          goto LABEL_14;
        }
LABEL_97:
        uint64_t v117 = v78 - 1;
        if (v78 - 1 >= v25)
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }

        uint64_t v118 = *a1;
        if (!*a1) {
          goto LABEL_145;
        }
        uint64_t v119 = &v75[16 * v117];
        uint64_t v120 = *(void *)v119;
        uint64_t v121 = &v75[16 * v78];
        uint64_t v122 = *((void *)v121 + 1);
        sub_1004D635C( v118 + *(void *)(v140 + 72) * *(void *)v119,  v118 + *(void *)(v140 + 72) * *(void *)v121,  v118 + *(void *)(v140 + 72) * v122,  v139);
        if (v2) {
          goto LABEL_117;
        }
        if (v122 < v120) {
          goto LABEL_120;
        }
        if (v78 > *((void *)v23 + 2)) {
          goto LABEL_121;
        }
        *(void *)uint64_t v119 = v120;
        *(void *)&v75[16 * v117 + 8] = v122;
        uint64_t v123 = *((void *)v23 + 2);
        if (v78 >= v123) {
          goto LABEL_122;
        }
        double v25 = v123 - 1;
        memmove(&v75[16 * v78], v121 + 16, 16 * (v123 - 1 - v78));
        *((void *)v23 + 2) = v123 - 1;
        a1 = v146;
        if (v123 <= 2) {
          goto LABEL_14;
        }
      }
    }

    double v25 = 1LL;
LABEL_14:
    uint64_t v17 = a1[1];
    uint64_t v24 = v145;
  }

  uint64_t v44 = v38;
LABEL_38:
  uint64_t v2 = v134;
  if (v44 >= v35) {
    goto LABEL_58;
  }
LABEL_41:
  if (__OFSUB__(v44, v45)) {
    goto LABEL_139;
  }
  if (v44 - v45 >= v133) {
    goto LABEL_58;
  }
  if (__OFADD__(v45, v133)) {
    goto LABEL_142;
  }
  if (v45 + v133 >= v35) {
    uint64_t v53 = v35;
  }
  else {
    uint64_t v53 = v45 + v133;
  }
  if (v53 >= v45)
  {
    if (v44 != v53)
    {
      __int128 v138 = v45;
      __int128 v134 = v2;
      BOOL v54 = *(void *)(v140 + 72);
      int v55 = v54 * (v44 - 1);
      v142 = v54;
      uint64_t v56 = v44 * v54;
      id v136 = v53;
      do
      {
        unint64_t v58 = 0LL;
        uint64_t v59 = v138;
        v145 = v44;
        while (1)
        {
          __int16 v148 = v59;
          uint64_t v60 = v146;
          id v61 = *v146;
          uint64_t v62 = v56;
          uint64_t v63 = v56 + v58 + *v146;
          uint64_t v64 = v143;
          sub_1004D7E28(v63, (uint64_t)v143);
          uint64_t v65 = v55;
          uint64_t v66 = v55 + v58 + v61;
          uint64_t v67 = v144;
          sub_1004D7E28(v66, (uint64_t)v144);
          v149 = *v64;
          uint64_t v68 = *v67;
          sub_1004D7E6C((uint64_t)v67);
          sub_1004D7E6C((uint64_t)v64);
          if (v149 >= v68) {
            break;
          }
          uint64_t v69 = *v60;
          if (!*v60) {
            goto LABEL_144;
          }
          uint64_t v56 = v62;
          uint64_t v70 = v69 + v62 + v58;
          int v55 = v65;
          uint64_t v71 = v69 + v65 + v58;
          sub_1004D7EA8(v70, v147);
          swift_arrayInitWithTakeFrontToBack(v70, v71, 1LL, v141);
          sub_1004D7EA8(v147, v71);
          v58 -= v142;
          uint64_t v59 = v148 + 1;
          uint64_t v57 = v145;
          if (v145 == v148 + 1) {
            goto LABEL_51;
          }
        }

        uint64_t v57 = v145;
        int v55 = v65;
        uint64_t v56 = v62;
LABEL_51:
        uint64_t v44 = v57 + 1;
        v55 += v142;
        v56 += v142;
      }

      while (v44 != v136);
      uint64_t v44 = v136;
      uint64_t v2 = v134;
      dispatch_block_t v23 = v135;
      a1 = v146;
      uint64_t v45 = v138;
    }

    goto LABEL_58;
  }

void sub_10009ADC4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, id *location)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x10009ACACLL);
  }

  _Unwind_Resume(exception_object);
}

void sub_10009B01C(uint64_t a1)
{
  uint64_t v2 = OSLogHandleForTransportCategory("IDSDSession");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = [*(id *)(a1 + 32) ownerParticipantId];
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 groupID]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 uniqueID]);
    *(_DWORD *)buf = 134218498;
    *(void *)&uint8_t buf[4] = v4;
    __int16 v28 = 2112;
    uint64_t v29 = v6;
    __int16 v30 = 2112;
    double v31 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "didReceiveMaterialInfo: processing pending material from %llu for group %@ and session %@",  buf,  0x20u);
  }

  uint64_t v10 = os_log_shim_legacy_logging_enabled(v9);
  if ((_DWORD)v10)
  {
    if (_IDSShouldLogTransport(v10))
    {
      id v11 = [*(id *)(a1 + 32) ownerParticipantId];
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 groupID]);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
      double v25 = (void *)objc_claimAutoreleasedReturnValue([v14 uniqueID]);
      _IDSLogTransport( @"IDSDSession",  @"IDS",  @"didReceiveMaterialInfo: processing pending material from %llu for group %@ and session %@");

      if (_IDSShouldLog(0LL, @"IDSDSession"))
      {
        objc_msgSend(*(id *)(a1 + 32), "ownerParticipantId", v11, v13, v25);
        double v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 groupID]);
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
        double v26 = (void *)objc_claimAutoreleasedReturnValue([v17 uniqueID]);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"didReceiveMaterialInfo: processing pending material from %llu for group %@ and session %@");
      }
    }
  }

  if (qword_1009BE930 != -1) {
    dispatch_once(&qword_1009BE930, &stru_1008F91C0);
  }
  if (*(double *)&qword_1009BE938 * (double)mach_continuous_time() <= *(double *)(a1 + 72))
  {
    *(void *)buf = 0xAAAAAAAAAAAAAAAALL;
    objc_copyWeak((id *)buf, (id *)(a1 + 64));
    id WeakRetained = objc_loadWeakRetained((id *)buf);

    if (WeakRetained)
    {
      id v24 = objc_loadWeakRetained((id *)(a1 + 64));
      [v24 link:*(void *)(a1 + 48) didReceiveMaterialInfo:*(void *)(a1 + 56) material:*(void *)(a1 + 32)];
    }

    objc_destroyWeak((id *)buf);
  }

  else
  {
    uint64_t v18 = OSLogHandleForTransportCategory("IDSDSession");
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      if (qword_1009BE930 != -1) {
        dispatch_once(&qword_1009BE930, &stru_1008F91C0);
      }
      double v20 = *(double *)&qword_1009BE938 * (double)mach_continuous_time() - *(double *)(a1 + 72);
      *(_DWORD *)buf = 134217984;
      *(double *)&uint8_t buf[4] = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "didReceiveMaterialInfo: dropping material because it timed out by %f seconds",  buf,  0xCu);
    }

    uint64_t v22 = os_log_shim_legacy_logging_enabled(v21);
    if ((_DWORD)v22 && _IDSShouldLogTransport(v22))
    {
      if (qword_1009BE930 != -1) {
        dispatch_once(&qword_1009BE930, &stru_1008F91C0);
      }
      mach_continuous_time();
      _IDSLogTransport( @"IDSDSession",  @"IDS",  @"didReceiveMaterialInfo: dropping material because it timed out by %f seconds");
      if (_IDSShouldLog(0LL, @"IDSDSession"))
      {
        if (qword_1009BE930 != -1) {
          dispatch_once(&qword_1009BE930, &stru_1008F91C0);
        }
        mach_continuous_time();
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"didReceiveMaterialInfo: dropping material because it timed out by %f seconds");
      }
    }
  }

void sub_10009B474( _Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id location)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x10009B2D8LL);
  }

  _Unwind_Resume(exc_buf);
}

void sub_10009B4D0(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) != 0)
  {
    switch([*(id *)(a1 + 32) materialType])
    {
      case 5u:
        id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          double v7 = *(double *)(a1 + 56);
          id v8 = [*(id *)(a1 + 48) ownerParticipantId];
          *(_DWORD *)buf = 138412546;
          double v177 = v7;
          __int16 v178 = 2048;
          id v179 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "payload: %@, material.ownerParticipantId: %llu",  buf,  0x16u);
        }

        uint64_t v9 = *(void *)(a1 + 56);
        if (v9) {
          objc_msgSend( *(id *)(*(void *)(a1 + 40) + 864),  "receiveDictionaryData:forType:fromParticipant:",  v9,  objc_msgSend(*(id *)(a1 + 32), "materialType"),  objc_msgSend(*(id *)(a1 + 48), "ownerParticipantId"));
        }
        break;
      case 0xBu:
        uint64_t v20 = OSLogHandleForTransportCategory("IDSDSession");
        uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          if (qword_1009BE930 != -1) {
            dispatch_once(&qword_1009BE930, &stru_1008F91C0);
          }
          *(_DWORD *)buf = 134217984;
          double v177 = *(double *)&qword_1009BE938 * (double)mach_continuous_time();
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Receiving Key Material (QUIC) [PreKey] -- %f",  buf,  0xCu);
        }

        uint64_t v23 = os_log_shim_legacy_logging_enabled(v22);
        if ((_DWORD)v23 && _IDSShouldLogTransport(v23))
        {
          if (qword_1009BE930 != -1) {
            dispatch_once(&qword_1009BE930, &stru_1008F91C0);
          }
          double v155 = *(double *)&qword_1009BE938 * (double)mach_continuous_time();
          _IDSLogTransport(@"IDSDSession", @"IDS", @"Receiving Key Material (QUIC) [PreKey] -- %f");
          if (_IDSShouldLog(0LL, @"IDSDSession"))
          {
            double v155 = sub_1000766FC();
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Receiving Key Material (QUIC) [PreKey] -- %f");
          }
        }

        id v24 = *(void **)(*(void *)(a1 + 40) + 896LL);
        double v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "rawToken", *(void *)&v155));
        double v26 = (void *)objc_claimAutoreleasedReturnValue([v24 joinCycleForToken:v25]);
        [v26 receivedPreKeyOverQUIC];

        uint64_t v27 = *(void **)(a1 + 56);
        __int16 v28 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionPreKeyDictionaryKeys publicPreKey]( &OBJC_CLASS____TtC17identityservicesd38IDSGroupEncryptionPreKeyDictionaryKeys,  "publicPreKey"));
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v27 objectForKey:v28]);
        uint64_t v31 = objc_opt_class(&OBJC_CLASS___NSString, v30);
        if ((objc_opt_isKindOfClass(v29, v31) & 1) != 0)
        {
          int v32 = *(void **)(a1 + 56);
          id v33 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionPreKeyDictionaryKeys publicPreKey]( &OBJC_CLASS____TtC17identityservicesd38IDSGroupEncryptionPreKeyDictionaryKeys,  "publicPreKey"));
          id v34 = (void *)objc_claimAutoreleasedReturnValue([v32 objectForKey:v33]);
          id v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v34));
        }

        else
        {
          uint64_t v89 = *(void **)(a1 + 56);
          id v33 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionPreKeyDictionaryKeys publicPreKey]( &OBJC_CLASS____TtC17identityservicesd38IDSGroupEncryptionPreKeyDictionaryKeys,  "publicPreKey"));
          id v34 = (void *)objc_claimAutoreleasedReturnValue([v89 objectForKey:v33]);
          uint64_t v91 = objc_opt_class(&OBJC_CLASS___NSData, v90);
          if ((objc_opt_isKindOfClass(v34, v91) & 1) != 0)
          {
            uint64_t v92 = *(void **)(a1 + 56);
            dispatch_block_t v93 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionPreKeyDictionaryKeys publicPreKey]( &OBJC_CLASS____TtC17identityservicesd38IDSGroupEncryptionPreKeyDictionaryKeys,  "publicPreKey"));
            id v35 = (void *)objc_claimAutoreleasedReturnValue([v92 objectForKey:v93]);
          }

          else
          {
            id v35 = 0LL;
          }
        }

        if (v35)
        {
          uint64_t v118 = objc_opt_class(&OBJC_CLASS___NSNumber, v117);
          uint64_t v119 = *(void **)(a1 + 56);
          uint64_t v120 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionPreKeyDictionaryKeys wrapMode]( &OBJC_CLASS____TtC17identityservicesd38IDSGroupEncryptionPreKeyDictionaryKeys,  "wrapMode"));
          id v121 = sub_10009C9FC(v118, v119, v120);
          id v171 = (id)objc_claimAutoreleasedReturnValue(v121);

          uint64_t v123 = objc_opt_class(&OBJC_CLASS___NSNumber, v122);
          uint64_t v124 = *(void **)(a1 + 56);
          uint64_t v125 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionPreKeyDictionaryKeys creationDate]( &OBJC_CLASS____TtC17identityservicesd38IDSGroupEncryptionPreKeyDictionaryKeys,  "creationDate"));
          id v126 = sub_10009C9FC(v123, v124, v125);
          v168 = (void *)objc_claimAutoreleasedReturnValue(v126);

          if (v171)
          {
            if (v168)
            {
              __int128 v127 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
              __int128 v129 = *(void **)(a1 + 40);
              uint64_t v128 = a1 + 40;
              uint64_t v130 = *(void *)(v128 + 24);
              uint64_t v131 = *(void *)(v128 + 32);
              __int128 v132 = (void *)objc_claimAutoreleasedReturnValue([v129 sharedState]);
              uint64_t v133 = (void *)objc_claimAutoreleasedReturnValue([v132 groupID]);
              __int128 v134 = (void *)objc_claimAutoreleasedReturnValue([*(id *)v128 sharedState]);
              __int128 v135 = (void *)objc_claimAutoreleasedReturnValue([v134 uniqueID]);
              [v168 doubleValue];
              id v136 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSince1970:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSince1970:"));
              objc_msgSend( v127,  "setRealTimeEncryptionPublicKey:forDevice:fromURI:groupID:sessionID:serverDate:wrapMode:",  v35,  v130,  v131,  v133,  v135,  v136,  (int)objc_msgSend(v171, "intValue"));
            }

            else
            {
              uint64_t v149 = OSLogHandleForTransportCategory("IDSDSession");
              v150 = (os_log_s *)objc_claimAutoreleasedReturnValue(v149);
              if (os_log_type_enabled(v150, OS_LOG_TYPE_DEFAULT))
              {
                double v151 = COERCE_DOUBLE([*(id *)(a1 + 48) ownerParticipantId]);
                v152 = *(void **)(a1 + 56);
                *(_DWORD *)buf = 134218242;
                double v177 = v151;
                __int16 v178 = 2112;
                id v179 = v152;
                _os_log_impl( (void *)&_mh_execute_header,  v150,  OS_LOG_TYPE_DEFAULT,  "didReceiveMaterialInfo could not process preKey for participant %llu; no creation date found in payload %@",
                  buf,
                  0x16u);
              }

              uint64_t v154 = os_log_shim_legacy_logging_enabled(v153);
              if ((_DWORD)v154)
              {
                if (_IDSShouldLogTransport(v154))
                {
                  id v157 = [*(id *)(a1 + 48) ownerParticipantId];
                  id v162 = *(id *)(a1 + 56);
                  _IDSLogTransport( @"IDSDSession",  @"IDS",  @"didReceiveMaterialInfo could not process preKey for participant %llu; no creation date found in payload %@");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    id v157 = objc_msgSend(*(id *)(a1 + 48), "ownerParticipantId", v157, v162);
                    id v162 = *(id *)(a1 + 56);
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"didReceiveMaterialInfo could not process preKey for participant %llu; no creation date found in payload %@");
                  }
                }
              }

              objc_msgSend(*(id *)(a1 + 40), "materialInfoError:", @"missingServerDateTimestamp", v157, v162);
            }
          }

          else
          {
            uint64_t v143 = OSLogHandleForTransportCategory("IDSDSession");
            v144 = (os_log_s *)objc_claimAutoreleasedReturnValue(v143);
            if (os_log_type_enabled(v144, OS_LOG_TYPE_DEFAULT))
            {
              double v145 = COERCE_DOUBLE([*(id *)(a1 + 48) ownerParticipantId]);
              __int16 v146 = *(void **)(a1 + 56);
              *(_DWORD *)buf = 134218242;
              double v177 = v145;
              __int16 v178 = 2112;
              id v179 = v146;
              _os_log_impl( (void *)&_mh_execute_header,  v144,  OS_LOG_TYPE_DEFAULT,  "didReceiveMaterialInfo could not process preKey for participant %llu; no wrap-mode found in payload %@",
                buf,
                0x16u);
            }

            uint64_t v148 = os_log_shim_legacy_logging_enabled(v147);
            if ((_DWORD)v148)
            {
              if (_IDSShouldLogTransport(v148))
              {
                id v157 = [*(id *)(a1 + 48) ownerParticipantId];
                id v162 = *(id *)(a1 + 56);
                _IDSLogTransport( @"IDSDSession",  @"IDS",  @"didReceiveMaterialInfo could not process preKey for participant %llu; no wrap-mode found in payload %@");
                if (_IDSShouldLog(0LL, @"IDSDSession"))
                {
                  id v157 = objc_msgSend(*(id *)(a1 + 48), "ownerParticipantId", v157, v162);
                  id v162 = *(id *)(a1 + 56);
                  _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"didReceiveMaterialInfo could not process preKey for participant %llu; no wrap-mode found in payload %@");
                }
              }
            }

            objc_msgSend(*(id *)(a1 + 40), "materialInfoError:", @"missingWrapMode", v157, v162);
          }
        }

        else
        {
          uint64_t v137 = OSLogHandleForTransportCategory("IDSDSession");
          __int128 v138 = (os_log_s *)objc_claimAutoreleasedReturnValue(v137);
          if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
          {
            double v139 = COERCE_DOUBLE([*(id *)(a1 + 48) ownerParticipantId]);
            __int16 v140 = *(void **)(a1 + 56);
            *(_DWORD *)buf = 134218242;
            double v177 = v139;
            __int16 v178 = 2112;
            id v179 = v140;
            _os_log_impl( (void *)&_mh_execute_header,  v138,  OS_LOG_TYPE_DEFAULT,  "didReceiveMaterialInfo could not process preKey for participant %llu; no preKey found in payload %@",
              buf,
              0x16u);
          }

          uint64_t v142 = os_log_shim_legacy_logging_enabled(v141);
          if ((_DWORD)v142)
          {
            if (_IDSShouldLogTransport(v142))
            {
              id v157 = [*(id *)(a1 + 48) ownerParticipantId];
              id v162 = *(id *)(a1 + 56);
              _IDSLogTransport( @"IDSDSession",  @"IDS",  @"didReceiveMaterialInfo could not process preKey for participant %llu; no preKey found in payload %@");
              if (_IDSShouldLog(0LL, @"IDSDSession"))
              {
                id v157 = objc_msgSend(*(id *)(a1 + 48), "ownerParticipantId", v157, v162);
                id v162 = *(id *)(a1 + 56);
                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"didReceiveMaterialInfo could not process preKey for participant %llu; no preKey found in payload %@");
              }
            }
          }

          objc_msgSend(*(id *)(a1 + 40), "materialInfoError:", @"missingPreKeyData", v157, v162);
        }

        break;
      case 0xDu:
        uint64_t v36 = OSLogHandleForTransportCategory("IDSDSession");
        uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
          if (qword_1009BE930 != -1) {
            dispatch_once(&qword_1009BE930, &stru_1008F91C0);
          }
          *(_DWORD *)buf = 134217984;
          double v177 = *(double *)&qword_1009BE938 * (double)mach_continuous_time();
          _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "Receiving Key Material (QUIC) [MKM] -- %f",  buf,  0xCu);
        }

        uint64_t v39 = os_log_shim_legacy_logging_enabled(v38);
        if ((_DWORD)v39 && _IDSShouldLogTransport(v39))
        {
          if (qword_1009BE930 != -1) {
            dispatch_once(&qword_1009BE930, &stru_1008F91C0);
          }
          double v155 = *(double *)&qword_1009BE938 * (double)mach_continuous_time();
          _IDSLogTransport(@"IDSDSession", @"IDS", @"Receiving Key Material (QUIC) [MKM] -- %f");
          if (_IDSShouldLog(0LL, @"IDSDSession"))
          {
            double v155 = sub_1000766FC();
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Receiving Key Material (QUIC) [MKM] -- %f");
          }
        }

        uint64_t v40 = *(void **)(*(void *)(a1 + 40) + 896LL);
        __int16 v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "rawToken", *(void *)&v155));
        [v40 receivedKMOverQUICFromToken:v41];

        id v169 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKeyedSubscript:IDSRealTimeEncryptionMKI]);
        if ([v169 length] == (id)16)
        {
          uint64_t v42 = -[NSUUID initWithUUIDBytes:]( [NSUUID alloc], "initWithUUIDBytes:", [v169 bytes]);
          unint64_t v43 = *(void **)(*(void *)(a1 + 40) + 896LL);
          uint64_t v44 = IDSGetUUIDDataFromNSUUID(v42);
          uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
          id v46 = (void *)objc_claimAutoreleasedReturnValue([v43 getOrCreateMKICycleFor:v45]);
          [v46 receivedFromGFT2];
        }

        else
        {
          uint64_t v42 = (NSUUID *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
          if (os_log_type_enabled((os_log_t)v42, OS_LOG_TYPE_ERROR)) {
            sub_100698878();
          }
        }

        uint64_t v70 = *(void *)(a1 + 40);
        if (!*(_BYTE *)(v70 + 752))
        {
          *(_BYTE *)(v70 + 752) = 1;
          if (qword_1009BE930 != -1) {
            dispatch_once(&qword_1009BE930, &stru_1008F91C0);
          }
          *(double *)(*(void *)(a1 + 40) + 760LL) = *(double *)&qword_1009BE938 * (double)mach_continuous_time();
        }

        uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
        uint64_t v73 = *(void *)(a1 + 56);
        uint64_t v72 = *(void *)(a1 + 64);
        uint64_t v74 = *(void *)(a1 + 72);
        double v75 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
        uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue([v75 groupID]);
        uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
        uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue([v77 uniqueID]);
        id v173 = 0LL;
        LOWORD(v165) = 1;
        LOBYTE(v15_Block_object_dispose((const void *)(v11 - 112), 8) = 1;
        uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v71,  "receivedAndSetKeyMaterial:stableKeyMaterial:forDevice:fromURI:groupID:sessionID:fromSender:err or:forMKM:forSKM:",  v73,  0,  v72,  v74,  v76,  v78,  v158,  &v173,  v165));
        id v80 = v173;

        if (v80)
        {
          uint64_t v81 = OSLogHandleForTransportCategory("IDSDSession");
          uint64_t v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(v81);
          if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
          {
            double v83 = COERCE_DOUBLE([*(id *)(a1 + 48) ownerParticipantId]);
            uint64_t v84 = *(void **)(a1 + 56);
            *(_DWORD *)buf = 134218498;
            double v177 = v83;
            __int16 v178 = 2112;
            id v179 = v84;
            __int16 v180 = 2112;
            id v181 = v80;
            _os_log_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_DEFAULT,  "didReceiveMaterialInfo failed processing MKM for participant %llu; payload %@; error: %@",
              buf,
              0x20u);
          }

          uint64_t v86 = os_log_shim_legacy_logging_enabled(v85);
          if ((_DWORD)v86)
          {
            if (_IDSShouldLogTransport(v86))
            {
              id v87 = [*(id *)(a1 + 48) ownerParticipantId];
              uint64_t v164 = *(void *)(a1 + 56);
              id v167 = v80;
              id v161 = v87;
              _IDSLogTransport( @"IDSDSession",  @"IDS",  @"didReceiveMaterialInfo failed processing MKM for participant %llu; payload %@; error: %@");
              if (_IDSShouldLog(0LL, @"IDSDSession"))
              {
                id v88 = objc_msgSend(*(id *)(a1 + 48), "ownerParticipantId", v161, v164, v80);
                uint64_t v164 = *(void *)(a1 + 56);
                id v167 = v80;
                id v161 = v88;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"didReceiveMaterialInfo failed processing MKM for participant %llu; payload %@; error: %@");
              }
            }
          }

          objc_msgSend(*(id *)(a1 + 40), "materialInfoError:", @"failedProcessingMKM", v161, v164, v167);
        }

        else
        {
          if (v79)
          {
            uint64_t v106 = (void *)objc_claimAutoreleasedReturnValue( [v79 objectForKeyedSubscript:@"ids-rtencryption-master-key-material-key"]);
            uint64_t v107 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
            v175 = v106;
            uint64_t v108 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v175,  1LL));
            uint64_t v174 = *(void *)(a1 + 72);
            uint64_t v109 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v174,  1LL));
            id v110 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
            uint64_t v111 = (void *)objc_claimAutoreleasedReturnValue([v110 uniqueID]);
            [v107 noteReceivedGroupMasterKeyMaterials:v108 URIs:v109 sessionID:v111];
          }

          id v112 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
          unsigned int v113 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
          id v114 = (void *)objc_claimAutoreleasedReturnValue([v113 groupID]);
          uint64_t v115 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
          uint64_t v116 = (void *)objc_claimAutoreleasedReturnValue([v115 uniqueID]);
          [v112 requestPendingKeyMaterialsForGroup:v114 sessionID:v116];
        }

        break;
      case 0xEu:
        uint64_t v47 = OSLogHandleForTransportCategory("IDSDSession");
        unsigned int v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        {
          if (qword_1009BE930 != -1) {
            dispatch_once(&qword_1009BE930, &stru_1008F91C0);
          }
          *(_DWORD *)buf = 134217984;
          double v177 = *(double *)&qword_1009BE938 * (double)mach_continuous_time();
          _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "Receiving Key Material (QUIC) [SKM] -- %f",  buf,  0xCu);
        }

        uint64_t v50 = os_log_shim_legacy_logging_enabled(v49);
        if ((_DWORD)v50 && _IDSShouldLogTransport(v50))
        {
          if (qword_1009BE930 != -1) {
            dispatch_once(&qword_1009BE930, &stru_1008F91C0);
          }
          double v155 = *(double *)&qword_1009BE938 * (double)mach_continuous_time();
          _IDSLogTransport(@"IDSDSession", @"IDS", @"Receiving Key Material (QUIC) [SKM] -- %f");
          if (_IDSShouldLog(0LL, @"IDSDSession"))
          {
            double v155 = sub_1000766FC();
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Receiving Key Material (QUIC) [SKM] -- %f");
          }
        }

        int v51 = *(void **)(*(void *)(a1 + 40) + 896LL);
        uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "rawToken", *(void *)&v155));
        [v51 receivedKMOverQUICFromToken:v52];

        uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
        uint64_t v54 = *(void *)(a1 + 56);
        uint64_t v55 = *(void *)(a1 + 64);
        uint64_t v56 = *(void *)(a1 + 72);
        uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
        unint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([v57 groupID]);
        uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
        uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue([v59 uniqueID]);
        id v172 = 0LL;
        LOWORD(v165) = 256;
        LOBYTE(v159) = 1;
        id v170 = (id)objc_claimAutoreleasedReturnValue( objc_msgSend( v53,  "receivedAndSetKeyMaterial:stableKeyMaterial:forDevice:fromURI:groupID:sessionID:fromSender:error:forMKM:forSKM:",  0,  v54,  v55,  v56,  v58,  v60,  v159,  &v172,  v165));
        id v61 = v172;

        if (v61)
        {
          uint64_t v62 = OSLogHandleForTransportCategory("IDSDSession");
          uint64_t v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
          if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
          {
            double v64 = COERCE_DOUBLE([*(id *)(a1 + 48) ownerParticipantId]);
            uint64_t v65 = *(void **)(a1 + 56);
            *(_DWORD *)buf = 134218498;
            double v177 = v64;
            __int16 v178 = 2112;
            id v179 = v65;
            __int16 v180 = 2112;
            id v181 = v61;
            _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEFAULT,  "didReceiveMaterialInfo failed processing SKM for participant %llu; payload %@; error: %@",
              buf,
              0x20u);
          }

          uint64_t v67 = os_log_shim_legacy_logging_enabled(v66);
          if ((_DWORD)v67)
          {
            if (_IDSShouldLogTransport(v67))
            {
              id v68 = [*(id *)(a1 + 48) ownerParticipantId];
              uint64_t v163 = *(void *)(a1 + 56);
              id v166 = v61;
              id v160 = v68;
              _IDSLogTransport( @"IDSDSession",  @"IDS",  @"didReceiveMaterialInfo failed processing SKM for participant %llu; payload %@; error: %@");
              if (_IDSShouldLog(0LL, @"IDSDSession"))
              {
                id v69 = objc_msgSend(*(id *)(a1 + 48), "ownerParticipantId", v160, v163, v61);
                uint64_t v163 = *(void *)(a1 + 56);
                id v166 = v61;
                id v160 = v69;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"didReceiveMaterialInfo failed processing SKM for participant %llu; payload %@; error: %@");
              }
            }
          }

          objc_msgSend(*(id *)(a1 + 40), "materialInfoError:", @"failedProcessingSKM", v160, v163, v166);
        }

        else
        {
          if (v170)
          {
            uint64_t v94 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
            uint64_t v95 = (void *)objc_claimAutoreleasedReturnValue( [v170 objectForKeyedSubscript:@"ids-rtencryption-stable-key-material-key"]);
            uint64_t v96 = *(void *)(a1 + 64);
            uint64_t v97 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
            uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue([v97 uniqueID]);
            __int16 v99 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
            double v100 = (void *)objc_claimAutoreleasedReturnValue([v99 groupID]);
            [v94 receivedGroupStableKeyMaterial:v95 fromPushToken:v96 sessionID:v98 groupID:v100];
          }

          __int16 v101 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
          double v102 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
          __int16 v103 = (void *)objc_claimAutoreleasedReturnValue([v102 groupID]);
          double v104 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
          uint64_t v105 = (void *)objc_claimAutoreleasedReturnValue([v104 uniqueID]);
          [v101 requestPendingKeyMaterialsForGroup:v103 sessionID:v105];
        }

        break;
      default:
        uint64_t v15 = OSLogHandleForTransportCategory("IDSDSession");
        uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v17 = [*(id *)(a1 + 32) materialType];
          *(_DWORD *)buf = 67109120;
          LODWORD(v177) = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "didReceiveMaterialInfo unknown material type %d",  buf,  8u);
        }

        uint64_t v19 = os_log_shim_legacy_logging_enabled(v18);
        if ((_DWORD)v19)
        {
          if (_IDSShouldLogTransport(v19))
          {
            id v156 = [*(id *)(a1 + 32) materialType];
            _IDSLogTransport( @"IDSDSession",  @"IDS",  @"didReceiveMaterialInfo unknown material type %d");
            if (_IDSShouldLog(0LL, @"IDSDSession"))
            {
              objc_msgSend(*(id *)(a1 + 32), "materialType", v156);
              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"didReceiveMaterialInfo unknown material type %d");
            }
          }
        }

        break;
    }
  }

  else
  {
    uint64_t v10 = OSLogHandleForTransportCategory("IDSDSession");
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      double v12 = *(double *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      double v177 = v12;
      __int16 v178 = 2112;
      id v179 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "didReceiveMaterialInfo failed to verify signature for info: %@ error: %@",  buf,  0x16u);
    }

    uint64_t v14 = os_log_shim_legacy_logging_enabled(v13);
    if ((_DWORD)v14)
    {
      if (_IDSShouldLogTransport(v14))
      {
        double v155 = *(double *)(a1 + 32);
        id v162 = v5;
        _IDSLogTransport( @"IDSDSession",  @"IDS",  @"didReceiveMaterialInfo failed to verify signature for info: %@ error: %@");
        if (_IDSShouldLog(0LL, @"IDSDSession"))
        {
          double v155 = *(double *)(a1 + 32);
          id v162 = v5;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"didReceiveMaterialInfo failed to verify signature for info: %@ error: %@");
        }
      }
    }

    objc_msgSend(*(id *)(a1 + 40), "materialInfoError:", @"failedSignatureVerification", *(void *)&v155, v162);
  }
}

void sub_10009C8E4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x10009C78CLL);
  }

  _Unwind_Resume(a1);
}

id sub_10009C9FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKey:v5]);
  if ((objc_opt_isKindOfClass(v6, a1) & 1) != 0)
  {
    id v7 = v6;
  }

  else
  {
    if (v6)
    {
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)) {
        sub_1006988A4();
      }
    }

    id v7 = 0LL;
  }

  return v7;
}

void sub_10009CAA4(id *a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v7 = im_primary_queue(v5, v6);
  id v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v7);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10009CB94;
  block[3] = &unk_1008F8D90;
  id v13 = a1[4];
  id v14 = a1[5];
  id v9 = a1[6];
  char v17 = a2;
  id v15 = v5;
  id v16 = v9;
  id v10 = v5;
  dispatch_block_t v11 = dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT,  QOS_CLASS_USER_INTERACTIVE,  0,  block);
  dispatch_async(v8, v11);
}

uint64_t sub_10009CB94(uint64_t a1)
{
  uint64_t v2 = OSLogHandleForTransportCategory("IDSDSession");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    uint64_t v10 = v4;
    __int16 v11 = 2112;
    uint64_t v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "didReceiveMaterialInfo verified signature: %@ matchesPayload: %@",  buf,  0x16u);
  }

  uint64_t v7 = os_log_shim_legacy_logging_enabled(v6);
  if ((_DWORD)v7)
  {
    if (_IDSShouldLogTransport(v7))
    {
      _IDSLogTransport( @"IDSDSession",  @"IDS",  @"didReceiveMaterialInfo verified signature: %@ matchesPayload: %@");
      if (_IDSShouldLog(0LL, @"IDSDSession")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"didReceiveMaterialInfo verified signature: %@ matchesPayload: %@");
      }
    }
  }

  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 56) + 16LL))( *(void *)(a1 + 56),  *(unsigned __int8 *)(a1 + 64));
}

uint64_t sub_10009CCE4(uint64_t a1)
{
  uint64_t v2 = OSLogHandleForTransportCategory("IDSDSession");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "didReceiveMaterialInfo did not verify signature",  v7,  2u);
  }

  uint64_t v5 = os_log_shim_legacy_logging_enabled(v4);
  if ((_DWORD)v5)
  {
    if (_IDSShouldLogTransport(v5))
    {
      _IDSLogTransport(@"IDSDSession", @"IDS", @"didReceiveMaterialInfo did not verify signature");
      if (_IDSShouldLog(0LL, @"IDSDSession")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"didReceiveMaterialInfo did not verify signature");
      }
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_10009CFF4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setInitialLinkType:*(void *)(a1 + 40)];
}

LABEL_113:
    if (v95 > 1) {
      -[IDSClientChannel writeBuffer:bufferSize:metaData:metadataSize:moreComing:]( self->_clientChannel,  "writeBuffer:bufferSize:metaData:metadataSize:moreComing:",  *v31,  a4->var24[v26].var1);
    }
    else {
      -[IDSDSession writeToClientChannel:packetBuffer:metaData:metadataSize:]( self,  "writeToClientChannel:packetBuffer:metaData:metadataSize:",  self->_clientChannel,  a4);
    }
    goto LABEL_116;
  }

        uint64_t v142 = objc_alloc(&OBJC_CLASS___IDSGroupSessionParticipantUpdate);
        uint64_t v143 = (void *)objc_claimAutoreleasedReturnValue(-[IDSGroupStatusNotificationParameters participantID](v15, "participantID"));
        v144 = [v143 unsignedLongLongValue];
        double v145 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString URIByAddingPushToken:](v180, "URIByAddingPushToken:", v179));
        __int16 v146 = (void *)objc_claimAutoreleasedReturnValue(-[IDSGroupStatusNotificationParameters urisToParticipantIDs](v15, "urisToParticipantIDs"));
        LOBYTE(v155) = v166;
        uint64_t v147 = [v142 initWithGroupUUID:v98 isInitiator:v164 participantIdentifier:v144 participantDestinationURI:v145 participantUpdateType:v176 par ticipantUpdateSubtype:v165 fromServer:v155 serverDate:v171 participantData:v168 clientContextData:v169 members:v170 participantIDs:v146 relaySessionID:0];

        uint64_t v148 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDGroupStatusNotificationController broadcaster](v174, "broadcaster"));
        [v148 broadcastGroupSessionParticipantUpdate:v147 onTopic:v177 toURI:v172 fromURI:v180 context:v181];

        goto LABEL_114;
      }

      if (((v164 | v81 ^ 1) & 1) != 0)
      {
        __int128 v127 = OSLogHandleForTransportCategory("GroupStatusNotificationController");
        uint64_t v128 = (os_log_s *)objc_claimAutoreleasedReturnValue(v127);
        if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
        {
          __int128 v129 = @"NO";
          if (v81) {
            __int128 v129 = @"YES";
          }
          *(_DWORD *)buf = 138412546;
          v183 = v178;
          v184 = 2112;
          v185 = v129;
          _os_log_impl( (void *)&_mh_execute_header,  v128,  OS_LOG_TYPE_DEFAULT,  "Passing the join event to client/s. There is no session for groupID %@ and isUPlusOne:%@ but the join push i s from Initiator",  buf,  0x16u);
        }

        uint64_t v131 = os_log_shim_legacy_logging_enabled(v130);
        if ((_DWORD)v131 && _IDSShouldLogTransport(v131))
        {
          __int128 v132 = v81 ? @"YES" : @"NO";
          double v155 = v178;
          id v157 = v132;
          _IDSLogTransport( @"GroupStatusNotificationController",  @"IDS",  @"Passing the join event to client/s. There is no session for groupID %@ and isUPlusOne:%@ but the join push is from Initiator");
          if (_IDSShouldLog(0LL, @"GroupStatusNotificationController"))
          {
            double v155 = v178;
            id v157 = v132;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"GroupStatusNotificationController",  @"Passing the join event to client/s. There is no session for groupID %@ and isUPlusOne:%@ but the join push is from Initiator");
          }
        }

        goto LABEL_96;
      }

      uint64_t v149 = OSLogHandleForTransportCategory("GroupStatusNotificationController");
      v150 = (os_log_s *)objc_claimAutoreleasedReturnValue(v149);
      if (os_log_type_enabled(v150, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v183 = v178;
        _os_log_impl( (void *)&_mh_execute_header,  v150,  OS_LOG_TYPE_DEFAULT,  "Couldn't pass the join event to clients. There is no U + 1 session for groupID %@ and the join push is not from Initiator.",  buf,  0xCu);
      }

      v152 = os_log_shim_legacy_logging_enabled(v151);
      if ((_DWORD)v152)
      {
        if (_IDSShouldLogTransport(v152))
        {
          _IDSLogTransport( @"GroupStatusNotificationController",  @"IDS",  @"Couldn't pass the join event to clients. There is no U + 1 session for groupID %@ and the join push is not from Initiator.");
          if (_IDSShouldLog(0LL, @"GroupStatusNotificationController")) {
            _IDSLogV( 0LL,  @"IDSFoundation",  @"GroupStatusNotificationController",  @"Couldn't pass the join event to clients. There is no U + 1 session for groupID %@ and the join push is not from Initiator.");
          }
        }
      }
    }
  }

  else
  {
    double v102 = (void *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog SessionController](&OBJC_CLASS___IDSFoundationLog, "SessionController"));
    if (os_log_type_enabled((os_log_t)v102, OS_LOG_TYPE_FAULT)) {
      sub_100699DCC(v98);
    }
  }

      goto LABEL_12;
    case 2u:
    case 0xDu:
      if ((unint64_t)v14 > 0xF)
      {
        v384 = (NSString *)v13[1];
        v378 = *((unsigned __int16 *)v13 + 1);
        v381 = *((unsigned __int16 *)v13 + 2);
        uint64_t v38 = *((unsigned __int16 *)v13 + 3);
        uint64_t v39 = *((unsigned __int16 *)v13 + 4);
        uint64_t v40 = *((unsigned __int16 *)v13 + 5);
        __int16 v41 = *((unsigned __int16 *)v13 + 6);
        uint64_t v42 = *((unsigned __int16 *)v13 + 7);
        unint64_t v43 = _IDSSupportsDirectMessaging(v14, v15);
        if (v17 == 13) {
          uint64_t v44 = v43;
        }
        else {
          uint64_t v44 = 0;
        }
        v387 = v44;
        if (v44 == 1)
        {
          uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
          {
            id v46 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
            *(_DWORD *)buf = 138412290;
            v401 = v46;
            _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "%@: UTCMType_SetupChannelForDirectMsg processing request",  buf,  0xCu);
          }

          uint64_t v47 = 8LL;
        }

        else
        {
          uint64_t v47 = 0LL;
        }

        uint64_t v85 = __rev16(v38);
        uint64_t v86 = __rev16(v40);
        id v87 = __rev16(v41);
        id v88 = __rev16(v42);
        if (!(_DWORD)v85 || !(_DWORD)v86 || !(_DWORD)v87 || !(_DWORD)v88)
        {
          uint64_t v95 = v88;
          uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
            *(_DWORD *)buf = 138413314;
            v401 = v96;
            v402 = 1024;
            *(_DWORD *)v403 = v85;
            *(_WORD *)&v403[4] = 1024;
            *(_DWORD *)&v403[6] = v86;
            *(_WORD *)&v403[10] = 1024;
            *(_DWORD *)&v403[12] = v87;
            *(_WORD *)&v403[16] = 1024;
            *(_DWORD *)&v403[18] = v95;
            _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%@: UTCMType_SetupChannel unexpected remoteGUID/account/service/name lengths (%u, %u, %u, %u)",  buf,  0x24u);
          }

          goto LABEL_11;
        }

        uint64_t v89 = __rev16(v39);
        uint64_t v90 = v85 + v89 + v86 + v87 + v88 + v47 + 16;
        if (v16 != (char *)v90)
        {
          uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            double v102 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
            *(_DWORD *)buf = 138412802;
            v401 = v102;
            v402 = 1024;
            *(_DWORD *)v403 = (_DWORD)v16;
            *(_WORD *)&v403[4] = 2048;
            *(void *)&v403[6] = v90;
            _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%@: UTCMType_SetupChannel unexpected size (%u != %lu)",  buf,  0x1Cu);
          }

          goto LABEL_11;
        }

        uint64_t v91 = v88;
        uint64_t v92 = v13 + 16;
        uint64_t v76 = -[NSString initWithBytes:length:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytes:length:encoding:",  v92,  v85,  4LL);
        if (v76)
        {
          dispatch_block_t v93 = &v92[v85];
          if (!(_DWORD)v89)
          {
            uint64_t v94 = 0LL;
LABEL_150:
            v377 = -[NSString initWithBytes:length:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytes:length:encoding:",  v93,  v86,  4LL);
            if (!v377)
            {
              v150 = OSLogHandleForTransportCategory("IDSNetworking");
              double v151 = (os_log_s *)objc_claimAutoreleasedReturnValue(v150);
              if (os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT))
              {
                v152 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
                *(_DWORD *)buf = 138412290;
                v401 = v152;
                _os_log_impl( (void *)&_mh_execute_header,  v151,  OS_LOG_TYPE_DEFAULT,  "%@: UTCMType_SetupChannel cannot decode remoteConnectionGUID",  buf,  0xCu);
              }

              uint64_t v154 = os_log_shim_legacy_logging_enabled(v153);
              if ((_DWORD)v154)
              {
                if (_IDSShouldLogTransport(v154))
                {
                  v332 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
                  _IDSLogTransport( @"IDSNetworking",  @"IDS",  @"%@: UTCMType_SetupChannel cannot decode remoteConnectionGUID");

                  if (_IDSShouldLog(0LL, @"IDSNetworking"))
                  {
                    v333 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v393, "vifName", v332));
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSNetworking",  @"%@: UTCMType_SetupChannel cannot decode remoteConnectionGUID");
                  }
                }
              }

              goto LABEL_333;
            }

            v374 = -[NSString initWithBytes:length:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytes:length:encoding:",  &v93[v86],  v87,  4LL);
            if (!v374)
            {
              id v173 = OSLogHandleForTransportCategory("IDSNetworking");
              uint64_t v174 = (os_log_s *)objc_claimAutoreleasedReturnValue(v173);
              if (os_log_type_enabled(v174, OS_LOG_TYPE_DEFAULT))
              {
                v175 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
                *(_DWORD *)buf = 138412290;
                v401 = v175;
                _os_log_impl( (void *)&_mh_execute_header,  v174,  OS_LOG_TYPE_DEFAULT,  "%@: UTCMType_SetupChannel cannot decode service",  buf,  0xCu);
              }

              double v177 = os_log_shim_legacy_logging_enabled(v176);
              if (!(_DWORD)v177) {
                goto LABEL_332;
              }
              v335 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
              _IDSLogTransport( @"IDSNetworking",  @"IDS",  @"%@: UTCMType_SetupChannel cannot decode service");

              uint64_t v141 = (NSString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v393, "vifName", v335));
              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSNetworking",  @"%@: UTCMType_SetupChannel cannot decode service");
LABEL_331:

LABEL_332:
LABEL_333:

              goto LABEL_334;
            }

            uint64_t v141 = -[NSString initWithBytes:length:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytes:length:encoding:",  &v93[v86 + v87],  v91,  4LL);
            if (!v141)
            {
              v189 = OSLogHandleForTransportCategory("IDSNetworking");
              v190 = (os_log_s *)objc_claimAutoreleasedReturnValue(v189);
              if (os_log_type_enabled(v190, OS_LOG_TYPE_DEFAULT))
              {
                v191 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
                *(_DWORD *)buf = 138412290;
                v401 = v191;
                _os_log_impl( (void *)&_mh_execute_header,  v190,  OS_LOG_TYPE_DEFAULT,  "%@: UTCMType_SetupChannel cannot decode name",  buf,  0xCu);
              }

              v193 = os_log_shim_legacy_logging_enabled(v192);
              if ((_DWORD)v193)
              {
                if (_IDSShouldLogTransport(v193))
                {
                  v340 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
                  _IDSLogTransport( @"IDSNetworking",  @"IDS",  @"%@: UTCMType_SetupChannel cannot decode name");

                  if (_IDSShouldLog(0LL, @"IDSNetworking"))
                  {
                    v341 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v393, "vifName", v340));
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSNetworking",  @"%@: UTCMType_SetupChannel cannot decode name");
                  }
                }
              }

              goto LABEL_331;
            }

            if (v387)
            {
              v363 = *(void *)&v93[v86 + v87 + v91];
              uint64_t v142 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
              if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v143 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
                *(_DWORD *)buf = 138412546;
                v401 = v143;
                v402 = 2048;
                *(void *)v403 = v363;
                _os_log_impl( (void *)&_mh_execute_header,  v142,  OS_LOG_TYPE_DEFAULT,  "%@: UTCMType_SetupChannelForDirectMsg flags: %#llx",  buf,  0x16u);
              }
            }

            else
            {
              v363 = 0LL;
            }

            v372 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGenericConnectionID idWithAccount:service:name:]( &OBJC_CLASS___IDSGenericConnectionID,  "idWithAccount:service:name:",  v377,  v374,  v141));
            v194 = (void *)objc_claimAutoreleasedReturnValue([v393 connectionsByID]);
            v195 = (os_log_s *)objc_claimAutoreleasedReturnValue([v194 objectForKey:v372]);

            v196 = (void *)objc_claimAutoreleasedReturnValue([v393 localSA]);
            v197 = (NSString *)__rev16(v381);
            v383 = (void *)objc_claimAutoreleasedReturnValue( +[IDSSockAddrWrapper wrapperWithWrapper:andPortHostOrder:]( &OBJC_CLASS___IDSSockAddrWrapper,  "wrapperWithWrapper:andPortHostOrder:",  v196,  v197));

            v198 = (void *)objc_claimAutoreleasedReturnValue([v393 remoteSA]);
            v366 = (NSString *)__rev16(v378);
            v380 = (void *)objc_claimAutoreleasedReturnValue( +[IDSSockAddrWrapper wrapperWithWrapper:andPortHostOrder:]( &OBJC_CLASS___IDSSockAddrWrapper,  "wrapperWithWrapper:andPortHostOrder:",  v198));

            v369 = (void *)objc_claimAutoreleasedReturnValue( +[IDSSockAddrWrapperPair wrapperPairWithLocalAddress:remoteAddress:]( &OBJC_CLASS___IDSSockAddrWrapperPair,  "wrapperPairWithLocalAddress:remoteAddress:",  v383,  v380));
            v199 = OSLogHandleForTransportCategory("UTun-oversized");
            v200 = (os_log_s *)objc_claimAutoreleasedReturnValue(v199);
            if (os_log_type_enabled(v200, OS_LOG_TYPE_DEFAULT))
            {
              v201 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
              *(_DWORD *)buf = 138414850;
              v401 = v201;
              v402 = 1024;
              *(_DWORD *)v403 = (_DWORD)v384;
              *(_WORD *)&v403[4] = 1024;
              *(_DWORD *)&v403[6] = (_DWORD)v197;
              *(_WORD *)&v403[10] = 1024;
              *(_DWORD *)&v403[12] = (_DWORD)v366;
              *(_WORD *)&v403[16] = 2112;
              *(void *)&v403[18] = v76;
              *(_WORD *)&v403[26] = 2112;
              *(void *)v404 = v94;
              *(_WORD *)&v404[8] = 2112;
              *(void *)v405 = v377;
              *(_WORD *)&v405[8] = 2112;
              *(void *)v406 = v374;
              *(_WORD *)&v406[8] = 2112;
              *(void *)v407 = v141;
              *(_WORD *)&v407[8] = 2112;
              *(void *)v408 = v195;
              *(_WORD *)&v408[8] = 2112;
              *(void *)v409 = v393;
              _os_log_impl( (void *)&_mh_execute_header,  v200,  OS_LOG_TYPE_DEFAULT,  "%@: got control message: setup channel proto:%d ports[%u:::%u] remoteGUID[%@] forLocalGUID[%@] account:[ %@] service[%@] name[%@] for connection[%@] deviceInfo[%@]",  buf,  0x64u);
            }

            v203 = os_log_shim_legacy_logging_enabled(v202);
            if ((_DWORD)v203)
            {
              if (_IDSShouldLogTransport(v203))
              {
                v353 = v195;
                v354 = (NSString *)v393;
                v351 = v374;
                v352 = v141;
                v349 = v94;
                v350 = v377;
                v347 = v366;
                v348 = v76;
                v345 = v384;
                v346 = v197;
                v328 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
                _IDSLogTransport( @"UTun-oversized",  @"IDS",  @"%@: got control message: setup channel proto:%d ports[%u:::%u] remoteGUID[%@] forLocalGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]");

                if (_IDSShouldLog(0LL, @"UTun-oversized"))
                {
                  v204 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v393,  "vifName",  v328,  v384,  v197,  v366,  v76,  v94,  v377,  v374,  v141,  v195,  v393));
                  v353 = v195;
                  v354 = (NSString *)v393;
                  v351 = v374;
                  v352 = v141;
                  v349 = v94;
                  v350 = v377;
                  v347 = v366;
                  v348 = v76;
                  v345 = v384;
                  v346 = v197;
                  v328 = v204;
                  _IDSLogV( 0LL,  @"IDSFoundation",  @"UTun-oversized",  @"%@: got control message: setup channel proto:%d ports[%u:::%u] remoteGUID[%@] forLocalGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]");
                }
              }
            }

            if (v94 && !v195)
            {
              v195 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
              if (os_log_type_enabled(v195, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v195,  OS_LOG_TYPE_DEFAULT,  "control message in reply to cleaned up connection",  buf,  2u);
              }

  sub_10041D3BC(v85);
  __int128 v127 = *(os_unfair_lock_s **)(v132 + v131);
  swift_retain(v127);
  os_unfair_lock_unlock(v127 + 4);
  return swift_release(v127);
}

        v205 = (v208 - 1) & v208;
        v206 = __clz(__rbit64(v208)) + (v204 << 6);
      }

      v203 = *(id *)(*(void *)(v182 + 48) + 8 * v206);
      v201 = v203;
      if (!v203) {
        goto LABEL_126;
      }
LABEL_115:
      v277 = v205;
      v210 = OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_participantID;
      v211 = *(void *)((char *)v201
                       + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_participantID);
      v212 = *(uint64_t (**)(__n128))((swift_isaMask & *v125) + 0x198LL);
      v213 = v201;
      v214 = (os_log_s *)Logger.logObject.getter(v213);
      v215 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v214, v215))
      {
        v216 = swift_slowAlloc(22LL, -1LL);
        v217 = (void *)swift_slowAlloc(8LL, -1LL);
        v218 = swift_slowAlloc(32LL, -1LL);
        v280 = (void *)v218;
        *(_DWORD *)v216 = v276.n128_u32[0];
        *(void *)(v216 + 4) = sub_1003FFBB0(0xD000000000000027LL, v259, (uint64_t *)&v280);
        *(_WORD *)(v216 + 12) = 2112;
        *(void *)(v216 + 14) = v213;
        *v217 = v201;

        _os_log_impl( (void *)&_mh_execute_header,  v214,  v215,  "%s: skipping lightweight localParticipant %@",  (uint8_t *)v216,  0x16u);
        v219 = sub_1003F5CB4(&qword_1009B92C8);
        swift_arrayDestroy(v217, 1LL, v219);
        v220 = v217;
        v196 = (uint64_t)v261;
        v195 = v266;
        swift_slowDealloc(v220, -1LL, -1LL);
        swift_arrayDestroy(v218, 1LL, v258);
        v221 = v218;
LABEL_121:
        swift_slowDealloc(v221, -1LL, -1LL);
        swift_slowDealloc(v216, -1LL, -1LL);
        goto LABEL_97;
      }

LABEL_97:
      v188 = v204;
      v189 = v277;
      uint64_t v125 = v275;
      v182 = j;
      if (j < 0) {
        goto LABEL_93;
      }
    }

    (*(void (**)(void))((swift_isaMask & *v201) + 0x108LL))();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v267 + 48))(v196, 1LL, v268) == 1)
    {
      sub_10040A274(v196, &qword_1009B97A8);
      v213 = v201;
      v214 = (os_log_s *)Logger.logObject.getter(v213);
      v222 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v214, v222))
      {
        v216 = swift_slowAlloc(22LL, -1LL);
        v223 = (void *)swift_slowAlloc(8LL, -1LL);
        v224 = swift_slowAlloc(32LL, -1LL);
        v280 = (void *)v224;
        *(_DWORD *)v216 = v276.n128_u32[0];
        *(void *)(v216 + 4) = sub_1003FFBB0(0xD000000000000027LL, v260 | 0x8000000000000000LL, (uint64_t *)&v280);
        *(_WORD *)(v216 + 12) = 2112;
        *(void *)(v216 + 14) = v213;
        *v223 = v201;

        _os_log_impl( (void *)&_mh_execute_header,  v214,  v222,  "%s: Cannot generate desired material for %@: don't have lightweight participant's public key",  (uint8_t *)v216,  0x16u);
        v225 = sub_1003F5CB4(&qword_1009B92C8);
        swift_arrayDestroy(v223, 1LL, v225);
        swift_slowDealloc(v223, -1LL, -1LL);
        swift_arrayDestroy(v224, 1LL, (char *)&type metadata for Any + 8);
        v221 = v224;
        v196 = (uint64_t)v261;
        v195 = v266;
        goto LABEL_121;
      }

      v188 = v204;
      v189 = v277;
      uint64_t v125 = v275;
    }

    else
    {
      v226 = v256;
      v271 = v204;
      sub_1003F600C(v196, v256, type metadata accessor for IDSGroupEncryptionPublicIdentity);
      v227 = (uint64_t)v281;
      v228 = v262;
      sub_1003F5FC8(v226, v262, type metadata accessor for IDSGroupEncryptionPublicIdentity);
      v229 = *(void *)((char *)v201 + v210);
      v230 = swift_bridgeObjectRetain(v227);
      v231 = v212(v230);
      v232 = v264;
      sub_1004D2068(1LL, v227, v228, v229, v231, v264);
      swift_storeEnumTagMultiPayload(v232, v265, 0LL);
      v233 = v263;
      sub_10041AC80(v263, v232);

      sub_1003F6050(v233, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
      id v181 = (void *)sub_1003F6050(v226, type metadata accessor for IDSGroupEncryptionPublicIdentity);
      v188 = v271;
      v189 = v277;
    }

    v182 = j;
  }

void sub_10009E12C(uint64_t a1)
{
  id v8 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v8, "setShouldBoost:", 1LL);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 pushTopic]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( [v2 broadcasterForTopic:v4 entitlement:kIDSSessionEntitlement command:0 messageContext:v8]);

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
  [v5 participantUpdatedForSession:v7];
}

void sub_10009F4C4(uint64_t a1)
{
  uint64_t v6 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v6, "setShouldBoost:", 1LL);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 pushTopic]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( [v2 broadcasterForTopic:v4 entitlement:kIDSSessionEntitlement command:0 messageContext:v6]);

  [v5 groupSessionDidConnectUnderlyingLinks:*(void *)(a1 + 40)];
}

void sub_10009FA78(uint64_t a1)
{
  uint64_t v6 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v6, "setShouldBoost:", 1LL);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 pushTopic]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( [v2 broadcasterForTopic:v4 entitlement:kIDSSessionEntitlement command:0 messageContext:v6]);

  [v5 groupSessionDidDisconnectUnderlyingLinks:*(void *)(a1 + 40)];
}

void sub_1000A29A4(_Unwind_Exception *a1)
{
}

void sub_1000A29DC(uint64_t a1)
{
  id v8 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v8, "setShouldBoost:", 1LL);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 pushTopic]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( [v2 broadcasterForTopic:v4 entitlement:kIDSSessionEntitlement command:0 messageContext:v8]);

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
  [v5 session:v7 didReceiveBlockedParticipantIDs:*(void *)(a1 + 40) withCode:0 withType:*(unsigned __int16 *)(a1 + 48) isTruncated:*(unsigned __int8 *)(a1 + 50)];
}

void sub_1000A2AD4(uint64_t a1)
{
  __int16 v11 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v11, "setShouldBoost:", 1LL);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 pushTopic]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( [v2 broadcasterForTopic:v4 entitlement:kIDSSessionEntitlement command:0 messageContext:v11]);

  int v6 = *(unsigned __int16 *)(a1 + 56);
  if (v6 == 3)
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
  }

  else
  {
    if (v6 != 4)
    {
      uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
      int v8 = 2;
      goto LABEL_8;
    }

    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
    if (*(_WORD *)(a1 + 58) == 5)
    {
      int v8 = 3;
LABEL_8:
      *(_DWORD *)(v7 + cut_arc_os_release(v1 - 24) = v8;
      goto LABEL_9;
    }
  }

  *(_DWORD *)(v7 + cut_arc_os_release(v1 - 24) = 0;
LABEL_9:
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 uniqueID]);
  [v5 session:v10 didReceiveQueryBlockedParticipantIDs:*(void *)(a1 + 40) withCode:*(unsigned int *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) isTruncated:*(unsigned __int8 *)(a1 + 60)];
}

void sub_1000A2C1C(uint64_t a1)
{
  uint64_t v12 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v12, "setShouldBoost:", 1LL);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 pushTopic]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( [v2 broadcasterForTopic:v4 entitlement:kIDSSessionEntitlement command:0 messageContext:v12]);

  int v6 = *(unsigned __int16 *)(a1 + 56);
  if (v6 == 3) {
    goto LABEL_13;
  }
  if (v6 != 4)
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8LL);
    int v9 = 2;
    goto LABEL_8;
  }

  int v7 = *(unsigned __int16 *)(a1 + 58);
  if (v7 == 7)
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8LL);
    int v9 = 4;
    goto LABEL_8;
  }

  if (v7 == 5)
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8LL);
    int v9 = 3;
LABEL_8:
    *(_DWORD *)(v8 + cut_arc_os_release(v1 - 24) = v9;
    goto LABEL_14;
  }

  if (!*(_WORD *)(a1 + 60))
  {
LABEL_13:
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
    goto LABEL_14;
  }

  if (v7 != 1) {
    int v7 = 2;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v7;
LABEL_14:
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 uniqueID]);
  [v5 session:v11 didReceiveBlockedParticipantIDs:*(void *)(a1 + 40) withCode:*(unsigned int *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) withType:*(unsigned __int16 *)(a1 + 60) isTruncated:*(unsigned __int8 *)(a1 + 62)];
}

void sub_1000A2DA4(uint64_t a1)
{
  int v9 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v9, "setShouldBoost:", 1LL);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 pushTopic]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( [v2 broadcasterForTopic:v4 entitlement:kIDSSessionEntitlement command:0 messageContext:v9]);

  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 2 * (*(_WORD *)(a1 + 56) != 3);
  if (*(_WORD *)(a1 + 56) == 3)
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
  }

  else
  {
    if (*(_WORD *)(a1 + 58) == 5) {
      int v6 = 3;
    }
    else {
      int v6 = 2;
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v6;
  }

  int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 uniqueID]);
  [v5 session:v8 didRemoveParticipantIDs:*(void *)(a1 + 40) withCode:*(unsigned int *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) isTruncated:*(unsigned __int8 *)(a1 + 60)];
}

void sub_1000A2EF8(uint64_t a1)
{
  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v8, "setShouldBoost:", 1LL);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 pushTopic]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( [v2 broadcasterForTopic:v4 entitlement:kIDSSessionEntitlement command:0 messageContext:v8]);

  int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
  [v5 sessionDidReceiveParticipantUpgrade:v7 participantType:*(unsigned __int16 *)(a1 + 48) error:*(void *)(a1 + 40)];
}

void sub_1000A2FE8(uint64_t a1)
{
  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v8, "setShouldBoost:", 1LL);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 pushTopic]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( [v2 broadcasterForTopic:v4 entitlement:kIDSSessionEntitlement command:0 messageContext:v8]);

  int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
  [v5 session:v7 didReceiveParticipantIDs:0 withCode:5 managementType:*(unsigned __int16 *)(a1 + 40)];
}

void sub_1000A32D4(uint64_t a1)
{
  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v8, "setShouldBoost:", 1LL);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 pushTopic]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( [v2 broadcasterForTopic:v4 entitlement:kIDSSessionEntitlement command:0 messageContext:v8]);

  int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
  [v5 participantUpdatedForSession:v7];
}

void sub_1000A3670(uint64_t a1)
{
  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v8, "setShouldBoost:", 1LL);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 pushTopic]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( [v2 broadcasterForTopic:v4 entitlement:kIDSSessionEntitlement command:0 messageContext:v8]);

  int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
  [v5 session:v7 didRegisterPluginAllocationInfo:*(void *)(a1 + 40)];
}

void sub_1000A39C8(uint64_t a1)
{
  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v8, "setShouldBoost:", 1LL);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 pushTopic]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( [v2 broadcasterForTopic:v4 entitlement:kIDSSessionEntitlement command:0 messageContext:v8]);

  int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
  [v5 session:v7 didUnregisterPluginAllocationInfo:*(void *)(a1 + 40)];
}

void sub_1000A3BE0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = a3;
  objc_msgSend(v4, "link:didReceivePluginUnregistration:pluginName:", v5, objc_msgSend(a2, "unsignedLongLongValue"), v6);
}

void sub_1000A3DC4(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v5]);

  if (!v6) {
    [*(id *)(a1 + 32) setObject:v5 forKey:v7];
  }
}

id sub_1000A43AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _sendParticipantMappingUpdateToClient:a2 forLinkID:*(char *)(a1 + 40) shouldReplace:a3 == 0];
}

id sub_1000A45AC(uint64_t a1)
{
  return [*(id *)(a1 + 32) endSessionWithReason:*(unsigned int *)(a1 + 40)];
}

id sub_1000A4714(uint64_t a1)
{
  return [*(id *)(a1 + 32) receiveAndDecryptEncryptedDataBlobs:*(void *)(a1 + 40)];
}

void sub_1000A4874(uint64_t a1)
{
  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v8, "setShouldBoost:", 1LL);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 pushTopic]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( [v2 broadcasterForTopic:v4 entitlement:kIDSSessionEntitlement command:0 messageContext:v8]);

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
  [v5 session:v7 didReceiveServerErrorCode:*(unsigned int *)(a1 + 40)];
}

id sub_1000A5498(uint64_t a1)
{
  return [*(id *)(a1 + 32) endSessionWithReason:43];
}

void sub_1000A5A94(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v7 = im_primary_queue(v5, v6);
  uint64_t v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v7);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000A5B94;
  v12[3] = &unk_1008F8ED0;
  id v13 = *(id *)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  char v19 = a2;
  id v14 = v9;
  id v15 = v5;
  id v16 = *(id *)(a1 + 48);
  uint64_t v18 = *(void *)(a1 + 72);
  __int128 v17 = *(_OWORD *)(a1 + 56);
  id v10 = v5;
  dispatch_block_t v11 = dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT,  QOS_CLASS_USER_INTERACTIVE,  0,  v12);
  dispatch_async(v8, v11);
}

void sub_1000A5B94(uint64_t a1)
{
  uint64_t v2 = OSLogHandleForTransportCategory("IDSDSession");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    id v29 = v4;
    __int16 v30 = 2112;
    uint64_t v31 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "_processParticipantInfo: verified signature: %@ matchesPayload: %@",  buf,  0x16u);
  }

  uint64_t v7 = os_log_shim_legacy_logging_enabled(v6);
  if ((_DWORD)v7)
  {
    if (_IDSShouldLogTransport(v7))
    {
      uint64_t v25 = *(void *)(a1 + 32);
      uint64_t v27 = *(void *)(a1 + 40);
      _IDSLogTransport( @"IDSDSession",  @"IDS",  @"_processParticipantInfo: verified signature: %@ matchesPayload: %@");
      if (_IDSShouldLog(0LL, @"IDSDSession"))
      {
        uint64_t v25 = *(void *)(a1 + 32);
        uint64_t v27 = *(void *)(a1 + 40);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"_processParticipantInfo: verified signature: %@ matchesPayload: %@");
      }
    }
  }

  if (*(_BYTE *)(a1 + 88))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    id v9 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v10 = -[NSMutableData initWithData:](objc_alloc(&OBJC_CLASS___NSMutableData), "initWithData:", *(void *)(a1 + 56));
    -[NSMutableData appendBytes:length:](v10, "appendBytes:length:", a1 + 80, 8LL);
    if (v9 && v10) {
      CFArrayAppendValue((CFMutableArrayRef)v9, v10);
    }
    -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", v9, &off_100946A98, v25, v27);
    [*(id *)(*(void *)(a1 + 64) + 160) setObject:Mutable forKey:*(void *)(a1 + 72)];
    dispatch_block_t v11 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 64) + 152) objectForKeyedSubscript:*(void *)(a1 + 72)]);
    if (v11)
    {
      id v13 = *(id **)(a1 + 64);
      uint64_t v12 = (void *)(a1 + 64);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v13[20] objectForKeyedSubscript:v12[1]]);
      [v13 receiveAndDecryptEncryptedDataBlobs:v14];

      [*(id *)(*v12 + 160) setObject:0 forKeyedSubscript:v12[1]];
    }

    else
    {
      uint64_t v20 = OSLogHandleForTransportCategory("IDSDSession");
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        id v22 = [*(id *)(a1 + 72) unsignedLongLongValue];
        *(_DWORD *)buf = 134217984;
        id v29 = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "_processParticipantInfo: have not received AVC Blob yet from participant: %llu!",  buf,  0xCu);
      }

      uint64_t v24 = os_log_shim_legacy_logging_enabled(v23);
      if ((_DWORD)v24 && _IDSShouldLogTransport(v24))
      {
        id v26 = [*(id *)(a1 + 72) unsignedLongLongValue];
        _IDSLogTransport( @"IDSDSession",  @"IDS",  @"_processParticipantInfo: have not received AVC Blob yet from participant: %llu!");
        if (_IDSShouldLog(0LL, @"IDSDSession"))
        {
          objc_msgSend(*(id *)(a1 + 72), "unsignedLongLongValue", v26);
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"_processParticipantInfo: have not received AVC Blob yet from participant: %llu!");
        }
      }
    }
  }

  else
  {
    uint64_t v15 = OSLogHandleForTransportCategory("IDSDSession");
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v17 = *(void **)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      id v29 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "_processParticipantInfo: failed to verify signature with error: %@",  buf,  0xCu);
    }

    uint64_t v19 = os_log_shim_legacy_logging_enabled(v18);
    if ((_DWORD)v19)
    {
      if (_IDSShouldLogTransport(v19))
      {
        _IDSLogTransport( @"IDSDSession",  @"IDS",  @"_processParticipantInfo: failed to verify signature with error: %@");
        if (_IDSShouldLog(0LL, @"IDSDSession")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"_processParticipantInfo: failed to verify signature with error: %@");
        }
      }
    }
  }

LABEL_119:
}

void sub_1000A6FD0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  id v9 = (id)objc_claimAutoreleasedReturnValue([v2 pushTopic]);

  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v3, "setShouldBoost:", 1LL);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( [v4 broadcasterForTopic:v9 entitlement:kIDSSessionEntitlement command:0 messageContext:v3]);

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray array](&OBJC_CLASS___NSArray, "array"));
  [v5 session:v7 didReceiveActiveParticipants:v8 success:0];
}

void sub_1000A70D4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 groupID]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 uniqueID]);
  [v2 didUpdateParticipants:&__NSArray0__struct ofType:0 forGroup:v4 sessionID:v6];

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  id v13 = (id)objc_claimAutoreleasedReturnValue([v7 pushTopic]);

  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v8, "setShouldBoost:", 1LL);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  id v10 = (void *)objc_claimAutoreleasedReturnValue( [v9 broadcasterForTopic:v13 entitlement:kIDSSessionEntitlement command:0 messageContext:v8]);

  dispatch_block_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 uniqueID]);
  [v10 session:v12 didReceiveActiveParticipants:&__NSArray0__struct success:1];
}

void sub_1000A7248(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 groupID]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 uniqueID]);
  [v2 didUpdateParticipants:&__NSArray0__struct ofType:1 forGroup:v4 sessionID:v6];

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  id v13 = (id)objc_claimAutoreleasedReturnValue([v7 pushTopic]);

  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v8, "setShouldBoost:", 1LL);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  id v10 = (void *)objc_claimAutoreleasedReturnValue( [v9 broadcasterForTopic:v13 entitlement:kIDSSessionEntitlement command:0 messageContext:v8]);

  dispatch_block_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 uniqueID]);
  [v10 session:v12 didReceiveActiveLightweightParticipants:&__NSArray0__struct success:1];
}

LABEL_83:
      double v83 = v181;
    }

    if (v171)
    {
      id v121 = OSLogHandleForTransportCategory("IDSDSession");
      uint64_t v122 = (os_log_s *)objc_claimAutoreleasedReturnValue(v121);
      if (os_log_type_enabled(v122, OS_LOG_TYPE_DEFAULT))
      {
        pendingMaterialInfoByFromint ID = v83->_pendingMaterialInfoByFromID;
        *(_DWORD *)buf = 138412546;
        v212 = pendingMaterialInfoByFromID;
        v213 = 2112;
        v214 = (uint64_t)v171;
        _os_log_impl( (void *)&_mh_execute_header,  v122,  OS_LOG_TYPE_DEFAULT,  "Checking if we have material in %@ for new destinations %@",  buf,  0x16u);
      }

      uint64_t v125 = os_log_shim_legacy_logging_enabled(v124);
      if ((_DWORD)v125)
      {
        if (_IDSShouldLogTransport(v125))
        {
          uint64_t v147 = v181->_pendingMaterialInfoByFromID;
          uint64_t v148 = v171;
          _IDSLogTransport( @"IDSDSession",  @"IDS",  @"Checking if we have material in %@ for new destinations %@");
          if (_IDSShouldLog(0LL, @"IDSDSession"))
          {
            uint64_t v147 = v181->_pendingMaterialInfoByFromID;
            uint64_t v148 = v171;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Checking if we have material in %@ for new destinations %@");
          }
        }
      }

      v197 = 0u;
      v198 = 0u;
      v195 = 0u;
      v196 = 0u;
      id v126 = v171;
      __int128 v127 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v126,  "countByEnumeratingWithState:objects:count:",  &v195,  v209,  16LL);
      if (v127)
      {
        uint64_t v128 = *(void *)v196;
        do
        {
          for (k = 0LL; k != v127; k = (char *)k + 1)
          {
            if (*(void *)v196 != v128) {
              objc_enumerationMutation(v126);
            }
            uint64_t v130 = *(void **)(*((void *)&v195 + 1) + 8LL * (void)k);
            uint64_t v131 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v181->_pendingMaterialInfoByFromID,  "objectForKeyedSubscript:",  v130,  v147,  v148));
            if (v131)
            {
              __int128 v132 = OSLogHandleForTransportCategory("IDSDSession");
              uint64_t v133 = (os_log_s *)objc_claimAutoreleasedReturnValue(v132);
              if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412546;
                v212 = v131;
                v213 = 2112;
                v214 = (uint64_t)v130;
                _os_log_impl((void *)&_mh_execute_header, v133, OS_LOG_TYPE_DEFAULT, "Found %@ for %@", buf, 0x16u);
              }

              __int128 v135 = os_log_shim_legacy_logging_enabled(v134);
              if ((_DWORD)v135)
              {
                if (_IDSShouldLogTransport(v135))
                {
                  uint64_t v147 = v131;
                  uint64_t v148 = v130;
                  _IDSLogTransport(@"IDSDSession", @"IDS", @"Found %@ for %@");
                  if (_IDSShouldLog(0LL, @"IDSDSession"))
                  {
                    uint64_t v147 = v131;
                    uint64_t v148 = v130;
                    _IDSLogV(0LL, @"IDSFoundation", @"IDSDSession", @"Found %@ for %@");
                  }
                }
              }

              -[NSMutableDictionary setObject:forKeyedSubscript:]( v181->_pendingMaterialInfoByFromID,  "setObject:forKeyedSubscript:",  0LL,  v130,  v147);
              v193 = 0u;
              v194 = 0u;
              v192 = 0u;
              v191 = 0u;
              id v136 = v131;
              uint64_t v137 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v136,  "countByEnumeratingWithState:objects:count:",  &v191,  v208,  16LL);
              if (v137)
              {
                __int128 v138 = *(void *)v192;
                do
                {
                  for (m = 0LL; m != v137; m = (char *)m + 1)
                  {
                    if (*(void *)v192 != v138) {
                      objc_enumerationMutation(v136);
                    }
                    (*(void (**)(void))(*(void *)(*((void *)&v191 + 1) + 8LL * (void)m) + 16LL))();
                  }

                  uint64_t v137 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v136,  "countByEnumeratingWithState:objects:count:",  &v191,  v208,  16LL);
                }

                while (v137);
              }
            }
          }

          __int128 v127 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v126,  "countByEnumeratingWithState:objects:count:",  &v195,  v209,  16LL);
        }

        while (v127);
      }

      double v83 = v181;
    }

    v184[0] = _NSConcreteStackBlock;
    v184[1] = 3221225472LL;
    v184[2] = sub_1000A9380;
    v184[3] = &unk_1008F8F48;
    v188 = v168;
    v184[4] = v83;
    v189 = v169;
    v190 = theDicta;
    __int16 v140 = v171;
    v185 = v140;
    v186 = v170;
    v187 = v176;
    uint64_t v141 = objc_retainBlock(v184);
    uint64_t v142 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSession groupStatusNotificationController](v181, "groupStatusNotificationController"));
    uint64_t v143 = (void *)objc_claimAutoreleasedReturnValue([v142 queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000A9BC8;
    block[3] = &unk_1008F8F70;
    void block[4] = v181;
    v144 = v141;
    v183 = v144;
    double v145 = v143;
    __int16 v146 = dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT,  QOS_CLASS_USER_INITIATED,  0,  block);
    dispatch_async(v145, v146);
  }
}

  sub_10041D3BC(v99);
  id v181 = (void *)swift_bridgeObjectRelease(v277);
  v182 = j;
  if ((j & 0xC000000000000001LL) != 0)
  {
    if (j < 0) {
      v183 = j;
    }
    else {
      v183 = j & 0xFFFFFFFFFFFFFF8LL;
    }
    v184 = __CocoaSet.makeIterator()(v183);
    v185 = type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
    v186 = sub_10040A2B0( (unint64_t *)&unk_1009B97C0,  type metadata accessor for IDSGroupEncryptionControllerParticipant,  (uint64_t)&protocol conformance descriptor for NSObject);
    id v181 = Set.Iterator.init(_cocoa:)(v285, v184, v185, v186);
    v182 = v285[0];
    v274 = v285[1];
    v187 = v285[2];
    v188 = v285[3];
    v189 = v285[4];
  }

  else
  {
    v188 = 0LL;
    v190 = -1LL << *(_BYTE *)(j + 32);
    v191 = *(void *)(j + 56);
    v274 = j + 56;
    v192 = ~v190;
    v193 = -v190;
    if (v193 < 64) {
      v194 = ~(-1LL << v193);
    }
    else {
      v194 = -1LL;
    }
    v189 = v194 & v191;
    v187 = v192;
  }

  v195 = v266;
  v196 = (uint64_t)v261;
  v270 = v182 & 0x7FFFFFFFFFFFFFFFLL;
  v257 = v187;
  v273 = (unint64_t)(v187 + 64) >> 6;
  v259 = v260 | 0x8000000000000000LL;
  v258 = (char *)&type metadata for Any + 8;
  v269 = (char *)&type metadata for Swift.AnyObject + 8;
  for (j = v182; (j & 0x8000000000000000LL) == 0; v195 = v266)
  {
    while (1)
    {
      if (v189)
      {
        v205 = (v189 - 1) & v189;
        v206 = __clz(__rbit64(v189)) | (v188 << 6);
        v204 = v188;
      }

      else
      {
        v207 = v188 + 1;
        uint64_t v59 = (uint64_t)&swift_isaMask;
        if (__OFADD__(v188, 1LL)) {
          goto LABEL_133;
        }
        if (v207 >= v273) {
          goto LABEL_126;
        }
        v208 = *(void *)(v274 + 8 * v207);
        v204 = v188 + 1;
        if (!v208)
        {
          v204 = v188 + 2;
          if (v188 + 2 >= v273) {
            goto LABEL_126;
          }
          v208 = *(void *)(v274 + 8 * v204);
          if (!v208)
          {
            v204 = v188 + 3;
            if (v188 + 3 >= v273) {
              goto LABEL_126;
            }
            v208 = *(void *)(v274 + 8 * v204);
            if (!v208)
            {
              v204 = v188 + 4;
              if (v188 + 4 >= v273) {
                goto LABEL_126;
              }
              v208 = *(void *)(v274 + 8 * v204);
              if (!v208)
              {
                v209 = v188 + 5;
                while (v273 != v209)
                {
                  v208 = *(void *)(v274 + 8 * v209++);
                  if (v208)
                  {
                    v204 = v209 - 1;
                    goto LABEL_113;
                  }
                }

                goto LABEL_126;
              }
            }
          }
        }

      v188 = (v192 - 1) & v192;
      v191 = __clz(__rbit64(v192)) + (v189 << 6);
    }

    break;
  }

  v194 = *(void *)(v25 + 72);
  v195 = v243;
  sub_1003F5FC8( *((void *)v245 + 6) + v194 * v191,  v243,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
  v196 = v195 + *(int *)(v24 + 20);
  v197 = *(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 16);
  v198 = v250;
  v197(v250, v196, v4);
  sub_1004C77E4(v195, v249);
  v199 = swift_isUniquelyReferenced_nonNull_native(v66);
  v252 = v66;
  v202 = sub_100417CA0(v198, v200);
  v203 = *((void *)v66 + 2);
  v204 = (v201 & 1) == 0;
  v205 = v203 + v204;
  if (__OFADD__(v203, v204))
  {
    __break(1u);
    goto LABEL_102;
  }

  v206 = v201;
  if (*((void *)v66 + 3) >= v205)
  {
    if ((v199 & 1) == 0) {
      sub_1004C58BC();
    }
  }

  else
  {
    sub_1004C4BD0(v205, v199);
    v208 = sub_100417CA0(v250, v207);
    if ((v206 & 1) != (v209 & 1)) {
      goto LABEL_112;
    }
    v202 = v208;
  }

  uint64_t v81 = v248;
  uint64_t v66 = v252;
  if ((v206 & 1) != 0)
  {
    sub_1004C77A0(v249, *((void *)v252 + 7) + v202 * v194);
    uint64_t v4 = v244;
LABEL_70:
    swift_bridgeObjectRelease(0x8000000000000000LL);
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v250, v4);
    uint64_t v25 = v246;
    uint64_t v24 = v247;
    goto LABEL_71;
  }

  *((void *)v252 + (v202 >> 6) + 8) |= 1LL << v202;
  uint64_t v4 = v244;
  v197(*((void *)v66 + 6) + *(void *)(v81 + 72) * v202, v250, v244);
  sub_1004C77E4(v249, *((void *)v66 + 7) + v202 * v194);
  v210 = *((void *)v66 + 2);
  uint64_t v131 = __OFADD__(v210, 1LL);
  v211 = v210 + 1;
  if (!v131)
  {
    *((void *)v66 + 2) = v211;
    uint64_t v66 = v252;
    goto LABEL_70;
  }

  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v244);
  __break(1u);
LABEL_113:
  uint64_t result = swift_release(v252);
  __break(1u);
  return result;
}

id sub_1000A9308(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 sharedState]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 serviceName]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithPrefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithPrefixedURI:withServiceLoggingHint:",  v3,  v5));

  return v6;
}

void sub_1000A9380(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = im_primary_queue(a1, a2);
  uint64_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v3);
  block[2] = sub_1000A94D4;
  block[3] = &unk_1008F8DE0;
  char v18 = *(_BYTE *)(a1 + 64);
  uint64_t v5 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  __int16 v19 = *(_WORD *)(a1 + 65);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  id v17 = v5;
  dispatch_block_t v6 = dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT,  QOS_CLASS_USER_INITIATED,  0,  block);
  dispatch_async(v4, v6);

  if (*(_BYTE *)(a1 + 65))
  {
    uint64_t v9 = im_primary_queue(v7, v8);
    id v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v9);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_1000A99D0;
    v12[3] = &unk_1008F8F20;
    void v12[4] = *(void *)(a1 + 32);
    id v13 = *(id *)(a1 + 48);
    id v14 = *(id *)(a1 + 56);
    char v15 = *(_BYTE *)(a1 + 66);
    dispatch_block_t v11 = dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT,  QOS_CLASS_USER_INITIATED,  0,  v12);
    dispatch_async(v10, v11);
  }
}

void sub_1000A94D4(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
      uint64_t v6 = objc_claimAutoreleasedReturnValue([v5 groupID]);
      uint64_t v7 = (void *)v6;
      uint64_t v8 = @"YES";
      if (!*(_BYTE *)(a1 + 49)) {
        uint64_t v8 = @"NO";
      }
      *(_DWORD *)buf = 138412546;
      uint64_t v30 = v6;
      __int16 v31 = 2112;
      int v32 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "updateMembers: Resetting keys & sending membership change to AVC for group %@, triggeredLocally: %@",  buf,  0x16u);
    }

    uint64_t v9 = *(unsigned __int8 *)(a1 + 50);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    v25[2] = sub_1000A97C4;
    v25[3] = &unk_1008F7DE0;
    char v28 = *(_BYTE *)(a1 + 48);
    id v10 = *(void **)(a1 + 40);
    id v26 = *(id *)(a1 + 32);
    id v27 = v10;
    [v26 recvMembershipChangeEventWithReason:v9 completionHandler:v25];
    [*(id *)(*(void *)(a1 + 32) + 896) membershipChange];
  }

  else
  {
    if (v4)
    {
      dispatch_block_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
      uint64_t v12 = objc_claimAutoreleasedReturnValue([v11 groupID]);
      id v13 = (void *)v12;
      id v14 = @"YES";
      if (!*(_BYTE *)(a1 + 49)) {
        id v14 = @"NO";
      }
      *(_DWORD *)buf = 138412546;
      uint64_t v30 = v12;
      __int16 v31 = 2112;
      int v32 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "updateMembers: No need to reset keys for group %@, triggeredLocally: %@",  buf,  0x16u);
    }

    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
    char v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 destinations]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 allObjects]);
    char v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([v18 groupID]);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 uniqueID]);
    id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 destinationsLightweightStatus]);
    [v24 didUpdateMembers:v17 forGroup:v19 sessionID:v21 lightweightStatusDict:v23 hasChangedStandardMembers:*(unsigned __int8 *)(a1 + 48) newlyAddedMembers:*(void *)(a1 + 40)];
  }

void sub_1000A97C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = im_primary_queue(a1, a2);
  BOOL v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v3);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_1000A986C;
  block[3] = &unk_1008F7DE0;
  uint64_t v5 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  block[1] = 3221225472LL;
  char v9 = *(_BYTE *)(a1 + 48);
  id v8 = v5;
  dispatch_block_t v6 = dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT,  QOS_CLASS_USER_INITIATED,  0,  block);
  dispatch_async(v4, v6);
}

void sub_1000A986C(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([v3 groupID]);
  [v2 resetKeysForGroup:v4 shouldRemoveCurrentParticipants:0];

  id v14 = (id)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  dispatch_block_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 destinations]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 allObjects]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  char v9 = (void *)objc_claimAutoreleasedReturnValue([v8 groupID]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  dispatch_block_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 uniqueID]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 destinationsLightweightStatus]);
  [v14 didUpdateMembers:v7 forGroup:v9 sessionID:v11 lightweightStatusDict:v13 hasChangedStandardMembers:*(unsigned __int8 *)(a1 + 48) newlyAddedMembers:*(void *)(a1 + 40)];
}

void sub_1000A99D0(uint64_t a1)
{
  int v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "updateMembers: Informing remote participants of membership change via push.",  buf,  2u);
  }

  __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) groupStatusNotificationController]);
  id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v22 destinations]);
  id v17 = (void *)objc_claimAutoreleasedReturnValue([v21 allObjects]);
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  char v15 = (void *)objc_claimAutoreleasedReturnValue([v20 groupID]);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v14 = v3[23];
  char v18 = (void *)objc_claimAutoreleasedReturnValue([v3 accountController]);
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 accountID]);
  dispatch_block_t v6 = (void *)objc_claimAutoreleasedReturnValue([v18 accountWithUniqueID:v5]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 fromURI]);
  char v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 uniqueID]);
  uint64_t v11 = *(void *)(a1 + 48);
  char v12 = *(_BYTE *)(a1 + 56);
  BYTE1(v13) = [*(id *)(a1 + 32) shouldReportUPlusOneKey];
  LOBYTE(v13) = v12;
  objc_msgSend( v19,  "updateMembers:toGroup:withContext:params:fromAccount:fromURI:sessionID:messagingCapabilities:reason:isUPlusOne:completionBlock:",  v17,  v15,  v16,  v14,  v6,  v8,  v10,  v11,  v13,  0);
}

void sub_1000A9BC8(uint64_t a1)
{
  id v15 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) groupStatusNotificationController]);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v14 destinations]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v13 allObjects]);
  char v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  int v2 = (void *)objc_claimAutoreleasedReturnValue([v12 groupID]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  dispatch_block_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 fromURI]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountController]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  char v9 = (void *)objc_claimAutoreleasedReturnValue([v8 accountID]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v7 accountWithUniqueID:v9]);
  [v15 pushTokenLookup:v11 forGroup:v2 sessionID:v4 fromURI:v6 account:v10 completionBlock:*(void *)(a1 + 40)];
}

void sub_1000A9F7C(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) utunController]);
  int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
  objc_msgSend( v4,  "onTransportThread_manageDesignatedDestinationsWithSessionID:destinations:withType:sessionStateCounter:",  v3,  *(void *)(a1 + 40),  *(unsigned __int16 *)(a1 + 48),  *(unsigned int *)(*(void *)(a1 + 32) + 628));
}

void sub_1000AA208(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) utunController]);
  int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
  objc_msgSend( v4,  "onTransportThread_removeParticipantIDsWithSessionID:participantIDs:sessionStateCounter:",  v3,  *(void *)(a1 + 40),  *(unsigned int *)(*(void *)(a1 + 32) + 628));
}

void sub_1000AA3D8(uint64_t a1)
{
  id v19 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) groupStatusNotificationController]);
  char v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  id v17 = (void *)objc_claimAutoreleasedReturnValue([v18 destinations]);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v17 allObjects]);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  int v2 = (void *)objc_claimAutoreleasedReturnValue([v16 groupID]);
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v13 = v3[23];
  uint64_t v14 = *(void *)(a1 + 48);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 accountController]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  dispatch_block_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 accountID]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 accountWithUniqueID:v6]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  char v9 = (void *)objc_claimAutoreleasedReturnValue([v8 fromURI]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 uniqueID]);
  LOBYTE(v12) = [*(id *)(a1 + 32) shouldReportUPlusOneKey];
  [v19 updateParticipantDataToMembers:v15 toGroup:v2 withContext:v14 params:v13 fromAccount:v7 fromURI:v9 sessionID:v11 isUPlusOne:v12];
}

void sub_1000AACAC(uint64_t a1)
{
  id v10 = (id)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
  int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 destinationsLightweightStatus]);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 40);
  dispatch_block_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 groupID]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  char v9 = (void *)objc_claimAutoreleasedReturnValue([v8 uniqueID]);
  [v10 updateLightweightMemberTypes:v3 members:v5 triggeredLocally:v4 forGroup:v7 sessionID:v9];
}

void sub_1000AAD8C(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 destinationsLightweightStatus]);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 50);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 groupID]);
  char v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 uniqueID]);
  [v2 updateLightweightMemberTypes:v4 members:v6 triggeredLocally:v5 forGroup:v8 sessionID:v10];

  if (*(_WORD *)(a1 + 48) == 1)
  {
    id v15 = (id)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 groupID]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 uniqueID]);
    [v15 reliablyRequestKeyMaterialForGroup:v12 sessionID:v14];
  }

void sub_1000AAF10(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) utunController]);
  uint64_t v2 = *(unsigned __int16 *)(a1 + 40);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
  objc_msgSend( v5,  "onTransportThread_updateParticipantType:forSessionID:sessionStateCounter:",  v2,  v4,  *(unsigned int *)(*(void *)(a1 + 32) + 628));
}

void sub_1000AAF90(uint64_t a1)
{
  id v8 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v8, "setShouldBoost:", 1LL);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 pushTopic]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( [v2 broadcasterForTopic:v4 entitlement:kIDSSessionEntitlement command:0 messageContext:v8]);

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
  [v5 sessionDidReceiveParticipantUpgrade:v7 participantType:*(unsigned __int16 *)(a1 + 40) error:0];
}

void sub_1000AB0D0(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) utunController]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
  objc_msgSend(v4, "onTransportThread_sendConnectedLinkInfoToAVCForSessionID:", v3);
}

void sub_1000AD608(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    [v2 setReply:1];
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localObject]);
    id v5 = (id)objc_claimAutoreleasedReturnValue([v3 broadcasterForLocalObject:v4 messageContext:*(void *)(a1 + 32)]);

    [v5 emptyXPCReply];
  }

void sub_1000AD97C(_Unwind_Exception *a1)
{
}

void sub_1000AD9B8(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) utunController]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
  objc_msgSend(v4, "onTransportThread_receiveJoinNotificationFromAParticipant:", v3);
}

void sub_1000ADA20(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained reinitiate];
    id WeakRetained = v2;
  }
}

void sub_1000ADDD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = OSLogHandleForTransportCategory("IDSDSession");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v42 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "disconnectGlobalLink during leaving group session failed: %@",  buf,  0xCu);
    }

    uint64_t v7 = os_log_shim_legacy_logging_enabled(v6);
    if ((_DWORD)v7)
    {
      if (_IDSShouldLogTransport(v7))
      {
        id v39 = v3;
        _IDSLogTransport( @"IDSDSession",  @"IDS",  @"disconnectGlobalLink during leaving group session failed: %@");
        if (_IDSShouldLog(0LL, @"IDSDSession"))
        {
          id v39 = v3;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"disconnectGlobalLink during leaving group session failed: %@");
        }
      }
    }
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "utunController", v39));
  char v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 uniqueID]);
  [v8 stopGlobalLinkForDevice:v10];

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  [v11 setState:7];

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 groupID]);

  if (v13)
  {
    uint64_t v16 = im_primary_queue(v14, v15);
    id v17 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000AE288;
    block[3] = &unk_1008F6010;
    void block[4] = *(void *)(a1 + 32);
    dispatch_block_t v18 = dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT,  QOS_CLASS_USER_INITIATED,  0,  block);
    dispatch_async(v17, v18);
  }

  else
  {
    uint64_t v19 = OSLogHandleForTransportCategory("IDSDSession");
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Cannot fan out the leave notification to the group, no groupID!",  buf,  2u);
    }

    uint64_t v22 = os_log_shim_legacy_logging_enabled(v21);
    if ((_DWORD)v22)
    {
      if (_IDSShouldLogTransport(v22))
      {
        _IDSLogTransport( @"IDSDSession",  @"IDS",  @"Cannot fan out the leave notification to the group, no groupID!");
        if (_IDSShouldLog(0LL, @"IDSDSession")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Cannot fan out the leave notification to the group, no groupID!");
        }
      }
    }
  }

  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 groupID]);
  [v23 removeLocalActiveParticipantForGroup:v25];

  id v26 = *(_DWORD **)(a1 + 32);
  if (v26[44] <= 1u)
  {
    id v27 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
    -[IMMessageContext setShouldBoost:](v27, "setShouldBoost:", 1LL);
    char v28 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
    id v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v29 pushTopic]);
    __int16 v31 = (void *)objc_claimAutoreleasedReturnValue( [v28 broadcasterForTopic:v30 entitlement:kIDSSessionEntitlement command:0 messageContext:v27]);

    int v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      id v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
      id v34 = (void *)objc_claimAutoreleasedReturnValue([v33 uniqueID]);
      *(_DWORD *)buf = 138412290;
      id v42 = v34;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Broadcasting did leave group session: %@",  buf,  0xCu);
    }

    uint64_t v36 = *(void **)(a1 + 32);
    id v35 = (id *)(a1 + 32);
    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v36 sharedState]);
    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v37 uniqueID]);
    [v31 sessionDidLeaveGroup:v38 error:v3];

    [*v35 _reportRTC];
    id v26 = *v35;
  }

  v26[44] = 2;
}

void sub_1000AE288(uint64_t a1)
{
  id v18 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) groupStatusNotificationController]);
  id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v17 groupID]);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v16 destinations]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v15 allObjects]);
  id v3 = *(void **)(a1 + 32);
  uint64_t v13 = v3[23];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 accountController]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 accountID]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 accountWithUniqueID:v6]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  char v9 = (void *)objc_claimAutoreleasedReturnValue([v8 fromURI]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 uniqueID]);
  LOBYTE(v12) = [*(id *)(a1 + 32) shouldReportUPlusOneKey];
  [v18 notifyLeaveToGroup:v14 members:v2 params:v13 fromAccount:v7 fromURI:v9 sessionID:v11 isUPlusOne:v12];
}

void sub_1000AE410(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 groupID]);
  [v4 reportPrekeyAckStatus:v3];
}

void sub_1000AEA30(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1000AE5A8LL);
  }

  _Unwind_Resume(a1);
}

void sub_1000AEA64(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForTransportCategory("IDSDSession");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = [v3 idsResponseCode];
    id v8 = (id)objc_claimAutoreleasedReturnValue([v3 responseError]);
    unsigned int v9 = [v3 lastCall];
    id v10 = @"NO";
    *(_DWORD *)buf = 138413058;
    uint64_t v20 = v6;
    __int16 v21 = 2048;
    if (v9) {
      id v10 = @"YES";
    }
    id v22 = v7;
    __int16 v23 = 2112;
    id v24 = v8;
    __int16 v25 = 2112;
    id v26 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Message %@ got response code %lu error %@ lastCall %@",  buf,  0x2Au);
  }

  uint64_t v12 = os_log_shim_legacy_logging_enabled(v11);
  if ((_DWORD)v12 && _IDSShouldLogTransport(v12))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    id v14 = [v3 idsResponseCode];
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
    else {
      uint64_t v16 = @"NO";
    }
    id v18 = v16;
    _IDSLogTransport(@"IDSDSession", @"IDS", @"Message %@ got response code %lu error %@ lastCall %@");

    if (_IDSShouldLog(0LL, @"IDSDSession"))
    {
      objc_msgSend(v3, "idsResponseCode", v13, v14, v15, v18);
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
      [v3 lastCall];
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Message %@ got response code %lu error %@ lastCall %@");
    }
  }
}

void sub_1000AED60(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) utunController]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 groupID]);
  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) destinationURIs]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1000AEE68;
  v9[3] = &unk_1008F9010;
  id v10 = *(id *)(a1 + 56);
  objc_msgSend( v2,  "onTransportThread_SendKeyMaterialMessage:relayGroupID:keyMaterialMessageData:destinationURIs:completionHandler:",  v4,  v6,  v7,  v8,  v9);
}

void sub_1000AEE68(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int v2 = a2;
    uint64_t v3 = OSLogHandleForTransportCategory("IDSDSession");
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v15 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "sendKeyMaterialData failed with error: %d",  buf,  8u);
    }

    uint64_t v6 = os_log_shim_legacy_logging_enabled(v5);
    if ((_DWORD)v6 && _IDSShouldLogTransport(v6))
    {
      _IDSLogTransport(@"IDSDSession", @"IDS", @"sendKeyMaterialData failed with error: %d");
    }
  }

  else if (*(void *)(a1 + 32))
  {
    uint64_t v8 = im_primary_queue(a1, 0LL);
    unsigned int v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000AF02C;
    block[3] = &unk_1008F8FE8;
    id v12 = *(id *)(a1 + 32);
    uint64_t v13 = 0LL;
    dispatch_block_t v10 = dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT,  QOS_CLASS_USER_INITIATED,  0,  block);
    dispatch_async(v9, v10);
  }

uint64_t sub_1000AF02C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(a1 + 40));
}

void sub_1000AF85C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) utunController]);
  objc_msgSend( v2,  "onTransportThread_setServerDesiredMaterialsForSession:materials:signer:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56));
}

id sub_1000AFBCC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) link:*(void *)(a1 + 32) didReceiveEncryptionInformation:*(void *)(a1 + 40)];
}

void sub_1000AFE9C(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v2, "setShouldBoost:", 1LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 pushTopic]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( [v3 broadcasterForTopic:v5 entitlement:kIDSSessionEntitlement command:0 messageContext:v2]);

  uint64_t v8 = a1 + 56;
  int v7 = *(_DWORD *)(a1 + 56);
  if (v7 == 6)
  {
    uint64_t v16 = *(void **)(*(void *)(a1 + 32) + 896LL);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) participantPushToken]);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v16 joinCycleForToken:v17]);
    [v18 decryptedBlobOverQUIC:@"mirage-blob"];

    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 uniqueID]);
    uint64_t v19 = *(void *)(a1 + 48);
    int v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dictionaryRepresentation]);
    [v6 session:v13 didReceiveData:v19 dataType:1 forParticipant:v15];
    goto LABEL_5;
  }

  if (v7 == 12)
  {
    unsigned int v9 = *(void **)(*(void *)(a1 + 32) + 896LL);
    dispatch_block_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) participantPushToken]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 joinCycleForToken:v10]);
    [v11 decryptedBlobOverQUIC:@"avc"];

    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 uniqueID]);
    uint64_t v14 = *(void *)(a1 + 48);
    int v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dictionaryRepresentation]);
    [v6 session:v13 didReceiveDataBlob:v14 forParticipant:v15];
LABEL_5:

    goto LABEL_9;
  }

  uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
    sub_100699194(v8, v20, v21, v22, v23, v24, v25, v26);
  }

LABEL_9:
}

void sub_1000B017C(uint64_t a1)
{
  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v8, "setShouldBoost:", 1LL);
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 pushTopic]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( [v2 broadcasterForTopic:v4 entitlement:kIDSSessionEntitlement command:0 messageContext:v8]);

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
  objc_msgSend( v5,  "session:didReceiveJoinedParticipantID:withContext:",  v7,  objc_msgSend(*(id *)(a1 + 40), "unsignedLongLongValue"),  *(void *)(a1 + 48));
}

id sub_1000B080C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _decryptReceivedDataBlobsUsingSKMs];
}

void sub_1000B0D00(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "subdataWithRange:", (char *)objc_msgSend( v6,  "length") - 8, 8));
  if ([*(id *)(a1 + 32) intValue] == 7)
  {
    if ((unint64_t)[v7 length] <= 7)
    {
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_1006991FC();
      }
      goto LABEL_32;
    }

    [v7 bytes];
    unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "subdataWithRange:", 0, (char *)objc_msgSend(v6, "length") - 8));
    id v10 = [v9 copy];

    id v6 = v10;
  }

  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 824LL));
  uint64_t v11 = *(void **)(*(void *)(a1 + 40) + 656LL);
  id v28 = 0LL;
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 decryptData:v6 keyID:v5 sequenceNumber:0 error:&v28]);
  uint64_t v8 = (os_log_s *)v28;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 824LL));
  if (v8)
  {
    id v13 = -[os_log_s code](v8, "code");
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
    CFMutableDictionaryRef Mutable = v14;
    if (v13 == (id)1)
    {
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v30 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  Mutable,  OS_LOG_TYPE_DEFAULT,  "_decryptReceivedDataBlobsUsingSKMs: haven't got keyID: %@",  buf,  0xCu);
      }
    }

    else
    {
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        int v26 = *(_DWORD *)(a1 + 64);
        *(_DWORD *)buf = 138412802;
        id v30 = v6;
        __int16 v31 = 1024;
        *(_DWORD *)int v32 = v26;
        *(_WORD *)&v32[4] = 2112;
        *(void *)&v32[6] = v8;
        _os_log_error_impl( (void *)&_mh_execute_header,  Mutable,  OS_LOG_TYPE_ERROR,  "_decryptReceivedDataBlobsUsingSKMs: couldn't decrypt data blob: %@, encryptedDataType: %d error: %@",  buf,  0x1Cu);
      }

      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      -[os_log_s setObject:forKeyedSubscript:]( Mutable,  "setObject:forKeyedSubscript:",  &off_100946B58,  IDSDSessionReportTransportTypeKey);
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  -[os_log_s code](v8, "code")));
      -[os_log_s setObject:forKeyedSubscript:]( Mutable,  "setObject:forKeyedSubscript:",  v22,  IDSDSessionReportResultCodeKey);

      -[os_log_s setObject:forKeyedSubscript:]( Mutable,  "setObject:forKeyedSubscript:",  *(void *)(a1 + 32),  IDSDSessionReportDataBlobTypeKey);
      [*(id *)(a1 + 40) addQREventForRTCReport:Mutable];
    }
  }

  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 824LL));
    Value = 0LL;
    if (v5 && *(void *)(*(void *)(a1 + 40) + 696LL)) {
      Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1 + 40) + 696LL), v5);
    }
    CFMutableDictionaryRef Mutable = Value;
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = *(_DWORD *)(a1 + 64);
      *(_DWORD *)buf = 138413058;
      id v30 = v12;
      __int16 v31 = 2112;
      *(void *)int v32 = v5;
      *(_WORD *)&v32[8] = 2112;
      *(void *)&v32[10] = Mutable;
      __int16 v33 = 1024;
      int v34 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "_decryptReceivedDataBlobsUsingSKMs: decryptedBlob: %@, keyID: %@, participantID: %@, type: %d",  buf,  0x26u);
    }

    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 824LL));
    if (Mutable)
    {
      uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _getURIFromParticipantIDNumber:Mutable]);
      if (v19)
      {
        if ([*(id *)(a1 + 32) intValue] == 7)
        {
          uint64_t v20 = -[NSMutableData initWithData:](objc_alloc(&OBJC_CLASS___NSMutableData), "initWithData:", v7);
          -[NSMutableData appendData:](v20, "appendData:", v12);
          id v21 = -[NSMutableData copy](v20, "copy");

          id v12 = v21;
        }

        if (v12) {
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), Mutable, v12);
        }
        [*(id *)(a1 + 56) addObject:v5];
      }

      else
      {
        uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          id v27 = -[os_log_s unsignedLongLongValue](Mutable, "unsignedLongLongValue");
          uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
          uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 groupID]);
          *(_DWORD *)buf = 134218242;
          id v30 = v27;
          __int16 v31 = 2112;
          *(void *)int v32 = v25;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "_decryptReceivedDataBlobsUsingSKMs: no valid URI for participantID: %llu, group: %@, not consuming",  buf,  0x16u);
        }
      }
    }

    else
    {
      uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        sub_100699228();
      }
    }
  }

LABEL_32:
}

void sub_1000B120C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = (id *)(a1 + 32);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getPushTokenFromParticipantIDNumber:v5]);
  if (!v8)
  {
    unsigned int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [v5 unsignedLongLongValue];
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*v7 sharedState]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 groupID]);
      *(_DWORD *)buf = 134218242;
      id v35 = v10;
      __int16 v36 = 2112;
      id v37 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "warning: _decryptReceivedDataBlobsUsingSKMs: couldn't find push token for participantID: %llu, group: %@",  buf,  0x16u);
    }
  }

  id v13 = (void *)objc_claimAutoreleasedReturnValue([*v7 _getURIFromParticipantIDNumber:v5]);
  if (v13)
  {
    if ([*(id *)(a1 + 40) intValue] != 7)
    {
      int v15 = objc_alloc(&OBJC_CLASS___NSUUID);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*v7 sharedState]);
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 groupID]);
      uint64_t v14 = -[NSUUID initWithUUIDString:](v15, "initWithUUIDString:", v17);

      id v18 = objc_msgSend( [IDSGroupSessionActiveParticipant alloc],  "initWithGroupUUID:participantIdentifier:isKnown:participantURI:pushToken:",  v14,  objc_msgSend(v5, "unsignedLongLongValue"),  1,  v13,  v8);
      uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        int v20 = *(_DWORD *)(a1 + 48);
        *(_DWORD *)buf = 138413058;
        id v35 = v6;
        __int16 v36 = 2112;
        id v37 = v5;
        __int16 v38 = 2112;
        id v39 = v13;
        __int16 v40 = 1024;
        int v41 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "_decryptReceivedDataBlobsUsingSKMs: sending blob to client: %@, participantID: %@, URI: %@, type: %d",  buf,  0x26u);
      }

      id v21 = [*(id *)(a1 + 32) _sendClientDecryptedDatabBlobs:v6 type:*(unsigned int *)(a1 + 48) forParticipant:v18];
      uint64_t v23 = im_primary_queue(v21, v22);
      uint64_t v24 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v23);
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472LL;
      v30[2] = sub_1000B16A8;
      v30[3] = &unk_1008F60E8;
      int8x16_t v31 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
      id v32 = v5;
      id v6 = v6;
      id v33 = v6;
      dispatch_block_t v25 = dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT,  QOS_CLASS_USER_INTERACTIVE,  0,  v30);
      dispatch_async(v24, v25);

      goto LABEL_15;
    }

    if ((unint64_t)[v6 length] <= 7)
    {
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_1006991FC();
      }
      goto LABEL_16;
    }

    id v26 = v6;
    uint64_t v27 = *(void *)[v26 bytes];
    id v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "subdataWithRange:", 8, (char *)objc_msgSend( v26,  "length") - 8));

    if ((unint64_t)[v6 length] <= 7)
    {
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_100699350();
      }
      goto LABEL_16;
    }

    id v6 = v6;
    double v28 = *(double *)[v6 bytes];
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "subdataWithRange:", 8, (char *)objc_msgSend(v6, "length") - 8));
    if ([*v7 shouldReportToClient:v5 timeStamp:v27 type:v28])
    {
      if (v27 == 2)
      {
        [*v7 _sendRemoteParticipantInfoEventToClient:v14 forParticipant:v5];
        goto LABEL_16;
      }

      if (v27 == 1)
      {
        id v29 = *v7;
        id v18 = (id)objc_claimAutoreleasedReturnValue([*((id *)*v7 + 19) objectForKeyedSubscript:v5]);
        [v29 _sendRemoteParticipantInfoEventToClient:v18 forParticipant:v5];
LABEL_15:
      }
    }
  }

  else
  {
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_100699288(v5, (id *)(a1 + 32), v14);
    }
  }

id sub_1000B16A8(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) intValue];
  if ((_DWORD)result == 12)
  {
    [*(id *)(*(void *)(a1 + 40) + 152) setObject:*(void *)(a1 + 56) forKeyedSubscript:*(void *)(a1 + 48)];
    uint64_t v3 = *(id **)(a1 + 40);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3[20] objectForKeyedSubscript:*(void *)(a1 + 48)]);
    [v3 receiveAndDecryptEncryptedDataBlobs:v4];

    return [*(id *)(*(void *)(a1 + 40) + 160) setObject:0 forKeyedSubscript:*(void *)(a1 + 48)];
  }

  return result;
}

void sub_1000B1C34(uint64_t a1)
{
  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v8, "setShouldBoost:", 1LL);
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 pushTopic]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( [v2 broadcasterForTopic:v4 entitlement:kIDSSessionEntitlement command:0 messageContext:v8]);

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
  [v5 session:v7 rejectedKeyRecoveryRequestFromURI:*(void *)(a1 + 40) reason:*(unsigned int *)(a1 + 48)];
}

void sub_1000B2274(uint64_t a1)
{
  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v8, "setShouldBoost:", 1LL);
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 pushTopic]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( [v2 broadcasterForTopic:v4 entitlement:kIDSSessionEntitlement command:0 messageContext:v8]);

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
  [v5 session:v7 didReceiveKeyMaterial:*(void *)(a1 + 40)];
}

void sub_1000B2410(uint64_t a1)
{
  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v8, "setShouldBoost:", 1LL);
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 pushTopic]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( [v2 broadcasterForTopic:v4 entitlement:kIDSSessionEntitlement command:0 messageContext:v8]);

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
  [v5 session:v7 shouldInvalidateKeyMaterialByKeyIndexes:*(void *)(a1 + 40)];
}

uint64_t sub_1000B2610(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000B2940(_Unwind_Exception *a1)
{
}

void sub_1000B2964(uint64_t a1, uint64_t a2, void *a3)
{
  id v11 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v5 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
    -[IMMessageContext setShouldBoost:](v5, "setShouldBoost:", 1LL);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
    int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pushTopic]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( [v6 broadcasterForTopic:v7 entitlement:kIDSSessionEntitlement command:0 messageContext:v5]);

    unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained sharedState]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 uniqueID]);
    [v8 allocationDone:v10 sessionInfo:v11];
  }
}

void sub_1000B2C0C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 groupID]);
  id v5 = [v2 localParticipantIDForGroupID:v4];

  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v6 = *(id *)(a1 + 40);
  id v7 = [v6 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v21;
    do
    {
      for (i = 0LL; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v21 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)i);
        if (objc_msgSend(v11, "unsignedLongLongValue", (void)v20) != v5)
        {
          id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getPushTokenFromParticipantIDNumber:v11]);
          if (v12)
          {
            id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 896) joinCycleForToken:v12]);
            [v13 requestedKM];
          }
        }
      }

      id v8 = [v6 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }

    while (v8);
  }

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 groupID]);
  id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 uniqueID]);
  [v14 sendKeyMaterialsRecoveryRequestToParticipants:v15 groupID:v17 sessionID:v19 requireMKM:0 requireSKM:1];
}

void sub_1000B3110(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) utunController]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
  objc_msgSend( v4,  "onTransportThread_requestMaterialsForSession:participantIDs:materialType:",  v3,  *(void *)(a1 + 40),  *(unsigned int *)(a1 + 48));
}

void sub_1000B3204(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) utunController]);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 uniqueID]);
  id v7 = objc_msgSend(v2, "onTransportThread_createAliasForParticipantID:salt:sessionID:", v3, v4, v6);

  uint64_t v10 = im_primary_queue(v8, v9);
  id v11 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v10);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_1000B3310;
  v15[3] = &unk_1008F6D70;
  id v12 = *(void **)(a1 + 40);
  void v15[4] = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 48);
  id v17 = v7;
  uint64_t v18 = v13;
  id v16 = v12;
  dispatch_block_t v14 = dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT,  QOS_CLASS_USER_INTERACTIVE,  0,  v15);
  dispatch_async(v11, v14);
}

void sub_1000B3310(uint64_t a1)
{
  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v8, "setShouldBoost:", 1LL);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 pushTopic]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( [v2 broadcasterForTopic:v4 entitlement:kIDSSessionEntitlement command:0 messageContext:v8]);

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
  [v5 session:v7 didCreateParticipantIDAlias:*(void *)(a1 + 48) forParticipantID:*(void *)(a1 + 56) salt:*(void *)(a1 + 40)];
}

void sub_1000B347C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) utunController]);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 uniqueID]);
  id v7 = objc_msgSend(v2, "onTransportThread_participantIDForAlias:salt:sessionID:", v3, v4, v6);

  uint64_t v10 = im_primary_queue(v8, v9);
  id v11 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v10);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_1000B3588;
  v15[3] = &unk_1008F6D70;
  id v12 = *(void **)(a1 + 40);
  void v15[4] = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 48);
  id v17 = v7;
  uint64_t v18 = v13;
  id v16 = v12;
  dispatch_block_t v14 = dispatch_block_create_with_qos_class( DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT,  QOS_CLASS_USER_INTERACTIVE,  0,  v15);
  dispatch_async(v11, v14);
}

void sub_1000B3588(uint64_t a1)
{
  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v8, "setShouldBoost:", 1LL);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 pushTopic]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( [v2 broadcasterForTopic:v4 entitlement:kIDSSessionEntitlement command:0 messageContext:v8]);

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
  [v5 session:v7 didReceiveParticipantID:*(void *)(a1 + 48) forParticipantIDAlias:*(void *)(a1 + 56) salt:*(void *)(a1 + 40)];
}

void sub_1000B372C(_Unwind_Exception *a1)
{
}

void sub_1000B3744(uint64_t a1)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) utunController]);
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 uniqueID]);
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = objc_msgSend( v6,  "onTransportThread_participantIDForAlias:salt:sessionID:",  v2,  v3,  v5);
}

void sub_1000B3AD0(uint64_t a1)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) utunController]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 groupID]);
  objc_msgSend( v6,  "onTransportThread_updateSessionParticipants:relayGroupID:relaySessionID:participants:",  v3,  v5,  *(void *)(a1 + 40),  *(void *)(a1 + 48));
}

void sub_1000B3B74(uint64_t a1)
{
  uint64_t v2 = OSLogHandleForTransportCategory("IDSDSession");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Sending the session info request to update the active participant list...",  buf,  2u);
  }

  uint64_t v5 = os_log_shim_legacy_logging_enabled(v4);
  if ((_DWORD)v5)
  {
    if (_IDSShouldLogTransport(v5))
    {
      _IDSLogTransport( @"IDSDSession",  @"IDS",  @"Sending the session info request to update the active participant list...");
      if (_IDSShouldLog(0LL, @"IDSDSession")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Sending the session info request to update the active participant list...");
      }
    }
  }

  id v6 = *(void **)(a1 + 32);
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  &off_100946978,  IDSGlobalLinkOptionSessionInfoRequestTypeKey,  0LL));
  [v6 requestSessionInfoWithOptions:v7];
}

void sub_1000B3F14(uint64_t a1)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) utunController]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 groupID]);
  objc_msgSend( v6,  "onTransportThread_updateSessionURIToParticipantIDs:relayGroupID:relaySessionID:sessionInfo:",  v3,  v5,  *(void *)(a1 + 40),  *(void *)(a1 + 48));
}

void sub_1000B4570(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v48 objects:v52 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v49;
    do
    {
      for (i = 0LL; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v49 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v48 + 1) + 8LL * (void)i);
        if ([v8 isKnown])
        {
          uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 participantURI]);
          [v2 addObject:v9];
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v48 objects:v52 count:16];
    }

    while (v5);
  }

  [*(id *)(*(void *)(a1 + 40) + 896) setActiveParticipantURIs:v2];
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 realTimeEncryptionPublicKeyData]);

  if (!v11)
  {
    unint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountController]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 accountID]);
    dispatch_block_t v14 = (void *)objc_claimAutoreleasedReturnValue([v43 accountWithUniqueID:v13]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 primaryRegistration]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 pushToken]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 serviceName]);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPushToken pushTokenWithData:withServiceLoggingHint:]( &OBJC_CLASS___IDSPushToken,  "pushTokenWithData:withServiceLoggingHint:",  v16,  v18));

    __int128 v20 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
    id v21 = [v20 createRealTimeEncryptionFullIdentityForDevice:v19 completionBlock:0];
  }

  __int128 v22 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
  uint64_t v23 = *(void *)(a1 + 32);
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
  dispatch_block_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 groupID]);
  id v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 uniqueID]);
  [v22 didUpdateParticipants:v23 ofType:0 forGroup:v25 sessionID:v27];

  double v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
  id v29 = (void *)objc_claimAutoreleasedReturnValue([v28 pushTopic]);

  id v30 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v30, "setShouldBoost:", 1LL);
  int8x16_t v31 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  id v32 = (void *)objc_claimAutoreleasedReturnValue( [v31 broadcasterForTopic:v29 entitlement:kIDSSessionEntitlement command:0 messageContext:v30]);

  id v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  int v34 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
  id v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
  __int16 v36 = (void *)objc_claimAutoreleasedReturnValue([v35 groupID]);
  id v37 = [v34 localParticipantIDForGroupID:v36];

  v44[0] = _NSConcreteStackBlock;
  v44[1] = 3221225472LL;
  void v44[2] = sub_1000B49B8;
  v44[3] = &unk_1008F9178;
  id v39 = *(void **)(a1 + 32);
  uint64_t v38 = *(void *)(a1 + 40);
  id v45 = v33;
  uint64_t v46 = v38;
  id v47 = v37;
  id v40 = v33;
  [v39 enumerateObjectsUsingBlock:v44];
  int v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
  id v42 = (void *)objc_claimAutoreleasedReturnValue([v41 uniqueID]);
  [v32 session:v42 didReceiveActiveParticipants:v40 success:1];
}

void sub_1000B49B8(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = *(void **)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v6 dictionaryRepresentation]);
  [v3 addObject:v4];

  if ([v6 participantIdentifier] != *(id *)(a1 + 48) && objc_msgSend(v6, "isKnown"))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v6 participantPushToken]);
    [*(id *)(*(void *)(a1 + 40) + 896) remoteDidBecomeActive:v5];
  }
}

void sub_1000B4B04(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 groupID]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
  [v2 didUpdateParticipants:v3 ofType:1 forGroup:v5 sessionID:v7];

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
  id v22 = (id)objc_claimAutoreleasedReturnValue([v8 pushTopic]);

  uint64_t v9 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v9, "setShouldBoost:", 1LL);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  id v11 = (void *)objc_claimAutoreleasedReturnValue( [v10 broadcasterForTopic:v22 entitlement:kIDSSessionEntitlement command:0 messageContext:v9]);

  id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
  dispatch_block_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 groupID]);
  id v16 = [v13 localParticipantIDForGroupID:v15];

  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  id v23[2] = sub_1000B4D24;
  v23[3] = &unk_1008F9178;
  uint64_t v18 = *(void **)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  id v24 = v12;
  uint64_t v25 = v17;
  id v26 = v16;
  id v19 = v12;
  [v18 enumerateObjectsUsingBlock:v23];
  __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
  id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 uniqueID]);
  [v11 session:v21 didReceiveActiveLightweightParticipants:v19 success:1];
}

void sub_1000B4D24(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v6 dictionaryRepresentation]);
  [v3 addObject:v4];

  if ([v6 participantIdentifier] != *(id *)(a1 + 48) && objc_msgSend(v6, "isKnown"))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v6 participantPushToken]);
    [*(id *)(*(void *)(a1 + 40) + 896) remoteDidBecomeActive:v5];
  }
}

BOOL sub_1000B5868(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  _IDSLinkPacketBufferRetain( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSDSession.m",  8143LL,  a2);
  unint64_t v6 = (unint64_t)objc_msgSend( *(id *)(a1 + 32),  "onTransportThread_SendToGlobalLinkWithSessionID:packetBuffer:",  *(void *)(a1 + 40),  a2);
  uint64_t v7 = OSLogHandleForTransportCategory("IDSDSession");
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    if (v6 > 0xF) {
      uint64_t v9 = "UnexpectedSendResult";
    }
    else {
      uint64_t v9 = (const char *)_IDSLinkSendResultStrings[v6];
    }
    *(_DWORD *)buf = 138412546;
    id v14 = v5;
    __int16 v15 = 2080;
    id v16 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "IDSDSession read handler called for %@ - result %s",  buf,  0x16u);
  }

  uint64_t v11 = os_log_shim_legacy_logging_enabled(v10);
  if ((_DWORD)v11)
  {
    if (_IDSShouldLogTransport(v11))
    {
      _IDSLogTransport(@"IDSDSession", @"IDS", @"IDSDSession read handler called for %@ - result %s");
      if (_IDSShouldLog(0LL, @"IDSDSession")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"IDSDSession read handler called for %@ - result %s");
      }
    }
  }

  return v6 == 0;
}

void sub_1000B6638(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = OSLogHandleForTransportCategory("IDSDSession");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v16 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "disconnectGlobalLink during reinitiate failed with error %@",  buf,  0xCu);
    }

    uint64_t v7 = os_log_shim_legacy_logging_enabled(v6);
    if ((_DWORD)v7)
    {
      if (_IDSShouldLogTransport(v7))
      {
        id v14 = v3;
        _IDSLogTransport( @"IDSDSession",  @"IDS",  @"disconnectGlobalLink during reinitiate failed with error %@");
        if (_IDSShouldLog(0LL, @"IDSDSession"))
        {
          id v14 = v3;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"disconnectGlobalLink during reinitiate failed with error %@");
        }
      }
    }
  }

  uint64_t v9 = *(void **)(a1 + 32);
  uint64_t v8 = (id *)(a1 + 32);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "utunController", v14));
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*v8 sharedState]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 uniqueID]);
  [v10 stopGlobalLinkForDevice:v12];

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*v8 messenger]);
  [v13 sendReinitiateMessageWithSubcommand:2];
}

void sub_1000B7788(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1000B7664LL);
  }

  _Unwind_Resume(a1);
}

void sub_1000B77EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = OSLogHandleForTransportCategory("IDSDSession");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v19 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "disconnectGlobalLink during reinitiate teardown failed with error %@",  buf,  0xCu);
    }

    uint64_t v7 = os_log_shim_legacy_logging_enabled(v6);
    if ((_DWORD)v7)
    {
      if (_IDSShouldLogTransport(v7))
      {
        id v17 = v3;
        _IDSLogTransport( @"IDSDSession",  @"IDS",  @"disconnectGlobalLink during reinitiate teardown failed with error %@");
        if (_IDSShouldLog(0LL, @"IDSDSession"))
        {
          id v17 = v3;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"disconnectGlobalLink during reinitiate teardown failed with error %@");
        }
      }
    }
  }

  uint64_t v9 = *(void **)(a1 + 32);
  uint64_t v8 = (id *)(a1 + 32);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "utunController", v17));
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*v8 sharedState]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 uniqueID]);
  [v10 stopGlobalLinkForDevice:v12];

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*v8 qrAllocator]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([*v8 sharedState]);
  __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 uniqueID]);
  [v13 clearResponseFromQRGroupID:v15];

  id v16 = (void *)objc_claimAutoreleasedReturnValue([*v8 messenger]);
  [v16 sendReinitiateMessageWithSubcommand:3];
}

void sub_1000B8754(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1000B8460LL);
  }

  _Unwind_Resume(a1);
}

id sub_1000B954C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 sharedState]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 serviceName]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithPrefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithPrefixedURI:withServiceLoggingHint:",  v3,  v5));

  return v6;
}

void sub_1000BA194(id a1)
{
  mach_timebase_info info = (mach_timebase_info)0xAAAAAAAAAAAAAAAALL;
  mach_timebase_info(&info);
  LODWORD(v2) = info.denom;
  LODWORD(v1) = info.numer;
  *(double *)&qword_1009BE938 = (double)v1 / (double)v2 / 1000000000.0;
}

void sub_1000BA1E0(id a1)
{
  unint64_t v1 = (void *)qword_1009BE940;
  qword_1009BE940 = (uint64_t)&off_100948778;

  id v2 = (id)objc_claimAutoreleasedReturnValue(+[IMLockdownManager sharedInstance](&OBJC_CLASS___IMLockdownManager, "sharedInstance"));
  byte_1009BE948 = [v2 isInternalInstall];
}

  ;
}

void sub_1000BA240( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_1000BA250( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

uint64_t sub_1000BAB18(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = malloc(424LL * a2);
    *(void *)(v3 + _Block_object_dispose((const void *)(v1 - 48), 8) = v4;
    if (v4)
    {
      *(_DWORD *)uint64_t v3 = 0;
      *(_DWORD *)(v3 + 4) = a2;
      return 1LL;
    }

    else
    {
      uint64_t v5 = OSLogHandleForIDSCategory("UGL");
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "IDSSockAddrPairTable_Init failed with memory allocation",  v9,  2u);
      }

      id result = os_log_shim_legacy_logging_enabled(v7);
      if ((_DWORD)result)
      {
        int v8 = _IDSShouldLog(0LL, @"UGL");
        id result = 0LL;
        if (v8)
        {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"UGL",  @"IDSSockAddrPairTable_Init failed with memory allocation");
          return 0LL;
        }
      }
    }
  }

  return result;
}

BOOL sub_1000BAC10(void *a1)
{
  if (a1)
  {
    uint64_t v2 = OSLogHandleForIDSCategory("UGL");
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "IDSSockAddrPairTable_Release", v7, 2u);
    }

    uint64_t v5 = (void *)a1[1];
    if (v5)
    {
      free(v5);
      a1[1] = 0LL;
    }

    *a1 = 0LL;
  }

  return a1 != 0LL;
}

uint64_t sub_1000BACF4( int *a1, int a2, unsigned __int8 *a3, unsigned __int8 *a4, uint64_t a5, const void *a6, int a7)
{
  uint64_t result = 0LL;
  if (!a1 || !a3 || !a4) {
    return result;
  }
  *(void *)&__int128 v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v49[6] = v15;
  v49[7] = v15;
  v49[4] = v15;
  void v49[5] = v15;
  v49[2] = v15;
  v49[3] = v15;
  v49[0] = v15;
  v49[1] = v15;
  v48[6] = v15;
  v48[7] = v15;
  void v48[4] = v15;
  void v48[5] = v15;
  v48[2] = v15;
  v48[3] = v15;
  v48[0] = v15;
  v48[1] = v15;
  SAToIPPortString(v49, 128LL, a3);
  SAToIPPortString(v48, 128LL, a4);
  if (*a1 < 1)
  {
    LODWORD(v16) = 0;
  }

  else
  {
    uint64_t v16 = 0LL;
    uint64_t v17 = 144LL;
    while (1)
    {
      uint64_t v18 = *((void *)a1 + 1);
      if (IsSameSA(v18 + v17 - 128, a3))
      {
      }

      ++v16;
      v17 += 424LL;
      if (v16 >= *a1) {
        goto LABEL_17;
      }
    }

    uint64_t v19 = OSLogHandleForTransportCategory("UGL");
    __int128 v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)id v42 = v49;
      *(_WORD *)&v42[8] = 2080;
      unint64_t v43 = v48;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[%s-%s] already exists.", buf, 0x16u);
    }

    uint64_t v22 = os_log_shim_legacy_logging_enabled(v21);
    if ((v22 & 1) != 0 && (_IDSShouldLogTransport(v22) & 1) != 0)
    {
      _IDSLogTransport(@"UGL", @"IDS", @"[%s-%s] already exists.");
      if ((_IDSShouldLog(0LL, @"UGL") & 1) != 0) {
        _IDSLogV(0LL, @"IDSFoundation", @"UGL", @"[%s-%s] already exists.");
      }
    }
  }

uint64_t sub_1000BB270(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 0LL;
  if (a1 && a2)
  {
    *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v31[6] = v6;
    v31[7] = v6;
    void v31[4] = v6;
    v31[5] = v6;
    v31[2] = v6;
    v31[3] = v6;
    v31[0] = v6;
    v31[1] = v6;
    v30[6] = v6;
    v30[7] = v6;
    void v30[4] = v6;
    v30[5] = v6;
    v30[2] = v6;
    v30[3] = v6;
    v30[0] = v6;
    v30[1] = v6;
    uint64_t v7 = *a1;
    if ((int)v7 < 1)
    {
      LODWORD(v_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
    }

    else
    {
      uint64_t v8 = 0LL;
      uint64_t v9 = *((void *)a1 + 1) + 272LL;
      while (*(void *)a2 != *(void *)v9 || *(_DWORD *)(a2 + 8) != (unint64_t)*(unsigned int *)(v9 + 8))
      {
        ++v8;
        v9 += 424LL;
        if (v7 == v8) {
          goto LABEL_13;
        }
      }
    }

    if ((_DWORD)v8 == (_DWORD)v7)
    {
LABEL_13:
      uint64_t v11 = (_OWORD *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a2, 12LL));
      uint64_t v12 = OSLogHandleForTransportCategory("UGL");
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        int v23 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "IDSSockAddrPairTable_UpdatePairState - found no match for transactionID %@",  buf,  0xCu);
      }

      uint64_t v15 = os_log_shim_legacy_logging_enabled(v14);
      if ((_DWORD)v15 && _IDSShouldLogTransport(v15))
      {
        _IDSLogTransport( @"UGL",  @"IDS",  @"IDSSockAddrPairTable_UpdatePairState - found no match for transactionID %@");
        if (_IDSShouldLog(0LL, @"UGL")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"UGL",  @"IDSSockAddrPairTable_UpdatePairState - found no match for transactionID %@");
        }
      }

      return 0LL;
    }

    else
    {
      SAToIPPortString(v31, 128LL, *((void *)a1 + 1) + 424LL * v8 + 16);
      unsigned int v16 = v8;
      SAToIPPortString(v30, 128LL, *((void *)a1 + 1) + 424LL * v8 + 144);
      uint64_t v17 = OSLogHandleForTransportCategory("UGL");
      uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = *(void *)(*((void *)a1 + 1) + 424LL * v16);
        *(_DWORD *)buf = 136315906;
        int v23 = v31;
        __int16 v24 = 2080;
        uint64_t v25 = v30;
        __int16 v26 = 2048;
        uint64_t v27 = v19;
        __int16 v28 = 2048;
        uint64_t v29 = a3;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "IDSSockAddrPairTable_UpdatePairState - update state for [%s-%s] (%ld->%ld)",  buf,  0x2Au);
      }

      uint64_t v21 = os_log_shim_legacy_logging_enabled(v20);
      if ((_DWORD)v21)
      {
        if (_IDSShouldLogTransport(v21))
        {
          _IDSLogTransport( @"UGL",  @"IDS",  @"IDSSockAddrPairTable_UpdatePairState - update state for [%s-%s] (%ld->%ld)");
          if (_IDSShouldLog(0LL, @"UGL")) {
            _IDSLogV( 0LL,  @"IDSFoundation",  @"UGL",  @"IDSSockAddrPairTable_UpdatePairState - update state for [%s-%s] (%ld->%ld)");
          }
        }
      }

      *(void *)(*((void *)a1 + 1) + 424LL * v16) = a3;
      return 1LL;
    }
  }

  return result;
}

void sub_1000BB5F0(uint64_t a1, void *a2, void *a3, __int16 a4)
{
  id v13 = a2;
  id v7 = a3;
  if (a1 && v13 && v7)
  {
    else {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a1 + 20));
    }
    int v9 = *(_DWORD *)a1;
    if (*(int *)a1 >= 1)
    {
      uint64_t v10 = 0LL;
      uint64_t v11 = 0LL;
      do
      {
        uint64_t v12 = (uint64_t *)(*(void *)(a1 + 8) + v10);
        if (*v12 <= 2)
        {
          sub_1000BB6DC((uint64_t)v12, v13, v7, 0LL, 0LL, a4, v8);
          int v9 = *(_DWORD *)a1;
        }

        ++v11;
        v10 += 424LL;
      }

      while (v11 < v9);
    }
  }
}

void sub_1000BB6DC(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, __int16 a6, void *a7)
{
  id v13 = a2;
  id v14 = a3;
  id v15 = a7;
  if (a1)
  {
    *(void *)&__int128 v16 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v59[6] = v16;
    v59[7] = v16;
    void v59[4] = v16;
    v59[5] = v16;
    v59[2] = v16;
    v59[3] = v16;
    v59[0] = v16;
    v59[1] = v16;
    v58[6] = v16;
    v58[7] = v16;
    v58[4] = v16;
    v58[5] = v16;
    v58[2] = v16;
    v58[3] = v16;
    v58[0] = v16;
    v58[1] = v16;
    uint64_t v17 = (void *)_IDSLinkPacketBufferCreate( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSSockAddrPairTable.m",  169LL);
    *((_DWORD *)v17 + 12) = *(_DWORD *)(a1 + 8);
    uint64_t v18 = a1 + 16;
    memcpy(v17 + 7, (const void *)(a1 + 16), *(unsigned __int8 *)(a1 + 16));
    uint64_t v19 = a1 + 144;
    memcpy(v17 + 23, (const void *)(a1 + 144), *(unsigned __int8 *)(a1 + 144));
    id v49 = [[IDSStunMessage alloc] initWithType:1];
    switch(*(void *)a1)
    {
      case 1LL:
        *(void *)a1 = 2LL;
        LOWORD(v45) = a6;
        [v49 stunRequestToBuffer:*v17 outputLength:v17 + 2 transactionID:0 reqCount:0 userName:a4 usernameLen:a5 sendTime:v45 keyData:v15 remainingLength:v17[1]];
        id v20 = objc_claimAutoreleasedReturnValue([v49 transactionID]);
        uint64_t v21 = [v20 bytes];

        uint64_t v22 = *(void *)v21;
        *(_DWORD *)(a1 + 280) = v21[2];
        *(void *)(a1 + 272) = v22;
        goto LABEL_8;
      case 2LL:
        LOWORD(v45) = a6;
        [v49 stunRequestToBuffer:*v17 outputLength:v17 + 2 transactionID:a1 + 272 reqCount:0 userName:a4 usernameLen:a5 sendTime:v45 keyData:v15 remainingLength:v17[1]];
        goto LABEL_8;
      case 3LL:
      case 4LL:
        if (a4 && (int)a5 > 0)
        {
          *(void *)a1 = 4LL;
          LOWORD(v45) = a6;
          [v49 stunRequestToBuffer:*v17 outputLength:v17 + 2 transactionID:a1 + 272 reqCount:*(unsigned int *)(a1 + 284) userName:a4 usernameLen:a5 sendTime:v45 keyData:v15 remainingLength:v17[1]];
LABEL_8:
          uint64_t v23 = OSLogHandleForTransportCategory("UGL");
          __int16 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v25 = SAToIPPortString(v59, 128LL, a1 + 16);
            int v26 = *((_DWORD *)v17 + 12);
            *(_DWORD *)buf = 138413058;
            __int128 v51 = (const char *)v49;
            __int16 v52 = 2080;
            uint64_t v53 = v25;
            __int16 v54 = 1024;
            int v55 = v26;
            __int16 v56 = 2080;
            uint64_t v57 = SAToIPPortString(v58, 128LL, v19);
            _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "send binding request %@ for [%s(%u)-%s].",  buf,  0x26u);
          }

          uint64_t v28 = os_log_shim_legacy_logging_enabled(v27);
          if ((_DWORD)v28)
          {
            if (_IDSShouldLogTransport(v28))
            {
              uint64_t v29 = SAToIPPortString(v59, 128LL, v18);
              uint64_t v47 = *((unsigned int *)v17 + 12);
              uint64_t v48 = SAToIPPortString(v58, 128LL, v19);
              id v45 = v49;
              uint64_t v46 = v29;
              _IDSLogTransport(@"UGL", @"IDS", @"send binding request %@ for [%s(%u)-%s].");
              if (_IDSShouldLog(0LL, @"UGL"))
              {
                uint64_t v30 = SAToIPPortString(v59, 128LL, v18);
                uint64_t v47 = *((unsigned int *)v17 + 12);
                uint64_t v48 = SAToIPPortString(v58, 128LL, v19);
                id v45 = v49;
                uint64_t v46 = v30;
                _IDSLogV(0LL, @"IDSFoundation", @"UGL", @"send binding request %@ for [%s(%u)-%s].");
              }
            }
          }

          unint64_t v31 = (unint64_t)objc_msgSend( v13,  "sendPacketBuffer:toDeviceUniqueID:cbuuid:",  v17,  0,  v14,  v45,  v46,  v47,  v48);
          if (v31)
          {
            uint64_t v32 = OSLogHandleForTransportCategory("UGL");
            uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            {
              if (v31 > 0xF) {
                int v34 = "UnexpectedSendResult";
              }
              else {
                int v34 = (const char *)_IDSLinkSendResultStrings[v31];
              }
              *(_DWORD *)buf = 136315138;
              __int128 v51 = v34;
              _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "failed to send binding request with error (%s)",  buf,  0xCu);
            }

            uint64_t v44 = os_log_shim_legacy_logging_enabled(v43);
            if ((_DWORD)v44)
            {
              if (_IDSShouldLogTransport(v44))
              {
                _IDSLogTransport(@"UGL", @"IDS", @"failed to send binding request with error (%s)");
                if (_IDSShouldLog(0LL, @"UGL")) {
                  _IDSLogV( 0LL,  @"IDSFoundation",  @"UGL",  @"failed to send binding request with error (%s)");
                }
              }
            }
          }
        }

        else
        {
          uint64_t v39 = OSLogHandleForTransportCategory("UGL");
          uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "skip regular binding request", buf, 2u);
          }

          uint64_t v42 = os_log_shim_legacy_logging_enabled(v41);
          if ((_DWORD)v42)
          {
            if (_IDSShouldLogTransport(v42))
            {
              _IDSLogTransport(@"UGL", @"IDS", @"skip regular binding request");
            }
          }
        }

LABEL_36:
        break;
      case 5LL:
        uint64_t v35 = OSLogHandleForTransportCategory("UGL");
        uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "skip nominate binding request", buf, 2u);
        }

        uint64_t v38 = os_log_shim_legacy_logging_enabled(v37);
        if ((_DWORD)v38)
        {
          if (_IDSShouldLogTransport(v38))
          {
            _IDSLogTransport(@"UGL", @"IDS", @"skip nominate binding request");
          }
        }

        goto LABEL_36;
      default:
        goto LABEL_8;
    }
  }
}
  }
}

        break;
      }
    }
  }
}
}
}

        sub_1003F6050(v148, v147);
        return;
      }

      __break(1u);
LABEL_38:
      __break(1u);
      return;
    }

    uint64_t v118 = (os_log_s *)Logger.logObject.getter(EnumCaseMultiPayload);
    uint64_t v119 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v118, v119))
    {
      uint64_t v120 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v121 = (void **)swift_slowAlloc(32LL, -1LL);
      aBlock = v121;
      *(_DWORD *)uint64_t v120 = 136315138;
      v218 = sub_1003FFBB0(0x2874656863746172LL, 0xEB00000000293A5FLL, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, v219, v120 + 4, v120 + 12);
      _os_log_impl((void *)&_mh_execute_header, v118, v119, "%s: rolling because we have no key", v120, 0xCu);
      swift_arrayDestroy(v121, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v121, -1LL, -1LL);
      swift_slowDealloc(v120, -1LL, -1LL);
    }

    sub_1003FA390(a1);
  }

    id v14 = (v19 - 1) & v19;
    id v15 = __clz(__rbit64(v19)) + (v16 << 6);
    goto LABEL_17;
  }

  __break(1u);
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

    id v15 = (v20 - 1) & v20;
    __int128 v16 = __clz(__rbit64(v20)) + (v17 << 6);
    goto LABEL_17;
  }

  __break(1u);
}

    sub_10041D3BC(v3);
    return;
  }

  __break(1u);
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

BOOL sub_1000BBD5C(unsigned int *a1)
{
  if (!a1) {
    return 1LL;
  }
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v3 = v1 - 1;
  do
  {
    BOOL result = *v2 > 2;
    BOOL v6 = v3-- != 0;
    if (*v2 < 3) {
      break;
    }
    v2 += 53;
  }

  while (v6);
  return result;
}

unint64_t sub_1000BBDA4(unint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(unsigned int *)result;
    if ((int)v1 < 1)
    {
      return 0LL;
    }

    else
    {
      uint64_t v2 = *(void **)(result + 8);
      uint64_t v3 = v1 - 1;
      do
      {
        BOOL result = *v2 == 5LL;
        BOOL v4 = *v2 == 5LL || v3-- == 0;
        v2 += 53;
      }

      while (!v4);
    }
  }

  return result;
}

unint64_t sub_1000BBDE4(unint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(unsigned int *)result;
    if ((int)v1 < 1)
    {
      return 0LL;
    }

    else
    {
      uint64_t v2 = *(void **)(result + 8);
      uint64_t v3 = v1 - 1;
      do
      {
        BOOL result = *v2 == 7LL;
        BOOL v4 = *v2 == 7LL || v3-- == 0;
        v2 += 53;
      }

      while (!v4);
    }
  }

  return result;
}

uint64_t sub_1000BBE24(uint64_t result, void *__s2, int a3, _DWORD *a4, void *a5, void *a6)
{
  if (result)
  {
    uint64_t v6 = *(unsigned int *)result;
    if ((int)v6 < 1)
    {
      return 0LL;
    }

    else
    {
      for (uint64_t i = *(void *)(result + 8); ; i += 424LL)
      {
        if (*(void *)i == 5LL)
        {
          int v13 = *(_DWORD *)(i + 416);
          if (v13 >= a3) {
            int v13 = a3;
          }
        }

        if (!--v6) {
          return 0LL;
        }
      }

      if (a4) {
        *a4 = *(_DWORD *)(i + 8);
      }
      memcpy(a5, (const void *)(i + 16), *(unsigned __int8 *)(i + 16));
      memcpy(a6, (const void *)(i + 144), *(unsigned __int8 *)(i + 144));
      return 1LL;
    }
  }

  return result;
}

void sub_1000BBEEC(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, __int16 a6)
{
  id v11 = a2;
  id v12 = a3;
  int v13 = v12;
  if (a1 && v11 && v12)
  {
    *(void *)&__int128 v14 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v49[6] = v14;
    v49[7] = v14;
    v49[4] = v14;
    void v49[5] = v14;
    v49[2] = v14;
    v49[3] = v14;
    v49[0] = v14;
    v49[1] = v14;
    v48[6] = v14;
    v48[7] = v14;
    void v48[4] = v14;
    void v48[5] = v14;
    v48[2] = v14;
    v48[3] = v14;
    v48[0] = v14;
    v48[1] = v14;
    else {
      uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a1 + 20));
    }
    unsigned int v15 = *(_DWORD *)a1;
    if (*(int *)a1 >= 1)
    {
      uint64_t v16 = 0LL;
      while (1)
      {
        uint64_t v17 = *(void *)(*(void *)(a1 + 8) + v16);
        if (v17 == 4)
        {
          uint64_t v20 = OSLogHandleForTransportCategory("UGL");
          uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v22 = SAToIPPortString(v49, 128LL, *(void *)(a1 + 8) + v16 + 16);
            uint64_t v23 = *(void *)(a1 + 8) + v16;
            int v24 = *(_DWORD *)(v23 + 8);
            *(_DWORD *)buf = 136315650;
            uint64_t v43 = v22;
            __int16 v44 = 1024;
            int v45 = v24;
            __int16 v46 = 2080;
            uint64_t v47 = SAToIPPortString(v48, 128LL, v23 + 144);
            _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Nominate connection [%s(%u)-%s].",  buf,  0x1Cu);
          }

          uint64_t v26 = os_log_shim_legacy_logging_enabled(v25);
          if ((_DWORD)v26)
          {
            if (_IDSShouldLogTransport(v26))
            {
              SAToIPPortString(v49, 128LL, *(void *)(a1 + 8) + v16 + 16);
              SAToIPPortString(v48, 128LL, *(void *)(a1 + 8) + v16 + 144);
              _IDSLogTransport(@"UGL", @"IDS", @"Nominate connection [%s(%u)-%s].");
              if (_IDSShouldLog(0LL, @"UGL"))
              {
                SAToIPPortString(v49, 128LL, *(void *)(a1 + 8) + v16 + 16);
                SAToIPPortString(v48, 128LL, *(void *)(a1 + 8) + v16 + 144);
                _IDSLogV(0LL, @"IDSFoundation", @"UGL", @"Nominate connection [%s(%u)-%s].");
              }
            }
          }

void sub_1000BC5A8(int *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, __int16 a6)
{
  id v11 = a2;
  id v12 = a3;
  int v13 = v12;
  if (a1 && v11 && v12)
  {
    *(void *)&__int128 v14 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v71[6] = v14;
    v71[7] = v14;
    v71[4] = v14;
    v71[5] = v14;
    v71[2] = v14;
    v71[3] = v14;
    v71[0] = v14;
    v71[1] = v14;
    v70[6] = v14;
    v70[7] = v14;
    v70[4] = v14;
    v70[5] = v14;
    v70[2] = v14;
    v70[3] = v14;
    v70[0] = v14;
    v70[1] = v14;
    if (a1[373] < 1) {
      unsigned int v15 = 0LL;
    }
    else {
      unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a1 + 5));
    }
    if (*a1 >= 1)
    {
      uint64_t v16 = 0LL;
      uint64_t v17 = 144LL;
      while (!IsSameSA(a4, *((void *)a1 + 1) + v17 - 128)
           || !IsSameSA(a5, *((void *)a1 + 1) + v17))
      {
        ++v16;
        v17 += 424LL;
        if (v16 >= *a1) {
          goto LABEL_46;
        }
      }

      uint64_t v18 = OSLogHandleForTransportCategory("UGL");
      uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        int v20 = a1[4];
        uint64_t v21 = SAToIPPortString(v71, 128LL, *((void *)a1 + 1) + v17 - 128);
        uint64_t v22 = *((void *)a1 + 1) + v17;
        int v23 = *(_DWORD *)(v22 - 136);
        uint64_t v24 = SAToIPPortString(v70, 128LL, v22);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v20;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = v21;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v23;
        *(_WORD *)&_BYTE buf[24] = 2080;
        *(void *)&buf[26] = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Start echo (%d) for [%s(%u)-%s].",  buf,  0x22u);
      }

      uint64_t v26 = os_log_shim_legacy_logging_enabled(v25);
      if ((_DWORD)v26)
      {
        if (_IDSShouldLogTransport(v26))
        {
          uint64_t v27 = a1[4];
          SAToIPPortString(v71, 128LL, *((void *)a1 + 1) + v17 - 128);
          uint64_t v63 = SAToIPPortString(v70, 128LL, *((void *)a1 + 1) + v17);
          uint64_t v59 = v27;
          _IDSLogTransport(@"UGL", @"IDS", @"Start echo (%d) for [%s(%u)-%s].");
          if (_IDSShouldLog(0LL, @"UGL"))
          {
            uint64_t v28 = a1[4];
            SAToIPPortString(v71, 128LL, *((void *)a1 + 1) + v17 - 128);
            uint64_t v63 = SAToIPPortString(v70, 128LL, *((void *)a1 + 1) + v17);
            uint64_t v59 = v28;
            _IDSLogV(0LL, @"IDSFoundation", @"UGL", @"Start echo (%d) for [%s(%u)-%s].");
          }
        }
      }

      uint64_t v29 = *((void *)a1 + 1);
      uint64_t v66 = a1[4];
      id v68 = v11;
      id v69 = v13;
      id v30 = v15;
      if (v29)
      {
        id v65 = v30;
        *(void *)&__int128 v31 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v31 + 1) = 0xAAAAAAAAAAAAAAAALL;
        __int128 v83 = v31;
        __int128 v84 = v31;
        __int128 v81 = v31;
        __int128 v82 = v31;
        *(_OWORD *)&_BYTE buf[32] = v31;
        __int128 v80 = v31;
        *(_OWORD *)buf = v31;
        *(_OWORD *)&uint8_t buf[16] = v31;
        v78[6] = v31;
        v78[7] = v31;
        v78[4] = v31;
        v78[5] = v31;
        v78[2] = v31;
        v78[3] = v31;
        v78[0] = v31;
        v78[1] = v31;
        uint64_t v32 = _IDSLinkPacketBufferCreate( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSSockAddrPairTable.m",  222LL);
        id v67 = [[IDSStunMessage alloc] initWithType:3811];
        uint64_t v33 = v29 + v17;
        uint64_t v34 = *(void *)(v29 + v17 - 144);
        if (v34 < 5 || v34 == 7)
        {
          uint64_t v52 = OSLogHandleForTransportCategory("SATbl");
          uint64_t v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
          if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v54 = *(void *)(v33 - 144);
            *(_DWORD *)uint64_t v72 = 67109120;
            *(_DWORD *)uint64_t v73 = v54;
            _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "cannot send echo request due to invalid state (%d).",  v72,  8u);
          }

          uint64_t v56 = os_log_shim_legacy_logging_enabled(v55);
          if ((_DWORD)v56)
          {
            if (_IDSShouldLogTransport(v56))
            {
              _IDSLogTransport( @"SATbl",  @"IDS",  @"cannot send echo request due to invalid state (%d).");
              if (_IDSShouldLog(0LL, @"SATbl")) {
                _IDSLogV( 0LL,  @"IDSFoundation",  @"SATbl",  @"cannot send echo request due to invalid state (%d).");
              }
            }
          }
        }

        else
        {
          *(void *)(v33 - 144) = 6LL;
          LOWORD(v59) = a6;
          uint64_t v64 = v29 + v17 + 128;
          objc_msgSend( v67,  "stunRequestToBuffer:outputLength:transactionID:reqCount:userName:usernameLen:sendTime:keyData:remainingLength:",  *(void *)v32,  v32 + 16,  v59,  v65,  *(void *)(v32 + 8));
          uint64_t v35 = OSLogHandleForTransportCategory("UGL");
          uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v37 = SAToIPPortString(buf, 128LL, v29 + v17 - 128);
            int v38 = *(_DWORD *)(v32 + 48);
            uint64_t v39 = SAToIPPortString(v78, 128LL, v29 + v17);
            *(_DWORD *)uint64_t v72 = 67109890;
            *(_DWORD *)uint64_t v73 = v66;
            *(_WORD *)&v73[4] = 2080;
            *(void *)&v73[6] = v37;
            __int16 v74 = 1024;
            int v75 = v38;
            __int16 v76 = 2080;
            uint64_t v77 = v39;
            _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "send echo request (count:%d) for %s(%u)-%s.",  v72,  0x22u);
          }

          uint64_t v41 = os_log_shim_legacy_logging_enabled(v40);
          if ((_DWORD)v41)
          {
            if (_IDSShouldLogTransport(v41))
            {
              uint64_t v42 = v29 + v17;
              uint64_t v43 = SAToIPPortString(buf, 128LL, v42 - 128);
              uint64_t v62 = *(unsigned int *)(v32 + 48);
              uint64_t v63 = SAToIPPortString(v78, 128LL, v42);
              uint64_t v60 = v66;
              uint64_t v61 = v43;
              _IDSLogTransport(@"UGL", @"IDS", @"send echo request (count:%d) for %s(%u)-%s.");
              if (_IDSShouldLog(0LL, @"UGL"))
              {
                uint64_t v44 = SAToIPPortString(buf, 128LL, v42 - 128);
                uint64_t v62 = *(unsigned int *)(v32 + 48);
                uint64_t v63 = SAToIPPortString(v78, 128LL, v42);
                uint64_t v60 = v66;
                uint64_t v61 = v44;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"UGL",  @"send echo request (count:%d) for %s(%u)-%s.");
              }
            }
          }

          id v45 = objc_claimAutoreleasedReturnValue(objc_msgSend(v67, "transactionID", v60, v61, v62, v63));
          __int16 v46 = [v45 bytes];

          uint64_t v47 = *(void *)v46;
          *(_DWORD *)(v64 + _Block_object_dispose((const void *)(v1 - 48), 8) = v46[2];
          *(void *)uint64_t v64 = v47;
          unint64_t v48 = (unint64_t)[v68 sendPacketBuffer:v32 toDeviceUniqueID:0 cbuuid:v69];
          if (v48)
          {
            uint64_t v49 = OSLogHandleForTransportCategory("UGL");
            __int128 v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
            if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
            {
              if (v48 > 0xF) {
                __int128 v51 = "UnexpectedSendResult";
              }
              else {
                __int128 v51 = (const char *)_IDSLinkSendResultStrings[v48];
              }
              *(_DWORD *)uint64_t v72 = 136315138;
              *(void *)uint64_t v73 = v51;
              _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "failed to send echo request with error (%s)",  v72,  0xCu);
            }

            uint64_t v58 = os_log_shim_legacy_logging_enabled(v57);
            if ((_DWORD)v58)
            {
              if (_IDSShouldLogTransport(v58))
              {
                _IDSLogTransport(@"UGL", @"IDS", @"failed to send echo request with error (%s)");
                if (_IDSShouldLog(0LL, @"UGL")) {
                  _IDSLogV( 0LL,  @"IDSFoundation",  @"UGL",  @"failed to send echo request with error (%s)");
                }
              }
            }
          }
        }

        id v30 = v65;
      }
    }

LABEL_46:
  }
}

LABEL_47:
LABEL_48:

LABEL_49:
    goto LABEL_50;
  }

  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v31 = (IDSMultiplexerGroupConnection *)objc_claimAutoreleasedReturnValue([v4 clientUUID]);
    *(_DWORD *)buf = 138412290;
    uint64_t v79 = v31;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "no nw_path for client %@", buf, 0xCu);
  }

  LOBYTE(self) = 0;
LABEL_50:

  return (char)self;
}

    int v38 = v84;
    goto LABEL_47;
  }

  LODWORD(v34) = self->_prekeyExpireDuration;
  uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue( -[IDSGroupEncryptionController1 dateByAddingTimeInterval:]( v20,  "dateByAddingTimeInterval:",  (double)v34));
  -[os_log_s setExpirationDate:](v28, "setExpirationDate:", v35);

  -[os_log_s setPublicIdentityData:](v28, "setPublicIdentityData:", v15);
  os_unfair_lock_unlock(&self->_lock);
  uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    publicKeyForDevice = self->_publicKeyForDevice;
    *(_DWORD *)buf = 138477827;
    uint64_t v98 = (IDSGroupEncryptionController1 *)publicKeyForDevice;
    _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "setRealTimeEncryptionPublicKey: (TEST) done: %{private}@",  buf,  0xCu);
  }

  int v38 = v84;
  -[IDSGroupEncryptionController1 updateServerDesiredKeyMaterialsForGroup:sessionID:]( self,  "updateServerDesiredKeyMaterialsForGroup:sessionID:",  v18,  v84);
  -[IDSGroupEncryptionController1 notifyPreKeyChange](self, "notifyPreKeyChange");
  uint64_t v32 = 1;
LABEL_47:

  return v32;
}

          goto LABEL_47;
        }

        uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
        if (os_log_type_enabled(v40, OS_LOG_TYPE_FAULT)) {
          sub_1006A003C();
        }
      }
    }

    uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138413058;
      uint64_t v72 = v21;
      uint64_t v73 = 2112;
      __int16 v74 = v16;
      int v75 = 2112;
      __int16 v76 = v32;
      uint64_t v77 = 1024;
      uint64_t v78 = v64;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "Creating new account with service %@ uniqueID %@ login ID %@ accountType %d",  buf,  0x26u);
    }

    uint64_t v24 = -[IDSDAccount initWithLoginID:service:uniqueID:accountType:accountConfig:]( objc_alloc(&OBJC_CLASS___IDSDAccount),  "initWithLoginID:service:uniqueID:accountType:accountConfig:",  v32,  v21,  v16,  v64,  v65);
    uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
    [v42 addAccount:v24];

    uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[os_log_s linkedAccounts](v24, "linkedAccounts"));
    if (!-[os_log_s count](v39, "count"))
    {
      uint64_t v59 = v39;
      uint64_t v61 = v21;
      uint64_t v62 = v17;
      uint64_t v63 = v15;
      uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance"));
      uint64_t v60 = v24;
      uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s service](v24, "service"));
      id v45 = (void *)objc_claimAutoreleasedReturnValue([v43 linkedServicesForService:v44]);

      id v68 = 0u;
      id v69 = 0u;
      uint64_t v66 = 0u;
      id v67 = 0u;
      __int16 v46 = v45;
      uint64_t v47 = [v46 countByEnumeratingWithState:&v66 objects:v70 count:16];
      if (v47)
      {
        unint64_t v48 = v47;
        uint64_t v49 = *(void *)v67;
        do
        {
          for (uint64_t i = 0LL; i != v48; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v67 != v49) {
              objc_enumerationMutation(v46);
            }
            __int128 v51 = *(void **)(*((void *)&v66 + 1) + 8LL * (void)i);
            if ([v51 disabledOnTinkerWatch])
            {
              uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
              uint64_t v53 = [v52 isCurrentDeviceTinkerConfiguredWatch];

              if ((v53 & 1) != 0) {
                continue;
              }
            }

            uint64_t v54 = objc_alloc(&OBJC_CLASS___IDSDAccount);
            uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringGUID](&OBJC_CLASS___NSString, "stringGUID"));
            uint64_t v56 = -[IDSDAccount initWithLoginID:service:uniqueID:accountType:accountConfig:]( v54,  "initWithLoginID:service:uniqueID:accountType:accountConfig:",  v32,  v51,  v55,  v64,  v65);

            uint64_t v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
            if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              uint64_t v72 = (os_log_s *)v56;
              _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "  Creating a linked account: %@",  buf,  0xCu);
            }

            uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDAccountController sharedInstance]( &OBJC_CLASS___IDSDAccountController,  "sharedInstance"));
            [v58 addAccount:v56];
          }

          unint64_t v48 = [v46 countByEnumeratingWithState:&v66 objects:v70 count:16];
        }

        while (v48);
      }

      unsigned int v15 = v63;
      uint64_t v21 = v61;
      uint64_t v17 = v62;
      uint64_t v39 = v59;
      uint64_t v24 = v60;
    }

    goto LABEL_46;
  }

      uint64_t v28 = self->_wifiManager;
      if (v28)
      {
        CFRelease(v28);
        self->_wifiManager = 0LL;
      }

      goto LABEL_48;
    }

    uint64_t v10 = OSLogHandleForTransportCategory("AutoJoin");
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "WiFiManagerClientCreate failed!", v29, 2u);
    }

    int v13 = os_log_shim_legacy_logging_enabled(v12);
    if ((_DWORD)v13)
    {
      if (_IDSShouldLogTransport(v13))
      {
        _IDSLogTransport(@"AutoJoin", @"IDS", @"WiFiManagerClientCreate failed!");
      }
    }
  }

    uint64_t v43 = [v10 copyCurrentNetworkInterfaces];
    uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v43 firstObject]);
    id v45 = (IDSSockAddrWrapper *)objc_claimAutoreleasedReturnValue([v44 address]);
    localWiFiAddressUsedForDefaultDevice = self->_localWiFiAddressUsedForDefaultDevice;
    self->_localWiFiAddressUsedForDefaultDevice = v45;

    uint64_t v47 = (void *)_IDSLinkPacketBufferCreate( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSLinkManager.m",  1127LL);
    if (v44)
    {
      unint64_t v48 = OSLogHandleForTransportCategory("LinkManager");
      uint64_t v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v50 = @"(prefer) ";
        if (!self->_doesDefaultDevicePreferInfraWiFi) {
          __int128 v50 = &stru_100912B50;
        }
        __int128 v51 = @"(reply) ";
        *(_DWORD *)buf = 138412802;
        id v87 = *(double *)&v50;
        id v88 = 2112;
        if (!v6) {
          __int128 v51 = &stru_100912B50;
        }
        uint64_t v89 = v51;
        uint64_t v90 = 2112;
        uint64_t v91 = v44;
        _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "transmitting UDPLink %@interface address %@%@",  buf,  0x20u);
      }

      uint64_t v53 = os_log_shim_legacy_logging_enabled(v52);
      if ((_DWORD)v53 && _IDSShouldLogTransport(v53))
      {
        uint64_t v54 = self->_doesDefaultDevicePreferInfraWiFi ? @"(prefer) " : &stru_100912B50;
        uint64_t v55 = v6 ? @"(reply) " : &stru_100912B50;
        __int128 v81 = v55;
        __int128 v82 = v44;
        __int128 v80 = *(double *)&v54;
        _IDSLogTransport(@"LinkManager", @"IDS", @"transmitting UDPLink %@interface address %@%@");
        if (_IDSShouldLog(0LL, @"LinkManager"))
        {
          if (self->_doesDefaultDevicePreferInfraWiFi) {
            uint64_t v56 = @"(prefer) ";
          }
          else {
            uint64_t v56 = &stru_100912B50;
          }
          __int128 v81 = v55;
          __int128 v82 = v44;
          __int128 v80 = *(double *)&v56;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"LinkManager",  @"transmitting UDPLink %@interface address %@%@");
        }
      }

      if (v6) {
        uint64_t v57 = 70;
      }
      else {
        uint64_t v57 = 69;
      }
      if (v6) {
        uint64_t v58 = 66;
      }
      else {
        uint64_t v58 = 64;
      }
      if (self->_doesDefaultDevicePreferInfraWiFi) {
        uint64_t v59 = v57;
      }
      else {
        uint64_t v59 = v58;
      }
      uint64_t v60 = (uint64_t)objc_msgSend(v44, "getTransmittableBytes:withPrefixByte:", *v47, v59, *(void *)&v80, v81, v82);
    }

    else
    {
      if (!self->_isDefaultDeviceUsingBTLink)
      {
        __int16 v76 = OSLogHandleForTransportCategory("LinkManager");
        uint64_t v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(v76);
        if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_DEFAULT,  "cannot send LinkDown when BT is not used - bail out",  buf,  2u);
        }

        uint64_t v79 = os_log_shim_legacy_logging_enabled(v78);
        if ((_DWORD)v79)
        {
          if (_IDSShouldLogTransport(v79))
          {
            _IDSLogTransport( @"LinkManager",  @"IDS",  @"cannot send LinkDown when BT is not used - bail out");
            if (_IDSShouldLog(0LL, @"LinkManager")) {
              _IDSLogV( 0LL,  @"IDSFoundation",  @"LinkManager",  @"cannot send LinkDown when BT is not used - bail out");
            }
          }
        }

        if (!v6) {
          self->_addressRetransmissionInterval = 0.0;
        }
        goto LABEL_101;
      }

      uint64_t v61 = OSLogHandleForTransportCategory("LinkManager");
      uint64_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v63 = &stru_100912B50;
        if (v6) {
          uint64_t v63 = @"(reply)";
        }
        *(_DWORD *)buf = 138412290;
        id v87 = *(double *)&v63;
        _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEFAULT,  "transmitting UDPLink interface down%@",  buf,  0xCu);
      }

      id v65 = os_log_shim_legacy_logging_enabled(v64);
      if ((_DWORD)v65 && _IDSShouldLogTransport(v65))
      {
        uint64_t v66 = v6 ? @"(reply)" : &stru_100912B50;
        __int128 v80 = *(double *)&v66;
        _IDSLogTransport(@"LinkManager", @"IDS", @"transmitting UDPLink interface down%@");
        if (_IDSShouldLog(0LL, @"LinkManager"))
        {
          __int128 v80 = *(double *)&v66;
          _IDSLogV(0LL, @"IDSFoundation", @"LinkManager", @"transmitting UDPLink interface down%@");
        }
      }

      if (v6) {
        id v67 = 67;
      }
      else {
        id v67 = 65;
      }
      *(_BYTE *)void *v47 = v67;
      uint64_t v60 = 1LL;
    }

    v47[2] = v60;
    id v68 = -[IDSLinkManager sendPacketBuffer:toDeviceUniqueID:cbuuid:]( self,  "sendPacketBuffer:toDeviceUniqueID:cbuuid:",  v47,  0LL,  v12,  *(void *)&v80);
    if (v68 == 13 || v68 == 1)
    {
      id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
      [WeakRetained link:self hasSpaceAvailable:0 deviceUniqueID:0 cbuuid:v12];
    }

    if (v6)
    {
LABEL_101:

      goto LABEL_109;
    }

    addressRetransmissionInterval = self->_addressRetransmissionInterval;
    uint64_t v71 = 1.0;
    if (addressRetransmissionInterval != 0.0)
    {
      if (addressRetransmissionInterval >= 4.0)
      {
LABEL_100:
        v83[0] = _NSConcreteStackBlock;
        v83[1] = 3221225472LL;
        v83[2] = sub_10022A07C;
        v83[3] = &unk_1008F7900;
        v83[4] = self;
        __int128 v84 = v10;
        uint64_t v85 = v12;
        IDSTransportThreadAddBlockAfter(v83, self->_addressRetransmissionInterval);

        goto LABEL_101;
      }

      uint64_t v71 = addressRetransmissionInterval + addressRetransmissionInterval;
    }

    self->_addressRetransmissionInterval = v71;
    goto LABEL_100;
  }

  [v10 setLastDestinationSent:v19];
  if (self->_addressRetransmissionInterval <= 0.0) {
    goto LABEL_46;
  }
  int v38 = OSLogHandleForTransportCategory("LinkManager");
  uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v40 = self->_addressRetransmissionInterval;
    *(_DWORD *)buf = 134217984;
    id v87 = v40;
    _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "retransmission already scheduled with %.1fs - resetting it to 1s next time",  buf,  0xCu);
  }

  uint64_t v42 = os_log_shim_legacy_logging_enabled(v41);
  if ((_DWORD)v42)
  {
    if (_IDSShouldLogTransport(v42))
    {
      _IDSLogTransport( @"LinkManager",  @"IDS",  @"retransmission already scheduled with %.1fs - resetting it to 1s next time");
      if (_IDSShouldLog(0LL, @"LinkManager")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"LinkManager",  @"retransmission already scheduled with %.1fs - resetting it to 1s next time");
      }
    }
  }

  self->_addressRetransmissionInterval = 0.5;
LABEL_109:
}

  uint64_t v43 = OSLogHandleForIDSCategory("Warning");
  uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
  if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412802;
    uint64_t v62 = v8;
    uint64_t v63 = 1024;
    uint64_t v64 = v4;
    id v65 = 2048;
    uint64_t v66 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_ERROR,  "performOTRSessionBlock found no block for %@ (blockType:%u, Priority:%ld).",  buf,  0x1Cu);
  }

  if (os_log_shim_legacy_logging_enabled(v45))
  {
    _IDSWarnV( @"IDSFoundation",  @"performOTRSessionBlock found no block for %@ (blockType:%u, Priority:%ld).");
    _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"performOTRSessionBlock found no block for %@ (blockType:%u, Priority:%ld).");
    _IDSLogTransport( @"Warning",  @"IDS",  @"performOTRSessionBlock found no block for %@ (blockType:%u, Priority:%ld).");
  }

  uint64_t v37 = 0LL;
LABEL_51:
  pthread_mutex_unlock(p_lock);
}

  __break(1u);
LABEL_47:
  __break(1u);
}

char *sub_1000BCDA4(char *result, const void *a2, size_t __n)
{
  if (result && a2)
  {
    int v3 = __n;
    if ((__n - 1472) >= 0xFFFFFA41)
    {
      BOOL v4 = result;
      BOOL result = (char *)memcpy(result + 20, a2, __n);
      v4[373] = v3;
    }
  }

  return result;
}

uint64_t sub_1000BCDE8(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 16);
  }
  return result;
}

unsigned int *sub_1000BCDF4(unsigned int *result)
{
  if (result)
  {
    ++result[4];
    uint64_t v1 = *result;
    if ((int)v1 >= 1)
    {
      uint64_t v2 = (void *)*((void *)result + 1);
      do
      {
        if ((*v2 & 0xFFFFFFFFFFFFFFFELL) == 6) {
          *uint64_t v2 = 5LL;
        }
        v2 += 53;
        --v1;
      }

      while (v1);
    }
  }

  return result;
}

id sub_1000BD1C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___CUTUnsafePromiseSeal);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 commitBlock]);
  uint64_t v6 = v5;
  if (!v5) {
    uint64_t v5 = *(void **)(a1 + 32);
  }
  id v7 = objc_retainBlock(v5);

  id v8 = objc_alloc(&OBJC_CLASS___IDSMPDecryptionResult);
  int v9 = (void *)objc_claimAutoreleasedReturnValue([v3 decryptedData]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 encryptedAttributes]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v3 additionalDecryptionResult]);
  id v12 = [v8 initWithData:v9 encryptedAttributes:v10 withCommitState:v7 additionalDecryptionResult:v11];
  [v4 fulfillWithValue:v12];

  int v13 = (void *)objc_claimAutoreleasedReturnValue([v4 promise]);
  return v13;
}

id sub_1000BD42C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___CUTUnsafePromiseSeal);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 commitBlock]);
  uint64_t v6 = v5;
  if (!v5) {
    uint64_t v5 = *(void **)(a1 + 32);
  }
  id v7 = objc_retainBlock(v5);

  id v8 = objc_alloc(&OBJC_CLASS___IDSMPDecryptionResult);
  int v9 = (void *)objc_claimAutoreleasedReturnValue([v3 decryptedData]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 encryptedAttributes]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v3 additionalDecryptionResult]);
  id v12 = [v8 initWithData:v9 encryptedAttributes:v10 withCommitState:v7 additionalDecryptionResult:v11];
  [v4 fulfillWithValue:v12];

  int v13 = (void *)objc_claimAutoreleasedReturnValue([v4 promise]);
  return v13;
}

uint64_t IDSProtoKeyTransparencyTrustedDeviceMetadataReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0LL;
        int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v11 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      *(_BYTE *)(a1 + 20) |= 1u;
      unint64_t v19 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v19 <= 0xFFFFFFFFFFFFFFF7LL && v19 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
      {
        uint64_t v20 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19 + 8;
      }

      else
      {
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        uint64_t v20 = 0LL;
      }

      *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 48), 8) = v20;
    }

    else if ((v6 >> 3) == 1)
    {
      char v13 = 0;
      unsigned int v14 = 0;
      uint64_t v15 = 0LL;
      *(_BYTE *)(a1 + 20) |= 2u;
      while (1)
      {
        uint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v17 = v16 + 1;
        if (v16 == -1 || v17 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v18 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
        v15 |= (unint64_t)(v18 & 0x7F) << v13;
        if ((v18 & 0x80) == 0) {
          goto LABEL_32;
        }
        v13 += 7;
        BOOL v10 = v14++ >= 9;
        if (v10)
        {
          LODWORD(v15) = 0;
          goto LABEL_34;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_32:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v15) = 0;
      }
LABEL_34:
      *(_DWORD *)(a1 + 16) = v15;
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_1000BDE4C(uint64_t a1, void *a2)
{
  id v4 = a2;
  objc_storeStrong((id *)&qword_1009BE960, a2);
  unsigned int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "NLDEBUG: SWIZZLE CALLED!", v9, 2u);
  }

  uint64_t v6 = (*(uint64_t (**)(id, void))(a1 + 32))(v4, *(void *)(a1 + 40));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  return v7;
}

void sub_1000BE018(uint64_t a1, uint64_t a2)
{
  int v2 = a1;
  uint64_t v3 = im_primary_queue(a1, a2);
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v3);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000BE084;
  block[3] = &unk_1008F9268;
  int v6 = v2;
  dispatch_async(v4, block);
}

void sub_1000BE084(uint64_t a1)
{
  int v2 = (int *)(a1 + 32);
  int v1 = *(_DWORD *)(a1 + 32);
  if (v1 <= 14)
  {
    if (v1 != 1 && v1 != 3)
    {
      if (v1 == 13)
      {
        signal(2, (void (__cdecl *)(int))sub_1000BE018);
        return;
      }

      goto LABEL_28;
    }

void sub_1000BE440(id a1)
{
  int v1 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  [v1 _cleanUpOutgoingMessageDatabaseAndClearStatementCache];

  int v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  [v2 _cleanupIncomingMessageDatabase];

  id v5 = (id)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v5 opportunisticDeliveryController]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 cache]);
  [v4 clearKeychainWithError:0];
}

void sub_1000BE4D0(id a1)
{
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  int v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  for (uint64_t i = 0LL; i != 7; ++i)
  {
    int v4 = dword_1007173EC[i];
    id v5 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, v4, 0LL, v2);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472LL;
    handler[2] = sub_1000BE5D8;
    handler[3] = &unk_1008F9268;
    int v9 = v4;
    dispatch_source_set_event_handler(v5, handler);
    int v6 = (void *)qword_1009C74E0[i];
    qword_1009C74E0[i] = v5;
    uint64_t v7 = v5;

    dispatch_resume(v7);
    signal(v4, (void (__cdecl *)(int))1);
  }
}

void sub_1000BE5D8(uint64_t a1, uint64_t a2)
{
}

uint64_t start()
{
  if ((_set_user_dir_suffix("com.apple.identityservicesd") & 1) == 0)
  {
    uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMIDSLog daemon](&OBJC_CLASS___IMIDSLog, "daemon"));
    if (os_log_type_enabled(v39, OS_LOG_TYPE_FAULT)) {
      sub_10069967C(v39);
    }

    exit(1);
  }

  uint64_t v0 = setiopolicy_np(9, 0, 1);
  if (!(_DWORD)v0)
  {
    int v1 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMIDSLog daemon](&OBJC_CLASS___IMIDSLog, "daemon"));
    if (os_log_type_enabled(v1, OS_LOG_TYPE_FAULT)) {
      sub_100699600(v1);
    }
  }

  nullsub_36(v0);
  uint64_t v48 = 0LL;
  uint64_t v49 = &v48;
  uint64_t v50 = 0x3032000000LL;
  __int128 v51 = sub_1000BEB78;
  uint64_t v52 = sub_1000BEB88;
  id v53 = 0LL;
  uint64_t v42 = 0LL;
  uint64_t v43 = &v42;
  uint64_t v44 = 0x3032000000LL;
  id v45 = sub_1000BEB78;
  __int16 v46 = sub_1000BEB88;
  id v47 = 0LL;
  int v2 = objc_autoreleasePoolPush();
  id v3 = NSTemporaryDirectory();
  if (qword_1009BE978 != -1) {
    dispatch_once(&qword_1009BE978, &stru_1008F9288);
  }
  if (_os_feature_enabled_impl("IDS", "UseNewThreadArch_v1"))
  {
    int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMIDSLog daemon](&OBJC_CLASS___IMIDSLog, "daemon"));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Launching IDS with updated queue architecture.",  buf,  2u);
    }

    dispatch_queue_attr_t v5 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    int v6 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v5);
    uint64_t v7 = dispatch_queue_create("IDS Primary Base Queue", v6);

    dispatch_queue_attr_t v8 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    int v9 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v8);
    dispatch_queue_t v10 = dispatch_queue_create_with_target_V2("IDSDaemon Primary Queue Targets Base Queue", v9, v7);
  }

  else
  {
    uint64_t v7 = &_dispatch_main_q;
    int v11 = &_dispatch_main_q;
    dispatch_queue_t v10 = &_dispatch_main_q;
  }

  im_set_primary_base_queue(v7);
  im_set_primary_queue(v10);
  id v12 = objc_autoreleasePoolPush();
  inactive = dispatch_workloop_create_inactive("com.apple.pds.xpc.workloop");
  dispatch_workloop_set_autorelease_frequency(inactive, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_activate(inactive);
  id v14 = objc_alloc_init(&OBJC_CLASS___PDSConfiguration);
  [v14 setWorkloop:inactive];
  dispatch_queue_attr_t v15 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v16 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v15);
  dispatch_queue_t v17 = dispatch_queue_create_with_target_V2("com.apple.identityservicesd.pds", v16, inactive);
  [v14 setQueue:v17];

  char v18 = NSHomeDirectory();
  unint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  v54[0] = v19;
  v54[1] = @"/Library/IdentityServices/PDS/";
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v54, 2LL));
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPathComponents:](&OBJC_CLASS___NSURL, "fileURLWithPathComponents:", v20));
  [v14 setDaemonRootDirectory:v21];

  [v14 setPushHandlerPort:@"com.apple.identityservicesd.aps"];
  id v22 = [[PDSDaemon alloc] initWithConfiguration:v14];
  [v22 start];

  objc_autoreleasePoolPop(v12);
  int v23 = objc_autoreleasePoolPush();
  uint64_t v24 = _os_feature_enabled_impl("IDS", "UseNewThreadArch_v1");
  if ((_DWORD)v24)
  {
    uint64_t v26 = im_primary_queue(v24, v25);
    uint64_t v27 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v26);
    v40[0] = _NSConcreteStackBlock;
    v40[1] = 3221225472LL;
    v40[2] = sub_1000BEB90;
    v40[3] = &unk_1008F92B0;
    v40[4] = &v48;
    v40[5] = &v42;
    dispatch_sync(v27, v40);
  }

  else
  {
    uint64_t v28 = objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
    uint64_t v29 = (void *)v49[5];
    void v49[5] = v28;

    id v30 = objc_alloc(&OBJC_CLASS___IDSDXPCDaemonServer);
    uint64_t v32 = im_primary_queue(v30, v31);
    uint64_t v27 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v32);
    uint64_t v33 = -[IDSDXPCDaemonServer initWithServiceName:queue:]( v30,  "initWithServiceName:queue:",  IDSXPCDaemonMachServiceName,  v27);
    uint64_t v34 = (void *)v43[5];
    v43[5] = (uint64_t)v33;
  }

  objc_autoreleasePoolPop(v23);
  objc_autoreleasePoolPop(v2);
  if (v49[5])
  {
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop currentRunLoop](&OBJC_CLASS___NSRunLoop, "currentRunLoop"));
    [v35 run];
  }

  id v36 = (id)objc_opt_self(v43[5]);
  id v37 = (id)objc_opt_self(v22);

  _Block_object_dispose(&v42, 8);
  _Block_object_dispose(&v48, 8);

  return 0LL;
}

void sub_1000BEAC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BEB78(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000BEB88(uint64_t a1)
{
}

void sub_1000BEB90(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
  int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  dispatch_queue_attr_t v5 = objc_alloc(&OBJC_CLASS___IDSDXPCDaemonServer);
  uint64_t v6 = IDSXPCDaemonMachServiceName;
  uint64_t v8 = im_primary_queue(v5, v7);
  id v12 = (id)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v9 = -[IDSDXPCDaemonServer initWithServiceName:queue:](v5, "initWithServiceName:queue:", v6, v12);
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;
}

void sub_1000BEC30(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

void sub_1000BF858( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void sub_1000BFAC8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fullDeviceIdentitySigner]);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 56);
  id v18 = 0LL;
  dispatch_queue_attr_t v5 = (void *)objc_claimAutoreleasedReturnValue([v2 batchSignDatas:v3 withType:v4 error:&v18]);
  id v6 = v18;

  uint64_t v9 = im_primary_queue(v7, v8);
  uint64_t v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v9);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_1000BFBB8;
  v14[3] = &unk_1008F92D8;
  id v11 = *(id *)(a1 + 48);
  id v16 = v6;
  id v17 = v11;
  id v15 = v5;
  id v12 = v6;
  id v13 = v5;
  dispatch_async(v10, v14);
}

uint64_t sub_1000BFBB8(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

void sub_1000BFC80(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 56);
  id v17 = 0LL;
  dispatch_queue_attr_t v5 = (void *)objc_claimAutoreleasedReturnValue([v2 _signData:v3 withType:v4 error:&v17]);
  id v6 = v17;
  uint64_t v8 = im_primary_queue(v6, v7);
  uint64_t v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v8);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_1000BFD60;
  v13[3] = &unk_1008F92D8;
  id v10 = *(id *)(a1 + 48);
  id v15 = v6;
  id v16 = v10;
  id v14 = v5;
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v9, v13);
}

uint64_t sub_1000BFD60(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

void sub_1000BFE78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1000BFE90(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000BFEA0(uint64_t a1)
{
}

void sub_1000BFEA8(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fullDeviceIdentitySigner]);
  uint64_t v2 = objc_claimAutoreleasedReturnValue( [v5 batchSignDatas:*(void *)(a1 + 40) withType:*(void *)(a1 + 56) error:*(void *)(a1 + 64)]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000C0048( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1000C006C(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[8];
  uint64_t v5 = *(void *)(a1[7] + 8LL);
  id obj = *(id *)(v5 + 40);
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v2 _signData:v3 withType:v4 error:&obj]);
  objc_storeStrong((id *)(v5 + 40), obj);
  uint64_t v7 = *(void *)(a1[6] + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

NSMutableDictionary *__cdecl sub_1000C07BC(id a1, NSDictionary *a2, int64_t a3)
{
  return 0LL;
}

void sub_1000C0CB4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000C0CCC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000C0CDC(uint64_t a1)
{
}

void sub_1000C0CE4(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 96) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000C0DF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000C0E08(void *a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 96) objectForKey:a1[5]]);
  uint64_t v3 = *(void *)(a1[6] + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1000C0EF4(void *a1)
{
  return [*(id *)(a1[4] + 96) setObject:a1[5] forKey:a1[6]];
}

id sub_1000C0F88(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 96) removeObjectForKey:*(void *)(a1 + 40)];
}

id sub_1000C100C(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) loadAndCheckStatus];
  if (!*(void *)(*(void *)(a1 + 32) + 96LL))
  {
    uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 96);
    *(void *)(v4 + 96) = v3;
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  if (v2) {
    return [*(id *)(a1 + 32) delayedSave];
  }
  uint64_t v7 = OSLogHandleForIDSCategory("IDSPersistentMap");
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 24LL);
    *(_DWORD *)buf = 138412290;
    uint64_t v12 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "We're not loaded; ignoring save to disk for cache %@",
      buf,
      0xCu);
  }

  id result = (id)os_log_shim_legacy_logging_enabled(v10);
  if ((_DWORD)result)
  {
    id result = (id)_IDSShouldLog(0LL, @"IDSPersistentMap");
    if ((_DWORD)result) {
      return (id)_IDSLogV( 0LL,  @"IDSFoundation",  @"IDSPersistentMap",  @"We're not loaded; ignoring save to disk for cache %@");
    }
  }

  return result;
}

uint64_t sub_1000C1204(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000C1350( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000C1368(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 96) allKeys]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000C1450( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000C1468(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 96) allValues]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1000C14F4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 96) removeAllObjects];
}

void sub_1000C15AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000C15C4(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 96) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000C1AE8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v2 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
    [v2 didFirstLoadPersistentMap:WeakRetained];
  }
}

void sub_1000C1B8C(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) loadAndCheckStatus];
  unsigned int v3 = v2;
  if (*(void *)(*(void *)(a1 + 32) + 96LL))
  {
    if (v2)
    {
LABEL_3:
      *(void *)location = 0xAAAAAAAAAAAAAAAALL;
      objc_initWeak((id *)location, *(id *)(a1 + 32));
      uint64_t v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1000C1D54;
      block[3] = &unk_1008F8A78;
      objc_copyWeak(&v13, (id *)location);
      dispatch_async(v4, block);
      objc_destroyWeak(&v13);
      objc_destroyWeak((id *)location);
      return;
    }
  }

  else
  {
    uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void **)(v6 + 96);
    *(void *)(v6 + 96) = v5;

    if (v3) {
      goto LABEL_3;
    }
  }

  uint64_t v8 = OSLogHandleForIDSCategory("IDSPersistentMap");
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 24LL);
    *(_DWORD *)location = 138412290;
    *(void *)&location[4] = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "We're not loaded; ignoring save to disk for cache %@",
      location,
      0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v11))
  {
    if (_IDSShouldLog(0LL, @"IDSPersistentMap")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSPersistentMap",  @"We're not loaded; ignoring save to disk for cache %@");
    }
  }

void sub_1000C1D54(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_1000C1DC4;
  v2[3] = &unk_1008F6010;
  void v2[4] = WeakRetained;
  [WeakRetained _performLockedBlock:v2];
  [WeakRetained _save];
}

void sub_1000C1DC4(uint64_t a1)
{
  unsigned int v2 = *(dispatch_source_s **)(*(void *)(a1 + 32) + 48LL);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(v3 + 48);
    *(void *)(v3 + 4_Block_object_dispose(va, 8) = 0LL;
  }

void sub_1000C1FA8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v6 = _NSConcreteStackBlock;
  uint64_t v7 = 3221225472LL;
  uint64_t v8 = sub_1000C2044;
  uint64_t v9 = &unk_1008F5F80;
  uint64_t v10 = v3;
  id v11 = WeakRetained;
  id v4 = WeakRetained;
  [v3 _performLockedBlock:&v6];
  id v5 = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(v5, "_save", v6, v7, v8, v9, v10);
}

void sub_1000C2044(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unsigned int v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void **)(v1 + 48);
  if (v3 == v2)
  {
    *(void *)(v1 + 4_Block_object_dispose(va, 8) = 0LL;
  }

void sub_1000C2418( _Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1000C22D4LL);
  }

  _Block_object_dispose(&a19, 8);
  _Block_object_dispose((const void *)(v19 - 96), 8);
  _Unwind_Resume(exc_buf);
}

void sub_1000C24C0(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 96) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  uint64_t v5 = objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _mapByAddingMetadataToMap:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)]);
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_1000C25F8( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf)
{
  if (a2 == 1)
  {
    id v14 = objc_begin_catch(a1);
    uint64_t v15 = OSLogHandleForIDSCategory("IDSPersistentMap");
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(v13 + 24);
      LODWORD(buf) = 138412546;
      *(void *)((char *)&buf + 4) = v14;
      WORD6(buf) = 2112;
      *(void *)((char *)&buf + 14) = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Exception decoding persistent map -- throwing away {exception: %@, identitier: %@}",  (uint8_t *)&buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v18)
      && _IDSShouldLog(0LL, @"IDSPersistentMap"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSPersistentMap",  @"Exception decoding persistent map -- throwing away {exception: %@, identitier: %@}");
    }

    objc_end_catch();
    JUMPOUT(0x1000C25B8LL);
  }

  _Unwind_Resume(a1);
}

id sub_1000C3458(id a1, NSString *a2)
{
  return +[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", a2);
}

void sub_1000C5484( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_1000C55A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 lastCall])
  {
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery](&OBJC_CLASS___IDSFoundationLog, "delivery"));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [v3 idsResponseCode];
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) service]);
      id v8 = [*(id *)(a1 + 32) reason];
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) additionalInfo]);
      int v10 = 134219010;
      id v11 = v5;
      __int16 v12 = 2112;
      uint64_t v13 = v6;
      __int16 v14 = 2112;
      uint64_t v15 = v7;
      __int16 v16 = 2048;
      id v17 = v8;
      __int16 v18 = 2112;
      uint64_t v19 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Sent missing message metric to server { success: %ld, guid: %@, service: %@, reason: %ld, additionalInfo: %@ }",  (uint8_t *)&v10,  0x34u);
    }
  }
}

void sub_1000C5730(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___IDSDGroupStatusNotificationController);
  id v2 = (void *)qword_1009BE988;
  qword_1009BE988 = (uint64_t)v1;
}

void sub_1000C5EA8(uint64_t a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog GroupStatus_oversized](&OBJC_CLASS___IDSFoundationLog, "GroupStatus_oversized"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "participantsForGroupID %@ are %@",  (uint8_t *)&v5,  0x16u);
  }
}

void sub_1000C6694(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) realTimeEncryptionController]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 realTimeEncryptionPublicKeyData]);

  if (v3) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), IDSDSessionMessageRealTimeEncryptionPublicKey, v3);
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) realTimeEncryptionController]);
  int v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v4 realTimeEncryptionPublicKeyWrappingMode]));

  if (v5) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), IDSDSessionMessageRealTimeEncryptionWrapModeKey, v5);
  }

  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v16 = *(void *)(a1 + 40);
  id v17 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v10 = *(void *)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 80);
  uint64_t v12 = *(void *)(a1 + 88);
  char v13 = *(_BYTE *)(a1 + 120);
  id v18 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 96) isInitiator]);
  __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 96) quickRelayUserType]);
  BYTE2(v15) = v13;
  LOWORD(v15) = 0;
  objc_msgSend( v17,  "_sendFanoutMessage:account:toGroupMembers:fromURI:command:commandContext:toGroup:sessionID:reason:waitForMadridAcks: isUPlusOne:isInitiator:quickRelayUserType:requiredCapabilites:requiredLackOfCapabilities:completionBlock:",  v16,  v6,  v7,  v8,  v9,  v10,  v11,  v12,  v15,  v18,  v14,  0,  0,  *(void *)(a1 + 104));
}

void sub_1000C6EC4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) realTimeEncryptionController]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 realTimeEncryptionPublicKeyData]);

  if (v3) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), IDSDSessionMessageRealTimeEncryptionPublicKey, v3);
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) realTimeEncryptionController]);
  int v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v4 realTimeEncryptionPublicKeyWrappingMode]));

  if (v5) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), IDSDSessionMessageRealTimeEncryptionWrapModeKey, v5);
  }

  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v16 = *(void *)(a1 + 40);
  id v17 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 120);
  uint64_t v10 = *(void *)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 80);
  uint64_t v12 = *(void *)(a1 + 88);
  char v13 = *(_BYTE *)(a1 + 128);
  id v18 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 96) isInitiator]);
  __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 96) quickRelayUserType]);
  BYTE2(v15) = v13;
  LOWORD(v15) = 0;
  objc_msgSend( v17,  "_sendFanoutMessage:account:toGroupMembers:fromURI:command:commandContext:toGroup:sessionID:reason:waitForMadridAcks: isUPlusOne:isInitiator:quickRelayUserType:requiredCapabilites:requiredLackOfCapabilities:completionBlock:",  v16,  v6,  v7,  v8,  v9,  v10,  v11,  v12,  v15,  v18,  v14,  *(void *)(a1 + 104),  *(void *)(a1 + 112),  0);
}

void sub_1000C8D44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
}

id sub_1000C8D88(uint64_t a1, uint64_t a2)
{
  id result = objc_retainBlock(*(id *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_1000C8DB0(uint64_t a1)
{
}

void sub_1000C8DB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForTransportCategory("GroupStatusNotificationController");
  int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(const __CFString **)(a1 + 32);
    id v7 = [v3 idsResponseCode];
    id v8 = (id)objc_claimAutoreleasedReturnValue([v3 responseError]);
    unsigned int v9 = [v3 lastCourierAck];
    unsigned int v10 = [v3 lastCall];
    uint64_t v11 = @"NO";
    *(_DWORD *)buf = 138413314;
    uint64_t v56 = v6;
    __int16 v57 = 2048;
    if (v9) {
      uint64_t v12 = @"YES";
    }
    else {
      uint64_t v12 = @"NO";
    }
    id v58 = v7;
    if (v10) {
      uint64_t v11 = @"YES";
    }
    __int16 v59 = 2112;
    id v60 = v8;
    __int16 v61 = 2112;
    uint64_t v62 = v12;
    __int16 v63 = 2112;
    uint64_t v64 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Group status notification message callback received { GUID: %@, responseCode: %lu, error: %@, lastCourerAck: %@, lastCall: %@ }",  buf,  0x34u);
  }

  uint64_t v14 = os_log_shim_legacy_logging_enabled(v13);
  if ((_DWORD)v14 && _IDSShouldLogTransport(v14))
  {
    uint64_t v15 = *(void *)(a1 + 32);
    id v16 = [v3 idsResponseCode];
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
    id v18 = [v3 lastCourierAck] ? @"YES" : @"NO";
    uint64_t v19 = [v3 lastCall] ? @"YES" : @"NO";
    id v53 = v18;
    uint64_t v54 = v19;
    id v48 = v16;
    uint64_t v52 = v17;
    uint64_t v46 = v15;
    _IDSLogTransport( @"GroupStatusNotificationController",  @"IDS",  @"Group status notification message callback received { GUID: %@, responseCode: %lu, error: %@, lastCourerAck: %@, lastCall: %@ }");

    if (_IDSShouldLog(0LL, @"GroupStatusNotificationController"))
    {
      uint64_t v20 = *(void *)(a1 + 32);
      id v21 = objc_msgSend(v3, "idsResponseCode", v46, v16, v17, v18, v54);
      id v22 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
      else {
        int v23 = @"NO";
      }
      else {
        uint64_t v24 = @"NO";
      }
      id v53 = (__CFString *)v23;
      uint64_t v54 = (__CFString *)v24;
      id v48 = v21;
      uint64_t v52 = v22;
      uint64_t v46 = v20;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"GroupStatusNotificationController",  @"Group status notification message callback received { GUID: %@, responseCode: %lu, error: %@, lastCourerAck: %@, lastCall: %@ }");
    }
  }

  objc_msgSend(v3, "responseCode", v46, v48, v52, v53, v54);
  if ([v3 lastCourierAck]
    && !*(_BYTE *)(a1 + 72)
    && *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL))
  {
    uint64_t v25 = OSLogHandleForTransportCategory("GroupStatusNotificationController");
    uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(a1 + 72)) {
        uint64_t v27 = @"YES";
      }
      else {
        uint64_t v27 = @"NO";
      }
      id v28 = objc_retainBlock(*(id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL));
      *(_DWORD *)buf = 138412546;
      uint64_t v56 = v27;
      __int16 v57 = 2112;
      id v58 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Last Courier ack received for group status notification message { waitForMadridAcks: %@, pendingCompletionBlock: %@ }",  buf,  0x16u);
    }

    uint64_t v30 = os_log_shim_legacy_logging_enabled(v29);
    if ((_DWORD)v30 && _IDSShouldLogTransport(v30))
    {
      uint64_t v31 = @"YES";
      uint64_t v32 = *(_BYTE *)(a1 + 72) ? @"YES" : @"NO";
      id v47 = v32;
      id v49 = objc_retainBlock(*(id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL));
      _IDSLogTransport( @"GroupStatusNotificationController",  @"IDS",  @"Last Courier ack received for group status notification message { waitForMadridAcks: %@, pendingCompletionBlock: %@ }");

      if (_IDSShouldLog(0LL, @"GroupStatusNotificationController"))
      {
        if (!*(_BYTE *)(a1 + 72)) {
          uint64_t v31 = @"NO";
        }
        id v47 = (__CFString *)v31;
        id v49 = objc_retainBlock(*(id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL));
        _IDSLogV( 0LL,  @"IDSFoundation",  @"GroupStatusNotificationController",  @"Last Courier ack received for group status notification message { waitForMadridAcks: %@, pendingCompletionBlock: %@ }");
      }
    }

    uint64_t v33 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
    (*(void (**)(uint64_t, void))(v33 + 16))(v33, *(void *)(a1 + 40));
    uint64_t v34 = *(void *)(*(void *)(a1 + 64) + 8LL);
    uint64_t v35 = *(void **)(v34 + 40);
    *(void *)(v34 + 40) = 0LL;
  }

  if (objc_msgSend(v3, "lastCall", v47, v49)
    && *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL))
  {
    uint64_t v36 = OSLogHandleForTransportCategory("GroupStatusNotificationController");
    id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(a1 + 72)) {
        int v38 = @"YES";
      }
      else {
        int v38 = @"NO";
      }
      id v39 = objc_retainBlock(*(id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL));
      *(_DWORD *)buf = 138412546;
      uint64_t v56 = v38;
      __int16 v57 = 2112;
      id v58 = v39;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "Last Madrid ack received for group status notification message { waitForMadridAcks: %@, pendingCompletionBlock: %@ }",  buf,  0x16u);
    }

    uint64_t v41 = os_log_shim_legacy_logging_enabled(v40);
    if ((_DWORD)v41)
    {
      if (_IDSShouldLogTransport(v41))
      {
        id v50 = objc_retainBlock(*(id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL));
        _IDSLogTransport( @"GroupStatusNotificationController",  @"IDS",  @"Last Madrid ack received for group status notification message { waitForMadridAcks: %@, pendingCompletionBlock: %@ }");

        if (_IDSShouldLog(0LL, @"GroupStatusNotificationController"))
        {
          id v51 = objc_retainBlock(*(id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL));
          _IDSLogV( 0LL,  @"IDSFoundation",  @"GroupStatusNotificationController",  @"Last Madrid ack received for group status notification message { waitForMadridAcks: %@, pendingCompletionBlock: %@ }");
        }
      }
    }

    uint64_t v43 = *(void *)(a1 + 64);
    uint64_t v42 = a1 + 64;
    (*(void (**)(void, void))(*(void *)(*(void *)(v43 + 8) + 40LL) + 16LL))( *(void *)(*(void *)(v43 + 8) + 40LL),  *(void *)(v42 - 24));
    uint64_t v44 = *(void *)(*(void *)v42 + 8LL);
    id v45 = *(void **)(v44 + 40);
    *(void *)(v44 + 40) = 0LL;
  }
}

LABEL_96:
        uint64_t v133 = OSLogHandleForTransportCategory("GroupStatusNotificationController");
        __int128 v134 = (os_log_s *)objc_claimAutoreleasedReturnValue(v133);
        if (os_log_type_enabled(v134, OS_LOG_TYPE_DEFAULT))
        {
          __int128 v135 = [v102 handOffOverQREnabled];
          id v136 = @"NO";
          if (v102) {
            uint64_t v137 = @"NO";
          }
          else {
            uint64_t v137 = @"YES";
          }
          if (v135) {
            id v136 = @"YES";
          }
          *(_DWORD *)buf = 138412546;
          v183 = v137;
          v184 = 2112;
          v185 = v136;
          _os_log_impl( (void *)&_mh_execute_header,  v134,  OS_LOG_TYPE_DEFAULT,  "Should not dedup, session == nil: %@ Handoff Over QR Feature is Enabled: %@",  buf,  0x16u);
        }

        double v139 = os_log_shim_legacy_logging_enabled(v138);
        if ((_DWORD)v139 && _IDSShouldLogTransport(v139))
        {
          __int16 v140 = v102 ? @"NO" : @"YES";
          uint64_t v141 = objc_msgSend(v102, "handOffOverQREnabled", v155, v157) ? @"YES" : @"NO";
          double v155 = v140;
          uint64_t v159 = v141;
          _IDSLogTransport( @"GroupStatusNotificationController",  @"IDS",  @"Should not dedup, session == nil: %@ Handoff Over QR Feature is Enabled: %@");
          if (_IDSShouldLog(0LL, @"GroupStatusNotificationController"))
          {
            objc_msgSend(v102, "handOffOverQREnabled", v140, v159);
            double v155 = v140;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"GroupStatusNotificationController",  @"Should not dedup, session == nil: %@ Handoff Over QR Feature is Enabled: %@");
          }
        }
}

LABEL_114:
}

      __int128 v82 = 0;
      goto LABEL_115;
    }

    if (!v79) {
      goto LABEL_114;
    }
    __int128 v80 = (void *)objc_claimAutoreleasedReturnValue(-[IDSUTunConnection _UTunDeliveryController](self, "_UTunDeliveryController"));
    __int128 v81 = [v80 isTerminusConnectedOverBluetooth];

    __int128 v82 = v81 ^ 1;
LABEL_115:
    if (-[os_log_s length](loga, "length")
      && ((-[IDSUTunConnection _nonBTAllowedForClientID:](self, "_nonBTAllowedForClientID:", loga) | v82 ^ 1) & 1) == 0)
    {
      uint64_t v125 = OSLogHandleForIDSCategory("UTunConnection");
      id v126 = (os_log_s *)objc_claimAutoreleasedReturnValue(v125);
      if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v126,  OS_LOG_TYPE_DEFAULT,  "Non BT usage is not allowed, failing message",  buf,  2u);
      }

      if (os_log_shim_legacy_logging_enabled(v127)
        && _IDSShouldLog(0LL, @"UTunConnection"))
      {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"Non BT usage is not allowed, failing message");
      }

      -[IDSUTunConnection _removeSocketPairMessage:localMessage:reason:responseCode:]( self,  "_removeSocketPairMessage:localMessage:reason:responseCode:",  v35,  v36,  @"Celluar Useage Policy states that BT is required",  15LL);
LABEL_182:

      objc_autoreleasePoolPop(context);
      uint64_t v34 = v171 + 1;
      if (v171 + 1 == v168) {
        goto LABEL_190;
      }
      continue;
    }

    break;
  }

  __int128 v84 = objc_opt_class(&OBJC_CLASS___IDSSocketPairResourceTransferSender, v83);
  char isKindOfClass = objc_opt_isKindOfClass(v35, v84);
  if (!self->_sendingMessages)
  {
    uint64_t v85 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    sendingMessages = self->_sendingMessages;
    self->_sendingMessages = v85;
  }

  if ((isKindOfClass & 1) != 0)
  {
    -[NSMutableArray removeObject:](self->_sendingMessages, "removeObject:", v35);
    if (self->_priority != 300 && ([v36 bypassDuet] & 1) == 0)
    {
      id v156 = (void *)objc_claimAutoreleasedReturnValue([v36 duetIdentifiersOverride]);
      if (![v156 count])
      {
        id v87 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance"));
        id v88 = (void *)objc_claimAutoreleasedReturnValue([v87 serviceWithPushTopic:v38]);
        uint64_t v89 = objc_claimAutoreleasedReturnValue([v88 duetIdentifiers]);

        id v156 = (void *)v89;
      }

      uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue([v36 messageUUID]);
      uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"dequeueMessages check for %@ %u",  v90,  [v36 messageID]));

      uint64_t v92 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDuetInterface sharedInstance](&OBJC_CLASS___IDSDuetInterface, "sharedInstance"));
      priority = self->_priority;
      uint64_t v149 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
      dispatch_block_t v93 = (void *)objc_claimAutoreleasedReturnValue([v149 queueForPriority:self->_priority]);
      v176[0] = _NSConcreteStackBlock;
      v176[1] = 3221225472LL;
      v176[2] = sub_10024D45C;
      v176[3] = &unk_1008F8800;
      v176[4] = self;
      double v177 = v38;
      [v92 forceCheckAvailabilityForValues:v156 priority:priority logString:v91 fromQueue:v93 withCompletionBlock:v176];
    }
  }

  -[NSMutableArray addObject:](self->_sendingMessages, "addObject:", v35);
  if (v38) {
    [v14 addObject:v38];
  }
  if ((isKindOfClass & 1) == 0)
  {
LABEL_139:
    if ([v36 manualQueueRemoval])
    {
      uint64_t v148 = 0LL;
    }

    else
    {
      uint64_t v158 = (void *)objc_claimAutoreleasedReturnValue([v36 payload]);
      double v151 = (char *)[v158 length];
      double v102 = (void *)objc_claimAutoreleasedReturnValue([v36 protobuf]);
      __int16 v103 = (void *)objc_claimAutoreleasedReturnValue([v102 data]);
      double v104 = [v103 length];

      uint64_t v148 = (IMPowerAssertion *)&v151[(void)v104];
    }

    uint64_t v105 = OSLogHandleForTransportCategory("UTunConnection");
    uint64_t v106 = (os_log_s *)objc_claimAutoreleasedReturnValue(v105);
    if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v107 = @"URGENT";
      if ([v36 priority] != (id)300)
      {
        if ([v36 priority] == (id)200) {
          uint64_t v107 = @"Default";
        }
        else {
          uint64_t v107 = @"Sync";
        }
      }

      v144 = (void *)objc_claimAutoreleasedReturnValue([v36 payload]);
      uint64_t v143 = [v144 length];
      v152 = (id)objc_claimAutoreleasedReturnValue([v36 topic]);
      uint64_t v159 = (id)objc_claimAutoreleasedReturnValue([v36 domainHash]);
      uint64_t v108 = (id)objc_claimAutoreleasedReturnValue([v36 messageUUID]);
      uint64_t v109 = [v36 messageID];
      *(_DWORD *)buf = 138544898;
      v187 = (IDSUTunConnection *)v107;
      v188 = 2048;
      *(void *)v189 = v148;
      *(_WORD *)&v189[8] = 2048;
      *(void *)v190 = v143;
      *(_WORD *)&v190[8] = 2114;
      *(void *)&v190[10] = v152;
      *(_WORD *)&v190[18] = 2114;
      v191 = v159;
      v192 = 2114;
      v193 = v108;
      v194 = 1024;
      v195 = v109;
      _os_log_impl( (void *)&_mh_execute_header,  v106,  OS_LOG_TYPE_DEFAULT,  "* Dequeuing for Sending %{public}@ priority local message payload of data size: %lu/%lu   for topic: %{public}@: %{public}@  guid: %{public}@  messageID: %d",  buf,  0x44u);
    }

    uint64_t v111 = os_log_shim_legacy_logging_enabled(v110);
    if ((_DWORD)v111 && _IDSShouldLogTransport(v111))
    {
      id v112 = @"URGENT";
      if ([v36 priority] != (id)300)
      {
        if ([v36 priority] == (id)200) {
          id v112 = @"Default";
        }
        else {
          id v112 = @"Sync";
        }
      }

      id v160 = (void *)objc_claimAutoreleasedReturnValue([v36 payload]);
      double v145 = [v160 length];
      unsigned int v113 = (__CFString *)objc_claimAutoreleasedReturnValue([v36 topic]);
      uint64_t v153 = (void *)objc_claimAutoreleasedReturnValue([v36 domainHash]);
      uint64_t v141 = (void *)objc_claimAutoreleasedReturnValue([v36 messageUUID]);
      uint64_t v142 = [v36 messageID];
      double v139 = v113;
      __int16 v140 = (unint64_t)v153;
      uint64_t v137 = v148;
      __int128 v138 = (unint64_t)v145;
      __int128 v135 = (IDSUTunConnection *)v112;
      _IDSLogTransport( @"UTunConnection",  @"IDS",  @"* Dequeuing for Sending %{public}@ priority local message payload of data size: %lu/%lu   for topic: %{public}@:%{public}@  guid: %{public}@  messageID: %d");

      if (_IDSShouldLog(0LL, @"UTunConnection"))
      {
        id v114 = @"URGENT";
        if (objc_msgSend(v36, "priority", v135, v148, v145, v113, v153, v141, v142) != (id)300)
        {
          if ([v36 priority] == (id)200) {
            id v114 = @"Default";
          }
          else {
            id v114 = @"Sync";
          }
        }

        id v161 = (void *)objc_claimAutoreleasedReturnValue([v36 payload]);
        __int16 v146 = [v161 length];
        uint64_t v115 = (__CFString *)objc_claimAutoreleasedReturnValue([v36 topic]);
        uint64_t v154 = (void *)objc_claimAutoreleasedReturnValue([v36 domainHash]);
        uint64_t v141 = (void *)objc_claimAutoreleasedReturnValue([v36 messageUUID]);
        uint64_t v142 = [v36 messageID];
        double v139 = v115;
        __int16 v140 = (unint64_t)v154;
        uint64_t v137 = v148;
        __int128 v138 = (unint64_t)v146;
        __int128 v135 = (IDSUTunConnection *)v114;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"* Dequeuing for Sending %{public}@ priority local message payload of data size: %lu/%lu   for topic: %{public}@:%{public}@  guid: %{public}@  messageID: %d");
      }
    }

    objc_msgSend( v36,  "setSentMessageDataSize:",  -[IDSUTunConnection underlyingDataLength](v35, "underlyingDataLength", v135));
    -[IDSUTunConnection _addOutgoingMessageSize:forTopic:dataProtectionClass:isResource:]( self,  "_addOutgoingMessageSize:forTopic:dataProtectionClass:isResource:",  [v36 sentMessageDataSize],  v38,  objc_msgSend(v36, "dataProtectionClass"),  isKindOfClass & 1);
    uint64_t v116 = OSLogHandleForIDSCategory("UTunConnection");
    uint64_t v117 = (os_log_s *)objc_claimAutoreleasedReturnValue(v116);
    if (os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v118 = -[NSMutableArray count](self->_sendingMessages, "count");
      uint64_t v119 = [v14 count];
      *(_DWORD *)buf = 138412802;
      v187 = v35;
      v188 = 1024;
      *(_DWORD *)v189 = v118;
      *(_WORD *)&v189[4] = 1024;
      *(_DWORD *)&v189[6] = v119;
      _os_log_impl( (void *)&_mh_execute_header,  v117,  OS_LOG_TYPE_DEFAULT,  "Message %@ added to queue, total message count %d, sendingTopics count %d",  buf,  0x18u);
    }

    if (os_log_shim_legacy_logging_enabled(v120)
      && _IDSShouldLog(0LL, @"UTunConnection"))
    {
      uint64_t v137 = (IMPowerAssertion *)-[NSMutableArray count](self->_sendingMessages, "count");
      __int128 v138 = (unint64_t)[v14 count];
      id v136 = v35;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"Message %@ added to queue, total message count %d, sendingTopics count %d");
    }

    if (-[IDSUTunConnection _shouldAWDLogMessage:](self, "_shouldAWDLogMessage:", v36, v136))
    {
      id v162 = objc_alloc(&OBJC_CLASS___IDSLocalDeliveryMessageSentMetric);
      id v166 = (void *)objc_claimAutoreleasedReturnValue([v36 awdTopic]);
      uint64_t v163 = objc_msgSend( v162,  "initWithService:isToDefaultPairedDevice:messageSize:linkType:priority:",  v166,  -[IDSUTunConnection _isMagnetConnection](self, "_isMagnetConnection"),  objc_msgSend(v36, "sentMessageDataSize"),  -[IDSUTunConnection _currentLink](self, "_currentLink"),  objc_msgSend(v36, "priority"));

      id v121 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCoreAnalyticsLogger defaultLogger](&OBJC_CLASS___IDSCoreAnalyticsLogger, "defaultLogger"));
      [v121 logMetric:v163];

      id v167 = (void *)objc_claimAutoreleasedReturnValue(+[IDSAWDLogging sharedInstance](&OBJC_CLASS___IDSAWDLogging, "sharedInstance"));
      double v155 = (void *)objc_claimAutoreleasedReturnValue([v36 awdTopic]);
      objc_msgSend( v167,  "messageSentForService:isToDefaultPairedDevice:messageSize:linkType:priority:",  v155,  -[IDSUTunConnection _isMagnetConnection](self, "_isMagnetConnection"),  objc_msgSend(v36, "sentMessageDataSize"),  -[IDSUTunConnection _currentLink](self, "_currentLink"),  objc_msgSend(v36, "priority"));
    }

    -[IDSUTunConnection _sendSocketMessage:](self, "_sendSocketMessage:", v35);
    -[IDSUTunConnection setWasWrittenToConnection:](v35, "setWasWrittenToConnection:", 1LL);
    if (v38
      && [v38 hasPrefix:@"com.apple.private.alloy.idstool.testservice"]
      && IMGetDomainBoolForKey(@"com.apple.ids", @"DuplicateTestFileMessages"))
    {
      uint64_t v122 = OSLogHandleForIDSCategory("UTunConnection");
      uint64_t v123 = (os_log_s *)objc_claimAutoreleasedReturnValue(v122);
      if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v187 = v35;
        _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_DEFAULT, "Send duplicate message %@", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v124)
        && _IDSShouldLog(0LL, @"UTunConnection"))
      {
        __int128 v135 = v35;
        _IDSLogV(0LL, @"IDSFoundation", @"UTunConnection", @"Send duplicate message %@");
      }

      -[IDSUTunConnection _sendSocketMessage:](self, "_sendSocketMessage:", v35, v135);
    }

    goto LABEL_182;
  }

  uint64_t v94 = OSLogHandleForIDSCategory("UTunConnection");
  uint64_t v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
  if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v187 = self;
    v188 = 2112;
    *(void *)v189 = v35;
    _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "%@ resource transfer sender %@", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v96)
    && _IDSShouldLog(0LL, @"UTunConnection"))
  {
    __int128 v135 = self;
    uint64_t v137 = (IMPowerAssertion *)v35;
    _IDSLogV(0LL, @"IDSFoundation", @"UTunConnection", @"%@ resource transfer sender %@");
  }

  uint64_t v97 = v35;
  -[IDSUTunConnection setMaxChunkSize:](v97, "setMaxChunkSize:", 4000LL);
  -[IDSUTunConnection setResumeResourceTransfers:](v97, "setResumeResourceTransfers:", self->_resumeResourceTransfers);
  v150 = (void *)objc_claimAutoreleasedReturnValue(-[IDSUTunConnection nextMessage](v97, "nextMessage"));
  if (v150)
  {
    uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue([v36 progressBlock]);

    if (v98)
    {
      id v157 = objc_alloc_init(&OBJC_CLASS___IDSDeliveryContext);
      -[IDSDeliveryContext setIdsResponseCode:](v157, "setIdsResponseCode:", 0LL);
      -[IDSDeliveryContext setLastCall:](v157, "setLastCall:", 0LL);
      __int16 v99 = (void (**)(void, void, void, void, void, void))objc_claimAutoreleasedReturnValue([v36 progressBlock]);
      double v100 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  -[IDSUTunConnection nextByte](v97, "nextByte")));
      __int16 v101 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  -[IDSUTunConnection totalBytes](v97, "totalBytes")));
      ((void (**)(void, IDSDeliveryContext *, void *, void *, uint64_t, void))v99)[2]( v99,  v157,  v100,  v101,  1LL,  0LL);
    }

    if (-[IDSUTunConnection isDone](v97, "isDone", v135))
    {
      [v36 setUnderlyingSocketPairMessage:0];
      -[IDSLocalDeliveryQueue dequeueMessage:](self->_deliveryQueue, "dequeueMessage:", v36);
    }

    uint64_t v35 = v150;

    goto LABEL_139;
  }

  __int128 v132 = OSLogHandleForIDSCategory("UTunConnection");
  uint64_t v133 = (os_log_s *)objc_claimAutoreleasedReturnValue(v132);
  if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v187 = self;
    v188 = 2112;
    *(void *)v189 = v97;
    _os_log_impl( (void *)&_mh_execute_header,  v133,  OS_LOG_TYPE_DEFAULT,  "%@ cannot read message to deliver for resource transfer %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v134)
    && _IDSShouldLog(0LL, @"UTunConnection"))
  {
    __int128 v135 = self;
    uint64_t v137 = (IMPowerAssertion *)v97;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"%@ cannot read message to deliver for resource transfer %@");
  }

  -[IDSUTunConnection _removeSocketPairMessage:localMessage:reason:responseCode:]( self,  "_removeSocketPairMessage:localMessage:reason:responseCode:",  v97,  v36,  @"cannot read chunk of resource",  17LL,  v135,  v137,  v138,  v139,  v140,  v141,  v142);

  uint64_t v36 = v97;
LABEL_189:

  objc_autoreleasePoolPop(context);
LABEL_190:
  if (v174 && !-[IDSUTunConnection _sendingMessageCountForClass:](self, "_sendingMessageCountForClass:", 1LL)) {
    -[IDSUTunConnection _handleBecomingEmptyForDataProtectionClass:]( self,  "_handleBecomingEmptyForDataProtectionClass:",  1LL);
  }
  if (v175 && !-[IDSUTunConnection _sendingMessageCountForClass:](self, "_sendingMessageCountForClass:", 0LL)) {
    -[IDSUTunConnection _handleBecomingEmptyForDataProtectionClass:]( self,  "_handleBecomingEmptyForDataProtectionClass:",  0LL);
  }
  if (v173 && !-[IDSUTunConnection _sendingMessageCountForClass:](self, "_sendingMessageCountForClass:", 2LL)) {
    -[IDSUTunConnection _handleBecomingEmptyForDataProtectionClass:]( self,  "_handleBecomingEmptyForDataProtectionClass:",  2LL);
  }
LABEL_199:

LABEL_200:
}

id sub_1000CA504(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKey:v5]);
  if ((objc_opt_isKindOfClass(v6, a1) & 1) != 0)
  {
    id v7 = v6;
  }

  else
  {
    if (v6)
    {
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)) {
        sub_100699E54((uint64_t)v5, a1, v8);
      }
    }

    id v7 = 0LL;
  }

  return v7;
}

id sub_1000CA5AC(id a1, NSString *a2)
{
  return +[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", a2);
}

id sub_1000CAF80(id a1, NSString *a2)
{
  return +[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", a2);
}

void sub_1000CB2FC( uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7, uint64_t a8, void *a9)
{
  id v74 = a2;
  id v75 = a3;
  id v76 = a4;
  id v77 = a5;
  id v78 = a7;
  id v14 = a9;
  uint64_t v90 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  uint64_t v92 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  uint64_t v85 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v81 = (void *)a1;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 72));
  __int128 v97 = 0u;
  __int128 v98 = 0u;
  __int128 v99 = 0u;
  __int128 v100 = 0u;
  id obj = v14;
  id v82 = [obj countByEnumeratingWithState:&v97 objects:v110 count:16];
  if (v82)
  {
    uint64_t v80 = *(void *)v98;
    uint64_t v89 = IDSRegistrationPropertySupportsMirage;
    uint64_t v88 = kIDSQRAllocateKey_RecipientPushToken;
    uint64_t v86 = kIDSQRAllocateKey_RecipientURI;
    uint64_t v87 = kIDSQRAllocateKey_RecipientSessionToken;
    do
    {
      uint64_t v15 = 0LL;
      do
      {
        if (*(void *)v98 != v80)
        {
          uint64_t v16 = v15;
          objc_enumerationMutation(obj);
          uint64_t v15 = v16;
        }

        uint64_t v84 = v15;
        id v17 = *(void **)(*((void *)&v97 + 1) + 8 * v15);
        id v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(obj, "objectForKeyedSubscript:", v17, v69, v71));
        uint64_t v19 = OSLogHandleForTransportCategory("GroupStatusNotificationController");
        uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v21 = [v18 count];
          *(_DWORD *)buf = 138412546;
          double v102 = v17;
          __int16 v103 = 1024;
          LODWORD(v104) = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Look up peer with URI: %@, push token count: %u",  buf,  0x12u);
        }

        uint64_t v23 = os_log_shim_legacy_logging_enabled(v22);
        if ((_DWORD)v23)
        {
          if (_IDSShouldLogTransport(v23))
          {
            id v69 = v17;
            id v71 = [v18 count];
            _IDSLogTransport( @"GroupStatusNotificationController",  @"IDS",  @"Look up peer with URI: %@, push token count: %u");
            if (_IDSShouldLog(0LL, @"GroupStatusNotificationController"))
            {
              id v24 = objc_msgSend(v18, "count", v17, v71);
              id v69 = v17;
              id v71 = v24;
              _IDSLogV( 0LL,  @"IDSFoundation",  @"GroupStatusNotificationController",  @"Look up peer with URI: %@, push token count: %u");
            }
          }
        }

        __int128 v95 = 0u;
        __int128 v96 = 0u;
        __int128 v93 = 0u;
        __int128 v94 = 0u;
        id v91 = v18;
        uint64_t v25 = 0LL;
        id v26 = [v91 countByEnumeratingWithState:&v93 objects:v109 count:16];
        if (v26)
        {
          uint64_t v27 = *(void *)v94;
          do
          {
            for (uint64_t i = 0LL; i != v26; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v94 != v27) {
                objc_enumerationMutation(v91);
              }
              uint64_t v29 = *(void **)(*((void *)&v93 + 1) + 8LL * (void)i);
              uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "pushToken", v69));
              if (-[NSMutableSet containsObject:](v92, "containsObject:", v30))
              {
                uint64_t v31 = OSLogHandleForTransportCategory("GroupStatusNotificationController");
                uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
                if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412290;
                  double v102 = v30;
                  _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Skipping duplicate token %@",  buf,  0xCu);
                }

                uint64_t v34 = os_log_shim_legacy_logging_enabled(v33);
                if ((_DWORD)v34)
                {
                  if (_IDSShouldLogTransport(v34))
                  {
                    id v69 = v30;
                    _IDSLogTransport( @"GroupStatusNotificationController",  @"IDS",  @"Skipping duplicate token %@");
                    if (_IDSShouldLog(0LL, @"GroupStatusNotificationController"))
                    {
                      id v69 = v30;
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"GroupStatusNotificationController",  @"Skipping duplicate token %@");
                    }
                  }
                }
              }

              else
              {
                uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v29 capabilities]);
                if ([v35 valueForCapability:v89])
                {
                  uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v29 pushToken]);
                  -[NSMutableArray addObject:](v85, "addObject:", v36);
                }

                -[NSMutableSet addObject:](v92, "addObject:", v30);
                v108[0] = v30;
                v107[0] = v88;
                v107[1] = v87;
                id v37 = (void *)objc_claimAutoreleasedReturnValue([v29 sessionToken]);
                v107[2] = v86;
                v108[1] = v37;
                v108[2] = v17;
                int v38 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v108,  v107,  3LL));

                -[NSMutableArray addObject:](v90, "addObject:", v38);
                id v39 = (void *)objc_claimAutoreleasedReturnValue([v17 prefixedURI]);
                unsigned int v40 = [v39 _appearsToBePseudonymID];

                if (v40)
                {
                  if (!v25) {
                    uint64_t v25 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
                  }
                  -[NSMutableSet addObject:](v25, "addObject:", v30);
                }
              }
            }

            id v26 = [v91 countByEnumeratingWithState:&v93 objects:v109 count:16];
          }

          while (v26);
        }

        uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDSessionActiveParticipantsCache sharedInstance]( &OBJC_CLASS___IDSDSessionActiveParticipantsCache,  "sharedInstance"));
        [v41 updateParticipants:v25 forSessionID:v81[4]];

        uint64_t v15 = v84 + 1;
      }

      while ((id)(v84 + 1) != v82);
      id v82 = [obj countByEnumeratingWithState:&v97 objects:v110 count:16];
    }

    while (v82);
  }

  uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained[10] objectForKeyedSubscript:v81[5]]);
  BOOL v43 = v42 == 0LL;

  if (v43)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    [WeakRetained[10] setObject:Mutable forKeyedSubscript:v81[5]];
  }

  if (-[NSMutableArray count](v85, "count", v69, v71))
  {
    id v45 = v85;
    if (v45)
    {
      uint64_t v46 = (__CFDictionary *)objc_claimAutoreleasedReturnValue([WeakRetained[10] objectForKeyedSubscript:v81[5]]);
      CFDictionarySetValue(v46, IDSRegistrationPropertySupportsMirage, v45);
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_100699F5C();
    }

    uint64_t v47 = OSLogHandleForTransportCategory("GroupStatusNotificationController");
    id v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      id v50 = (void *)v81[4];
      id v49 = (void *)v81[5];
      id v51 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained[10] objectForKeyedSubscript:v49]);
      *(_DWORD *)buf = 138412802;
      double v102 = v49;
      __int16 v103 = 2112;
      id v104 = v50;
      __int16 v105 = 2112;
      uint64_t v106 = v51;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "groupID: %@, sessionID: %@, %@", buf, 0x20u);
    }

    uint64_t v53 = os_log_shim_legacy_logging_enabled(v52);
    if ((_DWORD)v53)
    {
      if (_IDSShouldLogTransport(v53))
      {
        uint64_t v54 = v81[5];
        uint64_t v72 = v81[4];
        uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained[10] objectForKeyedSubscript:v54]);
        uint64_t v70 = v54;
        _IDSLogTransport( @"GroupStatusNotificationController",  @"IDS",  @"groupID: %@, sessionID: %@, %@");

        if (_IDSShouldLog(0LL, @"GroupStatusNotificationController"))
        {
          uint64_t v56 = v81[4];
          uint64_t v55 = v81[5];
          __int16 v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[10], "objectForKeyedSubscript:", v55, v70, v72, v73));
          uint64_t v72 = v56;
          uint64_t v73 = v57;
          uint64_t v70 = v55;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"GroupStatusNotificationController",  @"groupID: %@, sessionID: %@, %@");
        }
      }
    }
  }

  if (-[NSMutableArray count](v90, "count", v70, v72, v73))
  {
    [WeakRetained[4] setObject:v90 forKeyedSubscript:v81[5]];
    uint64_t v58 = OSLogHandleForTransportCategory("GroupStatusNotificationController");
    __int16 v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
      id v60 = *(void **)(v81[7] + 32LL);
      *(_DWORD *)buf = 138412290;
      double v102 = v60;
      _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEFAULT,  "Looked up _groupMemberPushTokens: %@",  buf,  0xCu);
    }

    uint64_t v62 = os_log_shim_legacy_logging_enabled(v61);
    if ((_DWORD)v62)
    {
      if (_IDSShouldLogTransport(v62))
      {
        _IDSLogTransport( @"GroupStatusNotificationController",  @"IDS",  @"Looked up _groupMemberPushTokens: %@");
        if (_IDSShouldLog(0LL, @"GroupStatusNotificationController")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"GroupStatusNotificationController",  @"Looked up _groupMemberPushTokens: %@");
        }
      }
    }

    uint64_t v63 = v81[8];
    if (v63) {
      (*(void (**)(uint64_t))(v63 + 16))(v63);
    }
  }

  else
  {
    uint64_t v64 = OSLogHandleForTransportCategory("GroupStatusNotificationController");
    id v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
    if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v66 = (void *)v81[6];
      *(_DWORD *)buf = 138412546;
      double v102 = v66;
      __int16 v103 = 2112;
      id v104 = v78;
      _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEFAULT,  "Could not look up the recipients' push tokens, IDs: %@, errors: %@ ",  buf,  0x16u);
    }

    uint64_t v68 = os_log_shim_legacy_logging_enabled(v67);
    if ((_DWORD)v68)
    {
      if (_IDSShouldLogTransport(v68))
      {
        _IDSLogTransport( @"GroupStatusNotificationController",  @"IDS",  @"Could not look up the recipients' push tokens, IDs: %@, errors: %@ ");
        if (_IDSShouldLog(0LL, @"GroupStatusNotificationController")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"GroupStatusNotificationController",  @"Could not look up the recipients' push tokens, IDs: %@, errors: %@ ");
        }
      }
    }
  }
}

void sub_1000CBD78(void *a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[IDSPeerIDManager sharedInstance](&OBJC_CLASS___IDSPeerIDManager, "sharedInstance"));
  LOBYTE(v2) = 0;
  [v3 startQueryForURIs:a1[4] fromIdentity:a1[5] fromURI:a1[6] fromService:a1[7] forSending:1 forRefresh:0 isForced:v2 reason:@"SessionMemberLookup" completionBlock:a1[8]];
}

void sub_1000CCC98(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dictionaryRepresentation]);
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) prefixedURI]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) unprefixedURI]);
    [v3 receivedGroupSessionParticipantUpdate:v4 forTopic:v5 toIdentifier:v6 fromID:v7 context:*(void *)(a1 + 64)];
  }

  else
  {
    uint64_t v8 = OSLogHandleForTransportCategory("GroupStatusNotificationController");
    unsigned int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Did not find a client to handle receivedGroupSessionParticipantUpdate:forTopic: -- dropping broadcast",  v12,  2u);
    }

    uint64_t v11 = os_log_shim_legacy_logging_enabled(v10);
    if ((_DWORD)v11)
    {
      if (_IDSShouldLogTransport(v11))
      {
        _IDSLogTransport( @"GroupStatusNotificationController",  @"IDS",  @"Did not find a client to handle receivedGroupSessionParticipantUpdate:forTopic: -- dropping broadcast");
        if (_IDSShouldLog(0LL, @"GroupStatusNotificationController")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"GroupStatusNotificationController",  @"Did not find a client to handle receivedGroupSessionParticipantUpdate:forTopic: -- dropping broadcast");
        }
      }
    }
  }
}

void sub_1000CD07C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dictionaryRepresentation]);
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) prefixedURI]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) unprefixedURI]);
    [v3 receivedGroupSessionParticipantDataUpdate:v4 forTopic:v5 toIdentifier:v6 fromID:v7];
  }

  else
  {
    uint64_t v8 = OSLogHandleForTransportCategory("GroupStatusNotificationController");
    unsigned int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Did not find a client to handle receivedGroupSessionParticipantDataUpdate:forTopic: -- dropping broadcast",  v12,  2u);
    }

    uint64_t v11 = os_log_shim_legacy_logging_enabled(v10);
    if ((_DWORD)v11)
    {
      if (_IDSShouldLogTransport(v11))
      {
        _IDSLogTransport( @"GroupStatusNotificationController",  @"IDS",  @"Did not find a client to handle receivedGroupSessionParticipantDataUpdate:forTopic: -- dropping broadcast");
        if (_IDSShouldLog(0LL, @"GroupStatusNotificationController")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"GroupStatusNotificationController",  @"Did not find a client to handle receivedGroupSessionParticipantDataUpdate:forTopic: -- dropping broadcast");
        }
      }
    }
  }
}

id sub_1000CD1DC(id a1, IDSURI *a2)
{
  return -[IDSURI prefixedURI](a2, "prefixedURI");
}

  ;
}

void sub_1000CD204( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_1000CE86C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) invitedHandles]);
    (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0LL);
  }

void sub_1000CEB1C(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog IDSOffGridStateManager]( &OBJC_CLASS___IDSFoundationLog,  "IDSOffGridStateManager"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[4];
    if (a1[5]) {
      uint64_t v6 = @"YES";
    }
    else {
      uint64_t v6 = @"NO";
    }
    uint64_t v7 = a1[6];
    int v11 = 138413058;
    uint64_t v12 = v5;
    __int16 v13 = 2112;
    id v14 = v6;
    __int16 v15 = 2112;
    uint64_t v16 = v7;
    __int16 v17 = 2112;
    id v18 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Completed request to send invite from sender handle %@ with payload %@ to %@ with error %@",  (uint8_t *)&v11,  0x2Au);
  }

  if (!v3)
  {
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog IDSOffGridStateManager]( &OBJC_CLASS___IDSFoundationLog,  "IDSOffGridStateManager"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Reprovisioning on successful invite",  (uint8_t *)&v11,  2u);
    }

    unsigned int v9 = (void *)a1[7];
    [v9 _provisionOnInviteDebounceTimeInterval];
    objc_msgSend(v9, "_scheduleOffGridPayloadProvisioningTimerWithInterval:shouldForce:", 1);
  }

  uint64_t v10 = a1[8];
  if (v10) {
    (*(void (**)(uint64_t, void, void, void, id))(v10 + 16))(v10, a1[6], a1[4], a1[5], v3);
  }
}

void sub_1000CEE4C(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog IDSOffGridStateManager]( &OBJC_CLASS___IDSFoundationLog,  "IDSOffGridStateManager"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[4];
    int v9 = 138412546;
    uint64_t v10 = v5;
    __int16 v11 = 2112;
    id v12 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Completed request to remove invites for handles %@ with error %@",  (uint8_t *)&v9,  0x16u);
  }

  if (!v3)
  {
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog IDSOffGridStateManager]( &OBJC_CLASS___IDSFoundationLog,  "IDSOffGridStateManager"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v9) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Reprovisioning on successful invite removal",  (uint8_t *)&v9,  2u);
    }

    uint64_t v7 = (void *)a1[5];
    [v7 _provisionOnInviteDebounceTimeInterval];
    objc_msgSend(v7, "_scheduleOffGridPayloadProvisioningTimerWithInterval:shouldForce:", 1);
  }

  uint64_t v8 = a1[6];
  if (v8) {
    (*(void (**)(uint64_t, void, id))(v8 + 16))(v8, a1[4], v3);
  }
}

void sub_1000CF08C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog IDSOffGridStateManager]( &OBJC_CLASS___IDSFoundationLog,  "IDSOffGridStateManager"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v5;
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Completed request to remove all invites %@ with error %@",  (uint8_t *)&v7,  0x16u);
  }

  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, *(void *)(a1 + 32), v3);
  }
}

void sub_1000CF384(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog IDSOffGridStateManager]( &OBJC_CLASS___IDSFoundationLog,  "IDSOffGridStateManager"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Got CTStewieRequestContext: %@",  (uint8_t *)&v6,  0xCu);
  }

  id v5 = objc_alloc_init(&OBJC_CLASS___IDSOffGridModeOptions);
  [v5 setEntryPointSource:@"connectStewieWithCompletion:"];
  [*(id *)(a1 + 32) _connectStewieWithContext:v3 options:v5 withCompletion:*(void *)(a1 + 40)];
}

void sub_1000CFA28( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_1000CFA48(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000CFA58(uint64_t a1)
{
}

void sub_1000CFA60(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  if (v6) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), a3);
  }
  else {
    [*(id *)(a1 + 32) addObjectsFromArray:a2];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_1000CFAD0(void *a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog IDSOffGridStateManager]( &OBJC_CLASS___IDSFoundationLog,  "IDSOffGridStateManager"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL);
    int v6 = 138412546;
    uint64_t v7 = v3;
    __int16 v8 = 2112;
    uint64_t v9 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Completed fetch contacts %@ with fetchError %@",  (uint8_t *)&v6,  0x16u);
  }

  uint64_t result = a1[5];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  a1[4],  *(void *)(*(void *)(a1[6] + 8LL) + 40LL));
  }
  return result;
}

id sub_1000D005C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _offGridResetTimerFired];
}

id sub_1000D0130(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _resetOffGridModeIfRequired];
}

id sub_1000D0624(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _familyContactsDidChange];
}

void sub_1000D079C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  if (a3) {
    id v5 = v4;
  }
  else {
    id v5 = (id)objc_claimAutoreleasedReturnValue([v4 arrayByAddingObjectsFromArray:a2]);
  }
  id v6 = v5;
  [*(id *)(a1 + 40) _calloutToDelegateWithUpdatedContacts:v5];
}

id sub_1000D0968(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _offGridPayloadProvisioningTimerFiredShouldForce:*(unsigned __int8 *)(a1 + 40)];
}

id sub_1000D0A54(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _provisionOffGridPayloadsShouldForce:*(unsigned __int8 *)(a1 + 40)];
}

uint64_t sub_1000D1958(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));
  if (v3) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), kCTStewieAreAllPrimaryContactsReachableViaIML, v3);
  }

  [*(id *)(a1 + 40) setMetadata:*(void *)(a1 + 32)];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000D1FF0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5 && [v5 count])
  {
    id v19 = v6;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
    __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([v7 persistenceManager]);

    __int128 v23 = 0u;
    __int128 v24 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    id v20 = v5;
    id v9 = v5;
    id v10 = [v9 countByEnumeratingWithState:&v21 objects:v25 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v22;
      uint64_t v13 = IDSServiceNameiMessageLite;
      while (2)
      {
        for (uint64_t i = 0LL; i != v11; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v22 != v12) {
            objc_enumerationMutation(v9);
          }
          __int16 v15 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)i);
          uint64_t v16 = objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
          __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([(id)v16 registeredLocalURIsOnService:v13]);

          id v18 = (void *)objc_claimAutoreleasedReturnValue([v15 uri]);
          LOBYTE(v16) = [v8 hasUsableSenderKeyFor:v18 fromAny:v17];

          if ((v16 & 1) == 0)
          {
            (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();

            goto LABEL_14;
          }
        }

        id v11 = [v9 countByEnumeratingWithState:&v21 objects:v25 count:16];
        if (v11) {
          continue;
        }
        break;
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
LABEL_14:

    id v6 = v19;
    id v5 = v20;
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

id sub_1000D2340(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _clearSendKeyOnConnectTimerFired];
}

id sub_1000D2414(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _clearSendKeyOnConnect];
}

void sub_1000D3064(_Unwind_Exception *a1)
{
}

uint64_t sub_1000D3080(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog IDSOffGridStateManager]( &OBJC_CLASS___IDSFoundationLog,  "IDSOffGridStateManager"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = (void *)*((void *)WeakRetained + 8);
    uint64_t v4 = *((void *)WeakRetained + 9);
    *(_DWORD *)buf = 134218240;
    id v14 = v3;
    __int16 v15 = 2048;
    uint64_t v16 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Current OffGrid Mode:%ld Publish Status:%ld",  buf,  0x16u);
  }

  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog IDSOffGridStateManager]( &OBJC_CLASS___IDSFoundationLog,  "IDSOffGridStateManager"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = (void *)*((void *)WeakRetained + 16);
    uint64_t v7 = *((void *)WeakRetained + 17);
    *(_DWORD *)buf = 138412546;
    id v14 = v6;
    __int16 v15 = 2112;
    uint64_t v16 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Last provision details: Time %@ Error %@",  buf,  0x16u);
  }

  __int16 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog IDSOffGridStateManager]( &OBJC_CLASS___IDSFoundationLog,  "IDSOffGridStateManager"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*((id *)WeakRetained + 15) objectForKey:@"sent-payload-id"]);
    *(_DWORD *)buf = 138412290;
    id v14 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sent payload identifiers: %@", buf, 0xCu);
  }

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000D3284;
  v12[3] = &unk_1008F6010;
  void v12[4] = WeakRetained;
  cut_dispatch_log_queue(v12);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_1000D334C;
  v11[3] = &unk_1008F6010;
  void v11[4] = WeakRetained;
  cut_dispatch_log_queue(v11);

  return 0LL;
}

void sub_1000D3284(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog IDSOffGridStateManager_oversized]( &OBJC_CLASS___IDSFoundationLog,  "IDSOffGridStateManager_oversized"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) objectForKey:@"provisioned-payloads"]);
    int v4 = 138412290;
    id v5 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Provisioned payloads \n%@",  (uint8_t *)&v4,  0xCu);
  }
}

void sub_1000D334C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog IDSOffGridStateManager_oversized]( &OBJC_CLASS___IDSFoundationLog,  "IDSOffGridStateManager_oversized"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) invitedHandles]);
    int v4 = 138412290;
    id v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Invited handles: \n%@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1000D4AB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
}

uint64_t sub_1000D4ADC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000D4AEC(uint64_t a1)
{
}

void sub_1000D4AF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _registeredIdentityTimestamps]);
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);

  int v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDRegistrationListener sharedInstance](&OBJC_CLASS___IDSDRegistrationListener, "sharedInstance"));
  [v4 removeBlockForIdentifier:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];

  id v5 = (id)objc_claimAutoreleasedReturnValue(+[IDSRegistrationKeyManager sharedInstance](&OBJC_CLASS___IDSRegistrationKeyManager, "sharedInstance"));
  [v5 setForceRoll:*(unsigned __int8 *)(a1 + 56)];
}

uint64_t sub_1000D4F98(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1000D56C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKey:v5]);
  if ((objc_opt_isKindOfClass(v6, a1) & 1) != 0)
  {
    id v7 = v6;
  }

  else
  {
    if (v6)
    {
      __int16 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)) {
        sub_10069A5A0((uint64_t)v5, a1, v8);
      }
    }

    id v7 = 0LL;
  }

  return v7;
}

LABEL_5:
}

    return;
  }

  var0 = a3->var0;
  else {
    id v10 = bswap32(*((_DWORD *)var0 + 1));
  }
  id v11 = (unint64_t)var2 > 7;
  uint64_t v12 = (var0[2] << 24) | (var0[3] << 16) | (*var0 << 8) | var0[1];
  os_unfair_lock_lock(&self->_lock);
  *(void *)&buf = 0LL;
  *((void *)&buf + 1) = &buf;
  id v26 = 0x2020000000LL;
  uint64_t v27 = -1LL;
  portSignatures = self->_portSignatures;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  v17[2] = sub_1000F0164;
  v17[3] = &unk_1008FA190;
  v17[5] = &buf;
  v17[6] = a3;
  id v20 = v11;
  id v18 = v12;
  id v19 = v10;
  v17[4] = self;
  -[NSMutableArray enumerateObjectsUsingBlock:](portSignatures, "enumerateObjectsUsingBlock:", v17);
  if (*(void *)(*((void *)&buf + 1) + 24LL) == -1LL)
  {
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = sub_1001FF4E0((uint64_t)a3->var0, a3->var2);
      *(_DWORD *)__int128 v21 = 67109378;
      __int128 v22 = v12;
      __int128 v23 = 2080;
      __int128 v24 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Cannot find connection to reset for portSignature %08X packet %s",  v21,  0x12u);
    }
  }

  else
  {
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSGroupSessionMultiplexer sharedInstance]( &OBJC_CLASS___IDSGroupSessionMultiplexer,  "sharedInstance"));
    __int16 v15 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableArray objectAtIndexedSubscript:]( self->_routedConnections,  "objectAtIndexedSubscript:",  *(void *)(*((void *)&buf + 1) + 24LL)));
    -[os_log_s resetConnection:](v14, "resetConnection:", v15);
  }

  _Block_object_dispose(&buf, 8);
  os_unfair_lock_unlock(&self->_lock);
}

    kdebug_trace(722010220LL, 0LL, 0LL, 0LL, 0LL);
    __int16 v59 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString objectForKey:](v5, "objectForKey:", @"completionHandlerID"));
    uint64_t v12 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412802;
      uint64_t v73 = v5;
      id v74 = 2112;
      id v75 = v6;
      id v76 = 2112;
      id v77 = v59;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "opensocket [%@] context=[%@] (handlerID:%@) ***\n",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v14) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      uint64_t v54 = v6;
      uint64_t v56 = v59;
      uint64_t v52 = v5;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"opensocket [%@] context=[%@] (handlerID:%@) ***\n");
    }

    __int16 v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v5,  v52,  v54,  v56));
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKey:IDSDevicePropertyDefaultPairedDevice]);
    __int16 v17 = [v16 BOOLValue];

    if (v17)
    {
      [v15 setObject:kIDSDefaultPairedDeviceID forKey:IDSOpenSocketOptionCBUUIDKey];
    }

    else
    {
      id v20 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKey:IDSDevicePropertyNSUUID]);
      if (v20)
      {
        [v15 setObject:v20 forKey:IDSOpenSocketOptionCBUUIDKey];
      }

      else
      {
        __int128 v22 = OSLogHandleForIDSCategory("IDSDaemon");
        __int128 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "opensocket was called for a non-default device without nsuuid!!!!!!!!",  buf,  2u);
        }

        if (os_log_shim_legacy_logging_enabled(v24)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"opensocket was called for a non-default device without nsuuid!!!!!!!!");
        }

        [v15 setObject:kIDSDefaultPairedDeviceID forKey:IDSOpenSocketOptionCBUUIDKey];
      }
    }

    uint64_t v25 = IDSOpenSocketOptionClientIDKey;
    id v26 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString objectForKey:](v5, "objectForKey:", IDSOpenSocketOptionClientIDKey));
    if (v26)
    {
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v6 localObject]);
      id v28 = sub_1001103E8(v26, v27);
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
      [v15 setObject:v29 forKey:v25];
    }

    if ((v9 ^ 1 | v17) != 1) {
      goto LABEL_62;
    }
    uint64_t v30 = objc_claimAutoreleasedReturnValue(-[__CFString objectForKey:](v5, "objectForKey:", IDSOpenSocketOptionClientNameKey));
    uint64_t v31 = @"client";
    if (v30) {
      uint64_t v31 = (const __CFString *)v30;
    }
    uint64_t v58 = (__CFString *)v31;
    uint64_t v32 = OSLogHandleForTransportCategory("IDSDaemon");
    uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v73 = v58;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "%@ directly calling UTUN's openSocketWithOptions",  buf,  0xCu);
    }

    uint64_t v35 = os_log_shim_legacy_logging_enabled(v34);
    if ((_DWORD)v35)
    {
      if (_IDSShouldLogTransport(v35))
      {
        uint64_t v53 = v58;
        _IDSLogTransport(@"IDSDaemon", @"IDS", @"%@ directly calling UTUN's openSocketWithOptions");
        if (_IDSShouldLog(0LL, @"IDSDaemon"))
        {
          uint64_t v53 = v58;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"%@ directly calling UTUN's openSocketWithOptions");
        }
      }
    }

    __int16 v57 = 0LL;
    if (v63 && v60)
    {
      uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDeviceConnectionAWDMetrics sharedInstance]( &OBJC_CLASS___IDSDeviceConnectionAWDMetrics,  "sharedInstance"));
      __int16 v57 = (void *)objc_claimAutoreleasedReturnValue([v36 awdMetricsForConnectionUUID:v63]);
      id v37 = ids_monotonic_time(v57);
      int v38 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString objectForKey:](v5, "objectForKey:", @"service"));
      [v36 setServiceName:v38 forConnectionUUID:v63];

      [v60 doubleValue];
      objc_msgSend(v36, "setClientInitTime:forConnectionUUID:", v63);
      [v36 setDaemonOpenSocketTime:v63 forConnectionUUID:v37];
    }

    if (!v61)
    {
      uint64_t v42 = OSLogHandleForTransportCategory("IDSDaemon");
      BOOL v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        uint64_t v73 = v7;
        id v74 = 2112;
        id v75 = v63;
        _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "%@ didn't specify any priority for %@. This will use the default priority queue.",  buf,  0x16u);
      }

      id v45 = os_log_shim_legacy_logging_enabled(v44);
      if ((_DWORD)v45)
      {
        if (_IDSShouldLogTransport(v45))
        {
          uint64_t v53 = v7;
          uint64_t v55 = v63;
          _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"%@ didn't specify any priority for %@. This will use the default priority queue.");
          if (_IDSShouldLog(0LL, @"IDSDaemon"))
          {
            uint64_t v53 = v7;
            uint64_t v55 = v63;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"%@ didn't specify any priority for %@. This will use the default priority queue.");
          }
        }
      }

      uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 200LL, v53, v55));
      unsigned int v40 = (uint64_t)[v46 integerValue];

      goto LABEL_61;
    }

    id v39 = (uint64_t)[v61 integerValue];
    unsigned int v40 = v39;
    if (v39 > 599)
    {
      if (v39 != 600 && v39 != 700)
      {
        uint64_t v41 = v39 == 800;
LABEL_56:
        unsigned int v40 = 300LL;
        if (!v41) {
          unsigned int v40 = 200LL;
        }
        goto LABEL_61;
      }

      unsigned int v40 = 300LL;
    }

    else if (v39 != 100 && v39 != 200)
    {
      uint64_t v41 = v39 == 300;
      goto LABEL_56;
    }

    uint64_t v12 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v44 = v6;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "closesocket [%@]\n", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v14) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      id v37 = v6;
      _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"closesocket [%@]\n");
    }

    __int16 v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v6,  v37));
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKey:IDSDevicePropertyDefaultPairedDevice]);
    __int16 v17 = [v16 BOOLValue];

    if (v17)
    {
      [v15 setObject:kIDSDefaultPairedDeviceID forKey:IDSOpenSocketOptionCBUUIDKey];
    }

    else
    {
      id v20 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKey:IDSDevicePropertyNSUUID]);
      if (v20)
      {
        [v15 setObject:v20 forKey:IDSOpenSocketOptionCBUUIDKey];
      }

      else
      {
        __int128 v22 = OSLogHandleForIDSCategory("IDSDaemon");
        __int128 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "opensocket was called for a non-default device without nsuuid!!!!!!!!",  buf,  2u);
        }

        if (os_log_shim_legacy_logging_enabled(v24)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"opensocket was called for a non-default device without nsuuid!!!!!!!!");
        }

        [v15 setObject:kIDSDefaultPairedDeviceID forKey:IDSOpenSocketOptionCBUUIDKey];
      }

      if ((v9 & 1) != 0) {
        goto LABEL_34;
      }
    }

    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:IDSOpenSocketOptionAWDMetricsSuccessKey]);
    if ((objc_opt_respondsToSelector(v25, "BOOLValue") & 1) != 0) {
      id v26 = (unint64_t)[v25 BOOLValue];
    }
    else {
      id v26 = v25 != 0LL;
    }
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:IDSOpenSocketOptionAWDMetricsClientOpenSocketCompletionKey]);
    id v28 = objc_claimAutoreleasedReturnValue([v6 objectForKey:IDSOpenSocketOptionConnectionUUIDKey]);
    uint64_t v29 = (void *)v28;
    if (v27 && v28)
    {
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDeviceConnectionAWDMetrics sharedInstance]( &OBJC_CLASS___IDSDeviceConnectionAWDMetrics,  "sharedInstance"));
      [v27 doubleValue];
      objc_msgSend(v30, "setClientOpenSocketCompletionTime:forConnectionUUID:", v29);
      [v30 setSuccess:v26 forConnectionUUID:v29];
      [v30 reportAndRemoveForConnectionUUID:v29];
    }

    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(+[IDSUTunController sharedInstance](&OBJC_CLASS___IDSUTunController, "sharedInstance"));
    uint64_t v33 = im_primary_queue(v31, v32);
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
    v40[0] = _NSConcreteStackBlock;
    v40[1] = 3221225472LL;
    v40[2] = sub_10011AADC;
    v40[3] = &unk_1008FAEF0;
    uint64_t v41 = v7;
    uint64_t v42 = v17;
    [v31 closeSocketWithOptions:v15 queue:v34 completionHandler:v40];

LABEL_34:
  }

  self = self;
  __int128 v23 = self;
LABEL_10:

  return v23;
}

LABEL_34:
    __int128 v24 = 0;
    goto LABEL_35;
  }

  id v10 = v6[1];
  if (v10 != 1)
  {
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v30 = 67109120;
      uint64_t v31 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "got control message: invalid OTR version number: %d.",  (uint8_t *)&v30,  8u);
    }

    goto LABEL_5;
  }

  id v11 = v6 + 2;
  uint64_t v12 = __rev16(*((unsigned __int16 *)v6 + 1));
  uint64_t v13 = v7 - 4;
  if ((_DWORD)v12) {
    id v14 = v13 >= v12;
  }
  else {
    id v14 = 0;
  }
  if (v14)
  {
    __int16 v17 = -[NSString initWithBytes:length:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytes:length:encoding:",  v6 + 4,  v12,  4LL);
    if (!v17)
    {
      uint64_t v25 = OSLogHandleForTransportCategory("IDSNetworking");
      id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v30) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "control message: OTRNegotiation cannot decode token",  (uint8_t *)&v30,  2u);
      }

      id v28 = os_log_shim_legacy_logging_enabled(v27);
      if ((_DWORD)v28)
      {
        if (_IDSShouldLogTransport(v28))
        {
          _IDSLogTransport( @"IDSNetworking",  @"IDS",  @"control message: OTRNegotiation cannot decode token");
          if (_IDSShouldLog(0LL, @"IDSNetworking")) {
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSNetworking",  @"control message: OTRNegotiation cannot decode token");
          }
        }
      }

      goto LABEL_34;
    }

    __int16 v15 = v17;
    id v11 = &v6[v12 + 4];
    uint64_t v16 = (int)(v13 - v12);
  }

  else
  {
    __int16 v15 = 0LL;
    uint64_t v16 = v7 - 2;
  }

  if (v16 <= 5)
  {
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v30 = 67109376;
      uint64_t v31 = v7;
      uint64_t v32 = 2048;
      uint64_t v33 = (NSString *)v16;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "processOTRNegotiationMessage: totalLength: %u, dataBytesLeft: %lu",  (uint8_t *)&v30,  0x12u);
    }

  int v4 = 0LL;
LABEL_6:

  return v4;
}

    id v6 = 0LL;
  }

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL, __dst);
  }
}

  *a3 = result;
  a3[1] = v5;
  return result;
}

                  sub_10041D3BC(v71);
                  sub_1003F6050((uint64_t)v175, type metadata accessor for IDSDSessionKeyValueDeliveryLocalEntry);
                  swift_bridgeObjectRelease(v65);
                  uint64_t v3 = v177;
                  unsigned int v40 = v161;
                  id v45 = v163;
                  goto LABEL_6;
                }
              }
            }
          }

        id v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    __int128 v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    __int128 v22 = *v21;
    __int128 v23 = (-1LL << v3) - 1;
  }

  else
  {
    __int128 v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    __int128 v23 = *v21;
    __int128 v22 = (-1LL << result) - 1;
  }

  void *v21 = v23 & v22;
  __int128 v24 = *(void *)(a2 + 16);
  uint64_t v25 = __OFSUB__(v24, 1LL);
  id v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

  __int16 v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  id v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease(a1);
    id *v1 = v3;
    return result;
  }

  id v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }

        id v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  id v18 = *(void *)(v3 + 16);
  id v19 = __OFSUB__(v18, 1LL);
  id v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

        id v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    id v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    __int128 v21 = *v20;
    __int128 v22 = (-1LL << v3) - 1;
  }

  else
  {
    id v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    __int128 v22 = *v20;
    __int128 v21 = (-1LL << result) - 1;
  }

  os_log_s *v20 = v22 & v21;
  __int128 v23 = *(void *)(a2 + 16);
  __int128 v24 = __OFSUB__(v23, 1LL);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        id v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    id v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    __int128 v21 = *v20;
    __int128 v22 = (-1LL << v3) - 1;
  }

  else
  {
    id v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    __int128 v22 = *v20;
    __int128 v21 = (-1LL << result) - 1;
  }

  os_log_s *v20 = v22 & v21;
  __int128 v23 = *(void *)(a2 + 16);
  __int128 v24 = __OFSUB__(v23, 1LL);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

  uint64_t result = sub_100504184(0, v22 & ~(v22 >> 63), 0);
  if ((v22 & 0x8000000000000000LL) == 0)
  {
    uint64_t v53 = a2;
    uint64_t v54 = v18;
    if ((v21 & 0xC000000000000001LL) != 0)
    {
      __int128 v23 = 0LL;
      do
      {
        __int128 v24 = specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v21);
        uint64_t v25 = sub_10044026C();
        uint64_t v27 = v26;
        swift_unknownObjectRelease(v24, v26);
        uint64_t v29 = _swiftEmptyArrayStorage[2];
        id v28 = _swiftEmptyArrayStorage[3];
        if (v29 >= v28 >> 1) {
          sub_100504184(v28 > 1, v29 + 1, 1);
        }
        ++v23;
        _swiftEmptyArrayStorage[2] = v29 + 1;
        uint64_t v30 = &_swiftEmptyArrayStorage[2 * v29];
        void v30[4] = v25;
        v30[5] = v27;
      }

      while (v22 != v23);
    }

    else
    {
      uint64_t v31 = (void *)(v21 + 32);
      do
      {
        uint64_t v32 = *v31;
        swift_retain(*v31);
        uint64_t v33 = sub_10044026C();
        uint64_t v35 = v34;
        swift_release(v32);
        id v37 = _swiftEmptyArrayStorage[2];
        uint64_t v36 = _swiftEmptyArrayStorage[3];
        if (v37 >= v36 >> 1) {
          sub_100504184(v36 > 1, v37 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v37 + 1;
        int v38 = &_swiftEmptyArrayStorage[2 * v37];
        v38[4] = v33;
        v38[5] = v35;
        ++v31;
        --v22;
      }

      while (v22);
    }

    goto LABEL_23;
  }

  __break(1u);
  return result;
}

void sub_1000D5A64(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = a4;
  id v8 = a2;
  id v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "__imArrayByApplyingBlock:", &stru_1008F9858));
  (*(void (**)(uint64_t, id, id, id))(v6 + 16))(v6, v8, v9, v7);
}

id sub_1000D5AE4(id a1, IDSEndpoint *a2)
{
  v52[0] = @"URI";
  uint64_t v2 = a2;
  id v51 = (void *)objc_claimAutoreleasedReturnValue(-[IDSEndpoint URI](v2, "URI"));
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v51 description]);
  id v50 = (void *)v3;
  if (v3) {
    int v4 = (const __CFString *)v3;
  }
  else {
    int v4 = @"(null)";
  }
  v53[0] = v4;
  v52[1] = @"Push Token";
  id v49 = (void *)objc_claimAutoreleasedReturnValue(-[IDSEndpoint pushToken](v2, "pushToken"));
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v49 debugDescription]);
  id v48 = (void *)v5;
  if (v5) {
    uint64_t v6 = (const __CFString *)v5;
  }
  else {
    uint64_t v6 = @"(null)";
  }
  v53[1] = v6;
  void v52[2] = @"Session Token";
  uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(-[IDSEndpoint sessionToken](v2, "sessionToken"));
  uint64_t v7 = objc_claimAutoreleasedReturnValue([v47 debugDescription]);
  uint64_t v46 = (void *)v7;
  if (v7) {
    id v8 = (const __CFString *)v7;
  }
  else {
    id v8 = @"(null)";
  }
  v53[2] = v8;
  v52[3] = @"Refresh Date";
  id v45 = (void *)objc_claimAutoreleasedReturnValue(-[IDSEndpoint refreshDate](v2, "refreshDate"));
  uint64_t v9 = objc_claimAutoreleasedReturnValue([v45 description]);
  uint64_t v44 = (void *)v9;
  if (v9) {
    id v10 = (const __CFString *)v9;
  }
  else {
    id v10 = @"(null)";
  }
  v53[3] = v10;
  v52[4] = @"Expire Date";
  BOOL v43 = (void *)objc_claimAutoreleasedReturnValue(-[IDSEndpoint expireDate](v2, "expireDate"));
  uint64_t v11 = objc_claimAutoreleasedReturnValue([v43 description]);
  uint64_t v42 = (void *)v11;
  if (v11) {
    uint64_t v12 = (const __CFString *)v11;
  }
  else {
    uint64_t v12 = @"(null)";
  }
  v53[4] = v12;
  v52[5] = @"Legacy Message Protection Version";
  uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithChar:]( &OBJC_CLASS___NSNumber,  "numberWithChar:",  -[IDSEndpoint legacyVersion](v2, "legacyVersion")));
  uint64_t v13 = objc_claimAutoreleasedReturnValue([v41 description]);
  unsigned int v40 = (void *)v13;
  if (v13) {
    id v14 = (const __CFString *)v13;
  }
  else {
    id v14 = @"(null)";
  }
  void v53[5] = v14;
  v52[6] = @"Legacy Message Protection Identity";
  id v39 = (void *)objc_claimAutoreleasedReturnValue(-[IDSEndpoint serializedLegacyPublicIdentity](v2, "serializedLegacyPublicIdentity"));
  uint64_t v15 = objc_claimAutoreleasedReturnValue([v39 description]);
  int v38 = (void *)v15;
  if (v15) {
    uint64_t v16 = (const __CFString *)v15;
  }
  else {
    uint64_t v16 = @"(null)";
  }
  v53[6] = v16;
  v52[7] = @"NGM Message Protection Version";
  id v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithShort:]( &OBJC_CLASS___NSNumber,  "numberWithShort:",  -[IDSEndpoint ngmVersion](v2, "ngmVersion")));
  uint64_t v17 = objc_claimAutoreleasedReturnValue([v37 description]);
  id v18 = (void *)v17;
  if (v17) {
    id v19 = (const __CFString *)v17;
  }
  else {
    id v19 = @"(null)";
  }
  v53[7] = v19;
  v52[8] = @"NGM Message Protection Prekey";
  uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(-[IDSEndpoint serializedNGMDevicePrekey](v2, "serializedNGMDevicePrekey"));
  uint64_t v20 = objc_claimAutoreleasedReturnValue([v36 description]);
  __int128 v21 = (void *)v20;
  if (v20) {
    __int128 v22 = (const __CFString *)v20;
  }
  else {
    __int128 v22 = @"(null)";
  }
  v53[8] = v22;
  v52[9] = @"KT Loggable Data";
  __int128 v23 = (void *)objc_claimAutoreleasedReturnValue(-[IDSEndpoint KTLoggableData](v2, "KTLoggableData"));
  uint64_t v24 = objc_claimAutoreleasedReturnValue([v23 description]);
  uint64_t v25 = (void *)v24;
  if (v24) {
    id v26 = (const __CFString *)v24;
  }
  else {
    id v26 = @"(null)";
  }
  v53[9] = v26;
  v52[10] = @"KT Device Signature";
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(-[IDSEndpoint KTDeviceSignature](v2, "KTDeviceSignature"));
  uint64_t v28 = objc_claimAutoreleasedReturnValue([v27 description]);
  uint64_t v29 = (void *)v28;
  if (v28) {
    uint64_t v30 = (const __CFString *)v28;
  }
  else {
    uint64_t v30 = @"(null)";
  }
  v53[10] = v30;
  v52[11] = @"KT Mismatched Account Flag";
  else {
    uint64_t v31 = @"NO";
  }
  v53[11] = v31;
  v52[12] = @"KT Capable Flag";
  unsigned int v32 = -[IDSEndpoint ktCapableFlag](v2, "ktCapableFlag");

  if (v32) {
    uint64_t v33 = @"YES";
  }
  else {
    uint64_t v33 = @"NO";
  }
  v53[12] = v33;
  uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v53,  v52,  13LL));

  return v34;
}

void sub_1000D5FB4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  uint64_t v6 = sub_1000D6018(a3);
  id v7 = (id)objc_claimAutoreleasedReturnValue(v6);
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v7);
}

NSError *sub_1000D6018(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 userInfo]);
  id v3 = [v2 mutableCopy];

  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:NSUnderlyingErrorKey]);
  if (v4)
  {
    id v5 = (void *)v4;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:NSUnderlyingErrorKey]);
    uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSError, v7);
    char isKindOfClass = objc_opt_isKindOfClass(v6, v8);

    if ((isKindOfClass & 1) != 0)
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v1 userInfo]);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:NSUnderlyingErrorKey]);
      uint64_t v12 = sub_1000D6018();
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      [v3 setObject:v13 forKeyedSubscript:NSUnderlyingErrorKey];
    }
  }

  id v14 = (NSError *)objc_claimAutoreleasedReturnValue([v1 domain]);
  if (v14)
  {
    id v15 = [v1 code];

    if (v15)
    {
      uint64_t v16 = objc_alloc(&OBJC_CLASS___NSError);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v1 domain]);
      id v14 = -[NSError initWithDomain:code:userInfo:]( v16,  "initWithDomain:code:userInfo:",  v17,  [v1 code],  v3);
    }

    else
    {
      id v14 = 0LL;
    }
  }

  return v14;
}

void sub_1000D6268(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = sub_1000D6018(a2);
  id v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v4);
}

uint64_t sub_1000D6340(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000D63DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000D6478(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000D6514(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000D66BC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = sub_1000D6018(a2);
  id v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v4);
}

void sub_1000D6D6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 state] == (id)1)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0LL, v5);
  }

  else
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 value]);
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472LL;
    void v27[2] = sub_1000D6FD4;
    v27[3] = &unk_1008F9948;
    uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSMutableString);
    uint64_t v28 = v7;
    uint64_t v8 = objc_retainBlock(v27);
    uint64_t v9 = *(void *)(a1 + 32);
    if (v9)
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 clientDatasByServiceType]);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:*(void *)(a1 + 32)]);
      ((void (*)(void *, uint64_t, void *))v8[2])(v8, v9, v11);
    }

    else
    {
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 clientDatasByServiceType]);
      id v12 = [v10 countByEnumeratingWithState:&v23 objects:v29 count:16];
      if (v12)
      {
        id v13 = v12;
        __int128 v21 = v7;
        uint64_t v22 = a1;
        uint64_t v14 = *(void *)v24;
        do
        {
          for (uint64_t i = 0LL; i != v13; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v24 != v14) {
              objc_enumerationMutation(v10);
            }
            uint64_t v16 = *(void *)(*((void *)&v23 + 1) + 8LL * (void)i);
            uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "clientDatasByServiceType", v21, v22));
            id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:v16]);
            ((void (*)(void *, uint64_t, void *))v8[2])(v8, v16, v18);
          }

          id v13 = [v10 countByEnumeratingWithState:&v23 objects:v29 count:16];
        }

        while (v13);
        uint64_t v7 = v21;
        a1 = v22;
      }
    }

    uint64_t v19 = *(void *)(a1 + 40);
    id v20 = -[NSMutableString copy](v7, "copy");
    (*(void (**)(uint64_t, id, void))(v19 + 16))(v19, v20, 0LL);
  }
}

void sub_1000D6FD4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a3 debugDescription]);
  [v4 appendFormat:@"%@ => %@\n", v5, v6];
}

uint64_t sub_1000D7540(uint64_t a1)
{
  return IDSTransportThreadAssertRealTimeMode(*(unsigned __int8 *)(a1 + 32));
}

id sub_1000D75E8(id a1, id a2)
{
  id v2 = a2;
  id v3 = objc_alloc(&OBJC_CLASS___NSDate);
  [v2 doubleValue];
  double v5 = v4;

  return -[NSDate initWithTimeIntervalSince1970:](v3, "initWithTimeIntervalSince1970:", v5);
}

void sub_1000D7874(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v4 firewallNotificationCenter]);
  id v3 = -[IDSURI initWithUnprefixedURI:]( objc_alloc(&OBJC_CLASS___IDSURI),  "initWithUnprefixedURI:",  *(void *)(a1 + 32));
  [v2 postNotificationForURI:v3 onService:*(void *)(a1 + 40) shouldRateLimit:0 command:&off_100946BD0];
}

id sub_1000D7A64(uint64_t a1)
{
  return +[IDSTemporaryPhoneAlertManager presentSuccessAlertForUser:]( &OBJC_CLASS___IDSTemporaryPhoneAlertManager,  "presentSuccessAlertForUser:",  *(void *)(a1 + 32));
}

id sub_1000D7A78(uint64_t a1)
{
  return +[IDSTemporaryPhoneAlertManager attemptPresentationOfNearExpirationAlertForUser:]( &OBJC_CLASS___IDSTemporaryPhoneAlertManager,  "attemptPresentationOfNearExpirationAlertForUser:",  *(void *)(a1 + 32));
}

id sub_1000D7A8C(uint64_t a1)
{
  return +[IDSTemporaryPhoneAlertManager attemptPresentationOfExpirationAlertForUser:]( &OBJC_CLASS___IDSTemporaryPhoneAlertManager,  "attemptPresentationOfExpirationAlertForUser:",  *(void *)(a1 + 32));
}

uint64_t sub_1000D7D00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000D7E4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000D8138(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, void *a8)
{
  id v30 = a2;
  id v15 = a3;
  id v16 = a4;
  id v17 = a5;
  id v18 = a6;
  id v19 = a8;
  id v20 = *(void **)(a1 + 32);
  if (!v20
    || (__int128 v21 = (void *)objc_claimAutoreleasedReturnValue([v30 processName]),
        unsigned int v22 = [v20 containsObject:v21],
        v21,
        v22))
  {
    __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v30 processName]);
    __int128 v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithFormat:]( NSMutableString,  "stringWithFormat:",  @"%@[%lld]\n",  v23,  (int)[v30 pid]));

    sub_1000D838C(v24, @"services:", 1);
    sub_1000D8414(v24, v15, 2LL);
    sub_1000D838C(v24, @"notification services:", 1);
    sub_1000D8414(v24, v16, 2LL);
    sub_1000D838C(v24, @"entitlements:", 1);
    __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([v17 dictionaryRepresentation]);
    sub_1000D8414(v24, v25, 2LL);

    sub_1000D838C(v24, @"commands:", 1);
    __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v18 allObjects]);
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 sortedArrayUsingSelector:"compare:"]);

    sub_1000D8414(v24, v27, 2LL);
    sub_1000D838C(v24, @"capabilities:", 1);
    uint64_t v28 = IDSPrettyListOfEnabledCapabilities(a7);
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
    sub_1000D8414(v24, v29, 2LL);

    sub_1000D838C(v24, @"bundle ID:", 1);
    sub_1000D8414(v24, v19, 2LL);
    [*(id *)(a1 + 40) addObject:v24];
  }
}

void sub_1000D838C(void *a1, void *a2, int a3)
{
  uint64_t v4 = 2 * a3;
  id v5 = a2;
  id v6 = a1;
  id v7 = (id)objc_claimAutoreleasedReturnValue([&stru_100912B50 stringByPaddingToLength:v4 withString:@" " startingAtIndex:0]);
  [v6 appendFormat:@"%@%@\n", v7, v5];
}

void sub_1000D8414(void *a1, void *a2, uint64_t a3)
{
  id v5 = a1;
  id v6 = a2;
  uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSArray, v7);
  if ((objc_opt_isKindOfClass(v6, v8) & 1) != 0
    || (uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSSet, v9), (objc_opt_isKindOfClass(v6, v10) & 1) != 0))
  {
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    id v12 = v6;
    id v13 = -[__CFString countByEnumeratingWithState:objects:count:]( v12,  "countByEnumeratingWithState:objects:count:",  &v32,  v37,  16LL);
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v33;
      do
      {
        for (uint64_t i = 0LL; i != v14; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v33 != v15) {
            objc_enumerationMutation(v12);
          }
          sub_1000D8414(v5, *(void *)(*((void *)&v32 + 1) + 8LL * (void)i), a3);
        }

        id v14 = -[__CFString countByEnumeratingWithState:objects:count:]( v12,  "countByEnumeratingWithState:objects:count:",  &v32,  v37,  16LL);
      }

      while (v14);
    }

    if ((objc_opt_respondsToSelector(v12, "count") & 1) != 0 && !-[__CFString count](v12, "count")) {
      goto LABEL_22;
    }
  }

  else
  {
    uint64_t v17 = objc_opt_class(&OBJC_CLASS___NSDictionary, v11);
    if ((objc_opt_isKindOfClass(v6, v17) & 1) == 0)
    {
      uint64_t v27 = v5;
      __int128 v26 = v6;
      goto LABEL_24;
    }

    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    id v18 = v6;
    id v19 = -[__CFString countByEnumeratingWithState:objects:count:]( v18,  "countByEnumeratingWithState:objects:count:",  &v28,  v36,  16LL);
    if (v19)
    {
      id v20 = v19;
      uint64_t v21 = *(void *)v29;
      do
      {
        for (j = 0LL; j != v20; j = (char *)j + 1)
        {
          if (*(void *)v29 != v21) {
            objc_enumerationMutation(v18);
          }
          uint64_t v23 = *(void *)(*((void *)&v28 + 1) + 8LL * (void)j);
          __int128 v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@:", v23));
          sub_1000D8414(v5, v24, a3);

          __int128 v25 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString objectForKeyedSubscript:](v18, "objectForKeyedSubscript:", v23));
          sub_1000D8414(v5, v25, (a3 + 1));
        }

        id v20 = -[__CFString countByEnumeratingWithState:objects:count:]( v18,  "countByEnumeratingWithState:objects:count:",  &v28,  v36,  16LL);
      }

      while (v20);
    }

    if (!-[__CFString count](v18, "count"))
    {
LABEL_22:
      __int128 v26 = @"(None)";
      uint64_t v27 = v5;
LABEL_24:
      sub_1000D838C(v27, v26, a3);
    }
  }
}

void sub_1000D8758(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSTrafficMonitor);
  id v2 = (void *)qword_1009BE998;
  qword_1009BE998 = (uint64_t)v1;
}

id sub_1000D8A08(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _dailyTimerHandler];
}

id sub_1000D8AB0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _hourlyTimerHandler];
}

LABEL_56:
            id v49 = 0;
LABEL_124:

            uint64_t v21 = v49 != 0;
LABEL_125:
            -[NSRecursiveLock unlock](self->_lock, "unlock", v107, v110, v113);

            id v12 = v118;
            goto LABEL_126;
          }
        }
      }

      __int128 v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"peer%@-message-budget-daily-%@",  v25,  v11));
      unsigned int v40 = (void *)objc_claimAutoreleasedReturnValue( +[IDSServerBag sharedInstanceForBagType:]( &OBJC_CLASS___IDSServerBag,  "sharedInstanceForBagType:",  1LL));
      __int128 v28 = (__CFString *)objc_claimAutoreleasedReturnValue([v40 objectForKey:v26]);

      if ((int)-[__CFString intValue](v28, "intValue") >= 1)
      {
        uint64_t v41 = OSLogHandleForIDSCategory("Traffic");
        uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412802;
          uint64_t v123 = v25;
          uint64_t v124 = 2112;
          uint64_t v125 = v28;
          id v126 = 2112;
          __int128 v127 = v121;
          _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "     Server daily%@ budget is: %@   Current count is: %@",  buf,  0x20u);
        }

        if (os_log_shim_legacy_logging_enabled(v43) && _IDSShouldLog(0LL, @"Traffic"))
        {
          id v110 = v28;
          unsigned int v113 = v121;
          uint64_t v107 = v25;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"Traffic",  @"     Server daily%@ budget is: %@   Current count is: %@");
        }

        uint64_t v44 = -[__CFString unsignedLongLongValue](v121, "unsignedLongLongValue", v107, v110, v113);
        if (v44 > -[__CFString unsignedLongLongValue](v28, "unsignedLongLongValue"))
        {
          id v45 = OSLogHandleForTransportCategory("Traffic");
          uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412802;
            uint64_t v123 = v25;
            uint64_t v124 = 2112;
            uint64_t v125 = v28;
            id v126 = 2112;
            __int128 v127 = v121;
            _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "     **** We are over budget - Server service%@ budget is: %@   Current count is: %@",  buf,  0x20u);
          }

          id v48 = os_log_shim_legacy_logging_enabled(v47);
          if ((_DWORD)v48)
          {
            if (_IDSShouldLogTransport(v48))
            {
              id v110 = v28;
              unsigned int v113 = v121;
              uint64_t v107 = v25;
              _IDSLogTransport( @"Traffic",  @"IDS",  @"     **** We are over budget - Server service%@ budget is: %@   Current count is: %@");
              if (_IDSShouldLog(0LL, @"Traffic"))
              {
                id v110 = v28;
                unsigned int v113 = v121;
                uint64_t v107 = v25;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"Traffic",  @"     **** We are over budget - Server service%@ budget is: %@   Current count is: %@");
              }
            }
          }

          goto LABEL_56;
        }
}

        __int128 v24 = 0LL;
        unsigned int v22 = 0LL;
        goto LABEL_57;
      }

      uint64_t v119 = -[NSString initWithBytes:length:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytes:length:encoding:",  (char *)v9 + 2,  v15,  4LL);
      if (!v119)
      {
        __int128 v34 = OSLogHandleForTransportCategory("IDSNetworking");
        __int128 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v122;
          _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "%@: control message: hello cannot decode productVersion",  buf,  0xCu);
        }

        id v37 = os_log_shim_legacy_logging_enabled(v36);
        if ((_DWORD)v37)
        {
          if (_IDSShouldLogTransport(v37))
          {
            _IDSLogTransport( @"IDSNetworking",  @"IDS",  @"%@: control message: hello cannot decode productVersion");
            if (_IDSShouldLog(0LL, @"IDSNetworking")) {
              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSNetworking",  @"%@: control message: hello cannot decode productVersion");
            }
          }
        }

        int v38 = 1;
LABEL_128:

        if (v38)
        {
LABEL_129:
          a4 = 0LL;
          goto LABEL_131;
        }

  if (v62)
  {
    sub_100558064(v62);
    uint64_t v62 = 0LL;
  }

  id v48 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100136F7C;
  block[3] = &unk_1008F92D8;
  __int16 v59 = *(id *)(a1 + 40);
  __int16 v57 = *(id *)(a1 + 32);
  uint64_t v58 = v12;
  id v49 = v12;
  dispatch_async(v48, block);
}

    BOOL v43 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      id v60 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "Using non-urgent internet send probability %f for the current window.",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v45) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Using non-urgent internet send probability %f for the current window.");
    }
    goto LABEL_61;
  }

  uint64_t v27 = OSLogHandleForIDSCategory("Warning");
  __int128 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    id v60 = *(double *)&v52;
    _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "Non-urgent internet send probability windows is not of the correct type! Returning probability = 1.0. %@",  buf,  0xCu);
  }

  uint64_t v7 = 1.0;
  __int128 v30 = os_log_shim_legacy_logging_enabled(v29);
  __int128 v31 = v52;
  if (v30)
  {
    _IDSWarnV( @"IDSFoundation",  @"Non-urgent internet send probability windows is not of the correct type! Returning probability = 1.0. %@");
    _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Non-urgent internet send probability windows is not of the correct type! Returning probability = 1.0. %@");
    _IDSLogTransport( @"Warning",  @"IDS",  @"Non-urgent internet send probability windows is not of the correct type! Returning probability = 1.0. %@");
LABEL_61:
    __int128 v31 = v52;
  }

  return v7;
}

          swift_release(v50);
          return v2;
        }
      }
    }

void sub_1000DA83C(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSQuickSwitchHelper);
  id v2 = (void *)qword_1009BE9A8;
  qword_1009BE9A8 = (uint64_t)v1;
}

void sub_1000DAC9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = v3;
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
    id v6 = (char *)[v5 activatePairedDeviceWithCBUUID:*(void *)(a1 + 32)];

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance"));
    [v7 addUTunPeerWithDeviceUniqueID:IDSDeviceDefaultPairedDeviceUniqueID btuuid:*(void *)(a1 + 32)];

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance"));
    [v8 prepareForQuickSwitch];

    if ((unint64_t)(v6 - 2) >= 3)
    {
      uint64_t v10 = OSLogHandleForIDSCategory("WatchPairing");
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v25) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Finishing up switching",  (uint8_t *)&v25,  2u);
      }

      if (os_log_shim_legacy_logging_enabled(v12)
        && _IDSShouldLog(0LL, @"WatchPairing"))
      {
        _IDSLogV(0LL, @"IDSFoundation", @"WatchPairing", @"Finishing up switching");
      }

      id v13 = (void *)objc_claimAutoreleasedReturnValue(+[IDSUTunController sharedInstance](&OBJC_CLASS___IDSUTunController, "sharedInstance"));
      [v13 addPairedDevice:*(void *)(a1 + 32)];

      id v14 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
      [v14 ensureCommunicationWithActivePairedDeviceIsPossible];

      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance"));
      [v15 updatecloudDeliveryStateOnDefaultPeer];

      id v16 = (void *)objc_claimAutoreleasedReturnValue(+[IDSAccountSync sharedInstance](&OBJC_CLASS___IDSAccountSync, "sharedInstance"));
      [v16 resetAndResynchronizeEverything];

      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
      [v17 _processStoredMessagesIncludingClassD:1];

      if (*(_BYTE *)(a1 + 64))
      {
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance"));
        [v9 ensureLocalSetupInProgressConsistencyAfterQWS];
      }

      else
      {
        id v18 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v18 pairedDeviceUniqueID]);

        id v19 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
        id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 broadcasterWithMessageContext:0]);

        [v20 didSwitchActivePairedDevice:v9];
      }

      uint64_t v4 = 0LL;
    }

    else
    {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSLocalPairingErrorDomain,  qword_100717518[(void)(v6 - 2)],  0LL));
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[IMRGLog watchPairing](&OBJC_CLASS___IMRGLog, "watchPairing"));
      if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_DEFAULT))
      {
        int v25 = 138412290;
        double v26 = *(double *)&v4;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v9,  OS_LOG_TYPE_DEFAULT,  "QuickSwitch initiated with error: %@",  (uint8_t *)&v25,  0xCu);
      }
    }

    uint64_t v21 = *(void *)(a1 + 48);
    if (v21) {
      (*(void (**)(uint64_t, void *))(v21 + 16))(v21, v4);
    }
    [*(id *)(a1 + 40) _setIsQuickSwitchingToAnotherDevice:0];
    unsigned int v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog watchPairing](&OBJC_CLASS___IMRGLog, "watchPairing"));
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
      double v24 = v23 - *(double *)(a1 + 56);
      int v25 = 134217984;
      double v26 = v24;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "QuickSwitch time %f", (uint8_t *)&v25, 0xCu);
    }
  }
}

void sub_1000DB198(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 pairedDeviceUniqueID]);

  if ([v3 length])
  {
    uint64_t v34 = a1;
    __int128 v35 = v3;
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 accountsOfAdHocType:2]);

    id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    id v7 = v5;
    id v8 = [v7 countByEnumeratingWithState:&v39 objects:v43 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v40;
      do
      {
        for (uint64_t i = 0LL; i != v9; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v40 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(void *)(*((void *)&v39 + 1) + 8LL * (void)i);
          id v13 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
          id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 accountWithUniqueID:v12]);

          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 service]);
          unsigned __int8 v16 = [v15 allowPendingMessagesForInactiveDevice];

          if ((v16 & 1) == 0) {
            -[NSMutableSet addObject:](v6, "addObject:", v12);
          }
        }

        id v9 = [v7 countByEnumeratingWithState:&v39 objects:v43 count:16];
      }

      while (v9);
    }

    a1 = v34;
    if (*(_BYTE *)(v34 + 40))
    {
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v6, "allObjects"));
      id v3 = v35;
      +[IDSDMessageStore markAllMessageAsPendingDeleteForAccounts:withDestinationDevice:]( &OBJC_CLASS___IDSDMessageStore,  "markAllMessageAsPendingDeleteForAccounts:withDestinationDevice:",  v17,  v35);
    }

    else
    {
      id v3 = v35;
      +[IDSDMessageStore markOutgoingMessagesAsUnsentForDestination:]( &OBJC_CLASS___IDSDMessageStore,  "markOutgoingMessagesAsUnsentForDestination:",  v35);
    }
  }

  if (*(_BYTE *)(a1 + 40))
  {
    id v18 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
    [v18 deactivatePairedDevices];

    id v19 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
    id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 broadcasterWithMessageContext:0]);

    [v20 deactivatePairedDevices];
  }

  uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog watchPairing](&OBJC_CLASS___IMRGLog, "watchPairing"));
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Removing the keychain and in-memory data used for OTR communication.",  buf,  2u);
  }

  unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue(+[IDSOTRKeyStorage sharedInstance](&OBJC_CLASS___IDSOTRKeyStorage, "sharedInstance"));
  [v22 removeSessionKeyForAllTokenFromMainQueue];

  double v23 = (void *)objc_claimAutoreleasedReturnValue(+[IDSOTRController sharedInstance](&OBJC_CLASS___IDSOTRController, "sharedInstance"));
  [v23 removeAllCachedSessionsFromMainQueue];

  double v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog watchPairing](&OBJC_CLASS___IMRGLog, "watchPairing"));
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Resetting all OTR sessions to allow communication with the new active paired device.",  buf,  2u);
  }

  int v25 = (void *)objc_claimAutoreleasedReturnValue(+[IDSOTRController sharedInstance](&OBJC_CLASS___IDSOTRController, "sharedInstance"));
  [v25 resetAllSessions];

  if (*(_BYTE *)(a1 + 40)) {
    uint64_t v26 = 24LL;
  }
  else {
    uint64_t v26 = 31LL;
  }
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[IDSUTunDeliveryController sharedInstance](&OBJC_CLASS___IDSUTunDeliveryController, "sharedInstance"));
  uint64_t v28 = IDSDeviceDefaultPairedDeviceUniqueID;
  [v27 removeUTunPeerWithDeviceUniqueID:IDSDeviceDefaultPairedDeviceUniqueID btuuid:0 reason:v26 shouldWait:1];

  __int128 v29 = (void *)objc_claimAutoreleasedReturnValue(+[IDSUTunController sharedInstance](&OBJC_CLASS___IDSUTunController, "sharedInstance"));
  [v29 tearDownEncryptionForDeviceUniqueID:v28 cbuuid:0];

  __int128 v30 = (void *)objc_claimAutoreleasedReturnValue(+[IDSUTunController sharedInstance](&OBJC_CLASS___IDSUTunController, "sharedInstance"));
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3221225472LL;
  v36[2] = sub_1000DB5C8;
  v36[3] = &unk_1008F6330;
  id v37 = *(id *)(a1 + 32);
  uint64_t v32 = im_primary_queue(v37, v31);
  __int128 v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
  [v30 obliterateConnectionInfoWithCompletionBlock:v36 completionQueue:v33];
}

uint64_t sub_1000DB5C8(uint64_t result)
{
  if (*(void *)(result + 32))
  {
    uint64_t v1 = result;
    uint64_t v2 = OSLogHandleForIDSCategory("WatchPairing");
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Calling completion block to finish switching",  v5,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v4))
    {
      if (_IDSShouldLog(0LL, @"WatchPairing")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"WatchPairing",  @"Calling completion block to finish switching");
      }
    }

    return (*(uint64_t (**)(void))(*(void *)(v1 + 32) + 16LL))();
  }

  return result;
}

void sub_1000DB6E4(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___IDSAccountSync);
  uint64_t v2 = (void *)qword_1009BE9B8;
  qword_1009BE9B8 = (uint64_t)v1;
}

id sub_1000DBCD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (([v3 isEqualToString:@"PreferredAccount"] & 1) != 0
    || ([v3 isEqualToString:@"FetchRemote"] & 1) != 0
    || ([v3 isEqualToString:@"TinkerDeviceInfo"] & 1) != 0)
  {
    uint64_t v4 = 0LL;
  }

  else
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serviceController]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v6 serviceWithIdentifier:v3]);
  }

  return v4;
}

id sub_1000DBF48(uint64_t a1, uint64_t a2)
{
  return +[IDSAccountSync retryTimeForKey:attempts:]( &OBJC_CLASS___IDSAccountSync,  "retryTimeForKey:attempts:",  *(void *)(a1 + 32),  a2);
}

uint64_t sub_1000DBF60(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000DC288(_Unwind_Exception *a1)
{
}

void sub_1000DC2A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained syncCredential]);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 48);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) pairingManager]);
  uint64_t v9 = [v8 activePairedDeviceHasPairingType:1] ^ 1;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_1000DC3E4;
  v14[3] = &unk_1008F9B28;
  objc_copyWeak(&v18, (id *)(a1 + 72));
  id v10 = *(id *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 56);
  id v15 = v10;
  uint64_t v16 = v11;
  id v12 = v3;
  id v17 = v12;
  [v5 sendAccountSyncMessage:v13 messageID:v6 queueOneIdentifier:v7 allowCloudFallback:v9 completionBlock:v14];

  objc_destroyWeak(&v18);
}

void sub_1000DC3D0(_Unwind_Exception *a1)
{
}

void sub_1000DC3E4(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog accountSync](&OBJC_CLASS___IMRGLog, "accountSync"));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = @"NO";
    if (a2) {
      uint64_t v7 = @"YES";
    }
    int v10 = 138412546;
    id v11 = v5;
    __int16 v12 = 2112;
    uint64_t v13 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Sent account sync message (message ID: %@) (success: %@)",  (uint8_t *)&v10,  0x16u);
  }

  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained currentInFlightSyncAttempts]);
    [v9 setObject:0 forKeyedSubscript:*(void *)(a1 + 32)];

    [*(id *)(a1 + 40) saveTracking];
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000DD22C(_Unwind_Exception *a1)
{
}

void sub_1000DD250(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained syncCredential]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allObjects]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _OWORD v8[2] = sub_1000DD318;
  v8[3] = &unk_1008F82D8;
  void v8[4] = *(void *)(a1 + 40);
  id v9 = v3;
  id v7 = v3;
  [v5 fetchRemoteAccountsOfServiceTypes:v6 withCompletionBlock:v8];
}

void sub_1000DD318(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog accountSync](&OBJC_CLASS___IMRGLog, "accountSync"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 allKeys]);
    *(_DWORD *)buf = 138412290;
    id v19 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Received remote account information {accountInfoMapKey: %@}",  buf,  0xCu);
  }

  if (v3)
  {
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "allKeys", 0));
    id v7 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v14;
      do
      {
        for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v14 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = *(void *)(*((void *)&v13 + 1) + 8LL * (void)i);
          __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v3 _arrayForKey:v11]);
          [*(id *)(a1 + 32) synchronizeAccountsWithRemoteInfo:v12 service:v11];
        }

        id v8 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }

      while (v8);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_1000DE178(id a1, id a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKeyedSubscript:kIDSServiceDefaultsAliasKey]);
  if ([v2 length]) {
    id v3 = v2;
  }
  else {
    id v3 = 0LL;
  }
  id v4 = v3;

  return v4;
}

id sub_1000DE438(id a1, IDSDAccount *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount accountInfo](a2, "accountInfo"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:kIDSServiceDefaultsAliasesKey]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "__imArrayByApplyingBlock:", &stru_1008F9BF8));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 firstObject]);

  return v5;
}

id sub_1000DE4B0(id a1, id a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKeyedSubscript:kIDSServiceDefaultsAliasKey]);
  if ([v2 length]) {
    id v3 = v2;
  }
  else {
    id v3 = 0LL;
  }
  id v4 = v3;

  return v4;
}

id sub_1000DF2C8(id a1, NSDictionary *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", kIDSServiceDefaultsLoginAsKey));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 lowercaseString]);

  return v3;
}

id sub_1000E0088(id a1, id a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKeyedSubscript:kIDSServiceDefaultsAliasKey]);
  if ([v2 length]) {
    id v3 = v2;
  }
  else {
    id v3 = 0LL;
  }
  id v4 = v3;

  return v4;
}

BOOL sub_1000E00D8(id a1, id a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKeyedSubscript:kIDSServiceDefaultsAliasKey]);
  char v3 = [v2 isEqualToString:kIDSServiceDefaultsSentinelAlias] ^ 1;

  return v3;
}

BOOL sub_1000E0128(id a1, id a2)
{
  return [a2 isEqualToIgnoringCase:kIDSServiceDefaultsSentinelAlias] ^ 1;
}

void sub_1000E0150(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue([v2 accountController]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);

  [v5 enablePrimaryAccountWithUniqueID:v4];
}

void sub_1000E01B4(id a1, id a2)
{
}

LABEL_24:
            }

            else if (!v54 && ([v19 shouldNotSyncPhoneNumberAccounts] & 1) == 0)
            {
              uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(-[IDSAccountSync accountController](self, "accountController"));
              uint64_t v26 = (id)objc_claimAutoreleasedReturnValue([v31 localAccountOnService:v19]);

              uint64_t v32 = [v53 mutableCopy];
              [v32 removeObjectForKey:v52];
              [v32 removeObjectForKey:v51];
              [v32 removeObjectForKey:v50];
              [v32 removeObjectForKey:v49];
              [v26 _updateAccountWithAccountInfo:v32];

              goto LABEL_24;
            }
          }

          id v18 = (char *)v18 + 1;
        }

        while (v18 != v16);
        __int128 v33 = [v14 countByEnumeratingWithState:&v68 objects:v75 count:16];
        __int128 v16 = v33;
        if (!v33) {
          goto LABEL_53;
        }
      }
    }
  }
}

LABEL_25:
LABEL_26:

    if (a4)
    {
      uint64_t v11 = v11;
      id v17 = 0LL;
      *a4 = v11;
    }

    else
    {
      id v17 = 0LL;
    }

    goto LABEL_29;
  }

  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Deserialized cluster", buf, 2u);
  }

LABEL_29:
  return v17;
}

      if (!v14) {
        __int128 v14 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      }
      -[NSMutableArray addObject:](v14, "addObject:", v18);
      __int128 v15 = 1;
    }

    __int128 v13 = [obj countByEnumeratingWithState:&v43 objects:v52 count:16];
  }

  while (v13);
LABEL_31:

  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  uint64_t v28 = v14;
  __int128 v29 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v28,  "countByEnumeratingWithState:objects:count:",  &v39,  v47,  16LL);
  if (v29)
  {
    __int128 v30 = v29;
    uint64_t v31 = *(void *)v40;
    do
    {
      for (j = 0LL; j != v30; j = (char *)j + 1)
      {
        if (*(void *)v40 != v31) {
          objc_enumerationMutation(v28);
        }
        -[IDSDAccountController _removeAccount:]( v34,  "_removeAccount:",  *(void *)(*((void *)&v39 + 1) + 8LL * (void)j));
      }

      __int128 v30 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v28,  "countByEnumeratingWithState:objects:count:",  &v39,  v47,  16LL);
    }

    while (v30);
  }

  id v8 = v35;
LABEL_39:

  return v9;
}

  return v13;
}

LABEL_25:
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL)) {
    uint64_t v34 = 1;
  }
  else {
    uint64_t v34 = *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) != 0;
  }
  *a4 = v34;
}
        }

        id v18 = [obj countByEnumeratingWithState:&v53 objects:v60 count:16];
      }

      while (v18);
    }

    os_unfair_lock_unlock(lock);

    int v10 = v36;
    uint64_t v11 = v38;
  }

  else
  {
    __int128 v33 = im_primary_queue(v15, v16);
    uint64_t v34 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v33);
    v57[0] = _NSConcreteStackBlock;
    v57[1] = 3221225472LL;
    v57[2] = sub_100187564;
    v57[3] = &unk_1008F5F80;
    v57[4] = self;
    uint64_t v58 = v11;
    dispatch_async(v34, v57);

    os_unfair_lock_unlock(&self->_lock);
  }
}

  return v8 & 1;
}

  return (char)v6;
}

  return v9;
}

    __int128 v39 = 0;
    goto LABEL_33;
  }

  int v25 = (void **)sub_100290030(a5, v11, v10, v9, v51);
  uint64_t v26 = sub_1002900D8((uint64_t)v25);
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
  sub_10028B400(v25);
  __int128 v29 = objc_opt_class(&OBJC_CLASS___NSMutableDictionary, v28);
  if ((objc_opt_isKindOfClass(v22, v29) & 1) != 0)
  {
    [v22 setObject:v27 forKey:kIDSQRAllocateKey_QRConnectStatus];
    __int128 v30 = v22;
  }

  else
  {
    __int128 v30 = [v22 mutableCopy];

    [v30 setObject:v27 forKey:kIDSQRAllocateKey_QRConnectStatus];
    -[IDSQuickRelayAllocator _setResponseForQRGroupID:groupID:](self, "_setResponseForQRGroupID:groupID:", v30, v15);
  }

  __int128 v40 = OSLogHandleForTransportCategory("QRAllocator");
  __int128 v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v53 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "Cached response modified for relay sessionID %@",  buf,  0xCu);
  }

  BOOL v43 = os_log_shim_legacy_logging_enabled(v42);
  if ((_DWORD)v43)
  {
    if (_IDSShouldLogTransport(v43))
    {
      _IDSLogTransport(@"QRAllocator", @"IDS", @"Cached response modified for relay sessionID %@");
      if (_IDSShouldLog(0LL, @"QRAllocator")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"Cached response modified for relay sessionID %@");
      }
    }
  }

  __int128 v39 = 1;
  unsigned int v22 = v30;
LABEL_33:

  return v39;
}

  os_unfair_lock_lock(&self->_lock);
  if ([v119 count])
  {
    int v38 = (void *)objc_claimAutoreleasedReturnValue([v119 objectAtIndex:0]);
    uint64_t v117 = (void *)objc_claimAutoreleasedReturnValue([v38 request]);
  }

  else
  {
    uint64_t v117 = 0LL;
  }

  os_unfair_lock_unlock(&self->_lock);
  theDict = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  __int128 v39 = (void *)objc_claimAutoreleasedReturnValue(-[IDSQuickRelayAllocator _findSessionWithID:](self, "_findSessionWithID:", v120));
  if (v39)
  {
    if (v117)
    {
      unsigned int v113 = (void *)objc_claimAutoreleasedReturnValue([v117 appID]);
      id v114 = (void *)objc_claimAutoreleasedReturnValue([v117 senderURI]);
    }

    else
    {
      unsigned int v113 = (void *)objc_claimAutoreleasedReturnValue([v39 getAppID]);
      id v45 = (void *)objc_claimAutoreleasedReturnValue([v39 fromURI]);
      id v114 = (void *)objc_claimAutoreleasedReturnValue([v45 prefixedURI]);
    }

    if (v125)
    {
      uint64_t v46 = -[NSData initWithBytes:length:](objc_alloc(&OBJC_CLASS___NSData), "initWithBytes:length:", &v125, 4LL);
      -[__CFDictionary setValue:forKey:](theDict, "setValue:forKey:", v46, kIDSQRAllocateKey_SenderExternalAddress);
    }

    -[__CFDictionary setValue:forKey:](theDict, "setValue:forKey:", v113, kIDSQRAllocateKey_AppID, v101);
    uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a6));
    -[__CFDictionary setValue:forKey:](theDict, "setValue:forKey:", v47, kIDSQRAllocateKey_AllocateType);

    id v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a14));
    -[__CFDictionary setValue:forKey:](theDict, "setValue:forKey:", v48, kIDSQRAllocateKey_PreferredRemoteInterface);

    if (a12)
    {
      if (a6 == 3)
      {
        id v49 = OSLogHandleForTransportCategory("QRAllocator");
        id v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "Ignore self allocation for shared session",  buf,  2u);
        }

        uint64_t v52 = os_log_shim_legacy_logging_enabled(v51);
        uint64_t v53 = v117;
        if ((_DWORD)v52)
        {
          uint64_t v54 = _IDSShouldLogTransport(v52);
          uint64_t v53 = v117;
          if (v54)
          {
            _IDSLogTransport(@"QRAllocator", @"IDS", @"Ignore self allocation for shared session");
            uint64_t v55 = _IDSShouldLog(0LL, @"QRAllocator");
            uint64_t v53 = v117;
            if (v55)
            {
              _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"Ignore self allocation for shared session");
              uint64_t v53 = v117;
            }
          }
        }

        goto LABEL_53;
      }

      -[__CFDictionary setValue:forKey:]( theDict,  "setValue:forKey:",  &off_100947830,  kIDSQRAllocateKey_SelfAllocationCount);
    }

    uint64_t v53 = v117;
    if (a6 == 3)
    {
LABEL_53:
      __int16 v59 = v53 == 0LL;
      id v60 = (void *)objc_claimAutoreleasedReturnValue([v39 groupID]);
      uint64_t v61 = v60;
      if (v59) {
        uint64_t v62 = v60;
      }
      else {
        uint64_t v62 = (id)objc_claimAutoreleasedReturnValue([v117 groupID]);
      }
      uint64_t v73 = v62;
      if (v62)
      {
        CFDictionarySetValue(theDict, kIDSQRAllocateKey_GroupID, v62);
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1006A5D8C();
      }

      if (v61)
      {
        if (![v119 count])
        {
          id v74 = (void *)objc_claimAutoreleasedReturnValue(-[IDSQuickRelayAllocator _uuidFromNSStringToNSData:](self, "_uuidFromNSStringToNSData:", v116));
          -[IDSQuickRelayAllocator _addConnectStatus:relaySessionID:previousTime:qrReason:previousError:previousRelayIP:previousAccessToken:]( self,  "_addConnectStatus:relaySessionID:previousTime:qrReason:previousError:previousRelayIP:previousAccessToken:",  v61,  v74,  a8,  v15,  a9,  a10,  v115);
        }
      }

      else
      {
        id v75 = OSLogHandleForTransportCategory("QRAllocator");
        id v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)__int128 v127 = v120;
          _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEFAULT,  "No groupID for shared session %@",  buf,  0xCu);
        }

        id v78 = os_log_shim_legacy_logging_enabled(v77);
        if ((_DWORD)v78)
        {
          if (_IDSShouldLogTransport(v78))
          {
            double v102 = (int64_t)v120;
            _IDSLogTransport(@"QRAllocator", @"IDS", @"No groupID for shared session %@");
            if (_IDSShouldLog(0LL, @"QRAllocator"))
            {
              double v102 = (int64_t)v120;
              _IDSLogV(0LL, @"IDSFoundation", @"QRAllocator", @"No groupID for shared session %@");
            }
          }
        }
      }

LABEL_88:
      uint64_t v79 = OSLogHandleForTransportCategory("QRAllocator");
      uint64_t v80 = (os_log_s *)objc_claimAutoreleasedReturnValue(v79);
      if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v81 = (void *)objc_claimAutoreleasedReturnValue([v39 destinations]);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)__int128 v127 = a6;
        *(_WORD *)&v127[4] = 2112;
        *(void *)&v127[6] = v81;
        *(_WORD *)&v127[14] = 2112;
        *(void *)&v127[16] = v120;
        uint64_t v128 = 2112;
        __int128 v129 = v114;
        _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_DEFAULT,  "need to do ID query: allocateType: %d, destinations: %@, sessionID: %@, fromURI: %@",  buf,  0x26u);
      }

      __int128 v83 = os_log_shim_legacy_logging_enabled(v82);
      if ((_DWORD)v83)
      {
        if (_IDSShouldLogTransport(v83))
        {
          uint64_t v106 = v120;
          uint64_t v109 = v114;
          double v102 = a6;
          id v104 = (void *)objc_claimAutoreleasedReturnValue([v39 destinations]);
          _IDSLogTransport( @"QRAllocator",  @"IDS",  @"need to do ID query: allocateType: %d, destinations: %@, sessionID: %@, fromURI: %@");

          if (_IDSShouldLog(0LL, @"QRAllocator"))
          {
            uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "destinations", a6, v104, v120, v114));
            uint64_t v106 = v120;
            uint64_t v109 = v114;
            double v102 = a6;
            id v104 = v84;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"need to do ID query: allocateType: %d, destinations: %@, sessionID: %@, fromURI: %@");
          }
        }
      }

      uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "destinations", v102, v104, v106, v109));
      uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue([v85 allObjects]);
      uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue([v39 getCallerCert]);
      uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue([v39 getFromService]);
      BYTE4(v107) = 1;
      LODWORD(v107) = a15;
      uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue( -[IDSQuickRelayAllocator _setupNewAllocation:sessionID:isSessionIDRemoteDeviceID:fromIdentity:fromURI:fromService:options:connectReadyHandler:withPreferredLocalInterface:forAdditionalAllocation:]( self,  "_setupNewAllocation:sessionID:isSessionIDRemoteDeviceID:fromIdentity:fromURI:fromService:options :connectReadyHandler:withPreferredLocalInterface:forAdditionalAllocation:",  v86,  v120,  a13,  v87,  v114,  v88,  theDict,  0LL,  v107));

      goto LABEL_118;
    }

    if (a6 == 2)
    {
      uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(-[IDSQuickRelayAllocator _getSelfAllocationFromCache:](self, "_getSelfAllocationFromCache:", v120));
      __int16 v57 = v56;
      if (v56)
      {
        uint64_t v58 = v56;
      }

      else
      {
        LODWORD(v106) = a15;
        uint64_t v58 = (id)objc_claimAutoreleasedReturnValue( -[IDSQuickRelayAllocator _setupAllocation:fromURI:sessionID:isSessionIDRemoteDeviceID:options:prevConnectStatus:requestUUID:connectReadyHandler:withPreferredLocalInterface:]( self,  "_setupAllocation:fromURI:sessionID:isSessionIDRemoteDeviceID:options:prevConnectStatus:requestUUID :connectReadyHandler:withPreferredLocalInterface:",  0LL,  v114,  v120,  a13,  theDict,  0LL,  0LL,  0LL,  v106));
      }

      uint64_t v44 = v58;

      goto LABEL_118;
    }

    if (!v117) {
      goto LABEL_88;
    }
    id v112 = (void *)objc_claimAutoreleasedReturnValue([v117 recipients]);
    if (v116)
    {
      uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue( -[IDSQuickRelayAllocator getPushTokenForRelaySessionID:relaySessionID:]( self,  "getPushTokenForRelaySessionID:relaySessionID:",  v120));
      if (!v63)
      {
        uint64_t v90 = OSLogHandleForTransportCategory("QRAllocator");
        id v91 = (os_log_s *)objc_claimAutoreleasedReturnValue(v90);
        if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)__int128 v127 = v116;
          _os_log_impl( (void *)&_mh_execute_header,  v91,  OS_LOG_TYPE_DEFAULT,  "could not find original push token to clone for QR session %@",  buf,  0xCu);
        }

        __int128 v93 = os_log_shim_legacy_logging_enabled(v92);
        if ((_DWORD)v93)
        {
          if (_IDSShouldLogTransport(v93))
          {
            double v102 = (int64_t)v116;
            _IDSLogTransport( @"QRAllocator",  @"IDS",  @"could not find original push token to clone for QR session %@");
            if (_IDSShouldLog(0LL, @"QRAllocator"))
            {
              double v102 = (int64_t)v116;
              _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"could not find original push token to clone for QR session %@");
            }
          }
        }

        objc_msgSend(v39, "setHasPendingAllocation:forIDSSession:", 0, v120, v102);
        goto LABEL_116;
      }

      id v110 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      uint64_t v123 = 0u;
      uint64_t v124 = 0u;
      id v121 = 0u;
      uint64_t v122 = 0u;
      uint64_t v64 = v112;
      id v65 = [v64 countByEnumeratingWithState:&v121 objects:v130 count:16];
      if (v65)
      {
        uint64_t v66 = *(void *)v122;
        uint64_t v67 = (const void *)kIDSQRAllocateKey_RecipientPushToken;
        while (2)
        {
          for (uint64_t i = 0LL; i != v65; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v122 != v66) {
              objc_enumerationMutation(v64);
            }
            id v69 = *(void *)(*((void *)&v121 + 1) + 8LL * (void)i);
            if (v69) {
              uint64_t v70 = v67 == 0LL;
            }
            else {
              uint64_t v70 = 1;
            }
            if (v70) {
              Value = 0LL;
            }
            else {
              Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(*((void *)&v121 + 1) + 8LL * (void)i), v67);
            }
            uint64_t v72 = Value;
            if ([v72 isEqual:v63])
            {
              -[NSMutableArray addObject:](v110, "addObject:", v69);

              goto LABEL_106;
            }
          }

          id v65 = [v64 countByEnumeratingWithState:&v121 objects:v130 count:16];
          if (v65) {
            continue;
          }
          break;
        }
      }
        }

        __int128 v15 = [obj countByEnumeratingWithState:&v58 objects:v64 count:16];
      }

      while (v15);
    }

    objc_autoreleasePoolPop(context);
    self = v39;
    a4 = v40;
    a5 = v38;
    uint64_t v11 = v37;
  }

  __int128 v33 = v11 != 0LL;
  uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  v44[0] = _NSConcreteStackBlock;
  v44[1] = 3221225472LL;
  void v44[2] = sub_100361A38;
  v44[3] = &unk_1008FBAB0;
  uint64_t v46 = self;
  uint64_t v47 = a4;
  id v48 = a5;
  id v49 = v33;
  id v45 = v10;
  __int128 v35 = v10;
  [v34 performBlockWithPriority:v44 priority:a4];
}
        }

        uint64_t v46 = [obj countByEnumeratingWithState:&v62 objects:v68 count:16];
      }

      while (v46);
    }

    objc_autoreleasePoolPop(context);
    self = v42;
    a5 = v41;
    __int128 v14 = v39;
    uint64_t v11 = v40;
  }

  uint64_t v34 = v14 != 0LL;
  __int128 v35 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  v47[0] = _NSConcreteStackBlock;
  v47[1] = 3221225472LL;
  v47[2] = sub_100362138;
  v47[3] = &unk_100902068;
  uint64_t v52 = a5;
  uint64_t v53 = v34;
  id v48 = v11;
  id v49 = v13;
  id v50 = self;
  id v51 = a4;
  uint64_t v36 = v13;
  id v37 = v11;
  [v35 performBlockWithPriority:v47 priority:a4];
}

  return v11;
}

                  __int128 v30 = (char *)v30 + 1;
                }

                while (v28 != v30);
                uint64_t v34 = [v26 countByEnumeratingWithState:&v40 objects:v52 count:16];
                uint64_t v28 = v34;
              }

              while (v34);
            }

            __int16 v12 = v36;
            id v7 = v37;
            uint64_t v11 = v38;
          }

          else
          {
            uint64_t v21 = (IDSRateLimiter *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog KeyTransparency]( &OBJC_CLASS___IDSFoundationLog,  "KeyTransparency"));
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
              sub_1006AD590(v53, v14, &v54, v21);
            }
          }

          __int128 v13 = v39 + 1;
        }

        while ((id)(v39 + 1) != v11);
        uint64_t v11 = -[os_log_s countByEnumeratingWithState:objects:count:]( v7,  "countByEnumeratingWithState:objects:count:",  &v44,  v55,  16LL);
      }

      while (v11);
    }
  }

  else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    sub_100694A58();
  }
}

    swift_release(v15);
    return v37;
  }

  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

      __int128 v15 = (v21 - 1) & v21;
      id v19 = __clz(__rbit64(v21)) + (v16 << 6);
    }

    double v23 = *(void *)(v37 + 72);
    sub_1003F5FC8( *(void *)(a4 + 48) + v23 * v19,  (uint64_t)v12,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    double v24 = *(void *)(v13 + 40);
    int v25 = sub_10040A2B0( (unint64_t *)&unk_1009B9980,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer,  (uint64_t)&unk_10071BF14);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v24, v38, v25);
    uint64_t v26 = -1LL << *(_BYTE *)(v13 + 32);
    uint64_t v27 = result & ~v26;
    uint64_t v28 = v27 >> 6;
    if (((-1LL << v27) & ~*(void *)(v17 + 8 * (v27 >> 6))) != 0)
    {
      __int128 v29 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v17 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      __int128 v30 = 0;
      uint64_t v31 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v32 = v28 == v31;
        if (v28 == v31) {
          uint64_t v28 = 0LL;
        }
        v30 |= v32;
        __int128 v33 = *(void *)(v17 + 8 * v28);
      }

      while (v33 == -1);
      __int128 v29 = __clz(__rbit64(~v33)) + (v28 << 6);
    }

    *(void *)(v17 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v29;
    uint64_t result = sub_1003F600C( (uint64_t)v12,  *(void *)(v13 + 48) + v29 * v23,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    ++*(void *)(v13 + 16);
    if (__OFSUB__(a3--, 1LL)) {
      break;
    }
    if (!a3) {
      goto LABEL_37;
    }
  }

        uint64_t v11 = (v20 - 1) & v20;
        id v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }

      unsigned int v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
      double v24 = *v22;
      double v23 = v22[1];
      int v25 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_10040DAE8(v25, v38);
      }

      else
      {
        sub_10040A668((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }

      Hasher.init(_seed:)(v37, *(void *)(v8 + 40));
      String.hash(into:)(v37, v24, v23);
      uint64_t result = Hasher._finalize()();
      uint64_t v26 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v27 = result & ~v26;
      uint64_t v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        __int128 v15 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        __int128 v29 = 0;
        __int128 v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          uint64_t v31 = v28 == v30;
          if (v28 == v30) {
            uint64_t v28 = 0LL;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v12 + 8 * v28);
        }

        while (v32 == -1);
        __int128 v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      __int128 v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
      void *v16 = v24;
      v16[1] = v23;
      uint64_t result = (uint64_t)sub_10040DAE8(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v15));
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
  *id v3 = v8;
  return result;
}

      uint64_t v9 = (v15 - 1) & v15;
      __int128 v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }

    id v17 = 8 * v13;
    id v18 = *(void *)(*(void *)(v4 + 56) + v17);
    id v19 = *(void *)(v8 + 40);
    id v20 = *(id *)(*(void *)(v4 + 48) + v17);
    swift_retain(v18);
    uint64_t result = NSObject._rawHashValue(seed:)(v19);
    uint64_t v21 = -1LL << *(_BYTE *)(v8 + 32);
    unsigned int v22 = result & ~v21;
    double v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v11 + 8 * (v22 >> 6))) != 0)
    {
      double v24 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v11 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int v25 = 0;
      uint64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v27 = v23 == v26;
        if (v23 == v26) {
          double v23 = 0LL;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v23);
      }

      while (v28 == -1);
      double v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }

    *(void *)(v11 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v24;
    __int128 v29 = 8 * v24;
    *(void *)(*(void *)(v8 + 48) + v29) = v20;
    *(void *)(*(void *)(v8 + 56) + v29) = v18;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1LL)) {
      break;
    }
    if (!v5) {
      return v8;
    }
  }

        __break(1u);
        goto LABEL_25;
      }

    id v19 = (v24 - 1) & v24;
    unsigned int v22 = __clz(__rbit64(v24)) + (v20 << 6);
LABEL_25:
    uint64_t v26 = 8 * v22;
    uint64_t v27 = *(void **)(*(void *)(v12 + 48) + v26);
    uint64_t v28 = *(void *)(*(void *)(v12 + 56) + v26);
    if ((unint64_t)v28 >> 62)
    {
      if (v28 < 0) {
        id v37 = *(void *)(*(void *)(v12 + 56) + v26);
      }
      else {
        id v37 = v28 & 0xFFFFFFFFFFFFFF8LL;
      }
      int v38 = v27;
      swift_bridgeObjectRetain(v28);
      __int128 v29 = _CocoaArrayWrapper.endIndex.getter(v37);
    }

    else
    {
      __int128 v29 = *(void *)((v28 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      __int128 v30 = v27;
      uint64_t v31 = swift_bridgeObjectRetain(v28);
    }

    if (v29
      && ((*(uint64_t (**)(id, void *, uint64_t, uint64_t, __n128))((swift_isaMask & *a5) + 0x1E0LL))( v13,  v27,  a6,  a7,  v31) & 1) == 0 && ((*(uint64_t (**)(id, void *))((swift_isaMask & *a5) + 0x270LL))(v13, v27) & 1) != 0)
    {
      uint64_t v32 = v13;
      __int128 v33 = (*(uint64_t (**)(id, void *, uint64_t))((swift_isaMask & *a5) + 0x1F0LL))(v13, v27, v28);
      uint64_t v34 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a5) + 0x1F8LL))(a8);
      __int128 v35 = v34;
      if (*(void *)(v33 + 16) || *(void *)(v34 + 16))
      {
        __int128 v40 = 1;
        (*(void (**)(uint64_t, void *, id, uint64_t, void, uint64_t, uint64_t, uint64_t, void *))((swift_isaMask & *a5) + 0x1E8LL))( a10,  v27,  v32,  1LL,  a9,  v33,  v34,  v28,  v41);
        swift_bridgeObjectRelease(v35);
        uint64_t v36 = v33;
        __int128 v13 = v32;
        swift_bridgeObjectRelease(v36);
        swift_bridgeObjectRelease(v28);

        __int128 v16 = v42;
        __int16 v12 = v43;
      }

      else
      {

        swift_bridgeObjectRelease(v28);
        swift_bridgeObjectRelease(v33);
        swift_bridgeObjectRelease(v35);
        __int128 v13 = v32;
        __int128 v16 = v42;
        __int16 v12 = v43;
      }
    }

    else
    {

      swift_bridgeObjectRelease(v28);
    }
  }

  int v25 = v23 + 3;
  if (v25 >= v47)
  {
LABEL_38:
    swift_bridgeObjectRelease(v41);
    swift_release(v12);
    a2 = v39;
    LOBYTE(v10) = v40;
    goto LABEL_39;
  }

  double v24 = *(void *)(v16 + 8 * v25);
  if (v24)
  {
    id v20 = v25;
    goto LABEL_24;
  }

  while (1)
  {
    id v20 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v20 >= v47) {
      goto LABEL_38;
    }
    double v24 = *(void *)(v16 + 8 * v20);
    ++v25;
    if (v24) {
      goto LABEL_24;
    }
  }

    if (*(void *)(v59 + 16))
    {
LABEL_17:
      uint64_t v62 = v91;
      uint64_t v63 = UUID.init()(v58);
      uint64_t v64 = UUID.uuidString.getter(v63);
      uint64_t v66 = v65;
      (*(void (**)(char *, uint64_t))(v92 + 8))(v62, v93);
      uint64_t v67 = v99;
      sub_10041D3C4(0LL, &qword_1009BAC10, &OBJC_CLASS___IDSDestination_ptr);
      sub_100438928(&qword_1009BAC18, &qword_1009BAC10, &OBJC_CLASS___IDSDestination_ptr);
      uint64_t v28 = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v67);
      uint64_t v68 = String._bridgeToObjectiveC()();
      id v69 = Data._bridgeToObjectiveC()().super.isa;
      uint64_t v70 = swift_allocObject(&unk_1009061D8, 24LL, 7LL);
      swift_unknownObjectWeakInit(v70 + 16, v88);
      id v71 = swift_allocObject(&unk_100906318, 80LL, 7LL);
      *(void *)(v71 + 16) = v70;
      *(void *)(v71 + cut_arc_os_release(v1 - 24) = v64;
      *(void *)(v71 + 32) = v66;
      *(_BYTE *)(v71 + 40) = v94;
      uint64_t v72 = v87;
      *(void *)(v71 + 4_Block_object_dispose(va, 8) = v87;
      *(void *)(v71 + 56) = a3;
      uint64_t v73 = v90;
      *(void *)(v71 + 64) = v89;
      *(void *)(v71 + 72) = v73;
      v97[3] = sub_1004794D4;
      __int128 v98 = v71;
      aBlock = (uint64_t)_NSConcreteStackBlock;
      v97[0] = 1107296256LL;
      v97[1] = sub_100460634;
      v97[2] = &unk_100906330;
      id v74 = _Block_copy(&aBlock);
      id v75 = v98;
      id v76 = v72;
      id v77 = a3;
      swift_release(v75);
      [a1 sendSenderKeyMessageToDestinations:v28 fromURI:v77 guid:v68 messageData:v69 completionBlock:v74];
      sub_10040AD00(v35, v36);
      _Block_release(v74);

LABEL_28:
      return;
    }

    id v48 = (v59 - 1) & v59;
    id v51 = __clz(__rbit64(v59)) + (v44 << 6);
LABEL_9:
    uint64_t v52 = *(void *)(*(void *)(v43 + 56) + 8 * v51);
    uint64_t v53 = *(uint64_t (**)(__n128))((swift_isaMask & *v3) + 0xA8LL);
    uint64_t v54 = swift_bridgeObjectRetain(v52);
    uint64_t v55 = (void *)v53(v54);
    sub_1004EEF6C(v52);
    __int16 v57 = v56;

    swift_bridgeObjectRelease(v52);
    sub_100469678(v57);
  }

  id v60 = v58 + 3;
  if (v60 < v49)
  {
    __int16 v59 = *(void *)(v45 + 8 * v60);
    if (!v59)
    {
      while (1)
      {
        uint64_t v44 = v60 + 1;
        if (__OFADD__(v60, 1LL)) {
          goto LABEL_33;
        }
        if (v44 >= v49) {
          goto LABEL_25;
        }
        __int16 v59 = *(void *)(v45 + 8 * v44);
        ++v60;
        if (v59) {
          goto LABEL_24;
        }
      }
    }

    uint64_t v44 = v60;
    goto LABEL_24;
  }

  swift_release(v9);
  double v23 = 1LL << *(_BYTE *)(v9 + 32);
  if (v23 > 63) {
    bzero((void *)(v9 + 56), ((unint64_t)(v23 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v12 = -1LL << v23;
  }
  *(void *)(v9 + 16) = 0LL;
LABEL_28:
  uint64_t result = swift_release(v9);
  *uint64_t v2 = v10;
  return result;
}

    unsigned int v22 = (v11 - 1) & v11;
    uint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
    double v23 = v12;
LABEL_25:
    __int128 v14 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v9);
    __int128 v16 = *v14;
    __int128 v15 = v14[1];
    Hasher.init(_seed:)(&__s1, *(void *)(v2 + 40));
    sub_1004028CC(v16, v15);
    Data.hash(into:)(&__s1, v16, v15);
    id v17 = Hasher._finalize()() & ~(-1LL << *(_BYTE *)(v2 + 32));
    if (((*(void *)(v6 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) != 0) {
      __asm { BR              X8 }
    }

    sub_100402A84(v16, v15);
    id v7 = v21;
    id v8 = v23;
    id v5 = v22;
  }

  __int128 v13 = v8 + 5;
  if (v8 + 5 >= v19) {
    goto LABEL_28;
  }
  uint64_t v11 = *(void *)(v20 + 8 * v13);
  if (v11)
  {
    __int16 v12 = v8 + 5;
    goto LABEL_24;
  }

  while (1)
  {
    __int16 v12 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      __break(1u);
    }
    if (v12 >= v19) {
      break;
    }
    uint64_t v11 = *(void *)(v20 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_24;
    }
  }

  a5[3] = v11;
  a5[4] = 0LL;
  swift_retain(a3);
  return sub_10047726C(a1, a2, v22, a3);
}

  id v78 = swift_release(v277);
  v281 = &_swiftEmptySetSingleton;
  uint64_t v79 = v259;
  (*(void (**)(uint64_t))((swift_isaMask & **(void **)((char *)v275
                                                                 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_skmController))
                                  + 0x118LL))(v78);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v79, 1LL, j) == 1)
  {
    uint64_t v80 = sub_10040A274(v79, &qword_1009B8E08);
  }

  else
  {
    __int128 v81 = v255;
    sub_1003F600C(v79, v255, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    id v82 = (uint64_t)v253;
    sub_1003F5FC8(v81, (uint64_t)v253, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    __int128 v83 = v249;
    sub_100400D68(v249, v82);
    sub_1003F6050(v83, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v84 = v254;
    uint64_t v85 = sub_1003F5FC8(v81, v254, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v86 = (os_log_s *)Logger.logObject.getter(v85);
    uint64_t v87 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v86, v87))
    {
      uint64_t v88 = swift_slowAlloc(22LL, -1LL);
      uint64_t v89 = swift_slowAlloc(64LL, -1LL);
      v285[0] = v89;
      *(_DWORD *)uint64_t v88 = v276.n128_u32[0];
      v283 = sub_1003FFBB0(0xD000000000000027LL, v260 | 0x8000000000000000LL, v285);
      uint64_t v90 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v283, v284, v88 + 4, v88 + 12);
      *(_WORD *)(v88 + 12) = 2080;
      id v91 = UUID.uuidString.getter(v90);
      __int128 v93 = v92;
      v283 = sub_1003FFBB0(v91, v92, v285);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v283, v284, v88 + 14, v88 + 22);
      swift_bridgeObjectRelease(v93);
      sub_1003F6050(v84, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      _os_log_impl((void *)&_mh_execute_header, v86, v87, "%s: including SKM with SKI: %s", (uint8_t *)v88, 0x16u);
      swift_arrayDestroy(v89, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v89, -1LL, -1LL);
      swift_slowDealloc(v88, -1LL, -1LL);
    }

    else
    {
      sub_1003F6050(v84, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    }

    uint64_t v80 = sub_1003F6050(v81, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
  }

  __int16 v59 = *(void *)((swift_isaMask & *v275) + 0x108LL);
  __int128 v94 = ((uint64_t (*)(uint64_t))v59)(v80);
  if (v94)
  {
    __int128 v96 = v94;
    __int128 v97 = v95;
    ObjectType = swift_getObjectType(v94);
    __int128 v99 = (*(uint64_t (**)(uint64_t, uint64_t))(v97 + 16))(ObjectType, v97);
    __int128 v94 = swift_unknownObjectRelease(v96, v100);
    goto LABEL_34;
  }

        __break(1u);
        goto LABEL_25;
      }

      id v17 = (v23 - 1) & v23;
      uint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
    }

    int v25 = a4[7];
    uint64_t v26 = a4;
    uint64_t v27 = *(void **)(a4[6] + 8 * v21);
    uint64_t v28 = v45;
    __int128 v29 = *(void *)(v46 + 72);
    sub_1003F5FC8(v25 + v29 * v21, v45, type metadata accessor for IDSGroupEncryptionPublicIdentity);
    __int128 v30 = v28;
    uint64_t v31 = v11;
    sub_10049E2E4(v30, (uint64_t)v11);
    uint64_t v32 = *(void *)(v16 + 40);
    __int128 v33 = v27;
    uint64_t result = NSObject._rawHashValue(seed:)(v32);
    uint64_t v34 = -1LL << *(_BYTE *)(v16 + 32);
    __int128 v35 = result & ~v34;
    uint64_t v36 = v35 >> 6;
    if (((-1LL << v35) & ~*(void *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      id v37 = __clz(__rbit64((-1LL << v35) & ~*(void *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0LL;
      uint64_t v11 = v31;
    }

    else
    {
      int v38 = 0;
      __int128 v39 = (unint64_t)(63 - v34) >> 6;
      uint64_t v11 = v31;
      do
      {
        if (++v36 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        __int128 v40 = v36 == v39;
        if (v36 == v39) {
          uint64_t v36 = 0LL;
        }
        v38 |= v40;
        __int128 v41 = *(void *)(v19 + 8 * v36);
      }

      while (v41 == -1);
      id v37 = __clz(__rbit64(~v41)) + (v36 << 6);
    }

    *(void *)(v19 + ((v37 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v37;
    *(void *)(*(void *)(v16 + 48) + 8 * v37) = v33;
    uint64_t result = sub_10049E2E4((uint64_t)v11, *(void *)(v16 + 56) + v37 * v29);
    ++*(void *)(v16 + 16);
    if (__OFSUB__(a3--, 1LL)) {
      break;
    }
    a4 = v26;
    if (!a3) {
      return v16;
    }
  }

    uint64_t v27 = (v35 - 1) & v35;
    __int128 v30 = __clz(__rbit64(v35)) + (v23 << 6);
LABEL_9:
    uint64_t v31 = *(void **)(*(void *)(v22 + 56) + 8 * v30);
    uint64_t v32 = *(void (**)(uint64_t, uint64_t, char *))((swift_isaMask & *v31) + 0x200LL);
    __int128 v33 = v31;
    v32(a1, a2, v14);
  }

  uint64_t v36 = v34 + 3;
  if (v36 >= v28)
  {
LABEL_25:
    swift_release(v22);
    sub_1003F6050((uint64_t)v14, type metadata accessor for IDSGroupEncryptionFullIdentity);
    return;
  }

  __int128 v35 = *(void *)(v24 + 8 * v36);
  if (v35)
  {
    double v23 = v36;
    goto LABEL_24;
  }

  while (1)
  {
    double v23 = v36 + 1;
    if (__OFADD__(v36, 1LL)) {
      break;
    }
    if (v23 >= v28) {
      goto LABEL_25;
    }
    __int128 v35 = *(void *)(v24 + 8 * v23);
    ++v36;
    if (v35) {
      goto LABEL_24;
    }
  }

      __int128 v15 = (v21 - 1) & v21;
      id v19 = __clz(__rbit64(v21)) + (v16 << 6);
    }

    double v23 = *(void *)(v38 + 72);
    sub_1003F5FC8( *(void *)(a4 + 48) + v23 * v19,  (uint64_t)v12,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    double v24 = *(void *)(v13 + 40);
    int v25 = sub_10040A2B0( &qword_1009B90D0,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718E98);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v24, v37, v25);
    uint64_t v26 = -1LL << *(_BYTE *)(v13 + 32);
    uint64_t v27 = result & ~v26;
    uint64_t v28 = v27 >> 6;
    if (((-1LL << v27) & ~*(void *)(v17 + 8 * (v27 >> 6))) != 0)
    {
      __int128 v29 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v17 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      __int128 v30 = 0;
      uint64_t v31 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v32 = v28 == v31;
        if (v28 == v31) {
          uint64_t v28 = 0LL;
        }
        v30 |= v32;
        __int128 v33 = *(void *)(v17 + 8 * v28);
      }

      while (v33 == -1);
      __int128 v29 = __clz(__rbit64(~v33)) + (v28 << 6);
    }

    *(void *)(v17 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v29;
    uint64_t result = sub_1004C77E4((uint64_t)v12, *(void *)(v13 + 48) + v29 * v23);
    ++*(void *)(v13 + 16);
    if (__OFSUB__(a3--, 1LL)) {
      break;
    }
    if (!a3) {
      goto LABEL_37;
    }
  }

    id v45 = (v27 - 1) & v27;
    uint64_t v46 = v28;
  }

  __int128 v29 = v26 + 4;
  if (v29 >= v44) {
    return 1LL;
  }
  uint64_t v27 = *(void *)(v43 + 8 * v29);
  if (v27)
  {
    uint64_t v28 = v29;
    goto LABEL_24;
  }

  while (1)
  {
    uint64_t v28 = v29 + 1;
    if (__OFADD__(v29, 1LL)) {
      break;
    }
    if (v28 >= v44) {
      return 1LL;
    }
    uint64_t v27 = *(void *)(v43 + 8 * v28);
    ++v29;
    if (v27) {
      goto LABEL_24;
    }
  }

    double v23 = v135;
    id v45 = v138;
    if (v145 >= v33) {
      break;
    }
    if (v38 < v138) {
      goto LABEL_141;
    }
    uint64_t v44 = v38;
    if (v138 >= v38) {
      goto LABEL_38;
    }
    uint64_t v46 = 0LL;
    uint64_t v47 = v149;
    id v48 = v149 * (v38 - 1);
    id v49 = v38 * v149;
    id v50 = v138 * v149;
    do
    {
      if (v45 != v44 + v46 - 1)
      {
        id v51 = v142;
        if (!v142) {
          goto LABEL_146;
        }
        uint64_t v52 = v142 + v50;
        sub_1004D7EA8(v142 + v50, v137);
        if (v50 < v48 || v52 >= v51 + v49)
        {
          swift_arrayInitWithTakeFrontToBack(v51 + v50, v51 + v48, 1LL, v141);
        }

        else if (v50 != v48)
        {
          swift_arrayInitWithTakeBackToFront(v51 + v50);
        }

        sub_1004D7EA8(v137, v51 + v48);
        uint64_t v44 = v38;
        uint64_t v47 = v149;
      }

      ++v45;
      --v46;
      v48 -= v47;
      v49 -= v47;
      v50 += v47;
    }

    while (v45 < v44 + v46);
    a1 = v146;
    uint64_t v2 = v134;
    double v23 = v135;
    id v45 = v138;
    __int128 v35 = v148;
    if (v44 < v148) {
      goto LABEL_41;
    }
LABEL_58:
    if (v44 < v45) {
      goto LABEL_134;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
    double v145 = v44;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      double v23 = sub_1004C4884(0LL, *((void *)v23 + 2) + 1LL, 1, v23);
    }
    id v74 = *((void *)v23 + 2);
    uint64_t v73 = *((void *)v23 + 3);
    int v25 = v74 + 1;
    if (v74 >= v73 >> 1) {
      double v23 = sub_1004C4884((char *)(v73 > 1), v74 + 1, 1, v23);
    }
    *((void *)v23 + 2) = v25;
    id v75 = v23 + 32;
    id v76 = &v23[16 * v74 + 32];
    id v77 = v145;
    *(void *)id v76 = v45;
    *((void *)v76 + 1) = v77;
    if (v74)
    {
      while (1)
      {
        id v78 = v25 - 1;
        if (v25 >= 4)
        {
          __int128 v83 = &v75[16 * v25];
          uint64_t v84 = *((void *)v83 - 8);
          uint64_t v85 = *((void *)v83 - 7);
          uint64_t v89 = __OFSUB__(v85, v84);
          uint64_t v86 = v85 - v84;
          if (v89) {
            goto LABEL_123;
          }
          uint64_t v88 = *((void *)v83 - 6);
          uint64_t v87 = *((void *)v83 - 5);
          uint64_t v89 = __OFSUB__(v87, v88);
          __int128 v81 = v87 - v88;
          id v82 = v89;
          if (v89) {
            goto LABEL_124;
          }
          uint64_t v90 = v25 - 2;
          id v91 = &v75[16 * v25 - 32];
          __int128 v93 = *(void *)v91;
          uint64_t v92 = *((void *)v91 + 1);
          uint64_t v89 = __OFSUB__(v92, v93);
          __int128 v94 = v92 - v93;
          if (v89) {
            goto LABEL_126;
          }
          uint64_t v89 = __OFADD__(v81, v94);
          __int128 v95 = v81 + v94;
          if (v89) {
            goto LABEL_129;
          }
          if (v95 >= v86)
          {
            unsigned int v113 = &v75[16 * v78];
            uint64_t v115 = *(void *)v113;
            id v114 = *((void *)v113 + 1);
            uint64_t v89 = __OFSUB__(v114, v115);
            uint64_t v116 = v114 - v115;
            if (v89) {
              goto LABEL_133;
            }
            uint64_t v106 = v81 < v116;
            goto LABEL_95;
          }
        }

        else
        {
          if (v25 != 3)
          {
            uint64_t v107 = *((void *)v23 + 4);
            uint64_t v108 = *((void *)v23 + 5);
            uint64_t v89 = __OFSUB__(v108, v107);
            __int128 v100 = v108 - v107;
            __int16 v101 = v89;
            goto LABEL_89;
          }

          uint64_t v80 = *((void *)v23 + 4);
          uint64_t v79 = *((void *)v23 + 5);
          uint64_t v89 = __OFSUB__(v79, v80);
          __int128 v81 = v79 - v80;
          id v82 = v89;
        }

        if ((v82 & 1) != 0) {
          goto LABEL_125;
        }
        uint64_t v90 = v25 - 2;
        __int128 v96 = &v75[16 * v25 - 32];
        __int128 v98 = *(void *)v96;
        __int128 v97 = *((void *)v96 + 1);
        __int128 v99 = __OFSUB__(v97, v98);
        __int128 v100 = v97 - v98;
        __int16 v101 = v99;
        if (v99) {
          goto LABEL_128;
        }
        double v102 = &v75[16 * v78];
        id v104 = *(void *)v102;
        __int16 v103 = *((void *)v102 + 1);
        uint64_t v89 = __OFSUB__(v103, v104);
        __int16 v105 = v103 - v104;
        if (v89) {
          goto LABEL_131;
        }
        if (__OFADD__(v100, v105)) {
          goto LABEL_132;
        }
        if (v100 + v105 >= v81)
        {
          uint64_t v106 = v81 < v105;
LABEL_95:
          if (v106) {
            id v78 = v90;
          }
          goto LABEL_97;
        }

id sub_1000E0A4C(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000E0AC8;
  v5[3] = &unk_1008F9D48;
  id v6 = *(id *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "__imDictionaryByFilteringWithBlock:", v5));

  return v3;
}

id sub_1000E0AC8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsObject:a2];
}

id sub_1000E1998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return [*(id *)(a1 + 32) _respondToAppleCareRequestID:*(void *)(a1 + 40) withMessageContext:*(void *)(a1 + 48) error:a4];
}

void sub_1000E239C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog accountIdentity](&OBJC_CLASS___IDSFoundationLog, "accountIdentity"));
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (a2)
  {
    if (v7)
    {
      id v8 = *(void **)(a1 + 32);
      int v9 = 138543362;
      id v10 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Stored cluster in keychain {fullCluster: %{public}@}",  (uint8_t *)&v9,  0xCu);
    }
  }

  else if (v7)
  {
    int v9 = 138543362;
    id v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Failed to store cluster in keychain {error: %{public}@}",  (uint8_t *)&v9,  0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000E38FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

uint64_t sub_1000E3970(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000E3980(uint64_t a1)
{
}

void sub_1000E3988(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    int v8 = 138412802;
    uint64_t v9 = v6;
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    __int16 v12 = 2112;
    id v13 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Finished capturing AutoBugCapture diagnostics for EC key loading failure { context: %@, keyLoadingError: %@, error: %@ }",  (uint8_t *)&v8,  0x20u);
  }
}

void sub_1000E3A5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 96);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allKeys]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v5));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  _OWORD v10[2] = sub_1000E3BB0;
  v10[3] = &unk_1008F9DE8;
  uint64_t v20 = *(void *)(a1 + 96);
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 80);
  id v11 = v7;
  uint64_t v18 = v8;
  id v12 = *(id *)(a1 + 40);
  id v13 = *(id *)(a1 + 48);
  id v14 = v3;
  uint64_t v19 = *(void *)(a1 + 88);
  id v15 = *(id *)(a1 + 56);
  id v16 = *(id *)(a1 + 64);
  id v17 = *(id *)(a1 + 72);
  id v9 = v3;
  [v4 _fetchPresenceCapabilityForServiceTypes:v6 withCompletion:v10];
}

void sub_1000E3BB0(uint64_t a1, char a2)
{
  id v4 = *(void **)(a1 + 104);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allKeys]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v5));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  _OWORD v10[2] = sub_1000E3D04;
  v10[3] = &unk_1008F9DC0;
  uint64_t v7 = *(void *)(a1 + 88);
  uint64_t v20 = *(void *)(a1 + 104);
  uint64_t v18 = v7;
  id v11 = *(id *)(a1 + 40);
  id v12 = *(id *)(a1 + 32);
  id v13 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 96);
  id v14 = v8;
  uint64_t v19 = v9;
  id v15 = *(id *)(a1 + 64);
  id v16 = *(id *)(a1 + 72);
  char v21 = a2;
  id v17 = *(id *)(a1 + 80);
  [v4 _fetchStewieCapabilityForServiceTypes:v6 withCompletion:v10];
}

void sub_1000E3D04(uint64_t a1, char a2)
{
  if (!_os_feature_enabled_impl("IDS", "KTAsyncEnrollment")
    || (objc_msgSend( (id)objc_opt_class(*(void *)(a1 + 104), v4),  "_isKTAsyncEnrollmentDisabledViaUserDefaults") & 1) != 0 || objc_msgSend( (id)objc_opt_class(*(void *)(a1 + 104), v5),  "_isKTAsyncEnrollmentDisabledViaServerBag"))
  {
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "KT Async Enrollment is disabled.", buf, 2u);
    }

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) createKTRegistrationDataForServiceTypes:*(void *)(a1 + 40) withPublicIdentity:*(void *)(a1 + 48)]);
    id v8 = [v7 mutableCopy];
    uint64_t v9 = *(void *)(*(void *)(a1 + 88) + 8LL);
    __int16 v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }

  else
  {
    id v15 = [*(id *)(a1 + 56) mutableCopy];
    uint64_t v16 = *(void *)(*(void *)(a1 + 88) + 8LL);
    id v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;
  }

  BYTE1(v1_Block_object_dispose(va, 8) = a2;
  LOBYTE(v1_Block_object_dispose(va, 8) = *(_BYTE *)(a1 + 112);
  uint64_t v11 = objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 104),  "_createClientDatasForServiceTypes:withAppleIDRegistrationsForServiceTypes:ktRegDataByServiceType:publicIdent ityData:publicIdentityError:keyStore:isPresenceCapable:isStewieCapable:",  *(void *)(a1 + 40),  *(void *)(a1 + 64),  *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 72),  *(void *)(a1 + 32),  v18));
  uint64_t v12 = *(void *)(*(void *)(a1 + 96) + 8LL);
  id v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;

  id v14 = objc_alloc_init(&OBJC_CLASS___IDSClientDataResult);
  -[IDSClientDataResult setClientDatasByServiceType:]( v14,  "setClientDatasByServiceType:",  *(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL));
  -[IDSClientDataResult setKtRegDataByServiceType:]( v14,  "setKtRegDataByServiceType:",  *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL));
  [*(id *)(a1 + 80) fulfillWithValue:v14];
}

LABEL_60:
          goto LABEL_61;
        }

        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v58 = [v52 ktRegistrationDataIndex];
          *(_DWORD *)buf = 138412802;
          v243 = v20;
          v244 = 1024;
          *(_DWORD *)v245 = v58;
          *(_WORD *)&v245[4] = 2112;
          *(void *)&v245[6] = v55;
          _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "Found KT Registration Data for key index. { serviceType: %@, ktKeyIndex: %u, ktRegData: %@ }",  buf,  0x1Cu);
        }

        if ([v52 ktRegistrationDataIndex])
        {
          __int16 v59 = objc_claimAutoreleasedReturnValue([v55 ktPublicAccountKey]);
          if (v59
            && (id v60 = (void *)v59,
                uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue([v55 ktDataSignature]),
                v61,
                v60,
                v61))
          {
            uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue([v55 ktDataSignature]);
            if (v62) {
              CFDictionarySetValue((CFMutableDictionaryRef)v21, v147, v62);
            }

            __int16 v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
            if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v63 = [v52 ktRegistrationDataIndex];
              *(_DWORD *)buf = 138412802;
              v243 = v20;
              v244 = 1024;
              *(_DWORD *)v245 = v63;
              *(_WORD *)&v245[4] = 2112;
              *(void *)&v245[6] = v55;
              _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "Adding KT data signature to IDS client data. { serviceType: %@, ktKeyIndex: %u, ktRegData: %@ }",  buf,  0x1Cu);
            }
          }

          else
          {
            __int16 v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
            if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
            {
              id v136 = [v52 ktRegistrationDataIndex];
              *(_DWORD *)buf = 138412802;
              v243 = v20;
              v244 = 1024;
              *(_DWORD *)v245 = v136;
              *(_WORD *)&v245[4] = 2112;
              *(void *)&v245[6] = v55;
              id v65 = v57;
              uint64_t v66 = "KT Registration data missing public account key or data signature. { serviceType: %@, ktKeyIndex: %u"
                    ", ktRegData: %@ }";
              uint64_t v67 = 28;
LABEL_150:
              _os_log_error_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_ERROR, v66, buf, v67);
            }
          }

          goto LABEL_60;
        }
}
  }

LABEL_16:
  return v27;
}

    sub_100508C40(&v51, &v50, (uint64_t *)&v49);
    return 1LL;
  }

void sub_1000E5B1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_1000E5B40(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1000E5BBC;
  v7[3] = &unk_1008F9E60;
  uint64_t v5 = *(dispatch_queue_s **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v8 = v3;
  uint64_t v9 = v4;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_1000E5BBC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000E5C50;
  v5[3] = &unk_1008F9E38;
  __int128 v4 = *(_OWORD *)(a1 + 32);
  id v3 = (id)v4;
  __int128 v6 = v4;
  [v2 supportsStewieWithCompletion:v5];
}

void sub_1000E5C50(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = @"NO";
    if (a2) {
      uint64_t v7 = @"YES";
    }
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    id v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Fetched stewie capability with result: %@ error: %@",  (uint8_t *)&v8,  0x16u);
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = a2;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000E5D4C(uint64_t a1, char a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000E5DC4;
  block[3] = &unk_1008F9EB0;
  char v9 = a2;
  id v3 = *(dispatch_queue_s **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  id v7 = v4;
  uint64_t v8 = v5;
  dispatch_async(v3, block);
}

uint64_t sub_1000E5DC4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT)) {
      sub_10069A9E0(v2, v3, v4, v5, v6, v7, v8, v9);
    }
  }

  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))( result,  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL));
  }
  return result;
}

void sub_1000E613C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_1000E6160(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(dispatch_queue_s **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000E61E4;
  block[3] = &unk_1008F9F48;
  __int128 v8 = *(_OWORD *)(a1 + 40);
  id v7 = v3;
  id v5 = v3;
  dispatch_async(v4, block);
}

void sub_1000E61E4(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 48)) initWithPresenceIdentifier:&stru_100912B50];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000E627C;
  v5[3] = &unk_1008F9F20;
  __int128 v4 = *(_OWORD *)(a1 + 32);
  id v3 = (id)v4;
  __int128 v6 = v4;
  [v2 fetchPresenceCapability:v5];
}

uint64_t sub_1000E627C(uint64_t a1, int a2)
{
  __int128 v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Fetched StatusKit presence capability with result: %d",  (uint8_t *)v6,  8u);
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = a2;
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000E6348(uint64_t a1, char a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000E63C0;
  block[3] = &unk_1008F9EB0;
  char v9 = a2;
  id v3 = *(dispatch_queue_s **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  id v7 = v4;
  uint64_t v8 = v5;
  dispatch_async(v3, block);
}

uint64_t sub_1000E63C0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT)) {
      sub_10069AA14(v2, v3, v4, v5, v6, v7, v8, v9);
    }
  }

  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))( result,  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL));
  }
  return result;
}

BOOL sub_1000E7388(id a1, id a2)
{
  return [a2 isEqualToIgnoringCase:kIDSServiceDefaultsSentinelAlias] ^ 1;
}

BOOL sub_1000E74B4(id a1, id a2)
{
  return [a2 isEqualToIgnoringCase:kIDSServiceDefaultsSentinelAlias] ^ 1;
}

BOOL sub_1000E79A4(id a1, id a2)
{
  return [a2 isEqualToIgnoringCase:kIDSServiceDefaultsSentinelAlias] ^ 1;
}

id sub_1000E7D24(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _repairTimerHit:a2];
}

uint64_t sub_1000E7D30()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstanceForBagType:](&OBJC_CLASS___IDSServerBag, "sharedInstanceForBagType:", 0LL));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([v0 objectForKey:@"allow-account-repair-activity"]);

  if (v1 && (uint64_t v3 = objc_opt_class(&OBJC_CLASS___NSNumber, v2), (objc_opt_isKindOfClass(v1, v3) & 1) != 0)) {
    uint64_t v4 = (uint64_t)[v1 BOOLValue];
  }
  else {
    uint64_t v4 = 1LL;
  }

  return v4;
}

void sub_1000E7DB4(uint64_t a1)
{
  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472LL;
  v1[2] = sub_1000E7E18;
  v1[3] = &unk_1008F6010;
  id v2 = *(id *)(a1 + 32);
  im_dispatch_after_primary_queue(v1, 10.0);
}

id sub_1000E7E18(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 0;
  [*(id *)(a1 + 32) _repairTimerHit:0];
  return [*(id *)(a1 + 32) setupPhoneNumberRepairTimer];
}

void sub_1000E9090(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412290;
    id v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  " => Kicking alternate SMS based linked account: %@",  (uint8_t *)&v7,  0xCu);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountController]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
  [v5 enableAccountWithUniqueID:v6];

  [v3 registerAccount];
}

void sub_1000E9188(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412290;
    id v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  " => Kicking SMS based linked account: %@",  (uint8_t *)&v7,  0xCu);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountController]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
  [v5 enableAccountWithUniqueID:v6];

  [v3 registerAccount];
}

void sub_1000E9280(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412290;
    id v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  " => Kicking iCloud SMS based linked account: %@",  (uint8_t *)&v7,  0xCu);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountController]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
  [v5 enableAccountWithUniqueID:v6];

  [v3 registerAccount];
}

LABEL_30:
              continue;
            }
          }
        }
      }

      id v17 = [v14 countByEnumeratingWithState:&v35 objects:v43 count:16];
      if (!v17)
      {
LABEL_33:

        __int16 v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          uint64_t v12 = " => Done repair attempt";
LABEL_35:
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v12, buf, 2u);
        }

    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v16, (uint8_t *)&v20, 0xCu);
    goto LABEL_31;
  }

  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = 138412290;
    char v21 = v1;
    uint64_t v16 = "Missing MainID, Not sending IDS Authentication/Register for: %@";
    goto LABEL_30;
  }

            goto LABEL_31;
          }

          *(_DWORD *)uint64_t v6 = v14[1];
          *((_WORD *)v6 + 2) = *((_WORD *)v14 + 1);
          v6 += 6;
          uint64_t v5 = (v5 + 1);
        }
      }

      uint64_t v4 = [obj countByEnumeratingWithState:&v46 objects:v52 count:16];
      if (v4) {
        continue;
      }
      break;
    }

LABEL_31:
      id v11 = v44;
      self = v45;
      uint64_t v12 = &IMInsertBoolsToXPCDictionary_ptr;
    }

    uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue([v12[219] RealTimeEncryptionController]);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      id v37 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_participantsForGroup,  "objectForKeyedSubscript:",  v8));
      *(_DWORD *)buf = 138412802;
      uint64_t v55 = v8;
      uint64_t v56 = 2112;
      __int16 v57 = v6;
      uint64_t v58 = 2112;
      __int16 v59 = v37;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "Removed active participant { groupID: %@, activeParticipant: %@, participantsForGroup: %@ }",  buf,  0x20u);
    }

    int v38 = (os_log_s *)objc_claimAutoreleasedReturnValue([v12[219] RealTimeEncryptionController]);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v39 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_participantsInfoForGroup,  "objectForKeyedSubscript:",  v8));
      *(_DWORD *)buf = 138412546;
      uint64_t v55 = v8;
      uint64_t v56 = 2112;
      __int16 v57 = v39;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "Removed active participant { groupID: %@, participantsInfoForGroup: %@ }",  buf,  0x16u);
    }

    os_unfair_lock_unlock(p_lock);
  }
}

          goto LABEL_31;
        }

        if ([v25 isEqual:v15])
        {
          uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            __int16 v57 = v25;
            uint64_t v27 = v26;
            uint64_t v28 = "%@ is mine! don't need to add";
            goto LABEL_29;
          }

          goto LABEL_30;
        }

        if (([v50 containsObject:v25] & 1) == 0)
        {
          uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            __int16 v57 = v25;
            uint64_t v27 = v26;
            uint64_t v28 = "waiting praticipant %@ no longer exists! don't need to add";
LABEL_29:
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, v28, buf, 0xCu);
          }

          goto LABEL_30;
        }

        __int128 v29 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_publicKeyForDevice,  "objectForKeyedSubscript:",  v25));
        if (v29)
        {
        }

        else if ((-[NSMutableArray containsObject:](v48, "containsObject:", v25) & 1) == 0)
        {
          __int128 v30 = v48;
          goto LABEL_35;
        }

        __int128 v30 = v49;
LABEL_35:
        -[NSMutableArray addObject:](v30, "addObject:", v25);
LABEL_31:
        double v24 = (char *)v24 + 1;
      }

      while (v22 != v24);
      uint64_t v31 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v20,  "countByEnumeratingWithState:objects:count:",  &v51,  v55,  16LL);
      unsigned int v22 = v31;
    }

    while (v31);
  }

  if (v47 == 1)
  {
    uint64_t v12 = v46;
    if (!self->_participantsWaitingForStableKeyMaterials)
    {
      CFMutableDictionaryRef Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      participantsWaitingForStableKeyMaterials = self->_participantsWaitingForStableKeyMaterials;
      self->_participantsWaitingForStableKeyMaterials = Mutable;
    }

    uint64_t v32 = v48;
    int v38 = -[NSMutableArray copy](v48, "copy");
    -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_participantsWaitingForStableKeyMaterials,  "setObject:forKeyedSubscript:",  v38,  v46);

    __int128 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
    id v14 = v45;
    if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_51;
    }
    *(_DWORD *)buf = 138412290;
    __int16 v57 = v48;
    __int128 v39 = "waitingParticipants: %@";
    goto LABEL_50;
  }

  uint64_t v12 = v46;
  if (!v47)
  {
    id v14 = v45;
    uint64_t v32 = v48;
    if (!self->_participantsWaitingForKeyMaterials)
    {
      __int128 v33 = (NSMutableDictionary *)CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      participantsWaitingForKeyMaterials = self->_participantsWaitingForKeyMaterials;
      self->_participantsWaitingForKeyMaterials = v33;
    }

    __int128 v35 = (os_log_s *)-[NSMutableArray copy](v48, "copy");
    -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_participantsWaitingForKeyMaterials,  "setObject:forKeyedSubscript:",  v35,  v46);
    goto LABEL_51;
  }

  __int128 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
  id v14 = v45;
  uint64_t v32 = v48;
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    __int16 v57 = (id)v47;
    __int128 v39 = "_getAndUpdateParticipantsWaitingForKeyMaterialsForGroup: unknown participantType: %ld";
LABEL_50:
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, v39, buf, 0xCu);
  }

            int v38 = objc_alloc(&OBJC_CLASS___IDSPhoneUser);
            __int128 v39 = (void *)objc_claimAutoreleasedReturnValue([v116 phoneNumber]);
            __int128 v40 = [v116 isDefaultVoiceSIM];
            __int128 v41 = (void *)objc_claimAutoreleasedReturnValue([v116 mobileCountryCode]);
            __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([v116 mobileNetworkCode]);
            __int128 v30 = -[IDSPhoneUser initWithLabelID:phoneBookNumber:isDefaultUser:countryCode:networkCode:]( v38,  "initWithLabelID:phoneBookNumber:isDefaultUser:countryCode:networkCode:",  v29,  v39,  v40,  v41,  v42);

            uint64_t v9 = v113;
            -[__CFString addObject:](v113, "addObject:", v30);
LABEL_59:

            uint64_t v5 = v112;
            int v25 = v114;
            if (!v114)
            {

              goto LABEL_64;
            }
          }
        }

        uint64_t v119 = [obj countByEnumeratingWithState:&v129 objects:v150 count:16];
      }

      while (v119);
    }
}

    id v37 = 0LL;
    goto LABEL_37;
  }

  if (v20)
  {
    __int128 v41 = self;
    __int128 v42 = v14;
    BOOL v43 = v13;
    uint64_t v44 = v11;
    id v50 = 0u;
    id v51 = 0u;
    id v48 = 0u;
    id v49 = 0u;
    uint64_t v26 = v15;
    uint64_t v27 = [v26 countByEnumeratingWithState:&v48 objects:v52 count:16];
    if (v27)
    {
      __int128 v29 = v27;
      __int128 v30 = *(void *)v49;
      while (2)
      {
        for (uint64_t i = 0LL; i != v29; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v49 != v30) {
            objc_enumerationMutation(v26);
          }
          uint64_t v32 = *(void *)(*((void *)&v48 + 1) + 8LL * (void)i);
          __int128 v33 = objc_opt_class(&OBJC_CLASS___NSString, v28);
          if ((objc_opt_isKindOfClass(v32, v33) & 1) == 0)
          {
            int v38 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog IDSServerMessaging]( &OBJC_CLASS___IDSFoundationLog,  "IDSServerMessaging"));
            id v11 = v44;
            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
              sub_1006A4DFC();
            }

            id v37 = 0LL;
            id v14 = v42;
            id v13 = v43;
            self = v41;
            goto LABEL_37;
          }
        }

        __int128 v29 = [v26 countByEnumeratingWithState:&v48 objects:v52 count:16];
        if (v29) {
          continue;
        }
        break;
      }
    }

    id v13 = v43;
    id v11 = v44;
    id v14 = v42;
    self = v41;
  }

  v47.receiver = self;
  v47.super_class = (Class)&OBJC_CLASS___IDSDXPCServerMessaging;
  uint64_t v34 = -[IDSDXPCServerMessaging init](&v47, "init");
  if (v34)
  {
    __int128 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSServerMessaging](&OBJC_CLASS___IDSFoundationLog, "IDSServerMessaging"));
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218498;
      uint64_t v54 = v34;
      uint64_t v55 = 2112;
      uint64_t v56 = v15;
      __int16 v57 = 2112;
      uint64_t v58 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "Created XPCServerMessaging {self: %p, serverMessagingEntitlementValue: %@, connection: %@}",  buf,  0x20u);
    }

    objc_storeStrong((id *)&v34->_queue, a3);
    if (v25)
    {
      uint64_t v36 = 0LL;
      v34->_entitledForAllTopics = 1;
    }

    else
    {
      v34->_entitledForAllTopics = 0;
      uint64_t v36 = v15;
    }

    serverMessagingEntitlements = v34->_serverMessagingEntitlements;
    v34->_serverMessagingEntitlements = v36;

    objc_storeStrong((id *)&v34->_messageDelivery, obj);
    objc_storeStrong((id *)&v34->_pushHandler, v45);
  }

  self = v34;
  id v37 = self;
LABEL_37:

  return v37;
}

            goto LABEL_31;
          }
        }

        uint64_t v54 = v23;
        uint64_t v55 = v22;
        __int128 v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          __int128 v42 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSessionInvitationManager sharedState](self, "sharedState"));
          BOOL v43 = (void *)objc_claimAutoreleasedReturnValue([v42 destinations]);
          *(_DWORD *)buf = 138412290;
          uint64_t v58 = v43;
          _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "Invite was declined, notifying everyone I invited: %@",  buf,  0xCu);
        }

        uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSessionInvitationManager delegate](self, "delegate"));
        [v44 invitationDeclined];

        id v45 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSessionInvitationManager sharedState](self, "sharedState"));
        [v45 clearAllTimers];

        uint64_t v46 = -[NSSet initWithObjects:](objc_alloc(&OBJC_CLASS___NSSet), "initWithObjects:", v7, 0LL);
        uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSessionInvitationManager sharedState](self, "sharedState"));
        [v47 setDestinations:v46];

        id v37 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
        -[IMMessageContext setShouldBoost:](v37, "setShouldBoost:", 1LL);
        id v48 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
        id v49 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSessionInvitationManager sharedState](self, "sharedState"));
        id v50 = (void *)objc_claimAutoreleasedReturnValue([v49 pushTopic]);
        int v38 = (id)objc_claimAutoreleasedReturnValue( [v48 broadcasterForTopic:v50 entitlement:kIDSSessionEntitlement command:0 messageContext:v37]);

        id v51 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSessionInvitationManager sharedState](self, "sharedState"));
        uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([v51 uniqueID]);
        uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([v7 prefixedURI]);
        unsigned int v22 = v55;
        [v38 sessionDeclineReceived:v52 fromID:v53 withData:v55];

        __int128 v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[IDSDSessionInvitationManager delegate](self, "delegate"));
        -[os_log_s endSessionWithReason:](v40, "endSessionWithReason:", v56);
        double v23 = v54;
        goto LABEL_30;
      }

      char v21 = objc_claimAutoreleasedReturnValue([v6 objectForKey:v16]);
    }

    unsigned int v22 = (void *)v21;
    goto LABEL_12;
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
  if (os_log_type_enabled((os_log_t)v15, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSessionInvitationManager sharedState](self, "sharedState"));
    double v23 = (void *)objc_claimAutoreleasedReturnValue([v22 uniqueID]);
    double v24 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSessionInvitationManager sharedState](self, "sharedState"));
    int v25 = (void *)objc_claimAutoreleasedReturnValue([v24 destinations]);
    *(_DWORD *)buf = 138412802;
    uint64_t v58 = v7;
    __int16 v59 = 2112;
    id v60 = v23;
    uint64_t v61 = 2112;
    uint64_t v62 = v25;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v15,  OS_LOG_TYPE_DEFAULT,  "Ignoring Decline from %@, %@, not in destinations: %@",  buf,  0x20u);

LABEL_31:
  }
}

  os_activity_scope_leave(&state);
  cut_arc_os_release(&v61);
}

    __int128 v33 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance", v78));
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v33 serviceWithPushTopic:*(void *)(a1 + 40)]);
    __int128 v35 = [v34 dontFilterSelfMessagesForUnknownDevice];

    uint64_t v36 = [*(id *)(a1 + 40) isEqualToIgnoringCase:@"com.apple.madrid"];
    if (!a3
      || (([*(id *)(a1 + 72) isEqualToURI:*(void *)(a1 + 80)] ^ 1 | v36 | v35) & 1) != 0
      || ([*(id *)(a1 + 64) _isDeviceInAccountRegistration:*(void *)(a1 + 88) forService:*(void *)(a1 + 40)] & 1) != 0)
    {
      goto LABEL_72;
    }

    id v37 = OSLogHandleForIDSCategory("IDSDaemon");
    int v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "Device is NOT in our account registrations, It should be, Can we force a GDR?",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v39) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Device is NOT in our account registrations, It should be, Can we force a GDR?");
    }
    __int128 v40 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
    __int128 v41 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance"));
    __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([v41 serviceWithPushTopic:*(void *)(a1 + 40)]);
    BOOL v43 = (void *)objc_claimAutoreleasedReturnValue([v40 appleIDAccountOnService:v42]);
    uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v43 primaryAccount]);

    if ([*(id *)(*(void *)(a1 + 64) + 168) containsObject:*(void *)(a1 + 88)])
    {
      if (([v44 issuingDependentCheck] & 1) == 0)
      {
        id v45 = OSLogHandleForIDSCategory("IDSDaemon");
        uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "Unknown devices, but GDR attempt exchasuted",  buf,  2u);
        }

        id v48 = @"Unknown devices, but GDR attempt exchasuted";
LABEL_70:
        _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", v48);
LABEL_71:

LABEL_72:
        uint64_t v70 = *(void **)(a1 + 64);
        v83[0] = _NSConcreteStackBlock;
        v83[1] = 3221225472LL;
        v83[2] = sub_10037B544;
        v83[3] = &unk_100902728;
        uint64_t v84 = *(id *)(a1 + 96);
        uint64_t v85 = *(id *)(a1 + 40);
        uint64_t v86 = *(id *)(a1 + 104);
        uint64_t v87 = *(id *)(a1 + 112);
        uint64_t v88 = *(id *)(a1 + 120);
        uint64_t v89 = *(id *)(a1 + 56);
        id v71 = *(id *)(a1 + 32);
        __int16 v105 = *(_BYTE *)(a1 + 192);
        uint64_t v72 = *(void *)(a1 + 64);
        uint64_t v73 = *(void **)(a1 + 72);
        uint64_t v90 = v71;
        id v91 = v72;
        uint64_t v92 = v73;
        __int128 v93 = *(id *)(a1 + 80);
        __int128 v94 = *(id *)(a1 + 48);
        __int128 v95 = *(id *)(a1 + 128);
        __int128 v96 = v5;
        __int128 v97 = *(id *)(a1 + 88);
        uint64_t v106 = *(_BYTE *)(a1 + 193);
        __int128 v98 = *(id *)(a1 + 136);
        __int128 v99 = *(id *)(a1 + 144);
        __int128 v100 = *(id *)(a1 + 152);
        __int16 v101 = *(id *)(a1 + 160);
        double v102 = *(id *)(a1 + 168);
        id v74 = *(id *)(a1 + 176);
        uint64_t v107 = *(_BYTE *)(a1 + 194);
        id v75 = *(void *)(a1 + 184);
        __int16 v103 = v74;
        id v104 = v75;
        uint64_t v108 = *(_BYTE *)(a1 + 195);
        id v76 = 300.0;
        if (!v108) {
          id v76 = 30.0;
        }
        [v70 _enqueueBlock:v83 identifier:*(void *)(a1 + 56) withTimeout:*(void *)(a1 + 40) forKey:v76];

        goto LABEL_75;
      }
    }

    else
    {
      if (![v44 _issueForcedDependentCheckIfPossible])
      {
        uint64_t v67 = OSLogHandleForIDSCategory("IDSDaemon");
        uint64_t v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "No forced GDR is possible", buf, 2u);
        }

        id v48 = @"No forced GDR is possible";
        goto LABEL_70;
      }

      id v60 = *(void **)(*(void *)(a1 + 64) + 168LL);
      if (!v60)
      {
        uint64_t v61 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
        uint64_t v62 = *(void *)(a1 + 64);
        uint64_t v63 = *(void **)(v62 + 168);
        *(void *)(v62 + 16_Block_object_dispose(va, 8) = v61;

        id v60 = *(void **)(*(void *)(a1 + 64) + 168LL);
      }

      [v60 addObject:*(void *)(a1 + 88)];
      uint64_t v64 = OSLogHandleForIDSCategory("IDSDaemon");
      id v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEFAULT,  "Issuing forced GDR & sending message to storage",  buf,  2u);
      }

      if (os_log_shim_legacy_logging_enabled(v66) && _IDSShouldLog(0LL, @"IDSDaemon")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Issuing forced GDR & sending message to storage");
      }
    }

    goto LABEL_75;
  }

  id v49 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) familyManager]);
  id v50 = [v49 canForceFamilyFetch];

  if (!v50)
  {
    uint64_t v56 = OSLogHandleForIDSCategory("IDSDaemon");
    __int16 v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v58 = *(void **)(a1 + 56);
      *(_DWORD *)buf = 138412290;
      id v110 = v58;
      _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "IDS Family member count is zero, but out of fetches to fetch family again, this message %@ will likely fail.",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v59) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      uint64_t v79 = *(void *)(a1 + 56);
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"IDS Family member count is zero, but out of fetches to fetch family again, this message %@ will likely fail.");
    }

    goto LABEL_18;
  }

  id v51 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) familyManager]);
  [v51 setStoredIncomingFamilyMessage:1];

  uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) familyManager]);
  [v52 forceFamilyFetch];

  uint64_t v53 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "IDS Family member count is zero, trying to fetch family again. Will retry message after fetch completes. Sending i ncoming family message to storage.",  buf,  2u);
  }

  if (os_log_shim_legacy_logging_enabled(v55) && _IDSShouldLog(0LL, @"IDSDaemon")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"IDS Family member count is zero, trying to fetch family again. Will retry message after fetch completes. Sending incoming family message to storage.");
  }
LABEL_75:
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

        uint64_t v5 = v45;
        goto LABEL_31;
      }

    uint64_t v52 = sub_1003F5CB4(&qword_1009B9770);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56LL))(v13, 1LL, 1LL, v52);
    __int128 v40 = 0LL;
LABEL_31:
    sub_10041D378((uint64_t)v13, (uint64_t)v17, &qword_1009B9768);
    uint64_t v53 = sub_1003F5CB4(&qword_1009B9770);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v53 - 8) + 48LL))(v17, 1LL, v53) == 1)
    {
      swift_release(v85);
      return;
    }

    __int128 v94 = *(id *)&v17[*(int *)(v53 + 48)];
    __int128 v98 = v90;
    __int128 v99 = a2;
    __int128 v95 = v91;
    __int128 v96 = a4;
    __int128 v97 = a5;
    sub_1003F5CB4(&qword_1009B9778);
    uint64_t v54 = (void *)static _DictionaryStorage.allocate(capacity:)(1LL);
    uint64_t v56 = v95;
    uint64_t v55 = v96;
    __int16 v57 = v97;
    uint64_t v58 = sub_100417DF8(v95);
    if ((v59 & 1) != 0) {
      goto LABEL_45;
    }
    v54[(v58 >> 6) + 8] |= 1LL << v58;
    *(void *)(v54[6] + 8 * v5_Block_object_dispose(va, 8) = v56;
    id v60 = (uint64_t *)(v54[7] + 16 * v58);
    void *v60 = v55;
    v60[1] = v57;
    uint64_t v61 = v54[2];
    uint64_t v62 = __OFADD__(v61, 1LL);
    uint64_t v63 = v61 + 1;
    if (v62) {
      goto LABEL_46;
    }
    __int128 v93 = v40;
    void v54[2] = v63;
    sub_1004028CC(a4, a5);
    sub_1004028CC(v55, v57);
    uint64_t v64 = sub_1003F5CB4(&qword_1009B9780);
    swift_arrayDestroy(v89, 1LL, v64);
    __int128 v100 = v54;
    id v65 = v98;
    if ((void)v98)
    {
      sub_1003F5CB4(&qword_1009B9788);
      uint64_t v66 = (void *)static _DictionaryStorage.allocate(capacity:)(v65);
      uint64_t v67 = v99;
      uint64_t v68 = v100;
      id v69 = sub_100417D0C(v99);
      if ((v70 & 1) != 0)
      {
LABEL_43:
        __break(1u);
      }

      else
      {
        id v71 = v65;
        uint64_t v72 = v84;
        while (1)
        {
          *(void *)((char *)v66 + ((v69 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << v69;
          *(_DWORD *)(v66[6] + 4 * v69) = v67;
          *(void *)(v66[7] + 8 * v69) = v68;
          uint64_t v73 = v66[2];
          uint64_t v62 = __OFADD__(v73, 1LL);
          id v74 = v73 + 1;
          if (v62) {
            break;
          }
          v66[2] = v74;
          if (!--v71)
          {
            swift_bridgeObjectRetain(v68);
            a4 = v83;
            a2 = v82;
            id v17 = v81;
            goto LABEL_9;
          }

          id v75 = v72 + 16;
          uint64_t v67 = *((_DWORD *)v72 - 2);
          id v76 = *(void **)v72;
          swift_bridgeObjectRetain(v68);
          id v69 = sub_100417D0C(v67);
          uint64_t v72 = v75;
          uint64_t v68 = v76;
          if ((v77 & 1) != 0) {
            goto LABEL_43;
          }
        }
      }

      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }

    uint64_t v66 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v32 = sub_1003F5CB4(&qword_1009B9790);
    swift_arrayDestroy(v86, v65, v32);
    __int128 v33 = (*(uint64_t (**)(void *))((swift_isaMask & *v88) + 0xB0LL))(v66);
    swift_release(v66);
    sub_10041D3C4(0LL, (unint64_t *)&unk_1009BACA0, &OBJC_CLASS___NSNumber_ptr);
    sub_1003F5CB4(&qword_1009B9798);
    sub_10041D320();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v33);
    __int128 v35 = v94;
    [v94 handleGroupSessionKeyValues:isa];

    swift_unknownObjectRelease(v35, v36);
    int v38 = type metadata accessor for UUID(0LL, v37);
    (*(void (**)(char *, uint64_t))(*(void *)(v38 - 8) + 8LL))(v17, v38);
    id v13 = v87;
    __int128 v30 = v93;
  }

  id v50 = *(void *)(v79 + 8 * v51);
  if (v50)
  {
LABEL_19:
    id v49 = v51;
LABEL_16:
    __int128 v40 = (v50 - 1) & v50;
    __int128 v41 = __clz(__rbit64(v50)) + (v49 << 6);
    uint64_t v92 = v49;
    goto LABEL_12;
  }

  while (1)
  {
    id v49 = v51 + 1;
    if (__OFADD__(v51, 1LL)) {
      break;
    }
    if (v49 >= v80)
    {
      uint64_t v92 = v78;
      goto LABEL_30;
    }

    id v50 = *(void *)(v79 + 8 * v49);
    ++v51;
    if (v50) {
      goto LABEL_16;
    }
  }

  __break(1u);
  return result;
}

        uint64_t v5 = v45;
        goto LABEL_31;
      }

  __break(1u);
  return result;
}

  uint64_t v19 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v19,  1046LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

      sub_1003F5CB4(&qword_1009BB728);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v31);
      uint64_t v46 = v55;
      [v55 recvStableKeyMaterialForFrameworkCache:isa];

      swift_unknownObjectRelease(v46, v47);
      sub_10040A274(v25, &qword_1009B8E08);
      return;
    }

    uint64_t v26 = v36;
    goto LABEL_22;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  uint64_t v19 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v19,  1046LL,  0);
  __break(1u);
  return result;
}

    uint64_t v12 = (v22 - 1) & v22;
    id v13 = __clz(__rbit64(v22)) + (v14 << 6);
LABEL_31:
    uint64_t v19 = *(id *)(*(void *)(v1 + 48) + 8 * v13);
    if (!v19) {
      goto LABEL_34;
    }
    while (1)
    {
      sub_100424C28((Swift::Int *)&v26, v19);

      uint64_t v6 = v14;
      int v7 = v12;
      if ((v1 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_12:
      id v15 = __CocoaSet.Iterator.next()(a1);
      if (v15)
      {
        uint64_t v16 = v15;
        int v25 = v15;
        id v17 = sub_100485210();
        swift_unknownObjectRetain(v16, v18);
        swift_dynamicCast(&v26, &v25, (char *)&type metadata for Swift.AnyObject + 8, v17, 7LL);
        uint64_t v19 = v26;
        swift_unknownObjectRelease(v16, v20);
        id v14 = v6;
        uint64_t v12 = v7;
        if (v19) {
          continue;
        }
      }

      goto LABEL_34;
    }
  }

  __break(1u);
}

void sub_1000E9A68(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412290;
    id v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  " => Kicking Apple ID based linked account: %@",  (uint8_t *)&v7,  0xCu);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountController]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
  [v5 enableAccountWithUniqueID:v6];

  [v3 registerAccount];
}

void sub_1000E9C54(_Unwind_Exception *a1)
{
}

void sub_1000E9C70(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  if (state == 2)
  {
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Got called to kick account repair.", buf, 2u);
    }

    uint64_t v12 = sub_1000E7D30();
    if ((_DWORD)v12)
    {
      uint64_t v14 = im_primary_queue(v12, v13);
      id v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v14);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1000E9E88;
      block[3] = &unk_1008F6010;
      void block[4] = WeakRetained;
      dispatch_async(v8, block);
LABEL_15:
    }
  }

  else if (!state)
  {
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = @"YES";
      if (!v3) {
        int v7 = @"NO";
      }
      *(_DWORD *)buf = 138412290;
      id v17 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Told to check in for account repair with activity %@ ",  buf,  0xCu);
    }

    id v8 = (dispatch_queue_s *)xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_string(v8, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_int64(v8, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_4_HOURS);
    xpc_object_t v9 = xpc_activity_copy_criteria(v3);
    __int16 v10 = v9;
    if (!v9 || !xpc_equal(v9, v8)) {
      xpc_activity_set_criteria(v3, v8);
    }

    goto LABEL_15;
  }
}

id sub_1000E9E88(uint64_t a1)
{
  return [*(id *)(a1 + 32) repairAccounts];
}

LABEL_58:
      if (([v33 isUserDisabled] & 1) == 0)
      {
        id v51 = (void *)objc_claimAutoreleasedReturnValue(+[IDSRestrictions sharedInstance](&OBJC_CLASS___IDSRestrictions, "sharedInstance"));
        uint64_t v52 = v38 & ~[v51 shouldDisableService:v34];

        if (v52 == 1)
        {
          uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeyManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeyManager,  "sharedInstance"));
          uint64_t v54 = [v53 registrationNeedsKTDataUpdated];

          uint64_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
          uint64_t v56 = os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT);
          if (v54)
          {
            if (v56)
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "Registering to update KT Data.",  buf,  2u);
            }

            __int16 v57 = (void *)objc_claimAutoreleasedReturnValue(-[IDSAccountRepair accountController](v25, "accountController"));
            [v57 enableAccountWithUniqueID:v35];

            [v33 registerAccount];
          }

          else
          {
            if (v56)
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "Not reregistering to update KT Data.",  buf,  2u);
            }
          }
        }
      }

      if ([v33 isEnabled])
      {
        uint64_t v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
        if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          id v112 = v35;
          unsigned int v113 = 2112;
          id v114 = v34;
          _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEFAULT,  " => Enabled, account uniqueID: %@, service name: %@",  buf,  0x16u);
        }

        __int16 v59 = (id)objc_claimAutoreleasedReturnValue(-[IDSAccountRepair accountController](v25, "accountController"));
        id v60 = v33;
        if ([v60 accountType] != 2)
        {
          uint64_t v61 = [v60 registrationStatus];
          switch((int)v61)
          {
            case -1:
              id v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
              {
                id v76 = [v60 registrationError];
                *(_DWORD *)buf = 67109120;
                LODWORD(v112) = v76;
                _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEFAULT,  " => Failed account, let's see if we should kick it (Registration Error: %d)",  buf,  8u);
              }

              switch((unint64_t)[v60 registrationError])
              {
                case 0uLL:
                case 1uLL:
                case 2uLL:
                case 0x15uLL:
                case 0x16uLL:
                case 0x1BuLL:
                case 0x1FuLL:
                case 0x24uLL:
                case 0x26uLL:
                case 0x29uLL:
                  id v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                  if (!os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_131;
                  }
                  goto LABEL_115;
                case 3uLL:
                case 4uLL:
                  id v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                  if (!os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_131;
                  }
                  *(_WORD *)buf = 0;
                  id v78 = v77;
                  uint64_t v79 = " => We sent too many SMS, not retrying, disabling account";
                  goto LABEL_95;
                case 5uLL:
                case 6uLL:
                  id v91 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                  if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v91,  OS_LOG_TYPE_DEFAULT,  " => Garbage SMS signature, disabling",  buf,  2u);
                  }

                  uint64_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue([v60 uniqueID]);
                  [v59 disablePrimaryAccountWithUniqueID:v62];
                  goto LABEL_132;
                case 7uLL:
                case 8uLL:
                case 9uLL:
                case 0x2CuLL:
                case 0x2DuLL:
                case 0x2EuLL:
                  id v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                  if (!os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_105;
                  }
                  *(_WORD *)buf = 0;
                  uint64_t v87 = v82;
                  uint64_t v88 = " => This appeared to be a server or connectivity error, re-registering";
                  goto LABEL_104;
                case 0xAuLL:
                  id v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                  if (!os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_105;
                  }
                  *(_WORD *)buf = 0;
                  uint64_t v87 = v82;
                  uint64_t v88 = " => We need a new signature (server authentication failed), re-registering";
                  goto LABEL_104;
                case 0xBuLL:
                  id v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                  if (!os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_105;
                  }
                  *(_WORD *)buf = 0;
                  uint64_t v87 = v82;
                  uint64_t v88 = " => We were missing auth credentials, re-registering";
                  goto LABEL_104;
                case 0xCuLL:
                case 0xDuLL:
                case 0xEuLL:
                case 0xFuLL:
                case 0x10uLL:
                case 0x11uLL:
                case 0x12uLL:
                case 0x13uLL:
                case 0x14uLL:
                case 0x17uLL:
                case 0x18uLL:
                case 0x19uLL:
                case 0x1AuLL:
                case 0x1CuLL:
                case 0x1DuLL:
                case 0x20uLL:
                case 0x2AuLL:
                case 0x2BuLL:
                  id v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                  if (!os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_131;
                  }
                  goto LABEL_115;
                case 0x1EuLL:
                  id v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                  if (!os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_105;
                  }
                  *(_WORD *)buf = 0;
                  uint64_t v87 = v82;
                  uint64_t v88 = " => This appeared to be a rate limit error, re-registering";
                  goto LABEL_104;
                case 0x2FuLL:
                case 0x30uLL:
                case 0x31uLL:
                  id v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                  if (!os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_131;
                  }
LABEL_115:
                  uint64_t v90 = [v60 registrationError];
                  *(_DWORD *)buf = 67109120;
                  LODWORD(v112) = v90;
                  id v78 = v77;
                  uint64_t v79 = " => Not retrying for error: %d, disabling account";
                  break;
                default:
                  id v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                  if (!os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_131;
                  }
                  uint64_t v92 = [v60 registrationError];
                  *(_DWORD *)buf = 67109120;
                  LODWORD(v112) = v92;
                  id v78 = v77;
                  uint64_t v79 = " => Default error: %d   disabling";
                  break;
              }

              uint64_t v80 = 8;
              goto LABEL_130;
            case 0:
              id v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                id v78 = v77;
                uint64_t v79 = " => Unknown account status, let's disable it";
LABEL_95:
                uint64_t v80 = 2;
LABEL_130:
                _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, v79, buf, v80);
              }

    uint64_t v125 = 0;
LABEL_59:
    *__int128 v138 = v125;
    return;
  }

  uint64_t v68 = v67;
  double v145 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v67);
  uint64_t v142 = __CocoaSet.startIndex.getter(v66);
  uint64_t v143 = v69;
  v144 = 1;
  if (v68 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }

LABEL_131:
              uint64_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue([v60 uniqueID]);
              [v59 disableAccountWithUniqueID:v62];
              goto LABEL_132;
            case 1:
              __int128 v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_DEFAULT,  " => Unregistered account, let's see if we can register it",  buf,  2u);
              }

              id v82 = (os_log_s *)objc_claimAutoreleasedReturnValue([v60 vettedAliases]);
              if (-[os_log_s count](v82, "count")) {
                goto LABEL_105;
              }
              __int128 v83 = [v60 hasEverRegistered];

              if ((v83 & 1) != 0) {
                goto LABEL_106;
              }
              uint64_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_132;
              }
              *(_WORD *)buf = 0;
              uint64_t v84 = v62;
              uint64_t v85 = " => account has no vetted aliases, and it's never registered, let's ignore it";
              uint64_t v86 = 2;
              break;
            case 2:
            case 5:
              uint64_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v63 = _IDSStringFromIDSRegistrationStatus(v61);
                uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue(v63);
                *(_DWORD *)buf = 138412290;
                id v112 = v64;
                _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, " => %@", buf, 0xCu);
              }

              goto LABEL_132;
            case 3:
              id v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                uint64_t v87 = v82;
                uint64_t v88 = " => Authenticated, kicking a register";
LABEL_104:
                _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, v88, buf, 2u);
              }

  return (IDSUTunControlMessage_Hello *)a4;
}

  objc_autoreleasePoolPop(v5);
}

      switch(objc_msgSend(v4, "command", v215))
      {
        case 0u:
          goto LABEL_150;
        case 1u:
        case 0x25u:
          __int128 v97 = v4;
          v281 = 0LL;
          v282 = (double *)&v281;
          v283 = 0x2020000000LL;
          v284 = 0x7FFFFFFFFFFFFFFFLL;
          sendingMessages = self->_sendingMessages;
          v278[0] = _NSConcreteStackBlock;
          v278[1] = 3221225472LL;
          v278[2] = sub_10025AD74;
          v278[3] = &unk_1008FEF78;
          v278[4] = self;
          v227 = v97;
          v279 = v227;
          v280 = &v281;
          -[NSMutableArray enumerateObjectsUsingBlock:](sendingMessages, "enumerateObjectsUsingBlock:", v278);
          if (*((void *)v282 + 3) == 0x7FFFFFFFFFFFFFFFLL)
          {
            __int128 v99 = OSLogHandleForTransportCategory("UTunConnection");
            __int128 v100 = (os_log_s *)objc_claimAutoreleasedReturnValue(v99);
            if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
            {
              __int16 v101 = [v227 sequenceNumber];
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)v328 = v101;
              _os_log_impl( (void *)&_mh_execute_header,  v100,  OS_LOG_TYPE_DEFAULT,  "  => Message id %d ACK'd but it already timed out...",  buf,  8u);
            }

            __int16 v103 = os_log_shim_legacy_logging_enabled(v102);
            if ((_DWORD)v103)
            {
              if (_IDSShouldLogTransport(v103))
              {
                v217 = [v227 sequenceNumber];
                _IDSLogTransport( @"UTunConnection",  @"IDS",  @"  => Message id %d ACK'd but it already timed out...");
                if (_IDSShouldLog(0LL, @"UTunConnection"))
                {
                  objc_msgSend(v227, "sequenceNumber", v217);
                  _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"  => Message id %d ACK'd but it already timed out...");
                }
              }
            }

            goto LABEL_284;
          }

          uint64_t v147 = (__CFString *)objc_claimAutoreleasedReturnValue(-[NSMutableArray objectAtIndex:](self->_sendingMessages, "objectAtIndex:"));
          uint64_t v148 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString context](v147, "context"));
          [v148 processAckForSocketPairMessage:v147];
          v225 = v147;
          uint64_t v149 = [v148 timeSent];
          double v151 = v150;
          v152 = IMTimeOfDay(v149) - v150;
          rtt = self->_rtt;
          if (rtt == 0.0) {
            uint64_t v154 = v152;
          }
          else {
            uint64_t v154 = v152 * 0.1 + rtt * 0.9;
          }
          self->_rtt = v154;
          double v155 = OSLogHandleForTransportCategory("UTunConnection");
          id v156 = (os_log_s *)objc_claimAutoreleasedReturnValue(v155);
          if (os_log_type_enabled(v156, OS_LOG_TYPE_DEFAULT))
          {
            id v157 = [v227 sequenceNumber];
            uint64_t v158 = self->_rtt;
            *(_DWORD *)buf = 67109888;
            *(_DWORD *)v328 = v157;
            *(_WORD *)&v328[4] = 2048;
            *(double *)&v328[6] = v158;
            *(_WORD *)&v328[14] = 2048;
            *(double *)&v328[16] = v152;
            *(_WORD *)&v328[24] = 2048;
            *(double *)&v328[26] = v151;
            _os_log_impl( (void *)&_mh_execute_header,  v156,  OS_LOG_TYPE_DEFAULT,  "  => Message id %d ACK'd RTT: %f  [instantaneous %f]  time sent: %f",  buf,  0x26u);
          }

          id v160 = os_log_shim_legacy_logging_enabled(v159);
          if ((_DWORD)v160)
          {
            if (_IDSShouldLogTransport(v160))
            {
              id v161 = [v227 sequenceNumber];
              v220 = v152;
              v221 = *(__CFString **)&v151;
              v219 = self->_rtt;
              v216 = v161;
              _IDSLogTransport( @"UTunConnection",  @"IDS",  @"  => Message id %d ACK'd RTT: %f  [instantaneous %f]  time sent: %f");
              if (_IDSShouldLog(0LL, @"UTunConnection"))
              {
                id v162 = objc_msgSend(v227, "sequenceNumber", v216, *(void *)&v219, *(void *)&v152, *(void *)&v151);
                v220 = v152;
                v221 = *(__CFString **)&v151;
                v219 = self->_rtt;
                v216 = v162;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"  => Message id %d ACK'd RTT: %f  [instantaneous %f]  time sent: %f");
              }
            }
          }

          if (-[IDSUTunConnection _shouldAWDLogMessage:]( self,  "_shouldAWDLogMessage:",  v148,  v216,  *(void *)&v219,  *(void *)&v220,  v221))
          {
            uint64_t v164 = objc_alloc(&OBJC_CLASS___IDSLocalMessageRTTMetric);
            uint64_t v165 = (void *)objc_claimAutoreleasedReturnValue([v148 awdTopic]);
            id v166 = objc_msgSend( v164,  "initWithService:isToDefaultPairedDevice:messageSize:linkType:deliveryError:RTT:priority:",  v165,  v223,  objc_msgSend(v148, "sentMessageDataSize"),  -[IDSUTunConnection _currentLink](self, "_currentLink"),  0,  objc_msgSend(v148, "priority"));

            id v167 = (void *)objc_claimAutoreleasedReturnValue( +[IDSCoreAnalyticsLogger defaultLogger]( &OBJC_CLASS___IDSCoreAnalyticsLogger,  "defaultLogger"));
            [v167 logMetric:v166];

            v168 = (void *)objc_claimAutoreleasedReturnValue(+[IDSAWDLogging sharedInstance](&OBJC_CLASS___IDSAWDLogging, "sharedInstance"));
            id v169 = (void *)objc_claimAutoreleasedReturnValue([v148 awdTopic]);
            objc_msgSend( v168,  "messageDeliveredForService:isToDefaultPairedDevice:messageSize:linkType:deliveryError:RTT:priority:",  v169,  v223,  objc_msgSend(v148, "sentMessageDataSize"),  -[IDSUTunConnection _currentLink](self, "_currentLink"),  0,  (unint64_t)(v152 * 1000.0),  objc_msgSend(v148, "priority"));

            uint64_t v147 = v225;
          }

          id v170 = objc_opt_class(&OBJC_CLASS___IDSSocketPairResourceTransferSender, v163);
          if ((objc_opt_isKindOfClass(v147, v170) & 1) == 0) {
            goto LABEL_232;
          }
          id v171 = v147;
          if (-[__CFString isDone](v171, "isDone"))
          {
            [v148 setUnderlyingSocketPairMessage:0];
            -[IDSLocalDeliveryQueue dequeueMessage:](self->_deliveryQueue, "dequeueMessage:", v148);

LABEL_232:
            id v171 = (__CFString *)objc_claimAutoreleasedReturnValue([v148 completionBlock]);
            id v172 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDevicePolicyController sharedInstance]( &OBJC_CLASS___IDSDevicePolicyController,  "sharedInstance"));
            id v173 = [v172 shouldBlackOutDeviceWithCbuuid:self->_cbuuid];

            uint64_t v174 = self->_rtt;
            if ([v227 command] == 37)
            {
              v175 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
              v276[0] = _NSConcreteStackBlock;
              v276[1] = 3221225472LL;
              v276[2] = sub_10025AE54;
              v276[3] = &unk_1008FEFA0;
              v176 = v276;
              v276[4] = v148;
              *(double *)&v276[6] = v174;
              v277 = v173;
              v276[5] = v171;
              [v175 performBlockMainQueue:v276];
            }

            else
            {
              v175 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
              v274[0] = _NSConcreteStackBlock;
              v274[1] = 3221225472LL;
              v274[2] = sub_10025AF38;
              v274[3] = &unk_1008FEFA0;
              v176 = v274;
              v274[4] = v148;
              *(double *)&v274[6] = v174;
              v275 = v173;
              v274[5] = v171;
              [v175 performBlockMainQueue:v274];
            }
          }

LABEL_272:
          kdebug_trace(722010248, [v227 sequenceNumber], 0, 0, 0);
          v202 = OSLogHandleForIDSCategory("UTunConnection");
          v203 = (os_log_s *)objc_claimAutoreleasedReturnValue(v202);
          if (os_log_type_enabled(v203, OS_LOG_TYPE_DEFAULT))
          {
            v204 = [v148 messageID];
            v205 = [v227 sequenceNumber];
            v206 = *((void *)v282 + 3);
            v207 = (char *)-[NSMutableArray count](self->_sendingMessages, "count");
            *(_DWORD *)buf = 67110146;
            *(_DWORD *)v328 = v204;
            *(_WORD *)&v328[4] = 1024;
            *(_DWORD *)&v328[6] = v205;
            *(_WORD *)&v328[10] = 2048;
            *(void *)&v328[12] = v206;
            *(_WORD *)&v328[20] = 2112;
            *(void *)&v328[22] = v225;
            *(_WORD *)&v328[30] = 2048;
            *(void *)&v328[32] = v207 - 1;
            _os_log_impl( (void *)&_mh_execute_header,  v203,  OS_LOG_TYPE_DEFAULT,  "Removing ack'd message[%u] with sequenceNumber %u (index=%lu), message %@ remaining count %lu",  buf,  0x2Cu);
          }

          v209 = v225;
          if (os_log_shim_legacy_logging_enabled(v208)
            && _IDSShouldLog(0LL, @"UTunConnection"))
          {
            v210 = [v148 messageID];
            v211 = COERCE_DOUBLE([v227 sequenceNumber]);
            v212 = v282[3];
            v221 = v225;
            v222 = (char *)-[NSMutableArray count](self->_sendingMessages, "count") - 1;
            v219 = v211;
            v220 = v212;
            v216 = v210;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"Removing ack'd message[%u] with sequenceNumber %u (index=%lu), message %@ remaining count %lu");
          }

          -[IDSUTunConnection _removeMessageFromStatistics:]( self,  "_removeMessageFromStatistics:",  v148,  v216,  *(void *)&v219,  *(void *)&v220,  v221,  v222);
          -[NSMutableArray removeObjectAtIndex:](self->_sendingMessages, "removeObjectAtIndex:", *((void *)v282 + 3));
          if (!-[NSMutableArray count](self->_sendingMessages, "count"))
          {
            v213 = self->_sendingMessages;
            self->_sendingMessages = 0LL;

            v209 = v225;
          }

          if (!self->_sendingMessages) {
            -[IDSUTunConnection _clearSendingPowerAssertionWithReason:]( self,  "_clearSendingPowerAssertionWithReason:",  @"No in flight messages remaining");
          }
          -[NSMutableArray removeObject:](self->_fallbackMessages, "removeObject:", v148);
          if (!-[NSMutableArray count](self->_fallbackMessages, "count"))
          {
            fallbackMessages = self->_fallbackMessages;
            self->_fallbackMessages = 0LL;

            v209 = v225;
          }

          -[__CFString setContext:](v209, "setContext:", 0LL);
          -[__CFString setCancelled:](v209, "setCancelled:", 1LL);
          -[IDSUTunConnection _dequeueMessages](self, "_dequeueMessages");

LABEL_284:
          _Block_object_dispose(&v281, 8);

          goto LABEL_167;
        case 3u:
          __int128 v129 = objc_opt_class(&OBJC_CLASS___IDSSocketPairProtobufMessage, v77);
          if ((objc_opt_isKindOfClass(v4, v129) & 1) != 0)
          {
            uint64_t v130 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  -[IDSUTunConnection _socketToNiceCommand:]( self,  "_socketToNiceCommand:",  [v4 command])));
            uint64_t v131 = v4;
            __int128 v132 = objc_alloc(&OBJC_CLASS___IDSProtobuf);
            uint64_t v133 = (void *)objc_claimAutoreleasedReturnValue([v131 data]);
            __int128 v134 = -[IDSProtobuf initWithProtobufData:type:isResponse:]( v132,  "initWithProtobufData:type:isResponse:",  v133,  [v131 type],  objc_msgSend(v131, "isResponse") != 0);

            v298[0] = _NSConcreteStackBlock;
            v298[1] = 3221225472LL;
            v298[2] = sub_10025A474;
            v298[3] = &unk_1008FEF00;
            v299 = v131;
            v300 = v134;
            v306 = (__int16)v224;
            v301 = self;
            __int128 v135 = *(id *)&key;
            v307 = v223;
            v302 = v135;
            v303 = v130;
            v308 = (char)v6;
            v309 = (char)v5;
            v304 = *(id *)&v232;
            v305 = v233;
            v310 = v226;
            id v136 = v130;
            uint64_t v137 = v134;
            __int128 v138 = v131;
            -[IDSUTunConnection _processMessage:withSequenceNumberBlock:]( self,  "_processMessage:withSequenceNumberBlock:",  v138,  v298);
          }

          else
          {
            __int16 v180 = OSLogHandleForIDSCategory("Warning");
            id v181 = (os_log_s *)objc_claimAutoreleasedReturnValue(v180);
            if (os_log_type_enabled(v181, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              *(void *)v328 = v4;
              _os_log_impl( (void *)&_mh_execute_header,  v181,  OS_LOG_TYPE_ERROR,  "LocalDelivery: IDSSocketPairCommandProtobufMessage received incompatible data message of type %@",  buf,  0xCu);
            }

            if (os_log_shim_legacy_logging_enabled(v182))
            {
              _IDSWarnV( @"IDSFoundation",  @"LocalDelivery: IDSSocketPairCommandProtobufMessage received incompatible data message of type %@");
              _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"LocalDelivery: IDSSocketPairCommandProtobufMessage received incompatible data message of type %@");
              _IDSLogTransport( @"Warning",  @"IDS",  @"LocalDelivery: IDSSocketPairCommandProtobufMessage received incompatible data message of type %@");
            }
          }

          goto LABEL_167;
        case 4u:
          double v139 = v4;
          __int16 v140 = [v139 versionNumber];
          uint64_t v141 = OSLogHandleForTransportCategory("UTunConnection");
          uint64_t v142 = (os_log_s *)objc_claimAutoreleasedReturnValue(v141);
          if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v143 = self->_identifier;
            if (self->_needsHandshake) {
              v144 = @"YES";
            }
            else {
              v144 = @"NO";
            }
            *(_DWORD *)buf = 138413314;
            *(void *)v328 = self;
            *(_WORD *)&v328[8] = 2112;
            *(void *)&v328[10] = v143;
            *(_WORD *)&v328[18] = 1024;
            *(_DWORD *)&v328[20] = v140;
            *(_WORD *)&v328[24] = 1024;
            *(_DWORD *)&v328[26] = 4;
            *(_WORD *)&v328[30] = 2112;
            *(void *)&v328[32] = v144;
            _os_log_impl( (void *)&_mh_execute_header,  v142,  OS_LOG_TYPE_DEFAULT,  "%@ [%@] received handshake with version %u. We require %u. Needs handshake? %@",  buf,  0x2Cu);
          }

          __int16 v146 = os_log_shim_legacy_logging_enabled(v145);
          if ((_DWORD)v146)
          {
            if (_IDSShouldLogTransport(v146))
            {
              _IDSLogTransport( @"UTunConnection",  @"IDS",  @"%@ [%@] received handshake with version %u. We require %u. Needs handshake? %@");
              if (_IDSShouldLog(0LL, @"UTunConnection")) {
                _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"%@ [%@] received handshake with version %u. We require %u. Needs handshake? %@");
              }
            }
          }

          self->_needsHandshake = 0;

          goto LABEL_167;
        case 6u:
          goto LABEL_147;
        case 7u:
          v270[0] = _NSConcreteStackBlock;
          v270[1] = 3221225472LL;
          v270[2] = sub_10025B01C;
          v270[3] = &unk_1008FEFC8;
          v270[4] = self;
          v271 = *(id *)&key;
          v273 = v223;
          v272 = *(id *)&v232;
          -[IDSUTunConnection _processMessage:withSequenceNumberBlock:]( self,  "_processMessage:withSequenceNumberBlock:",  v4,  v270);

          goto LABEL_167;
        case 8u:
        case 9u:
        case 0xAu:
        case 0xBu:
        case 0xCu:
        case 0xDu:
        case 0x29u:
          -[IDSUTunConnection _sendAckForMessage:](self, "_sendAckForMessage:", v4);
LABEL_147:
          uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  -[IDSUTunConnection _socketToNiceCommand:]( self,  "_socketToNiceCommand:",  [v4 command])));
          if ((objc_opt_respondsToSelector(v4, "data") & 1) != 0) {
            uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue([v4 data]);
          }
          else {
            uint64_t v88 = 0LL;
          }
          v311[0] = _NSConcreteStackBlock;
          v311[1] = 3221225472LL;
          v311[2] = sub_10025A028;
          v311[3] = &unk_1008FEF00;
          id v91 = v4;
          v312 = v91;
          v313 = v88;
          v314 = self;
          uint64_t v92 = *(id *)&key;
          v320 = v223;
          v319 = (__int16)v224;
          v315 = v92;
          v316 = v87;
          v321 = (char)v6;
          v322 = (char)v5;
          v317 = *(id *)&v232;
          v318 = v233;
          v323 = v226;
          __int128 v93 = v87;
          __int128 v94 = v88;
          -[IDSUTunConnection _processMessage:withSequenceNumberBlock:]( self,  "_processMessage:withSequenceNumberBlock:",  v91,  v311);

          goto LABEL_167;
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
          -[IDSUTunConnection _sendAckForMessage:](self, "_sendAckForMessage:", v4);
LABEL_150:
          uint64_t v89 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  -[IDSUTunConnection _socketToNiceCommand:]( self,  "_socketToNiceCommand:",  [v4 command])));
          if ((objc_opt_respondsToSelector(v4, "data") & 1) != 0) {
            uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue([v4 data]);
          }
          else {
            uint64_t v90 = 0LL;
          }
          if ((objc_opt_respondsToSelector(v4, "compressed") & 1) != 0 && ![v4 compressed])
          {
            __int128 v96 = 0;
          }

          else
          {
            __int128 v95 = objc_claimAutoreleasedReturnValue([v90 _FTOptionallyDecompressData]);

            __int128 v96 = 1;
            uint64_t v90 = (void *)v95;
          }

          v285[0] = _NSConcreteStackBlock;
          v285[1] = 3221225472LL;
          v285[2] = sub_10025AA10;
          v285[3] = &unk_1008FEF28;
          id v104 = v90;
          v292 = (__int16)v224;
          v293 = v96;
          v286 = v104;
          v287 = self;
          v288 = *(id *)&key;
          v294 = v223;
          __int16 v105 = v89;
          v289 = v105;
          v295 = (char)v6;
          v296 = (char)v5;
          v290 = *(id *)&v232;
          v291 = v233;
          v297 = v226;
          -[IDSUTunConnection _processMessage:withSequenceNumberBlock:]( self,  "_processMessage:withSequenceNumberBlock:",  v4,  v285);

          goto LABEL_167;
        case 0x15u:
          uint64_t v106 = OSLogHandleForIDSCategory("UTunConnection");
          uint64_t v107 = (os_log_s *)objc_claimAutoreleasedReturnValue(v106);
          if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v107,  OS_LOG_TYPE_DEFAULT,  "SocketPairConnection should have consumed this and never pass it up",  buf,  2u);
          }

          if (os_log_shim_legacy_logging_enabled(v108)
            && _IDSShouldLog(0LL, @"UTunConnection"))
          {
            _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"SocketPairConnection should have consumed this and never pass it up");
          }

          goto LABEL_167;
        case 0x16u:
          BYTE1(v219) = v226;
          LOBYTE(v219) = v223;
          -[IDSUTunConnection _processIncomingResourceTransferMessage:messageUUID:streamID:topic:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:isDefaultPairedDevice:didWakeHint:]( self,  "_processIncomingResourceTransferMessage:messageUUID:streamID:topic:wantsAppAck:expectsPeerResponse:peerRespo nseIdentifier:isDefaultPairedDevice:didWakeHint:",  v4,  v233,  v224,  *(void *)&key,  v6,  v5,  *(void *)&v232,  *(void *)&v219);
          goto LABEL_167;
        case 0x19u:
          uint64_t v109 = OSLogHandleForIDSCategory("UTunConnection");
          id v110 = (os_log_s *)objc_claimAutoreleasedReturnValue(v109);
          if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)v328 = v4;
            _os_log_impl( (void *)&_mh_execute_header,  v110,  OS_LOG_TYPE_DEFAULT,  "GOT SOCKET PAIR COMMAND MESSAGE OUTGOING NICE PROXY %@",  buf,  0xCu);
          }

          if (os_log_shim_legacy_logging_enabled(v111)
            && _IDSShouldLog(0LL, @"UTunConnection"))
          {
            v216 = v4;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"GOT SOCKET PAIR COMMAND MESSAGE OUTGOING NICE PROXY %@");
          }

          id v112 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  -[IDSUTunConnection _socketToNiceCommand:]( self,  "_socketToNiceCommand:",  objc_msgSend(v4, "command", v216))));
          -[IDSUTunConnection _sendAckForMessage:](self, "_sendAckForMessage:", v4);
          if ((objc_opt_respondsToSelector(v4, "compressed") & 1) != 0) {
            unsigned int v113 = [v4 compressed];
          }
          else {
            unsigned int v113 = 1;
          }
          if ((objc_opt_respondsToSelector(v4, "data") & 1) != 0) {
            v183 = (void *)objc_claimAutoreleasedReturnValue([v4 data]);
          }
          else {
            v183 = 0LL;
          }
          if (v113)
          {
            v185 = objc_claimAutoreleasedReturnValue([v183 _FTOptionallyDecompressData]);

            v183 = (void *)v185;
          }

          v258[0] = _NSConcreteStackBlock;
          v258[1] = 3221225472LL;
          v258[2] = sub_10025B1BC;
          v258[3] = &unk_1008FEFF0;
          v186 = v183;
          v265 = (__int16)v224;
          v266 = v113;
          v259 = v186;
          v260 = self;
          v261 = *(id *)&key;
          v187 = v112;
          v262 = v187;
          v267 = (char)v6;
          v268 = (char)v5;
          v263 = *(id *)&v232;
          v264 = v233;
          v269 = v226;
          -[IDSUTunConnection _processMessage:withSequenceNumberBlock:]( self,  "_processMessage:withSequenceNumberBlock:",  v4,  v258);

          goto LABEL_167;
        case 0x1Au:
          uint64_t v124 = OSLogHandleForIDSCategory("UTunConnection");
          uint64_t v125 = (os_log_s *)objc_claimAutoreleasedReturnValue(v124);
          if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)v328 = v4;
            _os_log_impl( (void *)&_mh_execute_header,  v125,  OS_LOG_TYPE_DEFAULT,  "GOT SOCKET PAIR COMMAND MESSAGE INCOMING NICE PROXY %@",  buf,  0xCu);
          }

          if (os_log_shim_legacy_logging_enabled(v126)
            && _IDSShouldLog(0LL, @"UTunConnection"))
          {
            v216 = v4;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"GOT SOCKET PAIR COMMAND MESSAGE INCOMING NICE PROXY %@");
          }

          __int128 v127 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  -[IDSUTunConnection _socketToNiceCommand:]( self,  "_socketToNiceCommand:",  objc_msgSend(v4, "command", v216))));
          -[IDSUTunConnection _sendAckForMessage:](self, "_sendAckForMessage:", v4);
          if ((objc_opt_respondsToSelector(v4, "compressed") & 1) != 0) {
            uint64_t v128 = [v4 compressed];
          }
          else {
            uint64_t v128 = 1;
          }
          if ((objc_opt_respondsToSelector(v4, "data") & 1) != 0) {
            v184 = (void *)objc_claimAutoreleasedReturnValue([v4 data]);
          }
          else {
            v184 = 0LL;
          }
          if (v128)
          {
            v188 = objc_claimAutoreleasedReturnValue([v184 _FTOptionallyDecompressData]);

            v184 = (void *)v188;
          }

          v246[0] = _NSConcreteStackBlock;
          v246[1] = 3221225472LL;
          v246[2] = sub_10025B448;
          v246[3] = &unk_1008FEFF0;
          v189 = v184;
          v253 = (__int16)v224;
          v254 = v128;
          v247 = v189;
          v248 = self;
          v249 = *(id *)&key;
          v190 = v127;
          v250 = v190;
          v255 = (char)v6;
          v256 = (char)v5;
          v251 = *(id *)&v232;
          v252 = v233;
          v257 = v226;
          -[IDSUTunConnection _processMessage:withSequenceNumberBlock:]( self,  "_processMessage:withSequenceNumberBlock:",  v4,  v246);

          goto LABEL_167;
        case 0x1Bu:
        case 0x1Cu:
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
        case 0x20u:
        case 0x21u:
        case 0x22u:
        case 0x23u:
        case 0x24u:
        case 0x26u:
        case 0x2Au:
        case 0x2Bu:
        case 0x2Cu:
        case 0x2Du:
        case 0x2Eu:
        case 0x2Fu:
        case 0x30u:
        case 0x31u:
        case 0x33u:
          id v78 = OSLogHandleForIDSCategory("UTunConnection");
          uint64_t v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
          if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)v328 = v4;
            _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEFAULT,  "GOT SOCKET PAIR COMMAND INCOMMING IMESSAGE COMMAND %@",  buf,  0xCu);
          }

          if (os_log_shim_legacy_logging_enabled(v80)
            && _IDSShouldLog(0LL, @"UTunConnection"))
          {
            v216 = v4;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"GOT SOCKET PAIR COMMAND INCOMMING IMESSAGE COMMAND %@");
          }

          __int128 v81 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  -[IDSUTunConnection _socketToNiceCommand:]( self,  "_socketToNiceCommand:",  objc_msgSend(v4, "command", v216))));
          -[IDSUTunConnection _sendAckForMessage:](self, "_sendAckForMessage:", v4);
          if ((objc_opt_respondsToSelector(v4, "compressed") & 1) != 0) {
            id v82 = [v4 compressed];
          }
          else {
            id v82 = 1;
          }
          if ((objc_opt_respondsToSelector(v4, "data") & 1) != 0)
          {
            __int128 v83 = (id)objc_claimAutoreleasedReturnValue([v4 data]);

            if (!v82) {
              goto LABEL_145;
            }
          }

          else
          {
            __int128 v83 = 0LL;
            if (!v82) {
              goto LABEL_145;
            }
          }

          uint64_t v84 = objc_claimAutoreleasedReturnValue([v83 _FTOptionallyDecompressData]);

          __int128 v83 = (id)v84;
LABEL_145:
          v234[0] = _NSConcreteStackBlock;
          v234[1] = 3221225472LL;
          v234[2] = sub_10025B6E4;
          v234[3] = &unk_1008FEFF0;
          uint64_t v85 = v83;
          v235 = v85;
          v241 = (__int16)v224;
          v242 = v82;
          v236 = v233;
          v237 = self;
          v238 = *(id *)&key;
          uint64_t v86 = v81;
          v239 = v86;
          v243 = (char)v6;
          v244 = (char)v5;
          v240 = *(id *)&v232;
          v245 = v226;
          -[IDSUTunConnection _processMessage:withSequenceNumberBlock:]( self,  "_processMessage:withSequenceNumberBlock:",  v4,  v234);

LABEL_167:
          if (v230 && !-[IDSUTunConnection _sendingMessageCountForClass:](self, "_sendingMessageCountForClass:", 1LL)) {
            -[IDSUTunConnection _handleBecomingEmptyForDataProtectionClass:]( self,  "_handleBecomingEmptyForDataProtectionClass:",  1LL);
          }
          if (v229 && !-[IDSUTunConnection _sendingMessageCountForClass:](self, "_sendingMessageCountForClass:", 0LL)) {
            -[IDSUTunConnection _handleBecomingEmptyForDataProtectionClass:]( self,  "_handleBecomingEmptyForDataProtectionClass:",  0LL);
          }
          if (v228 && !-[IDSUTunConnection _sendingMessageCountForClass:](self, "_sendingMessageCountForClass:", 2LL)) {
            -[IDSUTunConnection _handleBecomingEmptyForDataProtectionClass:]( self,  "_handleBecomingEmptyForDataProtectionClass:",  2LL);
          }
          break;
        case 0x27u:
          id v114 = v4;
          LOBYTE(v281) = 0;
          uint64_t v115 = OSLogHandleForIDSCategory("UTunConnection");
          uint64_t v116 = (os_log_s *)objc_claimAutoreleasedReturnValue(v115);
          if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v117 = [v114 reason];
            uint64_t v118 = (id)objc_claimAutoreleasedReturnValue([v114 serviceName]);
            uint64_t v119 = [v114 mappedStreamID];
            *(_DWORD *)buf = 67109634;
            *(_DWORD *)v328 = v117;
            *(_WORD *)&v328[4] = 2112;
            *(void *)&v328[6] = v118;
            *(_WORD *)&v328[14] = 1024;
            *(_DWORD *)&v328[16] = v119;
            _os_log_impl( (void *)&_mh_execute_header,  v116,  OS_LOG_TYPE_DEFAULT,  "Got ServiceMapMessage reason %u serviceName %@ streamID %u",  buf,  0x18u);
          }

          if (os_log_shim_legacy_logging_enabled(v120)
            && _IDSShouldLog(0LL, @"UTunConnection"))
          {
            id v121 = [v114 reason];
            v219 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue([v114 serviceName]));
            *(void *)&v220 = [v114 mappedStreamID];
            v216 = v121;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"Got ServiceMapMessage reason %u serviceName %@ streamID %u");
          }

          outgoingServiceMap = self->_outgoingServiceMap;
          uint64_t v123 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v114, "serviceName", v216, *(void *)&v219, *(void *)&v220));
          -[IDSUTunPeerServiceMap associateServiceName:withStreamID:remoteInstanceID:remoteInstanceIDChanged:]( outgoingServiceMap,  "associateServiceName:withStreamID:remoteInstanceID:remoteInstanceIDChanged:",  v123,  [v114 mappedStreamID],  self->_remoteInstanceID,  &v281);

          goto LABEL_167;
        default:
          goto LABEL_167;
      }

          __break(1u);
          goto LABEL_132;
        }

        goto LABEL_24;
      }

LABEL_105:
LABEL_106:
              uint64_t v89 = (void *)objc_claimAutoreleasedReturnValue([v60 uniqueID]);
              [v59 enableAccountWithUniqueID:v89];

              [v60 registerAccount];
              goto LABEL_133;
            default:
              uint64_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (!os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_132;
              }
              *(_DWORD *)buf = 67109120;
              LODWORD(v112) = (_DWORD)v61;
              uint64_t v84 = v62;
              uint64_t v85 = " => *** Other status: %d";
              uint64_t v86 = 8;
              break;
          }

          _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, v85, buf, v86);
LABEL_132:
        }

  __break(1u);
LABEL_106:
  __break(1u);
}

                __break(1u);
LABEL_106:
                if (v36 < 0) {
                  id v173 = v36;
                }
                else {
                  id v173 = v36 & 0xFFFFFFFFFFFFFF8LL;
                }
                swift_bridgeObjectRetain(v36);
                id v37 = _CocoaArrayWrapper.endIndex.getter(v173);
                swift_bridgeObjectRelease(v36);
                goto LABEL_3;
              }

              __int128 v81 = v72 + 4;
            }
          }
        }

LABEL_133:
        goto LABEL_134;
      }

      if ([v33 accountType] == 3)
      {
        id v65 = (void *)objc_claimAutoreleasedReturnValue( +[IDSServerBag sharedInstanceForBagType:]( &OBJC_CLASS___IDSServerBag,  "sharedInstanceForBagType:",  0LL));
        uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue([v65 objectForKey:@"enable-atv-repair-always"]);
        if (v67 && (uint64_t v68 = objc_opt_class(&OBJC_CLASS___NSNumber, v66), (objc_opt_isKindOfClass(v67, v68) & 1) != 0))
        {
          id v69 = [v67 BOOLValue];

          if (v69)
          {
            uint64_t v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
            if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412546;
              id v112 = v35;
              unsigned int v113 = 2112;
              id v114 = v34;
              _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEFAULT,  " => Enabling disabled account, because it's a device account - we're allowed to repair: %@, service name: %@",  buf,  0x16u);
            }

            id v71 = (void *)objc_claimAutoreleasedReturnValue(-[IDSAccountRepair accountController](v25, "accountController"));
            [v71 enableAccountWithUniqueID:v35];

            [v33 registerAccount];
            goto LABEL_134;
          }
        }

        else
        {
        }

        uint64_t v72 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
        if (!os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_87;
        }
        *(_DWORD *)buf = 138412546;
        id v112 = v35;
        unsigned int v113 = 2112;
        id v114 = v34;
        uint64_t v73 = v72;
        id v74 = " => Disabled repair for aTV from server, skipping: %@, service name: %@";
        goto LABEL_86;
      }

      uint64_t v72 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        id v112 = v35;
        unsigned int v113 = 2112;
        id v114 = v34;
        uint64_t v73 = v72;
        id v74 = " => Disabled, skipping: %@, service name: %@";
LABEL_86:
        _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, v74, buf, 0x16u);
      }
      }

      if (objc_msgSend(v180, "count", v166) && objc_msgSend(v175, "count"))
      {
        __int16 v146 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
        [v146 noteReceivedGroupMasterKeyMaterials:v180 URIs:v175 sessionID:*(void *)(a1 + 112)];
      }

      uint64_t v147 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
      [v147 requestPendingKeyMaterialsForGroup:*(void *)(a1 + 104) sessionID:*(void *)(a1 + 112)];

      goto LABEL_9;
    }

    __int16 v59 = OSLogHandleForIDSCategory("SessionController");
    id v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
    uint64_t v61 = os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT);
    if (v61)
    {
      uint64_t v62 = *(void **)(a1 + 80);
      uint64_t v63 = ids_monotonic_time(v61);
      *(_DWORD *)buf = 138412546;
      v190 = v62;
      v191 = 2048;
      v192 = v63;
      _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "Receiving Key Material (%@) [SKM] -- %f",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v64))
    {
      id v65 = _IDSShouldLog(0LL, @"SessionController");
      if ((_DWORD)v65)
      {
        uint64_t v66 = *(void **)(a1 + 80);
        id v170 = ids_monotonic_time(v65);
        id v166 = v66;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"SessionController",  @"Receiving Key Material (%@) [SKM] -- %f");
      }
    }

    uint64_t v58 = 1;
    if (!v178)
    {
LABEL_53:
      uint64_t v70 = OSLogHandleForIDSCategory("SessionController");
      id v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
      if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v72 = *(const __CFString **)(a1 + 96);
        uint64_t v73 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138478595;
        v190 = v178;
        v191 = 2113;
        v192 = v177;
        v193 = 2112;
        v194 = v72;
        v195 = 2112;
        v196 = v73;
        _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEFAULT,  "Storing the master key material %{private}@ stableKeyMaterial: %{private}@ for %@ token %@",  buf,  0x2Au);
      }

      if (os_log_shim_legacy_logging_enabled(v74)
        && _IDSShouldLog(0LL, @"SessionController"))
      {
        id v172 = *(const __CFString **)(a1 + 96);
        uint64_t v174 = *(void *)(a1 + 40);
        id v166 = v178;
        id v170 = v177;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"SessionController",  @"Storing the master key material %{private}@ stableKeyMaterial: %{private}@ for %@ token %@");
      }

      id v75 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance",  v166,  *(void *)&v170,  v172,  v174));
      id v76 = *(void *)(a1 + 40);
      id v77 = *(void *)(a1 + 48);
      id v78 = *(void *)(a1 + 104);
      uint64_t v79 = *(void *)(a1 + 112);
      v187 = 0LL;
      BYTE1(v173) = v58;
      LOBYTE(v173) = v178 != 0LL;
      LOBYTE(v16_Block_object_dispose(va, 8) = 1;
      uint64_t v80 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v75,  "receivedAndSetKeyMaterial:stableKeyMaterial:forDevice:fromURI:groupID:sessionID:fromSender:error:forMKM:forSKM:",  v178,  *(void *)&v177,  v76,  v77,  v78,  v79,  v168,  &v187,  v173));
      __int128 v81 = v187;

      if (v80)
      {
        id v82 = (void *)objc_claimAutoreleasedReturnValue([v80 objectForKey:@"ids-rtencryption-master-key-material-key"]);
        if (v82)
        {
          [v180 addObject:v82];
          __int128 v83 = objc_loadWeakRetained((id *)(a1 + 128));
          uint64_t v84 = v83;
          uint64_t v85 = *(void *)(a1 + 72);
          if (*(void *)(a1 + 64))
          {
            if (v85 && v83 && !*((_BYTE *)v83 + 40))
            {
              *((_BYTE *)v83 + 40) = 1;
              [*(id *)(a1 + 88) reportFirstMKMReceivedFromPush:ids_monotonic_time(v83)];
            }
          }

          else if (!v85 && v83 && !*((_BYTE *)v83 + 41))
          {
            *((_BYTE *)v83 + 41) = 1;
            [*(id *)(a1 + 88) reportFirstMKMReceivedFromQR:ids_monotonic_time(v83)];
          }
        }

        uint64_t v108 = (void *)objc_claimAutoreleasedReturnValue([v80 objectForKey:@"ids-rtencryption-stable-key-material-key"]);
        if (v108)
        {
          uint64_t v109 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
          [v109 receivedGroupStableKeyMaterial:v108 fromPushToken:*(void *)(a1 + 40) sessionID:*(void *)(a1 + 112) groupID:*(void *)(a1 + 104)];
        }
      }

      else
      {
        uint64_t v86 = OSLogHandleForIDSCategory("SessionController");
        uint64_t v87 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
        if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v88 = *(void **)(a1 + 96);
          uint64_t v89 = *(double *)(a1 + 40);
          *(_DWORD *)buf = 138412546;
          v190 = v88;
          v191 = 2112;
          v192 = v89;
          _os_log_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_DEFAULT,  "not received any valid MKM or MKM for %@ token %@",  buf,  0x16u);
        }

        if (os_log_shim_legacy_logging_enabled(v90)
          && _IDSShouldLog(0LL, @"SessionController"))
        {
          id v166 = *(void **)(a1 + 96);
          id v170 = *(double *)(a1 + 40);
          _IDSLogV( 0LL,  @"IDSFoundation",  @"SessionController",  @"not received any valid MKM or MKM for %@ token %@");
        }

        if (v81)
        {
          id v91 = OSLogHandleForIDSCategory("SessionController");
          uint64_t v92 = (os_log_s *)objc_claimAutoreleasedReturnValue(v91);
          if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEFAULT, "key material not decrypted", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled(v93)
            && _IDSShouldLog(0LL, @"SessionController"))
          {
            _IDSLogV(0LL, @"IDSFoundation", @"SessionController", @"key material not decrypted");
          }

          __int128 v94 = 0;
          goto LABEL_95;
        }
      }

      __int128 v94 = 1;
LABEL_95:

      goto LABEL_96;
    }

          CSDBSqliteDatabaseSetVersion(a1, 8003LL);
          id v77 = OSLogHandleForIDSCategory("IDSDMessageStore");
          id v78 = (os_log_s *)objc_claimAutoreleasedReturnValue(v77);
          if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "Adding app level ack", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled(v79)
            && _IDSShouldLog(0LL, @"IDSDMessageStore"))
          {
            _IDSLogV(0LL, @"IDSFoundation", @"IDSDMessageStore", @"Adding app level ack");
          }

          uint64_t v80 = sub_1003B3B08( a2,  @"Unable to drop legacy table",  @"Successfully dropped legacy table",  @"DROP TABLE outgoing_message");
          CSDBRecordStoreCreateTablesForClass(&off_1009030C8, a2, 0LL);
          if (!v80) {
            goto LABEL_425;
          }
          CSDBSqliteDatabaseSetVersion(a1, 8004LL);
          goto LABEL_141;
        }

    __break(1u);
    return result;
  }

  if (v245 < 0) {
    id v121 = v245;
  }
  else {
    id v121 = v245 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v245);
  uint64_t v122 = __CocoaSet.count.getter(v121);
  swift_bridgeObjectRelease(v120);
  if (v122)
  {
    swift_bridgeObjectRetain(v120);
    uint64_t v123 = __CocoaSet.makeIterator()(v121);
    uint64_t v124 = type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
    uint64_t v125 = sub_10040A2B0( (unint64_t *)&unk_1009B97C0,  type metadata accessor for IDSGroupEncryptionControllerParticipant,  (uint64_t)&protocol conformance descriptor for NSObject);
    id v126 = Set.Iterator.init(_cocoa:)(v247, v123, v124, v125);
    uint64_t v120 = v247[0];
    uint64_t v31 = (_BYTE *)v247[1];
    __int128 v127 = v247[2];
    uint64_t v2 = v247[3];
    uint64_t v1 = v247[4];
    goto LABEL_79;
  }

  __break(1u);
}

LABEL_87:
LABEL_134:
      uint64_t v31 = v100;

LABEL_135:
      if (v31 == (id)++v32)
      {
        uint64_t v31 = [v29 countByEnumeratingWithState:&v103 objects:v119 count:16];
        if (!v31) {
          goto LABEL_137;
        }
        goto LABEL_28;
      }
    }
  }

  if (v10)
  {
    *(_WORD *)buf = 0;
    uint64_t v6 = "Waiting for migration, not repairing accounts";
    goto LABEL_10;
  }

LABEL_140:
}

id sub_1000EBA18(uint64_t a1, int a2, void *a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _OWORD v4[2] = sub_1000EBA70;
  v4[3] = &unk_1008FA038;
  int v5 = a2;
  return (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "__imArrayByFilteringWithBlock:", v4));
}

BOOL sub_1000EBA70(uint64_t a1, void *a2)
{
  return [a2 accountType] == *(_DWORD *)(a1 + 32);
}

BOOL sub_1000EBAA0(id a1, IDSDAccount *a2)
{
  return !-[IDSDAccount isAdHocAccount](a2, "isAdHocAccount");
}

void sub_1000EBABC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_autoreleasePoolPush();
  int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v23 = 138412290;
    double v24 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "   Checking account registration status: %@",  (uint8_t *)&v23,  0xCu);
  }

  unint64_t v6 = (unint64_t)-[__CFString registrationError](v3, "registrationError");
  if (v6 <= 0x26)
  {
    unint64_t v7 = v6;
    if (((1LL << v6) & 0x4600000000LL) != 0)
    {
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 134218242;
        double v24 = (const __CFString *)v7;
        __int16 v25 = 2112;
        uint64_t v26 = (uint64_t)v3;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "   Not attempting repair service/account pair {registrationError: %ld, account: %@}",  (uint8_t *)&v23,  0x16u);
      }

void sub_1000EBE40(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_autoreleasePoolPush();
  if (-[__CFString registrationError](v3, "registrationError") == (id)38)
  {
    int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 134218242;
      uint64_t v17 = 38LL;
      __int16 v18 = 2112;
      uint64_t v19 = v3;
      unint64_t v6 = "   Not enabling account due to irreparable registration error {registrationError: %ld, account: %@}";
      unint64_t v7 = v5;
      uint32_t v8 = 22;
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v16, v8);
      goto LABEL_12;
    }

    goto LABEL_12;
  }

  xpc_object_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountController]);
  if (![v9 hasActiveSMSAccount])
  {

    goto LABEL_9;
  }

  if (-[__CFString isEnabled](v3, "isEnabled"))
  {
    int v10 = -[__CFString registrationStatus](v3, "registrationStatus");

    if (v10 < 2) {
      goto LABEL_15;
    }
LABEL_9:
    int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v16) = 0;
      unint64_t v6 = "  => We have no active SMS registrations, skipping";
      unint64_t v7 = v5;
      uint32_t v8 = 2;
      goto LABEL_11;
    }

void sub_1000EC0A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_autoreleasePoolPush();
  if (([v3 isEnabled] & 1) == 0)
  {
    int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint32_t v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "   Account isn't enabled, enabling local account",  v8,  2u);
    }

    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountController]);
    unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
    [v6 enableAccountWithUniqueID:v7];
  }

  objc_autoreleasePoolPop(v4);
}

void sub_1000EC174(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_autoreleasePoolPush();
  if (-[__CFString registrationError](v3, "registrationError") == (id)38)
  {
    int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 134218242;
      uint64_t v12 = 38LL;
      __int16 v13 = 2112;
      uint64_t v14 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "   Not enabling account due to irreparable registration error {registrationError: %ld, account: %@}",  (uint8_t *)&v11,  0x16u);
    }
  }

  else if (!-[__CFString isEnabled](v3, "isEnabled") {
         || (int)-[__CFString registrationStatus](v3, "registrationStatus") <= 1)
  }
  {
    unint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      else {
        unint64_t v7 = @"NO";
      }
      else {
        uint32_t v8 = @"YES";
      }
      int v11 = 138412546;
      uint64_t v12 = (uint64_t)v7;
      __int16 v13 = 2112;
      uint64_t v14 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "   Account isn't enabled and/or registered -- enabling {isEnabled: %@, unregistered: %@}",  (uint8_t *)&v11,  0x16u);
    }

    xpc_object_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountController]);
    int v10 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString uniqueID](v3, "uniqueID"));
    [v9 enableAccountWithUniqueID:v10];

    -[__CFString registerAccount](v3, "registerAccount");
  }

  objc_autoreleasePoolPop(v4);
}

void sub_1000EC360(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 accountController]);
  [v5 addPrimaryAccount:v4];

  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountController]);
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 uniqueID]);

  [v7 enablePrimaryAccountWithUniqueID:v6];
}

void sub_1000EC3EC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 accountController]);
  [v5 addPrimaryAccount:v4];

  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountController]);
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 uniqueID]);

  [v7 enablePrimaryAccountWithUniqueID:v6];
}

void sub_1000ECE78(uint64_t a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) iTunesSystemAccountWithError:0]);
  if (v1)
  {
    uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 138412290;
      int v5 = v1;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "iTunes is signed in -- ignoring request to sign out { systemAccount: %@ }",  (uint8_t *)&v4,  0xCu);
    }
  }

  else
  {
    uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
    id v3 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s signInResponder](v2, "signInResponder"));
    [v3 iTunesSignOut];
  }
}

void sub_1000ED310(uint64_t a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) iCloudSystemAccountWithError:0]);
  if (v1)
  {
    uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 138412290;
      int v5 = v1;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "iCloud is signed in -- ignoring request to sign out { systemAccount: %@ }",  (uint8_t *)&v4,  0xCu);
    }
  }

  else
  {
    uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
    id v3 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s signInResponder](v2, "signInResponder"));
    [v3 iCloudSignOut];
  }
}

void sub_1000ED4DC(uint64_t a1, uint64_t a2)
{
  int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a2));
    int v9 = 138412290;
    int v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Fetched current KT CDP Status. { IDSKTAccountStatus: %@ }",  (uint8_t *)&v9,  0xCu);
  }

  if (a2 == 4)
  {
    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountController]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uniqueID]);
    [v6 enableAccountWithUniqueID:v7];

    [*(id *)(a1 + 40) registerAccount];
  }

  else
  {
    uint32_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v9) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "KT says account isn't ready. Not trying to repair account.",  (uint8_t *)&v9,  2u);
    }
  }

double sub_1000ED708()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstanceForBagType:](&OBJC_CLASS___IDSServerBag, "sharedInstanceForBagType:", 0LL));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([v0 objectForKey:@"phone-registration-retry-interval-seconds"]);

  if (v1)
  {
    id v2 = [v1 doubleValue];
    double v4 = v3;
  }

  else
  {
    double v4 = 86400.0;
  }

  return v4;
}

double sub_1000ED790()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstanceForBagType:](&OBJC_CLASS___IDSServerBag, "sharedInstanceForBagType:", 0LL));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([v0 objectForKey:@"phone-registration-retry-max-interval-seconds"]);

  if (v1)
  {
    [v1 doubleValue];
    double v3 = v2;
  }

  else
  {
    double v3 = 691200.0;
  }

  return v3;
}

id sub_1000EDF20(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _phoneNumberRepairTimerHit:a2];
}

id sub_1000EE348(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _phoneNumberRepairTimerHit:a2];
}

id sub_1000EEA54(uint64_t a1)
{
  double v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountController]);
  double v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uniqueID]);
  [v2 enableAccountWithUniqueID:v3];

  return [*(id *)(a1 + 40) registerAccount];
}

void sub_1000EEBB8( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

uint64_t sub_1000EEBC8()
{
  uint64_t result = IMGetDomainBoolForKeyWithDefaultValue(@"com.apple.ids", @"MUXDisableFanoutEncryption", 1LL);
  byte_1009C7518 = result;
  return result;
}

nw_endpoint_t sub_1000EEBF8(unsigned int a1)
{
  *(void *)&address[4] = 0LL;
  *(void *)&address[12] = 0LL;
  uint64_t v3 = 0LL;
  *(_WORD *)&address[2] = __rev16(a1);
  *(_WORD *)address = 7708;
  return nw_endpoint_create_address((const sockaddr *)address);
}

void sub_1000EF240( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

uint64_t sub_1000EF270(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  if (*(void *)(result + 32) == a2)
  {
    *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = a3;
    *a4 = 1;
  }

  return result;
}

uint64_t sub_1000EF298(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  if (*(void *)(result + 32) == a2)
  {
    *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = a3;
    *a4 = 1;
  }

  return result;
}

uint64_t sub_1000EF898(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 16LL));
  if ((v2 & 1) != 0)
  {
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      __int16 v13 = "Mutliplexer Transport readHandler called for routed connection while invalidated";
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v13, buf, 2u);
    }
  }

  else
  {
    if ([*(id *)(a1 + 40) isTCP])
    {
      int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localTCPSYN]);

      if (!v5 && (*(_BYTE *)(*a2 + 13) & 2) != 0)
      {
        uint64_t v6 = bswap32(*(_DWORD *)(*a2 + 4));
        id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v6));
        [*(id *)(a1 + 40) setLocalTCPSYN:v7];

        uint32_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v9 = *(void *)(a1 + 40);
          *(_DWORD *)buf = 67109378;
          int v23 = v6;
          __int16 v24 = 2112;
          uint64_t v25 = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "saved local SYN %08X for connection %@",  buf,  0x12u);
        }
      }
    }

    int v10 = *((unsigned __int8 *)a2 + 46);
    if (!*((_BYTE *)a2 + 46)) {
      *((_DWORD *)a2 + 134) |= 0x4000u;
    }
    if (*(void *)(a1 + 48))
    {
      IDSLinkPacketBufferAddBufferStart(a2, 4294967292LL);
      *((_DWORD *)a2 + 134) |= 1u;
      a2[61] = *(void *)(a1 + 48);
      goto LABEL_12;
    }

    if (byte_1009C7518)
    {
      if (v10) {
        goto LABEL_13;
      }
      IDSLinkPacketBufferAddBufferStart(a2, 4294967292LL);
LABEL_12:
      *(_DWORD *)*a2 = 1467207418;
LABEL_13:
      kdebug_trace(722010320LL, 0LL, 0LL, 0LL, 0LL);
      return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 56LL) + 16LL))();
    }

    uint64_t v14 = *a2;
    uint64_t v15 = *(void *)(a1 + 32);
    __int16 v16 = *(_WORD *)(v15 + 72);
    *(_WORD *)(v15 + 72) = v16 + 1;
    *(_DWORD *)(v14 - 26) = 1467207418;
    *(_BYTE *)(v14 - 22) = HIBYTE(v16);
    *(_BYTE *)(v14 - 21) = v16;
    *(_DWORD *)(v14 - 20) = bswap32(*(_DWORD *)(a1 + 48));
    uint64_t v17 = *(void *)(a1 + 32);
    __int16 v18 = *(void **)(v17 + 64);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_1000EFB90;
    v20[3] = &unk_1008FA140;
    uint64_t v19 = *(void *)(a1 + 48);
    void v20[4] = v17;
    void v20[5] = v19;
    __int16 v21 = v16;
    _OWORD v20[6] = v14 - 16;
    v20[7] = a2;
    if ([v18 useCurrentEncryptionkeyWithHandler:v20])
    {
      IDSLinkPacketBufferAddBufferStart(a2, 4294967270LL);
      goto LABEL_13;
    }

    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      __int16 v13 = "Fanout encryption - useCurrentEncryptionkeyWithHandler failed - dropping outgoing packet";
      goto LABEL_16;
    }
  }

  return 0LL;
}

void sub_1000EFB90(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  int v10 = v9;
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(_DWORD **)(v11 + 88);
  if (v12)
  {
    if ([v9 isEqual:*(void *)(v11 + 80)])
    {
LABEL_12:
      [v10 getUUIDBytes:*(void *)(a1 + 48)];
      sub_1001FD140( (uint64_t)v12,  *(unsigned __int16 *)(a1 + 64),  **(unsigned __int8 ***)(a1 + 56),  *(void *)(*(void *)(a1 + 56) + 16LL),  1);
      goto LABEL_13;
    }

    sub_1001FD114((uint64_t)v12);
    *(void *)(*(void *)(a1 + 32) + 88LL) = 0LL;
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void **)(v13 + 80);
    *(void *)(v13 + 80) = 0LL;
  }

  while (1)
  {
    uint64_t v15 = *(void *)(a1 + 32);
    int v17 = *(_DWORD *)(v15 + 76);
    __int16 v16 = (void *)(v15 + 76);
    if (v17) {
      break;
    }
    if (SecRandomCopyBytes(kSecRandomDefault, 4uLL, v16)) {
      sub_10069AE58();
    }
  }

  uint64_t v12 = malloc(0x11F0uLL);
  id v18 = v7;
  sub_1001FCBA8( v12,  (uint64_t)[v18 bytes],  (int)objc_msgSend(v18, "length"),  1,  *(_DWORD *)(*(void *)(a1 + 32) + 76),  0,  0,  0,  1);
  id v19 = v18;
  int v20 = sub_1001FCBA8( v12,  (uint64_t)[v19 bytes],  (int)objc_msgSend(v19, "length"),  1,  *(_DWORD *)(a1 + 40),  0,  0,  0,  1);
  if (!v20)
  {
    *(void *)(*(void *)(a1 + 32) + 88LL) = v12;
    id v23 = [v10 copy];
    uint64_t v24 = *(void *)(a1 + 32);
    uint64_t v25 = *(void **)(v24 + 80);
    *(void *)(v24 + 80) = v23;

    goto LABEL_12;
  }

  int v21 = v20;
  free(v12);
  unsigned int v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    int v27 = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Fanout encryption - SRTP init failed with error code %d",  buf,  8u);
  }

LABEL_13:
}

void sub_1000F0134(_Unwind_Exception *a1)
{
}

void sub_1000F0164(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  unsigned int v7 = [a2 unsignedIntValue];
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) objectAtIndexedSubscript:a3]);
  id v9 = [v8 unsignedLongLongValue];

  int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v11 = *(_DWORD *)(a1 + 56);
    uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 488LL);
    int v22 = 67109888;
    unsigned int v23 = v7;
    __int16 v24 = 1024;
    unsigned int v25 = v11;
    __int16 v26 = 2048;
    id v27 = v9;
    __int16 v28 = 2048;
    uint64_t v29 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "comparing portSignatures %08X to %08X and participantIDs %016llX to %016llX",  (uint8_t *)&v22,  0x22u);
  }

  if (v7 == *(_DWORD *)(a1 + 56) && v9 == *(id *)(*(void *)(a1 + 48) + 488LL))
  {
    if (!*(_BYTE *)(a1 + 64))
    {
LABEL_16:
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = a3;
      *a4 = 1;
      return;
    }

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) objectAtIndexedSubscript:a3]);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 localTCPSYN]);

    if (v14)
    {
      unsigned int v15 = [v14 unsignedLongValue];
      if (*(_DWORD *)(a1 + 60) == v15)
      {
        *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = a3;
        *a4 = 1;
LABEL_15:

        goto LABEL_16;
      }

      __int16 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v21 = *(_DWORD *)(a1 + 60);
        int v22 = 67109376;
        unsigned int v23 = v21;
        __int16 v24 = 1024;
        unsigned int v25 = v15;
        id v18 = "resetSYN %08X localSYN %08X do not match";
        id v19 = v16;
        uint32_t v20 = 14;
        goto LABEL_13;
      }
    }

    else
    {
      __int16 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v17 = *(_DWORD *)(a1 + 60);
        int v22 = 67109120;
        unsigned int v23 = v17;
        id v18 = "resetSYN %08X but no localSYN";
        id v19 = v16;
        uint32_t v20 = 8;
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)&v22, v20);
      }
    }

    goto LABEL_15;
  }

void sub_1000F0650( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
}

uint64_t sub_1000F0840(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 16LL));
  int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if ((v4 & 1) != 0)
  {
    if (v6)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Mutliplexer Transport readHandler called for listner while invalidated",  buf,  2u);
    }

    return 0LL;
  }

  else
  {
    if (v6)
    {
      *(_WORD *)id v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "listener read callback!", v8, 2u);
    }

    IDSLinkPacketBufferAddBufferStart(a2, 4294967292LL);
    **(_DWORD **)a2 = 1467207418;
    *(_DWORD *)(a2 + 536) |= 0x4000u;
    kdebug_trace(722010320LL, 0LL, 0LL, 0LL, 0LL);
    return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 56LL) + 16LL))();
  }

LABEL_67:
        return 1;
      }

      -[NSMapTable setObject:forKey:](self->_fanoutEncryptionMKIToReceivingStateMap, "setObject:forKey:", v39, v38);
    }

    IDSLinkPacketBufferAddBufferStart(a3, 26LL);
    uint64_t v44 = sub_1001FD140((uint64_t)v39, bswap32(v33) >> 16, (unsigned __int8 *)a3->var0, a3->var2, 0);
    if (!v44)
    {

LABEL_22:
      if (a3->var2 <= 3)
      {
        uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v14 = a3->var2;
          *(_DWORD *)buf = 134217984;
          *(void *)uint64_t v67 = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Cannot retrieve port signature, invalid packetBuffer size: %ld",  buf,  0xCu);
        }

        return 1;
      }

      unsigned int v15 = *(unsigned __int16 *)a3->var0;
      __int16 v16 = __rev16(*((unsigned __int16 *)a3->var0 + 1));
      unsigned int v17 = __PAIR64__(v16, bswap32(v15)) >> 16;
      p_lock = &self->_lock;
      os_unfair_lock_lock(&self->_lock);
      value = 0LL;
      p_value = &value;
      uint64_t v62 = 0x2020000000LL;
      uint64_t v63 = -1LL;
      portSignatures = self->_portSignatures;
      v58[0] = _NSConcreteStackBlock;
      v58[1] = 3221225472LL;
      v58[2] = sub_1000F1430;
      v58[3] = &unk_1008FA200;
      __int16 v59 = v17;
      v58[5] = &value;
      v58[6] = var4;
      v58[4] = self;
      -[NSMutableArray enumerateObjectsUsingBlock:](portSignatures, "enumerateObjectsUsingBlock:", v58);
      if (p_value[3] == (void *)-1LL)
      {
        unsigned int v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          listeners = self->_listeners;
          *(_DWORD *)buf = 138412546;
          *(void *)uint64_t v67 = listeners;
          *(_WORD *)&v67[8] = 2112;
          *(void *)&v67[10] = self;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "check listeners %@\nGroupSessionMUXTransport %@",  buf,  0x16u);
        }

        uint64_t v52 = v17;
        uint64_t v56 = 0u;
        __int16 v57 = 0u;
        uint64_t v54 = 0u;
        uint64_t v55 = 0u;
        uint32_t v20 = self->_listeners;
        unsigned int v25 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v20,  "countByEnumeratingWithState:objects:count:",  &v54,  v72,  16LL);
        if (v25)
        {
          __int16 v26 = *(void *)v55;
          uint64_t v53 = p_lock;
          while (2)
          {
            for (uint64_t i = 0LL; i != v25; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v55 != v26) {
                objc_enumerationMutation(v20);
              }
              __int16 v28 = *(void **)(*((void *)&v54 + 1) + 8LL * (void)i);
              if ([v28 tryConsumePacketBuffer:a3])
              {
                uint64_t v32 = v28;
                p_lock = v53;
                [v32 setContext:var4];
                goto LABEL_53;
              }
            }

            unsigned int v25 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v20,  "countByEnumeratingWithState:objects:count:",  &v54,  v72,  16LL);
            p_lock = v53;
            if (v25) {
              continue;
            }
            break;
          }
        }

        uint32_t v20 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
        if (os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v29 = sub_1001FF4E0((uint64_t)a3->var0, a3->var2);
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)uint64_t v67 = v16;
          *(_WORD *)&v67[4] = 1024;
          *(_DWORD *)&v67[6] = __rev16(v15);
          *(_WORD *)&v67[10] = 2048;
          *(void *)&v67[12] = var4;
          uint64_t v68 = 1024;
          id v69 = v52;
          uint64_t v70 = 2080;
          id v71 = v29;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v20,  OS_LOG_TYPE_DEFAULT,  "Cannot find corresponding connection (localPort:%d, remotePort:%d, participantID:%llu, portSignature %08X), for incoming packet %s",  buf,  0x28u);
        }

        goto LABEL_53;
      }

      uint32_t v20 = (NSMutableArray *)objc_claimAutoreleasedReturnValue( -[NSMutableArray objectAtIndexedSubscript:]( self->_routedConnections,  "objectAtIndexedSubscript:"));
      if (-[NSMutableArray isTCP](v20, "isTCP"))
      {
        unsigned int v21 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray remoteTCPSYN](v20, "remoteTCPSYN"));
        int v22 = v21 == 0LL;

        if (v22)
        {
          if (a3->var2 <= 19)
          {
            __int128 v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
            if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
            {
              __int128 v41 = a3->var2;
              *(_DWORD *)buf = 134217984;
              *(void *)uint64_t v67 = v41;
              _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "connection is tcp but packet does not have enough bytes for header %ld",  buf,  0xCu);
            }

            goto LABEL_53;
          }

          if ((a3->var0[13] & 2) != 0)
          {
            id v49 = bswap32(*((_DWORD *)a3->var0 + 1));
            id v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v49));
            -[NSMutableArray setRemoteTCPSYN:](v20, "setRemoteTCPSYN:", v50);

            id v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
            if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109378;
              *(_DWORD *)uint64_t v67 = v49;
              *(_WORD *)&v67[4] = 2112;
              *(void *)&v67[6] = v20;
              _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "saved remote SYN %08X for connection %@",  buf,  0x12u);
            }
          }
        }
      }

      -[NSMutableArray writePacketBuffer:](v20, "writePacketBuffer:", a3);
LABEL_53:

      _Block_object_dispose(&value, 8);
      os_unfair_lock_unlock(p_lock);
      return 1;
    }

    id v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)uint64_t v67 = v44;
      uint64_t v46 = "Fanout encryptinon - decryption failed with error code %d";
      uint64_t v47 = v45;
      id v48 = 8;
LABEL_66:
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, v46, buf, v48);
      goto LABEL_67;
    }

    goto LABEL_67;
  }

  return 0;
}

            __int128 v42 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
            BOOL v43 = (void *)objc_claimAutoreleasedReturnValue([v42 registrationConductor]);
            uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v43 userStore]);
            id v45 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration userUniqueIdentifier](v9, "userUniqueIdentifier"));
            uint32_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue([v44 userWithUniqueIdentifier:v45]);

            uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
            uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([v46 registrationConductor]);
            id v48 = (void *)objc_claimAutoreleasedReturnValue([v47 userStore]);
            [v48 forceRemoveUser:v20 silently:0];

LABEL_68:
            goto LABEL_69;
          }

          if (v22 != 3)
          {
LABEL_69:
            uint64_t v14 = 0;
LABEL_70:
            -[os_log_s _stopRegistrationAgent](v11, "_stopRegistrationAgent", v60);
            id v49 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
            -[IMMessageContext setShouldBoost:](v49, "setShouldBoost:", 0LL);
            v62[0] = _NSConcreteStackBlock;
            v62[1] = 3221225472LL;
            v62[2] = sub_1001ECD28;
            v62[3] = &unk_1008FA0A0;
            __int128 v40 = v49;
            uint64_t v63 = v40;
            uint64_t v64 = v11;
            id v65 = v14;
            -[os_log_s _broadcastAccountMessageBlock:](v11, "_broadcastAccountMessageBlock:", v62);
            id v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
            if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
            {
              id v51 = @"NO";
              if (v14) {
                id v51 = @"YES";
              }
              *(_DWORD *)buf = 138412546;
              uint64_t v72 = (int64_t)v51;
              uint64_t v73 = 2112;
              id v74 = v9;
              _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "Needs deletion: %@ (%@)", buf, 0x16u);
            }

            uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s accountController](v11, "accountController"));
            uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s uniqueID](v11, "uniqueID"));
            [v52 disablePrimaryAccountWithUniqueID:v53];

            if (v14)
            {
              uint64_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
              if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s uniqueID](v11, "uniqueID"));
                *(_DWORD *)buf = 138412290;
                uint64_t v72 = (int64_t)v55;
                _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "Deleting account ID: %@",  buf,  0xCu);
              }

              uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s accountController](v11, "accountController"));
              [v56 removeAccount:v11];
            }

LABEL_79:
            goto LABEL_80;
          }

          __int16 v57 = -[IDSRegistration retries](v9, "retries");
          __int16 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          uint64_t v58 = os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
          if (v57 <= 2)
          {
            if (v58)
            {
              *(_DWORD *)buf = 138412290;
              uint64_t v72 = (int64_t)v9;
              _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  " => Will retry Authentication: %@",  buf,  0xCu);
            }

            -[IDSRegistration setRetries:]( v9,  "setRetries:",  -[IDSRegistration retries](v9, "retries") + 1);
            -[IDSRegistration setRegistrationCert:](v9, "setRegistrationCert:", 0LL);
            -[IDSRegistration setAuthenticationCert:](v9, "setAuthenticationCert:", 0LL);
            -[IDSRegistration setUris:](v9, "setUris:", 0LL);
            -[IDSRegistration setRegistrationStatus:](v9, "setRegistrationStatus:", 3LL);
            -[IDSRegistration saveToKeychain](v9, "saveToKeychain");
            sub_10012EC70(v9);
            goto LABEL_80;
          }

          if (!v58)
          {
LABEL_95:

            -[IDSRegistration setRetries:](v9, "setRetries:", 0LL);
            goto LABEL_69;
          }

          *(_WORD *)buf = 0;
        }

        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  " => Not retrying, max retries hit",  buf,  2u);
        goto LABEL_95;
      case 39LL:
        uint32_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_68;
        }
        *(_WORD *)buf = 0;
        unsigned int v21 = " => User has disabled SMS Registration, disabling the account";
        goto LABEL_59;
      case 47LL:
      case 48LL:
      case 49LL:
        uint32_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_68;
        }
        *(_WORD *)buf = 0;
        unsigned int v21 = " => User has KT enabled, but the account key needs a refresh.";
LABEL_59:
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, v21, buf, 2u);
        goto LABEL_68;
      default:
        switch(a5)
        {
          case 1LL:
            uint64_t v14 = 1;
            break;
          case 3LL:
          case 4LL:
            unsigned int v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
            if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT)) {
              sub_1006A25B8();
            }

            if (IMGetCachedDomainBoolForKey(@"com.apple.conference", @"NotifySMS"))
            {
              id v18 = (void *)objc_claimAutoreleasedReturnValue( +[IMUserNotification userNotificationWithIdentifier:title:message:defaultButton:alternateButton:otherButton:]( &OBJC_CLASS___IMUserNotification,  "userNotificationWithIdentifier:title:message:defaultButton:alternateButton:otherButton:",  @"Disabled",  @"FaceTime",  @"Too many SMS attempts, you can re-enable this in Preferences",  @"OK",  0LL,  0LL));
              id v19 = (void *)objc_claimAutoreleasedReturnValue( +[IMUserNotificationCenter sharedInstance]( &OBJC_CLASS___IMUserNotificationCenter,  "sharedInstance"));
              [v19 addUserNotification:v18 listener:0];
            }

            uint32_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSSMSRegistrationCenter sharedInstance]( &OBJC_CLASS___IDSSMSRegistrationCenter,  "sharedInstance"));
            -[os_log_s notePhoneNumberRegistrationReset](v20, "notePhoneNumberRegistrationReset");
            goto LABEL_68;
          case 5LL:
          case 12LL:
            break;
          case 10LL:
          case 11LL:
            goto LABEL_29;
          default:
            goto LABEL_70;
        }

        __int128 v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
        if (os_log_type_enabled(v41, OS_LOG_TYPE_FAULT)) {
          sub_1006A2534();
        }

        -[IDSRegistration removeFromKeychain](v9, "removeFromKeychain");
        goto LABEL_70;
    }
  }
}

    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    if (v16 < 0) {
      id v112 = v16;
    }
    else {
      id v112 = v16 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v16);
    unsigned int v17 = _CocoaArrayWrapper.endIndex.getter(v112);
    swift_bridgeObjectRelease(v16);
  }

void sub_1000F12C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_1000F1314(uint64_t a1, id a2)
{
  uint64_t v3 = *(_DWORD **)(a1 + 32);
  id v4 = a2;
  id v5 = [v4 bytes];
  int v6 = [v4 length];

  int v7 = sub_1001FCBA8(v3, (uint64_t)v5, v6, 0, 0, 0, *(_DWORD *)(a1 + 40), 0, 1);
  if (v7)
  {
    int v8 = v7;
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v11 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Fanout encryption - SRTP init failed with error code %d",  buf,  8u);
    }
  }

void sub_1000F1430(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  unsigned int v7 = [a2 unsignedIntValue];
  int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) objectAtIndexedSubscript:a3]);
  id v9 = [v8 unsignedLongLongValue];

  if (v7 == *(_DWORD *)(a1 + 56))
  {
    id v10 = *(id *)(a1 + 48);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = a3;
    if (v9 == v10) {
      *a4 = 1;
    }
  }

void sub_1000F16F8(_Unwind_Exception *a1)
{
}

void sub_1000F1828(id a1)
{
  id v1 = -[IDSGroupSessionMultiplexer initAndSetupNexus]( objc_alloc(&OBJC_CLASS___IDSGroupSessionMultiplexer),  "initAndSetupNexus");
  uint64_t v2 = (void *)qword_1009BE9C8;
  qword_1009BE9C8 = (uint64_t)v1;
}

void sub_1000F1CEC(_Unwind_Exception *a1)
{
}

void sub_1000F1E74(_Unwind_Exception *a1)
{
}

void sub_1000F24C0(_Unwind_Exception *a1)
{
}

id sub_1000F3698(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "MUXKillQUICConnectionTimer fired for %@",  (uint8_t *)&v5,  0xCu);
  }

  [*(id *)(a1 + 40) resetConnection:*(void *)(a1 + 32)];
  return [*(id *)(a1 + 32) invalidate];
}

BOOL IDSProtoKeyTransparencyTrustedServiceSignatureReadFrom(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0LL;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0LL;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0LL;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 1)
      {
        uint64_t String = PBReaderReadString(a2);
        uint64_t v13 = objc_claimAutoreleasedReturnValue(String);
        uint64_t v14 = 8LL;
LABEL_21:
        __int16 v16 = *(void **)(a1 + v14);
        *(void *)(a1 + v14) = v13;

        goto LABEL_23;
      }

      if ((PBReaderSkipValueWithTag(a2) & 1) == 0) {
        return 0LL;
      }
LABEL_23:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }

    uint64_t Data = PBReaderReadData(a2);
    uint64_t v13 = objc_claimAutoreleasedReturnValue(Data);
    uint64_t v14 = 16LL;
    goto LABEL_21;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000F5980(uint64_t a1)
{
  uint64_t v2 = OSLogHandleForIDSCategory("IDSBTLELink");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    if (*(_BYTE *)(a1 + 40)) {
      char v4 = @"YES";
    }
    else {
      char v4 = @"NO";
    }
    *(_DWORD *)buf = 138412290;
    unsigned int v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "setHasSpaceAvailable %@", buf, 0xCu);
  }

  uint64_t v6 = *(void *)(a1 + 32);
  if (*(_BYTE *)(a1 + 40))
  {
    unint64_t v7 = *(void **)(v6 + 144);
    if (v7)
    {
      id v8 = [v7 length];
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v9 = a1 + 32;
      *(void *)(v10 + 64) += v8;
      ++*(void *)(*(void *)v9 + 72LL);
      *(_BYTE *)(*(void *)v9 + 136LL) = 0;
      [*(id *)(*(void *)v9 + 40) sendData:*(void *)(*(void *)v9 + 144) peerID:*(void *)(*(void *)v9 + 32)];
      int v11 = *(void **)(*(void *)v9 + 144LL);
      *(void *)(*(void *)v9 + 144LL) = 0LL;
    }

    else
    {
      *(_BYTE *)(v6 + 136) = 1;
      uint64_t v12 = *(void *)(a1 + 32);
      if (*(_BYTE *)(v12 + 137))
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v12 + 152));
        [WeakRetained link:*(void *)(a1 + 32) hasSpaceAvailable:1 deviceUniqueID:0 cbuuid:*(void *)(*(void *)(a1 + 32) + 8)];

        *(_BYTE *)(*(void *)(a1 + 32) + 137LL) = 0;
      }
    }
  }

  else
  {
    *(_BYTE *)(v6 + 136) = 0;
  }

id sub_1000F5BD8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _didReceiveData:*(void *)(a1 + 40)];
}

void sub_1000F64DC(id a1)
{
  mach_timebase_info info = (mach_timebase_info)0xAAAAAAAAAAAAAAAALL;
  mach_timebase_info(&info);
  LODWORD(v2) = info.denom;
  LODWORD(v1) = info.numer;
  *(double *)&qword_1009BE9D8 = (double)v1 / (double)v2 / 1000000000.0;
}

void sub_1000F6AE8(id a1)
{
  unint64_t v1 = objc_alloc_init(&OBJC_CLASS___IDSRapportDeliveryController);
  unint64_t v2 = (void *)qword_1009BE9E8;
  qword_1009BE9E8 = (uint64_t)v1;
}

uint64_t sub_1000F6F60(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000F6F74(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = (void *)objc_claimAutoreleasedReturnValue([v3 currentItem]);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog bonjourDeliveryController]( &OBJC_CLASS___IDSFoundationLog,  "bonjourDeliveryController"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138544131;
    uint64_t v26 = v6;
    __int16 v27 = 2114;
    uint64_t v28 = v7;
    __int16 v29 = 2113;
    __int128 v30 = v4;
    __int16 v31 = 2114;
    uint64_t v32 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Bonjour send message {guid: %{public}@, topic: %{public}@, deviceID: %{private}@, command: %{public}@}",  buf,  0x2Au);
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v4 _stripFZIDPrefix]);
  uint64_t v10 = *(void *)(a1 + 32);
  v21[0] = @"id";
  v21[1] = @"t";
  __int128 v23 = *(_OWORD *)(a1 + 40);
  v21[2] = @"c";
  v21[3] = @"p";
  uint64_t v22 = v10;
  uint64_t v24 = *(void *)(a1 + 56);
  int v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v22,  v21,  4LL));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) rapportClient]);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_1000F71A8;
  v15[3] = &unk_1008F9610;
  id v16 = v3;
  id v17 = *(id *)(a1 + 32);
  id v18 = *(id *)(a1 + 40);
  id v19 = v4;
  id v20 = *(id *)(a1 + 72);
  id v13 = v4;
  id v14 = v3;
  [v12 sendMessage:v11 toDeviceIdentifier:v9 completionBlock:v15];
}

void sub_1000F71A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentResult]);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog bonjourDeliveryController]( &OBJC_CLASS___IDSFoundationLog,  "bonjourDeliveryController"));
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = *(void *)(a1 + 48);
      uint64_t v9 = *(void *)(a1 + 56);
      int v14 = 138543875;
      uint64_t v15 = v7;
      __int16 v16 = 2114;
      uint64_t v17 = v8;
      __int16 v18 = 2113;
      uint64_t v19 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Bonjour failed to send message {guid: %{public}@, topic: %{public}@, deviceID: %{private}@}",  (uint8_t *)&v14,  0x20u);
    }

    uint64_t v10 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  2LL,  v3,  0LL);
    -[IDSDeliveryContext setDeviceID:](v10, "setDeviceID:", *(void *)(a1 + 56));
  }

  else
  {
    if (v6)
    {
      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v12 = *(void *)(a1 + 48);
      uint64_t v13 = *(void *)(a1 + 56);
      int v14 = 138543875;
      uint64_t v15 = v11;
      __int16 v16 = 2114;
      uint64_t v17 = v12;
      __int16 v18 = 2113;
      uint64_t v19 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Bonjour did send message {guid: %{public}@, topic: %{public}@, deviceID: %{private}@}",  (uint8_t *)&v14,  0x20u);
    }

    [v4 addObject:*(void *)(a1 + 56)];
    uint64_t v10 = -[IDSDeliveryContext initWithResponseCode:deviceID:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:deviceID:",  0LL,  *(void *)(a1 + 56));
    -[IDSDeliveryContext setLastCall:](v10, "setLastCall:", 0LL);
  }

  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  [*(id *)(a1 + 32) continueWithResult:v4];
}

void sub_1000F7374(void *a1, void *a2)
{
  id v3 = a2;
  if ([v3 state])
  {
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    [v15 handleFailureInMethod:a1[9] object:a1[4] file:@"IDSRapportDeliveryController.m" lineNumber:103 description:@"Any single bonjour message send shouldn't fail the whole send operation"];
  }

  char v4 = (void *)objc_claimAutoreleasedReturnValue([v3 value]);
  if ([v4 count])
  {
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog bonjourDeliveryController]( &OBJC_CLASS___IDSFoundationLog,  "bonjourDeliveryController"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[5];
      uint64_t v7 = a1[6];
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v4 count]));
      int v16 = 138543875;
      uint64_t v17 = v6;
      __int16 v18 = 2114;
      uint64_t v19 = v7;
      __int16 v20 = 2113;
      unsigned int v21 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Bonjour did finish sending message {guid: %{public}@, topic: %{public}@, sentDeviceIDs.count: %{private}@",  (uint8_t *)&v16,  0x20u);
    }

    uint64_t v9 = 0LL;
  }

  else
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1[4] + 8LL));
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog bonjourDeliveryController]( &OBJC_CLASS___IDSFoundationLog,  "bonjourDeliveryController"));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = a1[5];
      uint64_t v12 = a1[6];
      uint64_t v13 = (void *)a1[7];
      int v16 = 138543875;
      uint64_t v17 = v11;
      __int16 v18 = 2114;
      uint64_t v19 = v12;
      __int16 v20 = 2113;
      unsigned int v21 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Bonjour failed to send message to any recipient {guid: %{public}@, topic: %{public}@, deviceIDs: %{private}@}",  (uint8_t *)&v16,  0x20u);
    }

    pthread_mutex_unlock((pthread_mutex_t *)(a1[4] + 8LL));
    uint64_t v9 = 2LL;
  }

  int v14 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  v9,  0LL,  1LL);
  (*(void (**)(void))(a1[8] + 16LL))();
}

id sub_1000F8074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setObject:a3 forKey:a2];
}

LABEL_130:
        a4 = v8;
        goto LABEL_131;
      }

      uint64_t v9 = (unsigned int *)((char *)v9 + v15 + 2);
      int v16 = v17 - 2;
      if (v17 >= 2)
      {
        uint64_t v10 = (int)v17;
        goto LABEL_19;
      }

      uint64_t v117 = 0LL;
    }

uint64_t sub_1000F9B54(uint64_t result, unsigned int *a2, int a3, _DWORD *a4)
{
  if (a3 == 4)
  {
    *a4 = bswap32(*a2);
  }

  else
  {
    int v5 = result;
    uint64_t v6 = OSLogHandleForTransportCategory("UTun");
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      int v10 = a3;
      __int16 v11 = 1024;
      int v12 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "getUint32FromBytes, uint32_t should be 4 bytes, not %u bytes, field: %u",  buf,  0xEu);
    }

    uint64_t result = os_log_shim_legacy_logging_enabled(v8);
    if ((_DWORD)result)
    {
      uint64_t result = _IDSShouldLogTransport(result);
      if ((_DWORD)result)
      {
        _IDSLogTransport( @"UTun",  @"IDS",  @"getUint32FromBytes, uint32_t should be 4 bytes, not %u bytes, field: %u");
        uint64_t result = _IDSShouldLog(0LL, @"UTun");
        if ((_DWORD)result) {
          return _IDSLogV( 0LL,  @"IDSFoundation",  @"UTun",  @"getUint32FromBytes, uint32_t should be 4 bytes, not %u bytes, field: %u");
        }
      }
    }
  }

  return result;
}

void sub_1000F9E8C(id a1)
{
  unint64_t v1 = objc_alloc_init(&OBJC_CLASS___IDSDRegistrationPushManager);
  unint64_t v2 = (void *)qword_1009BE9F8;
  qword_1009BE9F8 = (uint64_t)v1;
}

void sub_1000FAFF4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, os_activity_scope_state_s state, char a29)
{
}

void sub_1000FB650( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, os_activity_scope_state_s state, char a29)
{
}

void sub_1000FBA8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, os_activity_scope_state_s state, char a29)
{
}

void sub_1000FBC68( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state, char a20)
{
}

void sub_1000FBDA0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
}

void sub_1000FBFB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state, char a20)
{
}

void sub_1000FC1CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, os_activity_scope_state_s state, char a26)
{
}

void sub_1000FC208(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 responseUserID]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 responseStatus]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 responseOrigin]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 responseMessage]);
    int v15 = 138413058;
    int v16 = v5;
    __int16 v17 = 2112;
    __int16 v18 = v6;
    __int16 v19 = 2112;
    __int16 v20 = v7;
    __int16 v21 = 2112;
    uint64_t v22 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Received validate credentials response {userID: %@, status: %@, origin: %@, message: %@}",  (uint8_t *)&v15,  0x2Au);
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 responseStatus]);
  unsigned int v10 = [v9 intValue];

  if (v10)
  {
    __int16 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT)) {
      sub_10069B208(v3, v11);
    }
  }

  else
  {
    int v12 = *(void **)(a1 + 32);
    __int16 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue([v3 responseOrigin]);
    id v13 = -[os_log_s integerValue](v11, "integerValue");
    int v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](&OBJC_CLASS___NSArray, "arrayWithObject:", *(void *)(a1 + 40)));
    [v12 _handleAction:v13 forAccounts:v14];
  }
}

void sub_1000FC484(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  unint64_t v2 = (void *)qword_1009BEA00;
  qword_1009BEA00 = (uint64_t)v1;
}

void sub_1000FD2B8(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSKTGossipManager);
  unint64_t v2 = (void *)qword_1009BEA18;
  qword_1009BEA18 = (uint64_t)v1;
}

id sub_1000FD914(id a1, NSString *a2)
{
  unint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[NSString _stripPotentialTokenURIWithToken:](a2, "_stripPotentialTokenURIWithToken:", 0LL));
  id v3 = -[IDSURI initWithPrefixedURI:](objc_alloc(&OBJC_CLASS___IDSURI), "initWithPrefixedURI:", v2);

  return v3;
}

void sub_1000FD9F0(uint64_t a1)
{
  unint64_t v2 = objc_autoreleasePoolPush();
  uint64_t v13 = *(void *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v13, 1LL));
  id v10 = 0LL;
  +[TransparencyGossip sthsReceivedFromPeers:error:]( &OBJC_CLASS___TransparencyGossip,  "sthsReceivedFromPeers:error:",  v3,  &v10);
  id v4 = v10;

  int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      *(_DWORD *)buf = 138412290;
      id v12 = v4;
      uint64_t v7 = "Sending sth's to transparencyd failed with error: %@";
      uint64_t v8 = v5;
      uint32_t v9 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v7, buf, v9);
    }
  }

  else if (v6)
  {
    *(_WORD *)buf = 0;
    uint64_t v7 = "Successfully sent sth's to transparencyd.";
    uint64_t v8 = v5;
    uint32_t v9 = 2;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v2);
}

void sub_1000FDDB8(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSDGroupContextDataSource);
  unint64_t v2 = (void *)qword_1009BEA28;
  qword_1009BEA28 = (uint64_t)v1;
}

void sub_1000FE40C(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a5;
  id v14 = a6;
  int v15 = (void *)objc_claimAutoreleasedReturnValue([v11 responseEntries]);

  if (v15)
  {
    int v16 = (void *)objc_claimAutoreleasedReturnValue([v11 responseEntries]);
    __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 lastObject]);
    __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKey:@"version"]);
    id v19 = [v18 intValue];

    __int16 v20 = objc_alloc(&OBJC_CLASS___ENGroupID);
    id v21 = objc_alloc(&OBJC_CLASS___ENStableGroupID);
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v11 responseEngramID]);
    id v23 = [v21 initWithDataRepresentation:v22];
    uint64_t v24 = -[ENGroupID initWithStableGroupID:generation:](v20, "initWithStableGroupID:generation:", v23, v19);

    unsigned int v25 = *(void **)(a1 + 32);
    uint64_t v26 = *(void *)(a1 + 40);
    uint64_t v27 = *(void *)(a1 + 48);
    v52[0] = _NSConcreteStackBlock;
    v52[1] = 3221225472LL;
    void v52[2] = sub_1000FE8D4;
    v52[3] = &unk_1008FA380;
    id v53 = *(id *)(a1 + 112);
    [v25 _groupFromServerResponse:v11 context:v26 groupID:v24 error:v27 resultCode:a4 resultDictionary:v13 allEntries:v14 completion:v52];
  }

  else if (v12)
  {
    uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ENLog groupContext](&OBJC_CLASS___ENLog, "groupContext"));
    if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT)) {
      sub_10069B3A4();
    }

    __int16 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ENLog groupContext](&OBJC_CLASS___ENLog, "groupContext"));
    if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT)) {
      sub_10069B2F4(v11);
    }

    (*(void (**)(void))(*(void *)(a1 + 112) + 16LL))();
  }

  else
  {
    __int128 v30 = objc_alloc(&OBJC_CLASS___ENGroupID);
    id v31 = objc_alloc(&OBJC_CLASS___ENStableGroupID);
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v11 responseEngramID]);
    id v33 = [v31 initWithDataRepresentation:v32];
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v11 responseVersion]);
    __int128 v35 = -[ENGroupID initWithStableGroupID:generation:]( v30,  "initWithStableGroupID:generation:",  v33,  [v34 intValue]);

    uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ENLog groupContext](&OBJC_CLASS___ENLog, "groupContext"));
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138477827;
      uint64_t v55 = v35;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_INFO,  "Saved group to group server {groupID: %{private}@}",  buf,  0xCu);
    }

    id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ENLog groupContext](&OBJC_CLASS___ENLog, "groupContext"));
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138477827;
      uint64_t v55 = v35;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "Saved group to group server {groupID: %{private}@}",  buf,  0xCu);
    }

    int v38 = *(void **)(a1 + 56);
    id v51 = 0LL;
    __int128 v39 = (void *)objc_claimAutoreleasedReturnValue([v38 conversationGroupWithUpdatedGroupID:v35 error:&v51]);
    id v40 = v51;
    __int128 v41 = v40;
    if (v39)
    {
      id v50 = v40;
      id v42 = objc_alloc(&OBJC_CLASS___IDSConversationGroupCypher);
      uint64_t v43 = *(void *)(a1 + 64);
      uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) participants]);
      id v45 = [v42 initWithConversationGroup:v39 deviceIdentity:v43 participants:v44];

      id v46 = [[ENGroup alloc] initWithGroupInfo:*(void *)(a1 + 72) groupID:v35 cypher:v45];
      uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog groupCrypto](&OBJC_CLASS___IDSFoundationLog, "groupCrypto"));
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        id v49 = v45;
        id v48 = (ENGroupID *)objc_claimAutoreleasedReturnValue([v46 groupID]);
        *(_DWORD *)buf = 138543362;
        uint64_t v55 = v48;
        _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "Saved group to group server { groupID: %{public}@ }",  buf,  0xCu);

        id v45 = v49;
      }

      (*(void (**)(void))(*(void *)(a1 + 112) + 16LL))();
      __int128 v41 = v50;
    }

    else
    {
      (*(void (**)(void))(*(void *)(a1 + 112) + 16LL))();
    }
  }
}

void sub_1000FE8D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    uint64_t v7 = ENGroupContextErrorItemKey;
    id v8 = v3;
    int v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v8,  &v7,  1LL));
  }

  else
  {
    int v5 = 0LL;
  }

  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  ENGroupContextErrorDomain,  -2100LL,  v5));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000FF054(uint64_t a1, void *a2)
{
  id v59 = a2;
  uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue(+[ENParticipant participantsByAlias:](&OBJC_CLASS___ENParticipant, "participantsByAlias:"));
  __int128 v91 = 0u;
  __int128 v92 = 0u;
  __int128 v93 = 0u;
  __int128 v94 = 0u;
  uint64_t v65 = a1;
  id obj = *(id *)(a1 + 32);
  id v63 = [obj countByEnumeratingWithState:&v91 objects:v105 count:16];
  id v3 = 0LL;
  if (v63)
  {
    uint64_t v62 = *(void *)v92;
    id v4 = &IMInsertBoolsToXPCDictionary_ptr;
    do
    {
      for (uint64_t i = 0LL; i != v63; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v92 != v62) {
          objc_enumerationMutation(obj);
        }
        BOOL v6 = *(void **)(*((void *)&v91 + 1) + 8LL * (void)i);
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog groupCrypto](&OBJC_CLASS___IDSFoundationLog, "groupCrypto"));
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543362;
          __int128 v97 = v6;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Fetched Entry from GroupServer {entry: %{public}@}",  buf,  0xCu);
        }

        id v8 = *(void **)(v65 + 40);
        uint32_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 publicKeyData]);
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:v9]);

        if (v10)
        {
          uint64_t v64 = i;
          id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 sponsorAlias]);
          id v12 = (void *)objc_claimAutoreleasedReturnValue([v61 objectForKeyedSubscript:v11]);

          __int128 v89 = 0u;
          __int128 v90 = 0u;
          __int128 v87 = 0u;
          __int128 v88 = 0u;
          id v13 = v12;
          id v14 = [v13 countByEnumeratingWithState:&v87 objects:v104 count:16];
          if (v14)
          {
            id v15 = v14;
            uint64_t v70 = v6;
            uint64_t v16 = *(void *)v88;
            id v67 = v13;
            uint64_t v68 = v10;
            uint64_t v66 = *(void *)v88;
            do
            {
              __int16 v17 = 0LL;
              id v69 = v15;
              do
              {
                if (*(void *)v88 != v16) {
                  objc_enumerationMutation(v13);
                }
                uint64_t v20 = objc_opt_class(v4[303], v19);
                if ((objc_opt_isKindOfClass(v18, v20) & 1) != 0)
                {
                  uint64_t v72 = v18;
                  id v73 = v18;
                  uint64_t v21 = objc_claimAutoreleasedReturnValue([v73 signingIdentity]);
                  id v74 = (void *)v21;
                  if (v21)
                  {
                    uint64_t v22 = v21;
                    id v23 = (void *)objc_claimAutoreleasedReturnValue([v10 conversationKey]);
                    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v70 data]);
                    unsigned int v25 = (void *)objc_claimAutoreleasedReturnValue([v70 publicKeyData]);
                    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v70 signature]);
                    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v70 groupID]);
                    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v70 forwardingTicket]);
                    id v86 = v3;
                    __int16 v29 = (void *)objc_claimAutoreleasedReturnValue( +[IDSMPConversationGroup conversationGroupWithConversationKey:fromPublicData:publicKey:signature:groupID:parent:parentPublicKey:forwardingTicket:sponsor:error:]( &OBJC_CLASS___IDSMPConversationGroup,  "conversationGroupWithConversationKey:fromPublicData:publicKey:signature:groupID:pa rent:parentPublicKey:forwardingTicket:sponsor:error:",  v23,  v24,  v25,  v26,  v27,  0LL,  0LL,  v28,  v22,  &v86));
                    id v71 = v86;

                    if (v29)
                    {
                      __int128 v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog groupCrypto](&OBJC_CLASS___IDSFoundationLog, "groupCrypto"));
                      id v13 = v67;
                      __int16 v18 = v72;
                      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
                      {
                        id v31 = (void *)objc_claimAutoreleasedReturnValue([v29 groupID]);
                        *(_DWORD *)buf = 138543362;
                        __int128 v97 = v31;
                        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Fetched Group from GroupServer {groupID: %{public}@}",  buf,  0xCu);
                      }

                      uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v70 groupID]);
                      id v85 = v71;
                      id v33 = (void *)objc_claimAutoreleasedReturnValue([v29 conversationGroupWithUpdatedGroupID:v32 error:&v85]);
                      id v3 = v85;

                      id v4 = &IMInsertBoolsToXPCDictionary_ptr;
                      id v10 = v68;
                      if (v33)
                      {
                        [*(id *)(v65 + 48) addObject:v33];

                        goto LABEL_40;
                      }

                      uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ENLog groupContext](&OBJC_CLASS___ENLog, "groupContext"));
                      if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT))
                      {
                        uint64_t v35 = objc_claimAutoreleasedReturnValue([v70 groupID]);
                        *(_DWORD *)buf = 138544130;
                        __int128 v97 = v70;
                        __int16 v98 = 2114;
                        __int128 v99 = v29;
                        __int16 v100 = 2114;
                        uint64_t v101 = v35;
                        uint64_t v36 = (void *)v35;
                        __int16 v102 = 2114;
                        id v103 = v3;
                        _os_log_fault_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_FAULT,  "Failed to set groupID on created group {entry: %{public}@, group: %{public}@, groupID: %{publi c}@, error: %{public}@}",  buf,  0x2Au);
                      }
                    }

                    else
                    {
                      uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ENLog groupContext](&OBJC_CLASS___ENLog, "groupContext"));
                      __int16 v18 = v72;
                      if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT))
                      {
                        *(_DWORD *)buf = 138543874;
                        id v3 = v71;
                        __int128 v97 = v70;
                        __int16 v98 = 2114;
                        __int128 v99 = v74;
                        __int16 v100 = 2114;
                        uint64_t v101 = (uint64_t)v71;
                        _os_log_fault_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_FAULT,  "Failed to create group from server reponse entry {entry: %{public}@, publicSigningIdentity: %{ public}@, error: %{public}@}",  buf,  0x20u);
                      }

                      else
                      {
                        id v3 = v71;
                      }

                      id v4 = &IMInsertBoolsToXPCDictionary_ptr;
                      id v13 = v67;
                      id v10 = v68;
                    }

                    uint64_t v16 = v66;

                    id v15 = v69;
                  }

                  else
                  {
                    __int16 v29 = (void *)objc_claimAutoreleasedReturnValue(+[ENLog groupContext](&OBJC_CLASS___ENLog, "groupContext"));
                    if (os_log_type_enabled((os_log_t)v29, OS_LOG_TYPE_DEFAULT))
                    {
                      int v38 = *(void **)(v65 + 56);
                      __int128 v39 = *(void **)(v65 + 64);
                      *(_DWORD *)buf = 138543618;
                      __int128 v97 = v38;
                      __int16 v98 = 2114;
                      __int128 v99 = v39;
                      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v29,  OS_LOG_TYPE_DEFAULT,  "Failed to create fetched group, could not create publicSigningIdentity {deviceIdentity: %{public }@, error: %{public}@",  buf,  0x16u);
                    }
                  }

                  id v37 = (os_log_s *)v73;
                }

                else
                {
                  id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ENLog groupContext](&OBJC_CLASS___ENLog, "groupContext"));
                  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 138543362;
                    __int128 v97 = v18;
                    _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "Unexpected sponsot accountIdentity {sponsorPublicAccountIdentity: %{public}@}",  buf,  0xCu);
                  }
                }

                __int16 v17 = (char *)v17 + 1;
              }

              while (v15 != v17);
              id v40 = [v13 countByEnumeratingWithState:&v87 objects:v104 count:16];
              id v15 = v40;
            }

            while (v40);
          }

void sub_1000FFA14(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v9 = [[IDSConversationGroupCypher alloc] initWithConversationGroup:*(void *)(a1 + 32) deviceIdentity:*(void *)(a1 + 40) participants:v3];
  id v4 = objc_alloc(&OBJC_CLASS____ENGroupInfo);
  int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) accountIdentity]);
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) applicationData]);
  id v7 = [v4 initWithAccountIdentity:v5 paricipants:v3 sharedApplicationData:v6];

  id v8 = [[ENGroup alloc] initWithGroupInfo:v7 groupID:*(void *)(a1 + 56) cypher:v9];
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

id sub_1000FFC10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return [*(id *)(a1 + 32) _groupFromServerResponse:a2 context:*(void *)(a1 + 40) groupID:*(void *)(a1 + 48) error:a3 resultCode:a4 resultDictionary:a5 allEntries:a6 completion:*(void *)(a1 + 56)];
}

void sub_1001007A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 count])
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[ENParticipant participantsByAlias:](&OBJC_CLASS___ENParticipant, "participantsByAlias:", v3));
    int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sponsorAlias]);
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v5]);

    __int128 v57 = 0u;
    __int128 v58 = 0u;
    __int128 v55 = 0u;
    __int128 v56 = 0u;
    id obj = v6;
    id v7 = [obj countByEnumeratingWithState:&v55 objects:v67 count:16];
    if (v7)
    {
      id v8 = v7;
      __int128 v41 = v4;
      id v42 = v3;
      uint64_t v9 = *(void *)v56;
      id v10 = &IMInsertBoolsToXPCDictionary_ptr;
      uint64_t v43 = *(void *)v56;
      while (2)
      {
        id v11 = 0LL;
        id v44 = v8;
        do
        {
          if (*(void *)v56 != v9) {
            objc_enumerationMutation(obj);
          }
          id v12 = *(void **)(*((void *)&v55 + 1) + 8LL * (void)v11);
          id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 accountPublicKey]);
          uint64_t v15 = objc_opt_class(v10[303], v14);
          char isKindOfClass = objc_opt_isKindOfClass(v13, v15);

          if ((isKindOfClass & 1) != 0)
          {
            __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v12 accountPublicKey]);
            id v47 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) conversationKey]);
            id v46 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) data]);
            __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) publicKeyData]);
            uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) signature]);
            uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) groupID]);
            uint64_t v21 = (void *)a1;
            uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) forwardingTicket]);
            id v23 = (void *)objc_claimAutoreleasedReturnValue([v17 signingIdentity]);
            id v54 = 0LL;
            uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[IDSMPConversationGroup conversationGroupWithConversationKey:fromPublicData:publicKey:signature:groupID:parent:parentPublicKey:forwardingTicket:sponsor:error:]( &OBJC_CLASS___IDSMPConversationGroup,  "conversationGroupWithConversationKey:fromPublicData:publicKey:signature:groupID:parent:par entPublicKey:forwardingTicket:sponsor:error:",  v47,  v46,  v18,  v19,  v20,  0LL,  0LL,  v22,  v23,  &v54));
            id v25 = v54;

            if (v24)
            {

              id v4 = v41;
              id v3 = v42;
              a1 = (uint64_t)v21;
              goto LABEL_22;
            }

            uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ENLog groupContext](&OBJC_CLASS___ENLog, "groupContext"));
            a1 = (uint64_t)v21;
            if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
            {
              uint64_t v28 = v21[5];
              uint64_t v27 = (void *)v21[6];
              uint64_t v29 = v21[4];
              *(_DWORD *)buf = 138544130;
              id v60 = v27;
              __int16 v61 = 2114;
              uint64_t v62 = v28;
              __int16 v63 = 2114;
              uint64_t v64 = v29;
              __int16 v65 = 2114;
              uint64_t v66 = v17;
              _os_log_fault_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_FAULT,  "Failed group->groupPublicData -- Failed to create group {error: %{public}@, entry: %{public}@, pair: %{p ublic}@, sponsor: %{public}@}",  buf,  0x2Au);
            }

            uint64_t v9 = v43;
            id v8 = v44;
            id v10 = &IMInsertBoolsToXPCDictionary_ptr;
          }

          else
          {
            __int16 v17 = (void *)objc_claimAutoreleasedReturnValue(+[ENLog groupContext](&OBJC_CLASS___ENLog, "groupContext"));
            if (os_log_type_enabled((os_log_t)v17, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 138543362;
              id v60 = v12;
              _os_log_fault_impl( (void *)&_mh_execute_header,  (os_log_t)v17,  OS_LOG_TYPE_FAULT,  "Failed group->groupPublicData -- Unexpected sponsor accountKeyClass {sponsor: %{public}@}",  buf,  0xCu);
            }
          }

          id v11 = (char *)v11 + 1;
        }

        while (v8 != v11);
        id v8 = [obj countByEnumeratingWithState:&v55 objects:v67 count:16];
        if (v8) {
          continue;
        }
        break;
      }

      uint64_t v24 = 0LL;
      id v4 = v41;
      id v3 = v42;
    }

    else
    {
      uint64_t v24 = 0LL;
    }

void sub_100100C88(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [[IDSConversationGroupCypher alloc] initWithConversationGroup:*(void *)(a1 + 32) deviceIdentity:*(void *)(a1 + 40) participants:v3];
  id v5 = objc_alloc(&OBJC_CLASS____ENGroupInfo);
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) accountIdentity]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) applicationData]);
  id v8 = [v5 initWithAccountIdentity:v6 paricipants:v3 sharedApplicationData:v7];

  id v9 = objc_alloc(&OBJC_CLASS___ENGroup);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) groupID]);
  id v11 = [v9 initWithGroupInfo:v8 groupID:v10 cypher:v4];

  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ENLog groupContext](&OBJC_CLASS___ENLog, "groupContext"));
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    int v14 = 138477827;
    uint64_t v15 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "group->groupPublicData -- Success {group: %{private}@}",  (uint8_t *)&v14,  0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

uint64_t sub_100100F60(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100101770(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

  ;
}

void sub_100102A74(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100102B68;
  block[3] = &unk_1008FA4C0;
  id v12 = *(id *)(a1 + 40);
  id v13 = v5;
  uint64_t v8 = *(void *)(a1 + 32);
  id v14 = v6;
  uint64_t v15 = v8;
  char v18 = *(_BYTE *)(a1 + 64);
  uint64_t v17 = *(void *)(a1 + 56);
  id v16 = *(id *)(a1 + 48);
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

void sub_100102B68(uint64_t a1)
{
  unint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138412802;
    id v33 = v3;
    __int16 v34 = 2112;
    uint64_t v35 = v4;
    __int16 v36 = 2112;
    uint64_t v37 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Completed CloudKit zone fetch {zoneID: %@, recordZonesByID: %@, fetchError: %@}",  buf,  0x20u);
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:*(void *)(a1 + 32)]);
  [*(id *)(a1 + 56) setCachedRecordZone:v6];

  uint64_t v8 = (id *)(a1 + 48);
  id v7 = *(void **)(a1 + 48);
  if (!v7) {
    goto LABEL_20;
  }
  if ([v7 code] == (id)2)
  {
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "CloudKit zone not found -- creating it",  buf,  2u);
    }

    if (qword_1009BEA88 != -1) {
      dispatch_once(&qword_1009BEA88, &stru_1008FAA38);
    }
    id v10 = (void *)qword_1009BEA80;
    if (!qword_1009BEA80)
    {
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
      if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT)) {
        sub_10069BC6C();
      }

      id v10 = (void *)qword_1009BEA80;
    }

    id v12 = [objc_alloc((Class)v10) initWithZoneID:*(void *)(a1 + 32)];
    id v13 = objc_alloc((Class)sub_100102F74());
    id v31 = v12;
    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v31, 1LL));
    id v15 = [v13 initWithRecordZonesToSave:v14 recordZoneIDsToDelete:0];

    id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) container]);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v15 configuration]);
    [v17 setContainer:v16];

    if (*(_BYTE *)(a1 + 80))
    {
      char v18 = (void *)objc_claimAutoreleasedReturnValue([v15 configuration]);
      [v18 setDiscretionaryNetworkBehavior:0];
    }

    double v19 = *(double *)(a1 + 72);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v15 configuration]);
    [v20 setTimeoutIntervalForRequest:v19];

    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472LL;
    v29[2] = sub_100102FF4;
    v29[3] = &unk_1008FA498;
    uint64_t v21 = *(void **)(a1 + 64);
    v29[4] = *(void *)(a1 + 56);
    id v30 = v21;
    [v15 setModifyRecordZonesCompletionBlock:v29];
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v33 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Starting CloudKit operation to create KT zone {operation: %@}",  buf,  0xCu);
    }

    id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) database]);
    [v23 addOperation:v15];

    return;
  }

  if (*v8 && [*v8 code] != (id)2)
  {
    uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      sub_10069BCE8();
    }

    uint64_t v28 = *(void *)(a1 + 64);
    if (v28)
    {
      uint64_t v26 = *(void (**)(void))(v28 + 16);
      goto LABEL_24;
    }
  }

  else
  {
LABEL_20:
    uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "CloudKit zone exists -- no need to create it",  buf,  2u);
    }

    uint64_t v25 = *(void *)(a1 + 64);
    if (v25)
    {
      uint64_t v26 = *(void (**)(void))(v25 + 16);
LABEL_24:
      v26();
    }
  }

id sub_100102F74()
{
  if (qword_1009BEAA8 != -1) {
    dispatch_once(&qword_1009BEAA8, &stru_1008FAA78);
  }
  uint64_t v0 = (void *)qword_1009BEAA0;
  if (!qword_1009BEAA0)
  {
    id v1 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v1, OS_LOG_TYPE_FAULT)) {
      sub_10069BD48();
    }

    uint64_t v0 = (void *)qword_1009BEAA0;
  }

  return v0;
}

void sub_100102FF4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001030EC;
  block[3] = &unk_1008F9578;
  id v17 = v7;
  id v18 = v8;
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = *(void **)(a1 + 40);
  id v19 = v9;
  uint64_t v20 = v11;
  id v21 = v12;
  id v13 = v9;
  id v14 = v8;
  id v15 = v7;
  dispatch_async(v10, block);
}

uint64_t sub_1001030EC(uint64_t a1)
{
  unint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    int v12 = 138412802;
    uint64_t v13 = v3;
    __int16 v14 = 2112;
    uint64_t v15 = v4;
    __int16 v16 = 2112;
    uint64_t v17 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Completed CloudKit zone modification (save) operation {savedRecordZones: %@, deletedRecordZoneIDs: %@, modifyError: %@}",  (uint8_t *)&v12,  0x20u);
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) firstObject]);
  [*(id *)(a1 + 56) setCachedRecordZone:v6];

  uint64_t v7 = *(void *)(a1 + 48);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  id v9 = v8;
  if (v7)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10069BDC4();
    }

    uint64_t result = *(void *)(a1 + 64);
    if (result)
    {
      uint64_t v11 = *(uint64_t (**)(void))(result + 16);
      return v11();
    }
  }

  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v12) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Successfully created CloudKit zone",  (uint8_t *)&v12,  2u);
    }

    uint64_t result = *(void *)(a1 + 64);
    if (result)
    {
      uint64_t v11 = *(uint64_t (**)(void))(result + 16);
      return v11();
    }
  }

  return result;
}

id sub_1001032CC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setCachedManateeAvailability:");
}

void sub_100103550( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

uint64_t sub_100103584(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100103594(uint64_t a1)
{
}

void sub_10010359C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100103640;
  v7[3] = &unk_1008FA560;
  uint64_t v5 = *(void *)(a1 + 32);
  __int128 v9 = *(_OWORD *)(a1 + 40);
  void v7[4] = v5;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v4, v7);
}

void sub_100103640(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _OWORD v4[2] = sub_1001036C8;
  v4[3] = &unk_1008FA538;
  uint64_t v6 = *(void *)(a1 + 56);
  void v4[4] = v1;
  __int128 v3 = *(_OWORD *)(a1 + 40);
  id v2 = (id)v3;
  __int128 v5 = v3;
  objc_msgSend(v1, "_no_timeout_verifyEncryptionPrerequisitesWithCompletion:", v4);
}

void sub_1001036C8(uint64_t a1, char a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = a2;
  id v8 = v6;
  if (v6) {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _clientErrorWithCode:-1000 debugDescription:@"Unable to fetch CloudKit account info" underlyingError:v6]);
  }
  else {
    uint64_t v7 = 0LL;
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), v7);
  if (v8) {

  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100103764(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v5 = @"NO";
    if (a2) {
      __int128 v5 = @"YES";
    }
    *(_DWORD *)buf = 138412290;
    __int16 v14 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Account device-to-device encryption eligibility task final block called {timedOut: %@}",  buf,  0xCu);
  }

  id v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001038B0;
  block[3] = &unk_1008FA5B0;
  char v12 = a2;
  void block[4] = *(void *)(a1 + 32);
  __int128 v8 = *(_OWORD *)(a1 + 40);
  id v7 = (id)v8;
  __int128 v10 = v8;
  uint64_t v11 = *(void *)(a1 + 56);
  dispatch_async(v6, block);
}

uint64_t sub_1001038B0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _clientErrorWithCode:-4000 debugDescription:@"Timed out fetching account key transparency eligibility." underlyingError:0]);
    uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v2;
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL),  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL));
  }
  return result;
}

void sub_100103A30(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100103AFC;
  block[3] = &unk_1008F7BD8;
  id v11 = v5;
  id v12 = v6;
  id v13 = *(id *)(a1 + 40);
  id v8 = v6;
  id v9 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_100103AFC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) deviceToDeviceEncryptionAvailability];
  unsigned int v3 = [*(id *)(a1 + 32) supportsDeviceToDeviceEncryption];
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = @"NO";
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    if (v3) {
      id v5 = @"YES";
    }
    int v9 = 138413058;
    __int128 v10 = v5;
    __int16 v11 = 2048;
    id v12 = v2;
    __int16 v13 = 2112;
    uint64_t v14 = v6;
    __int16 v15 = 2112;
    uint64_t v16 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Completed CloudKit container account info fetch {supportsDeviceToDeviceEncryption: %@, deviceToDeviceEncryptionSta tus: %ld, accountInfo: %@, accountInfoError: %@}",  (uint8_t *)&v9,  0x2Au);
  }

  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100103F24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_100103F4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100104028;
  v9[3] = &unk_1008FA670;
  id v5 = *(void **)(a1 + 40);
  void v9[4] = *(void *)(a1 + 32);
  id v10 = v5;
  id v11 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  id v13 = v3;
  uint64_t v14 = v7;
  id v12 = v6;
  id v8 = v3;
  dispatch_async(v4, v9);
}

void sub_100104028(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1001040BC;
  v7[3] = &unk_1008FA648;
  __int128 v6 = *(_OWORD *)(a1 + 64);
  id v5 = (id)v6;
  __int128 v8 = v6;
  objc_msgSend( v1,  "_no_timeout_upsertKeyTransparencyDeviceRecord:recordsToModify:recordsToDelete:completion:",  v2,  v3,  v4,  v7);
}