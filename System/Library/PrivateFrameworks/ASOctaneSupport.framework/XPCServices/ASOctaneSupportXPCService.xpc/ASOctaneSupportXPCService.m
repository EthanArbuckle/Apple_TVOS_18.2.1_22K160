LABEL_9:
  v12 = v6;
  return v12;
}

      v17 = self->_statement;
      v9 = (const char *)-[__CFString UTF8String](theString, "UTF8String");
      statement = v17;
      v11 = a4;
      v12 = -1LL;
      goto LABEL_10;
    }

    CharactersPtr = CFStringGetCharactersPtr(theString);
    if (!CharactersPtr) {
      goto LABEL_9;
    }
    v14 = CharactersPtr;
    v15 = self->_statement;
    Length = CFStringGetLength(theString);
    sqlite3_bind_text16(v15, a4, v14, 2 * Length, 0LL);
  }

  else
  {
    +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInternalInconsistencyException,  @"Statement already finalized");
  }

  return v9;
}

  swift_unknownObjectRelease(a1);
  return v9;
}

      __break(1u);
      goto LABEL_10;
    }
  }

  sub_100019398();
_$s25ASOctaneSupportXPCService10ByteBufferV8getBytes2at6lengthSays5UInt8VGSgSi_SitF:
  result.is_nil = v4;
  result.value._rawValue = v3;
  return result;
}

  __break(1u);
}

  __break(1u);
}

    sub_1000A46B4(v96 + 512, (uint64_t)v111);
    sub_1000A46B4((uint64_t)v111, (uint64_t)v115);
    if (v115[1])
    {
      sub_1000A4C94();
      v41 = sub_1000A2088(v36, v37, v38, v39, v40);
      if (v35)
      {
        sub_1000A4C78( (uint64_t)v41,  v42,  v43,  v44,  v45,  v46,  v47,  v48,  v70,  v71,  v73,  v75,  v77,  v79,  v81,  a2,  v110,  v109,  v108,  v107,  v106,  v105,  v104,  v103,  v102,  v101,  (uint64_t)v93,  v94,  a3,  v96,  v97);
        swift_release();
        swift_release();
        goto LABEL_12;
      }

      v76 = v20;
      v50 = v19[17];
      if (!v50)
      {
        v116 = (uint64_t *)v41;
        goto LABEL_23;
      }

      if (v41)
      {
        v116 = (uint64_t *)v41;
        if (*((_BYTE *)v41 + 104) != 1) {
          goto LABEL_23;
        }
      }

      else
      {
        v116 = 0LL;
      }
    }

    else
    {
      v76 = v20;
      v116 = 0LL;
      v49 = 0LL;
      v50 = v19[17];
      if (!v50) {
        goto LABEL_24;
      }
    }

    sub_100019F58(v24 + 11, v24[14]);
    sub_10002A674();
    if ((sub_100087F40() & 1) != 0)
    {
      sub_10002A5A4();
LABEL_23:
      v49 = 0LL;
      goto LABEL_24;
    }

    v49 = v50;
LABEL_24:
    v74 = v49;
    sub_100023BAC((uint64_t)(v24 + 11), (uint64_t)v100);
    v54 = sub_100019F58(v100, v100[3]);
    v55 = sub_1000175B0(&qword_1002A9098);
    inited = swift_initStackObject(v55, v99);
    *(_OWORD *)(inited + 16) = xmmword_1001F3C00;
    v57 = v19[25];
    *(void *)(inited + 32) = v19[24];
    *(void *)(inited + 40) = v57;
    v58 = *v54;
    swift_retain();
    sub_100077D1C();
    sub_10001ED74();
    sub_1000D962C(inited, v58, v22, v16);
    v60 = v59;
    swift_setDeallocating(inited);
    sub_1001B7630();
    if ((unint64_t)v60 >> 62)
    {
      if (v60 < 0) {
        v68 = v60;
      }
      else {
        v68 = v60 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      v61 = _CocoaArrayWrapper.endIndex.getter(v68);
      swift_bridgeObjectRelease();
    }

    else
    {
      v61 = *(void *)((v60 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    v34 = a2;
    if (v61)
    {
      sub_100119E64(0LL, (v60 & 0xC000000000000001LL) == 0, v60);
      if ((v60 & 0xC000000000000001LL) != 0)
      {
        v69 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v60);
        swift_unknownObjectRelease(v69);
      }
    }

    v78 = v22;
    swift_bridgeObjectRelease();
    swift_release();
    sub_100019F7C(v100);
    v33 = v116;
    v72 = v61 != 0;
    goto LABEL_30;
  }

  sub_1000A4C78( v25,  v26,  v27,  v28,  v29,  v30,  v31,  v32,  v70,  v71,  v73,  v75,  v77,  a6,  v80,  a2,  v110,  v109,  v108,  v107,  v106,  v105,  v104,  v103,  v102,  v101,  (uint64_t)v93,  v94,  a3,  v96,  v97);
LABEL_12:
  swift_release();
  sub_10001B4DC(&v101);
  swift_release();
LABEL_31:
  sub_10001DAB8();
}

    v22 = sub_100043584();
    v23 = sub_1000252D0((uint64_t)&type metadata for SocketAddressError, v22);
    v24[1] = 0LL;
    v24[2] = 0LL;
    *v24 = 0LL;
    sub_1000CB530(v23, (uint64_t)v24);
    if (v33) {
      freeaddrinfo(v33);
    }
    return a3;
  }

  v25 = v33->ai_addr;
  if (v25)
  {
    v26 = *(_DWORD *)&v25->sa_len;
    v27 = *(_DWORD *)&v25->sa_data[2];
    v28 = *(void *)&v25->sa_data[6];
    v29 = *(void *)&v25[1].sa_len;
    v30 = *(_DWORD *)&v25[1].sa_data[6];
    v31 = sub_1000175B0(&qword_1002AAFA0);
    v32 = sub_100019310(v31, 64LL);
    *(_DWORD *)(v32 + 16) = v26;
    *(_DWORD *)(v32 + 20) = v27;
    *(void *)(v32 + 24) = v28;
    *(void *)(v32 + 32) = v29;
    *(_DWORD *)(v32 + 40) = v30;
    a3 = v32 | 0x4000000000000000LL;
    *(void *)(v32 + 48) = a1;
    *(void *)(v32 + 56) = a2;
    goto LABEL_13;
  }

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  if (v12 != v11)
  {
    sub_1000348B4(v59, v60, v61, v62, v63, v64, v65);
LABEL_33:
    *v2 = v56;
    return;
  }

  v51 = v2;
  if (v67 == v58) {
    goto LABEL_14;
  }
  if ((v67 & 0x8000000000000000LL) == 0 && v67 < v58)
  {
    v16 = *(void *)(v56 + 16);
    v18 = v65;
    v17 = v66;
    v19 = v63;
    v20 = v64;
    v21 = v61;
    v22 = v62;
    v23 = v59;
    v24 = v60;
    v25 = ++v67;
    v50 = v58;
    sub_100034DEC(v59, v60, v61, v62, v63, v64, v65);
    v26 = v50;
    v27 = v56;
    if (v23 != 1)
    {
      v28 = v59;
      v29 = v60;
      v30 = v61;
      v31 = v62;
      v32 = v63;
      v33 = v64;
      v34 = v65;
      v35 = v66;
      v36 = v25;
      v49 = v60;
      while (2)
      {
        v57 = v36;
        if (v16 + 1 > *(void *)(v27 + 24) >> 1)
        {
          v53 = v30;
          v55 = v28;
          v47 = v32;
          v48 = v31;
          v45 = v34;
          v46 = v33;
          v44 = v35;
          sub_100032298();
          v28 = v55;
          v36 = v57;
          v35 = v44;
          v34 = v45;
          v33 = v46;
          v32 = v47;
          v31 = v48;
          v29 = v49;
          v30 = v53;
          v26 = v50;
        }

        v27 = *v51;
        v37 = *(void *)(*v51 + 24) >> 1;
        v38 = *v51 + 48;
        v39 = v36;
LABEL_20:
        v40 = (uint64_t *)(v38 + (v16 << 6));
        while (v23 != 1 && v16 < v37)
        {
          *(v40 - 2) = v23;
          *(v40 - 1) = v24;
          ++v16;
          *v40 = v21;
          v40[1] = v22;
          v40[2] = v19;
          v40[3] = v20;
          v40[4] = v18;
          v40[5] = v17;
          v40 += 8;
          v23 = 1LL;
          v17 = 0LL;
          v18 = 0LL;
          v20 = 0LL;
          v19 = 0LL;
          v22 = 0LL;
          v21 = 0LL;
          v24 = 0LL;
          if (v39 != v26)
          {
            if ((v36 & 0x8000000000000000LL) == 0 && v39 < v26)
            {
              ++v39;
              v23 = v28;
              v21 = v30;
              v22 = v31;
              v19 = v32;
              v20 = v33;
              v18 = v34;
              v42 = v35;
              v43 = v27;
              v52 = v38;
              v54 = v37;
              sub_100034DEC(v28, v29, v30, v31, v32, v33, v34);
              v38 = v52;
              v37 = v54;
              v36 = v57;
              v35 = v42;
              v34 = v18;
              v33 = v20;
              v32 = v19;
              v31 = v22;
              v30 = v21;
              v29 = v49;
              v26 = v50;
              v28 = v23;
              v27 = v43;
              v17 = v42;
              v24 = v49;
              goto LABEL_20;
            }

            __break(1u);
            goto LABEL_35;
          }
        }

        *(void *)(v27 + 16) = v16;
        v36 = v39;
        if (v23 != 1) {
          continue;
        }
        break;
      }

      v56 = v27;
      goto LABEL_32;
    }

  if (v11 != v10)
  {
    v22 = v41;
    v26 = v42;
    v24 = v43;
    v25 = v44;
    goto LABEL_17;
  }

  v15 = v40;
  if (v45 == v40) {
    goto LABEL_14;
  }
  if ((v45 & 0x8000000000000000LL) == 0 && v45 < v40)
  {
    v16 = *(void *)(v4 + 16);
    v18 = v43;
    v17 = v44;
    v19 = v41;
    v20 = v42;
    v21 = ++v45;
    sub_10003499C(v41, v42, v43, v44);
    if (v17 != 2)
    {
      v22 = v41;
      v23 = v42;
      v24 = v43;
      v25 = v44;
      v37 = v2;
      while (2)
      {
        if (v16 + 1 > *(void *)(v4 + 24) >> 1)
        {
          v39 = v22;
          v35 = v23;
          v36 = v24;
          v34 = v25;
          sub_10003240C();
          v25 = v34;
          v23 = v35;
          v24 = v36;
          v22 = v39;
        }

        v27 = *(void *)(*v2 + 24) >> 1;
        v38 = *v2;
        v28 = *v2 + 56;
        v29 = v21;
LABEL_22:
        v30 = (uint64_t *)(v28 + 32 * v16);
        while (v17 != 2 && v16 < v27)
        {
          *(v30 - 3) = v19;
          *(v30 - 2) = v20;
          ++v16;
          *(v30 - 1) = v18;
          *v30 = v17;
          v30 += 4;
          v17 = 2LL;
          v18 = 0LL;
          v20 = 0LL;
          v19 = 0LL;
          if (v29 != v15)
          {
            if ((v21 & 0x8000000000000000LL) == 0 && v29 < v15)
            {
              ++v29;
              v19 = v22;
              v18 = v24;
              v32 = v25;
              v33 = v23;
              sub_10003499C(v22, v23, v24, v25);
              v25 = v32;
              v24 = v18;
              v23 = v33;
              v22 = v19;
              v17 = v32;
              v20 = v23;
              goto LABEL_22;
            }

            __break(1u);
            goto LABEL_35;
          }
        }

        v4 = v38;
        *(void *)(v38 + 16) = v16;
        v21 = v29;
        v2 = v37;
        if (v17 != 2) {
          continue;
        }
        goto LABEL_15;
      }
    }

  swift_bridgeObjectRelease(v10);
  v14 = swift_allocObject(&unk_100285E80, 24LL, 7LL);
  *(void *)(v14 + 16) = 0LL;
  Lock.lock()();
  if (*(_BYTE *)(a1 + 56))
  {
LABEL_25:
    __break(1u);
    return;
  }

  v15 = *(void *)(a1 + 48);
  swift_beginAccess(a2 + 16, v74, 0LL, 0LL);
  v16 = *(_BYTE *)(a2 + 24) == 1;
  v17 = v58;
  v57 = v15;
  if (v16)
  {
    v18 = *(void *)(a2 + 16);
    *(void *)(v14 + 16) = v18;
    sub_10011A010(v15, 0);
    sub_1000419E4(v18, 1);
  }

  else
  {
    *(void *)(v14 + 16) = 0LL;
    swift_bridgeObjectRetain(v15);
    v18 = 0LL;
  }

  swift_errorRelease(0LL);
  v19 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v18;
  v20 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = 1;
  swift_errorRetain(v18);
  sub_100119F44(v19, v20);
  Lock.unlock()();
  v21 = (void *)swift_allocObject(&unk_100285EA8, 40LL, 7LL);
  v22 = v64;
  v21[2] = v62;
  v21[3] = v22;
  v21[4] = v14;
  v72 = sub_10011A3C0;
  v73 = v21;
  aBlock = _NSConcreteStackBlock;
  v69 = 1107296256LL;
  v70 = sub_1000169C8;
  v71 = &unk_100285EC0;
  v23 = _Block_copy(&aBlock);
  swift_retain(v22);
  v24 = swift_retain(v14);
  static DispatchQoS.unspecified.getter(v24);
  v67 = _swiftEmptyArrayStorage;
  v25 = sub_1000D924C( (unint64_t *)&qword_1002B6F20,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (const char *)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = sub_1000175B0(&qword_1002A9118);
  v27 = sub_100043668((unint64_t *)&qword_1002B6F30, &qword_1002A9118);
  v28 = v59;
  v29 = v26;
  v30 = v26;
  v64 = v27;
  v31 = v25;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v67, v30, v27, v17, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v28, v23);
  _Block_release(v23);
  v32 = (void (*)(char *, uint64_t))*((void *)v63 + 1);
  v33 = v9;
  v32(v28, v17);
  v34 = *(void (**)(char *, uint64_t))(v61 + 8);
  v34(v9, v66);
  swift_release(v73);
  v35 = *(void *)(v57 + 16);
  if (v35)
  {
    v36 = swift_bridgeObjectRetain(v57);
    v65 = v14;
    v37 = (uint64_t *)(v36 + 48);
    v60 = v29;
    v61 = v31;
    v38 = v58;
    v39 = v59;
    v62 = v32;
    v63 = v34;
    v40 = v65;
    do
    {
      v42 = (void *)*(v37 - 2);
      v41 = *(v37 - 1);
      v43 = *v37;
      v37 += 3;
      v44 = swift_allocObject(&unk_100285EF8, 32LL, 7LL);
      *(void *)(v44 + 16) = v41;
      *(void *)(v44 + 24) = v43;
      v45 = (void *)swift_allocObject(&unk_100285F20, 48LL, 7LL);
      v45[2] = v42;
      v45[3] = sub_10011A3EC;
      v45[4] = v44;
      v45[5] = v40;
      v72 = sub_10011A438;
      v73 = v45;
      aBlock = _NSConcreteStackBlock;
      v69 = 1107296256LL;
      v70 = sub_1000169C8;
      v71 = &unk_100285F38;
      v46 = _Block_copy(&aBlock);
      v47 = v42;
      swift_retain(v40);
      v48 = v47;
      swift_retain(v43);
      v49 = swift_retain(v44);
      static DispatchQoS.unspecified.getter(v49);
      v67 = _swiftEmptyArrayStorage;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v67, v60, v64, v38, v61);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v33, v39, v46);
      v50 = v46;
      v51 = v62;
      v52 = v63;
      _Block_release(v50);
      swift_release(v44);

      v51(v39, v38);
      v52(v33, v66);
      swift_release(v73);
      --v35;
    }

    while (v35);
    v53 = v57;
    sub_100119F44(v57, 0);
    sub_100119F44(v53, 0);
    v54 = v65;
  }

  else
  {
    sub_100119F44(v57, 0);
    v54 = v14;
  }

  swift_release(v54);
}

  v18 = v14 - v7;
  if (__OFSUB__(v14, v7))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  v19 = a1[2];
  if (v19)
  {
    if (v18 >= v3)
    {
      sub_10018E56C(a1 + 4, v3, v8);
      if (!v3) {
        goto LABEL_16;
      }
      result = (void *)(v7 + v3);
      if (!__OFADD__(v7, v3))
      {
        sub_100125130(result);
        goto LABEL_16;
      }

  __break(1u);
}

  __break(1u);
  return result;
}

  sub_1000193B8();
}

void sub_100002ED8(uint64_t a1, void *a2, uint64_t a3)
{
  id v8 = a2;
  v5 = *(void **)(a1 + 32);
  if (!v5 || [v5 containsObject:v8])
  {
    id v6 = sub_100002F48(*(void **)(a1 + 48), a3);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    [*(id *)(a1 + 40) setObject:v7 forKeyedSubscript:v8];
  }
}

id sub_100002F48(void *a1, uint64_t a2)
{
  id v3 = a1;
  switch([v3 _declaredTypeForColumnIndex:a2])
  {
    case 0u:
      v4 = 0LL;
      switch([v3 _columnTypeForColumnIndex:a2])
      {
        case 1u:
          uint64_t v5 = objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v3 int64ForColumnIndex:a2]));
          goto LABEL_10;
        case 2u:
          [v3 doubleForColumnIndex:a2];
          uint64_t v5 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
          goto LABEL_10;
        case 3u:
          goto LABEL_4;
        case 5u:
          goto LABEL_11;
        default:
          uint64_t v5 = objc_claimAutoreleasedReturnValue([v3 dataForColumnIndex:a2]);
          goto LABEL_10;
      }

      break;
    case 1u:
      uint64_t v5 = objc_claimAutoreleasedReturnValue([v3 dateForColumnIndex:a2]);
      goto LABEL_10;
    case 2u:
      uint64_t v5 = objc_claimAutoreleasedReturnValue([v3 JSONObjectForColumnIndex:a2]);
      goto LABEL_10;
    case 3u:
      uint64_t v5 = objc_claimAutoreleasedReturnValue([v3 UUIDForColumnIndex:a2]);
      goto LABEL_10;
    case 4u:
      uint64_t v5 = objc_claimAutoreleasedReturnValue([v3 URLForColumnIndex:a2]);
      goto LABEL_10;
    case 5u:
LABEL_4:
      uint64_t v5 = objc_claimAutoreleasedReturnValue([v3 stringForColumnIndex:a2]);
LABEL_10:
      v4 = (void *)v5;
      break;
    default:
      v4 = 0LL;
      break;
  }

LABEL_11:
  return v4;
}
}

      __break(1u);
      goto LABEL_12;
    }

    __break(1u);
    goto LABEL_12;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  v20 = v24;
  swift_bridgeObjectRelease();
  return v20;
}

  sub_100013858();
}

  sub_100013858();
}

    memcpy(a1, __dst, 0x50uLL);
    return;
  }

    memcpy(a1, __dst, 0x58uLL);
    return;
  }

    memcpy(a1, __dst, 0x50uLL);
    return;
  }

  a2 = (char *)(v15 & 0xC000000000000001LL);
  v29 = 4LL;
  while (1)
  {
    if (a2)
    {
      v21 = specialized _ArrayBuffer._getElementSlowPath(_:)(v29 - 4, v15);
    }

    else
    {
      v21 = *(void *)(v15 + 8 * v29);
      swift_retain();
    }

    v42 = v29 - 3;
    if (__OFADD__(v29 - 4, 1LL))
    {
      __break(1u);
      goto LABEL_61;
    }

    inited = *(void *)(v21 + 80);
    v20 = *(void *)(v21 + 88);
    sub_1000931C8();
    v43 = sub_1000B3DDC();
    if (inited == v43 && v20 == v44)
    {
      sub_10012A2D8();
      sub_10001A420();
      sub_100024E84();
      goto LABEL_41;
    }

    inited = _stringCompareWithSmolCheck(_:_:expecting:)(inited, v20, v43, v44, 0LL);
    sub_100024E84();
    sub_10001EDA0();
    if ((inited & 1) != 0) {
      break;
    }
    sub_10002A7BC();
    ++v29;
    if (v42 == v4) {
      goto LABEL_22;
    }
  }

  sub_10012A2D8();
LABEL_41:
  sub_100024E84();
  sub_10001A420();
  v73 = (uint64_t)v170;
  LODWORD(a1) = (_DWORD)v170;
  v74 = sub_100128C4C();
  a2 = v160;
  v76 = v159;
  v77 = v165;
  if (v74)
  {
    v153 = v75;
    v154 = v74;
    v78 = object;
    sub_100019F58(object, *(void *)(v73 + 72));
    v79 = v34;
    sub_10007608C();
    v81 = v80;
    sub_100019F58(v78, *(void *)(v73 + 72));
    sub_100076700();
    v82 = v77[7];
    swift_retain();
    swift_retain();
    sub_10001DBCC();
    sub_10003C434(&v174);
    sub_100128AA0(v82, v73, v81, &v174);
    *(void *)&v162 = v83;
    sub_10001EDA0();
    v84 = *(void *)(v21 + 16);
    v85 = *(void *)(v21 + 24);
    swift_bridgeObjectRetain();
    v170 = (void *)v81;
    object = (void *)sub_100043978(v84, v85, (uint64_t)&v174, v81);
    v155 = v86;
    sub_10001B4DC(&v174);
    swift_bridgeObjectRelease();
    v87 = *(void *)(v21 + 176);
    LOBYTE(v84) = *(_BYTE *)(v21 + 184);
    v88 = [objc_allocWithZone(NSDateComponentsFormatter) init];
    [v88 setUnitsStyle:3];
    [v88 setAllowedUnits:4124];
    v89 = v168;
    sub_1001BE220(v87, v84);
    isa = DateComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v169 + 8))(v89, v166);
    v91 = [v88 stringFromDateComponents:isa];

    if (v91)
    {
      v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
      v94 = v93;
    }

    else
    {
      v92 = 0LL;
      v94 = (void *)0xE000000000000000LL;
    }

    if (v87 == 1)
    {
      *(void *)&v176 = v92;
      *((void *)&v176 + 1) = v94;
      v172[0] = 32LL;
      v172[1] = 0xE100000000000000LL;
      v96 = sub_10001B4A0();
      v97 = StringProtocol.components<A>(separatedBy:)( v172,  &type metadata for String,  &type metadata for String,  v96,  v96);
      swift_bridgeObjectRelease();
      v98 = sub_10005B1B8(1LL, v97);
      *(void *)&v176 = v98;
      *((void *)&v176 + 1) = v99;
      v177 = v100;
      v178 = v101;
      v102 = sub_1000175B0(&qword_1002ABEC8);
      v103 = sub_100058910();
      v92 = BidirectionalCollection<>.joined(separator:)(32LL, 0xE100000000000000LL, v102, v103);
      v94 = v104;
      swift_unknownObjectRelease(v98);
    }

    v105 = v158;
    type metadata accessor for AppIconRoute();
    v169 = sub_10005A048(v164, v79);
    v168 = v106;
    sub_10001A420();
    v107 = *(void *)(v76 + 24);
    if (v107)
    {
      v166 = *(void *)(v76 + 16);
      v164 = v107;
    }

    else
    {
      v164 = 0xE800000000000000LL;
      v166 = 0x656D614E20707041LL;
    }

    v108 = v77[6];
    v158 = v77[5];
    v109 = v77[3];
    v152 = v77[2];
    sub_100077D1C();
    sub_1000931C8();
    sub_10001DBCC();
    v151 = sub_100129DFC();
    v150 = v110;
    *(void *)&v176 = object;
    *((void *)&v176 + 1) = v155;
    v111._countAndFlagsBits = 47LL;
    v111._object = (void *)0xE100000000000000LL;
    String.append(_:)(v111);
    v112._countAndFlagsBits = v92;
    v112._object = v94;
    String.append(_:)(v112);
    swift_bridgeObjectRelease();
    v113 = String.lowercased()();
    countAndFlagsBits = v113._countAndFlagsBits;
    object = v113._object;
    sub_10001EDA0();
    v115 = sub_1000B85C8(4u);
    if ((v116 & 1) != 0)
    {
      v118 = 1LL;
      v119 = v157;
      v117 = (uint64_t)v163;
    }

    else
    {
      v117 = (uint64_t)v163;
      Date.init(timeIntervalSinceReferenceDate:)(*(double *)&v115);
      v118 = 0LL;
      v119 = v157;
    }

    sub_10001762C(v117, v118, 1LL, v105);
    v120 = v117;
    v121 = (uint64_t)v167;
    sub_1000A33A4(v120, (uint64_t)v167);
    v122 = sub_10001D158(v121, 1LL, v105);
    a1 = (uint64_t *)v171;
    if (v122 == 1)
    {
      v123 = 0LL;
      v124 = 0LL;
    }

    else
    {
      v157 = v113._countAndFlagsBits;
      v125 = v161;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v119 + 32))(v161, v121, v105);
      v126 = v105;
      if (qword_1002A8CA8 != -1) {
        swift_once(&qword_1002A8CA8, sub_100043918);
      }
      v127 = (void *)qword_1002AAFE8;
      v128 = Date._bridgeToObjectiveC()().super.isa;
      v129 = v125;
      v130 = [v127 stringFromDate:v128];

      v123 = static String._unconditionallyBridgeFromObjectiveC(_:)(v130);
      v124 = v131;

      (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v129, v126);
      a1 = (uint64_t *)v171;
      countAndFlagsBits = v157;
    }

    sub_100049980((uint64_t)v163);
    sub_1000B52F0();
    v133 = v132;
    v178 = &type metadata for EditSubscriptionUIRoute.ViewProperties;
    v134 = (void *)sub_100019310((uint64_t)&unk_100287198, 144LL);
    *(void *)&v176 = v134;
    v135 = v168;
    v134[2] = v169;
    v134[3] = v135;
    v136 = v164;
    v134[4] = v166;
    v134[5] = v136;
    v134[6] = v158;
    v134[7] = v108;
    v134[8] = v152;
    v134[9] = v109;
    v137 = v150;
    v134[10] = v151;
    v134[11] = v137;
    v138 = object;
    v134[12] = countAndFlagsBits;
    v134[13] = v138;
    v134[14] = v123;
    v134[15] = v124;
    v139 = v162;
    v134[16] = v133;
    v134[17] = v139;
    v140 = sub_1000A5464((uint64_t)&v176, (uint64_t)v154, v153);
    v142 = v141;
    sub_100023EEC();
    sub_100019F7C(&v176);
    sub_1000ACB64(v140, v142, 1u, (uint64_t)&v176);
    v171 = v176;
    v4 = v177;
    inited = (uint64_t)v178;
    v143 = v179;
    v144 = v180;
    v145 = v181;

    sub_10002A7BC();
    swift_release();
    swift_release();
    swift_release();
    v15 = v143 | (v144 << 32) | (v145 << 48);
    sub_10001ED94();
    v146 = sub_100049C88();
    v55 = sub_10001ED7C(v146);
    v56 = v171;
    v34 = _swiftEmptyArrayStorage;
    v57 = 3LL;
    a2 = v160;
  }

  else
  {
    sub_10012A2D8();
    sub_10002A7BC();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    sub_10001ED94();
    v95 = sub_100049C88();
    sub_10001ED7C(v95);
    *(double *)&v56 = sub_100020050();
    v34 = _swiftEmptyArrayStorage;
    v57 = 49LL;
  }

  *(void *)(v13 + 32) = v14;
  *(_WORD *)(v13 + 40) = v10;
  *(_WORD *)(v13 + 42) = v11;
  *(void *)a2 = v13;
  *(void *)(a2 + 8) = _swiftEmptyArrayStorage;
  *(_BYTE *)(a2 + 16) = 2;
  *(void *)(a2 + 24) = v7;
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 40) = v4;
  *(void *)(a2 + 48) = v5;
  *(_BYTE *)(a2 + 62) = BYTE6(v3);
  *(_WORD *)(a2 + 60) = WORD2(v3);
  *(_DWORD *)(a2 + 56) = v3;
  sub_10002A580();
}

      v10 = _StringObject.sharedUTF8.getter(v5);
      if (!v10) {
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
      goto LABEL_5;
    }

    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }

    sub_10016566C(v3);
    goto LABEL_12;
  }

  id v3 = sub_100163400();
  if ((~v3 & 0xF000000000000007LL) != 0) {
    goto LABEL_11;
  }
  v4 = sub_10016343C();
LABEL_7:
  sub_10016566C(v4);
  if ((~v1 & 0xF000000000000007LL) != 0)
  {
LABEL_12:
    v7 = *(void *)(v0 + 64);
    id v8 = sub_10002A444();
    v9 = *(void *)(v0 + 128);
    v10 = *(uint64_t (**)(uint64_t, uint64_t (*)(), uint64_t, char *, uint64_t, uint64_t))(v7 + 48);
    sub_10002A4C8();
    v11 = v10(v9, sub_100165338, v0, &type metadata for ()[8], v8, v7);
    sub_10001EDD8();
    *(void *)(v2 + 136) = v11;
    swift_release();
    sub_100163F0C(v1);
    return swift_release();
  }

  result = sub_1000487CC(v0 + 200, (uint64_t)v13);
  id v6 = *(void *)(v0 + 200);
  if (v6 >> 62) {
    goto LABEL_15;
  }
  if (!*(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
    return sub_100163798(8LL);
  }
  return result;
}

  sub_100023EEC();
  return 0LL;
}

      v2 = v14;
      if (v19 >= v18)
      {
        v11 = v13;
      }

      else
      {
        if (v9 < v12) {
          goto LABEL_131;
        }
        v11 = v13;
        if (v12 < v9)
        {
          v28 = (uint64_t *)(v110 + 8 * v9);
          v29 = v9;
          v30 = v12;
          v31 = (uint64_t *)(v10 + 8 * v12);
          do
          {
            if (v30 != --v29)
            {
              if (!v10) {
                goto LABEL_137;
              }
              v32 = *v31;
              *v31 = *v28;
              *v28 = v32;
            }

            ++v30;
            --v28;
            ++v31;
          }

          while (v30 < v29);
        }
      }
    }

    if (v9 < v4)
    {
      if (__OFSUB__(v9, v12)) {
        goto LABEL_129;
      }
      if (v9 - v12 < v112)
      {
        if (__OFADD__(v12, v112)) {
          goto LABEL_132;
        }
        if (v12 + v112 >= v4) {
          v33 = (char *)v4;
        }
        else {
          v33 = (char *)(v12 + v112);
        }
        if ((char *)v9 != v33)
        {
          v109 = v11;
          v117 = v2;
          v34 = v110 + 8 * v9;
          do
          {
            v35 = v33;
            v36 = *(void **)(v10 + 8 * v9);
            v37 = v12;
            v38 = v34;
            do
            {
              v39 = *(void **)v38;
              v40 = v36;
              v41 = v39;
              v42 = sub_100179398();
              v43 = sub_10017941C();

              if (v43 >= v42) {
                break;
              }
              if (!v10) {
                goto LABEL_135;
              }
              v44 = *(void **)v38;
              v36 = *(void **)(v38 + 8);
              *(void *)v38 = v36;
              *(void *)(v38 + 8) = v44;
              v38 -= 8LL;
              ++v37;
            }

            while (v9 != v37);
            ++v9;
            v34 += 8LL;
            v33 = v35;
            v12 = v114;
          }

          while ((char *)v9 != v35);
          v9 = (Swift::Int)v35;
          v2 = v117;
          v11 = v109;
        }
      }
    }

    if (v9 < v12) {
      goto LABEL_128;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0) {
      v11 = sub_1001793FC(0LL, *((void *)v11 + 2) + 1LL);
    }
    v46 = *((void *)v11 + 2);
    v45 = *((void *)v11 + 3);
    v47 = v46 + 1;
    v118 = v2;
    if (v46 >= v45 >> 1) {
      v11 = sub_1001793FC((char *)(v45 > 1), v46 + 1);
    }
    *((void *)v11 + 2) = v47;
    v48 = v11 + 32;
    v49 = &v11[16 * v46 + 32];
    *(void *)v49 = v12;
    *((void *)v49 + 1) = v9;
    if (v46) {
      break;
    }
    v47 = 1LL;
LABEL_86:
    v4 = v113;
    v2 = v118;
    if (v9 >= v113) {
      goto LABEL_95;
    }
  }

  v115 = v9;
  while (1)
  {
    v50 = v47 - 1;
    if (v47 >= 4)
    {
      v55 = &v48[16 * v47];
      v56 = *((void *)v55 - 8);
      v57 = *((void *)v55 - 7);
      v61 = __OFSUB__(v57, v56);
      v58 = v57 - v56;
      if (v61) {
        goto LABEL_113;
      }
      v60 = *((void *)v55 - 6);
      v59 = *((void *)v55 - 5);
      v61 = __OFSUB__(v59, v60);
      v53 = v59 - v60;
      v54 = v61;
      if (v61) {
        goto LABEL_114;
      }
      v62 = v47 - 2;
      v63 = &v48[16 * v47 - 32];
      v65 = *(void *)v63;
      v64 = *((void *)v63 + 1);
      v61 = __OFSUB__(v64, v65);
      v66 = v64 - v65;
      if (v61) {
        goto LABEL_115;
      }
      v61 = __OFADD__(v53, v66);
      v67 = v53 + v66;
      if (v61) {
        goto LABEL_117;
      }
      if (v67 >= v58)
      {
        v85 = &v48[16 * v50];
        v87 = *(void *)v85;
        v86 = *((void *)v85 + 1);
        v61 = __OFSUB__(v86, v87);
        v88 = v86 - v87;
        if (v61) {
          goto LABEL_123;
        }
        v78 = v53 < v88;
        goto LABEL_75;
      }
    }

    else
    {
      if (v47 != 3)
      {
        v79 = *((void *)v11 + 4);
        v80 = *((void *)v11 + 5);
        v61 = __OFSUB__(v80, v79);
        v72 = v80 - v79;
        v73 = v61;
        goto LABEL_69;
      }

      v52 = *((void *)v11 + 4);
      v51 = *((void *)v11 + 5);
      v61 = __OFSUB__(v51, v52);
      v53 = v51 - v52;
      v54 = v61;
    }

    if ((v54 & 1) != 0) {
      goto LABEL_116;
    }
    v62 = v47 - 2;
    v68 = &v48[16 * v47 - 32];
    v70 = *(void *)v68;
    v69 = *((void *)v68 + 1);
    v71 = __OFSUB__(v69, v70);
    v72 = v69 - v70;
    v73 = v71;
    if (v71) {
      goto LABEL_118;
    }
    v74 = &v48[16 * v50];
    v76 = *(void *)v74;
    v75 = *((void *)v74 + 1);
    v61 = __OFSUB__(v75, v76);
    v77 = v75 - v76;
    if (v61) {
      goto LABEL_120;
    }
    if (__OFADD__(v72, v77)) {
      goto LABEL_122;
    }
    if (v72 + v77 >= v53)
    {
      v78 = v53 < v77;
LABEL_75:
      if (v78) {
        v50 = v62;
      }
      goto LABEL_77;
    }

  result = 0.0;
  v0[2] = 0u;
  v0[3] = 0u;
  *v0 = 0u;
  v0[1] = 0u;
  return result;
}

void sub_100003138(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  v2 = off_1002A8700;
  off_1002A8700 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  v4 = (void *)qword_1002BAD80;
  qword_1002BAD80 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  id v6 = (void *)qword_1002BAD88;
  qword_1002BAD88 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  id v8 = (void *)qword_1002BAD90;
  qword_1002BAD90 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  v10 = (void *)qword_1002BAD98;
  qword_1002BAD98 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  v12 = (void *)qword_1002BADA0;
  qword_1002BADA0 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  v14 = (void *)qword_1002BADA8;
  qword_1002BADA8 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  v16 = (void *)qword_1002BADB0;
  qword_1002BADB0 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  v18 = (void *)qword_1002BADB8;
  qword_1002BADB8 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  v20 = (void *)qword_1002BADC0;
  qword_1002BADC0 = (uint64_t)v19;
}

uint64_t sub_100003294(unsigned int *a1, unsigned __int8 *a2, __int16 *a3, uint64_t a4)
{
  unsigned int v4 = a1[5];
  if ((v4 & 0x7F000000) != 0) {
    return 0LL;
  }
  os_log_t v7 = a2;
  int v9 = *a1;
  unsigned int v10 = a1[1];
  uint64_t v11 = (*a1 >> 10) & 0x7F;
  if (!a4)
  {
    if (v11 <= 0x3F)
    {
      if (((1LL << v11) & 0x40016) != 0) {
        return 0LL;
      }
      if (v11 == 63)
      {
        if (*((void *)a2 + 7))
        {
          *a1 = v9 & 0xFFFE03FF | 0xFC00;
          if ((*((unsigned int (**)(unsigned int *))a2 + 7))(a1))
          {
            uint64_t v5 = 0LL;
            a1[1] = v10;
            a1[5] = a1[5] & 0x80FFFFFF | 0x7000000;
            return v5;
          }
        }

        return 0LL;
      }
    }

    a1[5] = v4 & 0x80FFFFFF | 0xB000000;
    return 1LL;
  }

  v12 = a3;
  if ((_DWORD)v11 == 45) {
    os_log_t v13 = a3;
  }
  else {
    os_log_t v13 = 0LL;
  }
  v191 = (unsigned __int8 *)v13;
  if ((_DWORD)v11 == 50) {
    v14 = a3;
  }
  else {
    v14 = 0LL;
  }
  unsigned int v15 = v11 - 21;
  if ((_DWORD)v11 == 16) {
    v16 = a3;
  }
  else {
    v16 = 0LL;
  }
  BOOL v17 = v15 >= 0xB;
  if (v15 >= 0xB) {
    v18 = v16;
  }
  else {
    v18 = 0LL;
  }
  v194 = (unsigned __int8 *)v18;
  v195 = 0LL;
  if (v17) {
    os_log_t v19 = 0LL;
  }
  else {
    os_log_t v19 = a3;
  }
  v193 = (unsigned __int8 *)v19;
  v20 = (unsigned __int8 *)a3 + a4;
  uint64_t v189 = (uint64_t)a3 + a4 - 1;
  v21 = (unsigned __int8 *)a3;
LABEL_21:
  unsigned __int8 v22 = *v21;
  if (v11 < 0x3B && ++v10 > dword_1002A8708)
  {
    v192 = v12;
    goto LABEL_779;
  }

  while (2)
  {
    v23 = v14;
LABEL_24:
    v14 = v23;
    switch((int)v11)
    {
      case 1:
        LODWORD(v11) = 1;
        if (v22 == 10 || v22 == 13) {
          goto LABEL_623;
        }
        v192 = v12;
        unsigned int v182 = a1[5];
        char v183 = 13;
        goto LABEL_767;
      case 2:
        LODWORD(v11) = 2;
        if (v22 == 10 || v22 == 13) {
          goto LABEL_623;
        }
        int v61 = *a1;
        *a1 &= 0xDFFFFC03;
        *((void *)a1 + 1) = -1LL;
        if (v22 == 72)
        {
          if ((*((_BYTE *)a1 + 23) & 0x7F) != 0) {
            sub_1001EB1D4();
          }
          if (*(void *)v7)
          {
            unsigned int v129 = v61 & 0xDFFE0003 | 0xC00;
            goto LABEL_619;
          }

          LODWORD(v11) = 3;
          goto LABEL_241;
        }

        unsigned int v62 = v61 & 0xDFFFFC00;
        LODWORD(v11) = 18;
LABEL_203:
        *a1 = v62;
        continue;
      case 3:
        if (v22 == 84)
        {
          *a1 = *a1 & 0xFFFFFFFC | 1;
LABEL_276:
          LODWORD(v11) = 6;
          goto LABEL_623;
        }

        if (v22 == 69)
        {
          int v133 = *a1;
          *((_BYTE *)a1 + 22) = 2;
          *a1 = v133 & 0xE0FFFFFC | 0x2000000;
          LODWORD(v11) = 19;
          goto LABEL_623;
        }

        v192 = v12;
        unsigned int v176 = a1[5] & 0x80FFFFFF | 0x1C000000;
        a1[5] = v176;
        LOBYTE(v11) = 3;
        goto LABEL_670;
      case 4:
        LODWORD(v11) = 4;
        if (v22 == 10 || v22 == 13) {
          goto LABEL_623;
        }
        int v75 = *a1;
        *a1 &= 0xDFFFFC03;
        *((void *)a1 + 1) = -1LL;
        unsigned int v76 = a1[5];
        if (v22 != 72)
        {
          v192 = v12;
          unsigned int v176 = v76 & 0x80FFFFFF | 0x1C000000;
          a1[5] = v176;
          LOBYTE(v11) = 4;
          goto LABEL_670;
        }

        if ((v76 & 0x7F000000) != 0) {
          sub_1001EB1FC();
        }
        if (!*(void *)v7)
        {
          LODWORD(v11) = 5;
          goto LABEL_241;
        }

        unsigned int v77 = v75 & 0xDFFE0003;
        int v78 = 5120;
        goto LABEL_618;
      case 5:
        if (v22 == 84) {
          goto LABEL_276;
        }
        v192 = v12;
        unsigned int v176 = a1[5] & 0x80FFFFFF | 0x1E000000;
        a1[5] = v176;
        LOBYTE(v11) = 5;
        goto LABEL_670;
      case 6:
        if (v22 == 84)
        {
          LODWORD(v11) = 7;
          goto LABEL_623;
        }

        v192 = v12;
        unsigned int v176 = a1[5] & 0x80FFFFFF | 0x1E000000;
        a1[5] = v176;
        LOBYTE(v11) = 6;
        goto LABEL_670;
      case 7:
        if (v22 == 80)
        {
          LODWORD(v11) = 8;
          goto LABEL_623;
        }

        v192 = v12;
        unsigned int v176 = a1[5] & 0x80FFFFFF | 0x1E000000;
        a1[5] = v176;
        LOBYTE(v11) = 7;
        goto LABEL_670;
      case 8:
        if (v22 == 47)
        {
          LODWORD(v11) = 9;
          goto LABEL_623;
        }

        v192 = v12;
        a1[1] = v10;
        unsigned int v176 = a1[5] & 0x80FFFFFF | 0x1E000000;
        a1[5] = v176;
        LOBYTE(v11) = 8;
        goto LABEL_670;
      case 9:
        if ((v22 - 58) > 0xF5u)
        {
          *((_WORD *)a1 + 8) = v22 - 48;
          LODWORD(v11) = 10;
          goto LABEL_623;
        }

        v192 = v12;
        a1[1] = v10;
        unsigned int v176 = a1[5] & 0x80FFFFFF | 0xE000000;
        a1[5] = v176;
        LOBYTE(v11) = 9;
        goto LABEL_670;
      case 10:
        if (v22 == 46)
        {
          LODWORD(v11) = 11;
          goto LABEL_623;
        }

        v192 = v12;
        a1[1] = v10;
        unsigned int v176 = a1[5] & 0x80FFFFFF | 0xE000000;
        a1[5] = v176;
        LOBYTE(v11) = 10;
        goto LABEL_670;
      case 11:
        if ((v22 - 58) > 0xF5u)
        {
          *((_WORD *)a1 + 9) = v22 - 48;
          LODWORD(v11) = 12;
          goto LABEL_623;
        }

        v192 = v12;
        a1[1] = v10;
        unsigned int v176 = a1[5] & 0x80FFFFFF | 0xE000000;
        a1[5] = v176;
        LOBYTE(v11) = 11;
        goto LABEL_670;
      case 12:
        if (v22 == 32) {
          goto LABEL_455;
        }
        v192 = v12;
        a1[1] = v10;
        unsigned int v176 = a1[5] & 0x80FFFFFF | 0xE000000;
        a1[5] = v176;
        LOBYTE(v11) = 12;
        goto LABEL_670;
      case 13:
        if ((v22 - 48) >= 0xAu)
        {
          if (v22 == 32)
          {
LABEL_455:
            LODWORD(v11) = 13;
            goto LABEL_623;
          }

          v192 = v12;
          a1[1] = v10;
          unsigned int v176 = a1[5] & 0x80FFFFFF | 0xF000000;
          a1[5] = v176;
          LOBYTE(v11) = 13;
          goto LABEL_670;
        }

        *((_WORD *)a1 + 10) = v22 - 48;
        goto LABEL_436;
      case 14:
        if ((v22 - 48) < 0xAu)
        {
          unsigned int v126 = a1[5];
          unsigned int v127 = (unsigned __int16)((char)v22 + 10 * v126 - 48);
          unsigned int v128 = v126 & 0xFFFF0000 | v127;
          a1[5] = v128;
          if (v127 < 0x3E8)
          {
LABEL_436:
            LODWORD(v11) = 14;
            goto LABEL_623;
          }

          v192 = v12;
          a1[1] = v10;
          unsigned int v173 = v128 & 0x80FFFFFF;
          goto LABEL_725;
        }

        LODWORD(v11) = 15;
        if (v22 != 10 && v22 != 13)
        {
          if (v22 == 32) {
            goto LABEL_623;
          }
          v192 = v12;
          a1[1] = v10;
          unsigned int v173 = a1[5] & 0x80FFFFFF;
LABEL_725:
          unsigned int v176 = v173 | 0xF000000;
          a1[5] = v173 | 0xF000000;
          LOBYTE(v11) = 14;
          goto LABEL_670;
        }

        goto LABEL_24;
      case 15:
        v40 = v194;
        if (!v194) {
          v40 = v21;
        }
        v194 = v40;
        *a1 &= 0xE0FFFFFF;
        LODWORD(v11) = 16;
        if (v22 != 10 && v22 != 13) {
          goto LABEL_623;
        }
        goto LABEL_24;
      case 16:
        if (v22 == 10)
        {
          a2 = v194;
          if ((*((_BYTE *)a1 + 23) & 0x7F) != 0) {
            sub_1001EB24C();
          }
          if (!v194)
          {
            v194 = 0LL;
LABEL_333:
            LODWORD(v11) = 44;
            goto LABEL_623;
          }

          LODWORD(v11) = 44;
          if (!*((void *)v7 + 2)) {
            goto LABEL_559;
          }
        }

        else
        {
          if (v22 != 13)
          {
            LODWORD(v11) = 16;
            goto LABEL_623;
          }

          a2 = v194;
          if ((*((_BYTE *)a1 + 23) & 0x7F) != 0) {
            sub_1001EB224();
          }
          if (!v194)
          {
            v194 = 0LL;
            LODWORD(v11) = 17;
            goto LABEL_623;
          }

          LODWORD(v11) = 17;
          if (!*((void *)v7 + 2))
          {
LABEL_559:
            v194 = 0LL;
            goto LABEL_241;
          }
        }

        *a1 = *a1 & 0xFFFE03FF | ((v11 & 0x7F) << 10);
        int v155 = (*((uint64_t (**)(unsigned int *, unsigned __int8 *, int64_t))v7 + 2))(a1, a2, v21 - a2);
        unsigned int v156 = a1[5];
        if (v155)
        {
          a1[1] = v10;
          unsigned int v156 = v156 & 0x80FFFFFF | 0x8000000;
          a1[5] = v156;
        }

        a3 = &jpt_100003390;
        if ((v156 & 0x7F000000) != 0) {
          goto LABEL_765;
        }
        v194 = 0LL;
        goto LABEL_622;
      case 17:
        if (v22 == 10) {
          goto LABEL_333;
        }
        v192 = v12;
        a1[1] = v10;
        unsigned int v176 = a1[5] & 0x80FFFFFF | 0x1E000000;
        a1[5] = v176;
        LOBYTE(v11) = 17;
        goto LABEL_670;
      case 18:
        LODWORD(v11) = 18;
        if (v22 == 10 || v22 == 13) {
          goto LABEL_623;
        }
        int v79 = *a1;
        *a1 &= 0xDFFFFC03;
        *((void *)a1 + 1) = -1LL;
        if (((v22 | 0x20) - 123) <= 0xE5u)
        {
          v192 = v12;
          a1[1] = v10;
          unsigned int v188 = a1[5] & 0x80FFFFFF;
LABEL_802:
          unsigned int v176 = v188 | 0x10000000;
          a1[5] = v188 | 0x10000000;
          LOBYTE(v11) = 18;
          goto LABEL_670;
        }

        unsigned int v80 = a1[5];
        unsigned int v81 = v80 & 0xFF00FFFF;
        a1[5] = v80 & 0xFF00FFFF;
        unsigned int v82 = v79 & 0xC0FFFC03 | 0x1000000;
        *a1 = v82;
        int v83 = 1245184;
        switch(v22)
        {
          case 'A':
            goto LABEL_614;
          case 'B':
            int v83 = 0x100000;
            goto LABEL_614;
          case 'C':
            int v83 = 327680;
            goto LABEL_614;
          case 'D':
            goto LABEL_615;
          case 'G':
            int v83 = 0x10000;
            goto LABEL_614;
          case 'H':
            int v83 = 0x20000;
            goto LABEL_614;
          case 'L':
            int v83 = 589824;
            goto LABEL_614;
          case 'M':
            int v83 = 655360;
            goto LABEL_614;
          case 'N':
            int v83 = 1638400;
            goto LABEL_614;
          case 'O':
            int v83 = 393216;
            goto LABEL_614;
          case 'P':
            int v83 = 196608;
            goto LABEL_614;
          case 'R':
            int v83 = 1310720;
            goto LABEL_614;
          case 'S':
            int v83 = 1703936;
            goto LABEL_614;
          case 'T':
            int v83 = 458752;
            goto LABEL_614;
          case 'U':
            int v83 = 983040;
LABEL_614:
            v81 |= v83;
            a1[5] = v81;
LABEL_615:
            if ((v81 & 0x7F000000) != 0) {
              sub_1001EB274();
            }
            if (!*(void *)v7)
            {
              LODWORD(v11) = 19;
              goto LABEL_241;
            }

            unsigned int v77 = v82 & 0xC1FE0003;
            int v78 = 19456;
LABEL_618:
            unsigned int v129 = v77 | v78;
LABEL_619:
            *a1 = v129;
            int v159 = (*(uint64_t (**)(unsigned int *, unsigned __int8 *, __int16 *))v7)(a1, a2, a3);
            unsigned int v160 = a1[5];
            if (v159)
            {
              a1[1] = v10;
              unsigned int v160 = v160 & 0x80FFFFFF | 0x1000000;
              a1[5] = v160;
            }

            a3 = &jpt_100003390;
            if ((v160 & 0x7F000000) == 0) {
              goto LABEL_622;
            }
            goto LABEL_765;
          default:
            v192 = v12;
            a1[1] = v10;
            unsigned int v188 = v80 & 0x8000FFFF;
            goto LABEL_802;
        }

      case 19:
        if (v22)
        {
          unsigned int v84 = a1[5];
          v85 = off_10026EF40[BYTE2(v84)];
          unint64_t v86 = *a1;
          uint64_t v87 = (v86 >> 24) & 0x1F;
          if (v22 == 32 && !v85[v87])
          {
            LODWORD(v11) = 20;
LABEL_638:
            *a1 = v86 & 0xE0FFFFFF | ((((v86 + 0x1000000) >> 24) & 0x1F) << 24);
            goto LABEL_623;
          }

          if (v85[v87] == v22)
          {
LABEL_637:
            LODWORD(v11) = 19;
            goto LABEL_638;
          }

          if (v22 == 45 || (v22 - 65) <= 0x19u)
          {
            int v88 = v84 & 0xFF0000 | ((_DWORD)v87 << 8) | (char)v22;
            if (v88 <= 655694)
            {
              if (v88 <= 328007)
              {
                if (v88 > 196948)
                {
                  if (v88 == 196949)
                  {
                    int v89 = 0x40000;
                    goto LABEL_636;
                  }

                  if (v88 == 262738)
                  {
                    int v89 = 1900544;
                    goto LABEL_636;
                  }
                }

                else
                {
                  if (v88 == 196929)
                  {
                    int v89 = 1835008;
                    goto LABEL_636;
                  }

                  if (v88 == 196946)
                  {
                    int v89 = 786432;
                    goto LABEL_636;
                  }
                }
              }

              else if (v88 <= 590152)
              {
                if (v88 == 328008)
                {
                  int v89 = 1441792;
                  goto LABEL_636;
                }

                if (v88 == 328272)
                {
                  int v89 = 0x80000;
                  goto LABEL_636;
                }
              }

              else
              {
                switch(v88)
                {
                  case 590153:
                    int v89 = 2031616;
                    goto LABEL_636;
                  case 655661:
                    int v89 = 1572864;
                    goto LABEL_636;
                  case 655685:
                    int v89 = 1507328;
                    goto LABEL_636;
                }
              }
            }

            else if (v88 > 983634)
            {
              if (v88 <= 1311297)
              {
                if (v88 == 983635)
                {
                  int v89 = 1769472;
                  goto LABEL_636;
                }

                if (v88 == 983881)
                {
                  int v89 = 0x200000;
                  goto LABEL_636;
                }
              }

              else
              {
                switch(v88)
                {
                  case 1311298:
                    int v89 = 1114112;
                    goto LABEL_636;
                  case 1704261:
                    int v89 = 917504;
                    goto LABEL_636;
                  case 1704271:
                    int v89 = 2162688;
                    goto LABEL_636;
                }
              }
            }

            else if (v88 <= 656192)
            {
              if (v88 == 655695)
              {
                int v89 = 720896;
                goto LABEL_636;
              }

              if (v88 == 655937)
              {
                int v89 = 1376256;
                goto LABEL_636;
              }
            }

            else
            {
              switch(v88)
              {
                case 656193:
                  int v89 = 1966080;
                  goto LABEL_636;
                case 787536:
                  int v89 = 851968;
                  goto LABEL_636;
                case 983618:
                  int v89 = 1179648;
LABEL_636:
                  a1[5] = v84 & 0xFF00FFFF | v89;
                  goto LABEL_637;
              }
            }
          }

          v192 = v12;
          a1[1] = v10;
          unsigned int v184 = v84 & 0x80FFFFFF;
        }

        else
        {
          v192 = v12;
          a1[1] = v10;
          unsigned int v184 = a1[5] & 0x80FFFFFF;
        }

        unsigned int v176 = v184 | 0x10000000;
        a1[5] = v184 | 0x10000000;
        LOBYTE(v11) = 19;
        goto LABEL_670;
      case 20:
        LODWORD(v11) = 20;
        if (v22 == 32) {
          goto LABEL_623;
        }
        v90 = v193;
        if (!v193) {
          v90 = v21;
        }
        v192 = v12;
        v193 = v90;
        unsigned int v182 = a1[5];
        if ((v182 & 0xFF0000) == 0x50000) {
          int v91 = 24;
        }
        else {
          int v91 = 20;
        }
        LODWORD(v11) = sub_100005D3C(v91, (char)v22);
        if ((_DWORD)v11 != 1)
        {
          v12 = v192;
          goto LABEL_241;
        }

        a1[1] = v10;
        goto LABEL_790;
      case 21:
      case 22:
      case 23:
      case 24:
        unsigned int v64 = (char)v22;
        v192 = v12;
        a1[1] = v10;
        unsigned int v176 = a1[5] & 0x80FFFFFF | 0x11000000;
        goto LABEL_731;
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
        if (v22 == 10 || (unsigned int v64 = (char)v22, v22 == 13))
        {
          a1[4] = 589824;
          if (v22 == 13) {
            LODWORD(v11) = 43;
          }
          else {
            LODWORD(v11) = 44;
          }
          a2 = v193;
          if ((*((_BYTE *)a1 + 23) & 0x7F) != 0) {
            sub_1001EB2C4();
          }
          if (!v193)
          {
            v193 = 0LL;
            goto LABEL_623;
          }

          if (!*((void *)v7 + 1))
          {
            v193 = 0LL;
            goto LABEL_241;
          }

          unsigned int v72 = *a1 & 0xFFFE03FF | ((_DWORD)v11 << 10);
        }

        else
        {
          if (v22 != 32)
          {
LABEL_240:
            LODWORD(v11) = sub_100005D3C(v11, v64);
            if ((_DWORD)v11 == 1)
            {
              v192 = v12;
              a1[1] = v10;
              unsigned int v182 = a1[5];
LABEL_790:
              char v183 = 17;
LABEL_767:
              unsigned int v176 = v182 & 0x80FFFFFF | ((v183 & 0x7F) << 24);
              a1[5] = v176;
              LOBYTE(v11) = 1;
              goto LABEL_670;
            }

LABEL_241:
            a3 = &jpt_100003390;
            goto LABEL_623;
          }

          a2 = v193;
          if ((*((_BYTE *)a1 + 23) & 0x7F) != 0) {
            sub_1001EB29C();
          }
          if (!v193)
          {
            v193 = 0LL;
            LODWORD(v11) = 32;
            goto LABEL_623;
          }

          if (!*((void *)v7 + 1))
          {
            v193 = 0LL;
            LODWORD(v11) = 32;
            goto LABEL_241;
          }

          unsigned int v72 = *a1 & 0xFFFE03FF | 0x8000;
        }

        *a1 = v72;
        int v130 = (*((uint64_t (**)(unsigned int *, unsigned __int8 *, int64_t))v7 + 1))(a1, a2, v21 - a2);
        unsigned int v131 = a1[5];
        if (v130)
        {
          a1[1] = v10;
          unsigned int v131 = v131 & 0x80FFFFFF | 0x2000000;
          a1[5] = v131;
        }

        a3 = &jpt_100003390;
        if ((v131 & 0x7F000000) != 0) {
          goto LABEL_765;
        }
        v193 = 0LL;
        goto LABEL_622;
      case 32:
        LODWORD(v11) = (char)v22;
        switch(v22)
        {
          case ' ':
            goto LABEL_623;
          case 'H':
            LODWORD(v11) = 33;
            goto LABEL_623;
          case 'I':
            unsigned int v122 = a1[5];
            if ((v122 & 0xFF0000) == 0x210000)
            {
              LODWORD(v11) = 37;
              goto LABEL_623;
            }

            v192 = v12;
            break;
          default:
            v192 = v12;
            unsigned int v122 = a1[5];
            break;
        }

        a1[1] = v10;
        unsigned int v176 = v122 & 0x80FFFFFF | 0x1C000000;
        a1[5] = v176;
        LOBYTE(v11) = 32;
        goto LABEL_670;
      case 33:
        if (v22 == 84)
        {
          LODWORD(v11) = 34;
          goto LABEL_623;
        }

        v192 = v12;
        a1[1] = v10;
        unsigned int v176 = a1[5] & 0x80FFFFFF | 0x1E000000;
        a1[5] = v176;
        LOBYTE(v11) = 33;
        goto LABEL_670;
      case 34:
        if (v22 == 84)
        {
          LODWORD(v11) = 35;
          goto LABEL_623;
        }

        v192 = v12;
        a1[1] = v10;
        unsigned int v176 = a1[5] & 0x80FFFFFF | 0x1E000000;
        a1[5] = v176;
        LOBYTE(v11) = 34;
        goto LABEL_670;
      case 35:
        if (v22 == 80) {
          goto LABEL_423;
        }
        v192 = v12;
        a1[1] = v10;
        unsigned int v176 = a1[5] & 0x80FFFFFF | 0x1E000000;
        a1[5] = v176;
        LOBYTE(v11) = 35;
        goto LABEL_670;
      case 36:
        if (v22 == 47)
        {
          LODWORD(v11) = 39;
          goto LABEL_623;
        }

        v192 = v12;
        a1[1] = v10;
        unsigned int v176 = a1[5] & 0x80FFFFFF | 0x1E000000;
        a1[5] = v176;
        LOBYTE(v11) = 36;
        goto LABEL_670;
      case 37:
        if (v22 == 67)
        {
          LODWORD(v11) = 38;
          goto LABEL_623;
        }

        v192 = v12;
        a1[1] = v10;
        unsigned int v176 = a1[5] & 0x80FFFFFF | 0x1E000000;
        a1[5] = v176;
        LOBYTE(v11) = 37;
        goto LABEL_670;
      case 38:
        if (v22 == 69)
        {
LABEL_423:
          LODWORD(v11) = 36;
          goto LABEL_623;
        }

        v192 = v12;
        a1[1] = v10;
        unsigned int v176 = a1[5] & 0x80FFFFFF | 0x1E000000;
        a1[5] = v176;
        LOBYTE(v11) = 38;
        goto LABEL_670;
      case 39:
        if ((v22 - 58) > 0xF5u)
        {
          *((_WORD *)a1 + 8) = v22 - 48;
          LODWORD(v11) = 40;
          goto LABEL_623;
        }

        v192 = v12;
        a1[1] = v10;
        unsigned int v176 = a1[5] & 0x80FFFFFF | 0xE000000;
        a1[5] = v176;
        LOBYTE(v11) = 39;
        goto LABEL_670;
      case 40:
        if (v22 == 46)
        {
          LODWORD(v11) = 41;
          goto LABEL_623;
        }

        v192 = v12;
        a1[1] = v10;
        unsigned int v176 = a1[5] & 0x80FFFFFF | 0xE000000;
        a1[5] = v176;
        LOBYTE(v11) = 40;
        goto LABEL_670;
      case 41:
        if ((v22 - 58) > 0xF5u)
        {
          *((_WORD *)a1 + 9) = v22 - 48;
          LODWORD(v11) = 42;
          goto LABEL_623;
        }

        v192 = v12;
        a1[1] = v10;
        unsigned int v176 = a1[5] & 0x80FFFFFF | 0xE000000;
        a1[5] = v176;
        LOBYTE(v11) = 41;
        goto LABEL_670;
      case 42:
        if (v22 == 13)
        {
          LODWORD(v11) = 43;
          goto LABEL_623;
        }

        if (v22 != 10)
        {
          v192 = v12;
          a1[1] = v10;
          unsigned int v176 = a1[5] & 0x80FFFFFF | 0xE000000;
          a1[5] = v176;
          LOBYTE(v11) = 42;
          goto LABEL_670;
        }

        goto LABEL_333;
      case 43:
        if (v22 == 10) {
          goto LABEL_333;
        }
        v192 = v12;
        a1[1] = v10;
        unsigned int v176 = a1[5] & 0x80FFFFFF | 0x17000000;
        a1[5] = v176;
        LOBYTE(v11) = 43;
        goto LABEL_670;
      case 44:
        LODWORD(v11) = 57;
        if (v22 == 10) {
          goto LABEL_24;
        }
        if (v22 == 13) {
          goto LABEL_623;
        }
        if (v22 == 32 || (int v68 = byte_1001F311A[v22]) == 0)
        {
          v192 = v12;
          a1[1] = v10;
          unsigned int v176 = a1[5] & 0x80FFFFFF | 0x18000000;
          a1[5] = v176;
          LOBYTE(v11) = 44;
          goto LABEL_670;
        }

        v69 = v191;
        if (!v191) {
          v69 = v21;
        }
        v191 = v69;
        int v70 = *a1;
        *a1 &= 0xE0FFFFFF;
        if (v68 > 115)
        {
          if (v68 == 116)
          {
            unsigned int v71 = v70 & 0xE001FFFF | 0xE0000;
            goto LABEL_546;
          }

          if (v68 == 117)
          {
            unsigned int v71 = v70 & 0xE001FFFF | 0x100000;
            goto LABEL_546;
          }
        }

        else
        {
          if (v68 == 99)
          {
            unsigned int v71 = v70 & 0xE001FFFF | 0x20000;
            goto LABEL_546;
          }

          if (v68 == 112)
          {
            unsigned int v71 = v70 & 0xE001FFFF | 0xA0000;
LABEL_546:
            *a1 = v71;
            goto LABEL_547;
          }
        }

        unsigned int v71 = v70 & 0xE001FFFF;
        goto LABEL_546;
      case 45:
        unint64_t v92 = dword_1002A8708;
        v27 = v21;
        if (v21 == v20) {
          goto LABEL_450;
        }
        do
        {
          uint64_t v93 = *v27;
          if ((_DWORD)v93 == 32)
          {
            v192 = v12;
            v10 += (_DWORD)v27 - (_DWORD)v21;
            if (v10 <= v92)
            {
LABEL_734:
              a1[1] = v10;
              unsigned int v176 = a1[5] & 0x80FFFFFF | 0x18000000;
LABEL_735:
              a1[5] = v176;
              LOBYTE(v11) = 45;
              goto LABEL_669;
            }

LABEL_839:
            a1[1] = v10;
            unsigned int v176 = a1[5] & 0x80FFFFFF | 0xC000000;
            goto LABEL_735;
          }

          int v94 = byte_1001F311A[v93];
          if (!byte_1001F311A[v93])
          {
            v10 += (_DWORD)v27 - (_DWORD)v21;
            if (v10 <= v92)
            {
              a2 = v191;
              if ((_DWORD)v93 == 58)
              {
                if ((*((_BYTE *)a1 + 23) & 0x7F) != 0) {
                  sub_1001EB2EC();
                }
                if (v191)
                {
                  LODWORD(v11) = 46;
                  if (!*((void *)v7 + 3))
                  {
                    v191 = 0LL;
                    v21 = v27;
                    goto LABEL_241;
                  }

                  *a1 = *a1 & 0xFFFE03FF | 0xB800;
                  int v157 = (*((uint64_t (**)(unsigned int *, unsigned __int8 *, int64_t))v7 + 3))( a1,  v191,  v27 - v191);
                  unsigned int v158 = a1[5];
                  if (v157)
                  {
                    a1[1] = v10;
                    unsigned int v158 = v158 & 0x80FFFFFF | 0x3000000;
                    a1[5] = v158;
                  }

                  a3 = &jpt_100003390;
                  if ((v158 & 0x7F000000) != 0) {
                    goto LABEL_792;
                  }
                  v191 = 0LL;
                  LODWORD(v11) = (*a1 >> 10) & 0x7F;
                }

                else
                {
                  v191 = 0LL;
                  LODWORD(v11) = 46;
                }

                v21 = v27;
                goto LABEL_623;
              }

              v192 = v12;
              goto LABEL_734;
            }

            v192 = v12;
            goto LABEL_839;
          }

          int v95 = *a1;
          switch((*a1 >> 17) & 0x7F)
          {
            case 0u:
              unint64_t v97 = v20 - v27;
              if (v20 - v27 >= v92) {
                unint64_t v97 = v92;
              }
              v98 = &v27[v97];
              v99 = v27 + 1;
              do
              {
                v100 = v99;
                if (v99 >= v98) {
                  break;
                }
                uint64_t v101 = *v99;
                if (v101 == 32) {
                  break;
                }
                int v102 = byte_1001F311A[v101];
                v99 = v100 + 1;
              }

              while (v102);
              v27 = v100 - 1;
              goto LABEL_340;
            case 1u:
              unsigned int v96 = v95 & 0xE001FFFF | ((v94 == 111) << 18) | (v95 + 0x1000000) & 0x1F000000;
              break;
            case 2u:
              int v103 = (v95 + 0x1000000) & 0x1F000000;
              unsigned int v104 = v95 & 0xE001FFFF;
              if (v94 == 110) {
                int v105 = 393216;
              }
              else {
                int v105 = 0;
              }
              unsigned int v106 = v104 | v103;
              goto LABEL_354;
            case 3u:
              unsigned int v107 = v95 & 0xE0FFFFFF | ((((v95 + 0x1000000) >> 24) & 0x1F) << 24);
              *a1 = v107;
              if (v94 == 116)
              {
                unsigned int v96 = v107 & 0xFF01FFFF | 0xC0000;
              }

              else
              {
                unsigned int v96 = v107 & 0xFF01FFFF;
                if (v94 == 110) {
                  v96 |= 0x80000u;
                }
              }

              break;
            case 4u:
              unint64_t v108 = (v95 + 0x1000000) & 0x1F000000;
              int v95 = v108 | v95 & 0xE0FFFFFF;
              *a1 = v95;
              int v109 = 150994944;
              goto LABEL_364;
            case 5u:
              unint64_t v108 = (v95 + 0x1000000) & 0x1F000000;
              int v95 = v108 | v95 & 0xE0FFFFFF;
              *a1 = v95;
              if (v108 > 0x10000000
                || aProxyConnectio[v108 >> 24] != v94)
              {
                goto LABEL_338;
              }

              int v109 = 251658240;
LABEL_364:
              if ((_DWORD)v108 != v109) {
                goto LABEL_340;
              }
              char v110 = 9;
              goto LABEL_370;
            case 6u:
              unint64_t v111 = (v95 + 0x1000000) & 0x1F000000;
              int v95 = v111 | v95 & 0xE0FFFFFF;
              *a1 = v95;
              if ((_DWORD)v111 != 218103808) {
                goto LABEL_340;
              }
              char v110 = 10;
LABEL_370:
              unsigned int v96 = v95 & 0xFF01FFFF | ((v110 & 0x7F) << 17);
              break;
            case 7u:
              unint64_t v112 = (v95 + 0x1000000) & 0x1F000000;
              int v95 = v112 | v95 & 0xE0FFFFFF;
              *a1 = v95;
              if (v112 > 0x11000000
                || aTransferEncodi[v112 >> 24] != v94)
              {
                goto LABEL_338;
              }

              if ((_DWORD)v112 != 0x10000000) {
                goto LABEL_340;
              }
              unsigned int v106 = v95 & 0xFF03FFFF;
              int v105 = 538574848;
LABEL_354:
              unsigned int v96 = v106 | v105;
              break;
            case 8u:
              unint64_t v113 = (v95 + 0x1000000) & 0x1F000000;
              int v95 = v113 | v95 & 0xE0FFFFFF;
              *a1 = v95;
              if ((_DWORD)v113 != 100663296) {
                goto LABEL_340;
              }
              unsigned int v96 = v95 & 0xFF01FFFF | 0x1C0000;
              break;
            case 9u:
            case 0xAu:
            case 0xDu:
            case 0xEu:
LABEL_338:
              unsigned int v96 = v95 & 0xFF01FFFF;
              break;
            default:
              sub_1001EB314();
          }

          *a1 = v96;
LABEL_340:
          ++v27;
        }

        while (v27 != v20);
LABEL_450:
        int v132 = v189 - (_DWORD)v21;
        v21 = (unsigned __int8 *)v189;
        v10 += v132;
        if (v10 > v92)
        {
          v192 = v12;
          a1[1] = v10;
          unsigned int v176 = a1[5] & 0x80FFFFFF | 0xC000000;
          a1[5] = v176;
          LOBYTE(v11) = 45;
          goto LABEL_670;
        }

LABEL_547:
        LODWORD(v11) = 45;
LABEL_623:
        if (++v21 != v20) {
          goto LABEL_21;
        }
        unsigned int v163 = v194 != 0LL;
        if (v195) {
          ++v163;
        }
        v164 = v193;
        if (v193) {
          ++v163;
        }
        if (v14) {
          ++v163;
        }
        if (v191) {
          ++v163;
        }
        if (v163 >= 2) {
          sub_1001EB0E4();
        }
        unsigned int v165 = a1[5];
        if ((v165 & 0x7F000000) != 0) {
          sub_1001EB1AC();
        }
        if (!v191) {
          goto LABEL_690;
        }
        if (!*((void *)v7 + 3)) {
          goto LABEL_689;
        }
        *a1 = *a1 & 0xFFFE03FF | ((v11 & 0x7F) << 10);
        int v166 = (*((uint64_t (**)(unsigned int *, unsigned __int8 *, int64_t))v7 + 3))( a1,  v191,  v20 - v191);
        unsigned int v165 = a1[5];
        if (v166)
        {
          a1[1] = v10;
          unsigned int v165 = v165 & 0x80FFFFFF | 0x3000000;
          a1[5] = v165;
        }

        if ((v165 & 0x7F000000) != 0) {
          return a4;
        }
        LODWORD(v11) = (*a1 >> 10) & 0x7F;
LABEL_689:
        v164 = v193;
LABEL_690:
        if ((v165 & 0x7F000000) != 0) {
          sub_1001EB184();
        }
        if (!v14)
        {
LABEL_697:
          if ((v165 & 0x7F000000) != 0) {
            sub_1001EB15C();
          }
          if (v164 && *((void *)v7 + 1))
          {
            *a1 = *a1 & 0xFFFE03FF | ((v11 & 0x7F) << 10);
            int v168 = (*((uint64_t (**)(unsigned int *, unsigned __int8 *, int64_t))v7 + 1))( a1,  v164,  v20 - v164);
            unsigned int v165 = a1[5];
            if (v168)
            {
              a1[1] = v10;
              unsigned int v165 = v165 & 0x80FFFFFF | 0x2000000;
              a1[5] = v165;
            }

            if ((v165 & 0x7F000000) != 0) {
              return a4;
            }
            LODWORD(v11) = (*a1 >> 10) & 0x7F;
          }

          if ((v165 & 0x7F000000) != 0) {
            sub_1001EB134();
          }
          if (v195 && *((void *)v7 + 6))
          {
            *a1 = *a1 & 0xFFFE03FF | ((v11 & 0x7F) << 10);
            int v169 = (*((uint64_t (**)(unsigned int *, unsigned __int8 *, int64_t))v7 + 6))( a1,  v195,  v20 - v195);
            unsigned int v165 = a1[5];
            if (v169)
            {
              a1[1] = v10;
              unsigned int v165 = v165 & 0x80FFFFFF | 0x6000000;
              a1[5] = v165;
            }

            if ((v165 & 0x7F000000) != 0) {
              return a4;
            }
            LODWORD(v11) = (*a1 >> 10) & 0x7F;
          }

          if ((v165 & 0x7F000000) != 0) {
            sub_1001EB10C();
          }
          if (v194)
          {
            int v170 = *a1;
            if (*((void *)v7 + 2))
            {
              *a1 = v170 & 0xFFFE03FF | ((v11 & 0x7F) << 10);
              int v171 = (*((uint64_t (**)(unsigned int *, unsigned __int8 *, int64_t))v7 + 2))( a1,  v194,  v20 - v194);
              unsigned int v172 = a1[5];
              if (v171)
              {
                a1[1] = v10;
                unsigned int v172 = v172 & 0x80FFFFFF | 0x8000000;
                a1[5] = v172;
              }

              uint64_t v5 = a4;
              if ((v172 & 0x7F000000) != 0) {
                return v5;
              }
              int v170 = *a1;
              LODWORD(v11) = (*a1 >> 10) & 0x7F;
LABEL_723:
              *a1 = v170 & 0xFFFE03FF | ((v11 & 0x7F) << 10);
              a1[1] = v10;
              return v5;
            }
          }

          else
          {
            int v170 = *a1;
          }

          uint64_t v5 = a4;
          goto LABEL_723;
        }

        if (!*((void *)v7 + 4))
        {
          v164 = v193;
          goto LABEL_697;
        }

        *a1 = *a1 & 0xFFFE03FF | ((v11 & 0x7F) << 10);
        int v167 = (*((uint64_t (**)(unsigned int *, __int16 *, int64_t))v7 + 4))( a1,  v14,  v20 - (unsigned __int8 *)v14);
        unsigned int v165 = a1[5];
        if (v167)
        {
          a1[1] = v10;
          unsigned int v165 = v165 & 0x80FFFFFF | 0x4000000;
          a1[5] = v165;
        }

        v164 = v193;
        if ((v165 & 0x7F000000) == 0)
        {
          LODWORD(v11) = (*a1 >> 10) & 0x7F;
          goto LABEL_697;
        }

        return a4;
      case 46:
        LODWORD(v11) = 46;
        if (v22 > 0xCu)
        {
          if (v22 == 32) {
            goto LABEL_623;
          }
          if (v22 == 13)
          {
            LODWORD(v11) = 47;
            goto LABEL_623;
          }
        }

        else
        {
          if (v22 == 9) {
            goto LABEL_623;
          }
          if (v22 == 10)
          {
LABEL_252:
            LODWORD(v11) = 48;
            goto LABEL_623;
          }
        }

LABEL_459:
        if (!v23) {
          v14 = (__int16 *)v21;
        }
        unsigned int v134 = *a1;
        *a1 &= 0xE0FFFFFF;
        LODWORD(v11) = 50;
        switch((v134 >> 17) & 0x7F)
        {
          case 9u:
            int v135 = v22 | 0x20;
            switch(v135)
            {
              case 'c':
                __int16 v136 = 20;
                break;
              case 'u':
                __int16 v136 = 21;
                break;
              case 'k':
                __int16 v136 = 19;
                break;
              default:
                __int16 v136 = 22;
                break;
            }

            unsigned int v154 = v134 & 0xE001FFFF | ((v136 & 0xFFF) << 17);
            goto LABEL_601;
          case 0xAu:
            if ((v22 - 58) <= 0xF5u)
            {
              v192 = v12;
              a1[1] = v10;
              unsigned int v185 = a1[5];
              char v186 = 25;
            }

            else
            {
              if ((v134 & 0x200) == 0)
              {
                *((void *)a1 + 1) = (char)v22 - 48LL;
                unsigned int v152 = v134 & 0xE007FFFF;
                int v153 = 1442304;
LABEL_575:
                unsigned int v154 = v152 | v153;
LABEL_601:
                *a1 = v154;
                LODWORD(v11) = 50;
                goto LABEL_623;
              }

              v192 = v12;
              a1[1] = v10;
              unsigned int v185 = a1[5];
              char v186 = 26;
            }

            unsigned int v176 = v185 & 0x80FFFFFF | ((v186 & 0x7F) << 24);
            a1[5] = v176;
            LOBYTE(v11) = 50;
            break;
          case 0xCu:
          case 0xFu:
          case 0x12u:
            goto LABEL_623;
          case 0xDu:
            unsigned int v152 = v134 & 0xE001FFFF;
            if ((v22 | 0x20) == 0x63)
            {
              unsigned int v154 = v152 | 0x200000;
              goto LABEL_601;
            }

            int v153 = 2228224;
            goto LABEL_575;
          case 0xEu:
            unsigned int v154 = v134 & 0xE001FF7F | 0x80;
            goto LABEL_601;
          default:
            unsigned int v154 = v134 & 0xE001FFFF;
            goto LABEL_601;
        }

        goto LABEL_670;
      case 47:
        if (v22 == 10) {
          goto LABEL_252;
        }
        v192 = v12;
        a1[1] = v10;
        unsigned int v176 = a1[5] & 0x80FFFFFF | 0x1E000000;
        a1[5] = v176;
        LOBYTE(v11) = 47;
        goto LABEL_670;
      case 48:
        LODWORD(v11) = 46;
        if (v22 == 9 || v22 == 32) {
          goto LABEL_623;
        }
        int v41 = *a1;
        int v42 = 8;
        switch((*a1 >> 17) & 0x7F)
        {
          case 0x17u:
            int v42 = 4;
            goto LABEL_163;
          case 0x18u:
            goto LABEL_163;
          case 0x19u:
            int v42 = 16;
            goto LABEL_163;
          case 0x1Au:
            int v42 = 32;
LABEL_163:
            v41 |= v42;
            *a1 = v41;
            break;
          default:
            break;
        }

        if (v14) {
          a2 = (unsigned __int8 *)v14;
        }
        else {
          a2 = v21;
        }
        if ((*((_BYTE *)a1 + 23) & 0x7F) != 0) {
          sub_1001EB3B4();
        }
        v23 = 0LL;
        LODWORD(v11) = 44;
        if (!a2) {
          goto LABEL_24;
        }
        v23 = 0LL;
        LODWORD(v11) = 44;
        if (!*((void *)v7 + 4)) {
          goto LABEL_24;
        }
        *a1 = v41 & 0xFFFE03FF | 0xB000;
        int v54 = (*((uint64_t (**)(unsigned int *, unsigned __int8 *, int64_t))v7 + 4))(a1, a2, v21 - a2);
        unsigned int v47 = a1[5];
        if (v54)
        {
          a1[1] = v10;
          unsigned int v47 = v47 & 0x80FFFFFF | 0x4000000;
          a1[5] = v47;
        }

        v23 = 0LL;
        LODWORD(v11) = (*a1 >> 10) & 0x7F;
        goto LABEL_173;
      case 49:
        goto LABEL_459;
      case 50:
        int v24 = *a1;
        unint64_t v25 = (*a1 >> 17) & 0x7F;
        if (v21 == v20)
        {
          LODWORD(v11) = 50;
          uint64_t v63 = -1LL;
          LODWORD(v21) = (_DWORD)v20;
LABEL_207:
          v27 = v20;
          goto LABEL_229;
        }

        unint64_t v26 = dword_1002A8708;
        v27 = v21;
        while (2)
        {
          unint64_t v28 = v25;
          uint64_t v29 = *v27;
          if ((_DWORD)v29 != 10)
          {
            if ((_DWORD)v29 != 13)
            {
              if ((v9 & 0x80000000) == 0 && (_DWORD)v29 != 9 && ((char)v29 < 0x20 || (_DWORD)v29 == 127))
              {
LABEL_667:
                v192 = v12;
                a1[1] = v10;
                unsigned int v176 = a1[5] & 0x80FFFFFF | 0x18000000;
                a1[5] = v176;
                goto LABEL_668;
              }

              unint64_t v25 = 0LL;
              uint64_t v30 = v29 | 0x20;
              switch((int)v28)
              {
                case 0:
                  unint64_t v31 = v20 - v27;
                  if (v20 - v27 >= v26) {
                    unint64_t v31 = v26;
                  }
                  if (!v31) {
                    goto LABEL_99;
                  }
                  v32 = &v27[v31];
                  while (1)
                  {
                    unsigned int v33 = *v27;
                    if (v33 == 13 || v33 == 10) {
                      break;
                    }
                    if ((v9 & 0x80000000) == 0 && v33 != 9 && (v33 < 0x20 || v33 == 127)) {
                      goto LABEL_667;
                    }
                    ++v27;
                    if (!--v31)
                    {
                      v27 = v32;
                      goto LABEL_99;
                    }
                  }

                  --v27;
LABEL_99:
                  unint64_t v25 = 0LL;
                  v27 -= v27 == v20;
                  goto LABEL_109;
                case 9:
                case 13:
                  sub_1001EB33C();
                case 10:
                  unint64_t v25 = 10LL;
                  goto LABEL_109;
                case 11:
LABEL_62:
                  if ((v29 - 58) <= 0xF5u || (unint64_t v35 = *((void *)a1 + 1), v35 >= 0x1999999999999999LL))
                  {
                    v192 = v12;
                    unsigned int v176 = a1[5] & 0x80FFFFFF | 0x19000000;
                    a1[5] = v176;
                    unsigned int v174 = v24 & 0xFF01FFFF | 0x160000;
LABEL_727:
                    *a1 = v174;
                    a1[1] = v10;
LABEL_668:
                    LOBYTE(v11) = 50;
LABEL_669:
                    v21 = v27;
LABEL_670:
                    if ((v176 & 0x7F000000) == 0) {
                      a1[5] = v176 & 0x80FFFFFF | 0x20000000;
                    }
                    *a1 = *a1 & 0xFFFE03FF | ((v11 & 0x7F) << 10);
                    a1[1] = v10;
                    return v21 - (unsigned __int8 *)v192;
                  }

                  *((void *)a1 + 1) = (char)v29 + 10 * v35 - 48;
                  unint64_t v25 = 11LL;
LABEL_109:
                  if (++v27 == v20)
                  {
                    LODWORD(v11) = 50;
                    uint64_t v63 = -1LL;
                    goto LABEL_207;
                  }

                  break;
                case 12:
                  if ((_DWORD)v29 != 32)
                  {
                    v192 = v12;
                    unsigned int v176 = a1[5] & 0x80FFFFFF | 0x19000000;
                    a1[5] = v176;
                    unsigned int v174 = v24 & 0xFF01FFFF | 0x180000;
                    goto LABEL_727;
                  }

LABEL_66:
                  unint64_t v25 = 12LL;
                  goto LABEL_109;
                case 15:
                  if ((_DWORD)v30 == 32) {
                    goto LABEL_74;
                  }
                  if ((_DWORD)v30 == 99)
                  {
                    unint64_t v25 = 16LL;
                  }

                  else
                  {
                    unint64_t v25 = byte_1001F311A[v30];
                    if (byte_1001F311A[v30]) {
LABEL_101:
                    }
                      unint64_t v25 = 17LL;
                  }

                  goto LABEL_109;
                case 16:
                  unint64_t v25 = (v24 + 0x1000000) & 0x1F000000;
                  int v24 = v25 | v24 & 0xE0FFFFFF;
                  *a1 = v24;
                  int v36 = aChunked[v25 >> 24];
                  unsigned int v37 = 17;
                  BOOL v38 = (_DWORD)v25 == 100663296;
                  LODWORD(v25) = 16;
                  int v39 = 23;
                  goto LABEL_85;
                case 17:
                  v24 &= 0xE0FFFFFF;
                  *a1 = v24;
LABEL_74:
                  unint64_t v25 = 15LL;
                  goto LABEL_109;
                case 18:
                  if ((int)v30 > 106)
                  {
                    if ((_DWORD)v30 == 107)
                    {
                      unint64_t v25 = 19LL;
                      goto LABEL_109;
                    }

                    if ((_DWORD)v30 == 117)
                    {
                      unint64_t v25 = 21LL;
                      goto LABEL_109;
                    }
                  }

                  else
                  {
                    if ((_DWORD)v30 == 32) {
                      goto LABEL_105;
                    }
                    if ((_DWORD)v30 == 99)
                    {
                      unint64_t v25 = 20LL;
                      goto LABEL_109;
                    }
                  }

                  unint64_t v25 = byte_1001F311A[v30];
                  if (byte_1001F311A[v30]) {
                    goto LABEL_108;
                  }
                  goto LABEL_109;
                case 19:
                  unint64_t v25 = (v24 + 0x1000000) & 0x1F000000;
                  int v24 = v25 | v24 & 0xE0FFFFFF;
                  *a1 = v24;
                  int v36 = aKeepAlive[v25 >> 24];
                  unsigned int v37 = 22;
                  BOOL v38 = (_DWORD)v25 == 150994944;
                  LODWORD(v25) = 19;
                  int v39 = 24;
                  goto LABEL_85;
                case 20:
                  unint64_t v25 = (v24 + 0x1000000) & 0x1F000000;
                  int v24 = v25 | v24 & 0xE0FFFFFF;
                  *a1 = v24;
                  int v36 = aClose_1[v25 >> 24];
                  unsigned int v37 = 22;
                  BOOL v38 = (_DWORD)v25 == 0x4000000;
                  LODWORD(v25) = 20;
                  int v39 = 25;
                  goto LABEL_85;
                case 21:
                  unint64_t v25 = (v24 + 0x1000000) & 0x1F000000;
                  int v24 = v25 | v24 & 0xE0FFFFFF;
                  *a1 = v24;
                  int v36 = aUpgrade[v25 >> 24];
                  unsigned int v37 = 22;
                  BOOL v38 = (_DWORD)v25 == 100663296;
                  LODWORD(v25) = 21;
                  int v39 = 26;
LABEL_85:
                  if (v38) {
                    LODWORD(v25) = v39;
                  }
                  if ((_DWORD)v30 == v36) {
                    unint64_t v25 = v25;
                  }
                  else {
                    unint64_t v25 = v37;
                  }
                  goto LABEL_109;
                case 22:
                  if ((_DWORD)v29 != 44) {
                    goto LABEL_108;
                  }
                  goto LABEL_104;
                case 23:
                  else {
                    unint64_t v25 = 17LL;
                  }
                  goto LABEL_109;
                case 24:
                case 25:
                case 26:
                  if ((_DWORD)v29 == 32)
                  {
                    unint64_t v25 = v28;
                  }

                  else if ((_DWORD)v29 == 44)
                  {
                    switch((_DWORD)v28)
                    {
                      case 0x1A:
                        v24 |= 0x20u;
                        break;
                      case 0x19:
                        v24 |= 0x10u;
                        break;
                      case 0x18:
                        v24 |= 8u;
                        break;
                    }

LABEL_104:
                    v24 &= 0xE0FFFFFF;
                    *a1 = v24;
LABEL_105:
                    unint64_t v25 = 18LL;
                  }

                  else
                  {
LABEL_108:
                    unint64_t v25 = 22LL;
                  }

                  goto LABEL_109;
                default:
                  goto LABEL_109;
              }

              continue;
            }

            int v24 = v24 & 0xFF01FFFF | ((v25 & 0x7F) << 17);
            *a1 = v24;
            if ((*((_BYTE *)a1 + 23) & 0x7F) != 0) {
              sub_1001EB364();
            }
            if (!v14)
            {
              uint64_t v63 = 0LL;
              LODWORD(v11) = 52;
              goto LABEL_228;
            }

            uint64_t v63 = *((void *)v7 + 4);
            LODWORD(v11) = 52;
            if (!v63)
            {
              v14 = 0LL;
              a3 = &jpt_100003390;
              goto LABEL_229;
            }

            *a1 = v24 & 0xFFFE03FF | 0xD000;
            int v65 = (*((uint64_t (**)(unsigned int *, __int16 *, int64_t))v7 + 4))( a1,  v14,  v27 - (unsigned __int8 *)v14);
            unsigned int v66 = a1[5];
            if (v65)
            {
              a1[1] = v10;
              unsigned int v66 = v66 & 0x80FFFFFF | 0x4000000;
              a1[5] = v66;
            }

            a3 = &jpt_100003390;
            if ((v66 & 0x7F000000) == 0)
            {
              uint64_t v63 = 0LL;
              v14 = 0LL;
              int v24 = *a1;
              LODWORD(v11) = (*a1 >> 10) & 0x7F;
LABEL_228:
              LOBYTE(v25) = v28;
LABEL_229:
              int v67 = (int)v21;
              *a1 = v24 & 0xFF01FFFF | ((v25 & 0x7F) << 17);
              v21 = &v27[v63];
              v10 += (_DWORD)v27 + v63 - v67;
              if (v10 <= dword_1002A8708) {
                goto LABEL_623;
              }
              v192 = v12;
              a1[1] = v10;
LABEL_779:
              unsigned int v176 = a1[5] & 0x80FFFFFF | 0xC000000;
LABEL_731:
              a1[5] = v176;
              goto LABEL_670;
            }

LABEL_792:
            v181 = (unsigned __int8 *)(v27 - (unsigned __int8 *)v12);
            return (uint64_t)(v181 + 1);
          }

          break;
        }

        v10 += (_DWORD)v27 - (_DWORD)v21;
        if (v10 > v26)
        {
          v192 = v12;
          a1[1] = v10;
          unsigned int v176 = a1[5] & 0x80FFFFFF | 0xC000000;
          a1[5] = v176;
          LOBYTE(v11) = 52;
          goto LABEL_669;
        }

        unsigned int v51 = v24 & 0xFF01FFFF | ((v25 & 0x7F) << 17);
        *a1 = v51;
        if ((*((_BYTE *)a1 + 23) & 0x7F) != 0) {
          sub_1001EB38C();
        }
        v23 = 0LL;
        unsigned __int8 v22 = 10;
        LODWORD(v11) = 52;
        v21 = v27;
        if (v14)
        {
          v23 = 0LL;
          unsigned __int8 v22 = 10;
          LODWORD(v11) = 52;
          v21 = v27;
          if (*((void *)v7 + 4))
          {
            *a1 = v51 & 0xFFFE03FF | 0xD000;
            int v52 = (*((uint64_t (**)(unsigned int *, __int16 *, int64_t))v7 + 4))( a1,  v14,  v27 - (unsigned __int8 *)v14);
            unsigned int v53 = a1[5];
            if (v52)
            {
              a1[1] = v10;
              unsigned int v53 = v53 & 0x80FFFFFF | 0x4000000;
              a1[5] = v53;
            }

            v23 = 0LL;
            LODWORD(v11) = (*a1 >> 10) & 0x7F;
            unsigned __int8 v22 = 10;
            v21 = v27;
            a3 = &jpt_100003390;
            if ((v53 & 0x7F000000) != 0) {
              return v27 - (unsigned __int8 *)v12;
            }
          }
        }

        goto LABEL_24;
      case 51:
        if (v22 != 32 && v22 != 9)
        {
          int v50 = *a1;
          LODWORD(v11) = 44;
          switch((*a1 >> 17) & 0x7F)
          {
            case 0x17u:
              unsigned int v62 = v50 | 4;
              goto LABEL_202;
            case 0x18u:
              unsigned int v62 = v50 | 8;
              goto LABEL_202;
            case 0x19u:
              unsigned int v62 = v50 | 0x10;
              goto LABEL_202;
            case 0x1Au:
              unsigned int v62 = v50 | 0x20;
LABEL_202:
              LODWORD(v11) = 44;
              goto LABEL_203;
            default:
              goto LABEL_24;
          }
        }

        LODWORD(v11) = 49;
        if ((*a1 & 0xFE0000) != 0x160000) {
          goto LABEL_24;
        }
        unsigned int v62 = *a1 & 0xFF01FFFF | 0x180000;
        LODWORD(v11) = 49;
        goto LABEL_203;
      case 52:
        if (v22 == 10)
        {
          LODWORD(v11) = 51;
          goto LABEL_623;
        }

        v192 = v12;
        a1[1] = v10;
        unsigned int v176 = a1[5] & 0x80FFFFFF | 0x17000000;
        a1[5] = v176;
        LOBYTE(v11) = 52;
        goto LABEL_670;
      case 53:
        if (v10 != 1) {
          sub_1001EB544();
        }
        if ((*(_BYTE *)a1 & 4) == 0) {
          sub_1001EB51C();
        }
        uint64_t v123 = byte_1001F321A[v22];
        if (v123 == -1)
        {
          v192 = v12;
          unsigned int v10 = 1;
          a1[1] = 1;
          unsigned int v176 = a1[5] & 0x80FFFFFF | 0x1B000000;
          a1[5] = v176;
          LOBYTE(v11) = 53;
          goto LABEL_670;
        }

        *((void *)a1 + 1) = v123;
        unsigned int v10 = 1;
        goto LABEL_469;
      case 54:
        if ((*(_BYTE *)a1 & 4) == 0) {
          sub_1001EB56C();
        }
        if (v22 == 13)
        {
          LODWORD(v11) = 56;
          goto LABEL_623;
        }

        uint64_t v137 = byte_1001F321A[v22];
        if (v137 == -1)
        {
          LODWORD(v11) = 55;
          if (v22 == 32 || v22 == 59) {
            goto LABEL_623;
          }
          v192 = v12;
          int v187 = 452984832;
        }

        else
        {
          unint64_t v138 = *((void *)a1 + 1);
          if (v138 <= 0xFFFFFFFFFFFFFFELL)
          {
            *((void *)a1 + 1) = v137 + 16 * v138;
LABEL_469:
            LODWORD(v11) = 54;
            goto LABEL_623;
          }

          v192 = v12;
          int v187 = 419430400;
        }

        a1[1] = v10;
        unsigned int v176 = a1[5] & 0x80FFFFFF | v187;
        a1[5] = v176;
        LOBYTE(v11) = 54;
        goto LABEL_670;
      case 55:
        if ((*(_BYTE *)a1 & 4) == 0) {
          sub_1001EB594();
        }
        if (v22 == 13) {
          LODWORD(v11) = 56;
        }
        else {
          LODWORD(v11) = 55;
        }
        goto LABEL_623;
      case 56:
        int v73 = *a1;
        if ((*a1 & 4) == 0) {
          sub_1001EB5BC();
        }
        if (v22 != 10)
        {
          v192 = v12;
          a1[1] = v10;
          unsigned int v176 = a1[5] & 0x80FFFFFF | 0x1E000000;
          a1[5] = v176;
          LOBYTE(v11) = 56;
          goto LABEL_670;
        }

        a1[1] = 0;
        if (*((void *)a1 + 1))
        {
          LODWORD(v11) = 59;
        }

        else
        {
          v73 |= 0x40u;
          *a1 = v73;
          LODWORD(v11) = 44;
        }

        if ((*((_BYTE *)a1 + 23) & 0x7F) != 0) {
          sub_1001EB5E4();
        }
        if (!*((void *)v7 + 8)) {
          goto LABEL_648;
        }
        *a1 = v73 & 0xFFFE03FF | ((_DWORD)v11 << 10);
        int v149 = (*((uint64_t (**)(unsigned int *, unsigned __int8 *, __int16 *))v7 + 8))(a1, a2, a3);
        unsigned int v120 = a1[5];
        if (!v149) {
          goto LABEL_515;
        }
        a1[1] = 0;
        char v121 = 9;
LABEL_653:
        unsigned int v120 = v120 & 0x80FFFFFF | ((v121 & 0x7F) << 24);
        goto LABEL_654;
      case 57:
        if (v22 != 10)
        {
          v192 = v12;
          a1[1] = v10;
          unsigned int v176 = a1[5] & 0x80FFFFFF | 0x1E000000;
LABEL_720:
          a1[5] = v176;
          LOBYTE(v11) = 57;
          goto LABEL_670;
        }

        int v48 = *a1;
        if ((*a1 & 0x40) != 0)
        {
          if ((*((_BYTE *)a1 + 23) & 0x7F) != 0) {
            sub_1001EB3DC();
          }
          unsigned __int8 v22 = 10;
          LODWORD(v11) = 64;
          if (*((void *)v7 + 9))
          {
            *a1 = v48 & 0xFFFE03FF | 0x10000;
            int v49 = (*((uint64_t (**)(unsigned int *))v7 + 9))(a1);
            unsigned int v47 = a1[5];
            if (v49)
            {
              a1[1] = v10;
              unsigned int v47 = v47 & 0x80FFFFFF | 0xA000000;
              a1[5] = v47;
            }

            LODWORD(v11) = (*a1 >> 10) & 0x7F;
            unsigned __int8 v22 = 10;
LABEL_151:
            v23 = v14;
LABEL_173:
            a3 = &jpt_100003390;
            if ((v47 & 0x7F000000) != 0) {
              return v21 - (unsigned __int8 *)v12;
            }
          }
        }

        else
        {
          if ((~v48 & 0x20000200) == 0)
          {
            if ((v48 & 4) != 0)
            {
              if ((v9 & 0x40000000) == 0)
              {
LABEL_732:
                v192 = v12;
                a1[1] = v10;
                unsigned int v176 = a1[5] & 0x80FFFFFF | 0x1A000000;
                goto LABEL_720;
              }
            }

            else if ((v9 & 0x80000000) == 0)
            {
              goto LABEL_732;
            }
          }

          if ((~v48 & 0xA0) != 0)
          {
            unsigned int v58 = a1[5];
            int v57 = ((v58 & 0xFF0000) == 327680) << 31;
            int v56 = v58 & 0x7FFFFFFF;
          }

          else
          {
            else {
              int v56 = 0;
            }
            int v57 = a1[5] & 0x7FFFFFFF;
          }

          a1[5] = v57 | v56;
          v59 = (uint64_t (*)(unsigned int *))*((void *)v7 + 5);
          if (v59)
          {
            int v60 = v59(a1);
            a3 = &jpt_100003390;
            if (v60)
            {
              if (v60 != 1)
              {
                if (v60 != 2)
                {
                  a1[5] = a1[5] & 0x80FFFFFF | 0x5000000;
                  unsigned int v175 = *a1 & 0xFFFE03FF | 0xE800;
LABEL_728:
                  *a1 = v175;
                  a1[1] = v10;
                  return v21 - (unsigned __int8 *)v12;
                }

                a1[5] |= 0x80000000;
              }

              *a1 |= 0x100u;
            }
          }

          unsigned __int8 v22 = 10;
          LODWORD(v11) = 58;
          v23 = v14;
          if ((*((_BYTE *)a1 + 23) & 0x7F) != 0)
          {
            unsigned int v175 = *a1 & 0xFFFE03FF | 0xE800;
            goto LABEL_728;
          }
        }

        goto LABEL_24;
      case 58:
        if (v22 != 10)
        {
          v192 = v12;
          a1[1] = v10;
          unsigned int v176 = a1[5] & 0x80FFFFFF | 0x1E000000;
          a1[5] = v176;
          LOBYTE(v11) = 58;
          goto LABEL_670;
        }

        a1[1] = 0;
        int v124 = *a1;
        BOOL v125 = (*a1 & 4) != 0 || (unint64_t)(*((void *)a1 + 1) - 1LL) < 0xFFFFFFFFFFFFFFFELL;
        unsigned int v139 = a1[5];
        if ((v139 & 0x80000000) != 0)
        {
          if ((v139 & 0xFF0000) == 0x50000) {
            goto LABEL_753;
          }
          if ((v124 & 0x100) != 0) {
            BOOL v125 = 0;
          }
          if (!v125)
          {
LABEL_753:
            BOOL v177 = sub_100005F70((uint64_t)a1);
            if ((v124 & 3) != 0) {
              int v178 = 4;
            }
            else {
              int v178 = 18;
            }
            if (!v177) {
              int v178 = 1;
            }
            if ((v139 & 0x7F000000) != 0) {
              sub_1001EB47C();
            }
            if (*((void *)v7 + 7))
            {
              *a1 = v124 & 0xFFFE03FF | (v178 << 10);
              int v179 = (*((uint64_t (**)(unsigned int *))v7 + 7))(a1);
              unsigned int v180 = a1[5];
              if (v179)
              {
                a1[1] = 0;
                unsigned int v180 = v180 & 0x80FFFFFF | 0x7000000;
                a1[5] = v180;
              }

              if ((v180 & 0x7F000000) != 0) {
                goto LABEL_765;
              }
              int v124 = *a1;
              int v178 = (*a1 >> 10) & 0x7F;
            }

            *(void *)a1 = v124 & 0xFFFE03FF | ((v178 & 0x7F) << 10);
LABEL_765:
            v181 = (unsigned __int8 *)(v21 - (unsigned __int8 *)v12);
            return (uint64_t)(v181 + 1);
          }
        }

        else if ((v124 & 0x100) != 0)
        {
          BOOL v140 = sub_100005F70((uint64_t)a1);
          if ((v124 & 3) != 0) {
            int v141 = 4;
          }
          else {
            int v141 = 18;
          }
          if (v140) {
            LODWORD(v11) = v141;
          }
          else {
            LODWORD(v11) = 1;
          }
          if ((v139 & 0x7F000000) != 0) {
            sub_1001EB454();
          }
          goto LABEL_481;
        }

        if ((v124 & 4) != 0)
        {
          unsigned int v10 = 0;
          LODWORD(v11) = 53;
          goto LABEL_623;
        }

        if ((v124 & 0x20000000) != 0)
        {
          unsigned int v10 = 0;
          LODWORD(v11) = 63;
          if ((v124 & 3) != 0 || v9 < 0) {
            goto LABEL_623;
          }
          a1[5] = v139 & 0x80FFFFFF | 0x21000000;
          *(void *)a1 = v124 & 0xFFFE03FF | 0xE800;
          return v21 - (unsigned __int8 *)v12;
        }

        uint64_t v146 = *((void *)a1 + 1);
        if (v146 == -1)
        {
          if (sub_100005FB0((int *)a1))
          {
            unsigned int v10 = 0;
            LODWORD(v11) = 63;
            goto LABEL_241;
          }

          BOOL v161 = sub_100005F70((uint64_t)a1);
          if ((v124 & 3) != 0) {
            int v162 = 4;
          }
          else {
            int v162 = 18;
          }
          if (v161) {
            LODWORD(v11) = v162;
          }
          else {
            LODWORD(v11) = 1;
          }
          if ((v139 & 0x7F000000) != 0) {
            sub_1001EB42C();
          }
        }

        else
        {
          if (v146)
          {
            unsigned int v10 = 0;
            LODWORD(v11) = 62;
            goto LABEL_623;
          }

          BOOL v147 = sub_100005F70((uint64_t)a1);
          if ((v124 & 3) != 0) {
            int v148 = 4;
          }
          else {
            int v148 = 18;
          }
          if (v147) {
            LODWORD(v11) = v148;
          }
          else {
            LODWORD(v11) = 1;
          }
          if ((v139 & 0x7F000000) != 0) {
            sub_1001EB404();
          }
        }

LABEL_481:
        if (!*((void *)v7 + 7))
        {
LABEL_648:
          unsigned int v10 = 0;
          goto LABEL_241;
        }

        *a1 = v124 & 0xFFFE03FF | ((_DWORD)v11 << 10);
        int v142 = (*((uint64_t (**)(unsigned int *))v7 + 7))(a1);
        unsigned int v120 = a1[5];
        if (v142)
        {
          a1[1] = 0;
          unsigned int v120 = v120 & 0x80FFFFFF | 0x7000000;
LABEL_654:
          a1[5] = v120;
        }

LABEL_515:
        a3 = &jpt_100003390;
        if ((v120 & 0x7F000000) == 0)
        {
          unsigned int v10 = 0;
LABEL_622:
          LODWORD(v11) = (*a1 >> 10) & 0x7F;
          goto LABEL_623;
        }

        goto LABEL_765;
      case 59:
        unint64_t v114 = *((void *)a1 + 1);
        unint64_t v115 = v20 - v21;
        if (v114 >= v20 - v21) {
          int64_t v116 = v20 - v21;
        }
        else {
          int64_t v116 = *((void *)a1 + 1);
        }
        if ((*(_BYTE *)a1 & 4) == 0) {
          sub_1001EB60C();
        }
        v117 = v195;
        if (v114 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
          sub_1001EB634();
        }
        if (!v195) {
          v117 = v21;
        }
        v195 = v117;
        *((void *)a1 + 1) = v114 - v116;
        v21 = &v21[v116 - 1];
        if (v114 > v115) {
          LODWORD(v11) = 59;
        }
        else {
          LODWORD(v11) = 60;
        }
        goto LABEL_623;
      case 60:
        if ((*a1 & 4) == 0) {
          sub_1001EB65C();
        }
        if (*((void *)a1 + 1)) {
          sub_1001EB6AC();
        }
        if (v22 != 13)
        {
          v192 = v12;
          a1[1] = v10;
          unsigned int v176 = a1[5] & 0x80FFFFFF | 0x1E000000;
          a1[5] = v176;
          LOBYTE(v11) = 60;
          goto LABEL_670;
        }

        if ((*((_BYTE *)a1 + 23) & 0x7F) != 0) {
          sub_1001EB684();
        }
        a2 = v195;
        if (!v195)
        {
          v195 = 0LL;
          LODWORD(v11) = 61;
          goto LABEL_623;
        }

        LODWORD(v11) = 61;
        if (!*((void *)v7 + 6))
        {
          v195 = 0LL;
          goto LABEL_241;
        }

        *a1 = *a1 & 0xFFFE03FF | 0xF400;
        int v150 = (*((uint64_t (**)(unsigned int *, unsigned __int8 *, int64_t))v7 + 6))( a1,  v195,  v21 - v195);
        unsigned int v151 = a1[5];
        if (v150)
        {
          a1[1] = v10;
          unsigned int v151 = v151 & 0x80FFFFFF | 0x6000000;
          a1[5] = v151;
        }

        a3 = &jpt_100003390;
        if ((v151 & 0x7F000000) != 0) {
          goto LABEL_765;
        }
        v195 = 0LL;
        goto LABEL_622;
      case 61:
        int v118 = *a1;
        if ((*a1 & 4) == 0) {
          sub_1001EB6D4();
        }
        if (v22 != 10)
        {
          v192 = v12;
          a1[1] = v10;
          unsigned int v176 = a1[5] & 0x80FFFFFF | 0x1E000000;
          a1[5] = v176;
          LOBYTE(v11) = 61;
          goto LABEL_670;
        }

        a1[1] = 0;
        if ((*((_BYTE *)a1 + 23) & 0x7F) != 0) {
          sub_1001EB6FC();
        }
        LODWORD(v11) = 53;
        if (!*((void *)v7 + 9)) {
          goto LABEL_648;
        }
        *a1 = v118 & 0xFFFE03FF | 0xD400;
        int v119 = (*((uint64_t (**)(unsigned int *, unsigned __int8 *, __int16 *))v7 + 9))(a1, a2, a3);
        unsigned int v120 = a1[5];
        if (!v119) {
          goto LABEL_515;
        }
        a1[1] = 0;
        char v121 = 10;
        goto LABEL_653;
      case 62:
        unint64_t v43 = *((void *)a1 + 1);
        if (v43 - 1 >= 0xFFFFFFFFFFFFFFFELL) {
          sub_1001EB4CC();
        }
        unint64_t v44 = v20 - v21;
        if (v43 >= v20 - v21) {
          int64_t v45 = v20 - v21;
        }
        else {
          int64_t v45 = *((void *)a1 + 1);
        }
        if (v195) {
          a2 = v195;
        }
        else {
          a2 = v21;
        }
        v21 = &v21[v45 - 1];
        *((void *)a1 + 1) = v43 - v45;
        if (v43 > v44)
        {
          LODWORD(v11) = 62;
          v195 = a2;
          goto LABEL_623;
        }

        if ((*((_BYTE *)a1 + 23) & 0x7F) != 0) {
          sub_1001EB4A4();
        }
        v195 = 0LL;
        LODWORD(v11) = 64;
        v23 = v14;
        if (!a2) {
          goto LABEL_24;
        }
        v195 = 0LL;
        LODWORD(v11) = 64;
        v23 = v14;
        if (!*((void *)v7 + 6)) {
          goto LABEL_24;
        }
        *a1 = *a1 & 0xFFFE03FF | 0x10000;
        int v46 = (*((uint64_t (**)(unsigned int *))v7 + 6))(a1);
        unsigned int v47 = a1[5];
        if (v46)
        {
          a1[1] = v10;
          unsigned int v47 = v47 & 0x80FFFFFF | 0x6000000;
          a1[5] = v47;
        }

        v195 = 0LL;
        LODWORD(v11) = (*a1 >> 10) & 0x7F;
        goto LABEL_151;
      case 63:
        v74 = v195;
        if (!v195) {
          v74 = v21;
        }
        v195 = v74;
        LODWORD(v11) = 63;
        v21 = (unsigned __int8 *)v189;
        goto LABEL_623;
      case 64:
        if (sub_100005F70((uint64_t)a1))
        {
          if ((*(_BYTE *)a1 & 3) != 0) {
            LODWORD(v11) = 4;
          }
          else {
            LODWORD(v11) = 18;
          }
        }

        else
        {
          LODWORD(v11) = 1;
        }

        unsigned int v143 = a1[5];
        if ((v143 & 0x7F000000) != 0) {
          sub_1001EB4F4();
        }
        if (*((void *)v7 + 7))
        {
          *a1 = *a1 & 0xFFFE03FF | ((_DWORD)v11 << 10);
          int v144 = (*((uint64_t (**)(unsigned int *))v7 + 7))(a1);
          unsigned int v145 = a1[5];
          if (v144)
          {
            a1[1] = v10;
            unsigned int v145 = v145 & 0x80FFFFFF | 0x7000000;
            a1[5] = v145;
          }

          a3 = &jpt_100003390;
          if ((v145 & 0x7F000000) != 0) {
            goto LABEL_765;
          }
          LODWORD(v11) = (*a1 >> 10) & 0x7F;
          if ((v145 & 0x80000000) == 0) {
            goto LABEL_623;
          }
        }

        else
        {
          a3 = &jpt_100003390;
          if ((v143 & 0x80000000) == 0) {
            goto LABEL_623;
          }
        }

        *a1 = *a1 & 0xFFFE03FF | ((v11 & 0x7F) << 10);
        a1[1] = v10;
        goto LABEL_765;
      default:
        sub_1001EB0BC();
    }
  }
}

  ;
}

uint64_t sub_100005D3C(int a1, unsigned int a2)
{
  if (a2 > 0x20 || ((1LL << a2) & 0x100003600LL) == 0)
  {
    switch(a1)
    {
      case 20:
        uint64_t result = 27LL;
        return 21LL;
      case 21:
        return 22LL;
      case 22:
        return 23LL;
      case 23:
        return 24LL;
      case 24:
      case 25:
        switch(a2)
        {
          case '@':
            return 26LL;
          case '?':
            return 28LL;
          case '/':
            return 27LL;
        }

LABEL_23:
        uint64_t result = 25LL;
        if (a2 - 48 < 0xA
          || (a2 | 0x20u) - 97 < 0x1A
          || a2 - 33 <= 0x3E
          && ((1LL << (a2 - 33)) & 0x5400000016003FF9LL) != 0
          || a2 == 126)
        {
          return result;
        }

        return 1LL;
      case 26:
        return 1LL;
      case 27:
        unsigned int v5 = 27;
        int v6 = algn_1001F30FA[a2 >> 3] >> (a2 & 7);
        else {
          int v7 = 1;
        }
        else {
          unsigned int v8 = v7;
        }
        goto LABEL_48;
      case 28:
      case 29:
        unsigned int v3 = algn_1001F30FA[a2 >> 3];
        char v4 = a2 & 7;
        unsigned int v5 = 29;
        goto LABEL_36;
      case 30:
        unsigned int v3 = algn_1001F30FA[a2 >> 3];
        char v4 = a2 & 7;
        unsigned int v5 = 31;
LABEL_36:
        int v6 = v3 >> v4;
        else {
          int v9 = 1;
        }
        else {
          unsigned int v8 = v9;
        }
        goto LABEL_48;
      case 31:
        unsigned int v5 = 31;
        int v6 = algn_1001F30FA[a2 >> 3] >> (a2 & 7);
        else {
          unsigned int v8 = 1;
        }
LABEL_48:
        if ((v6 & 1) != 0) {
          return v5;
        }
        else {
          return v8;
        }
      default:
        return 1LL;
    }
  }

  return 1LL;
}

  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a1);
  return 0LL;
}

  sub_100034FD0();
  sub_100035144();
  uint64_t result = sub_100035124(v24, v25, v26, v27, v28, v29, v30);
  __break(1u);
  return result;
}

        __break(1u);
        goto LABEL_24;
      }

      swift_release(v12);
      unsigned int v8 = *(void *)(a1 + 16);
      v11 += 2;
      if (v9++ == v8) {
        goto LABEL_19;
      }
    }

    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  *unsigned int v37 = v35;
  v37[1] = v39;
  v37[2] = (uint64_t)v34;
  v37[3] = v32;
  sub_100019328();
}

  __break(1u);
}

    int v9 = (v15 - 1) & v15;
    os_log_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    BOOL v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    os_log_t v19 = v17[1];
    Hasher.init(_seed:)(v32);
    swift_bridgeObjectRetain();
    String.hash(into:)(v32, v18, v19);
    uint64_t result = Hasher._finalize()();
    v20 = -1LL << v8[32];
    v21 = result & ~v20;
    unsigned __int8 v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) == 0)
    {
      int v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        unint64_t v26 = v22 == v25;
        if (v22 == v25) {
          unsigned __int8 v22 = 0LL;
        }
        v24 |= v26;
        v27 = *(void *)(v11 + 8 * v22);
        if (v27 != -1)
        {
          v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    unint64_t v28 = (void *)(*((void *)v8 + 6) + 16 * v23);
    *unint64_t v28 = v18;
    v28[1] = v19;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1LL)) {
      goto LABEL_38;
    }
    if (!v5) {
      goto LABEL_35;
    }
  }

  v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_35;
  }
  unsigned int v15 = a1[v16];
  if (v15)
  {
    unsigned int v10 = v16;
    goto LABEL_23;
  }

  while (1)
  {
    unsigned int v10 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_35;
    }
    unsigned int v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }

    int v7 = (v12 - 1) & v12;
    v34 = v13;
  }

  v14 = v3 + 5;
  if (v3 + 5 >= v33) {
    return 1LL;
  }
  v12 = *(void *)(v32 + 8 * v14);
  if (v12)
  {
    os_log_t v13 = v3 + 5;
    goto LABEL_23;
  }

  while (1)
  {
    os_log_t v13 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v13 >= v33) {
      return 1LL;
    }
    v12 = *(void *)(v32 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_23;
    }
  }

    __break(1u);
LABEL_24:
    __break(1u);
    __break(1u);
    goto LABEL_26;
  }

  if (!v15)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  uint64_t result = sub_100035224(v2 + 72, (uint64_t)v33);
  if (*v5)
  {
    sub_100195E80();
    unint64_t v25 = sub_100195E8C();
    sub_100195E14(v25, v26, v27, v28, v29, v30, v31, v32, v33[0]);
    int v24 = &qword_1002AA4A0;
    goto LABEL_16;
  }

  __break(1u);
}

      int v9 = (v17 - 1) & v17;
    }
  }

  uint64_t result = swift_release(v3);
  void *v2 = v6;
  return result;
}

      v12 = (v18 - 1) & v18;
    }
  }

  uint64_t result = swift_release(v3);
  void *v2 = v6;
  return result;
}

      int v9 = (v17 - 1) & v17;
    }
  }

  uint64_t result = swift_release();
  void *v2 = v6;
  return result;
}

    unsigned int v10 = (v17 - 1) & v17;
  }

  v18 = v16 + 3;
  if (v18 >= v32)
  {
LABEL_35:
    uint64_t result = swift_release_n(v3, 2LL);
    v2 = v31;
    goto LABEL_37;
  }

  BOOL v17 = *(void *)(v8 + 8 * v18);
  if (v17)
  {
    os_log_t v13 = v18;
    goto LABEL_23;
  }

  while (1)
  {
    os_log_t v13 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_35;
    }
    BOOL v17 = *(void *)(v8 + 8 * v13);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }

    uint64_t v11 = (v17 - 1) & v17;
  }

  v18 = v16 + 3;
  if (v18 >= v12)
  {
LABEL_35:
    uint64_t result = swift_release(v3);
    v2 = v28;
    goto LABEL_37;
  }

  BOOL v17 = *(void *)(v8 + 8 * v18);
  if (v17)
  {
    int v7 = v18;
    goto LABEL_23;
  }

  while (1)
  {
    int v7 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_35;
    }
    BOOL v17 = *(void *)(v8 + 8 * v7);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }

    unsigned int v10 = (v17 - 1) & v17;
  }

  v18 = v16 + 3;
  if (v18 >= v31)
  {
LABEL_41:
    uint64_t result = swift_release_n(v3, 2LL);
    v2 = v30;
    goto LABEL_43;
  }

  BOOL v17 = *(void *)(v8 + 8 * v18);
  if (v17)
  {
    os_log_t v13 = v18;
    goto LABEL_23;
  }

  while (1)
  {
    os_log_t v13 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v13 >= v31) {
      goto LABEL_41;
    }
    BOOL v17 = *(void *)(v8 + 8 * v13);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }

    aBlock = 0u;
    unsigned int v128 = 0u;
    unint64_t v31 = sub_1001B976C();
    sub_1001B9888(v31, 0x6D6F7270u);
    aBlock = 0u;
    unsigned int v128 = 0u;
    v32 = sub_1001B976C();
    sub_1001B9888(v32, 0x72746E69u);
    sub_1001B9614(0xD000000000000017LL, v121, &aBlock);
    if (*((void *)&v128 + 1))
    {
      if ((sub_10003556C( (uint64_t)&v125,  (uint64_t)&aBlock,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String) & 1) != 0)
      {
        unsigned int v33 = v125._countAndFlagsBits;
        v34 = v125._object;
        unint64_t v35 = sub_1000175B0(&qword_1002AA308);
        int v36 = sub_100019310(v35, 72LL);
        *(_OWORD *)(v36 + 16) = v113;
        *(void *)(v36 + 32) = v33;
        *(void *)(v36 + 40) = v34;
        uint64_t v11 = (void *)v117;
        *(void *)(v36 + 48) = 0LL;
        *(void *)(v36 + 56) = 0LL;
        *(_BYTE *)(v36 + 64) = 4;
        *((void *)&v128 + 1) = sub_1000175B0((uint64_t *)&unk_1002B9390);
        *(void *)&aBlock = v36;
        unsigned int v37 = sub_1001B9A6C();
LABEL_26:
        sub_1001B1C84(v37, v38, v39);
        goto LABEL_35;
      }
    }

    else
    {
      sub_1001B93F0();
    }

    sub_1001B9614(0x6E65725F6F747561LL, 0xEB00000000737765LL, &aBlock);
    if (!*((void *)&v128 + 1))
    {
LABEL_34:
      sub_1001B93F0();
      goto LABEL_35;
    }

    int v48 = sub_1001B9838( v40,  v41,  v42,  v43,  v44,  v45,  v46,  v47,  v107,  v108,  (uint64_t)v109,  (uint64_t)v110,  (uint64_t)v111,  v112,  v113,  *((uint64_t *)&v113 + 1),  (uint64_t)v114,  (uint64_t)v115,  (uint64_t)v116,  v117,  v118,  v119,  v120,  v121,  (uint64_t)v122,  v123,  v124,  v125._countAndFlagsBits);
    if ((sub_10003556C((uint64_t)v48, v49, v50, (uint64_t)&type metadata for Int) & 1) != 0
      && v125._countAndFlagsBits >= 1)
    {
      sub_1001B9510();
      if (!*((void *)&v128 + 1)) {
        goto LABEL_34;
      }
      v59 = sub_1001B9838( v51,  v52,  v53,  v54,  v55,  v56,  v57,  v58,  v107,  v108,  (uint64_t)v109,  (uint64_t)v110,  (uint64_t)v111,  v112,  v113,  *((uint64_t *)&v113 + 1),  (uint64_t)v114,  (uint64_t)v115,  (uint64_t)v116,  v117,  v118,  v119,  v120,  v121,  (uint64_t)v122,  v123,  v124,  v125._countAndFlagsBits);
      if ((sub_10003556C((uint64_t)v59, v60, v61, (uint64_t)&type metadata for String) & 1) != 0)
      {
        unsigned int v62 = v125._countAndFlagsBits;
        uint64_t v63 = v125._object;
        *((void *)&v128 + 1) = &unk_10027FB38;
        unsigned int v64 = sub_100019310((uint64_t)&unk_100290F60, 49LL);
        *(void *)&aBlock = v64;
        *(void *)(v64 + 16) = v62;
        *(void *)(v64 + 24) = v63;
        *(void *)(v64 + 32) = 0LL;
        *(void *)(v64 + 40) = 0LL;
        *(_BYTE *)(v64 + 48) = 4;
        unsigned int v37 = sub_1001B9A6C();
        int v39 = v108;
        goto LABEL_26;
      }
    }

BOOL sub_100005F70(uint64_t a1)
{
  if (*(_WORD *)(a1 + 16) && *(_WORD *)(a1 + 18))
  {
    if ((*(_BYTE *)a1 & 0x10) != 0) {
      return 0LL;
    }
  }

  else if ((*(_BYTE *)a1 & 8) == 0)
  {
    return 0LL;
  }

  return !sub_100005FB0((int *)a1);
}

BOOL sub_100005FB0(int *a1)
{
  int v1 = *a1;
  if ((*a1 & 3) == 0) {
    return 0LL;
  }
  BOOL result = 0LL;
  if ((v1 & 0x100) == 0)
  {
    int v4 = *((unsigned __int16 *)a1 + 10);
    if (v4 != 304 && v4 != 204 && (v4 - 100) >= 0x64)
    {
      BOOL result = (v1 & 0x20000004) == 0x20000000;
      if ((v1 & 0x20000004) != 0x20000000 && (v1 & 4) == 0) {
        return *((void *)a1 + 1) == -1LL;
      }
    }
  }

  return result;
}

const char *sub_10000601C(unsigned int a1)
{
  if (a1 > 0x21) {
    return "<unknown>";
  }
  else {
    return off_10026EF40[a1];
  }
}

const char *sub_100006040(int a1)
{
  if (a1 <= 399)
  {
    if (a1 > 199)
    {
      switch(a1)
      {
        case 200:
          BOOL result = "OK";
          break;
        case 201:
          BOOL result = "Created";
          break;
        case 202:
          BOOL result = "Accepted";
          break;
        case 203:
          BOOL result = "Non-Authoritative Information";
          break;
        case 204:
          BOOL result = "No Content";
          break;
        case 205:
          BOOL result = "Reset Content";
          break;
        case 206:
          BOOL result = "Partial Content";
          break;
        case 207:
          BOOL result = "Multi-Status";
          break;
        case 208:
          BOOL result = "Already Reported";
          break;
        default:
          switch(a1)
          {
            case 300:
              BOOL result = "Multiple Choices";
              break;
            case 301:
              BOOL result = "Moved Permanently";
              break;
            case 302:
              BOOL result = "Found";
              break;
            case 303:
              BOOL result = "See Other";
              break;
            case 304:
              BOOL result = "Not Modified";
              break;
            case 305:
              BOOL result = "Use Proxy";
              break;
            case 306:
              return "<unknown>";
            case 307:
              BOOL result = "Temporary Redirect";
              break;
            case 308:
              BOOL result = "Permanent Redirect";
              break;
            default:
              if (a1 != 226) {
                return "<unknown>";
              }
              BOOL result = "IM Used";
              break;
          }

          break;
      }
    }

    else
    {
      switch(a1)
      {
        case 'd':
          return "Continue";
        case 'e':
          return "Switching Protocols";
        case 'f':
          return "Processing";
        default:
          return "<unknown>";
      }
    }
  }

  else
  {
    switch(a1)
    {
      case 400:
        BOOL result = "Bad Request";
        break;
      case 401:
        BOOL result = "Unauthorized";
        break;
      case 402:
        BOOL result = "Payment Required";
        break;
      case 403:
        BOOL result = "Forbidden";
        break;
      case 404:
        BOOL result = "Not Found";
        break;
      case 405:
        BOOL result = "Method Not Allowed";
        break;
      case 406:
        BOOL result = "Not Acceptable";
        break;
      case 407:
        BOOL result = "Proxy Authentication Required";
        break;
      case 408:
        BOOL result = "Request Timeout";
        break;
      case 409:
        BOOL result = "Conflict";
        break;
      case 410:
        BOOL result = "Gone";
        break;
      case 411:
        BOOL result = "Length Required";
        break;
      case 412:
        BOOL result = "Precondition Failed";
        break;
      case 413:
        BOOL result = "Payload Too Large";
        break;
      case 414:
        BOOL result = "URI Too Long";
        break;
      case 415:
        BOOL result = "Unsupported Media Type";
        break;
      case 416:
        BOOL result = "Range Not Satisfiable";
        break;
      case 417:
        BOOL result = "Expectation Failed";
        break;
      case 418:
      case 419:
      case 420:
      case 425:
      case 427:
      case 430:
      case 432:
      case 433:
      case 434:
      case 435:
      case 436:
      case 437:
      case 438:
      case 439:
      case 440:
      case 441:
      case 442:
      case 443:
      case 444:
      case 445:
      case 446:
      case 447:
      case 448:
      case 449:
      case 450:
        return "<unknown>";
      case 421:
        BOOL result = "Misdirected Request";
        break;
      case 422:
        BOOL result = "Unprocessable Entity";
        break;
      case 423:
        BOOL result = "Locked";
        break;
      case 424:
        BOOL result = "Failed Dependency";
        break;
      case 426:
        BOOL result = "Upgrade Required";
        break;
      case 428:
        BOOL result = "Precondition Required";
        break;
      case 429:
        BOOL result = "Too Many Requests";
        break;
      case 431:
        BOOL result = "Request Header Fields Too Large";
        break;
      case 451:
        BOOL result = "Unavailable For Legal Reasons";
        break;
      default:
        switch(a1)
        {
          case 500:
            BOOL result = "Internal Server Error";
            break;
          case 501:
            BOOL result = "Not Implemented";
            break;
          case 502:
            BOOL result = "Bad Gateway";
            break;
          case 503:
            BOOL result = "Service Unavailable";
            break;
          case 504:
            BOOL result = "Gateway Timeout";
            break;
          case 505:
            BOOL result = "HTTP Version Not Supported";
            break;
          case 506:
            BOOL result = "Variant Also Negotiates";
            break;
          case 507:
            BOOL result = "Insufficient Storage";
            break;
          case 508:
            BOOL result = "Loop Detected";
            break;
          case 510:
            BOOL result = "Not Extended";
            break;
          case 511:
            BOOL result = "Network Authentication Required";
            break;
          default:
            return "<unknown>";
        }

        break;
    }
  }

  return result;
}

uint64_t sub_1000063D0(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 24);
  *(_OWORD *)BOOL result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(void *)(result + 24) = v2;
  if (a2 == 1) {
    int v3 = 4096;
  }
  else {
    int v3 = 2048;
  }
  if (!a2) {
    int v3 = 18432;
  }
  *(_DWORD *)BOOL result = v3 & 0xFFFFFFFC | a2 & 3;
  *(_DWORD *)(result + 20) &= 0x80FFFFFF;
  return result;
}

double sub_100006414(_OWORD *a1)
{
  double result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

char *sub_100006428(unsigned int a1)
{
  if (a1 >= 0x22) {
    sub_1001EB724();
  }
  return off_10026F050[2 * a1];
}

char *sub_100006454(unsigned int a1)
{
  if (a1 >= 0x22) {
    sub_1001EB74C();
  }
  return off_10026F050[2 * a1 + 1];
}

double sub_100006480(_OWORD *a1)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_10000648C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (!a2) {
    return 1LL;
  }
  *(_DWORD *)a4 = 0;
  if (a2 < 1) {
    return a3 != 0;
  }
  uint64_t v7 = 0LL;
  int v8 = 0;
  int v9 = 0;
  unint64_t v10 = a1 + a2;
  if (a3) {
    LODWORD(result) = 24;
  }
  else {
    LODWORD(result) = 20;
  }
  unsigned int v12 = 7;
  while (2)
  {
    uint64_t result = sub_100005D3C(result, *(char *)(a1 + v7));
    unsigned int v13 = 0;
    switch((int)result)
    {
      case 21:
        goto LABEL_13;
      case 22:
      case 23:
      case 24:
      case 28:
      case 30:
        goto LABEL_16;
      case 25:
        goto LABEL_9;
      case 26:
        int v9 = 1;
LABEL_9:
        unsigned int v13 = 1;
        goto LABEL_13;
      case 27:
        unsigned int v13 = 3;
        goto LABEL_13;
      case 29:
        unsigned int v13 = 4;
        goto LABEL_13;
      case 31:
        unsigned int v13 = 5;
LABEL_13:
        if (v13 == v12)
        {
          ++*(_WORD *)(a4 + 4LL * v12 + 6);
        }

        else
        {
          uint64_t v14 = a4 + 4LL * v13;
          *(_WORD *)(v14 + 4) = v7;
          *(_WORD *)(v14 + 6) = 1;
          v8 |= 1 << v13;
          *(_WORD *)a4 = v8;
          unsigned int v12 = v13;
        }

LABEL_16:
        ++v7;
        if (a1 + v7 < v10) {
          continue;
        }
        if ((v8 & 3) == 1) {
          return 1LL;
        }
        if ((v8 & 2) == 0) {
          goto LABEL_91;
        }
        uint64_t v15 = *(unsigned __int16 *)(a4 + 10);
        uint64_t v16 = *(unsigned __int16 *)(a4 + 8);
        *(_WORD *)(a4 + 10) = 0;
        if (v9) {
          int v17 = 2;
        }
        else {
          int v17 = 4;
        }
        if (!v15) {
          goto LABEL_89;
        }
        int v18 = 0;
        unint64_t v19 = a1 + v16 + v15;
        break;
      default:
        if ((_DWORD)result != 1) {
          sub_1001EB774();
        }
        return result;
    }

    break;
  }

  while (2)
  {
    int v20 = *(unsigned __int8 *)(a1 + v16);
    switch(v17)
    {
      case 2:
      case 3:
        if (v20 == 64)
        {
          int v17 = 4;
        }

        else
        {
          BOOL v24 = (v20 - 48) >= 0xA && (v20 | 0x20u) - 97 >= 0x1A;
          if (v24
            && ((v20 - 33) > 0x3E || ((1LL << (v20 - 33)) & 0x4000000016003FF9LL) == 0)
            && v20 != 126)
          {
            return 1LL;
          }

          if (v17 == 3)
          {
            __int16 v25 = *(_WORD *)(a4 + 30);
          }

          else
          {
            __int16 v25 = 0;
            *(_WORD *)(a4 + 28) = v16;
            v8 |= 0x40u;
            *(_WORD *)a4 = v8;
          }

          *(_WORD *)(a4 + 30) = v25 + 1;
          int v17 = 3;
        }

        goto LABEL_84;
      case 4:
        if (v20 == 91)
        {
          int v17 = 5;
        }

        else
        {
          if ((v20 | 0x20u) - 97 >= 0x1A)
          {
            unsigned int v26 = v20 - 48;
            unsigned int v27 = v20 - 45;
            if (v26 >= 0xA && v27 >= 2) {
              return 1LL;
            }
          }

          *(_WORD *)(a4 + 8) = v16;
LABEL_77:
          *(_WORD *)(a4 + 10) = ++v18;
          int v17 = 6;
        }

        goto LABEL_84;
      case 5:
        goto LABEL_41;
      case 6:
        if ((v20 | 0x20u) - 97 < 0x1A) {
          goto LABEL_77;
        }
        goto LABEL_38;
      case 7:
        if (v20 == 93) {
          goto LABEL_50;
        }
LABEL_41:
        if ((v20 - 48) < 0xA || (v20 | 0x20u) >= 0x61 && (v20 | 0x20u) < 0x67 || v20 == 46 || v20 == 58)
        {
          if (v17 != 7) {
            *(_WORD *)(a4 + 8) = v16;
          }
          *(_WORD *)(a4 + 10) = ++v18;
          int v17 = 7;
          goto LABEL_84;
        }

        uint64_t result = 1LL;
        if (v17 != 7 || v20 != 37) {
          return result;
        }
        int v17 = 9;
        goto LABEL_83;
      case 8:
LABEL_38:
        if (v20 != 58) {
          return 1LL;
        }
        int v17 = 11;
        goto LABEL_84;
      case 9:
        goto LABEL_51;
      case 10:
        if (v20 == 93)
        {
LABEL_50:
          int v17 = 8;
        }

        else
        {
LABEL_51:
          if ((v20 - 48) >= 0xA && (v20 | 0x20u) - 97 >= 0x1A)
          {
            int v17 = 10;
            if (((v20 - 37) > 0x3A || ((1LL << (v20 - 37)) & 0x400000000000301LL) == 0)
              && v20 != 126)
            {
              return 1LL;
            }
          }

          else
          {
            int v17 = 10;
          }

      uint64_t v16 = sub_100013AF8(self->_database);
      uint64_t v14 = objc_claimAutoreleasedReturnValue(v16);
LABEL_17:
      unsigned int v12 = (void *)v14;
      goto LABEL_18;
    }

    uint64_t v7 = 1;
LABEL_8:
    uint64_t v11 = v18;
    objc_autoreleasePoolPop(v9);
  }

  while (!v11);
  unsigned int v12 = 0LL;
LABEL_19:
  if (a3 && (v7 & 1) == 0) {
    *a3 = v12;
  }

  return v7 & 1;
}

  return v7;
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

    if (!v3) {
      return v4;
    }
  }

  if (v5 != 41) {
    goto LABEL_16;
  }
  if (v6 == 36)
  {
    if (!v7 || v11 < 4) {
      goto LABEL_46;
    }
    LODWORD(__dst) = 0;
    memcpy(&__dst, v7, v11);
    uint64_t v16 = __dst;
LABEL_25:
    if (qword_1002A8D48 != -1) {
      swift_once(&qword_1002A8D48, sub_100171D7C);
    }
    int v17 = dword_1002EB9AC;
    if (qword_1002A8D58 != -1) {
      swift_once(&qword_1002A8D58, sub_100171DAC);
    }
    int v18 = v17 & v16;
    if (dword_1002EB9B4 == (v17 & v16))
    {
      int v4 = 2LL;
    }

    else
    {
      if (qword_1002A8D50 != -1) {
        swift_once(&qword_1002A8D50, sub_100171D94);
      }
      if (dword_1002EB9B0 == v18)
      {
        int v4 = 1LL;
      }

      else
      {
        if (qword_1002A8D60 != -1) {
          swift_once(&qword_1002A8D60, sub_100171DC4);
        }
        if (dword_1002EB9B8 == v18) {
          int v4 = 3LL;
        }
        else {
          int v4 = 0LL;
        }
      }
    }

    goto LABEL_16;
  }

  if (qword_1002A8D80 != -1) {
    swift_once(&qword_1002A8D80, sub_100171DF4);
  }
  if (v6 != dword_1002EB9C8) {
    goto LABEL_16;
  }
  if (v7)
  {
    unsigned int v12 = *(void *)v7;
    unsigned int v13 = *((void *)v7 + 1);
    uint64_t v14 = sub_1000175B0(&qword_1002AAFA0);
    uint64_t v15 = swift_allocObject(v14, 64LL, 7LL);
    *(void *)(v15 + 24) = v12;
    *(void *)(v15 + 32) = v13;
    *(void *)(v15 + 16) = 7680LL;
    *(_DWORD *)(v15 + 40) = 0;
    *(void *)(v15 + 48) = 0LL;
    *(void *)(v15 + 56) = 0xE000000000000000LL;
    sub_100029DF4(v23);
    v23 = v15 | 0x4000000000000000LL;
    goto LABEL_16;
  }

  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawBufferPointer.copyMemory source has too many elements",  69LL,  2LL,  "Swift/UnsafeRawBufferPointer.swift",  34LL);
  __break(1u);
  return result;
}

  int v42 = sub_100069CCC(v18);
  swift_bridgeObjectRelease();
  unint64_t v43 = sub_1000969B0((uint64_t)v42, a1, a2);
  if ((v44 & 1) != 0)
  {
    v55 = v43;
    int v46 = sub_1000175B0(&qword_1002A9710);
    swift_willThrowTypedImpl(&v55, v46, &protocol self-conformance witness table for Error);
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }

  swift_release();
  sub_100081A00(93LL);
  v43._countAndFlagsBits = 0LL;
  v43._object = (void *)0xE000000000000000LL;
  _StringGuts.grow(_:)(37LL);
  swift_bridgeObjectRelease();
  v43._countAndFlagsBits = 0xD000000000000012LL;
  v43._object = (void *)0x800000010021C8C0LL;
  uint64_t v29 = v35;
  v40 = _s25ASOctaneSupportXPCService4HeapV19underestimatedCountSivg_0();
  v30._countAndFlagsBits = sub_1000EB974();
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = 0x654C676E6972202CLL;
  v31._object = (void *)0xEE00203A6874676ELL;
  String.append(_:)(v31);
  CircularBuffer.count.getter(v29, v38, v36, v39);
  v40 = v32;
  v33._countAndFlagsBits = sub_1000EB974();
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  sub_100081A00(41LL);
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  return v44;
}

  if (v15 <= 0)
  {
LABEL_19:
    if (v15 != v14 || v14 == a1)
    {
LABEL_36:
      sub_100034E8C(a2, a3);
      unsigned __int8 *v7 = v4;
      return;
    }

    if (v14 >= a1) {
      goto LABEL_42;
    }
    __int16 v21 = v14 + 1;
    sub_100034E9C(a2, a3);
    while (1)
    {
      if (v13 + 1 > *(void *)(v4 + 24) >> 1) {
        sub_1000321FC();
      }
      int v4 = *v7;
      unsigned __int8 v22 = *(void *)(*v7 + 24LL);
LABEL_34:
      *(void *)(v4 + 16) = v13;
    }

    v23 = v22 >> 1;
    unint64_t v28 = v21 + (v22 >> 1) - v13;
    BOOL v24 = (uint64_t *)(v4 + 16 * v13 + 40);
    __int16 v25 = v21;
    while (1)
    {
      *(v24 - 1) = a2;
      *BOOL v24 = a3;
      ++v13;
      if (a1 == v25)
      {
        *(void *)(v4 + 16) = v13;
        goto LABEL_36;
      }

      if (v21 < 0 || v25 >= a1) {
        break;
      }
      ++v25;
      sub_100034E9C(a2, a3);
      v24 += 2;
      if (v13 >= v23)
      {
        __int16 v21 = v28;
        goto LABEL_34;
      }
    }

    __break(1u);
    goto LABEL_38;
  }

  unint64_t v19 = __OFADD__(v13, v15);
  v13 += v15;
  if (!v19)
  {
    *(void *)(v4 + 16) = v13;
    goto LABEL_19;
  }

  BOOL v38 = sub_100116534();
  p_number = (uint64_t)_swiftEmptyArrayStorage;
  if (!v38) {
    goto LABEL_20;
  }
  v207 = v38;
  sub_1000B4F18();
  sub_100116678(v45, v46);
  if (a1)
  {
    BOOL v38 = sub_100116670((uint64_t)&v229);
    goto LABEL_19;
  }

  int v83 = *(void *)(v207 + 160);
  v205 = a7;
  v208 = v15;
  if (!((unint64_t)v83 >> 62))
  {
    unsigned int v84 = *(void *)((v83 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    sub_1000931C8();
    if (v84) {
      goto LABEL_41;
    }
LABEL_167:
    sub_100024E84();
    BOOL v38 = sub_100116670((uint64_t)&v229);
    p_number = (uint64_t)_swiftEmptyArrayStorage;
LABEL_168:
    a7 = v205;
    uint64_t v15 = v208;
    unsigned int v33 = (uint64_t)v221;
    unsigned __int8 v22 = v222;
    unsigned int v37 = (uint64_t)v218;
LABEL_20:
    *(void *)(a7 + *(int *)(v33 + 84)) = p_number;
    static Date.now.getter(v38);
    sub_1000B5190();
    int v48 = v47;
    sub_10011665C();
    if (((v48 & 1) != 0 || (sub_100116620() - 1) <= 4u && sub_100116620() != 2)
      && (sub_1000B6324(), v49))
    {
      if (*(void *)(v49 + 16))
      {
        unsigned __int8 v22 = *(void *)(v49 + 32);
        __int16 v21 = *(void *)(v49 + 40);
        uint64_t v7 = *(void *)(v49 + 48);
        unsigned int v37 = *(void *)(v49 + 56);
        unsigned int v33 = *(unsigned __int8 *)(v49 + 64);
        int v50 = sub_1001165DC();
        sub_1000925F0(v50, v51, v52, v53, v54);
      }

      else
      {
        sub_1001165A4();
      }

      sub_10001EDA0();
    }

    else
    {
      sub_1001165A4();
    }

    v55 = sub_100116534();
    if (v55)
    {
      int v56 = v55;
      v208 = v15;
      uint64_t v15 = (char *)v7;
      sub_100116644();
      sub_1000B5190();
      unsigned int v58 = v57;
      v218(v7, v222);
      if ((v58 & 1) != 0 || (sub_1000B5088(), (v59 & 1) != 0))
      {
        int v60 = a1;
        a1 = 1LL;
        *(_BYTE *)(a7 + 72) = 1;
        v211 = v60;
        int v61 = sub_1000B85C8(4u);
        unsigned int v62 = (uint64_t)v209;
        if ((v63 & 1) == 0)
        {
          Date.init(timeIntervalSinceReferenceDate:)(*(double *)&v61);
          a1 = 0LL;
        }

        sub_10001762C(v62, a1, 1LL, v222);
        sub_100114700(v62, a7 + v221[23]);
        LOBYTE(v62) = (_BYTE)v15;
        v226 = v56;
        switch((int)v33)
        {
          case 0:
            *(void *)(a7 + 40) = v22;
            *(void *)(a7 + 48) = v21;
            sub_100116614(v221[17]);
            *(_BYTE *)(a7 + *(int *)(v64 + 64)) = 0;
            int v65 = *(void *)(v56 + 136);
            if (!v65) {
              goto LABEL_92;
            }
            unsigned int v66 = *(unsigned __int8 *)(v65 + 57);
            int v67 = sub_100116500();
            sub_100114748(v67, v68, v69, v70, 0);
            ChannelPipeline.syncOperations.getter();
            unsigned int v71 = sub_100139AC4();
            int v73 = sub_1001163F0(v71, v72);
            sub_1000BAFE0(v73, v74, v75, v76, 0);
            unsigned int v77 = v65;
            int v65 = v71;
            swift_release(v77);
            break;
          case 1:
            sub_10011654C();
            sub_100116568(v109);
            sub_1000931C8();
            char v110 = sub_100116574();
            sub_1000232FC(v110, v111);
            int v65 = v112;
            if (v112)
            {
              unint64_t v113 = *(unsigned __int8 *)(v112 + 57);
              sub_100139AC4();
              v223 = v114;
              unsigned int v33 = v115;
              unsigned int v62 = HIDWORD(v115) & 1;
              int64_t v116 = v22;
              v117 = v21;
              int v118 = (uint64_t)v15;
              unsigned int v66 = v113;
              int v119 = v37;
              unsigned int v120 = 1;
              goto LABEL_60;
            }

            LOBYTE(v62) = 1;
            unsigned int v139 = sub_1001164EC();
            sub_1000BAFE0(v139, v140, v141, v142, 1u);
            v223 = 0LL;
            unsigned int v33 = 0LL;
            unsigned int v66 = 0;
            break;
          case 2:
            *(void *)(a7 + 40) = v22;
            *(void *)(a7 + 48) = v21;
            uint64_t v87 = v221;
            sub_100116568(v221[16]);
            int v88 = sub_100116574();
            v90 = sub_100023514(v88, v89);
            int v65 = v90;
            if (v90)
            {
              int v91 = *(void *)(v90 + 88);
              unint64_t v92 = (void *)(a7 + v87[17]);
              *unint64_t v92 = *(void *)(v65 + 80);
              v92[1] = v91;
              LODWORD(v210) = *(unsigned __int8 *)(v65 + 57);
              swift_bridgeObjectRetain();
              uint64_t v93 = sub_100139AC4();
              int v95 = sub_1001163F0(v93, v94);
              sub_1000BAFE0(v95, v96, v97, v98, 2u);
              sub_100116650();
              int v83 = (uint64_t)v87;
              unsigned int v66 = v210;
            }

            else
            {
              int v135 = sub_100116500();
              sub_1000BAFE0(v135, v136, v137, v138, 2u);
              v223 = 0LL;
              unsigned int v33 = 0LL;
              sub_100116614(v87[17]);
              LOBYTE(v62) = 1;
              int v83 = (uint64_t)v87;
LABEL_89:
              unsigned int v66 = 0;
            }

            goto LABEL_94;
          case 3:
            sub_10011654C();
            sub_100116568(v121);
            sub_1000931C8();
            unsigned int v122 = sub_100116574();
            sub_100023578(v122, v123);
            int v65 = v124;
            if (v124)
            {
              unsigned int v66 = *(unsigned __int8 *)(v124 + 57);
              BOOL v125 = sub_100139AC4();
              int64_t v116 = sub_1001163F0(v125, v126);
              unsigned int v120 = 3;
LABEL_60:
              sub_1000BAFE0(v116, v117, v118, v119, v120);
              sub_100116650();
            }

            else
            {
              unsigned int v143 = sub_100116500();
              sub_1000BAFE0(v143, v144, v145, v146, 3u);
LABEL_92:
              v223 = 0LL;
              unsigned int v33 = 0LL;
              unsigned int v66 = 0;
              LOBYTE(v62) = 1;
            }

            break;
          case 4:
            *(void *)(a7 + 40) = v22;
            *(void *)(a7 + 48) = v21;
            unsigned int v62 = (uint64_t)v221;
            sub_100116614(v221[17]);
            *(_BYTE *)(a7 + *(int *)(v62 + 64)) = 4;
            v99 = sub_1001164EC();
            sub_100114748(v99, v100, v101, v102, 4u);
            swift_retain();
            int v65 = sub_1001BA8BC();
            v223 = v103;
            unsigned int v33 = v104;
            int v105 = sub_1001164EC();
            int v83 = v62;
            sub_1000BAFE0(v105, v106, v107, v108, 4u);
            sub_10009B4FC();
            LOBYTE(v62) = 0;
            goto LABEL_89;
          default:
            sub_10009B4FC();
            goto LABEL_52;
        }

        int v83 = (uint64_t)v221;
LABEL_94:
        BOOL v147 = sub_10012077C(v66);
        int v148 = (NSDecimal *)*(int *)(v83 + 72);
        *((_BYTE *)v148 + a7) = v147;
        unsigned int v26 = v222;
        if ((v62 & 1) != 0) {
          __asm { BR              X10 }
        }

        NSDecimal.init(integerLiteral:)(v148, 1000LL);
        unsigned int v152 = static NSDecimal.* infix(_:_:)(v65, v223, v33, v149, v150, v151);
        *(_DWORD *)&number = v152;
        number._mantissa[0] = WORD2(v152);
        number._mantissa[1] = HIWORD(v152);
        *(void *)&number._mantissa[2] = v153;
        number._mantissa[6] = v154;
        number._mantissa[7] = v155;
        NSDecimal.init(integerLiteral:)((NSDecimal *)HIWORD(v153), 0LL);
        *(_DWORD *)&uint64_t result = v156;
        result._mantissa[0] = v157;
        result._mantissa[1] = v158;
        result._mantissa[2] = v159;
        result._mantissa[3] = v160;
        result._mantissa[4] = v161;
        result._mantissa[5] = v162;
        result._mantissa[6] = v163;
        result._mantissa[7] = v164;
        NSDecimalRound(&result, &number, 0LL, NSRoundDown);
        NSDecimal._bridgeToObjectiveC()(v165);
        int v167 = v166;
        int v168 = [v166 longLongValue];

        int v169 = a7 + *(int *)(v83 + 76);
        *(void *)int v169 = v168;
        *(_BYTE *)(v169 + 8) = 0;
        a1 = sub_10007D87C();
        p_number = v170;
        if (qword_1002A8D28 == -1) {
          goto LABEL_97;
        }
        goto LABEL_160;
      }

      sub_1000BAFE0(v22, v21, v7, v37, v33);
      sub_10009B4FC();
      uint64_t v15 = v208;
    }

    else
    {
      int v78 = sub_1001165DC();
      sub_1000BAFE0(v78, v79, v80, v81, v82);
    }

  if (v3 == v18) {
    return sub_1001251E4(a1, v19);
  }
  else {
    return (void *)swift_bridgeObjectRelease(a1);
  }
}

    __break(1u);
LABEL_17:
    __break(1u);
  }

  __break(1u);
  return result;
}

        sub_100140684(v3 + 40, (uint64_t)v12);
        sub_100140684((uint64_t)v12, (uint64_t)&v17);
        unint64_t v10 = v17;
        if (v17)
        {
          v1[3].i64[0] = 0xF000000000000007LL;
          v1[3].i64[1] = sub_1000CD1B0(v10);
LABEL_18:
          if ((*(_BYTE *)(v3 + 17) & 0x80) == 0)
          {
LABEL_19:
            uint64_t v11 = 0;
LABEL_23:
            sub_100140874(v11);
            sub_100029DF4(v7);
            swift_errorRelease(v2);
            sub_1001408F0();
            sub_1001408E4();
            sub_100029DF4(v1[2].i64[1]);
            sub_100029DF4(v1[3].i64[0]);
            sub_100029DF4(v1[3].i64[1]);
            goto LABEL_24;
          }

  __break(1u);
  return result;
}

  sub_1000193DC();
  result.value._object = v18;
  result.value._countAndFlagsBits = v17;
  return result;
}

  unint64_t v44 = sub_1000706C8();
  v45(v44);
  sub_10002A580();
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

        if (qword_1002A8D90 != -1) {
          swift_once(&qword_1002A8D90, sub_100183E34);
        }
        uint64_t v30 = type metadata accessor for Logger(0LL);
        unsigned int v154 = sub_100018F68(v30, (uint64_t)qword_1002EB9D0);
        unint64_t v31 = (os_log_s *)Logger.logObject.getter(v154);
        v32 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v31, v32))
        {
          unsigned int v33 = (_WORD *)sub_100019464(2LL);
          *unsigned int v33 = 0;
          sub_1001B98C0( (void *)&_mh_execute_header,  v31,  v32,  "Failed to perform migration; retrying with new, empty database…");
          sub_10001A408((uint64_t)v33);
        }

        if (qword_1002A8DC0 != -1) {
          swift_once(&qword_1002A8DC0, sub_1001B22D8);
        }
        v34 = qword_1002B9278;
        if (!qword_1002B9278) {
          return 0LL;
        }
        unint64_t v35 = qword_1002B9270;
        int v36 = sub_1001B238C();
        if (!v37) {
          return 0LL;
        }
        int v150 = v36;
        unsigned int v143 = v37;
        unsigned int v160 = sub_1000175B0(&qword_1002B9360);
        BOOL v38 = *(void *)(v5 + 72);
        int v39 = *(unsigned __int8 *)(v5 + 80);
        unsigned int v145 = ((v39 + 32) & ~v39) + 3 * v38;
        v40 = (v39 + 32) & ~v39;
        unsigned int v165 = v40;
        int v144 = v39 | 7;
        int v41 = swift_allocObject(v160, v145, v39 | 7);
        *(_OWORD *)(v41 + 16) = v148;
        int v42 = v41 + v40;
        int v142 = v42;
        unint64_t v43 = (uint64_t)v136;
        unint64_t v44 = sub_1001B997C();
        int64_t v45 = v139;
        sub_10001762C(v44, v46, v47, v139);
        unsigned int v152 = *(void (**)(void))(v138 + 104);
        int v48 = v137;
        int v49 = v149;
        ((void (*)(uint64_t, void, uint64_t))v152)(v137, v149, v153);
        sub_100019320();
        sub_1001B9634(v35, v34);
        int v141 = v42 + v38;
        int v159 = v38;
        int v166 = v35;
        int v167 = v34;
        sub_100019320();
        sub_1001B9920(1835561773LL);
        int v50 = v166;
        unsigned int v51 = v167;
        int v52 = sub_1001B997C();
        sub_10001762C(v52, v53, v54, v45);
        ((void (*)(uint64_t, uint64_t, uint64_t))v152)(v48, v49, v153);
        sub_1001B9634(v50, v51);
        int v166 = v35;
        int v167 = v34;
        sub_100019320();
        sub_1001B9920(1818326829LL);
        v55 = v166;
        int v56 = v167;
        int v57 = sub_1001B997C();
        unsigned int v58 = v45;
        sub_10001762C(v57, v59, v60, v45);
        int v61 = v49;
        unsigned int v62 = v152;
        ((void (*)(uint64_t, uint64_t, uint64_t))v152)(v48, v61, v153);
        sub_1001B9634(v55, v56);
        uint64_t v63 = swift_allocObject(v160, v145, v144);
        *(_OWORD *)(v63 + 16) = v148;
        unsigned int v160 = v63;
        unsigned int v64 = v63 + v165;
        int v65 = sub_1001B998C();
        v62(v65);
        unsigned int v66 = v143;
        sub_10001ED74();
        int v67 = v150;
        sub_1001B9634(v150, v66);
        unsigned int v145 = v64 + v159;
        int v166 = v67;
        int v167 = v66;
        sub_10001ED74();
        sub_1001B9920(1835561773LL);
        int v68 = v166;
        v69 = v167;
        int v70 = sub_1001B998C();
        unsigned int v71 = (void (*)(uint64_t, void, uint64_t))v152;
        v152(v70);
        sub_1001B9634(v68, v69);
        int v166 = v150;
        int v167 = v66;
        sub_10001ED74();
        sub_1001B9920(1818326829LL);
        sub_10001A3F8();
        unsigned int v72 = v166;
        int v73 = (id)v167;
        sub_10001762C(v43, 1LL, 1LL, v58);
        v71(v48, v149, v153);
        sub_1001B9634(v72, (uint64_t)v73);
        v74 = 0LL;
        int v75 = v140;
        int v1 = v164;
        unsigned int v77 = v157;
        unsigned int v76 = v158;
        unsigned int v156 = v41;
        do
        {
          if (v74 >= *(void *)(v41 + 16))
          {
            __break(1u);
LABEL_72:
            __break(1u);
            goto LABEL_73;
          }

          unsigned int v5 = v162;
          sub_1001B9A38(v77, v41 + v165);
          sub_1001B99B4(v77);
          if (sub_10001D158(v77, 1LL, v58) == 1)
          {
            unsigned int v107 = v77;
            goto LABEL_40;
          }

          int v73 = *(id *)(v5 + 32);
          sub_1001B9830(v163, v77);
          if (v74 >= *(void *)(v160 + 16)) {
            goto LABEL_72;
          }
          sub_1001B9A38((uint64_t)v76, v160 + v165);
          sub_1001B99B4((uint64_t)v76);
          if (sub_10001D158((uint64_t)v76, 1LL, v58) == 1)
          {
            (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v163, v58);
            unsigned int v107 = (uint64_t)v76;
            goto LABEL_40;
          }

          int v78 = v155;
          sub_1001B9830(v155, (uint64_t)v76);
          int v1 = (int *)sub_1000175B0(&qword_1002B9368);
          int v79 = (uint64_t)v164 + v1[12];
          sub_1001B9830((uint64_t)v164, v163);
          unsigned int v80 = v79;
          unsigned int v81 = (uint64_t)v164;
          sub_1001B9830(v80, v78);
          sub_10001762C(v81, 0LL, 1LL, (uint64_t)v1);
          unsigned int v82 = v81 + v1[12];
          sub_1001B9830(v75, v81);
          int v83 = v161;
          sub_1001B9830(v161, v82);
          unsigned int v84 = [(id)objc_opt_self(NSFileManager) defaultManager];
          URL._bridgeToObjectiveC()(v85);
          int v73 = v86;
          URL._bridgeToObjectiveC()(v87);
          int v89 = v88;
          int v166 = 0LL;
          v90 = [v84 copyItemAtURL:v73 toURL:v88 error:&v166];

          int v91 = v166;
          if (v90)
          {
            unint64_t v92 = (id)v166;
            uint64_t v93 = v83;
          }

          else
          {
            int v94 = (id)v166;
            int v95 = _convertNSErrorToError(_:)(v91);

            swift_willThrow(v96);
            unint64_t v97 = v151;
            sub_1001B9A38(v151, v75);
            sub_1001B9A94();
            sub_1001B9A94();
            int v73 = (id)sub_1001B9A54();
            v99 = static os_log_type_t.error.getter(v73, v98);
            if (os_log_type_enabled((os_log_t)v73, v99))
            {
              v100 = sub_100019464(22LL);
              unsigned int v152 = (void (*)(void))sub_100019464(8LL);
              uint64_t v101 = sub_100019464(32LL);
              int v166 = v101;
              *(_DWORD *)v100 = v147;
              sub_100046F3C( (unint64_t *)&qword_1002B9370,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (const char *)&protocol conformance descriptor for URL);
              int v103 = dispatch thunk of CustomStringConvertible.description.getter(v58, v102);
              *(void *)(v100 + 4) = sub_1000CF360(v103, v104, &v166);
              sub_10001EDA0();
              sub_1001B9A8C(v97);
              *(_WORD *)(v100 + 12) = 2112;
              sub_1001B9A94();
              int v105 = _swift_stdlib_bridgeErrorToNSError(v95);
              *(void *)(v100 + 14) = v105;
              unsigned int v106 = (uint64_t)v152;
              *(void *)unsigned int v152 = v105;
              sub_10007F0F0();
              sub_10007F0F0();
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v73,  v99,  "Error backing up corrupted database file (%s): %@",  (uint8_t *)v100,  0x16u);
              sub_1000175B0(&qword_1002B6F90);
              swift_arrayDestroy(v106, 1LL);
              sub_10001A408(v106);
              swift_arrayDestroy(v101, 1LL);
              sub_10001A408(v101);
              sub_10001A408(v100);

              sub_10007F0F0();
              sub_1001B9A8C(v161);
              sub_1001B9A8C(v75);
              goto LABEL_36;
            }

            sub_10007F0F0();
            sub_10007F0F0();
            sub_100182688(v97);
            sub_10007F0F0();
            uint64_t v93 = v161;
          }

          sub_100182688(v93);
          sub_100182688(v75);
LABEL_36:
          int v1 = v164;
          int v41 = v156;
          unsigned int v77 = v157;
          ++v74;
          unsigned int v76 = v158;
          v165 += v159;
        }

        while (v74 != 3);
        sub_10001762C(v157, 1LL, 1LL, v58);
        unsigned int v107 = v77;
        unsigned int v5 = v162;
LABEL_40:
        sub_100034F14(v107, &qword_1002A9720);
        unint64_t v108 = sub_1000175B0(&qword_1002B9368);
        sub_10001762C((uint64_t)v1, 1LL, 1LL, v108);
LABEL_41:
        swift_bridgeObjectRelease();
        swift_setDeallocating(v160);
        sub_1001B76A4();
        int v109 = sub_1000D6B98((uint64_t)&unk_100290AB0);
        int v3 = v134;
        *(void *)(v109 + 16) = v134;
        int v168 = sub_1001B77C8;
        int v169 = v109;
        int v166 = (uint64_t)_NSConcreteStackBlock;
        int v167 = 1107296256LL;
        sub_1001B93D8((uint64_t)&unk_100290AC8);
        sub_1001B93E4();
        a1 = v135;
        char v110 = [v135 migrateToVersion:0 usingBlock:v1];
        _Block_release(v1);
        unsigned int v76 = (os_log_s *)sub_1001B9A54();
        if ((v110 & 1) == 0)
        {
          BOOL v125 = static os_log_type_t.fault.getter();
          if (!sub_100160870(v125))
          {
LABEL_64:

            return 0LL;
          }

          unsigned int v126 = (_WORD *)sub_100019464(2LL);
          *unsigned int v126 = 0;
          sub_1001B98C0( (void *)&_mh_execute_header,  v76,  (os_log_type_t)v1,  "Couldn’t reset to schema version 0; something is very wrong!");
          unsigned int v127 = (uint64_t)v126;
LABEL_63:
          sub_10001A408(v127);
          goto LABEL_64;
        }

        unint64_t v111 = static os_log_type_t.debug.getter();
        if (sub_100160870(v111))
        {
          unint64_t v112 = (_WORD *)sub_100019464(2LL);
          *unint64_t v112 = 0;
          sub_1001B98C0( (void *)&_mh_execute_header,  v76,  (os_log_type_t)v1,  "Successfully reset database to schema version 0; retrying migration to current version…");
          sub_10001A408((uint64_t)v112);
        }

        uint64_t v2 = 0LL;
        __int16 v25 = (const char **)&unk_1002A6000;
LABEL_59:
        v23 = (uint64_t)sub_1001B9A30((uint64_t)v27, v25[279]);
        if (v23 < 18000) {
          continue;
        }
        return v2;
    }
  }

  sub_100019F7C(v78);
  sub_1001C5EC4(v37, v71);
  return sub_100019F7C(v28);
}

LABEL_83:
          *(_WORD *)(a4 + 10) = ++v18;
        }

LABEL_84:
        ++v16;
        if (a1 + v16 < v19) {
          continue;
        }
LABEL_89:
LABEL_91:
        if (a3)
        {
        }

        else if ((v8 & 4) == 0)
        {
          return 0LL;
        }

        uint64_t v29 = *(unsigned __int16 *)(a4 + 12);
        uint64_t v30 = *(unsigned __int16 *)(a4 + 14);
        if (*(_WORD *)(a4 + 14))
        {
          unint64_t v31 = 0LL;
          v32 = (char *)(a1 + v29);
          unsigned int v33 = &v32[v30];
          while (1)
          {
            unint64_t v31 = *v32 + 10 * v31 - 48;
            if (v31 >> 16) {
              return 1LL;
            }
            if (++v32 >= v33) {
              goto LABEL_106;
            }
          }
        }

        LOWORD(v31) = 0;
LABEL_106:
        uint64_t result = 0LL;
        *(_WORD *)(a4 + 2) = v31;
        break;
      case 11:
      case 12:
        if (v17 == 12)
        {
          __int16 v21 = *(_WORD *)(a4 + 14);
        }

        else
        {
          __int16 v21 = 0;
          *(_WORD *)(a4 + 12) = v16;
          v8 |= 4u;
          *(_WORD *)a4 = v8;
        }

        *(_WORD *)(a4 + 14) = v21 + 1;
        int v17 = 12;
        goto LABEL_84;
      default:
        return 1LL;
    }

    return result;
  }

uint64_t sub_1000068F0(uint64_t result, int a2)
{
  unsigned int v2 = *(_DWORD *)(result + 20);
  int v3 = HIBYTE(v2) & 0x7F;
  if (v3 != 31 && v3 != 0) {
    sub_1001EB7C4();
  }
  if (a2) {
    int v5 = 520093696;
  }
  else {
    int v5 = 0;
  }
  *(_DWORD *)(result + 20) = v2 & 0x80FFFFFF | v5;
  return result;
}

BOOL sub_100006930(_DWORD *a1)
{
  return (*a1 & 0x1FC00) == 0x10000;
}

uint64_t sub_100006944()
{
  return 133380LL;
}

uint64_t sub_100006950(uint64_t result)
{
  dword_1002A8708 = result;
  return result;
}

void sub_100006B7C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (v5 && *(_BYTE *)(a1 + 48))
  {
    *(_BYTE *)(*(void *)(a1 + 32) + 24LL) = 0;
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 16LL), a3);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

_BYTE *sub_100006C44(char a1)
{
  uint64_t result = malloc(1uLL);
  *uint64_t result = a1;
  return result;
}

uint64_t sub_100006C70(unsigned __int8 *a1, int a2, unsigned __int8 a3)
{
  while (1)
  {
    int v3 = __ldaxr(a1);
    if (v3 != a2) {
      break;
    }
    if (!__stlxr(a3, a1)) {
      return 1LL;
    }
  }

  uint64_t result = 0LL;
  __clrex();
  return result;
}

uint64_t sub_100006C9C(unsigned __int8 *a1, char a2)
{
  do
    unsigned __int8 v2 = __ldxr(a1);
  while (__stxr(v2 + a2, a1));
  return v2 & 1;
}

uint64_t sub_100006CB4(unsigned __int8 *a1, char a2)
{
  do
    unsigned __int8 v2 = __ldxr(a1);
  while (__stxr(v2 - a2, a1));
  return v2 & 1;
}

uint64_t sub_100006CCC(unsigned __int8 *a1, unsigned __int8 a2)
{
  do
    unsigned __int8 v2 = __ldxr(a1);
  while (__stxr(a2, a1));
  return v2 & 1;
}

uint64_t sub_100006CE4(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *sub_100006CF0(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

uint64_t sub_100006CF8(unsigned __int8 *a1, unsigned __int8 a2, unsigned __int8 a3)
{
  while (1)
  {
    int v3 = __ldaxr(a1);
    if (v3 != a2) {
      break;
    }
    if (!__stlxr(a3, a1)) {
      return 1LL;
    }
  }

  uint64_t result = 0LL;
  __clrex();
  return result;
}

uint64_t sub_100006D24(unsigned __int8 *a1, char a2)
{
  do
    signed __int8 v2 = __ldxr(a1);
  while (__stxr(v2 + a2, a1));
  return v2;
}

uint64_t sub_100006D3C(unsigned __int8 *a1, char a2)
{
  do
    signed __int8 v2 = __ldxr(a1);
  while (__stxr(v2 - a2, a1));
  return v2;
}

uint64_t sub_100006D54(unsigned __int8 *a1, unsigned __int8 a2)
{
  do
    signed __int8 v2 = __ldxr(a1);
  while (__stxr(a2, a1));
  return v2;
}

uint64_t sub_100006D68(char *a1)
{
  return *a1;
}

_WORD *sub_100006D74(__int16 a1)
{
  uint64_t result = malloc(2uLL);
  *uint64_t result = a1;
  return result;
}

uint64_t sub_100006D9C(unsigned __int16 *a1, unsigned __int16 a2, unsigned __int16 a3)
{
  while (1)
  {
    int v3 = __ldaxr(a1);
    if (v3 != a2) {
      break;
    }
    if (!__stlxr(a3, a1)) {
      return 1LL;
    }
  }

  uint64_t result = 0LL;
  __clrex();
  return result;
}

uint64_t sub_100006DC8(unsigned __int16 *a1, __int16 a2)
{
  do
    signed __int16 v2 = __ldxr(a1);
  while (__stxr(v2 + a2, a1));
  return v2;
}

uint64_t sub_100006DE0(unsigned __int16 *a1, __int16 a2)
{
  do
    signed __int16 v2 = __ldxr(a1);
  while (__stxr(v2 - a2, a1));
  return v2;
}

uint64_t sub_100006DF8(unsigned __int16 *a1, unsigned __int16 a2)
{
  do
    signed __int16 v2 = __ldxr(a1);
  while (__stxr(a2, a1));
  return v2;
}

uint64_t sub_100006E0C(__int16 *a1)
{
  return *a1;
}

_WORD *sub_100006E18(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_DWORD *sub_100006E20(int a1)
{
  uint64_t result = malloc(4uLL);
  *uint64_t result = a1;
  return result;
}

uint64_t sub_100006E48(unsigned int *a1, int a2, unsigned int a3)
{
  while (1)
  {
    unsigned int v3 = __ldaxr(a1);
    if (v3 != a2) {
      break;
    }
    if (!__stlxr(a3, a1)) {
      return 1LL;
    }
  }

  uint64_t result = 0LL;
  __clrex();
  return result;
}

uint64_t sub_100006E70(unsigned int *a1, int a2)
{
  do
    uint64_t v2 = __ldxr(a1);
  while (__stxr(v2 + a2, a1));
  return v2;
}

uint64_t sub_100006E88(unsigned int *a1, int a2)
{
  do
    uint64_t v2 = __ldxr(a1);
  while (__stxr(v2 - a2, a1));
  return v2;
}

uint64_t sub_100006EA0(unsigned int *a1, unsigned int a2)
{
  do
    uint64_t result = __ldxr(a1);
  while (__stxr(a2, a1));
  return result;
}

uint64_t sub_100006EB4(unsigned int *a1)
{
  return *a1;
}

_DWORD *sub_100006EBC(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

void *sub_100006EC4(uint64_t a1)
{
  uint64_t result = malloc(8uLL);
  *uint64_t result = a1;
  return result;
}

uint64_t sub_100006EEC(unint64_t *a1, uint64_t a2, unint64_t a3)
{
  while (1)
  {
    unint64_t v3 = __ldaxr(a1);
    if (v3 != a2) {
      break;
    }
    if (!__stlxr(a3, a1)) {
      return 1LL;
    }
  }

  uint64_t result = 0LL;
  __clrex();
  return result;
}

unint64_t sub_100006F14(unint64_t *a1, uint64_t a2)
{
  do
    unint64_t result = __ldxr(a1);
  while (__stxr(result + a2, a1));
  return result;
}

unint64_t sub_100006F2C(unint64_t *a1, uint64_t a2)
{
  do
    unint64_t result = __ldxr(a1);
  while (__stxr(result - a2, a1));
  return result;
}

unint64_t sub_100006F44(unint64_t *a1, unint64_t a2)
{
  do
    unint64_t result = __ldxr(a1);
  while (__stxr(a2, a1));
  return result;
}

uint64_t sub_100006F58(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_100006F60(void *result, uint64_t a2)
{
  *unint64_t result = a2;
  return result;
}

uint64_t sub_100006F68(unsigned __int8 *a1, char a2)
{
  do
    uint64_t v2 = __ldxr(a1);
  while (__stxr(v2 + a2, a1));
  return v2;
}

uint64_t sub_100006F80(unsigned __int8 *a1, char a2)
{
  do
    uint64_t v2 = __ldxr(a1);
  while (__stxr(v2 - a2, a1));
  return v2;
}

uint64_t sub_100006F98(unsigned __int8 *a1, unsigned __int8 a2)
{
  do
    uint64_t v2 = __ldxr(a1);
  while (__stxr(a2, a1));
  return v2;
}

uint64_t sub_100006FB0(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t sub_100006FB8(unsigned __int16 *a1, int a2, unsigned __int16 a3)
{
  while (1)
  {
    int v3 = __ldaxr(a1);
    if (v3 != a2) {
      break;
    }
    if (!__stlxr(a3, a1)) {
      return 1LL;
    }
  }

  uint64_t result = 0LL;
  __clrex();
  return result;
}

uint64_t sub_100006FE4(unsigned __int16 *a1, __int16 a2)
{
  do
    uint64_t v2 = __ldxr(a1);
  while (__stxr(v2 + a2, a1));
  return v2;
}

uint64_t sub_100006FFC(unsigned __int16 *a1, __int16 a2)
{
  do
    uint64_t v2 = __ldxr(a1);
  while (__stxr(v2 - a2, a1));
  return v2;
}

uint64_t sub_100007014(unsigned __int16 *a1, unsigned __int16 a2)
{
  do
    uint64_t v2 = __ldxr(a1);
  while (__stxr(a2, a1));
  return v2;
}

uint64_t sub_10000702C(unsigned __int16 *a1)
{
  return *a1;
}

void sub_100007380(id a1)
{
  unint64_t v14 = 0LL;
  uint64_t v1 = container_system_path_for_identifier(0LL, &v14);
  if (v14 > 1 || v1 == 0)
  {
    if (qword_1002BAE28 != -1) {
      dispatch_once(&qword_1002BAE28, &stru_10026F300);
    }
    int v3 = (os_log_s *)qword_1002BAE18;
    if (os_log_type_enabled((os_log_t)qword_1002BAE18, OS_LOG_TYPE_FAULT)) {
      sub_1001EB91C((uint64_t *)&v14, v3);
    }
  }

  else
  {
    int v4 = (void *)v1;
    uint64_t v5 = objc_claimAutoreleasedReturnValue( +[NSURL fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:]( &OBJC_CLASS___NSURL,  "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:",  v1,  1LL,  0LL));
    id v6 = (void *)qword_1002BADD0;
    qword_1002BADD0 = v5;

    free(v4);
  }

  if (qword_1002BADD0)
  {
    v27[0] = @".";
    v25[0] = NSURLIsExcludedFromBackupKey;
    v25[1] = NSURLFileProtectionKey;
    v26[0] = &__kCFBooleanFalse;
    v26[1] = NSURLFileProtectionNone;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v26,  v25,  2LL));
    v28[0] = v7;
    v27[1] = @"Documents";
    v23[0] = NSURLIsExcludedFromBackupKey;
    v23[1] = NSURLFileProtectionKey;
    v24[0] = &__kCFBooleanTrue;
    v24[1] = NSURLFileProtectionNone;
    int v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v24,  v23,  2LL));
    v28[1] = v8;
    v27[2] = @"Library";
    v21[0] = NSURLIsExcludedFromBackupKey;
    v21[1] = NSURLFileProtectionKey;
    v22[0] = &__kCFBooleanFalse;
    v22[1] = NSURLFileProtectionNone;
    int v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v22,  v21,  2LL));
    v28[2] = v9;
    v27[3] = @"Library/Caches";
    v19[0] = NSURLIsExcludedFromBackupKey;
    v19[1] = NSURLFileProtectionKey;
    v20[0] = &__kCFBooleanTrue;
    v20[1] = NSURLFileProtectionNone;
    unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v20,  v19,  2LL));
    v28[3] = v10;
    v27[4] = @"Library/Preferences";
    v17[0] = NSURLIsExcludedFromBackupKey;
    v17[1] = NSURLFileProtectionKey;
    v18[0] = &__kCFBooleanTrue;
    v18[1] = NSURLFileProtectionCompleteUntilFirstUserAuthentication;
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v18,  v17,  2LL));
    v28[4] = v11;
    v27[5] = @"tmp";
    v15[0] = NSURLIsExcludedFromBackupKey;
    v15[1] = NSURLFileProtectionKey;
    v16[0] = &__kCFBooleanTrue;
    v16[1] = NSURLFileProtectionNone;
    unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v16,  v15,  2LL));
    v28[5] = v12;
    unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v28,  v27,  6LL));

    [v13 enumerateKeysAndObjectsUsingBlock:&stru_10026F2E0];
  }

void sub_100007660(id a1, NSString *a2, NSDictionary *a3, BOOL *a4)
{
  uint64_t v5 = (void *)qword_1002BADD0;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 URLByAppendingPathComponent:a2]);
  id v10 = 0LL;
  unsigned __int8 v8 = [v7 setResourceValues:v6 error:&v10];

  id v9 = v10;
  if ((v8 & 1) == 0)
  {
    if (qword_1002BAE28 != -1) {
      dispatch_once(&qword_1002BAE28, &stru_10026F300);
    }
    if (os_log_type_enabled((os_log_t)qword_1002BAE18, OS_LOG_TYPE_FAULT)) {
      sub_1001EB990();
    }
  }
}

void sub_100007734(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_1002A8710;
  off_1002A8710 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  int v4 = (void *)qword_1002BADE0;
  qword_1002BADE0 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  id v6 = (void *)qword_1002BADE8;
  qword_1002BADE8 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  unsigned __int8 v8 = (void *)qword_1002BADF0;
  qword_1002BADF0 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_1002BADF8;
  qword_1002BADF8 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  unsigned int v12 = (void *)qword_1002BAE00;
  qword_1002BAE00 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  unint64_t v14 = (void *)qword_1002BAE08;
  qword_1002BAE08 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  uint64_t v16 = (void *)qword_1002BAE10;
  qword_1002BAE10 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  int v18 = (void *)qword_1002BAE18;
  qword_1002BAE18 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  int v20 = (void *)qword_1002BAE20;
  qword_1002BAE20 = (uint64_t)v19;
}

  ;
}

void sub_1000078A8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

uint64_t sub_100007A5C(uint64_t a1)
{
  uint64_t v2 = sqlite3_step(*(sqlite3_stmt **)(a1 + 48));
  return v2;
}

void sub_100007B3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void *sub_100007B54(void *result, void *a2, uint64_t a3, _BYTE *a4)
{
  if (a2)
  {
    os_log_t v5 = result;
    uint64_t result = [a2 int64ForColumnIndex:0];
    *(void *)(*(void *)(v5[4] + 8LL) + 24LL) = result;
  }

  *a4 = 1;
  return result;
}

void sub_100007C44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100007C5C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100007C6C(uint64_t a1)
{
}

void sub_100007C74(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  if (a2)
  {
    uint64_t v6 = objc_claimAutoreleasedReturnValue([a2 numberForColumnIndex:0]);
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8LL);
    unsigned __int8 v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }

  *a4 = 1;
}

void sub_100007D4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100007D64(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  if (a2) {
    *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  }
  *a4 = 1;
  return result;
}

uint64_t sub_100008110(uint64_t a1)
{
  return 1LL;
}

BOOL sub_100008344(id a1, NSString *a2, unint64_t a3, BOOL *a4)
{
  int v4 = a2;
  os_log_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  unsigned __int8 v6 = [v5 fileExistsAtPath:v4];

  return v6 ^ 1;
}

void sub_10000849C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_1002A8718;
  off_1002A8718 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  int v4 = (void *)qword_1002BAE38;
  qword_1002BAE38 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  unsigned __int8 v6 = (void *)qword_1002BAE40;
  qword_1002BAE40 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  unsigned __int8 v8 = (void *)qword_1002BAE48;
  qword_1002BAE48 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_1002BAE50;
  qword_1002BAE50 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  unsigned int v12 = (void *)qword_1002BAE58;
  qword_1002BAE58 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  unint64_t v14 = (void *)qword_1002BAE60;
  qword_1002BAE60 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  uint64_t v16 = (void *)qword_1002BAE68;
  qword_1002BAE68 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  int v18 = (void *)qword_1002BAE70;
  qword_1002BAE70 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  int v20 = (void *)qword_1002BAE78;
  qword_1002BAE78 = (uint64_t)v19;
}

void sub_1000085F8( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_100008608(void *a1, uint64_t a2, void *a3)
{
  id v25 = a1;
  id v5 = a3;
  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSArray, v6);
  if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0)
  {
    [v25 bindArray:v5 atPosition:a2];
  }

  else
  {
    uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSDictionary, v8);
    if ((objc_opt_isKindOfClass(v5, v9) & 1) != 0)
    {
      [v25 bindDictionary:v5 atPosition:a2];
    }

    else
    {
      uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSString, v10);
      if ((objc_opt_isKindOfClass(v5, v11) & 1) != 0)
      {
        [v25 bindString:v5 atPosition:a2];
      }

      else if (v5 && (uint64_t v13 = objc_opt_class(&OBJC_CLASS___NSNull, v12), (objc_opt_isKindOfClass(v5, v13) & 1) == 0))
      {
        uint64_t v15 = objc_opt_class(&OBJC_CLASS___NSDate, v14);
        if ((objc_opt_isKindOfClass(v5, v15) & 1) != 0)
        {
          [v5 timeIntervalSinceReferenceDate];
        }

        else
        {
          uint64_t v17 = objc_opt_class(&OBJC_CLASS___NSData, v16);
          if ((objc_opt_isKindOfClass(v5, v17) & 1) != 0)
          {
            [v25 bindData:v5 atPosition:a2];
            goto LABEL_10;
          }

          uint64_t v19 = objc_opt_class(&OBJC_CLASS___NSUUID, v18);
          if ((objc_opt_isKindOfClass(v5, v19) & 1) != 0)
          {
            [v25 bindUUID:v5 atPosition:a2];
            goto LABEL_10;
          }

          uint64_t v21 = objc_opt_class(&OBJC_CLASS___NSURL, v20);
          if ((objc_opt_isKindOfClass(v5, v21) & 1) != 0)
          {
            unsigned __int8 v22 = (void *)objc_claimAutoreleasedReturnValue([v5 absoluteString]);
            [v25 bindString:v22 atPosition:a2];

            goto LABEL_10;
          }

          id v23 = v5;
          BOOL v24 = (const char *)[v23 objCType];
          if (strcmp(v24, "d") && strcmp(v24, "f"))
          {
            objc_msgSend(v25, "bindInt64:atPosition:", objc_msgSend(v23, "longLongValue"), a2);
            goto LABEL_10;
          }

          [v23 doubleValue];
        }

        objc_msgSend(v25, "bindDouble:atPosition:", a2);
      }

      else
      {
        [v25 bindNullAtPosition:a2];
      }
    }
  }

LABEL_10:
}

  return v9;
}

  return v7;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    __break(1u);
    goto LABEL_11;
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

        __break(1u);
        return;
      }

    int v4 = static String._fromUTF8Repairing(_:)(v3, v6);
  }

  swift_bridgeObjectRelease(v2);
  return v4;
}

    uint64_t v14 = "Not enough bits to represent the passed value";
    uint64_t v15 = 45LL;
    goto LABEL_11;
  }

  uint64_t v14 = "Negative value is not representable";
  uint64_t v15 = 35LL;
LABEL_11:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v14,  v15,  2LL,  "Swift/Integers.swift",  20LL);
  __break(1u);
  return result;
}

  swift_release();
  swift_bridgeObjectRelease();
  return 0LL;
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

    int v36 = sub_100137F8C();
    sub_100138514(v36, (uint64_t)&type metadata for Int64, v36);
    unsigned int v37 = sub_100138530();
    sub_100138564(v0);
    sub_1000C8BE8(v4);
    if ((v37 & 1) != 0) {
      goto LABEL_36;
    }
    goto LABEL_20;
  }

  v0 = sub_1000C8C38();
  unsigned int v33 = sub_100138508();
  if ((v0 & 1) == 0)
  {
    if (v33 >= 64)
    {
      sub_100138564(v4);
      goto LABEL_20;
    }

    goto LABEL_14;
  }

  if (v33 > 64) {
    goto LABEL_10;
  }
  v40 = sub_1001386B8( v33,  v34,  v35,  (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral,  (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  sub_1001385F4((uint64_t)&unk_1001FDDA0, v41, v42, v40);
  sub_1001385BC();
  unint64_t v43 = sub_100138530();
  sub_100138564(v0);
  sub_1001385D8();
  if ((v43 & 1) == 0)
  {
    unint64_t v44 = v63;
    int64_t v45 = sub_1000C8C74();
    sub_1000C8BE8(v2);
    int v39 = v45 < v44;
LABEL_17:
    if (v39) {
      goto LABEL_36;
    }
    goto LABEL_20;
  }

    unint64_t v35 = sub_100137F8C();
    sub_100138514(v35, (uint64_t)&type metadata for Int64, v35);
    int v36 = sub_100138530();
    sub_100138564(v0);
    sub_1000C8BE8(v4);
    if ((v36 & 1) != 0) {
      goto LABEL_36;
    }
    goto LABEL_20;
  }

  v0 = sub_1000C8C38();
  v32 = sub_100138508();
  if ((v0 & 1) == 0)
  {
    if (v32 >= 64)
    {
      sub_100138564(v4);
      goto LABEL_20;
    }

    goto LABEL_14;
  }

  if (v32 > 64) {
    goto LABEL_10;
  }
  int v39 = sub_1001386B8( v32,  v33,  v34,  (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral,  (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  sub_1001385F4((uint64_t)&unk_1001FDDA0, v40, v41, v39);
  sub_1001385BC();
  int v42 = sub_100138530();
  sub_100138564(v0);
  sub_1001385D8();
  if ((v42 & 1) == 0)
  {
    unint64_t v43 = v62;
    unint64_t v44 = sub_1000C8C74();
    sub_1000C8BE8(v2);
    BOOL v38 = v44 < v43;
LABEL_17:
    if (v38) {
      goto LABEL_36;
    }
    goto LABEL_20;
  }

  sub_10001DAB8();
}

  __break(1u);
  return result;
}

  id v5 = 0LL;
LABEL_11:
  swift_release(a2);
  return v5;
}

    __break(1u);
LABEL_11:
    __break(1u);
  }

  __break(1u);
}

    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v9;
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    swift_retain();
    return a1;
  }

  if (v5 != 4)
  {
    int v4 = (__int128 *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 48);
    *(_BYTE *)(a1 + 40) = v5;
    uint64_t v9 = *(void *)(a2 + 48);
    uint64_t v11 = v9 & 0xF000000000000007LL;
    if ((~v10 & 0xF000000000000007LL) != 0)
    {
      if (v11 != 0xF000000000000007LL)
      {
        *(void *)(a1 + 4_Block_object_dispose(va, 8) = v9;
        swift_retain();
        swift_release();
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        return a1;
      }

      sub_10007ACF8((void *)(a1 + 48));
    }

    else if (v11 != 0xF000000000000007LL)
    {
      goto LABEL_10;
    }

    uint64_t v7 = *(_OWORD *)(a2 + 48);
    goto LABEL_14;
  }

  sub_100167E34(a1 + 40);
  uint64_t v8 = *(void *)(a2 + 56);
  void *v4 = *v6;
  *(void *)(a1 + 56) = v8;
  return a1;
}

  sub_10017BF54();
  if ((sub_10017BF68(v40) & 1) == 0) {
    goto LABEL_16;
  }
  sub_10017BFF8(v46[0], 1LL);
  if ((v10 & 1) != 0) {
    int v41 = 0x100000000000000LL;
  }
  else {
    int v41 = 0LL;
  }
  int v42 = sub_10017C068(v41 & 0xFF00000000000000LL | v7 & 0xFFFFFFFFFFFFFFLL);
  uint64_t result = sub_10001EDD8();
  if ((v42 & 1) == 0)
  {
    __break(1u);
LABEL_16:
    unint64_t v44 = v46[0];
    sub_10017BFA8(v46[0]);
    sub_10002A4C8();
    int64_t v45 = sub_10017BF90() >> 56;
    sub_10001EDD8();
    unsigned int v53 = v45 & 1;
    sub_10017BFF8(v44, 0LL);
    uint64_t result = sub_10001EDD8();
    __break(1u);
  }

  return result;
}

  __break(1u);
  return result;
}

            uint64_t v16 = v18;
LABEL_7:
            uint64_t v7 = (v17 - 1) & v17;
            uint64_t v12 = __clz(__rbit64(v17)) + (v16 << 6);
            uint64_t v10 = v16;
            goto LABEL_3;
          }
        }
      }
    }

  uint64_t v12 = *v16;
  *(void *)(*v16 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(_BYTE *)(*(void *)(v12 + 48) + a2) = v17;
  uint64_t v13 = *(void *)(v12 + 16);
  uint64_t v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
    JUMPOUT(0x1001A28B0LL);
  }

  *(void *)(v12 + 16) = v15;
  return result;
}

__CFString *sub_100008844(uint64_t a1)
{
  if (!a1) {
    return &stru_100294B70;
  }
  uint64_t v2 = -[NSMutableString initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableString), "initWithCapacity:", 3 * a1 + 1);
  -[NSMutableString appendString:](v2, "appendString:", @"?");
  uint64_t v3 = a1 - 1;
  if (a1 != 1)
  {
    do
    {
      -[NSMutableString appendString:](v2, "appendString:", @", ?");
      --v3;
    }

    while (v3);
  }

  id v4 = -[NSMutableString copy](v2, "copy");

  return (__CFString *)v4;
}

void sub_100009390(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
  [v2 addObject:v3];
}

void sub_1000095BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000095D4(uint64_t result)
{
  return result;
}

void sub_100009834(uint64_t a1, void *a2)
{
  int v5 = 1;
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 predicate]);
  [v4 applyBinding:v3 atIndex:&v5];
}

void sub_100009920( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100009938(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) entityClass];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1000099B8;
  v4[3] = &unk_10026F488;
  id v6 = v2;
  __int128 v5 = *(_OWORD *)(a1 + 32);
  [(id)v5 enumeratePersistentIDsUsingBlock:v4];
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
}

void sub_1000099B8(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id v6 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 onConnection:*(void *)(*(void *)(a1 + 32) + 8)];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = [v6 deleteFromDatabase];
  *a4 = *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) ^ 1;
}

void sub_100009BB0(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init(*(Class *)(a1 + 40));
  [v4 setDatabaseID:a2];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100009C18(uint64_t a1, uint64_t a2, void *a3)
{
  __int128 v5 = *(objc_class **)(a1 + 40);
  id v6 = a3;
  id v7 = objc_alloc_init(v5);
  [v7 setDatabaseID:a2];
  [v7 setValuesWithDictionary:v6];

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100009D20(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100009DF8(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v14 = 1;
  [a1[4] applyBinding:v5 atIndex:&v14];
  id v7 = [a1[5] count];
  v13[0] = 0LL;
  v13[1] = v13;
  v13[2] = 0x2020000000LL;
  v13[3] = 0LL;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100009F00;
  v8[3] = &unk_10026F578;
  id v12 = v7;
  id v9 = a1[5];
  id v10 = a1[6];
  uint64_t v11 = v13;
  [v5 enumerateRowsUsingBlock:v8];

  _Block_object_dispose(v13, 8);
}

void sub_100009EE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void sub_100009F00(void *a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  id v6 = objc_autoreleasePoolPush();
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithCapacity:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithCapacity:",  a1[7]));
  if (v13)
  {
    uint64_t v8 = (void *)a1[4];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_10000A034;
    v14[3] = &unk_10026F550;
    id v9 = v7;
    id v15 = v9;
    id v10 = v13;
    id v16 = v10;
    [v8 enumerateObjectsUsingBlock:v14];
    uint64_t v11 = a1[5];
    id v12 = [v10 int64ForColumnIndex:0];
    ++*(void *)(*(void *)(a1[6] + 8LL) + 24LL);
    (*(void (**)(uint64_t, id, id))(v11 + 16))(v11, v12, v9);
  }

  objc_autoreleasePoolPop(v6);
}

void sub_10000A034(uint64_t a1, void *a2, int a3)
{
  id v4 = *(void **)(a1 + 40);
  uint64_t v5 = (a3 + 1);
  id v6 = a2;
  id v7 = sub_100002F48(v4, v5);
  id v8 = (id)objc_claimAutoreleasedReturnValue(v7);
  [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:v6];
}

void sub_10000A988( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10000A9A0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10000A9B0(uint64_t a1)
{
}

void sub_10000A9B8(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id v6 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 onConnection:*(void *)(a1 + 32)];
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  *a4 = 1;
}

void sub_10000AB30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10000AB48(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 onConnection:*(void *)(a1 + 32)];
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v3];
}

void sub_10000AF70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10000AF98(uint64_t a1, void *a2)
{
  int v7 = 1;
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 predicate]);
  [v5 applyBinding:v4 atIndex:&v7];

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10000B03C;
  v6[3] = &unk_10026F350;
  v6[4] = *(void *)(a1 + 40);
  [v4 enumerateRowsUsingBlock:v6];
}

void sub_10000B03C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6 = sub_100002F48(a2, 0LL);
  uint64_t v7 = objc_claimAutoreleasedReturnValue(v6);
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  *a4 = 1;
}

void sub_10000B178( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10000B190(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  *a4 = 1;
}

void sub_10000B4DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10000B4F4(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10000B56C;
  v5[3] = &unk_10026F668;
  __int128 v4 = *(_OWORD *)(a1 + 32);
  id v3 = (id)v4;
  *(_OWORD *)id v6 = v4;
  [a2 enumerateRowsUsingBlock:v5];
}

void sub_10000B56C(uint64_t a1, void *a2, uint64_t a3, unsigned __int8 *a4)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue([a2 stringForColumnName:@"name"]);
  unsigned __int8 v6 = [v7 isEqualToString:*(void *)(a1 + 32)];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v6;
  *a4 = v6;
}

void sub_10000B65C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_10000B674(uint64_t a1, void *a2)
{
  id result = [a2 firstInt64Value];
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = result;
  return result;
}

void sub_10000B764( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10000B77C(uint64_t a1)
{
  id v2 = -[SQLiteSchemaMigration initWithConnection:]( objc_alloc(&OBJC_CLASS___SQLiteSchemaMigration),  "initWithConnection:",  *(void *)(*(void *)(a1 + 32) + 8LL));
  if (qword_1002BAED0 != -1) {
    dispatch_once(&qword_1002BAED0, &stru_10026F700);
  }
  id v3 = (void *)qword_1002BAEB8;
  if (os_log_type_enabled((os_log_t)qword_1002BAEB8, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v4 = *(void **)(*(void *)(a1 + 32) + 8LL);
    uint64_t v5 = v3;
    unsigned __int8 v6 = (void *)objc_claimAutoreleasedReturnValue([v4 options]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 databasePath]);
    uint64_t v8 = *(void *)(a1 + 56);
    int v12 = 138543618;
    id v13 = v7;
    __int16 v14 = 2048;
    uint64_t v15 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Migrating %{public}@ to %llu",  (uint8_t *)&v12,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = -[SQLiteSchemaMigration success](v2, "success");
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
  {
    [*(id *)(a1 + 32) _setUserVersion:*(void *)(a1 + 56)];
  }

  else
  {
    if (qword_1002BAED0 != -1) {
      dispatch_once(&qword_1002BAED0, &stru_10026F700);
    }
    id v9 = (void *)qword_1002BAEB8;
    if (os_log_type_enabled((os_log_t)qword_1002BAEB8, OS_LOG_TYPE_ERROR)) {
      sub_1001EBB28(a1 + 32, v9, a1);
    }
  }

  uint64_t v10 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);

  return v10;
}

void sub_10000BA34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_10000BA4C(uint64_t a1, void *a2)
{
  id result = [a2 hasRows];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

void sub_10000BAE0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_1002A87E0;
  off_1002A87E0 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  __int128 v4 = (void *)qword_1002BAE88;
  qword_1002BAE88 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  unsigned __int8 v6 = (void *)qword_1002BAE90;
  qword_1002BAE90 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_1002BAE98;
  qword_1002BAE98 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  uint64_t v10 = (void *)qword_1002BAEA0;
  qword_1002BAEA0 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  int v12 = (void *)qword_1002BAEA8;
  qword_1002BAEA8 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  __int16 v14 = (void *)qword_1002BAEB0;
  qword_1002BAEB0 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  id v16 = (void *)qword_1002BAEB8;
  qword_1002BAEB8 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  uint64_t v18 = (void *)qword_1002BAEC0;
  qword_1002BAEC0 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  uint64_t v20 = (void *)qword_1002BAEC8;
  qword_1002BAEC8 = (uint64_t)v19;
}

uint64_t sub_10000BEDC(int a1, msghdr *a2, unsigned int a3, int a4)
{
  if (!a2 || (a3 & 0x80000000) != 0)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }

  else if (a3)
  {
    os_log_t v5 = a2;
    uint64_t v7 = 0LL;
    uint64_t v8 = a3;
    while (1)
    {
      ssize_t v9 = sendmsg(a1, v5, a4);
      if (v9 < 0) {
        break;
      }
      LODWORD(v5[1].msg_name) = v9;
      ++v7;
      os_log_t v5 = (msghdr *)((char *)v5 + 56);
      if (v8 == v7) {
        return v8;
      }
    }

    if ((_DWORD)v7) {
      return v7;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }

  else
  {
    return 0LL;
  }

void sub_10000BF78()
{
}

uint64_t sub_10000BF90(uint64_t a1)
{
  if (!a1) {
    sub_1001EBBFC();
  }
  if (*(_DWORD *)(a1 + 40) < 0xCu) {
    return 0LL;
  }
  else {
    return *(void *)(a1 + 32);
  }
}

char *sub_10000BFC0(uint64_t a1, unsigned int *a2)
{
  if (!a1) {
    sub_1001EBC24();
  }
  if (!a2) {
    sub_1001EBC4C();
  }
  if ((unint64_t)a2 + ((*a2 + 3LL) & 0x1FFFFFFFCLL) + 12 <= *(void *)(a1 + 32) {
  else
  }
    return 0LL;
}

uint64_t sub_10000C008(uint64_t a1)
{
  if (!a1) {
    sub_1001EBC74();
  }
  return a1 + 12;
}

uint64_t sub_10000C020(uint64_t a1)
{
  if (!a1) {
    sub_1001EBC9C();
  }
  return a1 + 12;
}

uint64_t sub_10000C038(uint64_t a1)
{
  return a1 + 12;
}

unint64_t sub_10000C040(uint64_t a1)
{
  return ((a1 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12;
}

void sub_10000C250(uint64_t a1)
{
  id v3 = objc_msgSend((id)objc_opt_class(*(void *)(a1 + 40), v2), "storeDescriptor");
  id v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend( *(id *)(a1 + 32),  "_modifyUsingTransactionClass:withBlock:",  objc_msgSend(v4, "transactionClass"),  *(void *)(a1 + 48));
}

id sub_10000C358(uint64_t a1)
{
  return [*(id *)(a1 + 32) _modifyUsingTransactionClass:*(void *)(a1 + 56) withBlock:*(void *)(a1 + 48)];
}

void sub_10000C42C(uint64_t a1)
{
  id v3 = objc_msgSend((id)objc_opt_class(*(void *)(a1 + 40), v2), "storeDescriptor");
  id v5 = (id)objc_claimAutoreleasedReturnValue(v3);
  id v4 = objc_msgSend( objc_alloc((Class)objc_msgSend(v5, "sessionClass")),  "initWithConnection:",  *(void *)(*(void *)(a1 + 32) + 8));
  [*(id *)(a1 + 32) _readUsingSession:v4 withBlock:*(void *)(a1 + 48)];
}

void sub_10000C770(_Unwind_Exception *a1)
{
}

id sub_10000C788(void *a1)
{
  id result = [*(id *)(a1[4] + 8) tableExists:a1[5]];
  *(_BYTE *)(*(void *)(a1[6] + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

void sub_10000C80C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) options]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 databasePath]);

  if ([*(id *)(*(void *)(a1 + 32) + 8) tableExists:@"schema_version"])
  {
    if (qword_1002BAF20 != -1) {
      dispatch_once(&qword_1002BAF20, &stru_10026F7E8);
    }
    id v4 = (os_log_s *)qword_1002BAF08;
    if (os_log_type_enabled((os_log_t)qword_1002BAF08, OS_LOG_TYPE_INFO))
    {
      int v6 = 138543362;
      uint64_t v7 = v3;
      id v5 = "Database opened at: %{public}@";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, v5, (uint8_t *)&v6, 0xCu);
    }
  }

  else
  {
    if (qword_1002BAF20 != -1) {
      dispatch_once(&qword_1002BAF20, &stru_10026F7E8);
    }
    id v4 = (os_log_s *)qword_1002BAF08;
    if (os_log_type_enabled((os_log_t)qword_1002BAF08, OS_LOG_TYPE_INFO))
    {
      int v6 = 138543362;
      uint64_t v7 = v3;
      id v5 = "Database created at: %{public}@";
      goto LABEL_10;
    }
  }
}

uint64_t sub_10000CA28(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_10000CC44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10000CC6C(void *a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(a1[6] + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = objc_msgSend( (id)objc_opt_class(a1[4], a2),  "createOrMigrateStoreUsingSchema:",  a1[5]);
  return *(unsigned __int8 *)(*(void *)(a1[6] + 8LL) + 24LL);
}

uint64_t sub_10000CD60(uint64_t a1)
{
  return 1LL;
}

void sub_10000CE40(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_1002A8848;
  off_1002A8848 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_1002BAED8;
  qword_1002BAED8 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  int v6 = (void *)qword_1002BAEE0;
  qword_1002BAEE0 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_1002BAEE8;
  qword_1002BAEE8 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  uint64_t v10 = (void *)qword_1002BAEF0;
  qword_1002BAEF0 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  int v12 = (void *)qword_1002BAEF8;
  qword_1002BAEF8 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  __int16 v14 = (void *)qword_1002BAF00;
  qword_1002BAF00 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  id v16 = (void *)qword_1002BAF08;
  qword_1002BAF08 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  uint64_t v18 = (void *)qword_1002BAF10;
  qword_1002BAF10 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  uint64_t v20 = (void *)qword_1002BAF18;
  qword_1002BAF18 = (uint64_t)v19;
}

void sub_10000D0B8(id a1)
{
  os_log_t v1 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
  uint64_t v2 = (void *)qword_1002BAF28;
  qword_1002BAF28 = (uint64_t)v1;

  os_log_t v3 = (void *)qword_1002BAF28;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimeZone timeZoneForSecondsFromGMT:](&OBJC_CLASS___NSTimeZone, "timeZoneForSecondsFromGMT:", 0LL));
  [v3 setTimeZone:v4];

  os_log_t v5 = -[NSLocale initWithLocaleIdentifier:]( objc_alloc(&OBJC_CLASS___NSLocale),  "initWithLocaleIdentifier:",  @"en_US_POSIX");
  [(id)qword_1002BAF28 setLocale:v5];

  _[(id)qword_1002BAF28 setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss'Z'"];
}

id sub_10000E398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_log_t v3 = *(void **)(*(void *)(a1 + 32) + 16LL);
  if (a3) {
    return [v3 setObject:a3 forKey:a2];
  }
  else {
    return [v3 removeObjectForKey:a2];
  }
}

LABEL_8:
    __int16 v14 = NSDebugDescriptionErrorKey;
    os_log_t v15 = @"SecItemCopyMatching succeeded with empty results";
    os_log_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
    os_log_t v9 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  ASDErrorDomain,  901LL,  v11));

    goto LABEL_10;
  }

  uint64_t v8 = CFGetTypeID(cf);
  if (v8 != CFDataGetTypeID()) {
    goto LABEL_8;
  }
  os_log_t v9 = 0LL;
  uint64_t v10 = (void *)cf;
  if (!a4) {
    goto LABEL_13;
  }
LABEL_11:
  if (!v10) {
    *a4 = v9;
  }
LABEL_13:
  CFRelease(v6);

  return v10;
}

  __break(1u);
}

  __break(1u);
  return result;
}

    swift_once(&qword_1002A8CC8, sub_10005B580);
    goto LABEL_5;
  }

  sub_100079D88();
  sub_100079DC4(v16, a2, a3, a4, a5);
LABEL_6:
  uint64_t v29 = v17;
  ByteBuffer.writeBytes<A>(_:)(a1, a6, a7);
  return sub_100079F40(v18, v19, v20, v21, v22, v23, v24, v25, v27, *((uint64_t *)&v27 + 1), v28, v29);
}

    os_log_t v11 = 0;
LABEL_10:
    *a5 = v11;
    return result;
  }

  __break(1u);
  return result;
}

    swift_once(&qword_1002A8CC8, sub_10005B580);
    goto LABEL_5;
  }

  type metadata accessor for ByteBuffer._Storage();
  static ByteBuffer._Storage.reallocated(minimumCapacity:allocator:)(v5, a1, a2, a3, a4);
  sub_1000C1348();
LABEL_6:
  sub_1000C135C();
  sub_10002A3D4();
}

    swift_once(&qword_1002A8CC8, sub_10005B580);
    goto LABEL_5;
  }

  type metadata accessor for ByteBuffer._Storage();
  static ByteBuffer._Storage.reallocated(minimumCapacity:allocator:)(v5, a1, a2, a3, a4);
  sub_1000C1348();
LABEL_6:
  sub_1000C135C();
  sub_10002A3D4();
}

      __chkstk_darwin(v23);
      *(&v35 - 2) = v39;
      sub_1000A8A1C( (void (*)(uint64_t, uint64_t))sub_1000EB14C,  (uint64_t)&type metadata for Never,  (uint64_t)&type metadata for String,  v25,  (uint64_t)&v40);
      if (v41) {
        unsigned int v26 = v40;
      }
      else {
        unsigned int v26 = 8287LL;
      }
      if (v41) {
        unsigned int v27 = v41;
      }
      else {
        unsigned int v27 = 0xE200000000000000LL;
      }
      unint64_t v28 = v27;
      String.append(_:)(*(Swift::String *)&v26);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v11, TupleTypeMetadata2);
      ((void (*)(uint64_t))EnumeratedSequence.Iterator.next())(v18);
      sub_1000EB7D8((uint64_t)v14, 1LL, TupleTypeMetadata2);
      if (v19) {
        goto LABEL_16;
      }
    }

    BOOL v24 = 60LL;
LABEL_7:
    sub_100081A00(v24);
    goto LABEL_8;
  }

  sub_1001566D8();
}

  __break(1u);
}

  uint64_t v21 = HTTPVersion.init(major:minor:)(1LL, 1LL);
  unsigned __int8 v22 = type metadata accessor for HTTPResponseHead._Storage();
  id v23 = swift_allocObject(v22, 44LL, 7LL);
  *(void *)(v23 + 16) = 0LL;
  *(void *)(v23 + 24) = 0LL;
  *(void *)(v23 + 32) = v12;
  *(ASOctaneSupportXPCService::HTTPVersion *)(v23 + 40) = v21;
  *(void *)a2 = v23;
  *(void *)(a2 + _Block_object_dispose(va, 8) = _swiftEmptyArrayStorage;
  *(_BYTE *)(a2 + 16) = 2;
  id result = v25;
  *(__n128 *)(a2 + 24) = v25;
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 4_Block_object_dispose(va, 8) = v3;
  *(_BYTE *)(a2 + 62) = v6;
  *(_WORD *)(a2 + 60) = v5;
  *(_DWORD *)(a2 + 56) = v4;
  return result;
}

uint64_t sub_100011028(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) executeStatement:@"PRAGMA user_version = 1;" error:0];
  objc_msgSend( *(id *)(*(void *)(a1 + 32) + 8),  "executeStatement:error:",  @"CREATE TABLE IF NOT EXISTS schema_version (schema_name TEXT, schema_version INTEGER DEFAULT 0, PRIMARY KEY(schema_name));",
    0LL);
  return 1LL;
}

void sub_100011110( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100011128(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16LL);
  id v4 = a2;
  [v4 bindString:v3 atPosition:1];
  id v5 = [v4 firstInt64Value];

  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v5;
}

void sub_100011280( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100011298(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100011310;
  v5[3] = &unk_10026F668;
  __int128 v4 = *(_OWORD *)(a1 + 32);
  id v3 = (id)v4;
  *(_OWORD *)int v6 = v4;
  [a2 enumerateRowsUsingBlock:v5];
}

void sub_100011310(uint64_t a1, void *a2, uint64_t a3, unsigned __int8 *a4)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue([a2 stringForColumnName:@"name"]);
  unsigned __int8 v6 = [v7 isEqualToString:*(void *)(a1 + 32)];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v6;
  *a4 = v6;
}

id sub_100011400(void *a1)
{
  uint64_t v2 = -[SQLiteDatabaseStoreMigrator initWithConnection:]( objc_alloc(&OBJC_CLASS___SQLiteDatabaseStoreMigrator),  "initWithConnection:",  *(void *)(a1[4] + 8LL));
  (*(void (**)(void))(a1[5] + 16LL))();
  if (-[SQLiteDatabaseStoreMigrator success](v2, "success"))
  {
    uint64_t v3 = a1[4];
    __int128 v4 = *(void **)(v3 + 8);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1000114C0;
    v8[3] = &unk_10026F938;
    uint64_t v5 = a1[6];
    void v8[4] = v3;
    v8[5] = v5;
    id v6 = objc_msgSend( v4,  "executeStatement:error:bindings:",  @"INSERT OR REPLACE INTO schema_version (schema_name, schema_version) VALUES (?, ?)",  0,  v8);
  }

  else
  {
    id v6 = 0LL;
  }

  return v6;
}

void sub_1000114C0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16LL);
  id v4 = a2;
  [v4 bindString:v3 atPosition:1];
  [v4 bindInt64:*(void *)(a1 + 40) atPosition:2];
}

void sub_1000115D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000115E8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindString:v3 atPosition:1];
  LOBYTE(v3) = [v4 hasRows];

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v3;
}

void *sub_100011798(unsigned int a1)
{
  if (qword_1002BAF38 != -1) {
    dispatch_once(&qword_1002BAF38, &stru_10026F9D0);
  }
  return *(&off_1002A8850 + a1);
}

void sub_100011964(_Unwind_Exception *a1)
{
}

void sub_100011BA8(_Unwind_Exception *a1)
{
}

LABEL_13:
  return v13;
}

  return v9;
}

    sub_10002A44C();
    return;
  }

  os_log_t v13 = *(void *)(*(void *)v0 + 160LL);
  if (*(void *)(v0 + v13))
  {
    if (v4)
    {
      __int16 v14 = sub_100029C98();
      os_log_t v15 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v14);
      void *v16 = 0LL;
LABEL_8:
      sub_10002A554(v15, (uint64_t)v16);
      sub_10002A3E4();
      sub_10002A620();
      sub_10002A44C();
      swift_errorRelease(v19);
      return;
    }

    goto LABEL_13;
  }

  uint64_t v20 = sub_1000262B8();
  sub_10002A63C(v20);
  sub_10002A4E4();
  sub_10002A52C(v21, v22, v23, v24, v25);
  swift_release(v1);
  sub_10002A338();
  if ((v2 & 0xFB00) == 0)
  {
    if (v4)
    {
      unsigned int v27 = sub_100029C98();
      os_log_t v15 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v27);
      uint64_t v18 = 12LL;
      goto LABEL_7;
    }

    goto LABEL_13;
  }

  unsigned int v26 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 632LL))(v6);
  if ((v26 & 1) != 0)
  {
    sub_100027AF4();
    sub_10002A44C();
    sub_100028F08();
  }

  else
  {
    sub_100027AF4();
    if (v4)
    {
      *(void *)(v0 + v13) = v4;
      sub_10002A4C8();
    }

    else
    {
      sub_10002A830();
      unint64_t v28 = sub_10002A340();
      EmbeddedChannel.WrongTypeError.actual.getter(v28, (uint64_t)&type metadata for () + 8);
      sub_10002A730();
      unsigned int v33 = EventLoop.makePromise<A>(of:file:line:)( v29,  v30,  v31,  v32,  1169LL,  v28,  (uint64_t)&type metadata for () + 8,  (uint64_t)&protocol witness table for SelectableEventLoop);
      sub_10002A338();
      *(void *)(v0 + v13) = v33;
    }

    sub_100024F0C();
    sub_100028DFC();
    sub_10002A44C();
    sub_100027D4C();
  }

  v18[3] = v1;
  v18[0] = v5;
  v18[1] = v6;
  void v18[2] = v7;
  LOBYTE(v19) = 2;
  swift_retain();
  sub_10001ED74();
  sub_100035534();
  sub_1000324E8((uint64_t)v18);
  sub_10002A524();
  sub_10001A3F8();
LABEL_17:
  sub_10002A580();
}

    __break(1u);
    goto LABEL_14;
  }

  return result;
}

        __break(1u);
        goto LABEL_14;
      }

      __break(1u);
      goto _$s25ASOctaneSupportXPCService10ByteBufferV8getBytes2at6lengthSays5UInt8VGSgSi_SitF;
    }

  __break(1u);
}

  sub_100023E74();
}

      sub_100034FD0();
      sub_100035144();
      goto LABEL_14;
    }
  }

  sub_100034FD0();
  sub_100035154();
LABEL_14:
  id result = (void *)sub_100035124(v30, v31, v32, v33, v34, v35, v36);
  __break(1u);
  return result;
}

  if (qword_1002A8CE8 != -1) {
    swift_once(&qword_1002A8CE8, sub_1000DF248);
  }
  sub_1000E0270();
  sub_10015F804(v6, v8);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

  _Block_copy(aBlock);
  if (qword_1002A8CE8 != -1) {
    swift_once(&qword_1002A8CE8, sub_1000DF248);
  }
  (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  _Block_release(aBlock);
  sub_10015F804(v37, v11);
  swift_bridgeObjectRelease();
  _Block_release(aBlock);
  _Block_release(aBlock);
  return swift_bridgeObjectRelease();
}

void sub_100011FC8(_Unwind_Exception *a1)
{
}

LABEL_12:
}

  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    os_log_t v17 = *(void *)(a1 + 32);
    uint64_t v18 = *(void **)(v17 + 8);
    *(void *)(v17 + _Block_object_dispose(va, 8) = 0LL;

    os_log_t v19 = *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) != 0;
  }

  else
  {
    os_log_t v19 = 0LL;
  }

  return v19;
}

  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL);
  __break(1u);
}

        __break(1u);
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }

      __break(1u);
      goto LABEL_13;
    }

    __break(1u);
    goto LABEL_13;
  }

    *(_BYTE *)(a1 + 56) = v4;
  }

  return a1;
}

  int v41 = 0LL;
LABEL_14:
  sub_10001A3F8();
  return v41;
}

  if (((v10 >> 3) & 1) != 0) {
    goto LABEL_13;
  }
LABEL_8:
  if (((v10 >> 5) & 1) != 0) {
LABEL_9:
  }
    sub_100075C04();
LABEL_14:
  sub_10001DAB8();
}

  swift_bridgeObjectRelease(a6);
  if ((v12 ^ a2) < 0x4000)
  {
    uint64_t v21 = a4;
LABEL_16:
    swift_bridgeObjectRelease(v21);
    return 1LL;
  }

  Substring.subscript.getter(v12, a1, a2, a3, a4);
  id v23 = v22;
  Substring.index(after:)(v12, a1, a2, a3, a4);
  swift_bridgeObjectRelease(v23);
  id v25 = a4;
LABEL_17:
  swift_bridgeObjectRelease(v25);
  return 0LL;
}

    sub_100083070();
    id result = sub_100083058( (uint64_t)"Fatal error",  v3,  v4,  (uint64_t)"Negative value is not representable",  v5,  v6,  (uint64_t)"Swift/Integers.swift");
    __break(1u);
    return result;
  }

  if ((a1 & 0x8000000000000000LL) != 0) {
    goto LABEL_12;
  }
  if (a2 && a1 < a2) {
    return 0LL;
  }
  id result = a1 - a2;
  if (result < 0)
  {
    __break(1u);
    goto LABEL_12;
  }

  return result;
}

  id v23 = v30;
  BOOL v24 = *v29;
  *(void *)(*v29 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  id result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))( *(void *)(v24 + 48) + *(void *)(v7 + 72) * a2,  v23,  v6);
  unsigned int v26 = *(void *)(v24 + 16);
  unsigned int v27 = __OFADD__(v26, 1LL);
  unint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }

  __break(1u);
LABEL_15:
  id result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

  if (v5 == v2 && v6 == v3)
  {
    uint64_t v8 = 1;
    uint64_t v3 = v6;
  }

  else
  {
    uint64_t v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v2, v3, 0LL);
  }

  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v3);
  return v8 & 1;
}

void sub_100012328( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100012340(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindString:v3 atPosition:1];
  LOBYTE(v3) = [v4 hasRows];

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v3;
}

id sub_1000127E0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) step];
}

void sub_100012B60(uint64_t a1)
{
  __int128 v6 = 0u;
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      uint64_t v5 = 0LL;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v6 + 1) + 8LL * (void)v5) + 16LL))(*(void *)(*((void *)&v6 + 1) + 8LL * (void)v5));
        uint64_t v5 = (char *)v5 + 1;
      }

      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }

    while (v3);
  }
}

void sub_100012E0C(sqlite3_context *a1)
{
}

void sub_100013058( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100013070(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100013080(uint64_t a1)
{
}

uint64_t sub_100013088(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 16LL), *(const char **)(a1 + 48), -1, &ppStmt, 0LL);
  if (sub_100013D98(v2))
  {
    id v3 = objc_alloc(&OBJC_CLASS___SQLiteStatement);
    uint64_t v4 = -[SQLiteStatement initWithStatement:onConnection:]( v3,  "initWithStatement:onConnection:",  ppStmt,  *(void *)(a1 + 32));
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
    __int128 v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }

  else
  {
    sqlite3_finalize(ppStmt);
  }

  return v2;
}

void sub_100013708(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_1002A8850;
  off_1002A8850 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  uint64_t v4 = (void *)qword_1002A8858;
  qword_1002A8858 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  __int128 v6 = (void *)qword_1002A8860;
  qword_1002A8860 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  __int128 v8 = (void *)qword_1002A8868;
  qword_1002A8868 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  uint64_t v10 = (void *)qword_1002A8870;
  qword_1002A8870 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  int v12 = (void *)qword_1002A8878;
  qword_1002A8878 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  __int16 v14 = (void *)qword_1002A8880;
  qword_1002A8880 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  id v16 = (void *)qword_1002A8888;
  qword_1002A8888 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  uint64_t v18 = (void *)qword_1002A8890;
  qword_1002A8890 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  uint64_t v20 = (void *)qword_1002A8898;
  qword_1002A8898 = (uint64_t)v19;
}

void sub_100013844( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

void sub_100013874( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

id sub_1000138A0(void *a1)
{
  return a1;
}

uint64_t sub_1000138AC(uint64_t a1, uint64_t a2)
{
  return objc_opt_class(v2, a2);
}

id sub_1000138B8(id a1)
{
  return a1;
}

id sub_1000138C0(uint64_t a1, void *a2)
{
  return a2;
}

void sub_1000138CC( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

BOOL sub_1000138DC(os_log_s *a1)
{
  return os_log_type_enabled(a1, OS_LOG_TYPE_FAULT);
}

uint64_t sub_1000138E8()
{
  return v0;
}

uint64_t sub_1000138F4(sqlite3 *a1, void *a2)
{
  id v3 = a2;
  sqlite3_extended_result_codes(a1, 1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 encryptionKeyId]);

  if (v4) {
  uint64_t v5 = sqlite3_exec(a1, "PRAGMA journal_mode=WAL", 0LL, 0LL, 0LL);
  }
  if (!(_DWORD)v5)
  {
    __int128 v6 = -[NSString initWithFormat:]( [NSString alloc], "initWithFormat:", @"PRAGMA cache_size=%ld", [v3 cacheSize]);
    uint64_t v5 = sqlite3_exec(a1, -[NSString UTF8String](v6, "UTF8String"), 0LL, 0LL, 0LL);
  }

  return v5;
}

uint64_t static _UInt24.min.getter()
{
  return 0LL;
}

BOOL sub_1000139E8(void *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSFileManager);
  id v3 = sub_100013A94(v1, 0LL);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  -[NSFileManager removeItemAtPath:error:](v2, "removeItemAtPath:error:", v4, 0LL);

  id v5 = sub_100013A94(v1, 1LL);
  __int128 v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  -[NSFileManager removeItemAtPath:error:](v2, "removeItemAtPath:error:", v6, 0LL);

  BOOL v7 = -[NSFileManager removeItemAtPath:error:](v2, "removeItemAtPath:error:", v1, 0LL);
  return v7;
}

id sub_100013A94(void *a1, uint64_t a2)
{
  id v4 = a1;
  id v5 = v4;
  if (!a2)
  {
    __int128 v6 = @"-shm";
    goto LABEL_5;
  }

  if (a2 == 1)
  {
    __int128 v6 = @"-wal";
LABEL_5:
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v4 stringByAppendingString:v6]);
  }

  return v2;
}

id sub_100013AF8(sqlite3 *a1)
{
  int v2 = sqlite3_errcode(a1);
  if (v2)
  {
    int v3 = v2;
    id v4 = (char *)sqlite3_errmsg(a1);
    if (v4)
    {
      id v5 = -[NSString initWithUTF8String:](objc_alloc(&OBJC_CLASS___NSString), "initWithUTF8String:", v4);
      id v4 = -[NSDictionary initWithObjectsAndKeys:]( objc_alloc(&OBJC_CLASS___NSDictionary),  "initWithObjectsAndKeys:",  v5,  NSLocalizedDescriptionKey,  0LL);
    }

    __int128 v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"SQLiteErrorDomain",  v3,  v4));
  }

  else
  {
    __int128 v6 = 0LL;
  }

  return v6;
}

uint64_t sub_100013BBC(sqlite3 **a1, void *a2)
{
  id v3 = a2;
  ppDb = 0LL;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 databasePath]);
  if ([v3 isReadOnly])
  {
    int v5 = 2;
  }

  else
  {
    __int128 v6 = objc_alloc_init(&OBJC_CLASS___NSFileManager);
    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([v4 stringByDeletingLastPathComponent]);
    -[NSFileManager createDirectoryAtPath:withIntermediateDirectories:attributes:error:]( v6,  "createDirectoryAtPath:withIntermediateDirectories:attributes:error:",  v7,  1LL,  0LL,  0LL);

    int v5 = 6;
  }

  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([v3 protectionType]);
  os_log_t v9 = v8;
  if (v8) {
    v5 |= sub_100013CE4(v8);
  }
  id v10 = v4;
  uint64_t v11 = sqlite3_open_v2((const char *)[v10 fileSystemRepresentation], &ppDb, v5, 0);
  if ((_DWORD)v11 || (uint64_t v11 = sub_1000138F4(ppDb, v3), (_DWORD)v11))
  {
    if (ppDb) {
      sqlite3_close(ppDb);
    }
  }

  else
  {
    *a1 = ppDb;
  }

  return v11;
}

uint64_t sub_100013CE4(void *a1)
{
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    if ([v1 isEqualToString:NSFileProtectionNone])
    {
      uint64_t v3 = 0x400000LL;
    }

    else if ([v2 isEqualToString:NSFileProtectionComplete])
    {
      uint64_t v3 = 0x100000LL;
    }

    else if ([v2 isEqualToString:NSFileProtectionCompleteUnlessOpen])
    {
      uint64_t v3 = 0x200000LL;
    }

    else if ([v2 isEqualToString:NSFileProtectionCompleteUntilFirstUserAuthentication])
    {
      uint64_t v3 = 3145728LL;
    }

    else
    {
      uint64_t v3 = 0LL;
    }
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  return v3;
}

BOOL sub_100013D98(unsigned __int8 a1)
{
  return a1 - 100 < 2 || a1 == 0;
}

BOOL sub_100013DB4(void *a1)
{
  ppDb = 0LL;
  if (sqlite3_open_v2( (const char *)[a1 fileSystemRepresentation], &ppDb, 2, 0))
  {
    return 0LL;
  }

  int v3 = 129;
  BOOL v1 = sqlite3_file_control(ppDb, 0LL, 101, &v3) == 0;
  sqlite3_close(ppDb);
  return v1;
}

NSString *sub_100013F4C(uint64_t a1)
{
  return +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"com.apple.storekit.unfinishedtransactions.%@",  a1);
}

__CFString *sub_100013F80(unint64_t a1)
{
  if (a1 >= 4) {
    return (__CFString *)(id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unknown: %ld",  a1));
  }
  else {
    return off_10026FCF0[a1];
  }
}

BOOL sub_100013FD0(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFFFFFDLL) == 1;
}

void sub_1000141BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1000141D4(uint64_t a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100014260;
  v7[3] = &unk_10026FD30;
  uint64_t v10 = *(void *)(a1 + 56);
  int v2 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v8 = v3;
  uint64_t v9 = v4;
  [v2 enumerateKeysAndObjectsUsingBlock:v7];
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);

  return v5;
}

BOOL sub_100014260(void *a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  BOOL result = +[SQLiteEntity _insertValues:intoTable:withPersistentID:onConnection:]( &OBJC_CLASS___SQLiteEntity,  "_insertValues:intoTable:withPersistentID:onConnection:",  a3,  a2,  a1[6],  a1[4]);
  if (!result)
  {
    *(_BYTE *)(*(void *)(a1[5] + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 0;
    *a4 = 1;
  }

  return result;
}

void sub_1000144CC(_Unwind_Exception *a1)
{
}

BOOL sub_1000144E8(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = objc_msgSend((id)objc_opt_class(v3, a2), "databaseTable");
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = [v3 _deleteRowFromTable:v5 usingColumn:@"ROWID"];

  id v7 = objc_msgSend((id)objc_opt_class(*(void *)(a1 + 32), v6), "foreignDatabaseTablesToDelete");
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  id v8 = (id)objc_claimAutoreleasedReturnValue(v7);
  id v9 = [v8 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v9)
  {
    id v11 = v9;
    uint64_t v12 = *(void *)v22;
    while (2)
    {
      for (i = 0LL; i != v11; i = (char *)i + 1)
      {
        if (*(void *)v22 != v12) {
          objc_enumerationMutation(v8);
        }
        uint64_t v14 = *(void *)(*((void *)&v21 + 1) + 8LL * (void)i);
        os_log_t v15 = (void *)objc_opt_class(*(void *)(a1 + 32), v10);
        id v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "foreignKeyColumnForTable:", v14, (void)v21));
        if (v16)
        {
          *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = [*(id *)(a1 + 32) _deleteRowFromTable:v14 usingColumn:v16];
          if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
          {

            goto LABEL_12;
          }
        }
      }

      id v11 = [v8 countByEnumeratingWithState:&v21 objects:v25 count:16];
      if (v11) {
        continue;
      }
      break;
    }
  }

void sub_1000146B8(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  uint64_t v5 = @"SQLiteUserInfoKeyPersistentID";
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", *(void *)(a1 + 32)));
  uint64_t v6 = v3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v6,  &v5,  1LL));
  [v2 postNotificationName:@"SQLiteDidDeleteEntityNotification" object:0 userInfo:v4];
}

void sub_10001487C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100014894(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16LL);
  id v4 = a2;
  [v4 bindInt64:v3 atPosition:1];
  LOBYTE(v3) = [v4 hasRows];

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v3;
}

void sub_100014C28(id *a1, void *a2, uint64_t a3)
{
  id v5 = a1[6];
  id v6 = a2;
  id v8 = (id)objc_claimAutoreleasedReturnValue([v5 disambiguatedSQLForProperty:v6]);
  if (a3) {
    objc_msgSend(a1[4], "appendString:", @", ");
  }
  [a1[4] appendString:v8];
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a1[6] joinClauseForProperty:v6]);

  if (v7) {
    [a1[5] addObject:v7];
  }
}

void sub_100014CC8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16LL);
  id v4 = a2;
  [v4 bindInt64:v3 atPosition:1];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100014D70;
  v5[3] = &unk_10026FDF0;
  id v6 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  [v4 enumerateRowsUsingBlock:v5];
}

void sub_100014D70(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id v6 = objc_autoreleasePoolPush();
  if (v8)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100014E30;
    v9[3] = &unk_10026F550;
    id v7 = *(void **)(a1 + 32);
    id v10 = *(id *)(a1 + 40);
    id v11 = v8;
    [v7 enumerateObjectsUsingBlock:v9];
  }

  objc_autoreleasePoolPop(v6);
}

void sub_100014E30(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(void **)(a1 + 40);
  id v6 = a2;
  id v7 = sub_100002F48(v5, a3);
  id v8 = (id)objc_claimAutoreleasedReturnValue(v7);
  [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:v6];
}

void sub_10001505C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_100015078(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _copyTableClusteredValuesWithValues:*(void *)(a1 + 40)];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100015120;
  v7[3] = &unk_10026FE90;
  uint64_t v11 = *(void *)(a1 + 64);
  id v3 = *(id *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 32);
  id v8 = v3;
  uint64_t v9 = v4;
  uint64_t v10 = *(void *)(a1 + 56);
  [v2 enumerateKeysAndObjectsUsingBlock:v7];
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);

  return v5;
}

void sub_100015120(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) foreignKeyColumnForTable:v7]);
  if (v9) {
    uint64_t v10 = (__CFString *)v9;
  }
  else {
    uint64_t v10 = @"ROWID";
  }
  uint64_t v31 = 0LL;
  v32 = &v31;
  uint64_t v33 = 0x2020000000LL;
  char v34 = 1;
  if (([v7 isEqualToString:*(void *)(a1 + 32)] & 1) == 0)
  {
    uint64_t v11 = -[NSMutableString initWithString:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithString:",  @"SELECT 1 FROM ");
    -[NSMutableString appendString:](v11, "appendString:", v7);
    -[NSMutableString appendString:](v11, "appendString:", @" WHERE ");
    -[NSMutableString appendString:](v11, "appendString:", v10);
    -[NSMutableString appendString:](v11, "appendString:", @" =  ? LIMIT 1;");
    uint64_t v12 = *(void *)(a1 + 40);
    os_log_t v13 = *(void **)(v12 + 8);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    v30[2] = sub_100015468;
    v30[3] = &unk_10026F618;
    v30[4] = v12;
    v30[5] = &v31;
    [v13 executeQuery:v11 withResults:v30];
  }

  if (*((_BYTE *)v32 + 24))
  {
    uint64_t v14 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    os_log_t v15 = -[NSMutableString initWithString:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithString:",  @"UPDATE ");
    -[NSMutableString appendString:](v15, "appendString:", v7);
    -[NSMutableString appendString:](v15, "appendString:", @" SET ");
    v28[0] = 0LL;
    v28[1] = v28;
    v28[2] = 0x2020000000LL;
    char v29 = 0;
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    void v24[2] = sub_1000154C4;
    v24[3] = &unk_10026FE40;
    unsigned int v27 = v28;
    id v16 = v15;
    id v25 = v16;
    uint64_t v17 = v14;
    unsigned int v26 = v17;
    [v8 enumerateKeysAndObjectsUsingBlock:v24];
    -[NSMutableString appendString:](v16, "appendString:", @" WHERE ");
    -[NSMutableString appendString:](v16, "appendString:", v7);
    -[NSMutableString appendString:](v16, "appendString:", @".");
    -[NSMutableString appendString:](v16, "appendString:", v10);
    -[NSMutableString appendString:](v16, "appendString:", @" = ?;");
    uint64_t v18 = *(void **)(*(void *)(a1 + 40) + 8LL);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    void v21[2] = sub_10001555C;
    v21[3] = &unk_10026FE68;
    BOOL v19 = v17;
    uint64_t v20 = *(void *)(a1 + 40);
    __int128 v22 = v19;
    uint64_t v23 = v20;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = [v18 executeStatement:v16 error:0 bindings:v21];

    _Block_object_dispose(v28, 8);
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = +[SQLiteEntity _insertValues:intoTable:withPersistentID:onConnection:]( &OBJC_CLASS___SQLiteEntity,  "_insertValues:intoTable:withPersistentID:onConnection:",  v8,  v7,  *(void *)(*(void *)(a1 + 40) + 16LL),  *(void *)(*(void *)(a1 + 40) + 8LL));
  }

  *a4 = *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) ^ 1;
  _Block_object_dispose(&v31, 8);
}

void sub_100015430(_Unwind_Exception *a1)
{
}

void sub_100015468(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16LL);
  id v4 = a2;
  [v4 bindInt64:v3 atPosition:1];
  LOBYTE(v3) = [v4 hasRows];

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v3;
}

void sub_1000154C4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL)) {
    objc_msgSend(*(id *)(a1 + 32), "appendString:", @", ");
  }
  [*(id *)(a1 + 32) appendString:v6];
  [*(id *)(a1 + 32) appendString:@" = ?"];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  [*(id *)(a1 + 40) addObject:v5];
}

void sub_10001555C(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v13;
    uint64_t v8 = 1LL;
    do
    {
      uint64_t v9 = 0LL;
      uint64_t v10 = v8;
      do
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        sub_100008608(v3, (uint64_t)v9 + v10, *(void **)(*((void *)&v12 + 1) + 8LL * (void)v9));
        uint64_t v9 = (char *)v9 + 1;
      }

      while (v6 != v9);
      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
      uint64_t v8 = (v10 + (_DWORD)v9);
    }

    while (v6);
    uint64_t v11 = (v10 + (_DWORD)v9);
  }

  else
  {
    uint64_t v11 = 1LL;
  }

  objc_msgSend(v3, "bindInt64:atPosition:", *(void *)(*(void *)(a1 + 40) + 16), v11, (void)v12);
}

void sub_100015A78(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 bindInt64:*(void *)(a1 + 40) atPosition:1];
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    uint64_t v8 = 2LL;
    do
    {
      uint64_t v9 = 0LL;
      do
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "objectForKeyedSubscript:",  *(void *)(*((void *)&v11 + 1) + 8 * (void)v9),  (void)v11));
        sub_100008608(v3, (uint64_t)v9 + v8, v10);

        uint64_t v9 = (char *)v9 + 1;
      }

      while (v6 != v9);
      id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
      uint64_t v8 = (v8 + (_DWORD)v9);
    }

    while (v6);
  }
}

void sub_100015C94(id *a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  if (([v10 isEqualToString:@"ROWID"] & 1) == 0)
  {
    uint64_t v6 = objc_claimAutoreleasedReturnValue([a1[6] foreignDatabaseTableForProperty:v10]);
    if (v6)
    {
      id v7 = (id)v6;
      id v8 = (id)objc_claimAutoreleasedReturnValue([a1[6] foreignDatabaseColumnForProperty:v10]);
    }

    else
    {
      id v8 = v10;
      id v7 = a1[4];
    }

    uint64_t v9 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([a1[5] objectForKey:v7]);
    if (!v9)
    {
      uint64_t v9 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      [a1[5] setObject:v9 forKey:v7];
    }

    -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", v5, v8);
  }
}

id sub_100015E50(uint64_t a1, void *a2)
{
  return [a2 bindInt64:*(void *)(*(void *)(a1 + 32) + 16) atPosition:1];
}

void sub_1000160B8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_1002A8C98;
  off_1002A8C98 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_1002BAF40;
  qword_1002BAF40 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  uint64_t v6 = (void *)qword_1002BAF48;
  qword_1002BAF48 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  id v8 = (void *)qword_1002BAF50;
  qword_1002BAF50 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_1002BAF58;
  qword_1002BAF58 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  __int128 v12 = (void *)qword_1002BAF60;
  qword_1002BAF60 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  __int128 v14 = (void *)qword_1002BAF68;
  qword_1002BAF68 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  id v16 = (void *)qword_1002BAF70;
  qword_1002BAF70 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  uint64_t v18 = (void *)qword_1002BAF78;
  qword_1002BAF78 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  uint64_t v20 = (void *)qword_1002BAF80;
  qword_1002BAF80 = (uint64_t)v19;
}

void sub_1000162CC(id a1)
{
  os_log_t v1 = (void *)qword_1002BAF90;
  qword_1002BAF90 = (uint64_t)&off_100297BA0;
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  qword_1002EB8E0 = (uint64_t)[objc_allocWithZone((Class)type metadata accessor for OctaneXPCServiceDelegate()) init];
  qword_1002EB8E8 = (uint64_t)[(id)objc_opt_self(NSXPCListener) serviceListener];
  [(id)qword_1002EB8E8 setDelegate:qword_1002EB8E0];
  sub_10001672C(0LL, &qword_1002A8EC8, &OBJC_CLASS___OS_dispatch_source_ptr);
  sub_10001672C(0LL, (unint64_t *)&qword_1002B6F70, &OBJC_CLASS___OS_dispatch_queue_ptr);
  os_log_t v11 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v12 = static OS_dispatch_source.makeSignalSource(signal:queue:)(15LL, v11);

  qword_1002EB8F0 = v12;
  uint64_t ObjectType = swift_getObjectType(v12);
  aBlock[4] = sub_100016764;
  aBlock[5] = 0LL;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000169C8;
  aBlock[3] = &unk_100274830;
  __int128 v14 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v14);
  sub_100016A0C();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v10, v6, v14, ObjectType);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_getObjectType(qword_1002EB8F0);
  OS_dispatch_source.resume()();
  [(id)qword_1002EB8E8 activate];
  return 0;
}

uint64_t sub_10001672C(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

void sub_100016764()
{
  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = sub_100018F68(v0, (uint64_t)qword_1002EB9D0);
  id v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Stopping Octane server", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  if (qword_1002A8CE8 != -1) {
    swift_once(&qword_1002A8CE8, sub_1000DF248);
  }
  sub_1000D0C44();
  [(id)qword_1002EB8E8 invalidate];
  exit(0);
}

uint64_t sub_1000169C8(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_1000169F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100016A04(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100016A0C()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = _swiftEmptyArrayStorage;
  sub_100018AA0( (unint64_t *)&qword_1002B6F20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v2 = v1;
  uint64_t v3 = sub_1000175B0(&qword_1002A9118);
  sub_100018F34((unint64_t *)&qword_1002B6F30, &qword_1002A9118);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v6, v3, v4, v0, v2);
}

void variable initialization expression of HTTPServerPipelineHandler.eventBuffer()
{
}

void variable initialization expression of SelectableEventLoop._scheduledTasks()
{
}

void *variable initialization expression of SelectableEventLoop.tasksCopy()
{
  return &_swiftEmptyArrayStorage;
}

void variable initialization expression of MultiThreadedEventLoopGroup.shutdownLock(uint64_t a1, uint64_t a2)
{
}

SecKeyAlgorithm variable initialization expression of ECDSASignatureVerifier.algorithm()
{
  return (id)kSecKeyAlgorithmECDSASignatureDigestX962SHA256;
}

uint64_t variable initialization expression of ByteToMessageHandler.decoder@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001762C(a2, 1LL, 1LL, a1);
}

void variable initialization expression of ByteToMessageHandler.queuedWrites()
{
}

double variable initialization expression of ByteToMessageHandler.buffer@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 47) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

double Channel.syncOptions.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0LL;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t variable initialization expression of AddressedEnvelope.metadata()
{
  return 4LL;
}

unint64_t variable initialization expression of AddressedEnvelope.Metadata.packetInfo()
{
  return 0xF000000000000007LL;
}

uint64_t variable initialization expression of MultiThreadedEventLoopGroup.index()
{
  uint64_t v0 = sub_1000175B0(&qword_1002A8EE0);
  uint64_t v1 = swift_bufferAllocate(v0, 24LL, 7LL);
  sub_100006F60((void *)(v1 + 16), 0LL);
  return swift_dynamicCastClassUnconditional(v1, v0, 0LL, 0LL, 0LL);
}

uint64_t variable initialization expression of MultiThreadedEventLoopGroup.runState()
{
  return 0LL;
}

uint64_t variable initialization expression of ClientBootstrap.connectTimeout()
{
  return 10000000000LL;
}

uint64_t variable initialization expression of Lock.mutex()
{
  return sub_100019464(64LL);
}

uint64_t variable initialization expression of ConditionLock.cond()
{
  return sub_100019464(48LL);
}

uint64_t variable initialization expression of MarkedCircularBuffer._markedIndexOffset()
{
  return 0LL;
}

uint64_t sub_100016C28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 - a1;
  BOOL v3 = a2 < a1;
  if (a2 <= a1)
  {
    uint64_t result = 0LL;
    if (!v3) {
      return result;
    }
    unint64_t v7 = ~a2 + a1;
    unint64_t v8 = a1 ^ 0x8000000000000000LL;
    if (v7 >= v8) {
      unint64_t v7 = v8;
    }
    unint64_t v9 = 0x8000000000000000LL;
    if (v7 < 0x8000000000000000LL) {
      unint64_t v9 = v7;
    }
    while ((v7 & 0x8000000000000000LL) == 0)
    {
      if (v8 == v9) {
        goto LABEL_18;
      }
      if (v4 == --result) {
        return result;
      }
    }
  }

  else
  {
    uint64_t result = 0LL;
    unint64_t v6 = ~a1 + a2;
    while (v6 <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (v4 == ++result) {
        return result;
      }
    }

    __break(1u);
  }

  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

dispatch_semaphore_t variable initialization expression of NIOThreadPool.semaphore()
{
  return dispatch_semaphore_create(0LL);
}

uint64_t variable initialization expression of NIOThreadPool.state()
{
  return 0LL;
}

void variable initialization expression of EmbeddedEventLoop.scheduledTasks()
{
}

uint64_t _s25ASOctaneSupportXPCService19SelectableEventLoopC21_promiseCreationStore33_0BCEACC3506919B1B13063BD91501C76LLSDyAA09_NIOEventF16FutureIdentifierVs12StaticStringV4file_Su4linetGvpfi_0()
{
  uint64_t v0 = sub_1000175B0(&qword_1002A8ED0);
  sub_1000175F0();
  return Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for _NIOEventLoopFutureIdentifier,  v0);
}

void variable initialization expression of EmbeddedChannelCore.pendingOutboundBuffer(uint64_t a1@<X8>)
{
  *(void *)a1 = v2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = 0LL;
  *(_BYTE *)(a1 + 32) = 1;
  sub_10001945C();
}

void variable initialization expression of EmbeddedChannelCore.inboundBuffer()
{
}

void *(__cdecl *ByteBufferAllocator.init()())(size_t __size)
{
  return j_j__malloc;
}

void variable initialization expression of EmbeddedChannel.embeddedEventLoop()
{
}

void sub_100016DA0(uint64_t (*a1)(void), uint64_t a2, void (*a3)(void))
{
  uint64_t v5 = a1(0LL);
  sub_100019310(v5, a2);
  a3();
  sub_10001945C();
}

unint64_t variable initialization expression of EmbeddedChannel.remoteAddress()
{
  return 0xF000000000000007LL;
}

void sub_100016DE0(void *a1@<X8>)
{
  *a1 = variable initialization expression of MessageToByteHandler.state();
  sub_10001945C();
}

void sub_100016E00(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = sub_1000D61C4(*a1, *v2);
  sub_10001945C();
}

uint64_t sub_100016E28(uint64_t a1, void *a2)
{
  return sub_1000D68C8(a1, *a2);
}

uint64_t sub_100016E30(void *a1)
{
  return sub_1000D68D8(*a1);
}

uint64_t sub_100016E38(void *a1)
{
  return sub_1000D68D0(*a1);
}

uint64_t sub_100016E40()
{
  return sub_10018633C(*v0);
}

void sub_100016E48(int a1)
{
}

uint64_t sub_100016E50(uint64_t a1)
{
  return sub_1000B29CC(a1, *v1);
}

BOOL sub_100016E58(uint64_t *a1, uint64_t *a2)
{
  return static ChannelOptions.Types.SocketOption.__derived_struct_equals(_:_:)(*a1, *a2);
}

uint64_t sub_100016E64(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1001F3B68, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_100016EA0(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1001F3B68, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_100016EE8(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1001F3B68, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

_DWORD *sub_100016F40@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_100016F50(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_100016F5C(int *a1, int *a2)
{
  return static SelectorRegistrationID.== infix(_:_:)(*a1, *a2);
}

void *sub_100016F68@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_100016F74(uint64_t a1@<X8>)
{
  *(void *)a1 = v2;
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v3 & 1;
}

  ;
}

void sub_100016FAC(void *a1@<X8>)
{
  *a1 = debugOnly(_:)(*v1);
  sub_10001945C();
}

uint64_t sub_100016FD0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1001F3B68, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

void sub_10001701C(void *a1@<X8>)
{
  *a1 = *v1;
}

void *sub_100017028(__int128 *a1)
{
  __int128 v2 = a1[1];
  __int128 v12 = *a1;
  __int128 v13 = v2;
  __int128 v14 = a1[2];
  uint64_t v3 = sub_10000BF90((uint64_t)&v12);
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = (unsigned int *)v3;
  uint64_t v5 = 0LL;
  do
  {
    uint64_t v6 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
      __break(1u);
      goto LABEL_13;
    }

    __int128 v7 = a1[1];
    __int128 v12 = *a1;
    __int128 v13 = v7;
    __int128 v14 = a1[2];
    uint64_t v4 = (unsigned int *)sub_10000BFC0((uint64_t)&v12, v4);
    ++v5;
  }

  while (v4);
  if (!v6) {
    return _swiftEmptyArrayStorage;
  }
  if (v6 <= 0)
  {
    unint64_t v9 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v8 = sub_1000175B0(&qword_1002A9078);
    unint64_t v9 = (void *)sub_1000192C0(v8, 32 * v6);
    size_t v10 = j__malloc_size(v9);
    sub_10001946C(v10);
  }

  if (sub_10010A6B4((uint64_t)&v12, (uint64_t)(v9 + 4), v6) != v6) {
LABEL_13:
  }
    __break(1u);
  return v9;
}

void sub_100017138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - a2;
  if (!a2) {
    uint64_t v3 = 0LL;
  }
  if (!a1)
  {
    __break(1u);
    goto LABEL_14;
  }

  if (a1 == -1 && v3 == 0x8000000000000000LL) {
    goto LABEL_15;
  }
  uint64_t v6 = v3 / a1;
  if (v3 / a1 < 0)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    return;
  }

  if (v6)
  {
    uint64_t v9 = sub_1000175B0(&qword_1002A9080);
    size_t v10 = (uint64_t *)sub_1000192C0(v9, 16 * v6);
    j__malloc_size(v10);
    sub_10001941C();
    v10[2] = v6;
    v10[3] = v11;
  }

  sub_100019398();
}

#error "100017278: call analysis failed (funcsize=51)"
void sub_1000172C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __int128 v2 = sub_1000175B0(&qword_1002A90D8);
    uint64_t v3 = (const void *)sub_1000192C0(v2, 32 * v1);
    uint64_t v4 = j__malloc_size(v3);
    sub_10001946C(v4);
    sub_10010AA08();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v6 != v1) {
      __break(1u);
    }
  }

  sub_100019398();
}

void sub_10001735C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = sub_1000175B0(&qword_1002A90C0);
    uint64_t v3 = (const void *)sub_1000192C0(v2, 8 * v1);
    size_t v4 = j__malloc_size(v3);
    sub_1000193C4(2 * ((uint64_t)(v4 - 32) / 8));
    sub_10010AD20(v5, v6, v7, v8);
    sub_100019350();
    sub_100019368();
    if (!v9) {
      __break(1u);
    }
  }

  sub_100019328();
}

void sub_1000173D4()
{
  if (v2) {
    goto LABEL_7;
  }
  sub_100019450();
  while (v1)
  {
    if (v1 > 0)
    {
      uint64_t v3 = sub_1000175B0((uint64_t *)&unk_1002AFCE0);
      size_t v4 = (void *)sub_1000192C0(v3, 8 * v1);
      sub_1000192CC(v4);
    }

    sub_100019320();
    sub_1000194C8();
    sub_100019484(v5);
    if (v0 == v1) {
      break;
    }
    __break(1u);
LABEL_7:
    uint64_t v1 = v0 < 0 ? v0 : v0 & 0xFFFFFFFFFFFFFF8LL;
    sub_100019320();
    sub_100019448();
    sub_100019344();
  }

  sub_1000193B8();
}

void sub_10001748C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = sub_1000175B0(&qword_1002A9098);
    uint64_t v3 = (const void *)sub_1000192C0(v2, 16 * v1);
    j__malloc_size(v3);
    sub_10001941C();
    sub_1000193C4(v4);
    sub_10010B364();
    sub_100019350();
    sub_100019368();
    if (!v5) {
      __break(1u);
    }
  }

  sub_100019328();
}

void sub_1000174F8()
{
  if (v2) {
    goto LABEL_7;
  }
  sub_100019450();
  while (v1)
  {
    if (v1 > 0)
    {
      uint64_t v3 = sub_1000175B0((uint64_t *)&unk_1002AFCE0);
      uint64_t v4 = (void *)sub_1000192C0(v3, 8 * v1);
      sub_1000192CC(v4);
    }

    sub_100019320();
    sub_1000194D8();
    sub_100019484(v5);
    if (v0 == v1) {
      break;
    }
    __break(1u);
LABEL_7:
    uint64_t v1 = v0 < 0 ? v0 : v0 & 0xFFFFFFFFFFFFFF8LL;
    sub_100019320();
    sub_100019448();
    sub_100019344();
  }

  sub_1000193B8();
}

uint64_t sub_1000175B0(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

unint64_t sub_1000175F0()
{
  unint64_t result = qword_1002A8ED8;
  if (!qword_1002A8ED8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for _NIOEventLoopFutureIdentifier,  &type metadata for _NIOEventLoopFutureIdentifier);
    atomic_store(result, (unint64_t *)&qword_1002A8ED8);
  }

  return result;
}

uint64_t sub_10001762C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

void sub_100017638(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }

  if (v5)
  {
    if (v5 > 0)
    {
      uint64_t v8 = sub_1000175B0(&qword_1002A9100);
      char v9 = (void *)sub_1000192C0(v8, 16 * v5);
      j__malloc_size(v9);
      sub_10001941C();
      v9[2] = v5;
      v9[3] = v10;
    }

    if (v4 != a3)
    {
      sub_10018F07C(a2 + 16 * a3, v5);
      return;
    }

    goto LABEL_9;
  }

void sub_1000176E0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (a2 > 0)
    {
      uint64_t v3 = sub_1000175B0(&qword_1002A90E0);
      unint64_t v4 = (void *)sub_100019310(v3, a2 + 32);
      size_t v5 = j__malloc_size(v4);
      v4[2] = a2;
      v4[3] = 2 * v5 - 64;
    }

    sub_10018F11C();
  }

  sub_1000193B8();
}

void sub_100017760()
{
  if (v2) {
    goto LABEL_7;
  }
  sub_100019450();
  while (v1)
  {
    if (v1 > 0)
    {
      uint64_t v3 = sub_1000175B0((uint64_t *)&unk_1002AFCE0);
      unint64_t v4 = (void *)sub_1000192C0(v3, 8 * v1);
      sub_1000192CC(v4);
    }

    sub_100019320();
    sub_1000194C8();
    sub_100019484(v5);
    if (v0 == v1) {
      break;
    }
    __break(1u);
LABEL_7:
    uint64_t v1 = v0 < 0 ? v0 : v0 & 0xFFFFFFFFFFFFFF8LL;
    sub_100019320();
    sub_100019448();
    sub_100019344();
  }

  sub_1000193B8();
}

void sub_100017818()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = sub_1000175B0((uint64_t *)&unk_1002AFCE0);
    uint64_t v3 = (const void *)sub_1000192C0(v2, 8 * v1);
    size_t v4 = j__malloc_size(v3);
    sub_1000193C4((2 * ((uint64_t)(v4 - 32) / 8)) | 1);
    sub_10010B980();
    sub_100019350();
    sub_100019368();
    if (!v5) {
      __break(1u);
    }
  }

  sub_100019328();
}

void sub_100017894()
{
  if (v2) {
    goto LABEL_7;
  }
  sub_100019450();
  while (v1)
  {
    if (v1 > 0)
    {
      uint64_t v3 = sub_1000175B0((uint64_t *)&unk_1002AFCE0);
      size_t v4 = (void *)sub_1000192C0(v3, 8 * v1);
      sub_1000192CC(v4);
    }

    sub_100019320();
    sub_1000194D8();
    sub_100019484(v5);
    if (v0 == v1) {
      break;
    }
    __break(1u);
LABEL_7:
    uint64_t v1 = v0 < 0 ? v0 : v0 & 0xFFFFFFFFFFFFFF8LL;
    sub_100019320();
    sub_100019448();
    sub_100019344();
  }

  sub_1000193B8();
}

void type metadata accessor for http_errno(uint64_t a1)
{
}

void *initializeWithTake for RefundRequestUIRoute.ViewProperties(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t sub_10001796C(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 80))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      uint64_t v3 = *a1;
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_1000179C0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 80) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }

  return result;
}

void type metadata accessor for http_parser_settings(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for BillingErrorHelperRoute.Request(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 initializeWithTake for BillingErrorHelperRoute.Request(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for AuditToken(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for AuditToken(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for http_parser(uint64_t a1)
{
}

__n128 initializeWithTake for PendingStreamWritesState(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100017AEC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100017B0C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v3;
  return result;
}

void type metadata accessor for _opaque_pthread_cond_t(uint64_t a1)
{
}

__n128 initializeWithTake for PendingDatagramWrite(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_100017B6C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100017B8C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 64) = v3;
  return result;
}

void type metadata accessor for _opaque_pthread_mutex_t(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void *sub_100017BF0(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x2000uLL);
}

uint64_t sub_100017BF8(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 0x2000)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100017C1C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8184) = 0LL;
    *(_OWORD *)(result + 24_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 16_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 4344) = 0u;
    *(_OWORD *)(result + 432_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 4312) = 0u;
    *(_OWORD *)(result + 4296) = 0u;
    *(_OWORD *)(result + 4280) = 0u;
    *(_OWORD *)(result + 4264) = 0u;
    *(_OWORD *)(result + 424_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 4232) = 0u;
    *(_OWORD *)(result + 4216) = 0u;
    *(_OWORD *)(result + 4200) = 0u;
    *(_OWORD *)(result + 4184) = 0u;
    *(_OWORD *)(result + 416_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 4152) = 0u;
    *(_OWORD *)(result + 4136) = 0u;
    *(_OWORD *)(result + 4120) = 0u;
    *(_OWORD *)(result + 4104) = 0u;
    *(_OWORD *)(result + 408_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 4072) = 0u;
    *(_OWORD *)(result + 4056) = 0u;
    *(_OWORD *)(result + 4040) = 0u;
    *(_OWORD *)(result + 4024) = 0u;
    *(_OWORD *)(result + 400_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 3992) = 0u;
    *(_OWORD *)(result + 3976) = 0u;
    *(_OWORD *)(result + 3960) = 0u;
    *(_OWORD *)(result + 3944) = 0u;
    *(_OWORD *)(result + 392_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 3912) = 0u;
    *(_OWORD *)(result + 3896) = 0u;
    *(_OWORD *)(result + 3880) = 0u;
    *(_OWORD *)(result + 3864) = 0u;
    *(_OWORD *)(result + 384_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 3832) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 376_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 368_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 360_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 352_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 344_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 336_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 328_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 320_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 312_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 304_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 296_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 288_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 280_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 272_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 264_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 256_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 248_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 240_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 232_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 224_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 216_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 208_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 200_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 192_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 184_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 176_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 168_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 160_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 152_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 144_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 136_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 128_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 120_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 112_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 104_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 96_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 88_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 80_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 72_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 64_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 56_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 48_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 40_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 32_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 816_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 8152) = 0u;
    *(_OWORD *)(result + 8136) = 0u;
    *(_OWORD *)(result + 8120) = 0u;
    *(_OWORD *)(result + 8104) = 0u;
    *(_OWORD *)(result + 808_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 8072) = 0u;
    *(_OWORD *)(result + 8056) = 0u;
    *(_OWORD *)(result + 8040) = 0u;
    *(_OWORD *)(result + 8024) = 0u;
    *(_OWORD *)(result + 800_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 7992) = 0u;
    *(_OWORD *)(result + 7976) = 0u;
    *(_OWORD *)(result + 7960) = 0u;
    *(_OWORD *)(result + 7944) = 0u;
    *(_OWORD *)(result + 792_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 7912) = 0u;
    *(_OWORD *)(result + 7896) = 0u;
    *(_OWORD *)(result + 7880) = 0u;
    *(_OWORD *)(result + 7864) = 0u;
    *(_OWORD *)(result + 784_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 7832) = 0u;
    *(_OWORD *)(result + 7816) = 0u;
    *(_OWORD *)(result + 7800) = 0u;
    *(_OWORD *)(result + 7784) = 0u;
    *(_OWORD *)(result + 776_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 7752) = 0u;
    *(_OWORD *)(result + 7736) = 0u;
    *(_OWORD *)(result + 7720) = 0u;
    *(_OWORD *)(result + 7704) = 0u;
    *(_OWORD *)(result + 768_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 7672) = 0u;
    *(_OWORD *)(result + 7656) = 0u;
    *(_OWORD *)(result + 7640) = 0u;
    *(_OWORD *)(result + 7624) = 0u;
    *(_OWORD *)(result + 760_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 7592) = 0u;
    *(_OWORD *)(result + 7576) = 0u;
    *(_OWORD *)(result + 7560) = 0u;
    *(_OWORD *)(result + 7544) = 0u;
    *(_OWORD *)(result + 752_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 7512) = 0u;
    *(_OWORD *)(result + 7496) = 0u;
    *(_OWORD *)(result + 7480) = 0u;
    *(_OWORD *)(result + 7464) = 0u;
    *(_OWORD *)(result + 744_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 7432) = 0u;
    *(_OWORD *)(result + 7416) = 0u;
    *(_OWORD *)(result + 7400) = 0u;
    *(_OWORD *)(result + 7384) = 0u;
    *(_OWORD *)(result + 736_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 7352) = 0u;
    *(_OWORD *)(result + 7336) = 0u;
    *(_OWORD *)(result + 7320) = 0u;
    *(_OWORD *)(result + 7304) = 0u;
    *(_OWORD *)(result + 728_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 7272) = 0u;
    *(_OWORD *)(result + 7256) = 0u;
    *(_OWORD *)(result + 7240) = 0u;
    *(_OWORD *)(result + 7224) = 0u;
    *(_OWORD *)(result + 720_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 7192) = 0u;
    *(_OWORD *)(result + 7176) = 0u;
    *(_OWORD *)(result + 7160) = 0u;
    *(_OWORD *)(result + 7144) = 0u;
    *(_OWORD *)(result + 712_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 7112) = 0u;
    *(_OWORD *)(result + 7096) = 0u;
    *(_OWORD *)(result + 7080) = 0u;
    *(_OWORD *)(result + 7064) = 0u;
    *(_OWORD *)(result + 704_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 7032) = 0u;
    *(_OWORD *)(result + 7016) = 0u;
    *(_OWORD *)(result + 7000) = 0u;
    *(_OWORD *)(result + 6984) = 0u;
    *(_OWORD *)(result + 696_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 6952) = 0u;
    *(_OWORD *)(result + 6936) = 0u;
    *(_OWORD *)(result + 6920) = 0u;
    *(_OWORD *)(result + 6904) = 0u;
    *(_OWORD *)(result + 688_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 6872) = 0u;
    *(_OWORD *)(result + 6856) = 0u;
    *(_OWORD *)(result + 6840) = 0u;
    *(_OWORD *)(result + 6824) = 0u;
    *(_OWORD *)(result + 680_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 6792) = 0u;
    *(_OWORD *)(result + 6776) = 0u;
    *(_OWORD *)(result + 6760) = 0u;
    *(_OWORD *)(result + 6744) = 0u;
    *(_OWORD *)(result + 672_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 6712) = 0u;
    *(_OWORD *)(result + 6696) = 0u;
    *(_OWORD *)(result + 6680) = 0u;
    *(_OWORD *)(result + 6664) = 0u;
    *(_OWORD *)(result + 664_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 6632) = 0u;
    *(_OWORD *)(result + 6616) = 0u;
    *(_OWORD *)(result + 6600) = 0u;
    *(_OWORD *)(result + 6584) = 0u;
    *(_OWORD *)(result + 656_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 6552) = 0u;
    *(_OWORD *)(result + 6536) = 0u;
    *(_OWORD *)(result + 6520) = 0u;
    *(_OWORD *)(result + 6504) = 0u;
    *(_OWORD *)(result + 648_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 6472) = 0u;
    *(_OWORD *)(result + 6456) = 0u;
    *(_OWORD *)(result + 6440) = 0u;
    *(_OWORD *)(result + 6424) = 0u;
    *(_OWORD *)(result + 640_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 6392) = 0u;
    *(_OWORD *)(result + 6376) = 0u;
    *(_OWORD *)(result + 6360) = 0u;
    *(_OWORD *)(result + 6344) = 0u;
    *(_OWORD *)(result + 632_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 6312) = 0u;
    *(_OWORD *)(result + 6296) = 0u;
    *(_OWORD *)(result + 6280) = 0u;
    *(_OWORD *)(result + 6264) = 0u;
    *(_OWORD *)(result + 624_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 6232) = 0u;
    *(_OWORD *)(result + 6216) = 0u;
    *(_OWORD *)(result + 6200) = 0u;
    *(_OWORD *)(result + 6184) = 0u;
    *(_OWORD *)(result + 616_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 6152) = 0u;
    *(_OWORD *)(result + 6136) = 0u;
    *(_OWORD *)(result + 6120) = 0u;
    *(_OWORD *)(result + 6104) = 0u;
    *(_OWORD *)(result + 608_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 6072) = 0u;
    *(_OWORD *)(result + 6056) = 0u;
    *(_OWORD *)(result + 6040) = 0u;
    *(_OWORD *)(result + 6024) = 0u;
    *(_OWORD *)(result + 600_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 5992) = 0u;
    *(_OWORD *)(result + 5976) = 0u;
    *(_OWORD *)(result + 5960) = 0u;
    *(_OWORD *)(result + 5944) = 0u;
    *(_OWORD *)(result + 592_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 5912) = 0u;
    *(_OWORD *)(result + 5896) = 0u;
    *(_OWORD *)(result + 5880) = 0u;
    *(_OWORD *)(result + 5864) = 0u;
    *(_OWORD *)(result + 584_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 5832) = 0u;
    *(_OWORD *)(result + 5816) = 0u;
    *(_OWORD *)(result + 5800) = 0u;
    *(_OWORD *)(result + 5784) = 0u;
    *(_OWORD *)(result + 576_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 5752) = 0u;
    *(_OWORD *)(result + 5736) = 0u;
    *(_OWORD *)(result + 5720) = 0u;
    *(_OWORD *)(result + 5704) = 0u;
    *(_OWORD *)(result + 568_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 5672) = 0u;
    *(_OWORD *)(result + 5656) = 0u;
    *(_OWORD *)(result + 5640) = 0u;
    *(_OWORD *)(result + 5624) = 0u;
    *(_OWORD *)(result + 560_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 5592) = 0u;
    *(_OWORD *)(result + 5576) = 0u;
    *(_OWORD *)(result + 5560) = 0u;
    *(_OWORD *)(result + 5544) = 0u;
    *(_OWORD *)(result + 552_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 5512) = 0u;
    *(_OWORD *)(result + 5496) = 0u;
    *(_OWORD *)(result + 5480) = 0u;
    *(_OWORD *)(result + 5464) = 0u;
    *(_OWORD *)(result + 544_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 5432) = 0u;
    *(_OWORD *)(result + 5416) = 0u;
    *(_OWORD *)(result + 5400) = 0u;
    *(_OWORD *)(result + 5384) = 0u;
    *(_OWORD *)(result + 536_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 5352) = 0u;
    *(_OWORD *)(result + 5336) = 0u;
    *(_OWORD *)(result + 5320) = 0u;
    *(_OWORD *)(result + 5304) = 0u;
    *(_OWORD *)(result + 528_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 5272) = 0u;
    *(_OWORD *)(result + 5256) = 0u;
    *(_OWORD *)(result + 5240) = 0u;
    *(_OWORD *)(result + 5224) = 0u;
    *(_OWORD *)(result + 520_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 5192) = 0u;
    *(_OWORD *)(result + 5176) = 0u;
    *(_OWORD *)(result + 5160) = 0u;
    *(_OWORD *)(result + 5144) = 0u;
    *(_OWORD *)(result + 512_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 5112) = 0u;
    *(_OWORD *)(result + 5096) = 0u;
    *(_OWORD *)(result + 5080) = 0u;
    *(_OWORD *)(result + 5064) = 0u;
    *(_OWORD *)(result + 504_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 5032) = 0u;
    *(_OWORD *)(result + 5016) = 0u;
    *(_OWORD *)(result + 5000) = 0u;
    *(_OWORD *)(result + 4984) = 0u;
    *(_OWORD *)(result + 496_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 4952) = 0u;
    *(_OWORD *)(result + 4936) = 0u;
    *(_OWORD *)(result + 4920) = 0u;
    *(_OWORD *)(result + 4904) = 0u;
    *(_OWORD *)(result + 488_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 4872) = 0u;
    *(_OWORD *)(result + 4856) = 0u;
    *(_OWORD *)(result + 4840) = 0u;
    *(_OWORD *)(result + 4824) = 0u;
    *(_OWORD *)(result + 480_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 4792) = 0u;
    *(_OWORD *)(result + 4776) = 0u;
    *(_OWORD *)(result + 4760) = 0u;
    *(_OWORD *)(result + 4744) = 0u;
    *(_OWORD *)(result + 472_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 4712) = 0u;
    *(_OWORD *)(result + 4696) = 0u;
    *(_OWORD *)(result + 4680) = 0u;
    *(_OWORD *)(result + 4664) = 0u;
    *(_OWORD *)(result + 464_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 4632) = 0u;
    *(_OWORD *)(result + 4616) = 0u;
    *(_OWORD *)(result + 4600) = 0u;
    *(_OWORD *)(result + 4584) = 0u;
    *(_OWORD *)(result + 456_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 4552) = 0u;
    *(_OWORD *)(result + 4536) = 0u;
    *(_OWORD *)(result + 4520) = 0u;
    *(_OWORD *)(result + 4504) = 0u;
    *(_OWORD *)(result + 448_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 4472) = 0u;
    *(_OWORD *)(result + 4456) = 0u;
    *(_OWORD *)(result + 4440) = 0u;
    *(_OWORD *)(result + 4424) = 0u;
    *(_OWORD *)(result + 440_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 4392) = 0u;
    *(_OWORD *)(result + 4376) = 0u;
    *(_OWORD *)(result + 4360) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 0x2000) = v3;
  return result;
}

void type metadata accessor for _opaque_pthread_t(uint64_t a1)
{
}

void type metadata accessor for SecIdentity(uint64_t a1)
{
}

void type metadata accessor for SecKeychain(uint64_t a1)
{
}

__n128 sub_100018540(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for kevent(uint64_t a1)
{
}

void type metadata accessor for SecKeyAlgorithm(uint64_t a1)
{
}

void type metadata accessor for SecKey(uint64_t a1)
{
}

void type metadata accessor for ASDOctaneValueIdentifier(uint64_t a1)
{
}

void type metadata accessor for ASDOctaneEventType(uint64_t a1)
{
}

__n128 initializeWithTake for PendingDatagramWritesState(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_1000185CC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000185EC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 56) = v3;
  return result;
}

void type metadata accessor for CNIODarwin_mmsghdr(uint64_t a1)
{
}

__n128 initializeWithTake for HTTPMethod(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t storeEnumTagSinglePayload for OctaneConfigurationVersion(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for iovec(uint64_t a1)
{
}

void type metadata accessor for catmc_nio_atomic_unsigned_long(uint64_t a1)
{
}

void type metadata accessor for catmc_nio_atomic_long(uint64_t a1)
{
}

void type metadata accessor for catmc_nio_atomic_unsigned_long_long(uint64_t a1)
{
}

void type metadata accessor for catmc_nio_atomic_long_long(uint64_t a1)
{
}

void type metadata accessor for catmc_nio_atomic_uint_least32_t(uint64_t a1)
{
}

void type metadata accessor for catmc_nio_atomic_int_least32_t(uint64_t a1)
{
}

void type metadata accessor for catmc_nio_atomic_uint_least16_t(uint64_t a1)
{
}

void type metadata accessor for catmc_nio_atomic_int_least16_t(uint64_t a1)
{
}

void type metadata accessor for catmc_nio_atomic_uint_least8_t(uint64_t a1)
{
}

void type metadata accessor for catmc_nio_atomic_int_least8_t(uint64_t a1)
{
}

void type metadata accessor for catmc_nio_atomic__Bool(uint64_t a1)
{
}

void type metadata accessor for ASOctaneSimulatedErrorCategory(uint64_t a1)
{
}

void *initializeWithTake for EditSubscriptionUIRoute.ViewProperties(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x80uLL);
}

uint64_t sub_100018778(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100018798(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 120) = 0LL;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 12_Block_object_dispose((const void *)(v1 - 136), 8) = v3;
  return result;
}

void type metadata accessor for sockaddr_storage(uint64_t a1)
{
}

void *initializeWithTake for SubscriptionModificationContext(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x70uLL);
}

uint64_t sub_100018800(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 112)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100018820(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 104) = 0LL;
    *(_OWORD *)(result + 8_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 112) = v3;
  return result;
}

void type metadata accessor for tcp_connection_info(uint64_t a1)
{
}

void type metadata accessor for in_addr(uint64_t a1)
{
}

void *initializeBufferWithCopyOfBuffer for NIOFileHandle.Flags(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NIOFileHandle.Flags(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for NIOFileHandle.Flags(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = v3;
  return result;
}

void type metadata accessor for linger(uint64_t a1)
{
}

void *sub_1000188F8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x6AuLL);
}

uint64_t sub_100018900(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 106)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100018920(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 8_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_WORD *)(result + 104) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 106) = v3;
  return result;
}

void type metadata accessor for sockaddr_un(uint64_t a1)
{
}

void type metadata accessor for CFError(uint64_t a1)
{
}

__n128 sub_100018990(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_1000189A4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 28)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000189C4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 2_Block_object_dispose((const void *)(v1 - 136), 8) = v3;
  return result;
}

void type metadata accessor for sockaddr_in6(uint64_t a1)
{
}

__n128 sub_100018A08(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for OctaneConfigurationVersion(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

void type metadata accessor for sockaddr_in(uint64_t a1)
{
}

void sub_100018A48()
{
}

void sub_100018A74()
{
}

void sub_100018AA0(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  if (!*a1)
  {
    uint64_t v3 = a2(255LL);
    atomic_store(sub_10001951C(v3), a1);
  }

  sub_10001945C();
}

void sub_100018AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_100018AE0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, void *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a3 - a2;
  if (a3 < a2) {
    v8 += *(void *)(a1 + 16);
  }
  if (!v8) {
    goto LABEL_9;
  }
  if (v8 <= 0)
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v9 = sub_1000175B0(&qword_1002A90E8);
    uint64_t v10 = (void *)sub_100019310(v9, (v8 << 6) | 0x20);
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 64);
  }

  uint64_t v12 = a4(v13, v10 + 4, v8, a1, a2, a3);
  swift_retain();
  swift_release();
  if (v12 != v8) {
    __break(1u);
  }
  else {
LABEL_9:
  }
    sub_100019398();
}

uint64_t sub_100018BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 - a1;
  BOOL v3 = a2 < a1;
  if (a2 <= a1)
  {
    uint64_t result = 0LL;
    if (!v3) {
      return result;
    }
    unint64_t v9 = ~a2 + a1;
    unint64_t v10 = a1 ^ 0x8000000000000000LL;
    if (v9 >= v10) {
      unint64_t v9 = v10;
    }
    unint64_t v11 = 0x8000000000000000LL;
    if (v9 < 0x8000000000000000LL) {
      unint64_t v11 = v9;
    }
    while ((v9 & 0x8000000000000000LL) == 0)
    {
      if (v10 == v11) {
        goto LABEL_23;
      }
      if (v4 == --result) {
        return result;
      }
    }
  }

  else
  {
    uint64_t result = 0LL;
    unint64_t v6 = ~a1 + a2;
    unint64_t v7 = a1 ^ 0x7FFFFFFFFFFFFFFFLL;
    if (v6 >= v7) {
      unint64_t v6 = v7;
    }
    uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
    if (v6 < 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v8 = v6;
    }
    while (v6 <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (v7 == v8) {
        goto LABEL_21;
      }
      if (v4 == ++result) {
        return result;
      }
    }

    __break(1u);
LABEL_21:
    __break(1u);
  }

  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

void sub_100018C68()
{
}

void sub_100018C8C()
{
}

void sub_100018CB0()
{
  if (v4)
  {
    if (v0 < 0) {
      uint64_t v1 = v0;
    }
    else {
      uint64_t v1 = v0 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_100019320();
    sub_100019448();
    sub_100019344();
    if (!v1) {
      goto LABEL_20;
    }
  }

  else
  {
    sub_100019450();
    if (!v1)
    {
LABEL_20:
      sub_1000193DC();
      return;
    }
  }

  if (v2)
  {
    if (v4)
    {
      if (v0 < 0) {
        uint64_t v6 = v0;
      }
      else {
        uint64_t v6 = v0 & 0xFFFFFFFFFFFFFF8LL;
      }
      sub_100019320();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v6);
      sub_100019390();
      if (v7 <= v5)
      {
        if (v1 >= 1)
        {
          sub_100019510();
          sub_100019320();
          do
          {
            uint64_t v8 = sub_1000175B0(v3);
            sub_100019430(v8, v9, v10, v11, v12, v13, v14, v15, v25);
            uint64_t v16 = swift_retain();
            sub_100019528(v16, v17, v18, v19, v20, v21, v22, v23, v26);
            sub_1000194E8();
          }

          while (!v24);
          sub_100019390();
          goto LABEL_20;
        }

        goto LABEL_23;
      }
    }

    else
    {
      if (*(void *)((v0 & 0xFFFFFFFFFFFFFF8LL) + 0x10) <= v5)
      {
        sub_1000194A8(v0 & 0xFFFFFFFFFFFFFF8LL);
        goto LABEL_20;
      }

      __break(1u);
    }

    __break(1u);
LABEL_23:
    __break(1u);
  }

  __break(1u);
}

void sub_100018DB8()
{
  if (v4)
  {
    if (v0 < 0) {
      uint64_t v1 = v0;
    }
    else {
      uint64_t v1 = v0 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_100019320();
    sub_100019448();
    sub_100019344();
    if (!v1) {
      goto LABEL_20;
    }
  }

  else
  {
    sub_100019450();
    if (!v1)
    {
LABEL_20:
      sub_1000193DC();
      return;
    }
  }

  if (v2)
  {
    if (v4)
    {
      if (v0 < 0) {
        uint64_t v6 = v0;
      }
      else {
        uint64_t v6 = v0 & 0xFFFFFFFFFFFFFF8LL;
      }
      sub_100019320();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v6);
      sub_100019390();
      if (v7 <= v5)
      {
        if (v1 >= 1)
        {
          sub_100019510();
          sub_100019320();
          do
          {
            uint64_t v8 = sub_1000175B0(v3);
            sub_100019430(v8, v9, v10, v11, v12, v13, v14, v15, v26);
            id v17 = *v16;
            sub_100019528((uint64_t)v17, v18, v19, v20, v21, v22, v23, v24, v27);
            sub_1000194E8();
          }

          while (!v25);
          sub_100019390();
          goto LABEL_20;
        }

        goto LABEL_23;
      }
    }

    else
    {
      if (*(void *)((v0 & 0xFFFFFFFFFFFFFF8LL) + 0x10) <= v5)
      {
        sub_1000194A8(v0 & 0xFFFFFFFFFFFFFF8LL);
        goto LABEL_20;
      }

      __break(1u);
    }

    __break(1u);
LABEL_23:
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_100018EC0(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_100018F04(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

void *sub_100018F0C(void *a1)
{
  return a1;
}

void sub_100018F34(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v3 = sub_100018EC0(a2);
    atomic_store(sub_10001951C(v3), a1);
  }

  sub_10001945C();
}

uint64_t sub_100018F68(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

__n128 sub_100018F80(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for sockaddr(uint64_t a1)
{
}

void type metadata accessor for http_method(uint64_t a1)
{
}

void type metadata accessor for CFDictionary(uint64_t a1)
{
}

void type metadata accessor for CFNumber(uint64_t a1)
{
}

__n128 sub_100018FDC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t sub_100018FF0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 20)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100019010(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 20) = v3;
  return result;
}

void type metadata accessor for Decimal(uint64_t a1)
{
}

void type metadata accessor for ASOctaneSimulatedError(uint64_t a1)
{
}

__n128 initializeWithTake for CallbackList(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CallbackList(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 24))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      uint64_t v3 = *a1;
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CallbackList(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }

  return result;
}

void type metadata accessor for __darwin_pthread_handler_rec(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for msghdr(uint64_t a1)
{
}

void type metadata accessor for in6_addr(uint64_t a1)
{
}

void sub_100019170()
{
}

void sub_10001919C()
{
}

uint64_t sub_1000191C8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = *((_DWORD *)a2 + 2);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t sub_1000191DC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000191FC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 12) = v3;
  return result;
}

void type metadata accessor for cmsghdr(uint64_t a1)
{
}

void type metadata accessor for in6_addr.__Unnamed_union___u6_addr(uint64_t a1)
{
}

void sub_100019250(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

uint64_t sub_1000192C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return swift_allocObject(a1, a2 + 32, 7LL);
}

size_t sub_1000192CC(void *a1)
{
  size_t result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = (2 * ((uint64_t)(result - 32) / 8)) | 1;
  return result;
}

uint64_t _s25ASOctaneSupportXPCService35NIOSingleStepByteToMessageProcessorC7_bufferAA0F6BufferVSgvpfi_0()
{
  return 0LL;
}

void sub_100019308(uint64_t (*a1)(void), uint64_t a2, void (*a3)(void))
{
}

uint64_t sub_100019310(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 7LL);
}

uint64_t static NIODeadline.distantPast.getter()
{
  return 0LL;
}

uint64_t sub_100019320()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

uint64_t sub_100019344()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100019350()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100019368()
{
  return sub_100018F04(v0);
}

uint64_t sub_100019390()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

uint64_t variable initialization expression of ClientOverride.requestBundleVersion()
{
  return 0LL;
}

  ;
}

void sub_1000193C4(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = a1;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100019430( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return v10(&a9, v12, v9, a1, v11);
}

uint64_t sub_100019448()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

  ;
}

  ;
}

uint64_t sub_100019464(uint64_t a1)
{
  return swift_slowAlloc(a1, -1LL);
}

uint64_t sub_10001946C(uint64_t result)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * ((result - 32) / 32);
  return result;
}

uint64_t sub_100019484(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

  ;
}

uint64_t sub_1000194A8@<X0>(uint64_t a1@<X8>)
{
  return v3(a1 + 32, v2, v1);
}

uint64_t _s25ASOctaneSupportXPCService31NIOHTTPClientResponseAggregatorC15fullMessageHead33_EA03D782F2F5F710E65A4326ECAE420FLLAA012HTTPResponseI0VSgvpfi_0()
{
  return 0LL;
}

void sub_1000194C8()
{
}

void sub_1000194D8()
{
}

void sub_1000194E8()
{
  *(void *)(v0 + 8 * v1) = v2;
}

uint64_t static System.hasAsyncAwaitSupport.getter()
{
  return 1LL;
}

  ;
}

void sub_100019510()
{
}

uint64_t sub_10001951C(uint64_t a1)
{
  return swift_getWitnessTable(v1, a1);
}

uint64_t sub_100019528( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return v9(&a9, 0LL);
}

uint64_t static NIOHTTPObjectAggregatorError.endingIgnoredMessage.getter()
{
  return 2LL;
}

BOOL static NIOHTTPObjectAggregatorEvent.__derived_struct_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void NIOHTTPObjectAggregatorEvent.hash(into:)(uint64_t a1, char a2)
{
}

uint64_t sub_100019570(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x4449656C646E7562LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v5 = 0xE800000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449656C646E7562LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x444970756F7267LL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
    return 1LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x444970756F7267LL, 0xE700000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

Swift::Int ChannelPipelineError.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1000196A0(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x444970756F7267LL;
  }
  else {
    return 0x4449656C646E7562LL;
  }
}

BOOL sub_1000196D8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static NIOHTTPObjectAggregatorEvent.__derived_struct_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_1000196E4()
{
  return ChannelPipelineError.hashValue.getter(*v0);
}

void sub_1000196EC(uint64_t a1)
{
}

Swift::Int sub_1000196F4()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100019734()
{
  return sub_1000196A0(*v0);
}

uint64_t sub_10001973C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100019570(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100019760()
{
  return variable initialization expression of MarkedCircularBuffer._markedIndexOffset();
}

uint64_t sub_10001977C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = static NIOHTTPObjectAggregatorError.endingIgnoredMessage.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000197A0(uint64_t a1)
{
  unint64_t v2 = sub_10001A140();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000197C8(uint64_t a1)
{
  unint64_t v2 = sub_10001A140();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000197F0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v9 = sub_1000175B0(&qword_1002A9280);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_100019F58(a1, v14);
  unint64_t v15 = sub_10001A140();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for BillingErrorHelperRoute.Request.CodingKeys,  &type metadata for BillingErrorHelperRoute.Request.CodingKeys,  v15,  v14,  v13);
  char v20 = 0;
  sub_10001A3B8(a2, a3, (uint64_t)&v20);
  if (!v5)
  {
    char v19 = 1;
    sub_10001A3B8(v17, v18, (uint64_t)&v19);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_100019900(void *a1)
{
  uint64_t v3 = sub_1000175B0(&qword_1002A9270);
  __chkstk_darwin(v3);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100019F58(a1, v4);
  unint64_t v6 = sub_10001A140();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for BillingErrorHelperRoute.Request.CodingKeys,  &type metadata for BillingErrorHelperRoute.Request.CodingKeys,  v6,  v4,  v5);
  if (v1)
  {
    sub_10001A400();
  }

  else
  {
    char v12 = 0;
    uint64_t v5 = sub_10001A3E8((uint64_t)&v12);
    char v11 = 1;
    swift_bridgeObjectRetain(v8);
    sub_10001A3E8((uint64_t)&v11);
    uint64_t v10 = v9;
    sub_10001A3A8();
    swift_bridgeObjectRetain(v10);
    sub_10001A400();
    swift_bridgeObjectRelease(v10);
    sub_10001A420();
  }

  return v5;
}

uint64_t sub_100019A58@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100019900(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }

  return result;
}

uint64_t sub_100019A84(void *a1)
{
  return sub_1000197F0(a1, *v1, v1[1], v1[2], v1[3]);
}

double sub_100019AA0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1001C0410();
  if (v3)
  {
    uint64_t v6 = v3;
    uint64_t v7 = v5;
    sub_100019B64(v2, v3, v4, v5);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v6);
    uint64_t v8 = 3LL;
  }

  else
  {
    uint64_t v8 = 21LL;
  }

  ASOctaneSupportXPCService::HTTPVersion v9 = HTTPVersion.init(major:minor:)(1LL, 1LL);
  uint64_t v10 = type metadata accessor for HTTPResponseHead._Storage();
  uint64_t v11 = swift_allocObject(v10, 44LL, 7LL);
  *(void *)(v11 + 16) = 0LL;
  *(void *)(v11 + 24) = 0LL;
  *(void *)(v11 + 32) = v8;
  *(ASOctaneSupportXPCService::HTTPVersion *)(v11 + 40) = v9;
  *(void *)a1 = v11;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = _swiftEmptyArrayStorage;
  *(_BYTE *)(a1 + 16) = 2;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 55) = 0LL;
  return result;
}

void sub_100019B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = (void *)(v4 + 88);
  uint64_t v11 = sub_10001A3C8(a1, *(void *)(v4 + 112));
  if ((sub_10001A3C8(v11, *(void *)(v4 + 112)) & 1) == 0)
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    uint64_t v17 = sub_100018F68(v16, (uint64_t)qword_1002EB9D0);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      char v20 = (uint8_t *)sub_10001A414();
      *(_WORD *)char v20 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "Did not find any transactions in billing error. Purchasing last transaction.",  v20,  2u);
      sub_10001A408((uint64_t)v20);
    }

    uint64_t v21 = sub_100019F58(v10, *(void *)(v5 + 112));
    uint64_t v22 = sub_1000175B0(&qword_1002A9098);
    uint64_t inited = swift_initStackObject(v22, v34);
    *(_OWORD *)(inited + 16) = xmmword_1001F3C00;
    *(void *)(inited + 32) = a3;
    *(void *)(inited + 40) = a4;
    uint64_t v24 = *v21;
    swift_retain();
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    sub_1000D962C(inited, v24, a1, a2);
    uint64_t v26 = v25;
    swift_setDeallocating(inited);
    sub_1001B7630();
    if ((unint64_t)v26 >> 62)
    {
      if (v26 < 0) {
        uint64_t v31 = v26;
      }
      else {
        uint64_t v31 = v26 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v26);
      uint64_t v32 = _CocoaArrayWrapper.endIndex.getter(v31);
      sub_10001A3F8();
      if (v32) {
        goto LABEL_13;
      }
    }

    else if (*(void *)((v26 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
LABEL_13:
      sub_100119E64(0LL, (v26 & 0xC000000000000001LL) == 0, v26);
      if ((v26 & 0xC000000000000001LL) != 0) {
        id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v26);
      }
      else {
        id v27 = *(id *)(v26 + 32);
      }
      unint64_t v28 = v27;
      sub_10001A3F8();
      sub_100019F58(v10, *(void *)(v5 + 112));
      sub_100086EB8();
      uint64_t v30 = v29;

      return;
    }

    sub_10001A3F8();
    return;
  }

  sub_100019F58((void *)(v4 + 88), *(void *)(v4 + 112));
  sub_100086088(a1, a2);
  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = sub_100018F68(v12, (uint64_t)qword_1002EB9D0);
  oslog = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v14))
  {
    unint64_t v15 = (uint8_t *)sub_10001A414();
    *(_WORD *)unint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v14, "Resolved transactions in billing error.", v15, 2u);
    sub_10001A408((uint64_t)v15);
  }
}

unint64_t sub_100019E68(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v6._countAndFlagsBits = 38LL;
  v6._object = (void *)0xE100000000000000LL;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 6580578LL;
  v7._object = (void *)0xE300000000000000LL;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 61LL;
  v8._object = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  v9._countAndFlagsBits = a3;
  v9._object = a4;
  String.append(_:)(v9);
  return 0xD000000000000013LL;
}

uint64_t sub_100019F04()
{
  uint64_t v0 = sub_10007F138();
  sub_100019F7C(v0 + 11);
  return swift_deallocClassInstance(v0, 128LL, 7LL);
}

uint64_t type metadata accessor for BillingErrorHelperRoute()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService23BillingErrorHelperRoute);
}

void *sub_100019F58(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t sub_100019F7C(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t destroy for BillingErrorHelperRoute.Request(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

void *initializeWithCopy for BillingErrorHelperRoute.Request(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for BillingErrorHelperRoute.Request(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void *assignWithTake for BillingErrorHelperRoute.Request(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for BillingErrorHelperRoute.Request(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BillingErrorHelperRoute.Request(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)double result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for BillingErrorHelperRoute.Request()
{
  return &type metadata for BillingErrorHelperRoute.Request;
}

unint64_t sub_10001A140()
{
  unint64_t result = qword_1002A9278;
  if (!qword_1002A9278)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F3D74, &type metadata for BillingErrorHelperRoute.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A9278);
  }

  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for BillingErrorHelperRoute.Request.CodingKeys( _BYTE *result, _BYTE *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for BillingErrorHelperRoute.Request.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1B;
  int v5 = v6 - 27;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v5 = v6 - 7;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v5 = v6 - 6;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  __break(1u);
}

  __break(1u);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v5 = v6 - 12;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x11;
  int v5 = v6 - 17;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v5 = v6 - 8;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v5 = v6 - 11;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x16;
  int v5 = v6 - 22;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  swift_release(a2);
  return 0LL;
}

  sub_100023EEC();
  sub_1000487CC((uint64_t)&v65, (uint64_t)v62);
  uint64_t v17 = (os_log_s *)v65;
  if ((unint64_t)v65 >> 62)
  {
    if (v65 < 0) {
      unsigned int v51 = v65;
    }
    else {
      unsigned int v51 = v65 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_10001DBCC();
    int v52 = _CocoaArrayWrapper.endIndex.getter(v51);
    sub_10001EDA0();
    if (!v52)
    {
LABEL_56:
      sub_10001EDA0();
      return swift_bridgeObjectRelease();
    }
  }

  else if (!*(void *)((v65 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    goto LABEL_56;
  }

  sub_100092D50();
  uint64_t v18 = sub_100092CFC();
  if (os_log_type_enabled(v17, v18))
  {
    os_log_type_t v19 = (uint8_t *)sub_100019464(12LL);
    char v20 = sub_100019464(32LL);
    v59[0] = v20;
    *(_DWORD *)os_log_type_t v19 = 136315138;
    uint64_t v21 = type metadata accessor for Transaction();
    uint64_t v22 = swift_bridgeObjectRetain();
    uint64_t v23 = Array.description.getter(v22, v21);
    uint64_t v25 = v24;
    sub_100023EF4();
    int v60 = sub_1000CF360(v23, v25, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v19 + 4);
    sub_100024E84();
    sub_100092A00((void *)&_mh_execute_header, v17, v18, "Catching up %s subscriptions", v19);
    sub_10009293C(v20);
    sub_10001A408(v20);
    sub_10001A408((uint64_t)v19);
  }

  uint64_t v26 = v65;
  sub_10002A4C8();
  sub_10001DBCC();
  unsigned int v6 = (unint64_t)sub_100085368(_swiftEmptyArrayStorage, (uint64_t)&_swiftEmptySetSingleton, v26);
  int v2 = v27;
  sub_10001EDA0();
  BOOL v7 = sub_1000175B0(&qword_1002A9088);
  v59[3] = v7;
  v59[4] = sub_100092718();
  v59[0] = v6;
  sub_100092F60(v59, v7);
  unint64_t v28 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  sub_10001ED74();
LABEL_23:
  int v60 = Set.init(minimumCapacity:)(v28, &type metadata for String, &protocol witness table for String);
  sub_100019F7C(v59);
  if (v6 >> 62)
  {
    sub_10001ED74();
    unint64_t result = sub_100019448();
    char v29 = result;
    if (!result) {
      goto LABEL_31;
    }
  }

  else
  {
    char v29 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t result = sub_10001ED74();
    if (!v29) {
      goto LABEL_31;
    }
  }

  if (v29 >= 1)
  {
    uint64_t v31 = 0LL;
    do
    {
      if ((v6 & 0xC000000000000001LL) != 0) {
        uint64_t v32 = sub_100093148(v31);
      }
      else {
        uint64_t v32 = (uint64_t)sub_100092C94(v6 + 8 * v31);
      }
      uint64_t v33 = (void *)v32;
      ++v31;
      char v34 = sub_1000B3DEC();
      sub_1001A0924(v59, v34, v35);
      swift_bridgeObjectRelease();
    }

    while (v29 != v31);
LABEL_31:
    int v56 = v2;
    sub_10001EDE8(v6);
    int v36 = v60;
    unsigned int v37 = v60 + 56;
    BOOL v38 = 1LL << *(_BYTE *)(v60 + 32);
    int v39 = -1LL;
    if (v38 < 64) {
      int v39 = ~(-1LL << v38);
    }
    v40 = v39 & *(void *)(v60 + 56);
    int v41 = (unint64_t)(v38 + 63) >> 6;
    sub_10001ED74();
    int v42 = 0LL;
    p_cache = &OBJC_CLASS____TtC25ASOctaneSupportXPCService24OctaneXPCServiceDelegate.cache;
    a1 = &unk_1002EB000;
    if (v40)
    {
LABEL_34:
      unint64_t v43 = __clz(__rbit64(v40));
      v40 &= v40 - 1;
      unint64_t v44 = v43 | (v42 << 6);
      goto LABEL_49;
    }

    while (1)
    {
      int64_t v45 = v42 + 1;
      if (__OFADD__(v42, 1LL))
      {
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }

      if (v45 >= v41) {
        goto LABEL_53;
      }
      int v46 = *(void *)(v37 + 8 * v45);
      ++v42;
      if (!v46)
      {
        int v42 = v45 + 1;
        if (v45 + 1 >= v41) {
          goto LABEL_53;
        }
        int v46 = *(void *)(v37 + 8 * v42);
        if (!v46)
        {
          int v42 = v45 + 2;
          if (v45 + 2 >= v41) {
            goto LABEL_53;
          }
          int v46 = *(void *)(v37 + 8 * v42);
          if (!v46)
          {
            unsigned int v47 = v45 + 3;
            if (v47 >= v41)
            {
LABEL_53:
              sub_10002A51C();
              if (qword_1002A8CF8 != -1) {
                swift_once(&qword_1002A8CF8, sub_10010EF80);
              }
              sub_100092EEC(0, v36);
              sub_10001A3F8();
              sub_100092EEC(1, v56);
              sub_100019390();
              goto LABEL_56;
            }

            int v46 = *(void *)(v37 + 8 * v47);
            if (!v46)
            {
              while (1)
              {
                int v42 = v47 + 1;
                if (__OFADD__(v47, 1LL)) {
                  goto LABEL_58;
                }
                if (v42 >= v41) {
                  goto LABEL_53;
                }
                int v46 = *(void *)(v37 + 8 * v42);
                ++v47;
                if (v46) {
                  goto LABEL_48;
                }
              }
            }

            int v42 = v47;
          }
        }
      }

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v5 = v6 - 9;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  swift_bridgeObjectRelease(a5);
  swift_bridgeObjectRelease(a1);
  return 0LL;
}

  os_log_type_t v14 = String.subscript.getter(15LL, v8, v4, v5);
  uint64_t v30 = v15;
  uint64_t v31 = v14;
  char v29 = v16;
  uint64_t v32 = v17;
  sub_10003561C();
  type metadata accessor for OctaneLocale();
  uint64_t v18 = a1 & 0xC000000000000001LL;
  sub_100019320();
  os_log_type_t v19 = 0LL;
  char v20 = 4LL;
  do
  {
    if (v18)
    {
      uint64_t v21 = specialized _ArrayBuffer._getElementSlowPath(_:)(v20 - 4, a1);
    }

    else
    {
      uint64_t v21 = *(void *)(a1 + 8 * v20);
      swift_retain();
    }

    uint64_t v22 = v20 - 3;
    if (__OFADD__(v20 - 4, 1LL))
    {
      __break(1u);
      goto LABEL_34;
    }

    uint64_t v23 = *(void **)(v21 + 48);
    if ((sub_1000CC284(v1, v23) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      sub_100019390();
      swift_release(v19);
      return v21;
    }

    if (!v19)
    {
      uint64_t v24 = v23[2];
      uint64_t v25 = v23[3];
      swift_bridgeObjectRetain();
      uint64_t v26 = sub_1000CC43C(v31, v30, v29, v32, v24, v25);
      swift_bridgeObjectRelease();
      os_log_type_t v19 = v21;
      if ((v26 & 1) != 0) {
        goto LABEL_27;
      }
      os_log_type_t v19 = 0LL;
    }

    swift_release(v21);
LABEL_27:
    ++v20;
  }

  while (v22 != v3);
  swift_bridgeObjectRelease();
  sub_100019390();
  if (!v19)
  {
    sub_100119E64(0LL, v18 == 0, a1);
    if (v18)
    {
      sub_100019320();
      os_log_type_t v19 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
      sub_100019390();
    }

    else
    {
      os_log_type_t v19 = *(void *)(a1 + 32);
      swift_retain();
    }
  }

  return v19;
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
LABEL_18:
  __break(1u);
}

  __break(1u);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x14;
  int v5 = v6 - 20;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x24;
  int v5 = v6 - 36;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x27;
  int v5 = v6 - 39;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x25;
  int v5 = v6 - 37;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

    unsigned int v6 = v7;
  }

  sub_1000314BC(v4, v12 - v4, v6);
  return 1LL;
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x12;
  int v5 = v6 - 18;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x18;
  int v5 = v6 - 24;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  if (*a1 <= 2u) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = *a1;
  }
  BOOL v7 = v6 - 3;
  if (*a1 < 2u) {
    int v5 = -1;
  }
  else {
    int v5 = v7;
  }
  return (v5 + 1);
}

  int v5 = ((*a1 >> 1) & 0x1C | (*a1 >> 6)) ^ 0x1F;
  if (v5 >= 0x1D) {
    int v5 = -1;
  }
  return v5 + 1;
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v5 = v6 - 14;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  Swift::String v8 = v6 - 7;
  if (!v7) {
    Swift::String v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  Swift::String v8 = v6 - 4;
  if (!v7) {
    Swift::String v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  Swift::String v8 = v6 - 3;
  if (!v7) {
    Swift::String v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  Swift::String v8 = v6 - 6;
  if (!v7) {
    Swift::String v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1A;
  Swift::String v8 = v6 - 26;
  if (!v7) {
    Swift::String v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  Swift::String v8 = v6 - 10;
  if (!v7) {
    Swift::String v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1B;
  Swift::String v8 = v6 - 27;
  if (!v7) {
    Swift::String v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  Swift::String v8 = v6 - 2;
  if (!v7) {
    Swift::String v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  Swift::String v8 = v6 - 5;
  if (!v7) {
    Swift::String v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BillingErrorHelperRoute.Request.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10001A25C + 4 * byte_1001F3C15[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10001A290 + 4 * byte_1001F3C10[v4]))();
}

uint64_t sub_10001A290(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001A298(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10001A2A0LL);
  }
  return result;
}

uint64_t sub_10001A2AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10001A2B4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10001A2B8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001A2C0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_10001A2CC(_BYTE *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for BillingErrorHelperRoute.Request.CodingKeys()
{
  return &type metadata for BillingErrorHelperRoute.Request.CodingKeys;
}

unint64_t sub_10001A2EC()
{
  unint64_t result = qword_1002A9288;
  if (!qword_1002A9288)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F3D4C, &type metadata for BillingErrorHelperRoute.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A9288);
  }

  return result;
}

unint64_t sub_10001A32C()
{
  unint64_t result = qword_1002A9290;
  if (!qword_1002A9290)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F3CBC, &type metadata for BillingErrorHelperRoute.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A9290);
  }

  return result;
}

unint64_t sub_10001A36C()
{
  unint64_t result = qword_1002A9298;
  if (!qword_1002A9298)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F3CE4, &type metadata for BillingErrorHelperRoute.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A9298);
  }

  return result;
}

uint64_t sub_10001A3A8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10001A3B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_10001A3C8(uint64_t a1, uint64_t a2)
{
  return sub_100085E24(v4, v2);
}

uint64_t sub_10001A3E8(uint64_t a1)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t sub_10001A3F8()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001A400()
{
  return sub_100019F7C(v0);
}

uint64_t sub_10001A408(uint64_t a1)
{
  return swift_slowDealloc(a1, -1LL, -1LL);
}

uint64_t sub_10001A414()
{
  return swift_slowAlloc(2LL, -1LL);
}

uint64_t sub_10001A420()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001A428(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100270458, v2);
  sub_100019390();
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10001A47C(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x657070616D2D3276LL;
  }
  else {
    return 0x702D6C72752D3276LL;
  }
}

void sub_10001A4CC(char *a1, unsigned __int8 *a2)
{
}

void sub_10001A4D8()
{
}

uint64_t sub_10001A4E0(uint64_t a1)
{
  return sub_1000B286C(a1, *v1);
}

void sub_10001A4E8(uint64_t a1)
{
}

uint64_t sub_10001A4F0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10001A428(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10001A51C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10001A47C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10001A544()
{
  return sub_10001A47C(*v0);
}

uint64_t sub_10001A54C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10001A474(a1);
  *a2 = result;
  return result;
}

void sub_10001A570(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10001A57C(uint64_t a1)
{
  unint64_t v2 = sub_10001D7FC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001A5A4(uint64_t a1)
{
  unint64_t v2 = sub_10001D7FC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10001A5CC(void *a1)
{
  uint64_t v3 = sub_1000175B0(&qword_1002A9410);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_10001DAD0();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100019F58(a1, v8);
  unint64_t v10 = sub_10001D7FC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_100275BA0, &unk_100275BA0, v10, v8, v9);
  sub_1000175B0(&qword_1002A93B8);
  sub_10001D328((unint64_t *)&qword_1002A93C0);
  sub_10001DB24(v11);
  if (!v1)
  {
    sub_1000175B0(&qword_1002A9420);
    sub_10001D838(&qword_1002A9428);
    sub_10001DB24(v12);
  }

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
  sub_10001DAB8();
}

uint64_t sub_10001A708(void *a1)
{
  uint64_t v3 = sub_1000175B0(&qword_1002A9430);
  __chkstk_darwin(v3);
  sub_10001DAD0();
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100019F58(a1, v4);
  unint64_t v6 = sub_10001D7FC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_100275BA0, &unk_100275BA0, v6, v4, v5);
  if (v1)
  {
    sub_10001DC08();
  }

  else
  {
    sub_1000175B0(&qword_1002A93B8);
    sub_10001D328(&qword_1002A93E0);
    uint64_t v7 = sub_10001DBD4();
    sub_10001DC20(v7, v8, v9, v10);
    uint64_t v4 = v18;
    sub_1000175B0(&qword_1002A9420);
    sub_10001D838((unint64_t *)&qword_1002A9438);
    uint64_t v13 = v12;
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_10001DBD4();
    sub_10001DC20(v14, v15, v16, v17);
    sub_10001DBBC();
    if (v13)
    {
      sub_10001DC10();
      sub_10001DC08();
    }

    else
    {
      sub_10001DBCC();
      sub_10001DC08();
      swift_bridgeObjectRelease();
    }

    sub_10001DC10();
  }

  return v4;
}

uint64_t sub_10001A8A0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10001A708(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

void sub_10001A8C8(void *a1)
{
}

uint64_t sub_10001A8E0@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  a6[17] = 100LL;
  uint64_t v11 = (int *)type metadata accessor for BagResponse(0LL);
  uint64_t v63 = (char *)a6 + v11[19];
  uint64_t v12 = *(void *)(a4 + 8);
  uint64_t v13 = (uint64_t *)((char *)a6 + v11[17]);
  *uint64_t v13 = *(void *)a4;
  v13[1] = v12;
  __int128 v67 = *(_OWORD *)(a4 + 48);
  unint64_t v14 = sub_10001B4A0();
  sub_10001DBCC();
  uint64_t v15 = StringProtocol.localizedLowercase.getter(&type metadata for String, v14);
  uint64_t v16 = (uint64_t *)((char *)a6 + v11[21]);
  uint64_t *v16 = v15;
  v16[1] = v17;
  uint64_t v19 = *(void *)(a4 + 32);
  uint64_t v18 = *(void *)(a4 + 40);
  sub_10001DBCC();
  sub_10001B4DC((void *)a4);
  char v20 = (uint64_t *)((char *)a6 + v11[18]);
  void *v20 = v19;
  v20[1] = v18;
  uint64_t v21 = *(void *)(a5 + 24);
  *(void *)&__int128 v67 = *(void *)(a5 + 16);
  *((void *)&v67 + 1) = v21;
  v66[0] = 95LL;
  v66[1] = 0xE100000000000000LL;
  v65[0] = 45LL;
  v65[1] = 0xE100000000000000LL;
  uint64_t v22 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v66,  v65,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String);
  uint64_t v23 = (uint64_t *)((char *)a6 + v11[22]);
  uint64_t *v23 = v22;
  v23[1] = v24;
  *(void *)&__int128 v67 = 0x2F2F3A70747468LL;
  *((void *)&v67 + 1) = 0xE700000000000000LL;
  v25._countAndFlagsBits = a1;
  v25._object = a2;
  String.append(_:)(v25);
  sub_10001DB5C();
  v66[0] = a3;
  v68._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  sub_10001DBEC(v68);
  sub_100019390();
  __int128 v26 = v67;
  sub_10001DA38();
  v27._countAndFlagsBits = 0xD00000000000002ELL;
  v27._object = (void *)0x80000001002185F0LL;
  String.append(_:)(v27);
  uint64_t v28 = sub_1000175B0(&qword_1002A9098);
  uint64_t v29 = swift_allocObject(v28, 64LL, 7LL);
  *(_OWORD *)(v29 + 16) = xmmword_1001F3DD0;
  *(void *)(v29 + 32) = a1;
  *(void *)(v29 + 40) = a2;
  *(void *)&__int128 v67 = a1;
  *((void *)&v67 + 1) = a2;
  swift_bridgeObjectRetain_n(a2, 2LL);
  sub_10001DB5C();
  v66[0] = a3;
  v69._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  sub_10001DBEC(v69);
  uint64_t v30 = swift_bridgeObjectRelease();
  uint64_t v31 = *((void *)&v67 + 1);
  *(void *)(v29 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v67;
  *(void *)(v29 + 56) = v31;
  *a6 = v29;
  Date.init()(v30);
  *(void *)&__int128 v67 = a1;
  *((void *)&v67 + 1) = a2;
  sub_10001DB5C();
  v66[0] = a3;
  v70._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  sub_10001DBEC(v70);
  swift_bridgeObjectRelease();
  uint64_t v32 = *((void *)&v67 + 1);
  uint64_t v33 = (uint64_t *)((char *)a6 + v11[20]);
  *uint64_t v33 = v67;
  v33[1] = v32;
  *(void *)uint64_t v63 = 0LL;
  v63[8] = 0;
  *(uint64_t *)((char *)a6 + v11[23]) = 40LL;
  *(uint64_t *)((char *)a6 + v11[26]) = (uint64_t)_swiftEmptyArrayStorage;
  *(uint64_t *)((char *)a6 + v11[24]) = 900LL;
  *(uint64_t *)((char *)a6 + v11[25]) = 900LL;
  sub_10001DA38();
  v34._object = (void *)0x80000001002185F0LL;
  v34._countAndFlagsBits = 0xD00000000000002ELL;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  uint64_t v35 = *((void *)&v67 + 1);
  a6[1] = v67;
  a6[2] = v35;
  sub_10001DA38();
  sub_10001DAAC(0xD00000000000002DLL, (uint64_t)"/WebObjects/MZFinance.woa/wa/createAppReceipt");
  uint64_t v36 = *((void *)&v67 + 1);
  a6[3] = v67;
  a6[4] = v36;
  sub_10001DA38();
  sub_10001DAAC(0xD000000000000027LL, (uint64_t)"/WebObjects/MZFinance.woa/wa/buyProduct");
  uint64_t v37 = *((void *)&v67 + 1);
  a6[5] = v67;
  a6[6] = v37;
  sub_10001DA38();
  sub_10001DAAC(0xD000000000000021LL, (uint64_t)"/WebObjects/MZBuy.woa/wa/inAppBuy");
  uint64_t v38 = *((void *)&v67 + 1);
  a6[7] = v67;
  a6[8] = v38;
  sub_10001DA38();
  sub_10001DAAC(0xD000000000000031LL, (uint64_t)"/WebObjects/MZFinance.woa/wa/inAppTransactionDone");
  uint64_t v39 = *((void *)&v67 + 1);
  a6[9] = v67;
  a6[10] = v39;
  sub_10001DA38();
  v40._countAndFlagsBits = 0x2F737070416E692FLL;
  v40._object = (void *)0xEF79726F74736968LL;
  String.append(_:)(v40);
  uint64_t v41 = *((void *)&v67 + 1);
  a6[11] = v67;
  a6[12] = v41;
  sub_10001DA38();
  sub_10001DB7C((uint64_t)"/WebObjects/MZFinance.woa/wa/inAppRegrantPurchaseHistory");
  uint64_t v42 = *((void *)&v67 + 1);
  a6[13] = v67;
  a6[14] = v42;
  sub_10001DA38();
  sub_10001DAAC(0xD000000000000015LL, (uint64_t)"/inApps/subscriptions");
  uint64_t v43 = *((void *)&v67 + 1);
  a6[15] = v67;
  a6[16] = v43;
  sub_10001DA38();
  sub_10001DB7C((uint64_t)"/WebObjects/MZFastFinance.woa/wa/inAppCheckDownloadQueue");
  uint64_t v44 = *((void *)&v67 + 1);
  a6[18] = v67;
  a6[19] = v44;
  sub_10001DA38();
  sub_10001DAAC(0xD000000000000035LL, (uint64_t)"/WebObjects/MZFinance.woa/wa/inAppPendingTransactions");
  uint64_t v45 = *((void *)&v67 + 1);
  a6[20] = v67;
  a6[21] = v45;
  sub_10001DA38();
  v46._countAndFlagsBits = 0x2F646E756665722FLL;
  v46._object = (void *)0xEF74736575716572LL;
  String.append(_:)(v46);
  uint64_t v47 = *((void *)&v67 + 1);
  int v48 = (uint64_t *)((char *)a6 + v11[27]);
  *int v48 = v67;
  v48[1] = v47;
  sub_10001DA38();
  sub_10001DAE0();
  uint64_t v49 = *((void *)&v67 + 1);
  int v50 = (uint64_t *)((char *)a6 + v11[28]);
  *int v50 = v67;
  v50[1] = v49;
  sub_10001DA38();
  v51._countAndFlagsBits = 0x6D65656465722FLL;
  v51._object = (void *)0xE700000000000000LL;
  String.append(_:)(v51);
  uint64_t v52 = *((void *)&v67 + 1);
  unsigned int v53 = (uint64_t *)((char *)a6 + v11[29]);
  *unsigned int v53 = v67;
  v53[1] = v52;
  Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &type metadata for String);
  int v54 = (uint64_t *)((char *)a6 + v11[30]);
  *int v54 = &off_1002704A8;
  uint64_t v55 = sub_1000175B0(&qword_1002A92A8);
  uint64_t inited = swift_initStackObject(v55, v64);
  *(_OWORD *)(inited + 16) = xmmword_1001F3DD0;
  strcpy((char *)(inited + 32), "/subscriptions");
  *(_BYTE *)(inited + 47) = -18;
  *(void *)&__int128 v67 = 0LL;
  *((void *)&v67 + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(16LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __int128 v67 = v26;
  sub_10001DAE0();
  uint64_t v57 = *((void *)&v67 + 1);
  *(void *)(inited + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v67;
  *(void *)(inited + 56) = v57;
  *(void *)(inited + 64) = 0xD00000000000001ALL;
  *(void *)(inited + 72) = 0x8000000100218620LL;
  *(void *)&__int128 v67 = 0LL;
  *((void *)&v67 + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(28LL);
  swift_bridgeObjectRelease();
  __int128 v67 = v26;
  v58._countAndFlagsBits = 0xD00000000000001ALL;
  v58._object = (void *)0x8000000100218620LL;
  String.append(_:)(v58);
  uint64_t v59 = *((void *)&v67 + 1);
  *(void *)(inited + 80) = v67;
  *(void *)(inited + 8_Block_object_dispose((const void *)(v1 - 136), 8) = v59;
  uint64_t v60 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, &type metadata for String);
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  v54[1] = v60;
  return result;
}

uint64_t sub_10001AE90(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10001AECC + 4 * byte_1001F3DE0[a1]))( 0xD00000000000002ELL,  0x80000001002185F0LL);
}

void sub_10001AECC()
{
}

uint64_t sub_10001AF78()
{
  return 0x2F646E756665722FLL;
}

uint64_t sub_10001AF9C()
{
  return 0x697263736275732FLL;
}

uint64_t sub_10001AFC0()
{
  return 0x6D65656465722FLL;
}

uint64_t sub_10001AFD8(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_100270518, a1, a2, &unk_1002A8E28);
  sub_100019390();
  if (v2 >= 0x1B) {
    return 27LL;
  }
  else {
    return v2;
  }
}

uint64_t static NIOBSDSocket.Option.ipv6_v6only.getter()
{
  return 27LL;
}

uint64_t sub_10001B030(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10001B070 + 4 * byte_1001F3DED[a1]))( 0x4464657473757274LL,  0xEE00736E69616D6FLL);
}

unint64_t sub_10001B070()
{
  return 0xD000000000000011LL;
}

void sub_10001B308(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_10001B314()
{
}

uint64_t sub_10001B31C(uint64_t a1)
{
  return sub_1000B28D4(a1, *v1);
}

void sub_10001B324(uint64_t a1)
{
}

uint64_t sub_10001B32C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10001AFD8(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_10001B358@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10001B030(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10001B380()
{
  return sub_10001B304(*v0);
}

uint64_t sub_10001B388@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_10001B024();
  *a1 = result;
  return result;
}

void sub_10001B3AC(_BYTE *a1@<X8>)
{
  *a1 = 27;
}

uint64_t sub_10001B3B8(uint64_t a1)
{
  unint64_t v2 = sub_10001D2B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001B3E0(uint64_t a1)
{
  unint64_t v2 = sub_10001D2B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001B408(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2 = sub_1000D95A4();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t type metadata accessor for BagResponse(uint64_t a1)
{
  uint64_t result = qword_1002A9308;
  if (!qword_1002A9308) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BagResponse);
  }
  return result;
}

unint64_t sub_10001B4A0()
{
  unint64_t result = qword_1002A92A0;
  if (!qword_1002A92A0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1002A92A0);
  }

  return result;
}

void *sub_10001B4DC(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[7];
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

void sub_10001B544(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000175B0(&qword_1002A93A8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10001DAD0();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100019F58(a1, v10);
  unint64_t v12 = sub_10001D2B0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_100275A90, &unk_100275A90, v12, v10, v11);
  *(void *)&__int128 v37 = *v3;
  char v38 = 0;
  sub_1000175B0(&qword_1002A93B8);
  sub_10001D328((unint64_t *)&qword_1002A93C0);
  sub_10001DB04();
  if (!v2)
  {
    sub_10001DA10(v3[1], v3[2], 1);
    sub_10001DA10(v3[3], v3[4], 2);
    sub_10001DA10(v3[5], v3[6], 3);
    sub_10001DA10(v3[7], v3[8], 4);
    sub_10001DA10(v3[9], v3[10], 5);
    sub_10001DA10(v3[13], v3[14], 6);
    sub_10001DA78(v3[17], 7);
    sub_10001DA10(v3[18], v3[19], 8);
    sub_10001DA10(v3[20], v3[21], 9);
    uint64_t v36 = (int *)type metadata accessor for BagResponse(0LL);
    uint64_t v13 = (uint64_t)v3 + v36[16];
    LOBYTE(v37) = 10;
    uint64_t v14 = type metadata accessor for Date(0LL);
    uint64_t v15 = sub_10001D378((unint64_t *)&qword_1002A93C8);
    sub_10001DB44(v13, (uint64_t)&v37, v5, v14, v15);
    uint64_t v16 = sub_10001DB50(v36[17]);
    sub_10001DA10(v16, v17, 11);
    uint64_t v18 = sub_10001DB50(v36[18]);
    sub_10001DA10(v18, v19, 12);
    char v20 = (char *)v3 + v36[19];
    uint64_t v21 = *(void *)v20;
    uint64_t v22 = v20[8];
    LOBYTE(v37) = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v37, v5);
    uint64_t v23 = sub_10001DB50(v36[20]);
    sub_10001DA10(v23, v24, 14);
    uint64_t v25 = sub_10001DB50(v36[21]);
    sub_10001DA10(v25, v26, 15);
    uint64_t v27 = sub_10001DB50(v36[22]);
    sub_10001DA10(v27, v28, 16);
    sub_10001DA10(v3[11], v3[12], 17);
    sub_10001DA10(v3[15], v3[16], 18);
    sub_10001DA78(*(void *)((char *)v3 + v36[23]), 19);
    sub_10001DA78(*(void *)((char *)v3 + v36[24]), 20);
    sub_10001DA78(*(void *)((char *)v3 + v36[25]), 21);
    *(void *)&__int128 v37 = *(void *)((char *)v3 + v36[26]);
    char v38 = 22;
    sub_10001DB04();
    uint64_t v29 = sub_10001DB50(v36[27]);
    sub_10001DA10(v29, v30, 23);
    uint64_t v31 = sub_10001DB50(v36[28]);
    sub_10001DA10(v31, v32, 24);
    __int128 v37 = *(_OWORD *)((char *)v3 + v36[30]);
    char v38 = 25;
    unint64_t v33 = sub_10001D2EC();
    sub_10001DB44((uint64_t)&v37, (uint64_t)&v38, v5, (uint64_t)&unk_100275B08, v33);
    uint64_t v34 = sub_10001DB50(v36[29]);
    sub_10001DA10(v34, v35, 26);
  }

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  sub_10001DAB8();
}

void sub_10001B948(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v48 = *(void *)(v5 - 8);
  uint64_t v49 = v5;
  __chkstk_darwin(v5);
  sub_10001DAD0();
  uint64_t v8 = v7 - v6;
  uint64_t v51 = sub_1000175B0(&qword_1002A93D8);
  __chkstk_darwin(v51);
  sub_10001DAD0();
  uint64_t v9 = type metadata accessor for BagResponse(0LL);
  __chkstk_darwin(v9);
  sub_10001DAD0();
  unint64_t v12 = (char *)(v11 - v10);
  *((void *)v12 + 17) = 100LL;
  uint64_t v52 = v13;
  unsigned int v53 = v12;
  uint64_t v14 = &v12[v13[19]];
  *(void *)uint64_t v14 = 0LL;
  v14[8] = 1;
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  int v50 = a1;
  sub_100019F58(a1, v15);
  unint64_t v17 = sub_10001D2B0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_100275A90, &unk_100275A90, v17, v15, v16);
  if (v2)
  {
    sub_100019F7C(a1);
    int v55 = 0;
  }

  else
  {
    uint64_t v18 = sub_1000175B0(&qword_1002A93B8);
    char v56 = 0;
    sub_10001D328(&qword_1002A93E0);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v18, &v56, v51, v18);
    *(void *)unsigned int v53 = v54;
    *((void *)v53 + 1) = sub_10001DA58(1);
    *((void *)v53 + 2) = v19;
    *((void *)v53 + 3) = sub_10001DA58(2);
    *((void *)v53 + 4) = v20;
    *((void *)v53 + 5) = sub_10001DA58(3);
    *((void *)v53 + 6) = v21;
    *((void *)v53 + 7) = sub_10001DA58(4);
    *((void *)v53 + _Block_object_dispose((const void *)(v1 - 136), 8) = v22;
    *((void *)v53 + 9) = sub_10001DA58(5);
    *((void *)v53 + 10) = v23;
    *((void *)v53 + 13) = sub_10001DA58(6);
    *((void *)v53 + 14) = v24;
    LOBYTE(v54) = 7;
    *((void *)v53 + 17) = KeyedDecodingContainer.decode(_:forKey:)(&v54);
    *((void *)v53 + 1_Block_object_dispose((const void *)(v1 - 136), 8) = sub_10001DA58(8);
    *((void *)v53 + 19) = v25;
    *((void *)v53 + 20) = sub_10001DA58(9);
    *((void *)v53 + 21) = v26;
    LOBYTE(v54) = 10;
    sub_10001D378(&qword_1002A93E8);
    sub_10001DB9C(v49, (uint64_t)&v54);
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 32))(&v53[v52[16]], v8, v49);
    uint64_t v27 = sub_10001DB68(11);
    sub_10001DA9C(v27, v28, v52[17]);
    uint64_t v29 = sub_10001DA68(12);
    sub_10001DA9C(v29, v30, v52[18]);
    LOBYTE(v54) = 13;
    *(void *)uint64_t v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v54, v51);
    v14[8] = v31 & 1;
    uint64_t v32 = sub_10001DB68(14);
    sub_10001DA9C(v32, v33, v52[20]);
    uint64_t v34 = sub_10001DA68(15);
    sub_10001DA9C(v34, v35, v52[21]);
    uint64_t v36 = sub_10001DA68(16);
    sub_10001DA9C(v36, v37, v52[22]);
    *((void *)v53 + 11) = sub_10001DA68(17);
    *((void *)v53 + 12) = v38;
    *((void *)v53 + 15) = sub_10001DA68(18);
    *((void *)v53 + 16) = v39;
    LOBYTE(v54) = 19;
    *(void *)&v53[v52[23]] = KeyedDecodingContainer.decode(_:forKey:)(&v54);
    *(void *)&v53[v52[24]] = sub_10001DB8C(20);
    *(void *)&v53[v52[25]] = sub_10001DB8C(21);
    char v56 = 22;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v18, &v56, v51, v18);
    *(void *)&v53[v52[26]] = v54;
    LOBYTE(v54) = 23;
    uint64_t v40 = KeyedDecodingContainer.decode(_:forKey:)(&v54, v51);
    int v55 = 1;
    sub_10001DA9C(v40, v41, v52[27]);
    uint64_t v42 = sub_10001DA68(24);
    sub_10001DA9C(v42, v43, v52[28]);
    char v56 = 25;
    sub_10001D3B4();
    sub_10001DB9C((uint64_t)&unk_100275B08, (uint64_t)&v56);
    *(_OWORD *)&v53[v52[30]] = v54;
    LOBYTE(v54) = 26;
    uint64_t v44 = KeyedDecodingContainer.decode(_:forKey:)(&v54, v51);
    uint64_t v46 = v45;
    sub_10001DA28();
    uint64_t v47 = (uint64_t *)&v53[v52[29]];
    *uint64_t v47 = v44;
    v47[1] = v46;
    sub_10001D3F0((uint64_t)v53, a2);
    sub_100019F7C(v50);
    sub_10001D434((uint64_t)v53);
  }

  sub_10001DAB8();
}

void sub_10001C2A8(void *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_10001C2BC(void *a1)
{
}

uint64_t sub_10001C2D0(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16LL) & ~(unint64_t)v3);
    swift_retain(v4);
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v65 = a2[2];
    *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = a2[1];
    *(void *)(a1 + 16) = v65;
    uint64_t v8 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v8;
    uint64_t v9 = a2[6];
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v9;
    uint64_t v10 = a2[8];
    *(void *)(a1 + 56) = a2[7];
    *(void *)(a1 + 64) = v10;
    uint64_t v11 = a2[10];
    *(void *)(a1 + 72) = a2[9];
    *(void *)(a1 + 80) = v11;
    uint64_t v12 = a2[12];
    *(void *)(a1 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = a2[11];
    *(void *)(a1 + 96) = v12;
    uint64_t v64 = a2[14];
    *(void *)(a1 + 104) = a2[13];
    *(void *)(a1 + 112) = v64;
    uint64_t v63 = a2[16];
    *(void *)(a1 + 120) = a2[15];
    *(void *)(a1 + 12_Block_object_dispose((const void *)(v1 - 136), 8) = v63;
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
    uint64_t v14 = a2[19];
    uint64_t v13 = a2[20];
    *(void *)(a1 + 152) = v14;
    *(void *)(a1 + 160) = v13;
    uint64_t v61 = a2[21];
    uint64_t v62 = v14;
    uint64_t v15 = a3[16];
    uint64_t v66 = (uint64_t)a2 + v15;
    uint64_t v67 = a1 + v15;
    *(void *)(a1 + 16_Block_object_dispose((const void *)(v1 - 136), 8) = v61;
    uint64_t v16 = type metadata accessor for Date(0LL);
    uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v65);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v64);
    swift_bridgeObjectRetain(v63);
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRetain(v61);
    v60(v67, v66, v16);
    uint64_t v17 = a3[17];
    uint64_t v18 = a3[18];
    uint64_t v19 = (void *)(v7 + v17);
    uint64_t v20 = (uint64_t *)((char *)a2 + v17);
    uint64_t v21 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v21;
    uint64_t v22 = (void *)(v7 + v18);
    uint64_t v23 = (uint64_t *)((char *)a2 + v18);
    uint64_t v68 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v68;
    uint64_t v24 = a3[19];
    uint64_t v25 = a3[20];
    uint64_t v26 = v7 + v24;
    uint64_t v27 = (uint64_t)a2 + v24;
    *(void *)uint64_t v26 = *(void *)v27;
    *(_BYTE *)(v26 + _Block_object_dispose((const void *)(v1 - 136), 8) = *(_BYTE *)(v27 + 8);
    uint64_t v28 = (void *)(v7 + v25);
    uint64_t v29 = (uint64_t *)((char *)a2 + v25);
    uint64_t v30 = v29[1];
    *uint64_t v28 = *v29;
    v28[1] = v30;
    uint64_t v31 = a3[21];
    uint64_t v32 = a3[22];
    uint64_t v33 = (void *)(v7 + v31);
    uint64_t v34 = (uint64_t *)((char *)a2 + v31);
    uint64_t v35 = v34[1];
    *uint64_t v33 = *v34;
    v33[1] = v35;
    uint64_t v36 = (void *)(v7 + v32);
    uint64_t v37 = (uint64_t *)((char *)a2 + v32);
    uint64_t v38 = v37[1];
    *uint64_t v36 = *v37;
    v36[1] = v38;
    uint64_t v39 = a3[24];
    *(void *)(v7 + a3[23]) = *(uint64_t *)((char *)a2 + a3[23]);
    *(void *)(v7 + v39) = *(uint64_t *)((char *)a2 + v39);
    uint64_t v40 = a3[26];
    *(void *)(v7 + a3[25]) = *(uint64_t *)((char *)a2 + a3[25]);
    uint64_t v41 = *(uint64_t *)((char *)a2 + v40);
    *(void *)(v7 + v40) = v41;
    uint64_t v42 = a3[27];
    uint64_t v43 = a3[28];
    uint64_t v44 = (void *)(v7 + v42);
    uint64_t v45 = (uint64_t *)((char *)a2 + v42);
    uint64_t v46 = v45[1];
    *uint64_t v44 = *v45;
    v44[1] = v46;
    uint64_t v47 = (void *)(v7 + v43);
    uint64_t v48 = (uint64_t *)((char *)a2 + v43);
    uint64_t v49 = v48[1];
    *uint64_t v47 = *v48;
    v47[1] = v49;
    uint64_t v50 = a3[29];
    uint64_t v51 = a3[30];
    uint64_t v52 = (void *)(v7 + v50);
    unsigned int v53 = (uint64_t *)((char *)a2 + v50);
    uint64_t v54 = v53[1];
    *uint64_t v52 = *v53;
    v52[1] = v54;
    int v55 = (uint64_t *)(v7 + v51);
    char v56 = (uint64_t *)((char *)a2 + v51);
    uint64_t v57 = *v56;
    uint64_t v58 = v56[1];
    *int v55 = *v56;
    v55[1] = v58;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v68);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRetain(v54);
    swift_bridgeObjectRetain(v57);
    swift_bridgeObjectRetain(v58);
  }

  return v7;
}

uint64_t sub_10001C584(void *a1, int *a2)
{
  uint64_t v4 = (char *)a1 + a2[16];
  uint64_t v5 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[17] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[18] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[20] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[21] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[22] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[26]));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[27] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[28] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[29] + 8));
  uint64_t v6 = (void *)((char *)a1 + a2[30]);
  swift_bridgeObjectRelease(*v6);
  return swift_bridgeObjectRelease(v6[1]);
}

uint64_t sub_10001C6C8(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v71 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v6;
  uint64_t v8 = a2[2];
  uint64_t v7 = a2[3];
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v7;
  uint64_t v10 = a2[4];
  uint64_t v9 = a2[5];
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v9;
  uint64_t v12 = a2[6];
  uint64_t v11 = a2[7];
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v12;
  *(void *)(a1 + 56) = v11;
  uint64_t v14 = a2[8];
  uint64_t v13 = a2[9];
  *(void *)(a1 + 64) = v14;
  *(void *)(a1 + 72) = v13;
  uint64_t v16 = a2[10];
  uint64_t v15 = a2[11];
  *(void *)(a1 + 80) = v16;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = v15;
  uint64_t v18 = a2[12];
  uint64_t v17 = a2[13];
  *(void *)(a1 + 96) = v18;
  *(void *)(a1 + 104) = v17;
  uint64_t v19 = a2[15];
  uint64_t v70 = a2[14];
  *(void *)(a1 + 112) = v70;
  *(void *)(a1 + 120) = v19;
  uint64_t v72 = a2[16];
  *(void *)(a1 + 12_Block_object_dispose((const void *)(v1 - 136), 8) = v72;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
  uint64_t v21 = a2[19];
  uint64_t v20 = a2[20];
  *(void *)(a1 + 152) = v21;
  *(void *)(a1 + 160) = v20;
  uint64_t v68 = a2[21];
  uint64_t v69 = v21;
  uint64_t v22 = a3[16];
  uint64_t v73 = (uint64_t)a2 + v22;
  uint64_t v74 = a1 + v22;
  *(void *)(a1 + 16_Block_object_dispose((const void *)(v1 - 136), 8) = v68;
  uint64_t v23 = type metadata accessor for Date(0LL);
  uint64_t v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16LL);
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v70);
  swift_bridgeObjectRetain(v72);
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRetain(v68);
  v67(v74, v73, v23);
  uint64_t v24 = a3[17];
  uint64_t v25 = a3[18];
  uint64_t v26 = (void *)(a1 + v24);
  uint64_t v27 = (uint64_t *)((char *)a2 + v24);
  uint64_t v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  uint64_t v29 = (void *)(a1 + v25);
  uint64_t v30 = (uint64_t *)((char *)a2 + v25);
  uint64_t v75 = v30[1];
  *uint64_t v29 = *v30;
  v29[1] = v75;
  uint64_t v31 = a3[19];
  uint64_t v32 = a3[20];
  uint64_t v33 = a1 + v31;
  uint64_t v34 = (uint64_t)a2 + v31;
  *(void *)uint64_t v33 = *(void *)v34;
  *(_BYTE *)(v33 + _Block_object_dispose((const void *)(v1 - 136), 8) = *(_BYTE *)(v34 + 8);
  uint64_t v35 = (void *)(a1 + v32);
  uint64_t v36 = (uint64_t *)((char *)a2 + v32);
  uint64_t v37 = v36[1];
  *uint64_t v35 = *v36;
  v35[1] = v37;
  uint64_t v38 = a3[21];
  uint64_t v39 = a3[22];
  uint64_t v40 = (void *)(a1 + v38);
  uint64_t v41 = (uint64_t *)((char *)a2 + v38);
  uint64_t v42 = v41[1];
  void *v40 = *v41;
  v40[1] = v42;
  uint64_t v43 = (void *)(a1 + v39);
  uint64_t v44 = (uint64_t *)((char *)a2 + v39);
  uint64_t v45 = v44[1];
  *uint64_t v43 = *v44;
  v43[1] = v45;
  uint64_t v46 = a3[24];
  *(void *)(a1 + a3[23]) = *(uint64_t *)((char *)a2 + a3[23]);
  *(void *)(a1 + v46) = *(uint64_t *)((char *)a2 + v46);
  uint64_t v47 = a3[26];
  *(void *)(a1 + a3[25]) = *(uint64_t *)((char *)a2 + a3[25]);
  uint64_t v48 = *(uint64_t *)((char *)a2 + v47);
  *(void *)(a1 + v47) = v48;
  uint64_t v49 = a3[27];
  uint64_t v50 = a3[28];
  uint64_t v51 = (void *)(a1 + v49);
  uint64_t v52 = (uint64_t *)((char *)a2 + v49);
  uint64_t v53 = v52[1];
  *uint64_t v51 = *v52;
  v51[1] = v53;
  uint64_t v54 = (void *)(a1 + v50);
  int v55 = (uint64_t *)((char *)a2 + v50);
  uint64_t v56 = v55[1];
  *uint64_t v54 = *v55;
  v54[1] = v56;
  uint64_t v57 = a3[29];
  uint64_t v58 = a3[30];
  uint64_t v59 = (void *)(a1 + v57);
  uint64_t v60 = (uint64_t *)((char *)a2 + v57);
  uint64_t v61 = v60[1];
  *uint64_t v59 = *v60;
  v59[1] = v61;
  uint64_t v62 = (uint64_t *)(a1 + v58);
  uint64_t v63 = (uint64_t *)((char *)a2 + v58);
  uint64_t v64 = *v63;
  uint64_t v65 = v63[1];
  *uint64_t v62 = *v63;
  v62[1] = v65;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v75);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRetain(v65);
  return a1;
}

uint64_t *sub_10001C954(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[1] = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[3] = a2[3];
  uint64_t v10 = a2[4];
  uint64_t v11 = a1[4];
  a1[4] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[5] = a2[5];
  uint64_t v12 = a2[6];
  uint64_t v13 = a1[6];
  a1[6] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[7] = a2[7];
  uint64_t v14 = a2[8];
  uint64_t v15 = a1[8];
  a1[8] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[9] = a2[9];
  uint64_t v16 = a2[10];
  uint64_t v17 = a1[10];
  a1[10] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  a1[11] = a2[11];
  uint64_t v18 = a2[12];
  uint64_t v19 = a1[12];
  a1[12] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  a1[13] = a2[13];
  uint64_t v20 = a2[14];
  uint64_t v21 = a1[14];
  a1[14] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  a1[15] = a2[15];
  uint64_t v22 = a2[16];
  uint64_t v23 = a1[16];
  a1[16] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  a1[17] = a2[17];
  a1[18] = a2[18];
  uint64_t v24 = a2[19];
  uint64_t v25 = a1[19];
  a1[19] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  a1[20] = a2[20];
  uint64_t v26 = a2[21];
  uint64_t v27 = a1[21];
  a1[21] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  uint64_t v28 = a3[16];
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  uint64_t v31 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 24LL))(v29, v30, v31);
  uint64_t v32 = a3[17];
  uint64_t v33 = (uint64_t *)((char *)a1 + v32);
  uint64_t v34 = (uint64_t *)((char *)a2 + v32);
  *uint64_t v33 = *v34;
  uint64_t v35 = v34[1];
  uint64_t v36 = v33[1];
  v33[1] = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  uint64_t v37 = a3[18];
  uint64_t v38 = (uint64_t *)((char *)a1 + v37);
  uint64_t v39 = (uint64_t *)((char *)a2 + v37);
  *uint64_t v38 = *v39;
  uint64_t v40 = v39[1];
  uint64_t v41 = v38[1];
  v38[1] = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  uint64_t v42 = a3[19];
  uint64_t v43 = (char *)a1 + v42;
  uint64_t v44 = (char *)a2 + v42;
  uint64_t v45 = *(void *)v44;
  v43[8] = v44[8];
  *(void *)uint64_t v43 = v45;
  uint64_t v46 = a3[20];
  uint64_t v47 = (uint64_t *)((char *)a1 + v46);
  uint64_t v48 = (uint64_t *)((char *)a2 + v46);
  *uint64_t v47 = *v48;
  uint64_t v49 = v48[1];
  uint64_t v50 = v47[1];
  v47[1] = v49;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRelease(v50);
  uint64_t v51 = a3[21];
  uint64_t v52 = (uint64_t *)((char *)a1 + v51);
  uint64_t v53 = (uint64_t *)((char *)a2 + v51);
  *uint64_t v52 = *v53;
  uint64_t v54 = v53[1];
  uint64_t v55 = v52[1];
  v52[1] = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease(v55);
  uint64_t v56 = a3[22];
  uint64_t v57 = (uint64_t *)((char *)a1 + v56);
  uint64_t v58 = (uint64_t *)((char *)a2 + v56);
  *uint64_t v57 = *v58;
  uint64_t v59 = v58[1];
  uint64_t v60 = v57[1];
  v57[1] = v59;
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRelease(v60);
  *(uint64_t *)((char *)a1 + a3[23]) = *(uint64_t *)((char *)a2 + a3[23]);
  *(uint64_t *)((char *)a1 + a3[24]) = *(uint64_t *)((char *)a2 + a3[24]);
  *(uint64_t *)((char *)a1 + a3[25]) = *(uint64_t *)((char *)a2 + a3[25]);
  uint64_t v61 = a3[26];
  uint64_t v62 = *(uint64_t *)((char *)a2 + v61);
  uint64_t v63 = *(uint64_t *)((char *)a1 + v61);
  *(uint64_t *)((char *)a1 + v61) = v62;
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRelease(v63);
  uint64_t v64 = a3[27];
  uint64_t v65 = (uint64_t *)((char *)a1 + v64);
  uint64_t v66 = (uint64_t *)((char *)a2 + v64);
  *uint64_t v65 = *v66;
  uint64_t v67 = v66[1];
  uint64_t v68 = v65[1];
  v65[1] = v67;
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRelease(v68);
  uint64_t v69 = a3[28];
  uint64_t v70 = (uint64_t *)((char *)a1 + v69);
  uint64_t v71 = (uint64_t *)((char *)a2 + v69);
  *uint64_t v70 = *v71;
  uint64_t v72 = v71[1];
  uint64_t v73 = v70[1];
  v70[1] = v72;
  swift_bridgeObjectRetain(v72);
  swift_bridgeObjectRelease(v73);
  uint64_t v74 = a3[29];
  uint64_t v75 = (uint64_t *)((char *)a1 + v74);
  unsigned int v76 = (uint64_t *)((char *)a2 + v74);
  *uint64_t v75 = *v76;
  uint64_t v77 = v76[1];
  uint64_t v78 = v75[1];
  v75[1] = v77;
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRelease(v78);
  uint64_t v79 = a3[30];
  unsigned int v80 = (char *)a1 + v79;
  unsigned int v81 = (char *)a2 + v79;
  uint64_t v82 = *(uint64_t *)((char *)a2 + v79);
  uint64_t v83 = *(uint64_t *)((char *)a1 + v79);
  *(uint64_t *)((char *)a1 + v79) = v82;
  swift_bridgeObjectRetain(v82);
  swift_bridgeObjectRelease(v83);
  uint64_t v84 = *((void *)v81 + 1);
  uint64_t v85 = *((void *)v80 + 1);
  *((void *)v80 + 1) = v84;
  swift_bridgeObjectRetain(v84);
  swift_bridgeObjectRelease(v85);
  return a1;
}

uint64_t sub_10001CD10(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  __int128 v6 = *(_OWORD *)(a2 + 160);
  uint64_t v7 = a3[16];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v6;
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  uint64_t v11 = a3[18];
  *(_OWORD *)(a1 + a3[17]) = *(_OWORD *)(a2 + a3[17]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  uint64_t v12 = a3[19];
  uint64_t v13 = a3[20];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = a2 + v12;
  *(void *)uint64_t v14 = *(void *)v15;
  *(_BYTE *)(v14 + _Block_object_dispose((const void *)(v1 - 136), 8) = *(_BYTE *)(v15 + 8);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  uint64_t v16 = a3[22];
  *(_OWORD *)(a1 + a3[21]) = *(_OWORD *)(a2 + a3[21]);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  uint64_t v17 = a3[24];
  *(void *)(a1 + a3[23]) = *(void *)(a2 + a3[23]);
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  uint64_t v18 = a3[26];
  *(void *)(a1 + a3[25]) = *(void *)(a2 + a3[25]);
  *(void *)(a1 + v1_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + v18);
  uint64_t v19 = a3[28];
  *(_OWORD *)(a1 + a3[27]) = *(_OWORD *)(a2 + a3[27]);
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  uint64_t v20 = a3[30];
  *(_OWORD *)(a1 + a3[29]) = *(_OWORD *)(a2 + a3[29]);
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  return a1;
}

uint64_t *sub_10001CE68(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a2[2];
  uint64_t v8 = a1[2];
  a1[1] = a2[1];
  a1[2] = v7;
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a2[4];
  uint64_t v10 = a1[4];
  a1[3] = a2[3];
  a1[4] = v9;
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = a2[6];
  uint64_t v12 = a1[6];
  a1[5] = a2[5];
  a1[6] = v11;
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = a2[8];
  uint64_t v14 = a1[8];
  a1[7] = a2[7];
  a1[8] = v13;
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = a2[10];
  uint64_t v16 = a1[10];
  a1[9] = a2[9];
  a1[10] = v15;
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = a2[12];
  uint64_t v18 = a1[12];
  a1[11] = a2[11];
  a1[12] = v17;
  swift_bridgeObjectRelease(v18);
  uint64_t v19 = a2[14];
  uint64_t v20 = a1[14];
  a1[13] = a2[13];
  a1[14] = v19;
  swift_bridgeObjectRelease(v20);
  uint64_t v21 = a2[16];
  uint64_t v22 = a1[16];
  a1[15] = a2[15];
  a1[16] = v21;
  swift_bridgeObjectRelease(v22);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  uint64_t v23 = a1[19];
  a1[19] = a2[19];
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = a2[21];
  uint64_t v25 = a1[21];
  a1[20] = a2[20];
  a1[21] = v24;
  swift_bridgeObjectRelease(v25);
  uint64_t v26 = a3[16];
  uint64_t v27 = (uint64_t)a1 + v26;
  uint64_t v28 = (uint64_t)a2 + v26;
  uint64_t v29 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 40LL))(v27, v28, v29);
  uint64_t v30 = a3[17];
  uint64_t v31 = (uint64_t *)((char *)a1 + v30);
  uint64_t v32 = (uint64_t *)((char *)a2 + v30);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  uint64_t v35 = v31[1];
  *uint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease(v35);
  uint64_t v36 = a3[18];
  uint64_t v37 = (uint64_t *)((char *)a1 + v36);
  uint64_t v38 = (uint64_t *)((char *)a2 + v36);
  uint64_t v40 = *v38;
  uint64_t v39 = v38[1];
  uint64_t v41 = v37[1];
  *uint64_t v37 = v40;
  v37[1] = v39;
  swift_bridgeObjectRelease(v41);
  uint64_t v42 = a3[19];
  uint64_t v43 = a3[20];
  uint64_t v44 = (uint64_t)a1 + v42;
  uint64_t v45 = (uint64_t)a2 + v42;
  *(void *)uint64_t v44 = *(void *)v45;
  *(_BYTE *)(v44 + _Block_object_dispose((const void *)(v1 - 136), 8) = *(_BYTE *)(v45 + 8);
  uint64_t v46 = (uint64_t *)((char *)a1 + v43);
  uint64_t v47 = (uint64_t *)((char *)a2 + v43);
  uint64_t v49 = *v47;
  uint64_t v48 = v47[1];
  uint64_t v50 = v46[1];
  *uint64_t v46 = v49;
  v46[1] = v48;
  swift_bridgeObjectRelease(v50);
  uint64_t v51 = a3[21];
  uint64_t v52 = (uint64_t *)((char *)a1 + v51);
  uint64_t v53 = (uint64_t *)((char *)a2 + v51);
  uint64_t v55 = *v53;
  uint64_t v54 = v53[1];
  uint64_t v56 = v52[1];
  *uint64_t v52 = v55;
  v52[1] = v54;
  swift_bridgeObjectRelease(v56);
  uint64_t v57 = a3[22];
  uint64_t v58 = (uint64_t *)((char *)a1 + v57);
  uint64_t v59 = (uint64_t *)((char *)a2 + v57);
  uint64_t v61 = *v59;
  uint64_t v60 = v59[1];
  uint64_t v62 = v58[1];
  *uint64_t v58 = v61;
  v58[1] = v60;
  swift_bridgeObjectRelease(v62);
  uint64_t v63 = a3[24];
  *(uint64_t *)((char *)a1 + a3[23]) = *(uint64_t *)((char *)a2 + a3[23]);
  *(uint64_t *)((char *)a1 + v63) = *(uint64_t *)((char *)a2 + v63);
  uint64_t v64 = a3[26];
  *(uint64_t *)((char *)a1 + a3[25]) = *(uint64_t *)((char *)a2 + a3[25]);
  uint64_t v65 = *(uint64_t *)((char *)a1 + v64);
  *(uint64_t *)((char *)a1 + v64) = *(uint64_t *)((char *)a2 + v64);
  swift_bridgeObjectRelease(v65);
  uint64_t v66 = a3[27];
  uint64_t v67 = (uint64_t *)((char *)a1 + v66);
  uint64_t v68 = (uint64_t *)((char *)a2 + v66);
  uint64_t v70 = *v68;
  uint64_t v69 = v68[1];
  uint64_t v71 = v67[1];
  *uint64_t v67 = v70;
  v67[1] = v69;
  swift_bridgeObjectRelease(v71);
  uint64_t v72 = a3[28];
  uint64_t v73 = (uint64_t *)((char *)a1 + v72);
  uint64_t v74 = (uint64_t *)((char *)a2 + v72);
  uint64_t v76 = *v74;
  uint64_t v75 = v74[1];
  uint64_t v77 = v73[1];
  *uint64_t v73 = v76;
  v73[1] = v75;
  swift_bridgeObjectRelease(v77);
  uint64_t v78 = a3[29];
  uint64_t v79 = (uint64_t *)((char *)a1 + v78);
  unsigned int v80 = (uint64_t *)((char *)a2 + v78);
  uint64_t v82 = *v80;
  uint64_t v81 = v80[1];
  uint64_t v83 = v79[1];
  *uint64_t v79 = v82;
  v79[1] = v81;
  swift_bridgeObjectRelease(v83);
  uint64_t v84 = a3[30];
  uint64_t v85 = (uint64_t)a1 + v84;
  unint64_t v86 = (uint64_t *)((char *)a2 + v84);
  uint64_t v87 = *(uint64_t *)((char *)a1 + v84);
  *(uint64_t *)((char *)a1 + v84) = *v86;
  swift_bridgeObjectRelease(v87);
  uint64_t v88 = *(void *)(v85 + 8);
  *(void *)(v85 + _Block_object_dispose((const void *)(v1 - 136), 8) = v86[1];
  swift_bridgeObjectRelease(v88);
  return a1;
}

uint64_t sub_10001D0D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001D0E4);
}

uint64_t sub_10001D0E4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    return sub_10001D158((uint64_t)a1 + *(int *)(a3 + 64), a2, v8);
  }

uint64_t sub_10001D158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t sub_10001D164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001D170);
}

void *sub_10001D170(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    return (void *)sub_10001762C((uint64_t)v5 + *(int *)(a4 + 64), a2, a2, v7);
  }

  return result;
}

uint64_t sub_10001D1DC(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = &unk_1001F3E48;
  v4[2] = &unk_1001F3E48;
  v4[3] = &unk_1001F3E48;
  void v4[4] = &unk_1001F3E48;
  v4[5] = &unk_1001F3E48;
  v4[6] = &unk_1001F3E48;
  v4[7] = &unk_1001F3E48;
  v4[8] = &unk_1001F3E48;
  v4[9] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[10] = &unk_1001F3E48;
  v4[11] = &unk_1001F3E48;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[12] = *(void *)(result - 8) + 64LL;
    v4[13] = &unk_1001F3E48;
    v4[14] = &unk_1001F3E48;
    v4[15] = &unk_1001F3E60;
    v4[16] = &unk_1001F3E48;
    v4[17] = &unk_1001F3E48;
    v4[18] = &unk_1001F3E48;
    v4[19] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[20] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[21] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[22] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[23] = &unk_1001F3E48;
    v4[24] = &unk_1001F3E48;
    v4[25] = &unk_1001F3E48;
    v4[26] = &unk_1001F3E48;
    swift_initStructMetadata(a1, 256LL, 27LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

unint64_t sub_10001D2B0()
{
  unint64_t result = qword_1002A93B0;
  if (!qword_1002A93B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F4034, &unk_100275A90);
    atomic_store(result, (unint64_t *)&qword_1002A93B0);
  }

  return result;
}

unint64_t sub_10001D2EC()
{
  unint64_t result = qword_1002A93D0;
  if (!qword_1002A93D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F400C, &unk_100275B08);
    atomic_store(result, (unint64_t *)&qword_1002A93D0);
  }

  return result;
}

void sub_10001D328(unint64_t *a1)
{
  if (!*a1)
  {
    uint64_t v2 = sub_100018EC0(&qword_1002A93B8);
    atomic_store(sub_10001DC18(v2, v2), a1);
  }

  sub_10001DBAC();
}

uint64_t sub_10001D378(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v3 = type metadata accessor for Date(255LL);
    uint64_t result = sub_10001DC18(v3, v3);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_10001D3B4()
{
  unint64_t result = qword_1002A93F0;
  if (!qword_1002A93F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F3FE4, &unk_100275B08);
    atomic_store(result, (unint64_t *)&qword_1002A93F0);
  }

  return result;
}

uint64_t sub_10001D3F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BagResponse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001D434(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BagResponse(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10001D470(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xE6)
  {
    if (a2 + 26 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 26) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 27;
    return (v5 + 1);
  }

uint64_t sub_10001D4F8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 26 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 26) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xE6) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xE5) {
    return ((uint64_t (*)(void))((char *)&loc_10001D544 + 4 * byte_1001F3E0D[v4]))();
  }
  *a1 = a2 + 26;
  return ((uint64_t (*)(void))((char *)sub_10001D578 + 4 * byte_1001F3E08[v4]))();
}

uint64_t sub_10001D578(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001D580(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10001D588LL);
  }
  return result;
}

uint64_t sub_10001D594(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10001D59CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 26;
  return result;
}

uint64_t sub_10001D5A0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001D5A8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for BagResponse.CodingKeys()
{
}

uint64_t sub_10001D5C4(void *a1)
{
  return swift_bridgeObjectRelease(a1[1]);
}

void *sub_10001D5EC(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  sub_10001DBCC();
  return a1;
}

uint64_t *sub_10001D61C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void *sub_10001D678(void *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for EventLoopIterator(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EventLoopIterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for BagResponse.CommerceUISection()
{
}

unint64_t sub_10001D740()
{
  unint64_t result = qword_1002A93F8;
  if (!qword_1002A93F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F3FBC, &unk_100275A90);
    atomic_store(result, (unint64_t *)&qword_1002A93F8);
  }

  return result;
}

unint64_t sub_10001D780()
{
  unint64_t result = qword_1002A9400;
  if (!qword_1002A9400)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F3EF4, &unk_100275A90);
    atomic_store(result, (unint64_t *)&qword_1002A9400);
  }

  return result;
}

unint64_t sub_10001D7C0()
{
  unint64_t result = qword_1002A9408;
  if (!qword_1002A9408)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F3F1C, &unk_100275A90);
    atomic_store(result, (unint64_t *)&qword_1002A9408);
  }

  return result;
}

unint64_t sub_10001D7FC()
{
  unint64_t result = qword_1002A9418;
  if (!qword_1002A9418)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F4174, &unk_100275BA0);
    atomic_store(result, (unint64_t *)&qword_1002A9418);
  }

  return result;
}

void sub_10001D838(unint64_t *a1)
{
  if (!*a1)
  {
    uint64_t v2 = sub_100018EC0(&qword_1002A9420);
    atomic_store(sub_10001DC18(v2, v2), a1);
  }

  sub_10001DBAC();
}

uint64_t sub_10001D888(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10001D8D4 + 4 * byte_1001F3E17[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10001D908 + 4 * byte_1001F3E12[v4]))();
}

uint64_t sub_10001D908(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001D910(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10001D918LL);
  }
  return result;
}

uint64_t sub_10001D924(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10001D92CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10001D930(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001D938(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for BagResponse.CommerceUISection.CodingKeys()
{
}

unint64_t sub_10001D954()
{
  unint64_t result = qword_1002A9440;
  if (!qword_1002A9440)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F414C, &unk_100275BA0);
    atomic_store(result, (unint64_t *)&qword_1002A9440);
  }

  return result;
}

unint64_t sub_10001D994()
{
  unint64_t result = qword_1002A9448;
  if (!qword_1002A9448)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F4084, &unk_100275BA0);
    atomic_store(result, (unint64_t *)&qword_1002A9448);
  }

  return result;
}

unint64_t sub_10001D9D4()
{
  unint64_t result = qword_1002A9450;
  if (!qword_1002A9450)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F40AC, &unk_100275BA0);
    atomic_store(result, (unint64_t *)&qword_1002A9450);
  }

  return result;
}

uint64_t sub_10001DA10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(_BYTE *)(v4 - 96) = a3;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v4 - 96, v3);
}

uint64_t sub_10001DA28()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 144) + 8LL))( *(void *)(v0 - 136),  *(void *)(v0 - 128));
}

uint64_t sub_10001DA38()
{
  *(void *)(v2 - 112) = v1;
  *(void *)(v2 - 104) = v0;
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10001DA44()
{
  *(void *)(v4 - 112) = v1;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v3);
}

uint64_t sub_10001DA58@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v2 - 96) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v2 - 96, v1);
}

uint64_t sub_10001DA68@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v1 - 96) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v1 - 96, *(void *)(v1 - 128));
}

uint64_t sub_10001DA78@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  *(_BYTE *)(v3 - 96) = a2;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, v3 - 96, v2);
}

uint64_t sub_10001DA90@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(v1 + a1 + 8));
}

uint64_t sub_10001DA9C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (void *)(*(void *)(v3 - 104) + a3);
  void *v4 = result;
  v4[1] = a2;
  return result;
}

void sub_10001DAAC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (a2 - 32) | 0x8000000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

  ;
}

  ;
}

void sub_10001DAE0()
{
  v0._countAndFlagsBits = 0x697263736275732FLL;
  v0._object = (void *)0xEE00736E6F697470LL;
  String.append(_:)(v0);
}

uint64_t sub_10001DB04()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 96, v3 - 65, v0, v1, v2);
}

uint64_t sub_10001DB24(uint64_t a1)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 72, v3 - 81, v1, v2, a1);
}

uint64_t sub_10001DB44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_10001DB50@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(v1 + a1);
}

void sub_10001DB5C()
{
  v0._countAndFlagsBits = 58LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
}

uint64_t sub_10001DB68@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v1 - 96) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v1 - 96, *(void *)(v1 - 128));
}

void sub_10001DB7C(uint64_t a1@<X8>)
{
  v2._object = (void *)((a1 - 32) | 0x8000000000000000LL);
  v2._countAndFlagsBits = v1;
  String.append(_:)(v2);
}

uint64_t sub_10001DB8C@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v1 - 96) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v1 - 96);
}

uint64_t sub_10001DB9C(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, *(void *)(v2 - 128), a1);
}

  ;
}

uint64_t sub_10001DBBC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10001DBCC()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10001DBD4()
{
  return v0;
}

void sub_10001DBEC(Swift::String a1)
{
}

  ;
}

  ;
}

uint64_t sub_10001DC08()
{
  return sub_100019F7C(v0);
}

uint64_t sub_10001DC10()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001DC18(uint64_t a1, uint64_t a2)
{
  return swift_getWitnessTable(v2, a2);
}

uint64_t sub_10001DC20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_10001DC30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return a3 + a1;
  }
  else {
    return 0LL;
  }
}

char *sub_10001DC48(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a1;
  if (a1 >> 62) {
    goto LABEL_27;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v5)
  {
LABEL_31:
    swift_release(a2);
    swift_bridgeObjectRelease();
    return (char *)_swiftEmptyArrayStorage;
  }

LABEL_3:
  uint64_t v22 = v4;
  unint64_t result = sub_100032178(0LL, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000LL) == 0)
  {
    uint64_t v7 = 0LL;
    unint64_t v8 = v4 & 0xC000000000000001LL;
    while (1)
    {
      if (v5 == v7)
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        if (v4 < 0) {
          uint64_t v20 = v4;
        }
        else {
          uint64_t v20 = v4 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain();
        uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v20);
        swift_bridgeObjectRelease();
        if (!v5) {
          goto LABEL_31;
        }
        goto LABEL_3;
      }

      if (v8)
      {
        uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v4);
      }

      else
      {
        uint64_t v9 = *(void *)(v4 + 8 * v7 + 32);
        swift_retain();
      }

      uint64_t v10 = *(void *)(v9 + 56);
      if ((unint64_t)v10 >> 62)
      {
        if (v10 < 0) {
          uint64_t v16 = *(void *)(v9 + 56);
        }
        else {
          uint64_t v16 = v10 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain_n(*(void *)(v9 + 56), 2LL);
        if (!_CocoaArrayWrapper.endIndex.getter(v16))
        {
LABEL_19:
          swift_release(v9);
          swift_bridgeObjectRelease();
          char v15 = 3;
          goto LABEL_20;
        }
      }

      else
      {
        uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        swift_bridgeObjectRetain_n(*(void *)(v9 + 56), 2LL);
        if (!v11) {
          goto LABEL_19;
        }
      }

      if ((v10 & 0xC000000000000001LL) != 0)
      {
        uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v10);
      }

      else
      {
        if (!*(void *)((v10 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_26;
        }
        uint64_t v12 = *(void *)(v10 + 32);
        swift_retain();
      }

      swift_bridgeObjectRelease();
      sub_100019F58((void *)(a2 + 88), *(void *)(a2 + 112));
      uint64_t v13 = swift_retain();
      sub_100087FF0(v13, a3, a4);
      char v15 = v14;
      swift_release(v9);
      swift_release_n(v12, 2LL);
      uint64_t v4 = v22;
LABEL_20:
      unint64_t v18 = _swiftEmptyArrayStorage[2];
      unint64_t v17 = _swiftEmptyArrayStorage[3];
      if (v18 >= v17 >> 1)
      {
        sub_100032178((char *)(v17 > 1), v18 + 1, 1);
        uint64_t v4 = v22;
      }

      ++v7;
      _swiftEmptyArrayStorage[2] = v18 + 1;
      uint64_t v19 = &_swiftEmptyArrayStorage[2 * v18];
      v19[4] = v10;
      *((_BYTE *)v19 + 40) = v15;
      if (v5 == v7) {
        goto LABEL_31;
      }
    }
  }

  __break(1u);
  return result;
}

  sub_100174CC8();
LABEL_4:
  uint64_t v35 = 0;
  return v35 & 1;
}

  char v14 = 0;
LABEL_4:
  if (*(_BYTE *)(a1 + 120) == 1)
  {
    sub_10002A5A4();
    char v15 = 0;
  }

  else
  {
    uint64_t v16 = v14;
    unint64_t v17 = *(void *)(a1 + 112);
    swift_retain();
    unint64_t v18 = sub_100006CE4((_BYTE *)(v17 + 16));
    char v14 = v16;
    swift_release();
    *(_BYTE *)(a1 + 120) = v18;
    sub_10002A5A4();
    if (v18) {
      char v15 = 256;
    }
    else {
      char v15 = 0;
    }
  }

  return v15 | v14 & 1u;
}

void *sub_10001DEC4()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = (void *)v1;
  if (v1 == 1)
  {
    uint64_t v2 = sub_1000A4EA8(0x6465722D65646F63LL, 0xEB000000006D6565LL, 1819112552LL, 0xE400000000000000LL);
    uint64_t v3 = *(void *)(v0 + 128);
    *(void *)(v0 + 12_Block_object_dispose((const void *)(v1 - 136), 8) = v2;
    *(void *)(v0 + 136) = v4;
    swift_bridgeObjectRetain();
    sub_10001E95C(v3);
  }

  sub_10001E9A0(v1);
  return v2;
}

uint64_t sub_10001DF68@<X0>(uint64_t a1@<X8>)
{
  LODWORD(v2) = v1;
  uint64_t v4 = sub_1001BCBC8();
  sub_10012A314(1684628080LL, 0xE400000000000000LL, v4);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  sub_10001EDA0();
  uint64_t v93 = a1;
  if (!v8)
  {
    sub_10001ED94();
    uint64_t v68 = sub_10001ED88();
    uint64_t result = sub_10001ED7C(v68);
    uint64_t v70 = 0LL;
    uint64_t v71 = 0LL;
    __int128 v72 = 0uLL;
    uint64_t v73 = 21LL;
LABEL_113:
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)(result + 32) = v73;
    *(_DWORD *)(result + 40) = v2;
    *(void *)uint64_t v93 = result;
    *(void *)(v93 + _Block_object_dispose((const void *)(v1 - 136), 8) = _swiftEmptyArrayStorage;
    *(_BYTE *)(v93 + 16) = 2;
    *(_OWORD *)(v93 + 24) = v72;
    *(void *)(v93 + 40) = v70;
    *(void *)(v93 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v71;
    *(_BYTE *)(v93 + 62) = BYTE6(v8);
    *(_WORD *)(v93 + 60) = WORD2(v8);
    *(_DWORD *)(v93 + 56) = v8;
    return result;
  }

  uint64_t v9 = sub_10001DEC4();
  if (!v9)
  {
    swift_bridgeObjectRelease();
    sub_10001ED94();
    uint64_t v74 = sub_10001ED88();
    uint64_t result = sub_10001ED7C(v74);
    uint64_t v70 = 0LL;
    uint64_t v71 = 0LL;
    uint64_t v8 = 0LL;
    __int128 v72 = 0uLL;
    uint64_t v73 = 49LL;
    goto LABEL_113;
  }

  Swift::Int v91 = v10;
  uint64_t v92 = (uint64_t)v9;
  sub_10001EDA8();
  sub_10007608C();
  uint64_t v11 = sub_10001EDA8();
  sub_100075EE8(v11, v12);
  uint64_t v90 = v13;
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t v14 = swift_bridgeObjectRetain();
  uint64_t v88 = v6;
  int v89 = (void *)v8;
  char v15 = sub_10001DC48(v14, v1, v6, v8);
  sub_10001EDA0();
  uint64_t v95 = *((void *)v15 + 2);
  if (!v95)
  {
    sub_100019390();
    unint64_t v97 = _swiftEmptyArrayStorage;
LABEL_109:
    type metadata accessor for AppIconRoute();
    unint64_t v75 = sub_10005A048(v88, v89);
    uint64_t v77 = v76;
    sub_10001A3F8();
    if (*(void *)(v90 + 24))
    {
      uint64_t v78 = *(void *)(v90 + 16);
      unint64_t v79 = *(void *)(v90 + 24);
    }

    else
    {
      unint64_t v79 = 0xE800000000000000LL;
      uint64_t v78 = 0x656D614E20707041LL;
    }

    unsigned int v120 = &type metadata for OfferCodeRedeemUIRoute.ViewProperties;
    unsigned int v80 = (void *)swift_allocObject(&unk_100275C90, 56LL, 7LL);
    *(void *)&__int128 v118 = v80;
    v80[2] = v75;
    v80[3] = v77;
    v80[4] = v78;
    v80[5] = v79;
    v80[6] = v97;
    sub_10001ED74();
    uint64_t v81 = sub_1000A5464((uint64_t)&v118, v92, v91);
    unint64_t v83 = v82;
    sub_10001A3F8();
    sub_100019F7C(&v118);
    sub_1000ACB64(v81, v83, 1u, (uint64_t)&v118);
    __int128 v117 = v118;
    uint64_t v70 = v119;
    uint64_t v71 = v120;
    uint64_t v2 = v121;
    uint64_t v84 = v122;
    uint64_t v85 = v123;
    swift_release(v90);
    sub_10001ED6C();
    uint64_t v8 = v2 | (v84 << 32) | (v85 << 48);
    sub_10001ED94();
    uint64_t v86 = sub_10001ED88();
    uint64_t result = sub_10001ED7C(v86);
    __int128 v72 = v117;
    uint64_t v73 = 3LL;
    goto LABEL_113;
  }

  int v94 = v15 + 32;
  uint64_t v87 = (uint64_t)v15;
  swift_bridgeObjectRetain();
  uint64_t v16 = 0LL;
  unint64_t v97 = _swiftEmptyArrayStorage;
  while (1)
  {
    uint64_t v96 = v16;
    unint64_t v17 = &v94[16 * v16];
    uint64_t v18 = *(void *)v17;
    int v19 = v17[8];
    if (!(*(void *)v17 >> 62))
    {
      uint64_t v20 = *(void *)((v18 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      sub_10001EDCC();
      if (v20) {
        break;
      }
      goto LABEL_88;
    }

    uint64_t v56 = v18 < 0 ? *(void *)v17 : v18 & 0xFFFFFFFFFFFFFF8LL;
    sub_10001EDCC();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter(v56);
    if (v20) {
      break;
    }
LABEL_88:
    unsigned int v106 = _swiftEmptyArrayStorage;
LABEL_89:
    sub_10001EDE8(v18);
    uint64_t v57 = v106[2];
    uint64_t v58 = v97[2];
    if (__OFADD__(v58, v57)) {
      goto LABEL_115;
    }
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v97);
    uint64_t v60 = v97;
    if (!isUniquelyReferenced_nonNull_native || v58 + v57 > v97[3] >> 1)
    {
      sub_10002EF20();
      uint64_t v60 = v61;
    }

    unint64_t v97 = v60;
    if (v106[2])
    {
      uint64_t v62 = v60[2];
      if ((v60[3] >> 1) - v62 < v57) {
        goto LABEL_118;
      }
      unint64_t v63 = (unint64_t)&v60[5 * v62 + 4];
      swift_arrayInitWithCopy(v63);
      if (v57)
      {
        uint64_t v65 = v97[2];
        BOOL v66 = __OFADD__(v65, v57);
        uint64_t v67 = v65 + v57;
        if (v66) {
          goto LABEL_119;
        }
        v97[2] = v67;
      }
    }

    else if (v57)
    {
      goto LABEL_116;
    }

    swift_bridgeObjectRelease();
    uint64_t v16 = v96 + 1;
    if (v96 + 1 == v95)
    {
      sub_10001EDE8(v87);
      goto LABEL_109;
    }
  }

  if (v20 >= 1)
  {
    uint64_t v21 = 0LL;
    unint64_t v100 = v18 & 0xC000000000000001LL;
    unsigned int v106 = _swiftEmptyArrayStorage;
    uint64_t v98 = v18;
    uint64_t v99 = v20;
    while (1)
    {
      uint64_t v22 = v100 ? specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v18) : swift_retain();
      uint64_t v105 = v21;
      unsigned int v107 = (void *)v22;
      uint64_t v23 = *(void *)(v22 + 152);
      if ((unint64_t)v23 >> 62)
      {
        uint64_t v50 = v23 < 0 ? *(void *)(v22 + 152) : v23 & 0xFFFFFFFFFFFFFF8LL;
        sub_10001EDE0();
        swift_bridgeObjectRetain();
        uint64_t v24 = _CocoaArrayWrapper.endIndex.getter(v50);
        sub_100019390();
      }

      else
      {
        uint64_t v24 = *(void *)((v23 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        sub_10001EDE0();
      }

      if (v24) {
        break;
      }
      sub_10001EDD8();
      sub_10001ED6C();
LABEL_82:
      uint64_t v21 = v105 + 1;
      if (v105 + 1 == v99) {
        goto LABEL_89;
      }
    }

    uint64_t v103 = v107[10];
    uint64_t v104 = v107[11];
    swift_bridgeObjectRetain();
    uint64_t v25 = sub_10001ED74();
    uint64_t v26 = sub_1000CC010(v25);
    sub_10001A3F8();
    if (v26)
    {
      uint64_t v101 = *(void *)(v26 + 40);
      uint64_t v102 = *(void *)(v26 + 32);
      swift_bridgeObjectRetain();
      sub_10001EDD8();
    }

    else
    {
      uint64_t v27 = sub_1001BA868();
      uint64_t v101 = v28;
      uint64_t v102 = v27;
    }

    uint64_t v29 = v107[19];
    if (!((unint64_t)v29 >> 62))
    {
      uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain();
      if (v30) {
        goto LABEL_21;
      }
      goto LABEL_76;
    }

    if (v29 < 0) {
      uint64_t v51 = v107[19];
    }
    else {
      uint64_t v51 = v29 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter(v51);
    if (!v30)
    {
LABEL_76:
      swift_bridgeObjectRelease();
      sub_10001EDD8();
      sub_10001ED6C();
      uint64_t v32 = _swiftEmptyArrayStorage;
LABEL_77:
      if ((swift_isUniquelyReferenced_nonNull_native(v106) & 1) == 0)
      {
        sub_10002EF20();
        unsigned int v106 = v54;
      }

      unint64_t v52 = v106[2];
      if (v52 >= v106[3] >> 1)
      {
        sub_10002EF20();
        unsigned int v106 = v55;
      }

      v106[2] = v52 + 1;
      uint64_t v53 = &v106[5 * v52];
      v53[4] = v103;
      v53[5] = v104;
      v53[6] = v102;
      v53[7] = v101;
      v53[8] = v32;
      uint64_t v18 = v98;
      goto LABEL_82;
    }

LABEL_21:
    int v124 = _swiftEmptyArrayStorage;
    sub_100032118();
    if ((v30 & 0x8000000000000000LL) == 0)
    {
      uint64_t v31 = 0LL;
      uint64_t v32 = v124;
      unint64_t v112 = v29 & 0xC000000000000001LL;
      uint64_t v108 = v29;
      uint64_t v109 = v29 + 32;
      uint64_t v110 = v30;
      while (1)
      {
        if (v112)
        {
          uint64_t v33 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v29);
        }

        else
        {
          uint64_t v33 = *(void **)(v109 + 8 * v31);
          sub_10001EDE0();
        }

        uint64_t v115 = v33[2];
        uint64_t v116 = v33[11];
        uint64_t v113 = v33[10];
        uint64_t v114 = v33[3];
        if (v19 == 3)
        {
          swift_bridgeObjectRetain();
          sub_10001ED74();
          sub_10001ED6C();
          char v34 = 1;
          goto LABEL_64;
        }

        uint64_t v35 = v33[12];
        if (!*(void *)(v35 + 16))
        {
          swift_bridgeObjectRetain();
          sub_10001ED74();
          sub_10001ED6C();
          char v34 = 1;
          uint64_t v30 = v110;
          goto LABEL_64;
        }

        Hasher.init(_seed:)(&v118);
        unint64_t v111 = v32;
        if (v19)
        {
          if (v19 == 1) {
            uint64_t v36 = 0x676E697473697865LL;
          }
          else {
            uint64_t v36 = 0x64657269707865LL;
          }
          if (v19 == 1) {
            unint64_t v37 = 0xE800000000000000LL;
          }
          else {
            unint64_t v37 = 0xE700000000000000LL;
          }
        }

        else
        {
          unint64_t v37 = 0xE300000000000000LL;
          uint64_t v36 = 7824750LL;
        }

        swift_bridgeObjectRetain();
        sub_10001ED74();
        swift_bridgeObjectRetain();
        String.hash(into:)(&v118, v36, v37);
        sub_10001EDA0();
        Swift::Int v38 = Hasher._finalize()();
        uint64_t v39 = -1LL << *(_BYTE *)(v35 + 32);
        unint64_t v40 = v38 & ~v39;
        if (((*(void *)(v35 + 56 + ((v40 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v40) & 1) == 0)
        {
LABEL_59:
          sub_10001ED6C();
          sub_10001DC10();
          char v34 = 1;
          goto LABEL_63;
        }

        uint64_t v41 = ~v39;
        while (1)
        {
          if (*(_BYTE *)(*(void *)(v35 + 48) + v40))
          {
            if (*(_BYTE *)(*(void *)(v35 + 48) + v40) == 1)
            {
              uint64_t v42 = 0xE800000000000000LL;
              uint64_t v43 = 0x676E697473697865LL;
              if (!v19) {
                goto LABEL_52;
              }
            }

            else
            {
              uint64_t v42 = 0xE700000000000000LL;
              uint64_t v43 = 0x64657269707865LL;
              if (!v19)
              {
LABEL_52:
                unint64_t v45 = 0xE300000000000000LL;
                uint64_t v44 = 7824750LL;
                goto LABEL_53;
              }
            }
          }

          else
          {
            uint64_t v42 = 0xE300000000000000LL;
            uint64_t v43 = 7824750LL;
            if (!v19) {
              goto LABEL_52;
            }
          }

          uint64_t v44 = v19 == 1 ? 0x676E697473697865LL : 0x64657269707865LL;
          unint64_t v45 = v19 == 1 ? 0xE800000000000000LL : 0xE700000000000000LL;
LABEL_53:
          if (v43 == v44 && v42 == v45)
          {
            sub_10001ED6C();
            sub_10001DC10();
            sub_10001EDE8(v42);
            goto LABEL_62;
          }

          char v47 = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v42, v44, v45, 0LL);
          sub_10001EDA0();
          swift_bridgeObjectRelease();
          if ((v47 & 1) != 0) {
            break;
          }
          unint64_t v40 = (v40 + 1) & v41;
          if (((*(void *)(v35 + 56 + ((v40 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v40) & 1) == 0) {
            goto LABEL_59;
          }
        }

        sub_10001ED6C();
        sub_10001DC10();
LABEL_62:
        char v34 = 0;
LABEL_63:
        uint64_t v30 = v110;
        uint64_t v32 = v111;
        uint64_t v29 = v108;
LABEL_64:
        int v124 = v32;
        unint64_t v48 = v32[2];
        if (v48 >= v32[3] >> 1)
        {
          sub_100032118();
          uint64_t v32 = v124;
        }

        ++v31;
        v32[2] = v48 + 1;
        uint64_t v49 = &v32[5 * v48];
        v49[4] = v115;
        v49[5] = v114;
        v49[6] = v113;
        v49[7] = v116;
        *((_BYTE *)v49 + 64) = v34;
        if (v31 == v30)
        {
          swift_bridgeObjectRelease();
          swift_release(v107);
          sub_10001ED6C();
          goto LABEL_77;
        }
      }
    }

    __break(1u);
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
  }

  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

      uint64_t v11 = (v18 - 1) & v18;
    }
  }

  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v6 = (v12 - 1) & v12;
  }

  uint64_t v13 = v11 + 4;
  if (v13 >= v7) {
    return swift_release();
  }
  uint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12)
  {
    uint64_t v8 = v13;
    goto LABEL_21;
  }

  while (1)
  {
    uint64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v8 >= v7) {
      return swift_release();
    }
    uint64_t v12 = *(void *)(v3 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }

  __break(1u);
  return result;
}

  uint64_t v6 = v7;
LABEL_47:
  sub_1000314B8(v4, (v12 - v4) / 16, v6);
  return 1LL;
}

    uint64_t v7 = 0LL;
    memset(v106, 0, sizeof(v106));
    uint64_t v105 = 0u;
  }

  swift_release(a1);
  uint64_t v25 = *(void *)(a2 + 16);
  if (v25)
  {
    objc_opt_self(&OBJC_CLASS___SQLiteNullPredicate);
    swift_bridgeObjectRetain(a2);
    uint64_t v26 = a2 + 40;
    do
    {
      sub_10019ABD4();
      uint64_t v27 = sub_10019AC30();
      uint64_t v28 = sub_10001A3F8();
      uint64_t v29 = sub_10006D50C(v28, "isNullPredicateWithProperty:");

      uint64_t v30 = v29;
      sub_10019AB40();
      sub_10019ABE8();
      if (v32) {
        sub_1000C09D8(v31);
      }
      v26 += 16LL;
      uint64_t v33 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v106, v30);
      specialized Array._endMutation()(v33);

      --v25;
    }

    while (v25);
    sub_100023EF4();
  }

  char v34 = *(void *)(a3 + 16);
  if (v34)
  {
    objc_opt_self(&OBJC_CLASS___SQLiteNullPredicate);
    sub_1000356F4();
    uint64_t v35 = a3 + 40;
    do
    {
      sub_10019ABD4();
      uint64_t v36 = sub_10019AC30();
      unint64_t v37 = sub_10001A3F8();
      Swift::Int v38 = sub_10006D50C(v37, "isNotNullPredicateWithProperty:");

      uint64_t v39 = v38;
      sub_10019AB40();
      uint64_t v41 = *(void *)((v110 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v40 = *(void *)((v110 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v41 >= v40 >> 1) {
        sub_1000C09D8(v40);
      }
      v35 += 16LL;
      uint64_t v42 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v41, v39);
      specialized Array._endMutation()(v42);

      --v34;
    }

    while (v34);
    swift_bridgeObjectRelease(a3);
  }

  int v94 = a4 + 64;
  sub_10019AAB0();
  unint64_t v45 = v44 & v43;
  uint64_t v96 = (unint64_t)(v46 + 63) >> 6;
  unint64_t v48 = swift_bridgeObjectRetain(v47);
  uint64_t v49 = 0LL;
  while (v45)
  {
    uint64_t v50 = __clz(__rbit64(v45));
    v45 &= v45 - 1;
    uint64_t v51 = v50 | (v49 << 6);
LABEL_56:
    uint64_t v55 = *(void *)(*(void *)(v48 + 56) + 8 * v51);
    uint64_t v56 = *(void *)(v55 + 16);
    if (v56)
    {
      unint64_t v100 = v45;
      uint64_t v102 = v49;
      uint64_t v57 = (uint64_t *)(*(void *)(v48 + 48) + 16 * v51);
      uint64_t v59 = *v57;
      uint64_t v58 = v57[1];
      uint64_t v104 = (unint64_t)_swiftEmptyArrayStorage;
      uint64_t v60 = v55 + 32;
      swift_bridgeObjectRetain(v58);
      uint64_t v98 = v55;
      swift_bridgeObjectRetain(v55);
      do
      {
        uint64_t v61 = sub_10002C010(v60, (uint64_t)&v107);
        sub_10019AC48(v61, v62, v63, v64, v65, v66, v67, v68);
        uint64_t v69 = sub_10001672C(0LL, &qword_1002B8968, &OBJC_CLASS___NSNull_ptr);
        if (swift_dynamicCast(&v103, &v105, (char *)&type metadata for Any + 8, v69, 6LL))
        {

          uint64_t v70 = (void *)objc_opt_self(&OBJC_CLASS___SQLiteNullPredicate);
          uint64_t v71 = String._bridgeToObjectiveC()();
          __int128 v72 = [v70 isNullPredicateWithProperty:v71];
        }

        else
        {
          uint64_t v73 = sub_10001672C(0LL, &qword_1002AFD00, off_10026E2D0);
          sub_10019AC48(v73, v74, v75, v76, v77, v78, v79, v80);
          swift_bridgeObjectRetain(v58);
          __int128 v72 = sub_10019A824(v59, v58, &v105);
        }

        uint64_t v81 = v72;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v81);
        unint64_t v83 = *(void *)((v104 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v82 = *(void *)((v104 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v83 >= v82 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v82 > 1);
        }
        uint64_t v84 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v83, v81);
        specialized Array._endMutation()(v84);

        sub_100019F7C(&v107);
        v60 += 32LL;
        --v56;
      }

      while (v56);
      sub_10001DC10();
      swift_bridgeObjectRelease(v98);
      sub_10001672C(0LL, &qword_1002AFD08, off_10026E2D8);
      sub_100069E18(v104);
      uint64_t v86 = v85;
      sub_100019390();
      sub_10019A020(v86, (SEL *)&selRef_predicateMatchingAnyPredicates_);
      uint64_t v88 = v87;
      sub_10019AB40();
      sub_10019ABE8();
      if (v32) {
        sub_1000C09D8(v89);
      }
      uint64_t v90 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v86, v88);
      specialized Array._endMutation()(v90);

      unint64_t v48 = a4;
      unint64_t v45 = v100;
      uint64_t v49 = v102;
    }
  }

  unint64_t v52 = v49 + 1;
  if (__OFADD__(v49, 1LL))
  {
    __break(1u);
    goto LABEL_69;
  }

  if (v52 >= v96) {
    goto LABEL_67;
  }
  uint64_t v53 = *(void *)(v94 + 8 * v52);
  ++v49;
  if (v53) {
    goto LABEL_55;
  }
  uint64_t v49 = v52 + 1;
  if (v52 + 1 >= v96) {
    goto LABEL_67;
  }
  uint64_t v53 = *(void *)(v94 + 8 * v49);
  if (v53) {
    goto LABEL_55;
  }
  uint64_t v49 = v52 + 2;
  if (v52 + 2 >= v96) {
    goto LABEL_67;
  }
  uint64_t v53 = *(void *)(v94 + 8 * v49);
  if (v53)
  {
LABEL_55:
    unint64_t v45 = (v53 - 1) & v53;
    uint64_t v51 = __clz(__rbit64(v53)) + (v49 << 6);
    goto LABEL_56;
  }

  uint64_t v54 = v52 + 3;
  if (v54 >= v96)
  {
LABEL_67:
    swift_release(v48);
    sub_10001672C(0LL, &qword_1002AFD08, off_10026E2D8);
    sub_100069E18(v110);
    uint64_t v92 = v91;
    sub_100019390();
    sub_10019A020(v92, (SEL *)&selRef_predicateMatchingAllPredicates_);
    return;
  }

  uint64_t v53 = *(void *)(v94 + 8 * v54);
  if (v53)
  {
    uint64_t v49 = v54;
    goto LABEL_55;
  }

  while (1)
  {
    uint64_t v49 = v54 + 1;
    if (__OFADD__(v54, 1LL)) {
      break;
    }
    if (v49 >= v96) {
      goto LABEL_67;
    }
    uint64_t v53 = *(void *)(v94 + 8 * v49);
    ++v54;
    if (v53) {
      goto LABEL_55;
    }
  }

uint64_t sub_10001E8E4()
{
  return sub_10001E95C(*(void *)(v0 + 128));
}

void *sub_10001E8EC()
{
  uint64_t v0 = sub_10007F138();
  sub_100019F7C(v0 + 11);
  sub_10001E95C(v0[16]);
  return v0;
}

uint64_t sub_10001E920()
{
  uint64_t v0 = sub_10001E8EC();
  return swift_deallocClassInstance(v0, 144LL, 7LL);
}

uint64_t type metadata accessor for OfferCodeRedeemUIRoute()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService22OfferCodeRedeemUIRoute);
}

uint64_t sub_10001E95C(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t sub_10001E96C()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10001E9A0(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRetain(result);
  }
  return result;
}

uint64_t initializeWithCopy for OfferCodeRedeemUIRoute.ViewProperties.Subscription.Code( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for OfferCodeRedeemUIRoute.ViewProperties.Subscription.Code(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for OfferCodeRedeemUIRoute.ViewProperties.Subscription.Code( uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for OfferCodeRedeemUIRoute.ViewProperties.Subscription.Code(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for OfferCodeRedeemUIRoute.ViewProperties.Subscription.Code( uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 33))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OfferCodeRedeemUIRoute.ViewProperties.Subscription.Code( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for OfferCodeRedeemUIRoute.ViewProperties.Subscription.Code()
{
  return &type metadata for OfferCodeRedeemUIRoute.ViewProperties.Subscription.Code;
}

__n128 initializeWithTake for OfferCodeRedeemUIRoute.ViewProperties(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for OfferCodeRedeemUIRoute.ViewProperties()
{
  return &type metadata for OfferCodeRedeemUIRoute.ViewProperties;
}

uint64_t destroy for FetchSoftwareAddOnsResponse(void *a1)
{
  return swift_bridgeObjectRelease(a1[4]);
}

void _s25ASOctaneSupportXPCService22OfferCodeRedeemUIRouteC14ViewPropertiesVwcp_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10001ED74();
  sub_1000193B8();
}

void _s25ASOctaneSupportXPCService22OfferCodeRedeemUIRouteC14ViewPropertiesVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  sub_10001A3F8();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  sub_10001A3F8();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  sub_100019390();
  sub_1000193B8();
}

void *assignWithTake for FetchSoftwareAddOnsResponse(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = a1[1];
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  uint64_t v6 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchSoftwareAddOnsResponse(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FetchSoftwareAddOnsResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for OfferCodeRedeemUIRoute.ViewProperties.Subscription()
{
  return &type metadata for OfferCodeRedeemUIRoute.ViewProperties.Subscription;
}

uint64_t sub_10001ED6C()
{
  return swift_release(v0);
}

uint64_t sub_10001ED74()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10001ED7C(uint64_t a1)
{
  return swift_allocObject(a1, 44LL, 7LL);
}

uint64_t sub_10001ED88()
{
  return type metadata accessor for HTTPResponseHead._Storage();
}

ASOctaneSupportXPCService::HTTPVersion sub_10001ED94()
{
  return HTTPVersion.init(major:minor:)(1LL, 1LL);
}

uint64_t sub_10001EDA0()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10001EDA8()
{
  return v2;
}

uint64_t sub_10001EDCC()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t sub_10001EDD8()
{
  return swift_release(v0);
}

uint64_t sub_10001EDE0()
{
  return swift_retain(v0);
}

uint64_t sub_10001EDE8(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 2LL);
}

void sub_10001EDF0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = v38;
  if (!v38) {
    goto LABEL_5;
  }
  uint64_t v2 = v37[0];
  v47[0] = v37[0];
  v47[1] = v37[1];
  v47[2] = v37[2];
  v47[3] = v37[3];
  v47[4] = v37[4];
  v47[5] = v38;
  uint64_t v34 = v39;
  uint64_t v35 = v40;
  v47[6] = v39;
  v47[7] = v40;
  sub_10012A314(25705LL, 0xE200000000000000LL, *(void *)(a1 + 96));
  if (!v8)
  {
    sub_10001FF90(v7, 0LL, v9, v10, v11, v12, v13, v14, v33, v39, v40);
LABEL_5:
    unsigned int v31 = sub_10001ED94();
    Swift::UInt16 v24 = v31;
    unsigned int v25 = HIWORD(v31);
    uint64_t v32 = sub_100020008();
    uint64_t v29 = sub_10001ED7C(v32);
    *(double *)&__int128 v28 = sub_100020050();
    *(_OWORD *)(v27 + 16) = v28;
    uint64_t v30 = 21LL;
    goto LABEL_6;
  }

  sub_10001F00C((uint64_t)v47, v7, v8, v37);
  uint64_t v15 = swift_bridgeObjectRelease();
  sub_10001FF90(v15, v16, v17, v18, v19, v20, v21, v22, v33, v34, v35);
  sub_1001C1B3C(v37);
  __int128 v36 = v41;
  uint64_t v6 = v42;
  uint64_t v2 = v43;
  unint64_t v3 = v44 | ((unint64_t)v45 << 32) | ((unint64_t)v46 << 48);
  unsigned int v23 = sub_10001ED94();
  Swift::UInt16 v24 = v23;
  unsigned int v25 = HIWORD(v23);
  uint64_t v26 = sub_100020008();
  uint64_t v27 = sub_10001ED7C(v26);
  __int128 v28 = v36;
  uint64_t v29 = v27;
  *(void *)(v27 + 16) = 0LL;
  *(void *)(v27 + 24) = 0LL;
  uint64_t v30 = 3LL;
LABEL_6:
  *(void *)(v27 + 32) = v30;
  *(_WORD *)(v27 + 40) = v24;
  *(_WORD *)(v27 + 42) = v25;
  *(void *)a2 = v29;
  *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 136), 8) = _swiftEmptyArrayStorage;
  *(_BYTE *)(a2 + 16) = 2;
  *(_OWORD *)(a2 + 24) = v28;
  *(void *)(a2 + 40) = v6;
  *(void *)(a2 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v2;
  *(_BYTE *)(a2 + 62) = BYTE6(v3);
  *(_WORD *)(a2 + 60) = WORD2(v3);
  *(_DWORD *)(a2 + 56) = v3;
}

void *sub_10001F00C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = v4;
  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_100018F68(v9, (uint64_t)qword_1002EB9D0);
  sub_10001FFF0();
  sub_10001FFF8();
  sub_10001FFF0();
  uint64_t v10 = sub_10001FFF8();
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter();
  uint64_t v37 = a2;
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc(22LL, -1LL);
    uint64_t v34 = swift_slowAlloc(64LL, -1LL);
    uint64_t v42 = v34;
    *(_DWORD *)uint64_t v13 = 136315394;
    sub_10001FFF0();
    uint64_t v38 = sub_1000CF360(a2, a3, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v13 + 4);
    swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v13 + 12) = 2080;
    uint64_t v14 = v5;
    uint64_t v15 = *(void *)(a1 + 32);
    unint64_t v16 = *(void *)(a1 + 40);
    swift_bridgeObjectRetain();
    uint64_t v38 = sub_1000CF360(v15, v16, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v13 + 14);
    uint64_t v5 = v14;
    swift_bridgeObjectRelease();
    sub_100020000();
    sub_100020000();
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "Handling in-app subscription status request for subscription group %s and app %s.",  (uint8_t *)v13,  0x16u);
    swift_arrayDestroy(v34, 2LL);
    sub_10001A408(v34);
    sub_10001A408(v13);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);
    sub_100020000();
    sub_100020000();
  }

  sub_10002003C();
  uint64_t v18 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  if ((sub_10001F3C8(a2, a3, v18, v17) & 1) != 0)
  {
    uint64_t v19 = sub_100019F58((void *)(v5 + 88), *(void *)(v5 + 112));
    uint64_t v20 = sub_1000175B0(&qword_1002A9098);
    uint64_t inited = swift_initStackObject(v20, v39);
    uint64_t v22 = a2;
    uint64_t v23 = inited;
    *(_OWORD *)(inited + 16) = xmmword_1001F3C00;
    *(void *)(inited + 32) = v22;
    *(void *)(inited + 40) = a3;
    uint64_t v24 = *v19;
    sub_10001FFF0();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1000D962C(v23, v24, v18, v17);
    uint64_t v35 = v25;
    swift_setDeallocating(v23);
    sub_1001B7630();
    sub_10002003C();
    sub_100075EE8(v18, v17);
    uint64_t v27 = v26;
    uint64_t v28 = sub_100020030((uint64_t)&unk_100275EC0);
    sub_10001FFB0(v28);
    uint64_t v29 = sub_100020030((uint64_t)&unk_100275EE8);
    sub_10001FFB0(v29);
    sub_10001FFF8();
    sub_10001FFF8();
    swift_retain();
    sub_10001FFF0();
    sub_10001FFF8();
    swift_retain();
    swift_retain();
    sub_10017C074( (__int128 *)a1,  v35,  v37,  a3,  0,  v27,  (uint64_t)sub_10001FF88,  v28,  (uint64_t)v40,  (uint64_t)sub_10001FF8C,  v29);
    sub_10004C060((uint64_t)v40, (uint64_t)__src);
    swift_release(v27);
    return memcpy(a4, __src, 0x59uLL);
  }

  else
  {
    unint64_t v31 = sub_10001FD38();
    uint64_t v32 = swift_allocError(&type metadata for HTTPResponseStatus, v31, 0LL, 0LL);
    *uint64_t v33 = 0LL;
    v33[1] = 0LL;
    v33[2] = 25LL;
    return (void *)swift_willThrow(v32);
  }

uint64_t sub_10001F3C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = v6;
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  LOBYTE(a2) = sub_10001FA84(v8, a1, a2);
  swift_bridgeObjectRelease();
  swift_release(v7);
  return a2 & 1;
}

uint64_t type metadata accessor for SingleStatusRoute()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService17SingleStatusRoute);
}

uint64_t sub_10001F468@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v23;
  if (v23)
  {
    uint64_t v4 = v24;
    uint64_t v3 = v25;
    uint64_t v6 = v21;
    uint64_t v5 = v22;
    uint64_t v8 = v19;
    uint64_t v7 = v20;
    uint64_t v9 = v18;
    v33[0] = v18;
    v33[1] = v19;
    v33[2] = v20;
    v33[3] = v21;
    v33[4] = v22;
    v33[5] = v23;
    v33[6] = v24;
    v33[7] = v25;
    sub_10001F5B0(v33, &v18);
    sub_10001FBF0(v9, v8, v7, v6, v5, v2, v4, v3);
    sub_1001C1B3C(&v18);
    uint64_t v2 = v26;
    uint64_t v10 = v27;
    uint64_t v11 = v28;
    uint64_t v12 = v29;
    unint64_t v13 = v30 | ((unint64_t)v31 << 32) | ((unint64_t)v32 << 48);
    uint64_t v14 = 3LL;
  }

  else
  {
    uint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    unint64_t v13 = 0LL;
    uint64_t v14 = 21LL;
  }

  ASOctaneSupportXPCService::HTTPVersion v15 = sub_10001ED94();
  uint64_t v16 = sub_100020008();
  uint64_t result = sub_10001ED7C(v16);
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 32) = v14;
  *(ASOctaneSupportXPCService::HTTPVersion *)(result + 40) = v15;
  *(void *)a1 = result;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = _swiftEmptyArrayStorage;
  *(_BYTE *)(a1 + 16) = 2;
  *(void *)(a1 + 24) = v2;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v12;
  *(_BYTE *)(a1 + 62) = BYTE6(v13);
  *(_WORD *)(a1 + 60) = WORD2(v13);
  *(_DWORD *)(a1 + 56) = v13;
  return result;
}

void sub_10001F5B0(void *a1@<X0>, void *a2@<X8>)
{
  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_100018F68(v3, (uint64_t)qword_1002EB9D0);
  uint64_t v4 = sub_100020010();
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    v39[0] = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v9 = a1;
    uint64_t v10 = a1[4];
    unint64_t v11 = a1[5];
    swift_bridgeObjectRetain();
    __src[0] = sub_1000CF360(v10, v11, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(__src, &__src[1], v7 + 4);
    a1 = v9;
    swift_bridgeObjectRelease();
    sub_10001FC94(v9);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "Handling in-app subscription status request for %s.",  v7,  0xCu);
    swift_arrayDestroy(v8, 1LL);
    sub_10001A408(v8);
    sub_10001A408((uint64_t)v7);
  }

  else
  {
    sub_10001FC94(a1);
  }

  sub_100020024();
  uint64_t v12 = a1[4];
  uint64_t v35 = a1[5];
  sub_100075EE8(v12, v35);
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v13 + 56);
  if ((unint64_t)v15 >> 62)
  {
    if (v15 < 0) {
      uint64_t v34 = *(void *)(v13 + 56);
    }
    else {
      uint64_t v34 = v15 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter(v34);
  }

  else
  {
    uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain();
  }

  uint64_t v36 = v12;
  uint64_t v37 = v14;
  if (!v16)
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = _swiftEmptyArrayStorage;
LABEL_19:
    uint64_t v24 = *sub_100020018();
    ChannelPipeline.syncOperations.getter();
    swift_bridgeObjectRetain();
    sub_1000D962C((uint64_t)v18, v24, v36, v35);
    uint64_t v26 = v25;
    sub_100020024();
    sub_100075EE8(v36, v35);
    uint64_t v28 = v27;
    uint64_t v29 = sub_100020030((uint64_t)&unk_100275E70);
    sub_10001FFD0(v29);
    uint64_t v30 = sub_100020030((uint64_t)&unk_100275E98);
    sub_10001FFD0(v30);
    sub_100020010();
    sub_100020010();
    swift_retain();
    sub_100020010();
    swift_retain();
    ChannelPipeline.syncOperations.getter();
    sub_10017C074( (__int128 *)a1,  v26,  (uint64_t)v18,  0LL,  1,  v28,  (uint64_t)sub_10001FCEC,  v29,  (uint64_t)v39,  (uint64_t)sub_10001FD14,  v30);
    unsigned __int16 v31 = sub_100020018();
    uint64_t v32 = *v31;
    uint64_t v33 = *(os_unfair_lock_s **)(*(void *)(*v31 + 128LL) + 16LL);
    swift_retain();
    os_unfair_lock_lock(v33);
    *(_BYTE *)(v32 + 112) = 1;
    os_unfair_lock_unlock(v33);
    swift_release(v32);
    sub_10004C060((uint64_t)v39, (uint64_t)__src);
    swift_release(v37);
    swift_release(v28);
    memcpy(a2, __src, 0x59uLL);
    return;
  }

  v39[0] = (uint64_t)_swiftEmptyArrayStorage;
  sub_100032050();
  if ((v16 & 0x8000000000000000LL) == 0)
  {
    uint64_t v17 = 0LL;
    uint64_t v18 = (void *)v39[0];
    do
    {
      if ((v15 & 0xC000000000000001LL) != 0)
      {
        uint64_t v19 = specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v15);
      }

      else
      {
        uint64_t v19 = *(void *)(v15 + 8 * v17 + 32);
        ChannelPipeline.syncOperations.getter();
      }

      uint64_t v20 = *(void *)(v19 + 16);
      uint64_t v21 = *(void *)(v19 + 24);
      swift_bridgeObjectRetain();
      swift_release(v19);
      v39[0] = (uint64_t)v18;
      unint64_t v22 = v18[2];
      if (v22 >= v18[3] >> 1)
      {
        sub_100032050();
        uint64_t v18 = (void *)v39[0];
      }

      ++v17;
      void v18[2] = v22 + 1;
      uint64_t v23 = &v18[2 * v22];
      v23[4] = v20;
      v23[5] = v21;
    }

    while (v16 != v17);
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }

  __break(1u);
}

uint64_t sub_10001F9D0( uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, void))
{
  uint64_t v8 = *(void *)(a3 + 32);
  uint64_t v9 = *(void *)(a3 + 40);
  sub_100019F58(a2 + 6, a2[9]);
  sub_1000765E4(2uLL, v8, v9, v10, v11, v12, v13, v14);
  return a4(a1, v16, v15 & 1);
}

uint64_t type metadata accessor for AllStatusRoute()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService14AllStatusRoute);
}

uint64_t sub_10001FA84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v15))
  {
    uint64_t v7 = 4LL;
    while (1)
    {
      if ((a1 & 0xC000000000000001LL) != 0)
      {
        uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a1);
      }

      else
      {
        uint64_t v8 = *(void *)(a1 + 8 * v7);
        swift_retain(v8);
      }

      uint64_t v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1LL)) {
        break;
      }
      uint64_t v10 = *(void *)(v8 + 16);
      uint64_t v11 = *(void *)(v8 + 24);
      if (v10 == a2 && v11 == a3)
      {
        swift_bridgeObjectRelease(a3);
        swift_bridgeObjectRelease(a1);
        swift_release(v8);
        return 1LL;
      }

      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, a2, a3, 0LL);
      swift_release(v8);
      if ((v13 & 1) != 0)
      {
        swift_bridgeObjectRelease(a3);
        swift_bridgeObjectRelease(a1);
        return 1LL;
      }

      ++v7;
      if (v9 == v6) {
        goto LABEL_23;
      }
    }

    __break(1u);
LABEL_19:
    if (a1 < 0) {
      uint64_t v15 = a1;
    }
    else {
      uint64_t v15 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

uint64_t sub_10001FBF0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a6)
  {
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }

  return result;
}

void *sub_10001FC40(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[7];
  swift_bridgeObjectRetain(a1[3]);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v2);
  return a1;
}

void *sub_10001FC94(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t sub_10001FCEC(uint64_t a1)
{
  return sub_10001F9D0( a1,  *(void **)(v1 + 16),  v1 + 24,  (uint64_t (*)(uint64_t, uint64_t, void))sub_1001C21DC);
}

uint64_t sub_10001FD14(uint64_t a1)
{
  return sub_10001F9D0( a1,  *(void **)(v1 + 16),  v1 + 24,  (uint64_t (*)(uint64_t, uint64_t, void))sub_1001C21F0);
}

unint64_t sub_10001FD38()
{
  unint64_t result = qword_1002A9718;
  if (!qword_1002A9718)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for HTTPResponseStatus,  &type metadata for HTTPResponseStatus);
    atomic_store(result, (unint64_t *)&qword_1002A9718);
  }

  return result;
}

uint64_t sub_10001FD7C()
{
  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t sub_10001FDC4(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    a1 = a2;
  }
  return swift_bridgeObjectRetain(a1);
}

uint64_t destroy for StatusRouteType(uint64_t a1)
{
  return sub_10001FDE0(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_10001FDE0(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    a1 = a2;
  }
  return swift_bridgeObjectRelease(a1);
}

uint64_t _s25ASOctaneSupportXPCService15StatusRouteTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10001FDC4(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for StatusRouteType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10001FDC4(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(_BYTE *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_10001FDE0(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for StatusRouteType(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for StatusRouteType(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_10001FDE0(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for StatusRouteType(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StatusRouteType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10001FF64(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_10001FF6C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for StatusRouteType()
{
  return &type metadata for StatusRouteType;
}

uint64_t sub_10001FF90( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_10001FBF0(v12, v16, v15, v14, v13, v11, a10, a11);
}

__n128 sub_10001FFB0(uint64_t a1)
{
  *(void *)(a1 + 16) = v2;
  __int128 v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 40) = v3;
  __n128 result = *(__n128 *)(v1 + 32);
  __int128 v5 = *(_OWORD *)(v1 + 48);
  *(__n128 *)(a1 + 56) = result;
  *(_OWORD *)(a1 + 72) = v5;
  return result;
}

__n128 sub_10001FFD0(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  __int128 v3 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 40) = v3;
  __n128 result = *(__n128 *)(v2 + 32);
  __int128 v5 = *(_OWORD *)(v2 + 48);
  *(__n128 *)(a1 + 56) = result;
  *(_OWORD *)(a1 + 72) = v5;
  return result;
}

uint64_t sub_10001FFF0()
{
  return swift_bridgeObjectRetain(v0);
}

void *sub_10001FFF8()
{
  return sub_10001FC40(v0);
}

void *sub_100020000()
{
  return sub_10001FC94(v0);
}

uint64_t sub_100020008()
{
  return type metadata accessor for HTTPResponseHead._Storage();
}

void *sub_100020010()
{
  return sub_10001FC40(v0);
}

void *sub_100020018()
{
  return sub_100019F58(v0, *(void *)(v1 + 112));
}

void *sub_100020024()
{
  return sub_100019F58(v1, *(void *)(v0 + 72));
}

uint64_t sub_100020030(uint64_t a1)
{
  return swift_allocObject(a1, 88LL, 7LL);
}

void *sub_10002003C()
{
  return sub_100019F58(v0, *(void *)(v1 + 72));
}

uint64_t ChannelPipeline.syncOperations.getter()
{
  return swift_retain(v0);
}

double sub_100020050()
{
  return 0.0;
}

uint64_t sub_100020064@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v16 = sub_100022744();
  type metadata accessor for AppInformationResponse.PlatformAttributes(v16);
  sub_1000226C8();
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *a7 = a1;
  a7[1] = a2;
  if (a4) {
    uint64_t v20 = a3;
  }
  else {
    uint64_t v20 = 0LL;
  }
  URL.init(string:)(v20);
  swift_bridgeObjectRelease();
  sub_100020184(v7, (uint64_t)v19);
  uint64_t v21 = &v19[*(int *)(type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0LL) + 20)];
  *(void *)uint64_t v21 = a5;
  *((void *)v21 + 1) = a6;
  uint64_t v22 = type metadata accessor for AppInformationResponse(0LL);
  return sub_100022224( (uint64_t)v19,  (uint64_t)a7 + *(int *)(v22 + 20),  type metadata accessor for AppInformationResponse.PlatformAttributes);
}

uint64_t type metadata accessor for AppInformationResponse.PlatformAttributes(uint64_t a1)
{
  return sub_1000201F4( a1,  qword_1002A9818,  (uint64_t)&nominal type descriptor for AppInformationResponse.PlatformAttributes);
}

uint64_t sub_100020184(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002A9720);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(uint64_t a1)
{
  return sub_1000201F4( a1,  (uint64_t *)&unk_1002A9780,  (uint64_t)&nominal type descriptor for AppInformationResponse.PlatformAttributes.Platform);
}

uint64_t type metadata accessor for AppInformationResponse(uint64_t a1)
{
  return sub_1000201F4(a1, qword_1002A98A8, (uint64_t)&nominal type descriptor for AppInformationResponse);
}

uint64_t sub_1000201F4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t *sub_100020224(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for URL(0LL);
    if (sub_10001D158((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_1000175B0(&qword_1002A9720);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      sub_10001762C((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = *(int *)(a3 + 20);
    uint64_t v11 = (uint64_t *)((char *)a1 + v10);
    uint64_t v12 = (uint64_t *)((char *)a2 + v10);
    uint64_t v13 = v12[1];
    *uint64_t v11 = *v12;
    v11[1] = v13;
    swift_bridgeObjectRetain();
  }

  return a1;
}

uint64_t sub_100020308(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  return swift_bridgeObjectRelease();
}

char *sub_100020370(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  if (sub_10001D158((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_1000175B0(&qword_1002A9720);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    sub_10001762C((uint64_t)a1, 0LL, 1LL, v6);
  }

  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = *((void *)v10 + 1);
  *(void *)uint64_t v9 = *(void *)v10;
  *((void *)v9 + 1) = v11;
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_100020428(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  int v7 = sub_10001D158((uint64_t)a1, 1LL, v6);
  int v8 = sub_10001D158((uint64_t)a2, 1LL, v6);
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    uint64_t v10 = sub_1000175B0(&qword_1002A9720);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  sub_10001762C((uint64_t)a1, 0LL, 1LL, v6);
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  *(void *)uint64_t v12 = *(void *)v13;
  *((void *)v12 + 1) = *((void *)v13 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_100020544(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  if (sub_10001D158((uint64_t)a2, 1LL, v6))
  {
    uint64_t v7 = sub_1000175B0(&qword_1002A9720);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    sub_10001762C((uint64_t)a1, 0LL, 1LL, v6);
  }

  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_1000205F0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  int v7 = sub_10001D158((uint64_t)a1, 1LL, v6);
  int v8 = sub_10001D158((uint64_t)a2, 1LL, v6);
  if (!v7)
  {
    uint64_t v9 = *(void *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    uint64_t v10 = sub_1000175B0(&qword_1002A9720);
    memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  sub_10001762C((uint64_t)a1, 0LL, 1LL, v6);
LABEL_7:
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v15 = *(void *)v13;
  uint64_t v14 = *((void *)v13 + 1);
  *(void *)uint64_t v12 = v15;
  *((void *)v12 + 1) = v14;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000206FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100020708);
}

void sub_100020708(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002A9720);
  if (*(_DWORD *)(*(void *)(v4 - 8) + 84LL) == (_DWORD)a2) {
    sub_10002270C(a1, a2, v4);
  }
  else {
    sub_1000193B8();
  }
}

uint64_t sub_100020784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100020790);
}

void sub_100020790(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  if (*(_DWORD *)(*(void *)(sub_1000175B0(&qword_1002A9720) - 8) + 84LL) == a3)
  {
    uint64_t v7 = sub_1000227B0();
    sub_100022718(v7, v8, v9, v10);
  }

  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + _Block_object_dispose((const void *)(v1 - 136), 8) = a2;
    sub_1000193B8();
  }

void sub_1000207F0(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = &unk_1001F42C0;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
  }

void sub_100020860(uint64_t a1)
{
  if (!qword_1002A9790)
  {
    uint64_t v2 = type metadata accessor for URL(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1002A9790);
    }
  }

uint64_t *sub_1000208B4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0LL);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = type metadata accessor for URL(0LL);
    if (sub_10001D158((uint64_t)a2, 1LL, v7))
    {
      uint64_t v8 = sub_1000175B0(&qword_1002A9720);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      sub_10001762C((uint64_t)a1, 0LL, 1LL, v7);
    }

    uint64_t v10 = *(int *)(v6 + 20);
    uint64_t v11 = (uint64_t *)((char *)a1 + v10);
    uint64_t v12 = (uint64_t *)((char *)a2 + v10);
    uint64_t v13 = v12[1];
    *uint64_t v11 = *v12;
    v11[1] = v13;
    swift_bridgeObjectRetain();
  }

  return a1;
}

uint64_t sub_1000209A0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0LL);
  return swift_bridgeObjectRelease();
}

char *sub_100020A04(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  if (sub_10001D158((uint64_t)a2, 1LL, v4))
  {
    uint64_t v5 = sub_1000175B0(&qword_1002A9720);
    memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
    sub_10001762C((uint64_t)a1, 0LL, 1LL, v4);
  }

  uint64_t v6 = *(int *)(type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0LL) + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = *((void *)v8 + 1);
  *(void *)uint64_t v7 = *(void *)v8;
  *((void *)v7 + 1) = v9;
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_100020AC0(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  int v5 = sub_10001D158((uint64_t)a1, 1LL, v4);
  int v6 = sub_10001D158((uint64_t)a2, 1LL, v4);
  if (!v5)
  {
    uint64_t v7 = *(void *)(v4 - 8);
    if (!v6)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v4);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v4);
    goto LABEL_6;
  }

  if (v6)
  {
LABEL_6:
    uint64_t v8 = sub_1000175B0(&qword_1002A9720);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  sub_10001762C((uint64_t)a1, 0LL, 1LL, v4);
LABEL_7:
  uint64_t v9 = *(int *)(type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0LL) + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  *(void *)uint64_t v10 = *(void *)v11;
  *((void *)v10 + 1) = *((void *)v11 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_100020BD8(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  if (sub_10001D158((uint64_t)a2, 1LL, v4))
  {
    uint64_t v5 = sub_1000175B0(&qword_1002A9720);
    memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
    sub_10001762C((uint64_t)a1, 0LL, 1LL, v4);
  }

  uint64_t v6 = type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0LL);
  *(_OWORD *)&a1[*(int *)(v6 + 20)] = *(_OWORD *)&a2[*(int *)(v6 + 20)];
  return a1;
}

char *sub_100020C88(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  int v5 = sub_10001D158((uint64_t)a1, 1LL, v4);
  int v6 = sub_10001D158((uint64_t)a2, 1LL, v4);
  if (!v5)
  {
    uint64_t v7 = *(void *)(v4 - 8);
    if (!v6)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v4);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v4);
    goto LABEL_6;
  }

  if (v6)
  {
LABEL_6:
    uint64_t v8 = sub_1000175B0(&qword_1002A9720);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  sub_10001762C((uint64_t)a1, 0LL, 1LL, v4);
LABEL_7:
  uint64_t v9 = *(int *)(type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0LL) + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v13 = *(void *)v11;
  uint64_t v12 = *((void *)v11 + 1);
  *(void *)uint64_t v10 = v13;
  *((void *)v10 + 1) = v12;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100020D90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100020D9C);
}

uint64_t sub_100020D9C()
{
  uint64_t v2 = sub_100022770();
  return sub_10001D158(v1, v0, v2);
}

uint64_t sub_100020DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100020DD0);
}

uint64_t sub_100020DD0()
{
  uint64_t v0 = sub_1000227B0();
  return sub_10001762C(v0, v1, v2, v3);
}

uint64_t sub_100020DF0(uint64_t a1)
{
  uint64_t result = type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *sub_100020E58(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v11 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain();
  }

  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for URL(0LL);
    swift_bridgeObjectRetain();
    if (sub_10001D158((uint64_t)v8, 1LL, v9))
    {
      uint64_t v10 = sub_1000175B0(&qword_1002A9720);
      memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
      sub_10001762C((uint64_t)v7, 0LL, 1LL, v9);
    }

    uint64_t v12 = *(int *)(type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0LL) + 20);
    uint64_t v13 = &v7[v12];
    uint64_t v14 = &v8[v12];
    uint64_t v15 = *((void *)v14 + 1);
    *(void *)uint64_t v13 = *(void *)v14;
    *((void *)v13 + 1) = v15;
    swift_bridgeObjectRetain();
  }

  return v3;
}

uint64_t sub_100020F60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for URL(0LL);
  type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0LL);
  return swift_bridgeObjectRelease();
}

void *sub_100020FD8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for URL(0LL);
  swift_bridgeObjectRetain();
  if (sub_10001D158((uint64_t)v7, 1LL, v8))
  {
    uint64_t v9 = sub_1000175B0(&qword_1002A9720);
    memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
    sub_10001762C((uint64_t)v6, 0LL, 1LL, v8);
  }

  uint64_t v10 = *(int *)(type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0LL) + 20);
  uint64_t v11 = &v6[v10];
  uint64_t v12 = &v7[v10];
  uint64_t v13 = *((void *)v12 + 1);
  *(void *)uint64_t v11 = *(void *)v12;
  *((void *)v11 + 1) = v13;
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1000210B4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL(0LL);
  int v10 = sub_10001D158((uint64_t)v7, 1LL, v9);
  int v11 = sub_10001D158((uint64_t)v8, 1LL, v9);
  if (!v10)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }

  if (v11)
  {
LABEL_6:
    uint64_t v13 = sub_1000175B0(&qword_1002A9720);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
  sub_10001762C((uint64_t)v7, 0LL, 1LL, v9);
LABEL_7:
  uint64_t v14 = *(int *)(type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0LL) + 20);
  uint64_t v15 = &v7[v14];
  uint64_t v16 = &v8[v14];
  *(void *)uint64_t v15 = *(void *)v16;
  *((void *)v15 + 1) = *((void *)v16 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_100021204(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for URL(0LL);
  if (sub_10001D158((uint64_t)v6, 1LL, v7))
  {
    uint64_t v8 = sub_1000175B0(&qword_1002A9720);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
    sub_10001762C((uint64_t)v5, 0LL, 1LL, v7);
  }

  uint64_t v9 = type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0LL);
  *(_OWORD *)&v5[*(int *)(v9 + 20)] = *(_OWORD *)&v6[*(int *)(v9 + 20)];
  return a1;
}

void *sub_1000212C4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL(0LL);
  int v11 = sub_10001D158((uint64_t)v8, 1LL, v10);
  int v12 = sub_10001D158((uint64_t)v9, 1LL, v10);
  if (!v11)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }

  if (v12)
  {
LABEL_6:
    uint64_t v14 = sub_1000175B0(&qword_1002A9720);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  sub_10001762C((uint64_t)v8, 0LL, 1LL, v10);
LABEL_7:
  uint64_t v15 = *(int *)(type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0LL) + 20);
  uint64_t v16 = &v8[v15];
  uint64_t v17 = &v9[v15];
  uint64_t v19 = *(void *)v17;
  uint64_t v18 = *((void *)v17 + 1);
  *(void *)uint64_t v16 = v19;
  *((void *)v16 + 1) = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000213F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100021400);
}

void sub_100021400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_1000193B8();
  }

  else
  {
    uint64_t v6 = type metadata accessor for AppInformationResponse.PlatformAttributes(0LL);
    sub_10002270C(a1 + *(int *)(a3 + 20), a2, v6);
  }

uint64_t sub_100021464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100021470);
}

void sub_100021470(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = (a2 - 1);
    sub_1000193B8();
  }

  else
  {
    uint64_t v7 = type metadata accessor for AppInformationResponse.PlatformAttributes(0LL);
    sub_100022718(a1 + *(int *)(a4 + 20), a2, a2, v7);
  }

uint64_t sub_1000214CC(uint64_t a1)
{
  v4[0] = &unk_1001F4338;
  uint64_t result = type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_100021540(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100271040, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100021594(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD000000000000012LL;
  }
  else {
    return 1634497893LL;
  }
}

void sub_1000215C8()
{
  unint64_t v2 = sub_100022268();
  sub_1000226FC((uint64_t)&type metadata for AppInformationResponse.CodingKeys, v3, v2);
  sub_1000227C4();
  KeyedEncodingContainer.encode(_:forKey:)(v4, v5, v6, v7);
  if (!v0)
  {
    type metadata accessor for AppInformationResponse(0LL);
    type metadata accessor for AppInformationResponse.PlatformAttributes(0LL);
    sub_1000221A8( &qword_1002A9940,  type metadata accessor for AppInformationResponse.PlatformAttributes,  (uint64_t)&unk_1001F4378);
    sub_1000227C4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v8, v9, v10, v11, v12);
  }

  sub_1000227A0();
  sub_1000226D8();
}

void sub_1000216D4(char *a1, unsigned __int8 *a2)
{
}

void sub_1000216E0()
{
}

uint64_t sub_1000216E8(uint64_t a1)
{
  return sub_1000B17CC(a1, *v1);
}

void sub_1000216F0(uint64_t a1)
{
}

uint64_t sub_1000216F8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100021540(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100021724@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100021594(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10002174C()
{
  return sub_100021594(*v0);
}

uint64_t sub_100021754@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100021590(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100021778(uint64_t a1)
{
  unint64_t v2 = sub_100022268();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000217A0(uint64_t a1)
{
  unint64_t v2 = sub_100022268();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000217C8()
{
}

BOOL sub_1000217DC(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100271090, v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

BOOL sub_100021820(Swift::String a1)
{
  return sub_1000217DC(a1);
}

uint64_t sub_100021838()
{
  return 1936684660LL;
}

void sub_100021848()
{
  uint64_t v3 = v0;
  uint64_t v4 = sub_1000175B0(&qword_1002A9920);
  sub_100022760();
  __chkstk_darwin(v5);
  sub_100022788();
  sub_100022724();
  unint64_t v6 = sub_1000221E8();
  sub_1000226FC((uint64_t)&type metadata for AppInformationResponse.PlatformAttributes.CodingKeys, v7, v6);
  uint64_t v8 = sub_100022780();
  uint64_t v9 = sub_1000221A8( &qword_1002A9928,  type metadata accessor for AppInformationResponse.PlatformAttributes.Platform,  (uint64_t)&unk_1001F43C8);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, v10, v4, v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  sub_1000226D8();
}

void sub_100021910(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v17 = a2;
  uint64_t v4 = sub_100022780();
  sub_1000226C8();
  __chkstk_darwin(v5);
  sub_1000227D0();
  uint64_t v19 = v6;
  uint64_t v7 = sub_1000175B0(&qword_1002A9908);
  uint64_t v18 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for AppInformationResponse.PlatformAttributes(0LL);
  sub_1000226C8();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  sub_100019F58(a1, v13);
  unint64_t v15 = sub_1000221E8();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AppInformationResponse.PlatformAttributes.CodingKeys,  &type metadata for AppInformationResponse.PlatformAttributes.CodingKeys,  v15,  v13,  v14);
  if (!v2)
  {
    sub_1000221A8( &qword_1002A9918,  type metadata accessor for AppInformationResponse.PlatformAttributes.Platform,  (uint64_t)&unk_1001F43F0);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v4, v16, v7, v4);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v7);
    sub_100022224(v19, (uint64_t)v12, type metadata accessor for AppInformationResponse.PlatformAttributes.Platform);
    sub_100022224((uint64_t)v12, v17, type metadata accessor for AppInformationResponse.PlatformAttributes);
  }

  sub_100019F7C(a1);
  sub_10001DAB8();
}

uint64_t sub_100021AA8(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x8000000100217090LL;
    if (a2 == 0x8000000100217090LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000100217090LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0xD000000000000011LL && a2 == 0x8000000100218770LL)
  {
    swift_bridgeObjectRelease(0x8000000100218770LL);
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x8000000100218770LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

unint64_t sub_100021B90(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD000000000000011LL;
  }
  else {
    return 0xD000000000000010LL;
  }
}

void sub_100021BCC()
{
  unint64_t v2 = sub_1000220AC();
  sub_1000226FC((uint64_t)&type metadata for AppInformationResponse.PlatformAttributes.Platform.CodingKeys, v3, v2);
  type metadata accessor for URL(0LL);
  sub_1000221A8( &qword_1002A9900,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  sub_1000227C4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v4, v5, v6, v7, v8);
  if (!v0)
  {
    sub_100022780();
    sub_1000227C4();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v9, v10, v11, v12);
  }

  sub_1000227A0();
  sub_1000226D8();
}

void sub_100021CD4(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = v6;
  uint64_t v22 = sub_1000175B0(&qword_1002A98E0);
  __chkstk_darwin(v22);
  uint64_t v7 = sub_100022744();
  uint64_t v8 = type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(v7);
  sub_1000226C8();
  __chkstk_darwin(v9);
  sub_100022788();
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100019F58(a1, v10);
  unint64_t v12 = sub_1000220AC();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AppInformationResponse.PlatformAttributes.Platform.CodingKeys,  &type metadata for AppInformationResponse.PlatformAttributes.Platform.CodingKeys,  v12,  v10,  v11);
  if (v2)
  {
    sub_100019F7C(a1);
  }

  else
  {
    uint64_t v19 = v8;
    uint64_t v13 = type metadata accessor for URL(0LL);
    char v24 = 0;
    uint64_t v14 = sub_1000221A8( &qword_1002A98F0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v13, &v24, v22, v13, v14);
    sub_100020184(v21, v3);
    char v23 = 1;
    uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v23, v22);
    uint64_t v17 = v16;
    sub_1000226EC();
    uint64_t v18 = (uint64_t *)(v3 + *(int *)(v19 + 20));
    uint64_t *v18 = v15;
    v18[1] = v17;
    sub_100022128(v3, a2);
    sub_100019F7C(a1);
    sub_10002216C(v3);
  }

  sub_10001DAB8();
}

BOOL sub_100021ED0@<W0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = sub_1000217DC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100021F00@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100021838();
  *a1 = result;
  a1[1] = v3;
  return result;
}

BOOL sub_100021F28@<W0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  BOOL result = sub_100021820(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100021F50()
{
  return variable initialization expression of MarkedCircularBuffer._markedIndexOffset();
}

uint64_t sub_100021F68@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = static System.hasAsyncAwaitSupport.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100021F90(uint64_t a1)
{
  unint64_t v2 = sub_1000221E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100021FB8(uint64_t a1)
{
  unint64_t v2 = sub_1000221E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100021FE0(void *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_100021FF4()
{
}

unint64_t sub_100022008()
{
  return sub_100021B90(*v0);
}

uint64_t sub_100022010@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100021AA8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100022034(uint64_t a1)
{
  unint64_t v2 = sub_1000220AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002205C(uint64_t a1)
{
  unint64_t v2 = sub_1000220AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100022084(void *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_100022098()
{
}

unint64_t sub_1000220AC()
{
  unint64_t result = qword_1002A98E8;
  if (!qword_1002A98E8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F475C,  &type metadata for AppInformationResponse.PlatformAttributes.Platform.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A98E8);
  }

  return result;
}

uint64_t sub_1000220E8(uint64_t a1)
{
  uint64_t v2 = sub_1000175B0(&qword_1002A9720);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100022128(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002216C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000221A8(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1000221E8()
{
  unint64_t result = qword_1002A9910;
  if (!qword_1002A9910)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F470C,  &type metadata for AppInformationResponse.PlatformAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A9910);
  }

  return result;
}

uint64_t sub_100022224(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

unint64_t sub_100022268()
{
  unint64_t result = qword_1002A9938;
  if (!qword_1002A9938)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F46BC, &type metadata for AppInformationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A9938);
  }

  return result;
}

ValueMetadata *type metadata accessor for AppInformationResponse.CodingKeys()
{
  return &type metadata for AppInformationResponse.CodingKeys;
}

uint64_t getEnumTagSinglePayload for AppInformationResponse.PlatformAttributes.CodingKeys( unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for AppInformationResponse.PlatformAttributes.CodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100022350 + 4 * asc_1001F42A0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100022370 + 4 * byte_1001F42A5[v4]))();
  }
}

_BYTE *sub_100022350(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100022370(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100022378(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100022380(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100022388(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100022390(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AppInformationResponse.PlatformAttributes.CodingKeys()
{
  return &type metadata for AppInformationResponse.PlatformAttributes.CodingKeys;
}

uint64_t _s25ASOctaneSupportXPCService22AppInformationResponseV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000223F8 + 4 * byte_1001F42AF[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10002242C + 4 * byte_1001F42AA[v4]))();
}

uint64_t sub_10002242C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100022434(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10002243CLL);
  }
  return result;
}

uint64_t sub_100022448(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100022450LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100022454(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002245C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppInformationResponse.PlatformAttributes.Platform.CodingKeys()
{
  return &type metadata for AppInformationResponse.PlatformAttributes.Platform.CodingKeys;
}

unint64_t sub_10002247C()
{
  unint64_t result = qword_1002A9948;
  if (!qword_1002A9948)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F44B4,  &type metadata for AppInformationResponse.PlatformAttributes.Platform.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A9948);
  }

  return result;
}

unint64_t sub_1000224BC()
{
  unint64_t result = qword_1002A9950;
  if (!qword_1002A9950)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F45A4,  &type metadata for AppInformationResponse.PlatformAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A9950);
  }

  return result;
}

unint64_t sub_1000224FC()
{
  unint64_t result = qword_1002A9958;
  if (!qword_1002A9958)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F4694, &type metadata for AppInformationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A9958);
  }

  return result;
}

unint64_t sub_10002253C()
{
  unint64_t result = qword_1002A9960;
  if (!qword_1002A9960)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F45CC, &type metadata for AppInformationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A9960);
  }

  return result;
}

unint64_t sub_10002257C()
{
  unint64_t result = qword_1002A9968;
  if (!qword_1002A9968)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F45F4, &type metadata for AppInformationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A9968);
  }

  return result;
}

unint64_t sub_1000225BC()
{
  unint64_t result = qword_1002A9970;
  if (!qword_1002A9970)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F44DC,  &type metadata for AppInformationResponse.PlatformAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A9970);
  }

  return result;
}

unint64_t sub_1000225FC()
{
  unint64_t result = qword_1002A9978;
  if (!qword_1002A9978)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F4504,  &type metadata for AppInformationResponse.PlatformAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A9978);
  }

  return result;
}

unint64_t sub_10002263C()
{
  unint64_t result = qword_1002A9980;
  if (!qword_1002A9980)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F4424,  &type metadata for AppInformationResponse.PlatformAttributes.Platform.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A9980);
  }

  return result;
}

unint64_t sub_10002267C()
{
  unint64_t result = qword_1002A9988;
  if (!qword_1002A9988)
  {
    unint64_t result = swift_getWitnessTable( &unk_1001F444C,  &type metadata for AppInformationResponse.PlatformAttributes.Platform.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A9988);
  }

  return result;
}

  ;
}

  ;
}

uint64_t sub_1000226EC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1000226FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

uint64_t sub_10002270C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001D158(a1, a2, a3);
}

uint64_t sub_100022718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10001762C(a1, a2, a3, a4);
}

void *sub_100022724()
{
  return sub_100019F58(v0, v0[3]);
}

uint64_t sub_100022744()
{
  return 0LL;
}

  ;
}

uint64_t sub_100022770()
{
  return type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0LL);
}

uint64_t sub_100022780()
{
  return type metadata accessor for AppInformationResponse.PlatformAttributes.Platform(0LL);
}

  ;
}

uint64_t sub_1000227A0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000227B0()
{
  return v0;
}

  ;
}

  ;
}

uint64_t sub_1000227E4()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[18];
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0) {
      uint64_t v14 = v0[18];
    }
    else {
      uint64_t v14 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v15 = sub_100023E6C();
    swift_bridgeObjectRetain();
    uint64_t v4 = _bridgeCocoaArray<A>(_:)(v14, v15);
  }

  else
  {
    uint64_t v3 = sub_100023E64(v2);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v3);
    sub_100023E6C();
    uint64_t v4 = v2;
  }

  sub_100023EEC();
  uint64_t v5 = v1[19];
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0) {
      uint64_t v16 = v1[19];
    }
    else {
      uint64_t v16 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v17 = sub_100023E6C();
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)(v16, v17);
  }

  else
  {
    uint64_t v6 = sub_100023E64(v1[19]);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v6);
    sub_100023E6C();
  }

  sub_100023EEC();
  sub_100188A08();
  uint64_t v7 = v4;
  uint64_t v8 = v1[20];
  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0) {
      uint64_t v18 = v1[20];
    }
    else {
      uint64_t v18 = v8 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v19 = sub_100023E6C();
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)(v18, v19);
  }

  else
  {
    uint64_t v9 = sub_100023E64(v1[20]);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v9);
    sub_100023E6C();
  }

  swift_bridgeObjectRelease();
  sub_100188A08();
  uint64_t v10 = v1[17];
  if (v10)
  {
    uint64_t v11 = sub_1000175B0((uint64_t *)&unk_1002AFCE0);
    uint64_t v12 = swift_allocObject(v11, 40LL, 7LL);
    *(_OWORD *)(v12 + 16) = xmmword_1001F47B0;
    *(void *)(v12 + 32) = v10;
    specialized Array._endMutation()(v12);
  }

  swift_retain();
  sub_100188A08();
  return v7;
}

BOOL static CloseMode.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

unint64_t sub_1000229C4(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002710C8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7) {
    return 7LL;
  }
  else {
    return v3;
  }
}

uint64_t static NIOHTTPClientUpgradeError.receivedResponseAfterUpgradeCompleted.getter()
{
  return 7LL;
}

uint64_t sub_100022A18(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100022A54 + 4 * byte_1001F47C0[a1]))( 0x66664F636F486461LL,  0xEB00000000737265LL);
}

uint64_t sub_100022A54()
{
  return 0x6566664F65646F63LL;
}

uint64_t sub_100022A70()
{
  return 0x4F6B6361626E6977LL;
}

uint64_t sub_100022A94()
{
  return 0x6D754E70756F7267LL;
}

unint64_t sub_100022AB4()
{
  return 0xD000000000000011LL;
}

unint64_t sub_100022AD0()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_100022B0C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100022B48 + 4 * byte_1001F47C7[a1]))( 0x66664F636F486461LL,  0xEB00000000737265LL);
}

uint64_t sub_100022B48()
{
  return 0x6566664F65646F63LL;
}

uint64_t sub_100022B64()
{
  return 0x4F6B6361626E6977LL;
}

uint64_t sub_100022B88()
{
  return 0x6D754E70756F7267LL;
}

unint64_t sub_100022BA8()
{
  return 0xD000000000000011LL;
}

unint64_t sub_100022BC4()
{
  return 0xD00000000000001BLL;
}

void sub_100022C00()
{
}

void sub_100022C0C()
{
}

void sub_100022C14()
{
}

void sub_100022C1C(uint64_t a1)
{
}

unint64_t sub_100022C24@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000229C4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100022C50@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100022A18(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100022C78()
{
  return sub_100022B0C(*v0);
}

uint64_t sub_100022C80@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100022A0C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100022CA4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = static NIOHTTPClientUpgradeError.receivedResponseAfterUpgradeCompleted.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100022CC8(uint64_t a1)
{
  unint64_t v2 = sub_10002380C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100022CF0(uint64_t a1)
{
  unint64_t v2 = sub_10002380C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100022D18(void *a1)
{
  return sub_100022D60(a1);
}

uint64_t sub_100022D60(void *a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = sub_1000175B0(&qword_1002A9CF8);
  __chkstk_darwin(v6);
  *(void *)(v1 + 136) = 0LL;
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100019F58(a1, v7);
  unint64_t v9 = sub_10002380C();
  swift_retain();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for OctaneSubscription.CodingKeys,  &type metadata for OctaneSubscription.CodingKeys,  v9,  v7,  v8);
  if (v3)
  {
    sub_10001EDD8();
    uint64_t v11 = 0LL;
    sub_100019F7C(a1);
    swift_release(*(void *)(v4 + 136));
    uint64_t v12 = type metadata accessor for OctaneSubscription();
    swift_deallocPartialClassInstance(v4, v12, 208LL, 7LL);
  }

  else
  {
    sub_1000175B0(&qword_1002A9C98);
    char v29 = 0;
    unint64_t v10 = sub_100023A38();
    sub_100023E04(v10);
    uint64_t v14 = (void *)v28[0];
    if (!v28[0]) {
      uint64_t v14 = _swiftEmptyArrayStorage;
    }
    *(void *)(v1 + 144) = v14;
    sub_1000175B0(&qword_1002A9CB0);
    char v29 = 1;
    unint64_t v15 = sub_100023AB4();
    sub_100023E04(v15);
    uint64_t v16 = (void *)v28[0];
    if (!v28[0]) {
      uint64_t v16 = _swiftEmptyArrayStorage;
    }
    *(void *)(v1 + 152) = v16;
    sub_1000175B0(&qword_1002A9CC8);
    char v29 = 2;
    unint64_t v17 = sub_100023B30();
    sub_100023E04(v17);
    uint64_t v18 = (void *)v28[0];
    if (!v28[0]) {
      uint64_t v18 = _swiftEmptyArrayStorage;
    }
    *(void *)(v1 + 160) = v18;
    LOBYTE(v28[0]) = 3;
    *(void *)(v1 + 16_Block_object_dispose((const void *)(v1 - 136), 8) = KeyedDecodingContainer.decode(_:forKey:)(v28);
    _s17IntroductoryOfferCMa();
    char v29 = 4;
    uint64_t v19 = sub_1000221A8( &qword_1002A9D30,  (uint64_t (*)(uint64_t))_s17IntroductoryOfferCMa,  (uint64_t)&unk_1002034F0);
    sub_100023E04(v19);
    uint64_t v20 = *(void *)(v1 + 136);
    *(void *)(v1 + 136) = v28[0];
    swift_release(v20);
    LOBYTE(v28[0]) = 5;
    uint64_t v21 = sub_100023E88();
    uint64_t v23 = sub_1001BD94C(v21, v22);
    if (v24 == 7) {
      uint64_t v25 = 1LL;
    }
    else {
      uint64_t v25 = v23;
    }
    if (v24 == 7) {
      char v26 = 5;
    }
    else {
      char v26 = v24;
    }
    *(void *)(v1 + 176) = v25;
    *(_BYTE *)(v1 + 184) = v26;
    LOBYTE(v28[0]) = 6;
    *(void *)(v1 + 192) = sub_100023E88();
    *(void *)(v1 + 200) = v27;
    sub_10001EDD8();
    sub_100023BAC((uint64_t)a1, (uint64_t)v28);
    uint64_t v11 = sub_1001BA2CC(v28);
    sub_100023E48();
    sub_100019F7C(a1);
  }

  return v11;
}

uint64_t sub_1000230D0(void *a1)
{
  uint64_t v4 = sub_1000175B0(&qword_1002A9C88);
  __chkstk_darwin(v4);
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100019F58(a1, v5);
  unint64_t v7 = sub_10002380C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for OctaneSubscription.CodingKeys,  &type metadata for OctaneSubscription.CodingKeys,  v7,  v5,  v6);
  uint64_t v18 = *(void *)(v1 + 144);
  sub_1000175B0(&qword_1002A9C98);
  unint64_t v8 = sub_100023848();
  sub_100023E28(v8);
  if (v2) {
    return sub_100023EA4();
  }
  uint64_t v18 = *(void *)(v1 + 152);
  sub_1000175B0(&qword_1002A9CB0);
  unint64_t v9 = sub_1000238C4();
  sub_100023E28(v9);
  uint64_t v18 = *(void *)(v1 + 160);
  sub_1000175B0(&qword_1002A9CC8);
  unint64_t v10 = sub_100023940();
  sub_100023E28(v10);
  uint64_t v11 = *(void *)(v1 + 168);
  LOBYTE(v1_Block_object_dispose((const void *)(v1 - 136), 8) = 3;
  KeyedEncodingContainer.encode(_:forKey:)(v11, &v18, v4);
  uint64_t v18 = *(void *)(v1 + 136);
  sub_1000175B0(&qword_1002A9CE0);
  unint64_t v12 = sub_1000239BC();
  sub_100023E28(v12);
  uint64_t v14 = sub_1001BDFBC(*(void *)(v1 + 176), *(unsigned __int8 *)(v1 + 184));
  LOBYTE(v1_Block_object_dispose((const void *)(v1 - 136), 8) = 5;
  sub_100023EB4(v14, v15, (uint64_t)&v18);
  sub_100023EF4();
  uint64_t v16 = *(void *)(v1 + 192);
  uint64_t v17 = *(void *)(v1 + 200);
  LOBYTE(v1_Block_object_dispose((const void *)(v1 - 136), 8) = 6;
  swift_bridgeObjectRetain();
  sub_100023EB4(v16, v17, (uint64_t)&v18);
  if (!v16)
  {
    sub_100023EF4();
    sub_1001BA5DC(a1);
    return sub_100023EA4();
  }

  sub_100023EA4();
  return sub_100023EF4();
}

void sub_1000232FC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 144);
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  sub_100023E58();
  sub_100023E9C();
  for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v13))
  {
    uint64_t v8 = 4LL;
    while (1)
    {
      if ((v6 & 0xC000000000000001LL) != 0) {
        uint64_t v3 = sub_100023EE0();
      }
      else {
        sub_100023ED4();
      }
      uint64_t v9 = v8 - 3;
      if (__OFADD__(v8 - 4, 1LL)) {
        break;
      }
      uint64_t v10 = *(void *)(v3 + 96);
      uint64_t v11 = *(void *)(v3 + 104);
      if ((v10 != a1 || v11 != a2) && (sub_100023EC4(v10, v11) & 1) == 0)
      {
        swift_release(v3);
        ++v8;
        if (v9 != v7) {
          continue;
        }
      }

      goto LABEL_14;
    }

    __break(1u);
LABEL_16:
    if (v6 < 0) {
      uint64_t v13 = v6;
    }
    else {
      uint64_t v13 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_100023E58();
    sub_100023E9C();
  }

LABEL_14:
  sub_10001DC10();
  sub_100019390();
  sub_100019390();
  sub_100023E74();
}

  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a1);
  return 0LL;
}

  sub_10001DC10();
  sub_100019390();
  sub_100019390();
  sub_100023E74();
}

    void v18[2] = v17;
    v18[v16 + 4] = v13;
    a1 = *(void *)(a1 + 40);
    if (!a1)
    {
      char v29 = *(void *)(v37 + 24);
      uint64_t v30 = swift_bridgeObjectRetain();
      sub_100098F58(v30, 0LL, v29);
      swift_bridgeObjectRelease();
      unsigned __int16 v31 = *(void *)(v37 + 16);
      uint64_t v32 = swift_bridgeObjectRetain();
      sub_100098F58(v32, 0LL, v31);
      swift_bridgeObjectRelease();
LABEL_19:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
  }

  __break(1u);
LABEL_21:
  __break(1u);
}

      __break(1u);
      goto LABEL_15;
    }

  __break(1u);
  return result;
}

          __break(1u);
LABEL_15:
          __break(1u);
          goto LABEL_16;
        }

  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

  sub_10001A3F8();
  sub_1000A4D88();
  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v19 = sub_100077D08();
  sub_100092ADC(v19, (uint64_t)qword_1002EB9D0);
  uint64_t v20 = sub_100092F58();
  if (sub_100024E9C(v20))
  {
    uint64_t v21 = (_WORD *)sub_10001A414();
    sub_1000A48D4(v21);
    sub_1000A46DC((void *)&_mh_execute_header, v22, v23, "Invalid offer ID");
    sub_10001A408(a1);
  }

  return 15LL;
}

  sub_100019390();
  sub_100023E74();
}

  sub_100019390();
  sub_100023E74();
}

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n(v12, 2LL);
  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v20 = type metadata accessor for Logger(0LL);
  uint64_t v21 = sub_100018F68(v20, (uint64_t)qword_1002EB9D0);
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  char v24 = static os_log_type_t.error.getter(v22, v23);
  if (os_log_type_enabled(v22, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v24, "Invalid offer ID", v25, 2u);
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  return 15LL;
}

    sub_100077C64();
    return 0LL;
  }

  uint64_t v15 = v12;
  uint64_t v11 = v13;
  uint64_t v16 = v14;
  uint64_t v17 = *(os_unfair_lock_s **)(*(void *)(v3 + 48) + 16LL);
  swift_retain();
  os_unfair_lock_lock(v17);
  uint64_t v18 = *(void *)(v3 + 40);
  os_unfair_lock_unlock(v17);
  swift_release();
  uint64_t v3 = sub_1000AA2F0(v18, v2, v0, v15, v11, v16 & 0xFFFFFF01);
  sub_10001EDA0();
  if (!v3)
  {
    sub_100023E58();
    sub_1000E577C();
    uint64_t v34 = sub_100092CFC();
    if (sub_100077C98(v34))
    {
      uint64_t v22 = (uint8_t *)sub_100019464(12LL);
      uint64_t v23 = sub_100019464(32LL);
      *(_DWORD *)uint64_t v22 = 136315138;
      uint64_t v35 = sub_100019320();
      uint64_t v36 = sub_1000E54C4(v35);
      sub_1000E558C(v36, v37, v38, v39, v40, v41, v42, v43, v45, v23);
      sub_100077C58();
      uint64_t v33 = "Unable to make dictionary representation for message for %s";
      goto LABEL_13;
    }

    goto LABEL_14;
  }

  sub_1001B1DE0(v3);
  uint64_t v20 = v19;
  sub_10003561C();
  return v20;
}

    uint64_t v28 = v59;
    char v29 = v60;
    uint64_t v30 = v61;
    unsigned __int16 v31 = v62;
    uint64_t v32 = v63;
    uint64_t v33 = v64;
    uint64_t v34 = v65;
LABEL_32:
    sub_1000348B4(v28, v29, v30, v31, v32, v33, v34);
    uint64_t v2 = v51;
    goto LABEL_33;
  }

    uint64_t v22 = v41;
    uint64_t v23 = v42;
    char v24 = v43;
    uint64_t v25 = v44;
LABEL_15:
    char v26 = v23;
LABEL_17:
    sub_1000349CC(v22, v26, v24, v25);
    void *v2 = v4;
    return;
  }

    swift_retain(a5);
    uint64_t v15 = v14;
    goto LABEL_15;
  }

    sub_100034D48(a5, a6);
    uint64_t v13 = v12;
    goto LABEL_15;
  }

        sub_10010DF88();
      }

      while (1)
      {
        uint64_t v16 = v15 + 1;
        if (__OFADD__(v15, 1LL)) {
          break;
        }
        if (v16 >= v3) {
          goto LABEL_28;
        }
        ++v15;
        if (*(void *)(v7 + 8 * v16)) {
          goto LABEL_14;
        }
      }
    }

    __break(1u);
  }

  else
  {
LABEL_28:
    sub_10010E1E4();
    sub_100092B84();
  }

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

        sub_10010DF88();
      }

      while (1)
      {
        uint64_t v16 = v15 + 1;
        if (__OFADD__(v15, 1LL)) {
          break;
        }
        if (v16 >= v3) {
          goto LABEL_28;
        }
        ++v15;
        if (*(void *)(v7 + 8 * v16)) {
          goto LABEL_14;
        }
      }
    }

    __break(1u);
  }

  else
  {
LABEL_28:
    sub_10010E1E4();
    sub_100092B84();
  }

    sub_10010E4FC();
    uint64_t v11 = v10;
    goto LABEL_15;
  }

        uint64_t v11 = (v17 - 1) & v17;
        unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
        uint64_t v9 = v13;
LABEL_15:
        uint64_t v19 = (uint64_t *)(*(void *)(*a5 + 48LL) + 16 * v12);
        uint64_t v21 = *v19;
        uint64_t v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)(v42);
        swift_bridgeObjectRetain();
        String.hash(into:)(v42, v21, v20);
        uint64_t v22 = Hasher._finalize()();
        uint64_t v23 = -1LL << *(_BYTE *)(a3 + 32);
        char v24 = v22 & ~v23;
        uint64_t v25 = v24 >> 6;
        char v26 = 1LL << v24;
        if (((1LL << v24) & *(void *)(v43 + 8 * (v24 >> 6))) == 0) {
          goto LABEL_32;
        }
        uint64_t v27 = *(void *)(a3 + 48);
        uint64_t v28 = (void *)(v27 + 16 * v24);
        char v29 = v28[1];
        uint64_t v30 = *v28 == v21 && v29 == v20;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v21, v20, 0LL) & 1) != 0) {
          break;
        }
        uint64_t v32 = ~v23;
        for (i = v24 + 1; ; i = v34 + 1)
        {
          uint64_t v34 = i & v32;
          uint64_t v35 = (void *)(v27 + 16 * v34);
          uint64_t v36 = v35[1];
          uint64_t v37 = *v35 == v21 && v36 == v20;
          if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v35, v36, v21, v20, 0LL) & 1) != 0)
          {
            uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
            uint64_t v25 = v34 >> 6;
            char v26 = 1LL << v34;
            goto LABEL_22;
          }
        }

  if (*(void *)(v7 + 16) > v8)
  {
    *(_BYTE *)(v7 + v8 + 32) = 0;
    uint64_t v22 = *(void *)(a1 + 40);
    uint64_t v23 = *(void *)(a1 + 48);
    char v24 = *(void *)(a1 + 56);
    *(void *)(a1 + 40) = v7;
    *(void *)uint64_t v6 = 0LL;
    *(void *)(v6 + _Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
    uint64_t v25 = *(_BYTE *)(a1 + 64);
    *(_BYTE *)(v6 + 16) = 0;
    sub_10019DD6C(v22, v23, v24, v25);
    goto LABEL_16;
  }

  uint64_t v13 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v13 + 48) + 8 * a2) = v5;
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = __OFADD__(v14, 1LL);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v13 + 16) = v16;
  }
  return result;
}

  uint64_t v13 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(_BYTE *)(*(void *)(v13 + 48) + a2) = v5;
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = __OFADD__(v14, 1LL);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v13 + 16) = v16;
  }
  return result;
}

uint64_t sub_1000233E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    uint64_t v7 = 4LL;
    while (1)
    {
      if ((a1 & 0xC000000000000001LL) != 0)
      {
        uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a1);
      }

      else
      {
        uint64_t v8 = *(void *)(a1 + 8 * v7);
        swift_retain(v8);
      }

      uint64_t v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1LL)) {
        break;
      }
      uint64_t v10 = *(void *)(v8 + 16);
      uint64_t v11 = *(void *)(v8 + 24);
      BOOL v12 = v10 == a2 && v11 == a3;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, a2, a3, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease(a3);
        swift_bridgeObjectRelease(a1);
        return v8;
      }

      swift_release(v8);
      ++v7;
      if (v9 == v6) {
        goto LABEL_14;
      }
    }

    __break(1u);
LABEL_18:
    if (a1 < 0) {
      uint64_t v14 = a1;
    }
    else {
      uint64_t v14 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

uint64_t sub_100023514(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_1000233E4(v4, a1, a2);
  swift_bridgeObjectRelease();
  return v5;
}

void sub_100023578(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 160);
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  sub_100023E58();
  sub_100023E9C();
  for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v13))
  {
    uint64_t v8 = 4LL;
    while (1)
    {
      if ((v6 & 0xC000000000000001LL) != 0) {
        uint64_t v3 = sub_100023EE0();
      }
      else {
        sub_100023ED4();
      }
      uint64_t v9 = v8 - 3;
      if (__OFADD__(v8 - 4, 1LL)) {
        break;
      }
      uint64_t v10 = *(void *)(v3 + 96);
      uint64_t v11 = *(void *)(v3 + 104);
      if ((v10 != a1 || v11 != a2) && (sub_100023EC4(v10, v11) & 1) == 0)
      {
        swift_release(v3);
        ++v8;
        if (v9 != v7) {
          continue;
        }
      }

      goto LABEL_14;
    }

    __break(1u);
LABEL_16:
    if (v6 < 0) {
      uint64_t v13 = v6;
    }
    else {
      uint64_t v13 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_100023E58();
    sub_100023E9C();
  }

uint64_t sub_100023660(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 168);
  uint64_t v3 = *(void *)(a1 + 168);
  if (v2 < v3) {
    return 0LL;
  }
  if (v3 < v2) {
    return 2LL;
  }
  if (*(void *)(v1 + 176) == *(void *)(a1 + 176))
  {
    unsigned __int8 v6 = *(_BYTE *)(a1 + 184);
    uint64_t v7 = sub_1001BE548(*(_BYTE *)(v1 + 184));
    uint64_t v9 = v8;
    uint64_t v10 = sub_1001BE548(v6);
    if (v7 == v10 && v9 == v11)
    {
      swift_bridgeObjectRelease_n(v9, 2LL);
    }

    else
    {
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0LL);
      swift_bridgeObjectRelease();
      sub_100023EEC();
      if ((v13 & 1) == 0) {
        return 1LL;
      }
    }

    uint64_t v14 = *(void *)(v1 + 80);
    uint64_t v15 = *(void *)(v1 + 88);
    uint64_t v16 = *(void *)(a1 + 80);
    uint64_t v17 = *(void *)(a1 + 88);
    BOOL v18 = v14 == v16 && v15 == v17;
    if (!v18 && (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v16, v17, 0LL) & 1) == 0) {
      return 2LL;
    }
  }

  return 1LL;
}

uint64_t sub_100023750()
{
  return swift_bridgeObjectRelease(v0[25]);
}

void *sub_100023784()
{
  uint64_t v0 = sub_1001BA81C();
  swift_release(v0[17]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000237D0()
{
  uint64_t v0 = sub_100023784();
  return swift_deallocClassInstance(v0, 208LL, 7LL);
}

uint64_t type metadata accessor for OctaneSubscription()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService18OctaneSubscription);
}

unint64_t sub_10002380C()
{
  unint64_t result = qword_1002A9C90;
  if (!qword_1002A9C90)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F4940, &type metadata for OctaneSubscription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A9C90);
  }

  return result;
}

unint64_t sub_100023848()
{
  unint64_t result = qword_1002A9CA0;
  if (!qword_1002A9CA0)
  {
    uint64_t v1 = sub_100018EC0(&qword_1002A9C98);
    uint64_t v2 = sub_1000221A8(&qword_1002A9CA8, (uint64_t (*)(uint64_t))_s10AdHocOfferCMa, (uint64_t)&unk_1002034C8);
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1002A9CA0);
  }

  return result;
}

unint64_t sub_1000238C4()
{
  unint64_t result = qword_1002A9CB8;
  if (!qword_1002A9CB8)
  {
    uint64_t v1 = sub_100018EC0(&qword_1002A9CB0);
    uint64_t v2 = sub_1000221A8(&qword_1002A9CC0, (uint64_t (*)(uint64_t))_s9CodeOfferCMa, (uint64_t)&unk_1002034C8);
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1002A9CB8);
  }

  return result;
}

unint64_t sub_100023940()
{
  unint64_t result = qword_1002A9CD0;
  if (!qword_1002A9CD0)
  {
    uint64_t v1 = sub_100018EC0(&qword_1002A9CC8);
    uint64_t v2 = sub_1000221A8(&qword_1002A9CD8, (uint64_t (*)(uint64_t))_s12WinbackOfferCMa, (uint64_t)&unk_1002034C8);
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1002A9CD0);
  }

  return result;
}

unint64_t sub_1000239BC()
{
  unint64_t result = qword_1002A9CE8;
  if (!qword_1002A9CE8)
  {
    uint64_t v1 = sub_100018EC0(&qword_1002A9CE0);
    uint64_t v2 = sub_1000221A8( &qword_1002A9CF0,  (uint64_t (*)(uint64_t))_s17IntroductoryOfferCMa,  (uint64_t)&unk_1002034C8);
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1002A9CE8);
  }

  return result;
}

unint64_t sub_100023A38()
{
  unint64_t result = qword_1002A9D00;
  if (!qword_1002A9D00)
  {
    uint64_t v1 = sub_100018EC0(&qword_1002A9C98);
    uint64_t v2 = sub_1000221A8(&qword_1002A9D08, (uint64_t (*)(uint64_t))_s10AdHocOfferCMa, (uint64_t)&unk_1002034F0);
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1002A9D00);
  }

  return result;
}

unint64_t sub_100023AB4()
{
  unint64_t result = qword_1002A9D10;
  if (!qword_1002A9D10)
  {
    uint64_t v1 = sub_100018EC0(&qword_1002A9CB0);
    uint64_t v2 = sub_1000221A8(&qword_1002A9D18, (uint64_t (*)(uint64_t))_s9CodeOfferCMa, (uint64_t)&unk_1002034F0);
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1002A9D10);
  }

  return result;
}

unint64_t sub_100023B30()
{
  unint64_t result = qword_1002A9D20;
  if (!qword_1002A9D20)
  {
    uint64_t v1 = sub_100018EC0(&qword_1002A9CC8);
    uint64_t v2 = sub_1000221A8(&qword_1002A9D28, (uint64_t (*)(uint64_t))_s12WinbackOfferCMa, (uint64_t)&unk_1002034F0);
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1002A9D20);
  }

  return result;
}

uint64_t sub_100023BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t getEnumTagSinglePayload for OctaneSubscriptionPeriod.Unit(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 6) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for OctaneSubscription.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_100023CC4 + 4 * byte_1001F47D3[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100023CF8 + 4 * byte_1001F47CE[v4]))();
}

uint64_t sub_100023CF8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100023D00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100023D08LL);
  }
  return result;
}

uint64_t sub_100023D14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100023D1CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_100023D20(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100023D28(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OctaneSubscription.CodingKeys()
{
  return &type metadata for OctaneSubscription.CodingKeys;
}

unint64_t sub_100023D48()
{
  unint64_t result = qword_1002A9D38;
  if (!qword_1002A9D38)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F4918, &type metadata for OctaneSubscription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A9D38);
  }

  return result;
}

unint64_t sub_100023D88()
{
  unint64_t result = qword_1002A9D40;
  if (!qword_1002A9D40)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F4850, &type metadata for OctaneSubscription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A9D40);
  }

  return result;
}

unint64_t sub_100023DC8()
{
  unint64_t result = qword_1002A9D48;
  if (!qword_1002A9D48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F4878, &type metadata for OctaneSubscription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A9D48);
  }

  return result;
}

uint64_t sub_100023E04(uint64_t a1)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v1, v3 - 65, v2, v1, a1);
}

uint64_t sub_100023E28(uint64_t a1)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 72, v3 - 81, v1, v2, a1);
}

uint64_t sub_100023E48()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100023E58()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t sub_100023E64(uint64_t a1)
{
  return swift_bridgeObjectRetain_n(a1, 2LL);
}

uint64_t sub_100023E6C()
{
  return _s8DiscountCMa();
}

  ;
}

uint64_t sub_100023E88()
{
  return KeyedDecodingContainer.decode(_:forKey:)(v1 - 120, v0);
}

uint64_t sub_100023E9C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100023EA4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100023EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_100023EC4(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v2, v3, 0LL);
}

uint64_t sub_100023ED4()
{
  return swift_retain(*(void *)(v0 + 8 * v1));
}

uint64_t sub_100023EE0()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

uint64_t sub_100023EEC()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100023EF4()
{
  return swift_bridgeObjectRelease(v0);
}

void *sub_100023EFC()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = (void *)v1;
  if (v1 == 1)
  {
    uint64_t v2 = sub_1000A4EA8(0x722D646E75666572LL, 0xEE00747365757165LL, 1819112552LL, 0xE400000000000000LL);
    uint64_t v3 = *(void *)(v0 + 128);
    *(void *)(v0 + 12_Block_object_dispose((const void *)(v1 - 136), 8) = v2;
    *(void *)(v0 + 136) = v4;
    swift_bridgeObjectRetain();
    sub_10001E95C(v3);
  }

  sub_10001E9A0(v1);
  return v2;
}

uint64_t sub_100023FA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = (uint8_t *)type metadata accessor for Date(0LL);
  uint64_t v5 = *((void *)v4 - 1);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t)&v105 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_1001BCBC8();
  sub_10012A314(0x746361736E617274LL, 0xED000064496E6F69LL, v8);
  uint64_t v10 = v9;
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_96;
  }
  uint64_t v13 = HIBYTE(v12) & 0xF;
  uint64_t v14 = v10 & 0xFFFFFFFFFFFFLL;
  if ((v12 & 0x2000000000000000LL) != 0) {
    uint64_t v15 = HIBYTE(v12) & 0xF;
  }
  else {
    uint64_t v15 = v10 & 0xFFFFFFFFFFFFLL;
  }
  if (!v15)
  {
    swift_bridgeObjectRelease();
    goto LABEL_96;
  }

  if ((v12 & 0x1000000000000000LL) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_100161B20(v10, v12, 10LL);
    uint64_t v10 = v96;
    swift_bridgeObjectRelease_n(v12, 2LL);
    if ((v10 & 1) == 0) {
      goto LABEL_39;
    }
LABEL_96:
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v97 = type metadata accessor for Logger(0LL);
    uint64_t v98 = sub_100018F68(v97, (uint64_t)qword_1002EB9D0);
    uint64_t v99 = (os_log_s *)Logger.logObject.getter(v98);
    os_log_type_t v101 = static os_log_type_t.error.getter(v99, v100);
    if (sub_100024E9C(v101))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v99,  (os_log_type_t)v10,  "No transaction id parameter passed for refund request UI",  v4,  2u);
      sub_100024EDC();
    }

    sub_100024EBC();
    uint64_t v41 = 21LL;
    goto LABEL_101;
  }

  if ((v12 & 0x2000000000000000LL) != 0)
  {
    unsigned int v134 = (uint8_t *)v10;
    uint64_t v135 = v12 & 0xFFFFFFFFFFFFFFLL;
    if (v10 == 43)
    {
      if (v13)
      {
        if (v13 != 1 && (BYTE1(v10) - 48) <= 9u)
        {
          uint64_t v8 = (BYTE1(v10) - 48);
          if (v13 == 2) {
            goto LABEL_37;
          }
          if ((BYTE2(v10) - 48) <= 9u)
          {
            uint64_t v8 = 10LL * (BYTE1(v10) - 48) + (BYTE2(v10) - 48);
            if (v13 != 3)
            {
              while (1)
              {
                sub_100024EAC();
                if (!v23 && v19) {
                  goto LABEL_34;
                }
                if (!is_mul_ok(v8, v21)) {
                  goto LABEL_34;
                }
                BOOL v19 = __CFADD__(10 * v8, v22);
                uint64_t v8 = 10 * v8 + v22;
                if (v19) {
                  goto LABEL_34;
                }
                sub_100024EFC();
                if (v23) {
                  goto LABEL_38;
                }
              }
            }

            goto LABEL_37;
          }
        }

        goto LABEL_34;
      }
    }

    else
    {
      if (v10 != 45)
      {
        if (v13 && (v10 - 48) <= 9u)
        {
          uint64_t v8 = (v10 - 48);
          if (v13 == 1) {
            goto LABEL_37;
          }
          if ((BYTE1(v10) - 48) <= 9u)
          {
            uint64_t v8 = 10LL * (v10 - 48) + (BYTE1(v10) - 48);
            if (v13 != 2)
            {
              while (1)
              {
                sub_100024EAC();
                if (!v23 && v19) {
                  goto LABEL_34;
                }
                if (!is_mul_ok(v8, v45)) {
                  goto LABEL_34;
                }
                BOOL v19 = __CFADD__(10 * v8, v46);
                uint64_t v8 = 10 * v8 + v46;
                if (v19) {
                  goto LABEL_34;
                }
                sub_100024EFC();
                if (v23) {
                  goto LABEL_38;
                }
              }
            }

            goto LABEL_37;
          }
        }

LABEL_34:
        uint64_t v8 = 0LL;
LABEL_35:
        uint64_t v10 = 1LL;
        goto LABEL_38;
      }

      if (v13)
      {
        if (v13 != 1)
        {
          unsigned __int8 v18 = BYTE1(v10) - 48;
          if ((BYTE1(v10) - 48) <= 9u)
          {
            uint64_t v8 = 0LL;
            BOOL v19 = v18 == 0LL;
            unint64_t v20 = -(uint64_t)v18;
            if (!v19) {
              goto LABEL_35;
            }
            if (v13 == 2)
            {
              uint64_t v10 = 0LL;
              uint64_t v8 = v20;
              goto LABEL_38;
            }

            unsigned __int8 v47 = BYTE2(v10) - 48;
            if ((BYTE2(v10) - 48) <= 9u && is_mul_ok(v20, 0xAuLL))
            {
              unint64_t v48 = 10 * v20;
              uint64_t v8 = v48 - v47;
              if (v48 >= v47)
              {
                if (v13 != 3)
                {
                  while (1)
                  {
                    sub_100024EAC();
                    if (!v23 && v19) {
                      goto LABEL_34;
                    }
                    if (!is_mul_ok(v8, v49)) {
                      goto LABEL_34;
                    }
                    BOOL v19 = 10 * v8 >= (unint64_t)v50;
                    uint64_t v8 = 10 * v8 - v50;
                    if (!v19) {
                      goto LABEL_34;
                    }
                    sub_100024EFC();
                    if (v23) {
                      goto LABEL_38;
                    }
                  }
                }

  if (v4 < 0) {
    char v17 = v4;
  }
  else {
    char v17 = v4 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_10003574C();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v17);
  sub_10003561C();
LABEL_9:
  uint64_t v9 = v8 + v5;
  if (__OFADD__(v8, v5))
  {
    __break(1u);
LABEL_39:
    if (v4 < 0) {
      unsigned __int8 v18 = v4;
    }
    else {
      unsigned __int8 v18 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_10003574C();
    unint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v18);
    sub_10003561C();
    uint64_t v4 = *v1;
    goto LABEL_17;
  }

  uint64_t v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *uint64_t v1 = v4;
  uint64_t v8 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000LL) == 0 && (v4 & 0x4000000000000000LL) == 0)
  {
    unint64_t v11 = v4 & 0xFFFFFFFFFFFFFF8LL;
    if (v9 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_20;
    }
    uint64_t v8 = 1LL;
  }

  unint64_t v12 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_17:
  if (v12 <= v9) {
    unint64_t v12 = v9;
  }
  sub_10003574C();
  *uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1LL, v4);
  swift_bridgeObjectRelease();
  unint64_t v11 = *v1 & 0xFFFFFFFFFFFFFF8LL;
LABEL_20:
  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(v11 + 32 + 8 * v2);
  type metadata accessor for SubscriptionRenewalCoordinator.RenewalTask(0LL);
  uint64_t result = swift_arrayDestroy(v14, v3);
  if (!v5) {
    return specialized Array._endMutation()(result);
  }
  if ((unint64_t)*v1 >> 62)
  {
    sub_100035508();
    _CocoaArrayWrapper.endIndex.getter(v4);
    sub_100035734();
  }

  else
  {
    uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (__OFSUB__(v4, v0))
  {
    __break(1u);
  }

  else
  {
    uint64_t result = (uint64_t)sub_100031968((char *)(v13 + 8 * v0), v4 - v0, v14);
    uint64_t v0 = *v1;
    if (!((unint64_t)*v1 >> 62))
    {
      uint64_t v16 = *(void *)((v0 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      goto LABEL_26;
    }
  }

  if (v0 < 0) {
    BOOL v19 = v0;
  }
  else {
    BOOL v19 = v0 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_100019320();
  uint64_t v16 = _CocoaArrayWrapper.endIndex.getter(v19);
  uint64_t result = sub_100019390();
LABEL_26:
  if (!__OFADD__(v16, v5))
  {
    *(void *)((*v1 & 0xFFFFFFFFFFFFF8LL) + 0x10) = v16 + v5;
    return specialized Array._endMutation()(result);
  }

  __break(1u);
  return result;
}

        uint64_t v8 = v29;
        goto LABEL_35;
      }
    }

    uint64_t v8 = v29;
LABEL_35:
    if (!--v27) {
      return sub_1000406EC(v51);
    }
  }

  uint64_t v16 = *(void *)(v30 + 16);
  if (v16 <= 0x7FFFFFFF)
  {
    uint64_t v42 = *(void *)(v30 + 24);
    uint64_t v53 = 0LL;
    uint64_t v54 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(37LL);
    swift_bridgeObjectRelease(v54);
    uint64_t v57 = 0xD000000000000023LL;
    uint64_t v58 = 0x8000000100219450LL;
    uint64_t v53 = v26;
    LOWORD(v54) = v19;
    WORD1(v54) = v32;
    HIDWORD(v54) = v33;
    uint64_t v55 = v16;
    uint64_t v56 = v42;
    type metadata accessor for kevent(0LL);
    v44._countAndFlagsBits = String.init<A>(describing:)(&v53, v43);
    object = v44._object;
    String.append(_:)(v44);
    swift_bridgeObjectRelease(object);
    unsigned __int8 v46 = v57;
    unint64_t v11 = v58;
    unsigned __int8 v47 = sub_100025100();
    uint64_t v14 = swift_allocError(&type metadata for IOError, v47, 0LL, 0LL);
    *(void *)uint64_t v15 = v46;
    goto LABEL_3;
  }

          __break(1u);
LABEL_35:
          __break(1u);
          goto LABEL_36;
        }

        goto LABEL_32;
      }

      goto LABEL_30;
    }

    goto LABEL_28;
  }

  char v17 = *a3;
  uint64_t v32 = *((unsigned __int16 *)a3 + 10);
  unsigned __int8 v18 = *((unsigned __int8 *)a3 + 22);
  swift_beginAccess(*a3 + 24, v33, 0LL, 0LL);
  BOOL v19 = *(void *)(v17 + 24) + (v18 | (v32 << 8)) + v9;
  ByteBuffer._setBytes(_:at:)(v19, v19 + v10, a1);
  if (__OFADD__(a1, v10))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  unint64_t v20 = *(unsigned int *)(v3 + 12);
  if (__OFSUB__(v20, v4))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  ByteBuffer.copyBytes(at:to:length:)(v4, a1 + v10, v20 - v4);
  if (!v4)
  {
    uint64_t v4 = v12 - v10;
    if (!__OFSUB__(v12, v10))
    {
      unint64_t v21 = *(unsigned int *)(v3 + 12);
      if (!__OFSUB__(v21, v4))
      {
        ByteBuffer.moveWriterIndex(to:)(v21 - v4);
        *(void *)(v3 + 24) = sub_100062504(v12 - v10, v5, v6);
        *(void *)(v3 + 32) = v22;
        return;
      }

      goto LABEL_33;
    }

    goto LABEL_31;
  }

      __break(1u);
      return;
    }
  }

  else
  {
    uint64_t v16 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    sub_100077D1C();
    if (v16) {
      goto LABEL_14;
    }
  }

  unsigned __int8 v18 = _swiftEmptyArrayStorage;
LABEL_29:
  sub_10001EDE8(v6);
  uint64_t v28 = sub_100019F58(v31 + 7, v31[10]);
  __chkstk_darwin(v28);
  sub_100092E9C();
  *(void *)(v29 - 16) = v4;
  *(void *)(v29 - _Block_object_dispose((const void *)(v1 - 136), 8) = v32;
  sub_1001B2FD0();
  uint64_t v30 = v31[16];
  sub_100041B5C();
  sub_10003574C();
  swift_bridgeObjectRetain();
  sub_1000AC7D8(v30, (uint64_t)v31, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)v18);
  sub_10001DC10();
  if (qword_1002A8CF8 != -1) {
    swift_once(&qword_1002A8CF8, sub_10010EF80);
  }
  sub_100110964((uint64_t)_swiftEmptyArrayStorage);
  sub_10003561C();
  sub_10002A580();
}

  if (a1 < 0) {
    char v27 = a1;
  }
  else {
    char v27 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_100019320();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v27);
  sub_100019390();
  if (!v3) {
    return 0LL;
  }
LABEL_3:
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  if ((v5 & 0x2000000000000000LL) != 0) {
    uint64_t v6 = HIBYTE(v5) & 0xF;
  }
  else {
    uint64_t v6 = v4 & 0xFFFFFFFFFFFFLL;
  }
  sub_10003574C();
  if (v6)
  {
    uint64_t v7 = 4 * v6;
    uint64_t v8 = 15LL;
    while (1)
    {
      sub_10003574C();
      uint64_t v9 = String.subscript.getter(v8, v4, v5);
      unint64_t v11 = v10;
      sub_10003561C();
      if (v9 == 95 && v11 == 0xE100000000000000LL) {
        break;
      }
      uint64_t v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v11, 95LL, 0xE100000000000000LL, 0LL);
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0)
      {
        uint64_t v8 = String.index(after:)(v8, v4, v5);
        if (v7 != v8 >> 14) {
          continue;
        }
      }

      goto LABEL_17;
    }

    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v8 = 15LL;
  }

  __break(1u);
LABEL_35:
  __break(1u);
}

    __break(1u);
    goto LABEL_35;
  }

  uint64_t v31 = v7;
LABEL_74:
  sub_1000314BC(v4, v12 - v4, v31);
  return 1LL;
}

  swift_release(v7);
  uint64_t v2 = v37;
  uint64_t v36 = 1LL << *(_BYTE *)(v7 + 32);
  if (v36 > 63) {
    sub_1001A2AC0(0LL, (unint64_t)(v36 + 63) >> 6, v39);
  }
  else {
    *uint64_t v39 = -1LL << v36;
  }
  *(void *)(v7 + 16) = 0LL;
LABEL_38:
  uint64_t result = swift_release(v7);
  void *v2 = v9;
  return result;
}

LABEL_37:
                uint64_t v10 = 0LL;
                goto LABEL_38;
              }
            }
          }
        }

        goto LABEL_34;
      }

      __break(1u);
    }

    __break(1u);
LABEL_105:
    swift_once(&qword_1002A8CA8, sub_100043918);
LABEL_92:
    uint64_t v81 = (void *)qword_1002AAFE8;
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v83 = [v81 stringFromDate:isa];

    uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
    uint64_t v86 = v85;

    (*(void (**)(uint64_t, uint8_t *))(v5 + 8))(v7, v4);
    unsigned int v128 = &type metadata for RefundRequestUIRoute.ViewProperties;
    uint64_t v87 = (void *)swift_allocObject(&unk_1002763A0, 96LL, 7LL);
    v127[0] = v87;
    uint64_t v88 = v114;
    v87[2] = v115;
    v87[3] = v88;
    uint64_t v89 = v108;
    v87[4] = v109;
    v87[5] = v89;
    Swift::Int v90 = v119;
    Swift::Int v91 = v113;
    v87[6] = v120;
    v87[7] = v91;
    uint64_t v92 = v111;
    v87[8] = v112;
    v87[9] = v92;
    v87[10] = v84;
    v87[11] = v86;
    sub_1000A5464((uint64_t)v127, v8, v90);
    sub_100024EEC();
    sub_100019F7C(v127);
    sub_100024E8C((uint64_t)v127);
    uint64_t v4 = (uint8_t *)v127[0];
    uint64_t v7 = v127[1];
    uint64_t v2 = (void *)v127[2];
    uint64_t v8 = (uint64_t)v128;
    uint64_t v93 = v129;
    uint64_t v94 = v130;
    uint64_t v95 = v131;
    swift_release(v121);

    uint64_t v10 = v93 | (v94 << 32) | (v95 << 48);
    swift_release(v118);
    swift_release(v125);
    goto LABEL_52;
  }

  if ((v10 & 0x1000000000000000LL) != 0) {
    uint64_t v16 = (unsigned __int8 *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else {
    uint64_t v16 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v10);
  }
  uint64_t v8 = (uint64_t)sub_100161AD8(v16, v14);
  uint64_t v10 = v17 & 1;
LABEL_38:
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0) {
    goto LABEL_96;
  }
LABEL_39:
  sub_100019F58(v2 + 11, v2[14]);
  uint64_t v24 = sub_100089154();
  if (v24)
  {
    uint64_t v10 = v24;
    uint64_t v8 = (uint64_t)sub_100023EFC();
    if (!v8)
    {

      uint64_t v4 = 0LL;
      uint64_t v7 = 0LL;
      uint64_t v2 = 0LL;
      uint64_t v10 = 0LL;
      uint64_t v41 = 49LL;
      goto LABEL_101;
    }

    Swift::Int v26 = v25;
    if ((sub_1000B3D80() & 1) != 0 || (sub_1000B85C8(3u), (v27 & 1) == 0) || sub_1000B3D9C() != 2)
    {
      uint64_t v137 = &type metadata for RefundRequestUIRoute.DuplicateProperties;
      LOBYTE(v134) = 1;
      sub_1000A5464((uint64_t)&v134, v8, v26);
      sub_100024EEC();
      sub_100019F7C(&v134);
      sub_100024E8C((uint64_t)&v134);
      uint64_t v4 = v134;
      uint64_t v7 = v135;
      uint64_t v2 = v136;
      uint64_t v8 = (uint64_t)v137;
      uint64_t v42 = v138;
      uint64_t v43 = WORD2(v138);
      uint64_t v44 = BYTE6(v138);

      uint64_t v10 = v42 | (v43 << 32) | (v44 << 48);
LABEL_52:
      uint64_t v41 = 3LL;
      goto LABEL_101;
    }

    uint64_t v110 = v8;
    Swift::Int v119 = v26;
    uint64_t v120 = (uint64_t)(v2 + 6);
    int v124 = (ValueMetadata *)sub_100019F58(v2 + 6, v2[9]);
    uint64_t v125 = sub_1000B3DDC();
    uint64_t v29 = v28;
    uint64_t v30 = sub_1000B3DEC();
    sub_100075EE8(v30, v31);
    sub_1000D7FA8(v125, v29);
    uint64_t v125 = v32;
    swift_bridgeObjectRelease();
    sub_100024E84();
    sub_100024F0C();
    sub_100024E78();
    sub_100024ED4();
    sub_10007608C();
    uint64_t v121 = v33;
    uint64_t v34 = v125;
    swift_bridgeObjectRelease();
    if (v34)
    {
      uint64_t v35 = *(void **)(v34 + 56);
      swift_bridgeObjectRetain();
    }

    else
    {
      uint64_t v35 = _swiftEmptyArrayStorage;
    }

    uint64_t v51 = sub_1000CC010((uint64_t)v35);
    sub_100024E84();
    uint64_t v8 = v110;
    uint64_t v118 = v51;
    if (v51)
    {
      uint64_t v52 = *(void *)(v51 + 32);
      uint64_t v108 = *(void *)(v51 + 40);
      uint64_t v109 = v52;
      swift_bridgeObjectRetain();
    }

    else
    {
      if (v125) {
        uint64_t v53 = sub_1001BA868();
      }
      else {
        uint64_t v53 = sub_1000B3DDC();
      }
      uint64_t v108 = v54;
      uint64_t v109 = v53;
    }

    sub_1000B3E6C();
    uint64_t v55 = v126[1];
    uint64_t v113 = (uint8_t *)v126[0];
    uint64_t v114 = (void *)v126[2];
    uint64_t v56 = v126[5];
    uint64_t v115 = v126[4];
    uint64_t v116 = v126[6];
    uint64_t v123 = v126[7];
    int v124 = (ValueMetadata *)v126[3];
    uint64_t v117 = v126[8];
    uint64_t v122 = v126[9];
    sub_1000249E8((uint64_t)v126, (uint64_t)v132);
    if (v133)
    {
      uint64_t v58 = v123;
      uint64_t v57 = v124;
      uint64_t v59 = v122;
      uint64_t v61 = v116;
      uint64_t v60 = v117;
      unint64_t v63 = v114;
      uint64_t v62 = v115;
      uint64_t v64 = v113;
    }

    else
    {
      int v124 = (ValueMetadata *)sub_100024E78();
      sub_100024ED4();
      sub_100076700();
      sub_100024E84();
      uint64_t v60 = v126[18];
      uint64_t v59 = v126[19];
      uint64_t v61 = v126[16];
      uint64_t v58 = v126[17];
      uint64_t v62 = v126[14];
      uint64_t v56 = v126[15];
      unint64_t v63 = (void *)v126[12];
      uint64_t v57 = (ValueMetadata *)v126[13];
      uint64_t v64 = (uint8_t *)v126[10];
      uint64_t v55 = v126[11];
    }

    unsigned int v134 = v64;
    uint64_t v135 = v55;
    uint64_t v116 = v56;
    uint64_t v117 = v55;
    __int16 v136 = v63;
    uint64_t v137 = v57;
    uint64_t v123 = v58;
    int v124 = v57;
    uint64_t v138 = v62;
    uint64_t v139 = v56;
    uint64_t v140 = v61;
    uint64_t v141 = v58;
    uint64_t v142 = v60;
    uint64_t v143 = v59;
    uint64_t v122 = v59;
    sub_1000B3FEC();
    if ((v67 & 0x100000000LL) != 0)
    {
      if (!v125)
      {
        uint64_t v111 = 0LL;
        uint64_t v106 = 0LL;
        uint64_t v107 = 0LL;
        LODWORD(v112) = 1;
LABEL_88:
        uint64_t v115 = type metadata accessor for AppIconRoute();
        uint64_t v70 = sub_100024ED4();
        unint64_t v72 = sub_10005A048(v70, v71);
        uint64_t v114 = v73;
        uint64_t v115 = v72;
        sub_100024E84();
        sub_100024E78();
        uint64_t v74 = sub_100024ED4();
        uint64_t v120 = sub_100075DC4(v74, v75);
        uint64_t v113 = v76;
        sub_100024E84();
        if ((v112 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v111 = 0xE000000000000000LL;
          uint64_t v112 = 0LL;
        }

        else
        {
          uint64_t v77 = v121;
          swift_retain();
          uint64_t v78 = sub_100043804(v111, v107, v106, (uint64_t)&v134, v77);
          uint64_t v111 = v79;
          uint64_t v112 = v78;
          sub_100024F0C();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }

        double v80 = sub_1000B4050();
        Date.init(timeIntervalSinceReferenceDate:)(v80);
        if (qword_1002A8CA8 == -1) {
          goto LABEL_92;
        }
        goto LABEL_105;
      }

      swift_retain();
      uint64_t v111 = sub_1001BA8BC();
      uint64_t v106 = v69;
      uint64_t v107 = v68;
      sub_100024F0C();
    }

    else
    {
      uint64_t v106 = v67;
      uint64_t v107 = v66;
      uint64_t v111 = v65;
    }

    LODWORD(v112) = 0;
    goto LABEL_88;
  }

  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v36 = type metadata accessor for Logger(0LL);
  uint64_t v37 = sub_100018F68(v36, (uint64_t)qword_1002EB9D0);
  uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
  os_log_type_t v40 = static os_log_type_t.error.getter(v38, v39);
  if (sub_100024E9C(v40))
  {
    uint64_t v7 = 12LL;
    uint64_t v4 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v4 = 134217984;
    unsigned int v134 = (uint8_t *)v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v4 + 4);
    _os_log_impl( (void *)&_mh_execute_header,  v38,  (os_log_type_t)v10,  "No transaction found for id %lu to refund",  v4,  0xCu);
    sub_100024EDC();
  }

  sub_100024EBC();
  uint64_t v41 = 25LL;
LABEL_101:
  ASOctaneSupportXPCService::HTTPVersion v102 = HTTPVersion.init(major:minor:)(1LL, 1LL);
  uint64_t v103 = type metadata accessor for HTTPResponseHead._Storage();
  uint64_t result = swift_allocObject(v103, 44LL, 7LL);
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 32) = v41;
  *(ASOctaneSupportXPCService::HTTPVersion *)(result + 40) = v102;
  *(void *)a1 = result;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = _swiftEmptyArrayStorage;
  *(_BYTE *)(a1 + 16) = 2;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v2;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v8;
  *(_BYTE *)(a1 + 62) = BYTE6(v10);
  *(_WORD *)(a1 + 60) = WORD2(v10);
  *(_DWORD *)(a1 + 56) = v10;
  return result;
}

    sub_100075CD4();
    uint64_t v39 = v51;
    goto LABEL_27;
  }

  uint64_t v32 = v53;
  unint64_t v45 = v53;
LABEL_31:
  swift_release(v45);
LABEL_32:
  unsigned __int8 v46 = sub_1000CC2F8((uint64_t)v64);
  unint64_t v48 = v47;
  swift_release(v67);
  swift_release(v63);
  sub_10001B4DC(v64);
  if ((v65 & 1) != 0) {
    unint64_t v49 = *(_BYTE *)(v32 + 112);
  }
  else {
    unint64_t v49 = 4;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_release(v32);
  *(void *)&v68[0] = 0LL;
  BYTE8(v68[0]) = 1;
  memset(&v68[1], 0, 48);
  *(void *)&v68[4] = v62;
  *((void *)&v68[4] + 1) = 0xD000000000000013LL;
  *(void *)&v68[5] = 0x800000010021A500LL;
  *((void *)&v68[5] + 1) = v11;
  *(void *)&v68[6] = v10;
  *((void *)&v68[6] + 1) = v60;
  *(void *)&v68[7] = v14;
  *((void *)&v68[7] + 1) = v61;
  *(void *)&v68[9] = 0LL;
  v68[8] = v15;
  BYTE8(v68[9]) = 0;
  BYTE9(v68[9]) = v59;
  *(void *)&v68[10] = v46;
  *((void *)&v68[10] + 1) = v48;
  *(void *)&v68[11] = v56;
  *((void *)&v68[11] + 1) = v55;
  *(void *)&v68[12] = v58;
  *((void *)&v68[12] + 1) = v57;
  *(void *)&v68[13] = v39;
  BYTE8(v68[13]) = v49;
  sub_100075000(v68);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100074E68(v68);
  return memcpy(__dst, v68, 0xD9uLL);
}

  __break(1u);
}

    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v3 = v16;
    uint64_t v4 = v21;
  }

  uint64_t v15 = i + 4;
  if (i + 4 >= v32)
  {
LABEL_40:
    uint64_t v2 = 1LL;
    goto LABEL_41;
  }

  uint64_t v14 = *(void *)(v33 + 8 * v15);
  if (v14)
  {
    unint64_t v12 = i + 4;
    goto LABEL_22;
  }

  while (1)
  {
    unint64_t v12 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v12 >= v32) {
      goto LABEL_40;
    }
    uint64_t v14 = *(void *)(v33 + 8 * v12);
    ++v15;
    if (v14) {
      goto LABEL_22;
    }
  }

  __break(1u);
}

    __break(1u);
    goto LABEL_38;
  }

    __break(1u);
    goto LABEL_38;
  }

uint64_t type metadata accessor for RefundRequestUIRoute()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService20RefundRequestUIRoute);
}

uint64_t sub_1000249E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002A9E48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100024A30()
{
  return swift_deallocObject(v0, 96LL, 7LL);
}

uint64_t getEnumTagSinglePayload for RefundRequestUIRoute.DuplicateProperties( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for RefundRequestUIRoute.DuplicateProperties( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100024B58 + 4 * byte_1001F49A5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100024B8C + 4 * byte_1001F49A0[v4]))();
}

uint64_t sub_100024B8C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100024B94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100024B9CLL);
  }
  return result;
}

uint64_t sub_100024BA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100024BB0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100024BB4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100024BBC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RefundRequestUIRoute.DuplicateProperties()
{
  return &type metadata for RefundRequestUIRoute.DuplicateProperties;
}

uint64_t destroy for RefundRequestUIRoute.ViewProperties(void *a1)
{
  return swift_bridgeObjectRelease(a1[9]);
}

void *initializeWithCopy for RefundRequestUIRoute.ViewProperties(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

void *assignWithCopy for RefundRequestUIRoute.ViewProperties(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[8] = a2[8];
  uint64_t v12 = a2[9];
  uint64_t v13 = a1[9];
  a1[9] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

void *assignWithTake for RefundRequestUIRoute.ViewProperties(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[6] = a2[6];
  a1[7] = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a2[9];
  uint64_t v13 = a1[9];
  a1[8] = a2[8];
  a1[9] = v12;
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for RefundRequestUIRoute.ViewProperties(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 80))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RefundRequestUIRoute.ViewProperties(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RefundRequestUIRoute.ViewProperties()
{
  return &type metadata for RefundRequestUIRoute.ViewProperties;
}

void *sub_100024E78()
{
  return sub_100019F58(*(void **)(v0 + 120), *(void *)(v1 + 72));
}

uint64_t sub_100024E84()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100024E8C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACB64(v1, v2, 1u, a1);
}

BOOL sub_100024E9C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

  ;
}

  ;
}

uint64_t sub_100024ED4()
{
  return sub_1000B3DEC();
}

uint64_t sub_100024EDC()
{
  return swift_slowDealloc(v0, -1LL, -1LL);
}

uint64_t sub_100024EEC()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

uint64_t sub_100024F0C()
{
  return swift_release(v0);
}

uint64_t sub_100024F14(int a1)
{
  uint64_t result = dup(a1);
  if ((_DWORD)result == -1)
  {
    uint64_t result = errno.getter();
    int v3 = result;
    if ((_DWORD)result == 4)
    {
      while (1)
      {
        uint64_t result = dup(a1);
        if ((_DWORD)result != -1) {
          break;
        }
        uint64_t result = errno.getter();
        if ((_DWORD)result != 4)
        {
          int v3 = result;
          goto LABEL_6;
        }
      }
    }

    else
    {
LABEL_6:
      if (v3 == 9 || v3 == 14)
      {
        __break(1u);
      }

      else
      {
        unint64_t v5 = sub_100025100();
        sub_1000252D0((uint64_t)&type metadata for IOError, v5);
        return sub_1000252DC(v6, (uint64_t)"dup(descriptor:)");
      }
    }
  }

  return result;
}

uint64_t sub_100024FB4(int a1)
{
  uint64_t result = close(a1);
  if ((_DWORD)result == -1)
  {
    uint64_t result = errno.getter();
    if ((_DWORD)result != 4)
    {
      if ((_DWORD)result == 9 || (_DWORD)result == 14)
      {
        __break(1u);
      }

      else
      {
        unint64_t v3 = sub_100025100();
        uint64_t v4 = sub_1000252D0((uint64_t)&type metadata for IOError, v3);
        void *v5 = 0x65736F6C63LL;
        v5[1] = 0xE500000000000000LL;
        return sub_1000252F8(v4, (uint64_t)v5);
      }
    }
  }

  return result;
}

uint64_t sub_100025030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = ((uint64_t (*)(void))open(_:_:_:))();
  if ((_DWORD)result == -1)
  {
    uint64_t result = errno.getter();
    int v7 = result;
    if ((_DWORD)result == 4)
    {
      while (1)
      {
        uint64_t result = open(_:_:_:)(a1, a2, a3);
        if ((_DWORD)result != -1) {
          break;
        }
        uint64_t result = errno.getter();
        if ((_DWORD)result != 4)
        {
          int v7 = result;
          goto LABEL_6;
        }
      }
    }

    else
    {
LABEL_6:
      if (v7 == 9 || v7 == 14)
      {
        __break(1u);
      }

      else
      {
        unint64_t v9 = sub_100025100();
        uint64_t v10 = sub_1000252D0((uint64_t)&type metadata for IOError, v9);
        *(void *)uint64_t v11 = 0xD000000000000016LL;
        *(void *)(v11 + _Block_object_dispose((const void *)(v1 - 136), 8) = 0x8000000100218830LL;
        *(_DWORD *)(v11 + 16) = v7;
        return swift_willThrow(v10);
      }
    }
  }

  return result;
}

unint64_t sub_100025100()
{
  unint64_t result = qword_1002A9E50;
  if (!qword_1002A9E50)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for IOError, &type metadata for IOError);
    atomic_store(result, (unint64_t *)&qword_1002A9E50);
  }

  return result;
}

off_t sub_10002513C(int a1, off_t a2, int a3)
{
  off_t result = lseek(a1, a2, a3);
  if (result == -1)
  {
    off_t result = errno.getter();
    int v7 = result;
    if ((_DWORD)result == 4)
    {
      while (1)
      {
        off_t result = lseek(a1, a2, a3);
        if (result != -1) {
          break;
        }
        off_t result = errno.getter();
        if ((_DWORD)result != 4)
        {
          int v7 = result;
          goto LABEL_6;
        }
      }
    }

    else
    {
LABEL_6:
      if (v7 == 9 || v7 == 14)
      {
        __break(1u);
      }

      else
      {
        unint64_t v9 = sub_100025100();
        sub_1000252D0((uint64_t)&type metadata for IOError, v9);
        return sub_1000252DC(v10, (uint64_t)"lseek(descriptor:offset:whence:)");
      }
    }
  }

  return result;
}

uint64_t sub_1000251F4(const char *a1)
{
  return if_nametoindex(a1);
}

uint64_t sub_100025218(ifaddrs **a1)
{
  uint64_t result = getifaddrs(a1);
  if ((_DWORD)result == -1)
  {
    uint64_t result = errno.getter();
    int v3 = result;
    if ((_DWORD)result == 4)
    {
      while (1)
      {
        uint64_t result = getifaddrs(a1);
        if ((_DWORD)result != -1) {
          break;
        }
        uint64_t result = errno.getter();
        if ((_DWORD)result != 4)
        {
          int v3 = result;
          goto LABEL_6;
        }
      }
    }

    else
    {
LABEL_6:
      if (v3 == 9 || v3 == 14)
      {
        __break(1u);
      }

      else
      {
        unint64_t v5 = sub_100025100();
        uint64_t v6 = sub_1000252D0((uint64_t)&type metadata for IOError, v5);
        strcpy(v7, "getifaddrs(_:)");
        v7[15] = -18;
        return sub_1000252F8(v6, (uint64_t)v7);
      }
    }
  }

  return result;
}

uint64_t sub_1000252D0(uint64_t a1, uint64_t a2)
{
  return swift_allocError(a1, a2, 0LL, 0LL);
}

uint64_t sub_1000252DC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a1 = v2 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = (a2 - 32) | 0x8000000000000000LL;
  *(_DWORD *)(a1 + 16) = v3;
  return swift_willThrow();
}

uint64_t sub_1000252F8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 16) = v2;
  return swift_willThrow();
}

ValueMetadata *type metadata accessor for OctaneConfigurationVersion()
{
  return &type metadata for OctaneConfigurationVersion;
}

uint64_t sub_100025314(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x726F6A616DLL && a2 == 0xE500000000000000LL)
  {
    unint64_t v5 = 0xE500000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F6A616DLL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x726F6E696DLL && a2 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease(0xE500000000000000LL);
    return 1LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x726F6E696DLL, 0xE500000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1000253F8(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x726F6E696DLL;
  }
  else {
    return 0x726F6A616DLL;
  }
}

uint64_t sub_100025420(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_1000175B0(&qword_1002A9E68);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100019F58(a1, v11);
  unint64_t v13 = sub_100025700();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for OctaneConfigurationVersion.CodingKeys,  &type metadata for OctaneConfigurationVersion.CodingKeys,  v13,  v11,  v12);
  char v17 = 0;
  sub_1000258C8(a2, (uint64_t)&v17);
  if (!v3)
  {
    char v16 = 1;
    sub_1000258C8(a3, (uint64_t)&v16);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100025524(void *a1)
{
  uint64_t v3 = sub_1000175B0(&qword_1002A9E58);
  __chkstk_darwin(v3);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100019F58(a1, v4);
  unint64_t v6 = sub_100025700();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for OctaneConfigurationVersion.CodingKeys,  &type metadata for OctaneConfigurationVersion.CodingKeys,  v6,  v4,  v5);
  if (v1)
  {
    sub_100019F7C(a1);
  }

  else
  {
    char v9 = 0;
    uint64_t v4 = sub_1000258D8((uint64_t)&v9);
    char v8 = 1;
    sub_1000258D8((uint64_t)&v8);
    sub_1000258E8();
    sub_100019F7C(a1);
  }

  return v4;
}

uint64_t sub_100025644()
{
  return sub_1000253F8(*v0);
}

uint64_t sub_10002564C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100025314(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100025670(uint64_t a1)
{
  unint64_t v2 = sub_100025700();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100025698(uint64_t a1)
{
  unint64_t v2 = sub_100025700();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000256C0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100025524(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

uint64_t sub_1000256E8(void *a1)
{
  return sub_100025420(a1, *v1, v1[1]);
}

unint64_t sub_100025700()
{
  unint64_t result = qword_1002A9E60;
  if (!qword_1002A9E60)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F4B90, &type metadata for OctaneConfigurationVersion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A9E60);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for OctaneConfigurationVersion.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100025788 + 4 * byte_1001F4A35[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000257BC + 4 * asc_1001F4A30[v4]))();
}

uint64_t sub_1000257BC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000257C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000257CCLL);
  }
  return result;
}

uint64_t sub_1000257D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000257E0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000257E4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000257EC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OctaneConfigurationVersion.CodingKeys()
{
  return &type metadata for OctaneConfigurationVersion.CodingKeys;
}

unint64_t sub_10002580C()
{
  unint64_t result = qword_1002A9E70;
  if (!qword_1002A9E70)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F4B68, &type metadata for OctaneConfigurationVersion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A9E70);
  }

  return result;
}

unint64_t sub_10002584C()
{
  unint64_t result = qword_1002A9E78;
  if (!qword_1002A9E78)
  {
    unint64_t result = swift_getWitnessTable("A\x1B\b", &type metadata for OctaneConfigurationVersion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002A9E78);
  }

  return result;
}

unint64_t sub_10002588C()
{
  unint64_t result = qword_1002A9E80[0];
  if (!qword_1002A9E80[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F4B00, &type metadata for OctaneConfigurationVersion.CodingKeys);
    atomic_store(result, qword_1002A9E80);
  }

  return result;
}

uint64_t sub_1000258C8(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v2);
}

uint64_t sub_1000258D8(uint64_t a1)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1);
}

uint64_t sub_1000258E8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OS_dispatch_queue.asyncWithFuture<A>(eventLoop:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v27 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  char v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v18 = EventLoop.makePromise<A>(of:file:line:)( a5,  (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Dispa tchQueue+WithFuture.swift",  126LL,  2LL,  35LL,  ObjectType,  a5,  a2);
  BOOL v19 = (void *)swift_allocObject(&unk_1002766B8, 48LL, 7LL);
  void v19[2] = a5;
  v19[3] = a3;
  v19[4] = a4;
  v19[5] = v18;
  aBlock[4] = sub_100025BEC;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000169C8;
  aBlock[3] = &unk_1002766D0;
  unint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v21 = swift_retain();
  static DispatchQoS.unspecified.getter(v21);
  uint64_t v28 = _swiftEmptyArrayStorage;
  unint64_t v22 = sub_100025C10();
  uint64_t v23 = sub_1000175B0(&qword_1002A9118);
  unint64_t v24 = sub_100025C50();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v23, v24, v10, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v16, v12, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  swift_release();
  return v18;
}

uint64_t sub_100025B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 - 8);
  uint64_t v7 = (void (*)(void))__chkstk_darwin(a1);
  char v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v7();
  EventLoopPromise.succeed(_:)((uint64_t)v9, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, a4);
}

uint64_t sub_100025BC0()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100025BEC()
{
  return sub_100025B0C(v0[3], v0[4], v0[5], v0[2]);
}

uint64_t sub_100025BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100025C08(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_100025C10()
{
  unint64_t result = qword_1002B6F20;
  if (!qword_1002B6F20)
  {
    uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_1002B6F20);
  }

  return result;
}

unint64_t sub_100025C50()
{
  unint64_t result = qword_1002B6F30;
  if (!qword_1002B6F30)
  {
    uint64_t v1 = sub_100018EC0(&qword_1002A9118);
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002B6F30);
  }

  return result;
}

uint64_t sub_100025C98(uint64_t a1)
{
  v4[0] = &unk_1001F4C38;
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    void v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[6] = &unk_1001F4C50;
    v4[7] = &unk_1001F4C68;
    v4[8] = &unk_1001F4C80;
    v4[9] = &unk_1001F4C98;
    v4[10] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[11] = &unk_1001F4C68;
    v4[12] = &unk_1001F4C68;
    v4[13] = &unk_1001F4C80;
    v4[14] = &unk_1001F4CB0;
    v4[15] = &unk_1001F4CC8;
    v4[16] = (char *)&value witness table for Builtin.Int8 + 64;
    v4[17] = &unk_1001F4CE0;
    v4[18] = &unk_1001F4CC8;
    return swift_initClassMetadata2(a1, 0LL, 19LL, v4, a1 + 96);
  }

  return result;
}

void CloseMode.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int CloseMode.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL sub_100025DF4(char *a1, char *a2)
{
  return static CloseMode.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_100025E00()
{
  return CloseMode.hashValue.getter(*v0);
}

void sub_100025E08(uint64_t a1)
{
}

uint64_t sub_100025E10(uint64_t result)
{
  if (result) {
    return sub_100098A70(0LL, 0LL, result);
  }
  return result;
}

void sub_100025E28(uint64_t a1, uint64_t a2)
{
  if (a1) {
    sub_10002A73C(a1);
  }
  swift_getObjectType(*(void *)(a2 + 48));
  sub_10002A6F4();
  sub_10002A6E4(v3, v4, v5, 1141LL);
  if (sub_10002A6DC())
  {
    sub_10002A4C8();
    sub_100096294();
    sub_10001EDD8();
    sub_100024F0C();
  }

  sub_10002A6E4( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  1133LL);
  if (sub_10002A6DC())
  {
    sub_10002A4C8();
    sub_100096208();
    sub_10001EDD8();
    swift_release();
  }

  else
  {
    sub_10002A3D4();
  }

void sub_100025ED8(uint64_t a1)
{
  if (a1) {
    sub_10002A73C(a1);
  }
  uint64_t v1 = sub_10002A444();
  sub_10002A618( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  1133LL,  v1);
  uint64_t v2 = sub_10002A6DC();
  if (v2)
  {
    uint64_t v3 = v2;
    sub_10002A4C8();
    sub_100096208();
    sub_10001EDD8();
    sub_10002A598(v3);
  }

  else
  {
    sub_1000193B8();
  }

uint64_t sub_100025F44()
{
  uint64_t v1 = *v0;
  sub_100025FF8();
  uint64_t v2 = sub_10002A340();
  char v3 = sub_10002A6AC(v2, (uint64_t)&protocol witness table for SelectableEventLoop);
  sub_10002A338();
  if ((v3 & 1) != 0)
  {
    uint64_t v5 = (uint64_t *)((char *)v0 + *(void *)(*v0 + 208));
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    sub_100029DDC(*v5);
    sub_100029DDC(v7);
  }

  else
  {
    type metadata accessor for BaseSocketChannel.AddressCache(0LL, *(void *)(v1 + 80), *(void *)(v1 + 88), v4);
    Lock.withLock<A>(_:)();
    return v9;
  }

  return v6;
}

void sub_100025FF8()
{
}

uint64_t sub_100026028@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = (uint64_t *)(a1 + *(void *)(*(void *)a1 + 208LL));
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  *a2 = *v2;
  a2[1] = v4;
  sub_100029DDC(v3);
  return sub_100029DDC(v4);
}

uint64_t sub_100026068(uint64_t a1, uint64_t a2)
{
  return sub_100029DF4(a2);
}

uint64_t sub_1000260F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t *)(a1 + *(void *)(*(void *)a1 + 208LL));
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t *v4 = a2;
  v4[1] = a3;
  sub_100029DDC(a2);
  sub_100029DDC(a3);
  sub_100029DF4(v5);
  return sub_100029DF4(v6);
}

void sub_100026158()
{
  uint64_t v0 = sub_10002A340();
  char v1 = sub_10002A6AC(v0, (uint64_t)&protocol witness table for SelectableEventLoop);
  sub_10002A338();
  if ((v1 & 1) == 0) {
    sub_10006E36C((void (*)(uint64_t *__return_ptr))sub_10002A130);
  }
}

void sub_1000261D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = (void *)(v4 + *(void *)(*(void *)v4 + 216LL));
  void *v14 = a1;
  v14[1] = a2;
  v14[2] = a3;
  v14[3] = a4;
  Lock.unlock()();
  sub_10002A3D4();
}

uint64_t sub_10002624C()
{
  return *(unsigned __int8 *)(v0 + *(void *)(*(void *)v0 + 224LL));
}

uint64_t sub_10002625C(uint64_t result)
{
  *(_BYTE *)(v1 + *(void *)(*(void *)v1 + 224LL)) = result;
  return result;
}

uint64_t sub_10002626C()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType(v0);
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  295LL,  ObjectType,  &protocol witness table for SelectableEventLoop);
  return swift_unknownObjectRelease(v1);
}

uint64_t sub_1000262B8()
{
  uint64_t v1 = (void *)(v0 + *(void *)(*(void *)v0 + 232LL));
  sub_10002A718((uint64_t)v1, (uint64_t)v4, 0LL);
  uint64_t v2 = *v1;
  swift_unknownObjectRetain(*v1);
  sub_10002A674();
  return v2;
}

void sub_10002632C()
{
  uint64_t v1 = v0;
  sub_100025FF8();
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType(v2);
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  301LL,  ObjectType,  &protocol witness table for SelectableEventLoop);
  swift_unknownObjectRelease(v3);
  sub_1000261D4( *(void *)(v1 + *(void *)(*(void *)v1 + 240LL)),  *(void *)(v1 + *(void *)(*(void *)v1 + 240LL) + 8),  *(void *)(v1 + *(void *)(*(void *)v1 + 240LL) + 16),  *(void *)(v1 + *(void *)(*(void *)v1 + 240LL) + 24));
}

uint64_t sub_100026394()
{
  return *(void *)(v0 + *(void *)(*(void *)v0 + 240LL));
}

void sub_1000263AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)(v4 + *(void *)(*(void *)v4 + 240LL));
  void *v5 = a1;
  v5[1] = a2;
  v5[2] = a3;
  v5[3] = a4;
  sub_10002632C();
}

void sub_1000263C4()
{
}

void sub_1000263EC()
{
}

void sub_100026414()
{
  uint64_t v0 = sub_100025F44();
  sub_100029DF4(v0);
  sub_10001945C();
}

void sub_100026438()
{
  uint64_t v6 = v5;
  sub_10002A444();
  uint64_t v7 = sub_10002A46C();
  EventLoop.assertInEventLoop(file:line:)(v7, v8, v9, 188LL, v10, v6);
  sub_10002A5A4();
  sub_10002A338();
  sub_10002A3D4();
}

uint64_t sub_1000264C4()
{
  uint64_t v1 = (_BYTE *)(*(void *)(v0 + *(void *)(*(void *)v0 + 136LL)) + 16LL);
  sub_10002A4C8();
  uint64_t v2 = sub_100006CE4(v1);
  sub_10001EDD8();
  return v2;
}

uint64_t sub_100026504()
{
  return swift_retain(*(void *)(v0 + *(void *)(*(void *)v0 + 112LL)));
}

uint64_t sub_100026518()
{
  uint64_t result = *(void *)(v0 + *(void *)(*(void *)v0 + 200LL));
  if (result) {
    return swift_retain(result);
  }
  __break(1u);
  return result;
}

void sub_100026530()
{
}

void sub_100026580()
{
}

void sub_1000265D0()
{
}

void sub_100026620()
{
}

void sub_100026670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1000266B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1000266F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100026730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100026770()
{
  uint64_t v1 = *(void *)v0;
  swift_unknownObjectRelease(*((void *)v0 + 2));
  (*(void (**)(char *))(*(void *)(*(void *)(v1 + 80) - 8LL) + 8LL))(&v0[*(void *)(*(void *)v0 + 104LL)]);
  sub_10002A560(*(void *)(*(void *)v0 + 112LL));
  sub_10002A560(*(void *)(*(void *)v0 + 120LL));
  sub_10002A560(*(void *)(*(void *)v0 + 128LL));
  sub_10002A560(*(void *)(*(void *)v0 + 136LL));
  swift_bridgeObjectRelease();
  sub_10002A560(*(void *)(*(void *)v0 + 160LL));
  sub_100019F7C(&v0[*(void *)(*(void *)v0 + 168LL)]);
  sub_10002A560(*(void *)(*(void *)v0 + 200LL));
  uint64_t v2 = (uint64_t *)&v0[*(void *)(*(void *)v0 + 208LL)];
  uint64_t v3 = v2[1];
  sub_100029DF4(*v2);
  sub_100029DF4(v3);
  uint64_t v4 = &v0[*(void *)(*(void *)v0 + 232LL)];
  uint64_t v5 = *(void *)v4;
  swift_release(*((void *)v4 + 2));
  swift_unknownObjectRelease(v5);
  sub_10001945C();
}

uint64_t sub_100026858()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for BaseSocketChannel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BaseSocketChannel);
}

void sub_100026888()
{
  if ((sub_10002A74C() & 1) != 0)
  {
    uint64_t v5 = sub_10002A838();
    (*(void (**)(uint64_t))(v6 + 56))(v5);
  }

  else
  {
    unint64_t v7 = sub_100029C98();
    uint64_t v8 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v7);
    sub_10002A3BC(v8, v9);
  }

  sub_10002A7C4();
}

void sub_100026910()
{
  if ((sub_10002A74C() & 1) != 0)
  {
    uint64_t v5 = sub_10002A838();
    (*(void (**)(uint64_t))(v6 + 64))(v5);
  }

  else
  {
    unint64_t v7 = sub_100029C98();
    uint64_t v8 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v7);
    sub_10002A3BC(v8, v9);
  }

  sub_10002A7C4();
}

BOOL sub_100026998()
{
  uint64_t v6 = sub_10002A338();
  uint64_t v7 = *(void *)(*(void *)v0 + 184LL);
  BOOL v8 = 1LL;
  if ((*(_BYTE *)(v0 + v7) & 1) == 0)
  {
    *(_BYTE *)(v0 + v7) = 1;
    uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 648LL);
    if ((v9(v6) & 1) != 0)
    {
      uint64_t v10 = *(uint64_t (**)(void))(*(void *)v0 + 584LL);
      if ((v10() & 1) != 0)
      {
        uint64_t v11 = *(uint64_t (**)(void))(*(void *)v0 + 616LL);
        do
        {
          uint64_t v12 = v11();
          BOOL v8 = (v12 & 1) == 0;
          char v13 = v12;
          if ((v12 & 0x100) != 0)
          {
            uint64_t v14 = *(void *)(sub_100026518() + 56);
            sub_10002A444();
            sub_10002A6F4();
            EventLoop.assertInEventLoop(file:line:)(v15, v16, v17, 1173LL, v18, v14);
            if (sub_100095918())
            {
              sub_1000964D0();
              sub_10002A7BC();
            }

            uint64_t v12 = sub_10002A7BC();
          }
        }

        while ((v13 & 1) == 0 && (v9(v12) & 1) != 0 && (v10() & 1) != 0);
      }
    }

    *(_BYTE *)(v0 + *(void *)(*(void *)v0 + 184LL)) = 0;
  }

  return v8;
}

void sub_100026B98()
{
  uint64_t v41 = v1;
  uint64_t v42 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v40 = v7;
  uint64_t v38 = v8;
  uint64_t v36 = *v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v3,  v5,  &protocol requirements base descriptor for ChannelOption,  &associated type descriptor for ChannelOption.Value);
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v37 = (char *)&v36 - v12;
  uint64_t v13 = *(void *)(v6 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100025FF8();
  uint64_t v16 = sub_10002A340();
  char v17 = sub_10002A6AC(v16, (uint64_t)&protocol witness table for SelectableEventLoop);
  sub_10002A338();
  sub_10002A80C();
  uint64_t v18 = sub_10002A340();
  if ((v17 & 1) != 0)
  {
    sub_10002A730();
    uint64_t v25 = EventLoop.makePromise<A>(of:file:line:)(v19, v20, v21, v22, 545LL, v23, v19, v24);
    sub_10002A338();
    uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*v0 + 696);
    sub_10002A75C();
    v26(v38, v40, v6, v4);
    sub_100098A70(0LL, 0LL, v25);
    uint64_t v35 = (void *)v25;
  }

  else
  {
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    uint64_t v28 = v38;
    uint64_t v38 = v18;
    v27((char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL), v28, v6);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v37, v40, AssociatedTypeWitness);
    uint64_t v29 = *(unsigned __int8 *)(v13 + 80);
    uint64_t v40 = v4;
    uint64_t v30 = (v29 + 56) & ~v29;
    uint64_t v31 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v32 = (v14 + v30 + v31) & ~v31;
    uint64_t v33 = (char *)swift_allocObject(&unk_1002769D8, v32 + v10, v29 | v31 | 7);
    uint64_t v34 = sub_10002A6C4(v33);
    v34[6] = v0;
    sub_10002A828((uint64_t)v34 + v30, (uint64_t)v15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 32));
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v33[v32], v37, AssociatedTypeWitness);
    sub_10002A4C8();
    sub_1001384E0( sub_100029F28,  v33,  (char *)&type metadata for () + 8,  v38,  &protocol witness table for SelectableEventLoop);
    sub_10002A338();
    uint64_t v35 = v33;
  }

  swift_release(v35);
  sub_10002A580();
}

uint64_t sub_100026DF8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = sub_10002A790(a1, a2);
  if (v2)
  {
    if (a1)
    {
      sub_10002A710();
      sub_100098A70(v2, 1LL, a1);
      sub_10002A47C();
    }

    return swift_errorRelease(v2);
  }

  else if (a1)
  {
    return sub_100098A70(0LL, 0LL, a1);
  }

  return result;
}

void sub_100026E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 - 8);
  uint64_t v8 = __chkstk_darwin(a1);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10002A790(v8, v11);
  if (v4)
  {
    if (a1) {
      EventLoopPromise.fail(_:)(v4);
    }
    sub_10002A47C();
  }

  else
  {
    if (a1) {
      EventLoopPromise.succeed(_:)((uint64_t)v10, a1, a4);
    }
    sub_10002A788((uint64_t)v10, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  }

  sub_10002A3D4();
}

void sub_100026F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v63 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a4,  a3,  &protocol requirements base descriptor for ChannelOption,  &associated type descriptor for ChannelOption.Value);
  uint64_t v8 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v61 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v61 - v12;
  sub_100025FF8();
  sub_10002A340();
  sub_10002A37C();
  EventLoop.assertInEventLoop(file:line:)(v14, v15, v16, 554LL, v17, v18);
  uint64_t v19 = sub_10002A338();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 584LL))(v19) & 1) == 0)
  {
    unint64_t v24 = sub_100029C98();
    uint64_t v25 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v24);
    sub_10002A3BC(v25, v26);
LABEL_18:
    sub_10001DAB8();
    return;
  }

  uint64_t v62 = v9;
  sub_10002A67C();
  uint64_t v21 = sub_10002A388((uint64_t)&v66, (uint64_t)v13, v20, (uint64_t)&type metadata for ChannelOptions.Types.SocketOption);
  if ((_DWORD)v21)
  {
    sub_1001BC144(v66, DWORD1(v66), v63, AssociatedTypeWitness);
    uint64_t v23 = v62;
LABEL_17:
    (*(void (**)(char *, uint64_t))(v23 + 8))(v13, a3);
    goto LABEL_18;
  }

  uint64_t v27 = sub_10002A388(v21, (uint64_t)v13, v22, (uint64_t)&type metadata for ChannelOptions.Types.AllocatorOption);
  if ((_DWORD)v27)
  {
    uint64_t v29 = sub_10002A3F4();
    sub_10002A408(v29, v30, v31, (uint64_t)&type metadata for ByteBufferAllocator);
    sub_1000263AC(v66, *((uint64_t *)&v66 + 1), v67, v68);
LABEL_16:
    uint64_t v23 = v62;
    goto LABEL_17;
  }

  uint64_t v32 = sub_10002A388(v27, (uint64_t)v13, v28, (uint64_t)&type metadata for ChannelOptions.Types.RecvAllocatorOption);
  if ((_DWORD)v32)
  {
    sub_10002A3F4();
    uint64_t v34 = sub_1000175B0(qword_1002AA008);
    sub_10002A408(v34, v35, v36, v34);
    sub_10002A118(&v66, (uint64_t)v65);
    uint64_t v37 = (void *)(v4 + *(void *)(*(void *)v4 + 168LL));
    sub_10002A718(v5 + *(void *)(*(void *)v5 + 168LL), (uint64_t)v64, 33LL);
    sub_100019F7C(v37);
    sub_10002A118(v65, (uint64_t)v37);
    swift_endAccess(v64);
    goto LABEL_16;
  }

  uint64_t v38 = sub_10002A388(v32, (uint64_t)v13, v33, (uint64_t)&type metadata for ChannelOptions.Types.AutoReadOption);
  if ((_DWORD)v38)
  {
    uint64_t v40 = sub_10002A3F4();
    sub_10002A408(v40, v41, v42, (uint64_t)&type metadata for Bool);
    int v43 = v66;
    uint64_t v44 = *(void *)(*(void *)v4 + 192LL);
    int v45 = *(unsigned __int8 *)(v4 + v44);
    *(_BYTE *)(v4 + v44) = v66;
    uint64_t v46 = sub_1000262B8();
    uint64_t v48 = v47;
    __int16 v50 = v49;
    swift_getObjectType(v46);
    sub_10002A4E4();
    EventLoop.assertInEventLoop(file:line:)(v51, v52, v53, v54, v55, v48);
    swift_release();
    uint64_t v56 = sub_10002A338();
    if ((v50 & 0xFB00) != 0 && ((v43 ^ v45) & 1) != 0)
    {
      if (v43) {
        (*(void (**)(uint64_t))(*(void *)v4 + 752LL))(v56);
      }
      else {
        sub_1000272AC();
      }
    }

    goto LABEL_16;
  }

  if (sub_10002A388( v38,  (uint64_t)v13,  v39,  (uint64_t)&type metadata for ChannelOptions.Types.MaxMessagesPerReadOption))
  {
    uint64_t v57 = sub_10002A3F4();
    sub_10002A408(v57, v58, v59, (uint64_t)&type metadata for UInt);
    *(void *)(v4 + *(void *)(*(void *)v4 + 176LL)) = v66;
    goto LABEL_16;
  }

  uint64_t v60 = v61;
  sub_10002A67C();
  sub_10002A5E8();
  sub_10002A4F4();
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v60, a3);
  sub_10002A48C();
  sub_10002A3B0( (uint64_t)"Fatal error",  11LL,  2LL,  v66,  *((uint64_t *)&v66 + 1),  (uint64_t)"ASOctaneSupportXPCService/BaseSocketChannel.swift");
  __break(1u);
}

void sub_1000272AC()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType(v0);
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  723LL,  ObjectType,  &protocol witness table for SelectableEventLoop);
  swift_unknownObjectRelease(v1);
  uint64_t v3 = sub_1000262B8();
  uint64_t v5 = v4;
  __int16 v7 = v6;
  uint64_t v8 = swift_getObjectType(v3);
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  166LL,  v8,  v5);
  swift_release();
  swift_unknownObjectRelease(v3);
  if ((v7 & 0xFB00) != 0) {
    sub_100028188();
  }
}

void sub_10002737C()
{
  uint64_t v27 = v1;
  uint64_t v28 = v2;
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v24 = *v0;
  uint64_t v25 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v26 = v9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v9,  v5,  &protocol requirements base descriptor for ChannelOption,  &associated type descriptor for ChannelOption.Value);
  uint64_t v23 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v12 = (char *)&v22 - v11;
  sub_100025FF8();
  uint64_t v13 = sub_10002A340();
  char v14 = sub_10002A6AC(v13, (uint64_t)&protocol witness table for SelectableEventLoop);
  sub_10002A338();
  sub_10002A830();
  uint64_t v16 = v15;
  if ((v14 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*v0 + 712))(v25, v5, v26);
    swift_getObjectType(v16);
    sub_10002A730();
    EventLoop.makeSucceededFuture<A>(_:file:line:)();
    sub_10002A764();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v12, AssociatedTypeWitness);
  }

  else
  {
    uint64_t ObjectType = swift_getObjectType(v15);
    sub_10002A828( (uint64_t)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v25,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
    uint64_t v18 = *(unsigned __int8 *)(v7 + 80);
    uint64_t v19 = (v18 + 56) & ~v18;
    uint64_t v20 = (void *)swift_allocObject(&unk_100276A50, v19 + v8, v18 | 7);
    uint64_t v21 = sub_10002A6C4(v20);
    v21[6] = v3;
    sub_10002A828( (uint64_t)v21 + v19,  (uint64_t)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32));
    sub_10002A674();
    sub_1001384E0( sub_10002A0D8,  v20,  AssociatedTypeWitness,  ObjectType,  &protocol witness table for SelectableEventLoop);
    swift_release(v20);
    sub_10002A764();
  }

  sub_10002A580();
}

void sub_1000275B8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v53 = a3;
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = __chkstk_darwin(a1);
  uint64_t v9 = &v48[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v7);
  uint64_t v11 = &v48[-v10];
  sub_100025FF8();
  sub_10002A340();
  sub_10002A37C();
  EventLoop.assertInEventLoop(file:line:)(v12, v13, v14, 601LL, v15, v16);
  uint64_t v17 = sub_10002A338();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v3 + 584LL))(v17) & 1) == 0)
  {
    unint64_t v25 = sub_100029C98();
    uint64_t v26 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v25);
    sub_10002A3BC(v26, v27);
LABEL_12:
    sub_10001DAB8();
    return;
  }

  sub_10002A7DC((uint64_t)v11);
  uint64_t v19 = sub_10002A388((uint64_t)&v49, (uint64_t)v11, v18, (uint64_t)&type metadata for ChannelOptions.Types.SocketOption);
  if ((_DWORD)v19)
  {
    uint64_t v22 = v49;
    uint64_t v23 = HIDWORD(v49);
    uint64_t v24 = sub_10002A41C( v19,  v20,  v21,  (uint64_t)&protocol requirements base descriptor for ChannelOption,  (uint64_t)&associated type descriptor for ChannelOption.Value);
    sub_1001BC170(v22, v23, v24);
LABEL_11:
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v11, a2);
    goto LABEL_12;
  }

  uint64_t v28 = sub_10002A388(v19, (uint64_t)v11, v21, (uint64_t)&type metadata for ChannelOptions.Types.AllocatorOption);
  if ((_DWORD)v28)
  {
    uint64_t v49 = sub_100026394();
    uint64_t v50 = v30;
    uint64_t v51 = v31;
    uint64_t v52 = v32;
    uint64_t v33 = sub_10002A41C( v49,  v30,  v31,  (uint64_t)&protocol requirements base descriptor for ChannelOption,  (uint64_t)&associated type descriptor for ChannelOption.Value);
    uint64_t v34 = &type metadata for ByteBufferAllocator;
LABEL_7:
    uint64_t v35 = v53;
LABEL_10:
    swift_dynamicCast(v35, &v49, v34, v33, 7LL);
    goto LABEL_11;
  }

  uint64_t v36 = sub_10002A388(v28, (uint64_t)v11, v29, (uint64_t)&type metadata for ChannelOptions.Types.RecvAllocatorOption);
  if ((_DWORD)v36)
  {
    uint64_t v38 = v3 + *(void *)(*(void *)v3 + 168LL);
    sub_10002A718(v4 + *(void *)(*(void *)v4 + 168LL), (uint64_t)v48, 0LL);
    sub_100023BAC(v38, (uint64_t)&v49);
    uint64_t v39 = sub_1000175B0(qword_1002AA008);
    uint64_t v33 = sub_10002A41C( v39,  v40,  v41,  (uint64_t)&protocol requirements base descriptor for ChannelOption,  (uint64_t)&associated type descriptor for ChannelOption.Value);
    uint64_t v35 = v53;
    uint64_t v34 = (ValueMetadata *)v39;
    goto LABEL_10;
  }

  uint64_t v42 = sub_10002A388(v36, (uint64_t)v11, v37, (uint64_t)&type metadata for ChannelOptions.Types.AutoReadOption);
  if ((_DWORD)v42)
  {
    LOBYTE(v49) = *(_BYTE *)(v3 + *(void *)(*(void *)v3 + 192LL));
    uint64_t v33 = sub_10002A41C( v42,  v43,  v44,  (uint64_t)&protocol requirements base descriptor for ChannelOption,  (uint64_t)&associated type descriptor for ChannelOption.Value);
    uint64_t v34 = (ValueMetadata *)&type metadata for Bool;
    goto LABEL_7;
  }

  uint64_t v45 = sub_10002A388(v42, (uint64_t)v11, v44, (uint64_t)&type metadata for ChannelOptions.Types.MaxMessagesPerReadOption);
  if ((_DWORD)v45)
  {
    uint64_t v49 = *(void *)(v3 + *(void *)(*(void *)v3 + 176LL));
    uint64_t v33 = sub_10002A41C( v45,  v46,  v47,  (uint64_t)&protocol requirements base descriptor for ChannelOption,  (uint64_t)&associated type descriptor for ChannelOption.Value);
    uint64_t v34 = (ValueMetadata *)&type metadata for UInt;
    goto LABEL_7;
  }

  sub_10002A7DC((uint64_t)v9);
  sub_10002A5E8();
  sub_10002A4F4();
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v9, a2);
  sub_10002A48C();
  sub_10002A3B0( (uint64_t)"Fatal error",  11LL,  2LL,  v49,  v50,  (uint64_t)"ASOctaneSupportXPCService/BaseSocketChannel.swift");
  __break(1u);
}

void sub_1000278C8()
{
  uint64_t v7 = sub_10002A514();
  sub_10002A5DC(v7);
  uint64_t v8 = sub_10002A46C();
  sub_10002A65C(v8, v9, v10, 161LL, v11);
  sub_10002A524();
  sub_10002A338();
  if ((v1 & 0xFF00) == 0x300
    && (*(_BYTE *)(v0 + *(void *)(*(void *)v0 + 152LL)) & 1) == 0
    && *(_BYTE *)(v0 + *(void *)(*(void *)v0 + 192LL)) == 1)
  {
    sub_100026518();
    sub_10002A444();
    sub_10002A6F4();
    sub_10002A65C(v12, v13, v14, 1213LL, v15);
    if (sub_1000958F0())
    {
      sub_100095B10();
      sub_10002A51C();
    }

    sub_10002A51C();
  }

  sub_10002A3D4();
}

void sub_1000279C0()
{
  uint64_t v6 = sub_10002A534();
  if ((v6 & 1) != 0)
  {
    __chkstk_darwin(v6);
    sub_100026DF8(v0, sub_10002A058);
  }

  else if (v0)
  {
    unint64_t v7 = sub_100029C98();
    uint64_t v8 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v7);
    *uint64_t v9 = 2LL;
    sub_10002A554(v8, (uint64_t)v9);
    sub_10002A3E4();
    sub_10002A620();
    swift_errorRelease(v8);
    return;
  }

  sub_1000193B8();
}

uint64_t sub_100027A94(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)a1 + 88LL) + 48LL))( a2,  *(void *)(*(void *)a1 + 80LL));
  if (!v2) {
    return sub_100027AF4();
  }
  return result;
}

uint64_t sub_100027AF4()
{
  char v1 = v0;
  char v3 = v2;
  sub_100025FF8();
  sub_10002A340();
  sub_10002A37C();
  EventLoop.assertInEventLoop(file:line:)(v4, v5, v6, 1131LL, v7, v8);
  sub_10002A338();
  uint64_t v9 = sub_100025F44();
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  if ((v3 & 1) != 0)
  {
    sub_100026888();
    uint64_t v14 = v13;
    if ((v1 & 1) == 0) {
      goto LABEL_6;
    }
  }

  else
  {
    sub_100029DDC(v9);
    uint64_t v14 = v10;
    if ((v1 & 1) == 0)
    {
LABEL_6:
      sub_100029DDC(v12);
      uint64_t v16 = v12;
      goto LABEL_7;
    }
  }

  sub_100026910();
  uint64_t v16 = v15;
LABEL_7:
  sub_100029DDC(v14);
  sub_100029DDC(v16);
  sub_100026068(v14, v16);
  sub_100029DF4(v16);
  sub_100029DF4(v14);
  sub_100029DF4(v10);
  sub_10002A44C();
  return sub_100029DF4(v17);
}

uint64_t sub_100027C10()
{
  uint64_t result = sub_10002A534();
  if ((result & 1) == 0)
  {
    if (!v0) {
      return result;
    }
    unint64_t v13 = sub_100029C98();
    uint64_t v14 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v13);
    uint64_t v16 = v14;
    uint64_t v17 = 2LL;
    goto LABEL_8;
  }

  uint64_t v11 = sub_1000262B8();
  uint64_t v12 = sub_10002A63C(v11);
  sub_10002A52C( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  161LL,  v12);
  swift_release(v3);
  uint64_t result = sub_10002A338();
  if ((v4 & 0xFF00) == 0x300) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1 + 656LL))(v2, v0);
  }
  if (v0)
  {
    unint64_t v18 = sub_100029C98();
    uint64_t v14 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v18);
    uint64_t v16 = v14;
    uint64_t v17 = 12LL;
LABEL_8:
    *uint64_t v15 = v17;
    sub_10002A554(v14, (uint64_t)v15);
    sub_10002A3E4();
    sub_10002A620();
    return swift_errorRelease(v16);
  }

  return result;
}

void sub_100027D4C()
{
  if ((v5 & 8) != 0) {
    sub_10001945C();
  }
  else {
    sub_10002A484(v5 | 8);
  }
}

uint64_t sub_100027DA0(unsigned int a1, int a2)
{
  return a2 | a1;
}

uint64_t sub_100027DA8(uint64_t a1, uint64_t a2)
{
  return a2 | a1;
}

void sub_100027DB0(unsigned __int8 a1)
{
  uint64_t v2 = (uint64_t)v1;
  uint64_t v4 = *v1;
  sub_100025FF8();
  uint64_t v6 = v5;
  uint64_t ObjectType = swift_getObjectType(v5);
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  1202LL,  ObjectType,  &protocol witness table for SelectableEventLoop);
  uint64_t v8 = swift_unknownObjectRelease(v6);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v2 + 584LL))(v8) & 1) != 0)
  {
    uint64_t v10 = *(void *)(*(void *)v2 + 224LL);
    if (*(unsigned __int8 *)(v2 + v10) != a1)
    {
      *(_BYTE *)(v2 + v10) = a1;
      uint64_t v11 = type metadata accessor for BaseSocketChannel(0LL, *(void *)(v4 + 80), *(void *)(v4 + 88), v9);
      uint64_t WitnessTable = swift_getWitnessTable(byte_1001F4DA0, v11);
      sub_10003DE74(v2, v11, WitnessTable);
    }
  }

void sub_100027F30()
{
  if ((v5 & 8) != 0) {
    sub_10002A484(v5 & 0xF7);
  }
  else {
    sub_10001945C();
  }
}

void sub_100027F84()
{
  if ((sub_10002A544() & 1) == 0
    || ((*(void (**)(void))(*(void *)v0 + 664LL))(),
        uint64_t v7 = sub_1000262B8(),
        uint64_t v8 = sub_10002A4D0(v7),
        sub_10002A5C0( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseS ocketChannel.swift",  v9,  v10,  v11,  v8),  sub_10002A5A4(),  uint64_t v12 = sub_10002A338(),  (v1 & 0xFF00) != 0x300)
    || (*(_BYTE *)(v0 + *(void *)(*(void *)v0 + 224LL)) & 8) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v0 + 688LL))(v12) & 1) != 0)
  {
    sub_10002A3D4();
  }

  else
  {
    sub_100027D4C();
  }

void sub_100028044()
{
  if ((sub_10002A544() & 1) != 0
    && (*(_BYTE *)(v0 + *(void *)(*(void *)v0 + 152LL)) = 1,
        uint64_t v7 = sub_10002A514(),
        sub_10002A4D0(v7),
        sub_10002A4E4(),
        sub_10002A618(v8, v9, v10, v11, v12),
        sub_10002A5A4(),
        sub_10002A338(),
        (v1 & 0xFB00) != 0))
  {
    sub_1000280E8();
  }

  else
  {
    sub_10002A3D4();
  }

void sub_1000280E8()
{
  uint64_t v1 = v0;
  sub_100025FF8();
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType(v2);
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  731LL,  ObjectType,  &protocol witness table for SelectableEventLoop);
  swift_unknownObjectRelease(v3);
  uint64_t v5 = sub_1000262B8();
  char v7 = v6;
  swift_unknownObjectRelease(v5);
  swift_release();
  if ((v7 & 1) == 0 && (*(_BYTE *)(v1 + *(void *)(*(void *)v1 + 224LL)) & 4) == 0) {
    sub_100027DB0(*(_BYTE *)(v1 + *(void *)(*(void *)v1 + 224LL)) | 4);
  }
}

void sub_100028188()
{
  if ((v5 & 4) != 0) {
    sub_10002A484(v5 & 0xFB);
  }
  else {
    sub_10001945C();
  }
}

void sub_1000281DC()
{
  uint64_t v1 = v0;
  sub_100025FF8();
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType(v2);
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  747LL,  ObjectType,  &protocol witness table for SelectableEventLoop);
  swift_unknownObjectRelease(v3);
  uint64_t v5 = sub_1000262B8();
  uint64_t v7 = v6;
  char v9 = v8;
  swift_unknownObjectRelease(v5);
  swift_release(v7);
  if ((v9 & 1) == 0 && (*(_BYTE *)(v1 + *(void *)(*(void *)v1 + 224LL)) & 2) == 0) {
    sub_100027DB0(*(_BYTE *)(v1 + *(void *)(*(void *)v1 + 224LL)) | 2);
  }
}

uint64_t sub_10002827C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = *(void *)v3;
  sub_100025FF8();
  sub_10002A340();
  sub_10002A37C();
  EventLoop.assertInEventLoop(file:line:)(v7, v8, v9, 782LL, v10, v11);
  sub_10002A338();
  uint64_t result = sub_10002A544();
  if ((result & 1) == 0)
  {
    if (!a3) {
      return result;
    }
    unint64_t v18 = sub_100029C98();
    uint64_t v19 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v18);
    uint64_t v20 = v19;
    *(void *)uint64_t v21 = 3LL;
    *(_BYTE *)(v21 + _Block_object_dispose((const void *)(v1 - 136), 8) = 3;
    goto LABEL_8;
  }

  if (a2 == 2)
  {
    *(_BYTE *)(v3 + *(void *)(*(void *)v3 + 224LL)) = 1;
    uint64_t v14 = *(void *)(v6 + 80);
    uint64_t v15 = *(void *)(v6 + 88);
    uint64_t v16 = type metadata accessor for BaseSocketChannel(0LL, v14, v15, v13);
    uint64_t WitnessTable = swift_getWitnessTable(byte_1001F4DA0, v16);
    sub_10003D9CC(v3, 2LL, v16, WitnessTable);
    (*(void (**)(uint64_t, uint64_t))(v15 + 40))(v14, v15);
    sub_10002A674();
    uint64_t v24 = v3 + *(void *)(*(void *)v3 + 232LL);
    sub_10002A718(v24, (uint64_t)&v27, 33LL);
    uint64_t v25 = *(void *)(v24 + 8);
    uint64_t v26 = sub_10002A444();
    EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  91LL,  v26,  v25);
    __asm { BR              X10 }
  }

  if (a3)
  {
    unint64_t v22 = sub_100029C98();
    uint64_t v20 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v22);
    sub_10002A720(v23, 1LL);
LABEL_8:
    swift_errorRetain(v19);
    sub_100098A70(v20, 1LL, a3);
    swift_errorRelease(v20);
    return swift_errorRelease(v20);
  }

  return result;
}

void sub_10002873C(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = sub_10002A6DC();
  if (v8)
  {
    uint64_t v9 = v8;
    sub_10002A4C8();
    sub_10009663C(a2);
    sub_10001EDD8();
    sub_10002A598(v9);
  }

  else
  {
    sub_1000193B8();
  }

uint64_t sub_1000287A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    swift_errorRetain(a3);
    sub_10002A81C(a3);
    return sub_10002A5D4(a3);
  }

  return result;
}

uint64_t sub_1000287D8(void (**a1)(uint64_t *))
{
  uint64_t v1 = *a1;
  uint64_t v3 = sub_100026518();
  v1(&v3);
  return swift_release();
}

uint64_t sub_100028830(uint64_t *a1)
{
  uint64_t v2 = *a1;
  sub_100026518();
  type metadata accessor for BaseSocketChannel(0LL, *(void *)(v2 + 80), *(void *)(v2 + 88), v3);
  ChannelCore.removeHandlers(pipeline:)();
  swift_release();
  sub_100098A70(0LL, 0LL, *(uint64_t *)((char *)a1 + *(void *)(*a1 + 112)));
  return sub_1000288A4();
}

uint64_t sub_1000288A4()
{
  return sub_100026068(0xF000000000000007LL, 0xF000000000000007LL);
}

void sub_1000288F0(uint64_t a1)
{
  if ((sub_10002A534() & 1) == 0)
  {
    if (a1)
    {
      unint64_t v19 = sub_100029C98();
      uint64_t v17 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v19);
      uint64_t v18 = 2LL;
      goto LABEL_7;
    }

    goto LABEL_20;
  }

  uint64_t v9 = sub_1000262B8();
  sub_10002A5DC(v9);
  sub_10002A4E4();
  sub_10002A65C(v10, v11, v12, v13, v14);
  sub_10002A524();
  sub_10002A338();
  if ((v2 & 0xFB00) != 0)
  {
    if (a1)
    {
      unint64_t v15 = sub_100029C98();
      uint64_t v17 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v15);
      uint64_t v18 = 12LL;
LABEL_7:
      sub_10002A720(v16, v18);
LABEL_8:
      swift_errorRetain(v20);
      sub_10002A3E4();
      sub_10002A620();
      sub_10002A4B0(v17);
      return;
    }

    goto LABEL_20;
  }

  if (*(_BYTE *)(*(void *)(v1 + *(void *)(*(void *)v1 + 120LL)) + 88LL))
  {
    uint64_t v21 = sub_100026518();
    unint64_t v22 = sub_100029E1C();
    uint64_t v23 = sub_1000252D0((uint64_t)&type metadata for EventLoopError, v22);
    *uint64_t v24 = 2;
    uint64_t v25 = *(void *)(v21 + 56);
    sub_10002A444();
    sub_10002A700();
    EventLoop.assertInEventLoop(file:line:)(v26, v27, v28, v29, v30, v25);
    if (sub_100095918())
    {
      sub_10009663C(v23);
      sub_100024F0C();
    }

    swift_errorRelease(v23);
    sub_10002A524();
    uint64_t v31 = sub_1000252D0((uint64_t)&type metadata for EventLoopError, v22);
    _BYTE *v32 = 2;
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v1 + 760LL))(v31, 2LL, 0LL);
    swift_errorRelease(v31);
    if (a1)
    {
      uint64_t v20 = sub_1000252D0((uint64_t)&type metadata for EventLoopError, v22);
      uint64_t v17 = v20;
      *uint64_t v33 = 2;
      goto LABEL_8;
    }

    goto LABEL_20;
  }

  uint64_t v34 = v1 + *(void *)(*(void *)v1 + 232LL);
  sub_10002A718(v34, (uint64_t)v42, 1LL);
  uint64_t v35 = sub_10002A444();
  sub_10002A52C( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  91LL,  v35);
  if (!*(_BYTE *)(v34 + 25))
  {
    *(_BYTE *)(v34 + 25) = 1;
    sub_10002A52C( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  44LL,  v35);
    sub_10002626C();
    uint64_t v36 = sub_100026518();
    if (a1) {
      sub_100098A70(0LL, 0LL, a1);
    }
    uint64_t v37 = *(void *)(v36 + 56);
    sub_10002A444();
    sub_10002A6F4();
    EventLoop.assertInEventLoop(file:line:)(v38, v39, v40, 1125LL, v41, v37);
    if (sub_100095918())
    {
      sub_10002A7F4();
      sub_10009617C();
      sub_10002A780(v36);
    }

    swift_release(v36);
LABEL_20:
    sub_10002A568();
    return;
  }

  __break(1u);
}

uint64_t sub_100028BB8()
{
  uint64_t v10 = EventLoop.makePromise<A>(of:file:line:)( v5,  v6,  v7,  v8,  884LL,  v9,  v5,  (uint64_t)&protocol witness table for SelectableEventLoop);
  sub_10002A338();
  uint64_t v11 = sub_10002A75C();
  sub_1000288F0(v11);
  sub_10002A524();
  swift_retain_n(v10, 3LL);
  sub_10002A7E8();
  sub_1000FEE04();
  sub_10001EDD8();
  sub_10002A780(v10);
  sub_10002A75C();
  sub_100028DB0(v0);
  sub_10002A524();
  uint64_t v12 = sub_10002A514();
  uint64_t v14 = v13;
  unsigned int v16 = v15;
  __int16 v18 = v17;
  swift_getObjectType(v12);
  uint64_t v19 = sub_10002A46C();
  EventLoop.assertInEventLoop(file:line:)(v19, v20, v21, 166LL, v22, v14);
  sub_10002A7BC();
  sub_10002A338();
  if ((v18 & 0xFB00) == 0)
  {
LABEL_7:
    sub_10002A44C();
    return swift_release(v31);
  }

  sub_10002A800();
  if (!"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift")
  {
    uint64_t v23 = sub_10002A514();
    uint64_t v24 = sub_10002A628(v23);
    sub_10002A5AC( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  v25,  v26,  v27,  v24);
    if (v16 <= 4)
    {
      sub_10002A79C();
      if (!v28)
      {
        sub_10002A524();
        sub_10002A51C();
        sub_10002A44C();
        return swift_unknownObjectRelease(v29);
      }
    }

    sub_10002A51C();
    sub_10002A338();
    sub_100028F08();
    goto LABEL_7;
  }

  uint64_t result = swift_unexpectedError( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  "ASOctaneSupportXPCService/BaseSocketChannel.swift",  49LL,  1LL,  895LL);
  __break(1u);
  return result;
}

uint64_t sub_100028D6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = type metadata accessor for BaseSocketChannel( 0LL,  *(void *)(*(void *)a2 + 80LL),  *(void *)(*(void *)a2 + 88LL),  a4);
  return Channel.close(mode:promise:)(2LL, 0LL, v4, (uint64_t)&off_1002768E8);
}

void sub_100028DB0(uint64_t a1)
{
  if (a1)
  {
    ChannelPipeline.syncOperations.getter();
    sub_10002A7E8();
    sub_1000FEE04();
    swift_release(a1);
  }

  else
  {
    sub_10001945C();
  }

void sub_100028DFC()
{
  if (!v1)
  {
    uint64_t v7 = v0 + *(void *)(*(void *)v0 + 232LL);
    sub_10002A718(v7, (uint64_t)v9, 1LL);
    swift_getObjectType(*(void *)v7);
    sub_10002A7D0( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  91LL);
    if (*(_BYTE *)(v7 + 25) == 1)
    {
      *(_BYTE *)(v7 + 25) = 2;
      sub_10002A7D0( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSoc ketChannel.swift",  119LL,  2LL,  44LL);
      sub_10002626C();
      uint64_t v8 = sub_100026518();
      swift_release(v8);
    }

    else
    {
      __break(1u);
    }
  }

void sub_100028F08()
{
  uint64_t v9 = sub_10002A514();
  uint64_t v10 = sub_10002A628(v9);
  sub_10002A5AC( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  v11,  v12,  v13,  v10);
  if (v3 > 4 || (sub_10002A79C(), v14))
  {
    sub_10002A51C();
    sub_10002A338();
  }

  else
  {
    sub_10002A51C();
    sub_10002A338();
    sub_10002A800();
    if (v1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v0 + 760LL))(v1, 2LL, v2);
      sub_10002A4B0(v1);
      return;
    }
  }

  uint64_t v15 = v0 + *(void *)(*(void *)v0 + 232LL);
  sub_10002A718(v15, (uint64_t)v26, 33LL);
  uint64_t v16 = *(void *)(v15 + 8);
  uint64_t v17 = sub_10002A444();
  sub_10002A52C( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  91LL,  v17);
  if (*(_BYTE *)(v15 + 25) == 2)
  {
    *(_BYTE *)(v15 + 25) = 3;
    sub_10002A52C( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  44LL,  v17);
    uint64_t v18 = *(void *)(v15 + 16);
    ChannelPipeline.syncOperations.getter();
    sub_100006CF0((_BYTE *)(v18 + 16), 1);
    swift_endAccess(v26);
    sub_100024F0C();
    sub_10002626C();
    uint64_t v19 = sub_100026518();
    if (v2) {
      sub_100098A70(0LL, 0LL, v2);
    }
    sub_10002A444();
    sub_10002A6F4();
    sub_10002A65C(v20, v21, v22, 1149LL, v23);
    if (sub_100095918())
    {
      sub_10002A7F4();
      sub_100096320();
      sub_10002A780(v19);
    }

    sub_10002A51C();
    uint64_t v24 = sub_10002A514();
    uint64_t v25 = sub_10002A4D0(v24);
    sub_10002A618( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  188LL,  v25);
    sub_10002A5A4();
    sub_10002A338();
    if ((v16 & 0xFF00) != 0x400)
    {
      sub_1000281DC();
      (*(void (**)(void))(*(void *)v0 + 720LL))();
    }

    sub_10002A568();
  }

  else
  {
    __break(1u);
  }

void sub_100029110(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = sub_100029C98();
    uint64_t v3 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v2);
    void *v4 = 1LL;
    sub_10002A554(v3, (uint64_t)v4);
    sub_10002A3E4();
    sub_10002A620();
    sub_10002A5D4(v3);
  }

void sub_100029160()
{
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  sub_100025FF8();
  sub_10002A340();
  sub_10002A37C();
  EventLoop.assertInEventLoop(file:line:)(v7, v8, v9, 1145LL, v10, v11);
  uint64_t v12 = sub_10002A338();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v0 + 584LL))(v12) & 1) == 0)
  {
    if (v4)
    {
      unint64_t v17 = sub_100029C98();
      uint64_t v15 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v17);
      uint64_t v18 = 2LL;
LABEL_7:
      uint64_t *v16 = v18;
      goto LABEL_8;
    }

uint64_t sub_1000293D4()
{
  return (*(unsigned __int8 *)(v0 + *(void *)(*(void *)v0 + 224LL)) >> 3) & 1;
}

void sub_1000293E8(char a1)
{
  uint64_t v4 = *(void *)v1;
  sub_100025FF8();
  sub_10002A340();
  sub_10002A37C();
  EventLoop.assertInEventLoop(file:line:)(v5, v6, v7, 1223LL, v8, v9);
  uint64_t v10 = sub_10002A338();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 584LL))(v10) & 1) != 0)
  {
    *(_BYTE *)(v1 + *(void *)(*(void *)v1 + 224LL)) = a1;
    uint64_t v12 = type metadata accessor for BaseSocketChannel(0LL, *(void *)(v4 + 80), *(void *)(v4 + 88), v11);
    uint64_t WitnessTable = swift_getWitnessTable(byte_1001F4DA0, v12);
    sub_10003DEBC(v1, v12, WitnessTable);
    if (!v2) {
      return;
    }
    uint64_t v14 = sub_100026518();
    uint64_t v15 = *(void *)(v14 + 56);
    swift_getObjectType(*(void *)(v14 + 48));
    sub_10002A700();
    EventLoop.assertInEventLoop(file:line:)(v16, v17, v18, v19, v20, v15);
    uint64_t v21 = sub_100095918();
    if (v21)
    {
      uint64_t v22 = v21;
      sub_10009663C(v2);
      swift_release(v14);
      uint64_t v14 = v22;
    }

    swift_release(v14);
    uint64_t v23 = sub_10002A5FC();
    uint64_t v25 = v24(v23);
  }

  else
  {
    unint64_t v26 = sub_100029C98();
    sub_1000252D0((uint64_t)&type metadata for ChannelError, v26);
    sub_10002A720(v27, 2LL);
  }

  swift_willThrow(v25);
}

void sub_100029548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_100029578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_1000295A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

uint64_t destroy for SocketChannelLifecycleManager(void *a1)
{
  return swift_release(a1[2]);
}

uint64_t initializeWithCopy for SocketChannelLifecycleManager(uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  *(_OWORD *)a1 = *a2;
  uint64_t v4 = *((void *)a2 + 2);
  *(void *)(a1 + 16) = v4;
  *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
  swift_unknownObjectRetain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for SocketChannelLifecycleManager(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v6);
  a1[1] = v5;
  uint64_t v7 = a2[2];
  uint64_t v8 = a1[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v8);
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  *((_BYTE *)a1 + 25) = *((_BYTE *)a2 + 25);
  return a1;
}

__n128 initializeWithTake for SocketChannelLifecycleManager(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SocketChannelLifecycleManager(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release(v4);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  return a1;
}

uint64_t getEnumTagSinglePayload for SocketChannelLifecycleManager(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 26))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SocketChannelLifecycleManager(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_WORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 26) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 26) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SocketChannelLifecycleManager()
{
  return &type metadata for SocketChannelLifecycleManager;
}

uint64_t sub_1000297B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24LL);
}

void *sub_1000297C0(void *result)
{
  uint64_t v1 = result;
  if ((~*result & 0xF000000000000007LL) != 0) {
    __n128 result = (void *)swift_release(*result & 0x3FFFFFFFFFFFFFFFLL);
  }
  uint64_t v2 = v1[1];
  if ((~v2 & 0xF000000000000007LL) != 0) {
    return (void *)swift_release(v2 & 0x3FFFFFFFFFFFFFFFLL);
  }
  return result;
}

void *sub_100029810(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if ((~*a2 & 0xF000000000000007LL) != 0) {
    swift_retain(v4 & 0x3FFFFFFFFFFFFFFFLL);
  }
  *a1 = v4;
  uint64_t v5 = a2[1];
  if ((~v5 & 0xF000000000000007LL) != 0) {
    swift_retain(v5 & 0x3FFFFFFFFFFFFFFFLL);
  }
  a1[1] = v5;
  return a1;
}

uint64_t *sub_100029870(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  unint64_t v6 = *a2 & 0xF000000000000007LL;
  if ((~*a1 & 0xF000000000000007LL) == 0)
  {
    if (v6 != 0xF000000000000007LL)
    {
      *a1 = v5;
      swift_retain();
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v6 == 0xF000000000000007LL)
  {
    sub_100029968(a1);
    uint64_t v5 = *a2;
LABEL_6:
    *a1 = v5;
    goto LABEL_8;
  }

  *a1 = v5;
  uint64_t v7 = v4 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  swift_release(v7);
LABEL_8:
  uint64_t v9 = a1 + 1;
  uint64_t v8 = a1[1];
  uint64_t v10 = a2[1];
  unint64_t v11 = v10 & 0xF000000000000007LL;
  if ((~v8 & 0xF000000000000007LL) != 0)
  {
    if (v11 != 0xF000000000000007LL)
    {
      *uint64_t v9 = v10;
      uint64_t v12 = v8 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      swift_release(v12);
      return a1;
    }

    sub_100029968(a1 + 1);
    uint64_t v10 = a2[1];
    goto LABEL_13;
  }

  if (v11 == 0xF000000000000007LL)
  {
LABEL_13:
    *uint64_t v9 = v10;
    return a1;
  }

  *uint64_t v9 = v10;
  swift_retain();
  return a1;
}

void *sub_100029968(void *a1)
{
  return a1;
}

uint64_t *sub_10002999C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  if ((~*a1 & 0xF000000000000007LL) == 0) {
    goto LABEL_4;
  }
  if ((~v5 & 0xF000000000000007LL) == 0)
  {
    sub_100029968(a1);
LABEL_4:
    *a1 = v5;
    goto LABEL_6;
  }

  *a1 = v5;
  swift_release(v4 & 0x3FFFFFFFFFFFFFFFLL);
LABEL_6:
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  uint64_t v8 = a2[1];
  if ((~v6 & 0xF000000000000007LL) != 0)
  {
    if ((~v8 & 0xF000000000000007LL) != 0)
    {
      void *v7 = v8;
      swift_release(v6 & 0x3FFFFFFFFFFFFFFFLL);
      return a1;
    }

    sub_100029968(a1 + 1);
  }

  void *v7 = v8;
  return a1;
}

uint64_t sub_100029A3C(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7D && *(_BYTE *)(a1 + 16))
    {
      int v2 = *(_DWORD *)a1 + 124;
    }

    else
    {
      int v3 = ((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7));
      unsigned int v4 = v3 ^ 0x7F;
      int v2 = 126 - v3;
      if (v4 >= 0x7D) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_100029A98(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(void *)__n128 result = a2 - 125;
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
    if (a3 >= 0x7D) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7D) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)__n128 result = ((32 * (a2 ^ 0x7F)) | ((a2 ^ 0x7F) >> 2) | ((unint64_t)((32 * (a2 ^ 0x7F)) | ((a2 ^ 0x7F) >> 2)) << 57)) & 0xF000000000000007LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for BaseSocketChannel.AddressCache( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BaseSocketChannel.AddressCache);
}

uint64_t sub_100029AF8()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 840LL))();
}

uint64_t sub_100029B14()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 848LL))();
}

uint64_t sub_100029B30()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 856LL))();
}

void sub_100029B4C()
{
}

void sub_100029B60()
{
}

uint64_t sub_100029B7C()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 728LL))();
}

uint64_t sub_100029B94()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 752LL))();
}

uint64_t sub_100029BA0()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 760LL))();
}

void sub_100029BAC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100029BC0()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 808LL))();
}

uint64_t sub_100029BE0()
{
  return swift_unknownObjectRetain(*(void *)(v0 + 16));
}

uint64_t sub_100029C0C()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608LL))();
}

void sub_100029C1C()
{
}

uint64_t sub_100029C3C@<X0>(uint64_t a1@<X3>, void *a2@<X8>)
{
  a2[3] = type metadata accessor for BaseSocketChannel.SynchronousOptions( 0LL,  *(void *)(*(void *)v2 + 80LL),  *(void *)(*(void *)v2 + 88LL),  a1);
  a2[4] = &off_100276AF8;
  *a2 = v2;
  return swift_retain();
}

uint64_t sub_100029C7C(uint64_t a1, uint64_t a2)
{
  return swift_getAssociatedConformanceWitness( *(void *)(a2 + 88),  *(void *)(a2 + 80),  a1,  &unk_10022FA50,  &unk_10022FA60);
}

unint64_t sub_100029C98()
{
  unint64_t result = qword_1002A9FF8;
  if (!qword_1002A9FF8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ChannelError, &type metadata for ChannelError);
    atomic_store(result, (unint64_t *)&qword_1002A9FF8);
  }

  return result;
}

void sub_100029CD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void sub_100029D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void sub_100029D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void sub_100029D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

BOOL sub_100029D6C(uint64_t a1, uint64_t a2)
{
  return (a2 & ~a1) == 0;
}

BOOL sub_100029D78(char a1, unsigned __int8 a2)
{
  return (a2 & ~a1) == 0;
}

BOOL sub_100029D88(uint64_t a1, uint64_t a2)
{
  return (a1 & ~a2) == 0;
}

BOOL sub_100029D94(unsigned __int8 a1, char a2)
{
  return (a1 & ~a2) == 0;
}

uint64_t sub_100029DA4(uint64_t a1, uint64_t a2)
{
  return swift_errorRelease(a1);
}

uint64_t sub_100029DDC(uint64_t result)
{
  if ((~result & 0xF000000000000007LL) != 0) {
    return swift_retain(result & 0x3FFFFFFFFFFFFFFFLL);
  }
  return result;
}

uint64_t sub_100029DF4(uint64_t result)
{
  if ((~result & 0xF000000000000007LL) != 0) {
    return swift_release(result & 0x3FFFFFFFFFFFFFFFLL);
  }
  return result;
}

uint64_t sub_100029E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100028D6C(a1, v4, a3, a4);
}

uint64_t sub_100029E14(uint64_t a1)
{
  return sub_100029DA4(a1, v1);
}

unint64_t sub_100029E1C()
{
  unint64_t result = qword_1002AA000;
  if (!qword_1002AA000)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EventLoopError,  &type metadata for EventLoopError);
    atomic_store(result, (unint64_t *)&qword_1002AA000);
  }

  return result;
}

uint64_t type metadata accessor for BaseSocketChannel.SynchronousOptions( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BaseSocketChannel.SynchronousOptions);
}

uint64_t sub_100029E64()
{
  uint64_t v1 = *(void *)(*((void *)v0 + 3) - 8LL);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 56) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *((void *)v0 + 5),  *((void *)v0 + 3),  &protocol requirements base descriptor for ChannelOption,  &associated type descriptor for ChannelOption.Value);
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v4 + v7) & ~v7;
  uint64_t v9 = v8 + *(void *)(v6 + 64);
  uint64_t v10 = v2 | v7 | 7;
  swift_release(*((void *)v0 + 6));
  sub_10002A788((uint64_t)&v0[v3], *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  (*(void (**)(char *, uint64_t))(v6 + 8))(&v0[v8], AssociatedTypeWitness);
  return swift_deallocObject(v0, v9, v10);
}

uint64_t sub_100029F28()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v1 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 56LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(swift_getAssociatedTypeWitness( 0LL,  v2,  v1,  &protocol requirements base descriptor for ChannelOption,  &associated type descriptor for ChannelOption.Value)
                                      - 8)
                          + 80LL);
  return (*(uint64_t (**)(unint64_t, unint64_t, uint64_t, uint64_t))(**(void **)(v0 + 48) + 696LL))( v0 + v4,  v0 + ((v5 + v6) & ~v6),  v1,  v2);
}

void sub_100029FCC()
{
}

uint64_t sub_100029FF0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10002A014(uint64_t a1)
{
}

uint64_t sub_10002A01C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10002A048(uint64_t a1)
{
  return sub_1000287A0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10002A050()
{
  return sub_100028830(v0);
}

uint64_t sub_10002A058()
{
  return sub_100027A94(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10002A070()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) - 8LL);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 56) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release(*(void *)(v0 + 48));
  sub_10002A788(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  return swift_deallocObject(v0, v4, v5);
}

void sub_10002A0D8()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8LL) + 80LL);
  (*(void (**)(uint64_t))(**(void **)(v0 + 48) + 712LL))(v0 + ((v1 + 56) & ~v1));
  sub_10002A814();
}

uint64_t sub_10002A118(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

__n128 sub_10002A130@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = v1 + *(void *)(*(void *)v1 + 216LL);
  __n128 result = *(__n128 *)v2;
  __int128 v4 = *(_OWORD *)(v2 + 16);
  *a1 = *(_OWORD *)v2;
  a1[1] = v4;
  return result;
}

uint64_t sub_10002A148@<X0>(uint64_t *a1@<X8>)
{
  return sub_100026028(v1, a1);
}

uint64_t sub_10002A160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  id v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t getEnumTagSinglePayload for SelectableEventLoop.ExternalState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for SocketChannelLifecycleManager.State( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = 1;
  }
  else {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10002A260 + 4 * byte_1001F4BE5[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10002A294 + 4 * byte_1001F4BE0[v4]))();
}

uint64_t sub_10002A294(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002A29C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10002A2A4LL);
  }
  return result;
}

uint64_t sub_10002A2B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10002A2B8LL);
  }
  *(_BYTE *)__n128 result = a2 + 4;
  return result;
}

uint64_t sub_10002A2BC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002A2C4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SocketChannelLifecycleManager.State()
{
  return &type metadata for SocketChannelLifecycleManager.State;
}

unint64_t sub_10002A2E4()
{
  unint64_t result = qword_1002AA090[0];
  if (!qword_1002AA090[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F4E48, &type metadata for SocketChannelLifecycleManager.State);
    atomic_store(result, qword_1002AA090);
  }

  return result;
}

uint64_t sub_10002A338()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_10002A340()
{
  return swift_getObjectType();
}

uint64_t sub_10002A348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return _assertionFailure(_:_:file:line:flags:)( a1,  11LL,  2LL,  0x65766F207473756DLL,  0xED00006564697272LL,  a6,  49LL,  2LL);
}

  ;
}

uint64_t sub_10002A388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, v4, a4, 0LL);
}

uint64_t sub_10002A394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11LL, 2LL, 0xD000000000000024LL, a5, a6, 49LL, 2LL);
}

uint64_t sub_10002A3B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, a2, a3, a4, a5, a6, 49LL, 2LL);
}

uint64_t sub_10002A3BC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = 2LL;
  *(_BYTE *)(a2 + _Block_object_dispose((const void *)(v1 - 136), 8) = 3;
  return swift_willThrow();
}

  ;
}

uint64_t sub_10002A3E4()
{
  return sub_100098A70(v1, 1LL, v0);
}

uint64_t sub_10002A3F4()
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16))(v1, *(void *)(v3 - 192), v0);
}

uint64_t sub_10002A408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v6 - 120, v5, v4, a4, 7LL);
}

uint64_t sub_10002A41C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return swift_getAssociatedTypeWitness(0LL, v6, v5, a4, a5);
}

uint64_t sub_10002A42C(uint64_t a1)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, 119LL, 2LL, 44LL, v2, v1);
}

uint64_t sub_10002A444()
{
  return swift_getObjectType(v0);
}

  ;
}

void sub_10002A464()
{
}

uint64_t sub_10002A46C()
{
  return v0;
}

uint64_t sub_10002A47C()
{
  return swift_errorRelease(v0);
}

void sub_10002A484(unsigned __int8 a1)
{
}

void sub_10002A48C()
{
  v0._countAndFlagsBits = 0x70757320746F6E20LL;
  v0._object = (void *)0xEE00646574726F70LL;
  String.append(_:)(v0);
}

uint64_t sub_10002A4B0(uint64_t a1)
{
  return swift_errorRelease(a1);
}

uint64_t sub_10002A4C8()
{
  return swift_retain(v0);
}

uint64_t sub_10002A4D0(uint64_t a1)
{
  return swift_getObjectType(a1);
}

  ;
}

void sub_10002A4F4()
{
  uint64_t v1 = *(void *)(v0 - 112);
  *(void *)(v0 - 120) = *(void *)(v0 - 120);
  *(void *)(v0 - 112) = v1;
  v2._countAndFlagsBits = 0x206E6F6974706FLL;
  v2._object = (void *)0xE700000000000000LL;
  String.append(_:)(v2);
}

uint64_t sub_10002A514()
{
  return sub_1000262B8();
}

uint64_t sub_10002A51C()
{
  return swift_release(v0);
}

uint64_t sub_10002A524()
{
  return swift_release(v0);
}

uint64_t sub_10002A52C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, a2, a3, a4, a5, v5);
}

uint64_t sub_10002A534()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584LL))();
}

uint64_t sub_10002A544()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584LL))();
}

uint64_t sub_10002A554(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + _Block_object_dispose((const void *)(v1 - 136), 8) = 3;
  return swift_errorRetain();
}

uint64_t sub_10002A560@<X0>(uint64_t a1@<X8>)
{
  return swift_release(*(void *)(v1 + a1));
}

  ;
}

  ;
}

uint64_t sub_10002A598(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_10002A5A4()
{
  return swift_release(v0);
}

uint64_t sub_10002A5AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, 119LL, 2LL, 176LL, a5, v5);
}

uint64_t sub_10002A5C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, 119LL, 2LL, 161LL, a5, v5);
}

uint64_t sub_10002A5D4(uint64_t a1)
{
  return swift_errorRelease(a1);
}

uint64_t sub_10002A5DC(uint64_t a1)
{
  return swift_getObjectType(a1);
}

void sub_10002A5E8()
{
  *(void *)(v0 - 120) = 0LL;
  *(void *)(v0 - 112) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(23LL);
}

uint64_t sub_10002A5FC()
{
  return v0;
}

uint64_t sub_10002A618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, a2, a3, a4, a5, v5);
}

uint64_t sub_10002A620()
{
  return swift_errorRelease(v0);
}

uint64_t sub_10002A628(uint64_t a1)
{
  return swift_getObjectType(a1);
}

uint64_t sub_10002A63C(uint64_t a1)
{
  return swift_getObjectType(a1);
}

void sub_10002A650()
{
}

uint64_t sub_10002A65C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, a2, a3, a4, a5, v5);
}

void sub_10002A664()
{
}

uint64_t sub_10002A674()
{
  return swift_retain(v0);
}

uint64_t sub_10002A67C()
{
  return v1(v2, v3, v0);
}

void sub_10002A68C()
{
}

  ;
}

uint64_t sub_10002A6AC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

void sub_10002A6B4()
{
}

void *sub_10002A6C4(void *result)
{
  result[2] = *(void *)(v1 + 80);
  result[3] = v2;
  uint64_t v4 = *(void *)(v3 - 96);
  result[4] = *(void *)(v1 + 88);
  result[5] = v4;
  return result;
}

uint64_t sub_10002A6DC()
{
  return sub_100095918();
}

uint64_t sub_10002A6E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, a2, a3, a4, v5, v4);
}

  ;
}

  ;
}

uint64_t sub_10002A710()
{
  return swift_errorRetain(v0);
}

uint64_t sub_10002A718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_beginAccess(a1, a2, a3, 0LL);
}

void sub_10002A720(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a1 = a2;
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = 3;
}

  ;
}

uint64_t sub_10002A73C(uint64_t a1)
{
  return sub_100098A70(0LL, 0LL, a1);
}

uint64_t sub_10002A74C()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584LL))();
}

uint64_t sub_10002A75C()
{
  return swift_retain(v0);
}

uint64_t sub_10002A764()
{
  return swift_unknownObjectRelease(v0);
}

  ;
}

uint64_t sub_10002A780(uint64_t a1)
{
  return swift_release_n(a1, 2LL);
}

uint64_t sub_10002A788@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_10002A790(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

  ;
}

void sub_10002A7B0()
{
}

uint64_t sub_10002A7BC()
{
  return swift_release(v0);
}

  ;
}

uint64_t sub_10002A7D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, a2, a3, a4, v5, v4);
}

uint64_t sub_10002A7DC(uint64_t a1)
{
  return v2(a1, v3, v1);
}

uint64_t sub_10002A7E8()
{
  return swift_retain_n(v0, 2LL);
}

uint64_t sub_10002A7F4()
{
  return swift_retain(v0);
}

void sub_10002A800()
{
}

void sub_10002A80C()
{
}

  ;
}

uint64_t sub_10002A81C(uint64_t a1)
{
  return sub_100098A70(a1, 1LL, v1);
}

uint64_t sub_10002A828@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

void sub_10002A830()
{
}

uint64_t sub_10002A838()
{
  return *(void *)(v0 + 80);
}

uint64_t PriorityQueue._heap.setter()
{
  uint64_t result = sub_10002ACE0();
  *uint64_t v1 = v0;
  return result;
}

uint64_t (*_UInt24._backing.modify())()
{
  return debugOnly(_:);
}

uint64_t PriorityQueue.remove(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = sub_10002ACCC(a1, a2, a3, a4);
  return Heap.remove(value:)(v4, v5);
}

void PriorityQueue.push(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t PriorityQueue.peek()()
{
  uint64_t v0 = sub_10002ACEC();
  uint64_t WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for ContiguousArray<A>, v0);
  return Collection.first.getter(v0, WitnessTable);
}

uint64_t PriorityQueue.isEmpty.getter()
{
  uint64_t v0 = sub_10002ACEC();
  uint64_t WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for ContiguousArray<A>, v0);
  return Collection.isEmpty.getter(v0, WitnessTable) & 1;
}

uint64_t PriorityQueue.pop()(uint64_t a1)
{
  return sub_10002AAA4( a1,  (uint64_t (*)(void, void, void))type metadata accessor for Heap,  (uint64_t (*)(uint64_t))Heap.removeRoot());
}

Swift::Void __swiftcall PriorityQueue.clear()()
{
  void *v2 = v1;
}

uint64_t static PriorityQueue.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = Heap.count.getter(a1, a3, a4);
  if (v8 == Heap.count.getter(a2, a3, a4))
  {
    uint64_t v14 = a2;
    uint64_t v10 = type metadata accessor for PriorityQueue(0LL, a3, a4, v9);
    uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for PriorityQueue<A>, v10, v14, a1);
    char v12 = Sequence<>.elementsEqual<A>(_:)(&v14, v10, v10, WitnessTable, WitnessTable, *(void *)(a4 + 8));
  }

  else
  {
    char v12 = 0;
  }

  return v12 & 1;
}

uint64_t type metadata accessor for PriorityQueue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PriorityQueue);
}

uint64_t sub_10002AA7C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static PriorityQueue.== infix(_:_:)(*a1, *a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t PriorityQueue.Iterator.next()(uint64_t a1)
{
  return sub_10002AAA4( a1,  (uint64_t (*)(void, void, void))type metadata accessor for PriorityQueue,  PriorityQueue.pop());
}

uint64_t sub_10002AAA4( uint64_t a1, uint64_t (*a2)(void, void, void), uint64_t (*a3)(uint64_t))
{
  uint64_t v3 = a2(0LL, *(void *)(a1 + 16), *(void *)(a1 + 24));
  return a3(v3);
}

uint64_t sub_10002AAE8@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = Scheduled._promise.getter(v3);
  uint64_t result = swift_release(v4);
  *a1 = v3;
  return result;
}

uint64_t sub_10002AB24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)(a1, a2, a4, a3);
}

uint64_t PriorityQueue.description.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = 0LL;
  unint64_t v17 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(28LL);
  v6._object = (void *)0x8000000100218C00LL;
  v6._countAndFlagsBits = 0xD000000000000015LL;
  String.append(_:)(v6);
  Heap.count.getter(a1, a2, a3);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 2112041LL;
  v8._object = (void *)0xE300000000000000LL;
  String.append(_:)(v8);
  uint64_t v15 = a1;
  uint64_t v10 = type metadata accessor for PriorityQueue(0LL, a2, a3, v9);
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for PriorityQueue<A>, v10);
  uint64_t v15 = Array.init<A>(_:)(&v15, a2, v10, WitnessTable);
  uint64_t v12 = type metadata accessor for Array(0LL, a2);
  uint64_t v13 = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v12);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(&v15, v12, v13);
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_10002AC9C(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for PriorityQueue<A>.Iterator, a1);
}

uint64_t sub_10002ACAC(uint64_t a1)
{
  return PriorityQueue.description.getter(*v1, *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t type metadata accessor for PriorityQueue.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PriorityQueue.Iterator);
}

uint64_t sub_10002ACCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for Heap(0LL, *(void *)(a2 + 16), *(void *)(a2 + 24), a4);
}

uint64_t sub_10002ACE0()
{
  return swift_release(*v0);
}

uint64_t sub_10002ACEC()
{
  return type metadata accessor for ContiguousArray(0LL);
}

unint64_t sub_10002ACF8(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000LL) != 0) {
    unint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v5 = 4 * v4;
  uint64_t v6 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000LL) == 0) {
    LOBYTE(EventLoop.assertInEventLoop(file:line:)(v2, v3, v4, 1241LL, v5, v6) = 1;
  }
  uint64_t v7 = 4LL << v6;
  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v13 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  unint64_t v8 = 15LL;
  while (1)
  {
    unint64_t v9 = v8 >> 14;
    if (v8 >> 14 == v5) {
      return v9 != v5;
    }
    unint64_t result = v8;
    if ((v8 & 0xC) == v7) {
      unint64_t result = sub_10003560C();
    }
    unint64_t v11 = result >> 16;
    if (result >> 16 >= v4) {
      break;
    }
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v12 = result;
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      v14[0] = a1;
      v14[1] = v15;
      char v12 = *((_BYTE *)v14 + v11);
    }

    else
    {
      unint64_t result = v13;
      if ((a1 & 0x1000000000000000LL) == 0) {
        unint64_t result = _StringObject.sharedUTF8.getter(a1);
      }
      char v12 = *(_BYTE *)(result + v11);
    }

    if ((v8 & 0xC) == v7)
    {
      unint64_t result = sub_10003560C();
      unint64_t v8 = result;
      if ((a2 & 0x1000000000000000LL) == 0) {
        goto LABEL_19;
      }
LABEL_23:
      if (v4 <= v8 >> 16) {
        goto LABEL_27;
      }
      unint64_t v8 = String.UTF8View._foreignIndex(after:)(v8, a1, a2);
      if (v12 < 0) {
        return v9 != v5;
      }
    }

    else
    {
      if ((a2 & 0x1000000000000000LL) != 0) {
        goto LABEL_23;
      }
LABEL_19:
      unint64_t v8 = (v8 & 0xFFFFFFFFFFFF0000LL) + 65540;
      if (v12 < 0) {
        return v9 != v5;
      }
    }
  }

  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void HTTPServerPipelineHandler.__allocating_init()()
{
}

void HTTPServerPipelineHandler.init()()
{
  *(_WORD *)(v0 + 16) = 2;
  sub_10002B0A0(0LL);
  *(void *)(v0 + 24) = v1;
  *(void *)(v0 + 32) = v2;
  *(void *)(v0 + 40) = v3;
  *(_WORD *)(v0 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = 512;
  *(_BYTE *)(v0 + 50) = 2;
  sub_10001945C();
}

void sub_10002AED0(unint64_t a1)
{
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    sub_100034FD0();
    sub_100035154();
  }

  else
  {
    if (!HIDWORD(a1))
    {
      unsigned int v1 = sub_1000E764C(a1);
      memset(v9, 0, sizeof(v9));
      uint64_t v10 = 1LL;
      sub_10002DC08(v9, v1);
      sub_1000352C0();
      return;
    }

    sub_100034FD0();
    sub_100035144();
  }

  sub_100035124(v2, v3, v4, v5, v6, v7, v8);
  __break(1u);
}

void sub_10002AF70(unint64_t a1)
{
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    sub_100034FD0();
    sub_100035154();
  }

  else
  {
    if (!HIDWORD(a1))
    {
      unsigned int v1 = sub_1000E764C(a1);
      uint64_t v10 = 0LL;
      memset(v9, 0, sizeof(v9));
      char v11 = -1;
      sub_10002DCA8(v9, v1);
      sub_1000352C0();
      sub_1000356CC();
      return;
    }

    sub_100034FD0();
    sub_100035144();
  }

  sub_100035124(v2, v3, v4, v5, v6, v7, v8);
  __break(1u);
}

void sub_10002B010(unint64_t a1)
{
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    sub_100034FD0();
    sub_100035154();
  }

  else
  {
    if (!HIDWORD(a1))
    {
      sub_1000E764C(a1);
      sub_1000352C0();
      sub_10002DD48(v1, v2, v3, 1LL, v4);
      sub_1000352C0();
      sub_1000078BC();
      return;
    }

    sub_100034FD0();
    sub_100035144();
  }

  sub_100035124(v5, v6, v7, v8, v9, v10, v11);
  __break(1u);
}

void sub_10002B0A0(unint64_t a1)
{
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    sub_100034FD0();
    sub_100035154();
  }

  else
  {
    if (!HIDWORD(a1))
    {
      sub_1000E764C(a1);
      sub_100035250();
      sub_10002DE3C(v9, v1);
      sub_1000352C0();
      sub_1000356CC();
      return;
    }

    sub_100034FD0();
    sub_100035144();
  }

  sub_100035124(v2, v3, v4, v5, v6, v7, v8);
  __break(1u);
}

void sub_10002B12C(unint64_t a1)
{
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    sub_100034FD0();
    sub_100035154();
  }

  else
  {
    if (!HIDWORD(a1))
    {
      sub_1000E764C(a1);
      sub_1000352C0();
      sub_10002DEDC(v1, v2, v3, v4);
      sub_1000352C0();
      sub_1000078BC();
      return;
    }

    sub_100034FD0();
    sub_100035144();
  }

  sub_100035124(v5, v6, v7, v8, v9, v10, v11);
  __break(1u);
}

void sub_10002B1B8(unint64_t a1)
{
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    sub_100034FD0();
    sub_100035154();
  }

  else
  {
    if (!HIDWORD(a1))
    {
      unsigned int v1 = sub_1000E764C(a1);
      sub_10002DFC8(0LL, 0LL, 0, v1);
      sub_1000352C0();
      sub_1000078BC();
      return;
    }

    sub_100034FD0();
    sub_100035144();
  }

  sub_100035124(v2, v3, v4, v5, v6, v7, v8);
  __break(1u);
}

void sub_10002B248(unint64_t a1)
{
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    sub_100034FD0();
    sub_100035154();
  }

  else
  {
    if (!HIDWORD(a1))
    {
      unsigned int v1 = sub_1000E764C(a1);
      memset(v9, 0, sizeof(v9));
      sub_10002E0A0(v9, v1);
      sub_1000352C0();
      sub_1000356CC();
      return;
    }

    sub_100034FD0();
    sub_100035144();
  }

  sub_100035124(v2, v3, v4, v5, v6, v7, v8);
  __break(1u);
}

void sub_10002B2DC(unint64_t a1)
{
}

void sub_10002B2E8(unint64_t a1)
{
}

void sub_10002B2F4(unint64_t a1, void (*a2)(void, void, void))
{
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    sub_100034FD0();
    sub_100035154();
  }

  else
  {
    if (!HIDWORD(a1))
    {
      unsigned int v3 = sub_1000E764C(a1);
      a2(0LL, 0LL, v3);
      sub_1000352C0();
      return;
    }

    sub_100034FD0();
    sub_100035144();
  }

  sub_100035124(v4, v5, v6, v7, v8, v9, v10);
  __break(1u);
}

void ChannelPipelineError.hash(into:)(uint64_t a1, char a2)
{
}

void NIOHTTPObjectAggregatorEvent.hashValue.getter(uint64_t a1)
{
}

void IdleStateHandler.IdleStateEvent.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

void sub_10002B400(uint64_t a1)
{
}

void sub_10002B42C()
{
}

void sub_10002B434(uint64_t a1)
{
}

void sub_10002B43C()
{
}

void sub_10002B454(uint64_t a1)
{
}

void sub_10002B45C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v2);
  Hasher._combine(_:)(v1);
  sub_100035698();
  sub_1000354B8();
}

uint64_t HTTPServerPipelineHandler.channelRead(context:data:)(uint64_t a1, uint64_t *a2)
{
  if ((*(_BYTE *)(v2 + 48) & 0xFE) != 2)
  {
    sub_10002A718(v2 + 24, (uint64_t)v12, 0LL);
    uint64_t v4 = *(void *)(v2 + 32);
    uint64_t v5 = *(void *)(v2 + 40);
    BOOL v6 = __OFSUB__(v5, v4);
    uint64_t v7 = v5 - v4;
    if (v7 < 0 != v6) {
      v7 += *(void *)(*(void *)(v2 + 24) + 16LL);
    }
    if (v7 || !*(_BYTE *)(v2 + 16))
    {
      sub_10002B550(a2, (uint64_t)v10);
      char v11 = 0;
      sub_100035224(v2 + 24, (uint64_t)v9);
      sub_10002BA70(v10);
      swift_endAccess(v9);
      return sub_10002BB20((uint64_t)v10);
    }

    else
    {
      return sub_10002BB4C();
    }
  }

  return result;
}

uint64_t sub_10002B550(uint64_t *a1, uint64_t a2)
{
  return a2;
}

void sub_10002B58C(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = v2[2];
  uint64_t v6 = *v2;
  swift_retain(a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
  {
    sub_1000F23C0();
    uint64_t v6 = v7;
  }

  if ((v5 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 >= *(void *)(v6 + 16))
  {
LABEL_9:
    __break(1u);
    return;
  }

  uint64_t v8 = v6 + 16 * v5;
  sub_100034E8C(*(void *)(v8 + 32), *(void *)(v8 + 40));
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = a2;
  uint64_t *v2 = v6;
  sub_100035164(v5 + 1);
  if (v9) {
    sub_1000F38F0();
  }
  else {
    sub_10002A3D4();
  }
}

void sub_10002B628()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  unint64_t v7 = v0[2];
  uint64_t v8 = *v0;
  swift_retain();
  if ((sub_10003532C() & 1) == 0)
  {
    sub_1000F23D0();
    uint64_t v8 = v9;
  }

  if ((v7 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v7 >= *(void *)(v8 + 16))
  {
LABEL_9:
    __break(1u);
    return;
  }

  uint64_t v10 = v8 + 24 * v7;
  swift_release(*(void *)(v10 + 32));
  *(void *)(v10 + 32) = v6;
  *(void *)(v10 + 40) = v4;
  *(_BYTE *)(v10 + 54) = BYTE6(v2);
  *(_WORD *)(v10 + 52) = WORD2(v2);
  *(_DWORD *)(v10 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v2;
  *uint64_t v0 = v8;
  sub_100035164(v7 + 1);
  if (v11) {
    sub_1000F3914();
  }
  else {
    sub_100023E74();
  }
}

void sub_10002B6DC()
{
  char v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  unint64_t v7 = v0[2];
  uint64_t v8 = *v0;
  swift_retain();
  sub_10001ED74();
  if ((sub_100035754() & 1) == 0)
  {
    sub_1000F23E0();
    uint64_t v8 = v9;
  }

  if ((v7 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v7 >= *(void *)(v8 + 16))
  {
LABEL_9:
    __break(1u);
    return;
  }

  uint64_t v10 = v8 + 24 * v7;
  sub_100034754(*(void *)(v10 + 32), *(void *)(v10 + 40));
  *(void *)(v10 + 32) = v6;
  *(void *)(v10 + 40) = v4;
  *(_BYTE *)(v10 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v2;
  *uint64_t v0 = v8;
  sub_100035164(v7 + 1);
  if (v11) {
    sub_1000F39E8();
  }
  else {
    sub_100023E74();
  }
}

void sub_10002B788(uint64_t a1)
{
  uint64_t v16 = *(void *)(a1 + 8);
  uint64_t v17 = *(void *)a1;
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  uint64_t v3 = *(unsigned __int16 *)(a1 + 20);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 22);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  unint64_t v9 = v1[2];
  uint64_t v10 = *v1;
  sub_100034918(a1);
  if ((sub_100035424() & 1) == 0)
  {
    sub_1000F2400();
    uint64_t v10 = v11;
  }

  if ((v9 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v9 >= *(void *)(v10 + 16))
  {
LABEL_9:
    __break(1u);
    return;
  }

  uint64_t v12 = v2 | (v3 << 32) | (v4 << 48);
  uint64_t v13 = (uint64_t *)(v10 + (v9 << 6));
  sub_1000348B4(v13[4], v13[5], v13[6], v13[7], v13[8], v13[9], v13[10]);
  void v13[4] = v17;
  v13[5] = v16;
  v13[6] = v12;
  v13[7] = v15;
  v13[8] = v5;
  v13[9] = v6;
  v13[10] = v7;
  v13[11] = v8;
  *char v1 = v10;
  sub_100035164(v9 + 1);
  if (v14) {
    sub_1000F3ABC();
  }
  else {
    sub_100035724();
  }
}

void sub_10002B894(uint64_t *a1)
{
  unint64_t v2 = v1[2];
  sub_10002B550(a1, (uint64_t)v7);
  uint64_t v3 = *v1;
  char v4 = sub_100035424();
  *char v1 = v3;
  if ((v4 & 1) == 0)
  {
    sub_1000F23F0();
    uint64_t v3 = v5;
    *char v1 = v5;
  }

  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }

  if (v2 >= *(void *)(v3 + 16))
  {
LABEL_10:
    __break(1u);
    return;
  }

  sub_100034EC0((uint64_t)v7, v3 + (v2 << 6) + 32, &qword_1002AA490);
  sub_100035390();
  if (v6) {
    sub_1000F3B80();
  }
}

void sub_10002B924()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  unint64_t v9 = v0[2];
  uint64_t v10 = *v0;
  sub_100033ED4(v7);
  swift_retain();
  if ((sub_100035754() & 1) == 0)
  {
    sub_1000F2410();
    uint64_t v10 = v11;
  }

  if ((v9 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v9 >= *(void *)(v10 + 16))
  {
LABEL_9:
    __break(1u);
    return;
  }

  uint64_t v12 = (uint64_t *)(v10 + 32 * v9);
  sub_1000349CC(v12[4], v12[5], v12[6], v12[7]);
  uint64_t v12[4] = v8;
  v12[5] = v6;
  v12[6] = v4 & 0xFFFFFFFFFFFFFFLL;
  v12[7] = v2;
  *uint64_t v0 = v10;
  sub_100035164(v9 + 1);
  if (v13) {
    sub_1000F3C30();
  }
  else {
    sub_100023E74();
  }
}

void sub_10002B9D8(uint64_t a1)
{
  unint64_t v2 = v1[2];
  sub_100034D20(a1, (uint64_t)v7, &qword_1002AA4D0);
  uint64_t v3 = *v1;
  char v4 = sub_100035424();
  *uint64_t v1 = v3;
  if ((v4 & 1) == 0)
  {
    sub_1000F2420();
    uint64_t v3 = v5;
    *uint64_t v1 = v5;
  }

  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }

  if (v2 >= *(void *)(v3 + 16))
  {
LABEL_10:
    __break(1u);
    return;
  }

  sub_100034EC0((uint64_t)v7, v3 + 72 * v2 + 32, &qword_1002AA4D8);
  sub_100035390();
  if (v6) {
    sub_1000F3D04();
  }
  sub_100035724();
}

void sub_10002BA70(uint64_t *a1)
{
  unint64_t v2 = v1[2];
  sub_100034F4C(a1, (uint64_t)v8);
  uint64_t v3 = *v1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *uint64_t v1 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_1000F2430();
    uint64_t v3 = v5;
    *uint64_t v1 = v5;
  }

  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v2 >= *(void *)(v3 + 16))
  {
LABEL_9:
    __break(1u);
    return;
  }

  sub_100034EC0((uint64_t)v8, v3 + (v2 << 6) + 32, &qword_1002AA198);
  uint64_t v6 = v1[1];
  uint64_t v7 = (*(void *)(*v1 + 16LL) - 1LL) & (v1[2] + 1LL);
  v1[2] = v7;
  if (v6 == v7) {
    sub_1000F3DD8();
  }
}

uint64_t sub_10002BB20(uint64_t a1)
{
  return a1;
}

uint64_t sub_10002BB4C()
{
  uint64_t v1 = sub_10002D6A4();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  unint64_t v6 = HIBYTE(v4);
  if (HIBYTE(v4))
  {
    if ((_DWORD)v6 != 1) {
      __asm { BR              X11 }
    }
  }

  else
  {
    if (*(_BYTE *)(v0 + 16) != 2)
    {
      __break(1u);
      JUMPOUT(0x10002BD28LL);
    }

    *(_BYTE *)(v0 + 16) = 1;
  }

  ChannelHandlerContext.fireChannelRead(_:)();
  return sub_100034F80(v1, v3, v5, v6);
}

void sub_10002BD38(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(v2 + 16) & 0xFE) == 2)
  {
    uint64_t v5 = a2;
    swift_errorRetain(a2);
    uint64_t v3 = sub_1000175B0(&qword_1002A9710);
  }

  ChannelHandlerContext.fireErrorCaught(_:)();
}

uint64_t HTTPServerPipelineHandler.userInboundEventTriggered(context:event:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_10002C010(a2, (uint64_t)v21);
  if (sub_1000355BC(v5, v6, v7, (uint64_t)&type metadata for ChannelShouldQuiesceEvent)) {
    __asm { BR              X10 }
  }

  if (!sub_1000355BC((uint64_t)&v20, v8, v9, (uint64_t)&type metadata for ChannelEvent)
    || (v20 & 1) != 0
    || *(_BYTE *)(v3 + 16))
  {
    goto LABEL_6;
  }

  sub_10002A718(v3 + 24, (uint64_t)v19, 0LL);
  uint64_t v11 = *(void *)(v3 + 32);
  uint64_t v12 = *(void *)(v3 + 40);
  BOOL v13 = __OFSUB__(v12, v11);
  uint64_t v14 = v12 - v11;
  if (v14 < 0 != v13) {
    v14 += *(void *)(*(void *)(v3 + 24) + 16LL);
  }
  if (v14 < 1)
  {
LABEL_6:
    ChannelHandlerContext.fireUserInboundEventTriggered(_:)(a2);
  }

  else
  {
    memset(v17, 0, sizeof(v17));
    char v18 = 2;
    sub_100035224(v3 + 24, (uint64_t)v16);
    sub_10002BA70((uint64_t *)v17);
    sub_1000356C4(v15);
    sub_10002BB20((uint64_t)v17);
  }

  return sub_100019F7C(v21);
}

uint64_t sub_10002C010(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void HTTPServerPipelineHandler.errorCaught(context:error:)(uint64_t a1, uint64_t a2)
{
  v8[0] = a2;
  swift_errorRetain(a2);
  uint64_t v5 = sub_1000175B0(&qword_1002A9710);
  if (sub_10003556C((uint64_t)v7, (uint64_t)v8, v5, (uint64_t)&type metadata for HTTPParserError)
    && !*(_BYTE *)(v2 + 16))
  {
    LOBYTE(v8[0]) = v7[0];
    char v9 = 1;
    sub_100035224(v2 + 24, (uint64_t)v7);
    sub_10002BA70(v8);
    sub_1000356C4(v6);
    sub_10002BB20((uint64_t)v8);
  }

  else
  {
    sub_10002BD38(a1, a2);
  }

void HTTPServerPipelineHandler.write(context:data:promise:)()
{
  uint64_t v1 = sub_1000175B0(&qword_1002AA1A0);
  uint64_t v2 = sub_10002D6A4();
  uint64_t v5 = v2;
  uint64_t v6 = v3;
  unsigned __int8 v7 = v4;
  if (HIBYTE(v4))
  {
    if (HIBYTE(v4) != 1)
    {
      sub_100032488(v2, v3, v4, 2);
      __asm { BR              X10 }
    }

    sub_100032488(v2, v3, v4, 1);
    goto LABEL_16;
  }

  uint64_t v20 = v3;
  if (!*(_BYTE *)(v0 + 48))
  {
    sub_10001A3F8();
    sub_10002A524();
LABEL_16:
    sub_100035534();
    goto LABEL_17;
  }

  uint64_t v8 = *(unsigned int *)(v2 + 40);
  swift_retain();
  sub_10001ED74();
  sub_100187550(v8, v6, v7);
  LOBYTE(v_Block_object_dispose((const void *)(v1 - 136), 8) = v9;
  sub_10001A3F8();
  sub_10002A524();
  if ((v8 & 1) != 0)
  {
    unsigned __int8 v10 = sub_1000350A8();
    uint64_t v11 = sub_1000350A8();
    __chkstk_darwin(v11);
    uint64_t v12 = sub_100033870(&v20, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10003251C);
    if (*(void *)(v20 + 16) < v12)
    {
      __break(1u);
    }

    else
    {
      sub_100033B48();
      if ((sub_10002ACF8(0x697463656E6E6F63uLL, 0xEA00000000006E6FLL) & 1) == 0)
      {
        uint64_t v6 = v20;
        if ((sub_10003532C() & 1) != 0)
        {
LABEL_9:
          unint64_t v13 = *(void *)(v6 + 16);
          unint64_t v14 = v13 + 1;
          if (v13 >= *(void *)(v6 + 24) >> 1)
          {
            sub_1000356A0();
            unint64_t v14 = v13 + 1;
            uint64_t v6 = v17;
          }

          *(void *)(v6 + 16) = v14;
          uint64_t v15 = (void *)(v6 + 32 * v13);
          v15[4] = 0x697463656E6E6F63LL;
          v15[5] = 0xEA00000000006E6FLL;
          v15[6] = 0x65736F6C63LL;
          v15[7] = 0xE500000000000000LL;
          uint64_t v20 = v6;
          goto LABEL_13;
        }

LABEL_20:
        sub_1000356A0();
        uint64_t v6 = v16;
        goto LABEL_9;
      }
    }

    __break(1u);
    goto LABEL_20;
  }

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
  return result;
}

    uint64_t v6 = (v11 - 1) & v11;
  }

  uint64_t v12 = v10 + 4;
  if (v12 >= v7) {
    return swift_release();
  }
  uint64_t v11 = *(void *)(v3 + 8 * v12);
  if (v11)
  {
    uint64_t v2 = v12;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v2 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      break;
    }
    if (v2 >= v7) {
      return swift_release();
    }
    uint64_t v11 = *(void *)(v3 + 8 * v2);
    ++v12;
    if (v11) {
      goto LABEL_20;
    }
  }

  if ((_DWORD)v41) {
LABEL_21:
  }
    sub_100122FC8(v38[13]);
LABEL_22:
  if ((_DWORD)v144) {
    sub_10001DA90(v38[15]);
  }
  if ((_DWORD)v145) {
    sub_10001DA90(v38[18]);
  }
  if ((_DWORD)v146) {
    sub_10001DA90(v38[19]);
  }
  if ((_DWORD)v158) {
    sub_10001DA90(v38[20]);
  }
  if (v169) {
    sub_10001DA90(v38[21]);
  }
  if ((_DWORD)v147) {
    sub_100034F14((uint64_t)&v37[v38[22]], (uint64_t *)&unk_1002AFCD0);
  }
  if ((_DWORD)v148) {
    sub_10001DA90(v38[23]);
  }
  if ((_DWORD)v149) {
    sub_10001DA90(v38[25]);
  }
  if ((_DWORD)v150) {
    sub_100034F14((uint64_t)&v37[v38[26]], (uint64_t *)&unk_1002AFCD0);
  }
  if ((_DWORD)v151) {
    sub_10001DA90(v38[28]);
  }
  if ((_DWORD)v152) {
    sub_10001DA90(v38[32]);
  }
  if ((_DWORD)v153) {
    sub_10001DA90(v38[33]);
  }
  if ((_DWORD)v154) {
    sub_10001DA90(v38[34]);
  }
  if ((_DWORD)v155) {
    sub_10001DA90(v38[35]);
  }
  if ((_DWORD)v156) {
    sub_10001DA90(v38[36]);
  }
  if ((_DWORD)v157) {
    sub_10001DA90(v38[37]);
  }
  if ((_DWORD)v159) {
    sub_10001DA90(v38[38]);
  }
  if ((_DWORD)v162) {
    sub_10001DA90(v38[39]);
  }
  if ((_DWORD)v161) {
    sub_10001DA90(v38[40]);
  }
  if ((_DWORD)v160) {
    sub_10001DA90(v38[42]);
  }
LABEL_62:
  sub_10001DAB8();
}

  uint64_t v38 = "Negative value is not representable";
  uint64_t v39 = 35LL;
LABEL_22:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11LL, 2LL, v38, v39, 2LL, "Swift/Integers.swift", 20LL);
  __break(1u);
}

    uint64_t v3 = (v7 - 1) & v7;
    uint64_t v5 = __clz(__rbit64(v7)) + (v8 << 6);
    uint64_t v32 = v8;
  }

  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

    uint64_t v3 = (v7 - 1) & v7;
    uint64_t v5 = __clz(__rbit64(v7)) + (v8 << 6);
    uint64_t v32 = v8;
  }

  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  uint64_t result = 0.0;
  *a9 = 0u;
  a9[1] = 0u;
  return result;
}

    v8[(v25 >> 6) + 8] |= 1LL << v25;
    sub_1001CBA50((uint64_t)v56, v8[6] + 40 * v25);
    sub_100034728(v53, (_OWORD *)(v8[7] + 32 * v25));
    uint64_t v36 = v8[2];
    uint64_t v37 = __OFADD__(v36, 1LL);
    uint64_t v38 = v36 + 1;
    if (v37) {
      goto LABEL_40;
    }
    v8[2] = v38;
    goto LABEL_5;
  }

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

uint64_t sub_10002C464()
{
  uint64_t v1 = v0;
  swift_retain();
  ChannelHandlerContext.close(mode:promise:)();
  swift_release(v1);
  return v1;
}

void sub_10002C4B8(uint64_t a1)
{
  if (a1)
  {
    sub_10003551C(a1);
    ChannelPipeline.syncOperations.getter();
    sub_1000FEED0();
    sub_1000352E0(v1);
  }

  else
  {
    sub_10001945C();
  }

void sub_10002C4F8(uint64_t a1)
{
  if (a1)
  {
    sub_10003551C(a1);
    ChannelPipeline.syncOperations.getter();
    sub_1001004A4();
    sub_1000352E0(v1);
  }

  else
  {
    sub_10001945C();
  }

void sub_10002C538(uint64_t a1)
{
  if (a1)
  {
    sub_10003551C(a1);
    ChannelPipeline.syncOperations.getter();
    sub_100100EFC();
    sub_1000352E0(v1);
  }

  else
  {
    sub_10001945C();
  }

uint64_t sub_10002C578(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v4 = (void *)(v1 + 24);
  swift_beginAccess(v1 + 24, v42, 0LL, 0LL);
  if (*(_BYTE *)(v1 + 16))
  {
    char v5 = 0;
    do
    {
      unint64_t v6 = *(void *)(v2 + 32);
      if (v6 == *(void *)(v2 + 40)) {
        break;
      }
      if ((v6 & 0x8000000000000000LL) != 0) {
        goto LABEL_46;
      }
      if (HIDWORD(v6)) {
        goto LABEL_47;
      }
      uint64_t v7 = *(void *)(v2 + 24);
      if (v6 >= *(void *)(v7 + 16))
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }

      sub_100034D20(v7 + (v6 << 6) + 32, (uint64_t)&v29, &qword_1002AA198);
      if (v32 == 255) {
        goto LABEL_44;
      }
      sub_100033C20(&v29, &v33);
      sub_100033C20(&v33, &v36);
      swift_beginAccess(v4, &v29, 33LL, 0LL);
      unint64_t v8 = *(void *)(v2 + 32);
      if (v8 == *(void *)(v2 + 40)) {
        goto LABEL_38;
      }
      if ((v8 & 0x8000000000000000LL) != 0) {
        goto LABEL_46;
      }
      if (HIDWORD(v8))
      {
LABEL_47:
        uint64_t v27 = "Not enough bits to represent the passed value";
        uint64_t v28 = 45LL;
        goto LABEL_48;
      }

      uint64_t v9 = *(void *)(v2 + 24);
      if (v8 >= *(void *)(v9 + 16)) {
        goto LABEL_39;
      }
      sub_100034D20(v9 + (v8 << 6) + 32, (uint64_t)&v33, &qword_1002AA198);
      if (v35[25] == 255) {
        goto LABEL_45;
      }
      sub_100034F14((uint64_t)&v33, &qword_1002AA198);
      uint64_t v10 = *(void *)(v2 + 24);
      unint64_t v11 = *(void *)(v2 + 32);
      uint64_t v12 = *(void *)(v2 + 40);
      BOOL v13 = v12 < (uint64_t)v11;
      uint64_t v14 = v12 - v11;
      if (v13) {
        v14 += *(void *)(v10 + 16);
      }
      if (v14 < 1) {
        goto LABEL_40;
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + 24));
      void *v4 = v10;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000F2430();
        uint64_t v10 = v16;
      }

      __int128 v34 = 0u;
      memset(v35, 0, 24);
      __int128 v33 = 0u;
      *(_WORD *)&v35[24] = -256;
      void *v4 = v10;
      if ((v11 & 0x8000000000000000LL) != 0) {
        goto LABEL_41;
      }
      if (v11 >= *(void *)(v10 + 16)) {
        goto LABEL_42;
      }
      sub_100034EC0((uint64_t)&v33, v10 + (v11 << 6) + 32, &qword_1002AA198);
      *(void *)(v2 + 32) = (*(void *)(*(void *)(v2 + 24) + 16LL) - 1LL) & (v11 + 1);
      swift_endAccess(&v29);
      sub_100034F4C((uint64_t *)&v36, (uint64_t)&v33);
      if (v35[25])
      {
        if (v35[25] == 1)
        {
          char v17 = v33;
          unint64_t v18 = sub_100033C40();
          uint64_t v19 = swift_allocError(&type metadata for HTTPParserError, v18, 0LL, 0LL);
          _BYTE *v20 = v17;
          sub_10002BD38(a1, v19);
          sub_10002BB20((uint64_t)&v36);
          swift_errorRelease(v19);
        }

        else
        {
          *(_BYTE *)(v2 + 17) = 0;
          *((void *)&v30 + Hasher._combine(_:)(v1 & 1) = &type metadata for ChannelEvent;
          LOBYTE(v29) = 0;
          ChannelHandlerContext.fireUserInboundEventTriggered(_:)((uint64_t)&v29);
          sub_10002BB20((uint64_t)&v36);
          sub_100019F7C(&v29);
        }
      }

      else
      {
        __int128 v29 = v33;
        __int128 v30 = v34;
        *(_OWORD *)uint64_t v31 = *(_OWORD *)v35;
        *(_OWORD *)&v31[9] = *(_OWORD *)&v35[9];
        sub_10002BB4C();
        sub_1000324E8((uint64_t)&v29);
        sub_10002BB20((uint64_t)&v36);
        char v5 = 1;
      }
    }

    while (*(_BYTE *)(v2 + 16));
    if ((v5 & 1) != 0) {
      ChannelHandlerContext.fireChannelReadComplete()();
    }
  }

  uint64_t result = swift_beginAccess(v4, &v33, 0LL, 0LL);
  if (*(void *)(v2 + 32) != *(void *)(v2 + 40))
  {
    uint64_t v22 = *(void *)(v2 + 24);
    unsigned int v23 = sub_10002CEE0(v22, *(void *)(v2 + 32));
    sub_10002CF5C(v23, v22, &v36);
    if (v41 != 2) {
      return sub_10002BB20((uint64_t)&v36);
    }
    if (v40) {
      return sub_10002BB20((uint64_t)&v36);
    }
    int8x16_t v24 = vorrq_s8(v38, v39);
    if (*(void *)&vorr_s8(*(int8x8_t *)v24.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)) | v37 | *((void *)&v36 + 1) | (unint64_t)v36)
    {
      return sub_10002BB20((uint64_t)&v36);
    }

    else
    {
      sub_10002BB20((uint64_t)&v36);
      swift_beginAccess(v4, &v29, 33LL, 0LL);
      if (*(void *)(v2 + 32) == *(void *)(v2 + 40))
      {
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        uint64_t v27 = "Negative value is not representable";
        uint64_t v28 = 35LL;
LABEL_48:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v27,  v28,  2LL,  "Swift/Integers.swift",  20LL);
        __break(1u);
      }

      else
      {
        uint64_t v25 = *(void *)(v2 + 24);
        unsigned int v26 = sub_10002CEE0(v25, *(void *)(v2 + 32));
        sub_10002CF5C(v26, v25, &v36);
        sub_10002E444(1LL);
        swift_endAccess(&v29);
        sub_10002BB20((uint64_t)&v36);
        *(_BYTE *)(v2 + 17) = 0;
        v38.i64[0] = (uint64_t)&type metadata for ChannelEvent;
        LOBYTE(v36) = 0;
        ChannelHandlerContext.fireUserInboundEventTriggered(_:)((uint64_t)&v36);
        return sub_100019F7C(&v36);
      }
    }
  }

  return result;
}

void sub_10002CA18()
{
  if (v0[17] == 1 && v0[16] && (v0[48] & 0xFE) != 2)
  {
    v0[17] = 0;
    ChannelHandlerContext.read()();
  }

void HTTPServerPipelineHandler.read(context:)()
{
  if ((v0[48] & 0xFE) != 2)
  {
    if (v0[16]) {
      ChannelHandlerContext.read()();
    }
    else {
      v0[17] = 1;
    }
  }

  sub_10001945C();
}

void HTTPServerPipelineHandler.handlerRemoved(context:)()
{
  uint64_t v1 = *(void *)(v0 + 32);
  if (v1 < 0) {
    goto LABEL_28;
  }
  if (HIDWORD(v1)) {
    goto LABEL_26;
  }
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 40);
  BOOL v29 = 1;
  swift_retain();
  if (v3 < 0) {
    goto LABEL_28;
  }
  if (HIDWORD(v3)) {
    goto LABEL_26;
  }
  if ((_DWORD)v1 != (_DWORD)v3)
  {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = v1;
    goto LABEL_9;
  }

  LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = v1;
  if ((((v3 < v1) ^ v29) & 1) == 0)
  {
LABEL_9:
    while (1)
    {
      sub_100035780();
      if (v5) {
        break;
      }
      sub_100034D20(v2 + 32 + ((unint64_t)v4 << 6), (uint64_t)&v17, &qword_1002AA198);
      if (v20 == 255) {
        goto LABEL_25;
      }
      sub_100033C20(&v17, v21);
      sub_100033C20(v21, &v24);
      uint64_t v4 = (*(void *)(v2 + 16) - 1LL) & (v4 + 1LL);
      if (HIDWORD(v4)) {
        goto LABEL_26;
      }
      BOOL v29 = v4 >= v1;
      sub_100033C20(&v24, v21);
      if (v23)
      {
        if (v23 == 1)
        {
          char v6 = v21[0];
          unint64_t v7 = sub_100033C40();
          uint64_t v8 = swift_allocError(&type metadata for HTTPParserError, v7, 0LL, 0LL);
          *uint64_t v9 = v6;
          ChannelHandlerContext.fireErrorCaught(_:)();
          swift_errorRelease(v8);
        }

        else
        {
          *((void *)&v18 + Hasher._combine(_:)(v1 & 1) = &type metadata for ChannelEvent;
          LOBYTE(v17) = 0;
          ChannelHandlerContext.fireUserInboundEventTriggered(_:)((uint64_t)&v17);
          sub_100019F7C(&v17);
        }
      }

      else
      {
        __int128 v17 = v21[0];
        __int128 v18 = v21[1];
        *(_OWORD *)uint64_t v19 = *(_OWORD *)v22;
        *(_OWORD *)&v19[9] = *(_OWORD *)&v22[9];
        ChannelHandlerContext.fireChannelRead(_:)();
        sub_1000324E8((uint64_t)&v17);
      }

      if ((_DWORD)v4 == (_DWORD)v3 && (((v3 < v1) ^ v29) & 1) != 0) {
        goto LABEL_19;
      }
    }

    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    sub_100034FD0();
    sub_100035144();
    while (1)
    {
      sub_100035124(v10, v11, v12, v13, v14, v15, v16);
      __break(1u);
LABEL_28:
      sub_100034FD0();
      sub_100035154();
    }
  }

LABEL_19:
  uint64_t v27 = 0LL;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v24 = 0u;
  __int16 v28 = -256;
  swift_release(v2);
  if (*(unsigned __int8 *)(v0 + 48) - 1 <= 1)
  {
    *((void *)&v25 + Hasher._combine(_:)(v1 & 1) = &type metadata for ChannelShouldQuiesceEvent;
    ChannelHandlerContext.fireUserInboundEventTriggered(_:)((uint64_t)&v24);
    sub_100019F7C(&v24);
  }

  if (*(_BYTE *)(v0 + 17) == 1) {
    ChannelHandlerContext.read()();
  }
}

  sub_1000A6D30();
}

      sub_100034FD0();
      sub_100035154();
      goto LABEL_20;
    }
  }

  else
  {
    if ((a2 & 1) != 0) {
      return result;
    }
    __break(1u);
  }

  LODWORD(result) = 0;
LABEL_14:
  unsigned __int8 v20 = bswap32(result) >> 16;
  uint64_t v22 = *(void *)((v8 & 0x3FFFFFFFFFFFFFFFLL) + 0x30);
  uint64_t v21 = *(void *)((v8 & 0x3FFFFFFFFFFFFFFFLL) + 0x38);
  swift_bridgeObjectRetain();
  swift_release();
  char v23 = sub_1000175B0(&qword_1002AAFA0);
  __int128 v24 = sub_100019310(v23, 64LL);
  *(_BYTE *)(v24 + 16) = v7;
  *(_BYTE *)(v24 + 17) = v29;
  *(_WORD *)(v24 + 1_Block_object_dispose((const void *)(v1 - 136), 8) = v20;
  *(_DWORD *)(v24 + 20) = v3;
  *(void *)(v24 + 24) = v5;
  *(void *)(v24 + 32) = v4;
  *(_DWORD *)(v24 + 40) = v6;
  uint64_t result = v24 | 0x4000000000000000LL;
  *(void *)(v24 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v22;
  *(void *)(v24 + 56) = v21;
LABEL_17:
  uint64_t *v2 = result;
  return result;
}

  swift_bridgeObjectRelease(a1);
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
LABEL_20:
  __break(1u);
}

        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        sub_100165190();
        unint64_t v7 = v26;
        if ((v8 & 0x8000000000000000LL) != 0) {
          goto LABEL_22;
        }
        goto LABEL_14;
      }
    }

    __break(1u);
    goto LABEL_19;
  }

  uint64_t v8 = a2;
  uint64_t v21 = swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0) {
    goto LABEL_21;
  }
  if ((v8 & 0x8000000000000000LL) != 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

      if (++v4 == v22)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n(v21, 2LL);
        return 0LL;
      }
    }
  }

  swift_bridgeObjectRelease();
  return 0LL;
}

void HTTPServerPipelineHandler.channelInactive(context:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 24;
  sub_100035224(v2, (uint64_t)v8);
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  char v5 = (void *)(v1 + 32);
  uint64_t v6 = v4 - v3;
  if (v4 < v3) {
    v6 += *(void *)(*(void *)v2 + 16LL);
  }
  sub_10002E444(v6);
  void *v5 = 0LL;
  v5[1] = 0LL;
  sub_1000356C4(v7);
  ChannelHandlerContext.fireChannelInactive()();
  sub_100013858();
}

uint64_t HTTPServerPipelineHandler.deinit()
{
  return v0;
}

uint64_t HTTPServerPipelineHandler.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 51LL, 7LL);
}

void sub_10002CDE8()
{
  uint64_t ObjectType = swift_getObjectType(*(void *)(*(void *)(v0 + 32) + 48LL));
  sub_10003555C(ObjectType, (uint64_t)&type metadata for ());
  sub_10003527C();
  sub_100023E74();
}

void sub_10002CE30()
{
  uint64_t ObjectType = swift_getObjectType(*(void *)(v1 + 48));
  EmbeddedChannel.WrongTypeError.actual.getter(ObjectType, (uint64_t)&type metadata for () + 8);
  sub_10003D72C(v4, v3, v2, v0);
  sub_10002A3D4();
}

void sub_10002CE88()
{
  uint64_t v0 = EmbeddedChannel.eventLoop.getter();
  uint64_t ObjectType = swift_getObjectType(v0);
  sub_10003555C(ObjectType, (uint64_t)type metadata for ());
  sub_10003527C();
  swift_unknownObjectRelease(v0);
  sub_100023E74();
}

uint64_t sub_10002CEE0(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    sub_100034FD0();
    sub_100035154();
  }

  else
  {
    if (!HIDWORD(a2)) {
      return a2 | 0x1FFFFFF00000000LL;
    }
    sub_100034FD0();
    sub_100035144();
  }

  uint64_t result = sub_100035124(v3, v4, v5, v6, v7, v8, v9);
  __break(1u);
  return result;
}

void sub_10002CF5C(unsigned int a1@<W0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if ((unint64_t)a1 >= *(void *)(a2 + 16))
  {
    __break(1u);
  }

  else
  {
    sub_100034D20(a2 + ((unint64_t)a1 << 6) + 32, (uint64_t)v4, &qword_1002AA198);
    if (v5 != 255)
    {
      sub_100033C20(v4, a3);
      return;
    }
  }

  __break(1u);
}

void sub_10002CFC8()
{
  if (v2)
  {
    __break(1u);
  }

  else if (*(void *)(v0 + 24LL * v1 + 32))
  {
    swift_retain();
    swift_bridgeObjectRetain();
    return;
  }

  __break(1u);
}

void sub_10002D02C()
{
  if (v2)
  {
    __break(1u);
  }

  else if (*(void *)(v0 + 16 * v1 + 32))
  {
    ChannelPipeline.syncOperations.getter();
    return;
  }

  __break(1u);
}

void sub_10002D070(_OWORD *a1@<X8>)
{
  if (v4)
  {
    __break(1u);
  }

  else
  {
    sub_100034D20(v2 + (v3 << 6) + 32, (uint64_t)v6, &qword_1002AA490);
    if (v7[24] != 255)
    {
      __int128 v5 = v6[1];
      *a1 = v6[0];
      a1[1] = v5;
      a1[2] = *(_OWORD *)v7;
      *(_OWORD *)((char *)a1 + 4Hasher._combine(_:)(v1 & 1) = *(_OWORD *)&v7[9];
      return;
    }
  }

  __break(1u);
}

uint64_t sub_10002D0E0()
{
  unint64_t v14 = v2;
  unint64_t v15 = v3;
  v13[2] = &v14;
  sub_100187B5C((void (*)(uint64_t *__return_ptr, void *, uint64_t))sub_100034EE8, (uint64_t)v13, v4, v5);
  if ((v6 & 0xFE) == 2) {
    char v11 = sub_100188228(v14, v15, v1, v0, v7, v8, v9, v10);
  }
  else {
    char v11 = v6 & 1;
  }
  return v11 & 1;
}

uint64_t sub_10002D154()
{
  if (!v9)
  {
    sub_100018F04(v6);
    return 0LL;
  }

  if (v9 == 1)
  {
    uint64_t v1 = v7;
    uint64_t v2 = v8;
    swift_release();
    swift_release();
    sub_100034738(v1, v2);
    return 0LL;
  }

  sub_100034728(&v6, v5);
  uint64_t v4 = type metadata accessor for SocketChannel(0LL);
  else {
    return 0LL;
  }
}

uint64_t sub_10002D228()
{
  if (v19)
  {
    if (v19 == 1)
    {
      __int128 v5 = v12;
      uint64_t v6 = v13;
      int v7 = v14;
      __int16 v8 = v15;
      char v9 = v16;
      __int128 v10 = v17;
      uint64_t v11 = v18;
      uint64_t v1 = sub_1000175B0(&qword_1002AA4B8);
      uint64_t v2 = sub_1000175B0(&qword_1002AA4B0);
      unint64_t v3 = (ValueMetadata *)v1;
    }

    else
    {
      sub_100034728(&v12, &v5);
      uint64_t v2 = sub_1000175B0(&qword_1002AA4B0);
      unint64_t v3 = (ValueMetadata *)((char *)&type metadata for Any + 8);
    }
  }

  else
  {
    __int128 v5 = v12;
    BYTE6(EventLoop.assertInEventLoop(file:line:)(v2, v3, v4, 1241LL, v5, v6) = BYTE6(v13);
    WORD2(EventLoop.assertInEventLoop(file:line:)(v2, v3, v4, 1241LL, v5, v6) = WORD2(v13);
    LODWORD(EventLoop.assertInEventLoop(file:line:)(v2, v3, v4, 1241LL, v5, v6) = v13;
    uint64_t v2 = sub_1000175B0(&qword_1002AA4B0);
    unint64_t v3 = &type metadata for IOData;
  }

  if ((swift_dynamicCast(v20, &v5, v3, v2, 6LL) & 1) == 0)
  {
    v20[0] = 0LL;
    v20[1] = 0LL;
  }

  return v20[0];
}

uint64_t sub_10002D354(uint64_t *a1)
{
  if (!v12)
  {
    sub_10003572C(v9);
    return 0LL;
  }

  if (v12 == 1)
  {
    uint64_t v3 = v9;
    uint64_t v4 = v10;
    uint64_t v5 = v11;
    swift_release(*((void *)&v9 + 1));
    swift_release(v3 & 0x3FFFFFFFFFFFFFFFLL);
    sub_100034738(v4, v5);
    return 0LL;
  }

  sub_100034728(&v9, v8);
  uint64_t v7 = sub_1000175B0(a1);
  else {
    return 0LL;
  }
}

uint64_t sub_10002D43C@<X0>(_OWORD *a1@<X8>)
{
  if (v19)
  {
    if (v19 != 1) {
      return (uint64_t)sub_100034728(&v12, a1);
    }
    __int128 v5 = v12;
    uint64_t v6 = v13;
    int v7 = v14;
    __int16 v8 = v15;
    char v9 = v16;
    __int128 v10 = v17;
    uint64_t v11 = v18;
    uint64_t v3 = (ValueMetadata *)sub_1000175B0(&qword_1002AA4B8);
  }

  else
  {
    __int128 v5 = v12;
    BYTE6(EventLoop.assertInEventLoop(file:line:)(v2, v3, v4, 1241LL, v5, v6) = BYTE6(v13);
    WORD2(EventLoop.assertInEventLoop(file:line:)(v2, v3, v4, 1241LL, v5, v6) = WORD2(v13);
    LODWORD(EventLoop.assertInEventLoop(file:line:)(v2, v3, v4, 1241LL, v5, v6) = v13;
    uint64_t v3 = &type metadata for IOData;
  }

  uint64_t result = sub_10003556C((uint64_t)a1, (uint64_t)&v5, (uint64_t)v3, (uint64_t)&type metadata for Any + 8);
  if ((result & 1) == 0)
  {
    *a1 = 0u;
    a1[1] = 0u;
  }

  return result;
}

uint64_t sub_10002D534()
{
  return sub_10002D6A4();
}

void sub_10002D540()
{
  if (!sub_10002D154())
  {
    sub_100035604(0LL, (uint64_t)v11);
    sub_1000354D8();
    v10[6] = v10[0];
    uint64_t v10[7] = v10[1];
    sub_100035384(v3, 0x8000000100218E30LL);
    v4._countAndFlagsBits = 0x684374656B636F53LL;
    v4._object = (void *)0xED00006C656E6E61LL;
    String.append(_:)(v4);
    sub_1000350DC();
    v10[3] = &type metadata for NIOAny._NIOAny;
    uint64_t v5 = sub_100019310((uint64_t)&unk_100276F50, 73LL);
    sub_1000355AC(v5);
    sub_1000355A4((uint64_t)v10);
    sub_10003557C();
    sub_100035324(v0);
    sub_100035594();
    sub_100024F0C();
    if (!v10[5]) {
      __break(1u);
    }
    swift_bridgeObjectRelease();
    sub_100035368();
    sub_100035574();
    sub_10003526C();
    v12._countAndFlagsBits = sub_1000353B4();
    sub_1000356B8(v12);
    sub_100019390();
    sub_100035084();
    sub_1000356AC();
    sub_1000352A0();
    sub_1000351EC((uint64_t)"Fatal error", v6, v7, v8, v9, (uint64_t)"ASOctaneSupportXPCService/NIOAny.swift");
    sub_10003566C();
  }

  sub_10002A3D4();
}

uint64_t sub_10002D698()
{
  return sub_10002D6A4();
}

uint64_t sub_10002D6A4()
{
  uint64_t v22 = v1;
  uint64_t v23 = v2;
  Swift::String v4 = v3;
  sub_1000355E4();
  sub_1000356FC();
  __chkstk_darwin(v5);
  sub_10003518C();
  __chkstk_darwin(v6);
  sub_10003547C();
  uint64_t result = sub_10002D354(v4);
  if (HIBYTE(v8) == 255)
  {
    sub_100035604(result, (uint64_t)v21);
    *((void *)&v17 + Hasher._combine(_:)(v1 & 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(56LL);
    v20[0] = 0LL;
    v20[1] = 0xE000000000000000LL;
    sub_100035384(v9, 0x8000000100218E30LL);
    v10._countAndFlagsBits = sub_100035740();
    String.append(_:)(v10);
    sub_10003561C();
    sub_1000350DC();
    uint64_t v18 = &type metadata for NIOAny._NIOAny;
    *(void *)&__int128 v17 = sub_100019310((uint64_t)&unk_100276F50, 73LL);
    sub_1000346EC(v21, v17 + 16);
    sub_1000355A4((uint64_t)&v17);
    uint64_t v11 = (void *)sub_10003557C();
    sub_100035324(v0);
    sub_1000830D0(v11, &v17);
    sub_100024F0C();
    if (!v19) {
      __break(1u);
    }
    swift_bridgeObjectRelease();
    sub_100035368();
    sub_100035574();
    sub_10003526C();
    v12._countAndFlagsBits = sub_1000353B4();
    String.append(_:)(v12);
    sub_100019390();
    sub_100035084();
    _print_unlocked<A, B>(_:_:)(v21, v20);
    sub_1000352A0();
    sub_1000351EC((uint64_t)"Fatal error", v13, v14, v15, v16, (uint64_t)"ASOctaneSupportXPCService/NIOAny.swift");
    sub_10003566C();
  }

  return result;
}

uint64_t sub_10002D844()
{
  return sub_10002D6A4();
}

uint64_t sub_10002D850()
{
  return sub_10002D6A4();
}

uint64_t sub_10002D85C()
{
  uint64_t result = sub_10002D228();
  if (!result)
  {
    sub_100035604(0LL, (uint64_t)v12);
    sub_1000354D8();
    v11[6] = v11[0];
    v11[7] = v11[1];
    sub_100035384(v4, 0x8000000100218E30LL);
    v5._countAndFlagsBits = 0x6C656E6E616843LL;
    v5._object = (void *)0xE700000000000000LL;
    String.append(_:)(v5);
    sub_1000350DC();
    v11[3] = &type metadata for NIOAny._NIOAny;
    uint64_t v6 = sub_100019310((uint64_t)&unk_100276F50, 73LL);
    sub_1000355AC(v6);
    sub_1000355A4((uint64_t)v11);
    sub_10003557C();
    sub_100035324(v0);
    sub_100035594();
    sub_100024F0C();
    if (!v11[5]) {
      __break(1u);
    }
    swift_bridgeObjectRelease();
    sub_100035368();
    sub_100035574();
    sub_10003526C();
    v13._countAndFlagsBits = sub_1000353B4();
    sub_1000356B8(v13);
    sub_100019390();
    sub_100035084();
    sub_1000356AC();
    sub_1000352A0();
    sub_1000351EC((uint64_t)"Fatal error", v7, v8, v9, v10, (uint64_t)"ASOctaneSupportXPCService/NIOAny.swift");
    sub_10003566C();
  }

  return result;
}

void sub_10002D9B4()
{
  uint64_t v3 = v2;
  sub_1000355E4();
  sub_1000356FC();
  __chkstk_darwin(v4);
  sub_10003518C();
  __chkstk_darwin(v5);
  sub_10003547C();
  sub_1000346EC(v0, (uint64_t)&v19);
  if (v23 != 2)
  {
    if (v23)
    {
      uint64_t v7 = v21;
      uint64_t v8 = v22;
      swift_release();
      swift_release();
      sub_100034738(v7, v8);
    }

    else
    {
      sub_10003572C(v19);
    }

    sub_100035540();
    goto LABEL_10;
  }

  sub_100034728(&v19, v18);
  if ((sub_10003556C( (uint64_t)v24,  (uint64_t)v18,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for NIOAny) & 1) == 0)
  {
    sub_100035540();
LABEL_10:
    sub_100034F14((uint64_t)v24, &qword_1002AA490);
    sub_100035604(v9, (uint64_t)v24);
    *(void *)&__int128 v19 = 0LL;
    *((void *)&v19 + Hasher._combine(_:)(v1 & 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(56LL);
    v18[0] = v19;
    sub_100035384(v10, 0x8000000100218E30LL);
    v11._countAndFlagsBits = sub_100035740();
    String.append(_:)(v11);
    sub_10003561C();
    sub_1000350DC();
    unsigned __int8 v20 = &type metadata for NIOAny._NIOAny;
    *(void *)&__int128 v19 = sub_100019310((uint64_t)&unk_100276F50, 73LL);
    sub_1000346EC((uint64_t *)v24, v19 + 16);
    sub_1000355A4((uint64_t)&v19);
    Swift::String v12 = (void *)sub_10003557C();
    sub_100035324(v1);
    sub_1000830D0(v12, &v19);
    sub_100024F0C();
    if (!v22) {
      __break(1u);
    }
    swift_bridgeObjectRelease();
    sub_100035368();
    sub_100035574();
    sub_10003526C();
    v13._countAndFlagsBits = sub_1000353B4();
    String.append(_:)(v13);
    sub_100019390();
    sub_100035084();
    _print_unlocked<A, B>(_:_:)(v24, v18);
    sub_1000352A0();
    sub_1000351EC((uint64_t)"Fatal error", v14, v15, v16, v17, (uint64_t)"ASOctaneSupportXPCService/NIOAny.swift");
    sub_10003566C();
  }

  if (v25[24] == 255) {
    goto LABEL_10;
  }
  __int128 v6 = v24[1];
  *uint64_t v3 = v24[0];
  v3[1] = v6;
  v3[2] = *(_OWORD *)v25;
  *(_OWORD *)((char *)v3 + 4Hasher._combine(_:)(v1 & 1) = *(_OWORD *)&v25[9];
  sub_10002A580();
}

void *sub_10002DC08(void *result, uint64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t)result;
    if (a2)
    {
      uint64_t v4 = sub_1000175B0(&qword_1002AA4D8);
      uint64_t v5 = (void *)static ContiguousArray._allocateBufferUninitialized(minimumCapacity:)(v2, v4);
      _OWORD v5[2] = v2;
      uint64_t v6 = (uint64_t)(v5 + 4);
      do
      {
        sub_100034D20(v3, v6, &qword_1002AA4D8);
        v6 += 72LL;
        --v2;
      }

      while (v2);
    }

    else
    {
      uint64_t v5 = _swiftEmptyArrayStorage;
    }

    sub_100034F14(v3, &qword_1002AA4D8);
    return v5;
  }

  return result;
}

void *sub_10002DCA8(void *result, uint64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t)result;
    if (a2)
    {
      uint64_t v4 = sub_1000175B0(&qword_1002AA490);
      uint64_t v5 = (void *)static ContiguousArray._allocateBufferUninitialized(minimumCapacity:)(v2, v4);
      _OWORD v5[2] = v2;
      uint64_t v6 = (uint64_t)(v5 + 4);
      do
      {
        sub_100034D20(v3, v6, &qword_1002AA490);
        v6 += 64LL;
        --v2;
      }

      while (v2);
    }

    else
    {
      uint64_t v5 = _swiftEmptyArrayStorage;
    }

    sub_100034F14(v3, &qword_1002AA490);
    return v5;
  }

  return result;
}

void *sub_10002DD48(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v9 = (uint64_t)result;
    if (a5)
    {
      uint64_t v10 = sub_1000175B0(&qword_1002AA3A0);
      Swift::String v11 = (void *)static ContiguousArray._allocateBufferUninitialized(minimumCapacity:)(a5, v10);
      Swift::String v12 = v11;
      v11[2] = a5;
      v11[4] = v9;
      v11[5] = a2;
      v11[6] = a3;
      v11[7] = a4;
      if (a5 != 1)
      {
        void v11[8] = v9;
        v11[9] = a2;
        v11[10] = a3;
        v11[11] = a4;
        uint64_t v13 = a5 - 2;
        if (v13)
        {
          uint64_t v14 = v11 + 15;
          do
          {
            sub_10003499C(v9, a2, a3, a4);
            *(v14 - 3) = v9;
            *(v14 - 2) = a2;
            *(v14 - Hasher._combine(_:)(v1 & 1) = a3;
            uint64_t *v14 = a4;
            v14 += 4;
            --v13;
          }

          while (v13);
        }

        sub_10003499C(v9, a2, a3, a4);
      }
    }

    else
    {
      sub_1000349CC((uint64_t)result, a2, a3, a4);
      return _swiftEmptyArrayStorage;
    }

    return v12;
  }

  return result;
}

void *sub_10002DE3C(void *result, uint64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t)result;
    if (a2)
    {
      uint64_t v4 = sub_1000175B0(&qword_1002AA198);
      uint64_t v5 = (void *)static ContiguousArray._allocateBufferUninitialized(minimumCapacity:)(v2, v4);
      _OWORD v5[2] = v2;
      uint64_t v6 = (uint64_t)(v5 + 4);
      do
      {
        sub_100034D20(v3, v6, &qword_1002AA198);
        v6 += 64LL;
        --v2;
      }

      while (v2);
    }

    else
    {
      uint64_t v5 = _swiftEmptyArrayStorage;
    }

    sub_100034F14(v3, &qword_1002AA198);
    return v5;
  }

  return result;
}

void *sub_10002DEDC(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v5 = result;
    if (a4)
    {
      uint64_t v8 = sub_1000175B0(&qword_1002AA588);
      uint64_t v9 = static ContiguousArray._allocateBufferUninitialized(minimumCapacity:)(a4, v8);
      uint64_t v10 = v9;
      *(void *)(v9 + 16) = a4;
      *(void *)(v9 + 32) = v5;
      *(void *)(v9 + 40) = a2;
      *(_BYTE *)(v9 + 54) = BYTE6(a3);
      *(_WORD *)(v9 + 52) = WORD2(a3);
      *(_DWORD *)(v9 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = a3;
      if (a4 != 1)
      {
        *(void *)(v9 + 56) = v5;
        *(void *)(v9 + 64) = a2;
        *(_DWORD *)(v9 + 72) = a3;
        *(_BYTE *)(v9 + 7_Block_object_dispose((const void *)(v1 - 136), 8) = BYTE6(a3);
        *(_WORD *)(v9 + 76) = WORD2(a3);
        uint64_t v11 = a4 - 2;
        if (v11)
        {
          uint64_t v12 = v9 + 96;
          do
          {
            *(void *)(v12 - 16) = v5;
            *(void *)(v12 - _Block_object_dispose((const void *)(v1 - 136), 8) = a2;
            *(_DWORD *)uint64_t v12 = a3;
            *(_BYTE *)(v12 + 6) = BYTE6(a3);
            *(_WORD *)(v12 + 4) = WORD2(a3);
            swift_retain();
            v12 += 24LL;
            --v11;
          }

          while (v11);
        }

        swift_retain();
      }
    }

    else
    {
      swift_release(result);
      return _swiftEmptyArrayStorage;
    }

    return (void *)v10;
  }

  return result;
}

void *sub_10002DFC8(void *result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v7 = (uint64_t)result;
    if (a4)
    {
      uint64_t v8 = sub_1000175B0(&qword_1002AA4F8);
      uint64_t v9 = static ContiguousArray._allocateBufferUninitialized(minimumCapacity:)(a4, v8);
      uint64_t v10 = v9;
      *(void *)(v9 + 16) = a4;
      *(void *)(v9 + 32) = v7;
      *(void *)(v9 + 40) = a2;
      *(_BYTE *)(v9 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = a3;
      if (a4 != 1)
      {
        *(void *)(v9 + 56) = v7;
        *(void *)(v9 + 64) = a2;
        *(_BYTE *)(v9 + 72) = a3;
        uint64_t v11 = a4 - 2;
        if (v11)
        {
          uint64_t v12 = (_BYTE *)(v9 + 96);
          do
          {
            sub_100034D48(v7, a2);
            *((void *)v12 - 2) = v7;
            *((void *)v12 - Hasher._combine(_:)(v1 & 1) = a2;
            _BYTE *v12 = a3;
            v12 += 24;
            --v11;
          }

          while (v11);
        }

        sub_100034D48(v7, a2);
      }
    }

    else
    {
      sub_100034754((uint64_t)result, a2);
      return _swiftEmptyArrayStorage;
    }

    return (void *)v10;
  }

  return result;
}

void *sub_10002E0A0(void *result, uint64_t a2)
{
  if ((a2 & 0x8000000000000000LL) == 0)
  {
    uint64_t v3 = result;
    if (a2)
    {
      uint64_t v4 = sub_1000175B0(&qword_1002AA510);
      uint64_t v5 = (void *)static ContiguousArray._allocateBufferUninitialized(minimumCapacity:)(a2, v4);
      _OWORD v5[2] = a2;
      sub_100034DC4((uint64_t)v3, (uint64_t)(v5 + 4), &qword_1002AA510);
      if (a2 == 1) {
        return v5;
      }
      sub_100034DC4((uint64_t)v3, (uint64_t)(v5 + 12), &qword_1002AA510);
      uint64_t v6 = a2 - 2;
      if (a2 == 2)
      {
        uint64_t v7 = sub_100034DEC;
      }

      else
      {
        uint64_t v8 = (uint64_t)(v5 + 20);
        uint64_t v7 = sub_100034DEC;
        do
        {
          sub_100034E54( v3,  (void (*)(void, void, void, void, void, void, void, void))sub_100034DEC);
          sub_100034DC4((uint64_t)v3, v8, &qword_1002AA510);
          v8 += 64LL;
          --v6;
        }

        while (v6);
      }
    }

    else
    {
      uint64_t v5 = _swiftEmptyArrayStorage;
      uint64_t v7 = sub_1000348B4;
    }

    sub_100034E54(v3, (void (*)(void, void, void, void, void, void, void, void))v7);
    return v5;
  }

  __break(1u);
  return result;
}

void *sub_10002E1A0(void *result, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v5 = (uint64_t)result;
    if (a3)
    {
      uint64_t v6 = sub_1000175B0(&qword_1002AA4F0);
      uint64_t v7 = (void *)static ContiguousArray._allocateBufferUninitialized(minimumCapacity:)(a3, v6);
      uint64_t v8 = v7;
      v7[2] = a3;
      void v7[4] = v5;
      v7[5] = a2;
      if (a3 != 1)
      {
        v7[6] = v5;
        v7[7] = a2;
        uint64_t v9 = a3 - 2;
        if (v9)
        {
          uint64_t v10 = v7 + 9;
          do
          {
            sub_100034E9C(v5, a2);
            *(v10 - Hasher._combine(_:)(v1 & 1) = v5;
            uint64_t *v10 = a2;
            v10 += 2;
            --v9;
          }

          while (v9);
        }

        sub_100034E9C(v5, a2);
      }
    }

    else
    {
      sub_100034E8C((uint64_t)result, a2);
      return _swiftEmptyArrayStorage;
    }

    return v8;
  }

  return result;
}

void *sub_10002E260(void *result, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v5 = (uint64_t)result;
    if (a3)
    {
      uint64_t v6 = sub_1000175B0(&qword_1002AA550);
      uint64_t v7 = (void *)static ContiguousArray._allocateBufferUninitialized(minimumCapacity:)(a3, v6);
      uint64_t v8 = v7;
      v7[2] = a3;
      void v7[4] = v5;
      v7[5] = a2;
      uint64_t v9 = a3 - 1;
      if (v9)
      {
        uint64_t v10 = v7 + 7;
        do
        {
          sub_100034E9C(v5, a2);
          *(v10 - Hasher._combine(_:)(v1 & 1) = v5;
          uint64_t *v10 = a2;
          v10 += 2;
          --v9;
        }

        while (v9);
      }
    }

    else
    {
      sub_100034E8C((uint64_t)result, a2);
      return _swiftEmptyArrayStorage;
    }

    return v8;
  }

  return result;
}

void sub_10002E308()
{
  if (v5 != v6) {
    sub_100035768();
  }
  if (v4 < v0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if ((v0 & 0x8000000000000000LL) == 0)
  {
    if (!v0)
    {
LABEL_14:
      v1[1] = v3;
      sub_100023E74();
      return;
    }

    if ((sub_10003532C() & 1) == 0)
    {
      sub_1000F23D0();
      uint64_t v2 = v7;
    }

    while ((v3 & 0x8000000000000000LL) == 0)
    {
      sub_100035780();
      if (v8) {
        goto LABEL_16;
      }
      uint64_t v9 = (void *)(v2 + 32 + 24 * v3);
      swift_release(*v9);
      *(void *)((char *)v9 + 15) = 0LL;
      *uint64_t v9 = 0LL;
      v9[1] = 0LL;
      sub_10003548C();
      if (v10)
      {
        *uint64_t v1 = v2;
        goto LABEL_14;
      }
    }

    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

LABEL_18:
  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

    uint64_t v9 = (v15 - 1) & v15;
  }

  uint64_t v16 = v14 + 3;
  if (v16 >= v10) {
    goto LABEL_29;
  }
  uint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    uint64_t v11 = v16;
    goto LABEL_18;
  }

  while (1)
  {
    uint64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v11 >= v10) {
      goto LABEL_29;
    }
    uint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_18;
    }
  }

    char v10 = (v14 - 1) & v14;
  }

  uint64_t v15 = v13 + 3;
  if (v15 >= v30) {
    return (uint64_t)v3;
  }
  uint64_t v14 = *(void *)(v29 + 8 * v15);
  if (v14)
  {
    uint64_t v4 = v15;
    goto LABEL_18;
  }

  while (1)
  {
    uint64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v4 >= v30) {
      return (uint64_t)v3;
    }
    uint64_t v14 = *(void *)(v29 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }

  __break(1u);
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

    uint64_t v7 = (v13 - 1) & v13;
  }

  uint64_t v14 = v12 + 3;
  if (v14 >= v8)
  {
LABEL_21:
    swift_release(a1);
    return;
  }

  uint64_t v13 = *(void *)(v4 + 8 * v14);
  if (v13)
  {
    uint64_t v9 = v14;
    goto LABEL_18;
  }

  while (1)
  {
    uint64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v9 >= v8) {
      goto LABEL_21;
    }
    uint64_t v13 = *(void *)(v4 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_18;
    }
  }

    __break(1u);
    goto LABEL_19;
  }

  __break(1u);
  return result;
}

void sub_10002E3A0()
{
  if (v5 != v6) {
    sub_100035768();
  }
  if (v4 < v0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if ((v0 & 0x8000000000000000LL) == 0)
  {
    if (!v0)
    {
LABEL_14:
      v1[1] = v3;
      sub_10002A3D4();
      return;
    }

    if ((sub_10003532C() & 1) == 0)
    {
      sub_1000F2400();
      uint64_t v2 = v7;
    }

    while ((v3 & 0x8000000000000000LL) == 0)
    {
      sub_100035780();
      if (v8) {
        goto LABEL_16;
      }
      uint64_t v9 = (uint64_t *)(v2 + 32 + (v3 << 6));
      sub_1000348B4(*v9, v9[1], v9[2], v9[3], v9[4], v9[5], v9[6]);
      *((_OWORD *)v9 + 2) = 0u;
      *((_OWORD *)v9 + 3) = 0u;
      *(_OWORD *)uint64_t v9 = 0u;
      *((_OWORD *)v9 + Hasher._combine(_:)(v1 & 1) = 0u;
      sub_10003548C();
      if (v10)
      {
        *uint64_t v1 = v2;
        goto LABEL_14;
      }
    }

    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

void sub_10002E444(uint64_t a1)
{
  uint64_t v2 = a1;
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  BOOL v6 = v5 < v4;
  uint64_t v7 = v5 - v4;
  if (v6) {
    v7 += *(void *)(v3 + 16);
  }
  if (v7 < a1)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if ((a1 & 0x8000000000000000LL) == 0)
  {
    if (!a1)
    {
LABEL_12:
      v1[1] = v4;
      return;
    }

    if ((swift_isUniquelyReferenced_nonNull_native(*v1) & 1) == 0)
    {
      sub_1000F2430();
      uint64_t v3 = v8;
    }

    while (1)
    {
      uint64_t v10 = 0LL;
      memset(v9, 0, sizeof(v9));
      __int16 v11 = -256;
      *uint64_t v1 = v3;
      if (v4 < 0) {
        break;
      }
      sub_100034EC0((uint64_t)v9, v3 + (v4 << 6) + 32, &qword_1002AA198);
      uint64_t v3 = *v1;
      uint64_t v4 = (*(void *)(*v1 + 16LL) - 1LL) & (v4 + 1);
      if (!--v2) {
        goto LABEL_12;
      }
    }

    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

void sub_10002E530()
{
  if (v5 != v6) {
    sub_100035768();
  }
  if (v4 < v0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if ((v0 & 0x8000000000000000LL) == 0)
  {
    if (!v0)
    {
LABEL_14:
      v1[1] = v3;
      sub_100023E74();
      return;
    }

    if ((sub_10003532C() & 1) == 0)
    {
      sub_1000F23E0();
      uint64_t v2 = v7;
    }

    while ((v3 & 0x8000000000000000LL) == 0)
    {
      sub_100035780();
      if (v8) {
        goto LABEL_16;
      }
      uint64_t v9 = v2 + 32 + 24 * v3;
      sub_100034754(*(void *)v9, *(void *)(v9 + 8));
      *(_BYTE *)(v9 + 16) = 0;
      *(void *)uint64_t v9 = 0LL;
      *(void *)(v9 + _Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
      sub_10003548C();
      if (v10)
      {
        *uint64_t v1 = v2;
        goto LABEL_14;
      }
    }

    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

void sub_10002E5CC(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  BOOL v6 = v5 < v4;
  uint64_t v7 = v5 - v4;
  if (v6) {
    sub_100035768();
  }
  if (v7 < a1)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if ((a1 & 0x8000000000000000LL) == 0)
  {
    if (!a1)
    {
LABEL_12:
      v1[1] = v4;
      sub_100035724();
      return;
    }

    if ((sub_10003532C() & 1) == 0)
    {
      sub_1000F23F0();
      uint64_t v3 = v8;
    }

    while (1)
    {
      uint64_t v10 = 0LL;
      memset(v9, 0, sizeof(v9));
      char v11 = -1;
      *uint64_t v1 = v3;
      if (v4 < 0) {
        break;
      }
      sub_100034EC0((uint64_t)v9, v3 + (v4 << 6) + 32, &qword_1002AA490);
      uint64_t v3 = *v1;
      uint64_t v4 = (*(void *)(*v1 + 16LL) - 1LL) & (v4 + 1);
      if (!--a1) {
        goto LABEL_12;
      }
    }

    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

uint64_t sub_10002E6AC(uint64_t a1, char a2, uint64_t a3)
{
  if ((a2 & 1) == 0) {
    return sub_100098A70(a1, 0LL, a3);
  }
  swift_errorRetain(a1);
  sub_100098A70(a1, 1LL, a3);
  return sub_100034F08(a1, 1);
}

uint64_t sub_10002E708(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    swift_errorRetain(a1);
  }
  else {
    sub_100034E9C(a1, a2);
  }
  sub_100098C6C();
  return sub_100034EB4(a1, a2, a3 & 1);
}

uint64_t sub_10002E770(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    swift_errorRetain(a1);
  }
  else {
    swift_unknownObjectRetain(a1);
  }
  sub_100098FF4();
  return sub_100034DB8(a1, a2, a3 & 1);
}

void sub_10002E7D4()
{
}

void sub_10002E7F8()
{
}

void sub_10002E814()
{
}

void sub_10002E830( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *v3;
  uint64_t v8 = sub_100035754();
  *uint64_t v3 = v7;
  if (!(_DWORD)v8) {
    *uint64_t v3 = a3(v8, *(void *)(v7 + 16) + 1LL, 1LL, v7, a1, a2);
  }
  sub_10002A3D4();
}

uint64_t sub_10002E88C()
{
  return sub_10002E8C8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10002F12C);
}

void sub_10002E898()
{
}

uint64_t sub_10002E8BC()
{
  return sub_10002E8C8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10002F70C);
}

uint64_t sub_10002E8C8(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = sub_10003532C();
  *uint64_t v1 = v3;
  if (!(_DWORD)result)
  {
    uint64_t result = a1(result, *(void *)(v3 + 16) + 1LL, 1LL, v3);
    *uint64_t v1 = result;
  }

  return result;
}

void sub_10002E918()
{
}

void sub_10002E93C()
{
}

void sub_10002E960( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = *v4;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  void *v4 = v9;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native) {
    void *v4 = a4(isUniquelyReferenced_nonNull_native, *(void *)(v9 + 16) + 1LL, 1LL, v9, a1, a2, a3);
  }
  sub_10002A3D4();
}

void sub_10002E9C8()
{
}

void sub_10002E9F0()
{
}

void sub_10002EA0C()
{
}

void sub_10002EA28()
{
  if (!(v2 ^ v3 | v1))
  {
    BOOL v4 = sub_1000356E0();
    *uint64_t v0 = v5(v4);
  }

void sub_10002EA58()
{
}

void sub_10002EA64()
{
}

void sub_10002EA88()
{
}

void sub_10002EA94()
{
  if (!(v4 ^ v5 | v3)) {
    *uint64_t v0 = v1(v2 > 1);
  }
}

void sub_10002EAC8()
{
}

uint64_t sub_10002EAEC(uint64_t result)
{
  unint64_t v2 = *(void *)((*v1 & 0xFFFFFFFFFFFFF8LL) + 0x18);
  return result;
}

void sub_10002EB18()
{
}

void sub_10002EB3C()
{
  if (!(v2 ^ v3 | v1))
  {
    BOOL v4 = sub_1000356E0();
    *uint64_t v0 = v5(v4);
  }

void sub_10002EB70()
{
  if ((v2 & 1) != 0)
  {
    sub_10003500C();
    if (v3 != v4)
    {
      sub_100035068();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  sub_100035074();
  if (v1)
  {
    uint64_t v5 = sub_1000175B0(&qword_1002AA318);
    BOOL v6 = (const void *)sub_100019310(v5, 8 * v1 + 32);
    size_t v7 = j__malloc_size(v6);
    sub_1000351E0((uint64_t)(v7 - 32) / 8);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v8 = (char *)sub_1000351D4();
    sub_100031434(v8, v9, v10);
    sub_100035038();
  }

  else
  {
    uint64_t v11 = sub_1000350FC();
    sub_10002FC04(v11, v12, v13, v14);
  }

  sub_1000193B8();
}

void sub_10002EC18()
{
  if ((v2 & 1) != 0)
  {
    sub_10003500C();
    if (v3 != v4)
    {
      sub_100035068();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  sub_100035074();
  if (v1)
  {
    uint64_t v5 = sub_1000175B0(&qword_1002A9098);
    BOOL v6 = (const void *)sub_100019310(v5, 16 * v1 + 32);
    size_t v7 = j__malloc_size(v6);
    sub_1000351E0((uint64_t)(v7 - 32) / 16);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v8 = (char *)sub_1000351D4();
    sub_100031FF8(v8, v9, v10);
    sub_100035038();
  }

  else
  {
    uint64_t v11 = sub_1000350FC();
    sub_10002FCF8(v11, v12, v13, v14);
  }

  sub_1000193B8();
}

void sub_10002ECC0()
{
}

void sub_10002ECDC()
{
  if ((v2 & 1) != 0)
  {
    sub_10003500C();
    if (v3 != v4)
    {
      sub_100035068();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  sub_100035074();
  if (v1)
  {
    uint64_t v5 = sub_1000175B0(&qword_1002AA310);
    BOOL v6 = (void *)sub_100019310(v5, 80 * v1 + 32);
    sub_100035044(v6);
  }

  if ((v0 & 1) != 0)
  {
    size_t v7 = (char *)sub_1000351D4();
    sub_100031548(v7, v8, v9);
    sub_100035038();
  }

  else
  {
    uint64_t v10 = sub_1000350FC();
    sub_10002FEE0(v10, v11, v12, v13);
  }

  sub_10002A3D4();
}

void sub_10002ED78()
{
}

void sub_10002ED8C()
{
}

void sub_10002EDA0()
{
}

void sub_10002EDBC()
{
}

void sub_10002EDD0()
{
  if ((v2 & 1) != 0)
  {
    sub_10003500C();
    if (v3 != v4)
    {
      sub_100035068();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  sub_100035334();
  if (v1)
  {
    uint64_t v10 = sub_10003511C(v5, v6, v7, v8, v9);
    uint64_t v11 = (void *)sub_100019310(v10, 40 * v1 + 32);
    sub_100035344(v11);
  }

  if ((v0 & 1) != 0)
  {
    unint64_t v12 = (char *)sub_1000355CC();
    sub_1000315D4(v12, v13, v14);
    sub_100035038();
  }

  else
  {
    uint64_t v15 = sub_1000352CC();
    sub_10002FFDC(v15, v16, v17, v18);
  }

  sub_10002A3D4();
}

void sub_10002EE64()
{
}

void sub_10002EE78()
{
}

void sub_10002EE8C()
{
  if ((v2 & 1) != 0)
  {
    sub_10003500C();
    if (v3 != v4)
    {
      sub_100035068();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  sub_100035334();
  if (v1)
  {
    uint64_t v10 = sub_10003511C(v5, v6, v7, v8, v9);
    uint64_t v11 = (void *)sub_100019310(v10, 48 * v1 + 32);
    sub_100035344(v11);
  }

  if ((v0 & 1) != 0)
  {
    unint64_t v12 = (char *)sub_1000355CC();
    sub_100031630(v12, v13, v14);
    sub_100035038();
  }

  else
  {
    uint64_t v15 = sub_1000352CC();
    sub_10003008C(v15, v16, v17, v18);
  }

  sub_10002A3D4();
}

void sub_10002EF20()
{
  if ((v2 & 1) != 0)
  {
    sub_10003500C();
    if (v3 != v4)
    {
      sub_100035068();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  sub_100035074();
  if (v1)
  {
    uint64_t v5 = sub_1000175B0(&qword_1002AA478);
    uint64_t v6 = (void *)sub_100019310(v5, 40 * v1 + 32);
    sub_100035044(v6);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v7 = (char *)sub_1000351D4();
    sub_10003168C(v7, v8, v9);
    sub_100035038();
  }

  else
  {
    uint64_t v10 = sub_1000350FC();
    sub_10003013C(v10, v11, v12, v13);
  }

  sub_10002A3D4();
}

void sub_10002EFBC()
{
  if ((v2 & 1) != 0)
  {
    sub_10003500C();
    if (v3 != v4)
    {
      sub_100035068();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  sub_100035074();
  if (v1)
  {
    uint64_t v5 = sub_1000175B0(&qword_1002AA468);
    uint64_t v6 = (void *)sub_100019310(v5, 24 * v1 + 32);
    sub_100035044(v6);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v7 = (char *)sub_1000351D4();
    sub_10003179C(v7, v8, v9);
    sub_100035038();
  }

  else
  {
    uint64_t v10 = sub_1000350FC();
    sub_100030238(v10, v11, v12, v13);
  }

  sub_10002A3D4();
}

void sub_10002F058()
{
}

void sub_10002F06C()
{
  if ((v3 & 1) != 0)
  {
    sub_10003500C();
    if (v4 != v5)
    {
      sub_100035068();
      if (v4)
      {
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  sub_100035334();
  if (v2)
  {
    uint64_t v11 = sub_10003511C(v6, v7, v8, v9, v10);
    unint64_t v12 = (void *)sub_100019310(v11, 16 * v2 + 32);
    size_t v13 = j__malloc_size(v12);
    v12[2] = v1;
    v12[3] = 2 * ((uint64_t)(v13 - 32) / 16);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v14 = (char *)sub_1000355CC();
    sub_100031FF8(v14, v15, v16);
    sub_100035038();
  }

  else
  {
    uint64_t v17 = sub_1000352CC();
    sub_100030884(v17, v18);
  }

  sub_10002A3D4();
}

void sub_10002F114()
{
}

void sub_10002F12C()
{
  if ((v2 & 1) != 0)
  {
    sub_10003500C();
    if (v3 != v4)
    {
      sub_100035068();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  sub_100035074();
  if (v1)
  {
    uint64_t v5 = sub_1000175B0(&qword_1002A92A8);
    uint64_t v6 = (const void *)sub_100019310(v5, 32 * v1 + 32);
    size_t v7 = j__malloc_size(v6);
    sub_1000351E0((uint64_t)(v7 - 32) / 32);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v8 = (char *)sub_1000351D4();
    sub_100031D50(v8, v9, v10);
    sub_100035038();
  }

  else
  {
    uint64_t v11 = sub_1000350FC();
    sub_100031288(v11, v12);
  }

  sub_1000193B8();
}

void sub_10002F1D4()
{
  if ((v2 & 1) != 0)
  {
    sub_10003500C();
    if (v3 != v4)
    {
      sub_100035068();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  sub_100035074();
  if (v1)
  {
    uint64_t v5 = sub_1000175B0(&qword_1002AA3E0);
    uint64_t v6 = (void *)sub_100019310(v5, 48 * v1 + 32);
    sub_100035044(v6);
  }

  if ((v0 & 1) != 0)
  {
    size_t v7 = (char *)sub_1000351D4();
    sub_1000318DC(v7, v8, v9);
    sub_100035038();
  }

  else
  {
    uint64_t v10 = sub_1000350FC();
    sub_100030354(v10, v11, v12, v13);
  }

  sub_10002A3D4();
}

void sub_10002F270()
{
}

void sub_10002F28C()
{
  if ((v2 & 1) != 0)
  {
    sub_10003500C();
    if (v3 != v4)
    {
      sub_100035068();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  sub_10003510C();
  if (v1)
  {
    uint64_t v10 = sub_10003511C(v5, v6, v7, v8, v9);
    uint64_t v11 = (void *)sub_100019310(v10, 8 * v1 + 32);
    size_t v12 = j__malloc_size(v11);
    sub_10003517C(v12 - 32);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  if ((v0 & 1) != 0)
  {
    sub_1000352B4();
    sub_100035038();
  }

  else
  {
    sub_100035200(v5, v6, (uint64_t)(v11 + 4));
  }

  sub_10002A3D4();
}

void sub_10002F324()
{
}

void sub_10002F338()
{
  if ((v5 & 1) != 0)
  {
    sub_10003500C();
    if (v9 != v10)
    {
      sub_100035068();
      if (v9)
      {
        __break(1u);
LABEL_22:
        sub_100034FD0();
        __int128 v25 = "Division by zero";
        uint64_t v26 = 16LL;
LABEL_24:
        sub_1000356D4((uint64_t)"Fatal error", 11LL, 2LL, (uint64_t)v25, v26, v24, (uint64_t)"Swift/IntegerTypes.swift");
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  else
  {
    uint64_t v8 = v4;
  }

  uint64_t v11 = *(void *)(v0 + 16);
  if (v8 <= v11) {
    uint64_t v12 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v12 = v8;
  }
  if (!v12) {
    goto LABEL_17;
  }
  uint64_t v13 = sub_10003511C(v3, v4, v5, v6, v7);
  uint64_t v14 = *(void *)(v1(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t v19 = j__malloc_size(v18);
  if (!v15) {
    goto LABEL_22;
  }
  if (v19 - v17 == 0x8000000000000000LL && v15 == -1)
  {
    sub_100034FD0();
    __int128 v25 = "Division results in an overflow";
    uint64_t v26 = 31LL;
    goto LABEL_24;
  }

  _OWORD v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_17:
  v1(0LL);
  sub_1000353F8();
  if ((v2 & 1) != 0)
  {
    sub_100031C40(v0 + v21, v11);
    sub_100035038();
  }

  else
  {
    uint64_t v22 = sub_1000352CC();
    sub_10003079C(v22, v23);
  }

  sub_10002A568();
}

void sub_10002F49C()
{
}

void sub_10002F4B8()
{
  if ((v3 & 1) != 0)
  {
    sub_10003500C();
    if (v4 != v5)
    {
      sub_100035068();
      if (v4)
      {
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  sub_10003510C();
  if (v2)
  {
    uint64_t v11 = sub_10003511C(v6, v7, v8, v9, v10);
    uint64_t v12 = (void *)sub_100019310(v11, v2 + 32);
    size_t v6 = j__malloc_size(v12);
    v12[2] = v1;
    v12[3] = 2 * v6 - 64;
  }

  else
  {
    uint64_t v12 = _swiftEmptyArrayStorage;
  }

  if ((v0 & 1) != 0)
  {
    sub_1000352B4();
    sub_100035038();
  }

  else
  {
    sub_100035200(v6, v7, (uint64_t)(v12 + 4));
  }

  sub_10002A3D4();
}

void sub_10002F54C()
{
}

void sub_10002F568()
{
  if ((v3 & 1) != 0)
  {
    sub_10003500C();
    if (v5 != v6)
    {
      sub_100035068();
      if (v5)
      {
        __break(1u);
LABEL_22:
        sub_100034FD0();
        uint64_t v23 = "Division by zero";
        uint64_t v24 = 16LL;
LABEL_24:
        sub_1000356D4((uint64_t)"Fatal error", 11LL, 2LL, (uint64_t)v23, v24, v22, (uint64_t)"Swift/IntegerTypes.swift");
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  else
  {
    uint64_t v4 = v2;
  }

  uint64_t v7 = *(void *)(v0 + 16);
  if (v4 <= v7) {
    uint64_t v8 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v8 = v4;
  }
  if (!v8) {
    goto LABEL_17;
  }
  uint64_t v9 = sub_1000175B0(&qword_1002AA320);
  uint64_t v10 = *(void *)(sub_1000175B0(&qword_1002AA328) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 32) & ~v12;
  uint64_t v14 = (const void *)swift_allocObject(v9, v13 + v11 * v8, v12 | 7);
  size_t v15 = j__malloc_size(v14);
  if (!v11) {
    goto LABEL_22;
  }
  if (v15 - v13 == 0x8000000000000000LL && v11 == -1)
  {
    sub_100034FD0();
    uint64_t v23 = "Division results in an overflow";
    uint64_t v24 = 31LL;
    goto LABEL_24;
  }

  sub_1000351E0((uint64_t)(v15 - v13) / v11);
LABEL_17:
  sub_1000175B0(&qword_1002AA328);
  sub_1000353F8();
  if ((v1 & 1) != 0)
  {
    sub_100031A4C(v0 + v17, v7);
    sub_100035038();
  }

  else
  {
    uint64_t v18 = sub_1000350FC();
    sub_100030584(v18, v19, v20, v21);
  }

  sub_10002A568();
}

void sub_10002F6DC()
{
}

void sub_10002F6F8()
{
}

void sub_10002F70C()
{
  if ((v2 & 1) != 0)
  {
    sub_10003500C();
    if (v3 != v4)
    {
      sub_100035068();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  sub_100035074();
  if (v1)
  {
    uint64_t v5 = sub_1000175B0(&qword_1002AA518);
    char v6 = (void *)sub_100019310(v5, 80 * v1 + 32);
    sub_100035044(v6);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v7 = (char *)sub_1000351D4();
    sub_100031F98(v7, v8, v9);
    sub_100035038();
  }

  else
  {
    uint64_t v10 = sub_1000350FC();
    sub_100030EA0(v10, v11);
  }

  sub_10002A3D4();
}

void sub_10002F7A8()
{
}

void sub_10002F7BC()
{
  if ((v2 & 1) != 0)
  {
    sub_10003500C();
    if (v3 != v4)
    {
      sub_100035068();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  sub_100035074();
  if (v1)
  {
    uint64_t v5 = sub_1000175B0(&qword_1002AA430);
    char v6 = (void *)sub_100019310(v5, 112 * v1 + 32);
    sub_100035044(v6);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v7 = (char *)sub_1000351D4();
    sub_100031CC8(v7, v8, v9);
    sub_100035038();
  }

  else
  {
    uint64_t v10 = sub_1000350FC();
    sub_100030938(v10, v11, v12, v13);
  }

  sub_10002A3D4();
}

void sub_10002F858()
{
}

void sub_10002F874()
{
  if ((v2 & 1) != 0)
  {
    sub_10003500C();
    if (v3 != v4)
    {
      sub_100035068();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  sub_10003510C();
  if (v1)
  {
    uint64_t v10 = sub_10003511C(v5, v6, v7, v8, v9);
    uint64_t v11 = (void *)sub_100019310(v10, (v1 << 6) | 0x20);
    size_t v12 = j__malloc_size(v11);
    sub_10003517C(v12 - 32);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  if ((v0 & 1) != 0)
  {
    sub_1000352B4();
    sub_100035038();
  }

  else
  {
    sub_100035200(v5, v6, (uint64_t)(v11 + 4));
  }

  sub_10002A3D4();
}

void sub_10002F90C()
{
}

void sub_10002F928()
{
}

void sub_10002F944()
{
  if ((v2 & 1) != 0)
  {
    sub_10003500C();
    if (v3 != v4)
    {
      sub_100035068();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  sub_10003510C();
  if (v1)
  {
    uint64_t v10 = sub_10003511C(v5, v6, v7, v8, v9);
    uint64_t v11 = (void *)sub_100019310(v10, 32 * v1 + 32);
    size_t v12 = j__malloc_size(v11);
    sub_10003517C(v12 - 32);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  if ((v0 & 1) != 0)
  {
    sub_1000352B4();
    sub_100035038();
  }

  else
  {
    sub_100035200(v5, v6, (uint64_t)(v11 + 4));
  }

  sub_10002A3D4();
}

void sub_10002F9DC()
{
  if ((v2 & 1) != 0)
  {
    sub_10003500C();
    if (v3 != v4)
    {
      sub_100035068();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  sub_100035074();
  if (v1)
  {
    uint64_t v5 = sub_1000175B0(&qword_1002AA440);
    uint64_t v6 = (void *)sub_100019310(v5, 136 * v1 + 32);
    sub_100035044(v6);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v7 = (char *)sub_1000351D4();
    sub_100031EB4(v7, v8, v9);
    sub_100035038();
  }

  else
  {
    uint64_t v10 = sub_1000350FC();
    sub_100030D10(v10, v11, v12, v13);
  }

  sub_10002A3D4();
}

void sub_10002FA78()
{
}

void sub_10002FA98()
{
  if ((v2 & 1) != 0)
  {
    sub_10003500C();
    if (v3 != v4)
    {
      sub_100035068();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  sub_100035074();
  if (v1)
  {
    uint64_t v5 = sub_1000175B0(&qword_1002AA530);
    uint64_t v6 = (void *)sub_100019310(v5, 24 * v1 + 32);
    sub_100035044(v6);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v7 = (char *)sub_1000351D4();
    sub_100031DA8(v7, v8, v9);
    sub_100035038();
  }

  else
  {
    uint64_t v10 = sub_1000350FC();
    sub_100030F64(v10, v11, v12, v13);
  }

  sub_10002A3D4();
}

void sub_10002FB34()
{
  if ((v2 & 1) != 0)
  {
    sub_10003500C();
    if (v3 != v4)
    {
      sub_100035068();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  sub_10003510C();
  if (v1)
  {
    uint64_t v10 = sub_10003511C(v5, v6, v7, v8, v9);
    uint64_t v11 = (void *)sub_100019310(v10, 16 * v1 + 32);
    size_t v12 = j__malloc_size(v11);
    sub_10003517C(v12 - 32);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  if ((v0 & 1) != 0)
  {
    sub_1000352B4();
    sub_100035038();
  }

  else
  {
    sub_100035200(v5, v6, (uint64_t)(v11 + 4));
  }

  sub_10002A3D4();
}

void sub_10002FBCC()
{
}

void sub_10002FBE8()
{
}

uint64_t sub_10002FC04(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 8 * a1 + 32;
  unint64_t v7 = a3 + 8 * v4;
  if (v6 >= v7 || v6 + 8 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10002FCF8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 16 * a1 + 32;
  unint64_t v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10002FDEC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 32 * a1 + 32;
  unint64_t v7 = a3 + 32 * v4;
  if (v6 >= v7 || v6 + 32 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10002FEE0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 80 * a1 + 32;
  unint64_t v7 = a3 + 80 * v4;
  if (v6 >= v7 || v6 + 80 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

void sub_10002FFDC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    sub_100034FD0();
    sub_1000351B8();
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 40 * a1 + 32;
  if (v5 >= a3 + 40 * v4 || v5 + 40 * v4 <= a3)
  {
    sub_100035624(a1, v5, a3);
    sub_100019390();
    sub_100013868();
    return;
  }

  sub_100034FD0();
  sub_1000351A8();
LABEL_11:
  sub_10003502C(v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17);
  __break(1u);
}

void sub_10003008C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    sub_100034FD0();
    sub_1000351B8();
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 48 * a1 + 32;
  if (v5 >= a3 + 48 * v4 || v5 + 48 * v4 <= a3)
  {
    sub_100035624(a1, v5, a3);
    sub_100019390();
    sub_100013868();
    return;
  }

  sub_100034FD0();
  sub_1000351A8();
LABEL_11:
  sub_10003502C(v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17);
  __break(1u);
}

uint64_t sub_10003013C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 40 * a1 + 32;
  unint64_t v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100030238(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 24 * a1 + 32;
  unint64_t v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    sub_1000175B0(&qword_1002AA470);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease();
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100030354(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t v10 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v11 = 51LL;
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 48 * a1 + 32;
  unint64_t v7 = a3 + 48 * v4;
  if (v6 >= v7 || v6 + 48 * v4 <= a3)
  {
    sub_1000175B0(&qword_1002AA3E8);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease();
    return v7;
  }

  uint64_t v10 = "UnsafeMutablePointer.initialize overlapping range";
  uint64_t v11 = 49LL;
LABEL_11:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v10,  v11,  2LL,  "Swift/UnsafePointer.swift",  25LL);
  __break(1u);
  return result;
}

uint64_t sub_100030470(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 8 * a1 + 32;
  unint64_t v7 = a3 + 8 * v4;
  if (v6 >= v7 || v6 + 8 * v4 <= a3)
  {
    sub_1000175B0(&qword_1002AA338);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease();
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100030584(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    int v17 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v18 = 51LL;
    goto LABEL_11;
  }

  uint64_t v8 = *(void *)(sub_1000175B0(&qword_1002AA328) - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 72);
  unint64_t v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  uint64_t v12 = v10 * v4;
  unint64_t v13 = a3 + v12;
  unint64_t v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease();
    return v13;
  }

  int v17 = "UnsafeMutablePointer.initialize overlapping range";
  uint64_t v18 = 49LL;
LABEL_11:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v17,  v18,  2LL,  "Swift/UnsafePointer.swift",  25LL);
  __break(1u);
  return result;
}

uint64_t sub_1000306A8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + (a1 << 6) + 32;
  unint64_t v7 = a3 + (v4 << 6);
  if (v6 >= v7 || v6 + (v4 << 6) <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10003079C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    sub_100034FD0();
    sub_1000351B8();
    goto LABEL_11;
  }

  sub_1000355D8();
  uint64_t v6 = v5;
  uint64_t v8 = *(void *)(v7(0LL) - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 72);
  unint64_t v11 = v2 + ((v9 + 32) & ~v9) + v10 * v6;
  uint64_t v12 = v10 * v4;
  unint64_t v13 = v3 + v12;
  unint64_t v14 = v11 + v12;
  if (v11 >= v13 || v14 <= v3)
  {
    swift_arrayInitWithCopy(v3);
    sub_100019390();
    return v13;
  }

  sub_100034FD0();
  sub_1000351A8();
LABEL_11:
  uint64_t result = sub_10003502C(v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27);
  __break(1u);
  return result;
}

void sub_100030884(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v2 < 0)
  {
LABEL_9:
    sub_100034FD0();
    sub_1000351B8();
    goto LABEL_11;
  }

  sub_1000355D8();
  unint64_t v8 = v6 + 16 * v3 + 32;
  if (v8 >= v5 + 16 * v2 || v8 + 16 * v2 <= v5)
  {
    sub_10003511C(v3, v4, v5, v6, v7);
    sub_1000352FC();
    sub_100019390();
    sub_100019398();
    return;
  }

  sub_100034FD0();
  sub_1000351A8();
LABEL_11:
  sub_10003502C(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  __break(1u);
}

uint64_t sub_100030938(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 112 * a1 + 32;
  unint64_t v7 = a3 + 112 * v4;
  if (v6 >= v7 || v6 + 112 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100030A38(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + (a1 << 6) + 32;
  unint64_t v7 = a3 + (v4 << 6);
  if (v6 >= v7 || v6 + (v4 << 6) <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_100030B2C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = (char *)(a4 + 8 * a1 + 32);
  unint64_t v7 = &__dst[8 * v4];
  if (v6 >= v7 || &v6[8 * v4] <= __dst)
  {
    memcpy(__dst, v6, 8 * v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100030C1C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 32 * a1 + 32;
  unint64_t v7 = a3 + 32 * v4;
  if (v6 >= v7 || v6 + 32 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100030D10(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 136 * a1 + 32;
  unint64_t v7 = a3 + 136 * v4;
  if (v6 >= v7 || v6 + 136 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

void sub_100030E0C(uint64_t a1, uint64_t a2)
{
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (a2 - a1 < 0)
  {
LABEL_9:
    sub_100034FD0();
    sub_1000351B8();
    goto LABEL_11;
  }

  sub_1000354EC();
  if (v6) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = v5 > (unint64_t)v3;
  }
  if (!v7)
  {
    sub_100035774(v3, v2, v4);
    sub_100019390();
    sub_100013868();
    return;
  }

  sub_100034FD0();
  sub_1000351A8();
LABEL_11:
  sub_10003502C(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
}

void sub_100030EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v2 < 0)
  {
LABEL_9:
    sub_100034FD0();
    sub_1000351B8();
    goto LABEL_11;
  }

  sub_1000355D8();
  unint64_t v6 = v5 + 80 * v4 + 32;
  if (v6 >= v3 + 80 * v2 || v6 + 80 * v2 <= v3)
  {
    sub_1000175B0(&qword_1002AA520);
    sub_1000352FC();
    sub_100019390();
    sub_100019398();
    return;
  }

  sub_100034FD0();
  sub_1000351A8();
LABEL_11:
  sub_10003502C(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
}

uint64_t sub_100030F64(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v7 = a4 + 24 * a1 + 32;
  unint64_t v8 = a3 + 24 * v4;
  if (v7 >= v8 || v7 + 24 * v4 <= a3)
  {
    sub_1000175B0(&qword_1002AA538);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100031080(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 16 * a1 + 32;
  unint64_t v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100031174(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t v10 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v11 = 51LL;
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 16 * a1 + 32;
  unint64_t v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    sub_1000175B0(&qword_1002AA398);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease();
    return v7;
  }

  uint64_t v10 = "UnsafeMutablePointer.initialize overlapping range";
  uint64_t v11 = 49LL;
LABEL_11:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v10,  v11,  2LL,  "Swift/UnsafePointer.swift",  25LL);
  __break(1u);
  return result;
}

void sub_100031288(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v2 < 0)
  {
LABEL_9:
    sub_100034FD0();
    sub_1000351B8();
    goto LABEL_11;
  }

  sub_1000355D8();
  unint64_t v6 = v5 + 32 * v4 + 32;
  if (v6 >= v3 + 32 * v2 || v6 + 32 * v2 <= v3)
  {
    sub_1000175B0(&qword_1002AA500);
    sub_1000352FC();
    sub_100019390();
    sub_100019398();
    return;
  }

  sub_100034FD0();
  sub_1000351A8();
LABEL_11:
  sub_10003502C(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
}

char *sub_100031344(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = (char *)(a4 + 16 * a1 + 32);
  unint64_t v7 = &__dst[16 * v4];
  if (v6 >= v7 || &v6[16 * v4] <= __dst)
  {
    memcpy(__dst, v6, 16 * v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_100031434(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }

  return __src;
}

char *sub_1000314C4(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[32 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 32 * a2);
  }

  return __src;
}

char *sub_100031548(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[80 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 80 * a2);
  }

  return __src;
}

char *sub_1000315D4(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100034FD0();
    uint64_t result = (char *)sub_100034FE4( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_100034FFC(a3, result);
  }

  return result;
}

char *sub_100031630(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100034FD0();
    uint64_t result = (char *)sub_100034FE4( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[48 * a2] <= a3)
  {
    return (char *)sub_100034FFC(a3, result);
  }

  return result;
}

char *sub_10003168C(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[40 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 40 * a2);
  }

  return __src;
}

char *sub_100031718(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }

  return __src;
}

char *sub_10003179C(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100034FD0();
    uint64_t result = (char *)sub_100034FE4( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_100034FFC(a3, result);
  }

  return result;
}

char *sub_1000317FC(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100034FD0();
    uint64_t result = (char *)sub_100034FE4( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_100034FFC(a3, result);
  }

  return result;
}

char *sub_100031858(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[64 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, a2 << 6);
  }

  return __src;
}

char *sub_1000318DC(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[48 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 48 * a2);
  }

  return __src;
}

char *sub_100031968(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100034FD0();
    uint64_t result = (char *)sub_100034FE4( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_100034FFC(a3, result);
  }

  return result;
}

char *sub_1000319C0(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[248 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 248 * a2);
  }

  return __src;
}

void sub_100031A4C(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100034FD0();
    sub_100034FE4( (uint64_t)"Fatal error",  v7,  v8,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v9,  v10,  (uint64_t)"Swift/UnsafePointer.swift",  v11,  v12,  v13,  v14);
    __break(1u);
  }

  else
  {
    sub_1000355EC();
    if (v5 && (sub_1000175B0(v4), sub_100035658(), !v6 & v5))
    {
      if (v3 == v2)
      {
        sub_100013858();
      }

      else
      {
        sub_1000352E8();
        sub_1000353C0();
      }
    }

    else
    {
      sub_1000175B0(v4);
      sub_1000352E8();
      sub_1000353D0();
    }
  }

char *sub_100031AD4(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[224 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 224 * a2);
  }

  return __src;
}

char *sub_100031B5C(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100034FD0();
    uint64_t result = (char *)sub_100034FE4( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[64 * a2] <= a3)
  {
    return (char *)sub_100034FFC(a3, result);
  }

  return result;
}

char *sub_100031BB4(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[72 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 72 * a2);
  }

  return __src;
}

void sub_100031C40(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100034FD0();
    sub_100034FE4( (uint64_t)"Fatal error",  v7,  v8,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v9,  v10,  (uint64_t)"Swift/UnsafePointer.swift",  v11,  v12,  v13,  v14);
    __break(1u);
  }

  else
  {
    sub_1000355EC();
    if (v5 && (v4(0LL), sub_100035658(), !v6 & v5))
    {
      if (v3 == v2)
      {
        sub_100013858();
      }

      else
      {
        sub_1000352E8();
        sub_1000353C0();
      }
    }

    else
    {
      v4(0LL);
      sub_1000352E8();
      sub_1000353D0();
    }
  }

char *sub_100031CC8(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[112 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 112 * a2);
  }

  return __src;
}

char *sub_100031D50(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100034FD0();
    uint64_t result = (char *)sub_100034FE4( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_100034FFC(a3, result);
  }

  return result;
}

char *sub_100031DA8(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }

  return __src;
}

char *sub_100031E34(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000LL) != 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }

  return __src;
}

char *sub_100031EB4(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[136 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 136 * a2);
  }

  return __src;
}

char *sub_100031F40(char *result, size_t a2, char *a3)
{
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    sub_100034FD0();
    uint64_t result = (char *)sub_100034FE4( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[a2] <= a3)
  {
    return (char *)sub_1000354A0(a3, result, a2);
  }

  return result;
}

char *sub_100031F98(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100034FD0();
    uint64_t result = (char *)sub_100034FE4( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[80 * a2] <= a3)
  {
    return (char *)sub_100034FFC(a3, result);
  }

  return result;
}

char *sub_100031FF8(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100034FD0();
    uint64_t result = (char *)sub_100034FE4( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_100034FFC(a3, result);
  }

  return result;
}

void sub_100032050()
{
  *char v0 = v1;
}

void sub_100032084()
{
  *char v0 = v1;
}

void sub_1000320B0()
{
  *char v0 = v1;
}

void sub_1000320E4()
{
  *char v0 = v1;
}

void sub_100032118()
{
  *char v0 = v1;
}

void sub_100032144()
{
  *char v0 = v1;
}

char *sub_100032178(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_100032904(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_100032194()
{
  *char v0 = v1;
}

void sub_1000321C8()
{
  *char v0 = v1;
}

void sub_1000321FC()
{
  *char v0 = v1;
}

void sub_100032230()
{
  *char v0 = v1;
}

void sub_100032264()
{
  *char v0 = v1;
}

void sub_100032298()
{
  *char v0 = v1;
}

void sub_1000322B4()
{
  *char v0 = v1;
}

void sub_1000322E8()
{
  *char v0 = v1;
}

char *sub_10003231C(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_100032BAC(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

size_t sub_100032338(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_100032C94(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void sub_100032354()
{
  *char v0 = v1;
}

char *sub_100032388(char *a1, int64_t a2, char a3)
{
  size_t result = sub_100032E84(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_1000323A4()
{
  *char v0 = v1;
}

void sub_1000323D8()
{
  *char v0 = v1;
}

void sub_10003240C()
{
  *char v0 = v1;
}

void sub_100032438()
{
  *char v0 = v1;
}

void sub_100032454()
{
  *char v0 = v1;
}

uint64_t sub_100032488(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 2) {
    return swift_bridgeObjectRelease();
  }
  if (a4 != 1)
  {
    if (a4) {
      return result;
    }
    swift_release(result);
    return swift_bridgeObjectRelease();
  }

  return sub_100018F04(result);
}

uint64_t sub_1000324E0()
{
  return sub_10002C464();
}

uint64_t sub_1000324E8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10003251C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10018B430(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24));
}

void sub_100032524()
{
  *char v0 = v1;
}

char *sub_100032558(char *a1, int64_t a2, char a3)
{
  size_t result = sub_100033284(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_100032574()
{
  *char v0 = v1;
}

char *sub_1000325A8(char *a1, int64_t a2, char a3)
{
  size_t result = sub_10003336C(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_1000325C4()
{
  *char v0 = v1;
}

void sub_1000325F8()
{
  *char v0 = v1;
}

void sub_100032624()
{
  *char v0 = v1;
}

char *sub_100032658(char *a1, int64_t a2, char a3)
{
  size_t result = sub_100033598(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

char *sub_100032674(char *a1, int64_t a2, char a3)
{
  size_t result = sub_100033680(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_100032690()
{
  *char v0 = v1;
}

void sub_1000326C4()
{
  *char v0 = v1;
}

void sub_1000326F8()
{
  *char v0 = v1;
}

void *sub_10003272C(void *a1, int64_t a2, char a3)
{
  size_t result = sub_100033754(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void sub_100032748()
{
  *char v0 = v1;
}

void sub_10003277C()
{
  *char v0 = v1;
}

void sub_1000327B0()
{
}

void sub_1000327CC()
{
  if ((v4 & 1) != 0)
  {
    sub_10003500C();
    if (v5 != v6)
    {
      sub_100035068();
      if (v5)
      {
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  sub_100035334();
  if (v3)
  {
    uint64_t v12 = sub_10003511C(v7, v8, v9, v10, v11);
    uint64_t v13 = (void *)sub_100019310(v12, 40 * v3 + 32);
    sub_100035344(v13);
  }

  int v14 = (char *)sub_1000355CC();
  if ((v2 & 1) != 0)
  {
    sub_1000315D4(v14, v15, v16);
    *(void *)(v0 + 16) = 0LL;
  }

  else
  {
    v1(v14);
  }

  sub_10001EDD8();
  sub_10002A3D4();
}

void sub_100032860()
{
  if ((v6 & 1) != 0)
  {
    sub_10003500C();
    if (v7 != v8)
    {
      sub_100035068();
      if (v7)
      {
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  sub_10003510C();
  if (v5)
  {
    uint64_t v14 = sub_10003511C(v9, v10, v11, v12, v13);
    uint64_t v15 = (void *)sub_100019310(v14, 24 * v5 + 32);
    size_t v16 = j__malloc_size(v15);
    void v15[2] = v4;
    v15[3] = 2 * ((uint64_t)(v16 - 32) / 24);
  }

  uint64_t v17 = sub_100035230();
  if ((v3 & 1) != 0)
  {
    v2(v17);
    *(void *)(v0 + 16) = 0LL;
  }

  else
  {
    v1(v17);
  }

  sub_10001EDD8();
  sub_100023E74();
}

char *sub_100032904(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1000175B0(&qword_1002AA488);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_100031718(v13, v8, v11 + 32);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_10018E740((uint64_t)v13, v8);
  }

  swift_release(a4);
  return v11;
}

void sub_1000329E4()
{
}

void sub_100032A00()
{
}

void sub_100032A1C()
{
}

void sub_100032A38()
{
}

void sub_100032A54()
{
  if ((v3 & 1) != 0)
  {
    sub_10003500C();
    if (v4 != v5)
    {
      sub_100035068();
      if (v4)
      {
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  sub_100035074();
  if (v2)
  {
    uint64_t v6 = sub_1000175B0(&qword_1002AA388);
    uint64_t v7 = (const void *)sub_100019310(v6, (v2 << 6) | 0x20);
    size_t v8 = j__malloc_size(v7);
    sub_1000351E0((uint64_t)(v8 - 32) / 64);
  }

  uint64_t v9 = (char *)sub_1000351D4();
  if ((v1 & 1) != 0)
  {
    sub_100031858(v9, v10, v11);
    *(void *)(v0 + 16) = 0LL;
  }

  else
  {
    sub_10018E9BC((uint64_t)v9, v10);
  }

  sub_10001EDD8();
  sub_1000193B8();
}

void sub_100032AFC()
{
}

void sub_100032B10()
{
  if ((v5 & 1) != 0)
  {
    sub_10003500C();
    if (v6 != v7)
    {
      sub_100035068();
      if (v6)
      {
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  sub_10003510C();
  if (v4)
  {
    uint64_t v13 = sub_10003511C(v8, v9, v10, v11, v12);
    uint64_t v14 = (const void *)sub_100019310(v13, 32 * v4 + 32);
    size_t v15 = j__malloc_size(v14);
    sub_10003517C(v15 - 32);
  }

  uint64_t v16 = sub_100035230();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(void *)(v0 + 16) = 0LL;
  }

  else
  {
    v1(v16);
  }

  sub_10001EDD8();
  sub_10002A3D4();
}

char *sub_100032BAC(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1000175B0(&qword_1002AA448);
    uint64_t v11 = (char *)swift_allocObject(v10, 248 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 248);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    sub_1000319C0((char *)(a4 + 32), v8, v11 + 32);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_10018ECC8();
  }

  swift_release(a4);
  return v11;
}

size_t sub_100032C94(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    size_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_1000175B0(&qword_1002AA350);
  uint64_t v11 = *(void *)(sub_1000175B0(&qword_1002AA358) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  size_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if (result - v14 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_24;
  }
  void v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  uint64_t v17 = *(unsigned __int8 *)(*(void *)(sub_1000175B0(&qword_1002AA358) - 8) + 80LL);
  uint64_t v18 = a4 + ((v17 + 32) & ~v17);
  if ((v5 & 1) != 0)
  {
    sub_100031A4C(v18, v8);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_10018ED5C(v18, v8);
  }

  swift_release();
  return (size_t)v15;
}

void sub_100032DE8()
{
  if ((v5 & 1) != 0)
  {
    sub_10003500C();
    if (v6 != v7)
    {
      sub_100035068();
      if (v6)
      {
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  sub_10003510C();
  if (v4)
  {
    uint64_t v13 = sub_10003511C(v8, v9, v10, v11, v12);
    uint64_t v14 = (const void *)sub_100019310(v13, (v4 << 6) | 0x20);
    size_t v15 = j__malloc_size(v14);
    sub_10003517C(v15 - 32);
  }

  uint64_t v16 = sub_100035230();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(void *)(v0 + 16) = 0LL;
  }

  else
  {
    v1(v16);
  }

  sub_10001EDD8();
  sub_10002A3D4();
}

char *sub_100032E84(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1000175B0(&qword_1002AA438);
    uint64_t v11 = (char *)swift_allocObject(v10, 224 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 224);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    sub_100031AD4((char *)(a4 + 32), v8, v11 + 32);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_10018EE78();
  }

  swift_release(a4);
  return v11;
}

void sub_100032F6C()
{
  if ((v6 & 1) != 0)
  {
    sub_10003500C();
    if (v10 != v11)
    {
      sub_100035068();
      if (v10)
      {
LABEL_24:
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  else
  {
    uint64_t v9 = v5;
  }

  uint64_t v12 = *(void *)(v0 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (!v13)
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }

  uint64_t v14 = sub_10003511C(v4, v5, v6, v7, v8);
  uint64_t v15 = *(void *)(v2(0LL) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (v17 + 32) & ~v17;
  uint64_t v19 = (void *)swift_allocObject(v14, v18 + v16 * v13, v17 | 7);
  size_t v20 = j__malloc_size(v19);
  if (!v16)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  if (v20 - v18 == 0x8000000000000000LL && v16 == -1) {
    goto LABEL_23;
  }
  void v19[2] = v12;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v16);
LABEL_18:
  v2(0LL);
  sub_1000353F8();
  uint64_t v23 = v0 + v22;
  if ((v3 & 1) != 0)
  {
    sub_100031C40(v23, v12);
    *(void *)(v0 + 16) = 0LL;
  }

  else
  {
    v1(v23, v12, (char *)v19 + v22);
  }

  sub_10001EDD8();
}

void sub_100033080()
{
  if ((v3 & 1) != 0)
  {
    sub_10003500C();
    if (v4 != v5)
    {
      sub_100035068();
      if (v4)
      {
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  sub_100035074();
  if (v2)
  {
    uint64_t v6 = sub_1000175B0(&qword_1002AA4C8);
    uint64_t v7 = (void *)sub_100019310(v6, 72 * v2 + 32);
    sub_100035044(v7);
  }

  uint64_t v8 = (char *)sub_1000351D4();
  if ((v1 & 1) != 0)
  {
    sub_100031BB4(v8, v9, v10);
    *(void *)(v0 + 16) = 0LL;
  }

  else
  {
    sub_10018EF0C((uint64_t)v8, v9);
  }

  sub_10001EDD8();
  sub_10002A3D4();
}

void sub_10003311C()
{
}

void sub_100033138()
{
  if ((v5 & 1) != 0)
  {
    sub_10003500C();
    if (v6 != v7)
    {
      sub_100035068();
      if (v6)
      {
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  sub_10003510C();
  if (v4)
  {
    uint64_t v13 = sub_10003511C(v8, v9, v10, v11, v12);
    uint64_t v14 = (const void *)sub_100019310(v13, 16 * v4 + 32);
    size_t v15 = j__malloc_size(v14);
    sub_10003517C(v15 - 32);
  }

  uint64_t v16 = sub_100035230();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(void *)(v0 + 16) = 0LL;
  }

  else
  {
    v1(v16);
  }

  sub_10001EDD8();
  sub_10002A3D4();
}

void sub_1000331D4()
{
  if ((v4 & 1) != 0)
  {
    sub_10003500C();
    if (v5 != v6)
    {
      sub_100035068();
      if (v5)
      {
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  sub_100035074();
  if (v3)
  {
    uint64_t v7 = sub_1000175B0((uint64_t *)&unk_1002AFCE0);
    uint64_t v8 = (void *)sub_100019310(v7, 8 * v3 + 32);
    size_t v9 = j__malloc_size(v8);
    _OWORD v8[2] = v2;
    v8[3] = (2 * ((uint64_t)(v9 - 32) / 8)) | 1;
  }

  uint64_t v10 = (char *)sub_1000351D4();
  if ((v1 & 1) != 0)
  {
    sub_100031968(v10, v11, v12);
    *(void *)(v0 + 16) = 0LL;
  }

  else
  {
    sub_10018EFB8((uint64_t)v10, v11);
  }

  sub_10001EDD8();
  sub_1000193B8();
}

char *sub_100033284(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1000175B0(&qword_1002AA518);
    uint64_t v11 = (char *)swift_allocObject(v10, 80 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 80);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_100031F98(v13, v8, v11 + 32);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_10018EFD0((uint64_t)v13, v8);
  }

  swift_release();
  return v11;
}

char *sub_10003336C(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1000175B0(&qword_1002AA430);
    uint64_t v11 = (char *)swift_allocObject(v10, 112 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 112);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    sub_100031CC8((char *)(a4 + 32), v8, v11 + 32);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_10018F088();
  }

  swift_release(a4);
  return v11;
}

void sub_100033454()
{
  if ((v5 & 1) != 0)
  {
    sub_10003500C();
    if (v6 != v7)
    {
      sub_100035068();
      if (v6)
      {
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  sub_100035334();
  if (v4)
  {
    uint64_t v13 = sub_10003511C(v8, v9, v10, v11, v12);
    uint64_t v14 = (void *)sub_100019310(v13, 32 * v4 + 32);
    size_t v15 = j__malloc_size(v14);
    void v14[2] = v3;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 32);
  }

  uint64_t v16 = (char *)sub_1000355CC();
  if ((v2 & 1) != 0)
  {
    sub_100031D50(v16, v17, v18);
    *(void *)(v0 + 16) = 0LL;
  }

  else
  {
    v1(v16);
  }

  sub_10001EDD8();
  sub_10002A3D4();
}

void sub_1000334FC()
{
  if ((v5 & 1) != 0)
  {
    sub_10003500C();
    if (v6 != v7)
    {
      sub_100035068();
      if (v6)
      {
        __break(1u);
        return;
      }

      sub_10003501C();
    }
  }

  sub_10003510C();
  if (v4)
  {
    uint64_t v13 = sub_10003511C(v8, v9, v10, v11, v12);
    uint64_t v14 = (const void *)sub_100019310(v13, 8 * v4 + 32);
    size_t v15 = j__malloc_size(v14);
    sub_10003517C(v15 - 32);
  }

  uint64_t v16 = sub_100035230();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(void *)(v0 + 16) = 0LL;
  }

  else
  {
    v1(v16);
  }

  sub_10001EDD8();
  sub_10002A3D4();
}

char *sub_100033598(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1000175B0((uint64_t *)&unk_1002AFD10);
    uint64_t v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_100031DA8(v13, v8, v11 + 32);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_10018F2CC((uint64_t)v13, v8);
  }

  swift_release(a4);
  return v11;
}

char *sub_100033680(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1000175B0(&qword_1002AA3F8);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    sub_100031E34((char *)(a4 + 32), v8, v11 + 32);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_10018F11C();
  }

  swift_release();
  return v11;
}

void *sub_100033754(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1000175B0(&qword_1002AA508);
    uint64_t v11 = (void *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 8);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v13 = (unint64_t)(v11 + 4);
  uint64_t v14 = a4 + 4;
  if ((v5 & 1) != 0)
  {
    a4[2] = 0LL;
  }

  else
  {
    sub_10018F2C8(a4 + 4, v8, v13);
  }

  swift_release();
  return v11;
}

void sub_100033854()
{
}

uint64_t sub_100033870(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v45 = a2;
  int8x16_t v38 = a1;
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  if (!v3) {
    return 0LL;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = 0LL;
  unint64_t v5 = 0LL;
  while (1)
  {
    uint64_t v6 = *(void *)(v2 + v4 + 48);
    sub_100019320();
    uint64_t v7 = sub_1000356F4();
    sub_10003540C(v7, v8, v9, v10, v11, v12, v13, v14, v36, v37, (uint64_t)v38, v39, v40, v41, v42, v43, v44, v45);
    sub_10003575C();
    sub_100019390();
    if ((v6 & 1) != 0) {
      break;
    }
    ++v5;
    v4 += 32LL;
    if (v3 == v5)
    {
      swift_bridgeObjectRelease();
      return *(void *)(v2 + 16);
    }
  }

  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v16 = v5 + 1;
  if (!__OFADD__(v5, 1LL))
  {
    unint64_t v17 = *(void *)(v2 + 16);
    while (v16 != v17)
    {
      if (v16 >= v17)
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }

      uint64_t v18 = (void *)(v2 + v4);
      uint64_t v19 = *(void *)(v2 + v4 + 80);
      sub_100019320();
      uint64_t v20 = sub_1000356F4();
      sub_10003540C(v20, v21, v22, v23, v24, v25, v26, v27, v36, v37, (uint64_t)v38, v39, v40, v41, v42, v43, v44, v45);
      sub_10003575C();
      uint64_t result = sub_100019390();
      if ((v19 & 1) == 0)
      {
        if (v16 != v5)
        {
          if ((v5 & 0x8000000000000000LL) != 0) {
            goto LABEL_25;
          }
          unint64_t v28 = *(void *)(v2 + 16);
          if (v5 >= v28) {
            goto LABEL_26;
          }
          if (v16 >= v28) {
            goto LABEL_27;
          }
          BOOL v29 = (uint64_t *)(v2 + 32 + 32 * v5);
          uint64_t v30 = v29[3];
          uint64_t v39 = v29[2];
          uint64_t v40 = v29[1];
          uint64_t v31 = v18[9];
          uint64_t v43 = v18[8];
          uint64_t v32 = v18[11];
          uint64_t v41 = *v29;
          uint64_t v42 = v18[10];
          swift_bridgeObjectRetain();
          sub_1000356F4();
          swift_bridgeObjectRetain();
          sub_100019320();
          if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
            uint64_t v2 = sub_1001650FC(v2);
          }
          __int128 v33 = (void *)(v2 + 32 * v5);
          v33[4] = v43;
          v33[5] = v31;
          v33[6] = v42;
          v33[7] = v32;
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          if (v16 >= *(void *)(v2 + 16)) {
            goto LABEL_28;
          }
          __int128 v34 = (void *)(v2 + v4);
          v34[8] = v41;
          v34[9] = v40;
          v34[10] = v39;
          v34[11] = v30;
          swift_bridgeObjectRelease();
          uint64_t result = sub_100019390();
          *int8x16_t v38 = v2;
        }

        if (__OFADD__(v5++, 1LL)) {
          goto LABEL_24;
        }
      }

      ++v16;
      unint64_t v17 = *(void *)(v2 + 16);
      v4 += 32LL;
    }

    return v5;
  }

LABEL_29:
  __break(1u);
  return result;
}

        *(_BYTE *)(a1 + 56) = v6;
        *(_BYTE *)(a1 + 57) = 0;
        return a1;
      }

      uint64_t v12 = *a2;
      uint64_t v13 = a2[1];
      uint64_t v14 = a2[2];
      *(_OWORD *)(a1 + 42) = *(__int128 *)((char *)a2 + 42);
      *(_OWORD *)(a1 + 16) = v13;
      *(_OWORD *)(a1 + 32) = v14;
      *(_OWORD *)a1 = v12;
    }
  }

  return a1;
}

  sub_100092B84();
}

  swift_bridgeObjectRelease(v10);
  return 1LL;
}

    if (swift_isUniquelyReferenced_nonNull_native(*v9))
    {
      uint64_t v31 = *(void *)(a2 + 16);
      uint64_t v32 = *(_DWORD *)(a2 + 32);
      __int128 v33 = *(unsigned __int16 *)(a2 + 36);
      __int128 v34 = *(unsigned __int8 *)(a2 + 38);
    }

    else
    {
      uint64_t v35 = *(_DWORD *)(a2 + 32);
      uint64_t v36 = *(unsigned __int8 *)(a2 + 38) | (*(unsigned __int16 *)(a2 + 36) << 8);
      uint64_t v37 = v35 - v36;
      if (__CFADD__((_DWORD)v36, v37)) {
        goto LABEL_61;
      }
      ByteBuffer._Storage.reallocSlice(_:capacity:)(v36 | ((unint64_t)v35 << 32), v37);
      uint64_t v31 = v38;
      swift_release();
      __int128 v34 = 0;
      __int128 v33 = 0;
      *(void *)(a2 + 16) = v31;
      uint64_t v32 = *(_DWORD *)(v31 + 16);
      *(_DWORD *)(a2 + 32) = v32;
      *(_WORD *)(a2 + 36) = 0;
      *(_BYTE *)(a2 + 3_Block_object_dispose((const void *)(v1 - 136), 8) = 0;
    }

    swift_beginAccess(v31 + 24, v61, 0LL, 0LL);
    uint64_t v39 = v34 | (v33 << 8);
    uint64_t v40 = v32 - v39;
    if (v32 < v39) {
      goto LABEL_55;
    }
    uint64_t v41 = *(_DWORD *)(a2 + 28);
    if ((v41 == 0 || v40 >= v41) && v40 < v41) {
      goto LABEL_63;
    }
    swift_beginAccess(v59, v60, 0LL, 0LL);
    if (*v59 != 1)
    {
      uint64_t v52 = sub_100025100();
      uint64_t v53 = swift_allocError(&type metadata for IOError, v52, 0LL, 0LL);
      *(void *)uint64_t v54 = 0xD00000000000001FLL;
      *(void *)(v54 + _Block_object_dispose((const void *)(v1 - 136), 8) = 0x80000001002194A0LL;
      *(_DWORD *)(v54 + 16) = 9;
LABEL_52:
      swift_willThrow(v53);
LABEL_53:
      swift_endAccess(v62);
      return;
    }

    if ((v63 & 1) != 0)
    {
      uint64_t v42 = v7;
      sub_10017094C();
    }

    else
    {
      if (__OFADD__(a4, v10)) {
        goto LABEL_64;
      }
      uint64_t v42 = v7;
      sub_100170AA4();
    }

    uint64_t v7 = v42;
    if (v42) {
      goto LABEL_53;
    }
    uint64_t v45 = v43;
    if ((v44 & 1) == 0)
    {
      uint64_t v55 = sub_1000EED60();
      uint64_t v53 = swift_allocError(&type metadata for NonBlockingFileIO.Error, v55, 0LL, 0LL);
      goto LABEL_52;
    }

    uint64_t v46 = *(_DWORD *)(a2 + 28);
    unint64_t v16 = __CFADD__(v46, (_DWORD)v43);
    uint64_t v47 = v46 + v43;
    if (v16) {
      goto LABEL_56;
    }
    *(_DWORD *)(a2 + 2_Block_object_dispose((const void *)(v1 - 136), 8) = v47;
    swift_endAccess(v62);
    if (!v45) {
      goto LABEL_49;
    }
    uint64_t v48 = __OFADD__(v10, v45);
    v10 += v45;
    if (v48) {
      goto LABEL_57;
    }
    a1 = v58;
    if (v10 >= v58) {
      goto LABEL_49;
    }
  }

  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
}

          __break(1u);
          goto LABEL_30;
        }

void sub_100033A78()
{
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_15;
  }

  sub_100035468();
  if (v6 != v7)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v8 = v5;
  uint64_t v9 = v2 - v5;
  if (__OFSUB__(v2, v5))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v10 = v5 - v2;
  if (__OFSUB__(0LL, v9))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (__OFADD__(v3, v10))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (!sub_100035424() || v3 - v9 > *(void *)(v0 + 24) >> 1)
  {
    sub_10002EB70();
    uint64_t v0 = v11;
  }

  uint64_t v12 = (char *)(v0 + 32 + 8 * v8);
  sub_100035528();
  if (!v9) {
    goto LABEL_13;
  }
  uint64_t v13 = *(void *)(v0 + 16);
  if (__OFSUB__(v13, v2)) {
    goto LABEL_19;
  }
  sub_100031434((char *)(v0 + 32 + 8 * v2), v13 - v2, v12);
  uint64_t v14 = *(void *)(v0 + 16);
  BOOL v7 = __OFADD__(v14, v10);
  uint64_t v15 = v14 - v9;
  if (!v7)
  {
    *(void *)(v0 + 16) = v15;
LABEL_13:
    *char v1 = v0;
    sub_100023E74();
    return;
  }

void sub_100033B48()
{
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_15;
  }

  sub_100035468();
  if (v6 != v7)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v8 = v5;
  uint64_t v9 = v2 - v5;
  if (__OFSUB__(v2, v5))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v10 = v5 - v2;
  if (__OFSUB__(0LL, v9))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (__OFADD__(v3, v10))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (!sub_100035424() || v3 - v9 > *(void *)(v0 + 24) >> 1)
  {
    sub_10002F12C();
    uint64_t v0 = v11;
  }

  uint64_t v12 = (char *)(v0 + 32 + 32 * v8);
  sub_1000175B0(&qword_1002AA500);
  sub_100035528();
  if (!v9) {
    goto LABEL_13;
  }
  uint64_t v13 = *(void *)(v0 + 16);
  if (__OFSUB__(v13, v2)) {
    goto LABEL_19;
  }
  sub_100031D50((char *)(v0 + 32 + 32 * v2), v13 - v2, v12);
  uint64_t v14 = *(void *)(v0 + 16);
  BOOL v7 = __OFADD__(v14, v10);
  uint64_t v15 = v14 - v9;
  if (!v7)
  {
    *(void *)(v0 + 16) = v15;
LABEL_13:
    *char v1 = v0;
    sub_100023E74();
    return;
  }

_OWORD *sub_100033C20(__int128 *a1, _OWORD *a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  __int128 v4 = a1[2];
  *(_OWORD *)((char *)a2 + 42) = *(__int128 *)((char *)a1 + 42);
  a2[1] = v3;
  a2[2] = v4;
  *a2 = v2;
  return a2;
}

unint64_t sub_100033C40()
{
  unint64_t result = qword_1002AA1A8;
  if (!qword_1002AA1A8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for HTTPParserError,  &type metadata for HTTPParserError);
    atomic_store(result, (unint64_t *)&qword_1002AA1A8);
  }

  return result;
}

uint64_t type metadata accessor for HTTPServerPipelineHandler()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService25HTTPServerPipelineHandler);
}

uint64_t storeEnumTagSinglePayload for HTTPServerPipelineHandler.NextExpectedMessageType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = 1;
  }
  else {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100033CE8 + 4 * byte_1001F50B9[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100033D1C + 4 * byte_1001F50B4[v4]))();
}

uint64_t sub_100033D1C(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100033D24(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x100033D2CLL);
  }
  return result;
}

uint64_t sub_100033D38(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x100033D40LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100033D44(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100033D4C(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HTTPServerPipelineHandler.NextExpectedMessageType()
{
  return &type metadata for HTTPServerPipelineHandler.NextExpectedMessageType;
}

ValueMetadata *type metadata accessor for HTTPServerPipelineHandler.LifecycleState()
{
  return &type metadata for HTTPServerPipelineHandler.LifecycleState;
}

uint64_t getEnumTagSinglePayload for OctaneIAPType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }

uint64_t _s25ASOctaneSupportXPCService25HTTPServerPipelineHandlerC15ConnectionStateOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = 1;
  }
  else {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100033E54 + 4 * byte_1001F50C3[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100033E88 + 4 * byte_1001F50BE[v4]))();
}

uint64_t sub_100033E88(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100033E90(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x100033E98LL);
  }
  return result;
}

uint64_t sub_100033EA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x100033EACLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100033EB0(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100033EB8(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HTTPServerPipelineHandler.ConnectionState()
{
  return &type metadata for HTTPServerPipelineHandler.ConnectionState;
}

uint64_t sub_100033ED4(uint64_t a1)
{
  return swift_retain(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t destroy for HTTPServerPipelineHandler.BufferedEvent(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(unsigned __int8 *)(result + 57);
  if (v2 >= 2) {
    unsigned int v2 = *(_DWORD *)result + 2;
  }
  if (!v2)
  {
    int v3 = *(unsigned __int8 *)(result + 56);
    if (v3 == 2)
    {
      return sub_100019F7C((void *)result);
    }

    else if (v3 == 1)
    {
      swift_release(*(void *)result & 0x3FFFFFFFFFFFFFFFLL);
      unint64_t result = swift_release(*(void *)(v1 + 8));
      if (*(_BYTE *)(v1 + 32) != 4LL)
      {
        uint64_t v4 = *(void *)(v1 + 40);
        if ((~v4 & 0xF000000000000007LL) != 0) {
          return swift_release(v4 & 0x3FFFFFFFFFFFFFFFLL);
        }
      }
    }

    else if (!*(_BYTE *)(result + 56))
    {
      return sub_100018F04(*(void *)result);
    }
  }

  return result;
}

uint64_t initializeWithCopy for HTTPServerPipelineHandler.BufferedEvent(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = *((unsigned __int8 *)a2 + 57);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  if (v4 == 1)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_BYTE *)(a1 + 57) = 1;
  }

  else if (v4)
  {
    __int128 v9 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 42) = *(_OWORD *)((char *)a2 + 42);
  }

  else
  {
    int v5 = *((unsigned __int8 *)a2 + 56);
    if (v5 == 2)
    {
      uint64_t v10 = a2[3];
      *(void *)(a1 + 24) = v10;
      (**(void (***)(uint64_t, uint64_t *))(v10 - 8))(a1, a2);
    }

    else if (v5 == 1)
    {
      uint64_t v6 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v6;
      *(void *)(a1 + 16) = a2[2];
      *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
      *(_DWORD *)(a1 + 27) = *(_DWORD *)((char *)a2 + 27);
      BOOL v7 = a2 + 4;
      uint64_t v8 = *((unsigned __int8 *)a2 + 32);
      swift_retain();
      swift_retain();
      if (v8 == 4)
      {
        *(_OWORD *)(a1 + 32) = *v7;
        *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = a2[6];
      }

      else
      {
        *(_BYTE *)(a1 + 32) = v8;
        uint64_t v16 = a2[5];
        if ((~v16 & 0xF000000000000007LL) != 0)
        {
          uint64_t v17 = a2[6];
          *(void *)(a1 + 40) = v16;
          *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v17;
          swift_retain();
        }

        else
        {
          *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
        }
      }
    }

    else
    {
      uint64_t v11 = *a2;
      uint64_t v12 = a2[1];
      int v13 = *((_DWORD *)a2 + 4);
      char v14 = *((_BYTE *)a2 + 22);
      __int16 v15 = *((_WORD *)a2 + 10);
      sub_100033ED4(*a2);
      *(void *)a1 = v11;
      *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v12;
      *(_BYTE *)(a1 + 22) = v14;
      *(_WORD *)(a1 + 20) = v15;
      *(_DWORD *)(a1 + 16) = v13;
    }

    *(_BYTE *)(a1 + 56) = v5;
    *(_BYTE *)(a1 + 57) = 0;
  }

  return a1;
}

uint64_t assignWithCopy for HTTPServerPipelineHandler.BufferedEvent(uint64_t a1, __int128 *a2)
{
  if ((__int128 *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 57);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (!v4)
    {
      int v11 = *(unsigned __int8 *)(a1 + 56);
      if (v11 == 2)
      {
        sub_100019F7C((void *)a1);
      }

      else if (v11 == 1)
      {
        swift_release(*(void *)a1 & 0x3FFFFFFFFFFFFFFFLL);
        swift_release(*(void *)(a1 + 8));
        if (*(_BYTE *)(a1 + 32) != 4LL)
        {
          uint64_t v21 = *(void *)(a1 + 40);
          if ((~v21 & 0xF000000000000007LL) != 0) {
            swift_release(v21 & 0x3FFFFFFFFFFFFFFFLL);
          }
        }
      }

      else if (!*(_BYTE *)(a1 + 56))
      {
        sub_100018F04(*(void *)a1);
      }
    }

    unsigned int v5 = *((unsigned __int8 *)a2 + 57);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_BYTE *)(a1 + 57) = 1;
    }

    else
    {
      if (!v5)
      {
        int v6 = *((unsigned __int8 *)a2 + 56);
        if (v6 == 2)
        {
          uint64_t v15 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v15;
          (**(void (***)(uint64_t, __int128 *))(v15 - 8))(a1, a2);
        }

        else if (v6 == 1)
        {
          *(void *)a1 = *(void *)a2;
          *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = *((void *)a2 + 1);
          *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
          *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
          int v7 = *((_DWORD *)a2 + 6);
          *(_DWORD *)(a1 + 27) = *(_DWORD *)((char *)a2 + 27);
          *(_DWORD *)(a1 + 24) = v7;
          uint64_t v8 = *((unsigned __int8 *)a2 + 32);
          swift_retain();
          swift_retain();
          if (v8 == 4)
          {
            __int128 v9 = (_OWORD *)(a1 + 32);
            __int128 v10 = a2[2];
            *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = *((void *)a2 + 6);
          }

          else
          {
            *(_BYTE *)(a1 + 32) = v8;
            uint64_t v22 = *((void *)a2 + 5);
            if ((~v22 & 0xF000000000000007LL) != 0)
            {
              *(void *)(a1 + 40) = v22;
              *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = *((void *)a2 + 6);
              swift_retain();
              goto LABEL_29;
            }

            __int128 v9 = (_OWORD *)(a1 + 40);
            __int128 v10 = *(__int128 *)((char *)a2 + 40);
          }

          *__int128 v9 = v10;
        }

        else
        {
          uint64_t v16 = *(void *)a2;
          uint64_t v17 = *((void *)a2 + 1);
          int v20 = *((_DWORD *)a2 + 4);
          uint64_t v18 = a2 + 1;
          int v19 = v20;
          LOWORD(v20) = *((_WORD *)v18 + 2);
          LOBYTE(v1_Block_object_dispose((const void *)(v1 - 136), 8) = *((_BYTE *)v18 + 6);
          sub_100033ED4(v16);
          *(void *)a1 = v16;
          *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v17;
          *(_BYTE *)(a1 + 22) = (_BYTE)v18;
          *(_WORD *)(a1 + 20) = v20;
          *(_DWORD *)(a1 + 16) = v19;
        }

__n128 initializeWithTake for HTTPServerPipelineHandler.BufferedEvent(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for HTTPServerPipelineHandler.BufferedEvent(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 57);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (!v4)
    {
      int v7 = *(unsigned __int8 *)(a1 + 56);
      if (v7 == 2)
      {
        sub_100019F7C((void *)a1);
      }

      else if (v7 == 1)
      {
        swift_release(*(void *)a1 & 0x3FFFFFFFFFFFFFFFLL);
        swift_release(*(void *)(a1 + 8));
        if (*(_BYTE *)(a1 + 32) != 4LL)
        {
          uint64_t v9 = *(void *)(a1 + 40);
          if ((~v9 & 0xF000000000000007LL) != 0) {
            swift_release(v9 & 0x3FFFFFFFFFFFFFFFLL);
          }
        }
      }

      else if (!*(_BYTE *)(a1 + 56))
      {
        sub_100018F04(*(void *)a1);
      }
    }

    unsigned int v5 = *(unsigned __int8 *)(a2 + 57);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_BYTE *)(a1 + 57) = 1;
    }

    else
    {
      __int128 v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      if (v5)
      {
        *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
      }

      else
      {
        *(_OWORD *)(a1 + 4Hasher._combine(_:)(v1 & 1) = *(_OWORD *)(a2 + 41);
        *(_BYTE *)(a1 + 57) = 0;
      }
    }
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPServerPipelineHandler.BufferedEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 58)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 57);
  if (v3 >= 3) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for HTTPServerPipelineHandler.BufferedEvent( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 42) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_DWORD *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 5_Block_object_dispose((const void *)(v1 - 136), 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 5_Block_object_dispose((const void *)(v1 - 136), 8) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 57) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_100034544(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 57);
  return result;
}

uint64_t sub_100034560(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 4Hasher._combine(_:)(v1 & 1) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }

  *(_BYTE *)(result + 57) = a2;
  return result;
}

ValueMetadata *type metadata accessor for HTTPServerPipelineHandler.BufferedEvent()
{
  return &type metadata for HTTPServerPipelineHandler.BufferedEvent;
}

unint64_t sub_1000345A0()
{
  unint64_t result = qword_1002AA2F0;
  if (!qword_1002AA2F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F5238, &type metadata for HTTPServerPipelineHandler.ConnectionState);
    atomic_store(result, (unint64_t *)&qword_1002AA2F0);
  }

  return result;
}

unint64_t sub_1000345E0()
{
  unint64_t result = qword_1002AA2F8;
  if (!qword_1002AA2F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F52A0, &type metadata for HTTPServerPipelineHandler.LifecycleState);
    atomic_store(result, (unint64_t *)&qword_1002AA2F8);
  }

  return result;
}

unint64_t sub_100034620()
{
  unint64_t result = qword_1002AA300;
  if (!qword_1002AA300)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F5308, &type metadata for HTTPServerPipelineHandler.NextExpectedMessageType);
    atomic_store(result, (unint64_t *)&qword_1002AA300);
  }

  return result;
}

uint64_t sub_10003465C()
{
  int v1 = *(unsigned __int8 *)(v0 + 72);
  if (v1 == 2)
  {
    sub_100019F7C((void *)(v0 + 16));
  }

  else if (v1 == 1)
  {
    swift_release(*(void *)(v0 + 16) & 0x3FFFFFFFFFFFFFFFLL);
    sub_100035650();
    if (*(_BYTE *)(v0 + 48) != 4LL)
    {
      uint64_t v2 = *(void *)(v0 + 56);
      if ((~v2 & 0xF000000000000007LL) != 0) {
        swift_release(v2 & 0x3FFFFFFFFFFFFFFFLL);
      }
    }
  }

  else if (!*(_BYTE *)(v0 + 72))
  {
    sub_10003572C(*(void *)(v0 + 16));
  }

  return swift_deallocObject(v0, 73LL, 7LL);
}

uint64_t sub_1000346EC(uint64_t *a1, uint64_t a2)
{
  return a2;
}

_OWORD *sub_100034728(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100034738(uint64_t result, uint64_t a2)
{
  return result;
}

uint64_t sub_100034754(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_release(result);
    return swift_bridgeObjectRelease(a2);
  }

  return result;
}

void sub_100034780()
{
  if (v1 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v4 = v2;
  uint64_t v5 = *v0;
  uint64_t v6 = *(void *)(*v0 + 16);
  if (v6 < v2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v7 = v1;
  uint64_t v8 = v2 - v1;
  if (__OFSUB__(v2, v1))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v9 = v3;
  uint64_t v10 = *(void *)(v3 + 16);
  uint64_t v11 = v10 - v8;
  if (__OFSUB__(v10, v8))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  if (__OFADD__(v6, v11))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if (!sub_10003532C() || v6 + v11 > *(void *)(v5 + 24) >> 1)
  {
    sub_10002EDD0();
    uint64_t v5 = v12;
  }

  uint64_t v13 = v5 + 32 + 40 * v7;
  swift_arrayDestroy(v13, v8);
  if (!v11) {
    goto LABEL_13;
  }
  uint64_t v14 = *(void *)(v5 + 16);
  if (__OFSUB__(v14, v4)) {
    goto LABEL_22;
  }
  sub_1000315D4((char *)(v5 + 32 + 40 * v4), v14 - v4, (char *)(v13 + 40 * v10));
  uint64_t v15 = *(void *)(v5 + 16);
  BOOL v16 = __OFADD__(v15, v11);
  uint64_t v17 = v15 + v11;
  if (v16)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  *(void *)(v5 + 16) = v17;
LABEL_13:
  if (!v10)
  {
LABEL_16:
    sub_100019390();
    *uint64_t v0 = v5;
    sub_10002A580();
    return;
  }

  if (*(void *)(v9 + 16) == v10)
  {
    swift_arrayInitWithCopy(v13);
    goto LABEL_16;
  }

LABEL_24:
  __break(1u);
}

    *(_BYTE *)(a1 + 56) = v11;
  }

  return a1;
}

  __break(1u);
}

            swift_bridgeObjectRelease_n(v50, 2LL);
            swift_bridgeObjectRelease_n(v43, 2LL);
          }

          else
          {
            swift_bridgeObjectRelease();
          }

          int8x16_t v38 = v101;
LABEL_29:
          uint64_t v39 = v100;
        }
      }
    }

    uint64_t v65 = v96;
    sub_1000E51AC((uint64_t)v38, (uint64_t)v96, type metadata accessor for PurchaseConfiguration);
    swift_retain();
    sub_10016A8D4(v65, v37, v104);
    __int128 v66 = v37;
    uint64_t v67 = v97;
    sub_1000E51AC((uint64_t)v38, (uint64_t)v97, type metadata accessor for PurchaseConfiguration);
    uint64_t v69 = (uint64_t)v98;
    uint64_t v68 = v99;
    uint64_t v70 = (uint64_t)&v98[*(int *)(v99 + 44)];
    uint64_t v71 = type metadata accessor for Date(0LL);
    sub_10001762C(v70, 1LL, 1LL, v71);
    unint64_t v72 = v67[1];
    *(void *)uint64_t v69 = *v67;
    *(void *)(v69 + _Block_object_dispose((const void *)(v1 - 136), 8) = v72;
    *(_BYTE *)(v69 + 16) = 1;
    *(void *)(v69 + 24) = v66;
    uint64_t v73 = (uint64_t)v67 + *(int *)(v39 + 32);
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1000E4E64(v73, v70);
    uint64_t v74 = *((unsigned __int8 *)v67 + *(int *)(v39 + 48));
    sub_10004DBAC((uint64_t)v67, type metadata accessor for PurchaseConfiguration);
    uint64_t v92 = v66;
    if (v74 == 2)
    {
      uint64_t v75 = type metadata accessor for OctaneSubscription();
      uint64_t v76 = swift_dynamicCastClass(v66, v75) != 0;
    }

    else
    {
      uint64_t v76 = v74 & 1;
    }

    uint64_t v77 = v94;
    *(_BYTE *)(v69 + *(int *)(v68 + 48)) = v76;
    *(_BYTE *)(v69 + *(int *)(v68 + 52)) = 1;
    sub_1000925C4(v69, (uint64_t)v77, &qword_1002B0A48);
    uint64_t v78 = (void *)sub_1000DA3F0(v103, v104, v77, 0LL);
    sub_1000A343C((uint64_t)v104);
    sub_10004DB00((uint64_t)v77, &qword_1002B0A48);
    if (v78)
    {
      uint64_t v79 = v78;
      sub_10004DBAC((uint64_t)v38, type metadata accessor for PurchaseConfiguration);

      swift_release();
      double v80 = v93;
      sub_1000E4EAC((uint64_t)v103, v93);
      *(void *)(v80 + 40) = v79;
    }

    else
    {
      uint64_t v81 = *((unsigned __int8 *)sub_100019F58(v103, v103[3]) + 176);
      if (v81 == 22)
      {
        unint64_t v82 = type metadata accessor for OctaneError(0LL);
        sub_100046F3C((unint64_t *)&qword_1002AD048, type metadata accessor for OctaneError, "}-\b");
        swift_allocError(v82, v83, 0LL, 0LL);
        uint64_t v85 = swift_storeEnumTagMultiPayload(v84, v82, 2LL);
      }

      else
      {
        uint64_t v86 = sub_1000E4C94();
        uint64_t v85 = swift_allocError(&type metadata for FailureType, v86, 0LL, 0LL);
        *uint64_t v87 = v81;
      }

      swift_willThrow(v85);
      swift_release();
      sub_10004DBAC((uint64_t)v38, type metadata accessor for PurchaseConfiguration);
    }

    return sub_100019F7C(v103);
  }

  else
  {
    uint64_t v58 = sub_1000A2EB4();
    uint64_t v59 = swift_allocError(&type metadata for InAppBuyRouteError, v58, 0LL, 0LL);
    *uint64_t v60 = 1;
    return swift_willThrow(v59);
  }

          __break(1u);
          goto LABEL_25;
        }

    uint64_t v3 = (v7 - 1) & v7;
    uint64_t v5 = __clz(__rbit64(v7)) + (v8 << 6);
    uint64_t v39 = v8;
  }

  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

      __break(1u);
      return result;
    }

    goto LABEL_22;
  }

  if (v3)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

    uint64_t v25 = (unint64_t)(HTTPResponseStatus.code.getter(*((void *)v16 + 2), *((void *)v16 + 3), v24) - 100) < 0x64;
    goto LABEL_25;
  }

  if (HIBYTE(v10) == 1)
  {
    int v19 = *(_BYTE *)(v4 + 16);
    sub_10009B678();
    sub_100145A64((uint64_t)a1, v19, (uint64_t)v16, (uint64_t)v17, v18 & 0xFFFFFFFFFFFFFFLL, (uint64_t)a3);
    int v20 = (uint64_t)v16;
    uint64_t v21 = (uint64_t)v17;
    uint64_t v22 = v18;
    uint64_t v23 = 1;
    return sub_100032488(v20, v21, v22, v23);
  }

  if ((*(_BYTE *)(v4 + 16) & 1) == 0)
  {
    if (!a3)
    {
LABEL_46:
      int v20 = (uint64_t)v16;
      uint64_t v21 = (uint64_t)v17;
      uint64_t v22 = v18;
      uint64_t v23 = 2;
      return sub_100032488(v20, v21, v22, v23);
    }

    uint64_t v84 = sub_100148BDC();
    sub_10009B6F0(v84);
    sub_10002A75C();
    sub_10009B678();
    sub_100148BE4();
    sub_10002A338();
    if (qword_1002A8CC8 == -1) {
      goto LABEL_39;
    }
    goto LABEL_58;
  }

  uint64_t v140 = (uint64_t)a1;
  uint64_t v142 = (uint64_t)a3;
  if (v8)
  {
    uint64_t v26 = sub_100148BDC();
    uint64_t v27 = sub_10009B6F0(v26);
    unint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 16);
    uint64_t v137 = v4;
    sub_10009B678();
    BOOL v29 = (uint64_t (*)(void))v28(v27, v3);
    uint64_t v31 = v30;
    a3 = v32;
    a1 = v33;
    sub_10002A338();
    sub_100079D88();
    static ByteBuffer._Storage.reallocated(minimumCapacity:allocator:)(256, v29, v31, (uint64_t)a3, (uint64_t)a1);
    sub_100148BA4();
    __int128 v34 = sub_100148C24((uint64_t)"0\r\n", 3LL);
    uint64_t v3 = v147 + v34;
    if (__CFADD__(v147, v34))
    {
LABEL_57:
      __break(1u);
LABEL_58:
      swift_once(&qword_1002A8CC8, sub_10005B580);
LABEL_39:
      int v148 = static ByteBufferAllocator.zeroCapacityWithDefaultAllocator;
      int v149 = qword_1002EB928;
      unsigned int v152 = byte_1002EB936;
      unsigned int v151 = word_1002EB934;
      int v150 = dword_1002EB930;
      int v153 = 0;
      sub_10009B59C(static ByteBufferAllocator.zeroCapacityWithDefaultAllocator);
      sub_10002A75C();
      ChannelHandlerContext.write(_:promise:)();
      sub_10002A780((uint64_t)a3);
      uint64_t v85 = sub_10001EDD8();
      sub_100148C50(v85, v86, v87, v88, v89, v90, v91, v92, v125, v128, v131, v134, v137);
LABEL_45:
      swift_release();
      goto LABEL_46;
    }

    v147 += v34;
    uint64_t v37 = *((void *)v16 + 2);
    if (v37)
    {
      unsigned int v128 = (uint64_t)v17;
      unsigned __int8 v131 = v18;
      swift_bridgeObjectRetain();
      unsigned int v134 = (uint64_t)v16;
      v16 += 56;
      uint64_t v17 = "\r\n";
      while (1)
      {
        uint64_t v18 = *((void *)v16 - 3);
        a3 = (void *)*((void *)v16 - 2);
        int8x16_t v38 = *((void *)v16 - 1);
        a1 = *(void **)v16;
        sub_10003574C();
        swift_bridgeObjectRetain();
        uint64_t v39 = sub_100078244(v18, (unint64_t)a3, (uint64_t)&v146, v3);
        if ((v40 & 1) != 0)
        {
          v41._countAndFlagsBits = v18;
          v41._object = a3;
          uint64_t v39 = ByteBuffer._setStringSlowpath(_:at:)(v41, v3);
        }

        uint64_t v42 = v147 + v39;
        if (__CFADD__(v147, v39)) {
          goto LABEL_52;
        }
        v147 += v39;
        uint64_t v43 = sub_100148C18((uint64_t)": ", v40, v42);
        uint64_t v18 = v147 + v43;
        if (__CFADD__(v147, v43)) {
          goto LABEL_53;
        }
        v147 += v43;
        swift_bridgeObjectRetain();
        uint64_t v44 = sub_100078244(v38, (unint64_t)a1, (uint64_t)&v146, v18);
        uint64_t v46 = v45;
        swift_bridgeObjectRelease();
        if ((v46 & 1) != 0)
        {
          v47._countAndFlagsBits = v38;
          v47._object = a1;
          uint64_t v44 = ByteBuffer._setStringSlowpath(_:at:)(v47, v18);
        }

        swift_bridgeObjectRelease();
        sub_10003561C();
        uint64_t v48 = v147 + v44;
        if (__CFADD__(v147, v44)) {
          goto LABEL_54;
        }
        v147 += v44;
        uint64_t v49 = ByteBuffer._setBytes(_:at:)((uint64_t)"\r\n", (uint64_t)"", v48);
        uint64_t v3 = v147 + v49;
        if (__CFADD__(v147, v49)) {
          goto LABEL_55;
        }
        v16 += 32;
        v147 += v49;
        if (!--v37)
        {
          uint64_t v18 = v131;
          BOOL v16 = (const char *)v134;
          uint64_t v17 = (char *)v128;
          sub_100032488(v134, v128, v131, 2);
          break;
        }
      }
    }

    unint64_t result = sub_100148BBC((uint64_t)"\r\n", v35, v36, v3);
    uint64_t v5 = v137;
    if (!__CFADD__(v147, (_DWORD)result))
    {
LABEL_44:
      sub_100148B4C( result,  v51,  v24,  v52,  v53,  v54,  v55,  v56,  v125,  v128,  v131,  v134,  v137,  v140,  v142,  (uint64_t)v143,  v144,  v145,  v146);
      sub_100148C44();
      sub_100148C50(v117, v118, v119, v120, v121, v122, v123, v124, v127, v130, v133, v136, v139);
      swift_release();
      goto LABEL_45;
    }

    __break(1u);
    goto LABEL_24;
  }

  uint64_t v109 = sub_100148BDC();
  sub_10009B6F0(v109);
  sub_10009B678();
  uint64_t v110 = (uint64_t (*)(void))sub_100148BE4();
  uint64_t v112 = v111;
  uint64_t v114 = v113;
  uint64_t v116 = v115;
  sub_10002A338();
  sub_100079D88();
  static ByteBuffer._Storage.reallocated(minimumCapacity:allocator:)(8, v110, v112, v114, v116);
  sub_100148BA4();
  unint64_t result = sub_100148C24((uint64_t)"0\r\n\r\n", 5LL);
  if (!__CFADD__(v147, (_DWORD)result)) {
    goto LABEL_44;
  }
  __break(1u);
  return result;
}

    __break(1u);
LABEL_25:
    a3 = sub_10002F128(0LL, *(void *)(a3 + 16) + 1LL, 1LL, a3);
LABEL_5:
    uint64_t v15 = *(void *)(a3 + 16);
    uint64_t v14 = *(void *)(a3 + 24);
    if (v15 >= v14 >> 1) {
      a3 = sub_10002F128(v14 > 1, v15 + 1, 1LL, a3);
    }
    *(void *)(a3 + 16) = v15 + 1;
    BOOL v16 = a3 + 32 * v15;
    strcpy((char *)(v16 + 32), "content-length");
    *(_BYTE *)(v16 + 47) = -18;
    *(void *)(v16 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v5;
    *(void *)(v16 + 56) = v8;
    __int128 v34 = a3;
    uint64_t v17 = sub_10002D0E0();
    swift_bridgeObjectRelease();
    if (((v17 | v28) & 1) != 0) {
      uint64_t v18 = 2;
    }
    else {
      uint64_t v18 = v30;
    }
    if (!v6)
    {
      uint64_t v25 = v31;
LABEL_21:
      swift_retain();
      swift_bridgeObjectRetain();
      sub_100173274(v29, a3, v18);
      swift_bridgeObjectRelease();
      swift_release();
      sub_1001731E4((uint64_t)v35);
      swift_release();
      sub_100039090(v25, v6, v7);
      goto LABEL_22;
    }

    a3 = 0x2D746E65746E6F63LL;
    swift_bridgeObjectRetain();
    int v19 = sub_10002D0E0();
    int v20 = v19;
    __chkstk_darwin(v19);
    uint64_t v21 = sub_100033870(&v34, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10004BCDC);
    if (*(void *)(v34 + 16) < v21)
    {
      __break(1u);
    }

    else
    {
      a3 = (uint64_t)&v34;
      sub_100033B48();
      if ((sub_10002ACF8(0x2D746E65746E6F63uLL, 0xEC00000065707974LL) & 1) == 0)
      {
        a3 = v34;
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native(a3) & 1) != 0)
        {
LABEL_14:
          uint64_t v23 = *(void *)(a3 + 16);
          uint64_t v22 = *(void *)(a3 + 24);
          if (v23 >= v22 >> 1) {
            a3 = sub_10002F128(v22 > 1, v23 + 1, 1LL, a3);
          }
          *(void *)(a3 + 16) = v23 + 1;
          uint64_t v24 = a3 + 32 * v23;
          strcpy((char *)(v24 + 32), "content-type");
          *(_BYTE *)(v24 + 45) = 0;
          *(_WORD *)(v24 + 46) = -5120;
          uint64_t v25 = v31;
          *(void *)(v24 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v31;
          *(void *)(v24 + 56) = v6;
          uint64_t v26 = sub_10002D0E0();
          swift_bridgeObjectRelease();
          if (((v26 | v20) & 1) != 0) {
            uint64_t v18 = 2;
          }
          goto LABEL_21;
        }

  if (v3 > a2) {
    return 0LL;
  }
LABEL_26:
  if ((a2 & 0x8000000000000000LL) == 0) {
    return result;
  }
  uint64_t v7 = 0LL;
  while ((result ^ 0x8000000000000000LL) > ~a2)
  {
    if (--v7 <= a2)
    {
LABEL_30:
      result += v7;
      return result;
    }
  }

  swift_release(v3);
  uint64_t v2 = v18;
  BOOL v16 = 1LL << *(_BYTE *)(v3 + 32);
  if (v16 > 63) {
    sub_1001A2AC0(0LL, (unint64_t)(v16 + 63) >> 6, (void *)(v3 + 56));
  }
  else {
    _OWORD *v7 = -1LL << v16;
  }
  *(void *)(v3 + 16) = 0LL;
LABEL_28:
  unint64_t result = swift_release(v3);
  const void *v2 = v5;
  return result;
}

  unint64_t result = swift_release_n(v3, 2LL);
  uint64_t v2 = v16;
LABEL_26:
  const void *v2 = v5;
  return result;
}

    return;
  }

  uint64_t v18 = a1;
  int v19 = sub_1001B757C((uint64_t)&off_100274660);
  sub_10012A58C(0xD000000000000015LL, 0x80000001002175E0LL, v19, v66);
  if (!v67)
  {
    swift_bridgeObjectRelease();
    sub_100034F14((uint64_t)v66, (uint64_t *)&unk_1002B9380);
LABEL_30:

    return;
  }

  if ((swift_dynamicCast(&v64, v66, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {

    swift_bridgeObjectRelease();
    return;
  }

  uint64_t v21 = v64;
  int v20 = v65;
  sub_10012A58C(25705LL, 0xE200000000000000LL, v19, v66);
  if (!v67)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100034F14((uint64_t)v66, (uint64_t *)&unk_1002B9380);
LABEL_34:
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v43 = type metadata accessor for Logger(0LL);
    uint64_t v44 = sub_100018F68(v43, (uint64_t)qword_1002EB9D0);
    __int128 v33 = (os_log_s *)Logger.logObject.getter(v44);
    uint64_t v35 = static os_log_type_t.error.getter(v33, v45);
    if (!os_log_type_enabled(v33, v35)) {
      goto LABEL_51;
    }
    uint64_t v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v36 = 0;
    uint64_t v37 = "[DatabaseStore.self executeRSSDMigrationLogic(results:updateHandler:)] Old transaction unexpectedly doesn’t ha"
    goto LABEL_50;
  }

  if ((swift_dynamicCast(&v64, v66, (char *)&type metadata for Any + 8, &type metadata for UInt, 6LL) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }

  uint64_t v22 = (os_log_s *)v64;
  sub_10012A58C(0x6573616863727570LL, 0xED0000657461645FLL, v19, v66);
  if (!v67)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100034F14((uint64_t)v66, (uint64_t *)&unk_1002B9380);
LABEL_40:
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v46 = type metadata accessor for Logger(0LL);
    uint64_t v47 = sub_100018F68(v46, (uint64_t)qword_1002EB9D0);
    __int128 v33 = (os_log_s *)Logger.logObject.getter(v47);
    uint64_t v35 = static os_log_type_t.error.getter(v33, v48);
    if (!os_log_type_enabled(v33, v35)) {
      goto LABEL_51;
    }
    uint64_t v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v36 = 0;
    uint64_t v37 = "[DatabaseStore.self executeRSSDMigrationLogic(results:updateHandler:)] Old transaction unexpectedly doesn’t ha"
    goto LABEL_50;
  }

  if ((swift_dynamicCast(&v64, v66, (char *)&type metadata for Any + 8, &type metadata for Double, 6LL) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_40;
  }

  uint64_t v23 = *(double *)&v64;
  sub_10012A58C(0x6974617269707865LL, 0xEF657461645F6E6FLL, v19, v66);
  if (!v67)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100034F14((uint64_t)v66, (uint64_t *)&unk_1002B9380);
LABEL_46:
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v49 = type metadata accessor for Logger(0LL);
    uint64_t v50 = sub_100018F68(v49, (uint64_t)qword_1002EB9D0);
    __int128 v33 = (os_log_s *)Logger.logObject.getter(v50);
    uint64_t v35 = static os_log_type_t.error.getter(v33, v51);
    if (!os_log_type_enabled(v33, v35)) {
      goto LABEL_51;
    }
    uint64_t v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v36 = 0;
    uint64_t v37 = "[DatabaseStore.self executeRSSDMigrationLogic(results:updateHandler:)] Old transaction unexpectedly doesn’t ha"
    goto LABEL_50;
  }

  if ((swift_dynamicCast(&v64, v66, (char *)&type metadata for Any + 8, &type metadata for Double, 6LL) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_46;
  }

  osloga = v22;
  uint64_t v24 = *(double *)&v64;
  uint64_t v25 = *a4;
  swift_bridgeObjectRetain();
  sub_10012A554(v21, v20, v25);
  uint64_t v59 = v26;
  LOBYTE(v25) = v27;
  swift_bridgeObjectRelease();
  if ((v25 & 1) != 0)
  {
    sub_10012A58C(0xD000000000000016LL, 0x80000001002175B0LL, v19, v66);
    swift_bridgeObjectRelease();
    if (v67)
    {
      unint64_t v28 = osloga;
    }

    else
    {
      sub_100034F14((uint64_t)v66, (uint64_t *)&unk_1002B9380);
      unint64_t v28 = osloga;
    }

    goto LABEL_56;
  }

  swift_bridgeObjectRelease();
  unint64_t v28 = osloga;
  if (v23 - v59 >= 5184000.0)
  {
LABEL_56:
    swift_bridgeObjectRetain();
    sub_1001B833C(v21, v20, v23);
    swift_bridgeObjectRelease();
    goto LABEL_57;
  }

  if (!*(void *)(*a5 + 16)
    || (swift_bridgeObjectRetain(), sub_1000F168C(v21, v20), uint64_t v30 = v29, swift_bridgeObjectRelease(), (v30 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v31 = type metadata accessor for Logger(0LL);
    uint64_t v32 = sub_100018F68(v31, (uint64_t)qword_1002EB9D0);
    __int128 v33 = (os_log_s *)Logger.logObject.getter(v32);
    uint64_t v35 = static os_log_type_t.error.getter(v33, v34);
    if (!os_log_type_enabled(v33, v35)) {
      goto LABEL_51;
    }
    uint64_t v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v36 = 0;
    uint64_t v37 = "[DatabaseStore.self executeRSSDMigrationLogic(results:updateHandler:)] Unexpectedly didn’t find a cached RSSD "
          "for a group ID that already has an associated cached ED";
LABEL_50:
    _os_log_impl((void *)&_mh_execute_header, v33, v35, v37, v36, 2u);
    swift_slowDealloc(v36, -1LL, -1LL);
LABEL_51:

    return;
  }

    uint64_t v11 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_25:
    uint64_t v26 = *(void *)(v5 + 48) + 40 * v21;
    if ((a2 & 1) != 0)
    {
      uint64_t v27 = *(_OWORD *)v26;
      unint64_t v28 = *(_OWORD *)(v26 + 16);
      uint64_t v41 = *(void *)(v26 + 32);
      uint64_t v39 = v27;
      uint64_t v40 = v28;
      sub_100034728((_OWORD *)(*(void *)(v5 + 56) + 32 * v21), v38);
    }

    else
    {
      sub_1001CBA50(v26, (uint64_t)&v39);
      sub_10002C010(*(void *)(v5 + 56) + 32 * v21, (uint64_t)v38);
    }

    unint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v8 + 40));
    BOOL v29 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v30 = result & ~v29;
    uint64_t v31 = v30 >> 6;
    if (((-1LL << v30) & ~*(void *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      BOOL v16 = __clz(__rbit64((-1LL << v30) & ~*(void *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v32 = 0;
      __int128 v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        __int128 v34 = v31 == v33;
        if (v31 == v33) {
          uint64_t v31 = 0LL;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v13 + 8 * v31);
      }

      while (v35 == -1);
      BOOL v16 = __clz(__rbit64(~v35)) + (v31 << 6);
    }

    *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
    uint64_t v17 = *(void *)(v8 + 48) + 40 * v16;
    uint64_t v18 = v39;
    int v19 = v40;
    *(void *)(v17 + 32) = v41;
    *(_OWORD *)uint64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    unint64_t result = (uint64_t)sub_100034728(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v16));
    ++*(void *)(v8 + 16);
  }

  swift_release();
  uint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  uint64_t v36 = 1LL << *(_BYTE *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    const char *v23 = -1LL << v36;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_44:
  unint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

uint64_t sub_1000348B4( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (result)
  {
    swift_release();
    swift_release();
    swift_release();
    return sub_100034738(a6, a7);
  }

  return result;
}

uint64_t sub_100034918(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100034980(v2, v3);
  return a1;
}

uint64_t sub_100034980(uint64_t result, uint64_t a2)
{
  return result;
}

uint64_t sub_10003499C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 1)
  {
    sub_100033ED4(result);
    return swift_retain();
  }

  return result;
}

uint64_t sub_1000349CC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 1)
  {
    sub_100018F04(result);
    return swift_release();
  }

  return result;
}

void sub_1000349FC()
{
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_15;
  }

  sub_100035468();
  if (v6 != v7)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v8 = v2 - v5;
  if (__OFSUB__(v2, v5))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v9 = v5 - v2;
  if (__OFSUB__(0LL, v8))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (__OFADD__(v3, v9))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (!sub_100035424() || v3 - v8 > *(void *)(v0 + 24) >> 1)
  {
    sub_10002F338();
    uint64_t v0 = v10;
  }

  type metadata accessor for EventManager.Observer(0LL);
  sub_100035644();
  uint64_t v12 = v0 + ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  uint64_t v13 = *(void *)(v11 + 72);
  sub_100035528();
  if (!v8) {
    goto LABEL_13;
  }
  uint64_t v14 = *(void *)(v0 + 16);
  if (__OFSUB__(v14, v2)) {
    goto LABEL_19;
  }
  sub_100031C40(v12 + v13 * v2, v14 - v2);
  uint64_t v15 = *(void *)(v0 + 16);
  BOOL v7 = __OFADD__(v15, v9);
  uint64_t v16 = v15 - v8;
  if (!v7)
  {
    *(void *)(v0 + 16) = v16;
LABEL_13:
    *uint64_t v1 = v0;
    sub_100023E74();
    return;
  }

uint64_t sub_100034AF8()
{
  if (v6 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v0 = v7;
    uint64_t v2 = v6;
    uint64_t v3 = *v1;
    if (!((unint64_t)*v1 >> 62))
    {
      uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      goto LABEL_4;
    }
  }

  sub_100035508();
  _CocoaArrayWrapper.endIndex.getter(v4);
  sub_100035734();
LABEL_4:
  if (v4 < v0)
  {
    __break(1u);
    goto LABEL_32;
  }

  uint64_t v3 = v0 - v2;
  if (__OFSUB__(v0, v2))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  uint64_t v5 = v2 - v0;
  if (__OFSUB__(0LL, v3))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  uint64_t v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v8 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    goto LABEL_9;
  }

void sub_100034D20(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_100034D48(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_retain(result);
    return swift_bridgeObjectRetain(a2);
  }

  return result;
}

uint64_t sub_100034D74(uint64_t a1, uint64_t a2)
{
  return sub_10002E6AC(*(void *)a1, *(_BYTE *)(a1 + 8), a2);
}

uint64_t sub_100034D88(uint64_t a1)
{
  return sub_10002E708(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_100034D9C(uint64_t a1)
{
  return sub_10002E770(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_100034DB0(uint64_t a1)
{
  return sub_100034D9C(a1);
}

uint64_t sub_100034DB8(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_errorRelease(a1);
  }
  else {
    return swift_unknownObjectRelease(a1);
  }
}

void sub_100034DC4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_100034DEC( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (result)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    return sub_100034980(a6, a7);
  }

  return result;
}

void sub_100034E54( void *a1, void (*a2)(void, void, void, void, void, void, void, void))
{
}

uint64_t sub_100034E8C(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

uint64_t sub_100034E9C(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_retain(a2);
  }
  return result;
}

uint64_t sub_100034EAC(uint64_t a1)
{
  return sub_100034D88(a1);
}

uint64_t sub_100034EB4(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_errorRelease(a1);
  }
  else {
    return sub_100034E8C(a1, a2);
  }
}

void sub_100034EC0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void sub_100034EE8(_BYTE *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
}

uint64_t sub_100034F00(uint64_t a1)
{
  return sub_100034D74(a1, v1);
}

uint64_t sub_100034F08(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRelease(result);
  }
  return result;
}

void sub_100034F14(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000175B0(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  sub_10001945C();
}

uint64_t sub_100034F4C(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100034F80(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 2) {
    return swift_bridgeObjectRelease(result);
  }
  if (a4 != 1)
  {
    if (a4) {
      return result;
    }
    swift_release(result);
    uint64_t result = a2;
    return swift_bridgeObjectRelease(result);
  }

  return swift_release(result);
}

  ;
}

uint64_t sub_100034FE4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, 55LL, 2LL, a7, 25LL, a9, a10, a11);
}

void *sub_100034FFC@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

  ;
}

  ;
}

uint64_t sub_10003502C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2LL, a7, 25LL, a9, a10, a11);
}

uint64_t sub_100035038()
{
  *(void *)(v0 + 16) = 0LL;
  return swift_bridgeObjectRelease(v0);
}

size_t sub_100035044(void *a1)
{
  size_t result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

  ;
}

  ;
}

void sub_100035084()
{
  v0._countAndFlagsBits = 0x6F63206874697720LL;
  v0._object = (void *)0xEF2073746E65746ELL;
  String.append(_:)(v0);
}

uint64_t sub_1000350A8()
{
  return sub_10002D0E0();
}

void sub_1000350DC()
{
  v0._countAndFlagsBits = 0x756F662074756220LL;
  v0._object = (void *)0xEB0000000020646ELL;
  String.append(_:)(v0);
}

uint64_t sub_1000350FC()
{
  return 0LL;
}

  ;
}

uint64_t sub_10003511C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return sub_1000175B0(a5);
}

uint64_t sub_100035124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2LL, a7, 20LL);
}

  ;
}

  ;
}

  ;
}

void sub_100035164(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = (v1 - 1) & a1;
}

void sub_10003517C(uint64_t a1@<X8>)
{
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = 2 * (a1 / v1);
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000351D4()
{
  return v0 + 32;
}

void sub_1000351E0(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * a1;
}

uint64_t sub_1000351EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, a5, a6, 38LL, 2LL);
}

uint64_t sub_100035200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return v4(0LL, v5, a3, v3);
}

  ;
}

uint64_t sub_100035224(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 33LL, 0LL);
}

uint64_t sub_100035230()
{
  return v0 + 32;
}

  ;
}

double sub_100035250()
{
  return 0.0;
}

uint64_t sub_10003526C()
{
  return v2(v1, v0);
}

uint64_t sub_10003527C()
{
  return EventLoop.makePromise<A>(of:file:line:)(v6, v3, v2, v1, v0, v5, v6, v4);
}

  ;
}

uint64_t sub_1000352B4()
{
  return v1(v0 + 32, v2);
}

  ;
}

uint64_t sub_1000352CC()
{
  return 0LL;
}

uint64_t sub_1000352E0(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_1000352E8()
{
  return v0;
}

uint64_t sub_1000352FC()
{
  return swift_arrayInitWithCopy(v0);
}

  ;
}

uint64_t sub_100035324(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_10003532C()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

  ;
}

size_t sub_100035344(void *a1)
{
  size_t result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

uint64_t sub_100035368()
{
  return Mirror.init(reflecting:)(v0 + 16);
}

uint64_t sub_100035374(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1000175B0(a3);
}

void sub_100035384(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0xD000000000000018LL;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

void sub_100035390()
{
  v0[2] = (*(void *)(*v0 + 16LL) - 1LL) & (v0[2] + 1LL);
}

uint64_t sub_1000353B4()
{
  return _typeName(_:qualified:)(v0, 0LL);
}

uint64_t sub_1000353C0()
{
  return ((uint64_t (*)(void))swift_arrayInitWithTakeBackToFront)();
}

uint64_t sub_1000353D0()
{
  return ((uint64_t (*)(void))swift_arrayInitWithTakeFrontToBack)();
}

  ;
}

  ;
}

uint64_t sub_10003540C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t (*a18)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  return a18(v19, v18, v20, v21);
}

uint64_t sub_100035424()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

void *sub_1000354A0@<X0>(void *__dst@<X2>, const void *a2@<X1>, size_t a3@<X8>)
{
  return memmove(__dst, a2, a3);
}

uint64_t sub_1000354AC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

  ;
}

void sub_1000354C4(uint64_t a1@<X8>)
{
  *(void *)(v1 + 24) = a1;
  sub_100032454();
}

void sub_1000354D8()
{
  *(void *)(v0 - 176) = 0LL;
  *(void *)(v0 - 16_Block_object_dispose((const void *)(v1 - 136), 8) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(56LL);
}

  ;
}

uint64_t sub_100035508()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10003551C(uint64_t a1)
{
  return swift_retain_n(a1, 2LL);
}

uint64_t sub_100035528()
{
  return swift_arrayDestroy(v0, v1);
}

void sub_100035534()
{
}

double sub_100035540()
{
  *(void *)(v0 - 96) = 0LL;
  double result = 0.0;
  *(_OWORD *)(v0 - 12_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
  *(_OWORD *)(v0 - 112) = 0u;
  *(_OWORD *)(v0 - 144) = 0u;
  *(_BYTE *)(v0 - 8_Block_object_dispose((const void *)(v1 - 136), 8) = -1;
  return result;
}

uint64_t sub_10003555C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return EmbeddedChannel.WrongTypeError.actual.getter(a1, a2 + 8);
}

uint64_t sub_10003556C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 6LL);
}

uint64_t sub_100035574()
{
  return Mirror.subjectType.getter();
}

uint64_t sub_10003557C()
{
  return Mirror.children.getter();
}

void *sub_100035584(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va);
}

void sub_100035594()
{
}

uint64_t sub_1000355A4(uint64_t a1)
{
  return Mirror.init(reflecting:)(a1);
}

uint64_t sub_1000355AC(uint64_t a1)
{
  *(void *)(v1 - 176) = a1;
  return sub_1000346EC((uint64_t *)(v1 - 112), a1 + 16);
}

uint64_t sub_1000355BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, v5 - 64, v4, a4, 0LL);
}

uint64_t sub_1000355CC()
{
  return v0 + 32;
}

  ;
}

uint64_t sub_1000355E4()
{
  return type metadata accessor for Mirror(0LL);
}

  ;
}

uint64_t sub_100035604(uint64_t a1, uint64_t a2)
{
  return sub_10002B550(v2, a2);
}

uint64_t sub_10003560C()
{
  return sub_1000CF8B0(v2, v1, v0);
}

uint64_t sub_10003561C()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100035624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_arrayInitWithCopy(a3);
}

  ;
}

  ;
}

uint64_t sub_100035650()
{
  return swift_release(*(void *)(v0 + 24));
}

  ;
}

void sub_10003566C()
{
}

uint64_t sub_100035678()
{
  return v0;
}

uint64_t sub_10003568C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  *(void *)(v12 + 32) = 0LL;
  *(void *)(v12 + 40) = 0LL;
  return swift_endAccess(va);
}

Swift::Int sub_100035698()
{
  return Hasher._finalize()();
}

void sub_1000356A0()
{
}

uint64_t sub_1000356AC()
{
  return _print_unlocked<A, B>(_:_:)(v0 - 112, v0 - 128);
}

void sub_1000356B8(Swift::String a1)
{
}

uint64_t sub_1000356C4(uint64_t a1, ...)
{
  return swift_endAccess(va);
}

  ;
}

uint64_t sub_1000356D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2LL, a7, 24LL);
}

BOOL sub_1000356E0()
{
  return v0 > 1;
}

uint64_t sub_1000356F4()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_10003572C(uint64_t a1)
{
  return sub_100018F04(a1);
}

uint64_t sub_100035734()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100035740()
{
  return _typeName(_:qualified:)(v0, 0LL);
}

uint64_t sub_10003574C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100035754()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_10003575C()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

void *sub_100035774@<X0>(void *__dst@<X2>, const void *a2@<X1>, size_t a3@<X8>)
{
  return memcpy(__dst, a2, a3);
}

  ;
}

uint64_t HTTPServerProtocolErrorHandler.__allocating_init()()
{
  uint64_t result = swift_allocObject(v0, 17LL, 7LL);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t HTTPServerProtocolErrorHandler.init()()
{
  uint64_t result = v0;
  *(_BYTE *)(v0 + 16) = 0;
  return result;
}

void HTTPServerProtocolErrorHandler.errorCaught(context:error:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  swift_errorRetain(a2);
  uint64_t v3 = sub_1000175B0(&qword_1002A9710);
  if (swift_dynamicCast(&v11, &v7, v3, &type metadata for HTTPParserError, 6LL)
    && (*(_BYTE *)(v2 + 16) & 1) == 0)
  {
    uint64_t v4 = type metadata accessor for HTTPResponseHead._Storage();
    uint64_t v5 = swift_allocObject(v4, 44LL, 7LL);
    *(void *)(v5 + 16) = 0LL;
    *(void *)(v5 + 24) = 0LL;
    *(void *)(v5 + 32) = 21LL;
    *(_DWORD *)(v5 + 40) = 65537;
    uint64_t v6 = sub_1000175B0(&qword_1002AA1A0);
    uint64_t v7 = v5;
    *(void *)&__int128 v8 = &off_100270FE0;
    *((void *)&v8 + Hasher._combine(_:)(v1 & 1) = 2LL;
    uint64_t v9 = v6;
    char v10 = 2;
    swift_retain();
    ChannelHandlerContext.write(_:promise:)();
    sub_1000324E8((uint64_t)&v7);
    uint64_t v9 = v6;
    uint64_t v7 = 0LL;
    *(void *)&__int128 v8 = 0LL;
    *(void *)((char *)&v8 + 7) = 0LL;
    HIBYTE(v_Block_object_dispose((const void *)(v1 - 136), 8) = 2;
    char v10 = 2;
    ChannelHandlerContext.writeAndFlush(_:promise:)();
    swift_release(v5);
    sub_1000324E8((uint64_t)&v7);
  }

  ChannelHandlerContext.fireErrorCaught(_:)();
}

uint64_t HTTPServerProtocolErrorHandler.write(context:data:promise:)()
{
  uint64_t result = sub_10002D850();
  uint64_t v2 = result;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  unint64_t v7 = HIBYTE(v5);
  if (HIBYTE(v5))
  {
    if ((_DWORD)v7 != 1)
    {
      if ((*(_BYTE *)(v0 + 16) & 1) != 0)
      {
        *(_BYTE *)(v0 + 16) = 0;
        goto LABEL_9;
      }

      goto LABEL_11;
    }

    if ((*(_BYTE *)(v0 + 16) & 1) != 0)
    {
LABEL_9:
      ChannelHandlerContext.write(_:promise:)();
      return sub_100032488(v2, v4, v6, v7);
    }

    __break(1u);
  }

  if ((*(_BYTE *)(v0 + 16) & 1) == 0)
  {
    *(_BYTE *)(v0 + 16) = 1;
    goto LABEL_9;
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t HTTPServerProtocolErrorHandler.deinit()
{
  return v0;
}

uint64_t HTTPServerProtocolErrorHandler.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 17LL, 7LL);
}

uint64_t type metadata accessor for HTTPServerProtocolErrorHandler()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService30HTTPServerProtocolErrorHandler);
}

uint64_t sub_1000359E0()
{
  *(void *)(v1 + 80) = v0;
  return swift_task_switch(sub_1000359F8, 0LL, 0LL);
}

uint64_t sub_1000359F8()
{
  uint64_t v0 = sub_100019310((uint64_t)&unk_1002771C0, 24LL);
  sub_100037A00(v0);
  sub_10002A4C8();
  sub_100037AD4();
  sub_1001008E0();
  sub_10002A51C();
  return sub_1000378D4();
}

uint64_t sub_100035A60()
{
  *(void *)(v1 + 80) = v0;
  return swift_task_switch(sub_100035A78, 0LL, 0LL);
}

uint64_t sub_100035A78()
{
  uint64_t v0 = sub_100019310((uint64_t)&unk_100277198, 24LL);
  sub_100037A00(v0);
  sub_10002A4C8();
  sub_100037AD4();
  sub_1000FEED0();
  sub_10002A51C();
  return sub_1000378D4();
}

uint64_t sub_100035AE0()
{
  if (v0) {
    sub_100037AB4();
  }
  return sub_1000379D8(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100035B10()
{
  *(void *)(v1 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = v0;
  return swift_task_switch(sub_100035B28, 0LL, 0LL);
}

uint64_t sub_100035B28()
{
  uint64_t v0 = sub_100019310((uint64_t)&unk_100277170, 24LL);
  sub_100037A00(v0);
  sub_10002A4C8();
  sub_100037AD4();
  sub_100100A94();
  sub_10002A51C();
  return sub_1000378D4();
}

uint64_t sub_100035B8C()
{
  if (!v0) {
    return sub_100037914(*(void *)(v2 + 80), *(uint64_t (**)(void))(v1 + 8));
  }
  sub_100037AB4();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100035BDC()
{
  *(void *)(v1 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = v0;
  return swift_task_switch(sub_100035BF4, 0LL, 0LL);
}

uint64_t sub_100035BF4()
{
  uint64_t v0 = sub_100019310((uint64_t)&unk_100277148, 24LL);
  sub_100037A00(v0);
  sub_10002A4C8();
  sub_100037AD4();
  sub_100100B60();
  sub_10002A51C();
  return sub_1000378D4();
}

uint64_t EventLoopFuture.get()(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return sub_100037860((uint64_t)sub_100035C70);
}

uint64_t sub_100035C70()
{
  uint64_t v1 = (void *)sub_100037884((uint64_t)&unk_1002AA6B8);
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100035CD4;
  sub_1000352C0();
  return v3();
}

uint64_t sub_100035CD4()
{
  uint64_t v2 = *(void *)(*v1 + 40);
  uint64_t v3 = *v1;
  *(void *)(v3 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v0;
  swift_task_dealloc(v2);
  if (!v0) {
    return sub_10003786C(*(uint64_t (**)(void))(v3 + 8));
  }
  sub_1000352C0();
  return sub_100037A30(v4, v5, v6);
}

uint64_t sub_100035D2C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100035D38(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = swift_allocObject(&unk_100277238, 32LL, 7LL);
  *(void *)(v4 + 16) = *(void *)(v3 + 80);
  *(void *)(v4 + 24) = a1;
  EventLoopFuture.whenComplete(_:)();
  return swift_release(v4);
}

uint64_t sub_100035D98(uint64_t a1)
{
  return sub_100035D38(a1, v1);
}

uint64_t sub_100035DA0(uint64_t a1, char a2, uint64_t a3)
{
  if ((a2 & 1) == 0) {
    return sub_100037A24(a3);
  }
  uint64_t v6 = sub_1000175B0(&qword_1002A9710);
  uint64_t v7 = sub_1000252D0(v6, (uint64_t)&protocol self-conformance witness table for Error);
  sub_100037A88(v7, v8);
  return sub_100037A18(a3, v3);
}

uint64_t sub_100035DF4(uint64_t a1, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    uint64_t v6 = sub_1000175B0(&qword_1002A9710);
    uint64_t v7 = sub_1000252D0(v6, (uint64_t)&protocol self-conformance witness table for Error);
    sub_100037A88(v7, v8);
    return sub_100037A18(a3, v3);
  }

  else
  {
    **(void **)(*(void *)(a3 + 64) + 4sub_10002A718(v0 + 24, (uint64_t)v30, 0LL) = a1;
    swift_retain();
    return sub_100037A24(a3);
  }

uint64_t sub_100035E5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  uint64_t v7 = __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  char v11 = (char *)&v18 - v10;
  uint64_t v12 = sub_100018EC0(&qword_1002A9710);
  uint64_t v13 = type metadata accessor for Result(0LL, a3);
  __chkstk_darwin(v13);
  uint64_t v15 = (uint64_t *)((char *)&v18 - v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v18 - v14, a1, v13);
  if (swift_getEnumCaseMultiPayload(v15, v13) == 1)
  {
    uint64_t v19 = *v15;
    return sub_100036020((uint64_t)&v19, a2, a3, v12, (uint64_t)&protocol self-conformance witness table for Error);
  }

  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v6 + 32))(v11, v15, a3);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, a3);
    sub_100035FE8((uint64_t)v9, a2, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, a3);
  }

uint64_t sub_100035FE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_continuation_throwingResume(a2);
}

uint64_t sub_100036020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = swift_allocError(a4, a5, 0LL, 0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32LL))(v9, a1, a4);
  return swift_continuation_throwingResumeWithError(a2, v8);
}

uint64_t sub_100036084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[10] = a1;
  if (a2)
  {
    uint64_t ObjectType = swift_getObjectType(a2);
    uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, a3);
    uint64_t v10 = v9;
  }

  else
  {
    uint64_t v8 = 0LL;
    uint64_t v10 = 0LL;
  }

  return swift_task_switch(sub_1000360EC, v8, v10);
}

uint64_t sub_1000360EC()
{
  uint64_t v1 = (void (*)(uint64_t))v0[11];
  v0[7] = v0[10];
  v0[2] = v0;
  v0[3] = sub_100035AE0;
  uint64_t v2 = swift_continuation_init(v0 + 2, 1LL);
  v1(v2);
  return sub_1000378D4();
}

uint64_t EventLoopGroup.shutdownGracefully()(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100037860((uint64_t)sub_100036150);
}

uint64_t sub_100036150()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = swift_task_alloc(48LL);
  uint64_t v3 = sub_100037A74(v2);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 16);
  *(void *)(v3 + 32) = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v4;
  void *v4 = v0;
  v4[1] = sub_1000361E8;
  sub_1000352C0();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_1000361E8()
{
  if (!v1) {
    swift_task_dealloc(*(void *)(v0 + 40));
  }
  sub_1000352C0();
  return sub_100037878(v2, v3, v4);
}

uint64_t sub_100036230()
{
  return sub_10003786C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100036258(uint64_t a1)
{
  uint64_t v2 = sub_1000175B0(&qword_1002AA7A8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL), a1, v2);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 16) & ~v5;
  uint64_t v7 = swift_allocObject(&unk_100277210, v6 + v4, v5 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))( v7 + v6,  (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v2);
  EventLoopGroup.shutdownGracefully(_:)();
  return swift_release(v7);
}

uint64_t sub_100036350(uint64_t a1)
{
  return sub_100036258(a1);
}

uint64_t sub_10003635C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v4 = a1;
    swift_errorRetain(a1);
    uint64_t v1 = sub_1000175B0(&qword_1002AA7A8);
    return CheckedContinuation.resume(throwing:)(&v4, v1);
  }

  else
  {
    uint64_t v3 = sub_1000175B0(&qword_1002AA7A8);
    return CheckedContinuation.resume(returning:)(v3, v3);
  }

uint64_t EventLoopPromise.completeWithTask(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1000175B0(&qword_1002AA6C8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for TaskPriority(0LL);
  sub_10001762C((uint64_t)v10, 1LL, 1LL, v11);
  uint64_t v12 = (void *)sub_100019310((uint64_t)&unk_1002770F8, 64LL);
  v12[2] = 0LL;
  uint64_t v13 = v12 + 2;
  v12[3] = 0LL;
  uint64_t v12[4] = a4;
  v12[5] = a1;
  v12[6] = a2;
  v12[7] = a3;
  LODWORD(a4) = sub_10001D158((uint64_t)v10, 1LL, v11);
  swift_retain();
  uint64_t v14 = swift_retain();
  if ((_DWORD)a4 == 1)
  {
    sub_100037590((uint64_t)v10);
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v17 = 7168LL;
  }

  else
  {
    unsigned __int8 v18 = TaskPriority.rawValue.getter(v14);
    (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
    uint64_t v17 = v18 | 0x1C00LL;
    uint64_t v19 = *v13;
    if (*v13)
    {
      uint64_t v20 = v12[3];
      uint64_t ObjectType = swift_getObjectType(*v13);
      swift_unknownObjectRetain(v19);
      uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v20);
      uint64_t v16 = v22;
      swift_unknownObjectRelease(v19);
    }

    else
    {
      uint64_t v15 = 0LL;
      uint64_t v16 = 0LL;
    }
  }

  uint64_t v23 = sub_100019310((uint64_t)&unk_100277120, 32LL);
  *(void *)(v23 + 16) = &unk_1002AA6D8;
  *(void *)(v23 + 24) = v12;
  if (v16 | v15)
  {
    v26[0] = 0LL;
    v26[1] = 0LL;
    uint64_t v24 = v26;
    void v26[2] = v15;
    v26[3] = v16;
  }

  else
  {
    uint64_t v24 = 0LL;
  }

  return swift_task_create(v17, v24, (char *)&type metadata for () + 8, &unk_1002AA6E8, v23);
}

uint64_t sub_100036590(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[2] = a6;
  v7[3] = a7;
  uint64_t v9 = *(void *)(a7 - 8);
  void v7[4] = v9;
  uint64_t v10 = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v7[5] = v10;
  uint64_t v13 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v11 = (void *)swift_task_alloc(a4[1]);
  v7[6] = v11;
  *uint64_t v11 = v7;
  v11[1] = sub_10003661C;
  return v13(v10);
}

uint64_t sub_10003661C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48LL);
  *(void *)(*(void *)v1 + 56LL) = v0;
  swift_task_dealloc(v2);
  sub_1000352C0();
  return sub_100037A30(v3, v4, v5);
}

uint64_t sub_100036674()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 24);
  EventLoopPromise.succeed(_:)(v1, *(void *)(v0 + 16), v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100037AE0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000366CC()
{
  uint64_t v1 = *(void *)(v0 + 56);
  EventLoopPromise.fail(_:)(v1);
  swift_errorRelease(v1);
  sub_100037AE0();
  return sub_10003786C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t Channel.writeAndFlush<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  void v5[4] = a3;
  _OWORD v5[2] = a1;
  return sub_100037860((uint64_t)sub_100036720);
}

{
  return sub_100038230( a1,  a2,  a3,  a4,  233LL,  (uint64_t (*)(_BYTE *, const char *, uint64_t, uint64_t, uint64_t, uint64_t, void))ChannelOutboundInvoker.writeAndFlush(_:file:line:));
}

uint64_t sub_100036720()
{
  v0[7] = Channel.writeAndFlush<A>(_:)(v0[2], v0[3], v0[4], v0[5]);
  uint64_t v1 = (void *)sub_100037884((uint64_t)&unk_1002AA6F8);
  v0[8] = (uint64_t)v1;
  uint64_t v2 = (uint64_t (*)(void))sub_1000378C4(v1, (uint64_t)sub_100036770, v4);
  return sub_10003786C(v2);
}

uint64_t sub_100036770()
{
  *(void *)(v0 + 72) = v1;
  swift_task_dealloc(v3);
  if (!v1) {
    swift_release(*(void *)(v0 + 56));
  }
  sub_1000352C0();
  return sub_100037878(v4, v5, v6);
}

uint64_t sub_1000367C4()
{
  return sub_10003786C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t Channel.setOption<A>(_:value:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  void v7[4] = a3;
  v7[2] = a1;
  return sub_100037860((uint64_t)sub_10003680C);
}

uint64_t sub_10003680C()
{
  uint64_t v1 = (*(uint64_t (**)(void, void, void, void, void))(v0[6] + 64LL))( v0[2],  v0[3],  v0[5],  v0[7],  v0[4]);
  sub_100037A0C(v1);
  uint64_t v2 = (void *)sub_100037884((uint64_t)&unk_1002AA6F8);
  v0[10] = v2;
  uint64_t v3 = (uint64_t (*)(void))sub_1000378C4(v2, (uint64_t)sub_100036860, v5);
  return sub_10003786C(v3);
}

uint64_t sub_100036860()
{
  if (!v0) {
    sub_1000379E8();
  }
  sub_1000352C0();
  return sub_100037878(v1, v2, v3);
}

uint64_t sub_1000368A0()
{
  uint64_t v0 = (uint64_t (*)(void))sub_100037AA8();
  return sub_10003786C(v0);
}

uint64_t Channel.getOption<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  void v7[4] = a3;
  v7[2] = a1;
  return sub_100037860((uint64_t)sub_1000368E0);
}

uint64_t sub_1000368E0()
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[6] + 72))(v0[3], v0[5], v0[7], v0[4]);
  sub_100037A0C(v1);
  uint64_t v2 = (uint64_t **)swift_task_alloc(dword_1002AA6B4);
  v0[10] = (uint64_t)v2;
  void *v2 = v0;
  v2[1] = (uint64_t *)sub_100036944;
  return EventLoopFuture.get()(v0[2]);
}

uint64_t sub_100036944()
{
  if (v0)
  {
    sub_1000352C0();
    return sub_100037878(v2, v3, v4);
  }

  else
  {
    sub_1000379E8();
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

uint64_t ChannelOutboundInvoker.register(file:line:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = a6;
  *(void *)(v7 + 56) = v6;
  *(void *)(v7 + 32) = a4;
  *(void *)(v7 + 40) = a5;
  *(_BYTE *)(v7 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = a3;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  return sub_100037860((uint64_t)sub_1000369A8);
}

uint64_t sub_1000369A8()
{
  *(void *)(v0 + 64) = v1;
  uint64_t v2 = (void *)sub_100037884((uint64_t)&unk_1002AA718);
  *(void *)(v0 + 72) = v2;
  uint64_t v3 = (uint64_t (*)(void))sub_1000378C4(v2, (uint64_t)sub_1000369FC, v5);
  return sub_10003786C(v3);
}

uint64_t sub_1000369FC()
{
  if (!v1) {
    swift_release(*(void *)(v0 + 64));
  }
  sub_1000352C0();
  return sub_100037878(v2, v3, v4);
}

uint64_t sub_100036A40()
{
  return sub_10003786C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ChannelOutboundInvoker.bind(to:file:line:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100037860((uint64_t)sub_100036A84);
}

uint64_t sub_100036A84()
{
  uint64_t v1 = sub_100037950();
  ChannelOutboundInvoker.bind(to:file:line:)(v1, v2, v3, v4, v5, v6, v7);
  sub_100037A0C(v8);
  uint64_t v9 = (void *)sub_100037884((uint64_t)&unk_1002AA718);
  *(void *)(v0 + 80) = v9;
  uint64_t v10 = (uint64_t (*)(void))sub_1000378C4(v9, (uint64_t)sub_100036AC8, v12);
  return sub_10003786C(v10);
}

uint64_t sub_100036AC8()
{
  if (!v0) {
    sub_1000379E8();
  }
  sub_1000352C0();
  return sub_100037878(v1, v2, v3);
}

uint64_t ChannelOutboundInvoker.connect(to:file:line:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100037860((uint64_t)sub_100036B20);
}

uint64_t sub_100036B20()
{
  uint64_t v1 = sub_100037950();
  ChannelOutboundInvoker.connect(to:file:line:)(v1, v2, v3, v4, v5, v6, v7);
  sub_100037A0C(v8);
  uint64_t v9 = (void *)sub_100037884((uint64_t)&unk_1002AA718);
  *(void *)(v0 + 80) = v9;
  uint64_t v10 = (uint64_t (*)(void))sub_1000378C4(v9, (uint64_t)sub_100036AC8, v12);
  return sub_10003786C(v10);
}

uint64_t ChannelOutboundInvoker.writeAndFlush(_:file:line:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100037860((uint64_t)sub_100036B7C);
}

uint64_t sub_100036B7C()
{
  uint64_t v1 = sub_100037950();
  ChannelOutboundInvoker.writeAndFlush(_:file:line:)(v1, v2, v3, v4, v5, v6, v7);
  sub_100037A0C(v8);
  uint64_t v9 = (void *)sub_100037884((uint64_t)&unk_1002AA718);
  *(void *)(v0 + 80) = v9;
  uint64_t v10 = (uint64_t (*)(void))sub_1000378C4(v9, (uint64_t)sub_100036AC8, v12);
  return sub_10003786C(v10);
}

uint64_t ChannelOutboundInvoker.close(mode:file:line:)( char a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = a7;
  *(void *)(v8 + 56) = v7;
  *(void *)(v8 + 32) = a5;
  *(void *)(v8 + 40) = a6;
  *(_BYTE *)(v8 + 89) = a4;
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  *(_BYTE *)(v8 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = a1;
  return sub_100037860((uint64_t)sub_100036BE0);
}

uint64_t sub_100036BE0()
{
  *(void *)(v0 + 64) = v1;
  uint64_t v2 = (void *)sub_100037884((uint64_t)&unk_1002AA718);
  *(void *)(v0 + 72) = v2;
  uint64_t v3 = (uint64_t (*)(void))sub_1000378C4(v2, (uint64_t)sub_100036C38, v5);
  return sub_10003786C(v3);
}

uint64_t sub_100036C38()
{
  if (!v1) {
    swift_release(*(void *)(v0 + 64));
  }
  sub_1000352C0();
  return sub_100037878(v2, v3, v4);
}

uint64_t ChannelOutboundInvoker.triggerUserOutboundEvent(_:file:line:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100037860((uint64_t)sub_100036C94);
}

uint64_t sub_100036C94()
{
  uint64_t v1 = sub_100037950();
  ChannelOutboundInvoker.triggerUserOutboundEvent(_:file:line:)(v1, v2, v3, v4, v5, v6, v7);
  sub_100037A0C(v8);
  uint64_t v9 = (void *)sub_100037884((uint64_t)&unk_1002AA718);
  *(void *)(v0 + 80) = v9;
  uint64_t v10 = (uint64_t (*)(void))sub_1000378C4(v9, (uint64_t)sub_100036CD8, v12);
  return sub_10003786C(v10);
}

uint64_t sub_100036CD8()
{
  if (!v0) {
    sub_1000379E8();
  }
  sub_1000352C0();
  return sub_100037878(v1, v2, v3);
}

uint64_t ChannelPipeline.addHandler(_:name:position:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  void v7[4] = a3;
  v7[2] = a1;
  return sub_100037860((uint64_t)sub_100036D34);
}

uint64_t sub_100036D34()
{
  uint64_t v1 = sub_100099A08();
  sub_100037A0C(v1);
  uint64_t v2 = (void *)sub_100037884((uint64_t)&unk_1002AA718);
  *(void *)(v0 + 80) = v2;
  uint64_t v3 = (uint64_t (*)(void))sub_1000378C4(v2, (uint64_t)sub_100036CD8, v5);
  return v3();
}

uint64_t ChannelPipeline.removeHandler(_:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100037860((uint64_t)sub_100036DE0);
}

uint64_t sub_100036DE0()
{
  uint64_t v2 = (void *)sub_100037884((uint64_t)&unk_1002AA718);
  *(void *)(v0 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v2;
  uint64_t v3 = (uint64_t (*)(void))sub_1000378C4(v2, (uint64_t)sub_100036E24, v5);
  return sub_10003786C(v3);
}

uint64_t sub_100036E24()
{
  if (!v1) {
    swift_release(*(void *)(v0 + 40));
  }
  sub_1000352C0();
  return sub_100037878(v2, v3, v4);
}

uint64_t ChannelPipeline.removeHandler(name:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100037860((uint64_t)sub_100036E7C);
}

uint64_t sub_100036E7C()
{
  uint64_t v2 = (void *)sub_100037884((uint64_t)&unk_1002AA718);
  *(void *)(v0 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v2;
  uint64_t v3 = (uint64_t (*)(void))sub_1000378C4(v2, (uint64_t)sub_100036EC0, v5);
  return sub_10003786C(v3);
}

uint64_t sub_100036EC0()
{
  if (!v1) {
    swift_release(*(void *)(v0 + 40));
  }
  sub_1000352C0();
  return sub_100037878(v2, v3, v4);
}

uint64_t sub_100036F04()
{
  return sub_10003786C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ChannelPipeline.removeHandler(context:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_100037860((uint64_t)sub_100036F40);
}

uint64_t sub_100036F40()
{
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = (void *)sub_100037884((uint64_t)&unk_1002AA718);
  *(void *)(v0 + 40) = v2;
  uint64_t v3 = (uint64_t (*)(void))sub_1000378C4(v2, (uint64_t)sub_100036F88, v5);
  return sub_10003786C(v3);
}

uint64_t sub_100036F88()
{
  *(void *)(v0 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v1;
  swift_task_dealloc(v3);
  if (!v1) {
    swift_release(*(void *)(v0 + 32));
  }
  sub_1000352C0();
  return sub_100037878(v4, v5, v6);
}

uint64_t sub_100036FDC()
{
  return sub_10003786C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ChannelPipeline.context(handler:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100037860((uint64_t)sub_10003701C);
}

uint64_t sub_10003701C()
{
  uint64_t v2 = (void *)sub_100037884((uint64_t)&unk_1002AA770);
  *(void *)(v0 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v2;
  uint64_t v3 = (uint64_t (*)(void))sub_1000378C4(v2, (uint64_t)sub_100037060, v5);
  return sub_10003786C(v3);
}

uint64_t sub_100037060()
{
  if (v1)
  {
    sub_1000352C0();
    return sub_100037940(v4, v5, v6);
  }

  else
  {
    swift_release(*(void *)(v2 + 40));
    return sub_100037914(v0, *(uint64_t (**)(void))(v3 + 8));
  }

uint64_t ChannelPipeline.context(name:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return sub_100037860((uint64_t)sub_1000370C4);
}

uint64_t sub_1000370C4()
{
  uint64_t v2 = (void *)sub_100037884((uint64_t)&unk_1002AA770);
  *(void *)(v0 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v2;
  uint64_t v3 = (uint64_t (*)(void))sub_1000378C4(v2, (uint64_t)sub_100037108, v5);
  return sub_10003786C(v3);
}

uint64_t sub_100037108()
{
  if (v1)
  {
    sub_1000352C0();
    return sub_100037940(v4, v5, v6);
  }

  else
  {
    swift_release(*(void *)(v2 + 40));
    return sub_100037914(v0, *(uint64_t (**)(void))(v3 + 8));
  }

uint64_t ChannelPipeline.context<A>(handlerType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  v4[5] = v3;
  void v4[2] = a1;
  __int128 v4[3] = a2;
  return sub_100037860((uint64_t)sub_10003716C);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v7 = *(void *)(v3 + 56);
  uint64_t v8 = sub_10002A444();
  type metadata accessor for ChannelHandlerContext();
  sub_10009B648();
  uint64_t v13 = sub_10009B4C8(v9, v10, v11, v12, 503LL, v8);
  if ((sub_10009B62C(v8, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 16)) & 1) != 0)
  {
    ChannelPipeline._contextSync<A>(handlerType:)();
    uint64_t v16 = sub_100098E30(v15, v14 & 1, v13);
    sub_10009B790(v16, v17, (uint64_t (*)(void))&_swift_release);
  }

  else
  {
    unsigned __int8 v18 = (void *)sub_100019310((uint64_t)&unk_10027DDA0, 56LL);
    _OWORD v18[2] = a2;
    v18[3] = a3;
    void v18[4] = v13;
    v18[5] = v3;
    v18[6] = a1;
    sub_10002A4C8();
    sub_100041B5C();
    sub_10009B4D4((uint64_t)sub_100099C1C, (uint64_t)v18);
    sub_10009B770();
  }

  return v13;
}

uint64_t sub_10003716C()
{
  v0[6] = ChannelPipeline.context<A>(handlerType:)(v0[2], v0[3], v0[4]);
  uint64_t v1 = (void *)sub_100037884((uint64_t)&unk_1002AA788);
  v0[7] = (uint64_t)v1;
  uint64_t v2 = (uint64_t (*)(void))sub_1000378C4(v1, (uint64_t)sub_1000371B8, v4);
  return sub_10003786C(v2);
}

uint64_t sub_1000371B8(uint64_t a1)
{
  uint64_t v10 = *v2;
  uint64_t v4 = v10;
  sub_100037AC8(&v10);
  *(void *)(v4 + 64) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    sub_1000352C0();
    return sub_100037940(v6, v7, v8);
  }

  else
  {
    swift_release(*(void *)(v4 + 48));
    return sub_100037914(a1, (uint64_t (*)(void))v2[1]);
  }

uint64_t sub_100037224()
{
  return sub_10003786C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ChannelPipeline.addHandlers(_:position:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  v4[5] = v3;
  void v4[2] = a1;
  __int128 v4[3] = a2;
  return sub_100037860((uint64_t)sub_100037264);
}

{
  uint64_t v3;
  void *v7;
  uint64_t v7 = (void *)swift_task_alloc(dword_1002AA794);
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_100037368;
  return ChannelPipeline.addHandlers(_:position:)(a1, a2, a3);
}

uint64_t sub_100037264()
{
  v0[6] = ChannelPipeline.addHandlers(_:position:)(v0[2], v0[3], v0[4]);
  uint64_t v1 = (void *)sub_100037884((uint64_t)&unk_1002AA718);
  v0[7] = v1;
  uint64_t v2 = (uint64_t (*)(void))sub_1000378C4(v1, (uint64_t)sub_1000372B0, v4);
  return sub_10003786C(v2);
}

uint64_t sub_1000372B0()
{
  *(void *)(v0 + 64) = v1;
  swift_task_dealloc(v3);
  if (!v1) {
    swift_release(*(void *)(v0 + 48));
  }
  sub_1000352C0();
  return sub_100037878(v4, v5, v6);
}

uint64_t sub_100037368()
{
  return sub_10003786C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003738C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = sub_10001D158(a1, 1LL, v6);
  if ((_DWORD)v7 == 1)
  {
    sub_100037590(a1);
    uint64_t v8 = 7168LL;
  }

  else
  {
    unsigned __int8 v9 = TaskPriority.rawValue.getter(v7);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v8 = v9 | 0x1C00LL;
  }

  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    uint64_t v11 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v10);
    uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
    uint64_t v15 = v14;
    swift_unknownObjectRelease(v10);
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v15 = 0LL;
  }

  uint64_t v16 = sub_100019310((uint64_t)&unk_1002771E8, 32LL);
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  if (v15 | v13)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    uint64_t v17 = v19;
    void v19[2] = v13;
    v19[3] = v15;
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  return swift_task_create(v8, v17, &type metadata for ()[8], &unk_1002AA7A0, v16);
}

uint64_t sub_1000374C4()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1000374F8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (int *)v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc(dword_1002AA6D4);
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_100037368;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t))((char *)&dword_1002AA6D0
                                                                                              + dword_1002AA6D0))( a1,  v4,  v5,  v7,  v9,  v8,  v6);
}

uint64_t sub_100037590(uint64_t a1)
{
  uint64_t v2 = sub_1000175B0(&qword_1002AA6C8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000375D0(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_100037634;
  return v6(a1);
}

uint64_t sub_100037634()
{
  return sub_10003786C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003765C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1002AA6E4);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100037A3C(v1);
  return sub_1000379F0(v2, v3, v4, v5);
}

uint64_t sub_1000376A8(uint64_t a1, uint64_t a2)
{
  return sub_100035DA0(*(void *)a1, *(_BYTE *)(a1 + 8), a2);
}

uint64_t sub_1000376CC(uint64_t a1, uint64_t a2)
{
  return sub_100035DF4(*(void *)a1, *(_BYTE *)(a1 + 8), a2);
}

uint64_t sub_1000376F8(uint64_t a1)
{
  return sub_1000376CC(a1, *(void *)(v1 + 16));
}

uint64_t sub_100037704(uint64_t a1)
{
  return sub_1000376A8(a1, *(void *)(v1 + 16));
}

uint64_t sub_100037710()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100037734()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1002AA6E4);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100037A3C(v1);
  return sub_1000379F0(v2, v3, v4, v5);
}

uint64_t sub_100037780()
{
  uint64_t v1 = sub_1000175B0(&qword_1002AA7A8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000377E4(uint64_t a1)
{
  return sub_10003635C(a1);
}

uint64_t sub_100037824()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100037834(uint64_t a1)
{
  return sub_100035E5C(a1, *(void *)(v1 + 24), *(void *)(v1 + 16));
}

uint64_t sub_100037860(uint64_t a1)
{
  return swift_task_switch(a1, 0LL, 0LL);
}

uint64_t sub_10003786C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100037878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_100037884@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

uint64_t sub_100037898()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 80);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_1000378B8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000378C4@<X0>(void *a1@<X0>, uint64_t a2@<X8>, uint64_t a3)
{
  *a1 = v3;
  a1[1] = a2;
  return a3;
}

uint64_t sub_1000378D4()
{
  return ((uint64_t (*)(void))swift_continuation_await)();
}

uint64_t sub_1000378E4()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - _Block_object_dispose((const void *)(v1 - 136), 8) = *v0;
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v1 - _Block_object_dispose((const void *)(v1 - 136), 8) = *v0;
  return swift_task_dealloc(v3);
}

uint64_t sub_100037904()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100037914(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_100037920()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 48);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 56) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_100037940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_100037950()
{
  return *(void *)(v0 + 16);
}

void sub_100037968()
{
  uint64_t v2 = (void *)(v1 - 8);
  void *v2 = *v0;
  void *v2 = *v0;
}

uint64_t sub_100037984@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v2;
  *(void *)(v2 + 24) = a1;
  return swift_continuation_init(v1, 1LL);
}

uint64_t sub_100037994()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 48);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 56) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_1000379B8()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 72);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 80) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_1000379D8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000379E8()
{
  return swift_release(*(void *)(v0 + 72));
}

uint64_t sub_1000379F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_100037A00(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  return swift_retain(a1);
}

uint64_t sub_100037A0C(uint64_t result)
{
  *(void *)(v1 + 72) = result;
  return result;
}

uint64_t sub_100037A18(uint64_t a1, uint64_t a2)
{
  return swift_continuation_throwingResumeWithError(a1, a2);
}

uint64_t sub_100037A24(uint64_t a1)
{
  return swift_continuation_throwingResume(a1);
}

uint64_t sub_100037A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_100037A3C(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_100037A5C(uint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 56) = a7;
  *(void *)(v8 + 64) = v7;
  *(void *)(v8 + 40) = a5;
  *(void *)(v8 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = a6;
  *(_BYTE *)(v8 + 96) = a4;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 32) = a3;
  *(void *)(v8 + 16) = result;
  return result;
}

uint64_t sub_100037A74(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t sub_100037A80()
{
  return swift_release(*(void *)(v0 + 72));
}

uint64_t sub_100037A88(uint64_t a1, void *a2)
{
  *a2 = v2;
  return swift_errorRetain(v2);
}

void sub_100037A98()
{
  *(void *)(v1 - _Block_object_dispose((const void *)(v1 - 136), 8) = *v0;
}

uint64_t sub_100037AA8()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_100037AB4()
{
  return swift_willThrow();
}

uint64_t sub_100037ABC()
{
  return *(void *)(v0 + 16);
}

void sub_100037AC8(void *a1@<X8>)
{
  *a1 = *v1;
}

  ;
}

uint64_t sub_100037AE0()
{
  return swift_task_dealloc(*(void *)(v0 + 40));
}

void sub_100037AE8()
{
  *(void *)(v0 + 56) = v0 + 80;
}

void ChannelCore.removeHandlers(pipeline:)()
{
}

uint64_t sub_100037B18()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_retain();
  ChannelPipeline.close(mode:promise:)();
  return swift_release(v1);
}

uint64_t sub_100037B5C()
{
  return sub_10002A598(v0);
}

uint64_t Channel.close(mode:promise:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A598(v4);
}

void static ChannelError.__derived_enum_equals(_:_:)(uint64_t a1, char a2)
{
  __asm { BR              X10 }

BOOL sub_100037BE8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return !a4 && v5 == v4;
}

void sub_100037DB4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100037DD8()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_retain();
  ChannelPipeline.register(promise:)();
  return swift_release(v1);
}

uint64_t sub_100037E0C()
{
  return sub_1000352E0(v0);
}

uint64_t Channel.register(promise:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000352E0(v3);
}

void sub_100037E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t Channel.bind(to:promise:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100037EE4(a1, a2, a3, a4);
}

void sub_100037E90(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100037EB4()
{
  return sub_10002A598(v0);
}

uint64_t Channel.connect(to:promise:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100037EE4(a1, a2, a3, a4);
}

uint64_t sub_100037EE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = sub_1000389A0(a1, a2, a3, a4);
  sub_1000389D8();
  return sub_10002A598(v4);
}

void sub_100037F18(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t Channel.write(_:promise:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100037EE4(a1, a2, a3, a4);
}

void sub_100037F48()
{
}

Swift::Void __swiftcall Channel.flush()()
{
}

void sub_100037F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100037F9C()
{
  return sub_100037FA8();
}

uint64_t sub_100037FA8()
{
  uint64_t v0 = EmbeddedChannel.pipeline.getter();
  sub_1000389D8();
  return sub_10002A598(v0);
}

uint64_t Channel.writeAndFlush(_:promise:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100037EE4(a1, a2, a3, a4);
}

void sub_100037FE8()
{
}

uint64_t sub_10003800C(void (*a1)(uint64_t))
{
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = swift_retain();
  a1(v4);
  return sub_1000352E0(v3);
}

uint64_t sub_100038038(void (*a1)(void))
{
  uint64_t v2 = EmbeddedChannel.pipeline.getter();
  a1();
  return sub_1000352E0(v2);
}

Swift::Void __swiftcall Channel.read()()
{
}

uint64_t sub_10003806C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v4 = (*(uint64_t (**)(void))(a2 + 32))();
  a3();
  return sub_1000352E0(v4);
}

void sub_100038098(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000380BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1000380E0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 32);
  swift_retain();
  ChannelPipeline.triggerUserOutboundEvent(_:promise:)(a1, a2);
  return swift_release(v5);
}

uint64_t sub_100038124(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = EmbeddedChannel.pipeline.getter();
  ChannelPipeline.triggerUserOutboundEvent(_:promise:)(a1, a2);
  return swift_release(v4);
}

uint64_t Channel.triggerUserOutboundEvent(_:promise:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_1000389A0(a1, a2, a3, a4);
  ChannelPipeline.triggerUserOutboundEvent(_:promise:)(a1, a2);
  return sub_10002A598(v6);
}

uint64_t Channel.registerAlreadyConfigured0(promise:)(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    unint64_t v2 = sub_100029C98();
    uint64_t v3 = swift_allocError(&type metadata for ChannelError, v2, 0LL, 0LL);
    *(void *)uint64_t v4 = 1LL;
    *(_BYTE *)(v4 + _Block_object_dispose((const void *)(v1 - 136), 8) = 3;
    swift_errorRetain(v3);
    sub_100098A70(v3, 1LL, v1);
    swift_errorRelease(v3);
    return swift_errorRelease(v3);
  }

  return result;
}

uint64_t Channel.write<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100038230( a1,  a2,  a3,  a4,  219LL,  (uint64_t (*)(_BYTE *, const char *, uint64_t, uint64_t, uint64_t, uint64_t, void))ChannelOutboundInvoker.write(_:file:line:));
}

uint64_t sub_100038230( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_BYTE *, const char *, uint64_t, uint64_t, uint64_t, uint64_t, void))
{
  uint64_t v13 = &v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v19 = v6;
  (*(void (**)(_BYTE *))(v14 + 16))(v13);
  NIOAny.init<A>(_:)((uint64_t)v13, a3);
  uint64_t v15 = a6( v18,  "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Channel.swift",  109LL,  2LL,  a5,  a2,  *(void *)(a4 + 8));
  sub_1000324E8((uint64_t)v18);
  return v15;
}

void Channel.write<A>(_:promise:)()
{
}

void Channel.writeAndFlush<A>(_:promise:)()
{
}

uint64_t ChannelCore.unwrapData<A>(_:as:)@<X0>(ValueMetadata *a1@<X3>, uint64_t a2@<X8>)
{
  return NIOAny.forceAs<A>(type:)(a1, a2);
}

void ChannelCore.tryUnwrapData<A>(_:as:)( uint64_t a1@<X2>, ValueMetadata *a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
}

uint64_t ChannelCore.removeHandlers(channel:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(ObjectType, a2);
  sub_10009401C();
  return sub_1000352E0(v4);
}

uint64_t sub_100038450(uint64_t result, char a2)
{
  if (a2 != 2)
  {
    if (a2 != 1) {
      return result;
    }
    result &= 0x3FFFFFFFFFFFFFFFuLL;
  }

  return swift_retain(result);
}

uint64_t sub_100038470(uint64_t result, char a2)
{
  if (a2 != 2)
  {
    if (a2 != 1) {
      return result;
    }
    result &= 0x3FFFFFFFFFFFFFFFuLL;
  }

  return swift_release(result);
}

void sub_100038490(uint64_t a1)
{
}

void sub_1000384AC()
{
}

void sub_1000384C8()
{
}

void sub_1000384EC()
{
}

void sub_100038510()
{
}

void sub_100038534()
{
}

void sub_100038558()
{
}

void sub_10003857C()
{
}

void sub_1000385A0()
{
}

void sub_1000385BC(uint64_t a1, uint64_t a2)
{
}

unint64_t sub_1000385DC()
{
  unint64_t result = qword_1002AA7B0;
  if (!qword_1002AA7B0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ChannelEvent, &type metadata for ChannelEvent);
    atomic_store(result, (unint64_t *)&qword_1002AA7B0);
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ChannelError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  sub_100038450(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v4;
  return a1;
}

uint64_t destroy for ChannelError(uint64_t a1)
{
  return sub_100038470(*(void *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for ChannelError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  sub_100038450(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  char v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v4;
  sub_100038470(v5, v6);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for OctaneSubscriptionPeriod(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = *((_BYTE *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t assignWithTake for ChannelError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v3;
  sub_100038470(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ChannelError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && *(_BYTE *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 252;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 3) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ChannelError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0;
    *(void *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_100038790(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_1000387A8(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)unint64_t result = a2 - 3;
    LOBYTE(a2) = 3;
  }

  *(_BYTE *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = a2;
  return result;
}

void type metadata accessor for ChannelError()
{
}

void type metadata accessor for NIOAttemptedToRemoveHandlerMultipleTimesError()
{
}

uint64_t storeEnumTagSinglePayload for ChannelEvent(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = 1;
  }
  else {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100038824 + 4 * byte_1001F5407[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100038858 + 4 * byte_1001F5402[v4]))();
}

uint64_t sub_100038858(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100038860(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x100038868LL);
  }
  return result;
}

uint64_t sub_100038874(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x10003887CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100038880(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100038888(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

void type metadata accessor for ChannelEvent()
{
}

void type metadata accessor for ChannelShouldQuiesceEvent()
{
}

void sub_1000388AC()
{
}

void sub_1000388C8()
{
}

void sub_1000388EC()
{
}

void sub_100038910()
{
}

void sub_100038934()
{
}

void sub_100038958()
{
}

void sub_100038974(uint64_t a1, uint64_t a2)
{
}

  ;
}

uint64_t sub_1000389A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
}

uint64_t sub_1000389B0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>, uint64_t a4)
{
  *(void *)(v6 - 56) = v5;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))( (char *)&a4 - ((a3 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  a2);
}

uint64_t sub_1000389D8()
{
  return v0(v2, v1);
}

  ;
}

uint64_t sub_100038A08()
{
  return swift_retain(*(void *)(v0 + 32));
}

uint64_t sub_100038A20@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v3 - 120, v2, v1);
}

void sub_100038A34()
{
}

uint64_t sub_100038A44()
{
  return ChannelPipeline.close(mode:promise:)();
}

uint64_t sub_100038A54()
{
  return ChannelPipeline.register(promise:)();
}

uint64_t sub_100038A60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 96);
  swift_bridgeObjectRetain();
  sub_10012A314(0x6F726665726F7473LL, 0xEA0000000000746ELL, v4);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  sub_100019390();
  if (!v8)
  {
    sub_10003A3EC();
LABEL_7:
    swift_bridgeObjectRelease();
    sub_1000390C0(v66);
    sub_10003A3F4(v17, v18, &qword_1002AA7B8);
    return sub_1000390C8((uint64_t)&v67, a2, &qword_1002AA7B8);
  }

  sub_10003A3E4(0xD000000000000010LL, 0x8000000100218FD0LL);
  if (!v10)
  {
    sub_10003A3EC();
    sub_10001EDA0();
    goto LABEL_7;
  }

  uint64_t v11 = v10;
  uint64_t v58 = v9;
  uint64_t v61 = v8;
  sub_10001DBCC();
  uint64_t v60 = v11;
  swift_bridgeObjectRetain();
  sub_10003A3E4(0x646E65747865LL, 0xE600000000000000LL);
  if (v13)
  {
    uint64_t v67 = v12;
    uint64_t v68 = v13;
    unint64_t v14 = sub_10003A3BC();
    uint64_t v16 = (void *)sub_10003A3D0(v14, (uint64_t)&type metadata for String, v15, v14);
    sub_100019390();
  }

  else
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
  }

  uint64_t v59 = v6;
  uint64_t v62 = a2;
  uint64_t v19 = v16[2];
  if (v19)
  {
    sub_10001DBCC();
    uint64_t v20 = (void **)(v16 + 5);
    uint64_t v21 = _swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v22 = (uint64_t)*(v20 - 1);
      uint64_t v23 = *v20;
      swift_bridgeObjectRetain();
      v24._countAndFlagsBits = v22;
      v24._object = v23;
      Swift::Int v25 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100270E30, v24);
      sub_100023EEC();
      if (!v25) {
        break;
      }
      if (v25 == 1)
      {
        char v26 = 1;
LABEL_15:
        if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
        {
          sub_10003A400();
          uint64_t v21 = v28;
        }

        unint64_t v27 = v21[2];
        if (v27 >= v21[3] >> 1)
        {
          sub_10003A400();
          uint64_t v21 = v29;
        }

        __int128 v21[2] = v27 + 1;
        *((_BYTE *)v21 + v27 + 32) = v26;
      }

      v20 += 2;
      if (!--v19)
      {
        sub_10001EDA0();
        goto LABEL_23;
      }
    }

    char v26 = 0;
    goto LABEL_15;
  }

  uint64_t v21 = _swiftEmptyArrayStorage;
LABEL_23:
  sub_10001EDA0();
  sub_1001871B8((uint64_t)v21);
  uint64_t v31 = v30;
  swift_bridgeObjectRetain();
  sub_10003A3E4(0x73646C656966LL, 0xE600000000000000LL);
  if (v33)
  {
    uint64_t v67 = v32;
    uint64_t v68 = v33;
    unint64_t v34 = sub_10003A3BC();
    uint64_t v36 = (void *)sub_10003A3D0(v34, (uint64_t)&type metadata for String, v35, v34);
    sub_100019390();
  }

  else
  {
    uint64_t v36 = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRetain();
  sub_10003A3E4(108LL, 0xE100000000000000LL);
  if (!v38
    || (uint64_t v39 = v37,
        uint64_t v40 = v38,
        type metadata accessor for OctaneLocale(),
        uint64_t inited = sub_1000CB708(v39, v40),
        sub_100019390(),
        !inited))
  {
    uint64_t v42 = type metadata accessor for OctaneLocale();
    uint64_t inited = swift_initStaticObject(v42, &unk_1002A8DE8);
  }

  sub_10003A3E4(0x6D726F6674616C70LL, 0xE800000000000000LL);
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  swift_bridgeObjectRetain();
  sub_10003A3E4(0xD000000000000013LL, 0x8000000100218FF0LL);
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  swift_bridgeObjectRelease();
  if (v50)
  {
    uint64_t v67 = v48;
    uint64_t v68 = v50;
    unint64_t v51 = sub_10003A3BC();
    uint64_t v53 = (void *)sub_10003A3D0(v51, (uint64_t)&type metadata for String, v52, v51);
    sub_100023EEC();
  }

  else
  {
    uint64_t v53 = _swiftEmptyArrayStorage;
  }

  sub_10001DBCC();
  uint64_t v54 = swift_bridgeObjectRetain();
  sub_1000CDD90(v54, (uint64_t)__src);
  sub_10003A3EC();
  memcpy(__dst, __src, 0x139uLL);
  debugOnly(_:)(__dst);
  v65[0] = v59;
  v65[1] = v61;
  __int128 v65[2] = v58;
  v65[3] = v60;
  v65[4] = v31;
  v65[5] = v36;
  v65[6] = inited;
  v65[7] = v44;
  v65[8] = v46;
  v65[9] = v53;
  sub_1000390C8((uint64_t)__dst, (uint64_t)&v65[10], &qword_1002AA7C0);
  swift_retain();
  sub_10003910C((uint64_t)v65);
  swift_bridgeObjectRelease();
  sub_100023EEC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10001EDA0();
  sub_1000393D4((uint64_t)v65);
  memcpy(v66, v65, 0x189uLL);
  uint64_t v55 = debugOnly(_:)(v66);
  sub_10003A3F4(v55, v56, &qword_1002AA7B8);
  a2 = v62;
  return sub_1000390C8((uint64_t)&v67, a2, &qword_1002AA7B8);
}

uint64_t sub_100038EDC(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100271190, v2);
  sub_100019390();
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100038F28(char a1)
{
  if ((a1 & 1) != 0) {
    return 1634497893LL;
  }
  else {
    return 0xD000000000000010LL;
  }
}

void sub_100038F5C(char *a1, unsigned __int8 *a2)
{
}

uint64_t sub_100038F68@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100038EDC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100038F94@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100038F28(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100038FBC()
{
}

uint64_t sub_100038FC4(uint64_t a1)
{
  return sub_1000B1844(a1, *v1);
}

void sub_100038FCC(uint64_t a1)
{
}

uint64_t *sub_100038FD4(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[7];
  uint64_t v6 = a1[8];
  uint64_t v7 = a1[9];
  uint64_t v8 = a1[12];
  sub_10003907C(*a1, a1[1]);
  swift_bridgeObjectRelease(v4);
  swift_release(v3);
  swift_unknownObjectRelease(v2);
  sub_100039090(v5, v6, v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t sub_10003907C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_100039090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_release(a3);
    return swift_bridgeObjectRelease(a2);
  }

  return result;
}

void sub_1000390C0(void *a1)
{
}

uint64_t sub_1000390C8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000175B0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_10003910C(uint64_t a1)
{
  uint64_t v25 = *(void *)(a1 + 88);
  uint64_t v26 = *(void *)(a1 + 80);
  uint64_t v23 = *(void *)(a1 + 104);
  uint64_t v24 = *(void *)(a1 + 96);
  uint64_t v21 = *(void *)(a1 + 120);
  uint64_t v22 = *(void *)(a1 + 112);
  uint64_t v2 = *(void *)(a1 + 136);
  uint64_t v20 = *(void *)(a1 + 128);
  __int128 v18 = *(_OWORD *)(a1 + 160);
  __int128 v19 = *(_OWORD *)(a1 + 144);
  __int128 v16 = *(_OWORD *)(a1 + 192);
  __int128 v17 = *(_OWORD *)(a1 + 176);
  __int128 v14 = *(_OWORD *)(a1 + 224);
  __int128 v15 = *(_OWORD *)(a1 + 208);
  __int128 v13 = *(_OWORD *)(a1 + 240);
  __int128 v11 = *(_OWORD *)(a1 + 272);
  __int128 v12 = *(_OWORD *)(a1 + 256);
  __int128 v9 = *(_OWORD *)(a1 + 304);
  __int128 v10 = *(_OWORD *)(a1 + 288);
  __int128 v7 = *(_OWORD *)(a1 + 336);
  __int128 v8 = *(_OWORD *)(a1 + 320);
  __int128 v5 = *(_OWORD *)(a1 + 368);
  __int128 v6 = *(_OWORD *)(a1 + 352);
  uint64_t v3 = *(void *)(a1 + 384);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000392B0( v26,  v25,  v24,  v23,  v22,  v21,  v20,  v2,  v19,  *((uint64_t *)&v19 + 1),  v18,  *((uint64_t *)&v18 + 1),  v17,  *((uint64_t *)&v17 + 1),  v16,  *((uint64_t *)&v16 + 1),  v15,  *((uint64_t *)&v15 + 1),  v14,  *((uint64_t *)&v14 + 1),  v13,  *((uint64_t *)&v13 + 1),  v12,  *((uint64_t *)&v12 + 1),  v11,  *((uint64_t *)&v11 + 1),  v10,  *((uint64_t *)&v10 + 1),  v9,  *((uint64_t *)&v9 + 1),  v8,  *((uint64_t *)&v8 + 1),  v7,  *((uint64_t *)&v7 + 1),  v6,  *((uint64_t *)&v6 + 1),  v5,  *((uint64_t *)&v5 + 1),  v3);
  return a1;
}

uint64_t sub_1000392B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39)
{
  if (a4 != 1)
  {
    swift_bridgeObjectRetain(a39);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(a9);
    swift_bridgeObjectRetain(a11);
    swift_bridgeObjectRetain(a13);
    swift_bridgeObjectRetain(a15);
    swift_bridgeObjectRetain(a17);
    swift_bridgeObjectRetain(a19);
    swift_bridgeObjectRetain(a20);
    swift_bridgeObjectRetain(a22);
    swift_bridgeObjectRetain(a25);
    swift_bridgeObjectRetain(a29);
    swift_bridgeObjectRetain(a31);
    swift_bridgeObjectRetain(a33);
    swift_bridgeObjectRetain(a35);
    return swift_bridgeObjectRetain(a37);
  }

  return result;
}

uint64_t sub_1000393D4(uint64_t a1)
{
  uint64_t v25 = *(void *)(a1 + 88);
  uint64_t v26 = *(void *)(a1 + 80);
  uint64_t v23 = *(void *)(a1 + 104);
  uint64_t v24 = *(void *)(a1 + 96);
  uint64_t v21 = *(void *)(a1 + 120);
  uint64_t v22 = *(void *)(a1 + 112);
  uint64_t v2 = *(void *)(a1 + 136);
  uint64_t v20 = *(void *)(a1 + 128);
  __int128 v18 = *(_OWORD *)(a1 + 160);
  __int128 v19 = *(_OWORD *)(a1 + 144);
  __int128 v16 = *(_OWORD *)(a1 + 192);
  __int128 v17 = *(_OWORD *)(a1 + 176);
  __int128 v14 = *(_OWORD *)(a1 + 224);
  __int128 v15 = *(_OWORD *)(a1 + 208);
  __int128 v13 = *(_OWORD *)(a1 + 240);
  __int128 v11 = *(_OWORD *)(a1 + 272);
  __int128 v12 = *(_OWORD *)(a1 + 256);
  __int128 v9 = *(_OWORD *)(a1 + 304);
  __int128 v10 = *(_OWORD *)(a1 + 288);
  __int128 v7 = *(_OWORD *)(a1 + 336);
  __int128 v8 = *(_OWORD *)(a1 + 320);
  __int128 v5 = *(_OWORD *)(a1 + 368);
  __int128 v6 = *(_OWORD *)(a1 + 352);
  uint64_t v3 = *(void *)(a1 + 384);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100039578( v26,  v25,  v24,  v23,  v22,  v21,  v20,  v2,  v19,  *((uint64_t *)&v19 + 1),  v18,  *((uint64_t *)&v18 + 1),  v17,  *((uint64_t *)&v17 + 1),  v16,  *((uint64_t *)&v16 + 1),  v15,  *((uint64_t *)&v15 + 1),  v14,  *((uint64_t *)&v14 + 1),  v13,  *((uint64_t *)&v13 + 1),  v12,  *((uint64_t *)&v12 + 1),  v11,  *((uint64_t *)&v11 + 1),  v10,  *((uint64_t *)&v10 + 1),  v9,  *((uint64_t *)&v9 + 1),  v8,  *((uint64_t *)&v8 + 1),  v7,  *((uint64_t *)&v7 + 1),  v6,  *((uint64_t *)&v6 + 1),  v5,  *((uint64_t *)&v5 + 1),  v3);
  return a1;
}

uint64_t sub_100039578( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39)
{
  if (a4 != 1)
  {
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a9);
    swift_bridgeObjectRelease(a11);
    swift_bridgeObjectRelease(a13);
    swift_bridgeObjectRelease(a15);
    swift_bridgeObjectRelease(a17);
    swift_bridgeObjectRelease(a19);
    swift_bridgeObjectRelease(a20);
    swift_bridgeObjectRelease(a22);
    swift_bridgeObjectRelease(a25);
    swift_bridgeObjectRelease(a29);
    swift_bridgeObjectRelease(a31);
    swift_bridgeObjectRelease(a33);
    swift_bridgeObjectRelease(a35);
    swift_bridgeObjectRelease(a37);
    return swift_bridgeObjectRelease(a39);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for AppInformationRequest.Extension( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = 1;
  }
  else {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000396E8 + 4 * byte_1001F55E5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10003971C + 4 * asc_1001F55E0[v4]))();
}

uint64_t sub_10003971C(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100039724(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x10003972CLL);
  }
  return result;
}

uint64_t sub_100039738(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x100039740LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100039744(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10003974C(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppInformationRequest.Extension()
{
  return &type metadata for AppInformationRequest.Extension;
}

uint64_t destroy for AppInformationRequest(void *a1)
{
  uint64_t result = a1[13];
  if (result != 1)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[16]);
    swift_bridgeObjectRelease(a1[18]);
    swift_bridgeObjectRelease(a1[20]);
    swift_bridgeObjectRelease(a1[22]);
    swift_bridgeObjectRelease(a1[24]);
    swift_bridgeObjectRelease(a1[26]);
    swift_bridgeObjectRelease(a1[28]);
    swift_bridgeObjectRelease(a1[29]);
    swift_bridgeObjectRelease(a1[31]);
    swift_bridgeObjectRelease(a1[34]);
    swift_bridgeObjectRelease(a1[38]);
    swift_bridgeObjectRelease(a1[40]);
    swift_bridgeObjectRelease(a1[42]);
    swift_bridgeObjectRelease(a1[44]);
    swift_bridgeObjectRelease(a1[46]);
    return swift_bridgeObjectRelease(a1[48]);
  }

  return result;
}

uint64_t initializeWithCopy for AppInformationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v9;
  *(void *)(a1 + 56) = v8;
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v10;
  __dst = (void *)(a1 + 80);
  __int128 v12 = (_BYTE *)(a2 + 80);
  uint64_t v13 = *(void *)(a2 + 104);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_retain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v10);
  if (v13 == 1)
  {
    memcpy(__dst, v12, 0x139uLL);
  }

  else
  {
    uint64_t v14 = v13;
    void *__dst = *(void *)v12;
    *(_BYTE *)(a1 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = v12[8];
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = v13;
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    uint64_t v15 = *(void *)(a2 + 136);
    uint64_t v36 = *(void *)(a2 + 128);
    *(void *)(a1 + 12_Block_object_dispose((const void *)(v1 - 136), 8) = v36;
    *(void *)(a1 + 136) = v15;
    uint64_t v16 = *(void *)(a2 + 152);
    uint64_t v35 = *(void *)(a2 + 144);
    *(void *)(a1 + 144) = v35;
    *(void *)(a1 + 152) = v16;
    uint64_t v17 = *(void *)(a2 + 168);
    uint64_t v34 = *(void *)(a2 + 160);
    *(void *)(a1 + 160) = v34;
    *(void *)(a1 + 16_Block_object_dispose((const void *)(v1 - 136), 8) = v17;
    uint64_t v18 = *(void *)(a2 + 184);
    uint64_t v33 = *(void *)(a2 + 176);
    *(void *)(a1 + 176) = v33;
    *(void *)(a1 + 184) = v18;
    uint64_t v20 = *(void *)(a2 + 192);
    uint64_t v19 = *(void *)(a2 + 200);
    *(void *)(a1 + 192) = v20;
    *(void *)(a1 + 200) = v19;
    uint64_t v22 = *(void *)(a2 + 208);
    uint64_t v21 = *(void *)(a2 + 216);
    *(void *)(a1 + 20_Block_object_dispose((const void *)(v1 - 136), 8) = v22;
    *(void *)(a1 + 216) = v21;
    uint64_t v23 = *(void *)(a2 + 232);
    uint64_t v31 = *(void *)(a2 + 224);
    uint64_t v32 = v22;
    *(void *)(a1 + 224) = v31;
    *(void *)(a1 + 232) = v23;
    __dsta = *(void **)(a2 + 248);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(void *)(a1 + 24_Block_object_dispose((const void *)(v1 - 136), 8) = __dsta;
    *(_WORD *)(a1 + 256) = *(_WORD *)(a2 + 256);
    uint64_t v37 = *(void *)(a2 + 272);
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    *(void *)(a1 + 272) = v37;
    *(_BYTE *)(a1 + 28_Block_object_dispose((const void *)(v1 - 136), 8) = *(_BYTE *)(a2 + 288);
    *(void *)(a1 + 280) = *(void *)(a2 + 280);
    uint64_t v24 = *(void *)(a2 + 304);
    *(void *)(a1 + 296) = *(void *)(a2 + 296);
    *(void *)(a1 + 304) = v24;
    uint64_t v25 = *(void *)(a2 + 320);
    *(void *)(a1 + 312) = *(void *)(a2 + 312);
    *(void *)(a1 + 320) = v25;
    uint64_t v26 = *(void *)(a2 + 336);
    *(void *)(a1 + 32_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 328);
    *(void *)(a1 + 336) = v26;
    uint64_t v27 = *(void *)(a2 + 352);
    *(void *)(a1 + 344) = *(void *)(a2 + 344);
    *(void *)(a1 + 352) = v27;
    uint64_t v28 = *(void *)(a2 + 368);
    *(void *)(a1 + 360) = *(void *)(a2 + 360);
    *(void *)(a1 + 36_Block_object_dispose((const void *)(v1 - 136), 8) = v28;
    uint64_t v29 = *(void *)(a2 + 384);
    *(void *)(a1 + 376) = *(void *)(a2 + 376);
    *(void *)(a1 + 384) = v29;
    *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(__dsta);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v29);
  }

  return a1;
}

uint64_t assignWithCopy for AppInformationRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 48);
  swift_retain();
  swift_release(v4);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (void *)(a1 + 80);
  uint64_t v6 = (uint64_t *)(a2 + 80);
  uint64_t v7 = *(void *)(a2 + 104);
  if (*(void *)(a1 + 104) != 1LL)
  {
    if (v7 != 1)
    {
      uint64_t v11 = *v6;
      *(_BYTE *)(a1 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = *(_BYTE *)(a2 + 88);
      void *v5 = v11;
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)(a2 + 112);
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      *(void *)(a1 + 112) = v12;
      *(void *)(a1 + 12_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 16_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      *(void *)(a1 + 20_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 208);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(void *)(a1 + 24_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 248);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
      *(_BYTE *)(a1 + 257) = *(_BYTE *)(a2 + 257);
      *(void *)(a1 + 264) = *(void *)(a2 + 264);
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v13 = *(void *)(a2 + 280);
      *(_BYTE *)(a1 + 28_Block_object_dispose((const void *)(v1 - 136), 8) = *(_BYTE *)(a2 + 288);
      *(void *)(a1 + 280) = v13;
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      *(void *)(a1 + 304) = *(void *)(a2 + 304);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 312) = *(void *)(a2 + 312);
      *(void *)(a1 + 320) = *(void *)(a2 + 320);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 32_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 328);
      *(void *)(a1 + 336) = *(void *)(a2 + 336);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 344) = *(void *)(a2 + 344);
      *(void *)(a1 + 352) = *(void *)(a2 + 352);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 360) = *(void *)(a2 + 360);
      *(void *)(a1 + 36_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 368);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 376) = *(void *)(a2 + 376);
      *(void *)(a1 + 384) = *(void *)(a2 + 384);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
      return a1;
    }

    sub_10003A024((void *)(a1 + 80));
    goto LABEL_6;
  }

  if (v7 == 1)
  {
LABEL_6:
    memcpy((void *)(a1 + 80), (const void *)(a2 + 80), 0x139uLL);
    return a1;
  }

  uint64_t v8 = *v6;
  *(_BYTE *)(a1 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = *(_BYTE *)(a2 + 88);
  void *v5 = v8;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v9 = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 112) = v9;
  *(void *)(a1 + 12_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 16_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 20_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 24_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 248);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(_BYTE *)(a1 + 257) = *(_BYTE *)(a2 + 257);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  uint64_t v10 = *(void *)(a2 + 280);
  *(_BYTE *)(a1 + 28_Block_object_dispose((const void *)(v1 - 136), 8) = *(_BYTE *)(a2 + 288);
  *(void *)(a1 + 280) = v10;
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a1 + 32_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 36_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 368);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10003A024(void *a1)
{
  return a1;
}

void *initializeWithTake for AppInformationRequest(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x189uLL);
}

uint64_t assignWithTake for AppInformationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a1 + 48);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 48);
  swift_release(v6);
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 104) != 1LL)
  {
    uint64_t v8 = *(void *)(a2 + 104);
    if (v8 != 1)
    {
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(_BYTE *)(a1 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = *(_BYTE *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = v8;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      *(void *)(a1 + 12_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 128);
      swift_bridgeObjectRelease();
      uint64_t v9 = *(void *)(a2 + 144);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = v9;
      swift_bridgeObjectRelease();
      uint64_t v10 = *(void *)(a2 + 160);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = v10;
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void *)(a2 + 176);
      *(void *)(a1 + 16_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = v11;
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)(a2 + 192);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = v12;
      swift_bridgeObjectRelease();
      uint64_t v13 = *(void *)(a2 + 208);
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      *(void *)(a1 + 20_Block_object_dispose((const void *)(v1 - 136), 8) = v13;
      swift_bridgeObjectRelease();
      uint64_t v14 = *(void *)(a2 + 224);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      *(void *)(a1 + 224) = v14;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      swift_bridgeObjectRelease();
      uint64_t v15 = *(void *)(a2 + 248);
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(void *)(a1 + 24_Block_object_dispose((const void *)(v1 - 136), 8) = v15;
      swift_bridgeObjectRelease();
      *(_WORD *)(a1 + 256) = *(_WORD *)(a2 + 256);
      uint64_t v16 = *(void *)(a2 + 272);
      *(void *)(a1 + 264) = *(void *)(a2 + 264);
      *(void *)(a1 + 272) = v16;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 280) = *(void *)(a2 + 280);
      *(_BYTE *)(a1 + 28_Block_object_dispose((const void *)(v1 - 136), 8) = *(_BYTE *)(a2 + 288);
      uint64_t v17 = *(void *)(a2 + 304);
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      *(void *)(a1 + 304) = v17;
      swift_bridgeObjectRelease();
      uint64_t v18 = *(void *)(a2 + 320);
      *(void *)(a1 + 312) = *(void *)(a2 + 312);
      *(void *)(a1 + 320) = v18;
      swift_bridgeObjectRelease();
      uint64_t v19 = *(void *)(a2 + 336);
      *(void *)(a1 + 32_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 328);
      *(void *)(a1 + 336) = v19;
      swift_bridgeObjectRelease();
      uint64_t v20 = *(void *)(a2 + 352);
      *(void *)(a1 + 344) = *(void *)(a2 + 344);
      *(void *)(a1 + 352) = v20;
      swift_bridgeObjectRelease();
      uint64_t v21 = *(void *)(a2 + 368);
      *(void *)(a1 + 360) = *(void *)(a2 + 360);
      *(void *)(a1 + 36_Block_object_dispose((const void *)(v1 - 136), 8) = v21;
      swift_bridgeObjectRelease();
      uint64_t v22 = *(void *)(a2 + 384);
      *(void *)(a1 + 376) = *(void *)(a2 + 376);
      *(void *)(a1 + 384) = v22;
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
      return a1;
    }

    sub_10003A024((void *)(a1 + 80));
  }

  memcpy((void *)(a1 + 80), (const void *)(a2 + 80), 0x139uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppInformationRequest(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 393))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppInformationRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 16_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_BYTE *)(result + 392) = 0;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 32_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 393) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 393) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AppInformationRequest()
{
  return &type metadata for AppInformationRequest;
}

unint64_t sub_10003A380()
{
  unint64_t result = qword_1002AA7C8;
  if (!qword_1002AA7C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F5680, &type metadata for AppInformationRequest.Extension);
    atomic_store(result, (unint64_t *)&qword_1002AA7C8);
  }

  return result;
}

unint64_t sub_10003A3BC()
{
  STACK[0x438] = 44LL;
  STACK[0x440] = 0xE100000000000000LL;
  return sub_10001B4A0();
}

uint64_t sub_10003A3D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return StringProtocol.components<A>(separatedBy:)(&STACK[0x438], a2, a2, a4, a4);
}

void sub_10003A3E4(uint64_t a1, uint64_t a2)
{
}

uint64_t *sub_10003A3EC()
{
  return sub_100038FD4(v0);
}

uint64_t sub_10003A3F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1000390C8((uint64_t)&STACK[0x438], (uint64_t)&STACK[0x5C8], a3);
}

void sub_10003A400()
{
}

void sub_10003A40C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = v2;
  uint64_t v8 = type metadata accessor for IAPTransaction(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10003A968(a1 + 56, (uint64_t)v58);
  sub_10003A968((uint64_t)v58, (uint64_t)&v61);
  if (!*(void *)v62)
  {
    sub_10003AB14();
    uint64_t v16 = v50;
    unint64_t v17 = v51;
    sub_10003AAE0();
    uint64_t v18 = 21LL;
LABEL_20:
    ASOctaneSupportXPCService::HTTPVersion v35 = HTTPVersion.init(major:minor:)(1LL, 1LL);
    uint64_t v36 = type metadata accessor for HTTPResponseHead._Storage();
    uint64_t v37 = swift_allocObject(v36, 44LL, 7LL);
    *(void *)(v37 + 16) = 0LL;
    *(void *)(v37 + 24) = 0LL;
    *(void *)(v37 + 32) = v18;
    *(ASOctaneSupportXPCService::HTTPVersion *)(v37 + 40) = v35;
    *(void *)a2 = v37;
    *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 136), 8) = _swiftEmptyArrayStorage;
    *(_BYTE *)(a2 + 16) = 2;
    *(void *)(a2 + 24) = v16;
    *(void *)(a2 + 32) = v17;
    *(void *)(a2 + 40) = v3;
    *(void *)(a2 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v5;
    *(_BYTE *)(a2 + 62) = BYTE6(v4);
    *(_WORD *)(a2 + 60) = WORD2(v4);
    *(_DWORD *)(a2 + 56) = v4;
    return;
  }

  __int128 v59 = v61;
  *(_OWORD *)uint64_t v60 = *(_OWORD *)v62;
  *(void *)&v60[15] = *(void *)&v62[15];
  uint64_t v3 = sub_1000ACD2C();
  unint64_t v13 = v12;
  uint64_t v14 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  uint64_t v15 = PropertyListDecoder.init()();
  sub_10003A9B0();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( &type metadata for InAppQueueCheckRequest,  v3,  v13,  &type metadata for InAppQueueCheckRequest);
  unint64_t v48 = v5;
  swift_release(v15);
  unint64_t v5 = v51;
  uint64_t v4 = v57;
  if (!v57)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100023EF4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10003AB14();
    uint64_t v16 = v50;
    unint64_t v17 = v51;
    sub_10003AAE0();
    sub_10003A9EC(v29, v13);
    uint64_t v18 = 21LL;
    goto LABEL_20;
  }

  uint64_t v49 = v53;
  uint64_t v44 = v54;
  uint64_t v45 = v55;
  uint64_t v19 = v50;
  uint64_t v40 = v52;
  uint64_t v42 = v56;
  uint64_t v20 = *(void *)(v48 + 112);
  uint64_t v39 = (void *)(v48 + 88);
  sub_100019F58((void *)(v48 + 88), v20);
  swift_bridgeObjectRetain();
  uint64_t v41 = v19;
  unint64_t v43 = v5;
  sub_10008845C();
  uint64_t v22 = v21;
  if ((unint64_t)v21 >> 62)
  {
    if (v21 >= 0) {
      v21 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter(v21);
  }

  else
  {
    uint64_t v23 = *(void *)((v21 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  unint64_t v47 = v13;
  uint64_t v46 = v3;
  if (!v23)
  {
    sub_100023EF4();
    uint64_t v25 = _swiftEmptyArrayStorage;
    unint64_t v28 = v48;
LABEL_19:
    type metadata accessor for InAppPendingTransactionsResponse();
    uint64_t v30 = sub_10006D518((uint64_t)v25);
    sub_100019F58(v39, *(void *)(v28 + 112));
    swift_retain();
    uint64_t v31 = sub_1000884B8();
    unint64_t v33 = v32;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v4, 2LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = *(void *)(v30 + 56);
    unint64_t v5 = *(void *)(v30 + 64);
    *(void *)(v30 + 56) = v31;
    *(void *)(v30 + 64) = v33;
    sub_10003AA74(v31, v33);
    sub_10003AACC(v3, v5);
    swift_release(v30);
    sub_10003AACC(v31, v33);
    uint64_t v34 = swift_retain();
    sub_10019694C(v34);
    uint64_t v16 = v50;
    unint64_t v17 = v51;
    sub_10003AAE0();
    sub_10003A9EC(v46, v47);
    swift_release(v30);
    uint64_t v18 = 3LL;
    goto LABEL_20;
  }

  uint64_t v38 = v4;
  uint64_t v50 = _swiftEmptyArrayStorage;
  sub_1000323A4();
  if ((v23 & 0x8000000000000000LL) == 0)
  {
    uint64_t v24 = 0LL;
    uint64_t v25 = v50;
    do
    {
      if ((v22 & 0xC000000000000001LL) != 0) {
        id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v22);
      }
      else {
        id v26 = *(id *)(v22 + 8 * v24 + 32);
      }
      sub_1001A7CDC(v26, 0LL, (uint64_t)v11);
      uint64_t v50 = v25;
      unint64_t v27 = v25[2];
      if (v27 >= v25[3] >> 1)
      {
        sub_1000323A4();
        uint64_t v25 = v50;
      }

      ++v24;
      void v25[2] = v27 + 1;
      sub_10003AA30( (uint64_t)v11,  (uint64_t)v25 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
      + *(void *)(v9 + 72) * v27);
    }

    while (v23 != v24);
    sub_100023EF4();
    unint64_t v28 = v48;
    uint64_t v4 = v38;
    goto LABEL_19;
  }

  __break(1u);
}

uint64_t type metadata accessor for InAppPendingTransactionsRoute()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService29InAppPendingTransactionsRoute);
}

uint64_t sub_10003A968(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002AA8A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10003A9B0()
{
  unint64_t result = qword_1002AA8B0;
  if (!qword_1002AA8B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10020A880, &type metadata for InAppQueueCheckRequest);
    atomic_store(result, (unint64_t *)&qword_1002AA8B0);
  }

  return result;
}

uint64_t sub_10003A9EC(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10003AA30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IAPTransaction(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003AA74(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10003AA88(result, a2);
  }
  return result;
}

uint64_t sub_10003AA88(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10003AACC(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10003A9EC(result, a2);
  }
  return result;
}

  ;
}

uint64_t sub_10003AB14()
{
  return sub_1000ACB64(0x2064696C61766E49LL, 0xEF74736575716572LL, 6u, v0 - 296);
}

char *sub_10003AB40( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = a1;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v44 = a1;
    }
    else {
      uint64_t v44 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v44);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  unint64_t v13 = _swiftEmptyArrayStorage;
  if (!v12) {
    goto LABEL_21;
  }
  __int128 v61 = _swiftEmptyArrayStorage;
  unint64_t result = sub_10003231C(0LL, v12 & ~(v12 >> 63), 0);
  if ((v12 & 0x8000000000000000LL) == 0)
  {
    uint64_t v15 = 0LL;
    unint64_t v13 = v61;
    unint64_t v46 = v11 & 0xC000000000000001LL;
    uint64_t v47 = v12;
    __int128 v60 = *(_OWORD *)a4;
    uint64_t v56 = a6;
    uint64_t v57 = a5;
    uint64_t v49 = a7;
    uint64_t v50 = a4;
    uint64_t v48 = v11;
    do
    {
      if (v46)
      {
        uint64_t v16 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v11);
      }

      else
      {
        uint64_t v16 = *(void **)(v11 + 8 * v15 + 32);
        swift_retain();
      }

      uint64_t v55 = v13;
      uint64_t v17 = type metadata accessor for OctaneSubscription();
      uint64_t v18 = swift_dynamicCastClass(v16, v17);
      if (v18)
      {
        uint64_t v19 = *(void *)(v18 + 192);
        uint64_t v20 = *(void *)(v18 + 200);
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v21 = a2(v19, v20);
        uint64_t v52 = v22;
        uint64_t v53 = v21;
        swift_bridgeObjectRelease();
      }

      else
      {
        swift_retain();
        uint64_t v52 = 0LL;
        uint64_t v53 = 0LL;
      }

      if (*(void *)(a7 + 16))
      {
        uint64_t v23 = v16[10];
        uint64_t v24 = v16[11];
        sub_10003C434(a4);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v25 = sub_1000F168C(v23, v24);
        if ((v26 & 1) != 0)
        {
          unint64_t v27 = (uint64_t *)(*(void *)(a7 + 56) + 16 * v25);
          uint64_t v28 = v27[1];
          uint64_t v51 = *v27;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }

        else
        {
          swift_bridgeObjectRelease();
          uint64_t v51 = 0LL;
          uint64_t v28 = 0LL;
        }

        uint64_t v29 = v50;
      }

      else
      {
        sub_10003C434(a4);
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v51 = 0LL;
        uint64_t v28 = 0LL;
        uint64_t v29 = a4;
      }

      uint64_t v30 = v16[6];
      uint64_t v54 = v16[5];
      __src[0] = 0LL;
      __src[1] = 0xE000000000000000LL;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(20LL);
      swift_bridgeObjectRelease();
      strcpy((char *)__src, "/v1/catalog/");
      BYTE5(__src[1]) = 0;
      HIWORD(__src[1]) = -5120;
      *(_OWORD *)__dst = v60;
      unint64_t v31 = sub_10001B4A0();
      v32._countAndFlagsBits = StringProtocol.localizedLowercase.getter(&type metadata for String, v31);
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      v33._countAndFlagsBits = 47LL;
      v33._object = (void *)0xE100000000000000LL;
      String.append(_:)(v33);
      v34._countAndFlagsBits = 0x737070612D6E69LL;
      v34._object = (void *)0xE700000000000000LL;
      String.append(_:)(v34);
      v35._countAndFlagsBits = 47LL;
      v35._object = (void *)0xE100000000000000LL;
      String.append(_:)(v35);
      uint64_t v37 = v16[5];
      uint64_t v36 = (void *)v16[6];
      swift_bridgeObjectRetain();
      v38._countAndFlagsBits = v37;
      v38._object = v36;
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      uint64_t v39 = __src[0];
      uint64_t v40 = __src[1];
      sub_1000C2FA8((uint64_t)v16, v53, v52, v29, v57, v56, v51, v28, (uint64_t)__src);
      swift_release(v16);
      unint64_t v13 = v55;
      __int128 v61 = v55;
      unint64_t v42 = v55[2];
      unint64_t v41 = v55[3];
      if (v42 >= v41 >> 1)
      {
        sub_10003231C((char *)(v41 > 1), v42 + 1, 1);
        unint64_t v13 = v61;
      }

      ++v15;
      memcpy(__dst, __src, sizeof(__dst));
      v13[2] = v42 + 1;
      unint64_t v43 = &v13[31 * v42];
      v43[4] = v54;
      v43[5] = v30;
      v43[6] = v39;
      v43[7] = v40;
      memcpy(v43 + 8, __dst, 0xD8uLL);
      uint64_t v11 = v48;
      a5 = v57;
      a7 = v49;
      a4 = v50;
    }

    while (v47 != v15);
LABEL_21:
    sub_10001B4DC(a4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release(a5);
    return (char *)v13;
  }

  __break(1u);
  return result;
}

uint64_t sub_10003AF1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 + 56);
  swift_bridgeObjectRetain();
  swift_release(v7);
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_1000233E4(v8, a1, a2);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_10003AF9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v4 = v2;
  uint64_t v7 = sub_1001BCBC8();
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100132B78(v7, v8, v9, (uint64_t)v20);
  sub_1000390C8((uint64_t)v20, (uint64_t)__src, &qword_1002AA988);
  if (sub_10003BDB8((uint64_t)__src) == 1)
  {
    sub_1000ACB64(0x2064696C61766E49LL, 0xEF74736575716572LL, 6u, (uint64_t)__dst);
    uint64_t v10 = __dst[0];
    uint64_t v11 = __dst[1];
    uint64_t v12 = __dst[2];
    uint64_t v13 = __dst[3];
    unint64_t v14 = LODWORD(__dst[4]) | ((unint64_t)WORD2(__dst[4]) << 32) | ((unint64_t)BYTE6(__dst[4]) << 48);
    sub_10001ED94();
    uint64_t v15 = sub_10003C654();
    uint64_t result = sub_10001ED7C(v15);
    uint64_t v17 = result;
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)(result + 32) = 21LL;
    *(_WORD *)(result + 40) = v4;
    *(_WORD *)(result + 42) = v3;
    uint64_t v19 = _swiftEmptyArrayStorage;
  }

  else
  {
    memcpy(__dst, __src, 0x1C1uLL);
    sub_10003B234(__dst);
    sub_10003BDD0((uint64_t)v20);
    sub_1001C1BEC();
    uint64_t v10 = v21;
    uint64_t v11 = v22;
    uint64_t v12 = v23;
    uint64_t v13 = v24;
    unint64_t v14 = v25 | ((unint64_t)v26 << 32) | ((unint64_t)v27 << 48);
    sub_10001ED94();
    uint64_t v18 = sub_10003C654();
    uint64_t result = sub_10001ED7C(v18);
    uint64_t v17 = result;
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)(result + 32) = 3LL;
    *(_WORD *)(result + 40) = 0;
    uint64_t v19 = &off_100270DF0;
    *(_WORD *)(result + 42) = v3;
  }

  *(void *)a2 = v17;
  *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 136), 8) = v19;
  *(_BYTE *)(a2 + 16) = 2;
  *(void *)(a2 + 24) = v10;
  *(void *)(a2 + 32) = v11;
  *(void *)(a2 + 40) = v12;
  *(void *)(a2 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v13;
  *(_BYTE *)(a2 + 62) = BYTE6(v14);
  *(_WORD *)(a2 + 60) = WORD2(v14);
  *(_DWORD *)(a2 + 56) = v14;
  return result;
}

uint64_t sub_10003B234(uint64_t *a1)
{
  uint64_t v3 = a1[6];
  if (v3
    || (sub_1000390C8((uint64_t)(a1 + 16), (uint64_t)v73, &qword_1002AA998),
        sub_1000390C8((uint64_t)v73, (uint64_t)&v79, &qword_1002AA998),
        v79))
  {
    uint64_t v48 = v1;
    uint64_t v45 = (void *)(v1 + 48);
    sub_100019F58((void *)(v1 + 48), *(void *)(v1 + 72));
    uint64_t v4 = a1[16];
    uint64_t v51 = a1[1];
    uint64_t v52 = *a1;
    sub_100075EE8(*a1, v51);
    uint64_t v6 = v5;
    uint64_t v47 = sub_1000D8188(v3, v4);
    swift_release(v6);
    unint64_t v46 = a1;
    sub_10003C67C((uint64_t)(a1 + 4), (uint64_t)v72);
    sub_10003C67C((uint64_t)v72, (uint64_t)&v75);
    uint64_t v7 = v76;
    if (!v76) {
      goto LABEL_14;
    }
    uint64_t v8 = v75;
    if (qword_1002A8D28 != -1)
    {
      uint64_t v42 = v76;
      uint64_t v43 = v75;
      swift_once(&qword_1002A8D28, sub_10012A5D0);
      uint64_t v8 = v43;
      uint64_t v7 = v42;
    }

    uint64_t v9 = *(void *)(qword_1002EB990 + 16);
    if (v9)
    {
      uint64_t v10 = (uint64_t *)(qword_1002EB990 + 56);
      while (1)
      {
        uint64_t v12 = *(v10 - 3);
        uint64_t v11 = *(v10 - 2);
        uint64_t v13 = *v10;
        uint64_t v14 = v10[2];
        uint64_t v54 = v10[1];
        uint64_t v56 = *(v10 - 1);
        uint64_t v15 = v10[4];
        uint64_t v57 = v10[3];
        uint64_t v58 = v10[5];
        uint64_t v59 = v10[6];
        if (v12 == v8 && v11 == v7) {
          break;
        }
        uint64_t v17 = v8;
        uint64_t v18 = v7;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(v12, v11, v8, v7, 0LL) & 1) != 0) {
          goto LABEL_17;
        }
        v10 += 10;
        --v9;
        uint64_t v7 = v18;
        uint64_t v8 = v17;
        if (!v9) {
          goto LABEL_14;
        }
      }

      uint64_t v12 = v8;
LABEL_17:
      uint64_t v44 = v12;
      uint64_t v22 = v11;
      swift_bridgeObjectRetain();
      uint64_t v53 = v13;
      swift_bridgeObjectRetain();
      uint64_t v50 = v14;
      swift_bridgeObjectRetain();
      uint64_t v49 = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v19 = v45;
      uint64_t v20 = v54;
      uint64_t v21 = v56;
    }

    else
    {
LABEL_14:
      uint64_t v19 = v45;
      sub_100019F58(v45, *(void *)(v48 + 72));
      sub_100076700();
      uint64_t v58 = v69;
      uint64_t v59 = v70;
      uint64_t v57 = v67;
      uint64_t v20 = v65;
      uint64_t v49 = v68;
      uint64_t v50 = v66;
      uint64_t v21 = v63;
      uint64_t v53 = v64;
      uint64_t v22 = v62;
      uint64_t v44 = v61;
    }

    sub_10003C67C((uint64_t)(v46 + 2), (uint64_t)v71);
    sub_10003C67C((uint64_t)v71, (uint64_t)&v77);
    uint64_t v27 = v78;
    if (v78 && (uint64_t v28 = v77, type metadata accessor for OctaneLocale(), (v29 = sub_1000CB708(v28, v27)) != 0))
    {
      uint64_t v30 = (void *)v29;
      uint64_t v31 = v48;
    }

    else
    {
      uint64_t v31 = v48;
      sub_100019F58(v19, *(void *)(v48 + 72));
      sub_10007608C();
      uint64_t v30 = v32;
    }

    v74[0] = v44;
    v74[1] = v22;
    v74[2] = v21;
    v74[3] = v53;
    v74[4] = v20;
    v74[5] = v50;
    v74[6] = v57;
    v74[7] = v49;
    v74[8] = v58;
    v74[9] = v59;
    uint64_t v33 = swift_allocObject(&unk_1002775E0, 24LL, 7LL);
    *(void *)(v33 + 16) = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for String);
    sub_100023BAC((uint64_t)v19, (uint64_t)v60);
    Swift::String v34 = (void *)swift_allocObject(&unk_100277608, 528LL, 7LL);
    v34[2] = v33;
    sub_10002A118(v60, (uint64_t)(v34 + 3));
    memcpy(v34 + 8, v46, 0x1C1uLL);
    v34[65] = v30;
    sub_100019F58(v19, *(void *)(v31 + 72));
    swift_retain();
    swift_retain();
    sub_10003C27C((uint64_t)v46);
    uint64_t v35 = sub_100076018(31LL, v52, v51);
    unint64_t v37 = v36;
    Swift::Int v38 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for String);
    sub_10003C27C((uint64_t)v46);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v39 = sub_10003B914(v38, (unint64_t)v47, v31, v46, v35, v37);
    swift_bridgeObjectRelease();
    uint64_t v40 = v46[15];
    swift_bridgeObjectRetain_n(v40, 2LL);
    uint64_t v55 = v30;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v41 = sub_10003AB40((uint64_t)v47, sub_10003C268, (uint64_t)v34, v74, v30, v40, v39);
    swift_release(v33);
    swift_release(v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release(v55);
    return (uint64_t)v41;
  }

  else
  {
    unint64_t v23 = sub_10001FD38();
    uint64_t v24 = swift_allocError(&type metadata for HTTPResponseStatus, v23, 0LL, 0LL);
    *unsigned int v25 = 0LL;
    v25[1] = 0LL;
    void v25[2] = 21LL;
    return swift_willThrow(v24);
  }

uint64_t sub_10003B784(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v10 = a3 + 16;
  swift_beginAccess(a3 + 16, v20, 32LL, 0LL);
  uint64_t v11 = *(void *)(a3 + 16);
  if (*(void *)(v11 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v12 = sub_1000F168C(a1, a2);
    if ((v13 & 1) != 0)
    {
      uint64_t v14 = *(void *)(*(void *)(v11 + 56) + 16 * v12);
      swift_endAccess(v20);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return v14;
    }

    swift_bridgeObjectRelease();
  }

  swift_endAccess(v20);
  sub_100019F58(a4, a4[3]);
  uint64_t v15 = sub_10003AF1C(a1, a2, *a5, a5[1]);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v14 = sub_100134774();
    uint64_t v18 = v17;
    swift_release(v16);
  }

  else
  {
    uint64_t v14 = 0LL;
    uint64_t v18 = 0LL;
  }

  swift_beginAccess(v10, v20, 33LL, 0LL);
  swift_bridgeObjectRetain();
  if (v18)
  {
    swift_bridgeObjectRetain();
    sub_1001B8090(v14, v18, a1, a2);
  }

  else
  {
    sub_1001B7C1C(a1, a2);
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  swift_endAccess(v20);
  return v14;
}

uint64_t sub_10003B914( Swift::Int a1, unint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, unint64_t a6)
{
  uint64_t isUniquelyReferenced_nonNull_native = a2;
  if (a2 >> 62)
  {
LABEL_39:
    if (isUniquelyReferenced_nonNull_native < 0) {
      uint64_t v57 = isUniquelyReferenced_nonNull_native;
    }
    else {
      uint64_t v57 = isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v57);
    if (v8) {
      goto LABEL_3;
    }
LABEL_33:
    swift_bridgeObjectRelease();
    swift_release(a3);
    sub_10003C49C((uint64_t)a4);
    swift_bridgeObjectRelease();
    return a1;
  }

  uint64_t v8 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  if (!v8) {
    goto LABEL_33;
  }
LABEL_3:
  unint64_t v65 = isUniquelyReferenced_nonNull_native & 0xC000000000000001LL;
  uint64_t v9 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x2000000000000000LL) == 0) {
    uint64_t v9 = a5 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v59 = v9;
  uint64_t v10 = 4LL;
  uint64_t v61 = v8;
  uint64_t v62 = isUniquelyReferenced_nonNull_native;
  while (1)
  {
    if (v65)
    {
      uint64_t v11 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, isUniquelyReferenced_nonNull_native);
    }

    else
    {
      uint64_t v11 = *(void **)(isUniquelyReferenced_nonNull_native + 8 * v10);
      swift_retain();
    }

    uint64_t v12 = v10 - 3;
    if (__OFADD__(v10 - 4, 1LL))
    {
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    char v13 = (void *)v11[16];
    if (v13)
    {
      uint64_t v68 = v10 - 3;
      uint64_t v69 = v10;
      uint64_t v14 = v11[15];
      type metadata accessor for AssetRoute();
      uint64_t v15 = *a4;
      uint64_t v16 = (void *)a4[1];
      swift_bridgeObjectRetain();
      uint64_t v17 = sub_100054D14(v14, v13, v15, v16);
      uint64_t v19 = v18;
      swift_bridgeObjectRelease();
      sub_1001828C8(v17, v19);
      uint64_t v21 = v20;
      uint64_t v23 = v22;
      swift_bridgeObjectRelease();
      uint64_t v66 = v11;
      uint64_t v24 = v11[10];
      uint64_t v25 = v11[11];
      swift_bridgeObjectRetain();
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
      uint64_t v70 = (void *)a1;
      unint64_t v26 = sub_1000F168C(v24, v25);
      uint64_t v28 = *(void *)(a1 + 16);
      BOOL v29 = (v27 & 1) == 0;
      a1 = v28 + v29;
      if (__OFADD__(v28, v29)) {
        goto LABEL_35;
      }
      unint64_t v30 = v26;
      char v31 = v27;
      sub_1000175B0(&qword_1002AA9A0);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, a1))
      {
        unint64_t v32 = sub_1000F168C(v24, v25);
        if ((v31 & 1) != (v33 & 1)) {
          goto LABEL_44;
        }
        unint64_t v30 = v32;
      }

      a1 = (Swift::Int)v70;
      if ((v31 & 1) != 0)
      {
        Swift::String v34 = (void *)(v70[7] + 16 * v30);
        *Swift::String v34 = v21;
        v34[1] = v23;
      }

      else
      {
        v70[(v30 >> 6) + 8] |= 1LL << v30;
        uint64_t v47 = (uint64_t *)(v70[6] + 16 * v30);
        *uint64_t v47 = v24;
        v47[1] = v25;
        uint64_t v48 = (void *)(v70[7] + 16 * v30);
        *uint64_t v48 = v21;
        v48[1] = v23;
        uint64_t v49 = v70[2];
        BOOL v50 = __OFADD__(v49, 1LL);
        uint64_t v51 = v49 + 1;
        if (v50) {
          goto LABEL_36;
        }
        v70[2] = v51;
        swift_bridgeObjectRetain();
      }

      swift_release(v66);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v8 = v61;
      uint64_t isUniquelyReferenced_nonNull_native = v62;
LABEL_31:
      uint64_t v12 = v68;
      uint64_t v10 = v69;
      goto LABEL_32;
    }

    if (v59) {
      break;
    }
    swift_release(v11);
LABEL_32:
    ++v10;
    if (v12 == v8) {
      goto LABEL_33;
    }
  }

  uint64_t v68 = v10 - 3;
  uint64_t v69 = v10;
  uint64_t v67 = v11;
  uint64_t v35 = v11[10];
  uint64_t v36 = v11[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v37 = swift_isUniquelyReferenced_nonNull_native(a1);
  uint64_t v71 = (void *)a1;
  unint64_t v38 = sub_1000F168C(v35, v36);
  uint64_t v40 = *(void *)(a1 + 16);
  BOOL v41 = (v39 & 1) == 0;
  a1 = v40 + v41;
  if (__OFADD__(v40, v41)) {
    goto LABEL_37;
  }
  unint64_t v42 = v38;
  char v43 = v39;
  sub_1000175B0(&qword_1002AA9A0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(v37, a1))
  {
LABEL_22:
    a1 = (Swift::Int)v71;
    if ((v43 & 1) != 0)
    {
      unint64_t v46 = (void *)(v71[7] + 16 * v42);
      *unint64_t v46 = a5;
      v46[1] = a6;
    }

    else
    {
      v71[(v42 >> 6) + 8] |= 1LL << v42;
      uint64_t v52 = (uint64_t *)(v71[6] + 16 * v42);
      *uint64_t v52 = v35;
      v52[1] = v36;
      uint64_t v53 = (void *)(v71[7] + 16 * v42);
      *uint64_t v53 = a5;
      v53[1] = a6;
      uint64_t v54 = v71[2];
      BOOL v50 = __OFADD__(v54, 1LL);
      uint64_t v55 = v54 + 1;
      if (v50) {
        goto LABEL_38;
      }
      v71[2] = v55;
      swift_bridgeObjectRetain();
    }

    swift_release(v67);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }

  unint64_t v44 = sub_1000F168C(v35, v36);
  if ((v43 & 1) == (v45 & 1))
  {
    unint64_t v42 = v44;
    goto LABEL_22;
  }

LABEL_44:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
LABEL_45:
  uint64_t v10 = sub_1001D56B8(0LL, *((void *)v10 + 2) + 1LL, 1, v10);
LABEL_36:
  uint64_t v36 = *((void *)v10 + 2);
  uint64_t v35 = *((void *)v10 + 3);
  if (v36 >= v35 >> 1) {
    uint64_t v10 = sub_1001D56B8((char *)(v35 > 1), v36 + 1, 1, v10);
  }
  *((void *)v10 + 2) = v36 + 1;
  char v37 = &v10[32 * v36];
  *((void *)v37 + 4) = v6;
  *((void *)v37 + 5) = v8;
  *((void *)v37 + 6) = v9;
  *((void *)v37 + 7) = v11;
  *(void *)(v41 + 16) = v10;
LABEL_39:
  swift_bridgeObjectRetain();
  swift_release();
LABEL_40:
  swift_release();
  return v10;
}

uint64_t sub_10003BD5C()
{
  return swift_unknownObjectRelease(*(void *)(v0 + 88));
}

uint64_t sub_10003BD64()
{
  uint64_t v0 = sub_10007F138();
  swift_unknownObjectRelease(v0[11]);
  return swift_deallocClassInstance(v0, 104LL, 7LL);
}

uint64_t type metadata accessor for CheddarFetchRoute()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService17CheddarFetchRoute);
}

uint64_t sub_10003BDB8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(vHasher._combine(_:)(v1 & 1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_10003BDD0(uint64_t a1)
{
  __int128 v14 = *(_OWORD *)(a1 + 400);
  __int128 v15 = *(_OWORD *)(a1 + 416);
  __int128 v12 = *(_OWORD *)(a1 + 368);
  __int128 v13 = *(_OWORD *)(a1 + 384);
  __int128 v10 = *(_OWORD *)(a1 + 336);
  __int128 v11 = *(_OWORD *)(a1 + 352);
  __int128 v8 = *(_OWORD *)(a1 + 304);
  __int128 v9 = *(_OWORD *)(a1 + 320);
  __int128 v6 = *(_OWORD *)(a1 + 272);
  __int128 v7 = *(_OWORD *)(a1 + 288);
  __int128 v4 = *(_OWORD *)(a1 + 240);
  __int128 v5 = *(_OWORD *)(a1 + 256);
  __int128 v3 = *(_OWORD *)(a1 + 208);
  sub_10003BE80( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 128),  *(void *)(a1 + 136),  *(void *)(a1 + 144),  *(void *)(a1 + 152),  *(void *)(a1 + 160),  *(void *)(a1 + 168),  *(void *)(a1 + 176),  *(void *)(a1 + 184),  *(void *)(a1 + 192),  *(void *)(a1 + 200),  v3,  *((uint64_t *)&v3 + 1),  *(void *)(a1 + 224),  *(void *)(a1 + 232),  v4,  *((uint64_t *)&v4 + 1),  v5,  *((uint64_t *)&v5 + 1),  v6,  *((uint64_t *)&v6 + 1),  v7,  *((uint64_t *)&v7 + 1),  v8,  *((uint64_t *)&v8 + 1),  v9,  *((uint64_t *)&v9 + 1),  v10,  *((uint64_t *)&v10 + 1),  v11,  *((uint64_t *)&v11 + 1),  v12,  *((uint64_t *)&v12 + 1),  v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    *(void *)(a1 + 432),
    *(void *)(a1 + 440));
  return a1;
}

uint64_t sub_10003BE80( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_100039578( a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43,  a44,  a45,  a46,  a47,  a48,  a49,  a50,  a51,  a52,  a53,  a54,  a55,  a56);
  }

  return result;
}

uint64_t sub_10003C140()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10003C164()
{
  if (v0[28] != 1LL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_release(v0[65]);
  return swift_deallocObject(v0, 528LL, 7LL);
}

uint64_t sub_10003C268(uint64_t a1, uint64_t a2)
{
  return sub_10003B784(a1, a2, v2[2], v2 + 3, v2 + 8);
}

uint64_t sub_10003C27C(uint64_t a1)
{
  uint64_t v25 = *(void *)(a1 + 144);
  uint64_t v26 = *(void *)(a1 + 136);
  uint64_t v23 = *(void *)(a1 + 160);
  uint64_t v24 = *(void *)(a1 + 152);
  uint64_t v21 = *(void *)(a1 + 176);
  uint64_t v22 = *(void *)(a1 + 168);
  uint64_t v19 = *(void *)(a1 + 192);
  uint64_t v20 = *(void *)(a1 + 184);
  __int128 v17 = *(_OWORD *)(a1 + 216);
  __int128 v18 = *(_OWORD *)(a1 + 200);
  __int128 v15 = *(_OWORD *)(a1 + 248);
  __int128 v16 = *(_OWORD *)(a1 + 232);
  __int128 v13 = *(_OWORD *)(a1 + 280);
  __int128 v14 = *(_OWORD *)(a1 + 264);
  __int128 v11 = *(_OWORD *)(a1 + 312);
  __int128 v12 = *(_OWORD *)(a1 + 296);
  __int128 v9 = *(_OWORD *)(a1 + 344);
  __int128 v10 = *(_OWORD *)(a1 + 328);
  __int128 v7 = *(_OWORD *)(a1 + 376);
  __int128 v8 = *(_OWORD *)(a1 + 360);
  __int128 v5 = *(_OWORD *)(a1 + 408);
  __int128 v6 = *(_OWORD *)(a1 + 392);
  __int128 v4 = *(_OWORD *)(a1 + 424);
  uint64_t v2 = *(void *)(a1 + 440);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000392B0( v26,  v25,  v24,  v23,  v22,  v21,  v20,  v19,  v18,  *((uint64_t *)&v18 + 1),  v17,  *((uint64_t *)&v17 + 1),  v16,  *((uint64_t *)&v16 + 1),  v15,  *((uint64_t *)&v15 + 1),  v14,  *((uint64_t *)&v14 + 1),  v13,  *((uint64_t *)&v13 + 1),  v12,  *((uint64_t *)&v12 + 1),  v11,  *((uint64_t *)&v11 + 1),  v10,  *((uint64_t *)&v10 + 1),  v9,  *((uint64_t *)&v9 + 1),  v8,  *((uint64_t *)&v8 + 1),  v7,  *((uint64_t *)&v7 + 1),  v6,  *((uint64_t *)&v6 + 1),  v5,  *((uint64_t *)&v5 + 1),  v4,  *((uint64_t *)&v4 + 1),  v2);
  return a1;
}

void *sub_10003C434(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[7];
  uint64_t v5 = a1[9];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t sub_10003C49C(uint64_t a1)
{
  uint64_t v25 = *(void *)(a1 + 144);
  uint64_t v26 = *(void *)(a1 + 136);
  uint64_t v23 = *(void *)(a1 + 160);
  uint64_t v24 = *(void *)(a1 + 152);
  uint64_t v21 = *(void *)(a1 + 176);
  uint64_t v22 = *(void *)(a1 + 168);
  uint64_t v19 = *(void *)(a1 + 192);
  uint64_t v20 = *(void *)(a1 + 184);
  __int128 v17 = *(_OWORD *)(a1 + 216);
  __int128 v18 = *(_OWORD *)(a1 + 200);
  __int128 v15 = *(_OWORD *)(a1 + 248);
  __int128 v16 = *(_OWORD *)(a1 + 232);
  __int128 v13 = *(_OWORD *)(a1 + 280);
  __int128 v14 = *(_OWORD *)(a1 + 264);
  __int128 v11 = *(_OWORD *)(a1 + 312);
  __int128 v12 = *(_OWORD *)(a1 + 296);
  __int128 v9 = *(_OWORD *)(a1 + 344);
  __int128 v10 = *(_OWORD *)(a1 + 328);
  __int128 v7 = *(_OWORD *)(a1 + 376);
  __int128 v8 = *(_OWORD *)(a1 + 360);
  __int128 v5 = *(_OWORD *)(a1 + 408);
  __int128 v6 = *(_OWORD *)(a1 + 392);
  __int128 v4 = *(_OWORD *)(a1 + 424);
  uint64_t v2 = *(void *)(a1 + 440);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100039578( v26,  v25,  v24,  v23,  v22,  v21,  v20,  v19,  v18,  *((uint64_t *)&v18 + 1),  v17,  *((uint64_t *)&v17 + 1),  v16,  *((uint64_t *)&v16 + 1),  v15,  *((uint64_t *)&v15 + 1),  v14,  *((uint64_t *)&v14 + 1),  v13,  *((uint64_t *)&v13 + 1),  v12,  *((uint64_t *)&v12 + 1),  v11,  *((uint64_t *)&v11 + 1),  v10,  *((uint64_t *)&v10 + 1),  v9,  *((uint64_t *)&v9 + 1),  v8,  *((uint64_t *)&v8 + 1),  v7,  *((uint64_t *)&v7 + 1),  v6,  *((uint64_t *)&v6 + 1),  v5,  *((uint64_t *)&v5 + 1),  v4,  *((uint64_t *)&v4 + 1),  v2);
  return a1;
}

uint64_t sub_10003C654()
{
  return type metadata accessor for HTTPResponseHead._Storage();
}

  ;
}

uint64_t sub_10003C67C(uint64_t a1, uint64_t a2)
{
  return sub_1000390C8(a1, a2, v2);
}

void ByteBufferFoundationError.hash(into:)()
{
}

uint64_t sub_10003C6A8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x726F727265LL && a2 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease(0xE500000000000000LL);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x726F727265LL, 0xE500000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

Swift::Int NonBlockingFileIO.Error.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t sub_10003C764()
{
  return 0x726F727265LL;
}

uint64_t sub_10003C778(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000175B0(&qword_1002AAB40);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  __int128 v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100019F58(a1, v10);
  unint64_t v12 = sub_10003CC5C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for InAppTransactionDoneErrorResponse.CodingKeys,  &type metadata for InAppTransactionDoneErrorResponse.CodingKeys,  v12,  v10,  v11);
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, v13, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void *sub_10003C868(void *a1)
{
  uint64_t v3 = sub_1000175B0(&qword_1002AAB50);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  __int128 v9 = sub_100019F58(a1, v7);
  unint64_t v10 = sub_10003CC5C();
  uint64_t v11 = dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for InAppTransactionDoneErrorResponse.CodingKeys,  &type metadata for InAppTransactionDoneErrorResponse.CodingKeys,  v10,  v7,  v8);
  if (!v1)
  {
    __int128 v9 = (void *)KeyedDecodingContainer.decode(_:forKey:)(v11, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  sub_100019F7C(a1);
  return v9;
}

Swift::Int sub_10003C97C()
{
  return Hasher._finalize()();
}

uint64_t sub_10003C9BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10003C6A8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10003C9E4(uint64_t a1)
{
  unint64_t v2 = sub_10003CC5C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003CA0C(uint64_t a1)
{
  unint64_t v2 = sub_10003CC5C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10003CA34@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10003C868(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

uint64_t sub_10003CA5C(void *a1)
{
  return sub_10003C778(a1, *v1, v1[1]);
}

uint64_t sub_10003CA74(uint64_t a1, char a2, uint64_t a3)
{
  char v5 = a2 & 1;
  uint64_t done = type metadata accessor for InAppTransactionDoneResponse();
  swift_allocObject(done, 88LL, 7LL);
  uint64_t v7 = sub_1000AD540();
  *(_BYTE *)(v7 + 24) = 1;
  swift_retain();
  sub_1000AD5AC(a1, v5);
  *(void *)(v7 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = a3;
  swift_release();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_10003CAF0()
{
  uint64_t v0 = sub_1000AD578();
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

uint64_t type metadata accessor for InAppTransactionDoneResponse()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService28InAppTransactionDoneResponse);
}

void *initializeBufferWithCopyOfBuffer for InAppTransactionDoneErrorResponse(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for InAppTransactionDoneErrorResponse(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

void *assignWithCopy for InAppTransactionDoneErrorResponse(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

void *assignWithTake for InAppTransactionDoneErrorResponse(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for InAppTransactionDoneErrorResponse(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InAppTransactionDoneErrorResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for InAppTransactionDoneErrorResponse()
{
  return &type metadata for InAppTransactionDoneErrorResponse;
}

unint64_t sub_10003CC5C()
{
  unint64_t result = qword_1002AAB48;
  if (!qword_1002AAB48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F5908, &type metadata for InAppTransactionDoneErrorResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AAB48);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for InAppTransactionDoneErrorResponse.CodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10003CCD8 + 4 * asc_1001F5780[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10003CCF8 + 4 * byte_1001F5785[v4]))();
  }
}

_BYTE *sub_10003CCD8(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10003CCF8(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10003CD00(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10003CD08(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10003CD10(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10003CD18(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for InAppTransactionDoneErrorResponse.CodingKeys()
{
  return &type metadata for InAppTransactionDoneErrorResponse.CodingKeys;
}

unint64_t sub_10003CD38()
{
  unint64_t result = qword_1002AAB58;
  if (!qword_1002AAB58)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F58E0, &type metadata for InAppTransactionDoneErrorResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AAB58);
  }

  return result;
}

unint64_t sub_10003CD78()
{
  unint64_t result = qword_1002AAB60;
  if (!qword_1002AAB60)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F5850, &type metadata for InAppTransactionDoneErrorResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AAB60);
  }

  return result;
}

unint64_t sub_10003CDB8()
{
  unint64_t result = qword_1002AAB68;
  if (!qword_1002AAB68)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F5878, &type metadata for InAppTransactionDoneErrorResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AAB68);
  }

  return result;
}

char *sub_10003CDF8(unint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v7 = a1;
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v8)
  {
    while (1)
    {
      uint64_t v19 = _swiftEmptyArrayStorage;
      unint64_t result = sub_100032388(0LL, v8 & ~(v8 >> 63), 0);
      if (v8 < 0) {
        break;
      }
      uint64_t v10 = 0LL;
      uint64_t v11 = v19;
      unint64_t v17 = v7 & 0xC000000000000001LL;
      a4 &= 1u;
      uint64_t v12 = v7;
      while (v8 != v10)
      {
        if (v17)
        {
          uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v7);
        }

        else
        {
          uint64_t v13 = *(void *)(v7 + 8 * v10 + 32);
          swift_retain();
        }

        swift_retain();
        sub_10003C434(a3);
        sub_100073698(v13, a2, (uint64_t)a3, a4, __src);
        uint64_t v19 = v11;
        unint64_t v15 = v11[2];
        unint64_t v14 = v11[3];
        if (v15 >= v14 >> 1)
        {
          sub_100032388((char *)(v14 > 1), v15 + 1, 1);
          uint64_t v11 = v19;
        }

        ++v10;
        v11[2] = v15 + 1;
        memcpy(&v11[28 * v15 + 4], __src, 0xD9uLL);
        uint64_t v7 = v12;
        if (v8 == v10)
        {
          swift_release(a2);
          goto LABEL_19;
        }
      }

      __break(1u);
LABEL_14:
      if (v7 < 0) {
        uint64_t v16 = v7;
      }
      else {
        uint64_t v16 = v7 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v16);
      swift_bridgeObjectRelease();
      if (!v8) {
        goto LABEL_18;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_18:
    swift_release(a2);
    uint64_t v11 = _swiftEmptyArrayStorage;
LABEL_19:
    sub_10001B4DC(a3);
    return (char *)v11;
  }

  return result;
}

uint64_t sub_10003CFC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v4 = v2;
  uint64_t v7 = sub_1001BCBC8();
  uint64_t v8 = *(void *)(a1 + 40);
  swift_bridgeObjectRetain();
  sub_100133070(v7, v8, (uint64_t)v19);
  sub_10003D418((uint64_t)v19, (uint64_t)__src);
  if (sub_10003BDB8((uint64_t)__src) == 1)
  {
    sub_1000ACB64(0x2064696C61766E49LL, 0xEF74736575716572LL, 6u, (uint64_t)__dst);
    uint64_t v9 = __dst[0];
    uint64_t v10 = __dst[1];
    uint64_t v11 = __dst[2];
    uint64_t v12 = __dst[3];
    unint64_t v13 = LODWORD(__dst[4]) | ((unint64_t)WORD2(__dst[4]) << 32) | ((unint64_t)BYTE6(__dst[4]) << 48);
    sub_10001ED94();
    uint64_t v14 = sub_10003C654();
    uint64_t result = sub_10001ED7C(v14);
    uint64_t v16 = result;
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)(result + 32) = 21LL;
    *(_WORD *)(result + 40) = v4;
    *(_WORD *)(result + 42) = v3;
    __int128 v18 = _swiftEmptyArrayStorage;
  }

  else
  {
    memcpy(__dst, __src, 0x1C1uLL);
    sub_10003D248(__dst, v20);
    sub_10003BDD0((uint64_t)v19);
    sub_100196638(v20);
    uint64_t v9 = v21;
    uint64_t v10 = v22;
    uint64_t v11 = v23;
    uint64_t v12 = v24;
    unint64_t v13 = v25 | ((unint64_t)v26 << 32) | ((unint64_t)v27 << 48);
    sub_10001ED94();
    uint64_t v17 = sub_10003C654();
    uint64_t result = sub_10001ED7C(v17);
    uint64_t v16 = result;
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)(result + 32) = 3LL;
    *(_WORD *)(result + 40) = 0;
    __int128 v18 = &off_100270F20;
    *(_WORD *)(result + 42) = v3;
  }

  *(void *)a2 = v16;
  *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 136), 8) = v18;
  *(_BYTE *)(a2 + 16) = 2;
  *(void *)(a2 + 24) = v9;
  *(void *)(a2 + 32) = v10;
  *(void *)(a2 + 40) = v11;
  *(void *)(a2 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v12;
  *(_BYTE *)(a2 + 62) = BYTE6(v13);
  *(_WORD *)(a2 + 60) = WORD2(v13);
  *(_DWORD *)(a2 + 56) = v13;
  return result;
}

uint64_t sub_10003D248@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1[6];
  if (v3)
  {
    uint64_t v4 = v2;
    sub_100019F58((void *)(v4 + 48), *(void *)(v4 + 72));
    sub_100075EE8(*a1, a1[1]);
    uint64_t v8 = v7;
    uint64_t v9 = sub_1000D8188(v3, 0LL);
    swift_release(v8);
    sub_100019F58((void *)(v4 + 48), *(void *)(v4 + 72));
    sub_10007608C();
    uint64_t v11 = v10;
    sub_100019F58((void *)(v4 + 48), *(void *)(v4 + 72));
    sub_100076700();
    swift_retain();
    sub_10003C434(v17);
    uint64_t v12 = sub_10003CDF8((unint64_t)v9, v11, v17, 0);
    swift_release(v11);
    sub_10001B4DC(v17);
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = 3157553LL;
    a2[1] = 0xE300000000000000LL;
    a2[2] = 0x61502D6472696854LL;
    a2[3] = 0xEB00000000797472LL;
    a2[4] = v12;
  }

  else
  {
    unint64_t v14 = sub_10001FD38();
    uint64_t v15 = swift_allocError(&type metadata for HTTPResponseStatus, v14, 0LL, 0LL);
    void *v16 = 0LL;
    v16[1] = 0LL;
    void v16[2] = 21LL;
    return swift_willThrow(v15);
  }

  return result;
}

uint64_t sub_10003D3DC()
{
  uint64_t v0 = sub_10007F138();
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

uint64_t type metadata accessor for FetchSoftwareAddOnsRoute()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService24FetchSoftwareAddOnsRoute);
}

uint64_t sub_10003D418(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002AA988);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void *sub_10003D460(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    uint64_t v4 = sub_100041418(a1);
    if ((v4 & 0x8000000000000000LL) == 0 && v4 < 1LL << *(_BYTE *)(a1 + 32))
    {
      if ((*(void *)(a1 + 64 + 8 * ((unint64_t)v4 >> 6)) & (1LL << v4)) != 0)
      {
        if (v5 == *(_DWORD *)(a1 + 36)) {
          __asm { BR              X9 }
        }
      }

      else
      {
        __break(1u);
      }

      __break(1u);
      JUMPOUT(0x10003D6B8LL);
    }

    __break(1u);
    JUMPOUT(0x10003D688LL);
  }

  return result;
}

uint64_t sub_10003D6D4()
{
  uint64_t v1 = sub_1000175B0(&qword_1002AAD98);
  uint64_t v2 = sub_100019310(v1, 72LL);
  *(void *)(v2 + 32) = v0;
  *(void *)(v2 + 40) = &protocol witness table for EmbeddedEventLoop;
  *(void *)(v2 + 16) = 0LL;
  *(_BYTE *)(v2 + 24) = -1;
  *(void *)(v2 + 56) = 0LL;
  *(void *)(v2 + 64) = 0LL;
  *(void *)(v2 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
  ChannelPipeline.syncOperations.getter();
  return v2;
}

uint64_t sub_10003D72C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003D750(a1, a2, a3, a4, &qword_1002AAD98);
}

uint64_t sub_10003D738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003D750(a1, a2, a3, a4, &qword_1002AADA0);
}

uint64_t sub_10003D744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003D750(a1, a2, a3, a4, &qword_1002AADA8);
}

uint64_t sub_10003D750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6 = sub_1000175B0(a5);
  uint64_t v7 = sub_100019310(v6, 72LL);
  *(void *)(v7 + 32) = v5;
  *(void *)(v7 + 40) = &protocol witness table for SelectableEventLoop;
  *(void *)(v7 + 16) = 0LL;
  *(_BYTE *)(v7 + 24) = -1;
  *(void *)(v7 + 56) = 0LL;
  *(void *)(v7 + 64) = 0LL;
  *(void *)(v7 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
  ChannelPipeline.syncOperations.getter();
  return v7;
}

uint64_t EmbeddedChannel.WrongTypeError.actual.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL sub_10003D7AC(uint64_t (*a1)(void))
{
  BOOL v2 = 1LL;
  if ((v1[152] & 1) == 0)
  {
    uint64_t v4 = v1;
    v1[152] = 1;
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)v1 + 648LL);
    if ((v5() & 1) != 0)
    {
      uint64_t v6 = *(uint64_t (**)(void))(*(void *)v1 + 584LL);
      if ((v6() & 1) != 0)
      {
        uint64_t v7 = *(uint64_t (**)(void))(*(void *)v1 + 616LL);
        __int128 v18 = v5;
        do
        {
          __int16 v8 = v7();
          BOOL v2 = (v8 & 1) == 0;
          char v9 = v8;
          if ((v8 & 0x100) != 0)
          {
            uint64_t v10 = v6;
            uint64_t v11 = a1;
            uint64_t v12 = a1();
            uint64_t v13 = *(void *)(v12 + 56);
            uint64_t ObjectType = swift_getObjectType(*(void *)(v12 + 48));
            EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  1173LL,  ObjectType,  v13);
            uint64_t v15 = sub_100095918();
            if (v15)
            {
              uint64_t v16 = v15;
              sub_1000964D0();
              swift_release(v12);
              uint64_t v12 = v16;
            }

            swift_release(v12);
            a1 = v11;
            uint64_t v6 = v10;
            uint64_t v5 = v18;
          }
        }

        while ((v9 & 1) == 0 && (v5() & 1) != 0 && (v6() & 1) != 0);
      }
    }

    v4[152] = 0;
  }

  return v2;
}

uint64_t sub_10003D9CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(_BYTE *)(v4 + 88)) {
    return (*(uint64_t (**)(void))(a4 + 96))(*(void *)(v4 + 16));
  }
  return result;
}

uint64_t sub_10003DA00()
{
  uint64_t result = sub_10003D7AC(sub_10014E96C);
  if ((result & 1) != 0)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 584LL))();
    if ((result & 1) != 0) {
      return sub_10014F18C();
    }
  }

  return result;
}

uint64_t sub_10003DA54()
{
  uint64_t result = sub_10003D7AC(sub_10014E96C);
  if ((result & 1) != 0)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 584LL))();
    if ((result & 1) != 0) {
      return sub_10014F18C();
    }
  }

  return result;
}

uint64_t sub_10003DAA8()
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 688LL))();
  if ((result & 1) != 0)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 584LL))();
    if ((result & 1) != 0) {
      return sub_10014F18C();
    }
  }

  return result;
}

void sub_10003DAF4(void (*a1)(void, uint64_t), void (*a2)(uint64_t))
{
  uint64_t v3 = v2[12];
  if (v3)
  {
    uint64_t v6 = *(void (**)(uint64_t))(*v2 + 640LL);
    uint64_t v7 = sub_10002A4C8();
    v6(v7);
    uint64_t v8 = v2[12];
    v2[12] = 0LL;
    swift_release(v8);
    a1(0LL, 1LL);
    uint64_t v9 = sub_10002A4C8();
    a2(v9);
    sub_10001EDD8();
    swift_release(v3);
  }

  else
  {
    sub_100041AF4();
  }

void sub_10003DB9C(uint64_t *a1)
{
  uint64_t v5 = 0LL;
  unint64_t v6 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(40LL);
  uint64_t v4 = v1;
  sub_1000175B0(a1);
  _print_unlocked<A, B>(_:_:)(&v4, &v5);
  v3._object = (void *)0x8000000100219540LL;
  v3._countAndFlagsBits = 0xD000000000000026LL;
  String.append(_:)(v3);
  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v5,  v6,  "ASOctaneSupportXPCService/BaseSocketChannel.swift",  49LL,  2LL);
  __break(1u);
}

uint64_t sub_10003DC58()
{
  uint64_t result = sub_1000A9DA4();
  if ((result & 1) != 0)
  {
    unint64_t v2 = sub_100029C98();
    uint64_t v3 = swift_allocError(&type metadata for ChannelError, v2, 0LL, 0LL);
    *(void *)uint64_t v4 = 1LL;
    *(_BYTE *)(v4 + _Block_object_dispose((const void *)(v1 - 136), 8) = 3;
    swift_willThrow(v3);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v0 + 760LL))(v3, 2LL, 0LL);
    return swift_errorRelease(v3);
  }

  return result;
}

void sub_10003DD00(void (*a1)(void))
{
  uint64_t v2 = v1;
  a1();
  uint64_t v3 = *(void *)(v1 + 32);
  if (sub_1000CCD30())
  {
    if (sub_1000CCD30())
    {
      int v4 = sub_100151F30(*(unsigned int *)(v3 + 16), 0xFFFFLL, 4103LL);
      if (v4) {
        int v5 = v4;
      }
      else {
        int v5 = 54;
      }
      if (v4) {
        unint64_t v6 = 0xD00000000000001CLL;
      }
      else {
        unint64_t v6 = 0xD000000000000050LL;
      }
      if (v4) {
        unint64_t v7 = 0x80000001002194C0LL;
      }
      else {
        unint64_t v7 = 0x80000001002194E0LL;
      }
      unint64_t v8 = sub_100025100();
      uint64_t v9 = sub_1000252D0((uint64_t)&type metadata for IOError, v8);
      *(void *)uint64_t v10 = v6;
      *(void *)(v10 + _Block_object_dispose((const void *)(v1 - 136), 8) = v7;
      *(_DWORD *)(v10 + 16) = v5;
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, void))(*(void *)v2 + 760LL);
      swift_bridgeObjectRetain(v7);
      v11(v9, 2LL, 0LL);
      swift_errorRelease(v9);
      swift_bridgeObjectRelease(v7);
    }

    else
    {
      unint64_t v12 = sub_100025100();
      uint64_t v13 = sub_1000252D0((uint64_t)&type metadata for IOError, v12);
      *(void *)uint64_t v14 = 0xD00000000000001FLL;
      *(void *)(v14 + _Block_object_dispose((const void *)(v1 - 136), 8) = 0x80000001002194A0LL;
      *(_DWORD *)(v14 + 16) = 9;
      swift_willThrow(v13);
      sub_100041B24(v13, *(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v2 + 760LL));
      swift_errorRelease(v13);
    }
  }

  else
  {
    sub_100041AF4();
  }

void sub_10003DE74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100041AC0(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 104))(v4, v6, v3, a3);
  sub_100041B74();
}

void sub_10003DEBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(v3 + 88))
  {
    unint64_t v6 = sub_100029E1C();
    uint64_t v7 = swift_allocError(&type metadata for EventLoopError, v6, 0LL, 0LL);
    *unint64_t v8 = 2;
    swift_willThrow(v7);
  }

  else
  {
    uint64_t v10 = sub_100041AC0(a1, a2, a3);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 88))(v5, v10, v4, a3);
  }

  sub_100041B74();
}

void sub_10003DF44()
{
  uint64_t v4 = sub_100041AE0(v3);
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v4);
  sub_100041B4C();
  uint64_t v5 = sub_100041BF4();
  specialized ContiguousArray._endMutation()(v5);
  if (v2)
  {
    sub_100041BEC();
    while (1)
    {
      uint64_t v6 = *v0;
      sub_100041BE0();
      if (v8) {
        break;
      }
      unint64_t v9 = v2 - 1;
      unint64_t v10 = (v2 - 1) >> 1;
      if (v10 >= v7) {
        goto LABEL_17;
      }
      uint64_t v11 = sub_100041BCC();
      if ((static ScheduledTask.< infix(_:_:)(v11, v12) & 1) == 0) {
        goto LABEL_15;
      }
      if (v2 != v10)
      {
        sub_100041B3C();
        ChannelPipeline.syncOperations.getter();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
        *uint64_t v0 = v6;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          *uint64_t v0 = sub_1000F2BE4(v6);
        }
        sub_100041BE0();
        if (v8) {
          goto LABEL_18;
        }
        sub_100041BA4();
        sub_100041B34();
        char v14 = sub_100041C3C();
        *uint64_t v0 = v1;
        if ((v14 & 1) == 0)
        {
          uint64_t v1 = sub_1000F2BE4(v1);
          *uint64_t v0 = v1;
        }

        if (v10 >= *(void *)(v1 + 16)) {
          goto LABEL_19;
        }
        sub_100041B8C();
        sub_100041B34();
      }

      unint64_t v2 = (v2 - 1) >> 1;
      if (v9 <= 1) {
        goto LABEL_15;
      }
    }

    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }

  else
  {
LABEL_15:
    sub_10002A580();
  }

void sub_10003E034()
{
  uint64_t v4 = sub_100041AE0(v3);
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v4);
  sub_100041B4C();
  uint64_t v5 = sub_100041BF4();
  specialized ContiguousArray._endMutation()(v5);
  if (v2)
  {
    type metadata accessor for EmbeddedScheduledTask();
    while (1)
    {
      uint64_t v6 = *v0;
      sub_100041BE0();
      if (v8) {
        break;
      }
      unint64_t v9 = v2 - 1;
      unint64_t v10 = (v2 - 1) >> 1;
      if (v10 >= v7) {
        goto LABEL_17;
      }
      uint64_t v11 = sub_100041BCC();
      sub_1001AA2D4(v11, v12);
      if ((v13 & 1) == 0) {
        goto LABEL_15;
      }
      if (v2 != v10)
      {
        sub_100041B3C();
        ChannelPipeline.syncOperations.getter();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
        *uint64_t v0 = v6;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          *uint64_t v0 = sub_1000F2BE4(v6);
        }
        sub_100041BE0();
        if (v8) {
          goto LABEL_18;
        }
        sub_100041BA4();
        sub_100041B34();
        char v15 = sub_100041C3C();
        *uint64_t v0 = v1;
        if ((v15 & 1) == 0)
        {
          uint64_t v1 = sub_1000F2BE4(v1);
          *uint64_t v0 = v1;
        }

        if (v10 >= *(void *)(v1 + 16)) {
          goto LABEL_19;
        }
        sub_100041B8C();
        sub_100041B34();
      }

      unint64_t v2 = (v2 - 1) >> 1;
      if (v9 <= 1) {
        goto LABEL_15;
      }
    }

    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }

  else
  {
LABEL_15:
    sub_10002A580();
  }

void withAutoReleasePool<A>(_:)(void (*a1)(void))
{
  unint64_t v2 = objc_autoreleasePoolPush();
  a1();
  objc_autoreleasePoolPop(v2);
}

void sub_10003E184(unsigned __int8 a1)
{
}

void sub_10003E1C0()
{
}

void sub_10003E1DC()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v2);
  Hasher._combine(_:)(v1);
  Hasher._finalize()();
  sub_1000354B8();
}

uint64_t SelectableEventLoop._pendingTaskPop.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

void SelectableEventLoop._pendingTaskPop.setter(char a1)
{
  *(_BYTE *)(v1 + 32) = a1;
  sub_100013868();
}

void SelectableEventLoop._pendingTaskPop.modify(uint64_t a1)
{
}

void SelectableEventLoop._scheduledTasks.getter()
{
}

void SelectableEventLoop._scheduledTasks.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 40);
  *(void *)(v1 + 40) = a1;
  swift_release(v3);
  sub_100013868();
}

void SelectableEventLoop._scheduledTasks.modify(uint64_t a1)
{
}

void SelectableEventLoop._succeededVoidFuture.getter()
{
}

void SelectableEventLoop._succeededVoidFuture.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 56);
  *(void *)(v1 + 56) = a1;
  swift_release(v3);
  sub_100013868();
}

void SelectableEventLoop._succeededVoidFuture.modify(uint64_t a1)
{
}

uint64_t SelectableEventLoop._tasksLock.getter()
{
  return swift_retain(*(void *)(v0 + 72));
}

BOOL SelectableEventLoop.inEventLoop.getter()
{
  return sub_100041B84();
}

void SelectableEventLoop._preconditionSafeToWait(file:line:)()
{
  if (sub_100041B84())
  {
    __break(1u);
  }

  else
  {
    type metadata accessor for MultiThreadedEventLoopGroup();
    uint64_t v0 = static MultiThreadedEventLoopGroup.currentEventLoop.getter();
    swift_unknownObjectRelease(v0);
    if (!v0)
    {
      sub_10001945C();
      return;
    }
  }

  __break(1u);
}

BOOL SelectableEventLoop._validInternalStateToScheduleTasks.getter()
{
  return *(_BYTE *)(v0 + 88) != 3;
}

uint64_t sub_10003E454(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  *(_BYTE *)(v3 + 32) = 0;
  char v8 = _swiftEmptyArrayStorage;
  *(void *)(v3 + 40) = v8;
  *(void *)(v3 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = _swiftEmptyArrayStorage;
  *(void *)(v3 + 56) = 0LL;
  unint64_t v9 = (uint64_t *)(v3 + 56);
  uint64_t v10 = type metadata accessor for Lock();
  sub_100019310(v10, 24LL);
  *(void *)(v3 + 72) = sub_100041C10();
  sub_100019310(v10, 24LL);
  *(void *)(v3 + 80) = sub_100041C10();
  *(_WORD *)(v3 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = 0;
  sub_100019310(v10, 24LL);
  *(void *)(v3 + 216) = sub_100041C10();
  uint64_t v11 = sub_1000175B0(&qword_1002A8ED0);
  sub_1000175F0();
  *(void *)(v4 + 224) = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for _NIOEventLoopFutureIdentifier,  v11);
  *(void *)(v4 + 16) = a2;
  *(void *)(v4 + 24) = a1;
  sub_100041B5C();
  swift_retain();
  uint64_t v12 = sub_100019464(0x4000LL);
  *(void *)(v4 + 96) = v12;
  uint64_t v13 = sub_100019464(0x2000LL);
  *(void *)(v4 + 104) = v13;
  *(void *)(v4 + 112) = v12;
  *(void *)(v4 + 120) = 1024LL;
  *(void *)(v4 + 12_Block_object_dispose((const void *)(v1 - 136), 8) = v13;
  *(void *)(v4 + 136) = 1024LL;
  uint64_t v14 = sub_100019464(57344LL);
  *(void *)(v4 + 144) = v14;
  uint64_t v15 = sub_100019464(0x20000LL);
  *(void *)(v4 + 152) = v15;
  *(void *)(v4 + 160) = v14;
  *(void *)(v4 + 16_Block_object_dispose((const void *)(v1 - 136), 8) = 1024LL;
  *(void *)(v4 + 176) = v15;
  *(void *)(v4 + 184) = 1024LL;
  *(void *)(v4 + 192) = sub_100068100(1024LL);
  *(void *)(v4 + 200) = v16;
  *(void *)(v4 + 20_Block_object_dispose((const void *)(v1 - 136), 8) = v17;
  sub_10002A718(v4 + 48, (uint64_t)v24, 33LL);
  uint64_t v18 = sub_10006A610(4096LL);
  sub_1000356C4(v18);
  *(_BYTE *)(v4 + 64) = a3 & 1;
  sub_10003D750( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/SelectableEventLoop.swift",  121LL,  2LL,  183LL,  &qword_1002AAD98);
  uint64_t v19 = sub_100041C18();
  sub_100098A70(v19, v20, v21);
  sub_10002A5A4();
  swift_release(a2);
  sub_10002A718(v4 + 56, (uint64_t)v24, 1LL);
  uint64_t v22 = *v9;
  *unint64_t v9 = v4;
  swift_release(v22);
  return v4;
}

void SelectableEventLoop.deinit()
{
  uint64_t v1 = v0[25];
  if (v1) {
    uint64_t v1 = sub_10001A408(v1);
  }
  *(int64x2_t *)(v0 + 25) = vdupq_n_s64(0x7EADBEEFuLL);
  sub_1000356C4(v1);
  sub_100041B1C();
  sub_100035650();
  sub_100041B9C();
  swift_release(v0[6]);
  swift_release(v0[7]);
  swift_release(v0[9]);
  swift_release(v0[10]);
  swift_release(v0[27]);
  swift_bridgeObjectRelease();
  sub_1000078BC();
}

uint64_t SelectableEventLoop.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 232LL, 7LL);
}

uint64_t SelectableEventLoop.scheduleTask<A>(deadline:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (uint64_t)v4;
  uint64_t v10 = EventLoop.makePromise<A>(of:file:line:)( a4,  (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Selec tableEventLoop.swift",  121LL,  2LL,  252LL,  *v4,  a4,  (uint64_t)&protocol witness table for SelectableEventLoop);
  uint64_t v11 = (void *)sub_100019310((uint64_t)&unk_100277830, 48LL);
  v11[2] = a4;
  v11[3] = v10;
  v11[4] = a2;
  v11[5] = a3;
  uint64_t v12 = sub_100019310((uint64_t)&unk_100277858, 32LL);
  *(void *)(v12 + 16) = a4;
  *(void *)(v12 + 24) = v10;
  uint64_t v13 = sub_100041BEC();
  sub_100019310(v13, 56LL);
  uint64_t v14 = ScheduledTask.init(_:_:_:)((uint64_t)sub_10003E94C, (uint64_t)v11, (uint64_t)sub_10003E958, v12, a1);
  uint64_t v15 = sub_100019310((uint64_t)&unk_100277880, 32LL);
  *(void *)(v15 + 16) = v5;
  *(void *)(v15 + 24) = v14;
  swift_retain_n(v10, 3LL);
  swift_retain();
  sub_100041B5C();
  swift_retain();
  Scheduled.init(promise:cancellationTask:)(v10, (uint64_t)sub_100040FB0, v15);
  uint64_t v17 = v16;
  sub_100041BC0((uint64_t)v14);
  if (v5)
  {
    EventLoopPromise.fail(_:)(v5);
    sub_10001ED6C();
    sub_10002A5A4();
    sub_10002A47C();
  }

  else
  {
    sub_10001ED6C();
    sub_10002A5A4();
  }

  return v17;
}

uint64_t sub_10003E87C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 - 8);
  uint64_t v7 = __chkstk_darwin(a1);
  unint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v10(v7);
  EventLoopPromise.succeed(_:)((uint64_t)v9, a1, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, a4);
}

uint64_t sub_10003E930()
{
  uint64_t v0 = sub_100041B64();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10003E94C()
{
  return sub_10003E87C(v0[3], v0[4], v0[5], v0[2]);
}

void sub_10003E958(uint64_t a1)
{
}

void sub_10003E960(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000CB954(a2, *(void *)(a1 + 40));
  if ((v5 & 1) == 0)
  {
    sub_1001A9FD8(v4);
    uint64_t v4 = swift_release(v6);
  }

  sub_1000356C4(v4);
  Lock.unlock()();
}

void SelectableEventLoop._schedule0(_:)(uint64_t a1)
{
  if (sub_1000A8B90())
  {
    if (*(_BYTE *)(v1 + 88) == 3)
    {
      __break(1u);
    }

    else
    {
      Lock.lock()();
      sub_10002A718(v1 + 40, (uint64_t)v5, 33LL);
      sub_10003DF44();
      swift_endAccess(v5);
      Lock.unlock()();
    }
  }

  else
  {
    swift_retain(v1);
    swift_retain(a1);
    uint64_t v3 = ChannelPipeline.syncOperations.getter();
    char v4 = sub_1001387A8(v3, v1, a1);
    sub_100024F0C();
    if ((v4 & 1) != 0) {
      sub_100040DD4();
    }
  }

uint64_t SelectableEventLoop.scheduleTask<A>(in:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = static NIODeadline.+ infix(_:_:)(v8, a1);
  return SelectableEventLoop.scheduleTask<A>(deadline:_:)(v9, a2, a3, a4);
}

uint64_t SelectableEventLoop.execute(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_retain(a2);
  static NIODeadline.now()();
  uint64_t v7 = v6;
  uint64_t v8 = sub_100041BEC();
  sub_100019310(v8, 56LL);
  uint64_t v9 = ScheduledTask.init(_:_:_:)(a1, a2, (uint64_t)debugOnly(_:), 0LL, v7);
  sub_100041BC0((uint64_t)v9);
  if (v3) {
    sub_10002A47C();
  }
  return swift_release(v9);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SelectableEventLoop._wakeupSelector()()
{
}

void sub_10003EBAC(char a1, uint64_t a2)
{
  if ((((uint64_t (*)(void))sub_10014E8C0)() & 1) != 0)
  {
    if ((a1 & 1) != 0)
    {
      sub_10003DD00((void (*)(void))sub_1000AABA0);
    }

    else
    {
      if ((a1 & 0x10) != 0) {
        sub_10003DB9C(&qword_1002AADB8);
      }
      if ((a1 & 8) == 0 || (uint64_t v4 = sub_10003DAA8(), (sub_10014E8C0(v4) & 1) != 0))
      {
        if ((a1 & 2) != 0)
        {
          swift_beginAccess(a2 + 224, v5, 1LL, 0LL);
          *(_BYTE *)(a2 + 24_Block_object_dispose((const void *)(v1 - 136), 8) = 1;
          sub_1000AABA0();
        }

        else if ((a1 & 4) != 0)
        {
          sub_1000AB000();
        }
      }
    }
  }

void sub_10003EC48(uint64_t a1, uint64_t a2)
{
  char v3 = a1;
  if ((sub_10014E8C0(a1) & 1) != 0)
  {
    if ((v3 & 1) != 0)
    {
      sub_10003DD00((void (*)(void))sub_1000AABA0);
    }

    else
    {
      if ((v3 & 0x10) != 0) {
        sub_10003DB9C(&qword_1002AADC0);
      }
      if ((v3 & 8) == 0 || (uint64_t v4 = sub_10003DA54(), (sub_10014E8C0(v4) & 1) != 0))
      {
        if ((v3 & 2) != 0)
        {
          swift_beginAccess(a2 + 224, v5, 1LL, 0LL);
          *(_BYTE *)(a2 + 24_Block_object_dispose((const void *)(v1 - 136), 8) = 1;
          sub_1000AABA0();
        }

        else if ((v3 & 4) != 0)
        {
          sub_1000AB000();
        }
      }
    }
  }

uint64_t sub_10003ECE4(uint64_t a1)
{
  char v1 = a1;
  uint64_t result = sub_10014E8C0(a1);
  if ((result & 1) != 0)
  {
    if ((v1 & 1) != 0) {
      return sub_10003DC58();
    }
    if ((v1 & 0x10) != 0)
    {
      uint64_t v3 = sub_1000AB8EC();
    }

    else
    {
      if ((v1 & 8) == 0)
      {
LABEL_9:
        if ((v1 & 2) != 0) {
          return sub_1000AB830();
        }
        if ((v1 & 4) != 0) {
          return sub_1000AAD04();
        }
        return result;
      }

      uint64_t v3 = sub_10003DA00();
    }

    uint64_t result = sub_10014E8C0(v3);
    if ((result & 1) == 0) {
      return result;
    }
    goto LABEL_9;
  }

  return result;
}

uint64_t sub_10003ED4C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    swift_retain();
    static NIODeadline.now()();
    uint64_t v3 = sub_100117E80(v2);
    swift_release(v1);
    if (v3 <= 1) {
      return 1LL;
    }
    else {
      return v3;
    }
  }

  return result;
}

uint64_t sub_10003ED98()
{
  uint64_t v2 = v0;
  if (sub_1000A8B90())
  {
    char v31 = 0LL;
    sub_100041C2C();
    sub_10002A718(v0 + 40, (uint64_t)v30, 0LL);
    uint64_t v3 = sub_100083090(*(void *)(v0 + 40));
    if (v3) {
      char v31 = (char *)v3;
    }
    sub_100041C34();
    if ((*(_BYTE *)(v0 + 88) & 0xFE) == 2)
    {
LABEL_5:
      sub_100040C24();
      if (!v1) {
        SelectableEventLoop._succeededVoidFuture.setter(0LL);
      }
      uint64_t v4 = (uint64_t)v31;
    }

    else
    {
      uint64_t v6 = (void *)(v0 + 48);
      uint64_t v27 = v0;
      while (1)
      {
        uint64_t v7 = objc_autoreleasePoolPush();
        uint64_t v8 = v31;
        uint64_t v9 = swift_retain();
        uint64_t v10 = sub_10003ED4C(v9);
        char v12 = v11;
        swift_release(v8);
        sub_10004075C(v10, v12 & 1, sub_10004127C, v2, (void (*)(unint64_t *))sub_100041284, v2);
        uint64_t v13 = v7;
        if (v1) {
          break;
        }
        objc_autoreleasePoolPop(v7);
        sub_10002A718((uint64_t)v6, (uint64_t)v29, 0LL);
        sub_100041C2C();
        while (1)
        {
          sub_10003F6C8(v2, (uint64_t *)&v31);
          sub_100041C34();
          uint64_t v14 = *v6;
          uint64_t v15 = *(void *)(*v6 + 16LL);
          if (!v15) {
            break;
          }
          uint64_t v13 = (void *)swift_retain();
          unint64_t v16 = 0LL;
          uint64_t v2 = v14 + 40;
          do
          {
            if (v16 >= *(void *)(v14 + 16))
            {
              __break(1u);
              goto LABEL_31;
            }

            uint64_t v17 = *(void (**)(void))(v2 - 8);
            ++v16;
            ChannelPipeline.syncOperations.getter();
            uint64_t v8 = (char *)objc_autoreleasePoolPush();
            v17();
            objc_autoreleasePoolPop(v8);
            uint64_t v13 = (void *)sub_100024F0C();
            v2 += 16LL;
          }

          while (v15 != v16);
          swift_release(v14);
          sub_10002A718((uint64_t)v6, (uint64_t)v28, 33LL);
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
          uint64_t v19 = (void *)*v6;
          if (isUniquelyReferenced_nonNull_native)
          {
            uint64_t v20 = v19[2];
            char v21 = swift_isUniquelyReferenced_nonNull_native(*v6);
            *uint64_t v6 = v19;
            if ((v21 & 1) == 0)
            {
              sub_100032524();
              uint64_t v19 = (void *)*v6;
            }

            uint64_t v8 = (char *)(v19 + 4);
            sub_1000175B0(&qword_1002AA370);
            swift_arrayDestroy(v19 + 4, v20);
            if (v20)
            {
              uint64_t v22 = v19[2] - v20;
              if (v22 < 0) {
                goto LABEL_34;
              }
              memmove(v19 + 4, &v8[16 * v20], 16 * v22);
              void v19[2] = v22;
            }

            *uint64_t v6 = v19;
          }

          else
          {
            unint64_t v23 = v19[3];
            uint64_t v24 = _swiftEmptyArrayStorage;
            if (v23 >= 2)
            {
              uint64_t v25 = sub_1000175B0(&qword_1002AA528);
              uint64_t v24 = (void *)swift_allocObject(v25, ((8 * v23) & 0xFFFFFFFFFFFFFFF0LL) + 32, 7LL);
              size_t v26 = j__malloc_size(v24);
              _OWORD v24[2] = 0LL;
              v24[3] = 2 * ((uint64_t)(v26 - 32) / 16);
            }

            *uint64_t v6 = v24;
            sub_100024F0C();
          }

          swift_endAccess(v28);
          sub_100041C2C();
          uint64_t v2 = v27;
        }

        if ((*(_BYTE *)(v2 + 88) & 0xFE) == 2) {
          goto LABEL_5;
        }
      }

LABEL_31:
      objc_autoreleasePoolPop(v13);
      uint64_t v4 = (uint64_t)v8;
    }

    swift_release(v4);
    return sub_10003F0FC(v2);
  }

  else
  {
    __break(1u);
    sub_100041C34();
    __break(1u);
LABEL_34:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
    __break(1u);
  }

  return result;
}

    swift_bridgeObjectRelease(v25);
    uint64_t v59 = v49[7];
    uint64_t v56 = v49[9];
    uint64_t v53 = v49[11];
    uint64_t v40 = v49[13];
    BOOL v41 = v49[15];
    v49[6] = v39;
    v49[7] = v13;
    v49[8] = v54;
    v49[9] = v4;
    v49[10] = v6;
    v49[11] = v46;
    v49[12] = v14;
    v49[13] = v47;
    v49[14] = v5;
    v49[15] = v15;
    swift_bridgeObjectRelease(v41);
    swift_bridgeObjectRelease(v40);
    swift_bridgeObjectRelease(v53);
    swift_bridgeObjectRelease(v56);
    swift_bridgeObjectRelease(v59);
    unint64_t v42 = type metadata accessor for OctaneLocale();
    uint64_t inited = sub_1000CB708(v48, v50);
    if (!inited) {
      uint64_t inited = swift_initStaticObject(v42, &unk_1002A8DE8);
    }
    unint64_t v44 = v49[16];
    v49[16] = inited;
    swift_release(v44);
    if (qword_1002A8CF8 != -1) {
      swift_once(&qword_1002A8CF8, sub_10010EF80);
    }
    sub_10010F540();
  }

  return sub_100023EEC();
}

                      unint64_t v82 = 0LL;
                      uint64_t v81 = 0LL;
                      goto LABEL_32;
                    }
                  }

                  else
                  {
                    sub_1000A490C();
                  }

                  sub_100019F58(v22, v26[14]);
                  sub_10001762C(v9, 1LL, 1LL, v103);
                  sub_100087044();
                  uint64_t v106 = v105;
                  sub_10004DB00(v9, (uint64_t *)&unk_1002AFCD0);
                  sub_1000B5A64(3u);
                  uint64_t v107 = sub_1000B85BC(0x19u);
                  sub_1000B58E0(v107, v108 & 1);
                  sub_1000A4DC0(v109, v110, &qword_1002AA7C0);
                  sub_1000B6E24(v176);
                  sub_100019F58(v22, v26[14]);
                  sub_100089348(v106, 0);

                  goto LABEL_48;
                }
              }
            }
          }

          sub_10002A524();
          sub_1000A4A98();
        }
      }

      else
      {
        BOOL v29 = sub_10002A524();
        size_t v26 = v171;
      }

      char v33 = sub_1000A4C28(v29, v26[14]);
      static Date.now.getter(v33);
      sub_1000DA370();
      uint64_t v35 = v34;
      sub_1000A4BCC();
      if (v35)
      {
        BOOL v161 = *(double *)&a5;
        sub_100019F58(v26 + 6, v26[9]);
        uint64_t v36 = sub_1000B3DDC();
        unint64_t v38 = v37;
        uint64_t v40 = v172;
        char v39 = v173;
        BOOL v41 = sub_1000931DC();
        sub_100075EE8(v41, v42);
        char v43 = sub_1000D868C(v36, v38);
        sub_100056ADC();
        sub_100024F0C();
        if (v43)
        {
          unint64_t v44 = v166;
          sub_10009CCC0(v170, v168, *(void *)(v169 + 152), v40, v39, *(uint64_t *)&v161, (uint64_t)v205);
          int v166 = v44;
          if (v44)
          {
            sub_10002A524();

            sub_10009B4FC();
            goto LABEL_33;
          }

          int v169 = v221;
          unsigned int v156 = v222;
          unsigned int v165 = v223;
          unsigned int v154 = v224;
          unsigned int v151 = v226;
          unsigned int v152 = v225;
          int v149 = v228;
          int v150 = v227;
          BOOL v147 = v230;
          int v148 = v229;
          unsigned int v145 = v232;
          uint64_t v146 = v231;
          BOOL v50 = v211;
          int v155 = v213;
          int v159 = v214;
          unsigned int v160 = v212;
          uint64_t v51 = v215;
          uint64_t v52 = v217;
          int v157 = v218;
          unsigned int v158 = v216;
          int v167 = v220;
          int v168 = v233;
          int v153 = v219;
          int v162 = v209;
          unsigned int v163 = v210;
          uint64_t v53 = v208;
          uint64_t v54 = v207;
          uint64_t v55 = swift_dynamicCastClass(v207, v20);
          if (v55)
          {
            uint64_t v143 = v55;
            sub_1000A4BF4();
            swift_release();
            uint64_t v56 = v35;
            swift_retain();
            uint64_t v142 = v54;
            uint64_t v57 = v52;
            uint64_t v58 = v50;
            uint64_t v59 = (void (*)(void, void))v162;
            sub_10001EDE0();
            sub_10003574C();
            __int128 v60 = v155;
            sub_1000931C8();
            uint64_t v61 = v51;
            sub_10001DBCC();
            sub_10001FFF0();
            uint64_t v62 = v153;
            sub_10001DBCC();
            sub_100081910(v167, v169, v156, v165, v154, v152, v151, v150, v149, v148, v147, v146, v145, v168);
            int v144 = 0LL;
            int v167 = v35;
            int v168 = v62;
            int v169 = v43;
            uint64_t v63 = (uint64_t)v59;
            unsigned int v165 = v143;
            uint64_t v64 = v163;
            unint64_t v65 = v58;
            uint64_t v67 = v159;
            uint64_t v66 = v160;
            uint64_t v68 = v160;
            uint64_t v69 = v60;
            uint64_t v70 = v159;
            uint64_t v71 = v61;
            uint64_t v73 = v157;
            unint64_t v72 = v158;
            uint64_t v74 = v158;
            uint64_t v75 = v57;
            uint64_t v76 = v157;
            uint64_t v77 = v58;
            char v45 = v170;
            uint64_t v52 = v57;
            uint64_t v78 = v142;
          }

          else
          {
            uint64_t v77 = v50;
            int v144 = v53;
            char v45 = v170;
            uint64_t v68 = v151;
            unint64_t v65 = v152;
            uint64_t v70 = v149;
            uint64_t v69 = v150;
            uint64_t v74 = v147;
            uint64_t v71 = v148;
            uint64_t v78 = v54;
            uint64_t v64 = v154;
            __int128 v60 = v155;
            uint64_t v63 = v156;
            uint64_t v73 = v157;
            uint64_t v61 = v51;
            uint64_t v62 = v153;
            uint64_t v67 = v159;
            uint64_t v66 = v160;
            unint64_t v72 = v158;
            uint64_t v76 = v145;
            uint64_t v75 = v146;
          }

          v178[0] = v205[0];
          v178[1] = v205[1];
          v178[2] = v205[2];
          v178[3] = v205[3];
          v178[4] = v205[4];
          *(void *)&v178[5] = v206;
          *((void *)&v178[5] + Hasher._combine(_:)(v1 & 1) = v78;
          *(void *)&v178[6] = v144;
          *((void *)&v178[6] + Hasher._combine(_:)(v1 & 1) = v162;
          *(void *)&v178[7] = v163;
          *((void *)&v178[7] + Hasher._combine(_:)(v1 & 1) = v77;
          *(void *)&v178[8] = v66;
          *((void *)&v178[8] + Hasher._combine(_:)(v1 & 1) = v60;
          *(void *)&v178[9] = v67;
          *((void *)&v178[9] + Hasher._combine(_:)(v1 & 1) = v61;
          *(void *)&v178[10] = v72;
          *((void *)&v178[10] + Hasher._combine(_:)(v1 & 1) = v52;
          *(void *)&v178[11] = v73;
          *((void *)&v178[11] + Hasher._combine(_:)(v1 & 1) = v62;
          *(void *)&v178[12] = v167;
          *((void *)&v178[12] + Hasher._combine(_:)(v1 & 1) = v169;
          *(void *)&v178[13] = v63;
          *((void *)&v178[13] + Hasher._combine(_:)(v1 & 1) = v165;
          *(void *)&v178[14] = v64;
          *((void *)&v178[14] + Hasher._combine(_:)(v1 & 1) = v65;
          *(void *)&v178[15] = v68;
          *((void *)&v178[15] + Hasher._combine(_:)(v1 & 1) = v69;
          *(void *)&v178[16] = v70;
          *((void *)&v178[16] + Hasher._combine(_:)(v1 & 1) = v71;
          *(void *)&v178[17] = v74;
          *((void *)&v178[17] + Hasher._combine(_:)(v1 & 1) = v75;
          *(void *)&v178[18] = v76;
          *((void *)&v178[18] + Hasher._combine(_:)(v1 & 1) = v168;
          *(void *)&v178[19] = v234;
          WORD4(v178[19]) = v235;
          memcpy(v288, v178, 0x13AuLL);
          sub_1000A37C0((uint64_t *)v178);
          sub_100052684(v288, (uint64_t)v236);
          sub_10009B4FC();

          sub_1000A4B4C();
          sub_1000A39D4((uint64_t *)v178);
          unint64_t v46 = v258;
          int v167 = v255;
          int v168 = v257;
          unsigned int v165 = v256;
          LODWORD(v16sub_100019F7C(v0 + 3) = v254;
          int v162 = v244;
          int v159 = v246;
          unsigned int v160 = v245;
          int v157 = v248;
          unsigned int v158 = v247;
          int v155 = v250;
          unsigned int v156 = v249;
          int v153 = v252;
          unsigned int v154 = v251;
          unsigned int v151 = v243;
          unsigned int v152 = v253;
          int v169 = v242;
          int v149 = v240;
          int v150 = v239;
          LODWORD(v14_Block_object_dispose((const void *)(v1 - 136), 8) = v238;
          uint64_t v47 = v237;
          uint64_t v146 = v236[1];
          BOOL v147 = v236[0];
          uint64_t v48 = v241;
          uint64_t v49 = v236[2];
LABEL_23:
          unsigned int v145 = v49;
          goto LABEL_24;
        }

        a5 = *(void *)&v161;
      }

      sub_10002A524();
      uint64_t v10 = v166;
    }

    char v45 = v170;
    sub_10009CCC0(v170, v168, *(void *)(v169 + 152), v172, v173, a5, (uint64_t)v259);
    if (v10) {
      goto LABEL_33;
    }
    int v166 = 0LL;
    sub_100052684(v259, (uint64_t)v260);
    unint64_t v46 = v282;
    int v167 = v279;
    int v168 = v281;
    unsigned int v165 = v280;
    LODWORD(v16sub_100019F7C(v0 + 3) = v278;
    int v162 = v268;
    int v159 = v270;
    unsigned int v160 = v269;
    int v157 = v272;
    unsigned int v158 = v271;
    int v155 = v274;
    unsigned int v156 = v273;
    int v153 = v276;
    unsigned int v154 = v275;
    unsigned int v151 = v267;
    unsigned int v152 = v277;
    int v169 = v266;
    int v149 = v264;
    int v150 = v263;
    LODWORD(v14_Block_object_dispose((const void *)(v1 - 136), 8) = v262;
    uint64_t v47 = v261;
    uint64_t v146 = v260[1];
    BOOL v147 = v260[0];
    uint64_t v48 = v265;
    uint64_t v49 = v260[2];
    goto LABEL_23;
  }

  LOBYTE(v178[0]) = 0;
  v177[0] = 1;
  a7[3] = (uint64_t)&type metadata for LegacyInAppBuyResponse;
  a7[4] = sub_1000A2F64();
  unint64_t v30 = (void *)sub_1000A4A80((uint64_t)&unk_10027E870);
  *a7 = (uint64_t)v30;
  v30[2] = 0LL;
  v30[3] = 0LL;
  v30[4] = _swiftEmptyArrayStorage;
  char v31 = sub_1000A482C((uint64_t)v30, v178[0]);
  unint64_t v32 = sub_1000A4C80(v31, v177[0]);
  *(void *)(v32 + 112) = 0LL;
  *(void *)(v32 + 120) = 1LL;
  *(_OWORD *)(v32 + 160) = 0u;
  *(_OWORD *)(v32 + 176) = 0u;
  *(_OWORD *)(v32 + 12_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
  *(_OWORD *)(v32 + 144) = 0u;
  *(_BYTE *)(v32 + 192) = 3;
  *(void *)(v32 + 200) = 0xD000000000000011LL;
  *(void *)(v32 + 20_Block_object_dispose((const void *)(v1 - 136), 8) = 0x800000010021B500LL;
  *(void *)(v32 + 216) = 0LL;
  *(_BYTE *)(v32 + 224) = 1;
LABEL_33:
  sub_1000A4984();
}

        unint64_t v46 = sub_1000A2EB4();
        sub_1000252D0((uint64_t)&type metadata for InAppBuyRouteError, v46);
        sub_1000A47C0(v47, 7);
        sub_10002A5A4();

        return v6;
      }
    }

    else
    {
      uint64_t v28 = *(id *)((v27 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v28) {
        goto LABEL_13;
      }
    }

    sub_10003561C();
    sub_100019F7C(v49);
    goto LABEL_31;
  }

  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  char v33 = sub_100077D08();
  sub_100018F68(v33, (uint64_t)qword_1002EB9D0);
  Swift::String v34 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
  char v37 = static os_log_type_t.error.getter(v35, v36);
  if (os_log_type_enabled(v35, v37))
  {
    unint64_t v38 = (uint8_t *)sub_100019464(12LL);
    char v39 = sub_100019464(32LL);
    v49[0] = v39;
    *(_DWORD *)unint64_t v38 = 136315138;
    sub_10003574C();
    uint64_t v40 = sub_1000931DC();
    BOOL v50 = sub_1000CF360(v40, v41, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v38 + 4);
    sub_100077CA8(a2);
    _os_log_impl( (void *)&_mh_execute_header,  v35,  v37,  "Requested offer for invalid winback offer identifier %s. This may be a client error in the StoreKit framework.",  v38,  0xCu);
    swift_arrayDestroy(v39, 1LL);
    sub_10001A408(v39);
    sub_10001A408((uint64_t)v38);
  }

  else
  {

    sub_10001EDE8(a2);
  }

  return 0LL;
}

        sub_10009B4FC();
        goto LABEL_32;
      }

      goto LABEL_32;
    }

    goto LABEL_27;
  }

  if (a4 | a5 ^ 0x8000000000000000LL)
  {
    uint64_t v28 = *(void *)(a6 + 24);
    if (v28)
    {
      sub_1000D1E10( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  280LL);
      swift_retain();
      sub_100041B5C();
      if (!a3)
      {
        sub_1000D1E6C();
        sub_1000D1EA4();
      }

      char v33 = sub_1000D1E9C();
      sub_1000D1E2C(v33);
      sub_10002A4C8();
      sub_100023E9C();
      swift_retain();
      Swift::String v34 = sub_1000D1E54();
      sub_10009459C(v34, v28);
LABEL_38:
      sub_100094800();
      swift_release();
      sub_10001EDD8();
      swift_release();
      return 0LL;
    }
  }

  else
  {
    uint64_t v27 = *(void *)(a6 + 16);
    if (v27)
    {
      sub_1000D1E10( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  280LL);
      swift_retain();
      sub_100041B5C();
      if (!a3)
      {
        sub_1000D1E6C();
        sub_1000D1EA4();
      }

      char v31 = sub_1000D1E9C();
      sub_1000D1E2C(v31);
      sub_10002A4C8();
      sub_100023E9C();
      swift_retain();
      unint64_t v32 = sub_1000D1E54();
      sub_1000944E4(v32, v27);
      goto LABEL_38;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

        unint64_t v44 = sub_1000A2EB4();
        char v45 = swift_allocError(&type metadata for InAppBuyRouteError, v44, 0LL, 0LL);
        *unint64_t v46 = 7;
        swift_willThrow(v45);
        swift_release();

        return v6;
      }
    }

    else
    {
      uint64_t v28 = *(id *)((v27 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v28) {
        goto LABEL_13;
      }
    }

    swift_bridgeObjectRelease();
    sub_100019F7C(v48);
    goto LABEL_31;
  }

  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  char v33 = type metadata accessor for Logger(0LL);
  sub_100018F68(v33, (uint64_t)qword_1002EB9D0);
  Swift::String v34 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
  char v37 = static os_log_type_t.error.getter(v35, v36);
  if (os_log_type_enabled(v35, v37))
  {
    unint64_t v38 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    char v39 = swift_slowAlloc(32LL, -1LL);
    v48[0] = v39;
    *(_DWORD *)unint64_t v38 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v49 = sub_1000CF360(a1, a2, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v38 + 4);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v35,  v37,  "Requested offer for invalid winback offer identifier %s. This may be a client error in the StoreKit framework.",  v38,  0xCu);
    swift_arrayDestroy(v39, 1LL);
    swift_slowDealloc(v39, -1LL, -1LL);
    swift_slowDealloc(v38, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  return 0LL;
}

        __break(1u);
        goto LABEL_32;
      }
    }

    else
    {
      uint64_t v20 = v37;
    }

  __break(1u);
  return result;
}

      uint64_t v56 = sub_1000C8C74();
      sub_1000C8BE8(v1);
      if ((unsigned __int128)(v56 * (__int128)v61) >> 64 == (v56 * v61) >> 63)
      {
        sub_10002A580();
        return;
      }

      __break(1u);
      goto LABEL_34;
    }

    sub_1000C8C74();
    sub_1000C8BE8(v2);
    goto LABEL_31;
  }

  sub_100138558(v4);
  uint64_t v63 = 0x8000000000000000LL;
  if ((sub_1000C8C38() & 1) != 0)
  {
    if (sub_100138508() < 64)
    {
LABEL_14:
      unint64_t v38 = sub_1000C8C74();
      sub_100138564(v4);
      char v39 = v38 < v63;
      goto LABEL_17;
    }

      uint64_t v55 = sub_1000C8C74();
      sub_1000C8BE8(v1);
      if ((unsigned __int128)(v60 * (__int128)v55) >> 64 == (v60 * v55) >> 63)
      {
        sub_10002A580();
        return;
      }

      __break(1u);
      goto LABEL_34;
    }

    sub_1000C8C74();
    sub_1000C8BE8(v2);
    goto LABEL_31;
  }

  sub_100138558(v4);
  uint64_t v62 = 0x8000000000000000LL;
  if ((sub_1000C8C38() & 1) != 0)
  {
    if (sub_100138508() < 64)
    {
LABEL_14:
      char v37 = sub_1000C8C74();
      sub_100138564(v4);
      unint64_t v38 = v37 < v62;
      goto LABEL_17;
    }

  sub_10002A3D4();
}

    unsigned int v134 = (v28 - 1) & v28;
    uint64_t v135 = v27;
  }

  uint64_t v121 = 0LL;
  uint64_t v122 = 1LL;
  while (v122 < v114)
  {
    uint64_t v123 = v73[v121 + 6];
    int v124 = v73[v121 + 7];
    uint64_t v125 = v113[v121 + 6];
    unsigned int v126 = v113[v121 + 7];
    unsigned int v127 = v123 == v125 && v124 == v126;
    if (!v127 && (sub_100048720(v123, v124, v125, v126) & 1) == 0) {
      goto LABEL_196;
    }
    ++v122;
    v121 += 2LL;
    if (v114 == v122) {
      goto LABEL_188;
    }
  }

  __break(1u);
LABEL_200:
  __break(1u);
LABEL_201:
  __break(1u);
LABEL_202:
  __break(1u);
LABEL_203:
  __break(1u);
  uint64_t result = swift_release(v154);
  __break(1u);
  return result;
}

    uint64_t v8 = v18;
LABEL_32:
    if (v8 >= v3) {
      goto LABEL_41;
    }
    if (__OFSUB__(v8, v10)) {
      goto LABEL_143;
    }
    if (v8 - v10 >= v103) {
      goto LABEL_41;
    }
    if (__OFADD__(v10, v103)) {
      goto LABEL_146;
    }
    if (v10 + v103 >= v3) {
      char v33 = v3;
    }
    else {
      char v33 = v10 + v103;
    }
    if (v33 < v10) {
      goto LABEL_147;
    }
    if (v8 == v33)
    {
LABEL_41:
      Swift::String v34 = v107;
    }

    else
    {
      uint64_t v85 = (void *)(v9 + 16 * v8);
      Swift::String v34 = v107;
      do
      {
        uint64_t v86 = (uint64_t *)(v9 + 16 * v8);
        uint64_t v87 = *v86;
        uint64_t v88 = v86[1];
        uint64_t v89 = v10;
        Swift::Int v90 = v85;
        do
        {
          Swift::Int v91 = *(v90 - 2);
          uint64_t v92 = *(v90 - 1);
          uint64_t v93 = v87 == v91 && v88 == v92;
          if (v93 || (_stringCompareWithSmolCheck(_:_:expecting:)(v87, v88, v91, v92, 1LL) & 1) == 0) {
            break;
          }
          if (!v9) {
            goto LABEL_150;
          }
          uint64_t v87 = *v90;
          uint64_t v88 = v90[1];
          *(_OWORD *)Swift::Int v90 = *((_OWORD *)v90 - 1);
          *(v90 - Hasher._combine(_:)(v1 & 1) = v88;
          *(v90 - 2) = v87;
          v90 -= 2;
          ++v89;
        }

        while (v8 != v89);
        ++v8;
        v85 += 2;
      }

      while (v8 != v33);
      uint64_t v8 = v33;
    }

    if (v8 < v10) {
      goto LABEL_142;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0) {
      Swift::String v34 = sub_1001787F0(0LL, *((void *)v34 + 2) + 1LL, 1, v34);
    }
    uint64_t v36 = *((void *)v34 + 2);
    uint64_t v35 = *((void *)v34 + 3);
    char v37 = v36 + 1;
    if (v36 >= v35 >> 1) {
      Swift::String v34 = sub_1001787F0((char *)(v35 > 1), v36 + 1, 1, v34);
    }
    *((void *)v34 + 2) = v37;
    unint64_t v38 = v34 + 32;
    char v39 = &v34[16 * v36 + 32];
    *(void *)char v39 = v10;
    *((void *)v39 + Hasher._combine(_:)(v1 & 1) = v8;
    uint64_t v107 = v34;
    if (v36) {
      break;
    }
    char v37 = 1LL;
LABEL_90:
    uint64_t v3 = v105;
    if (v8 >= v105) {
      goto LABEL_110;
    }
  }

  while (1)
  {
    uint64_t v40 = v37 - 1;
    if (v37 >= 4)
    {
      char v45 = &v38[16 * v37];
      unint64_t v46 = *((void *)v45 - 8);
      uint64_t v47 = *((void *)v45 - 7);
      uint64_t v51 = __OFSUB__(v47, v46);
      uint64_t v48 = v47 - v46;
      if (v51) {
        goto LABEL_127;
      }
      BOOL v50 = *((void *)v45 - 6);
      uint64_t v49 = *((void *)v45 - 5);
      uint64_t v51 = __OFSUB__(v49, v50);
      char v43 = v49 - v50;
      unint64_t v44 = v51;
      if (v51) {
        goto LABEL_128;
      }
      uint64_t v52 = v37 - 2;
      uint64_t v53 = &v38[16 * v37 - 32];
      uint64_t v55 = *(void *)v53;
      uint64_t v54 = *((void *)v53 + 1);
      uint64_t v51 = __OFSUB__(v54, v55);
      uint64_t v56 = v54 - v55;
      if (v51) {
        goto LABEL_129;
      }
      uint64_t v51 = __OFADD__(v43, v56);
      uint64_t v57 = v43 + v56;
      if (v51) {
        goto LABEL_131;
      }
      if (v57 >= v48)
      {
        uint64_t v75 = &v38[16 * v40];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        uint64_t v51 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v51) {
          goto LABEL_137;
        }
        uint64_t v68 = v43 < v78;
        goto LABEL_79;
      }
    }

    else
    {
      if (v37 != 3)
      {
        uint64_t v69 = *((void *)v34 + 4);
        uint64_t v70 = *((void *)v34 + 5);
        uint64_t v51 = __OFSUB__(v70, v69);
        uint64_t v62 = v70 - v69;
        uint64_t v63 = v51;
        goto LABEL_73;
      }

      unint64_t v42 = *((void *)v34 + 4);
      BOOL v41 = *((void *)v34 + 5);
      uint64_t v51 = __OFSUB__(v41, v42);
      char v43 = v41 - v42;
      unint64_t v44 = v51;
    }

    if ((v44 & 1) != 0) {
      goto LABEL_130;
    }
    uint64_t v52 = v37 - 2;
    uint64_t v58 = &v38[16 * v37 - 32];
    __int128 v60 = *(void *)v58;
    uint64_t v59 = *((void *)v58 + 1);
    uint64_t v61 = __OFSUB__(v59, v60);
    uint64_t v62 = v59 - v60;
    uint64_t v63 = v61;
    if (v61) {
      goto LABEL_132;
    }
    uint64_t v64 = &v38[16 * v40];
    uint64_t v66 = *(void *)v64;
    unint64_t v65 = *((void *)v64 + 1);
    uint64_t v51 = __OFSUB__(v65, v66);
    uint64_t v67 = v65 - v66;
    if (v51) {
      goto LABEL_134;
    }
    if (__OFADD__(v62, v67)) {
      goto LABEL_136;
    }
    if (v62 + v67 >= v43)
    {
      uint64_t v68 = v43 < v67;
LABEL_79:
      if (v68) {
        uint64_t v40 = v52;
      }
      goto LABEL_81;
    }

                swift_release(v2);
                return _swiftEmptyDictionarySingleton;
              }
            }
          }
        }
      }
    }

                swift_release(v2);
                return _swiftEmptyDictionarySingleton;
              }
            }
          }
        }
      }
    }

        uint64_t v54 = v9[8];
        uint64_t v55 = (char *)v7 + v54;
        uint64_t v56 = (char *)v8 + v54;
        uint64_t v57 = *(void *)v56;
        v55[8] = v56[8];
        *(void *)uint64_t v55 = v57;
        uint64_t v58 = v9[9];
        uint64_t v59 = (char *)v7 + v58;
        __int128 v60 = (char *)v8 + v58;
        uint64_t v61 = *(void *)v60;
        v59[8] = v60[8];
        *(void *)uint64_t v59 = v61;
        uint64_t v62 = v9[10];
        uint64_t v63 = (char *)v7 + v62;
        uint64_t v64 = (char *)v8 + v62;
        unint64_t v65 = type metadata accessor for UUID(0LL);
        uint64_t v66 = *(void *)(v65 - 8);
        uint64_t v67 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48);
        uint64_t v68 = v67(v63, 1LL, v65);
        uint64_t v69 = v67(v64, 1LL, v65);
        if (v68)
        {
          if (!v69)
          {
            (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v63, v64, v65);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v63, 0LL, 1LL, v65);
LABEL_37:
            a3 = v77;
            goto LABEL_38;
          }
        }

        else
        {
          if (!v69)
          {
            (*(void (**)(char *, char *, uint64_t))(v66 + 24))(v63, v64, v65);
            goto LABEL_37;
          }

          (*(void (**)(char *, uint64_t))(v66 + 8))(v63, v65);
        }

        uint64_t v70 = sub_1000175B0(&qword_1002B9B18);
        memcpy(v63, v64, *(void *)(*(void *)(v70 - 8) + 64LL));
        goto LABEL_37;
      }

      sub_100047E84((uint64_t)v7);
    }

    *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
    goto LABEL_23;
  }

  if (v13)
  {
LABEL_7:
    uint64_t v15 = sub_1000175B0(&qword_1002BA218);
    memcpy(v7, v8, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_38;
  }

  uint64_t v14 = v8[1];
  uint64_t v76 = a3;
  if (v14 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
  }

  else
  {
    uint64_t v18 = *v8;
    sub_10003AA88(*v8, v14);
    void *v7 = v18;
    v7[1] = v14;
  }

  v7[2] = v8[2];
  v7[3] = v8[3];
  void v7[4] = v8[4];
  v7[5] = v8[5];
  uint64_t v19 = v9[7];
  uint64_t v20 = (char *)v7 + v19;
  char v21 = (char *)v8 + v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_1000175B0(&qword_1002B9A70);
  unint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 3LL, v22))
  {
    uint64_t v24 = type metadata accessor for ClientOverride.Server(0LL);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    uint64_t v25 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16LL))(v20, v21, v25);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0LL, 3LL, v22);
  }

  size_t v26 = v9[8];
  uint64_t v27 = (char *)v7 + v26;
  uint64_t v28 = (char *)v8 + v26;
  BOOL v29 = *(void *)v28;
  v27[8] = v28[8];
  *(void *)uint64_t v27 = v29;
  unint64_t v30 = v9[9];
  char v31 = (char *)v7 + v30;
  unint64_t v32 = (char *)v8 + v30;
  char v33 = *(void *)v32;
  v31[8] = v32[8];
  *(void *)char v31 = v33;
  Swift::String v34 = v9[10];
  uint64_t v35 = (char *)v7 + v34;
  uint64_t v36 = (char *)v8 + v34;
  char v37 = type metadata accessor for UUID(0LL);
  unint64_t v38 = *(void *)(v37 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1LL, v37))
  {
    char v39 = sub_1000175B0(&qword_1002B9B18);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v35, v36, v37);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0LL, 1LL, v37);
  }

  a3 = v76;
  (*(void (**)(uint64_t *, void, uint64_t, int *))(v10 + 56))(v7, 0LL, 1LL, v9);
LABEL_38:
  uint64_t v71 = *(int *)(a3 + 32);
  unint64_t v72 = (void *)((char *)a1 + v71);
  uint64_t v73 = (void *)((char *)a2 + v71);
  *unint64_t v72 = *v73;
  v72[1] = v73[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

        uint64_t v54 = v9[8];
        uint64_t v55 = (char *)v7 + v54;
        uint64_t v56 = (char *)v8 + v54;
        uint64_t v57 = *(void *)v56;
        v55[8] = v56[8];
        *(void *)uint64_t v55 = v57;
        uint64_t v58 = v9[9];
        uint64_t v59 = (char *)v7 + v58;
        __int128 v60 = (char *)v8 + v58;
        uint64_t v61 = *(void *)v60;
        v59[8] = v60[8];
        *(void *)uint64_t v59 = v61;
        uint64_t v62 = v9[10];
        uint64_t v63 = (char *)v7 + v62;
        uint64_t v64 = (char *)v8 + v62;
        unint64_t v65 = type metadata accessor for UUID(0LL);
        uint64_t v66 = *(void *)(v65 - 8);
        uint64_t v67 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48);
        uint64_t v68 = v67(v63, 1LL, v65);
        uint64_t v69 = v67(v64, 1LL, v65);
        if (v68)
        {
          if (!v69)
          {
            (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v63, v64, v65);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v63, 0LL, 1LL, v65);
LABEL_37:
            a3 = v81;
            goto LABEL_38;
          }
        }

        else
        {
          if (!v69)
          {
            (*(void (**)(char *, char *, uint64_t))(v66 + 24))(v63, v64, v65);
            goto LABEL_37;
          }

          (*(void (**)(char *, uint64_t))(v66 + 8))(v63, v65);
        }

        uint64_t v70 = sub_1000175B0(&qword_1002B9B18);
        memcpy(v63, v64, *(void *)(*(void *)(v70 - 8) + 64LL));
        goto LABEL_37;
      }

      sub_100047E84((uint64_t)v7);
    }

    *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
    goto LABEL_23;
  }

  if (v13)
  {
LABEL_7:
    uint64_t v15 = sub_1000175B0(&qword_1002BA218);
    memcpy(v7, v8, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_38;
  }

  uint64_t v14 = v8[1];
  double v80 = a3;
  if (v14 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
  }

  else
  {
    uint64_t v18 = *v8;
    sub_10003AA88(*v8, v14);
    void *v7 = v18;
    v7[1] = v14;
  }

  v7[2] = v8[2];
  v7[3] = v8[3];
  void v7[4] = v8[4];
  v7[5] = v8[5];
  uint64_t v19 = v9[7];
  uint64_t v20 = (char *)v7 + v19;
  char v21 = (char *)v8 + v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_1000175B0(&qword_1002B9A70);
  unint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 3LL, v22))
  {
    uint64_t v24 = type metadata accessor for ClientOverride.Server(0LL);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    uint64_t v25 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16LL))(v20, v21, v25);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0LL, 3LL, v22);
  }

  size_t v26 = v9[8];
  uint64_t v27 = (char *)v7 + v26;
  uint64_t v28 = (char *)v8 + v26;
  BOOL v29 = *(void *)v28;
  v27[8] = v28[8];
  *(void *)uint64_t v27 = v29;
  unint64_t v30 = v9[9];
  char v31 = (char *)v7 + v30;
  unint64_t v32 = (char *)v8 + v30;
  char v33 = *(void *)v32;
  v31[8] = v32[8];
  *(void *)char v31 = v33;
  Swift::String v34 = v9[10];
  uint64_t v35 = (char *)v7 + v34;
  uint64_t v36 = (char *)v8 + v34;
  char v37 = type metadata accessor for UUID(0LL);
  unint64_t v38 = *(void *)(v37 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1LL, v37))
  {
    char v39 = sub_1000175B0(&qword_1002B9B18);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v35, v36, v37);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0LL, 1LL, v37);
  }

  a3 = v80;
  (*(void (**)(uint64_t *, void, uint64_t, int *))(v10 + 56))(v7, 0LL, 1LL, v9);
LABEL_38:
  uint64_t v71 = a3[6];
  unint64_t v72 = (void *)((char *)a1 + v71);
  uint64_t v73 = (void *)((char *)a2 + v71);
  *unint64_t v72 = *v73;
  v72[1] = v73[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v74 = a3[7];
  uint64_t v75 = (char *)a1 + v74;
  uint64_t v76 = (char *)a2 + v74;
  uint64_t v77 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v77 - 8) + 24LL))(v75, v76, v77);
  return a1;
}

        uint64_t v55 = v10[8];
        uint64_t v56 = (char *)v8 + v55;
        uint64_t v57 = (char *)v9 + v55;
        uint64_t v58 = *(void *)v57;
        v56[8] = v57[8];
        *(void *)uint64_t v56 = v58;
        uint64_t v59 = v10[9];
        __int128 v60 = (char *)v8 + v59;
        uint64_t v61 = (char *)v9 + v59;
        uint64_t v62 = *(void *)v61;
        v60[8] = v61[8];
        *(void *)__int128 v60 = v62;
        uint64_t v63 = v10[10];
        uint64_t v64 = (char *)v8 + v63;
        unint64_t v65 = (char *)v9 + v63;
        uint64_t v66 = type metadata accessor for UUID(0LL);
        uint64_t v67 = *(void *)(v66 - 8);
        uint64_t v68 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 48);
        uint64_t v69 = v68(v64, 1LL, v66);
        uint64_t v70 = v68(v65, 1LL, v66);
        if (v69)
        {
          if (!v70)
          {
            (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v64, v65, v66);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v64, 0LL, 1LL, v66);
LABEL_37:
            a3 = v78;
            goto LABEL_38;
          }
        }

        else
        {
          if (!v70)
          {
            (*(void (**)(char *, char *, uint64_t))(v67 + 24))(v64, v65, v66);
            goto LABEL_37;
          }

          (*(void (**)(char *, uint64_t))(v67 + 8))(v64, v66);
        }

        uint64_t v71 = sub_1000175B0(&qword_1002B9B18);
        memcpy(v64, v65, *(void *)(*(void *)(v71 - 8) + 64LL));
        goto LABEL_37;
      }

      sub_100047E84((uint64_t)v8);
    }

    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_23;
  }

  if (v14)
  {
LABEL_7:
    unint64_t v16 = sub_1000175B0(&qword_1002BA218);
    memcpy(v8, v9, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_38;
  }

  uint64_t v15 = v9[1];
  uint64_t v77 = a3;
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }

  else
  {
    uint64_t v19 = *v9;
    sub_10003AA88(*v9, v15);
    *uint64_t v8 = v19;
    v8[1] = v15;
  }

  _OWORD v8[2] = v9[2];
  v8[3] = v9[3];
  void v8[4] = v9[4];
  v8[5] = v9[5];
  uint64_t v20 = v10[7];
  char v21 = (char *)v8 + v20;
  uint64_t v22 = (char *)v9 + v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v23 = sub_1000175B0(&qword_1002B9A70);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 3LL, v23))
  {
    uint64_t v25 = type metadata accessor for ClientOverride.Server(0LL);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
  }

  else
  {
    size_t v26 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16LL))(v21, v22, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0LL, 3LL, v23);
  }

  uint64_t v27 = v10[8];
  uint64_t v28 = (char *)v8 + v27;
  BOOL v29 = (char *)v9 + v27;
  unint64_t v30 = *(void *)v29;
  v28[8] = v29[8];
  *(void *)uint64_t v28 = v30;
  char v31 = v10[9];
  unint64_t v32 = (char *)v8 + v31;
  char v33 = (char *)v9 + v31;
  Swift::String v34 = *(void *)v33;
  v32[8] = v33[8];
  *(void *)unint64_t v32 = v34;
  uint64_t v35 = v10[10];
  uint64_t v36 = (char *)v8 + v35;
  char v37 = (char *)v9 + v35;
  unint64_t v38 = type metadata accessor for UUID(0LL);
  char v39 = *(void *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1LL, v38))
  {
    uint64_t v40 = sub_1000175B0(&qword_1002B9B18);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v36, v37, v38);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0LL, 1LL, v38);
  }

  a3 = v77;
  (*(void (**)(uint64_t *, void, uint64_t, int *))(v11 + 56))(v8, 0LL, 1LL, v10);
LABEL_38:
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  unint64_t v72 = a3[7];
  uint64_t v73 = (void *)(a1 + v72);
  uint64_t v74 = (void *)(a2 + v72);
  *uint64_t v73 = *v74;
  v73[1] = v74[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10003F0FC(uint64_t a1)
{
  uint64_t v1 = _swiftEmptyArrayStorage;
  uint64_t v51 = _swiftEmptyArrayStorage;
  uint64_t v2 = (uint64_t *)(a1 + 40);
  unint64_t v46 = (_BYTE *)(a1 + 32);
  swift_beginAccess(a1 + 32, v50, 1LL, 0LL);
  swift_beginAccess(v2, v49, 0LL, 0LL);
  unint64_t v47 = 0LL;
  do
  {
    if (swift_isUniquelyReferenced_nonNull_native(v1))
    {
      sub_10004129C(0LL, v1[2]);
    }

    else
    {
      uint64_t v51 = sub_100195CD4(0LL, v1[3] >> 1);
      swift_release(v1);
    }

    Lock.lock()();
    *unint64_t v46 = 1;
    specialized ContiguousArray.reserveCapacity(_:)(*(void *)(*v2 + 16));
    while (1)
    {
      swift_beginAccess(v2, v48, 33LL, 0LL);
      uint64_t v3 = *v2;
      uint64_t v4 = *(void *)(*v2 + 16);
      if (!v4) {
        break;
      }
      uint64_t v5 = v3 + 32;
      uint64_t v6 = *(void *)(v3 + 32);
      uint64_t v7 = v4 - 1;
      if (v4 == 1 || (uint64_t v8 = *(void *)(v5 + 8 * v7), v6 == v8))
      {
        swift_retain();
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
        uint64_t *v2 = v3;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t isUniquelyReferenced_nonNull_native = sub_1000F2BE4(v3);
          uint64_t v3 = isUniquelyReferenced_nonNull_native;
          uint64_t *v2 = isUniquelyReferenced_nonNull_native;
        }

        uint64_t v19 = *(void *)(v3 + 16);
        if (!v19) {
          goto LABEL_44;
        }
        uint64_t v20 = v19 - 1;
        uint64_t v21 = *(void *)(v3 + 8 * v20 + 32);
        *(void *)(v3 + 16) = v20;
        specialized ContiguousArray._endMutation()(isUniquelyReferenced_nonNull_native);
        uint64_t v22 = v21;
LABEL_22:
        swift_release(v22);
        goto LABEL_23;
      }

      type metadata accessor for ScheduledTask();
      char v9 = static ScheduledTask.< infix(_:_:)(v6, v8);
      uint64_t v10 = *(void *)(v5 + 8 * v7);
      if ((v9 & 1) == 0)
      {
        if ((static ScheduledTask.< infix(_:_:)(v6, *(void *)(v5 + 8 * v7)) & 1) != 0) {
          goto LABEL_52;
        }
        swift_retain();
        swift_retain();
        char v26 = swift_isUniquelyReferenced_nonNull_native(v3);
        uint64_t *v2 = v3;
        if ((v26 & 1) == 0)
        {
          uint64_t v3 = sub_1000F2BE4(v3);
          uint64_t *v2 = v3;
        }

        if (!*(void *)(v3 + 16)) {
          goto LABEL_46;
        }
        uint64_t v27 = *(void *)(v3 + 32);
        swift_retain();
        uint64_t v28 = swift_release(v27);
        *(void *)(v3 + 32) = v10;
        specialized ContiguousArray._endMutation()(v28);
        swift_release(v10);
        uint64_t v29 = *v2;
        if (!*(void *)(*v2 + 16)) {
          goto LABEL_47;
        }
        uint64_t v30 = swift_isUniquelyReferenced_nonNull_native(*v2);
        uint64_t *v2 = v29;
        if ((v30 & 1) == 0)
        {
          uint64_t v30 = sub_1000F2BE4(v29);
          uint64_t v29 = v30;
          uint64_t *v2 = v30;
        }

        uint64_t v31 = *(void *)(v29 + 16);
        if (!v31) {
          goto LABEL_50;
        }
        uint64_t v32 = v31 - 1;
        uint64_t v33 = *(void *)(v29 + 8 * v32 + 32);
        *(void *)(v29 + 16) = v32;
        specialized ContiguousArray._endMutation()(v30);
        uint64_t v22 = v33;
        goto LABEL_22;
      }

      swift_retain();
      swift_retain();
      char v11 = swift_isUniquelyReferenced_nonNull_native(v3);
      uint64_t *v2 = v3;
      if ((v11 & 1) == 0)
      {
        uint64_t v3 = sub_1000F2BE4(v3);
        uint64_t *v2 = v3;
      }

      if (!*(void *)(v3 + 16)) {
        goto LABEL_45;
      }
      uint64_t v12 = swift_release(*(void *)(v3 + 32));
      *(void *)(v3 + 32) = v10;
      specialized ContiguousArray._endMutation()(v12);
      uint64_t v13 = *v2;
      if (!*(void *)(*v2 + 16)) {
        goto LABEL_48;
      }
      uint64_t v14 = swift_isUniquelyReferenced_nonNull_native(*v2);
      uint64_t *v2 = v13;
      if ((v14 & 1) == 0)
      {
        uint64_t v14 = sub_1000F2BE4(v13);
        uint64_t v13 = v14;
        uint64_t *v2 = v14;
      }

      uint64_t v15 = *(void *)(v13 + 16);
      if (!v15) {
        goto LABEL_49;
      }
      uint64_t v16 = v15 - 1;
      uint64_t v17 = *(void *)(v13 + 8 * v16 + 32);
      *(void *)(v13 + 16) = v16;
      specialized ContiguousArray._endMutation()(v14);
      swift_release(v17);
      sub_1001A9A2C(0LL);
LABEL_23:
      swift_endAccess(v48);
      uint64_t v23 = swift_retain();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v23);
      uint64_t v24 = v51[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v24);
      uint64_t v25 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v6);
      specialized ContiguousArray._endMutation()(v25);
      swift_release(v6);
    }

    swift_endAccess(v48);
    Lock.unlock()();
    Swift::String v34 = v51;
    uint64_t v35 = v51[2];
    if (v35)
    {
      swift_retain();
      unint64_t v36 = 0LL;
      while (v36 < v34[2])
      {
        uint64_t v37 = v34[v36++ + 4];
        unint64_t v38 = sub_100029E1C();
        uint64_t v39 = swift_allocError(&type metadata for EventLoopError, v38, 0LL, 0LL);
        _BYTE *v40 = 2;
        BOOL v41 = *(void (**)(uint64_t))(v37 + 32);
        swift_retain();
        v41(v39);
        swift_errorRelease(v39);
        swift_release(v37);
        if (v35 == v36)
        {
          swift_release(v34);
          goto LABEL_38;
        }
      }

      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }

LABEL_38:
    uint64_t v1 = v51;
    uint64_t v42 = v51[2];
    if (!v42) {
      break;
    }
  }

  while (v47++ < 0x3E7);
  if (!v42)
  {
    *(_BYTE *)(a1 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = 3;
    return swift_release(v1);
  }

  __break(1u);
}

      swift_bridgeObjectRelease();
      uint64_t v2 = 0LL;
      uint64_t v3 = v16;
LABEL_41:
      sub_100018F04(v3);
      return v2;
    }

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }

  *(void *)(v55 + 16) = 0LL;
  *(void *)(v55 + 24) = 0LL;
  *(void *)(v55 + 32) = v57;
  *(_DWORD *)(v55 + 40) = (_DWORD)a1;
  *(void *)a2 = v55;
  *((void *)a2 + Hasher._combine(_:)(v1 & 1) = v34;
  a2[16] = 2;
  *(_OWORD *)(a2 + 24) = v56;
  *((void *)a2 + 5) = v4;
  *((void *)a2 + 6) = inited;
  a2[62] = BYTE6(v15);
  *((_WORD *)a2 + 30) = WORD2(v15);
  *((_DWORD *)a2 + 14) = v15;
  sub_10002A580();
}

  uint64_t v75 = sub_10014163C();
  sub_10014160C((uint64_t)v37);
  uint64_t result = v104 + v96;
  if (!__OFADD__(v104, v96))
  {
    uint64_t v77 = ByteBuffer.getSlice(at:length:)(result, v75, v95, v103, v94);
    sub_10014160C((uint64_t)v99);
    return v77;
  }

  __break(1u);
  return result;
}

  sub_100019390();
LABEL_39:
  sub_100013858();
}

LABEL_51:
  __break(1u);
LABEL_52:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000033LL,  0x80000001002193E0LL,  "ASOctaneSupportXPCService/Heap.swift",  36LL,  2LL);
  __break(1u);
  return result;
}

            sub_100029DF4(v21);
            Swift::String v34 = sub_100029C98();
            uint64_t v17 = swift_allocError(&type metadata for ChannelError, v34, 0LL, 0LL);
            *(void *)uint64_t v35 = 11LL;
            *(_BYTE *)(v35 + _Block_object_dispose((const void *)(v1 - 136), 8) = 3;
            swift_willThrow(v17);
            if (!a3)
            {
LABEL_54:
              sub_100029DF4(v12);
              return swift_errorRelease(v17);
            }

            goto LABEL_52;
          }
        }

        else
        {
          uint64_t v21 = 0xF000000000000007LL;
          if ((_DWORD)v20) {
            goto LABEL_16;
          }
        }

        if ((~v21 & 0xF000000000000007LL) == 0)
        {
          if ((a4 & 1) != 0) {
            uint64_t v31 = 13;
          }
          else {
            uint64_t v31 = 12;
          }
          swift_retain();
          sub_100150908(0LL, v31);
          goto LABEL_48;
        }

        if (!(v21 >> 62))
        {
          if ((a4 & 1) != 0) {
            uint64_t v33 = 13;
          }
          else {
            uint64_t v33 = 12;
          }
          swift_retain();
          sub_100150908(0LL, v33);
          sub_100029DF4(v21);
          goto LABEL_48;
        }

        goto LABEL_51;
      }

      if (a3)
      {
        uint64_t v29 = sub_100029C98();
        uint64_t v17 = swift_allocError(&type metadata for ChannelError, v29, 0LL, 0LL);
        *(void *)uint64_t v30 = a1;
        *(_BYTE *)(v30 + _Block_object_dispose((const void *)(v1 - 136), 8) = 1;
        swift_retain();
LABEL_52:
        uint64_t v27 = v17;
        goto LABEL_53;
      }
    }

    else if (a3)
    {
      char v26 = sub_100029C98();
      uint64_t v27 = swift_allocError(&type metadata for ChannelError, v26, 0LL, 0LL);
      uint64_t v17 = v27;
      *(void *)uint64_t v28 = 10LL;
      *(_BYTE *)(v28 + _Block_object_dispose((const void *)(v1 - 136), 8) = 3;
LABEL_53:
      swift_errorRetain(v27);
      sub_100098A70(v17, 1LL, a3);
      swift_errorRelease(v17);
      goto LABEL_54;
    }

    return sub_100029DF4(v12);
  }

  if (a3)
  {
    uint64_t v19 = sub_100029C98();
    uint64_t v15 = swift_allocError(&type metadata for ChannelError, v19, 0LL, 0LL);
    uint64_t v17 = v15;
    uint64_t v18 = 12LL;
    goto LABEL_9;
  }

  return result;
}

void sub_10003F598(uint64_t a1)
{
  *(_BYTE *)(a1 + 32) = 1;
  Lock.unlock()();
}

void sub_10003F5EC(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_10003F62C()
{
  return j__swift_release(v1);
}

uint64_t sub_10003F6C8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 40;
  swift_beginAccess(a1 + 40, v25, 0LL, 0LL);
  if (*(void *)(*(void *)(a1 + 40) + 16LL))
  {
    uint64_t v21 = a2;
    static NIODeadline.now()();
    unint64_t v6 = v5;
    uint64_t v7 = (uint64_t *)(a1 + 48);
    swift_beginAccess(a1 + 48, v24, 0LL, 0LL);
    for (uint64_t i = *(void *)(a1 + 48);
          *(void *)(i + 16) < *(void *)(i + 24) >> 1 && *(void *)(*(void *)v4 + 16LL);
          uint64_t i = *v7)
    {
      uint64_t v9 = *(void *)(*(void *)v4 + 32LL);
      if (sub_100117E80(v6) > 0)
      {
        uint64_t v19 = *v21;
        uint64_t *v21 = v9;
        swift_retain();
        goto LABEL_13;
      }

      swift_beginAccess(v4, v23, 33LL, 0LL);
      swift_retain();
      sub_1001AA10C(0LL);
      uint64_t v11 = v10;
      swift_endAccess(v23);
      swift_release(v11);
      uint64_t v12 = *(void *)(v9 + 16);
      uint64_t v13 = *(void *)(v9 + 24);
      uint64_t v14 = swift_allocObject(&unk_100277AD0, 32LL, 7LL);
      *(void *)(v14 + 16) = v12;
      *(void *)(v14 + 24) = v13;
      swift_beginAccess(a1 + 48, v23, 33LL, 0LL);
      uint64_t v15 = *v7;
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v15);
      uint64_t *v7 = v15;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100032524();
        uint64_t v15 = *v7;
      }

      unint64_t v17 = *(void *)(v15 + 16);
      if (v17 >= *(void *)(v15 + 24) >> 1)
      {
        sub_100032524();
        uint64_t v15 = *v7;
      }

      *(void *)(v15 + 16) = v17 + 1;
      uint64_t v18 = v15 + 16 * v17;
      *(void *)(v18 + 32) = sub_1000413B8;
      *(void *)(v18 + 40) = v14;
      swift_endAccess(v23);
      swift_release(v9);
    }
  }

  else
  {
    uint64_t v19 = *a2;
    *a2 = 0LL;
LABEL_13:
    swift_release(v19);
  }

  uint64_t result = swift_beginAccess(a1 + 48, v23, 0LL, 0LL);
  if (!*(void *)(*(void *)(a1 + 48) + 16LL))
  {
    uint64_t result = swift_beginAccess(a1 + 32, v22, 1LL, 0LL);
    *(_BYTE *)(a1 + 32) = 0;
  }

  return result;
}

void sub_10003F8F8(void (*a1)(void))
{
}

void sub_10003F914()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  unint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v27 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10001DAD0();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_10001DAD0();
  uint64_t v15 = v14 - v13;
  if (sub_100041B84())
  {
    uint64_t v16 = (void *)sub_100019310((uint64_t)&unk_100277B70, 48LL);
    void v16[2] = v0;
    v16[3] = v6;
    v16[4] = v4;
    v16[5] = v2;
    uint64_t v28 = v16;
    unint64_t v17 = sub_100041B10((uint64_t)sub_1000169C8);
    sub_100041B08();
    v6;
    uint64_t v18 = sub_10002A4C8();
    static DispatchQoS.unspecified.getter(v18);
    sub_100041C00((uint64_t)_swiftEmptyArrayStorage);
    sub_1000175B0(&qword_1002A9118);
    unint64_t v19 = sub_100041C08();
    sub_100041AA0(v19);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v15, v10, v17);
    _Block_release(v17);
    sub_100041BB4(*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v15, v11);
LABEL_5:
    swift_release(v28);
    sub_10002A580();
    return;
  }

  uint64_t v26 = v2;
  sub_100041B08();
  ChannelPipeline.syncOperations.getter();
  Lock.lock()();
  if (*(_BYTE *)(v0 + 89))
  {
    Lock.unlock()();
    sub_100024F0C();
    swift_release(v0);
    uint64_t v20 = sub_100019310((uint64_t)&unk_100277AF8, 32LL);
    *(void *)(v20 + 16) = v4;
    *(void *)(v20 + 24) = v2;
    uint64_t v28 = (void *)v20;
    uint64_t v21 = sub_100041B10((uint64_t)sub_1000169C8);
    uint64_t v22 = sub_10002A4C8();
    static DispatchQoS.unspecified.getter(v22);
    sub_100041C00((uint64_t)_swiftEmptyArrayStorage);
    sub_1000175B0(&qword_1002A9118);
    unint64_t v23 = sub_100041C08();
    sub_100041AA0(v23);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v15, v10, v21);
    _Block_release(v21);
    sub_100041BB4(*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v15, v11);
    goto LABEL_5;
  }

  *(_BYTE *)(v0 + 89) = 1;
  Lock.unlock()();
  sub_100024F0C();
  swift_release(v0);
  uint64_t v24 = (void *)sub_100019310((uint64_t)&unk_100277B48, 48LL);
  _OWORD v24[2] = v0;
  v24[3] = v6;
  void v24[4] = v4;
  v24[5] = v26;
  sub_100041B08();
  id v25 = v6;
  sub_100041B5C();
  SelectableEventLoop.execute(_:)((uint64_t)sub_1000413E4, (uint64_t)v24);
  sub_100041A88((uint64_t)v24);
}

uint64_t sub_10003FBE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v29 = a3;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v28 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v26 = *(void *)(v12 - 8);
  uint64_t v27 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(void *)a1;
  char v16 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a2 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = 2;
  SelectableEventLoop.execute(_:)((uint64_t)debugOnly(_:), 0LL);
  uint64_t v17 = *(void *)(a2 + 80);
  swift_retain(v17);
  Lock.lock()();
  *(_BYTE *)(a2 + 89) = 2;
  Lock.unlock()();
  swift_release(v17);
  uint64_t v18 = swift_allocObject(&unk_100277BE8, 41LL, 7LL);
  *(void *)(v18 + 16) = a4;
  *(void *)(v18 + 24) = a5;
  *(void *)(v18 + 32) = v15;
  *(_BYTE *)(v18 + 40) = v16;
  aBlock[4] = sub_1000419BC;
  uint64_t v32 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000169C8;
  aBlock[3] = &unk_100277C00;
  unint64_t v19 = _Block_copy(aBlock);
  swift_retain(a5);
  uint64_t v20 = sub_1000419E4(v15, v16);
  static DispatchQoS.unspecified.getter(v20);
  uint64_t v30 = _swiftEmptyArrayStorage;
  unint64_t v21 = sub_100025C10();
  uint64_t v22 = sub_1000175B0(&qword_1002A9118);
  unint64_t v23 = sub_100025C50();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v22, v23, v9, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v11, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v27);
  return swift_release(v32);
}

uint64_t sub_10003FE00(void (*a1)(uint64_t, uint64_t))
{
  unint64_t v2 = sub_100029E1C();
  uint64_t v3 = swift_allocError(&type metadata for EventLoopError, v2, 0LL, 0LL);
  _BYTE *v4 = 2;
  a1(v3, 1LL);
  return swift_errorRelease(v3);
}

uint64_t sub_10003FE5C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(_BYTE *)(a1 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = 1;
  uint64_t v8 = *(void *)(a1 + 80);
  swift_retain(v8);
  Lock.lock()();
  Lock.unlock()();
  swift_release(v8);
  uint64_t v9 = sub_100041498(a1, *(void *)(a1 + 16));
  uint64_t v10 = (void *)swift_allocObject(&unk_100277BC0, 48LL, 7LL);
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  v10[5] = a4;
  swift_retain(v10);
  swift_retain(v9);
  swift_retain(a1);
  id v11 = a2;
  swift_retain(a4);
  sub_1000FEED0();
  swift_release(v9);
  return swift_release(v10);
}

void sub_10003FF2C(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v1 + 80);
  sub_10002A4C8();
  ChannelPipeline.syncOperations.getter();
  Lock.lock()();
  int v5 = *(unsigned __int8 *)(v2 + 89);
  if ((v5 - 3) < 2)
  {
    Lock.unlock()();
    sub_100024F0C();
    uint64_t v6 = v2;
LABEL_8:
    swift_release(v6);
    return;
  }

  if (v5 == 2)
  {
    *(_BYTE *)(v2 + 89) = 3;
    Lock.unlock()();
    sub_100024F0C();
    sub_10001EDD8();
    if ((a1 & 1) != 0) {
      pthread_join(*(pthread_t *)(*(void *)(v2 + 24) + 32LL), 0LL);
    }
    ChannelPipeline.syncOperations.getter();
    Lock.lock()();
    if (*(_BYTE *)(v2 + 89) == 3)
    {
      *(_BYTE *)(v2 + 89) = 4;
      Lock.unlock()();
      uint64_t v6 = v4;
      goto LABEL_8;
    }

    __break(1u);
  }

  __break(1u);
}

void SelectableEventLoop.shutdownGracefully(queue:_:)()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10001DAD0();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_10001DAD0();
  uint64_t v14 = v13 - v12;
  if (*(_BYTE *)(v0 + 64) == 1)
  {
    uint64_t v15 = (void *)sub_100019310((uint64_t)&unk_1002778F8, 40LL);
    void v15[2] = v0;
    v15[3] = v4;
    v15[4] = v2;
    ChannelPipeline.syncOperations.getter();
    sub_100041B08();
    sub_10003F914();
    sub_100041A88((uint64_t)v15);
  }

  else
  {
    uint64_t v16 = sub_100019310((uint64_t)&unk_1002778A8, 32LL);
    *(void *)(v16 + 16) = v4;
    *(void *)(v16 + 24) = v2;
    v21[5] = sub_100041010;
    uint64_t v22 = v16;
    v21[1] = _NSConcreteStackBlock;
    __int128 v21[2] = 1107296256LL;
    uint64_t v17 = sub_100041B10((uint64_t)sub_1000169C8);
    uint64_t v18 = sub_100041B08();
    static DispatchQoS.unspecified.getter(v18);
    unint64_t v19 = sub_100041C00((uint64_t)_swiftEmptyArrayStorage);
    sub_1000175B0(&qword_1002A9118);
    unint64_t v20 = sub_100041C08();
    dispatch thunk of SetAlgebra.init<A>(_:)(v21, v0, v20, v5, v19);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v9, v17);
    _Block_release(v17);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v14, v10);
    swift_release(v22);
    sub_10002A580();
  }

uint64_t sub_1000401A8(uint64_t a1, char a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  if ((a2 & 1) == 0) {
    return a4(0LL);
  }
  swift_errorRetain(a1);
  a4(a1);
  return sub_100034F08(a1, 1);
}

uint64_t sub_10004022C(void (*a1)(void))
{
  unint64_t v2 = sub_100029E1C();
  uint64_t v3 = swift_allocError(&type metadata for EventLoopError, v2, 0LL, 0LL);
  _BYTE *v4 = 0;
  a1();
  return swift_errorRelease(v3);
}

uint64_t SelectableEventLoop.makeSucceededVoidFuture()()
{
  uint64_t v1 = v0;
  if (sub_100041B84() && (sub_10002A718(v0 + 56, (uint64_t)v5, 0LL), (uint64_t v2 = *(void *)(v0 + 56)) != 0))
  {
    ChannelPipeline.syncOperations.getter();
  }

  else
  {
    uint64_t v2 = v1;
    sub_10003D750( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Selectabl eEventLoop.swift",  121LL,  2LL,  624LL,  &qword_1002AAD98);
    uint64_t v3 = sub_100041C18();
    sub_100098B34(v3);
  }

  return v2;
}

void sub_100040314()
{
}

unint64_t SelectableEventLoop.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_100041B5C();
  v2._countAndFlagsBits = sub_100040EAC();
  String.append(_:)(v2);
  swift_release(v1);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x646165726874202CLL;
  v3._object = (void *)0xEB00000000203D20LL;
  String.append(_:)(v3);
  sub_10002A4C8();
  v4._countAndFlagsBits = sub_1000A8F24();
  String.append(_:)(v4);
  sub_10001EDD8();
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 32032LL;
  v5._object = (void *)0xE200000000000000LL;
  String.append(_:)(v5);
  return 0xD000000000000021LL;
}

uint64_t SelectableEventLoop.debugDescription.getter()
{
  return v2;
}

void sub_100040468(void *a1@<X0>, void *a2@<X8>)
{
  v21[0] = 0LL;
  v21[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(71LL);
  uint64_t v22 = 0LL;
  unint64_t v23 = 0xE000000000000000LL;
  v4._countAndFlagsBits = 0xD000000000000021LL;
  v4._object = (void *)0x8000000100219190LL;
  String.append(_:)(v4);
  uint64_t v5 = a1[2];
  swift_retain();
  v6._countAndFlagsBits = sub_100040EAC();
  String.append(_:)(v6);
  swift_release(v5);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x646165726874202CLL;
  v7._object = (void *)0xEB00000000203D20LL;
  String.append(_:)(v7);
  uint64_t v8 = a1[3];
  swift_retain();
  v9._countAndFlagsBits = sub_1000A8F24();
  String.append(_:)(v9);
  swift_release(v8);
  swift_bridgeObjectRelease();
  v10._object = (void *)0x8000000100219570LL;
  v10._countAndFlagsBits = 0xD000000000000013LL;
  String.append(_:)(v10);
  swift_beginAccess(a1 + 5, v21, 0LL, 0LL);
  uint64_t v11 = a1[5];
  swift_retain();
  _StringGuts.grow(_:)(28LL);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 2112041LL;
  v13._object = (void *)0xE300000000000000LL;
  String.append(_:)(v13);
  uint64_t v14 = swift_retain();
  uint64_t v15 = sub_100137C48(v14);
  swift_release(v11);
  uint64_t v16 = type metadata accessor for ScheduledTask();
  v17._countAndFlagsBits = Array.description.getter(v15, v16);
  String.append(_:)(v17);
  swift_release(v11);
  swift_release(v15);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0xD000000000000015LL;
  v18._object = (void *)0x8000000100218C00LL;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 32032LL;
  v19._object = (void *)0xE200000000000000LL;
  String.append(_:)(v19);
  unint64_t v20 = v23;
  *a2 = v22;
  a2[1] = v20;
}

unint64_t sub_1000406AC()
{
  return SelectableEventLoop.description.getter();
}

uint64_t sub_1000406CC()
{
  return SelectableEventLoop.debugDescription.getter();
}

_OWORD *sub_1000406EC(_OWORD *result)
{
  if (*(_OWORD **)(v1 + 72) == result)
  {
    uint64_t v2 = result;
    uint64_t result = (_OWORD *)swift_slowDealloc(*(void *)(v1 + 64), -1LL, -1LL);
    *(void *)(v1 + 72) = 2LL * (void)v2;
    if ((unint64_t)(2LL * (void)v2 - 0x400000000000000LL) >> 59 == 31)
    {
      uint64_t result = (_OWORD *)swift_slowAlloc((void)v2 << 6, -1LL);
      *uint64_t result = 0u;
      result[1] = 0u;
      *(void *)(v1 + 64) = result;
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

_OWORD *sub_10004075C( uint64_t a1, char a2, void (*a3)(void), uint64_t a4, void (*a5)(unint64_t *), __int16 a6)
{
  uint64_t v8 = v6;
  if (*(_BYTE *)(v6 + 16))
  {
    unint64_t v53 = 0LL;
    unint64_t v54 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(45LL);
    v9._countAndFlagsBits = 0xD00000000000002ALL;
    v9._object = (void *)0x8000000100219420LL;
    String.append(_:)(v9);
    v59[0] = *(_BYTE *)(v6 + 16);
    _print_unlocked<A, B>(_:_:)(v59, &v53);
    v10._countAndFlagsBits = 46LL;
    v10._object = (void *)0xE100000000000000LL;
    String.append(_:)(v10);
    unint64_t v12 = v53;
    unint64_t v11 = v54;
    unint64_t v13 = sub_100025100();
    uint64_t v14 = swift_allocError(&type metadata for IOError, v13, 0LL, 0LL);
    *(void *)uint64_t v15 = v12;
    LODWORD(v16) = 9;
LABEL_3:
    *(void *)(v15 + _Block_object_dispose((const void *)(v1 - 136), 8) = v11;
    *(_DWORD *)(v15 + 16) = v16;
    return (_OWORD *)swift_willThrow(v14);
  }

  uint64_t v18 = v7;
  LOWORD(v19) = a6;
  uint64_t v22 = sub_100040FB8(a1, a2 & 1);
  uint64_t v24 = v23;
  uint64_t v26 = v25 & 1;
  swift_retain();
  uint64_t result = (_OWORD *)sub_10006E3E4(v22, v24, v26, v6);
  if (v18) {
    return result;
  }
  unint64_t v27 = (unint64_t)result;
  a3();
  if ((v27 & 0x8000000000000000LL) != 0)
  {
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }

  uint64_t v51 = (_OWORD *)v27;
  if (!v27) {
    return sub_1000406EC(v51);
  }
  BOOL v50 = a5;
  uint64_t v60 = v6 + 24;
  swift_beginAccess(v6 + 24, v59, 0LL, 0LL);
  for (uint64_t i = 0LL; ; i += 32LL)
  {
    uint64_t v29 = v8;
    uint64_t v30 = *(void *)(v8 + 64) + i;
    uint64_t v26 = *(void *)v30;
    int v31 = *(__int16 *)(v30 + 8);
    int v19 = *(unsigned __int16 *)(v30 + 8);
    __int16 v32 = *(_WORD *)(v30 + 10);
    int v33 = *(_DWORD *)(v30 + 12);
    if ((v32 & 0x4000) != 0) {
      break;
    }
    if (v19 == 65526) {
      goto LABEL_34;
    }
    if (v26 < 0)
    {
      __break(1u);
      goto LABEL_52;
    }

    uint64_t v34 = *(void *)v60;
    if (!*(void *)(*(void *)v60 + 16LL)) {
      goto LABEL_34;
    }
    uint64_t v52 = *(void *)(v30 + 24);
    unint64_t v35 = sub_1000F1730(v26);
    if ((v36 & 1) != 0)
    {
      uint64_t v37 = *(void *)(v34 + 56) + 16 * v35;
      if (*(_DWORD *)(v37 + 12) == (_DWORD)v52)
      {
        uint64_t v26 = *(void *)v37;
        char v38 = *(_BYTE *)(v37 + 8);
        int v39 = *(unsigned __int8 *)(v37 + 9);
        if (v31 == -15)
        {
          if (v32 < 0 && (v39 & 2) != 0)
          {
            if (v33)
            {
              int v40 = 3;
              goto LABEL_27;
            }

            LOBYTE(v4Hasher._combine(_:)(v1 & 1) = 2;
LABEL_44:
            uint64_t v8 = v29;
LABEL_45:
            unint64_t v53 = v26;
            LOBYTE(v54) = v38;
            BYTE1(v54) = v39;
            HIDWORD(v54) = v52;
            LOBYTE(v55) = v41;
            Scheduled._promise.getter(v26);
            Scheduled._promise.getter(v26);
            v50(&v53);
            j__swift_release(v26);
            j__swift_release(v26);
            goto LABEL_35;
          }

          if (v33)
          {
            int v40 = 1;
            goto LABEL_27;
          }

          goto LABEL_34;
        }

        if (v31 == -2)
        {
          if (v33)
          {
            int v40 = 9;
            goto LABEL_27;
          }

          if ((v39 & 8) != 0)
          {
            LOBYTE(v4Hasher._combine(_:)(v1 & 1) = v39 & 8;
            goto LABEL_44;
          }

          goto LABEL_34;
        }

        if (v31 != -1) {
          goto LABEL_55;
        }
        if ((v32 & 0x8000) == 0)
        {
          if (v33) {
            goto LABEL_26;
          }
          goto LABEL_33;
        }

        if ((v39 & 2) != 0)
        {
          if (v33)
          {
            int v40 = 7;
            goto LABEL_27;
          }

          LOBYTE(v4Hasher._combine(_:)(v1 & 1) = v39 & 6;
          if ((v39 & 6) != 0) {
            goto LABEL_44;
          }
        }

        else
        {
          if (v33)
          {
LABEL_26:
            int v40 = 5;
LABEL_27:
            int v41 = v40 & v39;
            uint64_t v8 = v29;
            if (!v41) {
              goto LABEL_35;
            }
            goto LABEL_45;
          }

LABEL_33:
          if ((v39 & 4) != 0)
          {
            LOBYTE(v4Hasher._combine(_:)(v1 & 1) = v39 & 4;
            goto LABEL_44;
          }
        }

      sub_10004739C((uint64_t)v18, type metadata accessor for EventManager.Observer);
      v25 += v12;
      if (!--v23)
      {
        sub_1000486F4();
        goto LABEL_36;
      }
    }
  }

  swift_bridgeObjectRetain();
  uint64_t v37 = 1LL;
  char v25 = v55;
  uint64_t v29 = v52;
LABEL_36:
  char v38 = v51;
LABEL_37:
  sub_10001762C(v38, v37, 1LL, v25);
  swift_bridgeObjectRelease();
  int v39 = sub_10001D158(v38, 1LL, v25);
  int v40 = v54;
  if (v39 == 1)
  {
    sub_100047A08(v38);
    sub_100047A48((uint64_t)v40, (uint64_t)v60);
    sub_100047A48((uint64_t)(v40 + 2), (uint64_t)v59);
    sub_100047A48((uint64_t)(v40 + 4), (uint64_t)v58);
    sub_100047A90((uint64_t)v60);
    sub_100047A90((uint64_t)v59);
    int v41 = sub_100047A90((uint64_t)v58);
    UUID.init()(v41);
    uint64_t v42 = &v15[*(int *)(v25 + 20)];
    uint64_t v43 = *((_OWORD *)v40 + 1);
    *(_OWORD *)uint64_t v42 = *(_OWORD *)v40;
    *((_OWORD *)v42 + Hasher._combine(_:)(v1 & 1) = v43;
    *((_OWORD *)v42 + 2) = *((_OWORD *)v40 + 2);
    sub_10004735C((uint64_t)v15, v12, type metadata accessor for EventManager.Observer);
    if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
    {
      sub_1000487C0();
      uint64_t v22 = v47;
    }

    Swift::String v44 = *((void *)v22 + 2);
    if (v44 >= *((void *)v22 + 3) >> 1)
    {
      sub_1000487C0();
      uint64_t v22 = v48;
    }

    *((void *)v22 + 2) = v44 + 1;
    sub_1000487B4();
    sub_100047AB8(v12, (uint64_t)v22 + v45 + *(void *)(v9 + 72) * v44);
    sub_10002A718(v20, (uint64_t)v56, 33LL);
    sub_1001B814C();
    swift_endAccess(v56);
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = v50;
    sub_100047AB8(v38, (uint64_t)v50);
  }

  unint64_t v46 = sub_100048814();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v46 - 8) + 16LL))(v29, v15, v46);
  sub_10004739C((uint64_t)v15, type metadata accessor for EventManager.Observer);
  sub_10002A580();
}

  __break(1u);
}

          uint64_t v8 = 0LL;
LABEL_34:
          LOBYTE(EventLoop.assertInEventLoop(file:line:)(v2, v3, v4, 1241LL, v5, v6) = 1;
          goto LABEL_49;
        }

        __break(1u);
LABEL_63:
        __break(1u);
        return result;
      }

      uint64_t v8 = (result - 48);
      if (v3 != 1)
      {
        sub_10005768C();
        if (!v13 && v12) {
          goto LABEL_33;
        }
        uint64_t v8 = 10LL * v8 + v22;
        if (v21 != 2)
        {
          while (1)
          {
            sub_100024EAC();
            if (!v13 && v12) {
              goto LABEL_33;
            }
            if (!is_mul_ok(v8, v23)) {
              goto LABEL_33;
            }
            unint64_t v12 = __CFADD__(10 * v8, v24);
            uint64_t v8 = 10 * v8 + v24;
            if (v12) {
              goto LABEL_33;
            }
            sub_10005769C();
            if (v13) {
              goto LABEL_49;
            }
          }
        }
      }
    }

        LOBYTE(sub_1000389B0(v2, v3, v4, v5) = 1;
        goto LABEL_36;
      }

      if (v11)
      {
        if (v11 != 1)
        {
          int v19 = BYTE1(a1) - 48;
          if ((BYTE1(a1) - 48) <= 9u)
          {
            unint64_t v20 = v19 == 0LL;
            unint64_t v21 = -(uint64_t)v19;
            if (v20)
            {
              if (v11 == 2)
              {
                LOBYTE(sub_1000389B0(v2, v3, v4, v5) = 0;
                goto LABEL_36;
              }

              Swift::String v48 = BYTE2(a1) - 48;
              if ((BYTE2(a1) - 48) <= 9u && is_mul_ok(v21, 0xAuLL))
              {
                uint64_t v49 = 10 * v21;
                BOOL v50 = v49 - v48;
                if (v49 >= v48)
                {
                  if (v11 != 3)
                  {
                    while (1)
                    {
                      sub_100024EAC();
                      if (!v25 && v20) {
                        goto LABEL_33;
                      }
                      if (!is_mul_ok(v50, v51)) {
                        goto LABEL_33;
                      }
                      unint64_t v20 = 10 * v50 >= v52;
                      BOOL v50 = 10 * v50 - v52;
                      if (!v20) {
                        goto LABEL_33;
                      }
                      sub_100058A24();
                      if (v25) {
                        goto LABEL_36;
                      }
                    }
                  }

    sub_10001EDE8(v0);
    return sub_1000931DC();
  }

  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  Swift::String v10 = sub_100077D08();
  unint64_t v11 = (os_log_s *)sub_100018F68(v10, (uint64_t)qword_1002EB9D0);
  unint64_t v12 = sub_100023E58();
  Logger.logObject.getter(v12);
  unint64_t v13 = sub_100092CFC();
  if (sub_100092AD4(v11))
  {
    uint64_t v14 = (uint8_t *)sub_100019464(12LL);
    uint64_t v15 = sub_100019464(32LL);
    uint64_t v85 = v15;
    *(_DWORD *)uint64_t v14 = 136315138;
    uint64_t v16 = sub_100019320();
    uint64_t v84 = sub_10009296C(v16, v17, &v85);
    sub_100092C54((uint64_t)&v84, (uint64_t)&v85);
    sub_100077C58();
    sub_100092A00((void *)&_mh_execute_header, v11, v13, "no transactions for %s have pending messages", v14);
    sub_10009293C(v15);
    sub_10001A408(v15);
    sub_10001A408((uint64_t)v14);
  }

  else
  {

    sub_10001EDE8(v0);
  }

  return sub_1000931DC();
}

    __break(1u);
    goto LABEL_34;
  }

              uint64_t v7 = 1;
              goto LABEL_48;
            }

            __break(1u);
            goto LABEL_63;
          }

          if (!v8) {
            goto LABEL_33;
          }
          sub_100162A90();
          if (!v10 && v13) {
            goto LABEL_33;
          }
          uint64_t v24 = v23;
          if (v22 != 1)
          {
            sub_10016F1D0();
            if (!v10 && v13) {
              goto LABEL_33;
            }
            unint64_t v27 = 10LL * v24 + v26;
            if (v25 != 2)
            {
              while (1)
              {
                sub_100024EAC();
                if (!v10 && v13) {
                  goto LABEL_33;
                }
                if (!is_mul_ok(v27, v28)) {
                  goto LABEL_33;
                }
                unint64_t v13 = __CFADD__(10 * v27, v29);
                unint64_t v27 = 10 * v27 + v29;
                if (v13) {
                  goto LABEL_33;
                }
                uint64_t v7 = 0;
                sub_100162A9C();
                if (v10) {
                  goto LABEL_48;
                }
              }
            }
          }
        }

          uint64_t v8 = 0LL;
          uint64_t v0 = 1;
          goto LABEL_47;
        }

        __break(1u);
LABEL_62:
        __break(1u);
        return result;
      }

      uint64_t v8 = (LOBYTE(v3.value._countAndFlagsBits) - 48);
      if (v4 != 1)
      {
        sub_10005768C();
        if (!v14 & v13) {
          goto LABEL_33;
        }
        uint64_t v8 = 10LL * (LOBYTE(v3.value._countAndFlagsBits) - 48) + v22;
        if (v21 != 2)
        {
          while (1)
          {
            sub_100024EAC();
            if (!v14 & v13) {
              goto LABEL_33;
            }
            sub_100134748();
            if (!v14) {
              goto LABEL_33;
            }
            uint64_t v8 = v24 + v23;
            if (__OFADD__(v24, v23)) {
              goto LABEL_33;
            }
            sub_100024EFC();
            if (v14) {
              goto LABEL_47;
            }
          }
        }
      }
    }

    unint64_t v11 = (v26 - 1) & v26;
    uint64_t v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    __int16 v32 = 16 * v23;
    int v33 = (uint64_t *)(*(void *)(v5 + 48) + v32);
    unint64_t v35 = *v33;
    uint64_t v34 = v33[1];
    char v36 = (uint64_t *)(*(void *)(v5 + 56) + v32);
    uint64_t v37 = *v36;
    char v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    Hasher.init(_seed:)(v44);
    String.hash(into:)(v44, v35, v34);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    Swift::String v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v30 = v17 == v29;
        if (v17 == v29) {
          Swift::String v17 = 0LL;
        }
        v28 |= v30;
        int v31 = *(void *)(v12 + 8 * v17);
      }

      while (v31 == -1);
      uint64_t v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    int v19 = 16 * v18;
    unint64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
    ValueMetadata *v20 = v35;
    v20[1] = v34;
    unint64_t v21 = (void *)(*(void *)(v8 + 56) + v19);
    void *v21 = v37;
    v21[1] = v38;
    ++*(void *)(v8 + 16);
  }

  swift_release();
  Swift::String v3 = v40;
  char v25 = (void *)(v5 + 64);
  if ((v43 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  int v39 = 1LL << *(_BYTE *)(v5 + 32);
  if (v39 >= 64) {
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *char v25 = -1LL << v39;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release();
  *Swift::String v3 = v8;
  return result;
}

LABEL_54:
  __break(1u);
LABEL_55:
  unint64_t v53 = 0LL;
  unint64_t v54 = 0xE000000000000000LL;
  Scheduled._promise.getter(v26);
  _StringGuts.grow(_:)(20LL);
  swift_bridgeObjectRelease(v54);
  unint64_t v53 = 0xD000000000000012LL;
  unint64_t v54 = 0x8000000100219480LL;
  LOWORD(v57) = v19;
  v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int16,  &protocol witness table for Int16);
  uint64_t v49 = v48._object;
  String.append(_:)(v48);
  swift_bridgeObjectRelease(v49);
  uint64_t result = (_OWORD *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v53,  v54,  "ASOctaneSupportXPCService/SelectorKqueue.swift",  46LL,  2LL);
  __break(1u);
  return result;
}

      uint64_t v29 = 0LL;
      LOBYTE(v24) = 1;
      goto LABEL_57;
    }

    if (v25)
    {
      if (v25 != 1 && (BYTE1(v24) - 48) <= 9u)
      {
        if (v25 == 2)
        {
          LOBYTE(v24) = 0;
          uint64_t v29 = -(uint64_t)(BYTE1(v24) - 48);
LABEL_57:
          sub_10001EDA0();
          uint64_t v146 = v24 & 1;
          if ((v24 & 1) != 0) {
            unint64_t v35 = 0LL;
          }
          else {
            unint64_t v35 = v29;
          }
          for (uint64_t i = v35; ; uint64_t i = 0LL)
          {
            sub_100023E9C();
            sub_1000D034C( (uint64_t)_swiftEmptyArrayStorage,  0xD000000000000013LL,  (uint64_t)"Swift/UnsafeBufferPointer.swift");
            sub_1000D0338();
            if (*(void *)(v2 + 16))
            {
              sub_1000D0328();
              uint64_t v143 = *(void *)(v2 + 40);
              int v144 = *(void *)(v2 + 32);
              swift_bridgeObjectRetain();
            }

            else
            {
              uint64_t v143 = 0LL;
              int v144 = 0LL;
            }

            sub_100019390();
            sub_1000D0344();
            sub_100023E9C();
            sub_1000CEC04((uint64_t)_swiftEmptyArrayStorage, v3, 0x646973442D58uLL, 0xE600000000000000LL);
            sub_1000D0338();
            if (*(void *)(v2 + 16))
            {
              sub_1000D0328();
              sub_1000D0368();
            }

            sub_100019390();
            char v36 = sub_1000D0450();
            char v38 = v37;
            sub_100023E9C();
            sub_1000D0374((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"X-Apple-Store-Front");
            sub_1000D0338();
            uint64_t v142 = (char)v38;
            uint64_t v141 = v36;
            if (*(void *)(v2 + 16))
            {
              sub_1000D0328();
              uint64_t v139 = *(void *)(v2 + 40);
              uint64_t v140 = *(void *)(v2 + 32);
              swift_bridgeObjectRetain();
            }

            else
            {
              uint64_t v139 = 0LL;
              uint64_t v140 = 0LL;
            }

            sub_100019390();
            sub_1000D0344();
            sub_100023E9C();
            sub_1000D03FC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"X-Apple-Issuing-Process");
            sub_1000D0338();
            if (*(void *)(v2 + 16))
            {
              sub_1000D0328();
              uint64_t v137 = *(void *)(v2 + 40);
              uint64_t v138 = *(void *)(v2 + 32);
              swift_bridgeObjectRetain();
            }

            else
            {
              uint64_t v137 = 0LL;
              uint64_t v138 = 0LL;
            }

            sub_100019390();
            sub_1000D0344();
            sub_100023E9C();
            sub_1000D034C((uint64_t)_swiftEmptyArrayStorage, 0xD00000000000001ALL, (uint64_t)"X-Apple-I-TimeZone");
            sub_1000D0338();
            if (*(void *)(v2 + 16))
            {
              sub_1000D0328();
              uint64_t v135 = *(void *)(v2 + 32);
              __int16 v136 = *(void *)(v2 + 40);
              swift_bridgeObjectRetain();
            }

            else
            {
              uint64_t v135 = 0LL;
              __int16 v136 = 0LL;
            }

            sub_100019390();
            sub_1000D0344();
            sub_100023E9C();
            sub_1000D03EC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"X-Apple-Requesting-Process");
            sub_1000D0338();
            if (*(void *)(v2 + 16))
            {
              sub_1000D0328();
              uint64_t v133 = *(void *)(v2 + 40);
              unsigned int v134 = *(void *)(v2 + 32);
              swift_bridgeObjectRetain();
            }

            else
            {
              uint64_t v133 = 0LL;
              unsigned int v134 = 0LL;
            }

            sub_100019390();
            sub_1000D0344();
            sub_100023E9C();
            sub_1000D03BC();
            sub_1000CEC04(v40, v41, v42, v39 | 0xED00004D2D440000LL);
            sub_1000D0338();
            if (*(void *)(v2 + 16))
            {
              sub_1000D0328();
              unsigned __int8 v131 = *(void *)(v2 + 40);
              int v132 = *(void *)(v2 + 32);
              swift_bridgeObjectRetain();
            }

            else
            {
              unsigned __int8 v131 = 0LL;
              int v132 = 0LL;
            }

            sub_100019390();
            sub_1000D0344();
            sub_100023E9C();
            sub_1000D034C((uint64_t)_swiftEmptyArrayStorage, 0xD000000000000016LL, (uint64_t)"X-Apple-I-Client-Time");
            sub_1000D0338();
            if (*(void *)(v2 + 16))
            {
              sub_1000D0328();
              unsigned int v129 = *(void *)(v2 + 40);
              unsigned __int16 v130 = *(void *)(v2 + 32);
              swift_bridgeObjectRetain();
            }

            else
            {
              unsigned int v129 = 0LL;
              unsigned __int16 v130 = 0LL;
            }

            sub_100019390();
            sub_1000D0344();
            sub_100023E9C();
            sub_1000D034C((uint64_t)_swiftEmptyArrayStorage, 0xD000000000000011LL, (uint64_t)"X-Apple-Client-Address");
            sub_1000D0338();
            if (*(void *)(v2 + 16))
            {
              sub_1000D0328();
              sub_1000D0368();
              sub_100019390();
              unsigned int v154 = v38;
              int v155 = v36;
              unsigned int v152 = 32LL;
              int v153 = 0xE100000000000000LL;
              uint64_t v43 = sub_10001B4A0();
              unsigned int v128 = sub_1000D03D8(v43, (uint64_t)&type metadata for String, v44, v43);
              swift_bridgeObjectRelease();
            }

            else
            {
              sub_100019390();
              unsigned int v128 = 0LL;
            }

            sub_1000D0344();
            sub_100023E9C();
            sub_1000D03EC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"X-Apple-TA-Device");
            sub_1000D0338();
            if (*(void *)(v2 + 16))
            {
              sub_1000D0328();
              unsigned int v126 = *(void *)(v2 + 40);
              unsigned int v127 = *(void *)(v2 + 32);
              swift_bridgeObjectRetain();
            }

            else
            {
              unsigned int v126 = 0LL;
              unsigned int v127 = 0LL;
            }

            sub_100019390();
            sub_1000D0344();
            sub_100023E9C();
            sub_1000D03BC();
            sub_1000CEC04(v46, v47, v48, v45 & 0xFFFF0000FFFFLL | 0xEB00000000440000LL);
            sub_1000D0338();
            if (*(void *)(v2 + 16))
            {
              sub_1000D0328();
              int v124 = *(void *)(v2 + 40);
              uint64_t v125 = *(void *)(v2 + 32);
              swift_bridgeObjectRetain();
            }

            else
            {
              int v124 = 0LL;
              uint64_t v125 = 0LL;
            }

            sub_100019390();
            sub_1000D0344();
            sub_100023E9C();
            sub_1000D03FC((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"X-Apple-Purchase-UUID");
            sub_1000D0338();
            if (*(void *)(v2 + 16))
            {
              sub_1000D0328();
              sub_1000D0368();
            }

            sub_100019390();
            uint64_t v49 = sub_1000D0450();
            uint64_t v51 = v50;
            sub_100023E9C();
            sub_1000D0424();
            sub_1000CEC04(v52, v53, v54, 0xEE0074656E726150LL);
            sub_1000D0338();
            if (*(void *)(v2 + 16))
            {
              sub_1000D0328();
              uint64_t v120 = *(void *)(v2 + 40);
              uint64_t v121 = *(void *)(v2 + 32);
              swift_bridgeObjectRetain();
            }

            else
            {
              uint64_t v120 = 0LL;
              uint64_t v121 = 0LL;
            }

            sub_100019390();
            sub_1000D0344();
            sub_100023E9C();
            sub_1000D0388();
            sub_1000CEC04(v56, v57, v58, v55 | 0xEE004D2D00000000LL);
            sub_1000D0338();
            if (*(void *)(v2 + 16))
            {
              sub_1000D0328();
              uint64_t v118 = *(void *)(v2 + 40);
              Swift::Int v119 = *(void *)(v2 + 32);
              swift_bridgeObjectRetain();
            }

            else
            {
              uint64_t v118 = 0LL;
              Swift::Int v119 = 0LL;
            }

            sub_100019390();
            sub_1000D0344();
            sub_100023E9C();
            sub_1000D034C((uint64_t)_swiftEmptyArrayStorage, 0xD000000000000010LL, (uint64_t)"X-Apple-I-MD-RINFO");
            sub_1000D0338();
            if (*(void *)(v2 + 16))
            {
              sub_1000D0328();
              uint64_t v116 = *(void *)(v2 + 40);
              uint64_t v117 = *(void *)(v2 + 32);
              swift_bridgeObjectRetain();
            }

            else
            {
              uint64_t v116 = 0LL;
              uint64_t v117 = 0LL;
            }

            sub_100019390();
            sub_1000D0344();
            sub_100023E9C();
            sub_1000CEC04((uint64_t)_swiftEmptyArrayStorage, v3, 0x6E656B6F542D58uLL, 0xE700000000000000LL);
            sub_1000D0338();
            if (*(void *)(v2 + 16))
            {
              sub_1000D0328();
              uint64_t v114 = *(void *)(v2 + 40);
              uint64_t v115 = *(void *)(v2 + 32);
              swift_bridgeObjectRetain();
            }

            else
            {
              uint64_t v114 = 0LL;
              uint64_t v115 = 0LL;
            }

            sub_100019390();
            sub_1000D0344();
            sub_100023E9C();
            sub_1000D0388();
            sub_1000CEC04(v60, v61, v62, v59 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000LL);
            sub_1000D0338();
            if (*(void *)(v2 + 16))
            {
              sub_1000D0328();
              uint64_t v112 = *(void *)(v2 + 40);
              uint64_t v113 = *(void *)(v2 + 32);
              swift_bridgeObjectRetain();
            }

            else
            {
              uint64_t v112 = 0LL;
              uint64_t v113 = 0LL;
            }

            sub_100019390();
            sub_1000D0344();
            sub_100023E9C();
            sub_1000D0374((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"X-Apple-I-Locale");
            sub_1000D0338();
            if (*(void *)(v2 + 16))
            {
              sub_1000D0328();
              uint64_t v110 = *(void *)(v2 + 40);
              uint64_t v111 = *(void *)(v2 + 32);
              swift_bridgeObjectRetain();
            }

            else
            {
              uint64_t v110 = 0LL;
              uint64_t v111 = 0LL;
            }

            sub_100019390();
            sub_1000D0344();
            sub_100023E9C();
            sub_1000D034C((uint64_t)_swiftEmptyArrayStorage, 0xD000000000000018LL, (uint64_t)"X-Apple-ActionSignature");
            sub_1000D0338();
            if (*(void *)(v2 + 16))
            {
              sub_1000D0328();
              sub_1000D0368();
              uint64_t v63 = sub_100019390();
              v64._rawValue = &off_1002708B8;
              int v157 = sub_1000D0444(v63, v65, v64);
            }

            else
            {
              sub_100019390();
            }

            sub_100023E9C();
            sub_1000D0374((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"X-Apple-NSURLCachePolicy");
            sub_1000D0338();
            if (*(void *)(v2 + 16))
            {
              sub_1000D0328();
              sub_1000D0368();
              uint64_t v66 = sub_100019390();
              v67._rawValue = &off_1002708F0;
              unsigned int v156 = sub_1000D0444(v66, v68, v67);
            }

            else
            {
              sub_100019390();
            }

            uint64_t v69 = (void *)Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for String);
            sub_1000D0344();
            sub_10001DBCC();
            uint64_t v70 = (void *)sub_1000CEC04( (uint64_t)_swiftEmptyArrayStorage,  a1,  0xD000000000000017LL,  0x800000010021C430LL);
            sub_10001EDA0();
            uint64_t v123 = v49;
            if (v70[2])
            {
              sub_1000D0328();
              uint64_t v71 = (void *)v70[4];
              unint64_t v72 = v70[5];
              swift_bridgeObjectRetain();
              sub_100019390();
              unsigned int v154 = v71;
              int v155 = v72;
              unsigned int v152 = 8251LL;
              int v153 = 0xE200000000000000LL;
              uint64_t v73 = sub_10001B4A0();
              uint64_t v75 = (void *)sub_1000D03D8(v73, (uint64_t)&type metadata for String, v74, v73);
              swift_bridgeObjectRelease();
            }

            else
            {
              sub_100019390();
              uint64_t v75 = _swiftEmptyArrayStorage;
            }

            uint64_t v122 = v51;
            uint64_t v76 = v75[2];
            if (!v76)
            {
LABEL_139:
              swift_bridgeObjectRelease();
              v101._countAndFlagsBits = 0xD00000000000001FLL;
              v101._object = (void *)0x800000010021C450LL;
              ASOctaneSupportXPCService::HTTPVersion v102 = HTTPHeaders.first(name:)(v101);
              swift_bridgeObjectRelease();
              if (v102.value._object) {
                uint64_t v103 = sub_1000CEDE4( v102.value._countAndFlagsBits,  (unint64_t)v102.value._object) != 0;
              }
              else {
                uint64_t v103 = 0;
              }
              uint64_t result = v138;
              *(void *)a2 = i;
              *(void *)(a2 + 16) = v144;
              *(void *)(a2 + 24) = v143;
              *(void *)(a2 + 32) = v141;
              *(void *)(a2 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v69;
              *(void *)(a2 + 56) = v140;
              *(void *)(a2 + 64) = v139;
              *(void *)(a2 + 72) = v138;
              *(void *)(a2 + 80) = v137;
              *(void *)(a2 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = v135;
              unsigned int v151 = v157;
              LOBYTE(v154) = v146 & 1;
              LOBYTE(v152) = v142 & 1;
              int v150 = v156;
              *(_BYTE *)(a2 + _Block_object_dispose((const void *)(v1 - 136), 8) = v146 & 1;
              *(_BYTE *)(a2 + 40) = v142 & 1;
              *(void *)(a2 + 96) = v136;
              *(void *)(a2 + 104) = v134;
              *(void *)(a2 + 112) = v133;
              *(void *)(a2 + 120) = v132;
              *(void *)(a2 + 12_Block_object_dispose((const void *)(v1 - 136), 8) = v131;
              *(void *)(a2 + 136) = v130;
              *(void *)(a2 + 144) = v129;
              *(void *)(a2 + 152) = v128;
              *(void *)(a2 + 160) = v127;
              *(void *)(a2 + 16_Block_object_dispose((const void *)(v1 - 136), 8) = v126;
              *(_BYTE *)(a2 + 176) = v151;
              *(_BYTE *)(a2 + 177) = v150;
              *(void *)(a2 + 184) = v125;
              *(void *)(a2 + 192) = v124;
              *(void *)(a2 + 200) = v123;
              *(_BYTE *)(a2 + 20_Block_object_dispose((const void *)(v1 - 136), 8) = v122 & 1;
              *(void *)(a2 + 216) = v121;
              *(void *)(a2 + 224) = v120;
              *(void *)(a2 + 232) = v119;
              *(void *)(a2 + 240) = v118;
              *(void *)(a2 + 24_Block_object_dispose((const void *)(v1 - 136), 8) = v117;
              *(void *)(a2 + 256) = v116;
              *(void *)(a2 + 264) = v115;
              *(void *)(a2 + 272) = v114;
              *(void *)(a2 + 280) = v113;
              *(void *)(a2 + 28_Block_object_dispose((const void *)(v1 - 136), 8) = v112;
              *(void *)(a2 + 296) = v111;
              *(void *)(a2 + 304) = v110;
              *(_BYTE *)(a2 + 312) = v103;
              return result;
            }

            uint64_t v77 = sub_10001B4A0();
            uint64_t v78 = v75 + 5;
            Swift::String v3 = 47LL;
            int v149 = v77;
            while (1)
            {
              uint64_t v79 = *v78;
              unsigned int v154 = (void *)*(v78 - 1);
              int v155 = v79;
              unsigned int v152 = 47LL;
              int v153 = 0xE100000000000000LL;
              double v80 = (void *)StringProtocol.components<A>(separatedBy:)( &v152,  &type metadata for String,  &type metadata for String,  v77,  v77);
              uint64_t v2 = (unint64_t)v80;
              uint64_t v81 = v80[2];
              if (!v81) {
                goto LABEL_134;
              }
              unint64_t v82 = v80[4];
              id v83 = v80[5];
              uint64_t v84 = (uint64_t)&v80[2 * v81 + 4];
              uint64_t v85 = *(void *)(v84 - 16);
              uint64_t v86 = *(void *)(v84 - 8);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              sub_100019390();
              if (!v69)
              {
                swift_bridgeObjectRelease();
LABEL_134:
                swift_bridgeObjectRelease();
                goto LABEL_138;
              }

              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v69);
              unsigned int v154 = v69;
              uint64_t v88 = sub_1000F168C(v82, v83);
              Swift::Int v90 = v69[2];
              Swift::Int v91 = (v89 & 1) == 0;
              uint64_t v92 = v90 + v91;
              if (__OFADD__(v90, v91)) {
                break;
              }
              uint64_t v2 = v88;
              Swift::String v3 = v89;
              sub_1000175B0(&qword_1002AA9A0);
              if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v92))
              {
                uint64_t v93 = sub_1000F168C(v82, v83);
                if ((v3 & 1) != (v94 & 1)) {
                  goto LABEL_168;
                }
                uint64_t v2 = v93;
              }

              uint64_t v69 = v154;
              if ((v3 & 1) != 0)
              {
                uint64_t v95 = (void *)(v154[7] + 16 * v2);
                swift_bridgeObjectRelease();
                *uint64_t v95 = v85;
                v95[1] = v86;
              }

              else
              {
                v154[(v2 >> 6) + 8] |= 1LL << v2;
                uint64_t v96 = (uint64_t *)(v69[6] + 16 * v2);
                *uint64_t v96 = v82;
                v96[1] = v83;
                uint64_t v97 = (void *)(v69[7] + 16 * v2);
                *uint64_t v97 = v85;
                v97[1] = v86;
                uint64_t v98 = v69[2];
                uint64_t v99 = __OFADD__(v98, 1LL);
                uint64_t v100 = v98 + 1;
                if (v99) {
                  goto LABEL_162;
                }
                v69[2] = v100;
                swift_bridgeObjectRetain();
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v77 = v149;
              Swift::String v3 = 47LL;
LABEL_138:
              v78 += 2;
              if (!--v76) {
                goto LABEL_139;
              }
            }

            __break(1u);
LABEL_162:
            __break(1u);
LABEL_163:
            sub_10001EDA0();
            uint64_t v146 = 1;
          }
        }

        if ((BYTE2(v24) - 48) <= 9u)
        {
          uint64_t v29 = -10LL * (BYTE1(v24) - 48) - (BYTE2(v24) - 48);
          if (v25 != 3)
          {
            while (1)
            {
              sub_100024EAC();
              if (!v32 & v31) {
                goto LABEL_54;
              }
              sub_1000D03A8();
              if (!v32) {
                goto LABEL_54;
              }
              uint64_t v29 = v108 - v107;
              if (__OFSUB__(v108, v107)) {
                goto LABEL_54;
              }
              sub_100058A24();
              if (v32) {
                goto LABEL_57;
              }
            }
          }

void sub_100040C24()
{
  if (*(_BYTE *)(v0 + 16))
  {
    uint64_t v9 = 0LL;
    unint64_t v10 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(32LL);
    v2._object = (void *)0x8000000100219360LL;
    v2._countAndFlagsBits = 0xD00000000000001DLL;
    String.append(_:)(v2);
    char v11 = *(_BYTE *)(v0 + 16);
    _print_unlocked<A, B>(_:_:)(&v11, &v9);
    v3._countAndFlagsBits = 46LL;
    v3._object = (void *)0xE100000000000000LL;
    String.append(_:)(v3);
    uint64_t v4 = v9;
    unint64_t v5 = v10;
    unint64_t v6 = sub_100025100();
    uint64_t v7 = swift_allocError(&type metadata for IOError, v6, 0LL, 0LL);
    *(void *)uint64_t v8 = v4;
    *(void *)(v8 + _Block_object_dispose((const void *)(v1 - 136), 8) = v5;
    *(_DWORD *)(v8 + 16) = 9;
    swift_willThrow(v7);
  }

  else
  {
    sub_100040D60();
    if (!v1)
    {
      *(_BYTE *)(v0 + 16) = 2;
      swift_beginAccess(v0 + 24, &v9, 33LL, 0LL);
      sub_1000175B0(&qword_1002AADB0);
      Dictionary._Variant.removeAll(keepingCapacity:)(0);
      swift_endAccess(&v9);
    }
  }

void sub_100040D60()
{
  if (v1)
  {
    swift_unexpectedError(v1, "ASOctaneSupportXPCService/SelectorKqueue.swift", 46LL, 1LL, 283LL);
    __break(1u);
  }

  else
  {
    *(_DWORD *)(v0 + 56) = -1;
    Lock.unlock()();
  }

void sub_100040DD4()
{
  if ((*(_DWORD *)(v0 + 56) & 0x80000000) != 0)
  {
    unint64_t v1 = sub_100029E1C();
    swift_allocError(&type metadata for EventLoopError, v1, 0LL, 0LL);
    _BYTE *v2 = 2;
    swift_willThrow();
  }

  else
  {
    v3.ident = 0LL;
    *(void *)&v3.filter = 0x10000000000FFF6LL;
    v3.data = 0LL;
    v3.udata = 0LL;
    sub_1001264D4(&v3, 1LL);
  }

  Lock.unlock()();
}

unint64_t sub_100040EAC()
{
  unint64_t v1 = pthread_self();
  if (pthread_equal(v1, *(pthread_t *)(*(void *)(v0 + 40) + 32LL)))
  {
    _StringGuts.grow(_:)(28LL);
    swift_bridgeObjectRelease();
    v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
    v3._countAndFlagsBits = 32032LL;
    v3._object = (void *)0xE200000000000000LL;
    String.append(_:)(v3);
    return 0xD000000000000018LL;
  }

  else
  {
    swift_retain();
    return sub_100138A04();
  }

uint64_t sub_100040F8C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100040FB0()
{
}

uint64_t sub_100040FB8(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return 0LL;
  }
  if (result < 1)
  {
    __break(1u);
  }

  else if ((uint64_t)(result / 0x3B9ACA00uLL) >= 100000000)
  {
    return 100000000LL;
  }

  else
  {
    return result / 0x3B9ACA00uLL;
  }

  return result;
}

uint64_t sub_100041010()
{
  return sub_10004022C(*(void (**)(void))(v0 + 16));
}

uint64_t sub_100041018(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100041028(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100041034(uint64_t a1, char a2)
{
  return sub_1000401A8(a1, a2 & 1, *(void *)(v2 + 16), *(uint64_t (**)(uint64_t))(v2 + 24));
}

uint64_t type metadata accessor for SelectableEventLoop()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService19SelectableEventLoop);
}

uint64_t storeEnumTagSinglePayload for SelectableEventLoop.ExternalState( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = 1;
  }
  else {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1000410B0 + 4 * byte_1001F59A9[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000410E4 + 4 * byte_1001F59A4[v4]))();
}

uint64_t sub_1000410E4(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_1000410EC(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x1000410F4LL);
  }
  return result;
}

uint64_t sub_100041100(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x100041108LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10004110C(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100041114(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SelectableEventLoop.ExternalState()
{
  return &type metadata for SelectableEventLoop.ExternalState;
}

uint64_t storeEnumTagSinglePayload for SelectableEventLoop.InternalState( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = 1;
  }
  else {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10004117C + 4 * byte_1001F59B3[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000411B0 + 4 * byte_1001F59AE[v4]))();
}

uint64_t sub_1000411B0(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_1000411B8(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x1000411C0LL);
  }
  return result;
}

uint64_t sub_1000411CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000411D4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000411D8(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_1000411E0(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SelectableEventLoop.InternalState()
{
  return &type metadata for SelectableEventLoop.InternalState;
}

unint64_t sub_100041200()
{
  unint64_t result = qword_1002AAD88;
  if (!qword_1002AAD88)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F5B70, &type metadata for SelectableEventLoop.InternalState);
    atomic_store(result, (unint64_t *)&qword_1002AAD88);
  }

  return result;
}

unint64_t sub_100041240()
{
  unint64_t result = qword_1002AAD90;
  if (!qword_1002AAD90)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F5BD8, &type metadata for SelectableEventLoop.ExternalState);
    atomic_store(result, (unint64_t *)&qword_1002AAD90);
  }

  return result;
}

void sub_10004127C()
{
}

void sub_100041284(uint64_t a1)
{
}

uint64_t sub_10004129C(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16LL);
  if (v5 < a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v6 = result;
  uint64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v8 = result - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (__OFADD__(v5, v8))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  void *v2 = v4;
  if (!isUniquelyReferenced_nonNull_native || v5 - v7 > *(void *)(v4 + 24) >> 1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v4 = *v2;
  }

  uint64_t v10 = v4 + 32 + 8 * v6;
  type metadata accessor for ScheduledTask();
  unint64_t result = swift_arrayDestroy(v10, v7);
  if (!v7) {
    return specialized ContiguousArray._endMutation()(result);
  }
  uint64_t v11 = *(void *)(v4 + 16);
  if (__OFSUB__(v11, a2)) {
    goto LABEL_19;
  }
  unint64_t result = sub_1000314BC(v4 + 32 + 8 * a2, v11 - a2, v10);
  uint64_t v12 = *(void *)(v4 + 16);
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 - v7;
  if (!v13)
  {
    *(void *)(v4 + 16) = v14;
    return specialized ContiguousArray._endMutation()(result);
  }

uint64_t sub_100041398()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1000413B8()
{
}

uint64_t sub_1000413D8()
{
  return sub_10003FE00(*(void (**)(uint64_t, uint64_t))(v0 + 16));
}

uint64_t sub_1000413E4()
{
  return sub_10003FE5C(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

void sub_1000413F4()
{
}

uint64_t sub_100041418(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  uint64_t v2 = 64LL;
  for (uint64_t i = 10LL; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64LL;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t sub_100041498(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 16))
  {
    uint64_t v50 = 0LL;
    unint64_t v51 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(39LL);
    v4._object = (void *)0x80000001002195B0LL;
    v4._countAndFlagsBits = 0xD000000000000024LL;
    String.append(_:)(v4);
    LOBYTE(v49) = *(_BYTE *)(a2 + 16);
    _print_unlocked<A, B>(_:_:)(&v49, &v50);
    v5._countAndFlagsBits = 46LL;
    v5._object = (void *)0xE100000000000000LL;
    String.append(_:)(v5);
    uint64_t v6 = v50;
    unint64_t v7 = v51;
    unint64_t v8 = sub_100025100();
    uint64_t v9 = swift_allocError(&type metadata for IOError, v8, 0LL, 0LL);
    *(void *)uint64_t v10 = v6;
    *(void *)(v10 + _Block_object_dispose((const void *)(v1 - 136), 8) = v7;
    *(_DWORD *)(v10 + 16) = 9;
    uint64_t v11 = sub_1000175B0(&qword_1002AAD98);
    uint64_t v12 = swift_allocObject(v11, 72LL, 7LL);
    *(void *)(v12 + 32) = a1;
    *(void *)(v12 + 40) = &protocol witness table for SelectableEventLoop;
    *(void *)(v12 + 16) = v9;
    *(_BYTE *)(v12 + 24) = 1;
    *(void *)(v12 + 56) = 0LL;
    *(void *)(v12 + 64) = 0LL;
    *(void *)(v12 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
    swift_retain(a1);
    return v12;
  }

  swift_beginAccess(a2 + 24, &v50, 0LL, 0LL);
  uint64_t v13 = *(void *)(a2 + 24);
  uint64_t v14 = swift_bridgeObjectRetain(v13);
  uint64_t v15 = (uint64_t)sub_10003D460(v14);
  swift_bridgeObjectRelease(v13);
  uint64_t v46 = v15;
  if (!((unint64_t)v15 >> 62))
  {
    uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v16) {
      goto LABEL_5;
    }
LABEL_19:
    swift_bridgeObjectRelease(v15);
    uint64_t v42 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_20:
    if ((unint64_t)v42 >> 62)
    {
      if (v42 < 0) {
        uint64_t v45 = v42;
      }
      else {
        uint64_t v45 = v42 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v42);
      uint64_t v44 = _CocoaArrayWrapper.endIndex.getter(v45);
      swift_bridgeObjectRelease(v42);
    }

    else
    {
      uint64_t v44 = *(void *)((v42 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    if (v44 < 1)
    {
      swift_bridgeObjectRelease(v42);
      return SelectableEventLoop.makeSucceededVoidFuture()();
    }

    else
    {
      uint64_t v12 = sub_10003D750( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/E ventLoopFuture.swift",  117LL,  2LL,  1084LL,  &qword_1002AAD98);
      sub_1000F15B8(v42, v12);
      swift_bridgeObjectRelease(v42);
    }

    return v12;
  }

  if (v15 < 0) {
    uint64_t v43 = v15;
  }
  else {
    uint64_t v43 = v15 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v15);
  uint64_t v16 = _CocoaArrayWrapper.endIndex.getter(v43);
  swift_bridgeObjectRelease(v15);
  if (!v16) {
    goto LABEL_19;
  }
LABEL_5:
  uint64_t v49 = _swiftEmptyArrayStorage;
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)(v16);
  if ((v16 & 0x8000000000000000LL) == 0)
  {
    uint64_t v18 = 0LL;
    uint64_t v19 = v15;
    unint64_t v47 = v15 & 0xC000000000000001LL;
    uint64_t v48 = v16;
    do
    {
      if (v47)
      {
        uint64_t v20 = specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v19);
      }

      else
      {
        uint64_t v20 = *(void *)(v19 + 8 * v18 + 32);
        swift_retain(v20);
      }

      uint64_t v21 = *(void *)(v20 + 32);
      uint64_t v22 = *(void *)(v20 + 40);
      uint64_t v23 = sub_1000175B0(&qword_1002AAD98);
      uint64_t v24 = swift_allocObject(v23, 72LL, 7LL);
      uint64_t ObjectType = swift_getObjectType(v21);
      uint64_t v26 = sub_10010C7B4( v21,  0LL,  255,  (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/S electorGeneric.swift",  117LL,  2LL,  366LL,  v24,  ObjectType,  v22);
      unint64_t v27 = (void *)swift_allocObject(&unk_100277C38, 48LL, 7LL);
      v27[2] = v20;
      v27[3] = v26;
      v27[4] = sub_10006E8E0;
      v27[5] = 0LL;
      uint64_t v28 = *(void *)(v20 + 40);
      uint64_t v29 = swift_getObjectType(*(void *)(v20 + 32));
      uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t))(v28 + 16);
      swift_retain_n(v26, 3LL);
      swift_retain_n(v20, 2LL);
      swift_unknownObjectRetain(v21);
      if ((v30(v29, v28) & 1) != 0)
      {
        swift_retain(v26);
        uint64_t v31 = swift_retain(v20);
        uint64_t v32 = sub_1000FA92C(v31, v20, v26);
        uint64_t v34 = v33;
        uint64_t v36 = v35;
        CallbackList._run()();
        sub_100034E8C(v32, v34);
        swift_release(v20);
        swift_release(v27);
        swift_bridgeObjectRelease(v36);
      }

      else
      {
        uint64_t v37 = (void *)swift_allocObject(&unk_100277C60, 40LL, 7LL);
        v37[2] = v20;
        v37[3] = sub_100041A10;
        v37[4] = v27;
        char v38 = *(void (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(v28 + 24);
        swift_retain(v20);
        swift_retain(v27);
        v38(sub_100041A48, v37, v29, v28);
        uint64_t v19 = v46;
        swift_release(v20);
        swift_release(v27);
        swift_release(v37);
      }

      swift_release(v20);
      uint64_t v39 = swift_release_n(v26, 2LL);
      ++v18;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v39);
      uint64_t v40 = v49[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v40);
      uint64_t v41 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v40, v26);
      specialized ContiguousArray._endMutation()(v41);
    }

    while (v48 != v18);
    uint64_t v42 = (uint64_t)v49;
    swift_bridgeObjectRelease(v19);
    goto LABEL_20;
  }

  __break(1u);
  return result;
}

uint64_t sub_100041960()
{
  sub_100041B9C();
  uint64_t v1 = sub_100041B64();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100041984(uint64_t a1)
{
  return sub_10003FBE0(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100041990()
{
  return swift_deallocObject(v0, 41LL, 7LL);
}

void sub_1000419BC()
{
}

uint64_t sub_1000419E4(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRetain(result);
  }
  return result;
}

uint64_t sub_1000419F0()
{
  uint64_t v0 = sub_100041B64();
  return swift_deallocObject(v0, v1, v2);
}

void sub_100041A10()
{
}

uint64_t sub_100041A20()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100041A48()
{
  return sub_100104CB4(v0[2], v0[3], v0[4]);
}

uint64_t sub_100041A88(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_100041AA0(uint64_t a1)
{
  return dispatch thunk of SetAlgebra.init<A>(_:)(v4 - 136, v1, a1, v2, v3);
}

uint64_t sub_100041AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
}

uint64_t sub_100041AE0(uint64_t a1)
{
  return swift_retain(a1);
}

  ;
}

uint64_t sub_100041B08()
{
  return swift_retain(v0);
}

void *sub_100041B10@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 112) = a1;
  *(void *)(v2 - 104) = v1;
  return _Block_copy((const void *)(v2 - 128));
}

uint64_t sub_100041B1C()
{
  return swift_release(*(void *)(v0 + 16));
}

uint64_t sub_100041B24@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, void)@<X8>)
{
  return a2(a1, 2LL, 0LL);
}

uint64_t sub_100041B34()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t sub_100041B3C()
{
  return swift_retain(*(void *)(v1 + 8 * v0));
}

uint64_t sub_100041B4C()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)(*(void *)v0 + 16LL));
}

uint64_t sub_100041B5C()
{
  return swift_retain(v0);
}

uint64_t sub_100041B64()
{
  return v0;
}

  ;
}

BOOL sub_100041B84()
{
  return sub_1000A8B90();
}

uint64_t sub_100041B8C()
{
  uint64_t v3 = v0 + 8 * v2;
  uint64_t v4 = *(void *)(v3 + 32);
  *(void *)(v3 + 32) = v1;
  return swift_release(v4);
}

uint64_t sub_100041B9C()
{
  return swift_release(*(void *)(v0 + 40));
}

uint64_t sub_100041BA4()
{
  uint64_t v3 = v1 + 8 * v2;
  uint64_t v4 = *(void *)(v3 + 32);
  *(void *)(v3 + 32) = v0;
  return swift_release(v4);
}

uint64_t sub_100041BB4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

void sub_100041BC0(uint64_t a1)
{
}

uint64_t sub_100041BCC()
{
  return *(void *)(v0 + 32 + 8 * v1);
}

  ;
}

uint64_t sub_100041BEC()
{
  return type metadata accessor for ScheduledTask();
}

uint64_t sub_100041BF4()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v1, v0);
}

unint64_t sub_100041C00@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 136) = a1;
  return sub_100025C10();
}

unint64_t sub_100041C08()
{
  return sub_100025C50();
}

uint64_t sub_100041C10()
{
  return Lock.init()();
}

uint64_t sub_100041C18()
{
  return 0LL;
}

void sub_100041C2C()
{
}

void sub_100041C34()
{
}

uint64_t sub_100041C3C()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

void ChannelOutboundInvoker.write(_:file:line:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void ChannelOutboundInvoker.close(mode:file:line:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = sub_100041E18(a2, a3, a4, a5, a6, a7);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 64);
  swift_retain();
  v11(a1, v10, a6, a7);
  sub_10002A524();
  sub_10002A3D4();
}

void ChannelOutboundInvoker.register(file:line:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = sub_100041E18(a1, a2, a3, a4, a5, a6);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(a6 + 8);
  uint64_t v10 = swift_retain();
  v9(v10, a5, a6);
  swift_release(v8);
  sub_10002A3D4();
}

void ChannelOutboundInvoker.bind(to:file:line:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void ChannelOutboundInvoker.connect(to:file:line:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void ChannelOutboundInvoker.writeAndFlush(_:file:line:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void ChannelOutboundInvoker.triggerUserOutboundEvent(_:file:line:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

uint64_t sub_100041E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 80))(a5, a6);
  uint64_t v12 = v11;
  uint64_t ObjectType = swift_getObjectType(v10);
  EmbeddedChannel.WrongTypeError.actual.getter(ObjectType, (uint64_t)&type metadata for () + 8);
  uint64_t v14 = EventLoop.makePromise<A>(of:file:line:)( (uint64_t)&type metadata for () + 8,  a1,  a2,  a3,  a4,  ObjectType,  (uint64_t)&type metadata for () + 8,  v12);
  swift_unknownObjectRelease(v10);
  return v14;
}

unint64_t sub_100041EC8()
{
  unint64_t result = qword_1002AADC8;
  if (!qword_1002AADC8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CloseMode, &type metadata for CloseMode);
    atomic_store(result, (unint64_t *)&qword_1002AADC8);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for CloseMode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for CloseMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = 1;
  }
  else {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100041FD8 + 4 * byte_1001F5C05[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10004200C + 4 * byte_1001F5C00[v4]))();
}

uint64_t sub_10004200C(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100042014(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x10004201CLL);
  }
  return result;
}

uint64_t sub_100042028(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x100042030LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100042034(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10004203C(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CloseMode()
{
  return &type metadata for CloseMode;
}

uint64_t sub_100042058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100041E18(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_100042080()
{
  return v4(v2, v3, v1, v0);
}

uint64_t static IOData.__derived_enum_equals(_:_:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = result;
  if (result < 0)
  {
    if (a4 < 0) {
      return static FileRegion.== infix(_:_:)( result & 0x7FFFFFFFFFFFFFFFLL,  a2,  a3 & 0xFFFFFFFFFFFFFFLL,  a4 & 0x7FFFFFFFFFFFFFFFLL,  a5,  a6 & 0xFFFFFFFFFFFFFFLL);
    }
    return 0LL;
  }

  if (a4 < 0) {
    return 0LL;
  }
  if (HIDWORD(a2) < a2)
  {
    __break(1u);
  }

  else if (HIDWORD(a5) >= a5)
  {
    if (HIDWORD(a2) - (_DWORD)a2 == HIDWORD(a5) - (_DWORD)a5)
    {
      if ((a3 & 0xFFFFFFFFFFFFFFLL) == (a6 & 0xFFFFFFFFFFFFFFLL) && result == a4) {
        return 1LL;
      }
      sub_100033ED4(a4);
      sub_100033ED4(v6);
      char v8 = sub_10005D4E4();
      sub_100018F04(v6);
      if ((v8 & 1) != 0) {
        return 1LL;
      }
    }

    return 0LL;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000421C0(uint64_t a1, uint64_t a2)
{
  return static IOData.__derived_enum_equals(_:_:)( *(void *)a1,  *(void *)(a1 + 8),  *(unsigned int *)(a1 + 16) | ((unint64_t)(*(unsigned __int16 *)(a1 + 20) | (*(unsigned __int8 *)(a1 + 22) << 16)) << 32),  *(void *)a2,  *(void *)(a2 + 8),  *(unsigned int *)(a2 + 16) | ((unint64_t)(*(unsigned __int16 *)(a2 + 20) | (*(unsigned __int8 *)(a2 + 22) << 16)) << 32));
}

uint64_t IOData.readableBytes.getter(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < 0)
  {
    if ((a2 & 0x8000000000000000LL) == 0) {
      return a2 - (a3 & 0xFFFFFFFFFFFFFFLL);
    }
    goto LABEL_7;
  }

  unint64_t result = (HIDWORD(a2) - a2);
  if (HIDWORD(a2) < a2)
  {
    __break(1u);
LABEL_7:
    __break(1u);
  }

  return result;
}

Swift::Void __swiftcall IOData.moveReaderIndex(forwardBy:)(Swift::Int forwardBy)
{
  unint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  unint64_t v5 = *((unsigned int *)v1 + 4) | ((unint64_t)(*((unsigned __int16 *)v1 + 10) | (*((unsigned __int8 *)v1 + 22) << 16)) << 32);
  if ((*v1 & 0x8000000000000000LL) == 0)
  {
    BOOL v6 = __CFADD__((_DWORD)v3, (_DWORD)forwardBy);
    unint64_t v7 = (v3 + forwardBy);
    if (v6)
    {
      __break(1u);
    }

    else if (v7 <= HIDWORD(v3))
    {
      unint64_t v3 = v3 & 0xFFFFFFFF00000000LL | v7;
LABEL_8:
      v1[1] = v3;
      *((_DWORD *)v1 + 4) = v5;
      *((_BYTE *)v1 + 22) = BYTE6(v5);
      *((_WORD *)v1 + 10) = WORD2(v5);
      return;
    }

    __break(1u);
    goto LABEL_11;
  }

  BOOL v8 = __OFADD__(v5 & 0xFFFFFFFFFFFFFFLL, forwardBy);
  uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFLL) + forwardBy;
  if (v8)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if ((v9 & 0x8000000000000000LL) == 0)
  {
    unint64_t v5 = static IntegerBitPacking.unpackUInt32UInt16UInt8(_:)(v9);
    *uint64_t v1 = v4 | 0x8000000000000000LL;
    goto LABEL_8;
  }

uint64_t IOData.description.getter(uint64_t a1, unint64_t a2)
{
  if (a1 < 0)
  {
    sub_100042668();
    FileRegion.description.getter(a1 & 0x7FFFFFFFFFFFFFFFLL, a2);
  }

  else
  {
    sub_100042668();
    ByteBuffer.description.getter(a1, a2, v4);
  }

  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 32032LL;
  v7._object = (void *)0xE200000000000000LL;
  String.append(_:)(v7);
  sub_100018F04(a1);
  return v9;
}

uint64_t sub_1000423CC()
{
  return IOData.description.getter(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t destroy for IOData(uint64_t *a1)
{
  return sub_100018F04(*a1);
}

uint64_t _s25ASOctaneSupportXPCService6IODataOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int v6 = *(_DWORD *)(a2 + 16);
  uint64_t v5 = a2 + 16;
  char v7 = *(_BYTE *)(v5 + 6);
  __int16 v8 = *(_WORD *)(v5 + 4);
  sub_100033ED4(v3);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v4;
  *(_BYTE *)(a1 + 22) = v7;
  *(_WORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 16) = v6;
  return a1;
}

uint64_t assignWithCopy for IOData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int v6 = *(_DWORD *)(a2 + 16);
  uint64_t v5 = a2 + 16;
  char v7 = *(_BYTE *)(v5 + 6);
  __int16 v8 = *(_WORD *)(v5 + 4);
  sub_100033ED4(v3);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v4;
  *(_DWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 22) = v7;
  *(_WORD *)(a1 + 20) = v8;
  sub_100018F04(v9);
  return a1;
}

__n128 initializeWithTake for ByteBuffer(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 15) = *(void *)(a2 + 15);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for IOData(uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  int v6 = *((_DWORD *)a2 + 4);
  uint64_t v4 = a2 + 1;
  int v5 = v6;
  LOWORD(EventLoop.assertInEventLoop(file:line:)(v2, v3, v4, 1241LL, v5, v6) = *((_WORD *)v4 + 2);
  char v7 = *((_BYTE *)v4 + 6);
  uint64_t v8 = *(void *)a1;
  *(_OWORD *)a1 = v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 20) = v6;
  *(_BYTE *)(a1 + 22) = v7;
  sub_100018F04(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for IOData(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7F && *(_BYTE *)(a1 + 23))
    {
      unsigned int v2 = *(_DWORD *)a1 + 126;
    }

    else
    {
      unsigned int v2 = (((*(void *)a1 >> 57) >> 6) | (2 * ((*(void *)a1 >> 57) & 0x38 | *(void *)a1 & 7))) ^ 0x7F;
      if (v2 >= 0x7E) {
        unsigned int v2 = -1;
      }
    }
  }

  else
  {
    unsigned int v2 = -1;
  }

  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for IOData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(_BYTE *)(result + 22) = 0;
    *(_WORD *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 127;
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
    if (a3 >= 0x7F) {
      *(_BYTE *)(result + 2sub_100019F7C(v0 + 3) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7F) {
      *(_BYTE *)(result + 2sub_100019F7C(v0 + 3) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(void *)__n128 result = (v3 | (v3 << 57)) & 0xF000000000000007LL;
      *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
      *(_BYTE *)(result + 22) = 0;
      *(_WORD *)(result + 20) = 0;
      *(_DWORD *)(result + 16) = 0;
    }
  }

  return result;
}

uint64_t sub_100042628(void *a1)
{
  return *a1 >> 63;
}

void *sub_100042634(void *result)
{
  *result &= ~0x8000000000000000LL;
  return result;
}

uint64_t *sub_100042644(uint64_t *result, uint64_t a2)
{
  *__n128 result = *result & 0xFFFFFFFFFFFFFF8LL | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for IOData()
{
  return &type metadata for IOData;
}

uint64_t sub_100042668()
{
  return sub_100033ED4(v0);
}

uint64_t sub_10004268C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = v2;
  sub_10003A968(a1 + 56, (uint64_t)v22);
  sub_10003A968((uint64_t)v22, (uint64_t)&v25);
  if (*(void *)&v26[0])
  {
    __int128 v23 = v25;
    *(_OWORD *)uint64_t v24 = v26[0];
    *(void *)&v24[15] = *(void *)((char *)v26 + 15);
    uint64_t v9 = sub_1000ACD2C();
    uint64_t v11 = v10;
    uint64_t v12 = type metadata accessor for PropertyListDecoder(0LL);
    swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    PropertyListDecoder.init()();
    sub_10003A9B0();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( &type metadata for InAppQueueCheckRequest,  v9,  v11,  &type metadata for InAppQueueCheckRequest);
    sub_100024F0C();
    uint64_t v6 = v21[1];
    uint64_t v3 = v2 + 88;
    uint64_t v14 = sub_100042964();
    uint64_t v4 = *v14;
    int v5 = *(os_unfair_lock_s **)(*(void *)(*v14 + 128LL) + 16LL);
    swift_retain();
    os_unfair_lock_lock(v5);
    *(_BYTE *)(v4 + 112) = 0;
    os_unfair_lock_unlock(v5);
    swift_release(v4);
    sub_100042964();
    sub_10008845C();
    uint64_t v7 = v15;
    if ((unint64_t)v15 >> 62)
    {
      if (v15 >= 0) {
        v15 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter(v15);
    }

    else
    {
      uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InAppCheckDownloadQueueCountResponse();
    sub_1000D1ED4(v16);
    uint64_t v17 = swift_retain();
    sub_100196860(v17);
    sub_100042938();
    sub_100042958();
    sub_100024F0C();
    uint64_t v13 = 3LL;
  }

  else
  {
    sub_1000ACB64(0x2064696C61766E49LL, 0xEF74736575716572LL, 6u, (uint64_t)v21);
    sub_100042938();
    uint64_t v13 = 21LL;
  }

  ASOctaneSupportXPCService::HTTPVersion v18 = HTTPVersion.init(major:minor:)(1LL, 1LL);
  uint64_t v19 = type metadata accessor for HTTPResponseHead._Storage();
  uint64_t result = swift_allocObject(v19, 44LL, 7LL);
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 32) = v13;
  *(ASOctaneSupportXPCService::HTTPVersion *)(result + 40) = v18;
  *(void *)a2 = result;
  *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 136), 8) = _swiftEmptyArrayStorage;
  *(_BYTE *)(a2 + 16) = 2;
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = v7;
  *(void *)(a2 + 40) = v4;
  *(void *)(a2 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v5;
  *(_BYTE *)(a2 + 62) = BYTE6(v6);
  *(_WORD *)(a2 + 60) = WORD2(v6);
  *(_DWORD *)(a2 + 56) = v6;
  return result;
}

uint64_t type metadata accessor for InAppCheckDownloadQueueRoute()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService28InAppCheckDownloadQueueRoute);
}

  ;
}

uint64_t sub_100042958()
{
  return sub_10003A9EC(v1, v0);
}

void *sub_100042964()
{
  return sub_100019F58(v0, *(void *)(v1 + 112));
}

uint64_t sub_100042970()
{
  uint64_t v0 = sub_1000175B0(&qword_1002AAFC8);
  uint64_t v1 = swift_allocObject(v0, 24LL, 7LL);
  uint64_t v2 = sub_1000175B0(&qword_1002AAFD0);
  swift_allocObject(v2, 24LL, 7LL);
  uint64_t result = sub_1000434F8((void (__cdecl *)(void *))j_j__swift_release);
  *(void *)(v1 + 16) = result;
  qword_1002EB8F8 = v1;
  return result;
}

uint64_t sub_1000429D8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5 = v4;
  swift_getObjectType(a1);
  sub_1000175B0(&qword_1002AAFD8);
  sub_1000436C4();
  uint64_t v9 = sub_10004370C();
  *(void *)(v5 + 16) = sub_1000436D4(v9, v10, v11, v12, 45LL);
  sub_1000436C4();
  uint64_t v13 = sub_10004370C();
  uint64_t v17 = sub_1000436D4(v13, v14, v15, v16, 46LL);
  swift_unknownObjectRelease(a1);
  *(void *)(v5 + 24) = v17;
  *(_DWORD *)(v5 + 32) = a3;
  *(_DWORD *)(v5 + 36) = a4;
  return v5;
}

uint64_t sub_100042A78()
{
  return swift_retain(*(void *)(v0 + 16));
}

void sub_100042A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v20 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v19 = sub_1000436A8();
  uint64_t v10 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  sub_100022788();
  sub_100042C50();
  uint64_t v12 = v11;
  uint64_t v13 = (void *)sub_100019310((uint64_t)&unk_100277EA8, 48LL);
  v13[2] = v3;
  v13[3] = a1;
  void v13[4] = a2;
  v13[5] = a3;
  aBlock[4] = sub_100043628;
  __int128 v23 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000169C8;
  aBlock[3] = &unk_100277EC0;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v15 = swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter(v15);
  uint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_1000221A8( (unint64_t *)&qword_1002B6F20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = sub_1000175B0(&qword_1002A9118);
  uint64_t v18 = sub_100043668((unint64_t *)&qword_1002B6F30, &qword_1002A9118);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v9, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v5, v4, v14);
  _Block_release(v14);

  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v4, v9);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v5, v19);
  swift_release(v23);
  swift_retain();
  sub_10002A580();
}

void sub_100042C50()
{
  uint64_t v2 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100022788();
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v8);
  uint64_t v9 = sub_1000436A8();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1002A8CA0 != -1) {
    swift_once(&qword_1002A8CA0, sub_100042970);
  }
  if (!sub_100117EE4())
  {
    type metadata accessor for MultiThreadedEventLoopGroup();
    uint64_t v12 = static MultiThreadedEventLoopGroup.currentEventLoop.getter();
    swift_unknownObjectRelease(v12);
    unint64_t v13 = sub_1000435C0();
    unint64_t v18 = v13;
    if (v12)
    {
      static DispatchQoS.unspecified.getter(v13);
      uint64_t v19 = _swiftEmptyArrayStorage;
      uint64_t v14 = sub_1000221A8( (unint64_t *)&qword_1002AAFB0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
      uint64_t v15 = sub_1000175B0((uint64_t *)&unk_1002B6F80);
      uint64_t v16 = sub_100043668((unint64_t *)&qword_1002AAFB8, (uint64_t *)&unk_1002B6F80);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v15, v16, v8, v14);
      (*(void (**)(char *, void, uint64_t))(v5 + 104))( v7,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v4);
      uint64_t v17 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002CLL,  0x8000000100219780LL,  v11,  v0,  v7,  0LL);
      v17;
      sub_100042EBC(v17);
    }

    else
    {
      (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))( v1,  enum case for DispatchQoS.QoSClass.default(_:),  v2);
      static OS_dispatch_queue.global(qos:)(v1);
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
    }
  }

  sub_10002A580();
}

void sub_100042EBC(void *a1)
{
  uint64_t v3 = pthread_getspecific(*(void *)(*(void *)(v1 + 16) + 16LL));
  if (v3) {
    swift_release(v3);
  }
  if (a1)
  {
    uint64_t v4 = sub_1000175B0(&qword_1002AAFC0);
    uint64_t v5 = (void *)swift_allocObject(v4, 32LL, 7LL);
    _OWORD v5[2] = v1;
    v5[3] = a1;
    swift_retain();
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  id v6 = a1;
  sub_100043560(v5);
}

uint64_t sub_100042F48(uint64_t a1)
{
  uint64_t v3 = pthread_getspecific(*(void *)(*(void *)(v1 + 16) + 16LL));
  if (v3) {
    swift_release(v3);
  }
  if (a1)
  {
    uint64_t v4 = sub_1000175B0(&qword_1002AAFE0);
    uint64_t v5 = (void *)sub_100019310(v4, 32LL);
    _OWORD v5[2] = v1;
    v5[3] = a1;
    swift_retain();
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  swift_retain();
  sub_100043560(v5);
  return swift_release(a1);
}

void sub_100042FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = 0LL;
  *(void *)&v21.ai_flags = 0LL;
  v21.ai_addrlen = 0;
  memset(&v21.ai_canonname, 0, 24);
  *(void *)&v21.ai_socktype = *(void *)(v3 + 32);
  uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  uint64_t v9 = v8;
  uint64_t v10 = String.utf8CString.getter(a1, a2);
  uint64_t v11 = String.utf8CString.getter(v7, v9);
  swift_bridgeObjectRelease();
  LODWORD(EventLoop.assertInEventLoop(file:line:)(v5, v6, v7, 654LL, v8, v9) = getaddrinfo((const char *)(v10 + 32), (const char *)(v11 + 32), &v21, &v22);
  swift_release(v10);
  swift_release(v11);
  if ((_DWORD)v9)
  {
    unint64_t v12 = sub_100043584();
    uint64_t v13 = sub_1000252D0((uint64_t)&type metadata for SocketAddressError, v12);
    *(void *)uint64_t v14 = a1;
    *(void *)(v14 + _Block_object_dispose((const void *)(v1 - 136), 8) = a2;
    *(void *)(v14 + 16) = a3;
    *(_BYTE *)(v14 + 24) = 0;
    swift_bridgeObjectRetain();
    sub_1000433AC(v13);
    uint64_t v15 = v13;
LABEL_3:
    swift_errorRelease(v15);
    return;
  }

  uint64_t v16 = v22;
  if (!v22)
  {
    unint64_t v17 = sub_100043584();
    uint64_t v18 = sub_1000252D0((uint64_t)&type metadata for SocketAddressError, v17);
    sub_1000436E4(v18, v19);
    sub_1000433AC(v20);
    uint64_t v15 = v18;
    goto LABEL_3;
  }

  sub_100043160((uint64_t)v22, a1, a2);
  freeaddrinfo(v16);
}

void sub_100043160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = _swiftEmptyArrayStorage;
  uint64_t v7 = _swiftEmptyArrayStorage;
  while (1)
  {
    int v8 = *(_DWORD *)(a1 + 4);
    if (v8 == 30)
    {
      uint64_t v19 = *(int **)(a1 + 32);
      if (!v19) {
        goto LABEL_21;
      }
      int v20 = *v19;
      int v21 = v19[1];
      uint64_t v22 = *((void *)v19 + 2);
      uint64_t v38 = *((void *)v19 + 1);
      int v23 = v19[6];
      uint64_t v24 = sub_1000175B0(&qword_1002AAFA0);
      uint64_t v25 = sub_100019310(v24, 64LL);
      *(_DWORD *)(v25 + 16) = v20;
      *(_DWORD *)(v25 + 20) = v21;
      *(void *)(v25 + 24) = v38;
      *(void *)(v25 + 32) = v22;
      *(_DWORD *)(v25 + 40) = v23;
      *(void *)(v25 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = a2;
      *(void *)(v25 + 56) = a3;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
      {
        sub_10002EB70();
        uint64_t v7 = v28;
      }

      uint64_t v13 = v25 | 0x4000000000000000LL;
      unint64_t v16 = v7[2];
      unint64_t v26 = v7[3];
      unint64_t v17 = v16 + 1;
      if (v16 >= v26 >> 1)
      {
        sub_1000436F8(v26);
        sub_10002EB70();
        uint64_t v7 = v18;
      }

      else
      {
        uint64_t v18 = v7;
      }

      goto LABEL_14;
    }

    if (v8 != 2)
    {
      unint64_t v33 = sub_100043584();
      uint64_t v34 = sub_1000252D0((uint64_t)&type metadata for SocketAddressError, v33);
      sub_1000436E4(v34, v35);
      sub_1000433AC(v36);
      swift_errorRelease(v34);
      goto LABEL_19;
    }

    uint64_t v9 = *(int **)(a1 + 32);
    if (!v9) {
      break;
    }
    int v11 = *v9;
    int v10 = v9[1];
    uint64_t v12 = sub_1000175B0(&qword_1002AAFA8);
    uint64_t v13 = sub_100019310(v12, 48LL);
    uint64_t v14 = *((void *)v9 + 1);
    *(_DWORD *)(v13 + 16) = v11;
    *(_DWORD *)(v13 + 20) = v10;
    *(void *)(v13 + 24) = v14;
    *(void *)(v13 + 32) = a2;
    *(void *)(v13 + 40) = a3;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
    {
      sub_10002EB70();
      id v6 = v27;
    }

    unint64_t v16 = v6[2];
    unint64_t v15 = v6[3];
    unint64_t v17 = v16 + 1;
    if (v16 >= v15 >> 1)
    {
      sub_1000436F8(v15);
      sub_10002EB70();
      id v6 = v18;
    }

    else
    {
      uint64_t v18 = v6;
    }

uint64_t sub_1000433AC(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  swift_errorRetain(a1);
  sub_100098F58(a1, 1LL, v3);
  swift_errorRelease(a1);
  uint64_t v4 = *(void *)(v1 + 16);
  swift_errorRetain(a1);
  sub_100098F58(a1, 1LL, v4);
  return swift_errorRelease(a1);
}

uint64_t sub_100043410()
{
  return v0;
}

uint64_t sub_100043434()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for GetaddrinfoResolver()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService19GetaddrinfoResolver);
}

uint64_t sub_100043474()
{
  return sub_100042A78();
}

void sub_100043494(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1000434B4(void (__cdecl *a1)(void *))
{
  return sub_1000434F8(a1);
}

uint64_t sub_1000434F8(void (__cdecl *a1)(void *))
{
  pthread_key_t v3 = 0LL;
  if (pthread_key_create(&v3, a1)) {
    __break(1u);
  }
  *(void *)(v1 + 16) = v3;
  return v1;
}

uint64_t sub_100043560(void *a1)
{
  uint64_t result = pthread_setspecific(*(void *)(v1 + 16), a1);
  if ((_DWORD)result) {
    __break(1u);
  }
  return result;
}

unint64_t sub_100043584()
{
  unint64_t result = qword_1002AAF98;
  if (!qword_1002AAF98)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SocketAddressError,  &type metadata for SocketAddressError);
    atomic_store(result, (unint64_t *)&qword_1002AAF98);
  }

  return result;
}

unint64_t sub_1000435C0()
{
  unint64_t result = qword_1002B6F70;
  if (!qword_1002B6F70)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002B6F70);
  }

  return result;
}

uint64_t sub_1000435FC()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_100043628()
{
}

uint64_t sub_100043650(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100043660(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100043668(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_100018EC0(a2);
    uint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1000436A8()
{
  return type metadata accessor for DispatchQoS(0LL);
}

uint64_t sub_1000436C4()
{
  return EmbeddedChannel.WrongTypeError.actual.getter(v0, v1);
}

uint64_t sub_1000436D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EventLoop.makePromise<A>(of:file:line:)(a1, a2, a3, a4, a5, v6, v7, v5);
}

void sub_1000436E4(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = 0LL;
  *(_BYTE *)(a2 + 24) = 2;
}

BOOL sub_1000436F8@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_10004370C()
{
  return v0;
}

uint64_t sub_100043720()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_100043FE4();
  uint64_t v4 = UUID.init()(v3);
  uint64_t v5 = UUID.uuidString.getter(v4);
  uint64_t v7 = v6;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
  v11[2] = v5;
  v11[3] = v7;
  v11[0] = 45LL;
  v11[1] = 0xE100000000000000LL;
  unint64_t v8 = sub_10001B4A0();
  uint64_t v9 = StringProtocol.components<A>(separatedBy:)(v11, &type metadata for String, &type metadata for String, v8, v8);
  if (*(void *)(v9 + 16))
  {
    uint64_t v5 = *(void *)(v9 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100043804(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = sub_100043FBC();
  uint64_t v12 = type metadata accessor for NSDecimal.FormatStyle.Currency(v11);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_10001DAD0();
  uint64_t v16 = v15 - v14;
  uint64_t v18 = *(void *)(a4 + 16);
  uint64_t v17 = *(void *)(a4 + 24);
  uint64_t v20 = *(void *)(a5 + 16);
  uint64_t v19 = *(void *)(a5 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Locale.init(identifier:)(v20, v19);
  NSDecimal.FormatStyle.Currency.init(code:locale:)(v18, v17, v5);
  unint64_t v21 = sub_100043F7C();
  NSDecimal.formatted<A>(_:)(&v24, v16, a1, a2, a3, v12, v21);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v16, v12);
  return v24;
}

id sub_100043918()
{
  id v0 = [objc_allocWithZone(NSDateFormatter) init];
  [v0 setDateStyle:2];
  id result = [v0 setTimeStyle:0];
  qword_1002AAFE8 = (uint64_t)v0;
  return result;
}

uint64_t sub_100043978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = v10 - v9;
  uint64_t v12 = type metadata accessor for Locale(0LL);
  sub_10001762C(v11, 1LL, 1LL, v12);
  uint64_t v13 = NSDecimal.init(string:locale:)(a1, a2, v11);
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  sub_100043F40(v11, &qword_1002AAFF0);
  if ((v17 & 0x100000000LL) != 0)
  {
    NSDecimal.init(floatLiteral:)(v18, 0.0);
    uint64_t v13 = v19;
    uint64_t v15 = v20;
    LODWORD(v17) = v21;
  }

  return sub_100043804(v13, v15, v17, a3, a4);
}

double sub_100043A60(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v41 = a3;
  int v40 = a2;
  uint64_t v39 = a1;
  int v38 = a4;
  int v42 = a4;
  uint64_t v6 = type metadata accessor for DateComponents(0LL);
  uint64_t v36 = *(void *)(v6 - 8);
  uint64_t v37 = v6;
  sub_100043FD8();
  __chkstk_darwin(v7);
  uint64_t v8 = sub_100043FBC();
  uint64_t v9 = type metadata accessor for Calendar.Identifier(v8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_10001DAD0();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = type metadata accessor for Calendar(0LL);
  uint64_t v34 = *(void *)(v14 - 8);
  uint64_t v35 = v14;
  sub_100043FD8();
  __chkstk_darwin(v15);
  sub_100043FE4();
  sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  sub_100043FD8();
  __chkstk_darwin(v16);
  sub_10001DAD0();
  uint64_t v19 = v18 - v17;
  uint64_t v20 = type metadata accessor for Date(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v22);
  unint64_t v27 = (char *)&v33 - v26;
  if (v42)
  {
    uint64_t v28 = v41;
    double v29 = Date.timeIntervalSinceReferenceDate.getter(v25);
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v24, v28, v20);
    return v29 + sub_10019EC88(v39, v40, v38, (uint64_t)v24);
  }

  else
  {
    (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))( v13,  enum case for Calendar.Identifier.gregorian(_:),  v9);
    Calendar.init(identifier:)(v13);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
    sub_1001BE220(v39, v40);
    Calendar.date(byAdding:to:wrappingComponents:)(v5, v41, 0LL);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v5, v37);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v4, v35);
    if (sub_10001D158(v19, 1LL, v20) == 1)
    {
      Date.init()();
      uint64_t v31 = sub_100043F40(v19, (uint64_t *)&unk_1002AFCD0);
    }

    else
    {
      uint64_t v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 32))(v27, v19, v20);
    }

    double v30 = Date.timeIntervalSinceReferenceDate.getter(v31);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v27, v20);
  }

  return v30;
}

void sub_100043CDC(void *a1)
{
  if (a1[2])
  {
    uint64_t v2 = a1 + 7;
    uint64_t v3 = a1[5];
    static Hasher._hash(seed:_:)(v3, 0LL);
    sub_100043FFC();
    if ((v6 & 1) != 0)
    {
      uint64_t v7 = 0LL;
      BOOL v8 = 0;
      uint64_t v9 = ~v5;
      uint64_t v10 = a1[6];
      while (1)
      {
        while (*(void *)(v10 + 8 * v4) != v7)
        {
          unint64_t v4 = (v4 + 1) & v9;
        }

        if (v8) {
          break;
        }
        if (__CFADD__(v7++, 1LL))
        {
          __break(1u);
          return;
        }

        static Hasher._hash(seed:_:)(v3, v7);
        sub_100043FFC();
        if ((v12 & 1) == 0) {
          return;
        }
        BOOL v8 = v7 == -1;
      }
    }
  }

uint64_t sub_100043DB4()
{
  uint64_t v0 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0LL);
  sub_100043E18(v0, qword_1002EB900);
  uint64_t v1 = (void *)sub_100018F68(v0, (uint64_t)qword_1002EB900);
  *uint64_t v1 = sub_100043E58;
  v1[1] = 0LL;
  return (*(uint64_t (**)(void))(*(void *)(v0 - 8) + 104LL))();
}

uint64_t *sub_100043E18(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

uint64_t sub_100043E58(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[3];
  uint64_t v3 = a2[4];
  sub_100019F58(a2, v2);
  uint64_t v4 = dispatch thunk of Encoder.singleValueContainer()(v11, v2, v3);
  double v5 = Date.timeIntervalSince1970.getter(v4) * 1000.0;
  double v6 = round(v5);
  if (v5 < 0.0) {
    double v7 = 0.0;
  }
  else {
    double v7 = v6;
  }
  uint64_t v8 = v12;
  uint64_t v9 = v13;
  sub_100043F18((uint64_t)v11, v12);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(v8, v9, v7);
  return sub_100019F7C(v11);
}

uint64_t sub_100043F18(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

uint64_t sub_100043F40(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000175B0(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

unint64_t sub_100043F7C()
{
  unint64_t result = qword_1002AAFF8;
  if (!qword_1002AAFF8)
  {
    uint64_t v1 = type metadata accessor for NSDecimal.FormatStyle.Currency(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSDecimal.FormatStyle.Currency, v1);
    atomic_store(result, (unint64_t *)&qword_1002AAFF8);
  }

  return result;
}

uint64_t sub_100043FBC()
{
  return 0LL;
}

  ;
}

  ;
}

  ;
}

uint64_t destroy for CreateAppReceiptRequest(void *a1)
{
  return swift_bridgeObjectRelease(a1[11]);
}

void *initializeWithCopy for CreateAppReceiptRequest(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

void *assignWithCopy for CreateAppReceiptRequest(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[8] = a2[8];
  uint64_t v12 = a2[9];
  uint64_t v13 = a1[9];
  a1[9] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[10] = a2[10];
  uint64_t v14 = a2[11];
  uint64_t v15 = a1[11];
  a1[11] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

void *initializeWithTake for CreateAppReceiptRequest(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

void *assignWithTake for CreateAppReceiptRequest(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[6] = a2[6];
  a1[7] = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a2[9];
  uint64_t v13 = a1[9];
  a1[8] = a2[8];
  a1[9] = v12;
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = a2[11];
  uint64_t v15 = a1[11];
  a1[10] = a2[10];
  a1[11] = v14;
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for CreateAppReceiptRequest(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 96))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CreateAppReceiptRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8_Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 96) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for CreateAppReceiptRequest()
{
  return &type metadata for CreateAppReceiptRequest;
}

unint64_t sub_100044304(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002711E0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6) {
    return 6LL;
  }
  else {
    return v3;
  }
}

uint64_t static NIOHTTPClientUpgradeError.receivedResponseBeforeRequestSent.getter()
{
  return 6LL;
}

uint64_t sub_100044358(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100044390 + 4 * byte_1001F5E70[a1]))( 0x692D656C646E7562LL,  0xE900000000000064LL);
}

uint64_t sub_100044390()
{
  return 0x2D6E6F6973726576LL;
}

unint64_t sub_1000443AC()
{
  return 0xD000000000000012LL;
}

uint64_t sub_1000443C8()
{
  return 1684632935LL;
}

uint64_t sub_1000443D8()
{
  return 0x6E4F707041534F69LL;
}

uint64_t sub_1000443F8()
{
  return 6580598LL;
}

uint64_t sub_100044408(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100044440 + 4 * byte_1001F5E76[a1]))( 0x692D656C646E7562LL,  0xE900000000000064LL);
}

uint64_t sub_100044440()
{
  return 0x2D6E6F6973726576LL;
}

unint64_t sub_10004445C()
{
  return 0xD000000000000012LL;
}

uint64_t sub_100044478()
{
  return 1684632935LL;
}

uint64_t sub_100044488()
{
  return 0x6E4F707041534F69LL;
}

uint64_t sub_1000444A8()
{
  return 6580598LL;
}

uint64_t sub_1000444B8(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_1000175B0(&qword_1002AB010);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100019F58(a1, v9);
  unint64_t v11 = sub_100044AAC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for CreateAppReceiptRequest.CodingKeys,  &type metadata for CreateAppReceiptRequest.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v31 = 0;
  sub_100023EB4(v12, v13, (uint64_t)&v31);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    char v30 = 1;
    sub_100023EB4(v14, v15, (uint64_t)&v30);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    char v29 = 2;
    sub_100044D1C(v16, v17, (uint64_t)&v29);
    uint64_t v18 = v3[6];
    uint64_t v19 = v3[7];
    char v28 = 3;
    sub_100044D1C(v18, v19, (uint64_t)&v28);
    uint64_t v20 = v3[8];
    uint64_t v21 = v3[9];
    char v27 = 4;
    sub_100044D1C(v20, v21, (uint64_t)&v27);
    uint64_t v22 = v3[10];
    uint64_t v23 = v3[11];
    char v26 = 5;
    sub_100044D1C(v22, v23, (uint64_t)&v26);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100044624@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_1000175B0(&qword_1002AB000);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100019F58(a1, v9);
  unint64_t v11 = sub_100044AAC();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for CreateAppReceiptRequest.CodingKeys,  &type metadata for CreateAppReceiptRequest.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_10001A400();
  }
  char v45 = 0;
  uint64_t v12 = sub_100044D38((uint64_t)&v45);
  char v44 = 1;
  sub_100044D2C(v12, v13);
  uint64_t v14 = sub_100044D38((uint64_t)&v44);
  uint64_t v39 = v9;
  uint64_t v35 = v14;
  uint64_t v36 = v12;
  char v43 = 2;
  sub_100044D2C(v14, v15);
  uint64_t v16 = sub_100044D0C((uint64_t)&v43);
  uint64_t v37 = v17;
  uint64_t v38 = v9;
  uint64_t v34 = v16;
  char v42 = 3;
  sub_100044D2C(v16, v17);
  uint64_t v33 = sub_100044D0C((uint64_t)&v42);
  char v41 = 4;
  sub_100044D2C(v33, v18);
  uint64_t v31 = sub_100044D0C((uint64_t)&v41);
  uint64_t v32 = v19;
  char v40 = 5;
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_100044D0C((uint64_t)&v40);
  uint64_t v22 = v21;
  uint64_t v23 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v30 = v20;
  v23(v8, v5);
  swift_bridgeObjectRetain();
  sub_10001A400();
  swift_bridgeObjectRelease();
  uint64_t v24 = v32;
  swift_bridgeObjectRelease();
  uint64_t v25 = v9;
  sub_10003561C();
  uint64_t v26 = v37;
  swift_bridgeObjectRelease();
  uint64_t v27 = v38;
  swift_bridgeObjectRelease();
  uint64_t v28 = v39;
  uint64_t result = sub_10003561C();
  *a2 = v36;
  a2[1] = v28;
  a2[2] = v35;
  a2[3] = v27;
  a2[4] = v34;
  a2[5] = v26;
  a2[6] = v33;
  a2[7] = v25;
  a2[8] = v31;
  a2[9] = v24;
  a2[10] = v30;
  a2[11] = v22;
  return result;
}

void sub_100044938(char *a1)
{
}

void sub_100044944()
{
}

void sub_10004494C(uint64_t a1)
{
}

void sub_100044954(uint64_t a1)
{
}

unint64_t sub_10004495C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100044304(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100044988@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100044358(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000449B0()
{
  return sub_100044408(*v0);
}

uint64_t sub_1000449B8@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10004434C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000449DC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = static NIOHTTPClientUpgradeError.receivedResponseBeforeRequestSent.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100044A00(uint64_t a1)
{
  unint64_t v2 = sub_100044AAC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100044A28(uint64_t a1)
{
  unint64_t v2 = sub_100044AAC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100044A50@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (void *)sub_100044624(a1, v5);
  if (!v2) {
    return memcpy(a2, v5, 0x60uLL);
  }
  return result;
}

uint64_t sub_100044A98(void *a1)
{
  return sub_1000444B8(a1);
}

unint64_t sub_100044AAC()
{
  unint64_t result = qword_1002AB008;
  if (!qword_1002AB008)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F6024, &type metadata for CreateAppReceiptRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AB008);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for CreateAppReceiptRequest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 5) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for CreateAppReceiptRequest.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = 1;
  }
  else {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_100044BBC + 4 * byte_1001F5E81[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100044BF0 + 4 * byte_1001F5E7C[v4]))();
}

uint64_t sub_100044BF0(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100044BF8(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x100044C00LL);
  }
  return result;
}

uint64_t sub_100044C0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x100044C14LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_100044C18(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100044C20(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CreateAppReceiptRequest.CodingKeys()
{
  return &type metadata for CreateAppReceiptRequest.CodingKeys;
}

unint64_t sub_100044C40()
{
  unint64_t result = qword_1002AB018;
  if (!qword_1002AB018)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F5FFC, &type metadata for CreateAppReceiptRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AB018);
  }

  return result;
}

unint64_t sub_100044C80()
{
  unint64_t result = qword_1002AB020;
  if (!qword_1002AB020)
  {
    unint64_t result = swift_getWitnessTable("M!\b", &type metadata for CreateAppReceiptRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AB020);
  }

  return result;
}

unint64_t sub_100044CC0()
{
  unint64_t result = qword_1002AB028;
  if (!qword_1002AB028)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F5F5C, &type metadata for CreateAppReceiptRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AB028);
  }

  return result;
}

uint64_t sub_100044CFC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_100044D0C(uint64_t a1)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, v1);
}

uint64_t sub_100044D1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_100044D2C(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_100044D38(uint64_t a1)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t sub_100044D48()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 88));
}

uint64_t sub_100044D50()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 104));
}

uint64_t sub_100044D58()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 96));
}

double sub_100044D60@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for JSONDecoder(0LL);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  JSONDecoder.init()();
  sub_100046F78();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)( &type metadata for EventManager.EventFilter,  a1,  a2,  &type metadata for EventManager.EventFilter);
  sub_10003A9EC(a1, a2);
  swift_release();
  if (!v3)
  {
    double result = *(double *)&v9;
    *a3 = v9;
    a3[1] = v10;
    a3[2] = v11;
  }

  return result;
}

uint64_t sub_100044E1C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a2[1];
  if (!v4)
  {
    if (v5) {
      return 0LL;
    }
    goto LABEL_10;
  }

  if (!v5) {
    return 0LL;
  }
  uint64_t v6 = *a1;
  BOOL v7 = *a1 == *a2 && v4 == v5;
  if (v7 || (char v8 = sub_100048720(v6, v4, *a2, v5), result = 0LL, (v8 & 1) != 0))
  {
LABEL_10:
    uint64_t v10 = a1[3];
    uint64_t v11 = a2[3];
    if (v10)
    {
      if (!v11) {
        return 0LL;
      }
      uint64_t v12 = a1[2];
      uint64_t v13 = a2[2];
      if (v12 != v13 || v10 != v11)
      {
        char v15 = sub_100048720(v12, v10, v13, v11);
        uint64_t result = 0LL;
        if ((v15 & 1) == 0) {
          return result;
        }
      }
    }

    else if (v11)
    {
      return 0LL;
    }

    uint64_t v16 = a1[5];
    uint64_t v17 = a2[5];
    if (v16)
    {
      if (v17)
      {
        uint64_t v18 = a1[4];
        uint64_t v19 = a2[4];
        BOOL v20 = v18 == v19 && v16 == v17;
        if (v20 || (sub_100048720(v18, v16, v19, v17) & 1) != 0) {
          return 1LL;
        }
      }
    }

    else if (!v17)
    {
      return 1LL;
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_100044EF0(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x4449656C646E7562LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v5 = 0xE800000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449656C646E7562LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x49746375646F7270LL && a2 == 0xE900000000000044LL)
  {
    unint64_t v8 = 0xE900000000000044LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746375646F7270LL, 0xE900000000000044LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0xD000000000000013LL && a2 == 0x8000000100216F80LL)
  {
    swift_bridgeObjectRelease(0x8000000100216F80LL);
    return 2LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x8000000100216F80LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_100045048(char a1)
{
  if (!a1) {
    return 0x4449656C646E7562LL;
  }
  if (a1 == 1) {
    return 0x49746375646F7270LL;
  }
  return 0xD000000000000013LL;
}

void sub_1000450A8(void *a1)
{
  uint64_t v4 = v1;
  sub_1000175B0(&qword_1002AB2B0);
  sub_1000487F0();
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100019F58(a1, a1[3]);
  unint64_t v9 = sub_100048388();
  sub_100048764((uint64_t)&type metadata for EventManager.EventFilter.CodingKeys, v10, v9);
  uint64_t v11 = *v4;
  uint64_t v12 = v4[1];
  char v20 = 0;
  sub_100048728(v11, v12, (uint64_t)&v20);
  if (!v2)
  {
    uint64_t v13 = v4[2];
    uint64_t v14 = v4[3];
    char v19 = 1;
    sub_100048728(v13, v14, (uint64_t)&v19);
    uint64_t v15 = v4[4];
    uint64_t v16 = v4[5];
    char v18 = 2;
    sub_100048728(v15, v16, (uint64_t)&v18);
  }

  sub_10002A788((uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_1000226D8();
}

void sub_100045190(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_1000175B0(&qword_1002AB278);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10001DAD0();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100019F58(a1, v10);
  unint64_t v12 = sub_100048388();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for EventManager.EventFilter.CodingKeys,  &type metadata for EventManager.EventFilter.CodingKeys,  v12,  v10,  v11);
  if (v2)
  {
    sub_100019F7C(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    char v27 = 0;
    uint64_t v13 = sub_100048738((uint64_t)&v27);
    uint64_t v15 = v14;
    uint64_t v24 = v13;
    char v26 = 1;
    uint64_t v16 = sub_100048738((uint64_t)&v26);
    uint64_t v18 = v17;
    uint64_t v23 = v16;
    char v25 = 2;
    uint64_t v19 = sub_100048738((uint64_t)&v25);
    uint64_t v20 = v9;
    uint64_t v22 = v21;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v20, v5);
    sub_100019F7C(a1);
    *a2 = v24;
    a2[1] = v15;
    a2[2] = v23;
    a2[3] = v18;
    a2[4] = v19;
    a2[5] = v22;
  }

  sub_10001DAB8();
}

uint64_t sub_100045308()
{
  return sub_100045048(*v0);
}

uint64_t sub_100045310@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100044EF0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100045334(uint64_t a1)
{
  unint64_t v2 = sub_100048388();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004535C(uint64_t a1)
{
  unint64_t v2 = sub_100048388();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100045384@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }

  return result;
}

void sub_1000453C4(void *a1)
{
}

uint64_t sub_1000453DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(a1, v1, v3);
}

uint64_t sub_100045414(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x736E617254646C6FLL && a2 == 0xEE006E6F69746361LL)
  {
    unint64_t v5 = 0xEE006E6F69746361LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736E617254646C6FLL, 0xEE006E6F69746361LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x736E61725477656ELL && a2 == 0xEE006E6F69746361LL)
  {
    unint64_t v8 = 0xEE006E6F69746361LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736E61725477656ELL, 0xEE006E6F69746361LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x6D617473656D6974LL && a2 == 0xE900000000000070LL)
  {
    swift_bridgeObjectRelease(0xE900000000000070LL);
    return 2LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974LL, 0xE900000000000070LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t static NIOHTTPObjectAggregatorError.unexpectedMessageHead.getter()
{
  return 3LL;
}

uint64_t sub_1000455B4(char a1)
{
  if (!a1) {
    return 0x736E617254646C6FLL;
  }
  if (a1 == 1) {
    return 0x736E61725477656ELL;
  }
  return 0x6D617473656D6974LL;
}

void sub_100045618(void *a1)
{
  unint64_t v5 = v2;
  sub_1000175B0(&qword_1002AB288);
  sub_1000487F0();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100019F58(a1, a1[3]);
  unint64_t v10 = sub_1000483C4();
  sub_100048764((uint64_t)&type metadata for EventManager.EventData.CodingKeys, v11, v10);
  __int128 v23 = *v5;
  char v22 = 0;
  unint64_t v12 = sub_100048400();
  uint64_t v15 = sub_100048748(v12, v13, v14, (uint64_t)&type metadata for Data);
  if (!v3)
  {
    __int128 v23 = v5[1];
    char v22 = 1;
    sub_100048748(v15, v16, v17, (uint64_t)&type metadata for Data);
    uint64_t v18 = (char *)v5 + *(int *)(type metadata accessor for EventManager.EventData(0LL) + 24);
    LOBYTE(v2sub_100019F7C(v0 + 3) = 2;
    uint64_t v19 = type metadata accessor for Date(0LL);
    sub_100046F3C( (unint64_t *)&qword_1002A93C8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (const char *)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v18, &v23, v1, v19, v20);
  }

  sub_10002A788((uint64_t)v9, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_1000226D8();
}

void sub_100045764(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v20 = *(void *)(v3 - 8);
  uint64_t v21 = v3;
  __chkstk_darwin(v3);
  sub_10001DAD0();
  uint64_t v6 = v5 - v4;
  uint64_t v23 = sub_1000175B0(&qword_1002AB2A0);
  uint64_t v7 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  sub_10001DAD0();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = type metadata accessor for EventManager.EventData(0LL);
  sub_1000226C8();
  __chkstk_darwin(v12);
  sub_10001DAD0();
  uint64_t v15 = v14 - v13;
  *(_OWORD *)uint64_t v15 = xmmword_1001F6080;
  *(_OWORD *)(v15 + 16) = xmmword_1001F6080;
  uint64_t v16 = a1[3];
  uint64_t v17 = a1[4];
  sub_100019F58(a1, v16);
  unint64_t v18 = sub_1000483C4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for EventManager.EventData.CodingKeys,  &type metadata for EventManager.EventData.CodingKeys,  v18,  v16,  v17);
  if (v24)
  {
    sub_100019F7C(a1);
    sub_10003AACC(*(void *)v15, *(void *)(v15 + 8));
    sub_10003AACC(*(void *)(v15 + 16), *(void *)(v15 + 24));
  }

  else
  {
    char v26 = 0;
    unint64_t v19 = sub_10004843C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for Data,  &v26,  v23,  &type metadata for Data,  v19);
    *(_OWORD *)uint64_t v15 = v25;
    char v26 = 1;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for Data,  &v26,  v23,  &type metadata for Data,  v19);
    *(_OWORD *)(v15 + 16) = v25;
    LOBYTE(v25) = 2;
    sub_100046F3C( &qword_1002A93E8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (const char *)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v21, &v25, v23, v21);
    sub_10002A788(v10, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v15 + *(int *)(v11 + 24), v6, v21);
    sub_10004735C(v15, a2, type metadata accessor for EventManager.EventData);
    sub_100019F7C(a1);
    sub_10004739C(v15, type metadata accessor for EventManager.EventData);
  }

  sub_10001DAB8();
}

uint64_t sub_1000459E0()
{
  return sub_1000455B4(*v0);
}

uint64_t sub_1000459E8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100045414(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100045A0C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = static NIOHTTPObjectAggregatorError.unexpectedMessageHead.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100045A30(uint64_t a1)
{
  unint64_t v2 = sub_1000483C4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100045A58(uint64_t a1)
{
  unint64_t v2 = sub_1000483C4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100045A80(void *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_100045A94(void *a1)
{
}

void sub_100045AA8()
{
  uint64_t v0 = type metadata accessor for EventManager();
  uint64_t v1 = swift_allocObject(v0, 120LL, 15LL);
  swift_defaultActor_initialize();
  type metadata accessor for ASDOctaneEventType(0LL);
  uint64_t v3 = v2;
  uint64_t v4 = sub_1000175B0(&qword_1002AB1A8);
  sub_100046F3C( &qword_1002AB1B0,  (uint64_t (*)(uint64_t))type metadata accessor for ASDOctaneEventType,  byte_1001F37D4);
  *(void *)(v1 + 112) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v3, v4);
  qword_1002EB918 = v1;
  sub_1000193B8();
}

void sub_100045B38()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v52 = v5;
  sub_1000175B0(&qword_1002AB1D8);
  sub_1000226C8();
  __chkstk_darwin(v6);
  sub_10001DAD0();
  uint64_t v51 = v8 - v7;
  uint64_t v55 = sub_10004880C();
  uint64_t v9 = *(void *)(v55 - 8);
  uint64_t v10 = __chkstk_darwin(v55);
  uint64_t v12 = (uint64_t)v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)v49 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  unint64_t v18 = (char *)v49 - v17;
  __chkstk_darwin(v16);
  uint64_t v50 = (char *)v49 - v19;
  uint64_t v20 = v0 + 112;
  sub_10002A718(v0 + 112, (uint64_t)&v57, 0LL);
  sub_10012A46C(v4, *(void *)(v0 + 112));
  if (v21) {
    char v22 = v21;
  }
  else {
    char v22 = (uint64_t (*)(uint64_t))_swiftEmptyArrayStorage;
  }
  uint64_t v23 = *((void *)v22 + 2);
  unint64_t v54 = v2;
  if (v23)
  {
    v49[2] = v0 + 112;
    v49[3] = v12;
    v49[5] = v15;
    v49[6] = v4;
    sub_1000487B4();
    uint64_t v25 = (uint64_t)v22 + v24;
    uint64_t v26 = v2[1];
    uint64_t v53 = *v2;
    v49[4] = v9;
    uint64_t v12 = *(void *)(v9 + 72);
    v49[1] = v22;
    swift_bridgeObjectRetain();
    char v22 = type metadata accessor for EventManager.Observer;
    while (1)
    {
      sub_10004735C(v25, (uint64_t)v18, type metadata accessor for EventManager.Observer);
      char v27 = (uint64_t *)&v18[*(int *)(v55 + 20)];
      uint64_t v28 = v27[1];
      uint64_t v9 = v27[2];
      uint64_t v15 = (char *)v27[3];
      uint64_t v20 = v27[4];
      uint64_t v29 = v27[5];
      if (v28)
      {
        if (!v26) {
          goto LABEL_33;
        }
        BOOL v30 = *v27 == v53 && v28 == v26;
        if (!v30 && (sub_100048720(*v27, v28, v53, v26) & 1) == 0) {
          goto LABEL_33;
        }
      }

      else if (v26)
      {
        goto LABEL_33;
      }

      uint64_t v31 = v54[3];
      if (v15)
      {
        if (!v31) {
          goto LABEL_33;
        }
        uint64_t v32 = v54[2];
        BOOL v33 = v9 == v32 && v15 == (char *)v31;
      }

      else if (v31)
      {
        goto LABEL_33;
      }

      uint64_t v34 = v54[5];
      if (v29)
      {
        if (v34)
        {
          uint64_t v35 = v54[4];
          BOOL v36 = v20 == v35 && v29 == v34;
          if (v36 || (sub_100048720(v20, v29, v35, v34) & 1) != 0)
          {
LABEL_45:
            uint64_t v38 = v51;
            sub_100047AB8((uint64_t)v18, v51);
            sub_1000486F4();
            goto LABEL_37;
          }
        }
      }

      else if (!v34)
      {
        goto LABEL_45;
      }

void sub_100045F58()
{
  uint64_t v3 = v2;
  uint64_t v4 = sub_10004880C();
  uint64_t v29 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10004878C();
  uint64_t v27 = v0 + 112;
  sub_10002A718(v0 + 112, (uint64_t)&v32, 0LL);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v6 = v5 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(v5 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  sub_100019320();
  int64_t v11 = 0LL;
  uint64_t v28 = v5;
  int64_t v25 = v10;
  uint64_t v26 = v5 + 64;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    uint64_t v17 = *(void *)(*(void *)(v5 + 56) + 8 * i);
    uint64_t v31 = v17;
    uint64_t v18 = *(void *)(v17 + 16);
    if (v18)
    {
      sub_1000487B4();
      uint64_t v20 = v17 + v19;
      swift_bridgeObjectRetain_n(v17, 3LL);
      uint64_t v21 = *(void *)(v29 + 72);
      while (1)
      {
        sub_10004735C(v20, v1, type metadata accessor for EventManager.Observer);
        char v22 = static UUID.== infix(_:_:)(v1, v3);
        sub_10004739C(v1, type metadata accessor for EventManager.Observer);
        if ((v22 & 1) != 0) {
          break;
        }
        v20 += v21;
        if (!--v18)
        {
          sub_1000487D8();
          uint64_t v5 = v28;
          int64_t v10 = v25;
          uint64_t v6 = v26;
          goto LABEL_25;
        }
      }

      uint64_t v23 = sub_1000487D8();
      __chkstk_darwin(v23);
      sub_100047400((uint64_t (*)(unint64_t))sub_1000473D4);
      if (*(void *)(v31 + 16) >= v24)
      {
        sub_1000349FC();
        sub_10002A718(v27, (uint64_t)v30, 33LL);
        sub_1001B814C();
        swift_endAccess(v30);
LABEL_29:
        swift_release();
        sub_10002A580();
        return;
      }

      goto LABEL_32;
    }

    swift_bridgeObjectRetain();
LABEL_25:
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }

    if (v14 >= v10) {
      goto LABEL_29;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v10) {
        goto LABEL_29;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v10) {
          goto LABEL_29;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v11);
        if (!v15) {
          break;
        }
      }
    }

void sub_1000461F0()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v91 = type metadata accessor for EventManager.EventData(0LL);
  sub_1000226C8();
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v85 = (uint64_t)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  unint64_t v9 = (char *)&v79 - v8;
  __chkstk_darwin(v7);
  int64_t v11 = (uint64_t *)((char *)&v79 - v10);
  uint64_t v12 = sub_10004880C();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_10001DAD0();
  uint64_t v16 = v15 - v14;
  uint64_t v17 = v3;
  if ((swift_isUniquelyReferenced_nonNull(v17) & 1) == 0)
  {
    type metadata accessor for Transaction();
    uint64_t v17 = sub_1000B81D8(v17);
  }

  sub_10002A718(v1 + 112, (uint64_t)&v100, 0LL);
  sub_10012A46C(0LL, *(void *)(v1 + 112));
  if (!v18) {
    goto LABEL_53;
  }
  uint64_t v19 = *(void *)(v18 + 16);
  if (!v19) {
    goto LABEL_52;
  }
  sub_1000487B4();
  uint64_t v79 = v20;
  uint64_t v22 = v20 + v21;
  unint64_t v82 = &v97;
  uint64_t v92 = *(void *)(v13 + 72);
  double v80 = v17;
  uint64_t v23 = v17;
  uint64_t v94 = 0LL;
  uint64_t v95 = v23;
  uint64_t v90 = 0LL;
  unint64_t v93 = 0xF000000000000000LL;
  uint64_t v87 = (char *)&type metadata for Any + 8;
  *(void *)&__int128 v24 = 136315138LL;
  __int128 v81 = v24;
  uint64_t v84 = v9;
  id v83 = v11;
  uint64_t v88 = v16;
  uint64_t v89 = v12;
  while (1)
  {
    sub_10004735C(v22, v16, type metadata accessor for EventManager.Observer);
    uint64_t v26 = (uint64_t *)(v16 + *(int *)(v12 + 20));
    uint64_t v27 = v26[1];
    if (v27)
    {
      uint64_t v28 = *v26;
      sub_100019320();
      uint64_t v29 = sub_1000B3DEC();
      if (v29 == v28 && v27 == v30)
      {
        sub_100019390();
        uint64_t v25 = sub_10001EDA0();
      }

      else
      {
        char v32 = sub_1000486E0(v29);
        sub_100019390();
        uint64_t v25 = sub_10001EDA0();
        if ((v32 & 1) == 0) {
          goto LABEL_49;
        }
      }
    }

    uint64_t v33 = v26[3];
    if (v33)
    {
      uint64_t v34 = v26[2];
      sub_100019320();
      uint64_t v35 = sub_1000B3DDC();
      if (v35 == v34 && v33 == v36)
      {
        sub_100019390();
        uint64_t v25 = sub_10001EDA0();
      }

      else
      {
        char v38 = sub_1000486E0(v35);
        sub_100019390();
        uint64_t v25 = sub_10001EDA0();
        if ((v38 & 1) == 0) {
          goto LABEL_49;
        }
      }
    }

    uint64_t v39 = v26[5];
    if (!v39) {
      goto LABEL_32;
    }
    uint64_t v40 = v26[4];
    sub_100019320();
    sub_1000B8508(0xFu);
    if (!v42)
    {
      sub_100019390();
      goto LABEL_49;
    }

    if (v41 == v40 && v42 == v39) {
      break;
    }
    char v44 = sub_1000486E0(v41);
    sub_100019390();
    uint64_t v25 = sub_10001EDA0();
    if ((v44 & 1) != 0) {
      goto LABEL_32;
    }
LABEL_49:
    sub_10004739C(v16, type metadata accessor for EventManager.Observer);
    v22 += v92;
    if (!--v19)
    {
      sub_10003AACC(v94, v93);

      goto LABEL_51;
    }
  }

  sub_100019390();
  uint64_t v25 = sub_10001EDA0();
LABEL_32:
  unint64_t v45 = v93;
  if (v93 >> 60 != 15)
  {
    uint64_t v55 = v94;
    uint64_t v56 = v94;
    unint64_t v57 = v93;
LABEL_46:
    sub_10003AA74(v55, v45);
    if (qword_1002A8CF8 != -1) {
      swift_once(&qword_1002A8CF8, sub_10010EF80);
    }
    sub_1000487E4();
    sub_100110B38(0LL, v56, v57);
    sub_10003AACC(v56, v57);
    sub_10003A9EC(v56, v57);
    unint64_t v93 = v57;
    uint64_t v94 = v56;
    goto LABEL_49;
  }

  uint64_t v46 = v94;
  *int64_t v11 = v94;
  v11[1] = v45;
  v11[2] = v46;
  void v11[3] = v45;
  Date.init()(v25);
  unint64_t v47 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  sub_1000B41BC();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  sub_10001EDA0();
  id v99 = 0LL;
  id v49 = [v47 dataWithJSONObject:isa options:0 error:&v99];

  id v50 = v99;
  if (v49)
  {
    uint64_t v51 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v49);
    unint64_t v53 = v52;

    uint64_t v54 = v90;
  }

  else
  {
    unint64_t v58 = v50;
    uint64_t v59 = _convertNSErrorToError(_:)(v50);

    swift_willThrow(v60);
    swift_errorRelease(v59);
    uint64_t v51 = 0LL;
    uint64_t v54 = 0LL;
    unint64_t v53 = 0xF000000000000000LL;
  }

  sub_10002A718((uint64_t)v11, (uint64_t)&v98, 1LL);
  uint64_t v61 = *v11;
  unint64_t v62 = v11[1];
  *int64_t v11 = v51;
  v11[1] = v53;
  sub_10003AACC(v61, v62);
  sub_10004735C((uint64_t)v11, (uint64_t)v9, type metadata accessor for EventManager.EventData);
  uint64_t v63 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v63, *(unsigned int *)(v63 + 48), *(unsigned __int16 *)(v63 + 52));
  uint64_t v64 = JSONEncoder.init()();
  sub_100046F3C(&qword_1002AB1D0, type metadata accessor for EventManager.EventData, "=!\b");
  uint64_t v66 = dispatch thunk of JSONEncoder.encode<A>(_:)(v9, v91, v65);
  if (v54)
  {
    swift_release(v64);
    swift_errorRelease(v54);
    uint64_t v56 = 0LL;
    unint64_t v57 = 0xF000000000000000LL;
  }

  else
  {
    uint64_t v56 = v66;
    unint64_t v57 = v67;
    swift_release(v64);
  }

  sub_10004739C((uint64_t)v9, type metadata accessor for EventManager.EventData);
  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v90 = 0LL;
  uint64_t v68 = type metadata accessor for Logger(0LL);
  uint64_t v69 = sub_100018F68(v68, (uint64_t)qword_1002EB9D0);
  uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
  os_log_type_t v71 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v70, v71))
  {
    unint64_t v72 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v73 = (void *)swift_slowAlloc(32LL, -1LL);
    id v99 = v73;
    *(_DWORD *)unint64_t v72 = v81;
    uint64_t v86 = v72 + 4;
    uint64_t v74 = (uint64_t)v11;
    uint64_t v75 = v85;
    sub_10004735C(v74, v85, type metadata accessor for EventManager.EventData);
    uint64_t v76 = String.init<A>(describing:)(v75, v91);
    uint64_t v96 = sub_1000CF360(v76, v77, (uint64_t *)&v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v82, v86);
    int64_t v11 = v83;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v70, v71, "Sending subscriptionWillRenew %s", v72, 0xCu);
    swift_arrayDestroy(v73, 1LL);
    sub_10001A408((uint64_t)v73);
    uint64_t v78 = (uint64_t)v72;
    unint64_t v9 = v84;
    sub_10001A408(v78);
  }

  sub_10004739C((uint64_t)v11, type metadata accessor for EventManager.EventData);
  uint64_t v16 = v88;
  uint64_t v12 = v89;
  if (v57 >> 60 != 15)
  {
    sub_1000487E4();
    unint64_t v45 = v93;
    uint64_t v55 = v94;
    goto LABEL_46;
  }

  sub_10004739C(v16, type metadata accessor for EventManager.Observer);
LABEL_51:
  uint64_t v17 = v80;
LABEL_52:
  swift_bridgeObjectRelease();
LABEL_53:

  sub_10002A580();
}

void sub_1000468C4(void *a1)
{
  uint64_t v5 = sub_10004696C((char *)a1);
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  sub_10001762C(v2, 1LL, 1LL, v6);
  uint64_t v7 = (void *)swift_allocObject(&unk_100278140, 48LL, 7LL);
  v7[2] = 0LL;
  v7[3] = 0LL;
  void v7[4] = v1;
  v7[5] = v5;
  swift_retain();
  sub_100157664(v2, (uint64_t)&unk_1002AB1C8, (uint64_t)v7);
  swift_release();
  sub_1000193B8();
}

char *sub_10004696C(char *a1)
{
  if ((swift_isUniquelyReferenced_nonNull(a1) & 1) != 0) {
    return a1;
  }
  else {
    return sub_1000B81D8(a1);
  }
}

uint64_t sub_1000469AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return swift_task_switch(sub_1000469C4, a4, 0LL);
}

uint64_t sub_1000469C4()
{
  return sub_10003786C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000469EC()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for EventManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService12EventManager);
}

uint64_t *sub_100046A30(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v14);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    unint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *unint64_t v9 = *v10;
    v9[1] = v11;
    uint64_t v12 = v10[3];
    v9[2] = v10[2];
    _OWORD v9[3] = v12;
    uint64_t v13 = v10[5];
    _OWORD v9[4] = v10[4];
    v9[5] = v13;
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
  }

  return a1;
}

uint64_t sub_100046AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  int v5 = (void *)(a1 + *(int *)(a2 + 20));
  swift_bridgeObjectRelease(v5[1]);
  swift_bridgeObjectRelease(v5[3]);
  return swift_bridgeObjectRelease(v5[5]);
}

uint64_t sub_100046B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  unint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  uint64_t v11 = v9[3];
  _OWORD v8[2] = v9[2];
  v8[3] = v11;
  uint64_t v12 = v9[5];
  void v8[4] = v9[4];
  v8[5] = v12;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t sub_100046BC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  unint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v11 = *(void *)(a1 + v7 + 8);
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  _OWORD v8[2] = v9[2];
  uint64_t v12 = v9[3];
  uint64_t v13 = v8[3];
  v8[3] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  void v8[4] = v9[4];
  uint64_t v14 = v9[5];
  uint64_t v15 = v8[5];
  v8[5] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t sub_100046C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  unint64_t v9 = (_OWORD *)(a2 + v7);
  __int128 v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  _OWORD v8[2] = v9[2];
  return a1;
}

uint64_t sub_100046CEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  unint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  uint64_t v11 = *(void *)(a1 + v7 + 8);
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = v9[3];
  uint64_t v13 = v8[3];
  _OWORD v8[2] = v9[2];
  v8[3] = v12;
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = v9[5];
  uint64_t v15 = v8[5];
  void v8[4] = v9[4];
  v8[5] = v14;
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t sub_100046D78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100046D84);
}

void sub_100046D84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100048814();
  if (*(_DWORD *)(*(void *)(v4 - 8) + 84LL) == (_DWORD)a2) {
    sub_10002270C(a1, a2, v4);
  }
  else {
    sub_1000193B8();
  }
}

uint64_t sub_100046DF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100046E04);
}

void sub_100046E04(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_100048814();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
  {
    sub_100022718(a1, a2, a2, v8);
  }

  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + _Block_object_dispose((const void *)(v1 - 136), 8) = a2;
    sub_1000193B8();
  }

uint64_t type metadata accessor for EventManager.Observer(uint64_t a1)
{
  return sub_1000201F4(a1, qword_1002AB168, (uint64_t)&nominal type descriptor for EventManager.Observer);
}

uint64_t sub_100046E7C(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "0";
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void sub_100046EEC()
{
}

uint64_t sub_100046F18()
{
  return v0;
}

uint64_t sub_100046F24()
{
  return sub_100046F18();
}

void sub_100046F3C(unint64_t *a1, uint64_t (*a2)(uint64_t), const char *a3)
{
  if (!*a1)
  {
    uint64_t v5 = a2(255LL);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }

  sub_10001945C();
}

unint64_t sub_100046F78()
{
  unint64_t result = qword_1002AB1B8;
  if (!qword_1002AB1B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F622C, &type metadata for EventManager.EventFilter);
    atomic_store(result, &qword_1002AB1B8);
  }

  return result;
}

uint64_t sub_100046FB4()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100046FE8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_1002AB1C4);
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100047060;
  return sub_1000469AC(a1, v4, v5, v7, v6);
}

uint64_t sub_100047060()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return sub_10003786C(*(uint64_t (**)(void))(v2 + 8));
}

void sub_1000470A0(unint64_t a1, unint64_t a2)
{
}

void sub_1000470AC(unint64_t a1, unint64_t a2, uint64_t (*a3)(uint64_t))
{
  if (a1 == a2)
  {
    sub_100023E74();
    return;
  }

  if ((a1 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v5 = *v3;
  unint64_t v6 = *(void *)(*v3 + 16);
  if (v6 <= a1)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  if (v6 <= a2)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v9 = *(void *)(v5 + 32 + 8 * a1);
  uint64_t v10 = *(void *)(v5 + 32 + 8 * a2);
  swift_retain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
  *unint64_t v3 = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v5 = a3(v5);
    *unint64_t v3 = v5;
  }

  if (*(void *)(v5 + 16) <= a1) {
    goto LABEL_16;
  }
  uint64_t v12 = v5 + 8 * a1;
  uint64_t v13 = *(void *)(v12 + 32);
  *(void *)(v12 + 32) = v10;
  uint64_t v14 = swift_release(v13);
  specialized ContiguousArray._endMutation()(v14);
  uint64_t v15 = *v3;
  char v16 = swift_isUniquelyReferenced_nonNull_native(*v3);
  *unint64_t v3 = v15;
  if ((v16 & 1) == 0)
  {
    uint64_t v15 = a3(v15);
    *unint64_t v3 = v15;
  }

  if (*(void *)(v15 + 16) > a2)
  {
    uint64_t v17 = v15 + 8 * a2;
    uint64_t v18 = *(void *)(v17 + 32);
    *(void *)(v17 + 32) = v9;
    uint64_t v19 = swift_release(v18);
    specialized ContiguousArray._endMutation()(v19);
    return;
  }

void sub_1000471C4()
{
  if (v1 == v2)
  {
    sub_10002A580();
    return;
  }

  uint64_t v3 = v1;
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  if (v4 > v1 || v5 <= v1)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v7 = v2;
  __int16 v8 = sub_100048778(v1);
  if ((v8 & 0x100) != 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  if (v4 > v7 || v5 <= v7)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  char v10 = v8;
  __int16 v11 = sub_100048778(v7);
  if ((v11 & 0x100) == 0)
  {
    ByteBufferView.subscript.setter(v11, v3);
    ByteBufferView.subscript.setter(v10, v7);
    return;
  }

void sub_10004727C(unint64_t a1, unint64_t a2)
{
  if (a1 == a2) {
    goto LABEL_10;
  }
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v4 = *v2;
  unint64_t v5 = *(void *)(*v2 + 16);
  if (v5 <= a1)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  if (v5 <= a2)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v7 = *(void *)(v4 + 32 + 8 * a1);
  uint64_t v8 = *(void *)(v4 + 32 + 8 * a2);
  swift_retain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
  {
    sub_1000F2440();
    uint64_t v4 = v9;
  }

  if (*(void *)(v4 + 16) <= a1) {
    goto LABEL_14;
  }
  uint64_t v10 = v4 + 32;
  uint64_t v11 = *(void *)(v4 + 32 + 8 * a1);
  *(void *)(v4 + 32 + 8 * aHasher._combine(_:)(v1 & 1) = v8;
  swift_release(v11);
  if (*(void *)(v4 + 16) > a2)
  {
    uint64_t v12 = *(void *)(v10 + 8 * a2);
    *(void *)(v10 + 8 * a2) = v7;
    swift_release(v12);
    uint64_t *v2 = v4;
LABEL_10:
    sub_100023E74();
    return;
  }

LABEL_15:
  __break(1u);
}

  sub_10005EE30(23840LL);
  uint64_t v7 = v28;
  uint64_t v8 = (void *)v29;
LABEL_21:
  result._object = v8;
  result._countAndFlagsBits = v7;
  return result;
}

  __break(1u);
  return result;
}

  unint64_t result = swift_bridgeObjectRelease();
  *uint64_t v8 = v14;
  v8[1] = v4;
  _OWORD v8[2] = v24;
  v8[3] = v6;
  void v8[4] = v0;
  v8[5] = v15;
  void v8[6] = v3;
  uint64_t v8[7] = v5;
  v8[8] = v1;
  v8[9] = v2;
  return result;
}

  __break(1u);
  return result;
}

    sub_10010C8E0(v4);
    uint64_t v12 = v11;
    uint64_t v7 = v18;
    unint64_t v6 = v19;
    uint64_t v9 = v16;
    uint64_t v8 = v17;
    goto LABEL_16;
  }

    sub_10010C9B8(v4);
    uint64_t v10 = v9;
    uint64_t v7 = v14;
    unint64_t v6 = v15;
    goto LABEL_16;
  }

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

    __break(1u);
  }

  __break(1u);
  return result;
}

        v29[0] = v9;
        uint64_t v17 = v9[2];
        char v16 = v9[3];
        if (v17 >= v16 >> 1)
        {
          sub_1001D4E20((char *)(v16 > 1), v17 + 1, 1);
          uint64_t v9 = (void *)v29[0];
        }

        v9[2] = v17 + 1;
        uint64_t v18 = &v9[2 * v17];
        void v18[4] = v14;
        v18[5] = v15;
        uint64_t v4 = v28;
        uint64_t v12 = Substring.index(after:)(v12, a1, a2, a3, v28);
        if (!--v10) {
          goto LABEL_18;
        }
      }
    }

    __break(1u);
  }

  else
  {
LABEL_18:
    v29[0] = v9;
    uint64_t v19 = sub_1000175B0(&qword_1002B9F88);
    uint64_t v20 = sub_1001CEC48();
    uint64_t v21 = String.init<A>(_:)(v29, v19, v20);
    uint64_t v23 = v22;
    v29[0] = v21;
    v29[1] = v22;
    swift_bridgeObjectRetain();
    __int128 v24 = String.count.getter(v21, v23);
    swift_bridgeObjectRelease();
    uint64_t v25 = v24 & 3;
    if (v24 <= 0) {
      uint64_t v25 = -(-v24 & 3);
    }
    if (v25)
    {
      v26._countAndFlagsBits = 61LL;
      v26._object = (void *)0xE100000000000000LL;
      uint64_t v27 = String.init(repeating:count:)(v26, 4 - v25);
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
    }

    return (char *)v29[0];
  }

  return result;
}

uint64_t type metadata accessor for EventManager.EventData(uint64_t a1)
{
  return sub_1000201F4(a1, qword_1002AB238, (uint64_t)&nominal type descriptor for EventManager.EventData);
}

void sub_10004735C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  sub_10001945C();
}

void sub_10004739C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  sub_10001945C();
}

uint64_t sub_1000473D4(uint64_t a1)
{
  return static UUID.== infix(_:_:)(a1, *(void *)(v1 + 16)) & 1;
}

void sub_100047400(uint64_t (*a1)(unint64_t))
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for EventManager.Observer(0LL);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v35 = (uint64_t)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v34 = (uint64_t)&v31 - v9;
  __chkstk_darwin(v8);
  uint64_t v36 = (uint64_t)&v31 - v11;
  uint64_t v12 = *v1;
  uint64_t v13 = *(void *)(*v1 + 16LL);
  if (v13)
  {
    unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v15 = *(void *)(v10 + 72);
    swift_bridgeObjectRetain();
    unint64_t v16 = 0LL;
    unint64_t v32 = v14;
    while (1)
    {
      char v17 = a1(v12 + v14);
      if (v2)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        return;
      }

      if ((v17 & 1) != 0) {
        break;
      }
      ++v16;
      v14 += v15;
      if (v13 == v16) {
        goto LABEL_6;
      }
    }

    swift_bridgeObjectRelease();
    if (!__OFADD__(v16, 1LL))
    {
      unint64_t v18 = *(void *)(v12 + 16);
      if (v16 + 1 == v18) {
        return;
      }
      uint64_t v19 = v15 + v14;
      unint64_t v20 = v16 + 1;
      uint64_t v31 = v1;
      uint64_t v33 = v15;
      while (v20 < v18)
      {
        uint64_t v21 = v3;
        uint64_t v37 = v19;
        uint64_t v22 = v36;
        sub_10004735C(v12 + v19, v36, type metadata accessor for EventManager.Observer);
        char v23 = a1(v22);
        sub_10004739C(v22, type metadata accessor for EventManager.Observer);
        if ((v23 & 1) != 0)
        {
          uint64_t v3 = v21;
          uint64_t v24 = v33;
        }

        else
        {
          uint64_t v3 = v21;
          uint64_t v24 = v33;
          if (v20 != v16)
          {
            if ((v16 & 0x8000000000000000LL) != 0) {
              goto LABEL_31;
            }
            uint64_t v25 = *v3;
            unint64_t v26 = *(void *)(*v3 + 16LL);
            if (v16 >= v26) {
              goto LABEL_32;
            }
            sub_10004735C(v25 + v32 + v16 * v33, v34, type metadata accessor for EventManager.Observer);
            if (v20 >= v26) {
              goto LABEL_33;
            }
            sub_10004735C(v25 + v37, v35, type metadata accessor for EventManager.Observer);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
            uint64_t v3 = v31;
            *uint64_t v31 = v25;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_100165110();
              uint64_t v25 = v30;
              *uint64_t v3 = v30;
            }

            if (v16 >= *(void *)(v25 + 16)) {
              goto LABEL_34;
            }
            sub_1000479C4(v35, v25 + v32 + v16 * v24);
            if (v20 >= *(void *)(*v3 + 16LL)) {
              goto LABEL_35;
            }
            sub_1000479C4(v34, *v3 + v37);
          }

          if (__OFADD__(v16++, 1LL)) {
            goto LABEL_30;
          }
        }

        unint64_t v29 = v20 + 1;
        if (__OFADD__(v20, 1LL)) {
          goto LABEL_29;
        }
        uint64_t v12 = *v3;
        unint64_t v18 = *(void *)(*v3 + 16LL);
        ++v20;
        uint64_t v19 = v37 + v24;
        if (v29 == v18) {
          return;
        }
      }

      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
    }

    __break(1u);
  }

uint64_t sub_100047708(uint64_t (*a1)(void))
{
  uint64_t v61 = a1;
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  if (v4 == v3) {
    return v4;
  }
  uint64_t v6 = *(unsigned int *)(v1 + 8);
  unsigned int v5 = *(_DWORD *)(v1 + 12);
  uint64_t v7 = v5 - v6;
  if (v5 < v6)
  {
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
  }

  uint64_t v8 = *(void *)v1;
  uint64_t v60 = v1;
  unint64_t v9 = *(unsigned __int8 *)(v1 + 22) | ((unint64_t)*(unsigned __int16 *)(v1 + 20) << 8);
  uint64_t v10 = (void *)(v8 + 24);
  uint64_t v54 = v8;
  swift_retain();
  sub_1000487CC((uint64_t)v10, (uint64_t)v64);
  uint64_t v59 = v4;
  while (1)
  {
    if (v4 >= v3)
    {
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }

    uint64_t v18 = v4 - v6;
    if (__OFSUB__(v4, v6)) {
      goto LABEL_43;
    }
    if (v18 < 0) {
      goto LABEL_44;
    }
    if (v18 >= v7) {
      goto LABEL_45;
    }
    v63[0] = *(_BYTE *)(*v10 + v9 + v4);
    uint64_t v19 = sub_1000487A4((uint64_t)v63, v11, v12, v13, v14, v15, v16, v17, v47, v49, v51, v54, v57, v59, v60, v61);
    if (v2)
    {
      sub_100048804(v19, v11, v12, v13, v14, v15, v16, v17, v47, v49, v51, v54);
      return v4;
    }

    if ((v19 & 1) != 0) {
      break;
    }
    if (v3 == ++v4)
    {
      sub_100048804(v19, v11, v12, v13, v14, v15, v16, v17, v47, v49, v51, v54);
      return v3;
    }
  }

  sub_100048804(v19, v11, v12, v13, v14, v15, v16, v17, v47, v49, v51, v54);
  if (v3 - 1 != v4)
  {
    uint64_t v20 = v4 + 1;
    uint64_t v48 = v63;
    uint64_t v50 = v4 + 1;
    uint64_t v21 = v60;
    uint64_t v58 = v3;
    while (v50 >= v59 && v20 < v3)
    {
      uint64_t v23 = *(unsigned int *)(v21 + 8);
      unint64_t v24 = v20 - v23;
      if (__OFSUB__(v20, v23)) {
        goto LABEL_47;
      }
      if ((v24 & 0x8000000000000000LL) != 0) {
        goto LABEL_48;
      }
      unsigned int v25 = *(_DWORD *)(v21 + 12);
      BOOL v26 = v25 >= v23;
      uint64_t v27 = v25 - v23;
      if (!v26) {
        goto LABEL_49;
      }
      uint64_t v28 = *(void *)v21;
      uint64_t v29 = *(unsigned __int16 *)(v21 + 20);
      uint64_t v30 = *(unsigned __int8 *)(v21 + 22);
      uint64_t v52 = *(void *)v21 + 24LL;
      uint64_t v55 = v27;
      sub_1000487CC(v52, (uint64_t)v63);
      uint64_t v31 = v30 | (v29 << 8);
      char v62 = *(_BYTE *)(*(void *)(v28 + 24) + v31 + v20);
      char v39 = sub_1000487A4( (uint64_t)&v62,  v32,  v33,  v34,  v35,  v36,  v37,  v38,  (uint64_t)v48,  v50,  v52,  v55,  v58,  v59,  v60,  v61);
      if ((v39 & 1) == 0)
      {
        if (v20 != v4)
        {
          if (v4 < v59 || v4 >= v58) {
            goto LABEL_54;
          }
          unint64_t v41 = v4 - v23;
          if (__OFSUB__(v4, v23)) {
            goto LABEL_55;
          }
          if ((v41 & 0x8000000000000000LL) != 0) {
            goto LABEL_56;
          }
          if (v41 >= v56) {
            goto LABEL_57;
          }
          uint64_t v42 = *v53 + v31 + v23;
          char v43 = *(_BYTE *)(v42 + v41);
          char v62 = *(_BYTE *)(v42 + v24);
          ByteBuffer._setBytes(_:at:)((uint64_t)&v62, (uint64_t)v48, v4);
          char v62 = v43;
          ByteBuffer._setBytes(_:at:)((uint64_t)&v62, (uint64_t)v48, v20);
        }

        if (__OFADD__(v4++, 1LL)) {
          goto LABEL_52;
        }
      }

      uint64_t v45 = v20 + 1;
      uint64_t v21 = v60;
      uint64_t v3 = v58;
      if (__OFADD__(v20, 1LL)) {
        goto LABEL_51;
      }
      ++v20;
      if (v45 == v58) {
        return v4;
      }
    }

    goto LABEL_46;
  }

  return v4;
}

uint64_t sub_1000479C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventManager.Observer(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100047A08(uint64_t a1)
{
  uint64_t v2 = sub_1000175B0(&qword_1002AB1D8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100047A48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002AA990);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100047A90(uint64_t a1)
{
  return a1;
}

uint64_t sub_100047AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EventManager.Observer(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

_OWORD *sub_100047AFC(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *(void *)a2;
    *(void *)uint64_t v4 = *(void *)a2;
    uint64_t v4 = (_OWORD *)(v8 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    unint64_t v7 = *(void *)(a2 + 8);
    if (v7 >> 60 == 15)
    {
      *a1 = *(_OWORD *)a2;
    }

    else
    {
      uint64_t v9 = *(void *)a2;
      sub_10003AA88(*(void *)a2, *(void *)(a2 + 8));
      *(void *)uint64_t v4 = v9;
      *((void *)v4 + Hasher._combine(_:)(v1 & 1) = v7;
    }

    uint64_t v10 = (uint64_t *)(a2 + 16);
    unint64_t v11 = *(void *)(a2 + 24);
    if (v11 >> 60 == 15)
    {
      v4[1] = *(_OWORD *)v10;
    }

    else
    {
      uint64_t v12 = *v10;
      sub_10003AA88(*v10, *(void *)(a2 + 24));
      *((void *)v4 + 2) = v12;
      *((void *)v4 + sub_100019F7C(v0 + 3) = v11;
    }

    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = a2 + v13;
    uint64_t v16 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL))(v14, v15, v16);
  }

  return v4;
}

uint64_t sub_100047BF4(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15) {
    sub_10003A9EC(*a1, v4);
  }
  unint64_t v5 = a1[3];
  if (v5 >> 60 != 15) {
    sub_10003A9EC(a1[2], v5);
  }
  uint64_t v6 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
}

uint64_t sub_100047C64(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = a2[1];
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    uint64_t v7 = *a2;
    sub_10003AA88(*a2, a2[1]);
    *(void *)a1 = v7;
    *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v6;
  }

  uint64_t v8 = a2 + 2;
  unint64_t v9 = a2[3];
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v8;
  }

  else
  {
    uint64_t v10 = *v8;
    sub_10003AA88(*v8, a2[3]);
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + 24) = v9;
  }

  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (uint64_t)a2 + v11;
  uint64_t v14 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
  return a1;
}

uint64_t *sub_100047D30(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 == 15)
  {
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = *(void *)a2;
      sub_10003AA88(*(void *)a2, *(void *)(a2 + 8));
      *a1 = v7;
      a1[1] = v6;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v6 >> 60 == 15)
  {
    sub_100047E84((uint64_t)a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }

  uint64_t v8 = *(void *)a2;
  sub_10003AA88(*(void *)a2, *(void *)(a2 + 8));
  uint64_t v9 = *a1;
  unint64_t v10 = a1[1];
  *a1 = v8;
  a1[1] = v6;
  sub_10003A9EC(v9, v10);
LABEL_8:
  uint64_t v11 = (uint64_t *)(a2 + 16);
  unint64_t v12 = *(void *)(a2 + 24);
  if ((unint64_t)a1[3] >> 60 != 15)
  {
    if (v12 >> 60 != 15)
    {
      uint64_t v14 = *v11;
      sub_10003AA88(*v11, *(void *)(a2 + 24));
      uint64_t v15 = a1[2];
      unint64_t v16 = a1[3];
      a1[2] = v14;
      a1[3] = v12;
      sub_10003A9EC(v15, v16);
      goto LABEL_15;
    }

    sub_100047E84((uint64_t)(a1 + 2));
    goto LABEL_13;
  }

  if (v12 >> 60 == 15)
  {
LABEL_13:
    *((_OWORD *)a1 + Hasher._combine(_:)(v1 & 1) = *(_OWORD *)v11;
    goto LABEL_15;
  }

  uint64_t v13 = *v11;
  sub_10003AA88(*v11, *(void *)(a2 + 24));
  a1[2] = v13;
  a1[3] = v12;
LABEL_15:
  uint64_t v17 = *(int *)(a3 + 24);
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 24LL))(v18, v19, v20);
  return a1;
}

uint64_t sub_100047E84(uint64_t a1)
{
  return a1;
}

_OWORD *sub_100047EB8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  unint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v7, v8);
  return a1;
}

uint64_t sub_100047F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  if (v7 >> 60 == 15)
  {
    sub_100047E84(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }

  uint64_t v8 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v7;
  sub_10003A9EC(v8, v6);
LABEL_6:
  uint64_t v9 = (void *)(a2 + 16);
  unint64_t v10 = *(void *)(a1 + 24);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = *(void *)(a2 + 24);
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = *v9;
      *(void *)(a1 + 24) = v11;
      sub_10003A9EC(v12, v10);
      goto LABEL_11;
    }

    sub_100047E84(a1 + 16);
  }

  *(_OWORD *)(a1 + 16) = *(_OWORD *)v9;
LABEL_11:
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 40LL))(v14, v15, v16);
  return a1;
}

uint64_t sub_100048008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100048014);
}

void sub_100048014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 11)
  {
    sub_1000193B8();
  }

  else
  {
    uint64_t v6 = type metadata accessor for Date(0LL);
    sub_10002270C(a1 + *(int *)(a3 + 24), a2, v6);
  }

uint64_t sub_10004807C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100048088);
}

void sub_100048088(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 11)
  {
    *a1 = 0LL;
    a1[1] = (unint64_t)((~(_DWORD)a2 >> 2) & 3 | (4 * ~(_DWORD)a2)) << 60;
    sub_1000193B8();
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    sub_100022718((uint64_t)a1 + *(int *)(a4 + 24), a2, a2, v7);
  }

uint64_t sub_1000480EC(uint64_t a1)
{
  v4[0] = &unk_1001F6168;
  v4[1] = &unk_1001F6168;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t destroy for EventManager.EventFilter(void *a1)
{
  return swift_bridgeObjectRelease(a1[5]);
}

void *initializeWithCopy for EventManager.EventFilter(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *assignWithCopy for EventManager.EventFilter(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

void *assignWithTake for EventManager.EventFilter(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for EventManager.EventFilter(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(vsub_100019F7C(v0 + 3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EventManager.EventFilter( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 4_Block_object_dispose((const void *)(v1 - 136), 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 4_Block_object_dispose((const void *)(v1 - 136), 8) = 0;
    }
    if (a2) {
      *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for EventManager.EventFilter()
{
  return &type metadata for EventManager.EventFilter;
}

unint64_t sub_100048388()
{
  unint64_t result = qword_1002AB280;
  if (!qword_1002AB280)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F6420, &type metadata for EventManager.EventFilter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AB280);
  }

  return result;
}

unint64_t sub_1000483C4()
{
  unint64_t result = qword_1002AB290;
  if (!qword_1002AB290)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F63D0, &type metadata for EventManager.EventData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AB290);
  }

  return result;
}

unint64_t sub_100048400()
{
  unint64_t result = qword_1002AB298;
  if (!qword_1002AB298)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1002AB298);
  }

  return result;
}

unint64_t sub_10004843C()
{
  unint64_t result = qword_1002AB2A8;
  if (!qword_1002AB2A8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1002AB2A8);
  }

  return result;
}

ValueMetadata *type metadata accessor for EventManager.EventData.CodingKeys()
{
  return &type metadata for EventManager.EventData.CodingKeys;
}

uint64_t _s25ASOctaneSupportXPCService12EventManagerC9EventDataV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = 1;
  }
  else {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000484DC + 4 * byte_1001F6095[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100048510 + 4 * byte_1001F6090[v4]))();
}

uint64_t sub_100048510(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100048518(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x100048520LL);
  }
  return result;
}

uint64_t sub_10004852C(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x100048534LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100048538(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100048540(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EventManager.EventFilter.CodingKeys()
{
  return &type metadata for EventManager.EventFilter.CodingKeys;
}

unint64_t sub_100048560()
{
  unint64_t result = qword_1002AB2B8;
  if (!qword_1002AB2B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F62F0, &type metadata for EventManager.EventFilter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AB2B8);
  }

  return result;
}

unint64_t sub_1000485A0()
{
  unint64_t result = qword_1002AB2C0;
  if (!qword_1002AB2C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F63A8, &type metadata for EventManager.EventData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AB2C0);
  }

  return result;
}

unint64_t sub_1000485E0()
{
  unint64_t result = qword_1002AB2C8;
  if (!qword_1002AB2C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F6318, &type metadata for EventManager.EventData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AB2C8);
  }

  return result;
}

unint64_t sub_100048620()
{
  unint64_t result = qword_1002AB2D0;
  if (!qword_1002AB2D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F6340, &type metadata for EventManager.EventData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AB2D0);
  }

  return result;
}

unint64_t sub_100048660()
{
  unint64_t result = qword_1002AB2D8;
  if (!qword_1002AB2D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F6260, &type metadata for EventManager.EventFilter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AB2D8);
  }

  return result;
}

unint64_t sub_1000486A0()
{
  unint64_t result = qword_1002AB2E0;
  if (!qword_1002AB2E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F6288, &type metadata for EventManager.EventFilter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AB2E0);
  }

  return result;
}

uint64_t sub_1000486E0(uint64_t a1)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, v2, v3, v1, 0LL);
}

  ;
}

uint64_t sub_100048720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL);
}

uint64_t sub_100048728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_100048738(uint64_t a1)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, v1);
}

uint64_t sub_100048748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v6 - 80, v6 - 81, v4, a4, v5);
}

uint64_t sub_100048764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

uint64_t sub_100048778(uint64_t a1)
{
  return sub_100060EBC(a1, 0LL, v1, v2, v3);
}

  ;
}

uint64_t sub_1000487A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t (*a16)(void))
{
  return a16();
}

  ;
}

void sub_1000487C0()
{
}

uint64_t sub_1000487CC(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 0LL, 0LL);
}

uint64_t sub_1000487D8()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_1000487E4()
{
  return sub_10003AA88(v0, v1);
}

  ;
}

uint64_t sub_100048804( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return swift_release(a12);
}

uint64_t sub_10004880C()
{
  return type metadata accessor for EventManager.Observer(0LL);
}

uint64_t sub_100048814()
{
  return type metadata accessor for UUID(0LL);
}

uint64_t sub_10004881C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5 = (void *)(v3 + 16);
  if ((a2 & 1) != 0)
  {
    sub_100035224(v3 + 16, (uint64_t)v17);
    uint64_t v6 = sub_1000F1818(a3);
    if ((v7 & 1) != 0)
    {
      uint64_t v8 = v6;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
      uint64_t v16 = *v5;
      uint64_t v10 = *v5;
      void *v5 = 0x8000000000000000LL;
      Swift::Int v11 = *(void *)(v10 + 24);
      sub_1000175B0(&qword_1002AB3E8);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v11);
      type metadata accessor for ASDOctaneValueIdentifier(0LL);
      uint64_t v13 = v12;
      unint64_t v14 = sub_100048CC8();
      _NativeDictionary._delete(at:)(v8, v16, v13, &type metadata for Int, v14);
      void *v5 = v16;
      swift_bridgeObjectRelease();
    }
  }

  else
  {
    sub_100035224(v3 + 16, (uint64_t)v17);
    sub_1001B8158();
  }

  return swift_endAccess(v17);
}

uint64_t sub_100048920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_1000175B0(&qword_1002A9720);
  __chkstk_darwin(v8);
  uint64_t v10 = &v27[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  if (!a2)
  {
    sub_100035224(v4 + 24, (uint64_t)v27);
    sub_1001B7CE0(a3);
    sub_100048D08();
    goto LABEL_8;
  }

  if (a3 != 31)
  {
    if (a3 != 6)
    {
      if (a3 != 4) {
        return 0LL;
      }
      type metadata accessor for OctaneLocale();
      sub_100019320();
      uint64_t v11 = sub_1000CB708(a1, a2);
      sub_100019390();
      if (v11)
      {
        uint64_t v12 = *(void *)(v11 + 16);
        uint64_t v13 = *(void *)(v11 + 24);
        sub_100035224(v4 + 24, (uint64_t)v27);
        swift_bridgeObjectRetain();
        sub_1001B81BC(v12, v13, 4LL);
        sub_100048D08();
        swift_release();
        return 0LL;
      }

      goto LABEL_23;
    }

    uint64_t v26 = v4;
    uint64_t v18 = qword_1002A8D28;
    sub_100019320();
    if (v18 != -1) {
      swift_once(&qword_1002A8D28, sub_10012A5D0);
    }
    uint64_t v19 = *(void *)(qword_1002EB990 + 16);
    if (!v19)
    {
LABEL_22:
      sub_100019390();
LABEL_23:
      unint64_t v24 = sub_100048C8C();
      uint64_t result = sub_1000252D0((uint64_t)&type metadata for ConfigurationError, v24);
      *unsigned int v25 = 1;
      return result;
    }

    uint64_t v20 = qword_1002EB990 + 56;
    while (1)
    {
      uint64_t v22 = *(void *)(v20 - 24);
      uint64_t v21 = *(void *)(v20 - 16);
      if (v22 == a1 && v21 == a2) {
        break;
      }
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)(v20 - 24), *(void *)(v20 - 16), a1, a2, 0LL) & 1) != 0) {
        goto LABEL_26;
      }
      v20 += 80LL;
      if (!--v19) {
        goto LABEL_22;
      }
    }

    uint64_t v22 = a1;
LABEL_26:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100019390();
    sub_100035224(v26 + 24, (uint64_t)v27);
    swift_bridgeObjectRetain();
    sub_1001B81BC(v22, v21, 6LL);
    sub_100048D08();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_8:
    swift_bridgeObjectRelease();
    return 0LL;
  }

  sub_100019320();
  URL.init(string:)(a1);
  uint64_t v15 = type metadata accessor for URL(0LL);
  if (sub_10001D158((uint64_t)v10, 1LL, v15) != 1)
  {
    sub_1000220E8((uint64_t)v10);
    sub_100035224(v4 + 24, (uint64_t)v27);
    sub_1001B81BC(a1, a2, 31LL);
    sub_100048D08();
    return 0LL;
  }

  sub_100019390();
  sub_1000220E8((uint64_t)v10);
  unint64_t v16 = sub_100048C8C();
  uint64_t result = sub_1000252D0((uint64_t)&type metadata for ConfigurationError, v16);
  *uint64_t v17 = 1;
  return result;
}

uint64_t sub_100048C28()
{
  return v0;
}

uint64_t sub_100048C4C()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for OctaneConfigurationOverrides()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService28OctaneConfigurationOverrides);
}

unint64_t sub_100048C8C()
{
  unint64_t result = qword_1002AB3E0;
  if (!qword_1002AB3E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100200A34, &type metadata for ConfigurationError);
    atomic_store(result, (unint64_t *)&qword_1002AB3E0);
  }

  return result;
}

unint64_t sub_100048CC8()
{
  unint64_t result = qword_1002B94A0;
  if (!qword_1002B94A0)
  {
    type metadata accessor for ASDOctaneValueIdentifier(255LL);
    unint64_t result = swift_getWitnessTable(aU_10, v1);
    atomic_store(result, (unint64_t *)&qword_1002B94A0);
  }

  return result;
}

uint64_t sub_100048D08()
{
  return swift_endAccess(v0 - 104);
}

void *sub_100048D10()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = (void *)v1;
  if (v1 == 1)
  {
    uint64_t v2 = sub_1000A4EA8(0x6E692D6563697270LL, 0xEE00657361657263LL, 1819112552LL, 0xE400000000000000LL);
    uint64_t v3 = *(void *)(v0 + 128);
    *(void *)(v0 + 12_Block_object_dispose((const void *)(v1 - 136), 8) = v2;
    *(void *)(v0 + 136) = v4;
    swift_bridgeObjectRetain();
    sub_10001E95C(v3);
  }

  sub_10001E9A0(v1);
  return v2;
}

void sub_100048DB8(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2;
  LODWORD(v2) = a1;
  uint64_t v6 = sub_1001BCBC8();
  sub_10012A314(1682534515LL, 0xE400000000000000LL, v6);
  if (v8
    && (uint64_t v2 = v7,
        uint64_t v3 = v8,
        sub_10012A314(6580578LL, 0xE300000000000000LL, v6),
        uint64_t v10 = v9,
        uint64_t v12 = v11,
        swift_bridgeObjectRelease(),
        v12))
  {
    uint64_t v6 = 0LL;
    sub_100049080(v2, v3, v10, v12, __src);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LODWORD(v2) = v4;
    uint64_t v18 = sub_100048D10();
    if (v18)
    {
      uint64_t v2 = (uint64_t)v18;
      Swift::Int v20 = v19;
      uint64_t v29 = &type metadata for PriceIncreaseUIRoute.ViewProperties;
      *(void *)&__int128 v27 = swift_allocObject(&unk_1002783F0, 113LL, 7LL);
      memcpy((void *)(v27 + 16), __src, 0x61uLL);
      uint64_t v21 = sub_1000A5464((uint64_t)&v27, v2, v20);
      unint64_t v23 = v22;
      swift_bridgeObjectRelease();
      sub_100019F7C(&v27);
      sub_1000ACB64(v21, v23, 1u, (uint64_t)&v27);
      __int128 v25 = v27;
      uint64_t v6 = v28;
      uint64_t v4 = (uint64_t)v29;
      uint64_t v3 = (void *)(v30 | ((unint64_t)v31 << 32) | ((unint64_t)v32 << 48));
      sub_10001ED94();
      uint64_t v24 = sub_100049C88();
      uint64_t v15 = sub_10001ED7C(v24);
      __int128 v16 = v25;
      uint64_t v17 = 3LL;
    }

    else
    {
      sub_1000498C0(__src);
      sub_10001ED94();
      uint64_t v13 = sub_100049C88();
      sub_10001ED7C(v13);
      *(double *)&__int128 v16 = sub_100049C94();
      uint64_t v17 = 49LL;
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    sub_10001ED94();
    uint64_t v14 = sub_100049C88();
    sub_10001ED7C(v14);
    *(double *)&__int128 v16 = sub_100049C94();
    uint64_t v17 = 21LL;
  }

  *(void *)(v15 + 16) = 0LL;
  *(void *)(v15 + 24) = 0LL;
  *(void *)(v15 + 32) = v17;
  *(_DWORD *)(v15 + 40) = v2;
  *(void *)a2 = v15;
  *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 136), 8) = _swiftEmptyArrayStorage;
  *(_BYTE *)(a2 + 16) = 2;
  *(_OWORD *)(a2 + 24) = v16;
  *(void *)(a2 + 40) = v6;
  *(void *)(a2 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v4;
  *(_BYTE *)(a2 + 62) = BYTE6(v3);
  *(_WORD *)(a2 + 60) = WORD2(v3);
  *(_DWORD *)(a2 + 56) = (_DWORD)v3;
}

uint64_t sub_100049080@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, unint64_t *a5@<X8>)
{
  id v99 = a5;
  uint64_t v108 = a4;
  uint64_t v102 = a1;
  uint64_t v103 = a2;
  uint64_t v98 = type metadata accessor for DateComponents(0LL);
  unint64_t v97 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v96 = (char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  os_log_type_t v101 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = *(void *)(v5 + 112);
  unint64_t v100 = v5;
  sub_100019F58((void *)(v5 + 88), v15);
  uint64_t v16 = (uint64_t)v108;
  j___s10Foundation4DateV3nowACvgZ_0(v15);
  uint64_t v17 = a3;
  uint64_t v18 = (void *)sub_100086438();
  Swift::Int v19 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
  sub_100049CC0();
  if (!v18) {
    goto LABEL_9;
  }
  uint64_t v20 = sub_1000B85C8(4u);
  if ((v21 & 1) != 0)
  {
    sub_100049CA8((uint64_t)v10, 1LL);
    goto LABEL_8;
  }

  Date.init(timeIntervalSinceReferenceDate:)(*(double *)&v20);
  sub_100049CA8((uint64_t)v10, 0LL);
  if (sub_10001D158((uint64_t)v10, 1LL, v11) == 1)
  {
LABEL_8:

    sub_100049980((uint64_t)v10);
LABEL_9:
    unint64_t v27 = sub_10001FD38();
    sub_1000252D0((uint64_t)&type metadata for HTTPResponseStatus, v27);
    *uint64_t v28 = 0LL;
    v28[1] = 0LL;
    return sub_100049CB4((uint64_t)v28, 25LL);
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v101, v10, v11);
  char v22 = sub_1000B4EE8();
  if (((1 << v22) & 0x36) != 0)
  {
    unint64_t v23 = sub_10001FD38();
    sub_1000252D0((uint64_t)&type metadata for HTTPResponseStatus, v23);
    *uint64_t v24 = 0LL;
    v24[1] = 0LL;
    uint64_t v25 = 33LL;
LABEL_6:
    sub_100049CB4((uint64_t)v24, v25);

    return sub_100049CC0();
  }

  BOOL v94 = v22 == 0;
  uint64_t v95 = (void *)(v100 + 48);
  sub_100023BAC(v100 + 48, (uint64_t)&v104);
  uint64_t v103 = sub_100019F58(&v104, v106);
  sub_1000B4F18();
  if (v30)
  {
    uint64_t v31 = v30;
    uint64_t v32 = v29;
  }

  else
  {
    uint64_t v32 = sub_1000B3DDC();
    uint64_t v31 = v33;
  }

  uint64_t v93 = v17;
  sub_100075EE8(v17, v16);
  uint64_t v35 = v34;
  uint64_t v36 = sub_1000D868C(v32, v31);
  swift_bridgeObjectRelease();
  swift_release(v35);
  uint64_t v103 = (void *)v36;
  if (!v36)
  {
    sub_100019F7C(&v104);
    unint64_t v44 = sub_10001FD38();
    sub_1000252D0((uint64_t)&type metadata for HTTPResponseStatus, v44);
    *uint64_t v24 = 0LL;
    v24[1] = 0LL;
    uint64_t v25 = 25LL;
    goto LABEL_6;
  }

  sub_100019F7C(&v104);
  unint64_t v37 = v100;
  uint64_t v38 = v95;
  sub_100019F58(v95, *(void *)(v100 + 72));
  sub_10007608C();
  uint64_t v102 = v39;
  sub_100019F58(v38, *(void *)(v37 + 72));
  sub_100076700();
  uint64_t v40 = v103;
  uint64_t v41 = swift_bridgeObjectRetain();
  uint64_t v42 = sub_1000CC010(v41);
  swift_bridgeObjectRelease();
  uint64_t v92 = v42;
  if (v42)
  {
    uint64_t v43 = *(void *)(v42 + 40);
    uint64_t v91 = *(void *)(v42 + 32);
    uint64_t v90 = v43;
    swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v91 = sub_1001BA868();
    uint64_t v90 = v45;
  }

  uint64_t v93 = v11;
  uint64_t v46 = v40[22];
  char v47 = *((_BYTE *)v40 + 184);
  id v48 = [objc_allocWithZone(NSDateComponentsFormatter) init];
  [v48 setUnitsStyle:3];
  [v48 setAllowedUnits:4124];
  uint64_t v49 = v96;
  sub_1001BE220(v46, v47);
  Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v97 + 8))(v49, v98);
  id v51 = [v48 stringFromDateComponents:isa];

  if (v51)
  {
    uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
    unint64_t v53 = v52;
  }

  else
  {

    uint64_t v88 = 0LL;
    unint64_t v53 = (void *)0xE000000000000000LL;
  }

  uint64_t v55 = v103[2];
  uint64_t v54 = v103[3];
  swift_bridgeObjectRetain();
  uint64_t v56 = v102;
  uint64_t v89 = sub_100043978(v55, v54, (uint64_t)v107, v102);
  uint64_t v58 = v57;
  swift_bridgeObjectRelease();
  type metadata accessor for AppIconRoute();
  uint64_t v59 = (uint64_t)v108;
  unint64_t v97 = sub_10005A048(v17, v108);
  uint64_t v96 = v60;
  sub_100019F58(v95, *(void *)(v100 + 72));
  uint64_t v108 = (void *)sub_100075DC4(v17, v59);
  unint64_t v100 = v61;
  uint64_t v104 = (void *)v91;
  uint64_t v105 = v90;
  v62._countAndFlagsBits = 10272LL;
  v62._object = (void *)0xE200000000000000LL;
  String.append(_:)(v62);
  v63._countAndFlagsBits = v88;
  v63._object = v53;
  String.append(_:)(v63);
  swift_bridgeObjectRelease();
  v64._countAndFlagsBits = 41LL;
  v64._object = (void *)0xE100000000000000LL;
  String.append(_:)(v64);
  uint64_t v95 = v104;
  uint64_t v91 = v105;
  sub_1000B3FEC();
  uint64_t v98 = v58;
  if ((v67 & 0x100000000LL) != 0)
  {
    sub_10001B4DC(v107);
    swift_bridgeObjectRetain();
    uint64_t v73 = v89;
    uint64_t v90 = v89;
    uint64_t v72 = v58;
  }

  else
  {
    uint64_t v68 = v65;
    uint64_t v69 = v66;
    unsigned int v70 = v67;
    swift_retain();
    uint64_t v90 = sub_100043804(v68, v69, v70, (uint64_t)v107, v56);
    uint64_t v72 = v71;
    sub_10001B4DC(v107);
    swift_release(v56);
    uint64_t v73 = v89;
  }

  uint64_t v74 = v103;
  if (qword_1002A8CA8 != -1) {
    swift_once(&qword_1002A8CA8, sub_100043918);
  }
  uint64_t v75 = (void *)qword_1002AAFE8;
  uint64_t v76 = v101;
  Class v77 = Date._bridgeToObjectiveC()().super.isa;
  id v78 = [v75 stringFromDate:v77];

  uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
  unint64_t v81 = v80;
  swift_release(v74);
  swift_release(v102);

  swift_release(v92);
  uint64_t result = v19(v76, v93);
  unint64_t v82 = v99;
  id v83 = v96;
  unint64_t *v99 = v97;
  v82[1] = (unint64_t)v83;
  unint64_t v84 = v100;
  v82[2] = (unint64_t)v108;
  v82[3] = v84;
  uint64_t v85 = v91;
  v82[4] = (unint64_t)v95;
  v82[5] = v85;
  uint64_t v86 = v98;
  v82[6] = v73;
  v82[7] = v86;
  v82[8] = v90;
  v82[9] = v72;
  v82[10] = v79;
  v82[11] = v81;
  *((_BYTE *)v82 + 96) = v94;
  return result;
}

unint64_t sub_100049804(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v6._countAndFlagsBits = 38LL;
  v6._object = (void *)0xE100000000000000LL;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 6580578LL;
  v7._object = (void *)0xE300000000000000LL;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 61LL;
  v8._object = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  v9._countAndFlagsBits = a3;
  v9._object = a4;
  String.append(_:)(v9);
  return 0xD000000000000014LL;
}

uint64_t type metadata accessor for PriceIncreaseUIRoute()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService20PriceIncreaseUIRoute);
}

void *sub_1000498C0(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[7];
  uint64_t v6 = a1[9];
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_100049934()
{
  return swift_deallocObject(v0, 113LL, 7LL);
}

uint64_t sub_100049980(uint64_t a1)
{
  uint64_t v2 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t initializeWithCopy for PriceIncreaseUIRoute.ViewProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = v8;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t assignWithCopy for PriceIncreaseUIRoute.ViewProperties(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 88);
  uint64_t v15 = *(void *)(a1 + 88);
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

void *initializeWithTake for PriceIncreaseUIRoute.ViewProperties(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x61uLL);
}

uint64_t assignWithTake for PriceIncreaseUIRoute.ViewProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v12;
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a2 + 88);
  uint64_t v15 = *(void *)(a1 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = v14;
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for PriceIncreaseUIRoute.ViewProperties(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 97))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PriceIncreaseUIRoute.ViewProperties(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8_Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_BYTE *)(result + 96) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 97) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 97) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PriceIncreaseUIRoute.ViewProperties()
{
  return &type metadata for PriceIncreaseUIRoute.ViewProperties;
}

uint64_t sub_100049C88()
{
  return type metadata accessor for HTTPResponseHead._Storage();
}

double sub_100049C94()
{
  return 0.0;
}

uint64_t sub_100049CA8(uint64_t a1, uint64_t a2)
{
  return sub_10001762C(a1, a2, 1LL, v2);
}

uint64_t sub_100049CB4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 16) = a2;
  return swift_willThrow();
}

uint64_t sub_100049CC0()
{
  return v1(v2, v0);
}

uint64_t (*NIOHTTPClientResponseFull.body.modify())()
{
  return debugOnly(_:);
}

uint64_t static NIOHTTPServerRequestFull.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_100049E2C( a1,  a2,  (uint64_t (*)(void, void, void, void, void, void))static HTTPRequestHead.== infix(_:_:));
}

uint64_t _s25ASOctaneSupportXPCService25NIOHTTPClientResponseFullV4headAA16HTTPResponseHeadVvg_0()
{
  uint64_t v1 = *v0;
  sub_10002A4C8();
  swift_bridgeObjectRetain();
  return v1;
}

void _s25ASOctaneSupportXPCService25NIOHTTPClientResponseFullV4headAA16HTTPResponseHeadVvs_0( uint64_t a1, uint64_t a2, char a3)
{
  *(void *)uint64_t v3 = a1;
  *(void *)(v3 + _Block_object_dispose((const void *)(v1 - 136), 8) = a2;
  *(_BYTE *)(v3 + 16) = a3;
  sub_1000193B8();
}

uint64_t _s25ASOctaneSupportXPCService25NIOHTTPClientResponseFullV4bodyAA10ByteBufferVSgvg_0()
{
  return swift_retain(*(void *)(v0 + 24));
}

void _s25ASOctaneSupportXPCService25NIOHTTPClientResponseFullV4bodyAA10ByteBufferVSgvs_0( uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 24) = a1;
  *(void *)(v3 + 32) = a2;
  *(_BYTE *)(v3 + 46) = BYTE6(a3);
  *(_WORD *)(v3 + 44) = WORD2(a3);
  *(_DWORD *)(v3 + 40) = a3;
  sub_1000193B8();
}

uint64_t _s25ASOctaneSupportXPCService25NIOHTTPClientResponseFullV4head4bodyAcA16HTTPResponseHeadV_AA10ByteBufferVSgtcfC_0@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)a7 = result;
  *(void *)(a7 + _Block_object_dispose((const void *)(v1 - 136), 8) = a2;
  *(_BYTE *)(a7 + 16) = a3;
  *(void *)(a7 + 24) = a4;
  *(void *)(a7 + 32) = a5;
  *(_DWORD *)(a7 + 40) = a6;
  *(_BYTE *)(a7 + 46) = BYTE6(a6);
  *(_WORD *)(a7 + 44) = WORD2(a6);
  return result;
}

uint64_t static NIOHTTPClientResponseFull.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_100049E2C( a1,  a2,  (uint64_t (*)(void, void, void, void, void, void))static HTTPResponseHead.== infix(_:_:));
}

uint64_t sub_100049E2C( uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, void, void))
{
  if ((a3( *(void *)a1,  *(void *)(a1 + 8),  *(unsigned __int8 *)(a1 + 16),  *(void *)a2,  *(void *)(a2 + 8),  *(unsigned __int8 *)(a2 + 16)) & 1) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    uint64_t v6 = *(void *)(a2 + 24);
    if (v5)
    {
      if (v6)
      {
        uint64_t v7 = *(void *)(a1 + 32);
        unint64_t v8 = *(unsigned int *)(a1 + 40) | ((unint64_t)(*(unsigned __int16 *)(a1 + 44) | (*(unsigned __int8 *)(a1 + 46) << 16)) << 32);
        uint64_t v9 = *(void *)(a2 + 32);
        unint64_t v10 = *(unsigned int *)(a2 + 40) | ((unint64_t)(*(unsigned __int16 *)(a2 + 44) | (*(unsigned __int8 *)(a2 + 46) << 16)) << 32);
        uint64_t v11 = v8 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v12 = v10 & 0xFFFFFFFFFFFFFFLL;
        swift_retain();
        sub_10002A4C8();
        LOBYTE(v1Hasher._combine(_:)(v1 & 1) = static ByteBuffer.== infix(_:_:)(v5, v7, v11, v6, v9, v12);
        swift_release(v5);
        swift_release(v6);
        if ((v11 & 1) != 0) {
          return 1LL;
        }
      }
    }

    else if (!v6)
    {
      return 1LL;
    }
  }

  return 0LL;
}

void *NIOHTTPObjectAggregatorError.frameTooLong.unsafeMutableAddressor()
{
  return &static NIOHTTPObjectAggregatorError.frameTooLong;
}

void *NIOHTTPObjectAggregatorError.connectionClosed.unsafeMutableAddressor()
{
  return &static NIOHTTPObjectAggregatorError.connectionClosed;
}

void *NIOHTTPObjectAggregatorError.endingIgnoredMessage.unsafeMutableAddressor()
{
  return &static NIOHTTPObjectAggregatorError.endingIgnoredMessage;
}

void *NIOHTTPObjectAggregatorError.unexpectedMessageHead.unsafeMutableAddressor()
{
  return &static NIOHTTPObjectAggregatorError.unexpectedMessageHead;
}

void *NIOHTTPObjectAggregatorError.unexpectedMessageBody.unsafeMutableAddressor()
{
  return &static NIOHTTPObjectAggregatorError.unexpectedMessageBody;
}

uint64_t static NIOHTTPObjectAggregatorError.unexpectedMessageBody.getter()
{
  return 4LL;
}

void *NIOHTTPObjectAggregatorError.unexpectedMessageEnd.unsafeMutableAddressor()
{
  return &static NIOHTTPObjectAggregatorError.unexpectedMessageEnd;
}

uint64_t static NIOHTTPObjectAggregatorError.unexpectedMessageEnd.getter()
{
  return 5LL;
}

uint64_t sub_100049F74(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static NIOHTTPObjectAggregatorError.__derived_struct_equals(_:_:)(*a1, *a2);
}

void *NIOHTTPObjectAggregatorEvent.httpExpectationFailed.unsafeMutableAddressor()
{
  return &static NIOHTTPObjectAggregatorEvent.httpExpectationFailed;
}

void *NIOHTTPObjectAggregatorEvent.httpFrameTooLong.unsafeMutableAddressor()
{
  return &static NIOHTTPObjectAggregatorEvent.httpFrameTooLong;
}

void sub_100049F98()
{
  if (*v0 - 1 >= 2)
  {
    if (!*v0)
    {
      *uint64_t v0 = 2;
      return;
    }

    char v1 = 1;
  }

  else
  {
    char v1 = 3;
  }

  unint64_t v2 = sub_10004B65C();
  uint64_t v3 = sub_1000252D0((uint64_t)&type metadata for NIOHTTPObjectAggregatorError, v2);
  char *v4 = v1;
  swift_willThrow(v3);
}

void sub_10004A008()
{
  __asm { BR              X10 }

uint64_t sub_10004A038()
{
  unint64_t v0 = sub_10004B65C();
  uint64_t v1 = sub_1000252D0((uint64_t)&type metadata for NIOHTTPObjectAggregatorError, v0);
  return sub_10004BD38(v1, v2);
}

void sub_10004A06C()
{
  __asm { BR              X10 }

uint64_t sub_10004A098()
{
  *unint64_t v0 = 0;
  unint64_t v1 = sub_10004B65C();
  uint64_t v2 = sub_1000252D0((uint64_t)&type metadata for NIOHTTPObjectAggregatorError, v1);
  return sub_10004BD38(v2, v3);
}

void NIOHTTPServerRequestAggregator.__allocating_init(maxContentLength:closeOnExpectationFailed:)( uint64_t a1, char a2)
{
}

uint64_t NIOHTTPServerRequestAggregator.init(maxContentLength:closeOnExpectationFailed:)( uint64_t result, char a2)
{
  *(void *)(v2 + 16) = 0LL;
  *(void *)(v2 + 24) = 0LL;
  *(_BYTE *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0LL;
  *(void *)(v2 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
  *(void *)(v2 + 55) = 0LL;
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v2 + 64) = result;
    *(_BYTE *)(v2 + 72) = a2 & 1;
    *(_BYTE *)(v2 + 7sub_100019F7C(v0 + 3) = 0;
    return v2;
  }

  return result;
}

uint64_t NIOHTTPServerRequestAggregator.channelRead(context:data:)(uint64_t a1)
{
  uint64_t v3 = sub_10002D534();
  uint64_t v6 = v3;
  uint64_t v7 = v4;
  uint64_t v8 = v5;
  if (HIBYTE(v5))
  {
    if (HIBYTE(v5) != 1)
    {
      sub_10004A06C();
      sub_10004A724(a1, v6, v7);
      uint64_t v20 = v6;
      uint64_t v21 = v7;
      uint64_t v22 = v8;
      char v23 = 2;
      return sub_100034F80(v20, v21, v22, v23);
    }

    unint64_t v28 = v3;
    *(void *)&__int128 v29 = v4;
    DWORD2(v29) = v5;
    WORD6(v29) = WORD2(v5);
    BYTE14(v29) = BYTE6(v5);
    swift_retain();
    sub_10004A008();
    unint64_t v10 = sub_10004A62C(a1, (uint64_t)&v28, v6, v7, v8 & 0xFFFFFFFFFFFFFFLL | 0x100000000000000LL);
    uint64_t v12 = v11;
    unsigned __int8 v14 = v13;
    sub_10004BD00();
    if (!v10)
    {
LABEL_6:
      uint64_t v20 = sub_10004BD88();
      return sub_100034F80(v20, v21, v22, v23);
    }
  }

  else
  {
    swift_retain();
    swift_bridgeObjectRetain();
    sub_100049F98();
    unint64_t v10 = sub_10004A56C(a1, v6, v7, v8, v6, v7, v8 & 0xFFFFFFFFFFFFFFLL);
    uint64_t v12 = v15;
    unsigned __int8 v14 = v16;
    sub_100023EEC();
    swift_release(v6);
    if (!v10) {
      goto LABEL_6;
    }
  }

  uint64_t v17 = sub_1000175B0(&qword_1002AA1A0);
  uint64_t v30 = v17;
  unint64_t v28 = v10;
  *(void *)&__int128 v29 = v12;
  *((void *)&v29 + Hasher._combine(_:)(v1 & 1) = v14;
  char v31 = 2;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100034D48(v10, v12);
  ChannelHandlerContext.write(_:promise:)();
  sub_1000324E8((uint64_t)&v28);
  uint64_t v30 = v17;
  unint64_t v28 = 0LL;
  *(void *)&__int128 v29 = 0LL;
  *(void *)((char *)&v29 + 7) = 0LL;
  HIBYTE(v29) = 2;
  char v31 = 2;
  ChannelHandlerContext.writeAndFlush(_:promise:)();
  sub_1000324E8((uint64_t)&v28);
  unint64_t v18 = *(void *)(v10 + 32);
  if (v18 < 0x3C && HTTPResponseStatus.code.getter(*(void *)(v10 + 16), *(void *)(v10 + 24), v18) == 413) {
    __asm { BR              X10 }
  }

  sub_100187550(*(unsigned int *)(v10 + 40), v12, v14);
  if ((v19 & 1) != 0)
  {
    sub_10004BD68();
    swift_bridgeObjectRelease();
    sub_10002A51C();
    goto LABEL_6;
  }

  ChannelHandlerContext.close(mode:promise:)();
  sub_10004BD68();
  swift_bridgeObjectRelease();
  sub_10002A51C();
  uint64_t v24 = sub_10004BD88();
  uint64_t result = sub_100034F80(v24, v25, v26, v27);
  *(_BYTE *)(v1 + 7sub_100019F7C(v0 + 3) = 3;
  return result;
}

unint64_t sub_10004A56C( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v14 = *(void *)(v7 + 16);
  uint64_t v15 = *(void *)(v7 + 24);
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  *(_BYTE *)(v7 + 32) = a4;
  sub_100034754(v14, v15);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_10018DBB8();
  if ((v17 & 1) != 0 || *(void *)(v7 + 64) >= v16) {
    return 0LL;
  }
  else {
    return sub_10004AA40(a5, a6, a7);
  }
}

unint64_t sub_10004A62C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unsigned int v6 = *(_DWORD *)(a2 + 8);
  unsigned int v7 = *(_DWORD *)(a2 + 12);
  uint64_t v8 = v7 - v6;
  if (v7 < v6)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v13 = *(void *)(v5 + 64);
  unint64_t result = swift_beginAccess(v5 + 40, v31, 0LL, 0LL);
  if (!*(void *)(v5 + 40))
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }

  unsigned int v15 = *(_DWORD *)(v5 + 48);
  unsigned int v16 = *(_DWORD *)(v5 + 52);
  BOOL v17 = v16 >= v15;
  unsigned int v18 = v16 - v15;
  if (!v17) {
    goto LABEL_12;
  }
  BOOL v19 = __OFSUB__(v13, v18);
  uint64_t v20 = v13 - v18;
  if (v19)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (v20 < v8) {
    return sub_10004AA40(a3, a4, a5);
  }
  unint64_t result = swift_beginAccess(v5 + 40, &v28, 33LL, 0LL);
  if (!*(void *)(v5 + 40)) {
    goto LABEL_15;
  }
  ByteBuffer.writeBuffer(_:)( a2,  v21,  v22,  v23,  v24,  v25,  v26,  v27,  v28,  v29,  v30,  v31[0],  v31[1],  v31[2],  v31[3],  v31[4],  v31[5],  v31[6],  v31[7],  v31[8],  v31[9],  v31[10]);
  swift_endAccess(&v28);
  return 0LL;
}

uint64_t sub_10004A724(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = v3 + 16;
  uint64_t result = swift_beginAccess(v3 + 16, v27, 1LL, 0LL);
  uint64_t v9 = *(void *)(v3 + 16);
  if (!v9) {
    return result;
  }
  char v10 = *(_BYTE *)(v3 + 32);
  uint64_t v11 = *(void *)(v4 + 24);
  uint64_t v28 = v11;
  swift_retain();
  swift_bridgeObjectRetain();
  if (a2)
  {
    uint64_t v12 = sub_10002D0E0();
    char v13 = v12;
    __chkstk_darwin(v12);
    uint64_t result = sub_100033870(&v28, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10004BCDC);
    if (*(void *)(v28 + 16) < result)
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }

    sub_100033B48();
    swift_bridgeObjectRetain();
    sub_100188F0C();
    if ((a3 == 2) | v13 & 1) {
      char v10 = 2;
    }
    uint64_t v11 = v28;
  }

  uint64_t v14 = (uint64_t *)(v4 + 40);
  uint64_t result = swift_beginAccess(v4 + 40, v26, 0LL, 0LL);
  uint64_t v15 = *(void *)(v4 + 40);
  if (!v15)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }

  uint64_t v16 = *(void *)(v4 + 48);
  if (HIDWORD(v16) < v16)
  {
    __break(1u);
    goto LABEL_18;
  }

  char v23 = v10;
  if (HIDWORD(v16) == (_DWORD)v16)
  {
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    unint64_t v22 = 0LL;
  }

  else
  {
    unint64_t v22 = *(unsigned int *)(v4 + 56) | ((unint64_t)(*(unsigned __int16 *)(v4 + 60) | (*(unsigned __int8 *)(v4 + 62) << 16)) << 32);
    swift_retain();
  }

  uint64_t v17 = *(void *)(v4 + 16);
  uint64_t v18 = *(void *)(v4 + 24);
  *(void *)uint64_t v7 = 0LL;
  *(void *)(v7 + _Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
  *(_BYTE *)(v7 + 16) = 0;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100034754(v17, v18);
  swift_beginAccess(v4 + 40, v24, 33LL, 0LL);
  uint64_t result = *(void *)(v4 + 40);
  if (!result) {
    goto LABEL_20;
  }
  if ((swift_isUniquelyReferenced_nonNull_native(result) & 1) == 0)
  {
    sub_10005B858(*(_DWORD *)(*v14 + 16));
    uint64_t v19 = *v14;
    uint64_t *v14 = v20;
    swift_release(v19);
  }

  *(_DWORD *)(v4 + 56) = *(_DWORD *)(*(void *)(v4 + 40) + 16LL);
  *(_WORD *)(v4 + 60) = 0;
  *(_BYTE *)(v4 + 62) = 0;
  *(void *)(v4 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
  swift_endAccess(v24);
  v24[3] = &type metadata for NIOHTTPServerRequestFull;
  uint64_t v21 = swift_allocObject(&unk_1002789B8, 63LL, 7LL);
  v24[0] = v21;
  *(void *)(v21 + 16) = v9;
  *(void *)(v21 + 24) = v11;
  *(_BYTE *)(v21 + 32) = v23;
  *(void *)(v21 + 40) = v15;
  *(void *)(v21 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v16;
  *(_BYTE *)(v21 + 62) = BYTE6(v22);
  *(_WORD *)(v21 + 60) = WORD2(v22);
  *(_DWORD *)(v21 + 56) = v22;
  char v25 = 2;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  ChannelHandlerContext.fireChannelRead(_:)();
  swift_release(v15);
  swift_bridgeObjectRelease();
  swift_release(v9);
  sub_1000324E8((uint64_t)v24);
  swift_release(v9);
  return swift_bridgeObjectRelease();
}

unint64_t sub_10004AA40(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = *(void *)(v3 + 16);
  if (v7)
  {
    __int16 v8 = *(_WORD *)(v7 + 48);
    __int16 v9 = *(_WORD *)(v7 + 50);
  }

  else
  {
    __int16 v8 = 1;
    __int16 v9 = 1;
  }

  swift_endAccess(v19);
  uint64_t v10 = sub_1000175B0(&qword_1002A92A8);
  uint64_t v11 = swift_allocObject(v10, 64LL, 7LL);
  *(_OWORD *)(v11 + 16) = xmmword_1001F3C00;
  strcpy((char *)(v11 + 32), "content-length");
  *(_BYTE *)(v11 + 47) = -18;
  *(void *)(v11 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = 48LL;
  *(void *)(v11 + 56) = 0xE100000000000000LL;
  uint64_t v12 = type metadata accessor for HTTPResponseHead._Storage();
  uint64_t v13 = swift_allocObject(v12, 44LL, 7LL);
  *(void *)(v13 + 16) = 0LL;
  *(void *)(v13 + 24) = 0LL;
  *(void *)(v13 + 32) = 34LL;
  *(_WORD *)(v13 + 40) = v8;
  *(_WORD *)(v13 + 42) = v9;
  if (HIBYTE(a3))
  {
    unint64_t result = sub_10002ACF8(0x697463656E6E6F63uLL, 0xEA00000000006E6FLL);
    if ((result & 1) == 0)
    {
      uint64_t v18 = (void *)sub_10002F128(1LL, 2LL, 1LL, v11);
      _OWORD v18[2] = 2LL;
      v18[8] = 0x697463656E6E6F63LL;
      v18[9] = 0xEA00000000006E6FLL;
      v18[10] = 0x65736F6C63LL;
      v18[11] = 0xE500000000000000LL;
      sub_10002D0E0();
      return v13;
    }

    __break(1u);
  }

  else
  {
    uint64_t v14 = *(unsigned int *)(a1 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    sub_100187550(v14, a2, a3);
    if ((v15 & 1) != 0)
    {
LABEL_8:
      swift_bridgeObjectRelease();
      swift_release(a1);
      return v13;
    }

    unint64_t result = sub_10002ACF8(0x697463656E6E6F63uLL, 0xEA00000000006E6FLL);
    if ((result & 1) == 0)
    {
      uint64_t v17 = (void *)sub_10002F128(1LL, 2LL, 1LL, v11);
      void v17[2] = 2LL;
      v17[8] = 0x697463656E6E6F63LL;
      v17[9] = 0xEA00000000006E6FLL;
      void v17[10] = 0x65736F6C63LL;
      v17[11] = 0xE500000000000000LL;
      sub_10002D0E0();
      goto LABEL_8;
    }
  }

  __break(1u);
  return result;
}

uint64_t NIOHTTPServerRequestAggregator.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 74LL, 7LL);
}

uint64_t NIOHTTPClientResponseAggregator.__allocating_init(maxContentLength:)(uint64_t a1)
{
  uint64_t v3 = swift_allocObject(v1, 73LL, 7LL);
  NIOHTTPClientResponseAggregator.init(maxContentLength:)(a1);
  return v3;
}

uint64_t NIOHTTPClientResponseAggregator.init(maxContentLength:)(uint64_t result)
{
  *(void *)(v1 + 16) = 0LL;
  *(void *)(v1 + 24) = 0LL;
  *(_BYTE *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0LL;
  *(void *)(v1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
  *(void *)(v1 + 55) = 0LL;
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v1 + 64) = result;
    *(_BYTE *)(v1 + 72) = 0;
    return v1;
  }

  return result;
}

uint64_t NIOHTTPClientResponseAggregator.channelRead(context:data:)(uint64_t a1)
{
  uint64_t v2 = sub_10002D844();
  uint64_t v5 = v2;
  uint64_t v6 = v3;
  char v7 = v4;
  if (HIBYTE(v4))
  {
    if (HIBYTE(v4) == 1)
    {
      v16[0] = v2;
      v16[1] = v3;
      int v17 = v4;
      __int16 v18 = WORD2(v4);
      char v19 = BYTE6(v4);
      sub_10004A008();
      sub_10004B0D4(a1, (uint64_t)v16);
      uint64_t v8 = sub_10004BD78();
      char v11 = 1;
    }

    else
    {
      sub_10004A06C();
      sub_10004B23C(a1, v5, v6);
      uint64_t v8 = sub_10004BD78();
      char v11 = 2;
    }

    return sub_100034F80(v8, v9, v10, v11);
  }

  else
  {
    sub_10002A4C8();
    swift_bridgeObjectRetain();
    sub_100049F98();
    sub_10004AFC4(a1, v5, v6, v7);
    uint64_t v12 = sub_10004BD78();
    sub_100034F80(v12, v13, v14, 0);
    sub_100023EEC();
    return swift_release(v5);
  }

uint64_t sub_10004AFC4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v7 = *(void *)(v4 + 24);
  *(void *)(v4 + 16) = a2;
  *(void *)(v4 + 24) = a3;
  *(_BYTE *)(v4 + 32) = a4;
  sub_100034754(v6, v7);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t result = sub_10018DBB8();
  if ((v9 & 1) == 0 && *(void *)(v4 + 64) < result) {
    __asm { BR              X10 }
  }

  return result;
}

uint64_t sub_10004B0D4(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  unsigned int v4 = *(_DWORD *)(a2 + 12);
  uint64_t v5 = v4 - v3;
  if (v4 < v3)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v7 = *(void *)(v2 + 64);
  swift_beginAccess(v2 + 40, v27, 0LL, 0LL);
  if (!*(void *)(v2 + 40))
  {
LABEL_13:
    __break(1u);
    JUMPOUT(0x10004B224LL);
  }

  unsigned int v8 = *(_DWORD *)(v2 + 48);
  unsigned int v9 = *(_DWORD *)(v2 + 52);
  BOOL v10 = v9 >= v8;
  unsigned int v11 = v9 - v8;
  if (!v10) {
    goto LABEL_11;
  }
  BOOL v12 = __OFSUB__(v7, v11);
  uint64_t v13 = v7 - v11;
  if (v12)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  if (v13 < v5) {
    __asm { BR              X10 }
  }

  swift_beginAccess(v2 + 40, v23, 33LL, 0LL);
  if (!*(void *)(v2 + 40))
  {
    __break(1u);
    JUMPOUT(0x10004B22CLL);
  }

  ByteBuffer.writeBuffer(_:)( a2,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v22,  v23[0],  v24,  v25,  v26,  v27[0],  v27[1],  v27[2],  v27[3],  v27[4],  v27[5],  v27[6],  v27[7],  v27[8]);
  return swift_endAccess(v23);
}

uint64_t sub_10004B23C(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v5 = v3 + 16;
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4) {
    return result;
  }
  uint64_t v6 = v3;
  char v9 = *(_BYTE *)(v3 + 32);
  uint64_t v10 = *(void *)(v6 + 24);
  uint64_t v26 = v10;
  swift_retain();
  swift_bridgeObjectRetain();
  if (a2)
  {
    uint64_t v11 = sub_10002D0E0();
    char v12 = v11;
    __chkstk_darwin(v11);
    uint64_t result = sub_100033870(&v26, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10003251C);
    if (*(void *)(v26 + 16) < result)
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }

    sub_100033B48();
    swift_bridgeObjectRetain();
    sub_100188F0C();
    if ((a3 == 2) | v12 & 1) {
      char v9 = 2;
    }
    uint64_t v10 = v26;
  }

  uint64_t v13 = (uint64_t *)(v6 + 40);
  uint64_t result = swift_beginAccess(v6 + 40, v25, 0LL, 0LL);
  uint64_t v14 = *(void *)(v6 + 40);
  if (!v14)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }

  uint64_t v15 = *(void *)(v6 + 48);
  if (HIDWORD(v15) < v15)
  {
    __break(1u);
    goto LABEL_18;
  }

  char v22 = v9;
  if (HIDWORD(v15) == (_DWORD)v15)
  {
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    unint64_t v21 = 0LL;
  }

  else
  {
    unint64_t v21 = *(unsigned int *)(v6 + 56) | ((unint64_t)(*(unsigned __int16 *)(v6 + 60) | (*(unsigned __int8 *)(v6 + 62) << 16)) << 32);
    swift_retain();
  }

  uint64_t v16 = *(void *)(v6 + 16);
  uint64_t v17 = *(void *)(v6 + 24);
  *(void *)uint64_t v5 = 0LL;
  *(void *)(v5 + _Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
  *(_BYTE *)(v5 + 16) = 0;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100034754(v16, v17);
  swift_beginAccess(v6 + 40, v23, 33LL, 0LL);
  uint64_t result = *(void *)(v6 + 40);
  if (!result) {
    goto LABEL_20;
  }
  if ((swift_isUniquelyReferenced_nonNull_native(result) & 1) == 0)
  {
    sub_10005B858(*(_DWORD *)(*v13 + 16));
    uint64_t v18 = *v13;
    *uint64_t v13 = v19;
    swift_release(v18);
  }

  *(_DWORD *)(v6 + 56) = *(_DWORD *)(*(void *)(v6 + 40) + 16LL);
  *(_WORD *)(v6 + 60) = 0;
  *(_BYTE *)(v6 + 62) = 0;
  *(void *)(v6 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
  swift_endAccess(v23);
  v23[3] = &type metadata for NIOHTTPClientResponseFull;
  uint64_t v20 = swift_allocObject(&unk_100278990, 63LL, 7LL);
  v23[0] = v20;
  *(void *)(v20 + 16) = v4;
  *(void *)(v20 + 24) = v10;
  *(_BYTE *)(v20 + 32) = v22;
  *(void *)(v20 + 40) = v14;
  *(void *)(v20 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v15;
  *(_BYTE *)(v20 + 62) = BYTE6(v21);
  *(_WORD *)(v20 + 60) = WORD2(v21);
  *(_DWORD *)(v20 + 56) = v21;
  char v24 = 2;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  ChannelHandlerContext.fireChannelRead(_:)();
  swift_release(v14);
  swift_bridgeObjectRelease();
  swift_release(v4);
  sub_1000324E8((uint64_t)v23);
  swift_release(v4);
  return swift_bridgeObjectRelease();
}

uint64_t _s25ASOctaneSupportXPCService31NIOHTTPClientResponseAggregatorC12handlerAdded7contextyAA21ChannelHandlerContextC_tF_0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094338();
  uint64_t v4 = v3;
  uint64_t ObjectType = swift_getObjectType(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(ObjectType, v4);
  swift_unknownObjectRelease(v2);
  if (qword_1002A8CC8 != -1) {
    swift_once(&qword_1002A8CC8, sub_10005B580);
  }
  uint64_t v6 = static ByteBufferAllocator.zeroCapacityWithDefaultAllocator;
  uint64_t v7 = qword_1002EB928;
  int v8 = dword_1002EB930;
  __int16 v9 = word_1002EB934;
  char v10 = byte_1002EB936;
  sub_10004BDB4(v1 + 40, (uint64_t)v12);
  *(void *)(v1 + 40) = v6;
  *(void *)(v1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v7;
  *(_BYTE *)(v1 + 62) = v10;
  *(_WORD *)(v1 + 60) = v9;
  *(_DWORD *)(v1 + 56) = v8;
  swift_retain();
  return sub_10002A51C();
}

uint64_t *_s25ASOctaneSupportXPCService31NIOHTTPClientResponseAggregatorCfd_0()
{
  return v0;
}

uint64_t NIOHTTPClientResponseAggregator.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 73LL, 7LL);
}

unint64_t sub_10004B65C()
{
  unint64_t result = qword_1002AB4F0;
  if (!qword_1002AB4F0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NIOHTTPObjectAggregatorError,  &type metadata for NIOHTTPObjectAggregatorError);
    atomic_store(result, (unint64_t *)&qword_1002AB4F0);
  }

  return result;
}

unint64_t sub_10004B69C()
{
  unint64_t result = qword_1002AB4F8;
  if (!qword_1002AB4F8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NIOHTTPObjectAggregatorEvent,  &type metadata for NIOHTTPObjectAggregatorEvent);
    atomic_store(result, (unint64_t *)&qword_1002AB4F8);
  }

  return result;
}

__n128 initializeWithTake for NIOHTTPServerRequestFull(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 3Hasher._combine(_:)(v1 & 1) = *(_OWORD *)(a2 + 31);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void type metadata accessor for NIOHTTPServerRequestFull()
{
}

uint64_t _s25ASOctaneSupportXPCService24NIOHTTPServerRequestFullVwxx_0(void *a1)
{
  return swift_release(a1[3]);
}

void _s25ASOctaneSupportXPCService24NIOHTTPServerRequestFullVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 4sub_100019F7C(v0 + 3) = *(_DWORD *)(a2 + 43);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000193B8();
}

void _s25ASOctaneSupportXPCService24NIOHTTPServerRequestFullVwca_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  sub_10002A51C();
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  sub_10002A51C();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  sub_10004BCE0();
  sub_1000193B8();
}

uint64_t _s25ASOctaneSupportXPCService24NIOHTTPServerRequestFullVwta_0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release(v4);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return sub_10004BCE0();
}

uint64_t _s25ASOctaneSupportXPCService24NIOHTTPServerRequestFullVwet_0(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 47))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_10004B8BC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_BYTE *)(result + 46) = 0;
    *(_WORD *)(result + 44) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 47) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 47) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for NIOHTTPClientResponseFull()
{
}

void type metadata accessor for NIOHTTPObjectAggregatorError()
{
}

void type metadata accessor for NIOHTTPObjectAggregatorEvent()
{
}

uint64_t type metadata accessor for NIOHTTPServerRequestAggregator()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService30NIOHTTPServerRequestAggregator);
}

uint64_t type metadata accessor for NIOHTTPClientResponseAggregator()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService31NIOHTTPClientResponseAggregator);
}

uint64_t sub_10004B980(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = 1;
  }
  else {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10004B9CC + 4 * byte_1001F652D[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10004BA00 + 4 * byte_1001F6528[v4]))();
}

uint64_t sub_10004BA00(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10004BA08(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x10004BA10LL);
  }
  return result;
}

uint64_t sub_10004BA1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x10004BA24LL);
  }
  *(_BYTE *)__n128 result = a2 + 3;
  return result;
}

uint64_t sub_10004BA28(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10004BA30(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

void type metadata accessor for AggregatorState()
{
}

uint64_t _s25ASOctaneSupportXPCService28NIOHTTPObjectAggregatorEventV4BaseOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = 1;
  }
  else {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10004BA94 + 4 * byte_1001F6537[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10004BAC8 + 4 * byte_1001F6532[v4]))();
}

uint64_t sub_10004BAC8(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10004BAD0(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x10004BAD8LL);
  }
  return result;
}

uint64_t sub_10004BAE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x10004BAECLL);
  }
  *(_BYTE *)__n128 result = a2 + 1;
  return result;
}

uint64_t sub_10004BAF0(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10004BAF8(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NIOHTTPObjectAggregatorEvent.Base()
{
  return &type metadata for NIOHTTPObjectAggregatorEvent.Base;
}

uint64_t _s25ASOctaneSupportXPCService28NIOHTTPObjectAggregatorErrorV4BaseOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = 1;
  }
  else {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_10004BB60 + 4 * byte_1001F6541[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10004BB94 + 4 * byte_1001F653C[v4]))();
}

uint64_t sub_10004BB94(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10004BB9C(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x10004BBA4LL);
  }
  return result;
}

uint64_t sub_10004BBB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x10004BBB8LL);
  }
  *(_BYTE *)__n128 result = a2 + 5;
  return result;
}

uint64_t sub_10004BBBC(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10004BBC4(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NIOHTTPObjectAggregatorError.Base()
{
  return &type metadata for NIOHTTPObjectAggregatorError.Base;
}

unint64_t sub_10004BBE4()
{
  unint64_t result = qword_1002AB718;
  if (!qword_1002AB718)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F68A8, &type metadata for NIOHTTPObjectAggregatorError.Base);
    atomic_store(result, (unint64_t *)&qword_1002AB718);
  }

  return result;
}

unint64_t sub_10004BC24()
{
  unint64_t result = qword_1002AB720;
  if (!qword_1002AB720)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F6910, &type metadata for NIOHTTPObjectAggregatorEvent.Base);
    atomic_store(result, (unint64_t *)&qword_1002AB720);
  }

  return result;
}

unint64_t sub_10004BC64()
{
  unint64_t result = qword_1002AB728;
  if (!qword_1002AB728)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F6978, &unk_100278850);
    atomic_store(result, (unint64_t *)&qword_1002AB728);
  }

  return result;
}

uint64_t sub_10004BCA8()
{
  return swift_deallocObject(v0, 63LL, 7LL);
}

uint64_t sub_10004BCE0()
{
  *(_DWORD *)(v1 + 40) = *(_DWORD *)(v0 + 40);
  *(_WORD *)(v1 + 44) = *(_WORD *)(v0 + 44);
  *(_BYTE *)(v1 + 46) = *(_BYTE *)(v0 + 46);
  return v1;
}

uint64_t sub_10004BD00()
{
  return sub_100034F80(v2, v1, v0, 1);
}

uint64_t sub_10004BD14()
{
  return sub_100034F80(v0, v1, v2, v3);
}

void sub_10004BD28(uint64_t a1, _BYTE *a2)
{
  *a2 = v2;
  ChannelHandlerContext.fireErrorCaught(_:)();
}

uint64_t sub_10004BD38(uint64_t a1, _BYTE *a2)
{
  *a2 = v2;
  return swift_willThrow();
}

uint64_t sub_10004BD48(uint64_t a1)
{
  uint64_t v2 = *v1;
  *uint64_t v1 = a1;
  return swift_release(v2);
}

uint64_t sub_10004BD58(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(v2, a2, 33LL, 0LL);
}

uint64_t sub_10004BD68()
{
  return sub_100034754(v0, v1);
}

uint64_t sub_10004BD78()
{
  return v0;
}

uint64_t sub_10004BD88()
{
  return v0;
}

void sub_10004BD9C()
{
}

void sub_10004BDA8()
{
}

uint64_t sub_10004BDB4(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 1LL, 0LL);
}

void *sub_10004BDC0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_1000175B0(&qword_1002AB730);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for StatusResponse.Datum.TransactionContainer(0LL);
  uint64_t v33 = *(void *)(v8 - 8);
  uint64_t v34 = v8;
  __chkstk_darwin(v8);
  uint64_t v32 = (uint64_t)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    uint64_t v35 = a2;
    v30[1] = v2;
    unint64_t v37 = _swiftEmptyArrayStorage;
    sub_1000321C8();
    uint64_t v11 = v37;
    char v12 = (void **)(a1 + 48);
    __int128 v31 = xmmword_1001F3C00;
    do
    {
      uint64_t v14 = (uint64_t)*(v12 - 2);
      uint64_t v13 = (uint64_t)*(v12 - 1);
      uint64_t v15 = *v12;
      if (*v12)
      {
        uint64_t v36 = (uint64_t)*(v12 - 2);
        id v16 = v15;
        swift_bridgeObjectRetain_n(v13, 2LL);
        id v17 = v16;
        uint64_t v18 = v35;
        sub_10004D8DC(v35);
        sub_10004C54C(v17, v18, (uint64_t)v7);
        if (sub_10001D158((uint64_t)v7, 1LL, v34) == 1)
        {
          sub_10004DB00((uint64_t)v7, &qword_1002AB730);
          swift_bridgeObjectRelease();

          uint64_t v19 = _swiftEmptyArrayStorage;
        }

        else
        {
          uint64_t v20 = (uint64_t)v7;
          unint64_t v21 = v7;
          uint64_t v22 = v32;
          sub_10004DABC(v20, v32);
          uint64_t v23 = sub_1000175B0(&qword_1002AB738);
          uint64_t v24 = *(unsigned __int8 *)(v33 + 80);
          uint64_t v25 = (v24 + 32) & ~v24;
          uint64_t v19 = (void *)swift_allocObject(v23, v25 + *(void *)(v33 + 72), v24 | 7);
          *((_OWORD *)v19 + Hasher._combine(_:)(v1 & 1) = v31;
          uint64_t v26 = v22;
          uint64_t v7 = v21;
          sub_10004DABC(v26, (uint64_t)v19 + v25);
          swift_bridgeObjectRelease();
        }

        uint64_t v14 = v36;
      }

      else
      {
        swift_bridgeObjectRetain();
        uint64_t v19 = _swiftEmptyArrayStorage;
      }

      unint64_t v37 = v11;
      unint64_t v27 = v11[2];
      if (v27 >= v11[3] >> 1)
      {
        uint64_t v36 = v14;
        sub_1000321C8();
        uint64_t v14 = v36;
        uint64_t v11 = v37;
      }

      v12 += 3;
      v11[2] = v27 + 1;
      uint64_t v28 = &v11[3 * v27];
      v28[4] = v14;
      void v28[5] = v13;
      void v28[6] = v19;
      --v10;
    }

    while (v10);
    sub_10004D998(v35);
  }

  else
  {
    sub_10004D998(a2);
    return _swiftEmptyArrayStorage;
  }

  return v11;
}

uint64_t sub_10004C060@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v29[3] = *(_OWORD *)a1;
  *(_OWORD *)&v29[5] = v4;
  __int128 v5 = *(_OWORD *)(a1 + 48);
  __int128 v30 = *(_OWORD *)(a1 + 32);
  __int128 v31 = v5;
  sub_1001BB530();
  uint64_t v7 = v6;
  char v9 = v8;
  sub_1001BB70C();
  uint64_t v11 = v10;
  char v13 = v12;
  uint64_t v14 = *((void *)&v30 + 1);
  uint64_t v28 = v30;
  sub_10004D8A0((__n128 *)(a1 + 72), (__n128 *)v29);
  sub_10004D8A0((__n128 *)v29, &v32);
  char v15 = v33;
  if ((v33 & 1) == 0)
  {
    uint64_t v21 = v32.n128_i64[1];
    uint64_t v26 = v32.n128_u64[0];
    uint64_t v27 = v7;
    uint64_t v22 = *(void *)(a1 + 64);
    if ((unint64_t)v22 >> 62)
    {
      if (v22 < 0) {
        uint64_t v25 = *(void *)(a1 + 64);
      }
      else {
        uint64_t v25 = v22 & 0xFFFFFFFFFFFFFF8LL;
      }
      sub_100023E9C();
      sub_10004DA54((uint64_t)v29);
      swift_bridgeObjectRetain();
      uint64_t v23 = (void *)_CocoaArrayWrapper.endIndex.getter(v25);
      if (!v23) {
        goto LABEL_8;
      }
    }

    else
    {
      uint64_t v23 = *(void **)((v22 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      sub_100023E9C();
      sub_10004DA54((uint64_t)v29);
      swift_bridgeObjectRetain();
      if (!v23)
      {
LABEL_8:
        sub_100024E84();
        uint64_t result = sub_10004CE3C(v23, v26, v21, a1);
        id v17 = (void *)result;
        uint64_t v7 = v27;
        goto LABEL_9;
      }
    }

    sub_100119E64(0LL, (v22 & 0xC000000000000001LL) == 0, v22);
    if ((v22 & 0xC000000000000001LL) != 0) {
      id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v22);
    }
    else {
      id v24 = *(id *)(v22 + 32);
    }
    uint64_t v23 = v24;
    goto LABEL_8;
  }

  sub_100023E9C();
  id v16 = sub_10004D254(a1);
  sub_10004D8DC(a1);
  id v17 = sub_10004BDC0((uint64_t)v16, a1);
  sub_10004D998(a1);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v19 = 0LL;
  uint64_t v20 = 0LL;
LABEL_9:
  *(void *)a2 = v7;
  *(_BYTE *)(a2 + _Block_object_dispose((const void *)(v1 - 136), 8) = v9 & 1;
  *(void *)(a2 + 16) = v11;
  *(_BYTE *)(a2 + 24) = v13 & 1;
  *(void *)(a2 + 32) = v28;
  *(void *)(a2 + 40) = v14;
  *(void *)(a2 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = 0x65646F6358LL;
  *(void *)(a2 + 56) = 0xE500000000000000LL;
  *(void *)(a2 + 64) = v17;
  *(void *)(a2 + 72) = v19;
  *(void *)(a2 + 80) = v20;
  *(_BYTE *)(a2 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = v15;
  return result;
}

uint64_t sub_10004C248(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100019F58(a1, v9);
  uint64_t v11 = dispatch thunk of Encoder.singleValueContainer()(&v24, v9, v10);
  if ((a5 & 1) != 0)
  {
    sub_100052304((uint64_t)v11, v12, v13, v14, v15, v16, v17, v18, a2, v23[1], v23[2], v24, v25, v26, v27);
    uint64_t v21 = sub_1000175B0(&qword_1002AB8C8);
    unint64_t v19 = sub_100052174();
    uint64_t v20 = (void *)v21;
  }

  else
  {
    sub_100052304((uint64_t)v11, v12, v13, v14, v15, v16, v17, v18, a2, a3, a4, v24, v25, v26, v27);
    unint64_t v19 = sub_1000521D8();
    uint64_t v20 = &unk_100278AC0;
  }

  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)(v23, v20, v19, a4, a2);
  return sub_100019F7C(&v24);
}

uint64_t sub_10004C32C(void *a1)
{
  return sub_10004C248(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t sub_10004C34C(void *a1)
{
  char v6 = v5;
  sub_10005234C();
  if ((v6 & 1) != 0)
  {

    return 4LL;
  }

  sub_1000B5088();
  if ((v8 & 1) != 0)
  {

    return 3LL;
  }

  static Date.now.getter(v8);
  sub_1000B5190();
  char v10 = v9;
  sub_10005234C();
  if ((v10 & 1) != 0)
  {

    return 1LL;
  }

  sub_1000B85C8(3u);
  if ((v11 & 1) != 0)
  {
  }

  else
  {
    char v12 = sub_1000B3D80();

    if ((v12 & 1) != 0) {
      return 5LL;
    }
  }

  return 2LL;
}

unint64_t sub_10004C42C(unint64_t result)
{
  if (result >= 6) {
    return 6LL;
  }
  return result;
}

uint64_t ExternalGatewayMode.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t sub_10004C444()
{
  return sub_100185CD0(*v0);
}

uint64_t sub_10004C44C(uint64_t a1)
{
  return HTTPParserError.hash(into:)(a1, *v1);
}

uint64_t sub_10004C454(uint64_t a1)
{
  return sub_1000B3420(a1, *v1);
}

unint64_t sub_10004C45C@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10004C42C(*a1);
  *a2 = result;
  return result;
}

void sub_10004C484()
{
  uint64_t v1 = sub_100052340();
  *uint64_t v0 = ExternalGatewayMode.rawValue.getter(v1);
  sub_10001945C();
}

uint64_t sub_10004C4A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100052214();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10004C500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100052214();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_10004C54C(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v59 = v7;
  uint64_t v8 = sub_1000175B0(&qword_1002AB748);
  sub_1000226C8();
  __chkstk_darwin(v9);
  sub_10001DAD0();
  uint64_t v12 = v11 - v10;
  sub_1000175B0(&qword_1002AB750);
  sub_1000226C8();
  __chkstk_darwin(v13);
  sub_1000227D0();
  uint64_t v57 = v14;
  uint64_t v55 = sub_1000175B0(&qword_1002AA328);
  sub_1000226C8();
  __chkstk_darwin(v15);
  sub_10004878C();
  type metadata accessor for RenewalInfo(0LL);
  sub_1000226C8();
  __chkstk_darwin(v16);
  sub_1000227D0();
  unint64_t v56 = v17;
  sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  sub_1000226C8();
  __chkstk_darwin(v18);
  sub_10001DAD0();
  uint64_t v21 = v20 - v19;
  type metadata accessor for CheddarTransaction(0LL);
  sub_1000226C8();
  __chkstk_darwin(v22);
  sub_1000227D0();
  unint64_t v61 = v23;
  uint64_t v58 = type metadata accessor for StatusResponse.Datum.TransactionContainer(0LL);
  sub_1000226C8();
  __chkstk_darwin(v24);
  sub_10001DAD0();
  uint64_t v27 = v26 - v25;
  id v28 = a1;
  *(_BYTE *)uint64_t v27 = sub_10004C34C(v28);
  uint64_t v29 = sub_1000B85BC(8u);
  uint64_t v53 = v3;
  if ((v30 & 1) != 0) {
    sub_1000B52F0();
  }
  uint64_t v62 = v29;
  *(void *)(v27 + _Block_object_dispose((const void *)(v1 - 136), 8) = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  *(void *)(v27 + 16) = v31;
  uint64_t v33 = *(void *)(a2 + 48);
  uint64_t v32 = *(void *)(a2 + 56);
  uint64_t v34 = *(void *)(a2 + 136);
  int v35 = *(unsigned __int8 *)(a2 + 144);
  swift_bridgeObjectRetain_n(v32, 2LL);
  id v36 = v28;
  uint64_t v54 = v34;
  sub_10011FE9C((uint64_t)v36, v61);
  sub_1000B5344(v21);
  uint64_t v37 = type metadata accessor for Date(0LL);
  LODWORD(v34) = sub_10001D158(v21, 1LL, v37);
  sub_10004DB00(v21, (uint64_t *)&unk_1002AFCD0);
  if ((_DWORD)v34 == 1)
  {
    uint64_t v51 = v8;
    uint64_t v52 = v12;
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v38 = type metadata accessor for Logger(0LL);
    sub_100018F68(v38, (uint64_t)qword_1002EB9D0);
    id v39 = v36;
    uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
    os_log_type_t v42 = static os_log_type_t.error.getter(v40, v41);
    if (os_log_type_enabled(v40, v42))
    {
      uint64_t v50 = v33;
      uint64_t v43 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v43 = 134217984;
      sub_1000B52F0();
      uint64_t v62 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v43 + 4);

      uint64_t v45 = v43;
      uint64_t v33 = v50;
      swift_slowDealloc(v45, -1LL, -1LL);
    }

    else
    {

      uint64_t v40 = (os_log_s *)v39;
    }

    uint64_t v8 = v51;

    uint64_t v12 = v52;
  }

  uint64_t v46 = *(void *)(a2 + 96);
  id v47 = v36;
  swift_retain();
  sub_100112448((uint64_t)v47, v46, v33, v32, v54, v35, v56);
  (*(void (**)(uint64_t *))(a2 + 104))(v61);
  if (sub_10001D158(v57, 1LL, v55) == 1)
  {
    sub_10004D998(a2);

    sub_10004DBAC(v56, type metadata accessor for RenewalInfo);
    sub_10004DBAC((uint64_t)v61, type metadata accessor for CheddarTransaction);
    id v48 = &qword_1002AB750;
    uint64_t v49 = v57;
LABEL_14:
    sub_10004DB00(v49, v48);
    swift_bridgeObjectRelease();
    sub_10001762C(a3, 1LL, 1LL, v58);
    return;
  }

  sub_10004DB28(v57, v53, &qword_1002AA328);
  (*(void (**)(unint64_t))(a2 + 120))(v56);

  sub_10004D998(a2);
  sub_10004DBAC(v56, type metadata accessor for RenewalInfo);
  sub_10004DBAC((uint64_t)v61, type metadata accessor for CheddarTransaction);
  if (sub_10001D158(v59, 1LL, v8) == 1)
  {
    sub_10004DB00(v53, &qword_1002AA328);
    id v48 = &qword_1002AB740;
    uint64_t v49 = v59;
    goto LABEL_14;
  }

  sub_10004DB28(v59, v12, &qword_1002AB748);
  sub_10004DB28(v53, v27 + *(int *)(v58 + 24), &qword_1002AA328);
  sub_10004DB28(v12, v27 + *(int *)(v58 + 28), &qword_1002AB748);
  sub_10004DB68(v27, a3);
  sub_10001762C(a3, 0LL, 1LL, v58);
  sub_10004DBAC(v27, type metadata accessor for StatusResponse.Datum.TransactionContainer);
}

void sub_10004CA80(uint64_t a1)
{
  v2._rawValue = &off_100271290;
  sub_100052314(v2, a1);
  sub_100019344();
  sub_10001945C();
}

uint64_t sub_10004CABC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10004CAEC + 4 * byte_1001F69A0[a1]))( 0x737574617473LL,  0xE600000000000000LL);
}

unint64_t sub_10004CAEC()
{
  return sub_1000522D0();
}

unint64_t sub_10004CB04()
{
  return 0xD000000000000011LL;
}

uint64_t sub_10004CB24(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10004CB54 + 4 * byte_1001F69A4[a1]))( 0x737574617473LL,  0xE600000000000000LL);
}

unint64_t sub_10004CB54()
{
  return sub_1000522D0();
}

unint64_t sub_10004CB6C()
{
  return 0xD000000000000011LL;
}

void sub_10004CB8C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000175B0(&qword_1002AB850);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100019F58(a1, a1[3]);
  unint64_t v7 = sub_10005193C();
  sub_100048764((uint64_t)&unk_100278BE8, v8, v7);
  char v23 = *v3;
  char v22 = 0;
  unint64_t v9 = sub_100051978();
  sub_100052298((uint64_t)&v23, (uint64_t)&v22, v5, (uint64_t)&unk_100278D98, v9);
  if (!v2)
  {
    uint64_t v10 = *((void *)v3 + 1);
    uint64_t v11 = *((void *)v3 + 2);
    char v21 = 1;
    sub_100023EB4(v10, v11, (uint64_t)&v21);
    uint64_t v12 = type metadata accessor for StatusResponse.Datum.TransactionContainer(0LL);
    uint64_t v13 = (uint64_t)&v3[*(int *)(v12 + 24)];
    char v20 = 2;
    uint64_t v14 = sub_1000175B0(&qword_1002AA328);
    sub_1000519B4((unint64_t *)&qword_1002AB868, &qword_1002AA328);
    sub_100052298(v13, (uint64_t)&v20, v5, v14, v15);
    uint64_t v16 = (uint64_t)&v3[*(int *)(v12 + 28)];
    char v19 = 3;
    uint64_t v17 = sub_1000175B0(&qword_1002AB748);
    sub_1000519B4(&qword_1002AB870, &qword_1002AB748);
    sub_100052298(v16, (uint64_t)&v19, v5, v17, v18);
  }

  sub_1000522F8(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  sub_10001DAB8();
}

void sub_10004CD30(char *a1)
{
}

void sub_10004CD3C()
{
}

void sub_10004CD44(uint64_t a1)
{
}

void sub_10004CD4C(uint64_t a1)
{
}

void sub_10004CD54(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = v3;
}

void sub_10004CD80()
{
  unsigned __int8 v1 = sub_100052340();
  *uint64_t v0 = sub_10004CABC(v1);
  v0[1] = v2;
  sub_10001945C();
}

uint64_t sub_10004CDA0()
{
  return sub_10004CB24(*v0);
}

uint64_t sub_10004CDA8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_10004CAB8();
  *a1 = result;
  return result;
}

void sub_10004CDCC(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_10004CDD8(uint64_t a1)
{
  unint64_t v2 = sub_10005193C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004CE00(uint64_t a1)
{
  unint64_t v2 = sub_10005193C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10004CE28(void *a1)
{
}

uint64_t sub_10004CE3C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = v9 - v8;
  uint64_t v11 = type metadata accessor for StatusResponse.Datum.TransactionContainer(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_10001DAD0();
  uint64_t v15 = v14 - v13;
  if (a1)
  {
    id v16 = a1;
    sub_10004D8DC(a4);
    sub_10004C54C(v16, a4, v10);
    if (sub_10001D158(v10, 1LL, v11) == 1)
    {
      sub_10004DB00(v10, &qword_1002AB730);
    }

    else
    {
      sub_10004DABC(v10, v15);
      uint64_t v17 = sub_1000175B0(&qword_1002AB738);
      uint64_t v18 = *(unsigned __int8 *)(v12 + 80);
      uint64_t v19 = (v18 + 32) & ~v18;
      uint64_t v20 = swift_allocObject(v17, v19 + *(void *)(v12 + 72), v18 | 7);
      *(_OWORD *)(v20 + 16) = xmmword_1001F3C00;
      sub_10004DABC(v15, v20 + v19);
      a1 = v16;
    }
  }

  sub_10004D998(a4);

  return a2;
}

void sub_10004CFA4(uint64_t a1)
{
  v2._rawValue = &off_100271310;
  sub_100052314(v2, a1);
  sub_100019344();
  sub_10001945C();
}

unint64_t sub_10004CFE8(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD000000000000010LL;
  }
  else {
    return 0xD00000000000001BLL;
  }
}

void sub_10004D028(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100019F58(a1, v11);
  unint64_t v13 = sub_100051884();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_100278C78, &unk_100278C78, v13, v11, v12);
  char v19 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v19, v4);
  if (!v5)
  {
    uint64_t v17 = a4;
    char v18 = 1;
    uint64_t v14 = sub_1000175B0(&qword_1002AB838);
    unint64_t v15 = sub_1000518C0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v17, &v18, v4, v14, v15);
  }

  sub_1000522F8(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  sub_10001DAB8();
}

void sub_10004D14C(char *a1, unsigned __int8 *a2)
{
}

void sub_10004D158()
{
}

uint64_t sub_10004D160()
{
  return sub_1000B21E4();
}

void sub_10004D168(uint64_t a1)
{
}

void sub_10004D170(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = v3;
}

void sub_10004D19C()
{
  char v1 = sub_100052340();
  *uint64_t v0 = sub_10004CFE8(v1);
  v0[1] = v2;
  sub_10001945C();
}

unint64_t sub_10004D1BC()
{
  return sub_10004CFE8(*v0);
}

uint64_t sub_10004D1C4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_10004CFE4();
  *a1 = result;
  return result;
}

uint64_t sub_10004D1E8(uint64_t a1)
{
  unint64_t v2 = sub_100051884();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004D210(uint64_t a1)
{
  unint64_t v2 = sub_100051884();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10004D238(void *a1)
{
}

void *sub_10004D254(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 88) != 1) {
    return _swiftEmptyArrayStorage;
  }
  char v1 = *(uint64_t **)(a1 + 72);
  uint64_t v2 = v1[2];
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 80);
    unint64_t v4 = *(void *)(a1 + 64);
    unint64_t v35 = v4;
    uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v30 = v3;
    if (v4 >> 62)
    {
LABEL_43:
      if ((v4 & 0x8000000000000000LL) == 0LL) {
        unint64_t v28 = v5;
      }
      else {
        unint64_t v28 = v4;
      }
      sub_10001FDC4((uint64_t)v1, v3, 1);
      sub_10004DBD4(&v35);
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v28);
      sub_10004DBFC(&v35);
    }

    else
    {
      uint64_t v6 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain();
    }

    uint64_t v7 = 0LL;
    unint64_t v34 = v4 & 0xC000000000000001LL;
    unint64_t v29 = v4;
    uint64_t v31 = (uint64_t)v1;
    unint64_t v32 = v4 + 32;
    v1 += 5;
    uint64_t v8 = _swiftEmptyArrayStorage;
    uint64_t v33 = v6;
    while (1)
    {
      uint64_t v10 = *(v1 - 1);
      uint64_t v9 = *v1;
      if (v7 >= v6)
      {
        sub_10005231C();
        if ((sub_100052324() & 1) == 0)
        {
          sub_100052250();
          uint64_t v8 = v20;
        }

        unint64_t v4 = v8[2];
        if (v4 >= v8[3] >> 1)
        {
          sub_100052250();
          uint64_t v8 = v21;
        }

        _OWORD v8[2] = v4 + 1;
        sub_10005232C();
        goto LABEL_34;
      }

      if (v34)
      {
        sub_10005231C();
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v29);
      }

      else
      {
        if (v7 < 0)
        {
          __break(1u);
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }

        uint64_t v11 = *(void **)(v32 + 8 * v7);
        sub_10005231C();
        id v12 = v11;
      }

      unint64_t v13 = v12;
      sub_1000B8508(0xFu);
      if (v15)
      {
        if (v14 == v10 && v15 == v9)
        {
          sub_100024E84();
LABEL_28:
          id v18 = v13;
          if ((sub_100052324() & 1) == 0)
          {
            sub_100052250();
            uint64_t v8 = v24;
          }

          unint64_t v4 = v8[2];
          if (v4 >= v8[3] >> 1)
          {
            sub_100052250();
            uint64_t v8 = v25;
          }

          _OWORD v8[2] = v4 + 1;
          char v19 = &v8[3 * v4];
          void v19[4] = v10;
          v19[5] = v9;
          v19[6] = v18;

          ++v7;
          goto LABEL_33;
        }

        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v10, v9, 0LL);
        sub_100024E84();
        if ((v17 & 1) != 0) {
          goto LABEL_28;
        }
      }

      if ((sub_100052324() & 1) == 0)
      {
        sub_100052250();
        uint64_t v8 = v22;
      }

      unint64_t v4 = v8[2];
      if (v4 >= v8[3] >> 1)
      {
        sub_100052250();
        uint64_t v8 = v23;
      }

      _OWORD v8[2] = v4 + 1;
      sub_10005232C();

LABEL_33:
      uint64_t v6 = v33;
LABEL_34:
      v1 += 2;
      if (!--v2)
      {
        sub_10001FDE0(v31, v30, 1);
        goto LABEL_39;
      }
    }
  }

  uint64_t v8 = _swiftEmptyArrayStorage;
LABEL_39:
  uint64_t v26 = sub_100069A60((uint64_t)v8);
  swift_bridgeObjectRelease();
  return v26;
}

void sub_10004D530(uint64_t a1)
{
  v2._rawValue = &off_100271360;
  sub_100052314(v2, a1);
  sub_100019344();
  sub_10001945C();
}

uint64_t sub_10004D56C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10004D598 + 4 * byte_1001F69A8[a1]))( 1684632420LL,  0xE400000000000000LL);
}

uint64_t sub_10004D5A4()
{
  return 1635017060LL;
}

uint64_t sub_10004D5B0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10004D5DC + 4 * byte_1001F69AD[a1]))( 1684632420LL,  0xE400000000000000LL);
}

uint64_t sub_10004D5E8()
{
  return 1635017060LL;
}

uint64_t sub_10004D5F4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000175B0(&qword_1002AB810);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100019F58(a1, a1[3]);
  unint64_t v7 = sub_1000517F4();
  sub_100048764((uint64_t)&unk_100278D08, v8, v7);
  uint64_t v9 = *(void *)v3;
  uint64_t v10 = *(unsigned __int8 *)(v3 + 8);
  LOBYTE(v20[0]) = 0;
  sub_1000522BC(v9, v10);
  if (!v2)
  {
    uint64_t v11 = *(void *)(v3 + 16);
    uint64_t v12 = *(unsigned __int8 *)(v3 + 24);
    LOBYTE(v20[0]) = 1;
    sub_1000522BC(v11, v12);
    uint64_t v13 = *(void *)(v3 + 32);
    uint64_t v14 = *(void *)(v3 + 40);
    LOBYTE(v20[0]) = 2;
    sub_100023EB4(v13, v14, (uint64_t)v20);
    uint64_t v15 = *(void *)(v3 + 48);
    uint64_t v16 = *(void *)(v3 + 56);
    LOBYTE(v20[0]) = 3;
    sub_100023EB4(v15, v16, (uint64_t)v20);
    sub_100051830((__int128 *)(v3 + 64), v21);
    sub_100051830(v21, v20);
    char v19 = 4;
    unint64_t v17 = sub_100051848();
    sub_100052298((uint64_t)v20, (uint64_t)&v19, v5, (uint64_t)&unk_100278E28, v17);
  }

  return sub_1000522F8(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
}

void sub_10004D758()
{
}

void sub_10004D764()
{
}

void sub_10004D76C()
{
}

void sub_10004D774(uint64_t a1)
{
}

void sub_10004D77C(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = v3;
}

void sub_10004D7A8()
{
  unsigned __int8 v1 = sub_100052340();
  *uint64_t v0 = sub_10004D56C(v1);
  v0[1] = v2;
  sub_10001945C();
}

uint64_t sub_10004D7C8()
{
  return sub_10004D5B0(*v0);
}

uint64_t sub_10004D7D0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_10004D568();
  *a1 = result;
  return result;
}

void sub_10004D7F4(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_10004D800(uint64_t a1)
{
  unint64_t v2 = sub_1000517F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004D828(uint64_t a1)
{
  unint64_t v2 = sub_1000517F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10004D850(void *a1)
{
  return sub_10004D5F4(a1);
}

__n128 *sub_10004D8A0(__n128 *a1, __n128 *a2)
{
  return a2;
}

uint64_t sub_10004D8DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = *(void *)(a1 + 80);
  char v4 = *(_BYTE *)(a1 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10001FDC4(v2, v3, v4);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_10004D998(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = *(void *)(a1 + 80);
  char v4 = *(_BYTE *)(a1 + 88);
  uint64_t v8 = *(void *)(a1 + 96);
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 128);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001FDE0(v2, v3, v4);
  swift_release(v6);
  swift_release(v5);
  swift_release(v8);
  return a1;
}

uint64_t sub_10004DA54(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for StatusResponse.Datum.TransactionContainer(uint64_t a1)
{
  uint64_t result = qword_1002AB7B0;
  if (!qword_1002AB7B0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StatusResponse.Datum.TransactionContainer);
  }
  return result;
}

uint64_t sub_10004DABC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for StatusResponse.Datum.TransactionContainer(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void sub_10004DB00(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = sub_1000175B0(a2);
  sub_1000522E4(v2);
  sub_10001945C();
}

void sub_10004DB28(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000175B0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  sub_10001945C();
}

uint64_t sub_10004DB68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for StatusResponse.Datum.TransactionContainer(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_10004DBAC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2(0LL);
  sub_1000522E4(v2);
  sub_10001945C();
}

void *sub_10004DBD4(void *a1)
{
  return a1;
}

void *sub_10004DBFC(void *a1)
{
  return a1;
}

uint64_t destroy for TargetIterator(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

void sub_10004DC50(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10001945C();
}

void *assignWithCopy for ProductResponse(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void *assignWithTake for ProductResponse(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = a1[2];
  *(_OWORD *)(a1 + Hasher._combine(_:)(v1 & 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for TargetIterator(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TargetIterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for StatusResponse.Datum()
{
}

uint64_t *sub_10004DDBC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v74 = *a2;
    *a1 = *a2;
    uint64_t v75 = v74 + ((v4 + 16LL) & ~(unint64_t)v4);
    swift_retain();
  }

  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    uint64_t v5 = a2[2];
    a1[1] = a2[1];
    a1[2] = v5;
    uint64_t v6 = *(int *)(a3 + 24);
    v213 = a1;
    uint64_t v7 = (uint64_t *)((char *)a1 + v6);
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = *(uint64_t *)((char *)a2 + v6 + 8);
    void *v7 = *(uint64_t *)((char *)a2 + v6);
    v7[1] = v9;
    uint64_t v10 = *(uint64_t *)((char *)a2 + v6 + 24);
    v7[2] = *(uint64_t *)((char *)a2 + v6 + 16);
    v7[3] = v10;
    uint64_t v11 = *(uint64_t *)((char *)a2 + v6 + 40);
    void v7[4] = *(uint64_t *)((char *)a2 + v6 + 32);
    v7[5] = v11;
    uint64_t v13 = *(uint64_t *)((char *)a2 + v6 + 48);
    uint64_t v12 = *(uint64_t *)((char *)a2 + v6 + 56);
    v7[6] = v13;
    v7[7] = v12;
    v7[8] = *((void *)v8 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v205 = (int *)sub_1000175B0(&qword_1002AA328);
    v206 = v8;
    uint64_t v14 = v205[9];
    v207 = v7;
    uint64_t v15 = (void *)((char *)v7 + v14);
    uint64_t v16 = &v8[v14];
    uint64_t v17 = *(void *)&v8[v14 + 8];
    *uint64_t v15 = *(void *)&v8[v14];
    v15[1] = v17;
    id v18 = (int *)type metadata accessor for CheddarTransaction(0LL);
    uint64_t v19 = v18[5];
    uint64_t v20 = (char *)v15 + v19;
    char v21 = &v16[v19];
    uint64_t v22 = type metadata accessor for Date(0LL);
    char v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16LL);
    swift_bridgeObjectRetain();
    v23(v20, v21, v22);
    uint64_t v24 = v18[6];
    uint64_t v25 = (void *)((char *)v15 + v24);
    uint64_t v26 = &v16[v24];
    uint64_t v27 = *((void *)v26 + 1);
    *uint64_t v25 = *(void *)v26;
    v25[1] = v27;
    uint64_t v28 = v18[7];
    unint64_t v29 = (void *)((char *)v15 + v28);
    uint64_t v30 = &v16[v28];
    uint64_t v31 = *((void *)v30 + 1);
    *unint64_t v29 = *(void *)v30;
    v29[1] = v31;
    uint64_t v32 = v18[8];
    uint64_t v33 = (void *)((char *)v15 + v32);
    unint64_t v34 = &v16[v32];
    uint64_t v35 = *((void *)v34 + 1);
    *uint64_t v33 = *(void *)v34;
    v33[1] = v35;
    uint64_t v36 = v18[9];
    uint64_t v37 = (char *)v15 + v36;
    uint64_t v38 = &v16[v36];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23(v37, v38, v22);
    uint64_t v39 = v18[10];
    uint64_t v40 = (void *)((char *)v15 + v39);
    uint64_t v41 = &v16[v39];
    uint64_t v42 = *((void *)v41 + 1);
    void *v40 = *(void *)v41;
    v40[1] = v42;
    *((_BYTE *)v15 + v18[11]) = v16[v18[11]];
    uint64_t v43 = v18[12];
    uint64_t v44 = (void *)((char *)v15 + v43);
    uint64_t v45 = &v16[v43];
    uint64_t v46 = *((void *)v45 + 1);
    *uint64_t v44 = *(void *)v45;
    v44[1] = v46;
    uint64_t v47 = v18[13];
    id v48 = (char *)v15 + v47;
    uint64_t v49 = &v16[v47];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v212 = v23;
    v23(v48, v49, v22);
    *(void *)((char *)v15 + v18[14]) = *(void *)&v16[v18[14]];
    uint64_t v50 = v18[15];
    uint64_t v51 = (void *)((char *)v15 + v50);
    uint64_t v52 = &v16[v50];
    uint64_t v53 = *((void *)v52 + 1);
    *uint64_t v51 = *(void *)v52;
    v51[1] = v53;
    *(void *)((char *)v15 + v18[16]) = *(void *)&v16[v18[16]];
    *((_BYTE *)v15 + v18[17]) = v16[v18[17]];
    uint64_t v54 = v18[18];
    uint64_t v55 = (void *)((char *)v15 + v54);
    unint64_t v56 = &v16[v54];
    uint64_t v57 = *((void *)v56 + 1);
    *uint64_t v55 = *(void *)v56;
    v55[1] = v57;
    uint64_t v58 = v18[19];
    uint64_t v59 = (void *)((char *)v15 + v58);
    uint64_t v60 = &v16[v58];
    uint64_t v61 = *((void *)v60 + 1);
    *uint64_t v59 = *(void *)v60;
    v59[1] = v61;
    uint64_t v62 = v18[20];
    uint64_t v63 = (void *)((char *)v15 + v62);
    Swift::String v64 = &v16[v62];
    uint64_t v65 = *((void *)v64 + 1);
    *uint64_t v63 = *(void *)v64;
    v63[1] = v65;
    uint64_t v66 = v18[21];
    uint64_t v67 = (void *)((char *)v15 + v66);
    uint64_t v68 = &v16[v66];
    uint64_t v69 = *((void *)v68 + 1);
    *uint64_t v67 = *(void *)v68;
    v67[1] = v69;
    uint64_t v70 = v18[22];
    uint64_t v71 = (char *)v15 + v70;
    uint64_t v72 = &v16[v70];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (sub_10001D158((uint64_t)v72, 1LL, v22))
    {
      uint64_t v73 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
      memcpy(v71, v72, *(void *)(*(void *)(v73 - 8) + 64LL));
    }

    else
    {
      v212(v71, v72, v22);
      sub_10001762C((uint64_t)v71, 0LL, 1LL, v22);
    }

    uint64_t v76 = v18[23];
    Class v77 = (void *)((char *)v15 + v76);
    id v78 = &v16[v76];
    uint64_t v79 = *((void *)v78 + 1);
    *Class v77 = *(void *)v78;
    v77[1] = v79;
    uint64_t v80 = v18[24];
    unint64_t v81 = (void *)((char *)v15 + v80);
    unint64_t v82 = &v16[v80];
    uint64_t v83 = *((void *)v82 + 1);
    *unint64_t v81 = *(void *)v82;
    v81[1] = v83;
    uint64_t v84 = v18[25];
    uint64_t v85 = (void *)((char *)v15 + v84);
    uint64_t v86 = &v16[v84];
    uint64_t v87 = *((void *)v86 + 1);
    void *v85 = *(void *)v86;
    v85[1] = v87;
    uint64_t v88 = v18[26];
    uint64_t v89 = (char *)v15 + v88;
    uint64_t v90 = &v16[v88];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v200 = v22;
    if (sub_10001D158((uint64_t)v90, 1LL, v22))
    {
      uint64_t v91 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
      memcpy(v89, v90, *(void *)(*(void *)(v91 - 8) + 64LL));
    }

    else
    {
      v212(v89, v90, v22);
      sub_10001762C((uint64_t)v89, 0LL, 1LL, v22);
    }

    *((_BYTE *)v15 + v18[27]) = v16[v18[27]];
    uint64_t v92 = v18[28];
    uint64_t v93 = (void *)((char *)v15 + v92);
    BOOL v94 = &v16[v92];
    uint64_t v203 = *((void *)v94 + 1);
    *uint64_t v93 = *(void *)v94;
    v93[1] = v203;
    *((_BYTE *)v15 + v18[29]) = v16[v18[29]];
    *((_BYTE *)v15 + v18[30]) = v16[v18[30]];
    *((_BYTE *)v15 + v18[31]) = v16[v18[31]];
    uint64_t v95 = v18[32];
    uint64_t v96 = (void *)((char *)v15 + v95);
    unint64_t v97 = &v16[v95];
    uint64_t v201 = *((void *)v97 + 1);
    *uint64_t v96 = *(void *)v97;
    v96[1] = v201;
    uint64_t v98 = v18[33];
    id v99 = (void *)((char *)v15 + v98);
    unint64_t v100 = &v16[v98];
    uint64_t v199 = *((void *)v100 + 1);
    void *v99 = *(void *)v100;
    v99[1] = v199;
    uint64_t v101 = v18[34];
    uint64_t v102 = (void *)((char *)v15 + v101);
    uint64_t v103 = &v16[v101];
    uint64_t v198 = *((void *)v103 + 1);
    *uint64_t v102 = *(void *)v103;
    v102[1] = v198;
    uint64_t v104 = v18[35];
    uint64_t v105 = (void *)((char *)v15 + v104);
    uint64_t v106 = &v16[v104];
    uint64_t v197 = *((void *)v106 + 1);
    *uint64_t v105 = *(void *)v106;
    v105[1] = v197;
    uint64_t v107 = v18[36];
    uint64_t v108 = (void *)((char *)v15 + v107);
    uint64_t v109 = &v16[v107];
    uint64_t v196 = *((void *)v109 + 1);
    *uint64_t v108 = *(void *)v109;
    v108[1] = v196;
    uint64_t v110 = v18[37];
    uint64_t v111 = (void *)((char *)v15 + v110);
    uint64_t v112 = &v16[v110];
    uint64_t v113 = *((void *)v112 + 1);
    *uint64_t v111 = *(void *)v112;
    v111[1] = v113;
    uint64_t v114 = v18[38];
    uint64_t v115 = (void *)((char *)v15 + v114);
    uint64_t v116 = &v16[v114];
    uint64_t v117 = *((void *)v116 + 1);
    *uint64_t v115 = *(void *)v116;
    v115[1] = v117;
    uint64_t v118 = v18[39];
    Swift::Int v119 = (void *)((char *)v15 + v118);
    uint64_t v120 = &v16[v118];
    uint64_t v121 = *((void *)v120 + 1);
    *Swift::Int v119 = *(void *)v120;
    v119[1] = v121;
    uint64_t v122 = v18[40];
    uint64_t v123 = (void *)((char *)v15 + v122);
    int v124 = &v16[v122];
    uint64_t v125 = *((void *)v124 + 1);
    *uint64_t v123 = *(void *)v124;
    v123[1] = v125;
    uint64_t v126 = v18[41];
    unsigned int v127 = (char *)v15 + v126;
    unsigned int v128 = &v16[v126];
    *(void *)unsigned int v127 = *(void *)v128;
    v127[8] = v128[8];
    uint64_t v129 = v18[42];
    unsigned __int16 v130 = (void *)((char *)v15 + v129);
    unsigned __int8 v131 = &v16[v129];
    uint64_t v132 = *((void *)v131 + 1);
    *unsigned __int16 v130 = *(void *)v131;
    v130[1] = v132;
    uint64_t v133 = v205[10];
    v194 = &v206[v133];
    v195 = (char *)v207 + v133;
    uint64_t v134 = type metadata accessor for P256.Signing.PrivateKey(0LL);
    uint64_t v135 = *(void (**)(char *, char *, uint64_t))(*(void *)(v134 - 8) + 16LL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v202 = v135;
    uint64_t v204 = v134;
    v135(v195, v194, v134);
    uint64_t v136 = v205[11];
    uint64_t v137 = (char *)v207 + v136;
    uint64_t v138 = &v206[v136];
    *(void *)uint64_t v137 = *(void *)v138;
    v137[8] = v138[8];
    *((_BYTE *)v207 + v205[12]) = v206[v205[12]];
    uint64_t v139 = *(int *)(a3 + 28);
    uint64_t v140 = (uint64_t *)((char *)v213 + v139);
    uint64_t v141 = (char *)a2 + v139;
    uint64_t v142 = *(uint64_t *)((char *)a2 + v139 + 8);
    *uint64_t v140 = *(uint64_t *)((char *)a2 + v139);
    v140[1] = v142;
    uint64_t v143 = *(uint64_t *)((char *)a2 + v139 + 24);
    v140[2] = *(uint64_t *)((char *)a2 + v139 + 16);
    v140[3] = v143;
    uint64_t v144 = *(uint64_t *)((char *)a2 + v139 + 40);
    v140[4] = *(uint64_t *)((char *)a2 + v139 + 32);
    v140[5] = v144;
    uint64_t v146 = *(uint64_t *)((char *)a2 + v139 + 48);
    uint64_t v145 = *(uint64_t *)((char *)a2 + v139 + 56);
    v140[6] = v146;
    v140[7] = v145;
    v140[8] = *((void *)v141 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v209 = (int *)sub_1000175B0(&qword_1002AB748);
    v211 = (char *)v140;
    uint64_t v147 = v209[9];
    int v148 = (char *)v140 + v147;
    int v149 = &v141[v147];
    uint64_t v150 = *(void *)&v141[v147 + 8];
    *(void *)int v148 = *(void *)&v141[v147];
    *((void *)v148 + Hasher._combine(_:)(v1 & 1) = v150;
    v148[16] = v141[v147 + 16];
    uint64_t v151 = *(void *)&v141[v147 + 32];
    *((void *)v148 + sub_100019F7C(v0 + 3) = *(void *)&v141[v147 + 24];
    *((void *)v148 + 4) = v151;
    uint64_t v152 = *(void *)&v141[v147 + 48];
    *((void *)v148 + 5) = *(void *)&v141[v147 + 40];
    *((void *)v148 + 6) = v152;
    uint64_t v153 = *(void *)&v141[v147 + 64];
    *((void *)v148 + 7) = *(void *)&v141[v147 + 56];
    *((void *)v148 + _Block_object_dispose((const void *)(v1 - 136), 8) = v153;
    v148[72] = v141[v147 + 72];
    *(_WORD *)(v148 + 7sub_100019F7C(v0 + 3) = *(_WORD *)&v141[v147 + 73];
    unsigned int v154 = (int *)type metadata accessor for RenewalInfo(0LL);
    uint64_t v155 = v154[12];
    unsigned int v156 = &v148[v155];
    int v157 = &v149[v155];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (sub_10001D158((uint64_t)v157, 1LL, v200))
    {
      uint64_t v158 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
      memcpy(v156, v157, *(void *)(*(void *)(v158 - 8) + 64LL));
      int v159 = v212;
    }

    else
    {
      int v159 = v212;
      v212(v156, v157, v200);
      sub_10001762C((uint64_t)v156, 0LL, 1LL, v200);
    }

    uint64_t v160 = v154[13];
    BOOL v161 = &v148[v160];
    int v162 = &v149[v160];
    uint64_t v163 = *((void *)v162 + 1);
    *(void *)BOOL v161 = *(void *)v162;
    *((void *)v161 + Hasher._combine(_:)(v1 & 1) = v163;
    uint64_t v164 = v154[14];
    unsigned int v165 = &v148[v164];
    int v166 = &v149[v164];
    uint64_t v167 = *((void *)v166 + 1);
    *(void *)unsigned int v165 = *(void *)v166;
    *((void *)v165 + Hasher._combine(_:)(v1 & 1) = v167;
    uint64_t v168 = v154[15];
    int v169 = &v148[v168];
    int v170 = &v149[v168];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v159(v169, v170, v200);
    v148[v154[16]] = v149[v154[16]];
    uint64_t v171 = v154[17];
    unsigned int v172 = &v148[v171];
    unsigned int v173 = &v149[v171];
    uint64_t v174 = *((void *)v173 + 1);
    *(void *)unsigned int v172 = *(void *)v173;
    *((void *)v172 + Hasher._combine(_:)(v1 & 1) = v174;
    v148[v154[18]] = v149[v154[18]];
    uint64_t v175 = v154[19];
    unsigned int v176 = &v148[v175];
    BOOL v177 = &v149[v175];
    *(void *)unsigned int v176 = *(void *)v177;
    v176[8] = v177[8];
    uint64_t v178 = v154[20];
    int v179 = &v148[v178];
    unsigned int v180 = &v149[v178];
    uint64_t v181 = *((void *)v180 + 1);
    *(void *)int v179 = *(void *)v180;
    *((void *)v179 + Hasher._combine(_:)(v1 & 1) = v181;
    *(void *)&v148[v154[21]] = *(void *)&v149[v154[21]];
    uint64_t v182 = v154[22];
    char v183 = &v148[v182];
    unsigned int v184 = &v149[v182];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (sub_10001D158((uint64_t)v184, 1LL, v200))
    {
      uint64_t v185 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
      memcpy(v183, v184, *(void *)(*(void *)(v185 - 8) + 64LL));
    }

    else
    {
      v159(v183, v184, v200);
      sub_10001762C((uint64_t)v183, 0LL, 1LL, v200);
    }

    uint64_t v186 = v154[23];
    int v187 = &v148[v186];
    unsigned int v188 = &v149[v186];
    if (sub_10001D158((uint64_t)&v149[v186], 1LL, v200))
    {
      uint64_t v189 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
      memcpy(v187, v188, *(void *)(*(void *)(v189 - 8) + 64LL));
    }

    else
    {
      v159(v187, v188, v200);
      sub_10001762C((uint64_t)v187, 0LL, 1LL, v200);
    }

    v202(&v211[v209[10]], &v141[v209[10]], v204);
    uint64_t v190 = v209[11];
    v191 = &v211[v190];
    v192 = &v141[v190];
    *(void *)v191 = *(void *)v192;
    v191[8] = v192[8];
    v211[v209[12]] = v141[v209[12]];
    return v213;
  }

  return (uint64_t *)v75;
}

uint64_t sub_10004E6F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = sub_1000175B0(&qword_1002AA328);
  uint64_t v6 = v4 + *(int *)(v5 + 36);
  swift_bridgeObjectRelease();
  uint64_t v7 = (int *)type metadata accessor for CheddarTransaction(0LL);
  uint64_t v8 = v6 + v7[5];
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10(v6 + v7[9], v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10(v6 + v7[13], v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v6 + v7[22];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = v6 + v7[26];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = v4 + *(int *)(v5 + 40);
  uint64_t v14 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  char v23 = *(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8LL);
  v23(v13, v14);
  uint64_t v15 = a1 + *(int *)(a2 + 28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = sub_1000175B0(&qword_1002AB748);
  uint64_t v17 = v15 + *(int *)(v16 + 36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v18 = (int *)type metadata accessor for RenewalInfo(0LL);
  uint64_t v19 = v17 + v18[12];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10(v17 + v18[15], v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v20 = v17 + v18[22];
  uint64_t v21 = v17 + v18[23];
  return ((uint64_t (*)(uint64_t, uint64_t))v23)(v15 + *(int *)(v16 + 40), v14);
}

uint64_t sub_10004EB38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v210 = a1;
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = a2 + v5;
  uint64_t v8 = *(void *)(a2 + v5 + 8);
  *uint64_t v6 = *(void *)(a2 + v5);
  v6[1] = v8;
  uint64_t v9 = *(void *)(a2 + v5 + 24);
  _OWORD v6[2] = *(void *)(a2 + v5 + 16);
  void v6[3] = v9;
  uint64_t v10 = *(void *)(a2 + v5 + 40);
  v6[4] = *(void *)(a2 + v5 + 32);
  void v6[5] = v10;
  uint64_t v12 = *(void *)(a2 + v5 + 48);
  uint64_t v11 = *(void *)(a2 + v5 + 56);
  v6[6] = v12;
  v6[7] = v11;
  v6[8] = *(void *)(v7 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v202 = (int *)sub_1000175B0(&qword_1002AA328);
  uint64_t v203 = v7;
  uint64_t v13 = v202[9];
  uint64_t v204 = v6;
  uint64_t v14 = (void *)((char *)v6 + v13);
  uint64_t v15 = v7 + v13;
  uint64_t v16 = *(void *)(v7 + v13 + 8);
  void *v14 = *(void *)(v7 + v13);
  v14[1] = v16;
  uint64_t v17 = (int *)type metadata accessor for CheddarTransaction(0LL);
  uint64_t v18 = v17[5];
  uint64_t v19 = (char *)v14 + v18;
  uint64_t v20 = v15 + v18;
  uint64_t v21 = type metadata accessor for Date(0LL);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16LL);
  swift_bridgeObjectRetain();
  v22(v19, v20, v21);
  uint64_t v23 = v17[6];
  uint64_t v24 = (void *)((char *)v14 + v23);
  uint64_t v25 = (void *)(v15 + v23);
  uint64_t v26 = v25[1];
  *uint64_t v24 = *v25;
  v24[1] = v26;
  uint64_t v27 = v17[7];
  uint64_t v28 = (void *)((char *)v14 + v27);
  unint64_t v29 = (void *)(v15 + v27);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  uint64_t v31 = v17[8];
  uint64_t v32 = (void *)((char *)v14 + v31);
  uint64_t v33 = (void *)(v15 + v31);
  uint64_t v34 = v33[1];
  void *v32 = *v33;
  v32[1] = v34;
  uint64_t v35 = v17[9];
  uint64_t v36 = (char *)v14 + v35;
  uint64_t v37 = v15 + v35;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22(v36, v37, v21);
  uint64_t v38 = v17[10];
  uint64_t v39 = (void *)((char *)v14 + v38);
  uint64_t v40 = (void *)(v15 + v38);
  uint64_t v41 = v40[1];
  *uint64_t v39 = *v40;
  v39[1] = v41;
  *((_BYTE *)v14 + v17[11]) = *(_BYTE *)(v15 + v17[11]);
  uint64_t v42 = v17[12];
  uint64_t v43 = (void *)((char *)v14 + v42);
  uint64_t v44 = (void *)(v15 + v42);
  uint64_t v45 = v44[1];
  *uint64_t v43 = *v44;
  v43[1] = v45;
  uint64_t v46 = v17[13];
  uint64_t v47 = (char *)v14 + v46;
  uint64_t v48 = v15 + v46;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v209 = (void (*)(char *, const void *, uint64_t))v22;
  v22(v47, v48, v21);
  *(void *)((char *)v14 + v17[14]) = *(void *)(v15 + v17[14]);
  uint64_t v49 = v17[15];
  uint64_t v50 = (void *)((char *)v14 + v49);
  uint64_t v51 = (void *)(v15 + v49);
  uint64_t v52 = v51[1];
  *uint64_t v50 = *v51;
  v50[1] = v52;
  *(void *)((char *)v14 + v17[16]) = *(void *)(v15 + v17[16]);
  *((_BYTE *)v14 + v17[17]) = *(_BYTE *)(v15 + v17[17]);
  uint64_t v53 = v17[18];
  uint64_t v54 = (void *)((char *)v14 + v53);
  uint64_t v55 = (void *)(v15 + v53);
  uint64_t v56 = v55[1];
  *uint64_t v54 = *v55;
  v54[1] = v56;
  uint64_t v57 = v17[19];
  uint64_t v58 = (void *)((char *)v14 + v57);
  uint64_t v59 = (void *)(v15 + v57);
  uint64_t v60 = v59[1];
  *uint64_t v58 = *v59;
  v58[1] = v60;
  uint64_t v61 = v17[20];
  uint64_t v62 = (void *)((char *)v14 + v61);
  uint64_t v63 = (void *)(v15 + v61);
  uint64_t v64 = v63[1];
  *uint64_t v62 = *v63;
  v62[1] = v64;
  uint64_t v65 = v17[21];
  uint64_t v66 = (void *)((char *)v14 + v65);
  uint64_t v67 = (void *)(v15 + v65);
  uint64_t v68 = v67[1];
  *uint64_t v66 = *v67;
  v66[1] = v68;
  uint64_t v69 = v17[22];
  uint64_t v70 = (char *)v14 + v69;
  uint64_t v71 = (const void *)(v15 + v69);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (sub_10001D158((uint64_t)v71, 1LL, v21))
  {
    uint64_t v72 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v70, v71, *(void *)(*(void *)(v72 - 8) + 64LL));
  }

  else
  {
    v209(v70, v71, v21);
    sub_10001762C((uint64_t)v70, 0LL, 1LL, v21);
  }

  uint64_t v73 = v17[23];
  uint64_t v74 = (void *)((char *)v14 + v73);
  uint64_t v75 = (void *)(v15 + v73);
  uint64_t v76 = v75[1];
  void *v74 = *v75;
  v74[1] = v76;
  uint64_t v77 = v17[24];
  id v78 = (void *)((char *)v14 + v77);
  uint64_t v79 = (void *)(v15 + v77);
  uint64_t v80 = v79[1];
  *id v78 = *v79;
  v78[1] = v80;
  uint64_t v81 = v17[25];
  unint64_t v82 = (void *)((char *)v14 + v81);
  uint64_t v83 = (void *)(v15 + v81);
  uint64_t v84 = v83[1];
  *unint64_t v82 = *v83;
  v82[1] = v84;
  uint64_t v85 = v17[26];
  uint64_t v86 = (char *)v14 + v85;
  uint64_t v87 = (const void *)(v15 + v85);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v197 = v21;
  if (sub_10001D158((uint64_t)v87, 1LL, v21))
  {
    uint64_t v88 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v86, v87, *(void *)(*(void *)(v88 - 8) + 64LL));
  }

  else
  {
    v209(v86, v87, v21);
    sub_10001762C((uint64_t)v86, 0LL, 1LL, v21);
  }

  *((_BYTE *)v14 + v17[27]) = *(_BYTE *)(v15 + v17[27]);
  uint64_t v89 = v17[28];
  uint64_t v90 = (void *)((char *)v14 + v89);
  uint64_t v91 = (void *)(v15 + v89);
  uint64_t v200 = v91[1];
  void *v90 = *v91;
  v90[1] = v200;
  *((_BYTE *)v14 + v17[29]) = *(_BYTE *)(v15 + v17[29]);
  *((_BYTE *)v14 + v17[30]) = *(_BYTE *)(v15 + v17[30]);
  *((_BYTE *)v14 + v17[31]) = *(_BYTE *)(v15 + v17[31]);
  uint64_t v92 = v17[32];
  uint64_t v93 = (void *)((char *)v14 + v92);
  BOOL v94 = (void *)(v15 + v92);
  uint64_t v198 = v94[1];
  *uint64_t v93 = *v94;
  v93[1] = v198;
  uint64_t v95 = v17[33];
  uint64_t v96 = (void *)((char *)v14 + v95);
  unint64_t v97 = (void *)(v15 + v95);
  uint64_t v196 = v97[1];
  *uint64_t v96 = *v97;
  v96[1] = v196;
  uint64_t v98 = v17[34];
  id v99 = (void *)((char *)v14 + v98);
  unint64_t v100 = (void *)(v15 + v98);
  uint64_t v195 = v100[1];
  void *v99 = *v100;
  v99[1] = v195;
  uint64_t v101 = v17[35];
  uint64_t v102 = (void *)((char *)v14 + v101);
  uint64_t v103 = (void *)(v15 + v101);
  uint64_t v194 = v103[1];
  *uint64_t v102 = *v103;
  v102[1] = v194;
  uint64_t v104 = v17[36];
  uint64_t v105 = (void *)((char *)v14 + v104);
  uint64_t v106 = (void *)(v15 + v104);
  uint64_t v193 = v106[1];
  *uint64_t v105 = *v106;
  v105[1] = v193;
  uint64_t v107 = v17[37];
  uint64_t v108 = (void *)((char *)v14 + v107);
  uint64_t v109 = (void *)(v15 + v107);
  uint64_t v110 = v109[1];
  *uint64_t v108 = *v109;
  v108[1] = v110;
  uint64_t v111 = v17[38];
  uint64_t v112 = (void *)((char *)v14 + v111);
  uint64_t v113 = (void *)(v15 + v111);
  uint64_t v114 = v113[1];
  *uint64_t v112 = *v113;
  v112[1] = v114;
  uint64_t v115 = v17[39];
  uint64_t v116 = (void *)((char *)v14 + v115);
  uint64_t v117 = (void *)(v15 + v115);
  uint64_t v118 = v117[1];
  *uint64_t v116 = *v117;
  v116[1] = v118;
  uint64_t v119 = v17[40];
  uint64_t v120 = (void *)((char *)v14 + v119);
  uint64_t v121 = (void *)(v15 + v119);
  uint64_t v122 = v121[1];
  *uint64_t v120 = *v121;
  v120[1] = v122;
  uint64_t v123 = v17[41];
  int v124 = (char *)v14 + v123;
  uint64_t v125 = v15 + v123;
  *(void *)int v124 = *(void *)v125;
  v124[8] = *(_BYTE *)(v125 + 8);
  uint64_t v126 = v17[42];
  unsigned int v127 = (void *)((char *)v14 + v126);
  unsigned int v128 = (void *)(v15 + v126);
  uint64_t v129 = v128[1];
  *unsigned int v127 = *v128;
  v127[1] = v129;
  uint64_t v130 = v202[10];
  uint64_t v191 = v203 + v130;
  v192 = (char *)v204 + v130;
  uint64_t v131 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  uint64_t v132 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v131 - 8) + 16LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v199 = v132;
  uint64_t v201 = v131;
  v132(v192, v191, v131);
  uint64_t v133 = v202[11];
  uint64_t v134 = (char *)v204 + v133;
  uint64_t v135 = v203 + v133;
  *(void *)uint64_t v134 = *(void *)v135;
  v134[8] = *(_BYTE *)(v135 + 8);
  *((_BYTE *)v204 + v202[12]) = *(_BYTE *)(v203 + v202[12]);
  uint64_t v136 = *(int *)(a3 + 28);
  uint64_t v137 = (char *)(v210 + v136);
  uint64_t v138 = a2 + v136;
  uint64_t v139 = *(void *)(a2 + v136 + 8);
  *(void *)uint64_t v137 = *(void *)(a2 + v136);
  *((void *)v137 + Hasher._combine(_:)(v1 & 1) = v139;
  uint64_t v140 = *(void *)(a2 + v136 + 24);
  *((void *)v137 + 2) = *(void *)(a2 + v136 + 16);
  *((void *)v137 + sub_100019F7C(v0 + 3) = v140;
  uint64_t v141 = *(void *)(a2 + v136 + 40);
  *((void *)v137 + 4) = *(void *)(a2 + v136 + 32);
  *((void *)v137 + 5) = v141;
  uint64_t v143 = *(void *)(a2 + v136 + 48);
  uint64_t v142 = *(void *)(a2 + v136 + 56);
  *((void *)v137 + 6) = v143;
  *((void *)v137 + 7) = v142;
  *((void *)v137 + _Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(v138 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v206 = (int *)sub_1000175B0(&qword_1002AB748);
  v208 = v137;
  uint64_t v144 = v206[9];
  uint64_t v145 = &v137[v144];
  uint64_t v146 = v138 + v144;
  uint64_t v147 = *(void *)(v138 + v144 + 8);
  *(void *)uint64_t v145 = *(void *)(v138 + v144);
  *((void *)v145 + Hasher._combine(_:)(v1 & 1) = v147;
  v145[16] = *(_BYTE *)(v138 + v144 + 16);
  uint64_t v148 = *(void *)(v138 + v144 + 32);
  *((void *)v145 + sub_100019F7C(v0 + 3) = *(void *)(v138 + v144 + 24);
  *((void *)v145 + 4) = v148;
  uint64_t v149 = *(void *)(v138 + v144 + 48);
  *((void *)v145 + 5) = *(void *)(v138 + v144 + 40);
  *((void *)v145 + 6) = v149;
  uint64_t v150 = *(void *)(v138 + v144 + 64);
  *((void *)v145 + 7) = *(void *)(v138 + v144 + 56);
  *((void *)v145 + _Block_object_dispose((const void *)(v1 - 136), 8) = v150;
  v145[72] = *(_BYTE *)(v138 + v144 + 72);
  *(_WORD *)(v145 + 7sub_100019F7C(v0 + 3) = *(_WORD *)(v138 + v144 + 73);
  uint64_t v151 = (int *)type metadata accessor for RenewalInfo(0LL);
  uint64_t v152 = v151[12];
  uint64_t v153 = &v145[v152];
  unsigned int v154 = (const void *)(v146 + v152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (sub_10001D158((uint64_t)v154, 1LL, v197))
  {
    uint64_t v155 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v153, v154, *(void *)(*(void *)(v155 - 8) + 64LL));
    unsigned int v156 = (void (*)(char *, uint64_t, uint64_t))v209;
  }

  else
  {
    unsigned int v156 = (void (*)(char *, uint64_t, uint64_t))v209;
    v209(v153, v154, v197);
    sub_10001762C((uint64_t)v153, 0LL, 1LL, v197);
  }

  uint64_t v157 = v151[13];
  uint64_t v158 = &v145[v157];
  int v159 = (void *)(v146 + v157);
  uint64_t v160 = v159[1];
  *(void *)uint64_t v158 = *v159;
  *((void *)v158 + Hasher._combine(_:)(v1 & 1) = v160;
  uint64_t v161 = v151[14];
  int v162 = &v145[v161];
  uint64_t v163 = (void *)(v146 + v161);
  uint64_t v164 = v163[1];
  *(void *)int v162 = *v163;
  *((void *)v162 + Hasher._combine(_:)(v1 & 1) = v164;
  uint64_t v165 = v151[15];
  int v166 = &v145[v165];
  uint64_t v167 = v146 + v165;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v156(v166, v167, v197);
  v145[v151[16]] = *(_BYTE *)(v146 + v151[16]);
  uint64_t v168 = v151[17];
  int v169 = &v145[v168];
  int v170 = (void *)(v146 + v168);
  uint64_t v171 = v170[1];
  *(void *)int v169 = *v170;
  *((void *)v169 + Hasher._combine(_:)(v1 & 1) = v171;
  v145[v151[18]] = *(_BYTE *)(v146 + v151[18]);
  uint64_t v172 = v151[19];
  unsigned int v173 = &v145[v172];
  uint64_t v174 = v146 + v172;
  *(void *)unsigned int v173 = *(void *)v174;
  v173[8] = *(_BYTE *)(v174 + 8);
  uint64_t v175 = v151[20];
  unsigned int v176 = &v145[v175];
  BOOL v177 = (void *)(v146 + v175);
  uint64_t v178 = v177[1];
  *(void *)unsigned int v176 = *v177;
  *((void *)v176 + Hasher._combine(_:)(v1 & 1) = v178;
  *(void *)&v145[v151[21]] = *(void *)(v146 + v151[21]);
  uint64_t v179 = v151[22];
  unsigned int v180 = &v145[v179];
  uint64_t v181 = (const void *)(v146 + v179);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (sub_10001D158((uint64_t)v181, 1LL, v197))
  {
    uint64_t v182 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v180, v181, *(void *)(*(void *)(v182 - 8) + 64LL));
  }

  else
  {
    v156(v180, (uint64_t)v181, v197);
    sub_10001762C((uint64_t)v180, 0LL, 1LL, v197);
  }

  uint64_t v183 = v151[23];
  unsigned int v184 = &v145[v183];
  uint64_t v185 = (const void *)(v146 + v183);
  if (sub_10001D158(v146 + v183, 1LL, v197))
  {
    uint64_t v186 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v184, v185, *(void *)(*(void *)(v186 - 8) + 64LL));
  }

  else
  {
    v156(v184, (uint64_t)v185, v197);
    sub_10001762C((uint64_t)v184, 0LL, 1LL, v197);
  }

  v199(&v208[v206[10]], v138 + v206[10], v201);
  uint64_t v187 = v206[11];
  unsigned int v188 = &v208[v187];
  uint64_t v189 = v138 + v187;
  *(void *)unsigned int v188 = *(void *)v189;
  v188[8] = *(_BYTE *)(v189 + 8);
  v208[v206[12]] = *(_BYTE *)(v138 + v206[12]);
  return v210;
}

uint64_t sub_10004F43C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v162 = a3;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v164 = a1;
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  void *v7 = *(void *)(a2 + v6);
  v7[1] = *(void *)(a2 + v6 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[2] = v8[2];
  v7[3] = v8[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  void v7[4] = v8[4];
  v7[5] = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[6] = v8[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[7] = v8[7];
  v7[8] = v8[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v161 = (int *)sub_1000175B0(&qword_1002AA328);
  uint64_t v9 = v161[9];
  uint64_t v10 = (char *)v7 + v9;
  uint64_t v11 = (char *)v8 + v9;
  *(void *)uint64_t v10 = *(void *)((char *)v8 + v9);
  *((void *)v10 + Hasher._combine(_:)(v1 & 1) = *(void *)((char *)v8 + v9 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = (int *)type metadata accessor for CheddarTransaction(0LL);
  uint64_t v13 = v12[5];
  uint64_t v14 = &v10[v13];
  uint64_t v15 = &v11[v13];
  uint64_t v16 = type metadata accessor for Date(0LL);
  uint64_t v165 = *(void *)(v16 - 8);
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v165 + 24);
  v17(v14, v15, v16);
  uint64_t v18 = v12[6];
  uint64_t v19 = &v10[v18];
  uint64_t v20 = &v11[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  *((void *)v19 + Hasher._combine(_:)(v1 & 1) = *((void *)v20 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = v12[7];
  uint64_t v22 = &v10[v21];
  uint64_t v23 = &v11[v21];
  *(void *)uint64_t v22 = *(void *)v23;
  *((void *)v22 + Hasher._combine(_:)(v1 & 1) = *((void *)v23 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = v12[8];
  uint64_t v25 = &v10[v24];
  uint64_t v26 = &v11[v24];
  *(void *)uint64_t v25 = *(void *)v26;
  *((void *)v25 + Hasher._combine(_:)(v1 & 1) = *((void *)v26 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17(&v10[v12[9]], &v11[v12[9]], v16);
  uint64_t v27 = v12[10];
  uint64_t v28 = &v10[v27];
  unint64_t v29 = &v11[v27];
  *(void *)uint64_t v28 = *(void *)v29;
  *((void *)v28 + Hasher._combine(_:)(v1 & 1) = *((void *)v29 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10[v12[11]] = v11[v12[11]];
  uint64_t v30 = v12[12];
  uint64_t v31 = &v10[v30];
  uint64_t v32 = &v11[v30];
  *(void *)uint64_t v31 = *(void *)v32;
  *((void *)v31 + Hasher._combine(_:)(v1 & 1) = *((void *)v32 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v163 = v17;
  v17(&v10[v12[13]], &v11[v12[13]], v16);
  *(void *)&v10[v12[14]] = *(void *)&v11[v12[14]];
  uint64_t v33 = v12[15];
  uint64_t v34 = &v10[v33];
  uint64_t v35 = &v11[v33];
  *(void *)uint64_t v34 = *(void *)v35;
  *((void *)v34 + Hasher._combine(_:)(v1 & 1) = *((void *)v35 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v10[v12[16]] = *(void *)&v11[v12[16]];
  v10[v12[17]] = v11[v12[17]];
  uint64_t v36 = v12[18];
  uint64_t v37 = &v10[v36];
  uint64_t v38 = &v11[v36];
  *(void *)uint64_t v37 = *(void *)v38;
  *((void *)v37 + Hasher._combine(_:)(v1 & 1) = *((void *)v38 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v39 = v12[19];
  uint64_t v40 = &v10[v39];
  uint64_t v41 = &v11[v39];
  *(void *)uint64_t v40 = *(void *)v41;
  *((void *)v40 + Hasher._combine(_:)(v1 & 1) = *((void *)v41 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v42 = v12[20];
  uint64_t v43 = &v10[v42];
  uint64_t v44 = &v11[v42];
  *(void *)uint64_t v43 = *(void *)v44;
  *((void *)v43 + Hasher._combine(_:)(v1 & 1) = *((void *)v44 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v45 = v12[21];
  uint64_t v46 = &v10[v45];
  uint64_t v47 = &v11[v45];
  *(void *)uint64_t v46 = *(void *)v47;
  *((void *)v46 + Hasher._combine(_:)(v1 & 1) = *((void *)v47 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v48 = v12[22];
  uint64_t v49 = &v10[v48];
  uint64_t v50 = &v11[v48];
  LODWORD(v17) = sub_10001D158((uint64_t)&v10[v48], 1LL, v16);
  int v51 = sub_10001D158((uint64_t)v50, 1LL, v16);
  if ((_DWORD)v17)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v165 + 16))(v49, v50, v16);
      sub_10001762C((uint64_t)v49, 0LL, 1LL, v16);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v165 + 8))(v49, v16);
LABEL_6:
    uint64_t v52 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v49, v50, *(void *)(*(void *)(v52 - 8) + 64LL));
    goto LABEL_7;
  }

  v163(v49, v50, v16);
LABEL_7:
  uint64_t v53 = v12[23];
  uint64_t v54 = &v10[v53];
  uint64_t v55 = &v11[v53];
  *(void *)uint64_t v54 = *(void *)v55;
  *((void *)v54 + Hasher._combine(_:)(v1 & 1) = *((void *)v55 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v56 = v12[24];
  uint64_t v57 = &v10[v56];
  uint64_t v58 = &v11[v56];
  *(void *)uint64_t v57 = *(void *)v58;
  *((void *)v57 + Hasher._combine(_:)(v1 & 1) = *((void *)v58 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v59 = v12[25];
  uint64_t v60 = &v10[v59];
  uint64_t v61 = &v11[v59];
  *(void *)uint64_t v60 = *(void *)v61;
  *((void *)v60 + Hasher._combine(_:)(v1 & 1) = *((void *)v61 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v62 = v12[26];
  uint64_t v63 = &v10[v62];
  uint64_t v64 = &v11[v62];
  int v65 = sub_10001D158((uint64_t)&v10[v62], 1LL, v16);
  int v66 = sub_10001D158((uint64_t)v64, 1LL, v16);
  if (v65)
  {
    if (!v66)
    {
      (*(void (**)(char *, char *, uint64_t))(v165 + 16))(v63, v64, v16);
      sub_10001762C((uint64_t)v63, 0LL, 1LL, v16);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v66)
  {
    (*(void (**)(char *, uint64_t))(v165 + 8))(v63, v16);
LABEL_12:
    uint64_t v67 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v63, v64, *(void *)(*(void *)(v67 - 8) + 64LL));
    goto LABEL_13;
  }

  v163(v63, v64, v16);
LABEL_13:
  v10[v12[27]] = v11[v12[27]];
  uint64_t v68 = v12[28];
  uint64_t v69 = &v10[v68];
  uint64_t v70 = &v11[v68];
  *(void *)uint64_t v69 = *(void *)v70;
  *((void *)v69 + Hasher._combine(_:)(v1 & 1) = *((void *)v70 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10[v12[29]] = v11[v12[29]];
  v10[v12[30]] = v11[v12[30]];
  v10[v12[31]] = v11[v12[31]];
  uint64_t v71 = v12[32];
  uint64_t v72 = &v10[v71];
  uint64_t v73 = &v11[v71];
  *(void *)uint64_t v72 = *(void *)v73;
  *((void *)v72 + Hasher._combine(_:)(v1 & 1) = *((void *)v73 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v74 = v12[33];
  uint64_t v75 = &v10[v74];
  uint64_t v76 = &v11[v74];
  *(void *)uint64_t v75 = *(void *)v76;
  *((void *)v75 + Hasher._combine(_:)(v1 & 1) = *((void *)v76 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v77 = v12[34];
  id v78 = &v10[v77];
  uint64_t v79 = &v11[v77];
  *(void *)id v78 = *(void *)v79;
  *((void *)v78 + Hasher._combine(_:)(v1 & 1) = *((void *)v79 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v80 = v12[35];
  uint64_t v81 = &v10[v80];
  unint64_t v82 = &v11[v80];
  *(void *)uint64_t v81 = *(void *)v82;
  *((void *)v81 + Hasher._combine(_:)(v1 & 1) = *((void *)v82 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v83 = v12[36];
  uint64_t v84 = &v10[v83];
  uint64_t v85 = &v11[v83];
  *(void *)uint64_t v84 = *(void *)v85;
  *((void *)v84 + Hasher._combine(_:)(v1 & 1) = *((void *)v85 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v86 = v12[37];
  uint64_t v87 = &v10[v86];
  uint64_t v88 = &v11[v86];
  *(void *)uint64_t v87 = *(void *)v88;
  *((void *)v87 + Hasher._combine(_:)(v1 & 1) = *((void *)v88 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v89 = v12[38];
  uint64_t v90 = &v10[v89];
  uint64_t v91 = &v11[v89];
  *(void *)uint64_t v90 = *(void *)v91;
  *((void *)v90 + Hasher._combine(_:)(v1 & 1) = *((void *)v91 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v92 = v12[39];
  uint64_t v93 = &v10[v92];
  BOOL v94 = &v11[v92];
  *(void *)uint64_t v93 = *(void *)v94;
  *((void *)v93 + Hasher._combine(_:)(v1 & 1) = *((void *)v94 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v95 = v12[40];
  uint64_t v96 = &v10[v95];
  unint64_t v97 = &v11[v95];
  *(void *)uint64_t v96 = *(void *)v97;
  *((void *)v96 + Hasher._combine(_:)(v1 & 1) = *((void *)v97 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v98 = v12[41];
  id v99 = &v10[v98];
  unint64_t v100 = &v11[v98];
  uint64_t v101 = *(void *)v100;
  v99[8] = v100[8];
  *(void *)id v99 = v101;
  uint64_t v102 = v12[42];
  uint64_t v103 = &v10[v102];
  uint64_t v104 = &v11[v102];
  *(void *)uint64_t v103 = *(void *)v104;
  *((void *)v103 + Hasher._combine(_:)(v1 & 1) = *((void *)v104 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v105 = v161[10];
  uint64_t v106 = (char *)v7 + v105;
  uint64_t v107 = (char *)v8 + v105;
  uint64_t v108 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  int v159 = *(void (**)(char *, char *))(*(void *)(v108 - 8) + 24LL);
  uint64_t v160 = v108;
  v159(v106, v107);
  uint64_t v109 = v161[11];
  uint64_t v110 = (char *)v7 + v109;
  uint64_t v111 = (char *)v8 + v109;
  uint64_t v112 = *(void *)v111;
  v110[8] = v111[8];
  *(void *)uint64_t v110 = v112;
  *((_BYTE *)v7 + v161[12]) = *((_BYTE *)v8 + v161[12]);
  uint64_t v113 = *(int *)(v162 + 28);
  uint64_t v114 = (void *)(v164 + v113);
  uint64_t v115 = (void *)(a2 + v113);
  *uint64_t v114 = *(void *)(a2 + v113);
  v114[1] = *(void *)(a2 + v113 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v114[2] = v115[2];
  v114[3] = v115[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v114[4] = v115[4];
  v114[5] = v115[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v114[6] = v115[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v114[7] = v115[7];
  v114[8] = v115[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v116 = (int *)sub_1000175B0(&qword_1002AB748);
  uint64_t v117 = v116[9];
  uint64_t v118 = (char *)v114 + v117;
  uint64_t v119 = (char *)v115 + v117;
  *(void *)uint64_t v118 = *(void *)((char *)v115 + v117);
  *((void *)v118 + Hasher._combine(_:)(v1 & 1) = *(void *)((char *)v115 + v117 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v118[16] = v119[16];
  *((void *)v118 + sub_100019F7C(v0 + 3) = *((void *)v119 + 3);
  *((void *)v118 + 4) = *((void *)v119 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v118 + 5) = *((void *)v119 + 5);
  *((void *)v118 + 6) = *((void *)v119 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v118 + 7) = *((void *)v119 + 7);
  *((void *)v118 + _Block_object_dispose((const void *)(v1 - 136), 8) = *((void *)v119 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v118[72] = v119[72];
  v118[73] = v119[73];
  v118[74] = v119[74];
  uint64_t v120 = (int *)type metadata accessor for RenewalInfo(0LL);
  uint64_t v121 = v120[12];
  uint64_t v122 = &v118[v121];
  uint64_t v123 = &v119[v121];
  LODWORD(v107) = sub_10001D158((uint64_t)&v118[v121], 1LL, v16);
  int v124 = sub_10001D158((uint64_t)v123, 1LL, v16);
  if ((_DWORD)v107)
  {
    if (!v124)
    {
      (*(void (**)(char *, char *, uint64_t))(v165 + 16))(v122, v123, v16);
      sub_10001762C((uint64_t)v122, 0LL, 1LL, v16);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v124)
  {
    (*(void (**)(char *, uint64_t))(v165 + 8))(v122, v16);
LABEL_18:
    uint64_t v125 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v122, v123, *(void *)(*(void *)(v125 - 8) + 64LL));
    goto LABEL_19;
  }

  v163(v122, v123, v16);
LABEL_19:
  uint64_t v126 = v120[13];
  unsigned int v127 = &v118[v126];
  unsigned int v128 = &v119[v126];
  *(void *)unsigned int v127 = *(void *)v128;
  *((void *)v127 + Hasher._combine(_:)(v1 & 1) = *((void *)v128 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v129 = v120[14];
  uint64_t v130 = &v118[v129];
  uint64_t v131 = &v119[v129];
  *(void *)uint64_t v130 = *(void *)v131;
  *((void *)v130 + Hasher._combine(_:)(v1 & 1) = *((void *)v131 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v163(&v118[v120[15]], &v119[v120[15]], v16);
  v118[v120[16]] = v119[v120[16]];
  uint64_t v132 = v120[17];
  uint64_t v133 = &v118[v132];
  uint64_t v134 = &v119[v132];
  *(void *)uint64_t v133 = *(void *)v134;
  *((void *)v133 + Hasher._combine(_:)(v1 & 1) = *((void *)v134 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v118[v120[18]] = v119[v120[18]];
  uint64_t v135 = v120[19];
  uint64_t v136 = &v118[v135];
  uint64_t v137 = &v119[v135];
  char v138 = v137[8];
  *(void *)uint64_t v136 = *(void *)v137;
  v136[8] = v138;
  uint64_t v139 = v120[20];
  uint64_t v140 = &v118[v139];
  uint64_t v141 = &v119[v139];
  *(void *)uint64_t v140 = *(void *)v141;
  *((void *)v140 + Hasher._combine(_:)(v1 & 1) = *((void *)v141 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v118[v120[21]] = *(void *)&v119[v120[21]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v142 = v120[22];
  uint64_t v143 = &v118[v142];
  uint64_t v144 = &v119[v142];
  int v145 = sub_10001D158((uint64_t)&v118[v142], 1LL, v16);
  int v146 = sub_10001D158((uint64_t)v144, 1LL, v16);
  if (v145)
  {
    if (!v146)
    {
      (*(void (**)(char *, char *, uint64_t))(v165 + 16))(v143, v144, v16);
      sub_10001762C((uint64_t)v143, 0LL, 1LL, v16);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v146)
  {
    (*(void (**)(char *, uint64_t))(v165 + 8))(v143, v16);
LABEL_24:
    uint64_t v147 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v143, v144, *(void *)(*(void *)(v147 - 8) + 64LL));
    goto LABEL_25;
  }

  v163(v143, v144, v16);
LABEL_25:
  uint64_t v148 = v120[23];
  uint64_t v149 = &v118[v148];
  uint64_t v150 = &v119[v148];
  int v151 = sub_10001D158((uint64_t)&v118[v148], 1LL, v16);
  int v152 = sub_10001D158((uint64_t)v150, 1LL, v16);
  if (!v151)
  {
    if (!v152)
    {
      v163(v149, v150, v16);
      goto LABEL_31;
    }

    (*(void (**)(char *, uint64_t))(v165 + 8))(v149, v16);
    goto LABEL_30;
  }

  if (v152)
  {
LABEL_30:
    uint64_t v153 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v149, v150, *(void *)(*(void *)(v153 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v165 + 16))(v149, v150, v16);
  sub_10001762C((uint64_t)v149, 0LL, 1LL, v16);
LABEL_31:
  ((void (*)(char *, char *, uint64_t))v159)((char *)v114 + v116[10], (char *)v115 + v116[10], v160);
  uint64_t v154 = v116[11];
  uint64_t v155 = (char *)v114 + v154;
  unsigned int v156 = (char *)v115 + v154;
  uint64_t v157 = *(void *)v156;
  v155[8] = v156[8];
  *(void *)uint64_t v155 = v157;
  *((_BYTE *)v114 + v116[12]) = *((_BYTE *)v115 + v116[12]);
  return v164;
}

uint64_t sub_100050160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(int *)(a3 + 24);
  uint64_t v4 = a1 + v3;
  uint64_t v5 = a2 + v3;
  memcpy((void *)(a1 + v3), (const void *)(a2 + v3), 0x48uLL);
  uint64_t v6 = (int *)sub_1000175B0(&qword_1002AA328);
  uint64_t v7 = v6[9];
  uint64_t v8 = v4 + v7;
  uint64_t v9 = v5 + v7;
  *(_OWORD *)(v4 + sub_10002A65C(v3, v4, v5, v6, v7) = *(_OWORD *)(v5 + v7);
  uint64_t v10 = (int *)type metadata accessor for CheddarTransaction(0LL);
  uint64_t v11 = v10[5];
  uint64_t v12 = v8 + v11;
  uint64_t v13 = v9 + v11;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32LL);
  v15(v12, v13, v14);
  *(_OWORD *)(v8 + v10[6]) = *(_OWORD *)(v9 + v10[6]);
  *(_OWORD *)(v8 + v10[7]) = *(_OWORD *)(v9 + v10[7]);
  *(_OWORD *)(v8 + v10[8]) = *(_OWORD *)(v9 + v10[8]);
  v15(v8 + v10[9], v9 + v10[9], v14);
  *(_OWORD *)(v8 + v10[10]) = *(_OWORD *)(v9 + v10[10]);
  *(_BYTE *)(v8 + v10[11]) = *(_BYTE *)(v9 + v10[11]);
  *(_OWORD *)(v8 + v10[12]) = *(_OWORD *)(v9 + v10[12]);
  v15(v8 + v10[13], v9 + v10[13], v14);
  *(void *)(v8 + v10[14]) = *(void *)(v9 + v10[14]);
  *(_OWORD *)(v8 + v10[15]) = *(_OWORD *)(v9 + v10[15]);
  *(void *)(v8 + v10[16]) = *(void *)(v9 + v10[16]);
  *(_BYTE *)(v8 + v10[17]) = *(_BYTE *)(v9 + v10[17]);
  *(_OWORD *)(v8 + v10[18]) = *(_OWORD *)(v9 + v10[18]);
  *(_OWORD *)(v8 + v10[19]) = *(_OWORD *)(v9 + v10[19]);
  *(_OWORD *)(v8 + v10[20]) = *(_OWORD *)(v9 + v10[20]);
  *(_OWORD *)(v8 + v10[21]) = *(_OWORD *)(v9 + v10[21]);
  uint64_t v16 = v10[22];
  uint64_t v17 = (void *)(v8 + v16);
  uint64_t v18 = (const void *)(v9 + v16);
  int v66 = v15;
  if (sub_10001D158(v9 + v16, 1LL, v14))
  {
    uint64_t v19 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    v15((uint64_t)v17, (uint64_t)v18, v14);
    sub_10001762C((uint64_t)v17, 0LL, 1LL, v14);
  }

  *(_OWORD *)(v8 + v10[23]) = *(_OWORD *)(v9 + v10[23]);
  *(_OWORD *)(v8 + v10[24]) = *(_OWORD *)(v9 + v10[24]);
  *(_OWORD *)(v8 + v10[25]) = *(_OWORD *)(v9 + v10[25]);
  uint64_t v20 = v10[26];
  uint64_t v21 = (void *)(v8 + v20);
  uint64_t v22 = (const void *)(v9 + v20);
  if (sub_10001D158(v9 + v20, 1LL, v14))
  {
    uint64_t v23 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    v15((uint64_t)v21, (uint64_t)v22, v14);
    sub_10001762C((uint64_t)v21, 0LL, 1LL, v14);
  }

  *(_BYTE *)(v8 + v10[27]) = *(_BYTE *)(v9 + v10[27]);
  *(_OWORD *)(v8 + v10[28]) = *(_OWORD *)(v9 + v10[28]);
  *(_BYTE *)(v8 + v10[29]) = *(_BYTE *)(v9 + v10[29]);
  *(_BYTE *)(v8 + v10[30]) = *(_BYTE *)(v9 + v10[30]);
  *(_BYTE *)(v8 + v10[31]) = *(_BYTE *)(v9 + v10[31]);
  *(_OWORD *)(v8 + v10[32]) = *(_OWORD *)(v9 + v10[32]);
  *(_OWORD *)(v8 + v10[33]) = *(_OWORD *)(v9 + v10[33]);
  *(_OWORD *)(v8 + v10[34]) = *(_OWORD *)(v9 + v10[34]);
  *(_OWORD *)(v8 + v10[35]) = *(_OWORD *)(v9 + v10[35]);
  *(_OWORD *)(v8 + v10[36]) = *(_OWORD *)(v9 + v10[36]);
  *(_OWORD *)(v8 + v10[37]) = *(_OWORD *)(v9 + v10[37]);
  *(_OWORD *)(v8 + v10[38]) = *(_OWORD *)(v9 + v10[38]);
  *(_OWORD *)(v8 + v10[39]) = *(_OWORD *)(v9 + v10[39]);
  *(_OWORD *)(v8 + v10[40]) = *(_OWORD *)(v9 + v10[40]);
  uint64_t v24 = v10[41];
  uint64_t v25 = v8 + v24;
  uint64_t v26 = v9 + v24;
  *(void *)uint64_t v25 = *(void *)v26;
  *(_BYTE *)(v25 + _Block_object_dispose((const void *)(v1 - 136), 8) = *(_BYTE *)(v26 + 8);
  *(_OWORD *)(v8 + v10[42]) = *(_OWORD *)(v9 + v10[42]);
  uint64_t v27 = v6[10];
  uint64_t v28 = v4 + v27;
  uint64_t v29 = v5 + v27;
  uint64_t v30 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  uint64_t v62 = *(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 32LL);
  uint64_t v63 = v30;
  v62(v28, v29);
  uint64_t v31 = v6[11];
  uint64_t v32 = v4 + v31;
  uint64_t v33 = v5 + v31;
  *(void *)uint64_t v32 = *(void *)v33;
  *(_BYTE *)(v32 + _Block_object_dispose((const void *)(v1 - 136), 8) = *(_BYTE *)(v33 + 8);
  *(_BYTE *)(v4 + v6[12]) = *(_BYTE *)(v5 + v6[12]);
  uint64_t v34 = *(int *)(a3 + 28);
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  memcpy((void *)(a1 + v34), (const void *)(a2 + v34), 0x48uLL);
  uint64_t v37 = (int *)sub_1000175B0(&qword_1002AB748);
  uint64_t v38 = v37[9];
  uint64_t v39 = v35 + v38;
  uint64_t v40 = v36 + v38;
  *(_OWORD *)uint64_t v39 = *(_OWORD *)(v36 + v38);
  *(_BYTE *)(v39 + 16) = *(_BYTE *)(v36 + v38 + 16);
  *(_OWORD *)(v39 + 24) = *(_OWORD *)(v36 + v38 + 24);
  *(_OWORD *)(v39 + 40) = *(_OWORD *)(v36 + v38 + 40);
  *(_OWORD *)(v39 + 56) = *(_OWORD *)(v36 + v38 + 56);
  *(_BYTE *)(v39 + 72) = *(_BYTE *)(v36 + v38 + 72);
  *(_WORD *)(v39 + 7sub_100019F7C(v0 + 3) = *(_WORD *)(v36 + v38 + 73);
  uint64_t v41 = (int *)type metadata accessor for RenewalInfo(0LL);
  uint64_t v42 = v41[12];
  uint64_t v43 = (void *)(v39 + v42);
  uint64_t v44 = (const void *)(v40 + v42);
  if (sub_10001D158(v40 + v42, 1LL, v14))
  {
    uint64_t v45 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64LL));
    uint64_t v46 = v66;
  }

  else
  {
    uint64_t v46 = v66;
    v66((uint64_t)v43, (uint64_t)v44, v14);
    sub_10001762C((uint64_t)v43, 0LL, 1LL, v14);
  }

  *(_OWORD *)(v39 + v41[13]) = *(_OWORD *)(v40 + v41[13]);
  *(_OWORD *)(v39 + v41[14]) = *(_OWORD *)(v40 + v41[14]);
  v46(v39 + v41[15], v40 + v41[15], v14);
  *(_BYTE *)(v39 + v41[16]) = *(_BYTE *)(v40 + v41[16]);
  *(_OWORD *)(v39 + v41[17]) = *(_OWORD *)(v40 + v41[17]);
  *(_BYTE *)(v39 + v41[18]) = *(_BYTE *)(v40 + v41[18]);
  uint64_t v47 = v41[19];
  uint64_t v48 = v39 + v47;
  uint64_t v49 = v40 + v47;
  *(_BYTE *)(v48 + _Block_object_dispose((const void *)(v1 - 136), 8) = *(_BYTE *)(v49 + 8);
  *(void *)uint64_t v48 = *(void *)v49;
  *(_OWORD *)(v39 + v41[20]) = *(_OWORD *)(v40 + v41[20]);
  *(void *)(v39 + v41[21]) = *(void *)(v40 + v41[21]);
  uint64_t v50 = v41[22];
  int v51 = (void *)(v39 + v50);
  uint64_t v52 = (const void *)(v40 + v50);
  if (sub_10001D158(v40 + v50, 1LL, v14))
  {
    uint64_t v53 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64LL));
  }

  else
  {
    v46((uint64_t)v51, (uint64_t)v52, v14);
    sub_10001762C((uint64_t)v51, 0LL, 1LL, v14);
  }

  uint64_t v54 = v41[23];
  uint64_t v55 = (void *)(v39 + v54);
  uint64_t v56 = (const void *)(v40 + v54);
  if (sub_10001D158(v40 + v54, 1LL, v14))
  {
    uint64_t v57 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64LL));
  }

  else
  {
    v46((uint64_t)v55, (uint64_t)v56, v14);
    sub_10001762C((uint64_t)v55, 0LL, 1LL, v14);
  }

  ((void (*)(uint64_t, uint64_t, uint64_t))v62)(v35 + v37[10], v36 + v37[10], v63);
  uint64_t v58 = v37[11];
  uint64_t v59 = v35 + v58;
  uint64_t v60 = v36 + v58;
  *(void *)uint64_t v59 = *(void *)v60;
  *(_BYTE *)(v59 + _Block_object_dispose((const void *)(v1 - 136), 8) = *(_BYTE *)(v60 + 8);
  *(_BYTE *)(v35 + v37[12]) = *(_BYTE *)(v36 + v37[12]);
  return a1;
}

uint64_t sub_1000507B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  uint64_t v228 = a3;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v230 = a1;
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = *(void *)(a2 + v7 + 8);
  *uint64_t v8 = *(void *)(a2 + v7);
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = v9[3];
  _OWORD v8[2] = v9[2];
  v8[3] = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = v9[5];
  void v8[4] = v9[4];
  v8[5] = v12;
  swift_bridgeObjectRelease();
  void v8[6] = v9[6];
  swift_bridgeObjectRelease();
  uint64_t v13 = v9[8];
  uint64_t v8[7] = v9[7];
  v8[8] = v13;
  swift_bridgeObjectRelease();
  v227 = (int *)sub_1000175B0(&qword_1002AA328);
  uint64_t v14 = v227[9];
  uint64_t v15 = (char *)v8 + v14;
  uint64_t v16 = (char *)v9 + v14;
  uint64_t v17 = *(void *)((char *)v9 + v14 + 8);
  *(void *)uint64_t v15 = *(void *)((char *)v9 + v14);
  *((void *)v15 + Hasher._combine(_:)(v1 & 1) = v17;
  swift_bridgeObjectRelease();
  uint64_t v18 = (int *)type metadata accessor for CheddarTransaction(0LL);
  uint64_t v19 = v18[5];
  uint64_t v20 = &v15[v19];
  uint64_t v21 = &v16[v19];
  uint64_t v22 = type metadata accessor for Date(0LL);
  uint64_t v231 = *(void *)(v22 - 8);
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v231 + 40);
  v23(v20, v21, v22);
  uint64_t v24 = v18[6];
  uint64_t v25 = &v15[v24];
  uint64_t v26 = &v16[v24];
  uint64_t v28 = *(void *)v26;
  uint64_t v27 = *((void *)v26 + 1);
  *(void *)uint64_t v25 = v28;
  *((void *)v25 + Hasher._combine(_:)(v1 & 1) = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = v18[7];
  uint64_t v30 = &v15[v29];
  uint64_t v31 = &v16[v29];
  uint64_t v33 = *(void *)v31;
  uint64_t v32 = *((void *)v31 + 1);
  *(void *)uint64_t v30 = v33;
  *((void *)v30 + Hasher._combine(_:)(v1 & 1) = v32;
  swift_bridgeObjectRelease();
  uint64_t v34 = v18[8];
  uint64_t v35 = &v15[v34];
  uint64_t v36 = &v16[v34];
  uint64_t v38 = *(void *)v36;
  uint64_t v37 = *((void *)v36 + 1);
  *(void *)uint64_t v35 = v38;
  *((void *)v35 + Hasher._combine(_:)(v1 & 1) = v37;
  swift_bridgeObjectRelease();
  v23(&v15[v18[9]], &v16[v18[9]], v22);
  uint64_t v39 = v18[10];
  uint64_t v40 = &v15[v39];
  uint64_t v41 = &v16[v39];
  uint64_t v43 = *(void *)v41;
  uint64_t v42 = *((void *)v41 + 1);
  *(void *)uint64_t v40 = v43;
  *((void *)v40 + Hasher._combine(_:)(v1 & 1) = v42;
  swift_bridgeObjectRelease();
  v15[v18[11]] = v16[v18[11]];
  uint64_t v44 = v18[12];
  uint64_t v45 = &v15[v44];
  uint64_t v46 = &v16[v44];
  uint64_t v48 = *(void *)v46;
  uint64_t v47 = *((void *)v46 + 1);
  *(void *)uint64_t v45 = v48;
  *((void *)v45 + Hasher._combine(_:)(v1 & 1) = v47;
  swift_bridgeObjectRelease();
  v229 = v23;
  v23(&v15[v18[13]], &v16[v18[13]], v22);
  *(void *)&v15[v18[14]] = *(void *)&v16[v18[14]];
  uint64_t v49 = v18[15];
  uint64_t v50 = &v15[v49];
  int v51 = &v16[v49];
  uint64_t v53 = *(void *)v51;
  uint64_t v52 = *((void *)v51 + 1);
  *(void *)uint64_t v50 = v53;
  *((void *)v50 + Hasher._combine(_:)(v1 & 1) = v52;
  swift_bridgeObjectRelease();
  *(void *)&v15[v18[16]] = *(void *)&v16[v18[16]];
  v15[v18[17]] = v16[v18[17]];
  uint64_t v54 = v18[18];
  uint64_t v55 = &v15[v54];
  uint64_t v56 = &v16[v54];
  uint64_t v58 = *(void *)v56;
  uint64_t v57 = *((void *)v56 + 1);
  *(void *)uint64_t v55 = v58;
  *((void *)v55 + Hasher._combine(_:)(v1 & 1) = v57;
  swift_bridgeObjectRelease();
  uint64_t v59 = v18[19];
  uint64_t v60 = &v15[v59];
  uint64_t v61 = &v16[v59];
  uint64_t v63 = *(void *)v61;
  uint64_t v62 = *((void *)v61 + 1);
  *(void *)uint64_t v60 = v63;
  *((void *)v60 + Hasher._combine(_:)(v1 & 1) = v62;
  swift_bridgeObjectRelease();
  uint64_t v64 = v18[20];
  int v65 = &v15[v64];
  int v66 = &v16[v64];
  uint64_t v68 = *(void *)v66;
  uint64_t v67 = *((void *)v66 + 1);
  *(void *)int v65 = v68;
  *((void *)v65 + Hasher._combine(_:)(v1 & 1) = v67;
  swift_bridgeObjectRelease();
  uint64_t v69 = v18[21];
  uint64_t v70 = &v15[v69];
  uint64_t v71 = &v16[v69];
  uint64_t v73 = *(void *)v71;
  uint64_t v72 = *((void *)v71 + 1);
  *(void *)uint64_t v70 = v73;
  *((void *)v70 + Hasher._combine(_:)(v1 & 1) = v72;
  swift_bridgeObjectRelease();
  uint64_t v74 = v18[22];
  uint64_t v75 = &v15[v74];
  uint64_t v76 = &v16[v74];
  LODWORD(v2sub_100019F7C(v0 + 3) = sub_10001D158((uint64_t)&v15[v74], 1LL, v22);
  int v77 = sub_10001D158((uint64_t)v76, 1LL, v22);
  if ((_DWORD)v23)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v231 + 32))(v75, v76, v22);
      sub_10001762C((uint64_t)v75, 0LL, 1LL, v22);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v77)
  {
    (*(void (**)(char *, uint64_t))(v231 + 8))(v75, v22);
LABEL_6:
    uint64_t v78 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v75, v76, *(void *)(*(void *)(v78 - 8) + 64LL));
    goto LABEL_7;
  }

  v229(v75, v76, v22);
LABEL_7:
  uint64_t v79 = v18[23];
  uint64_t v80 = &v15[v79];
  uint64_t v81 = &v16[v79];
  uint64_t v83 = *(void *)v81;
  uint64_t v82 = *((void *)v81 + 1);
  *(void *)uint64_t v80 = v83;
  *((void *)v80 + Hasher._combine(_:)(v1 & 1) = v82;
  swift_bridgeObjectRelease();
  uint64_t v84 = v18[24];
  uint64_t v85 = &v15[v84];
  uint64_t v86 = &v16[v84];
  uint64_t v88 = *(void *)v86;
  uint64_t v87 = *((void *)v86 + 1);
  *(void *)uint64_t v85 = v88;
  *((void *)v85 + Hasher._combine(_:)(v1 & 1) = v87;
  swift_bridgeObjectRelease();
  uint64_t v89 = v18[25];
  uint64_t v90 = &v15[v89];
  uint64_t v91 = &v16[v89];
  uint64_t v93 = *(void *)v91;
  uint64_t v92 = *((void *)v91 + 1);
  *(void *)uint64_t v90 = v93;
  *((void *)v90 + Hasher._combine(_:)(v1 & 1) = v92;
  swift_bridgeObjectRelease();
  uint64_t v94 = v18[26];
  uint64_t v95 = &v15[v94];
  uint64_t v96 = &v16[v94];
  int v97 = sub_10001D158((uint64_t)&v15[v94], 1LL, v22);
  int v98 = sub_10001D158((uint64_t)v96, 1LL, v22);
  if (v97)
  {
    if (!v98)
    {
      (*(void (**)(char *, char *, uint64_t))(v231 + 32))(v95, v96, v22);
      sub_10001762C((uint64_t)v95, 0LL, 1LL, v22);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v98)
  {
    (*(void (**)(char *, uint64_t))(v231 + 8))(v95, v22);
LABEL_12:
    uint64_t v99 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v95, v96, *(void *)(*(void *)(v99 - 8) + 64LL));
    goto LABEL_13;
  }

  v229(v95, v96, v22);
LABEL_13:
  v15[v18[27]] = v16[v18[27]];
  uint64_t v100 = v18[28];
  uint64_t v101 = &v15[v100];
  uint64_t v102 = &v16[v100];
  uint64_t v104 = *(void *)v102;
  uint64_t v103 = *((void *)v102 + 1);
  *(void *)uint64_t v101 = v104;
  *((void *)v101 + Hasher._combine(_:)(v1 & 1) = v103;
  swift_bridgeObjectRelease();
  v15[v18[29]] = v16[v18[29]];
  v15[v18[30]] = v16[v18[30]];
  v15[v18[31]] = v16[v18[31]];
  uint64_t v105 = v18[32];
  uint64_t v106 = &v15[v105];
  uint64_t v107 = &v16[v105];
  uint64_t v109 = *(void *)v107;
  uint64_t v108 = *((void *)v107 + 1);
  *(void *)uint64_t v106 = v109;
  *((void *)v106 + Hasher._combine(_:)(v1 & 1) = v108;
  swift_bridgeObjectRelease();
  uint64_t v110 = v18[33];
  uint64_t v111 = &v15[v110];
  uint64_t v112 = &v16[v110];
  uint64_t v114 = *(void *)v112;
  uint64_t v113 = *((void *)v112 + 1);
  *(void *)uint64_t v111 = v114;
  *((void *)v111 + Hasher._combine(_:)(v1 & 1) = v113;
  swift_bridgeObjectRelease();
  uint64_t v115 = v18[34];
  uint64_t v116 = &v15[v115];
  uint64_t v117 = &v16[v115];
  uint64_t v119 = *(void *)v117;
  uint64_t v118 = *((void *)v117 + 1);
  *(void *)uint64_t v116 = v119;
  *((void *)v116 + Hasher._combine(_:)(v1 & 1) = v118;
  swift_bridgeObjectRelease();
  uint64_t v120 = v18[35];
  uint64_t v121 = &v15[v120];
  uint64_t v122 = &v16[v120];
  uint64_t v124 = *(void *)v122;
  uint64_t v123 = *((void *)v122 + 1);
  *(void *)uint64_t v121 = v124;
  *((void *)v121 + Hasher._combine(_:)(v1 & 1) = v123;
  swift_bridgeObjectRelease();
  uint64_t v125 = v18[36];
  uint64_t v126 = &v15[v125];
  unsigned int v127 = &v16[v125];
  uint64_t v129 = *(void *)v127;
  uint64_t v128 = *((void *)v127 + 1);
  *(void *)uint64_t v126 = v129;
  *((void *)v126 + Hasher._combine(_:)(v1 & 1) = v128;
  swift_bridgeObjectRelease();
  uint64_t v130 = v18[37];
  uint64_t v131 = &v15[v130];
  uint64_t v132 = &v16[v130];
  uint64_t v134 = *(void *)v132;
  uint64_t v133 = *((void *)v132 + 1);
  *(void *)uint64_t v131 = v134;
  *((void *)v131 + Hasher._combine(_:)(v1 & 1) = v133;
  swift_bridgeObjectRelease();
  uint64_t v135 = v18[38];
  uint64_t v136 = &v15[v135];
  uint64_t v137 = &v16[v135];
  uint64_t v139 = *(void *)v137;
  uint64_t v138 = *((void *)v137 + 1);
  *(void *)uint64_t v136 = v139;
  *((void *)v136 + Hasher._combine(_:)(v1 & 1) = v138;
  swift_bridgeObjectRelease();
  uint64_t v140 = v18[39];
  uint64_t v141 = &v15[v140];
  uint64_t v142 = &v16[v140];
  uint64_t v144 = *(void *)v142;
  uint64_t v143 = *((void *)v142 + 1);
  *(void *)uint64_t v141 = v144;
  *((void *)v141 + Hasher._combine(_:)(v1 & 1) = v143;
  swift_bridgeObjectRelease();
  uint64_t v145 = v18[40];
  int v146 = &v15[v145];
  uint64_t v147 = &v16[v145];
  uint64_t v149 = *(void *)v147;
  uint64_t v148 = *((void *)v147 + 1);
  *(void *)int v146 = v149;
  *((void *)v146 + Hasher._combine(_:)(v1 & 1) = v148;
  swift_bridgeObjectRelease();
  uint64_t v150 = v18[41];
  int v151 = &v15[v150];
  int v152 = &v16[v150];
  *(void *)int v151 = *(void *)v152;
  v151[8] = v152[8];
  uint64_t v153 = v18[42];
  uint64_t v154 = &v15[v153];
  uint64_t v155 = &v16[v153];
  uint64_t v157 = *(void *)v155;
  uint64_t v156 = *((void *)v155 + 1);
  *(void *)uint64_t v154 = v157;
  *((void *)v154 + Hasher._combine(_:)(v1 & 1) = v156;
  swift_bridgeObjectRelease();
  uint64_t v158 = v227[10];
  int v159 = (char *)v8 + v158;
  uint64_t v160 = (char *)v9 + v158;
  uint64_t v161 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  v225 = *(void (**)(char *, char *))(*(void *)(v161 - 8) + 40LL);
  uint64_t v226 = v161;
  v225(v159, v160);
  uint64_t v162 = v227[11];
  uint64_t v163 = (char *)v8 + v162;
  uint64_t v164 = (char *)v9 + v162;
  *(void *)uint64_t v163 = *(void *)v164;
  v163[8] = v164[8];
  *((_BYTE *)v8 + v227[12]) = *((_BYTE *)v9 + v227[12]);
  uint64_t v165 = *(int *)(v228 + 28);
  int v166 = (void *)(v230 + v165);
  uint64_t v167 = (void *)(a2 + v165);
  uint64_t v168 = *(void *)(a2 + v165 + 8);
  *int v166 = *(void *)(a2 + v165);
  v166[1] = v168;
  swift_bridgeObjectRelease();
  uint64_t v169 = v167[3];
  v166[2] = v167[2];
  v166[3] = v169;
  swift_bridgeObjectRelease();
  uint64_t v170 = v167[5];
  v166[4] = v167[4];
  v166[5] = v170;
  swift_bridgeObjectRelease();
  v166[6] = v167[6];
  swift_bridgeObjectRelease();
  uint64_t v171 = v167[8];
  v166[7] = v167[7];
  v166[8] = v171;
  swift_bridgeObjectRelease();
  uint64_t v172 = (int *)sub_1000175B0(&qword_1002AB748);
  uint64_t v173 = v172[9];
  uint64_t v174 = (char *)v166 + v173;
  uint64_t v175 = (char *)v167 + v173;
  uint64_t v176 = *(void *)((char *)v167 + v173 + 8);
  *(void *)uint64_t v174 = *(void *)((char *)v167 + v173);
  *((void *)v174 + Hasher._combine(_:)(v1 & 1) = v176;
  swift_bridgeObjectRelease();
  v174[16] = v175[16];
  uint64_t v177 = *((void *)v175 + 4);
  *((void *)v174 + sub_100019F7C(v0 + 3) = *((void *)v175 + 3);
  *((void *)v174 + 4) = v177;
  swift_bridgeObjectRelease();
  uint64_t v178 = *((void *)v175 + 6);
  *((void *)v174 + 5) = *((void *)v175 + 5);
  *((void *)v174 + 6) = v178;
  swift_bridgeObjectRelease();
  uint64_t v179 = *((void *)v175 + 8);
  *((void *)v174 + 7) = *((void *)v175 + 7);
  *((void *)v174 + _Block_object_dispose((const void *)(v1 - 136), 8) = v179;
  swift_bridgeObjectRelease();
  v174[72] = v175[72];
  *(_WORD *)(v174 + 7sub_100019F7C(v0 + 3) = *(_WORD *)(v175 + 73);
  unsigned int v180 = (int *)type metadata accessor for RenewalInfo(0LL);
  uint64_t v181 = v180[12];
  uint64_t v182 = &v174[v181];
  uint64_t v183 = &v175[v181];
  LODWORD(v160) = sub_10001D158((uint64_t)&v174[v181], 1LL, v22);
  int v184 = sub_10001D158((uint64_t)v183, 1LL, v22);
  if ((_DWORD)v160)
  {
    if (!v184)
    {
      (*(void (**)(char *, char *, uint64_t))(v231 + 32))(v182, v183, v22);
      sub_10001762C((uint64_t)v182, 0LL, 1LL, v22);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v184)
  {
    (*(void (**)(char *, uint64_t))(v231 + 8))(v182, v22);
LABEL_18:
    uint64_t v185 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v182, v183, *(void *)(*(void *)(v185 - 8) + 64LL));
    goto LABEL_19;
  }

  v229(v182, v183, v22);
LABEL_19:
  uint64_t v186 = v180[13];
  uint64_t v187 = &v174[v186];
  unsigned int v188 = &v175[v186];
  uint64_t v190 = *(void *)v188;
  uint64_t v189 = *((void *)v188 + 1);
  *(void *)uint64_t v187 = v190;
  *((void *)v187 + Hasher._combine(_:)(v1 & 1) = v189;
  swift_bridgeObjectRelease();
  uint64_t v191 = v180[14];
  v192 = &v174[v191];
  uint64_t v193 = &v175[v191];
  uint64_t v195 = *(void *)v193;
  uint64_t v194 = *((void *)v193 + 1);
  *(void *)v192 = v195;
  *((void *)v192 + Hasher._combine(_:)(v1 & 1) = v194;
  swift_bridgeObjectRelease();
  v229(&v174[v180[15]], &v175[v180[15]], v22);
  v174[v180[16]] = v175[v180[16]];
  uint64_t v196 = v180[17];
  uint64_t v197 = &v174[v196];
  uint64_t v198 = &v175[v196];
  uint64_t v200 = *(void *)v198;
  uint64_t v199 = *((void *)v198 + 1);
  *(void *)uint64_t v197 = v200;
  *((void *)v197 + Hasher._combine(_:)(v1 & 1) = v199;
  swift_bridgeObjectRelease();
  v174[v180[18]] = v175[v180[18]];
  uint64_t v201 = v180[19];
  v202 = &v174[v201];
  uint64_t v203 = &v175[v201];
  *(void *)v202 = *(void *)v203;
  v202[8] = v203[8];
  uint64_t v204 = v180[20];
  v205 = &v174[v204];
  v206 = &v175[v204];
  uint64_t v208 = *(void *)v206;
  uint64_t v207 = *((void *)v206 + 1);
  *(void *)v205 = v208;
  *((void *)v205 + Hasher._combine(_:)(v1 & 1) = v207;
  swift_bridgeObjectRelease();
  *(void *)&v174[v180[21]] = *(void *)&v175[v180[21]];
  swift_bridgeObjectRelease();
  uint64_t v209 = v180[22];
  uint64_t v210 = &v174[v209];
  v211 = &v175[v209];
  int v212 = sub_10001D158((uint64_t)&v174[v209], 1LL, v22);
  int v213 = sub_10001D158((uint64_t)v211, 1LL, v22);
  if (v212)
  {
    if (!v213)
    {
      (*(void (**)(char *, char *, uint64_t))(v231 + 32))(v210, v211, v22);
      sub_10001762C((uint64_t)v210, 0LL, 1LL, v22);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v213)
  {
    (*(void (**)(char *, uint64_t))(v231 + 8))(v210, v22);
LABEL_24:
    uint64_t v214 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v210, v211, *(void *)(*(void *)(v214 - 8) + 64LL));
    goto LABEL_25;
  }

  v229(v210, v211, v22);
LABEL_25:
  uint64_t v215 = v180[23];
  v216 = &v174[v215];
  v217 = &v175[v215];
  int v218 = sub_10001D158((uint64_t)&v174[v215], 1LL, v22);
  int v219 = sub_10001D158((uint64_t)v217, 1LL, v22);
  if (!v218)
  {
    if (!v219)
    {
      v229(v216, v217, v22);
      goto LABEL_31;
    }

    (*(void (**)(char *, uint64_t))(v231 + 8))(v216, v22);
    goto LABEL_30;
  }

  if (v219)
  {
LABEL_30:
    uint64_t v220 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v216, v217, *(void *)(*(void *)(v220 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v231 + 32))(v216, v217, v22);
  sub_10001762C((uint64_t)v216, 0LL, 1LL, v22);
LABEL_31:
  ((void (*)(char *, char *, uint64_t))v225)((char *)v166 + v172[10], (char *)v167 + v172[10], v226);
  uint64_t v221 = v172[11];
  v222 = (char *)v166 + v221;
  v223 = (char *)v167 + v221;
  *(void *)v222 = *(void *)v223;
  v222[8] = v223[8];
  *((_BYTE *)v166 + v172[12]) = *((_BYTE *)v167 + v172[12]);
  return v230;
}

uint64_t sub_100051218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100051224);
}

uint64_t sub_100051224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_1000175B0(&qword_1002AA328);
    if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == (_DWORD)a2)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(int *)(a3 + 24);
    }

    else
    {
      uint64_t v9 = sub_1000175B0(&qword_1002AB748);
      uint64_t v10 = *(int *)(a3 + 28);
    }

    return sub_10001D158(a1 + v10, a2, v9);
  }

uint64_t sub_1000512C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000512D0);
}

uint64_t sub_1000512D0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = sub_1000175B0(&qword_1002AA328);
    if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(int *)(a4 + 24);
    }

    else
    {
      uint64_t v9 = sub_1000175B0(&qword_1002AB748);
      uint64_t v10 = *(int *)(a4 + 28);
    }

    return sub_10001762C(v5 + v10, a2, a2, v9);
  }

  return result;
}

void sub_10005136C(uint64_t a1)
{
  v6[0] = &unk_1001F69F8;
  v6[1] = &unk_1001F6A10;
  sub_100051444( 319LL,  &qword_1002AB7C0,  type metadata accessor for CheddarTransaction,  (unint64_t *)&qword_1002AB7C8,  byte_10020145C);
  if (v3 <= 0x3F)
  {
    _OWORD v6[2] = *(void *)(v2 - 8) + 64LL;
    sub_100051444( 319LL,  &qword_1002AB7D0,  type metadata accessor for RenewalInfo,  (unint64_t *)&unk_1002AB7D8,  "EY\b");
    if (v5 <= 0x3F)
    {
      void v6[3] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 4LL, v6, a1 + 16);
    }
  }

void sub_100051444( uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, const char *a5)
{
  if (!*a2)
  {
    uint64_t v10 = a3(255LL);
    sub_100046F3C(a4, a3, a5);
    unint64_t v13 = type metadata accessor for JWS(a1, v10, v11, v12);
    if (!v14) {
      atomic_store(v13, a2);
    }
  }

uint64_t sub_1000514C4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0)
  {
    swift_bridgeObjectRetain(a2);
    a1 = a3;
  }

  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_1000514F0(uint64_t a1)
{
  return sub_100051528(*(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(_BYTE *)(a1 + 88));
}

uint64_t sub_100051528(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0)
  {
    swift_bridgeObjectRelease(a2);
    a1 = a3;
  }

  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_100051554(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 72);
  uint64_t v7 = *(void *)(a2 + 80);
  char v8 = *(_BYTE *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000514C4(v5, v6, v7, v8);
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = v6;
  *(void *)(a1 + 80) = v7;
  *(_BYTE *)(a1 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = v8;
  return a1;
}

uint64_t sub_1000515EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *a2;
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v2[6];
  *(void *)(a1 + 56) = v2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = v2[8];
  uint64_t v7 = v2[9];
  uint64_t v8 = v2[10];
  LOBYTE(v2) = *((_BYTE *)v2 + 88);
  sub_1000514C4(v6, v7, v8, (char)v2);
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 80);
  char v12 = *(_BYTE *)(a1 + 88);
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = v7;
  *(void *)(a1 + 80) = v8;
  *(_BYTE *)(a1 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = (_BYTE)v2;
  sub_100051528(v9, v10, v11, v12);
  return a1;
}

void *sub_1000516BC(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x59uLL);
}

uint64_t sub_1000516C4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 80);
  char v7 = *(_BYTE *)(a2 + 88);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 72);
  uint64_t v10 = *(void *)(a1 + 80);
  char v11 = *(_BYTE *)(a1 + 88);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = v6;
  *(_BYTE *)(a1 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = v7;
  sub_100051528(v8, v9, v10, v11);
  return a1;
}

uint64_t sub_100051750(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 89))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 40);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_100051790(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_BYTE *)(result + 8_Block_object_dispose((const void *)(v1 - 136), 8) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 89) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 89) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for StatusResponse()
{
}

unint64_t sub_1000517F4()
{
  unint64_t result = qword_1002AB818;
  if (!qword_1002AB818)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F6F78, &unk_100278D08);
    atomic_store(result, (unint64_t *)&qword_1002AB818);
  }

  return result;
}

_OWORD *sub_100051830(__int128 *a1, _OWORD *a2)
{
  __int128 v2 = *a1;
  *(_OWORD *)((char *)a2 + 9) = *(__int128 *)((char *)a1 + 9);
  *a2 = v2;
  return a2;
}

unint64_t sub_100051848()
{
  unint64_t result = qword_1002AB820;
  if (!qword_1002AB820)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F6F50, &unk_100278E28);
    atomic_store(result, (unint64_t *)&qword_1002AB820);
  }

  return result;
}

unint64_t sub_100051884()
{
  unint64_t result = qword_1002AB830;
  if (!qword_1002AB830)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F6F00, &unk_100278C78);
    atomic_store(result, (unint64_t *)&qword_1002AB830);
  }

  return result;
}

unint64_t sub_1000518C0()
{
  unint64_t result = qword_1002AB840;
  if (!qword_1002AB840)
  {
    uint64_t v1 = sub_100018EC0(&qword_1002AB838);
    sub_100046F3C( &qword_1002AB848,  type metadata accessor for StatusResponse.Datum.TransactionContainer,  byte_1001F6A5C);
    uint64_t v3 = v2;
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v3);
    atomic_store(result, (unint64_t *)&qword_1002AB840);
  }

  return result;
}

unint64_t sub_10005193C()
{
  unint64_t result = qword_1002AB858;
  if (!qword_1002AB858)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F6EB0, &unk_100278BE8);
    atomic_store(result, (unint64_t *)&qword_1002AB858);
  }

  return result;
}

unint64_t sub_100051978()
{
  unint64_t result = qword_1002AB860;
  if (!qword_1002AB860)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F6E88, &unk_100278D98);
    atomic_store(result, (unint64_t *)&qword_1002AB860);
  }

  return result;
}

void sub_1000519B4(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v3 = sub_100018EC0(a2);
    atomic_store(swift_getWitnessTable(byte_100204D48, v3), a1);
  }

  sub_10001945C();
}

uint64_t sub_1000519F0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = 1;
  }
  else {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100051A3C + 4 * byte_1001F69B7[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100051A70 + 4 * byte_1001F69B2[v4]))();
}

uint64_t sub_100051A70(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100051A78(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x100051A80LL);
  }
  return result;
}

uint64_t sub_100051A8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x100051A94LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100051A98(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100051AA0(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

void type metadata accessor for StatusResponse.Datum.TransactionContainer.CodingKeys()
{
}

uint64_t sub_100051AB8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = 1;
  }
  else {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100051B04 + 4 * byte_1001F69C1[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100051B38 + 4 * byte_1001F69BC[v4]))();
}

uint64_t sub_100051B38(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100051B40(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x100051B48LL);
  }
  return result;
}

uint64_t sub_100051B54(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x100051B5CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100051B60(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100051B68(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

void type metadata accessor for StatusResponse.Datum.CodingKeys()
{
}

uint64_t sub_100051B80(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = 1;
  }
  else {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_100051BCC + 4 * byte_1001F69CB[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100051C00 + 4 * byte_1001F69C6[v4]))();
}

uint64_t sub_100051C00(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100051C08(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x100051C10LL);
  }
  return result;
}

uint64_t sub_100051C1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x100051C24LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_100051C28(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100051C30(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

void type metadata accessor for StatusResponse.CodingKeys()
{
}

uint64_t sub_100051C48(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = 1;
  }
  else {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_100051C94 + 4 * byte_1001F69D5[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100051CC8 + 4 * byte_1001F69D0[v4]))();
}

uint64_t sub_100051CC8(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100051CD0(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x100051CD8LL);
  }
  return result;
}

uint64_t sub_100051CE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x100051CECLL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_100051CF0(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100051CF8(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

void type metadata accessor for StatusResponse.Datum.TransactionContainer.Code()
{
}

uint64_t sub_100051D10(uint64_t a1)
{
  return sub_100051528(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t sub_100051D24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  sub_1000514C4(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t sub_100051D80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  sub_1000514C4(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(_BYTE *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  sub_100051528(v7, v8, v9, v10);
  return a1;
}

__n128 initializeWithTake for SocketAddressError(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100051E00(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(_BYTE *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  char v8 = *(_BYTE *)(a1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  sub_100051528(v5, v7, v6, v8);
  return a1;
}

uint64_t sub_100051E4C(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_100051E8C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 25) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 24) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_100051ED4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_100051EDC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2 & 1;
  return result;
}

void type metadata accessor for StatusResponse.DataType()
{
}

unint64_t sub_100051EF8()
{
  unint64_t result = qword_1002AB878;
  if (!qword_1002AB878)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F6B90, &unk_100278D98);
    atomic_store(result, (unint64_t *)&qword_1002AB878);
  }

  return result;
}

unint64_t sub_100051F38()
{
  unint64_t result = qword_1002AB880;
  if (!qword_1002AB880)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F6C80, &unk_100278D08);
    atomic_store(result, (unint64_t *)&qword_1002AB880);
  }

  return result;
}

unint64_t sub_100051F78()
{
  unint64_t result = qword_1002AB888;
  if (!qword_1002AB888)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F6D70, &unk_100278C78);
    atomic_store(result, (unint64_t *)&qword_1002AB888);
  }

  return result;
}

unint64_t sub_100051FB8()
{
  unint64_t result = qword_1002AB890;
  if (!qword_1002AB890)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F6E60, &unk_100278BE8);
    atomic_store(result, (unint64_t *)&qword_1002AB890);
  }

  return result;
}

unint64_t sub_100051FF8()
{
  unint64_t result = qword_1002AB898;
  if (!qword_1002AB898)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F6D98, &unk_100278BE8);
    atomic_store(result, (unint64_t *)&qword_1002AB898);
  }

  return result;
}

unint64_t sub_100052038()
{
  unint64_t result = qword_1002AB8A0;
  if (!qword_1002AB8A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F6DC0, &unk_100278BE8);
    atomic_store(result, (unint64_t *)&qword_1002AB8A0);
  }

  return result;
}

unint64_t sub_100052078()
{
  unint64_t result = qword_1002AB8A8;
  if (!qword_1002AB8A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F6CA8, &unk_100278C78);
    atomic_store(result, (unint64_t *)&qword_1002AB8A8);
  }

  return result;
}

unint64_t sub_1000520B8()
{
  unint64_t result = qword_1002AB8B0;
  if (!qword_1002AB8B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F6CD0, &unk_100278C78);
    atomic_store(result, (unint64_t *)&qword_1002AB8B0);
  }

  return result;
}

unint64_t sub_1000520F8()
{
  unint64_t result = qword_1002AB8B8;
  if (!qword_1002AB8B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F6BB8, &unk_100278D08);
    atomic_store(result, (unint64_t *)&qword_1002AB8B8);
  }

  return result;
}

unint64_t sub_100052138()
{
  unint64_t result = qword_1002AB8C0;
  if (!qword_1002AB8C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F6BE0, &unk_100278D08);
    atomic_store(result, (unint64_t *)&qword_1002AB8C0);
  }

  return result;
}

unint64_t sub_100052174()
{
  unint64_t result = qword_1002AB8D0;
  if (!qword_1002AB8D0)
  {
    uint64_t v1 = sub_100018EC0(&qword_1002AB8C8);
    unint64_t v2 = sub_1000521D8();
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1002AB8D0);
  }

  return result;
}

unint64_t sub_1000521D8()
{
  unint64_t result = qword_1002AB8D8;
  if (!qword_1002AB8D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F6A84, &unk_100278AC0);
    atomic_store(result, (unint64_t *)&qword_1002AB8D8);
  }

  return result;
}

unint64_t sub_100052214()
{
  unint64_t result = qword_1002AB8E0;
  if (!qword_1002AB8E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F6B18, &unk_100278D98);
    atomic_store(result, (unint64_t *)&qword_1002AB8E0);
  }

  return result;
}

void sub_100052250()
{
}

uint64_t sub_10005225C()
{
  return 0x6D6E6F7269766E65LL;
}

uint64_t sub_10005227C()
{
  return 0x496D616441707061LL;
}

uint64_t sub_100052298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_1000522A4()
{
  return 0x6449656C646E7562LL;
}

uint64_t sub_1000522BC(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v3 - 128, v2);
}

unint64_t sub_1000522D0()
{
  return 0xD000000000000015LL;
}

uint64_t sub_1000522E4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

uint64_t sub_1000522F8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_100052304( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return sub_100043F18((uint64_t)&a12, a15);
}

Swift::Int sub_100052314(Swift::OpaquePointer a1, uint64_t a2)
{
  uint64_t v3 = v2;
  return _findStringSwitchCase(cases:string:)(a1, *(Swift::String *)&a2);
}

uint64_t sub_10005231C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100052324()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

void sub_10005232C()
{
  char v4 = (void *)(v1 + 24 * v0);
  void v4[4] = v3;
  v4[5] = v2;
  v4[6] = 0LL;
}

uint64_t sub_100052340()
{
  return *v0;
}

uint64_t sub_10005234C()
{
  return v2(v1, v0);
}

uint64_t sub_100052358(int a1, char a2)
{
  uint64_t v4 = v2;
  type metadata accessor for BaseSocket();
  swift_retain();
  uint64_t v7 = sub_1000CC820(a1, 1LL, a2);
  if (v3)
  {
    swift_release();
    uint64_t v8 = type metadata accessor for ServerSocket();
    return swift_deallocPartialClassInstance(v4, v8, 21LL, 7LL);
  }

  else
  {
    uint64_t v10 = v7;
    *(_BYTE *)(v4 + 20) = a1 == 1;
    swift_release();
    return sub_1000CCA40(v10);
  }

uint64_t sub_100052414(uint64_t a1, char a2)
{
  *(_BYTE *)(v2 + 20) = 0;
  uint64_t v5 = sub_1000CCA40(a1);
  if (!v3 && (a2 & 1) != 0)
  {
    if (sub_1000CCD30())
    {
      sub_1001718CC();
    }

    else
    {
      unint64_t v6 = sub_100025100();
      sub_1000252D0((uint64_t)&type metadata for IOError, v6);
      sub_100052668(v7, 0xD00000000000001FLL);
      swift_release();
    }
  }

  return v5;
}

void sub_1000524AC(int a1)
{
  if (sub_1000CCD30())
  {
    sub_100171280(*(_DWORD *)(v1 + 16), a1);
  }

  else
  {
    unint64_t v3 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v3);
    sub_100052668(v4, 0xD00000000000001FLL);
  }

uint64_t sub_10005251C()
{
  uint64_t v2 = v1;
  if (*(_BYTE *)(v0 + 20) == 1)
  {
    unint64_t v3 = sub_1000CCD80((uint64_t (*)(void))sub_1000CD348);
    if (v1)
    {
      swift_errorRelease(v1);
      uint64_t v4 = 0LL;
      uint64_t v5 = 0LL;
      uint64_t v2 = 0LL;
    }

    else
    {
      uint64_t v4 = SocketAddress.pathname.getter(v3);
      uint64_t v5 = v6;
      swift_release();
    }
  }

  else
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = 0LL;
  }

  uint64_t result = sub_1000CCCD4();
  if (!v2)
  {
    if (!v5) {
      return result;
    }
    sub_10011D1D8(v4, v5);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000525D8()
{
  return swift_deallocClassInstance(v0, 21LL, 7LL);
}

uint64_t type metadata accessor for ServerSocket()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService12ServerSocket);
}

unint64_t sub_100052608(uint64_t a1)
{
  unint64_t result = sub_10005262C();
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = result;
  return result;
}

unint64_t sub_10005262C()
{
  unint64_t result = qword_1002ABA08;
  if (!qword_1002ABA08)
  {
    uint64_t v1 = type metadata accessor for ServerSocket();
    unint64_t result = swift_getWitnessTable(byte_1001FE174, v1);
    atomic_store(result, (unint64_t *)&qword_1002ABA08);
  }

  return result;
}

uint64_t sub_100052668@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a1 = a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = (v2 - 32) | 0x8000000000000000LL;
  *(_DWORD *)(a1 + 16) = 9;
  return swift_willThrow();
}

double sub_100052684@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ConfirmDialog();
  sub_1000542A4(v4);
  sub_10011B980(a1);
  *(void *)a2 = 0LL;
  *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
  *(void *)(a2 + 16) = _swiftEmptyArrayStorage;
  *(_WORD *)(a2 + 24) = 0;
  sub_100054268();
  *(void *)(a2 + 32) = v5;
  *(void *)(a2 + 40) = v6;
  *(void *)(a2 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
  *(_BYTE *)(a2 + 56) = v7;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = 0LL;
  *(void *)(a2 + 80) = 0xF000000000000000LL;
  *(void *)(a2 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
  *(void *)(a2 + 96) = 0LL;
  *(void *)(a2 + 104) = v7;
  double result = 0.0;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 12_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
  *(_BYTE *)(a2 + 176) = 19;
  *(void *)(a2 + 184) = 0LL;
  *(void *)(a2 + 192) = 0LL;
  *(void *)(a2 + 200) = v9;
  *(_BYTE *)(a2 + 20_Block_object_dispose((const void *)(v1 - 136), 8) = 2;
  return result;
}

void *sub_10005272C@<X0>(char a1@<W7>, void *a2@<X8>, uint64_t a3, char a4)
{
  char v33 = 0;
  char v32 = 1;
  if ((a1 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = 0LL;
  }

  else
  {
    type metadata accessor for AlreadyOwnSubscriptionDialog();
    swift_unknownObjectRetain(a3);
    swift_retain();
    sub_10011AA40();
    uint64_t v5 = v6;
  }

  swift_release();
  swift_unknownObjectRelease(a3);
  if ((a4 & 1) != 0) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  *(void *)__src = 0LL;
  *(void *)&__src[8] = 0LL;
  if ((a4 & 1) != 0) {
    char v8 = 4;
  }
  else {
    char v8 = 22;
  }
  *(void *)&__src[16] = _swiftEmptyArrayStorage;
  *(_WORD *)&__src[24] = 0;
  strcpy(&__src[32], "17322632127");
  *(_DWORD *)&__src[44] = -352321536;
  *(void *)&__src[48] = 0LL;
  __src[56] = 1;
  *(void *)&__src[64] = 0LL;
  *(void *)&__src[72] = 0LL;
  *(void *)&__src[80] = 0xF000000000000000LL;
  *(void *)&__src[88] = 0LL;
  *(void *)&__src[96] = 0LL;
  *(void *)&_BYTE __src[104] = 1LL;
  memset(&__src[112], 0, 64);
  __src[176] = v8;
  *(void *)&__src[184] = 0x1000000000000026LL;
  *(void *)&__src[192] = 0x8000000100219AC0LL;
  *(void *)&__src[200] = v5;
  __src[208] = v7;
  v11[0] = 0LL;
  v11[1] = 0LL;
  v11[2] = _swiftEmptyArrayStorage;
  __int16 v12 = 0;
  uint64_t v13 = 0x3233363232333731LL;
  unint64_t v14 = 0xEB00000000373231LL;
  uint64_t v15 = 0LL;
  char v16 = 1;
  uint64_t v17 = 0LL;
  uint64_t v18 = 0LL;
  unint64_t v19 = 0xF000000000000000LL;
  uint64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v22 = 1LL;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  char v27 = v8;
  uint64_t v28 = 0x1000000000000026LL;
  unint64_t v29 = 0x8000000100219AC0LL;
  uint64_t v30 = v5;
  char v31 = v7;
  sub_100053590((uint64_t)__src);
  sub_1000536E8((uint64_t)v11);
  return memcpy(a2, __src, 0xD1uLL);
}

double sub_100052934@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_10005295C( a1,  a2,  a3,  (uint64_t (*)(void))type metadata accessor for AlreadyOwnNonConsumableDialog,  (void (*)(uint64_t, uint64_t, uint64_t))sub_10011BC20,  a4);
}

double sub_100052948@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_10005295C( a1,  a2,  a3,  (uint64_t (*)(void))type metadata accessor for PreviouslyPurchasedNonRenewingSubscriptionDialog,  (void (*)(uint64_t, uint64_t, uint64_t))sub_10011C228,  a4);
}

double sub_10005295C@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(void)@<X3>, void (*a5)(uint64_t, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = a4(0LL);
  sub_1000542A4(v11);
  a5(a1, a2, a3);
  *(void *)a6 = 0LL;
  *(void *)(a6 + _Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
  *(void *)(a6 + 16) = _swiftEmptyArrayStorage;
  *(_WORD *)(a6 + 24) = 0;
  sub_100054268();
  *(void *)(a6 + 32) = v12;
  *(void *)(a6 + 40) = v13;
  *(void *)(a6 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
  *(_BYTE *)(a6 + 56) = v14;
  *(void *)(a6 + 64) = 0LL;
  *(void *)(a6 + 72) = 0LL;
  *(void *)(a6 + 80) = 0xF000000000000000LL;
  *(void *)(a6 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
  *(void *)(a6 + 96) = 0LL;
  *(void *)(a6 + 104) = v14;
  double result = 0.0;
  *(_OWORD *)(a6 + 144) = 0u;
  *(_OWORD *)(a6 + 160) = 0u;
  *(_OWORD *)(a6 + 112) = 0u;
  *(_OWORD *)(a6 + 12_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
  *(_BYTE *)(a6 + 176) = 22;
  *(void *)(a6 + 184) = 0LL;
  *(void *)(a6 + 192) = 0LL;
  *(void *)(a6 + 200) = v16;
  *(_BYTE *)(a6 + 20_Block_object_dispose((const void *)(v1 - 136), 8) = 2;
  return result;
}

double sub_100052A24@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = 0LL;
  *(void *)(a6 + _Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
  *(void *)(a6 + 16) = _swiftEmptyArrayStorage;
  *(_WORD *)(a6 + 24) = 0;
  sub_100054268();
  *(void *)(a6 + 32) = v12;
  *(void *)(a6 + 40) = v13;
  *(void *)(a6 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
  *(_BYTE *)(a6 + 56) = v14;
  *(void *)(a6 + 64) = 0LL;
  *(void *)(a6 + 72) = 0LL;
  *(void *)(a6 + 80) = 0xF000000000000000LL;
  *(void *)(a6 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
  *(void *)(a6 + 96) = 0LL;
  *(void *)(a6 + 104) = v14;
  double result = 0.0;
  *(_OWORD *)(a6 + 144) = 0u;
  *(_OWORD *)(a6 + 160) = 0u;
  *(_OWORD *)(a6 + 112) = 0u;
  *(_OWORD *)(a6 + 12_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
  *(_BYTE *)(a6 + 176) = 19;
  *(void *)(a6 + 184) = 0xD000000000000022LL;
  *(void *)(a6 + 192) = 0x8000000100219A90LL;
  *(void *)(a6 + 200) = v16;
  *(_BYTE *)(a6 + 20_Block_object_dispose((const void *)(v1 - 136), 8) = 2;
  return result;
}

unint64_t sub_100052B24(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100271468, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xC) {
    return 12LL;
  }
  else {
    return v3;
  }
}

uint64_t static NIOBSDSocket.Option.ip_add_membership.getter()
{
  return 12LL;
}

uint64_t sub_100052B78(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100052BA8 + 4 * byte_1001F7030[a1]))( 0x73676E6970LL,  0xE500000000000000LL);
}

uint64_t sub_100052BA8()
{
  return 0x6F44656C676E696ALL;
}

uint64_t sub_100052BCC()
{
  return 0x6341656C676E696ALL;
}

uint64_t sub_100052BEC()
{
  return 1684632420LL;
}

unint64_t sub_100052BFC()
{
  return 0xD000000000000019LL;
}

uint64_t sub_100052C1C()
{
  return 0x7473696C2D707061LL;
}

uint64_t sub_100052C34()
{
  return 0x2D74706965636572LL;
}

uint64_t sub_100052C54()
{
  return 0x7363697274656DLL;
}

uint64_t sub_100052C6C()
{
  return 0x546572756C696166LL;
}

uint64_t sub_100052C8C()
{
  return 0x72656D6F74737563LL;
}

uint64_t sub_100052CB0()
{
  return 0x676F6C616964LL;
}

unint64_t sub_100052CC4()
{
  return 0xD000000000000015LL;
}

uint64_t sub_100052CE0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100052D10 + 4 * byte_1001F703C[a1]))( 0x73676E6970LL,  0xE500000000000000LL);
}

uint64_t sub_100052D10()
{
  return 0x6F44656C676E696ALL;
}

uint64_t sub_100052D34()
{
  return 0x6341656C676E696ALL;
}

uint64_t sub_100052D54()
{
  return 1684632420LL;
}

unint64_t sub_100052D64()
{
  return 0xD000000000000019LL;
}

uint64_t sub_100052D84()
{
  return 0x7473696C2D707061LL;
}

uint64_t sub_100052D9C()
{
  return 0x2D74706965636572LL;
}

uint64_t sub_100052DBC()
{
  return 0x7363697274656DLL;
}

uint64_t sub_100052DD4()
{
  return 0x546572756C696166LL;
}

uint64_t sub_100052DF4()
{
  return 0x72656D6F74737563LL;
}

uint64_t sub_100052E18()
{
  return 0x676F6C616964LL;
}

unint64_t sub_100052E2C()
{
  return 0xD000000000000015LL;
}

uint64_t sub_100052E48(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000175B0(&qword_1002ABA10);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100019F58(a1, v9);
  unint64_t v11 = sub_10005338C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for LegacyInAppBuyResponse.CodingKeys,  &type metadata for LegacyInAppBuyResponse.CodingKeys,  v11,  v9,  v10);
  v47[0] = *(void *)(v3 + 16);
  char v52 = 0;
  uint64_t v12 = sub_1000175B0(&qword_1002A93B8);
  unint64_t v13 = sub_1000533C8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v47, &v52, v5, v12, v13);
  if (!v2)
  {
    sub_100054254(v3 + 24, (uint64_t)&v55);
    sub_100054254((uint64_t)&v55, (uint64_t)v47);
    char v52 = 1;
    unint64_t v14 = sub_100053424();
    sub_10005423C(v14, v15, v16, (uint64_t)&type metadata for JingleDocType, v14);
    sub_100054254(v3 + 25, (uint64_t)&v54);
    sub_100054254((uint64_t)&v54, (uint64_t)v47);
    char v52 = 2;
    unint64_t v17 = sub_100053460();
    sub_10005423C(v17, v18, v19, (uint64_t)&type metadata for JingleAction, v17);
    sub_100054288(3);
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, v22, v23);
    sub_100054288(4);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, v26, v27);
    sub_100054254(v3 + 64, (uint64_t)v51);
    sub_100054254((uint64_t)v51, (uint64_t)v47);
    char v52 = 5;
    uint64_t v28 = sub_1000175B0(&qword_1002ABA48);
    unint64_t v29 = sub_10005349C();
    sub_10005425C((uint64_t)v47, (uint64_t)&v52, v5, v28, v29);
    sub_100054254(v3 + 72, (uint64_t)v50);
    sub_100054254((uint64_t)v50, (uint64_t)v47);
    char v52 = 6;
    unint64_t v30 = sub_100048400();
    sub_10005423C(v30, v31, v32, (uint64_t)&type metadata for Data, v30);
    sub_100054254(v3 + 88, (uint64_t)v49);
    sub_100054254((uint64_t)v49, (uint64_t)v47);
    char v52 = 7;
    unint64_t v33 = sub_100053518();
    sub_10005423C(v33, v34, v35, (uint64_t)&unk_10028C1D0, v33);
    sub_100054254(v3 + 176, (uint64_t)&v53);
    sub_100054254((uint64_t)&v53, (uint64_t)v47);
    char v52 = 8;
    unint64_t v36 = sub_100053554();
    sub_10005423C(v36, v37, v38, (uint64_t)&type metadata for FailureType, v36);
    sub_100054288(9);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v39, v40, v41, v42);
    sub_100054254(v3 + 200, (uint64_t)v48);
    sub_100054254((uint64_t)v48, (uint64_t)v47);
    char v52 = 10;
    uint64_t v43 = type metadata accessor for Dialog();
    uint64_t v44 = sub_1000221A8( &qword_1002ABA90,  (uint64_t (*)(uint64_t))type metadata accessor for Dialog,  (uint64_t)&unk_100201004);
    sub_10005425C((uint64_t)v47, (uint64_t)&v52, v5, v43, v44);
    uint64_t v45 = *(unsigned __int8 *)(v3 + 208);
    LOBYTE(v47[0]) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v45, v47, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000531FC(uint64_t a1)
{
  uint64_t result = swift_release(*(void *)(v1 + 200));
  *(void *)(v1 + 200) = a1;
  return result;
}

void sub_100053224(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_100053230()
{
}

uint64_t sub_100053238(uint64_t a1)
{
  return sub_1000B1740(a1, *v1);
}

void sub_100053240(uint64_t a1)
{
}

unint64_t sub_100053248@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100052B24(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100053274@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100052B78(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10005329C()
{
  return sub_100052CE0(*v0);
}

uint64_t sub_1000532A4@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100052B6C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000532C8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = static NIOBSDSocket.Option.ip_add_membership.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000532EC(uint64_t a1)
{
  unint64_t v2 = sub_10005338C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100053314(uint64_t a1)
{
  unint64_t v2 = sub_10005338C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005333C(void *a1)
{
  return sub_100052E48(a1);
}

unint64_t sub_10005338C()
{
  unint64_t result = qword_1002ABA18;
  if (!qword_1002ABA18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F71F4, &type metadata for LegacyInAppBuyResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABA18);
  }

  return result;
}

unint64_t sub_1000533C8()
{
  unint64_t result = qword_1002A93C0;
  if (!qword_1002A93C0)
  {
    uint64_t v1 = sub_100018EC0(&qword_1002A93B8);
    unint64_t v2 = &protocol witness table for String;
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1002A93C0);
  }

  return result;
}

unint64_t sub_100053424()
{
  unint64_t result = qword_1002ABA28;
  if (!qword_1002ABA28)
  {
    unint64_t result = swift_getWitnessTable("M9\b", &type metadata for JingleDocType);
    atomic_store(result, (unint64_t *)&qword_1002ABA28);
  }

  return result;
}

unint64_t sub_100053460()
{
  unint64_t result = qword_1002ABA38;
  if (!qword_1002ABA38)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001FBD14, &type metadata for JingleAction);
    atomic_store(result, (unint64_t *)&qword_1002ABA38);
  }

  return result;
}

unint64_t sub_10005349C()
{
  unint64_t result = qword_1002ABA50;
  if (!qword_1002ABA50)
  {
    uint64_t v1 = sub_100018EC0(&qword_1002ABA48);
    uint64_t v2 = sub_1000221A8( (unint64_t *)&qword_1002ABA58,  type metadata accessor for IAPTransaction,  (uint64_t)&unk_10020AE80);
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1002ABA50);
  }

  return result;
}

unint64_t sub_100053518()
{
  unint64_t result = qword_1002ABA70;
  if (!qword_1002ABA70)
  {
    unint64_t result = swift_getWitnessTable(&unk_100206664, &unk_10028C1D0);
    atomic_store(result, (unint64_t *)&qword_1002ABA70);
  }

  return result;
}

unint64_t sub_100053554()
{
  unint64_t result = qword_1002ABA80;
  if (!qword_1002ABA80)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001FAABC, &type metadata for FailureType);
    atomic_store(result, (unint64_t *)&qword_1002ABA80);
  }

  return result;
}

uint64_t sub_100053590(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  unint64_t v3 = *(void *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 96);
  uint64_t v5 = *(void *)(a1 + 104);
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v13 = *(void *)(a1 + 120);
  uint64_t v14 = *(void *)(a1 + 88);
  uint64_t v11 = *(void *)(a1 + 136);
  uint64_t v12 = *(void *)(a1 + 128);
  uint64_t v10 = *(void *)(a1 + 144);
  __int128 v9 = *(_OWORD *)(a1 + 152);
  uint64_t v7 = *(void *)(a1 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10003AA74(v2, v3);
  sub_100053688(v14, v4, v5, v6, v13, v12, v11, v10, v9, *((uint64_t *)&v9 + 1), v7);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100053688( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a3 != 1)
  {
    swift_bridgeObjectRetain(a11);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    return swift_bridgeObjectRetain(a9);
  }

  return result;
}

uint64_t sub_1000536E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  unint64_t v3 = *(void *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 96);
  uint64_t v5 = *(void *)(a1 + 104);
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v13 = *(void *)(a1 + 120);
  uint64_t v14 = *(void *)(a1 + 88);
  uint64_t v11 = *(void *)(a1 + 136);
  uint64_t v12 = *(void *)(a1 + 128);
  uint64_t v10 = *(void *)(a1 + 144);
  __int128 v9 = *(_OWORD *)(a1 + 152);
  uint64_t v7 = *(void *)(a1 + 168);
  uint64_t v15 = *(void *)(a1 + 200);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10003AACC(v2, v3);
  sub_1000537DC(v14, v4, v5, v6, v13, v12, v11, v10, v9, *((uint64_t *)&v9 + 1), v7);
  swift_bridgeObjectRelease();
  swift_release(v15);
  return a1;
}

uint64_t sub_1000537DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a3 != 1)
  {
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a9);
    return swift_bridgeObjectRelease(a11);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for LegacyInAppBuyResponse.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF5)
  {
    if (a2 + 11 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 11) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 12;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for LegacyInAppBuyResponse.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = 1;
  }
  else {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF4) {
    return ((uint64_t (*)(void))((char *)&loc_100053910 + 4 * byte_1001F704D[v4]))();
  }
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_100053944 + 4 * byte_1001F7048[v4]))();
}

uint64_t sub_100053944(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10005394C(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x100053954LL);
  }
  return result;
}

uint64_t sub_100053960(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x100053968LL);
  }
  *(_BYTE *)uint64_t result = a2 + 11;
  return result;
}

uint64_t sub_10005396C(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100053974(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LegacyInAppBuyResponse.CodingKeys()
{
  return &type metadata for LegacyInAppBuyResponse.CodingKeys;
}

uint64_t destroy for LegacyInAppBuyResponse(uint64_t *a1)
{
  unint64_t v2 = a1[10];
  if (v2 >> 60 != 15) {
    sub_10003A9EC(a1[9], v2);
  }
  if (a1[13] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  return swift_release(a1[25]);
}

uint64_t initializeWithCopy for LegacyInAppBuyResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  unsigned int v6 = (uint64_t *)(a2 + 72);
  unint64_t v7 = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v6;
  }

  else
  {
    uint64_t v8 = *v6;
    sub_10003AA88(*v6, v7);
    *(void *)(a1 + 72) = v8;
    *(void *)(a1 + 80) = v7;
  }

  uint64_t v9 = *(void *)(a2 + 104);
  if (v9 == 1)
  {
    memcpy((void *)(a1 + 88), (const void *)(a2 + 88), 0x58uLL);
  }

  else
  {
    *(_BYTE *)(a1 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = *(_BYTE *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = v9;
    uint64_t v10 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = v10;
    *(void *)(a1 + 12_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    uint64_t v11 = *(void *)(a2 + 152);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = v11;
    uint64_t v12 = *(void *)(a2 + 168);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(void *)(a1 + 16_Block_object_dispose((const void *)(v1 - 136), 8) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  uint64_t v13 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v13;
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(_BYTE *)(a1 + 20_Block_object_dispose((const void *)(v1 - 136), 8) = *(_BYTE *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LegacyInAppBuyResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v4;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (uint64_t *)(a2 + 72);
  unint64_t v6 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80) >> 60 == 15LL)
  {
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = *v5;
      sub_10003AA88(*v5, *(void *)(a2 + 80));
      *(void *)(a1 + 72) = v7;
      *(void *)(a1 + 80) = v6;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v6 >> 60 == 15)
  {
    sub_100047E84(a1 + 72);
LABEL_6:
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v5;
    goto LABEL_8;
  }

  uint64_t v8 = *v5;
  sub_10003AA88(*v5, *(void *)(a2 + 80));
  uint64_t v9 = *(void *)(a1 + 72);
  unint64_t v10 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = v8;
  *(void *)(a1 + 80) = v6;
  sub_10003A9EC(v9, v10);
LABEL_8:
  uint64_t v11 = *(void *)(a2 + 104);
  if (*(void *)(a1 + 104) != 1LL)
  {
    if (v11 != 1)
    {
      *(_BYTE *)(a1 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = *(_BYTE *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 12_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(void *)(a1 + 16_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 168);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }

    sub_100053E80((void *)(a1 + 88));
    goto LABEL_13;
  }

  if (v11 == 1)
  {
LABEL_13:
    memcpy((void *)(a1 + 88), (const void *)(a2 + 88), 0x58uLL);
    goto LABEL_15;
  }

  *(_BYTE *)(a1 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = *(_BYTE *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 12_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 16_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_15:
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_retain();
  swift_release(v12);
  *(_BYTE *)(a1 + 20_Block_object_dispose((const void *)(v1 - 136), 8) = *(_BYTE *)(a2 + 208);
  return a1;
}

void *sub_100053E80(void *a1)
{
  return a1;
}

void *initializeWithTake for LegacyInAppBuyResponse(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xD1uLL);
}

uint64_t assignWithTake for LegacyInAppBuyResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  unint64_t v6 = (_OWORD *)(a2 + 72);
  unint64_t v7 = *(void *)(a1 + 80);
  if (v7 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v8 = *(void *)(a2 + 80);
  if (v8 >> 60 == 15)
  {
    sub_100047E84(a1 + 72);
LABEL_4:
    *(_OWORD *)(a1 + 72) = *v6;
    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)v6;
  *(void *)(a1 + 80) = v8;
  sub_10003A9EC(v9, v7);
LABEL_6:
  if (*(void *)(a1 + 104) != 1LL)
  {
    uint64_t v10 = *(void *)(a2 + 104);
    if (v10 != 1)
    {
      *(_BYTE *)(a1 + 8_Block_object_dispose((const void *)(v1 - 136), 8) = *(_BYTE *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = v10;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void *)(a2 + 128);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 12_Block_object_dispose((const void *)(v1 - 136), 8) = v11;
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
      uint64_t v12 = *(void *)(a2 + 152);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = v12;
      swift_bridgeObjectRelease();
      uint64_t v13 = *(void *)(a2 + 168);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(void *)(a1 + 16_Block_object_dispose((const void *)(v1 - 136), 8) = v13;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }

    sub_100053E80((void *)(a1 + 88));
  }

  memcpy((void *)(a1 + 88), (const void *)(a2 + 88), 0x58uLL);
LABEL_11:
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  uint64_t v14 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_release(v15);
  *(_BYTE *)(a1 + 20_Block_object_dispose((const void *)(v1 - 136), 8) = *(_BYTE *)(a2 + 208);
  return a1;
}

uint64_t getEnumTagSinglePayload for LegacyInAppBuyResponse(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 209))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LegacyInAppBuyResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 200) = 0LL;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 16_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_BYTE *)(result + 20_Block_object_dispose((const void *)(v1 - 136), 8) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 209) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 209) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LegacyInAppBuyResponse()
{
  return &type metadata for LegacyInAppBuyResponse;
}

unint64_t sub_100054120()
{
  unint64_t result = qword_1002ABA98;
  if (!qword_1002ABA98)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F71B0, &type metadata for LegacyInAppBuyResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABA98);
  }

  return result;
}

unint64_t sub_10005415C(uint64_t a1)
{
  unint64_t result = sub_100054180();
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = result;
  return result;
}

unint64_t sub_100054180()
{
  unint64_t result = qword_1002ABAA0;
  if (!qword_1002ABAA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F7094, &type metadata for LegacyInAppBuyResponse);
    atomic_store(result, (unint64_t *)&qword_1002ABAA0);
  }

  return result;
}

unint64_t sub_1000541C0()
{
  unint64_t result = qword_1002ABAA8;
  if (!qword_1002ABAA8)
  {
    unint64_t result = swift_getWitnessTable("I \b", &type metadata for LegacyInAppBuyResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABAA8);
  }

  return result;
}

unint64_t sub_100054200()
{
  unint64_t result = qword_1002ABAB0;
  if (!qword_1002ABAB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F7110, &type metadata for LegacyInAppBuyResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABAB0);
  }

  return result;
}

uint64_t sub_10005423C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v6 - 288, v6 - 68, v5, a4, a5);
}

uint64_t sub_100054254(uint64_t a1, uint64_t a2)
{
  return sub_1000390C8(a1, a2, v2);
}

uint64_t sub_10005425C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

  ;
}

void sub_100054288(char a1@<W8>)
{
  *(_BYTE *)(v1 - 28_Block_object_dispose((const void *)(v1 - 136), 8) = a1;
}

uint64_t sub_1000542A4(uint64_t a1)
{
  return swift_allocObject(a1, 448LL, 7LL);
}

uint64_t sub_1000542B0(void *a1)
{
  uint64_t v2 = type metadata accessor for Mirror(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100054CF4();
  if ((sub_100054CE0(v6, v7, v8, (uint64_t)&type metadata for String) & 1) != 0)
  {
    uint64_t v9 = v79;
    sub_100054D00();
    return v9;
  }

  uint64_t v10 = sub_100054CF4();
  if ((sub_100054CE0(v10, v11, v12, (uint64_t)&type metadata for Bool) & 1) != 0)
  {
    uint64_t v9 = v79;
    sub_100054D00();
    return v9;
  }

  sub_100054CF4();
  uint64_t v13 = sub_1000175B0((uint64_t *)&unk_1002AFCF0);
  if ((sub_100054CE0(v13, v14, v15, v13) & 1) != 0)
  {
    uint64_t v16 = v79;
    uint64_t v17 = *(void *)(v79 + 16);
    uint64_t v9 = (uint64_t)_swiftEmptyArrayStorage;
    if (v17)
    {
      uint64_t v71 = a1;
      *(void *)&__int128 v77 = _swiftEmptyArrayStorage;
      sub_100032144();
      uint64_t v75 = v16;
      uint64_t v18 = v16 + 32;
      uint64_t v9 = v77;
      do
      {
        sub_10002C010(v18, (uint64_t)v81);
        sub_10002C010((uint64_t)v81, (uint64_t)&v79);
        uint64_t v19 = sub_1000542B0(&v79);
        uint64_t v21 = v20;
        char v23 = v22;
        sub_100019F7C(v81);
        if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
        {
          sub_100032144();
          uint64_t v9 = v77;
        }

        unint64_t v24 = *(void *)(v9 + 16);
        if (v24 >= *(void *)(v9 + 24) >> 1)
        {
          sub_100032144();
          uint64_t v9 = v77;
        }

        *(void *)(v9 + 16) = v24 + 1;
        uint64_t v25 = v9 + 24 * v24;
        *(void *)(v25 + 32) = v19;
        *(void *)(v25 + 40) = v21;
        *(_BYTE *)(v25 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v23;
        v18 += 32LL;
        --v17;
      }

      while (v17);
    }

    sub_100054D00();
    swift_bridgeObjectRelease();
    return v9;
  }

  sub_100054CF4();
  uint64_t v26 = sub_1000175B0(&qword_1002AA338);
  if ((sub_100054CE0(v26, v27, v28, v26) & 1) != 0)
  {
    uint64_t v9 = sub_1000548D0(v79);
    swift_bridgeObjectRelease();
    sub_100054D00();
    return v9;
  }

  sub_100054CF4();
  uint64_t v29 = Mirror.init(reflecting:)(v81);
  unint64_t v30 = (void *)Mirror.children.getter(v29);
  uint64_t v32 = v30[2];
  uint64_t v31 = v30[3];
  uint64_t v33 = v30[4];
  uint64_t v34 = v30[5];
  swift_unknownObjectRetain(v32);
  swift_unknownObjectRetain(v33);
  LOBYTE(v3Hasher._combine(_:)(v1 & 1) = static AnyIndex.== infix(_:_:)(v32, v31, v33, v34);
  swift_release(v30);
  swift_unknownObjectRelease(v32);
  uint64_t v35 = swift_unknownObjectRelease(v33);
  if ((v31 & 1) != 0)
  {
    sub_100054CF4();
    uint64_t v9 = String.init<A>(describing:)(v81, (char *)&type metadata for Any + 8);
    sub_100054D00();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return v9;
  }

  uint64_t v69 = v3;
  uint64_t v70 = v2;
  uint64_t v71 = a1;
  uint64_t v68 = v5;
  uint64_t v36 = Mirror.children.getter(v35);
  uint64_t v9 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &_s5ValueON);
  uint64_t v37 = swift_retain();
  uint64_t v38 = dispatch thunk of _AnySequenceBox._makeIterator()(v37);
  uint64_t v67 = v36;
  uint64_t v39 = swift_release(v36);
  dispatch thunk of _AnyIteratorBoxBase.next()(v81, v39);
  if (!*((void *)&v82 + 1))
  {
LABEL_36:
    swift_release(v38);
    sub_100019F7C(v71);
    swift_release(v67);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v68, v70);
    return v9;
  }

  uint64_t v40 = v78;
  uint64_t v41 = v80;
  uint64_t v74 = (char *)&type metadata for Any + 8;
  uint64_t v73 = v38;
  uint64_t v72 = v78;
  while (1)
  {
    __int128 v79 = v81[0];
    v80[0] = v81[1];
    v80[1] = v82;
    __int128 v42 = v81[0];
    __int128 v77 = v81[0];
    sub_100054D08();
    if (*((void *)&v42 + 1)) {
      break;
    }
    sub_100019F7C(v40);
LABEL_35:
    uint64_t v65 = sub_100043F40((uint64_t)&v79, &qword_1002ABAB8);
    dispatch thunk of _AnyIteratorBoxBase.next()(v81, v65);
    if (!*((void *)&v82 + 1)) {
      goto LABEL_36;
    }
  }

  swift_bridgeObjectRetain();
  sub_100019F7C(v40);
  sub_10002C010((uint64_t)v41, (uint64_t)v76);
  uint64_t v43 = sub_1000175B0((uint64_t *)&unk_1002B9380);
  swift_dynamicCast(&v77, v76, v74, v43, 7LL);
  if (!v78[1])
  {
LABEL_34:
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }

  sub_100043F40((uint64_t)&v77, (uint64_t *)&unk_1002B9380);
  uint64_t v44 = v41;
  sub_100054D08();
  uint64_t v45 = sub_1000542B0(v40);
  uint64_t v47 = v46;
  LODWORD(v75) = v48;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
  *(void *)&__int128 v77 = v9;
  unint64_t v50 = sub_1000F168C(v42, *((uint64_t *)&v42 + 1));
  uint64_t v52 = *(void *)(v9 + 16);
  BOOL v53 = (v51 & 1) == 0;
  Swift::Int v54 = v52 + v53;
  if (!__OFADD__(v52, v53))
  {
    unint64_t v55 = v50;
    char v56 = v51;
    sub_1000175B0(&qword_1002ABAC0);
    Swift::Bool v57 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v54);
    uint64_t v41 = v44;
    if (v57)
    {
      unint64_t v58 = sub_1000F168C(v42, *((uint64_t *)&v42 + 1));
      if ((v56 & 1) != (v59 & 1)) {
        goto LABEL_40;
      }
      unint64_t v55 = v58;
    }

    uint64_t v9 = v77;
    if ((v56 & 1) != 0)
    {
      uint64_t v60 = *(void *)(v77 + 56) + 24 * v55;
      sub_100054B00(*(void *)v60, *(void *)(v60 + 8), *(_BYTE *)(v60 + 16));
      *(void *)uint64_t v60 = v45;
      *(void *)(v60 + _Block_object_dispose((const void *)(v1 - 136), 8) = v47;
      *(_BYTE *)(v60 + 16) = v75;
    }

    else
    {
      *(void *)(v77 + 8 * (v55 >> 6) + 64) |= 1LL << v55;
      *(_OWORD *)(*(void *)(v9 + 48) + 16 * v55) = v42;
      uint64_t v61 = *(void *)(v9 + 56) + 24 * v55;
      *(void *)uint64_t v61 = v45;
      *(void *)(v61 + _Block_object_dispose((const void *)(v1 - 136), 8) = v47;
      *(_BYTE *)(v61 + 16) = v75;
      uint64_t v62 = *(void *)(v9 + 16);
      BOOL v63 = __OFADD__(v62, 1LL);
      uint64_t v64 = v62 + 1;
      if (v63) {
        goto LABEL_39;
      }
      *(void *)(v9 + 16) = v64;
      swift_bridgeObjectRetain();
    }

    uint64_t v38 = v73;
    uint64_t v40 = v72;
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }

  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1000548D0(uint64_t a1)
{
  uint64_t result = static _DictionaryStorage.copy(original:)(a1);
  uint64_t v3 = (void *)result;
  int64_t v4 = 0LL;
  uint64_t v34 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = a1 + 64;
  uint64_t v5 = v7;
  uint64_t v8 = 1LL << *(_BYTE *)(v6 - 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & v5;
  uint64_t v29 = v6;
  int64_t v30 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v31 = result + 64;
  if ((v9 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v11 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(v34 + 48) + 16 * i);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    sub_10002C010(*(void *)(v34 + 56) + 32 * i, (uint64_t)v33);
    sub_10002C010((uint64_t)v33, (uint64_t)v32);
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_1000542B0(v32);
    uint64_t v21 = v20;
    char v23 = v22;
    uint64_t result = sub_100019F7C(v33);
    *(void *)(v31 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    unint64_t v24 = (void *)(v3[6] + 16 * i);
    *unint64_t v24 = v18;
    v24[1] = v17;
    uint64_t v25 = v3[7] + 24 * i;
    *(void *)uint64_t v25 = v19;
    *(void *)(v25 + _Block_object_dispose((const void *)(v1 - 136), 8) = v21;
    *(_BYTE *)(v25 + 16) = v23;
    uint64_t v26 = v3[2];
    BOOL v27 = __OFADD__(v26, 1LL);
    uint64_t v28 = v26 + 1;
    if (v27)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }

    v3[2] = v28;
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      goto LABEL_24;
    }
    if (v13 >= v30) {
      return (uint64_t)v3;
    }
    unint64_t v14 = *(void *)(v29 + 8 * v13);
    ++v4;
    if (!v14)
    {
      int64_t v4 = v13 + 1;
      if (v13 + 1 >= v30) {
        return (uint64_t)v3;
      }
      unint64_t v14 = *(void *)(v29 + 8 * v4);
      if (!v14)
      {
        int64_t v4 = v13 + 2;
        if (v13 + 2 >= v30) {
          return (uint64_t)v3;
        }
        unint64_t v14 = *(void *)(v29 + 8 * v4);
        if (!v14) {
          break;
        }
      }
    }

LABEL_25:
  __break(1u);
  return result;
}

  *(void *)a2 = v6;
  *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 136), 8) = v12;
  *(void *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = v4;
  *(void *)(a2 + 40) = v5;
  *(void *)(a2 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v7;
  *(_BYTE *)(a2 + 56) = v19;
}

  __break(1u);
  return result;
}

            __break(1u);
            goto LABEL_26;
          }

  sub_1000B8DE8();
  if (v47 == 4) {
    uint64_t v47 = 0;
  }
  *((_BYTE *)a2 + v12[30]) = sub_10012077C(v47);
LABEL_28:
  int v48 = sub_1000B4050();
  Date.init(timeIntervalSinceReferenceDate:)(v48);
  uint64_t v49 = sub_1000B85C8(0xCu);
  if ((v50 & 1) != 0) {
    sub_100122F70(v12[9]);
  }
  else {
    Date.init(timeIntervalSinceReferenceDate:)(*(double *)&v49);
  }
  sub_1000B3E6C();
  sub_10004DB28((uint64_t)v59, (uint64_t)__src, &qword_1002A9E48);
  if (*((void *)&__src[0] + 1))
  {
    memcpy(v55, __src, sizeof(v55));
    char v56 = __src[0];
    *(_OWORD *)((char *)a2 + v12[18]) = __src[0];
    Swift::Bool v57 = v55[2];
    v58[0] = v55[1];
    *(_OWORD *)((char *)a2 + v12[19]) = v55[2];
    sub_100047A90((uint64_t)&v56);
    sub_100047A90((uint64_t)&v57);
    sub_100047A90((uint64_t)v58);
    sub_1000BB028(v59);
    *(_OWORD *)((char *)a2 + v12[15]) = v58[0];
  }

  else
  {
    char v51 = (uint64_t *)((char *)a2 + v12[18]);
    *char v51 = 5790042LL;
    v51[1] = 0xE300000000000000LL;
    uint64_t v52 = (uint64_t *)((char *)a2 + v12[19]);
    *uint64_t v52 = 0x313233343536LL;
    v52[1] = 0xE600000000000000LL;
    BOOL v53 = (uint64_t *)((char *)a2 + v12[15]);
    *BOOL v53 = 5789784LL;
    v53[1] = 0xE300000000000000LL;
  }

  Swift::Int v54 = (char *)&loc_10012036C + 4 * byte_100201300[sub_1000B594C()];
  __asm { BR              X11 }

  uint64_t v16 = *(void *)(v1 + 96);
  uint64_t v17 = *(void *)(v1 + 104);
  uint64_t v18 = *(void *)(v0 + 96);
  uint64_t v19 = *(void *)(v0 + 104);
  if (v16 != v18 || v17 != v19)
  {
    sub_100048720(v16, v17, v18, v19);
    sub_10013C438();
    if ((v21 & 1) == 0) {
      goto LABEL_24;
    }
  }

  char v22 = *(void *)(v1 + 80);
  char v23 = *(void *)(v1 + 88);
  unint64_t v24 = *(void *)(v0 + 80);
  uint64_t v25 = *(void *)(v0 + 88);
  if (v22 == v24 && v23 == v25) {
    goto LABEL_24;
  }
  sub_10013C34C(v22, v23, v24, v25, 0LL);
}

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

    unint64_t v14 = (v19 - 1) & v19;
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v15) {
    goto LABEL_28;
  }
  uint64_t v19 = *(void *)(v2 + 8 * v20);
  if (v19)
  {
    unint64_t v10 = v20;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v10 >= v15) {
      goto LABEL_28;
    }
    uint64_t v19 = *(void *)(v2 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }

    uint64_t v17 = (v22 - 1) & v22;
  }

  char v23 = v21 + 3;
  if (v23 >= v18)
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v6);
    uint64_t v1 = v26;
    goto LABEL_30;
  }

  char v22 = *(void *)(v10 + 8 * v23);
  if (v22)
  {
    int64_t v13 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v13 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v13 >= v18) {
      goto LABEL_28;
    }
    char v22 = *(void *)(v10 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    int64_t v13 = (v18 - 1) & v18;
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  uint64_t v18 = *(void *)(v2 + 8 * v19);
  if (v18)
  {
    unint64_t v10 = v19;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    uint64_t v18 = *(void *)(v2 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v17 - 1) & v17;
  }

  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v9 = v18;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v17 - 1) & v17;
  }

  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v9 = v18;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_25;
    }
  }

      if (v3 == v23) {
        goto LABEL_26;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_26:
    swift_bridgeObjectRelease(a1);
    sub_1001B10D0(a2);
  }

    uint64_t v12 = (v22 - 1) & v22;
    int64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_1001CBA50(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    sub_10002C010(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    uint64_t v19 = v25[0];
    uint64_t v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    uint64_t result = sub_100034728(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }

  char v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  char v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    uint64_t v9 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    char v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v26 - 1) & v26;
    int64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    char v22 = v20[1];
    char v23 = (void *)(*(void *)(v4 + 48) + v16);
    char *v23 = v19;
    v23[1] = v18;
    unint64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *unint64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }

  BOOL v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  uint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    uint64_t v9 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

uint64_t sub_100054B00(uint64_t result, uint64_t a2, char a3)
{
  if (!a3) {
    return swift_bridgeObjectRelease(a2);
  }
  a2 = result;
  if (a3 == 3 || a3 == 2) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_100054B2C(uint64_t result, uint64_t a2, char a3)
{
  if (!a3) {
    return swift_bridgeObjectRetain(a2);
  }
  a2 = result;
  if (a3 == 3 || a3 == 2) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t _s5ValueOwxx(uint64_t a1)
{
  return sub_100054B00(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s5ValueOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_100054B2C(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s5ValueOwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_100054B2C(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_100054B00(v6, v7, v8);
  return a1;
}

uint64_t _s5ValueOwta(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_100054B00(v4, v5, v6);
  return a1;
}

uint64_t _s5ValueOwet(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 252;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 3) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t _s5ValueOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_100054CC8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *_s5ValueOMa()
{
  return &_s5ValueON;
}

uint64_t sub_100054CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v5 - 192, v5 - 144, v4, a4, 6LL);
}

uint64_t sub_100054CF4()
{
  return sub_10002C010(v0, v1 - 144);
}

uint64_t sub_100054D00()
{
  return sub_100019F7C(v0);
}

uint64_t sub_100054D08()
{
  return sub_10002C010(v1, v0);
}

uint64_t sub_100054D14(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  v8._countAndFlagsBits = a1;
  v8._object = a2;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x3D6469623FLL;
  v9._object = (void *)0xE500000000000000LL;
  String.append(_:)(v9);
  v10._countAndFlagsBits = a3;
  v10._object = a4;
  String.append(_:)(v10);
  return 0x74694B65726F7453LL;
}

uint64_t sub_100054DD0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_1000175B0(&qword_1002ABB98);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OctaneAsset(0LL);
  __chkstk_darwin(v8);
  Swift::String v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100055528(a1);
  uint64_t v11 = sub_1001B1B94(a1);
  if (!v12)
  {
    sub_10001ED94();
    uint64_t v25 = sub_1000556D4();
    uint64_t result = sub_10001ED7C(v25);
    unint64_t v22 = 0LL;
    __int128 v23 = 0uLL;
    *(_OWORD *)(result + 16) = 0u;
    uint64_t v24 = 21LL;
    goto LABEL_5;
  }

  uint64_t v15 = v11;
  uint64_t v16 = v12;
  uint64_t v17 = v13;
  uint64_t v18 = v14;
  sub_100019F58((void *)(v2 + 48), *(void *)(v2 + 72));
  sub_100075EE8(v17, v18);
  uint64_t v2 = v19;
  sub_1000D88E4(v15, v16, (uint64_t)v7);
  swift_release(v2);
  if (sub_10001D158((uint64_t)v7, 1LL, v8) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100055614((uint64_t)v7);
    sub_10001ED94();
    uint64_t v20 = sub_1000556D4();
    uint64_t result = sub_10001ED7C(v20);
    unint64_t v22 = 0LL;
    __int128 v23 = 0uLL;
    *(_OWORD *)(result + 16) = 0u;
    uint64_t v24 = 25LL;
LABEL_5:
    *(void *)(result + 32) = v24;
    *(_WORD *)(result + 40) = v2;
    *(_WORD *)(result + 42) = (_WORD)v10;
    char v26 = 2;
    BOOL v27 = _swiftEmptyArrayStorage;
    __int128 v28 = 0uLL;
    goto LABEL_9;
  }

  sub_100055654((uint64_t)v7, (uint64_t)v10);
  if (qword_1002A8CC0 != -1) {
    swift_once(&qword_1002A8CC0, sub_100056B8C);
  }
  uint64_t v29 = (os_unfair_lock_s *)*((void *)off_1002ABCB0 + 2);
  os_unfair_lock_lock(v29);
  sub_100055044((uint64_t)v30);
  os_unfair_lock_unlock(v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100055698((uint64_t)v10);
  uint64_t result = v30[0];
  BOOL v27 = (void *)v30[1];
  char v26 = v31;
  __int128 v23 = v32;
  __int128 v28 = v33;
  unint64_t v22 = v34 | ((unint64_t)(v35 | (v36 << 16)) << 32);
LABEL_9:
  *(void *)a2 = result;
  *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 136), 8) = v27;
  *(_BYTE *)(a2 + 16) = v26;
  *(_OWORD *)(a2 + 24) = v23;
  *(_OWORD *)(a2 + 40) = v28;
  *(_DWORD *)(a2 + 56) = v22;
  *(_BYTE *)(a2 + 62) = BYTE6(v22);
  *(_WORD *)(a2 + 60) = WORD2(v22);
  return result;
}

__n128 sub_100055044@<Q0>(uint64_t a1@<X8>)
{
  Swift::String v2 = URL.path(percentEncoded:)(0);
  id v3 = objc_allocWithZone(&OBJC_CLASS___NSData);
  id v4 = sub_1000D8FD4(v2._countAndFlagsBits, (uint64_t)v2._object, 0LL);
  uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
  unint64_t v7 = v6;

  uint64_t v8 = sub_10006D9D0();
  unsigned __int8 v10 = sub_1000ACDA4(v8, v9);
  if (v10 == 9)
  {
    sub_10003A9EC(v5, v7);
    unsigned int v11 = HTTPVersion.init(major:minor:)(1LL, 1LL);
    Swift::UInt16 v12 = v11;
    unsigned int v13 = HIWORD(v11);
    uint64_t v14 = type metadata accessor for HTTPResponseHead._Storage();
    uint64_t v15 = swift_allocObject(v14, 44LL, 7LL);
    *(void *)(v15 + 16) = 0LL;
    *(void *)(v15 + 24) = 0LL;
    *(void *)(v15 + 32) = 36LL;
    *(_WORD *)(v15 + 40) = v12;
    *(_WORD *)(v15 + 42) = v13;
    *(void *)a1 = v15;
    *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = _swiftEmptyArrayStorage;
    *(_BYTE *)(a1 + 16) = 2;
    result.n128_u64[0] = 0LL;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(void *)(a1 + 55) = 0LL;
  }

  else
  {
    sub_1000AD338(v10);
    sub_10003AA88(v5, v7);
    sub_1000AD058(v5, v7);
    sub_10003A9EC(v5, v7);
    unsigned int v17 = HTTPVersion.init(major:minor:)(1LL, 1LL);
    Swift::UInt16 v18 = v17;
    unsigned int v19 = HIWORD(v17);
    uint64_t v20 = type metadata accessor for HTTPResponseHead._Storage();
    uint64_t v21 = swift_allocObject(v20, 44LL, 7LL);
    *(void *)(v21 + 16) = 0LL;
    *(void *)(v21 + 24) = 0LL;
    *(void *)(v21 + 32) = 3LL;
    *(_WORD *)(v21 + 40) = v18;
    *(_WORD *)(v21 + 42) = v19;
    *(void *)a1 = v21;
    *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = _swiftEmptyArrayStorage;
    *(_BYTE *)(a1 + 16) = 2;
    __n128 result = v22;
    *(__n128 *)(a1 + 24) = v22;
    *(void *)(a1 + 40) = v23;
    *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v24;
    *(_BYTE *)(a1 + 62) = v27;
    *(_WORD *)(a1 + 60) = v26;
    *(_DWORD *)(a1 + 56) = v25;
  }

  return result;
}

uint64_t type metadata accessor for AssetRoute()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService10AssetRoute);
}

uint64_t *sub_100055528(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[7];
  uint64_t v5 = a1[8];
  uint64_t v6 = a1[9];
  uint64_t v7 = a1[12];
  sub_1000555D0(*a1, a1[1]);
  swift_unknownObjectRetain(v2);
  swift_retain();
  swift_bridgeObjectRetain(v3);
  sub_1000555E4(v4, v5, v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t sub_1000555D0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t sub_1000555E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_bridgeObjectRetain(a2);
    return swift_retain(a3);
  }

  return result;
}

uint64_t sub_100055614(uint64_t a1)
{
  uint64_t v2 = sub_1000175B0(&qword_1002ABB98);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100055654(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OctaneAsset(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100055698(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OctaneAsset(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000556D4()
{
  return type metadata accessor for HTTPResponseHead._Storage();
}

void *sub_1000556E4()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = (void *)v1;
  if (v1 == 1)
  {
    uint64_t v2 = sub_1000A4EA8(0xD000000000000012LL, 0x8000000100219B80LL, 1819112552LL, 0xE400000000000000LL);
    uint64_t v3 = *(void *)(v0 + 128);
    *(void *)(v0 + 12_Block_object_dispose((const void *)(v1 - 136), 8) = v2;
    *(void *)(v0 + 136) = v4;
    swift_bridgeObjectRetain();
    sub_10001E95C(v3);
  }

  sub_10001E9A0(v1);
  return v2;
}

void sub_100055784(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (uint64_t *)v2;
  LODWORD(v2) = a1;
  uint64_t v6 = sub_1001BCBC8();
  sub_10012A314(7368801LL, 0xE300000000000000LL, v6);
  uint64_t v8 = v7;
  unsigned __int8 v10 = v9;
  swift_bridgeObjectRelease();
  if (!v10)
  {
    sub_10001ED94();
    uint64_t v22 = sub_100049C88();
    uint64_t v23 = sub_10001ED7C(v22);
    uint64_t v6 = 0LL;
    uint64_t v14 = 0LL;
    Swift::String v24 = (Swift::String)0LL;
    int v25 = _swiftEmptyArrayStorage;
    uint64_t v26 = 21LL;
LABEL_77:
    *(void *)(v23 + 16) = 0LL;
    *(void *)(v23 + 24) = 0LL;
    *(void *)(v23 + 32) = v26;
    *(_DWORD *)(v23 + 40) = v2;
    *(void *)a2 = v23;
    *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 136), 8) = v25;
    *(_BYTE *)(a2 + 16) = 2;
    *(Swift::String *)(a2 + 24) = v24;
    *(void *)(a2 + 40) = v6;
    *(void *)(a2 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v14;
    *(_BYTE *)(a2 + 62) = BYTE6(v10);
    *(_WORD *)(a2 + 60) = WORD2(v10);
    *(_DWORD *)(a2 + 56) = (_DWORD)v10;
    return;
  }

  uint64_t v92 = v4;
  uint64_t v89 = v4 + 6;
  sub_100019F58(v4 + 6, v4[9]);
  sub_100075EE8(v8, (uint64_t)v10);
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 + 56);
  if ((unint64_t)v13 >> 62)
  {
    if (v13 < 0) {
      uint64_t v6 = *(void *)(v11 + 56);
    }
    else {
      uint64_t v6 = v13 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_10001ED74();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v6);
  }

  else
  {
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    sub_10001ED74();
  }

  uint64_t v78 = a2;
  uint64_t v91 = v8;
  if (v14)
  {
    uint64_t v101 = (uint64_t)_swiftEmptyArrayStorage;
    sub_100032050();
    if (v14 < 0)
    {
      __break(1u);
      goto LABEL_79;
    }

    uint64_t v80 = v10;
    uint64_t v15 = 0LL;
    uint64_t v16 = (void *)v101;
    do
    {
      if ((v13 & 0xC000000000000001LL) != 0)
      {
        uint64_t v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v13);
      }

      else
      {
        uint64_t v17 = *(void *)(v13 + 8 * v15 + 32);
        swift_retain();
      }

      uint64_t v18 = *(void *)(v17 + 16);
      uint64_t v19 = *(void *)(v17 + 24);
      swift_bridgeObjectRetain();
      swift_release(v17);
      uint64_t v101 = (uint64_t)v16;
      unint64_t v20 = v16[2];
      if (v20 >= v16[3] >> 1)
      {
        sub_100032050();
        uint64_t v16 = (void *)v101;
      }

      ++v15;
      void v16[2] = v20 + 1;
      uint64_t v21 = &v16[2 * v20];
      void v21[4] = v18;
      v21[5] = v19;
    }

    while (v14 != v15);
    sub_10001A3F8();
    unsigned __int8 v10 = v80;
    uint64_t v8 = v91;
  }

  else
  {
    sub_10001A3F8();
    uint64_t v16 = _swiftEmptyArrayStorage;
  }

  uint64_t v6 = *sub_100019F58(v92 + 11, v92[14]);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1000D962C((uint64_t)v16, v6, v8, (uint64_t)v10);
  uint64_t v3 = v27;
  swift_bridgeObjectRelease();
  uint64_t v13 = (unint64_t)v3 >> 62;
  if ((unint64_t)v3 >> 62)
  {
    sub_1000356F4();
    uint64_t v6 = sub_100019448();
    sub_100056ADC();
    if (v6 != 1) {
      goto LABEL_30;
    }
    sub_1000356F4();
    if (!sub_100019448())
    {
      sub_100056ADC();
      goto LABEL_30;
    }
  }

  else
  {
    if (*(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10) != 1LL) {
      goto LABEL_30;
    }
    sub_1000356F4();
  }

  uint64_t v6 = v3 & 0xC000000000000001LL;
  sub_100119E64(0LL, (v3 & 0xC000000000000001LL) == 0, v3);
  if ((v3 & 0xC000000000000001LL) == 0)
  {
    id v28 = *(id *)(v3 + 32);
    goto LABEL_21;
  }

LABEL_79:
  id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v3);
LABEL_21:
  uint64_t v29 = v28;
  sub_100056ADC();
  sub_1000B8508(0xFu);
  uint64_t v31 = v30;
  uint64_t v14 = v32;

  if (v14)
  {
    sub_100056ADC();
    uint64_t v33 = sub_1000175B0(&qword_1002A92A8);
    int v25 = (void *)sub_100056B74(v33);
    *((_OWORD *)v25 + Hasher._combine(_:)(v1 & 1) = xmmword_1001F3C00;
    v25[4] = 0x6E6F697461636F4CLL;
    v25[5] = 0xE800000000000000LL;
    uint64_t v101 = 0LL;
    unint64_t v102 = 0xE000000000000000LL;
    unint64_t v2 = (unint64_t)&v101;
    _StringGuts.grow(_:)(24LL);
    swift_bridgeObjectRelease();
    uint64_t v101 = 0x697263736275732FLL;
    unint64_t v102 = 0xEF2F736E6F697470LL;
    v34._countAndFlagsBits = v31;
    v34._object = (void *)v14;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 0x3D7070613FLL;
    v35._object = (void *)0xE500000000000000LL;
    String.append(_:)(v35);
    v36._countAndFlagsBits = v91;
    v36._object = v10;
    String.append(_:)(v36);
    sub_10003561C();
    unint64_t v37 = v102;
    v25[6] = v101;
    v25[7] = v37;
    sub_100056B1C();
    sub_10001ED94();
    uint64_t v38 = sub_100049C88();
    sub_10001ED7C(v38);
    *(double *)&v24._countAndFlagsBits = sub_100056B24();
    uint64_t v26 = 16LL;
LABEL_61:
    a2 = v78;
    goto LABEL_77;
  }

LABEL_30:
  LODWORD(v2) = (_DWORD)v92;
  uint64_t v39 = sub_1000556E4();
  if (!v39)
  {
    sub_100056B1C();
    sub_100056ADC();
    sub_10003561C();
    sub_10001ED94();
    uint64_t v61 = sub_100049C88();
    sub_10001ED7C(v61);
    *(double *)&v24._countAndFlagsBits = sub_100056B24();
    int v25 = _swiftEmptyArrayStorage;
    uint64_t v26 = 49LL;
    goto LABEL_61;
  }

  a2 = v78;
  Swift::Int v76 = v40;
  uint64_t v77 = (uint64_t)v39;
  if (!v13)
  {
    uint64_t v41 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v41) {
      goto LABEL_33;
    }
LABEL_66:
    sub_100056ADC();
    uint64_t v90 = _swiftEmptyArrayStorage;
    uint64_t v83 = _swiftEmptyArrayStorage;
LABEL_67:
    type metadata accessor for AppIconRoute();
    unint64_t v63 = sub_10005A048(v91, v10);
    uint64_t v65 = v64;
    sub_10003561C();
    if (*(void *)(v12 + 24))
    {
      uint64_t v66 = *(void *)(v12 + 16);
      unint64_t v67 = *(void *)(v12 + 24);
    }

    else
    {
      unint64_t v67 = 0xE800000000000000LL;
      uint64_t v66 = 0x656D614E20707041LL;
    }

    if (v90[2])
    {
      swift_bridgeObjectRetain();
    }

    else
    {
      swift_bridgeObjectRetain();
      sub_10003561C();
      uint64_t v90 = 0LL;
    }

    if (v83[2])
    {
      uint64_t v68 = v83;
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v68 = 0LL;
    }

    int v97 = &unk_100279438;
    uint64_t v69 = (void *)sub_100056B74((uint64_t)&unk_1002792A0);
    v95._countAndFlagsBits = (uint64_t)v69;
    v69[2] = v63;
    v69[3] = v65;
    v69[4] = v66;
    v69[5] = v67;
    v69[6] = v90;
    v69[7] = v68;
    uint64_t v70 = sub_1000A5464((uint64_t)&v95, v77, v76);
    unint64_t v72 = v71;
    sub_10001A3F8();
    sub_100019F7C(&v95);
    sub_1000ACB64(v70, v72, 1u, (uint64_t)&v95);
    Swift::String v93 = v95;
    uint64_t v6 = v96;
    uint64_t v14 = (uint64_t)v97;
    unint64_t v2 = v98;
    uint64_t v73 = v99;
    uint64_t v74 = v100;
    sub_100056B1C();
    unsigned __int8 v10 = (void *)(v2 | (v73 << 32) | (v74 << 48));
    sub_10001ED94();
    uint64_t v75 = sub_100049C88();
    uint64_t v23 = sub_10001ED7C(v75);
    Swift::String v24 = v93;
    int v25 = _swiftEmptyArrayStorage;
    uint64_t v26 = 3LL;
    goto LABEL_77;
  }

  if (v3 < 0) {
    uint64_t v62 = v3;
  }
  else {
    uint64_t v62 = v3 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_1000356F4();
  uint64_t v41 = _CocoaArrayWrapper.endIndex.getter(v62);
  sub_100056ADC();
  if (!v41) {
    goto LABEL_66;
  }
LABEL_33:
  if (v41 >= 1)
  {
    uint64_t v42 = 0LL;
    uint64_t v90 = _swiftEmptyArrayStorage;
    uint64_t v82 = v41;
    uint64_t v83 = _swiftEmptyArrayStorage;
    uint64_t v79 = v12;
    uint64_t v81 = v10;
    do
    {
      if ((v3 & 0xC000000000000001LL) != 0) {
        id v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v42, v3);
      }
      else {
        id v43 = *(id *)(v3 + 8 * v42 + 32);
      }
      uint64_t v44 = v43;
      sub_1000B8508(0xFu);
      if (v46 && (sub_1000D8854(v45, v46), int v48 = v47, swift_bridgeObjectRelease(), v48))
      {
        sub_100019F58(v89, v92[9]);
        sub_10007608C();
        uint64_t v50 = v49;
        sub_100055F14(v44, v12, v49, v48, (uint64_t)v94);
        swift_release(v50);
        sub_100056518((uint64_t)v94, (uint64_t)&v101);
        unint64_t v51 = v102;
        if (v102)
        {
          uint64_t v52 = v101;
          uint64_t v84 = v103;
          uint64_t v85 = v104;
          uint64_t v53 = v106;
          uint64_t v88 = v107;
          uint64_t v86 = v105;
          uint64_t v87 = v108;
          if ((v109 & 1) != 0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native(v83) & 1) != 0)
            {
              Swift::Int v54 = v83;
            }

            else
            {
              sub_100056AF8();
              Swift::Int v54 = v57;
            }

            unint64_t v55 = v54[2];
            if (v55 >= v54[3] >> 1)
            {
              sub_100056AE4();
              Swift::Int v54 = v58;
            }

            v54[2] = v55 + 1;
            uint64_t v83 = v54;
          }

          else
          {
            if ((swift_isUniquelyReferenced_nonNull_native(v90) & 1) != 0)
            {
              Swift::Int v54 = v90;
            }

            else
            {
              sub_100056AF8();
              Swift::Int v54 = v59;
            }

            unint64_t v55 = v54[2];
            if (v55 >= v54[3] >> 1)
            {
              sub_100056AE4();
              Swift::Int v54 = v60;
            }

            v54[2] = v55 + 1;
            uint64_t v90 = v54;
          }

          char v56 = &v54[8 * v55];
          v56[4] = v52;
          v56[5] = v51;
          v56[6] = v84;
          v56[7] = v85;
          v56[8] = v86;
          v56[9] = v53;
          v56[10] = v88;
          v56[11] = v87;

          sub_10002A7BC();
          uint64_t v12 = v79;
          unsigned __int8 v10 = v81;
        }

        else
        {
          sub_10002A7BC();
        }

        uint64_t v41 = v82;
      }

      else
      {
      }

      ++v42;
    }

    while (v41 != v42);
    sub_100056ADC();
    a2 = v78;
    goto LABEL_67;
  }

  __break(1u);
}

          __break(1u);
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }

        goto LABEL_28;
      }

      goto LABEL_26;
    }

    goto LABEL_24;
  }

  sub_1000639EC();
  uint64_t v15 = sub_100063980();
  if (__OFADD__(a1, v15))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v16 = *(unsigned int *)(v5 + 12);
  if (__OFSUB__(v16, v6))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  sub_100063A3C(v15, a1 + v15, v16 - v6);
  if (!v6)
  {
    uint64_t v17 = sub_100063980();
    uint64_t v6 = v14 - v17;
    if (!__OFSUB__(v14, v17))
    {
      uint64_t v18 = *(unsigned int *)(v5 + 12);
      if (!__OFSUB__(v18, v6))
      {
        ByteBuffer.moveWriterIndex(to:)(v18 - v6);
        *(void *)(v5 + 24) = sub_100062504(v6, v7, v8);
        *(void *)(v5 + 32) = v19;
        return;
      }

      goto LABEL_29;
    }

    goto LABEL_27;
  }

    swift_release(v20);
    uint64_t *v4 = v5;
    return;
  }

  uint64_t v17 = *(void *)(v5 + 16);
  uint64_t v18 = __OFADD__(v17, v16);
  uint64_t v19 = v17 + v16;
  if (!v18)
  {
    *(void *)(v5 + 16) = v19;
    goto LABEL_9;
  }

  sub_100034FD0();
  sub_100035144();
LABEL_32:
  uint64_t result = sub_100035124(v13, v14, v15, v16, v17, v18, v19);
  __break(1u);
  return result;
}

            __break(1u);
LABEL_31:
            __break(1u);
            goto LABEL_32;
          }

      sub_100029DF4(v30);
      goto LABEL_31;
    }

    Swift::String v35 = sub_100156580(v27, (uint64_t)v10, a2, (uint64_t)&type metadata for ChannelOptions.Types.ReceivePacketInfo);
    if (!(_DWORD)v35)
    {
      sub_1000275B8(v5, a2, v4);
      goto LABEL_19;
    }

    Swift::String v36 = sub_1000AAA30(v35);
    sub_100029DF4(v37);
    if ((~v36 & 0xF000000000000007LL) == 0) {
      goto LABEL_31;
    }
    uint64_t v30 = v36;
    if (v36 >> 62)
    {
      if (v36 >> 62 != 1) {
        goto LABEL_30;
      }
      sub_100029DF4(v36);
      uint64_t v38 = *(void *)(v2 + 32);
      if (qword_1002A8DA0 != -1) {
        swift_once(&qword_1002A8DA0, sub_1001863AC);
      }
      uint64_t v39 = dword_1002EB9EC;
      if (sub_1000CCD30())
      {
        uint64_t v32 = *(unsigned int *)(v38 + 16);
        uint64_t v33 = 41LL;
LABEL_38:
        Swift::String v34 = v39;
        goto LABEL_39;
      }
    }

    else
    {
      sub_100029DF4(v36);
      id v43 = *(void *)(v2 + 32);
      if (qword_1002A8D98 != -1) {
        swift_once(&qword_1002A8D98, sub_100186388);
      }
      uint64_t v39 = dword_1002EB9E8;
      if (sub_1000CCD30())
      {
        uint64_t v32 = *(unsigned int *)(v43 + 16);
        uint64_t v33 = 0LL;
        goto LABEL_38;
      }
    }

    swift_bridgeObjectRelease(v17);
    uint64_t result = v15;
    uint64_t v3 = v34;
    if (v7) {
      goto LABEL_7;
    }
LABEL_8:
    uint64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
      goto LABEL_44;
    }

    if (v11 >= v33) {
      return 1LL;
    }
    uint64_t v12 = *(void *)(v32 + 8 * v11);
    uint64_t v13 = v3 + 1;
    if (!v12)
    {
      uint64_t v13 = v3 + 2;
      if (v3 + 2 >= v33) {
        return 1LL;
      }
      uint64_t v12 = *(void *)(v32 + 8 * v13);
      if (!v12)
      {
        uint64_t v13 = v3 + 3;
        if (v3 + 3 >= v33) {
          return 1LL;
        }
        uint64_t v12 = *(void *)(v32 + 8 * v13);
        if (!v12)
        {
          uint64_t v13 = v3 + 4;
          if (v3 + 4 >= v33) {
            return 1LL;
          }
          uint64_t v12 = *(void *)(v32 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }

  unint64_t v20 = 0LL;
LABEL_31:
  if (!a2) {
    goto LABEL_49;
  }
  a6(a2, v20);
  if (v7)
  {
    for (; v20; --v20)
    {
      uint64_t v33 = *a4++;
      swift_unknownObjectRelease(v33);
    }
  }

  else if (v20)
  {
    Swift::String v34 = v20;
    do
    {
      Swift::String v35 = *a4++;
      swift_unknownObjectRelease(v35);
      --v34;
    }

    while (v34);
  }

  return v20;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_100055F14@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v87 = a2;
  uint64_t v9 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v77 - v13;
  uint64_t v15 = type metadata accessor for Date(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v86 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v77 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v77 - v22;
  id v88 = a1;
  uint64_t v24 = sub_1000B85C8(4u);
  if ((v25 & 1) != 0)
  {
    sub_100056B38((uint64_t)v14, 1LL);
    goto LABEL_18;
  }

  Date.init(timeIntervalSinceReferenceDate:)(*(double *)&v24);
  sub_100056B38((uint64_t)v14, 0LL);
  if (sub_10001D158((uint64_t)v14, 1LL, v15) == 1)
  {
LABEL_18:
    uint64_t result = sub_100049980((uint64_t)v14);
    goto LABEL_19;
  }

  uint64_t v26 = *(void (**)(void))(v16 + 32);
  uint64_t v85 = v23;
  uint64_t v78 = v26;
  ((void (*)(char *, char *, uint64_t))v26)(v23, v14, v15);
  unint64_t v27 = a4[7];
  uint64_t v81 = a3;
  uint64_t v82 = a4;
  uint64_t v83 = v15;
  uint64_t v84 = v16;
  uint64_t v79 = v21;
  uint64_t v80 = v12;
  if (v27 >> 62)
  {
LABEL_41:
    sub_100056B80();
    id v76 = v88;
    uint64_t v28 = sub_100019448();
    if (v28) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }

  uint64_t v28 = *(void *)((v27 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  sub_100056B80();
  id v29 = v88;
  if (!v28)
  {
LABEL_16:
    sub_100056B6C();
    swift_bridgeObjectRelease_n(v27, 2LL);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v84 + 8))(v85, v83);
LABEL_19:
    uint64_t v40 = 0LL;
    uint64_t v41 = 0LL;
    uint64_t v42 = 0LL;
    uint64_t v43 = 0LL;
    uint64_t v44 = 0LL;
    uint64_t v45 = 0LL;
    unint64_t v46 = 0LL;
    unint64_t v47 = 0LL;
    char v48 = 0;
    goto LABEL_20;
  }

LABEL_5:
  uint64_t v30 = 4LL;
  while (1)
  {
    if ((v27 & 0xC000000000000001LL) != 0)
    {
      uint64_t v31 = specialized _ArrayBuffer._getElementSlowPath(_:)(v30 - 4, v27);
    }

    else
    {
      uint64_t v31 = *(void *)(v27 + 8 * v30);
      swift_retain();
    }

    uint64_t v32 = v30 - 3;
    if (__OFADD__(v30 - 4, 1LL))
    {
      __break(1u);
      goto LABEL_41;
    }

    uint64_t v34 = *(void *)(v31 + 80);
    uint64_t v33 = *(void *)(v31 + 88);
    sub_10001ED74();
    uint64_t v35 = sub_1000B3DDC();
    if (v34 == v35 && v33 == v36)
    {
      sub_100056B6C();
      swift_bridgeObjectRelease();
      sub_10001A3F8();
      goto LABEL_23;
    }

    char v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v33, v35, v36, 0LL);
    sub_10001A3F8();
    swift_bridgeObjectRelease();
    if ((v38 & 1) != 0) {
      break;
    }
    sub_10002A7BC();
    ++v30;
    if (v32 == v28) {
      goto LABEL_16;
    }
  }

  sub_100056B6C();
LABEL_23:
  sub_10001A3F8();
  swift_bridgeObjectRelease();
  uint64_t v49 = v82;
  uint64_t v50 = v83;
  if (qword_1002A8CA8 != -1) {
    swift_once(&qword_1002A8CA8, sub_100043918);
  }
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v52 = sub_100056B0C();

  uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
  unint64_t v55 = v54;

  uint64_t v56 = sub_1000B9428();
  if (!v56)
  {
    uint64_t v59 = sub_1000B85C8(3u);
    if ((v60 & 1) != 0)
    {
      uint64_t v61 = (uint64_t)v80;
      sub_100056B44((uint64_t)v80, 1LL);
    }

    else
    {
      uint64_t v61 = (uint64_t)v80;
      Date.init(timeIntervalSinceReferenceDate:)(*(double *)&v59);
      sub_100056B44(v61, 0LL);
      if (sub_10001D158(v61, 1LL, v50) != 1)
      {
        sub_10001A3F8();
        v78();
        unint64_t v89 = 0x64656C65636E6143LL;
        unint64_t v90 = 0xE900000000000020LL;
        Class v62 = Date._bridgeToObjectiveC()().super.isa;
        id v63 = sub_100056B0C();

        uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
        uint64_t v66 = v65;

        v67._countAndFlagsBits = v64;
        v67._object = v66;
        String.append(_:)(v67);
        swift_bridgeObjectRelease();
        unint64_t v46 = v89;
        unint64_t v47 = v90;
        sub_100056B50((uint64_t)v79, *(uint64_t (**)(uint64_t, uint64_t))(v84 + 8));
        goto LABEL_35;
      }
    }

    uint64_t v68 = sub_100049980(v61);
    uint64_t v69 = (uint64_t)v86;
    Date.init()(v68);
    char v70 = static Date.> infix(_:_:)(v85, v69);
    sub_100056B50(v69, *(uint64_t (**)(uint64_t, uint64_t))(v84 + 8));
    if ((v70 & 1) != 0)
    {
      uint64_t v57 = sub_100056B58(0x2073657269707845LL);
      goto LABEL_27;
    }

    v71._countAndFlagsBits = sub_100056B58(0x2064657269707845LL);
    v71._object = v55;
    String.append(_:)(v71);
    sub_10001A3F8();
    unint64_t v46 = v89;
    unint64_t v47 = v90;
LABEL_35:
    char v48 = 1;
    goto LABEL_36;
  }

  swift_release(v56);
  unint64_t v89 = 0LL;
  unint64_t v90 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(21LL);
  swift_bridgeObjectRelease();
  unint64_t v89 = 0xD000000000000013LL;
  unint64_t v90 = 0x8000000100219B60LL;
  uint64_t v57 = v53;
LABEL_27:
  unint64_t v58 = v55;
  String.append(_:)(*(Swift::String *)&v57);
  sub_10001A3F8();
  char v48 = 0;
  unint64_t v46 = v89;
  unint64_t v47 = v90;
LABEL_36:
  uint64_t v72 = sub_10001ED74();
  uint64_t v73 = sub_1000CC010(v72);
  sub_10001A3F8();
  sub_100056B50((uint64_t)v85, *(uint64_t (**)(uint64_t, uint64_t))(v84 + 8));
  if (v73)
  {
    uint64_t v44 = *(void *)(v73 + 32);
    uint64_t v45 = *(void *)(v73 + 40);
    sub_10001ED74();
    sub_10002A7BC();
    uint64_t v74 = v73;
  }

  else
  {
    uint64_t v44 = sub_1001BA868();
    uint64_t v45 = v75;
    uint64_t v74 = v31;
  }

  swift_release(v74);
  uint64_t v40 = v49[2];
  uint64_t v41 = v49[3];
  uint64_t v42 = v49[5];
  uint64_t v43 = v49[6];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
LABEL_20:
  *(void *)a5 = v40;
  *(void *)(a5 + _Block_object_dispose((const void *)(v1 - 136), 8) = v41;
  *(void *)(a5 + 16) = v42;
  *(void *)(a5 + 24) = v43;
  *(void *)(a5 + 32) = v44;
  *(void *)(a5 + 40) = v45;
  *(void *)(a5 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v46;
  *(void *)(a5 + 56) = v47;
  *(_BYTE *)(a5 + 64) = v48;
  return result;
}

  *a3 = result;
  a3[1] = v5;
  return result;
}

  uint64_t v4 = 7LL;
  if (((v2 >> 60) & ((v1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v4 = 11LL;
  }
  uint64_t v5 = String.index(before:)(v4 | (v3 << 16));
  String.remove(at:)(v5);
}

uint64_t type metadata accessor for SubscriptionsListUIRoute()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService24SubscriptionsListUIRoute);
}

uint64_t sub_1000564DC()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100056518(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002ABCA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100056560(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = 1;
  }
  else {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000565AC + 4 * byte_1001F7295[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000565E0 + 4 * asc_1001F7290[v4]))();
}

uint64_t sub_1000565E0(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_1000565E8(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x1000565F0LL);
  }
  return result;
}

uint64_t sub_1000565FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x100056604LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100056608(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100056610(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

void type metadata accessor for SubscriptionsListUIRoute.Section()
{
}

uint64_t destroy for ConfirmPurchaseEngagementUIRoute.ViewProperties(void *a1)
{
  return swift_bridgeObjectRelease(a1[7]);
}

void *initializeWithCopy for ConfirmPurchaseEngagementUIRoute.ViewProperties(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

void *assignWithCopy for ConfirmPurchaseEngagementUIRoute.ViewProperties(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

void *assignWithTake for ConfirmPurchaseEngagementUIRoute.ViewProperties(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[6] = a2[6];
  a1[7] = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmPurchaseEngagementUIRoute.ViewProperties(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfirmPurchaseEngagementUIRoute.ViewProperties( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 64) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for SubscriptionsListUIRoute.ViewProperties.Group()
{
}

uint64_t sub_100056870(void *a1)
{
  return swift_bridgeObjectRelease(a1[5]);
}

void *sub_1000568A8(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[4];
  uint64_t v6 = a2[5];
  a1[4] = v5;
  a1[5] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

void *sub_100056904(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a1[4];
  uint64_t v9 = a2[4];
  a1[4] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  uint64_t v10 = a1[5];
  uint64_t v11 = a2[5];
  a1[5] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  return a1;
}

void *sub_1000569A0(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = a1[1];
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  uint64_t v6 = a1[4];
  *(_OWORD *)(a1 + sub_100019F7C(v0 + 3) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a1[5];
  a1[5] = *(void *)(a2 + 40);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for OctaneKeyPair(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OctaneKeyPair(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 4_Block_object_dispose((const void *)(v1 - 136), 8) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 4_Block_object_dispose((const void *)(v1 - 136), 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for SubscriptionsListUIRoute.ViewProperties()
{
}

unint64_t sub_100056AA0()
{
  unint64_t result = qword_1002ABCA8;
  if (!qword_1002ABCA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F7348, &unk_100279338);
    atomic_store(result, (unint64_t *)&qword_1002ABCA8);
  }

  return result;
}

uint64_t sub_100056ADC()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_100056AE4()
{
}

void sub_100056AF8()
{
}

id sub_100056B0C()
{
  return objc_msgSend(v1, *(SEL *)(v2 + 3640), v0);
}

uint64_t sub_100056B1C()
{
  return swift_release(v0);
}

double sub_100056B24()
{
  return 0.0;
}

uint64_t sub_100056B38(uint64_t a1, uint64_t a2)
{
  return sub_10001762C(a1, a2, 1LL, v2);
}

uint64_t sub_100056B44(uint64_t a1, uint64_t a2)
{
  return sub_10001762C(a1, a2, 1LL, v2);
}

uint64_t sub_100056B50@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_100056B58@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 96) = a1;
  *(void *)(v2 - 8_Block_object_dispose((const void *)(v1 - 136), 8) = 0xE800000000000000LL;
  return v1;
}

void sub_100056B6C()
{
}

uint64_t sub_100056B74(uint64_t a1)
{
  return swift_allocObject(a1, 64LL, 7LL);
}

uint64_t sub_100056B80()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

_DWORD *sub_100056B8C()
{
  uint64_t v0 = type metadata accessor for UnfairLock();
  uint64_t v1 = swift_allocObject(v0, 24LL, 7LL);
  unint64_t result = (_DWORD *)swift_slowAlloc(4LL, -1LL);
  *(void *)(v1 + 16) = result;
  *unint64_t result = 0;
  off_1002ABCB0 = (_UNKNOWN *)v1;
  return result;
}

unint64_t sub_100056BD8(unint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return 0LL;
  }
  uint64_t v6 = result;
  if ((a2 & 0x1000000000000000LL) == 0)
  {
    if ((a2 & 0x2000000000000000LL) == 0)
    {
      if ((result & 0x1000000000000000LL) != 0) {
        uint64_t v7 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result);
      }
      unint64_t v8 = (unint64_t)sub_100161AD8(v7, v4);
      LOBYTE(EventLoop.assertInEventLoop(file:line:)(v2, v3, v4, 1241LL, v5, v6) = v9 & 1;
      goto LABEL_49;
    }

    if (result == 43)
    {
      if (!v3) {
        goto LABEL_63;
      }
      if (v3 == 1) {
        goto LABEL_33;
      }
      sub_10005768C();
      if (!v13 && v12) {
        goto LABEL_33;
      }
      unint64_t v8 = v16;
      if (v15 != 2)
      {
        sub_10005768C();
        if (!v13 && v12) {
          goto LABEL_33;
        }
        unint64_t v8 = 10LL * v8 + v18;
        if (v17 != 3)
        {
          while (1)
          {
            sub_100024EAC();
            if (!v13 && v12) {
              goto LABEL_33;
            }
            if (!is_mul_ok(v8, v19)) {
              goto LABEL_33;
            }
            BOOL v12 = __CFADD__(10 * v8, v20);
            unint64_t v8 = 10 * v8 + v20;
            if (v12) {
              goto LABEL_33;
            }
            sub_10005769C();
            if (v13) {
              goto LABEL_49;
            }
          }
        }
      }
    }

    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1)
          {
            sub_10005768C();
            if (v13 || !v12)
            {
              unint64_t v8 = 0LL;
              BOOL v12 = v11 == 0LL;
              unint64_t v14 = -(uint64_t)v11;
              if (!v12) {
                goto LABEL_34;
              }
              if (v10 == 2)
              {
                LOBYTE(EventLoop.assertInEventLoop(file:line:)(v2, v3, v4, 1241LL, v5, v6) = 0;
                unint64_t v8 = v14;
                goto LABEL_49;
              }

              unsigned __int8 v25 = BYTE2(v6) - 48;
              if ((BYTE2(v6) - 48) <= 9u && is_mul_ok(v14, 0xAuLL))
              {
                unint64_t v26 = 10 * v14;
                unint64_t v8 = v26 - v25;
                if (v26 >= v25)
                {
                  if (v10 == 3) {
                    goto LABEL_48;
                  }
                  while (1)
                  {
                    sub_100024EAC();
                    if (!v13 && v12) {
                      break;
                    }
                    if (!is_mul_ok(v8, v27)) {
                      break;
                    }
                    BOOL v12 = 10 * v8 >= v28;
                    unint64_t v8 = 10 * v8 - v28;
                    if (!v12) {
                      break;
                    }
                    sub_10005769C();
                    if (v13) {
                      goto LABEL_49;
                    }
                  }
                }
              }
            }
          }

LABEL_48:
    LOBYTE(EventLoop.assertInEventLoop(file:line:)(v2, v3, v4, 1241LL, v5, v6) = 0;
    goto LABEL_49;
  }

  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100161B20(v6, a2, 10LL);
  LOBYTE(EventLoop.assertInEventLoop(file:line:)(v2, v3, v4, 1241LL, v5, v6) = v29;
  swift_bridgeObjectRelease();
LABEL_49:
  if ((v6 & 1) != 0) {
    return 0LL;
  }
  else {
    return v8;
  }
}

      uint64_t v40 = (v46 - 1) & v46;
      uint64_t v44 = __clz(__rbit64(v46)) + (v42 << 6);
LABEL_49:
      char v48 = (uint64_t *)(*(void *)(v36 + 48) + 16 * v44);
      uint64_t v2 = *v48;
      uint64_t v49 = v48[1];
      uint64_t v50 = qword_1002A8CF8;
      sub_100077D1C();
      if (v50 != -1) {
        swift_once(&qword_1002A8CF8, sub_10010EF80);
      }
      sub_10010F5E4(v2, v49);
      sub_10001A420();
      if (v40) {
        goto LABEL_34;
      }
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_100056E7C(uint64_t a1, unint64_t a2)
{
  if (a1 == 25705 && a2 == 0xE200000000000000LL)
  {
    unint64_t v5 = 0xE200000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705LL, 0xE200000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6E6F73616572LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    return 1LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F73616572LL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_100056F48(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x6E6F73616572LL;
  }
  else {
    return 25705LL;
  }
}

uint64_t sub_100056F70(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v18 = a4;
  uint64_t v8 = sub_1000175B0(&qword_1002ABCD0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unsigned __int8 v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100019F58(a1, v12);
  unint64_t v14 = sub_10005744C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for RefundRequestRequest.CodingKeys,  &type metadata for RefundRequestRequest.CodingKeys,  v14,  v12,  v13);
  char v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v21, v8);
  if (!v4)
  {
    char v20 = v18 & 1;
    char v19 = 1;
    unint64_t v15 = sub_1000574C4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v8, &unk_10027FD78, v15);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1000570B0(void *a1)
{
  uint64_t v3 = sub_1000175B0(&qword_1002ABCB8);
  __chkstk_darwin(v3);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100019F58(a1, v4);
  unint64_t v6 = sub_10005744C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for RefundRequestRequest.CodingKeys,  &type metadata for RefundRequestRequest.CodingKeys,  v6,  v4,  v5);
  if (v1)
  {
    sub_100019F7C(a1);
  }

  else
  {
    char v9 = 0;
    uint64_t v5 = KeyedDecodingContainer.decode(_:forKey:)(&v9, v3);
    char v8 = 1;
    sub_100057488();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&unk_10027FD78, &v8, v3, &unk_10027FD78);
    sub_10001DBBC();
    sub_100019F7C(a1);
    sub_10001DC10();
  }

  return v5;
}

uint64_t sub_10005722C()
{
  return sub_100056F48(*v0);
}

uint64_t sub_100057234@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100056E7C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100057258(uint64_t a1)
{
  unint64_t v2 = sub_10005744C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100057280(uint64_t a1)
{
  unint64_t v2 = sub_10005744C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000572A8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000570B0(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 136), 8) = v5;
    *(_BYTE *)(a2 + 16) = v6 & 1;
  }

  return result;
}

uint64_t sub_1000572D8(void *a1)
{
  return sub_100056F70(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_1000572F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for RefundRequestRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for RefundRequestRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for RefundRequestRequest(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 17))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RefundRequestRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RefundRequestRequest()
{
  return &type metadata for RefundRequestRequest;
}

unint64_t sub_10005744C()
{
  unint64_t result = qword_1002ABCC0;
  if (!qword_1002ABCC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F74CC, &type metadata for RefundRequestRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABCC0);
  }

  return result;
}

unint64_t sub_100057488()
{
  unint64_t result = qword_1002ABCC8;
  if (!qword_1002ABCC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001FCDF4, &unk_10027FD78);
    atomic_store(result, (unint64_t *)&qword_1002ABCC8);
  }

  return result;
}

unint64_t sub_1000574C4()
{
  unint64_t result = qword_1002ABCD8;
  if (!qword_1002ABCD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001FCDCC, &unk_10027FD78);
    atomic_store(result, (unint64_t *)&qword_1002ABCD8);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for RefundRequestRequest.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = 1;
  }
  else {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10005754C + 4 * byte_1001F7375[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100057580 + 4 * byte_1001F7370[v4]))();
}

uint64_t sub_100057580(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100057588(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x100057590LL);
  }
  return result;
}

uint64_t sub_10005759C(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000575A4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000575A8(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_1000575B0(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RefundRequestRequest.CodingKeys()
{
  return &type metadata for RefundRequestRequest.CodingKeys;
}

unint64_t sub_1000575D0()
{
  unint64_t result = qword_1002ABCE0;
  if (!qword_1002ABCE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F74A4, &type metadata for RefundRequestRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABCE0);
  }

  return result;
}

unint64_t sub_100057610()
{
  unint64_t result = qword_1002ABCE8;
  if (!qword_1002ABCE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F7414, &type metadata for RefundRequestRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABCE8);
  }

  return result;
}

unint64_t sub_100057650()
{
  unint64_t result = qword_1002ABCF0;
  if (!qword_1002ABCF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F743C, &type metadata for RefundRequestRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABCF0);
  }

  return result;
}

  ;
}

  ;
}

void sub_1000576AC(uint64_t a1)
{
  __int16 v3 = v1;
  sub_10012A314(0x444970756F7267LL, 0xE700000000000000LL, *(void *)(a1 + 96));
  if (!v5) {
    goto LABEL_5;
  }
  uint64_t v6 = v4;
  uint64_t v7 = v5;
  uint64_t v8 = sub_1001BCBC8();
  __int16 v2 = v8;
  sub_10012A314(7368801LL, 0xE300000000000000LL, v8);
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  if (!v12)
  {
    sub_100023EEC();
LABEL_5:
    sub_10001ED94();
    uint64_t v14 = sub_100058954();
    uint64_t v15 = sub_10001ED7C(v14);
    v32.n128_f64[0] = sub_100058A0C(v15);
    goto LABEL_6;
  }

  __int16 v3 = 0;
  sub_10005783C(v6, v7, v10, v12, v33);
  sub_100023EEC();
  uint64_t v13 = swift_bridgeObjectRelease();
  sub_100058A50(v13, v16, v17, v18, v19);
  sub_10001ED94();
  uint64_t v20 = sub_100058954();
  uint64_t v21 = sub_10001ED7C(v20);
  __n128 v32 = sub_100058A64(v21, v22, v23, v24, v25, v26, v27, v28, v29);
LABEL_6:
  *(void *)(v30 + 32) = v31;
  *(_WORD *)(v30 + 40) = v3;
  *(_WORD *)(v30 + 42) = v2;
  sub_100058978((uint64_t)_swiftEmptyArrayStorage, v32);
  sub_1000589C4();
}

void sub_10005783C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6 = v5;
  unsigned int v127 = a5;
  uint64_t v125 = type metadata accessor for DateComponents(0LL);
  uint64_t v124 = *(void *)(v125 - 8);
  __chkstk_darwin(v125);
  uint64_t v123 = (char *)&v115 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v115 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v138 = type metadata accessor for Date(0LL);
  uint64_t v129 = *(void *)(v138 - 8);
  uint64_t v15 = __chkstk_darwin(v138);
  uint64_t v126 = (char *)&v115 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v130 = (char *)&v115 - v17;
  uint64_t v18 = sub_100019F58((void *)(v5 + 88), *(void *)(v5 + 112));
  uint64_t v19 = sub_1000175B0(&qword_1002A9098);
  uint64_t inited = swift_initStackObject(v19, v136);
  *(_OWORD *)(inited + 16) = xmmword_1001F3C00;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  uint64_t v21 = *v18;
  swift_retain();
  sub_100019320();
  swift_bridgeObjectRetain();
  uint64_t v128 = a3;
  sub_1000D962C(inited, v21, a3, (uint64_t)a4);
  uint64_t v23 = v22;
  swift_setDeallocating(inited);
  sub_1001B7630();
  if (!((unint64_t)v23 >> 62))
  {
    if (*(void *)((v23 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_3;
    }
LABEL_39:
    sub_100024E84();
    unint64_t v112 = sub_10001FD38();
    uint64_t v113 = sub_1000252D0((uint64_t)&type metadata for HTTPResponseStatus, v112);
    sub_100058964(v113, v114);
    return;
  }

  if (v23 < 0) {
    uint64_t v110 = v23;
  }
  else {
    uint64_t v110 = v23 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t v111 = _CocoaArrayWrapper.endIndex.getter(v110);
  sub_100024E84();
  if (!v111) {
    goto LABEL_39;
  }
LABEL_3:
  sub_100119E64(0LL, (v23 & 0xC000000000000001LL) == 0, v23);
  if ((v23 & 0xC000000000000001LL) != 0) {
    id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v23);
  }
  else {
    id v24 = *(id *)(v23 + 32);
  }
  uint64_t v25 = v24;
  sub_100024E84();
  uint64_t v26 = sub_1000B85C8(4u);
  if ((v27 & 1) != 0)
  {
    sub_10001762C((uint64_t)v14, 1LL, 1LL, v138);
    goto LABEL_13;
  }

  Date.init(timeIntervalSinceReferenceDate:)(*(double *)&v26);
  uint64_t v28 = v138;
  sub_10001762C((uint64_t)v14, 0LL, 1LL, v138);
  if (sub_10001D158((uint64_t)v14, 1LL, v28) == 1)
  {
LABEL_13:
    sub_100049980((uint64_t)v14);
    unint64_t v51 = sub_10001FD38();
    uint64_t v52 = sub_1000252D0((uint64_t)&type metadata for HTTPResponseStatus, v51);
    sub_100058964(v52, v53);

    return;
  }

  uint64_t v122 = a4;
  (*(void (**)(char *, char *, uint64_t))(v129 + 32))(v130, v14, v28);
  uint64_t v121 = (void *)(v6 + 48);
  sub_100023BAC(v6 + 48, (uint64_t)&v132);
  sub_100019F58(&v132, v135);
  sub_100058A5C();
  if (!v30) {
    uint64_t v29 = sub_1000B3DDC();
  }
  uint64_t v31 = v29;
  uint64_t v32 = v30;
  sub_100075EE8(v128, (uint64_t)v122);
  uint64_t v34 = v33;
  uint64_t v35 = sub_1000D868C(v31, v32);
  sub_100024E84();
  swift_release(v34);
  if (v35)
  {
    sub_100019F7C(&v132);
    uint64_t v36 = v121;
    sub_100019F58(v121, *(void *)(v6 + 72));
    sub_10007608C();
    uint64_t v38 = v37;
    sub_100019F58(v36, *(void *)(v6 + 72));
    sub_100076700();
    uint64_t v40 = *(void *)(v35 + 16);
    uint64_t v39 = *(void *)(v35 + 24);
    swift_bridgeObjectRetain();
    uint64_t v120 = v38;
    uint64_t v119 = sub_100043978(v40, v39, (uint64_t)v137, v38);
    uint64_t v118 = v41;
    sub_10001B4DC(v137);
    swift_bridgeObjectRelease();
    uint64_t v42 = *(void *)(v35 + 176);
    uint64_t v121 = (void *)v35;
    LOBYTE(v39) = *(_BYTE *)(v35 + 184);
    id v43 = [objc_allocWithZone(NSDateComponentsFormatter) init];
    [v43 setUnitsStyle:3];
    [v43 setAllowedUnits:4124];
    uint64_t v44 = v123;
    sub_1001BE220(v42, v39);
    Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v124 + 8))(v44, v125);
    id v46 = [v43 stringFromDateComponents:isa];

    uint64_t v47 = v138;
    if (v46)
    {
      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      unint64_t v50 = v49;
    }

    else
    {
      uint64_t v48 = 0LL;
      unint64_t v50 = 0xE000000000000000LL;
    }

    if (v42 == 1)
    {
      uint64_t v132 = v48;
      uint64_t v133 = (void *)v50;
      v131[0] = 32LL;
      v131[1] = 0xE100000000000000LL;
      unint64_t v57 = sub_10001B4A0();
      uint64_t v58 = StringProtocol.components<A>(separatedBy:)( v131,  &type metadata for String,  &type metadata for String,  v57,  v57);
      sub_10003561C();
      uint64_t v59 = sub_10005B1B8(1LL, v58);
      uint64_t v132 = v59;
      uint64_t v133 = v60;
      uint64_t v134 = v61;
      uint64_t v135 = v62;
      uint64_t v63 = sub_1000175B0(&qword_1002ABEC8);
      unint64_t v64 = sub_100058910();
      BidirectionalCollection<>.joined(separator:)(32LL, 0xE100000000000000LL, v63, v64);
      swift_unknownObjectRelease(v59);
    }

    uint64_t v65 = v126;
    static Date.now.getter(v66);
    sub_1000B5190();
    char v68 = v67;
    uint64_t v129 = *(void *)(v129 + 8);
    ((void (*)(char *, uint64_t))v129)(v65, v47);
    if ((v68 & 1) != 0)
    {
      sub_100058A5C();
      uint64_t v70 = v69;
      uint64_t v124 = v71;
    }

    else
    {
      uint64_t v70 = 0LL;
      uint64_t v124 = 0LL;
    }

    uint64_t v72 = swift_bridgeObjectRetain();
    uint64_t v73 = sub_1000CC010(v72);
    swift_bridgeObjectRelease();
    if (v73)
    {
      uint64_t v74 = *(void *)(v73 + 40);
      uint64_t v123 = *(char **)(v73 + 32);
      uint64_t v117 = v74;
      swift_bridgeObjectRetain();
      swift_release(v73);
    }

    else
    {
      uint64_t v123 = (char *)sub_1001BA868();
      uint64_t v117 = v75;
    }

    uint64_t v132 = v119;
    uint64_t v133 = v118;
    v76._countAndFlagsBits = 47LL;
    v76._object = (void *)0xE100000000000000LL;
    String.append(_:)(v76);
    Swift::String v77 = String.lowercased()();
    sub_10003561C();
    String.append(_:)(v77);
    swift_bridgeObjectRelease();
    uint64_t v119 = v132;
    uint64_t v118 = v133;
    if (qword_1002A8CA8 != -1) {
      swift_once(&qword_1002A8CA8, sub_100043918);
    }
    uint64_t v78 = (void *)qword_1002AAFE8;
    Class v79 = Date._bridgeToObjectiveC()().super.isa;
    id v80 = [v78 stringFromDate:v79];

    uint64_t v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
    uint64_t v115 = v81;

    uint64_t v132 = 0LL;
    uint64_t v133 = (void *)0xE000000000000000LL;
    _StringGuts.grow(_:)(40LL);
    swift_bridgeObjectRelease();
    uint64_t v132 = 0x797469746E617571LL;
    uint64_t v133 = (void *)0xEF3D64696226313DLL;
    v82._countAndFlagsBits = v128;
    v82._object = v122;
    String.append(_:)(v82);
    v83._object = (void *)0x8000000100219C20LL;
    v83._countAndFlagsBits = 0xD000000000000017LL;
    String.append(_:)(v83);
    uint64_t v128 = v132;
    uint64_t v122 = v133;
    sub_100058A5C();
    uint64_t v85 = v84;
    uint64_t v87 = v86;
    uint64_t v88 = sub_1000B3DDC();
    uint64_t v125 = v70;
    if (v87)
    {
      unint64_t v90 = v25;
      if (v85 == v88 && v87 == v89)
      {
        sub_10003561C();
        uint64_t v93 = sub_100019390();
        char v94 = 0;
      }

      else
      {
        char v92 = _stringCompareWithSmolCheck(_:_:expecting:)(v85, v87, v88, v89, 0LL);
        sub_10003561C();
        uint64_t v93 = sub_100019390();
        char v94 = v92 ^ 1;
      }
    }

    else
    {
      unint64_t v90 = v25;
      uint64_t v93 = sub_100019390();
      char v94 = 1;
    }

    Date.init()(v93);
    Swift::String v95 = v130;
    char v96 = static Date.< infix(_:_:)(v130, v65);
    int v97 = v65;
    uint64_t v98 = v138;
    unsigned __int16 v99 = (void (*)(char *, uint64_t))v129;
    ((void (*)(char *, uint64_t))v129)(v97, v138);
    sub_1000B52F0();
    uint64_t v132 = v100;
    uint64_t v101 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
    uint64_t v103 = v102;
    swift_release(v121);
    swift_release(v120);

    v99(v95, v98);
    uint64_t v104 = v127;
    uint64_t v105 = v124;
    *unsigned int v127 = v125;
    v104[1] = v105;
    uint64_t v106 = v117;
    v104[2] = (uint64_t)v123;
    v104[3] = v106;
    uint64_t v107 = (uint64_t)v118;
    v104[4] = v119;
    v104[5] = v107;
    uint64_t v108 = v115;
    v104[6] = v116;
    v104[7] = v108;
    uint64_t v109 = (uint64_t)v122;
    v104[8] = v128;
    v104[9] = v109;
    *((_BYTE *)v104 + 80) = v94 & 1;
    *((_BYTE *)v104 + 8Hasher._combine(_:)(v1 & 1) = v96 & 1;
    v104[11] = v101;
    v104[12] = v103;
  }

  else
  {
    sub_100019F7C(&v132);
    unint64_t v54 = sub_10001FD38();
    uint64_t v55 = sub_1000252D0((uint64_t)&type metadata for HTTPResponseStatus, v54);
    sub_100058964(v55, v56);

    (*(void (**)(char *, uint64_t))(v129 + 8))(v130, v138);
  }

uint64_t type metadata accessor for EditSubscriptionHelperRoute()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService27EditSubscriptionHelperRoute);
}

void sub_100058220()
{
  __int16 v2 = v0;
  uint64_t v3 = sub_1001C0DF4();
  if (v4)
  {
    __int16 v2 = 0;
    sub_100058348(v3, v4, v25);
    uint64_t v5 = sub_100023EEC();
    sub_100058A50(v5, v8, v9, v10, v11);
    sub_10001ED94();
    uint64_t v12 = sub_100058954();
    uint64_t v13 = sub_10001ED7C(v12);
    __n128 v24 = sub_100058A64(v13, v14, v15, v16, v17, v18, v19, v20, v21);
  }

  else
  {
    sub_10001ED94();
    uint64_t v6 = sub_100058954();
    uint64_t v7 = sub_10001ED7C(v6);
    v24.n128_f64[0] = sub_100058A0C(v7);
  }

  *(void *)(v22 + 32) = v23;
  *(_WORD *)(v22 + 40) = v2;
  *(_WORD *)(v22 + 42) = v1;
  sub_100058978((uint64_t)_swiftEmptyArrayStorage, v24);
  sub_1000589C4();
}

void sub_100058348(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v11 = HIBYTE(a2) & 0xF;
  uint64_t v12 = a1 & 0xFFFFFFFFFFFFLL;
  if ((v9 & 0x2000000000000000LL) != 0) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v13) {
    goto LABEL_44;
  }
  uint64_t v14 = v4;
  uint64_t v15 = v3;
  if ((v9 & 0x1000000000000000LL) != 0)
  {
    sub_100019320();
    sub_100161B20(a1, v9, 10LL);
    LOBYTE(sub_1000389B0(v2, v3, v4, v5) = v53;
    sub_100019390();
    goto LABEL_36;
  }

  if ((v9 & 0x2000000000000000LL) != 0)
  {
    if (a1 == 43)
    {
      if (v11)
      {
        if (v11 != 1 && (BYTE1(a1) - 48) <= 9u)
        {
          if (v11 == 2) {
            goto LABEL_35;
          }
          if ((BYTE2(a1) - 48) <= 9u)
          {
            unint64_t v22 = 10LL * (BYTE1(a1) - 48) + (BYTE2(a1) - 48);
            if (v11 != 3)
            {
              while (1)
              {
                sub_100024EAC();
                if (!v25 && v20) {
                  goto LABEL_33;
                }
                if (!is_mul_ok(v22, v23)) {
                  goto LABEL_33;
                }
                BOOL v20 = __CFADD__(10 * v22, v24);
                unint64_t v22 = 10 * v22 + v24;
                if (v20) {
                  goto LABEL_33;
                }
                sub_100058A24();
                if (v25) {
                  goto LABEL_36;
                }
              }
            }

            goto LABEL_35;
          }
        }

        goto LABEL_33;
      }
    }

    else
    {
      if (a1 != 45)
      {
        if (v11 && (a1 - 48) <= 9u)
        {
          if (v11 == 1) {
            goto LABEL_35;
          }
          if ((BYTE1(a1) - 48) <= 9u)
          {
            unint64_t v45 = 10LL * (a1 - 48) + (BYTE1(a1) - 48);
            if (v11 != 2)
            {
              while (1)
              {
                sub_100024EAC();
                if (!v25 && v20) {
                  goto LABEL_33;
                }
                if (!is_mul_ok(v45, v46)) {
                  goto LABEL_33;
                }
                BOOL v20 = __CFADD__(10 * v45, v47);
                unint64_t v45 = 10 * v45 + v47;
                if (v20) {
                  goto LABEL_33;
                }
                sub_100058A24();
                if (v25) {
                  goto LABEL_36;
                }
              }
            }

            goto LABEL_35;
          }
        }

LABEL_35:
                  LOBYTE(sub_1000389B0(v2, v3, v4, v5) = 0;
                  goto LABEL_36;
                }
              }
            }
          }
        }

        goto LABEL_33;
      }

      __break(1u);
    }

    __break(1u);
    goto LABEL_81;
  }

  if ((a1 & 0x1000000000000000LL) != 0) {
    uint64_t v17 = (unsigned __int8 *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else {
    uint64_t v17 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1);
  }
  sub_100161AD8(v17, v12);
  LOBYTE(sub_1000389B0(v2, v3, v4, v5) = v18 & 1;
LABEL_36:
  if ((v5 & 1) != 0
    || (uint64_t v8 = (void *)(v3 + 88), sub_100019F58((void *)(v3 + 88), *(void *)(v3 + 112)),
                                  (uint64_t v26 = sub_100089154()) == 0))
  {
LABEL_44:
    unint64_t v39 = sub_10001FD38();
    uint64_t v40 = sub_1000252D0((uint64_t)&type metadata for HTTPResponseStatus, v39);
    sub_100058964(v40, v41);
    return;
  }

  uint64_t v5 = (void *)v26;
  sub_1000B8508(0xFu);
  if (!v28)
  {
    unint64_t v42 = sub_10001FD38();
    uint64_t v43 = sub_1000252D0((uint64_t)&type metadata for HTTPResponseStatus, v42);
    *uint64_t v44 = 0LL;
    v44[1] = 0LL;
    v44[2] = 21LL;
    swift_willThrow(v43);

    return;
  }

  uint64_t v7 = v27;
  uint64_t v6 = v28;
  __dst = a3;
  uint64_t v29 = sub_100019F58((void *)(v3 + 88), *(void *)(v3 + 112));
  uint64_t v30 = sub_1000175B0(&qword_1002A9098);
  uint64_t inited = swift_initStackObject(v30, v64);
  *(_OWORD *)(inited + 16) = xmmword_1001F3C00;
  *(void *)(inited + 32) = v7;
  *(void *)(inited + 40) = v6;
  swift_bridgeObjectRetain();
  uint64_t v32 = sub_1000B3DEC();
  uint64_t v34 = v33;
  uint64_t v35 = *v29;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1000D962C(inited, v35, v32, v34);
  uint64_t v9 = v36;
  swift_bridgeObjectRelease();
  swift_setDeallocating(inited);
  sub_1001B7630();
  if (!((unint64_t)v9 >> 62))
  {
    if (*(void *)((v9 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_41;
    }
LABEL_71:
    sub_100019390();
    id v38 = v5;
    goto LABEL_72;
  }

  if (v9 < 0) {
    uint64_t v54 = v9;
  }
  else {
    uint64_t v54 = v9 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_100019320();
  uint64_t v55 = _CocoaArrayWrapper.endIndex.getter(v54);
  sub_100019390();
  if (!v55) {
    goto LABEL_71;
  }
LABEL_41:
  sub_100119E64(0LL, (v9 & 0xC000000000000001LL) == 0, v9);
  if ((v9 & 0xC000000000000001LL) != 0)
  {
LABEL_81:
    id v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v9);
    goto LABEL_43;
  }

  id v37 = *(id *)(v9 + 32);
LABEL_43:
  id v38 = v37;
  sub_100019390();
LABEL_72:
  sub_1000B534C(0LL, 0LL);
  sub_100019F58(v8, *(void *)(v15 + 112));
  char v56 = sub_100089348(v38, 1);
  if (v56 == 4)
  {
    uint64_t v57 = sub_1000B3DEC();
    sub_10005783C(v7, v6, v57, v58, __src);

    sub_10001DC10();
    sub_100019390();
    if (!v14) {
      memcpy(__dst, __src, 0x68uLL);
    }
  }

  else
  {
    char v59 = v56;
    sub_10001DC10();
    unint64_t v60 = sub_1000588D4();
    uint64_t v61 = sub_1000252D0((uint64_t)&type metadata for TransactionError, v60);
    *uint64_t v62 = v59;
    swift_willThrow(v61);
  }

  uint64_t v40 = "Not enough bits to represent the passed value";
  uint64_t v41 = 45LL;
LABEL_47:
  unint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v40,  v41,  2LL,  "Swift/Integers.swift",  20LL);
  __break(1u);
  return result;
}

        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
      }
    }

                swift_release();
                uint64_t v31 = objc_allocWithZone(v35);
                swift_bridgeObjectRelease();
                sub_1001B1DE0((uint64_t)_swiftEmptyDictionarySingleton);
                swift_bridgeObjectRelease();
                Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
                sub_10001A3F8();
                uint64_t v33 = [v31 initWithPropertyValues:isa onConnection:a2];

                return (uint64_t)v33;
              }
            }
          }
        }
      }
    }

  sub_1000C8BE8(v2);
LABEL_36:
  __break(1u);
}

  sub_1000C8BE8(v2);
LABEL_36:
  __break(1u);
}

      sub_10016F2F0();
    }

    while (v41);
  }

  swift_release_n(v8, 2LL);
  uint64_t v29 = v42;
  uint64_t v30 = v43;
  sub_10001DBCC();
  uint64_t v31 = String.count.getter(v29, v30);
  swift_bridgeObjectRelease();
  if (v31 >= 1)
  {
    sub_1001A9288();
    swift_bridgeObjectRelease();
    return v42;
  }

  return v29;
}

  sub_10017932C((uint64_t)&v75);
  uint64_t v35 = v76 | ((unint64_t)v77 << 32) | ((unint64_t)v78 << 48);
  uint64_t v36 = sub_10001ED94();
  id v37 = v36;
  id v38 = HIWORD(v36);
  unint64_t v39 = type metadata accessor for HTTPResponseHead._Storage();
  uint64_t v40 = sub_10001ED7C(v39);
  uint64_t v41 = v40;
  *(void *)(v40 + 16) = 0LL;
  *(void *)(v40 + 24) = 0LL;
  unint64_t v42 = 21LL;
LABEL_36:
  *(void *)(v40 + 32) = v42;
  *(_WORD *)(v40 + 40) = v37;
  *(_WORD *)(v40 + 42) = v38;
  sub_1000390C8((uint64_t)v89, (uint64_t)__src, &qword_1002AECA8);
  sub_100178AD4(__src);
  *(void *)a2 = v41;
  *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 136), 8) = v8;
  sub_100179408();
  *(_DWORD *)(a2 + 56) = v35;
  *(_BYTE *)(a2 + 62) = BYTE6(v35);
  *(_WORD *)(a2 + 60) = WORD2(v35);
  sub_10002A580();
}

  __break(1u);
  return result;
}

    aBlock = 0u;
    uint64_t v128 = 0u;
    uint64_t v65 = sub_1001B976C();
    sub_1001B1C84(v65, v66, v67);
    aBlock = 0u;
    uint64_t v128 = 0u;
    char v68 = sub_1001B976C();
    sub_1001B1C84(v68, 0x6E65725F6F747561LL, 0xEB00000000737765LL);
    aBlock = 0u;
    uint64_t v128 = 0u;
    uint64_t v69 = sub_1001B976C();
    sub_1001B1C84(v69, v70, v120);
    sub_1001B9614(0x64656873696E6966LL, 0xE800000000000000LL, &aBlock);
    uint64_t v71 = *((void *)&v128 + 1);
    sub_1001B93F0();
    if (!v71)
    {
      *((void *)&v128 + Hasher._combine(_:)(v1 & 1) = &type metadata for Int;
      *(void *)&aBlock = 0LL;
      uint64_t v72 = sub_1001B976C();
      sub_1001B1C84(v72, 0x64656873696E6966LL, 0xE800000000000000LL);
    }

    sub_1001B9614(0xD000000000000012LL, v119, &aBlock);
    uint64_t v73 = *((void *)&v128 + 1);
    sub_1001B93F0();
    if (!v73)
    {
      *((void *)&v128 + Hasher._combine(_:)(v1 & 1) = &type metadata for Int;
      *(void *)&aBlock = 0LL;
      uint64_t v74 = sub_1001B976C();
      sub_1001B1C84(v74, 0xD000000000000012LL, v75);
    }

    sub_1001B9614(0x797469746E617571LL, 0xE800000000000000LL, &aBlock);
    Swift::String v76 = *((void *)&v128 + 1);
    sub_1001B93F0();
    if (!v76)
    {
      *((void *)&v128 + Hasher._combine(_:)(v1 & 1) = &type metadata for Int;
      *(void *)&aBlock = 0LL;
      Swift::String v77 = sub_1001B976C();
      sub_1001B1C84(v77, 0x797469746E617571LL, 0xE800000000000000LL);
    }

    sub_10012A58C(0x6574617473LL, 0xE500000000000000LL, v126, &aBlock);
    uint64_t v78 = *((void *)&v128 + 1);
    sub_1001B93F0();
    if (!v78)
    {
      *((void *)&v128 + Hasher._combine(_:)(v1 & 1) = &type metadata for Int;
      *(void *)&aBlock = 0LL;
      Class v79 = sub_1001B976C();
      sub_1001B1C84(v79, 0x6574617473LL, 0xE500000000000000LL);
    }

    ++v13;
    id v80 = swift_bridgeObjectRetain();
    sub_1001B1DE0(v80);
    Swift::String v82 = v81;
    sub_100023EEC();
    Swift::String v83 = v12;
    uint64_t v84 = sub_10011DCF4(v82, v83);
    sub_100023EEC();
  }

  while (v123 != v13);

  sub_10001A3F8();
LABEL_54:
  swift_release();
  return sub_100019390();
}

uint64_t type metadata accessor for DisableAutoRenewRoute()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService21DisableAutoRenewRoute);
}

unint64_t sub_1000588D4()
{
  unint64_t result = qword_1002ABEC0;
  if (!qword_1002ABEC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002009AC, &type metadata for TransactionError);
    atomic_store(result, (unint64_t *)&qword_1002ABEC0);
  }

  return result;
}

unint64_t sub_100058910()
{
  unint64_t result = qword_1002ABED0;
  if (!qword_1002ABED0)
  {
    uint64_t v1 = sub_100018EC0(&qword_1002ABEC8);
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for ArraySlice<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1002ABED0);
  }

  return result;
}

uint64_t sub_100058954()
{
  return type metadata accessor for HTTPResponseHead._Storage();
}

uint64_t sub_100058964(uint64_t a1, void *a2)
{
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 25LL;
  return swift_willThrow();
}

void sub_100058978(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  *(void *)uint64_t v2 = v3;
  *(void *)(v2 + _Block_object_dispose((const void *)(v1 - 136), 8) = a1;
  *(_BYTE *)(v2 + 16) = 2;
  *(__n128 *)(v2 + 24) = a2;
  *(void *)(v2 + 40) = v4;
  *(void *)(v2 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v5;
  *(_DWORD *)(v2 + 56) = v6;
  *(_BYTE *)(v2 + 62) = BYTE6(v6);
  *(_WORD *)(v2 + 60) = WORD2(v6);
}

uint64_t sub_1000589A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11)
{
  *(_OWORD *)(a1 + 16) = a9;
  *(void *)(a1 + 32) = v12;
  *(_WORD *)(a1 + 40) = v11;
  *(_WORD *)(a1 + 42) = v13;
  return swift_errorRelease(a11);
}

  ;
}

double sub_1000589DC(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_1000589FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  return swift_dynamicCast(v7 - 112, va, a3, a4, 0LL);
}

double sub_100058A0C(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

  ;
}

uint64_t sub_100058A34()
{
  return type metadata accessor for HTTPResponseHead._Storage();
}

uint64_t sub_100058A44()
{
  return swift_errorRetain(v0);
}

void sub_100058A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_100058A5C()
{
}

__n128 sub_100058A64( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  __n128 result = a9;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  return result;
}

uint64_t sub_100058A78(uint64_t a1, uint64_t a2)
{
  if (a1 == 1702521203 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(1702521203LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

uint64_t sub_100058AEC()
{
  return 1702521203LL;
}

void sub_100058AFC(void *a1, uint64_t a2, char a3)
{
  uint64_t v5 = a3 & 1;
  uint64_t v6 = sub_1000175B0(&qword_1002ABF70);
  sub_10005A010();
  __chkstk_darwin(v7);
  sub_100019F58(a1, a1[3]);
  unint64_t v8 = sub_100059E48();
  sub_100059FFC((uint64_t)&type metadata for iOSIAP.CodingKeys, v9, v8);
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a2, v5, v10, v6);
  sub_100023E48();
  sub_10001DAB8();
}

void sub_100058BB4(void *a1)
{
  uint64_t v3 = sub_1000175B0(&qword_1002ABF60);
  sub_100022760();
  __chkstk_darwin(v4);
  sub_100019F58(a1, a1[3]);
  unint64_t v5 = sub_100059E48();
  uint64_t v6 = sub_10005A030((uint64_t)&type metadata for iOSIAP.CodingKeys, (uint64_t)&type metadata for iOSIAP.CodingKeys, v5);
  if (!v1)
  {
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v6, v3);
    sub_1000258E8();
  }

  sub_10001DC08();
  sub_1000226D8();
}

void sub_100058C90()
{
}

uint64_t sub_100058CAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100058A78(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100058CD4(uint64_t a1)
{
  unint64_t v2 = sub_100059E48();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100058CFC(uint64_t a1)
{
  unint64_t v2 = sub_100059E48();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100058D24(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    *(void *)a2 = v4;
    *(_BYTE *)(a2 + _Block_object_dispose((const void *)(v1 - 136), 8) = v5 & 1;
  }

void sub_100058D54(void *a1)
{
}

uint64_t sub_100058D70(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x706169736F69LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x706169736F69LL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

void sub_100058DEC()
{
}

uint64_t sub_100058E1C()
{
  return 0x706169736F69LL;
}

void sub_100058E30(void *a1, uint64_t a2, __int16 a3)
{
  uint64_t v7 = sub_1000175B0(&qword_1002ABF38);
  sub_10005A010();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100019F58(a1, a1[3]);
  unint64_t v11 = sub_100059C64();
  sub_100059FFC((uint64_t)&type metadata for AssetFlavors.CodingKeys, v12, v11);
  uint64_t v15 = a2;
  __int16 v16 = a3 & 0x1FF;
  unint64_t v13 = sub_100059CDC();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v15, v14, v7, &unk_100279920, v13);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v7);
  sub_10001DAB8();
}

void sub_100058F14(void *a1)
{
  uint64_t v4 = sub_1000175B0(&qword_1002ABF20);
  sub_100022760();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100019F58(a1, a1[3]);
  unint64_t v8 = sub_100059C64();
  sub_10005A030( (uint64_t)&type metadata for AssetFlavors.CodingKeys,  (uint64_t)&type metadata for AssetFlavors.CodingKeys,  v8);
  if (!v1)
  {
    unint64_t v9 = sub_100059CA0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&unk_100279920, v10, v4, &unk_100279920, v9);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v4);
  }

  sub_10001DC08();
  sub_1000226D8();
}

void sub_100059018()
{
}

uint64_t sub_100059048@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100058D70(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100059070(uint64_t a1)
{
  unint64_t v2 = sub_100059C64();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100059098(uint64_t a1)
{
  unint64_t v2 = sub_100059C64();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000590C0(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    *(void *)a2 = v4;
    *(_BYTE *)(a2 + _Block_object_dispose((const void *)(v1 - 136), 8) = v5;
    *(_BYTE *)(a2 + 9) = HIBYTE(v5) & 1;
  }

void sub_1000590F4(void *a1)
{
}

unint64_t sub_100059120(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002715A8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10005916C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10005919C + 4 * byte_1001F75C0[a1]))( 0x6563697270LL,  0xE500000000000000LL);
}

uint64_t sub_10005919C()
{
  return 0x69642D6563697270LL;
}

uint64_t sub_1000591C0()
{
  return 1702521203LL;
}

uint64_t sub_1000591D0()
{
  return 0x6C662D7465737361LL;
}

uint64_t sub_1000591F4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100059224 + 4 * byte_1001F75C4[a1]))( 0x6563697270LL,  0xE500000000000000LL);
}

uint64_t sub_100059224()
{
  return 0x69642D6563697270LL;
}

uint64_t sub_100059248()
{
  return 1702521203LL;
}

uint64_t sub_100059258()
{
  return 0x6C662D7465737361LL;
}

uint64_t sub_10005927C(void *a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = sub_1000175B0(&qword_1002ABEF0);
  sub_100022760();
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100019F58(a1, v10);
  unint64_t v12 = sub_100059748();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for StoreOffer.CodingKeys,  &type metadata for StoreOffer.CodingKeys,  v12,  v10,  v11);
  v29[0] = 0;
  sub_100059FE8();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v14, v15, v16);
  if (!v2)
  {
    v29[0] = 1;
    sub_100059FE8();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, v19, v20);
    v29[0] = 2;
    sub_100059FE8();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, v23, v24);
    sub_1000597C0(v4 + 48, (uint64_t)v30);
    sub_1000597C0((uint64_t)v30, (uint64_t)v29);
    char v28 = 3;
    unint64_t v25 = sub_100059808();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v29, &v28, v6, &unk_1002796F8, v25);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v6);
}

void sub_1000593E4(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_1000175B0(&qword_1002ABED8);
  sub_10005A010();
  __chkstk_darwin(v6);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100019F58(a1, v7);
  unint64_t v9 = sub_100059748();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for StoreOffer.CodingKeys,  &type metadata for StoreOffer.CodingKeys,  v9,  v7,  v8);
  if (v2)
  {
    sub_10001DC08();
    swift_bridgeObjectRelease();
  }

  else
  {
    v31[3] = 0;
    sub_10005A020();
    uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v10, v11);
    char v30 = v13;
    v31[2] = 1;
    sub_10005A020();
    uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v14, v15);
    uint64_t v18 = v17;
    uint64_t v26 = v16;
    v31[1] = 2;
    sub_10005A020();
    uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v19, v20);
    char v24 = v22;
    uint64_t v25 = v21;
    v31[0] = 3;
    unint64_t v23 = sub_100059784();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&unk_1002796F8, v31, v5, &unk_1002796F8, v23);
    sub_100023E48();
    sub_10001DC08();
    *(void *)a2 = v12;
    *(_BYTE *)(a2 + _Block_object_dispose((const void *)(v1 - 136), 8) = v30 & 1;
    *(void *)(a2 + 16) = v26;
    *(void *)(a2 + 24) = v18;
    *(void *)(a2 + 32) = v25;
    *(_BYTE *)(a2 + 40) = v24 & 1;
    *(void *)(a2 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v27;
    *(_WORD *)(a2 + 56) = v28;
    *(_BYTE *)(a2 + 5_Block_object_dispose((const void *)(v1 - 136), 8) = v29;
  }

  sub_10001DAB8();
}

void sub_1000595A8()
{
}

void sub_1000595B4()
{
}

void sub_1000595BC()
{
}

void sub_1000595C4(uint64_t a1)
{
}

unint64_t sub_1000595CC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100059120(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000595F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10005916C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100059620()
{
  return sub_1000591F4(*v0);
}

uint64_t sub_100059628@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100059168(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10005964C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = static NIOHTTPObjectAggregatorError.unexpectedMessageBody.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100059670(uint64_t a1)
{
  unint64_t v2 = sub_100059748();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100059698(uint64_t a1)
{
  unint64_t v2 = sub_100059748();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000596C0@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    a2[2] = v7[0];
    double result = *(double *)((char *)v7 + 11);
    *(_OWORD *)((char *)a2 + 4sub_100019F7C(v0 + 3) = *(_OWORD *)((char *)v7 + 11);
  }

  return result;
}

uint64_t sub_100059708(void *a1)
{
  return sub_10005927C(a1);
}

unint64_t sub_100059748()
{
  unint64_t result = qword_1002ABEE0;
  if (!qword_1002ABEE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F77B0, &type metadata for StoreOffer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABEE0);
  }

  return result;
}

unint64_t sub_100059784()
{
  unint64_t result = qword_1002ABEE8;
  if (!qword_1002ABEE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F7788, &unk_1002796F8);
    atomic_store(result, (unint64_t *)&qword_1002ABEE8);
  }

  return result;
}

uint64_t sub_1000597C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002ABEF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100059808()
{
  unint64_t result = qword_1002ABF00;
  if (!qword_1002ABF00)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F7760, &unk_1002796F8);
    atomic_store(result, (unint64_t *)&qword_1002ABF00);
  }

  return result;
}

uint64_t sub_100059844(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = *((_WORD *)a2 + 4);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t sub_100059858(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100059878(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 10) = v3;
  return result;
}

void type metadata accessor for AssetFlavors()
{
}

uint64_t storeEnumTagSinglePayload for StoreOffer.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = 1;
  }
  else {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000598FC + 4 * byte_1001F75CD[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100059930 + 4 * byte_1001F75C8[v4]))();
}

uint64_t sub_100059930(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100059938(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x100059940LL);
  }
  return result;
}

uint64_t sub_10005994C(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x100059954LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100059958(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100059960(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StoreOffer.CodingKeys()
{
  return &type metadata for StoreOffer.CodingKeys;
}

uint64_t sub_10005997C(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

uint64_t sub_100059984(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = *(_BYTE *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_1000599E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  uint64_t v5 = a2[3];
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = a2[6];
  *(_DWORD *)(a1 + 55) = *(_DWORD *)((char *)a2 + 55);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v8;
  return a1;
}

__n128 sub_100059A5C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 4sub_100019F7C(v0 + 3) = *(_OWORD *)(a2 + 43);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100059A78(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
  return a1;
}

uint64_t sub_100059ADC(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 59))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      unint64_t v3 = *(void *)(a1 + 24);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(vsub_100019F7C(v0 + 3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_100059B30(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
    *(_BYTE *)(result + 5_Block_object_dispose((const void *)(v1 - 136), 8) = 0;
    *(_WORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 59) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 59) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }

  return result;
}

void type metadata accessor for StoreOffer()
{
}

unint64_t sub_100059BA8()
{
  unint64_t result = qword_1002ABF08;
  if (!qword_1002ABF08)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F7738, &type metadata for StoreOffer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABF08);
  }

  return result;
}

unint64_t sub_100059BE8()
{
  unint64_t result = qword_1002ABF10;
  if (!qword_1002ABF10)
  {
    unint64_t result = swift_getWitnessTable("y#\b", &type metadata for StoreOffer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABF10);
  }

  return result;
}

unint64_t sub_100059C28()
{
  unint64_t result = qword_1002ABF18;
  if (!qword_1002ABF18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F7698, &type metadata for StoreOffer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABF18);
  }

  return result;
}

unint64_t sub_100059C64()
{
  unint64_t result = qword_1002ABF28;
  if (!qword_1002ABF28)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F7910, &type metadata for AssetFlavors.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABF28);
  }

  return result;
}

unint64_t sub_100059CA0()
{
  unint64_t result = qword_1002ABF30;
  if (!qword_1002ABF30)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F78E8, &unk_100279920);
    atomic_store(result, (unint64_t *)&qword_1002ABF30);
  }

  return result;
}

unint64_t sub_100059CDC()
{
  unint64_t result = qword_1002ABF40;
  if (!qword_1002ABF40)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F78C0, &unk_100279920);
    atomic_store(result, (unint64_t *)&qword_1002ABF40);
  }

  return result;
}

ValueMetadata *type metadata accessor for AssetFlavors.CodingKeys()
{
  return &type metadata for AssetFlavors.CodingKeys;
}

uint64_t sub_100059D30(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100059D50(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_BYTE *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 9) = v3;
  return result;
}

void type metadata accessor for iOSIAP()
{
}

unint64_t sub_100059D8C()
{
  unint64_t result = qword_1002ABF48;
  if (!qword_1002ABF48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F7898, &type metadata for AssetFlavors.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABF48);
  }

  return result;
}

unint64_t sub_100059DCC()
{
  unint64_t result = qword_1002ABF50;
  if (!qword_1002ABF50)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F7808, &type metadata for AssetFlavors.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABF50);
  }

  return result;
}

unint64_t sub_100059E0C()
{
  unint64_t result = qword_1002ABF58;
  if (!qword_1002ABF58)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F7830, &type metadata for AssetFlavors.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABF58);
  }

  return result;
}

unint64_t sub_100059E48()
{
  unint64_t result = qword_1002ABF68;
  if (!qword_1002ABF68)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F7A18, &type metadata for iOSIAP.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABF68);
  }

  return result;
}

uint64_t _s25ASOctaneSupportXPCService12AssetFlavorsV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100059EC4 + 4 * byte_1001F75D2[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100059EE4 + 4 * byte_1001F75D7[v4]))();
  }
}

_BYTE *sub_100059EC4(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100059EE4(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100059EEC(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100059EF4(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100059EFC(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100059F04(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for iOSIAP.CodingKeys()
{
  return &type metadata for iOSIAP.CodingKeys;
}

unint64_t sub_100059F24()
{
  unint64_t result = qword_1002ABF78;
  if (!qword_1002ABF78)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F79F0, &type metadata for iOSIAP.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABF78);
  }

  return result;
}

unint64_t sub_100059F64()
{
  unint64_t result = qword_1002ABF80;
  if (!qword_1002ABF80)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F7960, &type metadata for iOSIAP.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABF80);
  }

  return result;
}

unint64_t sub_100059FA4()
{
  unint64_t result = qword_1002ABF88;
  if (!qword_1002ABF88)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F7988, &type metadata for iOSIAP.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ABF88);
  }

  return result;
}

  ;
}

uint64_t sub_100059FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

  ;
}

  ;
}

uint64_t sub_10005A030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a2, a3, v3, v4);
}

void sub_10005A03C()
{
}

unint64_t sub_10005A048(uint64_t a1, void *a2)
{
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  return 0xD000000000000016LL;
}

void *sub_10005A0C4()
{
  unint64_t result = v0;
  v0[2] = 0xD000000000000011LL;
  v0[3] = 0x8000000100219C80LL;
  v0[4] = 0LL;
  v0[5] = 0LL;
  return result;
}

uint64_t sub_10005A0EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v5 = sub_1001BCBC8();
  sub_10012A314(6580578LL, 0xE300000000000000LL, v5);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  if (v9)
  {
    uint64_t v27 = &v25;
    if (qword_1002A8CC0 != -1) {
      swift_once(&qword_1002A8CC0, sub_100056B8C);
    }
    uint64_t v10 = (os_unfair_lock_s *)*((void *)off_1002ABCB0 + 2);
    os_unfair_lock_lock(v10);
    uint64_t v11 = sub_10005A2DC(v7, v9);
    unint64_t v13 = v12;
    sub_10003AA74((uint64_t)v11, v12);
    sub_1000AD058((uint64_t)v11, v13);
    uint64_t v14 = v29;
    uint64_t v26 = v28;
    sub_10005A718();
    sub_10003AACC((uint64_t)v11, v13);
    unsigned int v15 = sub_10001ED94();
    LOWORD(EventLoop.preconditionInEventLoop(file:line:)(v9, v10, v11, 278LL, v12, v13) = v15;
    unsigned int v16 = HIWORD(v15);
    uint64_t v17 = type metadata accessor for HTTPResponseHead._Storage();
    uint64_t v18 = sub_10001ED7C(v17);
    *(void *)(v18 + 16) = 0LL;
    *(void *)(v18 + 24) = 0LL;
    *(void *)(v18 + 32) = 3LL;
    *(_WORD *)(v18 + 40) = v13;
    uint64_t v19 = v26;
    *(_WORD *)(v18 + 42) = v16;
    os_unfair_lock_unlock(v10);
    uint64_t result = swift_bridgeObjectRelease();
  }

  else
  {
    sub_1000ACB64(0xD000000000000012LL, 0x8000000100219CC0LL, 6u, (uint64_t)&v28);
    uint64_t v19 = v28;
    uint64_t v14 = v29;
    sub_10005A718();
    unsigned int v21 = sub_10001ED94();
    Swift::UInt16 v22 = v21;
    unsigned int v23 = HIWORD(v21);
    uint64_t v24 = type metadata accessor for HTTPResponseHead._Storage();
    uint64_t result = sub_10001ED7C(v24);
    uint64_t v18 = result;
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)(result + 32) = 21LL;
    *(_WORD *)(result + 40) = v22;
    *(_WORD *)(result + 42) = v23;
  }

  *(void *)a1 = v18;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = _swiftEmptyArrayStorage;
  *(_BYTE *)(a1 + 16) = 2;
  *(void *)(a1 + 24) = v19;
  *(void *)(a1 + 32) = v14;
  *(void *)(a1 + 40) = v1;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v2;
  *(_DWORD *)(a1 + 56) = v3;
  *(_BYTE *)(a1 + 62) = BYTE6(v3);
  *(_WORD *)(a1 + 60) = WORD2(v3);
  return result;
}

__CFData *sub_10005A2DC(uint64_t a1, uint64_t a2)
{
  id v4 = sub_10005A498(a1, a2);
  id v5 =  [(id)objc_opt_self(ISImageDescriptor) imageDescriptorNamed:kISImageDescriptorHomeScreen];
  uint64_t v6 = sub_1000175B0((uint64_t *)&unk_1002AFCE0);
  uint64_t v7 = swift_allocObject(v6, 40LL, 7LL);
  *(_OWORD *)(v7 + 16) = xmmword_1001F47B0;
  *(void *)(v7 + 32) = v5;
  specialized Array._endMutation()(v7);
  sub_10001672C(0LL, &qword_1002AC050, &OBJC_CLASS___ISImageDescriptor_ptr);
  id v8 = v5;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v4 prepareImagesForImageDescriptors:isa];

  id v10 = [v4 imageForDescriptor:v8];
  uint64_t v11 = (__CFData *)[v10 CGImage];

  if (v11)
  {
    unint64_t v12 = v11;
    uint64_t v11 = sub_10005A508();
  }

  else
  {
  }

  return v11;
}

id sub_10005A498(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [v4 initWithBundleIdentifier:v5];

  return v6;
}

__CFData *sub_10005A508()
{
  Mutable = CFDataCreateMutable(0LL, 0LL);
  if (Mutable)
  {
    uint64_t v2 = (__CFString *)String._bridgeToObjectiveC()();
    uint64_t v3 = CGImageDestinationCreateWithData(Mutable, v2, 1uLL, 0LL);

    if (v3)
    {
      CGImageDestinationAddImage(v3, v0, 0LL);
      if (CGImageDestinationFinalize(v3))
      {
        id v4 = Mutable;
        Mutable = (__CFData *)static Data._unconditionallyBridgeFromObjectiveC(_:)(Mutable);

        return Mutable;
      }
    }

    else
    {
    }

    return 0LL;
  }

  return Mutable;
}

uint64_t sub_10005A5E0()
{
  return v0;
}

uint64_t sub_10005A604()
{
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t type metadata accessor for AppIconRoute()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService12AppIconRoute);
}

uint64_t sub_10005A644()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16LL);
  swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 24LL));
  return v1;
}

uint64_t sub_10005A674()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32LL);
  sub_10005A6F0(v1, *(void *)(*(void *)v0 + 40LL));
  return v1;
}

double sub_10005A6A8@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  a1[2] = v5[0];
  double result = *(double *)((char *)v5 + 15);
  *(_OWORD *)((char *)a1 + 47) = *(_OWORD *)((char *)v5 + 15);
  return result;
}

uint64_t sub_10005A6F0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x22) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t sub_10005A704(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x22) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

  ;
}

void sub_10005A734(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for SHA384(0LL);
  __chkstk_darwin(v3);
  sub_10001DAD0();
  uint64_t v4 = type metadata accessor for SHA384Digest(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  uint64_t v6 = sub_100048814();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_10001DAD0();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = UUID.init()();
  UUID.uuidString.getter(v11);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  unint64_t v12 = sub_10001B4A0();
  uint64_t v13 = StringProtocol.localizedLowercase.getter(&type metadata for String, v12);
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = sub_10005AA94(a1, a2, v13, v15);
  sub_100063AC8(v16, v17);
  uint64_t v19 = v18;
  unint64_t v20 = sub_10005AB10();
  dispatch thunk of HashFunction.init()(v3, v20);
  __asm { BR              X10 }

uint64_t sub_10005A8D0()
{
  uint64_t v9 = sub_100063F54(v4);
  unint64_t v11 = v10;
  Data.base64EncodedString(options:)(0LL);
  sub_10003A9EC(v9, v11);
  if ((*(_DWORD *)(v8 - 132) & 1) != 0 || *(void *)(v8 - 152) != 19LL)
  {
    sub_10005AF60();
    sub_10005AF54();
    return *(void *)(v8 - 176);
  }

  else
  {
    uint64_t v12 = swift_bridgeObjectRelease();
    uint64_t v13 = ((uint64_t (*)(uint64_t))UUID.init())(v12);
    uint64_t v14 = UUID.uuidString.getter(v13);
    sub_10005AF54();
    (*(void (**)(uint64_t, void))(v8 - 168))(v5, *(void *)(v8 - 160));
    sub_10005AF60();
  }

  return v14;
}

uint64_t sub_10005AA94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v6 = a3;
  uint64_t v7 = a4;
  swift_bridgeObjectRetain(a4);
  uint64_t v6 = String.init<A>(_:)( &v6,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
  uint64_t v7 = v4;
  String.append<A>(contentsOf:)(v8, &type metadata for String, &protocol witness table for String);
  return v6;
}

unint64_t sub_10005AB10()
{
  unint64_t result = qword_1002AC058;
  if (!qword_1002AC058)
  {
    uint64_t v1 = type metadata accessor for SHA384(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SHA384, v1);
    atomic_store(result, (unint64_t *)&qword_1002AC058);
  }

  return result;
}

uint64_t sub_10005AB50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_1000175B0(&qword_1002AC060);
  __chkstk_darwin(v6);
  sub_10001DAD0();
  uint64_t v9 = v8 - v7;
  objc_allocWithZone(&OBJC_CLASS___LSApplicationRecord);
  swift_bridgeObjectRetain();
  id v10 = sub_10005AD88(a1, a2, 0);
  uint64_t v13 = v10;
  if (v10)
  {
    id v14 = [v10 deviceIdentifierForVendor];
    if (v14)
    {
      uint64_t v15 = v14;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v16 = sub_100048814();
      uint64_t v17 = 0LL;
    }

    else
    {

      uint64_t v16 = sub_100048814();
      uint64_t v17 = 1LL;
    }

    sub_10001762C(v9, v17, 1LL, v16);
    return sub_10005AF0C(v9, a3);
  }

  else
  {
    uint64_t v11 = sub_100048814();
    return sub_10001762C(a3, 1LL, 1LL, v11);
  }

uint64_t sub_10005AC94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a1;
  __int16 v8 = a2;
  char v9 = BYTE2(a2);
  char v10 = BYTE3(a2);
  char v11 = BYTE4(a2);
  uint64_t v3 = (char *)&v7 + a3;
  char v12 = BYTE5(a2);
  uint64_t v4 = type metadata accessor for SHA384(0LL);
  unint64_t v5 = sub_10005AB10();
  return dispatch thunk of HashFunction.update(bufferPointer:)(&v7, v3, v4, v5);
}

id sub_10005AD88(uint64_t a1, uint64_t a2, char a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v12 = 0LL;
  id v7 = [v3 initWithBundleIdentifier:v6 allowPlaceholder:a3 & 1 error:&v12];

  id v8 = v12;
  if (v7)
  {
    id v9 = v12;
  }

  else
  {
    id v10 = v12;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow();
  }

  return v7;
}

uint64_t sub_10005AE60(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v5 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v5 += a1 - result;
  }

  BOOL v6 = __OFSUB__(a2, a1);
  uint64_t v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v8 = __DataStorage._length.getter();
  if (v8 >= v7) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t v10 = v5 + v9;
  if (v5) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0LL;
  }
  uint64_t v12 = type metadata accessor for SHA384(0LL);
  unint64_t v13 = sub_10005AB10();
  return dispatch thunk of HashFunction.update(bufferPointer:)(v5, v11, v12, v13);
}

uint64_t sub_10005AF0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002AC060);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005AF54()
{
  return sub_10003A9EC(v1, v0);
}

uint64_t sub_10005AF60()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_10005AF70()
{
  return sub_10003AA88(v1, v0);
}

uint64_t sub_10005AF7C(uint64_t a1, uint64_t a2)
{
  return sub_10005AE60(a1, a2);
}

uint64_t static ByteBuffer.== infix(_:_:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (HIDWORD(a2) < a2)
  {
    __break(1u);
    goto LABEL_13;
  }

  if (HIDWORD(a5) < a5)
  {
LABEL_13:
    __break(1u);
    return result;
  }

  if (HIDWORD(a2) - (_DWORD)a2 == HIDWORD(a5) - (_DWORD)a5)
  {
    if ((a3 & 0xFFFFFFFFFFFFFFLL) == (a6 & 0xFFFFFFFFFFFFFFLL) && result == a4)
    {
      char v7 = 1;
    }

    else
    {
      swift_retain();
      sub_10005EE8C();
      char v7 = sub_10005D4E4();
    }
  }

  else
  {
    char v7 = 0;
  }

  return v7 & 1;
}

uint64_t ByteBuffer.readableBytes.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result = (HIDWORD(a2) - a2);
  return result;
}

Swift::Void __swiftcall ByteBuffer.moveReaderIndex(forwardBy:)(Swift::Int forwardBy)
{
  int v2 = *(_DWORD *)(v1 + 8);
  BOOL v3 = __CFADD__(v2, (_DWORD)forwardBy);
  unsigned int v4 = v2 + forwardBy;
  if (v3)
  {
    __break(1u);
  }

  else if (*(_DWORD *)(v1 + 12) >= v4)
  {
    *(_DWORD *)(v1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v4;
    return;
  }

  __break(1u);
}

unint64_t sub_10005B078(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    if ((a3 & 0x2000000000000000LL) != 0) {
      uint64_t v3 = HIBYTE(a3) & 0xF;
    }
    else {
      uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v4 = 7LL;
    if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v4 = 11LL;
    }
    unint64_t v5 = v4 | (v3 << 16);
    sub_10005EE8C();
    uint64_t result = String.index(_:offsetBy:limitedBy:)(v6, v7, v8, v9, v10);
    if ((v11 & 1) != 0) {
      uint64_t result = v5;
    }
    if (4 * v3 >= result >> 14)
    {
      sub_10005EDA0();
      uint64_t v16 = String.subscript.getter(v12, v13, v14, v15);
      sub_100019390();
      return v16;
    }
  }

  __break(1u);
  return result;
}

void sub_10005B138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v4 = a3 - a2;
    sub_10005EE8C();
    uint64_t v10 = sub_100155F58(v5, v6, v7, v8, v9);
    if ((v11 & 1) != 0)
    {
      uint64_t v10 = v4;
      if (!a2) {
        goto LABEL_7;
      }
    }

    else if (!a2)
    {
      uint64_t v4 = 0LL;
    }

    if (v4 >= v10)
    {
LABEL_7:
      sub_10005EDA0();
      return;
    }
  }

  __break(1u);
}

uint64_t sub_10005B1BC(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_10005EA54(0LL, result, v3);
  if ((v4 & 1) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result;
  }
  if (v3 < v5) {
    goto LABEL_9;
  }
  if ((v5 & 0x8000000000000000LL) == 0) {
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

Swift::Void __swiftcall ByteBuffer.clear()()
{
  if ((sub_10005EB8C() & 1) == 0)
  {
    sub_10005B858(*(_DWORD *)(*(void *)v0 + 16LL));
    sub_10005EDD8(v1);
  }

  sub_10005ECC0();
  sub_10001945C();
}

void ByteBufferAllocator.buffer(capacity:)(uint64_t a1)
{
  if (a1 < 0)
  {
    __break(1u);
LABEL_7:
    swift_once(&qword_1002A8CC8, sub_10005B580);
    goto LABEL_5;
  }

  if (a1)
  {
    type metadata accessor for ByteBuffer._Storage();
    sub_10005EE8C();
    static ByteBuffer._Storage.reallocated(minimumCapacity:allocator:)(v1, v2, v3, v4, v5);
    return;
  }

  if (qword_1002A8CC8 != -1) {
    goto LABEL_7;
  }
LABEL_5:
  swift_retain();
}

BOOL static _ByteBufferSlice.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return (a1 & 0xFFFFFFFFFFFFFFLL) == (a2 & 0xFFFFFFFFFFFFFFLL);
}

BOOL sub_10005B344(unsigned int *a1, unsigned int *a2)
{
  return static _ByteBufferSlice.__derived_struct_equals(_:_:)( *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 6) << 48),  *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 48));
}

uint64_t SelectorRegistrationID._rawValue.setter(uint64_t result)
{
  *int v1 = result;
  return result;
}

uint64_t _ByteBufferSlice._begin.getter(unint64_t a1)
{
  return HIDWORD(a1) & 0xFFFFFF;
}

uint64_t _ByteBufferSlice._begin.setter(uint64_t result)
{
  *(_WORD *)(v1 + 4) = result;
  *(_BYTE *)(v1 + 6) = BYTE2(result);
  return result;
}

uint64_t (*_ByteBufferSlice._begin.modify())()
{
  return debugOnly(_:);
}

unint64_t _ByteBufferSlice.lowerBound.getter(unint64_t a1)
{
  return (a1 >> 24) & 0xFFFF00 | BYTE6(a1);
}

uint64_t _ByteBufferSlice.count.getter(unint64_t a1)
{
  unsigned int v1 = (a1 >> 24) & 0xFFFF00 | BYTE6(a1);
  BOOL v2 = a1 >= v1;
  uint64_t result = a1 - v1;
  if (!v2) {
    __break(1u);
  }
  return result;
}

unint64_t _ByteBufferSlice.description.getter()
{
  v0._countAndFlagsBits = sub_10005ED50();
  String.append(_:)(v0);
  sub_10003561C();
  v1._countAndFlagsBits = 3943982LL;
  v1._object = (void *)0xE300000000000000LL;
  String.append(_:)(v1);
  v2._countAndFlagsBits = sub_10005ED50();
  String.append(_:)(v2);
  sub_100019390();
  sub_10005EE30(32032LL);
  return 0xD000000000000013LL;
}

unint64_t sub_10005B4B4()
{
  return _ByteBufferSlice.description.getter();
}

void *sub_10005B4E0(void *a1, const void *a2, size_t a3)
{
  if ((a3 & 0x8000000000000000LL) == 0) {
    return memmove(a1, a2, a3);
  }
  char v4 = 2;
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.copyMemory with negative count",  54LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v4,  1549LL,  0);
  __break(1u);
  return result;
}

uint64_t *ByteBufferAllocator.zeroCapacityWithDefaultAllocator.unsafeMutableAddressor()
{
  if (qword_1002A8CC8 != -1) {
    swift_once(&qword_1002A8CC8, sub_10005B580);
  }
  return &static ByteBufferAllocator.zeroCapacityWithDefaultAllocator;
}

void sub_10005B580()
{
  int v1 = *(_DWORD *)(v0 + 16);
  static ByteBufferAllocator.zeroCapacityWithDefaultAllocator = v0;
  qword_1002EB928 = 0LL;
  dword_1002EB930 = v1;
  word_1002EB934 = 0;
  byte_1002EB936 = 0;
  sub_10001945C();
}

uint64_t static ByteBufferAllocator.zeroCapacityWithDefaultAllocator.getter()
{
  if (qword_1002A8CC8 != -1) {
    swift_once(&qword_1002A8CC8, sub_10005B580);
  }
  return swift_retain();
}

void CircularBuffer._buffer.setter(uint64_t a1)
{
  *int v1 = a1;
  sub_10001945C();
}

Swift::Void __swiftcall ByteBuffer._moveReaderIndex(to:)(Swift::UInt32 to)
{
  *(_DWORD *)(v1 + _Block_object_dispose((const void *)(v1 - 136), 8) = to;
}

uint64_t (*AddressedEnvelope.Metadata.packetInfo.modify())()
{
  return debugOnly(_:);
}

unint64_t ByteBuffer._writerIndex.getter(uint64_t a1, unint64_t a2)
{
  return HIDWORD(a2);
}

Swift::Void __swiftcall ByteBuffer._moveWriterIndex(to:)(Swift::UInt32 to)
{
  *(_DWORD *)(v1 + 12) = to;
}

uint64_t (*ByteBuffer._writerIndex.modify())()
{
  return debugOnly(_:);
}

uint64_t FileRegion.readerIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3 & 0xFFFFFFFFFFFFFFLL;
}

uint64_t ByteBuffer._slice.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 16) = result;
  *(_WORD *)(v1 + 20) = WORD2(result);
  *(_BYTE *)(v1 + 22) = BYTE6(result);
  return result;
}

uint64_t (*CircularBuffer.tailBackingIndex.modify())()
{
  return debugOnly(_:);
}

uint64_t ByteBuffer._Storage.bytes.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t ByteBuffer._Storage.bytes.setter(uint64_t a1)
{
  uint64_t result = sub_10002A718(v1 + 24, (uint64_t)v4, 1LL);
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*ByteBuffer._Storage.bytes.modify(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

void ByteBuffer._Storage.__allocating_init(bytesNoCopy:capacity:allocator:)( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = sub_100056B74(v6);
  *(_DWORD *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a1;
  *(void *)(v13 + 32) = a3;
  *(void *)(v13 + 40) = a4;
  *(void *)(v13 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = a5;
  *(void *)(v13 + 56) = a6;
  sub_100023E74();
}

uint64_t ByteBuffer._Storage.init(bytesNoCopy:capacity:allocator:)( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a1;
  *(void *)(v6 + 32) = a3;
  *(void *)(v6 + 40) = a4;
  *(void *)(v6 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = a5;
  *(void *)(v6 + 56) = a6;
  return v6;
}

uint64_t ByteBuffer._Storage.deinit()
{
  return v0;
}

uint64_t sub_10005B7F0()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 48);
  swift_beginAccess(v0 + 24, v3, 0LL, 0LL);
  return v1(*(void *)(v0 + 24));
}

uint64_t ByteBuffer._Storage.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 64LL, 7LL);
}

void ByteBuffer._Storage.allocateStorage()()
{
}

void sub_10005B858(int a1)
{
  uint64_t v2 = *(void *)v1;
  if (a1) {
    unsigned int v3 = sub_1000C79C0(a1);
  }
  else {
    unsigned int v3 = 0;
  }
  char v4 = *(uint64_t (**)(void))(v1 + 32);
  uint64_t v5 = v4(v3);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(v1 + 56);
    uint64_t v8 = sub_100056B74(v2);
    *(_DWORD *)(v8 + 16) = v3;
    *(void *)(v8 + 24) = v6;
    *(void *)(v8 + 32) = v4;
    *(_OWORD *)(v8 + 40) = *(_OWORD *)(v1 + 40);
    *(void *)(v8 + 56) = v7;
    sub_10002A3D4();
  }

  else
  {
    __break(1u);
  }

void ByteBuffer._Storage.reallocSlice(_:capacity:)(uint64_t a1, int a2)
{
  uint64_t v5 = v4;
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 56);
  sub_1000487CC(v4 + 24, (uint64_t)v11);
  uint64_t v7 = *(void *)(v5 + 24);
  sub_1000487CC(v2 + 24, (uint64_t)&v10);
  uint64_t v8 = *(void *)(v2 + 24) + a1;
  uint64_t v9 = sub_10005BA30(a1);
  v6(v7, v8, v9);
  sub_1000356CC();
}

void sub_10005B944()
{
  if (sub_10000BF90(v0))
  {
    uint64_t v1 = 0LL;
    do
    {
      if (__OFADD__(v1, 1LL)) {
        __break(1u);
      }
      sub_10005ED28();
      ++v1;
    }

    while (sub_10000BFC0(v2, v3));
  }

  sub_1000356CC();
}

uint64_t sub_10005B9D4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - a2;
  if (!a2) {
    uint64_t v3 = 0LL;
  }
  if (!result)
  {
    __break(1u);
    goto LABEL_11;
  }

  if (result == -1 && v3 == 0x8000000000000000LL) {
    goto LABEL_12;
  }
  uint64_t result = v3 / result;
  if (result < 0)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }

  return result;
}

uint64_t sub_10005BA0C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t result = v2 - v1;
  if (v2 < v1)
  {
    __break(1u);
    goto LABEL_5;
  }

  if (__OFSUB__(v2, v1)) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t Heap.endIndex.getter(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_10005BA30(uint64_t a1)
{
  else {
    return (HIDWORD(a1) - a1);
  }
}

void sub_10005BA48(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v_Block_object_dispose((const void *)(v1 - 136), 8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  if ((a1 & 0xC) == 4LL << v8) {
    unint64_t v7 = sub_10005EE6C(a1);
  }
  if ((a2 & 0xC) == v9)
  {
    a2 = sub_10005EE6C(a2);
    if ((a4 & 0x1000000000000000LL) == 0) {
      goto LABEL_7;
    }
  }

  else if ((a4 & 0x1000000000000000LL) == 0)
  {
LABEL_7:
    sub_10002A3D4();
    return;
  }

  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }

  else if (v10 >= a2 >> 16)
  {
    sub_10005EDA0();
    String.UTF8View._foreignDistance(from:to:)(v11, v12, v13, v14);
    return;
  }

  __break(1u);
}

Swift::Void __swiftcall ByteBuffer._Storage.reallocStorage(capacity:)(Swift::UInt32 capacity)
{
  unsigned int v2 = sub_1000C79C0(capacity);
  uint64_t v3 = *(uint64_t (**)(void, void))(v1 + 40);
  sub_10002A718(v1 + 24, (uint64_t)v5, 1LL);
  uint64_t v4 = v3(*(void *)(v1 + 24), v2);
  if (v4)
  {
    *(void *)(v1 + 24) = v4;
    *(_DWORD *)(v1 + 16) = v2;
  }

  else
  {
    __break(1u);
  }

void static ByteBuffer._Storage.reallocated(minimumCapacity:allocator:)( int a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1) {
    unsigned int v10 = sub_1000C79C0(a1);
  }
  else {
    unsigned int v10 = 0;
  }
  uint64_t v11 = a2(v10);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = sub_100056B74(v5);
    *(_DWORD *)(v13 + 16) = v10;
    *(void *)(v13 + 24) = v12;
    *(void *)(v13 + 32) = a2;
    *(void *)(v13 + 40) = a3;
    *(void *)(v13 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = a4;
    *(void *)(v13 + 56) = a5;
    sub_100023E74();
  }

  else
  {
    __break(1u);
  }

Swift::String __swiftcall ByteBuffer._Storage.dumpBytes(slice:offset:length:)( ASOctaneSupportXPCService::_ByteBufferSlice slice, Swift::Int offset, Swift::Int length)
{
  uint64_t v4 = *(void *)&slice._begin._backing._1;
  uint64_t v5 = *(void *)&slice._begin._backing._0;
  unint64_t v6 = *(void *)&slice.upperBound;
  uint64_t v28 = 91LL;
  unint64_t v29 = 0xE100000000000000LL;
  uint64_t v7 = sub_1000487CC(v3 + 24, (uint64_t)v27);
  uint64_t v9 = (v6 >> 24) & 0xFFFF00 | BYTE6(v6);
  int64_t v10 = v9 + v5;
  if (__OFADD__(v9, v5))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v11 = v10 + v4;
  if (__OFADD__(v10, v4))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (v11 < v10)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (v10 != v11)
  {
    if (v10 >= v11)
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }

    uint64_t v12 = *(void *)(v3 + 24);
    unint64_t v13 = *(unsigned int *)(v3 + 16);
    while (v10 < v13)
    {
      char v14 = *(_BYTE *)(v12 + v10++);
      LOBYTE(v26._countAndFlagsBits) = v14;
      unint64_t v15 = sub_10005E4D8();
      uint64_t v16 = String.init<A>(_:radix:uppercase:)(&v26, 16LL, 0LL, &type metadata for UInt8, v15);
      uint64_t v18 = v17;
      v26._countAndFlagsBits = 32LL;
      v26._object = (void *)0xE100000000000000LL;
      uint64_t v19 = String.count.getter(v16, v17);
      BOOL v20 = v19 == 1;
      if (v19 == 1) {
        uint64_t v21 = 48LL;
      }
      else {
        uint64_t v21 = 0LL;
      }
      if (v20) {
        unint64_t v22 = 0xE100000000000000LL;
      }
      else {
        unint64_t v22 = 0xE000000000000000LL;
      }
      unint64_t v23 = v22;
      String.append(_:)(*(Swift::String *)&v21);
      swift_bridgeObjectRelease();
      v24._countAndFlagsBits = v16;
      v24._object = v18;
      String.append(_:)(v24);
      sub_10003561C();
      String.append(_:)(v26);
      uint64_t v7 = sub_100023EEC();
      if (!--v4) {
        goto LABEL_15;
      }
    }

    __break(1u);
    goto LABEL_17;
  }

Swift::Void __swiftcall ByteBuffer._copyStorageAndRebase(capacity:resetIndices:)( Swift::UInt32 capacity, Swift::Bool resetIndices)
{
  uint64_t v3 = v2;
  if (resetIndices) {
    unsigned int v5 = *((_DWORD *)v3 + 2);
  }
  else {
    unsigned int v5 = 0;
  }
  unsigned int v6 = *((unsigned __int8 *)v3 + 22) | (*((unsigned __int16 *)v3 + 10) << 8);
  uint64_t v7 = v6 + v5;
  if (__CFADD__(v6, v5))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  unsigned int v8 = *((_DWORD *)v3 + 4);
  BOOL v9 = v8 >= v6;
  unsigned int v10 = v8 - v6;
  if (!v9) {
    goto LABEL_16;
  }
  if (__CFADD__((_DWORD)v7, v10))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (__CFADD__((_DWORD)v7, capacity))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v11 = sub_10005BE30(v7 + v10, v8, v7 + capacity, (uint64_t)_swiftEmptyArrayStorage);
  if (v11 < v7)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v12 = *v3;
  ByteBuffer._Storage.reallocSlice(_:capacity:)(v7 | (v11 << 32), capacity);
  uint64_t v14 = v13;
  swift_release(v12);
  *uint64_t v3 = v14;
  unsigned int v15 = *((_DWORD *)v3 + 2);
  BOOL v9 = v15 >= v5;
  unsigned int v16 = v15 - v5;
  if (!v9) {
    goto LABEL_20;
  }
  *((_DWORD *)v3 + 2) = v16;
  unsigned int v17 = *((_DWORD *)v3 + 3);
  BOOL v9 = v17 >= v5;
  unsigned int v18 = v17 - v5;
  if (v9)
  {
    *((_DWORD *)v3 + sub_100019F7C(v0 + 3) = v18;
    sub_10005EE08();
    return;
  }

uint64_t sub_10005BE30(unsigned int a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  if (a2 >= a1) {
    unsigned int v4 = a1;
  }
  else {
    unsigned int v4 = a2;
  }
  if (v4 >= a3) {
    uint64_t result = a3;
  }
  else {
    uint64_t result = v4;
  }
  uint64_t v6 = *(void *)(a4 + 16);
  if (v6)
  {
    uint64_t v7 = (unsigned int *)(a4 + 32);
    do
    {
      unsigned int v9 = *v7++;
      unsigned int v8 = v9;
      else {
        uint64_t result = v8;
      }
      --v6;
    }

    while (v6);
  }

  return result;
}

Swift::Void __swiftcall ByteBuffer._copyStorageAndRebase(extraCapacity:resetIndices:)( Swift::UInt32 extraCapacity, Swift::Bool resetIndices)
{
  if (v5)
  {
    BOOL v5 = __CFADD__(v4, v2);
    Swift::UInt32 v6 = v4 + v2;
    if (!v5)
    {
      ByteBuffer._copyStorageAndRebase(capacity:resetIndices:)(v6, v3 & 1);
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

Swift::Void __swiftcall ByteBuffer._ensureAvailableCapacity(_:at:)(Swift::UInt32 _, Swift::UInt32 at)
{
  uint64_t v4 = *((unsigned __int8 *)v2 + 22) | (*((unsigned __int16 *)v2 + 10) << 8);
  int v5 = v4 + at;
  if (__CFADD__((_DWORD)v4, at))
  {
    __break(1u);
    goto LABEL_16;
  }

  unsigned int v6 = v5 + _;
  if (__CFADD__(v5, _))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v7 = v2;
  uint64_t v8 = *((unsigned int *)v2 + 4);
  if (v8 >= v6)
  {
LABEL_14:
    sub_1000193B8();
    return;
  }

  uint64_t v9 = *v2;
  unsigned int v10 = *(_DWORD *)(*v7 + 16);
  if (v10 >= v6)
  {
    if (v10 >= v4)
    {
LABEL_13:
      unsigned __int16 v14 = (unsigned __int16)_UInt24.init(_:)(v4);
      *((_DWORD *)v7 + 4) = v10;
      *((_WORD *)v7 + 10) = v14;
      *((_BYTE *)v7 + 22) = v15;
      goto LABEL_14;
    }

    __break(1u);
    goto LABEL_11;
  }

  BOOL v11 = __CFADD__(at, _);
  at += _;
  if (v11)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (!(_DWORD)v4)
  {
LABEL_11:
    sub_10005ED60(v4, at);
    goto LABEL_12;
  }

  if (v8 >= v4)
  {
    ByteBuffer._Storage.reallocSlice(_:capacity:)(v4 | (v8 << 32), at);
    uint64_t v13 = v12;
    swift_release(v9);
    uint64_t *v7 = v13;
    uint64_t v9 = v13;
LABEL_12:
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = 0;
    unsigned int v10 = *(_DWORD *)(v9 + 16);
    goto LABEL_13;
  }

Swift::Void __swiftcall ByteBuffer._moveReaderIndex(forwardBy:)(Swift::Int forwardBy)
{
  int v2 = *(_DWORD *)(v1 + 8);
  BOOL v3 = __CFADD__(v2, (_DWORD)forwardBy);
  int v4 = v2 + forwardBy;
  if (v3) {
    __break(1u);
  }
  else {
    *(_DWORD *)(v1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v4;
  }
}

Swift::Void __swiftcall ByteBuffer._moveWriterIndex(forwardBy:)(Swift::Int forwardBy)
{
  int v2 = *(_DWORD *)(v1 + 12);
  BOOL v3 = __CFADD__(v2, (_DWORD)forwardBy);
  int v4 = v2 + forwardBy;
  if (v3) {
    __break(1u);
  }
  else {
    *(_DWORD *)(v1 + 12) = v4;
  }
}

uint64_t ByteBuffer._setBytes(_:at:)(uint64_t a1, uint64_t a2, Swift::UInt32 a3)
{
  if (a1) {
    unint64_t v4 = a2 - a1;
  }
  else {
    unint64_t v4 = 0LL;
  }
  int v5 = a3 + v4;
  if (__CFADD__(a3, (_DWORD)v4))
  {
    __break(1u);
  }

  else
  {
    if ((sub_10005EB8C() & 1) == 0) {
      sub_10005ECB4(v5 - *(_DWORD *)(v3 + 16));
    }
    if ((v4 & 0x8000000000000000LL) != 0) {
      goto LABEL_13;
    }
    if (HIDWORD(v4))
    {
      sub_100034FD0();
      sub_100035144();
      goto LABEL_15;
    }

    ByteBuffer._ensureAvailableCapacity(_:at:)(v4, a3);
    unsigned int v9 = *(_DWORD *)(v3 + 16);
    int v10 = *(unsigned __int16 *)(v3 + 20);
    int v11 = *(unsigned __int8 *)(v3 + 22);
    uint64_t v12 = (void *)(*(void *)v3 + 24LL);
    sub_1000487CC((uint64_t)v12, (uint64_t)v23);
    unsigned int v13 = v11 | (v10 << 8);
    if (v9 >= v13)
    {
      sub_10005B138(a3, *v12 + v13, *v12 + v13 + v9 - v13);
      uint64_t v14 = UnsafeMutableRawBufferPointer.init(fastRebase:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v14);
      return v4;
    }
  }

  __break(1u);
LABEL_13:
  sub_100034FD0();
  sub_100035154();
LABEL_15:
  uint64_t result = sub_100035124(v16, v17, v18, v19, v20, v21, v22);
  __break(1u);
  return result;
}

uint64_t ByteBuffer._setBytesAssumingUniqueBufferAccess(_:at:)(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v7 = *v3;
  unsigned int v8 = *((_DWORD *)v3 + 4);
  int v9 = *((unsigned __int16 *)v3 + 10);
  int v10 = *((unsigned __int8 *)v3 + 22);
  int v11 = (void *)(v7 + 24);
  uint64_t result = sub_1000487CC(v7 + 24, (uint64_t)v15);
  unsigned int v13 = v10 | (v9 << 8);
  if (v8 < v13)
  {
    __break(1u);
  }

  else
  {
    sub_10005B138(a3, *v11 + v13, *v11 + v13 + v8 - v13);
    uint64_t v14 = UnsafeMutableRawBufferPointer.init(fastRebase:)();
    return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v14);
  }

  return result;
}

uint64_t ByteBuffer._slicedStorageBuffer.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4 = (void *)(a1 + 24);
  uint64_t result = sub_1000487CC(a1 + 24, (uint64_t)v7);
  unsigned int v6 = (a3 >> 24) & 0xFFFF00 | BYTE6(a3);
  __break(1u);
  return result;
}

uint64_t sub_10005C1BC(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt32 a4)
{
  uint64_t v5 = v4;
  unint64_t v9 = a3 - a2;
  if (a3 < a2) {
    v9 += *(void *)(a1 + 16);
  }
  unsigned int v10 = a4 + v9;
  if (__CFADD__(a4, (_DWORD)v9))
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }

  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)v5) & 1) == 0)
  {
    unsigned int v11 = *(_DWORD *)(v5 + 16);
    BOOL v12 = v10 >= v11;
    Swift::UInt32 v13 = v10 - v11;
    if (v12) {
      Swift::UInt32 v14 = v13;
    }
    else {
      Swift::UInt32 v14 = 0;
    }
    ByteBuffer._copyStorageAndRebase(extraCapacity:resetIndices:)(v14, 0);
  }

  uint64_t v15 = sub_10005CE38(v9, (uint64_t *)v5, a4);
  uint64_t v16 = sub_10010AB8C((uint64_t)v46, v15, v9, a1, a2, a3);
  uint64_t v17 = v46[1];
  uint64_t v44 = v46[0];
  uint64_t v18 = v46[2];
  unint64_t v19 = v47;
  int v20 = v48;
  int v21 = v49;
  swift_retain();
  if (v18 < 0)
  {
LABEL_46:
    uint64_t v40 = "Negative value is not representable";
    uint64_t v41 = 35LL;
    goto LABEL_47;
  }

  Swift::UInt32 v22 = a4;
  if (!HIDWORD(v18))
  {
    BOOL v23 = v50;
    BOOL v24 = v20 == 0xFFFF;
    for (BOOL i = v21 == 255; ; BOOL i = 1)
    {
      if (v19 == v18 && v24 && i && ((v23 ^ (v18 < v17)) & 1) != 0)
      {
        swift_release(v44);
        return v16;
      }

      unint64_t v26 = *(void *)(v44 + 16);
      if (v26 <= v19) {
        break;
      }
      uint64_t v27 = (char *)(v44 + 32 + 2 * v19);
      if ((v27[1] & 1) != 0) {
        goto LABEL_45;
      }
      unint64_t v19 = (v26 + 0x1FFFFFFFFLL) & (v19 + 1);
      if (HIDWORD(v19)) {
        goto LABEL_35;
      }
      char v28 = *v27;
      BOOL v50 = (uint64_t)v19 >= v17;
      unint64_t v29 = v16 + 1;
      if (__OFADD__(v16, 1LL)) {
        goto LABEL_38;
      }
      if ((v29 & 0x8000000000000000LL) != 0) {
        goto LABEL_46;
      }
      if (HIDWORD(v29)) {
        goto LABEL_35;
      }
      uint64_t v30 = *(unsigned __int16 *)(v5 + 20);
      uint64_t v31 = *(unsigned __int8 *)(v5 + 22);
      uint64_t v32 = v31 | ((_DWORD)v30 << 8);
      int v33 = v32 + v22;
      if (__CFADD__((_DWORD)v32, v22)) {
        goto LABEL_39;
      }
      unsigned int v34 = v33 + v29;
      if (__CFADD__(v33, (_DWORD)v29)) {
        goto LABEL_40;
      }
      uint64_t v35 = *(unsigned int *)(v5 + 16);
      uint64_t v36 = *(void *)v5;
      if (v35 < v34)
      {
        unsigned int v37 = *(_DWORD *)(v36 + 16);
        if (v37 >= v34)
        {
          *(_DWORD *)(v5 + 16) = v37;
        }

        else
        {
          if (__CFADD__(a4, (_DWORD)v29)) {
            goto LABEL_41;
          }
          if ((_DWORD)v32)
          {
            ByteBuffer._Storage.reallocSlice(_:capacity:)(v32 | (v35 << 32), a4 + v29);
            uint64_t v39 = v38;
            swift_release(v36);
            *(void *)uint64_t v5 = v39;
            uint64_t v36 = v39;
          }

          else
          {
            ByteBuffer._Storage.reallocStorage(capacity:)(a4 + v29);
            uint64_t v39 = *(void *)v5;
          }

          uint64_t v31 = 0LL;
          uint64_t v30 = 0LL;
          *(_DWORD *)(v5 + 16) = *(_DWORD *)(v36 + 16);
          *(_WORD *)(v5 + 20) = 0;
          *(_BYTE *)(v5 + 22) = 0;
          uint64_t v36 = v39;
          Swift::UInt32 v22 = a4;
        }
      }

      unint64_t v19 = v19;
      swift_beginAccess(v36 + 24, v45, 0LL, 0LL);
      *(_BYTE *)(*(void *)(v36 + 24) + (v31 | (v30 << 8)) + a4 + v16) = v28;
      BOOL v23 = v50;
      ++v16;
      BOOL v24 = 1;
    }

    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }

void sub_10005C50C(Swift::UInt32 a1)
{
  uint64_t v3 = sub_1000175B0(&qword_1002AC148);
  if (v3 == sub_1000175B0(&qword_1002AC070))
  {
    __break(1u);
  }

  else
  {
    if ((sub_10005EB8C() & 1) == 0) {
      sub_10005ECB4(a1 - *(_DWORD *)(v1 + 16));
    }
    sub_10005CE38(0LL, (uint64_t *)v1, a1);
    sub_1000193B8();
  }

void sub_10005C578(uint64_t a1, unint64_t a2, Swift::UInt32 a3)
{
  if ((_UNKNOWN *)sub_1000175B0(&qword_1002AC070) == &type metadata for String.UTF8View) {
    goto LABEL_20;
  }
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v7 = String.UTF8View._foreignCount()();
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    Swift::Int v7 = HIBYTE(a2) & 0xF;
  }

  else
  {
    Swift::Int v7 = a1 & 0xFFFFFFFFFFFFLL;
  }

  unsigned int v8 = a3 + v7;
  if (__CFADD__(a3, (_DWORD)v7))
  {
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  if ((sub_10005EB8C() & 1) == 0)
  {
    sub_10005EE1C();
    BOOL v11 = v9 >= v10;
    unsigned int v12 = v9 - v10;
    if (!v11) {
      goto LABEL_18;
    }
    BOOL v11 = v8 >= v9;
    unsigned int v13 = v8 - v9;
    if (!v11) {
      unsigned int v13 = 0;
    }
    if (__CFADD__(v12, v13)) {
      goto LABEL_19;
    }
    ByteBuffer._copyStorageAndRebase(capacity:resetIndices:)(v12 + v13, 0);
  }

  uint64_t v14 = sub_10005CE38(v7, v3, a3);
  swift_bridgeObjectRetain();
  _StringGuts.copyUTF8(into:)(v14, v7, a1, a2);
  if ((v15 & 1) == 0)
  {
    sub_100019390();
    return;
  }

void sub_10005C678()
{
  if ((void *)sub_1000175B0(&qword_1002AC070) == &type metadata for Data)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    sub_100034FD0();
    sub_100035154();
    goto LABEL_40;
  }

  uint64_t v8 = sub_10005EAA0(v4, v3);
  unsigned int v9 = v0 + v8;
  if (__CFADD__(v0, (_DWORD)v8))
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  if ((sub_10005EEA4() & 1) == 0)
  {
    unsigned int v10 = *((_DWORD *)v1 + 4);
    unsigned int v11 = *((unsigned __int8 *)v1 + 22) | (*((unsigned __int16 *)v1 + 10) << 8);
    BOOL v12 = v10 >= v11;
    unsigned int v13 = v10 - v11;
    if (!v12) {
      goto LABEL_35;
    }
    BOOL v12 = v9 >= v10;
    unsigned int v14 = v9 - v10;
    if (!v12) {
      unsigned int v14 = 0;
    }
    if (__CFADD__(v13, v14)) {
      goto LABEL_36;
    }
    ByteBuffer._copyStorageAndRebase(capacity:resetIndices:)(v13 + v14, 0);
  }

  sub_10005EC58();
  sub_10005ED40();
  sub_10005EC0C();
  sub_10005EDC8();
  sub_10005EB08();
  uint64_t v15 = v2;
  sub_10005EBDC();
  if (v34 == 1)
  {
LABEL_27:
    sub_10005ECA0();
    sub_10002A580();
    return;
  }

  while (1)
  {
    unint64_t v16 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }

    if ((v16 & 0x8000000000000000LL) != 0) {
      goto LABEL_38;
    }
    if (HIDWORD(v16)) {
      break;
    }
    sub_10005EE78();
    if (v12) {
      goto LABEL_29;
    }
    if (__CFADD__(v17, (_DWORD)v16)) {
      goto LABEL_30;
    }
    sub_10005EE58();
    if (!v12)
    {
      unsigned int v23 = *(_DWORD *)(v15 + 16);
      if (v23 >= v21)
      {
        *((_DWORD *)v1 + 4) = v23;
      }

      else
      {
        Swift::UInt32 v24 = v22 + v16;
        if (__CFADD__(v22, (_DWORD)v16)) {
          goto LABEL_31;
        }
        if ((_DWORD)v19)
        {
          sub_10005EE44(v24, v19);
          sub_10005EC70();
          *uint64_t v1 = v5;
          uint64_t v15 = v5;
        }

        else
        {
          sub_10005ED60(v18, v24);
          uint64_t v5 = *v1;
        }

        sub_10005EBE8();
      }
    }

    sub_1000487CC(v15 + 24, (uint64_t)v33);
    sub_10005EB64();
    ++v8;
    if ((v34 & 1) != 0) {
      goto LABEL_27;
    }
  }

  sub_100034FD0();
  sub_100035144();
LABEL_40:
  sub_100035124(v25, v26, v27, v28, v29, v30, v31);
  __break(1u);
}

void sub_10005C89C(char a1, Swift::UInt32 a2)
{
  uint64_t v5 = sub_1000175B0(&qword_1002AC158);
  if (v5 == sub_1000175B0(&qword_1002AC070)) {
    goto LABEL_7;
  }
  if (a2 == -1)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return;
  }

  if ((sub_10005EB8C() & 1) == 0) {
    sub_10005ECB4(a2 + 1 - *(_DWORD *)(v2 + 16));
  }
  *(_BYTE *)sub_10005CE38(1uLL, (uint64_t *)v2, a2) = a1;
  sub_1000193B8();
}

void sub_10005C91C()
{
  if ((void *)sub_1000175B0(&qword_1002AC070) == &type metadata for Data)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    sub_100034FD0();
    sub_100035154();
    goto LABEL_36;
  }

  uint64_t v8 = sub_10005EAA0(v4, v3);
  unsigned int v9 = v0 + v8;
  if (__CFADD__(v0, (_DWORD)v8))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  if ((sub_10005EEA4() & 1) == 0)
  {
    unsigned int v10 = *((_DWORD *)v1 + 4);
    BOOL v11 = v9 >= v10;
    Swift::UInt32 v12 = v9 - v10;
    if (v11) {
      Swift::UInt32 v13 = v12;
    }
    else {
      Swift::UInt32 v13 = 0;
    }
    ByteBuffer._copyStorageAndRebase(extraCapacity:resetIndices:)(v13, 0);
  }

  sub_10005EC58();
  sub_10005ED40();
  sub_10005EC0C();
  sub_10005EDC8();
  sub_10005EB08();
  uint64_t v14 = v2;
  sub_10005EBDC();
  if (v33 == 1)
  {
LABEL_25:
    sub_10005ECA0();
    sub_10002A580();
    return;
  }

  while (1)
  {
    unint64_t v15 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }

    if ((v15 & 0x8000000000000000LL) != 0) {
      goto LABEL_34;
    }
    if (HIDWORD(v15)) {
      break;
    }
    sub_10005EE78();
    if (v11) {
      goto LABEL_27;
    }
    if (__CFADD__(v16, (_DWORD)v15)) {
      goto LABEL_28;
    }
    sub_10005EE58();
    if (!v11)
    {
      unsigned int v22 = *(_DWORD *)(v14 + 16);
      if (v22 >= v20)
      {
        *((_DWORD *)v1 + 4) = v22;
      }

      else
      {
        Swift::UInt32 v23 = v21 + v15;
        if (__CFADD__(v21, (_DWORD)v15)) {
          goto LABEL_29;
        }
        if ((_DWORD)v18)
        {
          sub_10005EE44(v23, v18);
          sub_10005EC70();
          *uint64_t v1 = v5;
          uint64_t v14 = v5;
        }

        else
        {
          sub_10005ED60(v17, v23);
          uint64_t v5 = *v1;
        }

        sub_10005EBE8();
      }
    }

    sub_1000487CC(v14 + 24, (uint64_t)v32);
    sub_10005EB64();
    ++v8;
    if ((v33 & 1) != 0) {
      goto LABEL_25;
    }
  }

  sub_100034FD0();
  sub_100035144();
LABEL_36:
  sub_100035124(v24, v25, v26, v27, v28, v29, v30);
  __break(1u);
}

void ByteBuffer._setSlowPath<A>(bytes:at:)(uint64_t *a1, Swift::UInt32 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a4,  a3,  &protocol requirements base descriptor for Sequence,  &associated type descriptor for Sequence.Iterator);
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  unint64_t v46 = (char *)&v44 - v11;
  if (sub_1000175B0(&qword_1002AC070) == a3)
  {
    sub_10005C1BC(*a1, a1[1], a1[2], a2);
    return;
  }

  unint64_t v12 = dispatch thunk of Sequence.underestimatedCount.getter(a3, a4);
  Swift::UInt32 v45 = a2;
  unsigned int v13 = a2 + v12;
  if (__CFADD__(a2, (_DWORD)v12))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    sub_100034FD0();
    sub_100035144();
  }

  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(void *)v5) & 1) == 0)
    {
      unsigned int v14 = *(_DWORD *)(v5 + 16);
      BOOL v15 = v13 >= v14;
      Swift::UInt32 v16 = v13 - v14;
      if (v15) {
        Swift::UInt32 v17 = v16;
      }
      else {
        Swift::UInt32 v17 = 0;
      }
      ByteBuffer._copyStorageAndRebase(extraCapacity:resetIndices:)(v17, 0);
    }

    uint64_t v44 = v10;
    uint64_t v18 = v45;
    uint64_t v19 = sub_10005CE38(v12, (uint64_t *)v5, v45);
    uint64_t v20 = UnsafeMutableBufferPointer.initialize<A>(from:)(v46, a1, v19, v12, &type metadata for UInt8, a3, a4);
    uint64_t v21 = AssociatedTypeWitness;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a4,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for Sequence,  &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    int v23 = dispatch thunk of IteratorProtocol.next()(v21, AssociatedConformanceWitness);
    if (v49 == 1)
    {
LABEL_28:
      (*(void (**)(char *, uint64_t))(v44 + 8))(v46, AssociatedTypeWitness);
      sub_10002A580();
      return;
    }

    uint64_t v24 = v18;
    uint64_t v25 = v18;
    while (1)
    {
      unint64_t v26 = v20 + 1;
      if (__OFADD__(v20, 1LL))
      {
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }

      if ((v26 & 0x8000000000000000LL) != 0) {
        break;
      }
      if (HIDWORD(v26)) {
        goto LABEL_36;
      }
      uint64_t v27 = *(unsigned __int16 *)(v5 + 20);
      uint64_t v28 = *(unsigned __int8 *)(v5 + 22);
      uint64_t v29 = v28 | ((_DWORD)v27 << 8);
      int v30 = v29 + v25;
      if (__CFADD__((_DWORD)v29, (_DWORD)v25)) {
        goto LABEL_30;
      }
      unsigned int v31 = v30 + v26;
      if (__CFADD__(v30, (_DWORD)v26)) {
        goto LABEL_31;
      }
      char v32 = v48[30];
      unsigned int v33 = *(_DWORD *)(v5 + 16);
      uint64_t v34 = *(void *)v5;
      if (v33 < v31)
      {
        unsigned int v35 = *(_DWORD *)(v34 + 16);
        if (v35 >= v31)
        {
          *(_DWORD *)(v5 + 16) = v35;
        }

        else
        {
          Swift::UInt32 v36 = v25 + v26;
          if (__CFADD__((_DWORD)v25, (_DWORD)v26)) {
            goto LABEL_32;
          }
          if ((_DWORD)v29)
          {
            sub_10005EE44(v36, v29);
            sub_10005EC70();
            *(void *)uint64_t v5 = v25;
          }

          else
          {
            sub_10005ED60(v23, v36);
            uint64_t v25 = *(void *)v5;
          }

          uint64_t v28 = 0LL;
          uint64_t v27 = 0LL;
          sub_10005EE08();
          uint64_t v34 = v25;
          uint64_t v25 = v45;
        }
      }

      sub_1000487CC(v34 + 24, (uint64_t)v48);
      *(_BYTE *)(*(void *)(v34 + 24) + (v28 | (v27 << 8)) + v24 + v20) = v32;
      int v23 = dispatch thunk of IteratorProtocol.next()(AssociatedTypeWitness, AssociatedConformanceWitness);
      ++v20;
      if (v49 == 1) {
        goto LABEL_28;
      }
    }

    sub_100034FD0();
    sub_100035154();
  }

  sub_100035124(v37, v38, v39, v40, v41, v42, v43);
  __break(1u);
}

uint64_t sub_10005CE38(unint64_t a1, uint64_t *a2, Swift::UInt32 at)
{
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    unsigned int v9 = "Negative value is not representable";
    uint64_t v10 = 35LL;
  }

  else
  {
    if (!HIDWORD(a1))
    {
      ByteBuffer._ensureAvailableCapacity(_:at:)(a1, at);
      uint64_t v5 = *a2;
      uint64_t v6 = *((unsigned __int16 *)a2 + 10);
      uint64_t v7 = *((unsigned __int8 *)a2 + 22);
      swift_beginAccess(v5 + 24, v11, 0LL, 0LL);
      return *(void *)(v5 + 24) + (v7 | (v6 << 8)) + at;
    }

    unsigned int v9 = "Not enough bits to represent the passed value";
    uint64_t v10 = 45LL;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11LL, 2LL, v9, v10, 2LL, "Swift/Integers.swift", 20LL);
  __break(1u);
  return result;
}

void ByteBuffer._setBytes<A>(_:at:)(uint64_t *a1, Swift::UInt32 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  v10[2] = v5;
  Swift::UInt32 v11 = a2;
  dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)( &v12,  sub_10005E514,  v10,  &type metadata for UInt32,  a3,  a4);
  if ((v12 & 0x100000000LL) != 0) {
    ByteBuffer._setSlowPath<A>(bytes:at:)(a1, a2, a3, a4);
  }
}

void sub_10005CFCC(uint64_t a1@<X0>, uint64_t a2@<X1>, Swift::UInt32 a3@<W3>, _DWORD *a4@<X8>)
{
  if (a1) {
    uint64_t v4 = a1 + a2;
  }
  else {
    uint64_t v4 = 0LL;
  }
  *a4 = ByteBuffer._setBytes(_:at:)(a1, v4, a3);
  sub_10005EDFC();
}

uint64_t ByteBuffer.writableBytes.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int v3 = (a3 >> 24) & 0xFFFF00 | BYTE6(a3);
  BOOL v4 = a3 >= v3;
  unsigned int v5 = a3 - v3;
  if (v4)
  {
    uint64_t result = v5 - HIDWORD(a2);
    if (v5 >= HIDWORD(a2)) {
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t ByteBuffer.capacity.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int v3 = (a3 >> 24) & 0xFFFF00 | BYTE6(a3);
  uint64_t result = a3 - v3;
  return result;
}

uint64_t ByteBuffer.storageCapacity.getter(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

Swift::Void __swiftcall ByteBuffer.reserveCapacity(_:)(Swift::Int a1)
{
  BOOL v4 = v2 >= v3;
  uint64_t v5 = v2 - v3;
  if (v4)
  {
    if (v5 >= v1)
    {
      sub_10001945C();
    }

    else if (sub_10005EB8C())
    {
      Swift::UInt32 v6 = sub_10005EE38();
      sub_10005EC7C(v6, v7);
    }

    else
    {
      Swift::UInt32 v8 = sub_10005EE38();
      sub_10005EC84(v8, v9);
    }
  }

  else
  {
    __break(1u);
  }

Swift::Void __swiftcall ByteBuffer.reserveCapacity(minimumWritableBytes:)(Swift::Int minimumWritableBytes)
{
  uint64_t v2 = *(unsigned int *)(v1 + 12);
  uint64_t v3 = v2 + minimumWritableBytes;
  if (__OFADD__(v2, minimumWritableBytes))
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }

  sub_10005ED10();
  if (!v5) {
    goto LABEL_10;
  }
  if (v3 <= v4)
  {
    sub_10001945C();
  }

  else if (sub_10005EB8C())
  {
    Swift::UInt32 v6 = sub_10005EE38();
    sub_10005EC7C(v6, v7);
  }

  else
  {
    Swift::UInt32 v8 = sub_10005EE38();
    sub_10005EC84(v8, v9);
  }

Swift::Void __swiftcall ByteBuffer._copyStorageAndRebaseIfNeeded()()
{
  if ((sub_10005EB8C() & 1) == 0)
  {
    Swift::UInt32 v0 = sub_10005ECF8();
    if (v1) {
      ByteBuffer._copyStorageAndRebase(capacity:resetIndices:)(v0, 0);
    }
    else {
      __break(1u);
    }
  }

uint64_t sub_10005D13C()
{
  uint64_t v16 = v0;
  uint64_t v17 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  ByteBuffer._copyStorageAndRebaseIfNeeded()();
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  uint64_t v7 = *(unsigned __int16 *)(v5 + 20);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 22);
  Swift::Bool v9 = (void *)(*(void *)v5 + 24LL);
  uint64_t result = sub_1000487CC((uint64_t)v9, (uint64_t)&v15);
  unsigned int v11 = *(_DWORD *)(v5 + 12);
  BOOL v12 = v11 >= v6;
  unsigned int v13 = v11 - v6;
  if (v12)
  {
    uint64_t v14 = *v9 + (v8 | (v7 << 8)) + v6;
    return v3(v14, v14 + v13);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void ByteBuffer.withUnsafeMutableReadableBytes<A>(_:)()
{
  unsigned int v1 = *(_DWORD *)(v0 + 8);
  sub_1000487CC(*(void *)v0 + 24LL, (uint64_t)v2);
  if (*(_DWORD *)(v0 + 12) >= v1)
  {
    sub_10005EBB0();
    sub_10005EBC0();
  }

  else
  {
    __break(1u);
  }

uint64_t ByteBuffer.readerIndex.getter(uint64_t a1, unsigned int a2)
{
  return a2;
}

uint64_t sub_10005D250(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  int v5 = *(unsigned __int16 *)(a1 + 20);
  int v6 = *(unsigned __int8 *)(a1 + 22);
  uint64_t v7 = (void *)(*(void *)a1 + 24LL);
  uint64_t result = swift_beginAccess(v7, v11, 0LL, 0LL);
  unsigned int v9 = v6 | (v5 << 8);
  if (v4 < v9)
  {
    __break(1u);
  }

  else
  {
    sub_10005B138(*(unsigned int *)(a1 + 12), *v7 + v9, *v7 + v9 + v4 - v9);
    uint64_t v10 = UnsafeMutableRawBufferPointer.init(fastRebase:)();
    return a2(v10);
  }

  return result;
}

void ByteBuffer.withUnsafeMutableWritableBytes<A>(_:)()
{
  unsigned int v1 = *(_DWORD *)(v0 + 16);
  int v2 = *(unsigned __int16 *)(v0 + 20);
  int v3 = *(unsigned __int8 *)(v0 + 22);
  unsigned int v4 = (void *)(*(void *)v0 + 24LL);
  sub_1000487CC((uint64_t)v4, (uint64_t)v6);
  unsigned int v5 = v3 | (v2 << 8);
  if (v1 < v5)
  {
    __break(1u);
  }

  else
  {
    sub_10005B138(*(unsigned int *)(v0 + 12), *v4 + v5, *v4 + v5 + v1 - v5);
    UnsafeMutableRawBufferPointer.init(fastRebase:)();
    sub_10005EBB0();
    sub_10005EBC0();
  }

uint64_t ByteBuffer.writeWithUnsafeMutableBytes(minimumWritableBytes:_:)( Swift::Int a1, uint64_t (*a2)(uint64_t))
{
  if (a1 >= 1) {
    ByteBuffer.reserveCapacity(minimumWritableBytes:)(a1);
  }
  uint64_t result = sub_10005D250(v2, a2);
  if (!v3)
  {
    int v6 = *(_DWORD *)(v2 + 12);
    BOOL v7 = __CFADD__(v6, (_DWORD)result);
    int v8 = v6 + result;
    if (v7) {
      __break(1u);
    }
    else {
      *(_DWORD *)(v2 + 12) = v8;
    }
  }

  return result;
}

uint64_t ByteBuffer.writeWithUnsafeMutableBytes(_:)()
{
  uint64_t result = sub_10005D250(v0, (uint64_t (*)(uint64_t))sub_10005E558);
  if (!v1)
  {
    int v3 = *(_DWORD *)(v0 + 12);
    BOOL v4 = __CFADD__(v3, (_DWORD)result);
    int v5 = v3 + result;
    if (v4) {
      __break(1u);
    }
    else {
      *(_DWORD *)(v0 + 12) = v5;
    }
  }

  return result;
}

void ByteBuffer.withVeryUnsafeBytes<A>(_:)(void (*a1)(void, void), uint64_t a2, uint64_t a3)
{
  BOOL v4 = (void *)(a3 + 24);
  sub_1000487CC(a3 + 24, (uint64_t)v8);
  sub_10005EDB0();
  if (v7)
  {
    a1(*v4 + v5, *v4 + v5 + v6);
    sub_10005EC8C();
  }

  else
  {
    __break(1u);
  }

void ByteBuffer.withVeryUnsafeMutableBytes<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v23;
  a22 = v24;
  sub_10005EB9C();
  unsigned int v25 = *(_DWORD *)(v22 + 16);
  int v26 = *(unsigned __int16 *)(v22 + 20);
  int v27 = *(unsigned __int8 *)(v22 + 22);
  sub_1000487CC(*(void *)v22 + 24LL, (uint64_t)&a10);
  if (v25 < (v27 | (v26 << 8)))
  {
    __break(1u);
  }

  else
  {
    sub_10005EBB0();
    sub_10005EB4C();
  }

uint64_t sub_10005D4E4()
{
  uint64_t v19 = v1;
  uint64_t v20 = v2;
  uint64_t v4 = v3;
  unint64_t v6 = v5;
  uint64_t v8 = v7;
  unsigned int v10 = v9;
  unint64_t v11 = HIDWORD(v9);
  uint64_t result = sub_1000487CC(v12 + 24, (uint64_t)&v17);
  if (v11 < v10)
  {
    __break(1u);
  }

  else
  {
    sub_10005ED88();
    sub_10005E0FC((const void *)(v14 + v10), v14 + v10 + v15, v8, v6, v4 & 0xFFFFFFFFFFFFFFLL, &v18);
    swift_release(v8);
    if (!v0) {
      return v18;
    }
    return v16;
  }

  return result;
}

uint64_t sub_10005D590( uint64_t a1, unint64_t a2, unint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, unint64_t, void, void, void), uint64_t a5, uint64_t a6, unint64_t a7, void *a8)
{
  unsigned int v13 = a2;
  unint64_t v14 = HIDWORD(a2);
  unsigned int v15 = (void *)(a1 + 24);
  sub_1000487CC(a1 + 24, (uint64_t)v27);
  if (v14 < v13)
  {
    __break(1u);
    goto LABEL_8;
  }

  if ((a7 & 0x8000000000000000LL) != 0)
  {
LABEL_8:
    sub_100034FD0();
    sub_100035154();
LABEL_10:
    uint64_t result = sub_100035124(v20, v21, v22, v23, v24, v25, v26);
    __break(1u);
    return result;
  }

  if (HIDWORD(a7))
  {
    sub_100034FD0();
    sub_100035144();
    goto LABEL_10;
  }

  uint64_t v16 = *v15 + ((a3 >> 24) & 0xFFFF00 | BYTE6(a3)) + v13;
  uint64_t v17 = v28;
  uint64_t v18 = a4(v16, v16 + v14 - v13, a6, a7, a8[5], a8[6], a8[7]);
  if (!v17) {
    unint64_t v14 = v18;
  }
  sub_10005E9F0((uint64_t)a8);
  return v14;
}

void ByteBuffer.withUnsafeReadableBytes<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v22;
  a22 = v23;
  unsigned int v25 = v24;
  int v27 = v26;
  unint64_t v28 = HIDWORD(v24);
  sub_1000487CC(v29 + 24, (uint64_t)&a10);
  if (v28 < v25)
  {
    __break(1u);
  }

  else
  {
    sub_10005ED88();
    v27(v30 + v25, v30 + v25 + v31);
    sub_10005EB4C();
  }

void ByteBuffer.withUnsafeReadableBytesWithStorageManagement<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v22;
  a22 = v23;
  unint64_t v25 = v24;
  unsigned int v27 = v26;
  uint64_t v29 = v28;
  unint64_t v30 = HIDWORD(v26);
  sub_1000487CC(v28 + 24, (uint64_t)&a10);
  if (v30 < v27)
  {
    __break(1u);
  }

  else
  {
    uint64_t v31 = *(void *)(v29 + 24) + ((v25 >> 24) & 0xFFFF00 | BYTE6(v25)) + v27;
    sub_10005EE98(v31, v31 + v30 - v27);
    sub_10005EB4C();
  }

void ByteBuffer.withVeryUnsafeBytesWithStorageManagement<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v6)
  {
    sub_10005EE98(*(void *)(a3 + 24) + v4, *(void *)(a3 + 24) + v4 + v5);
    sub_10005EC8C();
  }

  else
  {
    __break(1u);
  }

uint64_t ByteBuffer.getSlice(at:length:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t result = 0LL;
  if ((a1 & 0x8000000000000000LL) == 0)
  {
    Swift::UInt32 v7 = a2;
    if ((a2 & 0x8000000000000000LL) == 0 && a4 <= a1 && (uint64_t)(HIDWORD(a4) - a2) >= a1)
    {
      int v9 = BYTE6(a5) | (WORD2(a5) << 8);
      Swift::UInt32 v10 = v9 + a1;
      if (__CFADD__(v9, (_DWORD)a1))
      {
        __break(1u);
      }

      else
      {
        if (!HIBYTE(v10))
        {
          if (!__CFADD__(v10, (_DWORD)a2))
          {
            _UInt24.init(_:)(0);
            _UInt24.init(_:)(v10);
            return swift_retain();
          }

          goto LABEL_16;
        }

        if (!__CFADD__((_DWORD)a1, (_DWORD)a2))
        {
          swift_retain();
          ByteBuffer._copyStorageAndRebase(capacity:resetIndices:)(v7, 1);
          return a3;
        }
      }

      __break(1u);
LABEL_16:
      __break(1u);
    }
  }

  return result;
}

Swift::Bool __swiftcall ByteBuffer.discardReadBytes()()
{
  int v1 = *((_DWORD *)v0 + 2);
  if (!v1) {
    goto LABEL_11;
  }
  if (v1 != *((_DWORD *)v0 + 3))
  {
    if (sub_10005EB8C())
    {
      uint64_t v2 = *v0;
      LOBYTE(vsub_100019F7C(v0 + 3) = sub_1000487CC(*v0 + 24, (uint64_t)v10);
      unsigned int v4 = *((unsigned __int8 *)v0 + 22) | (*((unsigned __int16 *)v0 + 10) << 8);
      unsigned int v5 = *((_DWORD *)v0 + 2);
      if (__CFADD__(v4, v5))
      {
        __break(1u);
      }

      else
      {
        unsigned int v6 = *((_DWORD *)v0 + 3);
        size_t v7 = v6 - v5;
        if (v6 >= v5)
        {
          memmove((void *)(*(void *)(v2 + 24) + v4), (const void *)(*(void *)(v2 + 24) + v4 + v5), v7);
          *((_DWORD *)v0 + 2) = 0;
          *((_DWORD *)v0 + sub_100019F7C(v0 + 3) = v7;
          goto LABEL_11;
        }
      }

      __break(1u);
    }

    else
    {
      Swift::UInt32 v3 = sub_10005ECF8();
      if (v8)
      {
        ByteBuffer._copyStorageAndRebase(capacity:resetIndices:)(v3, 1);
        goto LABEL_11;
      }
    }

    __break(1u);
    return v3;
  }

  v0[1] = 0LL;
LABEL_11:
  LOBYTE(vsub_100019F7C(v0 + 3) = v1 != 0;
  return v3;
}

Swift::Void __swiftcall ByteBuffer.clear(minimumCapacity:)(Swift::UInt32 minimumCapacity)
{
}

Swift::Void __swiftcall ByteBuffer.clear(minimumCapacity:)(Swift::Int minimumCapacity)
{
  if (HIDWORD(minimumCapacity))
  {
    __break(1u);
  }

  else
  {
    Swift::UInt32 v2 = minimumCapacity;
    char v3 = sub_10005EB8C();
    uint64_t v4 = *v1;
    if ((v3 & 1) != 0)
    {
      if (*(_DWORD *)(v4 + 16) < v2) {
        ByteBuffer._Storage.reallocStorage(capacity:)(v2);
      }
    }

    else
    {
      sub_10005B858(v2);
      sub_10005EDD8(v5);
    }

    sub_10005ECC0();
    sub_1000193B8();
  }

void ByteBuffer.description.getter(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unsigned int v4 = a2;
  unint64_t v6 = HIDWORD(a2);
  v17[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(136LL);
  v18[0] = 0LL;
  v18[1] = 0xE000000000000000LL;
  v19._countAndFlagsBits = 0xD00000000000001ALL;
  v19._object = (void *)0x8000000100219D60LL;
  sub_10005EB94(v19);
  v20._countAndFlagsBits = sub_10005ED78();
  sub_10005EB94(v20);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = (unsigned __int16)sub_10005EE4C() | 0x7265746972770000LL;
  v7._object = (void *)0xEF203A7865646E49LL;
  String.append(_:)(v7);
  v17[0] = v6;
  v21._countAndFlagsBits = sub_10005ED78();
  sub_10005EB94(v21);
  sub_10003561C();
  v8._object = (void *)0x8000000100219D80LL;
  v8._countAndFlagsBits = 0xD000000000000011LL;
  String.append(_:)(v8);
  if (v6 < v4)
  {
    __break(1u);
  }

  else
  {
    v17[0] = v6 - v4;
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    sub_10005EB94(v22);
    sub_100023EEC();
    v9._countAndFlagsBits = (unsigned __int16)sub_10005EE4C() | 0x6963617061630000LL;
    v9._object = (void *)0xEC000000203A7974LL;
    String.append(_:)(v9);
    unsigned int v10 = (a3 >> 24) & 0xFFFF00 | BYTE6(a3);
    BOOL v11 = a3 >= v10;
    uint64_t v12 = a3 - v10;
    if (v11)
    {
      v17[0] = v12;
      v23._countAndFlagsBits = sub_10005ED68();
      sub_10005EB94(v23);
      swift_bridgeObjectRelease();
      v24._countAndFlagsBits = 0xD000000000000013LL;
      v24._object = (void *)0x8000000100219DA0LL;
      sub_10005EB94(v24);
      v17[0] = *(unsigned int *)(a1 + 16);
      v25._countAndFlagsBits = sub_10005ED68();
      sub_10005EB94(v25);
      sub_100023EEC();
      v13._countAndFlagsBits = (unsigned __int16)sub_10005EE4C() | 0x3A6563696C730000LL;
      v13._object = (void *)0xE900000000000020LL;
      String.append(_:)(v13);
      v26._countAndFlagsBits = _ByteBufferSlice.description.getter();
      sub_10005EB94(v26);
      swift_bridgeObjectRelease();
      v14._countAndFlagsBits = (unsigned __int16)sub_10005EE4C() | 0x6761726F74730000LL;
      v14._object = (void *)0xEB00000000203A65LL;
      String.append(_:)(v14);
      sub_1000487CC(a1 + 24, (uint64_t)v17);
      uint64_t v16 = *(void *)(a1 + 24);
      _print_unlocked<A, B>(_:_:)(&v16, v18);
      sub_10005EE30(10272LL);
      LODWORD(v16) = *(_DWORD *)(a1 + 16);
      v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
      sub_10005EB94(v27);
      sub_100019390();
      v15._object = (void *)0xE90000000000007DLL;
      v15._countAndFlagsBits = 0x2029736574796220LL;
      String.append(_:)(v15);
      return;
    }
  }

  __break(1u);
}

void ByteBuffer.debugDescription.getter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = HIDWORD(a2);
  _StringGuts.grow(_:)(30LL);
  unint64_t v7 = a3 & 0xFFFFFFFFFFFFFFLL;
  ByteBuffer.description.getter(a1, a2, v7);
  swift_bridgeObjectRelease();
  v8._object = (void *)0x8000000100219DC0LL;
  v8._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v8);
  if (v6 < a2)
  {
    __break(1u);
  }

  else
  {
    __int16 v11 = a2;
    else {
      char v12 = v6 - a2;
    }
    int v13 = v7;
    Swift::String v14 = ByteBuffer._Storage.dumpBytes(slice:offset:length:)( *(ASOctaneSupportXPCService::_ByteBufferSlice *)(&v11 - 2),  v9,  v10);
    String.append(_:)(v14);
    sub_100019390();
  }

void sub_10005DE10()
{
}

uint64_t ByteBuffer.setBytes<A>(_:at:)(uint64_t *a1, Swift::UInt32 a2, uint64_t a3, uint64_t a4)
{
  return result;
}

uint64_t ByteBuffer.setBytes(_:at:)(uint64_t a1, uint64_t a2, Swift::UInt32 a3)
{
  return ByteBuffer._setBytes(_:at:)(a1, a2, a3);
}

Swift::Void __swiftcall ByteBuffer.moveReaderIndex(to:)(Swift::Int to)
{
  else {
    *(_DWORD *)(v1 + _Block_object_dispose((const void *)(v1 - 136), 8) = to;
  }
}

Swift::Void __swiftcall ByteBuffer.moveWriterIndex(forwardBy:)(Swift::Int forwardBy)
{
  int v2 = *(_DWORD *)(v1 + 12);
  BOOL v3 = __CFADD__(v2, (_DWORD)forwardBy);
  unsigned int v4 = v2 + forwardBy;
  if (v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  unsigned int v5 = *(_DWORD *)(v1 + 16);
  unsigned int v6 = *(unsigned __int8 *)(v1 + 22) | (*(unsigned __int16 *)(v1 + 20) << 8);
  BOOL v3 = v5 >= v6;
  unsigned int v7 = v5 - v6;
  if (!v3) {
    goto LABEL_7;
  }
  if (v7 >= v4)
  {
    *(_DWORD *)(v1 + 12) = v4;
    return;
  }

Swift::Void __swiftcall ByteBuffer.moveWriterIndex(to:)(Swift::Int to)
{
  if (v4)
  {
    if (v3 >= v2)
    {
      *(_DWORD *)(v1 + 12) = v2;
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ByteBuffer.copyBytes(at:to:length:)( Swift::Int at, Swift::Int to, Swift::Int length)
{
  if (length < 0)
  {
    char v6 = 0;
    goto LABEL_8;
  }

  unint64_t v4 = length;
  if (!length) {
    return v4;
  }
  if (v3[2] > at)
  {
LABEL_6:
    char v6 = 1;
LABEL_8:
    unint64_t v7 = sub_10005E578();
    uint64_t v8 = swift_allocError(&type metadata for ByteBuffer.CopyBytesError, v7, 0LL, 0LL);
    *Swift::Int v9 = v6;
    swift_willThrow(v8);
    return v4;
  }

  if (__OFADD__(at, length))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  if ((swift_isUniquelyReferenced_nonNull_native(*(void *)v3) & 1) == 0)
  {
    if (__OFADD__(to, v4))
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }

    else {
      Swift::UInt32 v12 = v3[3];
    }
    ByteBuffer._copyStorageAndRebase(capacity:resetIndices:)(v12, 0);
  }

  if (!HIDWORD(v4))
  {
    ByteBuffer._ensureAvailableCapacity(_:at:)(v4, to);
    int v13 = *((unsigned __int16 *)v3 + 10);
    int v14 = *((unsigned __int8 *)v3 + 22);
    Swift::String v15 = (void *)(*(void *)v3 + 24LL);
    sub_1000487CC((uint64_t)v15, (uint64_t)v31);
    unsigned int v16 = v14 | (v13 << 8);
    unsigned int v17 = v3[4];
    BOOL v18 = v17 >= v16;
    unsigned int v19 = v17 - v16;
    if (v18)
    {
      uint64_t v20 = *v15 + v16;
      uint64_t v21 = v20 + at;
      unint64_t v22 = v20 + at + v4;
      sub_10005B138(to, v20, v20 + v19);
      uint64_t v23 = UnsafeMutableRawBufferPointer.init(fastRebase:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v21, v22, v23);
      return v4;
    }

    goto LABEL_21;
  }

void *ByteBuffer.CopyBytesError.negativeLength.unsafeMutableAddressor()
{
  return &static ByteBuffer.CopyBytesError.negativeLength;
}

void *ByteBuffer.CopyBytesError.unreadableSourceBytes.unsafeMutableAddressor()
{
  return &static ByteBuffer.CopyBytesError.unreadableSourceBytes;
}

void ByteBuffer.CopyBytesError.hashValue.getter(char a1)
{
}

void sub_10005E0BC()
{
}

uint64_t ByteBuffer.CopyBytesError.debugDescription.getter(char a1)
{
  char v2 = a1 & 1;
  return String.init<A>(describing:)(&v2, &type metadata for ByteBuffer.CopyBytesError.BaseError);
}

uint64_t sub_10005E0F4()
{
  return ByteBuffer.CopyBytesError.debugDescription.getter(*v0);
}

uint64_t sub_10005E0FC@<X0>( const void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, BOOL *a6@<X8>)
{
  unsigned int v7 = a4;
  unint64_t v12 = HIDWORD(a4);
  uint64_t result = swift_beginAccess(a3 + 24, v14, 0LL, 0LL);
  if (v12 < v7)
  {
    __break(1u);
  }

  else if (a1)
  {
    uint64_t result = memcmp( a1,  (const void *)(*(void *)(a3 + 24) + ((a5 >> 24) & 0xFFFF00 | BYTE6(a5)) + v7),  a2 - (void)a1);
    *a6 = (_DWORD)result == 0;
    return result;
  }

  __break(1u);
  return result;
}

uint64_t sub_10005E1B0(uint64_t a1, uint64_t a2)
{
  return static ByteBuffer.== infix(_:_:)( *(void *)a1,  *(void *)(a1 + 8),  *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int16 *)(a1 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 22) << 48),  *(void *)a2,  *(void *)(a2 + 8),  *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned __int16 *)(a2 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 22) << 48));
}

uint64_t SocketAddressError.FailedToParseIPByteBuffer.hash(into:)( uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unsigned int v5 = a3;
  unint64_t v6 = HIDWORD(a3);
  unsigned int v7 = (void *)(a2 + 24);
  uint64_t result = sub_1000487CC(a2 + 24, (uint64_t)v10);
  if (v6 < v5)
  {
    __break(1u);
  }

  else
  {
    uint64_t v9 = *v7 + ((a4 >> 24) & 0xFFFF00 | BYTE6(a4)) + v5;
    return Hasher.combine(bytes:)(v9, v9 + v6 - v5);
  }

  return result;
}

Swift::Int SocketAddressError.FailedToParseIPByteBuffer.hashValue.getter( uint64_t a1, unint64_t a2, unint64_t a3)
{
  unsigned int v4 = a2;
  unint64_t v6 = HIDWORD(a2);
  Hasher.init(_seed:)(v11);
  unsigned int v7 = (void *)(a1 + 24);
  Swift::Int result = sub_1000487CC((uint64_t)v7, (uint64_t)&v10);
  if (v6 < v4)
  {
    __break(1u);
  }

  else
  {
    uint64_t v9 = *v7 + ((a3 >> 24) & 0xFFFF00 | BYTE6(a3)) + v4;
    Hasher.combine(bytes:)(v9, v9 + v6 - v4);
    return Hasher._finalize()();
  }

  return result;
}

Swift::Int sub_10005E2F4()
{
  return SocketAddressError.FailedToParseIPByteBuffer.hashValue.getter( *(void *)v0,  *(void *)(v0 + 8),  *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int16 *)(v0 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 22) << 48));
}

uint64_t sub_10005E310(uint64_t a1)
{
  return SocketAddressError.FailedToParseIPByteBuffer.hash(into:)( a1,  *(void *)v1,  *(void *)(v1 + 8),  *(unsigned int *)(v1 + 16) | ((unint64_t)*(unsigned __int16 *)(v1 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v1 + 22) << 48));
}

Swift::Int sub_10005E32C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((unsigned int *)v0 + 2);
  unsigned int v3 = *((_DWORD *)v0 + 3);
  uint64_t v4 = *((unsigned __int16 *)v0 + 10);
  uint64_t v5 = *((unsigned __int8 *)v0 + 22);
  Hasher.init(_seed:)(v10);
  unint64_t v6 = (void *)(v1 + 24);
  Swift::Int result = swift_beginAccess(v6, &v9, 0LL, 0LL);
  if (v3 < v2)
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = *v6 + (v5 | (v4 << 8)) + v2;
    Hasher.combine(bytes:)(v8, v8 + v3 - v2);
    return Hasher._finalize()();
  }

  return result;
}

uint64_t ByteBuffer.modifyIfUniquelyOwned<A>(_:)@<X0>( uint64_t (*a1)(void *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  if (swift_isUniquelyReferenced_nonNull_native(*v3))
  {
    uint64_t result = a1(v3);
    if (v4) {
      return result;
    }
    uint64_t v9 = 0LL;
  }

  else
  {
    uint64_t v9 = 1LL;
  }

  return sub_10001762C(a3, v9, 1LL, a2);
}

int64_t ByteBuffer.rangeWithinReadableBytes(index:length:)( int64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v4 = result - a4;
  if (__OFSUB__(result, a4))
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t result = 0LL;
  if ((v4 & 0x8000000000000000LL) == 0 && (a2 & 0x8000000000000000LL) == 0)
  {
    if (HIDWORD(a4) >= a4)
    {
      if (!__OFADD__(v4, a2))
      {
        if (v4 + a2 >= v4) {
          return v4;
        }
LABEL_15:
        __break(1u);
        return result;
      }

uint64_t type metadata accessor for ByteBuffer._Storage()
{
  return objc_opt_self(&OBJC_CLASS____TtCV25ASOctaneSupportXPCService10ByteBuffer8_Storage);
}

unint64_t sub_10005E4D8()
{
  unint64_t result = qword_1002AC068;
  if (!qword_1002AC068)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt8, &type metadata for UInt8);
    atomic_store(result, (unint64_t *)&qword_1002AC068);
  }

  return result;
}

void sub_10005E514(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  if (a1) {
    uint64_t v4 = a1 + a2;
  }
  else {
    uint64_t v4 = 0LL;
  }
  *a3 = ByteBuffer._setBytes(_:at:)(a1, v4, *(_DWORD *)(v3 + 24));
  sub_10005EDFC();
}

uint64_t sub_10005E558()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t sub_10005E578()
{
  unint64_t result = qword_1002AC078;
  if (!qword_1002AC078)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ByteBuffer.CopyBytesError,  &type metadata for ByteBuffer.CopyBytesError);
    atomic_store(result, (unint64_t *)&qword_1002AC078);
  }

  return result;
}

unint64_t sub_10005E5B8()
{
  unint64_t result = qword_1002AC080;
  if (!qword_1002AC080)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ByteBuffer.CopyBytesError,  &type metadata for ByteBuffer.CopyBytesError);
    atomic_store(result, (unint64_t *)&qword_1002AC080);
  }

  return result;
}

unint64_t sub_10005E5F8()
{
  unint64_t result = qword_1002AC088;
  if (!qword_1002AC088)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ByteBuffer, &type metadata for ByteBuffer);
    atomic_store(result, (unint64_t *)&qword_1002AC088);
  }

  return result;
}

_DWORD *initializeBufferWithCopyOfBuffer for _ByteBufferSlice(_DWORD *result, int *a2)
{
  int v2 = *a2;
  *(_DWORD *)((char *)result + sub_100019F7C(v0 + 3) = *(int *)((char *)a2 + 3);
  *unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for _ByteBufferSlice(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 7)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for _ByteBufferSlice(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_BYTE *)(result + 6) = 0;
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 7) = v3;
  return result;
}

void type metadata accessor for _ByteBufferSlice()
{
}

uint64_t getEnumTagSinglePayload for ByteBufferAllocator(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ByteBufferAllocator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for ByteBufferAllocator()
{
}

uint64_t destroy for ByteBuffer(void *a1)
{
  return swift_release(*a1);
}

uint64_t _s25ASOctaneSupportXPCService10ByteBufferVwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = a2[1];
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(_DWORD *)(a1 + 19) = *(_DWORD *)((char *)a2 + 19);
  swift_retain(v3);
  return a1;
}

uint64_t *assignWithCopy for ByteBuffer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a1 + sub_100019F7C(v0 + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
  *((_WORD *)a1 + 10) = *((_WORD *)a2 + 10);
  *((_BYTE *)a1 + 22) = *((_BYTE *)a2 + 22);
  return a1;
}

uint64_t *assignWithTake for ByteBuffer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
  *((_WORD *)a1 + 10) = *((_WORD *)a2 + 10);
  *((_BYTE *)a1 + 22) = *((_BYTE *)a2 + 22);
  return a1;
}

uint64_t getEnumTagSinglePayload for ByteBuffer(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 23))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ByteBuffer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 22) = 0;
    *(_WORD *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 2sub_100019F7C(v0 + 3) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 2sub_100019F7C(v0 + 3) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for ByteBuffer()
{
}

void type metadata accessor for ByteBuffer.CopyBytesError()
{
}

uint64_t _s25ASOctaneSupportXPCService10ByteBufferV14CopyBytesErrorV9BaseErrorOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = 1;
  }
  else {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10005E930 + 4 * byte_1001F7AC5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10005E964 + 4 * byte_1001F7AC0[v4]))();
}

uint64_t sub_10005E964(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10005E96C(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x10005E974LL);
  }
  return result;
}

uint64_t sub_10005E980(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x10005E988LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10005E98C(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10005E994(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ByteBuffer.CopyBytesError.BaseError()
{
  return &type metadata for ByteBuffer.CopyBytesError.BaseError;
}

unint64_t sub_10005E9B4()
{
  unint64_t result = qword_1002AC140;
  if (!qword_1002AC140)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F7D5C, &type metadata for ByteBuffer.CopyBytesError.BaseError);
    atomic_store(result, (unint64_t *)&qword_1002AC140);
  }

  return result;
}

uint64_t sub_10005E9F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  swift_release();
  swift_release();
  swift_release();
  sub_100034738(v2, v3);
  return a1;
}

uint64_t sub_10005EA54(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }

  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2) {
      return 0LL;
    }
  }

  else if ((v3 & 0x8000000000000000LL) == 0 && v3 < (unint64_t)a2)
  {
    return 0LL;
  }

  BOOL v5 = __OFADD__(result, a2);
  result += a2;
  if (v5) {
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_10005EAA0(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_10005EAB4 + *((int *)qword_10005EAF8 + (a2 >> 62))))(0LL);
}

uint64_t sub_10005EAC4(uint64_t a1, uint64_t a2)
{
  return BYTE6(a2);
}

unint64_t sub_10005EB08()
{
  unint64_t result = qword_1002AC150;
  if (!qword_1002AC150)
  {
    uint64_t v1 = type metadata accessor for Data.Iterator(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data.Iterator, v1);
    atomic_store(result, (unint64_t *)&qword_1002AC150);
  }

  return result;
}

  ;
}

uint64_t sub_10005EB64()
{
  *(_BYTE *)(*(void *)(v1 + 24) + (v2 | (v3 << 8)) + v7 + sub_10002A52C(v1, v2, v3, 881LL, v4) = v0;
  return dispatch thunk of IteratorProtocol.next()(v6, v5);
}

uint64_t sub_10005EB8C()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

void sub_10005EB94(Swift::String a1)
{
}

void sub_10005EB9C()
{
}

uint64_t sub_10005EBB0()
{
  return v0();
}

  ;
}

uint64_t sub_10005EBDC()
{
  return dispatch thunk of IteratorProtocol.next()(v1, v0);
}

void sub_10005EBE8()
{
  *(_DWORD *)(v1 + 16) = *(_DWORD *)(v0 + 16);
  *(_WORD *)(v1 + 20) = 0;
  *(_BYTE *)(v1 + 22) = 0;
}

uint64_t sub_10005EC0C()
{
  return Data._copyContents(initializing:)(*(void *)(v4 - 120), v0, v1, v3, v2);
}

uint64_t sub_10005EC28()
{
  return type metadata accessor for Data.Iterator(0LL);
}

  ;
}

uint64_t sub_10005EC58()
{
  *(void *)(v3 - 144) = v1;
  return sub_10005CE38(v2, v0, *(_DWORD *)(v3 - 124));
}

uint64_t sub_10005EC70()
{
  return swift_release(v0);
}

void sub_10005EC7C(Swift::UInt32 _, Swift::UInt32 at)
{
}

void sub_10005EC84(Swift::UInt32 capacity, Swift::Bool resetIndices)
{
}

  ;
}

uint64_t sub_10005ECA0()
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(v1 - 144) + 8LL))(*(void *)(v1 - 120), v0);
}

void sub_10005ECB4(Swift::UInt32 a1@<W8>)
{
  if (v1) {
    Swift::UInt32 v2 = a1;
  }
  else {
    Swift::UInt32 v2 = 0;
  }
  ByteBuffer._copyStorageAndRebase(extraCapacity:resetIndices:)(v2, 0);
}

void sub_10005ECC0()
{
  *(_DWORD *)(v0 + 16) = *(_DWORD *)(*(void *)v0 + 16LL);
  *(_WORD *)(v0 + 20) = 0;
  *(_BYTE *)(v0 + 22) = 0;
  *(void *)(v0 + _Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
}

void sub_10005ECDC(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 120) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_10005ECF8()
{
  return *(_DWORD *)(v0 + 16) - (*(unsigned __int8 *)(v0 + 22) | (*(unsigned __int16 *)(v0 + 20) << 8));
}

  ;
}

__n128 sub_10005ED28()
{
  return v0[2];
}

uint64_t sub_10005ED40()
{
  return sub_10003AA88(v1, v0);
}

uint64_t sub_10005ED50()
{
  return dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
}

void sub_10005ED60(int a1, Swift::UInt32 capacity)
{
}

uint64_t sub_10005ED68()
{
  return dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
}

uint64_t sub_10005ED78()
{
  return dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_10005EDC8()
{
  return sub_10003A9EC(v1, v0);
}

uint64_t sub_10005EDD8(uint64_t a1)
{
  uint64_t v2 = *v1;
  *uint64_t v1 = a1;
  return swift_release(v2);
}

  ;
}

  ;
}

void sub_10005EE08()
{
  *(_DWORD *)(v0 + 16) = *(_DWORD *)(v1 + 16);
  *(_WORD *)(v0 + 20) = 0;
  *(_BYTE *)(v0 + 22) = 0;
}

  ;
}

void sub_10005EE30(uint64_t a1)
{
  unint64_t v1 = 0xE200000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_10005EE38()
{
  return v0;
}

void sub_10005EE44(int a1@<W1>, uint64_t a2@<X8>)
{
}

uint64_t sub_10005EE4C()
{
  return 8236LL;
}

  ;
}

uint64_t sub_10005EE6C(unint64_t a1)
{
  return sub_1000CF8B0(a1, v2, v1);
}

  ;
}

  ;
}

uint64_t sub_10005EE98(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_10005EEA4()
{
  *(_DWORD *)(v2 - 124) = v0;
  return swift_isUniquelyReferenced_nonNull_native(*v1);
}

void *sub_10005EEB0()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = (void *)v1;
  if (v1 == 1)
  {
    uint64_t v2 = sub_1000A4EA8(0xD00000000000001BLL, 0x8000000100219EC0LL, 1819112552LL, 0xE400000000000000LL);
    uint64_t v3 = *(void *)(v0 + 128);
    *(void *)(v0 + 12_Block_object_dispose((const void *)(v1 - 136), 8) = v2;
    *(void *)(v0 + 136) = v4;
    swift_bridgeObjectRetain();
    sub_10001E95C(v3);
  }

  sub_10001E9A0(v1);
  return v2;
}

uint64_t sub_10005EF50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v6 = v1;
  uint64_t v8 = sub_1001BCBC8();
  sub_10012A314(0x6D614E726566666FLL, 0xE900000000000065LL, v8);
  if (v10)
  {
    uint64_t v11 = v9;
    unint64_t v12 = v10;
    sub_10012A314(6580578LL, 0xE300000000000000LL, v8);
    uint64_t v4 = v13;
    uint64_t v3 = v14;
    swift_bridgeObjectRelease();
    if (v3)
    {
      uint64_t v5 = (ValueMetadata *)(v6 + 48);
      uint64_t v15 = sub_10005F418();
      sub_100075EE8(v15, v16);
      sub_1000D7FA8(v11, (uint64_t)v12);
      uint64_t v2 = v17;
      sub_100024F0C();
      if (v2)
      {
        sub_100023EF4();
        sub_10005F3F4();
        uint64_t v19 = v18;
        uint64_t v20 = swift_bridgeObjectRetain();
        uint64_t v21 = sub_1000CC010(v20);
        swift_release(v19);
        swift_bridgeObjectRelease();
        if (v21)
        {
          uint64_t v22 = *(void *)(v21 + 40);
          uint64_t v55 = *(void *)(v21 + 32);
          swift_bridgeObjectRetain();
          sub_100024F0C();
        }

        else
        {
          uint64_t v55 = sub_1001BA868();
          uint64_t v22 = v28;
        }

        uint64_t v29 = *(void *)(v2 + 16);
        uint64_t v30 = *(void *)(v2 + 24);
        sub_100019F58((void *)(v6 + 48), *(void *)(v6 + 72));
        swift_bridgeObjectRetain();
        sub_100075D10(&v57);
        sub_10005F3F4();
        uint64_t v54 = sub_100043978(v29, v30, (uint64_t)&v57, v31);
        uint64_t v56 = v32;
        sub_10001B4DC(&v57);
        sub_100024F0C();
        swift_bridgeObjectRelease();
        LODWORD(v_Block_object_dispose((const void *)(v1 - 136), 8) = v6;
        unsigned int v33 = sub_10005EEB0();
        if (v33)
        {
          uint64_t v35 = (uint64_t)v33;
          Swift::Int v53 = v34;
          type metadata accessor for AppIconRoute();
          unint64_t v36 = sub_10005A048(v4, v3);
          uint64_t v52 = v22;
          uint64_t v38 = v37;
          uint64_t v39 = sub_10005F418();
          uint64_t v41 = sub_100075DC4(v39, v40);
          uint64_t v43 = v42;
          sub_100023EEC();
          unint64_t v60 = &type metadata for ConfirmPurchaseEngagementUIRoute.ViewProperties;
          uint64_t v44 = (void *)swift_allocObject(&unk_100279DF8, 80LL, 7LL);
          v59[0] = v44;
          v44[2] = v36;
          v44[3] = v38;
          v44[4] = v41;
          v44[5] = v43;
          v44[6] = v55;
          v44[7] = v52;
          v44[8] = v54;
          v44[9] = v56;
          uint64_t v45 = sub_1000A5464((uint64_t)v59, v35, v53);
          unint64_t v47 = v46;
          sub_100023EF4();
          sub_100019F7C(v59);
          sub_1000ACB64(v45, v47, 1u, (uint64_t)v59);
          uint64_t v3 = (void *)v59[0];
          uint64_t v6 = v59[1];
          uint64_t v4 = v59[2];
          uint64_t v5 = v60;
          uint64_t v8 = v61;
          uint64_t v48 = v62;
          uint64_t v49 = v63;
          swift_release(v2);
          uint64_t v2 = v8 | (v48 << 32) | (v49 << 48);
          sub_10001ED94();
          uint64_t v50 = sub_100049C88();
          uint64_t result = sub_10001ED7C(v50);
          uint64_t v25 = 3LL;
          goto LABEL_13;
        }

        swift_release(v2);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100023EEC();
        sub_10001ED94();
        uint64_t v51 = sub_100049C88();
        uint64_t result = sub_10001ED7C(v51);
        uint64_t v3 = 0LL;
        uint64_t v6 = 0LL;
        uint64_t v4 = 0LL;
        uint64_t v5 = 0LL;
        uint64_t v2 = 0LL;
      }

      else
      {
        sub_100023EEC();
        _StringGuts.grow(_:)(19LL);
        swift_bridgeObjectRelease();
        uint64_t v57 = 0xD000000000000011LL;
        unint64_t v58 = 0x8000000100219EA0LL;
        uint64_t v8 = (uint64_t)&v57;
        v26._countAndFlagsBits = v11;
        v26._object = v12;
        String.append(_:)(v26);
        sub_100023EF4();
        sub_1000ACB64(v57, v58, 6u, (uint64_t)&v57);
        sub_10005F3CC();
        uint64_t v27 = sub_100049C88();
        uint64_t result = sub_10001ED7C(v27);
      }

      uint64_t v25 = 49LL;
      goto LABEL_13;
    }
  }

  swift_bridgeObjectRelease();
  sub_1000ACB64(0x7571657220646142LL, 0xEB00000000747365LL, 6u, (uint64_t)&v57);
  sub_10005F3CC();
  uint64_t v23 = sub_100049C88();
  uint64_t result = sub_10001ED7C(v23);
  uint64_t v25 = 21LL;
LABEL_13:
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 32) = v25;
  *(_DWORD *)(result + 40) = v8;
  *(void *)a1 = result;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = _swiftEmptyArrayStorage;
  *(_BYTE *)(a1 + 16) = 2;
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v5;
  *(_BYTE *)(a1 + 62) = BYTE6(v2);
  *(_WORD *)(a1 + 60) = WORD2(v2);
  *(_DWORD *)(a1 + 56) = v2;
  return result;
}

unint64_t sub_10005F318(uint64_t a1, uint64_t a2)
{
  return 0xD00000000000001BLL;
}

uint64_t type metadata accessor for ConfirmPurchaseEngagementUIRoute()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService32ConfirmPurchaseEngagementUIRoute);
}

uint64_t sub_10005F380()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

ValueMetadata *type metadata accessor for ConfirmPurchaseEngagementUIRoute.ViewProperties()
{
  return &type metadata for ConfirmPurchaseEngagementUIRoute.ViewProperties;
}

ASOctaneSupportXPCService::HTTPVersion sub_10005F3CC()
{
  return HTTPVersion.init(major:minor:)(1LL, 1LL);
}

void sub_10005F3F4()
{
}

uint64_t sub_10005F418()
{
  return v1;
}

uint64_t NIOClientTCPBootstrapProtocol._applyChannelConvenienceOptions(_:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(a2, v2, a1);
}

void *NIOClientTCPBootstrap.channelConvenienceOptions(_:)@<X0>(int a1@<W0>, void *a2@<X8>)
{
  __int16 v18 = a1 & 0x101;
  char v19 = BYTE2(a1) & 1;
  sub_10005F544((uint64_t)v2, (uint64_t)v15);
  uint64_t v4 = v2[3];
  uint64_t v5 = v2[4];
  sub_100019F58(v2, v4);
  uint64_t v6 = *(void (**)(__int16 *, uint64_t, uint64_t))(v5 + 32);
  uint64_t v13 = v4;
  uint64_t v14 = v5;
  sub_10005F580(&v12);
  v6(&v18, v4, v5);
  sub_10002A118(&v12, (uint64_t)v10);
  uint64_t v8 = v15[5];
  uint64_t v7 = v15[6];
  swift_retain();
  sub_10005F5BC(v15);
  *((void *)&v11 + Hasher._combine(_:)(v1 & 1) = v8;
  uint64_t v17 = v7;
  v16[0] = v10[0];
  v16[1] = v10[1];
  void v16[2] = v11;
  sub_10005F5F0((uint64_t)v16, a2);
  return sub_10005F5BC(v16);
}

uint64_t sub_10005F544(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_10005F580(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

void *sub_10005F5BC(void *a1)
{
  return a1;
}

double sub_10005F5F0@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v5 = *v2;
  unsigned __int8 *v2 = 0;
  if (v5 == 1)
  {
    uint64_t v61 = 0x40000FFFFLL;
    HIDWORD(v60) = 1;
    uint64_t v6 = sub_100019F58(a2, a2[3]);
    sub_1000605D4( (uint64_t)v6,  v7,  v8,  v9,  v10,  v11,  v12,  v13,  v57,  v60,  0x40000FFFFLL,  v62,  *((uint64_t *)&v62 + 1),  v63,  *((uint64_t *)&v63 + 1),  v64);
    unint64_t v14 = sub_10006056C();
    sub_1000605F4((uint64_t)&v61, (uint64_t)&v60 + 4, (uint64_t)&type metadata for ChannelOptions.Types.SocketOption, v14);
    sub_1000605E8();
    uint64_t v15 = sub_10006060C();
    *(void *)&double result = sub_1000605A8( (uint64_t)v15,  v16,  v17,  v18,  v19,  v20,  v21,  v22,  v58,  v60,  v61,  v62,  v63,  v23,  v64).n128_u64[0];
  }

  int v24 = v2[2];
  v2[2] = 0;
  if (v24 == 1)
  {
    LOBYTE(v6Hasher._combine(_:)(v1 & 1) = 1;
    uint64_t v25 = sub_100019F58(a2, a2[3]);
    sub_1000605D4( (uint64_t)v25,  v26,  v27,  v28,  v29,  v30,  v31,  v32,  v57,  v60,  v61,  v62,  *((uint64_t *)&v62 + 1),  v63,  *((uint64_t *)&v63 + 1),  v64);
    unint64_t v33 = sub_100060530();
    sub_1000605F4( v33,  (uint64_t)&v61,  (uint64_t)&type metadata for ChannelOptions.Types.AllowRemoteHalfClosureOption,  v33);
    sub_1000605E8();
    Swift::Int v34 = sub_10006060C();
    *(void *)&double result = sub_1000605A8( (uint64_t)v34,  v35,  v36,  v37,  v38,  v39,  v40,  v41,  v59,  v60,  v61,  v62,  v63,  v42,  v64).n128_u64[0];
  }

  int v43 = v2[1];
  v2[1] = 0;
  if (v43 == 1)
  {
    LOBYTE(v6Hasher._combine(_:)(v1 & 1) = 0;
    uint64_t v44 = a2[3];
    uint64_t v45 = a2[4];
    sub_100019F58(a2, v44);
    unint64_t v46 = *(void (**)(unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v45 + 24);
    *((void *)&v63 + Hasher._combine(_:)(v1 & 1) = v44;
    uint64_t v64 = v45;
    sub_10005F580(&v62);
    unint64_t v47 = sub_1000604F4();
    v46(v47, &v61, &type metadata for ChannelOptions.Types.AutoReadOption, v47, v44, v45);
    sub_1000605E8();
    uint64_t v48 = sub_10006060C();
    *(void *)&double result = sub_1000605A8( (uint64_t)v48,  v49,  v50,  v51,  v52,  v53,  v54,  v55,  v57,  v60,  v61,  v62,  v63,  v56,  v64).n128_u64[0];
  }

  return result;
}

BOOL ChannelOptions.Types.ConvenienceOptionValue<A>.isSet.getter(char a1)
{
  return (a1 & 1) == 0;
}

void ChannelOptions.TCPConvenienceOption.hashValue.getter(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  sub_100060600(a1);
  Hasher._combine(_:)(v1);
  Hasher._finalize()();
  sub_1000354B8();
}

void sub_10005F7A0()
{
}

void *ChannelOptions.TCPConvenienceOption.allowLocalEndpointReuse.unsafeMutableAddressor()
{
  return &static ChannelOptions.TCPConvenienceOption.allowLocalEndpointReuse;
}

void *ChannelOptions.TCPConvenienceOption.disableAutoRead.unsafeMutableAddressor()
{
  return &static ChannelOptions.TCPConvenienceOption.disableAutoRead;
}

void *ChannelOptions.TCPConvenienceOption.allowRemoteHalfClosure.unsafeMutableAddressor()
{
  return &static ChannelOptions.TCPConvenienceOption.allowRemoteHalfClosure;
}

uint64_t ChannelOptions.TCPConvenienceOptions.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 0LL;
    int v3 = 0;
    char v4 = 0;
    char v5 = 0;
    do
    {
      while (*(_BYTE *)(a1 + 32 + v2) == 1)
      {
        ++v2;
        char v4 = 1;
        if (v1 == v2)
        {
          swift_bridgeObjectRelease(a1);
          goto LABEL_12;
        }
      }

      if (*(_BYTE *)(a1 + 32 + v2)) {
        int v3 = 0x10000;
      }
      else {
        char v5 = 1;
      }
    }

    while (v1 - 1 != v2++);
    swift_bridgeObjectRelease(a1);
    if ((v4 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    int v7 = 256;
  }

  else
  {
    swift_bridgeObjectRelease(a1);
    int v3 = 0;
    char v5 = 0;
LABEL_14:
    int v7 = 0;
  }

  return v7 | v3 | v5 & 1u;
}

uint64_t ChannelOptions.TCPConvenienceOptions.add(_:)(uint64_t result)
{
  if ((_BYTE)result)
  {
    else {
      v1 += 2;
    }
  }

  *uint64_t v1 = 1;
  return result;
}

BOOL ChannelOptions.TCPConvenienceOptions.consumeAllowLocalEndpointReuse()()
{
  char v1 = *v0;
  *uint64_t v0 = 0;
  return sub_1000605C8(v1);
}

BOOL ChannelOptions.TCPConvenienceOptions.consumeDisableAutoRead()()
{
  char v1 = *(_BYTE *)(v0 + 1);
  *(_BYTE *)(v0 + Hasher._combine(_:)(v1 & 1) = 0;
  return sub_1000605C8(v1);
}

BOOL ChannelOptions.TCPConvenienceOptions.consumeAllowRemoteHalfClosure()()
{
  char v1 = *(_BYTE *)(v0 + 2);
  *(_BYTE *)(v0 + 2) = 0;
  return sub_1000605C8(v1);
}

void ChannelOptions.TCPConvenienceOptions.hash(into:)(uint64_t a1, int a2)
{
}

BOOL static ChannelOptions.TCPConvenienceOptions.__derived_struct_equals(_:_:)(int a1, unsigned int a2)
{
  return sub_1000605C8(a1 ^ a2 | ((unsigned __int16)(a1 ^ a2) >> 8) | ((a1 ^ a2) >> 16));
}

void ChannelOptions.TCPConvenienceOptions.hashValue.getter(uint64_t a1)
{
  int v1 = a1;
  sub_100060600(a1);
  ChannelOptions.TCPConvenienceOptions.hash(into:)((uint64_t)v2, v1 & 0x10101);
  Hasher._finalize()();
  sub_1000354B8();
}

uint64_t sub_10005F950@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = ChannelOptions.TCPConvenienceOptions.init(arrayLiteral:)(a1);
  *a2 = result & 1;
  a2[1] = BYTE1(result) & 1;
  a2[2] = (result & 0xFFFF0000) != 0;
  return result;
}

void sub_10005F98C()
{
  if (v0[2]) {
    int v1 = 0x10000;
  }
  else {
    int v1 = 0;
  }
  if (v0[1]) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  ChannelOptions.TCPConvenienceOptions.hashValue.getter(v2 | *v0 | v1);
}

void sub_10005F9BC(uint64_t a1)
{
  if (v1[2]) {
    int v2 = 0x10000;
  }
  else {
    int v2 = 0;
  }
  if (v1[1]) {
    int v3 = 256;
  }
  else {
    int v3 = 0;
  }
  ChannelOptions.TCPConvenienceOptions.hash(into:)(a1, v3 | *v1 | v2);
}

Swift::Int sub_10005F9EC()
{
  int v1 = *v0;
  int v2 = v0[1];
  int v3 = v0[2];
  Hasher.init(_seed:)(v7);
  if (v3) {
    int v4 = 0x10000;
  }
  else {
    int v4 = 0;
  }
  if (v2) {
    int v5 = 256;
  }
  else {
    int v5 = 0;
  }
  ChannelOptions.TCPConvenienceOptions.hash(into:)((uint64_t)v7, v5 | v1 | v4);
  return Hasher._finalize()();
}

unint64_t sub_10005FA5C()
{
  unint64_t result = qword_1002AC258;
  if (!qword_1002AC258)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ChannelOptions.TCPConvenienceOption,  &type metadata for ChannelOptions.TCPConvenienceOption);
    atomic_store(result, (unint64_t *)&qword_1002AC258);
  }

  return result;
}

unint64_t sub_10005FA9C()
{
  unint64_t result = qword_1002AC260[0];
  if (!qword_1002AC260[0])
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ChannelOptions.TCPConvenienceOptions,  &type metadata for ChannelOptions.TCPConvenienceOptions);
    atomic_store(result, qword_1002AC260);
  }

  return result;
}

BOOL sub_10005FAD8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1[2]) {
    int v2 = 0x10000;
  }
  else {
    int v2 = 0;
  }
  if (a1[1]) {
    int v3 = 256;
  }
  else {
    int v3 = 0;
  }
  int v4 = v3 | *a1 | v2;
  if (a2[2]) {
    int v5 = 0x10000;
  }
  else {
    int v5 = 0;
  }
  if (a2[1]) {
    int v6 = 256;
  }
  else {
    int v6 = 0;
  }
  return static ChannelOptions.TCPConvenienceOptions.__derived_struct_equals(_:_:)(v4, v6 | *a2 | v5);
}

uint64_t sub_10005FB2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 8LL);
}

uint64_t sub_10005FB34(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 0LL, *(void *)(result - 8) + 64LL, 1LL);
    return 0LL;
  }

  return result;
}

uint64_t *sub_10005FB8C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v8 = *(void *)(v6 + 64);
  }
  else {
    size_t v8 = *(void *)(v6 + 64) + 1LL;
  }
  if (*(_DWORD *)(v6 + 80) > 7u || (v7 & 0x100000) != 0 || v8 > 0x18)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16LL) & ~(unint64_t)v7));
    swift_retain();
  }

  else if (sub_10001D158((uint64_t)a2, 1LL, *(void *)(a3 + 16)))
  {
    memcpy(a1, a2, v8);
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    sub_10001762C((uint64_t)a1, 0LL, 1LL, v5);
  }

  return a1;
}

uint64_t sub_10005FC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_10001D158(a1, 1LL, v3);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  }
  return result;
}

void *sub_10005FCA8(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  int v6 = sub_10001D158((uint64_t)a2, 1LL, v5);
  uint64_t v7 = *(void *)(v5 - 8);
  if (v6)
  {
    int v8 = *(_DWORD *)(v7 + 84);
    size_t v9 = *(void *)(v7 + 64);
    if (v8) {
      size_t v10 = v9;
    }
    else {
      size_t v10 = v9 + 1;
    }
    memcpy(a1, a2, v10);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v5);
    sub_10001762C((uint64_t)a1, 0LL, 1LL, v5);
  }

  return a1;
}

void *sub_10005FD38(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  int v6 = sub_10001D158((uint64_t)a1, 1LL, v5);
  int v7 = sub_10001D158((uint64_t)a2, 1LL, v5);
  uint64_t v8 = *(void *)(v5 - 8);
  if (v6)
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v5);
      sub_10001762C((uint64_t)a1, 0LL, 1LL, v5);
      return a1;
    }
  }

  else
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 24))(a1, a2, v5);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v8 + 8))(a1, v5);
  }

  if (*(_DWORD *)(v8 + 84)) {
    size_t v9 = *(void *)(v8 + 64);
  }
  else {
    size_t v9 = *(void *)(v8 + 64) + 1LL;
  }
  memcpy(a1, a2, v9);
  return a1;
}

void *sub_10005FE10(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  int v6 = sub_10001D158((uint64_t)a2, 1LL, v5);
  uint64_t v7 = *(void *)(v5 - 8);
  if (v6)
  {
    int v8 = *(_DWORD *)(v7 + 84);
    size_t v9 = *(void *)(v7 + 64);
    if (v8) {
      size_t v10 = v9;
    }
    else {
      size_t v10 = v9 + 1;
    }
    memcpy(a1, a2, v10);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v5);
    sub_10001762C((uint64_t)a1, 0LL, 1LL, v5);
  }

  return a1;
}

void *sub_10005FEA0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  int v6 = sub_10001D158((uint64_t)a1, 1LL, v5);
  int v7 = sub_10001D158((uint64_t)a2, 1LL, v5);
  uint64_t v8 = *(void *)(v5 - 8);
  if (v6)
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v5);
      sub_10001762C((uint64_t)a1, 0LL, 1LL, v5);
      return a1;
    }
  }

  else
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(a1, a2, v5);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v8 + 8))(a1, v5);
  }

  if (*(_DWORD *)(v8 + 84)) {
    size_t v9 = *(void *)(v8 + 64);
  }
  else {
    size_t v9 = *(void *)(v8 + 64) + 1LL;
  }
  memcpy(a1, a2, v9);
  return a1;
}

uint64_t sub_10005FF78(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  unsigned int v7 = v6 - 1;
  if (!(_DWORD)v6) {
    unsigned int v7 = 0;
  }
  uint64_t v8 = *(void *)(v5 + 64);
  if (!(_DWORD)v6) {
    ++v8;
  }
  if (!a2) {
    return 0LL;
  }
  unsigned int v9 = a2 - v7;
  if (a2 > v7)
  {
    char v10 = 8 * v8;
    unsigned int v12 = ((v9 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      int v11 = *(_DWORD *)(a1 + v8);
      if (v11) {
        goto LABEL_15;
      }
    }

    else
    {
      if (v12 <= 0xFF)
      {
        if (v12 < 2) {
          goto LABEL_22;
        }
LABEL_8:
        int v11 = *(unsigned __int8 *)(a1 + v8);
        if (!*(_BYTE *)(a1 + v8)) {
          goto LABEL_22;
        }
LABEL_15:
        int v13 = (v11 - 1) << v10;
        if ((_DWORD)v8)
        {
          __asm { BR              X12 }
        }

        return v7 + v13 + 1;
      }

      int v11 = *(unsigned __int16 *)(a1 + v8);
      if (*(_WORD *)(a1 + v8)) {
        goto LABEL_15;
      }
    }
  }

LABEL_22:
  unsigned int v15 = sub_10001D158(a1, v6, v4);
  if (v15 >= 2) {
    return v15 - 1;
  }
  else {
    return 0LL;
  }
}

  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  int v13 = v3;
  unint64_t v14 = 133LL;
LABEL_26:
  swift_unexpectedError(v13, "ASOctaneSupportXPCService/ByteBuffer-views.swift", 48LL, 1LL, v14);
  __break(1u);
}

    sub_1000A74B4((uint64_t)v110);
    sub_10003A9EC(v74, v73);
    __n128 v23 = v112;
    uint64_t v30 = v113;
    AppReceiptResponse = v114;
    unsigned int v15 = v115 | ((unint64_t)(v116 | (v117 << 16)) << 32);
    uint64_t result = v110[0];
    uint64_t v25 = (void *)v110[1];
    uint64_t v26 = v111;
    goto LABEL_4;
  }

  sub_1000A74B4((uint64_t)&v99);
  __n128 v23 = v102;
  uint64_t v30 = v103;
  AppReceiptResponse = v104;
  unsigned int v15 = v105 | ((unint64_t)(WORD2(v105) | (BYTE6(v105) << 16)) << 32);
  uint64_t result = v99;
  uint64_t v25 = (void *)v100;
  uint64_t v26 = v101;
LABEL_4:
  *(void *)a2 = result;
  *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 136), 8) = v25;
  *(_BYTE *)(a2 + 16) = v26;
  *(_OWORD *)(a2 + 24) = v23;
  *(void *)(a2 + 40) = v30;
  *(void *)(a2 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = AppReceiptResponse;
  *(_BYTE *)(a2 + 62) = BYTE6(v15);
  *(_WORD *)(a2 + 60) = WORD2(v15);
  *(_DWORD *)(a2 + 56) = v15;
  return result;
}

  uint64_t v45 = 0LL;
  unint64_t v47 = 0LL;
  uint64_t v50 = 0LL;
  uint64_t v53 = 0LL;
  uint64_t v52 = -1;
LABEL_37:
  sub_10001EDA0();
  *(void *)unint64_t v33 = v45;
  *(void *)(v33 + _Block_object_dispose((const void *)(v1 - 136), 8) = v47;
  *(void *)(v33 + 16) = v50;
  *(void *)(v33 + 24) = v53;
  *(_BYTE *)(v33 + 32) = v52;
  sub_100019328();
}

  swift_bridgeObjectRelease();
  sub_1000E5754();
  sub_10001DAB8();
}

    unsigned int v7 = (v14 - 1) & v14;
    int v11 = __clz(__rbit64(v14)) + (v12 << 6);
LABEL_23:
    if (!*(void *)(v4 + 16))
    {
      int v2 = 0LL;
      goto LABEL_41;
    }

    uint64_t v16 = v3;
    uint64_t v17 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    Hasher.init(_seed:)(v35);
    swift_bridgeObjectRetain();
    String.hash(into:)(v35, v19, v18);
    uint64_t v20 = Hasher._finalize()();
    uint64_t v21 = v4;
    uint64_t v22 = -1LL << *(_BYTE *)(v4 + 32);
    __n128 v23 = v20 & ~v22;
    if (((*(void *)(v34 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v23) & 1) == 0) {
      goto LABEL_38;
    }
    int v24 = *(void *)(v21 + 48);
    uint64_t v25 = (void *)(v24 + 16 * v23);
    uint64_t v26 = v25[1];
    uint64_t v27 = *v25 == v19 && v26 == v18;
    if (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v25, v26, v19, v18, 0LL) & 1) == 0)
    {
      uint64_t v28 = ~v22;
      while (1)
      {
        __n128 v23 = (v23 + 1) & v28;
        if (((*(void *)(v34 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v23) & 1) == 0) {
          break;
        }
        uint64_t v29 = (void *)(v24 + 16 * v23);
        uint64_t v30 = v29[1];
        uint64_t v31 = *v29 == v19 && v30 == v18;
        if (v31 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v29, v30, v19, v18, 0LL) & 1) != 0) {
          goto LABEL_37;
        }
      }

      unsigned int v7 = (v13 - 1) & v13;
      int v11 = __clz(__rbit64(v13)) + (v14 << 6);
      unsigned int v9 = v14;
    }

    uint64_t v22 = *(void *)(v2 + 48);
    __n128 v23 = (void *)(v22 + 16 * v21);
    int v24 = v23[1];
    uint64_t v25 = *v23 == v18 && v24 == v17;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, v18, v17, 0LL) & 1) != 0)
    {
      isStackAllocationSafe = swift_bridgeObjectRelease();
      int v43 = a1;
      uint64_t v44 = v41;
      uint64_t v45 = v39;
      unint64_t v46 = v9;
      unint64_t v47 = v7;
    }

    else
    {
      uint64_t v26 = ~v20;
      do
      {
        uint64_t v21 = (v21 + 1) & v26;
        if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) == 0) {
          goto LABEL_37;
        }
        uint64_t v27 = (void *)(v22 + 16 * v21);
        uint64_t v28 = v27[1];
        uint64_t v29 = *v27 == v18 && v28 == v17;
      }

      while (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v27, v28, v18, v17, 0LL) & 1) == 0);
      int v43 = a1;
      uint64_t v44 = v41;
      uint64_t v45 = v39;
      unint64_t v46 = v9;
      unint64_t v47 = v7;
      isStackAllocationSafe = swift_bridgeObjectRelease();
    }

    uint64_t v31 = *(_BYTE *)(v2 + 32);
    uint64_t v32 = v31 & 0x3F;
    unint64_t v33 = (1LL << v31) + 63;
    Swift::Int v34 = v33 >> 6;
    uint64_t v35 = 8 * (v33 >> 6);
    if (v32 < 0xE
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v33 >> 6), 8LL), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0LL), (const void *)(v2 + 56), v35);
      uint64_t v36 = sub_100111C78((unint64_t *)((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v34, v2, v21, &v43);
      swift_release();
      sub_100018F04(v43);
    }

    else
    {
      uint64_t v37 = (void *)swift_slowAlloc(v35, -1LL);
      memcpy(v37, (const void *)(v2 + 56), v35);
      uint64_t v36 = sub_100111C78((unint64_t *)v37, v34, v2, v21, &v43);
      swift_release();
      sub_100018F04(v43);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    return v36;
  }

  else
  {
    swift_release();
    return (unint64_t *)&_swiftEmptySetSingleton;
  }

  sub_10001945C();
}

          int v11 = 1;
          goto LABEL_23;
        }

        unsigned int v9 = *(_DWORD *)(v3 + 16);
        goto LABEL_21;
      }
    }

    else
    {
      v1[2].i64[1] = 0xF000000000000007LL;
      unsigned int v9 = *(_DWORD *)(v3 + 16);
      if ((v9 & 2) != 0)
      {
        sub_10014085C();
        goto LABEL_13;
      }

      sub_10014085C();
    }

    if ((v9 & 0x10) == 0) {
      goto LABEL_21;
    }
    goto LABEL_16;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

        sub_100029DF4(v41);
      }
    }

    uint64_t v50 = sub_100029C98();
    sub_1000252D0((uint64_t)&type metadata for ChannelError, v50);
    sub_1000ABEFC(v51, 1LL);
    return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v12, a3);
  }

  uint64_t v18 = *(void *)(v4 + 296);
  uint64_t v19 = sub_1001565E4();
  sub_1001565D0(v19, v20, v21, (uint64_t)&type metadata for UInt);
  *(void *)(v18 + 192) = v54;
  return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v12, a3);
}

    if (a3)
    {
      swift_errorRetain(v4);
      sub_100184FF8(v4, 1LL);
      sub_10002A47C();
    }

    return sub_10002A47C();
  }

  if (a2 == 1)
  {
    uint64_t v8 = *(void *)(*(void *)v3 + 896LL);
    if (*(_BYTE *)(v5 + v8) == 1)
    {
      if (!a3) {
        return result;
      }
      unsigned int v9 = sub_100029C98();
      char v10 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v9);
      unsigned int v12 = v10;
      int v13 = 5LL;
LABEL_9:
      sub_1001565C0(v10, v11, v13);
      sub_100184FF8(v12, 1LL);
      swift_errorRelease(v12);
      return swift_errorRelease(v12);
    }

    uint64_t v25 = result;
    swift_errorRetain(result);
    uint64_t v20 = sub_1000175B0(&qword_1002A9710);
    if (swift_dynamicCast(&v22, &v25, v20, &type metadata for ChannelError, 0LL))
    {
      if (v23 == 3 && v22 == 6)
      {
        *(_BYTE *)(v5 + v_Block_object_dispose((const void *)(v1 - 136), 8) = 1;
        swift_errorRelease(v25);
LABEL_29:
        sub_100028188();
        if (a3) {
          sub_100184FF8(0LL, 0LL);
        }
        sub_100026518();
        int v24 = &type metadata for ChannelEvent;
        LOBYTE(v22) = 0;
LABEL_32:
        ChannelPipeline.fireUserInboundEventTriggered(_:)((uint64_t)&v22);
        sub_100024F0C();
        return sub_100019F7C(&v22);
      }

      sub_100038470(v22, v23);
    }

    swift_errorRelease(v25);
    sub_100156A68(*(uint64_t (**)(void))(*(void *)v5 + 1016LL));
    if (!v4) {
      goto LABEL_29;
    }
    goto LABEL_22;
  }

  unsigned int v15 = *(void *)(*(void *)v3 + 880LL);
  uint64_t v16 = *(void *)(v3 + v15);
  if (v16)
  {
    *(void *)(v5 + v15) = 0LL;
    uint64_t v17 = sub_100029E1C();
    uint64_t v18 = sub_1000252D0((uint64_t)&type metadata for EventLoopError, v17);
    *uint64_t v19 = 1;
    swift_errorRetain(v18);
    sub_100098A70(v18, 1LL, v16);
    sub_10002A47C();
    sub_10002A47C();
    sub_100024F0C();
  }

  return sub_10002827C(v7, 2, a3);
}

    int v13 = (v20 - 1) & v20;
  }

  uint64_t v21 = v19 + 3;
  if (v21 < v38)
  {
    uint64_t v20 = v39[v21];
    if (!v20)
    {
      while (1)
      {
        uint64_t v16 = v21 + 1;
        if (__OFADD__(v21, 1LL)) {
          goto LABEL_41;
        }
        if (v16 >= v38) {
          goto LABEL_34;
        }
        uint64_t v20 = v39[v16];
        ++v21;
        if (v20) {
          goto LABEL_22;
        }
      }
    }

    uint64_t v16 = v21;
    goto LABEL_22;
  }

        int v11 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
        unsigned int v15 = *(unsigned __int8 *)(*(void *)(v3 + 48) + v11);
        Hasher.init(_seed:)(v19);
        __asm { BR              X8 }
      }
    }
  }

  __n128 v23 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  int v24 = (uint64_t *)(*(void *)(v23 + 48) + 16 * a3);
  *int v24 = v8;
  v24[1] = a2;
  uint64_t v25 = *(void *)(v23 + 16);
  uint64_t v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v23 + 16) = v27;
  }
  return result;
}

    unint64_t v14 = (v21 - 1) & v21;
  }

  uint64_t v22 = v20 + 3;
  if (v22 >= v37)
  {
LABEL_34:
    uint64_t result = swift_release_n(v8, 2LL);
    int v2 = v35;
    goto LABEL_36;
  }

  uint64_t v21 = *(void *)(v36 + 8 * v22);
  if (v21)
  {
    uint64_t v17 = v22;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v17 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v17 >= v37) {
      goto LABEL_34;
    }
    uint64_t v21 = *(void *)(v36 + 8 * v17);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }

        char v10 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_23:
        unint64_t v14 = *(unsigned __int8 *)(*(void *)(v3 + 48) + v10);
        Hasher.init(_seed:)(v17);
        __asm { BR              X8 }
      }
    }
  }

void sub_1000600A4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8LL);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  size_t v10 = *(void *)(v7 + 64);
  if (v8) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = v10 + 1;
  }
  char v12 = 8 * v11;
  BOOL v13 = a3 >= v9;
  unsigned int v14 = a3 - v9;
  if (v14 != 0 && v13)
  {
    if (v11 <= 3)
    {
      unsigned int v15 = ((v14 + ~(-1 << v12)) >> v12) + 1;
      if (HIWORD(v15))
      {
        unsigned int v6 = &dword_100000004;
      }

      else if (v15 >= 0x100)
      {
        unsigned int v6 = 2;
      }

      else
      {
        unsigned int v6 = v15 > 1;
      }
    }

    else
    {
      unsigned int v6 = &_mh_execute_header.magic + 1;
    }
  }

  if (v9 < a2)
  {
    unsigned int v16 = ~v9 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        int v17 = v16 & ~(-1 << v12);
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *a1 = v17;
          *((_BYTE *)a1 + 2) = BYTE2(v17);
        }

        else if ((_DWORD)v11 == 2)
        {
          *a1 = v17;
        }

        else
        {
          *(_BYTE *)a1 = v17;
        }
      }
    }

    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v16;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X10 }

void sub_100060238()
{
  *(_BYTE *)(v0 + vHasher._combine(_:)(v1 & 1) = v2;
}

void sub_100060240()
{
  *(_WORD *)(v0 + vHasher._combine(_:)(v1 & 1) = v2;
}

uint64_t sub_100060264(uint64_t a1, uint64_t a2)
{
  return sub_10001D158(a1, 1LL, *(void *)(a2 + 16));
}

uint64_t sub_100060270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001762C(a1, a2, 1LL, *(void *)(a3 + 16));
}

uint64_t type metadata accessor for ChannelOptions.Types.ConvenienceOptionValue( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for ChannelOptions.Types.ConvenienceOptionValue);
}

ValueMetadata *type metadata accessor for ChannelOptions.TCPConvenienceOption()
{
  return &type metadata for ChannelOptions.TCPConvenienceOption;
}

uint64_t _s21TCPConvenienceOptionsVwCP(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)uint64_t result = v2;
  return result;
}

uint64_t _s21TCPConvenienceOptionsVwet(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v3 = -1;
    return (v3 + 1);
  }

  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3)) {
        goto LABEL_5;
      }
    }

    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
      {
LABEL_5:
        int v3 = (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776962;
        return (v3 + 1);
      }
    }
  }

  unsigned int v4 = *(unsigned __int8 *)a1;
  BOOL v5 = v4 >= 2;
  int v3 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5) {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t _s21TCPConvenienceOptionsVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554177) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFE) {
    int v3 = 0;
  }
  if (a2 > 0xFE)
  {
    *(_WORD *)uint64_t result = a2 - 255;
    *(_BYTE *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + sub_100019F7C(v0 + 3) = v4;
      }
      else {
        *(_BYTE *)(result + sub_100019F7C(v0 + 3) = v4;
      }
    }
  }

  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + sub_100019F7C(v0 + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(_BYTE *)uint64_t result = a2 + 1;
      return result;
    }

    *(_BYTE *)(result + sub_100019F7C(v0 + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ChannelOptions.TCPConvenienceOptions()
{
  return &type metadata for ChannelOptions.TCPConvenienceOptions;
}

uint64_t _s20TCPConvenienceOptionV17ConvenienceOptionOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = 1;
  }
  else {
    LODWORD(sub_10002A52C(v1, v2, v3, 881LL, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100060410 + 4 * byte_1001F7E13[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100060444 + 4 * byte_1001F7E0E[v4]))();
}

uint64_t sub_100060444(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10006044C(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x100060454LL);
  }
  return result;
}

uint64_t sub_100060460(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x100060468LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10006046C(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_100060474(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

ValueMetadata *_s20TCPConvenienceOptionV17ConvenienceOptionOMa()
{
  return &_s20TCPConvenienceOptionV17ConvenienceOptionON;
}

unint64_t sub_100060494()
{
  unint64_t result = qword_1002AC2E8;
  if (!qword_1002AC2E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F7FE4, &_s20TCPConvenienceOptionV17ConvenienceOptionON);
    atomic_store(result, (unint64_t *)&qword_1002AC2E8);
  }

  return result;
}

void sub_1000604D0(uint64_t *a1@<X8>)
{
  *a1 = ChannelPipeline.syncOperations.getter();
  sub_10001945C();
}

unint64_t sub_1000604F4()
{
  unint64_t result = qword_1002AC2F0;
  if (!qword_1002AC2F0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ChannelOptions.Types.AutoReadOption,  &type metadata for ChannelOptions.Types.AutoReadOption);
    atomic_store(result, (unint64_t *)&qword_1002AC2F0);
  }

  return result;
}

unint64_t sub_100060530()
{
  unint64_t result = qword_1002AC2F8;
  if (!qword_1002AC2F8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ChannelOptions.Types.AllowRemoteHalfClosureOption,  &type metadata for ChannelOptions.Types.AllowRemoteHalfClosureOption);
    atomic_store(result, (unint64_t *)&qword_1002AC2F8);
  }

  return result;
}

unint64_t sub_10006056C()
{
  unint64_t result = qword_1002AC300;
  if (!qword_1002AC300)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ChannelOptions.Types.SocketOption,  &type metadata for ChannelOptions.Types.SocketOption);
    atomic_store(result, (unint64_t *)&qword_1002AC300);
  }

  return result;
}

__n128 sub_1000605A8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, __int128 a13, __n128 a14, uint64_t a15)
{
  *(_OWORD *)uint64_t v15 = a12;
  *(_OWORD *)(v15 + 16) = a13;
  __n128 result = a14;
  *(__n128 *)(v15 + 32) = a14;
  *(void *)(v15 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = a15;
  return result;
}

BOOL sub_1000605C8@<W0>(char a1@<W8>)
{
  return (a1 & 1) == 0;
}

void *sub_1000605D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  a15 = v16;
  a16 = v17;
  return sub_10005F580(&a12);
}

uint64_t sub_1000605E8()
{
  return swift_retain(*(void *)(v0 + 48));
}

uint64_t sub_1000605F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return v6(a1, a2, a3, a4, v4, v5);
}

void *sub_100060600(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va);
}

void *sub_10006060C()
{
  return sub_10005F5BC(v0);
}

void sub_100060614(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for IAPTransaction(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10003A968(a1 + 56, (uint64_t)v77);
  sub_10003A968((uint64_t)v77, (uint64_t)&v104);
  if (!*(void *)v105)
  {
    unsigned int v12 = sub_10001ED94();
    Swift::UInt16 v13 = v12;
    unsigned int v14 = HIWORD(v12);
    uint64_t v15 = type metadata accessor for HTTPResponseHead._Storage();
    uint64_t v16 = sub_10001ED7C(v15);
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    __int128 v20 = 0uLL;
    *(_OWORD *)(v16 + 16) = 0u;
    *(void *)(v16 + 32) = 21LL;
    *(_WORD *)(v16 + 40) = v13;
    *(_WORD *)(v16 + 42) = v14;
LABEL_29:
    *(void *)a2 = v16;
    *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 136), 8) = _swiftEmptyArrayStorage;
    *(_BYTE *)(a2 + 16) = 2;
    *(_OWORD *)(a2 + 24) = v20;
    *(void *)(a2 + 40) = v17;
    *(void *)(a2 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v18;
    *(_BYTE *)(a2 + 62) = BYTE6(v19);
    *(_WORD *)(a2 + 60) = WORD2(v19);
    *(_DWORD *)(a2 + 56) = v19;
    return;
  }

  __int128 v102 = v104;
  *(_OWORD *)uint64_t v103 = *(_OWORD *)v105;
  *(void *)&v103[15] = *(void *)&v105[15];
  uint64_t v8 = sub_1000ACD2C();
  unint64_t v10 = v9;
  uint64_t v11 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  PropertyListDecoder.init()();
  sub_100060C04();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( &type metadata for InAppRegrantPurchaseHistoryRequest,  v8,  v10,  &type metadata for InAppRegrantPurchaseHistoryRequest);
  sub_100024F0C();
  uint64_t v61 = v78;
  uint64_t v62 = v79;
  uint64_t v59 = v81;
  unint64_t v55 = v83;
  uint64_t v56 = v85;
  v52[1] = v86;
  v52[2] = v80;
  uint64_t v54 = v87;
  uint64_t v21 = v64;
  uint64_t v22 = sub_100019F58((void *)(v64 + 88), *(void *)(v64 + 112));
  uint64_t v23 = *v22;
  int v24 = *(os_unfair_lock_s **)(*(void *)(*v22 + 128LL) + 16LL);
  swift_retain();
  os_unfair_lock_lock(v24);
  *(_BYTE *)(v23 + 112) = 0;
  os_unfair_lock_unlock(v24);
  sub_100024F0C();
  uint64_t v25 = *(void *)(v21 + 112);
  uint64_t v63 = v21 + 88;
  sub_100019F58((void *)(v21 + 88), v25);
  sub_1000890AC();
  uint64_t v27 = v26;
  uint64_t v57 = v8;
  unint64_t v58 = v10;
  if ((unint64_t)v26 >> 62)
  {
    if (v26 >= 0) {
      v26 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter(v26);
    if (!v28) {
      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v28 = *(void *)((v26 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v28) {
      goto LABEL_12;
    }
  }

  if (v28 < 1)
  {
    __break(1u);
    goto LABEL_38;
  }

  uint64_t v29 = 0LL;
  do
  {
    if ((v27 & 0xC000000000000001LL) != 0) {
      id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v29, v27);
    }
    else {
      id v30 = *(id *)(v27 + 8 * v29 + 32);
    }
    uint64_t v31 = v30;
    ++v29;
    sub_100060C40();
    sub_100086EB8();
    unint64_t v33 = v32;
  }

  while (v28 != v29);
LABEL_12:
  swift_bridgeObjectRelease();
  char v67 = 1;
  char v70 = 0;
  sub_100060C40();
  sub_10008845C();
  uint64_t v35 = v34;
  if ((unint64_t)v34 >> 62)
  {
    if (v34 >= 0) {
      v34 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter(v34);
  }

  else
  {
    uint64_t v36 = *(void *)((v34 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v60 = v36;
  uint64_t v53 = a2;
  if (!v36)
  {
    swift_bridgeObjectRelease();
    uint64_t v39 = _swiftEmptyArrayStorage;
LABEL_25:
    char v67 = 0;
    uint64_t v42 = v57;
    uint64_t v43 = v54;
    if (v54)
    {
      sub_100060C40();
      swift_bridgeObjectRetain();
      uint64_t v44 = sub_1000884B8();
      unint64_t v46 = v45;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n(v43, 2LL);
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v44 = 0LL;
      unint64_t v46 = 0xF000000000000000LL;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v78 = 0LL;
    uint64_t v79 = 0LL;
    id v80 = _swiftEmptyArrayStorage;
    LOBYTE(v8Hasher._combine(_:)(v1 & 1) = v70;
    BYTE1(v8Hasher._combine(_:)(v1 & 1) = 3;
    *(_DWORD *)((char *)&v81 + 2) = v68;
    HIWORD(v8Hasher._combine(_:)(v1 & 1) = v69;
    uint64_t v82 = 0x3233363232333731LL;
    unint64_t v83 = 0xEB00000000373231LL;
    uint64_t v84 = v60;
    LOBYTE(v85) = v67;
    HIDWORD(v85) = *(_DWORD *)&v66[3];
    *(_DWORD *)((char *)&v85 + Hasher._combine(_:)(v1 & 1) = *(_DWORD *)v66;
    uint64_t v86 = v39;
    uint64_t v87 = v44;
    unint64_t v88 = v46;
    uint64_t v89 = 0LL;
    uint64_t v90 = 0LL;
    uint64_t v91 = 1LL;
    __int128 v92 = 0u;
    __int128 v93 = 0u;
    __int128 v94 = 0u;
    __int128 v95 = 0u;
    char v96 = 22;
    *(_DWORD *)int v97 = *(_DWORD *)v65;
    *(_DWORD *)&v97[3] = *(_DWORD *)&v65[3];
    uint64_t v99 = 0LL;
    uint64_t v100 = 0LL;
    uint64_t v98 = 0LL;
    char v101 = 2;
    sub_100053590((uint64_t)&v78);
    sub_100196960(&v78);
    __int128 v64 = v71;
    uint64_t v17 = v72;
    uint64_t v18 = v73;
    uint64_t v47 = v74;
    uint64_t v48 = v75;
    uint64_t v49 = v76;
    sub_10003A9EC(v42, v58);
    uint64_t v19 = v47 | (v48 << 32) | (v49 << 48);
    unsigned int v50 = sub_10001ED94();
    LOWORD(v47) = v50;
    LODWORD(v49) = HIWORD(v50);
    sub_1000536E8((uint64_t)&v78);
    uint64_t v51 = type metadata accessor for HTTPResponseHead._Storage();
    uint64_t v16 = sub_10001ED7C(v51);
    __int128 v20 = v64;
    *(void *)(v16 + 16) = 0LL;
    *(void *)(v16 + 24) = 0LL;
    *(void *)(v16 + 32) = 3LL;
    *(_WORD *)(v16 + 40) = v47;
    *(_WORD *)(v16 + 42) = v49;
    a2 = v53;
    goto LABEL_29;
  }

  uint64_t v78 = _swiftEmptyArrayStorage;
  sub_1000323A4();
  uint64_t v37 = v60;
  if ((v60 & 0x8000000000000000LL) == 0)
  {
    uint64_t v38 = 0LL;
    uint64_t v39 = v78;
    do
    {
      if ((v35 & 0xC000000000000001LL) != 0) {
        id v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v35);
      }
      else {
        id v40 = *(id *)(v35 + 8 * v38 + 32);
      }
      sub_1001A7CDC(v40, 0LL, (uint64_t)v7);
      uint64_t v78 = v39;
      unint64_t v41 = v39[2];
      if (v41 >= v39[3] >> 1)
      {
        sub_1000323A4();
        uint64_t v37 = v60;
        uint64_t v39 = v78;
      }

      ++v38;
      v39[2] = v41 + 1;
      sub_10003AA30( (uint64_t)v7,  (uint64_t)v39 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
      + *(void *)(v5 + 72) * v41);
    }

    while (v37 != v38);
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }

uint64_t type metadata accessor for InAppRegrantPurchaseHistoryRoute()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService32InAppRegrantPurchaseHistoryRoute);
}

unint64_t sub_100060C04()
{
  unint64_t result = qword_1002AC3E0;
  if (!qword_1002AC3E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100204B1C, &type metadata for InAppRegrantPurchaseHistoryRequest);
    atomic_store(result, (unint64_t *)&qword_1002AC3E0);
  }

  return result;
}

void *sub_100060C40()
{
  return sub_100019F58(*(void **)(v0 + 104), *(void *)(*(void *)(v0 + 112) + 112LL));
}

void sub_100060C5C(uint64_t (*a1)(void))
{
  Swift::Int v3 = sub_100047708(a1);
  if (!v2)
  {
    Swift::Int v4 = *(void *)(v1 + 32);
    if (v4 < v3) {
      __break(1u);
    }
    else {
      sub_100061114(v3, v4);
    }
  }

uint64_t ByteBufferView._buffer.getter()
{
  return swift_retain(*v0);
}

uint64_t SocketAddressError.FailedToParseIPByteBuffer.address.setter( uint64_t a1, unint64_t a2, unint64_t a3)
{
  int v4 = a3;
  int v5 = a2;
  unint64_t v7 = HIDWORD(a2);
  unint64_t v8 = HIDWORD(a3);
  unint64_t v9 = HIWORD(a3);
  uint64_t result = swift_release(*(void *)v3);
  *(void *)uint64_t v3 = a1;
  *(_DWORD *)(v3 + _Block_object_dispose((const void *)(v1 - 136), 8) = v5;
  *(_DWORD *)(v3 + 12) = v7;
  *(_DWORD *)(v3 + 16) = v4;
  *(_WORD *)(v3 + 20) = v8;
  *(_BYTE *)(v3 + 22) = v9;
  return result;
}

uint64_t ByteBufferView._range.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t ByteBufferView._range.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + 24) = result;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t ByteBufferView.init(buffer:range:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v6 = BYTE6(a3) | (WORD2(a3) << 8);
  BOOL v7 = a3 >= v6;
  uint64_t v8 = a3 - v6;
  if (v7)
  {
    if ((a4 & 0x8000000000000000LL) == 0 && v8 >= a5)
    {
      *(void *)a6 = result;
      *(void *)(a6 + _Block_object_dispose((const void *)(v1 - 136), 8) = a2;
      *(_DWORD *)(a6 + 16) = a3;
      *(_WORD *)(a6 + 20) = WORD2(a3);
      *(_BYTE *)(a6 + 22) = BYTE6(a3);
      *(void *)(a6 + 24) = a4;
      *(void *)(a6 + 32) = a5;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t ByteBufferView.init(_:)@<X0>( uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (HIDWORD(a2) < a2)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  unsigned int v4 = BYTE6(a3) | (WORD2(a3) << 8);
  BOOL v5 = a3 >= v4;
  unsigned int v6 = a3 - v4;
  if (!v5) {
    goto LABEL_7;
  }
  if (HIDWORD(a2) <= v6) {
    return sub_100063A84(result, a2, a3, a4);
  }
LABEL_8:
  __break(1u);
  return result;
}

void ByteBufferView.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *v3;
  _OWORD v6[2] = a3;
  void v6[3] = a1;
  void v6[4] = a2;
  ByteBuffer.withVeryUnsafeBytes<A>(_:)((void (*)(void, void))sub_100063338, (uint64_t)v6, v5);
}

uint64_t sub_100060E24( uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5)
{
  if (result)
  {
    uint64_t v5 = *(void *)(a5 + 24);
    uint64_t v6 = *(void *)(a5 + 32);
    BOOL v7 = __OFSUB__(v6, v5);
    uint64_t v8 = v6 - v5;
    if (!v7) {
      return a3(result + v5, result + v5 + v8);
    }
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t ByteBufferView.startIndex.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t ByteBufferView.endIndex.getter()
{
  return *(void *)(v0 + 32);
}

Swift::Int __swiftcall Heap.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1LL);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t ByteBufferView.subscript.getter(uint64_t result)
{
  if (*(void *)(v1 + 24) > result || *(void *)(v1 + 32) <= result)
  {
    __break(1u);
    goto LABEL_8;
  }

  sub_100063A20();
  Swift::Int result = sub_100060EBC(v3, 0LL, v4, v5, v6);
  if ((result & 0x100) != 0) {
LABEL_8:
  }
    __break(1u);
  return result;
}

uint64_t sub_100060EBC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5 = result - a4;
  if (__OFSUB__(result, a4))
  {
    __break(1u);
  }

  else
  {
    if ((v5 & 0x8000000000000000LL) != 0) {
      goto LABEL_6;
    }
    if (HIDWORD(a4) >= a4)
    {
      if (v5 < (HIDWORD(a4) - a4))
      {
        uint64_t v8 = a4;
        sub_1000487CC(a3 + 24, (uint64_t)v11);
        int v9 = 0;
        int v10 = *(unsigned __int8 *)(*(void *)(a3 + 24) + ((a5 >> 24) & 0xFFFF00 | BYTE6(a5)) + v8 + v5);
        return v10 | (v9 << 8);
      }

LABEL_6:
      int v10 = 0;
      int v9 = 1;
      return v10 | (v9 << 8);
    }
  }

  __break(1u);
  return result;
}

    sub_10015185C(a1);
    return;
  }

  if (a1 != 1) {
    goto LABEL_6;
  }
  sub_10015000C(v1, 1u);
  if (!v2) {
    goto LABEL_6;
  }
  uint64_t v4 = sub_1000ABE38();
  uint64_t v8 = 103LL;
LABEL_8:
  swift_unexpectedError(v4, v5, v6, v7, v8);
  __break(1u);
}

  int v9 = sub_1000CA3FC(a1, a2, (uint64_t)&off_1002725B0);
  swift_bridgeObjectRelease();
  LOWORD(v18[0]) = 256;
  memset((char *)v18 + 2, 0, 104);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v9 + 32, v9 + 32 + *(void *)(v9 + 16), (char *)v18 + 2);
  swift_bridgeObjectRelease();
  int v10 = WORD4(v18[6]);
  uint64_t v11 = sub_1000175B0(&qword_1002AFF60);
  unsigned int v12 = sub_100019310(v11, 122LL);
  Swift::UInt16 v13 = v18[1];
  *(_OWORD *)(v12 + 16) = v18[0];
  *(_OWORD *)(v12 + 32) = v13;
  unsigned int v14 = v18[3];
  uint64_t v15 = v18[4];
  uint64_t v16 = v18[5];
  uint64_t v17 = *(void *)&v18[6];
  *(_OWORD *)(v12 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v18[2];
  *(_OWORD *)(v12 + 64) = v14;
  *(_OWORD *)(v12 + 80) = v15;
  *(_OWORD *)(v12 + 96) = v16;
  *(_WORD *)(v12 + 120) = v10;
  Swift::Int result = v12 | 0x8000000000000000LL;
  *(void *)(v12 + 112) = v17;
  return result;
}

      uint64_t v57 = v11;
      id v30 = v58 & 1;
      __chkstk_darwin(v20);
      *(&v54 - 2) = v5;
      *((_BYTE *)&v54 - _Block_object_dispose((const void *)(v1 - 136), 8) = a1 & 1;
      *((_BYTE *)&v54 - 7) = v30;
      uint64_t v31 = (uint64_t)v14;
      uint64_t v32 = v59;
      while (1)
      {
        Swift::Int result = sub_1001BFA20((void (*)(uint64_t *))sub_1001C03E4, v31);
        if (v32) {
          return result;
        }
        uint64_t v34 = v60;
        (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v19, v14, AssociatedTypeWitness);
        v62(v19);
        uint64_t v35 = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v19, AssociatedTypeWitness);
        __chkstk_darwin(v35);
        *(&v54 - 2) = v5;
        *((_BYTE *)&v54 - _Block_object_dispose((const void *)(v1 - 136), 8) = a1 & 1;
        *((_BYTE *)&v54 - 7) = v30;
        uint64_t v31 = (uint64_t)v14;
      }

      (*(void (**)(char *, uint64_t))(v55 + 8))(v14, v57);
      uint64_t v39 = *(void *)v5;
      id v40 = &v5[*(void *)(*(void *)v5 + 104LL)];
      if ((v40[8] & 1) == 0)
      {
        unint64_t v41 = *(void *)v40;
        uint64_t v42 = &v5[*(void *)(v39 + 112)];
        Swift::Int result = swift_beginAccess(v42, v64, 0LL, 0LL);
        if (!*(void *)v42)
        {
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          return result;
        }

        uint64_t v43 = *((_DWORD *)v42 + 2);
        uint64_t v44 = *((_DWORD *)v42 + 3);
        unint64_t v45 = v44 >= v43;
        unint64_t v46 = v44 - v43;
        if (!v45) {
          goto LABEL_33;
        }
        if (v41 < v46)
        {
          uint64_t v47 = sub_100067D68();
          uint64_t v48 = swift_allocError(&type metadata for ByteToMessageDecoderError.PayloadTooLargeError, v47, 0LL, 0LL);
          return swift_willThrow(v48);
        }

        uint64_t v39 = *(void *)v5;
      }

      uint64_t v51 = &v5[*(void *)(v39 + 112)];
      Swift::Int result = swift_beginAccess(v51, v69, 0LL, 0LL);
      if (!*(void *)v51)
      {
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }

      uint64_t v52 = *((_DWORD *)v51 + 2);
      uint64_t v53 = *((_DWORD *)v51 + 3);
      if (v53 >= v52)
      {
        if (v53 != v52) {
          return result;
        }
        Swift::Int result = swift_beginAccess(v51, v65, 33LL, 0LL);
        if (*(void *)v51)
        {
          ByteBuffer.discardReadBytes()();
          return swift_endAccess(v65);
        }

        goto LABEL_36;
      }

      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }

    __break(1u);
    goto LABEL_31;
  }

  if (qword_1002A8CC8 != -1) {
LABEL_31:
  }
    swift_once(&qword_1002A8CC8, sub_10005B580);
  uint64_t v28 = (int32x2_t)qword_1002EB928;
  LODWORD(v25) = dword_1002EB930;
  LOWORD(v26) = word_1002EB934;
  uint64_t v27 = byte_1002EB936;
  uint64_t v29 = swift_retain();
LABEL_12:
  v65[0] = v29;
  v65[1] = v28;
  uint64_t v66 = v25;
  char v67 = v26;
  int v68 = v27;
  swift_beginAccess(&v5[*(void *)(*(void *)v5 + 96LL)], v69, 33LL, 0LL);
  uint64_t v36 = *(void (**)(void *, void, uint64_t, uint64_t))(v8 + 24);
  swift_retain();
  uint64_t v37 = (uint64_t)v56;
  uint64_t v38 = v59;
  v36(v65, v58 & 1, v57, v8);
  swift_endAccess(v69);
  if (!v38)
  {
    if (sub_10001D158(v37, 1LL, AssociatedTypeWitness) == 1)
    {
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 8))(v37, v11);
    }

    uint64_t v49 = v60;
    unsigned int v50 = v54;
    (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v54, v37, AssociatedTypeWitness);
    v62(v50);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v50, AssociatedTypeWitness);
  }

  return swift_release();
}

uint64_t ByteBufferView.subscript.setter(char a1, uint64_t a2)
{
  if (*(void *)(v2 + 24) > a2)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }

  if (*(void *)(v2 + 32) <= a2) {
    goto LABEL_5;
  }
  char v4 = a1;
  return ByteBuffer._setBytes(_:at:)((uint64_t)&v4, (uint64_t)&v5, a2);
}

uint64_t ByteBufferView.subscript.modify(uint64_t result, uint64_t a2)
{
  *(void *)Swift::Int result = a2;
  *(void *)(result + _Block_object_dispose((const void *)(v1 - 136), 8) = v2;
  if (*(void *)(v2 + 24) > a2 || *(void *)(v2 + 32) <= a2)
  {
    __break(1u);
  }

  else
  {
    uint64_t v4 = result;
    sub_100063A04();
    Swift::Int result = sub_100060EBC(v5, 0LL, v6, v7, v8);
    if ((result & 0x100) == 0)
    {
      *(_BYTE *)(v4 + 16) = result;
      return (uint64_t)sub_10006102C;
    }
  }

  __break(1u);
  return result;
}

void sub_10006102C(uint64_t a1)
{
}

unint64_t ByteBufferView.subscript.getter@<X0>( unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v5 = *((_DWORD *)v3 + 4);
  int v6 = *((unsigned __int16 *)v3 + 10);
  int v7 = *((unsigned __int8 *)v3 + 22);
  unsigned int v8 = v7 | (v6 << 8);
  BOOL v9 = v5 >= v8;
  uint64_t v10 = v5 - v8;
  if (v9)
  {
    unint64_t v11 = result;
    if ((result & 0x8000000000000000LL) == 0 && v10 >= a2)
    {
      uint64_t v13 = *v3;
      uint64_t v14 = v3[1];
      Swift::Int result = (unint64_t)sub_100018F0C(v3);
      *(void *)a3 = v13;
      *(void *)(a3 + _Block_object_dispose((const void *)(v1 - 136), 8) = v14;
      *(_DWORD *)(a3 + 16) = v5;
      *(_WORD *)(a3 + 20) = v6;
      *(_BYTE *)(a3 + 22) = v7;
      *(void *)(a3 + 24) = v11;
      *(void *)(a3 + 32) = a2;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void *ByteBufferView.subscript.setter(uint64_t *a1, uint64_t a2, Swift::Int at)
{
  return sub_100063354(a1);
}

void sub_100061114(Swift::Int to, Swift::Int at)
{
  uint64_t v4 = *(void *)(v2 + 24);
  if (v4 > to)
  {
    __break(1u);
    goto LABEL_17;
  }

  Swift::Int v3 = at;
  uint64_t v5 = *(void *)(v2 + 32);
  if (v5 < at)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v7 = at - to;
  if (__OFSUB__(at, to))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (!v7)
  {
    sub_10005C50C(to);
    return;
  }

  if (v7 > 0)
  {
    sub_10005C50C(to);
    uint64_t v8 = *(unsigned int *)(v2 + 12);
    if (!__OFSUB__(v8, v3))
    {
      ByteBuffer.copyBytes(at:to:length:)(v3, to, v8 - v3);
      if (!v3)
      {
        ByteBuffer.moveWriterIndex(to:)(*(unsigned int *)(v2 + 12) - v7);
        *(void *)(v2 + 24) = sub_100062504(v7, v4, v5);
        *(void *)(v2 + 32) = v9;
        return;
      }

      goto LABEL_24;
    }

    goto LABEL_19;
  }

  uint64_t v10 = *(unsigned int *)(v2 + 12);
  if (__OFSUB__(v10, at))
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  ByteBuffer.copyBytes(at:to:length:)(at, to, v10 - at);
  if (v11)
  {
    Swift::Int v13 = v11;
    uint64_t v14 = 144LL;
    goto LABEL_26;
  }

  sub_10005C50C(to);
  Swift::Int v3 = -v7;
  if (__OFSUB__(0LL, v7)) {
    goto LABEL_21;
  }
  ByteBuffer.moveWriterIndex(forwardBy:)(-v7);
  uint64_t v12 = v5 - v7;
  if (!__OFADD__(v5, v3))
  {
    if (v12 >= v4)
    {
      *(void *)(v2 + 24) = v4;
      *(void *)(v2 + 32) = v12;
      return;
    }

    goto LABEL_23;
  }

void sub_100061288(uint64_t a1, Swift::Int at, char a3)
{
  uint64_t v5 = *(void *)(v3 + 24);
  if (v5 > a1)
  {
    __break(1u);
    goto LABEL_19;
  }

  Swift::Int v4 = at;
  uint64_t v6 = *(void *)(v3 + 32);
  if (v6 < at)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v8 = at - a1;
  if (__OFSUB__(at, a1))
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  if (v8 == 1)
  {
    sub_10005C89C(a3, a1);
    return;
  }

  if (v8 > 1)
  {
    sub_10005C89C(a3, a1);
    if (!__OFADD__(a1, 1LL))
    {
      uint64_t v10 = *(unsigned int *)(v3 + 12);
      if (!__OFSUB__(v10, v4))
      {
        ByteBuffer.copyBytes(at:to:length:)(v4, a1 + 1, v10 - v4);
        if (!v4)
        {
          ByteBuffer.moveWriterIndex(to:)(*(unsigned int *)(v3 + 12) - (v8 - 1));
          *(void *)(v3 + 24) = sub_100062504(v8 - 1, v5, v6);
          *(void *)(v3 + 32) = v11;
          return;
        }

        goto LABEL_28;
      }

      goto LABEL_23;
    }

    goto LABEL_21;
  }

  if (__OFADD__(a1, 1LL))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v12 = *(unsigned int *)(v3 + 12);
  if (__OFSUB__(v12, at))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  ByteBuffer.copyBytes(at:to:length:)(at, a1 + 1, v12 - at);
  if (v13)
  {
    Swift::Int v15 = v13;
    uint64_t v16 = 144LL;
    goto LABEL_30;
  }

  sub_10005C89C(a3, a1);
  Swift::Int v4 = 1 - v8;
  if (__OFSUB__(1LL, v8)) {
    goto LABEL_25;
  }
  ByteBuffer.moveWriterIndex(forwardBy:)(1 - v8);
  uint64_t v14 = v6 + v4;
  if (!__OFADD__(v6, v4))
  {
    if (v14 >= v5)
    {
      *(void *)(v3 + 24) = v5;
      *(void *)(v3 + 32) = v14;
      return;
    }

    goto LABEL_27;
  }

LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  Swift::Int v15 = v4;
  uint64_t v16 = 133LL;
LABEL_30:
  swift_unexpectedError(v15, "ASOctaneSupportXPCService/ByteBuffer-views.swift", 48LL, 1LL, v16);
  __break(1u);
}

    uint64_t v57 = sub_100092F9C();
    uint64_t v59 = sub_100093158(v57, v58);
    sub_100023EEC();
    if (v59)
    {
      uint64_t v60 = *(void *)(v59 + 176);
      uint64_t v61 = *(unsigned __int8 *)(v59 + 184);
      sub_100024F0C();
      uint64_t v62 = 0LL;
      goto LABEL_42;
    }

    goto LABEL_32;
  }

  uint64_t v65 = *(void *)(v6 - 224);
  __int128 v64 = *(void *)(v6 - 216);
  char v67 = *(void *)(v6 - 208);
  uint64_t v66 = *(void *)(v6 - 200);
  int v68 = *(unsigned __int8 *)(v6 - 192);
  __int16 v69 = *(void *)(v6 - 184);
  *(void *)(v0 + 40) = *(void *)(v6 - 168);
  *(void *)uint64_t v0 = v65;
  *(void *)(v0 + _Block_object_dispose((const void *)(v1 - 136), 8) = v64;
  *(void *)(v6 - 152) = v65;
  *(void *)(v6 - 144) = v64;
  *(void *)(v0 + 16) = v67;
  *(void *)(v0 + 24) = v66;
  *(void *)(v6 - 136) = v67;
  *(void *)(v6 - 12_Block_object_dispose((const void *)(v1 - 136), 8) = v66;
  *(_DWORD *)(v0 + 36) = v68;
  *(_BYTE *)(v6 - 120) = v68;
  *(void *)(v0 + 176) = v69;
  *(void *)(v0 + 112) = sub_10008E58C(v63, v69);
  *(_DWORD *)(v0 + 184) = v70;
  uint64_t v72 = *(void *)(v63 + 80);
  __int128 v71 = *(void *)(v63 + 88);
  *(void *)(v0 + 296) = &type metadata for String;
  *(void *)(v0 + 272) = v72;
  *(void *)(v0 + 280) = v71;
  swift_bridgeObjectRetain();
  uint64_t v73 = sub_100092E24();
  sub_1001B1CF8(v73, 9LL);
  sub_100041B5C();
  unsigned int v74 = sub_1001BA8BC();
  unsigned __int8 v76 = v75;
  uint64_t v78 = v77;
  *(void *)(v0 + 104) = v63;
  sub_10002A51C();
  uint64_t v2 = (void *)HIWORD(v74);
  __int128 v20 = HIWORD(v76);
  Swift::Int v15 = HIWORD(v78);
  sub_100093180();
  *(void *)(v0 + 96) = v79;
  *(void *)(v0 + 296) = v79;
  *(_DWORD *)(v0 + 272) = v74;
  *(_WORD *)(v0 + 276) = WORD2(v74);
  id v80 = *(void *)(v0 + 40);
  *(_WORD *)(v0 + 27_Block_object_dispose((const void *)(v1 - 136), 8) = HIWORD(v74);
  *(void *)(v0 + 280) = v76;
  *(_DWORD *)(v0 + 28_Block_object_dispose((const void *)(v1 - 136), 8) = v78;
  sub_100092B40();
  uint64_t v3 = *(void *)(v80 + 16);
  if (v3)
  {
    *(void *)(v0 + 264) = _swiftEmptyArrayStorage;
    sub_100032050();
    ((void (*)(void))((char *)&loc_10008D860 + *((int *)qword_10008E410 + *(unsigned __int8 *)(v80 + 64))))();
    return;
  }

  sub_10001A3F8();
  *(void *)(v0 + 296) = sub_1000175B0(&qword_1002A93B8);
  *(void *)(v0 + 272) = _swiftEmptyArrayStorage;
  sub_100092D9C(v0 + 272);
  sub_100093134();
  uint64_t v61 = *(_DWORD *)(v0 + 184);
  uint64_t v81 = *(void *)(v0 + 104);
  uint64_t v82 = *(void *)(v0 + 176);
  if (v82)
  {
    sub_100041B5C();
    sub_1000B8D18();
    uint64_t v84 = v83;
    uint64_t v86 = v85;
    sub_100092FA4();
    *(void *)(v0 + 296) = &type metadata for String;
    *(void *)(v0 + 272) = v84;
    *(void *)(v0 + 280) = v86;
    uint64_t v87 = sub_100092E24();
    sub_1001B1CF8(v87, 18LL);
    ((void (*)(void))((char *)&loc_10008DAA4 + dword_10008E424[*(unsigned __int8 *)(v82 + 57)]))();
    return;
  }

  sub_100092FA4();
  uint64_t v89 = *(void *)(v81 + 80);
  unint64_t v88 = *(void *)(v81 + 88);
  sub_10001FFF0();
  if (v89 == sub_100092F9C() && v88 == v90)
  {
    sub_10001EDE8(v88);
    sub_10002A51C();
    uint64_t v62 = 0LL;
  }

  else
  {
    __int128 v92 = v90;
    __int128 v93 = sub_100077C8C();
    char v96 = sub_100048720(v93, v94, v95, v92);
    sub_10001EDA0();
    sub_100023EEC();
    sub_10002A51C();
    uint64_t v62 = v96 ^ 1u;
  }

  uint64_t v60 = *(void *)(v0 + 112);
LABEL_42:
  sub_1000B6B48();
  if ((v98 & 1) != 0)
  {
    sub_100092C7C(1LL);
    goto LABEL_54;
  }

  uint64_t v99 = v97;
  if (__OFADD__(v97, 1LL))
  {
    __break(1u);
    goto LABEL_87;
  }

  sub_100092C7C(v97 + 1);
  if (v99 < 99)
  {
LABEL_54:
    if ((v3 & 1) == 0) {
      goto LABEL_58;
    }
    goto LABEL_55;
  }

  *(_DWORD *)(v0 + 184) = v61;
  uint64_t v62 = *(void *)(v0 + 192);
  if (qword_1002A8D90 != -1) {
    goto LABEL_88;
  }
  while (1)
  {
    uint64_t v100 = sub_100077D08();
    sub_100018F68(v100, (uint64_t)qword_1002EB9D0);
    sub_100023E64(v62);
    char v101 = v2;
    __int128 v102 = (os_log_s *)Logger.logObject.getter(v101);
    uint64_t v103 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v102, v103))
    {
      __int128 v104 = sub_100019464(32LL);
      uint64_t v3 = sub_100019464(64LL);
      *(void *)(v0 + 272) = v3;
      *(_DWORD *)__int128 v104 = 136315650;
      sub_1000B8508(0xFu);
      if (!v106) {
        uint64_t v105 = 0x6E776F6E6B6E753CLL;
      }
      *(void *)(v0 + 112) = v60;
      uint64_t v107 = v106 ? v106 : 0xE90000000000003ELL;
      *(void *)(v0 + 264) = sub_1000CF360(v105, v107, (uint64_t *)(v0 + 272));
      Swift::Int v15 = *(void *)(v0 + 232);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v104 + 4);
      sub_10003561C();

      *(_WORD *)(v104 + 12) = 2080;
      sub_10001ED74();
      *(void *)(v0 + 264) = sub_100092EE4(*(void *)(v0 + 120), v108, (uint64_t *)(v0 + 272));
      uint64_t v60 = *(void *)(v0 + 112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v104 + 14);
      sub_100077CA8(v62);
      *(_WORD *)(v104 + 22) = 2048;
      *(void *)(v0 + 264) = 99LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v104 + 24);
      sub_100092E50( (void *)&_mh_execute_header,  v102,  v109,  "Automatically canceling subscription with group ID %s for bundle ID %s because we’ve already renewed it at least %ld times");
      sub_100093110(v3);
      uint64_t v110 = v3;
      LODWORD(vsub_100019F7C(v0 + 3) = *(_DWORD *)(v0 + 224);
      sub_10001A408(v110);
      uint64_t v111 = v104;
      uint64_t v2 = *(void **)(v0 + 200);
      sub_10001A408(v111);
    }

    else
    {

      sub_10001EDE8(v62);
    }

    uint64_t v61 = *(_DWORD *)(v0 + 184);
    *(void *)(v0 + 296) = sub_1000175B0(&qword_1002A93B8);
    *(void *)(v0 + 272) = _swiftEmptyArrayStorage;
    sub_100092D9C(v0 + 272);
    LODWORD(v62) = 1;
    __int128 v20 = *(void *)(v0 + 248);
    if ((v3 & 1) != 0)
    {
LABEL_55:
      *(_DWORD *)(v0 + 232) = v62;
    }

    else
    {
LABEL_58:
      *(_DWORD *)(v0 + 232) = v62;
      if (v61 != 7)
      {
        uint64_t v117 = *(void *)(v0 + 152);
        uint64_t v118 = v60;
        uint64_t v113 = *(void *)(v0 + 216);
        uint64_t v119 = sub_10008E610((uint64_t)v2, *(void *)(v0 + 208), v118, v61);
        uint64_t v120 = Date.timeIntervalSinceReferenceDate.getter(v119);
        uint64_t v114 = *(void *)(v0 + 240);
        sub_100092E08(v117, *(uint64_t (**)(uint64_t, uint64_t))(v114 + 8));
        unint64_t v112 = v120;
        goto LABEL_62;
      }
    }

    unint64_t v112 = COERCE_DOUBLE(sub_1000B85C8(4u));
    uint64_t v113 = *(void *)(v0 + 216);
    uint64_t v114 = *(void *)(v0 + 240);
    if ((v115 & 1) != 0)
    {
      *(_OWORD *)(v0 + 272) = 0u;
      *(_OWORD *)(v0 + 28_Block_object_dispose((const void *)(v1 - 136), 8) = 0u;
      uint64_t v116 = 1;
      goto LABEL_63;
    }

              __break(1u);
              goto LABEL_27;
            }

  __break(1u);
  return result;
}

    ++v20;
  }

  while (v19 != v20);
  swift_bridgeObjectRelease(v55);
LABEL_32:
  swift_bridgeObjectRelease(v55);
  return v21;
}

  sub_10002A3D4();
}

    sub_10014163C();
    sub_10014160C(v45);
    uint64_t v37 = v53;
    goto LABEL_38;
  }

  if (v55 <= 63) {
    goto LABEL_26;
  }
  uint64_t v105 = 0x7FFFFFFFFFFFFFFFLL;
  char v70 = v93;
  sub_100141668(v93, v45);
  __int128 v71 = sub_1000C88C8();
  uint64_t v72 = v91;
  sub_10014162C((uint64_t)&v105, (uint64_t)&type metadata for Int, v71);
  sub_10014165C();
  uint64_t v60 = sub_100141654(v72, v70, v73, v74);
  sub_10014160C(v72);
  uint64_t v61 = v70;
LABEL_37:
  sub_10014160C(v61);
  uint64_t v37 = v53;
  if ((v60 & 1) != 0)
  {
LABEL_42:
    sub_10014160C((uint64_t)v37);
    sub_10014160C((uint64_t)v99);
    return 0LL;
  }

    sub_100179358();
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    id v40 = sub_100077D08();
    sub_100092ADC(v40, (uint64_t)qword_1002EB9D0);
    unint64_t v41 = sub_100092F58();
    uint64_t v12 = (uint64_t)v16;
    if (sub_100024E9C(v41))
    {
      uint64_t v42 = (_WORD *)sub_10001A414();
      sub_1000A48D4(v42);
      uint64_t v38 = "Failed to find latest deferred transaction to cancel in-app buy request";
      goto LABEL_30;
    }
  }

  else
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    unint64_t v33 = sub_100077D08();
    sub_100092ADC(v33, (uint64_t)qword_1002EB9D0);
    uint64_t v34 = sub_100092F58();
    if (sub_100024E9C(v34))
    {
      uint64_t v35 = (_WORD *)sub_10001A414();
      sub_1000A48D4(v35);
      uint64_t v38 = "Failed to decode cancel purchase request";
LABEL_30:
      sub_1000A46DC((void *)&_mh_execute_header, v36, v37, v38);
      sub_10014E6E0();
    }
  }

  sub_10017932C((uint64_t)__dst);
  uint64_t v29 = LODWORD(__dst[4]) | ((unint64_t)WORD2(__dst[4]) << 32) | ((unint64_t)BYTE6(__dst[4]) << 48);
  sub_10001ED94();
  uint64_t v43 = sub_100125BDC();
  uint64_t v31 = sub_10001ED7C(v43);
  *(void *)(v31 + 16) = 0LL;
  *(void *)(v31 + 24) = 0LL;
  uint64_t v32 = 21LL;
LABEL_32:
  *(void *)(v31 + 32) = v32;
  *(_WORD *)(v31 + 40) = v7;
  *(_WORD *)(v31 + 42) = v3;
  *(void *)a2 = v31;
  *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 136), 8) = v12;
  sub_100179408();
  *(_BYTE *)(a2 + 62) = BYTE6(v29);
  *(_WORD *)(a2 + 60) = WORD2(v29);
  *(_DWORD *)(a2 + 56) = v29;
  sub_10002A580();
}

        uint64_t v54 = v12[8];
        unint64_t v55 = (char *)v10 + v54;
        uint64_t v56 = (char *)v11 + v54;
        *(void *)unint64_t v55 = *(void *)v56;
        v55[8] = v56[8];
        uint64_t v57 = v12[9];
        unint64_t v58 = (char *)v10 + v57;
        uint64_t v59 = (char *)v11 + v57;
        v58[8] = v59[8];
        *(void *)unint64_t v58 = *(void *)v59;
        uint64_t v60 = v12[10];
        uint64_t v61 = (char *)v10 + v60;
        uint64_t v62 = (char *)v11 + v60;
        uint64_t v63 = type metadata accessor for UUID(0LL);
        __int128 v64 = *(void *)(v63 - 8);
        uint64_t v65 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v64 + 48);
        uint64_t v66 = v65(v61, 1LL, v63);
        char v67 = v65(v62, 1LL, v63);
        if (v66)
        {
          if (!v67)
          {
            (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v61, v62, v63);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v61, 0LL, 1LL, v63);
LABEL_32:
            a3 = v77;
            goto LABEL_33;
          }
        }

        else
        {
          if (!v67)
          {
            (*(void (**)(char *, char *, uint64_t))(v64 + 40))(v61, v62, v63);
            goto LABEL_32;
          }

          (*(void (**)(char *, uint64_t))(v64 + 8))(v61, v63);
        }

        int v68 = sub_1000175B0(&qword_1002B9B18);
        memcpy(v61, v62, *(void *)(*(void *)(v68 - 8) + 64LL));
        goto LABEL_32;
      }

      sub_100047E84((uint64_t)v10);
    }

    *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
    goto LABEL_18;
  }

  if (v16)
  {
LABEL_7:
    int v24 = sub_1000175B0(&qword_1002BA218);
    memcpy(v10, v11, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_33;
  }

  unsigned __int8 v76 = a3;
  uint64_t v17 = *((_OWORD *)v11 + 1);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *((_OWORD *)v10 + Hasher._combine(_:)(v1 & 1) = v17;
  *((_OWORD *)v10 + 2) = *((_OWORD *)v11 + 2);
  uint64_t v18 = v12[7];
  uint64_t v19 = (char *)v10 + v18;
  __int128 v20 = (char *)v11 + v18;
  uint64_t v21 = sub_1000175B0(&qword_1002B9A70);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 3LL, v21))
  {
    uint64_t v23 = type metadata accessor for ClientOverride.Server(0LL);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    uint64_t v27 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32LL))(v19, v20, v27);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 3LL, v21);
  }

  uint64_t v28 = v12[8];
  uint64_t v29 = (char *)v10 + v28;
  id v30 = (char *)v11 + v28;
  *(void *)uint64_t v29 = *(void *)v30;
  v29[8] = v30[8];
  uint64_t v31 = v12[9];
  uint64_t v32 = (char *)v10 + v31;
  unint64_t v33 = (char *)v11 + v31;
  v32[8] = v33[8];
  *(void *)uint64_t v32 = *(void *)v33;
  uint64_t v34 = v12[10];
  uint64_t v35 = (char *)v10 + v34;
  uint64_t v36 = (char *)v11 + v34;
  uint64_t v37 = type metadata accessor for UUID(0LL);
  uint64_t v38 = *(void *)(v37 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1LL, v37))
  {
    uint64_t v39 = sub_1000175B0(&qword_1002B9B18);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v35, v36, v37);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0LL, 1LL, v37);
  }

  a3 = v76;
  (*(void (**)(uint64_t *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
LABEL_33:
  __int16 v69 = *(int *)(a3 + 32);
  char v70 = (void *)((char *)a1 + v69);
  __int128 v71 = (void *)((char *)a2 + v69);
  uint64_t v73 = *v71;
  uint64_t v72 = v71[1];
  *char v70 = v73;
  v70[1] = v72;
  swift_bridgeObjectRelease();
  return a1;
}

        uint64_t v52 = v10[8];
        uint64_t v53 = (char *)v8 + v52;
        uint64_t v54 = (char *)v9 + v52;
        *(void *)uint64_t v53 = *(void *)v54;
        v53[8] = v54[8];
        unint64_t v55 = v10[9];
        uint64_t v56 = (char *)v8 + v55;
        uint64_t v57 = (char *)v9 + v55;
        v56[8] = v57[8];
        *(void *)uint64_t v56 = *(void *)v57;
        unint64_t v58 = v10[10];
        uint64_t v59 = (char *)v8 + v58;
        uint64_t v60 = (char *)v9 + v58;
        uint64_t v61 = type metadata accessor for UUID(0LL);
        uint64_t v62 = *(void *)(v61 - 8);
        uint64_t v63 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 48);
        __int128 v64 = v63(v59, 1LL, v61);
        uint64_t v65 = v63(v60, 1LL, v61);
        if (v64)
        {
          if (!v65)
          {
            (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v59, v60, v61);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v59, 0LL, 1LL, v61);
LABEL_32:
            a3 = v79;
            goto LABEL_33;
          }
        }

        else
        {
          if (!v65)
          {
            (*(void (**)(char *, char *, uint64_t))(v62 + 40))(v59, v60, v61);
            goto LABEL_32;
          }

          (*(void (**)(char *, uint64_t))(v62 + 8))(v59, v61);
        }

        uint64_t v66 = sub_1000175B0(&qword_1002B9B18);
        memcpy(v59, v60, *(void *)(*(void *)(v66 - 8) + 64LL));
        goto LABEL_32;
      }

      sub_100047E84((uint64_t)v8);
    }

    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_18;
  }

  if (v14)
  {
LABEL_7:
    uint64_t v22 = sub_1000175B0(&qword_1002BA218);
    memcpy(v8, v9, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_33;
  }

  uint64_t v78 = a3;
  Swift::Int v15 = *((_OWORD *)v9 + 1);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *((_OWORD *)v8 + Hasher._combine(_:)(v1 & 1) = v15;
  *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
  uint64_t v16 = v10[7];
  uint64_t v17 = (char *)v8 + v16;
  uint64_t v18 = (char *)v9 + v16;
  uint64_t v19 = sub_1000175B0(&qword_1002B9A70);
  __int128 v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 3LL, v19))
  {
    uint64_t v21 = type metadata accessor for ClientOverride.Server(0LL);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64LL));
  }

  else
  {
    uint64_t v25 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32LL))(v17, v18, v25);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 3LL, v19);
  }

  uint64_t v26 = v10[8];
  uint64_t v27 = (char *)v8 + v26;
  uint64_t v28 = (char *)v9 + v26;
  *(void *)uint64_t v27 = *(void *)v28;
  v27[8] = v28[8];
  uint64_t v29 = v10[9];
  id v30 = (char *)v8 + v29;
  uint64_t v31 = (char *)v9 + v29;
  v30[8] = v31[8];
  *(void *)id v30 = *(void *)v31;
  uint64_t v32 = v10[10];
  unint64_t v33 = (char *)v8 + v32;
  uint64_t v34 = (char *)v9 + v32;
  uint64_t v35 = type metadata accessor for UUID(0LL);
  uint64_t v36 = *(void *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1LL, v35))
  {
    uint64_t v37 = sub_1000175B0(&qword_1002B9B18);
    memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v33, v34, v35);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0LL, 1LL, v35);
  }

  a3 = v78;
  (*(void (**)(uint64_t *, void, uint64_t, int *))(v11 + 56))(v8, 0LL, 1LL, v10);
LABEL_33:
  char v67 = a3[6];
  int v68 = (void *)((char *)a1 + v67);
  __int16 v69 = (void *)((char *)a2 + v67);
  __int128 v71 = *v69;
  char v70 = v69[1];
  *int v68 = v71;
  v68[1] = v70;
  swift_bridgeObjectRelease();
  uint64_t v72 = a3[7];
  uint64_t v73 = (char *)a1 + v72;
  unsigned int v74 = (char *)a2 + v72;
  unsigned __int16 v75 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v75 - 8) + 40LL))(v73, v74, v75);
  return a1;
}

        uint64_t v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }

      __int128 v20 = *(unsigned __int8 *)(*(void *)(v3 + 48) + v16);
      Hasher.init(_seed:)(v30);
      Hasher._combine(_:)(v20);
      Swift::Int result = Hasher._finalize()();
      uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v22 = result & ~v21;
      uint64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        int v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v26 = v23 == v25;
          if (v23 == v25) {
            uint64_t v23 = 0LL;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v23);
        }

        while (v27 == -1);
        uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(_BYTE *)(*(void *)(v6 + 48) + v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }

  Swift::Int result = swift_release();
  unsigned __int8 *v2 = v6;
  return result;
}

    uint64_t v11 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    __int128 v20 = *(unsigned __int8 *)(*(void *)(v3 + 48) + v16);
    Hasher.init(_seed:)(v29);
    Hasher._combine(_:)(v20);
    Swift::Int result = Hasher._finalize()();
    uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v22 = result & ~v21;
    uint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v26 = v23 == v25;
        if (v23 == v25) {
          uint64_t v23 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v13 + 8 * v23);
      }

      while (v27 == -1);
      uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(_BYTE *)(*(void *)(v6 + 48) + v14) = v20;
    ++*(void *)(v6 + 16);
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    Swift::Int result = swift_release();
    uint64_t v2 = v28;
    goto LABEL_38;
  }

  uint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    uint64_t v7 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_36;
    }
    uint64_t v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

        uint64_t v52 = v10[8];
        uint64_t v53 = (char *)v8 + v52;
        uint64_t v54 = (char *)v9 + v52;
        *(void *)uint64_t v53 = *(void *)v54;
        v53[8] = v54[8];
        unint64_t v55 = v10[9];
        uint64_t v56 = (char *)v8 + v55;
        uint64_t v57 = (char *)v9 + v55;
        v56[8] = v57[8];
        *(void *)uint64_t v56 = *(void *)v57;
        unint64_t v58 = v10[10];
        uint64_t v59 = (char *)v8 + v58;
        uint64_t v60 = (char *)v9 + v58;
        uint64_t v61 = type metadata accessor for UUID(0LL);
        uint64_t v62 = *(void *)(v61 - 8);
        uint64_t v63 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 48);
        __int128 v64 = v63(v59, 1LL, v61);
        uint64_t v65 = v63(v60, 1LL, v61);
        if (v64)
        {
          if (!v65)
          {
            (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v59, v60, v61);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v59, 0LL, 1LL, v61);
LABEL_32:
            a3 = v75;
            goto LABEL_33;
          }
        }

        else
        {
          if (!v65)
          {
            (*(void (**)(char *, char *, uint64_t))(v62 + 40))(v59, v60, v61);
            goto LABEL_32;
          }

          (*(void (**)(char *, uint64_t))(v62 + 8))(v59, v61);
        }

        uint64_t v66 = sub_1000175B0(&qword_1002B9B18);
        memcpy(v59, v60, *(void *)(*(void *)(v66 - 8) + 64LL));
        goto LABEL_32;
      }

      sub_100047E84((uint64_t)v8);
    }

    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_18;
  }

  if (v14)
  {
LABEL_7:
    uint64_t v22 = sub_1000175B0(&qword_1002BA218);
    memcpy(v8, v9, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_33;
  }

  unsigned int v74 = a3;
  Swift::Int v15 = *((_OWORD *)v9 + 1);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *((_OWORD *)v8 + Hasher._combine(_:)(v1 & 1) = v15;
  *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
  uint64_t v16 = v10[7];
  uint64_t v17 = (char *)v8 + v16;
  uint64_t v18 = (char *)v9 + v16;
  uint64_t v19 = sub_1000175B0(&qword_1002B9A70);
  __int128 v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 3LL, v19))
  {
    uint64_t v21 = type metadata accessor for ClientOverride.Server(0LL);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64LL));
  }

  else
  {
    uint64_t v25 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32LL))(v17, v18, v25);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 3LL, v19);
  }

  uint64_t v26 = v10[8];
  uint64_t v27 = (char *)v8 + v26;
  uint64_t v28 = (char *)v9 + v26;
  *(void *)uint64_t v27 = *(void *)v28;
  v27[8] = v28[8];
  uint64_t v29 = v10[9];
  id v30 = (char *)v8 + v29;
  uint64_t v31 = (char *)v9 + v29;
  v30[8] = v31[8];
  *(void *)id v30 = *(void *)v31;
  uint64_t v32 = v10[10];
  unint64_t v33 = (char *)v8 + v32;
  uint64_t v34 = (char *)v9 + v32;
  uint64_t v35 = type metadata accessor for UUID(0LL);
  uint64_t v36 = *(void *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1LL, v35))
  {
    uint64_t v37 = sub_1000175B0(&qword_1002B9B18);
    memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v33, v34, v35);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0LL, 1LL, v35);
  }

  a3 = v74;
  (*(void (**)(uint64_t *, void, uint64_t, int *))(v11 + 56))(v8, 0LL, 1LL, v10);
LABEL_33:
  char v67 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  int v68 = (void *)(a1 + v67);
  __int16 v69 = (uint64_t *)(a2 + v67);
  __int128 v71 = *v69;
  char v70 = v69[1];
  *int v68 = v71;
  v68[1] = v70;
  swift_bridgeObjectRelease();
  return a1;
}

void sub_10006142C(uint64_t a1, Swift::Int at, uint64_t *a3)
{
  uint64_t v5 = *(void *)(v3 + 24);
  if (v5 > a1)
  {
    __break(1u);
    goto LABEL_23;
  }

  Swift::Int v4 = at;
  uint64_t v6 = *(void *)(v3 + 32);
  if (v6 < at)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v9 = a3[3];
  uint64_t v8 = a3[4];
  uint64_t v10 = v8 - v9;
  if (v8 < v9)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if (__OFSUB__(v8, v9))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  Swift::Int v12 = at - a1;
  if (__OFSUB__(at, a1))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  if (v10 == v12)
  {
    uint64_t v13 = *a3;
    uint64_t v14 = *((unsigned __int16 *)a3 + 10);
    uint64_t v15 = *((unsigned __int8 *)a3 + 22);
    swift_beginAccess(*a3 + 24, v33, 0LL, 0LL);
    uint64_t v16 = *(void *)(v13 + 24) + (v15 | (v14 << 8)) + v9;
    ByteBuffer._setBytes(_:at:)(v16, v16 + v10, a1);
    return;
  }

  if (v10 >= v12)
  {
    if (!__OFADD__(a1, v10))
    {
      uint64_t v23 = *(unsigned int *)(v3 + 12);
      if (!__OFSUB__(v23, at))
      {
        ByteBuffer.copyBytes(at:to:length:)(at, a1 + v10, v23 - at);
        if (v24)
        {
          Swift::Int v30 = v24;
          uint64_t v31 = 144LL;
          goto LABEL_38;
        }

        uint64_t v25 = *a3;
        uint64_t v26 = *((unsigned __int16 *)a3 + 10);
        uint64_t v27 = *((unsigned __int8 *)a3 + 22);
        swift_beginAccess(v25 + 24, v33, 0LL, 0LL);
        uint64_t v28 = *(void *)(v25 + 24) + (v27 | (v26 << 8)) + v9;
        ByteBuffer._setBytes(_:at:)(v28, v28 + v10, a1);
        Swift::Int v4 = v10 - v12;
        if (!__OFSUB__(v10, v12))
        {
          ByteBuffer.moveWriterIndex(forwardBy:)(v10 - v12);
          uint64_t v29 = v6 + v4;
          if (!__OFADD__(v6, v4))
          {
            if (v29 >= v5)
            {
              *(void *)(v3 + 24) = v5;
              *(void *)(v3 + 32) = v29;
              return;
            }

            goto LABEL_35;
          }

LABEL_36:
  Swift::Int v30 = v4;
  uint64_t v31 = 133LL;
LABEL_38:
  swift_unexpectedError(v30, "ASOctaneSupportXPCService/ByteBuffer-views.swift", 48LL, 1LL, v31);
  __break(1u);
}

void ByteBufferView.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(v5 + 24);
  if (v7 > a1)
  {
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v6 = a2;
  uint64_t v8 = *(void *)(v5 + 32);
  if (v8 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v13 = dispatch thunk of Collection.count.getter(a4, a5);
  uint64_t v14 = v6 - a1;
  if (__OFSUB__(v6, a1))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if (v13 == v14)
  {
    ByteBuffer.setBytes<A>(_:at:)(a3, a1, a4, *(void *)(a5 + 8));
    return;
  }

  if (sub_100063980() >= v14)
  {
    uint64_t v20 = sub_100063980();
    if (!__OFADD__(a1, v20))
    {
      uint64_t v21 = *(unsigned int *)(v5 + 12);
      if (!__OFSUB__(v21, v6))
      {
        sub_100063A3C(v20, a1 + v20, v21 - v6);
        if (v6)
        {
          uint64_t v25 = sub_100063AB4();
          goto LABEL_34;
        }

        sub_1000639EC();
        uint64_t v22 = sub_100063980();
        uint64_t v6 = v22 - v14;
        if (!__OFSUB__(v22, v14))
        {
          ByteBuffer.moveWriterIndex(forwardBy:)(v22 - v14);
          uint64_t v23 = v8 + v6;
          if (!__OFADD__(v8, v6))
          {
            if (v23 >= v7)
            {
              *(void *)(v5 + 24) = v7;
              *(void *)(v5 + 32) = v23;
              return;
            }

            goto LABEL_31;
          }

LABEL_32:
  Swift::Int v24 = "ASOctaneSupportXPCService/ByteBuffer-views.swift";
  uint64_t v25 = v6;
  uint64_t v26 = 48LL;
  uint64_t v27 = 1LL;
  uint64_t v28 = 133LL;
LABEL_34:
  swift_unexpectedError(v25, v24, v26, v27, v28);
  __break(1u);
}

      sub_1000D1E20();
      goto LABEL_33;
    }

        Swift::Int result = (unint64_t *)swift_bridgeObjectRelease();
      }

      Swift::Int result = (unint64_t *)swift_bridgeObjectRelease();
LABEL_22:
      uint64_t v31 = v41[v25];
      v41[v25] = v31 & ~v26;
    }

    while ((v26 & v31) == 0);
    uint64_t v8 = v40 - 1;
    if (__OFSUB__(v40, 1LL))
    {
LABEL_48:
      __break(1u);
      return result;
    }

    if (v40 != 1) {
      continue;
    }
    return (unint64_t *)&_swiftEmptySetSingleton;
  }

      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }

    return 0LL;
  }

  __break(1u);
  return result;
}

void (*ByteBufferView.subscript.modify( void *a1, unint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t v7 = malloc(0xB8uLL);
  *a1 = v7;
  v7[21] = a3;
  v7[22] = v3;
  v7[20] = a2;
  __int128 v8 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v3;
  *((_OWORD *)v7 + Hasher._combine(_:)(v1 & 1) = v8;
  void v7[4] = *(void *)(v3 + 32);
  ByteBufferView.subscript.getter(a2, a3, (uint64_t)(v7 + 15));
  return sub_1000618D4;
}

void sub_1000618D4(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  Swift::Int v4 = (void *)(*a1 + 120);
  if ((a2 & 1) != 0)
  {
    sub_1000639D0();
    sub_100063A4C();
    sub_100063354(v2);
    swift_release(*v4);
  }

  else
  {
    __int128 v5 = *(_OWORD *)(*a1 + 136);
    *(_OWORD *)(v3 + 80) = *(_OWORD *)v4;
    *(_OWORD *)(v3 + 96) = v5;
    *(void *)(v3 + 112) = v4[4];
    sub_100063A4C();
    sub_100063354((void *)(v3 + 80));
  }

  sub_1000639C0((void *)v3);
}

void ByteBufferView.withContiguousStorageIfAvailable<A>(_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _OWORD v7[2] = a3;
  v7[3] = a1;
  void v7[4] = a2;
  ByteBufferView.withUnsafeBytes<A>(_:)((uint64_t)sub_10006337C, (uint64_t)v7, a3);
  if (!v4) {
    sub_10001762C(a4, 0LL, 1LL, a3);
  }
}

Swift::Int_optional_optional __swiftcall ByteBufferView._customIndexOfEquatableElement(_:)(Swift::UInt8 a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *((unsigned __int16 *)v1 + 10);
  uint64_t v5 = *((unsigned __int8 *)v1 + 22);
  Swift::Int v6 = sub_1000487CC(*v1 + 24, (uint64_t)v13);
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  BOOL v10 = __OFSUB__(v9, v8);
  uint64_t v11 = v9 - v8;
  if (v10)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }

  else if (v11)
  {
    uint64_t v12 = 0LL;
    while (*(unsigned __int8 *)(*(void *)(v3 + 24) + (v5 | (v4 << 8)) + v8 + v12) != a1)
    {
      if ((v11 & ~(v11 >> 63)) == v12)
      {
        __break(1u);
        goto LABEL_12;
      }

      if (v11 == ++v12) {
        goto LABEL_7;
      }
    }

    Swift::Int v6 = v12 + v8;
    if (__OFADD__(v12, v8)) {
      goto LABEL_13;
    }
    Swift::Bool v7 = 0;
  }

  else
  {
LABEL_7:
    Swift::Int v6 = 0LL;
    Swift::Bool v7 = 1;
  }

  result.value.value = v6;
  result.value.is_nil = v7;
  return result;
}

Swift::Int_optional_optional __swiftcall ByteBufferView._customLastIndexOfEquatableElement(_:)(Swift::UInt8 a1)
{
  Swift::Int v3 = sub_1000487CC(*v1 + 24LL, (uint64_t)v11);
  uint64_t v5 = v1[3];
  if (__OFSUB__(v1[4], v5))
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  Swift::UInt8 v10 = a1;
  __chkstk_darwin(v3);
  v9[2] = &v10;
  Swift::Int v3 = sub_1000633A8((uint64_t)sub_100063460, (uint64_t)v9, v6, v7);
  if ((v4 & 1) == 0)
  {
    BOOL v8 = __OFADD__(v3, v5);
    v3 += v5;
    if (v8) {
      goto LABEL_6;
    }
  }

  v4 &= 1u;
LABEL_7:
  result.value.value = v3;
  result.value.is_nil = v4;
  return result;
}

uint64_t sub_100061B34(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 24);
  uint64_t v4 = *(void *)(v2 + 32);
  if (v4 < a2 || v3 > a2 || v3 > result || v4 < result)
  {
    __break(1u);
    goto LABEL_14;
  }

  BOOL v8 = __OFSUB__(a2, result);
  Swift::Int_optional_optional result = a2 - result;
  if (v8) {
LABEL_14:
  }
    __break(1u);
  return result;
}

void sub_100061B60(uint64_t *a1@<X8>)
{
  *a1 = sub_100061B8C(v2);
  sub_100063990();
}

uint64_t sub_100061B8C(uint64_t a1)
{
  BOOL v2 = __OFSUB__(a1, 1LL);
  uint64_t result = a1 - 1;
  if (v2)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }

  if (result < *(void *)(v1 + 24) || result >= *(void *)(v1 + 32)) {
    goto LABEL_9;
  }
  return result;
}

uint64_t *sub_100061BB0(uint64_t *result)
{
  uint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1LL))
  {
    __break(1u);
  }

  else if (v2 < *(void *)(v1 + 32) && v2 >= *(void *)(v1 + 24))
  {
    *uint64_t result = v2;
    return result;
  }

  __break(1u);
  return result;
}

uint64_t sub_100061BDC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_100187938(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100061C20(uint64_t *a1, uint64_t *a2)
{
  return sub_100061B34(*a1, *a2);
}

void sub_100061C60(uint64_t *a1@<X8>)
{
  *a1 = ByteBufferView.startIndex.getter();
  sub_10001945C();
}

void sub_100061C80(uint64_t *a1@<X8>)
{
  *a1 = ByteBufferView.endIndex.getter();
  sub_10001945C();
}

uint64_t (*sub_100061CA0(_BYTE *a1, uint64_t *a2))(void)
{
  *a1 = ByteBufferView.subscript.getter(*a2);
  return debugOnly(_:);
}

double sub_100061CD4@<D0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  __int128 v6 = v2[1];
  __int128 v11 = *v2;
  __int128 v12 = v6;
  uint64_t v13 = *((void *)v2 + 4);
  ByteBufferView.subscript.getter(v5, v4, (uint64_t)v9);
  double result = *(double *)v9;
  __int128 v8 = v9[1];
  *(_OWORD *)a2 = v9[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 32) = v10;
  return result;
}

uint64_t sub_100061D30@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100061D70();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100061D70()
{
  uint64_t result = *(void *)(v0 + 24);
  if (*(void *)(v0 + 32) < result) {
    __break(1u);
  }
  return result;
}

BOOL sub_100061D84()
{
  return sub_100068030();
}

void sub_100061DB0()
{
}

void sub_100061DD0(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_100061DDC(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_100061DE8(unsigned __int8 *a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  *(void *)a3 = a2(*a1);
  *(_BYTE *)(a3 + _Block_object_dispose((const void *)(v1 - 136), 8) = v4;
  *(_BYTE *)(a3 + 9) = v5 & 1;
  sub_10001945C();
}

void sub_100061E18(uint64_t a1@<X8>)
{
  *(void *)a1 = sub_10018795C(v2, v3, v4);
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v5 & 1;
  sub_100063990();
}

void sub_100061E50()
{
}

void sub_100061E70()
{
}

uint64_t sub_100061E90(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < a2 || a3 < result) {
    __break(1u);
  }
  return result;
}

unint64_t sub_100061EA4(unint64_t result, unint64_t a2, unint64_t a3)
{
  if (!result)
  {
LABEL_7:
    if (!a3) {
      return result;
    }
LABEL_11:
    __break(1u);
    return result;
  }

  if (!a2)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (result < a2)
  {
    __break(1u);
    goto LABEL_10;
  }

  if (a3 && a3 < result)
  {
    __break(1u);
    goto LABEL_7;
  }

  return result;
}

uint64_t sub_100061ED8(uint64_t *a1, uint64_t *a2)
{
  return sub_1000681EC(*a1, a1[1], *a2, a2[1]);
}

void sub_100061F20(Swift::Int *a1@<X0>, Swift::Int *a2@<X8>)
{
  *a2 = Heap.index(after:)(*a1);
  sub_10001945C();
}

void *sub_100061F44(void *result)
{
  if (__OFADD__(*result, 1LL)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

__n128 sub_100061F5C@<Q0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 16);
  __int16 v3 = *(_WORD *)(v1 + 20);
  char v4 = *(_BYTE *)(v1 + 22);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = *(void *)(v1 + 8);
  *(_DWORD *)(a1 + 16) = v2;
  *(_WORD *)(a1 + 20) = v3;
  *(_BYTE *)(a1 + 22) = v4;
  __n128 result = *(__n128 *)(v1 + 24);
  *(__n128 *)(a1 + 24) = result;
  *(void *)(a1 + 40) = result.n128_u64[0];
  return result;
}

uint64_t sub_100061F94()
{
  return sub_10005BA0C();
}

void sub_100061FCC()
{
}

#error "100062018: call analysis failed (funcsize=8)"
void sub_100062024(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  ByteBufferView.withContiguousStorageIfAvailable<A>(_:)(a1, a2, a3, a4);
}

uint64_t sub_10006205C(char *a1, uint64_t *a2)
{
  return ByteBufferView.subscript.setter(*a1, *a2);
}

void (*sub_100062068(void *a1, uint64_t *a2))(uint64_t a1)
{
  char v5 = malloc(0x40uLL);
  *a1 = v5;
  uint64_t v6 = *a2;
  v5[5] = v2;
  v5[6] = v6;
  __int128 v7 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)char v5 = *(_OWORD *)v2;
  *((_OWORD *)v5 + Hasher._combine(_:)(v1 & 1) = v7;
  void v5[4] = *(void *)(v2 + 32);
  *((_BYTE *)v5 + 56) = ByteBufferView.subscript.getter(v6);
  return sub_1000620D0;
}

void sub_1000620D0(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  ByteBufferView.subscript.setter(*(_BYTE *)(*(void *)a1 + 56LL), *(void *)(*(void *)a1 + 48LL));
  free(v1);
}

void *sub_1000620FC(uint64_t a1, uint64_t *a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v2;
  uint64_t v5 = *(void *)(a1 + 32);
  return ByteBufferView.subscript.setter((uint64_t *)v4, *a2, a2[1]);
}

void (*sub_100062134(void *a1, unint64_t *a2))(uint64_t *a1, char a2)
{
  uint64_t v5 = malloc(0xB8uLL);
  *a1 = v5;
  unint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  v5[20] = v2;
  v5[21] = v6;
  v5[22] = v7;
  __int128 v8 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)v2;
  *((_OWORD *)v5 + Hasher._combine(_:)(v1 & 1) = v8;
  void v5[4] = *(void *)(v2 + 32);
  ByteBufferView.subscript.getter(v6, v7, (uint64_t)(v5 + 15));
  return sub_1000621A4;
}

void sub_1000621A4(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = (void *)(*a1 + 120);
  if ((a2 & 1) != 0)
  {
    sub_1000639D0();
    sub_100063AA8(v2);
    swift_release(*v4);
  }

  else
  {
    __int128 v5 = *(_OWORD *)(*a1 + 136);
    *(_OWORD *)(v3 + 80) = *(_OWORD *)v4;
    *(_OWORD *)(v3 + 96) = v5;
    *(void *)(v3 + 112) = v4[4];
    sub_100063AA8((uint64_t *)(v3 + 80));
  }

  sub_1000639C0((void *)v3);
}

void sub_100062208(uint64_t (*a1)(char *)@<X0>, void *a2@<X8>)
{
  if (!v2) {
    *a2 = v4;
  }
}

void sub_100062230(uint64_t (*a1)(char *))
{
  uint64_t v4 = v1[3];
  uint64_t v3 = v1[4];
  if (v4 < v3)
  {
    uint64_t v5 = v1[4];
    uint64_t v22 = v1[3];
    uint64_t v23 = v5;
    uint64_t v20 = v1;
    while (1)
    {
      if (v4 >= v3)
      {
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        return;
      }

      uint64_t v6 = *((unsigned int *)v1 + 2);
      unint64_t v7 = v4 - v6;
      if (__OFSUB__(v4, v6)) {
        goto LABEL_37;
      }
      if ((v7 & 0x8000000000000000LL) != 0) {
        goto LABEL_38;
      }
      unsigned int v8 = *((_DWORD *)v1 + 3);
      unint64_t v9 = v8 - v6;
      uint64_t v10 = *v1;
      uint64_t v21 = *((unsigned __int16 *)v1 + 10);
      uint64_t v11 = *((unsigned __int8 *)v1 + 22);
      __int128 v12 = (void *)(v10 + 24);
      swift_beginAccess(v10 + 24, v25, 0LL, 0LL);
      uint64_t v13 = *(void *)(v10 + 24);
      uint64_t v14 = v11 | (v21 << 8);
      char v26 = *(_BYTE *)(v13 + v14 + v4);
      char v15 = a1(&v26);
      if (v2) {
        return;
      }
      if ((v15 & 1) != 0) {
        break;
      }
      uint64_t v1 = v20;
LABEL_29:
      uint64_t v3 = v23;
      if (++v4 >= v5) {
        return;
      }
    }

    if (v5 <= v22 || v5 > v23) {
      goto LABEL_41;
    }
    --v5;
    while (v4 < v5)
    {
      unint64_t v17 = v5 - v6;
      if (__OFSUB__(v5, v6))
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      if (v17 >= v9) {
        goto LABEL_32;
      }
      if (v17 == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_33;
      }
      char v26 = *(_BYTE *)(*v12 + v14 + v5);
      if ((a1(&v26) & 1) == 0)
      {
        uint64_t v1 = v20;
        sub_1000471C4();
        goto LABEL_29;
      }

      if (__OFSUB__(v5--, 1LL)) {
        goto LABEL_34;
      }
      if (v5 < v22 || v5 >= v23) {
        goto LABEL_35;
      }
    }
  }

void sub_100062418()
{
}

uint64_t sub_100062424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:)(a1, a2, a4, a3);
}

uint64_t sub_100062444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:)(a1, a2, a4, a3);
}

uint64_t ByteBufferView.init()@<X0>(uint64_t a1@<X8>)
{
  if (qword_1002A8CC8 != -1) {
    uint64_t result = swift_once(&qword_1002A8CC8, sub_10005B580);
  }
  uint64_t v2 = qword_1002EB928;
  uint64_t v3 = HIDWORD(qword_1002EB928);
  if (HIDWORD(qword_1002EB928) < qword_1002EB928)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  int v4 = dword_1002EB930;
  __int16 v5 = word_1002EB934;
  char v6 = byte_1002EB936;
  unsigned int v7 = byte_1002EB936 | ((unsigned __int16)word_1002EB934 << 8);
  BOOL v8 = dword_1002EB930 >= v7;
  unsigned int v9 = dword_1002EB930 - v7;
  if (!v8) {
    goto LABEL_9;
  }
  if (v9 >= HIDWORD(qword_1002EB928))
  {
    *(void *)a1 = static ByteBufferAllocator.zeroCapacityWithDefaultAllocator;
    *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v2;
    *(_DWORD *)(a1 + 12) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    *(_WORD *)(a1 + 20) = v5;
    *(_BYTE *)(a1 + 22) = v6;
    *(void *)(a1 + 24) = v2;
    *(void *)(a1 + 32) = v3;
    return swift_retain();
  }

uint64_t sub_100062504(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v3 = a2 - a3;
  if (__OFSUB__(a2, a3))
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v4 = -result;
  if (v3 <= 0 && v3 > v4) {
    return a2;
  }
  uint64_t v6 = a3 - result;
  if (__OFADD__(a3, v4)) {
    goto LABEL_17;
  }
  if (v6 >= a2 && v6 <= a3) {
    return a2;
  }
LABEL_18:
  __break(1u);
  return result;
}

double sub_100062554@<D0>(uint64_t a1@<X8>)
{
  double result = *(double *)v4;
  __int128 v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = v5;
  return result;
}

uint64_t sub_100062594(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(a3 - 8) + 8LL))(a2, a3);
}

void sub_1000625E4(char *a1@<X0>, uint64_t a2@<X1>, Swift::Int a3@<X8>)
{
}

void sub_1000625EC(char a1@<W0>, uint64_t a2@<X1>, Swift::Int a3@<X8>)
{
  if (qword_1002A8CC8 != -1) {
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v5 = static ByteBufferAllocator.zeroCapacityWithDefaultAllocator;
    ByteBufferView.init(_:)( static ByteBufferAllocator.zeroCapacityWithDefaultAllocator,  qword_1002EB928,  dword_1002EB930 | ((unint64_t)(unsigned __int16)word_1002EB934 << 32) | ((unint64_t)byte_1002EB936 << 48),  (uint64_t)&v20);
    Swift::Int v6 = v22;
    Swift::Int v7 = v23;
    unsigned int v9 = HIDWORD(v20);
    int v8 = v21;
    __int16 v10 = WORD2(v21);
    char v11 = BYTE6(v21);
    __int128 v18 = v20;
    uint64_t v19 = v21;
    if (!a2) {
      break;
    }
    if (a2 < 0)
    {
      __break(1u);
LABEL_27:
      swift_unexpectedError(v5, "ASOctaneSupportXPCService/ByteBuffer-views.swift", 48LL, 1LL, 144LL);
      __break(1u);
      return;
    }

    Swift::Int v16 = a3;
    swift_retain();
    Swift::Int v12 = v7;
    while (v7 >= v6)
    {
      if (v12 == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_19;
      }
      if (__OFSUB__(v9, v12)) {
        goto LABEL_20;
      }
      a3 = v12 + 1;
      ByteBuffer.copyBytes(at:to:length:)(v12, v12 + 1, v9 - v12);
      if (v5) {
        goto LABEL_27;
      }
      sub_10005C89C(a1, v12);
      unsigned int v9 = HIDWORD(v18) + 1;
      if (HIDWORD(v18) == -1) {
        goto LABEL_21;
      }
      int v8 = v19;
      __int16 v10 = WORD2(v19);
      char v11 = BYTE6(v19);
      unsigned int v13 = BYTE6(v19) | (WORD2(v19) << 8);
      BOOL v14 = v19 >= v13;
      unsigned int v15 = v19 - v13;
      if (!v14) {
        goto LABEL_22;
      }
      if (v15 < v9) {
        goto LABEL_23;
      }
      ++HIDWORD(v18);
      if (a3 < v6) {
        goto LABEL_24;
      }
      ++v12;
      if (!--a2)
      {
        Swift::Int v7 = a3;
        a3 = v16;
        goto LABEL_17;
      }
    }

    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    swift_once(&qword_1002A8CC8, sub_10005B580);
  }

  swift_retain();
LABEL_17:
  *(void *)a3 = v18;
  *(_DWORD *)(a3 + _Block_object_dispose((const void *)(v1 - 136), 8) = DWORD2(v18);
  *(_DWORD *)(a3 + 12) = v9;
  *(_DWORD *)(a3 + 16) = v8;
  *(_WORD *)(a3 + 20) = v10;
  *(_BYTE *)(a3 + 22) = v11;
  *(void *)(a3 + 24) = v6;
  *(void *)(a3 + 32) = v7;
}

uint64_t sub_1000627D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return RangeReplaceableCollection.init<A>(_:)(a1, a4, a2, a5, a3);
}

void sub_1000627E8(char *a1)
{
}

void sub_1000627F0(char a1)
{
}

uint64_t sub_100062800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return RangeReplaceableCollection.append<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

void sub_100062818(char *a1, uint64_t *a2)
{
}

void sub_100062824(char a1, uint64_t a2)
{
}

uint64_t sub_100062830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return RangeReplaceableCollection.insert<A>(contentsOf:at:)(a1, a2, a5, a3, a6, a4);
}

uint64_t sub_100062848@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100062870(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100062870(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  if (v2 == v3)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  Swift::Int v4 = result;
  if (v2 > result || v3 <= result) {
    goto LABEL_9;
  }
  uint64_t result = sub_100060EBC( result,  0LL,  *(void *)v1,  *(void *)(v1 + 8),  *(unsigned int *)(v1 + 16) | ((unint64_t)*(unsigned __int8 *)(v1 + 22) << 48) | ((unint64_t)*(unsigned __int16 *)(v1 + 20) << 32));
  if ((result & 0x100) == 0)
  {
    uint64_t v6 = result;
    sub_100061114(v4, v4 + 1);
    return v6;
  }

uint64_t sub_1000628F4(Swift::Int *a1)
{
  return sub_100062900(*a1, a1[1]);
}

uint64_t sub_100062904@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_100062930();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_100062930()
{
  uint64_t v1 = v0;
  __int128 v2 = v0[1];
  __int128 v10 = *v0;
  __int128 v11 = v2;
  uint64_t v12 = *((void *)v0 + 4);
  uint64_t result = sub_1000B7818();
  if ((result & 0x100) == 0)
  {
    uint64_t v4 = v12 - 1;
    if (__OFSUB__(v12, 1LL))
    {
      __break(1u);
    }

    else if (v4 >= *((uint64_t *)&v11 + 1) && v12 - 1 < v12)
    {
      unsigned __int8 v6 = result;
      ByteBufferView.init(buffer:range:)( v10,  *((uint64_t *)&v10 + 1),  v11 | ((unint64_t)WORD2(v11) << 32) | ((unint64_t)BYTE6(v11) << 48),  *((uint64_t *)&v11 + 1),  v4,  (uint64_t)v8);
      __int128 v7 = v8[1];
      *uint64_t v1 = v8[0];
      v1[1] = v7;
      *((void *)v1 + 4) = v9;
      return v6;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_1000629D8(uint64_t result)
{
  if (__OFSUB__(0LL, result))
  {
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v2 = v1[3];
  uint64_t v3 = *v1;
  int v4 = *((_DWORD *)v1 + 2);
  int v5 = *((_DWORD *)v1 + 3);
  unsigned int v6 = *((_DWORD *)v1 + 4);
  int v7 = *((unsigned __int16 *)v1 + 10);
  int v8 = *((unsigned __int8 *)v1 + 22);
  uint64_t result = sub_10018795C(v1[4], -result, v2);
  if ((v9 & 1) == 0)
  {
    if (result >= v2)
    {
      if ((v2 & 0x8000000000000000LL) == 0)
      {
        unsigned int v10 = v8 | (v7 << 8);
        BOOL v11 = v6 >= v10;
        unsigned int v12 = v6 - v10;
        if (v11)
        {
          if (result <= v12)
          {
            *uint64_t v1 = v3;
            *((_DWORD *)v1 + 2) = v4;
            *((_DWORD *)v1 + sub_100019F7C(v0 + 3) = v5;
            *((_DWORD *)v1 + 4) = v6;
            *((_WORD *)v1 + 10) = v7;
            *((_BYTE *)v1 + 22) = v8;
            v1[3] = v2;
            v1[4] = result;
            return 1LL;
          }

          goto LABEL_13;
        }

void sub_100062AB8(_BYTE *a1@<X8>)
{
  *a1 = v2;
}

void sub_100062ADC()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  if (v2 == v1)
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v3 = *v0;
  int v4 = *((_DWORD *)v0 + 2);
  int v5 = *((_DWORD *)v0 + 3);
  unsigned int v6 = *((_DWORD *)v0 + 4);
  int v7 = *((unsigned __int16 *)v0 + 10);
  int v8 = *((unsigned __int8 *)v0 + 22);
  sub_1000831B8();
  if ((v9 & 0x100) == 0)
  {
    uint64_t v10 = v2 + 1;
    if (!__OFADD__(v2, 1LL))
    {
      if (v1 >= v10)
      {
        if ((v10 & 0x8000000000000000LL) == 0)
        {
          unsigned int v11 = v8 | (v7 << 8);
          BOOL v12 = v6 >= v11;
          unsigned int v13 = v6 - v11;
          if (v12)
          {
            if (v1 <= v13)
            {
              *uint64_t v0 = v3;
              *((_DWORD *)v0 + 2) = v4;
              *((_DWORD *)v0 + sub_100019F7C(v0 + 3) = v5;
              *((_DWORD *)v0 + 4) = v6;
              *((_WORD *)v0 + 10) = v7;
              *((_BYTE *)v0 + 22) = v8;
              v0[3] = v10;
              v0[4] = v1;
              return;
            }

            goto LABEL_15;
          }

uint64_t sub_100062BC4(uint64_t result)
{
  if (!result) {
    return result;
  }
  if (result < 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v2 = v1[4];
  uint64_t v3 = *v1;
  int v4 = *((_DWORD *)v1 + 2);
  int v5 = *((_DWORD *)v1 + 3);
  unsigned int v6 = *((_DWORD *)v1 + 4);
  int v7 = *((unsigned __int16 *)v1 + 10);
  int v8 = *((unsigned __int8 *)v1 + 22);
  uint64_t result = sub_10018795C(v1[3], result, v2);
  if ((v9 & 1) != 0)
  {
LABEL_16:
    __break(1u);
    return result;
  }

  if (v2 < result) {
    goto LABEL_12;
  }
  if (result < 0)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  unsigned int v10 = v8 | (v7 << 8);
  BOOL v11 = v6 >= v10;
  unsigned int v12 = v6 - v10;
  if (!v11) {
    goto LABEL_14;
  }
  if (v2 > v12)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  *uint64_t v1 = v3;
  *((_DWORD *)v1 + 2) = v4;
  *((_DWORD *)v1 + sub_100019F7C(v0 + 3) = v5;
  *((_DWORD *)v1 + 4) = v6;
  *((_WORD *)v1 + 10) = v7;
  *((_BYTE *)v1 + 22) = v8;
  v1[3] = result;
  v1[4] = v2;
  return result;
}

void sub_100062CA8(char a1)
{
  if ((a1 & 1) != 0)
  {
    Swift::Int v2 = *(void *)(v1 + 24);
    Swift::Int v3 = *(void *)(v1 + 32);
    if (v3 >= v2)
    {
      sub_100061114(v2, v3);
      return;
    }

    __break(1u);
    goto LABEL_7;
  }

  swift_release(*(void *)v1);
  if (qword_1002A8CC8 != -1) {
LABEL_7:
  }
    swift_once(&qword_1002A8CC8, sub_10005B580);
  ByteBufferView.init(_:)( static ByteBufferAllocator.zeroCapacityWithDefaultAllocator,  qword_1002EB928,  dword_1002EB930 | ((unint64_t)(unsigned __int16)word_1002EB934 << 32) | ((unint64_t)byte_1002EB936 << 48),  (uint64_t)v5);
  __int128 v4 = v5[1];
  *(_OWORD *)uint64_t v1 = v5[0];
  *(_OWORD *)(v1 + 16) = v4;
  *(void *)(v1 + 32) = v6;
  swift_retain();
}

void sub_100062D60(uint64_t (*a1)(void))
{
}

uint64_t ByteBuffer.readableBytesView.getter@<X0>( uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (HIDWORD(a2) < a2)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  unsigned int v4 = BYTE6(a3) | (WORD2(a3) << 8);
  BOOL v5 = a3 >= v4;
  unsigned int v6 = a3 - v4;
  if (!v5) {
    goto LABEL_7;
  }
  if (HIDWORD(a2) <= v6)
  {
    sub_100063A84(result, a2, a3, a4);
    return swift_retain();
  }

void ByteBuffer.viewBytes(at:length:)( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X3>, void *a4@<X8>)
{
  if (a2 < 0)
  {
    sub_100063A5C();
    goto LABEL_12;
  }

  sub_100063A5C();
  if (v16 > v15)
  {
LABEL_12:
    *a4 = v12;
    a4[1] = v13;
    a4[2] = v5;
    a4[3] = v14;
    a4[4] = v4;
    return;
  }

  if ((uint64_t)(HIDWORD(a3) - v9) < a1)
  {
    uint64_t v12 = 0LL;
    unint64_t v13 = 0LL;
    uint64_t v5 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v4 = 0LL;
    goto LABEL_12;
  }

  uint64_t v4 = a1 + v9;
  if (__OFADD__(a1, v9))
  {
    __break(1u);
    goto LABEL_14;
  }

  if (v4 < a1)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  unsigned int v17 = (v11 >> 24) & 0xFFFF00 | BYTE6(v11);
  BOOL v18 = v11 >= v17;
  unsigned int v19 = v11 - v17;
  if (!v18) {
    goto LABEL_15;
  }
  if (v4 <= v19)
  {
    uint64_t v20 = v10;
    uint64_t v5 = v11 & 0xFFFFFFFFFFFFFFLL;
    swift_retain();
    uint64_t v12 = v20;
    unint64_t v13 = a3;
    uint64_t v14 = a1;
    goto LABEL_12;
  }

uint64_t ByteBuffer.init(_:)(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3 < result)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (__OFSUB__(v3, result))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  uint64_t result = ByteBuffer.getSlice(at:length:)( result,  v3 - result,  *(void *)a1,  *(void *)(a1 + 8),  *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int16 *)(a1 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 22) << 48));
  if (result)
  {
    uint64_t v4 = result;
    sub_100063354((void *)a1);
    return v4;
  }

LABEL_7:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    __break(1u);
  }

  return a1;
}

    __break(1u);
LABEL_8:
    __break(1u);
  }

  __break(1u);
}

  __break(1u);
}

    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  if (v4 < 0xFFFFFFFF)
  {
    swift_release(a1[1]);
    goto LABEL_7;
  }

  uint64_t v5 = a2[1];
  unsigned int v6 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain(v5);
  swift_release(v6);
  return a1;
}

    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  if (v4 < 0xFFFFFFFF)
  {
    swift_release(a1[1]);
    goto LABEL_7;
  }

  uint64_t v5 = a2[1];
  unsigned int v6 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  swift_release(v6);
  return a1;
}

  sub_100035324((uint64_t)v8);
  sub_10002A3D4();
}

    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }

  if (!v4)
  {
    swift_release(a1[1]);
    goto LABEL_7;
  }

  uint64_t v5 = a2[1];
  unsigned int v6 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain(v5);
  swift_release(v6);
LABEL_8:
  int v8 = a1[2];
  uint64_t v9 = a2[2];
  a1[2] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  return a1;
}

    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }

  if (!v4)
  {
    swift_release(a1[1]);
    goto LABEL_7;
  }

  uint64_t v5 = a2[1];
  unsigned int v6 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  swift_release(v6);
LABEL_8:
  int v8 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v8);
  return a1;
}

  __break(1u);
  return result;
}

  uint64_t v14 = a4(v10, v11, a3);
  swift_bridgeObjectRelease(v9);
  return v14;
}

  swift_bridgeObjectRetain();
  sub_100019F7C(a1);
  __break(1u);
}

    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }

  *a1 = *a2;
  unsigned int v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

    int v8 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v8;
    return a1;
  }

  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[2]);
    goto LABEL_7;
  }

  *a1 = *a2;
  a1[1] = a2[1];
  unsigned int v6 = a2[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

  __break(1u);
}

  __break(1u);
}

    uint64_t v12 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v12;
    return a1;
  }

  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[1]);
    swift_bridgeObjectRelease(a1[2]);
    goto LABEL_7;
  }

  *a1 = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  unsigned int v6 = a2[1];
  int v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  int v8 = a2[2];
  uint64_t v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

  uint64_t v20 = 0x3635325345LL;
LABEL_8:
  sub_1001C27A0((uint64_t)v19, v20, 0xE500000000000000LL, a4, v26);
  memcpy(v9, v26, 0x48uLL);
  sub_1001C4558(a1, (uint64_t)&v9[v16[9]], a8);
  uint64_t v21 = &v9[v16[10]];
  Swift::Int v22 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 32LL))(v21, a2, v22);
  Swift::Int v23 = &v9[v16[11]];
  *(void *)Swift::Int v23 = a5;
  char v23[8] = a6 & 1;
  sub_1001C47D0((uint64_t)v9, a9);
  sub_10001762C(a9, 0LL, 1LL, (uint64_t)v16);
  sub_10002A580();
}

  unsigned int v17 = a6(v13, v14, a5);
  sub_100023EEC();
  return v17;
}

uint64_t static ByteBufferView.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = v4 - result;
  if (__OFSUB__(v4, result))
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  BOOL v8 = __OFSUB__(v6, v7);
  uint64_t v9 = v6 - v7;
  if (v8)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if (v5 != v9) {
    return 0LL;
  }
  sub_100063A70();
  uint64_t result = ByteBuffer.getSlice(at:length:)(v12, v5, v13, v14, v11 | (v10 << 48));
  if (result)
  {
    uint64_t v17 = result;
    uint64_t v18 = v15;
    uint64_t v19 = v16;
    sub_100063A20();
    uint64_t result = ByteBuffer.getSlice(at:length:)(v7, v5, v20, v21, v22);
    if (result)
    {
      uint64_t v25 = result;
      char v26 = static ByteBuffer.== infix(_:_:)(v17, v18, v19 & 0xFFFFFFFFFFFFFFLL, result, v23, v24 & 0xFFFFFFFFFFFFFFLL);
      swift_release(v17);
      swift_release(v25);
      return v26 & 1;
    }

    goto LABEL_11;
  }

uint64_t ByteBufferView.hash(into:)()
{
  uint64_t result = *(void *)(v0 + 24);
  if (__OFSUB__(*(void *)(v0 + 32), result))
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  sub_100063A04();
  uint64_t result = ByteBuffer.getSlice(at:length:)(v2, v3, v4, v5, v6);
  if (result)
  {
    uint64_t v9 = result;
    unsigned int v10 = v7;
    unint64_t v11 = v8;
    unint64_t v12 = HIDWORD(v7);
    uint64_t result = sub_1000487CC(result + 24, (uint64_t)v14);
    if (v12 >= v10)
    {
      uint64_t v13 = *(void *)(v9 + 24) + ((v11 >> 24) & 0xFFFF00 | BYTE6(v11)) + v10;
      Hasher.combine(bytes:)(v13, v13 + v12 - v10);
      return swift_release(v9);
    }

    goto LABEL_6;
  }

Swift::Int ByteBufferView.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000630F0()
{
  return Hasher._finalize()();
}

uint64_t ByteBufferView.init(arrayLiteral:)@<X0>(Swift::Int a1@<X0>, char *a2@<X8>)
{
  if (qword_1002A8CC8 != -1) {
LABEL_24:
  }
    swift_once(&qword_1002A8CC8, sub_10005B580);
  uint64_t v4 = static ByteBufferAllocator.zeroCapacityWithDefaultAllocator;
  sub_100063A70();
  ByteBufferView.init(_:)(v4, v7, v6 | (v5 << 48), (uint64_t)&v32);
  unsigned int v9 = HIDWORD(v32);
  int v8 = v33;
  __int16 v10 = WORD2(v33);
  char v11 = BYTE6(v33);
  Swift::Int v13 = v34;
  Swift::Int v12 = v35;
  __int128 v30 = v32;
  uint64_t v31 = v33;
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14)
  {
    uint64_t v28 = a2;
    a2 = (char *)(a1 + 32);
    swift_retain();
    Swift::Int v29 = v12;
    while (1)
    {
      if (v29 < v13)
      {
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }

      if (v12 == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_18;
      }
      Swift::Int v15 = v9 - v12;
      if (__OFSUB__(v9, v12)) {
        goto LABEL_19;
      }
      char v17 = *a2++;
      char v16 = v17;
      a1 = v12 + 1;
      ByteBuffer.copyBytes(at:to:length:)(v12, v12 + 1, v15);
      if (v18) {
        break;
      }
      sub_10005C89C(v16, v12);
      unsigned int v9 = HIDWORD(v30) + 1;
      if (HIDWORD(v30) == -1) {
        goto LABEL_20;
      }
      int v8 = v31;
      __int16 v10 = WORD2(v31);
      char v11 = BYTE6(v31);
      unsigned int v19 = BYTE6(v31) | (WORD2(v31) << 8);
      BOOL v20 = v31 >= v19;
      unsigned int v21 = v31 - v19;
      if (!v20) {
        goto LABEL_21;
      }
      if (v21 < v9) {
        goto LABEL_22;
      }
      ++HIDWORD(v30);
      if (a1 < v13) {
        goto LABEL_23;
      }
      ++v12;
      if (!--v14)
      {
        Swift::Int v12 = a1;
        a2 = v28;
        goto LABEL_16;
      }
    }

    uint64_t v23 = sub_100063AB4();
    uint64_t result = swift_unexpectedError(v23, v24, v25, v26, v27);
    __break(1u);
  }

  else
  {
    swift_retain();
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a2 = v30;
    *((_DWORD *)a2 + 2) = DWORD2(v30);
    *((_DWORD *)a2 + sub_100019F7C(v0 + 3) = v9;
    *((_DWORD *)a2 + 4) = v8;
    *((_WORD *)a2 + 10) = v10;
    a2[22] = v11;
    *((void *)a2 + sub_100019F7C(v0 + 3) = v13;
    *((void *)a2 + 4) = v12;
  }

  return result;
}