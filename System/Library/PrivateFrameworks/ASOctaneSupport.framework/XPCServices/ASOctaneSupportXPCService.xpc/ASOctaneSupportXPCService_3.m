void static _IntegerBitPacking.unpackUU<A, B, C>(_:leftType:rightType:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  v49 = a3;
  v51 = a1;
  v52 = a2;
  v47 = a13;
  sub_100043FD8();
  __chkstk_darwin(v17);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100043FD8();
  __chkstk_darwin(v20);
  sub_1000C05A0();
  v50 = *(void *)(v21 - 8);
  sub_100043FD8();
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v26 = __chkstk_darwin(v23);
  v48 = (char *)&v44 - v27;
  v28 = __chkstk_darwin(v26);
  v54 = (char *)&v44 - v29;
  v30 = __chkstk_darwin(v28);
  v53 = (uint64_t)&v44 - v31;
  __chkstk_darwin(v30);
  v44 = (uint64_t)&v44 - v32;
  dispatch thunk of static FixedWidthInteger.max.getter(v33, a11);
  v34 = *(void *)(a9 + 8);
  v46 = *(void *)(a11 + 8);
  sub_100141C54(v13, a7, v46);
  v35 = v47;
  dispatch thunk of static FixedWidthInteger.max.getter(a8, v47);
  v45 = *(void *)(v35 + 8);
  v36 = v53;
  sub_100141C54((uint64_t)v19, a8, v45);
  v37 = v49;
  sub_100141C7C(v49, v36);
  v55 = dispatch thunk of static FixedWidthInteger.bitWidth.getter(a8, v35);
  v38 = sub_1000C88C8();
  dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)(v37, &v55, &type metadata for Int, v38, a6, v34);
  v39 = (uint64_t)v48;
  v40 = v44;
  sub_100141C7C((uint64_t)v25, v44);
  v41 = v50;
  sub_100141C4C((uint64_t)v25);
  v42 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 16);
  v42(v25, v39, a6);
  dispatch thunk of BinaryInteger.init<A>(_:)(v25, a6, v34, a7, v46);
  v43 = (uint64_t)v54;
  v42(v25, (uint64_t)v54, a6);
  dispatch thunk of BinaryInteger.init<A>(_:)(v25, a6, v34, a8, v45);
  sub_100141C4C(v39);
  sub_100141C4C(v43);
  sub_100141C4C(v53);
  sub_100141C4C(v40);
  sub_10002A580();
}

unint64_t static IntegerBitPacking.packUInt32UInt16UInt8(_:_:_:)( unsigned int a1, unsigned __int16 a2, unsigned __int8 a3)
{
  return ((unint64_t)a2 << 32) | ((unint64_t)a3 << 48) | a1;
}

uint64_t static IntegerBitPacking.unpackUInt32UInt16UInt8(_:)(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFFFLL;
}

uint64_t static IntegerBitPacking.packUInt8UInt8(_:_:)(int a1, unsigned __int8 a2)
{
  return a2 | (a1 << 8);
}

uint64_t static IntegerBitPacking.unpackUInt8UInt8(_:)(unsigned int a1)
{
  return bswap32(a1) >> 16;
}

uint64_t static IntegerBitPacking.packUInt16UInt8(_:_:)(unsigned __int16 a1, unsigned __int8 a2)
{
  return a2 | (a1 << 8);
}

ASOctaneSupportXPCService::_UInt24 __swiftcall _UInt24.init(_:)(Swift::UInt32 a1)
{
  Swift::UInt16 v1 = a1 >> 8;
  result._backing._0 = v1;
  return result;
}

unint64_t static IntegerBitPacking.packUInt32CInt(_:_:)(uint64_t a1, unsigned int a2)
{
  return a2 | (unint64_t)(a1 << 32);
}

uint64_t static IntegerBitPacking.unpackUInt32CInt(_:)(uint64_t a1)
{
  return __ROR8__(a1, 32);
}

ValueMetadata *type metadata accessor for _IntegerBitPacking()
{
  return &type metadata for _IntegerBitPacking;
}

ValueMetadata *type metadata accessor for IntegerBitPacking()
{
  return &type metadata for IntegerBitPacking;
}

uint64_t sub_100141C4C(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_100141C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of BinaryInteger.init<A>(_:)(a1, a2, a3, v3, v4);
}

uint64_t sub_100141C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of BinaryInteger.init<A>(_:)(a1, a2, a3, v3, v4);
}

uint64_t sub_100141C74(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_100141C7C(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of static BinaryInteger.& infix(_:_:)(a1, a2, v2, v3);
}

void Array<A>.init(buffer:)(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = a2;
  BOOL v3 = HIDWORD(a2) >= a2;
  Swift::Int v4 = (HIDWORD(a2) - a2);
  if (v3)
  {
    if ((unint64_t)ByteBuffer.getBytes(at:length:)(v2, v4))
    {
      swift_release();
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t String.init(buffer:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  unsigned int v3 = a2;
  uint64_t v4 = (HIDWORD(a2) - a2);
  if (HIDWORD(a2) < a2)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = result;
    swift_beginAccess(result + 24, v8, 0LL, 0LL);
    uint64_t v7 = static String._fromUTF8Repairing(_:)(*(void *)(v6 + 24) + ((a3 >> 24) & 0xFFFF00 | BYTE6(a3)) + v3, v4);
    swift_release(v6);
    return v7;
  }

  return result;
}

uint64_t DispatchData.init(buffer:)@<X0>(unint64_t a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int v2 = a1;
  unint64_t v4 = HIDWORD(a1);
  uint64_t v5 = sub_1000175B0(&qword_1002AD748);
  uint64_t v6 = __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  v11 = (char *)&v17 - v10;
  uint64_t result = __chkstk_darwin(v9);
  v14 = (char *)&v17 - v13;
  if (v4 < v2)
  {
    __break(1u);
  }

  else
  {
    ByteBuffer.getDispatchData(at:length:)();
    sub_100079C94((uint64_t)v11, (uint64_t)v8);
    uint64_t v15 = type metadata accessor for DispatchData(0LL);
    uint64_t v16 = 1LL;
    if (sub_10001D158((uint64_t)v8, 1LL, v15) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32LL))(v14, v8, v15);
      uint64_t v16 = 0LL;
    }

    sub_10001762C((uint64_t)v14, v16, 1LL, v15);
    sub_100079CDC((uint64_t)v11);
    uint64_t result = sub_10001D158((uint64_t)v14, 1LL, v15);
    if ((_DWORD)result != 1)
    {
      swift_release();
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v15 - 8) + 32LL))(a2, v14, v15);
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_100141EF4(unsigned __int8 a1)
{
  uint64_t v3 = type metadata accessor for PurchaseConfiguration(0LL);
  uint64_t v4 = 0LL;
  int v5 = *(unsigned __int8 *)(v1 + *(int *)(v3 + 44));
  if (v5 != 3)
  {
    uint64_t v6 = (uint64_t *)(v1 + *(int *)(v3 + 40));
    if (v6[1]) {
      BOOL v7 = v5 == a1;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      uint64_t v4 = *v6;
      swift_bridgeObjectRetain();
    }

    else
    {
      return 0LL;
    }
  }

  return v4;
}

uint64_t type metadata accessor for PurchaseConfiguration(uint64_t a1)
{
  uint64_t result = qword_1002B5748;
  if (!qword_1002B5748) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PurchaseConfiguration);
  }
  return result;
}

void *sub_100141FAC(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID(0LL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (sub_10001D158((uint64_t)v11, 1LL, v12))
    {
      uint64_t v13 = sub_1000175B0(&qword_1002AC060);
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
      sub_10001762C((uint64_t)v10, 0LL, 1LL, v12);
    }

    uint64_t v15 = a3[7];
    uint64_t v16 = a3[8];
    uint64_t v17 = (char *)v4 + v15;
    v18 = (char *)a2 + v15;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
    v19 = (char *)v4 + v16;
    v20 = (char *)a2 + v16;
    uint64_t v21 = type metadata accessor for Date(0LL);
    if (sub_10001D158((uint64_t)v20, 1LL, v21))
    {
      uint64_t v22 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
      memcpy(v19, v20, *(void *)(*(void *)(v22 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16LL))(v19, v20, v21);
      sub_10001762C((uint64_t)v19, 0LL, 1LL, v21);
    }

    uint64_t v23 = a3[10];
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    v24 = (void *)((char *)v4 + v23);
    v25 = (void *)((char *)a2 + v23);
    uint64_t v26 = v25[1];
    void *v24 = *v25;
    v24[1] = v26;
    uint64_t v27 = a3[12];
    *((_BYTE *)v4 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *((_BYTE *)v4 + v27) = *((_BYTE *)a2 + v27);
    swift_bridgeObjectRetain();
  }

  return v4;
}

uint64_t sub_10014217C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = a1 + *(int *)(a2 + 32);
  uint64_t v7 = type metadata accessor for Date(0LL);
  return swift_bridgeObjectRelease();
}

void *sub_100142238(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (sub_10001D158((uint64_t)v10, 1LL, v11))
  {
    uint64_t v12 = sub_1000175B0(&qword_1002AC060);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
    sub_10001762C((uint64_t)v9, 0LL, 1LL, v11);
  }

  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = (char *)a1 + v13;
  uint64_t v16 = (char *)a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = (char *)a1 + v14;
  v18 = (char *)a2 + v14;
  uint64_t v19 = type metadata accessor for Date(0LL);
  if (sub_10001D158((uint64_t)v18, 1LL, v19))
  {
    uint64_t v20 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v17, v18, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16LL))(v17, v18, v19);
    sub_10001762C((uint64_t)v17, 0LL, 1LL, v19);
  }

  uint64_t v21 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  uint64_t v22 = (void *)((char *)a1 + v21);
  uint64_t v23 = (void *)((char *)a2 + v21);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = a3[12];
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *((_BYTE *)a1 + v25) = *((_BYTE *)a2 + v25);
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1001423DC(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  int v10 = sub_10001D158((uint64_t)v7, 1LL, v9);
  int v11 = sub_10001D158((uint64_t)v8, 1LL, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
      sub_10001762C((uint64_t)v7, 0LL, 1LL, v9);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = sub_1000175B0(&qword_1002AC060);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v14 = a3[7];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = *(void *)v16;
  v15[8] = v16[8];
  *(void *)uint64_t v15 = v17;
  uint64_t v18 = a3[8];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = type metadata accessor for Date(0LL);
  int v22 = sub_10001D158((uint64_t)v19, 1LL, v21);
  int v23 = sub_10001D158((uint64_t)v20, 1LL, v21);
  if (!v22)
  {
    uint64_t v24 = *(void *)(v21 - 8);
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 24))(v19, v20, v21);
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t))(v24 + 8))(v19, v21);
    goto LABEL_12;
  }

  if (v23)
  {
LABEL_12:
    uint64_t v25 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v19, v20, *(void *)(*(void *)(v25 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16LL))(v19, v20, v21);
  sub_10001762C((uint64_t)v19, 0LL, 1LL, v21);
LABEL_13:
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  uint64_t v26 = a3[10];
  uint64_t v27 = (void *)((char *)a1 + v26);
  v28 = (void *)((char *)a2 + v26);
  *uint64_t v27 = *v28;
  v27[1] = v28[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  return a1;
}

_OWORD *sub_100142650(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  if (sub_10001D158((uint64_t)v9, 1LL, v10))
  {
    uint64_t v11 = sub_1000175B0(&qword_1002AC060);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
    sub_10001762C((uint64_t)v8, 0LL, 1LL, v10);
  }

  uint64_t v12 = a3[7];
  uint64_t v13 = a3[8];
  uint64_t v14 = (char *)a1 + v12;
  uint64_t v15 = (char *)a2 + v12;
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = (char *)a1 + v13;
  uint64_t v17 = (char *)a2 + v13;
  uint64_t v18 = type metadata accessor for Date(0LL);
  if (sub_10001D158((uint64_t)v17, 1LL, v18))
  {
    uint64_t v19 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32LL))(v16, v17, v18);
    sub_10001762C((uint64_t)v16, 0LL, 1LL, v18);
  }

  uint64_t v20 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *(_OWORD *)((char *)a1 + v20) = *(_OWORD *)((char *)a2 + v20);
  uint64_t v21 = a3[12];
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *((_BYTE *)a1 + v21) = *((_BYTE *)a2 + v21);
  return a1;
}

void *sub_1001427C8(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  int v12 = sub_10001D158((uint64_t)v9, 1LL, v11);
  int v13 = sub_10001D158((uint64_t)v10, 1LL, v11);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v9, v10, v11);
      sub_10001762C((uint64_t)v9, 0LL, 1LL, v11);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v14 = *(void *)(v11 - 8);
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v11);
LABEL_6:
    uint64_t v15 = sub_1000175B0(&qword_1002AC060);
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v9, v10, v11);
LABEL_7:
  uint64_t v16 = a3[7];
  uint64_t v17 = a3[8];
  uint64_t v18 = (char *)a1 + v16;
  uint64_t v19 = (char *)a2 + v16;
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = (char *)a1 + v17;
  uint64_t v21 = (char *)a2 + v17;
  uint64_t v22 = type metadata accessor for Date(0LL);
  int v23 = sub_10001D158((uint64_t)v20, 1LL, v22);
  int v24 = sub_10001D158((uint64_t)v21, 1LL, v22);
  if (!v23)
  {
    uint64_t v25 = *(void *)(v22 - 8);
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 40))(v20, v21, v22);
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t))(v25 + 8))(v20, v22);
    goto LABEL_12;
  }

  if (v24)
  {
LABEL_12:
    uint64_t v26 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v20, v21, *(void *)(*(void *)(v26 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32LL))(v20, v21, v22);
  sub_10001762C((uint64_t)v20, 0LL, 1LL, v22);
LABEL_13:
  uint64_t v27 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v28 = (void *)((char *)a1 + v27);
  v29 = (void *)((char *)a2 + v27);
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  void *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[12];
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *((_BYTE *)a1 + v32) = *((_BYTE *)a2 + v32);
  return a1;
}

uint64_t sub_100142A00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100142A0C);
}

uint64_t sub_100142A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_1000175B0(&qword_1002AC060);
    if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == (_DWORD)a2)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(int *)(a3 + 24);
    }

    else
    {
      uint64_t v9 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
      uint64_t v10 = *(int *)(a3 + 32);
    }

    return sub_10001D158(a1 + v10, a2, v9);
  }

uint64_t sub_100142AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100142AB8);
}

uint64_t sub_100142AB8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = sub_1000175B0(&qword_1002AC060);
    if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(int *)(a4 + 24);
    }

    else
    {
      uint64_t v9 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
      uint64_t v10 = *(int *)(a4 + 32);
    }

    return sub_10001762C(v5 + v10, a2, a2, v9);
  }

  return result;
}

void sub_100142B54(uint64_t a1)
{
  v6[0] = &unk_1002041E8;
  v6[1] = &unk_1002041E8;
  sub_100142C2C( 319LL,  (unint64_t *)&unk_1002B5758,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  if (v3 <= 0x3F)
  {
    v6[2] = *(void *)(v2 - 8) + 64LL;
    v6[3] = &unk_100204200;
    sub_100142C2C( 319LL,  (unint64_t *)&qword_1002AED58,  (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    if (v5 <= 0x3F)
    {
      v6[4] = *(void *)(v4 - 8) + 64LL;
      v6[5] = &unk_100204218;
      v6[6] = &unk_100204230;
      v6[7] = &unk_100204248;
      v6[8] = &unk_100204218;
      swift_initStructMetadata(a1, 256LL, 9LL, v6, a1 + 16);
    }
  }

void sub_100142C2C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  if (!*a2)
  {
    uint64_t v5 = a3(255LL);
    unint64_t v6 = type metadata accessor for Optional(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

uint64_t sub_100142C78(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

uint64_t sub_100142C94()
{
  return 0LL;
}

uint64_t sub_100142CA0(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6F69746F6D6F7270LL && a2 == 0xEB000000006C616ELL)
  {
    unint64_t v5 = 0xEB000000006C616ELL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F69746F6D6F7270LL, 0xEB000000006C616ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 1701080931 && a2 == 0xE400000000000000LL)
  {
    unint64_t v8 = 0xE400000000000000LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701080931LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x6B6361626E6977LL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
    return 2LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B6361626E6977LL, 0xE700000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_100142DF4(char a1)
{
  if (!a1) {
    return 0x6F69746F6D6F7270LL;
  }
  if (a1 == 1) {
    return 1701080931LL;
  }
  return 0x6B6361626E6977LL;
}

void sub_100142E4C(void *a1, char a2)
{
  uint64_t v5 = sub_1000175B0(&qword_1002B5848);
  uint64_t v23 = *(void *)(v5 - 8);
  uint64_t v24 = v5;
  sub_100043FD8();
  __chkstk_darwin(v6);
  sub_1000227D0();
  uint64_t v22 = v7;
  uint64_t v8 = sub_1000175B0(&qword_1002B5850);
  uint64_t v20 = *(void *)(v8 - 8);
  uint64_t v21 = v8;
  sub_100043FD8();
  __chkstk_darwin(v9);
  sub_10001DAD0();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = sub_1000175B0(&qword_1002B5858);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_100022788();
  uint64_t v15 = sub_1000175B0(&qword_1002B5860);
  uint64_t v25 = *(void *)(v15 - 8);
  sub_100043FD8();
  __chkstk_darwin(v16);
  sub_1000BBB14();
  uint64_t v18 = a1[3];
  uint64_t v17 = a1[4];
  sub_100019F58(a1, v18);
  unint64_t v19 = sub_100144520();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for PurchaseConfiguration.OfferType.CodingKeys,  &type metadata for PurchaseConfiguration.OfferType.CodingKeys,  v19,  v18,  v17);
  if (a2)
  {
    if (a2 == 1)
    {
      char v28 = 1;
      sub_100144598();
      sub_100144960((uint64_t)&type metadata for PurchaseConfiguration.OfferType.CodeCodingKeys, (uint64_t)&v28);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v12, v21);
    }

    else
    {
      sub_1001449E0();
      sub_100144960((uint64_t)&type metadata for PurchaseConfiguration.OfferType.WinbackCodingKeys, (uint64_t)&v29);
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    }
  }

  else
  {
    char v27 = 0;
    sub_1001445D4();
    sub_100144960((uint64_t)&type metadata for PurchaseConfiguration.OfferType.PromotionalCodingKeys, (uint64_t)&v27);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v3, v13);
  }

  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v2, v15);
  sub_10001DAB8();
}

uint64_t sub_100143030(void *a1)
{
  uint64_t v37 = sub_1000175B0(&qword_1002B5800);
  uint64_t v40 = *(void *)(v37 - 8);
  sub_100043FD8();
  __chkstk_darwin(v5);
  sub_1000227D0();
  uint64_t v39 = v6;
  uint64_t v7 = sub_1000175B0(&qword_1002B5808);
  uint64_t v35 = *(void *)(v7 - 8);
  uint64_t v36 = v7;
  sub_100043FD8();
  __chkstk_darwin(v8);
  sub_1000227D0();
  uint64_t v38 = v9;
  uint64_t v34 = sub_1000175B0(&qword_1002B5810);
  sub_100022760();
  __chkstk_darwin(v10);
  sub_1000BBB14();
  uint64_t v11 = sub_1000175B0(&qword_1002B5818);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_1000728A4();
  sub_100019F58(a1, a1[3]);
  unint64_t v13 = sub_100144520();
  sub_1001449C8( (uint64_t)&type metadata for PurchaseConfiguration.OfferType.CodingKeys,  (uint64_t)&type metadata for PurchaseConfiguration.OfferType.CodingKeys,  v13);
  if (v41) {
    goto LABEL_11;
  }
  uint64_t v32 = v1;
  uint64_t v33 = v12;
  v42 = a1;
  uint64_t v14 = KeyedDecodingContainer.allKeys.getter(v11);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 + 16);
  if (!v16)
  {
LABEL_8:
    uint64_t v23 = type metadata accessor for DecodingError(0LL);
    swift_allocError(v23, &protocol witness table for DecodingError, 0LL, 0LL);
    uint64_t v25 = v24;
    sub_1000175B0(&qword_1002B5828);
    void *v25 = &type metadata for PurchaseConfiguration.OfferType;
    uint64_t v26 = KeyedDecodingContainer.codingPath.getter(v11);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)( v26,  0xD00000000000002BLL,  0x800000010021E870LL,  0LL);
    uint64_t v27 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v23 - 8) + 104LL))( v25,  enum case for DecodingError.typeMismatch(_:),  v23);
    swift_willThrow(v27);
    swift_unknownObjectRelease(v15);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v11);
    a1 = v42;
LABEL_11:
    sub_100019F7C(a1);
    return v11;
  }

  uint64_t v17 = v11;
  uint64_t v11 = *(unsigned __int8 *)(v14 + 32);
  uint64_t v18 = sub_100124A38(1LL, v16, v14, v14 + 32, 0LL, (2 * v16) | 1);
  uint64_t v20 = v19;
  unint64_t v22 = v21;
  swift_bridgeObjectRelease();
  uint64_t v15 = v18;
  if (v20 != v22 >> 1)
  {
    uint64_t v11 = v17;
    goto LABEL_8;
  }

  if ((_DWORD)v11)
  {
    if ((_DWORD)v11 == 1)
    {
      char v44 = 1;
      sub_100144598();
      sub_100144988((uint64_t)&type metadata for PurchaseConfiguration.OfferType.CodeCodingKeys, (uint64_t)&v44);
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v38, v36);
    }

    else
    {
      sub_1001449E0();
      sub_100144988((uint64_t)&type metadata for PurchaseConfiguration.OfferType.WinbackCodingKeys, (uint64_t)&v45);
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v37);
    }

    uint64_t v29 = v18;
  }

  else
  {
    char v43 = 0;
    sub_1001445D4();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for PurchaseConfiguration.OfferType.PromotionalCodingKeys,  &v43,  v17,  &type metadata for PurchaseConfiguration.OfferType.PromotionalCodingKeys);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v34);
    uint64_t v29 = v18;
  }

  swift_unknownObjectRelease(v29);
  uint64_t v30 = sub_1001449B4();
  v31(v30);
  sub_100019F7C(v42);
  return v11;
}

uint64_t sub_1001433C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100142C78(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1001433E8(uint64_t a1)
{
  unint64_t v2 = sub_100144598();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100143410(uint64_t a1)
{
  unint64_t v2 = sub_100144598();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100143438()
{
  return sub_100142DF4(*v0);
}

uint64_t sub_100143440@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100142CA0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100143464(uint64_t a1)
{
  unint64_t v2 = sub_100144520();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10014348C(uint64_t a1)
{
  unint64_t v2 = sub_100144520();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001434B4(uint64_t a1)
{
  unint64_t v2 = sub_1001445D4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001434DC(uint64_t a1)
{
  unint64_t v2 = sub_1001445D4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100143504(uint64_t a1)
{
  unint64_t v2 = sub_10014455C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10014352C(uint64_t a1)
{
  unint64_t v2 = sub_10014455C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100143554@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100143030(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

void sub_10014357C(void *a1)
{
}

uint64_t sub_100143594(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x4449656C646E7562LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v5 = 0xE800000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449656C646E7562LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x49746375646F7270LL && a2 == 0xE900000000000044LL)
  {
    unint64_t v8 = 0xE900000000000044LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746375646F7270LL, 0xE900000000000044LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x756F636341707061LL && a2 == 0xEF6E656B6F54746ELL)
  {
    unint64_t v10 = 0xEF6E656B6F54746ELL;
    goto LABEL_24;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x756F636341707061LL, 0xEF6E656B6F54746ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2LL;
  }

  if (a1 == 0x797469746E617571LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v12 = 0xE800000000000000LL;
    goto LABEL_32;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x797469746E617571LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3LL;
  }

  if (a1 == 0x6573616863727570LL && a2 == 0xEC00000065746144LL)
  {
    unint64_t v14 = 0xEC00000065746144LL;
    goto LABEL_40;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6573616863727570LL, 0xEC00000065746144LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
LABEL_40:
    swift_bridgeObjectRelease(v14);
    return 4LL;
  }

  if (a1 == 0x796C696D61467369LL && a2 == 0xEE00646572616853LL)
  {
    unint64_t v16 = 0xEE00646572616853LL;
    goto LABEL_48;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x796C696D61467369LL, 0xEE00646572616853LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v16 = a2;
LABEL_48:
    swift_bridgeObjectRelease(v16);
    return 5LL;
  }

  if (a1 == 0x4449726566666FLL && a2 == 0xE700000000000000LL)
  {
    unint64_t v18 = 0xE700000000000000LL;
    goto LABEL_56;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449726566666FLL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v18 = a2;
LABEL_56:
    swift_bridgeObjectRelease(v18);
    return 6LL;
  }

  if (a1 == 0x707954726566666FLL && a2 == 0xE900000000000065LL)
  {
    unint64_t v20 = 0xE900000000000065LL;
    goto LABEL_64;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x707954726566666FLL, 0xE900000000000065LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v20 = a2;
LABEL_64:
    swift_bridgeObjectRelease(v20);
    return 7LL;
  }

  if (a1 == 0xD000000000000010LL && a2 == 0x800000010021E850LL)
  {
    swift_bridgeObjectRelease(0x800000010021E850LL);
    return 8LL;
  }

  else
  {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010021E850LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v21 & 1) != 0) {
      return 8LL;
    }
    else {
      return 9LL;
    }
  }

uint64_t sub_100143990(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001439C4
                                                            + 4 * asc_100204190[a1]))( 0x4449656C646E7562LL,  0xE800000000000000LL);
}

uint64_t sub_1001439C4()
{
  return 0x49746375646F7270LL;
}

uint64_t sub_1001439E0()
{
  return 0x756F636341707061LL;
}

uint64_t sub_100143A04()
{
  return 0x797469746E617571LL;
}

uint64_t sub_100143A18()
{
  return 0x6573616863727570LL;
}

uint64_t sub_100143A38()
{
  return 0x796C696D61467369LL;
}

uint64_t sub_100143A5C()
{
  return 0x4449726566666FLL;
}

uint64_t sub_100143A74()
{
  return 0x707954726566666FLL;
}

unint64_t sub_100143A98()
{
  return 0xD000000000000010LL;
}

uint64_t sub_100143AB4(void *a1)
{
  unint64_t v5 = v1;
  uint64_t v7 = sub_1000175B0(&qword_1002B57C8);
  sub_100022760();
  __chkstk_darwin(v8);
  sub_1000728A4();
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100019F58(a1, v9);
  unint64_t v11 = sub_10014420C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for PurchaseConfiguration.CodingKeys,  &type metadata for PurchaseConfiguration.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v5;
  uint64_t v13 = v5[1];
  char v42 = 0;
  sub_100023EB4(v12, v13, (uint64_t)&v42);
  if (!v2)
  {
    uint64_t v14 = v5[2];
    uint64_t v15 = v5[3];
    char v41 = 1;
    sub_100023EB4(v14, v15, (uint64_t)&v41);
    unint64_t v16 = (int *)type metadata accessor for PurchaseConfiguration(0LL);
    char v40 = 2;
    type metadata accessor for UUID(0LL);
    sub_100046F3C( &qword_1002B57D0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (const char *)&protocol conformance descriptor for UUID);
    sub_100144970(v17, (uint64_t)&v40, v18, v19, v17);
    unint64_t v20 = (char *)v5 + v16[7];
    uint64_t v21 = *(void *)v20;
    uint64_t v22 = v20[8];
    char v39 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v39, v7);
    char v38 = 4;
    type metadata accessor for Date(0LL);
    sub_100046F3C( (unint64_t *)&qword_1002A93C8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (const char *)&protocol conformance descriptor for Date);
    sub_100144970(v23, (uint64_t)&v38, v24, v25, v23);
    uint64_t v26 = *((unsigned __int8 *)v5 + v16[9]);
    char v37 = 5;
    sub_10014499C(v26, (uint64_t)&v37);
    uint64_t v27 = (uint64_t *)((char *)v5 + v16[10]);
    uint64_t v28 = *v27;
    uint64_t v29 = v27[1];
    char v36 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, v29, &v36, v7);
    char v35 = *((_BYTE *)v5 + v16[11]);
    char v34 = 7;
    unint64_t v30 = sub_100144304();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)( &v35,  &v34,  v7,  &type metadata for PurchaseConfiguration.OfferType,  v30);
    uint64_t v31 = *((unsigned __int8 *)v5 + v16[12]);
    char v33 = 8;
    sub_10014499C(v31, (uint64_t)&v33);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v7);
}

void sub_100143D24(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v31 = v5;
  sub_1000175B0(&qword_1002AC060);
  sub_100043FD8();
  __chkstk_darwin(v6);
  sub_100022788();
  uint64_t v32 = sub_1000175B0(&qword_1002B57A8);
  sub_100022760();
  __chkstk_darwin(v7);
  sub_10001DAD0();
  type metadata accessor for PurchaseConfiguration(0LL);
  sub_100043FD8();
  __chkstk_darwin(v8);
  sub_10001DAD0();
  unint64_t v11 = (void *)(v10 - v9);
  uint64_t v13 = (void *)((char *)v11 + v12[10]);
  *uint64_t v13 = 0LL;
  v13[1] = 0LL;
  uint64_t v14 = v13;
  char v35 = v12;
  uint64_t v15 = v12[11];
  char v33 = v11;
  *((_BYTE *)v11 + v15) = 3;
  sub_100019F58(a1, a1[3]);
  unint64_t v16 = sub_10014420C();
  sub_1001449C8( (uint64_t)&type metadata for PurchaseConfiguration.CodingKeys,  (uint64_t)&type metadata for PurchaseConfiguration.CodingKeys,  v16);
  if (v34)
  {
    sub_10013C308();
    swift_bridgeObjectRelease();
  }

  else
  {
    char v44 = 0;
    uint64_t v17 = v14;
    *char v33 = KeyedDecodingContainer.decode(_:forKey:)(&v44, v32);
    v33[1] = v18;
    char v43 = 1;
    v33[2] = KeyedDecodingContainer.decode(_:forKey:)(&v43, v32);
    v33[3] = v19;
    uint64_t v20 = type metadata accessor for UUID(0LL);
    char v42 = 2;
    sub_100046F3C( &qword_1002B57B8,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (const char *)&protocol conformance descriptor for UUID);
    sub_1001449AC(v20, (uint64_t)&v42, v32, v20, v21);
    sub_10004DB28(v2, (uint64_t)v33 + v35[6], &qword_1002AC060);
    char v41 = 3;
    uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v41, v32);
    uint64_t v23 = (char *)v33 + v35[7];
    *(void *)uint64_t v23 = v22;
    v23[8] = v24 & 1;
    uint64_t v25 = type metadata accessor for Date(0LL);
    char v40 = 4;
    sub_100046F3C( &qword_1002A93E8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (const char *)&protocol conformance descriptor for Date);
    sub_1001449AC(v25, (uint64_t)&v40, v32, v25, v26);
    sub_10004DB28(v31, (uint64_t)v33 + v35[8], (uint64_t *)&unk_1002AFCD0);
    char v39 = 5;
    *((_BYTE *)v33 + v35[9]) = sub_1001449D4((uint64_t)&v39);
    char v38 = 6;
    *uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v38, v32);
    v17[1] = v27;
    v37[0] = 7;
    unint64_t v28 = sub_100144248();
    sub_1001449AC( (uint64_t)&type metadata for PurchaseConfiguration.OfferType,  (uint64_t)v37,  v32,  (uint64_t)&type metadata for PurchaseConfiguration.OfferType,  v28);
    *((_BYTE *)v33 + v15) = v37[9];
    char v36 = 8;
    char v29 = sub_1001449D4((uint64_t)&v36);
    sub_100144950();
    *((_BYTE *)v33 + v35[12]) = v29;
    sub_100144284((uint64_t)v33, a2);
    sub_10013C308();
    sub_1001442C8((uint64_t)v33);
  }

  sub_10001DAB8();
}

uint64_t sub_100144168()
{
  return sub_100143990(*v0);
}

uint64_t sub_100144170@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100143594(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100144194(uint64_t a1)
{
  unint64_t v2 = sub_10014420C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001441BC(uint64_t a1)
{
  unint64_t v2 = sub_10014420C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1001441E4(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_1001441F8(void *a1)
{
  return sub_100143AB4(a1);
}

unint64_t sub_10014420C()
{
  unint64_t result = qword_1002B57B0;
  if (!qword_1002B57B0)
  {
    unint64_t result = swift_getWitnessTable(byte_100204438, &type metadata for PurchaseConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B57B0);
  }

  return result;
}

unint64_t sub_100144248()
{
  unint64_t result = qword_1002B57C0;
  if (!qword_1002B57C0)
  {
    unint64_t result = swift_getWitnessTable("qT\b", &type metadata for PurchaseConfiguration.OfferType);
    atomic_store(result, (unint64_t *)&qword_1002B57C0);
  }

  return result;
}

uint64_t sub_100144284(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PurchaseConfiguration(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001442C8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PurchaseConfiguration(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_100144304()
{
  unint64_t result = qword_1002B57D8;
  if (!qword_1002B57D8)
  {
    unint64_t result = swift_getWitnessTable(byte_1002043E8, &type metadata for PurchaseConfiguration.OfferType);
    atomic_store(result, (unint64_t *)&qword_1002B57D8);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for PurchaseConfiguration.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_10014438C + 4 * byte_10020419E[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1001443C0 + 4 * byte_100204199[v4]))();
}

uint64_t sub_1001443C0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001443C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001443D0LL);
  }
  return result;
}

uint64_t sub_1001443DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001443E4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 8;
  return result;
}

uint64_t sub_1001443E8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001443F0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PurchaseConfiguration.CodingKeys()
{
  return &type metadata for PurchaseConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for PurchaseConfiguration.OfferType()
{
  return &type metadata for PurchaseConfiguration.OfferType;
}

unint64_t sub_100144424()
{
  unint64_t result = qword_1002B57E0;
  if (!qword_1002B57E0)
  {
    unint64_t result = swift_getWitnessTable(byte_100204308, &type metadata for PurchaseConfiguration.OfferType);
    atomic_store(result, (unint64_t *)&qword_1002B57E0);
  }

  return result;
}

unint64_t sub_100144464()
{
  unint64_t result = qword_1002B57E8;
  if (!qword_1002B57E8)
  {
    unint64_t result = swift_getWitnessTable(byte_1002043C0, &type metadata for PurchaseConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B57E8);
  }

  return result;
}

unint64_t sub_1001444A4()
{
  unint64_t result = qword_1002B57F0;
  if (!qword_1002B57F0)
  {
    unint64_t result = swift_getWitnessTable(byte_100204330, &type metadata for PurchaseConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B57F0);
  }

  return result;
}

unint64_t sub_1001444E4()
{
  unint64_t result = qword_1002B57F8;
  if (!qword_1002B57F8)
  {
    unint64_t result = swift_getWitnessTable(byte_100204358, &type metadata for PurchaseConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B57F8);
  }

  return result;
}

unint64_t sub_100144520()
{
  unint64_t result = qword_1002B5820;
  if (!qword_1002B5820)
  {
    unint64_t result = swift_getWitnessTable("}Q\b", &type metadata for PurchaseConfiguration.OfferType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B5820);
  }

  return result;
}

unint64_t sub_10014455C()
{
  unint64_t result = qword_1002B5830;
  if (!qword_1002B5830)
  {
    unint64_t result = swift_getWitnessTable(byte_10020471C, &type metadata for PurchaseConfiguration.OfferType.WinbackCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B5830);
  }

  return result;
}

unint64_t sub_100144598()
{
  unint64_t result = qword_1002B5838;
  if (!qword_1002B5838)
  {
    unint64_t result = swift_getWitnessTable(byte_1002046CC, &type metadata for PurchaseConfiguration.OfferType.CodeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B5838);
  }

  return result;
}

unint64_t sub_1001445D4()
{
  unint64_t result = qword_1002B5840;
  if (!qword_1002B5840)
  {
    unint64_t result = swift_getWitnessTable("mR\b", &type metadata for PurchaseConfiguration.OfferType.PromotionalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B5840);
  }

  return result;
}

uint64_t _s25ASOctaneSupportXPCService21PurchaseConfigurationV9OfferTypeOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10014465C + 4 * byte_1002041A8[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100144690 + 4 * byte_1002041A3[v4]))();
}

uint64_t sub_100144690(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100144698(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001446A0LL);
  }
  return result;
}

uint64_t sub_1001446AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001446B4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1001446B8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001446C0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PurchaseConfiguration.OfferType.CodingKeys()
{
  return &type metadata for PurchaseConfiguration.OfferType.CodingKeys;
}

ValueMetadata *type metadata accessor for PurchaseConfiguration.OfferType.PromotionalCodingKeys()
{
  return &type metadata for PurchaseConfiguration.OfferType.PromotionalCodingKeys;
}

ValueMetadata *type metadata accessor for PurchaseConfiguration.OfferType.CodeCodingKeys()
{
  return &type metadata for PurchaseConfiguration.OfferType.CodeCodingKeys;
}

ValueMetadata *type metadata accessor for PurchaseConfiguration.OfferType.WinbackCodingKeys()
{
  return &type metadata for PurchaseConfiguration.OfferType.WinbackCodingKeys;
}

unint64_t sub_100144710()
{
  unint64_t result = qword_1002B5868;
  if (!qword_1002B5868)
  {
    unint64_t result = swift_getWitnessTable("eR\b", &type metadata for PurchaseConfiguration.OfferType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B5868);
  }

  return result;
}

unint64_t sub_100144750()
{
  unint64_t result = qword_1002B5870;
  if (!qword_1002B5870)
  {
    unint64_t result = swift_getWitnessTable("US\b", &type metadata for PurchaseConfiguration.OfferType.PromotionalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B5870);
  }

  return result;
}

unint64_t sub_100144790()
{
  unint64_t result = qword_1002B5878;
  if (!qword_1002B5878)
  {
    unint64_t result = swift_getWitnessTable("=S\b", &type metadata for PurchaseConfiguration.OfferType.PromotionalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B5878);
  }

  return result;
}

unint64_t sub_1001447D0()
{
  unint64_t result = qword_1002B5880;
  if (!qword_1002B5880)
  {
    unint64_t result = swift_getWitnessTable(byte_100204524, &type metadata for PurchaseConfiguration.OfferType.CodeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B5880);
  }

  return result;
}

unint64_t sub_100144810()
{
  unint64_t result = qword_1002B5888;
  if (!qword_1002B5888)
  {
    unint64_t result = swift_getWitnessTable(byte_10020454C, &type metadata for PurchaseConfiguration.OfferType.CodeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B5888);
  }

  return result;
}

unint64_t sub_100144850()
{
  unint64_t result = qword_1002B5890;
  if (!qword_1002B5890)
  {
    unint64_t result = swift_getWitnessTable(byte_1002044D4, &type metadata for PurchaseConfiguration.OfferType.WinbackCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B5890);
  }

  return result;
}

unint64_t sub_100144890()
{
  unint64_t result = qword_1002B5898;
  if (!qword_1002B5898)
  {
    unint64_t result = swift_getWitnessTable(byte_1002044FC, &type metadata for PurchaseConfiguration.OfferType.WinbackCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B5898);
  }

  return result;
}

unint64_t sub_1001448D0()
{
  unint64_t result = qword_1002B58A0;
  if (!qword_1002B58A0)
  {
    unint64_t result = swift_getWitnessTable(byte_1002045C4, &type metadata for PurchaseConfiguration.OfferType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B58A0);
  }

  return result;
}

unint64_t sub_100144910()
{
  unint64_t result = qword_1002B58A8;
  if (!qword_1002B58A8)
  {
    unint64_t result = swift_getWitnessTable(byte_1002045EC, &type metadata for PurchaseConfiguration.OfferType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B58A8);
  }

  return result;
}

uint64_t sub_100144950()
{
  return (*(uint64_t (**)(uint64_t, void))(v1 + 8))(v0, *(void *)(v2 - 128));
}

uint64_t sub_100144960(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_100144970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v6, a2, v5, v7, a5);
}

uint64_t sub_100144988(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_10014499C(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v2);
}

uint64_t sub_1001449AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_1001449B4()
{
  return v0;
}

uint64_t sub_1001449C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a2, a3, v4, v3);
}

uint64_t sub_1001449D4(uint64_t a1)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, *(void *)(v1 - 128));
}

unint64_t sub_1001449E0()
{
  *(_BYTE *)(v0 - 65) = 2;
  return sub_10014455C();
}

void NIOAtomic.store(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(*(void *)v3 + 80LL);
  uint64_t v6 = *(void *)(*(void *)v3 + 88LL);
  uint64_t v8 = sub_100145810(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for NIOAtomicPrimitive);
  uint64_t v9 = sub_10009B28C();
  uint64_t v10 = sub_10014584C(v9, (uint64_t)type metadata for ());
  uint64_t v13 = v7;
  uint64_t v14 = v6;
  uint64_t v15 = a1;
  sub_10014585C( (uint64_t)sub_1001454F4,  (uint64_t)v12,  v10,  v4,  v8,  (uint64_t)&type metadata for Never,  v4,  (uint64_t)&protocol witness table for Never,  v11);
  sub_100024F0C();
  sub_100145838();
}

uint64_t static NIOAtomic.makeAtomic(value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 88);
  uint64_t v7 = sub_100145824(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for NIOAtomicPrimitive);
  uint64_t v8 = ManagedBufferPointer.init(bufferClass:minimumCapacity:makingHeaderWith:)( v3,  1LL,  debugOnly(_:),  0LL,  &type metadata for ()[8],  v7);
  uint64_t v13 = v6;
  uint64_t v14 = v5;
  uint64_t v15 = a1;
  sub_1001450C8( (uint64_t)sub_10014550C,  (uint64_t)v12,  v8,  (uint64_t)&type metadata for ()[8],  v7,  (uint64_t)&type metadata for Never,  (uint64_t)&type metadata for ()[8],  (uint64_t)&protocol witness table for Never,  v11);
  uint64_t v9 = ManagedBufferPointer.buffer.getter(v8, &type metadata for ()[8], v7);
  swift_release();
  return swift_dynamicCastClassUnconditional(v9, v3, 0LL, 0LL, 0LL);
}

void NIOAtomic.load()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)v3 + 80LL);
  uint64_t v5 = *(void *)(*(void *)v3 + 88LL);
  uint64_t v7 = sub_100145810(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for NIOAtomicPrimitive);
  uint64_t v8 = sub_10009B28C();
  uint64_t v9 = sub_10014584C(v8, (uint64_t)type metadata for ());
  uint64_t v12 = v6;
  uint64_t v13 = v5;
  sub_10014585C( (uint64_t)sub_100145524,  (uint64_t)v11,  v9,  v4,  v7,  (uint64_t)&type metadata for Never,  v6,  (uint64_t)&protocol witness table for Never,  v10);
  sub_100024F0C();
  sub_100145838();
}

uint64_t NIOAtomic.exchange(with:)(uint64_t a1)
{
  return sub_10014528C(a1, (uint64_t)sub_100145540);
}

uint64_t NIOAtomic.compareAndExchange(expected:desired:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(*(void *)v3 + 80LL);
  uint64_t v6 = *(void *)(*(void *)v3 + 88LL);
  uint64_t v8 = sub_100145824(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for NIOAtomicPrimitive);
  uint64_t v9 = sub_10009B28C();
  uint64_t v10 = ManagedBufferPointer.init(unsafeBufferObject:)(v9, &type metadata for ()[8], v8);
  uint64_t v14 = v7;
  uint64_t v15 = v6;
  uint64_t v16 = a1;
  uint64_t v17 = a2;
  sub_10014585C( (uint64_t)sub_100145558,  (uint64_t)v13,  v10,  (uint64_t)&type metadata for ()[8],  v8,  (uint64_t)&type metadata for Never,  (uint64_t)&type metadata for Bool,  (uint64_t)&protocol witness table for Never,  v12);
  sub_100024F0C();
  return v18;
}

uint64_t NIOAtomic.add(_:)(uint64_t a1)
{
  return sub_10014528C(a1, (uint64_t)sub_100145578);
}

uint64_t (**Bool.nio_atomic_create_with_existing_storage.unsafeMutableAddressor())()
{
  return &static Bool.nio_atomic_create_with_existing_storage;
}

uint64_t (**Bool.nio_atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static Bool.nio_atomic_compare_and_exchange;
}

uint64_t (**Bool.nio_atomic_add.unsafeMutableAddressor())()
{
  return &static Bool.nio_atomic_add;
}

uint64_t (**Bool.nio_atomic_sub.unsafeMutableAddressor())()
{
  return &static Bool.nio_atomic_sub;
}

uint64_t (**Bool.nio_atomic_exchange.unsafeMutableAddressor())()
{
  return &static Bool.nio_atomic_exchange;
}

uint64_t (**Bool.nio_atomic_load.unsafeMutableAddressor())()
{
  return &static Bool.nio_atomic_load;
}

uint64_t (**Bool.nio_atomic_store.unsafeMutableAddressor())()
{
  return &static Bool.nio_atomic_store;
}

uint64_t (**Int8.nio_atomic_create_with_existing_storage.unsafeMutableAddressor())()
{
  return &static Int8.nio_atomic_create_with_existing_storage;
}

uint64_t (**Int8.nio_atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static Int8.nio_atomic_compare_and_exchange;
}

uint64_t (**Int8.nio_atomic_add.unsafeMutableAddressor())()
{
  return &static Int8.nio_atomic_add;
}

uint64_t (**Int8.nio_atomic_sub.unsafeMutableAddressor())()
{
  return &static Int8.nio_atomic_sub;
}

uint64_t (**Int8.nio_atomic_exchange.unsafeMutableAddressor())()
{
  return &static Int8.nio_atomic_exchange;
}

uint64_t (**Int8.nio_atomic_load.unsafeMutableAddressor())()
{
  return &static Int8.nio_atomic_load;
}

uint64_t (**Int8.nio_atomic_store.unsafeMutableAddressor())()
{
  return &static Int8.nio_atomic_store;
}

uint64_t (**UInt8.nio_atomic_create_with_existing_storage.unsafeMutableAddressor())()
{
  return &static UInt8.nio_atomic_create_with_existing_storage;
}

uint64_t (**UInt8.nio_atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static UInt8.nio_atomic_compare_and_exchange;
}

uint64_t (**UInt8.nio_atomic_add.unsafeMutableAddressor())()
{
  return &static UInt8.nio_atomic_add;
}

uint64_t (**UInt8.nio_atomic_sub.unsafeMutableAddressor())()
{
  return &static UInt8.nio_atomic_sub;
}

uint64_t (**UInt8.nio_atomic_exchange.unsafeMutableAddressor())()
{
  return &static UInt8.nio_atomic_exchange;
}

uint64_t (**UInt8.nio_atomic_load.unsafeMutableAddressor())()
{
  return &static UInt8.nio_atomic_load;
}

uint64_t (**UInt8.nio_atomic_store.unsafeMutableAddressor())()
{
  return &static UInt8.nio_atomic_store;
}

uint64_t (**Int16.nio_atomic_create_with_existing_storage.unsafeMutableAddressor())()
{
  return &static Int16.nio_atomic_create_with_existing_storage;
}

uint64_t (**Int16.nio_atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static Int16.nio_atomic_compare_and_exchange;
}

uint64_t (**Int16.nio_atomic_add.unsafeMutableAddressor())()
{
  return &static Int16.nio_atomic_add;
}

uint64_t (**Int16.nio_atomic_sub.unsafeMutableAddressor())()
{
  return &static Int16.nio_atomic_sub;
}

uint64_t (**Int16.nio_atomic_exchange.unsafeMutableAddressor())()
{
  return &static Int16.nio_atomic_exchange;
}

uint64_t (**Int16.nio_atomic_load.unsafeMutableAddressor())()
{
  return &static Int16.nio_atomic_load;
}

uint64_t (**Int16.nio_atomic_store.unsafeMutableAddressor())()
{
  return &static Int16.nio_atomic_store;
}

uint64_t (**UInt16.nio_atomic_create_with_existing_storage.unsafeMutableAddressor())()
{
  return &static UInt16.nio_atomic_create_with_existing_storage;
}

uint64_t (**UInt16.nio_atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static UInt16.nio_atomic_compare_and_exchange;
}

uint64_t (**UInt16.nio_atomic_add.unsafeMutableAddressor())()
{
  return &static UInt16.nio_atomic_add;
}

uint64_t (**UInt16.nio_atomic_sub.unsafeMutableAddressor())()
{
  return &static UInt16.nio_atomic_sub;
}

uint64_t (**UInt16.nio_atomic_exchange.unsafeMutableAddressor())()
{
  return &static UInt16.nio_atomic_exchange;
}

uint64_t (**UInt16.nio_atomic_load.unsafeMutableAddressor())()
{
  return &static UInt16.nio_atomic_load;
}

uint64_t (**UInt16.nio_atomic_store.unsafeMutableAddressor())()
{
  return &static UInt16.nio_atomic_store;
}

_DWORD *(**Int32.nio_atomic_create_with_existing_storage.unsafeMutableAddressor())(_DWORD *result, int)
{
  return &static Int32.nio_atomic_create_with_existing_storage;
}

uint64_t (**Int32.nio_atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static Int32.nio_atomic_compare_and_exchange;
}

uint64_t (**Int32.nio_atomic_add.unsafeMutableAddressor())(unsigned int *, int)
{
  return &static Int32.nio_atomic_add;
}

uint64_t (**Int32.nio_atomic_sub.unsafeMutableAddressor())(unsigned int *, int)
{
  return &static Int32.nio_atomic_sub;
}

uint64_t (**Int32.nio_atomic_exchange.unsafeMutableAddressor())(unsigned int *, unsigned int)
{
  return &static Int32.nio_atomic_exchange;
}

uint64_t (**Int32.nio_atomic_load.unsafeMutableAddressor())(unsigned int *)
{
  return &static Int32.nio_atomic_load;
}

_DWORD *(**Int32.nio_atomic_store.unsafeMutableAddressor())(_DWORD *result, int)
{
  return &static Int32.nio_atomic_store;
}

_DWORD *(**UInt32.nio_atomic_create_with_existing_storage.unsafeMutableAddressor())(_DWORD *result, int)
{
  return &static UInt32.nio_atomic_create_with_existing_storage;
}

uint64_t (**UInt32.nio_atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static UInt32.nio_atomic_compare_and_exchange;
}

uint64_t (**UInt32.nio_atomic_add.unsafeMutableAddressor())(unsigned int *, int)
{
  return &static UInt32.nio_atomic_add;
}

uint64_t (**UInt32.nio_atomic_sub.unsafeMutableAddressor())(unsigned int *, int)
{
  return &static UInt32.nio_atomic_sub;
}

uint64_t (**UInt32.nio_atomic_exchange.unsafeMutableAddressor())(unsigned int *, unsigned int)
{
  return &static UInt32.nio_atomic_exchange;
}

uint64_t (**UInt32.nio_atomic_load.unsafeMutableAddressor())(unsigned int *)
{
  return &static UInt32.nio_atomic_load;
}

_DWORD *(**UInt32.nio_atomic_store.unsafeMutableAddressor())(_DWORD *result, int)
{
  return &static UInt32.nio_atomic_store;
}

void *(**Int64.nio_atomic_create_with_existing_storage.unsafeMutableAddressor())(void *result, uint64_t)
{
  return &static Int64.nio_atomic_create_with_existing_storage;
}

uint64_t (**Int64.nio_atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static Int64.nio_atomic_compare_and_exchange;
}

unint64_t (**Int64.nio_atomic_add.unsafeMutableAddressor())(unint64_t *, uint64_t)
{
  return &static Int64.nio_atomic_add;
}

unint64_t (**Int64.nio_atomic_sub.unsafeMutableAddressor())(unint64_t *, uint64_t)
{
  return &static Int64.nio_atomic_sub;
}

unint64_t (**Int64.nio_atomic_exchange.unsafeMutableAddressor())(unint64_t *, unint64_t)
{
  return &static Int64.nio_atomic_exchange;
}

uint64_t (**Int64.nio_atomic_load.unsafeMutableAddressor())(uint64_t)
{
  return &static Int64.nio_atomic_load;
}

void *(**Int64.nio_atomic_store.unsafeMutableAddressor())(void *result, uint64_t)
{
  return &static Int64.nio_atomic_store;
}

void *(**UInt64.nio_atomic_create_with_existing_storage.unsafeMutableAddressor())(void *result, uint64_t)
{
  return &static UInt64.nio_atomic_create_with_existing_storage;
}

uint64_t (**UInt64.nio_atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static UInt64.nio_atomic_compare_and_exchange;
}

unint64_t (**UInt64.nio_atomic_add.unsafeMutableAddressor())(unint64_t *, uint64_t)
{
  return &static UInt64.nio_atomic_add;
}

unint64_t (**UInt64.nio_atomic_sub.unsafeMutableAddressor())(unint64_t *, uint64_t)
{
  return &static UInt64.nio_atomic_sub;
}

unint64_t (**UInt64.nio_atomic_exchange.unsafeMutableAddressor())(unint64_t *, unint64_t)
{
  return &static UInt64.nio_atomic_exchange;
}

uint64_t (**UInt64.nio_atomic_load.unsafeMutableAddressor())(uint64_t)
{
  return &static UInt64.nio_atomic_load;
}

void *(**UInt64.nio_atomic_store.unsafeMutableAddressor())(void *result, uint64_t)
{
  return &static UInt64.nio_atomic_store;
}

void *(**Int.nio_atomic_create_with_existing_storage.unsafeMutableAddressor())(void *result, uint64_t)
{
  return &static Int.nio_atomic_create_with_existing_storage;
}

uint64_t (**Int.nio_atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static Int.nio_atomic_compare_and_exchange;
}

unint64_t (**Int.nio_atomic_add.unsafeMutableAddressor())(unint64_t *, uint64_t)
{
  return &static Int.nio_atomic_add;
}

unint64_t (**Int.nio_atomic_sub.unsafeMutableAddressor())(unint64_t *, uint64_t)
{
  return &static Int.nio_atomic_sub;
}

unint64_t (**Int.nio_atomic_exchange.unsafeMutableAddressor())(unint64_t *, unint64_t)
{
  return &static Int.nio_atomic_exchange;
}

uint64_t (**Int.nio_atomic_load.unsafeMutableAddressor())(uint64_t)
{
  return &static Int.nio_atomic_load;
}

void *(**Int.nio_atomic_store.unsafeMutableAddressor())(void *result, uint64_t)
{
  return &static Int.nio_atomic_store;
}

void *(**UInt.nio_atomic_create_with_existing_storage.unsafeMutableAddressor())(void *result, uint64_t)
{
  return &static UInt.nio_atomic_create_with_existing_storage;
}

uint64_t (**UInt.nio_atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static UInt.nio_atomic_compare_and_exchange;
}

unint64_t (**UInt.nio_atomic_add.unsafeMutableAddressor())(unint64_t *, uint64_t)
{
  return &static UInt.nio_atomic_add;
}

unint64_t (**UInt.nio_atomic_sub.unsafeMutableAddressor())(unint64_t *, uint64_t)
{
  return &static UInt.nio_atomic_sub;
}

unint64_t (**UInt.nio_atomic_exchange.unsafeMutableAddressor())(unint64_t *, unint64_t)
{
  return &static UInt.nio_atomic_exchange;
}

uint64_t (**UInt.nio_atomic_load.unsafeMutableAddressor())(uint64_t)
{
  return &static UInt.nio_atomic_load;
}

void *(**UInt.nio_atomic_store.unsafeMutableAddressor())(void *result, uint64_t)
{
  return &static UInt.nio_atomic_store;
}

uint64_t sub_100145068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void (*)(uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  uint64_t v8 = v7;
  v6(a1, a2);
  return swift_release(v8);
}

uint64_t sub_1001450C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void *)(a6 - 8);
  uint64_t result = __chkstk_darwin(a1);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = *(void *)(v19 + 64);
  BOOL v22 = __OFADD__(v20, v21);
  uint64_t v23 = v20 + v21;
  if (v22)
  {
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v24 = *(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) + 1LL;
  BOOL v25 = __CFADD__(v23, v24);
  uint64_t v26 = v23 + v24;
  if (v25)
  {
LABEL_7:
    __break(1u);
    return result;
  }

  uint64_t result = v15(v13 + ((v26 - 1) & -v24), (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (v9) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a9, v17, a6);
  }
  return result;
}

uint64_t sub_100145190@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))( a4,  a5);
  uint64_t v12 = v11;
  LOBYTE(a3) = v10(a1, a2, a3);
  uint64_t result = swift_release(v12);
  *a6 = a3 & 1;
  return result;
}

uint64_t sub_100145210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void (*)(uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  uint64_t v8 = v7;
  v6(a1, a2);
  return swift_release(v8);
}

uint64_t NIOAtomic.sub(_:)(uint64_t a1)
{
  return sub_10014528C(a1, (uint64_t)sub_100145590);
}

uint64_t sub_10014528C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(*(void *)v2 + 80LL);
  uint64_t v5 = *(void *)(*(void *)v2 + 88LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v5,  v6,  &protocol requirements base descriptor for NIOAtomicPrimitive,  &associated type descriptor for NIOAtomicPrimitive.AtomicWrapper);
  uint64_t v8 = sub_10009B28C();
  uint64_t v9 = ManagedBufferPointer.init(unsafeBufferObject:)(v8, &type metadata for ()[8], AssociatedTypeWitness);
  uint64_t v13 = v6;
  uint64_t v14 = v5;
  uint64_t v15 = a1;
  sub_10014585C( a2,  (uint64_t)v12,  v9,  (uint64_t)&type metadata for ()[8],  AssociatedTypeWitness,  (uint64_t)&type metadata for Never,  v6,  (uint64_t)&protocol witness table for Never,  v11);
  return sub_100024F0C();
}

uint64_t sub_100145354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void (*)(uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
  uint64_t v8 = v7;
  v6(a1, a2);
  return swift_release(v8);
}

uint64_t sub_1001453C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void (*)(uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 48))(a3, a4);
  uint64_t v8 = v7;
  v6(a1, a2);
  return swift_release(v8);
}

uint64_t sub_100145434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void (*)(uint64_t))(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 56))(a2, a3);
  uint64_t v6 = v5;
  v4(a1);
  return swift_release(v6);
}

uint64_t sub_100145494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void (*)(uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 64))(a3, a4);
  uint64_t v8 = v7;
  v6(a1, a2);
  return swift_release(v8);
}

uint64_t sub_1001454F4()
{
  return sub_100145494(v0, v1, v2, v3);
}

uint64_t sub_10014550C()
{
  return sub_100145068(v0, v1, v2, v3);
}

uint64_t sub_100145524(uint64_t a1)
{
  return sub_100145434(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100145540()
{
  return sub_1001453C4(v0, v1, v2, v3);
}

uint64_t sub_100145558@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100145190(a1, v2[4], v2[5], v2[2], v2[3], a2);
}

uint64_t sub_100145578()
{
  return sub_100145210(v0, v1, v2, v3);
}

uint64_t sub_100145590()
{
  return sub_100145354(v0, v1, v2, v3);
}

uint64_t NIOAtomic.deinit()
{
  uint64_t v2 = *(void *)(*(void *)v0 + 80LL);
  uint64_t v1 = *(void *)(*(void *)v0 + 88LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v1,  v2,  &protocol requirements base descriptor for NIOAtomicPrimitive,  &associated type descriptor for NIOAtomicPrimitive.AtomicWrapper);
  uint64_t v4 = sub_10009B28C();
  uint64_t v5 = ManagedBufferPointer.init(unsafeBufferObject:)(v4, &type metadata for ()[8], AssociatedTypeWitness);
  uint64_t v9 = v2;
  uint64_t v10 = v1;
  sub_1001456D4( (uint64_t)sub_1001456B8,  (uint64_t)v8,  v5,  (uint64_t)&type metadata for ()[8],  AssociatedTypeWitness,  (uint64_t)&type metadata for Never,  (uint64_t)&type metadata for ()[8],  (uint64_t)&protocol witness table for Never,  v7);
  swift_release();
  return v0;
}

uint64_t sub_100145664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a4,  a3,  &protocol requirements base descriptor for NIOAtomicPrimitive,  &associated type descriptor for NIOAtomicPrimitive.AtomicWrapper);
  return UnsafeMutablePointer.deinitialize(count:)(1LL, a2, AssociatedTypeWitness);
}

uint64_t sub_1001456B8(uint64_t a1, uint64_t a2)
{
  return sub_100145664(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1001456D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void *)(a6 - 8);
  uint64_t result = __chkstk_darwin(a1);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = *(void *)(v19 + 64);
  uint64_t v22 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v23 = *(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) + 1LL;
  BOOL v24 = __CFADD__(v22, v23);
  uint64_t v25 = v22 + v23;
  if (v24)
  {
LABEL_7:
    __break(1u);
    return result;
  }

  uint64_t result = v15(v13 + v20, v13 + ((v25 - 1) & -v23), (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (v9) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a9, v17, a6);
  }
  return result;
}

uint64_t NIOAtomic.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t sub_1001457C0(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + 96);
}

uint64_t type metadata accessor for NIOAtomic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NIOAtomic);
}

  ;
}

uint64_t sub_100145810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_getAssociatedTypeWitness(0LL, v4, v5, a4, a4 + 8);
}

uint64_t sub_100145824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_getAssociatedTypeWitness(0LL, v4, v5, a4, a4 + 8);
}

  ;
}

uint64_t sub_10014584C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ManagedBufferPointer.init(unsafeBufferObject:)(a1, a2 + 8, v2);
}

uint64_t sub_10014585C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1001450C8(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t HTTPRequestEncoder.__allocating_init()()
{
  uint64_t result = sub_100148BC8(v0);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t sub_100145880(char a1)
{
  Swift::UInt32 v2 = *(_DWORD *)(v1 + 12);
  char v7 = a1;
  LODWORD(result) = ByteBuffer._setBytes(_:at:)((uint64_t)&v7, (uint64_t)&v8, v2);
  int v4 = *(_DWORD *)(v1 + 12);
  BOOL v5 = __CFADD__(v4, (_DWORD)result);
  int v6 = v4 + result;
  if (v5) {
    __break(1u);
  }
  *(_DWORD *)(v1 + 12) = v6;
  return result;
}

uint64_t sub_1001458F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v5 + 40) = a1;
  *(void *)(v5 + 48) = a2;
  *(void *)(v5 + 16) = a3;
  *(void *)(v5 + 24) = a4;
  *(_BYTE *)(v5 + 32) = a5;
  *(void *)(v5 + 64) = 0LL;
  *(void *)(v5 + 72) = 0LL;
  *(void *)(v5 + 56) = 0LL;
  return HTTPServerProtocolErrorHandler.deinit();
}

uint64_t sub_10014590C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11 = v8;
  uint64_t v13 = *(void *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 40);
  uint64_t v15 = sub_1000175B0(a6);
  uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
  *(void *)(v16 + 32) = v13;
  *(void *)(v16 + 40) = v14;
  *(void *)(v16 + 16) = 0LL;
  *(_BYTE *)(v16 + 24) = -1;
  *(void *)(v16 + 56) = 0LL;
  *(void *)(v16 + 64) = 0LL;
  *(void *)(v16 + 48) = 0LL;
  uint64_t v17 = sub_100148BC8((uint64_t)&unk_100289FE0);
  *(_BYTE *)(v17 + 16) = 1;
  uint64_t v18 = sub_100148BC8((uint64_t)&unk_100289FE0);
  *(_BYTE *)(v18 + 16) = 1;
  swift_retain();
  sub_100041B5C();
  sub_1000D94A0();
  sub_10002A75C();
  swift_unknownObjectRetain(v13);
  a7(v11, v11, v16, v18, v17);
  sub_10012BF24(v13);
  uint64_t v20 = v19;
  sub_10009B59C(v11);
  sub_10009B59C(v16);
  sub_10009B59C(v18);
  sub_10009B59C(v17);
  sub_10009B59C(a1);
  a8(v20, v11, a1, v16, v17, v18);
  sub_10002A780(v18);
  sub_10002A780(v17);
  sub_10002A51C();
  swift_release();
  sub_10001EDD8();
  sub_10001ED6C();
  return v16;
}

uint64_t sub_100145A64(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = a4;
  if (a6)
  {
    if ((a2 & 1) != 0)
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(v11 + 56);
      uint64_t ObjectType = swift_getObjectType(*(void *)(v11 + 48));
      EmbeddedChannel.WrongTypeError.actual.getter(ObjectType, (uint64_t)&type metadata for ()[8]);
      sub_100148B80();
      sub_100148B80();
      uint64_t v14 = EventLoop.makePromise<A>(of:file:line:)( (uint64_t)&type metadata for ()[8],  (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/H TTPEncoder.swift",  113LL,  2LL,  21LL,  ObjectType,  (uint64_t)&type metadata for ()[8],  v12);
      sub_10002A674();
      swift_retain();
      swift_retain();
      sub_100148C30();
      sub_10014590C(v15, v16, v17, v18, v19, v20, v21, v22);
      sub_10001ED6C();
      swift_release();
      sub_1000D94A0();
      sub_100148C30();
      sub_10014590C(v23, v24, v25, v26, v27, v28, v29, v30);
      swift_release();
      sub_10009B770();
      sub_100172168( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/HTTPEncoder.swift",  113LL,  2LL,  22LL,  (uint64_t)debugOnly(_:),  0LL);
      swift_release();
      uint64_t v31 = sub_10002A674();
      sub_10002C4B8(v31);
      uint64_t v8 = a4;
      swift_release();
      sub_10002A780(a6);
      goto LABEL_6;
    }

    sub_10002A674();
  }

  uint64_t v14 = 0LL;
LABEL_6:
  uint64_t v32 = IOData.readableBytes.getter(a3, v8, a5 & 0xFFFFFFFFFFFFFFLL);
  if ((a2 & 1) == 0)
  {
    uint64_t v112 = a3;
    unint64_t v113 = v8;
    unsigned int v114 = a5;
    sub_100148C04();
    char v117 = 0;
    sub_100033ED4(a3);
    ChannelHandlerContext.write(_:promise:)();
    sub_10001ED6C();
    sub_10002A5A4();
    uint64_t v90 = sub_10009B770();
    sub_100148BD4(v90, v91, v92, v93, v94, v95, v96, v97, v98, v101);
    return swift_release();
  }

  uint64_t v33 = v32;
  unint64_t v106 = v8;
  uint64_t v34 = sub_100094338();
  uint64_t v36 = v35;
  uint64_t v37 = swift_getObjectType(v34);
  char v38 = (uint64_t (*)(void))(*(uint64_t (**)(uint64_t, uint64_t))(v36 + 16))(v37, v36);
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  sub_10002A338();
  sub_100079D88();
  static ByteBuffer._Storage.reallocated(minimumCapacity:allocator:)(32, v38, v40, v42, v44);
  unsigned int v46 = *(_DWORD *)(v45 + 16);
  uint64_t v107 = v45;
  uint64_t v108 = 0LL;
  unsigned int v109 = v46;
  unsigned __int16 v110 = 0;
  unsigned __int8 v111 = 0;
  uint64_t v112 = v33;
  unint64_t v47 = sub_1000C88C8();
  uint64_t v48 = String.init<A>(_:radix:uppercase:)(&v112, 16LL, 0LL, &type metadata for Int, v47);
  v50 = (void *)v49;
  int v51 = sub_100078244(v48, v49, (uint64_t)&v107, 0);
  if ((v52 & 1) != 0)
  {
    v53._countAndFlagsBits = v48;
    v53._object = v50;
    int v51 = ByteBuffer._setStringSlowpath(_:at:)(v53, 0LL);
  }

  int v54 = v51;
  uint64_t result = swift_bridgeObjectRelease();
  Swift::UInt32 v58 = HIDWORD(v108) + v54;
  if (__CFADD__(HIDWORD(v108), v54))
  {
    __break(1u);
    goto LABEL_18;
  }

  HIDWORD(v108) += v54;
  uint64_t result = sub_100148BBC((uint64_t)"\r\n", v56, v57, v58);
  uint64_t v59 = (HIDWORD(v108) + result);
  if (__CFADD__(HIDWORD(v108), (_DWORD)result))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v102 = v14;
  uint64_t v60 = v107;
  unsigned int v61 = v108;
  uint64_t v62 = v109;
  uint64_t v63 = v110;
  uint64_t v64 = v111;
  uint64_t v112 = v107;
  unint64_t v113 = v108 | ((unint64_t)v59 << 32);
  char v116 = v111;
  __int16 v115 = v110;
  unsigned int v114 = v109;
  char v117 = 0;
  sub_100041B5C();
  ChannelHandlerContext.write(_:promise:)();
  sub_100148BD4(v65, v66, v67, v68, v69, v70, v71, v72, v98, v102);
  uint64_t v112 = a3;
  unint64_t v113 = v106;
  sub_100148C04();
  unsigned int v114 = a5;
  char v117 = 0;
  sub_100033ED4(a3);
  ChannelHandlerContext.write(_:promise:)();
  uint64_t result = sub_100148BD4(v73, v74, v75, v76, v77, v78, v79, v80, v99, v103);
  if (v59 < v61)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v81 = (v59 - 2);
  if (__CFADD__(v61, v59 - v61 - 2))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  if (v59 >= v81)
  {
    uint64_t v112 = v60;
    unint64_t v113 = (v59 << 32) | v81;
    unsigned int v114 = v62;
    char v116 = (v62 | (v63 << 32) | (unint64_t)(v64 << 48)) >> 48;
    __int16 v115 = (v62 | (v63 << 32) | (unint64_t)(v64 << 48)) >> 32;
    char v117 = 0;
    sub_100041B5C();
    ChannelHandlerContext.write(_:promise:)();
    swift_release();
    sub_10002A5A4();
    uint64_t v82 = sub_10001EDD8();
    sub_100148BD4(v82, v83, v84, v85, v86, v87, v88, v89, v100, v104);
    swift_release();
    return swift_release();
  }

uint64_t sub_100145EA0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if ((a2 & 1) == 0) {
    goto LABEL_18;
  }
  if (!a3)
  {
    uint64_t v45 = sub_100094338();
    uint64_t v47 = v46;
    uint64_t ObjectType = swift_getObjectType(v45);
    unint64_t v49 = (uint64_t (*)(void))(*(uint64_t (**)(uint64_t, uint64_t))(v47 + 16))(ObjectType, v47);
    uint64_t v51 = v50;
    uint64_t v53 = v52;
    uint64_t v55 = v54;
    swift_unknownObjectRelease(v45);
    type metadata accessor for ByteBuffer._Storage();
    static ByteBuffer._Storage.reallocated(minimumCapacity:allocator:)(8, v49, v51, v53, v55);
    int v57 = *(_DWORD *)(v56 + 16);
    uint64_t v61 = v56;
    uint64_t v62 = 0LL;
    int v63 = v57;
    __int16 v64 = 0;
    char v65 = 0;
    uint64_t v39 = ByteBuffer.setStaticString(_:at:)((uint64_t)"0\r\n\r\n", 5LL, 2, 0);
LABEL_22:
    uint64_t v66 = v61;
    uint64_t v67 = v62 | (unint64_t)(v39 << 32);
    char v70 = v65;
    __int16 v69 = v64;
    int v68 = v63;
    char v71 = 0;
    swift_retain();
    ChannelHandlerContext.write(_:promise:)();
    sub_1000324E8((uint64_t)&v66);
    swift_release();
    return swift_release();
  }

  uint64_t v6 = sub_100094338();
  uint64_t v8 = v7;
  uint64_t v9 = swift_getObjectType(v6);
  uint64_t v10 = (uint64_t (*)(void))(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v9, v8);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  swift_unknownObjectRelease(v6);
  type metadata accessor for ByteBuffer._Storage();
  static ByteBuffer._Storage.reallocated(minimumCapacity:allocator:)(256, v10, v12, v14, v16);
  int v18 = *(_DWORD *)(v17 + 16);
  uint64_t v61 = v17;
  LODWORD(v62) = 0;
  int v63 = v18;
  __int16 v64 = 0;
  char v65 = 0;
  Swift::UInt32 v19 = ByteBuffer.setStaticString(_:at:)((uint64_t)"0\r\n", 3LL, 2, 0);
  HIDWORD(v62) = v19;
  uint64_t v20 = *(void *)(a3 + 16);
  if (!v20)
  {
LABEL_15:
    int v38 = ByteBuffer.setStaticString(_:at:)((uint64_t)"\r\n", 2LL, 2, v19);
    uint64_t v39 = (HIDWORD(v62) + v38);
    if (!__CFADD__(HIDWORD(v62), v38)) {
      goto LABEL_22;
    }
    __break(1u);
LABEL_18:
    if (!a5) {
      return swift_release();
    }
    uint64_t v40 = sub_100094338();
    uint64_t v42 = v41;
    uint64_t v43 = swift_getObjectType(v40);
    uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v42 + 16);
    swift_retain();
    v44(v43, v42);
    swift_unknownObjectRelease(v40);
    if (qword_1002A8CC8 == -1) {
      goto LABEL_20;
    }
    goto LABEL_29;
  }

  uint64_t v59 = a5;
  uint64_t v21 = (void **)(swift_bridgeObjectRetain() + 56);
  a5 = "\r\n";
  while (1)
  {
    uint64_t v22 = (uint64_t)*(v21 - 3);
    uint64_t v23 = *(v21 - 2);
    uint64_t v24 = (uint64_t)*(v21 - 1);
    uint64_t v25 = *v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v26 = sub_100078244(v22, (unint64_t)v23, (uint64_t)&v61, v19);
    if ((v27 & 1) != 0)
    {
      v28._countAndFlagsBits = v22;
      v28._object = v23;
      int v26 = ByteBuffer._setStringSlowpath(_:at:)(v28, v19);
    }

    Swift::UInt32 v29 = HIDWORD(v62) + v26;
    if (__CFADD__(HIDWORD(v62), v26)) {
      break;
    }
    HIDWORD(v62) += v26;
    int v30 = ByteBuffer._setBytes(_:at:)((uint64_t)": ", (uint64_t)"", v29);
    Swift::Int v31 = (HIDWORD(v62) + v30);
    if (__CFADD__(HIDWORD(v62), v30)) {
      goto LABEL_26;
    }
    HIDWORD(v62) += v30;
    swift_bridgeObjectRetain();
    int v32 = sub_100078244(v24, (unint64_t)v25, (uint64_t)&v61, v31);
    char v34 = v33;
    swift_bridgeObjectRelease();
    if ((v34 & 1) != 0)
    {
      v35._countAndFlagsBits = v24;
      v35._object = v25;
      int v32 = ByteBuffer._setStringSlowpath(_:at:)(v35, v31);
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Swift::UInt32 v36 = HIDWORD(v62) + v32;
    if (__CFADD__(HIDWORD(v62), v32)) {
      goto LABEL_27;
    }
    HIDWORD(v62) += v32;
    int v37 = ByteBuffer._setBytes(_:at:)((uint64_t)"\r\n", (uint64_t)"", v36);
    Swift::UInt32 v19 = HIDWORD(v62) + v37;
    if (__CFADD__(HIDWORD(v62), v37)) {
      goto LABEL_28;
    }
    v21 += 4;
    HIDWORD(v62) += v37;
    if (!--v20)
    {
      swift_bridgeObjectRelease();
      a5 = v59;
      goto LABEL_15;
    }
  }

  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  __break(1u);
LABEL_29:
  swift_once(&qword_1002A8CC8, sub_10005B580);
LABEL_20:
  uint64_t v66 = static ByteBufferAllocator.zeroCapacityWithDefaultAllocator;
  uint64_t v67 = qword_1002EB928;
  char v70 = byte_1002EB936;
  __int16 v69 = word_1002EB934;
  int v68 = dword_1002EB930;
  char v71 = 0;
  swift_retain_n(static ByteBufferAllocator.zeroCapacityWithDefaultAllocator, 2LL);
  swift_retain();
  ChannelHandlerContext.write(_:promise:)();
  swift_release();
  swift_release_n(a5, 2LL);
  sub_1000324E8((uint64_t)&v66);
  return swift_release();
}

uint64_t sub_100146310( char a1, uint64_t *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v8 = a3;
  unsigned int v10 = HIWORD(a3);
  if (!a1)
  {
    uint64_t v14 = *(void *)(*a2 + 16);
    if (v14)
    {
      uint64_t v15 = (unint64_t *)(*a2 + 40);
      do
      {
        unint64_t v16 = *(v15 - 1);
        unint64_t v17 = *v15;
        if ((*v15 & 0x1000000000000000LL) != 0
          || ((v17 & 0x2000000000000000LL) != 0
            ? (uint64_t v19 = HIBYTE(v17) & 0xF, v54 = *(v15 - 1), v55 = v17 & 0xFFFFFFFFFFFFFFLL, v18 = &v54)
            : (v16 & 0x1000000000000000LL) == 0
            ? (int v18 = (uint64_t *)_StringObject.sharedUTF8.getter(*(v15 - 1)))
            : (uint64_t *)(v18 = (uint64_t *)((v17 & 0xFFFFFFFFFFFFFFFLL) + 32), uint64_t v19 = v16 & 0xFFFFFFFFFFFFLL),
              sub_100188130(v18, v19, 0x2D746E65746E6F63LL, 0xEE006874676E656CLL),
              (v20 & 0xFE) == 2))
        {
          char v20 = sub_100188228(0x2D746E65746E6F63uLL, 0xEE006874676E656CLL, v16, v17, a5, a6, a7, a8);
        }

        if ((v20 & 1) != 0) {
          return 1LL;
        }
        v15 += 4;
      }

      while (--v14);
    }

    uint64_t result = 2LL;
    if (v10 != 1 || !v8) {
      return result;
    }
    v47._object = (void *)0x800000010021FC10LL;
    v47._countAndFlagsBits = 0xD000000000000011LL;
    v48._countAndFlagsBits = 0x64656B6E756863LL;
    v48._object = (void *)0xE700000000000000LL;
    HTTPHeaders.replaceOrAdd(name:value:)(v47, v48);
    return 0LL;
  }

  if (a1 != 1)
  {
    uint64_t v21 = *(void *)(*a2 + 16);
    if (v21)
    {
      uint64_t v22 = (unint64_t *)(*a2 + 40);
      do
      {
        unint64_t v23 = *(v22 - 1);
        unint64_t v24 = *v22;
        if ((*v22 & 0x1000000000000000LL) != 0
          || ((v24 & 0x2000000000000000LL) != 0
            ? (uint64_t v26 = HIBYTE(v24) & 0xF, v54 = *(v22 - 1), v55 = v24 & 0xFFFFFFFFFFFFFFLL, v25 = &v54)
            : (v23 & 0x1000000000000000LL) == 0
            ? (uint64_t v25 = (uint64_t *)_StringObject.sharedUTF8.getter(*(v22 - 1)))
            : (uint64_t *)(v25 = (uint64_t *)((v24 & 0xFFFFFFFFFFFFFFFLL) + 32), uint64_t v26 = v23 & 0xFFFFFFFFFFFFLL),
              sub_100188130(v25, v26, 0x2D746E65746E6F63LL, 0xEE006874676E656CLL),
              (v27 & 0xFE) == 2))
        {
          char v27 = sub_100188228(0x2D746E65746E6F63uLL, 0xEE006874676E656CLL, v23, v24, a5, a6, a7, a8);
        }

        if ((v27 & 1) != 0) {
          return 1LL;
        }
        v22 += 4;
      }

      while (--v21);
    }

    uint64_t result = 2LL;
    if (v10 != 1 || !v8) {
      return result;
    }
    uint64_t v28 = *a2;
    uint64_t v29 = *(void *)(*a2 + 16);
    if (v29)
    {
      swift_bridgeObjectRetain_n(*a2, 2LL);
      uint64_t v53 = v28;
      char v34 = (uint64_t *)(v28 + 56);
      Swift::String v35 = _swiftEmptyArrayStorage;
      do
      {
        unint64_t v37 = *(v34 - 3);
        unint64_t v36 = *(v34 - 2);
        uint64_t v38 = *(v34 - 1);
        uint64_t v39 = *v34;
        if ((v36 & 0x1000000000000000LL) != 0
          || ((v36 & 0x2000000000000000LL) != 0
            ? (v41 = HIBYTE(v36) & 0xF, v54 = *(v34 - 3), v55 = v36 & 0xFFFFFFFFFFFFFFLL, uint64_t v40 = &v54)
            : (v37 & 0x1000000000000000LL) == 0
            ? (uint64_t v40 = (uint64_t *)_StringObject.sharedUTF8.getter(*(v34 - 3)))
            : (uint64_t *)(uint64_t v40 = (uint64_t *)((v36 & 0xFFFFFFFFFFFFFFFLL) + 32), v41 = v37 & 0xFFFFFFFFFFFFLL),
              sub_100188130(v40, v41, 0xD000000000000011LL, 0x800000010021FC10LL),
              (v42 & 0xFE) == 2))
        {
          char v42 = sub_100188228(0xD000000000000011LL, 0x800000010021FC10LL, v37, v36, v30, v31, v32, v33);
        }

        if ((v42 & 1) != 0)
        {
          swift_bridgeObjectRetain_n(v39, 2LL);
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native(v35) & 1) == 0)
          {
            sub_10002EC18();
            Swift::String v35 = v45;
          }

          unint64_t v43 = v35[2];
          if (v43 >= v35[3] >> 1)
          {
            sub_10002EC18();
            Swift::String v35 = v46;
          }

          v35[2] = v43 + 1;
          uint64_t v44 = &v35[2 * v43];
          v44[4] = v38;
          v44[5] = v39;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }

        v34 += 4;
        --v29;
      }

      while (v29);
      swift_bridgeObjectRelease_n(v53, 2LL);
    }

    else
    {
      Swift::String v35 = _swiftEmptyArrayStorage;
    }

    if (!v35[2])
    {
      swift_bridgeObjectRelease();
      return 2LL;
    }

    uint64_t v50 = v35[4];
    uint64_t v49 = v35[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v50 != 0x64656B6E756863LL || v49 != 0xE700000000000000LL)
    {
      char v52 = _stringCompareWithSmolCheck(_:_:expecting:)(v50, v49, 0x64656B6E756863LL, 0xE700000000000000LL, 0LL);
      swift_bridgeObjectRelease();
      uint64_t result = 0LL;
      if ((v52 & 1) != 0) {
        return result;
      }
      return 2LL;
    }

    swift_bridgeObjectRelease();
    return 0LL;
  }

  uint64_t v11 = sub_10002D0E0();
  if ((v11 & 1) != 0) {
    *((_BYTE *)a2 + 8) = 2;
  }
  __chkstk_darwin(v11);
  uint64_t result = sub_100033870(a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10003251C);
  if (*(void *)(*a2 + 16) < result)
  {
    __break(1u);
  }

  else
  {
    sub_100033B48();
    uint64_t v13 = sub_10002D0E0();
    if ((v13 & 1) != 0) {
      *((_BYTE *)a2 + 8) = 2;
    }
    __chkstk_darwin(v13);
    uint64_t result = sub_100033870(a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10004BCDC);
    if (*(void *)(*a2 + 16) >= result)
    {
      sub_100033B48();
      return 2LL;
    }
  }

  __break(1u);
  return result;
}

uint64_t HTTPRequestEncoder.write(context:data:promise:)(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v6 = sub_10002D698();
  uint64_t v14 = v6;
  uint64_t v15 = v7;
  uint64_t v16 = v8;
  if (!HIBYTE(v8))
  {
    uint64_t v72 = v7;
    char v73 = v8;
    uint64_t v22 = *(void *)(v6 + 24);
    if (v22 == 11) {
      char v23 = 1;
    }
    else {
      char v23 = 2;
    }
    if (v22 == 1 || v22 == 4 || v22 == 10) {
      char v26 = 0;
    }
    else {
      char v26 = v23;
    }
    *(_BYTE *)(v3 + 16) = sub_100146310(v26, &v72, *(_DWORD *)(v14 + 48), v9, v10, v11, v12, v13) == 0;
    uint64_t v27 = v72;
    uint64_t v28 = sub_100094338();
    uint64_t v30 = v29;
    uint64_t ObjectType = swift_getObjectType(v28);
    uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t))(v30 + 16);
    sub_10009B678();
    sub_1000931C8();
    uint64_t v33 = (uint64_t (*)(void))v32(ObjectType, v30);
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    uint64_t v39 = v38;
    sub_10002A338();
    sub_100079D88();
    static ByteBuffer._Storage.reallocated(minimumCapacity:allocator:)(256, v33, v35, v37, v39);
    int v41 = *(_DWORD *)(v40 + 16);
    uint64_t v67 = v40;
    uint64_t v68 = 0LL;
    int v69 = v41;
    __int16 v70 = 0;
    char v71 = 0;
    sub_1000931C8();
    uint64_t v42 = sub_1000D94A0();
    sub_100146CD8(v42);
    sub_100024E84();
    sub_10009B770();
    uint64_t v45 = *(void *)(v27 + 16);
    if (v45)
    {
      sub_1000931C8();
      Swift::UInt32 v46 = HIDWORD(v68);
      Swift::String v47 = (void **)(v27 + 56);
      while (1)
      {
        uint64_t v48 = (uint64_t)*(v47 - 3);
        uint64_t v49 = *(v47 - 2);
        uint64_t v51 = (uint64_t)*(v47 - 1);
        uint64_t v50 = *v47;
        sub_1000931C8();
        swift_bridgeObjectRetain();
        uint64_t result = sub_100078244(v48, (unint64_t)v49, (uint64_t)&v67, v46);
        if ((v53 & 1) != 0)
        {
          v54._countAndFlagsBits = v48;
          v54._object = v49;
          uint64_t result = ByteBuffer._setStringSlowpath(_:at:)(v54, v46);
        }

        Swift::UInt32 v55 = HIDWORD(v68) + result;
        if (__CFADD__(HIDWORD(v68), (_DWORD)result)) {
          break;
        }
        HIDWORD(v68) += result;
        uint64_t result = ByteBuffer._setBytes(_:at:)((uint64_t)": ", (uint64_t)"", v55);
        Swift::Int v56 = (HIDWORD(v68) + result);
        if (__CFADD__(HIDWORD(v68), (_DWORD)result)) {
          goto LABEL_37;
        }
        HIDWORD(v68) += result;
        swift_bridgeObjectRetain();
        int v57 = sub_100078244(v51, (unint64_t)v50, (uint64_t)&v67, v56);
        char v59 = v58;
        swift_bridgeObjectRelease();
        if ((v59 & 1) != 0)
        {
          v60._countAndFlagsBits = v51;
          v60._object = v50;
          int v57 = ByteBuffer._setStringSlowpath(_:at:)(v60, v56);
        }

        swift_bridgeObjectRelease();
        uint64_t result = sub_100024E84();
        Swift::UInt32 v61 = HIDWORD(v68) + v57;
        if (__CFADD__(HIDWORD(v68), v57)) {
          goto LABEL_38;
        }
        HIDWORD(v68) += v57;
        uint64_t result = ByteBuffer._setBytes(_:at:)((uint64_t)"\r\n", (uint64_t)"", v61);
        Swift::UInt32 v46 = HIDWORD(v68) + result;
        if (__CFADD__(HIDWORD(v68), (_DWORD)result)) {
          goto LABEL_39;
        }
        v47 += 4;
        HIDWORD(v68) += result;
        if (!--v45)
        {
          sub_100024E84();
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
    }

    else
    {
      Swift::UInt32 v46 = HIDWORD(v68);
LABEL_33:
      uint64_t result = sub_100148BBC((uint64_t)"\r\n", v43, v44, v46);
      if (!__CFADD__(HIDWORD(v68), (_DWORD)result))
      {
        uint64_t v74 = v67;
        unint64_t v75 = v68 | ((unint64_t)(HIDWORD(v68) + result) << 32);
        char v78 = v71;
        __int16 v77 = v70;
        int v76 = v69;
        char v79 = 0;
        sub_100041B5C();
        ChannelHandlerContext.write(_:promise:)();
        sub_1000324E8((uint64_t)&v74);
        sub_10009B770();
        sub_10002A5A4();
        sub_100024E84();
        sub_10002A51C();
        return sub_100024E84();
      }
    }

    __break(1u);
    return result;
  }

  if (HIBYTE(v8) != 1)
  {
    char v62 = *(_BYTE *)(v3 + 16);
    sub_10009B678();
    sub_100145EA0(a1, v62, v14, v15, a3);
    uint64_t v18 = v14;
    uint64_t v19 = v15;
    uint64_t v20 = v16;
    char v21 = 2;
    return sub_100032488(v18, v19, v20, v21);
  }

  if (IOData.readableBytes.getter(v6, v7, v8 & 0xFFFFFFFFFFFFFFLL) >= 1)
  {
    char v17 = *(_BYTE *)(v3 + 16);
    sub_10009B678();
    sub_100145A64(a1, v17, v14, v15, v16 & 0xFFFFFFFFFFFFFFLL, (uint64_t)a3);
    uint64_t v18 = sub_100148BF0();
    return sub_100032488(v18, v19, v20, v21);
  }

  uint64_t v74 = v14;
  unint64_t v75 = v15;
  int v76 = v16;
  char v78 = BYTE6(v16);
  __int16 v77 = WORD2(v16);
  char v79 = 0;
  sub_100033ED4(v14);
  ChannelHandlerContext.write(_:promise:)();
  uint64_t v63 = sub_100148BF0();
  sub_100032488(v63, v64, v65, v66);
  return sub_1000324E8((uint64_t)&v74);
}

uint64_t sub_100146CD8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  int v4 = *(void **)(a1 + 24);
  sub_10005A6F0(v3, (unint64_t)v4);
  sub_100148418(v3, v4);
  sub_10005A704(v3, (unint64_t)v4);
  sub_100145880(32);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  Swift::Int v7 = *(unsigned int *)(v1 + 12);
  swift_bridgeObjectRetain();
  int v8 = sub_100078244(v6, (unint64_t)v5, v1, v7);
  if ((v9 & 1) != 0)
  {
    v10._countAndFlagsBits = v6;
    v10._object = v5;
    int v8 = ByteBuffer._setStringSlowpath(_:at:)(v10, v7);
  }

  int v11 = v8;
  uint64_t result = swift_bridgeObjectRelease();
  int v13 = *(_DWORD *)(v1 + 12);
  BOOL v14 = __CFADD__(v13, v11);
  int v15 = v13 + v11;
  if (v14)
  {
    __break(1u);
  }

  else
  {
    *(_DWORD *)(v1 + 12) = v15;
    sub_100145880(32);
    sub_100148208(*(_DWORD *)(a1 + 48));
    uint64_t result = ByteBuffer.setStaticString(_:at:)((uint64_t)"\r\n", 2LL, 2, *(_DWORD *)(v1 + 12));
    int v16 = *(_DWORD *)(v1 + 12);
    BOOL v14 = __CFADD__(v16, (_DWORD)result);
    int v17 = v16 + result;
    if (!v14)
    {
      *(_DWORD *)(v1 + 12) = v17;
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t HTTPResponseEncoder.write(context:data:promise:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = v4;
  sub_1000175B0(&qword_1002AA1A0);
  uint64_t v8 = sub_10002D850();
  int v16 = (const char *)v8;
  int v17 = (char *)v9;
  uint64_t v18 = v10;
  if (!HIBYTE(v10))
  {
    uint64_t v142 = (uint64_t)a3;
    v143 = (char *)v9;
    LOBYTE(v144) = v10;
    unint64_t v24 = *(void *)(v8 + 32);
    if (v24 < 0x3C)
    {
      char v25 = byte_100204A36[v24];
LABEL_25:
      *(_BYTE *)(v5 + 16) = sub_100146310( v25,  (uint64_t *)&v143,  *((_DWORD *)v16 + 10),  v11,  v12,  v13,  v14,  v15) == 0;
      int v17 = v143;
      uint64_t v141 = (uint64_t)a1;
      uint64_t v57 = sub_100148BDC();
      uint64_t v58 = sub_10009B6F0(v57);
      char v59 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 16);
      uint64_t v137 = v5;
      sub_10009B678();
      sub_1000931C8();
      Swift::String v60 = (uint64_t (*)(void))v59(v58, v3);
      a3 = v61;
      uint64_t v63 = v62;
      uint64_t v18 = v64;
      sub_10002A338();
      sub_100079D88();
      static ByteBuffer._Storage.reallocated(minimumCapacity:allocator:)(256, v60, (uint64_t)a3, v63, v18);
      sub_100148BA4();
      sub_1000931C8();
      uint64_t v65 = sub_1000D94A0();
      sub_10014745C(v65);
      sub_100024E84();
      sub_10009B770();
      uint64_t v68 = *((void *)v17 + 2);
      if (!v68)
      {
        Swift::UInt32 v69 = v147;
LABEL_41:
        uint64_t v93 = sub_100148BBC((uint64_t)"\r\n", v66, v67, v69);
        if (!__CFADD__(v147, (_DWORD)v93))
        {
          sub_100148B4C( v93,  v94,  v95,  v96,  v97,  v98,  v99,  v100,  v125,  v128,  v131,  v134,  v137,  v141,  v142,  (uint64_t)v143,  v144,  v145,  v146);
          sub_100148C44();
          sub_100148C50(v101, v102, v103, v104, v105, v106, v107, v108, v126, v129, v132, v135, v138);
          sub_10009B770();
          sub_10002A51C();
          sub_100024E84();
          sub_10001EDD8();
          return sub_100024E84();
        }

        goto LABEL_56;
      }

      uint64_t v134 = (uint64_t)v16;
      sub_1000931C8();
      Swift::UInt32 v69 = v147;
      uint64_t v131 = (uint64_t)v17;
      uint64_t v18 = (uint64_t)(v17 + 56);
      int v16 = "\r\n";
      while (1)
      {
        uint64_t v70 = *(void *)(v18 - 24);
        int v17 = *(char **)(v18 - 16);
        uint64_t v71 = *(void *)(v18 - 8);
        a3 = *(void **)v18;
        sub_1000931C8();
        sub_10003574C();
        int v72 = sub_100078244(v70, (unint64_t)v17, (uint64_t)&v146, v69);
        if ((v73 & 1) != 0)
        {
          v74._countAndFlagsBits = v70;
          v74._object = v17;
          int v72 = ByteBuffer._setStringSlowpath(_:at:)(v74, v69);
        }

        Swift::UInt32 v75 = v147 + v72;
        if (__CFADD__(v147, v72)) {
          break;
        }
        v147 += v72;
        int v76 = sub_100148C18((uint64_t)": ", v73, v75);
        Swift::Int v77 = v147 + v76;
        if (__CFADD__(v147, v76)) {
          goto LABEL_49;
        }
        v147 += v76;
        sub_10003574C();
        int v78 = sub_100078244(v71, (unint64_t)a3, (uint64_t)&v146, v77);
        char v80 = v79;
        sub_10003561C();
        if ((v80 & 1) != 0)
        {
          v81._countAndFlagsBits = v71;
          v81._object = a3;
          int v78 = ByteBuffer._setStringSlowpath(_:at:)(v81, v77);
        }

        sub_10003561C();
        sub_100024E84();
        Swift::UInt32 v82 = v147 + v78;
        if (__CFADD__(v147, v78)) {
          goto LABEL_50;
        }
        v147 += v78;
        int v83 = ByteBuffer._setBytes(_:at:)((uint64_t)"\r\n", (uint64_t)"", v82);
        Swift::UInt32 v69 = v147 + v83;
        if (__CFADD__(v147, v83)) {
          goto LABEL_51;
        }
        v18 += 32LL;
        v147 += v83;
        if (!--v68)
        {
          int v17 = (char *)v131;
          sub_100024E84();
          int v16 = (const char *)v134;
          goto LABEL_41;
        }
      }

      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }

void sub_10014745C(uint64_t a1)
{
  unsigned int v2 = HTTPResponseHead.version.getter(a1);
  uint64_t v3 = HTTPVersion.major.getter(v2);
  uint64_t v4 = HTTPResponseHead.version.getter(a1);
  unint64_t v5 = HTTPVersion.minor.getter(v4);
  uint64_t v6 = HTTPResponseHead.status.getter();
  unint64_t v9 = v8;
  switch(v8)
  {
    case 0uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 100 Continue\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 100 Continue\r\n";
      }

      goto LABEL_282;
    case 1uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 101 Switching Protocols\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 101 Switching Protocols\r\n";
      }

      goto LABEL_313;
    case 2uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 102 Processing\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 102 Processing\r\n";
      }

      goto LABEL_254;
    case 3uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 200 OK\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 200 OK\r\n";
      }

      uint64_t v11 = 17LL;
      goto LABEL_244;
    case 4uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 201 Created\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 201 Created\r\n";
      }

      goto LABEL_260;
    case 5uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 202 Accepted\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 202 Accepted\r\n";
      }

      goto LABEL_282;
    case 6uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 203 Non-Authoritative Information\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 203 Non-Authoritative Information\r\n";
      }

      goto LABEL_306;
    case 7uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 204 No Content\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 204 No Content\r\n";
      }

LABEL_254:
      uint64_t v11 = 25LL;
      goto LABEL_244;
    case 8uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 205 Reset Content\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 205 Reset Content\r\n";
      }

      goto LABEL_323;
    case 9uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 206 Partial Content\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 206 Partial Content\r\n";
      }

      goto LABEL_315;
    case 0xAuLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 207 Multi-Status\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 207 Multi-Status\r\n";
      }

      goto LABEL_325;
    case 0xBuLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 208 Already Reported\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 208 Already Reported\r\n";
      }

      goto LABEL_300;
    case 0xCuLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 226 IM Used\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 226 IM Used\r\n";
      }

LABEL_260:
      uint64_t v11 = 22LL;
      goto LABEL_244;
    case 0xDuLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 300 Multiple Choices\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 300 Multiple Choices\r\n";
      }

      goto LABEL_300;
    case 0xEuLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 301 Moved Permanently\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 301 Moved Permanently\r\n";
      }

      goto LABEL_303;
    case 0xFuLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 302 Found\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 302 Found\r\n";
      }

      uint64_t v11 = 20LL;
      goto LABEL_244;
    case 0x10uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 303 See Other\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 303 See Other\r\n";
      }

      goto LABEL_275;
    case 0x11uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 304 Not Modified\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 304 Not Modified\r\n";
      }

      goto LABEL_325;
    case 0x12uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 305 Use Proxy\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 305 Use Proxy\r\n";
      }

      goto LABEL_275;
    case 0x13uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 307 Tempory Redirect\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 307 Tempory Redirect\r\n";
      }

      goto LABEL_300;
    case 0x14uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 308 Permanent Redirect\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 308 Permanent Redirect\r\n";
      }

      goto LABEL_293;
    case 0x15uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 400 Bad Request\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 400 Bad Request\r\n";
      }

      goto LABEL_311;
    case 0x16uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 401 Unauthorized\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 401 Unauthorized\r\n";
      }

      goto LABEL_325;
    case 0x17uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 402 Payment Required\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 402 Payment Required\r\n";
      }

      goto LABEL_300;
    case 0x18uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 403 Forbidden\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 403 Forbidden\r\n";
      }

      goto LABEL_275;
    case 0x19uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 404 Not Found\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 404 Not Found\r\n";
      }

LABEL_275:
      uint64_t v11 = 24LL;
      goto LABEL_244;
    case 0x1AuLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 405 Method Not Allowed\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 405 Method Not Allowed\r\n";
      }

      goto LABEL_293;
    case 0x1BuLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 406 Not Acceptable\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 406 Not Acceptable\r\n";
      }

      uint64_t v11 = 29LL;
      goto LABEL_244;
    case 0x1CuLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 407 Proxy Authentication Required\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 407 Proxy Authentication Required\r\n";
      }

      goto LABEL_306;
    case 0x1DuLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 408 Request Timeout\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 408 Request Timeout\r\n";
      }

      goto LABEL_315;
    case 0x1EuLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 409 Conflict\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 409 Conflict\r\n";
      }

LABEL_282:
      uint64_t v11 = 23LL;
      goto LABEL_244;
    case 0x1FuLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 410 Gone\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 410 Gone\r\n";
      }

      uint64_t v11 = 19LL;
      goto LABEL_244;
    case 0x20uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 411 Length Required\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 411 Length Required\r\n";
      }

      goto LABEL_315;
    case 0x21uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 412 Precondition Failed\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 412 Precondition Failed\r\n";
      }

      goto LABEL_313;
    case 0x22uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 413 Payload Too Large\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 413 Payload Too Large\r\n";
      }

      goto LABEL_303;
    case 0x23uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 414 URI Too Long\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 414 URI Too Long\r\n";
      }

      goto LABEL_325;
    case 0x24uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 415 Unsupported Media Type\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 415 Unsupported Media Type\r\n";
      }

      uint64_t v11 = 37LL;
      goto LABEL_244;
    case 0x25uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 416 Request Range Not Satisified\r\n";
        uint64_t v11 = 43LL;
        goto LABEL_244;
      }

      if (v5) {
        goto LABEL_243;
      }
      unint64_t v10 = "HTTP/1.0 416 Range Not Satisfiable\r\n";
      goto LABEL_308;
    case 0x26uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 417 Expectation Failed\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 417 Expectation Failed\r\n";
      }

LABEL_293:
      uint64_t v11 = 33LL;
      goto LABEL_244;
    case 0x27uLL:
      goto LABEL_243;
    case 0x28uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 421 Misdirected Request\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 421 Misdirected Request\r\n";
      }

      goto LABEL_313;
    case 0x29uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 422 Unprocessable Entity\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 422 Unprocessable Entity\r\n";
      }

      goto LABEL_321;
    case 0x2AuLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 423 Locked\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 423 Locked\r\n";
      }

      uint64_t v11 = 21LL;
      goto LABEL_244;
    case 0x2BuLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 424 Failed Dependency\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 424 Failed Dependency\r\n";
      }

      goto LABEL_303;
    case 0x2CuLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 426 Upgrade Required\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 426 Upgrade Required\r\n";
      }

LABEL_300:
      uint64_t v11 = 31LL;
      goto LABEL_244;
    case 0x2DuLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 428 Precondition Required\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 428 Precondition Required\r\n";
      }

      goto LABEL_308;
    case 0x2EuLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 429 Too Many Requests\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 429 Too Many Requests\r\n";
      }

LABEL_303:
      uint64_t v11 = 32LL;
      goto LABEL_244;
    case 0x2FuLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 431 Range Not Satisfiable\r\n";
        goto LABEL_308;
      }

      if (v5) {
        goto LABEL_243;
      }
      unint64_t v10 = "HTTP/1.0 431 Request Header Fields Too Large\r\n";
LABEL_237:
      uint64_t v11 = 46LL;
      goto LABEL_244;
    case 0x30uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 451 Unavailable For Legal Reasons\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 451 Unavailable For Legal Reasons\r\n";
      }

LABEL_306:
      uint64_t v11 = 44LL;
      goto LABEL_244;
    case 0x31uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 500 Internal Server Error\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 500 Internal Server Error\r\n";
      }

LABEL_308:
      uint64_t v11 = 36LL;
      goto LABEL_244;
    case 0x32uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 501 Not Implemented\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 501 Not Implemented\r\n";
      }

      goto LABEL_315;
    case 0x33uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 502 Bad Gateway\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 502 Bad Gateway\r\n";
      }

LABEL_311:
      uint64_t v11 = 26LL;
      goto LABEL_244;
    case 0x34uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 503 Service Unavailable\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 503 Service Unavailable\r\n";
      }

LABEL_313:
      uint64_t v11 = 34LL;
      goto LABEL_244;
    case 0x35uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 504 Gateway Timeout\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 504 Gateway Timeout\r\n";
      }

LABEL_315:
      uint64_t v11 = 30LL;
      goto LABEL_244;
    case 0x36uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 505 HTTP Version Not Supported\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 505 HTTP Version Not Supported\r\n";
      }

      uint64_t v11 = 41LL;
      goto LABEL_244;
    case 0x37uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 506 Variant Also Negotiates\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 506 Variant Also Negotiates\r\n";
      }

      uint64_t v11 = 38LL;
      goto LABEL_244;
    case 0x38uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 507 Insufficient Storage\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 507 Insufficient Storage\r\n";
      }

LABEL_321:
      uint64_t v11 = 35LL;
      goto LABEL_244;
    case 0x39uLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 508 Loop Detected\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 508 Loop Detected\r\n";
      }

LABEL_323:
      uint64_t v11 = 28LL;
      goto LABEL_244;
    case 0x3AuLL:
      if (v3 != 1) {
        goto LABEL_243;
      }
      if (v5 == 1)
      {
        unint64_t v10 = "HTTP/1.1 510 Not Extended\r\n";
      }

      else
      {
        if (v5) {
          goto LABEL_243;
        }
        unint64_t v10 = "HTTP/1.0 510 Not Extended\r\n";
      }

LABEL_325:
      uint64_t v11 = 27LL;
      goto LABEL_244;
    case 0x3BuLL:
      if (v3 != 1 || v5 > 1) {
        goto LABEL_243;
      }
      unint64_t v10 = "HTTP/1.1 511 Network Authentication Required\r\n";
      goto LABEL_237;
    default:
      uint64_t v12 = v6;
      uint64_t v13 = v7;
      if (v3 != 1) {
        goto LABEL_242;
      }
      if (v5 == 1)
      {
        uint64_t v14 = "HTTP/1.1 ";
        goto LABEL_327;
      }

      if (!v5)
      {
        uint64_t v14 = "HTTP/1.0 ";
LABEL_327:
        ByteBuffer.writeStaticString(_:)((uint64_t)v14, 9LL, 2);
        uint64_t v21 = HTTPResponseHead.status.getter();
        uint64_t v23 = v22;
        unint64_t v25 = v24;
        sub_100148088(v21, v22, v24);
        sub_1001483F4(v21, v23, v25);
        ByteBuffer.writeStaticString(_:)((uint64_t)"\r\n", 2LL, 2);
        sub_1001483F4(v12, v13, v9);
        return;
      }

LABEL_242:
      sub_1001483F4(v6, v7, v8);
LABEL_243:
      unsigned int v15 = HTTPResponseHead.version.getter(a1);
      sub_100148208(v15);
      sub_1001481FC();
      uint64_t v16 = HTTPResponseHead.status.getter();
      uint64_t v18 = v17;
      unint64_t v20 = v19;
      sub_100148088(v16, v17, v19);
      sub_1001483F4(v16, v18, v20);
      unint64_t v10 = "\r\n";
      uint64_t v11 = 2LL;
LABEL_244:
      ByteBuffer.writeStaticString(_:)((uint64_t)v10, v11, 2);
      return;
  }

uint64_t sub_100148088(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  HTTPResponseStatus.code.getter(a1, a2, a3);
  uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  unint64_t v10 = (void *)v9;
  Swift::Int v11 = *(unsigned int *)(v3 + 12);
  int v12 = sub_100078244(v8, v9, v4, *(_DWORD *)(v4 + 12));
  if ((v13 & 1) != 0)
  {
    v14._countAndFlagsBits = v8;
    v14._object = v10;
    int v12 = ByteBuffer._setStringSlowpath(_:at:)(v14, v11);
  }

  int v15 = v12;
  uint64_t result = swift_bridgeObjectRelease();
  int v17 = *(_DWORD *)(v4 + 12);
  BOOL v18 = __CFADD__(v17, v15);
  int v19 = v17 + v15;
  if (v18)
  {
    __break(1u);
  }

  else
  {
    *(_DWORD *)(v4 + 12) = v19;
    sub_100145880(32);
    HTTPResponseStatus.reasonPhrase.getter(a1, a2, a3);
    uint64_t v21 = v20;
    uint64_t v23 = (void *)v22;
    Swift::Int v24 = *(unsigned int *)(v4 + 12);
    int v25 = sub_100078244(v20, v22, v4, *(_DWORD *)(v4 + 12));
    if ((v26 & 1) != 0)
    {
      v27._countAndFlagsBits = v21;
      v27._object = v23;
      int v25 = ByteBuffer._setStringSlowpath(_:at:)(v27, v24);
    }

    int v28 = v25;
    uint64_t result = swift_bridgeObjectRelease();
    int v29 = *(_DWORD *)(v4 + 12);
    BOOL v18 = __CFADD__(v29, v28);
    int v30 = v29 + v28;
    if (!v18)
    {
      *(_DWORD *)(v4 + 12) = v30;
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t type metadata accessor for HTTPRequestEncoder()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService18HTTPRequestEncoder);
}

uint64_t type metadata accessor for HTTPResponseEncoder()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService19HTTPResponseEncoder);
}

uint64_t sub_1001481FC()
{
  return sub_100145880(32);
}

uint64_t sub_100148208(unsigned int a1)
{
  uint64_t v2 = v1;
  unsigned int v3 = HIWORD(a1);
  if ((unsigned __int16)a1 == 1)
  {
    if (v3 == 1) {
      goto LABEL_17;
    }
    if (!v3)
    {
      uint64_t v4 = (_DWORD *)(v1 + 12);
      uint64_t result = ByteBuffer.setStaticString(_:at:)((uint64_t)"HTTP/1.0", 8LL, 2, *(_DWORD *)(v1 + 12));
      int v6 = *(_DWORD *)(v1 + 12) + result;
      if (!__CFADD__(*(_DWORD *)(v1 + 12), (_DWORD)result)) {
        goto LABEL_18;
      }
      __break(1u);
    }
  }

  uint64_t v4 = (_DWORD *)(v1 + 12);
  uint64_t result = ByteBuffer.setStaticString(_:at:)((uint64_t)"HTTP/", 5LL, 2, *(_DWORD *)(v1 + 12));
  Swift::Int v7 = (*(_DWORD *)(v1 + 12) + result);
  if (__CFADD__(*(_DWORD *)(v1 + 12), (_DWORD)result))
  {
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  *(_DWORD *)(v1 + 12) = v7;
  uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  unint64_t v10 = (void *)v9;
  int v11 = sub_100078244(v8, v9, v1, v7);
  if ((v12 & 1) != 0)
  {
    v13._countAndFlagsBits = v8;
    v13._object = v10;
    int v11 = ByteBuffer._setStringSlowpath(_:at:)(v13, v7);
  }

  int v14 = v11;
  uint64_t result = swift_bridgeObjectRelease();
  Swift::UInt32 v15 = *v4 + v14;
  if (__CFADD__(*v4, v14)) {
    goto LABEL_20;
  }
  *(_DWORD *)(v2 + 12) = v15;
  uint64_t result = ByteBuffer.setStaticString(_:at:)((uint64_t)".", 1LL, 2, v15);
  int v16 = *(_DWORD *)(v2 + 12);
  Swift::Int v17 = (v16 + result);
  if (__CFADD__(v16, (_DWORD)result))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  *(_DWORD *)(v2 + 12) = v17;
  uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  uint64_t v20 = (void *)v19;
  int v21 = sub_100078244(v18, v19, v2, v17);
  if ((v22 & 1) != 0)
  {
    v23._countAndFlagsBits = v18;
    v23._object = v20;
    int v21 = ByteBuffer._setStringSlowpath(_:at:)(v23, v17);
  }

  int v24 = v21;
  uint64_t result = swift_bridgeObjectRelease();
  int v6 = *v4 + v24;
  if (!__CFADD__(*v4, v24)) {
    goto LABEL_18;
  }
  __break(1u);
LABEL_17:
  uint64_t v4 = (_DWORD *)(v2 + 12);
  uint64_t result = ByteBuffer.setStaticString(_:at:)((uint64_t)"HTTP/1.1", 8LL, 2, *(_DWORD *)(v2 + 12));
  int v6 = *(_DWORD *)(v2 + 12) + result;
  if (!__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
  {
LABEL_18:
    *uint64_t v4 = v6;
    return result;
  }

uint64_t sub_1001483F4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >= 0x3C) {
    return swift_bridgeObjectRelease(a3);
  }
  return result;
}

uint64_t sub_100148408()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_100148418(uint64_t result, void *a2)
{
  switch((unint64_t)a2)
  {
    case 0uLL:
      uint64_t v4 = (_DWORD *)(v2 + 12);
      uint64_t result = ByteBuffer.setStaticString(_:at:)((uint64_t)"GET", 3LL, 2, *(_DWORD *)(v2 + 12));
      int v5 = *(_DWORD *)(v2 + 12) + result;
      if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
      {
        __break(1u);
        goto LABEL_5;
      }

      goto LABEL_107;
    case 1uLL:
      goto LABEL_10;
    case 2uLL:
      goto LABEL_13;
    case 3uLL:
      goto LABEL_16;
    case 4uLL:
      goto LABEL_19;
    case 5uLL:
      goto LABEL_22;
    case 6uLL:
      goto LABEL_25;
    case 7uLL:
      goto LABEL_28;
    case 8uLL:
      goto LABEL_31;
    case 9uLL:
      goto LABEL_34;
    case 0xAuLL:
      goto LABEL_37;
    case 0xBuLL:
      goto LABEL_40;
    case 0xCuLL:
      goto LABEL_43;
    case 0xDuLL:
      goto LABEL_46;
    case 0xEuLL:
      goto LABEL_49;
    case 0xFuLL:
      goto LABEL_52;
    case 0x10uLL:
      goto LABEL_55;
    case 0x11uLL:
      goto LABEL_58;
    case 0x12uLL:
      goto LABEL_61;
    case 0x13uLL:
      goto LABEL_64;
    case 0x14uLL:
      goto LABEL_67;
    case 0x15uLL:
      goto LABEL_70;
    case 0x16uLL:
      goto LABEL_73;
    case 0x17uLL:
      goto LABEL_76;
    case 0x18uLL:
      goto LABEL_79;
    case 0x19uLL:
      goto LABEL_82;
    case 0x1AuLL:
      goto LABEL_85;
    case 0x1BuLL:
      goto LABEL_88;
    case 0x1CuLL:
      goto LABEL_91;
    case 0x1DuLL:
      goto LABEL_94;
    case 0x1EuLL:
      goto LABEL_97;
    case 0x1FuLL:
      goto LABEL_100;
    case 0x20uLL:
      goto LABEL_103;
    case 0x21uLL:
      goto LABEL_106;
    default:
LABEL_5:
      uint64_t v6 = result;
      uint64_t v4 = (_DWORD *)(v2 + 12);
      Swift::Int v7 = *(unsigned int *)(v2 + 12);
      swift_bridgeObjectRetain();
      int v8 = sub_100078244(v6, (unint64_t)a2, v2, v7);
      char v10 = v9;
      uint64_t result = sub_10005A704(v6, (unint64_t)a2);
      if ((v10 & 1) != 0)
      {
        v11._countAndFlagsBits = v6;
        v11._object = a2;
        uint64_t result = ByteBuffer._setStringSlowpath(_:at:)(v11, v7);
        int v8 = result;
      }

      int v5 = *v4 + v8;
      if (!__CFADD__(*v4, v8)) {
        goto LABEL_107;
      }
      __break(1u);
LABEL_10:
      uint64_t v4 = (_DWORD *)(v2 + 12);
      uint64_t result = ByteBuffer.setStaticString(_:at:)((uint64_t)"PUT", 3LL, 2, *(_DWORD *)(v2 + 12));
      int v5 = *(_DWORD *)(v2 + 12) + result;
      if (!__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result)) {
        goto LABEL_107;
      }
      __break(1u);
LABEL_13:
      uint64_t v4 = (_DWORD *)(v2 + 12);
      uint64_t result = ByteBuffer.setStaticString(_:at:)((uint64_t)"ACL", 3LL, 2, *(_DWORD *)(v2 + 12));
      int v5 = *(_DWORD *)(v2 + 12) + result;
      if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
      {
        __break(1u);
LABEL_16:
        uint64_t v4 = (_DWORD *)(v2 + 12);
        uint64_t result = ByteBuffer.setStaticString(_:at:)((uint64_t)"HEAD", 4LL, 2, *(_DWORD *)(v2 + 12));
        int v5 = *(_DWORD *)(v2 + 12) + result;
        if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
        {
          __break(1u);
LABEL_19:
          uint64_t v4 = (_DWORD *)(v2 + 12);
          uint64_t result = ByteBuffer.setStaticString(_:at:)((uint64_t)"POST", 4LL, 2, *(_DWORD *)(v2 + 12));
          int v5 = *(_DWORD *)(v2 + 12) + result;
          if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
          {
            __break(1u);
LABEL_22:
            uint64_t v4 = (_DWORD *)(v2 + 12);
            uint64_t result = ByteBuffer.setStaticString(_:at:)((uint64_t)"COPY", 4LL, 2, *(_DWORD *)(v2 + 12));
            int v5 = *(_DWORD *)(v2 + 12) + result;
            if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
            {
              __break(1u);
LABEL_25:
              uint64_t v4 = (_DWORD *)(v2 + 12);
              uint64_t result = ByteBuffer.setStaticString(_:at:)((uint64_t)"LOCK", 4LL, 2, *(_DWORD *)(v2 + 12));
              int v5 = *(_DWORD *)(v2 + 12) + result;
              if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
              {
                __break(1u);
LABEL_28:
                uint64_t v4 = (_DWORD *)(v2 + 12);
                uint64_t result = ByteBuffer.setStaticString(_:at:)((uint64_t)"MOVE", 4LL, 2, *(_DWORD *)(v2 + 12));
                int v5 = *(_DWORD *)(v2 + 12) + result;
                if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
                {
                  __break(1u);
LABEL_31:
                  uint64_t v4 = (_DWORD *)(v2 + 12);
                  uint64_t result = ByteBuffer.setStaticString(_:at:)((uint64_t)"BIND", 4LL, 2, *(_DWORD *)(v2 + 12));
                  int v5 = *(_DWORD *)(v2 + 12) + result;
                  if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
                  {
                    __break(1u);
LABEL_34:
                    uint64_t v4 = (_DWORD *)(v2 + 12);
                    uint64_t result = ByteBuffer.setStaticString(_:at:)((uint64_t)"LINK", 4LL, 2, *(_DWORD *)(v2 + 12));
                    int v5 = *(_DWORD *)(v2 + 12) + result;
                    if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
                    {
                      __break(1u);
LABEL_37:
                      uint64_t v4 = (_DWORD *)(v2 + 12);
                      uint64_t result = ByteBuffer.setStaticString(_:at:)((uint64_t)"PATCH", 5LL, 2, *(_DWORD *)(v2 + 12));
                      int v5 = *(_DWORD *)(v2 + 12) + result;
                      if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
                      {
                        __break(1u);
LABEL_40:
                        uint64_t v4 = (_DWORD *)(v2 + 12);
                        uint64_t result = ByteBuffer.setStaticString(_:at:)((uint64_t)"TRACE", 5LL, 2, *(_DWORD *)(v2 + 12));
                        int v5 = *(_DWORD *)(v2 + 12) + result;
                        if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
                        {
                          __break(1u);
LABEL_43:
                          uint64_t v4 = (_DWORD *)(v2 + 12);
                          uint64_t result = ByteBuffer.setStaticString(_:at:)((uint64_t)"MKCOL", 5LL, 2, *(_DWORD *)(v2 + 12));
                          int v5 = *(_DWORD *)(v2 + 12) + result;
                          if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
                          {
                            __break(1u);
LABEL_46:
                            uint64_t v4 = (_DWORD *)(v2 + 12);
                            uint64_t result = ByteBuffer.setStaticString(_:at:)((uint64_t)"MERGE", 5LL, 2, *(_DWORD *)(v2 + 12));
                            int v5 = *(_DWORD *)(v2 + 12) + result;
                            if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
                            {
                              __break(1u);
LABEL_49:
                              uint64_t v4 = (_DWORD *)(v2 + 12);
                              uint64_t result = ByteBuffer.setStaticString(_:at:)((uint64_t)"PURGE", 5LL, 2, *(_DWORD *)(v2 + 12));
                              int v5 = *(_DWORD *)(v2 + 12) + result;
                              if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
                              {
                                __break(1u);
LABEL_52:
                                uint64_t v4 = (_DWORD *)(v2 + 12);
                                uint64_t result = ByteBuffer.setStaticString(_:at:)( (uint64_t)"NOTIFY",  6LL,  2,  *(_DWORD *)(v2 + 12));
                                int v5 = *(_DWORD *)(v2 + 12) + result;
                                if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
                                {
                                  __break(1u);
LABEL_55:
                                  uint64_t v4 = (_DWORD *)(v2 + 12);
                                  uint64_t result = ByteBuffer.setStaticString(_:at:)( (uint64_t)"SEARCH",  6LL,  2,  *(_DWORD *)(v2 + 12));
                                  int v5 = *(_DWORD *)(v2 + 12) + result;
                                  if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
                                  {
                                    __break(1u);
LABEL_58:
                                    uint64_t v4 = (_DWORD *)(v2 + 12);
                                    uint64_t result = ByteBuffer.setStaticString(_:at:)( (uint64_t)"UNLOCK",  6LL,  2,  *(_DWORD *)(v2 + 12));
                                    int v5 = *(_DWORD *)(v2 + 12) + result;
                                    if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
                                    {
                                      __break(1u);
LABEL_61:
                                      uint64_t v4 = (_DWORD *)(v2 + 12);
                                      uint64_t result = ByteBuffer.setStaticString(_:at:)( (uint64_t)"REBIND",  6LL,  2,  *(_DWORD *)(v2 + 12));
                                      int v5 = *(_DWORD *)(v2 + 12) + result;
                                      if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
                                      {
                                        __break(1u);
LABEL_64:
                                        uint64_t v4 = (_DWORD *)(v2 + 12);
                                        uint64_t result = ByteBuffer.setStaticString(_:at:)( (uint64_t)"UNBIND",  6LL,  2,  *(_DWORD *)(v2 + 12));
                                        int v5 = *(_DWORD *)(v2 + 12) + result;
                                        if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
                                        {
                                          __break(1u);
LABEL_67:
                                          uint64_t v4 = (_DWORD *)(v2 + 12);
                                          uint64_t result = ByteBuffer.setStaticString(_:at:)( (uint64_t)"REPORT",  6LL,  2,  *(_DWORD *)(v2 + 12));
                                          int v5 = *(_DWORD *)(v2 + 12) + result;
                                          if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
                                          {
                                            __break(1u);
LABEL_70:
                                            uint64_t v4 = (_DWORD *)(v2 + 12);
                                            uint64_t result = ByteBuffer.setStaticString(_:at:)( (uint64_t)"DELETE",  6LL,  2,  *(_DWORD *)(v2 + 12));
                                            int v5 = *(_DWORD *)(v2 + 12) + result;
                                            if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
                                            {
                                              __break(1u);
LABEL_73:
                                              uint64_t v4 = (_DWORD *)(v2 + 12);
                                              uint64_t result = ByteBuffer.setStaticString(_:at:)( (uint64_t)"UNLINK",  6LL,  2,  *(_DWORD *)(v2 + 12));
                                              int v5 = *(_DWORD *)(v2 + 12) + result;
                                              if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
                                              {
                                                __break(1u);
LABEL_76:
                                                uint64_t v4 = (_DWORD *)(v2 + 12);
                                                uint64_t result = ByteBuffer.setStaticString(_:at:)( (uint64_t)"CONNECT",  7LL,  2,  *(_DWORD *)(v2 + 12));
                                                int v5 = *(_DWORD *)(v2 + 12) + result;
                                                if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
                                                {
                                                  __break(1u);
LABEL_79:
                                                  uint64_t v4 = (_DWORD *)(v2 + 12);
                                                  uint64_t result = ByteBuffer.setStaticString(_:at:)( (uint64_t)"MSEARCH",  7LL,  2,  *(_DWORD *)(v2 + 12));
                                                  int v5 = *(_DWORD *)(v2 + 12) + result;
                                                  if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
                                                  {
                                                    __break(1u);
LABEL_82:
                                                    uint64_t v4 = (_DWORD *)(v2 + 12);
                                                    uint64_t result = ByteBuffer.setStaticString(_:at:)( (uint64_t)"OPTIONS",  7LL,  2,  *(_DWORD *)(v2 + 12));
                                                    int v5 = *(_DWORD *)(v2 + 12) + result;
                                                    if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
                                                    {
                                                      __break(1u);
LABEL_85:
                                                      uint64_t v4 = (_DWORD *)(v2 + 12);
                                                      uint64_t result = ByteBuffer.setStaticString(_:at:)( (uint64_t)"PROPFIND",  8LL,  2,  *(_DWORD *)(v2 + 12));
                                                      int v5 = *(_DWORD *)(v2 + 12) + result;
                                                      if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
                                                      {
                                                        __break(1u);
LABEL_88:
                                                        uint64_t v4 = (_DWORD *)(v2 + 12);
                                                        uint64_t result = ByteBuffer.setStaticString(_:at:)( (uint64_t)"CHECKOUT",  8LL,  2,  *(_DWORD *)(v2 + 12));
                                                        int v5 = *(_DWORD *)(v2 + 12) + result;
                                                        if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
                                                        {
                                                          __break(1u);
LABEL_91:
                                                          uint64_t v4 = (_DWORD *)(v2 + 12);
                                                          uint64_t result = ByteBuffer.setStaticString(_:at:)( (uint64_t)"PROPPATCH",  9LL,  2,  *(_DWORD *)(v2 + 12));
                                                          int v5 = *(_DWORD *)(v2 + 12) + result;
                                                          if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
                                                          {
                                                            __break(1u);
LABEL_94:
                                                            uint64_t v4 = (_DWORD *)(v2 + 12);
                                                            uint64_t result = ByteBuffer.setStaticString(_:at:)( (uint64_t)"SUBSCRIBE",  9LL,  2,  *(_DWORD *)(v2 + 12));
                                                            int v5 = *(_DWORD *)(v2 + 12) + result;
                                                            if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
                                                            {
                                                              __break(1u);
LABEL_97:
                                                              uint64_t v4 = (_DWORD *)(v2 + 12);
                                                              uint64_t result = ByteBuffer.setStaticString(_:at:)( (uint64_t)"MKCALENDAR",  10LL,  2,  *(_DWORD *)(v2 + 12));
                                                              int v5 = *(_DWORD *)(v2 + 12) + result;
                                                              if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
                                                              {
                                                                __break(1u);
LABEL_100:
                                                                uint64_t v4 = (_DWORD *)(v2 + 12);
                                                                uint64_t result = ByteBuffer.setStaticString(_:at:)( (uint64_t)"MKACTIVITY",  10LL,  2,  *(_DWORD *)(v2 + 12));
                                                                int v5 = *(_DWORD *)(v2 + 12) + result;
                                                                if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
                                                                {
                                                                  __break(1u);
LABEL_103:
                                                                  uint64_t v4 = (_DWORD *)(v2 + 12);
                                                                  uint64_t result = ByteBuffer.setStaticString(_:at:)( (uint64_t)"UNSUBSCRIBE",  11LL,  2,  *(_DWORD *)(v2 + 12));
                                                                  int v5 = *(_DWORD *)(v2 + 12) + result;
                                                                  if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
                                                                  {
                                                                    __break(1u);
LABEL_106:
                                                                    uint64_t v4 = (_DWORD *)(v2 + 12);
                                                                    uint64_t result = ByteBuffer.setStaticString(_:at:)( (uint64_t)"SOURCE",  6LL,  2,  *(_DWORD *)(v2 + 12));
                                                                    int v5 = *(_DWORD *)(v2 + 12) + result;
                                                                    if (__CFADD__(*(_DWORD *)(v2 + 12), (_DWORD)result))
                                                                    {
                                                                      __break(1u);
                                                                      JUMPOUT(0x100148AB8LL);
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

LABEL_107:
      *uint64_t v4 = v5;
      return result;
  }

  *(void *)((v119 & 0xFFFFFFFFFFFFF8LL) + 0x10) = 0LL;
  specialized Array._endMutation()(v100);
  swift_bridgeObjectRelease();
}

uint64_t sub_100148B4C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return swift_retain(a19);
}

uint64_t sub_100148B80()
{
  return EventLoop.makePromise<A>(of:file:line:)(v2, v0, 113LL, 2LL, 21LL, v1, v2, v3);
}

  ;
}

uint64_t sub_100148BBC(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt32 a4)
{
  return ByteBuffer.setStaticString(_:at:)(a1, 2LL, 2, a4);
}

uint64_t sub_100148BC8(uint64_t a1)
{
  return swift_allocObject(a1, 17LL, 7LL);
}

uint64_t sub_100148BD4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  return sub_1000324E8((uint64_t)va);
}

uint64_t sub_100148BDC()
{
  return sub_100094338();
}

uint64_t sub_100148BE4()
{
  return v2(v1, v0);
}

uint64_t sub_100148BF0()
{
  return v0;
}

  ;
}

uint64_t sub_100148C18(uint64_t a1, uint64_t a2, Swift::UInt32 a3)
{
  return ByteBuffer._setBytes(_:at:)(a1, a1 + 2, a3);
}

uint64_t sub_100148C24(uint64_t a1, uint64_t a2)
{
  return ByteBuffer.setStaticString(_:at:)(a1, a2, 2, 0);
}

  ;
}

void sub_100148C44()
{
}

uint64_t sub_100148C50( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  return sub_1000324E8((uint64_t)va);
}

ValueMetadata *type metadata accessor for InAppRegrantPurchaseHistoryRequest()
{
  return &type metadata for InAppRegrantPurchaseHistoryRequest;
}

unint64_t sub_100148C68(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100273638, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5) {
    return 5LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_100148CB4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100148CE0 + 4 * byte_100204A80[a1]))( 6580578LL,  0xE300000000000000LL);
}

uint64_t sub_100148CE0()
{
  return 1936881250LL;
}

uint64_t sub_100148CF0()
{
  return 1684632935LL;
}

uint64_t sub_100148D00()
{
  return 0x6E4F707041534F69LL;
}

uint64_t sub_100148D20(uint64_t a1)
{
  return a1 + 20;
}

uint64_t sub_100148D28(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100148D54 + 4 * byte_100204A85[a1]))( 6580578LL,  0xE300000000000000LL);
}

uint64_t sub_100148D54()
{
  return 1936881250LL;
}

uint64_t sub_100148D64()
{
  return 1684632935LL;
}

uint64_t sub_100148D74()
{
  return 0x6E4F707041534F69LL;
}

uint64_t sub_100148D94(uint64_t a1)
{
  return a1 + 20;
}

uint64_t sub_100148D9C(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_1000175B0(&qword_1002B5E28);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100019F58(a1, v9);
  unint64_t v11 = sub_1001492E8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for InAppRegrantPurchaseHistoryRequest.CodingKeys,  &type metadata for InAppRegrantPurchaseHistoryRequest.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v28 = 0;
  sub_100023EB4(v12, v13, (uint64_t)&v28);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    char v27 = 1;
    sub_100023EB4(v14, v15, (uint64_t)&v27);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    char v26 = 2;
    sub_100044D1C(v16, v17, (uint64_t)&v26);
    uint64_t v18 = v3[6];
    uint64_t v19 = v3[7];
    char v25 = 3;
    sub_100044D1C(v18, v19, (uint64_t)&v25);
    uint64_t v20 = v3[8];
    uint64_t v21 = v3[9];
    char v24 = 4;
    sub_100044D1C(v20, v21, (uint64_t)&v24);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100148EEC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_1000175B0(&qword_1002B5E18);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100019F58(a1, v9);
  unint64_t v11 = sub_1001492E8();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for InAppRegrantPurchaseHistoryRequest.CodingKeys,  &type metadata for InAppRegrantPurchaseHistoryRequest.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_10001DC08();
  }
  char v40 = 0;
  uint64_t v12 = sub_1001494DC((uint64_t)&v40);
  uint64_t v14 = v13;
  uint64_t v34 = v12;
  char v39 = 1;
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1001494DC((uint64_t)&v39);
  uint64_t v35 = v16;
  uint64_t v31 = v15;
  char v38 = 2;
  sub_1001494C0(v15, v16);
  uint64_t v33 = 0LL;
  uint64_t v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v38, v5);
  char v37 = 3;
  sub_1001494C0(v30, v17);
  uint64_t v18 = sub_1001494CC((uint64_t)&v37);
  uint64_t v32 = 0LL;
  uint64_t v29 = v18;
  char v36 = 4;
  sub_1001494C0(v18, v19);
  uint64_t v20 = sub_1001494CC((uint64_t)&v36);
  uint64_t v22 = v21;
  uint64_t v23 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v24 = v20;
  v23(v8, v5);
  swift_bridgeObjectRetain();
  sub_10001DC08();
  swift_bridgeObjectRelease();
  sub_10001A420();
  uint64_t v25 = v32;
  swift_bridgeObjectRelease();
  uint64_t v26 = v35;
  swift_bridgeObjectRelease();
  uint64_t result = sub_10003561C();
  *a2 = v34;
  a2[1] = v14;
  a2[2] = v31;
  a2[3] = v26;
  a2[4] = v30;
  a2[5] = v25;
  a2[6] = v29;
  a2[7] = 0LL;
  a2[8] = v24;
  a2[9] = v22;
  return result;
}

uint64_t sub_100149198(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000D36CC(*a1, *a2);
}

void sub_1001491A4()
{
}

uint64_t sub_1001491AC(uint64_t a1)
{
  return sub_1000B1220(a1, *v1);
}

void sub_1001491B4(uint64_t a1)
{
}

unint64_t sub_1001491BC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100148C68(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001491E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100148CB4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100149210()
{
  return sub_100148D28(*v0);
}

uint64_t sub_100149218@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100148CB0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10014923C(uint64_t a1)
{
  unint64_t v2 = sub_1001492E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100149264(uint64_t a1)
{
  unint64_t v2 = sub_1001492E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10014928C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (void *)sub_100148EEC(a1, v5);
  if (!v2) {
    return memcpy(a2, v5, 0x50uLL);
  }
  return result;
}

uint64_t sub_1001492D4(void *a1)
{
  return sub_100148D9C(a1);
}

unint64_t sub_1001492E8()
{
  unint64_t result = qword_1002B5E20;
  if (!qword_1002B5E20)
  {
    unint64_t result = swift_getWitnessTable(byte_100204C40, &type metadata for InAppRegrantPurchaseHistoryRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B5E20);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for InAppRegrantPurchaseHistoryRequest.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_100149370 + 4 * byte_100204A8F[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001493A4 + 4 * byte_100204A8A[v4]))();
}

uint64_t sub_1001493A4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001493AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001493B4LL);
  }
  return result;
}

uint64_t sub_1001493C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001493C8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1001493CC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001493D4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InAppRegrantPurchaseHistoryRequest.CodingKeys()
{
  return &type metadata for InAppRegrantPurchaseHistoryRequest.CodingKeys;
}

unint64_t sub_1001493F4()
{
  unint64_t result = qword_1002B5E30;
  if (!qword_1002B5E30)
  {
    unint64_t result = swift_getWitnessTable(byte_100204C18, &type metadata for InAppRegrantPurchaseHistoryRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B5E30);
  }

  return result;
}

unint64_t sub_100149434()
{
  unint64_t result = qword_1002B5E38;
  if (!qword_1002B5E38)
  {
    unint64_t result = swift_getWitnessTable("9V\b", &type metadata for InAppRegrantPurchaseHistoryRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B5E38);
  }

  return result;
}

unint64_t sub_100149474()
{
  unint64_t result = qword_1002B5E40[0];
  if (!qword_1002B5E40[0])
  {
    unint64_t result = swift_getWitnessTable("!V\b", &type metadata for InAppRegrantPurchaseHistoryRequest.CodingKeys);
    atomic_store(result, qword_1002B5E40);
  }

  return result;
}

uint64_t sub_1001494B0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_1001494C0(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_1001494CC(uint64_t a1)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, v1);
}

uint64_t sub_1001494DC(uint64_t a1)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t sub_1001494EC(uint64_t a1)
{
  v5[0] = "H";
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v5[1] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for P256.Signing.PrivateKey(319LL);
    if (v4 <= 0x3F)
    {
      v5[2] = *(void *)(result - 8) + 64LL;
      v5[3] = &unk_100204D08;
      v5[4] = &unk_100204D20;
      swift_initStructMetadata(a1, 0LL, 5LL, v5, a1 + 32);
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_100149594(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(v11 + 64) + 7LL;
  int v16 = (v12 | v7) & 0x100000;
  if ((v13 | (unint64_t)v7) > 7 || v16 != 0 || v15 > 0x18)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19
                   + (((v13 | v7) & 0xF8 ^ 0x1F8) & ((v13 | v7) + 16)));
    swift_retain(v19);
  }

  else
  {
    uint64_t v40 = ~v13;
    uint64_t v41 = v10;
    uint64_t v20 = a2[1];
    *a1 = *a2;
    a1[1] = v20;
    uint64_t v21 = a2[3];
    a1[2] = a2[2];
    a1[3] = v21;
    uint64_t v22 = a2[5];
    a1[4] = a2[4];
    a1[5] = v22;
    uint64_t v38 = v9;
    uint64_t v39 = v5;
    uint64_t v24 = a2[6];
    uint64_t v23 = a2[7];
    a1[6] = v24;
    a1[7] = v23;
    uint64_t v25 = a2[8];
    uint64_t v26 = (char *)a2 + v8;
    a1[8] = v25;
    uint64_t v27 = ((unint64_t)a1 + v8 + 72) & ~v8;
    uint64_t v37 = (unint64_t)(v26 + 72) & ~v8;
    uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    uint64_t v29 = v14;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    v28(v27, v37, v39);
    uint64_t v30 = v38 + v13;
    uint64_t v31 = (v27 + v38 + v13) & ~v13;
    uint64_t v32 = (v37 + v30) & v40;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v31, v32, v41);
    unint64_t v33 = (v29 + v31) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v34 = (v29 + v32) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v35 = *(void *)v34;
    *(_BYTE *)(v33 + 8) = *(_BYTE *)(v34 + 8);
    *(void *)unint64_t v33 = v35;
    *(_BYTE *)(v33 + 9) = *(_BYTE *)(v34 + 9);
  }

  return a1;
}

uint64_t sub_100149758(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8LL);
  unint64_t v5 = ((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))( (v5 + v6 + *(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL),  v7);
}

void *sub_1001497F4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v8 = a2[6];
  uint64_t v7 = a2[7];
  a1[6] = v8;
  a1[7] = v7;
  uint64_t v9 = a2[8];
  a1[8] = v9;
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = ((unint64_t)a1 + v12 + 72) & ~v12;
  uint64_t v14 = ((unint64_t)a2 + v12 + 72) & ~v12;
  unint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  v15(v13, v14, v10);
  uint64_t v16 = *(void *)(v11 + 64);
  uint64_t v17 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v20 = v16 + v19;
  uint64_t v21 = (v16 + v19 + v13) & ~v19;
  uint64_t v22 = (v20 + v14) & ~v19;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v21, v22, v17);
  uint64_t v23 = *(void *)(v18 + 64) + 7LL;
  unint64_t v24 = (v23 + v21) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v25 = (v23 + v22) & 0xFFFFFFFFFFFFFFF8LL;
  char v26 = *(_BYTE *)(v25 + 8);
  *(void *)unint64_t v24 = *(void *)v25;
  *(_BYTE *)(v24 + 8) = v26;
  *(_BYTE *)(v24 + 9) = *(_BYTE *)(v25 + 9);
  return a1;
}

void *sub_100149920(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a1[6];
  uint64_t v13 = a2[6];
  a1[6] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v12);
  a1[7] = a2[7];
  uint64_t v14 = a2[8];
  uint64_t v15 = a1[8];
  a1[8] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = ((unint64_t)a1 + v17 + 72) & ~v17;
  uint64_t v19 = ((unint64_t)a2 + v17 + 72) & ~v17;
  (*(void (**)(uint64_t, uint64_t))(v16 + 24))(v18, v19);
  uint64_t v20 = *(void *)(v16 + 64);
  uint64_t v21 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v24 = (v20 + v23 + v18) & ~v23;
  uint64_t v25 = (v20 + v23 + v19) & ~v23;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 24))(v24, v25, v21);
  uint64_t v26 = *(void *)(v22 + 64) + 7LL;
  unint64_t v27 = (v26 + v24) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v28 = (v26 + v25) & 0xFFFFFFFFFFFFFFF8LL;
  char v29 = *(_BYTE *)(v28 + 8);
  *(void *)unint64_t v27 = *(void *)v28;
  *(_BYTE *)(v27 + 8) = v29;
  *(_BYTE *)(v27 + 9) = *(_BYTE *)(v28 + 9);
  return a1;
}

void *sub_100149A8C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 72) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 72) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 64);
  uint64_t v11 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = (v10 + v13 + v8) & ~v13;
  uint64_t v15 = (v10 + v13 + v9) & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v14, v15, v11);
  uint64_t v16 = *(void *)(v12 + 64) + 7LL;
  unint64_t v17 = (v16 + v14) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v18 = (v16 + v15) & 0xFFFFFFFFFFFFFFF8LL;
  char v19 = *(_BYTE *)(v18 + 8);
  *(void *)unint64_t v17 = *(void *)v18;
  *(_BYTE *)(v17 + 8) = v19;
  *(_BYTE *)(v17 + 9) = *(_BYTE *)(v18 + 9);
  return a1;
}

void *sub_100149B68(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[5];
  uint64_t v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a1[6];
  a1[6] = a2[6];
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = a2[8];
  uint64_t v14 = a1[8];
  a1[7] = a2[7];
  a1[8] = v13;
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = ((unint64_t)a1 + v16 + 72) & ~v16;
  uint64_t v18 = ((unint64_t)a2 + v16 + 72) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v15 + 40))(v17, v18);
  uint64_t v19 = *(void *)(v15 + 64);
  uint64_t v20 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v23 = (v19 + v22 + v17) & ~v22;
  uint64_t v24 = (v19 + v22 + v18) & ~v22;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 40))(v23, v24, v20);
  uint64_t v25 = *(void *)(v21 + 64) + 7LL;
  unint64_t v26 = (v25 + v23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v27 = (v25 + v24) & 0xFFFFFFFFFFFFFFF8LL;
  char v28 = *(_BYTE *)(v27 + 8);
  *(void *)unint64_t v26 = *(void *)v27;
  *(_BYTE *)(v26 + 8) = v28;
  *(_BYTE *)(v26 + 9) = *(_BYTE *)(v27 + 9);
  return a1;
}

uint64_t sub_100149C8C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  else {
    unsigned int v11 = v7;
  }
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = v11;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v13 = v8;
  uint64_t v14 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v15 = *(void *)(v6 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  if (v12 < a2)
  {
    unint64_t v17 = ((*(void *)(v9 + 64) + ((v15 + v16 + ((v14 + 72) & ~v14)) & ~v16) + 7) & 0xFFFFFFFFFFFFFFF8LL) + 10;
    else {
      unsigned int v18 = 2;
    }
    if (v18 >= 0x10000) {
      unsigned int v19 = 4;
    }
    else {
      unsigned int v19 = 2;
    }
    if (v18 < 0x100) {
      unsigned int v19 = 1;
    }
    if (v18 >= 2) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0LL;
    }
    __asm { BR              X17 }
  }

  if ((v11 & 0x80000000) != 0)
  {
    uint64_t v23 = (a1 + v14 + 72) & ~v14;
    if ((_DWORD)v7 == v12)
    {
      uint64_t v10 = v7;
      uint64_t v13 = v5;
    }

    else
    {
      uint64_t v23 = (v23 + v15 + v16) & ~v16;
    }

    return sub_10001D158(v23, v10, v13);
  }

  else
  {
    unint64_t v22 = *(void *)(a1 + 8);
    if (v22 >= 0xFFFFFFFF) {
      LODWORD(v22) = -1;
    }
    return (v22 + 1);
  }

void sub_100149E3C(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(type metadata accessor for P256.Signing.PrivateKey(0LL) - 8);
  if (v8 <= *(_DWORD *)(v9 + 84)) {
    unsigned int v10 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v10 = v8;
  }
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = v10;
  }
  size_t v12 = ((*(void *)(v9 + 64)
        + ((*(void *)(v7 + 64)
          + *(unsigned __int8 *)(v9 + 80)
          + ((*(unsigned __int8 *)(v7 + 80) + 72LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
        + 7) & 0xFFFFFFFFFFFFFFF8LL)
      + 10;
  if (v11 >= a3)
  {
    int v15 = 0;
  }

  else
  {
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
  }

  if (v11 < a2)
  {
    int v16 = ~v11 + a2;
    bzero(a1, v12);
    else {
      *(_WORD *)a1 = v16;
    }
    __asm { BR              X11 }
  }

  __asm { BR              X17 }

void sub_100149F98(char a1@<W8>)
{
  *(_BYTE *)(v1 + v2) = a1;
  JUMPOUT(0x10014A018LL);
}

void sub_100149FA0()
{
  *(_DWORD *)(v0 + v2) = 0;
  if (v1) {
    JUMPOUT(0x100149FA8LL);
  }
  JUMPOUT(0x10014A018LL);
}

void sub_100149FBC(__int16 a1@<W8>)
{
  *(_WORD *)(v1 + v2) = a1;
  JUMPOUT(0x10014A018LL);
}

void sub_100149FC4(int a1@<W8>)
{
  *(_DWORD *)(v1 + v2) = a1;
  JUMPOUT(0x10014A018LL);
}

void sub_100149FCC()
{
  *(_WORD *)(v1 + v3) = 0;
  if (v2)
  {
    if (v0 < 0) {
      JUMPOUT(0x100149FD8LL);
    }
    if (v2 < 0) {
      JUMPOUT(0x100149FFCLL);
    }
    *(void *)(v1 + 8) = (v2 - 1);
  }

  JUMPOUT(0x10014A018LL);
}

uint64_t type metadata accessor for JWS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for JWS);
}

void sub_10014A060()
{
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v94 = v5;
  uint64_t v93 = type metadata accessor for P256.Signing.ECDSASignature(0LL);
  uint64_t v92 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  sub_1000227D0();
  uint64_t v98 = v6;
  uint64_t v7 = type metadata accessor for String.Encoding(0LL);
  uint64_t v100 = *(void **)(v7 - 8);
  unint64_t v101 = v7;
  __chkstk_darwin(v7);
  sub_1000227D0();
  uint64_t v99 = v8;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v96 = *(void *)(v9 - 8);
  uint64_t v97 = v9;
  __chkstk_darwin(v9);
  sub_1000227D0();
  uint64_t v95 = v10;
  uint64_t v11 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  int v14 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for JSONEncoder(0LL);
  uint64_t v16 = swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  uint64_t v17 = JSONEncoder.init()(v16);
  if (qword_1002A8CB0 != -1) {
    swift_once(&qword_1002A8CB0, sub_100043DB4);
  }
  uint64_t v18 = sub_100018F68(v11, (uint64_t)qword_1002EB900);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v18, v11);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v14);
  unsigned int v19 = *(void **)(v2 + 8);
  uint64_t v20 = *(void *)(v2 + 16);
  uint64_t v21 = *(void *)(v2 + 24);
  uint64_t v22 = *(void *)(v2 + 32);
  uint64_t v23 = *(void *)(v2 + 40);
  uint64_t v24 = *(void *)(v2 + 64);
  v108._uint64_t countAndFlagsBits = *(void *)v2;
  v108._object = v19;
  uint64_t v109 = v20;
  uint64_t v110 = v21;
  uint64_t v111 = v22;
  uint64_t v112 = v23;
  __int128 v113 = *(_OWORD *)(v2 + 48);
  uint64_t v114 = v24;
  uint64_t v25 = v17;
  uint64_t v103 = v4;
  uint64_t v26 = *(void *)(v4 + 16);
  uint64_t v27 = *(void *)(v4 + 24);
  unint64_t v102 = v26;
  uint64_t v29 = type metadata accessor for JWS.Header(0LL, v26, v27, v28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_getWitnessTable(byte_100205018, v29);
  uint64_t v30 = sub_10014BD2C();
  if (v1)
  {
    swift_release();
    sub_10003561C();
    swift_bridgeObjectRelease();
    sub_100023EEC();
    swift_bridgeObjectRelease();
    sub_10001A420();
  }

  else
  {
    uint64_t v91 = v27;
    uint64_t v90 = v30;
    unint64_t v32 = v31;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100023EEC();
    swift_bridgeObjectRelease();
    sub_10001A420();
    unint64_t v33 = v32;
    Swift::String v108 = Data.base64EncodedString(options:)(0LL);
    uint64_t v106 = 43LL;
    unint64_t v107 = 0xE100000000000000LL;
    uint64_t v104 = 45LL;
    unint64_t v105 = 0xE100000000000000LL;
    unint64_t v34 = sub_10001B4A0();
    uint64_t v35 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v106,  &v104,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String);
    uint64_t v37 = v36;
    sub_10003561C();
    v108._uint64_t countAndFlagsBits = v35;
    v108._object = v37;
    uint64_t v106 = 47LL;
    unint64_t v107 = 0xE100000000000000LL;
    uint64_t v104 = 95LL;
    unint64_t v105 = 0xE100000000000000LL;
    uint64_t v38 = sub_10014BC64();
    uint64_t v40 = v39;
    sub_10001A420();
    v108._uint64_t countAndFlagsBits = v38;
    v108._object = v40;
    uint64_t v106 = 61LL;
    unint64_t v107 = 0xE100000000000000LL;
    uint64_t v104 = 0LL;
    unint64_t v105 = 0xE000000000000000LL;
    uint64_t v41 = sub_10014BC64();
    int v43 = v42;
    sub_10003561C();
    sub_10003A9EC(v90, v33);
    uint64_t v44 = sub_10014BD2C();
    unint64_t v46 = v45;
    uint64_t v90 = v41;
    uint64_t v89 = v43;
    unint64_t v102 = v25;
    Swift::String v47 = Data.base64EncodedString(options:)(0LL);
    Swift::String v108 = v47;
    uint64_t v106 = 43LL;
    unint64_t v107 = 0xE100000000000000LL;
    uint64_t v104 = 45LL;
    unint64_t v105 = 0xE100000000000000LL;
    uint64_t v48 = sub_10014BC64();
    uint64_t v50 = v49;
    sub_10001A420();
    v108._uint64_t countAndFlagsBits = v48;
    v108._object = v50;
    uint64_t v106 = 47LL;
    unint64_t v107 = 0xE100000000000000LL;
    uint64_t v104 = 95LL;
    unint64_t v105 = 0xE100000000000000LL;
    sub_10014BC64();
    sub_10014BCD4();
    v108._uint64_t countAndFlagsBits = v48;
    v108._object = v47._object;
    uint64_t v106 = 61LL;
    unint64_t v107 = 0xE100000000000000LL;
    uint64_t v104 = 0LL;
    unint64_t v105 = 0xE000000000000000LL;
    uint64_t v88 = sub_10014BC64();
    uint64_t v52 = v51;
    sub_10001A420();
    uint64_t v53 = sub_10003A9EC(v44, v46);
    uint64_t v54 = v2 + *(int *)(v103 + 44);
    char v55 = *(_BYTE *)(v54 + 8);
    uint64_t v91 = (uint64_t)v52;
    if ((v55 & 1) != 0 || *(void *)v54 != 21LL)
    {
      v108._uint64_t countAndFlagsBits = v90;
      v108._object = v89;
      swift_bridgeObjectRetain();
      v62._uint64_t countAndFlagsBits = 46LL;
      v62._object = (void *)0xE100000000000000LL;
      String.append(_:)(v62);
      swift_bridgeObjectRetain();
      v63._uint64_t countAndFlagsBits = v88;
      v63._object = v52;
      String.append(_:)(v63);
      uint64_t v61 = swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = v108._countAndFlagsBits;
      object = v108._object;
    }

    else
    {
      uint64_t v56 = v95;
      uint64_t v57 = UUID.init()(v53);
      uint64_t countAndFlagsBits = UUID.uuidString.getter(v57);
      object = v59;
      uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v96 + 8))(v56, v97);
    }

    uint64_t v64 = v99;
    static String.Encoding.utf8.getter(v61);
    uint64_t v65 = String.data(using:allowLossyConversion:)(v64, 0LL, countAndFlagsBits, object);
    unint64_t v67 = v66;
    Swift::UInt32 v69 = v100;
    unint64_t v68 = v101;
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, unint64_t))v69[1])(v64, v68);
    if (v67 >> 60 == 15)
    {
      sub_10014BD20();
      swift_bridgeObjectRelease();
      unint64_t v70 = sub_1000EC838();
      uint64_t v71 = swift_allocError(&type metadata for JWSError, v70, 0LL, 0LL);
      swift_willThrow(v71);
      sub_10014BD18();
    }

    else
    {
      v108._uint64_t countAndFlagsBits = v65;
      v108._object = (void *)v67;
      sub_10003AA88(v65, v67);
      unint64_t v72 = sub_1000EC874();
      uint64_t v73 = P256.Signing.PrivateKey.signature<A>(for:)(&v108, &type metadata for Data, v72);
      uint64_t v74 = P256.Signing.ECDSASignature.rawRepresentation.getter(v73);
      unint64_t v76 = v75;
      Swift::String v77 = Data.base64EncodedString(options:)(0LL);
      Swift::String v108 = v77;
      uint64_t v106 = 43LL;
      unint64_t v107 = 0xE100000000000000LL;
      uint64_t v104 = 45LL;
      unint64_t v105 = 0xE100000000000000LL;
      unint64_t v102 = v34;
      uint64_t v103 = v34;
      uint64_t v100 = &type metadata for String;
      unint64_t v101 = v34;
      uint64_t v78 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v106,  &v104,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String);
      char v80 = v79;
      sub_10001A420();
      v108._uint64_t countAndFlagsBits = v78;
      v108._object = v80;
      uint64_t v106 = 47LL;
      unint64_t v107 = 0xE100000000000000LL;
      uint64_t v104 = 95LL;
      unint64_t v105 = 0xE100000000000000LL;
      sub_10014BC64();
      sub_10014BCD4();
      v108._uint64_t countAndFlagsBits = v78;
      v108._object = v77._object;
      uint64_t v106 = 61LL;
      unint64_t v107 = 0xE100000000000000LL;
      uint64_t v104 = 0LL;
      unint64_t v105 = 0xE000000000000000LL;
      uint64_t v81 = sub_10014BC64();
      uint64_t v83 = v82;
      sub_10001A420();
      sub_10003A9EC(v74, v76);
      uint64_t v84 = v103;
      sub_10014BCFC(v103);
      sub_10014BD18();
      sub_10014BCFC(v84);
      (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v98, v93);
      uint64_t v85 = v94;
      uint64_t v86 = v89;
      *uint64_t v94 = v90;
      v85[1] = v86;
      uint64_t v87 = v91;
      v85[2] = v88;
      v85[3] = v87;
      v85[4] = v81;
      v85[5] = v83;
    }
  }

  sub_10001DAB8();
}

void sub_10014A7A4()
{
}

void sub_10014A7C4(uint64_t a1)
{
  char v1 = a1;
  sub_100060600(a1);
  Hasher._combine(_:)(v1 & 1);
  Hasher._finalize()();
  sub_1000354B8();
}

void sub_10014A7FC()
{
}

Swift::Int sub_10014A804()
{
  return Hasher._finalize()();
}

unint64_t sub_10014A840(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002736D0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5) {
    return 5LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10014A88C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10014A8B8 + 4 * byte_100204C9F[a1]))( 6777953LL,  0xE300000000000000LL);
}

uint64_t sub_10014A8B8()
{
  return 6580587LL;
}

uint64_t sub_10014A8C4()
{
  return 7371124LL;
}

uint64_t sub_10014A8D0()
{
  return 6501752LL;
}

uint64_t sub_10014A8DC()
{
  return 0x676E696666757473LL;
}

void sub_10014A8F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  uint64_t v46 = v21;
  uint64_t v25 = v20;
  uint64_t v27 = v26;
  uint64_t v30 = type metadata accessor for JWS.Header.CodingKeys(255LL, *(void *)(v28 + 16), *(void *)(v28 + 24), v29);
  uint64_t WitnessTable = swift_getWitnessTable(byte_100205190, v30);
  uint64_t v32 = type metadata accessor for KeyedEncodingContainer(0LL, v30, WitnessTable);
  sub_10014BD04();
  __chkstk_darwin(v33);
  uint64_t v35 = (char *)&v45 - v34;
  uint64_t v36 = v27[3];
  uint64_t v37 = v27[4];
  sub_100019F58(v27, v36);
  dispatch thunk of Encoder.container<A>(keyedBy:)(v30, v30, WitnessTable, v36, v37);
  uint64_t v38 = *v25;
  uint64_t v39 = v25[1];
  char v48 = 0;
  uint64_t v40 = v46;
  KeyedEncodingContainer.encode(_:forKey:)(v38, v39, &v48, v32);
  if (!v40)
  {
    sub_10014BCBC(v25[2], v25[3], 1);
    sub_10014BCBC(v25[4], v25[5], 2);
    sub_10014BB30((uint64_t)(v25 + 6), (uint64_t)&a10);
    sub_10014BB30((uint64_t)&a10, (uint64_t)&v48);
    char v47 = 3;
    uint64_t v41 = sub_1000175B0(&qword_1002A93B8);
    uint64_t v42 = sub_100115DDC( (unint64_t *)&qword_1002A93C0,  (uint64_t)&protocol witness table for String,  (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v48, &v47, v32, v41, v42);
    uint64_t v43 = v25[7];
    uint64_t v44 = v25[8];
    char v48 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v43, v44, &v48, v32);
  }

  (*(void (**)(char *, uint64_t))(v22 + 8))(v35, v32);
  sub_10001DAB8();
}

void sub_10014AAAC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v26;
  a24 = v27;
  uint64_t v29 = v28;
  uint64_t v56 = v30;
  uint64_t v33 = type metadata accessor for JWS.Header.CodingKeys(255LL, v31, v32, v27);
  uint64_t WitnessTable = swift_getWitnessTable(byte_100205190, v33);
  uint64_t v35 = type metadata accessor for KeyedDecodingContainer(0LL, v33, WitnessTable);
  sub_10014BD04();
  __chkstk_darwin(v36);
  uint64_t v38 = (char *)&v54 - v37;
  uint64_t v39 = v29[3];
  uint64_t v40 = v29[4];
  sub_100019F58(v29, v39);
  dispatch thunk of Decoder.container<A>(keyedBy:)(v33, v33, WitnessTable, v39, v40);
  if (v24)
  {
    sub_10001A400();
    swift_bridgeObjectRelease();
    sub_10014BCE8();
  }

  else
  {
    uint64_t v41 = v25;
    uint64_t v42 = v56;
    a14 = 0;
    uint64_t v43 = KeyedDecodingContainer.decode(_:forKey:)(&a14, v35);
    uint64_t v45 = v44;
    uint64_t v55 = v43;
    uint64_t v46 = sub_1000175B0(&qword_1002A93B8);
    a13 = 3;
    uint64_t v47 = sub_100115DDC( &qword_1002A93E0,  (uint64_t)&protocol witness table for String,  (const char *)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v46, &a13, v35, v46, v47);
    a12 = 4;
    uint64_t v54 = v57;
    swift_bridgeObjectRetain();
    uint64_t v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&a12, v35);
    uint64_t v50 = v49;
    uint64_t v51 = *(void (**)(char *, uint64_t))(v41 + 8);
    uint64_t v52 = v48;
    v51(v38, v35);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10001A400();
    sub_10001EDA0();
    uint64_t v53 = v54;
    sub_100023EEC();
    swift_bridgeObjectRelease();
    sub_10014BCE8();
    sub_10001A420();
    uint64_t *v42 = v55;
    v42[1] = v45;
    v42[2] = 0x63585F656C707041LL;
    v42[3] = 0xEF79654B5F65646FLL;
    v42[4] = 5527370LL;
    v42[5] = 0xE300000000000000LL;
    v42[6] = v53;
    v42[7] = v52;
    v42[8] = v50;
  }

  sub_10001DAB8();
}

uint64_t sub_10014AD34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable("QT\b", a3);
  return == infix<A>(_:_:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_10014AD88(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable("QT\b", a1);
  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, &protocol witness table for String);
}

uint64_t sub_10014ADD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable("QT\b");
  return RawRepresentable<>.hash(into:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_10014AE24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable("QT\b");
  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

unint64_t sub_10014AE74@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v3 = (void *)a1[1];
  v5._uint64_t countAndFlagsBits = *a1;
  v5._object = v3;
  unint64_t result = sub_10014A840(v5);
  *a2 = result;
  return result;
}

void sub_10014AEA8(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_10014AEB4(uint64_t a1)
{
  return sub_10014A8F4(*v1, *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t sub_10014AEC0@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10014A888(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10014AEEC(uint64_t a1, uint64_t a2)
{
  return sub_10014B2C8( a1,  a2,  (uint64_t (*)(void, void, void))j___s25ASOctaneSupportXPCService20MarkedCircularBufferV18_markedIndexOffsetSiSgvpfi);
}

uint64_t sub_10014AEF8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = static NIOHTTPObjectAggregatorError.unexpectedMessageEnd.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10014AF24(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(byte_100205190, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_10014AF58(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(byte_100205190, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

void sub_10014AF8C( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>)
{
  if (!v8) {
    memcpy(a8, __src, 0x48uLL);
  }
}

void sub_10014AFDC(uint64_t a1, uint64_t a2)
{
}

unint64_t sub_10014B034(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100273768, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10014B080(char a1)
{
  if (!a1) {
    return 0x65746365746F7270LL;
  }
  if (a1 == 1) {
    return 0x64616F6C796170LL;
  }
  return 0x727574616E676973LL;
}

uint64_t sub_10014B0D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable("qV\b", a3);
  return == infix<A>(_:_:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_10014B12C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable("qV\b", a1);
  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, &protocol witness table for String);
}

uint64_t sub_10014B178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable("qV\b");
  return RawRepresentable<>.hash(into:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_10014B1C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable("qV\b");
  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

unint64_t sub_10014B218@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v3 = (void *)a1[1];
  v5._uint64_t countAndFlagsBits = *a1;
  v5._object = v3;
  unint64_t result = sub_10014B034(v5);
  *a2 = result;
  return result;
}

void sub_10014B24C(uint64_t a1@<X0>, void *a2@<X8>)
{
}

void sub_10014B258(uint64_t a1@<X0>, uint64_t (*a2)(void, void, void)@<X2>, void *a3@<X8>)
{
  *a3 = a2(*v3, *(void *)(a1 + 16), *(void *)(a1 + 24));
  a3[1] = v5;
  sub_10001945C();
}

uint64_t sub_10014B284()
{
  return sub_10014B080(*v0);
}

uint64_t sub_10014B290@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10014B07C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10014B2BC(uint64_t a1, uint64_t a2)
{
  return sub_10014B2C8( a1,  a2,  (uint64_t (*)(void, void, void))variable initialization expression of MarkedCircularBuffer._markedIndexOffset);
}

uint64_t sub_10014B2C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void))
{
  return a3(*v3, *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t sub_10014B2EC(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable("IU\b", a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_10014B320(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable("IU\b", a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

void sub_10014B354()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = type metadata accessor for JWS.CodingKeys(255LL, *(void *)(v2 + 16), *(void *)(v2 + 24), v6);
  uint64_t WitnessTable = swift_getWitnessTable("IU\b", v7);
  uint64_t v9 = type metadata accessor for KeyedEncodingContainer(0LL, v7, WitnessTable);
  __chkstk_darwin(v9);
  sub_10014A060();
  if (!v1)
  {
    uint64_t v39 = v34[1];
    if ((*(_BYTE *)(v0 + *(int *)(v3 + 48)) & 1) != 0)
    {
      uint64_t v30 = v37;
      uint64_t v31 = v35;
      uint64_t v10 = v5[3];
      uint64_t v32 = v5[4];
      uint64_t v33 = v34[0];
      sub_100019F58(v5, v10);
      dispatch thunk of Encoder.container<A>(keyedBy:)(v7, v7, WitnessTable, v10, v32);
      LOBYTE(v34[0]) = 0;
      sub_10014BC98(v33, v11, (uint64_t)v34);
      sub_10001A420();
      LOBYTE(v34[0]) = 1;
      sub_10014BC98(v31, v28, (uint64_t)v34);
      sub_10001A420();
      LOBYTE(v34[0]) = 2;
      sub_10014BC98(v30, v29, (uint64_t)v34);
      sub_1000D9514();
      sub_10001A420();
    }

    else
    {
      uint64_t v12 = v37;
      uint64_t v13 = v35;
      uint64_t v14 = v34[0];
      uint64_t v15 = v38;
      uint64_t v16 = v36;
      uint64_t v17 = sub_1000175B0(&qword_1002A9098);
      uint64_t v18 = swift_allocObject(v17, 80LL, 7LL);
      *(_OWORD *)(v18 + 16) = xmmword_1001FCE90;
      *(void *)(v18 + 32) = v14;
      *(void *)(v18 + 40) = v39;
      *(void *)(v18 + 48) = v13;
      *(void *)(v18 + 56) = v16;
      *(void *)(v18 + 64) = v12;
      *(void *)(v18 + 72) = v15;
      v34[0] = v18;
      uint64_t v19 = sub_1000175B0(&qword_1002A93B8);
      unint64_t v20 = sub_10007D714();
      uint64_t v21 = BidirectionalCollection<>.joined(separator:)(46LL, 0xE100000000000000LL, v19, v20);
      uint64_t v23 = v22;
      sub_10003561C();
      uint64_t v24 = v5[3];
      uint64_t v25 = v5[4];
      sub_100019F58(v5, v24);
      dispatch thunk of Encoder.singleValueContainer()(v34, v24, v25);
      uint64_t v26 = v36;
      uint64_t v27 = v37;
      sub_100043F18((uint64_t)v34, v36);
      dispatch thunk of SingleValueEncodingContainer.encode(_:)(v21, v23, v26, v27);
      sub_100023EEC();
      sub_100019F7C(v34);
    }
  }

  sub_10001DAB8();
}

void sub_10014B5D4()
{
}

uint64_t type metadata accessor for JWS.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for JWS.CodingKeys);
}

uint64_t type metadata accessor for JWS.Header(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for JWS.Header);
}

uint64_t storeEnumTagSinglePayload for JWSError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10014B640 + 4 * byte_100204CA4[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10014B660 + 4 * byte_100204CA9[v4]))();
  }
}

_BYTE *sub_10014B640(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_10014B660(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10014B668(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10014B670(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10014B678(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10014B680(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for JWSError()
{
  return &type metadata for JWSError;
}

uint64_t sub_10014B69C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10014B6E8 + 4 * byte_100204CB3[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10014B71C + 4 * byte_100204CAE[v4]))();
}

uint64_t sub_10014B71C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014B724(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10014B72CLL);
  }
  return result;
}

uint64_t sub_10014B738(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10014B740LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10014B744(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014B74C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014B758(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10014B7A4 + 4 * byte_100204CBD[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10014B7D8 + 4 * byte_100204CB8[v4]))();
}

uint64_t sub_10014B7D8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014B7E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10014B7E8LL);
  }
  return result;
}

uint64_t sub_10014B7F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10014B7FCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10014B800(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014B808(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for JWS.Serialization(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for JWS.Serialization);
}

uint64_t sub_10014B820(void *a1)
{
  return swift_bridgeObjectRelease(a1[8]);
}

void *sub_10014B860(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v7 = a2[6];
  uint64_t v6 = a2[7];
  a1[6] = v7;
  a1[7] = v6;
  uint64_t v8 = a2[8];
  a1[8] = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

void *sub_10014B8DC(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a1[6];
  uint64_t v11 = a2[6];
  a1[6] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  a1[7] = a2[7];
  uint64_t v12 = a2[8];
  uint64_t v13 = a1[8];
  a1[8] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

void *sub_10014B9A0(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = a1[1];
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = a1[3];
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  a1[4] = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(a1[5]);
  uint64_t v8 = a1[6];
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void *)(a2 + 64);
  uint64_t v10 = a1[8];
  a1[7] = *(void *)(a2 + 56);
  a1[8] = v9;
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t sub_10014BA14(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 72))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_10014BA54(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 72) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t sub_10014BAA4(uint64_t a1)
{
  return swift_getWitnessTable(byte_100204E58, a1);
}

uint64_t sub_10014BAB4(uint64_t a1)
{
  return swift_getWitnessTable(byte_100204F48, a1);
}

unint64_t sub_10014BAC8()
{
  unint64_t result = qword_1002B6048[0];
  if (!qword_1002B6048[0])
  {
    unint64_t result = swift_getWitnessTable("aU\b", &type metadata for JWSError);
    atomic_store(result, qword_1002B6048);
  }

  return result;
}

uint64_t sub_10014BB04(uint64_t a1)
{
  return swift_getWitnessTable(byte_100204E80, a1);
}

uint64_t sub_10014BB14(uint64_t a1)
{
  return swift_getWitnessTable(byte_100204EA8, a1);
}

uint64_t type metadata accessor for JWS.Header.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for JWS.Header.CodingKeys);
}

uint64_t sub_10014BB30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002AA998);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014BB78(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10014BBC4 + 4 * byte_100204CC7[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10014BBF8 + 4 * byte_100204CC2[v4]))();
}

uint64_t sub_10014BBF8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014BC00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10014BC08LL);
  }
  return result;
}

uint64_t sub_10014BC14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10014BC1CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10014BC20(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014BC28(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014BC34(uint64_t a1)
{
  return swift_getWitnessTable(byte_100205168, a1);
}

uint64_t sub_10014BC44(uint64_t a1)
{
  return swift_getWitnessTable(byte_1002050A0, a1);
}

uint64_t sub_10014BC54(uint64_t a1)
{
  return swift_getWitnessTable("iT\b", a1);
}

uint64_t sub_10014BC64()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v1 - 176,  v1 - 192,  0LL,  0LL,  0LL,  1LL,  v0,  v0);
}

uint64_t sub_10014BC98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, v4, a3, v3);
}

uint64_t sub_10014BCAC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_10014BCBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(_BYTE *)(v4 - 88) = a3;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v4 - 88, v3);
}

uint64_t sub_10014BCD4()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10014BCE8()
{
  return swift_bridgeObjectRelease(0xEF79654B5F65646FLL);
}

uint64_t sub_10014BCFC(uint64_t a1)
{
  return sub_10003AACC(a1, v1);
}

  ;
}

uint64_t sub_10014BD18()
{
  return swift_release(*(void *)(v0 - 208));
}

uint64_t sub_10014BD20()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 296));
}

uint64_t sub_10014BD2C()
{
  return dispatch thunk of JSONEncoder.encode<A>(_:)();
}

unint64_t sub_10014BD38(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 & 0x1000000000000000LL;
  if ((a2 & 0x1000000000000000LL) == 0)
  {
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      v8[0] = a1;
      v8[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v6 = (char *)v8 + (HIBYTE(a2) & 0xF);
      uint64_t v4 = v8;
    }

    else
    {
      if ((a1 & 0x1000000000000000LL) != 0)
      {
        uint64_t v4 = (void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v4 = (void *)_StringObject.sharedUTF8.getter(a1);
      }

      if (v4) {
        uint64_t v6 = (char *)v4 + v5;
      }
      else {
        uint64_t v6 = 0LL;
      }
    }

    Data._Representation.append(contentsOf:)(v4, v6);
  }

  return v2 >> 60;
}

uint64_t sub_10014BDC8(double a1)
{
  double v3 = a1;
  v4[3] = &type metadata for UnsafeRawBufferPointer;
  v4[4] = &protocol witness table for UnsafeRawBufferPointer;
  v4[0] = &v3;
  v4[1] = v4;
  unint64_t v1 = sub_100019F58(v4, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v1, v1[1]);
  return sub_100019F7C(v4);
}

uint64_t sub_10014BE60()
{
  uint64_t v0 = type metadata accessor for CertificateManager(0LL);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t result = sub_10014BF64();
  qword_1002EB998 = result;
  return result;
}

uint64_t sub_10014BE9C()
{
  unint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + 16) + 16LL);
  os_unfair_lock_lock(v1);
  sub_10014DC9C();
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC25ASOctaneSupportXPCService18CertificateManager_cachedCert);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v1);
  return v2;
}

void sub_10014BEF8(uint64_t a1@<X8>)
{
  double v3 = *(os_unfair_lock_s **)(*(void *)(v1 + 16) + 16LL);
  os_unfair_lock_lock(v3);
  sub_10014DC9C();
  uint64_t v4 = v1 + OBJC_IVAR____TtC25ASOctaneSupportXPCService18CertificateManager_cachedKey;
  sub_1000487CC(v4, (uint64_t)v5);
  sub_10014E354(v4, a1);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_10014BF64()
{
  uint64_t v1 = type metadata accessor for UnfairLock();
  uint64_t v2 = swift_allocObject(v1, 24LL, 7LL);
  double v3 = (_DWORD *)swift_slowAlloc(4LL, -1LL);
  *(void *)(v2 + 16) = v3;
  *double v3 = 0;
  *(void *)(v0 + 16) = v2;
  uint64_t v4 = v0 + OBJC_IVAR____TtC25ASOctaneSupportXPCService18CertificateManager_cachedKey;
  uint64_t v5 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  sub_10001762C(v4, 1LL, 1LL, v5);
  uint64_t v6 = (void *)(v0 + OBJC_IVAR____TtC25ASOctaneSupportXPCService18CertificateManager_cachedCert);
  *uint64_t v6 = 0LL;
  v6[1] = 0LL;
  return v0;
}

uint64_t sub_10014BFE8()
{
  NSString v0 = String._bridgeToObjectiveC()();
  SecKeyRef v1 = sub_10014C454();
  if (!v1) {
    goto LABEL_9;
  }
  SecKeyRef v2 = v1;
  uint64_t v3 = sub_1000175B0(&qword_1002B6210);
  uint64_t v4 = swift_allocObject(v3, 48LL, 7LL);
  *(_OWORD *)(v4 + 16) = xmmword_1001F3DD0;
  uint64_t v5 = sub_1000175B0(&qword_1002B6218);
  uint64_t v6 = swift_allocObject(v5, 40LL, 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_1001F3C00;
  uint64_t v7 = sub_1000175B0((uint64_t *)&unk_1002AFCE0);
  uint64_t v8 = swift_allocObject(v7, 48LL, 7LL);
  *(_OWORD *)(v8 + 16) = xmmword_1001FB800;
  uint64_t v9 = (void *)kSecOidCommonName;
  *(void *)(v8 + 32) = kSecOidCommonName;
  *(void *)(v8 + 40) = v0;
  uint64_t v55 = v8;
  specialized Array._endMutation()(v8);
  *(void *)(v6 + 32) = v55;
  *(void *)(v4 + 32) = v6;
  uint64_t v10 = swift_allocObject(v5, 40LL, 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_1001F3C00;
  uint64_t v11 = swift_allocObject(v7, 48LL, 7LL);
  *(_OWORD *)(v11 + 16) = xmmword_1001FB800;
  uint64_t v12 = (void *)kSecOidOrganization;
  *(void *)(v11 + 32) = kSecOidOrganization;
  *(void *)(v11 + 40) = v0;
  uint64_t v55 = v11;
  specialized Array._endMutation()(v11);
  *(void *)(v10 + 32) = v55;
  *(void *)(v4 + 40) = v10;
  id v13 = v0;
  id v14 = v9;
  id v15 = v12;
  sub_1000175B0(&qword_1002B6220);
  SecKeyRef v16 = v2;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v18 = sub_1000175B0(&qword_1002AE8A0);
  uint64_t inited = swift_initStackObject(v18, v54);
  *(_OWORD *)(inited + 16) = xmmword_1001FCE90;
  unint64_t v20 = (void *)kSecCertificateKeyUsage;
  *(void *)(inited + 32) = kSecCertificateKeyUsage;
  id v21 = v20;
  Class v22 = UInt._bridgeToObjectiveC()().super.super.isa;
  type metadata accessor for CFNumber(0LL);
  uint64_t v24 = v23;
  *(void *)(inited + 40) = v22;
  uint64_t v25 = (void *)kSecSubjectAltName;
  *(void *)(inited + 64) = v23;
  *(void *)(inited + 72) = v25;
  uint64_t v26 = sub_1000175B0(&qword_1002B6228);
  uint64_t v27 = swift_initStackObject(v26, v53);
  *(_OWORD *)(v27 + 16) = xmmword_1001F3C00;
  uint64_t v28 = (void *)kSecSubjectAltNameEmailAddress;
  *(void *)(v27 + 32) = kSecSubjectAltNameEmailAddress;
  *(void *)(v27 + 40) = v13;
  type metadata accessor for CFString(0LL);
  uint64_t v30 = v29;
  sub_1000221A8( &qword_1002A9170,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1001F3B94);
  id v52 = v13;
  id v31 = v25;
  id v32 = v28;
  Class v33 = isa;
  SecKeyRef v34 = v16;
  Dictionary.init(dictionaryLiteral:)(v27, v30, v30);
  Class v35 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  type metadata accessor for CFDictionary(0LL);
  *(void *)(inited + 80) = v35;
  uint64_t v36 = (void *)kSecCSRBasicContraintsPathLen;
  *(void *)(inited + 104) = v37;
  *(void *)(inited + 112) = v36;
  id v38 = v36;
  v39.super.super.Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  *(void *)(inited + 144) = v24;
  *(NSNumber *)(inited + 120) = v39;
  Dictionary.init(dictionaryLiteral:)(inited, v30, (char *)&type metadata for Any + 8);
  v40.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  SelfSignedCertificate = (void *)SecGenerateSelfSignedCertificate(v33, v40.super.isa, 0LL, v16);
  if (!SelfSignedCertificate)
  {
    NSString v0 = v52;
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v45 = type metadata accessor for Logger(0LL);
    uint64_t v46 = sub_100018F68(v45, (uint64_t)qword_1002EB9D0);
    uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
    os_log_type_t v49 = static os_log_type_t.error.getter(v47, v48);
    if (os_log_type_enabled(v47, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v47,  v49,  "Failed to generate self-signed certificate for StoreKit testing",  v50,  2u);
      swift_slowDealloc(v50, -1LL, -1LL);

      return 0LL;
    }

LABEL_9:
    return 0LL;
  }

  uint64_t v42 = SelfSignedCertificate;
  CFDataRef v43 = SecCertificateCopyData(v42);
  uint64_t v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v43);

  return v44;
}

SecKeyRef sub_10014C454()
{
  uint64_t v0 = sub_1000175B0(&qword_1002B6230);
  uint64_t inited = swift_initStackObject(v0, v30);
  *(_OWORD *)(inited + 16) = xmmword_1001FCE90;
  *(void *)(inited + 32) = kSecAttrKeyType;
  *(void *)(inited + 40) = kSecAttrKeyTypeEC;
  *(void *)(inited + 48) = kSecAttrKeyClass;
  *(void *)(inited + 56) = kSecAttrKeyClassPrivate;
  *(void *)(inited + 64) = kSecAttrKeySizeInBits;
  SecKeyRef v2 = (id)kSecAttrKeyType;
  uint64_t v3 = (id)kSecAttrKeyTypeEC;
  uint64_t v4 = (id)kSecAttrKeyClass;
  uint64_t v5 = (id)kSecAttrKeyClassPrivate;
  uint64_t v6 = (id)kSecAttrKeySizeInBits;
  *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
  type metadata accessor for CFString(0LL);
  uint64_t v8 = v7;
  sub_1000221A8( &qword_1002A9170,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1001F3B94);
  Dictionary.init(dictionaryLiteral:)(inited, v8, (char *)&type metadata for Swift.AnyObject + 8);
  CFErrorRef error = 0LL;
  uint64_t v9 = P256.Signing.PrivateKey.x963Representation.getter();
  unint64_t v11 = v10;
  Class isa = (const __CFData *)Data._bridgeToObjectiveC()().super.isa;
  sub_10003A9EC(v9, v11);
  id v13 = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  SecKeyRef v14 = SecKeyCreateWithData(isa, v13, &error);

  CFErrorRef v15 = error;
  if (error)
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    uint64_t v17 = sub_100018F68(v16, (uint64_t)qword_1002EB9D0);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v20 = static os_log_type_t.error.getter(v18, v19);
    if (os_log_type_enabled(v18, v20))
    {
      id v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v22 = swift_slowAlloc(32LL, -1LL);
      uint64_t v27 = (uint64_t)v15;
      uint64_t v28 = v22;
      *(_DWORD *)id v21 = 136446210;
      type metadata accessor for CFError(0LL);
      uint64_t v24 = String.init<A>(describing:)(&v27, v23);
      uint64_t v27 = sub_1000CF360(v24, v25, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v21 + 4);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v18,  v20,  "Failed to convert CryptoKit key to SecKey: %{public}s",  v21,  0xCu);
      swift_arrayDestroy(v22, 1LL);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }
  }

  return v14;
}

uint64_t sub_10014C748@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10001DAD0();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = (void *)objc_opt_self(&OBJC_CLASS___OctaneStorage);
  uint64_t v10 = sub_10014E568(v9);
  if (!v11) {
    return sub_10001762C(a2, 1LL, 1LL, v4);
  }
  URL.init(fileURLWithPath:isDirectory:)(v10);
  URL.appendingPathComponent(_:)(0x2D72616464656863LL, a1);
  sub_10002A788(v8, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  sub_10014E6D0(a2);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_10014C834(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002A9720);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10014C748(0xEC00000074726563LL, (uint64_t)v6);
  if (sub_10001D158((uint64_t)v6, 1LL, v7) == 1)
  {
    sub_100043F40((uint64_t)v6, &qword_1002A9720);
    uint64_t v11 = type metadata accessor for OctaneError(0LL);
    uint64_t v12 = sub_1000221A8((unint64_t *)&qword_1002AD048, type metadata accessor for OctaneError, (uint64_t)"}-\b");
    swift_allocError(v11, v12, 0LL, 0LL);
    uint64_t v14 = swift_storeEnumTagMultiPayload(v13, v11, 4LL);
    return swift_willThrow(v14);
  }

  else
  {
    uint64_t v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    __int128 v21 = xmmword_1001F8450;
    double v17 = static Date.timeIntervalSinceReferenceDate.getter(v16);
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      Swift::Int v18 = String.UTF8View._foreignCount()();
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      Swift::Int v18 = HIBYTE(a2) & 0xF;
    }

    else
    {
      Swift::Int v18 = a1 & 0xFFFFFFFFFFFFLL;
    }

    BOOL v19 = __OFADD__(v18, 8LL);
    Swift::Int result = v18 + 8;
    if (v19)
    {
      __break(1u);
    }

    else
    {
      Data._Representation.reserveCapacity(_:)(result);
      sub_10014BDC8(v17 + 31536000.0);
      swift_bridgeObjectRetain();
      sub_10014CA7C(a1, a2);
      swift_bridgeObjectRelease();
      __int128 v20 = v21;
      sub_10003AA88(v21, *((unint64_t *)&v21 + 1));
      Data.write(to:options:)(v10, 0LL, v20, *((void *)&v20 + 1));
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      sub_10003A9EC(v20, *((unint64_t *)&v20 + 1));
      return sub_10003A9EC(v21, *((unint64_t *)&v21 + 1));
    }
  }

  return result;
}

unint64_t sub_10014CA7C(uint64_t a1, unint64_t a2)
{
  uint64_t v8 = a1;
  unint64_t v9 = a2;
  v7[0] = a1;
  v7[1] = a2;
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_1000175B0(&qword_1002AC518);
  if (swift_dynamicCast(v10, v7, &type metadata for String.UTF8View, v3, 6LL))
  {
    sub_10002A118(v10, (uint64_t)v12);
    uint64_t v4 = sub_100019F58(v12, v12[3]);
    __chkstk_darwin(v4);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)(sub_10014E618);
    return sub_100019F7C(v12);
  }

  else
  {
    uint64_t v11 = 0LL;
    memset(v10, 0, sizeof(v10));
    sub_100043F40((uint64_t)v10, &qword_1002AC520);
    unint64_t v6 = v9;
    unint64_t result = sub_10014BD38(v8, v9);
    if ((result & 1) != 0)
    {
      if ((v6 & 0x1000000000000000LL) != 0) {
        String.UTF8View._foreignCount()();
      }
      __asm { BR              X12 }
    }
  }

  return result;
}

char *sub_10014CF6C()
{
  uint64_t v1 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_1000175B0(&qword_1002A9720);
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10014C748(0xEC00000074726563LL, (uint64_t)v6);
  if (sub_10001D158((uint64_t)v6, 1LL, v7) == 1)
  {
    sub_100043F40((uint64_t)v6, &qword_1002A9720);
    uint64_t v11 = type metadata accessor for OctaneError(0LL);
    uint64_t v12 = sub_1000221A8((unint64_t *)&qword_1002AD048, type metadata accessor for OctaneError, (uint64_t)"}-\b");
    swift_allocError(v11, v12, 0LL, 0LL);
    uint64_t v14 = swift_storeEnumTagMultiPayload(v13, v11, 4LL);
    swift_willThrow(v14);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    Data.init(contentsOf:options:)(v10, 0LL);
    if (!v0)
    {
      v17[3] = v8;
      __asm { BR              X10 }
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  return v3;
}

void sub_10014D16C()
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v5 - 104) = v7;
  *(void *)(v5 - 96) = v6;
  uint64_t v8 = sub_10014D34C(*(void *)(v7 + 64), v3, v4);
  *(void *)(v5 - 112) = v0;
  uint64_t v9 = v8;
  unint64_t v11 = v10;
  static String.Encoding.utf8.getter(v8);
  String.init(data:encoding:)(v9);
  uint64_t v13 = v12;
  sub_10003A9EC(v9, v11);
  if (v13)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 88) + 8LL))(v2, v1);
    sub_10003A9EC(v3, v4);
    JUMPOUT(0x10014D110LL);
  }

  uint64_t v14 = type metadata accessor for OctaneError(0LL);
  uint64_t v15 = sub_1000221A8((unint64_t *)&qword_1002AD048, type metadata accessor for OctaneError, (uint64_t)"}-\b");
  swift_allocError(v14, v15, 0LL, 0LL);
  uint64_t v17 = swift_storeEnumTagMultiPayload(v16, v14, 2LL);
  swift_willThrow(v17);
  sub_10003A9EC(v3, v4);
  (*(void (**)(void, void))(*(void *)(v5 - 104) + 8LL))(*(void *)(v5 - 112), *(void *)(v5 - 96));
  JUMPOUT(0x10014D104LL);
}

uint64_t sub_10014D34C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return ((uint64_t (*)(uint64_t, void, uint64_t, unint64_t))((char *)&loc_10014D364
                                                                             + *((int *)qword_10014D3A8 + (a3 >> 62))))( a1,  0LL,  a2,  a3);
}

uint64_t sub_10014D378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a4) < a1)
  {
    __break(1u);
    JUMPOUT(0x10014D3A8LL);
  }

  return Data._Representation.subscript.getter();
}

void sub_10014D3B8()
{
  uint64_t v33 = v3;
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_1000C06EC();
  uint64_t v6 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_10001DAD0();
  uint64_t v10 = v9 - v8;
  sub_1000175B0(&qword_1002B6208);
  sub_1000226C8();
  __chkstk_darwin(v11);
  sub_10001DAD0();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = v0 + OBJC_IVAR____TtC25ASOctaneSupportXPCService18CertificateManager_cachedKey;
  swift_beginAccess(v0 + OBJC_IVAR____TtC25ASOctaneSupportXPCService18CertificateManager_cachedKey, v34, 0LL, 0LL);
  sub_10014E354(v15, v14);
  if (sub_10001D158(v14, 1LL, v6))
  {
    sub_100043F40(v14, &qword_1002B6208);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, v14, v6);
    uint64_t v16 = sub_100043F40(v14, &qword_1002B6208);
    uint64_t v17 = P256.Signing.PrivateKey.rawRepresentation.getter(v16);
    uint64_t v19 = v18;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
    unint64_t v20 = *(void *)(v0 + OBJC_IVAR____TtC25ASOctaneSupportXPCService18CertificateManager_cachedCert + 8);
    if (v20)
    {
      uint64_t v21 = *(void *)(v0 + OBJC_IVAR____TtC25ASOctaneSupportXPCService18CertificateManager_cachedCert);
      swift_bridgeObjectRetain();
      sub_10014E69C();
      if (sub_10001D158(v33, 1LL, v4) == 1)
      {
        swift_bridgeObjectRelease();
        sub_100043F40(v33, &qword_1002A9720);
        if (qword_1002A8D90 != -1) {
          swift_once(&qword_1002A8D90, sub_100183E34);
        }
        uint64_t v22 = type metadata accessor for Logger(0LL);
        uint64_t v23 = sub_100018F68(v22, (uint64_t)qword_1002EB9D0);
        uint64_t v24 = (void *)Logger.logObject.getter(v23);
        os_log_type_t v25 = static os_log_type_t.fault.getter();
        if (sub_100092998(v25))
        {
          *(_WORD *)sub_10001A414() = 0;
          sub_10014E688( (void *)&_mh_execute_header,  v26,  v27,  "Failed to persist testing StoreKit 2 key pair due to missing directory.");
          sub_10014E6E0();
        }

        uint64_t v28 = sub_10014E6F0();
        uint64_t v29 = sub_1000221A8( (unint64_t *)&qword_1002AD048,  type metadata accessor for OctaneError,  (uint64_t)"}-\b");
        swift_allocError(v28, v29, 0LL, 0LL);
        uint64_t v31 = swift_storeEnumTagMultiPayload(v30, v28, 4LL);
        swift_willThrow(v31);
        sub_10014E72C(v17);
      }

      else
      {
        sub_10014E6F8(v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32));
        uint64_t v32 = v35;
        Data.write(to:options:)(v1, 0LL, v17, v19);
        if (!v32) {
          sub_10014C834(v21, v20);
        }
        sub_10014E6B0();
        sub_10014E72C(v17);
        swift_bridgeObjectRelease();
      }
    }

    else
    {
      sub_10014E72C(v17);
    }
  }

  sub_10001DAB8();
}

void sub_10014D6F8()
{
  uint64_t v63 = v3;
  __chkstk_darwin(v4);
  Swift::String v62 = (char *)&v55 - v5;
  uint64_t v65 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v65 - 8);
  uint64_t v7 = __chkstk_darwin(v65);
  uint64_t v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v55 - v11;
  __chkstk_darwin(v10);
  unint64_t v68 = (char *)&v55 - v13;
  uint64_t v14 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  uint64_t v66 = *(void *)(v14 - 8);
  uint64_t v67 = v14;
  __chkstk_darwin(v14);
  sub_1000227D0();
  uint64_t v70 = v15;
  sub_1000175B0(&qword_1002A9720);
  sub_1000226C8();
  __chkstk_darwin(v16);
  sub_10001DAD0();
  uint64_t v19 = v18 - v17;
  uint64_t v20 = type metadata accessor for URL(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  sub_1000C06EC();
  sub_10014E69C();
  if (sub_10001D158(v19, 1LL, v20) == 1)
  {
    sub_100043F40(v19, &qword_1002A9720);
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    uint64_t v23 = sub_100018F68(v22, (uint64_t)qword_1002EB9D0);
    uint64_t v24 = (void *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.fault.getter();
    if (sub_100092998(v25))
    {
      *(_WORD *)sub_10001A414() = 0;
      sub_10014E688( (void *)&_mh_execute_header,  v26,  v27,  "Failed to read testing StoreKit 2 key pair due to missing directory.");
      sub_10014E6E0();
    }

    uint64_t v28 = sub_10014E6F0();
    uint64_t v29 = sub_1000221A8((unint64_t *)&qword_1002AD048, type metadata accessor for OctaneError, (uint64_t)"}-\b");
    sub_10014E674(v29);
    uint64_t v31 = swift_storeEnumTagMultiPayload(v30, v28, 4LL);
    swift_willThrow(v31);
  }

  else
  {
    sub_10014E6F8(v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 32));
    uint64_t v32 = Data.init(contentsOf:options:)(v1, 0LL);
    if (!v0)
    {
      Swift::String v60 = v9;
      uint64_t v61 = v6;
      v69[0] = v32;
      v69[1] = v33;
      uint64_t v34 = v32;
      unint64_t v35 = v33;
      sub_10003AA88(v32, v33);
      P256.Signing.PrivateKey.init<A>(rawRepresentation:)( v69,  &type metadata for Data,  &protocol witness table for Data);
      uint64_t v58 = v34;
      unint64_t v59 = v35;
      uint64_t v56 = sub_10014CF6C();
      uint64_t v57 = v36;
      uint64_t v37 = v61;
      id v38 = v68;
      NSNumber v39 = v12;
      uint64_t v40 = v65;
      uint64_t v41 = (*(uint64_t (**)(char *, char *, uint64_t))(v61 + 32))(v68, v39, v65);
      uint64_t v42 = v60;
      Date.init()(v41);
      uint64_t v43 = sub_1000221A8( (unint64_t *)&qword_1002AE8D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      LOBYTE(v38) = dispatch thunk of static Comparable.< infix(_:_:)(v42, v38, v40, v43);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v42, v40);
      if ((v38 & 1) != 0)
      {
        sub_10014E704();
        sub_10014E720();
        sub_10014E664();
        uint64_t v44 = v67;
        uint64_t v45 = (uint64_t)v62;
        (*(void (**)(char *, uint64_t, uint64_t))(v66 + 32))(v62, v70, v67);
        sub_10001762C(v45, 0LL, 1LL, v44);
        uint64_t v46 = v63;
        sub_10014E39C(v45, v63);
        uint64_t v47 = v64;
        uint64_t v48 = v64 + OBJC_IVAR____TtC25ASOctaneSupportXPCService18CertificateManager_cachedKey;
        swift_beginAccess( v64 + OBJC_IVAR____TtC25ASOctaneSupportXPCService18CertificateManager_cachedKey,  v69,  33LL,  0LL);
        sub_10014E3E4(v46, v48);
        swift_endAccess(v69);
        os_log_type_t v49 = (char **)(v47 + OBJC_IVAR____TtC25ASOctaneSupportXPCService18CertificateManager_cachedCert);
        uint64_t v50 = v57;
        *os_log_type_t v49 = v56;
        v49[1] = v50;
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }

      swift_bridgeObjectRelease();
      sub_10014E6F0();
      uint64_t v51 = sub_1000221A8((unint64_t *)&qword_1002AD048, type metadata accessor for OctaneError, (uint64_t)"}-\b");
      uint64_t v52 = sub_10014E674(v51);
      uint64_t v54 = sub_10014E6C0(v52, v53);
      swift_willThrow(v54);
      sub_10014E704();
      sub_10014E720();
      (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v70, v67);
    }

    sub_10014E664();
  }

void sub_10014DC9C()
{
  uint64_t v1 = v0;
  v26[2] = *v0;
  uint64_t v2 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  uint64_t v27 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_10009291C();
  v26[1] = v3;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v26 - v5;
  sub_1000175B0(&qword_1002B6208);
  sub_1000226C8();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)v26 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v26 - v15;
  uint64_t v17 = (Swift::String *)((char *)v1 + OBJC_IVAR____TtC25ASOctaneSupportXPCService18CertificateManager_cachedCert);
  if (!*(void *)((char *)v1 + OBJC_IVAR____TtC25ASOctaneSupportXPCService18CertificateManager_cachedCert + 8)
    || (uint64_t v18 = (uint64_t)v1 + OBJC_IVAR____TtC25ASOctaneSupportXPCService18CertificateManager_cachedKey,
        sub_1000487CC( (uint64_t)v1 + OBJC_IVAR____TtC25ASOctaneSupportXPCService18CertificateManager_cachedKey,  (uint64_t)v28),  sub_10014E354(v18, (uint64_t)v16),  LODWORD(v18) = sub_10014E714((uint64_t)v16),  sub_100043F40((uint64_t)v16, &qword_1002B6208),  (_DWORD)v18 == 1))
  {
    uint64_t v19 = (uint64_t)v1 + OBJC_IVAR____TtC25ASOctaneSupportXPCService18CertificateManager_cachedKey;
    sub_1000487CC((uint64_t)v1 + OBJC_IVAR____TtC25ASOctaneSupportXPCService18CertificateManager_cachedKey, (uint64_t)v29);
    sub_10014E354(v19, (uint64_t)v14);
    if (sub_10014E714((uint64_t)v14) == 1)
    {
      sub_100043F40((uint64_t)v14, &qword_1002B6208);
LABEL_7:
      sub_10014D6F8();
      return;
    }

    v26[0] = v10;
    uint64_t v20 = v27;
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v6, v14, v2);
    uint64_t v21 = sub_10014BFE8();
    if (v22 >> 60 == 15)
    {
      sub_10002A788((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8));
      goto LABEL_7;
    }

    uint64_t v23 = v21;
    unint64_t v24 = v22;
    Swift::String v25 = Data.base64EncodedString(options:)(0LL);
    sub_10003AACC(v23, v24);
    *uint64_t v17 = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_10014C834(v25._countAndFlagsBits, (unint64_t)v25._object);
    sub_10002A788((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
    swift_bridgeObjectRelease();
  }

uint64_t sub_10014E1D0()
{
  return v0;
}

uint64_t sub_10014E218()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10014E23C()
{
  return type metadata accessor for CertificateManager(0LL);
}

uint64_t type metadata accessor for CertificateManager(uint64_t a1)
{
  uint64_t result = qword_1002B6108;
  if (!qword_1002B6108) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CertificateManager);
  }
  return result;
}

void sub_10014E27C(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_10014E300(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    v4[2] = &unk_100205238;
    swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
  }

void sub_10014E300(uint64_t a1)
{
  if (!qword_1002B6118)
  {
    uint64_t v2 = type metadata accessor for P256.Signing.PrivateKey(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1002B6118);
    }
  }

uint64_t sub_10014E354(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002B6208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014E39C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002B6208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014E3E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002B6208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014E42C(uint64_t a1)
{
  uint64_t v2 = __DataStorage._bytes.getter();
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
      __break(1u);
      goto LABEL_8;
    }

    uint64_t v5 = v3 + a1 - result;
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  uint64_t result = __DataStorage._length.getter();
  if (!v5) {
LABEL_8:
  }
    __break(1u);
  return result;
}

uint64_t sub_10014E494(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (result)
  {
    if (__OFSUB__(a2 - result, a3))
    {
      __break(1u);
      goto LABEL_9;
    }

    uint64_t v8 = result + a3;
    uint64_t v9 = a2;
  }

  else
  {
    uint64_t v9 = 0LL;
    uint64_t v8 = 0LL;
  }

  uint64_t result = swift_allocObject(&unk_10028A5D0, 32LL, 7LL);
  *(void *)(result + 16) = a5;
  *(void *)(result + 24) = a6;
  if (!v8)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v10 = result;
  swift_bridgeObjectRetain_n(a6, 2LL);
  uint64_t result = _StringGuts.copyUTF8(into:)(v8, v9 - v8, a5, a6);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease(a6);
    swift_release(v10);
    return 0LL;
  }

uint64_t sub_10014E568(void *a1)
{
  id v1 = [a1 persistedDataPath];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10014E5C8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t result = sub_10014E494(a1, a2, a3, a4, *a5, a5[1]);
  if (!v6)
  {
    *a6 = result;
    a6[1] = v9;
    a6[2] = v10;
    a6[3] = v11;
  }

  return result;
}

uint64_t sub_10014E5FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_10014E5C8(a1, a2, *(void *)(v3 + 16), *(void *)(v3 + 24), *(uint64_t **)(v3 + 32), a3);
}

uint64_t sub_10014E618(uint64_t a1, uint64_t a2)
{
  return Data._Representation.append(contentsOf:)(a1, a2);
}

uint64_t sub_10014E640()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10014E664()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10014E674(uint64_t a1)
{
  return swift_allocError(v1, a1, 0LL, 0LL);
}

void sub_10014E688(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_10014E69C()
{
  return sub_10014C748(0xEB0000000079656BLL, v0);
}

uint64_t sub_10014E6B0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_10014E6C0(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a2, v2, 2LL);
}

uint64_t sub_10014E6D0(uint64_t a1)
{
  return sub_10001762C(a1, 0LL, 1LL, v1);
}

uint64_t sub_10014E6E0()
{
  return swift_slowDealloc(v0, -1LL, -1LL);
}

uint64_t sub_10014E6F0()
{
  return type metadata accessor for OctaneError(0LL);
}

uint64_t sub_10014E6F8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2, v3);
}

uint64_t sub_10014E704()
{
  return sub_10003A9EC(*(void *)(v0 - 192), *(void *)(v0 - 184));
}

uint64_t sub_10014E70C()
{
  return swift_errorRelease(v0);
}

uint64_t sub_10014E714(uint64_t a1)
{
  return sub_10001D158(a1, 1LL, v1);
}

uint64_t sub_10014E720()
{
  return v0(*(void *)(v2 - 112), v1);
}

uint64_t sub_10014E72C(uint64_t a1)
{
  return sub_10003A9EC(a1, v1);
}

uint64_t sub_10014E734(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(*(void *)(v2 + 48) + 24LL);
  sub_10002A75C();
  sub_1000A8B90();
  uint64_t result = sub_100156A9C();
  if ((v6 & 1) != 0)
  {
    Lock.lock()();
    uint64_t v8 = *(void *)(v3 + 168);
    uint64_t v9 = *(void *)(v3 + 176);
    *(void *)(v3 + 168) = a1;
    *(void *)(v3 + 176) = a2;
    sub_100029DDC(a1);
    sub_100029DDC(a2);
    sub_100029DF4(v8);
    sub_100029DF4(v9);
    Lock.unlock()();
    sub_100029DF4(a1);
    return sub_100029DF4(a2);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10014E7C4()
{
  uint64_t v1 = v0;
  swift_retain();
  BOOL v2 = sub_1000A8B90();
  swift_release();
  if (v2) {
    return *(void *)(v1 + 184);
  }
  swift_retain();
  Lock.lock()();
  uint64_t v3 = *(void *)(v1 + 184);
  Lock.unlock()();
  swift_release();
  return v3;
}

uint64_t sub_10014E858()
{
  uint64_t v1 = *(void *)(v0 + 224);
  swift_unknownObjectRetain(v1);
  sub_10002A674();
  return v1;
}

void sub_10014E8C4()
{
  uint64_t v1 = sub_10014E858();
  uint64_t v2 = sub_1001567B0(v1);
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  188LL,  v2,  v0);
  sub_10002A51C();
  sub_10002A338();
  sub_1000193B8();
}

void sub_10014E918()
{
  uint64_t v1 = sub_10014E858();
  uint64_t v2 = sub_1001567B0(v1);
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  166LL,  v2,  v0);
  sub_10002A51C();
  sub_10002A338();
  sub_1000193B8();
}

uint64_t sub_10014E970()
{
  uint64_t result = *(void *)(v0 + 160);
  if (result) {
    return swift_retain(result);
  }
  __break(1u);
  return result;
}

uint64_t sub_10014E980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = type metadata accessor for Lock();
  swift_allocObject(v12, 24LL, 7LL);
  *(void *)(v5 + 56) = Lock.init()();
  uint64_t v13 = sub_1000175B0(&qword_1002B6E60);
  uint64_t v14 = swift_bufferAllocate(v13, 17LL, 7LL);
  sub_100006CF0((_BYTE *)(v14 + 16), 0);
  *(void *)(v6 + 64) = swift_dynamicCastClassUnconditional(v14, v13, 0LL, 0LL, 0LL);
  *(_BYTE *)(v6 + 88) = 0;
  *(void *)(v6 + 144) = 4LL;
  *(_WORD *)(v6 + 152) = 256;
  *(void *)(v6 + 160) = 0LL;
  *(void *)(v6 + 168) = 0xF000000000000007LL;
  *(_BYTE *)(v6 + 216) = 0;
  *(void *)(v6 + 256) = j_j__malloc;
  *(void *)(v6 + 264) = j_j__realloc;
  *(void *)(v6 + 272) = j_j__free;
  *(void *)(v6 + 280) = sub_10005B53C;
  *(void *)(v6 + 176) = 0xF000000000000007LL;
  *(void *)(v6 + 184) = j_j__malloc;
  *(void *)(v6 + 192) = j_j__realloc;
  *(void *)(v6 + 200) = j_j__free;
  *(void *)(v6 + 208) = sub_10005B53C;
  *(void *)(v6 + 32) = a1;
  *(void *)(v6 + 48) = a4;
  *(void *)(v6 + 40) = sub_10003D72C( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Serv er/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  443LL);
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  sub_100023BAC((uint64_t)a5, v6 + 104);
  uint64_t v16 = *(void *)(v6 + 168);
  uint64_t v15 = *(void *)(v6 + 176);
  *(int64x2_t *)(v6 + 168) = vdupq_n_s64(0xF000000000000007LL);
  swift_unknownObjectRetain(a2);
  swift_retain();
  swift_retain();
  sub_100029DF4(v16);
  sub_100029DF4(v15);
  uint64_t v17 = *(void *)(v6 + 64);
  *(void *)(v6 + 224) = a4;
  *(void *)(v6 + 232) = &protocol witness table for SelectableEventLoop;
  *(void *)(v6 + 240) = v17;
  *(_WORD *)(v6 + 248) = 0;
  swift_retain();
  swift_retain();
  *(void *)(v6 + 72) = sub_1000A993C();
  *(void *)(v6 + 80) = v18;
  *(void *)(v6 + 96) = 0LL;
  uint64_t v19 = type metadata accessor for ChannelPipeline();
  uint64_t v20 = swift_allocObject(v19, 80LL, 7LL);
  uint64_t v21 = swift_retain();
  uint64_t v22 = sub_1001ADC88(v21, v20);
  swift_unknownObjectRelease(a2);
  swift_release();
  sub_100019F7C(a5);
  swift_release();
  *(void *)(v6 + 160) = v22;
  swift_release();
  return v6;
}

uint64_t sub_10014EB94( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  uint64_t v8 = v6;
  uint64_t v14 = type metadata accessor for Lock();
  sub_100019310(v14, 24LL);
  *(void *)(v6 + 56) = Lock.init()();
  uint64_t v15 = sub_1000175B0(&qword_1002B6E60);
  uint64_t v16 = swift_bufferAllocate(v15, 17LL, 7LL);
  sub_100006CF0((_BYTE *)(v16 + 16), 0);
  *(void *)(v8 + 64) = swift_dynamicCastClassUnconditional(v16, v15, 0LL, 0LL, 0LL);
  *(_BYTE *)(v8 + 88) = 0;
  *(void *)(v8 + 144) = 4LL;
  *(_WORD *)(v8 + 152) = 256;
  *(_OWORD *)(v8 + 160) = xmmword_100205250;
  *(_BYTE *)(v8 + 216) = 0;
  *(void *)(v8 + 256) = j_j__malloc;
  *(void *)(v8 + 264) = j_j__realloc;
  *(void *)(v8 + 272) = j_j__free;
  *(void *)(v8 + 280) = sub_10005B53C;
  *(void *)(v8 + 176) = 0xF000000000000007LL;
  *(void *)(v8 + 184) = j_j__malloc;
  *(void *)(v8 + 192) = j_j__realloc;
  *(void *)(v8 + 200) = j_j__free;
  *(void *)(v8 + 208) = sub_10005B53C;
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 48) = a4;
  *(void *)(v8 + 40) = sub_10003D72C( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Serv er/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  443LL);
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  sub_100023BAC((uint64_t)a5, v8 + 104);
  swift_unknownObjectRetain(a2);
  sub_10002A674();
  sub_10001EDE0();
  unint64_t v17 = sub_1000CCD80((uint64_t (*)(void))sub_1000CD348);
  if (v7)
  {
    sub_10002A47C();
    unint64_t v18 = 0xF000000000000007LL;
  }

  else
  {
    unint64_t v18 = v17;
  }

  unint64_t v19 = sub_1000CCD80((uint64_t (*)(void))sub_1000CD35C);
  uint64_t v20 = *(void *)(v8 + 168);
  uint64_t v21 = *(void *)(v8 + 176);
  *(void *)(v8 + 168) = v18;
  *(void *)(v8 + 176) = v19;
  sub_100029DF4(v20);
  sub_100029DF4(v21);
  uint64_t v22 = *(void *)(v8 + 64);
  *(void *)(v8 + 224) = a4;
  *(void *)(v8 + 232) = &protocol witness table for SelectableEventLoop;
  *(void *)(v8 + 240) = v22;
  *(_WORD *)(v8 + 248) = 0;
  sub_10001EDE0();
  sub_100041B5C();
  *(void *)(v8 + 72) = sub_1000CDA24();
  *(void *)(v8 + 80) = v23;
  *(void *)(v8 + 96) = 0LL;
  uint64_t v24 = type metadata accessor for ChannelPipeline();
  uint64_t v25 = sub_100019310(v24, 80LL);
  uint64_t v26 = sub_10002A4C8();
  uint64_t v27 = a6(v26, v25);
  swift_unknownObjectRelease(a2);
  sub_10001ED6C();
  sub_100019F7C(a5);
  sub_10002A5A4();
  *(void *)(v8 + 160) = v27;
  swift_release();
  return v8;
}

void *sub_10014EDEC()
{
  uint64_t v1 = v0[22];
  sub_100029DF4(v0[21]);
  sub_100029DF4(v1);
  uint64_t v2 = v0[28];
  swift_release();
  swift_unknownObjectRelease(v2);
  return v0;
}

uint64_t sub_10014EE78()
{
  char v0 = sub_100156754();
  unint64_t v1 = sub_100029C98();
  sub_1000252D0((uint64_t)&type metadata for ChannelError, v1);
  uint64_t v3 = 1LL;
  if ((v0 & 1) == 0) {
    uint64_t v3 = 2LL;
  }
  return sub_1000ABEFC(v2, v3);
}

unint64_t sub_10014EEC4(uint64_t (*a1)(void))
{
  if ((sub_100156754() & 1) != 0) {
    return sub_1000CCD80(a1);
  }
  unint64_t v3 = sub_100029C98();
  sub_1000252D0((uint64_t)&type metadata for ChannelError, v3);
  return sub_1000ABEFC(v4, 2LL);
}

uint64_t sub_10014EF38(char a1, char a2)
{
  return sub_10014EFE4(a1, a2, sub_1000AAA30);
}

uint64_t sub_10014EF44(char a1, char a2)
{
  uint64_t v4 = sub_1000AAA30();
  uint64_t v6 = v5;
  if ((a1 & 1) != 0)
  {
    sub_10014EE78();
    if ((a2 & 1) == 0) {
      goto LABEL_6;
    }
  }

  else
  {
    sub_100029DDC(v4);
    if ((a2 & 1) == 0)
    {
LABEL_6:
      sub_100029DDC(v6);
      goto LABEL_7;
    }
  }

  sub_10014EE78();
LABEL_7:
  sub_100156880();
  uint64_t v7 = sub_10015695C();
  return sub_100156694(v7);
}

uint64_t sub_10014EFE4(char a1, char a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3();
  uint64_t v7 = v6;
  if ((a1 & 1) != 0)
  {
    sub_10014EEC4((uint64_t (*)(void))sub_1000CD348);
    if ((a2 & 1) == 0) {
      goto LABEL_6;
    }
  }

  else
  {
    sub_100029DDC(v5);
    if ((a2 & 1) == 0)
    {
LABEL_6:
      sub_100029DDC(v7);
      goto LABEL_7;
    }
  }

  sub_10014EEC4((uint64_t (*)(void))sub_1000CD35C);
LABEL_7:
  sub_100156880();
  uint64_t v8 = sub_10015695C();
  return sub_100156694(v8);
}

uint64_t sub_10014F098(uint64_t a1)
{
  uint64_t result = sub_100156754();
  if ((result & 1) != 0 && *(unsigned __int8 *)(v1 + 216) != a1)
  {
    *(_BYTE *)(v1 + 216) = a1;
    return (*(uint64_t (**)(void, uint64_t))(*(void *)v1 + 856LL))( *(void *)(*(void *)(v1 + 48) + 16LL),  a1);
  }

  return result;
}

uint64_t sub_10014F190()
{
  int v1 = *(unsigned __int8 *)(v0 + 216);
  if ((v1 & 8) != 0) {
    return sub_10014F098(v1 & 0xFFFFFFF7);
  }
  return result;
}

uint64_t sub_10014F1B4()
{
  int v1 = *(unsigned __int8 *)(v0 + 216);
  if ((v1 & 4) != 0) {
    return sub_10014F098(v1 & 0xFFFFFFFB);
  }
  return result;
}

uint64_t sub_10014F1D4()
{
  uint64_t v1 = sub_10014E858();
  char v3 = v2;
  swift_unknownObjectRelease(v1);
  uint64_t result = sub_10001EDD8();
  if ((v3 & 1) == 0)
  {
    int v5 = *(unsigned __int8 *)(v0 + 216);
    if ((v5 & 2) == 0) {
      return sub_10014F098(v5 | 2u);
    }
  }

  return result;
}

uint64_t sub_10014F21C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result = sub_100156754();
  if ((result & 1) == 0)
  {
    if (!a3) {
      return result;
    }
    unint64_t v7 = sub_100029C98();
    uint64_t v8 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v7);
    uint64_t v9 = v8;
    *(void *)uint64_t v10 = 3LL;
    *(_BYTE *)(v10 + 8) = 3;
    goto LABEL_8;
  }

  if (a2 == 2)
  {
    *(_BYTE *)(v3 + 216) = 1;
    sub_10015003C(v3);
    sub_10005251C();
    sub_10002A674();
    sub_10002A718(v3 + 224, (uint64_t)v18, 33LL);
    uint64_t v13 = sub_10002A444();
    sub_1001568EC();
    sub_10002A618(v14, v15, v16, v17, v13);
    __asm { BR              X10 }
  }

  if (a3)
  {
    unint64_t v11 = sub_100029C98();
    uint64_t v9 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v11);
    sub_10002A720(v12, 1LL);
LABEL_8:
    swift_errorRetain(v8);
    sub_100098A70(v9, 1LL, a3);
    swift_errorRelease(v9);
    return swift_errorRelease(v9);
  }

  return result;
}

uint64_t sub_10014F62C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v3 + 584LL))();
  if ((result & 1) == 0)
  {
    if (!a3) {
      return result;
    }
    unint64_t v7 = sub_100029C98();
    uint64_t v8 = swift_allocError(&type metadata for ChannelError, v7, 0LL, 0LL);
    uint64_t v9 = v8;
    *(void *)uint64_t v10 = 3LL;
    *(_BYTE *)(v10 + 8) = 3;
    goto LABEL_8;
  }

  if (a2 == 2)
  {
    *(_BYTE *)(v3 + 216) = 1;
    sub_10015003C(v3);
    sub_1000CCCD4();
    swift_retain();
    swift_beginAccess(v3 + 224, v15, 33LL, 0LL);
    uint64_t v13 = *(void *)(v3 + 232);
    uint64_t ObjectType = swift_getObjectType(*(void *)(v3 + 224));
    EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  91LL,  ObjectType,  v13);
    __asm { BR              X10 }
  }

  if (a3)
  {
    unint64_t v11 = sub_100029C98();
    uint64_t v8 = swift_allocError(&type metadata for ChannelError, v11, 0LL, 0LL);
    uint64_t v9 = v8;
    *(void *)uint64_t v12 = 1LL;
    *(_BYTE *)(v12 + 8) = 3;
LABEL_8:
    swift_errorRetain(v8);
    sub_100098A70(v9, 1LL, a3);
    swift_errorRelease(v9);
    return swift_errorRelease(v9);
  }

  return result;
}

uint64_t sub_10014FB1C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v3 + 584LL))();
  if ((result & 1) == 0)
  {
    if (!a3) {
      return result;
    }
    unint64_t v7 = sub_100029C98();
    uint64_t v8 = swift_allocError(&type metadata for ChannelError, v7, 0LL, 0LL);
    uint64_t v9 = v8;
    *(void *)uint64_t v10 = 3LL;
    *(_BYTE *)(v10 + 8) = 3;
    goto LABEL_8;
  }

  if (a2 == 2)
  {
    *(_BYTE *)(v3 + 216) = 1;
    sub_10015003C(v3);
    sub_1000A9C1C();
    swift_retain();
    swift_beginAccess(v3 + 224, v15, 33LL, 0LL);
    uint64_t v13 = *(void *)(v3 + 232);
    uint64_t ObjectType = swift_getObjectType(*(void *)(v3 + 224));
    EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  91LL,  ObjectType,  v13);
    __asm { BR              X10 }
  }

  if (a3)
  {
    unint64_t v11 = sub_100029C98();
    uint64_t v8 = swift_allocError(&type metadata for ChannelError, v11, 0LL, 0LL);
    uint64_t v9 = v8;
    *(void *)uint64_t v12 = 1LL;
    *(_BYTE *)(v12 + 8) = 3;
LABEL_8:
    swift_errorRetain(v8);
    sub_100098A70(v9, 1LL, a3);
    swift_errorRelease(v9);
    return swift_errorRelease(v9);
  }

  return result;
}

void sub_10015000C(uint64_t a1, unsigned __int8 a2)
{
  if (!*(_BYTE *)(v2 + 88)) {
    sub_1000AB6B8(*(void *)(v2 + 16), a2);
  }
}

uint64_t sub_10015003C(uint64_t result)
{
  if (!*(_BYTE *)(v1 + 88)) {
    return (*(uint64_t (**)(void))(*(void *)result + 848LL))(*(void *)(v1 + 16));
  }
  return result;
}

void sub_100150074(uint64_t a1)
{
}

void sub_1001500C0()
{
}

void sub_1001500D4()
{
  if (v1) {
    goto LABEL_4;
  }
  sub_10002A718(v0 + 224, (uint64_t)v6, 1LL);
  sub_10002A444();
  sub_1001568EC();
  sub_100132AA8(v2, v3, v4, v5);
  if (*(_BYTE *)(v0 + 249) == 1)
  {
    *(_BYTE *)(v0 + 249) = 2;
    sub_100132AA8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  44LL);
    sub_100156A54();
    swift_release();
LABEL_4:
    sub_10005EC8C();
    return;
  }

  __break(1u);
}

uint64_t sub_100150174(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10014E858();
  uint64_t v6 = v5;
  unsigned int v8 = v7;
  uint64_t ObjectType = swift_getObjectType(v4);
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  176LL,  ObjectType,  v6);
  if (v8 <= 4 && ((1 << v8) & 0x13) != 0)
  {
    sub_10002A51C();
    sub_10002A338();
    sub_1001500D4();
  }

  else
  {
    sub_10002A51C();
    sub_10002A338();
  }

  sub_10002A718(v1 + 224, (uint64_t)v25, 33LL);
  uint64_t v10 = sub_10002A444();
  sub_1001568EC();
  uint64_t result = sub_10002A618(v11, v12, v13, v14, v10);
  if (*(_BYTE *)(v1 + 249) == 2)
  {
    *(_BYTE *)(v1 + 249) = 3;
    sub_10002A618( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  44LL,  v10);
    uint64_t v16 = *(void *)(v1 + 240);
    ChannelPipeline.syncOperations.getter();
    sub_100006CF0((_BYTE *)(v16 + 16), 1);
    swift_endAccess(v25);
    sub_100024F0C();
    uint64_t v17 = sub_10014E970();
    if (a1) {
      sub_100098A70(0LL, 0LL, a1);
    }
    uint64_t v18 = *(void *)(v17 + 56);
    uint64_t v19 = sub_10002A444();
    EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  1149LL,  v19,  v18);
    if (sub_100095918())
    {
      sub_100041B5C();
      sub_100096320();
      sub_10002A780(v17);
    }

    sub_10002A51C();
    uint64_t v20 = sub_10014E858();
    __int16 v22 = v21;
    uint64_t v23 = swift_getObjectType(v20);
    sub_10002A618( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  188LL,  v23);
    sub_10002A5A4();
    uint64_t result = sub_10002A338();
    if ((v22 & 0xFF00) != 0x400)
    {
      uint64_t v24 = sub_10014F1D4();
      return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 720LL))(v24);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_1001503A0(unsigned __int8 a1)
{
  if ((sub_100156754() & 1) == 0)
  {
    unint64_t v7 = sub_100029C98();
    sub_1000252D0((uint64_t)&type metadata for ChannelError, v7);
    sub_10002A720(v8, 2LL);
LABEL_7:
    swift_willThrow(v6);
    goto LABEL_8;
  }

  v1[216] = a1;
  sub_10015048C(v1);
  if (v2)
  {
    uint64_t v4 = *(void *)(sub_100156A54() + 56);
    uint64_t v5 = sub_10002A444();
    EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  1189LL,  v5,  v4);
    if (sub_100095918())
    {
      sub_10009663C(v2);
      sub_10002A524();
    }

    sub_10002A524();
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v1 + 760LL))(v2, 2LL, 0LL);
    goto LABEL_7;
  }

uint64_t sub_10015048C(unsigned __int8 *a1)
{
  if (!*(_BYTE *)(v1 + 88)) {
    return (*(uint64_t (**)(void, void))(*(void *)a1 + 840LL))(*(void *)(v1 + 16), a1[216]);
  }
  unint64_t v2 = sub_100029E1C();
  sub_1000252D0((uint64_t)&type metadata for EventLoopError, v2);
  *uint64_t v3 = 2;
  return sub_1000AA06C();
}

uint64_t sub_1001504F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_10003D72C( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Select ableEventLoop.swift",  121LL,  2LL,  252LL);
  uint64_t v9 = (void *)swift_allocObject(&unk_10028A7A0, 40LL, 7LL);
  v9[2] = v8;
  v9[3] = a2;
  v9[4] = a3;
  uint64_t v10 = type metadata accessor for ScheduledTask();
  swift_allocObject(v10, 56LL, 7LL);
  uint64_t v11 = ScheduledTask.init(_:_:_:)((uint64_t)sub_100156418, (uint64_t)v9, (uint64_t)sub_100029E14, v8, a1);
  uint64_t v12 = swift_allocObject(&unk_10028A7C8, 32LL, 7LL);
  *(void *)(v12 + 16) = v4;
  *(void *)(v12 + 24) = v11;
  uint64_t v13 = swift_allocObject(&unk_10028A7F0, 32LL, 7LL);
  *(void *)(v13 + 16) = sub_100040FB0;
  *(void *)(v13 + 24) = v12;
  swift_retain_n(v8, 4LL);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000FEE04();
  swift_release();
  swift_release();
  SelectableEventLoop._schedule0(_:)((uint64_t)v11);
  swift_release();
  swift_release();
  return v8;
}

uint64_t sub_1001506B4(uint64_t a1, void (*a2)(void))
{
  return sub_100098A70(0LL, 0LL, a1);
}

void sub_100150734()
{
  if (sub_1000CCD30())
  {
    sub_1001569F4();
  }

  else
  {
    unint64_t v0 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v0);
    sub_100073658();
    *uint64_t v1 = v2;
    v1[1] = 0x80000001002194A0LL;
    sub_100156540(v3, (uint64_t)v1);
  }

  sub_1001566D8();
}

uint64_t sub_1001507B0()
{
  if (sub_1000CCD30())
  {
    sub_1001569F4();
    if (!v0) {
      char v1 = v7;
    }
  }

  else
  {
    unint64_t v2 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v2);
    sub_100073658();
    *uint64_t v3 = v4;
    v3[1] = 0x80000001002194A0LL;
    sub_100156540(v5, (uint64_t)v3);
  }

  return v1 & 1;
}

void sub_100150840(uint64_t a1, int a2)
{
  if ((_DWORD)a1 == 6 && a2 == 1)
  {
    unint64_t v4 = sub_1000CCD80((uint64_t (*)(void))sub_1000CD348);
    if (v2)
    {
      a1 = swift_errorRelease(v2);
    }

    else
    {
      unint64_t v5 = v4;
      a1 = swift_release();
      if ((v5 & 0x8000000000000000LL) != 0) {
        return;
      }
    }
  }

  __chkstk_darwin(a1);
  sub_100150734();
}

void sub_100150908(uint64_t a1, int a2)
{
  if ((_DWORD)a1 == 6 && a2 == 1)
  {
    unint64_t v4 = sub_1000CCD80((uint64_t (*)(void))sub_1000CD348);
    if (v2)
    {
      a1 = swift_errorRelease(v2);
    }

    else
    {
      unint64_t v5 = v4;
      a1 = swift_release();
      if ((v5 & 0x8000000000000000LL) != 0) {
        return;
      }
    }
  }

  __chkstk_darwin(a1);
  sub_100150734();
}

void sub_1001509D0(uint64_t a1, int a2)
{
  if ((_DWORD)a1 == 6 && a2 == 1)
  {
    unint64_t v4 = sub_1000CCD80((uint64_t (*)(void))sub_1000CD348);
    if (v2)
    {
      a1 = swift_errorRelease(v2);
    }

    else
    {
      unint64_t v5 = v4;
      a1 = swift_release();
      if ((v5 & 0x8000000000000000LL) != 0) {
        return;
      }
    }
  }

  __chkstk_darwin(a1);
  sub_100150734();
}

void sub_100150A9C(uint64_t a1)
{
  uint64_t v3 = sub_10015663C(a1);
  if (v4)
  {
    sub_10015686C();
    sub_100156838();
    sub_100156710(35LL, 0x800000010021FE80LL);
    sub_100156818();
    sub_100156630();
    sub_100156624();
    unint64_t v5 = sub_100156708();
    uint64_t v6 = sub_1000252D0((uint64_t)&type metadata for IOError, v5);
    *char v7 = v1;
    v7[1] = v2;
    sub_100156540(v6, (uint64_t)v7);
  }

  else
  {
    __chkstk_darwin(v3);
    sub_1001566E8();
    sub_100151578(sub_1001564A8);
    sub_100156724();
  }

  sub_100156718();
  sub_10005EDFC();
}

void sub_100150B5C(uint64_t a1)
{
  uint64_t v3 = sub_10015663C(a1);
  if (v4)
  {
    sub_10015686C();
    sub_100156838();
    sub_100156710(35LL, 0x800000010021FE80LL);
    sub_100156818();
    sub_100156630();
    sub_100156624();
    unint64_t v5 = sub_100156708();
    uint64_t v6 = sub_1000252D0((uint64_t)&type metadata for IOError, v5);
    *char v7 = v1;
    v7[1] = v2;
    sub_100156540(v6, (uint64_t)v7);
  }

  else
  {
    __chkstk_darwin(v3);
    sub_1001566E8();
    sub_100156A30();
    sub_100156724();
  }

  sub_100156718();
  sub_10005EDFC();
}

void sub_100150C14( int a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t))
{
  if (!v5)
  {
    ++*(_DWORD *)(a2 + 32);
    a5(&v16, a4);
    uint64_t v10 = a1;
    uint64_t v11 = v16;
    uint64_t v12 = v17;
    uint64_t v13 = v18;
    uint64_t v14 = v19;
    swift_beginAccess(a2 + 24, v15, 33LL, 0LL);
    Scheduled._promise.getter(v11);
    sub_1001B80E8(v11, v12 | (v13 << 8) | (v14 << 32), v10);
    swift_endAccess(v15);
    j__swift_release(v11);
  }

uint64_t sub_100150D04( int a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = sub_1001520F0(a3, a4, 256, *(unsigned int *)(a2 + 32), a7);
  if (!v7)
  {
    ++*(_DWORD *)(a2 + 32);
    a5(&v19, a4);
    uint64_t v13 = a1;
    uint64_t v14 = v19;
    uint64_t v15 = v20;
    uint64_t v16 = v21;
    uint64_t v17 = v22;
    sub_10002A718(a2 + 24, (uint64_t)v18, 33LL);
    Scheduled._promise.getter(v14);
    sub_1001B80E8(v14, v15 | (v16 << 8) | (v17 << 32), v13);
    swift_endAccess(v18);
    return j__swift_release(v14);
  }

  return result;
}

void sub_100150DF4(uint64_t a1)
{
  uint64_t v3 = sub_10015663C(a1);
  if (v4)
  {
    sub_100156844();
    sub_100156838();
    sub_100156710(38LL, 0x800000010021FE20LL);
    sub_100156818();
    sub_100156630();
    sub_100156624();
    unint64_t v5 = sub_100156708();
    uint64_t v6 = sub_1000252D0((uint64_t)&type metadata for IOError, v5);
    *uint64_t v7 = v1;
    v7[1] = v2;
    sub_100156540(v6, (uint64_t)v7);
  }

  else
  {
    __chkstk_darwin(v3);
    sub_1001567E0();
    sub_100151578((uint64_t (*)(void))sub_100156474);
    sub_100156724();
  }

  sub_100156718();
  sub_10005EDFC();
}

void sub_100150EB4(uint64_t a1)
{
  uint64_t v3 = sub_10015663C(a1);
  if (v4)
  {
    sub_100156844();
    sub_100156838();
    sub_100156710(38LL, 0x800000010021FE20LL);
    sub_100156818();
    sub_100156630();
    sub_100156624();
    unint64_t v5 = sub_100156708();
    uint64_t v6 = sub_1000252D0((uint64_t)&type metadata for IOError, v5);
    *uint64_t v7 = v1;
    v7[1] = v2;
    sub_100156540(v6, (uint64_t)v7);
  }

  else
  {
    __chkstk_darwin(v3);
    sub_1001567E0();
    sub_100156A30();
    sub_100156724();
  }

  sub_100156718();
  sub_10005EDFC();
}

void sub_100150F6C(int a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v8 = a1;
  uint64_t v9 = a2 + 24;
  swift_beginAccess(a2 + 24, v15, 0LL, 0LL);
  sub_10012A350(v8, *(void *)(a2 + 24));
  uint64_t v12 = v11;
  unint64_t v13 = v10;
  if ((~v11 & 0xF000000000000007LL) == 0 && (v10 & 0xFE) == 0xFE)
  {
    __break(1u);
  }

  else
  {
    sub_100151FF4(a3, a4, BYTE1(v10), HIDWORD(v10));
    if (!v4)
    {
      swift_beginAccess(v9, v14, 33LL, 0LL);
      Scheduled._promise.getter(v12);
      sub_1001B80E8(v12, v13 & 0xFFFFFFFF000000FFLL | ((unint64_t)a4 << 8), v8);
      swift_endAccess(v14);
    }

    sub_100156170(v12, v13);
  }

void sub_100151074( int a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = a1;
  uint64_t v11 = a2 + 24;
  sub_10002A718(a2 + 24, (uint64_t)v17, 0LL);
  sub_10012A350(v10, *(void *)(a2 + 24));
  uint64_t v14 = v13;
  unint64_t v15 = v12;
  if ((~v13 & 0xF000000000000007LL) == 0 && (v12 & 0xFE) == 0xFE)
  {
    __break(1u);
  }

  else
  {
    sub_1001520F0(a3, a4, BYTE1(v12), HIDWORD(v12), a5);
    if (!v5)
    {
      sub_10002A718(v11, (uint64_t)v16, 33LL);
      Scheduled._promise.getter(v14);
      sub_1001B80E8(v14, v15 & 0xFFFFFFFF000000FFLL | ((unint64_t)a4 << 8), v10);
      swift_endAccess(v16);
    }

    sub_100156170(v14, v15);
    sub_1001566BC();
  }

void sub_10015116C(uint64_t a1)
{
  uint64_t v4 = sub_10015663C(a1);
  if (v5)
  {
    sub_100156858();
    sub_100156838();
    sub_100156710(39LL, 0x800000010021FE50LL);
    sub_100156818();
    sub_100156630();
    sub_100156624();
    unint64_t v6 = sub_100156708();
    uint64_t v7 = sub_1000252D0((uint64_t)&type metadata for IOError, v6);
    void *v8 = v2;
    v8[1] = v3;
    sub_100156540(v7, (uint64_t)v8);
  }

  else
  {
    __chkstk_darwin(v4);
    sub_100092E9C();
    *(void *)(v9 - 16) = v1;
    *(void *)(v9 - 8) = &v10;
    sub_100151578((uint64_t (*)(void))sub_100156490);
    sub_100156724();
  }

  sub_100156718();
  sub_10005EDFC();
}

void sub_100151230(uint64_t a1)
{
  uint64_t v3 = sub_10015663C(a1);
  if (v4)
  {
    sub_100156858();
    sub_100156838();
    sub_100156710(39LL, 0x800000010021FE50LL);
    sub_100156818();
    sub_100156630();
    sub_100156624();
    unint64_t v5 = sub_100156708();
    uint64_t v6 = sub_1000252D0((uint64_t)&type metadata for IOError, v5);
    *uint64_t v7 = v1;
    v7[1] = v2;
    sub_100156540(v6, (uint64_t)v7);
  }

  else
  {
    __chkstk_darwin(v3);
    sub_100156A30();
    sub_100156724();
  }

  sub_100156718();
  sub_10005EDFC();
}

uint64_t sub_1001512F8(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  swift_beginAccess(a2 + 24, v18, 33LL, 0LL);
  unint64_t v6 = sub_1000F1730(v5);
  if ((v7 & 1) == 0) {
    return swift_endAccess(v18);
  }
  unint64_t v8 = v6;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(a2 + 24));
  uint64_t v19 = *(void *)(a2 + 24);
  uint64_t v10 = v19;
  *(void *)(a2 + 24) = 0x8000000000000000LL;
  Swift::Int v11 = *(void *)(v10 + 24);
  sub_1000175B0(&qword_1002B6E58);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v11);
  uint64_t v12 = v19;
  uint64_t v13 = *(void *)(v19 + 56) + 16 * v8;
  uint64_t v14 = *(void *)v13;
  LOWORD(v11) = *(unsigned __int8 *)(v13 + 9);
  uint64_t v15 = *(unsigned int *)(v13 + 12);
  _NativeDictionary._delete(at:)( v8,  v19,  &type metadata for Int,  &type metadata for NIORegistration,  &protocol witness table for Int);
  uint64_t v16 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = v12;
  swift_bridgeObjectRelease(v16);
  swift_endAccess(v18);
  sub_100151FF4(a3, 1, v11, v15);
  return j__swift_release(v14);
}

void sub_100151440( int a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = a1;
  sub_10002A718(a2 + 24, (uint64_t)v18, 33LL);
  unint64_t v8 = sub_1000F1730(v7);
  if ((v9 & 1) != 0)
  {
    unint64_t v10 = v8;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(a2 + 24));
    uint64_t v19 = *(void *)(a2 + 24);
    uint64_t v12 = v19;
    *(void *)(a2 + 24) = 0x8000000000000000LL;
    Swift::Int v13 = *(void *)(v12 + 24);
    sub_1000175B0(&qword_1002B6E58);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v13);
    uint64_t v14 = v19;
    uint64_t v15 = *(void *)(v19 + 56) + 16 * v10;
    uint64_t v17 = *(void *)v15;
    LOWORD(vsub_100019F7C(v0 + 13) = *(unsigned __int8 *)(v15 + 9);
    uint64_t v16 = *(unsigned int *)(v15 + 12);
    _NativeDictionary._delete(at:)( v10,  v19,  &type metadata for Int,  &type metadata for NIORegistration,  &protocol witness table for Int);
    *(void *)(a2 + 24) = v14;
    swift_bridgeObjectRelease();
    swift_endAccess(v18);
    sub_1001520F0(a3, 1, v13, v16, a4);
    j__swift_release(v17);
  }

  else
  {
    swift_endAccess(v18);
  }

  sub_1001566BC();
}

uint64_t sub_100151578(uint64_t (*a1)(void))
{
  if (*(_BYTE *)(v1 + 16) == 1) {
    return a1(*(unsigned int *)(v1 + 20));
  }
  unint64_t v4 = sub_100025100();
  uint64_t v5 = swift_allocError(&type metadata for IOError, v4, 0LL, 0LL);
  *(void *)uint64_t v6 = 0xD00000000000001FLL;
  *(void *)(v6 + 8) = 0x80000001002194A0LL;
  *(_DWORD *)(v6 + 16) = 9;
  return swift_willThrow(v5);
}

uint64_t sub_100151644(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v6 = v5;
  *(_WORD *)(v5 + 296) = 0;
  *(_BYTE *)(v5 + 298) = 0;
  uint64_t v10 = a4[14];
  uint64_t v11 = a4[15];
  uint64_t v12 = a4[16];
  uint64_t v13 = a4[17];
  uint64_t v14 = type metadata accessor for PendingStreamWritesManager();
  swift_allocObject(v14, 137LL, 7LL);
  swift_retain();
  *(void *)(v6 + 304) = sub_10019C008(v10, v11, v12, v13);
  *(void *)(v6 + 288) = 0LL;
  swift_release();
  sub_100023BAC((uint64_t)a5, (uint64_t)v19);
  uint64_t v15 = swift_retain();
  uint64_t v16 = sub_10014EB94(v15, a2, a3, (uint64_t)a4, v19, (uint64_t (*)(uint64_t, uint64_t))sub_1001ADC88);
  sub_100019F7C(a5);
  swift_release();
  return v16;
}

uint64_t sub_10015174C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v6 = v5;
  *(_WORD *)(v5 + 296) = 0;
  *(_BYTE *)(v5 + 298) = 0;
  uint64_t v10 = a4[14];
  uint64_t v11 = a4[15];
  uint64_t v12 = a4[16];
  uint64_t v13 = a4[17];
  uint64_t v14 = type metadata accessor for PendingStreamWritesManager();
  sub_100019310(v14, 137LL);
  sub_10001EDE0();
  *(void *)(v6 + 304) = sub_10019C008(v10, v11, v12, v13);
  *(void *)(v6 + 288) = 0LL;
  sub_10001ED6C();
  sub_100023BAC((uint64_t)a5, (uint64_t)v19);
  uint64_t v15 = sub_10002A4C8();
  uint64_t v16 = sub_10014E980(v15, a2, a3, (uint64_t)a4, v19);
  sub_100019F7C(a5);
  sub_10001EDD8();
  return v16;
}

void sub_100151838(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = a3();
  sub_100156738(v3, v4);
  sub_10001945C();
}

void sub_10015185C(char a1)
{
  if (a1)
  {
    if (a1 == 1)
    {
      NIOFileHandle.close()();
      if (!v2) {
        *(_BYTE *)(v1 + 297) = 1;
      }
    }
  }

  else
  {
    NIOFileHandle.close()();
    if (!v3) {
      *(_BYTE *)(v1 + 298) = 1;
    }
  }

void sub_1001518BC(char a1)
{
  if (a1)
  {
    if (a1 == 1)
    {
      sub_100073388(0);
      if (!v2) {
        *(_BYTE *)(v1 + 297) = 1;
      }
    }
  }

  else
  {
    sub_100073388(1u);
    if (!v2) {
      *(_BYTE *)(v1 + 298) = 1;
    }
  }

void *sub_100151928()
{
  uint64_t v0 = sub_10014EDEC();
  swift_release();
  swift_release();
  return v0;
}

void sub_10015195C()
{
  if (v27)
  {
    if ((v1[1] & 1) != 0)
    {
      if (v0)
      {
        unint64_t v11 = sub_100029C98();
        uint64_t v7 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v11);
        uint64_t v9 = v7;
        uint64_t v10 = 4LL;
        goto LABEL_9;
      }

      goto LABEL_33;
    }

    sub_100156A5C(0);
    if (!v2)
    {
      sub_10015694C();
      sub_10014F190();
      if (v0) {
        sub_100132A04();
      }
      sub_100156934();
      uint64_t v31 = &type metadata for ChannelEvent;
      LOBYTE(v28) = 1;
      goto LABEL_32;
    }

    goto LABEL_22;
  }

  if (v5 == 1)
  {
    if ((*v1 & 1) != 0)
    {
      if (v0)
      {
        unint64_t v6 = sub_100029C98();
        uint64_t v7 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v6);
        uint64_t v9 = v7;
        uint64_t v10 = 5LL;
LABEL_9:
        sub_1001565C0(v7, v8, v10);
        sub_100156574(v9);
        sub_10002A620();
        sub_1001566A8(v9);
        return;
      }

      goto LABEL_33;
    }

    sub_100156A90();
    uint64_t v15 = sub_1000175B0(&qword_1002A9710);
    if (sub_1001568CC( v15,  v16,  v15,  (uint64_t)&type metadata for ChannelError,  v17,  v18,  v19,  v20,  v28,  v29,  v30,  (uint64_t)v31,  v32,  v33))
    {
      BOOL v27 = v29 == 3 && v28 == 6;
      if (v27)
      {
        sub_1001568FC(v28, v29, v21, v22, v23, v24, v25, v26, v28, v29, v30, (uint64_t)v31, v32, v33);
LABEL_29:
        sub_10014F1B4();
        if (v0) {
          sub_100132A04();
        }
        sub_100156934();
        uint64_t v31 = &type metadata for ChannelEvent;
        LOBYTE(v28) = 0;
LABEL_32:
        ChannelPipeline.fireUserInboundEventTriggered(_:)((uint64_t)&v28);
        sub_100024F0C();
        sub_100019F7C(&v28);
LABEL_33:
        sub_10010D9C8();
        return;
      }

      sub_100038470(v28, v29);
    }

    swift_errorRelease(v33);
    sub_100156A5C(1);
    if (!v2) {
      goto LABEL_29;
    }
LABEL_22:
    if (v0)
    {
      sub_10002A710();
      sub_100156574(v2);
      sub_10002A47C();
    }

    sub_10002A47C();
    goto LABEL_33;
  }

  if (*(void *)(v3 + 288))
  {
    *(void *)(v3 + 288) = 0LL;
    unint64_t v12 = sub_100029E1C();
    uint64_t v13 = sub_1000252D0((uint64_t)&type metadata for EventLoopError, v12);
    sub_100156984(v13, v14);
    sub_10002A81C(v2);
    sub_10002A47C();
    sub_10002A47C();
    sub_100024F0C();
  }

  sub_10014F62C(v4, 2, v0);
}

void sub_100151B40()
{
  if (v27)
  {
    if ((v1[1] & 1) != 0)
    {
      if (v0)
      {
        unint64_t v11 = sub_100029C98();
        uint64_t v7 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v11);
        uint64_t v9 = v7;
        uint64_t v10 = 4LL;
        goto LABEL_9;
      }

      goto LABEL_33;
    }

    sub_100156A68(*(uint64_t (**)(void))(*v3 + 1016LL));
    if (!v2)
    {
      sub_10015694C();
      sub_10014F190();
      if (v0) {
        sub_100132A04();
      }
      sub_100156934();
      uint64_t v31 = &type metadata for ChannelEvent;
      LOBYTE(v28) = 1;
      goto LABEL_32;
    }

    goto LABEL_22;
  }

  if (v5 == 1)
  {
    if ((*v1 & 1) != 0)
    {
      if (v0)
      {
        unint64_t v6 = sub_100029C98();
        uint64_t v7 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v6);
        uint64_t v9 = v7;
        uint64_t v10 = 5LL;
LABEL_9:
        sub_1001565C0(v7, v8, v10);
        sub_100156574(v9);
        sub_10002A620();
        sub_1001566A8(v9);
        return;
      }

      goto LABEL_33;
    }

    sub_100156A90();
    uint64_t v15 = sub_1000175B0(&qword_1002A9710);
    if (sub_1001568CC( v15,  v16,  v15,  (uint64_t)&type metadata for ChannelError,  v17,  v18,  v19,  v20,  v28,  v29,  v30,  (uint64_t)v31,  v32,  v33))
    {
      BOOL v27 = v29 == 3 && v28 == 6;
      if (v27)
      {
        sub_1001568FC(v28, v29, v21, v22, v23, v24, v25, v26, v28, v29, v30, (uint64_t)v31, v32, v33);
LABEL_29:
        sub_10014F1B4();
        if (v0) {
          sub_100132A04();
        }
        sub_100156934();
        uint64_t v31 = &type metadata for ChannelEvent;
        LOBYTE(v28) = 0;
LABEL_32:
        ChannelPipeline.fireUserInboundEventTriggered(_:)((uint64_t)&v28);
        sub_100024F0C();
        sub_100019F7C(&v28);
LABEL_33:
        sub_10010D9C8();
        return;
      }

      sub_100038470(v28, v29);
    }

    swift_errorRelease(v33);
    sub_100156A68(*(uint64_t (**)(void))(*v3 + 1016LL));
    if (!v2) {
      goto LABEL_29;
    }
LABEL_22:
    if (v0)
    {
      sub_10002A710();
      sub_100156574(v2);
      sub_10002A47C();
    }

    sub_10002A47C();
    goto LABEL_33;
  }

  if (v3[36])
  {
    v3[36] = 0LL;
    unint64_t v12 = sub_100029E1C();
    uint64_t v13 = sub_1000252D0((uint64_t)&type metadata for EventLoopError, v12);
    sub_100156984(v13, v14);
    sub_10002A81C(v2);
    sub_10002A47C();
    sub_10002A47C();
    sub_100024F0C();
  }

  sub_10014FB1C(v4, 2, v0);
}

void sub_100151D34(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v4 = a2;
  sub_100171484(a1, a3, a4, (uint64_t)&v4, 4u);
}

void sub_100151D94(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  v6[0] = a2;
  v6[1] = a3;
  int v7 = a4;
  sub_100171484(a1, a5, a6, (uint64_t)v6, 0x14u);
}

void sub_100151DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2;
  sub_100171484(a1, a3, a4, (uint64_t)&v4, 8u);
}

uint64_t sub_100151E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  socklen_t v9 = 8;
  int v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
  *int v7 = 0LL;
  sub_1001711C4(a1, a2, a3, (uint64_t)v7, &v9);
  if (!v3) {
    a3 = *v7;
  }
  swift_slowDealloc(v7, -1LL, -1LL);
  return a3;
}

uint64_t sub_100151F30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  socklen_t v9 = 4;
  int v7 = (_DWORD *)swift_slowAlloc(4LL, -1LL);
  *int v7 = 0;
  sub_1001711C4(a1, a2, a3, (uint64_t)v7, &v9);
  if (!v3) {
    a3 = *v7;
  }
  sub_1001568DC();
  return a3;
}

void sub_100151FF4(uint64_t a1, char a2, __int16 a3, uint64_t a4)
{
  if ((a3 & 0x100) != 0) {
    char v8 = 0;
  }
  else {
    char v8 = a3;
  }
  uint64_t v9 = sub_100125CF8(v8);
  uint64_t v10 = sub_100125CF8(a2);
  swift_beginAccess(a1 + 16, v15, 0LL, 0LL);
  if (*(_BYTE *)(a1 + 16) == 1)
  {
    uint64_t v11 = *(unsigned int *)(a1 + 20);
    swift_retain();
    sub_100125D00(v9, v11, a4, v10, v4);
  }

  else
  {
    unint64_t v12 = sub_100025100();
    uint64_t v13 = swift_allocError(&type metadata for IOError, v12, 0LL, 0LL);
    *(void *)uint64_t v14 = 0xD00000000000001FLL;
    *(void *)(v14 + 8) = 0x80000001002194A0LL;
    *(_DWORD *)(v14 + 16) = 9;
    swift_willThrow(v13);
  }

uint64_t sub_1001520F0( uint64_t a1, char a2, __int16 a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = v5;
  if ((a3 & 0x100) != 0) {
    char v11 = 0;
  }
  else {
    char v11 = a3;
  }
  uint64_t v12 = sub_100125CF8(v11);
  uint64_t v13 = sub_100125CF8(a2);
  if (sub_1000CCD30())
  {
    uint64_t v14 = *(unsigned int *)(a1 + 16);
    sub_10002A75C();
    return a5(v12, v14, a4, v13, v7);
  }

  else
  {
    unint64_t v16 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v16);
    sub_100073658();
    *uint64_t v17 = v18;
    v17[1] = 0x80000001002194A0LL;
    return sub_100156540(v19, (uint64_t)v17);
  }

uint64_t sub_1001521BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4;
  uint64_t v11 = type metadata accessor for ServerSocket();
  sub_100019310(v11, 21LL);
  uint64_t v12 = sub_100052414(a1, 1);
  if (v5)
  {
    sub_10002A5A4();
    sub_10009B6D8();
  }

  else
  {
    uint64_t v13 = v12;
    sub_100019310(v6, 312LL);
    sub_10001EDE0();
    sub_10002A674();
    swift_unknownObjectRetain(a3);
    a4 = sub_100152AC4(v13, a2, a3, a4, v14, v15, v16, v17);
    int v18 = *(_DWORD *)(a4 + 288);
    swift_retain();
    ChannelPipeline.syncOperations.getter();
    sub_1000524AC(v18);
    sub_10002A7BC();
    sub_10002A5A4();
    sub_10009B6D8();
    sub_100024F0C();
    sub_10001ED6C();
  }

  return a4;
}

uint64_t sub_1001522E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = type metadata accessor for ServerSocket();
  sub_100019310(v9, 21LL);
  int v10 = sub_10015690C();
  uint64_t v12 = sub_100052358(v10, v11);
  if (v4)
  {
    sub_10001ED6C();
    return sub_10009B6D8();
  }

  else
  {
    uint64_t v14 = v12;
    uint64_t v15 = sub_100019310(v5, 312LL);
    return sub_100152AC4(v14, a1, a2, a3, v15, v16, v17, v18);
  }

uint64_t sub_10015238C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = sub_100156730();
  uint64_t v8 = sub_100019310(v7, 20LL);
  uint64_t v9 = a2;
  uint64_t v10 = v8;
  uint64_t v11 = sub_1000CCA40(v9);
  if (!v3)
  {
    uint64_t v12 = v11;
    sub_100019310(v4, 377LL);
    sub_10002A75C();
    sub_10002A4C8();
    uint64_t v10 = sub_100153A98(v12, 0LL, 0LL, a1);
    sub_10002A524();
  }

  sub_10001EDD8();
  return v10;
}

void sub_100152460()
{
  uint64_t v2 = sub_10015664C();
  sub_100019310(v2, 20LL);
  uint64_t v3 = sub_100072944(v0, 1LL, 1);
  if (v1)
  {
    sub_10002A524();
    sub_100156824();
  }

  else
  {
    sub_1001565F8(v3, v4, v5, v6, v7, v8, v9, v10, v19, v21, v23, v25, v26, v27);
    uint64_t v11 = sub_100019310((uint64_t)&unk_10028A6D8, 56LL);
    sub_100156588( v11,  v12,  v13,  v14,  v15,  v16,  v17,  v18,  v20,  v22,  v24,  (uint64_t)&type metadata for AdaptiveRecvByteBufferAllocator,  (uint64_t)&protocol witness table for AdaptiveRecvByteBufferAllocator,  v27,  v28,  v29);
  }

  sub_100156760();
}

void sub_1001524F8()
{
  uint64_t v1 = sub_10015664C();
  sub_100019310(v1, 20LL);
  uint64_t v2 = sub_10015690C();
  uint64_t v4 = sub_1000729E0(v2, v3);
  if (v0)
  {
    sub_10002A524();
    sub_100156824();
  }

  else
  {
    sub_1001565F8(v4, v5, v6, v7, v8, v9, v10, v11, v20, v22, v24, v26, v27, v28);
    uint64_t v12 = sub_100019310((uint64_t)&unk_10028A6D8, 56LL);
    sub_100156588( v12,  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v21,  v23,  v25,  (uint64_t)&type metadata for AdaptiveRecvByteBufferAllocator,  (uint64_t)&protocol witness table for AdaptiveRecvByteBufferAllocator,  v28,  v29,  v30);
  }

  sub_100156760();
}

uint64_t sub_10015257C( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, ASOctaneSupportXPCService::AdaptiveRecvByteBufferAllocator *a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 312) = 0LL;
  *(_BYTE *)(v8 + 320) = 1;
  sub_1001565F8(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8, v16[0], v16[1], v16[2], (uint64_t)v17, (uint64_t)v18, v19);
  uint64_t v17 = &type metadata for AdaptiveRecvByteBufferAllocator;
  uint64_t v18 = &protocol witness table for AdaptiveRecvByteBufferAllocator;
  uint64_t v13 = sub_100019310((uint64_t)&unk_10028A6D8, 56LL);
  v16[0] = v13;
  __int128 v14 = v20;
  *(_OWORD *)(v13 + 16) = v19;
  *(_OWORD *)(v13 + 32) = v14;
  *(_BYTE *)(v13 + 48) = v21;
  return sub_100151644(a1, a2, a3, a4, v16);
}

void sub_100152628(uint64_t a1)
{
  uint64_t v6 = sub_100156A38(a1);
  sub_1001569E8( v6,  v7,  v8,  (uint64_t)&protocol requirements base descriptor for ChannelOption,  (uint64_t)&associated type descriptor for ChannelOption.Value);
  sub_1001568A4();
  __chkstk_darwin(v9);
  sub_1001567FC();
  __chkstk_darwin(v10);
  sub_10015655C();
  if ((v11 & 1) != 0)
  {
    uint64_t v12 = sub_1001567CC();
    if (sub_100156550( v12,  v2,  v13,  (uint64_t)&type metadata for ChannelOptions.Types.ConnectTimeoutOption))
    {
      sub_100156788();
      int v14 = swift_dynamicCast(&v22, v5, v4, &type metadata for TimeAmount, 6LL);
      uint64_t v15 = v22;
      if (!v14) {
        uint64_t v15 = 0LL;
      }
      *(void *)(v1 + 312) = v15;
      *(_BYTE *)(v1 + 320) = v14 ^ 1;
    }

    else
    {
      uint64_t v18 = sub_100156A0C();
      sub_1001846A0(v18, v19, v20, v21);
    }

    sub_100041BB4(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  }

  else
  {
    unint64_t v16 = sub_100029C98();
    sub_1000252D0((uint64_t)&type metadata for ChannelError, v16);
    sub_1000ABEFC(v17, 2LL);
  }

  sub_1001569DC();
  sub_100156774();
}

void sub_100152720()
{
  if ((v5 & 1) != 0)
  {
    uint64_t v6 = sub_10015679C();
    if (sub_100156550(v6, v1, v7, (uint64_t)&type metadata for ChannelOptions.Types.ConnectTimeoutOption))
    {
      char v8 = *(_BYTE *)(v0 + 320);
      uint64_t v18 = *(void *)(v0 + 312);
      char v19 = v8;
      uint64_t v9 = sub_1000175B0(&qword_1002B6E68);
      uint64_t v12 = sub_1001568BC( v9,  v10,  v11,  (uint64_t)&protocol requirements base descriptor for ChannelOption,  (uint64_t)&associated type descriptor for ChannelOption.Value);
      sub_10006B934(v2, (uint64_t)&v18, v9, v12);
    }

    else
    {
      uint64_t v15 = sub_1001569C4();
      sub_1001848E4(v15, v16, v17);
    }

    sub_100041BB4(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  }

  else
  {
    unint64_t v13 = sub_100029C98();
    sub_1000252D0((uint64_t)&type metadata for ChannelError, v13);
    sub_1000ABEFC(v14, 2LL);
  }

  sub_1001569DC();
  sub_1000226D8();
}

uint64_t sub_10015280C(unint64_t a1)
{
  uint64_t v3 = v1;
  char v4 = (v2 != 0) | sub_100072A6C(a1);
  if ((v4 & 1) == 0 && (*(_BYTE *)(v1 + 320) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + 312);
    uint64_t v6 = sub_100019310((uint64_t)&unk_10028A778, 32LL);
    *(void *)(v6 + 16) = v3;
    *(void *)(v6 + 24) = v5;
    sub_10002A75C();
    sub_10002A4C8();
    static NIODeadline.now()();
    uint64_t v8 = static NIODeadline.+ infix(_:_:)(v7, v5);
    uint64_t v9 = sub_1001504F8(v8, (uint64_t)sub_1001563DC, v6);
    sub_10001ED6C();
    sub_10002A524();
    *(void *)(v3 + 288) = v9;
    swift_release();
  }

  return v4 & 1;
}

uint64_t sub_1001528C4(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 96))
  {
    unint64_t v3 = sub_100029C98();
    uint64_t v4 = swift_allocError(&type metadata for ChannelError, v3, 0LL, 0LL);
    *(void *)uint64_t v5 = a2;
    *(_BYTE *)(v5 + 8) = 0;
    sub_10015195C();
    return swift_errorRelease(v4);
  }

  return result;
}

void sub_100152938()
{
  uint64_t v1 = *(void *)(v0 + 288);
  if (v1)
  {
    *(void *)(v0 + 288) = 0LL;
    unint64_t v2 = sub_100029E1C();
    uint64_t v3 = sub_1000252D0((uint64_t)&type metadata for EventLoopError, v2);
    *uint64_t v4 = 1;
    swift_errorRetain(v3);
    sub_100098A70(v3, 1LL, v1);
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    sub_10002A5A4();
  }

  sub_100072E40();
  sub_10002A7C4();
}

void sub_1001529B4()
{
}

uint64_t sub_1001529E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void sub_100152A1C()
{
}

void sub_100152A38()
{
}

uint64_t sub_100152A54()
{
  uint64_t v0 = sub_100151928();
  return swift_deallocClassInstance(v0, 321LL, 7LL);
}

uint64_t type metadata accessor for SocketChannel(uint64_t a1)
{
  return sub_1000201F4(a1, qword_1002B6260, (uint64_t)&nominal type descriptor for SocketChannel);
}

uint64_t sub_100152A84(uint64_t a1)
{
  unint64_t v2 = "\t";
  return swift_initClassMetadata2(a1, 256LL, 1LL, &v2, a1 + 1024);
}

uint64_t sub_100152AC4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ASOctaneSupportXPCService::AdaptiveRecvByteBufferAllocator *a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)(v8 + 288) = 128;
  *(void *)(v8 + 296) = a3;
  *(void *)(v8 + 304) = a4;
  sub_1001565F8(a1, a2, a3, a4, a5, a6, a7, a8, v14[0], v14[1], v14[2], (uint64_t)v15, (uint64_t)v16, v17);
  uint64_t v15 = &type metadata for AdaptiveRecvByteBufferAllocator;
  uint64_t v16 = &protocol witness table for AdaptiveRecvByteBufferAllocator;
  uint64_t v11 = sub_100019310((uint64_t)&unk_10028A6D8, 56LL);
  v14[0] = v11;
  __int128 v12 = v18;
  *(_OWORD *)(v11 + 16) = v17;
  *(_OWORD *)(v11 + 32) = v12;
  *(_BYTE *)(v11 + 48) = v19;
  return sub_10014EB94(a1, 0LL, 0LL, a2, v14, (uint64_t (*)(uint64_t, uint64_t))sub_1001ADC88);
}

void sub_100152B68(uint64_t a1)
{
  uint64_t v6 = sub_100156A38(a1);
  sub_1001569E8( v6,  v7,  v8,  (uint64_t)&protocol requirements base descriptor for ChannelOption,  (uint64_t)&associated type descriptor for ChannelOption.Value);
  sub_1001568A4();
  __chkstk_darwin(v9);
  sub_1001567FC();
  __chkstk_darwin(v10);
  sub_10015655C();
  if ((v11 & 1) != 0)
  {
    uint64_t v12 = sub_1001567CC();
    if (sub_100156550(v12, v2, v13, (uint64_t)&type metadata for ChannelOptions.Types.BacklogOption))
    {
      sub_100156788();
      sub_10006B934((uint64_t)&v20, v5, v4, (uint64_t)&type metadata for Int32);
      *(_DWORD *)(v1 + 288) = v20;
    }

    else
    {
      uint64_t v16 = sub_100156A0C();
      sub_100026F24(v16, v17, v18, v19);
    }

    sub_100041BB4(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  }

  else
  {
    unint64_t v14 = sub_100029C98();
    sub_1000252D0((uint64_t)&type metadata for ChannelError, v14);
    sub_1000ABEFC(v15, 2LL);
  }

  sub_1001569DC();
  sub_100156774();
}

void sub_100152C4C()
{
  if ((v5 & 1) != 0)
  {
    uint64_t v6 = sub_10015679C();
    uint64_t v8 = sub_100156550(v6, v1, v7, (uint64_t)&type metadata for ChannelOptions.Types.BacklogOption);
    if ((_DWORD)v8)
    {
      int v17 = *(_DWORD *)(v0 + 288);
      uint64_t v11 = sub_1001568BC( v8,  v9,  v10,  (uint64_t)&protocol requirements base descriptor for ChannelOption,  (uint64_t)&associated type descriptor for ChannelOption.Value);
      sub_10006B934(v2, (uint64_t)&v17, (uint64_t)&type metadata for Int32, v11);
    }

    else
    {
      uint64_t v14 = sub_1001569C4();
      sub_1000275B8(v14, v15, v16);
    }

    sub_100041BB4(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  }

  else
  {
    unint64_t v12 = sub_100029C98();
    sub_1000252D0((uint64_t)&type metadata for ChannelError, v12);
    sub_1000ABEFC(v13, 2LL);
  }

  sub_1001569DC();
}

void sub_100152D2C(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_10014E8C4();
  if ((v6 & 1) == 0)
  {
    if (!a2) {
      return;
    }
    unint64_t v13 = sub_100029C98();
    uint64_t v14 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v13);
    uint64_t v16 = v14;
    uint64_t v17 = 2LL;
    goto LABEL_8;
  }

  sub_10014E918();
  if ((v7 & 1) != 0)
  {
    uint64_t v8 = sub_10003D72C( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/SocketChannel.swift",  115LL,  2LL,  218LL);
    uint64_t v9 = sub_100019310((uint64_t)&unk_10028A700, 32LL);
    *(void *)(v9 + 16) = v3;
    *(void *)(v9 + 24) = a2;
    uint64_t v10 = sub_100019310((uint64_t)&unk_10028A728, 32LL);
    *(void *)(v10 + 16) = sub_100156334;
    *(void *)(v10 + 24) = v9;
    sub_100041B5C();
    sub_10002A4C8();
    sub_10002A674();
    sub_100172010( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/SocketChannel.swift",  115LL,  2LL,  219LL,  (uint64_t)sub_10007D590,  v10);
    sub_10001EDD8();
    swift_release();
    *(void *)(sub_100019310((uint64_t)&unk_10028A750, 24LL) + 16) = a2;
    sub_100041B5C();
    ChannelPipeline.syncOperations.getter();
    sub_10001EDE0();
    sub_1000FEE04();
    sub_100024F0C();
    swift_release();
    sub_10002A4C8();
    uint64_t v11 = sub_1000CCEDC(a1);
    sub_100156924(v11, v12, (uint64_t (*)(void))sub_1000AAA30);
    sub_1000524AC(*(_DWORD *)(v3 + 288));
    sub_100132A04();
    sub_10002A780(v8);
    return;
  }

  if (a2)
  {
    unint64_t v18 = sub_100029C98();
    uint64_t v14 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v18);
    uint64_t v16 = v14;
    uint64_t v17 = 12LL;
LABEL_8:
    sub_1001565C0(v14, v15, v17);
    sub_100098A70(v16, 1LL, a2);
    swift_errorRelease(v16);
    sub_1001567C4(v16);
  }

uint64_t sub_100152F44(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    swift_errorRetain(result);
    sub_100098A70(v3, 1LL, a2);
    return swift_errorRelease(v3);
  }

  return result;
}

uint64_t sub_100152F84()
{
  return sub_1000AB4C4() & 1;
}

uint64_t sub_100152F9C()
{
  return sub_1001543A8();
}

void sub_100152FB0()
{
  uint64_t v2 = *(void *)(v0 + 144);
  if (!v2)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    return;
  }

  uint64_t v3 = v1;
  uint64_t v4 = v0;
  sub_10014E8C4();
  if ((v5 & 1) == 0)
  {
LABEL_17:
    unint64_t v33 = sub_100029C98();
    sub_1000252D0((uint64_t)&type metadata for ChannelError, v33);
    sub_10002A720(v34, 6LL);
    goto LABEL_18;
  }

  uint64_t v6 = *(void *)(v0 + 32);
  if (!sub_1000CCD30())
  {
LABEL_16:
    unint64_t v30 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v30);
    sub_100073658();
    sub_1001569AC(v31, v32);
LABEL_18:
    sub_1000AA06C();
    return;
  }

  BOOL v7 = v2 == 1;
  uint64_t v8 = 1LL;
  uint64_t v40 = v2;
  while (1)
  {
    sub_100170D34();
    if (v3) {
      break;
    }
    uint64_t v10 = v9;
    if ((v9 & 0x100000000LL) != 0) {
      break;
    }
    uint64_t v43 = v8;
    uint64_t v11 = sub_100156730();
    sub_100019310(v11, 20LL);
    uint64_t v12 = sub_1000CCA40(v10);
    if (!sub_100156A28())
    {
      unint64_t v35 = sub_100025100();
      sub_1000252D0((uint64_t)&type metadata for IOError, v35);
      sub_100073658();
      *uint64_t v36 = v37;
      v36[1] = 0x80000001002194A0LL;
      sub_100156540(v38, (uint64_t)v36);
      uint64_t v39 = sub_100156A4C();
      swift_willThrow(v39);
      swift_release();
      return;
    }

    sub_1001718CC();
    uint64_t v13 = v6;
    *(_BYTE *)(v4 + 88) = 0;
    uint64_t v14 = *(void *)(v4 + 304);
    uint64_t v15 = sub_10002A444();
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8);
    sub_100041B08();
    uint64_t v17 = (void *)v16(v15, v14);
    if (object_getClass(v17) != (Class)&OBJC_CLASS____TtC25ASOctaneSupportXPCService19SelectableEventLoop) {
      uint64_t v17 = 0LL;
    }
    uint64_t v18 = type metadata accessor for SocketChannel(0LL);
    sub_100019310(v18, 321LL);
    sub_10002A674();
    uint64_t v23 = sub_10015257C(v12, v4, (uint64_t)&off_1002768E8, v17, v19, v20, v21, v22);
    uint64_t v24 = sub_100156A54();
    v41[3] = v18;
    v41[0] = v23;
    char v42 = 2;
    uint64_t v25 = *(void *)(v24 + 56);
    uint64_t v26 = sub_10002A444();
    EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  1157LL,  v26,  v25);
    if (sub_100095918())
    {
      swift_retain();
      sub_1000963AC((uint64_t)v41);
      swift_release();
      swift_release();
    }

    uint64_t v6 = v13;
    swift_release();
    swift_release();
    sub_1000324E8((uint64_t)v41);
    if (v7) {
      return;
    }
    uint64_t v27 = v43;
    uint64_t v28 = v43 + 1;
    if (v43 == -1) {
      goto LABEL_23;
    }
    sub_10014E8C4();
    if ((v29 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v7 = v28 == v40;
    uint64_t v8 = v27 + 1;
    if (!sub_1000CCD30()) {
      goto LABEL_16;
    }
  }

void sub_1001532A8(uint64_t a1)
{
  uint64_t v3 = a1;
  swift_errorRetain(a1);
  uint64_t v2 = sub_1000175B0(&qword_1002A9710);
  if ((sub_10003556C(v2, (uint64_t)&v3, v2, (uint64_t)&type metadata for NIOFcntlFailedError) & 1) == 0)
  {
    uint64_t v4 = a1;
    swift_errorRetain(a1);
  }

  sub_100013868();
}

void sub_100153358()
{
  uint64_t v1 = v0;
  ChannelPipeline.syncOperations.getter();
  sub_10002A4C8();
  SelectableEventLoop.execute(_:)((uint64_t)sub_1001562F0, v1);
  sub_100024F0C();
  sub_10002A780(v1);
  sub_10001945C();
}

uint64_t sub_1001533A8(uint64_t a1)
{
  uint64_t v3 = v2;
  swift_retain_n(a1, 2LL);
  sub_100101F64( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/SocketChannel.swift",  115LL,  2LL,  301LL,  v3,  (uint64_t)sub_1001562F8,  a1);
  swift_release();
  swift_release();
  swift_retain_n(a1, 2LL);
  swift_retain();
  sub_1000FEE04();
  swift_release();
  return swift_release();
}

uint64_t sub_100153464()
{
  if ((v0 & 1) != 0) {
    return sub_100150174(0LL);
  }
  unint64_t v2 = sub_100029C98();
  uint64_t v3 = swift_allocError(&type metadata for ChannelError, v2, 0LL, 0LL);
  *(void *)uint64_t v4 = 2LL;
  *(_BYTE *)(v4 + 8) = 3;
  return swift_willThrow(v3);
}

uint64_t sub_1001534D4()
{
  return swift_release();
}

void sub_100153508(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = sub_100029C98();
    uint64_t v3 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v2);
    sub_1001565C0(v3, v4, 1LL);
    sub_100156574(v3);
    sub_10002A620();
    swift_errorRelease(v3);
  }

void sub_10015355C()
{
}

uint64_t sub_100153588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void sub_1001535C0()
{
}

void sub_1001535DC()
{
  uint64_t v0 = sub_10002A75C();
  sub_100151230(v0);
  sub_10002A524();
  sub_10002A7C4();
}

void sub_10015361C()
{
}

void sub_100153638()
{
  uint64_t v0 = sub_10001EDE0();
  sub_100150EB4(v0);
  sub_10001ED6C();
  sub_1001566D8();
}

uint64_t sub_100153684()
{
  return swift_unknownObjectRelease(*(void *)(v0 + 296));
}

uint64_t sub_10015368C()
{
  uint64_t v0 = sub_10014EDEC();
  swift_unknownObjectRelease(v0[37]);
  return swift_deallocClassInstance(v0, 312LL, 7LL);
}

uint64_t type metadata accessor for ServerSocketChannel(uint64_t a1)
{
  return sub_1000201F4(a1, qword_1002B66D0, (uint64_t)&nominal type descriptor for ServerSocketChannel);
}

uint64_t sub_1001536D4(uint64_t a1)
{
  v2[0] = (char *)&value witness table for Builtin.Int32 + 64;
  v2[1] = &unk_1002052D8;
  return swift_initClassMetadata2(a1, 256LL, 2LL, v2, a1 + 864);
}

uint64_t sub_100153720()
{
  uint64_t v1 = (_BYTE *)(*(void *)(*(void *)(v0 + 296) + 176LL) + 16LL);
  sub_10002A4C8();
  uint64_t v2 = sub_100006CE4(v1);
  sub_10001EDD8();
  return v2;
}

uint64_t sub_10015375C()
{
  return v0 & 1;
}

uint64_t sub_100153774()
{
  return swift_release(*(void *)(v0 + 296));
}

void *sub_10015377C()
{
  if ((*(_BYTE *)(v0 + 376) & 1) == 0)
  {
    uint64_t v1 = *(void *)(v0 + 304);
    uint64_t v2 = *(void *)(v0 + 320);
    uint64_t v3 = *(void *)(v0 + 336);
    uint64_t v4 = *(void *)(v0 + 360);
    if (v1) {
      sub_10001A408(v1);
    }
    if (v2) {
      sub_10001A408(v2);
    }
    if (v3) {
      sub_10001A408(v3);
    }
    if (v4) {
      sub_10001A408(v4);
    }
  }

  char v5 = sub_10014EDEC();
  swift_release();
  return v5;
}

uint64_t sub_1001537F8()
{
  uint64_t v0 = sub_10015377C();
  return swift_deallocClassInstance(v0, 377LL, 7LL);
}

uint64_t type metadata accessor for DatagramChannel(uint64_t a1)
{
  return sub_1000201F4(a1, qword_1002B6A98, (uint64_t)&nominal type descriptor for DatagramChannel);
}

uint64_t sub_100153828(uint64_t a1)
{
  v2[0] = &unk_100205320;
  v2[1] = &unk_100205320;
  void v2[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[3] = &unk_100205338;
  return swift_initClassMetadata2(a1, 256LL, 4LL, v2, a1 + 864);
}

uint64_t sub_100153880(uint64_t a1, int a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = *(void *)v4;
  *(_WORD *)(v4 + 288) = 0;
  *(_OWORD *)(v4 + 304) = 0u;
  *(_OWORD *)(v4 + 320) = 0u;
  *(_OWORD *)(v4 + 336) = 0u;
  *(_OWORD *)(v4 + 352) = 0u;
  *(void *)(v4 + 368) = 0LL;
  *(_BYTE *)(v4 + 376) = 1;
  uint64_t v8 = sub_100156730();
  sub_100019310(v8, 20LL);
  sub_10002A4C8();
  uint64_t v9 = sub_100072944(a2, 2LL, 0);
  if (v3)
  {
    sub_10002A5A4();
  }

  else
  {
    uint64_t v10 = v9;
    if (sub_100156A28())
    {
      sub_1001718CC();
      uint64_t v28 = *(void *)(a1 + 160);
      uint64_t v11 = *(void *)(a1 + 176);
      uint64_t v12 = *(void *)(a1 + 120);
      uint64_t v24 = *(void *)(a1 + 112);
      uint64_t v25 = *(void *)(a1 + 168);
      uint64_t v23 = *(void *)(a1 + 184);
      uint64_t v13 = *(void *)(a1 + 128);
      uint64_t v14 = *(void *)(a1 + 136);
      sub_10002A718(a1 + 192, (uint64_t)v27, 0LL);
      __int128 v22 = *(_OWORD *)(a1 + 192);
      uint64_t v15 = *(void *)(a1 + 208);
      uint64_t v16 = type metadata accessor for PendingDatagramWritesManager();
      sub_100019310(v16, 201LL);
      *(void *)(v4 + 296) = sub_1001670DC(v28, v25, v24, v12, v11, v23, v13, v14, v22, v15);
      sub_10001EDD8();
      void v26[3] = &type metadata for FixedSizeRecvByteBufferAllocator;
      v26[4] = &protocol witness table for FixedSizeRecvByteBufferAllocator;
      v26[0] = 2048LL;
      return sub_10014EB94(v10, 0LL, 0LL, a1, v26, (uint64_t (*)(uint64_t, uint64_t))sub_1001ADC88);
    }

    unint64_t v18 = sub_100025100();
    uint64_t v19 = sub_1000252D0((uint64_t)&type metadata for IOError, v18);
    void *v20 = 0xD00000000000001FLL;
    v20[1] = 0x80000001002194A0LL;
    sub_100156540(v19, (uint64_t)v20);
    sub_10001EDD8();
    uint64_t v21 = sub_100156A4C();
    swift_willThrow(v21);
    sub_10001ED6C();
  }

  swift_release();
  return sub_100156A00(v4, v7);
}

uint64_t sub_100153A98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4;
  uint64_t v11 = *(void *)v4;
  *(_WORD *)(v4 + 288) = 0;
  *(_OWORD *)(v4 + 304) = 0u;
  *(_OWORD *)(v4 + 320) = 0u;
  *(_OWORD *)(v4 + 336) = 0u;
  *(_OWORD *)(v4 + 352) = 0u;
  *(void *)(v4 + 368) = 0LL;
  *(_BYTE *)(v4 + 376) = 1;
  if (!sub_100156A28())
  {
    unint64_t v12 = sub_100025100();
    uint64_t v13 = sub_1000252D0((uint64_t)&type metadata for IOError, v12);
    void *v14 = 0xD00000000000001FLL;
    v14[1] = 0x80000001002194A0LL;
    sub_100156540(v13, (uint64_t)v14);
    goto LABEL_5;
  }

  sub_10002A4C8();
  sub_1001718CC();
  if (v5)
  {
    sub_10002A7BC();
LABEL_5:
    swift_release();
    sub_10002A524();
    swift_unknownObjectRelease(a2);
    return sub_100156A00(v4, v11);
  }

  uint64_t v28 = *(void *)(a4 + 160);
  uint64_t v24 = *(void *)(a4 + 112);
  uint64_t v25 = *(void *)(a4 + 168);
  uint64_t v16 = *(void *)(a4 + 128);
  uint64_t v22 = *(void *)(a4 + 176);
  uint64_t v23 = *(void *)(a4 + 120);
  uint64_t v21 = *(void *)(a4 + 184);
  uint64_t v17 = *(void *)(a4 + 136);
  sub_10002A718(a4 + 192, (uint64_t)v27, 0LL);
  __int128 v20 = *(_OWORD *)(a4 + 192);
  uint64_t v18 = *(void *)(a4 + 208);
  uint64_t v19 = type metadata accessor for PendingDatagramWritesManager();
  sub_100019310(v19, 201LL);
  *(void *)(v6 + 296) = sub_1001670DC(v28, v25, v24, v23, v22, v21, v16, v17, v20, v18);
  sub_10001EDD8();
  void v26[3] = &type metadata for FixedSizeRecvByteBufferAllocator;
  v26[4] = &protocol witness table for FixedSizeRecvByteBufferAllocator;
  v26[0] = 2048LL;
  return sub_10014EB94(a1, a2, a3, a4, v26, (uint64_t (*)(uint64_t, uint64_t))sub_1001ADC88);
}

uint64_t sub_100153C7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v53 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a4,  a3,  &protocol requirements base descriptor for ChannelOption,  &associated type descriptor for ChannelOption.Value);
  uint64_t v9 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v10 = *(void *)(a3 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10014E8C4();
  if ((v13 & 1) == 0)
  {
    unint64_t v22 = sub_100029C98();
    sub_1000252D0((uint64_t)&type metadata for ChannelError, v22);
    return sub_1000ABEFC(v23, 2LL);
  }

  uint64_t v52 = v10;
  uint64_t v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  uint64_t v16 = sub_100156550(v14, (uint64_t)v12, v15, (uint64_t)&type metadata for ChannelOptions.Types.WriteSpinOption);
  if (!(_DWORD)v16)
  {
    uint64_t v25 = sub_100156550( v16,  (uint64_t)v12,  v17,  (uint64_t)&type metadata for ChannelOptions.Types.WriteBufferWaterMarkOption);
    if ((_DWORD)v25)
    {
      uint64_t v27 = *(void *)(v4 + 296);
      uint64_t v28 = sub_1001565E4();
      sub_1001565D0(v28, v29, v30, (uint64_t)&type metadata for ChannelOptions.Types.WriteBufferWaterMark);
      *(_OWORD *)(v27 + 160) = v54;
      return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v12, a3);
    }

    uint64_t v31 = sub_100156550( v25,  (uint64_t)v12,  v26,  (uint64_t)&type metadata for ChannelOptions.Types.DatagramVectorReadMessageCountOption);
    if ((v31 & 1) != 0) {
      return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v12, a3);
    }
    uint64_t v33 = sub_100156550( v31,  (uint64_t)v12,  v32,  (uint64_t)&type metadata for ChannelOptions.Types.ExplicitCongestionNotificationsOption);
    if ((_DWORD)v33)
    {
      uint64_t v35 = sub_1001565E4();
      uint64_t v38 = sub_1001565D0(v35, v36, v37, (uint64_t)&type metadata for Bool);
      unint64_t v39 = sub_1000AAA30(v38);
      sub_100029DF4(v40);
      if ((~v39 & 0xF000000000000007LL) != 0)
      {
        uint64_t v41 = v39;
        if (!(v39 >> 62))
        {
          sub_100029DF4(v39);
          *(_BYTE *)(v4 + 288) = 1;
          uint64_t v42 = 0LL;
          int v43 = 27;
          goto LABEL_28;
        }

        if (v39 >> 62 == 1)
        {
          sub_100029DF4(v39);
          *(_BYTE *)(v4 + 288) = 1;
          uint64_t v42 = 41LL;
          int v43 = 35;
LABEL_28:
          sub_100150840(v42, v43);
          return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v12, a3);
        }

        goto LABEL_22;
      }
    }

    else
    {
      if (!sub_100156550( v33,  (uint64_t)v12,  v34,  (uint64_t)&type metadata for ChannelOptions.Types.ReceivePacketInfo))
      {
        sub_100026F24(a1, v53, a3, a4);
        return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v12, a3);
      }

      uint64_t v44 = sub_1001565E4();
      uint64_t v47 = sub_1001565D0(v44, v45, v46, (uint64_t)&type metadata for Bool);
      unint64_t v48 = sub_1000AAA30(v47);
      sub_100029DF4(v49);
      if ((~v48 & 0xF000000000000007LL) != 0)
      {
        uint64_t v41 = v48;
        if (!(v48 >> 62))
        {
          sub_100029DF4(v48);
          *(_BYTE *)(v4 + 289) = 1;
          if (qword_1002A8D98 != -1) {
            swift_once(&qword_1002A8D98, sub_100186388);
          }
          int v43 = dword_1002EB9E8;
          uint64_t v42 = 0LL;
          goto LABEL_28;
        }

        if (v48 >> 62 == 1)
        {
          sub_100029DF4(v48);
          *(_BYTE *)(v4 + 289) = 1;
          if (qword_1002A8DA0 != -1) {
            swift_once(&qword_1002A8DA0, sub_1001863AC);
          }
          int v43 = dword_1002EB9EC;
          uint64_t v42 = 41LL;
          goto LABEL_28;
        }

void sub_100153FEC(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10014E8C4();
  if ((v11 & 1) != 0)
  {
    uint64_t v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v10, v5, a2);
    uint64_t v13 = sub_100156580(v12, (uint64_t)v10, a2, (uint64_t)&type metadata for ChannelOptions.Types.WriteSpinOption);
    if ((_DWORD)v13)
    {
      *(void *)&__int128 v49 = *(void *)(*(void *)(v2 + 296) + 192LL);
      uint64_t v16 = sub_10002A41C( v13,  v14,  v15,  (uint64_t)&protocol requirements base descriptor for ChannelOption,  (uint64_t)&associated type descriptor for ChannelOption.Value);
      uint64_t v17 = (ValueMetadata *)&type metadata for UInt;
LABEL_18:
      sub_10006B934(v4, (uint64_t)&v49, (uint64_t)v17, v16);
LABEL_19:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v10, a2);
      goto LABEL_20;
    }

    uint64_t v20 = sub_100156580( v13,  (uint64_t)v10,  a2,  (uint64_t)&type metadata for ChannelOptions.Types.WriteBufferWaterMarkOption);
    if ((_DWORD)v20)
    {
      __int128 v49 = *(_OWORD *)(*(void *)(v2 + 296) + 160LL);
      uint64_t v16 = sub_10002A41C( v20,  v21,  v22,  (uint64_t)&protocol requirements base descriptor for ChannelOption,  (uint64_t)&associated type descriptor for ChannelOption.Value);
      uint64_t v17 = &type metadata for ChannelOptions.Types.WriteBufferWaterMark;
      goto LABEL_18;
    }

    uint64_t v23 = sub_100156580( v20,  (uint64_t)v10,  a2,  (uint64_t)&type metadata for ChannelOptions.Types.DatagramVectorReadMessageCountOption);
    if ((_DWORD)v23)
    {
      if ((*(_BYTE *)(v2 + 376) & 1) != 0) {
        uint64_t v26 = 0LL;
      }
      else {
        uint64_t v26 = *(void *)(v2 + 312);
      }
      *(void *)&__int128 v49 = v26;
      uint64_t v16 = sub_10002A41C( v23,  v24,  v25,  (uint64_t)&protocol requirements base descriptor for ChannelOption,  (uint64_t)&associated type descriptor for ChannelOption.Value);
      uint64_t v17 = (ValueMetadata *)&type metadata for Int;
      goto LABEL_18;
    }

    uint64_t v27 = sub_100156580( v23,  (uint64_t)v10,  a2,  (uint64_t)&type metadata for ChannelOptions.Types.ExplicitCongestionNotificationsOption);
    if ((_DWORD)v27)
    {
      unint64_t v28 = sub_1000AAA30(v27);
      sub_100029DF4(v29);
      if ((~v28 & 0xF000000000000007LL) == 0)
      {
LABEL_31:
        unint64_t v40 = sub_100029C98();
        sub_1000252D0((uint64_t)&type metadata for ChannelError, v40);
        sub_10002A720(v41, 1LL);
LABEL_42:
        sub_1000AA06C();
        goto LABEL_19;
      }

      uint64_t v30 = v28;
      if (!(v28 >> 62))
      {
        sub_100029DF4(v28);
        uint64_t v42 = *(void *)(v2 + 32);
        if (sub_1000CCD30())
        {
          uint64_t v32 = *(unsigned int *)(v42 + 16);
          uint64_t v33 = 0LL;
          uint64_t v34 = 27LL;
          goto LABEL_39;
        }

        goto LABEL_41;
      }

      if (v28 >> 62 == 1)
      {
        sub_100029DF4(v28);
        uint64_t v31 = *(void *)(v2 + 32);
        if (sub_1000CCD30())
        {
          uint64_t v32 = *(unsigned int *)(v31 + 16);
          uint64_t v33 = 41LL;
          uint64_t v34 = 35LL;
LABEL_39:
          uint64_t v44 = sub_100151E54(v32, v33, v34);
          if (v3) {
            goto LABEL_19;
          }
          LOBYTE(v49) = v44 != 0;
          uint64_t v16 = sub_10002A41C( v44,  v45,  v46,  (uint64_t)&protocol requirements base descriptor for ChannelOption,  (uint64_t)&associated type descriptor for ChannelOption.Value);
          uint64_t v17 = (ValueMetadata *)&type metadata for Bool;
          goto LABEL_18;
        }

        goto LABEL_41;
      }

LABEL_41:
    unint64_t v47 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v47);
    sub_1001569AC(v48, 0xD00000000000001FLL);
    goto LABEL_42;
  }

  unint64_t v18 = sub_100029C98();
  sub_1000252D0((uint64_t)&type metadata for ChannelError, v18);
  sub_1000ABEFC(v19, 2LL);
LABEL_20:
  sub_1000226D8();
}

      swift_bridgeObjectRelease(v17);
      return 0LL;
    }

uint64_t sub_1001543A8()
{
  unint64_t v0 = sub_100029C98();
  sub_1000252D0((uint64_t)&type metadata for ChannelError, v0);
  return sub_1000ABEFC(v1, 1LL);
}

uint64_t sub_1001543E4()
{
  if ((*(_BYTE *)(v0 + 376) & 1) != 0) {
    return sub_100154458() & 1;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000034LL,  0x800000010021FEE0LL,  "ASOctaneSupportXPCService/SocketChannel.swift",  45LL,  2LL);
  __break(1u);
  return result;
}

uint64_t sub_100154458()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v48 = (_BYTE *)(v0 + 288);
  memset(v55, 0, sizeof(v55));
  unsigned int v54 = 128;
  swift_beginAccess(v0 + 104, v71, 0LL, 0LL);
  uint64_t v47 = v0 + 104;
  sub_100023BAC(v0 + 104, (uint64_t)v66);
  uint64_t v4 = v68;
  sub_100019F58(v66, *((uint64_t *)&v67 + 1));
  uint64_t v5 = sub_10014E7C4();
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
  sub_100019F7C(v66);
  if ((*(_BYTE *)(v0 + 288) & 1) != 0 || *(_BYTE *)(v0 + 289) == 1)
  {
    uint64_t v7 = *(void *)(v0 + 48);
    swift_beginAccess(v7 + 192, v56, 0LL, 0LL);
    uint64_t v8 = sub_100068318(0LL, *(void *)(v7 + 192), *(void *)(v7 + 200));
    uint64_t v45 = v9;
    uint64_t v46 = v8;
  }

  else
  {
    uint64_t v45 = 0LL;
    uint64_t v46 = 0LL;
  }

  uint64_t v44 = *(void *)(v0 + 144);
  if (!v44) {
LABEL_37:
  }
    __break(1u);
  sub_10014E8C4();
  if ((v10 & 1) != 0)
  {
    char v11 = 0;
    BOOL v12 = v44 == 1;
    unint64_t v50 = 1LL;
    uint64_t v51 = v0;
    while (1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
      {
        sub_10005B858(*(_DWORD *)(v6 + 16));
        uint64_t v14 = v13;
        swift_release();
        uint64_t v6 = v14;
      }

      uint64_t v15 = *(unsigned int *)(v6 + 16);
      v66[0] = v46;
      v66[1] = v45;
      __int128 v67 = 0u;
      __int128 v68 = 0u;
      __int128 v69 = 0u;
      char v70 = 1;
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
      {
        ByteBuffer._Storage.reallocSlice(_:capacity:)(v15 << 32, v15);
        uint64_t v17 = v16;
        swift_release();
        LODWORD(v15) = *(_DWORD *)(v17 + 16);
        uint64_t v6 = v17;
      }

      swift_beginAccess(v6 + 24, v65, 0LL, 0LL);
      sub_1000730B8(*(void *)(v6 + 24), *(void *)(v6 + 24) + v15, (uint64_t)v55, &v54, v66);
      if (v2) {
        return swift_release();
      }
      if ((v19 & 1) == 0)
      {
        swift_release();
        return v11 & 1;
      }

      uint64_t v20 = v18;
      swift_beginAccess(v47, v57, 33LL, 0LL);
      uint64_t v21 = *(void *)(v3 + 128);
      uint64_t v22 = *(void *)(v3 + 136);
      sub_100043F18(v47, v21);
      char v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v20, v21, v22);
      swift_endAccess(v57);
      *(_BYTE *)(v3 + 88) = 0;
      uint64_t v53 = v6;
      BOOL v49 = v12;
      if ((*v48 & 1) == 0 && v48[1] != 1) {
        goto LABEL_17;
      }
      if ((v70 & 1) == 0)
      {
        *(void *)&__int128 v72 = v67;
        uint64_t v73 = v68;
        DWORD2(v72) = DWORD2(v67);
        int v74 = DWORD2(v68);
        __int128 v75 = v69;
        unsigned __int8 v26 = sub_1000694B0(&v72);
        uint64_t v52 = v27;
        uint64_t v24 = v28;
        uint64_t v25 = v26;
      }

      else
      {
LABEL_17:
        uint64_t v52 = 0LL;
        uint64_t v24 = 0LL;
        uint64_t v25 = 4LL;
      }

      unint64_t v29 = sub_1000CCF58();
      uint64_t v30 = sub_10014E970();
      v57[0] = v29;
      v57[1] = v53;
      int v58 = 0;
      int v59 = v20;
      LODWORD(v60) = v15;
      WORD2(v60) = 0;
      BYTE6(v60) = 0;
      uint64_t v61 = v25;
      uint64_t v62 = v52;
      uint64_t v63 = v24;
      char v64 = 1;
      uint64_t v31 = *(void *)(v30 + 56);
      uint64_t ObjectType = swift_getObjectType(*(void *)(v30 + 48));
      EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  1157LL,  ObjectType,  v31);
      if (sub_100095918())
      {
        swift_retain();
        uint64_t v33 = v52;
        sub_100034980(v25, v52);
        swift_retain();
        swift_retain();
        sub_100034980(v25, v52);
        sub_1000963AC((uint64_t)v57);
        swift_release();
      }

      else
      {
        swift_retain();
        uint64_t v33 = v52;
        sub_100034980(v25, v52);
        swift_retain();
        swift_retain();
        sub_100034980(v25, v52);
      }

      swift_release();
      sub_1000324E8((uint64_t)v57);
      if ((v23 & 1) != 0)
      {
        unint64_t v34 = v50;
        if (v50 >= *(void *)(v51 + 144))
        {
          swift_release();
          swift_release();
          sub_100034738(v25, v33);
          sub_100034738(v25, v33);
        }

        else
        {
          sub_100023BAC(v47, (uint64_t)v57);
          uint64_t v35 = v61;
          sub_100019F58(v57, v60);
          uint64_t v36 = sub_10014E7C4();
          uint64_t v37 = *(uint64_t (**)(uint64_t))(v35 + 8);
          unint64_t v34 = v50;
          uint64_t v38 = v37(v36);
          swift_release();
          swift_release();
          sub_100034738(v25, v33);
          sub_100034738(v25, v33);
          swift_release();
          sub_100019F7C(v57);
          uint64_t v53 = v38;
        }
      }

      else
      {
        swift_release();
        swift_release();
        sub_100034738(v25, v33);
        sub_100034738(v25, v33);
        unint64_t v34 = v50;
      }

      uint64_t v2 = 0LL;
      if (v49) {
        break;
      }
      uint64_t v6 = v53;
      if (v34 == -1LL)
      {
        __break(1u);
        goto LABEL_37;
      }

      uint64_t v3 = v51;
      sub_10014E8C4();
      if ((v39 & 1) == 0) {
        goto LABEL_31;
      }
      BOOL v12 = v34 + 1 == v44;
      unint64_t v50 = v34 + 1;
      char v11 = 1;
    }

    swift_release();
    char v11 = 1;
    return v11 & 1;
  }

  else
  {
LABEL_31:
    unint64_t v40 = sub_100029C98();
    uint64_t v41 = swift_allocError(&type metadata for ChannelError, v40, 0LL, 0LL);
    *(void *)uint64_t v42 = 6LL;
    *(_BYTE *)(v42 + 8) = 3;
    swift_willThrow(v41);
    return swift_release();
  }

void sub_100154A6C(uint64_t a1)
{
  uint64_t v3 = a1;
  swift_errorRetain(a1);
  uint64_t v1 = sub_1000175B0(&qword_1002A9710);
  sub_100013868();
}

uint64_t sub_100154AD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002A444();
  sub_10002A618( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  1173LL,  v4);
  if (sub_100095918())
  {
    sub_1000964D0();
    sub_100024F0C();
  }

  sub_100156224((uint64_t)v5);
  return sub_10001EDD8();
}

void sub_100154B80()
{
}

void sub_100154BB8()
{
}

void sub_100154BD4(uint64_t a1)
{
}

uint64_t sub_100154BF4()
{
  uint64_t v1 = *(void *)(v0 + 296);
  if (*(_BYTE *)(v1 + 200) == 1)
  {
    sub_10002A718(v1 + 104, (uint64_t)v7, 0LL);
    if ((*(_BYTE *)(v1 + 136) & 1) == 0)
    {
      sub_10002A674();
      uint64_t v6 = (char *)&loc_100154CFC + dword_100154F5C[sub_1001671F0()];
      __asm { BR              X9 }
    }
  }

  sub_10002A674();
  if (*(_BYTE *)(v1 + 184) == 1)
  {
    sub_10002A5A4();
    return 0;
  }

  else
  {
    uint64_t v3 = *(void *)(v1 + 176);
    ChannelPipeline.syncOperations.getter();
    int v4 = sub_100006CE4((_BYTE *)(v3 + 16));
    sub_100024F0C();
    *(_BYTE *)(v1 + 184) = v4;
    sub_10002A5A4();
    if (v4) {
      return 256;
    }
    else {
      return 0;
    }
  }

void sub_100154D0C()
{
  uint64_t v4 = *(void *)(v3 - 200);
  *(void *)(v5 - 16) = sub_1001561D0;
  *(void *)(v5 - 8) = v4;
  char v7 = sub_1001672F0((uint64_t)sub_100156200, v6);
  if (!v1)
  {
    if (!v7)
    {
      if (*(_BYTE *)(v0 + 200) == 1 && (*(_BYTE *)(v0 + 136) & 1) == 0) {
        JUMPOUT(0x100154CF0LL);
      }
      JUMPOUT(0x100154C50LL);
    }

    if (v7 != 2 && (v2 & 1) == 0)
    {
      uint64_t v8 = *(void *)(v3 - 264);
      BOOL v9 = __CFADD__(v8, 1LL);
      uint64_t v10 = v8 + 1;
      if (v9)
      {
        __break(1u);
        JUMPOUT(0x100154F58LL);
      }

      if (*(_BYTE *)(v0 + 200) == 1 && (*(_BYTE *)(v0 + 136) & 1) == 0)
      {
        *(void *)(v3 - 264) = v10;
        JUMPOUT(0x100154CECLL);
      }
    }

    JUMPOUT(0x100154C54LL);
  }

  sub_10002A5A4();
  JUMPOUT(0x100154CA4LL);
}

void sub_100154F6C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && a2 - a1 >= 1)
  {
    uint64_t v29 = a6;
    uint64_t v13 = *(void *)(a8 + 48);
    swift_beginAccess(v13 + 192, v25, 0LL, 0LL);
    uint64_t v26 = sub_100068318(0LL, *(void *)(v13 + 192), *(void *)(v13 + 200));
    uint64_t v27 = v14;
    uint64_t v28 = 0LL;
    unint64_t v15 = sub_1000AAA30(v26);
    sub_100029DF4(v16);
    if ((~v15 & 0xF000000000000007LL) == 0) {
      goto LABEL_10;
    }
    int v17 = *(_DWORD *)((char *)dword_1002053DC + ((v15 >> 60) & 0xC));
    sub_100029DF4(v15);
    if (v17 == 30)
    {
      sub_100029DDC(v29);
      sub_100069878(a5);
      int v19 = v22;
      unsigned int v20 = 41;
      unsigned int v21 = 36;
    }

    else
    {
      if (v17 != 2)
      {
LABEL_10:
        sub_100069974(v26, v27, v28);
        sub_100072FE0(a1, a2, a3, a4, v23, v24);
        return;
      }

      sub_100029DDC(v29);
      sub_100069878(a5);
      int v19 = v18;
      unsigned int v20 = 0;
      unsigned int v21 = 3;
    }

    sub_100165690(v20, v21, v19);
    sub_100034738(a5, v29);
    goto LABEL_10;
  }

void sub_10015511C(msghdr *a1, unint64_t a2, uint64_t a3)
{
}

void sub_10015514C(unint64_t a1, uint64_t a2)
{
  if ((v4 & 1) != 0)
  {
    uint64_t v5 = sub_1000CCEDC(a1);
    sub_100156924(v5, v9, (uint64_t (*)(void))sub_1000AAA30);
    sub_100150174(a2);
  }

  else if (a2)
  {
    unint64_t v6 = sub_100029C98();
    uint64_t v7 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v6);
    sub_1001565C0(v7, v8, 12LL);
    sub_100156574(v7);
    sub_10002A620();
    swift_errorRelease(v7);
  }

void sub_100155214()
{
}

void sub_100155240()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_retain();
  sub_10002A75C();
  sub_100150B5C(v1);
  sub_10002A524();
  sub_10002A7BC();
  sub_10005EC8C();
}

uint64_t sub_1001552B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_1001552F0()
{
  return sub_100156674(72LL, 16LL, 0x800000010021FDC0LL, (uint64_t (*)(void))sub_1000AAA30);
}

uint64_t sub_100155314()
{
  return sub_1001553E4(72LL, 0xD000000000000010LL, 0x800000010021FDC0LL, (uint64_t (*)(void))sub_1000AAA30);
}

uint64_t sub_100155358()
{
  return sub_100156674(78LL, 22LL, 0x800000010021FDE0LL, (uint64_t (*)(void))sub_1000AAA30);
}

uint64_t sub_10015537C()
{
  return sub_1001553E4(78LL, 0xD000000000000016LL, 0x800000010021FDE0LL, (uint64_t (*)(void))sub_1000AAA30);
}

uint64_t sub_1001553C0()
{
  return sub_100156674(74LL, 18LL, 0x800000010021FE00LL, (uint64_t (*)(void))sub_1000AAA30);
}

uint64_t sub_1001553E4(Swift::Int a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = v4[9];
  uint64_t v8 = (void *)v4[10];
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 0x657669746361202CLL;
  v10._object = (void *)0xEB00000000203D20LL;
  String.append(_:)(v10);
  uint64_t v11 = v4[8];
  ChannelPipeline.syncOperations.getter();
  LODWORD(v7) = sub_100006CE4((_BYTE *)(v11 + 16));
  sub_100024F0C();
  if ((_DWORD)v7) {
    uint64_t v12 = 1702195828LL;
  }
  else {
    uint64_t v12 = 0x65736C6166LL;
  }
  sub_100092D04(v12);
  swift_bridgeObjectRelease();
  v13._object = (void *)0x800000010021B6D0LL;
  v13._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  String.append(_:)(v13);
  uint64_t v14 = a4();
  sub_100029DF4(v15);
  uint64_t v16 = sub_1000175B0(&qword_1002AF5D0);
  uint64_t v17 = Optional.debugDescription.getter(v16);
  int v19 = v18;
  sub_100029DF4(v14);
  v20._uint64_t countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  sub_10001DC10();
  v21._uint64_t countAndFlagsBits = 0xD000000000000012LL;
  v21._object = (void *)0x800000010021B6F0LL;
  String.append(_:)(v21);
  uint64_t v22 = a4();
  uint64_t v24 = v23;
  sub_100029DF4(v22);
  uint64_t v25 = Optional.debugDescription.getter(v16);
  sub_100029DF4(v24);
  sub_100092D04(v25);
  swift_bridgeObjectRelease();
  v26._uint64_t countAndFlagsBits = 32032LL;
  v26._object = (void *)0xE200000000000000LL;
  String.append(_:)(v26);
  return 0LL;
}

uint64_t sub_1001555DC()
{
  return sub_1001553E4(74LL, 0xD000000000000012LL, 0x800000010021FE00LL, (uint64_t (*)(void))sub_1000AAA30);
}

uint64_t sub_100155620(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100155AF0(a1, a2, a3, 0, (uint64_t)&unk_10028A6B0, (uint64_t)sub_100156134);
}

uint64_t sub_100155638(unint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v9 = *(void *)(v4 + 64);
  swift_retain();
  int v10 = sub_100006CE4((_BYTE *)(v9 + 16));
  uint64_t result = swift_release();
  if (v10)
  {
    if (a2 && (*(_BYTE *)(a2 + 64) & 1) == 0)
    {
      if (a3)
      {
        unint64_t v24 = sub_100155E40();
        uint64_t v17 = swift_allocError(&type metadata for NIOMulticastNotSupportedError, v24, 0LL, 0LL);
        void *v25 = a2;
        swift_retain();
        uint64_t v15 = v17;
        goto LABEL_10;
      }

      return result;
    }

    unint64_t v12 = sub_1000AAA30(result);
    uint64_t result = sub_100029DF4(v13);
    if ((~v12 & 0xF000000000000007LL) == 0)
    {
      if (a3)
      {
        unint64_t v14 = sub_100029C98();
        uint64_t v15 = swift_allocError(&type metadata for ChannelError, v14, 0LL, 0LL);
        uint64_t v17 = v15;
        uint64_t v18 = 9LL;
LABEL_9:
        *(void *)uint64_t v16 = v18;
        *(_BYTE *)(v16 + 8) = 3;
LABEL_10:
        swift_errorRetain(v15);
        sub_100098A70(v17, 1LL, a3);
        swift_errorRelease(v17);
        return swift_errorRelease(v17);
      }

      return result;
    }

    unint64_t v20 = a1 >> 62;
    if (*(_DWORD *)((char *)dword_1002053DC + ((v12 >> 60) & 0xC)) == dword_1002053DC[a1 >> 62])
    {
      if (SocketAddress.isMulticast.getter(a1))
      {
        if (a2)
        {
          unint64_t v21 = *(void *)(a2 + 32);
          sub_100029DDC(v21);
          if ((_DWORD)v20)
          {
LABEL_16:
            if ((_DWORD)v20 != 1)
            {
              __break(1u);
              goto LABEL_56;
            }

            if ((~v21 & 0xF000000000000007LL) == 0)
            {
              if ((a4 & 1) != 0) {
                int v22 = 13;
              }
              else {
                int v22 = 12;
              }
              swift_retain();
              int v23 = v22;
              goto LABEL_42;
            }

            if (v21 >> 62 == 1)
            {
              swift_retain();
              sub_100029DF4(v21);
              if (a2)
              {
                unint64_t v32 = *(void *)(a2 + 72);
                if ((v32 & 0x8000000000000000LL) == 0)
                {
                  if (!HIDWORD(v32))
                  {
                    if ((a4 & 1) != 0) {
                      int v23 = 13;
                    }
                    else {
                      int v23 = 12;
                    }
LABEL_42:
                    sub_1001509D0(41LL, v23);
LABEL_48:
                    swift_release();
                    if (a3) {
                      sub_100098A70(0LL, 0LL, a3);
                    }
                    return sub_100029DF4(v12);
                  }

                  uint64_t v36 = "Not enough bits to represent the passed value";
                  uint64_t v37 = 45LL;
LABEL_59:
                  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v36,  v37,  2LL,  "Swift/Integers.swift",  20LL);
                  __break(1u);
                  return result;
                }

uint64_t sub_100155AD8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100155AF0(a1, a2, a3, 1, (uint64_t)&unk_10028A660, (uint64_t)sub_1001560C8);
}

uint64_t sub_100155AF0(unint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = v6;
  uint64_t v14 = *(void *)(*(void *)(v6 + 48) + 24LL);
  sub_10002A75C();
  sub_1000A8B90();
  sub_100156A9C();
  if ((v14 & 1) != 0)
  {
    if (a2)
    {
      uint64_t v15 = sub_100041B08();
      uint64_t v16 = NIONetworkDevice.init(_:)(v15);
    }

    else
    {
      uint64_t v16 = 0LL;
    }

    sub_100155638(a1, v16, a3, a4);
    return sub_100041A88(v16);
  }

  else
  {
    uint64_t v17 = (void *)sub_100019310(a5, 48LL);
    v17[2] = v10;
    v17[3] = a1;
    void v17[4] = a2;
    v17[5] = a3;
    sub_100041B5C();
    sub_10002A75C();
    sub_100041B08();
    sub_10002A4C8();
    ChannelPipeline.syncOperations.getter();
    SelectableEventLoop.execute(_:)(a6, (uint64_t)v17);
    swift_release();
    return sub_100041A88((uint64_t)v17);
  }

uint64_t sub_100155BC8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7 = a3;
  if (a3)
  {
    uint64_t v9 = sub_10002A75C();
    uint64_t v7 = NIONetworkDevice.init(_:)(v9);
  }

  sub_100155638(a2, v7, a4, a5);
  return swift_release();
}

uint64_t sub_100155C30(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100155C90(a1, a2, a3, 0, (uint64_t)&unk_10028A688, (uint64_t)sub_1001560EC);
}

uint64_t sub_100155C48(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100155638(a2, a3, a4, 0);
}

uint64_t sub_100155C78(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100155C90(a1, a2, a3, 1, (uint64_t)&unk_10028A638, (uint64_t)sub_100155E34);
}

uint64_t sub_100155C90(unint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = v6;
  sub_100041B5C();
  BOOL v14 = sub_1000A8B90();
  sub_10002A51C();
  if (v14) {
    return sub_100155638(a1, a2, a3, a4);
  }
  uint64_t v16 = (void *)sub_100019310(a5, 48LL);
  v16[2] = v10;
  uint64_t v16[3] = a1;
  v16[4] = a2;
  v16[5] = a3;
  sub_10001EDE0();
  sub_100041B5C();
  sub_10002A75C();
  ChannelPipeline.syncOperations.getter();
  sub_10002A674();
  SelectableEventLoop.execute(_:)(a6, (uint64_t)v16);
  sub_10002A51C();
  return sub_100041A88((uint64_t)v16);
}

uint64_t sub_100155D60(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100155638(a2, a3, a4, 1);
}

uint64_t sub_100155D90(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100155AF0(a1, a2, a3, 0, (uint64_t)&unk_10028A6B0, (uint64_t)sub_100156134);
}

uint64_t sub_100155DB8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100155C90(a1, a2, a3, 0, (uint64_t)&unk_10028A688, (uint64_t)sub_1001560EC);
}

uint64_t sub_100155DE0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100155AF0(a1, a2, a3, 1, (uint64_t)&unk_10028A660, (uint64_t)sub_1001560C8);
}

uint64_t sub_100155E08(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100155C90(a1, a2, a3, 1, (uint64_t)&unk_10028A638, (uint64_t)sub_100155E34);
}

uint64_t sub_100155E34()
{
  return sub_100155D60(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

unint64_t sub_100155E40()
{
  unint64_t result = qword_1002B6E50;
  if (!qword_1002B6E50)
  {
    unint64_t result = swift_getWitnessTable("y3\b", &type metadata for NIOMulticastNotSupportedError);
    atomic_store(result, (unint64_t *)&qword_1002B6E50);
  }

  return result;
}

uint64_t sub_100155E7C(int a1, uint64_t a2, uint64_t *a3)
{
  return sub_1001512F8(a1, a2, *a3);
}

void sub_100155E94(int a1, uint64_t a2, uint64_t *a3)
{
}

void sub_100155EB4(int a1, uint64_t a2, uint64_t *a3)
{
}

void sub_100155ED4(int a1, uint64_t a2, uint64_t *a3, unsigned __int8 a4)
{
}

void sub_100155EEC(int a1, uint64_t a2, uint64_t *a3, unsigned __int8 a4)
{
}

void sub_100155F0C(int a1, uint64_t a2, uint64_t *a3, unsigned __int8 a4)
{
}

uint64_t sub_100155F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v4 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v4)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }

  uint64_t v6 = a4 - a3;
  if (!a3) {
    uint64_t v6 = 0LL;
  }
  if (result < 0 || v6 < result) {
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_100155F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_100079C60(a1, a3, a4, a5);
  if (a2 <= 0)
  {
    if (v9 <= 0 && v9 > a2) {
      return 0LL;
    }
  }

  else if ((v9 & 0x8000000000000000LL) == 0 && v9 < (unint64_t)a2)
  {
    return 0LL;
  }

  return sub_100155F2C(a1, a2, a4, a5);
}

void sub_100155FDC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
}

void sub_100155FF4( int a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t))
{
}

uint64_t sub_10015600C( int a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return sub_100150D04( a1,  a2,  *a3,  a4,  a5,  a6,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100125D4C);
}

uint64_t sub_10015602C( int a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return sub_100150D04( a1,  a2,  *a3,  a4,  a5,  a6,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100125E1C);
}

void sub_10015604C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100156074(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

void sub_10015608C(uint64_t a1)
{
}

void sub_1001560A8(uint64_t a1)
{
}

uint64_t sub_1001560C8()
{
  return sub_100155BC8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), 1);
}

uint64_t sub_1001560EC()
{
  return sub_100155C48(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1001560FC()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100156134()
{
  return sub_100155BC8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), 0);
}

void sub_100156154(int a1)
{
}

uint64_t sub_100156170(uint64_t result, char a2)
{
  if ((~result & 0xF000000000000007LL) != 0 || (a2 & 0xFE) != 0xFELL) {
    return j__swift_release(result);
  }
  return result;
}

void sub_100156190(int a1)
{
}

uint64_t sub_1001561A8(uint64_t a1, uint64_t a2)
{
  return sub_1001552B4(a1, a2, v2);
}

uint64_t sub_1001561B4(uint64_t a1)
{
  return sub_1001564C4(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_10015600C);
}

void sub_1001561D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void sub_1001561E8(msghdr *a1, unint64_t a2)
{
}

uint64_t sub_100156200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1001672D4(a1, a2, a3, a4, a5, a6, a7, *(uint64_t (**)(void))(v7 + 16));
}

uint64_t sub_100156224(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_release();
  swift_release();
  sub_100034738(v2, v3);
  return a1;
}

void sub_10015627C(uint64_t a1)
{
}

void sub_100156298(int a1)
{
}

void sub_1001562B4(int a1)
{
}

uint64_t sub_1001562CC(uint64_t a1, uint64_t a2)
{
  return sub_100153588(a1, a2, v2);
}

uint64_t sub_1001562D4(uint64_t a1)
{
  return sub_1001564C4(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_10015602C);
}

uint64_t sub_1001562F0()
{
  return sub_1001533A8(v0);
}

uint64_t sub_1001562F8()
{
  return sub_100153464();
}

uint64_t sub_100156310()
{
  return sub_1001534D4();
}

uint64_t sub_100156318()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100156328()
{
  return sub_100156500((void (*)(void))&_swift_release);
}

void sub_100156334()
{
}

uint64_t sub_100156354()
{
  uint64_t v0 = sub_10010E20C();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100156370()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100156390(uint64_t a1)
{
  return sub_100152F44(a1, *(void *)(v1 + 16));
}

uint64_t sub_100156398(uint64_t a1, uint64_t a2)
{
  return sub_1001529E0(a1, a2, v2);
}

void sub_1001563A0()
{
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 16))();
  sub_100156738(v1, v2);
  sub_10001945C();
}

uint64_t sub_1001563C4()
{
  uint64_t v0 = sub_10010E20C();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1001563DC()
{
  return sub_1001528C4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001563F4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100156418()
{
  return sub_1001506B4(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24));
}

uint64_t sub_100156424()
{
  return sub_100156500((void (*)(void))&_swift_release);
}

uint64_t sub_100156430()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100156454()
{
  return sub_100156500((void (*)(void))&_swift_errorRelease);
}

void sub_100156460()
{
}

void sub_100156474(int a1)
{
}

uint64_t sub_100156490(int a1)
{
  return sub_100155E7C(a1, *(void *)(v1 + 16), *(uint64_t **)(v1 + 24));
}

uint64_t sub_1001564A8(uint64_t a1)
{
  return sub_1001564C4(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_100155FF4);
}

uint64_t sub_1001564C4(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2( a1,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(unsigned __int8 *)(v2 + 32),  *(void *)(v2 + 40),  *(void *)(v2 + 48));
}

uint64_t sub_1001564E8()
{
  return sub_100156500((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1001564F4()
{
  return sub_100156500((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100156500(void (*a1)(void))
{
  uint64_t v3 = sub_10010E20C();
  return swift_deallocObject(v3, v4, v5);
}

uint64_t sub_100156540(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 16) = 9;
  return swift_willThrow();
}

uint64_t sub_100156550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, v4, a4, 0LL);
}

void sub_10015655C()
{
}

uint64_t sub_100156574(uint64_t a1)
{
  return sub_100098A70(a1, 1LL, v1);
}

uint64_t sub_100156580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 0LL);
}

uint64_t sub_100156588( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, __int128 a14, __int128 a15, char a16)
{
  a9 = a1;
  __int128 v18 = a15;
  *(_OWORD *)(a1 + 16) = a14;
  *(_OWORD *)(a1 + 32) = v18;
  *(_BYTE *)(a1 + 48) = a16;
  return sub_100151644(v16, 0LL, 0LL, v17, &a9);
}

uint64_t sub_1001565C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a2 = a3;
  *(_BYTE *)(a2 + 8) = 3;
  return swift_errorRetain(a1);
}

uint64_t sub_1001565D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v6 - 96, v5, v4, a4, 7LL);
}

uint64_t sub_1001565E4()
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(v0 + 16))(v2, *(void *)(v3 - 104), v1);
}

void sub_1001565F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ASOctaneSupportXPCService::AdaptiveRecvByteBufferAllocator *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

uint64_t sub_10015660C(uint64_t a1)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, 119LL, 2LL, 44LL, v2, v1);
}

void sub_100156624()
{
  v0._uint64_t countAndFlagsBits = 46LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
}

uint64_t sub_100156630()
{
  return _print_unlocked<A, B>(_:_:)(v0 - 49, v0 - 48);
}

uint64_t sub_10015663C(uint64_t result)
{
  *(void *)(v1 - 24) = result;
  return result;
}

uint64_t sub_10015664C()
{
  *(void *)(v0 + 312) = 0LL;
  *(_BYTE *)(v0 + 320) = 1;
  return type metadata accessor for Socket();
}

uint64_t sub_100156674(Swift::Int a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return sub_1001553E4(a1, a2 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL, a3, a4);
}

  ;
}

uint64_t sub_100156694(uint64_t result)
{
  return sub_100029DF4(result);
}

uint64_t sub_1001566A8(uint64_t a1)
{
  return swift_errorRelease(a1);
}

  ;
}

  ;
}

  ;
}

unint64_t sub_100156708()
{
  return sub_100025100();
}

void sub_100156710(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

  ;
}

  ;
}

uint64_t sub_100156730()
{
  return type metadata accessor for Socket();
}

uint64_t sub_100156738(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t v2 = result;
  *(_WORD *)(v2 + 8) = a2;
  *(_DWORD *)(v2 + 12) = HIDWORD(a2);
  return result;
}

uint64_t sub_100156754()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584LL))();
}

  ;
}

  ;
}

uint64_t sub_100156788()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, v0, v1);
}

uint64_t sub_10015679C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v0);
}

uint64_t sub_1001567B0(uint64_t a1)
{
  return swift_getObjectType(a1);
}

uint64_t sub_1001567C4(uint64_t a1)
{
  return swift_errorRelease(a1);
}

uint64_t sub_1001567CC()
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16))(v1, *(void *)(v3 - 80), v0);
}

  ;
}

  ;
}

void sub_100156818()
{
  *(_BYTE *)(v1 - 49) = *(_BYTE *)(v0 + 16);
}

uint64_t sub_100156824()
{
  return swift_deallocPartialClassInstance(v0, v1, 321LL, 7LL);
}

void sub_100156838()
{
  uint64_t v1 = *(void *)(v0 - 40);
  *(void *)(v0 - 48) = *(void *)(v0 - 48);
  *(void *)(v0 - 40) = v1;
}

void sub_100156844()
{
  *(void *)(v0 - 48) = 0LL;
  *(void *)(v0 - 40) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(41LL);
}

void sub_100156858()
{
  *(void *)(v0 - 48) = 0LL;
  *(void *)(v0 - 40) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(42LL);
}

void sub_10015686C()
{
  *(void *)(v0 - 48) = 0LL;
  *(void *)(v0 - 40) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(38LL);
}

uint64_t sub_100156880()
{
  return sub_10014E734(v0, v1);
}

  ;
}

uint64_t sub_1001568BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return swift_getAssociatedTypeWitness(0LL, v6, v5, a4, a5);
}

uint64_t sub_1001568CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  return swift_dynamicCast(&a9, &a14, a3, a4, 0LL);
}

uint64_t sub_1001568DC()
{
  return swift_slowDealloc(v0, -1LL, -1LL);
}

  ;
}

uint64_t sub_1001568FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _BYTE *v14 = 1;
  return swift_errorRelease(a14);
}

uint64_t sub_10015690C()
{
  return v0;
}

uint64_t sub_100156924(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return sub_10014EFE4(1, 0, a3);
}

uint64_t sub_100156934()
{
  return sub_10014E970();
}

void sub_10015694C()
{
}

uint64_t sub_10015695C()
{
  return v0;
}

uint64_t sub_100156984(uint64_t a1, _BYTE *a2)
{
  *a2 = 1;
  return swift_errorRetain(a1);
}

  ;
}

void sub_1001569AC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = (v2 - 32) | 0x8000000000000000LL;
  *(_DWORD *)(a1 + 16) = 9;
}

uint64_t sub_1001569C4()
{
  return v0;
}

  ;
}

uint64_t sub_1001569E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return swift_getAssociatedTypeWitness(0LL, v5, a3, a4, a5);
}

uint64_t sub_1001569F4()
{
  return v0();
}

uint64_t sub_100156A00(uint64_t a1, uint64_t a2)
{
  return swift_deallocPartialClassInstance(a1, a2, 377LL, 7LL);
}

uint64_t sub_100156A0C()
{
  return *(void *)(v0 - 80);
}

void sub_100156A20()
{
}

BOOL sub_100156A28()
{
  return sub_1000CCD30();
}

void sub_100156A30()
{
}

uint64_t sub_100156A38(uint64_t result)
{
  *(void *)(v2 - 88) = v1;
  *(void *)(v2 - 8sub_10019B2E8(v0, 0) = result;
  return result;
}

uint64_t sub_100156A4C()
{
  return sub_1000CCCD4();
}

uint64_t sub_100156A54()
{
  return sub_10014E970();
}

void sub_100156A5C(char a1)
{
}

uint64_t sub_100156A68@<X0>(uint64_t (*a1)(void)@<X8>)
{
  return a1();
}

uint64_t sub_100156A74()
{
  return sub_10014E970();
}

uint64_t sub_100156A7C()
{
  return v0;
}

uint64_t sub_100156A90()
{
  return swift_errorRetain(v0);
}

uint64_t sub_100156A9C()
{
  return swift_release(v0);
}

uint64_t sub_100156AA8(double a1)
{
  v4[0] = 0LL;
  v4[1] = 0xE000000000000000LL;
  sub_100081A00(40LL);
  Double.write<A>(to:)( v4,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation,  a1);
  sub_100081A00(44LL);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  sub_100081A00(41LL);
  return v4[0];
}

uint64_t sub_100156B54(void *a1)
{
  uint64_t v3 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v3);
  uint64_t v4 = a1[3];
  sub_100019F58(a1, v4);
  uint64_t v5 = sub_1000E5AB8();
  dispatch thunk of Decoder.singleValueContainer()(v5);
  if (v1) {
    goto LABEL_4;
  }
  sub_100019F58(v67, v67[3]);
  uint64_t v6 = sub_1000E5AB8();
  uint64_t v7 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v6);
  uint64_t v10 = v7;
  uint64_t v11 = v8;
  uint64_t v12 = Data.init(base64Encoded:options:)(v7, v8, 0LL);
  if (v13 >> 60 != 15)
  {
    uint64_t v14 = v12;
    uint64_t v4 = v13;
    static String.Encoding.utf8.getter(v12);
    uint64_t v15 = String.init(data:encoding:)(v14);
    if (v16)
    {
      uint64_t v17 = v15;
      unint64_t v18 = v16;
      uint64_t v19 = sub_10001DC10();
      *(void *)&__int128 v60 = 44LL;
      *((void *)&v60 + 1) = 0xE100000000000000LL;
      __chkstk_darwin(v19);
      uint64_t v56 = &v60;
      swift_bridgeObjectRetain();
      uint64_t v20 = sub_10018DFF4(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10006E270, (uint64_t)&v54, v17, v18);
      sub_100023EF4();
      if (*(void *)(v20 + 16))
      {
        uint64_t v21 = *(void *)(v20 + 48);
        uint64_t v22 = *(void *)(v20 + 56);
        __int128 v60 = *(_OWORD *)(v20 + 32);
        uint64_t v61 = v21;
        uint64_t v62 = v22;
        uint64_t v65 = 95LL;
        unint64_t v66 = 0xE100000000000000LL;
        uint64_t v63 = 46LL;
        unint64_t v64 = 0xE100000000000000LL;
        unint64_t v23 = sub_1001575E0();
        uint64_t v56 = (__int128 *)sub_10001B4A0();
        uint64_t v57 = v56;
        unsigned int v54 = &type metadata for String;
        unint64_t v55 = v23;
        uint64_t v24 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v65,  &v63,  0LL,  0LL,  0LL,  1LL,  &type metadata for Substring,  &type metadata for String);
        sub_100073BB8(v24, v25);
        if ((v26 & 1) == 0)
        {
          if (*(void *)(v20 + 16) < 2uLL)
          {
            __break(1u);
          }

          else
          {
            unint64_t v27 = *(void *)(v20 + 64);
            uint64_t v28 = *(void *)(v20 + 72);
            uint64_t v59 = *(void *)(v20 + 80);
            swift_bridgeObjectRetain();
            sub_10001DC10();
            if ((v28 ^ v27) >> 14)
            {
              unint64_t v29 = sub_100157640();
              uint64_t v58 = sub_1001570D0(v29, v30, v31, v32, v33);
              if ((v34 & 0x100) != 0)
              {
                uint64_t v47 = sub_100157640();
                uint64_t v37 = sub_1001C35D4(v47, v48, v49, v50, v51);
                char v53 = v52;
                sub_100023EF4();
                int v36 = v53 & 1;
                sub_10015761C();
              }

              else
              {
                char v35 = v34;
                sub_100023EF4();
                sub_10015761C();
                int v36 = v35 & 1;
                uint64_t v37 = v58;
              }

              if (v36) {
                uint64_t v4 = 0LL;
              }
              else {
                uint64_t v4 = v37;
              }
              goto LABEL_23;
            }
          }

          sub_100023EF4();
          sub_10015761C();
LABEL_17:
          uint64_t v4 = 0LL;
LABEL_23:
          sub_100019F7C(v67);
          sub_100019F7C(a1);
          return v4;
        }
      }

      sub_10001DC10();
      unint64_t v38 = sub_1000EC838();
      sub_1000252D0((uint64_t)&type metadata for JWSError, v38);
      sub_100157658();
      sub_10015761C();
      goto LABEL_3;
    }

    sub_10015761C();
  }

  *(void *)&__int128 v60 = v10;
  *((void *)&v60 + 1) = v11;
  uint64_t v65 = 95LL;
  unint64_t v66 = 0xE100000000000000LL;
  uint64_t v63 = 46LL;
  unint64_t v64 = 0xE100000000000000LL;
  unsigned int v54 = &type metadata for String;
  unint64_t v55 = sub_10001B4A0();
  uint64_t v43 = sub_100157628((uint64_t)&v65, (uint64_t)&v63, v39, v40, v41, v42, (uint64_t)&type metadata for String);
  uint64_t v4 = v44;
  sub_10001DC10();
  sub_100073BB8(v43, v4);
  if ((v45 & 1) == 0) {
    goto LABEL_17;
  }
  unint64_t v46 = sub_1000EC838();
  sub_1000252D0((uint64_t)&type metadata for JWSError, v46);
  sub_100157658();
LABEL_3:
  sub_100019F7C(v67);
LABEL_4:
  sub_100019F7C(a1);
  return v4;
}

uint64_t sub_100156ED0(void *a1, uint64_t a2)
{
  v26[0] = 46LL;
  v26[1] = 0xE100000000000000LL;
  v25[0] = 95LL;
  v25[1] = 0xE100000000000000LL;
  sub_10001B4A0();
  uint64_t v8 = sub_100157628((uint64_t)v26, (uint64_t)v25, v4, v5, v6, v7, (uint64_t)&type metadata for String);
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  v22[0] = v8;
  v22[1] = v10;
  v11._uint64_t countAndFlagsBits = 44LL;
  v11._object = (void *)0xE100000000000000LL;
  String.append(_:)(v11);
  v26[0] = a2;
  v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  uint64_t v13 = sub_100063AC8(v8, v10);
  unint64_t v15 = v14;
  Swift::String v16 = Data.base64EncodedString(options:)(0LL);
  sub_10003A9EC(v13, v15);
  uint64_t v17 = a1[3];
  uint64_t v18 = a1[4];
  sub_100019F58(a1, v17);
  dispatch thunk of Encoder.singleValueContainer()(v22, v17, v18);
  uint64_t v19 = v23;
  uint64_t v20 = v24;
  sub_100043F18((uint64_t)v22, v23);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(v16._countAndFlagsBits, v16._object, v19, v20);
  swift_bridgeObjectRelease();
  return sub_100019F7C(v22);
}

BOOL sub_100157048(uint64_t a1, uint64_t a2, double a3, double a4)
{
  return a3 == a4 && a1 == a2;
}

BOOL sub_100157058(uint64_t a1, uint64_t a2)
{
  return sub_100157048(*(void *)(a1 + 8), *(void *)(a2 + 8), *(double *)a1, *(double *)a2);
}

uint64_t sub_10015706C()
{
  return sub_100156AA8(*v0);
}

ValueMetadata *type metadata accessor for Revision()
{
  return &type metadata for Revision;
}

uint64_t sub_100157088@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100156B54(a1);
  if (!v2)
  {
    *a2 = v5;
    a2[1] = result;
  }

  return result;
}

uint64_t sub_1001570B4(void *a1)
{
  return sub_100156ED0(a1, *(void *)(v1 + 8));
}

uint64_t sub_1001570D0( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, int64_t a5)
{
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    uint64_t result = 0LL;
    goto LABEL_8;
  }

  if ((a4 & 0x2000000000000000LL) != 0)
  {
    uint64_t v12 = HIBYTE(a4) & 0xF;
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    Swift::String v11 = v15;
  }

  else if ((a3 & 0x1000000000000000LL) != 0)
  {
    Swift::String v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v12 = a3 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    Swift::String v11 = (void *)_StringObject.sharedUTF8.getter(a3);
  }

  uint64_t result = sub_1001571A8((uint64_t)v11, v12, a1, a2, a3, a4, a5);
  if (!v5)
  {
    char v16 = v14 & 1;
LABEL_8:
    LOBYTE(v15[0]) = (a4 & 0x1000000000000000LL) != 0;
  }

  return result;
}

uint64_t sub_1001571A8( uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, int64_t a7)
{
  unint64_t v11 = a3;
  uint64_t v12 = result;
  uint64_t v13 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000LL) == 0) {
    LOBYTE(vsub_100019F7C(v0 + 13) = 1;
  }
  uint64_t v14 = 4LL << v13;
  unint64_t v15 = a3 & 0xC;
  unint64_t v16 = a3;
  if (v15 == 4LL << v13)
  {
    uint64_t result = sub_1000CF8B0(a3, a5, a6);
    unint64_t v16 = result;
  }

  uint64_t v17 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x1000000000000000LL) != 0)
  {
    unint64_t v19 = a5 & 0xFFFFFFFFFFFFLL;
    if ((a6 & 0x2000000000000000LL) != 0) {
      unint64_t v19 = HIBYTE(a6) & 0xF;
    }
    if (v19 < v16 >> 16) {
      goto LABEL_97;
    }
    uint64_t result = String.UTF8View._foreignDistance(from:to:)(15LL, v16, a5, a6);
    uint64_t v18 = result;
    uint64_t v17 = HIBYTE(a6) & 0xF;
  }

  else
  {
    uint64_t v18 = v16 >> 16;
  }

  if (v15 == v14)
  {
    uint64_t v20 = v17;
    uint64_t result = sub_1000CF8B0(v11, a5, a6);
    uint64_t v17 = v20;
    unint64_t v11 = result;
  }

  if ((a4 & 0xC) == v14)
  {
    unint64_t v21 = a4;
    uint64_t v22 = v17;
    uint64_t result = sub_1000CF8B0(v21, a5, a6);
    uint64_t v17 = v22;
    a4 = result;
    if ((a6 & 0x1000000000000000LL) == 0) {
      goto LABEL_11;
    }
  }

  else if ((a6 & 0x1000000000000000LL) == 0)
  {
LABEL_11:
    uint64_t result = (a4 >> 16) - (v11 >> 16);
    goto LABEL_22;
  }

  unint64_t v23 = a5 & 0xFFFFFFFFFFFFLL;
  if ((a6 & 0x2000000000000000LL) != 0) {
    unint64_t v23 = v17;
  }
  if (v23 < v11 >> 16) {
    goto LABEL_93;
  }
  if (v23 < a4 >> 16)
  {
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }

  uint64_t result = String.UTF8View._foreignDistance(from:to:)(v11, a4, a5, a6);
LABEL_22:
  uint64_t v24 = v18 + result;
  if (__OFADD__(v18, result))
  {
    __break(1u);
    goto LABEL_92;
  }

  if (v24 < v18)
  {
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }

  uint64_t v25 = (unsigned __int8 *)(v12 + v18);
  if (!v12) {
    uint64_t v25 = 0LL;
  }
  int v26 = *v25;
  if (v26 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v39 = a7 + 48;
        unsigned __int8 v40 = a7 + 55;
        unsigned __int8 v41 = a7 + 87;
        if (a7 > 10)
        {
          unsigned __int8 v39 = 58;
        }

        else
        {
          unsigned __int8 v41 = 97;
          unsigned __int8 v40 = 65;
        }

        if (v25)
        {
          unint64_t v30 = 0LL;
          uint64_t v42 = v25 + 1;
          uint64_t v43 = result - 1;
          do
          {
            unsigned int v44 = *v42;
            if (v44 < 0x30 || v44 >= v39)
            {
              if (v44 < 0x41 || v44 >= v40)
              {
                uint64_t v35 = 0LL;
                if (v44 < 0x61 || v44 >= v41) {
                  return v35;
                }
                char v45 = -87;
              }

              else
              {
                char v45 = -55;
              }
            }

            else
            {
              char v45 = -48;
            }

            if (!is_mul_ok(v30, a7)) {
              return 0LL;
            }
            unint64_t v46 = v30 * a7;
            unsigned __int8 v47 = v44 + v45;
            BOOL v38 = __CFADD__(v46, v47);
            unint64_t v30 = v46 + v47;
            if (v38) {
              return 0LL;
            }
            ++v42;
            --v43;
          }

          while (v43);
          return v30;
        }

        return 0LL;
      }

      return 0LL;
    }

    goto LABEL_96;
  }

  if (v26 != 45)
  {
    if (v24 != v18)
    {
      unsigned __int8 v48 = a7 + 48;
      unsigned __int8 v49 = a7 + 55;
      unsigned __int8 v50 = a7 + 87;
      if (a7 > 10)
      {
        unsigned __int8 v48 = 58;
      }

      else
      {
        unsigned __int8 v50 = 97;
        unsigned __int8 v49 = 65;
      }

      if (v25)
      {
        unint64_t v30 = 0LL;
        while (1)
        {
          unsigned int v51 = *v25;
          if (v51 < 0x30 || v51 >= v48)
          {
            if (v51 < 0x41 || v51 >= v49)
            {
              uint64_t v35 = 0LL;
              if (v51 < 0x61 || v51 >= v50) {
                return v35;
              }
              char v52 = -87;
            }

            else
            {
              char v52 = -55;
            }
          }

          else
          {
            char v52 = -48;
          }

          if (!is_mul_ok(v30, a7)) {
            return 0LL;
          }
          unint64_t v53 = v30 * a7;
          unsigned __int8 v54 = v51 + v52;
          BOOL v38 = __CFADD__(v53, v54);
          unint64_t v30 = v53 + v54;
          if (v38) {
            return 0LL;
          }
          ++v25;
          if (!--result) {
            return v30;
          }
        }
      }

      return 0LL;
    }

    return 0LL;
  }

  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v27 = a7 + 48;
      unsigned __int8 v28 = a7 + 55;
      unsigned __int8 v29 = a7 + 87;
      if (a7 > 10)
      {
        unsigned __int8 v27 = 58;
      }

      else
      {
        unsigned __int8 v29 = 97;
        unsigned __int8 v28 = 65;
      }

      if (v25)
      {
        unint64_t v30 = 0LL;
        unint64_t v31 = v25 + 1;
        uint64_t v32 = result - 1;
        while (1)
        {
          unsigned int v33 = *v31;
          if (v33 < 0x30 || v33 >= v27)
          {
            if (v33 < 0x41 || v33 >= v28)
            {
              uint64_t v35 = 0LL;
              if (v33 < 0x61 || v33 >= v29) {
                return v35;
              }
              char v34 = -87;
            }

            else
            {
              char v34 = -55;
            }
          }

          else
          {
            char v34 = -48;
          }

          if (!is_mul_ok(v30, a7)) {
            return 0LL;
          }
          unint64_t v36 = v30 * a7;
          unsigned __int8 v37 = v33 + v34;
          BOOL v38 = v36 >= v37;
          unint64_t v30 = v36 - v37;
          if (!v38) {
            return 0LL;
          }
          ++v31;
          if (!--v32) {
            return v30;
          }
        }
      }

      return 0LL;
    }

    return 0LL;
  }

LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
  return result;
}

unint64_t sub_1001575E0()
{
  unint64_t result = qword_1002B6E70;
  if (!qword_1002B6E70)
  {
    unint64_t result = swift_getWitnessTable( (const char *)&protocol conformance descriptor for Substring,  &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_1002B6E70);
  }

  return result;
}

uint64_t sub_10015761C()
{
  return sub_10003AACC(v1, v0);
}

uint64_t sub_100157628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(a1, a2, 0LL, 0LL, 0LL, 1LL, a7, a7);
}

uint64_t sub_100157640()
{
  return v0;
}

uint64_t sub_100157658()
{
  return swift_willThrow();
}

uint64_t sub_100157664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  if (sub_10001D158(a1, 1LL, v6) == 1)
  {
    sub_100037590(a1);
    uint64_t v7 = 7168LL;
  }

  else
  {
    unsigned __int8 v8 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v7 = v8 | 0x1C00LL;
  }

  uint64_t v9 = *(void *)(a3 + 16);
  if (v9)
  {
    uint64_t v10 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v9);
    uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
    uint64_t v14 = v13;
    swift_unknownObjectRelease(v9);
  }

  else
  {
    uint64_t v12 = 0LL;
    uint64_t v14 = 0LL;
  }

  uint64_t v15 = sub_100019310((uint64_t)&unk_10028AB00, 32LL);
  *(void *)(v15 + 16) = a2;
  *(void *)(v15 + 24) = a3;
  if (v14 | v12)
  {
    v18[0] = 0LL;
    v18[1] = 0LL;
    unint64_t v16 = v18;
    v18[2] = v12;
    v18[3] = v14;
  }

  else
  {
    unint64_t v16 = 0LL;
  }

  return swift_task_create(v7, v16, (char *)&type metadata for () + 8, &unk_1002B6F58, v15);
}

void sub_10015779C(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void))
{
}

void sub_10015781C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (**a6)(void, void))
{
  unint64_t v11 = (int *)type metadata accessor for PurchaseConfiguration(0LL);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)&v25[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v15 = (uint64_t)v14 + *(int *)(v12 + 24);
  uint64_t v16 = type metadata accessor for UUID(0LL);
  sub_10001762C(v15, 1LL, 1LL, v16);
  uint64_t v17 = (uint64_t)v14 + v11[8];
  uint64_t v18 = type metadata accessor for Date(0LL);
  sub_10001762C(v17, 1LL, 1LL, v18);
  uint64_t v19 = v11[10];
  uint64_t v20 = v11[11];
  uint64_t *v14 = a3;
  v14[1] = a4;
  v14[2] = a1;
  uint64_t v14[3] = a2;
  unint64_t v21 = (char *)v14 + v11[7];
  *(void *)unint64_t v21 = 1LL;
  v21[8] = 0;
  *((_BYTE *)v14 + v11[9]) = 0;
  uint64_t v22 = (uint64_t *)((char *)v14 + v19);
  *uint64_t v22 = 0LL;
  v22[1] = 0LL;
  *((_BYTE *)v14 + v2sub_10019B2E8(v0, 0) = 3;
  *((_BYTE *)v14 + v11[12]) = 2;
  uint64_t v23 = qword_1002A8CE8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v23 != -1) {
    swift_once(&qword_1002A8CE8, sub_1000DF248);
  }
  sub_1000E0314(v14, (uint64_t)v25);
  sub_1000E4D0C((uint64_t)v25);
  a6[2](a6, 0LL);
  sub_1001442C8((uint64_t)v14);
  _Block_release(a6);
}

void sub_1001579F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (**a6)(void, void))
{
  if (qword_1002A8CE8 != -1) {
    swift_once(&qword_1002A8CE8, sub_1000DF248);
  }
  sub_1000E0A54();
  uint64_t v8 = v7;
  if (v7) {
    uint64_t v9 = (void *)_convertErrorToNSError(_:)(v7);
  }
  else {
    uint64_t v9 = 0LL;
  }
  ((void (**)(void, void *))a6)[2](a6, v9);

  swift_errorRelease(v8);
  _Block_release(a6);
}

void sub_100157AF8(char a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *aBlock)
{
}

void sub_100157B84( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (**a7)(void, void))
{
  if (qword_1002A8CE8 != -1) {
    swift_once(&qword_1002A8CE8, sub_1000DF248);
  }
  sub_1000E0A54();
  uint64_t v9 = v8;
  if (v8) {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)(v8);
  }
  else {
    uint64_t v10 = 0LL;
  }
  ((void (**)(void, void *))a7)[2](a7, v10);

  swift_errorRelease(v9);
  _Block_release(a7);
}

void sub_100157C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(void, void))
{
  if (qword_1002A8CE8 != -1) {
    swift_once(&qword_1002A8CE8, sub_1000DF248);
  }
  uint64_t v6 = sub_1000E0C30();
  uint64_t v7 = v6;
  if (v6) {
    uint64_t v8 = (void *)_convertErrorToNSError(_:)(v6);
  }
  else {
    uint64_t v8 = 0LL;
  }
  ((void (**)(void, void *))a5)[2](a5, v8);

  swift_errorRelease(v7);
  _Block_release(a5);
}

void sub_100157D38(char a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *aBlock)
{
}

void sub_100157DC4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (**a7)(void, void))
{
  if (qword_1002A8CE8 != -1) {
    swift_once(&qword_1002A8CE8, sub_1000DF248);
  }
  sub_1000E0CD0();
  uint64_t v9 = v8;
  if (v8) {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)(v8);
  }
  else {
    uint64_t v10 = 0LL;
  }
  ((void (**)(void, void *))a7)[2](a7, v10);

  swift_errorRelease(v9);
  _Block_release(a7);
}

uint64_t sub_100157EA0( void *a1, int a2, uint64_t a3, uint64_t a4, int a5, void *a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, id, void *))
{
  unint64_t v11 = sub_1001609FC((int)a1, a2, a3, a4, a5, a6);
  uint64_t v12 = sub_100160A04();
  uint64_t v14 = v13;
  _Block_copy(v11);
  id v15 = a1;
  a7(a3, a4, v12, v14, v15, v11);
  _Block_release(v11);

  return sub_100160764(v14);
}

void sub_100157F24(int a1, int a2, int a3, void *a4)
{
  uint64_t v6 = sub_100160890();
  v4(v6);
  sub_1001607EC(v5);
}

uint64_t sub_100157FB8()
{
  id v8 = v1;
  sub_1001609DC();
  sub_100159F04();
  sub_1001609A0();

  return sub_100160790(v2);
}

void sub_10015802C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, void *aBlock)
{
}

void sub_1001580CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, void (**a8)(void, void))
{
  if (qword_1002A8CE8 != -1) {
    swift_once(&qword_1002A8CE8, sub_1000DF248);
  }
  uint64_t v14 = sub_1000E0DC8(a3, a4, a5 & 1, a6, a7);
  uint64_t v15 = v14;
  if (v14) {
    uint64_t v16 = (void *)_convertErrorToNSError(_:)(v14);
  }
  else {
    uint64_t v16 = 0LL;
  }
  ((void (**)(void, void *))a8)[2](a8, v16);

  swift_errorRelease(v15);
  _Block_release(a8);
}

void sub_100158258(int a1, void *aBlock)
{
}

void sub_100158304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(void, void))
{
  if (qword_1002A8CE8 != -1) {
    swift_once(&qword_1002A8CE8, sub_1000DF248);
  }
  sub_100019F58((void *)(qword_1002EB960 + 64), *(void *)(qword_1002EB960 + 88));
  sub_100076700();
  sub_10012AAD0();
  sub_10001B4DC(v7);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  ((void (**)(void, Class))a5)[2](a5, isa);
  swift_bridgeObjectRelease();

  _Block_release(a5);
}

void sub_100158410(int a1, int a2, int a3, void *a4)
{
  uint64_t v6 = sub_100160890();
  sub_10015CB88(v6, v7, v8, v9, v10, v11, v12, v4);
  sub_1001607EC(v5);
}

void sub_10015844C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(void, void))
{
  if (qword_1002A8CE8 != -1) {
    swift_once(&qword_1002A8CE8, sub_1000DF248);
  }
  uint64_t v6 = sub_1000E1104();
  unint64_t v8 = v7;
  if (v7 >> 60 == 15) {
    Class isa = 0LL;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  ((void (**)(void, Class))a5)[2](a5, isa);

  sub_10003AACC(v6, v8);
  _Block_release(a5);
}

uint64_t sub_100158538()
{
  uint64_t v6 = v5;
  unint64_t v8 = v7;
  uint64_t v10 = _Block_copy(v9);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  sub_100160938();
  id v12 = v8;
  v0(v11, v4, v12, v10, v3, v2, v1);
  sub_1001609A0();

  return sub_100160764(v4);
}

void sub_1001585F0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t))
{
  if (qword_1002A8CE8 != -1) {
    swift_once(&qword_1002A8CE8, sub_1000DF248);
  }
  uint64_t v11 = a7(a3, a4, a5);
  uint64_t v12 = v11;
  if (v11) {
    uint64_t v13 = (void *)_convertErrorToNSError(_:)(v11);
  }
  else {
    uint64_t v13 = 0LL;
  }
  sub_100160944();

  swift_errorRelease(v12);
  sub_100160804();
}

void sub_1001586E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *aBlock)
{
}

void sub_100158788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *aBlock)
{
  id v12 = a5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10015D4C8( (uint64_t)"startServingConfiguration(_:forBundleID:withReply:)",  51LL,  2LL,  (uint64_t)v12,  v12,  a1,  a2,  a3,  a4,  (void (**)(void, void))aBlock);
  _Block_release(aBlock);
}

uint64_t sub_100158830( void *a1, int a2, uint64_t a3, int a4, void *a5, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, id, void *))
{
  int v9 = sub_100160A0C((int)a1, a2, a3, a4, a5);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v12 = v11;
  uint64_t v13 = sub_100160A04();
  uint64_t v15 = v14;
  _Block_copy(v9);
  id v16 = a1;
  a6(v10, v12, v13, v15, v16, v9);
  _Block_release(v9);

  swift_bridgeObjectRelease();
  return sub_100160764(v15);
}

void sub_1001588C8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *aBlock)
{
}

void sub_1001589D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (qword_1002A8CE8 != -1) {
    swift_once(&qword_1002A8CE8, sub_1000DF248);
  }
  uint64_t v13 = a8(a3, a4, a5, a6);
  uint64_t v14 = v13;
  if (v13) {
    uint64_t v15 = (void *)_convertErrorToNSError(_:)(v13);
  }
  else {
    uint64_t v15 = 0LL;
  }
  sub_100160944();

  swift_errorRelease(v14);
  sub_100160804();
}

void sub_100158ACC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (**a6)(void, void))
{
  if (qword_1002A8CE8 != -1) {
    swift_once(&qword_1002A8CE8, sub_1000DF248);
  }
  sub_100019F58((void *)(qword_1002EB960 + 64), *(void *)(qword_1002EB960 + 88));
  sub_100076018(a3, a4, a5);
  NSString v10 = String._bridgeToObjectiveC()();
  ((void (**)(void, NSString))a6)[2](a6, v10);
  swift_bridgeObjectRelease();

  _Block_release(a6);
}

void sub_100158BC8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (**a7)(void, void))
{
  if (qword_1002A8CE8 != -1) {
    swift_once(&qword_1002A8CE8, sub_1000DF248);
  }
  sub_100019F58((void *)(qword_1002EB960 + 64), *(void *)(qword_1002EB960 + 88));
  uint64_t v11 = sub_1000761E8(a1, a2, a3);
  uint64_t v12 = v11;
  if (v11) {
    uint64_t v13 = (void *)_convertErrorToNSError(_:)(v11);
  }
  else {
    uint64_t v13 = 0LL;
  }
  ((void (**)(void, void *))a7)[2](a7, v13);

  swift_errorRelease(v12);
  _Block_release(a7);
}

void sub_100158D58(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for TaskPriority(0LL);
  sub_1001609F0((uint64_t)v12, v14, v15, v13);
  id v16 = (void *)sub_100019310((uint64_t)&unk_10028AB28, 72LL);
  v16[2] = 0LL;
  uint64_t v16[3] = 0LL;
  v16[4] = a2;
  v16[5] = a3;
  v16[6] = a1;
  v16[7] = a4;
  v16[8] = a5;
  sub_10003AA88(a2, a3);
  swift_retain();
  sub_100157664((uint64_t)v12, (uint64_t)&unk_1002B6F68, (uint64_t)v16);
  swift_release();
  sub_100023E74();
}

uint64_t sub_100158E24( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[17] = a7;
  v8[18] = a8;
  v8[15] = a5;
  _BYTE v8[16] = a6;
  v8[14] = a4;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  v8[19] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[20] = v10;
  v8[21] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100158E8C, 0LL, 0LL);
}

uint64_t sub_100158E8C()
{
  uint64_t v2 = *(void *)(v0 + 112);
  unint64_t v1 = *(void *)(v0 + 120);
  sub_10003AA88(v2, v1);
  sub_100044D60(v2, v1, (_OWORD *)(v0 + 64));
  uint64_t v3 = *(void *)(v0 + 104);
  int64x2_t v4 = *(int64x2_t *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 64);
  int64x2_t v6 = *(int64x2_t *)(v0 + 72);
  *(void *)(v0 + 192) = v3;
  *(int64x2_t *)(v0 + 176) = vzip1q_s64(v6, v4);
  *(void *)(v0 + 16) = v5;
  *(int64x2_t *)(v0 + 24) = v6;
  *(int64x2_t *)(v0 + 4sub_10019B2E8(v0, 0) = v4;
  *(void *)(v0 + 56) = v3;
  if (qword_1002A8CB8 != -1) {
    swift_once(&qword_1002A8CB8, sub_100045AA8);
  }
  uint64_t v7 = qword_1002EB918;
  *(void *)(v0 + 20sub_10019B2E8(v0, 0) = qword_1002EB918;
  return swift_task_switch(sub_100158F6C, v7, 0LL);
}

uint64_t sub_100158F6C()
{
  return swift_task_switch(sub_100158FD8, 0LL, 0LL);
}

uint64_t sub_100158FD8()
{
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v1 = *(void *)(v0 + 168);
  (*(void (**)(uint64_t))(v0 + 136))(v1);
  sub_1000EB7CC(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  swift_task_dealloc(v1);
  return sub_100160850(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1001590DC(uint64_t a1, uint64_t a2)
{
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);
}

void sub_100159120(uint64_t a1)
{
  uint64_t v3 = sub_100048814();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  sub_1000175B0(&qword_1002AA6C8);
  sub_1000226C8();
  __chkstk_darwin(v6);
  uint64_t v7 = sub_1001608F4();
  uint64_t v8 = type metadata accessor for TaskPriority(v7);
  sub_1001609F0(v1, v9, v10, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))( (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v3);
  uint64_t v11 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v12 = (v11 + 32) & ~v11;
  uint64_t v13 = swift_allocObject(&unk_10028AAD8, v12 + v5, v11 | 7);
  *(void *)(v13 + 16) = 0LL;
  *(void *)(v13 + 24) = 0LL;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))( v13 + v12,  (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v3);
  sub_100157664(v1, (uint64_t)&unk_1002B6F48, v13);
  swift_release();
  sub_100023E74();
}

uint64_t sub_100159214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return swift_task_switch(sub_10015922C, 0LL, 0LL);
}

uint64_t sub_10015922C()
{
  if (qword_1002A8CB8 != -1) {
    swift_once(&qword_1002A8CB8, sub_100045AA8);
  }
  uint64_t v1 = qword_1002EB918;
  *(void *)(v0 + 24) = qword_1002EB918;
  return swift_task_switch(sub_100159290, v1, 0LL);
}

uint64_t sub_100159290()
{
  return sub_10003786C(*(uint64_t (**)(void))(v0 + 8));
}

void sub_100159354(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void, void))
{
  if (qword_1002A8CE8 != -1) {
    swift_once(&qword_1002A8CE8, sub_1000DF248);
  }
  if (sub_1000E1CE0()) {
    v5.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  else {
    v5.super.Class isa = 0LL;
  }
  ((void (**)(void, Class))a4)[2](a4, v5.super.isa);
  swift_bridgeObjectRelease();

  _Block_release(a4);
}

uint64_t sub_100159420( void *a1, int a2, int a3, void *aBlock, void (*a5)(uint64_t, uint64_t, id, void *))
{
  uint64_t v7 = _Block_copy(aBlock);
  uint64_t v8 = sub_100160A04();
  uint64_t v10 = v9;
  _Block_copy(v7);
  id v11 = a1;
  a5(v8, v10, v11, v7);
  _Block_release(v7);

  return swift_bridgeObjectRelease();
}

void sub_1001594A0( uint64_t a1, unint64_t a2, id a3, uint64_t a4, void (**a5)(void, void))
{
  unsigned __int8 v9 = sub_1000AA848((unint64_t)[a3 integerValue]);
  if (v9 == 4)
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    sub_100018F68(v10, (uint64_t)qword_1002EB9D0);
    id v11 = a3;
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v14 = static os_log_type_t.error.getter(v12, v13);
    if (os_log_type_enabled(v12, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v15 = 134217984;
      id v29 = [v11 integerValue];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v15 + 4);

      _os_log_impl((void *)&_mh_execute_header, v12, v14, "Invalid message reason %ld requested", v15, 0xCu);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    else
    {
    }

    a5[2](a5, 0LL);
  }

  else
  {
    unsigned __int8 v16 = v9;
    if (qword_1002A8CE8 != -1) {
      swift_once(&qword_1002A8CE8, sub_1000DF248);
    }
    sub_1000E1FD8(v16, a1, a2);
    if (v17)
    {
      if (qword_1002A8D90 != -1) {
        swift_once(&qword_1002A8D90, sub_100183E34);
      }
      uint64_t v18 = type metadata accessor for Logger(0LL);
      sub_100018F68(v18, (uint64_t)qword_1002EB9D0);
      id v19 = a3;
      uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
      os_log_type_t v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        *(_DWORD *)uint64_t v22 = 134217984;
        id v29 = [v19 integerValue];
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v22 + 4);

        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Found message with type %ld", v22, 0xCu);
        swift_slowDealloc(v22, -1LL, -1LL);
      }

      else
      {
      }

      v28.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    }

    else
    {
      if (qword_1002A8D90 != -1) {
        swift_once(&qword_1002A8D90, sub_100183E34);
      }
      uint64_t v23 = type metadata accessor for Logger(0LL);
      sub_100018F68(v23, (uint64_t)qword_1002EB9D0);
      id v24 = a3;
      uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
      os_log_type_t v26 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v25, v26))
      {
        unsigned __int8 v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        *(_DWORD *)unsigned __int8 v27 = 134217984;
        id v29 = [v24 integerValue];
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v27 + 4);

        _os_log_impl((void *)&_mh_execute_header, v25, v26, "No message found with type %ld", v27, 0xCu);
        swift_slowDealloc(v27, -1LL, -1LL);
      }

      else
      {
      }

      v28.super.Class isa = 0LL;
    }

    ((void (**)(void, Class))a5)[2](a5, v28.super.isa);

    swift_bridgeObjectRelease();
  }

  _Block_release(a5);
}

uint64_t sub_10015994C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_BYTE *)(v4 + 4sub_10019B2E8(v0, 0) = a4;
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = a3;
  *(void *)(v4 + 16) = a1;
  return sub_100037860((uint64_t)sub_100159964);
}

uint64_t sub_100159964()
{
  if (qword_1002A8CE8 != -1) {
    swift_once(&qword_1002A8CE8, sub_1000DF248);
  }
  sub_1000E1A44();
  if (v1) {
    swift_willThrow(v1);
  }
  return sub_1000379D8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100159A54(uint64_t a1, uint64_t a2, char a3, void *aBlock, void *a5)
{
  v5[2] = a5;
  v5[3] = _Block_copy(aBlock);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v12 = v11;
  v5[4] = v11;
  uint64_t v13 = dword_1002B6F14;
  id v14 = a5;
  uint64_t v15 = (void *)swift_task_alloc(v13);
  void v5[5] = v15;
  *uint64_t v15 = v5;
  v15[1] = sub_100159AF4;
  return sub_10015994C(a1, v10, v12, a3);
}

uint64_t sub_100159AF4()
{
  uint64_t v2 = *(void *)(*v1 + 40);
  uint64_t v3 = *(void **)(*v1 + 16);
  uint64_t v4 = *v1;
  swift_task_dealloc(v2);

  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v4 + 24);
  if (v0)
  {
    uint64_t v6 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    sub_1000EB7CC(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16));
  }

  else
  {
    (*(void (**)(void, void))(v5 + 16))(*(void *)(v4 + 24), 0LL);
  }

  _Block_release(*(const void **)(v4 + 24));
  return sub_100160850(*(uint64_t (**)(void))(v4 + 8));
}

uint64_t sub_100159B88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002AA6C8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for TaskPriority(0LL);
  sub_10001762C((uint64_t)v6, 1LL, 1LL, v7);
  uint64_t v8 = (void *)swift_allocObject(&unk_10028AB78, 48LL, 7LL);
  void v8[2] = 0LL;
  v8[3] = 0LL;
  v8[4] = a1;
  v8[5] = a2;
  unsigned __int8 v9 = (void *)swift_allocObject(&unk_10028ABA0, 48LL, 7LL);
  v9[2] = 0LL;
  v9[3] = 0LL;
  v9[4] = &unk_1002B6FB0;
  v9[5] = v8;
  sub_10003738C((uint64_t)v6, (uint64_t)&unk_1002B6FC0, (uint64_t)v9);
  return swift_release();
}

uint64_t sub_100159C64(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 24) = a3;
  *(void *)(v4 + 32) = a4;
  *(void *)(v4 + 16) = a2;
  *(_BYTE *)(v4 + 4sub_10019B2E8(v0, 0) = a1;
  return sub_100037860((uint64_t)sub_100159C7C);
}

uint64_t sub_100159C7C()
{
  if (qword_1002A8CE8 != -1) {
    swift_once(&qword_1002A8CE8, sub_1000DF248);
  }
  sub_1000E1AC8();
  if (v1) {
    swift_willThrow(v1);
  }
  return sub_1000379D8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100159D6C(char a1, uint64_t a2, uint64_t a3, void *aBlock, void *a5)
{
  v5[2] = a5;
  v5[3] = _Block_copy(aBlock);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v12 = v11;
  v5[4] = v11;
  uint64_t v13 = dword_1002B6F1C;
  id v14 = a5;
  uint64_t v15 = (void *)swift_task_alloc(v13);
  void v5[5] = v15;
  *uint64_t v15 = v5;
  v15[1] = sub_100160744;
  return sub_100159C64(a1, a2, v10, v12);
}

void sub_100159E0C(int a1, int a2, void *aBlock)
{
}

void sub_100159F04()
{
}

void sub_100159F60( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, void (**a6)(void, void))
{
  if (qword_1002A8CE8 != -1) {
    swift_once(&qword_1002A8CE8, sub_1000DF248);
  }
  sub_100019F58((void *)(qword_1002EB960 + 64), *(void *)(qword_1002EB960 + 88));
  sub_1000765E4(a3, a4, a5, v10, v11, v12, v13, v14);
  if ((v16 & 1) != 0) {
    uint64_t v17 = 0LL;
  }
  else {
    uint64_t v17 = v15;
  }
  a6[2](a6, v17);
  _Block_release(a6);
}

void sub_10015A048()
{
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  sub_10016096C();
  sub_1001609FC(v13, v14, v15, v16, v17, v18);
  sub_10003574C();
  v4(v8, v6, 2LL, v12, v3, v2, v1, v0);
  sub_1001607AC(v10);
}

uint64_t sub_10015A0E4()
{
  uint64_t v3 = v2;
  sub_100160984();
  sub_1001609FC(v4, v5, v6, v7, v8, v9);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  sub_100160938();
  id v10 = v0;
  sub_1001609DC();
  sub_10015A048();
  sub_1001609A0();

  return sub_100160790(v1);
}

void sub_10015A158(uint64_t a1, unint64_t a2, int a3, void *aBlock)
{
}

void sub_10015A1D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(void, void, void))
{
  if (qword_1002A8CE8 != -1) {
    swift_once(&qword_1002A8CE8, sub_1000DF248);
  }
  sub_1000E07AC(a3, a4, (uint64_t)v12);
  if (v5)
  {
    swift_errorRetain(v5);
    int v9 = (void *)_convertErrorToNSError(_:)(v5);
    ((void (**)(void, void *, void))a5)[2](a5, v9, 0LL);

    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _Block_release(a5);
  }

  else
  {
    sub_1000EBB34();
    if (v10) {
      NSString v11 = String._bridgeToObjectiveC()();
    }
    else {
      NSString v11 = 0LL;
    }
    ((void (**)(void, void, NSString))a5)[2](a5, 0LL, v11);
    swift_bridgeObjectRelease();

    sub_1000E4D0C((uint64_t)v12);
    _Block_release(a5);
  }

uint64_t sub_10015A394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100043720();
  unint64_t v8 = v7;
  id v9 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v34 = a1;
    unsigned int v32 = a3;
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    sub_100018F68(v11, (uint64_t)qword_1002EB9D0);
    swift_bridgeObjectRetain_n(v8, 2LL);
    id v12 = v10;
    int v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      log = v13;
      uint64_t v15 = a2;
      uint64_t v16 = swift_slowAlloc(32LL, -1LL);
      id v29 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v31 = swift_slowAlloc(64LL, -1LL);
      uint64_t v38 = v31;
      *(_DWORD *)uint64_t v16 = 136315650;
      swift_bridgeObjectRetain();
      uint64_t v36 = sub_1000CF360(v6, v8, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v16 + 4);
      swift_bridgeObjectRelease_n(v8, 3LL);
      *(_WORD *)(v16 + 12) = 2080;
      uint64_t v17 = StaticString.description.getter(v34, v15, v32);
      uint64_t v36 = sub_1000CF360(v17, v18, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v16 + 14);
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 22) = 2112;
      uint64_t v36 = (uint64_t)v12;
      id v19 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v16 + 24);
      void *v29 = v10;

      uint64_t v20 = log;
      _os_log_impl((void *)&_mh_execute_header, log, v14, "[%s] Entered %s from %@", (uint8_t *)v16, 0x20u);
      sub_1000175B0(&qword_1002B6F90);
      swift_arrayDestroy(v29, 1LL);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_arrayDestroy(v31, 2LL);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);

LABEL_10:
      goto LABEL_13;
    }

    swift_bridgeObjectRelease_n(v8, 2LL);
  }

  else
  {
    uint64_t v33 = a2;
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    sub_100018F68(v21, (uint64_t)qword_1002EB9D0);
    uint64_t v22 = swift_bridgeObjectRetain_n(v8, 2LL);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v23))
    {
      uint64_t v24 = swift_slowAlloc(22LL, -1LL);
      uint64_t v35 = a1;
      uint64_t v25 = swift_slowAlloc(64LL, -1LL);
      uint64_t v38 = v25;
      *(_DWORD *)uint64_t v24 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v36 = sub_1000CF360(v6, v8, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v24 + 4);
      swift_bridgeObjectRelease_n(v8, 3LL);
      *(_WORD *)(v24 + 12) = 2080;
      uint64_t v26 = StaticString.description.getter(v35, v33, a3);
      uint64_t v36 = sub_1000CF360(v26, v27, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v24 + 14);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v23, "[%s] Entered %s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy(v25, 2LL);
      swift_slowDealloc(v25, -1LL, -1LL);
      swift_slowDealloc(v24, -1LL, -1LL);
      goto LABEL_10;
    }

    swift_bridgeObjectRelease_n(v8, 2LL);
  }

uint64_t sub_10015A890( uint64_t a1, uint64_t a2, unsigned int a3, int a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, void *aBlock)
{
  uint64_t v13 = sub_100043720();
  unint64_t v15 = v14;
  id v16 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v16)
  {
    uint64_t v17 = v16;
    char v44 = a5;
    uint64_t v45 = a6;
    uint64_t v18 = v13;
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    sub_100018F68(v19, (uint64_t)qword_1002EB9D0);
    swift_bridgeObjectRetain_n(v15, 2LL);
    id v20 = v17;
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v40 = a8;
      uint64_t v23 = swift_slowAlloc(32LL, -1LL);
      uint64_t v37 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v38 = swift_slowAlloc(64LL, -1LL);
      uint64_t v49 = v38;
      *(_DWORD *)uint64_t v23 = 136315650;
      swift_bridgeObjectRetain();
      uint64_t v47 = sub_1000CF360(v18, v15, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v23 + 4);
      swift_bridgeObjectRelease_n(v15, 3LL);
      *(_WORD *)(v23 + 12) = 2080;
      uint64_t v24 = StaticString.description.getter(a1, a2, a3);
      uint64_t v47 = sub_1000CF360(v24, v25, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v23 + 14);
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 22) = 2112;
      uint64_t v47 = (uint64_t)v20;
      id v26 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v23 + 24);
      *uint64_t v37 = v17;

      _os_log_impl((void *)&_mh_execute_header, v21, v22, "[%s] Entered %s from %@", (uint8_t *)v23, 0x20u);
      sub_1000175B0(&qword_1002B6F90);
      swift_arrayDestroy(v37, 1LL);
      swift_slowDealloc(v37, -1LL, -1LL);
      swift_arrayDestroy(v38, 2LL);
      swift_slowDealloc(v38, -1LL, -1LL);
      uint64_t v27 = v23;
      a8 = v40;
      swift_slowDealloc(v27, -1LL, -1LL);

      uint64_t v13 = v18;
    }

    else
    {

      swift_bridgeObjectRelease_n(v15, 2LL);
      uint64_t v13 = v18;
    }

    a6 = v45;
    a5 = v44;
  }

  else
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    sub_100018F68(v28, (uint64_t)qword_1002EB9D0);
    uint64_t v29 = swift_bridgeObjectRetain_n(v15, 2LL);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v46 = a6;
      uint64_t v32 = swift_slowAlloc(22LL, -1LL);
      uint64_t v39 = swift_slowAlloc(64LL, -1LL);
      uint64_t v49 = v39;
      *(_DWORD *)uint64_t v32 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v47 = sub_1000CF360(v13, v15, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v32 + 4);
      swift_bridgeObjectRelease_n(v15, 3LL);
      *(_WORD *)(v32 + 12) = 2080;
      uint64_t v33 = StaticString.description.getter(a1, a2, a3);
      uint64_t v47 = sub_1000CF360(v33, v34, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v32 + 14);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "[%s] Entered %s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy(v39, 2LL);
      swift_slowDealloc(v39, -1LL, -1LL);
      uint64_t v35 = v32;
      a6 = v46;
      swift_slowDealloc(v35, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v15, 2LL);
    }
  }

  _Block_copy(aBlock);
  sub_100157B84(v13, v15, a5 & 1, a6, a7, a8, (void (**)(void, void))aBlock);
  sub_10015F804(v13, v15);
  swift_bridgeObjectRelease();
  _Block_release(aBlock);
  _Block_release(aBlock);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10015ADC0( uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, void *aBlock)
{
  uint64_t v12 = sub_100043720();
  unint64_t v14 = v13;
  id v15 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v15)
  {
    id v16 = v15;
    uint64_t v40 = a5;
    uint64_t v41 = a6;
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    sub_100018F68(v17, (uint64_t)qword_1002EB9D0);
    swift_bridgeObjectRetain_n(v14, 2LL);
    id v18 = v16;
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      unint64_t v34 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v35 = swift_slowAlloc(64LL, -1LL);
      uint64_t v46 = v35;
      *(_DWORD *)uint64_t v21 = 136315650;
      swift_bridgeObjectRetain();
      uint64_t v44 = sub_1000CF360(v12, v14, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v21 + 4);
      swift_bridgeObjectRelease_n(v14, 3LL);
      *(_WORD *)(v21 + 12) = 2080;
      uint64_t v22 = StaticString.description.getter(a1, a2, a3);
      uint64_t v44 = sub_1000CF360(v22, v23, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v21 + 14);
      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 22) = 2112;
      uint64_t v44 = (uint64_t)v18;
      id v24 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v21 + 24);
      *unint64_t v34 = v16;

      _os_log_impl((void *)&_mh_execute_header, v19, v20, "[%s] Entered %s from %@", (uint8_t *)v21, 0x20u);
      sub_1000175B0(&qword_1002B6F90);
      swift_arrayDestroy(v34, 1LL);
      swift_slowDealloc(v34, -1LL, -1LL);
      swift_arrayDestroy(v35, 2LL);
      swift_slowDealloc(v35, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v14, 2LL);
    }

    a5 = v40;
    a6 = v41;
  }

  else
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    sub_100018F68(v25, (uint64_t)qword_1002EB9D0);
    uint64_t v26 = swift_bridgeObjectRetain_n(v14, 2LL);
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v42 = a6;
      uint64_t v29 = swift_slowAlloc(22LL, -1LL);
      uint64_t v36 = swift_slowAlloc(64LL, -1LL);
      uint64_t v46 = v36;
      *(_DWORD *)uint64_t v29 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v44 = sub_1000CF360(v12, v14, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v29 + 4);
      swift_bridgeObjectRelease_n(v14, 3LL);
      *(_WORD *)(v29 + 12) = 2080;
      uint64_t v30 = StaticString.description.getter(a1, a2, a3);
      uint64_t v44 = sub_1000CF360(v30, v31, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v29 + 14);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "[%s] Entered %s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy(v36, 2LL);
      swift_slowDealloc(v36, -1LL, -1LL);
      uint64_t v32 = v29;
      a6 = v42;
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v14, 2LL);
    }
  }

  _Block_copy(aBlock);
  sub_100157DC4(v12, v14, a5, a6, a7, a8 & 1, (void (**)(void, void))aBlock);
  sub_10015F804(v12, v14);
  swift_bridgeObjectRelease();
  _Block_release(aBlock);
  _Block_release(aBlock);
  return swift_bridgeObjectRelease();
}

void sub_10015B2EC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, void *aBlock)
{
  uint64_t v9 = sub_100043720();
  unint64_t v11 = v10;
  id v12 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  uint64_t v35 = v9;
  if (v12)
  {
    unint64_t v13 = v12;
    unsigned int v31 = a3;
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_100018F68(v14, (uint64_t)qword_1002EB9D0);
    swift_bridgeObjectRetain_n(v11, 2LL);
    id v15 = v13;
    id v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc(32LL, -1LL);
      uint64_t v29 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v30 = swift_slowAlloc(64LL, -1LL);
      uint64_t v38 = v30;
      *(_DWORD *)uint64_t v18 = 136315650;
      swift_bridgeObjectRetain();
      uint64_t v36 = sub_1000CF360(v9, v11, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v18 + 4);
      swift_bridgeObjectRelease_n(v11, 3LL);
      *(_WORD *)(v18 + 12) = 2080;
      uint64_t v19 = StaticString.description.getter(a1, a2, v31);
      uint64_t v36 = sub_1000CF360(v19, v20, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v18 + 14);
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 22) = 2112;
      uint64_t v36 = (uint64_t)v15;
      id v21 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v18 + 24);
      void *v29 = v13;

      _os_log_impl((void *)&_mh_execute_header, v16, v17, "[%s] Entered %s from %@", (uint8_t *)v18, 0x20u);
      sub_1000175B0(&qword_1002B6F90);
      swift_arrayDestroy(v29, 1LL);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_arrayDestroy(v30, 2LL);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v11, 2LL);
    }
  }

  else
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    sub_100018F68(v22, (uint64_t)qword_1002EB9D0);
    uint64_t v23 = swift_bridgeObjectRetain_n(v11, 2LL);
    id v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc(22LL, -1LL);
      uint64_t v32 = swift_slowAlloc(64LL, -1LL);
      uint64_t v38 = v32;
      *(_DWORD *)uint64_t v26 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v36 = sub_1000CF360(v35, v11, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v26 + 4);
      swift_bridgeObjectRelease_n(v11, 3LL);
      *(_WORD *)(v26 + 12) = 2080;
      uint64_t v27 = StaticString.description.getter(a1, a2, a3);
      uint64_t v36 = sub_1000CF360(v27, v28, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v26 + 14);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "[%s] Entered %s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy(v32, 2LL);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v11, 2LL);
    }
  }

  _Block_copy(aBlock);
  if (qword_1002A8CE8 != -1) {
    swift_once(&qword_1002A8CE8, sub_1000DF248);
  }
  sub_100019F58((void *)(qword_1002EB960 + 104), *(void *)(qword_1002EB960 + 128));
  sub_100087B44();
  (*((void (**)(void *, void))aBlock + 2))(aBlock, 0LL);
  _Block_release(aBlock);
  sub_10015F804(v35, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _Block_release(aBlock);
  _Block_release(aBlock);
}

void sub_10015B830(int a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v12 = a7;
  uint64_t v13 = a6;
  uint64_t v14 = a5;
  sub_100160828(a1, a2, a3, a4, a5, a6, a7, a8, v59, v61, v65, v69, v73, v74, v78, v80, log, v84, v86, v88, v89);
  uint64_t v15 = sub_100043720();
  uint64_t v17 = v16;
  id v18 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v85 = v14;
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v20 = sub_100077D08();
    sub_100160748(v20, (uint64_t)qword_1002EB9D0);
    id v21 = v19;
    Logger.logObject.getter(v21);
    os_log_type_t v22 = sub_100092CFC();
    if (sub_100160870(v22))
    {
      uint64_t v23 = sub_100019464(32LL);
      uint64_t v63 = sub_100019464(8LL);
      uint64_t v67 = sub_100019464(64LL);
      uint64_t v92 = v67;
      *(_DWORD *)uint64_t v23 = 136315650;
      sub_10003574C();
      uint64_t v25 = sub_1001608B4(v15, v24, &v92);
      uint64_t v26 = sub_10016091C(v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v26, v27, v23 + 4);
      uint64_t v28 = sub_100160778();
      *(_WORD *)(v23 + 12) = 2080;
      uint64_t v36 = sub_100160844(v28, v29, v30, v31, v32, v33, v34, v35, v60, v63, v67, v15, v9, v75, v79, v81, loga);
      uint64_t v91 = sub_1001608BC(v36, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v12, v23 + 14);
      sub_10001EDA0();
      *(_WORD *)(v23 + 22) = 2112;
      uint64_t v91 = (uint64_t)v21;
      id v38 = v21;
      uint64_t v39 = v12;
      uint64_t v12 = v76;
      uint64_t v15 = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v39, v23 + 24);
      *unint64_t v64 = v19;

      _os_log_impl( (void *)&_mh_execute_header,  v8,  (os_log_type_t)v13,  "[%s] Entered %s from %@",  (uint8_t *)v23,  0x20u);
      sub_1000175B0(&qword_1002B6F90);
      sub_100160880();
      sub_10001A408((uint64_t)v64);
      sub_100093110(v68);
      sub_10001A408(v68);
      sub_10001A408(v23);
    }

    else
    {

      sub_100160784();
    }

    uint64_t v14 = v85;
  }

  else
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v40 = sub_100077D08();
    uint64_t v41 = sub_100160748(v40, (uint64_t)qword_1002EB9D0);
    Logger.logObject.getter(v41);
    os_log_type_t v42 = sub_100092CFC();
    if (sub_100160860(v42))
    {
      uint64_t v87 = v13;
      uint64_t v43 = sub_100019464(22LL);
      uint64_t v71 = sub_100019464(64LL);
      uint64_t v92 = v71;
      *(_DWORD *)uint64_t v43 = 136315394;
      sub_10003574C();
      uint64_t v91 = sub_1001608B4(v15, v44, &v92);
      sub_100160910((uint64_t)&v91);
      uint64_t v45 = sub_100160778();
      *(_WORD *)(v43 + 12) = 2080;
      uint64_t v53 = sub_100160844(v45, v46, v47, v48, v49, v50, v51, v52, v60, v62, v66, v71, v9, v12, v79, v81, loga);
      uint64_t v55 = sub_1001608BC(v53, v54);
      uint64_t v56 = sub_1001609BC(v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v56, v57, v43 + 14);
      swift_bridgeObjectRelease();
      sub_100077D5C((void *)&_mh_execute_header, v8, v10, "[%s] Entered %s");
      sub_100093110(v72);
      uint64_t v12 = v77;
      sub_10001A408(v72);
      uint64_t v58 = v43;
      uint64_t v13 = v87;
      sub_10001A408(v58);
    }

    else
    {

      sub_100160784();
    }
  }

  sub_100160A50();
  sub_1001585F0(v15, v17, v14, v13, v12, (uint64_t)a8, v90);
  sub_100160998(v15);
  sub_10003561C();
  sub_100160804();
  sub_100160804();
  swift_bridgeObjectRelease();
  sub_10016080C();
}

uint64_t sub_10015BC00( uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v12 = sub_100043720();
  unint64_t v14 = v13;
  id v15 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v46 = a8;
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    sub_100018F68(v17, (uint64_t)qword_1002EB9D0);
    swift_bridgeObjectRetain_n(v14, 2LL);
    id v18 = v16;
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t type = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, type))
    {
      uint64_t v40 = a6;
      uint64_t v20 = swift_slowAlloc(32LL, -1LL);
      unint64_t v37 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v38 = swift_slowAlloc(64LL, -1LL);
      uint64_t v51 = v38;
      *(_DWORD *)uint64_t v20 = 136315650;
      swift_bridgeObjectRetain();
      uint64_t v49 = sub_1000CF360(v12, v14, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v20 + 4);
      swift_bridgeObjectRelease_n(v14, 3LL);
      *(_WORD *)(v20 + 12) = 2080;
      uint64_t v21 = StaticString.description.getter(a1, a2, a3);
      unsigned int loga = v19;
      uint64_t v49 = sub_1000CF360(v21, v22, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v20 + 14);
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 22) = 2112;
      uint64_t v49 = (uint64_t)v18;
      id v23 = v18;
      uint64_t v24 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v20 + 24);
      *unint64_t v37 = v16;

      _os_log_impl((void *)&_mh_execute_header, loga, type, "[%s] Entered %s from %@", (uint8_t *)v20, 0x20u);
      sub_1000175B0(&qword_1002B6F90);
      swift_arrayDestroy(v37, 1LL);
      swift_slowDealloc(v37, -1LL, -1LL);
      swift_arrayDestroy(v38, 2LL);
      swift_slowDealloc(v38, -1LL, -1LL);
      uint64_t v25 = v20;
      a6 = v40;
      swift_slowDealloc(v25, -1LL, -1LL);

      a8 = v46;
    }

    else
    {

      swift_bridgeObjectRelease_n(v14, 2LL);
      a8 = v46;
      uint64_t v24 = v12;
    }
  }

  else
  {
    uint64_t v26 = v12;
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v27 = type metadata accessor for Logger(0LL);
    sub_100018F68(v27, (uint64_t)qword_1002EB9D0);
    uint64_t v28 = swift_bridgeObjectRetain_n(v14, 2LL);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc(22LL, -1LL);
      uint64_t v41 = a6;
      uint64_t v32 = swift_slowAlloc(64LL, -1LL);
      uint64_t v51 = v32;
      *(_DWORD *)uint64_t v31 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v49 = sub_1000CF360(v26, v14, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v31 + 4);
      swift_bridgeObjectRelease_n(v14, 3LL);
      *(_WORD *)(v31 + 12) = 2080;
      uint64_t v33 = StaticString.description.getter(a1, a2, a3);
      uint64_t v49 = sub_1000CF360(v33, v34, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v31 + 14);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "[%s] Entered %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy(v32, 2LL);
      uint64_t v35 = v32;
      a6 = v41;
      swift_slowDealloc(v35, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v14, 2LL);
    }

    uint64_t v24 = v26;
  }

  _Block_copy(a10);
  sub_1001580CC(v24, v14, a5, a6, a7 & 1, a8, a9, (void (**)(void, void))a10);
  sub_10015F804(v24, v14);
  swift_bridgeObjectRelease();
  _Block_release(a10);
  _Block_release(a10);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_10015C144(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *aBlock)
{
  uint64_t v8 = sub_100043720();
  unint64_t v10 = v9;
  id v11 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v36 = a2;
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_100018F68(v13, (uint64_t)qword_1002EB9D0);
    swift_bridgeObjectRetain_n(v10, 2LL);
    id v14 = v12;
    id v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      int log = v15;
      uint64_t v17 = a3;
      uint64_t v18 = swift_slowAlloc(32LL, -1LL);
      uint64_t v33 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v35 = swift_slowAlloc(64LL, -1LL);
      uint64_t v41 = v35;
      *(_DWORD *)uint64_t v18 = 136315650;
      swift_bridgeObjectRetain();
      uint64_t v39 = sub_1000CF360(v8, v10, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v18 + 4);
      swift_bridgeObjectRelease_n(v10, 3LL);
      *(_WORD *)(v18 + 12) = 2080;
      uint64_t v19 = StaticString.description.getter(a1, v36, v17);
      uint64_t v39 = sub_1000CF360(v19, v20, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v18 + 14);
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 22) = 2112;
      uint64_t v39 = (uint64_t)v14;
      id v21 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v18 + 24);
      *uint64_t v33 = v12;

      _os_log_impl((void *)&_mh_execute_header, log, v16, "[%s] Entered %s from %@", (uint8_t *)v18, 0x20u);
      sub_1000175B0(&qword_1002B6F90);
      swift_arrayDestroy(v33, 1LL);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_arrayDestroy(v35, 2LL);
      swift_slowDealloc(v35, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v10, 2LL);
    }
  }

  else
  {
    unsigned int v37 = a3;
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    sub_100018F68(v22, (uint64_t)qword_1002EB9D0);
    uint64_t v23 = swift_bridgeObjectRetain_n(v10, 2LL);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc(22LL, -1LL);
      uint64_t v27 = swift_slowAlloc(64LL, -1LL);
      uint64_t v41 = v27;
      *(_DWORD *)uint64_t v26 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v39 = sub_1000CF360(v8, v10, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v26 + 4);
      swift_bridgeObjectRelease_n(v10, 3LL);
      *(_WORD *)(v26 + 12) = 2080;
      uint64_t v28 = StaticString.description.getter(a1, a2, v37);
      uint64_t v39 = sub_1000CF360(v28, v29, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v26 + 14);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "[%s] Entered %s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy(v27, 2LL);
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v10, 2LL);
    }
  }

  _Block_copy(aBlock);
  if (qword_1002A8CE8 != -1) {
    swift_once(&qword_1002A8CE8, sub_1000DF248);
  }
  uint64_t v30 = qword_1002EB960;
  uint64_t v31 = *(os_unfair_lock_s **)(*(void *)(qword_1002EB960 + 48) + 16LL);
  swift_retain();
  os_unfair_lock_lock(v31);
  uint64_t v32 = *(void *)(v30 + 40);
  os_unfair_lock_unlock(v31);
  swift_release();
  (*((void (**)(void *, uint64_t))aBlock + 2))(aBlock, v32);
  _Block_release(aBlock);
  sub_10015F804(v8, v10);
  swift_bridgeObjectRelease();
  _Block_release(aBlock);
  _Block_release(aBlock);
}

void sub_10015C67C(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, void *aBlock)
{
  uint64_t v10 = sub_100043720();
  unint64_t v12 = v11;
  id v13 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v13)
  {
    id v14 = v13;
    uint64_t v39 = a5;
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    sub_100018F68(v15, (uint64_t)qword_1002EB9D0);
    swift_bridgeObjectRetain_n(v12, 2LL);
    id v16 = v14;
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v34 = v10;
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      uint64_t v32 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v33 = swift_slowAlloc(64LL, -1LL);
      uint64_t v43 = v33;
      *(_DWORD *)uint64_t v19 = 136315650;
      swift_bridgeObjectRetain();
      uint64_t v41 = sub_1000CF360(v34, v12, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v19 + 4);
      swift_bridgeObjectRelease_n(v12, 3LL);
      *(_WORD *)(v19 + 12) = 2080;
      uint64_t v20 = StaticString.description.getter(a1, a2, a3);
      uint64_t v41 = sub_1000CF360(v20, v21, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v19 + 14);
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 22) = 2112;
      uint64_t v41 = (uint64_t)v16;
      id v22 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v19 + 24);
      *uint64_t v32 = v14;

      _os_log_impl((void *)&_mh_execute_header, v17, v18, "[%s] Entered %s from %@", (uint8_t *)v19, 0x20u);
      sub_1000175B0(&qword_1002B6F90);
      swift_arrayDestroy(v32, 1LL);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_arrayDestroy(v33, 2LL);
      swift_slowDealloc(v33, -1LL, -1LL);
      uint64_t v23 = v19;
      uint64_t v10 = v34;
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v12, 2LL);
    }

    a5 = v39;
  }

  else
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    sub_100018F68(v24, (uint64_t)qword_1002EB9D0);
    uint64_t v25 = swift_bridgeObjectRetain_n(v12, 2LL);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v40 = a5;
      uint64_t v28 = swift_slowAlloc(22LL, -1LL);
      uint64_t v35 = swift_slowAlloc(64LL, -1LL);
      uint64_t v43 = v35;
      *(_DWORD *)uint64_t v28 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v41 = sub_1000CF360(v10, v12, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v28 + 4);
      swift_bridgeObjectRelease_n(v12, 3LL);
      *(_WORD *)(v28 + 12) = 2080;
      uint64_t v29 = StaticString.description.getter(a1, a2, a3);
      uint64_t v41 = sub_1000CF360(v29, v30, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v28 + 14);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "[%s] Entered %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy(v35, 2LL);
      swift_slowDealloc(v35, -1LL, -1LL);
      uint64_t v31 = v28;
      a5 = v40;
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v12, 2LL);
    }
  }

  _Block_copy(aBlock);
  sub_100158304(v10, v12, a5, a6, (void (**)(void, void))aBlock);
  sub_10015F804(v10, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _Block_release(aBlock);
  _Block_release(aBlock);
}

uint64_t sub_10015CB88( uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, void *aBlock, void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, void *))
{
  uint64_t v14 = sub_100043720();
  uint64_t v16 = v15;
  id v17 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v17)
  {
    os_log_type_t v18 = v17;
    uint64_t v72 = v14;
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v19 = sub_100077D08();
    sub_100160748(v19, (uint64_t)qword_1002EB9D0);
    id v20 = v18;
    Logger.logObject.getter(v20);
    os_log_type_t v21 = sub_100092CFC();
    if (sub_100160870(v21))
    {
      uint64_t v22 = sub_100019464(32LL);
      uint64_t v58 = sub_100019464(8LL);
      uint64_t v61 = sub_100019464(64LL);
      uint64_t v76 = v61;
      *(_DWORD *)uint64_t v22 = 136315650;
      sub_10003574C();
      uint64_t v74 = sub_1001608B4(v72, v23, &v76);
      sub_100092A20((uint64_t)&v74, (uint64_t)&v75);
      uint64_t v24 = sub_100160778();
      *(_WORD *)(v22 + 12) = 2080;
      uint64_t v32 = sub_1001609D0(v24, v25, v26, v27, v28, v29, v30, v31, v58, v61, (uint64_t)a8, a6, v9, a1, a2, a3);
      uint64_t v70 = v8;
      unint64_t v34 = v33;
      uint64_t v74 = sub_1001608BC(v32, v33);
      sub_100092A20((uint64_t)&v74, (uint64_t)&v75);
      sub_10001EDA0();
      sub_1001609A8();
      uint64_t v74 = (uint64_t)v20;
      id v35 = v20;
      a8 = v63;
      a6 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v34);
      *uint64_t v59 = v18;

      sub_1001608C4((void *)&_mh_execute_header, v36, v37, "[%s] Entered %s from %@");
      sub_1000175B0(&qword_1002B6F90);
      sub_100160880();
      sub_10001A408((uint64_t)v59);
      sub_100093110(v62);
      sub_10001A408(v62);
      sub_10001A408(v22);

      uint64_t v14 = v72;
    }

    else
    {

      sub_100160784();
      uint64_t v14 = v72;
    }
  }

  else
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v38 = sub_100077D08();
    uint64_t v39 = sub_100160748(v38, (uint64_t)qword_1002EB9D0);
    Logger.logObject.getter(v39);
    os_log_type_t v40 = sub_100092CFC();
    if (sub_100160860(v40))
    {
      uint64_t v71 = a5;
      uint64_t v41 = sub_100019464(22LL);
      uint64_t v73 = v14;
      uint64_t v42 = sub_100019464(64LL);
      uint64_t v76 = v42;
      *(_DWORD *)uint64_t v41 = 136315394;
      sub_10003574C();
      uint64_t v74 = sub_1001608B4(v73, v43, &v76);
      sub_100160910((uint64_t)&v74);
      uint64_t v44 = sub_100160778();
      *(_WORD *)(v41 + 12) = 2080;
      uint64_t v52 = sub_1001609D0(v44, v45, v46, v47, v48, v49, v50, v51, v57, v60, (uint64_t)a8, a6, v9, a1, a2, a3);
      uint64_t v74 = sub_1001608BC(v52, v53);
      a8 = v64;
      a6 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v41 + 14);
      swift_bridgeObjectRelease();
      sub_100077D5C((void *)&_mh_execute_header, (os_log_s *)v8, (os_log_type_t)v9, "[%s] Entered %s");
      sub_100093110(v42);
      uint64_t v54 = v42;
      uint64_t v14 = v73;
      sub_10001A408(v54);
      uint64_t v55 = v41;
      a5 = v71;
      sub_10001A408(v55);
    }

    else
    {

      sub_100160784();
    }
  }

  sub_100160A50();
  a8(v14, v16, a5, a6, aBlock);
  sub_100160998(v14);
  sub_10003561C();
  sub_100160804();
  sub_100160804();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10015CF78( uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *aBlock)
{
  uint64_t v12 = sub_100043720();
  unint64_t v14 = v13;
  id v15 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v44 = a5;
    uint64_t v17 = v12;
    uint64_t v39 = a7;
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    sub_100018F68(v18, (uint64_t)qword_1002EB9D0);
    swift_bridgeObjectRetain_n(v14, 2LL);
    id v19 = v16;
    id v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      *(void *)os_log_type_t type = a8;
      uint64_t v22 = swift_slowAlloc(32LL, -1LL);
      uint64_t v36 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v37 = swift_slowAlloc(64LL, -1LL);
      uint64_t v48 = v37;
      *(_DWORD *)uint64_t v22 = 136315650;
      swift_bridgeObjectRetain();
      uint64_t v46 = sub_1000CF360(v17, v14, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v22 + 4);
      swift_bridgeObjectRelease_n(v14, 3LL);
      *(_WORD *)(v22 + 12) = 2080;
      uint64_t v23 = StaticString.description.getter(a1, a2, a3);
      uint64_t v46 = sub_1000CF360(v23, v24, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v22 + 14);
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 22) = 2112;
      uint64_t v46 = (uint64_t)v19;
      id v25 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v22 + 24);
      *uint64_t v36 = v16;

      os_log_type_t v26 = v21;
      uint64_t v12 = v17;
      _os_log_impl((void *)&_mh_execute_header, v20, v26, "[%s] Entered %s from %@", (uint8_t *)v22, 0x20u);
      sub_1000175B0(&qword_1002B6F90);
      swift_arrayDestroy(v36, 1LL);
      swift_slowDealloc(v36, -1LL, -1LL);
      swift_arrayDestroy(v37, 2LL);
      swift_slowDealloc(v37, -1LL, -1LL);
      uint64_t v27 = v22;
      a8 = *(void *)type;
      swift_slowDealloc(v27, -1LL, -1LL);

      a7 = v39;
    }

    else
    {

      swift_bridgeObjectRelease_n(v14, 2LL);
      a7 = v39;
      uint64_t v12 = v17;
    }

    a5 = v44;
  }

  else
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    sub_100018F68(v28, (uint64_t)qword_1002EB9D0);
    uint64_t v29 = swift_bridgeObjectRetain_n(v14, 2LL);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc(22LL, -1LL);
      uint64_t v40 = swift_slowAlloc(64LL, -1LL);
      uint64_t v48 = v40;
      *(_DWORD *)uint64_t v32 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v46 = sub_1000CF360(v12, v14, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v32 + 4);
      swift_bridgeObjectRelease_n(v14, 3LL);
      *(_WORD *)(v32 + 12) = 2080;
      uint64_t v33 = StaticString.description.getter(a1, a2, a3);
      uint64_t v46 = sub_1000CF360(v33, v34, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v32 + 14);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "[%s] Entered %s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy(v40, 2LL);
      swift_slowDealloc(v40, -1LL, -1LL);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v14, 2LL);
    }
  }

  _Block_copy(aBlock);
  sub_1001589D4( v12,  v14,  a5,  a6,  a7,  a8,  (uint64_t)aBlock,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000E188C);
  sub_10015F804(v12, v14);
  swift_bridgeObjectRelease();
  _Block_release(aBlock);
  _Block_release(aBlock);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_10015D4C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (**a10)(void, void))
{
  uint64_t v45 = sub_100043720();
  unint64_t v13 = v12;
  id v14 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v14)
  {
    id v15 = v14;
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_100018F68(v16, (uint64_t)qword_1002EB9D0);
    swift_bridgeObjectRetain_n(v13, 2LL);
    id v17 = v15;
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t type = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, type))
    {
      uint64_t v41 = a5;
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      id v35 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v37 = swift_slowAlloc(64LL, -1LL);
      uint64_t v48 = v37;
      *(_DWORD *)uint64_t v19 = 136315650;
      swift_bridgeObjectRetain();
      int log = v18;
      uint64_t v20 = a3;
      uint64_t v21 = v45;
      unint64_t v36 = v13;
      uint64_t v46 = sub_1000CF360(v45, v13, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v19 + 4);
      swift_bridgeObjectRelease_n(v13, 3LL);
      *(_WORD *)(v19 + 12) = 2080;
      uint64_t v22 = StaticString.description.getter(a1, a2, v20);
      uint64_t v46 = sub_1000CF360(v22, v23, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v19 + 14);
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 22) = 2112;
      uint64_t v46 = (uint64_t)v17;
      id v24 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v19 + 24);
      *id v35 = v15;

      _os_log_impl((void *)&_mh_execute_header, log, type, "[%s] Entered %s from %@", (uint8_t *)v19, 0x20u);
      sub_1000175B0(&qword_1002B6F90);
      swift_arrayDestroy(v35, 1LL);
      swift_slowDealloc(v35, -1LL, -1LL);
      swift_arrayDestroy(v37, 2LL);
      swift_slowDealloc(v37, -1LL, -1LL);
      uint64_t v25 = v19;
      a5 = v41;
      swift_slowDealloc(v25, -1LL, -1LL);

      unint64_t v13 = v36;
      goto LABEL_13;
    }

    swift_bridgeObjectRelease_n(v13, 2LL);
  }

  else
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v26 = type metadata accessor for Logger(0LL);
    sub_100018F68(v26, (uint64_t)qword_1002EB9D0);
    uint64_t v27 = swift_bridgeObjectRetain_n(v13, 2LL);
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      os_log_type_t v38 = v29;
      uint64_t v30 = swift_slowAlloc(22LL, -1LL);
      uint64_t typea = swift_slowAlloc(64LL, -1LL);
      uint64_t v48 = typea;
      *(_DWORD *)uint64_t v30 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v31 = a3;
      uint64_t v21 = v45;
      uint64_t v46 = sub_1000CF360(v45, v13, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v30 + 4);
      swift_bridgeObjectRelease_n(v13, 3LL);
      *(_WORD *)(v30 + 12) = 2080;
      uint64_t v32 = StaticString.description.getter(a1, a2, v31);
      uint64_t v46 = sub_1000CF360(v32, v33, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v30 + 14);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v38, "[%s] Entered %s", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy(typea, 2LL);
      swift_slowDealloc(typea, -1LL, -1LL);
      swift_slowDealloc(v30, -1LL, -1LL);

      goto LABEL_13;
    }

    swift_bridgeObjectRelease_n(v13, 2LL);
  }

  uint64_t v21 = v45;
LABEL_13:
  _Block_copy(a10);
  sub_10015F9A0(v21, v13);
  if (qword_1002A8CE8 != -1) {
    swift_once(&qword_1002A8CE8, sub_1000DF248);
  }
  sub_1000E18CC(a6);
  a10[2](a10, 0LL);
  _Block_release(a10);
  sub_10015F804(v21, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  _Block_release(a10);
  _Block_release(a10);
}

void sub_10015DA54( uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, void *aBlock)
{
  uint64_t v12 = sub_100043720();
  unint64_t v14 = v13;
  id v15 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  uint64_t v48 = v12;
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v42 = a5;
    uint64_t v47 = a6;
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    sub_100018F68(v17, (uint64_t)qword_1002EB9D0);
    swift_bridgeObjectRetain_n(v14, 2LL);
    id v18 = v16;
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v41 = a7;
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      uint64_t v39 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v40 = swift_slowAlloc(64LL, -1LL);
      uint64_t v51 = v40;
      *(_DWORD *)uint64_t v21 = 136315650;
      swift_bridgeObjectRetain();
      uint64_t v49 = sub_1000CF360(v12, v14, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v21 + 4);
      swift_bridgeObjectRelease_n(v14, 3LL);
      *(_WORD *)(v21 + 12) = 2080;
      uint64_t v22 = StaticString.description.getter(a1, a2, a3);
      uint64_t v49 = sub_1000CF360(v22, v23, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v21 + 14);
      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 22) = 2112;
      uint64_t v49 = (uint64_t)v18;
      id v24 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v21 + 24);
      *uint64_t v39 = v16;

      _os_log_impl((void *)&_mh_execute_header, v19, v20, "[%s] Entered %s from %@", (uint8_t *)v21, 0x20u);
      sub_1000175B0(&qword_1002B6F90);
      swift_arrayDestroy(v39, 1LL);
      swift_slowDealloc(v39, -1LL, -1LL);
      swift_arrayDestroy(v40, 2LL);
      swift_slowDealloc(v40, -1LL, -1LL);
      uint64_t v25 = v21;
      a7 = v41;
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v14, 2LL);
    }

    a6 = v47;
    a5 = v42;
  }

  else
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v26 = type metadata accessor for Logger(0LL);
    sub_100018F68(v26, (uint64_t)qword_1002EB9D0);
    uint64_t v27 = swift_bridgeObjectRetain_n(v14, 2LL);
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc(22LL, -1LL);
      uint64_t v43 = swift_slowAlloc(64LL, -1LL);
      uint64_t v51 = v43;
      *(_DWORD *)uint64_t v30 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v49 = sub_1000CF360(v48, v14, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v30 + 4);
      swift_bridgeObjectRelease_n(v14, 3LL);
      *(_WORD *)(v30 + 12) = 2080;
      uint64_t v31 = StaticString.description.getter(a1, a2, a3);
      uint64_t v49 = sub_1000CF360(v31, v32, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v30 + 14);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "[%s] Entered %s", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy(v43, 2LL);
      swift_slowDealloc(v43, -1LL, -1LL);
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v14, 2LL);
    }
  }

  _Block_copy(aBlock);
  if (qword_1002A8CE8 != -1) {
    swift_once(&qword_1002A8CE8, sub_1000DF248);
  }
  sub_100019F58((void *)(qword_1002EB960 + 64), *(void *)(qword_1002EB960 + 88));
  sub_100075F64(a5, a6, a7, v33, v34, v35, v36, v37);
  (*((void (**)(void *, uint64_t))aBlock + 2))(aBlock, v38);
  _Block_release(aBlock);
  sub_10015F804(v48, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _Block_release(aBlock);
  _Block_release(aBlock);
}

uint64_t sub_10015DFAC( uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *aBlock)
{
  uint64_t v13 = sub_100043720();
  unint64_t v15 = v14;
  id v16 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v44 = a5;
    uint64_t v45 = a6;
    uint64_t v18 = v13;
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    sub_100018F68(v19, (uint64_t)qword_1002EB9D0);
    swift_bridgeObjectRetain_n(v15, 2LL);
    id v20 = v17;
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v40 = a8;
      uint64_t v23 = swift_slowAlloc(32LL, -1LL);
      uint64_t v37 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v38 = swift_slowAlloc(64LL, -1LL);
      uint64_t v49 = v38;
      *(_DWORD *)uint64_t v23 = 136315650;
      swift_bridgeObjectRetain();
      uint64_t v47 = sub_1000CF360(v18, v15, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v23 + 4);
      swift_bridgeObjectRelease_n(v15, 3LL);
      *(_WORD *)(v23 + 12) = 2080;
      uint64_t v24 = StaticString.description.getter(a1, a2, a3);
      uint64_t v47 = sub_1000CF360(v24, v25, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v23 + 14);
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 22) = 2112;
      uint64_t v47 = (uint64_t)v20;
      id v26 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v23 + 24);
      *uint64_t v37 = v17;

      _os_log_impl((void *)&_mh_execute_header, v21, v22, "[%s] Entered %s from %@", (uint8_t *)v23, 0x20u);
      sub_1000175B0(&qword_1002B6F90);
      swift_arrayDestroy(v37, 1LL);
      swift_slowDealloc(v37, -1LL, -1LL);
      swift_arrayDestroy(v38, 2LL);
      swift_slowDealloc(v38, -1LL, -1LL);
      uint64_t v27 = v23;
      a8 = v40;
      swift_slowDealloc(v27, -1LL, -1LL);

      uint64_t v13 = v18;
    }

    else
    {

      swift_bridgeObjectRelease_n(v15, 2LL);
      uint64_t v13 = v18;
    }

    a5 = v44;
    a6 = v45;
  }

  else
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    sub_100018F68(v28, (uint64_t)qword_1002EB9D0);
    uint64_t v29 = swift_bridgeObjectRetain_n(v15, 2LL);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v46 = a6;
      uint64_t v32 = swift_slowAlloc(22LL, -1LL);
      uint64_t v39 = swift_slowAlloc(64LL, -1LL);
      uint64_t v49 = v39;
      *(_DWORD *)uint64_t v32 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v47 = sub_1000CF360(v13, v15, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v32 + 4);
      swift_bridgeObjectRelease_n(v15, 3LL);
      *(_WORD *)(v32 + 12) = 2080;
      uint64_t v33 = StaticString.description.getter(a1, a2, a3);
      uint64_t v47 = sub_1000CF360(v33, v34, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v32 + 14);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "[%s] Entered %s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy(v39, 2LL);
      swift_slowDealloc(v39, -1LL, -1LL);
      uint64_t v35 = v32;
      a6 = v46;
      swift_slowDealloc(v35, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v15, 2LL);
    }
  }

  _Block_copy(aBlock);
  sub_1001589D4( v13,  v15,  a5,  a6,  a7,  a8,  (uint64_t)aBlock,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000E2284);
  sub_10015F804(v13, v15);
  swift_bridgeObjectRelease();
  _Block_release(aBlock);
  _Block_release(aBlock);
  return swift_bridgeObjectRelease();
}

void sub_10015E4DC(int a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v11 = a7;
  uint64_t v12 = a6;
  uint64_t v13 = a5;
  sub_100160828(a1, a2, a3, a4, a5, a6, a7, a8, v62, v64, v68, v72, v77, v78, v82, v84, v86, v89, v91, v93, v94);
  uint64_t v14 = sub_100043720();
  uint64_t v16 = v15;
  id v17 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v90 = v13;
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v19 = sub_100077D08();
    sub_100160748(v19, (uint64_t)qword_1002EB9D0);
    id v20 = v18;
    Logger.logObject.getter(v20);
    os_log_type_t v21 = sub_100092CFC();
    if (sub_100160870(v21))
    {
      uint64_t v73 = v14;
      uint64_t v22 = sub_100019464(32LL);
      uint64_t v66 = sub_100019464(8LL);
      uint64_t v70 = sub_100019464(64LL);
      uint64_t v97 = v70;
      *(_DWORD *)uint64_t v22 = 136315650;
      sub_10003574C();
      uint64_t v24 = sub_1001608B4(v73, v23, &v97);
      uint64_t v25 = sub_10016091C(v24);
      sub_100092A20(v25, v26);
      uint64_t v27 = sub_100160778();
      *(_WORD *)(v22 + 12) = 2080;
      uint64_t v35 = sub_100160844(v27, v28, v29, v30, v31, v32, v33, v34, v63, v66, v70, v73, v9, v79, v83, v85, v87);
      uint64_t v88 = v8;
      unint64_t v37 = v36;
      uint64_t v96 = sub_1001608BC(v35, v36);
      sub_100092A20((uint64_t)&v96, v11);
      sub_10001EDA0();
      sub_1001609A8();
      uint64_t v96 = (uint64_t)v20;
      id v38 = v20;
      uint64_t v39 = v11;
      uint64_t v11 = v80;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v39, v37);
      *uint64_t v67 = v18;

      sub_1001608C4((void *)&_mh_execute_header, v40, v41, "[%s] Entered %s from %@");
      sub_1000175B0(&qword_1002B6F90);
      sub_100160880();
      sub_10001A408((uint64_t)v67);
      sub_100093110(v71);
      sub_10001A408(v71);
      uint64_t v42 = v22;
      uint64_t v14 = v74;
      sub_10001A408(v42);
    }

    else
    {

      sub_100160784();
    }

    uint64_t v13 = v90;
  }

  else
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v43 = sub_100077D08();
    uint64_t v44 = sub_100160748(v43, (uint64_t)qword_1002EB9D0);
    Logger.logObject.getter(v44);
    os_log_type_t v45 = sub_100092CFC();
    if (sub_100160860(v45))
    {
      uint64_t v92 = v12;
      uint64_t v46 = sub_100019464(22LL);
      uint64_t v75 = sub_100019464(64LL);
      uint64_t v97 = v75;
      *(_DWORD *)uint64_t v46 = 136315394;
      sub_10003574C();
      uint64_t v96 = sub_1001608B4(v14, v47, &v97);
      sub_100160910((uint64_t)&v96);
      uint64_t v48 = sub_100160778();
      *(_WORD *)(v46 + 12) = 2080;
      uint64_t v56 = sub_100160844(v48, v49, v50, v51, v52, v53, v54, v55, v63, v65, v69, v75, v9, v11, v83, v85, v87);
      uint64_t v58 = sub_1001608BC(v56, v57);
      uint64_t v59 = sub_1001609BC(v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v59, v60, v46 + 14);
      swift_bridgeObjectRelease();
      sub_100077D5C((void *)&_mh_execute_header, (os_log_s *)v8, (os_log_type_t)v14, "[%s] Entered %s");
      sub_100093110(v76);
      uint64_t v11 = v81;
      sub_10001A408(v76);
      uint64_t v61 = v46;
      uint64_t v12 = v92;
      sub_10001A408(v61);
    }

    else
    {

      sub_100160784();
    }
  }

  sub_100160A50();
  v95(v14, v16, v13, v12, v11, a8);
  sub_100160998(v14);
  sub_10003561C();
  sub_100160804();
  sub_100160804();
  swift_bridgeObjectRelease();
  sub_10016080C();
}

uint64_t sub_10015E88C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, void *aBlock)
{
  uint64_t v37 = sub_100043720();
  unint64_t v11 = v10;
  id v12 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v12)
  {
    uint64_t v13 = v12;
    unsigned int v35 = a3;
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_100018F68(v14, (uint64_t)qword_1002EB9D0);
    swift_bridgeObjectRetain_n(v11, 2LL);
    id v15 = v13;
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      int log = v16;
      uint64_t v18 = a2;
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      uint64_t v31 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v33 = swift_slowAlloc(64LL, -1LL);
      uint64_t v40 = v33;
      *(_DWORD *)uint64_t v19 = 136315650;
      swift_bridgeObjectRetain();
      uint64_t v38 = sub_1000CF360(v37, v11, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v19 + 4);
      swift_bridgeObjectRelease_n(v11, 3LL);
      *(_WORD *)(v19 + 12) = 2080;
      uint64_t v20 = StaticString.description.getter(a1, v18, v35);
      uint64_t v38 = sub_1000CF360(v20, v21, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v19 + 14);
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 22) = 2112;
      uint64_t v38 = (uint64_t)v15;
      id v22 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v19 + 24);
      *uint64_t v31 = v13;

      uint64_t v23 = log;
      _os_log_impl((void *)&_mh_execute_header, log, v17, "[%s] Entered %s from %@", (uint8_t *)v19, 0x20u);
      sub_1000175B0(&qword_1002B6F90);
      swift_arrayDestroy(v31, 1LL);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_arrayDestroy(v33, 2LL);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);

LABEL_10:
      goto LABEL_13;
    }

    swift_bridgeObjectRelease_n(v11, 2LL);
  }

  else
  {
    uint64_t v36 = a2;
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    sub_100018F68(v24, (uint64_t)qword_1002EB9D0);
    uint64_t v25 = swift_bridgeObjectRetain_n(v11, 2LL);
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v26))
    {
      uint64_t v27 = swift_slowAlloc(22LL, -1LL);
      uint64_t v34 = swift_slowAlloc(64LL, -1LL);
      uint64_t v40 = v34;
      *(_DWORD *)uint64_t v27 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v38 = sub_1000CF360(v37, v11, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v27 + 4);
      swift_bridgeObjectRelease_n(v11, 3LL);
      *(_WORD *)(v27 + 12) = 2080;
      uint64_t v28 = StaticString.description.getter(a1, v36, a3);
      uint64_t v38 = sub_1000CF360(v28, v29, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v27 + 14);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v26, "[%s] Entered %s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy(v34, 2LL);
      swift_slowDealloc(v34, -1LL, -1LL);
      swift_slowDealloc(v27, -1LL, -1LL);
      goto LABEL_10;
    }

    swift_bridgeObjectRelease_n(v11, 2LL);
  }

void sub_10015ED98( uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, void *aBlock)
{
  uint64_t v42 = sub_100043720();
  unint64_t v13 = v12;
  id v14 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v14)
  {
    id v15 = v14;
    unint64_t v40 = a6;
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_100018F68(v16, (uint64_t)qword_1002EB9D0);
    swift_bridgeObjectRetain_n(v13, 2LL);
    id v17 = v15;
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v35 = a8;
      uint64_t v20 = swift_slowAlloc(32LL, -1LL);
      uint64_t v33 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v34 = swift_slowAlloc(64LL, -1LL);
      uint64_t v45 = v34;
      *(_DWORD *)uint64_t v20 = 136315650;
      swift_bridgeObjectRetain();
      uint64_t v43 = sub_1000CF360(v42, v13, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v20 + 4);
      swift_bridgeObjectRelease_n(v13, 3LL);
      *(_WORD *)(v20 + 12) = 2080;
      uint64_t v21 = StaticString.description.getter(a1, a2, a3);
      uint64_t v43 = sub_1000CF360(v21, v22, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v20 + 14);
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 22) = 2112;
      uint64_t v43 = (uint64_t)v17;
      id v23 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v20 + 24);
      *uint64_t v33 = v15;

      _os_log_impl((void *)&_mh_execute_header, v18, v19, "[%s] Entered %s from %@", (uint8_t *)v20, 0x20u);
      sub_1000175B0(&qword_1002B6F90);
      swift_arrayDestroy(v33, 1LL);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_arrayDestroy(v34, 2LL);
      swift_slowDealloc(v34, -1LL, -1LL);
      uint64_t v24 = v20;
      a8 = v35;
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v13, 2LL);
    }

    a6 = v40;
  }

  else
  {
    uint64_t v36 = a7;
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    sub_100018F68(v25, (uint64_t)qword_1002EB9D0);
    uint64_t v26 = swift_bridgeObjectRetain_n(v13, 2LL);
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc(22LL, -1LL);
      uint64_t v30 = swift_slowAlloc(64LL, -1LL);
      uint64_t v45 = v30;
      *(_DWORD *)uint64_t v29 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v43 = sub_1000CF360(v42, v13, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v29 + 4);
      swift_bridgeObjectRelease_n(v13, 3LL);
      *(_WORD *)(v29 + 12) = 2080;
      uint64_t v31 = StaticString.description.getter(a1, a2, a3);
      uint64_t v43 = sub_1000CF360(v31, v32, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v29 + 14);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "[%s] Entered %s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy(v30, 2LL);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v13, 2LL);
    }

    a7 = v36;
  }

  _Block_copy(aBlock);
  if (qword_1002A8CE8 != -1) {
    swift_once(&qword_1002A8CE8, sub_1000DF248);
  }
  sub_100019F58((void *)(qword_1002EB960 + 64), *(void *)(qword_1002EB960 + 88));
  sub_10007667C(a5, 0, a6, a7, a8);
  (*((void (**)(void *))aBlock + 2))(aBlock);
  _Block_release(aBlock);
  sub_10015F804(v42, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _Block_release(aBlock);
  _Block_release(aBlock);
}

void sub_10015F2EC( uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, unint64_t a6, void *aBlock)
{
  uint64_t v10 = sub_100043720();
  unint64_t v12 = v11;
  id v13 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = v10;
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_100018F68(v16, (uint64_t)qword_1002EB9D0);
    swift_bridgeObjectRetain_n(v12, 2LL);
    id v17 = v14;
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v37 = a5;
      uint64_t v20 = swift_slowAlloc(32LL, -1LL);
      uint64_t v35 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v36 = swift_slowAlloc(64LL, -1LL);
      uint64_t v45 = v36;
      *(_DWORD *)uint64_t v20 = 136315650;
      swift_bridgeObjectRetain();
      uint64_t v43 = sub_1000CF360(v15, v12, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v20 + 4);
      swift_bridgeObjectRelease_n(v12, 3LL);
      *(_WORD *)(v20 + 12) = 2080;
      uint64_t v21 = StaticString.description.getter(a1, a2, a3);
      uint64_t v43 = sub_1000CF360(v21, v22, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v20 + 14);
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 22) = 2112;
      uint64_t v43 = (uint64_t)v17;
      id v23 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v20 + 24);
      *uint64_t v35 = v14;

      _os_log_impl((void *)&_mh_execute_header, v18, v19, "[%s] Entered %s from %@", (uint8_t *)v20, 0x20u);
      sub_1000175B0(&qword_1002B6F90);
      swift_arrayDestroy(v35, 1LL);
      swift_slowDealloc(v35, -1LL, -1LL);
      swift_arrayDestroy(v36, 2LL);
      swift_slowDealloc(v36, -1LL, -1LL);
      uint64_t v24 = v20;
      a5 = v37;
      swift_slowDealloc(v24, -1LL, -1LL);

      uint64_t v10 = v15;
    }

    else
    {

      swift_bridgeObjectRelease_n(v12, 2LL);
      uint64_t v10 = v15;
    }
  }

  else
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    sub_100018F68(v25, (uint64_t)qword_1002EB9D0);
    uint64_t v26 = swift_bridgeObjectRetain_n(v12, 2LL);
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      unint64_t v39 = a6;
      uint64_t v29 = swift_slowAlloc(22LL, -1LL);
      uint64_t v38 = a5;
      uint64_t v30 = swift_slowAlloc(64LL, -1LL);
      uint64_t v45 = v30;
      *(_DWORD *)uint64_t v29 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v43 = sub_1000CF360(v10, v12, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v29 + 4);
      swift_bridgeObjectRelease_n(v12, 3LL);
      *(_WORD *)(v29 + 12) = 2080;
      uint64_t v31 = StaticString.description.getter(a1, a2, a3);
      uint64_t v43 = sub_1000CF360(v31, v32, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v29 + 14);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "[%s] Entered %s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy(v30, 2LL);
      uint64_t v33 = v30;
      a5 = v38;
      swift_slowDealloc(v33, -1LL, -1LL);
      uint64_t v34 = v29;
      a6 = v39;
      swift_slowDealloc(v34, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v12, 2LL);
    }
  }

  _Block_copy(aBlock);
  sub_10015A1D0(v10, v12, a5, a6, (void (**)(void, void, void))aBlock);
  sub_10015F804(v10, v12);
  swift_bridgeObjectRelease();
  sub_10003A9EC(a5, a6);
  _Block_release(aBlock);
  _Block_release(aBlock);
}

void sub_10015F804(uint64_t a1, unint64_t a2)
{
  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_100018F68(v4, (uint64_t)qword_1002EB9D0);
  uint64_t v5 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v11 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1000CF360(a1, a2, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v8 + 4);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%s] Exited", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

uint64_t sub_10015F9A0(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v22 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v5 = sub_1001608D8();
  uint64_t v6 = type metadata accessor for DispatchQoS(v5);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1002A8CE8 != -1) {
    swift_once(&qword_1002A8CE8, sub_1000DF248);
  }
  uint64_t v10 = qword_1002EB960;
  uint64_t v11 = *(os_unfair_lock_s **)(*(void *)(qword_1002EB960 + 48) + 16LL);
  swift_retain();
  os_unfair_lock_lock(v11);
  char v12 = *(_BYTE *)(v10 + 56);
  os_unfair_lock_unlock(v11);
  uint64_t result = swift_release();
  if ((v12 & 1) == 0)
  {
    uint64_t v14 = sub_100019310((uint64_t)&unk_10028AA88, 32LL);
    *(void *)(v14 + 16) = v21;
    *(void *)(v14 + 24) = a2;
    aBlock[4] = sub_1001601CC;
    aBlock[5] = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000169C8;
    aBlock[3] = &unk_10028AAA0;
    uint64_t v15 = _Block_copy(aBlock);
    uint64_t v16 = swift_bridgeObjectRetain();
    static DispatchQoS.unspecified.getter(v16);
    id v23 = _swiftEmptyArrayStorage;
    uint64_t v17 = sub_1000221A8( (unint64_t *)&qword_1002B6F20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v18 = sub_1000175B0(&qword_1002A9118);
    uint64_t v19 = sub_100043668((unint64_t *)&qword_1002B6F30, &qword_1002A9118);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v18, v19, v4, v17);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v2, v15);
    _Block_release(v15);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v2, v4);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return swift_release();
  }

  return result;
}

void sub_10015FBDC(uint64_t a1, unint64_t a2)
{
  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_100018F68(v4, (uint64_t)qword_1002EB9D0);
  uint64_t v5 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    v11[0] = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1000CF360(a1, a2, v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, v11, v8 + 4);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%s] Starting server", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  if (qword_1002A8CE8 != -1) {
    swift_once(&qword_1002A8CE8, sub_1000DF248);
  }
  sub_1000D0850();
}

id sub_10015FF6C()
{
  uint64_t v20 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v3 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v4 = sub_1001608D8();
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes(v4);
  sub_1000226C8();
  __chkstk_darwin(v6);
  uint64_t v7 = sub_1001608F4();
  type metadata accessor for DispatchQoS(v7);
  sub_1000226C8();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = OBJC_IVAR____TtC25ASOctaneSupportXPCService16OctaneXPCService_serverQueue;
  v18[1] = sub_1000435C0();
  id v11 = v0;
  static DispatchQoS.unspecified.getter(v11);
  uint64_t v22 = _swiftEmptyArrayStorage;
  uint64_t v12 = sub_1000221A8( (unint64_t *)&qword_1002AAFB0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v13 = sub_1000175B0((uint64_t *)&unk_1002B6F80);
  uint64_t v14 = sub_100043668((unint64_t *)&qword_1002AAFB8, (uint64_t *)&unk_1002B6F80);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v13, v14, v5, v12);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))( v1,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v20);
  uint64_t v15 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000021LL,  0x8000000100220170LL,  v10,  v2,  v1,  0LL);
  *(void *)(v18[2] + v19) = v15;

  uint64_t v16 = (objc_class *)type metadata accessor for OctaneXPCService();
  v21.receiver = v11;
  v21.super_class = v16;
  return objc_msgSendSuper2(&v21, "init");
}

id sub_100160148()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for OctaneXPCService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for OctaneXPCService()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService16OctaneXPCService);
}

uint64_t sub_1001601A8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1001601CC()
{
}

uint64_t sub_1001601D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10019B2E8(v0, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001601E4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1001601EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc(a3[1]);
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100037850;
  return v6();
}

uint64_t sub_100160240(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_100037850;
  return v7();
}

uint64_t sub_100160294()
{
  uint64_t v1 = sub_100048814();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  sub_100070254();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100160300(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(sub_100048814() - 8) + 80LL);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((v4 + 32) & ~v4);
  uint64_t v8 = swift_task_alloc(dword_1002B6F44);
  uint64_t v9 = (void *)sub_100160A14(v8);
  *uint64_t v9 = v2;
  v9[1] = sub_100037850;
  return sub_100159214(a1, v5, v6, v7);
}

uint64_t sub_10016037C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001603A0(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = swift_task_alloc(dword_1002B6F54);
  uint64_t v6 = (void *)sub_100160A14(v5);
  *uint64_t v6 = v2;
  v6[1] = sub_100037368;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1002B6F50 + dword_1002B6F50))(a1, v4);
}

uint64_t sub_10016040C()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_10016043C()
{
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[8];
  uint64_t v6 = swift_task_alloc(dword_1002B6F64);
  uint64_t v7 = (void *)sub_100160A14(v6);
  *uint64_t v7 = v1;
  v7[1] = sub_100037368;
  uint64_t v8 = sub_100160954();
  return sub_100158E24(v8, v9, v10, v11, v2, v3, v4, v5);
}

uint64_t sub_1001604BC()
{
  _Block_release(*(const void **)(v0 + 40));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1001604F0()
{
  uint64_t v2 = *(unsigned __int8 *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v7 = (void *)sub_100160A48();
  *(void *)(v1 + 16) = v7;
  sub_100160A34(v7, (uint64_t)sub_100037850);
  return v8(v2, v3, v4, v6, v5);
}

uint64_t sub_100160564()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_1002B6FAC);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100037850;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1002B6FA8 + dword_1002B6FA8))(v2, v3, v4);
}

uint64_t sub_1001605E0()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100160608()
{
  uint64_t v1 = sub_100160A48();
  uint64_t v2 = (void *)sub_100160A14(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_100037850;
  uint64_t v3 = sub_100160954();
  return v4(v3);
}

uint64_t sub_100160674()
{
  _Block_release(*(const void **)(v0 + 40));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1001606A8()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v7 = (void *)sub_100160A48();
  *(void *)(v1 + 16) = v7;
  sub_100160A34(v7, (uint64_t)sub_100037850);
  return v8(v2, v3, v4, v6, v5);
}

uint64_t sub_100160718()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10016073C(uint64_t a1)
{
}

uint64_t sub_100160748(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain_n(v2, 2LL);
}

uint64_t sub_100160764(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_100160778()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

uint64_t sub_100160784()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_100160790(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

void sub_1001607AC(const void *aBlock)
{
}

void *sub_1001607C8(int a1, int a2, int a3, void *aBlock)
{
  return _Block_copy(aBlock);
}

void sub_1001607EC(const void *aBlock)
{
}

void sub_100160804()
{
}

  ;
}

void *sub_100160828( int a1, int a2, int a3, int a4, int a5, int a6, int a7, void *aBlock, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  return _Block_copy(aBlock);
}

uint64_t sub_100160844( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int a17)
{
  return StaticString.description.getter(a15, a16, a17);
}

uint64_t sub_100160850(uint64_t (*a1)(void))
{
  return a1();
}

BOOL sub_100160860(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

BOOL sub_100160870(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100160880()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t sub_100160890()
{
  return v0;
}

uint64_t sub_1001608B4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1000CF360(a1, v3, a3);
}

uint64_t sub_1001608BC(uint64_t a1, unint64_t a2)
{
  return sub_1000CF360(a1, a2, (uint64_t *)(v2 - 72));
}

void sub_1001608C4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_1001608D8()
{
  return 0LL;
}

uint64_t sub_1001608F4()
{
  return 0LL;
}

uint64_t sub_100160910(uint64_t a1)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v2, v1);
}

uint64_t sub_10016091C(uint64_t a1)
{
  *(void *)(v1 - 88) = a1;
  return v1 - 88;
}

void *sub_100160938()
{
  return _Block_copy(v0);
}

uint64_t sub_100160944()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 16))(v0, v1);
}

uint64_t sub_100160954()
{
  return v0;
}

  ;
}

  ;
}

void sub_100160998(uint64_t a1)
{
}

void sub_1001609A0()
{
}

void sub_1001609A8()
{
  *(_WORD *)(v0 + 22) = 2112;
}

uint64_t sub_1001609BC(uint64_t a1)
{
  *(void *)(v1 - 88) = a1;
  return v1 - 88;
}

uint64_t sub_1001609D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int a16)
{
  return StaticString.description.getter(a14, a15, a16);
}

uint64_t sub_1001609DC()
{
  return v0;
}

uint64_t sub_1001609F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10001762C(a1, 1LL, 1LL, a4);
}

void *sub_1001609FC(int a1, int a2, int a3, int a4, int a5, void *aBlock)
{
  return _Block_copy(aBlock);
}

uint64_t sub_100160A04()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

void *sub_100160A0C(int a1, int a2, int a3, int a4, void *aBlock)
{
  return _Block_copy(aBlock);
}

uint64_t sub_100160A14(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

  ;
}

void *sub_100160A34@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *uint64_t result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_100160A48()
{
  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

void *sub_100160A50()
{
  return _Block_copy(v0);
}

void sub_100160A5C()
{
  if (!v4)
  {
    sub_100019390();
    sub_100162C68();
    goto LABEL_39;
  }

  if ((v0 & 0x1000000000000000LL) != 0)
  {
    sub_100162B30(v1, v2, v3, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_100161E80);
  }

  else if ((v0 & 0x2000000000000000LL) != 0)
  {
    sub_100162C48();
    if (v9)
    {
      if (v7)
      {
        if (v7 != 1)
        {
          sub_10005768C();
          if (v9 || !v12)
          {
            unint64_t v18 = v17;
            if (v16 != 2)
            {
              sub_100162AE0();
              do
              {
                sub_100024EAC();
                if (!v9 && v12) {
                  break;
                }
                if (!is_mul_ok(v18, v19)) {
                  break;
                }
                BOOL v12 = __CFADD__(10 * v18, v20);
                unint64_t v18 = 10 * v18 + v20;
                if (v12) {
                  break;
                }
                sub_100162A9C();
              }

              while (!v9);
            }
          }
        }

        goto LABEL_38;
      }
    }

    else
    {
      if (v8 != 45)
      {
        if (v7)
        {
          sub_100162A90();
          if (v9 || !v12)
          {
            unint64_t v23 = v22;
            if (v21 != 1)
            {
              do
              {
                sub_100024EAC();
                if (!v9 && v12) {
                  break;
                }
                if (!is_mul_ok(v23, v24)) {
                  break;
                }
                BOOL v12 = __CFADD__(10 * v23, v25);
                unint64_t v23 = 10 * v23 + v25;
                if (v12) {
                  break;
                }
                sub_100162A9C();
              }

              while (!v9);
            }
          }
        }

        goto LABEL_38;
      }

      if (v7)
      {
        if (v7 != 1)
        {
          sub_10005768C();
          if (v9 || !v12)
          {
            unint64_t v13 = -(uint64_t)v11;
            if (!v11 && v10 != 2)
            {
              sub_100162AE0();
              do
              {
                sub_100024EAC();
                if (!v9 && v12) {
                  break;
                }
                if (!is_mul_ok(v13, v14)) {
                  break;
                }
                BOOL v12 = 10 * v13 >= v15;
                unint64_t v13 = 10 * v13 - v15;
                if (!v12) {
                  break;
                }
                sub_100162A9C();
              }

              while (!v9);
            }
          }
        }

        goto LABEL_38;
      }

      __break(1u);
    }

    __break(1u);
  }

  else
  {
    if ((v1 & 0x1000000000000000LL) != 0) {
      uint64_t v5 = (unsigned __int8 *)sub_100162C5C();
    }
    else {
      uint64_t v5 = (unsigned __int8 *)sub_100162C2C(v1);
    }
    sub_100161E80(v5, v6);
  }

void sub_100160C34()
{
  if (!v4)
  {
    sub_100019390();
    sub_100162C68();
    goto LABEL_39;
  }

  if ((v0 & 0x1000000000000000LL) != 0)
  {
    sub_100162B30(v1, v2, v3, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_100161C1C);
LABEL_38:
    sub_100019390();
LABEL_39:
    sub_100013858();
    return;
  }

  if ((v0 & 0x2000000000000000LL) == 0)
  {
    if ((v1 & 0x1000000000000000LL) != 0) {
      uint64_t v5 = (unsigned __int8 *)sub_100162C5C();
    }
    else {
      uint64_t v5 = (unsigned __int8 *)sub_100162C2C(v1);
    }
    sub_100161C1C(v5, v6);
    goto LABEL_38;
  }

  sub_100162C48();
  if (v9)
  {
    if (v7)
    {
      if (v7 != 1)
      {
        sub_10005768C();
        if (!(!v9 & v11) && v14 != 2)
        {
          sub_100162AE0();
          do
          {
            sub_100024EAC();
            if (!v9 & v11) {
              break;
            }
            sub_100134748();
            if (!v9) {
              break;
            }
            if (__OFADD__(v16, v15)) {
              break;
            }
            sub_100162A9C();
          }

          while (!v9);
        }
      }

      goto LABEL_38;
    }
  }

  else
  {
    if (v8 != 45)
    {
      if (v7)
      {
        sub_100162A90();
        if (!(!v9 & v11) && v17 != 1)
        {
          do
          {
            sub_100024EAC();
            if (!v9 & v11) {
              break;
            }
            sub_100134748();
            if (!v9) {
              break;
            }
            if (__OFADD__(v19, v18)) {
              break;
            }
            sub_100162A9C();
          }

          while (!v9);
        }
      }

      goto LABEL_38;
    }

    if (v7)
    {
      if (v7 != 1)
      {
        sub_10005768C();
        if (!(!v9 & v11) && v10 != 2)
        {
          sub_100162AE0();
          do
          {
            sub_100024EAC();
            if (!v9 & v11) {
              break;
            }
            sub_100134748();
            if (!v9) {
              break;
            }
            if (__OFSUB__(v13, v12)) {
              break;
            }
            sub_100162A9C();
          }

          while (!v9);
        }
      }

      goto LABEL_38;
    }

    __break(1u);
  }

  __break(1u);
}

void sub_100160DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = sub_100162C3C(v5, a2, a3, a4, a5);
  sub_100162C04(v6, v7, v8, v9);
  if (!v33 || (sub_100162BEC(), !v10))
  {
    sub_100162C68();
LABEL_48:
    sub_1000BC0CC();
    return;
  }

  if ((v33 & 0x1000000000000000LL) != 0)
  {
    sub_100047A90((uint64_t)v32);
    uint64_t v28 = sub_100162B30(v5, v26, v27, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_100161C1C);
    sub_100162BDC(v28, v29, v30, v31);
    goto LABEL_48;
  }

  if ((v33 & 0x2000000000000000LL) == 0)
  {
    if ((v5 & 0x1000000000000000LL) != 0) {
      char v11 = (unsigned __int8 *)sub_100162C5C();
    }
    else {
      char v11 = (unsigned __int8 *)sub_100162C2C(v5);
    }
    sub_100162B88(v11, v12);
    goto LABEL_48;
  }

  sub_100162BCC();
  if (v15)
  {
    if (v13)
    {
      if (v13 != 1)
      {
        sub_10005768C();
        if (!(!v15 & v17) && v18 != 2)
        {
          sub_10005768C();
          if (!(!v15 & v17))
          {
            sub_100162B74();
            if (!v15)
            {
              sub_100162AF0();
              do
              {
                sub_100024EAC();
                if (!v15 & v17) {
                  break;
                }
                sub_100162A7C();
                if (!v15) {
                  break;
                }
                if (__OFADD__(v20, v19)) {
                  break;
                }
                sub_10005769C();
              }

              while (!v15);
            }
          }
        }
      }

      goto LABEL_48;
    }
  }

  else
  {
    if (v14 != 45)
    {
      if (v13)
      {
        sub_100162A90();
        if (!(!v15 & v17) && v21 != 1)
        {
          sub_10005768C();
          if (!(!v15 & v17))
          {
            sub_100162B60();
            if (!v15)
            {
              sub_100162AE0();
              do
              {
                sub_100024EAC();
                if (!v15 & v17) {
                  break;
                }
                sub_100162A7C();
                if (!v15) {
                  break;
                }
                if (__OFADD__(v23, v22)) {
                  break;
                }
                sub_10005769C();
              }

              while (!v15);
            }
          }
        }
      }

      goto LABEL_48;
    }

    if (v13)
    {
      if (v13 != 1)
      {
        sub_10005768C();
        if (!(!v15 & v17))
        {
          if (v16 == 2)
          {
            sub_100162BBC();
          }

          else
          {
            sub_100162B4C();
            if (!(!v15 & v17))
            {
              sub_100162B18();
              if (!v15)
              {
                sub_100162AF0();
                do
                {
                  sub_100024EAC();
                  if (!v15 & v17) {
                    break;
                  }
                  sub_100162A7C();
                  if (!v15) {
                    break;
                  }
                  if (__OFSUB__(v25, v24)) {
                    break;
                  }
                  sub_10005769C();
                }

                while (!v15);
              }
            }
          }
        }
      }

      goto LABEL_48;
    }

    __break(1u);
  }

  __break(1u);
}

void sub_100160FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = sub_100162C3C(v5 + 32, a2, a3, a4, a5);
  sub_100162C04(v6, v7, v8, v9);
  if (!v33 || (sub_100162BEC(), !v10))
  {
    sub_100162C68();
LABEL_48:
    sub_1000BC0CC();
    return;
  }

  if ((v33 & 0x1000000000000000LL) != 0)
  {
    sub_100047A90((uint64_t)v32);
    uint64_t v28 = sub_100162B30(v5, v26, v27, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_100161C1C);
    sub_100162BDC(v28, v29, v30, v31);
    goto LABEL_48;
  }

  if ((v33 & 0x2000000000000000LL) == 0)
  {
    if ((v5 & 0x1000000000000000LL) != 0) {
      char v11 = (unsigned __int8 *)sub_100162C5C();
    }
    else {
      char v11 = (unsigned __int8 *)sub_100162C2C(v5);
    }
    sub_100162B88(v11, v12);
    goto LABEL_48;
  }

  sub_100162BCC();
  if (v15)
  {
    if (v13)
    {
      if (v13 != 1)
      {
        sub_10005768C();
        if (!(!v15 & v17) && v18 != 2)
        {
          sub_10005768C();
          if (!(!v15 & v17))
          {
            sub_100162B74();
            if (!v15)
            {
              sub_100162AF0();
              do
              {
                sub_100024EAC();
                if (!v15 & v17) {
                  break;
                }
                sub_100162A7C();
                if (!v15) {
                  break;
                }
                if (__OFADD__(v20, v19)) {
                  break;
                }
                sub_10005769C();
              }

              while (!v15);
            }
          }
        }
      }

      goto LABEL_48;
    }
  }

  else
  {
    if (v14 != 45)
    {
      if (v13)
      {
        sub_100162A90();
        if (!(!v15 & v17) && v21 != 1)
        {
          sub_10005768C();
          if (!(!v15 & v17))
          {
            sub_100162B60();
            if (!v15)
            {
              sub_100162AE0();
              do
              {
                sub_100024EAC();
                if (!v15 & v17) {
                  break;
                }
                sub_100162A7C();
                if (!v15) {
                  break;
                }
                if (__OFADD__(v23, v22)) {
                  break;
                }
                sub_10005769C();
              }

              while (!v15);
            }
          }
        }
      }

      goto LABEL_48;
    }

    if (v13)
    {
      if (v13 != 1)
      {
        sub_10005768C();
        if (!(!v15 & v17))
        {
          if (v16 == 2)
          {
            sub_100162BBC();
          }

          else
          {
            sub_100162B4C();
            if (!(!v15 & v17))
            {
              sub_100162B18();
              if (!v15)
              {
                sub_100162AF0();
                do
                {
                  sub_100024EAC();
                  if (!v15 & v17) {
                    break;
                  }
                  sub_100162A7C();
                  if (!v15) {
                    break;
                  }
                  if (__OFSUB__(v25, v24)) {
                    break;
                  }
                  sub_10005769C();
                }

                while (!v15);
              }
            }
          }
        }
      }

      goto LABEL_48;
    }

    __break(1u);
  }

  __break(1u);
}

void sub_100161190()
{
  unint64_t v1 = *(void *)(v0 + 96);
  if (!v1) {
    return;
  }
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = v2 & 0xFFFFFFFFFFFFLL;
  if (!((v1 & 0x2000000000000000LL) != 0 ? HIBYTE(v1) & 0xF : v2 & 0xFFFFFFFFFFFFLL)) {
    return;
  }
  if ((v1 & 0x1000000000000000LL) != 0)
  {
    swift_bridgeObjectRetain();
    sub_100161B2C(v2, v1, 10LL, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_100161C1C);
    swift_bridgeObjectRelease();
    return;
  }

  if ((v1 & 0x2000000000000000LL) == 0)
  {
    if ((v2 & 0x1000000000000000LL) != 0) {
      uint64_t v5 = (unsigned __int8 *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v5 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v2);
    }
    sub_100162B88(v5, v3);
    return;
  }

  sub_100162BCC();
  if (v8)
  {
    if (!v6) {
      goto LABEL_61;
    }
    if (v6 != 1)
    {
      sub_10005768C();
      if (!(!v8 & v10) && v11 != 2)
      {
        sub_10005768C();
        if (!(!v8 & v10))
        {
          sub_100162B74();
          if (!v8)
          {
            sub_100162AF0();
            do
            {
              sub_100024EAC();
              if (!v8 & v10) {
                break;
              }
              sub_100162A7C();
              if (!v8) {
                break;
              }
              if (__OFADD__(v13, v12)) {
                break;
              }
              sub_10005769C();
            }

            while (!v8);
          }
        }
      }
    }
  }

  else
  {
    if (v7 == 45)
    {
      if (v6)
      {
        if (v6 != 1)
        {
          sub_10005768C();
          if (!(!v8 & v10))
          {
            if (v9 == 2)
            {
              sub_100162BBC();
            }

            else
            {
              sub_100162B4C();
              if (!(!v8 & v10))
              {
                sub_100162B18();
                if (!v8)
                {
                  sub_100162AF0();
                  do
                  {
                    sub_100024EAC();
                    if (!v8 & v10) {
                      break;
                    }
                    sub_100162A7C();
                    if (!v8) {
                      break;
                    }
                    if (__OFSUB__(v18, v17)) {
                      break;
                    }
                    sub_10005769C();
                  }

                  while (!v8);
                }
              }
            }
          }
        }

        return;
      }

      __break(1u);
LABEL_61:
      __break(1u);
      return;
    }

    if (v6)
    {
      sub_100162A90();
      if (!(!v8 & v10) && v14 != 1)
      {
        sub_10005768C();
        if (!(!v8 & v10))
        {
          sub_100162B60();
          if (!v8)
          {
            sub_100162AE0();
            do
            {
              sub_100024EAC();
              if (!v8 & v10) {
                break;
              }
              sub_100162A7C();
              if (!v8) {
                break;
              }
              if (__OFADD__(v16, v15)) {
                break;
              }
              sub_10005769C();
            }

            while (!v8);
          }
        }
      }
    }
  }

unint64_t sub_100161388(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002737D0, v2);
  sub_100019390();
  if (v3 >= 6) {
    return 6LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1001613D0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001613FC
                                                            + 4 * asc_100205500[a1]))( 1684632420LL,  0xE400000000000000LL);
}

unint64_t sub_100161404()
{
  return sub_100162BA8();
}

uint64_t sub_100161414()
{
  return 0x74696D696CLL;
}

uint64_t sub_100161428(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100161454 + 4 * byte_100205506[a1]))( 1684632420LL,  0xE400000000000000LL);
}

unint64_t sub_10016145C()
{
  return sub_100162BA8();
}

uint64_t sub_10016146C()
{
  return 0x74696D696CLL;
}

uint64_t sub_100161480(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_1000175B0(&qword_1002B6FF8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100019F58(a1, v9);
  unint64_t v11 = sub_100162878();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for TransactionHistoryRequest.CodingKeys,  &type metadata for TransactionHistoryRequest.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  v26[0] = 0;
  sub_100162ABC(v12, v13);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    v26[0] = 1;
    sub_100162ABC(v14, v15);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    v26[0] = 2;
    sub_100162ABC(v16, v17);
    uint64_t v18 = v3[6];
    uint64_t v19 = v3[7];
    v26[0] = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, v26, v5);
    sub_1000390C8((uint64_t)(v3 + 8), (uint64_t)v27, &qword_1002AEE50);
    sub_1000390C8((uint64_t)v27, (uint64_t)v26, &qword_1002AEE50);
    char v25 = 4;
    unint64_t v20 = sub_1000A86F4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, &v25, v5, &type metadata for Revision, v20);
    uint64_t v21 = v3[11];
    uint64_t v22 = v3[12];
    v26[0] = 5;
    sub_100162ABC(v21, v22);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10016162C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_1000175B0(&qword_1002B6FE0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100019F58(a1, v9);
  unint64_t v11 = sub_100162878();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for TransactionHistoryRequest.CodingKeys,  &type metadata for TransactionHistoryRequest.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_10001A400();
  }
  LOBYTE(v41[0]) = 0;
  uint64_t v12 = sub_100162AA8();
  sub_100162B3C(v13, 1);
  uint64_t v14 = sub_100162AA8();
  uint64_t v40 = v9;
  uint64_t v36 = v14;
  uint64_t v37 = v12;
  sub_100162B3C(v15, 2);
  uint64_t v16 = sub_100162AA8();
  uint64_t v38 = v17;
  uint64_t v39 = v9;
  uint64_t v35 = v16;
  sub_100162B3C(v17, 3);
  uint64_t v34 = KeyedDecodingContainer.decode(_:forKey:)(v41, v5);
  char v44 = 4;
  uint64_t v19 = v18;
  unint64_t v20 = sub_1001628B4();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for Revision,  &v44,  v5,  &type metadata for Revision,  v20);
  uint64_t v32 = v41[1];
  uint64_t v33 = v41[0];
  int v43 = v42;
  LOBYTE(v41[0]) = 5;
  uint64_t v21 = sub_100162AA8();
  uint64_t v23 = v22;
  uint64_t v24 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v25 = v21;
  v24(v8, v5);
  swift_bridgeObjectRetain();
  sub_10001A400();
  swift_bridgeObjectRelease();
  uint64_t v26 = v19;
  sub_10003561C();
  uint64_t v27 = v38;
  swift_bridgeObjectRelease();
  uint64_t v28 = v39;
  swift_bridgeObjectRelease();
  uint64_t v29 = v40;
  uint64_t result = sub_10003561C();
  *(void *)a2 = v37;
  *(void *)(a2 + 8) = v29;
  *(void *)(a2 + 16) = v36;
  *(void *)(a2 + 24) = v28;
  *(void *)(a2 + 32) = v35;
  *(void *)(a2 + 4sub_10019B2E8(v0, 0) = v27;
  *(void *)(a2 + 48) = v34;
  *(void *)(a2 + 56) = v26;
  uint64_t v31 = v32;
  *(void *)(a2 + 64) = v33;
  *(void *)(a2 + 72) = v31;
  *(_BYTE *)(a2 + 8sub_10019B2E8(v0, 0) = v43;
  *(void *)(a2 + 88) = v25;
  *(void *)(a2 + 96) = v23;
  return result;
}

void sub_10016192C()
{
}

void sub_100161938()
{
}

void sub_100161940()
{
}

void sub_100161948(uint64_t a1)
{
}

unint64_t sub_100161950@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100161388(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10016197C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1001613D0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1001619A4()
{
  return sub_100161428(*v0);
}

uint64_t sub_1001619AC@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1001613CC(a1);
  *a2 = result;
  return result;
}

void sub_1001619D0(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1001619DC(uint64_t a1)
{
  unint64_t v2 = sub_100162878();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100161A04(uint64_t a1)
{
  unint64_t v2 = sub_100162878();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100161A2C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (void *)sub_10016162C(a1, (uint64_t)__src);
  if (!v2) {
    return memcpy(a2, __src, 0x68uLL);
  }
  return result;
}

uint64_t sub_100161A74(void *a1)
{
  return sub_100161480(a1);
}

unsigned __int8 *sub_100161AC4(unsigned __int8 *a1, uint64_t a2)
{
  return sub_100161C1C(a1, a2);
}

unsigned __int8 *sub_100161AD8(unsigned __int8 *a1, uint64_t a2)
{
  return sub_100161E80(a1, a2);
}

uint64_t sub_100161AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100161B2C(a1, a2, a3, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_100161C1C);
}

uint64_t sub_100161AF8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100161B20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100161B2C(a1, a2, a3, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_100161E80);
}

uint64_t sub_100161B2C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *, uint64_t, uint64_t))
{
  uint64_t v16 = a1;
  uint64_t v17 = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v6 = String.init<A>(_:)( &v16,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
  uint64_t v8 = v6;
  unint64_t v9 = v7;
  if ((v7 & 0x1000000000000000LL) == 0)
  {
    if ((v7 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v11 = HIBYTE(v9) & 0xF;
    uint64_t v16 = v8;
    uint64_t v17 = v9 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v10 = &v16;
    goto LABEL_7;
  }

  uint64_t v8 = sub_1001620E4(v6, v7);
  unint64_t v13 = v12;
  swift_bridgeObjectRelease(v9);
  unint64_t v9 = v13;
  if ((v13 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v8 & 0x1000000000000000LL) != 0)
  {
    uint64_t v10 = (uint64_t *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v10 = (uint64_t *)_StringObject.sharedUTF8.getter(v8);
  }

unsigned __int8 *sub_100161C1C(unsigned __int8 *result, uint64_t a2)
{
  int v2 = *result;
  if (v2 == 43)
  {
    if (a2 >= 1)
    {
      if (a2 != 1)
      {
        sub_100162B00();
        if (v20 ^ v21 | v19) {
          unsigned __int8 v25 = v28;
        }
        if (v20 ^ v21 | v19) {
          unsigned __int8 v26 = 65;
        }
        if (!(v20 ^ v21 | v19)) {
          unsigned __int8 v27 = 58;
        }
        if (v22)
        {
          uint64_t v13 = 0LL;
          uint64_t v29 = (unsigned __int8 *)(v22 + 1);
          do
          {
            unsigned int v30 = *v29;
            if (v30 < 0x30 || v30 >= v27)
            {
              if (v30 < 0x41 || v30 >= v26)
              {
                uint64_t v17 = 0LL;
                if (v30 < 0x61 || v30 >= v25) {
                  return (unsigned __int8 *)v17;
                }
                char v31 = -87;
              }

              else
              {
                char v31 = -55;
              }
            }

            else
            {
              char v31 = -48;
            }

            uint64_t v32 = v13 * v23;
            uint64_t v13 = v32 + (v30 + v31);
            ++v29;
            --v24;
          }

          while (v24);
          return (unsigned __int8 *)v13;
        }

        return 0LL;
      }

      return 0LL;
    }
  }

  else
  {
    if (v2 != 45)
    {
      if (a2)
      {
        sub_100162B00();
        if (v34 ^ v35 | v33) {
          unsigned __int8 v39 = v42;
        }
        if (v34 ^ v35 | v33) {
          unsigned __int8 v40 = 65;
        }
        if (!(v34 ^ v35 | v33)) {
          unsigned __int8 v41 = 58;
        }
        if (v36)
        {
          uint64_t v43 = 0LL;
          do
          {
            unsigned int v44 = *v36;
            if (v44 < 0x30 || v44 >= v41)
            {
              if (v44 < 0x41 || v44 >= v40)
              {
                uint64_t v17 = 0LL;
                if (v44 < 0x61 || v44 >= v39) {
                  return (unsigned __int8 *)v17;
                }
                char v45 = -87;
              }

              else
              {
                char v45 = -55;
              }
            }

            else
            {
              char v45 = -48;
            }

            uint64_t v46 = v43 * v37;
            uint64_t v43 = v46 + (v44 + v45);
            ++v36;
            --v38;
          }

          while (v38);
          return (unsigned __int8 *)(v46 + (v44 + v45));
        }

        return 0LL;
      }

      return 0LL;
    }

    if (a2 >= 1)
    {
      if (a2 != 1)
      {
        sub_100162B00();
        if (v4 ^ v5 | v3) {
          unsigned __int8 v9 = v12;
        }
        if (v4 ^ v5 | v3) {
          unsigned __int8 v10 = 65;
        }
        if (!(v4 ^ v5 | v3)) {
          unsigned __int8 v11 = 58;
        }
        if (v6)
        {
          uint64_t v13 = 0LL;
          for (i = (unsigned __int8 *)(v6 + 1); ; ++i)
          {
            unsigned int v15 = *i;
            if (v15 < 0x30 || v15 >= v11)
            {
              if (v15 < 0x41 || v15 >= v10)
              {
                uint64_t v17 = 0LL;
                if (v15 < 0x61 || v15 >= v9) {
                  return (unsigned __int8 *)v17;
                }
                char v16 = -87;
              }

              else
              {
                char v16 = -55;
              }
            }

            else
            {
              char v16 = -48;
            }

            uint64_t v18 = v13 * v7;
            uint64_t v13 = v18 - (v15 + v16);
            if (!--v8) {
              return (unsigned __int8 *)v13;
            }
          }
        }

        return 0LL;
      }

      return 0LL;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

unsigned __int8 *sub_100161E80(unsigned __int8 *result, uint64_t a2)
{
  int v2 = *result;
  if (v2 == 43)
  {
    if (a2 >= 1)
    {
      if (a2 != 1)
      {
        sub_100162B00();
        if (v22 ^ v23 | v21) {
          unsigned __int8 v27 = v30;
        }
        if (v22 ^ v23 | v21) {
          unsigned __int8 v28 = 65;
        }
        if (!(v22 ^ v23 | v21)) {
          unsigned __int8 v29 = 58;
        }
        if (v24)
        {
          unint64_t v13 = 0LL;
          char v31 = (unsigned __int8 *)(v24 + 1);
          do
          {
            unsigned int v32 = *v31;
            if (v32 < 0x30 || v32 >= v29)
            {
              if (v32 < 0x41 || v32 >= v28)
              {
                uint64_t v17 = 0LL;
                if (v32 < 0x61 || v32 >= v27) {
                  return (unsigned __int8 *)v17;
                }
                char v33 = -87;
              }

              else
              {
                char v33 = -55;
              }
            }

            else
            {
              char v33 = -48;
            }

            if (!is_mul_ok(v13, v25)) {
              return 0LL;
            }
            unint64_t v34 = v13 * v25;
            unsigned __int8 v35 = v32 + v33;
            BOOL v20 = __CFADD__(v34, v35);
            unint64_t v13 = v34 + v35;
            if (v20) {
              return 0LL;
            }
            ++v31;
            --v26;
          }

          while (v26);
          return (unsigned __int8 *)v13;
        }

        return 0LL;
      }

      return 0LL;
    }
  }

  else
  {
    if (v2 != 45)
    {
      if (a2)
      {
        sub_100162B00();
        if (v37 ^ v38 | v36) {
          unsigned __int8 v42 = v45;
        }
        if (v37 ^ v38 | v36) {
          unsigned __int8 v43 = 65;
        }
        if (!(v37 ^ v38 | v36)) {
          unsigned __int8 v44 = 58;
        }
        if (v39)
        {
          unint64_t v46 = 0LL;
          do
          {
            unsigned int v47 = *v39;
            if (v47 < 0x30 || v47 >= v44)
            {
              if (v47 < 0x41 || v47 >= v43)
              {
                uint64_t v17 = 0LL;
                if (v47 < 0x61 || v47 >= v42) {
                  return (unsigned __int8 *)v17;
                }
                char v48 = -87;
              }

              else
              {
                char v48 = -55;
              }
            }

            else
            {
              char v48 = -48;
            }

            if (!is_mul_ok(v46, v40)) {
              return 0LL;
            }
            unint64_t v49 = v46 * v40;
            unsigned __int8 v50 = v47 + v48;
            BOOL v20 = __CFADD__(v49, v50);
            unint64_t v46 = v49 + v50;
            if (v20) {
              return 0LL;
            }
            ++v39;
            --v41;
          }

          while (v41);
          return (unsigned __int8 *)v46;
        }

        return 0LL;
      }

      return 0LL;
    }

    if (a2 >= 1)
    {
      if (a2 != 1)
      {
        sub_100162B00();
        if (v4 ^ v5 | v3) {
          unsigned __int8 v9 = v12;
        }
        if (v4 ^ v5 | v3) {
          unsigned __int8 v10 = 65;
        }
        if (!(v4 ^ v5 | v3)) {
          unsigned __int8 v11 = 58;
        }
        if (v6)
        {
          unint64_t v13 = 0LL;
          for (i = (unsigned __int8 *)(v6 + 1); ; ++i)
          {
            unsigned int v15 = *i;
            if (v15 < 0x30 || v15 >= v11)
            {
              if (v15 < 0x41 || v15 >= v10)
              {
                uint64_t v17 = 0LL;
                if (v15 < 0x61 || v15 >= v9) {
                  return (unsigned __int8 *)v17;
                }
                char v16 = -87;
              }

              else
              {
                char v16 = -55;
              }
            }

            else
            {
              char v16 = -48;
            }

            if (!is_mul_ok(v13, v7)) {
              return 0LL;
            }
            unint64_t v18 = v13 * v7;
            unsigned __int8 v19 = v15 + v16;
            BOOL v20 = v18 >= v19;
            unint64_t v13 = v18 - v19;
            if (!v20) {
              return 0LL;
            }
            if (!--v8) {
              return (unsigned __int8 *)v13;
            }
          }
        }

        return 0LL;
      }

      return 0LL;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_1001620E4(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = sub_100162138((uint64_t)SelectableEventLoop._promiseCompleted(futureIdentifier:), 0LL, a1, a2);
  uint64_t v6 = sub_10016216C(v2, v3, v4, v5);
  sub_100019390();
  return v6;
}

uint64_t sub_100162138(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = a3;
  }
  uint64_t v5 = 7LL;
  if (((a4 >> 60) & ((a3 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v5 = 11LL;
  }
  return String.subscript.getter(15LL, v5 | (v4 << 16), a3, a4);
}

uint64_t sub_10016216C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a3;
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    unint64_t v12 = sub_1001622B0(a1, a2, a3, a4);
    if (v12)
    {
      uint64_t v9 = v12;
      unint64_t v8 = (unint64_t)sub_1000CF84C(v12, 0LL);
      unint64_t v5 = sub_10016239C((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      uint64_t v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }

    else
    {
      unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
    }

    uint64_t v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(void *)(v8 + 16));
    swift_release(v8);
    return v14;
  }

  else
  {
    unint64_t v8 = a1 >> 16;
    uint64_t v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000LL) == 0)
    {
      if ((a3 & 0x1000000000000000LL) != 0)
      {
        uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }

unint64_t sub_1001622B0( unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  if ((result & 0xC) == 4LL << v8)
  {
    uint64_t result = sub_1000CF8B0(result, a3, a4);
    unint64_t v7 = result;
  }

  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_1000CF8B0(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000LL) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }

  else if ((a4 & 0x1000000000000000LL) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }

  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }

  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }

  __break(1u);
  return result;
}

unint64_t sub_10016239C( unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0LL;
    goto LABEL_35;
  }

  if (a3 < 0) {
    goto LABEL_38;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0LL;
    unint64_t v12 = a4;
LABEL_35:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }

  uint64_t v11 = 0LL;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000LL) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4LL << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000LL) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    uint64_t result = v12;
    if ((v12 & 0xC) == v15) {
      uint64_t result = sub_1000CF8B0(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000LL) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
    }

    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000LL) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((_BYTE *)v28 + v18);
      }

      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000LL) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter(a6);
        }
        char v19 = *(_BYTE *)(result + v18);
      }
    }

    if ((v12 & 0xC) == v15)
    {
      uint64_t result = sub_1000CF8B0(v12, a6, a7);
      unint64_t v12 = result;
      if ((a7 & 0x1000000000000000LL) == 0)
      {
LABEL_27:
        unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000LL) + 65540;
        goto LABEL_31;
      }
    }

    else if ((a7 & 0x1000000000000000LL) == 0)
    {
      goto LABEL_27;
    }

    if (v23 <= v12 >> 16) {
      goto LABEL_37;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_31:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_35;
    }

    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_35;
    }
  }

  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t destroy for TransactionHistoryRequest(void *a1)
{
  return swift_bridgeObjectRelease(a1[12]);
}

uint64_t initializeWithCopy for TransactionHistoryRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10019B2E8(v0, 0) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  __int128 v7 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 8sub_10019B2E8(v0, 0) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v7;
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t assignWithCopy for TransactionHistoryRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 4sub_10019B2E8(v0, 0) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  __int128 v12 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 8sub_10019B2E8(v0, 0) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v12;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v13 = *(void *)(a2 + 96);
  uint64_t v14 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  return a1;
}

void *initializeWithTake for TransactionHistoryRequest(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x68uLL);
}

uint64_t assignWithTake for TransactionHistoryRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10019B2E8(v0, 0) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 8sub_10019B2E8(v0, 0) = *(_BYTE *)(a2 + 80);
  uint64_t v12 = *(void *)(a2 + 96);
  uint64_t v13 = *(void *)(a1 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v12;
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransactionHistoryRequest(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 104))
    {
      LODWORD(v7(v1, v0, 2LL, v3, v6, v5, v4, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 56);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v7(v1, v0, 2LL, v3, v6, v5, v4, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v7(v1, v0, 2LL, v3, v6, v5, v4, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TransactionHistoryRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4sub_10019B2E8(v0, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 104) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for TransactionHistoryRequest()
{
  return &type metadata for TransactionHistoryRequest;
}

unint64_t sub_100162878()
{
  unint64_t result = qword_1002B6FE8;
  if (!qword_1002B6FE8)
  {
    unint64_t result = swift_getWitnessTable(byte_1002056A8, &type metadata for TransactionHistoryRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B6FE8);
  }

  return result;
}

unint64_t sub_1001628B4()
{
  unint64_t result = qword_1002B6FF0;
  if (!qword_1002B6FF0)
  {
    unint64_t result = swift_getWitnessTable("\rV\b", &type metadata for Revision);
    atomic_store(result, (unint64_t *)&qword_1002B6FF0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for TransactionHistoryRequest.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_10016293C + 4 * byte_100205511[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100162970 + 4 * byte_10020550C[v4]))();
}

uint64_t sub_100162970(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100162978(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100162980LL);
  }
  return result;
}

uint64_t sub_10016298C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100162994LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_100162998(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001629A0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TransactionHistoryRequest.CodingKeys()
{
  return &type metadata for TransactionHistoryRequest.CodingKeys;
}

unint64_t sub_1001629C0()
{
  unint64_t result = qword_1002B7000;
  if (!qword_1002B7000)
  {
    unint64_t result = swift_getWitnessTable("1W\b", &type metadata for TransactionHistoryRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7000);
  }

  return result;
}

unint64_t sub_100162A00()
{
  unint64_t result = qword_1002B7008;
  if (!qword_1002B7008)
  {
    unint64_t result = swift_getWitnessTable(byte_1002055B8, &type metadata for TransactionHistoryRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7008);
  }

  return result;
}

unint64_t sub_100162A40()
{
  unint64_t result = qword_1002B7010;
  if (!qword_1002B7010)
  {
    unint64_t result = swift_getWitnessTable("yW\b", &type metadata for TransactionHistoryRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7010);
  }

  return result;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100162AA8()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v1 - 104, v0);
}

uint64_t sub_100162ABC(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v3 - 112, v2);
}

uint64_t sub_100162AD0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100162B30( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *, uint64_t, uint64_t))
{
  return sub_100161B2C(a1, v4, 10LL, a4);
}

uint64_t sub_100162B3C@<X0>(uint64_t a1@<X1>, char a2@<W8>)
{
  *(_BYTE *)(v2 - 104) = a2;
  return swift_bridgeObjectRetain(a1);
}

  ;
}

  ;
}

  ;
}

unsigned __int8 *sub_100162B88(unsigned __int8 *a1, uint64_t a2)
{
  return sub_100161C1C(a1, a2);
}

unint64_t sub_100162BA8()
{
  return 0xD000000000000012LL;
}

  ;
}

  ;
}

uint64_t sub_100162BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  return sub_100161AF8((uint64_t)va);
}

  ;
}

uint64_t sub_100162C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  return sub_1000390C8((uint64_t)va, (uint64_t)va1, v4);
}

  ;
}

uint64_t sub_100162C2C(uint64_t a1)
{
  return _StringObject.sharedUTF8.getter(a1);
}

uint64_t sub_100162C34()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 112));
}

uint64_t sub_100162C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return sub_1000390C8(a1, (uint64_t)va, v5);
}

  ;
}

uint64_t sub_100162C5C()
{
  return (v0 & 0xFFFFFFFFFFFFFFFLL) + 32;
}

uint64_t sub_100162C68()
{
  return 0LL;
}

uint64_t sub_100162C74(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_100162C94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (v4)
  {
    uint64_t v5 = 0LL;
    while (1)
    {
      if ((a1 & 0xC000000000000001LL) != 0)
      {
        uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        swift_unknownObjectRelease(v6);
        if (v6 == a2) {
          goto LABEL_11;
        }
      }

      else if (*(void *)(a1 + 8 * v5 + 32) == a2)
      {
        goto LABEL_11;
      }

      if (__OFADD__(v5, 1LL)) {
        break;
      }
      if (++v5 == v4) {
        goto LABEL_10;
      }
    }

    __break(1u);
LABEL_13:
    if (a1 < 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease(a1);
  }

uint64_t sub_100162D8C()
{
  if (*(void *)(*(void *)v0 + 16LL))
  {
    uint64_t v1 = *(void *)(*(void *)v0 + 32LL);
    swift_retain();
    sub_100033A78();
    return v1;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100162DD0(unint64_t a1)
{
  unint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *uint64_t v1 = v3;
  if (!(_DWORD)result || (v3 & 0x8000000000000000LL) != 0 || (v3 & 0x4000000000000000LL) != 0)
  {
    uint64_t result = sub_10016513C(v3);
    unint64_t v3 = result;
    *uint64_t v1 = result;
  }

  uint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8LL;
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }

  else
  {
    unint64_t v7 = v6 - 1;
    unint64_t v8 = v6 - 1 - a1;
    uint64_t v9 = v5 + 8 * a1;
    uint64_t v10 = *(void *)(v9 + 32);
    uint64_t v11 = sub_1000314BC(v9 + 40, v8, v9 + 32);
    *(void *)(v5 + 16) = v7;
    specialized Array._endMutation()(v11);
    return v10;
  }

  return result;
}

void sub_100162E58(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = sub_1000487CC(a1 + 16, (uint64_t)v6);
  int v5 = *(unsigned __int8 *)(a1 + 24);
  if (v5 == 255)
  {
    __break(1u);
  }

  else
  {
    if ((v5 & 1) == 0) {
      a2(v4);
    }
    _s25ASOctaneSupportXPCService35NIOSingleStepByteToMessageProcessorC7_bufferAA0F6BufferVSgvpfi_0();
    sub_100013858();
  }

void sub_100162EA8(uint64_t a1, void (*a2)(void *))
{
  int v4 = *(unsigned __int8 *)(a1 + 32);
  if (v4 == 255)
  {
    __break(1u);
  }

  else
  {
    if ((v4 & 1) == 0)
    {
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      v8[0] = v6;
      v8[1] = v5;
      sub_100034E9C(v6, v5);
      a2(v8);
      sub_10010D188(v6, v5, v4);
    }

    _s25ASOctaneSupportXPCService35NIOSingleStepByteToMessageProcessorC7_bufferAA0F6BufferVSgvpfi_0();
    sub_10010D9C8();
  }

void sub_100162F24(uint64_t a1, void (*a2)(uint64_t *))
{
  int v4 = *(unsigned __int8 *)(a1 + 24);
  if (v4 == 255)
  {
    __break(1u);
  }

  else
  {
    if ((v4 & 1) == 0)
    {
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v7 = v5;
      swift_retain();
      a2(&v7);
      sub_100165364(v5, v4);
    }

    _s25ASOctaneSupportXPCService35NIOSingleStepByteToMessageProcessorC7_bufferAA0F6BufferVSgvpfi_0();
    sub_100013858();
  }

void sub_100162F94(uint64_t a1, void (*a2)(void *))
{
  int v4 = *(unsigned __int8 *)(a1 + 32);
  if (v4 == 255)
  {
    __break(1u);
  }

  else
  {
    if ((v4 & 1) == 0)
    {
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      v8[0] = v6;
      v8[1] = v5;
      swift_unknownObjectRetain(v6);
      a2(v8);
      sub_10010C8B0(v6, v5, v4);
    }

    _s25ASOctaneSupportXPCService35NIOSingleStepByteToMessageProcessorC7_bufferAA0F6BufferVSgvpfi_0();
    sub_10010D9C8();
  }

void SingleConnectionFailure.error.getter(uint64_t a1, uint64_t a2)
{
}

uint64_t NIOConnectionError.host.getter()
{
  uint64_t v1 = *v0;
  sub_10001DBCC();
  return v1;
}

void NIOConnectionError.dnsAError.getter()
{
}

void NIOConnectionError.dnsAAAAError.getter()
{
}

uint64_t NIOConnectionError.connectionErrors.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 40));
}

uint64_t destroy for SingleConnectionFailure(void *a1)
{
  return swift_errorRelease(a1[1]);
}

void _s25ASOctaneSupportXPCService23SingleConnectionFailureVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  swift_retain();
  sub_100165618();
  a1[1] = v3;
  sub_10001945C();
}

uint64_t *assignWithCopy for SingleConnectionFailure(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2 & 0x3FFFFFFFFFFFFFFFLL;
  uint64_t v5 = *a1;
  *a1 = *a2;
  uint64_t v6 = v5 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain(v4);
  swift_release(v6);
  uint64_t v7 = a2[1];
  swift_errorRetain(v7);
  uint64_t v8 = a1[1];
  a1[1] = v7;
  swift_errorRelease(v8);
  return a1;
}

uint64_t *assignWithTake for SingleConnectionFailure(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_release(v4 & 0x3FFFFFFFFFFFFFFFLL);
  uint64_t v5 = a1[1];
  a1[1] = a2[1];
  swift_errorRelease(v5);
  return a1;
}

ValueMetadata *type metadata accessor for SingleConnectionFailure()
{
  return &type metadata for SingleConnectionFailure;
}

uint64_t destroy for NIOConnectionError(void *a1)
{
  return swift_bridgeObjectRelease(a1[5]);
}

void *initializeWithCopy for NIOConnectionError(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  swift_bridgeObjectRetain(v4);
  swift_errorRetain(v5);
  a1[3] = v5;
  uint64_t v6 = a2[4];
  swift_errorRetain(v6);
  uint64_t v7 = a2[5];
  a1[4] = v6;
  a1[5] = v7;
  swift_bridgeObjectRetain(v7);
  return a1;
}

void *assignWithCopy for NIOConnectionError(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = a2[3];
  swift_errorRetain(v7);
  a1[3] = v7;
  swift_errorRelease(v6);
  uint64_t v8 = a1[4];
  uint64_t v9 = a2[4];
  swift_errorRetain(v9);
  a1[4] = v9;
  swift_errorRelease(v8);
  uint64_t v10 = a2[5];
  uint64_t v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

void *assignWithTake for NIOConnectionError(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = a1[1];
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = *(void *)(a2 + 16);
  swift_errorRelease(a1[3]);
  uint64_t v6 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  swift_errorRelease(v6);
  uint64_t v7 = a1[5];
  a1[5] = *(void *)(a2 + 40);
  swift_bridgeObjectRelease(v7);
  return a1;
}

ValueMetadata *type metadata accessor for NIOConnectionError()
{
  return &type metadata for NIOConnectionError;
}

uint64_t sub_10016337C()
{
  if ((*(_BYTE *)v0 & 1) != 0)
  {
    if (!*(void *)(*(void *)(v0 + 8) + 16LL))
    {
      if (!*(void *)(*(void *)(v0 + 16) + 16LL)) {
        return 0xF000000000000007LL;
      }
      goto LABEL_6;
    }

    goto LABEL_8;
  }

  if (*(void *)(*(void *)(v0 + 16) + 16LL))
  {
LABEL_6:
    char v1 = 1;
LABEL_9:
    *(_BYTE *)uint64_t v0 = v1;
    return sub_100162D8C();
  }

  if (*(void *)(*(void *)(v0 + 8) + 16LL))
  {
LABEL_8:
    char v1 = 0;
    goto LABEL_9;
  }

  return 0xF000000000000007LL;
}

uint64_t sub_100163400()
{
  if (!*(void *)(*(void *)(v0 + 16) + 16LL)) {
    return 0xF000000000000007LL;
  }
  *(_BYTE *)uint64_t v0 = 1;
  return sub_100162D8C();
}

uint64_t sub_10016343C()
{
  if (!*(void *)(*(void *)(v0 + 8) + 16LL)) {
    return 0xF000000000000007LL;
  }
  *(_BYTE *)uint64_t v0 = 0;
  return sub_100162D8C();
}

void _s25ASOctaneSupportXPCService15HTTPParserErrorO9hashValueSivg_0(unsigned __int8 a1)
{
}

uint64_t sub_1001634B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10016337C();
  *a1 = result;
  return result;
}

void sub_1001634DC()
{
}

void sub_1001634F4()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v2);
  Hasher._combine(_:)(v1);
  Hasher._finalize()();
  sub_1000356CC();
}

void sub_100163530( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = v11;
  *(_BYTE *)(v12 + 176) = 0;
  *(void *)(v12 + 184) = _swiftEmptyArrayStorage;
  *(void *)(v12 + 192) = _swiftEmptyArrayStorage;
  *(void *)(v12 + 20sub_10019B2E8(v0, 0) = _swiftEmptyArrayStorage;
  *(void *)(v12 + 208) = 0LL;
  sub_100023BAC((uint64_t)a1, v12 + 16);
  *(void *)(v12 + 56) = a2;
  *(void *)(v12 + 64) = a3;
  *(void *)(v12 + 72) = a4;
  *(void *)(v12 + 8sub_10019B2E8(v0, 0) = a5;
  *(void *)(v12 + 88) = a6;
  *(void *)(v12 + 96) = a10;
  *(void *)(v12 + 104) = a11;
  *(void *)(v12 + 12sub_10019B2E8(v0, 0) = 0LL;
  *(void *)(v12 + 136) = 0LL;
  *(void *)(v12 + 144) = a7;
  *(void *)(v12 + 152) = 0LL;
  *(_BYTE *)(v12 + 168) = 0;
  uint64_t v20 = sub_10002A444();
  uint64_t v21 = sub_1000175B0(&qword_1002AA4B0);
  EmbeddedChannel.WrongTypeError.actual.getter(v20, v21);
  *(void *)(v12 + 16sub_10019B2E8(v0, 0) = EventLoop.makePromise<A>(of:file:line:)( v21,  (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Se rver/SwiftNIO/HappyEyeballs.swift",  115LL,  2LL,  294LL,  v20,  v21,  a3);
  *(void *)(v12 + 216) = a4;
  *(void *)(v12 + 224) = a5;
  *(void *)(v12 + 232) = a6;
  *(void *)(v12 + 24sub_10019B2E8(v0, 0) = 0LL;
  *(void *)(v12 + 248) = 0LL;
  *(void *)(v12 + 256) = _swiftEmptyArrayStorage;
  if (a8 < 1)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  *(void *)(v12 + 112) = a8;
  if (a9 >= 100000000)
  {
    swift_bridgeObjectRetain();
    sub_100019F7C(a1);
    if ((unint64_t)a9 <= 0x77359400)
    {
      *(void *)(v12 + 128) = a9;
      sub_1000356CC();
      return;
    }

    goto LABEL_6;
  }

uint64_t sub_10016369C()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = sub_10002A444();
  uint64_t v3 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v1 + 24);
  sub_10002A4C8();
  v3(sub_100165388, v0, v2, v1);
  sub_10001EDD8();
  return swift_retain();
}

void sub_100163700(void *a1)
{
  uint64_t v2 = a1[8];
  uint64_t ObjectType = swift_getObjectType(a1[7]);
  uint64_t v4 = a1[18];
  uint64_t v5 = *(uint64_t (**)(uint64_t, void (*)(), void *, char *, uint64_t, uint64_t))(v2 + 48);
  swift_retain();
  uint64_t v6 = v5(v4, sub_100165390, a1, &type metadata for ()[8], ObjectType, v2);
  swift_release();
  a1[19] = v6;
  swift_release();
  sub_100163798();
}

void sub_100163798()
{
  __asm { BR              X12 }

uint64_t sub_1001637D0@<X0>(uint64_t a1@<X8>)
{
  if (v1)
  {
    char v4 = v1;
    _StringGuts.grow(_:)(50LL);
    v5._object = (void *)0x8000000100220840LL;
    v5._uint64_t countAndFlagsBits = 0xD000000000000026LL;
    String.append(_:)(v5);
    sub_100165620( v6,  v7,  (uint64_t)&type metadata for HappyEyeballsConnector.ConnectionState,  v8,  v9,  v10,  v11,  v12,  v21,  *(int *)v23,  *(__int16 *)&v23[4],  v23[6],  *(_BYTE *)(a1 + 168),  0);
    v13._uint64_t countAndFlagsBits = 0x207475706E69202CLL;
    v13._object = (void *)0xE800000000000000LL;
    String.append(_:)(v13);
    sub_100165620( v14,  v15,  (uint64_t)&type metadata for HappyEyeballsConnector.ConnectorInput,  v16,  v17,  v18,  v19,  v20,  v22,  v24,  v25,  v26,  v4,  v27);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v28,  0xE000000000000000LL,  "ASOctaneSupportXPCService/HappyEyeballs.swift",  45LL,  2LL);
    __break(1u);
  }

  else
  {
    *(_BYTE *)(a1 + 168) = 1;
    return sub_100163A44();
  }

  return result;
}

uint64_t sub_100163A44()
{
  uint64_t v1 = v0[6];
  sub_100019F58(v0 + 2, v0[5]);
  sub_1001655F0(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 16));
  sub_100164C08();
  swift_release();
  uint64_t v2 = v0[6];
  sub_100019F58(v0 + 2, v0[5]);
  uint64_t v3 = sub_1001655F0(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 8));
  sub_100164AA4();
  return sub_10009B144(v3);
}

uint64_t sub_100163AD0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = sub_10002A444();
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v5 = sub_100019310((uint64_t)&unk_10028B1C0, 32LL);
  *(void *)(v5 + 16) = sub_100165360;
  *(void *)(v5 + 24) = v0;
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t (*)(), uint64_t, char *, uint64_t, uint64_t))(v2 + 48);
  sub_10002A4C8();
  uint64_t v7 = v6(v4, sub_10006D1DC, v5, &type metadata for ()[8], v3, v2);
  swift_release();
  uint64_t v8 = *(void *)(v1 + 120);
  *(void *)(v1 + 12sub_10019B2E8(v0, 0) = v7;
  return sub_10009B144(v8);
}

uint64_t sub_100163B6C()
{
  if (*(void *)(v0 + 136))
  {
    __break(1u);
LABEL_15:
    sub_10001DBCC();
    uint64_t v12 = sub_100165658();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v12) {
      return sub_100163798(8LL);
    }
    return result;
  }

  uint64_t v2 = v0;
  sub_10002A718(v0 + 176, (uint64_t)v13, 33LL);
  if ((*(_BYTE *)(v0 + 176) & 1) != 0)
  {
    uint64_t v3 = sub_10016343C();
    if ((~v3 & 0xF000000000000007LL) == 0)
    {
      uint64_t v4 = sub_100163400();
      goto LABEL_7;
    }

uint64_t sub_100163CD4()
{
  if (!*(void *)(v0 + 136)) {
    return sub_100163B6C();
  }
  return result;
}

uint64_t sub_100163CE4()
{
  *(void *)(v0 + 136) = 0LL;
  swift_release();
  return sub_100163B6C();
}

void sub_100163D00()
{
  unint64_t v1 = *(void *)(v0 + 200);
  if (v1 >> 62)
  {
    sub_100165634();
    uint64_t v5 = sub_100165658();
    sub_100019390();
    if (v5) {
      goto LABEL_6;
    }
  }

  else if (*(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    goto LABEL_6;
  }

  if (*(void *)(v0 + 136))
  {
    unint64_t v2 = sub_100029E1C();
    uint64_t v3 = sub_1000252D0((uint64_t)&type metadata for EventLoopError, v2);
    *uint64_t v4 = 1;
    sub_10002A4C8();
    swift_errorRetain(v3);
    sub_100156574(v3);
    sub_10002A47C();
    sub_10002A47C();
    sub_10001EDD8();
  }

  *(void *)(v0 + 136) = 0LL;
  swift_release();
  sub_100163B6C();
LABEL_6:
  sub_100013858();
}

uint64_t sub_100163DB8()
{
  uint64_t v1 = *(void *)(v0 + 144);
  unint64_t v2 = sub_100029C98();
  uint64_t v3 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v2);
  *(void *)uint64_t v4 = v1;
  *(_BYTE *)(v4 + 8) = 0;
  swift_errorRetain(v3);
  sub_100165648();
  sub_10002A620();
  return swift_errorRelease(v3);
}

uint64_t sub_100163E18()
{
  uint64_t result = sub_1000487CC((uint64_t)(v0 + 25), (uint64_t)v14);
  unint64_t v2 = v0[25];
  if (v2 >> 62)
  {
    sub_100165634();
    uint64_t v12 = sub_100165658();
    uint64_t result = sub_100019390();
    if (!v12) {
      goto LABEL_3;
    }
  }

  else if (!*(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
LABEL_3:
    sub_10016459C();
    sub_1000487CC((uint64_t)(v0 + 27), (uint64_t)&v13);
    uint64_t v4 = v0[27];
    uint64_t v3 = v0[28];
    uint64_t v6 = v0[29];
    uint64_t v5 = v0[30];
    uint64_t v8 = v0[31];
    uint64_t v7 = v0[32];
    unint64_t v9 = sub_1001652FC();
    uint64_t v10 = sub_1000252D0((uint64_t)&type metadata for NIOConnectionError, v9);
    void *v11 = v4;
    v11[1] = v3;
    uint64_t v11[2] = v6;
    v11[3] = v5;
    v11[4] = v8;
    v11[5] = v7;
    swift_bridgeObjectRetain();
    swift_errorRetain(v5);
    swift_errorRetain(v8);
    sub_10001DBCC();
    swift_errorRetain(v10);
    sub_100165648();
    swift_errorRelease(v10);
    return swift_errorRelease(v10);
  }

  __break(1u);
  return result;
}

uint64_t sub_100163F0C(unint64_t a1)
{
  uint64_t v3 = (*(uint64_t (**)(void, void, void))(v1 + 96))( *(void *)(v1 + 56),  *(void *)(v1 + 64),  *(unsigned int *)((char *)&unk_100205A24 + ((a1 >> 60) & 0xC)));
  sub_10002A718(v1 + 200, (uint64_t)v10, 33LL);
  uint64_t v4 = sub_10002A4C8();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v4);
  uint64_t v5 = *(void *)((*(void *)(v1 + 200) & 0xFFFFFFFFFFFFF8LL) + 0x10);
  sub_10002E9EC(v5);
  uint64_t v6 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v5, v3);
  specialized Array._endMutation()(v6);
  swift_endAccess(v10);
  uint64_t v7 = (void *)sub_10010E578((uint64_t)&unk_10028B0F8);
  void v7[2] = v1;
  v7[3] = v3;
  v7[4] = a1;
  swift_retain();
  sub_100165678();
  swift_retain();
  sub_100041B5C();
  sub_100101B70();
  sub_100024F0C();
  sub_10001EDD8();
  uint64_t v8 = (void *)sub_10010E578((uint64_t)&unk_10028B120);
  void v8[2] = v1;
  v8[3] = a1;
  v8[4] = v3;
  sub_100165678();
  sub_100041B5C();
  swift_retain();
  swift_retain();
  sub_100101C3C();
  sub_100024F0C();
  return swift_release_n(v3, 2LL);
}

uint64_t sub_10016405C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if (*(_BYTE *)(a2 + 168) == 6)
  {
    swift_beginAccess(a2 + 200, v20, 33LL, 0LL);
    swift_retain();
    uint64_t v8 = swift_bridgeObjectRetain();
    unint64_t v9 = sub_100162C94(v8, a3);
    char v11 = v10;
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      sub_100162DD0(v9);
      swift_release();
    }

    swift_endAccess(v20);
    uint64_t ObjectType = swift_getObjectType(v6);
    uint64_t v13 = static NIOHTTPObjectAggregatorError.endingIgnoredMessage.getter();
    return Channel.close(mode:promise:)(v13, 0LL, ObjectType, v7);
  }

  else
  {
    uint64_t v16 = swift_getObjectType(*a1);
    v20[0] = v6;
    ChannelOutboundInvoker.connect(to:file:line:)( a4,  (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/HappyEyeballs.swift",  115LL,  2LL,  542LL,  v16,  *(void *)(v7 + 8));
    uint64_t v17 = (void *)swift_allocObject(&unk_10028B148, 48LL, 7LL);
    v17[2] = a2;
    v17[3] = a3;
    void v17[4] = v6;
    v17[5] = v7;
    uint64_t v18 = swift_allocObject(&unk_10028B170, 32LL, 7LL);
    *(void *)(v18 + 16) = sub_100165298;
    *(void *)(v18 + 24) = v17;
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain(v6);
    sub_100172010( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/HappyEyeballs.swift",  115LL,  2LL,  542LL,  (uint64_t)sub_1001652A4,  v18);
    swift_release();
    swift_release();
    uint64_t v19 = (void *)swift_allocObject(&unk_10028B198, 40LL, 7LL);
    v19[2] = a2;
    v19[3] = a3;
    v19[4] = a4;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1000FEE04();
    swift_release();
    return swift_release();
  }

uint64_t sub_100164278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_bridgeObjectRetain();
  unint64_t v9 = sub_100162C94(v8, a2);
  char v11 = v10;
  swift_bridgeObjectRelease();
  if ((v11 & 1) == 0)
  {
    sub_100162DD0(v9);
    swift_release();
  }

  swift_endAccess(v15);
  if (*(_BYTE *)(a1 + 168) == 6)
  {
    uint64_t ObjectType = swift_getObjectType(a3);
    uint64_t v13 = static NIOHTTPObjectAggregatorError.endingIgnoredMessage.getter();
    return Channel.close(mode:promise:)(v13, 0LL, ObjectType, a4);
  }

  else
  {
    sub_100163798(6LL);
    swift_unknownObjectRetain(a3);
    sub_100098FF4();
    return swift_unknownObjectRelease(a3);
  }

uint64_t sub_100164388(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_BYTE *)(a2 + 168) != 6)
  {
    uint64_t v7 = result;
    swift_beginAccess(a2 + 216, v14, 33LL, 0LL);
    swift_errorRetain(v7);
    swift_retain();
    sub_10002E918();
    uint64_t v8 = *(void *)(*(void *)(a2 + 256) + 16LL);
    sub_10002EAC8();
    uint64_t v9 = *(void *)(a2 + 256);
    *(void *)(v9 + 16) = v8 + 1;
    uint64_t v10 = v9 + 16 * v8;
    *(void *)(v10 + 32) = a4;
    *(void *)(v10 + 4sub_10019B2E8(v0, 0) = v7;
    swift_endAccess(v14);
    swift_beginAccess(a2 + 200, v14, 33LL, 0LL);
    swift_retain();
    uint64_t v11 = swift_bridgeObjectRetain();
    unint64_t v12 = sub_100162C94(v11, a3);
    LOBYTE(sub_100160A0C(v3, v4, v5, v6, v7) = v13;
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
    {
      sub_100162DD0(v12);
      swift_release();
    }

    swift_endAccess(v14);
    return sub_100163798(7LL);
  }

  return result;
}

uint64_t sub_100164498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(*(void *)(a2 + 256) + 16LL);
  sub_10002EAC8();
  uint64_t v9 = *(void *)(a2 + 256);
  *(void *)(v9 + 16) = v8 + 1;
  uint64_t v10 = v9 + 16 * v8;
  *(void *)(v10 + 32) = a3;
  *(void *)(v10 + 4sub_10019B2E8(v0, 0) = a1;
  swift_endAccess(v15);
  swift_beginAccess(a2 + 200, v15, 33LL, 0LL);
  swift_retain();
  uint64_t v11 = swift_bridgeObjectRetain();
  unint64_t v12 = sub_100162C94(v11, a4);
  LOBYTE(a1) = v13;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
  {
    sub_100162DD0(v12);
    swift_release();
  }

  swift_endAccess(v15);
  return sub_100163798(7LL);
}

uint64_t sub_10016459C()
{
  uint64_t v1 = v0;
  if ((uint64_t)v0[26] <= 1)
  {
    uint64_t v2 = v0[5];
    uint64_t v3 = v0[6];
    uint64_t v0 = sub_100019F58(v0 + 2, v2);
    (*(void (**)(uint64_t, uint64_t))(v3 + 24))(v2, v3);
  }

  if (v1[15])
  {
    unint64_t v4 = sub_100029E1C();
    uint64_t v0 = (void *)sub_1000252D0((uint64_t)&type metadata for EventLoopError, v4);
    *uint64_t v5 = 1;
    sub_10002A4C8();
    sub_100165618();
    sub_100156574((uint64_t)v0);
    sub_10002A620();
    sub_10002A620();
    sub_10001EDD8();
    v1[15] = 0LL;
    swift_release();
  }

  if (v1[17])
  {
    unint64_t v6 = sub_100029E1C();
    uint64_t v0 = (void *)sub_1000252D0((uint64_t)&type metadata for EventLoopError, v6);
    *uint64_t v7 = 1;
    sub_10002A4C8();
    sub_100165618();
    sub_100156574((uint64_t)v0);
    sub_10002A620();
    sub_10002A620();
    sub_10001EDD8();
    v1[17] = 0LL;
    swift_release();
  }

  if (v1[19])
  {
    unint64_t v8 = sub_100029E1C();
    uint64_t v0 = (void *)sub_1000252D0((uint64_t)&type metadata for EventLoopError, v8);
    *uint64_t v9 = 1;
    sub_10002A4C8();
    sub_100165618();
    sub_100156574((uint64_t)v0);
    sub_10002A620();
    sub_10002A620();
    sub_10001EDD8();
    v1[19] = 0LL;
    swift_release();
  }

  uint64_t result = sub_10002A718((uint64_t)(v1 + 25), (uint64_t)v40, 1LL);
  unint64_t v11 = v1[25];
  v1[25] = _swiftEmptyArrayStorage;
  if (v11 >> 62)
  {
    sub_10006B984();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v0);
    uint64_t result = sub_100019390();
    if (v12) {
      goto LABEL_11;
    }
    return sub_100019390();
  }

  uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v12) {
    return sub_100019390();
  }
LABEL_11:
  if (v12 >= 1)
  {
    uint64_t v13 = 0LL;
    while (1)
    {
      if ((v11 & 0xC000000000000001LL) != 0)
      {
        uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v11);
      }

      else
      {
        uint64_t v14 = *(void *)(v11 + 8 * v13 + 32);
        sub_1000A4BF4();
      }

      uint64_t v15 = (void *)sub_10010E578((uint64_t)&unk_10028B030);
      void v15[2] = v14;
      v15[3] = sub_100164A5C;
      void v15[4] = 0LL;
      uint64_t v16 = *(void *)(v14 + 48);
      uint64_t v17 = sub_10002A444();
      uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 16);
      sub_1001655E4();
      if ((v18(v17, v16) & 1) != 0) {
        break;
      }
      uint64_t v28 = (void *)sub_10010E578((uint64_t)&unk_10028B058);
      void v28[2] = v14;
      v28[3] = sub_10010C860;
      v28[4] = v15;
      unsigned __int8 v29 = *(void (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(v16 + 24);
      sub_1000A4BF4();
      swift_retain();
      v29(sub_1001651CC, v28, v17, v16);
      sub_100056B1C();
      swift_release();
LABEL_35:
      swift_release();
      ++v13;
      sub_100056B1C();
      if (v12 == v13) {
        return sub_100019390();
      }
    }

    uint64_t v19 = (void *)sub_10010E578((uint64_t)&unk_10028B080);
    v19[2] = v14;
    v19[3] = sub_100164A5C;
    v19[4] = 0LL;
    uint64_t v20 = *(void *)(v14 + 48);
    uint64_t v21 = sub_10002A444();
    EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  v21,  v20);
    sub_1000487CC(v14 + 16, (uint64_t)v39);
    int v22 = *(unsigned __int8 *)(v14 + 32);
    if (v22 == 255)
    {
      sub_10002A718(v14 + 56, (uint64_t)v38, 33LL);
      if (*(void *)(v14 + 56))
      {
        if (*(void *)(v14 + 72))
        {
          uint64_t result = sub_100019310((uint64_t)&unk_10028B0D0, 32LL);
          *(void *)(result + 16) = sub_10010D794;
          *(void *)(result + 24) = v19;
          uint64_t v23 = *(void *)(v14 + 72);
          if (!v23) {
            goto LABEL_40;
          }
          uint64_t v24 = result;
          sub_1001655E4();
          sub_10009B678();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
          *(void *)(v14 + 72) = v23;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100165684();
            uint64_t v23 = v36;
            *(void *)(v14 + 72) = v36;
          }

          unint64_t v26 = *(void *)(v23 + 16);
          if (v26 >= *(void *)(v23 + 24) >> 1)
          {
            sub_100165684();
            uint64_t v23 = v37;
          }

          *(void *)(v23 + 16) = v26 + 1;
          uint64_t v27 = v23 + 16 * v26;
          *(void *)(v27 + 32) = sub_1001655E0;
          *(void *)(v27 + 4sub_10019B2E8(v0, 0) = v24;
          *(void *)(v14 + 72) = v23;
        }

        else
        {
          uint64_t v33 = sub_1000175B0(&qword_1002AA368);
          uint64_t v34 = sub_100019310(v33, 48LL);
          *(_OWORD *)(v34 + 16) = xmmword_1001F3C00;
          uint64_t v35 = sub_100019310((uint64_t)&unk_10028B0A8, 32LL);
          *(void *)(v35 + 16) = sub_10010D794;
          *(void *)(v35 + 24) = v19;
          *(void *)(v34 + 32) = sub_1001651FC;
          *(void *)(v34 + 4sub_10019B2E8(v0, 0) = v35;
          sub_1001655E4();
          sub_10009B678();
          swift_bridgeObjectRelease();
          *(void *)(v14 + 72) = v34;
        }
      }

      else
      {
        *(void *)(v14 + 56) = sub_10010D794;
        *(void *)(v14 + 64) = v19;
        sub_1001655E4();
        sub_10009B678();
      }

      swift_endAccess(v38);
    }

    else
    {
      if ((v22 & 1) != 0)
      {
        sub_1000A4BF4();
LABEL_34:
        swift_release();
        sub_100056B1C();
        goto LABEL_35;
      }

      uint64_t v30 = *(void *)(v14 + 24);
      uint64_t v31 = sub_10002A444();
      uint64_t v32 = static NIOHTTPObjectAggregatorError.endingIgnoredMessage.getter();
      sub_1001655E4();
      Channel.close(mode:promise:)(v32, 0LL, v31, v30);
    }

    sub_100056B1C();
    goto LABEL_34;
  }

  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100164A5C(void *a1)
{
  uint64_t v1 = a1[1];
  uint64_t ObjectType = swift_getObjectType(*a1);
  uint64_t v3 = static NIOHTTPObjectAggregatorError.endingIgnoredMessage.getter();
  return Channel.close(mode:promise:)(v3, 0LL, ObjectType, v1);
}

uint64_t sub_100164AA4()
{
  uint64_t v1 = sub_100165608();
  sub_1001722FC(v1, v2, v3, 608LL, v4, v0);
  sub_10001EDD8();
  sub_10002A4C8();
  sub_100165608();
  sub_100104674();
  sub_100024F0C();
  sub_10002A7E8();
  sub_100041B5C();
  sub_100165660();
  swift_release();
  return sub_10002A598(v0);
}

uint64_t sub_100164B30(uint64_t a1, uint64_t a2)
{
  return swift_endAccess(v3);
}

void sub_100164B8C(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 24sub_10019B2E8(v0, 0) = a1;
  sub_100165618();
  sub_10002A47C();
  sub_100013858();
}

uint64_t sub_100164BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 208);
  BOOL v3 = __OFADD__(v2, 1LL);
  uint64_t v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 208) = v4;
    return sub_100163798(1LL);
  }

  return result;
}

uint64_t sub_100164C08()
{
  uint64_t v1 = sub_100165608();
  sub_1001722FC(v1, v2, v3, 620LL, v4, v0);
  sub_10001EDD8();
  sub_10002A4C8();
  sub_100165608();
  sub_100104668();
  sub_100024F0C();
  sub_10002A7E8();
  sub_100041B5C();
  sub_100165660();
  swift_release();
  return sub_10002A598(v0);
}

uint64_t sub_100164C94(uint64_t a1, uint64_t a2)
{
  return swift_endAccess(v3);
}

void sub_100164CF0(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 248) = a1;
  sub_100165618();
  sub_10002A47C();
  sub_100013858();
}

uint64_t sub_100164D34(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 120);
  if (v3)
  {
    unint64_t v4 = sub_100029E1C();
    uint64_t v5 = swift_allocError(&type metadata for EventLoopError, v4, 0LL, 0LL);
    *unint64_t v6 = 1;
    swift_retain();
    swift_errorRetain(v5);
    sub_100098A70(v5, 1LL, v3);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    swift_release();
  }

  *(void *)(a2 + 12sub_10019B2E8(v0, 0) = 0LL;
  uint64_t result = swift_release();
  uint64_t v8 = *(void *)(a2 + 208);
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 208) = v10;
    return sub_100163798(2LL);
  }

  return result;
}

void sub_100164DF0()
{
  *(void *)(v0 + 12sub_10019B2E8(v0, 0) = 0LL;
  swift_release();
  sub_100163798();
}

void *sub_100164E10()
{
  uint64_t v1 = v0[30];
  swift_bridgeObjectRelease();
  swift_errorRelease(v1);
  sub_10002A47C();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100164EAC()
{
  return swift_deallocClassInstance(v0, 264LL, 7LL);
}

uint64_t type metadata accessor for HappyEyeballsConnector()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService22HappyEyeballsConnector);
}

void sub_100164EF0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v2 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v2;
  swift_bridgeObjectRetain();
  sub_10001DBCC();
  sub_10001945C();
}

uint64_t assignWithCopy for TargetIterator(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for TargetIterator(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_bridgeObjectRelease(*(void *)(a1 + 8));
  uint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for TargetIterator()
{
  return &type metadata for TargetIterator;
}

uint64_t storeEnumTagSinglePayload for HappyEyeballsConnector.ConnectionState( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_100165028 + 4 * byte_100205720[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10016505C + 4 * byte_10020571B[v4]))();
}

uint64_t sub_10016505C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100165064(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10016506CLL);
  }
  return result;
}

uint64_t sub_100165078(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100165080LL);
  }
  *(_BYTE *)uint64_t result = a2 + 6;
  return result;
}

uint64_t sub_100165084(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016508C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HappyEyeballsConnector.ConnectionState()
{
  return &type metadata for HappyEyeballsConnector.ConnectionState;
}

unint64_t sub_1001650AC()
{
  unint64_t result = qword_1002B7278;
  if (!qword_1002B7278)
  {
    unint64_t result = swift_getWitnessTable("qZ\b", &type metadata for HappyEyeballsConnector.ConnectionState);
    atomic_store(result, (unint64_t *)&qword_1002B7278);
  }

  return result;
}

void sub_1001650E8()
{
}

uint64_t sub_1001650FC(uint64_t a1)
{
  return sub_10002F128(0LL, *(void *)(a1 + 16), 0LL, a1);
}

void sub_100165110()
{
}

void sub_100165124()
{
}

uint64_t sub_10016513C(unint64_t a1)
{
  if (a1 >> 62)
  {
    sub_10006B984();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v1);
    sub_100019390();
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v3, 0LL, a1);
}

void sub_100165190()
{
}

uint64_t sub_1001651A4(uint64_t a1)
{
  return sub_100164C94(a1, v1);
}

uint64_t sub_1001651AC(uint64_t a1)
{
  return sub_100164D34(a1, v1);
}

uint64_t sub_1001651B4(uint64_t a1)
{
  return sub_100164B30(a1, v1);
}

uint64_t sub_1001651BC(uint64_t a1)
{
  return sub_100164BD0(a1, v1);
}

uint64_t sub_1001651CC()
{
  return sub_100104CE4(v0[2], v0[3], v0[4]);
}

uint64_t sub_1001651DC()
{
  uint64_t v0 = sub_10010DB7C();
  return swift_deallocObject(v0, v1, v2);
}

void sub_1001651FC(void *a1@<X8>)
{
}

uint64_t sub_100165204()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100165228(void *a1)
{
  return sub_10016405C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100165234()
{
  uint64_t v0 = sub_10010DB7C();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100165260(uint64_t a1)
{
  return sub_100164498(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10016526C()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100165298()
{
  return sub_100164278(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1001652A4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1001652C8()
{
  uint64_t v0 = sub_10010DB7C();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1001652F0(uint64_t a1)
{
  return sub_100164388(a1, v1[2], v1[3], v1[4]);
}

unint64_t sub_1001652FC()
{
  unint64_t result = qword_1002B7280;
  if (!qword_1002B7280)
  {
    unint64_t result = swift_getWitnessTable( protocol conformance descriptor for NIOConnectionError,  &type metadata for NIOConnectionError);
    atomic_store(result, (unint64_t *)&qword_1002B7280);
  }

  return result;
}

uint64_t sub_100165338()
{
  return sub_100163798(4LL);
}

uint64_t sub_100165364(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_10016537C(result, a2 & 1);
  }
  return result;
}

uint64_t sub_10016537C(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRelease(a1);
  }
  else {
    return swift_release(a1);
  }
}

void sub_100165388()
{
}

void sub_100165390()
{
}

uint64_t storeEnumTagSinglePayload for HappyEyeballsConnector.ConnectorInput( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_100165404 + 4 * byte_10020572A[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_100165438 + 4 * byte_100205725[v4]))();
}

uint64_t sub_100165438(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100165440(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100165448LL);
  }
  return result;
}

uint64_t sub_100165454(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10016545CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 8;
  return result;
}

uint64_t sub_100165460(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100165468(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HappyEyeballsConnector.ConnectorInput()
{
  return &type metadata for HappyEyeballsConnector.ConnectorInput;
}

uint64_t storeEnumTagSinglePayload for TargetIterator.AddressFamily( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1001654D0 + 4 * byte_100205734[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100165504 + 4 * byte_10020572F[v4]))();
}

uint64_t sub_100165504(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016550C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100165514LL);
  }
  return result;
}

uint64_t sub_100165520(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100165528LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10016552C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100165534(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TargetIterator.AddressFamily()
{
  return &type metadata for TargetIterator.AddressFamily;
}

unint64_t sub_100165554()
{
  unint64_t result = qword_1002B7288;
  if (!qword_1002B7288)
  {
    unint64_t result = swift_getWitnessTable(byte_100205990, &type metadata for TargetIterator.AddressFamily);
    atomic_store(result, (unint64_t *)&qword_1002B7288);
  }

  return result;
}

unint64_t sub_100165594()
{
  unint64_t result = qword_1002B7290;
  if (!qword_1002B7290)
  {
    unint64_t result = swift_getWitnessTable("QY\b", &type metadata for HappyEyeballsConnector.ConnectorInput);
    atomic_store(result, (unint64_t *)&qword_1002B7290);
  }

  return result;
}

uint64_t sub_1001655E4()
{
  return swift_retain_n(v0, 2LL);
}

uint64_t sub_1001655F0@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v3, v4, v5, v1, v2);
}

uint64_t sub_100165608()
{
  return v0;
}

uint64_t sub_100165618()
{
  return swift_errorRetain(v0);
}

uint64_t sub_100165620( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14)
{
  return _print_unlocked<A, B>(_:_:)(&a13, &a14);
}

uint64_t sub_100165634()
{
  return swift_bridgeObjectRetain(v0);
}

void sub_100165648()
{
}

uint64_t sub_100165658()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_100165660()
{
  return sub_1000FEED0();
}

uint64_t sub_10016566C(uint64_t a1, ...)
{
  return swift_endAccess(va);
}

uint64_t sub_100165678()
{
  return swift_retain_n(v0, 3LL);
}

void sub_100165684()
{
}

_DWORD *sub_100165690(unsigned int a1, unsigned int a2, int a3)
{
  uint64_t v7 = sub_1000F3328(v3[2], *v3, v3[1]);
  uint64_t v8 = (unsigned int *)UnsafeMutableRawBufferPointer.init(fastRebase:)(v7);
  uint64_t v10 = v9;
  unint64_t result = (_DWORD *)sub_10000C040(4LL);
  uint64_t v12 = (uint64_t)result;
  if (v8)
  {
    if (v10 - (uint64_t)v8 < (uint64_t)result)
    {
      __break(1u);
    }

    else
    {
      v8[1] = a1;
      void v8[2] = a2;
      unint64_t v13 = sub_10000C038(4LL);
      if ((v13 & 0x8000000000000000LL) != 0)
      {
LABEL_16:
        sub_100034FD0();
        uint64_t v20 = "Fatal error";
        uint64_t v21 = "Negative value is not representable";
        int v22 = "Swift/Integers.swift";
        uint64_t v23 = 11LL;
        uint64_t v24 = 2LL;
        uint64_t v25 = 35LL;
LABEL_18:
        unint64_t result = (_DWORD *)sub_100035124((uint64_t)v20, v23, v24, (uint64_t)v21, v25, v19, (uint64_t)v22);
        __break(1u);
        goto LABEL_19;
      }

      if (HIDWORD(v13))
      {
        sub_100034FD0();
        sub_100035144();
        goto LABEL_18;
      }

      unsigned int *v8 = v13;
      unint64_t result = (_DWORD *)sub_10011D17C(v8);
      if ((v15 & 1) != 0)
      {
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }

      if (result && v14 - (uint64_t)result >= 4)
      {
        *unint64_t result = a3;
        uint64_t v16 = v3[2];
        BOOL v17 = __OFADD__(v16, v12);
        uint64_t v18 = v16 + v12;
        if (!v17)
        {
          v3[2] = v18;
          return result;
        }

        goto LABEL_12;
      }
    }

    __break(1u);
LABEL_12:
    __break(1u);
  }

  if (v12 <= 0)
  {
    __break(1u);
    goto LABEL_15;
  }

void *sub_1001657D0( void *(*a1)(uint64_t *__return_ptr, __int128 *, uint64_t), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62)
  {
    if (a3 >> 62 == 1)
    {
      int v4 = *(_DWORD *)(a3 + 20);
      uint64_t v5 = *(void *)(a3 + 24);
      uint64_t v6 = *(void *)(a3 + 32);
      int v7 = *(_DWORD *)(a3 + 40);
      LODWORD(v2sub_10019B2E8(v0, 0) = *(_DWORD *)(a3 + 16);
      DWORD1(v2sub_10019B2E8(v0, 0) = v4;
      *((void *)&v20 + 1) = v5;
      *(void *)&__int128 v21 = v6;
      DWORD2(v21) = v7;
      uint64_t v8 = 28LL;
    }

    else
    {
      __int128 v11 = *(_OWORD *)(a3 + 32);
      __int128 v12 = *(_OWORD *)(a3 + 48);
      __int128 v13 = *(_OWORD *)(a3 + 64);
      __int128 v14 = *(_OWORD *)(a3 + 80);
      __int128 v15 = *(_OWORD *)(a3 + 96);
      uint64_t v16 = *(void *)(a3 + 112);
      __int16 v17 = *(_WORD *)(a3 + 120);
      __int128 v20 = *(_OWORD *)(a3 + 16);
      __int128 v21 = v11;
      __int128 v22 = v12;
      __int128 v23 = v13;
      __int128 v24 = v14;
      __int128 v25 = v15;
      uint64_t v26 = v16;
      __int16 v27 = v17;
      uint64_t v8 = 106LL;
    }
  }

  else
  {
    int v9 = *(_DWORD *)(a3 + 20);
    uint64_t v10 = *(void *)(a3 + 24);
    LODWORD(v2sub_10019B2E8(v0, 0) = *(_DWORD *)(a3 + 16);
    DWORD1(v2sub_10019B2E8(v0, 0) = v9;
    *((void *)&v20 + 1) = v10;
    uint64_t v8 = 16LL;
  }

  unint64_t result = a1(&v19, &v20, v8);
  if (!v3) {
    return (void *)v19;
  }
  return result;
}

uint64_t sub_1001658D4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    sub_100034FD0();
    uint64_t v6 = "Fatal error";
    int v7 = "Negative value is not representable";
    uint64_t v8 = "Swift/Integers.swift";
    uint64_t v9 = 11LL;
    uint64_t v10 = 2LL;
    uint64_t v11 = 35LL;
LABEL_8:
    uint64_t result = sub_100035124((uint64_t)v6, v9, v10, (uint64_t)v7, v11, v5, (uint64_t)v8);
    __break(1u);
    return result;
  }

  if (HIDWORD(a1))
  {
    sub_100034FD0();
    sub_100035144();
    goto LABEL_8;
  }

  uint64_t v3 = 0x1FFFFFF00000000LL;
  return v3 | a1;
}

uint64_t sub_10016596C(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 >= a4) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = *(void *)(a3 + 16);
  }
  return sub_1001658D4((*(void *)(a3 + 16) - 1LL) & (a2 + a1), a5 - a4 + v5, a4) & 0x1FFFFFFFFFFFFFFLL;
}

uint64_t sub_1001659A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  int v4 = *(_DWORD *)(a1 + 24);
  __int16 v5 = *(_WORD *)(a1 + 28);
  char v6 = *(_BYTE *)(a1 + 30);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  v16[0] = *(void *)(a1 + 8);
  v16[1] = *(void *)(a1 + 16);
  int v17 = v4;
  __int16 v18 = v5;
  char v19 = v6;
  uint64_t v20 = a2;
  uint64_t v21 = v7;
  uint64_t v22 = v8;
  uint64_t v23 = v9;
  uint64_t v24 = v10;
  sub_100092DEC(a1);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100034980(v8, v9);
  sub_1001665AC((uint64_t)v16);
  sub_1000356C4(v11);
  swift_release();
  swift_release();
  swift_release();
  sub_100034738(v8, v9);
  if (*(void *)(v3 + 168) >= *(void *)(v3 + 152)) {
    return 1LL;
  }
  uint64_t v12 = *(void *)(v2 + 176);
  swift_retain();
  uint64_t v13 = 1LL;
  int v14 = sub_100006C70((unsigned __int8 *)(v12 + 16), 1, 0);
  swift_release();
  if (v14)
  {
    uint64_t v13 = 0LL;
    *(_BYTE *)(v3 + 184) = 0;
  }

  return v13;
}

void sub_100165AE4()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 120);
  BOOL v3 = __OFSUB__(v2, v1);
  uint64_t v4 = v2 - v1;
  if (v4 < 0 != v3) {
    v4 += *(void *)(*(void *)(v0 + 104) + 16LL);
  }
  BOOL v3 = __OFSUB__(v4, 1LL);
  BOOL v5 = v4 - 1 < 0;
  uint64_t v6 = v4 - 1;
  if (v5 == v3)
  {
    *(void *)(v0 + 128) = v6;
    *(_BYTE *)(v0 + 136) = 0;
  }

  sub_100013868();
}

void sub_100165B3C(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    *(_BYTE *)(v2 + 20sub_10019B2E8(v0, 0) = 0;
  }
  sub_100092DEC(a1);
  uint64_t v4 = sub_100166A88(a1);
  sub_1000356C4(v4);
  sub_100013868();
}

uint64_t sub_100165B74(uint64_t a1)
{
  if (v11 >> 62)
  {
    if (v11 >> 62 == 1)
    {
      int v6 = *(_DWORD *)(v11 + 20);
      uint64_t v8 = *(void *)(v11 + 24);
      uint64_t v7 = *(void *)(v11 + 32);
      int v9 = *(_DWORD *)(v11 + 40);
      *(_DWORD *)a1 = *(_DWORD *)(v11 + 16);
      *(_DWORD *)(a1 + 4) = v6;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v7;
      *(_DWORD *)(a1 + 24) = v9;
      return 28LL;
    }

    else
    {
      v11 &= 0x3FFFFFFFFFFFFFFFuLL;
      uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000002DLL,  0x80000001002209A0LL,  "ASOctaneSupportXPCService/PendingDatagramWritesManager.swift",  60LL,  2LL);
      __break(1u);
    }
  }

  else
  {
    int v3 = *(_DWORD *)(v11 + 20);
    uint64_t v4 = *(void *)(v11 + 24);
    *(_DWORD *)a1 = *(_DWORD *)(v11 + 16);
    *(_DWORD *)(a1 + 4) = v3;
    *(void *)(a1 + 8) = v4;
    return 16LL;
  }

  return result;
}

BOOL sub_100165C4C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  __chkstk_darwin(a1);
  uint64_t v4 = &v10[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  (*(void (**)(char *))(v2 + 16))(v4);
  if (swift_dynamicCast(v10, v4, a1, &type metadata for IOError, 0LL))
  {
    int v5 = v12;
    swift_bridgeObjectRelease(v11);
    BOOL v7 = v5 == 40 || v5 == 65;
  }

  else
  {
    BOOL v7 = 0LL;
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v7;
}

uint64_t sub_100165D10( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t (*a13)(uint64_t, uint64_t), uint64_t i)
{
  uint64_t v88 = 0LL;
  sub_100166F4C(a1, (uint64_t)v89);
  unint64_t v16 = v90;
  BOOL v17 = v91;
  uint64_t v79 = v89[0];
  uint64_t v74 = v89[1];
  sub_1000390C8((uint64_t)&v92, (uint64_t)v93, &qword_1002B7388);
  sub_100018F0C(a1);
  sub_1000390C8((uint64_t)v93, (uint64_t)&v103, &qword_1002B7388);
  unint64_t v18 = v103;
  if (HIBYTE(v103) != 2)
  {
    unint64_t v83 = v16;
    uint64_t v19 = 0LL;
    uint64_t v23 = 0LL;
    while (1)
    {
      unint64_t v24 = *(void *)(v79 + 16);
      if (v17)
      {
        unint64_t v25 = v83;
        if ((v18 & 0x100000000000000LL) != 0) {
          uint64_t v26 = v18 - v83;
        }
        else {
          uint64_t v26 = v24 - v83 + v18;
        }
      }

      else
      {
        unint64_t v25 = v83;
        if ((v18 & 0x100000000000000LL) != 0)
        {
          unint64_t v27 = v83 - v18 + v24;
          BOOL v28 = __OFSUB__(0LL, v27);
          uint64_t v26 = -(uint64_t)v27;
          if (v28) {
            goto LABEL_38;
          }
        }

        else
        {
          uint64_t v26 = v18 - v83;
        }
      }

      if (v26 < 0) {
        goto LABEL_3;
      }
      if (v24 <= v25)
      {
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }

      unsigned __int8 v29 = (uint64_t *)(v79 + 32 + (v25 << 6));
      if (!*v29) {
        goto LABEL_39;
      }
      uint64_t v30 = *v29;
      uint64_t v31 = (v24 + 0x1FFFFFFFFLL) & (v25 + 1);
      if (HIDWORD(v31)) {
        goto LABEL_41;
      }
      uint64_t v33 = v29[1];
      uint64_t v32 = v29[2];
      uint64_t v35 = v29[3];
      uint64_t v34 = v29[4];
      uint64_t v36 = v29[5];
      uint64_t v37 = v29[6];
      uint64_t v38 = v29[7];
      v94[0] = *v29;
      v94[1] = v33;
      int v95 = v32;
      __int16 v96 = WORD2(v32);
      char v97 = BYTE6(v32);
      uint64_t v98 = v35;
      uint64_t v99 = v34;
      uint64_t v100 = v36;
      uint64_t v101 = v37;
      uint64_t v102 = v38;
      if (__OFSUB__(qword_1002AD2C8, v23)) {
        goto LABEL_35;
      }
      unint64_t v39 = (HIDWORD(v33) - v33);
      if (v19 == 1024) {
        goto LABEL_3;
      }
      BOOL v28 = __OFADD__(v23, v39);
      uint64_t v40 = v23 + v39;
      if (v28) {
        goto LABEL_37;
      }
      uint64_t v82 = v40;
      unint64_t v83 = v31;
      BOOL v81 = v31 >= v74;
      uint64_t v41 = v30;
      uint64_t v42 = v30 + 24;
      uint64_t v43 = v35;
      uint64_t v86 = v37;
      uint64_t v85 = v33;
      uint64_t v44 = v41;
      uint64_t v45 = v36;
      uint64_t v46 = v34;
      swift_beginAccess(v42, v87, 0LL, 0LL);
      uint64_t v47 = *(void *)(v44 + 24) + (BYTE6(v32) | ((unint64_t)WORD2(v32) << 8)) + v85;
      sub_100034DEC(v44, v85, v32, v43, v46, v45, v86);
      sub_100166190(v47, v47 + v39, v44, (uint64_t)a8, a9, &v88, v94, a6, a7, a2, a3, v39, a10, a11, a12, a4);
      uint64_t v48 = v46;
      BOOL v17 = v81;
      sub_1000348B4(v44, v85, v32, v43, v48, v45, v86);
      uint64_t v88 = ++v19;
      sub_1000390C8((uint64_t)v93, (uint64_t)&v103, &qword_1002B7388);
      uint64_t v23 = v82;
      unint64_t v18 = v103;
      if (HIBYTE(v103) == 2) {
        goto LABEL_3;
      }
    }

    i = v35;
    sub_100034DEC(v30, v33, v32, v35, v34, v36, v37);
    sub_100063354(v89);
    if (v19)
    {
      uint64_t v51 = sub_100168020();
      sub_1000348B4(v51, v52, v53, v54, v55, v56, v57);
      goto LABEL_4;
    }

    unint64_t v58 = sub_100025100();
    uint64_t v59 = swift_allocError(&type metadata for IOError, v58, 0LL, 0LL);
    *(void *)uint64_t v60 = 0xD000000000000023LL;
    *(void *)(v60 + 8) = 0x8000000100220930LL;
    *(_DWORD *)(v60 + 16) = 40;
    swift_willThrow(v59);
    uint64_t v61 = sub_100168020();
    sub_1000348B4(v61, v62, v63, v64, v65, v66, v67);
    return i;
  }

  uint64_t v19 = 0LL;
LABEL_3:
  sub_100063354(v89);
LABEL_4:
  if (a4)
  {
    uint64_t v21 = a13(a4, v19);
    if (v84)
    {
      for (; v19; --v19)
      {
        uint64_t v22 = *a8++;
        swift_unknownObjectRelease(v22);
      }
    }

    else
    {
      for (i = v21; v19; --v19)
      {
        uint64_t v49 = *a8++;
        swift_unknownObjectRelease(v49);
      }
    }

    return i;
  }

void sub_100166190( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v20 = *a6;
  *(void *)(a4 + 8 * *a6) = a3;
  swift_unknownObjectRetain(a3);
  if (!a8)
  {
    __break(1u);
    goto LABEL_18;
  }

  int v21 = sub_100165B74(a8 + (v20 << 7));
  if (!a1)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  int v22 = v21;
  uint64_t v23 = (void *)(a10 + 16 * *a6);
  *uint64_t v23 = a1;
  v23[1] = a12;
  uint64_t v40 = sub_100068318(*a6, a13, a14);
  uint64_t v41 = v24;
  uint64_t v25 = a7[5];
  uint64_t v26 = a7[6];
  uint64_t v27 = a7[4] >> 62;
  if ((_DWORD)v27)
  {
    if ((_DWORD)v27 != 1) {
      goto LABEL_9;
    }
    sub_100029DDC(a7[6]);
    sub_100069878(v25);
    int v29 = v28;
    unsigned int v30 = 41;
    unsigned int v31 = 36;
  }

  else
  {
    sub_100029DDC(a7[6]);
    sub_100069878(v25);
    int v29 = v32;
    unsigned int v30 = 0;
    unsigned int v31 = 3;
  }

  sub_100165690(v30, v31, v29);
  sub_100034738(v25, v26);
LABEL_9:
  sub_100069974(v40, v41, 0LL);
  if (!a10)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  unint64_t v35 = v34 - v33;
  if (!v33) {
    unint64_t v35 = 0LL;
  }
  if ((v35 & 0x8000000000000000LL) == 0)
  {
    if (HIDWORD(v35))
    {
LABEL_21:
      uint64_t v38 = "Not enough bits to represent the passed value";
      uint64_t v39 = 45LL;
      goto LABEL_22;
    }

    if ((a12 & 0x8000000000000000LL) == 0)
    {
      if (!HIDWORD(a12))
      {
        uint64_t v36 = *a6;
        uint64_t v37 = a16 + 56 * *a6;
        *(void *)uint64_t v37 = a8 + (*a6 << 7);
        *(_DWORD *)(v37 + 8) = v22;
        *(void *)(v37 + 16) = a10 + 16 * v36;
        *(_DWORD *)(v37 + 24) = 1;
        *(void *)(v37 + 3sub_100019F7C(v0 + 2) = v33;
        *(_DWORD *)(v37 + 4sub_10019B2E8(v0, 0) = v35;
        *(_DWORD *)(v37 + 44) = 0;
        *(_DWORD *)(v37 + 48) = a12;
        return;
      }

      goto LABEL_21;
    }
  }

void sub_1001663B4(uint64_t a1@<X8>)
{
  if (v1[1] == v1[2])
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    __int128 v9 = 0uLL;
LABEL_6:
    *(void *)a1 = v3;
    *(_OWORD *)(a1 + 8) = v9;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 3sub_100019F7C(v0 + 2) = v5;
    *(void *)(a1 + 4sub_10019B2E8(v0, 0) = v6;
    *(void *)(a1 + 48) = v7;
    *(void *)(a1 + 56) = v8;
    return;
  }

  uint64_t v10 = *v1;
  unsigned int v11 = sub_10002CEDC(v10);
  if ((unint64_t)v11 >= *(void *)(v10 + 16))
  {
    __break(1u);
  }

  else
  {
    uint64_t v12 = v10 + ((unint64_t)v11 << 6);
    uint64_t v14 = *(void *)(v12 + 32);
    uint64_t v13 = v12 + 32;
    uint64_t v3 = v14;
    if (v14)
    {
      uint64_t v7 = *(void *)(v13 + 48);
      uint64_t v8 = *(void *)(v13 + 56);
      uint64_t v5 = *(void *)(v13 + 32);
      uint64_t v6 = *(void *)(v13 + 40);
      uint64_t v4 = *(void *)(v13 + 24);
      __int128 v15 = *(_OWORD *)(v13 + 8);
      swift_retain();
      swift_retain();
      swift_retain();
      sub_100034980(v6, v7);
      __int128 v9 = v15;
      goto LABEL_6;
    }
  }

  __break(1u);
}

void sub_1001664A0(uint64_t a1)
{
  uint64_t v3 = v17;
  if (!(void)v17) {
    goto LABEL_11;
  }
  uint64_t v4 = *(void *)(v1 + 40);
  BOOL v5 = __OFSUB__(v4, 1LL);
  uint64_t v6 = v4 - 1;
  if (v5)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v7 = *((void *)&v17 + 1);
  uint64_t v8 = v18;
  uint64_t v9 = v19;
  uint64_t v10 = v20;
  uint64_t v12 = v21;
  uint64_t v11 = v22;
  uint64_t v13 = HIDWORD(*((void *)&v17 + 1));
  *(void *)(v1 + 4sub_10019B2E8(v0, 0) = v6;
  unsigned int v14 = v13 - v7;
  if (v13 < v7)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v15 = *(void *)(v1 + 48);
  BOOL v5 = __OFSUB__(v15, v14);
  uint64_t v16 = v15 - v14;
  if (v5)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    return;
  }

  *(void *)(v1 + 48) = v16;
  if (v9)
  {
    swift_retain();
    sub_1000348B4(v3, v7, v8, v9, v10, v12, v11);
    swift_errorRetain(a1);
  }

  else
  {
    sub_1000348B4(v3, v7, v8, 0LL, v10, v12, v11);
  }

void sub_1001665AC(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 40);
  BOOL v4 = __OFADD__(v3, 1LL);
  uint64_t v5 = v3 + 1;
  if (v4)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  *(void *)(v1 + 4sub_10019B2E8(v0, 0) = v5;
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 12);
  BOOL v8 = v7 >= v6;
  unsigned int v9 = v7 - v6;
  if (!v8) {
    goto LABEL_7;
  }
  uint64_t v10 = *(void *)(v1 + 48);
  BOOL v4 = __OFADD__(v10, v9);
  uint64_t v11 = v10 + v9;
  if (!v4)
  {
    *(void *)(v1 + 48) = v11;
    return;
  }

uint64_t sub_100166604(uint64_t a1, uint64_t a2)
{
  uint64_t v44 = a1;
  if (__OFSUB__(a1, 1LL))
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  if (a1 - 1 < 0)
  {
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    uint64_t v41 = "Negative value is not representable";
    uint64_t v42 = 35LL;
    goto LABEL_55;
  }

  uint64_t v4 = 0LL;
  uint64_t v52 = v46[6];
  unint64_t v5 = v46[1];
  int64_t v6 = v46[2];
  uint64_t v7 = *v46;
  uint64_t v43 = v46[5];
  unint64_t v53 = v43 ^ 0x8000000000000000LL;
  BOOL v8 = (unsigned int *)(a2 + 48);
  uint64_t v9 = v44;
  int64_t v45 = v6;
  while (1)
  {
    if (v6 == v5)
    {
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }

    if ((v5 & 0x8000000000000000LL) != 0) {
      goto LABEL_53;
    }
    if (HIDWORD(v5)) {
      break;
    }
    unint64_t v10 = *(void *)(v7 + 16);
    if (v5 >= v10) {
      goto LABEL_41;
    }
    uint64_t v11 = v7 + (v5 << 6);
    uint64_t v13 = *(void *)(v11 + 32);
    uint64_t v12 = v11 + 32;
    if (!v13) {
      goto LABEL_51;
    }
    unsigned int v14 = *(_DWORD *)(v12 + 8);
    unsigned int v15 = *(_DWORD *)(v12 + 12);
    BOOL v16 = v15 >= v14;
    unsigned int v17 = v15 - v14;
    if (!v16) {
      goto LABEL_42;
    }
    unsigned int v19 = *v8;
    uint64_t v18 = v8 + 14;
    if (v17 < v19) {
      goto LABEL_43;
    }
    if ((v46[4] & 1) == 0)
    {
      uint64_t v20 = v46[3];
      BOOL v21 = v20 < 1;
      uint64_t v22 = v20 - 1;
      char v23 = v21;
      if (v21) {
        uint64_t v22 = 0LL;
      }
      v46[3] = v22;
      *((_BYTE *)v46 + 3sub_100019F7C(v0 + 2) = v23;
    }

    uint64_t v50 = v9;
    uint64_t v51 = v18;
    uint64_t v24 = *(void *)v12;
    if (!*(void *)v12) {
      goto LABEL_52;
    }
    uint64_t v25 = v4;
    uint64_t v26 = *(void *)(v12 + 8);
    uint64_t v48 = *(void *)(v12 + 16);
    uint64_t v27 = *(void *)(v12 + 24);
    uint64_t v28 = *(void *)(v12 + 32);
    uint64_t v29 = *(void *)(v12 + 40);
    uint64_t v30 = *(void *)(v12 + 48);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v49 = v29;
    sub_100034980(v29, v30);
    if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) != 0)
    {
      uint64_t v31 = v7;
    }

    else
    {
      sub_1000F2400();
      uint64_t v31 = v32;
    }

    if (v5 >= *(void *)(v31 + 16)) {
      goto LABEL_45;
    }
    uint64_t v7 = v31;
    uint64_t v33 = (uint64_t *)(v31 + (v5 << 6));
    sub_1000348B4(v33[4], v33[5], v33[6], v33[7], v33[8], v33[9], v33[10]);
    *((_OWORD *)v33 + 4) = 0u;
    *((_OWORD *)v33 + 5) = 0u;
    *((_OWORD *)v33 + sub_100019F7C(v0 + 2) = 0u;
    *((_OWORD *)v33 + 3) = 0u;
    if (!v53) {
      goto LABEL_46;
    }
    unsigned int v34 = HIDWORD(v26) - v26;
    BOOL v35 = __OFSUB__(v52, v34);
    uint64_t v36 = v52 - v34;
    if (v35) {
      goto LABEL_48;
    }
    uint64_t v52 = v36;
    uint64_t v47 = *(void *)(v7 + 16);
    if (v27)
    {
      swift_retain();
      sub_1000348B4(v24, v26, v48, v27, v28, v49, v30);
      if (!v25)
      {
        uint64_t v4 = v27;
LABEL_37:
        int64_t v6 = v45;
        uint64_t v38 = v50;
        BOOL v8 = v51;
        uint64_t v39 = v47;
        goto LABEL_38;
      }

      uint64_t v4 = v25;
      sub_100167A70(v25, 0LL);
      sub_100167A70(v27, 0LL);
      swift_retain();
      uint64_t v37 = swift_retain();
      sub_10002C4B8(v37);
      sub_1001679F0(v27, 0LL);
      swift_release();
      swift_release_n(v27, 2LL);
      swift_errorRelease(0LL);
    }

    else
    {
      sub_1000348B4(v24, v26, v48, 0LL, v28, v49, v30);
      uint64_t v4 = v25;
      if (!v25) {
        goto LABEL_37;
      }
      swift_retain();
      swift_errorRetain(0LL);
    }

    int64_t v6 = v45;
    uint64_t v38 = v50;
    BOOL v8 = v51;
    uint64_t v39 = v47;
    swift_release();
    swift_errorRelease(0LL);
LABEL_38:
    unint64_t v5 = (v39 - 1) & (v5 + 1);
    --v53;
    uint64_t v9 = v38 - 1;
    if (!v9)
    {
      v46[5] = v43 - v44;
      v46[6] = v52;
      *uint64_t v46 = v7;
      v46[1] = v5;
      return v4;
    }
  }

  uint64_t v41 = "Not enough bits to represent the passed value";
  uint64_t v42 = 45LL;
LABEL_55:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v41,  v42,  2LL,  "Swift/Integers.swift",  20LL);
  __break(1u);
  return result;
}

void sub_1001669F4(uint64_t a1)
{
  if (v1[1] == v1[2])
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v3 = *v1;
  unsigned int v4 = sub_10002CEDC(*v1);
  if ((unint64_t)v4 >= *(void *)(v3 + 16))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v5 = v3 + ((unint64_t)v4 << 6);
  uint64_t v7 = *(void *)(v5 + 32);
  uint64_t v6 = v5 + 32;
  if (v7)
  {
    unsigned int v9 = *(_DWORD *)(v6 + 8);
    unsigned int v8 = *(_DWORD *)(v6 + 12);
    BOOL v10 = v8 >= v9;
    uint64_t v11 = v8 - v9;
    if (v10)
    {
      if (v11 >= a1)
      {
        sub_1001664A0(0LL);
        return;
      }

      goto LABEL_11;
    }

uint64_t sub_100166A88(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = v5 - v4;
  if (v5 < v4) {
    v6 += *(void *)(v3 + 16);
  }
  uint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v6 & ~(v6 >> 63),  0LL,  _swiftEmptyArrayStorage);
  specialized Array._endMutation()(v61);
  if (v5 == v4)
  {
LABEL_35:
    uint64_t v34 = v61;
    uint64_t v35 = *(void *)(v61 + 16);
    if (v35)
    {
      swift_bridgeObjectRetain();
      uint64_t v36 = 0LL;
      uint64_t v37 = a1;
      do
      {
        uint64_t v38 = *(void *)(v34 + 8 * v36 + 32);
        uint64_t v39 = *(void *)(v38 + 40);
        uint64_t ObjectType = swift_getObjectType(*(void *)(v38 + 32));
        uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t))(v39 + 16);
        swift_retain();
        swift_errorRetain(v37);
        if ((v41(ObjectType, v39) & 1) != 0)
        {
          sub_1001A93A0(v37, 1);
          uint64_t v43 = v42;
          uint64_t v45 = v44;
          CallbackList._run()();
          sub_100034E8C(v43, v45);
          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v59 = v37;
          char v60 = 1;
          uint64_t v46 = swift_allocObject(&unk_10028B450, 33LL, 7LL);
          *(void *)(v46 + 16) = v38;
          sub_1000390C8((uint64_t)&v59, v46 + 24, qword_1002AEC20);
          uint64_t v47 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v39 + 24);
          swift_retain();
          swift_errorRetain(a1);
          v47(sub_10009AF34, v46, ObjectType, v39);
          uint64_t v37 = a1;
          swift_release();
        }

        swift_errorRelease(v37);
        swift_release();
        ++v36;
      }

      while (v35 != v36);
      swift_bridgeObjectRelease();
    }

    return swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v7 = v1[5];
    uint64_t v8 = v1[6];
    uint64_t v51 = v5;
    uint64_t v52 = v1;
    while (1)
    {
      if ((v2[4] & 1) == 0)
      {
        uint64_t v9 = v2[3];
        BOOL v10 = v9 < 1;
        uint64_t v11 = v9 - 1;
        char v12 = v10;
        if (v10) {
          uint64_t v11 = 0LL;
        }
        v2[3] = v11;
        *((_BYTE *)v2 + 3sub_100019F7C(v0 + 2) = v12;
      }

      uint64_t v13 = v5 - v4;
      if (v5 < v4) {
        v13 += *(void *)(v3 + 16);
      }
      if (v13 < 1)
      {
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        uint64_t v49 = "Negative value is not representable";
        uint64_t v50 = 35LL;
        goto LABEL_53;
      }

      if (v4 < 0) {
        goto LABEL_51;
      }
      if (HIDWORD(v4)) {
        break;
      }
      unint64_t v14 = *(void *)(v3 + 16);
      if (v4 >= v14) {
        goto LABEL_44;
      }
      unsigned int v15 = (void *)(v3 + (v4 << 6));
      uint64_t v16 = v15[4];
      if (!v16) {
        goto LABEL_50;
      }
      if (v5 >= v4) {
        unint64_t v14 = 0LL;
      }
      uint64_t v58 = v8;
      uint64_t v17 = v7;
      uint64_t v18 = v15[5];
      uint64_t v19 = v15[7];
      uint64_t v20 = v3;
      uint64_t v21 = v15[9];
      uint64_t v22 = v15[10];
      uint64_t v54 = v15[6];
      uint64_t v55 = v15[8];
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v56 = v22;
      uint64_t v57 = v21;
      uint64_t v23 = v22;
      uint64_t v3 = v20;
      sub_100034980(v21, v23);
      if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
      {
        sub_1000F2400();
        uint64_t v3 = v24;
      }

      uint64_t v25 = v18;
      uint64_t v26 = (uint64_t *)(v3 + (v4 << 6));
      sub_1000348B4(v26[4], v26[5], v26[6], v26[7], v26[8], v26[9], v26[10]);
      *((_OWORD *)v26 + 4) = 0u;
      *((_OWORD *)v26 + 5) = 0u;
      *((_OWORD *)v26 + sub_100019F7C(v0 + 2) = 0u;
      *((_OWORD *)v26 + 3) = 0u;
      --v7;
      if (__OFSUB__(v17, 1LL)) {
        goto LABEL_47;
      }
      unsigned int v27 = HIDWORD(v18) - v18;
      uint64_t v8 = v58 - v27;
      if (__OFSUB__(v58, v27)) {
        goto LABEL_49;
      }
      uint64_t v28 = *(void *)(v3 + 16);
      if (v19)
      {
        uint64_t v29 = v3;
        uint64_t v30 = swift_retain_n(v19, 2LL);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v30);
        unint64_t v32 = *(void *)(v61 + 16);
        unint64_t v31 = *(void *)(v61 + 24);
        if (v32 >= v31 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1);
        }
        uint64_t v33 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v19);
        specialized Array._endMutation()(v33);
        sub_1000348B4(v16, v25, v54, v19, v55, v57, v56);
        swift_release();
        uint64_t v2 = v52;
        uint64_t v3 = v29;
      }

      else
      {
        sub_1000348B4(v16, v18, v54, 0LL, v55, v57, v56);
        uint64_t v2 = v52;
      }

      uint64_t v4 = (v28 - 1) & (v4 + 1);
      uint64_t v5 = v51;
      if (v4 == v51)
      {
        v2[5] = v7;
        v2[6] = v8;
        *uint64_t v2 = v3;
        v2[1] = v51;
        goto LABEL_35;
      }
    }

    uint64_t v49 = "Not enough bits to represent the passed value";
    uint64_t v50 = 45LL;
LABEL_53:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v49,  v50,  2LL,  "Swift/Integers.swift",  20LL);
    __break(1u);
  }

  return result;
}

unint64_t sub_100166EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)v2 + 16LL);
  if ((a1 & 0x100000000000000LL) != 0)
  {
    if ((a2 & 0x100000000000000LL) != 0) {
      return a2 - (unint64_t)a1;
    }
    else {
      return v3 - a1 + a2;
    }
  }

  else if ((a2 & 0x100000000000000LL) != 0)
  {
    uint64_t v5 = a1 - (unint64_t)a2 + v3;
    unint64_t result = -v5;
    if (__OFSUB__(0LL, v5)) {
      __break(1u);
    }
  }

  else
  {
    return a2 - (unint64_t)a1;
  }

  return result;
}

uint64_t sub_100166F4C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int128 v3 = *(_OWORD *)(a1 + 1);
  uint64_t v4 = a1[3];
  char v5 = *((_BYTE *)a1 + 32);
  __int128 v6 = *(_OWORD *)(a1 + 5);
  __int128 v16 = *(_OWORD *)a1;
  __int128 v17 = *((_OWORD *)a1 + 1);
  char v18 = v5;
  if ((*((void *)&v16 + 1) & 0x8000000000000000LL) != 0)
  {
    char v12 = "Negative value is not representable";
    uint64_t v13 = 35LL;
LABEL_9:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v12,  v13,  2LL,  "Swift/Integers.swift",  20LL);
    __break(1u);
    return result;
  }

  __int128 v14 = v3;
  __int128 v15 = v6;
  if (HIDWORD(*((void *)&v16 + 1)))
  {
    char v12 = "Not enough bits to represent the passed value";
    uint64_t v13 = 45LL;
    goto LABEL_9;
  }

  sub_1000390C8((uint64_t)&v17 + 8, (uint64_t)v19, &qword_1002AC950);
  uint64_t result = sub_1000390C8((uint64_t)v19, (uint64_t)&v20, &qword_1002AC950);
  if ((v21 & 1) != 0)
  {
    uint64_t v9 = 0x200000000000000LL;
  }

  else
  {
    uint64_t v10 = v20;
    unsigned int v11 = sub_1001A9844(result);
    uint64_t result = sub_10016596C(v11, v10, v16, *((uint64_t *)&v16 + 1), v17);
    uint64_t v9 = result & 0x1FFFFFFFFFFFFFFLL;
  }

  *(void *)a2 = v2;
  *(_OWORD *)(a2 + 8) = v14;
  *(void *)(a2 + 24) = v4;
  *(_BYTE *)(a2 + 3sub_100019F7C(v0 + 2) = v5 & 1;
  *(_OWORD *)(a2 + 4sub_10019B2E8(v0, 0) = v15;
  *(_DWORD *)(a2 + 56) = DWORD2(v16);
  *(_DWORD *)(a2 + 6sub_10019B2E8(v0, 0) = 0x1FFFFFF;
  *(void *)(a2 + 64) = v9;
  return result;
}

uint64_t sub_1001670DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10)
{
  *(void *)(v10 + 104) = v16;
  *(void *)(v10 + 11sub_100019F7C(v0 + 2) = v17;
  *(void *)(v10 + 12sub_10019B2E8(v0, 0) = v18;
  *(void *)(v10 + 128) = 0LL;
  *(_BYTE *)(v10 + 136) = 1;
  *(void *)(v10 + 144) = 0LL;
  *(void *)(v10 + 15sub_100019F7C(v0 + 2) = 0LL;
  *(_OWORD *)(v10 + 16sub_10019B2E8(v0, 0) = xmmword_100205A60;
  uint64_t v19 = sub_1000175B0(&qword_1002B6E60);
  uint64_t v20 = swift_bufferAllocate(v19, 17LL, 7LL);
  sub_100006CF0((_BYTE *)(v20 + 16), 1);
  *(void *)(v10 + 176) = swift_dynamicCastClassUnconditional(v20, v19, 0LL, 0LL, 0LL);
  *(_BYTE *)(v10 + 184) = 1;
  *(void *)(v10 + 19sub_100019F7C(v0 + 2) = 16LL;
  *(_BYTE *)(v10 + 20sub_10019B2E8(v0, 0) = 1;
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(void *)(v10 + 48) = a3;
  *(void *)(v10 + 56) = a4;
  *(void *)(v10 + 64) = a5;
  *(void *)(v10 + 7sub_100019F7C(v0 + 2) = a6;
  *(void *)(v10 + 3sub_100019F7C(v0 + 2) = a7;
  *(void *)(v10 + 4sub_10019B2E8(v0, 0) = a8;
  *(_OWORD *)(v10 + 8sub_10019B2E8(v0, 0) = a9;
  *(void *)(v10 + 96) = a10;
  return v10;
}

uint64_t sub_1001671F0()
{
  __int128 v1 = *(_OWORD *)(v0 + 120);
  __int128 v11 = *(_OWORD *)(v0 + 104);
  __int128 v12 = v1;
  char v13 = *(_BYTE *)(v0 + 136);
  sub_1000390C8((uint64_t)&v12 + 8, (uint64_t)v14, &qword_1002AC950);
  uint64_t v2 = sub_1000390C8((uint64_t)v14, (uint64_t)&v15, &qword_1002AC950);
  if ((v16 & 1) != 0) {
    return 3LL;
  }
  uint64_t v4 = v15;
  __int128 v5 = v11;
  uint64_t v6 = v12;
  unsigned int v7 = sub_1001A9844(v2);
  uint64_t v8 = sub_10016596C(v7, v4, v5, *((uint64_t *)&v5 + 1), v6);
  uint64_t v9 = sub_1001A9844(v8);
  return (uint64_t)sub_100166EF8(v9 & 0x1FFFFFFFFFFFFFFLL, v8 & 0x1FFFFFFFFFFFFFFLL) > 0;
}

uint64_t sub_1001672D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void))
{
  return sub_100168044(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1001672F0(uint64_t a1, uint64_t a2)
{
  __int128 v6 = *(_OWORD *)(v2 + 120);
  v16[4] = *(_OWORD *)(v2 + 104);
  v16[5] = v6;
  v16[6] = *(_OWORD *)(v2 + 136);
  uint64_t v17 = *(void *)(v2 + 152);
  sub_1001663B4((uint64_t)v14);
  uint64_t result = sub_1000390C8((uint64_t)v14, (uint64_t)v15, &qword_1002AA510);
  if (*(void *)&v15[0])
  {
    v16[0] = v15[0];
    v16[1] = v15[1];
    void v16[2] = v15[2];
    uint64_t v16[3] = v15[3];
    __chkstk_darwin(result);
    v12[2] = v16;
    v12[3] = a1;
    void v12[4] = a2;
    uint64_t v9 = sub_1001657D0( (void *(*)(uint64_t *__return_ptr, __int128 *, uint64_t))sub_100167A9C,  (uint64_t)v12,  v8);
    if (v3)
    {
      uint64_t v11 = sub_10016764C(v3);
      swift_errorRelease(v3);
    }

    else
    {
      uint64_t v11 = sub_1001674B8((uint64_t)v9, v10 & 1, 0LL, 0LL, 1);
    }

    sub_100167AB8(v14);
    return v11;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100167460(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result = a3();
  if (v3) {
    return v5;
  }
  return result;
}

uint64_t sub_10016748C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void))
{
  uint64_t result = a8();
  if (v8) {
    return v10;
  }
  return result;
}

uint64_t sub_1001674B8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = sub_100092DEC(a1);
  if ((a2 & 1) != 0)
  {
    if ((a5 & 1) != 0) {
      sub_1001669F4(a1);
    }
    else {
      uint64_t v10 = sub_100166604(a1, a3);
    }
    uint64_t v11 = v10;
    uint64_t v12 = v14;
    uint64_t v13 = v15;
  }

  else
  {
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 2LL;
  }

  sub_1000356C4(v10);
  if (v5[19] < v5[20])
  {
    uint64_t v16 = v5[22];
    swift_retain();
    sub_100006CF0((_BYTE *)(v16 + 16), 1);
    swift_release();
  }

  sub_1001675A0(v11, v12);
  sub_1001679F0(v11, v12);
  return v13;
}

uint64_t sub_1001675A0(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    if (a2)
    {
      sub_100167A70(result, a2);
      swift_errorRetain(a2);
      sub_100098A70(a2, 1LL, v3);
      swift_errorRelease(a2);
      swift_release();
      uint64_t v4 = a2;
    }

    else
    {
      swift_retain();
      swift_errorRetain(0LL);
      swift_release();
      swift_retain();
      swift_errorRetain(0LL);
      sub_100098A70(0LL, 0LL, v3);
      swift_release();
      uint64_t v4 = 0LL;
    }

    return swift_errorRelease(v4);
  }

  return result;
}

uint64_t sub_10016764C(uint64_t a1)
{
  uint64_t v21 = a1;
  uint64_t v2 = v1;
  swift_errorRetain(a1);
  uint64_t v4 = sub_1000175B0(&qword_1002A9710);
  int v5 = v20;
  swift_bridgeObjectRelease();
  if (v5 == 65)
  {
    unint64_t v12 = sub_100029C98();
    uint64_t v8 = swift_allocError(&type metadata for ChannelError, v12, 0LL, 0LL);
    uint64_t v9 = 8LL;
    goto LABEL_7;
  }

  if (v5 != 40)
  {
LABEL_5:
    uint64_t v10 = swift_errorRelease(v21);
    swift_willThrow(v10);
    return swift_errorRetain(a1);
  }

  unint64_t v6 = sub_100029C98();
  uint64_t v8 = swift_allocError(&type metadata for ChannelError, v6, 0LL, 0LL);
  uint64_t v9 = 7LL;
LABEL_7:
  *(void *)uint64_t v7 = v9;
  *(_BYTE *)(v7 + 8) = 3;
  swift_beginAccess(v2 + 104, v18, 33LL, 0LL);
  sub_1001664A0(v8);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  int v17 = *(unsigned __int8 *)(v2 + 136);
  swift_endAccess(v18);
  swift_errorRelease(v8);
  sub_1001675A0(v14, v16);
  sub_1001679F0(v14, v16);
  swift_errorRelease(v21);
  return v17 ^ 1u;
}

uint64_t sub_1001677BC@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, unint64_t, void, void, void)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10 = *(void *)a3;
  unint64_t v11 = *(void *)(a3 + 8);
  uint64_t v12 = *(unsigned int *)(a3 + 16);
  uint64_t v13 = *(unsigned __int16 *)(a3 + 20);
  uint64_t v14 = *(unsigned __int8 *)(a3 + 22);
  sub_100034918(a3);
  uint64_t result = sub_10005D590(v10, v11, v12 | (v13 << 32) | (v14 << 48), a4, a5, a1, a2, (void *)a3);
  if (!v19)
  {
    *(void *)a6 = result;
    *(_BYTE *)(a6 + 8) = v16 & 1;
  }

  return result;
}

uint64_t sub_100167868()
{
  return v0;
}

uint64_t sub_10016788C()
{
  return swift_deallocClassInstance(v0, 201LL, 7LL);
}

uint64_t type metadata accessor for PendingDatagramWritesManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService28PendingDatagramWritesManager);
}

uint64_t initializeWithCopy for PendingDatagramWritesState(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  *(void *)(a1 + 24) = a2[3];
  *(_BYTE *)(a1 + 3sub_100019F7C(v0 + 2) = *((_BYTE *)a2 + 32);
  *(_OWORD *)(a1 + 4sub_10019B2E8(v0, 0) = *(_OWORD *)(a2 + 5);
  swift_retain(v3);
  return a1;
}

uint64_t *assignWithCopy for PendingDatagramWritesState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  *((_BYTE *)a1 + 3sub_100019F7C(v0 + 2) = *((_BYTE *)a2 + 32);
  a1[3] = v6;
  a1[5] = a2[5];
  a1[6] = a2[6];
  return a1;
}

uint64_t *assignWithTake for PendingDatagramWritesState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  a1[3] = a2[3];
  *((_BYTE *)a1 + 3sub_100019F7C(v0 + 2) = *((_BYTE *)a2 + 32);
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
  return a1;
}

ValueMetadata *type metadata accessor for PendingDatagramWritesState()
{
  return &type metadata for PendingDatagramWritesState;
}

uint64_t sub_1001679F0(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_release(result);
    return swift_errorRelease(a2);
  }

  return result;
}

double sub_100167A1C@<D0>(_OWORD *a1@<X8>)
{
  if ((*(_BYTE *)(v1 + 32) & 1) == 0)
  {
    uint64_t v2 = *(void *)(v1 + 24);
    BOOL v3 = v2 < 1;
    uint64_t v4 = v2 - 1;
    char v5 = v3;
    if (v3) {
      uint64_t v4 = 0LL;
    }
    *(void *)(v1 + 24) = v4;
    *(_BYTE *)(v1 + 3sub_100019F7C(v0 + 2) = v5;
  }

  uint64_t v6 = *(void *)(v1 + 8);
  uint64_t v7 = *(void *)(v1 + 16);
  BOOL v8 = __OFSUB__(v7, v6);
  uint64_t v9 = v7 - v6;
  if (v9 < 0 != v8) {
    v9 += *(void *)(*(void *)v1 + 16LL);
  }
  if (v9 < 1)
  {
    double result = 0.0;
    a1[2] = 0u;
    a1[3] = 0u;
    *a1 = 0u;
    a1[1] = 0u;
  }

  else
  {
    sub_1001A8AA8((uint64_t)a1);
  }

  return result;
}

uint64_t sub_100167A70(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_retain(result);
    return swift_errorRetain(a2);
  }

  return result;
}

uint64_t sub_100167A9C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1001677BC( a1,  a2,  *(void *)(v3 + 16),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, void, void, void))(v3 + 24),  *(void *)(v3 + 32),  a3);
}

uint64_t *sub_100167AB8(uint64_t *a1)
{
  return a1;
}

void *sub_100167AF0(void *a1, void *a2)
{
  return a2;
}

uint64_t sub_100167B2C()
{
  return swift_deallocObject(v0, 33LL, 7LL);
}

uint64_t destroy for PendingDatagramWrite(uint64_t a1)
{
  uint64_t result = swift_release(*(void *)(a1 + 32) & 0x3FFFFFFFFFFFFFFFLL);
  if (*(_BYTE *)(a1 + 40) != 4LL)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    if ((~v3 & 0xF000000000000007LL) != 0) {
      return swift_release(v3 & 0x3FFFFFFFFFFFFFFFLL);
    }
  }

  return result;
}

uint64_t initializeWithCopy for PendingDatagramWrite(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = a2[1];
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(_DWORD *)(a1 + 19) = *(_DWORD *)((char *)a2 + 19);
  uint64_t v6 = a2[3];
  uint64_t v5 = a2[4];
  uint64_t v7 = v5 & 0x3FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = v5;
  BOOL v8 = a2 + 5;
  uint64_t v9 = *((unsigned __int8 *)a2 + 40);
  swift_retain(v4);
  swift_retain(v6);
  swift_retain(v7);
  if (v9 == 4)
  {
    *(_OWORD *)(a1 + 4sub_10019B2E8(v0, 0) = *(_OWORD *)v8;
    *(void *)(a1 + 56) = v8[2];
  }

  else
  {
    *(_BYTE *)(a1 + 4sub_10019B2E8(v0, 0) = v9;
    uint64_t v10 = a2[6];
    if ((~v10 & 0xF000000000000007LL) != 0)
    {
      uint64_t v11 = a2[7];
      *(void *)(a1 + 48) = v10;
      *(void *)(a1 + 56) = v11;
      swift_retain(v10 & 0x3FFFFFFFFFFFFFFFLL);
    }

    else
    {
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    }
  }

  return a1;
}

uint64_t assignWithCopy for PendingDatagramWrite(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 1sub_100019F7C(v0 + 2) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 2sub_10019B2E8(v0, 0) = *(_WORD *)(a2 + 20);
  *(_BYTE *)(a1 + 2sub_100019F7C(v0 + 2) = *(_BYTE *)(a2 + 22);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  uint64_t v4 = (__int128 *)(a1 + 40);
  uint64_t v6 = (__int128 *)(a2 + 40);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 40);
  if (*(_BYTE *)(a1 + 40) == 4LL)
  {
    if (v5 == 4)
    {
      __int128 v7 = *v6;
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
LABEL_14:
      *uint64_t v4 = v7;
      return a1;
    }

    *(_BYTE *)(a1 + 4sub_10019B2E8(v0, 0) = v5;
    uint64_t v9 = *(void *)(a2 + 48);
    if ((~v9 & 0xF000000000000007LL) == 0)
    {
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      return a1;
    }

uint64_t sub_100167E34(uint64_t a1)
{
  uint64_t v2 = sub_1000175B0(&qword_1002B7390);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t assignWithTake for PendingDatagramWrite(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 2sub_10019B2E8(v0, 0) = *(_WORD *)(a2 + 20);
  *(_BYTE *)(a1 + 2sub_100019F7C(v0 + 2) = *(_BYTE *)(a2 + 22);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  swift_release();
  uint64_t v4 = *(unsigned __int8 *)(a2 + 40);
  if (*(_BYTE *)(a1 + 40) == 4LL) {
    goto LABEL_4;
  }
  if (v4 == 4)
  {
    sub_100167E34(a1 + 40);
LABEL_4:
    *(_OWORD *)(a1 + 4sub_10019B2E8(v0, 0) = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    return a1;
  }

  uint64_t v5 = *(void *)(a1 + 48);
  *(_BYTE *)(a1 + 4sub_10019B2E8(v0, 0) = v4;
  uint64_t v6 = *(void *)(a2 + 48);
  if ((~v5 & 0xF000000000000007LL) != 0)
  {
    if ((~v6 & 0xF000000000000007LL) != 0)
    {
      *(void *)(a1 + 48) = v6;
      swift_release();
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      return a1;
    }

    sub_10007ACF8((void *)(a1 + 48));
  }

  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for PendingDatagramWrite(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 64))
    {
      LODWORD(v7(v1, v0, 2LL, v3, v6, v5, v4, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v7(v1, v0, 2LL, v3, v6, v5, v4, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PendingDatagramWrite(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 4sub_10019B2E8(v0, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 64) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PendingDatagramWrite()
{
  return &type metadata for PendingDatagramWrite;
}

uint64_t sub_100168020()
{
  return v0;
}

uint64_t sub_100168044( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void))
{
  return sub_10016748C(a1, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t sub_100168050(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100273880, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10016809C(char a1)
{
  if (!a1) {
    return 0x65762D65726F7473LL;
  }
  if (a1 == 1) {
    return 0xD000000000000018LL;
  }
  return 0xD000000000000015LL;
}

uint64_t sub_10016810C(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_1000175B0(&qword_1002B73C0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100019F58(a1, v9);
  unint64_t v11 = sub_100168544();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for FetchSoftwareAddOnsResponse.CodingKeys,  &type metadata for FetchSoftwareAddOnsResponse.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v23 = 0;
  sub_100023EB4(v12, v13, (uint64_t)&v23);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    char v22 = 1;
    sub_100023EB4(v14, v15, (uint64_t)&v22);
    uint64_t v21 = v3[4];
    char v20 = 2;
    uint64_t v16 = sub_1000175B0(&qword_1002B73A8);
    uint64_t v17 = sub_1001685BC( &qword_1002B73C8,  (uint64_t (*)(void))sub_100168624,  (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v5, v16, v17);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10016826C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_1000175B0(&qword_1002B7398);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100019F58(a1, v9);
  unint64_t v11 = sub_100168544();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for FetchSoftwareAddOnsResponse.CodingKeys,  &type metadata for FetchSoftwareAddOnsResponse.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100019F7C(a1);
  }
  uint64_t v12 = sub_1000175B0(&qword_1002B73A8);
  char v16 = 2;
  sub_1001685BC( &qword_1002B73B0,  (uint64_t (*)(void))sub_100168580,  (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v12, &v16, v5, v12);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v13 = v17;
  uint64_t result = sub_100019F7C(a1);
  *a2 = 3157553LL;
  a2[1] = 0xE300000000000000LL;
  a2[2] = 0x61502D6472696854LL;
  a2[3] = 0xEB00000000797472LL;
  a2[4] = v13;
  return result;
}

void sub_1001683F8(unsigned __int8 *a1, char *a2)
{
}

void sub_100168404()
{
}

uint64_t sub_10016840C(uint64_t a1)
{
  return sub_1000B1230(a1, *v1);
}

void sub_100168414(uint64_t a1)
{
}

unint64_t sub_10016841C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100168050(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100168448@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10016809C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100168470()
{
  return sub_10016809C(*v0);
}

uint64_t sub_100168478@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100168098(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10016849C(uint64_t a1)
{
  unint64_t v2 = sub_100168544();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001684C4(uint64_t a1)
{
  unint64_t v2 = sub_100168544();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1001684EC@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    double result = *(double *)v6;
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 3sub_100019F7C(v0 + 2) = v7;
  }

  return result;
}

uint64_t sub_100168530(void *a1)
{
  return sub_10016810C(a1);
}

unint64_t sub_100168544()
{
  unint64_t result = qword_1002B73A0;
  if (!qword_1002B73A0)
  {
    unint64_t result = swift_getWitnessTable(byte_100205CFC, &type metadata for FetchSoftwareAddOnsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B73A0);
  }

  return result;
}

unint64_t sub_100168580()
{
  unint64_t result = qword_1002B73B8;
  if (!qword_1002B73B8)
  {
    unint64_t result = swift_getWitnessTable("\r&\b", &type metadata for Product);
    atomic_store(result, (unint64_t *)&qword_1002B73B8);
  }

  return result;
}

uint64_t sub_1001685BC(unint64_t *a1, uint64_t (*a2)(void), const char *a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_100018EC0(&qword_1002B73A8);
    uint64_t v8 = a2();
    uint64_t result = swift_getWitnessTable(a3, v7, &v8);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_100168624()
{
  unint64_t result = qword_1002B73D0;
  if (!qword_1002B73D0)
  {
    unint64_t result = swift_getWitnessTable("%&\b", &type metadata for Product);
    atomic_store(result, (unint64_t *)&qword_1002B73D0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for FetchSoftwareAddOnsResponse.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1001686AC + 4 * byte_100205B65[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001686E0 + 4 * asc_100205B60[v4]))();
}

uint64_t sub_1001686E0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001686E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001686F0LL);
  }
  return result;
}

uint64_t sub_1001686FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100168704LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100168708(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100168710(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FetchSoftwareAddOnsResponse.CodingKeys()
{
  return &type metadata for FetchSoftwareAddOnsResponse.CodingKeys;
}

void *initializeWithCopy for FetchSoftwareAddOnsResponse(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *assignWithCopy for FetchSoftwareAddOnsResponse(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

ValueMetadata *type metadata accessor for FetchSoftwareAddOnsResponse()
{
  return &type metadata for FetchSoftwareAddOnsResponse;
}

unint64_t sub_100168818()
{
  unint64_t result = qword_1002B73D8;
  if (!qword_1002B73D8)
  {
    unint64_t result = swift_getWitnessTable(byte_100205CD4, &type metadata for FetchSoftwareAddOnsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B73D8);
  }

  return result;
}

unint64_t sub_100168858()
{
  unint64_t result = qword_1002B73E0;
  if (!qword_1002B73E0)
  {
    unint64_t result = swift_getWitnessTable("%Z\b", &type metadata for FetchSoftwareAddOnsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B73E0);
  }

  return result;
}

unint64_t sub_100168898()
{
  unint64_t result = qword_1002B73E8;
  if (!qword_1002B73E8)
  {
    unint64_t result = swift_getWitnessTable("\rZ\b", &type metadata for FetchSoftwareAddOnsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B73E8);
  }

  return result;
}

uint64_t sub_1001688D4()
{
  __int16 v1 = v0;
  uint64_t v2 = type metadata accessor for DateComponents(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = v0[3];
  uint64_t v7 = *(void *)(v6 + 176);
  char v8 = *(_BYTE *)(v6 + 184);
  id v9 = [objc_allocWithZone(NSDateComponentsFormatter) init];
  [v9 setUnitsStyle:3];
  [v9 setAllowedUnits:4124];
  sub_1001BE220(v7, v8);
  Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
  unint64_t v11 = *(void (**)(char *, uint64_t))(v3 + 8);
  v11(v5, v2);
  id v12 = [v9 stringFromDateComponents:isa];

  uint64_t v56 = v11;
  if (v12)
  {
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v57 = v14;
    uint64_t v58 = v13;
  }

  else
  {

    uint64_t v57 = (void *)0xE000000000000000LL;
    uint64_t v58 = 0LL;
  }

  uint64_t v15 = v1[2];
  uint64_t v16 = swift_bridgeObjectRetain();
  uint64_t v17 = sub_1000CC010(v16);
  swift_bridgeObjectRelease();
  if (v17)
  {
    unint64_t v18 = *(void *)(v17 + 40);
    uint64_t v19 = HIBYTE(v18) & 0xF;
    if ((v18 & 0x2000000000000000LL) == 0) {
      uint64_t v19 = *(void *)(v17 + 32) & 0xFFFFFFFFFFFFLL;
    }
    if (v19)
    {
      uint64_t v59 = *(void *)(v17 + 32);
      swift_bridgeObjectRetain();
      swift_release();
      goto LABEL_11;
    }

    swift_release();
  }

  uint64_t v59 = sub_1001BA868();
LABEL_11:
  uint64_t v20 = *(void *)(v6 + 16);
  uint64_t v21 = *(void *)(v6 + 24);
  memcpy(__dst, v1 + 4, sizeof(__dst));
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_100043978(v20, v21, (uint64_t)__dst, v15);
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = v1[1];
  if (sub_100023660(v6) == 2)
  {
    uint64_t v55 = v24;
    uint64_t v26 = *(void *)(v25 + 176);
    char v27 = *(_BYTE *)(v25 + 184);
    id v28 = [objc_allocWithZone(NSDateComponentsFormatter) init];
    [v28 setUnitsStyle:3];
    [v28 setAllowedUnits:4124];
    sub_1001BE220(v26, v27);
    Class v29 = DateComponents._bridgeToObjectiveC()().super.isa;
    v56(v5, v2);
    id v30 = [v28 stringFromDateComponents:v29];

    if (v30)
    {
      uint64_t v56 = (void (*)(char *, uint64_t))static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      unint64_t v32 = v31;
    }

    else
    {

      uint64_t v56 = 0LL;
      unint64_t v32 = (void *)0xE000000000000000LL;
    }

    uint64_t v37 = v58;
    uint64_t v38 = swift_bridgeObjectRetain();
    uint64_t v39 = sub_1000CC010(v38);
    swift_bridgeObjectRelease();
    uint64_t v40 = v22;
    uint64_t v41 = v55;
    if (v39)
    {
      uint64_t v43 = *(void *)(v39 + 32);
      unint64_t v42 = *(void *)(v39 + 40);
      uint64_t v44 = HIBYTE(v42) & 0xF;
      if ((v42 & 0x2000000000000000LL) == 0) {
        uint64_t v44 = v43 & 0xFFFFFFFFFFFFLL;
      }
      if (v44)
      {
        swift_bridgeObjectRetain();
        swift_release();
LABEL_23:
        uint64_t v46 = v57;
        uint64_t v60 = 0LL;
        unint64_t v61 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(149LL);
        sub_10001DAAC(0xD00000000000001ALL, (uint64_t)"Do you want to upgrade to ");
        sub_10016926C();
        swift_bridgeObjectRelease();
        sub_100169248();
        v47._uint64_t countAndFlagsBits = v37;
        v47._object = v46;
        String.append(_:)(v47);
        swift_bridgeObjectRelease();
        sub_10016925C();
        v48._uint64_t countAndFlagsBits = v40;
        v48._object = v41;
        String.append(_:)(v48);
        swift_bridgeObjectRelease();
        sub_10001DAAC( 0xD000000000000056LL,  (uint64_t)"? Your upgrade will start now. You'll receive a refund for the remaining time of your ");
        v49._uint64_t countAndFlagsBits = (uint64_t)v56;
        v49._object = v32;
        String.append(_:)(v49);
        swift_bridgeObjectRelease();
        v50._object = (void *)0x8000000100220AF0LL;
        v50._uint64_t countAndFlagsBits = 0xD000000000000011LL;
        String.append(_:)(v50);
        v51._uint64_t countAndFlagsBits = v43;
        v51._object = (void *)v42;
        String.append(_:)(v51);
        goto LABEL_24;
      }

      swift_release();
    }

    uint64_t v43 = sub_1001BA868();
    unint64_t v42 = v45;
    goto LABEL_23;
  }

  uint64_t v60 = 0LL;
  unint64_t v61 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(162LL);
  sub_10001DAAC(0xD00000000000002BLL, (uint64_t)"Do you want to modify your subscription to ");
  sub_10016926C();
  swift_bridgeObjectRelease();
  sub_100169248();
  v33._uint64_t countAndFlagsBits = v58;
  v33._object = v57;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  sub_10016925C();
  v34._uint64_t countAndFlagsBits = v22;
  v34._object = v24;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._object = (void *)0x8000000100220A00LL;
  v35._uint64_t countAndFlagsBits = 0x1000000000000065LL;
  String.append(_:)(v35);
  v36._uint64_t countAndFlagsBits = sub_100168DA0();
  String.append(_:)(v36);
LABEL_24:
  swift_bridgeObjectRelease();
  v52._uint64_t countAndFlagsBits = 46LL;
  v52._object = (void *)0xE100000000000000LL;
  String.append(_:)(v52);
  return v60;
}

uint64_t sub_100168DA0()
{
  uint64_t v0 = type metadata accessor for Date(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_1000B85C8(4u);
  if ((v5 & 1) != 0) {
    Date.init()(v4);
  }
  else {
    Date.init(timeIntervalSinceReferenceDate:)(*(double *)&v4);
  }
  if (qword_1002A8CA8 != -1) {
    swift_once(&qword_1002A8CA8, sub_100043918);
  }
  uint64_t v6 = (void *)qword_1002AAFE8;
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v8 = [v6 stringFromDate:isa];

  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v9;
}

uint64_t destroy for SubscriptionModificationContext(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 104));
}

void *initializeWithCopy for SubscriptionModificationContext(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  a1[2] = v5;
  a1[3] = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  a1[6] = *(void *)(a2 + 48);
  a1[7] = v8;
  uint64_t v9 = *(void *)(a2 + 72);
  a1[8] = *(void *)(a2 + 64);
  a1[9] = v9;
  uint64_t v10 = *(void *)(a2 + 88);
  a1[10] = *(void *)(a2 + 80);
  a1[11] = v10;
  uint64_t v11 = *(void *)(a2 + 104);
  a1[12] = *(void *)(a2 + 96);
  a1[13] = v11;
  id v12 = v3;
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  return a1;
}

uint64_t assignWithCopy for SubscriptionModificationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  swift_retain(v7);
  swift_release(v8);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v9;
  swift_retain(v9);
  swift_release(v10);
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v12 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v11;
  swift_retain(v11);
  swift_release(v12);
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  uint64_t v13 = *(void *)(a2 + 40);
  uint64_t v14 = *(void *)(a1 + 40);
  *(void *)(a1 + 4sub_10019B2E8(v0, 0) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v15 = *(void *)(a2 + 56);
  uint64_t v16 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v17 = *(void *)(a2 + 72);
  uint64_t v18 = *(void *)(a1 + 72);
  *(void *)(a1 + 7sub_100019F7C(v0 + 2) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(void *)(a1 + 8sub_10019B2E8(v0, 0) = *(void *)(a2 + 80);
  uint64_t v19 = *(void *)(a2 + 88);
  uint64_t v20 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v21 = *(void *)(a2 + 104);
  uint64_t v22 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  return a1;
}

uint64_t assignWithTake for SubscriptionModificationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  swift_release(*(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release(v5);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10019B2E8(v0, 0) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v9 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 72);
  uint64_t v11 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 7sub_100019F7C(v0 + 2) = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 88);
  uint64_t v13 = *(void *)(a1 + 88);
  *(void *)(a1 + 8sub_10019B2E8(v0, 0) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v12;
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a2 + 104);
  uint64_t v15 = *(void *)(a1 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v14;
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for SubscriptionModificationContext(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 112))
    {
      LODWORD(v7(v1, v0, 2LL, v3, v6, v5, v4, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v7(v1, v0, 2LL, v3, v6, v5, v4, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SubscriptionModificationContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0LL;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7sub_100019F7C(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4sub_10019B2E8(v0, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 11sub_100019F7C(v0 + 2) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 11sub_100019F7C(v0 + 2) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SubscriptionModificationContext()
{
  return &type metadata for SubscriptionModificationContext;
}

void sub_100169248()
{
  v0._uint64_t countAndFlagsBits = 0x20726F6620LL;
  v0._object = (void *)0xE500000000000000LL;
  String.append(_:)(v0);
}

void sub_10016925C()
{
  v0._uint64_t countAndFlagsBits = 544497952LL;
  v0._object = (void *)0xE400000000000000LL;
  String.append(_:)(v0);
}

void sub_10016926C()
{
  v2._uint64_t countAndFlagsBits = *(void *)(v1 - 184);
  v2._object = v0;
  String.append(_:)(v2);
}

void *sub_100169278(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v17 = a1;
  uint64_t v18 = a2;
  uint64_t v16 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    uint64_t v20 = _swiftEmptyArrayStorage;
    sub_1000320B0();
    uint64_t v10 = v20;
    uint64_t v11 = (uint64_t *)(a3 + 40);
    while (1)
    {
      uint64_t v12 = *v11;
      v19[0] = *(v11 - 1);
      v19[1] = v12;
      swift_bridgeObjectRetain(v12);
      v17(v19);
      if (v4) {
        break;
      }
      uint64_t v4 = 0LL;
      swift_bridgeObjectRelease(v12);
      uint64_t v20 = v10;
      unint64_t v13 = v10[2];
      if (v13 >= v10[3] >> 1)
      {
        sub_1000320B0();
        uint64_t v10 = v20;
      }

      v11 += 2;
      __int128 v10[2] = v13 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))( (unint64_t)v10 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
      + *(void *)(v6 + 72) * v13,
        v8,
        v16);
      if (!--v9) {
        return v10;
      }
    }

    swift_release(v10);
    swift_bridgeObjectRelease(v12);
  }

  return v10;
}

void *sub_1001693EC(void (*a1)(void *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    uint64_t v14 = _swiftEmptyArrayStorage;
    sub_100032558(0LL, v5, 0);
    uint64_t v6 = _swiftEmptyArrayStorage;
    for (uint64_t i = a3 + 32; ; i += 80LL)
    {
      a1(v13, i);
      if (v4) {
        break;
      }
      uint64_t v4 = 0LL;
      uint64_t v14 = v6;
      unint64_t v11 = v6[2];
      unint64_t v10 = v6[3];
      if (v11 >= v10 >> 1)
      {
        sub_100032558((char *)(v10 > 1), v11 + 1, 1);
        uint64_t v6 = v14;
      }

      _OWORD v6[2] = v11 + 1;
      memcpy(&v6[10 * v11 + 4], v13, 0x50uLL);
      if (!--v5) {
        return v6;
      }
    }

    swift_release();
  }

  return v6;
}

uint64_t (**ChannelOptions.socketOption.unsafeMutableAddressor())()
{
  return &static ChannelOptions.socketOption;
}

uint64_t (**ChannelOptions.socket.unsafeMutableAddressor())()
{
  return &static ChannelOptions.socket;
}

ASOctaneSupportXPCService::ChannelOptions::Storage __swiftcall ChannelOptions.Storage.init()()
{
  return (ASOctaneSupportXPCService::ChannelOptions::Storage)sub_10002FA94(0LL, 2LL, 0LL);
}

uint64_t (**ChannelOptions.tcpOption.unsafeMutableAddressor())()
{
  return &static ChannelOptions.tcpOption;
}

uint64_t ChannelOptions.Storage.append<A>(key:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v29 = 0;
  uint64_t v9 = *v4;
  void v19[2] = a3;
  v19[3] = a4;
  v19[4] = a1;
  void v19[5] = &v29;
  v19[6] = a2;
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_1001693EC((void (*)(void *__return_ptr, uint64_t))sub_100169E6C, (uint64_t)v19, v9);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v4 = (uint64_t)v10;
  if ((v29 & 1) == 0)
  {
    uint64_t v27 = a3;
    uint64_t v12 = sub_10005F580(&v26);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16LL))(v12, a1, a3);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a4,  a3,  &protocol requirements base descriptor for ChannelOption,  &associated type descriptor for ChannelOption.Value);
    uint64_t v25 = AssociatedTypeWitness;
    uint64_t v14 = sub_10005F580(&v24);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16LL))( v14,  a2,  AssociatedTypeWitness);
    uint64_t v15 = sub_1000AC93C((uint64_t)&unk_10028B7B0);
    *(void *)(v15 + 16) = a3;
    *(void *)(v15 + 24) = a4;
    sub_100034728(&v26, v20);
    sub_100034728(&v24, v21);
    uint64_t v22 = sub_100169E94;
    uint64_t v23 = v15;
    sub_100034728(v20, __src);
    sub_100034728(v21, &__src[2]);
    uint64_t v16 = sub_1000AC93C((uint64_t)&unk_10028B7D8);
    *(void *)(v16 + 16) = sub_100169E94;
    *(void *)(v16 + 24) = v15;
    *(void *)&__src[4] = sub_100132198;
    *((void *)&__src[4] + 1) = v16;
    sub_10002E8BC();
    uint64_t v17 = *(void *)(*v4 + 16);
    sub_10002EA88();
    uint64_t v18 = *v4;
    *(void *)(v18 + 16) = v17 + 1;
    uint64_t result = (uint64_t)memcpy((void *)(v18 + 80 * v17 + 32), __src, 0x50uLL);
    *uint64_t v4 = v18;
  }

  return result;
}

uint64_t ChannelOptions.Storage.applyAllChannelOptions(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = swift_getObjectType(a1);
  return sub_100169E9C(a1, a3, ObjectType, a2);
}

ASOctaneSupportXPCService::ChannelOptions::Types::WriteBufferWaterMark __swiftcall ChannelOptions.Types.WriteBufferWaterMark.init(low:high:)( Swift::Int low, Swift::Int high)
{
  if (low < 1 || high < low) {
    __break(1u);
  }
  result.high = high;
  result.low = low;
  return result;
}

unint64_t ChannelOptions.Types.SocketOption.name.getter(unint64_t a1)
{
  return HIDWORD(a1);
}

uint64_t ChannelOptions.Types.SocketOption.name.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 4) = result;
  return result;
}

uint64_t (*ChannelOptions.Types.SocketOption.level.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *v1;
  return sub_100169770;
}

uint64_t sub_100169770(uint64_t result)
{
  **(_DWORD **)ASOctaneSupportXPCService::ChannelOptions::Types::WriteBufferWaterMark result = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *(*ChannelOptions.Types.SocketOption.name.modify(uint64_t a1))(_DWORD *result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 4);
  return sub_10016979C;
}

_DWORD *sub_10016979C(_DWORD *result)
{
  *(_DWORD *)(*(void *)result + 4LL) = result[2];
  return result;
}

void static ChannelOptions.socket.getter()
{
}

uint64_t sub_1001697BC(uint64_t a1)
{
  return (a1 << 32) | 0xFFFF;
}

void static ChannelOptions.socketOption.getter()
{
}

uint64_t sub_1001697D4(uint64_t a1)
{
  return (a1 << 32) | 6;
}

void static ChannelOptions.tcpOption.getter()
{
}

uint64_t ChannelOptions.Storage._storage.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*v1);
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*sub_100169818())(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_allocObject(&unk_10028BB88, 48LL, 7LL);
  void v4[2] = v1;
  void v4[3] = v0;
  v4[4] = v3;
  void v4[5] = v2;
  swift_unknownObjectRetain(v3);
  return sub_10016A848;
}

uint64_t sub_10016987C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = a2;
  uint64_t v22 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a6,  a5,  &protocol requirements base descriptor for ChannelOption,  &associated type descriptor for ChannelOption.Value);
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v14 = (char *)&v21 - v13;
  uint64_t v15 = *(void *)(a5 - 8);
  __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t ObjectType = swift_getObjectType(a3);
  sub_10002C010(a1, (uint64_t)v24);
  swift_dynamicCast(v17, v24, (char *)&type metadata for Any + 8, a5, 7LL);
  sub_10002C010(v21, (uint64_t)v23);
  swift_dynamicCast(v14, v23, (char *)&type metadata for Any + 8, AssociatedTypeWitness, 7LL);
  uint64_t v19 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t, uint64_t))(v22 + 64))(v17, v14, a5, a6, ObjectType);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a5);
  return v19;
}

uint64_t sub_1001699F4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v38 = a7;
  uint64_t v36 = a2;
  uint64_t v37 = a6;
  unint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v9 = type metadata accessor for Optional(0LL, a5);
  uint64_t v34 = *(void *)(v9 - 8);
  uint64_t v35 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v31 - v11;
  uint64_t v59 = *(void *)(a5 - 8);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10002C010(a1, (uint64_t)v55);
  sub_10002C010(a1 + 32, (uint64_t)v56);
  uint64_t v15 = *(void *)(a1 + 72);
  uint64_t v57 = *(void *)(a1 + 64);
  uint64_t v16 = v57;
  uint64_t v58 = v15;
  sub_100034728(v55, v51);
  sub_100034728(v56, v52);
  uint64_t v17 = swift_allocObject(&unk_10028BBB0, 32LL, 7LL);
  *(void *)(v17 + 16) = v16;
  *(void *)(v17 + 24) = v15;
  unint64_t v53 = sub_100132190;
  uint64_t v54 = v17;
  sub_10002C010((uint64_t)v51, (uint64_t)v46);
  sub_10002C010((uint64_t)v52, (uint64_t)v47);
  Swift::String v48 = sub_100132190;
  uint64_t v49 = v17;
  sub_100034728(v46, v50);
  swift_retain();
  sub_100019F7C(v47);
  sub_10002C010((uint64_t)v50, (uint64_t)v46);
  if ((swift_dynamicCast(v12, v46, (char *)&type metadata for Any + 8, a5, 6LL) & 1) == 0)
  {
    sub_10001762C((uint64_t)v12, 1LL, 1LL, a5);
    sub_100019F7C(v50);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v35);
    uint64_t v22 = v38;
LABEL_6:
    sub_100034728(v51, v46);
    sub_100034728(v52, v47);
    char v29 = v53;
    uint64_t v30 = v54;
    Swift::String v48 = v53;
    uint64_t v49 = v54;
    sub_100034728(v46, &v41);
    sub_100034728(v47, v43);
    uint64_t v44 = v29;
    uint64_t v45 = v30;
    sub_100034728(&v41, (_OWORD *)v22);
    sub_100034728(v43, (_OWORD *)(v22 + 32));
    uint64_t result = swift_allocObject(&unk_10028BBD8, 32LL, 7LL);
    *(void *)(result + 16) = v29;
    *(void *)(result + 24) = v30;
    goto LABEL_7;
  }

  uint64_t v18 = v32;
  uint64_t v19 = v33;
  sub_10001762C((uint64_t)v12, 0LL, 1LL, a5);
  (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v14, v12, a5);
  uint64_t v20 = v37;
  char v21 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v36, a5, *(void *)(v37 + 8));
  uint64_t v22 = v38;
  if ((v21 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v14, a5);
    sub_100019F7C(v50);
    goto LABEL_6;
  }

  _BYTE *v18 = 1;
  uint64_t v42 = a5;
  uint64_t v23 = sub_10005F580(&v41);
  uint64_t v24 = v59;
  (*(void (**)(void *, char *, uint64_t))(v59 + 16))(v23, v14, a5);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v20,  a5,  &protocol requirements base descriptor for ChannelOption,  &associated type descriptor for ChannelOption.Value);
  uint64_t v40 = AssociatedTypeWitness;
  __int128 v26 = sub_10005F580(&v39);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16LL))( v26,  v19,  AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v14, a5);
  sub_100019F7C(v50);
  sub_10016A854((uint64_t)v51);
  uint64_t v27 = swift_allocObject(&unk_10028BC00, 32LL, 7LL);
  *(void *)(v27 + 16) = a5;
  *(void *)(v27 + 24) = v20;
  sub_100034728(&v41, v46);
  sub_100034728(&v39, v47);
  Swift::String v48 = (void (*(*)(uint64_t, uint64_t))())sub_10016A8B0;
  uint64_t v49 = v27;
  sub_100034728(v46, (_OWORD *)v22);
  sub_100034728(v47, (_OWORD *)(v22 + 32));
  uint64_t result = swift_allocObject(&unk_10028BC28, 32LL, 7LL);
  *(void *)(result + 16) = sub_10016A8B0;
  *(void *)(result + 24) = v27;
LABEL_7:
  *(void *)(v22 + 64) = sub_100132864;
  *(void *)(v22 + 7sub_100019F7C(v0 + 2) = result;
  return result;
}

uint64_t sub_100169DD0@<X0>(void *a1@<X0>, uint64_t (*a2)(void, void)@<X1>, void *a3@<X8>)
{
  uint64_t v4 = a2(*a1, a1[1]);
  uint64_t v6 = v5;
  uint64_t result = sub_1000AC93C((uint64_t)&unk_10028BB60);
  *(void *)(result + 16) = v4;
  *(void *)(result + 24) = v6;
  *a3 = sub_10016A81C;
  a3[1] = result;
  return result;
}

uint64_t sub_100169E2C()
{
  uint64_t ObjectType = swift_getObjectType(v4);
  return sub_10016A530(v3, v2, v1, ObjectType, v0);
}

uint64_t sub_100169E6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001699F4( a1,  *(void *)(v2 + 32),  *(_BYTE **)(v2 + 40),  *(void *)(v2 + 48),  *(void *)(v2 + 16),  *(void *)(v2 + 24),  a2);
}

uint64_t (*sub_100169E94())(uint64_t a1, uint64_t a2)
{
  return sub_100169818();
}

uint64_t sub_100169E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)(a4 + 8) + 80LL))(ObjectType);
  uint64_t v11 = v10;
  uint64_t v12 = swift_getObjectType(v9);
  uint64_t v13 = EventLoop.makePromise<A>(of:file:line:)( (uint64_t)&type metadata for ()[8],  (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelOption.swift",  115LL,  2LL,  368LL,  v12,  (uint64_t)&type metadata for ()[8],  v11);
  swift_unknownObjectRelease(v9);
  uint64_t v14 = swift_allocObject(&unk_10028BB38, 32LL, 7LL);
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = 0LL;
  swift_bridgeObjectRetain();
  sub_10016A530(v14, v13, a1, a3, a4);
  swift_release();
  return v13;
}

unint64_t sub_100169F84(uint64_t a1)
{
  unint64_t result = sub_100169FA8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100169FA8()
{
  unint64_t result = qword_1002B7408;
  if (!qword_1002B7408)
  {
    unint64_t result = swift_getWitnessTable( protocol conformance descriptor for ChannelOptions.Types.SocketOption,  &type metadata for ChannelOptions.Types.SocketOption);
    atomic_store(result, (unint64_t *)&qword_1002B7408);
  }

  return result;
}

unint64_t sub_100169FE4(uint64_t a1)
{
  unint64_t result = sub_10016A008();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10016A008()
{
  unint64_t result = qword_1002B7428;
  if (!qword_1002B7428)
  {
    unint64_t result = swift_getWitnessTable("Q^\b", &type metadata for ChannelOptions.Types.AllocatorOption);
    atomic_store(result, (unint64_t *)&qword_1002B7428);
  }

  return result;
}

unint64_t sub_10016A044(uint64_t a1)
{
  unint64_t result = sub_10016A068();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10016A068()
{
  unint64_t result = qword_1002B7448;
  if (!qword_1002B7448)
  {
    unint64_t result = swift_getWitnessTable("\r^\b", &type metadata for ChannelOptions.Types.RecvAllocatorOption);
    atomic_store(result, (unint64_t *)&qword_1002B7448);
  }

  return result;
}

unint64_t sub_10016A0A4(uint64_t a1)
{
  unint64_t result = sub_10016A0C8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10016A0C8()
{
  unint64_t result = qword_1002B7468;
  if (!qword_1002B7468)
  {
    unint64_t result = swift_getWitnessTable( protocol conformance descriptor for ChannelOptions.Types.AutoReadOption,  &type metadata for ChannelOptions.Types.AutoReadOption);
    atomic_store(result, (unint64_t *)&qword_1002B7468);
  }

  return result;
}

unint64_t sub_10016A104(uint64_t a1)
{
  unint64_t result = sub_10016A128();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10016A128()
{
  unint64_t result = qword_1002B7488;
  if (!qword_1002B7488)
  {
    unint64_t result = swift_getWitnessTable( protocol conformance descriptor for ChannelOptions.Types.WriteSpinOption,  &type metadata for ChannelOptions.Types.WriteSpinOption);
    atomic_store(result, (unint64_t *)&qword_1002B7488);
  }

  return result;
}

unint64_t sub_10016A164(uint64_t a1)
{
  unint64_t result = sub_10016A188();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10016A188()
{
  unint64_t result = qword_1002B74A8;
  if (!qword_1002B74A8)
  {
    unint64_t result = swift_getWitnessTable("A]\b", &type metadata for ChannelOptions.Types.MaxMessagesPerReadOption);
    atomic_store(result, (unint64_t *)&qword_1002B74A8);
  }

  return result;
}

unint64_t sub_10016A1C4(uint64_t a1)
{
  unint64_t result = sub_10016A1E8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10016A1E8()
{
  unint64_t result = qword_1002B74C8;
  if (!qword_1002B74C8)
  {
    unint64_t result = swift_getWitnessTable( protocol conformance descriptor for ChannelOptions.Types.BacklogOption,  &type metadata for ChannelOptions.Types.BacklogOption);
    atomic_store(result, (unint64_t *)&qword_1002B74C8);
  }

  return result;
}

unint64_t sub_10016A224(uint64_t a1)
{
  unint64_t result = sub_10016A248();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10016A248()
{
  unint64_t result = qword_1002B74E8;
  if (!qword_1002B74E8)
  {
    unint64_t result = swift_getWitnessTable( protocol conformance descriptor for ChannelOptions.Types.DatagramVectorReadMessageCountOption,  &type metadata for ChannelOptions.Types.DatagramVectorReadMessageCountOption);
    atomic_store(result, (unint64_t *)&qword_1002B74E8);
  }

  return result;
}

unint64_t sub_10016A284(uint64_t a1)
{
  unint64_t result = sub_10016A2A8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10016A2A8()
{
  unint64_t result = qword_1002B7508;
  if (!qword_1002B7508)
  {
    unint64_t result = swift_getWitnessTable( "u\\\b",  &type metadata for ChannelOptions.Types.ExplicitCongestionNotificationsOption);
    atomic_store(result, (unint64_t *)&qword_1002B7508);
  }

  return result;
}

unint64_t sub_10016A2E4(uint64_t a1)
{
  unint64_t result = sub_10016A308();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10016A308()
{
  unint64_t result = qword_1002B7528;
  if (!qword_1002B7528)
  {
    unint64_t result = swift_getWitnessTable("1\\\b", &type metadata for ChannelOptions.Types.WriteBufferWaterMarkOption);
    atomic_store(result, (unint64_t *)&qword_1002B7528);
  }

  return result;
}

unint64_t sub_10016A344(uint64_t a1)
{
  unint64_t result = sub_10016A368();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10016A368()
{
  unint64_t result = qword_1002B7548;
  if (!qword_1002B7548)
  {
    unint64_t result = swift_getWitnessTable( protocol conformance descriptor for ChannelOptions.Types.ConnectTimeoutOption,  &type metadata for ChannelOptions.Types.ConnectTimeoutOption);
    atomic_store(result, (unint64_t *)&qword_1002B7548);
  }

  return result;
}

unint64_t sub_10016A3A4(uint64_t a1)
{
  unint64_t result = sub_10016A3C8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10016A3C8()
{
  unint64_t result = qword_1002B7568;
  if (!qword_1002B7568)
  {
    unint64_t result = swift_getWitnessTable( protocol conformance descriptor for ChannelOptions.Types.AllowRemoteHalfClosureOption,  &type metadata for ChannelOptions.Types.AllowRemoteHalfClosureOption);
    atomic_store(result, (unint64_t *)&qword_1002B7568);
  }

  return result;
}

unint64_t sub_10016A404(uint64_t a1)
{
  unint64_t result = sub_10016A428();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10016A428()
{
  unint64_t result = qword_1002B7588;
  if (!qword_1002B7588)
  {
    unint64_t result = swift_getWitnessTable("e[\b", &type metadata for ChannelOptions.Types.ReceivePacketInfo);
    atomic_store(result, (unint64_t *)&qword_1002B7588);
  }

  return result;
}

void type metadata accessor for ChannelOptions.Types()
{
}

void type metadata accessor for ChannelOptions.Types.SocketOption()
{
}

void type metadata accessor for ChannelOptions.Types.AllocatorOption()
{
}

void type metadata accessor for ChannelOptions.Types.RecvAllocatorOption()
{
}

void type metadata accessor for ChannelOptions.Types.AutoReadOption()
{
}

void type metadata accessor for ChannelOptions.Types.WriteSpinOption()
{
}

void type metadata accessor for ChannelOptions.Types.MaxMessagesPerReadOption()
{
}

void type metadata accessor for ChannelOptions.Types.BacklogOption()
{
}

void type metadata accessor for ChannelOptions.Types.DatagramVectorReadMessageCountOption()
{
}

void type metadata accessor for ChannelOptions.Types.ExplicitCongestionNotificationsOption()
{
}

void type metadata accessor for ChannelOptions.Types.WriteBufferWaterMark()
{
}

void type metadata accessor for ChannelOptions.Types.WriteBufferWaterMarkOption()
{
}

void type metadata accessor for ChannelOptions.Types.ConnectTimeoutOption()
{
}

void type metadata accessor for ChannelOptions.Types.AllowRemoteHalfClosureOption()
{
}

void type metadata accessor for ChannelOptions.Types.ReceivePacketInfo()
{
}

void type metadata accessor for ChannelOptions()
{
}

void type metadata accessor for ChannelOptions.Storage()
{
}

uint64_t sub_10016A530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v14)(_OWORD *__return_ptr, __int128 *);
  void *v15;
  uint64_t v16;
  _OWORD v17[2];
  _OWORD v18[3];
  _OWORD v19[2];
  _OWORD v20[3];
  _BYTE v21[24];
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  void (*v25)(_OWORD *__return_ptr, __int128 *);
  uint64_t v26;
  _OWORD v27[2];
  _OWORD v28[2];
  uint64_t result = swift_beginAccess(a1 + 16, v21, 1LL, 0LL);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 24);
  unint64_t v12 = *(void *)(v10 + 16);
  if (v11 != v12)
  {
    if (v11 >= v12)
    {
      __break(1u);
      return result;
    }

    sub_10016A758(v10 + 80 * v11 + 32, (uint64_t)&v22);
    *(void *)(a1 + 24) = v11 + 1;
    if (v23)
    {
      sub_100034728(&v22, v17);
      sub_100034728(&v24, v18);
      uint64_t v14 = v25;
      uint64_t v13 = v26;
      sub_100034728(v17, v19);
      sub_100034728(v18, v20);
      sub_100034728(v19, v28);
      sub_100034728(v20, v27);
      *(void *)&uint64_t v22 = a3;
      *((void *)&v22 + 1) = a5;
      swift_retain();
      swift_unknownObjectRetain(a3);
      v14(v19, &v22);
      swift_unknownObjectRelease(a3);
      (*(void (**)(__int128 *__return_ptr, _OWORD *, _OWORD *))&v19[0])(&v22, v28, v27);
      swift_release();
      uint64_t v15 = (void *)swift_allocObject(&unk_10028BAE8, 48LL, 7LL);
      void v15[2] = a1;
      v15[3] = a2;
      _OWORD v15[4] = a3;
      void v15[5] = a5;
      uint64_t v16 = swift_allocObject(&unk_10028BB10, 32LL, 7LL);
      *(void *)(v16 + 16) = sub_100132078;
      *(void *)(v16 + 24) = v15;
      swift_unknownObjectRetain(a3);
      swift_retain();
      swift_retain();
      sub_100172010( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelOption.swift",  115LL,  2LL,  378LL,  (uint64_t)sub_10007D590,  v16);
      swift_release();
      swift_release();
      sub_100028DB0(a2);
      swift_release();
      swift_release_n(v13, 2LL);
      sub_100019F7C(v27);
      return sub_100019F7C(v28);
    }
  }

  return sub_100098A70(0LL, 0LL, a2);
}

uint64_t sub_10016A758(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002AA520);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016A7A0()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10016A7D4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10016A7F8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10016A81C(void *a1@<X8>)
{
}

uint64_t sub_10016A824()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10016A848(uint64_t a1, uint64_t a2)
{
  return sub_10016987C(a1, a2, v2[4], v2[5], v2[2], v2[3]);
}

uint64_t sub_10016A854(uint64_t a1)
{
  uint64_t v2 = sub_1000175B0(&qword_1002AA520);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

  ;
}

unint64_t _s25ASOctaneSupportXPCService14ChannelOptionsV5TypesO12SocketOptionV5level4nameAGs5Int32V_AKtcfC_0( unsigned int a1, uint64_t a2)
{
  return a1 | (unint64_t)(a2 << 32);
}

void *sub_10016A8D4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v43 = a3;
  uint64_t v4 = sub_1000175B0(&qword_1002AC060);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v32 - v8;
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v12 = a1[3];
  uint64_t v42 = a1[2];
  uint64_t v13 = (int *)type metadata accessor for PurchaseConfiguration(0LL);
  uint64_t v14 = (char *)a1 + v13[7];
  char v15 = v14[8];
  uint64_t v41 = v12;
  if ((v15 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    sub_10001DBCC();
    uint64_t v38 = 0LL;
    uint64_t v39 = 0LL;
  }

  else
  {
    *(void *)&v74[0] = *(void *)v14;
    swift_bridgeObjectRetain();
    sub_10001DBCC();
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    uint64_t v38 = v17;
    uint64_t v39 = v16;
  }

  if (*((_BYTE *)a1 + v13[11]) == 1)
  {
    uint64_t v36 = 0LL;
    uint64_t v37 = 0LL;
  }

  else
  {
    uint64_t v18 = (uint64_t *)((char *)a1 + v13[10]);
    uint64_t v19 = *v18;
    uint64_t v36 = v18[1];
    uint64_t v37 = v19;
    swift_bridgeObjectRetain();
  }

  sub_10005AB50(v10, v11, (uint64_t)v9);
  uint64_t v20 = type metadata accessor for UUID(0LL);
  uint64_t v21 = sub_10001D158((uint64_t)v9, 1LL, v20);
  uint64_t v40 = v10;
  if ((_DWORD)v21 == 1)
  {
    sub_100043F40((uint64_t)v9, &qword_1002AC060);
    uint64_t v33 = 0LL;
    uint64_t v34 = 0LL;
  }

  else
  {
    uint64_t v22 = UUID.uuidString.getter(v21);
    uint64_t v33 = v23;
    uint64_t v34 = v22;
    (*(void (**)(char *, uint64_t))(*(void *)(v20 - 8) + 8LL))(v9, v20);
  }

  sub_10016D770((uint64_t)a1 + v13[6], (uint64_t)v7);
  uint64_t v24 = sub_10001D158((uint64_t)v7, 1LL, v20);
  if ((_DWORD)v24 == 1)
  {
    swift_release();
    sub_100043F40((uint64_t)v7, &qword_1002AC060);
    uint64_t v25 = 0LL;
    uint64_t v26 = 0LL;
  }

  else
  {
    uint64_t v25 = UUID.uuidString.getter(v24);
    uint64_t v26 = v27;
    swift_release();
    (*(void (**)(char *, uint64_t))(*(void *)(v20 - 8) + 8LL))(v7, v20);
  }

  uint64_t v28 = sub_100141EF4(1u);
  uint64_t v30 = v29;
  char v48 = 1;
  char v47 = 1;
  char v46 = 1;
  char v45 = 1;
  char v44 = 1;
  uint64_t v49 = 0LL;
  char v50 = 1;
  uint64_t v51 = 0LL;
  __int128 v52 = 0u;
  char v53 = 1;
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  __int128 v56 = 0u;
  __int128 v57 = 0u;
  __int128 v58 = 0u;
  __int128 v59 = 0u;
  __int128 v60 = 0u;
  __int128 v61 = 0u;
  char v62 = 1;
  char v63 = 1;
  uint64_t v65 = 0LL;
  __int128 v64 = 0u;
  char v66 = 1;
  __int128 v70 = 0u;
  __int128 v71 = 0u;
  __int128 v72 = 0u;
  __int128 v67 = 0u;
  __int128 v68 = 0u;
  __int128 v69 = 0u;
  char v73 = 1;
  debugOnly(_:)(&v49);
  memset(v74, 0, 64);
  *(void *)&v74[4] = v40;
  *((void *)&v74[4] + 1) = v11;
  memset(&v74[5], 0, 17);
  *(_OWORD *)((char *)&v74[6] + 8) = 0u;
  *(_OWORD *)((char *)&v74[7] + 8) = 0u;
  *((void *)&v74[8] + 1) = v42;
  *(void *)&v74[9] = v41;
  *(_OWORD *)((char *)&v74[9] + 8) = 0u;
  *(_OWORD *)((char *)&v74[10] + 8) = 0u;
  *(_OWORD *)((char *)&v74[11] + 8) = 0u;
  BYTE8(v74[12]) = 2;
  v74[13] = 0u;
  *(void *)&v74[14] = v39;
  *((void *)&v74[14] + 1) = v38;
  v74[15] = 0u;
  v74[16] = xmmword_1002062F0;
  memset(&v74[17], 0, 128);
  *(void *)&v74[25] = v37;
  *((void *)&v74[25] + 1) = v36;
  memset(&v74[26], 0, 64);
  *(void *)&v74[30] = v34;
  *((void *)&v74[30] + 1) = v33;
  *(void *)&v74[31] = v25;
  *((void *)&v74[31] + 1) = v26;
  *(void *)&v74[32] = v28;
  *((void *)&v74[32] + 1) = v30;
  LOBYTE(v74[33]) = 2;
  *(_OWORD *)((char *)&v74[33] + 8) = 0u;
  BYTE8(v74[34]) = 2;
  sub_1000390C8((uint64_t)&v49, (uint64_t)&v74[35], &qword_1002AA7C0);
  sub_1001442C8((uint64_t)a1);
  return memcpy(v43, v74, 0x369uLL);
}

uint64_t sub_10016AC94()
{
  uint64_t v1 = type metadata accessor for Mirror(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_10001DAD0();
  uint64_t v5 = v4 - v3;
  uint64_t v42 = 0LL;
  unint64_t v43 = 0xE000000000000000LL;
  *((void *)&v40 + 1) = &type metadata for InAppBuyRequest;
  uint64_t v38 = swift_allocObject(&unk_10028BC60, 889LL, 7LL);
  memcpy((void *)(v38 + 16), v0, 0x369uLL);
  sub_1000A2B6C((uint64_t)v0);
  uint64_t v6 = Mirror.init(reflecting:)(&v38);
  Mirror.children.getter(v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v5, v1);
  uint64_t v8 = dispatch thunk of _AnySequenceBox._makeIterator()(v7);
  swift_release();
  swift_retain();
  sub_10016F2F0();
  if (v41)
  {
    uint64_t v9 = &qword_1002ABAB8;
    do
    {
      uint64_t v10 = v38;
      uint64_t v11 = v39;
      v36[0] = v38;
      v36[1] = v39;
      sub_100034728(&v40, &v37);
      sub_10016F210();
      if (v11)
      {
        swift_bridgeObjectRetain_n(v11, 2LL);
        sub_100019F7C(v35);
        if (qword_1002A8D38 != -1) {
          swift_once(&qword_1002A8D38, sub_10016B72C);
        }
        uint64_t v12 = qword_1002EB9A0;
        if (*(void *)(qword_1002EB9A0 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v13 = sub_1000F168C(v10, v11);
          uint64_t v14 = v10;
          uint64_t v15 = v11;
          if ((v16 & 1) != 0)
          {
            uint64_t v17 = (uint64_t *)(*(void *)(v12 + 56) + 16 * v13);
            uint64_t v14 = *v17;
            uint64_t v15 = v17[1];
            swift_bridgeObjectRetain();
            sub_100024E84();
          }

          sub_100024E84();
        }

        else
        {
          uint64_t v14 = v10;
          uint64_t v15 = v11;
        }

        if (qword_1002A8CF0 != -1) {
          swift_once(&qword_1002A8CF0, sub_1000E6818);
        }
        sub_1000B3C84(v14, v15, qword_1002EB968);
        if ((v18 & 1) != 0)
        {
          uint64_t v19 = v9;
          sub_10016F210();
          if (sub_10003556C( (uint64_t)v33,  (uint64_t)v35,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String))
          {
            sub_100024E84();
            uint64_t v20 = v33[0];
            uint64_t v21 = (void *)v33[1];
            sub_10016F220();
            v22._uint64_t countAndFlagsBits = v20;
            v22._object = v21;
            String.append(_:)(v22);
            goto LABEL_33;
          }

          sub_10016F210();
          if (sub_10003556C( (uint64_t)v33,  (uint64_t)v35,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for PricingParameters))
          {
            sub_100024E84();
            int v23 = LOBYTE(v33[0]);
            sub_10016F220();
            if (v23) {
              uint64_t v24 = 0x4C4452445453LL;
            }
            else {
              uint64_t v24 = 1363432531LL;
            }
            if (v23) {
              unint64_t v25 = 0xE600000000000000LL;
            }
            else {
              unint64_t v25 = 0xE400000000000000LL;
            }
LABEL_32:
            unint64_t v27 = v25;
            String.append(_:)(*(Swift::String *)&v24);
LABEL_33:
            swift_bridgeObjectRelease();
            v28._uint64_t countAndFlagsBits = 38LL;
            v28._object = (void *)0xE100000000000000LL;
            String.append(_:)(v28);
            String.append(_:)(v34);
          }

          else
          {
            sub_10016F210();
            sub_100024E84();
            if ((sub_10003556C( (uint64_t)v33,  (uint64_t)v35,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for FlexiblyDecodableBool) & 1) != 0)
            {
              int v26 = LOBYTE(v33[0]);
              sub_10016F220();
              if (v26) {
                uint64_t v24 = 1702195828LL;
              }
              else {
                uint64_t v24 = 0x65736C6166LL;
              }
              if (v26) {
                unint64_t v25 = 0xE400000000000000LL;
              }
              else {
                unint64_t v25 = 0xE500000000000000LL;
              }
              goto LABEL_32;
            }
          }

          swift_bridgeObjectRelease();
          uint64_t v9 = v19;
          sub_100043F40((uint64_t)v36, v19);
          goto LABEL_35;
        }

        sub_10016F2DC();
        sub_100024E84();
        swift_bridgeObjectRelease();
      }

      else
      {
        sub_10016F2DC();
        sub_100019F7C(v35);
      }

void sub_10016B0A4()
{
  uint64_t v1 = v24;
  if (!v24) {
    return;
  }
  uint64_t v2 = v23;
  sub_10016F2BC();
  if (!v4) {
    return;
  }
  if ((v1 & 0x1000000000000000LL) != 0)
  {
    sub_100047A90((uint64_t)v22);
    sub_100161AEC(v2, v1, 10LL);
    sub_100161AF8((uint64_t)v22);
    return;
  }

  if ((v1 & 0x2000000000000000LL) == 0)
  {
    if ((v2 & 0x1000000000000000LL) != 0) {
      uint64_t v5 = (unsigned __int8 *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v5 = (unsigned __int8 *)sub_10016F2D0();
    }
    sub_100161AC4(v5, v3);
    return;
  }

  sub_10016F2A8();
  if (v8)
  {
    if (!v6) {
      goto LABEL_57;
    }
    if (v6 != 1)
    {
      sub_10016F1D0();
      if (!(!v8 & v10) && v11 != 2)
      {
        sub_100162A90();
        if (!(!v8 & v10) && v12 != 3)
        {
          sub_100162AF0();
          do
          {
            sub_100024EAC();
            if (!v8 & v10) {
              break;
            }
            sub_100162A7C();
            if (!v8) {
              break;
            }
            if (__OFADD__(v14, v13)) {
              break;
            }
            sub_100162A9C();
          }

          while (!v8);
        }
      }
    }
  }

  else
  {
    if (v7 == 45)
    {
      if (v6)
      {
        if (v6 != 1)
        {
          sub_10016F1D0();
          if (!(!v8 & v10) && v9 != 2)
          {
            sub_100162B4C();
            if (!(!v8 & v10) && v19 != 3)
            {
              sub_100162AF0();
              do
              {
                sub_100024EAC();
                if (!v8 & v10) {
                  break;
                }
                sub_100162A7C();
                if (!v8) {
                  break;
                }
                if (__OFSUB__(v21, v20)) {
                  break;
                }
                sub_100162A9C();
              }

              while (!v8);
            }
          }
        }

        return;
      }

      __break(1u);
LABEL_57:
      __break(1u);
      return;
    }

    if (v6)
    {
      sub_100162A90();
      if (!(!v8 & v10) && v15 != 1)
      {
        sub_10016F1D0();
        if (!(!v8 & v10) && v16 != 2)
        {
          do
          {
            sub_100024EAC();
            if (!v8 & v10) {
              break;
            }
            sub_100162A7C();
            if (!v8) {
              break;
            }
            if (__OFADD__(v18, v17)) {
              break;
            }
            sub_100162A9C();
          }

          while (!v8);
        }
      }
    }
  }

void sub_10016B2F0()
{
  uint64_t v1 = *(void *)(v0 + 232);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 224);
    sub_10016F2BC();
    if (v4)
    {
      if ((v1 & 0x1000000000000000LL) == 0)
      {
        if ((v1 & 0x2000000000000000LL) == 0)
        {
          if ((v2 & 0x1000000000000000LL) != 0) {
            uint64_t v5 = (unsigned __int8 *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else {
            uint64_t v5 = (unsigned __int8 *)sub_10016F2D0();
          }
          sub_100161AD8(v5, v3);
          char v7 = v6 & 1;
LABEL_48:
          swift_bridgeObjectRetain();
          if ((v7 & 1) == 0)
          {
LABEL_49:
            sub_100019390();
            return;
          }

          goto LABEL_60;
        }

        sub_10016F2A8();
        if (v10)
        {
          if (!v8)
          {
LABEL_63:
            __break(1u);
            return;
          }

          if (v8 == 1) {
            goto LABEL_33;
          }
          sub_10016F1D0();
          if (!v10 && v13) {
            goto LABEL_33;
          }
          unsigned int v16 = v15;
          if (v14 != 2)
          {
            sub_100162A90();
            if (!v10 && v13) {
              goto LABEL_33;
            }
            unint64_t v19 = 10LL * v16 + v18;
            if (v17 != 3)
            {
              sub_100162AF0();
              while (1)
              {
                sub_100024EAC();
                if (!v10 && v13) {
                  goto LABEL_33;
                }
                if (!is_mul_ok(v19, v20)) {
                  goto LABEL_33;
                }
                BOOL v13 = __CFADD__(10 * v19, v21);
                unint64_t v19 = 10 * v19 + v21;
                if (v13) {
                  goto LABEL_33;
                }
                char v7 = 0;
                sub_100162A9C();
                if (v10) {
                  goto LABEL_48;
                }
              }
            }
          }
        }

        else
        {
          if (v9 == 45)
          {
            if (v8)
            {
              if (v8 != 1)
              {
                sub_10016F1D0();
                if ((v10 || !v13) && !v12)
                {
                  if (v11 == 2)
                  {
                    char v7 = 0;
                    goto LABEL_48;
                  }

                  sub_100162B4C();
                  if ((v10 || !v13) && is_mul_ok(v31, 0xAuLL))
                  {
                    unint64_t v33 = 10 * v31;
                    unint64_t v34 = v33 - v32;
                    if (v33 >= v32)
                    {
                      if (v30 == 3) {
                        goto LABEL_47;
                      }
                      sub_100162AF0();
                      while (1)
                      {
                        sub_100024EAC();
                        if (!v10 && v13) {
                          break;
                        }
                        if (!is_mul_ok(v34, v35)) {
                          break;
                        }
                        BOOL v13 = 10 * v34 >= v36;
                        unint64_t v34 = 10 * v34 - v36;
                        if (!v13) {
                          break;
                        }
                        char v7 = 0;
                        sub_100162A9C();
                        if (v10) {
                          goto LABEL_48;
                        }
                      }
                    }
                  }
                }
              }

uint64_t sub_10016B594(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x4C4452445453LL;
  }
  else {
    return 1363432531LL;
  }
}

uint64_t sub_10016B5C0(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002738E8, v2);
  sub_100019390();
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0LL;
  }
}

void sub_10016B60C(char *a1, unsigned __int8 *a2)
{
}

void sub_10016B618()
{
}

uint64_t sub_10016B620(uint64_t a1)
{
  return sub_1000B1F60(a1, *v1);
}

void sub_10016B628(uint64_t a1)
{
}

uint64_t sub_10016B630@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10016B5C0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10016B65C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10016B594(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10016B684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10016F0F0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10016B6E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10016F0F0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10016B72C()
{
  uint64_t result = Dictionary.init(dictionaryLiteral:)(&off_100270928, &type metadata for String, &type metadata for String);
  qword_1002EB9A0 = result;
  return result;
}

uint64_t sub_10016B764(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_100273938, a1, a2, &unk_1002A8EA8);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x25) {
    return 37LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10016B7B8()
{
  return 37LL;
}

uint64_t sub_10016B7C0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10016B7EC + 4 * byte_100206300[a1]))( 1935959649LL,  0xE400000000000000LL);
}

uint64_t sub_10016B7EC()
{
  return 0x756F636341707061LL;
}

uint64_t sub_10016B810()
{
  return 0x496D616441707061LL;
}

uint64_t sub_10016B82C()
{
  return 0x64697344707061LL;
}

uint64_t sub_10016B844()
{
  return 0x7256747845707061LL;
}

unint64_t sub_10016B864()
{
  return 0xD000000000000013LL;
}

uint64_t sub_10016BB4C()
{
  return 0x704F626557736168LL;
}

uint64_t sub_10016BB6C()
{
  return 1682534515LL;
}

uint64_t sub_10016BB78()
{
  return 6580598LL;
}

uint64_t sub_10016BB94(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_1000175B0(&qword_1002B75B0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10001DAD0();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100019F58(a1, v10);
  unint64_t v12 = sub_10016D490();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for InAppBuyRequest.CodingKeys,  &type metadata for InAppBuyRequest.CodingKeys,  v12,  v10,  v11);
  uint64_t v13 = *v3;
  uint64_t v14 = v3[1];
  char v29 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v14, &v29, v5);
  if (!v2)
  {
    sub_10016F12C(v3[62], v3[63], 1);
    sub_10016F12C(v3[2], v3[3], 2);
    sub_10016F12C(v3[4], v3[5], 3);
    sub_10016F12C(v3[6], v3[7], 4);
    sub_10016F12C(v3[42], v3[43], 5);
    uint64_t v15 = v3[8];
    uint64_t v16 = v3[9];
    char v29 = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v29, v5);
    sub_10016F12C(v3[10], v3[11], 7);
    sub_10016F12C(v3[60], v3[61], 8);
    sub_100054254((uint64_t)(v3 + 66), (uint64_t)&v33);
    sub_100054254((uint64_t)&v33, (uint64_t)&v29);
    unint64_t v17 = sub_10016D544();
    sub_10016F1E4(v17, v18, v19, (uint64_t)&type metadata for FlexiblyDecodableBool);
    sub_100054254((uint64_t)(v3 + 12), (uint64_t)&v32);
    uint64_t v20 = sub_100054254((uint64_t)&v32, (uint64_t)&v29);
    char v28 = 10;
    sub_10016F1E4(v20, v21, v22, (uint64_t)&type metadata for FlexiblyDecodableBool);
    sub_10016F12C(v3[44], v3[45], 11);
    sub_10016F12C(v3[46], v3[47], 12);
    sub_10016F12C(v3[15], v3[16], 13);
    sub_10016F12C(v3[17], v3[18], 14);
    sub_10016F12C(v3[64], v3[65], 15);
    sub_10016F12C(v3[50], v3[51], 16);
    sub_10016F12C(v3[52], v3[53], 17);
    sub_10016F12C(v3[54], v3[55], 18);
    sub_10016F12C(v3[56], v3[57], 19);
    sub_10016F12C(v3[58], v3[59], 20);
    sub_10016F12C(v3[19], v3[20], 21);
    sub_10016F12C(v3[21], v3[22], 22);
    sub_10016F12C(v3[23], v3[24], 23);
    sub_100054254((uint64_t)(v3 + 25), (uint64_t)&v31);
    sub_100054254((uint64_t)&v31, (uint64_t)&v29);
    char v28 = 24;
    unint64_t v23 = sub_10016D580();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v29, &v28, v5, &type metadata for PricingParameters, v23);
    sub_10016F12C(v3[26], v3[27], 25);
    sub_10016F12C(v3[28], v3[29], 26);
    sub_10016F12C(v3[32], v3[33], 27);
    sub_10016F12C(v3[34], v3[35], 28);
    sub_10016F12C(v3[36], v3[37], 29);
    sub_10016F12C(v3[38], v3[39], 30);
    sub_10016F12C(v3[40], v3[41], 31);
    sub_10016F12C(v3[30], v3[31], 32);
    sub_100054254((uint64_t)(v3 + 69), (uint64_t)&v30);
    uint64_t v24 = sub_100054254((uint64_t)&v30, (uint64_t)&v29);
    char v28 = 33;
    sub_10016F1E4(v24, v25, v26, (uint64_t)&type metadata for FlexiblyDecodableBool);
    sub_10016F12C(v3[13], v3[14], 34);
    sub_10016F12C(v3[67], v3[68], 35);
    sub_10016F12C(v3[48], v3[49], 36);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

void *sub_10016C028@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v130 = sub_1000175B0(&qword_1002B7590);
  __chkstk_darwin(v130);
  sub_10001DAD0();
  memset(v135, 0, 64);
  v135[5] = 0u;
  LOBYTE(v135[6]) = 2;
  *(_OWORD *)((char *)&v135[6] + 8) = 0u;
  *(_OWORD *)((char *)&v135[7] + 8) = 0u;
  *(_OWORD *)((char *)&v135[8] + 8) = 0u;
  *(_OWORD *)((char *)&v135[9] + 8) = 0u;
  *(_OWORD *)((char *)&v135[10] + 8) = 0u;
  *(_OWORD *)((char *)&v135[11] + 8) = 0u;
  BYTE8(v135[12]) = 2;
  bzero(&v135[13], 0x90uLL);
  memset(&v135[25], 0, 128);
  LOBYTE(v135[33]) = 2;
  *(_OWORD *)((char *)&v135[33] + 8) = 0u;
  BYTE8(v135[34]) = 2;
  sub_10013381C(v136);
  uint64_t v137 = &v135[35];
  sub_1000390C8((uint64_t)v136, (uint64_t)&v135[35], &qword_1002AA7C0);
  uint64_t v6 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v131 = a1;
  sub_100019F58(a1, v6);
  unint64_t v7 = sub_10016D490();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for InAppBuyRequest.CodingKeys,  &type metadata for InAppBuyRequest.CodingKeys,  v7,  v6,  v5);
  if (v2)
  {
    int v17 = 0;
    int v18 = 0;
    int v19 = 0;
  }

  else
  {
    uint64_t v129 = a2;
    v133[0] = 0;
    uint64_t v8 = sub_10016F16C((uint64_t)v133, v130);
    uint64_t v10 = v9;
    *(void *)&v135[0] = v8;
    *((void *)&v135[0] + 1) = v9;
    sub_10016F25C(v9, 1);
    uint64_t v11 = sub_10016F16C((uint64_t)v133, v130);
    uint64_t v13 = v12;
    uint64_t v128 = v8;
    *(void *)&v135[31] = v11;
    *((void *)&v135[31] + 1) = v12;
    sub_10016F288(v12, 2);
    uint64_t v126 = v8;
    uint64_t v127 = v10;
    *(void *)&v135[1] = sub_10016F16C((uint64_t)v133, v130);
    *((void *)&v135[1] + 1) = v14;
    v133[0] = 3;
    uint64_t v15 = *(void *)&v135[1];
    uint64_t v16 = v14;
    swift_bridgeObjectRetain();
    uint64_t v123 = v15;
    uint64_t v124 = v16;
    *(void *)&v135[2] = sub_10016F16C((uint64_t)v133, v130);
    *((void *)&v135[2] + 1) = v21;
    v133[0] = 4;
    uint64_t v22 = *(void *)&v135[2];
    uint64_t v125 = v21;
    swift_bridgeObjectRetain();
    uint64_t v23 = sub_10016F16C((uint64_t)v133, v130);
    uint64_t v121 = v22;
    uint64_t v122 = v24;
    *(void *)&v135[3] = v23;
    *((void *)&v135[3] + 1) = v24;
    sub_10016F25C(v24, 5);
    uint64_t v25 = sub_10016F16C((uint64_t)v133, v130);
    uint64_t v119 = v23;
    uint64_t v120 = v26;
    *(void *)&v135[21] = v25;
    *((void *)&v135[21] + 1) = v26;
    sub_10016F288(v26, 6);
    uint64_t v27 = KeyedDecodingContainer.decode(_:forKey:)(v133, v130);
    uint64_t v117 = v23;
    uint64_t v118 = v28;
    uint64_t v29 = v27;
    *(void *)&v135[4] = v27;
    *((void *)&v135[4] + 1) = v28;
    sub_10016F25C(v28, 7);
    uint64_t v115 = sub_10016F16C((uint64_t)v133, v130);
    uint64_t v116 = v30;
    *(void *)&v135[5] = v115;
    *((void *)&v135[5] + 1) = v30;
    sub_10016F25C(v30, 8);
    uint64_t v31 = sub_10016F16C((uint64_t)v133, v130);
    uint64_t v113 = v13;
    uint64_t v33 = v31;
    *(void *)&v135[30] = v31;
    *((void *)&v135[30] + 1) = v32;
    LOBYTE(v132[0]) = 9;
    uint64_t v34 = v32;
    unint64_t v35 = sub_10016D4CC();
    uint64_t v114 = v34;
    sub_10001DBCC();
    sub_1000D948C( (uint64_t)&type metadata for FlexiblyDecodableBool,  (uint64_t)v132,  v130,  (uint64_t)&type metadata for FlexiblyDecodableBool,  v35);
    if (v35)
    {
      sub_10016F144();
      sub_10016F190();
      sub_10016F178();
      sub_10016F180();
      sub_10016F188();
      sub_10016F198();
      sub_10016F1A0();
      sub_10016F200();
      sub_10016F270();
      swift_bridgeObjectRelease();
      int v18 = 0;
      int v19 = 0;
      int v17 = 1;
    }

    else
    {
      char v36 = v133[0];
      LOBYTE(v135[33]) = v133[0];
      LOBYTE(v132[0]) = 10;
      sub_10016F234((uint64_t)&type metadata for FlexiblyDecodableBool);
      char v37 = v133[0];
      LOBYTE(v135[6]) = v133[0];
      v133[0] = 11;
      uint64_t v111 = sub_10016F158();
      uint64_t v112 = v38;
      *(void *)&v135[22] = v111;
      *((void *)&v135[22] + 1) = v38;
      sub_10016F1C0(v38, 12);
      uint64_t v109 = sub_10016F158();
      uint64_t v110 = v39;
      *(void *)&v135[23] = v109;
      *((void *)&v135[23] + 1) = v39;
      sub_10016F1C0(v39, 13);
      uint64_t v107 = sub_10016F158();
      uint64_t v108 = v40;
      *((void *)&v135[7] + 1) = v107;
      *(void *)&v135[8] = v40;
      sub_10016F1C0(v40, 14);
      uint64_t v105 = sub_10016F158();
      uint64_t v106 = v41;
      *((void *)&v135[8] + 1) = v105;
      *(void *)&v135[9] = v41;
      sub_10016F1C0(v41, 15);
      uint64_t v103 = sub_10016F158();
      uint64_t v104 = v42;
      *(void *)&v135[32] = v103;
      *((void *)&v135[32] + 1) = v42;
      sub_10016F1C0(v42, 16);
      uint64_t v101 = sub_10016F158();
      uint64_t v102 = v43;
      *(void *)&v135[25] = v101;
      *((void *)&v135[25] + 1) = v43;
      sub_10016F1C0(v43, 17);
      uint64_t v99 = sub_10016F158();
      uint64_t v100 = v44;
      *(void *)&v135[26] = v99;
      *((void *)&v135[26] + 1) = v44;
      sub_10016F1C0(v44, 18);
      uint64_t v97 = sub_10016F158();
      uint64_t v98 = v45;
      *(void *)&v135[27] = v97;
      *((void *)&v135[27] + 1) = v45;
      sub_10016F1C0(v45, 19);
      uint64_t v95 = sub_10016F158();
      uint64_t v96 = v46;
      *(void *)&v135[28] = v95;
      *((void *)&v135[28] + 1) = v46;
      sub_10016F1C0(v46, 20);
      uint64_t v93 = sub_10016F158();
      uint64_t v94 = v47;
      *(void *)&v135[29] = v93;
      *((void *)&v135[29] + 1) = v47;
      sub_10016F1C0(v47, 21);
      uint64_t v91 = sub_10016F158();
      uint64_t v92 = v48;
      *((void *)&v135[9] + 1) = v91;
      *(void *)&v135[10] = v48;
      sub_10016F1C0(v48, 22);
      uint64_t v89 = sub_10016F158();
      uint64_t v90 = v49;
      *((void *)&v135[10] + 1) = v89;
      *(void *)&v135[11] = v49;
      sub_10016F1C0(v49, 23);
      uint64_t v87 = sub_10016F158();
      uint64_t v88 = v50;
      *((void *)&v135[11] + 1) = v87;
      *(void *)&v135[12] = v50;
      LOBYTE(v132[0]) = 24;
      unint64_t v51 = sub_10016D508();
      sub_10001DBCC();
      sub_1000D948C( (uint64_t)&type metadata for PricingParameters,  (uint64_t)v132,  v130,  (uint64_t)&type metadata for PricingParameters,  v51);
      if (!v51)
      {
        char v84 = v133[0];
        BYTE8(v135[12]) = v133[0];
        v133[0] = 25;
        uint64_t v85 = sub_10016F158();
        uint64_t v86 = v52;
        *(void *)&v135[13] = v85;
        *((void *)&v135[13] + 1) = v52;
        sub_10016F1C0(v52, 26);
        uint64_t v82 = sub_10016F158();
        uint64_t v83 = v53;
        *(void *)&v135[14] = v82;
        *((void *)&v135[14] + 1) = v53;
        sub_10016F1C0(v53, 27);
        uint64_t v80 = sub_10016F158();
        uint64_t v81 = v54;
        *(void *)&v135[16] = v80;
        *((void *)&v135[16] + 1) = v54;
        sub_10016F1C0(v54, 28);
        uint64_t v78 = sub_10016F158();
        uint64_t v79 = v55;
        *(void *)&v135[17] = v78;
        *((void *)&v135[17] + 1) = v55;
        sub_10016F1C0(v55, 29);
        uint64_t v76 = sub_10016F158();
        uint64_t v77 = v56;
        *(void *)&v135[18] = v76;
        *((void *)&v135[18] + 1) = v56;
        sub_10016F1C0(v56, 30);
        uint64_t v74 = sub_10016F158();
        uint64_t v75 = v57;
        *(void *)&v135[19] = v74;
        *((void *)&v135[19] + 1) = v57;
        sub_10016F1C0(v57, 31);
        uint64_t v72 = sub_10016F158();
        uint64_t v73 = v58;
        *(void *)&v135[20] = v72;
        *((void *)&v135[20] + 1) = v58;
        sub_10016F1C0(v58, 32);
        uint64_t v70 = sub_10016F158();
        uint64_t v71 = v59;
        *(void *)&v135[15] = v70;
        *((void *)&v135[15] + 1) = v59;
        LOBYTE(v132[0]) = 33;
        swift_bridgeObjectRetain();
        sub_10016F234((uint64_t)&type metadata for FlexiblyDecodableBool);
        char v68 = v133[0];
        BYTE8(v135[34]) = v133[0];
        v133[0] = 34;
        uint64_t v69 = sub_10016F158();
        uint64_t v61 = v60;
        *((void *)&v135[6] + 1) = v69;
        *(void *)&v135[7] = v60;
        sub_10016F1C0(v60, 35);
        uint64_t v66 = sub_10016F158();
        uint64_t v67 = v62;
        *((void *)&v135[33] + 1) = v66;
        *(void *)&v135[34] = v62;
        char v134 = 36;
        swift_bridgeObjectRetain();
        uint64_t v65 = sub_10016F16C((uint64_t)&v134, v130);
        uint64_t v64 = v63;
        sub_10016F144();
        v132[0] = v128;
        v132[2] = v123;
        v132[4] = v121;
        v132[6] = v119;
        v132[8] = v29;
        v132[10] = v115;
        v132[11] = v116;
        *(void *)&v135[24] = v65;
        *((void *)&v135[24] + 1) = v64;
        v132[1] = v127;
        v132[3] = v124;
        v132[5] = v125;
        v132[7] = v122;
        v132[9] = v118;
        LOBYTE(v132[12]) = v37;
        v132[13] = v69;
        v132[14] = v61;
        v132[15] = v107;
        v132[16] = v108;
        v132[17] = v105;
        v132[18] = v106;
        v132[19] = v91;
        v132[20] = v92;
        v132[21] = v89;
        v132[22] = v90;
        v132[23] = v87;
        v132[24] = v88;
        LOBYTE(v132[25]) = v84;
        v132[26] = v85;
        v132[27] = v86;
        v132[28] = v82;
        v132[29] = v83;
        v132[30] = v70;
        v132[31] = v71;
        v132[32] = v80;
        v132[33] = v81;
        v132[34] = v78;
        v132[35] = v79;
        v132[36] = v76;
        v132[37] = v77;
        v132[38] = v74;
        v132[39] = v75;
        v132[40] = v72;
        v132[41] = v73;
        v132[42] = v117;
        v132[43] = v120;
        v132[44] = v111;
        v132[45] = v112;
        v132[46] = v109;
        v132[47] = v110;
        v132[48] = v65;
        v132[49] = v64;
        v132[50] = v101;
        v132[51] = v102;
        v132[52] = v99;
        v132[53] = v100;
        v132[54] = v97;
        v132[55] = v98;
        v132[56] = v95;
        v132[57] = v96;
        v132[58] = v93;
        v132[59] = v94;
        v132[60] = v33;
        v132[61] = v114;
        v132[62] = v126;
        v132[63] = v113;
        v132[64] = v103;
        v132[65] = v104;
        LOBYTE(v132[66]) = v36;
        v132[67] = v66;
        v132[68] = v67;
        LOBYTE(v132[69]) = v68;
        sub_1000390C8((uint64_t)v136, (uint64_t)&v132[70], &qword_1002AA7C0);
        swift_bridgeObjectRetain();
        sub_1000A2B6C((uint64_t)v132);
        swift_bridgeObjectRelease();
        sub_10016F178();
        sub_10016F180();
        sub_10016F188();
        sub_10016F198();
        sub_10016F1A0();
        swift_bridgeObjectRelease();
        sub_10016F1B8();
        sub_10016F1C8();
        swift_bridgeObjectRelease();
        sub_1000C7588();
        sub_1000C768C();
        sub_100075C98();
        sub_10016F268();
        swift_bridgeObjectRelease();
        sub_1000C7684();
        sub_1000C7760();
        sub_1000C7968();
        sub_1000A7818();
        swift_bridgeObjectRelease();
        sub_10016F200();
        sub_10016F208();
        sub_10016F254();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10016F278();
        sub_10016F2A0();
        sub_10016F2E8();
        swift_bridgeObjectRelease();
        sub_10016F270();
        sub_10016F298();
        sub_100023EF4();
        swift_bridgeObjectRelease();
        sub_100019F7C(v131);
        memcpy(v133, v135, 0x369uLL);
        sub_1000A343C((uint64_t)v133);
        return memcpy(v129, v132, 0x369uLL);
      }

      sub_10016F144();
      sub_10016F190();
      sub_10016F178();
      sub_10016F180();
      sub_10016F188();
      sub_10016F198();
      sub_10016F1A0();
      sub_10016F1B8();
      sub_10016F1C8();
      sub_100075BB8();
      sub_1000C7588();
      swift_bridgeObjectRelease();
      sub_10016F200();
      sub_10016F208();
      sub_10016F254();
      sub_10016F280();
      sub_10016F278();
      sub_10016F2A0();
      sub_10016F2E8();
      swift_bridgeObjectRelease();
      sub_10016F270();
      sub_10016F298();
      swift_bridgeObjectRelease();
      int v17 = 1;
      int v18 = 1;
      int v19 = 1;
    }
  }

  sub_100019F7C(v131);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v17) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v18) {
    swift_bridgeObjectRelease();
  }
  if (v19) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000390C8((uint64_t)v137, (uint64_t)v133, &qword_1002AA7C0);
  return (void *)sub_1000A3B50((uint64_t)v133);
}

void sub_10016D2D8(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_10016D2E4()
{
}

uint64_t sub_10016D2EC(uint64_t a1)
{
  return sub_1000B2158(a1, *v1);
}

void sub_10016D2F4(uint64_t a1)
{
}

uint64_t sub_10016D2FC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10016B764(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_10016D328@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10016B7C0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10016D350()
{
  return sub_10016BB90(*v0);
}

uint64_t sub_10016D358@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10016B7B4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10016D37C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_10016B7B8();
  *a1 = result;
  return result;
}

uint64_t sub_10016D3A0(uint64_t a1)
{
  unint64_t v2 = sub_10016D490();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10016D3C8(uint64_t a1)
{
  unint64_t v2 = sub_10016D490();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10016D3F0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10016C028(a1, v5);
  if (!v2) {
    return memcpy(a2, v5, 0x369uLL);
  }
  return result;
}

uint64_t sub_10016D440(void *a1)
{
  return sub_10016BB94(a1);
}

unint64_t sub_10016D490()
{
  unint64_t result = qword_1002B7598;
  if (!qword_1002B7598)
  {
    unint64_t result = swift_getWitnessTable(byte_1002065E0, &type metadata for InAppBuyRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7598);
  }

  return result;
}

unint64_t sub_10016D4CC()
{
  unint64_t result = qword_1002B75A0;
  if (!qword_1002B75A0)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FEF78, &type metadata for FlexiblyDecodableBool);
    atomic_store(result, (unint64_t *)&qword_1002B75A0);
  }

  return result;
}

unint64_t sub_10016D508()
{
  unint64_t result = qword_1002B75A8;
  if (!qword_1002B75A8)
  {
    unint64_t result = swift_getWitnessTable("1Y\b", &type metadata for PricingParameters);
    atomic_store(result, (unint64_t *)&qword_1002B75A8);
  }

  return result;
}

unint64_t sub_10016D544()
{
  unint64_t result = qword_1002B75B8;
  if (!qword_1002B75B8)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FEF50, &type metadata for FlexiblyDecodableBool);
    atomic_store(result, (unint64_t *)&qword_1002B75B8);
  }

  return result;
}

unint64_t sub_10016D580()
{
  unint64_t result = qword_1002B75C8;
  if (!qword_1002B75C8)
  {
    unint64_t result = swift_getWitnessTable("IY\b", &type metadata for PricingParameters);
    atomic_store(result, (unint64_t *)&qword_1002B75C8);
  }

  return result;
}

uint64_t sub_10016D5BC()
{
  uint64_t v1 = v0[75];
  if (v1 != 1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[78]);
    swift_bridgeObjectRelease(v0[80]);
    swift_bridgeObjectRelease(v0[82]);
    swift_bridgeObjectRelease(v0[84]);
    swift_bridgeObjectRelease(v0[86]);
    swift_bridgeObjectRelease(v0[88]);
    swift_bridgeObjectRelease(v0[90]);
    swift_bridgeObjectRelease(v0[91]);
    swift_bridgeObjectRelease(v0[93]);
    swift_bridgeObjectRelease(v0[96]);
    swift_bridgeObjectRelease(v0[100]);
    swift_bridgeObjectRelease(v0[102]);
    swift_bridgeObjectRelease(v0[104]);
    swift_bridgeObjectRelease(v0[106]);
    swift_bridgeObjectRelease(v0[108]);
    swift_bridgeObjectRelease(v0[110]);
  }

  return swift_deallocObject(v0, 889LL, 7LL);
}

uint64_t sub_10016D770(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002AC060);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for PricingParameters(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10016D804 + 4 * byte_10020632A[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10016D838 + 4 * byte_100206325[v4]))();
}

uint64_t sub_10016D838(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016D840(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10016D848LL);
  }
  return result;
}

uint64_t sub_10016D854(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10016D85CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10016D860(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016D868(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PricingParameters()
{
  return &type metadata for PricingParameters;
}

uint64_t getEnumTagSinglePayload for InAppBuyRequest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xDC)
  {
    if (a2 + 36 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 36) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 37;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for InAppBuyRequest.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 36 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 36) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xDC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xDB) {
    return ((uint64_t (*)(void))((char *)&loc_10016D958 + 4 * byte_100206334[v4]))();
  }
  *a1 = a2 + 36;
  return ((uint64_t (*)(void))((char *)sub_10016D98C + 4 * byte_10020632F[v4]))();
}

uint64_t sub_10016D98C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016D994(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10016D99CLL);
  }
  return result;
}

uint64_t sub_10016D9A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10016D9B0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 36;
  return result;
}

uint64_t sub_10016D9B4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016D9BC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InAppBuyRequest.CodingKeys()
{
  return &type metadata for InAppBuyRequest.CodingKeys;
}

uint64_t destroy for InAppBuyRequest(void *a1)
{
  uint64_t result = a1[73];
  if (result != 1)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[76]);
    swift_bridgeObjectRelease(a1[78]);
    swift_bridgeObjectRelease(a1[80]);
    swift_bridgeObjectRelease(a1[82]);
    swift_bridgeObjectRelease(a1[84]);
    swift_bridgeObjectRelease(a1[86]);
    swift_bridgeObjectRelease(a1[88]);
    swift_bridgeObjectRelease(a1[89]);
    swift_bridgeObjectRelease(a1[91]);
    swift_bridgeObjectRelease(a1[94]);
    swift_bridgeObjectRelease(a1[98]);
    swift_bridgeObjectRelease(a1[100]);
    swift_bridgeObjectRelease(a1[102]);
    swift_bridgeObjectRelease(a1[104]);
    swift_bridgeObjectRelease(a1[106]);
    return swift_bridgeObjectRelease(a1[108]);
  }

  return result;
}

uint64_t initializeWithCopy for InAppBuyRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 8sub_10019B2E8(v0, 0) = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  uint64_t v9 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 128);
  *(void *)(a1 + 12sub_10019B2E8(v0, 0) = *(void *)(a2 + 120);
  uint64_t v11 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  uint64_t v12 = *(void *)(a2 + 160);
  *(void *)(a1 + 15sub_100019F7C(v0 + 2) = *(void *)(a2 + 152);
  uint64_t v63 = *(void *)(a2 + 176);
  uint64_t v65 = v12;
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  uint64_t v13 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_BYTE *)(a1 + 20sub_10019B2E8(v0, 0) = *(_BYTE *)(a2 + 200);
  uint64_t v59 = *(void *)(a2 + 216);
  uint64_t v61 = v13;
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  uint64_t v57 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  uint64_t v14 = *(void *)(a2 + 248);
  *(void *)(a1 + 24sub_10019B2E8(v0, 0) = *(void *)(a2 + 240);
  uint64_t v33 = v14;
  uint64_t v34 = *(void *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  uint64_t v15 = *(void *)(a2 + 280);
  *(void *)(a1 + 27sub_100019F7C(v0 + 2) = *(void *)(a2 + 272);
  uint64_t v35 = v15;
  uint64_t v36 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  uint64_t v17 = *(void *)(a2 + 304);
  uint64_t v16 = *(void *)(a2 + 312);
  *(void *)(a1 + 304) = v17;
  uint64_t v37 = v16;
  uint64_t v38 = *(void *)(a2 + 328);
  *(void *)(a1 + 32sub_10019B2E8(v0, 0) = *(void *)(a2 + 320);
  uint64_t v18 = *(void *)(a2 + 344);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  uint64_t v39 = v18;
  uint64_t v40 = *(void *)(a2 + 360);
  *(void *)(a1 + 35sub_100019F7C(v0 + 2) = *(void *)(a2 + 352);
  uint64_t v19 = *(void *)(a2 + 376);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  uint64_t v41 = v19;
  uint64_t v42 = *(void *)(a2 + 392);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  uint64_t v20 = *(void *)(a2 + 408);
  *(void *)(a1 + 40sub_10019B2E8(v0, 0) = *(void *)(a2 + 400);
  uint64_t v21 = *(void *)(a2 + 424);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  uint64_t v22 = *(void *)(a2 + 440);
  *(void *)(a1 + 43sub_100019F7C(v0 + 2) = *(void *)(a2 + 432);
  uint64_t v43 = v20;
  uint64_t v44 = *(void *)(a2 + 456);
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  uint64_t v45 = *(void *)(a2 + 472);
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  uint64_t v46 = v22;
  uint64_t v47 = *(void *)(a2 + 488);
  *(void *)(a1 + 48sub_10019B2E8(v0, 0) = *(void *)(a2 + 480);
  uint64_t v48 = *(void *)(a2 + 504);
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  *(void *)(a1 + 51sub_100019F7C(v0 + 2) = *(void *)(a2 + 512);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  *(_BYTE *)(a1 + 55sub_100019F7C(v0 + 2) = *(_BYTE *)(a2 + 552);
  uint64_t v23 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v23;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 4sub_10019B2E8(v0, 0) = v5;
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 7sub_100019F7C(v0 + 2) = v7;
  *(void *)(a1 + 88) = v8;
  *(void *)(a1 + 11sub_100019F7C(v0 + 2) = v9;
  *(void *)(a1 + 128) = v10;
  *(void *)(a1 + 144) = v11;
  *(void *)(a1 + 16sub_10019B2E8(v0, 0) = v65;
  *(void *)(a1 + 176) = v63;
  *(void *)(a1 + 19sub_100019F7C(v0 + 2) = v13;
  *(void *)(a1 + 216) = v59;
  *(void *)(a1 + 23sub_100019F7C(v0 + 2) = v57;
  *(void *)(a1 + 248) = v14;
  *(void *)(a1 + 264) = v34;
  *(void *)(a1 + 28sub_10019B2E8(v0, 0) = v15;
  *(void *)(a1 + 296) = v36;
  *(void *)(a1 + 31sub_100019F7C(v0 + 2) = v16;
  *(void *)(a1 + 328) = v38;
  *(void *)(a1 + 344) = v18;
  *(void *)(a1 + 36sub_10019B2E8(v0, 0) = v40;
  *(void *)(a1 + 376) = v19;
  *(void *)(a1 + 39sub_100019F7C(v0 + 2) = v42;
  *(void *)(a1 + 408) = v20;
  *(void *)(a1 + 424) = v21;
  *(void *)(a1 + 44sub_10019B2E8(v0, 0) = v22;
  *(void *)(a1 + 456) = v44;
  *(void *)(a1 + 47sub_100019F7C(v0 + 2) = v45;
  *(void *)(a1 + 488) = v47;
  *(void *)(a1 + 504) = v48;
  uint64_t v49 = *(void *)(a2 + 520);
  *(void *)(a1 + 52sub_10019B2E8(v0, 0) = v49;
  uint64_t v50 = *(void *)(a2 + 544);
  *(void *)(a1 + 544) = v50;
  uint64_t v53 = (void *)(a2 + 560);
  uint64_t v55 = (void *)(a1 + 560);
  uint64_t v52 = *(void *)(a2 + 584);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRetain(v63);
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRetain(v50);
  if (v52 == 1)
  {
    memcpy(v55, v53, 0x139uLL);
  }

  else
  {
    *uint64_t v55 = *v53;
    *(_BYTE *)(a1 + 568) = *(_BYTE *)(a2 + 568);
    *(void *)(a1 + 576) = *(void *)(a2 + 576);
    *(void *)(a1 + 584) = v52;
    *(void *)(a1 + 59sub_100019F7C(v0 + 2) = *(void *)(a2 + 592);
    *(_BYTE *)(a1 + 60sub_10019B2E8(v0, 0) = *(_BYTE *)(a2 + 600);
    uint64_t v62 = *(void *)(a2 + 608);
    *(void *)(a1 + 608) = v62;
    *(void *)(a1 + 616) = *(void *)(a2 + 616);
    uint64_t v60 = *(void *)(a2 + 624);
    *(void *)(a1 + 624) = v60;
    *(void *)(a1 + 63sub_100019F7C(v0 + 2) = *(void *)(a2 + 632);
    uint64_t v58 = *(void *)(a2 + 640);
    *(void *)(a1 + 64sub_10019B2E8(v0, 0) = v58;
    *(void *)(a1 + 648) = *(void *)(a2 + 648);
    uint64_t v56 = *(void *)(a2 + 656);
    *(void *)(a1 + 656) = v56;
    *(void *)(a1 + 664) = *(void *)(a2 + 664);
    uint64_t v24 = *(void *)(a2 + 672);
    *(void *)(a1 + 67sub_100019F7C(v0 + 2) = v24;
    *(void *)(a1 + 68sub_10019B2E8(v0, 0) = *(void *)(a2 + 680);
    uint64_t v25 = *(void *)(a2 + 688);
    *(void *)(a1 + 688) = v25;
    *(void *)(a1 + 696) = *(void *)(a2 + 696);
    uint64_t v54 = *(void *)(a2 + 704);
    *(void *)(a1 + 704) = v54;
    uint64_t v66 = *(void *)(a2 + 712);
    *(void *)(a1 + 71sub_100019F7C(v0 + 2) = v66;
    *(void *)(a1 + 72sub_10019B2E8(v0, 0) = *(void *)(a2 + 720);
    uint64_t v64 = *(void *)(a2 + 728);
    *(void *)(a1 + 728) = v64;
    *(_WORD *)(a1 + 736) = *(_WORD *)(a2 + 736);
    *(void *)(a1 + 744) = *(void *)(a2 + 744);
    uint64_t v51 = *(void *)(a2 + 752);
    *(void *)(a1 + 75sub_100019F7C(v0 + 2) = v51;
    *(_BYTE *)(a1 + 768) = *(_BYTE *)(a2 + 768);
    *(void *)(a1 + 76sub_10019B2E8(v0, 0) = *(void *)(a2 + 760);
    *(void *)(a1 + 776) = *(void *)(a2 + 776);
    uint64_t v26 = *(void *)(a2 + 784);
    *(void *)(a1 + 784) = v26;
    *(void *)(a1 + 79sub_100019F7C(v0 + 2) = *(void *)(a2 + 792);
    uint64_t v27 = *(void *)(a2 + 800);
    *(void *)(a1 + 80sub_10019B2E8(v0, 0) = v27;
    *(void *)(a1 + 808) = *(void *)(a2 + 808);
    uint64_t v28 = *(void *)(a2 + 816);
    *(void *)(a1 + 816) = v28;
    *(void *)(a1 + 824) = *(void *)(a2 + 824);
    uint64_t v29 = *(void *)(a2 + 832);
    *(void *)(a1 + 83sub_100019F7C(v0 + 2) = v29;
    *(void *)(a1 + 84sub_10019B2E8(v0, 0) = *(void *)(a2 + 840);
    uint64_t v30 = *(void *)(a2 + 848);
    *(void *)(a1 + 848) = v30;
    *(void *)(a1 + 856) = *(void *)(a2 + 856);
    uint64_t v31 = *(void *)(a2 + 864);
    *(void *)(a1 + 864) = v31;
    *(_BYTE *)(a1 + 87sub_100019F7C(v0 + 2) = *(_BYTE *)(a2 + 872);
    swift_bridgeObjectRetain(v52);
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRetain(v60);
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v54);
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v64);
    swift_bridgeObjectRetain(v51);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
  }

  return a1;
}

uint64_t assignWithCopy for InAppBuyRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10019B2E8(v0, 0) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 7sub_100019F7C(v0 + 2) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8sub_10019B2E8(v0, 0) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 11sub_100019F7C(v0 + 2) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 12sub_10019B2E8(v0, 0) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 15sub_100019F7C(v0 + 2) = *(void *)(a2 + 152);
  *(void *)(a1 + 16sub_10019B2E8(v0, 0) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 19sub_100019F7C(v0 + 2) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 20sub_10019B2E8(v0, 0) = *(_BYTE *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 23sub_100019F7C(v0 + 2) = *(void *)(a2 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24sub_10019B2E8(v0, 0) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 27sub_100019F7C(v0 + 2) = *(void *)(a2 + 272);
  *(void *)(a1 + 28sub_10019B2E8(v0, 0) = *(void *)(a2 + 280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 31sub_100019F7C(v0 + 2) = *(void *)(a2 + 312);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32sub_10019B2E8(v0, 0) = *(void *)(a2 + 320);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 35sub_100019F7C(v0 + 2) = *(void *)(a2 + 352);
  *(void *)(a1 + 36sub_10019B2E8(v0, 0) = *(void *)(a2 + 360);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(void *)(a1 + 39sub_100019F7C(v0 + 2) = *(void *)(a2 + 392);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40sub_10019B2E8(v0, 0) = *(void *)(a2 + 400);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 43sub_100019F7C(v0 + 2) = *(void *)(a2 + 432);
  *(void *)(a1 + 44sub_10019B2E8(v0, 0) = *(void *)(a2 + 440);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  *(void *)(a1 + 47sub_100019F7C(v0 + 2) = *(void *)(a2 + 472);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48sub_10019B2E8(v0, 0) = *(void *)(a2 + 480);
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 51sub_100019F7C(v0 + 2) = *(void *)(a2 + 512);
  *(void *)(a1 + 52sub_10019B2E8(v0, 0) = *(void *)(a2 + 520);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 55sub_100019F7C(v0 + 2) = *(_BYTE *)(a2 + 552);
  uint64_t v4 = (void *)(a1 + 560);
  uint64_t v5 = (uint64_t *)(a2 + 560);
  uint64_t v6 = *(void *)(a2 + 584);
  if (*(void *)(a1 + 584) != 1LL)
  {
    if (v6 != 1)
    {
      uint64_t v10 = *v5;
      *(_BYTE *)(a1 + 568) = *(_BYTE *)(a2 + 568);
      *uint64_t v4 = v10;
      *(void *)(a1 + 576) = *(void *)(a2 + 576);
      *(void *)(a1 + 584) = *(void *)(a2 + 584);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void *)(a2 + 592);
      *(_BYTE *)(a1 + 60sub_10019B2E8(v0, 0) = *(_BYTE *)(a2 + 600);
      *(void *)(a1 + 59sub_100019F7C(v0 + 2) = v11;
      *(void *)(a1 + 608) = *(void *)(a2 + 608);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 616) = *(void *)(a2 + 616);
      *(void *)(a1 + 624) = *(void *)(a2 + 624);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 63sub_100019F7C(v0 + 2) = *(void *)(a2 + 632);
      *(void *)(a1 + 64sub_10019B2E8(v0, 0) = *(void *)(a2 + 640);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 648) = *(void *)(a2 + 648);
      *(void *)(a1 + 656) = *(void *)(a2 + 656);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 664) = *(void *)(a2 + 664);
      *(void *)(a1 + 67sub_100019F7C(v0 + 2) = *(void *)(a2 + 672);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 68sub_10019B2E8(v0, 0) = *(void *)(a2 + 680);
      *(void *)(a1 + 688) = *(void *)(a2 + 688);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 696) = *(void *)(a2 + 696);
      *(void *)(a1 + 704) = *(void *)(a2 + 704);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 71sub_100019F7C(v0 + 2) = *(void *)(a2 + 712);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 72sub_10019B2E8(v0, 0) = *(void *)(a2 + 720);
      *(void *)(a1 + 728) = *(void *)(a2 + 728);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 736) = *(_BYTE *)(a2 + 736);
      *(_BYTE *)(a1 + 737) = *(_BYTE *)(a2 + 737);
      *(void *)(a1 + 744) = *(void *)(a2 + 744);
      *(void *)(a1 + 75sub_100019F7C(v0 + 2) = *(void *)(a2 + 752);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)(a2 + 760);
      *(_BYTE *)(a1 + 768) = *(_BYTE *)(a2 + 768);
      *(void *)(a1 + 76sub_10019B2E8(v0, 0) = v12;
      *(void *)(a1 + 776) = *(void *)(a2 + 776);
      *(void *)(a1 + 784) = *(void *)(a2 + 784);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 79sub_100019F7C(v0 + 2) = *(void *)(a2 + 792);
      *(void *)(a1 + 80sub_10019B2E8(v0, 0) = *(void *)(a2 + 800);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 808) = *(void *)(a2 + 808);
      *(void *)(a1 + 816) = *(void *)(a2 + 816);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 824) = *(void *)(a2 + 824);
      *(void *)(a1 + 83sub_100019F7C(v0 + 2) = *(void *)(a2 + 832);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 84sub_10019B2E8(v0, 0) = *(void *)(a2 + 840);
      *(void *)(a1 + 848) = *(void *)(a2 + 848);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 856) = *(void *)(a2 + 856);
      *(void *)(a1 + 864) = *(void *)(a2 + 864);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 87sub_100019F7C(v0 + 2) = *(_BYTE *)(a2 + 872);
      return a1;
    }

    sub_10003A024((void *)(a1 + 560));
    goto LABEL_6;
  }

  if (v6 == 1)
  {
LABEL_6:
    memcpy((void *)(a1 + 560), (const void *)(a2 + 560), 0x139uLL);
    return a1;
  }

  uint64_t v7 = *v5;
  *(_BYTE *)(a1 + 568) = *(_BYTE *)(a2 + 568);
  *uint64_t v4 = v7;
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  uint64_t v8 = *(void *)(a2 + 592);
  *(_BYTE *)(a1 + 60sub_10019B2E8(v0, 0) = *(_BYTE *)(a2 + 600);
  *(void *)(a1 + 59sub_100019F7C(v0 + 2) = v8;
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  *(void *)(a1 + 63sub_100019F7C(v0 + 2) = *(void *)(a2 + 632);
  *(void *)(a1 + 64sub_10019B2E8(v0, 0) = *(void *)(a2 + 640);
  *(void *)(a1 + 648) = *(void *)(a2 + 648);
  *(void *)(a1 + 656) = *(void *)(a2 + 656);
  *(void *)(a1 + 664) = *(void *)(a2 + 664);
  *(void *)(a1 + 67sub_100019F7C(v0 + 2) = *(void *)(a2 + 672);
  *(void *)(a1 + 68sub_10019B2E8(v0, 0) = *(void *)(a2 + 680);
  *(void *)(a1 + 688) = *(void *)(a2 + 688);
  *(void *)(a1 + 696) = *(void *)(a2 + 696);
  *(void *)(a1 + 704) = *(void *)(a2 + 704);
  *(void *)(a1 + 71sub_100019F7C(v0 + 2) = *(void *)(a2 + 712);
  *(void *)(a1 + 72sub_10019B2E8(v0, 0) = *(void *)(a2 + 720);
  *(void *)(a1 + 728) = *(void *)(a2 + 728);
  *(_BYTE *)(a1 + 736) = *(_BYTE *)(a2 + 736);
  *(_BYTE *)(a1 + 737) = *(_BYTE *)(a2 + 737);
  *(void *)(a1 + 744) = *(void *)(a2 + 744);
  *(void *)(a1 + 75sub_100019F7C(v0 + 2) = *(void *)(a2 + 752);
  uint64_t v9 = *(void *)(a2 + 760);
  *(_BYTE *)(a1 + 768) = *(_BYTE *)(a2 + 768);
  *(void *)(a1 + 76sub_10019B2E8(v0, 0) = v9;
  *(void *)(a1 + 776) = *(void *)(a2 + 776);
  *(void *)(a1 + 784) = *(void *)(a2 + 784);
  *(void *)(a1 + 79sub_100019F7C(v0 + 2) = *(void *)(a2 + 792);
  *(void *)(a1 + 80sub_10019B2E8(v0, 0) = *(void *)(a2 + 800);
  *(void *)(a1 + 808) = *(void *)(a2 + 808);
  *(void *)(a1 + 816) = *(void *)(a2 + 816);
  *(void *)(a1 + 824) = *(void *)(a2 + 824);
  *(void *)(a1 + 83sub_100019F7C(v0 + 2) = *(void *)(a2 + 832);
  *(void *)(a1 + 84sub_10019B2E8(v0, 0) = *(void *)(a2 + 840);
  *(void *)(a1 + 848) = *(void *)(a2 + 848);
  *(void *)(a1 + 856) = *(void *)(a2 + 856);
  *(void *)(a1 + 864) = *(void *)(a2 + 864);
  *(_BYTE *)(a1 + 87sub_100019F7C(v0 + 2) = *(_BYTE *)(a2 + 872);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *initializeWithTake for InAppBuyRequest(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x369uLL);
}

uint64_t assignWithTake for InAppBuyRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10019B2E8(v0, 0) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 7sub_100019F7C(v0 + 2) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 8sub_10019B2E8(v0, 0) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  uint64_t v10 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 11sub_100019F7C(v0 + 2) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 128);
  *(void *)(a1 + 12sub_10019B2E8(v0, 0) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 160);
  *(void *)(a1 + 15sub_100019F7C(v0 + 2) = *(void *)(a2 + 152);
  *(void *)(a1 + 16sub_10019B2E8(v0, 0) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 19sub_100019F7C(v0 + 2) = v15;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 20sub_10019B2E8(v0, 0) = *(_BYTE *)(a2 + 200);
  uint64_t v16 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v16;
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 23sub_100019F7C(v0 + 2) = v17;
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(a2 + 248);
  *(void *)(a1 + 24sub_10019B2E8(v0, 0) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v18;
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = v19;
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(a2 + 280);
  *(void *)(a1 + 27sub_100019F7C(v0 + 2) = *(void *)(a2 + 272);
  *(void *)(a1 + 28sub_10019B2E8(v0, 0) = v20;
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v21;
  swift_bridgeObjectRelease();
  uint64_t v22 = *(void *)(a2 + 312);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 31sub_100019F7C(v0 + 2) = v22;
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(a2 + 328);
  *(void *)(a1 + 32sub_10019B2E8(v0, 0) = *(void *)(a2 + 320);
  *(void *)(a1 + 328) = v23;
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(a2 + 344);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 344) = v24;
  swift_bridgeObjectRelease();
  uint64_t v25 = *(void *)(a2 + 360);
  *(void *)(a1 + 35sub_100019F7C(v0 + 2) = *(void *)(a2 + 352);
  *(void *)(a1 + 36sub_10019B2E8(v0, 0) = v25;
  swift_bridgeObjectRelease();
  uint64_t v26 = *(void *)(a2 + 376);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a1 + 376) = v26;
  swift_bridgeObjectRelease();
  uint64_t v27 = *(void *)(a2 + 392);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(void *)(a1 + 39sub_100019F7C(v0 + 2) = v27;
  swift_bridgeObjectRelease();
  uint64_t v28 = *(void *)(a2 + 408);
  *(void *)(a1 + 40sub_10019B2E8(v0, 0) = *(void *)(a2 + 400);
  *(void *)(a1 + 408) = v28;
  swift_bridgeObjectRelease();
  uint64_t v29 = *(void *)(a2 + 424);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(void *)(a1 + 424) = v29;
  swift_bridgeObjectRelease();
  uint64_t v30 = *(void *)(a2 + 440);
  *(void *)(a1 + 43sub_100019F7C(v0 + 2) = *(void *)(a2 + 432);
  *(void *)(a1 + 44sub_10019B2E8(v0, 0) = v30;
  swift_bridgeObjectRelease();
  uint64_t v31 = *(void *)(a2 + 456);
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  *(void *)(a1 + 456) = v31;
  swift_bridgeObjectRelease();
  uint64_t v32 = *(void *)(a2 + 472);
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  *(void *)(a1 + 47sub_100019F7C(v0 + 2) = v32;
  swift_bridgeObjectRelease();
  uint64_t v33 = *(void *)(a2 + 488);
  *(void *)(a1 + 48sub_10019B2E8(v0, 0) = *(void *)(a2 + 480);
  *(void *)(a1 + 488) = v33;
  swift_bridgeObjectRelease();
  uint64_t v34 = *(void *)(a2 + 504);
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  *(void *)(a1 + 504) = v34;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 51sub_100019F7C(v0 + 2) = *(void *)(a2 + 512);
  *(void *)(a1 + 52sub_10019B2E8(v0, 0) = *(void *)(a2 + 520);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 55sub_100019F7C(v0 + 2) = *(_BYTE *)(a2 + 552);
  if (*(void *)(a1 + 584) != 1LL)
  {
    uint64_t v35 = *(void *)(a2 + 584);
    if (v35 != 1)
    {
      *(void *)(a1 + 56sub_10019B2E8(v0, 0) = *(void *)(a2 + 560);
      *(_BYTE *)(a1 + 568) = *(_BYTE *)(a2 + 568);
      *(void *)(a1 + 576) = *(void *)(a2 + 576);
      *(void *)(a1 + 584) = v35;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 59sub_100019F7C(v0 + 2) = *(void *)(a2 + 592);
      *(_BYTE *)(a1 + 60sub_10019B2E8(v0, 0) = *(_BYTE *)(a2 + 600);
      *(void *)(a1 + 608) = *(void *)(a2 + 608);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 616) = *(void *)(a2 + 616);
      *(void *)(a1 + 624) = *(void *)(a2 + 624);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 63sub_100019F7C(v0 + 2) = *(void *)(a2 + 632);
      *(void *)(a1 + 64sub_10019B2E8(v0, 0) = *(void *)(a2 + 640);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 648) = *(void *)(a2 + 648);
      *(void *)(a1 + 656) = *(void *)(a2 + 656);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 664) = *(void *)(a2 + 664);
      *(void *)(a1 + 67sub_100019F7C(v0 + 2) = *(void *)(a2 + 672);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 68sub_10019B2E8(v0, 0) = *(void *)(a2 + 680);
      *(void *)(a1 + 688) = *(void *)(a2 + 688);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 696) = *(void *)(a2 + 696);
      *(void *)(a1 + 704) = *(void *)(a2 + 704);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 71sub_100019F7C(v0 + 2) = *(void *)(a2 + 712);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 72sub_10019B2E8(v0, 0) = *(void *)(a2 + 720);
      *(void *)(a1 + 728) = *(void *)(a2 + 728);
      swift_bridgeObjectRelease();
      *(_WORD *)(a1 + 736) = *(_WORD *)(a2 + 736);
      *(void *)(a1 + 744) = *(void *)(a2 + 744);
      *(void *)(a1 + 75sub_100019F7C(v0 + 2) = *(void *)(a2 + 752);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 76sub_10019B2E8(v0, 0) = *(void *)(a2 + 760);
      *(_BYTE *)(a1 + 768) = *(_BYTE *)(a2 + 768);
      *(void *)(a1 + 776) = *(void *)(a2 + 776);
      *(void *)(a1 + 784) = *(void *)(a2 + 784);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 79sub_100019F7C(v0 + 2) = *(void *)(a2 + 792);
      *(void *)(a1 + 80sub_10019B2E8(v0, 0) = *(void *)(a2 + 800);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 808) = *(void *)(a2 + 808);
      *(void *)(a1 + 816) = *(void *)(a2 + 816);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 824) = *(void *)(a2 + 824);
      *(void *)(a1 + 83sub_100019F7C(v0 + 2) = *(void *)(a2 + 832);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 84sub_10019B2E8(v0, 0) = *(void *)(a2 + 840);
      *(void *)(a1 + 848) = *(void *)(a2 + 848);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 856) = *(void *)(a2 + 856);
      *(void *)(a1 + 864) = *(void *)(a2 + 864);
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 87sub_100019F7C(v0 + 2) = *(_BYTE *)(a2 + 872);
      return a1;
    }

    sub_10003A024((void *)(a1 + 560));
  }

  memcpy((void *)(a1 + 560), (const void *)(a2 + 560), 0x139uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for InAppBuyRequest(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 873))
    {
      LODWORD(v7(v1, v0, 2LL, v3, v6, v5, v4, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 72);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v7(v1, v0, 2LL, v3, v6, v5, v4, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v7(v1, v0, 2LL, v3, v6, v5, v4, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InAppBuyRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 23sub_100019F7C(v0 + 2) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 20sub_10019B2E8(v0, 0) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 15sub_100019F7C(v0 + 2) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12sub_10019B2E8(v0, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7sub_100019F7C(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4sub_10019B2E8(v0, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 87sub_100019F7C(v0 + 2) = 0;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 84sub_10019B2E8(v0, 0) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 79sub_100019F7C(v0 + 2) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 76sub_10019B2E8(v0, 0) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 71sub_100019F7C(v0 + 2) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 68sub_10019B2E8(v0, 0) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 63sub_100019F7C(v0 + 2) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 60sub_10019B2E8(v0, 0) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 55sub_100019F7C(v0 + 2) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 52sub_10019B2E8(v0, 0) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 47sub_100019F7C(v0 + 2) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 44sub_10019B2E8(v0, 0) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 39sub_100019F7C(v0 + 2) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 36sub_10019B2E8(v0, 0) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 31sub_100019F7C(v0 + 2) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 28sub_10019B2E8(v0, 0) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 873) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 7sub_100019F7C(v0 + 2) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 873) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for InAppBuyRequest()
{
  return &type metadata for InAppBuyRequest;
}

unint64_t sub_10016EFF4()
{
  unint64_t result = qword_1002B75D0;
  if (!qword_1002B75D0)
  {
    unint64_t result = swift_getWitnessTable(byte_1002064C8, &type metadata for InAppBuyRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B75D0);
  }

  return result;
}

unint64_t sub_10016F034()
{
  unint64_t result = qword_1002B75D8;
  if (!qword_1002B75D8)
  {
    unint64_t result = swift_getWitnessTable("\tZ\b", &type metadata for PricingParameters);
    atomic_store(result, (unint64_t *)&qword_1002B75D8);
  }

  return result;
}

unint64_t sub_10016F074()
{
  unint64_t result = qword_1002B75E0;
  if (!qword_1002B75E0)
  {
    unint64_t result = swift_getWitnessTable("\t[\b", &type metadata for InAppBuyRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B75E0);
  }

  return result;
}

unint64_t sub_10016F0B4()
{
  unint64_t result = qword_1002B75E8;
  if (!qword_1002B75E8)
  {
    unint64_t result = swift_getWitnessTable(byte_100206428, &type metadata for InAppBuyRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B75E8);
  }

  return result;
}

unint64_t sub_10016F0F0()
{
  unint64_t result = qword_1002B75F0;
  if (!qword_1002B75F0)
  {
    unint64_t result = swift_getWitnessTable("9Z\b", &type metadata for PricingParameters);
    atomic_store(result, (unint64_t *)&qword_1002B75F0);
  }

  return result;
}

uint64_t sub_10016F12C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(_BYTE *)(v4 - 69) = a3;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v4 - 69, v3);
}

uint64_t sub_10016F144()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v0 + 520) + 8LL))(v1, *(void *)(v0 + 528));
}

uint64_t sub_10016F158()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v0 + 1424, *(void *)(v0 + 528));
}

uint64_t sub_10016F16C(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, a2);
}

uint64_t sub_10016F178()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 472));
}

uint64_t sub_10016F180()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 480));
}

uint64_t sub_10016F188()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 456));
}

uint64_t sub_10016F190()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 496));
}

uint64_t sub_10016F198()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 424));
}

uint64_t sub_10016F1A0()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 408));
}

uint64_t sub_10016F1A8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_10016F1B8()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 344));
}

uint64_t sub_10016F1C0@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  *(_BYTE *)(v2 + 1424) = a2;
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_10016F1C8()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 328));
}

  ;
}

uint64_t sub_10016F1E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v6 - 69, v6 - 70, v4, a4, v5);
}

uint64_t sub_10016F200()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 440));
}

uint64_t sub_10016F208()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 376));
}

uint64_t sub_10016F210()
{
  *(void *)(v4 - 248) = v2;
  *(void *)(v4 - 24sub_10019B2E8(v0, 0) = v3;
  return sub_10002C010(v0, v1);
}

void sub_10016F220()
{
  *(void *)(v2 - 248) = v1;
  *(void *)(v2 - 24sub_10019B2E8(v0, 0) = v0;
  v3._uint64_t countAndFlagsBits = 61LL;
  v3._object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
}

uint64_t sub_10016F234(uint64_t a1)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, v1 + 544, *(void *)(v1 + 528), a1, v2);
}

uint64_t sub_10016F254()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 360));
}

uint64_t sub_10016F25C@<X0>(uint64_t a1@<X1>, char a2@<W8>)
{
  *(_BYTE *)(v2 + 1424) = a2;
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_10016F268()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 144));
}

uint64_t sub_10016F270()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 392));
}

uint64_t sub_10016F278()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 280));
}

uint64_t sub_10016F280()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 296));
}

uint64_t sub_10016F288@<X0>(uint64_t a1@<X1>, char a2@<W8>)
{
  *(_BYTE *)(v2 + 1424) = a2;
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_10016F298()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 384));
}

uint64_t sub_10016F2A0()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 264));
}

  ;
}

  ;
}

uint64_t sub_10016F2D0()
{
  return _StringObject.sharedUTF8.getter(v0);
}

uint64_t sub_10016F2DC()
{
  return sub_100043F40(v1 - 200, v0);
}

uint64_t sub_10016F2E8()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 248));
}

uint64_t sub_10016F2F0()
{
  return dispatch thunk of _AnyIteratorBoxBase.next()();
}

BOOL sub_10016F2FC(Swift::String string)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100273CD0, v3);
  sub_100019344();
  return v1 != 0;
}

uint64_t sub_10016F338()
{
  return 0x676F6C616964LL;
}

unint64_t sub_10016F34C(Swift::String string)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100273D08, v3);
  sub_100019344();
  if (v1 >= 8) {
    return 8LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_10016F38C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10016F3C8 + 4 * byte_100206630[a1]))( 0xD000000000000041LL,  0x8000000100217F80LL);
}

uint64_t sub_10016F3C8()
{
  return v0 + 11;
}

BOOL sub_10016F454@<W0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = sub_10016F2FC(*a1);
  *a2 = result;
  return result;
}

void sub_10016F488(void *a1@<X8>)
{
  *a1 = 0x676F6C616964LL;
  a1[1] = 0xE600000000000000LL;
}

uint64_t sub_10016F4A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100170724();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10016F4FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100170724();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_10016F548(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_10016F554()
{
}

uint64_t sub_10016F55C(uint64_t a1)
{
  return sub_1000B10EC(a1, *v1);
}

void sub_10016F564(uint64_t a1)
{
}

unint64_t sub_10016F56C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10016F34C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10016F598@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10016F38C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10016F5C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001706E8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10016F61C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001706E8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t sub_10016F668(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100273DE8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7) {
    return 7LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10016F6B4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10016F6E8 + 4 * byte_100206638[a1]))( 0x6449676F6C616964LL,  0xE800000000000000LL);
}

uint64_t sub_10016F6E8()
{
  return 0x6567617373656DLL;
}

uint64_t sub_10016F700()
{
  return 0x736E6F6974706FLL;
}

uint64_t sub_10016F718()
{
  return 0x497463656A627573LL;
}

uint64_t sub_10016F734()
{
  return 0x707954746E657665LL;
}

uint64_t sub_10016F754()
{
  return 0x72556E6F69746361LL;
}

uint64_t sub_10016F774()
{
  return 0x54746E657645746DLL;
}

uint64_t sub_10016F794(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10016F7C8 + 4 * byte_10020663F[a1]))( 0x6449676F6C616964LL,  0xE800000000000000LL);
}

uint64_t sub_10016F7C8()
{
  return 0x6567617373656DLL;
}

uint64_t sub_10016F7E0()
{
  return 0x736E6F6974706FLL;
}

uint64_t sub_10016F7F8()
{
  return 0x497463656A627573LL;
}

uint64_t sub_10016F814()
{
  return 0x707954746E657665LL;
}

uint64_t sub_10016F834()
{
  return 0x72556E6F69746361LL;
}

uint64_t sub_10016F854()
{
  return 0x54746E657645746DLL;
}

uint64_t sub_10016F874(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_1000175B0(&qword_1002B7618);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100019F58(a1, v9);
  unint64_t v11 = sub_10016FF5C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for Metrics.CodingKeys,  &type metadata for Metrics.CodingKeys,  v11,  v9,  v10);
  sub_100054254((uint64_t)v3, (uint64_t)&v25);
  sub_100054254((uint64_t)&v25, (uint64_t)v21);
  char v22 = 0;
  unint64_t v12 = sub_100170010();
  sub_1001707A8(v12, v13, v14, (uint64_t)&unk_10028C0C8, v12);
  if (!v2)
  {
    sub_100170760(v3[1], v3[2], 1);
    sub_100054254((uint64_t)(v3 + 3), (uint64_t)v24);
    sub_100054254((uint64_t)v24, (uint64_t)v21);
    char v22 = 2;
    uint64_t v15 = sub_1000175B0(&qword_1002A93B8);
    uint64_t v16 = sub_100115DDC( (unint64_t *)&qword_1002A93C0,  (uint64_t)&protocol witness table for String,  (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v22, v5, v15, v16);
    sub_100170760(v3[4], v3[5], 3);
    sub_100054254((uint64_t)(v3 + 6), (uint64_t)&v23);
    sub_100054254((uint64_t)&v23, (uint64_t)v21);
    char v22 = 4;
    unint64_t v17 = sub_10017004C();
    sub_1001707A8(v17, v18, v19, (uint64_t)&unk_10028C038, v17);
    sub_100170760(v3[7], v3[8], 5);
    sub_100170760(v3[9], v3[10], 6);
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10016FA8C@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v5 = sub_1000175B0(&qword_1002B75F8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100019F58(a1, v9);
  unint64_t v11 = sub_10016FF5C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for Metrics.CodingKeys,  &type metadata for Metrics.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    goto LABEL_3;
  }
  char v53 = 0;
  sub_10016FF98();
  sub_1001707CC();
  sub_1001707C0(v12, v13, v14, v15, v16);
  int v17 = v51;
  LOBYTE(v51) = 1;
  uint64_t v19 = sub_100170788();
  uint64_t v21 = v20;
  int v52 = v17;
  uint64_t v22 = sub_1000175B0(&qword_1002A93B8);
  char v53 = 2;
  uint64_t v23 = sub_100115DDC( &qword_1002A93E0,  (uint64_t)&protocol witness table for String,  (const char *)&protocol conformance descriptor for <A> [A]);
  uint64_t v50 = v21;
  swift_bridgeObjectRetain();
  sub_1001707C0(v22, (uint64_t)&v53, v5, v22, v23);
  if (v23)
  {
    sub_100170778();
    sub_10017079C();
LABEL_3:
    sub_100019F7C(a1);
    swift_bridgeObjectRelease();
    sub_10001DC10();
    swift_bridgeObjectRelease();
    sub_10001A420();
    return sub_10003561C();
  }

  uint64_t v49 = v19;
  uint64_t v24 = v51;
  LOBYTE(v51) = 3;
  swift_bridgeObjectRetain();
  uint64_t v25 = sub_100170788();
  uint64_t v27 = v26;
  uint64_t v48 = v25;
  char v53 = 4;
  unint64_t v28 = sub_10016FFD4();
  swift_bridgeObjectRetain();
  sub_1001707CC();
  sub_1001707C0(v29, v30, v31, v32, v28);
  if (v28)
  {
    sub_100170778();
    sub_10017079C();
    sub_10001A420();
    sub_10003561C();
    goto LABEL_3;
  }

  uint64_t v47 = a2;
  int v46 = v51;
  LOBYTE(v51) = 5;
  uint64_t v33 = sub_100170788();
  uint64_t v35 = v34;
  uint64_t v45 = v33;
  LOBYTE(v51) = 6;
  swift_bridgeObjectRetain();
  uint64_t v36 = sub_100170788();
  uint64_t v38 = v37;
  uint64_t v39 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v40 = v36;
  v39(v8, v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_100019F7C(a1);
  swift_bridgeObjectRelease();
  sub_10001DC10();
  sub_10003561C();
  sub_10001A420();
  uint64_t v41 = v50;
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v42 = v47;
  *uint64_t v47 = v52;
  *((void *)v42 + 1) = v49;
  *((void *)v42 + sub_100019F7C(v0 + 2) = v41;
  uint64_t v43 = v48;
  *((void *)v42 + 3) = v24;
  *((void *)v42 + 4) = v43;
  *((void *)v42 + 5) = v27;
  v42[48] = v46;
  *((void *)v42 + 7) = v45;
  *((void *)v42 + 8) = v35;
  *((void *)v42 + 9) = v40;
  *((void *)v42 + 1sub_10019B2E8(v0, 0) = v38;
  return result;
}

void sub_10016FDD0(char *a1)
{
}

void sub_10016FDDC()
{
}

void sub_10016FDE4(uint64_t a1)
{
}

void sub_10016FDEC(uint64_t a1)
{
}

unint64_t sub_10016FDF4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10016F668(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10016FE20@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10016F6B4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10016FE48()
{
  return sub_10016F794(*v0);
}

uint64_t sub_10016FE50@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10016F6B0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10016FE74(uint64_t a1)
{
  unint64_t v2 = sub_10016FF5C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10016FE9C(uint64_t a1)
{
  unint64_t v2 = sub_10016FF5C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10016FEC4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (void *)sub_10016FA8C(a1, __src);
  if (!v2) {
    return memcpy(a2, __src, 0x58uLL);
  }
  return result;
}

uint64_t sub_10016FF0C(void *a1)
{
  return sub_10016F874(a1);
}

unint64_t sub_10016FF5C()
{
  unint64_t result = qword_1002B7600;
  if (!qword_1002B7600)
  {
    unint64_t result = swift_getWitnessTable(byte_1002069D4, &type metadata for Metrics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7600);
  }

  return result;
}

unint64_t sub_10016FF98()
{
  unint64_t result = qword_1002B7608;
  if (!qword_1002B7608)
  {
    unint64_t result = swift_getWitnessTable("eX\b", &unk_10028C0C8);
    atomic_store(result, (unint64_t *)&qword_1002B7608);
  }

  return result;
}

unint64_t sub_10016FFD4()
{
  unint64_t result = qword_1002B7610;
  if (!qword_1002B7610)
  {
    unint64_t result = swift_getWitnessTable(byte_100206984, &unk_10028C038);
    atomic_store(result, (unint64_t *)&qword_1002B7610);
  }

  return result;
}

unint64_t sub_100170010()
{
  unint64_t result = qword_1002B7628;
  if (!qword_1002B7628)
  {
    unint64_t result = swift_getWitnessTable(byte_10020695C, &unk_10028C0C8);
    atomic_store(result, (unint64_t *)&qword_1002B7628);
  }

  return result;
}

unint64_t sub_10017004C()
{
  unint64_t result = qword_1002B7638;
  if (!qword_1002B7638)
  {
    unint64_t result = swift_getWitnessTable(byte_100206934, &unk_10028C038);
    atomic_store(result, (unint64_t *)&qword_1002B7638);
  }

  return result;
}

uint64_t sub_100170088(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1001700C8 + 4 * byte_100206646[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1001700E8 + 4 * byte_10020664B[v4]))();
  }
}

_BYTE *sub_1001700C8(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1001700E8(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1001700F0(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1001700F8(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100170100(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100170108(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

void type metadata accessor for Metrics.EventType()
{
}

uint64_t sub_100170120(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_10017016C + 4 * byte_100206655[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1001701A0 + 4 * byte_100206650[v4]))();
}

uint64_t sub_1001701A0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001701A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001701B0LL);
  }
  return result;
}

uint64_t sub_1001701BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001701C4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 7;
  return result;
}

uint64_t sub_1001701C8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001701D0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for Metrics.DialogID()
{
}

uint64_t storeEnumTagSinglePayload for Metrics.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_100170234 + 4 * byte_10020665F[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100170268 + 4 * byte_10020665A[v4]))();
}

uint64_t sub_100170268(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100170270(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100170278LL);
  }
  return result;
}

uint64_t sub_100170284(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10017028CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_100170290(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100170298(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Metrics.CodingKeys()
{
  return &type metadata for Metrics.CodingKeys;
}

uint64_t sub_1001702B4(void *a1)
{
  return swift_bridgeObjectRelease(a1[10]);
}

uint64_t sub_1001702F4(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = v4;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 4sub_10019B2E8(v0, 0) = v6;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 7sub_100019F7C(v0 + 2) = *(void *)(a2 + 72);
  *(void *)(a1 + 8sub_10019B2E8(v0, 0) = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t sub_100170380(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 4sub_10019B2E8(v0, 0) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 7sub_100019F7C(v0 + 2) = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  uint64_t v13 = *(void *)(a1 + 80);
  *(void *)(a1 + 8sub_10019B2E8(v0, 0) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

void *sub_100170454(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x58uLL);
}

uint64_t sub_10017045C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease(*(void *)(a1 + 16));
  uint64_t v4 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10019B2E8(v0, 0) = v5;
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 64);
  uint64_t v8 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void *)(a2 + 80);
  uint64_t v10 = *(void *)(a1 + 80);
  *(void *)(a1 + 7sub_100019F7C(v0 + 2) = *(void *)(a2 + 72);
  *(void *)(a1 + 8sub_10019B2E8(v0, 0) = v9;
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t sub_1001704E0(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 88))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      unint64_t v3 = *(void *)(a1 + 16);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_100170534(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 7sub_100019F7C(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4sub_10019B2E8(v0, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 88) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 88) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }

  return result;
}

void type metadata accessor for Metrics()
{
}

unint64_t sub_1001705AC()
{
  unint64_t result = qword_1002B7640;
  if (!qword_1002B7640)
  {
    unint64_t result = swift_getWitnessTable(byte_1002067CC, &type metadata for Metrics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7640);
  }

  return result;
}

unint64_t sub_1001705EC()
{
  unint64_t result = qword_1002B7648;
  if (!qword_1002B7648)
  {
    unint64_t result = swift_getWitnessTable(byte_10020686C, &unk_10028C0C8);
    atomic_store(result, (unint64_t *)&qword_1002B7648);
  }

  return result;
}

unint64_t sub_10017062C()
{
  unint64_t result = qword_1002B7650;
  if (!qword_1002B7650)
  {
    unint64_t result = swift_getWitnessTable("}Y\b", &unk_10028C038);
    atomic_store(result, (unint64_t *)&qword_1002B7650);
  }

  return result;
}

unint64_t sub_10017066C()
{
  unint64_t result = qword_1002B7658;
  if (!qword_1002B7658)
  {
    unint64_t result = swift_getWitnessTable(byte_100206704, &type metadata for Metrics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7658);
  }

  return result;
}

unint64_t sub_1001706AC()
{
  unint64_t result = qword_1002B7660;
  if (!qword_1002B7660)
  {
    unint64_t result = swift_getWitnessTable(byte_10020672C, &type metadata for Metrics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7660);
  }

  return result;
}

unint64_t sub_1001706E8()
{
  unint64_t result = qword_1002B7668;
  if (!qword_1002B7668)
  {
    unint64_t result = swift_getWitnessTable("MZ\b", &unk_10028C0C8);
    atomic_store(result, (unint64_t *)&qword_1002B7668);
  }

  return result;
}

unint64_t sub_100170724()
{
  unint64_t result = qword_1002B7670;
  if (!qword_1002B7670)
  {
    unint64_t result = swift_getWitnessTable(byte_100206894, &unk_10028C038);
    atomic_store(result, (unint64_t *)&qword_1002B7670);
  }

  return result;
}

uint64_t sub_100170760@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(_BYTE *)(v4 - 96) = a3;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v4 - 96, v3);
}

uint64_t sub_100170778()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_100170788()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v1 - 88, v0);
}

uint64_t sub_10017079C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 96));
}

uint64_t sub_1001707A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v6 - 96, v6 - 82, v5, a4, a5);
}

uint64_t sub_1001707C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

  ;
}

void sub_1001707E0()
{
  uint64_t v7 = fcntl(_:_:_:)(v4, v5, v6);
  if ((_DWORD)v7 != -1) {
    goto LABEL_12;
  }
  errno.getter(v7);
  sub_100171E2C();
  if (v10)
  {
    while (1)
    {
      uint64_t v8 = fcntl(_:_:_:)(v3, v2, v1);
      if ((_DWORD)v8 != -1) {
        goto LABEL_12;
      }
      int v9 = errno.getter(v8);
      if (v9 != 4)
      {
        int v0 = v9;
        break;
      }
    }
  }

  BOOL v10 = v0 == 9 || v0 == 14;
  if (!v10)
  {
    unint64_t v11 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v11);
    sub_1000252DC(v12, (uint64_t)"fcntl(descriptor:command:value:)");
LABEL_12:
    sub_1001566D8();
    return;
  }

  __break(1u);
}

void sub_10017087C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    goto LABEL_17;
  }
  if (a3 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
  }

  else if (a3 <= 0x7FFFFFFF)
  {
    sub_100171E4C();
    do
    {
      int v3 = sub_100171E58();
      if (writev(v3, v4, v5) != -1) {
        goto LABEL_13;
      }
      int v6 = errno.getter();
    }

    while (v6 == 4);
    if (v6 == 35)
    {
LABEL_13:
      sub_100041B74();
      return;
    }

    if (v6 != 9 && v6 != 14)
    {
      unint64_t v8 = sub_100025100();
      sub_1000252D0((uint64_t)&type metadata for IOError, v8);
      sub_1000252DC(v9, (uint64_t)"writev(descriptor:iovecs:)");
      goto LABEL_13;
    }

    goto LABEL_16;
  }

  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
}

void sub_10017094C()
{
  if (read(v1, v2, v3) != -1) {
    goto LABEL_2;
  }
  errno.getter();
  sub_100171E2C();
  if (v8)
  {
    while (1)
    {
      int v4 = sub_100171E58();
      if (read(v4, v5, v6) != -1) {
        goto LABEL_2;
      }
      int v7 = errno.getter();
      if (v7 != 4)
      {
        int v0 = v7;
        break;
      }
    }
  }

  if (v0 == 35)
  {
    sub_1000CC6DC();
    goto LABEL_2;
  }

  BOOL v8 = v0 == 9 || v0 == 14;
  if (!v8)
  {
    unint64_t v9 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v9);
    sub_1000252DC(v10, (uint64_t)"read(descriptor:pointer:size:)");
LABEL_2:
    sub_1001566D8();
    return;
  }

  __break(1u);
}

void sub_1001709F8()
{
  if (write(v1, v2, v3) != -1) {
    goto LABEL_2;
  }
  errno.getter();
  sub_100171E2C();
  if (v8)
  {
    while (1)
    {
      int v4 = sub_100171E58();
      if (write(v4, v5, v6) != -1) {
        goto LABEL_2;
      }
      int v7 = errno.getter();
      if (v7 != 4)
      {
        int v0 = v7;
        break;
      }
    }
  }

  if (v0 == 35)
  {
    sub_1000CC6DC();
    goto LABEL_2;
  }

  BOOL v8 = v0 == 9 || v0 == 14;
  if (!v8)
  {
    unint64_t v9 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v9);
    sub_1000252DC(v10, (uint64_t)"write(descriptor:pointer:size:)");
LABEL_2:
    sub_1001566D8();
    return;
  }

  __break(1u);
}

void sub_100170AA4()
{
  if (pread(v1, v2, v3, v4) != -1) {
    goto LABEL_2;
  }
  errno.getter();
  sub_100171E2C();
  if (v10)
  {
    while (1)
    {
      int v5 = sub_100171EBC();
      if (pread(v5, v6, v7, v8) != -1) {
        goto LABEL_2;
      }
      int v9 = errno.getter();
      if (v9 != 4)
      {
        int v0 = v9;
        break;
      }
    }
  }

  if (v0 == 35)
  {
    sub_1000CC6DC();
    goto LABEL_2;
  }

  BOOL v10 = v0 == 9 || v0 == 14;
  if (!v10)
  {
    unint64_t v11 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v11);
    sub_1000252DC(v12, (uint64_t)"pread(descriptor:pointer:size:offset:)");
LABEL_2:
    sub_100041B74();
    return;
  }

  __break(1u);
}

void sub_100170B50()
{
  if (ftruncate(v3, v4) == -1)
  {
    errno.getter();
    sub_100171E2C();
    if (v6)
    {
      while (ftruncate(v2, v1) == -1)
      {
        int v5 = errno.getter();
        if (v5 != 4)
        {
          int v0 = v5;
          goto LABEL_7;
        }
      }
    }

    else
    {
LABEL_7:
      BOOL v6 = v0 == 9 || v0 == 14;
      if (v6)
      {
        __break(1u);
      }

      else
      {
        unint64_t v7 = sub_100025100();
        sub_1000252D0((uint64_t)&type metadata for IOError, v7);
        sub_1000252DC(v8, (uint64_t)"ftruncate(descriptor:size:)");
      }
    }
  }

void sub_100170BEC()
{
  if (lseek(v1, v2, v3) != -1) {
    goto LABEL_12;
  }
  errno.getter();
  sub_100171E2C();
  if (v8)
  {
    while (1)
    {
      int v4 = sub_100171E58();
      if (lseek(v4, v5, v6) != -1) {
        goto LABEL_12;
      }
      int v7 = errno.getter();
      if (v7 != 4)
      {
        int v0 = v7;
        break;
      }
    }
  }

  BOOL v8 = v0 == 9 || v0 == 14;
  if (!v8)
  {
    unint64_t v9 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v9);
    sub_1000252DC(v10, (uint64_t)"lseek(descriptor:offset:whence:)");
LABEL_12:
    sub_1001566D8();
    return;
  }

  __break(1u);
}

void sub_100170C88()
{
  if (pwrite(v1, v2, v3, v4) != -1) {
    goto LABEL_2;
  }
  errno.getter();
  sub_100171E2C();
  if (v10)
  {
    while (1)
    {
      int v5 = sub_100171EBC();
      if (pwrite(v5, v6, v7, v8) != -1) {
        goto LABEL_2;
      }
      int v9 = errno.getter();
      if (v9 != 4)
      {
        int v0 = v9;
        break;
      }
    }
  }

  if (v0 == 35)
  {
    sub_1000CC6DC();
    goto LABEL_2;
  }

  BOOL v10 = v0 == 9 || v0 == 14;
  if (!v10)
  {
    unint64_t v11 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v11);
    sub_1000252DC(v12, (uint64_t)"pwrite(descriptor:pointer:size:offset:)");
LABEL_2:
    sub_100041B74();
    return;
  }

  __break(1u);
}

void sub_100170D34()
{
  uint64_t v4 = accept(v1, v2, v3);
  if ((_DWORD)v4 != -1) {
    goto LABEL_2;
  }
  errno.getter(v4);
  sub_100171E2C();
  if (v10)
  {
    while (1)
    {
      int v5 = sub_100171E58();
      uint64_t v8 = accept(v5, v6, v7);
      if ((_DWORD)v8 != -1) {
        goto LABEL_2;
      }
      int v9 = errno.getter(v8);
      if (v9 != 4)
      {
        int v0 = v9;
        break;
      }
    }
  }

  if (v0 == 35)
  {
LABEL_2:
    sub_1001566D8();
    return;
  }

  BOOL v10 = v0 == 9 || v0 == 14;
  if (!v10)
  {
    unint64_t v11 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v11);
    sub_1000252DC(v12, (uint64_t)"accept(descriptor:addr:len:)");
    goto LABEL_2;
  }

  __break(1u);
}

uint64_t sub_100170DF4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if ((a3 & 0x8000000000000000LL) != 0)
  {
LABEL_15:
    sub_100034FD0();
    uint64_t v14 = "Negative value is not representable";
    uint64_t v15 = 35LL;
LABEL_17:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v14,  v15,  2LL,  "Swift/Integers.swift",  20LL);
    __break(1u);
    return result;
  }

  socklen_t v5 = a3;
  if (HIDWORD(a3))
  {
    sub_100034FD0();
    uint64_t v14 = "Not enough bits to represent the passed value";
    uint64_t v15 = 45LL;
    goto LABEL_17;
  }

  sub_100171E94();
  uint64_t result = bind(v6, v7, v5);
  if ((_DWORD)result != -1) {
    return result;
  }
  int v9 = errno.getter();
  if (v9 != 4)
  {
LABEL_8:
    if (v9 != 9 && v9 != 14)
    {
      unint64_t v12 = sub_100025100();
      sub_1000252D0((uint64_t)&type metadata for IOError, v12);
      *(void *)uint64_t v13 = 0xD00000000000001BLL;
      *(void *)(v13 + 8) = 0x8000000100220DE0LL;
      *(_DWORD *)(v13 + 16) = v9;
      return sub_1000AA06C();
    }

    __break(1u);
    goto LABEL_15;
  }

  while (1)
  {
    uint64_t result = bind(v4, v3, v5);
    if ((_DWORD)result != -1) {
      return result;
    }
    int v10 = errno.getter();
    if (v10 != 4)
    {
      int v9 = v10;
      goto LABEL_8;
    }
  }

uint64_t sub_100170F3C(uint64_t a1, uint64_t a2, socklen_t a3)
{
  uint64_t v9 = connect(v6, v7, v8);
  if ((_DWORD)v9 != -1)
  {
LABEL_2:
    char v10 = 1;
    return v10 & 1;
  }

  uint64_t result = errno.getter(v9);
  int v12 = result;
  if ((_DWORD)result == 4)
  {
    while (1)
    {
      uint64_t v13 = connect(v4, v3, a3);
      if ((_DWORD)v13 != -1) {
        goto LABEL_2;
      }
      uint64_t result = errno.getter(v13);
      if ((_DWORD)result != 4)
      {
        int v12 = result;
        break;
      }
    }
  }

  if (v12 != 9 && v12 != 14)
  {
    unint64_t v15 = sub_100025100();
    uint64_t v16 = sub_1000252D0((uint64_t)&type metadata for IOError, v15);
    sub_1001269F8(v17, (uint64_t)"connect(descriptor:addr:size:)");
    *(_DWORD *)(v18 + 16) = v12;
    sub_1000AA06C();
    uint64_t v26 = v16;
    sub_100171EB4();
    uint64_t v19 = sub_1000175B0(&qword_1002A9710);
    if ((sub_100156580((uint64_t)v24, (uint64_t)&v26, v19, (uint64_t)&type metadata for IOError) & 1) != 0)
    {
      sub_1000E5624();
      uint64_t v20 = v24[1];
      int v21 = v25;
      if (v25 == 36)
      {
        swift_bridgeObjectRelease();
        swift_errorRelease(v26);
        char v10 = 0;
        return v10 & 1;
      }

      uint64_t v22 = v24[0];
      sub_1000252D0((uint64_t)&type metadata for IOError, v15);
      *(void *)uint64_t v23 = v22;
      *(void *)(v23 + 8) = v20;
      *(_DWORD *)(v23 + 16) = v21;
      sub_1000AA06C();
    }

    swift_errorRelease(v26);
    return v10 & 1;
  }

  __break(1u);
  return result;
}

void sub_10017109C()
{
  if (getpeername(v1, v2, v3) != -1) {
    goto LABEL_12;
  }
  errno.getter();
  sub_100171E2C();
  if (v8)
  {
    while (1)
    {
      int v4 = sub_100171E58();
      if (getpeername(v4, v5, v6) != -1) {
        goto LABEL_12;
      }
      int v7 = errno.getter();
      if (v7 != 4)
      {
        int v0 = v7;
        break;
      }
    }
  }

  BOOL v8 = v0 == 9 || v0 == 14;
  if (!v8)
  {
    unint64_t v9 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v9);
    sub_1000252DC(v10, (uint64_t)"getpeername(socket:address:addressLength:)");
LABEL_12:
    sub_1001566D8();
    return;
  }

  __break(1u);
}

void sub_100171130()
{
  if (getsockname(v1, v2, v3) != -1) {
    goto LABEL_12;
  }
  errno.getter();
  sub_100171E2C();
  if (v8)
  {
    while (1)
    {
      int v4 = sub_100171E58();
      if (getsockname(v4, v5, v6) != -1) {
        goto LABEL_12;
      }
      int v7 = errno.getter();
      if (v7 != 4)
      {
        int v0 = v7;
        break;
      }
    }
  }

  BOOL v8 = v0 == 9 || v0 == 14;
  if (!v8)
  {
    unint64_t v9 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v9);
    sub_1000252DC(v10, (uint64_t)"getsockname(socket:address:addressLength:)");
LABEL_12:
    sub_1001566D8();
    return;
  }

  __break(1u);
}

void sub_1001711C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, socklen_t *a5)
{
  if (getsockopt(v6, v7, v8, v9, v10) != -1) {
    goto LABEL_11;
  }
  int v11 = errno.getter();
  if (v11 == 4)
  {
    while (1)
    {
      int v12 = sub_100171EBC();
      if (getsockopt(v12, v13, v14, v15, a5) != -1) {
        goto LABEL_11;
      }
      int v16 = errno.getter();
      if (v16 != 4)
      {
        int v11 = v16;
        break;
      }
    }
  }

  if (v11 != 9 && v11 != 14)
  {
    unint64_t v18 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v18);
    *(void *)uint64_t v19 = 0xD00000000000003ALL;
    *(void *)(v19 + 8) = 0x8000000100220B10LL;
    *(_DWORD *)(v19 + 16) = v11;
    sub_1000AA06C();
LABEL_11:
    sub_100171E68();
    return;
  }

  __break(1u);
}

void sub_100171280(int a1, int a2)
{
  uint64_t v5 = listen(a1, a2);
  if ((_DWORD)v5 != -1) {
    goto LABEL_12;
  }
  errno.getter(v5);
  sub_100171E2C();
  if (v8)
  {
    while (1)
    {
      uint64_t v6 = listen(a1, a2);
      if ((_DWORD)v6 != -1) {
        goto LABEL_12;
      }
      int v7 = errno.getter(v6);
      if (v7 != 4)
      {
        int v2 = v7;
        break;
      }
    }
  }

  BOOL v8 = v2 == 9 || v2 == 14;
  if (!v8)
  {
    unint64_t v9 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v9);
    sub_1000252DC(v10, (uint64_t)"listen(descriptor:backlog:)");
LABEL_12:
    sub_10002A7C4();
    return;
  }

  __break(1u);
}

void sub_10017131C()
{
  if (recvmsg(v1, v2, v3) != -1) {
    goto LABEL_2;
  }
  errno.getter(-1LL);
  sub_100171E2C();
  if (v8)
  {
    while (1)
    {
      int v4 = sub_100171E58();
      if (recvmsg(v4, v5, v6) != -1) {
        goto LABEL_2;
      }
      int v7 = errno.getter(-1LL);
      if (v7 != 4)
      {
        int v0 = v7;
        break;
      }
    }
  }

  if (v0 == 35)
  {
    sub_1000CC6DC();
    goto LABEL_2;
  }

  BOOL v8 = v0 == 9 || v0 == 14;
  if (!v8)
  {
    unint64_t v9 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v9);
    sub_1000252DC(v10, (uint64_t)"recvmsg(descriptor:msgHdr:flags:)");
LABEL_2:
    sub_1001566D8();
    return;
  }

  __break(1u);
}

void sub_1001713D0()
{
  if (sendmsg(v1, v2, v3) != -1) {
    goto LABEL_2;
  }
  errno.getter(-1LL);
  sub_100171E2C();
  if (v8)
  {
    while (1)
    {
      int v4 = sub_100171E58();
      if (sendmsg(v4, v5, v6) != -1) {
        goto LABEL_2;
      }
      int v7 = errno.getter(-1LL);
      if (v7 != 4)
      {
        int v0 = v7;
        break;
      }
    }
  }

  if (v0 == 35)
  {
    sub_1000CC6DC();
    goto LABEL_2;
  }

  BOOL v8 = v0 == 9 || v0 == 14;
  if (!v8)
  {
    unint64_t v9 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v9);
    sub_1000252DC(v10, (uint64_t)"sendmsg(descriptor:msgHdr:flags:)");
LABEL_2:
    sub_1001566D8();
    return;
  }

  __break(1u);
}

void sub_100171484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, socklen_t a5)
{
  if (setsockopt(v6, v7, v8, v9, v10) != -1) {
    goto LABEL_11;
  }
  int v11 = errno.getter();
  if (v11 == 4)
  {
    while (1)
    {
      int v12 = sub_100171EBC();
      if (setsockopt(v12, v13, v14, v15, a5) != -1) {
        goto LABEL_11;
      }
      int v16 = errno.getter();
      if (v16 != 4)
      {
        int v11 = v16;
        break;
      }
    }
  }

  if (v11 != 9 && v11 != 14)
  {
    unint64_t v18 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v18);
    *(void *)uint64_t v19 = 0xD00000000000003ALL;
    *(void *)(v19 + 8) = 0x8000000100220BE0LL;
    *(_DWORD *)(v19 + 16) = v11;
    sub_1000AA06C();
LABEL_11:
    sub_100171E68();
    return;
  }

  __break(1u);
}

void sub_100171540(int a1, unsigned __int8 a2)
{
  int v3 = a2;
  do
  {
    if (shutdown(a1, v3) != -1) {
      goto LABEL_9;
    }
    int v4 = errno.getter();
  }

  while (v4 == 4);
  if (v4 != 9 && v4 != 14)
  {
    unint64_t v6 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v6);
    sub_1000252DC(v7, (uint64_t)"shutdown(descriptor:how:)");
LABEL_9:
    sub_10002A7C4();
    return;
  }

  __break(1u);
}

void sub_1001715C4()
{
  uint64_t v7 = socket(v4, v5, v6);
  if ((_DWORD)v7 != -1) {
    goto LABEL_12;
  }
  errno.getter(v7);
  sub_100171E2C();
  if (v10)
  {
    while (1)
    {
      uint64_t v8 = socket(v3, v2, v1);
      if ((_DWORD)v8 != -1) {
        goto LABEL_12;
      }
      int v9 = errno.getter(v8);
      if (v9 != 4)
      {
        int v0 = v9;
        break;
      }
    }
  }

  BOOL v10 = v0 == 9 || v0 == 14;
  if (!v10)
  {
    unint64_t v11 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v11);
    sub_1000252DC(v12, (uint64_t)"socket(domain:type:protocol:)");
LABEL_12:
    sub_1001566D8();
    return;
  }

  __break(1u);
}

void sub_100171660(int a1, msghdr *a2, unsigned int a3, int a4)
{
  uint64_t v9 = sub_10000BEDC(a1, a2, a3, a4);
  if ((_DWORD)v9 != -1) {
    goto LABEL_2;
  }
  errno.getter(v9);
  sub_100171E2C();
  if (v12)
  {
    while (1)
    {
      uint64_t v10 = sub_10000BEDC(a1, a2, a3, a4);
      if ((_DWORD)v10 != -1) {
        goto LABEL_2;
      }
      int v11 = errno.getter(v10);
      if (v11 != 4)
      {
        int v4 = v11;
        break;
      }
    }
  }

  if (v4 == 35)
  {
    sub_1000CC6DC();
    goto LABEL_2;
  }

  BOOL v12 = v4 == 9 || v4 == 14;
  if (!v12)
  {
    unint64_t v13 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v13);
    sub_1000252DC(v14, (uint64_t)"sendmmsg(sockfd:msgvec:vlen:flags:)");
LABEL_2:
    sub_100041B74();
    return;
  }

  __break(1u);
}

off_t sub_10017172C(int a1, int a2, off_t a3, off_t a4)
{
  while (1)
  {
    v21[0] = a4;
    int v8 = sendfile(a2, a1, a3, v21, 0LL, 0);
    off_t v9 = v21[0];
    if (v8 != -1) {
      break;
    }
    int v10 = errno.getter();
    if (v10 != 4)
    {
      int v11 = v10;
      if (v10 == 9 || v10 == 14) {
        __break(1u);
      }
      unint64_t v13 = sub_100025100();
      uint64_t v14 = sub_1000252D0((uint64_t)&type metadata for IOError, v13);
      *(void *)uint64_t v15 = 0xD000000000000025LL;
      *(void *)(v15 + 8) = 0x8000000100220D30LL;
      *(_DWORD *)(v15 + 16) = v11;
      sub_1000AA06C();
      uint64_t v23 = v14;
      sub_100171EB4();
      uint64_t v16 = sub_1000175B0(&qword_1002A9710);
      if ((sub_100156580((uint64_t)v21, (uint64_t)&v23, v16, (uint64_t)&type metadata for IOError) & 1) != 0)
      {
        sub_1000E5624();
        off_t v17 = v21[1];
        int v18 = v22;
        if (v22 == 35)
        {
          swift_bridgeObjectRelease();
          swift_errorRelease(v23);
          return v9;
        }

        off_t v9 = v21[0];
        sub_1000252D0((uint64_t)&type metadata for IOError, v13);
        *(void *)uint64_t v19 = v9;
        *(void *)(v19 + 8) = v17;
        *(_DWORD *)(v19 + 16) = v18;
        sub_1000AA06C();
      }

      swift_errorRelease(v23);
      return v9;
    }
  }

  return v9;
}

void sub_1001718CC()
{
  if (!v0) {
    sub_1001707E0();
  }
}

uint64_t sub_1001719C4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = String.utf8CString.getter(a1, a2);
  sub_100171EA4(v5);
  uint64_t result = sub_100171ED0();
  if (v2 == -1)
  {
    uint64_t result = errno.getter(result);
    int v7 = result;
    if ((_DWORD)result == 4)
    {
      do
      {
        uint64_t v8 = String.utf8CString.getter(a1, a2);
        sub_100171EA4(v8);
        uint64_t v9 = sub_100171ED0();
        uint64_t result = errno.getter(v9);
      }

      while ((_DWORD)result == 4);
      int v7 = result;
    }

    if (v7 == 9 || v7 == 14)
    {
      __break(1u);
    }

    else
    {
      unint64_t v11 = sub_100025100();
      sub_1000252D0((uint64_t)&type metadata for IOError, v11);
      *(void *)uint64_t v12 = 0xD000000000000017LL;
      *(void *)(v12 + 8) = 0x8000000100220E80LL;
      *(_DWORD *)(v12 + 16) = v7;
      return sub_1000AA06C();
    }
  }

  return result;
}

void sub_100171A9C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = String.utf8CString.getter(a1, a2);
  sub_100171EF0(v5);
  uint64_t v6 = sub_100171EFC();
  if (v2 != -1) {
    goto LABEL_10;
  }
  int v7 = errno.getter(v6);
  if (v7 == 4)
  {
    do
    {
      uint64_t v8 = String.utf8CString.getter(a1, a2);
      sub_100171EF0(v8);
      uint64_t v9 = sub_100171EFC();
      int v10 = errno.getter(v9);
    }

    while (v10 == 4);
    int v7 = v10;
  }

  if (v7 != 9 && v7 != 14)
  {
    unint64_t v12 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v12);
    sub_1001269F8(v13, (uint64_t)"unlink(pathname:)");
    *(_DWORD *)(v14 + 16) = v7;
    sub_1000AA06C();
LABEL_10:
    sub_1001566D8();
    return;
  }

  __break(1u);
}

uint64_t sub_100171B58(int a1, const kevent *a2, int a3, kevent *a4, int a5, const timespec *a6)
{
  uint64_t result = kevent(a1, a2, a3, a4, a5, a6);
  if ((_DWORD)result == -1)
  {
    uint64_t result = errno.getter();
    int v13 = result;
    if ((_DWORD)result == 4)
    {
      while (1)
      {
        uint64_t result = kevent(a1, a2, a3, a4, a5, a6);
        if ((_DWORD)result != -1) {
          break;
        }
        uint64_t result = errno.getter();
        if ((_DWORD)result != 4)
        {
          int v13 = result;
          goto LABEL_6;
        }
      }
    }

    else
    {
LABEL_6:
      if (v13 == 9 || v13 == 14)
      {
        __break(1u);
      }

      else
      {
        unint64_t v15 = sub_100025100();
        sub_1000252D0((uint64_t)&type metadata for IOError, v15);
        sub_1001269F8(v16, (uint64_t)"kevent(kq:changelist:nchanges:eventlist:nevents:timeout:)");
        *(_DWORD *)(v17 + 16) = v13;
        return sub_1000AA06C();
      }
    }
  }

  return result;
}

void sub_100171C38()
{
  if (kqueue() == -1)
  {
    errno.getter();
    sub_100171E2C();
    if (v2)
    {
      while (kqueue() == -1)
      {
        int v1 = errno.getter();
        if (v1 != 4)
        {
          int v0 = v1;
          goto LABEL_7;
        }
      }
    }

    else
    {
LABEL_7:
      BOOL v2 = v0 == 9 || v0 == 14;
      if (v2)
      {
        __break(1u);
      }

      else
      {
        unint64_t v3 = sub_100025100();
        uint64_t v4 = sub_1000252D0((uint64_t)&type metadata for IOError, v3);
        *uint64_t v5 = 0x292865756575716BLL;
        v5[1] = 0xE800000000000000LL;
        sub_1000252F8(v4, (uint64_t)v5);
      }
    }
  }

void sub_100171CD0()
{
  uint64_t v5 = fstat(v3, v4);
  if ((_DWORD)v5 != -1) {
    goto LABEL_12;
  }
  errno.getter(v5);
  sub_100171E2C();
  if (v8)
  {
    while (1)
    {
      uint64_t v6 = fstat(v2, v1);
      if ((_DWORD)v6 != -1) {
        goto LABEL_12;
      }
      int v7 = errno.getter(v6);
      if (v7 != 4)
      {
        int v0 = v7;
        break;
      }
    }
  }

  BOOL v8 = v0 == 9 || v0 == 14;
  if (!v8)
  {
    unint64_t v9 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v9);
    sub_1000252DC(v10, (uint64_t)"fstat(descriptor:outStat:)");
LABEL_12:
    sub_10002A7C4();
    return;
  }

  __break(1u);
}

void sub_100171D64()
{
  dword_1002EB9A8 = 0;
}

void sub_100171D7C()
{
  dword_1002EB9AC = 3;
}

void sub_100171D94()
{
  dword_1002EB9B0 = 2;
}

void sub_100171DAC()
{
  dword_1002EB9B4 = 1;
}

void sub_100171DC4()
{
  dword_1002EB9B8 = 3;
}

void sub_100171DDC()
{
  dword_1002EB9C4 = 61;
}

void sub_100171DF4()
{
  dword_1002EB9C8 = 46;
}

ValueMetadata *type metadata accessor for NIOFcntlFailedError()
{
  return &type metadata for NIOFcntlFailedError;
}

ValueMetadata *type metadata accessor for NIOFailedToSetSocketNonBlockingError()
{
  return &type metadata for NIOFailedToSetSocketNonBlockingError;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100171E58()
{
  return v0;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100171EA4(uint64_t a1)
{
  return stat((const char *)(a1 + 32), v1);
}

uint64_t sub_100171EB4()
{
  return swift_errorRetain(v0);
}

uint64_t sub_100171EBC()
{
  return v0;
}

uint64_t sub_100171ED0()
{
  return swift_release(v0);
}

  ;
}

uint64_t sub_100171EF0(uint64_t a1)
{
  return unlink((const char *)(a1 + 32));
}

uint64_t sub_100171EFC()
{
  return swift_release(v0);
}

uint64_t sub_100171F08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(v6 + 80);
  uint64_t v13 = *(void *)(v6 + 88);
  uint64_t v14 = sub_1000175B0(&qword_1002AAD98);
  uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
  uint64_t ObjectType = swift_getObjectType(v12);
  uint64_t v17 = sub_10010C7B4(v12, 0LL, 255, a1, a2, a3, a4, v15, ObjectType, v13);
  swift_retain_n(v17, 2LL);
  swift_retain_n(v6, 2LL);
  swift_retain_n(a6, 2LL);
  swift_unknownObjectRetain(v12);
  sub_1000FFD9C();
  swift_release();
  swift_release();
  swift_release();
  return v17;
}

uint64_t sub_100172010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = sub_100019310((uint64_t)&unk_10028C458, 32LL);
  *(void *)(v9 + 16) = a5;
  *(void *)(v9 + 24) = a6;
  ChannelPipeline.syncOperations.getter();
  swift_retain();
  sub_10002A4C8();
  sub_1000FF2F0();
  sub_10002A5A4();
  return sub_10009B448(v6);
}

uint64_t sub_100172078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v9 = *(void *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 40);
  uint64_t v11 = sub_1000175B0(&qword_1002B0FF0);
  sub_100019310(v11, 80LL);
  uint64_t v12 = sub_1001458F4(v9, v10, 0LL, 0LL, 255);
  sub_10009B59C(v12);
  sub_10009B59C(v7);
  sub_10009B59C(a6);
  swift_unknownObjectRetain(v9);
  sub_10010063C();
  swift_release();
  sub_10001EDD8();
  sub_100024F0C();
  return v12;
}

uint64_t sub_100172168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100172308( a1,  a2,  a3,  a4,  a5,  a6,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100100714);
}

uint64_t sub_100172174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((char *)sub_1000175B0(&qword_1002AA4B0) == &type metadata for ()[8])
  {
    v24[0] = a5;
    v24[1] = a6;
    sub_10002A4C8();
    uint64_t v20 = sub_1000175B0(&qword_1002B77E8);
    uint64_t v21 = sub_1000175B0(&qword_1002B77F0);
    swift_dynamicCast(&v23, v24, v20, v21, 7LL);
    uint64_t v22 = sub_100019310((uint64_t)&unk_10028C480, 32LL);
    *(_OWORD *)(v22 + 16) = v23;
    ChannelPipeline.syncOperations.getter();
    sub_10002A4C8();
    sub_1000FF2F0();
    uint64_t result = sub_10001EDD8();
    __break(1u);
  }

  else
  {
    uint64_t v13 = *(void *)(v6 + 32);
    uint64_t v14 = *(void *)(v6 + 40);
    uint64_t v15 = sub_1000175B0(&qword_1002B0FE8);
    uint64_t v16 = sub_100019310(v15, 80LL);
    uint64_t ObjectType = swift_getObjectType(v13);
    uint64_t v18 = sub_10010CC48(v13, 0LL, 0LL, 255, v10, v9, v8, v7, v16, ObjectType, v14);
    sub_10009B59C(a6);
    sub_10009B59C(v6);
    sub_10009B59C(v18);
    swift_unknownObjectRetain(v13);
    sub_1000FF6A0();
    sub_10001EDD8();
    sub_100024F0C();
    sub_10002A524();
    return v18;
  }

  return result;
}

uint64_t sub_1001722FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100172308( a1,  a2,  a3,  a4,  a5,  a6,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100101DD4);
}

uint64_t sub_100172308( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v15 = *(void *)(v7 + 32);
  uint64_t v14 = *(void *)(v7 + 40);
  uint64_t v16 = sub_1000175B0(&qword_1002AAD98);
  uint64_t v17 = sub_100019310(v16, 72LL);
  uint64_t ObjectType = swift_getObjectType(v15);
  uint64_t v19 = sub_10010C7B4(v15, 0LL, 255, v11, v10, v9, v8, v17, ObjectType, v14);
  sub_10009B59C(v19);
  sub_10009B59C(v7);
  sub_10009B59C(a6);
  swift_unknownObjectRetain(v15);
  a7(v7, v19, v7, a5, a6);
  sub_10001EDD8();
  sub_100024F0C();
  sub_10002A524();
  return v19;
}

uint64_t sub_1001723F0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100019310((uint64_t)&unk_10028C430, 32LL);
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  swift_retain();
  ChannelPipeline.syncOperations.getter();
  sub_10002A4C8();
  sub_1000FEED0();
  sub_10002A5A4();
  return sub_10009B448(v2);
}

uint64_t sub_100172454(uint64_t a1, char a2, uint64_t (*a3)(uint64_t *))
{
  uint64_t v4 = a1;
  char v5 = a2 & 1;
  return a3(&v4);
}

void sub_10017248C()
{
  qword_1002B7678 = v0;
}

uint64_t (*sub_1001724B0(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_1001724EC()
{
  *(void *)(v0 + 136) = 0LL;
  *(_OWORD *)(v0 + 4sub_10019B2E8(v0, 0) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 7sub_100019F7C(v0 + 2) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(void *)(v0 + 12sub_10019B2E8(v0, 0) = 0LL;
  *(_OWORD *)(v0 + 24) = 0u;
  swift_unknownObjectWeakInit(v0 + 128, 0LL);
  *(_BYTE *)(v0 + 16) = 0;
  sub_10004BDB4(v0 + 24, (uint64_t)v11);
  uint64_t v1 = *(void *)(v0 + 24);
  unint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 72);
  uint64_t v8 = *(void *)(v0 + 80);
  __n128 v9 = *(__n128 *)(v0 + 88);
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 4sub_10019B2E8(v0, 0) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 7sub_100019F7C(v0 + 2) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(void *)(v0 + 12sub_10019B2E8(v0, 0) = 0LL;
  sub_100173D70(v1, v2, v3, v4, v5, v6, v7, v8, v9);
  return v0;
}

uint64_t sub_100172598(uint64_t a1)
{
  unint64_t v2 = v1;
  ChannelHandlerContext.remoteAddress.getter();
  if ((~v4 & 0xF000000000000007LL) == 0) {
    goto LABEL_22;
  }
  if (v4 >> 62)
  {
    if (v4 >> 62 == 1)
    {
      uint64_t v5 = *(void *)(v4 + 32);
      *(void *)&__int128 v171 = *(void *)(v4 + 24);
      *((void *)&v171 + 1) = v5;
      swift_retain();
      uint64_t v6 = sub_1000C9728(30, &v171, 0x2EuLL);
      goto LABEL_6;
    }

    sub_100173DEC();
LABEL_22:
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v38 = type metadata accessor for Logger(0LL);
    uint64_t v39 = sub_100018F68(v38, (uint64_t)qword_1002EB9D0);
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v39);
    os_log_type_t v41 = static os_log_type_t.error.getter(v32, v40);
    if (!os_log_type_enabled(v32, v41)) {
      goto LABEL_27;
    }
    uint64_t v42 = (uint8_t *)sub_100019464(2LL);
    *(_WORD *)uint64_t v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v41, "Blocking request from unknown remote", v42, 2u);
    uint64_t v37 = (uint64_t)v42;
LABEL_26:
    sub_10001A408(v37);
LABEL_27:

LABEL_28:
    sub_10004BDB4((uint64_t)v2 + 24, (uint64_t)&v171);
    __n128 v43 = sub_100173D4C();
    *(_OWORD *)((char *)v2 + 24) = v44;
    *(_OWORD *)((char *)v2 + 4sub_10019B2E8(v0, 0) = v44;
    *(_OWORD *)((char *)v2 + 56) = v44;
    *(_OWORD *)((char *)v2 + 7sub_100019F7C(v0 + 2) = v44;
    *(_OWORD *)((char *)v2 + 88) = v44;
    *(_OWORD *)((char *)v2 + 104) = v44;
    *((void *)v2 + 15) = 0LL;
    sub_100173D70(v45, v46, v47, v48, v49, v50, v51, v52, v43);
    sub_100173A50(a1);
    sub_1001730EC(a1);
    return swift_release();
  }

  LODWORD(v171) = *(_DWORD *)(v4 + 20);
  ChannelPipeline.syncOperations.getter();
  uint64_t v6 = sub_1000C9728(2, &v171, 0x10uLL);
LABEL_6:
  uint64_t v8 = v6;
  unint64_t v9 = v7;
  sub_100173DEC();
  sub_100173DEC();
  sub_10003574C();
  if (qword_1002A8D88 != -1) {
    swift_once(&qword_1002A8D88, sub_10017248C);
  }
  sub_1000B3C84(v8, v9, qword_1002B7678);
  char v11 = v10;
  swift_bridgeObjectRelease();
  if ((v11 & 1) == 0)
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v30 = type metadata accessor for Logger(0LL);
    sub_100018F68(v30, (uint64_t)qword_1002EB9D0);
    uint64_t v31 = sub_10003574C();
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v34 = static os_log_type_t.error.getter(v32, v33);
    if (!os_log_type_enabled(v32, v34))
    {

      swift_bridgeObjectRelease_n(v9, 2LL);
      goto LABEL_28;
    }

    uint64_t v35 = (uint8_t *)sub_100019464(12LL);
    uint64_t v36 = sub_100019464(32LL);
    *(void *)&__int128 v171 = v36;
    *(_DWORD *)uint64_t v35 = 136315138;
    sub_10003574C();
    uint64_t v169 = sub_1000CF360(v8, v9, (uint64_t *)&v171);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v169, &v170, v35 + 4);
    swift_bridgeObjectRelease_n(v9, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v32, v34, "Blocking request from external remote: %s", v35, 0xCu);
    swift_arrayDestroy(v36, 1LL);
    sub_10001A408(v36);
    uint64_t v37 = (uint64_t)v35;
    goto LABEL_26;
  }

  swift_bridgeObjectRelease();
  sub_1000175B0(&qword_1002AA4A0);
  uint64_t v12 = sub_10002D534();
  uint64_t v14 = v12;
  uint64_t v16 = v15;
  unint64_t v17 = v13;
  if (HIBYTE(v13))
  {
    if (HIBYTE(v13) != 1)
    {
      uint64_t v168 = v12;
      sub_10004BDB4((uint64_t)v2 + 24, (uint64_t)&v169);
      uint64_t v74 = *((void *)v2 + 5);
      if (v74)
      {
        uint64_t v75 = *((void *)v2 + 14);
        uint64_t v77 = *((void *)v2 + 12);
        uint64_t v76 = *((void *)v2 + 13);
        uint64_t v165 = v17;
        uint64_t v78 = *((void *)v2 + 11);
        uint64_t v153 = *((void *)v2 + 15);
        uint64_t v154 = *((void *)v2 + 10);
        uint64_t v79 = *((void *)v2 + 8);
        uint64_t v80 = *((void *)v2 + 7);
        uint64_t v157 = *((void *)v2 + 9);
        uint64_t v159 = *((void *)v2 + 6);
        uint64_t v162 = v16;
        unint64_t v81 = *((void *)v2 + 4);
        *(void *)&__int128 v171 = *((void *)v2 + 3);
        *((void *)&v171 + 1) = v81;
        uint64_t v155 = v171;
        unint64_t v156 = v81;
        uint64_t v172 = v74;
        *(void *)&__int128 v173 = v159;
        *((void *)&v173 + 1) = v80;
        uint64_t v174 = v79;
        unsigned __int8 v175 = v157;
        uint64_t v176 = v154;
        *(void *)&__int128 v177 = v78;
        uint64_t v82 = v78;
        *((void *)&v177 + 1) = v77;
        uint64_t v178 = v76;
        unsigned int v179 = v75;
        unsigned __int8 v181 = BYTE6(v75);
        unsigned __int16 v180 = WORD2(v75);
        uint64_t v182 = v153;
        sub_1000555D0(v171, v81);
        swift_unknownObjectRetain(v74);
        swift_retain();
        sub_10001DBCC();
        sub_1000555E4(v154, v82, v77);
        swift_bridgeObjectRetain();
        sub_1001738D4((uint64_t)&v171);
        __n128 v83 = sub_100173D4C();
        *(_OWORD *)((char *)v2 + 24) = v84;
        *(_OWORD *)((char *)v2 + 4sub_10019B2E8(v0, 0) = v84;
        *(_OWORD *)((char *)v2 + 56) = v84;
        *(_OWORD *)((char *)v2 + 7sub_100019F7C(v0 + 2) = v84;
        *((void *)v2 + 15) = 0LL;
        *(_OWORD *)((char *)v2 + 88) = v84;
        *(_OWORD *)((char *)v2 + 104) = v84;
        sub_100173D70(v85, v86, v87, v88, v89, v90, v91, v92, v83);
        sub_1001730EC(a1);
        sub_100034F80(v168, v162, v165, 2);
        swift_release();
        return sub_100173C88(v155, v156, v74, v159, v80, v79, v157, v154, v82, v77);
      }

      uint64_t v26 = v168;
      uint64_t v27 = v16;
      uint64_t v28 = v17;
      char v29 = 2;
      return sub_100034F80(v26, v27, v28, v29);
    }

    unint64_t v2 = sub_1001724B0((uint64_t)&v171);
    if (!*(void *)(v18 + 16) || (uint64_t v19 = v18, !*(void *)(v18 + 72)))
    {
LABEL_16:
      ((void (*)(__int128 *, void))v2)(&v171, 0LL);
      uint64_t v26 = v14;
      uint64_t v27 = v16;
      uint64_t v28 = v17;
      char v29 = 1;
      return sub_100034F80(v26, v27, v28, v29);
    }

    Swift::UInt32 v20 = *(_DWORD *)(v18 + 84);
    swift_beginAccess(v14 + 24, &v169, 0LL, 0LL);
    if (HIDWORD(v16) < v16)
    {
      __break(1u);
    }

    else
    {
      uint64_t v21 = *(void *)(v14 + 24) + ((v17 >> 24) & 0xFFFF00 | BYTE6(v17)) + v16;
      int v22 = ByteBuffer._setBytes(_:at:)(v21, v21 + (HIDWORD(v16) - v16), v20);
      int v23 = *(_DWORD *)(v19 + 84);
      BOOL v24 = __CFADD__(v23, v22);
      int v25 = v23 + v22;
      if (!v24)
      {
        *(_DWORD *)(v19 + 84) = v25;
        goto LABEL_16;
      }
    }

    __break(1u);
    goto LABEL_115;
  }

  uint64_t v54 = *(unsigned int *)(v12 + 48);
  uint64_t v167 = v12;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100187550(v54, v16, v17);
  *((_BYTE *)v2 + 16) = (v55 & 1) == 0;
  uint64_t v56 = *(void *)(v16 + 16);
  if (v56)
  {
    unint64_t v164 = v17;
    uint64_t v158 = a1;
    swift_bridgeObjectRetain_n(v16, 2LL);
    uint64_t v161 = v16;
    uint64_t v61 = (uint64_t *)(v16 + 56);
    uint64_t v62 = _swiftEmptyArrayStorage;
    do
    {
      unint64_t v64 = *(v61 - 3);
      unint64_t v63 = *(v61 - 2);
      uint64_t v66 = *(v61 - 1);
      uint64_t v65 = *v61;
      if ((v63 & 0x1000000000000000LL) != 0
        || ((v63 & 0x2000000000000000LL) != 0
          ? (uint64_t v68 = HIBYTE(v63) & 0xF,
             *(void *)&__int128 v171 = *(v61 - 3),
             *((void *)&v171 + 1) = v63 & 0xFFFFFFFFFFFFFFLL,
             uint64_t v67 = &v171)
          : (v64 & 0x1000000000000000LL) == 0
          ? (uint64_t v67 = (__int128 *)sub_100173DCC())
          : (__int128 *)(uint64_t v67 = (__int128 *)((v63 & 0xFFFFFFFFFFFFFFFLL) + 32), v68 = v64 & 0xFFFFFFFFFFFFLL),
            sub_100188130(v67, v68, 0x2D746E65746E6F63LL, 0xEE006874676E656CLL),
            (v69 & 0xFE) == 2))
      {
        char v69 = sub_100188228(0x2D746E65746E6F63uLL, 0xEE006874676E656CLL, v64, v63, v57, v58, v59, v60);
      }

      if ((v69 & 1) != 0)
      {
        swift_bridgeObjectRetain_n(v65, 2LL);
        sub_10001DBCC();
        if ((swift_isUniquelyReferenced_nonNull_native(v62) & 1) == 0)
        {
          sub_100173DF4();
          uint64_t v62 = v72;
        }

        unint64_t v70 = v62[2];
        if (v70 >= v62[3] >> 1)
        {
          sub_100173DF4();
          uint64_t v62 = v73;
        }

        v62[2] = v70 + 1;
        uint64_t v71 = &v62[2 * v70];
        v71[4] = v66;
        v71[5] = v65;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      v61 += 4;
      --v56;
    }

    while (v56);
    uint64_t v16 = v161;
    swift_bridgeObjectRelease_n(v161, 2LL);
    a1 = v158;
    unint64_t v17 = v164;
  }

  else
  {
    uint64_t v62 = _swiftEmptyArrayStorage;
  }

  if (v62[2])
  {
    uint64_t v94 = v62[4];
    unint64_t v93 = v62[5];
    sub_10001DBCC();
    swift_bridgeObjectRelease();
    uint64_t v95 = HIBYTE(v93) & 0xF;
    uint64_t v96 = v94 & 0xFFFFFFFFFFFFLL;
    if ((v93 & 0x2000000000000000LL) != 0 ? HIBYTE(v93) & 0xF : v94 & 0xFFFFFFFFFFFFLL)
    {
      if ((v93 & 0x1000000000000000LL) != 0)
      {
        uint64_t v99 = sub_100161AEC(v94, v93, 10LL);
        LOBYTE(v6sub_100019F7C(v0 + 2) = v152;
LABEL_89:
        swift_bridgeObjectRelease();
        uint64_t v101 = 0LL;
        uint64_t v102 = 0LL;
        if ((v62 & 1) == 0 && v99 >= 1)
        {
          uint64_t v112 = sub_100094338();
          uint64_t v114 = v113;
          uint64_t ObjectType = swift_getObjectType(v112);
          uint64_t v116 = (uint64_t (*)(void))(*(uint64_t (**)(uint64_t, uint64_t))(v114 + 16))( ObjectType,  v114);
          uint64_t v118 = v117;
          uint64_t v119 = v16;
          uint64_t v121 = v120;
          uint64_t v123 = v122;
          swift_unknownObjectRelease(v112);
          type metadata accessor for ByteBuffer._Storage();
          uint64_t v124 = v121;
          uint64_t v16 = v119;
          static ByteBuffer._Storage.reallocated(minimumCapacity:allocator:)(v99, v116, v118, v124, v123);
          uint64_t v101 = v125;
          uint64_t v102 = *(unsigned int *)(v125 + 16);
        }

        goto LABEL_92;
      }

      if ((v93 & 0x2000000000000000LL) == 0)
      {
        if ((v94 & 0x1000000000000000LL) != 0)
        {
          uint64_t v98 = (unsigned __int8 *)((v93 & 0xFFFFFFFFFFFFFFFLL) + 32);
LABEL_60:
          uint64_t v99 = (uint64_t)sub_100161AC4(v98, v96);
          LOBYTE(v6sub_100019F7C(v0 + 2) = v100 & 1;
          goto LABEL_89;
        }

LABEL_115:
        uint64_t v98 = (unsigned __int8 *)sub_100173DCC();
        goto LABEL_60;
      }

      *(void *)&__int128 v171 = v94;
      *((void *)&v171 + 1) = v93 & 0xFFFFFFFFFFFFFFLL;
      if (v94 == 43)
      {
        if (!v95) {
          goto LABEL_117;
        }
        if (v95 == 1) {
          goto LABEL_86;
        }
        sub_10005768C();
        if (!v105 && v24) {
          goto LABEL_86;
        }
        uint64_t v99 = v107;
        if (v106 != 2)
        {
          sub_10005768C();
          if (!v105 && v24) {
            goto LABEL_86;
          }
          uint64_t v99 = 10LL * v99 + v109;
          if (v108 != 3)
          {
            while (1)
            {
              sub_100024EAC();
              if (!v105 && v24) {
                goto LABEL_86;
              }
              sub_100173D98();
              if (!v105) {
                goto LABEL_86;
              }
              uint64_t v99 = v111 + v110;
              if (__OFADD__(v111, v110)) {
                goto LABEL_86;
              }
              sub_100173DAC();
              if (v105) {
                goto LABEL_89;
              }
            }
          }
        }
      }

      else
      {
        if (v94 == 45)
        {
          if (v95)
          {
            if (v95 == 1) {
              goto LABEL_86;
            }
            sub_10005768C();
            if (!v105 && v24) {
              goto LABEL_86;
            }
            if (v103 == 2)
            {
              LOBYTE(v6sub_100019F7C(v0 + 2) = 0;
              uint64_t v99 = -(uint64_t)v104;
              goto LABEL_89;
            }

            uint64_t v99 = -10LL * v104 - (BYTE2(v94) - 48);
            if (v103 != 3)
            {
              while (1)
              {
                sub_100024EAC();
                if (!v105 && v24) {
                  goto LABEL_86;
                }
                sub_100173D98();
                if (!v105) {
                  goto LABEL_86;
                }
                uint64_t v99 = v151 - v150;
                if (__OFSUB__(v151, v150)) {
                  goto LABEL_86;
                }
                sub_100173DAC();
                if (v105) {
                  goto LABEL_89;
                }
              }
            }

            goto LABEL_88;
          }

          __break(1u);
LABEL_117:
          __break(1u);
        }

        if (!v95 || (v94 - 48) > 9u)
        {
LABEL_86:
          uint64_t v99 = 0LL;
          LOBYTE(v6sub_100019F7C(v0 + 2) = 1;
          goto LABEL_89;
        }

        uint64_t v99 = (v94 - 48);
        if (v95 != 1)
        {
          sub_10005768C();
          if (!v105 && v24) {
            goto LABEL_86;
          }
          uint64_t v99 = 10LL * (v94 - 48) + v147;
          if (v146 != 2)
          {
            while (1)
            {
              sub_100024EAC();
              if (!v105 && v24) {
                goto LABEL_86;
              }
              sub_100173D98();
              if (!v105) {
                goto LABEL_86;
              }
              uint64_t v99 = v149 + v148;
              if (__OFADD__(v149, v148)) {
                goto LABEL_86;
              }
              sub_100173DAC();
              if (v105) {
                goto LABEL_89;
              }
            }
          }
        }
      }

LABEL_88:
      LOBYTE(v6sub_100019F7C(v0 + 2) = 0;
      goto LABEL_89;
    }
  }

  swift_bridgeObjectRelease();
  uint64_t v101 = 0LL;
  uint64_t v102 = 0LL;
LABEL_92:
  uint64_t v126 = *(void *)(a1 + 32);
  uint64_t v127 = *(void *)(v126 + 56);
  uint64_t v128 = swift_unknownObjectRetain(*(void *)(v126 + 48));
  sub_1001BD04C(v128, v127, v167, v16, v17, v101, 0LL, v102, (uint64_t)&v171);
  uint64_t v129 = v172;
  __int128 v163 = v173;
  __int128 v166 = v171;
  uint64_t v130 = v174;
  uint64_t v131 = v175;
  uint64_t v132 = v176;
  __int128 v160 = v177;
  uint64_t v133 = v178;
  uint64_t v134 = v16;
  unint64_t v135 = v179 | ((unint64_t)(v180 | (v181 << 16)) << 32);
  uint64_t v136 = v182;
  sub_100034F80(v167, v134, v17, 0);
  sub_10004BDB4((uint64_t)v2 + 24, (uint64_t)&v169);
  uint64_t v137 = *((void *)v2 + 3);
  unint64_t v138 = *((void *)v2 + 4);
  uint64_t v139 = *((void *)v2 + 5);
  uint64_t v140 = *((void *)v2 + 6);
  uint64_t v141 = *((void *)v2 + 7);
  uint64_t v142 = *((void *)v2 + 8);
  uint64_t v143 = *((void *)v2 + 9);
  uint64_t v144 = *((void *)v2 + 10);
  __int128 v145 = *(_OWORD *)((char *)v2 + 88);
  *(_OWORD *)((char *)v2 + 24) = v166;
  *((void *)v2 + 5) = v129;
  *((_OWORD *)v2 + 3) = v163;
  *((void *)v2 + 8) = v130;
  *((void *)v2 + 9) = v131;
  *((void *)v2 + 1sub_10019B2E8(v0, 0) = v132;
  *(_OWORD *)((char *)v2 + 88) = v160;
  *((void *)v2 + sub_100019F7C(v0 + 13) = v133;
  *((void *)v2 + 14) = v135;
  *((void *)v2 + 15) = v136;
  return sub_100173C88(v137, v138, v139, v140, v141, v142, v143, v144, v145, *((uint64_t *)&v145 + 1));
}

uint64_t sub_1001730EC(uint64_t a1)
{
  uint64_t v4 = sub_100019310((uint64_t)&unk_10028C3B8, 32LL);
  sub_100173DBC(v4);
  sub_10002A4C8();
  sub_100171F08( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/HTTPHandler.swift",  104LL,  2LL,  83LL,  (uint64_t)sub_100173C1C,  v2);
  sub_10002A5A4();
  uint64_t v5 = sub_100019310((uint64_t)&unk_10028C3E0, 32LL);
  sub_100173DBC(v5);
  sub_10002A4C8();
  sub_1001723F0((uint64_t)sub_100173C28, v2);
  sub_100024F0C();
  sub_10002A5A4();
  uint64_t v6 = sub_100019310((uint64_t)&unk_10028C408, 32LL);
  *(void *)(v6 + 16) = v1;
  *(void *)(v6 + 24) = a1;
  swift_retain();
  sub_10002A4C8();
  ChannelPipeline.syncOperations.getter();
  swift_retain();
  sub_1000FEED0();
  sub_10002A524();
  return swift_release();
}

uint64_t sub_1001731E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  int v3 = *(_DWORD *)(a1 + 32);
  __int16 v4 = *(_WORD *)(a1 + 36);
  char v5 = *(_BYTE *)(a1 + 38);
  uint64_t v12 = sub_1000175B0(&qword_1002AA1A0);
  v7[0] = v1;
  v7[1] = v2;
  char v10 = v5;
  __int16 v9 = v4;
  int v8 = v3;
  char v11 = 1;
  char v13 = 2;
  swift_retain();
  ChannelHandlerContext.write(_:promise:)();
  return sub_1000324E8((uint64_t)v7);
}

uint64_t sub_100173274(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  int v5 = a3;
  uint64_t v10 = sub_1000175B0(&qword_1002AA1A0);
  v7[0] = a1;
  v7[1] = a2;
  int v8 = v5;
  int v9 = 0;
  char v11 = 2;
  swift_retain();
  swift_bridgeObjectRetain();
  ChannelHandlerContext.write(_:promise:)();
  return sub_1000324E8((uint64_t)v7);
}

uint64_t sub_1001732F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  unsigned __int8 v30 = *(_BYTE *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v31 = *(void *)(a1 + 24);
  unint64_t v32 = *(void *)(a1 + 48);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 62);
  unsigned int v9 = *(unsigned __int16 *)(a1 + 60);
  uint64_t v10 = *(unsigned int *)(a1 + 56);
  uint64_t v34 = v5;
  uint64_t v29 = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  unsigned __int8 v28 = sub_10002D0E0();
  uint64_t v11 = sub_100033870(&v34, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10003251C);
  if (*(void *)(v34 + 16) < v11)
  {
    __break(1u);
    goto LABEL_24;
  }

  sub_100033B48();
  if (v7)
  {
    v35[0] = v31;
    v35[1] = v6;
    v35[2] = v7;
    v35[3] = v32;
    unint64_t v12 = v10 | ((unint64_t)(v9 | ((_DWORD)v8 << 16)) << 32);
    int v36 = v12;
    __int16 v37 = WORD2(v12);
    char v38 = BYTE6(v12);
    unint64_t v33 = HIDWORD(v32);
    sub_1000555E4(v31, v6, v7);
    swift_retain();
    a3 = (uint64_t)&v33;
    uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    uint64_t v8 = v13;
    if ((sub_10002ACF8(0x2D746E65746E6F63uLL, 0xEE006874676E656CLL) & 1) == 0)
    {
      a3 = v34;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native(a3) & 1) != 0) {
        goto LABEL_5;
      }
      goto LABEL_25;
    }

uint64_t sub_100173820()
{
  uint64_t v3 = sub_1000175B0(&qword_1002AA1A0);
  memset(v1, 0, sizeof(v1));
  char v2 = 2;
  char v4 = 2;
  sub_10002CDE8();
  ChannelHandlerContext.writeAndFlush(_:promise:)();
  swift_release();
  return sub_1000324E8((uint64_t)v1);
}

void sub_1001738A0(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 16) == 1) {
    ChannelHandlerContext.close(mode:promise:)();
  }
}

void sub_1001738D4(uint64_t a1)
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1 + 128);
  if (Strong)
  {
    uint64_t v4 = Strong;
    uint64_t v5 = *(void *)(v1 + 136);
    uint64_t ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 8))(a1, ObjectType, v5);
    swift_unknownObjectRelease(v4);
  }

  else
  {
    sub_1000ACB64(0x6E756F6620746F4ELL, 0xE900000000000064LL, 6u, (uint64_t)v15);
    uint64_t v7 = v15[1];
    uint64_t v8 = v15[2];
    uint64_t v14 = v15[0];
    unsigned int v9 = sub_10001ED94();
    Swift::UInt16 v10 = v9;
    unsigned int v11 = HIWORD(v9);
    uint64_t v12 = type metadata accessor for HTTPResponseHead._Storage();
    uint64_t v13 = sub_100019310(v12, 44LL);
    *(void *)(v13 + 16) = 0LL;
    *(void *)(v13 + 24) = 0LL;
    *(void *)(v13 + 3sub_100019F7C(v0 + 2) = 25LL;
    *(_WORD *)(v13 + 4sub_10019B2E8(v0, 0) = v10;
    *(_WORD *)(v13 + 4sub_100019F7C(v0 + 2) = v11;
    swift_getObjectType(*(void *)(a1 + 16));
    EventLoop.makeSucceededFuture<A>(_:file:line:)();
    swift_bridgeObjectRelease();
    swift_release();
    sub_100039090(v14, v7, v8);
  }

  sub_100173D7C();
}

void sub_100173A50(uint64_t a1)
{
  uint64_t v2 = v11[1];
  uint64_t v3 = v11[2];
  uint64_t v10 = v11[0];
  unsigned int v4 = sub_10001ED94();
  Swift::UInt16 v5 = v4;
  unsigned int v6 = HIWORD(v4);
  uint64_t v7 = type metadata accessor for HTTPResponseHead._Storage();
  uint64_t v8 = sub_100019310(v7, 44LL);
  *(void *)(v8 + 16) = 0LL;
  *(void *)(v8 + 24) = 0LL;
  *(void *)(v8 + 3sub_100019F7C(v0 + 2) = 24LL;
  *(_WORD *)(v8 + 4sub_10019B2E8(v0, 0) = v5;
  *(_WORD *)(v8 + 4sub_100019F7C(v0 + 2) = v6;
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 48LL);
  swift_getObjectType(v9);
  swift_unknownObjectRetain(v9);
  EventLoop.makeSucceededFuture<A>(_:file:line:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease(v9);
  sub_100039090(v10, v2, v3);
  sub_100173D7C();
}

uint64_t sub_100173BA8()
{
  return swift_deallocClassInstance(v0, 144LL, 7LL);
}

uint64_t type metadata accessor for HTTPHandler()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService11HTTPHandler);
}

uint64_t sub_100173C1C(uint64_t a1)
{
  return sub_1001732F0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100173C28()
{
  return sub_100173820();
}

uint64_t sub_100173C34()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100173C60(uint64_t a1)
{
}

uint64_t sub_100173C68(uint64_t a1, uint64_t (*a2)(uint64_t *))
{
  return sub_100172454(*(void *)a1, *(_BYTE *)(a1 + 8), a2);
}

uint64_t sub_100173C80(uint64_t a1)
{
  return sub_100173C68(a1, *(uint64_t (**)(uint64_t *))(v1 + 16));
}

uint64_t sub_100173C88( uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a3)
  {
    sub_10003907C(result, a2);
    swift_bridgeObjectRelease();
    swift_release();
    swift_unknownObjectRelease(a3);
    sub_100039090(a8, a9, a10);
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_100173D1C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

__n128 sub_100173D4C()
{
  return *(__n128 *)(v0 + 88);
}

uint64_t sub_100173D70( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  return sub_100173C88(a1, a2, a3, a4, a5, a6, a7, a8, a9.n128_i64[0], a9.n128_i64[1]);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100173DBC(uint64_t a1)
{
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = v1;
  return swift_retain(v2);
}

uint64_t sub_100173DCC()
{
  return _StringObject.sharedUTF8.getter(v0);
}

  ;
}

uint64_t sub_100173DEC()
{
  return sub_100029DF4(v0);
}

void sub_100173DF4()
{
}

uint64_t sub_100173E00( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  uint64_t v70 = a1;
  uint64_t v71 = a2;
  __int128 v72 = a10;
  __int128 v73 = a9;
  uint64_t v62 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  uint64_t v61 = *(void *)(v62 - 8);
  sub_100043FD8();
  __chkstk_darwin(v19);
  sub_1000227D0();
  uint64_t v66 = v20;
  uint64_t v65 = type metadata accessor for P256.Signing.PublicKey(0LL);
  uint64_t v64 = *(void *)(v65 - 8);
  sub_100043FD8();
  __chkstk_darwin(v21);
  sub_1000227D0();
  uint64_t v63 = v22;
  sub_1000175B0(&qword_1002B77F8);
  sub_100043FD8();
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v60 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = type metadata accessor for P256.Signing.ECDSASignature(0LL);
  uint64_t v68 = *(void *)(v26 - 8);
  uint64_t v69 = v26;
  sub_100043FD8();
  __chkstk_darwin(v27);
  sub_1000227D0();
  uint64_t v67 = v28;
  uint64_t v29 = sub_100174414( a3,  a4,  *a13,  a13[1],  a5,  a6,  a7,  a8,  v73,  *((uint64_t *)&v73 + 1),  v72,  *((uint64_t *)&v72 + 1),  a11,  a12);
  if (v30 >> 60 == 15) {
    goto LABEL_4;
  }
  uint64_t v31 = v29;
  uint64_t v32 = v30;
  uint64_t v33 = Data.init(base64Encoded:options:)(v70, v71, 1LL);
  if (v34 >> 60 != 15)
  {
    uint64_t v37 = v33;
    unint64_t v38 = v34;
    sub_100047A48((uint64_t)(a13 + 4), (uint64_t)v76);
    sub_100047A48((uint64_t)v76, (uint64_t)&v77);
    int v39 = v78;
    if (v78)
    {
      int v40 = v77;
      if (qword_1002A8D90 != -1) {
        swift_once(&qword_1002A8D90, sub_100183E34);
      }
      uint64_t v41 = type metadata accessor for Logger(0LL);
      uint64_t v42 = sub_100018F68(v41, (uint64_t)qword_1002EB9D0);
      __n128 v43 = (os_log_s *)Logger.logObject.getter(v42);
      os_log_type_t v44 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = (uint8_t *)sub_100019464(2LL);
        *(_WORD *)uint64_t v45 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v43,  v44,  "Attempting legacy verification for offer signing key generated in Xcode 11",  v45,  2u);
        sub_10001A408((uint64_t)v45);
      }

      char v35 = sub_100174650(v37, v38, v31, v32, v40, v39, v46, v47);
      sub_100174CBC();
    }

    else
    {
      uint64_t v74 = v37;
      unint64_t v75 = v38;
      sub_10003AA88(v37, v38);
      unint64_t v48 = sub_1000EC874();
      P256.Signing.ECDSASignature.init<A>(derRepresentation:)(&v74, &type metadata for Data, v48);
      *(void *)&__int128 v73 = v48;
      uint64_t v49 = v69;
      sub_10001762C((uint64_t)v25, 0LL, 1LL, v69);
      uint64_t v50 = v68;
      uint64_t v51 = v67;
      (*(void (**)(uint64_t, char *, uint64_t))(v68 + 32))(v67, v25, v49);
      uint64_t v52 = Data.init(base64Encoded:options:)(a13[2], a13[3], 0LL);
      if (v53 >> 60 == 15)
      {
        (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v51, v49);
        sub_100174CBC();
        goto LABEL_3;
      }

      uint64_t v74 = v52;
      unint64_t v75 = v53;
      uint64_t v54 = v52;
      unint64_t v55 = v53;
      sub_10003AA88(v52, v53);
      unint64_t v56 = sub_100174614();
      uint64_t v57 = v66;
      uint64_t v58 = P256.Signing.PrivateKey.init<A>(derRepresentation:)(&v74, &type metadata for Data, v56);
      uint64_t v59 = v63;
      P256.Signing.PrivateKey.publicKey.getter(v58);
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v57, v62);
      uint64_t v74 = v31;
      unint64_t v75 = v32;
      char v35 = P256.Signing.PublicKey.isValidSignature<A>(_:for:)(v51, &v74, &type metadata for Data, v73);
      sub_10003AACC(v54, v55);
      sub_100174CBC();
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v59, v65);
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v51, v69);
    }

    sub_100174CC8();
    return v35 & 1;
  }

uint64_t sub_100174414( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v38 = a14;
  uint64_t v39 = a7;
  uint64_t v36 = a5;
  uint64_t v37 = a13;
  uint64_t v34 = a3;
  uint64_t v35 = a11;
  uint64_t v19 = type metadata accessor for String.Encoding(0LL);
  uint64_t v40 = *(void *)(v19 - 8);
  uint64_t v41 = v19;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_1000175B0(&qword_1002A9098);
  uint64_t v23 = swift_allocObject(v22, 144LL, 7LL);
  *(_OWORD *)(v23 + 16) = xmmword_100206BB0;
  *(void *)(v23 + 3sub_100019F7C(v0 + 2) = a1;
  *(void *)(v23 + 4sub_10019B2E8(v0, 0) = a2;
  *(void *)(v23 + 48) = v34;
  *(void *)(v23 + 56) = a4;
  *(void *)(v23 + 64) = v36;
  *(void *)(v23 + 7sub_100019F7C(v0 + 2) = a6;
  uint64_t v24 = v38;
  *(void *)(v23 + 8sub_10019B2E8(v0, 0) = v39;
  *(void *)(v23 + 88) = a8;
  *(void *)(v23 + 96) = a9;
  *(void *)(v23 + 104) = a10;
  *(void *)(v23 + 11sub_100019F7C(v0 + 2) = v35;
  *(void *)(v23 + 12sub_10019B2E8(v0, 0) = a12;
  *(void *)(v23 + sub_100081CEC(v0 + 128) = v37;
  *(void *)(v23 + 136) = v24;
  uint64_t v42 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v25 = sub_1000175B0(&qword_1002A93B8);
  unint64_t v26 = sub_10007D714();
  uint64_t v27 = BidirectionalCollection<>.joined(separator:)(10715618LL, 0xA300000000000000LL, v25, v26);
  uint64_t v29 = v28;
  uint64_t v30 = swift_bridgeObjectRelease();
  static String.Encoding.utf8.getter(v30);
  uint64_t v31 = String.data(using:allowLossyConversion:)(v21, 0LL, v27, v29);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v21, v41);
  return v31;
}

uint64_t sub_1001745D4(uint64_t a1)
{
  uint64_t v2 = sub_1000175B0(&qword_1002B77F8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_100174614()
{
  unint64_t result = qword_1002B7800[0];
  if (!qword_1002B7800[0])
  {
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, qword_1002B7800);
  }

  return result;
}

uint64_t sub_100174650(int a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8)
{
  uint64_t v10 = sub_100174714( a5,  a6,  a3,  a4,  a5,  a6,  a7,  a8,  v17,  v18,  SHIDWORD(v18),  v19[0],  (uint64_t)v19[1],  (uint64_t)v19[2],  (uint64_t)v19[3],  (uint64_t)v19[4],  v20,  v21,  v22,  v23,  v24);
  if (v10)
  {
    unsigned int v11 = (void *)v10;
    uint64_t v12 = type metadata accessor for ECDSASignatureVerifier();
    swift_initStackObject(v12, v19);
    ECDSASignatureVerifier.init(publicKey:)((uint64_t)v11);
    id v13 = v11;
    ECDSASignatureVerifier.verify(data:signature:)(a3, a4);
    char v15 = v14;
    swift_release();
  }

  else
  {
    char v15 = 0;
  }

  return v15 & 1;
}

uint64_t sub_100174714( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, os_log_t log, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  if (v21 >> 60 != 15) {
    __asm { BR              X10 }
  }

  return 0LL;
}

uint64_t sub_100174CBC()
{
  return sub_10003AACC(v0, v1);
}

uint64_t sub_100174CC8()
{
  return sub_10003AACC(v1, v0);
}

uint64_t sub_100174CD4()
{
  return sub_10003AACC(*(void *)(v0 - 224), *(void *)(v0 - 208));
}

void sub_100174CE0()
{
  uint64_t v1 = sub_1000175B0(&qword_1002B3968);
  uint64_t inited = swift_initStackObject(v1, v5);
  *(_OWORD *)(inited + 16) = xmmword_100206BC0;
  *(void *)(inited + 3sub_100019F7C(v0 + 2) = 0x6853796C696D6166LL;
  *(void *)(inited + 4sub_10019B2E8(v0, 0) = 0xEF656C6261657261LL;
  *(NSNumber *)(inited + 48) = Bool._bridgeToObjectiveC()();
  *(void *)(inited + 56) = 0xD000000000000014LL;
  *(void *)(inited + 64) = 0x8000000100221020LL;
  sub_10001672C(0LL, qword_1002AECD0, &OBJC_CLASS___NSNumber_ptr);
  *(NSNumber *)(inited + 7sub_100019F7C(v0 + 2) = NSNumber.init(BOOLeanLiteral:)(0);
  strcpy((char *)(inited + 80), "hasPromoOffer");
  *(_WORD *)(inited + 94) = -4864;
  *(NSNumber *)(inited + 96) = NSNumber.init(BOOLeanLiteral:)(0);
  *(void *)(inited + 104) = 0xD000000000000011LL;
  *(void *)(inited + 11sub_100019F7C(v0 + 2) = 0x8000000100221040LL;
  uint64_t v3 = *(void *)(v0 + 56);
  if ((unint64_t)v3 >> 62)
  {
    if (v3 < 0) {
      uint64_t v4 = *(void *)(v0 + 56);
    }
    else {
      uint64_t v4 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease();
  }

  *(NSNumber *)(inited + 12sub_10019B2E8(v0, 0) = Int._bridgeToObjectiveC()();
  *(void *)(inited + sub_100081CEC(v0 + 128) = 0xD000000000000015LL;
  *(void *)(inited + 136) = 0x8000000100221060LL;
  *(NSNumber *)(inited + 144) = NSNumber.init(integerLiteral:)(0LL);
  *(void *)(inited + 15sub_100019F7C(v0 + 2) = 1701869940LL;
  *(void *)(inited + 16sub_10019B2E8(v0, 0) = 0xE400000000000000LL;
  __asm { BR              X10 }

unint64_t sub_100175040(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD000000000000021LL;
  }
  else {
    return 0xD00000000000001ALL;
  }
}

uint64_t sub_10017507C( void (*a1)(char *, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v48 = a5;
  uint64_t v49 = a8;
  unint64_t v55 = a1;
  uint64_t v56 = a2;
  uint64_t v47 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  sub_1000227D0();
  uint64_t v57 = v12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v13 + 8),  v14,  &protocol requirements base descriptor for Sequence,  &associated type descriptor for Sequence.Element);
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v17 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v52 = (char *)&v43 - v18;
  uint64_t v19 = a4;
  __chkstk_darwin(v17);
  sub_1000227D0();
  uint64_t v51 = v20;
  uint64_t v21 = swift_getAssociatedTypeWitness( 0LL,  a6,  a3,  &protocol requirements base descriptor for Collection,  &associated type descriptor for Collection.Index);
  uint64_t v50 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  sub_100092F38();
  uint64_t v46 = v22 - v23;
  __chkstk_darwin(v24);
  unint64_t v26 = (char *)&v43 - v25;
  uint64_t v53 = v8;
  uint64_t v27 = a6;
  uint64_t v28 = dispatch thunk of Collection.count.getter(a3, a6);
  if (!v28) {
    return static Array._allocateUninitialized(_:)(0LL, v19);
  }
  Swift::Int v29 = v28;
  uint64_t v44 = v21;
  uint64_t v30 = v16;
  uint64_t v61 = ContiguousArray.init()(v19);
  uint64_t v54 = type metadata accessor for ContiguousArray(0LL);
  ContiguousArray.reserveCapacity(_:)(v29);
  uint64_t v45 = v26;
  uint64_t v31 = a3;
  uint64_t v32 = v53;
  uint64_t v33 = v31;
  uint64_t result = dispatch thunk of Collection.startIndex.getter(v31, v27);
  if (v29 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v58 = v27;
    uint64_t v36 = v51;
    uint64_t v35 = v52;
    uint64_t v37 = v45;
    while (1)
    {
      uint64_t v38 = (void (*)(_BYTE *, void))dispatch thunk of Collection.subscript.read(v60, v37, v33, v58);
      (*(void (**)(char *))(v30 + 16))(v35);
      v38(v60, 0LL);
      uint64_t v39 = v59;
      v55(v35, v57);
      if (v39) {
        break;
      }
      uint64_t v59 = 0LL;
      sub_100176510();
      ContiguousArray.append(_:)(v36, v54);
      dispatch thunk of Collection.formIndex(after:)(v37, v33, v58);
      if (!--v29)
      {
        uint64_t v40 = v50;
        uint64_t v41 = v46;
        uint64_t v42 = v44;
        (*(void (**)(uint64_t, char *, uint64_t))(v50 + 32))(v46, v37, v44);
        _expectEnd<A>(of:is:)(v32, v41, v33, v58);
        (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v42);
        return v61;
      }
    }

    sub_100176510();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v37, v44);
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 32))(v49, v57, v48);
  }

  return result;
}

uint64_t Heap.init()(uint64_t a1)
{
  uint64_t v2 = static Array._allocateUninitialized(_:)(0LL, a1);
  return ContiguousArray.init(arrayLiteral:)(v2, a1);
}

uint64_t Heap.remove(value:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Optional(0LL, *(void *)(a2 + 16));
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v13 - v7;
  v13[1] = *v2;
  uint64_t v9 = sub_10017653C();
  uint64_t WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for ContiguousArray<A>, v9);
  Collection<>.firstIndex(of:)(&v14, a1, v9, WitnessTable, *(void *)(*(void *)(a2 + 24) + 8LL));
  int v11 = v15;
  if ((v15 & 1) == 0)
  {
    Heap._remove(index:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  return v11 ^ 1u;
}

void Heap.append(_:)()
{
  uint64_t v18 = v1;
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v4);
  sub_1001764D8();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v17 - v6;
  uint64_t v8 = _s25ASOctaneSupportXPCService4HeapV19underestimatedCountSivg_0();
  uint64_t v17 = v3;
  uint64_t v9 = sub_1000A4CBC();
  v10(v9);
  uint64_t v11 = type metadata accessor for ContiguousArray(0LL);
  ContiguousArray.append(_:)(v7, v11);
  if (v8 >= 1)
  {
    do
    {
      sub_100176554();
      unint64_t v12 = v8 - 1;
      uint64_t v13 = *(void *)(v18 + 24);
      sub_100176554();
      char v14 = dispatch thunk of static Comparable.< infix(_:_:)(v7, v0, v2, v13);
      unsigned __int8 v15 = *(void (**)(char *, uint64_t))(v17 + 8);
      v15(v0, v2);
      v15(v7, v2);
      if ((v14 & 1) == 0) {
        break;
      }
      unint64_t v19 = (unint64_t)(v8 - 1) >> 1;
      uint64_t v20 = v8;
      swift_getWitnessTable((const char *)&protocol conformance descriptor for ContiguousArray<A>, v11);
      uint64_t v16 = sub_100176520();
      MutableCollection.swapAt(_:_:)(v16);
      uint64_t v8 = (unint64_t)(v8 - 1) >> 1;
    }

    while (v12 > 1);
  }

  sub_10002A580();
}

void Heap.removeRoot()()
{
}

uint64_t Heap.comparator(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return dispatch thunk of static Comparable.< infix(_:_:)(a1, a2, a4, a5) & 1;
}

Swift::Int __swiftcall Heap.parentIndex(_:)(Swift::Int result)
{
  if (!__OFSUB__(result, 1LL)) {
    return (result - 1) / 2;
  }
  __break(1u);
  return result;
}

Swift::Int __swiftcall Heap.leftIndex(_:)(Swift::Int result)
{
  if (result + 0x4000000000000000LL >= 0) {
    return (2 * result) | 1;
  }
  __break(1u);
  return result;
}

Swift::Int __swiftcall Heap.rightIndex(_:)(Swift::Int result)
{
  if (result + 0x4000000000000000LL < 0)
  {
    __break(1u);
    goto LABEL_5;
  }

  BOOL v1 = __OFADD__(2 * result, 2LL);
  uint64_t result = 2 * result + 2;
  if (v1) {
LABEL_5:
  }
    __break(1u);
  return result;
}

Swift::Void __swiftcall Heap._heapify(_:)(Swift::Int a1)
{
  Swift::Int v3 = v2;
  uint64_t v5 = *(void *)(v4 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v2);
  sub_1001764D8();
  if (__chkstk_darwin(v7) + 0x4000000000000000LL < 0)
  {
    __break(1u);
    goto LABEL_15;
  }

  Swift::Int v8 = Heap.rightIndex(_:)(v3);
  uint64_t v9 = sub_100176560();
  if (__OFSUB__(v9, 1LL))
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    return;
  }

  Swift::Int v10 = v3;
  if (v9 - 1 >= ((2 * v3) | 1))
  {
    sub_100176490();
    sub_100176490();
    char v11 = sub_1001764FC();
    unint64_t v12 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v12(v1, v5);
    uint64_t v13 = sub_1000A4CBC();
    ((void (*)(uint64_t))v12)(v13);
    if ((v11 & 1) != 0) {
      Swift::Int v10 = (2 * v3) | 1;
    }
    else {
      Swift::Int v10 = v3;
    }
  }

  uint64_t v14 = sub_100176560();
  if (__OFSUB__(v14, 1LL)) {
    goto LABEL_16;
  }
  if (v14 - 1 >= v8)
  {
    sub_100176490();
    sub_100176490();
    char v15 = sub_1001764FC();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v16(v1, v5);
    uint64_t v17 = sub_1000A4CBC();
    ((void (*)(uint64_t))v16)(v17);
    if ((v15 & 1) != 0) {
      Swift::Int v10 = v8;
    }
  }

  if (v10 != v3)
  {
    sub_10017653C();
    sub_100128A84((const char *)&protocol conformance descriptor for ContiguousArray<A>);
    uint64_t v18 = sub_100176520();
    MutableCollection.swapAt(_:_:)(v18);
    Heap._heapify(_:)(v10);
  }

  sub_10002A580();
}

void Heap._heapRootify(index:key:)()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  int64_t v7 = v6;
  uint64_t v8 = *(void *)(v2 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v6);
  sub_100092F38();
  unint64_t v12 = (char *)(v10 - v11);
  __chkstk_darwin(v13);
  char v15 = (char *)&v27 - v14;
  uint64_t v16 = *v1;
  swift_retain();
  _s25ASOctaneSupportXPCService4HeapVyxSicig_0();
  uint64_t v30 = *(void *)(v3 + 24);
  LOBYTE(v3) = dispatch thunk of static Comparable.< infix(_:_:)(v15, v5, v8, v30);
  swift_release(v16);
  Swift::Int v29 = *(void (**)(char *, uint64_t))(v9 + 8);
  v29(v15, v8);
  if ((v3 & 1) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000033LL,  0x80000001002193E0LL,  "ASOctaneSupportXPCService/Heap.swift",  36LL,  2LL);
    __break(1u);
  }

  else
  {
    uint64_t v17 = type metadata accessor for ContiguousArray(0LL);
    ContiguousArray._makeMutableAndUnique()();
    uint64_t v18 = *v1;
    unint64_t v19 = sub_1000A4CBC();
    sub_1000EB130(v19, v20);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 24))( v18 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
    + *(void *)(v9 + 72) * v7,
      v5,
      v8);
    uint64_t v28 = v17;
    uint64_t v21 = v1;
    debugOnly(_:)(v17);
    if (v7 >= 1)
    {
      do
      {
        uint64_t v22 = *v21;
        swift_retain();
        sub_100176578();
        unint64_t v23 = v7 - 1;
        sub_100176578();
        char v24 = dispatch thunk of static Comparable.< infix(_:_:)(v15, v12, v8, v30);
        swift_release(v22);
        uint64_t v25 = v29;
        v29(v12, v8);
        v25(v15, v8);
        if ((v24 & 1) == 0) {
          break;
        }
        unint64_t v31 = (unint64_t)(v7 - 1) >> 1;
        int64_t v32 = v7;
        swift_getWitnessTable((const char *)&protocol conformance descriptor for ContiguousArray<A>, v28);
        uint64_t v26 = sub_100176520();
        MutableCollection.swapAt(_:_:)(v26);
        int64_t v7 = (unint64_t)(v7 - 1) >> 1;
      }

      while (v23 > 1);
    }

    sub_10002A580();
  }

void Heap._remove(index:)()
{
  uint64_t v47 = v2;
  uint64_t v48 = v3;
  uint64_t v4 = v0;
  unint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v46 = v9;
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v5);
  sub_100092F38();
  uint64_t v14 = v12 - v13;
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v43 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v43 - v19;
  ChannelPipeline.syncOperations.getter();
  sub_1001764F4();
  sub_10017649C();
  if (v1 < 1)
  {
    sub_10001762C(v8, 1LL, 1LL, v10);
    return;
  }

  uint64_t v45 = v8;
  sub_100176484();
  ChannelPipeline.syncOperations.getter();
  sub_1001764F4();
  sub_10017649C();
  if (v1 == 1)
  {
LABEL_5:
    sub_1001764CC();
    sub_100128A84((const char *)&protocol conformance descriptor for ContiguousArray<A>);
    uint64_t v28 = sub_100128A84((const char *)&protocol conformance descriptor for ContiguousArray<A>);
    sub_1001764B4(v28);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_6:
    uint64_t v29 = v45;
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v45, v20, v10);
    sub_10001762C(v29, 0LL, 1LL, v10);
    sub_10002A580();
    return;
  }

  sub_100176484();
  ChannelPipeline.syncOperations.getter();
  sub_1001764F4();
  sub_10017649C();
  if (__OFSUB__(v1, 1LL))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  sub_100176484();
  uint64_t v21 = *(void *)(v46 + 24);
  uint64_t v22 = sub_100176584();
  char v26 = dispatch thunk of static Equatable.== infix(_:_:)(v22, v23, v24, v25);
  uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v27(v14, v10);
  uint64_t v44 = v27;
  v27((uint64_t)v18, v10);
  if ((v26 & 1) != 0) {
    goto LABEL_5;
  }
  uint64_t v30 = *v4;
  swift_retain();
  unint64_t v43 = v6;
  sub_10017656C();
  swift_retain();
  uint64_t v31 = sub_1001764F4();
  swift_release(v30);
  if (__OFSUB__(v31, 1LL)) {
    goto LABEL_18;
  }
  sub_10017656C();
  uint64_t v32 = sub_100176584();
  char v35 = dispatch thunk of static Comparable.< infix(_:_:)(v32, v33, v34, v21);
  swift_release(v30);
  v44(v14, v10);
  sub_1001764A8();
  ChannelPipeline.syncOperations.getter();
  sub_1001764F4();
  sub_10017649C();
  BOOL v36 = __OFSUB__(v30, 1LL);
  if ((v35 & 1) == 0)
  {
    if (!v36)
    {
      sub_100176484();
      Heap._heapRootify(index:key:)();
      sub_1001764A8();
      sub_1001764CC();
      sub_100128A84((const char *)&protocol conformance descriptor for ContiguousArray<A>);
      uint64_t v42 = sub_100128A84((const char *)&protocol conformance descriptor for ContiguousArray<A>);
      sub_1001764B4(v42);
      sub_1001764A8();
      goto LABEL_6;
    }

    goto LABEL_20;
  }

  if (!v36)
  {
    sub_100176484();
    uint64_t v37 = sub_1001764CC();
    ContiguousArray._makeMutableAndUnique()();
    uint64_t v38 = *v4;
    Swift::Int v39 = v43;
    sub_1000EB130(v43, *v4);
    (*(void (**)(unint64_t, char *, uint64_t))(v11 + 40))( v38 + ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
    + *(void *)(v11 + 72) * v39,
      v18,
      v10);
    debugOnly(_:)(v37);
    uint64_t WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for ContiguousArray<A>, v37);
    uint64_t v41 = swift_getWitnessTable((const char *)&protocol conformance descriptor for ContiguousArray<A>, v37);
    RangeReplaceableCollection<>.removeLast()(v37, WitnessTable, v41);
    sub_1001764A8();
    Heap._heapify(_:)(v39);
    goto LABEL_6;
  }

void Heap.debugDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _s25ASOctaneSupportXPCService4HeapV19underestimatedCountSivg_0();
  if (v6 >= 1)
  {
    uint64_t v63 = a1;
    __chkstk_darwin(v6);
    _OWORD v56[2] = a2;
    v56[3] = a3;
    uint64_t v7 = type metadata accessor for ContiguousArray(0LL);
    swift_retain();
    uint64_t WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for ContiguousArray<A>, v7);
    uint64_t v10 = sub_10017507C( (void (*)(char *, uint64_t))sub_100176438,  (uint64_t)v56,  v7,  (uint64_t)&type metadata for String,  (uint64_t)&type metadata for Never,  WitnessTable,  (uint64_t)&protocol witness table for Never,  v9);
    swift_release();
    int64_t v11 = *(void *)(v10 + 16);
    int64_t v62 = v11;
    if (v11)
    {
      uint64_t v63 = (uint64_t)_swiftEmptyArrayStorage;
      sub_10003272C(0LL, v11, 0);
      uint64_t v12 = (void *)v63;
      uint64_t v13 = v10;
      uint64_t v14 = (uint64_t *)(v10 + 40);
      do
      {
        uint64_t v15 = *(v14 - 1);
        uint64_t v16 = *v14;
        swift_bridgeObjectRetain();
        uint64_t v17 = String.count.getter(v15, v16);
        swift_bridgeObjectRelease();
        uint64_t v63 = (uint64_t)v12;
        unint64_t v19 = v12[2];
        unint64_t v18 = v12[3];
        if (v19 >= v18 >> 1)
        {
          sub_10003272C((void *)(v18 > 1), v19 + 1, 1);
          uint64_t v12 = (void *)v63;
        }

        v14 += 2;
        v12[2] = v19 + 1;
        v12[v19 + 4] = v17;
        --v11;
      }

      while (v11);
      uint64_t v10 = v13;
      int64_t v11 = v62;
    }

    else
    {
      uint64_t v12 = _swiftEmptyArrayStorage;
    }

    Swift::Int v20 = sub_1000987E8(v12);
    char v22 = v21;
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {
      uint64_t v58 = a1;
      uint64_t v59 = a2;
      uint64_t v60 = a3;
      if (v11)
      {
        uint64_t v65 = _swiftEmptyArrayStorage;
        sub_100032050();
        uint64_t v23 = 0LL;
        uint64_t v24 = v65;
        uint64_t countAndFlagsBits = v10;
        object = (char *)(v10 + 32);
        do
        {
          uint64_t v25 = (uint64_t *)&object[16 * v23];
          uint64_t v27 = *v25;
          char v26 = (void *)v25[1];
          swift_bridgeObjectRetain_n(v26, 2LL);
          uint64_t v28 = String.count.getter(v27, v26);
          uint64_t v29 = v26;
          while (v28 < v20)
          {
            if ((sub_100176530() & 1) != 0)
            {
              uint64_t v63 = v27;
              unint64_t v64 = (unint64_t)v29;
              v31._uint64_t countAndFlagsBits = sub_100176548();
              String.append(_:)(v31);
            }

            else
            {
              uint64_t v63 = 32LL;
              unint64_t v64 = 0xE100000000000000LL;
              v30._uint64_t countAndFlagsBits = v27;
              v30._object = v29;
              String.append(_:)(v30);
              swift_bridgeObjectRelease();
            }

            uint64_t v27 = v63;
            uint64_t v29 = (void *)v64;
            uint64_t v28 = sub_100176530();
          }

          swift_bridgeObjectRelease();
          uint64_t v65 = v24;
          unint64_t v32 = v24[2];
          if (v32 >= v24[3] >> 1)
          {
            sub_100032050();
            uint64_t v24 = v65;
          }

          ++v23;
          void v24[2] = v32 + 1;
          uint64_t v33 = &v24[2 * v32];
          v33[4] = v27;
          v33[5] = v29;
        }

        while (v23 != v62);
        swift_bridgeObjectRelease();
      }

      else
      {
        swift_bridgeObjectRelease();
        uint64_t v24 = _swiftEmptyArrayStorage;
      }

      uint64_t v63 = 10LL;
      unint64_t v64 = 0xE100000000000000LL;
      v34._uint64_t countAndFlagsBits = sub_100176548();
      Swift::String v35 = String.init(repeating:count:)(v34, v20);
      uint64_t countAndFlagsBits = v35._countAndFlagsBits;
      int64_t v36 = v24[2];
      object = (char *)v35._object;
      int64_t v62 = v36;
      if (!v36)
      {
LABEL_36:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v55._uint64_t countAndFlagsBits = 10LL;
        v55._object = (void *)0xE100000000000000LL;
        String.append(_:)(v55);
        return;
      }

      Swift::Int v37 = 0LL;
      uint64_t v38 = (void **)(v24 + 5);
      while (1)
      {
        uint64_t v40 = (uint64_t)*(v38 - 1);
        Swift::Int v39 = *v38;
        swift_bridgeObjectRetain();
        sub_1001762E8(v37, v58, v20, v59, v60);
        Swift::Int v42 = v41;
        v43._uint64_t countAndFlagsBits = sub_100176548();
        Swift::String v45 = String.init(repeating:count:)(v43, v44);
        String.append(_:)(v45);
        swift_bridgeObjectRelease();
        v46._uint64_t countAndFlagsBits = v40;
        v46._object = v39;
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        v47._uint64_t countAndFlagsBits = sub_100176548();
        Swift::String v48 = String.init(repeating:count:)(v47, v42);
        String.append(_:)(v48);
        swift_bridgeObjectRelease();
        double v49 = log2((double)(v37 + 1));
        double v50 = v49;
        if ((~*(void *)&v49 & 0x7FF0000000000000LL) == 0) {
          break;
        }
        if (v49 <= -9.22337204e18) {
          goto LABEL_38;
        }
        if (v49 >= 9.22337204e18) {
          goto LABEL_39;
        }
        Swift::Int v51 = v37 + 2;
        double v52 = log2((double)(v37 + 2));
        if ((~*(void *)&v52 & 0x7FF0000000000000LL) == 0) {
          goto LABEL_40;
        }
        if (v52 <= -9.22337204e18) {
          goto LABEL_41;
        }
        if (v52 >= 9.22337204e18) {
          goto LABEL_42;
        }
        if (*(uint64_t *)&v50 == *(uint64_t *)&v52)
        {
          uint64_t v53 = countAndFlagsBits;
          unint64_t v54 = (unint64_t)object;
        }

        else
        {
          uint64_t v53 = 10LL;
          unint64_t v54 = 0xE100000000000000LL;
        }

        String.append(_:)(*(Swift::String *)&v53);
        v38 += 2;
        ++v37;
        if (v51 - 1 == v62) {
          goto LABEL_36;
        }
      }

      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
    }

    __break(1u);
  }

uint64_t sub_100176264@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v7 + 16))(v6);
  uint64_t result = String.init<A>(describing:)(v6, a2);
  *a3 = result;
  a3[1] = v9;
  return result;
}

Swift::Int sub_1001762E8(Swift::Int result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result + 0x4000000000000000LL < 0)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v9 = (2 * result) | 1;
  Swift::Int v10 = Heap.rightIndex(_:)(result);
  if (v9 >= _s25ASOctaneSupportXPCService4HeapV19underestimatedCountSivg_0()) {
    goto LABEL_7;
  }
  uint64_t result = sub_1001762E8(v9, a2, a3, a4, a5);
  Swift::Int v12 = result + v11;
  if (__OFADD__(result, v11))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  Swift::Int v13 = v12 + a3;
  if (!__OFADD__(v12, a3)) {
    goto LABEL_8;
  }
  __break(1u);
LABEL_7:
  Swift::Int v13 = 0LL;
LABEL_8:
  if (v10 >= _s25ASOctaneSupportXPCService4HeapV19underestimatedCountSivg_0()) {
    return v13;
  }
  uint64_t result = sub_1001762E8(v10, a2, a3, a4, a5);
  if (!__OFADD__(result, v14))
  {
    if (__OFADD__(result + v14, a3)) {
      __break(1u);
    }
    return v13;
  }

void sub_1001763D4(uint64_t a1)
{
}

void HeapIterator.next()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_100176420(uint64_t a1)
{
  return Heap.underestimatedCount.getter(*v1, *(void *)(a1 + 16));
}

uint64_t sub_100176438@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100176264(a1, *(void *)(v2 + 16), a2);
}

uint64_t type metadata accessor for Heap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Heap);
}

uint64_t sub_100176460(uint64_t a1)
{
  return swift_getWitnessTable(protocol conformance descriptor for HeapIterator<A>, a1);
}

uint64_t type metadata accessor for HeapIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HeapIterator);
}

uint64_t sub_100176484()
{
  return _s25ASOctaneSupportXPCService4HeapVyxSicig_0();
}

uint64_t sub_100176490()
{
  return _s25ASOctaneSupportXPCService4HeapVyxSicig_0();
}

uint64_t sub_10017649C()
{
  return swift_release(v0);
}

uint64_t sub_1001764A8()
{
  return v2(v1, v0);
}

uint64_t sub_1001764B4(uint64_t a1)
{
  return RangeReplaceableCollection<>.removeLast()(v1, v2, a1);
}

uint64_t sub_1001764CC()
{
  return type metadata accessor for ContiguousArray(0LL);
}

  ;
}

uint64_t sub_1001764F4()
{
  return _s25ASOctaneSupportXPCService4HeapV19underestimatedCountSivg_0();
}

uint64_t sub_1001764FC()
{
  return dispatch thunk of static Comparable.< infix(_:_:)(v2, v1, v0, *(void *)(v3 - 104));
}

uint64_t sub_100176510()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_100176520()
{
  return v0 - 88;
}

uint64_t sub_100176530()
{
  return String.count.getter(v0, v1);
}

uint64_t sub_10017653C()
{
  return type metadata accessor for ContiguousArray(0LL);
}

uint64_t sub_100176548()
{
  return 32LL;
}

uint64_t sub_100176554()
{
  return _s25ASOctaneSupportXPCService4HeapVyxSicig_0();
}

uint64_t sub_100176560()
{
  return _s25ASOctaneSupportXPCService4HeapV19underestimatedCountSivg_0();
}

uint64_t sub_10017656C()
{
  return _s25ASOctaneSupportXPCService4HeapVyxSicig_0();
}

uint64_t sub_100176578()
{
  return _s25ASOctaneSupportXPCService4HeapVyxSicig_0();
}

uint64_t sub_100176584()
{
  return v0;
}

void *sub_100176598(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    uint64_t v8 = 4LL;
    while (1)
    {
      id v9 = (a3 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, a3)
         : *(id *)(a3 + 8 * v8);
      Swift::Int v10 = v9;
      uint64_t v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1LL)) {
        break;
      }
      id v15 = v9;
      char v12 = a1(&v15);
      if (v4)
      {
        sub_100023EEC();

        return v10;
      }

      if ((v12 & 1) != 0)
      {
        sub_100023EEC();
        return v10;
      }

      ++v8;
      if (v11 == v7) {
        goto LABEL_11;
      }
    }

    __break(1u);
LABEL_16:
    if (a3 < 0) {
      uint64_t v14 = a3;
    }
    else {
      uint64_t v14 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
  }

void *sub_1001766AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v6)
  {
    while (1)
    {
      unint64_t v7 = 0LL;
      while ((a1 & 0xC000000000000001LL) != 0)
      {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, a1);
LABEL_7:
        id v9 = v8;
        unint64_t v10 = v7 + 1;
        if (__OFADD__(v7, 1LL)) {
          goto LABEL_20;
        }
        uint64_t v11 = sub_1000B3DDC();
        if (v11 == a2 && v12 == a3)
        {
          uint64_t v15 = swift_bridgeObjectRelease();
LABEL_15:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
          uint64_t v16 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
          uint64_t v17 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v9);
          specialized ContiguousArray._endMutation()(v17);
          goto LABEL_16;
        }

        char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, a2, a3, 0LL);
        uint64_t v15 = swift_bridgeObjectRelease();
        if ((v14 & 1) != 0) {
          goto LABEL_15;
        }

LABEL_16:
        ++v7;
        if (v10 == v6) {
          goto LABEL_25;
        }
      }

      if (v7 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      if (a1 < 0) {
        uint64_t v18 = a1;
      }
      else {
        uint64_t v18 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v18);
      if (!v6) {
        goto LABEL_25;
      }
    }

    id v8 = *(id *)(a1 + 8 * v7 + 32);
    goto LABEL_7;
  }

void *sub_100176848(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = a1;
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v8)
  {
    while (1)
    {
      unint64_t v9 = 0LL;
      uint64_t v22 = v7 & 0xFFFFFFFFFFFFFF8LL;
      unint64_t v23 = v7 & 0xC000000000000001LL;
      while (v23)
      {
        uint64_t v10 = v7;
        id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v7);
LABEL_7:
        uint64_t v7 = (uint64_t)v11;
        unint64_t v12 = v9 + 1;
        if (__OFADD__(v9, 1LL)) {
          goto LABEL_20;
        }
        uint64_t v13 = sub_1000B3DDC();
        if (v13 == a4 && v14 == a5)
        {
          uint64_t v17 = swift_bridgeObjectRelease();
LABEL_15:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v17);
          uint64_t v18 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
          uint64_t v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v7);
          specialized ContiguousArray._endMutation()(v19);
          goto LABEL_16;
        }

        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, a4, a5, 0LL);
        uint64_t v17 = swift_bridgeObjectRelease();
        if ((v16 & 1) != 0) {
          goto LABEL_15;
        }

LABEL_16:
        ++v9;
        uint64_t v7 = v10;
        if (v12 == v8) {
          goto LABEL_25;
        }
      }

      if (v9 < *(void *)(v22 + 16)) {
        break;
      }
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      if (v7 < 0) {
        uint64_t v20 = v7;
      }
      else {
        uint64_t v20 = v7 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v20);
      if (!v8) {
        goto LABEL_25;
      }
    }

    uint64_t v10 = v7;
    id v11 = *(id *)(v7 + 8 * v9 + 32);
    goto LABEL_7;
  }

uint64_t sub_1001769FC(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100270F60, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100176A4C(uint64_t a1, unint64_t a2)
{
  if (a1 == 6580578 && a2 == 0xE300000000000000LL)
  {
    unint64_t v5 = 0xE300000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(6580578LL, 0xE300000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6D614E726566666FLL && a2 == 0xE900000000000065LL)
  {
    swift_bridgeObjectRelease(0xE900000000000065LL);
    return 1LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6D614E726566666FLL, 0xE900000000000065LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_100176B34(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x6D614E726566666FLL;
  }
  else {
    return 6580578LL;
  }
}

uint64_t sub_100176B68(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v9 = sub_1000175B0(&qword_1002B7A10);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_100019F58(a1, v14);
  unint64_t v15 = sub_100179164();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ConfirmPurchaseEngagementHelperRoute.CancelRequest.CodingKeys,  &type metadata for ConfirmPurchaseEngagementHelperRoute.CancelRequest.CodingKeys,  v15,  v14,  v13);
  char v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v20, v9);
  if (!v5)
  {
    char v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v19, v9);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_100176C90(void *a1)
{
  uint64_t v3 = sub_1000175B0(&qword_1002B7A00);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100019F58(a1, v7);
  unint64_t v9 = sub_100179164();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ConfirmPurchaseEngagementHelperRoute.CancelRequest.CodingKeys,  &type metadata for ConfirmPurchaseEngagementHelperRoute.CancelRequest.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    sub_100019F7C(a1);
  }

  else
  {
    char v13 = 0;
    uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)(&v13, v3);
    char v12 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)(&v12, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    sub_100019F7C(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return v8;
}

uint64_t sub_100176E3C()
{
  return sub_100176B34(*v0);
}

uint64_t sub_100176E44@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100176A4C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100176E68(uint64_t a1)
{
  unint64_t v2 = sub_100179164();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100176E90(uint64_t a1)
{
  unint64_t v2 = sub_100179164();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100176EB8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100176C90(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }

  return result;
}

uint64_t sub_100176EE4(void *a1)
{
  return sub_100176B68(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_100176F00@<X0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_1001BCBC8();
  sub_10012A314(0x6E6F69746361LL, 0xE600000000000000LL, v5);
  uint64_t v7 = v6;
  unint64_t v9 = v8;
  swift_bridgeObjectRelease();
  if (v9) {
    v10._uint64_t countAndFlagsBits = v7;
  }
  else {
    v10._uint64_t countAndFlagsBits = 0LL;
  }
  if (v9) {
    v10._object = v9;
  }
  else {
    v10._object = (void *)0xE000000000000000LL;
  }
  char v11 = sub_1001769FC(v10);
  if (v11 == 2)
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v12 = sub_100077D08();
    sub_100092ADC(v12, (uint64_t)qword_1002EB9D0);
    os_log_type_t v13 = sub_100092F58();
    if (sub_100024E9C(v13))
    {
      uint64_t v14 = (_WORD *)sub_10001A414();
      sub_1000A48D4(v14);
      sub_1000A46DC((void *)&_mh_execute_header, v15, v16, "Invalid action");
      sub_10014E6E0();
    }

    sub_1000ACB64(0x2064696C61766E49LL, 0xEE006E6F69746361LL, 6u, (uint64_t)&v26);
    uint64_t v17 = v26;
    uint64_t v18 = v27;
    uint64_t v19 = v28;
    uint64_t v20 = v29;
    unint64_t v21 = v30 | ((unint64_t)WORD2(v30) << 32) | ((unint64_t)BYTE6(v30) << 48);
    sub_10001ED94();
    uint64_t v22 = sub_100125BDC();
    uint64_t result = sub_10001ED7C(v22);
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)(result + 3sub_100019F7C(v0 + 2) = 21LL;
    *(_WORD *)(result + 4sub_10019B2E8(v0, 0) = (_WORD)a1;
    *(_WORD *)(result + 4sub_100019F7C(v0 + 2) = v2;
    char v24 = 2;
    uint64_t v25 = _swiftEmptyArrayStorage;
  }

  else
  {
    if ((v11 & 1) != 0) {
      sub_1001778EC(a1, (uint64_t)&v26);
    }
    else {
      sub_1001770E0(a1, (uint64_t)&v26);
    }
    uint64_t v17 = v29;
    uint64_t v18 = v30;
    uint64_t v19 = v31;
    uint64_t v20 = v32;
    unint64_t v21 = v33 | ((unint64_t)(v34 | (v35 << 16)) << 32);
    uint64_t result = v26;
    uint64_t v25 = v27;
    char v24 = v28;
  }

  *(void *)a2 = result;
  *(void *)(a2 + 8) = v25;
  *(_BYTE *)(a2 + 16) = v24;
  *(void *)(a2 + 24) = v17;
  *(void *)(a2 + 3sub_100019F7C(v0 + 2) = v18;
  *(void *)(a2 + 4sub_10019B2E8(v0, 0) = v19;
  *(void *)(a2 + 48) = v20;
  *(_BYTE *)(a2 + 6sub_100019F7C(v0 + 2) = BYTE6(v21);
  *(_WORD *)(a2 + 6sub_10019B2E8(v0, 0) = WORD2(v21);
  *(_DWORD *)(a2 + 56) = v21;
  return result;
}

void sub_1001770E0(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  sub_1001C0904();
  sub_100054254((uint64_t)v89, (uint64_t)v120);
  sub_100054254((uint64_t)v120, (uint64_t)v121);
  if (sub_1000A2510((uint64_t)v121) != 1)
  {
    uint64_t v6 = swift_bridgeObjectRetain();
    sub_1000CDD90(v6, (uint64_t)__src);
    memcpy(__dst, __src, 0x139uLL);
    debugOnly(_:)(__dst);
    sub_1000390C8((uint64_t)v90, (uint64_t)v82, &qword_1002AA7C0);
    sub_1000A3B50((uint64_t)v82);
    sub_1000390C8((uint64_t)__dst, (uint64_t)v90, &qword_1002AA7C0);
  }

  uint64_t v7 = &qword_1002AECA8;
  sub_100054254((uint64_t)v89, (uint64_t)__dst);
  sub_100054254((uint64_t)__dst, (uint64_t)v82);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (sub_1000A2510((uint64_t)v82) == 1 || (uint64_t v9 = v85) == 0)
  {
    if (qword_1002A8D90 == -1) {
      goto LABEL_20;
    }
    goto LABEL_54;
  }

  uint64_t v10 = v84;
  uint64_t v67 = (void *)(v3 + 88);
  sub_100019F58((void *)(v3 + 88), *(void *)(v3 + 112));
  sub_100179350();
  swift_bridgeObjectRetain();
  sub_100089290();
  uint64_t v12 = sub_1001766AC(v11, v10, v9);
  uint64_t v7 = v12;
  if (((unint64_t)v12 & 0x8000000000000000LL) != 0 || ((unint64_t)v12 & 0x4000000000000000LL) != 0)
  {
    sub_10001DBCC();
    sub_1000173D4();
    uint64_t v13 = v64;
    sub_10001EDA0();
  }

  else
  {
    uint64_t v13 = (unint64_t)v12 & 0xFFFFFFFFFFFFFF8LL;
    sub_10001DBCC();
  }

  __src[0] = v13;
  sub_100177DE8(__src);
  sub_10001EDA0();
  uint64_t v14 = __src[0];
  if ((__src[0] & 0x8000000000000000LL) == 0 && (__src[0] & 0x4000000000000000LL) == 0)
  {
    uint64_t v15 = *(void *)(__src[0] + 16);
    sub_100041B5C();
    if (v15) {
      goto LABEL_11;
    }
LABEL_30:
    sub_100179358();
    sub_100179350();
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v32 = sub_100077D08();
    sub_100092ADC(v32, (uint64_t)qword_1002EB9D0);
    os_log_type_t v33 = sub_100092F58();
    uint64_t v8 = _swiftEmptyArrayStorage;
    if (!sub_100024E9C(v33)) {
      goto LABEL_35;
    }
    unsigned __int16 v34 = (_WORD *)sub_10001A414();
    sub_1000A48D4(v34);
    uint64_t v29 = "Failed to find latest deferred transaction to confirm in-app buy request";
    goto LABEL_34;
  }

  uint64_t v65 = sub_100041B5C();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter(v65);
  if (!v15) {
    goto LABEL_30;
  }
LABEL_11:
  if ((v14 & 0xC000000000000001LL) != 0) {
    uint64_t v16 = (uint64_t *)sub_100093148(0LL);
  }
  else {
    uint64_t v16 = (uint64_t *)*(id *)(v14 + 32);
  }
  uint64_t v7 = v16;
  sub_1000B774C();
  sub_10009305C();
  if (v17)
  {
LABEL_15:
    sub_100179358();
    uint64_t v18 = v7;
    sub_1000B5A64(1u);
    uint64_t v19 = type metadata accessor for AllSetDialog();
    sub_100019310(v19, 448LL);
    uint64_t v20 = sub_10011BB88();
    char v70 = 1;
    int v69 = *(_DWORD *)v72;
    HIBYTE(v69) = v72[3];
    int v68 = *(_DWORD *)&v71[3];
    LOBYTE(v68) = v71[3];
    sub_1001793F4(v20, (uint64_t)&v75, &qword_1002AA7C0);
    uint64_t v66 = v20;
    if (sub_1000A3034((uint64_t)&v75) == 1)
    {
LABEL_16:
      sub_100179350();
      uint64_t v21 = 0LL;
      goto LABEL_17;
    }

    if (v79 == 1)
    {
      uint64_t v43 = swift_bridgeObjectRelease();
    }

    else
    {
      char v44 = sub_1000A4898(3157553LL, 0xE300000000000000LL, 3157554LL);
      uint64_t v43 = swift_bridgeObjectRelease();
      if ((v44 & 1) == 0)
      {
        sub_1001793F4(v43, (uint64_t)__src, &qword_1002AA7C0);
        if ((__src[39] & 1) == 0) {
          goto LABEL_48;
        }
        goto LABEL_47;
      }
    }

    uint64_t v45 = v88;
    if (v88)
    {
      uint64_t v46 = v87;
      swift_bridgeObjectRetain();
      sub_100179350();
      uint64_t v47 = sub_1000175B0(&qword_1002AA380);
      uint64_t v48 = *(void *)(type metadata accessor for IAPTransaction(0LL) - 8);
      uint64_t v49 = *(void *)(v48 + 72);
      uint64_t v50 = *(unsigned __int8 *)(v48 + 80);
      uint64_t v51 = (v50 + 32) & ~v50;
      uint64_t v22 = swift_allocObject(v47, v51 + v49, v50 | 7);
      *(_OWORD *)(v22 + 16) = xmmword_1001F3C00;
      double v52 = (void *)sub_100019310((uint64_t)&unk_10028C560, 40LL);
      _OWORD v52[2] = v3;
      v52[3] = v46;
      v52[4] = v45;
      uint64_t v53 = v18;
      swift_retain();
      sub_1001A7CDC(v53, (void (*)(void *))sub_100179148, v22 + v51);
      swift_bridgeObjectRelease();
      uint64_t v23 = 0LL;
      uint64_t v21 = *(void *)(v22 + 16);
      char v70 = 0;
      goto LABEL_42;
    }

    sub_1001793F4(v43, (uint64_t)__src, &qword_1002AA7C0);
    if (LOBYTE(__src[39]) != 1) {
      goto LABEL_48;
    }
LABEL_47:
    if ((sub_1000A4898(3157554LL, 0xE300000000000000LL, 3157553LL) & 1) == 0) {
      goto LABEL_16;
    }
LABEL_48:
    uint64_t v21 = v83;
    if (v83)
    {
      uint64_t v22 = v86;
      if (v86)
      {
        sub_100019F58(v67, *(void *)(v3 + 112));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v23 = sub_1000884B8();
        unint64_t v54 = v63;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100179350();
        uint64_t v21 = 0LL;
        uint64_t v22 = 0LL;
        goto LABEL_43;
      }

      sub_100179350();
      uint64_t v21 = 0LL;
      goto LABEL_18;
    }

    sub_100179350();
LABEL_17:
    uint64_t v22 = 0LL;
LABEL_18:
    uint64_t v23 = 0LL;
LABEL_42:
    unint64_t v54 = 0xF000000000000000LL;
LABEL_43:
    sub_100019F58(v67, *(void *)(v3 + 112));
    sub_100179384();
    v95[1] = 0LL;
    v95[0] = 0LL;
    v95[2] = _swiftEmptyArrayStorage;
    __int16 v96 = 0;
    int v97 = v73;
    __int16 v98 = v74;
    sub_100179364();
    uint64_t v99 = v55;
    uint64_t v100 = v56;
    uint64_t v101 = v21;
    char v102 = v70;
    *(_DWORD *)uint64_t v103 = v69;
    *(_DWORD *)&v103[3] = *(_DWORD *)&v72[3];
    uint64_t v104 = v22;
    uint64_t v105 = v23;
    unint64_t v106 = v54;
    uint64_t v8 = v57;
    uint64_t v107 = 0LL;
    uint64_t v108 = 0LL;
    uint64_t v109 = v3;
    __int128 v110 = 0u;
    __int128 v111 = 0u;
    __int128 v112 = 0u;
    __int128 v113 = 0u;
    char v114 = 22;
    *(_DWORD *)uint64_t v115 = *(_DWORD *)v71;
    *(_DWORD *)&v115[3] = v68;
    uint64_t v116 = 0LL;
    uint64_t v117 = 0LL;
    uint64_t v118 = v66;
    char v119 = 2;
    sub_100053590((uint64_t)v95);
    sub_100178920((uint64_t)v95, a1, (uint64_t)&v91);
    uint64_t v58 = v92;
    uint64_t v59 = v93;
    uint64_t v60 = v94;
    sub_1000536E8((uint64_t)v95);

    unint64_t v35 = v58 | (v59 << 32) | (v60 << 48);
    unsigned int v61 = sub_10001ED94();
    Swift::UInt16 v37 = v61;
    unsigned int v38 = HIWORD(v61);
    sub_1000536E8((uint64_t)v95);
    uint64_t v62 = type metadata accessor for HTTPResponseHead._Storage();
    uint64_t v40 = sub_10001ED7C(v62);
    uint64_t v41 = v40;
    *(void *)(v40 + 16) = 0LL;
    *(void *)(v40 + 24) = 0LL;
    uint64_t v42 = 3LL;
    goto LABEL_36;
  }

  if (v15 == 1) {
    goto LABEL_30;
  }
  uint64_t v30 = 5LL;
  while (1)
  {
    uint64_t v31 = (v14 & 0xC000000000000001LL) != 0
    uint64_t v7 = v31;
    uint64_t v8 = (void *)(v30 - 3);
    if (__OFADD__(v30 - 4, 1LL)) {
      break;
    }
    sub_1000B774C();
    sub_10009305C();
    if (v17) {
      goto LABEL_15;
    }

    ++v30;
    if (v8 == (void *)v15) {
      goto LABEL_30;
    }
  }

  __break(1u);
LABEL_54:
  swift_once(&qword_1002A8D90, sub_100183E34);
LABEL_20:
  uint64_t v24 = sub_100077D08();
  sub_100092ADC(v24, (uint64_t)qword_1002EB9D0);
  os_log_type_t v25 = sub_100092F58();
  if (sub_100024E9C(v25))
  {
    uint64_t v26 = (_WORD *)sub_10001A414();
    sub_1000A48D4(v26);
    uint64_t v29 = "Failed to decode in-app buy request";
LABEL_34:
    sub_1000A46DC((void *)&_mh_execute_header, v27, v28, v29);
    sub_10014E6E0();
  }

void sub_1001778EC(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2;
  unint64_t v7 = (unint64_t)a1;
  uint64_t v8 = sub_1001C1748();
  uint64_t v12 = (uint64_t)_swiftEmptyArrayStorage;
  if (v9)
  {
    uint64_t v13 = v8;
    uint64_t v14 = v9;
    uint64_t v15 = v10;
    uint64_t v3 = v11;
    uint64_t v16 = (void *)(v4 + 88);
    sub_100019F58((void *)(v4 + 88), *(void *)(v4 + 112));
    sub_100089290();
    uint64_t v17 = v13;
    uint64_t v18 = 0LL;
    unint64_t v20 = (unint64_t)sub_100176848(v19, v17, v14, v15, v3);
    unint64_t v7 = v20;
    if ((v20 & 0x8000000000000000LL) != 0 || (v20 & 0x4000000000000000LL) != 0) {
      goto LABEL_34;
    }
    uint64_t v21 = v20 & 0xFFFFFFFFFFFFFF8LL;
    sub_10001DBCC();
    while (1)
    {
      __dst[0] = v21;
      sub_100177DE8(__dst);
      if (v18)
      {
        swift_release();
        __break(1u);
        return;
      }

      uint64_t v46 = v16;
      sub_10001EDA0();
      uint64_t v18 = __dst[0];
      if (__dst[0] < 0 || (__dst[0] & 0x4000000000000000LL) != 0)
      {
        uint64_t v16 = (void *)v12;
        uint64_t v45 = sub_100041B5C();
        uint64_t v22 = _CocoaArrayWrapper.endIndex.getter(v45);
        if (!v22) {
          break;
        }
      }

      else
      {
        uint64_t v16 = (void *)v12;
        uint64_t v22 = *(void *)(__dst[0] + 16);
        sub_100041B5C();
        if (!v22) {
          break;
        }
      }

      if ((v18 & 0xC000000000000001LL) != 0) {
        id v23 = (id)sub_100093148(0LL);
      }
      else {
        id v23 = *(id *)(v18 + 32);
      }
      unint64_t v7 = (unint64_t)v23;
      sub_1000B774C();
      sub_10009305C();
      if (v24)
      {
LABEL_13:
        uint64_t v12 = (uint64_t)v16;
        sub_100179358();
        id v25 = (id)v7;
        sub_1000B5A64(2u);
        sub_100019F58(v46, *(void *)(v4 + 112));
        sub_100179384();
        __src[0] = 0uLL;
        *(void *)&__src[1] = v16;
        WORD4(__src[1]) = 0;
        sub_100179364();
        *(void *)&__src[2] = v26;
        *((void *)&__src[2] + 1) = v27;
        *(void *)&__src[3] = 0LL;
        BYTE8(__src[3]) = v4;
        __src[4] = 0uLL;
        _OWORD __src[5] = 0xF000000000000000LL;
        *(void *)&__src[6] = 0LL;
        *((void *)&__src[6] + 1) = v4;
        memset(&__src[7], 0, 64);
        LOBYTE(__src[11]) = 7;
        __src[12] = 0uLL;
        *((void *)&__src[11] + 1) = 0LL;
        LOBYTE(__src[13]) = v4;
        memcpy(__dst, __src, 0xD1uLL);
        sub_100053590((uint64_t)__src);
        sub_100178920((uint64_t)__dst, a1, (uint64_t)&v48);
        unint64_t v7 = v49;
        uint64_t v3 = v50;
        uint64_t v28 = v51;
        sub_1000536E8((uint64_t)__src);

        sub_1000536E8((uint64_t)__src);
        unint64_t v29 = v7 | (v3 << 32) | (v28 << 48);
        sub_10001ED94();
        uint64_t v30 = sub_100125BDC();
        uint64_t v31 = sub_10001ED7C(v30);
        *(void *)(v31 + 16) = 0LL;
        *(void *)(v31 + 24) = 0LL;
        uint64_t v32 = 3LL;
        goto LABEL_32;
      }

      if (v22 == 1) {
        break;
      }
      uint64_t v12 = 5LL;
      while (1)
      {
        id v39 = (v18 & 0xC000000000000001LL) != 0 ? (id)sub_100093148(v12 - 4) : *(id *)(v18 + 8 * v12);
        unint64_t v7 = (unint64_t)v39;
        uint64_t v3 = v12 - 3;
        if (__OFADD__(v12 - 4, 1LL)) {
          break;
        }
        sub_1000B774C();
        sub_10009305C();
        if (v24) {
          goto LABEL_13;
        }

        ++v12;
        if (v3 == v22) {
          goto LABEL_26;
        }
      }

      __break(1u);
LABEL_34:
      sub_10001DBCC();
      sub_1000173D4();
      uint64_t v21 = v44;
      sub_10001EDA0();
    }

uint64_t sub_100177CA8@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CheddarTransaction(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (uint64_t *)((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = sub_1000B3DEC();
  uint64_t v11 = v10;
  sub_100019F58(a2 + 6, a2[9]);
  sub_1000765E4(2uLL, v9, v11, v12, v13, v14, v15, v16);
  uint64_t v18 = v17;
  LOBYTE(v9) = v19;
  swift_bridgeObjectRelease();
  id v20 = a1;
  swift_bridgeObjectRetain();
  sub_10011FE9C((uint64_t)v20, v8);
  sub_100019F58(a2 + 11, a2[14]);
  sub_1001C21DC((uint64_t)v8, v18, v9 & 1, a3);
  return sub_10012271C((uint64_t)v8);
}

uint64_t type metadata accessor for ConfirmPurchaseEngagementHelperRoute()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService36ConfirmPurchaseEngagementHelperRoute);
}

uint64_t sub_100177DE8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_1000F23B0();
    *a1 = v2;
  }

  uint64_t v4 = *(void *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  sub_100177E60(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

void sub_100177E60(uint64_t *a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = a1[1];
  Swift::Int v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if ((v4 & 0x8000000000000000LL) == 0)
    {
      if (v4) {
        sub_100178514(0LL, v4, 1LL, a1);
      }
      return;
    }

    goto LABEL_130;
  }

  Swift::Int v6 = v5;
  sub_10018DE44(v4 / 2);
  uint64_t v116 = v7;
  uint64_t v119 = v8;
  uint64_t v113 = v4;
  __int128 v111 = a1;
  if (v4 <= 0)
  {
LABEL_94:
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
    unint64_t v47 = _swiftEmptyArrayStorage[2];
LABEL_95:
    uint64_t v101 = v11;
    if (v47 < 2)
    {
LABEL_106:
      uint64_t v100 = swift_bridgeObjectRelease();
      if (v4 >= -1) {
        goto LABEL_107;
      }
      goto LABEL_134;
    }

    uint64_t v102 = *v111;
    while (1)
    {
      unint64_t v103 = v47 - 2;
      if (v47 < 2) {
        break;
      }
      if (!v102) {
        goto LABEL_138;
      }
      Swift::Int v4 = v47 - 1;
      uint64_t v104 = v101;
      uint64_t v105 = *(void *)&v101[16 * v103 + 32];
      uint64_t v106 = *(void *)&v101[16 * v47 + 24];
      sub_1001785E8( (void **)(v102 + 8 * v105),  (id *)(v102 + 8LL * *(void *)&v101[16 * v47 + 16]),  v102 + 8 * v106,  v116);
      if (v2) {
        goto LABEL_92;
      }
      if (v106 < v105) {
        goto LABEL_125;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v104) & 1) == 0) {
        uint64_t v104 = sub_1001788E0((uint64_t)v104);
      }
      if (v103 >= *((void *)v104 + 2)) {
        goto LABEL_126;
      }
      uint64_t v107 = &v104[16 * v103 + 32];
      *(void *)uint64_t v107 = v105;
      *((void *)v107 + 1) = v106;
      unint64_t v108 = *((void *)v104 + 2);
      if (v47 > v108) {
        goto LABEL_127;
      }
      memmove(&v104[16 * v4 + 32], &v104[16 * v47 + 32], 16 * (v108 - v47));
      uint64_t v101 = v104;
      *((void *)v104 + sub_100019F7C(v0 + 2) = v108 - 1;
      unint64_t v47 = v108 - 1;
      Swift::Int v4 = v113;
      if (v108 <= 2) {
        goto LABEL_106;
      }
    }

LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
    return;
  }

  Swift::Int v112 = v6;
  Swift::Int v9 = 0LL;
  uint64_t v10 = *a1;
  uint64_t v110 = *a1 - 8;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    uint64_t v12 = v9++;
    uint64_t v114 = v12;
    if (v9 < v4)
    {
      uint64_t v13 = v11;
      uint64_t v14 = v2;
      uint64_t v15 = *(void **)(v10 + 8 * v12);
      id v16 = *(id *)(v10 + 8 * v9);
      id v17 = v15;
      double v18 = sub_100179398();
      double v19 = sub_10017941C();

      Swift::Int v9 = v12 + 2;
      if (v12 + 2 < v4)
      {
        uint64_t v20 = v12;
        while (1)
        {
          uint64_t v21 = v10 + 8 * v20;
          uint64_t v22 = *(void **)(v21 + 8);
          id v23 = *(id *)(v21 + 16);
          id v24 = v22;
          double v25 = sub_100179398();
          double v26 = sub_10017941C();

          if (v19 < v18 == v26 >= v25) {
            break;
          }
          Swift::Int v27 = v20 + 3;
          ++v20;
          if (v27 >= v4)
          {
            Swift::Int v9 = v4;
            goto LABEL_11;
          }
        }

        Swift::Int v9 = v20 + 2;
      }

LABEL_69:
    if ((v73 & 1) != 0) {
      goto LABEL_119;
    }
    unint64_t v81 = &v48[16 * v50];
    uint64_t v83 = *(void *)v81;
    uint64_t v82 = *((void *)v81 + 1);
    BOOL v61 = __OFSUB__(v82, v83);
    uint64_t v84 = v82 - v83;
    if (v61) {
      goto LABEL_121;
    }
    if (v84 < v72) {
      goto LABEL_86;
    }
LABEL_77:
    Swift::Int v89 = v50 - 1;
    if (v50 - 1 >= v47)
    {
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
      goto LABEL_124;
    }

    uint64_t v90 = v10;
    if (!v10) {
      goto LABEL_136;
    }
    uint64_t v91 = v11;
    unsigned int v92 = &v48[16 * v89];
    unsigned __int16 v93 = v48;
    uint64_t v94 = *(void *)v92;
    uint64_t v95 = v93;
    Swift::Int v4 = v50;
    __int16 v96 = &v93[16 * v50];
    uint64_t v97 = *((void *)v96 + 1);
    uint64_t v98 = v90;
    sub_1001785E8((void **)(v90 + 8LL * *(void *)v92), (id *)(v90 + 8LL * *(void *)v96), v90 + 8 * v97, v116);
    if (v118) {
      break;
    }
    if (v97 < v94) {
      goto LABEL_110;
    }
    *(void *)unsigned int v92 = v94;
    *(void *)&v95[16 * v89 + 8] = v97;
    unint64_t v99 = *((void *)v91 + 2);
    if (v4 >= v99) {
      goto LABEL_112;
    }
    uint64_t v48 = v95;
    uint64_t v11 = v91;
    unint64_t v47 = v99 - 1;
    memmove(v96, v96 + 16, 16 * (v99 - 1 - v4));
    *((void *)v91 + sub_100019F7C(v0 + 2) = v99 - 1;
    uint64_t v10 = v98;
    Swift::Int v9 = v115;
    if (v99 <= 2) {
      goto LABEL_86;
    }
  }

  uint64_t v2 = v118;
LABEL_92:
  uint64_t v100 = swift_bridgeObjectRelease();
  if (v113 < -1)
  {
    __break(1u);
    goto LABEL_94;
  }

void sub_100178514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v5 = a3;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 8 * a3 - 8;
    while (2)
    {
      Swift::Int v9 = *(void **)(v7 + 8 * v5);
      uint64_t v10 = a1;
      uint64_t v11 = v8;
      do
      {
        uint64_t v12 = *(void **)v11;
        id v13 = v9;
        id v14 = v12;
        double v15 = sub_100179430();
        double v16 = sub_1001793EC();

        if (v16 >= v15) {
          break;
        }
        if (!v7)
        {
          __break(1u);
          return;
        }

        id v17 = *(void **)v11;
        Swift::Int v9 = *(void **)(v11 + 8);
        *(void *)uint64_t v11 = v9;
        *(void *)(v11 + 8) = v17;
        v11 -= 8LL;
        ++v10;
      }

      while (v5 != v10);
      ++v5;
      v8 += 8LL;
      if (v5 != a2) {
        continue;
      }
      break;
    }
  }

uint64_t sub_1001785E8(void **a1, id *a2, unint64_t a3, void **a4)
{
  Swift::Int v4 = a4;
  Swift::Int v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = (char *)a2 - (char *)a1;
  uint64_t v9 = a2 - a1;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 8;
  if (v9 >= v11)
  {
    sub_1000314BC(a2, (uint64_t)(a3 - (void)a2) / 8, a4);
    if (v7 >= v6 || v10 < 8)
    {
      uint64_t v12 = &v4[v11];
    }

    else
    {
      id v23 = (id *)(a3 - 8);
      uint64_t v12 = &v4[v11];
      uint64_t v36 = v4;
      do
      {
        uint64_t v37 = v23 + 1;
        double v25 = v12 - 1;
        id v24 = *(v12 - 1);
        unint64_t v26 = (unint64_t)v12;
        uint64_t v28 = v6 - 1;
        Swift::Int v27 = *(v6 - 1);
        id v29 = v24;
        id v30 = v27;
        double v31 = sub_100179430();
        double v32 = sub_1001793EC();

        if (v32 >= v31)
        {
          BOOL v33 = v37 != (id *)v26 || (unint64_t)v23 >= v26;
          uint64_t v28 = v25;
          unint64_t v26 = (unint64_t)v25;
        }

        else
        {
          BOOL v33 = v37 != v6 || v23 >= v6;
          --v6;
        }

        Swift::Int v4 = v36;
        if (v33) {
          *id v23 = *v28;
        }
        --v23;
        uint64_t v12 = (void **)v26;
      }

      while (v6 > v7 && v26 > (unint64_t)v36);
    }
  }

  else
  {
    sub_1000314BC(a1, a2 - a1, a4);
    uint64_t v12 = &v4[v9];
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      while (1)
      {
        id v14 = *v4;
        id v15 = *v6;
        id v16 = v14;
        double v17 = sub_1001793EC();
        double v18 = sub_1000B4050();

        if (v18 < v17) {
          break;
        }
        double v19 = v4;
        BOOL v20 = v7 == v4++;
        if (!v20) {
          goto LABEL_11;
        }
LABEL_12:
        ++v7;
      }

      double v19 = v6;
      BOOL v20 = v7 == v6++;
      if (v20) {
        goto LABEL_12;
      }
LABEL_11:
      *uint64_t v7 = *v19;
      goto LABEL_12;
    }

char *sub_1001787F0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1000175B0(&qword_1002B79F8);
    uint64_t v11 = (char *)sub_100019310(v10, 16 * v9 + 32);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + sub_100019F7C(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  id v13 = v11 + 32;
  id v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || &v14[16 * v8] <= v13) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + sub_100019F7C(v0 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 16 * v8);
  }

  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1001788E0(uint64_t a1)
{
  return sub_1001787F0(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_1001788F4(char *__src, uint64_t a2, char *__dst)
{
  if (__dst != __src || &__src[16 * a2] <= __dst) {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

double sub_100178920@<D0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = sub_100178A98(&v28, &v29);
  if (v29.n128_u64[1])
  {
    sub_1001793C0(v5, v6, v7, v8, v9, v10, v11, v12, v26, v27[0]);
    uint64_t v13 = type metadata accessor for PropertyListEncoder(0LL);
    sub_1001793E0(v13);
    uint64_t v14 = sub_100179424();
    PropertyListEncoder.init()(v14);
    unint64_t v15 = sub_100054180();
    dispatch thunk of PropertyListEncoder.encode<A>(_:)(v27, &type metadata for LegacyInAppBuyResponse, v15);
  }

  else
  {
    sub_1001793C0(v5, v6, v7, v8, v9, v10, v11, v12, v26, v27[0]);
    uint64_t v17 = type metadata accessor for JSONEncoder(0LL);
    sub_1001793E0(v17);
    uint64_t v18 = sub_100179424();
    JSONEncoder.init()(v18);
    unint64_t v19 = sub_100054180();
    dispatch thunk of JSONEncoder.encode<A>(_:)(v27, &type metadata for LegacyInAppBuyResponse, v19);
  }

  sub_1001793D0();
  uint64_t v16 = sub_1001793A4();
  sub_1000AD058(v16, v20);
  sub_1000536E8(a1);
  uint64_t v21 = MEMORY[0x10];
  int v22 = MEMORY[0x20];
  __int16 v23 = MEMORY[0x24];
  char v24 = MEMORY[0x26];
  double result = MEMORY[0x18];
  *(_OWORD *)a3 = MEMORY[0];
  *(void *)(a3 + 16) = v21;
  *(double *)(a3 + 24) = result;
  *(_DWORD *)(a3 + 3sub_100019F7C(v0 + 2) = v22;
  *(_WORD *)(a3 + 36) = v23;
  *(_BYTE *)(a3 + 38) = v24;
  return result;
}

__n128 *sub_100178A98(__n128 *a1, __n128 *a2)
{
  return a2;
}

#error "100178CA0: call analysis failed (funcsize=125)"
uint64_t sub_100178CC8( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23,  uint64_t a24,  uint64_t a25,  uint64_t a26,  uint64_t a27,  uint64_t a28,  uint64_t a29,  uint64_t a30,  uint64_t a31,  uint64_t a32,  uint64_t a33,  uint64_t a34,  uint64_t a35,  uint64_t a36,  uint64_t a37,  uint64_t a38,  uint64_t a39,  uint64_t a40,  uint64_t a41,  uint64_t a42,  uint64_t a43,  uint64_t a44,  uint64_t a45,  uint64_t a46,  uint64_t a47,  uint64_t a48,  uint64_t a49,
        uint64_t a50,
        uint64_t a51,
        uint64_t a52,
        uint64_t a53,
        uint64_t a54,
        uint64_t a55,
        uint64_t a56,
        uint64_t a57,
        uint64_t a58,
        uint64_t a59,
        uint64_t a60,
        uint64_t a61,
        uint64_t a62,
        uint64_t a63)
{
  uint64_t a71;
  uint64_t a72;
  uint64_t result;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  if (a10)
  {
    uint64_t v105 = STACK[0x578];
    uint64_t v106 = STACK[0x580];
    unint64_t v103 = STACK[0x568];
    uint64_t v104 = STACK[0x570];
    uint64_t v101 = STACK[0x558];
    uint64_t v102 = STACK[0x560];
    unint64_t v99 = STACK[0x548];
    uint64_t v100 = STACK[0x550];
    uint64_t v97 = STACK[0x538];
    uint64_t v98 = STACK[0x540];
    uint64_t v95 = STACK[0x528];
    __int16 v96 = STACK[0x530];
    unsigned __int16 v93 = STACK[0x518];
    uint64_t v94 = STACK[0x520];
    uint64_t v91 = STACK[0x508];
    unsigned int v92 = STACK[0x510];
    uint64_t v90 = STACK[0x500];
    Swift::Int v89 = STACK[0x4F8];
    uint64_t v88 = STACK[0x4F0];
    uint64_t v87 = STACK[0x4E8];
    uint64_t v86 = STACK[0x4E0];
    uint64_t v85 = STACK[0x4D8];
    uint64_t v84 = STACK[0x4D0];
    uint64_t v83 = STACK[0x4C8];
    uint64_t v82 = STACK[0x4C0];
    unint64_t v81 = STACK[0x4B8];
    uint64_t v80 = STACK[0x4B0];
    uint64_t v79 = STACK[0x4A8];
    BOOL v78 = STACK[0x4A0];
    uint64_t v77 = STACK[0x498];
    uint64_t v76 = STACK[0x490];
    unint64_t v108 = STACK[0x480];
    uint64_t v109 = STACK[0x488];
    uint64_t v107 = STACK[0x478];
    uint64_t v75 = STACK[0x470];
    __int16 v74 = STACK[0x468];
    char v73 = STACK[0x460];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return sub_1000392B0( a71,  a72,  v73,  v74,  v75,  v107,  v108,  v109,  v76,  v77,  v78,  v79,  v80,  v81,  v82,  v83,  v84,  v85,  v86,  v87,  v88,  v89,  v90,  v91,  v92,  v93,  v94,  v95,  v96,  v97,  v98,  v99,  v100,  v101,  v102,  v103,  v104,  v105,  v106);
  }

  return result;
}

uint64_t sub_10017911C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100179148@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100177CA8(a1, *(void **)(v2 + 16), a2);
}

ValueMetadata *type metadata accessor for ConfirmPurchaseEngagementHelperRoute.CancelRequest()
{
  return &type metadata for ConfirmPurchaseEngagementHelperRoute.CancelRequest;
}

unint64_t sub_100179164()
{
  unint64_t result = qword_1002B7A08;
  if (!qword_1002B7A08)
  {
    unint64_t result = swift_getWitnessTable( "9X\b",  &type metadata for ConfirmPurchaseEngagementHelperRoute.CancelRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7A08);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for ConfirmPurchaseEngagementHelperRoute.CancelRequest.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1001791EC + 4 * byte_100206D75[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100179220 + 4 * byte_100206D70[v4]))();
}

uint64_t sub_100179220(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100179228(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100179230LL);
  }
  return result;
}

uint64_t sub_10017923C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100179244LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100179248(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100179250(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConfirmPurchaseEngagementHelperRoute.CancelRequest.CodingKeys()
{
  return &type metadata for ConfirmPurchaseEngagementHelperRoute.CancelRequest.CodingKeys;
}

unint64_t sub_100179270()
{
  unint64_t result = qword_1002B7A18;
  if (!qword_1002B7A18)
  {
    unint64_t result = swift_getWitnessTable( "QX\b",  &type metadata for ConfirmPurchaseEngagementHelperRoute.CancelRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7A18);
  }

  return result;
}

unint64_t sub_1001792B0()
{
  unint64_t result = qword_1002B7A20;
  if (!qword_1002B7A20)
  {
    unint64_t result = swift_getWitnessTable( byte_100206E30,  &type metadata for ConfirmPurchaseEngagementHelperRoute.CancelRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7A20);
  }

  return result;
}

unint64_t sub_1001792F0()
{
  unint64_t result = qword_1002B7A28;
  if (!qword_1002B7A28)
  {
    unint64_t result = swift_getWitnessTable( byte_100206E58,  &type metadata for ConfirmPurchaseEngagementHelperRoute.CancelRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7A28);
  }

  return result;
}

uint64_t sub_10017932C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACB64(0x7571657220646142LL, 0xEB00000000747365LL, 6u, a1);
}

uint64_t sub_100179350()
{
  return sub_100178AD4(&STACK[0x518]);
}

uint64_t sub_100179358()
{
  return swift_release_n(v0, 2LL);
}

  ;
}

uint64_t sub_100179384()
{
  return sub_100089348(v0, 1);
}

double sub_100179398()
{
  return sub_1000B4050();
}

uint64_t sub_1001793A4()
{
  return v0;
}

void *sub_1001793C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char __dst)
{
  return memcpy(&__dst, v10, 0xD1uLL);
}

uint64_t sub_1001793D0()
{
  return swift_release(v0);
}

uint64_t sub_1001793E0(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

double sub_1001793EC()
{
  return sub_1000B4050();
}

uint64_t sub_1001793F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1000390C8(v3, a2, a3);
}

char *sub_1001793FC(char *a1, int64_t a2)
{
  return sub_1001787F0(a1, a2, 1, v2);
}

void sub_100179408()
{
  *(_BYTE *)(v0 + 16) = 2;
  *(void *)(v0 + 24) = v1;
  *(void *)(v0 + 3sub_100019F7C(v0 + 2) = v2;
  *(void *)(v0 + 4sub_10019B2E8(v0, 0) = v3;
  *(void *)(v0 + 48) = v4;
}

double sub_10017941C()
{
  return sub_1000B4050();
}

uint64_t sub_100179424()
{
  return sub_100053590(v0);
}

double sub_100179430()
{
  return sub_1000B4050();
}

ValueMetadata *type metadata accessor for DisableSubscriptionRequest()
{
  return &type metadata for DisableSubscriptionRequest;
}

uint64_t destroy for EditSubscriptionsHelperResponse(void *a1)
{
  return swift_bridgeObjectRelease(a1[12]);
}

uint64_t initializeWithCopy for EditSubscriptionsHelperResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10019B2E8(v0, 0) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 7sub_100019F7C(v0 + 2) = v7;
  *(_WORD *)(a1 + 8sub_10019B2E8(v0, 0) = *(_WORD *)(a2 + 80);
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t assignWithCopy for EditSubscriptionsHelperResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 4sub_10019B2E8(v0, 0) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 7sub_100019F7C(v0 + 2) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 8sub_10019B2E8(v0, 0) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v14 = *(void *)(a2 + 96);
  uint64_t v15 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t assignWithTake for EditSubscriptionsHelperResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10019B2E8(v0, 0) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 7sub_100019F7C(v0 + 2) = v12;
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 8sub_10019B2E8(v0, 0) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  uint64_t v14 = *(void *)(a2 + 96);
  uint64_t v15 = *(void *)(a1 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v14;
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for EditSubscriptionsHelperResponse(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 104))
    {
      LODWORD(v7(v1, v0, 2LL, v3, v6, v5, v4, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v7(v1, v0, 2LL, v3, v6, v5, v4, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v7(v1, v0, 2LL, v3, v6, v5, v4, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EditSubscriptionsHelperResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 7sub_100019F7C(v0 + 2) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4sub_10019B2E8(v0, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 104) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for EditSubscriptionsHelperResponse()
{
  return &type metadata for EditSubscriptionsHelperResponse;
}

uint64_t sub_100179760(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL && a2 == 0x80000001002210D0LL)
  {
    unint64_t v4 = 0x80000001002210D0LL;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001002210D0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
    goto LABEL_6;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v6 = 0x80000001002210F0LL;
    if (a2 == 0x80000001002210F0LL) {
      goto LABEL_11;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x80000001002210F0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if (a1 == 0xD000000000000012LL && a2 == 0x8000000100221110LL)
  {
    unint64_t v7 = 0x8000000100221110LL;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x8000000100221110LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_17;
  }

  if (a1 == 0xD000000000000014LL && a2 == 0x8000000100221130LL)
  {
    unint64_t v8 = 0x8000000100221130LL;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x8000000100221130LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_23;
  }

  if (a1 == 0x6D61726150797562LL && a2 == 0xE900000000000073LL)
  {
    unint64_t v10 = 0xE900000000000073LL;
    goto LABEL_31;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D61726150797562LL, 0xE900000000000073LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v11 = 0x8000000100221150LL;
    if (a2 == 0x8000000100221150LL) {
      goto LABEL_36;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x8000000100221150LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5LL;
  }

  if (a1 == 0x4964657269707865LL && a2 == 0xED0000747361506ELL)
  {
    unint64_t v13 = 0xED0000747361506ELL;
    goto LABEL_44;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4964657269707865LL, 0xED0000747361506ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
LABEL_44:
    swift_bridgeObjectRelease(v13);
    return 6LL;
  }

  if (a1 == 0x746361736E617274LL && a2 == 0xED000044496E6F69LL)
  {
    swift_bridgeObjectRelease(0xED000044496E6F69LL);
    return 7LL;
  }

  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746361736E617274LL, 0xED000044496E6F69LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v15 & 1) != 0) {
      return 7LL;
    }
    else {
      return 8LL;
    }
  }

uint64_t sub_100179AC0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100179AFC + 4 * byte_100206F40[a1]))( 0xD000000000000010LL,  0x80000001002210D0LL);
}

unint64_t sub_100179AFC()
{
  return 0xD000000000000011LL;
}

uint64_t sub_100179B68()
{
  return 0x4964657269707865LL;
}

uint64_t sub_100179B8C()
{
  return 0x746361736E617274LL;
}

uint64_t sub_100179BB0(void *a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = sub_1000175B0(&qword_1002B7A30);
  sub_100022760();
  __chkstk_darwin(v7);
  sub_10001DAD0();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100019F58(a1, v11);
  unint64_t v13 = sub_10017A4F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for EditSubscriptionsHelperResponse.CodingKeys,  &type metadata for EditSubscriptionsHelperResponse.CodingKeys,  v13,  v11,  v12);
  uint64_t v14 = *(void *)v4;
  uint64_t v15 = *(void *)(v4 + 8);
  char v36 = 0;
  sub_100044D1C(v14, v15, (uint64_t)&v36);
  if (!v2)
  {
    uint64_t v16 = *(void *)(v4 + 16);
    uint64_t v17 = *(void *)(v4 + 24);
    char v35 = 1;
    sub_100023EB4(v16, v17, (uint64_t)&v35);
    uint64_t v18 = *(void *)(v4 + 32);
    uint64_t v19 = *(void *)(v4 + 40);
    char v34 = 2;
    sub_100023EB4(v18, v19, (uint64_t)&v34);
    uint64_t v20 = *(void *)(v4 + 48);
    uint64_t v21 = *(void *)(v4 + 56);
    char v33 = 3;
    sub_100023EB4(v20, v21, (uint64_t)&v33);
    uint64_t v22 = *(void *)(v4 + 64);
    uint64_t v23 = *(void *)(v4 + 72);
    char v32 = 4;
    sub_100023EB4(v22, v23, (uint64_t)&v32);
    uint64_t v24 = *(unsigned __int8 *)(v4 + 80);
    char v31 = 5;
    sub_10017A888(v24, (uint64_t)&v31);
    uint64_t v25 = *(unsigned __int8 *)(v4 + 81);
    char v30 = 6;
    sub_10017A888(v25, (uint64_t)&v30);
    uint64_t v26 = *(void *)(v4 + 88);
    uint64_t v27 = *(void *)(v4 + 96);
    char v29 = 7;
    sub_100044D1C(v26, v27, (uint64_t)&v29);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v10, v6);
}

void sub_100179D44(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = sub_1000175B0(&qword_1002B7A58);
  sub_100022760();
  __chkstk_darwin(v7);
  sub_10001DAD0();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100019F58(a1, v11);
  unint64_t v13 = sub_10017A4F8();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for EditSubscriptionsHelperResponse.CodingKeys,  &type metadata for EditSubscriptionsHelperResponse.CodingKeys,  v13,  v11,  v12);
  if (v2)
  {
    sub_100054D00();
  }

  else
  {
    char v43 = 0;
    uint64_t v14 = sub_10017A878((uint64_t)&v43);
    uint64_t v16 = v15;
    char v42 = 1;
    swift_bridgeObjectRetain();
    uint64_t v30 = sub_10017A858((uint64_t)&v42);
    uint64_t v31 = v14;
    char v41 = 2;
    sub_100044D2C(v30, v17);
    uint64_t v35 = v14;
    uint64_t v29 = sub_10017A858((uint64_t)&v41);
    char v40 = 3;
    sub_100044D2C(v29, v18);
    uint64_t v34 = v14;
    uint64_t v28 = sub_10017A858((uint64_t)&v40);
    char v39 = 4;
    sub_100044D2C(v28, v19);
    uint64_t v33 = v14;
    uint64_t v27 = sub_10017A858((uint64_t)&v39);
    char v38 = 5;
    sub_100044D2C(v27, v20);
    uint64_t v32 = v14;
    char v26 = sub_10017A868((uint64_t)&v38);
    char v37 = 6;
    LOBYTE(v14) = sub_10017A868((uint64_t)&v37);
    char v36 = 7;
    uint64_t v21 = sub_10017A878((uint64_t)&v36);
    uint64_t v23 = v22;
    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    uint64_t v25 = v21;
    v24(v10, v6);
    swift_bridgeObjectRetain();
    sub_100054D00();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10003561C();
    sub_100023EEC();
    *(void *)a2 = v31;
    *(void *)(a2 + 8) = v16;
    *(void *)(a2 + 16) = v30;
    *(void *)(a2 + 24) = v35;
    *(void *)(a2 + 3sub_100019F7C(v0 + 2) = v29;
    *(void *)(a2 + 4sub_10019B2E8(v0, 0) = v34;
    *(void *)(a2 + 48) = v28;
    *(void *)(a2 + 56) = v33;
    *(void *)(a2 + 64) = v27;
    *(void *)(a2 + 7sub_100019F7C(v0 + 2) = v32;
    *(_BYTE *)(a2 + 8sub_10019B2E8(v0, 0) = v26 & 1;
    *(_BYTE *)(a2 + 81) = v14 & 1;
    *(void *)(a2 + 88) = v25;
    *(void *)(a2 + 96) = v23;
  }

  sub_10001DAB8();
}

uint64_t sub_10017A0C8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x746361736E617274LL && a2 == 0xED000044496E6F69LL)
  {
    swift_bridgeObjectRelease(0xED000044496E6F69LL);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746361736E617274LL, 0xED000044496E6F69LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

uint64_t sub_10017A170()
{
  return 0x746361736E617274LL;
}

void sub_10017A194(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000175B0(&qword_1002B7A50);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_10001DAD0();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100019F58(a1, v11);
  unint64_t v13 = sub_10017A534();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for DisableSubscriptionRequest.CodingKeys,  &type metadata for DisableSubscriptionRequest.CodingKeys,  v13,  v11,  v12);
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, v14, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  sub_10001DAB8();
}

void *sub_10017A268(void *a1)
{
  uint64_t v4 = sub_1000175B0(&qword_1002B7A40);
  sub_100022760();
  __chkstk_darwin(v5);
  sub_10001DAD0();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  uint64_t v11 = sub_100019F58(a1, v9);
  unint64_t v12 = sub_10017A534();
  uint64_t v13 = dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for DisableSubscriptionRequest.CodingKeys,  &type metadata for DisableSubscriptionRequest.CodingKeys,  v12,  v9,  v10);
  if (!v1)
  {
    uint64_t v11 = (void *)KeyedDecodingContainer.decode(_:forKey:)(v13, v4);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v8, v4);
  }

  sub_100019F7C(a1);
  return v11;
}

uint64_t sub_10017A364()
{
  return sub_100179AC0(*v0);
}

uint64_t sub_10017A36C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100179760(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10017A390(uint64_t a1)
{
  unint64_t v2 = sub_10017A4F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017A3B8(uint64_t a1)
{
  unint64_t v2 = sub_10017A4F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10017A3E0(void *a1@<X0>, void *a2@<X8>)
{
  if (!v2) {
    memcpy(a2, __src, 0x68uLL);
  }
}

uint64_t sub_10017A428(void *a1)
{
  return sub_100179BB0(a1);
}

uint64_t sub_10017A440@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10017A0C8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10017A468(uint64_t a1)
{
  unint64_t v2 = sub_10017A534();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017A490(uint64_t a1)
{
  unint64_t v2 = sub_10017A534();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10017A4B8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10017A268(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

void sub_10017A4E0(void *a1)
{
}

unint64_t sub_10017A4F8()
{
  unint64_t result = qword_1002B7A38;
  if (!qword_1002B7A38)
  {
    unint64_t result = swift_getWitnessTable(byte_10020722C, &type metadata for EditSubscriptionsHelperResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7A38);
  }

  return result;
}

unint64_t sub_10017A534()
{
  unint64_t result = qword_1002B7A48;
  if (!qword_1002B7A48)
  {
    unint64_t result = swift_getWitnessTable("-X\b", &type metadata for DisableSubscriptionRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7A48);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for DisableSubscriptionRequest.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10017A5B0 + 4 * byte_100206F48[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10017A5D0 + 4 * byte_100206F4D[v4]))();
  }
}

_BYTE *sub_10017A5B0(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10017A5D0(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10017A5D8(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10017A5E0(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10017A5E8(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10017A5F0(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DisableSubscriptionRequest.CodingKeys()
{
  return &type metadata for DisableSubscriptionRequest.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for EditSubscriptionsHelperResponse.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_10017A658 + 4 * byte_100206F57[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10017A68C + 4 * byte_100206F52[v4]))();
}

uint64_t sub_10017A68C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10017A694(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10017A69CLL);
  }
  return result;
}

uint64_t sub_10017A6A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10017A6B0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 7;
  return result;
}

uint64_t sub_10017A6B4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10017A6BC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EditSubscriptionsHelperResponse.CodingKeys()
{
  return &type metadata for EditSubscriptionsHelperResponse.CodingKeys;
}

unint64_t sub_10017A6DC()
{
  unint64_t result = qword_1002B7A60;
  if (!qword_1002B7A60)
  {
    unint64_t result = swift_getWitnessTable(byte_1002070FC, &type metadata for EditSubscriptionsHelperResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7A60);
  }

  return result;
}

unint64_t sub_10017A71C()
{
  unint64_t result = qword_1002B7A68;
  if (!qword_1002B7A68)
  {
    unint64_t result = swift_getWitnessTable("EX\b", &type metadata for DisableSubscriptionRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7A68);
  }

  return result;
}

unint64_t sub_10017A75C()
{
  unint64_t result = qword_1002B7A70;
  if (!qword_1002B7A70)
  {
    unint64_t result = swift_getWitnessTable(byte_100207124, &type metadata for DisableSubscriptionRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7A70);
  }

  return result;
}

unint64_t sub_10017A79C()
{
  unint64_t result = qword_1002B7A78;
  if (!qword_1002B7A78)
  {
    unint64_t result = swift_getWitnessTable("uX\b", &type metadata for DisableSubscriptionRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7A78);
  }

  return result;
}

unint64_t sub_10017A7DC()
{
  unint64_t result = qword_1002B7A80;
  if (!qword_1002B7A80)
  {
    unint64_t result = swift_getWitnessTable("EY\b", &type metadata for EditSubscriptionsHelperResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7A80);
  }

  return result;
}

unint64_t sub_10017A81C()
{
  unint64_t result = qword_1002B7A88[0];
  if (!qword_1002B7A88[0])
  {
    unint64_t result = swift_getWitnessTable("-Y\b", &type metadata for EditSubscriptionsHelperResponse.CodingKeys);
    atomic_store(result, qword_1002B7A88);
  }

  return result;
}

uint64_t sub_10017A858(uint64_t a1)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t sub_10017A868(uint64_t a1)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t sub_10017A878(uint64_t a1)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, v1);
}

uint64_t sub_10017A888(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v2);
}

void MarkedCircularBuffer.init(initialCapacity:)(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = CircularBuffer.init(initialCapacity:)(a1, a2);
  *(void *)(a3 + 8) = v4;
  *(void *)(a3 + 16) = v5;
  *(void *)(a3 + 24) = 0LL;
  *(_BYTE *)(a3 + 3sub_100019F7C(v0 + 2) = 1;
  sub_10001945C();
}

uint64_t MarkedCircularBuffer.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return CircularBuffer.first.getter(*(void *)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), *(void *)(a1 + 16), a2);
}

void MarkedCircularBuffer.removeFirst()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for Optional(0LL, v4);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v11 - v6;
  MarkedCircularBuffer.popFirst()(a1, v8, v9, v10);
  if (sub_10001D158((uint64_t)v7, 1LL, v4) == 1)
  {
    __break(1u);
  }

  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, v7, v4);
    sub_10002A3D4();
  }

BOOL MarkedCircularBuffer.isEmpty.getter()
{
  uint64_t v0 = sub_10017C048();
  return CircularBuffer.isEmpty.getter(v0, v1, v2);
}

BOOL MarkedCircularBuffer.hasMark.getter()
{
  return (*(_BYTE *)(v0 + 32) & 1) == 0;
}

void MarkedCircularBuffer.append(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

Swift::Void __swiftcall MarkedCircularBuffer.mark()()
{
  uint64_t v1 = sub_10017C048();
  CircularBuffer.count.getter(v1, v2, v3, v4);
  if (v5 >= 1)
  {
    *(void *)(v0 + 24) = v5 - 1;
    *(_BYTE *)(v0 + 3sub_100019F7C(v0 + 2) = 0;
  }

void MarkedCircularBuffer.count.getter()
{
  uint64_t v0 = sub_10017C048();
  CircularBuffer.count.getter(v0, v1, v2, v3);
}

unint64_t MarkedCircularBuffer.markedElementIndex.getter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = sub_10017C03C(a1, a2, a3, a4, a5, a6, a7, a8, v23);
  sub_10017C05C(v9, v10, v11, v12, v13, v14, v15, v16, v24, v25, v26);
  if ((v27 & 1) != 0) {
    return 0x200000000000000LL;
  }
  unint64_t v18 = MarkedCircularBuffer.startIndex.getter(a1);
  unsigned int v19 = sub_10017BFC0(v18);
  unint64_t v22 = MarkedCircularBuffer.index(_:offsetBy:)(v19, v20, v21);
  return v22 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)(HIBYTE(v22) != 0) << 56);
}

uint64_t MarkedCircularBuffer.startIndex.getter(uint64_t a1)
{
  return sub_10017ACAC(a1, (uint64_t (*)(void, void, void, void))CircularBuffer.startIndex.getter);
}

unint64_t MarkedCircularBuffer.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CircularBuffer.distance(from:to:)( a1 & 0x1FFFFFFFFFFFFFFLL,  a2 & 0x1FFFFFFFFFFFFFFLL,  *v3,  v3[1],  v3[2],  *(void *)(a3 + 16));
}

void MarkedCircularBuffer.subscript.getter(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
}

uint64_t MarkedCircularBuffer.index(after:)(uint64_t a1, uint64_t a2)
{
  return sub_10017BAF8( a1,  a2,  (uint64_t (*)(uint64_t, void, void, void, void))CircularBuffer.index(after:));
}

uint64_t MarkedCircularBuffer._buffer.getter()
{
  return swift_retain(*v0);
}

uint64_t MarkedCircularBuffer._buffer.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_release(*v3);
  *uint64_t v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t MarkedCircularBuffer._markedIndexOffset.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t MarkedCircularBuffer._markedIndexOffset.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 24) = result;
  *(_BYTE *)(v2 + 3sub_100019F7C(v0 + 2) = a2 & 1;
  return result;
}

uint64_t MarkedCircularBuffer.popFirst()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(_BYTE *)(v4 + 32) & 1) == 0)
  {
    uint64_t v5 = *(void *)(v4 + 24);
    BOOL v6 = v5 < 1;
    uint64_t v7 = v5 - 1;
    char v8 = v6;
    if (v6) {
      uint64_t v7 = 0LL;
    }
    *(void *)(v4 + 24) = v7;
    *(_BYTE *)(v4 + 3sub_100019F7C(v0 + 2) = v8;
  }

  uint64_t v9 = type metadata accessor for CircularBuffer(0LL, *(void *)(a1 + 16), a3, a4);
  return CircularBuffer.popFirst()(v9);
}

uint64_t sub_10017AB88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002AC950);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t MarkedCircularBuffer.description.getter()
{
  return CircularBuffer.description.getter();
}

BOOL MarkedCircularBuffer.isMarked(index:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = MarkedCircularBuffer.endIndex.getter(a2);
  BOOL result = static CircularBuffer.Index.< infix(_:_:)( a1 & 0x1FFFFFFFFFFFFFFLL,  v4 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)(HIBYTE(v4) != 0) << 56));
  if (result)
  {
    uint64_t v13 = sub_10017C03C(result, v6, v7, v8, v9, v10, v11, v12, v26);
    sub_10017C05C(v13, v14, v15, v16, v17, v18, v19, v20, v27, v28, v29);
    if ((v31 & 1) != 0)
    {
      char v21 = 0;
    }

    else
    {
      unsigned int v22 = MarkedCircularBuffer.startIndex.getter(a2);
      unint64_t v23 = MarkedCircularBuffer.index(_:offsetBy:)(v22, v30, a2);
      unint64_t v24 = sub_10017BFC0(v23);
      char v21 = static CircularBuffer.Index.== infix(_:_:)(v24, v25);
    }

    return v21 & 1;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t MarkedCircularBuffer.endIndex.getter(uint64_t a1)
{
  return sub_10017ACAC(a1, (uint64_t (*)(void, void, void, void))CircularBuffer.endIndex.getter);
}

uint64_t sub_10017ACAC(uint64_t a1, uint64_t (*a2)(void, void, void, void))
{
  return a2(*v2, v2[1], v2[2], *(void *)(a1 + 16)) & 0x1FFFFFFFFFFFFFFLL;
}

unint64_t MarkedCircularBuffer.index(_:offsetBy:)(unsigned int a1, uint64_t a2, uint64_t a3)
{
  return CircularBuffer.index(_:offsetBy:)(a1, a2, *v3, v3[1], v3[2], *(void *)(a3 + 16)) & 0x1FFFFFFFFFFFFFFLL;
}

uint64_t MarkedCircularBuffer.markedElement.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v16 = *(void *)(a1 + 16);
  uint64_t v13 = type metadata accessor for CircularBuffer.Index(255LL, v16, v11, v12);
  type metadata accessor for Optional(0LL, v13);
  return sub_1000A8A1C( (void (*)(uint64_t, uint64_t))sub_10017ADEC,  (uint64_t)&type metadata for Never,  v16,  v14,  a9);
}

void sub_10017AD90(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
}

void sub_10017ADEC(uint64_t a1@<X8>)
{
}

void MarkedCircularBuffer.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL), a1, v4);
  type metadata accessor for CircularBuffer(0LL, v4, v7, v8);
  CircularBuffer.subscript.setter();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  sub_10002A3D4();
}

void MarkedCircularBuffer.subscript.modify(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = malloc(0x60uLL);
  *a1 = v7;
  v7[5] = a2;
  v7[6] = a3;
  uint64_t v8 = *(void *)(a3 + 16);
  v7[7] = v3;
  v7[8] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[9] = v9;
  size_t v10 = *(void *)(v9 + 64);
  void v7[10] = malloc(v10);
  uint64_t v11 = malloc(v10);
  v7[11] = v11;
  __int128 v12 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v3;
  *((_OWORD *)v7 + 1) = v12;
  *((_BYTE *)v7 + 3sub_100019F7C(v0 + 2) = *(_BYTE *)(v3 + 32);
  MarkedCircularBuffer.subscript.getter(a3, (uint64_t)v11);
  sub_10002A3D4();
}

void sub_10017AF40(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 80LL);
  uint64_t v4 = *(void **)(*(void *)a1 + 88LL);
  if ((a2 & 1) != 0)
  {
    sub_1000EB688();
    sub_10017C01C();
    sub_1000EB6AC();
  }

  else
  {
    MarkedCircularBuffer.subscript.setter(*(void *)(*(void *)a1 + 88LL), v2[5] & 0x1FFFFFFFFFFFFFFLL, v2[6]);
  }

  free(v4);
  free(v3);
  sub_1000EB574(v2);
}

unint64_t MarkedCircularBuffer.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CircularBuffer.subscript.getter( a1 & 0x1FFFFFFFFFFFFFFLL,  a2 & 0x1FFFFFFFFFFFFFFLL,  *(void *)v3,  *(void *)(v3 + 8),  *(void *)(v3 + 16),  *(void *)(a3 + 16));
}

uint64_t MarkedCircularBuffer.subscript.setter( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7 = a4;
  uint64_t v10 = HIBYTE(a4) & 1;
  uint64_t v48 = a6;
  uint64_t v11 = *(void *)(a6 + 16);
  uint64_t v12 = type metadata accessor for Optional(0LL, v11);
  v46[1] = *(void *)(v12 - 8);
  _OWORD v46[2] = v12;
  uint64_t v13 = __chkstk_darwin(v12);
  v46[0] = (uint64_t)v46 - v14;
  uint64_t v52 = *(void *)(v11 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v47 = (char *)v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v49 = (uint64_t)v46 - v18;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)v46 - v19;
  uint64_t v21 = sub_10002A4C8();
  CircularBuffer.startIndex.getter(v21, a2, a3, v11);
  char v23 = v22;
  sub_10001EDD8();
  char v53 = v23 & 1;
  uint64_t v50 = a5 & 0x1FFFFFFFFFFFFFFLL;
  sub_10017BF54();
  if ((sub_10017BF68(v24) & 1) == 0)
  {
    uint64_t v51 = v20;
    uint64_t v25 = v52;
    while (1)
    {
      char v26 = v10;
      uint64_t v10 = v49;
      sub_10017BFA8(v49);
      sub_10002A4C8();
      unint64_t v27 = sub_10017BF90();
      sub_10001EDD8();
      char v53 = HIBYTE(v27) & 1;
      uint64_t v28 = v10;
      LOBYTE(v1sub_10019B2E8(v0, 0) = v26;
      (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(v51, v28, v11);
      uint64_t v29 = (v26 & 1) != 0 ? 0x100000000000000LL : 0LL;
      unint64_t v30 = v29 & 0xFF00000000000000LL | v7 & 0xFFFFFFFFFFFFFFLL;
      if ((sub_10017C068(v30) & 1) != 0) {
        break;
      }
      char v31 = v51;
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v47, v51, v11);
      type metadata accessor for CircularBuffer(0LL, v11, v32, v33);
      uint64_t v34 = v46[3];
      CircularBuffer.subscript.setter();
      uint64_t v35 = *(void *)(v34 + 24);
      char v36 = *(_BYTE *)(v34 + 32);
      uint64_t v54 = *(void *)v34;
      __int128 v55 = *(_OWORD *)(v34 + 8);
      uint64_t v56 = v35;
      char v57 = v36;
      swift_retain();
      unint64_t v37 = MarkedCircularBuffer.index(after:)(v30, v48);
      swift_release();
      LOBYTE(v1sub_10019B2E8(v0, 0) = HIBYTE(v37) != 0;
      char v38 = v31;
      unint64_t v7 = v37;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v38, v11);
      sub_10017BF54();
      if ((sub_10017BF68(v39) & 1) != 0) {
        goto LABEL_10;
      }
    }

    (*(void (**)(char *, uint64_t))(v52 + 8))(v51, v11);
  }

void MarkedCircularBuffer.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = malloc(0x60uLL);
  *a1 = v9;
  v9[10] = a4;
  v9[11] = v4;
  v9[8] = a2;
  v9[9] = a3;
  __int128 v10 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v4;
  *((_OWORD *)v9 + 1) = v10;
  *((_BYTE *)v9 + 3sub_100019F7C(v0 + 2) = *(_BYTE *)(v4 + 32);
  v9[5] = MarkedCircularBuffer.subscript.getter(a2 & 0x1FFFFFFFFFFFFFFLL, a3 & 0x1FFFFFFFFFFFFFFLL, a4);
  v9[6] = v11;
  v9[7] = v12;
  sub_10002A3D4();
}

void sub_10017B350(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 40LL);
  if ((a2 & 1) != 0)
  {
    uint64_t v4 = swift_retain();
    sub_10017BF78(v4);
    swift_release();
  }

  else
  {
    sub_10017BF78(v3);
  }

  sub_1000EB574(v2);
}

void sub_10017B3B0(uint64_t a1@<X8>)
{
}

void sub_10017B3BC(uint64_t a1@<X8>)
{
}

void sub_10017B3C8(uint64_t (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1();
  sub_1000EB634(v3);
  *(_WORD *)(a2 + 4) = v4;
  if (v5) {
    char v6 = 0;
  }
  else {
    char v6 = 1;
  }
  sub_1000EBAA8(v6);
  sub_10001945C();
}

void (*sub_10017B3F4(void *a1, unsigned int *a2, uint64_t a3))(uint64_t a1)
{
  unint64_t v7 = malloc(0x50uLL);
  *a1 = v7;
  uint64_t v8 = *a2;
  uint64_t v9 = *((unsigned __int16 *)a2 + 2);
  uint64_t v10 = *((unsigned __int8 *)a2 + 6);
  int v11 = *((unsigned __int8 *)a2 + 7);
  __int128 v12 = *(_OWORD *)(v3 + 16);
  *unint64_t v7 = *(_OWORD *)v3;
  v7[1] = v12;
  *((_BYTE *)v7 + 3sub_100019F7C(v0 + 2) = *(_BYTE *)(v3 + 32);
  BOOL v13 = v11 == 0;
  uint64_t v14 = 0x100000000000000LL;
  if (v13) {
    uint64_t v14 = 0LL;
  }
  *((void *)v7 + 9) = sub_10017B4B4((void *)v7 + 5, v14 | (v10 << 48) | (v9 << 32) | v8, a3);
  return sub_10017B48C;
}

void sub_10017B48C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  (*(void (**)(uint64_t))(*(void *)a1 + 72LL))(*(void *)a1 + 40LL);
  sub_1000EB7C4(v1);
}

void (*sub_10017B4B4(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  *a1 = v5;
  a1[1] = v6;
  unint64_t v7 = malloc(*(void *)(v6 + 64));
  a1[2] = v7;
  MarkedCircularBuffer.subscript.getter(a3, (uint64_t)v7);
  return sub_1000E812C;
}

unint64_t sub_10017B520@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = *((unsigned __int16 *)a1 + 6);
  uint64_t v6 = *((unsigned __int8 *)a1 + 14);
  int v7 = *((unsigned __int8 *)a1 + 15);
  uint64_t v8 = 0x100000000000000LL;
  if (*((_BYTE *)a1 + 7)) {
    uint64_t v9 = 0x100000000000000LL;
  }
  else {
    uint64_t v9 = 0LL;
  }
  unint64_t v10 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 6) << 48) | v9;
  if (!v7) {
    uint64_t v8 = 0LL;
  }
  unint64_t result = MarkedCircularBuffer.subscript.getter(v10, v4 | (v5 << 32) | (v6 << 48) | v8, a2);
  *a3 = result;
  a3[1] = v12;
  a3[2] = v13;
  return result;
}

void sub_10017B5B8(uint64_t a1@<X8>)
{
}

void sub_10017B5C4(uint64_t a1)
{
}

void sub_10017B5D0(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3 = 0x100000000000000LL;
  if (!*((_BYTE *)a2 + 7)) {
    uint64_t v3 = 0LL;
  }
  MarkedCircularBuffer.subscript.setter( a1,  v3 | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 48) | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32) | *a2,  a3);
}

void (*sub_10017B5FC(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  int v7 = malloc(0x60uLL);
  *a1 = v7;
  v7[5] = v3;
  v7[6] = a3;
  uint64_t v8 = *(void *)(a3 + 16);
  v7[7] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[8] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[9] = malloc(v10);
  int v11 = malloc(v10);
  void v7[10] = v11;
  *((_DWORD *)v7 + 9) = *(_DWORD *)a2;
  *((_WORD *)v7 + 17) = *(_WORD *)(a2 + 4);
  *((_BYTE *)v7 + 33) = *(_BYTE *)(a2 + 6);
  *((_BYTE *)v7 + 88) = *(_BYTE *)(a2 + 7);
  __int128 v12 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)int v7 = *(_OWORD *)v3;
  *((_OWORD *)v7 + 1) = v12;
  *((_BYTE *)v7 + 3sub_100019F7C(v0 + 2) = *(_BYTE *)(v3 + 32);
  MarkedCircularBuffer.subscript.getter(a3, (uint64_t)v11);
  return sub_10017B6D8;
}

void sub_10017B6D8(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[9];
  uint64_t v4 = (void *)(*a1)[10];
  if ((a2 & 1) != 0)
  {
    sub_1000EB688();
    sub_10017C01C();
    sub_1000EB6AC();
  }

  else
  {
    uint64_t v5 = 0x100000000000000LL;
    if (!*((_BYTE *)*a1 + 88)) {
      uint64_t v5 = 0LL;
    }
    MarkedCircularBuffer.subscript.setter( (*a1)[10],  v5 | ((unint64_t)*((unsigned __int8 *)*a1 + 33) << 48) | ((unint64_t)*((unsigned __int16 *)*a1 + 17) << 32) | *((unsigned int *)*a1 + 9),  v2[6]);
  }

  free(v4);
  free(v3);
  sub_1000EB574(v2);
}

uint64_t sub_10017B77C(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3 = 0x100000000000000LL;
  if (*((_BYTE *)a2 + 7)) {
    uint64_t v4 = 0x100000000000000LL;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (!*((_BYTE *)a2 + 15)) {
    uint64_t v3 = 0LL;
  }
  return MarkedCircularBuffer.subscript.setter( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 48) | v4,  a2[2] | ((unint64_t)*((unsigned __int16 *)a2 + 6) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 14) << 48) | v3,  a3);
}

void (*sub_10017B7E0(void *a1, unsigned int *a2, uint64_t a3))(uint64_t a1, char a2)
{
  int v7 = malloc(0x60uLL);
  *a1 = v7;
  v7[8] = v3;
  v7[9] = a3;
  uint64_t v8 = *a2;
  *((_DWORD *)v7 + 9) = v8;
  uint64_t v9 = *((unsigned __int16 *)a2 + 2);
  *((_WORD *)v7 + 17) = v9;
  uint64_t v10 = *((unsigned __int8 *)a2 + 6);
  *((_BYTE *)v7 + 33) = v10;
  int v11 = *((unsigned __int8 *)a2 + 7);
  *((_BYTE *)v7 + 86) = v11;
  uint64_t v12 = a2[2];
  *((_DWORD *)v7 + 2sub_10019B2E8(v0, 0) = v12;
  uint64_t v13 = *((unsigned __int16 *)a2 + 6);
  *((_WORD *)v7 + 4sub_100019F7C(v0 + 2) = v13;
  uint64_t v14 = *((unsigned __int8 *)a2 + 14);
  *((_BYTE *)v7 + 87) = v14;
  int v15 = *((unsigned __int8 *)a2 + 15);
  *((_BYTE *)v7 + 88) = v15;
  uint64_t v16 = v8 | (v9 << 32) | (v10 << 48);
  uint64_t v17 = 0x100000000000000LL;
  __int128 v18 = *(_OWORD *)(v3 + 16);
  if (v11) {
    uint64_t v19 = 0x100000000000000LL;
  }
  else {
    uint64_t v19 = 0LL;
  }
  *(_OWORD *)int v7 = *(_OWORD *)v3;
  *((_OWORD *)v7 + 1) = v18;
  if (!v15) {
    uint64_t v17 = 0LL;
  }
  *((_BYTE *)v7 + 3sub_100019F7C(v0 + 2) = *(_BYTE *)(v3 + 32);
  v7[5] = MarkedCircularBuffer.subscript.getter(v16 | v19, v12 | (v13 << 32) | (v14 << 48) | v17, a3);
  v7[6] = v20;
  v7[7] = v21;
  return sub_10017B8C4;
}

void sub_10017B8C4(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 40LL);
  if ((a2 & 1) != 0)
  {
    uint64_t v4 = swift_retain();
    sub_10017BFE0(v4);
    swift_release();
  }

  else
  {
    sub_10017BFE0(v3);
  }

  sub_1000EB574(v2);
}

uint64_t sub_10017B964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for MarkedCircularBuffer<A>, a3);
  return MutableCollection<>.partition(by:)(a1, a2, a3, WitnessTable, a4);
}

__n128 sub_10017B9D8@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __int128 v5 = *(_OWORD *)(v2 + 16);
  v15[0] = *(_OWORD *)v2;
  __n128 v14 = (__n128)v15[0];
  v15[1] = v5;
  unsigned __int8 v16 = *(_BYTE *)(v2 + 32);
  unsigned __int8 v6 = v16;
  unint64_t v7 = *(void *)(v2 + 16);
  unint64_t v8 = *(void *)(v2 + 24);
  swift_retain();
  unint64_t v9 = MarkedCircularBuffer.startIndex.getter(a1);
  LODWORD(a1) = v9;
  unint64_t v10 = HIDWORD(v9);
  unint64_t v11 = HIWORD(v9);
  BOOL v12 = HIBYTE(v9) != 0;
  sub_100063354(v15);
  __n128 result = v14;
  *a2 = v14;
  a2[1].n128_u64[0] = v7;
  a2[1].n128_u64[1] = v8;
  a2[2].n128_u8[0] = v6;
  a2[2].n128_u32[1] = a1;
  a2[2].n128_u16[4] = v10;
  a2[2].n128_u8[10] = v11;
  a2[2].n128_u8[11] = v12;
  return result;
}

uint64_t sub_10017BA84(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for MarkedCircularBuffer<A>, a1);
  return Collection.underestimatedCount.getter(a1, WitnessTable);
}

uint64_t sub_10017BAB8(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for MarkedCircularBuffer<A>, a1);
  return Collection._copyToContiguousArray()(a1, WitnessTable);
}

uint64_t MarkedCircularBuffer.index(before:)(uint64_t a1, uint64_t a2)
{
  return sub_10017BAF8( a1,  a2,  (uint64_t (*)(uint64_t, void, void, void, void))CircularBuffer.index(before:));
}

uint64_t sub_10017BAF8( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, void, void, void, void))
{
  return a3(a1 & 0x1FFFFFFFFFFFFFFLL, *v3, v3[1], v3[2], *(void *)(a2 + 16)) & 0x1FFFFFFFFFFFFFFLL;
}

uint64_t sub_10017BB28(uint64_t a1)
{
  return swift_getWitnessTable(protocol conformance descriptor for MarkedCircularBuffer<A>, a1);
}

uint64_t sub_10017BB38(uint64_t a1)
{
  return swift_getWitnessTable("\t0\b", a1);
}

uint64_t sub_10017BB48(uint64_t a1)
{
  return swift_getWitnessTable(protocol conformance descriptor for CircularBuffer<A>, a1);
}

uint64_t sub_10017BB58(uint64_t a1)
{
  return swift_getWitnessTable(protocol conformance descriptor for MarkedCircularBuffer<A>, a1);
}

uint64_t sub_10017BB68(uint64_t a1)
{
  return swift_getWitnessTable(protocol conformance descriptor for CircularBuffer<A>, a1);
}

uint64_t sub_10017BB78(uint64_t a1)
{
  return swift_getWitnessTable(protocol conformance descriptor for MarkedCircularBuffer<A>, a1);
}

uint64_t sub_10017BB88(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for MarkedCircularBuffer<A>);
  return swift_getWitnessTable( (const char *)&protocol conformance descriptor for <> DefaultIndices<A>,  a1,  &WitnessTable);
}

uint64_t sub_10017BBD0(uint64_t a1)
{
  return swift_getWitnessTable("y/\b", a1);
}

uint64_t sub_10017BBE4(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for MarkedCircularBuffer<A>);
  return swift_getWitnessTable( (const char *)&protocol conformance descriptor for <> DefaultIndices<A>,  a1,  &WitnessTable);
}

uint64_t sub_10017BC2C(uint64_t a1)
{
  return swift_getWitnessTable("a/\b", a1);
}

void sub_10017BC3C(uint64_t a1@<X8>)
{
}

void sub_10017BC48(uint64_t a1@<X8>)
{
  uint64_t v4 = sub_10017C02C(v2, v3);
  sub_1000EB634(v4);
  *(_WORD *)(a1 + 4) = v5;
  if (v6) {
    char v7 = 0;
  }
  else {
    char v7 = 1;
  }
  sub_1000EBAA8(v7);
  sub_10001945C();
}

void sub_10017BC7C(uint64_t a1)
{
}

void sub_10017BC88(uint64_t a1)
{
  uint64_t v4 = sub_10017C02C(v2, v3);
  sub_1000EB634(v4);
  *(_WORD *)(a1 + 4) = v5;
  if (v6) {
    char v7 = 0;
  }
  else {
    char v7 = 1;
  }
  sub_1000EBAA8(v7);
  sub_10001945C();
}

void sub_10017BCBC(uint64_t a1@<X8>)
{
  if (v6) {
    int v5 = 0;
  }
  unint64_t v7 = MarkedCircularBuffer.index(_:offsetBy:)(v5 | v4, v2, v3);
  sub_1000EB634(v7);
  *(_WORD *)(a1 + 4) = v8;
  if (v6) {
    char v9 = 0;
  }
  else {
    char v9 = 1;
  }
  sub_1000EBAA8(v9);
  sub_10001945C();
}

uint64_t sub_10017BCFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for MarkedCircularBuffer<A>, a4);
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)(a1, a2, a3, a4, WitnessTable);
}

unint64_t sub_10017BD60(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  if (*((_BYTE *)a1 + 7)) {
    uint64_t v3 = 0x100000000000000LL;
  }
  else {
    uint64_t v3 = 0LL;
  }
  unint64_t v4 = v3 | ((unint64_t)*((unsigned __int8 *)a1 + 6) << 48) | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32) | *a1;
  if (*((_BYTE *)a2 + 7)) {
    uint64_t v5 = 0x100000000000000LL;
  }
  else {
    uint64_t v5 = 0LL;
  }
  return MarkedCircularBuffer.distance(from:to:)( v4,  v5 | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 48) | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32) | *a2,  a3);
}

uint64_t sub_10017BDB0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  *(void *)(a1 + 24) = a2[3];
  *(_BYTE *)(a1 + 3sub_100019F7C(v0 + 2) = *((_BYTE *)a2 + 32);
  swift_retain(v3);
  return a1;
}

uint64_t *sub_10017BDF4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  *((_BYTE *)a1 + 3sub_100019F7C(v0 + 2) = *((_BYTE *)a2 + 32);
  a1[3] = v6;
  return a1;
}

uint64_t *sub_10017BE58(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  a1[3] = a2[3];
  *((_BYTE *)a1 + 3sub_100019F7C(v0 + 2) = *((_BYTE *)a2 + 32);
  return a1;
}

uint64_t sub_10017BEA4(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 33))
    {
      LODWORD(v7(v1, v0, 2LL, v3, v6, v5, v4, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v7(v1, v0, 2LL, v3, v6, v5, v4, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_10017BEE4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 3sub_100019F7C(v0 + 2) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata accessor for MarkedCircularBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MarkedCircularBuffer);
}

  ;
}

void sub_10017BF54()
{
}

uint64_t sub_10017BF68(uint64_t a1)
{
  return static CircularBuffer.Index.== infix(_:_:)(v1, a1 & 0x1FFFFFFFFFFFFFFLL);
}

uint64_t sub_10017BF78(uint64_t a1)
{
  return MarkedCircularBuffer.subscript.setter(a1, v2, v3, v4, v5, v1);
}

unint64_t sub_10017BF90()
{
  return CircularBuffer.index(after:)(v4, v0, v2, v3, v1);
}

void sub_10017BFA8(uint64_t a1@<X8>)
{
}

unint64_t sub_10017BFC0(unint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)(HIBYTE(a1) != 0) << 56);
}

uint64_t sub_10017BFE0(uint64_t a1)
{
  return MarkedCircularBuffer.subscript.setter(a1, v3, v1, v4, v5, v2);
}

uint64_t sub_10017BFF8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v4 - 200) + 8LL))(v3, *(void *)(v4 - 192));
}

void sub_10017C01C()
{
}

uint64_t sub_10017C02C@<X0>(uint64_t (*a1)(uint64_t)@<X3>, uint64_t a2@<X8>)
{
  return a1(v4 | (v3 << 48) | (v2 << 32) | a2);
}

uint64_t sub_10017C03C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10017AB88(v9 + 24, (uint64_t)&a9);
}

uint64_t sub_10017C048()
{
  return *(void *)v0;
}

uint64_t sub_10017C05C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  return sub_10017AB88((uint64_t)&a9, (uint64_t)&a11);
}

uint64_t sub_10017C068(uint64_t a1)
{
  return static CircularBuffer.Index.== infix(_:_:)(a1, *(void *)(v1 - 152));
}

__n128 sub_10017C074@<Q0>( __int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v15 = a3;
  __n128 v34 = (__n128)a1[1];
  __int128 v35 = *a1;
  uint64_t v32 = *((void *)a1 + 5);
  uint64_t v33 = *((void *)a1 + 4);
  uint64_t v30 = *((void *)a1 + 7);
  uint64_t v31 = *((void *)a1 + 6);
  if ((a5 & 1) != 0)
  {
    v38[0] = a3;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_10001FDC4(v15, a4, 1);
    sub_10018F7D8(v38);
    sub_10001FDE0(v15, a4, 1);
    uint64_t v15 = v38[0];
    if (a2 < 0 || (a2 & 0x4000000000000000LL) != 0)
    {
      swift_bridgeObjectRetain();
      sub_1000173D4();
      uint64_t v18 = v28;
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v18 = a2 & 0xFFFFFFFFFFFFFF8LL;
      swift_bridgeObjectRetain();
    }

    v38[0] = v18;
    sub_10017C2EC(v38);
    swift_bridgeObjectRelease();
    a4 = 0LL;
    a2 = v38[0];
  }

  else
  {
    swift_retain();
    swift_retain();
    swift_retain();
  }

  uint64_t v19 = *(void *)(a6 + 48);
  swift_retain();
  sub_10007D8BC(2LL, (uint64_t)v37);
  sub_100077A0C((uint64_t)v37, (uint64_t)v38);
  if (!v38[1])
  {
    swift_release(a8);
    uint64_t v21 = a11;
    goto LABEL_11;
  }

  char v20 = v39;
  sub_100077A54(v37);
  swift_release(v19);
  uint64_t v21 = a8;
  uint64_t v19 = a11;
  if ((v20 & 1) == 0)
  {
LABEL_11:
    swift_release(v21);
    swift_release(v19);
    swift_release(a6);
    uint64_t v23 = 0LL;
    char v26 = 1;
    goto LABEL_12;
  }

  uint64_t v22 = *(void *)(a6 + 48);
  swift_retain();
  uint64_t v23 = sub_10007DDCC(2LL);
  uint64_t v29 = a7;
  char v25 = v24;
  swift_release(v22);
  swift_release(a6);
  swift_release(a8);
  swift_release(a11);
  char v26 = v25 & 1;
  a7 = v29;
LABEL_12:
  __n128 result = v34;
  *(_OWORD *)a9 = v35;
  *(__n128 *)(a9 + 16) = v34;
  *(void *)(a9 + 3sub_100019F7C(v0 + 2) = v33;
  *(void *)(a9 + 4sub_10019B2E8(v0, 0) = v32;
  *(void *)(a9 + 48) = v31;
  *(void *)(a9 + 56) = v30;
  *(void *)(a9 + 64) = a2;
  *(void *)(a9 + 7sub_100019F7C(v0 + 2) = v15;
  *(void *)(a9 + 8sub_10019B2E8(v0, 0) = a4;
  *(_BYTE *)(a9 + 88) = a5 & 1;
  *(void *)(a9 + 96) = a6;
  *(void *)(a9 + 104) = a7;
  *(void *)(a9 + 11sub_100019F7C(v0 + 2) = a8;
  *(void *)(a9 + 12sub_10019B2E8(v0, 0) = a10;
  *(void *)(a9 + sub_100081CEC(v0 + 128) = a11;
  *(void *)(a9 + 136) = v23;
  *(_BYTE *)(a9 + 144) = v26;
  return result;
}

uint64_t sub_10017C2EC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_1000F23B0();
    *a1 = v2;
  }

  uint64_t v4 = *(void *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  sub_10017C364(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

void sub_10017C364(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (v3) {
        sub_10017CB40(0LL, v3, 1LL, a1);
      }
      return;
    }

    goto LABEL_184;
  }

  Swift::Int v5 = v4;
  sub_10018DE44(v3 / 2);
  uint64_t v133 = v6;
  uint64_t v136 = v7;
  uint64_t v125 = a1;
  if (v3 <= 0)
  {
LABEL_148:
    unint64_t v10 = (char *)_swiftEmptyArrayStorage;
    unint64_t v68 = _swiftEmptyArrayStorage[2];
LABEL_149:
    if (v68 < 2)
    {
LABEL_160:
      uint64_t v117 = swift_bridgeObjectRelease();
      if (v3 >= -1) {
        goto LABEL_161;
      }
      goto LABEL_188;
    }

    uint64_t v118 = *v125;
    while (1)
    {
      unint64_t v119 = v68 - 2;
      if (v68 < 2) {
        break;
      }
      if (!v118) {
        goto LABEL_192;
      }
      uint64_t v120 = *(void *)&v10[16 * v119 + 32];
      uint64_t v121 = *(void *)&v10[16 * v68 + 24];
      sub_10017CC90( (void **)(v118 + 8 * v120),  (id *)(v118 + 8LL * *(void *)&v10[16 * v68 + 16]),  v118 + 8 * v121,  v133);
      if (v1) {
        goto LABEL_146;
      }
      if (v121 < v120) {
        goto LABEL_179;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0) {
        unint64_t v10 = sub_1001788E0((uint64_t)v10);
      }
      if (v119 >= *((void *)v10 + 2)) {
        goto LABEL_180;
      }
      uint64_t v122 = &v10[16 * v119 + 32];
      *(void *)uint64_t v122 = v120;
      *((void *)v122 + 1) = v121;
      unint64_t v123 = *((void *)v10 + 2);
      if (v68 > v123) {
        goto LABEL_181;
      }
      memmove(&v10[16 * v68 + 16], &v10[16 * v68 + 32], 16 * (v123 - v68));
      *((void *)v10 + sub_100019F7C(v0 + 2) = v123 - 1;
      unint64_t v68 = v123 - 1;
      if (v123 <= 2) {
        goto LABEL_160;
      }
    }

LABEL_178:
    __break(1u);
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
LABEL_181:
    __break(1u);
LABEL_182:
    __break(1u);
LABEL_183:
    __break(1u);
LABEL_184:
    __break(1u);
LABEL_185:
    __break(1u);
LABEL_186:
    __break(1u);
LABEL_187:
    __break(1u);
LABEL_188:
    __break(1u);
LABEL_189:
    __break(1u);
LABEL_190:
    __break(1u);
LABEL_191:
    __break(1u);
LABEL_192:
    __break(1u);
    return;
  }

  Swift::Int v8 = 0LL;
  uint64_t v9 = *a1;
  uint64_t v124 = *a1 - 8;
  unint64_t v10 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v134 = v3;
  Swift::Int v126 = v5;
  uint64_t v135 = *a1;
  while (1)
  {
    Swift::Int v11 = v8;
    Swift::Int v12 = v8 + 1;
    Swift::Int v130 = v8;
    if (v8 + 1 < v3)
    {
      uint64_t v127 = v10;
      uint64_t v13 = *(void **)(v9 + 8 * v8);
      id v14 = *(id *)(v9 + 8 * v12);
      id v15 = v13;
      sub_1000B8508(0xFu);
      if (v17) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = 0LL;
      }
      if (v17) {
        unint64_t v19 = v17;
      }
      else {
        unint64_t v19 = 0xE000000000000000LL;
      }
      sub_1000B8508(0xFu);
      if (v21) {
        uint64_t v22 = v20;
      }
      else {
        uint64_t v22 = 0LL;
      }
      if (v21) {
        unint64_t v23 = v21;
      }
      else {
        unint64_t v23 = 0xE000000000000000LL;
      }
      if (v18 == v22 && v19 == v23) {
        int v25 = 0;
      }
      else {
        int v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v22, v23, 1LL);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      Swift::Int v12 = v11 + 2;
      Swift::Int v3 = v134;
      uint64_t v9 = v135;
      if (v11 + 2 < v134)
      {
        while (1)
        {
          uint64_t v26 = v9 + 8 * v11;
          unint64_t v27 = *(void **)(v26 + 8);
          id v28 = *(id *)(v26 + 16);
          id v29 = v27;
          sub_1000B8508(0xFu);
          uint64_t v32 = v31 ? v30 : 0LL;
          unint64_t v33 = v31 ? v31 : 0xE000000000000000LL;
          sub_1000B8508(0xFu);
          uint64_t v36 = v35 ? v34 : 0LL;
          unint64_t v37 = v35 ? v35 : 0xE000000000000000LL;
          BOOL v38 = v32 == v36 && v33 == v37;
          int v39 = v38 ? 0 : _stringCompareWithSmolCheck(_:_:expecting:)(v32, v33, v36, v37, 1LL);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          if (((v25 ^ v39) & 1) != 0) {
            break;
          }
          Swift::Int v40 = v11 + 3;
          ++v11;
          Swift::Int v3 = v134;
          uint64_t v9 = v135;
          if (v40 >= v134)
          {
            Swift::Int v12 = v134;
            goto LABEL_46;
          }
        }

        Swift::Int v12 = v11 + 2;
        Swift::Int v3 = v134;
        uint64_t v9 = v135;
      }

LABEL_46:
      Swift::Int v5 = v126;
      if ((v25 & 1) != 0)
      {
        Swift::Int v11 = v130;
        if (v12 < v130) {
          goto LABEL_185;
        }
        if (v130 >= v12)
        {
          unint64_t v10 = v127;
        }

        else
        {
          uint64_t v41 = (uint64_t *)(v124 + 8 * v12);
          Swift::Int v42 = v12;
          Swift::Int v43 = v130;
          uint64_t v44 = (uint64_t *)(v9 + 8 * v130);
          unint64_t v10 = v127;
          do
          {
            if (v43 != --v42)
            {
              if (!v9) {
                goto LABEL_191;
              }
              uint64_t v45 = *v44;
              *uint64_t v44 = *v41;
              *uint64_t v41 = v45;
            }

            ++v43;
            --v41;
            ++v44;
          }

          while (v43 < v42);
        }
      }

      else
      {
        unint64_t v10 = v127;
        Swift::Int v11 = v130;
      }
    }

    if (v12 < v3)
    {
      if (__OFSUB__(v12, v11)) {
        goto LABEL_183;
      }
      if (v12 - v11 < v5)
      {
        if (__OFADD__(v11, v5)) {
          goto LABEL_186;
        }
        if (v11 + v5 >= v3) {
          Swift::Int v46 = v3;
        }
        else {
          Swift::Int v46 = v11 + v5;
        }
        if (v46 < v11) {
          goto LABEL_187;
        }
        if (v12 != v46)
        {
          uint64_t v128 = v10;
          Swift::Int v129 = v46;
          uint64_t v47 = v124 + 8 * v12;
          do
          {
            uint64_t v48 = *(void **)(v9 + 8 * v12);
            Swift::Int v49 = v11;
            uint64_t v131 = v47;
            uint64_t v50 = v47;
            while (1)
            {
              Swift::Int v51 = v12;
              uint64_t v52 = *(void **)v50;
              id v53 = v48;
              id v54 = v52;
              sub_1000B8508(0xFu);
              uint64_t v57 = v56 ? v55 : 0LL;
              unint64_t v58 = v56 ? v56 : 0xE000000000000000LL;
              sub_1000B8508(0xFu);
              uint64_t v61 = v60 ? v59 : 0LL;
              unint64_t v62 = v60 ? v60 : 0xE000000000000000LL;
              if (v57 == v61 && v58 == v62) {
                break;
              }
              char v64 = _stringCompareWithSmolCheck(_:_:expecting:)(v57, v58, v61, v62, 1LL);

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v64 & 1) == 0) {
                goto LABEL_89;
              }
              uint64_t v9 = v135;
              if (!v135) {
                goto LABEL_189;
              }
              Swift::Int v12 = v51;
              uint64_t v65 = *(void **)v50;
              uint64_t v48 = *(void **)(v50 + 8);
              *(void *)uint64_t v50 = v48;
              *(void *)(v50 + 8) = v65;
              v50 -= 8LL;
              if (v51 == ++v49) {
                goto LABEL_90;
              }
            }

            swift_bridgeObjectRelease_n(v58, 2LL);
LABEL_89:
            uint64_t v9 = v135;
            Swift::Int v12 = v51;
LABEL_90:
            ++v12;
            Swift::Int v11 = v130;
            uint64_t v47 = v131 + 8;
          }

          while (v12 != v129);
          Swift::Int v12 = v129;
          Swift::Int v3 = v134;
          Swift::Int v5 = v126;
          unint64_t v10 = v128;
        }
      }
    }

    if (v12 < v11) {
      goto LABEL_182;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0) {
      unint64_t v10 = sub_1001787F0(0LL, *((void *)v10 + 2) + 1LL, 1, v10);
    }
    unint64_t v67 = *((void *)v10 + 2);
    unint64_t v66 = *((void *)v10 + 3);
    unint64_t v68 = v67 + 1;
    uint64_t v9 = v135;
    if (v67 >= v66 >> 1)
    {
      uint64_t v116 = sub_1001787F0((char *)(v66 > 1), v67 + 1, 1, v10);
      uint64_t v9 = v135;
      unint64_t v10 = v116;
    }

    *((void *)v10 + sub_100019F7C(v0 + 2) = v68;
    uint64_t v69 = v10 + 32;
    uint64_t v70 = &v10[16 * v67 + 32];
    *(void *)uint64_t v70 = v11;
    *((void *)v70 + 1) = v12;
    Swift::Int v132 = v12;
    if (v67) {
      break;
    }
    unint64_t v68 = 1LL;
LABEL_140:
    Swift::Int v8 = v132;
    if (v132 >= v3) {
      goto LABEL_149;
    }
  }

  while (1)
  {
    unint64_t v71 = v68 - 1;
    if (v68 >= 4)
    {
      uint64_t v76 = &v69[16 * v68];
      uint64_t v77 = *((void *)v76 - 8);
      uint64_t v78 = *((void *)v76 - 7);
      BOOL v82 = __OFSUB__(v78, v77);
      uint64_t v79 = v78 - v77;
      if (v82) {
        goto LABEL_167;
      }
      uint64_t v81 = *((void *)v76 - 6);
      uint64_t v80 = *((void *)v76 - 5);
      BOOL v82 = __OFSUB__(v80, v81);
      uint64_t v74 = v80 - v81;
      char v75 = v82;
      if (v82) {
        goto LABEL_168;
      }
      unint64_t v83 = v68 - 2;
      uint64_t v84 = &v69[16 * v68 - 32];
      uint64_t v86 = *(void *)v84;
      uint64_t v85 = *((void *)v84 + 1);
      BOOL v82 = __OFSUB__(v85, v86);
      uint64_t v87 = v85 - v86;
      if (v82) {
        goto LABEL_169;
      }
      BOOL v82 = __OFADD__(v74, v87);
      uint64_t v88 = v74 + v87;
      if (v82) {
        goto LABEL_171;
      }
      if (v88 >= v79)
      {
        uint64_t v106 = &v69[16 * v71];
        uint64_t v108 = *(void *)v106;
        uint64_t v107 = *((void *)v106 + 1);
        BOOL v82 = __OFSUB__(v107, v108);
        uint64_t v109 = v107 - v108;
        if (v82) {
          goto LABEL_177;
        }
        BOOL v99 = v74 < v109;
        goto LABEL_129;
      }
    }

    else
    {
      if (v68 != 3)
      {
        uint64_t v100 = *((void *)v10 + 4);
        uint64_t v101 = *((void *)v10 + 5);
        BOOL v82 = __OFSUB__(v101, v100);
        uint64_t v93 = v101 - v100;
        char v94 = v82;
        goto LABEL_123;
      }

      uint64_t v73 = *((void *)v10 + 4);
      uint64_t v72 = *((void *)v10 + 5);
      BOOL v82 = __OFSUB__(v72, v73);
      uint64_t v74 = v72 - v73;
      char v75 = v82;
    }

    if ((v75 & 1) != 0) {
      goto LABEL_170;
    }
    unint64_t v83 = v68 - 2;
    Swift::Int v89 = &v69[16 * v68 - 32];
    uint64_t v91 = *(void *)v89;
    uint64_t v90 = *((void *)v89 + 1);
    BOOL v92 = __OFSUB__(v90, v91);
    uint64_t v93 = v90 - v91;
    char v94 = v92;
    if (v92) {
      goto LABEL_172;
    }
    uint64_t v95 = &v69[16 * v71];
    uint64_t v97 = *(void *)v95;
    uint64_t v96 = *((void *)v95 + 1);
    BOOL v82 = __OFSUB__(v96, v97);
    uint64_t v98 = v96 - v97;
    if (v82) {
      goto LABEL_174;
    }
    if (__OFADD__(v93, v98)) {
      goto LABEL_176;
    }
    if (v93 + v98 >= v74)
    {
      BOOL v99 = v74 < v98;
LABEL_129:
      if (v99) {
        unint64_t v71 = v83;
      }
      goto LABEL_131;
    }

    uint64_t v0 = 0;
    goto LABEL_47;
  }

  Swift::Int v8 = sub_100161AEC(v3.value._countAndFlagsBits, (uint64_t)v3.value._object, 10LL);
  uint64_t v0 = v27;
LABEL_47:
  sub_100019390();
  if ((v0 & 1) != 0) {
    return 0LL;
  }
  else {
    return v8;
  }
}

  __break(1u);
  return result;
}

LABEL_123:
    if ((v94 & 1) != 0) {
      goto LABEL_173;
    }
    uint64_t v102 = &v69[16 * v71];
    uint64_t v104 = *(void *)v102;
    uint64_t v103 = *((void *)v102 + 1);
    BOOL v82 = __OFSUB__(v103, v104);
    uint64_t v105 = v103 - v104;
    if (v82) {
      goto LABEL_175;
    }
    if (v105 < v93) {
      goto LABEL_140;
    }
LABEL_131:
    unint64_t v110 = v71 - 1;
    if (v71 - 1 >= v68)
    {
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
      goto LABEL_178;
    }

    if (!v9) {
      goto LABEL_190;
    }
    __int128 v111 = &v69[16 * v110];
    uint64_t v112 = *(void *)v111;
    uint64_t v113 = &v69[16 * v71];
    uint64_t v114 = *((void *)v113 + 1);
    sub_10017CC90((void **)(v9 + 8LL * *(void *)v111), (id *)(v9 + 8LL * *(void *)v113), v9 + 8 * v114, v133);
    if (v1) {
      break;
    }
    if (v114 < v112) {
      goto LABEL_164;
    }
    if (v71 > *((void *)v10 + 2)) {
      goto LABEL_165;
    }
    *(void *)__int128 v111 = v112;
    *(void *)&v69[16 * v110 + 8] = v114;
    unint64_t v115 = *((void *)v10 + 2);
    if (v71 >= v115) {
      goto LABEL_166;
    }
    unint64_t v68 = v115 - 1;
    memmove(&v69[16 * v71], v113 + 16, 16 * (v115 - 1 - v71));
    *((void *)v10 + sub_100019F7C(v0 + 2) = v115 - 1;
    Swift::Int v3 = v134;
    uint64_t v9 = v135;
    if (v115 <= 2) {
      goto LABEL_140;
    }
  }

  Swift::Int v3 = v134;
LABEL_146:
  uint64_t v117 = swift_bridgeObjectRelease();
  if (v3 < -1)
  {
    __break(1u);
    goto LABEL_148;
  }

LABEL_161:
  *(void *)((v136 & 0xFFFFFFFFFFFFF8LL) + 0x1sub_10019B2E8(v0, 0) = 0LL;
  specialized Array._endMutation()(v117);
  swift_bridgeObjectRelease();
}

uint64_t sub_10017CB40(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v23 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v25 = *a4;
    uint64_t v5 = *a4 + 8 * a3 - 8;
    while (2)
    {
      uint64_t v6 = *(void **)(v25 + 8 * v4);
      uint64_t v7 = v23;
      uint64_t v24 = v5;
      while (1)
      {
        Swift::Int v8 = *(void **)v5;
        id v9 = v6;
        id v10 = v8;
        sub_1000B8508(0xFu);
        uint64_t v13 = v12 ? v11 : 0LL;
        unint64_t v14 = v12 ? v12 : 0xE000000000000000LL;
        sub_1000B8508(0xFu);
        uint64_t v17 = v16 ? v15 : 0LL;
        unint64_t v18 = v16 ? v16 : 0xE000000000000000LL;
        if (v13 == v17 && v14 == v18) {
          break;
        }
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, v17, v18, 1LL);

        swift_bridgeObjectRelease();
        __n128 result = swift_bridgeObjectRelease();
        if ((v20 & 1) != 0)
        {
          if (!v25)
          {
            __break(1u);
            return result;
          }

          unint64_t v21 = *(void **)v5;
          uint64_t v6 = *(void **)(v5 + 8);
          *(void *)uint64_t v5 = v6;
          *(void *)(v5 + 8) = v21;
          v5 -= 8LL;
          if (v4 != ++v7) {
            continue;
          }
        }

        goto LABEL_25;
      }

      __n128 result = swift_bridgeObjectRelease_n(v14, 2LL);
LABEL_25:
      ++v4;
      uint64_t v5 = v24 + 8;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }

  return result;
}

uint64_t sub_10017CC90(void **a1, id *a2, unint64_t a3, void **a4)
{
  uint64_t v4 = a4;
  uint64_t v7 = a1;
  uint64_t v8 = (char *)a2 - (char *)a1;
  uint64_t v9 = a2 - a1;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 8;
  if (v9 >= v11)
  {
    sub_1000314BC(a2, (uint64_t)(a3 - (void)a2) / 8, a4);
    unint64_t v12 = &v4[v11];
    if (v7 >= a2 || v10 < 8)
    {
      unint64_t v31 = a2;
      goto LABEL_74;
    }

    unint64_t v33 = (void **)(a3 - 8);
    unint64_t v31 = a2;
    uint64_t v55 = v7;
    unint64_t v56 = v4;
    while (1)
    {
      unint64_t v60 = (unint64_t)v12;
      uint64_t v34 = v12 - 1;
      unint64_t v58 = v31;
      uint64_t v36 = *(v31 - 1);
      unint64_t v35 = v31 - 1;
      id v37 = *(v12 - 1);
      id v38 = v36;
      sub_1000B8508(0xFu);
      if (v40) {
        uint64_t v41 = v39;
      }
      else {
        uint64_t v41 = 0LL;
      }
      unint64_t v42 = 0xE000000000000000LL;
      if (v40) {
        unint64_t v43 = v40;
      }
      else {
        unint64_t v43 = 0xE000000000000000LL;
      }
      sub_1000B8508(0xFu);
      if (v45) {
        uint64_t v46 = v44;
      }
      else {
        uint64_t v46 = 0LL;
      }
      if (v45) {
        unint64_t v42 = v45;
      }
      if (v41 == v46 && v43 == v42) {
        char v48 = 0;
      }
      else {
        char v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v43, v46, v42, 1LL);
      }
      Swift::Int v49 = v33 + 1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      if ((v48 & 1) != 0)
      {
        uint64_t v4 = v56;
        BOOL v50 = v49 != v58 || v33 >= v58;
        unint64_t v58 = v35;
        Swift::Int v51 = v55;
        unint64_t v12 = (void **)v60;
        if (!v50) {
          goto LABEL_70;
        }
      }

      else
      {
        BOOL v52 = v49 != (void **)v60 || (unint64_t)v33 >= v60;
        unint64_t v35 = v34;
        unint64_t v12 = v34;
        Swift::Int v51 = v55;
        uint64_t v4 = v56;
        if (!v52) {
          goto LABEL_70;
        }
      }

      *unint64_t v33 = *v35;
LABEL_70:
      --v33;
      unint64_t v31 = v58;
      if (v58 <= v51 || v12 <= v4) {
        goto LABEL_74;
      }
    }
  }

  sub_1000314BC(a1, a2 - a1, a4);
  unint64_t v12 = &v4[v9];
  if ((unint64_t)a2 < a3 && v8 >= 8)
  {
    unint64_t v14 = a2;
    unint64_t v57 = a3;
    uint64_t v59 = &v4[v9];
    while (1)
    {
      uint64_t v15 = *v4;
      id v16 = *v14;
      id v17 = v15;
      sub_1000B8508(0xFu);
      uint64_t v20 = v19 ? v18 : 0LL;
      unint64_t v21 = v19 ? v19 : 0xE000000000000000LL;
      sub_1000B8508(0xFu);
      uint64_t v24 = v23 ? v22 : 0LL;
      unint64_t v25 = v23 ? v23 : 0xE000000000000000LL;
      if (v20 == v24 && v21 == v25) {
        break;
      }
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, v24, v25, 1LL);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v27 & 1) == 0) {
        goto LABEL_26;
      }
      id v28 = v14;
      BOOL v29 = v7 == v14++;
LABEL_27:
      unint64_t v12 = v59;
      if (!v29) {
        *uint64_t v7 = *v28;
      }
      ++v7;
    }

    swift_bridgeObjectRelease_n(v21, 2LL);
LABEL_26:
    id v28 = v4;
    BOOL v29 = v7 == v4++;
    goto LABEL_27;
  }

uint64_t sub_10017CF74(void *a1)
{
  return swift_bridgeObjectRelease(a1[27]);
}

uint64_t sub_10017CFF4(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + sub_100019F7C(v0 + 2) = *(_BYTE *)(a2 + 2);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10019B2E8(v0, 0) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  uint64_t v19 = *(void *)(a2 + 64);
  *(void *)(a1 + 64) = v19;
  *(void *)(a1 + 7sub_100019F7C(v0 + 2) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  uint64_t v18 = *(void *)(a2 + 80);
  *(void *)(a1 + 8sub_10019B2E8(v0, 0) = v18;
  *(void *)(a1 + 88) = v7;
  uint64_t v8 = *(void *)(a2 + 104);
  uint64_t v17 = *(void *)(a2 + 96);
  *(void *)(a1 + 96) = v17;
  *(void *)(a1 + 104) = v8;
  *(_BYTE *)(a1 + 11sub_100019F7C(v0 + 2) = *(_BYTE *)(a2 + 112);
  uint64_t v9 = *(void *)(a2 + 128);
  *(void *)(a1 + 12sub_10019B2E8(v0, 0) = *(void *)(a2 + 120);
  *(void *)(a1 + sub_100081CEC(v0 + 128) = v9;
  uint64_t v10 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v10;
  uint64_t v11 = *(void *)(a2 + 160);
  *(void *)(a1 + 15sub_100019F7C(v0 + 2) = *(void *)(a2 + 152);
  *(void *)(a1 + 16sub_10019B2E8(v0, 0) = v11;
  uint64_t v12 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v12;
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  uint64_t v13 = *(void *)(a2 + 192);
  *(void *)(a1 + 19sub_100019F7C(v0 + 2) = v13;
  *(_BYTE *)(a1 + 20sub_10019B2E8(v0, 0) = *(_BYTE *)(a2 + 200);
  uint64_t v14 = *(void *)(a2 + 208);
  uint64_t v15 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = v14;
  *(void *)(a1 + 216) = v15;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  return a1;
}

uint64_t sub_10017D13C(uint64_t a1, __int16 *a2)
{
  __int16 v4 = *a2;
  *(_BYTE *)(a1 + sub_100019F7C(v0 + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)a1 = v4;
  *(void *)(a1 + 8) = *((void *)a2 + 1);
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *((void *)a2 + 4);
  uint64_t v7 = *((void *)a2 + 5);
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)(a1 + 4sub_10019B2E8(v0, 0) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  uint64_t v9 = *((void *)a2 + 7);
  uint64_t v10 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v12 = *((void *)a2 + 8);
  *(void *)(a1 + 64) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 7sub_100019F7C(v0 + 2) = *((void *)a2 + 9);
  uint64_t v13 = *((void *)a2 + 10);
  uint64_t v14 = *(void *)(a1 + 80);
  *(void *)(a1 + 8sub_10019B2E8(v0, 0) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  uint64_t v15 = *((void *)a2 + 12);
  uint64_t v16 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = *((void *)a2 + 13);
  *(_BYTE *)(a1 + 11sub_100019F7C(v0 + 2) = *((_BYTE *)a2 + 112);
  *(void *)(a1 + 104) = v17;
  *(void *)(a1 + 12sub_10019B2E8(v0, 0) = *((void *)a2 + 15);
  uint64_t v18 = *((void *)a2 + 16);
  uint64_t v19 = *(void *)(a1 + 128);
  *(void *)(a1 + sub_100081CEC(v0 + 128) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(void *)(a1 + 136) = *((void *)a2 + 17);
  uint64_t v20 = *((void *)a2 + 18);
  uint64_t v21 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(void *)(a1 + 15sub_100019F7C(v0 + 2) = *((void *)a2 + 19);
  uint64_t v22 = *((void *)a2 + 20);
  uint64_t v23 = *(void *)(a1 + 160);
  *(void *)(a1 + 16sub_10019B2E8(v0, 0) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  *(void *)(a1 + 168) = *((void *)a2 + 21);
  uint64_t v24 = *((void *)a2 + 22);
  uint64_t v25 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  *(_BYTE *)(a1 + 184) = *((_BYTE *)a2 + 184);
  uint64_t v26 = *(void *)(a1 + 192);
  uint64_t v27 = *((void *)a2 + 24);
  *(void *)(a1 + 19sub_100019F7C(v0 + 2) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v26);
  *(_BYTE *)(a1 + 20sub_10019B2E8(v0, 0) = *((_BYTE *)a2 + 200);
  uint64_t v28 = *(void *)(a1 + 208);
  uint64_t v29 = *((void *)a2 + 26);
  *(void *)(a1 + 208) = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v28);
  uint64_t v30 = *(void *)(a1 + 216);
  uint64_t v31 = *((void *)a2 + 27);
  *(void *)(a1 + 216) = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v30);
  return a1;
}

void *sub_10017D320(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xE0uLL);
}

uint64_t sub_10017D328(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + sub_100019F7C(v0 + 2) = *(_BYTE *)(a2 + 2);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10019B2E8(v0, 0) = v6;
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease(*(void *)(a1 + 56));
  uint64_t v8 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void *)(a2 + 80);
  uint64_t v10 = *(void *)(a1 + 80);
  *(void *)(a1 + 7sub_100019F7C(v0 + 2) = *(void *)(a2 + 72);
  *(void *)(a1 + 8sub_10019B2E8(v0, 0) = v9;
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a2 + 96);
  uint64_t v12 = *(void *)(a1 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v11;
  swift_bridgeObjectRelease(v12);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_BYTE *)(a1 + 11sub_100019F7C(v0 + 2) = *(_BYTE *)(a2 + 112);
  uint64_t v13 = *(void *)(a2 + 128);
  uint64_t v14 = *(void *)(a1 + 128);
  *(void *)(a1 + 12sub_10019B2E8(v0, 0) = *(void *)(a2 + 120);
  *(void *)(a1 + sub_100081CEC(v0 + 128) = v13;
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = *(void *)(a2 + 144);
  uint64_t v16 = *(void *)(a1 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v15;
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = *(void *)(a2 + 160);
  uint64_t v18 = *(void *)(a1 + 160);
  *(void *)(a1 + 15sub_100019F7C(v0 + 2) = *(void *)(a2 + 152);
  *(void *)(a1 + 16sub_10019B2E8(v0, 0) = v17;
  swift_bridgeObjectRelease(v18);
  uint64_t v19 = *(void *)(a2 + 176);
  uint64_t v20 = *(void *)(a1 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v19;
  swift_bridgeObjectRelease(v20);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  uint64_t v21 = *(void *)(a1 + 192);
  *(void *)(a1 + 19sub_100019F7C(v0 + 2) = *(void *)(a2 + 192);
  swift_bridgeObjectRelease(v21);
  *(_BYTE *)(a1 + 20sub_10019B2E8(v0, 0) = *(_BYTE *)(a2 + 200);
  swift_bridgeObjectRelease(*(void *)(a1 + 208));
  uint64_t v22 = *(void *)(a1 + 216);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  swift_bridgeObjectRelease(v22);
  return a1;
}

uint64_t sub_10017D44C(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 224))
    {
      LODWORD(v7(v1, v0, 2LL, v3, v6, v5, v4, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v7(v1, v0, 2LL, v3, v6, v5, v4, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v7(v1, v0, 2LL, v3, v6, v5, v4, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_10017D48C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 216) = 0LL;
    *(_OWORD *)(result + 20sub_10019B2E8(v0, 0) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 15sub_100019F7C(v0 + 2) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12sub_10019B2E8(v0, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7sub_100019F7C(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4sub_10019B2E8(v0, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 224) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 224) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for PaymentSheetInfo()
{
}

void sub_10017D514(Swift::String a1)
{
  v1._rawValue = &off_100273EB0;
  sub_10017DF98(a1, v1);
}

uint64_t sub_10017D520()
{
  return 1954047348LL;
}

void sub_10017D530(Swift::String a1)
{
  v1._rawValue = &off_100273EE8;
  sub_10017DF98(a1, v1);
}

uint64_t sub_10017D53C()
{
  return 0x65646F6358LL;
}

void sub_10017D55C(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v3._rawValue = &off_100273EB0;
  sub_10017DF98(*a1, v3);
  *a2 = v4 != 0;
}

void sub_10017D598(void *a1@<X8>)
{
}

uint64_t sub_10017D5A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100181FE4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10017D604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100181FE4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_10017D65C(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v3._rawValue = &off_100273EE8;
  sub_10017DF98(*a1, v3);
  *a2 = v4 != 0;
}

void sub_10017D698(void *a1@<X8>)
{
}

uint64_t sub_10017D6AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100182020();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10017D708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100182020();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10017D754(uint64_t a1, unint64_t a2)
{
  if (a1 == 1701869940 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x65756C6176LL && a2 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease(0xE500000000000000LL);
    return 1LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65756C6176LL, 0xE500000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_10017D828(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x65756C6176LL;
  }
  else {
    return 1701869940LL;
  }
}

void sub_10017D854()
{
  __int16 v3 = v2;
  sub_1000175B0(&qword_1002B7BD8);
  sub_100022760();
  __chkstk_darwin(v4);
  sub_100022724();
  unint64_t v5 = sub_100181120();
  sub_1000226FC((uint64_t)&type metadata for Title.CodingKeys, v6, v5);
  char v14 = v3 & 1;
  char v13 = 0;
  unint64_t v7 = sub_10018115C();
  sub_10018283C((uint64_t)&v14, (uint64_t)&v13, v8, (uint64_t)&unk_10028D7D8, v7);
  if (!v0)
  {
    char v12 = HIBYTE(v3) & 1;
    char v11 = 1;
    unint64_t v9 = sub_100181198();
    sub_10018283C((uint64_t)&v12, (uint64_t)&v11, v10, (uint64_t)&unk_10028D748, v9);
  }

  sub_1000522F8(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1000226D8();
}

uint64_t sub_10017D944()
{
  uint64_t v18 = v3;
  uint64_t v19 = v4;
  sub_1000175B0(&qword_1002B7C88);
  sub_100022760();
  __chkstk_darwin(v5);
  sub_100182608();
  unint64_t v6 = sub_100181120();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for Title.CodingKeys,  &type metadata for Title.CodingKeys,  v6,  v1,  v2);
  if (v0) {
    return sub_10001DC08();
  }
  v17[0] = 0;
  unint64_t v7 = sub_100181548();
  sub_100182778((uint64_t)&unk_10028D7D8, (uint64_t)v17, v8, v9, v7);
  int v10 = v17[1];
  v16[0] = 1;
  unint64_t v11 = sub_100181584();
  sub_100182778((uint64_t)&unk_10028D748, (uint64_t)v16, v12, v13, v11);
  sub_1000258E8();
  unsigned __int8 v14 = v16[1];
  sub_10001DC08();
  return v10 | (v14 << 8);
}

uint64_t sub_10017DA70()
{
  return sub_10017D828(*v0);
}

uint64_t sub_10017DA78@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10017D754(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10017DA9C(uint64_t a1)
{
  unint64_t v2 = sub_100181120();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017DAC4(uint64_t a1)
{
  unint64_t v2 = sub_100181120();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10017DAEC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_10017D944();
  if (!v1)
  {
    *a1 = result & 1;
    a1[1] = BYTE1(result) & 1;
  }

  return result;
}

void sub_10017DB20()
{
}

uint64_t sub_10017DB50(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x726564616568LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v5 = 0xE600000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726564616568LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x65756C6176LL && a2 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease(0xE500000000000000LL);
    return 1LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65756C6176LL, 0xE500000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_10017DC2C(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x65756C6176LL;
  }
  else {
    return 0x726564616568LL;
  }
}

void sub_10017DC5C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  a22 = v26;
  a23 = v27;
  uint64_t v42 = v28;
  uint64_t v43 = v29;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  unint64_t v35 = v34;
  sub_1000175B0(&qword_1002B7C00);
  sub_100035710();
  __chkstk_darwin(v36);
  id v38 = (char *)&v42 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = v35[3];
  uint64_t v39 = v35[4];
  sub_100019F58(v35, v40);
  unint64_t v41 = sub_100181210();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for HeadValueEntry.CodingKeys,  &type metadata for HeadValueEntry.CodingKeys,  v41,  v40,  v39);
  a13 = 0;
  sub_100182820(v33, v31, (uint64_t)&a13);
  if (!v24)
  {
    a12 = 1;
    sub_100182820(v42, v43, (uint64_t)&a12);
  }

  (*(void (**)(char *, uint64_t))(v25 + 8))(v38, v23);
  sub_10001DAB8();
}

uint64_t sub_10017DD44()
{
  uint64_t v11 = v2;
  uint64_t v12 = v3;
  uint64_t v4 = sub_1000175B0(&qword_1002B7C80);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100182608();
  unint64_t v6 = sub_100181210();
  sub_1001825C0((uint64_t)&type metadata for HeadValueEntry.CodingKeys, v7, v6);
  if (v0)
  {
    sub_1001825D8();
  }

  else
  {
    char v10 = 0;
    uint64_t v1 = sub_1001827F8((uint64_t)&v10);
    char v9 = 1;
    sub_1001827F8((uint64_t)&v9);
    sub_100182588(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    sub_10001DC08();
  }

  return v1;
}

void sub_10017DE58(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100273F20, v2);
  sub_100019344();
  sub_10001945C();
}

uint64_t sub_10017DE94(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10017DECC + 4 * byte_100207570[a1]))( 0x69614D6563697270LL,  0xE90000000000006ELL);
}

unint64_t sub_10017DECC()
{
  return 0xD000000000000014LL;
}

uint64_t sub_10017DEE8()
{
  return 0x6275536563697270LL;
}

uint64_t sub_10017DF00()
{
  return 0x746C7561666564LL;
}

void sub_10017DF18(Swift::String a1)
{
  v1._rawValue = &off_100273FA0;
  sub_10017FC84(a1, v1);
}

uint64_t sub_10017DF24(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x656772616CLL;
  }
  else {
    return 0x6C616D726F6ELL;
  }
}

void sub_10017DF54(Swift::String a1)
{
  v1._rawValue = &off_100273FF0;
  sub_10017FC84(a1, v1);
}

uint64_t sub_10017DF60(char a1)
{
  if ((a1 & 1) != 0) {
    return 2036429415LL;
  }
  else {
    return 0x6B63616C62LL;
  }
}

void sub_10017DF8C(Swift::String a1)
{
  v1._rawValue = &off_100274040;
  sub_10017DF98(a1, v1);
}

void sub_10017DF98(Swift::String a1, Swift::OpaquePointer a2)
{
}

uint64_t sub_10017DFBC()
{
  return 0x6D756964656DLL;
}

uint64_t sub_10017DFD0()
{
  return sub_10017DC2C(*v0);
}

uint64_t sub_10017DFD8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10017DB50(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10017DFFC(uint64_t a1)
{
  unint64_t v2 = sub_100181210();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017E024(uint64_t a1)
{
  unint64_t v2 = sub_100181210();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10017E04C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10017DD44();
  if (!v1)
  {
    *a1 = result;
    a1[1] = v4;
    a1[2] = v5;
    a1[3] = v6;
  }

  return result;
}

#error "10017E088: call analysis failed (funcsize=7)"
void sub_10017E094(char *a1)
{
  sub_1000D5D00(*a1);
}

void sub_10017E0A0()
{
}

void sub_10017E0A8(uint64_t a1)
{
}

void sub_10017E0B0(uint64_t a1)
{
}

void sub_10017E0B8(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = v3;
}

void sub_10017E0E4()
{
  unsigned __int8 v1 = sub_100052340();
  uint64_t *v0 = sub_10017DE94(v1);
  v0[1] = v2;
  sub_10001945C();
}

uint64_t sub_10017E104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001820D4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10017E160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001820D4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_10017E1AC(char *a1, unsigned __int8 *a2)
{
}

void sub_10017E1B8()
{
}

uint64_t sub_10017E1C0(uint64_t a1)
{
  return sub_1000B2704(a1, *v1);
}

void sub_10017E1C8(uint64_t a1)
{
}

void sub_10017E1D0(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_100273FA0;
  sub_10017FC84(*a1, v3);
  *a2 = v4;
}

void sub_10017E204()
{
  char v1 = sub_100052340();
  uint64_t *v0 = sub_10017DF24(v1);
  v0[1] = v2;
  sub_10001945C();
}

uint64_t sub_10017E224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100182110();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10017E280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100182110();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_10017E2CC(char *a1, unsigned __int8 *a2)
{
}

void sub_10017E2D8()
{
}

uint64_t sub_10017E2E0(uint64_t a1)
{
  return sub_1000B26C0(a1, *v1);
}

void sub_10017E2E8(uint64_t a1)
{
}

void sub_10017E2F0(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_100273FF0;
  sub_10017FC84(*a1, v3);
  *a2 = v4;
}

void sub_10017E324()
{
  char v1 = sub_100052340();
  uint64_t *v0 = sub_10017DF60(v1);
  v0[1] = v2;
  sub_10001945C();
}

uint64_t sub_10017E344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10018214C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10017E3A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10018214C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_10017E3F8(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v3._rawValue = &off_100274040;
  sub_10017DF98(*a1, v3);
  *a2 = v4 != 0;
}

void sub_10017E434(void *a1@<X8>)
{
}

uint64_t sub_10017E448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100182188();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10017E4A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100182188();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_10017E4F0()
{
  uint64_t v3 = v2;
  uint64_t v4 = sub_1000175B0(&qword_1002B7C50);
  sub_100022760();
  __chkstk_darwin(v5);
  sub_100022724();
  unint64_t v6 = sub_10018141C();
  sub_1000226FC((uint64_t)&unk_10028D1A8, v7, v6);
  _OWORD v20[2] = v3;
  v20[1] = 0;
  unint64_t v8 = sub_100181458();
  sub_100052298((uint64_t)&v20[2], (uint64_t)&v20[1], v4, (uint64_t)&unk_10028D628, v8);
  if (!v0)
  {
    if ((v3 & 0x100) != 0)
    {
      char v9 = _stringCompareWithSmolCheck(_:_:expecting:)( 0x656772616CLL,  0xE500000000000000LL,  0x6C616D726F6ELL,  0xE600000000000000LL,  0LL);
      swift_bridgeObjectRelease();
      if ((v9 & 1) == 0)
      {
        sub_100182830();
        char v19 = v10;
        unint64_t v11 = sub_100181494();
        sub_100052298((uint64_t)v20, (uint64_t)&v19, v4, (uint64_t)&unk_10028D598, v11);
      }
    }

    else
    {
      swift_bridgeObjectRelease();
    }

    if ((v3 & 0x10000) != 0)
    {
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)( 2036429415LL,  0xE400000000000000LL,  0x6B63616C62LL,  0xE500000000000000LL,  0LL);
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        char v18 = 1;
        char v17 = 3;
        unint64_t v13 = sub_1001814D0();
        sub_100052298((uint64_t)&v18, (uint64_t)&v17, v4, (uint64_t)&unk_10028D508, v13);
      }
    }

    else
    {
      swift_bridgeObjectRelease();
    }

    if ((v3 & 0x1000000) != 0)
    {
      char v15 = 2;
      KeyedEncodingContainer.encode(_:forKey:)(1702195828LL, 0xE400000000000000LL, &v15, v4);
    }

    if ((v3 & 0x100000000LL) == 0)
    {
      char v16 = 4;
      unint64_t v14 = sub_10018150C();
      sub_100052298(v14, (uint64_t)&v16, v4, (uint64_t)&unk_10028D478, v14);
    }
  }

  sub_1000522F8(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1000226D8();
}

uint64_t sub_10017E704(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667182 && a2 == 0xE400000000000000LL;
  if (v2 || (sub_1000AD508(1701667182LL, 0xE400000000000000LL) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else
  {
    BOOL v6 = a1 == 1702521203 && a2 == 0xE400000000000000LL;
    if (v6 || (sub_1000AD508(1702521203LL, 0xE400000000000000LL) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1LL;
    }

    else
    {
      BOOL v7 = a1 == 1684828002 && a2 == 0xE400000000000000LL;
      if (v7 || (sub_1000AD508(1684828002LL, 0xE400000000000000LL) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2LL;
      }

      else
      {
        BOOL v8 = a1 == 0x726F6C6F63LL && a2 == 0xE500000000000000LL;
        if (v8 || (sub_1000AD508(0x726F6C6F63LL, 0xE500000000000000LL) & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3LL;
        }

        else if (a1 == 0x42676E6963617073LL && a2 == 0xED000065726F6665LL)
        {
          swift_bridgeObjectRelease();
          return 4LL;
        }

        else
        {
          char v10 = sub_1000AD508(0x42676E6963617073LL, 0xED000065726F6665LL);
          swift_bridgeObjectRelease();
          if ((v10 & 1) != 0) {
            return 4LL;
          }
          else {
            return 5LL;
          }
        }
      }
    }
  }

uint64_t sub_10017E8C4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10017E8F0 + 4 * byte_100207574[a1]))( 1701667182LL,  0xE400000000000000LL);
}

uint64_t sub_10017E8F0()
{
  return 1702521203LL;
}

uint64_t sub_10017E8FC()
{
  return 1684828002LL;
}

uint64_t sub_10017E908()
{
  return 0x726F6C6F63LL;
}

uint64_t sub_10017E91C()
{
  return 0x42676E6963617073LL;
}

void sub_10017E940()
{
}

uint64_t sub_10017E948()
{
  return sub_10017E8C4(*v0);
}

uint64_t sub_10017E950@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10017E704(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10017E974(uint64_t a1)
{
  unint64_t v2 = sub_10018141C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017E99C(uint64_t a1)
{
  unint64_t v2 = sub_10018141C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10017E9C4()
{
}

uint64_t sub_10017EA30(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x65756C6176LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v5 = 0xE500000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65756C6176LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 1702521203 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    return 1LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1702521203LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_10017EB04(char a1)
{
  if ((a1 & 1) != 0) {
    return 1702521203LL;
  }
  else {
    return 0x65756C6176LL;
  }
}

void sub_10017EB30()
{
  unint64_t v8 = sub_100182240();
  sub_1001827BC((uint64_t)&type metadata for FlexListBox.Value.AttributedString.CodingKeys, v9, v8);
  sub_100182638();
  if (!v1)
  {
    sub_100182830();
    unint64_t v10 = sub_100181494();
    sub_100182760(v10, v11, v12, (uint64_t)&unk_10028D598, v10);
  }

  sub_1000522F8(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_10001DAB8();
}

void sub_10017EBEC()
{
  unint64_t v3 = sub_100182240();
  sub_1001825C0((uint64_t)&type metadata for FlexListBox.Value.AttributedString.CodingKeys, v4, v3);
  if (v0)
  {
    sub_10001DC08();
  }

  else
  {
    sub_100182710();
    sub_100182830();
    sub_1001822B8();
    sub_100182880();
    sub_100182658((uint64_t)&unk_10028D598);
    sub_100182588(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    sub_1001825D8();
  }

  sub_1001827D0();
  sub_1000226D8();
}

uint64_t sub_10017ECD8(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x65756C6176LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v5 = 0xE500000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65756C6176LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x656C797473LL && a2 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease(0xE500000000000000LL);
    return 1LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656C797473LL, 0xE500000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_10017EDBC(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x656C797473LL;
  }
  else {
    return 0x65756C6176LL;
  }
}

void sub_10017EDE4()
{
  unint64_t v8 = sub_100182204();
  sub_1001827BC((uint64_t)&type metadata for FlexListBox.Value.StyledString.CodingKeys, v9, v8);
  sub_100182638();
  if (!v1)
  {
    sub_100182830();
    unint64_t v10 = sub_100181458();
    sub_100182760(v10, v11, v12, (uint64_t)&unk_10028D628, v10);
  }

  sub_1000522F8(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_10001DAB8();
}

void sub_10017EE9C()
{
  unint64_t v3 = sub_100182204();
  sub_1001825C0((uint64_t)&type metadata for FlexListBox.Value.StyledString.CodingKeys, v4, v3);
  if (v0)
  {
    sub_10001DC08();
  }

  else
  {
    sub_100182710();
    sub_100182830();
    sub_10018227C();
    sub_100182880();
    sub_100182658((uint64_t)&unk_10028D628);
    sub_100182588(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    sub_1001825D8();
  }

  sub_1001827D0();
  sub_1000226D8();
}

uint64_t sub_10017EF88()
{
  return sub_10017EB04(*v0);
}

uint64_t sub_10017EF90@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10017EA30(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10017EFB4(uint64_t a1)
{
  unint64_t v2 = sub_100182240();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017EFDC(uint64_t a1)
{
  unint64_t v2 = sub_100182240();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10017F004(uint64_t a1@<X8>)
{
  if (!v1)
  {
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 16) = v5 & 1;
  }

void sub_10017F034()
{
}

void sub_10017F050()
{
}

uint64_t sub_10017F068()
{
  return sub_10017EDBC(*v0);
}

uint64_t sub_10017F070@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10017ECD8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10017F094(uint64_t a1)
{
  unint64_t v2 = sub_100182204();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017F0BC(uint64_t a1)
{
  unint64_t v2 = sub_100182204();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10017F0E4(uint64_t a1@<X8>)
{
  if (!v1)
  {
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 16) = v5;
  }

void sub_10017F110()
{
}

uint64_t sub_10017F12C(void *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100019F58(a1, v7);
  uint64_t v9 = dispatch thunk of Encoder.singleValueContainer()(v23, v7, v8);
  if (a4 >> 6)
  {
    sub_1001826E0((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, v22[0], v22[1], v22[2], v23[0], v23[1], v23[2], v24);
    if (a4 >> 6 == 1)
    {
      unint64_t v17 = sub_100182098();
      char v18 = &unk_10028D8D0;
    }

    else
    {
      unint64_t v17 = sub_10018205C();
      char v18 = &unk_10028D850;
    }

    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)(v22, v18, v17, a3, a2);
  }

  else
  {
    uint64_t v19 = v24;
    uint64_t v20 = v25;
    sub_100043F18((uint64_t)v23, v24);
    dispatch thunk of SingleValueEncodingContainer.encode(_:)(a2, a3, v19, v20);
  }

  return sub_100019F7C(v23);
}

uint64_t sub_10017F234(void *a1)
{
  return sub_10017F12C(a1, *(void *)v1, *(void *)(v1 + 8), *(_BYTE *)(v1 + 16));
}

void sub_10017F250()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  sub_1000AF7D4(v1, (uint64_t)&v19);
  uint64_t v4 = sub_1000175B0(&qword_1002B7C18);
  uint64_t v17 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v16 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v13 - v8;
  uint64_t v10 = v3[3];
  uint64_t v11 = v3[4];
  sub_100019F58(v3, v10);
  unint64_t v14 = sub_100181288();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_10028D2C8, &unk_10028D2C8, v14, v10, v11);
  v13[3] = v1;
  sub_1000AF7D4(v1, (uint64_t)v20);
  uint64_t v12 = (char *)sub_10017F388 + 4 * word_10020757A[(v20[32] >> 4) & 3];
  uint64_t v18 = v4;
  uint64_t v15 = v9;
  __asm { BR              X11 }

void sub_10017F388(char a1@<W8>)
{
  uint64_t v4 = v1;
  char v5 = a1 & 0xCF;
  *(_BYTE *)(v3 - 96) = a1 & 0xCF;
  uint64_t v6 = *(void *)(v3 - 112);
  uint64_t v7 = *(void *)(v3 - 104);
  *(_OWORD *)(v3 - 208) = *(_OWORD *)(v3 - 128);
  *(_BYTE *)(v3 - 23sub_100019F7C(v0 + 2) = 0;
  uint64_t v8 = sub_10007F094();
  uint64_t v9 = sub_1001828C0(&qword_1002B7C38);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 208, v3 - 232, v2, v8, v9);
  if (!v4)
  {
    *(void *)(v3 - 208) = v6;
    *(void *)(v3 - 20sub_10019B2E8(v0, 0) = v7;
    *(_BYTE *)(v3 - 19sub_100019F7C(v0 + 2) = v5;
    sub_10018288C();
    unint64_t v10 = sub_100181334();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 208, v3 - 232, v2, &unk_10028D6B8, v10);
  }

  sub_100182570();
  sub_10001DAB8();
}

void sub_10017FAF4(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100274078, v2);
  sub_100019344();
  sub_10001945C();
}

uint64_t sub_10017FB34(char a1)
{
  if (!a1) {
    return sub_10018278C();
  }
  if (a1 == 1) {
    return 0x65756C6176LL;
  }
  return 0x7475626972747461LL;
}

void sub_10017FB80(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_10017FB8C()
{
}

uint64_t sub_10017FB94(uint64_t a1)
{
  return sub_1000B27DC(a1, *v1);
}

void sub_10017FB9C(uint64_t a1)
{
}

void sub_10017FBA4(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = v3;
}

void sub_10017FBD0()
{
  char v1 = sub_100052340();
  uint64_t *v0 = sub_10017FB34(v1);
  v0[1] = v2;
  sub_10001945C();
}

uint64_t sub_10017FBF0()
{
  return sub_10017FB34(*v0);
}

uint64_t sub_10017FBF8@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10017FB30(a1);
  *a2 = result;
  return result;
}

void sub_10017FC1C(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_10017FC28(uint64_t a1)
{
  unint64_t v2 = sub_100181288();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017FC50(uint64_t a1)
{
  unint64_t v2 = sub_100181288();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10017FC78(Swift::String a1)
{
  v1._rawValue = &off_1002740E0;
  sub_10017FC84(a1, v1);
}

void sub_10017FC84(Swift::String a1, Swift::OpaquePointer a2)
{
}

uint64_t sub_10017FCB4(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x6269726373627553LL;
  }
  else {
    return 7954768LL;
  }
}

void sub_10017FCE8()
{
}

void sub_10017FD34(char *a1, unsigned __int8 *a2)
{
}

void sub_10017FD40()
{
}

uint64_t sub_10017FD48(uint64_t a1)
{
  return sub_1000B2054(a1, *v1);
}

void sub_10017FD50(uint64_t a1)
{
}

void sub_10017FD58(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_1002740E0;
  sub_10017FC84(*a1, v3);
  *a2 = v4;
}

void sub_10017FD8C()
{
  char v1 = sub_100052340();
  uint64_t *v0 = sub_10017FCB4(v1);
  v0[1] = v2;
  sub_10001945C();
}

uint64_t sub_10017FDAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001811D4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10017FE08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001811D4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

BOOL sub_10017FE54(uint64_t a1)
{
  return a1 != 2;
}

BOOL sub_10017FE6C@<W0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = sub_10017FE54(*a1);
  *a2 = result;
  return result;
}

void sub_10017FE9C(void *a1@<X8>)
{
  *a1 = 2LL;
}

uint64_t sub_10017FEA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10018124C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10017FF04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10018124C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10017FF50(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_100274130, a1, a2, &unk_1002A8EB8);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x12) {
    return 18LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10017FFA4()
{
  return 18LL;
}

uint64_t sub_10017FFAC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10017FFDC + 4 * byte_100207582[a1]))( 0x656C746974LL,  0xE500000000000000LL);
}

uint64_t sub_10017FFDC()
{
  return 0x6F74736575716572LL;
}

unint64_t sub_10017FFF8()
{
  return 0xD000000000000011LL;
}

uint64_t sub_100180014()
{
  return 0x49656C62616C6173LL;
}

uint64_t sub_100180054()
{
  return 0x437972746E756F63LL;
}

uint64_t sub_100180074()
{
  return 0x79636E6572727563LL;
}

uint64_t sub_10018008C()
{
  return 0x6563697270LL;
}

uint64_t sub_10018009C()
{
  return 0x5079616C70736964LL;
}

uint64_t sub_1001800BC()
{
  return 0x48746E756F636361LL;
}

uint64_t sub_1001800E0()
{
  return 0x746E6F4365736163LL;
}

uint64_t sub_100180100()
{
  return 0x53746E656D796170LL;
}

unint64_t sub_100180124()
{
  return 0xD000000000000013LL;
}

uint64_t sub_100180144()
{
  return 0x6365536563697270LL;
}

uint64_t sub_100180164()
{
  return 0x65566E6769736564LL;
}

uint64_t sub_100180188()
{
  return 0x7473694C78656C66LL;
}

uint64_t sub_1001801A0()
{
  return 0x73656C797473LL;
}

void sub_1001801B8()
{
  uint64_t v3 = sub_1000175B0(&qword_1002B7B10);
  sub_100022760();
  __chkstk_darwin(v4);
  unint64_t v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_100022724();
  unint64_t v7 = sub_100180710();
  sub_1000226FC((uint64_t)&type metadata for PaymentSheetInfo.CodingKeys, v8, v7);
  sub_1000A46B4(v0, (uint64_t)v28);
  sub_1000A46B4((uint64_t)v28, (uint64_t)v20);
  char v21 = 0;
  unint64_t v9 = sub_10018074C();
  sub_1001163D4((uint64_t)v20, (uint64_t)&v21, v3, (uint64_t)&unk_10028D110, v9);
  if (!v1)
  {
    sub_100182728(*(void *)(v0 + 8), *(void *)(v0 + 16), 1);
    sub_1000A46B4(v0 + 24, (uint64_t)&v27);
    sub_1000A46B4((uint64_t)&v27, (uint64_t)v20);
    char v21 = 2;
    unint64_t v10 = sub_100180788();
    sub_1001163D4((uint64_t)v20, (uint64_t)&v21, v3, (uint64_t)&unk_10028D098, v10);
    sub_100182558(*(void *)(v0 + 32), *(void *)(v0 + 40), 3);
    sub_100182728(*(void *)(v0 + 48), *(void *)(v0 + 56), 4);
    sub_1000A46B4(v0 + 64, (uint64_t)v26);
    sub_1000A46B4((uint64_t)v26, (uint64_t)v20);
    char v21 = 5;
    sub_10007F094();
    uint64_t v11 = sub_1001828C0((unint64_t *)&qword_1002A93C0);
    sub_1001825A0(v11);
    sub_100182558(*(void *)(v0 + 72), *(void *)(v0 + 80), 6);
    sub_100182558(*(void *)(v0 + 88), *(void *)(v0 + 96), 7);
    uint64_t v12 = *(void *)(v0 + 104);
    uint64_t v13 = *(unsigned __int8 *)(v0 + 112);
    v20[0] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, v20, v3);
    sub_100182558(*(void *)(v0 + 120), *(void *)(v0 + 128), 9);
    sub_100182558(*(void *)(v0 + 136), *(void *)(v0 + 144), 10);
    sub_100182558(*(void *)(v0 + 152), *(void *)(v0 + 160), 11);
    sub_100182558(*(void *)(v0 + 168), *(void *)(v0 + 176), 12);
    uint64_t v14 = *(unsigned __int8 *)(v0 + 184);
    v20[0] = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v20, v3);
    sub_1000A46B4(v0 + 192, (uint64_t)&v25);
    sub_1000A46B4((uint64_t)&v25, (uint64_t)v20);
    char v21 = 14;
    sub_10007F094();
    uint64_t v15 = sub_1001827B4(&qword_1002B7B50);
    sub_1001825A0(v15);
    sub_1000A46B4(v0 + 200, (uint64_t)&v24);
    sub_1000A46B4((uint64_t)&v24, (uint64_t)v20);
    char v21 = 15;
    unint64_t v16 = sub_100180800();
    sub_1001163D4((uint64_t)v20, (uint64_t)&v21, v3, (uint64_t)&unk_10028CF88, v16);
    sub_1000A46B4(v0 + 208, (uint64_t)v23);
    sub_1000A46B4((uint64_t)v23, (uint64_t)v20);
    char v21 = 16;
    sub_10007F094();
    uint64_t v17 = sub_1001827B4(&qword_1002B7B80);
    sub_1001825A0(v17);
    sub_1000A46B4(v0 + 216, (uint64_t)&v22);
    sub_1000A46B4((uint64_t)&v22, (uint64_t)v20);
    char v21 = 17;
    uint64_t v18 = sub_10007F094();
    uint64_t v19 = sub_1001827B4(&qword_1002B7BA0);
    sub_1001163D4((uint64_t)v20, (uint64_t)&v21, v3, v18, v19);
  }

  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v6, v3);
  sub_1000226D8();
}

void sub_1001805B0(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_1001805BC()
{
}

uint64_t sub_1001805C4(uint64_t a1)
{
  return sub_1000B20C0(a1, *v1);
}

void sub_1001805CC(uint64_t a1)
{
}

uint64_t sub_1001805D4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10017FF50(*a1, a1[1]);
  *a2 = result;
  return result;
}

void sub_100180600()
{
  unsigned __int8 v1 = sub_100052340();
  uint64_t *v0 = sub_10017FFAC(v1);
  v0[1] = v2;
  sub_10001945C();
}

uint64_t sub_100180620()
{
  return sub_1001801B4(*v0);
}

uint64_t sub_100180628@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10017FFA0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10018064C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_10017FFA4();
  *a1 = result;
  return result;
}

uint64_t sub_100180670(uint64_t a1)
{
  unint64_t v2 = sub_100180710();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100180698(uint64_t a1)
{
  unint64_t v2 = sub_100180710();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1001806C0()
{
}

unint64_t sub_100180710()
{
  unint64_t result = qword_1002B7B18;
  if (!qword_1002B7B18)
  {
    atomic_store(result, (unint64_t *)&qword_1002B7B18);
  }

  return result;
}

unint64_t sub_10018074C()
{
  unint64_t result = qword_1002B7B28;
  if (!qword_1002B7B28)
  {
    unint64_t result = swift_getWitnessTable(byte_100207A88, &unk_10028D110);
    atomic_store(result, (unint64_t *)&qword_1002B7B28);
  }

  return result;
}

unint64_t sub_100180788()
{
  unint64_t result = qword_1002B7B38;
  if (!qword_1002B7B38)
  {
    unint64_t result = swift_getWitnessTable(byte_100207A60, &unk_10028D098);
    atomic_store(result, (unint64_t *)&qword_1002B7B38);
  }

  return result;
}

unint64_t sub_1001807C4()
{
  unint64_t result = qword_1002B7B58;
  if (!qword_1002B7B58)
  {
    unint64_t result = swift_getWitnessTable(byte_100207A38, &unk_10028D000);
    atomic_store(result, (unint64_t *)&qword_1002B7B58);
  }

  return result;
}

unint64_t sub_100180800()
{
  unint64_t result = qword_1002B7B68;
  if (!qword_1002B7B68)
  {
    unint64_t result = swift_getWitnessTable(byte_100207A10, &unk_10028CF88);
    atomic_store(result, (unint64_t *)&qword_1002B7B68);
  }

  return result;
}

unint64_t sub_10018083C()
{
  unint64_t result = qword_1002B7B88;
  if (!qword_1002B7B88)
  {
    atomic_store(result, (unint64_t *)&qword_1002B7B88);
  }

  return result;
}

unint64_t sub_100180878()
{
  unint64_t result = qword_1002B7BA8;
  if (!qword_1002B7BA8)
  {
    atomic_store(result, (unint64_t *)&qword_1002B7BA8);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for PaymentSheetInfo.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xEF)
  {
    if (a2 + 17 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 17) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 18;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for PaymentSheetInfo.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 17 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 17) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xEF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xEE) {
    return ((uint64_t (*)(void))((char *)&loc_100180988 + 4 * byte_100207599[v4]))();
  }
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_1001809BC + 4 * byte_100207594[v4]))();
}

uint64_t sub_1001809BC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001809C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001809CCLL);
  }
  return result;
}

uint64_t sub_1001809D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001809E0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 17;
  return result;
}

uint64_t sub_1001809E4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001809EC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PaymentSheetInfo.CodingKeys()
{
  return &type metadata for PaymentSheetInfo.CodingKeys;
}

uint64_t sub_100180A08(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

uint64_t sub_100180A1C(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 5))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 1);
      BOOL v4 = v3 >= 2;
      int v2 = v3 - 2;
      if (!v4) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_100180A58(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 5) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 5) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 1) = a2 + 1;
    }
  }

  return result;
}

void type metadata accessor for FlexListBox.Style()
{
}

void sub_100180AA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  __asm { BR              X10 }

uint64_t sub_100180AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  return sub_100180B20(v5, a4, a5);
}

uint64_t sub_100180B04(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100180B20(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 0xBFu) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

void sub_100180B38(uint64_t a1)
{
}

void sub_100180B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  __asm { BR              X10 }

uint64_t sub_100180B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  return sub_100180BC8(v5, a4, a5);
}

uint64_t sub_100180BAC()
{
  return swift_bridgeObjectRelease(v1);
}

uint64_t sub_100180BC8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 0xBFu) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_100180BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  int v7 = *(unsigned __int8 *)(a2 + 32);
  sub_100180AA8(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 3sub_100019F7C(v0 + 2) = v7;
  return a1;
}

uint64_t sub_100180C40(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  int v7 = *(unsigned __int8 *)(a2 + 32);
  sub_100180AA8(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  int v12 = *(unsigned __int8 *)(a1 + 32);
  *(_BYTE *)(a1 + 3sub_100019F7C(v0 + 2) = v7;
  sub_100180B4C(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t sub_100180CB0(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  __int128 v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  int v9 = *(unsigned __int8 *)(a1 + 32);
  *(_BYTE *)(a1 + 3sub_100019F7C(v0 + 2) = v3;
  sub_100180B4C(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t sub_100180CF8(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xD && *(_BYTE *)(a1 + 33))
    {
      unsigned int v2 = *(_DWORD *)a1 + 12;
    }

    else
    {
      unsigned int v2 = (*(_BYTE *)(a1 + 32) & 0xC | (*(unsigned __int8 *)(a1 + 32) >> 4) & 3) ^ 0xF;
      if (v2 >= 0xC) {
        unsigned int v2 = -1;
      }
    }
  }

  else
  {
    unsigned int v2 = -1;
  }

  return v2 + 1;
}

uint64_t sub_100180D40(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 3sub_100019F7C(v0 + 2) = 0;
    *(void *)uint64_t result = a2 - 13;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 33) = 0;
    }
    if (a2)
    {
      *(_OWORD *)uint64_t result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_BYTE *)(result + 3sub_100019F7C(v0 + 2) = 4 * ((((-a2 >> 2) & 3) - 4 * a2) & 0xF);
    }
  }

  return result;
}

uint64_t sub_100180D9C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 32) >> 4) & 3;
}

uint64_t sub_100180DA8(uint64_t result)
{
  *(_BYTE *)(result + 32) &= 0xCFu;
  return result;
}

uint64_t sub_100180DB8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 3sub_100019F7C(v0 + 2) = *(_BYTE *)(result + 32) & 0xC3 | (16 * (a2 & 3));
  return result;
}

void type metadata accessor for FlexListBox()
{
}

void type metadata accessor for PaymentSheetInfo.DesignVersion()
{
}

uint64_t sub_100180DF0(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_100180E44(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 3sub_100019F7C(v0 + 2) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 3sub_100019F7C(v0 + 2) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

void type metadata accessor for HeadValueEntry()
{
}

void type metadata accessor for PaymentSheetInfo.ConfirmationTitle()
{
}

_WORD *sub_100180EB4(_WORD *result, _WORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t sub_100180EC0(unsigned __int16 *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 4;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        return 0LL;
      }
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }

    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
  }

  return 0LL;
}

uint64_t sub_100180F30(_WORD *a1, int a2, int a3)
{
  else {
    int v3 = 4;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (!a2) {
    return ((uint64_t (*)(void))((char *)sub_100180FA8 + 4 * byte_1002075AB[v4]))();
  }
  *a1 = a2 - 1;
  return ((uint64_t (*)(void))((char *)sub_100180F88 + 4 * byte_1002075A6[v4]))();
}

uint64_t sub_100180F88(uint64_t result)
{
  *(_BYTE *)(result + sub_100019F7C(v0 + 2) = v1;
  return result;
}

uint64_t sub_100180FA8(uint64_t result)
{
  *(_BYTE *)(result + sub_100019F7C(v0 + 2) = 0;
  return result;
}

uint64_t sub_100180FB0(uint64_t result)
{
  *(_DWORD *)(result + sub_100019F7C(v0 + 2) = v1;
  return result;
}

uint64_t sub_100180FB8(uint64_t result)
{
  *(_WORD *)(result + sub_100019F7C(v0 + 2) = v1;
  return result;
}

uint64_t sub_100180FC0(uint64_t result)
{
  *(_WORD *)(result + sub_100019F7C(v0 + 2) = 0;
  return result;
}

uint64_t sub_100180FC8(uint64_t result)
{
  *(_DWORD *)(result + sub_100019F7C(v0 + 2) = 0;
  return result;
}

void type metadata accessor for Title()
{
}

unint64_t sub_100180FE4()
{
  unint64_t result = qword_1002B7BB0;
  if (!qword_1002B7BB0)
  {
    unint64_t result = swift_getWitnessTable(byte_100207770, &unk_10028D098);
    atomic_store(result, (unint64_t *)&qword_1002B7BB0);
  }

  return result;
}

unint64_t sub_100181024()
{
  unint64_t result = qword_1002B7BB8;
  if (!qword_1002B7BB8)
  {
    unint64_t result = swift_getWitnessTable(byte_1002078A8, &unk_10028CF88);
    atomic_store(result, (unint64_t *)&qword_1002B7BB8);
  }

  return result;
}

unint64_t sub_100181064()
{
  unint64_t result = qword_1002B7BC0;
  if (!qword_1002B7BC0)
  {
    unint64_t result = swift_getWitnessTable(byte_100207998, &type metadata for PaymentSheetInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7BC0);
  }

  return result;
}

unint64_t sub_1001810A4()
{
  unint64_t result = qword_1002B7BC8;
  if (!qword_1002B7BC8)
  {
    unint64_t result = swift_getWitnessTable(byte_1002078D0, &type metadata for PaymentSheetInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7BC8);
  }

  return result;
}

unint64_t sub_1001810E4()
{
  unint64_t result = qword_1002B7BD0;
  if (!qword_1002B7BD0)
  {
    unint64_t result = swift_getWitnessTable(byte_1002078F8, &type metadata for PaymentSheetInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7BD0);
  }

  return result;
}

unint64_t sub_100181120()
{
  unint64_t result = qword_1002B7BE0;
  if (!qword_1002B7BE0)
  {
    unint64_t result = swift_getWitnessTable(byte_1002085B4, &type metadata for Title.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7BE0);
  }

  return result;
}

unint64_t sub_10018115C()
{
  unint64_t result = qword_1002B7BE8;
  if (!qword_1002B7BE8)
  {
    unint64_t result = swift_getWitnessTable("}T\b", &unk_10028D7D8);
    atomic_store(result, (unint64_t *)&qword_1002B7BE8);
  }

  return result;
}

unint64_t sub_100181198()
{
  unint64_t result = qword_1002B7BF0;
  if (!qword_1002B7BF0)
  {
    unint64_t result = swift_getWitnessTable(byte_100208564, &unk_10028D748);
    atomic_store(result, (unint64_t *)&qword_1002B7BF0);
  }

  return result;
}

unint64_t sub_1001811D4()
{
  unint64_t result = qword_1002B7BF8;
  if (!qword_1002B7BF8)
  {
    unint64_t result = swift_getWitnessTable("1c\b", &unk_10028D098);
    atomic_store(result, (unint64_t *)&qword_1002B7BF8);
  }

  return result;
}

unint64_t sub_100181210()
{
  unint64_t result = qword_1002B7C08;
  if (!qword_1002B7C08)
  {
    unint64_t result = swift_getWitnessTable(byte_100208514, &type metadata for HeadValueEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7C08);
  }

  return result;
}

unint64_t sub_10018124C()
{
  unint64_t result = qword_1002B7C10;
  if (!qword_1002B7C10)
  {
    unint64_t result = swift_getWitnessTable(byte_100207830, &unk_10028CF88);
    atomic_store(result, (unint64_t *)&qword_1002B7C10);
  }

  return result;
}

unint64_t sub_100181288()
{
  unint64_t result = qword_1002B7C20;
  if (!qword_1002B7C20)
  {
    unint64_t result = swift_getWitnessTable("\rV\b", &unk_10028D2C8);
    atomic_store(result, (unint64_t *)&qword_1002B7C20);
  }

  return result;
}

uint64_t sub_1001812C4(uint64_t a1)
{
  return a1;
}

unint64_t sub_1001812F8()
{
  unint64_t result = qword_1002B7C28;
  if (!qword_1002B7C28)
  {
    unint64_t result = swift_getWitnessTable(byte_100208484, &unk_10028D238);
    atomic_store(result, (unint64_t *)&qword_1002B7C28);
  }

  return result;
}

unint64_t sub_100181334()
{
  unint64_t result = qword_1002B7C30;
  if (!qword_1002B7C30)
  {
    unint64_t result = swift_getWitnessTable(byte_10020845C, &unk_10028D6B8);
    atomic_store(result, (unint64_t *)&qword_1002B7C30);
  }

  return result;
}

uint64_t sub_100181370(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = sub_100182874(0LL, a2);
    uint64_t v6 = &protocol witness table for String;
    uint64_t result = swift_getWitnessTable(v2, v5, &v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1001813C0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = sub_100182874(0LL, a2);
    uint64_t v6 = v2();
    uint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v5, &v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_10018141C()
{
  unint64_t result = qword_1002B7C58;
  if (!qword_1002B7C58)
  {
    unint64_t result = swift_getWitnessTable(byte_10020840C, &unk_10028D1A8);
    atomic_store(result, (unint64_t *)&qword_1002B7C58);
  }

  return result;
}

unint64_t sub_100181458()
{
  unint64_t result = qword_1002B7C60;
  if (!qword_1002B7C60)
  {
    unint64_t result = swift_getWitnessTable("%V\b", &unk_10028D628);
    atomic_store(result, (unint64_t *)&qword_1002B7C60);
  }

  return result;
}

unint64_t sub_100181494()
{
  unint64_t result = qword_1002B7C68;
  if (!qword_1002B7C68)
  {
    unint64_t result = swift_getWitnessTable("MV\b", &unk_10028D598);
    atomic_store(result, (unint64_t *)&qword_1002B7C68);
  }

  return result;
}

unint64_t sub_1001814D0()
{
  unint64_t result = qword_1002B7C70;
  if (!qword_1002B7C70)
  {
    unint64_t result = swift_getWitnessTable("uV\b", &unk_10028D508);
    atomic_store(result, (unint64_t *)&qword_1002B7C70);
  }

  return result;
}

unint64_t sub_10018150C()
{
  unint64_t result = qword_1002B7C78;
  if (!qword_1002B7C78)
  {
    unint64_t result = swift_getWitnessTable(byte_10020836C, &unk_10028D478);
    atomic_store(result, (unint64_t *)&qword_1002B7C78);
  }

  return result;
}

unint64_t sub_100181548()
{
  unint64_t result = qword_1002B7C90;
  if (!qword_1002B7C90)
  {
    unint64_t result = swift_getWitnessTable(byte_100208344, &unk_10028D7D8);
    atomic_store(result, (unint64_t *)&qword_1002B7C90);
  }

  return result;
}

unint64_t sub_100181584()
{
  unint64_t result = qword_1002B7C98;
  if (!qword_1002B7C98)
  {
    unint64_t result = swift_getWitnessTable(byte_10020831C, &unk_10028D748);
    atomic_store(result, (unint64_t *)&qword_1002B7C98);
  }

  return result;
}

uint64_t sub_1001815C0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10018160C + 4 * byte_1002075B5[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100181640 + 4 * byte_1002075B0[v4]))();
}

uint64_t sub_100181640(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100181648(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100181650LL);
  }
  return result;
}

uint64_t sub_10018165C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100181664LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_100181668(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100181670(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for FlexListBox.Style.CodingKeys()
{
}

void type metadata accessor for PaymentSheetError()
{
}

uint64_t sub_100181694(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1001816E0 + 4 * byte_1002075BF[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100181714 + 4 * byte_1002075BA[v4]))();
}

uint64_t sub_100181714(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10018171C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100181724LL);
  }
  return result;
}

uint64_t sub_100181730(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100181738LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10018173C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100181744(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for FlexListBox.CodingKeys()
{
}

ValueMetadata *type metadata accessor for HeadValueEntry.CodingKeys()
{
  return &type metadata for HeadValueEntry.CodingKeys;
}

ValueMetadata *type metadata accessor for Title.CodingKeys()
{
  return &type metadata for Title.CodingKeys;
}

void type metadata accessor for FlexListBox.Style.Padding()
{
}

void type metadata accessor for FlexListBox.Style.Color()
{
}

void type metadata accessor for FlexListBox.Style.Size()
{
}

uint64_t sub_1001817A0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1001817EC + 4 * byte_1002075C9[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100181820 + 4 * byte_1002075C4[v4]))();
}

uint64_t sub_100181820(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100181828(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100181830LL);
  }
  return result;
}

uint64_t sub_10018183C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100181844LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100181848(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100181850(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for FlexListBox.Style.Name()
{
}

uint64_t sub_10018186C(uint64_t a1)
{
  return sub_100180BC8(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_10018187C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  sub_100180B20(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t sub_1001818C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  sub_100180B20(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_100180BC8(v6, v7, v8);
  return a1;
}

uint64_t sub_100181918(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_100180BC8(v4, v5, v6);
  return a1;
}

uint64_t sub_10018195C(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x3E && *(_BYTE *)(a1 + 17))
    {
      unsigned int v2 = *(_DWORD *)a1 + 61;
    }

    else
    {
      unsigned int v2 = (*(_BYTE *)(a1 + 16) & 0x3C | (*(unsigned __int8 *)(a1 + 16) >> 6)) ^ 0x3F;
      if (v2 >= 0x3D) {
        unsigned int v2 = -1;
      }
    }
  }

  else
  {
    unsigned int v2 = -1;
  }

  return v2 + 1;
}

uint64_t sub_1001819A4(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3D)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 62;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x3E) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0x3E) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0LL;
      *(void *)(result + 8) = 0LL;
      *(_BYTE *)(result + 16) = 4 * (((-a2 >> 2) & 0xF) - 16 * a2);
    }
  }

  return result;
}

uint64_t sub_1001819F8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) >> 6;
}

uint64_t sub_100181A04(uint64_t result)
{
  *(_BYTE *)(result + 16) &= 0x3Fu;
  return result;
}

uint64_t sub_100181A14(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = *(_BYTE *)(result + 16) & 3 | (a2 << 6);
  return result;
}

void type metadata accessor for FlexListBox.Value()
{
}

void type metadata accessor for Title.Value()
{
}

uint64_t sub_100181A40(unsigned int *a1, int a2)
{
  if (!a2) {
    return static _UInt24.min.getter();
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t sub_100181A8C(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100181ACC + 4 * byte_1002075CE[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100181AEC + 4 * byte_1002075D3[v4]))();
  }
}

_BYTE *sub_100181ACC(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100181AEC(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100181AF4(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100181AFC(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100181B04(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100181B0C(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

void type metadata accessor for Title.TitleType()
{
}

unint64_t sub_100181B28()
{
  unint64_t result = qword_1002B7CA0;
  if (!qword_1002B7CA0)
  {
    unint64_t result = swift_getWitnessTable(byte_100207BB4, &unk_10028D7D8);
    atomic_store(result, (unint64_t *)&qword_1002B7CA0);
  }

  return result;
}

unint64_t sub_100181B68()
{
  unint64_t result = qword_1002B7CA8;
  if (!qword_1002B7CA8)
  {
    unint64_t result = swift_getWitnessTable(byte_100207C54, &unk_10028D748);
    atomic_store(result, (unint64_t *)&qword_1002B7CA8);
  }

  return result;
}

unint64_t sub_100181BA8()
{
  unint64_t result = qword_1002B7CB0;
  if (!qword_1002B7CB0)
  {
    unint64_t result = swift_getWitnessTable("U]\b", &unk_10028D628);
    atomic_store(result, (unint64_t *)&qword_1002B7CB0);
  }

  return result;
}

unint64_t sub_100181BE8()
{
  unint64_t result = qword_1002B7CB8;
  if (!qword_1002B7CB8)
  {
    unint64_t result = swift_getWitnessTable(byte_100207DE4, &unk_10028D598);
    atomic_store(result, (unint64_t *)&qword_1002B7CB8);
  }

  return result;
}

unint64_t sub_100181C28()
{
  unint64_t result = qword_1002B7CC0;
  if (!qword_1002B7CC0)
  {
    unint64_t result = swift_getWitnessTable(byte_100207EAC, &unk_10028D508);
    atomic_store(result, (unint64_t *)&qword_1002B7CC0);
  }

  return result;
}

unint64_t sub_100181C68()
{
  unint64_t result = qword_1002B7CC8;
  if (!qword_1002B7CC8)
  {
    unint64_t result = swift_getWitnessTable(byte_100207F74, &unk_10028D478);
    atomic_store(result, (unint64_t *)&qword_1002B7CC8);
  }

  return result;
}

unint64_t sub_100181CA8()
{
  unint64_t result = qword_1002B7CD0;
  if (!qword_1002B7CD0)
  {
    unint64_t result = swift_getWitnessTable("EZ\b", &type metadata for Title.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7CD0);
  }

  return result;
}

unint64_t sub_100181CE8()
{
  unint64_t result = qword_1002B7CD8;
  if (!qword_1002B7CD8)
  {
    unint64_t result = swift_getWitnessTable(byte_1002080E4, &type metadata for HeadValueEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7CD8);
  }

  return result;
}

unint64_t sub_100181D28()
{
  unint64_t result = qword_1002B7CE0;
  if (!qword_1002B7CE0)
  {
    unint64_t result = swift_getWitnessTable(byte_1002081D4, &unk_10028D2C8);
    atomic_store(result, (unint64_t *)&qword_1002B7CE0);
  }

  return result;
}

unint64_t sub_100181D68()
{
  unint64_t result = qword_1002B7CE8;
  if (!qword_1002B7CE8)
  {
    unint64_t result = swift_getWitnessTable("5X\b", &unk_10028D238);
    atomic_store(result, (unint64_t *)&qword_1002B7CE8);
  }

  return result;
}

unint64_t sub_100181DA8()
{
  unint64_t result = qword_1002B7CF0;
  if (!qword_1002B7CF0)
  {
    unint64_t result = swift_getWitnessTable("}W\b", &unk_10028D1A8);
    atomic_store(result, (unint64_t *)&qword_1002B7CF0);
  }

  return result;
}

unint64_t sub_100181DE8()
{
  unint64_t result = qword_1002B7CF8;
  if (!qword_1002B7CF8)
  {
    unint64_t result = swift_getWitnessTable("MX\b", &unk_10028D1A8);
    atomic_store(result, (unint64_t *)&qword_1002B7CF8);
  }

  return result;
}

unint64_t sub_100181E28()
{
  unint64_t result = qword_1002B7D00;
  if (!qword_1002B7D00)
  {
    unint64_t result = swift_getWitnessTable("5X\b", &unk_10028D1A8);
    atomic_store(result, (unint64_t *)&qword_1002B7D00);
  }

  return result;
}

unint64_t sub_100181E68()
{
  unint64_t result = qword_1002B7D08;
  if (!qword_1002B7D08)
  {
    unint64_t result = swift_getWitnessTable(byte_10020810C, &unk_10028D2C8);
    atomic_store(result, (unint64_t *)&qword_1002B7D08);
  }

  return result;
}

unint64_t sub_100181EA8()
{
  unint64_t result = qword_1002B7D10;
  if (!qword_1002B7D10)
  {
    unint64_t result = swift_getWitnessTable(byte_100208134, &unk_10028D2C8);
    atomic_store(result, (unint64_t *)&qword_1002B7D10);
  }

  return result;
}

unint64_t sub_100181EE8()
{
  unint64_t result = qword_1002B7D18;
  if (!qword_1002B7D18)
  {
    unint64_t result = swift_getWitnessTable("]Z\b", &type metadata for HeadValueEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7D18);
  }

  return result;
}

unint64_t sub_100181F28()
{
  unint64_t result = qword_1002B7D20;
  if (!qword_1002B7D20)
  {
    unint64_t result = swift_getWitnessTable("EZ\b", &type metadata for HeadValueEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7D20);
  }

  return result;
}

unint64_t sub_100181F68()
{
  unint64_t result = qword_1002B7D28;
  if (!qword_1002B7D28)
  {
    unint64_t result = swift_getWitnessTable(byte_100207F9C, &type metadata for Title.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7D28);
  }

  return result;
}

unint64_t sub_100181FA8()
{
  unint64_t result = qword_1002B7D30;
  if (!qword_1002B7D30)
  {
    unint64_t result = swift_getWitnessTable(byte_100207FC4, &type metadata for Title.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7D30);
  }

  return result;
}

unint64_t sub_100181FE4()
{
  unint64_t result = qword_1002B7D38;
  if (!qword_1002B7D38)
  {
    unint64_t result = swift_getWitnessTable(byte_100207B3C, &unk_10028D7D8);
    atomic_store(result, (unint64_t *)&qword_1002B7D38);
  }

  return result;
}

unint64_t sub_100182020()
{
  unint64_t result = qword_1002B7D40;
  if (!qword_1002B7D40)
  {
    unint64_t result = swift_getWitnessTable("M^\b", &unk_10028D748);
    atomic_store(result, (unint64_t *)&qword_1002B7D40);
  }

  return result;
}

unint64_t sub_10018205C()
{
  unint64_t result = qword_1002B7D48;
  if (!qword_1002B7D48)
  {
    unint64_t result = swift_getWitnessTable("]S\b", &unk_10028D850);
    atomic_store(result, (unint64_t *)&qword_1002B7D48);
  }

  return result;
}

unint64_t sub_100182098()
{
  unint64_t result = qword_1002B7D50;
  if (!qword_1002B7D50)
  {
    unint64_t result = swift_getWitnessTable(byte_100208684, &unk_10028D8D0);
    atomic_store(result, (unint64_t *)&qword_1002B7D50);
  }

  return result;
}

unint64_t sub_1001820D4()
{
  unint64_t result = qword_1002B7D58;
  if (!qword_1002B7D58)
  {
    unint64_t result = swift_getWitnessTable(byte_100207CA4, &unk_10028D628);
    atomic_store(result, (unint64_t *)&qword_1002B7D58);
  }

  return result;
}

unint64_t sub_100182110()
{
  unint64_t result = qword_1002B7D60;
  if (!qword_1002B7D60)
  {
    unint64_t result = swift_getWitnessTable(byte_100207D6C, &unk_10028D598);
    atomic_store(result, (unint64_t *)&qword_1002B7D60);
  }

  return result;
}

unint64_t sub_10018214C()
{
  unint64_t result = qword_1002B7D68;
  if (!qword_1002B7D68)
  {
    unint64_t result = swift_getWitnessTable(byte_100207E34, &unk_10028D508);
    atomic_store(result, (unint64_t *)&qword_1002B7D68);
  }

  return result;
}

unint64_t sub_100182188()
{
  unint64_t result = qword_1002B7D70;
  if (!qword_1002B7D70)
  {
    unint64_t result = swift_getWitnessTable("-[\b", &unk_10028D478);
    atomic_store(result, (unint64_t *)&qword_1002B7D70);
  }

  return result;
}

void sub_1001821C8(uint64_t a1, uint64_t a2)
{
}

void type metadata accessor for FlexListBox.Value.StyledString()
{
}

void type metadata accessor for FlexListBox.Value.AttributedString()
{
}

unint64_t sub_100182204()
{
  unint64_t result = qword_1002B7D80;
  if (!qword_1002B7D80)
  {
    unint64_t result = swift_getWitnessTable("=R\b", &type metadata for FlexListBox.Value.StyledString.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7D80);
  }

  return result;
}

unint64_t sub_100182240()
{
  unint64_t result = qword_1002B7D90;
  if (!qword_1002B7D90)
  {
    unint64_t result = swift_getWitnessTable(byte_100208844, &type metadata for FlexListBox.Value.AttributedString.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7D90);
  }

  return result;
}

unint64_t sub_10018227C()
{
  unint64_t result = qword_1002B7DA0;
  if (!qword_1002B7DA0)
  {
    unint64_t result = swift_getWitnessTable(byte_100207C7C, &unk_10028D628);
    atomic_store(result, (unint64_t *)&qword_1002B7DA0);
  }

  return result;
}

unint64_t sub_1001822B8()
{
  unint64_t result = qword_1002B7DB0;
  if (!qword_1002B7DB0)
  {
    unint64_t result = swift_getWitnessTable(byte_100207D44, &unk_10028D598);
    atomic_store(result, (unint64_t *)&qword_1002B7DB0);
  }

  return result;
}

ValueMetadata *type metadata accessor for FlexListBox.Value.AttributedString.CodingKeys()
{
  return &type metadata for FlexListBox.Value.AttributedString.CodingKeys;
}

uint64_t _s25ASOctaneSupportXPCService14HeadValueEntryV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100182350 + 4 * byte_1002075DD[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100182384 + 4 * byte_1002075D8[v4]))();
}

uint64_t sub_100182384(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10018238C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100182394LL);
  }
  return result;
}

uint64_t sub_1001823A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001823A8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1001823AC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001823B4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FlexListBox.Value.StyledString.CodingKeys()
{
  return &type metadata for FlexListBox.Value.StyledString.CodingKeys;
}

unint64_t sub_1001823D4()
{
  unint64_t result = qword_1002B7DB8;
  if (!qword_1002B7DB8)
  {
    unint64_t result = swift_getWitnessTable("\rS\b", &type metadata for FlexListBox.Value.StyledString.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7DB8);
  }

  return result;
}

unint64_t sub_100182414()
{
  unint64_t result = qword_1002B7DC0;
  if (!qword_1002B7DC0)
  {
    unint64_t result = swift_getWitnessTable("UR\b", &type metadata for FlexListBox.Value.AttributedString.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7DC0);
  }

  return result;
}

unint64_t sub_100182454()
{
  unint64_t result = qword_1002B7DC8;
  if (!qword_1002B7DC8)
  {
    unint64_t result = swift_getWitnessTable("%S\b", &type metadata for FlexListBox.Value.AttributedString.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7DC8);
  }

  return result;
}

unint64_t sub_100182494()
{
  unint64_t result = qword_1002B7DD0;
  if (!qword_1002B7DD0)
  {
    unint64_t result = swift_getWitnessTable("\rS\b", &type metadata for FlexListBox.Value.AttributedString.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7DD0);
  }

  return result;
}

unint64_t sub_1001824D4()
{
  unint64_t result = qword_1002B7DD8;
  if (!qword_1002B7DD8)
  {
    unint64_t result = swift_getWitnessTable(byte_1002086D4, &type metadata for FlexListBox.Value.StyledString.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7DD8);
  }

  return result;
}

unint64_t sub_100182514()
{
  unint64_t result = qword_1002B7DE0;
  if (!qword_1002B7DE0)
  {
    unint64_t result = swift_getWitnessTable(byte_1002086FC, &type metadata for FlexListBox.Value.StyledString.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B7DE0);
  }

  return result;
}

uint64_t sub_100182558@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(_BYTE *)(v4 - sub_100081CEC(v0 + 128) = a3;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v4 - 128, v3);
}

uint64_t sub_100182570()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 272) + 8LL))(v1, v0);
}

uint64_t sub_100182588@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_100182594()
{
  return sub_1001812C4(*(void *)(v0 - 312));
}

uint64_t sub_1001825A0(uint64_t a1)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3 - 128, v3 - 113, v1, v2, a1);
}

uint64_t sub_1001825C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

uint64_t sub_1001825D8()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001825F0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 272) + 8LL))(v1, v0);
}

void *sub_100182608()
{
  return sub_100019F58(v0, v0[3]);
}

void sub_100182628(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100182638()
{
  *(_BYTE *)(v3 - 65) = 0;
  return KeyedEncodingContainer.encode(_:forKey:)(v2, v1, v3 - 65, v0);
}

uint64_t sub_100182658(uint64_t a1)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, v2 - 67, v1, a1);
}

uint64_t sub_100182678()
{
  return sub_100180BC8(v1, v2, v0);
}

uint64_t sub_100182688(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_100182690()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 272) + 8LL))(v0, v1);
}

uint64_t sub_1001826AC@<X0>(uint64_t a1@<X8>)
{
  return v1(*(void *)(a1 - 256), v2);
}

void sub_1001826B8(uint64_t a1, uint64_t a2)
{
}

void sub_1001826C8()
{
}

uint64_t sub_1001826E0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return sub_100043F18((uint64_t)&a12, a15);
}

uint64_t sub_1001826F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_100182710()
{
  *(_BYTE *)(v1 - 65) = 0;
  return KeyedDecodingContainer.decode(_:forKey:)(v1 - 65, v0);
}

uint64_t sub_100182728@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(_BYTE *)(v4 - sub_100081CEC(v0 + 128) = a3;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v4 - 128, v3);
}

uint64_t sub_100182740()
{
  return v0 - 208;
}

uint64_t sub_100182760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(v6 - 66, v6 - 67, v5, a4, a5);
}

uint64_t sub_100182778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, v5, a1, a5);
}

uint64_t sub_10018278C()
{
  return 0x726564616568LL;
}

Swift::Int sub_1001827A0(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  return _findStringSwitchCase(cases:string:)(cases, v3);
}

uint64_t sub_1001827B4(unint64_t *a1)
{
  return sub_1001813C0(a1, v1);
}

uint64_t sub_1001827BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

uint64_t sub_1001827D0()
{
  return v0;
}

uint64_t sub_1001827E8()
{
  return sub_100180BC8(v2, v1, v0);
}

uint64_t sub_1001827F8(uint64_t a1)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, v1);
}

void sub_100182808(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_DWORD *)(v4 - 7sub_100019F7C(v0 + 2) = a4;
}

uint64_t sub_100182820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, a3, v3);
}

void sub_100182830()
{
  *(_BYTE *)(v0 - 67) = 1;
}

uint64_t sub_10018283C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(a1, a2, v5, a4, a5);
}

uint64_t sub_10018284C()
{
  return v0 - 232;
}

  ;
}

uint64_t sub_10018286C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_100182874(uint64_t a1, uint64_t *a2)
{
  return sub_100018EC0(a2);
}

uint64_t sub_100182880()
{
  return swift_bridgeObjectRetain(v0);
}

void sub_10018288C()
{
  *(_BYTE *)(v0 - 23sub_100019F7C(v0 + 2) = 1;
}

void sub_100182898(void *a1@<X8>)
{
  *a1 = v1;
  a1[1] = v2;
}

uint64_t sub_1001828A0@<X0>(uint64_t a1@<X8>)
{
  return v1(*(void *)(a1 - 256), v2);
}

uint64_t sub_1001828AC()
{
  return v0 - 232;
}

uint64_t sub_1001828C0(unint64_t *a1)
{
  return sub_100181370(a1, v1);
}

void sub_1001828C8(uint64_t a1, void *a2)
{
  v4._uint64_t countAndFlagsBits = 47LL;
  v4._object = (void *)0xE100000000000000LL;
  if (String.hasPrefix(_:)(v4))
  {
    sub_100182A28();
  }

  else
  {
    sub_100182A28();
    v5._uint64_t countAndFlagsBits = 47LL;
    v5._object = (void *)0xE100000000000000LL;
    String.append(_:)(v5);
  }

  v6._uint64_t countAndFlagsBits = a1;
  v6._object = a2;
  String.append(_:)(v6);
  sub_10001DBAC();
}

uint64_t sub_10018293C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 120);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(v3 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v4;
}

uint64_t sub_100182994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_1000CB708(a1, a2);
  if (result)
  {
    int v9 = (void *)result;
    sub_100075EE8(a3, a4);
    sub_1000D88A0(v9);
    uint64_t v11 = v10;
    swift_release();
    swift_release();
    return v11;
  }

  return result;
}

uint64_t sub_100182A28()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[3];
  uint64_t v3 = (void *)v0[4];
  swift_bridgeObjectRetain(v3);
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v3);
  v5._uint64_t countAndFlagsBits = 58LL;
  v5._object = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  Swift::String v6 = *(os_unfair_lock_s **)(v0[6] + 16LL);
  swift_retain(v1);
  os_unfair_lock_lock(v6);
  os_unfair_lock_unlock(v6);
  swift_release(v1);
  v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  return 0x2F2F3A70747468LL;
}

int64x2_t sub_100182B00@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for AppInformationResponse(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_1000175B0(&qword_1002AA358);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (void *)((char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  int64_t v16 = *(void *)(a1 + 16);
  if (v16)
  {
    uint64_t v25 = a2;
    uint64_t v26 = a3;
    uint64_t v27 = a4;
    uint64_t v28 = _swiftEmptyArrayStorage;
    sub_100032338(0LL, v16, 0);
    uint64_t v17 = *(unsigned __int8 *)(v9 + 80);
    v24[1] = a1;
    uint64_t v18 = a1 + ((v17 + 32) & ~v17);
    uint64_t v19 = *(void *)(v9 + 72);
    uint64_t v20 = v28;
    do
    {
      sub_100183500(v18, (uint64_t)v11);
      sub_100183500((uint64_t)v11, (uint64_t)v15 + *(int *)(v12 + 56));
      *uint64_t v15 = 1936748641LL;
      v15[1] = 0xE400000000000000LL;
      _OWORD v15[2] = 0LL;
      void v15[3] = 0xE000000000000000LL;
      sub_100183544((uint64_t)v11);
      if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
      {
        sub_100032338(0LL, v20[2] + 1LL, 1);
        uint64_t v20 = v28;
      }

      unint64_t v22 = v20[2];
      unint64_t v21 = v20[3];
      if (v22 >= v21 >> 1)
      {
        sub_100032338(v21 > 1, v22 + 1, 1);
        uint64_t v20 = v28;
      }

      _OWORD v20[2] = v22 + 1;
      sub_1000390C8( (uint64_t)v15,  (uint64_t)v20 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))
      + *(void *)(v13 + 72) * v22,
        &qword_1002AA358);
      v18 += v19;
      --v16;
    }

    while (v16);
    swift_bridgeObjectRelease();
    a3 = v26;
    a4 = v27;
    a2 = v25;
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = _swiftEmptyArrayStorage;
  }

  *(void *)a4 = v20;
  *(void *)(a4 + 8) = a2;
  *(void *)(a4 + 24) = 0LL;
  *(void *)(a4 + 3sub_100019F7C(v0 + 2) = 0LL;
  *(void *)(a4 + 16) = a3;
  int64x2_t result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(a4 + 4sub_10019B2E8(v0, 0) = result;
  return result;
}

uint64_t sub_100182D20@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AppInformationResponse(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v6);
  uint64_t v10 = &v28[-v9];
  sub_100055528(a1);
  sub_100038A60((uint64_t)a1, (uint64_t)v29);
  sub_1000390C8((uint64_t)v29, (uint64_t)v34, &qword_1002AA7B8);
  if (sub_10003BDB8((uint64_t)v34) == 1)
  {
    sub_1000ACB64(0x2064696C61766E49LL, 0xEF74736575716572LL, 6u, (uint64_t)v35);
    uint64_t v11 = v35[0];
    uint64_t v12 = v35[1];
    uint64_t v13 = v35[2];
    uint64_t v14 = v35[3];
    unint64_t v15 = LODWORD(v35[4]) | ((unint64_t)WORD2(v35[4]) << 32) | ((unint64_t)BYTE6(v35[4]) << 48);
    uint64_t v16 = 21LL;
  }

  else
  {
    memcpy(v35, v34, 0x189uLL);
    sub_100182F8C(v35, v10);
    sub_100183500((uint64_t)v10, (uint64_t)v8);
    sub_100183070(v35);
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    uint64_t v21 = sub_1000175B0(qword_1002B7EE0);
    uint64_t v22 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v23 = (v22 + 32) & ~v22;
    uint64_t v24 = swift_allocObject(v21, v23 + *(void *)(v5 + 72), v22 | 7);
    *(_OWORD *)(v24 + 16) = xmmword_1001F3C00;
    sub_100183500((uint64_t)v8, v24 + v23);
    sub_100182B00(v24, v18, v20, (uint64_t)v30);
    sub_100183544((uint64_t)v8);
    sub_1001C1D54(v30);
    uint64_t v11 = v30[7];
    uint64_t v12 = v30[8];
    uint64_t v13 = v30[9];
    uint64_t v14 = v30[10];
    unint64_t v15 = v31 | ((unint64_t)v32 << 32) | ((unint64_t)v33 << 48);
    sub_1001831AC((uint64_t)v29);
    sub_100183544((uint64_t)v10);
    uint64_t v16 = 3LL;
  }

  ASOctaneSupportXPCService::HTTPVersion v25 = HTTPVersion.init(major:minor:)(1LL, 1LL);
  uint64_t v26 = type metadata accessor for HTTPResponseHead._Storage();
  uint64_t result = swift_allocObject(v26, 44LL, 7LL);
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 3sub_100019F7C(v0 + 2) = v16;
  *(ASOctaneSupportXPCService::HTTPVersion *)(result + 4sub_10019B2E8(v0, 0) = v25;
  *(void *)a2 = result;
  *(void *)(a2 + 8) = _swiftEmptyArrayStorage;
  *(_BYTE *)(a2 + 16) = 2;
  *(void *)(a2 + 24) = v11;
  *(void *)(a2 + 3sub_100019F7C(v0 + 2) = v12;
  *(void *)(a2 + 4sub_10019B2E8(v0, 0) = v13;
  *(void *)(a2 + 48) = v14;
  *(_BYTE *)(a2 + 6sub_100019F7C(v0 + 2) = BYTE6(v15);
  *(_WORD *)(a2 + 6sub_10019B2E8(v0, 0) = WORD2(v15);
  *(_DWORD *)(a2 + 56) = v15;
  return result;
}

uint64_t sub_100182F8C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = (void *)sub_100182994(*(void *)(a1[6] + 16LL), *(void *)(a1[6] + 24LL), v4, v5);
  sub_100183580();
  uint64_t v7 = sub_10018293C(v4, v5);
  uint64_t v9 = v8;
  if (v6)
  {
    uint64_t v10 = v6[3];
    uint64_t v11 = v6[4];
    uint64_t v12 = v6[5];
    uint64_t v13 = v6[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
  }

  sub_100020064(v7, v9, v10, v11, v12, v13, a2);
  return swift_release();
}

void sub_100183070(uint64_t *a1)
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1 + 88);
  if (Strong)
  {
    uint64_t v4 = Strong;
    _StringGuts.grow(_:)(19LL);
    swift_bridgeObjectRelease();
    strcpy((char *)v9, "/v1/catalog/");
    BYTE5(v9[1]) = 0;
    HIWORD(v9[1]) = -5120;
    uint64_t v6 = *a1;
    uint64_t v5 = (void *)a1[1];
    swift_bridgeObjectRetain();
    v7._uint64_t countAndFlagsBits = v6;
    v7._object = v5;
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._uint64_t countAndFlagsBits = 0x737070612FLL;
    v8._object = (void *)0xE500000000000000LL;
    String.append(_:)(v8);
    sub_1001828C8(v9[0], (void *)v9[1]);
    swift_unknownObjectRelease(v4);
    swift_bridgeObjectRelease();
  }

  sub_10001DBAC();
}

uint64_t sub_100183150()
{
  return sub_100081CEC(v0 + 88);
}

uint64_t sub_100183158()
{
  uint64_t v0 = sub_10007F138();
  sub_100081CEC((uint64_t)(v0 + 11));
  return swift_deallocClassInstance(v0, 104LL, 7LL);
}

uint64_t type metadata accessor for AppInformationRoute()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService19AppInformationRoute);
}

uint64_t sub_1001831AC(uint64_t a1)
{
  __int128 v10 = *(_OWORD *)(a1 + 352);
  __int128 v11 = *(_OWORD *)(a1 + 368);
  __int128 v8 = *(_OWORD *)(a1 + 320);
  __int128 v9 = *(_OWORD *)(a1 + 336);
  __int128 v6 = *(_OWORD *)(a1 + 288);
  __int128 v7 = *(_OWORD *)(a1 + 304);
  __int128 v4 = *(_OWORD *)(a1 + 256);
  __int128 v5 = *(_OWORD *)(a1 + 272);
  __int128 v3 = *(_OWORD *)(a1 + 224);
  sub_10018324C( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 128),  *(void *)(a1 + 136),  *(void *)(a1 + 144),  *(void *)(a1 + 152),  *(void *)(a1 + 160),  *(void *)(a1 + 168),  *(void *)(a1 + 176),  *(void *)(a1 + 184),  *(void *)(a1 + 192),  *(void *)(a1 + 200),  *(void *)(a1 + 208),  *(void *)(a1 + 216),  v3,  *((uint64_t *)&v3 + 1),  *(void *)(a1 + 240),  *(void *)(a1 + 248),  v4,  *((uint64_t *)&v4 + 1),  v5,  *((uint64_t *)&v5 + 1),  v6,  *((uint64_t *)&v6 + 1),  v7,  *((uint64_t *)&v7 + 1),  v8,  *((uint64_t *)&v8 + 1),  v9,  *((uint64_t *)&v9 + 1),  v10,  *((uint64_t *)&v10 + 1),  v11,  *((uint64_t *)&v11 + 1),  *(void *)(a1 + 384));
  return a1;
}

uint64_t sub_10018324C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_100039578( a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43,  a44,  a45,  a46,  a47,  a48,  a49);
  }

  return result;
}

uint64_t sub_100183500(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppInformationResponse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100183544(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AppInformationResponse(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *sub_100183580()
{
  return sub_100019F58(v1, *(void *)(v0 + 72));
}

void *sub_10018358C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  _OWORD v6[2] = a3;
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL)) {
    return _StringGuts._slowWithCString<A>(_:)(a4, sub_1001837EC, v6, a1, a2, &type metadata for ()[8]);
  }
  if ((a2 & 0x2000000000000000LL) != 0)
  {
    *(void *)__int128 v7 = a1;
    uint64_t v8 = a2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v4 = v7;
  }

  else if ((a1 & 0x1000000000000000LL) != 0)
  {
    uint64_t v4 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    uint64_t v4 = (char *)_StringObject.sharedUTF8.getter(a1);
  }

  return (void *)pthread_setname_np(v4);
}

uint64_t sub_10018363C(void *a1)
{
  uint64_t v1 = (void (*)(void **))a1[2];
  uint64_t v3 = a1[4];
  unint64_t v2 = a1[5];
  swift_bridgeObjectRetain();
  swift_retain();
  pthread_t v4 = pthread_self();
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_10018372C(0x7FFFFFFFFFFFFFFFLL, v3, v2);
    uint64_t v6 = static String._fromSubstring(_:)(v5);
    sub_10018358C(v6, v7, (uint64_t)v4, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  uint64_t v9 = type metadata accessor for NIOThread();
  __int128 v10 = (void *)swift_allocObject(v9, 40LL, 7LL);
  v10[3] = v2;
  v10[4] = v4;
  __int128 v10[2] = v3;
  uint64_t v12 = v10;
  v1(&v12);
  swift_release();
  swift_release();
  swift_release();
  return 0LL;
}

uint64_t sub_10018372C(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v5 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000LL) == 0) {
      uint64_t v5 = a2;
    }
    uint64_t v6 = 7LL;
    if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v6 = 11LL;
    }
    uint64_t v7 = v6 | (v5 << 16);
    uint64_t v8 = String.index(_:offsetBy:limitedBy:)(15LL, result, v7, a2, a3);
    if ((v9 & 1) != 0) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = v8;
    }
    uint64_t v11 = String.subscript.getter(15LL, v10, a2, a3);
    swift_bridgeObjectRelease(a3);
    return v11;
  }

  return result;
}

uint64_t sub_1001837EC(const char *a1)
{
  return pthread_setname_np(a1);
}

void sub_100183810()
{
}

void RemovableChannelHandler.removeHandler(context:removalToken:)()
{
  uint64_t v3 = v2;
  swift_unknownObjectRelease(v2);
  if (v3 == v1)
  {
    ChannelHandlerContext.leavePipeline(removalToken:)(v0);
    sub_1000193B8();
  }

  else
  {
    __break(1u);
  }

void sub_100183860()
{
}

void _ChannelInboundHandler.channelRegistered(context:)()
{
}

void sub_1001838A0()
{
}

void _ChannelInboundHandler.channelUnregistered(context:)()
{
}

void sub_1001838E0()
{
}

void _ChannelInboundHandler.channelActive(context:)()
{
}

void sub_100183920()
{
}

void _ChannelInboundHandler.channelReadComplete(context:)()
{
}

void sub_100183960()
{
}

void _ChannelInboundHandler.channelWritabilityChanged(context:)()
{
}

void sub_1001839A0(uint64_t a1, uint64_t a2)
{
}

void _ChannelOutboundHandler.register(context:promise:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_100183E28(a1, a2);
  ChannelHandlerContext.register(promise:)(v2);
  sub_10001945C();
}

void sub_1001839E4()
{
}

void _ChannelOutboundHandler.bind(context:to:promise:)(uint64_t a1, uint64_t a2)
{
}

void sub_100183A2C()
{
}

void _ChannelOutboundHandler.connect(context:to:promise:)(uint64_t a1, uint64_t a2)
{
}

void sub_100183A74()
{
}

void _ChannelOutboundHandler.flush(context:)()
{
}

void sub_100183AB4()
{
}

void _ChannelOutboundHandler.close(context:mode:promise:)()
{
}

void sub_100183B04()
{
}

void _ChannelOutboundHandler.triggerUserOutboundEvent(context:event:promise:)(uint64_t a1, uint64_t a2)
{
}

void sub_100183B4C()
{
}

void _ChannelInboundHandler.channelInactive(context:)()
{
}

void sub_100183B8C()
{
}

void _ChannelInboundHandler.channelRead(context:data:)(uint64_t a1, uint64_t a2)
{
}

void sub_100183BD0(uint64_t a1, uint64_t a2)
{
}

void _ChannelInboundHandler.userInboundEventTriggered(context:event:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_100183E28(a1, a2);
  ChannelHandlerContext.fireUserInboundEventTriggered(_:)(v2);
  sub_10001945C();
}

void sub_100183C14()
{
}

void _ChannelOutboundHandler.read(context:)()
{
}

void sub_100183C54()
{
}

void _ChannelInboundHandler.errorCaught(context:error:)(uint64_t a1, uint64_t a2)
{
}

void sub_100183C94()
{
}

void sub_100183CA8()
{
}

void sub_100183CBC()
{
}

void sub_100183CD0()
{
}

void sub_100183CE4()
{
}

void sub_100183CF8(uint64_t a1, uint64_t a2)
{
}

void sub_100183D0C(uint64_t a1, uint64_t a2)
{
}

void sub_100183D20(uint64_t a1, uint64_t a2)
{
}

void sub_100183D34(uint64_t a1, uint64_t a2)
{
}

void sub_100183D48()
{
}

void sub_100183D5C()
{
}

void sub_100183D70()
{
}

void sub_100183D84(uint64_t a1, uint64_t a2)
{
}

void sub_100183D9C()
{
}

void _ChannelOutboundHandler.write(context:data:promise:)(uint64_t a1, uint64_t a2)
{
}

void sub_100183DE0()
{
}

void sub_100183DF4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100183E08(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_100183E18()
{
}

uint64_t sub_100183E28(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100183E34()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100043E18(v0, qword_1002EB9D0);
  sub_100018F68(v0, (uint64_t)qword_1002EB9D0);
  return Logger.init(subsystem:category:)( 0xD000000000000023LL,  0x80000001002211B0LL,  0x726576726573LL,  0xE600000000000000LL);
}

uint64_t sub_100183EA4(uint64_t a1)
{
  v2[0] = "\b";
  v2[1] = &unk_100208A70;
  void v2[2] = &unk_100208A70;
  v2[3] = &unk_100208A70;
  void v2[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2(a1, 0LL, 5LL, v2, a1 + 880);
}

uint64_t sub_100183F00(uint64_t result)
{
  if ((_BYTE)result)
  {
    if (result == 1)
    {
      sub_100185010();
      uint64_t result = v3(0LL);
      if (!v2) {
        *(_BYTE *)(v1 + *(void *)(*(void *)v1 + 896LL)) = 1;
      }
    }
  }

  else
  {
    sub_100185010();
    uint64_t result = v4(1LL);
    if (!v2) {
      *(_BYTE *)(v1 + *(void *)(*(void *)v1 + 904LL)) = 1;
    }
  }

  return result;
}

uint64_t sub_100183F7C()
{
  uint64_t v1 = v0;
  swift_release();
  swift_release();
  return v1;
}

void sub_100183FC0()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  swift_getObjectType(v0);
  sub_100185028();
  EventLoop.assertInEventLoop(file:line:)(v4, v5, v6, 96LL, v7, v3);
  swift_unknownObjectRelease(v1);
  sub_100026438();
}

uint64_t sub_100184018()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + *(void *)(*(void *)v0 + 912LL)) + 112LL);
  swift_retain();
  uint64_t v2 = sub_100006CE4((_BYTE *)(v1 + 16));
  swift_release();
  return v2;
}

uint64_t sub_100184064()
{
  uint64_t v1 = (void *)swift_retain();
  return sub_10019AD20( (uint64_t)v1,  v1,  sub_100184F58,  v0,  (void (*)(void, void))sub_100184F70,  v0,  sub_100184F88,  v0) & 0x101;
}

uint64_t sub_1001840B8()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  sub_100025FF8();
  uint64_t v5 = v4;
  swift_getObjectType(v6);
  sub_100185028();
  EventLoop.assertInEventLoop(file:line:)(v7, v8, v9, 102LL, v10, v5);
  sub_10002A338();
  uint64_t v11 = v3 + *(void *)(*(void *)v3 + 168LL);
  sub_10002A718(v11, (uint64_t)v57, 0LL);
  uint64_t v58 = v11;
  sub_100023BAC(v11, (uint64_t)v49);
  uint64_t v12 = v54;
  sub_100019F58(v49, v53);
  uint64_t v13 = sub_100185034();
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(v12 + 8))(v13);
  uint64_t result = sub_100019F7C(v49);
  uint64_t v16 = *(void *)(*(void *)v0 + 176LL);
  uint64_t v17 = *(void *)(v0 + v16);
  if (!v17)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    return result;
  }

  sub_100183FC0();
  if ((v18 & 1) != 0)
  {
    uint64_t v47 = *(void *)(*(void *)v0 + 896LL);
    if ((*(_BYTE *)(v0 + v47) & 1) == 0)
    {
      uint64_t v44 = v16;
      uint64_t v45 = v17;
      char v21 = 0;
      uint64_t v46 = *(void *)(*(void *)v0 + 152LL);
      BOOL v22 = v17 == 1;
      unint64_t v23 = 1LL;
      while (1)
      {
        BOOL v48 = v22;
        if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
        {
          sub_10005B858(*(_DWORD *)(v14 + 16));
          uint64_t v25 = v24;
          sub_10002A524();
          uint64_t v14 = v25;
        }

        uint64_t v26 = *(unsigned int *)(v14 + 16);
        if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
        {
          ByteBuffer._Storage.reallocSlice(_:capacity:)(v26 << 32, v26);
          uint64_t v28 = v27;
          sub_10002A524();
          LODWORD(v26) = *(_DWORD *)(v28 + 16);
          uint64_t v14 = v28;
        }

        sub_10002A718(v14 + 24, (uint64_t)v56, 0LL);
        uint64_t v29 = v2;
        uint64_t v30 = sub_100184E24(*(void *)(v14 + 24), *(void *)(v14 + 24) + v26, v3);
        if (v2) {
          return sub_10002A524();
        }
        if ((v31 & 1) == 0) {
          goto LABEL_29;
        }
        uint64_t v32 = v30;
        if (v30 <= 0)
        {
          if (*(_BYTE *)(v3 + v47) != 1) {
            goto LABEL_4;
          }
          *(_BYTE *)(v3 + v46) = 0;
          sub_100028188();
LABEL_29:
          sub_10002A524();
          return v21 & 1;
        }

        uint64_t v33 = v58;
        sub_10002A718(v58, (uint64_t)v49, 33LL);
        uint64_t v34 = *(void *)(v33 + 24);
        uint64_t v35 = *(void *)(v33 + 32);
        sub_100043F18(v33, v34);
        char v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v32, v34, v35);
        swift_endAccess(v49);
        *(_BYTE *)(v3 + v46) = 0;
        uint64_t v37 = sub_100026518();
        v49[0] = v14;
        v49[1] = v32 << 32;
        char v52 = 0;
        __int16 v51 = 0;
        int v50 = v26;
        char v55 = 0;
        uint64_t v38 = *(void *)(v37 + 56);
        uint64_t ObjectType = swift_getObjectType(*(void *)(v37 + 48));
        EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  1157LL,  ObjectType,  v38);
        if (sub_100095918())
        {
          swift_retain();
          sub_1000963AC((uint64_t)v49);
          swift_release();
        }

        else
        {
          swift_retain();
        }

        swift_release();
        uint64_t result = sub_1000324E8((uint64_t)v49);
        if ((_DWORD)v26 != (_DWORD)v32) {
          goto LABEL_30;
        }
        if ((v36 & 1) != 0 && v23 < *(void *)(v3 + v44))
        {
          sub_100023BAC(v58, (uint64_t)v49);
          uint64_t v40 = v54;
          sub_100019F58(v49, v53);
          uint64_t v41 = sub_100185034();
          uint64_t v42 = (*(uint64_t (**)(uint64_t))(v40 + 8))(v41);
          sub_10002A524();
          uint64_t result = sub_100019F7C(v49);
          uint64_t v14 = v42;
        }

        uint64_t v2 = v29;
        if (v48)
        {
LABEL_30:
          sub_10002A524();
          char v21 = 1;
          return v21 & 1;
        }

        if (v23 == -1LL) {
          goto LABEL_34;
        }
        sub_100183FC0();
        if ((v43 & 1) != 0)
        {
          BOOL v22 = ++v23 == v45;
          char v21 = 1;
          if ((*(_BYTE *)(v3 + v47) & 1) == 0) {
            continue;
          }
        }

        goto LABEL_4;
      }

      __break(1u);
      goto LABEL_33;
    }
  }

BOOL sub_100184484()
{
  uint64_t v1 = *(void *)(v0 + *(void *)(*(void *)v0 + 912LL));
  swift_beginAccess(v1 + 16, v3, 0LL, 0LL);
  return (*(_BYTE *)(v1 + 48) & 1) == 0;
}

void sub_1001844D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_BYTE *)(v4 + *(void *)(*(void *)v4 + 904LL)) == 1)
  {
    if (a2)
    {
      unint64_t v5 = sub_100029C98();
      uint64_t v6 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v5);
      sub_1001565C0(v6, v7, 4LL);
      sub_100184FF8(v6, 1LL);
      swift_errorRelease(v6);
      swift_errorRelease(v6);
    }
  }

  else
  {
    type metadata accessor for BaseStreamSocketChannel( 0LL,  *(void *)(*(void *)v4 + 864LL),  *(void *)(*(void *)v4 + 872LL),  a4);
    ChannelCore.unwrapData<A>(_:as:)(&type metadata for IOData, (uint64_t)v11);
    if ((sub_10019B3A4(v11[0], v11[1], v12 | ((unint64_t)(v13 | (v14 << 16)) << 32)) & 1) != 0)
    {
      sub_100185000();
    }

    else
    {
      uint64_t v8 = sub_100026518();
      uint64_t v9 = *(void *)(v8 + 56);
      uint64_t ObjectType = swift_getObjectType(*(void *)(v8 + 48));
      EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  1173LL,  ObjectType,  v9);
      if (sub_100095918())
      {
        sub_1000964D0();
        sub_100024F0C();
      }

      sub_100185000();
      swift_release();
    }
  }

void sub_10018464C()
{
}

void sub_100184674(uint64_t a1)
{
}

void sub_1001846A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v52 = a2;
  uint64_t v53 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a4,  a3,  &protocol requirements base descriptor for ChannelOption,  &associated type descriptor for ChannelOption.Value);
  uint64_t v8 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v55 = a3;
  uint64_t v9 = *(void *)(a3 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100025FF8();
  uint64_t v13 = v12;
  swift_getObjectType(v14);
  sub_100185028();
  EventLoop.assertInEventLoop(file:line:)(v15, v16, v17, 38LL, v18, v13);
  sub_10002A338();
  sub_100183FC0();
  if ((v19 & 1) != 0)
  {
    uint64_t v50 = v4;
    uint64_t v20 = v52;
    uint64_t v21 = v53;
    uint64_t v22 = v55;
    uint64_t v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v53, v55);
    uint64_t v26 = sub_100184FC8(v23, v24, v25, (uint64_t)&type metadata for ChannelOptions.Types.AllowRemoteHalfClosureOption);
    if ((_DWORD)v26)
    {
      uint64_t v29 = sub_100184FB4();
      sub_100184FA0(v29, v30, v31, (uint64_t)&type metadata for Bool);
      *(_BYTE *)(v50 + *(void *)(*(void *)v50 + 888LL)) = v54;
    }

    else
    {
      uint64_t v34 = sub_100184FC8(v26, v27, v28, (uint64_t)&type metadata for ChannelOptions.Types.WriteSpinOption);
      if (!(_DWORD)v34)
      {
        Swift::Int v49 = v11;
        uint64_t v42 = v22;
        if (sub_100184FC8( v34,  v35,  v36,  (uint64_t)&type metadata for ChannelOptions.Types.WriteBufferWaterMarkOption))
        {
          uint64_t v43 = *(void *)(v50 + *(void *)(*(void *)v50 + 912LL));
          uint64_t v44 = sub_100184FB4();
          sub_100184FA0(v44, v45, v46, (uint64_t)&type metadata for ChannelOptions.Types.WriteBufferWaterMark);
          *(_OWORD *)(v43 + 96) = v54;
        }

        else
        {
          uint64_t v47 = v51;
          sub_100026F24(v21, v20, v22, a4);
          if (v47)
          {
            (*(void (**)(char *, uint64_t))(v9 + 8))(v49, v22);
            goto LABEL_9;
          }
        }

        uint64_t v41 = v49;
        goto LABEL_8;
      }

      uint64_t v37 = *(void *)(v50 + *(void *)(*(void *)v50 + 912LL));
      uint64_t v38 = sub_100184FB4();
      sub_100184FA0(v38, v39, v40, (uint64_t)&type metadata for UInt);
      *(void *)(v37 + sub_100081CEC(v0 + 128) = v54;
    }

    uint64_t v41 = v11;
    uint64_t v42 = v22;
LABEL_8:
    (*(void (**)(char *, uint64_t))(v9 + 8))(v41, v42);
    goto LABEL_9;
  }

  unint64_t v32 = sub_100029C98();
  sub_1000252D0((uint64_t)&type metadata for ChannelError, v32);
  sub_1000ABEFC(v33, 2LL);
LABEL_9:
  sub_10001DAB8();
}

void sub_1001848E4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100025FF8();
  uint64_t v11 = v10;
  swift_getObjectType(v12);
  sub_100185028();
  EventLoop.assertInEventLoop(file:line:)(v13, v14, v15, 57LL, v16, v11);
  sub_10002A338();
  sub_100183FC0();
  if ((v17 & 1) != 0)
  {
    uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a2);
    uint64_t v21 = sub_100184FE8(v18, v19, v20, (uint64_t)&type metadata for ChannelOptions.Types.AllowRemoteHalfClosureOption);
    if ((_DWORD)v21)
    {
      LOBYTE(v34) = *(_BYTE *)(v3 + *(void *)(*(void *)v3 + 888LL));
      uint64_t v24 = sub_100184FD8( v21,  v22,  v23,  (uint64_t)&protocol requirements base descriptor for ChannelOption,  (uint64_t)&associated type descriptor for ChannelOption.Value);
      uint64_t v25 = (ValueMetadata *)&type metadata for Bool;
    }

    else
    {
      uint64_t v28 = sub_100184FE8(v21, v22, v23, (uint64_t)&type metadata for ChannelOptions.Types.WriteSpinOption);
      if ((_DWORD)v28)
      {
        *(void *)&__int128 v34 = *(void *)(*(void *)(v3 + *(void *)(*(void *)v3 + 912LL)) + 128LL);
        uint64_t v24 = sub_100184FD8( v28,  v29,  v30,  (uint64_t)&protocol requirements base descriptor for ChannelOption,  (uint64_t)&associated type descriptor for ChannelOption.Value);
        uint64_t v25 = (ValueMetadata *)&type metadata for UInt;
      }

      else
      {
        uint64_t v31 = sub_100184FE8(v28, v29, v30, (uint64_t)&type metadata for ChannelOptions.Types.WriteBufferWaterMarkOption);
        if (!(_DWORD)v31)
        {
          sub_1000275B8(a1, a2, a3);
          goto LABEL_10;
        }

        __int128 v34 = *(_OWORD *)(*(void *)(v3 + *(void *)(*(void *)v3 + 912LL)) + 96LL);
        uint64_t v24 = sub_100184FD8( v31,  v32,  v33,  (uint64_t)&protocol requirements base descriptor for ChannelOption,  (uint64_t)&associated type descriptor for ChannelOption.Value);
        uint64_t v25 = &type metadata for ChannelOptions.Types.WriteBufferWaterMark;
      }
    }

    swift_dynamicCast(a3, &v34, v25, v24, 7LL);
LABEL_10:
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
    goto LABEL_11;
  }

  unint64_t v26 = sub_100029C98();
  sub_1000252D0((uint64_t)&type metadata for ChannelError, v26);
  sub_1000ABEFC(v27, 2LL);
LABEL_11:
  sub_10001DAB8();
}

void sub_100184AE4()
{
  if ((*(_BYTE *)(v0 + *(void *)(*(void *)v0 + 896LL)) & 1) == 0) {
    sub_1000278C8();
  }
}

void sub_100184B00()
{
  if ((*(_BYTE *)(v0 + *(void *)(*(void *)v0 + 896LL)) & 1) == 0) {
    sub_100028044();
  }
}

uint64_t sub_100184B18(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = result;
  if (!a2)
  {
    if (*(_BYTE *)(v3 + *(void *)(*(void *)v3 + 904LL)) == 1)
    {
      if (!a3) {
        return result;
      }
      unint64_t v14 = sub_100029C98();
      uint64_t v10 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v14);
      uint64_t v12 = v10;
      uint64_t v13 = 4LL;
      goto LABEL_9;
    }

    sub_100156A68(*(uint64_t (**)(void))(*(void *)v3 + 1016LL));
    if (!v4)
    {
      sub_10019B2E8(v7, 0);
      sub_100027F30();
      if (a3) {
        sub_100184FF8(0LL, 0LL);
      }
      sub_100026518();
      uint64_t v24 = &type metadata for ChannelEvent;
      LOBYTE(v2sub_100019F7C(v0 + 2) = 1;
      goto LABEL_32;
    }

uint64_t sub_100184DCC()
{
  return swift_release(*(void *)(v0 + *(void *)(*(void *)v0 + 912LL)));
}

uint64_t sub_100184DF8()
{
  uint64_t v0 = sub_100183F7C();
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for BaseStreamSocketChannel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BaseStreamSocketChannel);
}

uint64_t sub_100184E24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)a3 + 872LL) + 48LL))( a1,  a2,  *(void *)(*(void *)a3 + 864LL));
  if (v3) {
    return v5;
  }
  return result;
}

uint64_t sub_100184E64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 0LL;
  if (a1)
  {
    if (a2 - a1 >= 1) {
      return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)a3 + 872LL) + 32LL))( a1,  a2,  *(void *)(*(void *)a3 + 864LL));
    }
  }

  return result;
}

uint64_t sub_100184ECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)a3 + 872LL) + 40LL))( a1,  a2,  *(void *)(*(void *)a3 + 864LL));
  if (v3) {
    return v5;
  }
  return result;
}

uint64_t sub_100184F0C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v5 = __OFSUB__(a3, a2);
  uint64_t v6 = a3 - a2;
  if (v5)
  {
    __break(1u);
  }

  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)a4 + 872LL) + 72LL))( result,  a2,  v6,  *(void *)(*(void *)a4 + 864LL));
    if (v4) {
      return v7;
    }
  }

  return result;
}

uint64_t sub_100184F58(uint64_t a1, uint64_t a2)
{
  return sub_100184E64(a1, a2, v2);
}

uint64_t sub_100184F70(uint64_t a1, uint64_t a2)
{
  return sub_100184ECC(a1, a2, v2);
}

uint64_t sub_100184F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100184F0C(a1, a2, a3, v3);
}

uint64_t sub_100184FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v6 - 96, v5, v4, a4, 7LL);
}

uint64_t sub_100184FB4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v3, v0, v2);
}

uint64_t sub_100184FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, v4, v5, a4, 0LL);
}

uint64_t sub_100184FD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return swift_getAssociatedTypeWitness(0LL, v5, v6, a4, a5);
}

uint64_t sub_100184FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, v5, v4, a4, 0LL);
}

uint64_t sub_100184FF8(uint64_t a1, uint64_t a2)
{
  return sub_100098A70(a1, a2, v2);
}

uint64_t sub_100185000()
{
  return sub_100018F04(v0);
}

  ;
}

  ;
}

uint64_t sub_100185034()
{
  return sub_100026514();
}

uint64_t sub_100185044(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x4449656C646E7562LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v5 = 0xE800000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449656C646E7562LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x444970756F7267LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v8 = 0xE700000000000000LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444970756F7267LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x65736E6F43646964LL && a2 == 0xEA0000000000746ELL)
  {
    swift_bridgeObjectRelease(0xEA0000000000746ELL);
    return 2LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65736E6F43646964LL, 0xEA0000000000746ELL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_10018519C(char a1)
{
  if (!a1) {
    return 0x4449656C646E7562LL;
  }
  if (a1 == 1) {
    return 0x444970756F7267LL;
  }
  return 0x65736E6F43646964LL;
}

uint64_t sub_1001851F8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000175B0(&qword_1002B8060);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10001DAD0();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100019F58(a1, v10);
  unint64_t v12 = sub_100185A80();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for PriceIncreaseHelperRoute.Request.CodingKeys,  &type metadata for PriceIncreaseHelperRoute.Request.CodingKeys,  v12,  v10,  v11);
  uint64_t v13 = *(void *)v3;
  uint64_t v14 = *(void *)(v3 + 8);
  char v21 = 0;
  sub_1000B0E84(v13, v14, (uint64_t)&v21);
  if (!v2)
  {
    uint64_t v15 = *(void *)(v3 + 16);
    uint64_t v16 = *(void *)(v3 + 24);
    char v20 = 1;
    sub_1000B0E84(v15, v16, (uint64_t)&v20);
    uint64_t v17 = *(unsigned __int8 *)(v3 + 32);
    char v19 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, &v19, v5);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

void sub_100185314(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_1000175B0(&qword_1002B8050);
  __chkstk_darwin(v5);
  sub_10001DAD0();
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100019F58(a1, v6);
  unint64_t v8 = sub_100185A80();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for PriceIncreaseHelperRoute.Request.CodingKeys,  &type metadata for PriceIncreaseHelperRoute.Request.CodingKeys,  v8,  v6,  v7);
  if (v2)
  {
    sub_10001DC08();
  }

  else
  {
    char v20 = 0;
    uint64_t v9 = sub_10013C3C0((uint64_t)&v20);
    uint64_t v11 = v10;
    uint64_t v17 = v9;
    char v19 = 1;
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_10013C3C0((uint64_t)&v19);
    uint64_t v14 = v13;
    uint64_t v15 = v12;
    char v18 = 2;
    swift_bridgeObjectRetain();
    uint64_t v16 = v14;
    LOBYTE(v14) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v18, v5);
    sub_100023E48();
    sub_10001DC08();
    swift_bridgeObjectRelease();
    sub_100023EF4();
    *(void *)a2 = v17;
    *(void *)(a2 + 8) = v11;
    *(void *)(a2 + 16) = v15;
    *(void *)(a2 + 24) = v16;
    *(_BYTE *)(a2 + 3sub_100019F7C(v0 + 2) = v14;
  }

  sub_10001DAB8();
}

uint64_t sub_1001854B4()
{
  return sub_10018519C(*v0);
}

uint64_t sub_1001854BC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100185044(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001854E0(uint64_t a1)
{
  unint64_t v2 = sub_100185A80();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100185508(uint64_t a1)
{
  unint64_t v2 = sub_100185A80();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100185530@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    double result = *(double *)v6;
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 3sub_100019F7C(v0 + 2) = v7;
  }

  return result;
}

uint64_t sub_100185574(void *a1)
{
  return sub_1001851F8(a1);
}

double sub_100185588@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2;
  sub_1001C14D4();
  sub_100185A28((uint64_t)v15, (uint64_t)v16);
  if (*((void *)&v16[0] + 1))
  {
    __n128 v18 = (__n128)v16[0];
    __int128 v19 = v16[1];
    char v20 = v17;
    a1 = v4;
    LOWORD(v4) = 0;
    sub_1001858C8((uint64_t)&v18);
    sub_100185C70(v18);
    __int128 v14 = v19;
    sub_100161AF8((uint64_t)&v14);
    sub_10001ED94();
    uint64_t v9 = sub_100185C48();
    uint64_t v10 = sub_10001ED7C(v9);
    uint64_t v11 = sub_100185C64(v10);
    uint64_t v12 = 3LL;
  }

  else
  {
    sub_10001ED94();
    uint64_t v7 = sub_100185C48();
    uint64_t v8 = sub_10001ED7C(v7);
    uint64_t v11 = sub_100185C64(v8);
    uint64_t v12 = 21LL;
  }

  *(void *)(v11 + 3sub_100019F7C(v0 + 2) = v12;
  *(_WORD *)(v11 + 4sub_10019B2E8(v0, 0) = v4;
  *(_WORD *)(v11 + 4sub_100019F7C(v0 + 2) = v3;
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = _swiftEmptyArrayStorage;
  *(_BYTE *)(a2 + 16) = 2;
  double result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 4sub_10019B2E8(v0, 0) = 0u;
  *(void *)(a2 + 55) = 0LL;
  return result;
}

void sub_1001858C8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_10001DAD0();
  uint64_t v7 = v6 - v5;
  uint64_t v13 = v1 + 88;
  uint64_t v8 = sub_100019F58((void *)(v1 + 88), *(void *)(v1 + 112));
  static Date.now.getter(v8);
  uint64_t v9 = (void *)sub_100086438();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
  if (v9)
  {
    sub_100023BAC(v13, (uint64_t)v14);
    sub_100019F58(v14, v14[3]);
    sub_10008A040(v9, *(_BYTE *)(a1 + 32) & 1);

    sub_100019F7C(v14);
  }

  else
  {
    unint64_t v10 = sub_10001FD38();
    uint64_t v11 = swift_allocError(&type metadata for HTTPResponseStatus, v10, 0LL, 0LL);
    *uint64_t v12 = 0LL;
    v12[1] = 0LL;
    v12[2] = 25LL;
    swift_willThrow(v11);
  }

  sub_10001DAB8();
}

uint64_t type metadata accessor for PriceIncreaseHelperRoute()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService24PriceIncreaseHelperRoute);
}

uint64_t sub_100185A28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002B8048);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for PriceIncreaseHelperRoute.Request()
{
  return &type metadata for PriceIncreaseHelperRoute.Request;
}

unint64_t sub_100185A80()
{
  unint64_t result = qword_1002B8058;
  if (!qword_1002B8058)
  {
    unint64_t result = swift_getWitnessTable(")R\b", &type metadata for PriceIncreaseHelperRoute.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B8058);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for PriceIncreaseHelperRoute.Request.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100185B08 + 4 * byte_100208AB5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100185B3C + 4 * byte_100208AB0[v4]))();
}

uint64_t sub_100185B3C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100185B44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100185B4CLL);
  }
  return result;
}

uint64_t sub_100185B58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100185B60LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100185B64(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100185B6C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PriceIncreaseHelperRoute.Request.CodingKeys()
{
  return &type metadata for PriceIncreaseHelperRoute.Request.CodingKeys;
}

unint64_t sub_100185B8C()
{
  unint64_t result = qword_1002B8068;
  if (!qword_1002B8068)
  {
    unint64_t result = swift_getWitnessTable("AR\b", &type metadata for PriceIncreaseHelperRoute.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B8068);
  }

  return result;
}

unint64_t sub_100185BCC()
{
  unint64_t result = qword_1002B8070;
  if (!qword_1002B8070)
  {
    unint64_t result = swift_getWitnessTable(byte_100208B60, &type metadata for PriceIncreaseHelperRoute.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B8070);
  }

  return result;
}

unint64_t sub_100185C0C()
{
  unint64_t result = qword_1002B8078;
  if (!qword_1002B8078)
  {
    unint64_t result = swift_getWitnessTable("qR\b", &type metadata for PriceIncreaseHelperRoute.Request.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B8078);
  }

  return result;
}

uint64_t sub_100185C48()
{
  return type metadata accessor for HTTPResponseHead._Storage();
}

uint64_t sub_100185C58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, v4, a4, 0LL);
}

uint64_t sub_100185C64(uint64_t result)
{
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  return result;
}

uint64_t sub_100185C70(__n128 a1)
{
  *(__n128 *)(v1 - 96) = a1;
  return sub_100161AF8(v1 - 96);
}

void sub_100185C7C()
{
}

void sub_100185C88(uint64_t a1)
{
}

void sub_100185C94()
{
}

void sub_100185CA0()
{
}

void sub_100185CAC(uint64_t a1)
{
}

void sub_100185CB8()
{
}

void sub_100185CC4(uint64_t a1)
{
}

void sub_100185CD4(uint64_t a1)
{
}

void sub_100185CE0()
{
}

void sub_100185CEC(uint64_t a1)
{
}

void sub_100185CF8(uint64_t a1)
{
}

void sub_100185D04(uint64_t a1)
{
}

void sub_100185D10(uint64_t a1)
{
}

void sub_100185D1C(uint64_t a1)
{
}

void sub_100185D28(uint64_t a1)
{
}

void sub_100185D34(uint64_t a1)
{
}

void sub_100185D44()
{
}

void sub_100185D64(uint64_t a1)
{
}

void sub_100185D70(uint64_t a1)
{
}

void sub_100185D7C()
{
}

void sub_100185D88()
{
}

void sub_100185D94(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  sub_100060600(a1);
  sub_1000BBD1C(v1 - 1LL);
  sub_100035698();
  sub_1000354B8();
}

void sub_100185DC4(uint64_t a1)
{
}

void sub_100185DD4(uint64_t a1)
{
  char v1 = a1;
  sub_100060600(a1);
  sub_1000BBD1C(qword_100208E20[v1]);
  sub_100035698();
  sub_1000354B8();
}

void sub_100185E0C(uint64_t a1)
{
}

void sub_100185E18(uint64_t a1)
{
}

void sub_100185E24()
{
}

void sub_100185E3C()
{
}

void sub_100185E58()
{
}

void sub_100185E64()
{
}

void sub_100185E70(uint64_t a1)
{
}

void sub_100185E7C(uint64_t a1)
{
}

void sub_100185E88(uint64_t a1)
{
}

void sub_100185E94()
{
}

void sub_100185EA0()
{
}

void sub_100185EAC(uint64_t a1)
{
}

void sub_100185EB8(uint64_t a1)
{
}

void sub_100185EC4()
{
}

void sub_100185EE4()
{
}

void sub_100185EF0(uint64_t a1)
{
}

void sub_100185EFC(uint64_t a1)
{
}

void sub_100185F08()
{
}

void sub_100185F14(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  sub_100060600(a1);
  sub_1000BBD1C(v1 + 1LL);
  sub_100035698();
  sub_1000354B8();
}

void sub_100185F44()
{
}

void sub_100185F50()
{
}

void sub_100185F5C(uint64_t a1)
{
}

void sub_100185F68(uint64_t a1, unint64_t a2)
{
}

void sub_100185FAC(uint64_t a1)
{
}

void sub_100185FB8()
{
}

void sub_100185FC4(uint64_t a1)
{
}

void sub_100185FD0()
{
}

void sub_100185FF0()
{
}

void sub_100185FFC()
{
}

void sub_100186008()
{
}

void sub_100186014()
{
}

void sub_100186020(uint64_t a1)
{
}

void sub_10018602C(uint64_t a1)
{
}

void sub_100186038(uint64_t a1)
{
}

void sub_100186044()
{
}

void sub_100186050()
{
}

void sub_10018605C(uint64_t a1)
{
}

void sub_100186068()
{
}

void sub_100186078(uint64_t a1)
{
}

void sub_100186084(uint64_t a1)
{
}

void sub_100186090()
{
}

void sub_10018609C()
{
}

void sub_1001860B0(uint64_t a1)
{
}

void sub_1001860BC()
{
}

void sub_1001860C8()
{
}

void sub_1001860D4()
{
}

void sub_1001860E4(uint64_t a1, uint64_t a2)
{
}

void sub_10018611C()
{
}

void sub_100186128()
{
}

void sub_100186134(uint64_t a1)
{
}

void sub_100186160(uint64_t a1)
{
}

void sub_10018616C(uint64_t a1)
{
  Swift::UInt32 v1 = a1;
  sub_100060600(a1);
  Hasher._combine(_:)(v1);
  sub_100035698();
  sub_1000354B8();
}

void sub_10018619C(uint64_t a1)
{
  char v1 = a1;
  sub_100060600(a1);
  sub_1000BBD1C(v1 & 1);
  sub_100035698();
  sub_1000354B8();
}

void sub_1001861C8(uint64_t a1)
{
}

void sub_1001861D4(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  sub_100060600(a1);
  sub_1000BBD1C(v1);
  sub_100035698();
  sub_1000354B8();
}

void sub_100186200(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  sub_100060600(a1);
  sub_1000BBD1C(v1 + 10LL);
  sub_100035698();
  sub_1000354B8();
}

void sub_100186230(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  sub_100060600(a1);
  sub_1000BBD1C(v1 + 1000LL);
  sub_100035698();
  sub_1000354B8();
}

void sub_100186260(uint64_t a1)
{
}

void sub_10018626C()
{
}

void sub_100186278()
{
}

void sub_100186284()
{
}

void sub_100186290()
{
}

void sub_10018629C(uint64_t a1)
{
}

void sub_1001862A8(uint64_t a1)
{
}

void sub_1001862B4(uint64_t a1)
{
}

void sub_1001862C0(uint64_t a1, void (*a2)(_BYTE *, uint64_t))
{
}

void sub_1001862F4(uint64_t a1)
{
}

void sub_100186300(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = a2(a1);
  sub_10018647C(v4, v5, v6);
  swift_bridgeObjectRelease();
  sub_100035698();
  sub_1000354B8();
}

void sub_100186340(Swift::UInt a1)
{
}

void sub_100186370()
{
}

uint64_t sub_100186388(uint64_t a1)
{
  return sub_1001863D0(a1, &qword_1002A8D68, &dword_1002EB9BC, &dword_1002EB9E8, (uint64_t)debugOnly(_:));
}

uint64_t sub_1001863AC(uint64_t a1)
{
  return sub_1001863D0(a1, &qword_1002A8D78, &dword_1002EB9C4, &dword_1002EB9EC, (uint64_t)sub_100171DDC);
}

uint64_t sub_1001863D0(uint64_t a1, void *a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  if (*a2 != -1LL) {
    uint64_t result = swift_once(a2, a5);
  }
  *a4 = *a3;
  return result;
}

ValueMetadata *type metadata accessor for UnixDomainSocketPathWrongType()
{
  return &type metadata for UnixDomainSocketPathWrongType;
}

ValueMetadata *_s10SocketTypeVMa()
{
  return &_s10SocketTypeVN;
}

unint64_t sub_100186438()
{
  unint64_t result = qword_1002B8080;
  if (!qword_1002B8080)
  {
    unint64_t result = swift_getWitnessTable(byte_100208DF4, &_s10SocketTypeVN);
    atomic_store(result, (unint64_t *)&qword_1002B8080);
  }

  return result;
}

void sub_100186474(uint64_t a1)
{
}

uint64_t sub_10018647C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return String.hash(into:)(va, a1, a2);
}

void sub_100186494(uint64_t a1, uint64_t a2)
{
}

void sub_10018649C(uint64_t a1)
{
}

uint64_t sub_1001864A4(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x7470697263736564LL && a2 == 0xEB000000006E6F69LL)
  {
    unint64_t v5 = 0xEB000000006E6F69LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7470697263736564LL, 0xEB000000006E6F69LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x4E79616C70736964LL && a2 == 0xEB00000000656D61LL)
  {
    unint64_t v8 = 0xEB00000000656D61LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4E79616C70736964LL, 0xEB00000000656D61LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    return 2LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656C61636F6CLL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_100186618(char a1)
{
  if (!a1) {
    return 0x7470697263736564LL;
  }
  if (a1 == 1) {
    return 0x4E79616C70736964LL;
  }
  return 0x656C61636F6CLL;
}

uint64_t sub_10018667C()
{
  return sub_100186618(*v0);
}

uint64_t sub_100186684@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001864A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001866A8(uint64_t a1)
{
  unint64_t v2 = sub_100186BDC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001866D0(uint64_t a1)
{
  unint64_t v2 = sub_100186BDC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1001866F8()
{
  return v0;
}

uint64_t sub_100186724()
{
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t type metadata accessor for OctaneLocalization()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService18OctaneLocalization);
}

uint64_t sub_100186764(void *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = sub_1000175B0(&qword_1002B81A8);
  __chkstk_darwin(v4);
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100019F58(a1, v5);
  unint64_t v7 = sub_100186BDC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for OctaneLocalization.CodingKeys,  &type metadata for OctaneLocalization.CodingKeys,  v7,  v5,  v6);
  uint64_t v8 = v2[2];
  char v20 = 0;
  uint64_t v9 = swift_bridgeObjectRetain();
  sub_100186DF4(v9, v10, (uint64_t)&v20);
  if (v8
    || (sub_10001DC10(),
        uint64_t v11 = v2[4],
        char v19 = 1,
        uint64_t v12 = swift_bridgeObjectRetain(),
        sub_100186DF4(v12, v13, (uint64_t)&v19),
        v11))
  {
    sub_1000227A0();
    return sub_10001DC10();
  }

  else
  {
    sub_10001DC10();
    uint64_t v18 = v2[6];
    char v17 = 2;
    uint64_t v15 = type metadata accessor for OctaneLocale();
    uint64_t v16 = sub_100186C18(&qword_1002B81B0, "A/\b");
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v4, v15, v16);
    return sub_1000227A0();
  }

uint64_t sub_1001868D0(void *a1)
{
  uint64_t v3 = swift_allocObject(v1, 56LL, 7LL);
  sub_10018691C(a1);
  return v3;
}

void *sub_10018691C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000175B0(&qword_1002B8190);
  __chkstk_darwin(v5);
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100019F58(a1, v6);
  unint64_t v8 = sub_100186BDC();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for OctaneLocalization.CodingKeys,  &type metadata for OctaneLocalization.CodingKeys,  v8,  v6,  v7);
  if (v2)
  {
    uint64_t v12 = type metadata accessor for OctaneLocalization();
    swift_deallocPartialClassInstance(v1, v12, 56LL, 7LL);
  }

  else
  {
    char v17 = 0;
    v1[2] = sub_100186E0C((uint64_t)&v17);
    v1[3] = v9;
    char v16 = 1;
    v1[4] = sub_100186E0C((uint64_t)&v16);
    v1[5] = v10;
    uint64_t v11 = type metadata accessor for OctaneLocale();
    char v15 = 2;
    sub_100186C18(&qword_1002B81A0, ")/\b");
    KeyedDecodingContainer.decode<A>(_:forKey:)(v11, &v15, v5, v11);
    sub_100186DE4();
    v3[6] = v14;
  }

  sub_100019F7C(a1);
  return v3;
}

uint64_t sub_100186AD4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1001868D0(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100186AFC(void *a1)
{
  return sub_100186764(a1);
}

uint64_t sub_100186B1C(uint64_t a1, uint64_t a2)
{
  if ((sub_1000CC284(*(void **)(a1 + 48), *(void **)(a2 + 48)) & 1) == 0) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  BOOL v8 = v4 == v6 && v5 == v7;
  if (v8 || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0LL), uint64_t result = 0LL, (v9 & 1) != 0))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v13 = *(void *)(a2 + 32);
    uint64_t v14 = *(void *)(a2 + 40);
    if (v11 == v13 && v12 == v14) {
      return 1LL;
    }
    else {
      return _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v13, v14, 0LL);
    }
  }

  return result;
}

uint64_t sub_100186BBC(uint64_t *a1, uint64_t *a2)
{
  return sub_100186B1C(*a1, *a2) & 1;
}

unint64_t sub_100186BDC()
{
  unint64_t result = qword_1002B8198;
  if (!qword_1002B8198)
  {
    unint64_t result = swift_getWitnessTable("!Q\b", &type metadata for OctaneLocalization.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B8198);
  }

  return result;
}

uint64_t sub_100186C18(unint64_t *a1, const char *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for OctaneLocale();
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for OctaneLocalization.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100186CA4 + 4 * byte_100208E55[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100186CD8 + 4 * byte_100208E50[v4]))();
}

uint64_t sub_100186CD8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100186CE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100186CE8LL);
  }
  return result;
}

uint64_t sub_100186CF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100186CFCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100186D00(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100186D08(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OctaneLocalization.CodingKeys()
{
  return &type metadata for OctaneLocalization.CodingKeys;
}

unint64_t sub_100186D28()
{
  unint64_t result = qword_1002B81B8;
  if (!qword_1002B81B8)
  {
    unint64_t result = swift_getWitnessTable(byte_100208FC8, &type metadata for OctaneLocalization.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B81B8);
  }

  return result;
}

unint64_t sub_100186D68()
{
  unint64_t result = qword_1002B81C0;
  if (!qword_1002B81C0)
  {
    unint64_t result = swift_getWitnessTable(byte_100208F38, &type metadata for OctaneLocalization.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B81C0);
  }

  return result;
}

unint64_t sub_100186DA8()
{
  unint64_t result = qword_1002B81C8;
  if (!qword_1002B81C8)
  {
    unint64_t result = swift_getWitnessTable("yQ\b", &type metadata for OctaneLocalization.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B81C8);
  }

  return result;
}

uint64_t sub_100186DE4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100186DF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encode(_:forKey:)(v4, v5, a3, v3);
}

uint64_t sub_100186E0C(uint64_t a1)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

void HTTPResponseHead.isKeepAlive.getter(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
}

Swift::Void __swiftcall HTTPHeaders.replaceOrAdd(name:value:)(Swift::String name, Swift::String value)
{
  char v9 = sub_100192208();
  sub_100019390();
  if ((v9 & 1) != 0) {
    sub_100192520();
  }
  sub_100019320();
  uint64_t v10 = sub_100192208();
  uint64_t v11 = sub_100019390();
  if ((v10 & 1) != 0) {
    sub_100192520();
  }
  uint64_t v12 = __chkstk_darwin(v11);
  if (*(void *)(*v3 + 16) < sub_100192804( v12,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10003251C))
  {
    __break(1u);
    goto LABEL_11;
  }

  sub_100033B48();
  if ((sub_10002ACF8(v4, v2) & 1) != 0)
  {
LABEL_11:
    __break(1u);
    return;
  }

  sub_100019320();
  sub_10003574C();
  sub_10002E88C();
  sub_1001926F0();
  uint64_t v13 = *v3;
  *(void *)(v13 + 16) = v10 + 1;
  uint64_t v14 = (void *)(v13 + 32 * v10);
  v14[4] = v4;
  void v14[5] = v2;
  v14[6] = v6;
  v14[7] = v5;
  *uint64_t v3 = v13;
  sub_100019320();
  char v15 = sub_100192208();
  sub_100019390();
  if ((v15 & 1) != 0) {
    sub_100192520();
  }
  sub_100023E74();
}

void *HTTPVersion.http1_1.unsafeMutableAddressor()
{
  return &static HTTPVersion.http1_1;
}

void HTTPResponseHead.init(version:status:headers:)()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  __int16 v7 = v6;
  unsigned int v8 = HIWORD(v6);
  uint64_t v9 = sub_100020008();
  uint64_t v10 = sub_10001ED7C(v9);
  *(void *)(v10 + 16) = v5;
  *(void *)(v10 + 24) = v3;
  *(void *)(v10 + 3sub_100019F7C(v0 + 2) = v1;
  *(_WORD *)(v10 + 4sub_10019B2E8(v0, 0) = v7;
  *(_WORD *)(v10 + 4sub_100019F7C(v0 + 2) = v8;
  sub_100023E74();
}

uint64_t sub_100186F84(uint64_t a1)
{
  uint64_t v2 = Set.init(minimumCapacity:)(*(void *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  uint64_t v10 = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      sub_10001FFF0();
      sub_1001A0924(&v9, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v3;
    }

    while (v3);
    sub_100019390();
    return v10;
  }

  else
  {
    uint64_t v7 = v2;
    sub_100019390();
  }

  return v7;
}

void sub_100187028()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Calendar.Component(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  unsigned int v8 = (char *)v15 - v7;
  uint64_t v9 = *(void *)(v1 + 16);
  unint64_t v10 = sub_100191FD4();
  v15[1] = Set.init(minimumCapacity:)(v9, v2, v10);
  uint64_t v11 = *(void *)(v1 + 16);
  if (v11)
  {
    uint64_t v12 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v13 = *(void *)(v3 + 72);
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v14(v6, v12, v2);
      sub_1001A0A98((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v12 += v13;
      --v11;
    }

    while (v11);
  }

  sub_100019390();
  sub_10002A580();
}

void sub_100187134(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = sub_100192124();
  uint64_t v8 = Set.init(minimumCapacity:)(v2, &type metadata for FetchSoftwareAddOnsRequest.Extension, v3);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    for (uint64_t i = 0LL; i != v4; ++i)
    {
      uint64_t v6 = a1 + i;
      sub_1001A0DD0((uint64_t)&v7, *(unsigned __int8 *)(v6 + 32));
    }

    sub_100019390();
  }

  else
  {
    sub_100019390();
  }

  sub_10001DBAC();
}

void sub_1001871B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = sub_100191F98();
  uint64_t v8 = Set.init(minimumCapacity:)(v2, &type metadata for AppInformationRequest.Extension, v3);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    for (uint64_t i = 0LL; i != v4; ++i)
    {
      char v6 = *(_BYTE *)(a1 + i + 32);
      sub_1001A1078(&v7, v6);
    }

    sub_100019390();
  }

  else
  {
    sub_100019390();
  }

  sub_10001DBAC();
}

void static HTTPRequestHead.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a4 + 16);
  unint64_t v9 = *(void *)(a4 + 24);
  HTTPMethod.rawValue.getter(v6, v7);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  HTTPMethod.rawValue.getter(v8, v9);
  if (v11 == v15 && v13 == v14)
  {
    sub_10005A6F0(v6, v7);
    sub_10005A6F0(v8, v9);
    sub_10001EDE8(v13);
    sub_100192618();
  }

  else
  {
    uint64_t v17 = v14;
    uint64_t v18 = sub_1000706C8();
    char v21 = sub_100048720(v18, v19, v20, v17);
    sub_10005A6F0(v6, v7);
    sub_10005A6F0(v8, v9);
    sub_100019390();
    sub_10001EDA0();
    sub_100192618();
    if ((v21 & 1) == 0)
    {
LABEL_17:
      sub_1000193DC();
      return;
    }
  }

  uint64_t v22 = *(void *)(a1 + 32);
  uint64_t v23 = *(void *)(a1 + 40);
  uint64_t v24 = *(void *)(a4 + 32);
  uint64_t v25 = *(void *)(a4 + 40);
  BOOL v26 = v22 == v24 && v23 == v25;
  if (!v26 && (sub_100048720(v22, v23, v24, v25) & 1) == 0) {
    goto LABEL_17;
  }
  if (*(unsigned __int16 *)(a1 + 48) != *(unsigned __int16 *)(a4 + 48)
    || *(unsigned __int16 *)(a1 + 50) != *(unsigned __int16 *)(a4 + 50))
  {
    goto LABEL_17;
  }

  sub_1000193DC();
  static HTTPHeaders.== infix(_:_:)(v28, v29, v30);
}

void static HTTPResponseHead.== infix(_:_:)()
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = v5;
  uint64_t v7 = v0;
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 + 16);
  unint64_t v11 = *(void *)(v9 + 32);
  uint64_t v12 = v1[2];
  unint64_t v13 = v1[4];
  if (v11 >= 0x3C)
  {
    if (v13 < 0x3C || v10 != v12) {
      goto LABEL_19;
    }
    uint64_t v17 = *(void *)(v9 + 24);
    BOOL v18 = v17 == v1[3] && v11 == v13;
    if (!v18 && (sub_100048720(v17, *(void *)(v9 + 32), v1[3], v1[4]) & 1) == 0) {
      goto LABEL_19;
    }
  }

  else if (v13 >= 0x3C {
         || (uint64_t v14 = HTTPResponseStatus.code.getter(v10, v0, v11), v14 != HTTPResponseStatus.code.getter(v12, v15, v13)))
  }
  {
LABEL_19:
    sub_10002A580();
    return;
  }

  if (*(unsigned __int16 *)(v9 + 40) != *((unsigned __int16 *)v4 + 20)
    || *(unsigned __int16 *)(v9 + 42) != *((unsigned __int16 *)v4 + 21))
  {
    goto LABEL_19;
  }

  static HTTPHeaders.== infix(_:_:)(v7, v6, v3);
}

uint64_t HTTPResponseHead.status.getter()
{
  uint64_t v0 = sub_100192700();
  sub_100190134(v0, v1, v2);
  return sub_100192700();
}

void static HTTPResponseStatus.== infix(_:_:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a3 >= 0x3C)
  {
    if (a6 >= 0x3C && a1 == a4 && (a2 != a5 || a3 != a6))
    {
      _stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, a5, a6, 0LL);
      return;
    }
  }

  else if (a6 <= 0x3B)
  {
    HTTPResponseStatus.code.getter(a1, a2, a3);
    HTTPResponseStatus.code.getter(a4, v8, a6);
  }

  sub_1000193B8();
}

uint64_t HTTPResponseHead.version.getter(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

void sub_100187550(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  void *(*v25)(void *__return_ptr, void, void);
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  char v33;
  BOOL v34;
  void v35[2];
  int v36;
  void *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  if (a3 > 1u)
  {
    sub_1000353E0();
    int v4 = v3;
    HTTPHeaders.subscript.getter();
    uint64_t v6 = *(void *)(v5 + 16);
    if (v6)
    {
      uint64_t v36 = v4;
      v35[1] = v5;
      uint64_t v7 = (uint64_t *)(v5 + 56);
      uint64_t v38 = 2;
      while (1)
      {
        uint64_t v9 = *(v7 - 1);
        uint64_t v8 = *v7;
        uint64_t v41 = 0x65736F6C63LL;
        uint64_t v42 = 0xE500000000000000LL;
        __chkstk_darwin(v5);
        v35[-2] = &v41;
        if ((v8 & 0x1000000000000000LL) != 0)
        {
          sub_100023E64(v8);
          unsigned __int8 v16 = 3;
        }

        else if ((v8 & 0x2000000000000000LL) != 0)
        {
          uint64_t v39 = v9;
          uint64_t v40 = v8 & 0xFFFFFFFFFFFFFFLL;
          sub_100023E64(v8);
          sub_10019244C();
          unsigned __int8 v16 = sub_10019023C( v17,  v18,  v19,  v20,  v21,  v22,  (void *(*)(void *__return_ptr, void, void))sub_100034EE8);
        }

        else
        {
          uint64_t v37 = v35;
          if ((v9 & 0x1000000000000000LL) == 0) {
            sub_100192784(v9);
          }
          sub_100023E64(v8);
          sub_10010E4F0();
          sub_10019244C();
          unsigned __int8 v16 = sub_10019023C( v10,  v11,  v12,  v13,  v14,  v15,  (void *(*)(void *__return_ptr, void, void))sub_100034EE8);
        }

        if ((v16 & 0xFE) == 2)
        {
          char v23 = sub_1001923CC();
          uint64_t v24 = sub_10001A420();
          if ((v23 & 1) != 0) {
            goto LABEL_18;
          }
        }

        else
        {
          uint64_t v24 = sub_10001A420();
          if ((v16 & 1) != 0)
          {
LABEL_18:
            uint64_t v5 = sub_10001A420();
            __int128 v34 = 1;
            goto LABEL_19;
          }
        }

        uint64_t v41 = 0x696C612D7065656BLL;
        uint64_t v42 = 0xEA00000000006576LL;
        __chkstk_darwin(v24);
        v35[-2] = &v41;
        sub_10019244C();
        sub_100190178(v25, v26, v27, v28, v29, v30);
        sub_1001926B0();
        if (v32) {
          uint64_t v31 = sub_1001923CC();
        }
        uint64_t v33 = v31;
        uint64_t v5 = sub_10001A420();
        if ((v33 & 1) == 0) {
          goto LABEL_20;
        }
        __int128 v34 = v38 != 2;
LABEL_19:
        uint64_t v38 = v34;
LABEL_20:
        v7 += 4;
        if (!--v6)
        {
          swift_bridgeObjectRelease();
          goto LABEL_24;
        }
      }
    }

    swift_bridgeObjectRelease();
LABEL_24:
    sub_10002A580();
  }

Swift::Void __swiftcall HTTPHeaders.remove(name:)(Swift::String name)
{
  char v2 = sub_10002D0E0();
  uint64_t v3 = sub_100019390();
  if ((v2 & 1) != 0) {
    sub_100192520();
  }
  uint64_t v4 = __chkstk_darwin(v3);
  if (*(void *)(*(void *)v1 + 16LL) < sub_100192804( v4,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10004BCDC))
  {
    __break(1u);
  }

  else
  {
    sub_100033B48();
    sub_1000193B8();
  }

Swift::Void __swiftcall HTTPHeaders.add(contentsOf:)(ASOctaneSupportXPCService::HTTPHeaders contentsOf)
{
  int keepAliveState = contentsOf.keepAliveState;
  swift_bridgeObjectRetain();
  sub_100188F0C();
  if (keepAliveState == 2) {
    sub_100192520();
  }
  sub_10001945C();
}

uint64_t HTTPRequestHead.version.getter(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

void HTTPRequestHead.isKeepAlive.getter(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
}

Swift::Void __swiftcall HTTPHeaders.add(name:value:)(Swift::String name, Swift::String value)
{
  if ((sub_10002ACF8(v7, v8) & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    sub_100019320();
    sub_10003574C();
    sub_10002E88C();
    sub_1001926F0();
    uint64_t v9 = (void *)*v3;
    uint64_t v9[2] = 1LL;
    v9[4] = v4;
    v9[5] = v2;
    v9[6] = v6;
    v9[7] = v5;
    *uint64_t v3 = v9;
    sub_100019320();
    char v10 = sub_100192208();
    sub_100019390();
    if ((v10 & 1) != 0) {
      sub_100192520();
    }
  }

uint64_t sub_100187938(uint64_t a1, uint64_t a2)
{
  BOOL v3 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }

  if (result < *(void *)(v2 + 24) || *(void *)(v2 + 32) < result) {
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_10018795C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v5 = *(void *)(v3 + 32);
  if (v5 < a3 || v4 > a3 || v4 > result || v5 < result)
  {
    __break(1u);
    goto LABEL_28;
  }

  uint64_t v9 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    return result;
  }

  if (a2 < 1)
  {
    if (v9 <= 0 && v9 > a2) {
      return 0LL;
    }
  }

  else if ((v9 & 0x8000000000000000LL) == 0 && v9 < (unint64_t)a2)
  {
    return 0LL;
  }

  BOOL v11 = __OFADD__(result, a2);
  result += a2;
  if (v11) {
    goto LABEL_29;
  }
  if (result < v4 || v5 < result) {
    goto LABEL_30;
  }
  return result;
}

uint64_t sub_1001879D4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0LL;
  uint64_t v4 = a3 - result;
  if (a3 > result)
  {
    while ((unint64_t)(~result + a3) <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (v4 == ++v3) {
        goto LABEL_13;
      }
    }

    __break(1u);
    goto LABEL_32;
  }

  if (a3 < result)
  {
    unint64_t v5 = ~a3 + result;
    if (v5 >= (result ^ 0x8000000000000000LL)) {
      unint64_t v5 = result ^ 0x8000000000000000LL;
    }
    unint64_t v6 = 0x8000000000000000LL;
    if (v5 < 0x8000000000000000LL) {
      unint64_t v6 = v5;
    }
    while ((v5 & 0x8000000000000000LL) == 0)
    {
      if ((result ^ 0x8000000000000000LL) == v6) {
        goto LABEL_34;
      }
      if (v4 == --v3)
      {
LABEL_13:
        if (a2 > 0)
        {
          if ((v3 & 0x8000000000000000LL) == 0) {
            goto LABEL_19;
          }
          goto LABEL_20;
        }

        if (v3 >= 1) {
          goto LABEL_26;
        }
        goto LABEL_24;
      }
    }

    goto LABEL_33;
  }

  if (a2 > 0)
  {
LABEL_19:
    if (v3 >= (unint64_t)a2)
    {
LABEL_20:
      uint64_t v7 = 0LL;
      while ((result ^ 0x7FFFFFFFFFFFFFFFuLL) > a2 - 1)
      {
        if (++v7 >= a2) {
          goto LABEL_30;
        }
      }

void sub_100187AF0(uint64_t a1)
{
}

void sub_100187AFC(uint64_t a1)
{
}

void sub_100187B08(uint64_t a1, uint64_t (*a2)(void))
{
  *uint64_t v3 = v2;
  sub_1000193B8();
}

void sub_100187B5C( void (*a1)(uint64_t *__return_ptr, void *, uint64_t), uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    LOBYTE(sub_100075D08(v7, v8) = 3;
  }

  else
  {
    if ((a4 & 0x2000000000000000LL) != 0)
    {
      uint64_t v6 = HIBYTE(a4) & 0xF;
      v7[0] = a3;
      v7[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v5 = v7;
    }

    else if ((a3 & 0x1000000000000000LL) != 0)
    {
      unint64_t v5 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v6 = a3 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      unint64_t v5 = (void *)sub_10019276C((uint64_t)a1, a2, a3);
    }

    a1(&v8, v5, v6);
  }

  sub_100192678();
}

void HTTPHeaders.subscript.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = v0;
    uint64_t v3 = sub_100023E64(v0);
    uint64_t v96 = (void *)v2;
    BOOL v11 = (uint64_t *)(v2 + 56);
    unint64_t v12 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v14 = *(v11 - 3);
      unint64_t v13 = *(v11 - 2);
      uint64_t v15 = *(v11 - 1);
      uint64_t v16 = *v11;
      if ((v13 & 0x1000000000000000LL) != 0
        || ((v13 & 0x2000000000000000LL) != 0
          ? (v18 = HIBYTE(v13) & 0xF, v97 = *(v11 - 3), v98 = v13 & 0xFFFFFFFFFFFFFFLL, uint64_t v17 = &v97)
          : (v14 & 0x1000000000000000LL) == 0
          ? (uint64_t v17 = (uint64_t *)sub_100192784(*(v11 - 3)))
          : (uint64_t *)(uint64_t v17 = (uint64_t *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 32), v18 = v14 & 0xFFFFFFFFFFFFLL),
            sub_100192538(v17, v18),
            sub_1001926B0(),
            v27))
      {
        uint64_t v3 = sub_100192500(v3, v4, v5, v6, v7, v8, v9, v10);
      }

      if ((v3 & 1) != 0)
      {
        sub_100023E64(v16);
        sub_100077D1C();
        if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
        {
          sub_1001922E4();
          sub_10002EC18();
          unint64_t v12 = v23;
        }

        unint64_t v20 = v12[2];
        unint64_t v19 = v12[3];
        unint64_t v21 = v12;
        if (v20 >= v19 >> 1)
        {
          sub_100192388(v19);
          sub_10002EC18();
          unint64_t v21 = v24;
        }

        off_t v21[2] = v20 + 1;
        unint64_t v12 = v21;
        unint64_t v22 = &v21[2 * v20];
        v22[4] = v15;
        v22[5] = v16;
        sub_10001DC10();
        uint64_t v3 = sub_10001A420();
      }

      v11 += 4;
      --v1;
    }

    while (v1);
    sub_10001EDE8((uint64_t)v96);
  }

  else
  {
    unint64_t v12 = _swiftEmptyArrayStorage;
  }

  uint64_t v25 = v12[2];
  if (!v25)
  {
LABEL_64:
    swift_bridgeObjectRelease();
LABEL_65:
    sub_10002A580();
    return;
  }

  uint64_t v95 = v12;
  Swift::String v26 = String.lowercased()();
  BOOL v27 = v26._countAndFlagsBits == 0x6B6F6F632D746573LL && v26._object == (void *)0xEA00000000006569LL;
  if (v27)
  {
    swift_bridgeObjectRelease();
LABEL_56:
    uint64_t v97 = (uint64_t)_swiftEmptyArrayStorage;
    sub_1000322B4();
    uint64_t v63 = v97;
    char v64 = v95 + 5;
    do
    {
      uint64_t v65 = *(v64 - 1);
      unint64_t v66 = *v64;
      uint64_t v67 = HIBYTE(*v64) & 0xF;
      if ((*v64 & 0x2000000000000000LL) == 0) {
        uint64_t v67 = *(v64 - 1);
      }
      uint64_t v68 = 7LL;
      if (((v66 >> 60) & ((v65 & 0x800000000000000LL) == 0)) != 0) {
        uint64_t v68 = 11LL;
      }
      uint64_t v69 = v68 | (v67 << 16);
      sub_10001DBCC();
      uint64_t v70 = String.subscript.getter(15LL, v69, v65, v66);
      uint64_t v72 = v71;
      uint64_t v74 = v73;
      uint64_t v76 = v75;
      sub_10001EDA0();
      uint64_t v97 = v63;
      unint64_t v77 = *(void *)(v63 + 16);
      if (v77 >= *(void *)(v63 + 24) >> 1)
      {
        sub_1000322B4();
        uint64_t v63 = v97;
      }

      v64 += 2;
      *(void *)(v63 + 16) = v77 + 1;
      uint64_t v78 = (void *)(v63 + 32 * v77);
      v78[4] = v70;
      v78[5] = v72;
      v78[6] = v74;
      v78[7] = v76;
      --v25;
    }

    while (v25);
    goto LABEL_64;
  }

  char v28 = sub_100048720(v26._countAndFlagsBits, (uint64_t)v26._object, 0x6B6F6F632D746573LL, 0xEA00000000006569LL);
  sub_100019390();
  if ((v28 & 1) != 0) {
    goto LABEL_56;
  }
  uint64_t v91 = v95[2];
  if (!v91) {
    goto LABEL_64;
  }
  uint64_t v90 = v95 + 4;
  uint64_t v29 = swift_bridgeObjectRetain();
  uint64_t v30 = 0LL;
  uint64_t v31 = _swiftEmptyArrayStorage;
  while (1)
  {
    uint64_t v96 = v31;
    uint64_t v32 = &v90[2 * v30];
    uint64_t v33 = *v32;
    unint64_t v34 = v32[1];
    uint64_t v97 = 44LL;
    uint64_t v98 = 0xE100000000000000LL;
    __chkstk_darwin(v29);
    Swift::Int v89 = &v97;
    sub_100023E64(v34);
    uint64_t v35 = sub_10018DFF4(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10006E270, (uint64_t)&v87, v33, v34);
    uint64_t v36 = *(void *)(v35 + 16);
    if (v36)
    {
      unint64_t v93 = v34;
      uint64_t v94 = v30;
      uint64_t v97 = (uint64_t)_swiftEmptyArrayStorage;
      sub_1000322B4();
      uint64_t v37 = (void *)v97;
      uint64_t v92 = v35;
      uint64_t v38 = (uint64_t *)(v35 + 56);
      do
      {
        unint64_t v39 = *(v38 - 3);
        unint64_t v40 = *(v38 - 2);
        uint64_t v41 = *(v38 - 1);
        uint64_t v42 = *v38;
        sub_10005231C();
        unint64_t v43 = sub_10018B4F0(v39, v40, v41, v42);
        uint64_t v45 = v44;
        uint64_t v47 = v46;
        uint64_t v49 = v48;
        sub_100023EF4();
        uint64_t v97 = (uint64_t)v37;
        unint64_t v50 = v37[2];
        if (v50 >= v37[3] >> 1)
        {
          sub_1000322B4();
          uint64_t v37 = (void *)v97;
        }

        v37[2] = v50 + 1;
        uint64_t v51 = &v37[4 * v50];
        v51[4] = v43;
        v51[5] = v45;
        v51[6] = v47;
        v51[7] = v49;
        v38 += 4;
        --v36;
      }

      while (v36);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v30 = v94;
    }

    else
    {
      sub_10003561C();
      sub_100019390();
      uint64_t v37 = _swiftEmptyArrayStorage;
    }

    uint64_t v52 = v37[2];
    uint64_t v53 = (uint64_t)v96;
    uint64_t v54 = v96[2];
    if (__OFADD__(v54, v52)) {
      break;
    }
    if (swift_isUniquelyReferenced_nonNull_native(v96) && v54 + v52 <= *(void *)(v53 + 24) >> 1)
    {
      uint64_t v55 = (uint64_t)v95;
      uint64_t v31 = (void *)v53;
    }

    else
    {
      sub_10002ECC0();
      uint64_t v31 = v56;
      uint64_t v55 = (uint64_t)v95;
    }

    if (v37[2])
    {
      uint64_t v57 = v31[2];
      if ((v31[3] >> 1) - v57 < v52) {
        goto LABEL_68;
      }
      unint64_t v58 = (unint64_t)&v31[4 * v57 + 4];
      swift_arrayInitWithCopy(v58);
      if (v52)
      {
        uint64_t v60 = v31[2];
        BOOL v61 = __OFADD__(v60, v52);
        uint64_t v62 = v60 + v52;
        if (v61) {
          goto LABEL_69;
        }
        v31[2] = v62;
      }
    }

    else if (v52)
    {
      goto LABEL_67;
    }

    ++v30;
    uint64_t v29 = sub_10001EDA0();
    if (v30 == v91)
    {
      sub_10001EDE8(v55);
      goto LABEL_65;
    }
  }

  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  sub_100034FD0();
  sub_1000351A8();
  sub_10003502C(v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, (int)v89);
  __break(1u);
}

void sub_100188130(_BYTE *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
}

void sub_100188144(_BYTE *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000LL) == 0)
  {
    if ((a4 & 0x2000000000000000LL) != 0)
    {
      v11[0] = a3;
      v11[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      if ((HIBYTE(a4) & 0xF) == a2 && a2 && ((*a1 ^ a3) & 0xDF) == 0)
      {
        uint64_t v8 = 1LL;
        while (a2 != v8)
        {
          if (v8 >= a2)
          {
            __break(1u);
            goto LABEL_16;
          }

          unsigned __int8 v9 = a1[v8];
          unsigned __int8 v10 = *((_BYTE *)v11 + v8++);
          if (((v10 ^ v9) & 0xDF) != 0) {
            break;
          }
        }
      }
    }

    else
    {
      if ((a3 & 0x1000000000000000LL) != 0)
      {
        uint64_t v6 = (_BYTE *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v7 = a3 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
LABEL_16:
        uint64_t v6 = (_BYTE *)sub_10019276C((uint64_t)a1, a2, a3);
      }

      sub_100081D10(v6, v7, a1, a2, (char *)v11);
    }
  }

  sub_100192678();
}

unint64_t sub_100188228( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a4 & 0x2000000000000000LL) != 0) {
    uint64_t v10 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v30 = v10;
  uint64_t v31 = a3;
  uint64_t v11 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v11) = 1;
  }
  uint64_t v12 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v12 = HIBYTE(a2) & 0xF;
  }
  uint64_t v38 = 4 * v10;
  uint64_t v33 = 4LL << v11;
  unint64_t v34 = v12;
  uint64_t v26 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v27 = a4 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v32 = 4 * v12;
  uint64_t v35 = a1;
  uint64_t v13 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000LL) == 0) {
    LOBYTE(vsub_100019F7C(v0 + 13) = 1;
  }
  uint64_t v14 = 4LL << v13;
  uint64_t v28 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v29 = a2 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v15 = 15LL;
  unint64_t v16 = 15LL;
  while (1)
  {
    unint64_t v17 = v16 >> 14;
    BOOL v18 = v16 >> 14 == v38;
    if (v16 >> 14 == v38)
    {
      unsigned __int8 v19 = 0;
      goto LABEL_29;
    }

    unint64_t result = v16;
    if ((v16 & 0xC) == v33) {
      unint64_t result = sub_100192728(v16, a2, a3, a4, a5, a6, a7, a8, v24, v25, v26, v27, v28, v29, v30, v31);
    }
    unint64_t v21 = result >> 16;
    if (result >> 16 >= v30) {
      goto LABEL_51;
    }
    if ((a4 & 0x1000000000000000LL) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      unsigned __int8 v19 = result;
    }

    else if ((a4 & 0x2000000000000000LL) != 0)
    {
      uint64_t v36 = v31;
      uint64_t v37 = v27;
      unsigned __int8 v19 = *((_BYTE *)&v36 + v21);
    }

    else
    {
      unint64_t result = v26;
      if ((v31 & 0x1000000000000000LL) == 0) {
        unint64_t result = _StringObject.sharedUTF8.getter(v31);
      }
      unsigned __int8 v19 = *(_BYTE *)(result + v21);
    }

    if ((v16 & 0xC) == v33)
    {
      unint64_t result = sub_100192728(result, a2, a3, a4, a5, a6, a7, a8, v24, v25, v26, v27, v28, v29, v30, v31);
      unint64_t v16 = result;
      if ((a4 & 0x1000000000000000LL) == 0)
      {
LABEL_24:
        unint64_t v16 = (v16 & 0xFFFFFFFFFFFF0000LL) + 65540;
        goto LABEL_29;
      }
    }

    else if ((a4 & 0x1000000000000000LL) == 0)
    {
      goto LABEL_24;
    }

    if (v30 <= v16 >> 16) {
      goto LABEL_53;
    }
    unint64_t v16 = String.UTF8View._foreignIndex(after:)(v16, v31, a4);
LABEL_29:
    if (v32 == v15 >> 14) {
      return v18;
    }
    unint64_t result = v15;
    if ((v15 & 0xC) == v14) {
      unint64_t result = sub_100192650( v15,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v24,  v25,  v26,  v27,  v28,  v29,  v30,  v31,  v32,  v33,  v34,  v35);
    }
    unint64_t v22 = result >> 16;
    if (result >> 16 >= v34) {
      break;
    }
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      unsigned __int8 v23 = result;
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      uint64_t v36 = v35;
      uint64_t v37 = v29;
      unsigned __int8 v23 = *((_BYTE *)&v36 + v22);
    }

    else
    {
      unint64_t result = v28;
      if ((v35 & 0x1000000000000000LL) == 0) {
        unint64_t result = _StringObject.sharedUTF8.getter(v35);
      }
      unsigned __int8 v23 = *(_BYTE *)(result + v22);
    }

    if ((v15 & 0xC) == v14)
    {
      unint64_t result = sub_100192650( result,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  v24,  v25,  v26,  v27,  v28,  v29,  v30,  v31,  v32,  v33,  v34,  v35);
      unint64_t v15 = result;
      if ((a2 & 0x1000000000000000LL) == 0)
      {
LABEL_41:
        unint64_t v15 = (v15 & 0xFFFFFFFFFFFF0000LL) + 65540;
        goto LABEL_46;
      }
    }

    else if ((a2 & 0x1000000000000000LL) == 0)
    {
      goto LABEL_41;
    }

    if (v34 <= v15 >> 16) {
      goto LABEL_52;
    }
    unint64_t v15 = String.UTF8View._foreignIndex(after:)(v15, v35, a2);
LABEL_46:
    if (v17 == v38 || ((v23 ^ v19) & 0xDF) != 0) {
      return 0LL;
    }
  }

  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

unint64_t sub_1001884F8( unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v9 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000LL) == 0) {
    LOBYTE(v9) = 1;
  }
  uint64_t v10 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v10 = HIBYTE(a2) & 0xF;
  }
  uint64_t v23 = 4LL << v9;
  unint64_t v28 = v10;
  uint64_t v26 = 4 * v10;
  unint64_t v30 = a1;
  uint64_t v11 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000LL) == 0) {
    LOBYTE(v11) = 1;
  }
  uint64_t v12 = 4LL << v11;
  uint64_t v21 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a2 & 0xFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v13 = 15LL;
  unint64_t v24 = a3;
  while (1)
  {
    unint64_t v14 = a3 ^ a4;
    if ((a3 ^ a4) >= 0x4000)
    {
      unint64_t result = Substring.UTF8View.subscript.getter(a3, v24, a4, a5, a6);
      int v15 = result;
      if ((a3 & 0xC) == v23)
      {
        unint64_t result = sub_1000CF8B0(a3, a5, a6);
        a3 = result;
      }

      if ((a6 & 0x1000000000000000LL) != 0)
      {
        if (v20 <= a3 >> 16) {
          goto LABEL_42;
        }
        a3 = String.UTF8View._foreignIndex(after:)(a3, a5, a6);
      }

      else
      {
        a3 = (a3 & 0xFFFFFFFFFFFF0000LL) + 65540;
      }

      if (v26 == v13 >> 14) {
        goto LABEL_37;
      }
    }

    else
    {
      if (v26 == v13 >> 14)
      {
        uint64_t v19 = 1LL;
        goto LABEL_38;
      }

      int v15 = 0;
    }

    unint64_t result = v13;
    if ((v13 & 0xC) == v12) {
      unint64_t result = sub_1000CF8B0(v13, v30, a2);
    }
    unint64_t v17 = result >> 16;
    if (result >> 16 >= v28) {
      break;
    }
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      int v18 = result;
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      v29[0] = v30;
      v29[1] = v22;
      int v18 = *((unsigned __int8 *)v29 + v17);
    }

    else
    {
      unint64_t result = v21;
      if ((v30 & 0x1000000000000000LL) == 0) {
        unint64_t result = _StringObject.sharedUTF8.getter(v30);
      }
      int v18 = *(unsigned __int8 *)(result + v17);
    }

    if ((v13 & 0xC) == v12)
    {
      unint64_t result = sub_1000CF8B0(v13, v30, a2);
      unint64_t v13 = result;
      if ((a2 & 0x1000000000000000LL) != 0)
      {
LABEL_30:
        if (v28 <= v13 >> 16) {
          goto LABEL_41;
        }
        unint64_t v13 = String.UTF8View._foreignIndex(after:)(v13, v30, a2);
        goto LABEL_32;
      }
    }

    else if ((a2 & 0x1000000000000000LL) != 0)
    {
      goto LABEL_30;
    }

    unint64_t v13 = (v13 & 0xFFFFFFFFFFFF0000LL) + 65540;
LABEL_32:
    if (v14 < 0x4000 || ((v18 ^ v15) & 0xDF) != 0)
    {
LABEL_37:
      uint64_t v19 = 0LL;
LABEL_38:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v19;
    }
  }

  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void *HTTPHeaders.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v5 = sub_100023E64(a3);
  uint64_t v27 = a3;
  unint64_t v13 = (uint64_t *)(a3 + 56);
  unint64_t v14 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v16 = *(v13 - 3);
    unint64_t v15 = *(v13 - 2);
    uint64_t v17 = *(v13 - 1);
    uint64_t v18 = *v13;
    if ((v15 & 0x1000000000000000LL) != 0
      || ((v15 & 0x2000000000000000LL) != 0
        ? (v20 = HIBYTE(v15) & 0xF, v28[0] = *(v13 - 3), v28[1] = v15 & 0xFFFFFFFFFFFFFFLL, uint64_t v19 = v28)
        : (v16 & 0x1000000000000000LL) == 0
        ? (uint64_t v19 = (_BYTE *)sub_100192784(*(v13 - 3)))
        : (_BYTE *)(uint64_t v19 = (_BYTE *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 32), v20 = v16 & 0xFFFFFFFFFFFFLL),
          sub_100192538(v19, v20),
          sub_1001926B0(),
          v21))
    {
      uint64_t v5 = sub_100192500(v5, v6, v7, v8, v9, v10, v11, v12);
    }

    if ((v5 & 1) != 0)
    {
      sub_100023E64(v18);
      sub_100077D1C();
      if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
      {
        sub_1001922E4();
        sub_10002EC18();
        unint64_t v14 = v24;
      }

      unint64_t v22 = v14[2];
      if (v22 >= v14[3] >> 1)
      {
        sub_10002EC18();
        unint64_t v14 = v25;
      }

      v14[2] = v22 + 1;
      uint64_t v23 = &v14[2 * v22];
      v23[4] = v17;
      v23[5] = v18;
      sub_10001DC10();
      uint64_t v5 = sub_10001A420();
    }

    v13 += 4;
    --v3;
  }

  while (v3);
  sub_10001EDE8(v27);
  return v14;
}

Swift::String_optional __swiftcall HTTPHeaders.first(name:)(Swift::String name)
{
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1;
    object = name._object;
    unint64_t countAndFlagsBits = name._countAndFlagsBits;
    sub_100023E64(v1);
    uint64_t v10 = v3 + 56;
    while (1)
    {
      unint64_t v12 = *(void *)(v10 - 24);
      unint64_t v11 = *(void *)(v10 - 16);
      if ((v11 & 0x1000000000000000LL) != 0
        || ((v11 & 0x2000000000000000LL) != 0
          ? (v14 = HIBYTE(v11) & 0xF, v20[0] = *(void *)(v10 - 24), v20[1] = v11 & 0xFFFFFFFFFFFFFFLL, unint64_t v13 = v20)
          : (v12 & 0x1000000000000000LL) == 0
          ? (unint64_t v13 = (_BYTE *)_StringObject.sharedUTF8.getter(*(void *)(v10 - 24)))
          : (_BYTE *)(unint64_t v13 = (_BYTE *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32), v14 = v12 & 0xFFFFFFFFFFFFLL),
            sub_100192538(v13, v14),
            sub_1001926B0(),
            v16))
      {
        char v15 = sub_100188228(countAndFlagsBits, (unint64_t)object, v12, v11, v6, v7, v8, v9);
      }

      if ((v15 & 1) != 0) {
        break;
      }
      v10 += 32LL;
      if (!--v2)
      {
        sub_10001EDE8(v3);
        goto LABEL_16;
      }
    }

    sub_100023E9C();
    sub_100077D1C();
    sub_10001DC10();
    sub_10001EDE8(v3);
  }

uint64_t sub_100188A08()
{
  return sub_100188D78();
}

void sub_100188A14()
{
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!sub_100192290() || (sub_10019252C(), !(v6 ^ v4 | v5)))
  {
    sub_1001925EC();
    sub_10002F1D4();
    uint64_t v2 = v7;
  }

  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }

  sub_10019222C();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  unint64_t v8 = sub_100192344();
  sub_10018EAE8(v8, v9, v10);
  if (!v3)
  {
LABEL_11:
    sub_100019390();
    *uint64_t v1 = v2;
    sub_10002A3D4();
    return;
  }

  sub_100192514();
  if (!v4)
  {
    *(void *)(v2 + 16) = v11;
    goto LABEL_11;
  }

void sub_100188AAC()
{
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!sub_100192290() || (sub_10019252C(), !(v6 ^ v4 | v5)))
  {
    sub_1001925EC();
    sub_10002ED8C();
    uint64_t v2 = v7;
  }

  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }

  sub_10019222C();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  sub_10018E628();
  if (!v3)
  {
LABEL_11:
    sub_100019390();
    *uint64_t v1 = v2;
    sub_10002A3D4();
    return;
  }

  sub_100192514();
  if (!v4)
  {
    *(void *)(v2 + 16) = v8;
    goto LABEL_11;
  }

#error "100188C28: call analysis failed (funcsize=134)"
uint64_t sub_100188D6C()
{
  return sub_100188D78();
}

uint64_t sub_100188D78()
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v18 = v1;
    }
    else {
      uint64_t v18 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v18);
    sub_10001A3F8();
  }

  else
  {
    uint64_t v5 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v6 = *v0;
  if ((unint64_t)*v0 >> 62)
  {
    if (v6 < 0) {
      uint64_t v19 = *v0;
    }
    else {
      uint64_t v19 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_10003574C();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v19);
    sub_10003561C();
  }

  else
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v8 = v7 + v5;
  if (__OFADD__(v7, v5))
  {
    __break(1u);
    goto LABEL_30;
  }

  uint64_t v6 = *v0;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v0);
  uint64_t *v0 = v6;
  uint64_t v7 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000LL) == 0 && (v6 & 0x4000000000000000LL) == 0)
  {
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8LL;
    if (v8 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_16;
    }
    uint64_t v7 = 1LL;
  }

  uint64_t v11 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    if (v11 <= v8) {
      uint64_t v11 = v8;
    }
    sub_10003574C();
    uint64_t v6 = sub_100192748(v7, v11);
    swift_bridgeObjectRelease();
    uint64_t *v0 = v6;
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8LL;
LABEL_16:
    uint64_t result = v3(v10 + 8LL * *(void *)(v10 + 16) + 32, (*(void *)(v10 + 24) >> 1) - *(void *)(v10 + 16), v4);
    if (v13 >= v5) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    if (v6 < 0) {
      uint64_t v20 = v6;
    }
    else {
      uint64_t v20 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_10003574C();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v20);
    sub_10003561C();
  }

  if (v13 < 1) {
    goto LABEL_20;
  }
  uint64_t v14 = *(void *)((*v0 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  BOOL v15 = __OFADD__(v14, v13);
  uint64_t v16 = v14 + v13;
  if (!v15)
  {
    *(void *)((*v0 & 0xFFFFFFFFFFFFFF8LL) + 0x1sub_10019B2E8(v0, 0) = v16;
LABEL_20:
    uint64_t v17 = swift_bridgeObjectRelease();
    return specialized Array._endMutation()(v17);
  }

  __break(1u);
  return result;
}

void sub_100188F0C()
{
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!sub_100192290() || (sub_10019252C(), !(v6 ^ v4 | v5)))
  {
    sub_1001925EC();
    uint64_t v2 = sub_10002F128(v7, v8, v9, v10);
  }

  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }

  sub_10019222C();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v11 = sub_100192344();
  sub_10018EA58(v11, v12);
  if (!v3)
  {
LABEL_11:
    sub_100019390();
    *uint64_t v1 = v2;
    sub_10002A3D4();
    return;
  }

  sub_100192514();
  if (!v4)
  {
    *(void *)(v2 + 16) = v13;
    goto LABEL_11;
  }

void sub_100188FA0()
{
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!sub_100192290() || (sub_10019252C(), !(v6 ^ v4 | v5)))
  {
    sub_1001925EC();
    sub_10002EC18();
    uint64_t v2 = v7;
  }

  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }

  sub_10019222C();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  sub_100192344();
  sub_10018F478();
  if (!v3)
  {
LABEL_11:
    sub_100019390();
    *uint64_t v1 = v2;
    sub_10002A3D4();
    return;
  }

  sub_100192514();
  if (!v4)
  {
    *(void *)(v2 + 16) = v8;
    goto LABEL_11;
  }

void sub_100189034()
{
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!sub_100192290() || (sub_10019252C(), !(v6 ^ v4 | v5)))
  {
    sub_100192754();
    uint64_t v2 = v7;
  }

  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }

  sub_10019222C();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  sub_100192344();
  sub_10018F11C();
  if (!v3)
  {
LABEL_11:
    sub_100019390();
    *uint64_t v1 = v2;
    sub_10002A3D4();
    return;
  }

  sub_100192514();
  if (!v4)
  {
    *(void *)(v2 + 16) = v8;
    goto LABEL_11;
  }

void sub_1001890C4()
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  if ((v2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v5 = String.UTF8View._foreignCount()();
  }

  else if ((v2 & 0x2000000000000000LL) != 0)
  {
    Swift::Int v5 = HIBYTE(v2) & 0xF;
  }

  else
  {
    Swift::Int v5 = v1 & 0xFFFFFFFFFFFFLL;
  }

  uint64_t v6 = *v0;
  uint64_t v7 = *(void *)(*v0 + 16LL);
  if (__OFADD__(v7, v5))
  {
    __break(1u);
  }

  else
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
    void *v0 = v6;
    if (!isUniquelyReferenced_nonNull_native || (Swift::Int v9 = *(void *)(v6 + 24) >> 1, v9 < v7 + v5))
    {
      sub_100192754();
      uint64_t v6 = v10;
      void *v0 = v10;
      Swift::Int v9 = *(void *)(v10 + 24) >> 1;
    }

    uint64_t v11 = *(void *)(v6 + 16);
    Swift::Int v12 = v9 - v11;
    uint64_t v13 = v6 + v11 + 32;
    sub_100019320();
    uint64_t v14 = _StringGuts.copyUTF8(into:)(v13, v12, v4, v3);
    if ((v15 & 1) != 0) {
      goto LABEL_19;
    }
    uint64_t v16 = v14;
    sub_10001EDE8(v3);
    if (v16 >= v5)
    {
      if (v16 < 1)
      {
LABEL_14:
        void *v0 = v6;
        sub_100023E74();
        return;
      }

      uint64_t v17 = *(void *)(v6 + 16);
      BOOL v18 = __OFADD__(v17, v16);
      uint64_t v19 = v17 + v16;
      if (!v18)
      {
        *(void *)(v6 + 16) = v19;
        goto LABEL_14;
      }

      goto LABEL_18;
    }
  }

  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
}

void sub_1001891C8()
{
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!sub_100192290() || (sub_10019252C(), !(v6 ^ v4 | v5)))
  {
    sub_1001925EC();
    sub_10002EB70();
    uint64_t v2 = v7;
  }

  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }

  sub_10019222C();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  sub_100192344();
  sub_10018E4D8();
  if (!v3)
  {
LABEL_11:
    sub_100019390();
    *uint64_t v1 = v2;
    sub_10002A3D4();
    return;
  }

  sub_100192514();
  if (!v4)
  {
    *(void *)(v2 + 16) = v8;
    goto LABEL_11;
  }

void HTTPRequestHead.uri.getter()
{
}

void HTTPRequestHead.method.getter()
{
  uint64_t v0 = sub_10007F0D0();
  sub_10005A6F0(v0, v1);
  sub_10007F0D0();
  sub_10001945C();
}

void HTTPMethod.rawValue.getter(uint64_t a1, unint64_t a2)
{
}

ASOctaneSupportXPCService::HTTPVersion __swiftcall HTTPVersion.init(major:minor:)(Swift::Int major, Swift::Int minor)
{
  if (major < 0) {
    goto LABEL_6;
  }
  if ((unint64_t)major >= 0x10000)
  {
LABEL_7:
    sub_100034FD0();
    sub_100035144();
    goto LABEL_8;
  }

  if (minor < 0)
  {
LABEL_6:
    sub_100034FD0();
    sub_100035154();
LABEL_8:
    ASOctaneSupportXPCService::HTTPVersion v2 = (ASOctaneSupportXPCService::HTTPVersion)sub_100035124(v3, v4, v5, v6, v7, v8, v9);
    __break(1u);
    return v2;
  }

  return (ASOctaneSupportXPCService::HTTPVersion)(minor | ((_DWORD)major << 16));
}

Swift::Bool __swiftcall HTTPHeaders.contains(name:)(Swift::String name)
{
  uint64_t v4 = *(void *)(v1 + 16);
  if (!v4) {
    return 0;
  }
  sub_100192810();
  for (uint64_t i = (unint64_t *)(v5 + 40); ; i += 4)
  {
    unint64_t v7 = *(i - 1);
    unint64_t v8 = *i;
    if ((*i & 0x1000000000000000LL) != 0
      || ((v8 & 0x2000000000000000LL) != 0
        ? (v10 = HIBYTE(v8) & 0xF, v20[0] = *(i - 1), v20[1] = v8 & 0xFFFFFFFFFFFFFFLL, uint64_t v9 = v20)
        : (v7 & 0x1000000000000000LL) == 0
        ? (uint64_t v9 = (_BYTE *)_StringObject.sharedUTF8.getter(*(i - 1)))
        : (_BYTE *)(uint64_t v9 = (_BYTE *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32), v10 = v7 & 0xFFFFFFFFFFFFLL),
          sub_100188144(v9, v10, v3, v2),
          sub_1001926B0(),
          v12))
    {
      unint64_t v13 = sub_10010E4F0();
      char v11 = sub_100188228(v13, v14, v7, v8, v15, v16, v17, v18);
    }

    if ((v11 & 1) != 0) {
      break;
    }
    if (!--v4) {
      return 0;
    }
  }

  return 1;
}

uint64_t HTTPVersion.major.getter(unsigned int a1)
{
  return HIWORD(a1);
}

uint64_t HTTPVersion.minor.getter(uint64_t result)
{
  return (unsigned __int16)result;
}

unint64_t HTTPResponseStatus.mayHaveResponseBody.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >= 0x3C) {
    return (unint64_t)(HTTPResponseStatus.code.getter(a1, a2, a3) - 200) < 0xFFFFFFFFFFFFFF9CLL;
  }
  else {
    return (0xFFFFFFFFFFFFF78uLL >> a3) & 1;
  }
}

uint64_t HTTPResponseStatus.code.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 <= 0x3B) {
    return qword_1002098A0[a3];
  }
  return result;
}

void HTTPResponseStatus.reasonPhrase.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  switch(a3)
  {
    case 1uLL:
    case 0x21uLL:
    case 0x28uLL:
    case 0x34uLL:
      sub_1001923F4();
      break;
    case 6uLL:
    case 0x1CuLL:
    case 0x25uLL:
    case 0x2DuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x36uLL:
      sub_100192260();
      break;
    case 0xEuLL:
    case 0x22uLL:
    case 0x2BuLL:
    case 0x2EuLL:
      sub_100192404();
      break;
    case 0x11uLL:
    case 0x19uLL:
    case 0x1BuLL:
    case 0x32uLL:
    case 0x3AuLL:
      sub_1001926BC();
      break;
    case 0x13uLL:
    case 0x14uLL:
    case 0x1AuLL:
    case 0x26uLL:
      sub_1001923E4();
      break;
    default:
      break;
  }

  sub_100190134(a1, a2, a3);
  sub_10007F0D0();
  sub_10001945C();
}

uint64_t sub_100189D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  *(void *)(v5 + 3sub_100019F7C(v0 + 2) = a3;
  *(void *)(v5 + 4sub_10019B2E8(v0, 0) = a4;
  *(_DWORD *)(v5 + 48) = a5;
  return v5;
}

uint64_t sub_100189D3C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  int v5 = *(_DWORD *)(v0 + 48);
  uint64_t v6 = swift_allocObject(*(void *)v0, 52LL, 7LL);
  *(void *)(v6 + 16) = v1;
  *(void *)(v6 + 24) = v2;
  *(void *)(v6 + 3sub_100019F7C(v0 + 2) = v4;
  *(void *)(v6 + 4sub_10019B2E8(v0, 0) = v3;
  *(_DWORD *)(v6 + 48) = v5;
  sub_10005A6F0(v1, v2);
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t sub_100189DA8()
{
  return v0;
}

uint64_t sub_100189DCC()
{
  uint64_t v0 = sub_100189DA8();
  return swift_deallocClassInstance(v0, 52LL, 7LL);
}

uint64_t HTTPRequestHead.headers.getter(uint64_t a1, uint64_t a2)
{
  return sub_100075D08(a1, a2);
}

void HTTPRequestHead.headers.setter(uint64_t a1, char a2)
{
  *(void *)(v2 + 8) = a1;
  *(_BYTE *)(v2 + 16) = a2;
  sub_1000193B8();
}

uint64_t HTTPRequestHead.method.setter()
{
  if ((sub_10019246C() & 1) == 0)
  {
    uint64_t v0 = sub_100192438();
    sub_10019229C(v0);
  }

  uint64_t v1 = sub_1001926E0();
  return sub_100192440(v1, v2);
}

void HTTPRequestHead.method.modify(uint64_t *a1)
{
  a1[2] = v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 16LL);
  unint64_t v4 = *(void *)(*(void *)v1 + 24LL);
  *a1 = v3;
  a1[1] = v4;
  sub_10005A6F0(v3, v4);
  sub_10001945C();
}

uint64_t sub_100189EA8(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    uint64_t v2 = sub_1000706C8();
    sub_10005A6F0(v2, v3);
    if ((sub_1001407A8() & 1) == 0)
    {
      uint64_t v4 = sub_100192438();
      sub_10019229C(v4);
    }

    uint64_t v5 = sub_1001926E0();
    sub_10005A704(v5, v6);
    uint64_t v7 = sub_1000706C8();
  }

  else
  {
    if ((sub_1001407A8() & 1) == 0)
    {
      uint64_t v9 = sub_100192438();
      sub_10019229C(v9);
    }

    uint64_t v7 = sub_1001926E0();
  }

  return sub_100192440(v7, v8);
}

uint64_t HTTPRequestHead.uri.setter(uint64_t a1, uint64_t a2)
{
  if ((sub_10019246C() & 1) == 0)
  {
    uint64_t v5 = sub_100192438();
    sub_10019229C(v5);
  }

  uint64_t v6 = *v2;
  uint64_t v7 = *(void *)(*v2 + 40);
  *(void *)(v6 + 3sub_100019F7C(v0 + 2) = v3;
  *(void *)(v6 + 4sub_10019B2E8(v0, 0) = a2;
  return sub_10009B43C(v7);
}

void HTTPRequestHead.uri.modify(void *a1)
{
  a1[2] = v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 40LL);
  *a1 = *(void *)(*(void *)v1 + 32LL);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  sub_10010E4F0();
  sub_10001945C();
}

uint64_t sub_100189F7C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = (uint64_t *)a1[2];
  if ((a2 & 1) != 0)
  {
    sub_100019320();
    if ((sub_1001407A8() & 1) == 0)
    {
      uint64_t v5 = sub_100192438();
      sub_10019229C(v5);
    }

    uint64_t v6 = *v4;
    uint64_t v7 = *(void *)(*v4 + 40);
    *(void *)(v6 + 3sub_100019F7C(v0 + 2) = v3;
    *(void *)(v6 + 4sub_10019B2E8(v0, 0) = v2;
    sub_100019390();
    return sub_10009B43C(v7);
  }

  else
  {
    if ((sub_1001407A8() & 1) == 0)
    {
      uint64_t v9 = sub_100192438();
      sub_10019229C(v9);
    }

    uint64_t v10 = *v4;
    uint64_t v11 = *(void *)(*v4 + 40);
    *(void *)(v10 + 3sub_100019F7C(v0 + 2) = v3;
    *(void *)(v10 + 4sub_10019B2E8(v0, 0) = v2;
    return sub_10009B43C(v11);
  }

void HTTPRequestHead.version.setter()
{
  if ((sub_1001927F8() & 1) == 0)
  {
    *(void *)uint64_t v1 = sub_100189D3C();
    sub_100024F0C();
  }

  *(_DWORD *)(*(void *)v1 + 48LL) = v0;
  sub_1000193B8();
}

void (*HTTPRequestHead.version.modify(uint64_t a1))(uint64_t **a1)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)v1 + 48LL);
  return sub_10018A044;
}

void sub_10018A044(uint64_t **a1)
{
  uint64_t v1 = *a1;
  __int16 v2 = *((_WORD *)a1 + 5);
  __int16 v3 = *((_WORD *)a1 + 4);
  if ((swift_isUniquelyReferenced_nonNull_native(**a1) & 1) == 0)
  {
    *uint64_t v1 = sub_100189D3C();
    sub_100024F0C();
  }

  uint64_t v4 = *v1;
  *(_WORD *)(v4 + 48) = v3;
  *(_WORD *)(v4 + 5sub_10019B2E8(v0, 0) = v2;
  sub_1000193B8();
}

void HTTPRequestHead.init(version:method:uri:headers:)()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  int v9 = v8;
  uint64_t v10 = type metadata accessor for HTTPRequestHead._Storage();
  uint64_t v11 = sub_100192798(v10);
  *(void *)(v11 + 16) = v7;
  *(void *)(v11 + 24) = v5;
  *(void *)(v11 + 3sub_100019F7C(v0 + 2) = v3;
  *(void *)(v11 + 4sub_10019B2E8(v0, 0) = v1;
  *(_DWORD *)(v11 + 48) = v9;
  sub_100023E74();
}

uint64_t HTTPRequestHead.init(version:method:uri:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for HTTPRequestHead._Storage();
  uint64_t result = sub_100192798(v10);
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = a3;
  *(void *)(result + 3sub_100019F7C(v0 + 2) = a4;
  *(void *)(result + 4sub_10019B2E8(v0, 0) = a5;
  *(_DWORD *)(result + 48) = a1;
  return result;
}

uint64_t static HTTPHeaders.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v137 = a3;
  uint64_t v152 = *(void *)(a1 + 16);
  if (v152 != *(void *)(a3 + 16)) {
    return 0LL;
  }
  uint64_t v133 = a1;
  sub_10018B140(a1);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 + 16);
  if (v5)
  {
    sub_1001923B4();
    uint64_t v6 = v154;
    uint64_t v7 = v4 + 40;
    do
    {
      Swift::String v8 = String.lowercased()();
      uint64_t v154 = v6;
      unint64_t v9 = v6[2];
      if (v9 >= v6[3] >> 1)
      {
        sub_100192370();
        uint64_t v6 = v154;
      }

      v7 += 16LL;
      _OWORD v6[2] = v9 + 1;
      *(Swift::String *)&v6[2 * v9 + 4] = v8;
      --v5;
    }

    while (v5);
    sub_10001A3F8();
  }

  else
  {
    sub_10001A3F8();
    uint64_t v6 = _swiftEmptyArrayStorage;
  }

  uint64_t v10 = sub_100186F84((uint64_t)v6);
  sub_10018B140(v137);
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 + 16);
  if (v13)
  {
    sub_1001923B4();
    unint64_t v14 = v154;
    uint64_t v15 = v12 + 40;
    uint64_t v16 = v133;
    do
    {
      Swift::String v17 = String.lowercased()();
      uint64_t v154 = v14;
      unint64_t v18 = v14[2];
      if (v18 >= v14[3] >> 1)
      {
        sub_100192370();
        unint64_t v14 = v154;
      }

      v15 += 16LL;
      v14[2] = v18 + 1;
      *(Swift::String *)&v14[2 * v18 + 4] = v17;
      --v13;
    }

    while (v13);
    sub_10001A3F8();
  }

  else
  {
    sub_10001A3F8();
    unint64_t v14 = _swiftEmptyArrayStorage;
    uint64_t v16 = v133;
  }

  uint64_t v19 = sub_100186F84((uint64_t)v14);
  char v20 = sub_10018BCEC(v10, v19);
  sub_100019390();
  if ((v20 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  uint64_t v21 = 0LL;
  uint64_t v129 = v10 + 56;
  uint64_t v22 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v23 = -1LL;
  if (v22 < 64) {
    uint64_t v23 = ~(-1LL << v22);
  }
  unint64_t v24 = v23 & *(void *)(v10 + 56);
  int64_t v130 = (unint64_t)(v22 + 63) >> 6;
  uint64_t v148 = v137 + 32;
  uint64_t v149 = v16 + 32;
  uint64_t v141 = (char *)&v154 + 1;
  uint64_t v136 = v153;
  uint64_t v132 = v10;
  if (!v24) {
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v134 = (v24 - 1) & v24;
  uint64_t v135 = v21;
  for (unint64_t i = __clz(__rbit64(v24)) | (v21 << 6); ; unint64_t i = __clz(__rbit64(v28)) + (v27 << 6))
  {
    unint64_t v30 = (unint64_t *)(*(void *)(v10 + 48) + 16 * i);
    unint64_t v31 = v30[1];
    uint64_t v32 = HIBYTE(v31) & 0xF;
    uint64_t v150 = v32;
    unint64_t v151 = *v30;
    if (v152)
    {
      uint64_t v144 = (v31 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v146 = v31 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v142 = *v30 & 0xFFFFFFFFFFFFLL;
      HIDWORD(v14sub_10019B2E8(v0, 0) = *v30;
      sub_100023E64(v16);
      uint64_t v33 = sub_10001DBCC();
      unint64_t v41 = v151;
      uint64_t v42 = 0LL;
      uint64_t v138 = v32 - 1;
      unint64_t v43 = _swiftEmptyArrayStorage;
      int v44 = 223;
      while (1)
      {
        uint64_t v45 = (unint64_t *)(v149 + 32 * v42);
        unint64_t v47 = *v45;
        unint64_t v46 = v45[1];
        unint64_t v48 = v45[2];
        uint64_t v49 = v45[3];
        if ((v46 & 0x1000000000000000LL) != 0) {
          goto LABEL_87;
        }
        if ((v46 & 0x2000000000000000LL) == 0) {
          break;
        }
        uint64_t v154 = (void *)*v45;
        uint64_t v155 = v46 & 0xFFFFFFFFFFFFFFLL;
        if ((v31 & 0x1000000000000000LL) != 0) {
          goto LABEL_87;
        }
        uint64_t v55 = HIBYTE(v46) & 0xF;
        if ((v31 & 0x2000000000000000LL) == 0)
        {
          uint64_t v34 = v142;
          uint64_t v33 = v144;
          if ((v41 & 0x1000000000000000LL) == 0)
          {
            sub_100192354();
            sub_100192460();
          }

          if (v55 != v34)
          {
LABEL_84:
            BOOL v57 = 0;
            goto LABEL_93;
          }

          if (v55)
          {
            sub_100192360();
            if (!v59) {
              goto LABEL_84;
            }
            uint64_t v56 = v55 - 1;
            while (v56)
            {
              sub_100192598();
              if (v58) {
                goto LABEL_86;
              }
            }
          }

          goto LABEL_85;
        }

        sub_10019283C( v33,  v34,  v35,  v36,  v37,  v38,  v39,  v40,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  (uint64_t)v136,  v137,  v138,  v140,  (uint64_t)v141,  v142,  v144,  v146);
        if (v60) {
          BOOL v57 = 1;
        }
        else {
          BOOL v57 = 0;
        }
        if (v60) {
          BOOL v63 = v61 == 0;
        }
        else {
          BOOL v63 = 1;
        }
        if (!v63)
        {
          uint64_t v64 = v138;
          while (v64)
          {
            sub_100192710();
            if (v65) {
              goto LABEL_84;
            }
          }

          goto LABEL_85;
        }

LABEL_86:
        if ((v57 & 2) != 0) {
          goto LABEL_87;
        }
LABEL_93:
        if (v57) {
          goto LABEL_94;
        }
LABEL_99:
        int v44 = 223;
        unint64_t v41 = v151;
LABEL_100:
        if (++v42 == v152)
        {
          uint64_t v16 = v133;
          sub_10001EDE8(v133);
          uint64_t v10 = v132;
          uint64_t v32 = HIBYTE(v31) & 0xF;
          goto LABEL_103;
        }
      }

      unint64_t v50 = v45[2];
      if ((v47 & 0x1000000000000000LL) != 0)
      {
        uint64_t v51 = (unsigned __int8 *)((v46 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v52 = v47 & 0xFFFFFFFFFFFFLL;
        if ((v31 & 0x1000000000000000LL) != 0) {
          goto LABEL_91;
        }
      }

      else
      {
        _StringObject.sharedUTF8.getter(*v45);
        sub_100192460();
        uint64_t v51 = (unsigned __int8 *)v33;
        uint64_t v52 = v34;
        if ((v31 & 0x1000000000000000LL) != 0)
        {
LABEL_91:
          unint64_t v48 = v50;
LABEL_87:
          uint64_t v33 = sub_100188228(v41, v31, v47, v46, v37, v38, v39, v40);
          if ((v33 & 1) != 0) {
            goto LABEL_94;
          }
          goto LABEL_99;
        }
      }

      if ((v31 & 0x2000000000000000LL) == 0)
      {
        uint64_t v34 = v142;
        uint64_t v33 = v144;
        if ((v41 & 0x1000000000000000LL) == 0)
        {
          sub_100192354();
          sub_100192460();
        }

        if (v52 != v34) {
          goto LABEL_100;
        }
        if (v52 < 0) {
          goto LABEL_200;
        }
        if (v52)
        {
          sub_100192360();
          if (!v59) {
            goto LABEL_100;
          }
          uint64_t v53 = v52 - 1;
          unint64_t v48 = v50;
          while (v53)
          {
            sub_1001925B4();
            if (v54) {
              goto LABEL_100;
            }
          }
        }

        else
        {
          unint64_t v48 = v50;
        }

LABEL_94:
        sub_100023E64(v49);
        sub_10005231C();
        if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
        {
          sub_1001922E4();
          sub_10002EC18();
          unint64_t v43 = v71;
        }

        unint64_t v69 = v43[2];
        unint64_t v68 = v43[3];
        if (v69 >= v68 >> 1)
        {
          sub_100192388(v68);
          sub_10002EC18();
          unint64_t v43 = v72;
        }

        _OWORD v43[2] = v69 + 1;
        uint64_t v70 = &v43[2 * v69];
        v70[4] = v48;
        v70[5] = v49;
        sub_100056ADC();
        uint64_t v33 = sub_100023EF4();
        goto LABEL_99;
      }

      uint64_t v154 = (void *)v41;
      uint64_t v155 = v146;
      BOOL v57 = v52 == v150;
      BOOL v59 = v52 != v150 || v150 == 0;
      if (v59) {
        goto LABEL_68;
      }
      if (((*v51 ^ HIDWORD(v140)) & v44) != 0)
      {
        BOOL v57 = 0;
LABEL_68:
        unint64_t v48 = v50;
        goto LABEL_93;
      }

      uint64_t v66 = v138;
      unint64_t v48 = v50;
      while (v66)
      {
        sub_1001925CC();
        if (v67) {
          goto LABEL_84;
        }
      }

  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
  return result;
}

LABEL_85:
      BOOL v57 = 1;
      goto LABEL_86;
    }

    sub_10001DBCC();
    unint64_t v43 = _swiftEmptyArrayStorage;
LABEL_103:
    uint64_t v154 = v43;
    sub_100023E9C();
    sub_10018F7D8(&v154);
    sub_10001DC10();
    uint64_t v73 = v154;
    if (v152)
    {
      uint64_t v131 = (uint64_t)v154;
      uint64_t v145 = (v31 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v147 = v31 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v143 = v151 & 0xFFFFFFFFFFFFLL;
      HIDWORD(v14sub_10019B2E8(v0, 0) = v151;
      uint64_t v74 = sub_100023E64(v137);
      unint64_t v82 = v151;
      uint64_t v83 = 0LL;
      uint64_t v139 = v32 - 1;
      uint64_t v84 = _swiftEmptyArrayStorage;
      int v85 = 223;
      while (1)
      {
        uint64_t v86 = (unint64_t *)(v148 + 32 * v83);
        unint64_t v87 = *v86;
        unint64_t v88 = v86[1];
        unint64_t v89 = v86[2];
        uint64_t v90 = v86[3];
        if ((v88 & 0x1000000000000000LL) != 0)
        {
LABEL_156:
          uint64_t v74 = sub_100188228(v82, v31, v87, v88, v78, v79, v80, v81);
          if ((v74 & 1) != 0) {
            goto LABEL_162;
          }
          goto LABEL_167;
        }

        if ((v88 & 0x2000000000000000LL) == 0)
        {
          if ((v87 & 0x1000000000000000LL) != 0)
          {
            uint64_t v91 = (unsigned __int8 *)((v88 & 0xFFFFFFFFFFFFFFFLL) + 32);
            uint64_t v92 = v87 & 0xFFFFFFFFFFFFLL;
            if ((v31 & 0x1000000000000000LL) != 0) {
              goto LABEL_156;
            }
          }

          else
          {
            _StringObject.sharedUTF8.getter(*v86);
            sub_100192460();
            uint64_t v91 = (unsigned __int8 *)v74;
            uint64_t v92 = v75;
            if ((v31 & 0x1000000000000000LL) != 0) {
              goto LABEL_156;
            }
          }

          if ((v31 & 0x2000000000000000LL) == 0)
          {
            uint64_t v75 = v143;
            uint64_t v74 = v145;
            if ((v82 & 0x1000000000000000LL) == 0)
            {
              sub_100192354();
              sub_100192460();
            }

            if (v92 != v75) {
              goto LABEL_168;
            }
            if (v92 < 0) {
              goto LABEL_201;
            }
            if (v92)
            {
              sub_100192360();
              if (!v59) {
                goto LABEL_168;
              }
              uint64_t v93 = v92 - 1;
              while (v93)
              {
                sub_1001925B4();
                if (v94) {
                  goto LABEL_168;
                }
              }
            }

LABEL_162:
            sub_100023E64(v90);
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native(v84) & 1) == 0)
            {
              sub_1001922E4();
              sub_10002EC18();
              uint64_t v84 = v111;
            }

            unint64_t v109 = v84[2];
            unint64_t v108 = v84[3];
            if (v109 >= v108 >> 1)
            {
              sub_100192388(v108);
              sub_10002EC18();
              uint64_t v84 = v112;
            }

            v84[2] = v109 + 1;
            unint64_t v110 = &v84[2 * v109];
            v110[4] = v89;
            v110[5] = v90;
            swift_bridgeObjectRelease();
            uint64_t v74 = sub_100056ADC();
            goto LABEL_167;
          }

          uint64_t v154 = (void *)v82;
          uint64_t v155 = v147;
          BOOL v97 = v92 == v150;
          if (v92 != v150 || v150 == 0) {
            goto LABEL_155;
          }
          if (((*v91 ^ HIDWORD(v140)) & v85) != 0) {
            goto LABEL_153;
          }
          uint64_t v100 = v139;
          while (v100)
          {
            sub_1001925CC();
            if (v101) {
              goto LABEL_153;
            }
          }

          goto LABEL_154;
        }

        uint64_t v154 = (void *)*v86;
        uint64_t v155 = v88 & 0xFFFFFFFFFFFFFFLL;
        if ((v31 & 0x1000000000000000LL) != 0) {
          goto LABEL_156;
        }
        uint64_t v95 = HIBYTE(v88) & 0xF;
        if ((v31 & 0x2000000000000000LL) == 0) {
          break;
        }
        sub_10019283C( v74,  v75,  v76,  v77,  v78,  v79,  v80,  v81,  v129,  v130,  v131,  v132,  v133,  v134,  v135,  (uint64_t)v136,  v137,  v139,  v140,  (uint64_t)v141,  v143,  v145,  v147);
        if (v102) {
          BOOL v97 = 1;
        }
        else {
          BOOL v97 = 0;
        }
        if (v102) {
          BOOL v105 = v103 == 0;
        }
        else {
          BOOL v105 = 1;
        }
        if (!v105)
        {
          uint64_t v106 = v139;
          while (v106)
          {
            sub_100192710();
            if (v107) {
              goto LABEL_153;
            }
          }

LABEL_154:
          BOOL v97 = 1;
        }

LABEL_155:
        if ((v97 & 2) != 0) {
          goto LABEL_156;
        }
LABEL_161:
        if (v97) {
          goto LABEL_162;
        }
LABEL_167:
        int v85 = 223;
        unint64_t v82 = v151;
LABEL_168:
        if (++v83 == v152)
        {
          sub_10001EDA0();
          sub_10001EDA0();
          uint64_t v10 = v132;
          uint64_t v16 = v133;
          uint64_t v73 = (void *)v131;
          goto LABEL_171;
        }
      }

      uint64_t v75 = v143;
      uint64_t v74 = v145;
      if ((v82 & 0x1000000000000000LL) == 0)
      {
        sub_100192354();
        sub_100192460();
      }

      if (v95 != v75)
      {
LABEL_153:
        BOOL v97 = 0;
        goto LABEL_161;
      }

      if (v95)
      {
        sub_100192360();
        if (!v59) {
          goto LABEL_153;
        }
        uint64_t v96 = v95 - 1;
        while (v96)
        {
          sub_100192598();
          if (v98) {
            goto LABEL_155;
          }
        }
      }

      goto LABEL_154;
    }

    uint64_t v84 = _swiftEmptyArrayStorage;
LABEL_171:
    sub_10001EDA0();
    uint64_t v154 = v84;
    sub_10005231C();
    sub_10018F7D8(&v154);
    sub_100023EF4();
    uint64_t v113 = v154;
    unint64_t v114 = v73[2];
    if (v114 != v154[2])
    {
LABEL_196:
      swift_release(v73);
      sub_100024F0C();
      swift_release(v10);
      return 0LL;
    }

    if (v114)
    {
      unint64_t v115 = v73;
      if (v73 == v154) {
        goto LABEL_189;
      }
      uint64_t v116 = v73[4];
      uint64_t v117 = v73[5];
      uint64_t v118 = v154[4];
      uint64_t v119 = v154[5];
      BOOL v120 = v116 == v118 && v117 == v119;
      if (!v120 && (sub_100048720(v116, v117, v118, v119) & 1) == 0) {
        goto LABEL_196;
      }
      if (v114 != 1) {
        break;
      }
    }

LABEL_188:
    unint64_t v115 = v113;
LABEL_189:
    swift_release(v73);
    swift_release(v115);
    unint64_t v24 = v134;
    uint64_t v21 = v135;
    if (v134) {
      goto LABEL_20;
    }
LABEL_21:
    BOOL v26 = __OFADD__(v21, 1LL);
    int64_t v27 = v21 + 1;
    if (v26) {
      goto LABEL_202;
    }
    if (v27 >= v130)
    {
LABEL_198:
      swift_release(v10);
      return 1LL;
    }

    unint64_t v28 = *(void *)(v129 + 8 * v27);
    if (!v28)
    {
      int64_t v29 = v27 + 1;
      if (v27 + 1 >= v130) {
        goto LABEL_198;
      }
      unint64_t v28 = *(void *)(v129 + 8 * v29);
      if (!v28)
      {
        int64_t v29 = v27 + 2;
        if (v27 + 2 >= v130) {
          goto LABEL_198;
        }
        unint64_t v28 = *(void *)(v129 + 8 * v29);
        if (!v28)
        {
          int64_t v29 = v27 + 3;
          if (v27 + 3 >= v130) {
            goto LABEL_198;
          }
          unint64_t v28 = *(void *)(v129 + 8 * v29);
          if (!v28)
          {
            while (1)
            {
              int64_t v27 = v29 + 1;
              if (__OFADD__(v29, 1LL)) {
                goto LABEL_203;
              }
              if (v27 >= v130) {
                goto LABEL_198;
              }
              unint64_t v28 = *(void *)(v129 + 8 * v27);
              ++v29;
              if (v28) {
                goto LABEL_31;
              }
            }
          }
        }
      }

      int64_t v27 = v29;
    }

uint64_t sub_10018AB08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10018B0CC( a1,  a2,  a3,  a4,  (uint64_t (*)(void, void, void, void, void, void))static HTTPRequestHead.== infix(_:_:));
}

void static HTTPPart.__derived_enum_equals(_:_:)()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v53 = v4;
  uint64_t v54 = v5;
  uint64_t v48 = *(void *)(v0 - 8);
  __chkstk_darwin(v4);
  sub_1000227D0();
  unint64_t v46 = v6;
  uint64_t v50 = *(void *)(v7 - 8);
  __chkstk_darwin(v8);
  sub_1000227D0();
  uint64_t v49 = v9;
  v55[0] = v10;
  v55[1] = v11;
  uint64_t v51 = v12;
  _OWORD v55[2] = v12;
  v55[3] = v13;
  uint64_t v47 = v13;
  uint64_t v14 = type metadata accessor for HTTPPart(0LL, (uint64_t)v55);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  unint64_t v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v46 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v46 - v22;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, v14, v14, 0LL, 0LL);
  uint64_t v25 = sub_100192698(TupleTypeMetadata2);
  uint64_t v26 = __chkstk_darwin(v25);
  unint64_t v28 = (uint64_t *)((char *)&v46 + *(int *)(v26 + 48) - v27);
  uint64_t v52 = v15;
  int64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v29((char *)&v46 - v27, v53, v14);
  v29((char *)v28, v54, v14);
  uint64_t v30 = sub_1000706C8();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v30, v31);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      sub_100192494((uint64_t)v18);
      uint64_t v39 = *(void *)v18;
      uint64_t v40 = v18[8];
      if (sub_1001924F4() == 2)
      {
        uint64_t v41 = *v28;
        if (v39)
        {
          if (v41)
          {
            sub_10001FFF0();
            uint64_t v42 = sub_10001DBCC();
            static HTTPHeaders.== infix(_:_:)(v42, v40, v41);
            sub_10001EDE8(v39);
            sub_10001EDE8(v41);
            goto LABEL_16;
          }
        }

        else if (!v41)
        {
          goto LABEL_16;
        }
      }

      sub_10001EDA0();
      goto LABEL_16;
    }

    sub_100192494((uint64_t)v21);
    if (sub_1001924F4() == 1)
    {
      uint64_t v33 = v48;
      uint64_t v34 = v46;
      (*(void (**)(char *, uint64_t *, uint64_t))(v48 + 32))(v46, v28, v1);
      dispatch thunk of static Equatable.== infix(_:_:)(v21, v34, v1, v47);
      uint64_t v35 = *(void (**)(char *, uint64_t))(v33 + 8);
      v35(v34, v1);
      v35(v21, v1);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v48 + 8))(v21, v1);
    }
  }

  else
  {
    uint64_t v37 = v49;
    uint64_t v36 = v50;
    uint64_t v38 = v51;
    sub_100192494((uint64_t)v23);
    if (sub_1001924F4())
    {
      (*(void (**)(char *, uint64_t))(v36 + 8))(v23, v3);
    }

    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(v36 + 32))(v37, v28, v3);
      dispatch thunk of static Equatable.== infix(_:_:)(v23, v37, v3, v38);
      unint64_t v43 = *(void (**)(char *, uint64_t))(v36 + 8);
      v43(v37, v3);
      v43(v23, v3);
    }
  }

void sub_10018AE34()
{
}

uint64_t sub_10018AE44()
{
  return swift_deallocClassInstance(v0, 44LL, 7LL);
}

uint64_t HTTPResponseHead.status.setter()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  if ((sub_10019246C() & 1) == 0)
  {
    uint64_t v6 = *(void *)(*(void *)v0 + 16LL);
    uint64_t v7 = *(void *)(*(void *)v0 + 24LL);
    unint64_t v8 = *(void *)(*(void *)v0 + 32LL);
    int v9 = *(_DWORD *)(*(void *)v0 + 40LL);
    uint64_t v10 = sub_100020008();
    uint64_t v11 = sub_10001ED7C(v10);
    *(void *)(v11 + 16) = v6;
    *(void *)(v11 + 24) = v7;
    *(void *)(v11 + 3sub_100019F7C(v0 + 2) = v8;
    *(_DWORD *)(v11 + 4sub_10019B2E8(v0, 0) = v9;
    *(void *)uint64_t v0 = v11;
    sub_100190134(v6, v7, v8);
    swift_release();
  }

  uint64_t v12 = *(void **)v0;
  uint64_t v13 = *(void *)(*(void *)v0 + 16LL);
  uint64_t v14 = *(void *)(*(void *)v0 + 24LL);
  unint64_t v15 = *(void *)(*(void *)v0 + 32LL);
  v12[2] = v1;
  v12[3] = v5;
  void v12[4] = v3;
  return sub_1001922C4(v13, v14, v15);
}

void HTTPResponseHead.status.modify(uint64_t *a1)
{
  a1[3] = v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 16LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 24LL);
  unint64_t v5 = *(void *)(*(void *)v1 + 32LL);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  sub_100190134(v3, v4, v5);
  sub_10001945C();
}

uint64_t sub_10018AF2C()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  unint64_t v3 = v0[2];
  uint64_t v4 = (void *)v0[3];
  if ((v5 & 1) != 0)
  {
    sub_100190134(*v0, v1, v3);
    if ((swift_isUniquelyReferenced_nonNull_native(*v4) & 1) == 0)
    {
      uint64_t v6 = sub_10019239C();
      uint64_t v7 = sub_10001ED7C(v6);
      sub_1001922F4(v7);
    }

    uint64_t v8 = sub_100192660();
    sub_1001483F4(v8, v9, v10);
    return sub_1001922C4(v2, v1, v3);
  }

  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*v4) & 1) == 0)
    {
      uint64_t v12 = sub_10019239C();
      uint64_t v13 = sub_10001ED7C(v12);
      sub_1001922F4(v13);
    }

    uint64_t v14 = sub_100192660();
    return sub_1001922C4(v14, v15, v16);
  }

void HTTPResponseHead.version.setter()
{
  if ((sub_1001927F8() & 1) == 0)
  {
    uint64_t v2 = *(void *)(*(void *)v1 + 16LL);
    uint64_t v3 = *(void *)(*(void *)v1 + 24LL);
    unint64_t v4 = *(void *)(*(void *)v1 + 32LL);
    int v5 = *(_DWORD *)(*(void *)v1 + 40LL);
    uint64_t v6 = sub_100020008();
    uint64_t v7 = sub_10001ED7C(v6);
    *(void *)(v7 + 16) = v2;
    *(void *)(v7 + 24) = v3;
    *(void *)(v7 + 3sub_100019F7C(v0 + 2) = v4;
    *(_DWORD *)(v7 + 4sub_10019B2E8(v0, 0) = v5;
    *(void *)uint64_t v1 = v7;
    sub_100190134(v2, v3, v4);
    swift_release();
  }

  *(_DWORD *)(*(void *)v1 + 4swift_beginAccess(v2 + 104, &v13, 0LL, 0LL) = v0;
  sub_100023E74();
}

void (*HTTPResponseHead.version.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)v1 + 40LL);
  return sub_10018B03C;
}

void sub_10018B03C()
{
  uint64_t v1 = *v0;
  __int16 v2 = *((_WORD *)v0 + 5);
  __int16 v3 = *((_WORD *)v0 + 4);
  if ((swift_isUniquelyReferenced_nonNull_native(**v0) & 1) == 0)
  {
    uint64_t v4 = *(void *)(*v1 + 16);
    uint64_t v5 = *(void *)(*v1 + 24);
    unint64_t v6 = *(void *)(*v1 + 32);
    int v7 = *(_DWORD *)(*v1 + 40);
    uint64_t v8 = sub_100020008();
    uint64_t v9 = sub_10001ED7C(v8);
    *(void *)(v9 + 16) = v4;
    *(void *)(v9 + 24) = v5;
    *(void *)(v9 + 3sub_100019F7C(v0 + 2) = v6;
    *(_DWORD *)(v9 + 4sub_10019B2E8(v0, 0) = v7;
    *uint64_t v1 = v9;
    sub_100190134(v4, v5, v6);
    swift_release();
  }

  uint64_t v10 = *v1;
  *(_WORD *)(v10 + 4sub_10019B2E8(v0, 0) = v3;
  *(_WORD *)(v10 + 4sub_100019F7C(v0 + 2) = v2;
  sub_100023E74();
}

uint64_t sub_10018B0C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10018B0CC( a1,  a2,  a3,  a4,  (uint64_t (*)(void, void, void, void, void, void))static HTTPResponseHead.== infix(_:_:));
}

uint64_t sub_10018B0CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5( *(void *)a1,  *(void *)(a1 + 8),  *(unsigned __int8 *)(a1 + 16),  *(void *)a2,  *(void *)(a2 + 8),  *(unsigned __int8 *)(a2 + 16));
}

void HTTPHeaders.headers.setter(uint64_t a1)
{
  *uint64_t v1 = a1;
  sub_10001945C();
}

uint64_t HTTPHeaders.description.getter(uint64_t a1)
{
  uint64_t v2 = sub_1000175B0(&qword_1002AA500);
  return Array.description.getter(a1, v2);
}

void sub_10018B140(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_100032050();
    __int16 v3 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v3 - 1);
      uint64_t v4 = *v3;
      unint64_t v6 = _swiftEmptyArrayStorage[2];
      unint64_t v7 = _swiftEmptyArrayStorage[3];
      sub_10001FFF0();
      if (v6 >= v7 >> 1) {
        sub_100032050();
      }
      v3 += 4;
      _swiftEmptyArrayStorage[2] = v6 + 1;
      uint64_t v8 = &_swiftEmptyArrayStorage[2 * v6];
      v8[4] = v5;
      v8[5] = v4;
      --v1;
    }

    while (v1);
    sub_100019390();
  }

  sub_1000356CC();
}

unint64_t HTTPHeaders.add<A>(contentsOf:)()
{
  uint64_t v38 = v1;
  uint64_t v39 = v2;
  __int16 v3 = v0;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v6 - 8);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v13,  v7,  &protocol requirements base descriptor for Sequence,  &associated type descriptor for Sequence.Iterator);
  uint64_t v15 = sub_100192698(AssociatedTypeWitness);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v32 - v16;
  uint64_t v18 = *(void *)(*(void *)v0 + 16LL);
  uint64_t v19 = dispatch thunk of Sequence.underestimatedCount.getter(v7, v5);
  BOOL v20 = __OFADD__(v18, v19);
  unint64_t result = v18 + v19;
  if (!v20)
  {
    sub_100187B08(result, (uint64_t (*)(void))sub_10002F128);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v9, v7);
    dispatch thunk of Sequence.makeIterator()(v7, v5);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v5,  v7,  AssociatedTypeWitness,  &protocol requirements base descriptor for Sequence,  &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    uint64_t v33 = v17;
    dispatch thunk of IteratorProtocol.next()(AssociatedTypeWitness, AssociatedConformanceWitness);
    unint64_t v23 = v35;
    if (!v35) {
      return (*(uint64_t (**)(char *, uint64_t))(v32[1] + 8LL))(v33, AssociatedTypeWitness);
    }
    unint64_t v24 = v34;
    uint64_t v25 = v36;
    uint64_t v26 = v37;
    while (1)
    {
      unint64_t result = sub_10002ACF8(v24, v23);
      if ((result & 1) != 0) {
        break;
      }
      uint64_t v27 = AssociatedTypeWitness;
      sub_100023E9C();
      swift_bridgeObjectRetain();
      sub_10002E88C();
      uint64_t v28 = *(void *)(*(void *)v3 + 16LL);
      sub_10002EA58();
      uint64_t v29 = *(void *)v3;
      *(void *)(v29 + 16) = v28 + 1;
      uint64_t v30 = (void *)(v29 + 32 * v28);
      v30[4] = v24;
      v30[5] = v23;
      v30[6] = v25;
      v30[7] = v26;
      *(void *)__int16 v3 = v29;
      sub_100023E9C();
      sub_100192544();
      char v31 = sub_10002D0E0();
      sub_100056ADC();
      sub_10001EDE8(v23);
      if ((v31 & 1) != 0) {
        v3[8] = 2;
      }
      uint64_t AssociatedTypeWitness = v27;
      dispatch thunk of IteratorProtocol.next()(v27, AssociatedConformanceWitness);
      unint64_t v24 = v34;
      unint64_t v23 = v35;
      uint64_t v25 = v36;
      uint64_t v26 = v37;
      if (!v35) {
        return (*(uint64_t (**)(char *, uint64_t))(v32[1] + 8LL))(v33, AssociatedTypeWitness);
      }
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_10018B430( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v8 = String.UTF8View._foreignCount()();
    if ((a2 & 0x1000000000000000LL) == 0)
    {
LABEL_6:
      if ((a2 & 0x2000000000000000LL) != 0) {
        uint64_t v9 = HIBYTE(a2) & 0xF;
      }
      else {
        uint64_t v9 = a1 & 0xFFFFFFFFFFFFLL;
      }
      goto LABEL_9;
    }
  }

  else
  {
    if ((a6 & 0x2000000000000000LL) != 0) {
      Swift::Int v8 = HIBYTE(a6) & 0xF;
    }
    else {
      Swift::Int v8 = a5 & 0xFFFFFFFFFFFFLL;
    }
    if ((a2 & 0x1000000000000000LL) == 0) {
      goto LABEL_6;
    }
  }

  uint64_t v9 = String.UTF8View._foreignCount()();
LABEL_9:
  if (v8 != v9) {
    return 0LL;
  }
  sub_10001DBCC();
  sub_100019320();
  char v10 = sub_10002D0E0();
  sub_10001EDA0();
  sub_100019390();
  return v10 & 1;
}

unint64_t sub_10018B4F0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  unint64_t v8 = a1 >> 14;
  unint64_t v9 = a2 >> 14;
  swift_bridgeObjectRetain(a4);
  if (v8 == v6 >> 14) {
    goto LABEL_2;
  }
  while (1)
  {
    swift_bridgeObjectRetain(v4);
    uint64_t v11 = Substring.subscript.getter(v7, v7, v6, a3, v4);
    unint64_t v13 = v12;
    swift_bridgeObjectRelease(v4);
    if (v11 == 32 && v13 == 0xE100000000000000LL) {
      goto LABEL_31;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, 32LL, 0xE100000000000000LL, 0LL) & 1) != 0) {
      goto LABEL_9;
    }
    if (v11 == 9 && v13 == 0xE100000000000000LL) {
      goto LABEL_31;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, 9LL, 0xE100000000000000LL, 0LL) & 1) != 0) {
      goto LABEL_9;
    }
    if (v11 == 13 && v13 == 0xE100000000000000LL) {
      goto LABEL_31;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, 13LL, 0xE100000000000000LL, 0LL) & 1) != 0) {
      goto LABEL_9;
    }
    if (v11 == 10 && v13 == 0xE100000000000000LL)
    {
LABEL_31:
      unint64_t v15 = 0xE100000000000000LL;
      goto LABEL_32;
    }

    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, 10LL, 0xE100000000000000LL, 0LL) & 1) != 0)
    {
LABEL_9:
      unint64_t v15 = v13;
LABEL_32:
      swift_bridgeObjectRelease(v15);
      goto LABEL_33;
    }

    if (v11 == 2573 && v13 == 0xE200000000000000LL)
    {
      unint64_t v15 = 0xE200000000000000LL;
      goto LABEL_32;
    }

    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, 2573LL, 0xE200000000000000LL, 0LL);
    swift_bridgeObjectRelease(v13);
    if ((v20 & 1) == 0) {
      goto LABEL_79;
    }
LABEL_33:
    unint64_t v21 = Substring.index(_:offsetBy:limitedBy:)(v7, 1LL, v6, v7, v6, a3, v4);
    if ((v22 & 1) != 0) {
      unint64_t v21 = v6;
    }
    if (v9 < v21 >> 14) {
      break;
    }
    unint64_t v7 = ((uint64_t (*)(void))Substring.subscript.getter)();
    unint64_t v6 = v23;
    a3 = v24;
    uint64_t v26 = v25;
    swift_bridgeObjectRelease(v4);
    uint64_t v4 = v26;
    unint64_t v8 = v7 >> 14;
    unint64_t v9 = v6 >> 14;
    if (v7 >> 14 == v6 >> 14) {
      goto LABEL_2;
    }
  }

  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  unint64_t v8 = v7 >> 14;
  unint64_t v9 = v6 >> 14;
LABEL_2:
  if (v8 != v9)
  {
    while (1)
    {
      swift_bridgeObjectRetain(v4);
      uint64_t v27 = Substring.index(before:)(v6, v7, v6, a3, v4);
      uint64_t v28 = Substring.subscript.getter(v27, v7, v6, a3, v4);
      unint64_t v30 = v29;
      swift_bridgeObjectRelease(v4);
      if (v28 == 32 && v30 == 0xE100000000000000LL) {
        break;
      }
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, 32LL, 0xE100000000000000LL, 0LL) & 1) != 0) {
        goto LABEL_44;
      }
      if (v28 == 9 && v30 == 0xE100000000000000LL) {
        break;
      }
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, 9LL, 0xE100000000000000LL, 0LL) & 1) != 0) {
        goto LABEL_44;
      }
      if (v28 == 13 && v30 == 0xE100000000000000LL) {
        break;
      }
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, 13LL, 0xE100000000000000LL, 0LL) & 1) != 0) {
        goto LABEL_44;
      }
      if (v28 == 10 && v30 == 0xE100000000000000LL) {
        break;
      }
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, 10LL, 0xE100000000000000LL, 0LL) & 1) != 0)
      {
LABEL_44:
        unint64_t v32 = v30;
LABEL_67:
        swift_bridgeObjectRelease(v32);
        goto LABEL_68;
      }

      if (v28 == 2573 && v30 == 0xE200000000000000LL)
      {
        unint64_t v32 = 0xE200000000000000LL;
        goto LABEL_67;
      }

      char v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, 2573LL, 0xE200000000000000LL, 0LL);
      swift_bridgeObjectRelease(v30);
      if ((v37 & 1) == 0) {
        return v7;
      }
LABEL_68:
      uint64_t v38 = Substring.distance(from:to:)(v7, v6, v7, v6, a3, v4);
      if (__OFSUB__(v38, 1LL)) {
        goto LABEL_77;
      }
      uint64_t v39 = Substring.index(_:offsetBy:limitedBy:)(v7, (v38 - 1) & ~((v38 - 1) >> 63), v6, v7, v6, a3, v4);
      if ((v40 & 1) != 0) {
        unint64_t v41 = v6;
      }
      else {
        unint64_t v41 = v39;
      }
      if (v8 > v41 >> 14) {
        goto LABEL_78;
      }
      unint64_t v7 = Substring.subscript.getter(v7);
      unint64_t v6 = v42;
      a3 = v43;
      uint64_t v45 = v44;
      swift_bridgeObjectRelease(v4);
      unint64_t v8 = v7 >> 14;
      uint64_t v4 = v45;
      if (v7 >> 14 == v6 >> 14) {
        return v7;
      }
    }

    unint64_t v32 = 0xE100000000000000LL;
    goto LABEL_67;
  }

  return v7;
}

uint64_t sub_10018B8F8()
{
  return HTTPHeaders.description.getter(*v0);
}

void sub_10018B900(uint64_t a1@<X8>)
{
  *(void *)a1 = v2;
  *(_BYTE *)(a1 + 8) = 2;
}

uint64_t HTTPHeaders.capacity.getter(uint64_t a1)
{
  return *(void *)(a1 + 24) >> 1;
}

Swift::Void __swiftcall HTTPHeaders.reserveCapacity(_:)(Swift::Int a1)
{
  uint64_t v4 = sub_100192778();
  if (!(_DWORD)v4 || a1 > *(void *)(v1 + 24) >> 1)
  {
    if (*(void *)(v1 + 16) <= a1) {
      Swift::Int v5 = a1;
    }
    else {
      Swift::Int v5 = *(void *)(v1 + 16);
    }
    uint64_t v1 = sub_10002F128(v4, v5, 0LL);
  }

  *uint64_t v2 = v1;
  sub_1000193B8();
}

uint64_t sub_10018B988(void *a1, void *a2)
{
  return sub_1001AE560(*a1, *a2);
}

BOOL sub_10018B994(uint64_t *a1, uint64_t *a2)
{
  return sub_10006D30C(*a1, *a2);
}

BOOL sub_10018B9A0(uint64_t *a1, uint64_t *a2)
{
  return sub_100069A0C(*a1, *a2);
}

ASOctaneSupportXPCService::HTTPHeaders::Index __swiftcall HTTPHeaders.index(before:)( ASOctaneSupportXPCService::HTTPHeaders::Index before)
{
  BOOL v1 = __OFSUB__(before.base, 1LL);
  result.base = before.base - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

unint64_t HTTPHeaders.subscript.getter(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)(a2 + 16) > result)
  {
    sub_10001DBCC();
    sub_10001FFF0();
    return sub_100192700();
  }

  __break(1u);
  return result;
}

uint64_t sub_10018BA10(uint64_t result, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t v4 = 0LL;
    while ((result ^ 0x8000000000000000LL) > ~a2)
    {
      if (--v4 <= a2)
      {
        result += v4;
        return result;
      }
    }

    goto LABEL_12;
  }

  if (a2)
  {
    unint64_t v2 = result ^ 0x7FFFFFFFFFFFFFFFLL;
    unint64_t v3 = a2 - 1;
    while (v2 > v3)
    {
      ++result;
      if (!--a2) {
        return result;
      }
    }

    __break(1u);
LABEL_12:
    __break(1u);
  }

  return result;
}

void sub_10018BA6C( ASOctaneSupportXPCService::HTTPHeaders::Index *a1@<X0>, ASOctaneSupportXPCService::HTTPHeaders::Index *a2@<X8>)
{
  a2->base = HTTPHeaders.index(before:)((ASOctaneSupportXPCService::HTTPHeaders::Index)a1->base).base;
  sub_10001945C();
}

void *sub_10018BA90(void *result)
{
  if (!__OFSUB__(*result, 1LL)) {
    return sub_1001927B0(result, *result - 1LL);
  }
  __break(1u);
  return result;
}

uint64_t sub_10018BAA4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_10018BA10(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10018BAD4(uint64_t *a1, uint64_t *a2)
{
  return sub_100016C28(*a1, *a2);
}

void sub_10018BAE8(uint64_t *a1@<X8>)
{
  *a1 = Heap.endIndex.getter(*v1);
  sub_10001945C();
}

void sub_10018BB0C(void *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if ((*a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (v3 < *(void *)(*(void *)v2 + 16LL))
  {
    Swift::Int v5 = (void *)(*(void *)v2 + 32 * v3);
    uint64_t v6 = v5[5];
    uint64_t v7 = v5[6];
    uint64_t v8 = v5[7];
    *a1 = v5[4];
    a1[1] = v6;
    a1[2] = v7;
    a1[3] = v8;
    swift_bridgeObjectRetain();
    sub_10001DBCC();
    sub_1000706C8();
    sub_1000193B8();
    return;
  }

  __break(1u);
}

uint64_t sub_10018BB70(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  swift_bridgeObjectRelease(*(void *)(a1 + 8));
  return swift_bridgeObjectRelease(v1);
}

uint64_t sub_10018BB9C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100068604(*a1, a1[1], *v2);
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 24) = v7;
  return result;
}

uint64_t sub_10018BBD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_100068760(*v1);
  *(void *)a1 = result;
  *(_BYTE *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  return result;
}

BOOL sub_10018BC0C()
{
  return sub_1000680DC(*v0);
}

uint64_t sub_10018BC18()
{
  return Heap.endIndex.getter(*v0);
}

void sub_10018BC24(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = sub_1001879D4(*a1, a2, *a3);
  *(_BYTE *)(a4 + 8) = v5 & 1;
  sub_10001945C();
}

uint64_t sub_10018BC5C(uint64_t *a1, uint64_t *a2)
{
  return sub_100068174(*a1, *a2, a2[1]);
}

uint64_t sub_10018BC74(uint64_t *a1, uint64_t *a2)
{
  return sub_100061E90(*a1, *a2, a2[1]);
}

uint64_t sub_10018BC8C(uint64_t *a1, uint64_t *a2)
{
  return sub_1000681EC(*a1, a1[1], *a2, a2[1]);
}

void *sub_10018BCA8(void *result)
{
  if (!__OFADD__(*result, 1LL)) {
    return sub_1001927B0(result, *result + 1LL);
  }
  __break(1u);
  return result;
}

void sub_10018BCBC(uint64_t a1@<X8>)
{
  char v2 = *(_BYTE *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = 0LL;
}

void sub_10018BCD4()
{
}

uint64_t sub_10018BCE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000680F8(a1, a2, a3, *(void *)v3, *(unsigned __int8 *)(v3 + 8));
}

uint64_t sub_10018BCEC(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1LL;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  int64_t v3 = 0LL;
  uint64_t v4 = *(void *)(result + 56);
  uint64_t v32 = result + 56;
  uint64_t v5 = 1LL << *(_BYTE *)(result + 32);
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  else {
    uint64_t v6 = -1LL;
  }
  unint64_t v7 = v6 & v4;
  int64_t v33 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = a2 + 56;
  if ((v6 & v4) == 0) {
    goto LABEL_8;
  }
LABEL_7:
  unint64_t v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  int64_t v34 = v3;
  for (unint64_t i = v9 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v13 << 6))
  {
    uint64_t v15 = result;
    uint64_t v16 = (uint64_t *)(*(void *)(result + 48) + 16 * i);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    Hasher.init(_seed:)(v35);
    swift_bridgeObjectRetain(v17);
    String.hash(into:)(v35, v18, v17);
    Swift::Int v19 = Hasher._finalize()();
    uint64_t v20 = -1LL << *(_BYTE *)(a2 + 32);
    unint64_t v21 = v19 & ~v20;
    if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) == 0) {
      goto LABEL_41;
    }
    uint64_t v22 = *(void *)(a2 + 48);
    unint64_t v23 = (void *)(v22 + 16 * v21);
    uint64_t v24 = v23[1];
    BOOL v25 = *v23 == v18 && v24 == v17;
    if (!v25 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, v18, v17, 0LL) & 1) == 0)
    {
      uint64_t v26 = ~v20;
      for (unint64_t j = v21 + 1; ; unint64_t j = v28 + 1)
      {
        uint64_t v28 = j & v26;
        unint64_t v29 = (void *)(v22 + 16 * v28);
        uint64_t v30 = v29[1];
        BOOL v31 = *v29 == v18 && v30 == v17;
        if (v31 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v29, v30, v18, v17, 0LL) & 1) != 0) {
          goto LABEL_30;
        }
      }

uint64_t sub_10018BF90(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = a1 + 40;
    uint64_t v4 = (_BYTE *)(a2 + 72);
    do
    {
      unint64_t v5 = *(void *)(v3 - 8);
      unint64_t v6 = *(void *)v3;
      uint64_t v7 = *(void *)(v3 + 8);
      uint64_t v8 = *(void *)(v3 + 16);
      uint64_t v9 = *(void *)(v3 + 24);
      unint64_t v10 = *((void *)v4 - 5);
      uint64_t v11 = *((void *)v4 - 3);
      uint64_t v12 = *((void *)v4 - 2);
      uint64_t v41 = v7;
      uint64_t v42 = *(void *)v3;
      if ((*(_BYTE *)(v3 + 32) & 1) != 0)
      {
        if ((*v4 & 1) == 0) {
          return 0LL;
        }
        uint64_t v39 = *(void *)(v3 + 24);
        sub_1000A6854(v5, v6, v7, v8, v9, 1);
        sub_100192638();
        sub_1000A6854(v13, v14, v15, v16, v17, v18);
        char v37 = sub_10018C1BC(v5, v10);
        sub_100192638();
        sub_1000A6828(v19, v20, v21, v22, v23, v24);
        sub_1000A6828(v5, v42, v41, v8, v39, 1);
        if ((v37 & 1) == 0) {
          return 0LL;
        }
      }

      else
      {
        if ((*v4 & 1) != 0) {
          return 0LL;
        }
        uint64_t v38 = *((void *)v4 - 1);
        uint64_t v25 = *((void *)v4 - 4);
        BOOL v26 = v7 == v11 && v8 == v12;
        BOOL v27 = v26 && v5 >> 16 == v10 >> 16;
        if (!v27 || v6 >> 16 != *((void *)v4 - 4) >> 16)
        {
          uint64_t v40 = *(void *)(v3 + 24);
          uint64_t v29 = *(void *)(v3 + 16);
          unint64_t v30 = *(void *)(v3 - 8);
          uint64_t v31 = *(void *)(v3 + 8);
          char v32 = _stringCompareInternal(_:_:_:_:expecting:)(v7, v29);
          uint64_t v9 = v40;
          uint64_t v7 = v31;
          unint64_t v5 = v30;
          uint64_t v8 = v29;
          unint64_t v6 = v42;
          if ((v32 & 1) == 0) {
            return 0LL;
          }
        }

        uint64_t v33 = v6;
        uint64_t v34 = v9;
        sub_1000A6854(v5, v33, v7, v8, v9, 0);
        sub_1000A6854(v10, v25, v11, v12, v38, 0);
        char v36 = sub_10018C1BC(v34, v38);
        sub_1000A6828(v10, v25, v11, v12, v38, 0);
        sub_1000A6828(v5, v42, v41, v8, v34, 0);
        if ((v36 & 1) == 0) {
          return 0LL;
        }
      }

      v3 += 48LL;
      v4 += 48;
      --v2;
    }

    while (v2);
  }

  return 1LL;
}

uint64_t sub_10018C1BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (v2)
  {
    if (a1 != a2) {
      __asm { BR              X10 }
    }
  }

  return 1LL;
}

void sub_10018C3B0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 == *(void *)(a2 + 16)
    && v4
    && (sub_100192810(), v5 != v6)
    && ((uint64_t v7 = v3[4], v8 = v3[5], v9 = v2[4], v10 = v2[5], v7 == v9) ? (v11 = v8 == v10) : (v11 = 0),
        (v11 || (sub_100048720(v7, v8, v9, v10) & 1) != 0) && v4 != 1))
  {
    uint64_t v12 = v3 + 7;
    uint64_t v13 = v2 + 7;
    unint64_t v14 = 1LL;
    while (v14 < v4)
    {
      uint64_t v15 = *(v12 - 1);
      uint64_t v16 = *v12;
      uint64_t v17 = *(v13 - 1);
      uint64_t v18 = *v13;
      BOOL v19 = v15 == v17 && v16 == v18;
      if (v19 || (sub_100048720(v15, v16, v17, v18) & 1) != 0)
      {
        ++v14;
        v12 += 2;
        v13 += 2;
        if (v4 != v14) {
          continue;
        }
      }

      goto LABEL_18;
    }

    __break(1u);
  }

  else
  {
LABEL_18:
    sub_1000193B8();
  }

uint64_t sub_10018C468(uint64_t a1, uint64_t *a2)
{
  return static HTTPHeaders.== infix(_:_:)(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *a2);
}

void sub_10018C480(uint64_t a1, uint64_t a2)
{
}

unint64_t HTTPVersion.major.setter(unint64_t result)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    sub_100034FD0();
    sub_100035154();
  }

  else
  {
    if (result < 0x10000)
    {
      *(_WORD *)(v1 + sub_100019F7C(v0 + 2) = result;
      return result;
    }

    sub_100034FD0();
    sub_100035144();
  }

  uint64_t result = sub_100035124(v2, v3, v4, v5, v6, v7, v8);
  __break(1u);
  return result;
}

void (*HTTPVersion.major.modify(void *a1))(unint64_t *a1, char a2)
{
  *a1 = *(unsigned __int16 *)(v1 + 2);
  a1[1] = v1;
  return sub_10018C528;
}

void sub_10018C528(unint64_t *a1, char a2)
{
  unint64_t v3 = *a1;
  if ((a2 & 1) != 0)
  {
    HTTPVersion.major.setter(v3);
LABEL_6:
    sub_100013868();
    return;
  }

  if ((v3 & 0x8000000000000000LL) != 0)
  {
    sub_100034FD0();
    sub_100035154();
  }

  else
  {
    if (v3 < 0x10000)
    {
      *(_WORD *)(a1[1] + sub_100019F7C(v0 + 2) = v3;
      goto LABEL_6;
    }

    sub_100034FD0();
    sub_100035144();
  }

  sub_100035124(v4, v5, v6, v7, v8, v9, v10);
  __break(1u);
}

unint64_t HTTPVersion.minor.setter(unint64_t result)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    sub_100034FD0();
    sub_100035154();
  }

  else
  {
    if (result < 0x10000)
    {
      *uint64_t v1 = result;
      return result;
    }

    sub_100034FD0();
    sub_100035144();
  }

  uint64_t result = sub_100035124(v2, v3, v4, v5, v6, v7, v8);
  __break(1u);
  return result;
}

void (*HTTPVersion.minor.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = *v1;
  a1[1] = v1;
  return sub_10018C654;
}

void sub_10018C654(uint64_t a1, char a2)
{
  unint64_t v3 = *(void *)a1;
  if ((a2 & 1) != 0)
  {
    HTTPVersion.minor.setter(v3);
LABEL_6:
    sub_100013868();
    return;
  }

  if ((v3 & 0x8000000000000000LL) != 0)
  {
    sub_100034FD0();
    sub_100035154();
  }

  else
  {
    if (v3 < 0x10000)
    {
      **(_WORD **)(a1 + 8) = v3;
      goto LABEL_6;
    }

    sub_100034FD0();
    sub_100035144();
  }

  sub_100035124(v4, v5, v6, v7, v8, v9, v10);
  __break(1u);
}

void *HTTPVersion.http3.unsafeMutableAddressor()
{
  return &static HTTPVersion.http3;
}

uint64_t static HTTPVersion.http3.getter()
{
  return 196608LL;
}

void *HTTPVersion.http2.unsafeMutableAddressor()
{
  return &static HTTPVersion.http2;
}

uint64_t static HTTPVersion.http1_1.getter()
{
  return 65537LL;
}

void *HTTPVersion.http1_0.unsafeMutableAddressor()
{
  return &static HTTPVersion.http1_0;
}

uint64_t static HTTPVersion.http1_0.getter()
{
  return 0x10000LL;
}

void *HTTPVersion.http0_9.unsafeMutableAddressor()
{
  return &static HTTPVersion.http0_9;
}

uint64_t HTTPParserError.debugDescription.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10018C770 + 4 * byte_1002090DE[a1]))( 0xD000000000000026LL,  0x8000000100221A00LL);
}

uint64_t sub_10018C770()
{
  return v0 + 2;
}

uint64_t sub_10018C8F8()
{
  return HTTPParserError.debugDescription.getter(*v0);
}

uint64_t sub_10018C900()
{
  return HTTPParserError.hashValue.getter(*v0);
}

uint64_t HTTPResponseStatus.init(statusCode:reasonPhrase:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  switch(result)
  {
    case 400LL:
    case 401LL:
    case 402LL:
    case 403LL:
    case 404LL:
    case 405LL:
    case 406LL:
    case 407LL:
    case 408LL:
    case 409LL:
    case 410LL:
    case 411LL:
    case 412LL:
    case 413LL:
    case 414LL:
    case 415LL:
    case 416LL:
    case 417LL:
    case 418LL:
    case 421LL:
    case 422LL:
    case 423LL:
    case 424LL:
    case 426LL:
    case 428LL:
    case 429LL:
    case 431LL:
    case 451LL:
      goto LABEL_13;
    case 419LL:
    case 420LL:
    case 425LL:
    case 427LL:
    case 430LL:
    case 432LL:
    case 433LL:
    case 434LL:
    case 435LL:
    case 436LL:
    case 437LL:
    case 438LL:
    case 439LL:
    case 440LL:
    case 441LL:
    case 442LL:
    case 443LL:
    case 444LL:
    case 445LL:
    case 446LL:
    case 447LL:
    case 448LL:
    case 449LL:
    case 450LL:
LABEL_11:
      if (result < 0)
      {
        sub_100034FD0();
        sub_100035154();
        uint64_t result = sub_100035124(v3, v4, v5, v6, v7, v8, v9);
        __break(1u);
LABEL_13:
        sub_1001921E4(result, a2, a3);
        uint64_t result = variable initialization expression of ClientOverride.requestBundleVersion();
      }

      break;
    default:
      switch(result)
      {
        case 500LL:
        case 501LL:
        case 502LL:
        case 503LL:
        case 504LL:
        case 505LL:
        case 506LL:
        case 507LL:
        case 508LL:
        case 510LL:
        case 511LL:
          goto LABEL_13;
        case 509LL:
          goto LABEL_11;
        default:
          switch(result)
          {
            case 200LL:
            case 201LL:
            case 202LL:
            case 203LL:
            case 204LL:
            case 205LL:
            case 206LL:
            case 207LL:
            case 208LL:
              goto LABEL_13;
            default:
              switch(result)
              {
                case 300LL:
                case 301LL:
                case 302LL:
                case 303LL:
                case 304LL:
                case 305LL:
                case 307LL:
                case 308LL:
                  goto LABEL_13;
                case 306LL:
                  goto LABEL_11;
                default:
                  switch(result)
                  {
                    case 226LL:
                      sub_1001921E4(226LL, a2, a3);
                      uint64_t result = variable initialization expression of ClientOverride.requestBundleVersion();
                      break;
                    case 101LL:
                      sub_1001921E4(101LL, a2, a3);
                      uint64_t result = variable initialization expression of ClientOverride.requestBundleVersion();
                      break;
                    case 102LL:
                      sub_1001921E4(102LL, a2, a3);
                      uint64_t result = variable initialization expression of ClientOverride.requestBundleVersion();
                      break;
                    case 100LL:
                      sub_1001921E4(100LL, a2, a3);
                      uint64_t result = variable initialization expression of ClientOverride.requestBundleVersion();
                      break;
                    default:
                      goto LABEL_11;
                  }

                  break;
              }

              break;
          }

          break;
      }

      break;
  }

  return result;
}

void sub_10018CDBC(uint64_t a1, uint64_t a2)
{
  static HTTPResponseStatus.== infix(_:_:)( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)a2,  *(void *)(a2 + 8),  *(void *)(a2 + 16));
}

void HTTPRequestHead.description.getter(uint64_t x0_0)
{
  v10[0] = 0LL;
  v10[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(67LL);
  v2._object = (void *)0x8000000100221A30LL;
  v2._unint64_t countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v2);
  __int128 v9 = *(_OWORD *)(x0_0 + 16);
  _print_unlocked<A, B>(_:_:)(&v9, v10);
  v3._unint64_t countAndFlagsBits = 0x22203A697275202CLL;
  v3._object = (void *)0xE800000000000000LL;
  String.append(_:)(v3);
  uint64_t v4 = *(void *)(x0_0 + 32);
  uint64_t v5 = *(void **)(x0_0 + 40);
  sub_10003574C();
  v6._unint64_t countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  sub_10003561C();
  v7._unint64_t countAndFlagsBits = 0x6973726576202C22LL;
  v7._object = (void *)0xEC000000203A6E6FLL;
  String.append(_:)(v7);
  HTTPVersion.description.getter();
  sub_100083088(v11);
  sub_10001A3F8();
  sub_100192324();
  sub_100019320();
  uint64_t v8 = sub_1000175B0(&qword_1002AA500);
  v12._unint64_t countAndFlagsBits = sub_1001927D8(v8);
  sub_100083088(v12);
  sub_100019390();
  sub_10001A3F8();
  sub_100192760();
  sub_100019398();
}

void sub_10018CF10()
{
}

uint64_t HTTPResponseHead.description.getter(uint64_t a1)
{
  *(void *)&__int128 v9 = 0LL;
  *((void *)&v9 + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(57LL);
  __int128 v11 = v9;
  v2._object = (void *)0x8000000100221A50LL;
  v2._unint64_t countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v2);
  HTTPVersion.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._unint64_t countAndFlagsBits = 0x737574617473202CLL;
  v4._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v4);
  uint64_t v5 = *(void *)(a1 + 32);
  __int128 v9 = *(_OWORD *)(a1 + 16);
  uint64_t v10 = v5;
  _print_unlocked<A, B>(_:_:)(&v9, &v11);
  sub_100192324();
  sub_100019320();
  uint64_t v6 = sub_1000175B0(&qword_1002AA500);
  v7._unint64_t countAndFlagsBits = sub_1001927D8(v6);
  String.append(_:)(v7);
  sub_100019390();
  sub_10001A3F8();
  sub_100192760();
  return v11;
}

uint64_t sub_10018D030()
{
  return HTTPResponseHead.description.getter(*v0);
}

void HTTPVersion.description.getter()
{
  v1._unint64_t countAndFlagsBits = sub_100192688();
  sub_100083088(v1);
  sub_10003561C();
  v0._unint64_t countAndFlagsBits = 46LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
  v2._unint64_t countAndFlagsBits = sub_100192688();
  sub_100083088(v2);
  sub_100019390();
  sub_100019398();
}

void sub_10018D0C4()
{
}

void HTTPMethod.init(rawValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 5522759 && a2 == 0xE300000000000000LL;
  if (v2 || (sub_1001921C4(5522759LL, 0xE300000000000000LL) & 1) != 0) {
    goto LABEL_6;
  }
  BOOL v5 = a1 == 5526864 && a2 == 0xE300000000000000LL;
  if (v5 || (sub_1001921C4(5526864LL, 0xE300000000000000LL) & 1) != 0) {
    goto LABEL_6;
  }
  BOOL v6 = a1 == 4997953 && a2 == 0xE300000000000000LL;
  if (v6 || (sub_1001921C4(4997953LL, 0xE300000000000000LL) & 1) != 0) {
    goto LABEL_6;
  }
  BOOL v7 = a1 == 1145128264 && a2 == 0xE400000000000000LL;
  if (v7 || (sub_1001921C4(1145128264LL, 0xE400000000000000LL) & 1) != 0) {
    goto LABEL_6;
  }
  BOOL v8 = a1 == 1414745936 && a2 == 0xE400000000000000LL;
  if (v8 || (sub_1001921C4(1414745936LL, 0xE400000000000000LL) & 1) != 0) {
    goto LABEL_6;
  }
  BOOL v9 = a1 == 1498435395 && a2 == 0xE400000000000000LL;
  if (v9 || (sub_1001921C4(1498435395LL, 0xE400000000000000LL) & 1) != 0) {
    goto LABEL_6;
  }
  BOOL v10 = a1 == 1262702412 && a2 == 0xE400000000000000LL;
  if (v10 || (sub_1001921C4(1262702412LL, 0xE400000000000000LL) & 1) != 0) {
    goto LABEL_6;
  }
  BOOL v11 = a1 == 1163284301 && a2 == 0xE400000000000000LL;
  if (v11 || (sub_1001921C4(1163284301LL, 0xE400000000000000LL) & 1) != 0) {
    goto LABEL_6;
  }
  BOOL v12 = a1 == 1145981250 && a2 == 0xE400000000000000LL;
  if (v12 || (sub_1001921C4(1145981250LL, 0xE400000000000000LL) & 1) != 0) {
    goto LABEL_6;
  }
  BOOL v13 = a1 == 1263421772 && a2 == 0xE400000000000000LL;
  if (v13 || (sub_1001921C4(1263421772LL, 0xE400000000000000LL) & 1) != 0) {
    goto LABEL_6;
  }
  BOOL v14 = a1 == 0x4843544150LL && a2 == 0xE500000000000000LL;
  if (v14 || (sub_1001921C4(0x4843544150LL, 0xE500000000000000LL) & 1) != 0) {
    goto LABEL_6;
  }
  BOOL v15 = a1 == 0x4543415254LL && a2 == 0xE500000000000000LL;
  if (v15 || (sub_1001921C4(0x4543415254LL, 0xE500000000000000LL) & 1) != 0) {
    goto LABEL_6;
  }
  BOOL v16 = a1 == 0x4C4F434B4DLL && a2 == 0xE500000000000000LL;
  if (v16 || (sub_1001921C4(0x4C4F434B4DLL, 0xE500000000000000LL) & 1) != 0) {
    goto LABEL_6;
  }
  BOOL v17 = a1 == 0x454752454DLL && a2 == 0xE500000000000000LL;
  if (v17 || (sub_1001921C4(0x454752454DLL, 0xE500000000000000LL) & 1) != 0) {
    goto LABEL_6;
  }
  BOOL v18 = a1 == 0x4547525550LL && a2 == 0xE500000000000000LL;
  if (v18 || (sub_1001921C4(0x4547525550LL, 0xE500000000000000LL) & 1) != 0) {
    goto LABEL_6;
  }
  BOOL v19 = a1 == 0x594649544F4ELL && a2 == 0xE600000000000000LL;
  if (v19 || (sub_1001921C4(0x594649544F4ELL, 0xE600000000000000LL) & 1) != 0) {
    goto LABEL_6;
  }
  BOOL v20 = a1 == 0x484352414553LL && a2 == 0xE600000000000000LL;
  if (v20 || (sub_1001921C4(0x484352414553LL, 0xE600000000000000LL) & 1) != 0) {
    goto LABEL_6;
  }
  BOOL v21 = a1 == 0x4B434F4C4E55LL && a2 == 0xE600000000000000LL;
  if (v21 || (sub_1001921C4(0x4B434F4C4E55LL, 0xE600000000000000LL) & 1) != 0) {
    goto LABEL_6;
  }
  BOOL v22 = a1 == 0x444E49424552LL && a2 == 0xE600000000000000LL;
  if (v22 || (sub_1001921C4(0x444E49424552LL, 0xE600000000000000LL) & 1) != 0) {
    goto LABEL_6;
  }
  BOOL v23 = a1 == 0x444E49424E55LL && a2 == 0xE600000000000000LL;
  if (v23 || (sub_1001921C4(0x444E49424E55LL, 0xE600000000000000LL) & 1) != 0) {
    goto LABEL_6;
  }
  BOOL v24 = a1 == 0x54524F504552LL && a2 == 0xE600000000000000LL;
  if (v24 || (sub_1001921C4(0x54524F504552LL, 0xE600000000000000LL) & 1) != 0) {
    goto LABEL_6;
  }
  BOOL v25 = a1 == 0x4554454C4544LL && a2 == 0xE600000000000000LL;
  if (v25 || (sub_1001921C4(0x4554454C4544LL, 0xE600000000000000LL) & 1) != 0) {
    goto LABEL_6;
  }
  BOOL v26 = a1 == 0x4B4E494C4E55LL && a2 == 0xE600000000000000LL;
  if (v26 || (sub_1001921C4(0x4B4E494C4E55LL, 0xE600000000000000LL) & 1) != 0) {
    goto LABEL_6;
  }
  BOOL v27 = a1 == 0x5443454E4E4F43LL && a2 == 0xE700000000000000LL;
  if (v27 || (sub_1001921C4(0x5443454E4E4F43LL, 0xE700000000000000LL) & 1) != 0) {
    goto LABEL_6;
  }
  BOOL v28 = a1 == 0x4843524145534DLL && a2 == 0xE700000000000000LL;
  if (v28 || (sub_1001921C4(0x4843524145534DLL, 0xE700000000000000LL) & 1) != 0) {
    goto LABEL_6;
  }
  BOOL v29 = a1 == 0x534E4F4954504FLL && a2 == 0xE700000000000000LL;
  if (v29 || (sub_1001921C4(0x534E4F4954504FLL, 0xE700000000000000LL) & 1) != 0) {
    goto LABEL_6;
  }
  BOOL v30 = a1 == 0x444E4946504F5250LL && a2 == 0xE800000000000000LL;
  if (v30
    || (sub_1001921C4(0x444E4946504F5250LL, 0xE800000000000000LL) & 1) != 0
    || (a1 == 0x54554F4B43454843LL ? (BOOL v31 = a2 == 0xE800000000000000LL) : (BOOL v31 = 0),
        v31
     || (sub_1001921C4(0x54554F4B43454843LL, 0xE800000000000000LL) & 1) != 0
     || (a1 == 0x43544150504F5250LL ? (BOOL v32 = a2 == 0xE900000000000048LL) : (BOOL v32 = 0),
         v32
      || (sub_1001921C4(0x43544150504F5250LL, 0xE900000000000048LL) & 1) != 0
      || (a1 == 0x4249524353425553LL ? (BOOL v33 = a2 == 0xE900000000000045LL) : (BOOL v33 = 0),
          v33
       || (sub_1001921C4(0x4249524353425553LL, 0xE900000000000045LL) & 1) != 0
       || (a1 == 0x444E454C41434B4DLL ? (BOOL v34 = a2 == 0xEA00000000005241LL) : (BOOL v34 = 0),
           v34
        || (sub_1001921C4(0x444E454C41434B4DLL, 0xEA00000000005241LL) & 1) != 0
        || (a1 == 0x4956495443414B4DLL ? (BOOL v35 = a2 == 0xEA00000000005954LL) : (BOOL v35 = 0),
            v35
         || (sub_1001921C4(0x4956495443414B4DLL, 0xEA00000000005954LL) & 1) != 0
         || (a1 == 0x5243534255534E55LL ? (BOOL v36 = a2 == 0xEB00000000454249LL) : (BOOL v36 = 0),
             v36
          || (sub_1001921C4(0x5243534255534E55LL, 0xEB00000000454249LL) & 1) != 0
          || (a1 == 0x454352554F53LL ? (BOOL v37 = a2 == 0xE600000000000000LL) : (BOOL v37 = 0),
              v37 || (sub_1001921C4(0x454352554F53LL, 0xE600000000000000LL) & 1) != 0))))))))
  {
LABEL_6:
    swift_bridgeObjectRelease();
  }

  sub_10007F0D0();
  sub_1000193B8();
}

void sub_10018DB68(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = v3;
  a2[1] = v4;
}

void sub_10018DB94(void *a1@<X8>)
{
  *a1 = v3;
  a1[1] = v4;
  sub_10001945C();
}

uint64_t sub_10018DBB8()
{
  v1._unint64_t countAndFlagsBits = 0x2D746E65746E6F63LL;
  v1._object = (void *)0xEE006874676E656CLL;
  Swift::String_optional v3 = HTTPHeaders.first(name:)(v1);
  uint64_t result = v3.value._countAndFlagsBits;
  if (!v3.value._object) {
    return 0LL;
  }
  unint64_t v4 = ((unint64_t)v3.value._object >> 56) & 0xF;
  uint64_t v5 = v3.value._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  else {
    unint64_t v6 = v3.value._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (!v6)
  {
    sub_100019390();
    return 0LL;
  }

  if (((uint64_t)v3.value._object & 0x1000000000000000LL) == 0)
  {
    if (((uint64_t)v3.value._object & 0x2000000000000000LL) == 0)
    {
      if ((v3.value._countAndFlagsBits & 0x1000000000000000LL) != 0) {
        BOOL v7 = (unsigned __int8 *)(((uint64_t)v3.value._object & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        BOOL v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v3.value._countAndFlagsBits);
      }
      uint64_t v8 = (uint64_t)sub_100161AC4(v7, v5);
      char v0 = v9 & 1;
      goto LABEL_47;
    }

    if (LOBYTE(v3.value._countAndFlagsBits) == 43)
    {
      if (!v4) {
        goto LABEL_62;
      }
      if (v4 == 1) {
        goto LABEL_33;
      }
      sub_10005768C();
      if (!v14 & v13) {
        goto LABEL_33;
      }
      uint64_t v8 = v16;
      if (v15 != 2)
      {
        sub_10005768C();
        if (!v14 & v13) {
          goto LABEL_33;
        }
        uint64_t v8 = 10LL * v8 + v18;
        if (v17 != 3)
        {
          while (1)
          {
            sub_100024EAC();
            if (!v14 & v13) {
              goto LABEL_33;
            }
            sub_100134748();
            if (!v14) {
              goto LABEL_33;
            }
            uint64_t v8 = v20 + v19;
            if (__OFADD__(v20, v19)) {
              goto LABEL_33;
            }
            sub_100024EFC();
            if (v14) {
              goto LABEL_47;
            }
          }
        }
      }
    }

    else
    {
      if (LOBYTE(v3.value._countAndFlagsBits) == 45)
      {
        if (v4)
        {
          if (v4 != 1)
          {
            sub_10005768C();
            if (!(!v14 & v13))
            {
              if (v11 == 2)
              {
                char v0 = 0;
                uint64_t v8 = -(uint64_t)v12;
                goto LABEL_47;
              }

              if ((v10 - 48) <= 9u)
              {
                uint64_t v8 = -10LL * v12 - (v10 - 48);
                if (v11 == 3) {
                  goto LABEL_46;
                }
                while (1)
                {
                  sub_100024EAC();
                  if (!v14 & v13) {
                    break;
                  }
                  sub_100134748();
                  if (!v14) {
                    break;
                  }
                  uint64_t v8 = v26 - v25;
                  if (__OFSUB__(v26, v25)) {
                    break;
                  }
                  sub_100024EFC();
                  if (v14) {
                    goto LABEL_47;
                  }
                }
              }
            }
          }

void sub_10018DE38(uint64_t a1)
{
}

void sub_10018DE44(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_100034FD0();
    sub_1000BBB6C( (uint64_t)"Fatal error",  v3,  v4,  (uint64_t)"Can't construct Array with count < 0",  v5,  v6,  (uint64_t)"Swift/Array.swift");
    __break(1u);
  }

  else
  {
    if (a1)
    {
      uint64_t v2 = type metadata accessor for Transaction();
      *(void *)((sub_1001927CC(v2) & 0xFFFFFFFFFFFFF8LL) + 0x1sub_10019B2E8(v0, 0) = a1;
    }

    sub_100013868();
  }

void sub_10018DEB8(uint64_t a1)
{
}

void sub_10018DEC8(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    sub_100034FD0();
    sub_1000BBB6C( (uint64_t)"Fatal error",  v2,  v3,  (uint64_t)"Can't construct Array with count < 0",  v4,  v5,  (uint64_t)"Swift/Array.swift");
    __break(1u);
  }

  else
  {
    if (a1) {
      *(void *)(static Array._allocateBufferUninitialized(minimumCapacity:)(a1, a2) + 16) = a1;
    }
    sub_100013868();
  }

void sub_10018DF30(uint64_t a1)
{
}

void sub_10018DF3C(uint64_t a1)
{
}

void sub_10018DF48(uint64_t a1, uint64_t *a2)
{
  if (a1 < 0)
  {
    sub_100034FD0();
    sub_1000BBB6C( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"Can't construct Array with count < 0",  v6,  v7,  (uint64_t)"Swift/Array.swift");
    __break(1u);
  }

  else
  {
    if (a1)
    {
      uint64_t v3 = sub_1000175B0(a2);
      *(void *)(sub_1001927CC(v3) + 16) = a1;
    }

    sub_100013868();
  }

uint64_t sub_10018DFB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL) & 1;
  }
}

uint64_t sub_10018DFF4( uint64_t a1, unsigned __int8 a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v60[3] = a4;
  if (a1 < 0)
  {
    sub_100034FD0();
    uint64_t v45 = "Must take zero or more splits";
    unint64_t v46 = "Swift/Collection.swift";
    uint64_t v47 = 29LL;
    uint64_t v48 = 22LL;
    goto LABEL_42;
  }

  uint64_t v10 = sub_1000D6B98((uint64_t)&unk_10028E630);
  *(void *)(v10 + 16) = _swiftEmptyArrayStorage;
  uint64_t v52 = v10 + 16;
  uint64_t v57 = sub_1000D6B98((uint64_t)&unk_10028E658);
  *(void *)(v57 + 16) = 15LL;
  uint64_t v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000LL) != 0 ? (uint64_t v12 = HIBYTE(a6) & 0xF) : (uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000LL) == 0) {
      uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v33 = 7LL;
    if (((a6 >> 60) & ((a5 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v33 = 11LL;
    }
    sub_10018E3D4(v33 | (v11 << 16), v57, a2 & 1, v10, a5, a6);
    sub_10001A420();
    char v14 = *(void **)(v10 + 16);
    swift_bridgeObjectRetain(v14);
    swift_release(v10);
    uint64_t v34 = v57;
LABEL_38:
    swift_release(v34);
    return (uint64_t)v14;
  }

  uint64_t v50 = v10;
  uint64_t v51 = a1;
  uint64_t v13 = 7LL;
  if (((a6 >> 60) & ((a5 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v13 = 11LL;
  }
  uint64_t v49 = v13 | (v12 << 16);
  unint64_t v58 = 4 * v12;
  char v14 = _swiftEmptyArrayStorage;
  unint64_t v15 = 15LL;
  unint64_t v16 = 15LL;
  unint64_t v17 = 15LL;
  while (1)
  {
    uint64_t v18 = String.subscript.getter(v15, a5, a6);
    uint64_t v20 = v19;
    v60[0] = v18;
    v60[1] = v19;
    char v21 = a3(v60);
    if (v6)
    {
      swift_release(v50);
      swift_release(v57);
      swift_bridgeObjectRelease(v20);
      sub_10001A420();
      return (uint64_t)v14;
    }

    char v22 = v21;
    swift_bridgeObjectRelease(v20);
    if ((v22 & 1) == 0)
    {
      unint64_t v15 = sub_100192608();
      goto LABEL_23;
    }

    int v23 = (v16 >> 14 == v15 >> 14) & a2;
    if (v23 != 1)
    {
      if (v15 >> 14 < v16 >> 14) {
        goto LABEL_40;
      }
      uint64_t v24 = sub_100192830(v16, v15);
      uint64_t v53 = v26;
      uint64_t v54 = v25;
      uint64_t v55 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
      {
        sub_1001922E4();
        sub_10002ECC0();
        char v14 = v31;
      }

      unint64_t v28 = v14[2];
      if (v28 >= v14[3] >> 1)
      {
        sub_10002ECC0();
        char v14 = v32;
      }

      v14[2] = v28 + 1;
      BOOL v29 = &v14[4 * v28];
      v29[4] = v24;
      v29[5] = v55;
      v29[6] = v54;
      v29[7] = v53;
      *(void *)uint64_t v52 = v14;
    }

    uint64_t v30 = sub_100192608();
    unint64_t v15 = v30;
    *(void *)(v57 + 16) = v30;
    if ((v23 & 1) == 0 && v14[2] == v51) {
      break;
    }
    unint64_t v16 = v30;
    unint64_t v17 = v30;
LABEL_23:
    if (v58 == v15 >> 14) {
      goto LABEL_32;
    }
  }

  unint64_t v17 = v30;
  unint64_t v16 = v30;
LABEL_32:
  if (v58 == v16 >> 14 && (a2 & 1) != 0)
  {
    sub_10001A420();
LABEL_37:
    swift_bridgeObjectRetain(v14);
    swift_release(v50);
    uint64_t v34 = v57;
    goto LABEL_38;
  }

  if (v58 >= v17 >> 14)
  {
    uint64_t v35 = sub_100192830(v17, v49);
    uint64_t v37 = v36;
    uint64_t v39 = v38;
    uint64_t v41 = v40;
    sub_10001A420();
    sub_10002E7D4();
    uint64_t v42 = *(void *)(*(void *)v52 + 16LL);
    sub_10002E9C8();
    char v14 = *(void **)v52;
    v14[2] = v42 + 1;
    uint64_t v43 = &v14[4 * v42];
    v43[4] = v35;
    v43[5] = v37;
    v43[6] = v39;
    v43[7] = v41;
    *(void *)uint64_t v52 = v14;
    goto LABEL_37;
  }

uint64_t sub_10018E3D4( unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7 = *(void *)(a2 + 16);
  int v8 = (v7 >> 14 == a1 >> 14) & a3;
  if (v8 == 1) {
    return v8 ^ 1u;
  }
  if (a1 >> 14 >= v7 >> 14)
  {
    uint64_t v10 = String.subscript.getter(v7, a1, a5, a6);
    uint64_t v12 = v11;
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    sub_10002E7D4();
    uint64_t v17 = *(void *)(*(void *)(a4 + 16) + 16LL);
    sub_10002E9C8();
    uint64_t v18 = *(void *)(a4 + 16);
    *(void *)(v18 + 16) = v17 + 1;
    uint64_t v19 = (void *)(v18 + 32 * v17);
    v19[4] = v10;
    os_log_t v19[5] = v12;
    v19[6] = v14;
    void v19[7] = v16;
    return v8 ^ 1u;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Range requires lowerBound <= upperBound",  39LL,  2LL,  "Swift/Range.swift",  17LL);
  __break(1u);
  return result;
}

uint64_t sub_10018E4D8()
{
  if (v3 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    unint64_t v4 = v0 + 8 * v1;
    if (v2 + 8 * v1 > v0)
    {
      BOOL v5 = v4 >= v2;
      BOOL v6 = v4 == v2;
    }

    else
    {
      BOOL v5 = 0;
      BOOL v6 = 0;
    }

    if (v6 || !v5) {
      return sub_1001921EC(v2);
    }
    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_10018E570()
{
  return sub_10018E628();
}

uint64_t sub_10018E57C()
{
  if (v0 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    sub_100192414();
    if (!v4 && v3)
    {
      BOOL v3 = v2 >= v1;
      BOOL v4 = v2 == v1;
    }

    else
    {
      BOOL v3 = 0;
      BOOL v4 = 0;
    }

    if (v4 || !v3) {
      return sub_1001921EC(v1);
    }
    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
  __break(1u);
  return result;
}

uint64_t sub_10018E604(uint64_t a1, uint64_t a2)
{
  return sub_10018EC2C(a1, a2);
}

uint64_t sub_10018E610()
{
  return sub_10018E878();
}

uint64_t sub_10018E61C()
{
  return sub_10018E628();
}

uint64_t sub_10018E628()
{
  if (v0 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    sub_1001925F8();
    if (!v4 && v3)
    {
      BOOL v3 = v2 >= v1;
      BOOL v4 = v2 == v1;
    }

    else
    {
      BOOL v3 = 0;
      BOOL v4 = 0;
    }

    if (v4 || !v3) {
      return sub_1001921EC(v1);
    }
    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
  __break(1u);
  return result;
}

uint64_t sub_10018E6B0()
{
  if (v0 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    sub_1001925F8();
    if (!v4 && v3)
    {
      BOOL v3 = v2 >= v1;
      BOOL v4 = v2 == v1;
    }

    else
    {
      BOOL v3 = 0;
      BOOL v4 = 0;
    }

    if (v4 || !v3) {
      return sub_1001921EC(v1);
    }
    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
  __break(1u);
  return result;
}

uint64_t sub_10018E740(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    sub_1001922A8();
    if (!v5 && v4)
    {
      BOOL v4 = v3 >= v2;
      BOOL v5 = v3 == v2;
    }

    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }

    if (v5 || !v4)
    {
      sub_1000175B0(&qword_1002B8458);
      uint64_t v6 = sub_1001921F4();
      return sub_1001921D4(v6);
    }

    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_10018E7D0(uint64_t a1, uint64_t a2)
{
  return sub_10018F5AC(a1, a2);
}

uint64_t sub_10018E7DC(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    sub_100192270();
    if (!v5 && v4)
    {
      BOOL v4 = v3 >= v2;
      BOOL v5 = v3 == v2;
    }

    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }

    if (v5 || !v4)
    {
      sub_1000175B0(&qword_1002AC968);
      uint64_t v6 = sub_1001921F4();
      return sub_1001921D4(v6);
    }

    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_10018E86C()
{
  return sub_10018E878();
}

uint64_t sub_10018E878()
{
  if (v0 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    sub_1001925F8();
    if (!v4 && v3)
    {
      BOOL v3 = v2 >= v1;
      BOOL v4 = v2 == v1;
    }

    else
    {
      BOOL v3 = 0;
      BOOL v4 = 0;
    }

    if (v4 || !v3) {
      return sub_1001921EC(v1);
    }
    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
  __break(1u);
  return result;
}

uint64_t sub_10018E900(uint64_t a1, uint64_t a2)
{
  return sub_10018F5AC(a1, a2);
}

uint64_t sub_10018E910(uint64_t a1, uint64_t a2)
{
  return sub_10018E928(a1, a2);
}

uint64_t sub_10018E91C(uint64_t a1, uint64_t a2)
{
  return sub_10018E928(a1, a2);
}

uint64_t sub_10018E928(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    sub_100192270();
    if (!v8 && v7)
    {
      BOOL v7 = v6 >= v4;
      BOOL v8 = v6 == v4;
    }

    else
    {
      BOOL v7 = 0;
      BOOL v8 = 0;
    }

    if (v8 || !v7)
    {
      sub_1001925E4(v2, v3, v4, v5);
      uint64_t v9 = sub_1001921F4();
      return sub_1001921D4(v9);
    }

    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  __break(1u);
  return result;
}

uint64_t sub_10018E9B0(uint64_t a1, uint64_t a2)
{
  return sub_10018F6C0(a1, a2);
}

uint64_t sub_10018E9BC(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    sub_1001924D8();
    if (!v5 && v4)
    {
      BOOL v4 = v3 >= v2;
      BOOL v5 = v3 == v2;
    }

    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }

    if (v5 || !v4)
    {
      sub_1000175B0(&qword_1002AA510);
      uint64_t v6 = sub_1001921F4();
      return sub_1001921D4(v6);
    }

    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_10018EA4C(uint64_t a1, uint64_t a2)
{
  return sub_10018F240(a1, a2);
}

uint64_t sub_10018EA58(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    sub_1001924A0();
    if (!v5 && v4)
    {
      BOOL v4 = v3 >= v2;
      BOOL v5 = v3 == v2;
    }

    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }

    if (v5 || !v4)
    {
      sub_1000175B0(&qword_1002AA500);
      uint64_t v6 = sub_1001921F4();
      return sub_1001921D4(v6);
    }

    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_10018EAE8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    unint64_t v3 = a1 + 48 * a2;
    if (a3 + 48 * a2 > a1)
    {
      BOOL v4 = v3 >= a3;
      BOOL v5 = v3 == a3;
    }

    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }

    if (v5 || !v4)
    {
      sub_1000175B0(&qword_1002AA3E8);
      uint64_t v6 = sub_1001921F4();
      return sub_1001921D4(v6);
    }

    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_10018EB90(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    sub_1001924BC();
    if (!v5 && v4)
    {
      BOOL v4 = v3 >= v2;
      BOOL v5 = v3 == v2;
    }

    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }

    if (v5 || !v4)
    {
      sub_1000175B0(&qword_1002AC960);
      uint64_t v6 = sub_1001921F4();
      return sub_1001921D4(v6);
    }

    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_10018EC20(uint64_t a1, uint64_t a2)
{
  return sub_10018EC2C(a1, a2);
}

uint64_t sub_10018EC2C(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    sub_100192428();
    v3(0LL);
    sub_100192478();
    if (!v6 & v5) {
      BOOL v7 = v4 > v2;
    }
    else {
      BOOL v7 = 0;
    }
    if (!v7)
    {
      uint64_t v8 = sub_1001921F4();
      return sub_1001921D4(v8);
    }

    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  __break(1u);
  return result;
}

uint64_t sub_10018ECBC(uint64_t a1, uint64_t a2)
{
  return sub_10018F5AC(a1, a2);
}

uint64_t sub_10018ECC8()
{
  if (v0 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    sub_100192738();
    if (!v4 && v3)
    {
      BOOL v3 = v2 >= v1;
      BOOL v4 = v2 == v1;
    }

    else
    {
      BOOL v3 = 0;
      BOOL v4 = 0;
    }

    if (v4 || !v3) {
      return sub_1001921EC(v1);
    }
    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
  __break(1u);
  return result;
}

uint64_t sub_10018ED5C(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    sub_100192428();
    sub_1000175B0(&qword_1002AA358);
    sub_100192478();
    if (!v5 && v4)
    {
      BOOL v4 = v3 >= v2;
      BOOL v5 = v3 == v2;
    }

    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }

    if (v5 || !v4)
    {
      uint64_t v6 = sub_1001921F4();
      return sub_1001921D4(v6);
    }

    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_10018EDF0()
{
  if (v0 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    sub_1001927B8();
    if (!v4 && v3)
    {
      BOOL v3 = v2 >= v1;
      BOOL v4 = v2 == v1;
    }

    else
    {
      BOOL v3 = 0;
      BOOL v4 = 0;
    }

    if (v4 || !v3) {
      return sub_1001921EC(v1);
    }
    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
  __break(1u);
  return result;
}

uint64_t sub_10018EE78()
{
  if (v0 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    sub_100192738();
    if (!v4 && v3)
    {
      BOOL v3 = v2 >= v1;
      BOOL v4 = v2 == v1;
    }

    else
    {
      BOOL v3 = 0;
      BOOL v4 = 0;
    }

    if (v4 || !v3) {
      return sub_1001921EC(v1);
    }
    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
  __break(1u);
  return result;
}

uint64_t sub_10018EF0C(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    sub_100192428();
    unint64_t v5 = v3 + 72 * v4;
    if (v2 + 72 * v4 > v3)
    {
      BOOL v6 = v5 >= v2;
      BOOL v7 = v5 == v2;
    }

    else
    {
      BOOL v6 = 0;
      BOOL v7 = 0;
    }

    if (v7 || !v6)
    {
      sub_1000175B0(&qword_1002AA4D8);
      uint64_t v8 = sub_1001921F4();
      return sub_1001921D4(v8);
    }

    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  __break(1u);
  return result;
}

uint64_t sub_10018EFAC(uint64_t a1, uint64_t a2)
{
  return sub_10018F6C0(a1, a2);
}

uint64_t sub_10018EFB8(uint64_t a1, uint64_t a2)
{
  return sub_10018F5AC(a1, a2);
}

uint64_t sub_10018EFC4(uint64_t a1, uint64_t a2)
{
  return sub_10018F3F0(a1, a2);
}

uint64_t sub_10018EFD0(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    sub_100192428();
    unint64_t v5 = v3 + 80 * v4;
    if (v2 + 80 * v4 > v3)
    {
      BOOL v6 = v5 >= v2;
      BOOL v7 = v5 == v2;
    }

    else
    {
      BOOL v6 = 0;
      BOOL v7 = 0;
    }

    if (v7 || !v6)
    {
      sub_1000175B0(&qword_1002AA520);
      uint64_t v8 = sub_1001921F4();
      return sub_1001921D4(v8);
    }

    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  __break(1u);
  return result;
}

uint64_t sub_10018F070(uint64_t a1, uint64_t a2)
{
  return sub_10018F3F0(a1, a2);
}

uint64_t sub_10018F07C(uint64_t a1, uint64_t a2)
{
  return sub_10018F3F0(a1, a2);
}

uint64_t sub_10018F088()
{
  if (v0 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    sub_100192738();
    if (!v4 && v3)
    {
      BOOL v3 = v2 >= v1;
      BOOL v4 = v2 == v1;
    }

    else
    {
      BOOL v3 = 0;
      BOOL v4 = 0;
    }

    if (v4 || !v3) {
      return sub_1001921EC(v1);
    }
    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
  __break(1u);
  return result;
}

void *sub_10018F11C()
{
  if (v0 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    sub_1001927E4();
    if (!v6 && v5)
    {
      BOOL v5 = v4 >= v3;
      BOOL v6 = v4 == v3;
    }

    else
    {
      BOOL v5 = 0;
      BOOL v6 = 0;
    }

    if (v6 || !v5) {
      return sub_1001922DC(v3, v1, v2);
    }
    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = (void *)sub_10003502C(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_10018F19C()
{
  if (v0 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    sub_100192414();
    if (!v4 && v3)
    {
      BOOL v3 = v2 >= v1;
      BOOL v4 = v2 == v1;
    }

    else
    {
      BOOL v3 = 0;
      BOOL v4 = 0;
    }

    if (v4 || !v3) {
      return sub_1001921EC(v1);
    }
    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
  __break(1u);
  return result;
}

uint64_t sub_10018F228(uint64_t a1, uint64_t a2)
{
  return sub_10018F5AC(a1, a2);
}

uint64_t sub_10018F234(uint64_t a1, uint64_t a2)
{
  return sub_10018F240(a1, a2);
}

uint64_t sub_10018F240(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    sub_1001924A0();
    if (!v8 && v7)
    {
      BOOL v7 = v6 >= v4;
      BOOL v8 = v6 == v4;
    }

    else
    {
      BOOL v7 = 0;
      BOOL v8 = 0;
    }

    if (v8 || !v7)
    {
      sub_1001925E4(v2, v3, v4, v5);
      uint64_t v9 = sub_1001921F4();
      return sub_1001921D4(v9);
    }

    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  __break(1u);
  return result;
}

uint64_t sub_10018F2CC(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    sub_100192270();
    if (!v5 && v4)
    {
      BOOL v4 = v3 >= v2;
      BOOL v5 = v3 == v2;
    }

    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }

    if (v5 || !v4)
    {
      sub_1000175B0(&qword_1002B9470);
      uint64_t v6 = sub_1001921F4();
      return sub_1001921D4(v6);
    }

    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_10018F35C()
{
  if (v0 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    sub_100192414();
    if (!v4 && v3)
    {
      BOOL v3 = v2 >= v1;
      BOOL v4 = v2 == v1;
    }

    else
    {
      BOOL v3 = 0;
      BOOL v4 = 0;
    }

    if (v4 || !v3) {
      return sub_1001921EC(v1);
    }
    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
  __break(1u);
  return result;
}

uint64_t sub_10018F3E4(uint64_t a1, uint64_t a2)
{
  return sub_10018F3F0(a1, a2);
}

uint64_t sub_10018F3F0(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    sub_1001922A8();
    if (!v8 && v7)
    {
      BOOL v7 = v6 >= v4;
      BOOL v8 = v6 == v4;
    }

    else
    {
      BOOL v7 = 0;
      BOOL v8 = 0;
    }

    if (v8 || !v7)
    {
      sub_1001925E4(v2, v3, v4, v5);
      uint64_t v9 = sub_1001921F4();
      return sub_1001921D4(v9);
    }

    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  __break(1u);
  return result;
}

uint64_t sub_10018F478()
{
  if (v3 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    unint64_t v4 = v0 + 16 * v1;
    if (v2 + 16 * v1 > v0)
    {
      BOOL v5 = v4 >= v2;
      BOOL v6 = v4 == v2;
    }

    else
    {
      BOOL v5 = 0;
      BOOL v6 = 0;
    }

    if (v6 || !v5) {
      return sub_1001921EC(v2);
    }
    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

void *sub_10018F50C(char *a1, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    if (&a3[8 * a2] <= a1 || &a1[8 * a2] <= a3) {
      return sub_1001922DC(a3, a1, 8 * a2);
    }
    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = (void *)sub_10003502C(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

uint64_t sub_10018F5A0(uint64_t a1, uint64_t a2)
{
  return sub_10018F5AC(a1, a2);
}

uint64_t sub_10018F5AC(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    sub_1001924BC();
    if (!v6 & v5) {
      BOOL v7 = v4 > v2;
    }
    else {
      BOOL v7 = 0;
    }
    if (!v7)
    {
      v3(0LL);
      uint64_t v8 = sub_1001921F4();
      return sub_1001921D4(v8);
    }

    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  __break(1u);
  return result;
}

uint64_t sub_10018F638()
{
  if (v0 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    sub_1001927B8();
    if (!v4 && v3)
    {
      BOOL v3 = v2 >= v1;
      BOOL v4 = v2 == v1;
    }

    else
    {
      BOOL v3 = 0;
      BOOL v4 = 0;
    }

    if (v4 || !v3) {
      return sub_1001921EC(v1);
    }
    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
  __break(1u);
  return result;
}

uint64_t sub_10018F6C0(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    sub_1001924D8();
    if (!v8 && v7)
    {
      BOOL v7 = v6 >= v4;
      BOOL v8 = v6 == v4;
    }

    else
    {
      BOOL v7 = 0;
      BOOL v8 = 0;
    }

    if (v8 || !v7)
    {
      sub_1001925E4(v2, v3, v4, v5);
      uint64_t v9 = sub_1001921F4();
      return sub_1001921D4(v9);
    }

    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  __break(1u);
  return result;
}

uint64_t sub_10018F748(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100034FD0();
    sub_1000351B8();
  }

  else
  {
    sub_1001922A8();
    if (!v5 && v4)
    {
      BOOL v4 = v3 >= v2;
      BOOL v5 = v3 == v2;
    }

    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }

    if (v5 || !v4)
    {
      sub_1000175B0(&qword_1002B0E98);
      uint64_t v6 = sub_1001921F4();
      return sub_1001921D4(v6);
    }

    sub_100034FD0();
    sub_1000351A8();
  }

  uint64_t result = sub_10003502C(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

void sub_10018F7D8(void *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_1000F23A0();
    uint64_t v2 = v3;
  }

  uint64_t v4 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  sub_10018F840(v5);
  *a1 = v2;
}

void sub_10018F840(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (v3) {
        sub_10018FEAC(0LL, v3, 1LL, a1);
      }
      return;
    }

    goto LABEL_144;
  }

  Swift::Int v5 = v4;
  sub_10018DEC8(v3 / 2, (uint64_t)&type metadata for String);
  uint64_t v104 = v6;
  uint64_t v105 = v3;
  uint64_t v106 = v7;
  char v102 = a1;
  if (v3 <= 0)
  {
    int v107 = (char *)_swiftEmptyArrayStorage;
    unint64_t v37 = _swiftEmptyArrayStorage[2];
LABEL_110:
    if (v37 < 2)
    {
LABEL_121:
      swift_bridgeObjectRelease();
      if (v3 >= -1)
      {
        *(void *)(v104 + 16) = 0LL;
        swift_bridgeObjectRelease();
        return;
      }

      goto LABEL_149;
    }

    uint64_t v94 = *v102;
    while (1)
    {
      unint64_t v95 = v37 - 2;
      if (v37 < 2) {
        break;
      }
      if (!v94) {
        goto LABEL_153;
      }
      uint64_t v96 = v107;
      uint64_t v97 = *(void *)&v107[16 * v95 + 32];
      uint64_t v98 = *(void *)&v107[16 * v37 + 24];
      sub_10018FF70( (char *)(v94 + 16 * v97),  (char *)(v94 + 16LL * *(void *)&v107[16 * v37 + 16]),  v94 + 16 * v98,  v106);
      if (v1) {
        goto LABEL_106;
      }
      if (v98 < v97) {
        goto LABEL_139;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v107) & 1) == 0) {
        uint64_t v96 = sub_1001788E0((uint64_t)v107);
      }
      if (v95 >= *((void *)v96 + 2)) {
        goto LABEL_140;
      }
      BOOL v99 = &v96[16 * v95 + 32];
      *(void *)BOOL v99 = v97;
      *((void *)v99 + 1) = v98;
      unint64_t v100 = *((void *)v96 + 2);
      if (v37 > v100) {
        goto LABEL_141;
      }
      memmove(&v96[16 * v37 + 16], &v96[16 * v37 + 32], 16 * (v100 - v37));
      int v107 = v96;
      *((void *)v96 + sub_100019F7C(v0 + 2) = v100 - 1;
      unint64_t v37 = v100 - 1;
      Swift::Int v3 = v105;
      if (v100 <= 2) {
        goto LABEL_121;
      }
    }

LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
    return;
  }

  Swift::Int v103 = v5;
  Swift::Int v8 = 0LL;
  uint64_t v9 = *a1;
  uint64_t v101 = *a1 + 8;
  int v107 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    Swift::Int v10 = v8++;
    if (v8 >= v3) {
      goto LABEL_32;
    }
    uint64_t v11 = (uint64_t *)(v9 + 16 * v8);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    uint64_t v14 = (void *)(v9 + 16 * v10);
    uint64_t v15 = v14[1];
    if (v12 == *v14 && v13 == v15)
    {
      Swift::Int v18 = v10 + 2;
      if (v10 + 2 >= v3) {
        goto LABEL_31;
      }
      int v17 = 0;
LABEL_13:
      int v19 = (uint64_t *)(v101 + 16 * v18);
      do
      {
        uint64_t v20 = *(v19 - 1);
        uint64_t v21 = *v19;
        char v22 = (void *)(v9 + 16 * v8);
        uint64_t v23 = v22[1];
        if (v20 == *v22 && v21 == v23)
        {
          if ((v17 & 1) != 0) {
            goto LABEL_24;
          }
        }

        else if (((v17 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, *v22, v23, 1LL)) & 1) != 0)
        {
          goto LABEL_23;
        }

        v19 += 2;
        Swift::Int v25 = v18 + 1;
        Swift::Int v8 = v18;
        Swift::Int v18 = v25;
      }

      while (v25 < v3);
      Swift::Int v18 = v25;
      goto LABEL_23;
    }

    int v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, *v14, v15, 1LL);
    Swift::Int v18 = v10 + 2;
    if (v10 + 2 < v3) {
      goto LABEL_13;
    }
LABEL_23:
    Swift::Int v8 = v18;
    if ((v17 & 1) == 0) {
      goto LABEL_32;
    }
LABEL_24:
    if (v18 < v10) {
      goto LABEL_148;
    }
    if (v10 < v18)
    {
      uint64_t v26 = 16 * v18;
      uint64_t v27 = 16 * v10;
      Swift::Int v28 = v18;
      Swift::Int v29 = v10;
      do
      {
        if (v29 != --v28)
        {
          if (!v9) {
            goto LABEL_152;
          }
          uint64_t v30 = v9 + v26;
          uint64_t v31 = *(void *)(v9 + v27);
          uint64_t v32 = *(void *)(v9 + v27 + 8);
          *(_OWORD *)(v9 + v27) = *(_OWORD *)(v9 + v26 - 16);
          *(void *)(v30 - 16) = v31;
          *(void *)(v30 - 8) = v32;
        }

        ++v29;
        v26 -= 16LL;
        v27 += 16LL;
      }

      while (v29 < v28);
    }

LABEL_73:
    if ((v63 & 1) != 0) {
      goto LABEL_133;
    }
    uint64_t v71 = &v38[16 * v40];
    uint64_t v73 = *(void *)v71;
    uint64_t v72 = *((void *)v71 + 1);
    BOOL v51 = __OFSUB__(v72, v73);
    uint64_t v74 = v72 - v73;
    if (v51) {
      goto LABEL_135;
    }
    if (v74 < v62) {
      goto LABEL_90;
    }
LABEL_81:
    unint64_t v79 = v40 - 1;
    if (v40 - 1 >= v37)
    {
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }

    if (!v9) {
      goto LABEL_151;
    }
    uint64_t v80 = &v38[16 * v79];
    uint64_t v81 = *(void *)v80;
    unint64_t v82 = &v38[16 * v40];
    uint64_t v83 = *((void *)v82 + 1);
    sub_10018FF70((char *)(v9 + 16LL * *(void *)v80), (char *)(v9 + 16LL * *(void *)v82), v9 + 16 * v83, v106);
    if (v1) {
      break;
    }
    if (v83 < v81) {
      goto LABEL_124;
    }
    if (v40 > *((void *)v107 + 2)) {
      goto LABEL_125;
    }
    *(void *)uint64_t v80 = v81;
    *(void *)&v38[16 * v79 + 8] = v83;
    unint64_t v84 = *((void *)v107 + 2);
    if (v40 >= v84) {
      goto LABEL_126;
    }
    uint64_t v34 = v107;
    unint64_t v37 = v84 - 1;
    memmove(&v38[16 * v40], v82 + 16, 16 * (v84 - 1 - v40));
    *((void *)v107 + sub_100019F7C(v0 + 2) = v84 - 1;
    if (v84 <= 2) {
      goto LABEL_90;
    }
  }

        LOBYTE(v28) = 0;
        goto LABEL_74;
      }

      if (v33 == 1684632935 && v34 == 0xE400000000000000LL)
      {
        swift_bridgeObjectRelease();
        sub_100196518();
      }

      else
      {
        uint64_t v45 = sub_100196548(1684632935LL, 0xE400000000000000LL);
        swift_bridgeObjectRelease();
        sub_100196518();
        if ((v45 & 1) == 0)
        {
          uint64_t result = (void *)sub_100023EF4();
LABEL_41:
          uint64_t v24 = v65;
          goto LABEL_78;
        }
      }

      uint64_t result = (void *)swift_bridgeObjectRelease();
      uint64_t v60 = v28;
      BOOL v61 = v29;
      goto LABEL_41;
    }

    uint64_t result = (void *)sub_100196508();
LABEL_78:
    ++v22;
    int v19 = v66;
    if (v22 == v68)
    {
      sub_10003561C();
      a1 = v58;
      a2 = v59;
      uint64_t v54 = v60;
      uint64_t v53 = v61;
      goto LABEL_93;
    }
  }

  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
  return result;
}

              uint64_t v76 = (os_log_s *)v73;
              goto LABEL_64;
            }

            uint64_t v168 = sub_1001B41D8;
            uint64_t v169 = 0LL;
            __int128 v166 = (uint64_t)_NSConcreteStackBlock;
            uint64_t v167 = 1107296256LL;
            uint64_t v1 = (int *)sub_1001B93D8((uint64_t)&unk_100290EB0);
            goto LABEL_46;
          }

          uint64_t v119 = sub_1000D6B98((uint64_t)&unk_100290B00);
          *(void *)(v119 + 16) = v3;
          sub_1001B93FC(v119, (uint64_t)sub_1001B77E8);
          sub_1001B93D8((uint64_t)&unk_100290B18);
          sub_1001B93E4();
          Swift::Int v29 = [a1 migrateToVersion:18000 usingBlock:v1];
        }

LABEL_106:
  swift_bridgeObjectRelease();
  if (v105 < -1) {
    goto LABEL_145;
  }
  *(void *)(v104 + 16) = 0LL;
  swift_bridgeObjectRelease();
}

uint64_t sub_10018FEAC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
    while (2)
    {
      uint64_t v9 = (uint64_t *)(v7 + 16 * v4);
      uint64_t result = *v9;
      uint64_t v10 = v9[1];
      uint64_t v11 = v6;
      uint64_t v12 = (uint64_t *)v8;
      do
      {
        uint64_t v13 = *(v12 - 2);
        uint64_t v14 = *(v12 - 1);
        if (result == v13 && v10 == v14) {
          break;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, v13, v14, 1LL);
        if ((result & 1) == 0) {
          break;
        }
        if (!v7)
        {
          __break(1u);
          return result;
        }

        uint64_t result = *v12;
        uint64_t v10 = v12[1];
        *(_OWORD *)uint64_t v12 = *((_OWORD *)v12 - 1);
        *(v12 - 1) = v10;
        *(v12 - sub_100019F7C(v0 + 2) = result;
        v12 -= 2;
        ++v11;
      }

      while (v4 != v11);
      ++v4;
      v8 += 16LL;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }

  return result;
}

uint64_t sub_10018FF70(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 16;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 16;
  if (v9 >= v11)
  {
    sub_1000314B8(a2, (uint64_t)(a3 - (void)a2) / 16, a4);
    uint64_t v12 = &v4[16 * v11];
    if (v7 >= v6 || v10 < 16) {
      goto LABEL_47;
    }
    uint64_t v20 = (char *)(a3 - 16);
    while (1)
    {
      uint64_t v21 = v20 + 16;
      uint64_t v22 = *((void *)v12 - 2);
      uint64_t v23 = *((void *)v12 - 1);
      uint64_t v24 = v12 - 16;
      uint64_t v25 = *((void *)v6 - 2);
      uint64_t v26 = *((void *)v6 - 1);
      BOOL v27 = v22 == v25 && v23 == v26;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v25, v26, 1LL) & 1) == 0)
      {
        BOOL v29 = v21 != v12 || v20 >= v12;
        v12 -= 16;
        if (!v29) {
          goto LABEL_43;
        }
      }

      else
      {
        BOOL v28 = v21 != v6 || v20 >= v6;
        uint64_t v24 = v6 - 16;
        v6 -= 16;
        if (!v28) {
          goto LABEL_43;
        }
      }

      *(_OWORD *)uint64_t v20 = *(_OWORD *)v24;
LABEL_43:
      v20 -= 16;
      if (v6 <= v7 || v12 <= v4) {
        goto LABEL_47;
      }
    }
  }

  sub_1000314B8(a1, (a2 - a1) / 16, a4);
  uint64_t v12 = &v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      uint64_t v14 = *((void *)v6 + 1);
      uint64_t v15 = *((void *)v4 + 1);
      BOOL v16 = *(void *)v6 == *(void *)v4 && v14 == v15;
      if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v6, v14, *(void *)v4, v15, 1LL) & 1) != 0) {
        break;
      }
      int v17 = v4;
      BOOL v16 = v7 == v4;
      v4 += 16;
      if (!v16) {
        goto LABEL_15;
      }
LABEL_16:
      v7 += 16;
    }

    int v17 = v6;
    BOOL v16 = v7 == v6;
    v6 += 16;
    if (v16) {
      goto LABEL_16;
    }
LABEL_15:
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v17;
    goto LABEL_16;
  }

uint64_t type metadata accessor for HTTPResponseHead._Storage()
{
  return objc_opt_self(&OBJC_CLASS____TtCV25ASOctaneSupportXPCService16HTTPResponseHeadP33_67DF9BF345991F7988C12A02D92F79108_Storage);
}

uint64_t sub_100190134(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >= 0x3C) {
    return swift_bridgeObjectRetain(a3);
  }
  return result;
}

void sub_100190148(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  if (!v4) {
    *a4 = v6;
  }
}

uint64_t sub_100190178( void *(*a1)(void *__return_ptr, void, void), uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  if ((a6 & 0x1000000000000000LL) != 0) {
    return 3LL;
  }
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    uint64_t v12 = HIBYTE(a6) & 0xF;
    v14[0] = a5;
    v14[1] = a6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v11 = v14;
  }

  else if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v11 = (void *)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v11 = (void *)_StringObject.sharedUTF8.getter(a5);
  }

  return (uint64_t)sub_10019023C(v11, v12, a3, a4, a5, a6, a1);
}

void *sub_10019023C( void *result, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, void *(*a7)(void *__return_ptr, void, void))
{
  void *(*v18)(void *__return_ptr, void, void);
  unint64_t v19;
  unint64_t v20;
  void *(*v21)(void *__return_ptr, void, void);
  void *(*v22)(void *__return_ptr, void, void);
  unint64_t v23;
  void *(*v24)(void *__return_ptr, void, void);
  void *v25;
  char *v26;
  void *(*v27)(void *__return_ptr, void, void);
  uint64_t v28;
  unint64_t v11 = a3;
  uint64_t v12 = result;
  uint64_t v13 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000LL) == 0) {
    LOBYTE(vsub_100019F7C(v0 + 13) = 1;
  }
  uint64_t v14 = 4LL << v13;
  unint64_t v15 = a3 & 0xC;
  unint64_t v16 = a3;
  if (v15 == 4LL << v13)
  {
    Swift::Int v18 = a7;
    uint64_t result = (void *)sub_1000CF8B0(a3, a5, a6);
    a7 = v18;
    unint64_t v16 = (unint64_t)result;
  }

  if ((a6 & 0x1000000000000000LL) != 0)
  {
    BOOL v27 = a7;
    int v19 = a5 & 0xFFFFFFFFFFFFLL;
    if ((a6 & 0x2000000000000000LL) != 0) {
      int v19 = HIBYTE(a6) & 0xF;
    }
    if (v19 < v16 >> 16) {
      goto LABEL_34;
    }
    uint64_t result = (void *)String.UTF8View._foreignDistance(from:to:)(15LL, v16, a5, a6);
    int v17 = (char *)result;
    a7 = v27;
  }

  else
  {
    int v17 = (char *)(v16 >> 16);
  }

  if (v15 == v14)
  {
    uint64_t v20 = v11;
    uint64_t v21 = a7;
    uint64_t result = (void *)sub_1000CF8B0(v20, a5, a6);
    a7 = v21;
    unint64_t v11 = (unint64_t)result;
  }

  if ((a4 & 0xC) == v14)
  {
    uint64_t v22 = a7;
    uint64_t result = (void *)sub_1000CF8B0(a4, a5, a6);
    a7 = v22;
    a4 = (unint64_t)result;
    if ((a6 & 0x1000000000000000LL) == 0) {
      goto LABEL_11;
    }
  }

  else if ((a6 & 0x1000000000000000LL) == 0)
  {
LABEL_11:
    uint64_t result = (void *)((a4 >> 16) - (v11 >> 16));
    goto LABEL_22;
  }

  uint64_t v23 = a5 & 0xFFFFFFFFFFFFLL;
  if ((a6 & 0x2000000000000000LL) != 0) {
    uint64_t v23 = HIBYTE(a6) & 0xF;
  }
  if (v23 < v11 >> 16) {
    goto LABEL_32;
  }
  if (v23 < a4 >> 16)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    return result;
  }

  uint64_t v24 = a7;
  uint64_t result = (void *)String.UTF8View._foreignDistance(from:to:)(v11, a4, a5, a6);
  a7 = v24;
LABEL_22:
  if (__OFADD__(v17, result))
  {
    __break(1u);
    goto LABEL_31;
  }

  uint64_t v25 = result;
  if ((uint64_t)((char *)result + (unint64_t)v17) < (uint64_t)v17)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  if (v12) {
    uint64_t v26 = &v17[(void)v12];
  }
  else {
    uint64_t v26 = 0LL;
  }
  uint64_t result = a7(&v28, v26, v25);
  if (!v7) {
    return (void *)v28;
  }
  return result;
}

uint64_t sub_100190440(uint64_t *a1, uint64_t *a2)
{
  return sub_10018DFB4(*a1, a1[1], *a2, a2[1]) & 1;
}

uint64_t type metadata accessor for HTTPRequestHead._Storage()
{
  return objc_opt_self(&OBJC_CLASS____TtCV25ASOctaneSupportXPCService15HTTPRequestHeadP33_67DF9BF345991F7988C12A02D92F79108_Storage);
}

uint64_t type metadata accessor for HTTPPart(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for HTTPPart);
}

unint64_t sub_100190498()
{
  unint64_t result = qword_1002B81D0;
  if (!qword_1002B81D0)
  {
    unint64_t result = swift_getWitnessTable( protocol conformance descriptor for HTTPHeaders.Index,  &type metadata for HTTPHeaders.Index);
    atomic_store(result, (unint64_t *)&qword_1002B81D0);
  }

  return result;
}

unint64_t sub_1001904D8()
{
  unint64_t result = qword_1002B81D8;
  if (!qword_1002B81D8)
  {
    unint64_t result = swift_getWitnessTable(protocol conformance descriptor for HTTPHeaders, &type metadata for HTTPHeaders);
    atomic_store(result, (unint64_t *)&qword_1002B81D8);
  }

  return result;
}

void sub_100190514()
{
}

unint64_t sub_100190548()
{
  unint64_t result = qword_1002B81F0;
  if (!qword_1002B81F0)
  {
    unint64_t result = swift_getWitnessTable(protocol conformance descriptor for HTTPHeaders, &type metadata for HTTPHeaders);
    atomic_store(result, (unint64_t *)&qword_1002B81F0);
  }

  return result;
}

void sub_100190584()
{
}

unint64_t sub_1001905BC()
{
  unint64_t result = qword_1002B8208;
  if (!qword_1002B8208)
  {
    unint64_t result = swift_getWitnessTable(protocol conformance descriptor for HTTPHeaders, &type metadata for HTTPHeaders);
    atomic_store(result, (unint64_t *)&qword_1002B8208);
  }

  return result;
}

void sub_1001905F8()
{
}

void sub_10019062C()
{
}

void sub_100190660(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), const char *a4)
{
  if (!*a1)
  {
    uint64_t v7 = sub_100018EC0(a2);
    uint64_t v8 = a3();
    atomic_store(swift_getWitnessTable(a4, v7, &v8), a1);
  }

  sub_10001DBAC();
}

unint64_t sub_1001906BC()
{
  unint64_t result = qword_1002B8220;
  if (!qword_1002B8220)
  {
    unint64_t result = swift_getWitnessTable(protocol conformance descriptor for HTTPHeaders, &type metadata for HTTPHeaders);
    atomic_store(result, (unint64_t *)&qword_1002B8220);
  }

  return result;
}

unint64_t sub_1001906FC()
{
  unint64_t result = qword_1002B8228;
  if (!qword_1002B8228)
  {
    unint64_t result = swift_getWitnessTable("-T\b", &type metadata for HTTPHeaders.Index);
    atomic_store(result, (unint64_t *)&qword_1002B8228);
  }

  return result;
}

void sub_100190738()
{
}

void sub_100190764()
{
}

void sub_100190790()
{
}

unint64_t sub_1001907C0()
{
  unint64_t result = qword_1002B8250;
  if (!qword_1002B8250)
  {
    unint64_t result = swift_getWitnessTable( protocol conformance descriptor for HTTPParserError,  &type metadata for HTTPParserError);
    atomic_store(result, (unint64_t *)&qword_1002B8250);
  }

  return result;
}

uint64_t destroy for HTTPRequestHead(void *a1)
{
  return swift_bridgeObjectRelease(a1[1]);
}

void type metadata accessor for HTTPRequestHead()
{
}

uint64_t sub_100190844(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 24));
    if (v4 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64LL;
      uint64_t v5[2] = "\t";
      swift_initEnumMetadataMultiPayload(a1, 0LL, 3LL, v5);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1001908D4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  if (*(void *)(v6 + 64) > v5) {
    unint64_t v5 = *(void *)(v6 + 64);
  }
  if (v5 <= 9) {
    uint64_t v7 = 9LL;
  }
  else {
    uint64_t v7 = v5;
  }
  int v8 = *(_DWORD *)(v6 + 80) | *(_DWORD *)(v4 + 80);
  if ((unint64_t)(v7 + 1) <= 0x18 && (v8 & 0x1000F8) == 0)
  {
    unsigned int v11 = *((unsigned __int8 *)a2 + v7);
    if (v11 >= 3)
    {
      else {
        uint64_t v12 = 4LL;
      }
      __asm { BR              X15 }
    }

    if (v11 == 2)
    {
      uint64_t v13 = *a2;
      *(void *)uint64_t v3 = *a2;
      *(_BYTE *)(v3 + 8) = *((_BYTE *)a2 + 8);
      *(_BYTE *)(v3 + sub_100160A0C(v3, v4, v5, v6, v7) = 2;
      swift_bridgeObjectRetain(v13);
    }

    else if (v11 == 1)
    {
      (*(void (**)(uint64_t))(v6 + 16))(a1);
      *(_BYTE *)(v3 + sub_100160A0C(v3, v4, v5, v6, v7) = 1;
    }

    else
    {
      (*(void (**)(uint64_t))(v4 + 16))(a1);
      *(_BYTE *)(v3 + sub_100160A0C(v3, v4, v5, v6, v7) = 0;
    }
  }

  else
  {
    uint64_t v10 = *a2;
    *(void *)uint64_t v3 = *a2;
    uint64_t v3 = v10 + (((v8 & 0xF8 | 7u) + 16LL) & ~(unint64_t)(v8 & 0xF8 | 7u));
    swift_retain(v10);
  }

  return v3;
}

uint64_t sub_100190A38(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8LL);
  unint64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = *(void *)(*(void *)(a2 + 24) - 8LL);
  if (*(void *)(v4 + 64) > v3) {
    unint64_t v3 = *(void *)(v4 + 64);
  }
  if (v3 <= 9) {
    unint64_t v3 = 9LL;
  }
  unsigned int v5 = *((unsigned __int8 *)a1 + v3);
  if (v5 < 3)
  {
    if (v5 == 2)
    {
      return swift_bridgeObjectRelease(*a1);
    }

    else if (v5 == 1)
    {
      return (*(uint64_t (**)(void))(v4 + 8))();
    }

    else
    {
      return (*(uint64_t (**)(void))(v2 + 8))();
    }
  }

  else
  {
    else {
      uint64_t v6 = 4LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_100190A98 + 4 * byte_10020914D[v6]))();
  }

uint64_t sub_100190B04(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  if (*(void *)(v6 + 64) > v5) {
    unint64_t v5 = *(void *)(v6 + 64);
  }
  if (v5 <= 9) {
    uint64_t v7 = 9LL;
  }
  else {
    uint64_t v7 = v5;
  }
  unsigned int v8 = *((unsigned __int8 *)a2 + v7);
  if (v8 >= 3)
  {
    else {
      uint64_t v9 = 4LL;
    }
    __asm { BR              X15 }
  }

  if (v8 == 2)
  {
    uint64_t v10 = *a2;
    *(void *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_BYTE *)(a1 + sub_100160A0C(v3, v4, v5, v6, v7) = 2;
    swift_bridgeObjectRetain(v10);
  }

  else if (v8 == 1)
  {
    (*(void (**)(uint64_t))(v6 + 16))(a1);
    *(_BYTE *)(a1 + sub_100160A0C(v3, v4, v5, v6, v7) = 1;
  }

  else
  {
    (*(void (**)(uint64_t))(v4 + 16))(a1);
    *(_BYTE *)(a1 + sub_100160A0C(v3, v4, v5, v6, v7) = 0;
  }

  return a1;
}

uint64_t *sub_100190C20(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    unint64_t v8 = *(void *)(v7 + 64);
    uint64_t v9 = *(void *)(v6 - 8);
    if (*(void *)(v9 + 64) > v8) {
      unint64_t v8 = *(void *)(v9 + 64);
    }
    if (v8 <= 9) {
      uint64_t v10 = 9LL;
    }
    else {
      uint64_t v10 = v8;
    }
    unsigned int v11 = *((unsigned __int8 *)a1 + v10);
    if (v11 >= 3)
    {
      else {
        uint64_t v12 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v11 == 2)
    {
      swift_bridgeObjectRelease(*a1);
    }

    else
    {
      if (v11 == 1) {
        uint64_t v13 = *(void (**)(void))(v9 + 8);
      }
      else {
        uint64_t v13 = *(void (**)(void))(v7 + 8);
      }
      v13();
    }

    unsigned int v14 = *((unsigned __int8 *)a2 + v10);
    if (v14 >= 3)
    {
      else {
        uint64_t v15 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v14 == 2)
    {
      uint64_t v16 = *a2;
      *a1 = *a2;
      *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
      *((_BYTE *)a1 + v1sub_10019B2E8(v0, 0) = 2;
      swift_bridgeObjectRetain(v16);
    }

    else if (v14 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v6);
      *((_BYTE *)a1 + v1sub_10019B2E8(v0, 0) = 1;
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v1sub_10019B2E8(v0, 0) = 0;
    }
  }

  return a1;
}

uint64_t sub_100190E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  if (*(void *)(v6 + 64) > v5) {
    unint64_t v5 = *(void *)(v6 + 64);
  }
  if (v5 <= 9) {
    uint64_t v7 = 9LL;
  }
  else {
    uint64_t v7 = v5;
  }
  unsigned int v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 3)
  {
    else {
      uint64_t v9 = 4LL;
    }
    __asm { BR              X15 }
  }

  if (v8 == 2)
  {
    *(void *)a1 = *(void *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    char v10 = 2;
  }

  else if (v8 == 1)
  {
    (*(void (**)(uint64_t))(v6 + 32))(a1);
    char v10 = 1;
  }

  else
  {
    (*(void (**)(uint64_t))(v4 + 32))(a1);
    char v10 = 0;
  }

  *(_BYTE *)(a1 + sub_100160A0C(v3, v4, v5, v6, v7) = v10;
  return a1;
}

uint64_t sub_100190F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    unint64_t v8 = *(void *)(v7 + 64);
    uint64_t v9 = *(void *)(v6 - 8);
    if (*(void *)(v9 + 64) > v8) {
      unint64_t v8 = *(void *)(v9 + 64);
    }
    if (v8 <= 9) {
      uint64_t v10 = 9LL;
    }
    else {
      uint64_t v10 = v8;
    }
    unsigned int v11 = *(unsigned __int8 *)(a1 + v10);
    if (v11 >= 3)
    {
      else {
        uint64_t v12 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v11 == 2)
    {
      swift_bridgeObjectRelease(*(void *)a1);
    }

    else
    {
      if (v11 == 1) {
        uint64_t v13 = *(void (**)(void))(v9 + 8);
      }
      else {
        uint64_t v13 = *(void (**)(void))(v7 + 8);
      }
      v13();
    }

    unsigned int v14 = *(unsigned __int8 *)(a2 + v10);
    if (v14 >= 3)
    {
      else {
        uint64_t v15 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v14 == 2)
    {
      *(void *)a1 = *(void *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      char v16 = 2;
    }

    else if (v14 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(a1, a2, v6);
      char v16 = 1;
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v5);
      char v16 = 0;
    }

    *(_BYTE *)(a1 + v1sub_10019B2E8(v0, 0) = v16;
  }

  return a1;
}

uint64_t sub_10019110C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
  if (*(void *)(*(void *)(*(void *)(a3 + 24) - 8LL) + 64LL) > v3) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8LL) + 64LL);
  }
  uint64_t v4 = 9LL;
  if (v3 > 9) {
    uint64_t v4 = v3;
  }
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_23;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 253) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)(a1 + v5);
      if (!v7) {
        goto LABEL_23;
      }
      goto LABEL_16;
    }

    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)(a1 + v5);
      if (!*(_WORD *)(a1 + v5)) {
        goto LABEL_23;
      }
      goto LABEL_16;
    }

    if (v9 < 2)
    {
LABEL_23:
      unsigned int v11 = *(unsigned __int8 *)(a1 + v4);
      if (v11 >= 3) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0LL;
      }
    }
  }

  int v7 = *(unsigned __int8 *)(a1 + v5);
  if (!*(_BYTE *)(a1 + v5)) {
    goto LABEL_23;
  }
LABEL_16:
  int v10 = (v7 - 1) << v6;
  if (!(_DWORD)v5) {
    return (v10 + 254);
  }
  return ((uint64_t (*)(void))((char *)&loc_1001911E0 + 4 * byte_100209170[(v5 - 1)]))();
}

void sub_10019122C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8LL) + 64LL);
  if (*(void *)(*(void *)(*(void *)(a4 + 24) - 8LL) + 64LL) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8LL) + 64LL);
  }
  if (v5 <= 9) {
    unint64_t v5 = 9LL;
  }
  size_t v6 = v5 + 1;
  char v7 = 8 * (v5 + 1);
  if (a3 < 0xFE)
  {
    unsigned int v8 = 0;
  }

  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << v7) - 253) >> v7) + 1;
    if (HIWORD(v10))
    {
      unsigned int v8 = &dword_100000004;
    }

    else if (v10 >= 0x100)
    {
      unsigned int v8 = 2;
    }

    else
    {
      unsigned int v8 = v10 > 1;
    }
  }

  else
  {
    unsigned int v8 = &_mh_execute_header.magic + 1;
  }

  if (a2 <= 0xFD) {
    __asm { BR              X11 }
  }

  unsigned int v9 = a2 - 254;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      int v11 = v9 & ~(-1 << v7);
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v11;
        *((_BYTE *)a1 + sub_100019F7C(v0 + 2) = BYTE2(v11);
      }

      else if ((_DWORD)v6 == 2)
      {
        *a1 = v11;
      }

      else
      {
        *(_BYTE *)a1 = v11;
      }
    }
  }

  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v9;
  }

  __asm { BR              X10 }

uint64_t sub_1001913E0(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 64LL);
  if (*(void *)(*(void *)(*(void *)(a2 + 24) - 8LL) + 64LL) > v2) {
    unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8LL) + 64LL);
  }
  uint64_t v3 = 9LL;
  if (v2 > 9) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v4 = 4LL;
  }
  return ((uint64_t (*)(void))((char *)&loc_100191438 + 4 * byte_10020917E[v4]))();
}

void sub_100191480(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  if (a2 > 2)
  {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
    if (*(void *)(*(void *)(*(void *)(a3 + 24) - 8LL) + 64LL) > v5) {
      unint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8LL) + 64LL);
    }
    if (v5 <= 9) {
      size_t v6 = 9LL;
    }
    else {
      size_t v6 = v5;
    }
    unsigned int v7 = a2 - 3;
    if (v6 < 4)
    {
      unsigned int v8 = v7 >> (8 * v6);
      int v9 = v7 & ~(-1 << (8 * v6));
      a1[v6] = v8 + 3;
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *(_WORD *)a1 = v9;
        a1[2] = BYTE2(v9);
      }

      else if ((_DWORD)v6 == 2)
      {
        *(_WORD *)a1 = v9;
      }

      else
      {
        *a1 = v9;
      }
    }

    else
    {
      a1[v6] = 3;
      bzero(a1, v6);
      *(_DWORD *)a1 = v7;
    }
  }

  else
  {
    unint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8LL) + 64LL);
    if (v4 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL)) {
      unint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
    }
    if (v4 <= 9) {
      unint64_t v4 = 9LL;
    }
    a1[v4] = a2;
  }

void _s25ASOctaneSupportXPCService15HTTPRequestHeadVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_retain();
  sub_10001DBCC();
  sub_10001945C();
}

uint64_t _s25ASOctaneSupportXPCService15HTTPRequestHeadVwca_0()
{
  *(void *)uint64_t v1 = *v2;
  swift_retain();
  swift_release();
  *(void *)(v1 + 8) = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  sub_10001A3F8();
  *(_BYTE *)(v1 + 16) = *(_BYTE *)(v0 + 16);
  return v1;
}

void _s25ASOctaneSupportXPCService15HTTPRequestHeadVwta_0()
{
  *(_OWORD *)uint64_t v1 = *(_OWORD *)v0;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v1 + 16) = *(_BYTE *)(v0 + 16);
  sub_10001945C();
}

uint64_t _s25ASOctaneSupportXPCService15HTTPRequestHeadVwet_0(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 17))
    {
      LODWORD(v7(v1, v0, 2LL, v3, v6, v5, v4, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v7(v1, v0, 2LL, v3, v6, v5, v4, v2) = -1;
  }

  return (v2 + 1);
}

void *sub_10019168C(void *result, int a2, int a3)
{
  if (a2 < 0)
  {
    *((_BYTE *)result + 16) = 0;
    *uint64_t result = a2 ^ 0x80000000;
    result[1] = 0LL;
    if (a3 < 0) {
      *((_BYTE *)result + 17) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
      return sub_1001927B0(result, (a2 - 1));
    }

    *((_BYTE *)result + 17) = 0;
    if (a2) {
      return sub_1001927B0(result, (a2 - 1));
    }
  }

  return result;
}

void type metadata accessor for HTTPResponseHead()
{
}

uint64_t initializeBufferWithCopyOfBuffer for HTTPHeaders(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *assignWithCopy for HTTPHeaders(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t *assignWithTake for HTTPHeaders(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPHeaders(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 9))
    {
      LODWORD(v7(v1, v0, 2LL, v3, v6, v5, v4, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v7(v1, v0, 2LL, v3, v6, v5, v4, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPHeaders(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for HTTPHeaders()
{
}

void type metadata accessor for HTTPHeaders.Index()
{
}

unint64_t destroy for HTTPMethod(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

void _s25ASOctaneSupportXPCService10HTTPMethodOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }

  sub_10001945C();
}

void *assignWithCopy for HTTPMethod(void *a1, void *a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      uint64_t v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }

uint64_t assignWithTake for HTTPMethod(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  unint64_t v5 = *(void *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPMethod(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 > 0x7FFFFFDD && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483614);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 33;
  if (v4 >= 0x23) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for HTTPMethod(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFDE)
  {
    *(void *)unint64_t result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483614;
    if (a3 >= 0x7FFFFFDE) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFDE) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 33;
    }
  }

  return result;
}

void *sub_100191A30(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0LL;
  }

  else if (a2)
  {
    result[1] = (a2 - 1);
  }

  return result;
}

void type metadata accessor for HTTPMethod()
{
}

_DWORD *initializeBufferWithCopyOfBuffer for HTTPVersion(_DWORD *result, _DWORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for HTTPVersion(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for HTTPVersion(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 4) = v3;
  return result;
}

void type metadata accessor for HTTPVersion()
{
}

uint64_t getEnumTagSinglePayload for HTTPParserError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xE9)
  {
    if (a2 + 23 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 23) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 24;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for HTTPParserError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 23 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 23) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xE9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xE8) {
    return ((uint64_t (*)(void))((char *)&loc_100191B90 + 4 * byte_100209188[v4]))();
  }
  *a1 = a2 + 23;
  return ((uint64_t (*)(void))((char *)sub_100191BC4 + 4 * byte_100209183[v4]))();
}

uint64_t sub_100191BC4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100191BCC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100191BD4LL);
  }
  return result;
}

uint64_t sub_100191BE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100191BE8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 23;
  return result;
}

uint64_t sub_100191BEC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100191BF4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for HTTPParserError()
{
}

unint64_t destroy for HTTPResponseStatus(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 16);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

void _s25ASOctaneSupportXPCService18HTTPResponseStatusOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (v3 < 0xFFFFFFFF)
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
  }

  else
  {
    *(void *)(a1 + 16) = v3;
    swift_bridgeObjectRetain();
  }

  sub_10001945C();
}

void *assignWithCopy for HTTPResponseStatus(void *a1, void *a2)
{
  unint64_t v4 = a1[2];
  unint64_t v5 = a2[2];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      uint64_t v7 = a2[2];
      a1[2] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }

uint64_t assignWithTake for HTTPResponseStatus(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    return a1;
  }

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPResponseStatus(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 > 0x7FFFFFC3 && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 2147483588);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 59;
  if (v4 >= 0x3D) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for HTTPResponseStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFC4)
  {
    *(void *)unint64_t result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483588;
    if (a3 >= 0x7FFFFFC4) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFC4) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2 + 59;
    }
  }

  return result;
}

uint64_t sub_100191E48(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(MarkedCircularBuffer.subscript.setter(v0, v2, v1) = -1;
  }
  return (v1 + 1);
}

void *sub_100191E60(void *result, int a2)
{
  if (a2 < 0)
  {
    result[1] = 0LL;
    result[2] = 0LL;
    *unint64_t result = a2 ^ 0x80000000;
  }

  else if (a2)
  {
    result[2] = (a2 - 1);
  }

  return result;
}

void type metadata accessor for HTTPResponseStatus()
{
}

uint64_t sub_100191E90(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100191EDC + 4 * byte_100209192[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100191F10 + 4 * byte_10020918D[v4]))();
}

uint64_t sub_100191F10(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100191F18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100191F20LL);
  }
  return result;
}

uint64_t sub_100191F2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100191F34LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100191F38(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100191F40(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for KeepAliveState()
{
}

unint64_t sub_100191F5C()
{
  unint64_t result = qword_1002B8430;
  if (!qword_1002B8430)
  {
    unint64_t result = swift_getWitnessTable(byte_100209874, &unk_10028E610);
    atomic_store(result, (unint64_t *)&qword_1002B8430);
  }

  return result;
}

unint64_t sub_100191F98()
{
  unint64_t result = qword_1002B8438;
  if (!qword_1002B8438)
  {
    unint64_t result = swift_getWitnessTable(byte_1001F56A8, &type metadata for AppInformationRequest.Extension);
    atomic_store(result, (unint64_t *)&qword_1002B8438);
  }

  return result;
}

unint64_t sub_100191FD4()
{
  unint64_t result = qword_1002B8440;
  if (!qword_1002B8440)
  {
    uint64_t v1 = type metadata accessor for Calendar.Component(255LL);
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for Calendar.Component, v1);
    atomic_store(result, (unint64_t *)&qword_1002B8440);
  }

  return result;
}

uint64_t sub_100192014()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_3:
  for (unint64_t i = v1[1]; i != v3; unint64_t i = v1[1])
  {
    if ((v2 & 0xC000000000000001LL) != 0)
    {
      uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v2);
    }

    else
    {
      if ((i & 0x8000000000000000LL) != 0)
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        if (v2 < 0) {
          uint64_t v7 = v2;
        }
        else {
          uint64_t v7 = v2 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain();
        uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v7);
        sub_10001A3F8();
        goto LABEL_3;
      }

      if (i >= *(void *)((v2 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
        goto LABEL_16;
      }
      uint64_t v5 = *(void *)(v2 + 32 + 8 * i);
      swift_retain();
    }

    if (__OFADD__(i, 1LL)) {
      goto LABEL_17;
    }
    v1[1] = i + 1;
    uint64_t v8 = v5;
    swift_release(v5);
  }

  return 0LL;
}

unint64_t sub_100192124()
{
  unint64_t result = qword_1002B8450;
  if (!qword_1002B8450)
  {
    unint64_t result = swift_getWitnessTable(byte_100202A2C, &type metadata for FetchSoftwareAddOnsRequest.Extension);
    atomic_store(result, (unint64_t *)&qword_1002B8450);
  }

  return result;
}

uint64_t sub_100192160()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100192184()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100192194(_BYTE *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
}

uint64_t sub_1001921C4(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v2, v3, 0LL);
}

uint64_t sub_1001921D4(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

uint64_t sub_1001921E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_bridgeObjectRelease(a3);
}

uint64_t sub_1001921EC(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

uint64_t sub_1001921F4()
{
  return v0;
}

uint64_t sub_100192208()
{
  return sub_10002D0E0();
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100192290()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_10019229C(uint64_t a1)
{
  *uint64_t v2 = a1;
  return swift_release(v1);
}

  ;
}

uint64_t sub_1001922C4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1001483F4(a1, a2, a3);
}

void *sub_1001922DC(void *__dst, const void *__src, size_t __n)
{
  return memcpy(__dst, __src, __n);
}

uint64_t sub_1001922E4()
{
  return 0LL;
}

uint64_t sub_1001922F4(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  *(void *)(a1 + 24) = v2;
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = v3;
  *(_DWORD *)(a1 + 4sub_10019B2E8(v0, 0) = v5;
  *uint64_t v4 = a1;
  sub_100190134(v1, v2, v3);
  return swift_release();
}

void sub_100192324()
{
  v0._unint64_t countAndFlagsBits = 0x726564616568202CLL;
  v0._object = (void *)0xEB00000000203A73LL;
  String.append(_:)(v0);
}

uint64_t sub_100192344()
{
  return v0 + 32;
}

uint64_t sub_100192354()
{
  return _StringObject.sharedUTF8.getter(v0);
}

  ;
}

void sub_100192370()
{
}

BOOL sub_100192388@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_10019239C()
{
  return type metadata accessor for HTTPResponseHead._Storage();
}

void sub_1001923B4()
{
  *(void *)(v1 - 11sub_100019F7C(v0 + 2) = v0;
  sub_100032050();
}

unint64_t sub_1001923CC()
{
  return sub_1001884F8(*(void *)(v4 - 96), *(void *)(v4 - 88), v1, v2, v3, v0);
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100192438()
{
  return sub_100189D3C();
}

uint64_t sub_100192440(uint64_t a1, unint64_t a2)
{
  return sub_10005A704(a1, a2);
}

  ;
}

  ;
}

uint64_t sub_10019246C()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

  ;
}

uint64_t sub_100192494(uint64_t a1)
{
  return v3(a1, v2, v1);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1001924F4()
{
  return swift_getEnumCaseMultiPayload(v1, v0);
}

unint64_t sub_100192500( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100188228(v9, v8, v11, v10, a5, a6, a7, a8);
}

  ;
}

void sub_100192520()
{
  *(_BYTE *)(v0 + 8) = 2;
}

  ;
}

void sub_100192538(_BYTE *a1, uint64_t a2)
{
}

uint64_t sub_100192544()
{
  return 0x697463656E6E6F63LL;
}

uint64_t sub_100192560()
{
  return v0;
}

uint64_t sub_10019257C()
{
  return v0;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1001925E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return sub_1000175B0(a4);
}

  ;
}

  ;
}

uint64_t sub_100192608()
{
  return String.index(after:)(v2, v1, v0);
}

uint64_t sub_100192618()
{
  return sub_10005A704(v0, v1);
}

  ;
}

uint64_t sub_100192650( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return sub_1000CF8B0(v21, a20, v20);
}

uint64_t sub_100192660()
{
  uint64_t v4 = *(void **)v3;
  uint64_t result = *(void *)(*(void *)v3 + 16LL);
  void v4[2] = v2;
  void v4[3] = v1;
  v4[4] = v0;
  return result;
}

  ;
}

uint64_t sub_100192688()
{
  return dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
}

uint64_t sub_100192698(uint64_t result)
{
  *(void *)(v1 - 136) = *(void *)(result - 8);
  return result;
}

  ;
}

  ;
}

uint64_t sub_1001926C8()
{
  return v0;
}

uint64_t sub_1001926E0()
{
  uint64_t v3 = *v2;
  uint64_t result = *(void *)(*v2 + 16);
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v0;
  return result;
}

void sub_1001926F0()
{
}

uint64_t sub_100192700()
{
  return v0;
}

  ;
}

uint64_t sub_100192728( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return sub_1000CF8B0(v17, a16, v16);
}

  ;
}

uint64_t sub_100192748(uint64_t a1, uint64_t a2)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1LL, v2);
}

void sub_100192754()
{
}

void sub_100192760()
{
  v0._unint64_t countAndFlagsBits = 32032LL;
  v0._object = (void *)0xE200000000000000LL;
  String.append(_:)(v0);
}

uint64_t sub_10019276C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _StringObject.sharedUTF8.getter(a3);
}

uint64_t sub_100192778()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_100192784(uint64_t a1)
{
  return _StringObject.sharedUTF8.getter(a1);
}

uint64_t sub_10019278C(uint64_t a1, uint64_t a2)
{
  return _stringCompareInternal(_:_:_:_:expecting:)(a1, a2);
}

uint64_t sub_100192798(uint64_t a1)
{
  return swift_allocObject(a1, 52LL, 7LL);
}

  ;
}

void *sub_1001927B0@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *uint64_t result = a2;
  return result;
}

  ;
}

uint64_t sub_1001927CC(uint64_t a1)
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)(v1, a1);
}

uint64_t sub_1001927D8(uint64_t a1)
{
  return Array.description.getter(v1, a1);
}

  ;
}

uint64_t sub_1001927F8()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_100192804(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  return sub_100033870(v2, a2);
}

  ;
}

  ;
}

uint64_t sub_100192830(uint64_t a1, uint64_t a2)
{
  return String.subscript.getter(a1, a2, v3, v2);
}

void sub_10019283C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  *(void *)(v24 - sub_100081CEC(v0 + 128) = v23;
  *(void *)(v24 - 12sub_10019B2E8(v0, 0) = a23;
}

uint64_t getEnumTagSinglePayload for RefundRequestResponse(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (v4) {
        goto LABEL_15;
      }
    }

    else
    {
      if (v3 == 2)
      {
        int v4 = *(unsigned __int16 *)(a1 + 1);
        if (!*(_WORD *)(a1 + 1)) {
          goto LABEL_17;
        }
LABEL_15:
        int v5 = (*a1 | (v4 << 8)) - 3;
        return (v5 + 1);
      }

      int v4 = a1[1];
      if (a1[1]) {
        goto LABEL_15;
      }
    }
  }

uint64_t storeEnumTagSinglePayload for RefundRequestResponse(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100192934 + 4 * byte_100209A85[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100192968 + 4 * byte_100209A80[v4]))();
}

uint64_t sub_100192968(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100192970(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100192978LL);
  }
  return result;
}

uint64_t sub_100192984(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10019298CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100192990(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100192998(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RefundRequestResponse()
{
  return &type metadata for RefundRequestResponse;
}

uint64_t sub_1001929B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000B7AB8(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_1001929DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10019306C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100192A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10019306C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100192A84(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10019306C();
  unint64_t v5 = sub_1001930A8();
  return Error<>._code.getter(a1, a2, v4, v5);
}

uint64_t sub_100192AC8(void *a1, char a2)
{
  uint64_t v5 = sub_1000175B0(&qword_1002B8468);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100022788();
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100019F58(a1, v7);
  unint64_t v9 = sub_100192D50();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for RefundRequestResponse.CodingKeys,  &type metadata for RefundRequestResponse.CodingKeys,  v9,  v7,  v8);
  char v13 = a2;
  unint64_t v10 = sub_100192D8C();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v13, v11, v5, &type metadata for RefundRequestError, v10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v5);
}

unint64_t sub_100192BB0(void *a1)
{
  uint64_t v4 = sub_1000175B0(&qword_1002B8480);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100022788();
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  unint64_t v8 = (unint64_t)sub_100019F58(a1, v6);
  unint64_t v9 = sub_100192D50();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for RefundRequestResponse.CodingKeys,  &type metadata for RefundRequestResponse.CodingKeys,  v9,  v6,  v7);
  if (v1)
  {
    sub_100019F7C(a1);
  }

  else
  {
    unint64_t v10 = sub_100192DC8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for RefundRequestError,  v11,  v4,  &type metadata for RefundRequestError,  v10);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
    unint64_t v8 = v13;
    sub_100019F7C(a1);
  }

  return v8;
}

uint64_t sub_100192CC0(uint64_t a1)
{
  unint64_t v2 = sub_100192D50();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100192CE8(uint64_t a1)
{
  unint64_t v2 = sub_100192D50();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_100192D10@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100192BB0(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100192D38(void *a1)
{
  return sub_100192AC8(a1, *v1);
}

unint64_t sub_100192D50()
{
  unint64_t result = qword_1002B8470;
  if (!qword_1002B8470)
  {
    unint64_t result = swift_getWitnessTable(byte_100209D3C, &type metadata for RefundRequestResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B8470);
  }

  return result;
}

unint64_t sub_100192D8C()
{
  unint64_t result = qword_1002B8478;
  if (!qword_1002B8478)
  {
    unint64_t result = swift_getWitnessTable(byte_100209D14, &type metadata for RefundRequestError);
    atomic_store(result, (unint64_t *)&qword_1002B8478);
  }

  return result;
}

unint64_t sub_100192DC8()
{
  unint64_t result = qword_1002B8488;
  if (!qword_1002B8488)
  {
    unint64_t result = swift_getWitnessTable(byte_100209CEC, &type metadata for RefundRequestError);
    atomic_store(result, (unint64_t *)&qword_1002B8488);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for RefundRequestResponse.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100192E44 + 4 * byte_100209A8A[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100192E64 + 4 * byte_100209A8F[v4]))();
  }
}

_BYTE *sub_100192E44(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100192E64(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100192E6C(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100192E74(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100192E7C(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100192E84(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for RefundRequestResponse.CodingKeys()
{
  return &type metadata for RefundRequestResponse.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for RefundRequestError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100192EEC + 4 * byte_100209A99[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100192F20 + 4 * byte_100209A94[v4]))();
}

uint64_t sub_100192F20(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100192F28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100192F30LL);
  }
  return result;
}

uint64_t sub_100192F3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100192F44LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100192F48(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100192F50(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RefundRequestError()
{
  return &type metadata for RefundRequestError;
}

unint64_t sub_100192F70()
{
  unint64_t result = qword_1002B8490;
  if (!qword_1002B8490)
  {
    unint64_t result = swift_getWitnessTable(byte_100209C0C, &type metadata for RefundRequestError);
    atomic_store(result, (unint64_t *)&qword_1002B8490);
  }

  return result;
}

unint64_t sub_100192FB0()
{
  unint64_t result = qword_1002B8498;
  if (!qword_1002B8498)
  {
    unint64_t result = swift_getWitnessTable("eN\b", &type metadata for RefundRequestResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B8498);
  }

  return result;
}

unint64_t sub_100192FF0()
{
  unint64_t result = qword_1002B84A0;
  if (!qword_1002B84A0)
  {
    unint64_t result = swift_getWitnessTable(byte_100209C34, &type metadata for RefundRequestResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B84A0);
  }

  return result;
}

unint64_t sub_100193030()
{
  unint64_t result = qword_1002B84A8;
  if (!qword_1002B84A8)
  {
    unint64_t result = swift_getWitnessTable(byte_100209C5C, &type metadata for RefundRequestResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B84A8);
  }

  return result;
}

unint64_t sub_10019306C()
{
  unint64_t result = qword_1002B84B0;
  if (!qword_1002B84B0)
  {
    unint64_t result = swift_getWitnessTable("MO\b", &type metadata for RefundRequestError);
    atomic_store(result, (unint64_t *)&qword_1002B84B0);
  }

  return result;
}

unint64_t sub_1001930A8()
{
  unint64_t result = qword_1002B84B8;
  if (!qword_1002B84B8)
  {
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1002B84B8);
  }

  return result;
}

void *sub_1001930E4( void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  unsigned int v7 = a4;
  unint64_t v9 = HIDWORD(a4);
  unint64_t v10 = (void *)(a3 + 24);
  unint64_t result = (void *)swift_beginAccess(a3 + 24, v13, 0LL, 0LL);
  if (v9 < v7)
  {
    __break(1u);
  }

  else
  {
    uint64_t v12 = *v10 + ((a5 >> 24) & 0xFFFF00 | BYTE6(a5)) + v7;
    unint64_t result = a1(&v14, v12, v12 + v9 - v7);
    if (!v5) {
      return (void *)v14;
    }
  }

  return result;
}

uint64_t HTTPDecoder.__allocating_init(leftOverBytesStrategy:)(char a1)
{
  uint64_t v3 = sub_100019310(v1, 115LL);
  HTTPDecoder.init(leftOverBytesStrategy:)(a1);
  return v3;
}

void sub_1001931C4()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[2];
  uint64_t v3 = v2 - v1;
  if (v2 < v1) {
    v3 += *(void *)(*v0 + 16LL);
  }
  if (v3 >= 1)
  {
    if (v2 == v1)
    {
      __break(1u);
    }

    else
    {
      sub_10002CEDC(*v0);
      sub_10002CFC8();
      sub_10002E530();
    }
  }

uint64_t sub_100193268(uint64_t result)
{
  if (result)
  {
    unint64_t result = *(void *)(result + 24);
    if (result) {
      return swift_retain(result);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_100193280(char a1)
{
  *(_OWORD *)(v1 + 96) = 0u;
  *(void *)(v1 + 184) = 0LL;
  int v2 = a1 & 1;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 3sub_100019F7C(v0 + 2) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 73) = 0u;
  *(_OWORD *)(v1 + 11sub_100019F7C(v0 + 2) = 0u;
  *(_OWORD *)(v1 + sub_100081CEC(v0 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 16sub_10019B2E8(v0, 0) = 0u;
  *(_BYTE *)(v1 + 176) = 0;
  *(_BYTE *)(v1 + 19sub_100019F7C(v0 + 2) = 1;
  *(void *)(v1 + 20sub_10019B2E8(v0, 0) = 0LL;
  *(void *)(v1 + 208) = 0LL;
  *(int64x2_t *)(v1 + 216) = vdupq_n_s64(0xCAFBABEuLL);
  *(_DWORD *)(v1 + 23sub_100019F7C(v0 + 2) = 0;
  *(_BYTE *)(v1 + 236) = 1;
  *(void *)(v1 + 24sub_10019B2E8(v0, 0) = 0LL;
  sub_10002B1B8(1uLL);
  *(void *)(v1 + 256) = v3;
  *(void *)(v1 + 264) = v4;
  *(void *)(v1 + 27sub_100019F7C(v0 + 2) = v5;
  *(_BYTE *)(v1 + 248) = v2;
  sub_100035224(v1 + 96, (uint64_t)&v10);
  sub_100006414((_OWORD *)(v1 + 96));
  swift_endAccess(&v10);
  char v6 = *(_BYTE *)(v1 + 88);
  __int128 v7 = *(_OWORD *)(v1 + 72);
  __int128 v10 = *(_OWORD *)(v1 + 56);
  __int128 v11 = v7;
  char v12 = v6;
  *(_OWORD *)(v1 + 7sub_100019F7C(v0 + 2) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_BYTE *)(v1 + 88) = 1;
  if ((v6 & 1) != 0) {
    __break(1u);
  }
  sub_1000063D0((uint64_t)&v10, v2);
  __int128 v8 = v11;
  *(_OWORD *)(v1 + 56) = v10;
  *(_BYTE *)(v1 + 88) = v12;
  *(void *)(v1 + 11sub_100019F7C(v0 + 2) = sub_100193498;
  *(void *)(v1 + 12sub_10019B2E8(v0, 0) = sub_100193428;
  *(void *)(v1 + 16sub_10019B2E8(v0, 0) = sub_100195DEC;
  *(void *)(v1 + 168) = sub_10019351C;
  *(void *)(v1 + 96) = sub_1001935B0;
  *(void *)(v1 + 104) = sub_100193500;
  *(void *)(v1 + sub_100081CEC(v0 + 128) = sub_100193444;
  *(void *)(v1 + 136) = sub_1001936FC;
  *(_OWORD *)(v1 + 7sub_100019F7C(v0 + 2) = v8;
  *(void *)(v1 + 144) = sub_10019340C;
  *(void *)(v1 + 15sub_100019F7C(v0 + 2) = sub_100193744;
  return v1;
}

uint64_t sub_10019340C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10019349C(a1, a2, a3, (void (*)(uint64_t, uint64_t))sub_100193B90);
}

uint64_t sub_100193428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10019349C(a1, a2, a3, (void (*)(uint64_t, uint64_t))sub_100193C20);
}

uint64_t sub_100193444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10019349C(a1, a2, a3, (void (*)(uint64_t, uint64_t))sub_100193CE0);
}

uint64_t sub_100193460(uint64_t a1)
{
  return 0LL;
}

uint64_t sub_10019349C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  if (a2) {
    uint64_t v8 = a2 + a3;
  }
  else {
    uint64_t v8 = 0LL;
  }
  a4(a2, v8);
  sub_100024F0C();
  return 0LL;
}

uint64_t sub_100193500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10019349C(a1, a2, a3, (void (*)(uint64_t, uint64_t))sub_100193D90);
}

uint64_t sub_10019351C(uint64_t a1)
{
  return sub_100193530(a1);
}

uint64_t sub_100193530(uint64_t a1)
{
  uint64_t v2 = sub_100193268(a1);
  swift_release(v2);
  return 0LL;
}

uint64_t sub_100193564(uint64_t a1)
{
  uint64_t result = sub_100193268(a1);
  if (*(_BYTE *)(result + 176))
  {
    __break(1u);
  }

  else
  {
    *(_BYTE *)(result + 176) = 1;
    swift_release();
    return 0LL;
  }

  return result;
}

uint64_t sub_1001935B4(uint64_t a1)
{
  uint64_t result = sub_100193268(a1);
  if (a1)
  {
    uint64_t v3 = result;
    __int16 v4 = *(_WORD *)(a1 + 16);
    __int16 v5 = *(_WORD *)(a1 + 18);
    int v7 = *(_DWORD *)(a1 + 4);
    uint64_t v8 = *(void *)(a1 + 8);
    int v9 = *(_DWORD *)(a1 + 20);
    uint64_t v10 = *(void *)(a1 + 24);
    int v13 = *(_DWORD *)a1;
    int v6 = v13;
    int v14 = v7;
    uint64_t v15 = v8;
    __int16 v16 = v4;
    __int16 v17 = v5;
    int v18 = v9;
    uint64_t v19 = v10;
    sub_100195DCC((uint64_t)&v13);
    int v13 = v6;
    int v14 = v7;
    uint64_t v15 = v8;
    __int16 v16 = v4;
    __int16 v17 = v5;
    int v18 = v9;
    uint64_t v19 = v10;
    sub_100195DD4((uint64_t)&v13);
    int v13 = v6;
    int v14 = v7;
    uint64_t v15 = v8;
    __int16 v16 = v4;
    __int16 v17 = v5;
    int v18 = v9;
    uint64_t v19 = v10;
    sub_100195DE0((uint64_t)&v13);
    sub_100005F70(a1);
    sub_100193EDC();
    if ((v11 & 0x100000000LL) != 0)
    {
      BOOL v12 = (_DWORD)v11 != 0;
      swift_release();
    }

    else
    {
      *(_DWORD *)(v3 + 23sub_100019F7C(v0 + 2) = v11;
      *(_BYTE *)(v3 + 236) = 0;
      swift_release();
      return 0xFFFFFFFFLL;
    }

    return v12;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100193700(uint64_t a1)
{
  return 0LL;
}

uint64_t sub_100193748(uint64_t result, uint64_t a2, char a3)
{
  if (result)
  {
    uint64_t v4 = *(void *)(v3 + 216);
    if (v4)
    {
      *(void *)(v3 + 184) = result - v4;
      *(_BYTE *)(v3 + 19sub_100019F7C(v0 + 2) = 0;
      *(_BYTE *)(v3 + 176) = a3;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_100193770(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 200);
  *(void *)(result + 20sub_10019B2E8(v0, 0) = 0LL;
  if ((*(_BYTE *)(result + 192) & 1) != 0) {
    goto LABEL_21;
  }
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 184);
  uint64_t v4 = v3 + v1;
  if (__OFADD__(v3, v1))
  {
    __break(1u);
    goto LABEL_18;
  }

  *(void *)(result + 184) = 0LL;
  *(_BYTE *)(result + 19sub_100019F7C(v0 + 2) = 1;
  if (v3 < 0)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v5 = *(void *)(result + 216);
  if (v5) {
    uint64_t v6 = *(void *)(result + 224) - v5;
  }
  else {
    uint64_t v6 = 0LL;
  }
  if (v6 < v4) {
    goto LABEL_19;
  }
  if (v4 < v3)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v7 = result + 16;
  uint64_t result = swift_beginAccess(result + 16, v12, 33LL, 0LL);
  uint64_t v8 = *(void *)(v2 + 40);
  if (!v8)
  {
LABEL_22:
    __break(1u);
    return result;
  }

  if (v5) {
    uint64_t v9 = v5 + v3;
  }
  else {
    uint64_t v9 = 0LL;
  }
  if (v5) {
    uint64_t v10 = v5 + v4;
  }
  else {
    uint64_t v10 = 0LL;
  }
  uint64_t v11 = *(void *)(v2 + 48);
  sub_100043F18(v7, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 16))(v9, v10, v8, v11);
  return swift_endAccess(v12);
}

uint64_t sub_100193878(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 200);
  *(void *)(result + 20sub_10019B2E8(v0, 0) = 0LL;
  if ((*(_BYTE *)(result + 192) & 1) != 0) {
    goto LABEL_21;
  }
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 184);
  uint64_t v4 = v3 + v1;
  if (__OFADD__(v3, v1))
  {
    __break(1u);
    goto LABEL_18;
  }

  *(void *)(result + 184) = 0LL;
  *(_BYTE *)(result + 19sub_100019F7C(v0 + 2) = 1;
  if (v3 < 0)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v5 = *(void *)(result + 216);
  if (v5) {
    uint64_t v6 = *(void *)(result + 224) - v5;
  }
  else {
    uint64_t v6 = 0LL;
  }
  if (v6 < v4) {
    goto LABEL_19;
  }
  if (v4 < v3)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v7 = result + 16;
  uint64_t result = swift_beginAccess(result + 16, v12, 33LL, 0LL);
  uint64_t v8 = *(void *)(v2 + 40);
  if (!v8)
  {
LABEL_22:
    __break(1u);
    return result;
  }

  if (v5) {
    uint64_t v9 = v5 + v3;
  }
  else {
    uint64_t v9 = 0LL;
  }
  if (v5) {
    uint64_t v10 = v5 + v4;
  }
  else {
    uint64_t v10 = 0LL;
  }
  uint64_t v11 = *(void *)(v2 + 48);
  sub_100043F18(v7, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 32))(v9, v10, v8, v11);
  return swift_endAccess(v12);
}

void sub_100193980(uint64_t a1)
{
  if ((v4 & 1) != 0) {
    goto LABEL_15;
  }
  sub_100195E70();
  if (v5)
  {
    __break(1u);
    goto LABEL_12;
  }

  sub_100195E50();
  if (v2 < 0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v6 = *(void *)(v1 + 216);
  if (v6) {
    uint64_t v7 = *(void *)(v1 + 224) - v6;
  }
  else {
    uint64_t v7 = 0LL;
  }
  if (v7 < v3) {
    goto LABEL_13;
  }
  if (v3 < v2)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  sub_100035224(v1 + 16, (uint64_t)v9);
  if (*(void *)(v1 + 40))
  {
    sub_100195E28();
    sub_100195E04();
    uint64_t v8 = sub_100195DF0(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 24));
    sub_1000356C4(v8);
    sub_100019398();
    return;
  }

void sub_100193A30(uint64_t a1)
{
  if ((v4 & 1) != 0) {
    goto LABEL_15;
  }
  sub_100195E70();
  if (v5)
  {
    __break(1u);
    goto LABEL_12;
  }

  sub_100195E50();
  if (v2 < 0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v6 = *(void *)(v1 + 216);
  if (v6) {
    uint64_t v7 = *(void *)(v1 + 224) - v6;
  }
  else {
    uint64_t v7 = 0LL;
  }
  if (v7 < v3) {
    goto LABEL_13;
  }
  if (v3 < v2)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  sub_100035224(v1 + 16, (uint64_t)v9);
  if (*(void *)(v1 + 40))
  {
    sub_100195E28();
    sub_100195E04();
    uint64_t v8 = sub_100195DF0(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 48));
    sub_1000356C4(v8);
    sub_100019398();
    return;
  }

void sub_100193AE0(uint64_t a1)
{
  if ((v4 & 1) != 0) {
    goto LABEL_15;
  }
  sub_100195E70();
  if (v5)
  {
    __break(1u);
    goto LABEL_12;
  }

  sub_100195E50();
  if (v2 < 0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v6 = *(void *)(v1 + 216);
  if (v6) {
    uint64_t v7 = *(void *)(v1 + 224) - v6;
  }
  else {
    uint64_t v7 = 0LL;
  }
  if (v7 < v3) {
    goto LABEL_13;
  }
  if (v3 < v2)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  sub_100035224(v1 + 16, (uint64_t)v9);
  if (*(void *)(v1 + 40))
  {
    sub_100195E28();
    sub_100195E04();
    uint64_t v8 = sub_100195DF0(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 40));
    sub_1000356C4(v8);
    sub_100019398();
    return;
  }

uint64_t sub_100193B90(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_beginAccess(v2 + 16, v8, 33LL, 0LL);
  uint64_t v6 = *(void *)(v2 + 40);
  if (v6)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    sub_100043F18(v2 + 16, *(void *)(v2 + 40));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 8))(a1, a2, v6, v7);
    return swift_endAccess(v8);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_100193C20()
{
  __asm { BR              X10 }

uint64_t sub_100193C58()
{
  uint64_t result = sub_100193748(v0, v2, 3);
  uint64_t v4 = v2 - v0;
  if (!v0) {
    uint64_t v4 = 0LL;
  }
  uint64_t v5 = *(void *)(v1 + 200);
  BOOL v6 = __OFADD__(v5, v4);
  uint64_t v7 = v5 + v4;
  if (v6)
  {
    __break(1u);
    JUMPOUT(0x100193CBCLL);
  }

  *(void *)(v1 + 20sub_10019B2E8(v0, 0) = v7;
  return result;
}

void sub_100193CE0()
{
  __asm { BR              X10 }

uint64_t sub_100193D14()
{
  uint64_t result = sub_100193748(v0, v2, 4);
  uint64_t v4 = v2 - v0;
  if (!v0) {
    uint64_t v4 = 0LL;
  }
  uint64_t v5 = *(void *)(v1 + 200);
  BOOL v6 = __OFADD__(v5, v4);
  uint64_t v7 = v5 + v4;
  if (v6)
  {
    __break(1u);
    JUMPOUT(0x100193D6CLL);
  }

  *(void *)(v1 + 20sub_10019B2E8(v0, 0) = v7;
  return result;
}

void sub_100193D90()
{
  __asm { BR              X10 }

uint64_t sub_100193DC4()
{
  uint64_t result = sub_100193748(v0, v2, 2);
  uint64_t v4 = v2 - v0;
  if (!v0) {
    uint64_t v4 = 0LL;
  }
  uint64_t v5 = *(void *)(v1 + 200);
  BOOL v6 = __OFADD__(v5, v4);
  uint64_t v7 = v5 + v4;
  if (v6)
  {
    __break(1u);
    JUMPOUT(0x100193E04LL);
  }

  *(void *)(v1 + 20sub_10019B2E8(v0, 0) = v7;
  return result;
}

void sub_100193E28()
{
  if (*(_BYTE *)(v0 + 176)) {
    __break(1u);
  }
  else {
    *(_BYTE *)(v0 + 176) = 1;
  }
}

uint64_t sub_100193E40()
{
  int v1 = *(unsigned __int8 *)(v0 + 176);
  if (v1 != 6)
  {
    if (v1 == 7) {
      goto LABEL_5;
    }
    __break(1u);
  }

  sub_100193AE0(v0);
LABEL_5:
  *(_BYTE *)(v0 + 176) = 0;
  uint64_t result = swift_beginAccess(v0 + 16, v5, 33LL, 0LL);
  uint64_t v3 = *(void *)(v0 + 40);
  if (v3)
  {
    uint64_t v4 = *(void *)(v0 + 48);
    sub_100043F18(v0 + 16, *(void *)(v0 + 40));
    (*(void (**)(uint64_t, uint64_t))(v4 + 64))(v3, v4);
    return swift_endAccess(v5);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_100193EDC()
{
  __asm { BR              X10 }

uint64_t sub_1001941CC()
{
  __int128 v1 = *(_OWORD *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 72);
  char v3 = *(_BYTE *)(v0 + 88);
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 7sub_100019F7C(v0 + 2) = 0u;
  *(_BYTE *)(v0 + 88) = 1;
  if ((v3 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    *(_OWORD *)(v0 + 56) = v1;
    *(void *)(v0 + 7sub_100019F7C(v0 + 2) = v2;
    *(void *)(v0 + 8sub_10019B2E8(v0, 0) = v0;
    *(_BYTE *)(v0 + 88) = 0;
    return swift_retain(v0);
  }

  return result;
}

uint64_t sub_100194208()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t result = *(void *)(v0 + 80);
  char v5 = *(_BYTE *)(v0 + 88);
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 7sub_100019F7C(v0 + 2) = 0u;
  *(_BYTE *)(v0 + 88) = 1;
  if ((v5 & 1) != 0)
  {
    __break(1u);
  }

  else if (result)
  {
    uint64_t result = swift_release(result);
    *(void *)(v0 + 56) = v1;
    *(void *)(v0 + 64) = v2;
    *(void *)(v0 + 7sub_100019F7C(v0 + 2) = v4;
    *(void *)(v0 + 8sub_10019B2E8(v0, 0) = 233684719LL;
    *(_BYTE *)(v0 + 88) = 0;
    return result;
  }

  __break(1u);
  return result;
}

uint64_t sub_100194270(uint64_t a1, uint64_t a2, char a3)
{
  int v20 = 0;
  char v4 = *(_BYTE *)(v3 + 88);
  __int128 v5 = *(_OWORD *)(v3 + 72);
  __int128 v21 = *(_OWORD *)(v3 + 56);
  __int128 v22 = v5;
  char v23 = v4;
  *(_OWORD *)(v3 + 7sub_100019F7C(v0 + 2) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_BYTE *)(v3 + 88) = 1;
  if ((v4 & 1) != 0) {
LABEL_21:
  }
    __break(1u);
  sub_1001943FC((uint64_t)&v21, a1, a2, a3 & 1, v3, &v20, &v19);
  char v6 = v23;
  __int128 v7 = v22;
  *(_OWORD *)(v3 + 56) = v21;
  *(_OWORD *)(v3 + 7sub_100019F7C(v0 + 2) = v7;
  *(_BYTE *)(v3 + 88) = v6;
  if (!v20)
  {
    if ((*(_BYTE *)(v3 + 192) & 1) != 0)
    {
      uint64_t v14 = *(void *)(v3 + 208);
      uint64_t result = v14 + v19;
      if (!__OFADD__(v14, v19))
      {
        *(void *)(v3 + 208) = 0LL;
        return result;
      }

      __break(1u);
    }

    else
    {
      uint64_t result = *(void *)(v3 + 184);
      uint64_t v15 = v19 - result;
      if (!__OFSUB__(v19, result))
      {
        uint64_t v16 = *(void *)(v3 + 208);
        BOOL v17 = __OFADD__(v16, v15);
        uint64_t v18 = v16 + v15;
        if (!v17)
        {
          *(void *)(v3 + 208) = v18;
          *(void *)(v3 + 184) = 0LL;
          *(_BYTE *)(v3 + 19sub_100019F7C(v0 + 2) = 0;
          return result;
        }

        goto LABEL_20;
      }
    }

    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  if (*(_BYTE *)(v3 + 236)) {
    int v8 = v20;
  }
  else {
    int v8 = *(_DWORD *)(v3 + 232);
  }
  if (v8 == 32 && *(void *)(v3 + 240))
  {
    uint64_t v9 = swift_errorRetain(*(void *)(v3 + 240));
    return swift_willThrow(v9);
  }

  uint64_t result = sub_10019455C(v8);
  if (result != 24)
  {
    char v11 = result;
    unint64_t v12 = sub_100033C40();
    uint64_t v9 = swift_allocError(&type metadata for HTTPParserError, v12, 0LL, 0LL);
    *int v13 = v11;
    return swift_willThrow(v9);
  }

  __break(1u);
  return result;
}

uint64_t sub_1001943FC@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, _DWORD *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v9 = result;
  if ((a4 & 1) != 0)
  {
    swift_beginAccess(a5 + 96, v23, 0LL, 0LL);
    __int128 v17 = *(_OWORD *)(a5 + 112);
    __int128 v24 = *(_OWORD *)(a5 + 96);
    __int128 v25 = v17;
    __int128 v18 = *(_OWORD *)(a5 + 144);
    __int128 v26 = *(_OWORD *)(a5 + 128);
    __int128 v27 = v18;
    __int128 v28 = *(_OWORD *)(a5 + 160);
    uint64_t v16 = sub_100003294((unsigned int *)v9, (unsigned __int8 *)&v24, 0LL, 0LL);
LABEL_6:
    uint64_t v19 = *(void *)(v9 + 8);
    unsigned int v20 = *(_DWORD *)(v9 + 16);
    unsigned int v21 = *(_DWORD *)(v9 + 20);
    uint64_t v22 = *(void *)(v9 + 24);
    *(void *)&__int128 v24 = *(void *)v9;
    *((void *)&v24 + 1) = v19;
    *(void *)&__int128 v25 = __PAIR64__(v21, v20);
    *((void *)&v25 + 1) = v22;
    uint64_t result = sub_100195C48((uint64_t)&v24);
    *a6 = result;
    *a7 = v16;
    return result;
  }

  *(void *)(a5 + 216) = a2;
  *(void *)(a5 + 224) = a3;
  if (a2)
  {
    uint64_t v11 = *(void *)(a5 + 208);
    uint64_t v12 = a3 - a2 - v11;
    if (__OFSUB__(a3 - a2, v11)) {
      __break(1u);
    }
    int v13 = (__int16 *)(a2 + v11);
    swift_beginAccess(a5 + 96, v23, 0LL, 0LL);
    __int128 v14 = *(_OWORD *)(a5 + 112);
    __int128 v24 = *(_OWORD *)(a5 + 96);
    __int128 v25 = v14;
    __int128 v15 = *(_OWORD *)(a5 + 144);
    __int128 v26 = *(_OWORD *)(a5 + 128);
    __int128 v27 = v15;
    __int128 v28 = *(_OWORD *)(a5 + 160);
    uint64_t v16 = sub_100195C54((unsigned int *)v9, (unsigned __int8 *)&v24, v13, v12);
    *(int64x2_t *)(a5 + 216) = vdupq_n_s64(0xDAFBABEuLL);
    goto LABEL_6;
  }

  __break(1u);
  return result;
}

uint64_t sub_10019455C(int a1)
{
  else {
    return byte_10020A29E[a1 - 11];
  }
}

uint64_t sub_100194580()
{
  return v0;
}

uint64_t sub_1001945AC()
{
  uint64_t v0 = sub_100194580();
  return swift_deallocClassInstance(v0, 280LL, 7LL);
}

void HTTPDecoderKind.hashValue.getter(uint64_t a1)
{
  char v1 = a1;
  sub_100060600(a1);
  Hasher._combine(_:)(v1 & 1);
  sub_100035698();
  sub_1000354B8();
}

void sub_1001945F8()
{
}

uint64_t HTTPDecoder<>.write(data:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (!HIBYTE(a3))
  {
    uint64_t v6 = result;
    sub_100035224(*(void *)(v3 + 104) + 256LL, (uint64_t)v8);
    swift_retain();
    sub_10001ED74();
    sub_10002B6DC();
    sub_1000356C4(v7);
    return sub_100032488(v6, a2, a3, 0);
  }

  return result;
}

uint64_t sub_100194684(uint64_t a1)
{
  return HTTPDecoder<>.write(data:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t HTTPDecoder.init(leftOverBytesStrategy:)(char a1)
{
  uint64_t v2 = v1;
  v1[2] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v4 = *v1;
  *(_OWORD *)(v1 + 3) = 0u;
  *(_OWORD *)(v1 + 5) = 0u;
  v1[7] = 0LL;
  *((_BYTE *)v1 + 64) = 2;
  v1[12] = 0LL;
  *((_BYTE *)v1 + 114) = 0;
  v1[9] = 0LL;
  v1[10] = 0LL;
  *(uint64_t *)((char *)v1 + 87) = 0LL;
  sub_100035224((uint64_t)(v1 + 2), (uint64_t)v11);
  sub_100187AF0(16LL);
  sub_1000356C4(v5);
  uint64_t v6 = *(void *)(v4 + 80);
  uint64_t v7 = sub_1000175B0(&qword_1002AA4A0);
  if (v6 == v7)
  {
    char v9 = 0;
    goto LABEL_5;
  }

  uint64_t result = sub_1000175B0(&qword_1002AA4A8);
  if (v6 == result)
  {
    char v9 = 1;
LABEL_5:
    *((_BYTE *)v2 + 1sub_100019F7C(v0 + 13) = v9;
    uint64_t v10 = sub_100195EA4();
    sub_100019310(v10, 280LL);
    v2[13] = sub_100193280(v6 != v7);
    *((_BYTE *)v2 + 11sub_100019F7C(v0 + 2) = a1;
    return (uint64_t)v2;
  }

  __break(1u);
  return result;
}

uint64_t type metadata accessor for BetterHTTPParser()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCServiceP33_0011A8EBEBF0E6690472DD94B6BC964116BetterHTTPParser);
}

uint64_t sub_1001947C4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + 72);
  uint64_t result = sub_10002A718(v2 + 72, (uint64_t)v41, 1LL);
  uint64_t v7 = *(void *)(v2 + 72);
  if (!v7) {
    goto LABEL_20;
  }
  int v8 = *(unsigned __int8 *)(v2 + 94);
  int v9 = *(unsigned __int16 *)(v2 + 92);
  uint64_t v10 = *(void *)(v2 + 80);
  uint64_t result = sub_10002A718(v7 + 24, (uint64_t)v40, 0LL);
  if (HIDWORD(v10) < v10)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (!a1)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  if (!*v5)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  int v11 = a1 - v10 - (*(void *)(v7 + 24) + (v8 | (v9 << 8)));
  int v12 = *(_DWORD *)(v2 + 80);
  BOOL v13 = __CFADD__(v12, v11);
  unsigned int v14 = v12 + v11;
  if (v13) {
    goto LABEL_18;
  }
  if (*(_DWORD *)(v2 + 84) < v14)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  *(_DWORD *)(v2 + 8sub_10019B2E8(v0, 0) = v14;
  uint64_t v15 = *(void *)(v2 + 96);
  if ((*(_BYTE *)(v2 + 113) & 1) != 0)
  {
    if (v15)
    {
      uint64_t result = sub_100035224(v2 + 72, (uint64_t)v33);
      if (*v5)
      {
        sub_100195E80();
        uint64_t v16 = sub_100195E8C();
        sub_100195E14(v16, v17, v18, v19, v20, v21, v22, v23, v33[0]);
        __int128 v24 = &qword_1002AA4A8;
LABEL_16:
        uint64_t v38 = sub_1000175B0(v24);
        v33[0] = a1;
        v33[1] = a2;
        int v34 = v2;
        char v36 = BYTE6(v2);
        __int16 v35 = WORD2(v2);
        char v37 = 1;
        char v39 = 2;
        ChannelHandlerContext.fireChannelRead(_:)();
        swift_release();
        return sub_1000324E8((uint64_t)v33);
      }

      goto LABEL_24;
    }

uint64_t sub_100194980(uint64_t result, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = *(void *)(v2 + 32);
  uint64_t v5 = *(void *)(v2 + 40);
  uint64_t v6 = (void *)(v2 + 32);
  if (v5)
  {
    uint64_t v8 = result;
    if (result)
    {
      uint64_t v9 = a2 - result;
      sub_10001ED74();
      uint64_t v10 = v8;
      uint64_t v11 = v9;
    }

    else
    {
      sub_10001ED74();
      uint64_t v10 = 0LL;
      uint64_t v11 = 0LL;
    }

    uint64_t v12 = static String._fromUTF8Repairing(_:)(v10, v11);
    uint64_t v14 = v13;
    sub_100035224(v4 + 16, (uint64_t)v18);
    sub_10002E88C();
    sub_100195E98();
    uint64_t v15 = *(void *)(v4 + 16);
    *(void *)(v15 + sub_100195C94(v0 + 16) = v3 + 1;
    uint64_t v16 = (void *)(v15 + 32 * v3);
    v16[4] = v7;
    v16[5] = v5;
    v16[6] = v12;
    _OWORD v16[7] = v14;
    sub_1000356C4(v17);
    *uint64_t v6 = 0LL;
    v6[1] = 0LL;
    return swift_bridgeObjectRelease();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100194A44(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = static String._fromUTF8Repairing(_:)(a1, v3);
  uint64_t v5 = *(void *)(v2 + 40);
  *(void *)(v2 + 3sub_100019F7C(v0 + 2) = v4;
  *(void *)(v2 + 4sub_10019B2E8(v0, 0) = v6;
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_100194A74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = v2 + 3;
  sub_10002A718((uint64_t)v7, (uint64_t)v19, 1LL);
  if (!v4[3])
  {
    *uint64_t v7 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
  }

  uint64_t result = sub_100035224((uint64_t)v7, (uint64_t)v18);
  if (!*v7) {
    goto LABEL_9;
  }
  uint64_t v9 = v4[5];
  if (v9)
  {
    uint64_t v10 = v4[4];
    sub_10001ED74();
    if (a1)
    {
      uint64_t v11 = a1;
      uint64_t v12 = a2 - a1;
    }

    else
    {
      uint64_t v11 = 0LL;
      uint64_t v12 = 0LL;
    }

    uint64_t v13 = static String._fromUTF8Repairing(_:)(v11, v12);
    uint64_t v15 = v14;
    sub_10002E88C();
    sub_100195E98();
    uint64_t v16 = *v7;
    *(void *)(v16 + sub_100195C94(v0 + 16) = v3 + 1;
    uint64_t v17 = (void *)(v16 + 32 * v3);
    void v17[4] = v10;
    v17[5] = v9;
    v17[6] = v13;
    v17[7] = v15;
LABEL_9:
    swift_endAccess(v18);
    v4[4] = 0LL;
    void v4[5] = 0LL;
    return swift_bridgeObjectRelease();
  }

  __break(1u);
  return result;
}

uint64_t sub_100194B74(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = static String._fromUTF8Repairing(_:)(a1, v3);
  uint64_t v5 = *(void *)(v2 + 56);
  *(void *)(v2 + 48) = v4;
  *(void *)(v2 + 56) = v6;
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_100194BA4( uint64_t result, Swift::Int a2, char a3, unsigned int a4, uint64_t a5, unsigned __int8 a6)
{
  uint64_t v7 = v6;
  uint64_t v8 = result;
  if (result != 1)
  {
    *(_BYTE *)(v6 + 114) = 1;
    if (*(void *)(v6 + 96))
    {
      unint64_t v24 = sub_100033C40();
      uint64_t v25 = swift_allocError(&type metadata for HTTPParserError, v24, 0LL, 0LL);
      *uint64_t v26 = 5;
      ChannelPipeline.syncOperations.getter();
      ChannelHandlerContext.fireErrorCaught(_:)();
      swift_errorRelease(v25);
      sub_100024F0C();
      return v8 == 1;
    }

    __break(1u);
    goto LABEL_15;
  }

  char v12 = *(_BYTE *)(v6 + 113);
  unsigned int v13 = HTTPVersion.init(major:minor:)(1LL, a2);
  int v14 = v13;
  if ((v12 & 1) != 0)
  {
    unsigned int v15 = HIWORD(v13);
    uint64_t v16 = HTTPResponseStatus.init(statusCode:reasonPhrase:)(a5, 0LL, 0xE000000000000000LL);
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    sub_10002A718(v7 + 16, (uint64_t)v37, 0LL);
    uint64_t v21 = *(void *)(v7 + 16);
    uint64_t v22 = type metadata accessor for HTTPResponseHead._Storage();
    uint64_t v23 = sub_100019310(v22, 44LL);
    *(void *)(v23 + sub_100195C94(v0 + 16) = v16;
    *(void *)(v23 + 24) = v18;
    *(void *)(v23 + 3sub_100019F7C(v0 + 2) = v20;
    *(_WORD *)(v23 + 4sub_10019B2E8(v0, 0) = v14;
    *(_WORD *)(v23 + 4sub_100019F7C(v0 + 2) = v15;
    uint64_t v42 = sub_1000175B0(&qword_1002AA4A8);
    uint64_t v38 = v23;
    uint64_t v39 = v21;
    int v40 = a6;
    int v41 = 0;
    char v43 = 2;
    goto LABEL_8;
  }

  uint64_t result = sub_100194E20(a4);
  uint64_t v28 = *(void *)(v7 + 56);
  if (v28)
  {
    uint64_t v29 = result;
    uint64_t v30 = v27;
    uint64_t v31 = *(void *)(v7 + 48);
    sub_10002A718(v7 + 16, (uint64_t)v37, 0LL);
    uint64_t v32 = *(void *)(v7 + 16);
    uint64_t v33 = type metadata accessor for HTTPRequestHead._Storage();
    sub_100019310(v33, 52LL);
    uint64_t v34 = sub_100189D20(v29, v30, v31, v28, v14);
    uint64_t v42 = sub_1000175B0(&qword_1002AA4A0);
    uint64_t v38 = v34;
    uint64_t v39 = v32;
    int v40 = a6;
    int v41 = 0;
    char v43 = 2;
    swift_bridgeObjectRetain();
LABEL_8:
    swift_bridgeObjectRetain();
    *(void *)(v7 + 48) = 0LL;
    *(void *)(v7 + 56) = 0LL;
    swift_bridgeObjectRelease();
    sub_100035224(v7 + 16, (uint64_t)v36);
    if (swift_isUniquelyReferenced_nonNull_native(*(void *)(v7 + 16)))
    {
      sub_100033B48();
    }

    else
    {
      *(void *)(v7 + sub_100195C94(v0 + 16) = sub_100195D44(0LL, *(void *)(*(void *)(v7 + 16) + 24LL) >> 1);
      swift_bridgeObjectRelease();
    }

    uint64_t result = swift_endAccess(v36);
    if (*(void *)(v7 + 96))
    {
      ChannelPipeline.syncOperations.getter();
      ChannelHandlerContext.fireChannelRead(_:)();
      sub_100024F0C();
      sub_1000324E8((uint64_t)&v38);
      *(_BYTE *)(v7 + 64) = a3 & 1;
      return v8 == 1;
    }

uint64_t sub_100194E20(unsigned int a1)
{
  if (a1 < 0x22) {
    return qword_10020A2B8[a1];
  }
  uint64_t v5 = 0LL;
  unint64_t v6 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(25LL);
  v3._object = (void *)0x8000000100221D90LL;
  v3._unint64_t countAndFlagsBits = 0xD000000000000017LL;
  String.append(_:)(v3);
  unsigned int v4 = a1;
  type metadata accessor for http_method(0LL);
  _print_unlocked<A, B>(_:_:)(&v4, &v5);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v5,  v6,  "ASOctaneSupportXPCService/HTTPDecoder.swift",  43LL,  2LL);
  __break(1u);
  return result;
}

uint64_t sub_100194F08()
{
  uint64_t v1 = v0;
  uint64_t result = sub_10002A718(v0 + 24, (uint64_t)v8, 1LL);
  *(void *)(v0 + 24) = 0LL;
  char v3 = *(_BYTE *)(v0 + 113);
  uint64_t v4 = *(void *)(v0 + 96);
  if ((v3 & 1) != 0)
  {
    if (!v4)
    {
LABEL_9:
      __break(1u);
      goto LABEL_10;
    }

    sub_1000175B0(&qword_1002AA4A8);
    sub_100195E38();
    sub_10001ED74();
    ChannelPipeline.syncOperations.getter();
LABEL_6:
    ChannelHandlerContext.fireChannelRead(_:)();
    sub_100024F0C();
    uint64_t result = sub_1000324E8((uint64_t)v7);
    int v5 = *(unsigned __int8 *)(v1 + 64);
    if (v5 != 2)
    {
      char v6 = v5 & 1;
      uint64_t result = swift_bridgeObjectRelease();
      *(_BYTE *)(v1 + 114) = v6;
      *(_BYTE *)(v1 + 64) = 2;
      return result;
    }

    __break(1u);
    goto LABEL_9;
  }

  if (v4)
  {
    sub_1000175B0(&qword_1002AA4A0);
    sub_100195E38();
    ChannelPipeline.syncOperations.getter();
    sub_10001ED74();
    goto LABEL_6;
  }

uint64_t HTTPDecoder.decoderAdded(context:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = v0[13];
  v8[3] = v2;
  v8[4] = &off_10028EB90;
  v8[0] = v1;
  sub_10019506C((uint64_t)v8, (uint64_t)v7);
  sub_100035224(v3 + 16, (uint64_t)v6);
  swift_retain();
  uint64_t v4 = sub_1001950B4((uint64_t)v7, v3 + 16);
  sub_1000356C4(v4);
  return sub_1001941CC();
}

uint64_t sub_10019506C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002B84C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001950B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002B84C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t HTTPDecoder.decoderRemoved(context:)()
{
  uint64_t v1 = *(void *)(v0 + 104);
  sub_100194208();
  uint64_t v6 = 0LL;
  memset(v5, 0, sizeof(v5));
  sub_100035224(v1 + 16, (uint64_t)v4);
  uint64_t v2 = sub_1001950B4((uint64_t)v5, v1 + 16);
  return sub_1000356C4(v2);
}

uint64_t sub_100195150(uint64_t a1)
{
  *(void *)(v1 + 96) = a1;
  swift_release();
  swift_retain();
  sub_100194270(0LL, 0LL, 1);
  return sub_1001951B8(v1);
}

uint64_t sub_1001951B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0LL;
  return swift_release(v1);
}

void *sub_1001951C8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(unsigned int *)(a2 + 16);
  uint64_t v7 = *(unsigned __int16 *)(a2 + 20);
  uint64_t v8 = *(unsigned __int8 *)(a2 + 22);
  uint64_t v9 = *(void *)a2;
  unint64_t v10 = *(void *)(a2 + 8);
  swift_beginAccess(v2 + 72, v15, 1LL, 0LL);
  *(void *)(v2 + 7sub_100019F7C(v0 + 2) = v9;
  *(void *)(v2 + 8sub_10019B2E8(v0, 0) = v10;
  *(_BYTE *)(v2 + 94) = v8;
  *(_WORD *)(v2 + 9sub_100019F7C(v0 + 2) = v7;
  *(_DWORD *)(v2 + 88) = v6;
  swift_retain();
  swift_release();
  *(void *)(v2 + 96) = a1;
  swift_release();
  swift_retain();
  uint64_t result = sub_1001930E4( (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_100195DB4,  v2,  v9,  v10,  v6 | (v7 << 32) | (v8 << 48));
  if (v3) {
    return (void *)sub_1001952C8((void *)v2);
  }
  int v12 = *(_DWORD *)(a2 + 8);
  BOOL v13 = __CFADD__(v12, (_DWORD)result);
  unsigned int v14 = v12 + (_DWORD)result;
  if (v13)
  {
    __break(1u);
  }

  else if (*(_DWORD *)(a2 + 12) >= v14)
  {
    *(_DWORD *)(a2 + 8) = v14;
    return (void *)sub_1001952C8((void *)v2);
  }

  __break(1u);
  return result;
}

uint64_t sub_1001952C8(void *a1)
{
  uint64_t v2 = a1[9];
  a1[9] = 0LL;
  a1[10] = 0LL;
  *(void *)((char *)a1 + 87) = 0LL;
  swift_release(v2);
  uint64_t v3 = a1[12];
  a1[12] = 0LL;
  return swift_release(v3);
}

uint64_t sub_10019531C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_100194270(a1, a2, 0);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t HTTPDecoder.decode(context:buffer:)(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(v2 + 114) & 1) == 0) {
    sub_1001951C8(a1, a2);
  }
  return 1LL;
}

uint64_t HTTPDecoder.decodeLast(context:buffer:seenEOF:)(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v7 = result;
  if ((*(_BYTE *)(v3 + 114) & 1) == 0)
  {
    unsigned int v8 = *(_DWORD *)(a2 + 8);
    unsigned int v9 = *(_DWORD *)(a2 + 12);
    if (v9 < v8) {
      goto LABEL_16;
    }
    if (v9 != v8)
    {
      uint64_t result = HTTPDecoder.decode(context:buffer:)(result, a2);
      if (v4) {
        return 1LL;
      }
    }

    if ((a3 & 1) != 0)
    {
      uint64_t result = sub_100195150(v7);
      if (v4) {
        return 1LL;
      }
    }
  }

  uint64_t v10 = *(unsigned int *)(a2 + 8);
  uint64_t v11 = *(unsigned int *)(a2 + 12);
  if (v11 >= v10)
  {
    if ((_DWORD)v11 != (_DWORD)v10 && (a3 & 1) == 0)
    {
      if (*(_BYTE *)(v3 + 112))
      {
        if (*(_BYTE *)(v3 + 112) == 1)
        {
          uint64_t v12 = v10 | (v11 << 32);
          unint64_t v13 = *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned __int16 *)(a2 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 22) << 48);
          unint64_t v14 = *(void *)a2 | 0x8000000000000000LL;
          unint64_t v15 = sub_100067270();
          uint64_t v16 = swift_allocError(&type metadata for ByteToMessageDecoderError, v15, 0LL, 0LL);
          *(void *)uint64_t v17 = v14;
          *(void *)(v17 + 8) = v12;
          *(void *)(v17 + sub_100195C94(v0 + 16) = v13;
          *(_BYTE *)(v17 + 3sub_10019B2E8(v0, 0) = 0;
          *(_WORD *)(v17 + 28) = 0;
          *(_DWORD *)(v17 + 24) = 0;
          ChannelPipeline.syncOperations.getter();
          ChannelHandlerContext.fireErrorCaught(_:)();
          swift_errorRelease(v16);
        }
      }

      else
      {
        int v18 = *(_DWORD *)(a2 + 16);
        __int16 v19 = *(_WORD *)(a2 + 20);
        uint64_t v20 = v10 | (v11 << 32);
        char v21 = *(_BYTE *)(a2 + 22);
        v22[0] = *(void *)a2;
        v22[1] = v20;
        char v25 = v21;
        __int16 v24 = v19;
        int v23 = v18;
        char v26 = 0;
        swift_retain();
        ChannelHandlerContext.fireChannelRead(_:)();
        sub_1000324E8((uint64_t)v22);
      }
    }

    return 1LL;
  }

  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

void *HTTPDecoder.deinit()
{
  return v0;
}

uint64_t HTTPDecoder.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 115LL, 7LL);
}

uint64_t sub_100195550(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

uint64_t sub_100195574(uint64_t a1, uint64_t a2, char a3)
{
  return 1LL;
}

uint64_t sub_100195598()
{
  return HTTPDecoder.decoderRemoved(context:)();
}

uint64_t sub_1001955B8()
{
  return HTTPDecoder.decoderAdded(context:)();
}

uint64_t sub_1001955D8(uint64_t a1, uint64_t a2)
{
  return sub_1001947C4(a1, a2);
}

uint64_t sub_1001955F8(uint64_t a1, uint64_t a2)
{
  return sub_100194A44(a1, a2);
}

uint64_t sub_100195618(uint64_t a1, uint64_t a2)
{
  return sub_100194980(a1, a2);
}

uint64_t sub_100195638(uint64_t a1, uint64_t a2)
{
  return sub_100194A74(a1, a2);
}

uint64_t sub_100195658(uint64_t a1, uint64_t a2)
{
  return sub_100194B74(a1, a2);
}

uint64_t sub_100195678(uint64_t a1, Swift::Int a2, char a3, unsigned int a4, uint64_t a5, unsigned __int8 a6)
{
  return sub_100194BA4(a1, a2, a3, a4, a5, a6) & 1;
}

uint64_t sub_10019569C()
{
  return sub_100194F08();
}

uint64_t sub_1001956BC()
{
  return RemoveAfterUpgradeStrategy.hashValue.getter(*v0);
}

void NIOHTTPDecoderError.hashValue.getter(uint64_t a1)
{
}

uint64_t NIOHTTPDecoderError.debugDescription.getter(uint64_t a1)
{
  return String.init<A>(describing:)(a1, &type metadata for NIOHTTPDecoderError.BaseError);
}

unint64_t sub_100195704()
{
  unint64_t result = qword_1002B84C8;
  if (!qword_1002B84C8)
  {
    unint64_t result = swift_getWitnessTable("iQ\b", &type metadata for HTTPDecoderKind);
    atomic_store(result, (unint64_t *)&qword_1002B84C8);
  }

  return result;
}

unint64_t sub_100195740(uint64_t a1)
{
  unint64_t result = sub_100195764();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100195764()
{
  unint64_t result = qword_1002B84F0;
  if (!qword_1002B84F0)
  {
    uint64_t v1 = sub_100018EC0(&qword_1002AC978);
    unint64_t result = swift_getWitnessTable("\rQ\b", v1);
    atomic_store(result, (unint64_t *)&qword_1002B84F0);
  }

  return result;
}

unint64_t sub_1001957AC()
{
  unint64_t result = qword_1002B8530;
  if (!qword_1002B8530)
  {
    unint64_t result = swift_getWitnessTable( protocol conformance descriptor for RemoveAfterUpgradeStrategy,  &type metadata for RemoveAfterUpgradeStrategy);
    atomic_store(result, (unint64_t *)&qword_1002B8530);
  }

  return result;
}

unint64_t sub_1001957EC()
{
  unint64_t result = qword_1002B8538;
  if (!qword_1002B8538)
  {
    unint64_t result = swift_getWitnessTable( protocol conformance descriptor for NIOHTTPDecoderError,  &type metadata for NIOHTTPDecoderError);
    atomic_store(result, (unint64_t *)&qword_1002B8538);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for HTTPDecoderKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100195878 + 4 * byte_100209D95[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001958AC + 4 * byte_100209D90[v4]))();
}

uint64_t sub_1001958AC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001958B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001958BCLL);
  }
  return result;
}

uint64_t sub_1001958C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001958D0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1001958D4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001958DC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for HTTPDecoderKind()
{
}

uint64_t sub_1001958F4(uint64_t a1)
{
  v2[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[1] = "\b";
  void v2[2] = &unk_10020A108;
  v2[3] = &unk_10020A108;
  void v2[4] = &unk_10020A120;
  void v2[5] = &unk_10020A138;
  v2[6] = "\b";
  v2[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  _BYTE v2[8] = &unk_10020A120;
  void v2[9] = &unk_10020A150;
  v2[10] = &unk_10020A150;
  return swift_initClassMetadata2(a1, 0LL, 11LL, v2, a1 + 96);
}

uint64_t type metadata accessor for HTTPDecoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HTTPDecoder);
}

uint64_t storeEnumTagSinglePayload for RemoveAfterUpgradeStrategy( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1001959D8 + 4 * byte_100209D9F[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100195A0C + 4 * byte_100209D9A[v4]))();
}

uint64_t sub_100195A0C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100195A14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100195A1CLL);
  }
  return result;
}

uint64_t sub_100195A28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100195A30LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100195A34(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100195A3C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for RemoveAfterUpgradeStrategy()
{
}

void type metadata accessor for NIOHTTPDecoderError()
{
}

uint64_t storeEnumTagSinglePayload for HTTPDecodingState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_100195AAC + 4 * byte_100209DA9[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100195AE0 + 4 * byte_100209DA4[v4]))();
}

uint64_t sub_100195AE0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100195AE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100195AF0LL);
  }
  return result;
}

uint64_t sub_100195AFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100195B04LL);
  }
  *(_BYTE *)unint64_t result = a2 + 7;
  return result;
}

uint64_t sub_100195B08(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100195B10(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HTTPDecodingState()
{
  return &type metadata for HTTPDecodingState;
}

uint64_t storeEnumTagSinglePayload for NIOHTTPDecoderError.BaseError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100195B6C + 4 * byte_100209DAE[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100195B8C + 4 * byte_100209DB3[v4]))();
  }
}

_BYTE *sub_100195B6C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100195B8C(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100195B94(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100195B9C(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100195BA4(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100195BAC(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NIOHTTPDecoderError.BaseError()
{
  return &type metadata for NIOHTTPDecoderError.BaseError;
}

unint64_t sub_100195BCC()
{
  unint64_t result = qword_1002B8840;
  if (!qword_1002B8840)
  {
    unint64_t result = swift_getWitnessTable(byte_10020A20C, &type metadata for NIOHTTPDecoderError.BaseError);
    atomic_store(result, (unint64_t *)&qword_1002B8840);
  }

  return result;
}

unint64_t sub_100195C0C()
{
  unint64_t result = qword_1002B8848;
  if (!qword_1002B8848)
  {
    unint64_t result = swift_getWitnessTable(byte_10020A274, &type metadata for HTTPDecodingState);
    atomic_store(result, (unint64_t *)&qword_1002B8848);
  }

  return result;
}

uint64_t sub_100195C48(uint64_t a1)
{
  return *(_BYTE *)(a1 + 23) & 0x7F;
}

unint64_t sub_100195C58()
{
  unint64_t result = qword_1002B8850;
  if (!qword_1002B8850)
  {
    unint64_t result = swift_getWitnessTable( protocol conformance descriptor for NIOHTTPDecoderError,  &type metadata for NIOHTTPDecoderError);
    atomic_store(result, (unint64_t *)&qword_1002B8850);
  }

  return result;
}

uint64_t sub_100195C94(uint64_t a1)
{
  uint64_t v2 = sub_1000175B0(&qword_1002B84C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *sub_100195CD4(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_1000175B0((uint64_t *)&unk_1002AFCE0);
  int v5 = (void *)sub_100019310(v4, 8 * v2 + 32);
  size_t v6 = j__malloc_size(v5);
  _OWORD v5[2] = a1;
  void v5[3] = (2 * ((uint64_t)(v6 - 32) / 8)) | 1;
  return v5;
}

void *sub_100195D44(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_1000175B0(&qword_1002A92A8);
  int v5 = (void *)swift_allocObject(v4, 32 * v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  _OWORD v5[2] = a1;
  void v5[3] = 2 * ((uint64_t)(v6 - 32) / 32);
  return v5;
}

uint64_t sub_100195DB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_10019531C(a1, a2, a3);
}

uint64_t sub_100195DCC(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 20);
}

uint64_t sub_100195DD4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 20) >> 31;
}

uint64_t sub_100195DE0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 22);
}

uint64_t sub_100195DF0@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v3, v4, v2, v1);
}

uint64_t sub_100195E04()
{
  return sub_100043F18(v0, v1);
}

uint64_t sub_100195E14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return swift_endAccess(&a9);
}

  ;
}

  ;
}

void sub_100195E50()
{
  *(void *)(v0 + 184) = 0LL;
  *(_BYTE *)(v0 + 19sub_100019F7C(v0 + 2) = 1;
}

uint64_t sub_100195E60(uint64_t result)
{
  *(void *)(result + 20sub_10019B2E8(v0, 0) = 0LL;
  return result;
}

  ;
}

uint64_t sub_100195E80()
{
  return swift_retain(v0);
}

uint64_t sub_100195E8C()
{
  return ByteBuffer.readSlice(length:)(v0);
}

void sub_100195E98()
{
}

uint64_t sub_100195EA4()
{
  return type metadata accessor for BetterHTTPParser();
}

void *sub_100195EAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v65 = type metadata accessor for URLQueryItem(0LL);
  uint64_t v4 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  size_t v6 = (char *)v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_1000175B0(&qword_1002B3958);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v57 - v11;
  char v71 = 1;
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 40);
  int v62 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v15 = *(void *)(v13 + 32);
  uint64_t v16 = *(void *)(v13 + 40);
  swift_bridgeObjectRetain();
  URLComponents.init(string:)(v15, v16);
  sub_10003561C();
  sub_100196470((uint64_t)v12, (uint64_t)v10);
  uint64_t v17 = type metadata accessor for URLComponents(0LL);
  int v18 = sub_10001D158((uint64_t)v10, 1LL, v17);
  uint64_t v63 = v14;
  uint64_t v64 = v12;
  if (v18 == 1)
  {
    sub_1001964B8((uint64_t)v10);
    goto LABEL_92;
  }

  uint64_t v19 = URLComponents.queryItems.getter();
  unint64_t result = (void *)(*(uint64_t (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8LL))(v10, v17);
  if (!v19)
  {
LABEL_92:
    uint64_t v21 = 0LL;
    uint64_t v54 = 0LL;
    unint64_t v53 = 0LL;
LABEL_93:
    uint64_t v55 = swift_bridgeObjectRetain();
    sub_1000CDD90(v55, (uint64_t)v69);
    sub_100038FD4((uint64_t *)a1);
    sub_1001964B8((uint64_t)v64);
    char v56 = v71;
    char v70 = v71;
    *(void *)a2 = v21;
    *(_BYTE *)(a2 + 8) = v56;
    *(void *)(a2 + sub_100195C94(v0 + 16) = v54;
    *(void *)(a2 + 24) = v53;
    return memcpy((void *)(a2 + 32), v69, 0x139uLL);
  }

  uint64_t v68 = *(void *)(v19 + 16);
  if (!v68)
  {
    sub_10003561C();
    goto LABEL_92;
  }

  uint64_t v58 = a1;
  uint64_t v59 = a2;
  uint64_t v21 = 0LL;
  uint64_t v60 = 0LL;
  unint64_t v61 = 0LL;
  unint64_t v22 = 0LL;
  unint64_t v23 = v19 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v66 = v19;
  unint64_t v67 = v23;
  v57[1] = (char *)v69 + 2;
  void v57[2] = (char *)v69 + 3;
  uint64_t v24 = v65;
  while (v22 < *(void *)(v19 + 16))
  {
    uint64_t v25 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v4 + 16))( v6,  v67 + *(void *)(v4 + 72) * v22,  v24);
    uint64_t v26 = URLQueryItem.value.getter(v25);
    if (v27)
    {
      uint64_t v28 = v26;
      unint64_t v29 = v27;
      uint64_t v30 = URLQueryItem.name.getter(v26);
      BOOL v32 = v30 == 0x746361736E617274LL && v31 == 0xED000064496E6F69LL;
      if (v32 || (uint64_t v33 = v30, v34 = v31, (sub_100196548(0x746361736E617274LL, 0xED000064496E6F69LL) & 1) != 0))
      {
        unint64_t result = (void *)swift_bridgeObjectRelease();
        uint64_t v35 = HIBYTE(v29) & 0xF;
        uint64_t v36 = v28 & 0xFFFFFFFFFFFFLL;
        if ((v29 & 0x2000000000000000LL) != 0) {
          uint64_t v37 = HIBYTE(v29) & 0xF;
        }
        else {
          uint64_t v37 = v28 & 0xFFFFFFFFFFFFLL;
        }
        uint64_t v24 = v65;
        if (!v37)
        {
          sub_100023EF4();
          uint64_t v21 = 0LL;
          LOBYTE(v5sub_10019B2E8(v0, 0) = 1;
          goto LABEL_77;
        }

        if ((v29 & 0x1000000000000000LL) != 0)
        {
          uint64_t v39 = sub_100161B20(v28, v29, 10LL);
          LOBYTE(v28) = v52;
          goto LABEL_74;
        }

        if ((v29 & 0x2000000000000000LL) == 0)
        {
          if ((v28 & 0x1000000000000000LL) != 0) {
            uint64_t v38 = (unsigned __int8 *)((v29 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else {
            uint64_t v38 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v28);
          }
          uint64_t v39 = (uint64_t)sub_100161AD8(v38, v36);
          LOBYTE(v28) = v40 & 1;
LABEL_74:
          sub_100023EF4();
          int v50 = v28 & 1;
          if (v50) {
            uint64_t v21 = 0LL;
          }
          else {
            uint64_t v21 = v39;
          }
LABEL_77:
          unint64_t result = (void *)sub_100196508();
          char v71 = v50 & 1;
          goto LABEL_78;
        }

        v69[0] = v28;
        v69[1] = v29 & 0xFFFFFFFFFFFFFFLL;
        if (v28 == 43)
        {
          if (!v35) {
            goto LABEL_96;
          }
          uint64_t v39 = (BYTE1(v28) - 48);
          if (v35 != 2)
          {
            uint64_t v39 = 10LL * (BYTE1(v28) - 48) + (BYTE2(v28) - 48);
            if (v35 != 3)
            {
              while (1)
              {
                sub_100196538();
                if (!v32 && v42) {
                  goto LABEL_57;
                }
                sub_100196528();
                if (!v32) {
                  goto LABEL_57;
                }
                BOOL v42 = __CFADD__(10 * v39, v46);
                uint64_t v39 = 10 * v39 + v46;
                if (v42) {
                  goto LABEL_57;
                }
                sub_1001964F8();
                if (v32) {
                  goto LABEL_74;
                }
              }
            }
          }
        }

        else
        {
          if (v28 == 45)
          {
            if (!v35) {
              goto LABEL_95;
            }
            if (v35 != 1)
            {
              unsigned __int8 v41 = BYTE1(v28) - 48;
              if ((BYTE1(v28) - 48) <= 9u)
              {
                uint64_t v39 = 0LL;
                BOOL v42 = v41 == 0LL;
                unint64_t v43 = -(uint64_t)v41;
                if (!v42) {
                  goto LABEL_58;
                }
                if (v35 == 2)
                {
                  LOBYTE(v28) = 0;
                  uint64_t v39 = v43;
                  goto LABEL_74;
                }

                unsigned __int8 v48 = BYTE2(v28) - 48;
                if ((BYTE2(v28) - 48) <= 9u && is_mul_ok(v43, 0xAuLL))
                {
                  unint64_t v49 = 10 * v43;
                  uint64_t v39 = v49 - v48;
                  if (v49 >= v48)
                  {
                    if (v35 == 3) {
                      goto LABEL_73;
                    }
                    while (1)
                    {
                      sub_100196538();
                      if (!v32 && v42) {
                        break;
                      }
                      sub_100196528();
                      if (!v32) {
                        break;
                      }
                      BOOL v42 = 10 * v39 >= (unint64_t)v51;
                      uint64_t v39 = 10 * v39 - v51;
                      if (!v42) {
                        break;
                      }
                      sub_1001964F8();
                      if (v32) {
                        goto LABEL_74;
                      }
                    }
                  }
                }
              }
            }

uint64_t sub_100196470(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002B3958);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001964B8(uint64_t a1)
{
  uint64_t v2 = sub_1000175B0(&qword_1002B3958);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

  ;
}

uint64_t sub_100196508()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_100196518()
{
  return (*(uint64_t (**)(uint64_t, void))(v1 + 8))(v2, *(void *)(v0 + 80));
}

  ;
}

  ;
}

uint64_t sub_100196548(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

double sub_100196558(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = sub_100196F7C();
  sub_1001793E0(v7);
  sub_100196FAC();
  sub_100196F54();
  sub_100196E4C();
  uint64_t v8 = sub_100196F8C();
  if (v4)
  {
    sub_10002A47C();
    sub_100196F38((uint64_t)v13);
    sub_100024F0C();
  }

  else
  {
    uint64_t v10 = v8;
    unint64_t v11 = v9;
    sub_10003AA88(v8, v9);
    sub_100196FB4();
    sub_100196F48(v10, v11);
    sub_100024F0C();
    sub_10003A9EC(v10, v11);
  }

  sub_10003AACC(a3, a4);
  return sub_100196F04();
}

double sub_100196638(__int128 *a1)
{
  uint64_t v12 = *((void *)a1 + 4);
  __int128 v2 = *a1;
  __int128 v11 = a1[1];
  __int128 v10 = v2;
  uint64_t v3 = sub_100196F7C();
  sub_1001793E0(v3);
  sub_100196FAC();
  sub_100196F54();
  sub_100196E88();
  uint64_t v4 = sub_100196F8C();
  if (v1)
  {
    sub_10002A47C();
    sub_100196F38((uint64_t)v9);
    sub_100024F0C();
  }

  else
  {
    uint64_t v6 = v4;
    unint64_t v7 = v5;
    sub_10003AA88(v4, v5);
    sub_100196FB4();
    sub_100196F48(v6, v7);
    sub_100024F0C();
    sub_10003A9EC(v6, v7);
  }

  sub_100161AF8((uint64_t)&v10);
  sub_100161AF8((uint64_t)&v11);
  sub_10004DBFC(&v12);
  return sub_100196F04();
}

double sub_100196724@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v15[0] = a1;
  v15[1] = a2;
  uint64_t v4 = type metadata accessor for PropertyListEncoder(0LL);
  uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  PropertyListEncoder.init()(v5);
  dispatch thunk of PropertyListEncoder.outputFormat.setter(100LL);
  unint64_t v6 = sub_100196E10();
  uint64_t v7 = dispatch thunk of PropertyListEncoder.encode<A>(_:)( v15,  &type metadata for InAppTransactionDoneErrorResponse,  v6);
  unint64_t v9 = v8;
  sub_10003AA88(v7, v8);
  sub_1000AD058(v7, v9);
  swift_release();
  sub_10003A9EC(v7, v9);
  swift_bridgeObjectRelease();
  uint64_t v10 = v17;
  int v11 = v19;
  __int16 v12 = v20;
  char v13 = v21;
  double result = v18;
  *(_OWORD *)a3 = v16;
  *(void *)(a3 + sub_100195C94(v0 + 16) = v10;
  *(double *)(a3 + 24) = result;
  *(_DWORD *)(a3 + 3sub_100019F7C(v0 + 2) = v11;
  *(_WORD *)(a3 + 36) = v12;
  *(_BYTE *)(a3 + 38) = v13;
  return result;
}

double sub_100196860(uint64_t a1)
{
  return sub_100196874( a1,  (uint64_t (*)(uint64_t))type metadata accessor for InAppCheckDownloadQueueCountResponse,  &qword_1002B8948);
}

double sub_100196874(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3)
{
  uint64_t v7 = sub_100196F7C();
  sub_1001793E0(v7);
  sub_100196FAC();
  sub_100196F54();
  unint64_t v8 = a2(0LL);
  sub_100196EC4(a3, a2);
  uint64_t v9 = sub_100196F8C();
  if (a3)
  {
    sub_10002A47C();
    sub_100196F38((uint64_t)v12);
    swift_release(a1);
    a1 = v3;
  }

  else
  {
    sub_100196FCC(v9, v10);
    sub_100196FB4();
    sub_100196F48((uint64_t)a2, v8);
    sub_100024F0C();
    sub_100196FD8();
  }

  swift_release(a1);
  return sub_100196F04();
}

double sub_10019694C(uint64_t a1)
{
  return sub_100196874( a1,  (uint64_t (*)(uint64_t))type metadata accessor for InAppPendingTransactionsResponse,  &qword_1002B8958);
}

double sub_100196960(void *__src)
{
  uint64_t v5 = sub_100196F7C();
  sub_1001793E0(v5);
  sub_100196FAC();
  sub_100196F54();
  sub_100054180();
  uint64_t v6 = sub_100196F8C();
  if (v1)
  {
    sub_10002A47C();
    sub_100196F38((uint64_t)v10);
    sub_100024F0C();
  }

  else
  {
    sub_100196FCC(v6, v7);
    sub_100196FB4();
    sub_100196F48(v2, v3);
    sub_100024F0C();
    sub_100196FD8();
  }

  sub_1000536E8((uint64_t)__src);
  return sub_100196F04();
}

__n128 sub_100196A2C@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v7 = v2;
  sub_100055528(a1);
  sub_100195EAC((uint64_t)a1, (uint64_t)v26);
  sub_100196CA0((uint64_t)v26, (uint64_t)v30);
  sub_100196CA0((uint64_t)v30, (uint64_t)&v31);
  if ((v32 & 1) != 0)
  {
    type metadata accessor for InAppTransactionDoneResponse();
    uint64_t v10 = sub_10003CA74(v27, v28 & 1, (uint64_t)_swiftEmptyArrayStorage);
    sub_100196F84(v10, v11);
    sub_100196874( v10,  (uint64_t (*)(uint64_t))type metadata accessor for InAppTransactionDoneResponse,  &qword_1002B8938);
    sub_100196F94();
    uint64_t v12 = 3LL;
LABEL_7:
    char v6 = v29[38];
    goto LABEL_8;
  }

  unint64_t v3 = (char *)v7 + 88;
  sub_100196FC0();
  uint64_t v13 = sub_100089154();
  if (!v13)
  {
    sub_100196F84(0LL, v14);
    sub_100196724(0xD000000000000015LL, 0x8000000100221DF0LL, (uint64_t)v29);
    sub_100196F94();
    uint64_t v12 = 25LL;
    goto LABEL_7;
  }

  uint64_t v15 = (void *)v13;
  unint64_t v7 = (uint64_t (*)())*sub_100196FC0();
  sub_1000B5AB8(1);
  uint64_t v16 = sub_100089348(v15, 0);
  if (v16 == 4)
  {
    type metadata accessor for InAppTransactionDoneResponse();
    unint64_t v7 = type metadata accessor for InAppTransactionDoneResponse;
    uint64_t v18 = sub_10003CA74(v27, v28 & 1, (uint64_t)_swiftEmptyArrayStorage);
    sub_100196F84(v18, v19);
    uint64_t v20 = swift_retain();
    sub_100196874( v20,  (uint64_t (*)(uint64_t))type metadata accessor for InAppTransactionDoneResponse,  &qword_1002B8938);
    sub_100196F60();
    sub_100024F0C();

    uint64_t v12 = 3LL;
  }

  else
  {
    sub_100196F84(v16, v17);
    sub_100196724(0xD000000000000020LL, 0x8000000100221E10LL, (uint64_t)v29);
    sub_100196F60();

    uint64_t v12 = 21LL;
  }

uint64_t type metadata accessor for InAppTransactionDoneRoute()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService25InAppTransactionDoneRoute);
}

uint64_t sub_100196CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002AC948);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void *sub_100196CE8(void *a1)
{
  uint64_t v2 = a1[7];
  uint64_t v3 = a1[10];
  uint64_t v4 = a1[12];
  uint64_t v5 = a1[14];
  uint64_t v6 = a1[16];
  uint64_t v7 = a1[18];
  uint64_t v8 = a1[20];
  uint64_t v9 = a1[22];
  uint64_t v10 = a1[23];
  uint64_t v12 = a1[25];
  uint64_t v13 = a1[28];
  uint64_t v14 = a1[32];
  uint64_t v15 = a1[34];
  uint64_t v16 = a1[36];
  uint64_t v17 = a1[38];
  uint64_t v18 = a1[40];
  uint64_t v19 = a1[42];
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v19);
  return a1;
}

unint64_t sub_100196E10()
{
  unint64_t result = qword_1002B8930;
  if (!qword_1002B8930)
  {
    unint64_t result = swift_getWitnessTable(aM_5, &type metadata for InAppTransactionDoneErrorResponse);
    atomic_store(result, (unint64_t *)&qword_1002B8930);
  }

  return result;
}

unint64_t sub_100196E4C()
{
  unint64_t result = qword_1002B8940;
  if (!qword_1002B8940)
  {
    unint64_t result = swift_getWitnessTable("\t&\b", &type metadata for LegacyCreateAppReceiptResponse);
    atomic_store(result, (unint64_t *)&qword_1002B8940);
  }

  return result;
}

unint64_t sub_100196E88()
{
  unint64_t result = qword_1002B8950;
  if (!qword_1002B8950)
  {
    unint64_t result = swift_getWitnessTable(byte_100205B6C, &type metadata for FetchSoftwareAddOnsResponse);
    atomic_store(result, (unint64_t *)&qword_1002B8950);
  }

  return result;
}

uint64_t sub_100196EC4(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = a2(255LL);
    uint64_t result = swift_getWitnessTable("m7\b", v4);
    atomic_store(result, a1);
  }

  return result;
}

double sub_100196F04()
{
  uint64_t v2 = *(void *)(v1 + 16);
  int v3 = *(_DWORD *)(v1 + 32);
  __int16 v4 = *(_WORD *)(v1 + 36);
  char v5 = *(_BYTE *)(v1 + 38);
  double result = *(double *)(v1 + 24);
  *(_OWORD *)uint64_t v0 = *(_OWORD *)v1;
  *(void *)(v0 + sub_100195C94(v0 + 16) = v2;
  *(double *)(v0 + 24) = result;
  *(_DWORD *)(v0 + 3sub_100019F7C(v0 + 2) = v3;
  *(_WORD *)(v0 + 36) = v4;
  *(_BYTE *)(v0 + 38) = v5;
  return result;
}

uint64_t sub_100196F38@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACB64(0LL, 0xE000000000000000LL, 6u, a1);
}

void sub_100196F48(uint64_t a1, unint64_t a2)
{
}

uint64_t sub_100196F54()
{
  return dispatch thunk of PropertyListEncoder.outputFormat.setter(100LL);
}

__n128 sub_100196F60()
{
  return *(__n128 *)(v0 - 160);
}

uint64_t sub_100196F7C()
{
  return type metadata accessor for PropertyListEncoder(0LL);
}

void *sub_100196F84(uint64_t a1, uint64_t a2, ...)
{
  return sub_100196CE8((uint64_t *)va);
}

uint64_t sub_100196F8C()
{
  return dispatch thunk of PropertyListEncoder.encode<A>(_:)();
}

__n128 sub_100196F94()
{
  return *(__n128 *)(v0 - 160);
}

uint64_t sub_100196FAC()
{
  return PropertyListEncoder.init()();
}

  ;
}

void *sub_100196FC0()
{
  return sub_100019F58(v1, *(void *)(v0 + 112));
}

uint64_t sub_100196FCC(uint64_t result, unint64_t a2)
{
  return sub_10003AA88(result, a2);
}

uint64_t sub_100196FD8()
{
  return sub_10003A9EC(v0, v1);
}

void *sub_100196FE4(uint64_t a1)
{
  uint64_t v2 = v39[0];
  unint64_t v3 = v39[4];
  uint64_t v30 = v39[1];
  int64_t v31 = (unint64_t)(v39[2] + 64LL) >> 6;
  int64_t v32 = v39[3];
  swift_bridgeObjectRetain(a1);
  if (!v3) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v4 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  unint64_t v5 = v4 | (v32 << 6);
  while (1)
  {
    unsigned __int8 v10 = *(_BYTE *)(*(void *)(v2 + 48) + v5);
    sub_10002C010(*(void *)(v2 + 56) + 32 * v5, (uint64_t)v37 + 8);
    LOBYTE(v37[0]) = v10;
    v35[0] = v37[0];
    v35[1] = v37[1];
    uint64_t v36 = v38;
    sub_10002C010((uint64_t)v35 + 8, (uint64_t)v33 + 8);
    sub_100034728((_OWORD *)((char *)v33 + 8), v34);
    uint64_t v11 = sub_10011D3B4(v10);
    uint64_t v13 = v12;
    sub_10002C010((uint64_t)v34, (uint64_t)v33);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    unint64_t v15 = sub_1000F168C(v11, v13);
    uint64_t v17 = _swiftEmptyDictionarySingleton[2];
    BOOL v18 = (v16 & 1) == 0;
    Swift::Int v19 = v17 + v18;
    if (__OFADD__(v17, v18)) {
      break;
    }
    unint64_t v20 = v15;
    char v21 = v16;
    sub_1000175B0(&qword_1002B3648);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v19))
    {
      unint64_t v22 = sub_1000F168C(v11, v13);
      if ((v21 & 1) != (v23 & 1)) {
        goto LABEL_35;
      }
      unint64_t v20 = v22;
    }

    if ((v21 & 1) != 0)
    {
      uint64_t v24 = (void *)(_swiftEmptyDictionarySingleton[7] + 32 * v20);
      sub_100019F7C(v24);
      sub_100034728(v33, v24);
    }

    else
    {
      _swiftEmptyDictionarySingleton[(v20 >> 6) + 8] |= 1LL << v20;
      __n128 v25 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v20);
      uint64_t *v25 = v11;
      v25[1] = v13;
      sub_100034728(v33, (_OWORD *)(_swiftEmptyDictionarySingleton[7] + 32 * v20));
      uint64_t v26 = _swiftEmptyDictionarySingleton[2];
      BOOL v27 = __OFADD__(v26, 1LL);
      uint64_t v28 = v26 + 1;
      if (v27) {
        goto LABEL_33;
      }
      _swiftEmptyDictionarySingleton[2] = v28;
      swift_bridgeObjectRetain(v13);
    }

    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    sub_100019F7C(v34);
    sub_100034F14((uint64_t)v35, &qword_1002B3650);
    if (v3) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v6 = v32 + 1;
    if (__OFADD__(v32, 1LL)) {
      goto LABEL_34;
    }
    if (v6 >= v31) {
      goto LABEL_31;
    }
    unint64_t v7 = *(void *)(v30 + 8 * v6);
    int64_t v8 = v32 + 1;
    if (!v7)
    {
      int64_t v8 = v32 + 2;
      if (v32 + 2 >= v31) {
        goto LABEL_31;
      }
      unint64_t v7 = *(void *)(v30 + 8 * v8);
      if (!v7)
      {
        int64_t v8 = v32 + 3;
        if (v32 + 3 >= v31) {
          goto LABEL_31;
        }
        unint64_t v7 = *(void *)(v30 + 8 * v8);
        if (!v7)
        {
          int64_t v8 = v32 + 4;
          if (v32 + 4 >= v31) {
            goto LABEL_31;
          }
          unint64_t v7 = *(void *)(v30 + 8 * v8);
          if (!v7)
          {
            int64_t v8 = v32 + 5;
            if (v32 + 5 >= v31) {
              goto LABEL_31;
            }
            unint64_t v7 = *(void *)(v30 + 8 * v8);
            if (!v7)
            {
              int64_t v8 = v32 + 6;
              if (v32 + 6 >= v31) {
                goto LABEL_31;
              }
              unint64_t v7 = *(void *)(v30 + 8 * v8);
              if (!v7)
              {
                int64_t v9 = v32 + 7;
                while (v9 < v31)
                {
                  unint64_t v7 = *(void *)(v30 + 8 * v9++);
                  if (v7)
                  {
                    int64_t v8 = v9 - 1;
                    goto LABEL_20;
                  }
                }

void *sub_100197340(uint64_t a1)
{
  uint64_t v2 = v33[0];
  int64_t v32 = v33[3];
  unint64_t v3 = v33[4];
  uint64_t v30 = v33[1];
  int64_t v31 = (unint64_t)(v33[2] + 64LL) >> 6;
  swift_bridgeObjectRetain(a1);
  if (!v3) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v4 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  unint64_t v5 = v4 | (v32 << 6);
  while (1)
  {
    uint64_t v10 = *(void *)(*(void *)(v2 + 56) + 8 * v5);
    uint64_t v11 = sub_10011D3B4(*(_BYTE *)(*(void *)(v2 + 48) + v5));
    uint64_t v13 = v12;
    swift_bridgeObjectRetain_n(v10, 3LL);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    unint64_t v15 = sub_1000F168C(v11, v13);
    uint64_t v17 = _swiftEmptyDictionarySingleton[2];
    BOOL v18 = (v16 & 1) == 0;
    Swift::Int v19 = v17 + v18;
    if (__OFADD__(v17, v18)) {
      break;
    }
    unint64_t v20 = v15;
    char v21 = v16;
    sub_1000175B0(&qword_1002B8970);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v19))
    {
      unint64_t v22 = sub_1000F168C(v11, v13);
      if ((v21 & 1) != (v23 & 1)) {
        goto LABEL_35;
      }
      unint64_t v20 = v22;
    }

    if ((v21 & 1) != 0)
    {
      uint64_t v24 = _swiftEmptyDictionarySingleton[7];
      swift_bridgeObjectRelease(*(void *)(v24 + 8 * v20));
      *(void *)(v24 + 8 * v2sub_10019B2E8(v0, 0) = v10;
    }

    else
    {
      _swiftEmptyDictionarySingleton[(v20 >> 6) + 8] |= 1LL << v20;
      __n128 v25 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v20);
      uint64_t *v25 = v11;
      v25[1] = v13;
      *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v2sub_10019B2E8(v0, 0) = v10;
      uint64_t v26 = _swiftEmptyDictionarySingleton[2];
      BOOL v27 = __OFADD__(v26, 1LL);
      uint64_t v28 = v26 + 1;
      if (v27) {
        goto LABEL_33;
      }
      _swiftEmptyDictionarySingleton[2] = v28;
      swift_bridgeObjectRetain(v13);
    }

    swift_bridgeObjectRelease_n(v10, 2LL);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    if (v3) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v6 = v32 + 1;
    if (__OFADD__(v32, 1LL)) {
      goto LABEL_34;
    }
    if (v6 >= v31) {
      goto LABEL_31;
    }
    unint64_t v7 = *(void *)(v30 + 8 * v6);
    int64_t v8 = v32 + 1;
    if (!v7)
    {
      int64_t v8 = v32 + 2;
      if (v32 + 2 >= v31) {
        goto LABEL_31;
      }
      unint64_t v7 = *(void *)(v30 + 8 * v8);
      if (!v7)
      {
        int64_t v8 = v32 + 3;
        if (v32 + 3 >= v31) {
          goto LABEL_31;
        }
        unint64_t v7 = *(void *)(v30 + 8 * v8);
        if (!v7)
        {
          int64_t v8 = v32 + 4;
          if (v32 + 4 >= v31) {
            goto LABEL_31;
          }
          unint64_t v7 = *(void *)(v30 + 8 * v8);
          if (!v7)
          {
            int64_t v8 = v32 + 5;
            if (v32 + 5 >= v31) {
              goto LABEL_31;
            }
            unint64_t v7 = *(void *)(v30 + 8 * v8);
            if (!v7)
            {
              int64_t v8 = v32 + 6;
              if (v32 + 6 >= v31) {
                goto LABEL_31;
              }
              unint64_t v7 = *(void *)(v30 + 8 * v8);
              if (!v7)
              {
                int64_t v9 = v32 + 7;
                while (v9 < v31)
                {
                  unint64_t v7 = *(void *)(v30 + 8 * v9++);
                  if (v7)
                  {
                    int64_t v8 = v9 - 1;
                    goto LABEL_20;
                  }
                }

void sub_100197620(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v4 = v13;
  if (v13)
  {
    unint64_t v5 = sub_100019F58(v12, v13);
    uint64_t v6 = *(void *)(v4 - 8);
    __chkstk_darwin(v5);
    sub_10001DAD0();
    uint64_t v9 = v8 - v7;
    (*(void (**)(uint64_t))(v6 + 16))(v8 - v7);
    uint64_t v10 = _bridgeAnythingToObjectiveC<A>(_:)(v9, v4);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v4);
    sub_100019F7C(v12);
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  sub_10011D3B4(a2);
  NSString v11 = String._bridgeToObjectiveC()();
  sub_100019390();
  [v2 setValue:v10 forProperty:v11];
  swift_unknownObjectRelease(v10);
}

void sub_10019772C( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, unsigned __int8 a15, uint64_t a16, char a17, uint64_t a18, char a19, char a20, char a21, unsigned __int8 a22, unsigned __int8 a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, char a28, uint64_t a29, uint64_t *a30, uint64_t a31, char a32, uint64_t a33, uint64_t a34, char a35, char a36, uint64_t a37, char a38, char a39, char a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47, char a48, uint64_t a49, uint64_t a50,unsigned __int8 a51)
{
  uint64_t v139 = a7;
  uint64_t v58 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  __chkstk_darwin(v58);
  sub_10009291C();
  sub_10019A928();
  __chkstk_darwin(v59);
  sub_10019A928();
  __chkstk_darwin(v60);
  sub_1000EB938((uint64_t)&v139 - v61);
  uint64_t v62 = sub_100092A18();
  sub_10019AA68(*(void *)(v62 - 8));
  __chkstk_darwin(v63);
  sub_10009291C();
  sub_10019A928();
  __chkstk_darwin(v64);
  sub_10019A928();
  __chkstk_darwin(v65);
  sub_1000EB938((uint64_t)&v139 - v66);
  uint64_t v67 = sub_1000175B0(&qword_1002AC060);
  __chkstk_darwin(v67);
  sub_10001DAD0();
  uint64_t v70 = v69 - v68;
  uint64_t v147 = type metadata accessor for UUID(0LL);
  sub_10019AA68(*(void *)(v147 - 8));
  __chkstk_darwin(v71);
  sub_10001DAD0();
  sub_1000EB938(v73 - v72);
  uint64_t v152 = &_swiftEmptyDictionarySingleton;
  if (a2)
  {
    uint64_t v155 = &type metadata for String;
    uint64_t v153 = a1;
    uint64_t v154 = a2;
    uint64_t v74 = sub_10019A94C();
    sub_1001B1CF8(v74, 2LL);
  }

  if ((a4 & 1) == 0)
  {
    uint64_t v155 = &type metadata for UInt;
    uint64_t v153 = a3;
    uint64_t v75 = sub_10019A94C();
    sub_1001B1CF8(v75, 7LL);
  }

  if (a6)
  {
    uint64_t v155 = &type metadata for String;
    uint64_t v153 = a5;
    uint64_t v154 = a6;
    uint64_t v76 = sub_10019A94C();
    sub_1001B1CF8(v76, 9LL);
  }

  if ((a8 & 1) == 0)
  {
    uint64_t v155 = &type metadata for Double;
    uint64_t v153 = v139;
    uint64_t v77 = sub_10019A94C();
    sub_1001B1CF8(v77, 11LL);
  }

  if (a9 != 4)
  {
    sub_100093250();
    __asm { BR              X12 }
  }

  if (a10 != 4) {
    __asm { BR              X12 }
  }

  if ((a12 & 1) == 0)
  {
    uint64_t v155 = &type metadata for UInt;
    uint64_t v153 = a11;
    uint64_t v78 = sub_10019A94C();
    sub_1001B1CF8(v78, 8LL);
  }

  if ((a14 & 1) == 0)
  {
    uint64_t v155 = &type metadata for Double;
    uint64_t v153 = a13;
    uint64_t v79 = sub_10019A94C();
    sub_1001B1CF8(v79, 12LL);
  }

  if (a15 != 3)
  {
    uint64_t v155 = &type metadata for Int;
    uint64_t v153 = a15 - 1LL;
    uint64_t v80 = sub_10019A94C();
    sub_1001B1CF8(v80, 1LL);
  }

  if ((a17 & 1) == 0)
  {
    uint64_t v155 = &type metadata for Double;
    uint64_t v153 = a16;
    uint64_t v81 = sub_10019A94C();
    sub_1001B1CF8(v81, 3LL);
  }

  if ((a19 & 1) == 0)
  {
    uint64_t v155 = &type metadata for Double;
    uint64_t v153 = a18;
    uint64_t v82 = sub_10019A94C();
    sub_1001B1CF8(v82, 4LL);
  }

  if (a20 != 2)
  {
    uint64_t v155 = &type metadata for Bool;
    LOBYTE(v153) = a20 & 1;
    uint64_t v83 = sub_10019A94C();
    sub_1001B1CF8(v83, 5LL);
  }

  if (a21 != 2)
  {
    uint64_t v155 = &type metadata for Bool;
    LOBYTE(v153) = a21 & 1;
    uint64_t v84 = sub_10019A94C();
    sub_1001B1CF8(v84, 6LL);
  }

  if (a22 != 22)
  {
    uint64_t v85 = sub_100082108(a22);
    uint64_t v155 = &type metadata for String;
    uint64_t v153 = v85;
    uint64_t v154 = v86;
    uint64_t v87 = sub_10019A94C();
    sub_1001B1CF8(v87, 10LL);
  }

  if (a23 != 5)
  {
    uint64_t v155 = &type metadata for Int;
    uint64_t v153 = a23;
    uint64_t v88 = sub_10019A94C();
    sub_1001B1CF8(v88, 14LL);
  }

  if (a25)
  {
    uint64_t v155 = &type metadata for String;
    uint64_t v153 = a24;
    uint64_t v154 = a25;
    uint64_t v89 = sub_10019A94C();
    sub_1001B1CF8(v89, 15LL);
  }

  if ((a27 & 1) == 0)
  {
    uint64_t v155 = &type metadata for Int;
    uint64_t v153 = a26;
    uint64_t v90 = sub_10019A94C();
    sub_1001B1CF8(v90, 13LL);
  }

  if (a28 != 2)
  {
    uint64_t v155 = &type metadata for Bool;
    LOBYTE(v153) = a28 & 1;
    uint64_t v91 = sub_10019A94C();
    sub_1001B1CF8(v91, 17LL);
  }

  sub_1000925C4(a29, (uint64_t)v156, &qword_1002AFB88);
  if (v157 != 255)
  {
    sub_1000AF7D4(v156, (uint64_t)v158);
    sub_1000B8D18();
    uint64_t v93 = v92;
    uint64_t v95 = v94;
    sub_1000C01EC(a29);
    uint64_t v155 = &type metadata for String;
    uint64_t v153 = v93;
    uint64_t v154 = v95;
    uint64_t v96 = sub_10019A94C();
    sub_1001B1CF8(v96, 18LL);
  }

  uint64_t v97 = a33;
  sub_1000925C4((uint64_t)a30, (uint64_t)&v153, &qword_1002A9E48);
  if (v154)
  {
    sub_10019ABA8(v153);
    *(void *)(v99 - 256) = v98;
    swift_bridgeObjectRetain(v98);
    uint64_t v100 = sub_10019A970();
    sub_1001B1CF8(v100, 20LL);
    sub_1000BB028(a30);
  }

  if ((a32 & 1) == 0)
  {
    unint64_t v151 = &type metadata for Double;
    uint64_t v101 = sub_10019A938(a31);
    sub_1001B1CF8(v101, 21LL);
  }

  sub_100067DA4(a33, v70, &qword_1002AC060);
  uint64_t v102 = v147;
  if (sub_10001D158(v70, 1LL, v147) == 1)
  {
    sub_100034F14(v70, &qword_1002AC060);
  }

  else
  {
    uint64_t v103 = v141;
    uint64_t v104 = v140;
    uint64_t v105 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v141 + 32))(v140, v70, v102);
    uint64_t v106 = UUID.uuidString.getter(v105);
    unint64_t v151 = &type metadata for String;
    double v149 = *(double *)&v106;
    unint64_t v150 = v107;
    uint64_t v108 = sub_10019A970();
    sub_1001B1CF8(v108, 22LL);
    unint64_t v109 = *(void (**)(uint64_t, uint64_t))(v103 + 8);
    uint64_t v97 = a33;
    v109(v104, v102);
  }

  if ((a35 & 1) == 0)
  {
    unint64_t v151 = &type metadata for Double;
    uint64_t v110 = sub_10019A938(a34);
    sub_1001B1CF8(v110, 23LL);
  }

  if (a36 != 2)
  {
    unint64_t v151 = &type metadata for Bool;
    LOBYTE(v149) = a36 & 1;
    uint64_t v111 = sub_10019A970();
    sub_1001B1CF8(v111, 24LL);
  }

  if ((a38 & 1) == 0)
  {
    unint64_t v151 = &type metadata for UInt;
    uint64_t v112 = sub_10019A938(a37);
    sub_1001B1CF8(v112, 25LL);
  }

  uint64_t v113 = v145;
  if (a39 != 2)
  {
    uint64_t v114 = 3157553LL;
    if ((a39 & 1) != 0) {
      uint64_t v114 = 3157554LL;
    }
    unint64_t v151 = &type metadata for String;
    double v149 = *(double *)&v114;
    unint64_t v150 = 0xE300000000000000LL;
    uint64_t v115 = sub_10019A970();
    sub_1001B1CF8(v115, 26LL);
  }

  if (a40 != 2)
  {
    unint64_t v151 = &type metadata for Int;
    uint64_t v116 = sub_10019A938(a40 & 1);
    sub_1001B1CF8(v116, 27LL);
  }

  uint64_t v147 = a44;
  if (a42)
  {
    sub_10019ABA8(a41);
    *(void *)(v117 - 256) = a42;
    uint64_t v118 = sub_10019A970();
    sub_1001B1CF8(v118, 28LL);
  }

  uint64_t v119 = a45;
  uint64_t v120 = v143;
  sub_100067DA4(a43, v143, (uint64_t *)&unk_1002AFCD0);
  sub_10019A9D8(v120);
  uint64_t v121 = v146;
  if (v122)
  {
    sub_100034F14(v120, (uint64_t *)&unk_1002AFCD0);
  }

  else
  {
    uint64_t v123 = sub_10019AAEC(*(uint64_t (**)(void, uint64_t, uint64_t))(v113 + 32));
    double v124 = Date.timeIntervalSinceReferenceDate.getter(v123);
    unint64_t v151 = &type metadata for Double;
    double v149 = v124;
    uint64_t v125 = sub_10019A970();
    sub_1001B1CF8(v125, 30LL);
    sub_10019AAE4(a42, *(uint64_t (**)(uint64_t, uint64_t))(v113 + 8));
  }

  uint64_t v126 = v144;
  sub_100067DA4(v147, v144, (uint64_t *)&unk_1002AFCD0);
  sub_10019A9D8(v126);
  if (v122)
  {
    sub_100034F14(v126, (uint64_t *)&unk_1002AFCD0);
  }

  else
  {
    uint64_t v127 = sub_10019AAEC(*(uint64_t (**)(void, uint64_t, uint64_t))(v113 + 32));
    double v128 = Date.timeIntervalSinceReferenceDate.getter(v127);
    unint64_t v151 = &type metadata for Double;
    double v149 = v128;
    uint64_t v129 = sub_10019A970();
    sub_1001B1CF8(v129, 29LL);
    sub_10019AAE4(a42, *(uint64_t (**)(uint64_t, uint64_t))(v113 + 8));
  }

  sub_100067DA4(a45, v121, (uint64_t *)&unk_1002AFCD0);
  sub_10019A9D8(v121);
  if (v122)
  {
    sub_100034F14(v121, (uint64_t *)&unk_1002AFCD0);
  }

  else
  {
    uint64_t v130 = v142;
    uint64_t v131 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v113 + 32))(v142, v121, v62);
    double v132 = Date.timeIntervalSinceReferenceDate.getter(v131);
    unint64_t v151 = &type metadata for Double;
    double v149 = v132;
    uint64_t v133 = sub_10019A970();
    sub_1001B1CF8(v133, 33LL);
    sub_10019AAE4(v130, *(uint64_t (**)(uint64_t, uint64_t))(v113 + 8));
  }

  if ((a47 & 1) == 0)
  {
    unint64_t v151 = &type metadata for Int;
    uint64_t v134 = sub_10019A938(a46);
    sub_1001B1CF8(v134, 31LL);
  }

  if (a48 != 5)
  {
    uint64_t v135 = qword_10020A530[a48];
    unint64_t v151 = &type metadata for Int;
    uint64_t v136 = sub_10019A938(v135);
    sub_1001B1CF8(v136, 32LL);
  }

  if (a49)
  {
    uint64_t v146 = a45;
    if (*(void *)(a49 + 16))
    {
      LODWORD(v143) = a51;
      uint64_t v144 = a43;
      uint64_t v145 = v97;
      uint64_t v148 = _swiftEmptyArrayStorage;
      sub_100032050();
      __asm { BR              X9 }
    }

    sub_100019390();
    unint64_t v151 = (void *)sub_1000175B0(&qword_1002A93B8);
    double v149 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
    uint64_t v137 = sub_10019A970();
    sub_1001B1CF8(v137, 19LL);
    uint64_t v119 = v146;
  }

  if ((a51 & 1) == 0)
  {
    unint64_t v151 = &type metadata for Int;
    uint64_t v138 = sub_10019A938(a50);
    sub_1001B1CF8(v138, 34LL);
  }

  sub_10019ABCC(v119);
  sub_10019ABCC(v147);
  sub_10019ABCC(a43);
  sub_100034F14(v97, &qword_1002AC060);
  sub_10002A580();
}

uint64_t sub_1001983A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100196FE4(a1);
  uint64_t v8 = *(void *)(a2 + 16);
  if (v8)
  {
    uint64_t v28 = a4;
    sub_10019AAD0();
    uint64_t v9 = (unsigned __int8 *)(a2 + 32);
    do
    {
      unsigned __int8 v10 = *v9++;
      uint64_t v11 = sub_10011D3B4(v10);
      uint64_t v13 = v12;
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      if (v14 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_1000BBEA8();
      }
      _swiftEmptyArrayStorage[2] = v14 + 1;
      unint64_t v15 = &_swiftEmptyArrayStorage[2 * v14];
      _OWORD v15[4] = v11;
      void v15[5] = v13;
      --v8;
    }

    while (v8);
    a4 = v28;
  }

  uint64_t v16 = *(void *)(a3 + 16);
  if (v16)
  {
    sub_10019AAD0();
    uint64_t v17 = (unsigned __int8 *)(a3 + 32);
    do
    {
      unsigned __int8 v18 = *v17++;
      uint64_t v19 = sub_10011D3B4(v18);
      uint64_t v21 = v20;
      unint64_t v22 = _swiftEmptyArrayStorage[2];
      if (v22 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_1000BBEA8();
      }
      _swiftEmptyArrayStorage[2] = v22 + 1;
      char v23 = &_swiftEmptyArrayStorage[2 * v22];
      v23[4] = v19;
      v23[5] = v21;
      --v16;
    }

    while (v16);
  }

  uint64_t v24 = sub_100197340(a4);
  sub_10019A0F8((uint64_t)v7, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)v24);
  uint64_t v26 = v25;
  sub_100019390();
  sub_100023EEC();
  sub_10001EDA0();
  sub_10001A3F8();
  return v26;
}

void sub_100198520( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, double a27, const char *a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43)
{
  uint64_t v298 = a8;
  uint64_t v301 = a7;
  uint64_t v300 = a6;
  v310 = (char *)a3;
  uint64_t v39 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  sub_10019AA68(*(void *)(v39 - 8));
  __chkstk_darwin(v40);
  sub_10009291C();
  sub_10019A928();
  uint64_t v42 = __chkstk_darwin(v41);
  char v44 = (char *)&v297 - v43;
  __chkstk_darwin(v42);
  sub_10019A928();
  __chkstk_darwin(v45);
  sub_10019A928();
  uint64_t v47 = __chkstk_darwin(v46);
  unint64_t v49 = (char *)&v297 - v48;
  __chkstk_darwin(v47);
  sub_10019A928();
  __chkstk_darwin(v50);
  sub_10019A928();
  uint64_t v52 = __chkstk_darwin(v51);
  uint64_t v54 = (char *)&v297 - v53;
  __chkstk_darwin(v52);
  sub_1000EB938((uint64_t)&v297 - v55);
  uint64_t v56 = sub_1000175B0(&qword_1002AC060);
  sub_10019AA68(*(void *)(v56 - 8));
  __chkstk_darwin(v57);
  sub_10009291C();
  sub_10019A928();
  uint64_t v59 = __chkstk_darwin(v58);
  uint64_t v61 = (char *)&v297 - v60;
  __chkstk_darwin(v59);
  sub_1000EB938((uint64_t)&v297 - v62);
  uint64_t v63 = sub_1000175B0(&qword_1002B8978);
  unint64_t v299 = sub_100092564();
  *(double *)&uint64_t v64 = COERCE_DOUBLE( Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for TransactionEntity.Key,  v63));
  double v65 = *(double *)&v64;
  if (*(double *)&a1 == 0.0)
  {
    double v304 = *(double *)&v64;
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  sub_100069F54(a1);
  sub_10001EDA0();
  swift_isUniquelyReferenced_nonNull_native(*(void *)&v65);
  double v316 = v65;
  uint64_t v66 = sub_10019A8E0();
  sub_1001B8B20(v66, 2LL, v67);
  double v304 = v316;
  sub_10019A8C4();
  if (a2)
  {
LABEL_3:
    sub_10006A024(a2);
    sub_10019A97C();
    sub_10019A9F4();
    double v316 = *(double *)&a1;
    uint64_t v68 = sub_10019A8E0();
    sub_1001B8B20(v68, 7LL, v69);
    double v304 = v316;
    sub_10019A8C4();
  }

LABEL_224:
  swift_release(v308);
  swift_bridgeObjectRelease_n(*(void *)&v304, 2LL);
  sub_10002A580();
}

void sub_100199F44(unsigned __int8 a1)
{
}

void sub_100199F50(uint64_t a1)
{
}

id sub_100199F5C(unsigned __int8 a1, void *a2, unsigned __int8 a3)
{
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v3);
  sub_10011D3B4(a1);
  NSString v8 = String._bridgeToObjectiveC()();
  sub_100023EEC();
  uint64_t v9 = a2[3];
  unsigned __int8 v10 = sub_100019F58(a2, v9);
  uint64_t v11 = _bridgeAnythingToObjectiveC<A>(_:)(v10, v9);
  id v12 = [ObjCClassFromMetadata predicateWithProperty:v8 value:v11 comparisonType:a3 + 1];

  swift_unknownObjectRelease(v11);
  sub_100019F7C(a2);
  return v12;
}

void sub_10019A014(uint64_t a1)
{
}

void sub_10019A020(uint64_t a1, SEL *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  sub_10001A3F8();
  id v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(v2), *a2, isa);

  sub_1000193B8();
}

void sub_10019A080(unsigned __int8 a1)
{
}

void sub_10019A08C(unsigned __int8 a1, SEL *a2)
{
  uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___SQLiteNullPredicate);
  sub_10011D3B4(a1);
  NSString v5 = String._bridgeToObjectiveC()();
  sub_10001EDA0();
  id v6 = objc_msgSend(v4, *a2, v5);

  sub_1000193B8();
}

void sub_10019A0F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v110 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v99 = a1 + 64;
  sub_10019AAB0();
  unint64_t v7 = v6 & v5;
  int64_t v101 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain(v9);
  int64_t v10 = 0LL;
  if (!v7) {
    goto LABEL_4;
  }
LABEL_2:
  unint64_t v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  unint64_t v12 = v11 | (v10 << 6);
LABEL_3:
  uint64_t v13 = *(void *)(a1 + 56);
  unint64_t v14 = (void *)(*(void *)(a1 + 48) + 16 * v12);
  uint64_t v15 = v14[1];
  *(void *)&__int128 v105 = *v14;
  *((void *)&v105 + 1) = v15;
  sub_10002C010(v13 + 32 * v12, (uint64_t)v106);
  swift_bridgeObjectRetain(v15);
  while (1)
  {
    sub_10019AC60((uint64_t)&v105, (uint64_t)&v107);
    uint64_t v19 = v108;
    if (!v108) {
      break;
    }
    uint64_t v20 = v107;
    sub_10001672C(0LL, &qword_1002AFD00, off_10026E2D0);
    sub_100034728(&v109, &v105);
    id v21 = sub_10019A824(v20, v19, &v105);
    sub_10019AB40();
    unint64_t v23 = *(void *)((v110 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v22 = *(void *)((v110 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v23 >= v22 >> 1) {
      sub_1000C09D8(v22);
    }
    uint64_t v24 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v21);
    specialized Array._endMutation()(v24);

    if (v7) {
      goto LABEL_2;
    }
LABEL_4:
    int64_t v16 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }

    if (v16 < v101)
    {
      unint64_t v17 = *(void *)(v99 + 8 * v16);
      if (v17) {
        goto LABEL_7;
      }
      int64_t v18 = v10 + 2;
      ++v10;
      if (v16 + 1 < v101)
      {
        unint64_t v17 = *(void *)(v99 + 8 * v18);
        if (v17) {
          goto LABEL_10;
        }
        int64_t v10 = v16 + 1;
        if (v16 + 2 < v101)
        {
          unint64_t v17 = *(void *)(v99 + 8 * (v16 + 2));
          if (v17)
          {
            v16 += 2LL;
            goto LABEL_7;
          }

          int64_t v18 = v16 + 3;
          int64_t v10 = v16 + 2;
          if (v16 + 3 < v101)
          {
            unint64_t v17 = *(void *)(v99 + 8 * v18);
            if (!v17)
            {
              while (1)
              {
                int64_t v16 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  goto LABEL_71;
                }
                if (v16 >= v101)
                {
                  int64_t v10 = v101 - 1;
                  goto LABEL_21;
                }

                unint64_t v17 = *(void *)(v99 + 8 * v16);
                ++v18;
                if (v17) {
                  goto LABEL_7;
                }
              }
            }

LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
}

id sub_10019A824(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  uint64_t v7 = a3[3];
  uint64_t v8 = sub_100019F58(a3, v7);
  uint64_t v9 = _bridgeAnythingToObjectiveC<A>(_:)(v8, v7);
  id v10 = [(id)swift_getObjCClassFromMetadata(v3) predicateWithProperty:v6 equalToValue:v9];
  swift_unknownObjectRelease(v9);

  sub_100019F7C(a3);
  return v10;
}

uint64_t sub_10019A8B8()
{
  return swift_bridgeObjectRelease(0x8000000000000000LL);
}

uint64_t sub_10019A8C4()
{
  return swift_bridgeObjectRelease(0x8000000000000000LL);
}

uint64_t sub_10019A8CC()
{
  *(void *)(v2 - 176) = v1;
  return v0;
}

uint64_t sub_10019A8E0()
{
  return v0;
}

uint64_t sub_10019A8EC@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 28sub_10019B2E8(v0, 0) = a1;
  return v1;
}

uint64_t sub_10019A908()
{
  return sub_10006B784(*(void *)(*(void *)(v0 - 216) + 16LL));
}

uint64_t sub_10019A918(uint64_t a1)
{
  *(void *)(v2 - 2sub_100195C94(v0 + 16) = a1;
  return sub_10006A628(v1);
}

void sub_10019A928()
{
  *(void *)(v1 - 256) = v0;
}

uint64_t sub_10019A938@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 288) = a1;
  return v1 - 288;
}

uint64_t sub_10019A94C()
{
  return v0 - 248;
}

double sub_10019A958()
{
  double result = 0.0;
  *(_OWORD *)(v0 - 176) = 0u;
  *(_OWORD *)(v0 - 16sub_10019B2E8(v0, 0) = 0u;
  return result;
}

uint64_t sub_10019A964()
{
  return sub_10006B7DC(v0, v1 - 176);
}

uint64_t sub_10019A970()
{
  return v0 - 288;
}

uint64_t sub_10019A97C()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_10019A988()
{
  v2._unint64_t countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

void sub_10019A998()
{
}

uint64_t sub_10019A9A0()
{
  return sub_10006B714();
}

void sub_10019A9A8(uint64_t a1@<X8>)
{
  *(void *)(v1 - sub_100081CEC(v0 + 128) = a1;
  sub_1000325F8();
}

void sub_10019A9C0()
{
}

uint64_t sub_10019A9D8(uint64_t a1)
{
  return sub_10001D158(a1, 1LL, v1);
}

uint64_t sub_10019A9F4()
{
  return swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 - 384));
}

  ;
}

void sub_10019AA18()
{
  *(void *)(v0 + sub_100195C94(v0 + 16) = v3;
  sub_1000925C4(v4 - 176, v0 + 32 * v2 + 32, v1);
}

uint64_t sub_10019AA34(uint64_t a1)
{
  *(void *)(v2 - 2sub_100195C94(v0 + 16) = a1;
  return sub_10006A628(v1);
}

  ;
}

void sub_10019AA68(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

  ;
}

void sub_10019AA88(uint64_t a1@<X8>)
{
  *(void *)(v1 - sub_100081CEC(v0 + 128) = a1;
  sub_1000325F8();
}

  ;
}

  ;
}

void sub_10019AAD0()
{
}

uint64_t sub_10019AAE4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_10019AAEC@<X0>(uint64_t (*a1)(void, uint64_t, uint64_t)@<X8>)
{
  return a1(*(void *)(v1 - 256), v2, v3);
}

  ;
}

void sub_10019AB1C()
{
  v2._unint64_t countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

uint64_t sub_10019AB28()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_10019AB34()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_10019AB40()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

void sub_10019AB48(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_10019AB58(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_10019AB68(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_10019AB78(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

  ;
}

uint64_t sub_10019AB94()
{
  return v0;
}

void sub_10019ABA0(uint64_t a1)
{
}

void sub_10019ABA8(uint64_t a1@<X8>)
{
  *(void *)(v2 - 264) = v1;
  *(void *)(v2 - 288) = a1;
}

void sub_10019ABC0(uint64_t a1@<X8>)
{
  *(void *)(v2 - 15sub_100019F7C(v0 + 2) = v1;
  *(void *)(v2 - 176) = a1;
}

void sub_10019ABCC(uint64_t a1)
{
}

uint64_t sub_10019ABD4()
{
  return swift_bridgeObjectRetain(*v0);
}

uint64_t sub_10019ABE0@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(a1 - 256));
}

  ;
}

void sub_10019ABFC()
{
  *(void *)(v1 - sub_100081CEC(v0 + 128) = v0;
}

void *sub_10019AC10()
{
  *(void *)(v1 - 384) = v0;
  return variable initialization expression of SelectableEventLoop.tasksCopy();
}

uint64_t sub_10019AC1C()
{
  *(void *)(v2 - 176) = v1;
  return v0;
}

NSString sub_10019AC30()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_10019AC3C()
{
  return v0;
}

uint64_t sub_10019AC48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  return sub_10002C010((uint64_t)va1, (uint64_t)va);
}

void sub_10019AC54(uint64_t a1@<X8>)
{
  *(void *)(v1 - 288) = a1;
}

void sub_10019AC60(uint64_t a1, uint64_t a2)
{
}

void sub_10019AC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v11 = *v5;
  sub_100033ED4(a1);
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
  {
    sub_1000F2410();
    uint64_t v11 = v12;
  }

  if ((unint64_t)a5 >= *(void *)(v11 + 16))
  {
    __break(1u);
  }

  else
  {
    uint64_t v13 = (uint64_t *)(v11 + 32LL * a5);
    sub_1000349CC(v13[4], v13[5], v13[6], v13[7]);
    v13[4] = a1;
    void v13[5] = a2;
    v13[6] = a3 & 0xFFFFFFFFFFFFFFLL;
    v13[7] = a4;
    sub_100018F04(a1);
    swift_release();
    *uint64_t v5 = v11;
  }

uint64_t sub_10019AD20( uint64_t a1, void *a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, void (*a5)(void, void), uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t), uint64_t a8)
{
  uint64_t v9 = v8;
  unint64_t v89 = a7;
  uint64_t v96 = a4;
  uint64_t v90 = a3;
  if (*(_BYTE *)(a1 + 136) == 1)
  {
    unint64_t v83 = a5;
    uint64_t v84 = a6;
    uint64_t v13 = *(void *)(a1 + 128);
    sub_1000487CC(a1 + 16, (uint64_t)v94);
    if ((*(_BYTE *)(a1 + 48) & 1) == 0)
    {
      uint64_t v85 = a8;
      uint64_t v80 = 0LL;
      BOOL v81 = v13 == 0;
      uint64_t v20 = (uint64_t)(a2 + 2);
      uint64_t v87 = v13;
      id v88 = a2;
      unint64_t v82 = (__int128 *)(a2 + 2);
      while (2)
      {
        uint64_t v21 = *(void *)(a1 + 40);
        sub_1000487CC(v20, (uint64_t)v93);
        while (1)
        {
          unint64_t v23 = *(void *)(a1 + 24);
          if ((v23 & 0x8000000000000000LL) != 0) {
            goto LABEL_85;
          }
          if (HIDWORD(v23)) {
            goto LABEL_87;
          }
          uint64_t v24 = *(void *)(a1 + 16);
          unint64_t v25 = *(void *)(v24 + 16);
          unint64_t v26 = v25 - 1;
          uint64_t v27 = (v25 - 1) & (v23 + v21);
          if (v27 < 0 != v22) {
            goto LABEL_85;
          }
          if (HIDWORD(v27)) {
            goto LABEL_87;
          }
          if (v27 >= v23) {
            uint64_t v28 = 0LL;
          }
          else {
            uint64_t v28 = *(void *)(v24 + 16);
          }
          uint64_t v29 = v27 + v28 - v23;
          BOOL v22 = __OFADD__(v29, 1LL);
          uint64_t v30 = v29 + 1;
          if (v22)
          {
            __break(1u);
LABEL_70:
            __break(1u);
LABEL_71:
            __break(1u);
LABEL_72:
            __break(1u);
LABEL_73:
            __break(1u);
LABEL_74:
            __break(1u);
LABEL_75:
            __break(1u);
LABEL_76:
            __break(1u);
            goto LABEL_77;
          }

          if (v30) {
            break;
          }
LABEL_53:
          if ((*(_BYTE *)(a1 + 136) & 1) != 0)
          {
            uint64_t v21 = *(void *)(a1 + 40);
            if ((*(_BYTE *)(a1 + 48) & 1) == 0) {
              continue;
            }
          }

          goto LABEL_3;
        }

        if (v30 == 1)
        {
          if (v23 == *(void *)(a1 + 32)) {
            goto LABEL_70;
          }
          if (v23 >= v25) {
            goto LABEL_72;
          }
          uint64_t v31 = v24 + 32 * v23;
          if (*(void *)(v31 + 56) == 1LL) {
            goto LABEL_78;
          }
          if ((*(void *)(v31 + 32) & 0x8000000000000000LL) != 0)
          {
LABEL_43:
            unint64_t v61 = a2[3];
            if ((v61 & 0x8000000000000000LL) != 0) {
              goto LABEL_86;
            }
            if (HIDWORD(v61)) {
              goto LABEL_88;
            }
            sub_10019C824();
            if (v51) {
              goto LABEL_75;
            }
            uint64_t v64 = v63 + 32 * v62;
            uint64_t v67 = *(void *)(v64 + 32);
            uint64_t v65 = (void *)(v64 + 32);
            uint64_t v66 = v67;
            if (v65[3] == 1LL) {
              goto LABEL_83;
            }
            if ((v66 & 0x8000000000000000LL) == 0) {
              goto LABEL_84;
            }
            uint64_t v68 = v65[1];
            if (v68 < 0) {
              goto LABEL_76;
            }
            uint64_t v69 = v65[2];
            sub_1000487CC((v66 & 0x7FFFFFFFFFFFFFFFLL) + 16, (uint64_t)v92);
            if (*(_BYTE *)((v66 & 0x7FFFFFFFFFFFFFFFLL) + 0x10) != 1)
            {
              unint64_t v74 = sub_100025100();
              swift_allocError(&type metadata for IOError, v74, 0LL, 0LL);
              *(void *)uint64_t v75 = 0xD00000000000001FLL;
              *(void *)(v75 + 8) = 0x80000001002194A0LL;
              *(_DWORD *)(v75 + sub_100195C94(v0 + 16) = 9;
              uint64_t v76 = sub_10019C7E4();
              swift_willThrow(v76);
              goto LABEL_66;
            }

            uint64_t v86 = &v79;
            uint64_t v70 = *(unsigned int *)((v66 & 0x7FFFFFFFFFFFFFFFLL) + 0x14);
            sub_10019C7E4();
            a2 = v88;
            swift_retain();
            Swift::Int v71 = v89(v70, v69 & 0xFFFFFFFFFFFFFFLL, v68);
            if (v9)
            {
              sub_10002A5A4();
LABEL_66:
              sub_10019C7BC();
              return sub_10002A5A4();
            }

            unsigned __int8 v47 = sub_10019C850(1LL, v71, v72 & 1);
            sub_10002A5A4();
            sub_10019C7BC();
            uint64_t v9 = 0LL;
            uint64_t v13 = v87;
            goto LABEL_52;
          }
        }

        else
        {
          if (v23 >= v25) {
            goto LABEL_71;
          }
          uint64_t v32 = v24 + 32;
          uint64_t v33 = (void *)(v24 + 32 + 32 * v23);
          if (v33[3] == 1LL) {
            goto LABEL_79;
          }
          unint64_t v34 = v26 & (v23 + 1);
          if (HIDWORD(v34))
          {
LABEL_87:
            sub_10002A5A4();
LABEL_88:
            sub_100034FD0();
            uint64_t v77 = "Not enough bits to represent the passed value";
            uint64_t v78 = 45LL;
LABEL_89:
            uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v77,  v78,  2LL,  "Swift/Integers.swift",  20LL);
            __break(1u);
            return result;
          }

          uint64_t v35 = (void *)(v32 + 32 * v34);
          if (v35[3] == 1LL) {
            goto LABEL_80;
          }
          if ((*v33 & 0x8000000000000000LL) != 0) {
            goto LABEL_43;
          }
          if ((*v35 & 0x8000000000000000LL) == 0)
          {
            __int128 v36 = v82[2];
            v95[1] = v82[1];
            v95[2] = v36;
            v95[0] = *v82;
            uint64_t v37 = a2[8];
            uint64_t v38 = a2[9];
            id v39 = (uint64_t *)a2[10];
            uint64_t v40 = a2[11];
            sub_100018F0C(v95);
            uint64_t v41 = sub_10019B49C(v95, v37, v38, v39, v40, v83);
            if (v9)
            {
              sub_100063354(v95);
              return sub_10002A5A4();
            }

            uint64_t v44 = v41;
            Swift::Int v45 = v42;
            char v46 = v43 & 1;
            sub_100063354(v95);
            unsigned __int8 v47 = sub_10019C850(v44, v45, v46);
            goto LABEL_52;
          }
        }

        unint64_t v48 = a2[3];
        if ((v48 & 0x8000000000000000LL) != 0) {
          goto LABEL_86;
        }
        if (HIDWORD(v48)) {
          goto LABEL_88;
        }
        sub_10019C824();
        if (v51) {
          goto LABEL_73;
        }
        uint64_t v52 = v50 + 32 * v49;
        uint64_t v55 = *(void *)(v52 + 32);
        unint64_t v53 = (void *)(v52 + 32);
        uint64_t v54 = v55;
        if (v53[3] == 1LL) {
          goto LABEL_81;
        }
        if (v54 < 0) {
          goto LABEL_82;
        }
        uint64_t v56 = v53[1];
        unint64_t v57 = v53[2];
        sub_1000487CC(v54 + 24, (uint64_t)v91);
        uint64_t v58 = *(void *)(v54 + 24) + ((v57 >> 24) & 0xFFFF00 | BYTE6(v57)) + v56;
        sub_100033ED4(v54);
        Swift::Int v59 = v90(v58, v58 + (HIDWORD(v56) - v56));
        if (v9)
        {
          sub_10019C840();
          return sub_10002A5A4();
        }

        a2 = v88;
        unsigned __int8 v47 = sub_10019C850(1LL, v59, v60 & 1);
        sub_10019C840();
        uint64_t v13 = v87;
LABEL_52:
        int v73 = v47;
        if (v47)
        {
          char v14 = v81;
          if (v73 == 2)
          {
            char v14 = 1;
            goto LABEL_4;
          }

          if (v81) {
            goto LABEL_4;
          }
          BOOL v51 = __CFADD__(v80++, 1LL);
          if (!v51)
          {
            if (*(_BYTE *)(a1 + 136) == 1 && (*(_BYTE *)(a1 + 48) & 1) == 0)
            {
              BOOL v81 = v80 == v13;
              uint64_t v20 = (uint64_t)v82;
              continue;
            }

            goto LABEL_4;
          }

LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          sub_10002A5A4();
LABEL_86:
          sub_100034FD0();
          uint64_t v77 = "Negative value is not representable";
          uint64_t v78 = 35LL;
          goto LABEL_89;
        }

        goto LABEL_53;
      }
    }
  }

void sub_10019B2E8(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    *(_BYTE *)(v2 + 136) = 0;
  }
  sub_10019C80C(a1);
  uint64_t v4 = sub_10019BCA4();
  swift_endAccess(v5);
  if (v4)
  {
    swift_errorRetain(a1);
    sub_100098A70(a1, 1LL, v4);
    swift_errorRelease(a1);
    swift_release();
  }

  sub_100013868();
}

void sub_10019B34C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  BOOL v3 = __OFSUB__(v2, v1);
  uint64_t v4 = v2 - v1;
  if (v4 < 0 != v3) {
    v4 += *(void *)(*(void *)(v0 + 16) + 16LL);
  }
  BOOL v3 = __OFSUB__(v4, 1LL);
  BOOL v5 = v4 - 1 < 0;
  uint64_t v6 = v4 - 1;
  if (v5 == v3)
  {
    *(void *)(v0 + 4sub_10019B2E8(v0, 0) = v6;
    *(_BYTE *)(v0 + 48) = 0;
  }

  sub_100013868();
}

uint64_t sub_10019B3A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  sub_10019C80C(a1);
  sub_100033ED4(a1);
  swift_retain();
  sub_10019B908(a1, a2, a3 & 0xFFFFFFFFFFFFFFLL);
  swift_endAccess(v12);
  sub_100018F04(a1);
  swift_release();
  if (v3[13] >= v3[7]) {
    return 1LL;
  }
  uint64_t v8 = v3[14];
  swift_retain();
  uint64_t v9 = 1LL;
  int v10 = sub_100006C70((unsigned __int8 *)(v8 + 16), 1, 0);
  swift_release();
  if (v10)
  {
    uint64_t v9 = 0LL;
    *((_BYTE *)v4 + 12sub_10019B2E8(v0, 0) = 0;
  }

  return v9;
}

uint64_t sub_10019B49C( __int128 *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, void (*a6)(void, void))
{
  uint64_t v7 = v6;
  __int128 v11 = a1[1];
  __int128 v46 = *a1;
  __int128 v47 = v11;
  char v48 = *((_BYTE *)a1 + 32);
  sub_10017AB88((uint64_t)&v47 + 8, (uint64_t)v49);
  uint64_t v12 = sub_10017AB88((uint64_t)v49, (uint64_t)&v50);
  if ((v51 & 1) != 0) {
    goto LABEL_30;
  }
  uint64_t v13 = v50;
  uint64_t v14 = sub_1001A9844(v12);
  uint64_t v15 = sub_100165968(v14 & 0x1FFFFFFFFFFFFFFLL, v13, v46, *((void *)&v46 + 1), v47);
  uint64_t v16 = sub_1001A9844(v15);
  uint64_t v17 = sub_100166EF4(v16 & 0x1FFFFFFFFFFFFFFLL, v15 & 0x1FFFFFFFFFFFFFFLL);
  if (__OFADD__(v17, 1LL))
  {
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    uint64_t v37 = "Negative value is not representable";
    uint64_t v38 = 35LL;
LABEL_52:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v37,  v38,  2LL,  "Swift/Integers.swift",  20LL);
    __break(1u);
    return result;
  }

  if (v17 + 1 >= 1024) {
    uint64_t v18 = 1024LL;
  }
  else {
    uint64_t v18 = v17 + 1;
  }
  if (v18 < 0)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }

  if (v18)
  {
    uint64_t v40 = a6;
    uint64_t v41 = v18;
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
    uint64_t v21 = *((void *)&v46 + 1);
    uint64_t v44 = v46;
    uint64_t v39 = a2;
    BOOL v22 = (uint64_t *)(a2 + 8);
    uint64_t v42 = v46 + 32;
    uint64_t v43 = HIDWORD(*((void *)&v46 + 1));
    while (1)
    {
      if (v18 == v20)
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }

      if (v21 < 0) {
        goto LABEL_50;
      }
      if (v43) {
        break;
      }
      uint64_t v23 = *(void *)(v44 + 16);
      uint64_t v24 = (v23 - 1) & (v21 + v20);
      if (v24 < 0 != __OFSUB__(v18, v20)) {
        goto LABEL_50;
      }
      if (HIDWORD(v24)) {
        break;
      }
      if (!v23) {
        goto LABEL_41;
      }
      unint64_t v25 = (uint64_t *)(v42 + 32 * v24);
      if (v25[3] == 1) {
        goto LABEL_48;
      }
      uint64_t v26 = *v25;
      if (*v25 < 0) {
        goto LABEL_29;
      }
      uint64_t v27 = v25[1];
      unint64_t v28 = v25[2];
      if (v20)
      {
        if (__OFSUB__(qword_1002AD2C8, v19)) {
          goto LABEL_44;
        }
        unsigned int v29 = HIDWORD(v27) - v27;
        if (qword_1002AD2C8 - v19 < v29) {
          goto LABEL_29;
        }
      }

      else
      {
        unsigned int v29 = HIDWORD(v27) - v27;
      }

      if (qword_1002AD2C8 >= v29) {
        uint64_t v30 = v29;
      }
      else {
        uint64_t v30 = qword_1002AD2C8;
      }
      BOOL v31 = __OFADD__(v19, v30);
      v19 += v30;
      if (v31) {
        goto LABEL_43;
      }
      uint64_t v52 = v20 + 1;
      swift_beginAccess(v26 + 24, v45, 0LL, 0LL);
      uint64_t v32 = *(void *)(v26 + 24) + ((v28 >> 24) & 0xFFFF00 | BYTE6(v28));
      a4[v20] = v26;
      *(v22 - 1) = v32 + v27;
      *BOOL v22 = v30;
      swift_unknownObjectRetain(v26);
      uint64_t v18 = v41;
      v22 += 2;
      uint64_t v20 = v52;
      if (v41 == v52)
      {
        uint64_t v20 = v41;
LABEL_29:
        a6 = v40;
        uint64_t v7 = v6;
        a2 = v39;
        goto LABEL_31;
      }
    }

    uint64_t v37 = "Not enough bits to represent the passed value";
    uint64_t v38 = 45LL;
    goto LABEL_52;
  }

void sub_10019B7D4(Swift::Int a1)
{
  uint64_t v3 = *v1;
  unsigned int v4 = sub_1001A9844(a1);
  if ((unint64_t)v4 >= *(void *)(v3 + 16))
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v5 = v3 + 32LL * v4;
  uint64_t v6 = *(void *)(v5 + 56);
  if (v6 != 1)
  {
    unsigned int v7 = v4;
    uint64_t v8 = (uint64_t *)(v5 + 32);
    uint64_t v9 = *v8;
    uint64_t v13 = *v8;
    uint64_t v14 = v8[1];
    unsigned int v15 = v8[2];
    unsigned __int8 v17 = BYTE6(v8[2]);
    unsigned __int16 v16 = WORD2(v8[2]);
    IOData.moveReaderIndex(forwardBy:)(a1);
    sub_100033ED4(v9);
    swift_retain();
    sub_10019AC68(v13, v14, v15 | ((unint64_t)(v16 | (v17 << 16)) << 32), v6, v7);
    uint64_t v10 = v1[5];
    BOOL v11 = __OFSUB__(v10, a1);
    Swift::Int v12 = v10 - a1;
    if (!v11)
    {
      v1[5] = v12;
      return;
    }

    goto LABEL_6;
  }

void sub_10019B908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 & 0xFFFFFFFFFFFFFFLL;
  sub_10002B924();
  if ((a1 & 0x8000000000000000LL) == 0)
  {
    unsigned int v7 = HIDWORD(a2) - a2;
    if (HIDWORD(a2) < a2)
    {
      __break(1u);
      goto LABEL_9;
    }

    uint64_t v8 = v3[5];
    v3 += 5;
    BOOL v9 = __OFADD__(v8, v7);
    uint64_t v10 = v8 + v7;
    if (!v9) {
      goto LABEL_7;
    }
    __break(1u);
  }

  uint64_t v11 = FileRegion.readableBytes.getter(a1 & 0x7FFFFFFFFFFFFFFFLL, a2, v6);
  uint64_t v12 = v3[5];
  v3 += 5;
  uint64_t v10 = v12 + v11;
  if (!__OFADD__(v12, v11))
  {
LABEL_7:
    *uint64_t v3 = v10;
    return;
  }

uint64_t sub_10019B984(uint64_t a1, Swift::Int a2, char a3)
{
  unsigned int v4 = v3;
  if ((a3 & 1) == 0 && !a2) {
    return 0LL;
  }
  if (a1 < 0)
  {
LABEL_59:
    __break(1u);
  }

  else
  {
    if (!a1) {
      return 0LL;
    }
    unint64_t v7 = v3[1];
    int64_t v6 = v3[2];
    if (v7 != v6)
    {
      uint64_t v5 = 0LL;
      uint64_t v8 = *v3;
      while ((v7 & 0x8000000000000000LL) == 0)
      {
        if (HIDWORD(v7)) {
          goto LABEL_63;
        }
        unint64_t v9 = *(void *)(v8 + 16);
        if (v7 >= v9)
        {
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
          goto LABEL_59;
        }

        uint64_t v10 = (uint64_t *)(v8 + 32 * v7);
        if (v10[7] == 1) {
          goto LABEL_61;
        }
        uint64_t v11 = v10 + 4;
        uint64_t v12 = v10[5];
        if (*v11 < 0)
        {
          if (v12 < 0) {
            goto LABEL_57;
          }
          uint64_t v14 = v12 - (v11[2] & 0xFFFFFFFFFFFFFFLL);
        }

        else
        {
          BOOL v13 = HIDWORD(v12) >= v12;
          uint64_t v14 = (HIDWORD(v12) - v12);
          if (!v13) {
            goto LABEL_55;
          }
        }

        Swift::Int v15 = a2 - v14;
        if (a2 < v14)
        {
          sub_10019B7D4(a2);
          return v5;
        }

        if (__OFSUB__(a2, v14)) {
          goto LABEL_51;
        }
        if ((v4[4] & 1) == 0)
        {
          uint64_t v16 = v4[3];
          BOOL v17 = v16 < 1;
          uint64_t v18 = v16 - 1;
          char v19 = v17;
          if (v17) {
            uint64_t v18 = 0LL;
          }
          void v4[3] = v18;
          *((_BYTE *)v4 + 3sub_100019F7C(v0 + 2) = v19;
        }

        Swift::Int v34 = v15;
        uint64_t v35 = a1;
        uint64_t v20 = v11[3];
        if (v20 == 1) {
          goto LABEL_62;
        }
        uint64_t v21 = *v11;
        uint64_t v22 = v11[1];
        uint64_t v23 = v11[2];
        sub_100033ED4(*v11);
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        {
          sub_1000F2410();
          uint64_t v8 = v24;
        }

        if (v7 >= *(void *)(v8 + 16)) {
          goto LABEL_53;
        }
        unint64_t v25 = (uint64_t *)(v8 + 32 * v7);
        sub_1000349CC(v25[4], v25[5], v25[6], v25[7]);
        v25[4] = 0LL;
        v25[5] = 0LL;
        v25[6] = 0LL;
        v25[7] = 1LL;
        *unsigned int v4 = v8;
        unint64_t v7 = (*(void *)(v8 + 16) - 1LL) & (v7 + 1);
        v4[1] = v7;
        if (v21 < 0)
        {
          if (v22 < 0) {
            goto LABEL_58;
          }
          uint64_t v26 = v22 - (v23 & 0xFFFFFFFFFFFFFFLL);
        }

        else
        {
          uint64_t v26 = (HIDWORD(v22) - v22);
        }

        uint64_t v27 = v4[5];
        BOOL v28 = __OFSUB__(v27, v26);
        uint64_t v29 = v27 - v26;
        if (v28) {
          goto LABEL_54;
        }
        void v4[5] = v29;
        swift_retain();
        sub_1000349CC(v21, v22, v23, v20);
        if (v20)
        {
          if (v5)
          {
            swift_retain_n(v5, 2LL);
            uint64_t v30 = swift_retain();
            sub_10002C4B8(v30);
            swift_release_n(v5, 2LL);
            swift_release_n(v20, 2LL);
          }

          else
          {
            uint64_t v5 = v20;
          }
        }

        a2 = v34;
        a1 = v35 - 1;
        if (v35 == 1) {
          return v5;
        }
        if (v7 == v6)
        {
          swift_release();
          __break(1u);
          return 0LL;
        }
      }

      uint64_t v32 = "Negative value is not representable";
      uint64_t v33 = 35LL;
      goto LABEL_65;
    }
  }

  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  uint64_t v32 = "Not enough bits to represent the passed value";
  uint64_t v33 = 45LL;
LABEL_65:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v32,  v33,  2LL,  "Swift/Integers.swift",  20LL);
  __break(1u);
  return result;
}

uint64_t sub_10019BCA4()
{
  unint64_t v2 = v0[1];
  int64_t v1 = v0[2];
  if (v2 == v1) {
    return 0LL;
  }
  uint64_t v25 = 0LL;
  uint64_t v26 = v0;
  uint64_t v4 = v0[5];
  uint64_t v5 = *v0;
  while (1)
  {
    if ((v0[4] & 1) == 0)
    {
      uint64_t v6 = v0[3];
      BOOL v7 = v6 < 1;
      uint64_t v8 = v6 - 1;
      char v9 = v7;
      if (v7) {
        uint64_t v8 = 0LL;
      }
      v0[3] = v8;
      *((_BYTE *)v0 + 3sub_100019F7C(v0 + 2) = v9;
    }

    uint64_t v10 = v1 - v2;
    if (v10 < 1)
    {
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      uint64_t v23 = "Not enough bits to represent the passed value";
      uint64_t v24 = 45LL;
      goto LABEL_46;
    }

    if ((v2 & 0x8000000000000000LL) != 0) {
      break;
    }
    if (HIDWORD(v2)) {
      goto LABEL_44;
    }
    unint64_t v11 = *(void *)(v5 + 16);
    if (v2 >= v11) {
      goto LABEL_37;
    }
    uint64_t v12 = (void *)(v5 + 32 * v2);
    uint64_t v13 = v12[7];
    if (v13 == 1) {
      goto LABEL_43;
    }
    uint64_t v14 = v12[4];
    uint64_t v15 = v12[5];
    uint64_t v16 = v12[6];
    sub_100033ED4(v14);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
    {
      sub_1000F2410();
      uint64_t v5 = v17;
    }

    if (v2 >= *(void *)(v5 + 16)) {
      goto LABEL_39;
    }
    uint64_t v18 = (uint64_t *)(v5 + 32 * v2);
    sub_1000349CC(v18[4], v18[5], v18[6], v18[7]);
    void v18[4] = 0LL;
    v18[5] = 0LL;
    v18[6] = 0LL;
    v18[7] = 1LL;
    uint64_t v19 = *(void *)(v5 + 16);
    if (v14 < 0)
    {
      if (v15 < 0) {
        goto LABEL_42;
      }
      uint64_t v20 = v15 - (v16 & 0xFFFFFFFFFFFFFFLL);
    }

    else
    {
      uint64_t v20 = (HIDWORD(v15) - v15);
    }

    BOOL v21 = __OFSUB__(v4, v20);
    v4 -= v20;
    if (v21) {
      goto LABEL_40;
    }
    swift_retain();
    sub_1000349CC(v14, v15, v16, v13);
    if (v13)
    {
      if (v25)
      {
        swift_retain_n(v25, 2LL);
        uint64_t v22 = swift_retain();
        sub_10002C4B8(v22);
        swift_release_n(v25, 2LL);
        swift_release_n(v13, 2LL);
      }

      else
      {
        uint64_t v25 = v13;
      }
    }

    unint64_t v2 = (v19 - 1) & (v2 + 1);
    uint64_t v0 = v26;
    if (v2 == v1)
    {
      void v26[5] = v4;
      *uint64_t v26 = v5;
      v26[1] = v1;
      return v25;
    }
  }

  uint64_t v23 = "Negative value is not representable";
  uint64_t v24 = 35LL;
LABEL_46:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v23,  v24,  2LL,  "Swift/Integers.swift",  20LL);
  __break(1u);
  return result;
}

uint64_t sub_10019BF2C(uint64_t a1, Swift::Int a2, char a3)
{
  uint64_t v4 = v3;
  char v7 = a3 & 1;
  swift_beginAccess(v4 + 2, v13, 33LL, 0LL);
  uint64_t v8 = sub_10019B984(a1, a2, v7);
  uint64_t v10 = v9;
  swift_endAccess(v13);
  if (v4[7] < v4[12])
  {
    uint64_t v11 = v4[14];
    swift_retain();
    sub_100006CF0((_BYTE *)(v11 + 16), 1);
    swift_release();
  }

  if (v8)
  {
    swift_retain();
    sub_100098A70(0LL, 0LL, v8);
    swift_release_n(v8, 2LL);
  }

  return v10;
}

uint64_t sub_10019C008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + sub_100195C94(v0 + 16) = v9;
  *(void *)(v4 + 24) = v10;
  *(void *)(v4 + 3sub_100019F7C(v0 + 2) = v11;
  *(void *)(v4 + 4sub_10019B2E8(v0, 0) = 0LL;
  *(_BYTE *)(v4 + 48) = 1;
  *(void *)(v4 + 56) = 0LL;
  *(_OWORD *)(v4 + 96) = xmmword_100205A60;
  uint64_t v12 = sub_1000175B0(&qword_1002B6E60);
  uint64_t v13 = swift_bufferAllocate(v12, 17LL, 7LL);
  sub_100006CF0((_BYTE *)(v13 + 16), 1);
  *(void *)(v4 + 11sub_100019F7C(v0 + 2) = swift_dynamicCastClassUnconditional(v13, v12, 0LL, 0LL, 0LL);
  *(_BYTE *)(v4 + 12sub_10019B2E8(v0, 0) = 1;
  *(void *)(v4 + sub_100081CEC(v0 + 128) = 16LL;
  *(_BYTE *)(v4 + 136) = 1;
  *(void *)(v4 + 64) = a1;
  *(void *)(v4 + 7sub_100019F7C(v0 + 2) = a2;
  *(void *)(v4 + 8sub_10019B2E8(v0, 0) = a3;
  *(void *)(v4 + 88) = a4;
  return v4;
}

uint64_t sub_10019C0DC()
{
  return v0;
}

uint64_t sub_10019C100()
{
  return swift_deallocClassInstance(v0, 137LL, 7LL);
}

uint64_t type metadata accessor for PendingStreamWritesManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService26PendingStreamWritesManager);
}

uint64_t initializeWithCopy for PendingStreamWritesState(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  *(void *)(a1 + 24) = a2[3];
  *(_BYTE *)(a1 + 3sub_100019F7C(v0 + 2) = *((_BYTE *)a2 + 32);
  *(void *)(a1 + 4sub_10019B2E8(v0, 0) = a2[5];
  swift_retain(v3);
  return a1;
}

uint64_t *assignWithCopy for PendingStreamWritesState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  *((_BYTE *)a1 + 3sub_100019F7C(v0 + 2) = *((_BYTE *)a2 + 32);
  a1[3] = v6;
  a1[5] = a2[5];
  return a1;
}

uint64_t *assignWithTake for PendingStreamWritesState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  a1[3] = a2[3];
  *((_BYTE *)a1 + 3sub_100019F7C(v0 + 2) = *((_BYTE *)a2 + 32);
  a1[5] = a2[5];
  return a1;
}

uint64_t getEnumTagSinglePayload for PendingStreamWritesState(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 48))
    {
      LODWORD(v7(v1, v0, 2LL, v3, v6, v5, v4, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v7(v1, v0, 2LL, v3, v6, v5, v4, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PendingStreamWritesState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 4sub_10019B2E8(v0, 0) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PendingStreamWritesState()
{
  return &type metadata for PendingStreamWritesState;
}

unint64_t sub_10019C2E8()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(49LL);
  swift_bridgeObjectRelease();
  unint64_t v23 = 0xD00000000000002DLL;
  *(void *)&__int128 v24 = 0x8000000100221E80LL;
  swift_beginAccess(v0 + 16, v30, 0LL, 0LL);
  if (*(_BYTE *)(v0 + 48)) {
    uint64_t v2 = 0x65736C6166LL;
  }
  else {
    uint64_t v2 = 1702195828LL;
  }
  if (*(_BYTE *)(v0 + 48)) {
    unint64_t v3 = 0xE500000000000000LL;
  }
  else {
    unint64_t v3 = 0xE400000000000000LL;
  }
  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  v5._unint64_t countAndFlagsBits = 8236LL;
  v5._object = (void *)0xE200000000000000LL;
  String.append(_:)(v5);
  unint64_t v7 = v23;
  uint64_t v6 = v24;
  unint64_t v23 = 0LL;
  *(void *)&__int128 v24 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(33LL);
  uint64_t v28 = 0LL;
  unint64_t v29 = 0xE000000000000000LL;
  v8._object = (void *)0x8000000100221EB0LL;
  v8._unint64_t countAndFlagsBits = 0xD000000000000011LL;
  String.append(_:)(v8);
  uint64_t v9 = *(void *)(v0 + 112);
  swift_retain();
  int v10 = sub_100006CE4((_BYTE *)(v9 + 16));
  swift_release();
  if (v10) {
    uint64_t v11 = 1702195828LL;
  }
  else {
    uint64_t v11 = 0x65736C6166LL;
  }
  if (v10) {
    unint64_t v12 = 0xE400000000000000LL;
  }
  else {
    unint64_t v12 = 0xE500000000000000LL;
  }
  unint64_t v13 = v12;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease();
  v14._unint64_t countAndFlagsBits = 0x6574617473202C29LL;
  v14._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v14);
  uint64_t v15 = *(void *)(v1 + 40);
  char v16 = *(_BYTE *)(v1 + 48);
  uint64_t v17 = *(void *)(v1 + 56);
  unint64_t v23 = *(void *)(v1 + 16);
  __int128 v24 = *(_OWORD *)(v1 + 24);
  uint64_t v25 = v15;
  char v26 = v16;
  uint64_t v27 = v17;
  _print_unlocked<A, B>(_:_:)(&v23, &v28);
  v18._unint64_t countAndFlagsBits = 32032LL;
  v18._object = (void *)0xE200000000000000LL;
  String.append(_:)(v18);
  uint64_t v19 = v28;
  uint64_t v20 = (void *)v29;
  unint64_t v23 = v7;
  *(void *)&__int128 v24 = v6;
  swift_bridgeObjectRetain();
  v21._unint64_t countAndFlagsBits = v19;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v23;
}

unint64_t sub_10019C4FC()
{
  return sub_10019C2E8();
}

uint64_t destroy for PendingStreamWrite(uint64_t *a1)
{
  return swift_release();
}

uint64_t initializeWithCopy for PendingStreamWrite(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  char v7 = *(_BYTE *)(a2 + 22);
  __int16 v8 = *(_WORD *)(a2 + 20);
  sub_100033ED4(*(void *)a2);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 2sub_100019F7C(v0 + 2) = v7;
  *(_WORD *)(a1 + 2sub_10019B2E8(v0, 0) = v8;
  *(_DWORD *)(a1 + sub_100195C94(v0 + 16) = v4;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PendingStreamWrite(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  char v7 = *(_BYTE *)(a2 + 22);
  __int16 v8 = *(_WORD *)(a2 + 20);
  sub_100033ED4(*(void *)a2);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + sub_100195C94(v0 + 16) = v4;
  *(_BYTE *)(a1 + 2sub_100019F7C(v0 + 2) = v7;
  *(_WORD *)(a1 + 2sub_10019B2E8(v0, 0) = v8;
  sub_100018F04(v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for PendingStreamWrite(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  __int16 v5 = *(_WORD *)(a2 + 20);
  char v6 = *(_BYTE *)(a2 + 22);
  uint64_t v7 = *(void *)a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + sub_100195C94(v0 + 16) = v4;
  *(_WORD *)(a1 + 2sub_10019B2E8(v0, 0) = v5;
  *(_BYTE *)(a1 + 2sub_100019F7C(v0 + 2) = v6;
  sub_100018F04(v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PendingStreamWrite(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      unint64_t v3 = *(void *)(a1 + 24);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(sub_10005A704(v2, v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PendingStreamWrite(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + sub_100195C94(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 3sub_100019F7C(v0 + 2) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 3sub_100019F7C(v0 + 2) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PendingStreamWrite()
{
  return &type metadata for PendingStreamWrite;
}

uint64_t sub_10019C7BC()
{
  return sub_100018F04(v0);
}

uint64_t sub_10019C7E4()
{
  return sub_100033ED4(v0);
}

uint64_t sub_10019C80C(uint64_t a1, ...)
{
  return swift_beginAccess(v1 + 16, va, 33LL, 0LL);
}

  ;
}

uint64_t sub_10019C840()
{
  return sub_100018F04(v0);
}

uint64_t sub_10019C850(uint64_t a1, Swift::Int a2, char a3)
{
  return sub_10019BF2C(a1, a2, a3);
}

Swift::Int sub_10019C858(Swift::Int result, Swift::Int a2, uint64_t a3)
{
  if (result == a2) {
    return swift_release(a3);
  }
  Swift::Int v5 = result;
  if (a2 >= result)
  {
    while (v5 < a2)
    {
      ++v5;
      uint64_t result = OS_dispatch_semaphore.signal()();
      if (a2 == v5) {
        return swift_release(a3);
      }
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t NIOThreadPool.runIfActive<A>(eventLoop:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v10 = EventLoop.makePromise<A>(of:file:line:)( a5,  (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/NIOThreadPool.swift",  115LL,  2LL,  224LL,  ObjectType,  a5,  a2);
  uint64_t v11 = (void *)sub_100019310((uint64_t)&unk_10028F128, 48LL);
  void v11[2] = a5;
  void v11[3] = v10;
  v11[4] = a3;
  v11[5] = a4;
  swift_retain();
  swift_retain();
  NIOThreadPool.submit(_:)();
  swift_release();
  return v10;
}

uint64_t NIOThreadPool.shutdownGracefully(queue:_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v58 = a2;
  uint64_t v59 = a3;
  uint64_t v52 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v57 = *(void *)(v52 - 8);
  sub_100043FD8();
  __chkstk_darwin(v6);
  sub_10001DAD0();
  uint64_t v55 = v8 - v7;
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_10001DAD0();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  sub_100043FD8();
  __chkstk_darwin(v15);
  sub_10001DAD0();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v53 = *(void *)(v19 - 8);
  uint64_t v54 = v19;
  sub_100043FD8();
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  dispatch_group_t v51 = dispatch_group_create();
  uint64_t v23 = *(void *)(v4 + 24);
  swift_retain();
  id v56 = a1;
  uint64_t v50 = sub_100138B64(v23, v4, v56);
  sub_1000435C0();
  sub_10019E428();
  unint64_t v61 = (void **)_swiftEmptyArrayStorage;
  sub_100046F3C( (unint64_t *)&qword_1002AAFB0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (const char *)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v25 = v24;
  uint64_t v26 = sub_1000175B0((uint64_t *)&unk_1002B6F80);
  sub_10019DD10((unint64_t *)&qword_1002AAFB8, (uint64_t *)&unk_1002B6F80);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v61, v26, v27, v14, v25);
  (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))( v13,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v9);
  uint64_t v28 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002CLL,  0x8000000100221ED0LL,  v22,  v18,  v13,  0LL);
  uint64_t v29 = sub_100019310((uint64_t)&unk_10028F150, 24LL);
  *(void *)(v29 + sub_100195C94(v0 + 16) = v50;
  uint64_t v63 = sub_10019DCF0;
  uint64_t v64 = v29;
  unint64_t v61 = _NSConcreteStackBlock;
  uint64_t v62 = 1107296256LL;
  uint64_t v30 = sub_10019E410((uint64_t)sub_1000169C8);
  dispatch_group_t v31 = v51;
  uint64_t v32 = v51;
  char v48 = v32;
  sub_10019E428();
  char v60 = _swiftEmptyArrayStorage;
  sub_100046F3C( (unint64_t *)&qword_1002B6F20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (const char *)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v34 = v33;
  uint64_t v50 = v33;
  uint64_t v35 = sub_1000175B0(&qword_1002A9118);
  uint64_t v49 = v35;
  sub_10019DD10((unint64_t *)&qword_1002B6F30, &qword_1002A9118);
  uint64_t v37 = v36;
  uint64_t v38 = v55;
  uint64_t v39 = v35;
  uint64_t v40 = v52;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v60, v39, v36, v52, v34);
  OS_dispatch_queue.async(group:qos:flags:execute:)(v31, v22, v38, v30);
  _Block_release(v30);

  uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
  v41(v38, v40);
  sub_10019E41C();
  swift_release();
  uint64_t v42 = sub_100019310((uint64_t)&unk_10028F1A0, 32LL);
  uint64_t v43 = v59;
  *(void *)(v42 + sub_100195C94(v0 + 16) = v58;
  *(void *)(v42 + 24) = v43;
  uint64_t v63 = sub_10019DD4C;
  uint64_t v64 = v42;
  unint64_t v61 = _NSConcreteStackBlock;
  uint64_t v62 = 1107296256LL;
  uint64_t v44 = sub_10019E410((uint64_t)sub_1000169C8);
  ChannelPipeline.syncOperations.getter();
  sub_10019E428();
  char v60 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v60, v49, v37, v40, v50);
  Swift::Int v45 = v48;
  OS_dispatch_group.notify(qos:flags:queue:execute:)(v22, v38, v56, v44);
  _Block_release(v44);

  v41(v38, v40);
  sub_10019E41C();
  return swift_release();
}

void sub_10019CDB4(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = sub_100022744();
  uint64_t v8 = type metadata accessor for DispatchQoS(v7);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_10001DAD0();
  uint64_t v13 = v12 - v11;
  if (*(_BYTE *)(a1 + 64) != 1)
  {
    *a2 = _swiftEmptyArrayStorage;
    goto LABEL_6;
  }

  uint64_t v32 = a2;
  uint64_t v34 = v10;
  uint64_t v15 = *(void *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = (void *)sub_100019310((uint64_t)&unk_10028F440, 40LL);
  v17[2] = v16;
  v17[3] = v15;
  void v17[4] = v14;
  void v35[4] = sub_10019E3E0;
  v35[5] = v17;
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 1107296256LL;
  uint64_t v18 = sub_100041B10((uint64_t)sub_1000169C8);
  uint64_t v19 = ChannelPipeline.syncOperations.getter();
  static DispatchQoS.unspecified.getter(v19);
  v35[7] = _swiftEmptyArrayStorage;
  sub_100046F3C( (unint64_t *)&qword_1002B6F20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (const char *)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v33 = v6;
  uint64_t v21 = v20;
  sub_1000175B0(&qword_1002A9118);
  sub_10019DD10((unint64_t *)&qword_1002B6F30, &qword_1002A9118);
  uint64_t v22 = sub_10019E430();
  dispatch thunk of SetAlgebra.init<A>(_:)(v22, v23, v24, v5, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v2, v18);
  _Block_release(v18);
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v2, v5);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v13, v34);
  swift_release();
  size_t v25 = *(void *)(a1 + 72);
  sub_1000B988C(1, v25);
  uint64_t v27 = *(void *)(a1 + 40);
  uint64_t v26 = *(void *)(a1 + 48);
  uint64_t v28 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 4sub_10019B2E8(v0, 0) = v29;
  char v30 = *(_BYTE *)(a1 + 64);
  *(_BYTE *)(a1 + 64) = 0;
  sub_10019DD6C(v27, v26, v28, v30);
  if ((v25 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    swift_retain();
    sub_10019C858(0LL, v25, a1);
    swift_beginAccess(a1 + 32, v35, 1LL, 0LL);
    uint64_t v31 = *(void *)(a1 + 32);
    if (v31)
    {
      *uint64_t v32 = v31;
      *(void *)(a1 + 3sub_100019F7C(v0 + 2) = 0LL;
LABEL_6:
      sub_10001DAB8();
      return;
    }
  }

  __break(1u);
}

uint64_t sub_10019D00C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10002CEDC();
  swift_retain(a1);
  if (a3 < 0) {
    goto LABEL_22;
  }
  if (HIDWORD(a3)) {
    goto LABEL_20;
  }
  BOOL v8 = (_DWORD)v6 == (_DWORD)a3
    && (v6 & 0xFFFF00000000LL) == 0xFFFF00000000LL
    && (v6 & 0xFF000000000000LL) == 0xFF000000000000LL;
  if (!v8 || a3 < a2 == (HIBYTE(v6) & 1))
  {
    while (1)
    {
      unint64_t v9 = *(void *)(a1 + 16);
      uint64_t v10 = *(void (**)(char *))(a1 + 32 + 16LL * v6);
      if (!v10) {
        goto LABEL_19;
      }
      uint64_t v6 = (v9 - 1) & (v6 + 1LL);
      if (HIDWORD(v6)) {
        goto LABEL_20;
      }
      char v14 = 1;
      v10(&v14);
      if ((_DWORD)v6 == (_DWORD)a3 && a3 < a2 != v6 >= a2) {
        return swift_release(a1);
      }
    }

    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    uint64_t v12 = "Not enough bits to represent the passed value";
    for (uint64_t i = 45LL; ; uint64_t i = 35LL)
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11LL, 2LL, v12, i, 2LL, "Swift/Integers.swift", 20LL);
      __break(1u);
LABEL_22:
      uint64_t v12 = "Negative value is not representable";
    }
  }

  return swift_release(a1);
}

uint64_t sub_10019D198(uint64_t a1)
{
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t result = swift_bridgeObjectRetain(a1);
    if (v2) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease(a1);
  }

  if (a1 < 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(v6);
  uint64_t v2 = result;
  if (!result) {
    return swift_bridgeObjectRelease(a1);
  }
LABEL_3:
  if (v2 >= 1)
  {
    for (uint64_t i = 0LL; i != v2; ++i)
    {
      if ((a1 & 0xC000000000000001LL) != 0)
      {
        uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      }

      else
      {
        uint64_t v5 = *(void *)(a1 + 8 * i + 32);
        swift_retain(v5);
      }

      pthread_join(*(pthread_t *)(v5 + 32), 0LL);
      swift_release(v5);
    }

    return swift_bridgeObjectRelease(a1);
  }

  __break(1u);
  return result;
}

void (*NIOThreadPool.submit(_:)())(char *)
{
  uint64_t result = (void (*)(char *))sub_100138ADC();
  if (result)
  {
    uint64_t v2 = (uint64_t)result;
    uint64_t v3 = v1;
    v4[0] = 1;
    result(v4);
    return (void (*)(char *))sub_10010D700(v2, v3);
  }

  return result;
}

void sub_10019D2E4( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (**a4)(unsigned __int8 *a1)@<X8>)
{
  if (*(_BYTE *)(a1 + 64) != 1)
  {
    uint64_t v15 = sub_100019310((uint64_t)&unk_10028F3F0, 32LL);
    *(void *)(v15 + sub_100195C94(v0 + 16) = a2;
    *(void *)(v15 + 24) = a3;
    *a4 = sub_10019E3A8;
    a4[1] = (void (*)(unsigned __int8 *))v15;
    swift_retain();
    return;
  }

  uint64_t v8 = *(void *)(a1 + 48);
  unint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = sub_100019310((uint64_t)&unk_10028F418, 32LL);
  *(void *)(v11 + sub_100195C94(v0 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  sub_10019E234(v10, v8, v9, 1);
  swift_retain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
  {
    sub_1000F2450();
    uint64_t v10 = v12;
  }

  if ((v9 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }

  if (v9 >= *(void *)(v10 + 16))
  {
LABEL_11:
    __break(1u);
    return;
  }

  unint64_t v13 = v10 + 16 * v9;
  sub_10010D700(*(void *)(v13 + 32), *(void *)(v13 + 40));
  *(void *)(v13 + 3sub_100019F7C(v0 + 2) = sub_10019E40C;
  *(void *)(v13 + 4sub_10019B2E8(v0, 0) = v11;
  uint64_t v14 = (*(void *)(v10 + 16) - 1LL) & (v9 + 1);
  if (v8 == v14) {
    sub_1000F3E88();
  }
  swift_release();
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 48);
  uint64_t v18 = *(void *)(a1 + 56);
  *(void *)(a1 + 4sub_10019B2E8(v0, 0) = v10;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v14;
  char v19 = *(_BYTE *)(a1 + 64);
  *(_BYTE *)(a1 + 64) = 1;
  sub_10019DD6C(v16, v17, v18, v19);
  OS_dispatch_semaphore.signal()();
  *a4 = 0LL;
  a4[1] = 0LL;
}

void NIOThreadPool.__allocating_init(numberOfThreads:)(uint64_t a1)
{
}

uint64_t NIOThreadPool.init(numberOfThreads:)(uint64_t a1)
{
  *(void *)(v1 + sub_100195C94(v0 + 16) = dispatch_semaphore_create(0LL);
  uint64_t v3 = type metadata accessor for Lock();
  sub_100019310(v3, 24LL);
  *(void *)(v1 + 24) = Lock.init()();
  *(_OWORD *)(v1 + 3sub_100019F7C(v0 + 2) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_BYTE *)(v1 + 64) = 2;
  *(void *)(v1 + 7sub_100019F7C(v0 + 2) = a1;
  return v1;
}

uint64_t sub_10019D510(unint64_t a1)
{
  uint64_t v2 = v1;
  OS_dispatch_semaphore.wait()();
  swift_retain();
  Lock.lock()();
  uint64_t v4 = v1;
  for (unint64_t i = a1; ; unint64_t i = a1)
  {
    sub_10019D5F4(v4, i, v9);
    Lock.unlock()();
    uint64_t result = swift_release();
    uint64_t v7 = (void (*)(void *))v9[0];
    if (!v9[0]) {
      break;
    }
    uint64_t v8 = v9[1];
    LOBYTE(v9[0]) = 0;
    v7(v9);
    sub_10010D700((uint64_t)v7, v8);
    OS_dispatch_semaphore.wait()();
    swift_retain();
    Lock.lock()();
    uint64_t v4 = v2;
  }

  return result;
}

void sub_10019D5F4(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = a1 + 48;
  unint64_t v5 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 40);
  if (*(_BYTE *)(a1 + 64))
  {
    if (*(_BYTE *)(a1 + 64) != 1)
    {
LABEL_16:
      *a3 = 0LL;
      a3[1] = 0LL;
      return;
    }

    unint64_t v8 = *(void *)(a1 + 56);
    if (v8 == v5)
    {
      __break(1u);
    }

    else
    {
      sub_10002CEDC(*(void *)(a1 + 40));
      sub_10002D02C();
      uint64_t v6 = v9;
      uint64_t v11 = v10;
      uint64_t v12 = v8 - v5;
      if (v12 >= 1)
      {
        uint64_t v13 = swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
        {
          sub_1000F2450();
          uint64_t v7 = v14;
        }

        if ((v5 & 0x8000000000000000LL) == 0)
        {
          if (v5 < *(void *)(v7 + 16))
          {
            uint64_t v15 = v7 + 16 * v5;
            sub_10010D700(*(void *)(v15 + 32), *(void *)(v15 + 40));
            *(void *)(v15 + 3sub_100019F7C(v0 + 2) = 0LL;
            *(void *)(v15 + 4sub_10019B2E8(v0, 0) = 0LL;
            uint64_t v16 = *(void *)(v7 + 16) - 1LL;
            uint64_t v17 = *(void *)(a1 + 40);
            uint64_t v18 = *(void *)(a1 + 48);
            uint64_t v19 = *(void *)(a1 + 56);
            *(void *)(a1 + 4sub_10019B2E8(v0, 0) = v7;
            *(void *)(a1 + 48) = v16 & (v5 + 1);
            *(void *)(a1 + 56) = v8;
            char v20 = *(_BYTE *)(a1 + 64);
            *(_BYTE *)(a1 + 64) = 1;
            sub_10019DD6C(v17, v18, v19, v20);
            *a3 = v6;
            a3[1] = v11;
            return;
          }

          goto LABEL_20;
        }

Swift::Void __swiftcall NIOThreadPool.start()()
{
  int v1 = *(unsigned __int8 *)(v0 + 64);
  if (v1 == 1)
  {
    Lock.unlock()();
    swift_release();
    return;
  }

  if (v1 != 2) {
    goto LABEL_10;
  }
  sub_10002B2DC(0x10uLL);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 56);
  *(void *)(v0 + 4sub_10019B2E8(v0, 0) = v5;
  *(void *)(v0 + 48) = v6;
  *(void *)(v0 + 56) = v7;
  char v8 = *(_BYTE *)(v0 + 64);
  *(_BYTE *)(v0 + 64) = 1;
  sub_10019DD6C(v2, v3, v4, v8);
  Lock.unlock()();
  swift_release();
  uint64_t v9 = dispatch_group_create();
  Lock.lock()();
  sub_10019D9A4(v0);
  Lock.unlock()();
  uint64_t v10 = *(void *)(v0 + 72);
  if (v10 < 0)
  {
    __break(1u);
LABEL_10:
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000024LL,  0x8000000100221F30LL,  "ASOctaneSupportXPCService/NIOThreadPool.swift",  45LL,  2LL);
    __break(1u);
    return;
  }

  if (v10)
  {
    type metadata accessor for NIOThread();
    for (uint64_t i = 0LL; i != v10; ++i)
    {
      dispatch_group_enter(v9);
      v12._unint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      uint64_t v13 = (void *)sub_100019310((uint64_t)&unk_10028F1F0, 40LL);
      void v13[2] = v0;
      v13[3] = v9;
      v13[4] = i;
      sub_10002A4C8();
      uint64_t v14 = v9;
      sub_1000A8DEC(590172244LL, 0xE400000000000000LL, 0, (uint64_t)sub_10019DDA8, (uint64_t)v13);
      swift_bridgeObjectRelease();
      swift_release();
    }
  }

  OS_dispatch_group.wait()();
}

uint64_t sub_10019D9A4(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  swift_beginAccess(a1 + 32, v7, 1LL, 0LL);
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v3);
  swift_beginAccess(v2, v6, 33LL, 0LL);
  if (*(void *)(a1 + 32))
  {
    uint64_t v4 = sub_10006F028(*(void *)(a1 + 72), 0);
    specialized Array._endMutation()(v4);
  }

  return swift_endAccess(v6);
}

uint64_t sub_10019DA38(uint64_t a1, uint64_t a2, dispatch_group_s *a3, unint64_t a4)
{
  return sub_10019D510(a4);
}

uint64_t sub_10019DAA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a1 + 32);
  uint64_t result = swift_beginAccess(a1 + 32, v9, 33LL, 0LL);
  if (*(void *)(a1 + 32))
  {
    uint64_t v6 = swift_retain(a2);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v6);
    uint64_t v7 = *(void *)((*v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    sub_10002E9EC(v7);
    uint64_t v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, a2);
    specialized Array._endMutation()(v8);
    return swift_endAccess(v9);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t NIOThreadPool.deinit()
{
  sub_100035650();
  swift_bridgeObjectRelease();
  sub_10019DD6C(*(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(_BYTE *)(v0 + 64));
  return v0;
}

uint64_t NIOThreadPool.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 80LL, 7LL);
}

uint64_t sub_10019DB94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a5 - 8);
  char v8 = __chkstk_darwin(a1);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((v8 & 1) != 0)
  {
    unint64_t v12 = sub_1000EECB0();
    uint64_t v13 = swift_allocError(&type metadata for NIOThreadPoolError.ThreadPoolInactive, v12, 0LL, 0LL);
    EventLoopPromise.fail(_:)(v13);
    return swift_errorRelease(v13);
  }

  else
  {
    v9();
    EventLoopPromise.succeed(_:)((uint64_t)v11, a2, a5);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v11, a5);
  }

uint64_t sub_10019DC94()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10019DCBC(char a1)
{
  return sub_10019DB94(a1 & 1, v1[3], v1[4], v1[5], v1[2]);
}

uint64_t sub_10019DCCC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10019DCF0()
{
  return sub_10019D198(*(void *)(v0 + 16));
}

uint64_t sub_10019DCF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10019B2E8(v0, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10019DD08(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_10019DD10(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v3 = sub_100018EC0(a2);
    atomic_store(swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v3), a1);
  }

  sub_10001945C();
}

void sub_10019DD4C()
{
}

uint64_t sub_10019DD6C(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 1) {
    return swift_release(result);
  }
  if (!a4) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t sub_10019DD88()
{
  uint64_t v1 = sub_10010DB7C();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10019DDA8(uint64_t a1)
{
  return sub_10019DA38(a1, *(void *)(v1 + 16), *(dispatch_group_s **)(v1 + 24), *(void *)(v1 + 32));
}

void NIOThreadPool.shutdownGracefully(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10001DAD0();
  uint64_t v8 = v7 - v6;
  sub_1000435C0();
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v8, enum case for DispatchQoS.QoSClass.default(_:), v4);
  uint64_t v9 = (void *)static OS_dispatch_queue.global(qos:)(v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
  NIOThreadPool.shutdownGracefully(queue:_:)(v9, a1, a2);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NIOThreadPool.syncShutdownGracefully()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  sub_100043FD8();
  __chkstk_darwin(v2);
  sub_100022744();
  uint64_t v3 = type metadata accessor for Lock();
  sub_100019310(v3, 24LL);
  uint64_t v4 = Lock.init()();
  uint64_t v5 = sub_100019310((uint64_t)&unk_10028F218, 24LL);
  *(void *)(v5 + sub_100195C94(v0 + 16) = 0LL;
  v16[4] = debugOnly(_:);
  v16[5] = 0LL;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256LL;
  sub_100041B10((uint64_t)sub_1000169C8);
  _OWORD v16[7] = _swiftEmptyArrayStorage;
  sub_100046F3C( (unint64_t *)&qword_1002B6F20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (const char *)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v7 = v6;
  sub_1000175B0(&qword_1002A9118);
  sub_10019DD10((unint64_t *)&qword_1002B6F30, &qword_1002A9118);
  uint64_t v8 = sub_10019E430();
  dispatch thunk of SetAlgebra.init<A>(_:)(v8, v9, v10, v1, v7);
  uint64_t v11 = type metadata accessor for DispatchWorkItem(0LL);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  uint64_t v12 = DispatchWorkItem.init(flags:block:)(v0);
  uint64_t v13 = (void *)sub_100019310((uint64_t)&unk_10028F268, 40LL);
  void v13[2] = v4;
  v13[3] = v5;
  v13[4] = v12;
  swift_retain();
  swift_retain();
  swift_retain();
  NIOThreadPool.shutdownGracefully(_:)((uint64_t)sub_1000D1408, (uint64_t)v13);
  uint64_t v14 = swift_release();
  dispatch thunk of DispatchWorkItem.wait()(v14);
  Lock.lock()();
  swift_beginAccess(v5 + 16, v16, 0LL, 0LL);
  if (*(void *)(v5 + 16))
  {
    uint64_t v15 = swift_errorRetain(*(void *)(v5 + 16));
    swift_willThrow(v15);
  }

  Lock.unlock()();
  swift_release();
  swift_release();
  swift_release();
  sub_10001DAB8();
}

uint64_t sub_10019E0AC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10019E0D0()
{
  uint64_t v0 = sub_10010DB7C();
  return swift_deallocObject(v0, v1, v2);
}

unint64_t sub_10019E0F8()
{
  unint64_t result = qword_1002B8A60;
  if (!qword_1002B8A60)
  {
    unint64_t result = swift_getWitnessTable( protocol conformance descriptor for NIOThreadPool.WorkItemState,  &type metadata for NIOThreadPool.WorkItemState);
    atomic_store(result, (unint64_t *)&qword_1002B8A60);
  }

  return result;
}

void type metadata accessor for NIOThreadPoolError()
{
}

void type metadata accessor for NIOThreadPoolError.ThreadPoolInactive()
{
}

uint64_t type metadata accessor for NIOThreadPool()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService13NIOThreadPool);
}

uint64_t storeEnumTagSinglePayload for NIOThreadPool.WorkItemState( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10019E1B8 + 4 * byte_10020A685[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10019E1EC + 4 * asc_10020A680[v4]))();
}

uint64_t sub_10019E1EC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019E1F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10019E1FCLL);
  }
  return result;
}

uint64_t sub_10019E208(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10019E210LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10019E214(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019E21C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for NIOThreadPool.WorkItemState()
{
}

uint64_t sub_10019E234(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 1) {
    return swift_retain(result);
  }
  if (!a4) {
    return swift_bridgeObjectRetain(result);
  }
  return result;
}

uint64_t destroy for NIOThreadPool.State(uint64_t a1)
{
  return sub_10019DD6C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for NIOThreadPool.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  sub_10019E234(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + sub_100195C94(v0 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for NIOThreadPool.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  sub_10019E234(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + sub_100195C94(v0 + 16) = v5;
  char v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_10019DD6C(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for NIOThreadPool.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(_BYTE *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + sub_100195C94(v0 + 16) = v3;
  char v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_10019DD6C(v5, v7, v6, v8);
  return a1;
}

ValueMetadata *type metadata accessor for NIOThreadPool.State()
{
  return &type metadata for NIOThreadPool.State;
}

uint64_t sub_10019E388()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10019E3A8(unsigned __int8 *a1)
{
}

uint64_t sub_10019E3C8()
{
  uint64_t v0 = sub_10010DB7C();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10019E3E0()
{
  return sub_10019D00C(v0[2], v0[3], v0[4]);
}

void *sub_10019E410@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 144) = a1;
  *(void *)(v2 - 136) = v1;
  return _Block_copy((const void *)(v2 - 160));
}

uint64_t sub_10019E41C()
{
  return v0(v2, v1);
}

uint64_t sub_10019E428()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t sub_10019E430()
{
  return v0 - 72;
}

ValueMetadata *type metadata accessor for InAppQueueCheckRequest()
{
  return &type metadata for InAppQueueCheckRequest;
}

unint64_t sub_10019E454(Swift::String string)
{
  object = string._object;
  v2._unint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100274300, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5) {
    return 5LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10019E4A0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10019E4CC + 4 * byte_10020A7F0[a1]))( 6580578LL,  0xE300000000000000LL);
}

uint64_t sub_10019E4CC()
{
  return 1936881250LL;
}

uint64_t sub_10019E4DC()
{
  return 1684632935LL;
}

uint64_t sub_10019E4EC()
{
  return 0x6E4F707041534F69LL;
}

uint64_t sub_10019E50C(uint64_t a1)
{
  return a1 + 20;
}

uint64_t sub_10019E514(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10019E540 + 4 * byte_10020A7F5[a1]))( 6580578LL,  0xE300000000000000LL);
}

uint64_t sub_10019E540()
{
  return 1936881250LL;
}

uint64_t sub_10019E550()
{
  return 1684632935LL;
}

uint64_t sub_10019E560()
{
  return 0x6E4F707041534F69LL;
}

uint64_t sub_10019E580(uint64_t a1)
{
  return a1 + 20;
}

uint64_t sub_10019E588(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_1000175B0(&qword_1002B8B38);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100019F58(a1, v9);
  unint64_t v11 = sub_10019EAC0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for InAppQueueCheckRequest.CodingKeys,  &type metadata for InAppQueueCheckRequest.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v28 = 0;
  sub_100023EB4(v12, v13, (uint64_t)&v28);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    char v27 = 1;
    sub_100023EB4(v14, v15, (uint64_t)&v27);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    char v26 = 2;
    sub_100044D1C(v16, v17, (uint64_t)&v26);
    uint64_t v18 = v3[6];
    uint64_t v19 = v3[7];
    char v25 = 3;
    sub_100044D1C(v18, v19, (uint64_t)&v25);
    uint64_t v20 = v3[8];
    uint64_t v21 = v3[9];
    char v24 = 4;
    sub_100044D1C(v20, v21, (uint64_t)&v24);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10019E6D8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_1000175B0(&qword_1002B8B28);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100019F58(a1, v9);
  unint64_t v11 = sub_10019EAC0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for InAppQueueCheckRequest.CodingKeys,  &type metadata for InAppQueueCheckRequest.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_10001DC08();
  }
  char v40 = 0;
  uint64_t v12 = sub_1001494DC((uint64_t)&v40);
  uint64_t v14 = v13;
  uint64_t v34 = v12;
  char v39 = 1;
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1001494DC((uint64_t)&v39);
  uint64_t v35 = v16;
  uint64_t v31 = v15;
  char v38 = 2;
  sub_1001494C0(v15, v16);
  uint64_t v33 = 0LL;
  uint64_t v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v38, v5);
  char v37 = 3;
  sub_1001494C0(v30, v17);
  uint64_t v18 = sub_1001494CC((uint64_t)&v37);
  uint64_t v32 = 0LL;
  uint64_t v29 = v18;
  char v36 = 4;
  sub_1001494C0(v18, v19);
  uint64_t v20 = sub_1001494CC((uint64_t)&v36);
  uint64_t v22 = v21;
  uint64_t v23 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v24 = v20;
  v23(v8, v5);
  swift_bridgeObjectRetain();
  sub_10001DC08();
  swift_bridgeObjectRelease();
  sub_10001A420();
  uint64_t v25 = v32;
  swift_bridgeObjectRelease();
  uint64_t v26 = v35;
  swift_bridgeObjectRelease();
  uint64_t result = sub_10003561C();
  *a2 = v34;
  a2[1] = v14;
  a2[2] = v31;
  a2[3] = v26;
  a2[4] = v30;
  a2[5] = v25;
  a2[6] = v29;
  a2[7] = 0LL;
  a2[8] = v24;
  a2[9] = v22;
  return result;
}

void sub_10019E984()
{
}

void sub_10019E98C(uint64_t a1)
{
}

unint64_t sub_10019E994@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10019E454(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10019E9C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10019E4A0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10019E9E8()
{
  return sub_10019E514(*v0);
}

uint64_t sub_10019E9F0@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10019E49C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10019EA14(uint64_t a1)
{
  unint64_t v2 = sub_10019EAC0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10019EA3C(uint64_t a1)
{
  unint64_t v2 = sub_10019EAC0();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10019EA64@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (void *)sub_10019E6D8(a1, v5);
  if (!v2) {
    return memcpy(a2, v5, 0x50uLL);
  }
  return result;
}

uint64_t sub_10019EAAC(void *a1)
{
  return sub_10019E588(a1);
}

unint64_t sub_10019EAC0()
{
  unint64_t result = qword_1002B8B30;
  if (!qword_1002B8B30)
  {
    unint64_t result = swift_getWitnessTable(byte_10020A9A4, &type metadata for InAppQueueCheckRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B8B30);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for InAppQueueCheckRequest.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10019EB48 + 4 * byte_10020A7FF[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10019EB7C + 4 * byte_10020A7FA[v4]))();
}

uint64_t sub_10019EB7C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019EB84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10019EB8CLL);
  }
  return result;
}

uint64_t sub_10019EB98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10019EBA0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10019EBA4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019EBAC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InAppQueueCheckRequest.CodingKeys()
{
  return &type metadata for InAppQueueCheckRequest.CodingKeys;
}

unint64_t sub_10019EBCC()
{
  unint64_t result = qword_1002B8B40;
  if (!qword_1002B8B40)
  {
    unint64_t result = swift_getWitnessTable("5M\b", &type metadata for InAppQueueCheckRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B8B40);
  }

  return result;
}

unint64_t sub_10019EC0C()
{
  unint64_t result = qword_1002B8B48;
  if (!qword_1002B8B48)
  {
    unint64_t result = swift_getWitnessTable(byte_10020A8B4, &type metadata for InAppQueueCheckRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B8B48);
  }

  return result;
}

unint64_t sub_10019EC4C()
{
  unint64_t result = qword_1002B8B50;
  if (!qword_1002B8B50)
  {
    unint64_t result = swift_getWitnessTable("}M\b", &type metadata for InAppQueueCheckRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B8B50);
  }

  return result;
}

double sub_10019EC88(uint64_t a1, char a2, unsigned __int8 a3, uint64_t a4)
{
  if (!(a3 >> 6))
  {
    double v10 = (double)sub_1001BE830(a4, a1, a2);
    double v8 = sub_10019EDE8(a3) * v10;
LABEL_6:
    uint64_t v11 = sub_100092A18();
    sub_1000522E4(v11);
    return v8;
  }

  if (a3 >> 6 != 1)
  {
    uint64_t v12 = sub_100092A18();
    sub_1000522E4(v12);
    return dbl_10020AC90[a3 & 0x3F];
  }

  sub_10019EE34(a2);
  double v8 = v7 * (double)a1;
  if (a2 != 3) {
    goto LABEL_6;
  }
  uint64_t v9 = sub_100092A18();
  sub_1000522E4(v9);
  return round(v8 / 60.0) * 60.0;
}

unint64_t sub_10019ED58(unint64_t a1)
{
  unint64_t result = sub_10019EDFC(a1);
  if (result == 7)
  {
    int v3 = sub_10019EEE0(a1);
    if (v3 == 6)
    {
      char v4 = sub_10019EF60(a1);
      if (v4 == 6) {
        return 4294967288LL;
      }
      else {
        return *(_DWORD *)&v4 | 0xFFFFFF80;
      }
    }

    else
    {
      return v3 | 0x40u;
    }
  }

  return result;
}

uint64_t sub_10019EDBC(uint64_t result)
{
  uint64_t v1 = (result & 0x3F) + 10;
  else {
    return result;
  }
}

double sub_10019EDE8(char a1)
{
  return dbl_10020ACC0[a1];
}

unint64_t sub_10019EDFC(unint64_t result)
{
  if (result >= 7) {
    return 7LL;
  }
  return result;
}

unint64_t sub_10019EE0C@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10019EDFC(*a1);
  *a2 = result;
  return result;
}

void sub_10019EE34(char a1)
{
  __asm { BR              X10 }

uint64_t sub_10019EE58()
{
  return ((uint64_t (*)(uint64_t))sub_10019EE34)(1LL);
}

uint64_t sub_10019EEE0(uint64_t a1)
{
  else {
    return a1 - 10;
  }
}

uint64_t sub_10019EEF4(unsigned __int8 a1)
{
  return a1 + 10LL;
}

void sub_10019EF00()
{
}

void sub_10019EF08()
{
}

void sub_10019EF10(uint64_t a1)
{
}

uint64_t sub_10019EF18@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10019EEE0(*a1);
  *a2 = result;
  return result;
}

void sub_10019EF40()
{
  unsigned __int8 v1 = sub_100052340();
  uint64_t *v0 = sub_10019EEF4(v1);
  sub_10001945C();
}

uint64_t sub_10019EF60(uint64_t a1)
{
  else {
    return a1 - 1000;
  }
}

uint64_t sub_10019EF74(unsigned __int8 a1)
{
  return a1 + 1000LL;
}

void sub_10019EF80()
{
}

void sub_10019EF88()
{
}

void sub_10019EF90(uint64_t a1)
{
}

uint64_t sub_10019EF98@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10019EF60(*a1);
  *a2 = result;
  return result;
}

void sub_10019EFC0()
{
  unsigned __int8 v1 = sub_100052340();
  uint64_t *v0 = sub_10019EF74(v1);
  sub_10001945C();
}

unint64_t sub_10019EFE0@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10019ED58(*a1);
  *a2 = result;
  return result;
}

void sub_10019F008()
{
  uint64_t v1 = sub_100052340();
  uint64_t *v0 = sub_10019EDBC(v1);
  sub_10001945C();
}

void type metadata accessor for OctaneTimeRate.PerRenewal()
{
}

uint64_t sub_10019F038(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_10019F084 + 4 * byte_10020AA0C[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10019F0B8 + 4 * byte_10020AA07[v4]))();
}

uint64_t sub_10019F0B8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019F0C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10019F0C8LL);
  }
  return result;
}

uint64_t sub_10019F0D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10019F0DCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_10019F0E0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019F0E8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for OctaneTimeRate.PerMonth()
{
}

uint64_t sub_10019F100(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    unsigned int v5 = -1;
    return v5 + 1;
  }

  if (a2 >= 0x1E)
  {
    if (a2 + 226 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 226) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    unsigned int v5 = (*a1 | (v4 << 8)) - 227;
    return v5 + 1;
  }

uint64_t sub_10019F198(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 226 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 226) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0x1E) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0x1D) {
    return ((uint64_t (*)(void))((char *)&loc_10019F1E4 + 4 * byte_10020AA16[v4]))();
  }
  *a1 = a2 - 30;
  return ((uint64_t (*)(void))((char *)sub_10019F218 + 4 * byte_10020AA11[v4]))();
}

uint64_t sub_10019F218(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019F220(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10019F228LL);
  }
  return result;
}

uint64_t sub_10019F240(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10019F248LL);
  }
  *(_BYTE *)unint64_t result = 8 * (((-a2 >> 2) & 7) - 8 * a2);
  return result;
}

uint64_t sub_10019F24C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019F254(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019F260(unsigned __int8 *a1)
{
  return *a1 >> 6;
}

_BYTE *sub_10019F26C(_BYTE *result)
{
  *result &= 0x3Fu;
  return result;
}

_BYTE *sub_10019F27C(_BYTE *result, char a2)
{
  *unint64_t result = *result & 7 | (a2 << 6);
  return result;
}

void type metadata accessor for OctaneTimeRate()
{
}

uint64_t sub_10019F29C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_10019F2E8 + 4 * byte_10020AA20[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10019F31C + 4 * byte_10020AA1B[v4]))();
}

uint64_t sub_10019F31C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019F324(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10019F32CLL);
  }
  return result;
}

uint64_t sub_10019F338(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10019F340LL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_10019F344(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019F34C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for OctaneTimeRate.PerDay()
{
}

unint64_t sub_10019F368()
{
  unint64_t result = qword_1002B8B58;
  if (!qword_1002B8B58)
  {
    unint64_t result = swift_getWitnessTable(byte_10020AAEC, &unk_10028F928);
    atomic_store(result, (unint64_t *)&qword_1002B8B58);
  }

  return result;
}

unint64_t sub_10019F3A8()
{
  unint64_t result = qword_1002B8B60;
  if (!qword_1002B8B60)
  {
    unint64_t result = swift_getWitnessTable(byte_10020ABC4, &unk_10028F808);
    atomic_store(result, (unint64_t *)&qword_1002B8B60);
  }

  return result;
}

unint64_t sub_10019F3E8()
{
  unint64_t result = qword_1002B8B68;
  if (!qword_1002B8B68)
  {
    unint64_t result = swift_getWitnessTable(byte_10020AC64, &unk_10028F778);
    atomic_store(result, (unint64_t *)&qword_1002B8B68);
  }

  return result;
}

uint64_t sub_10019F424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

void sub_10019F444(uint64_t a1, void *a2)
{
  int v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

id sub_10019F490()
{
  __int16 v1 = v0;
  swift_getObjectType(v0);
  sub_1000B8300();
  uint64_t v2 = sub_1001BD6C8();
  id v3 = (void *)sub_10011D8DC(v2, [v1 connection]);
  uint64_t v4 = type metadata accessor for Transaction();
  id v5 = v3;
  uint64_t v6 = sub_1000B831C();
  sub_10006A22C((uint64_t)v6);
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  id v9 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v4));
  id v10 = sub_1001A088C(v5, v8);

  return v10;
}

id sub_10019F568(uint64_t a1, unint64_t a2)
{
  id v3 = (uint64_t *)a1;
  id v4 = sub_1001A4298(a1, "connection");
  NSString v5 = String._bridgeToObjectiveC()();
  uint64_t v6 = sub_1000AC93C((uint64_t)&unk_10028FAC8);
  *(void *)(v6 + sub_100195C94(v0 + 16) = v3;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = (void *)sub_1000AC93C((uint64_t)&unk_10028FAF0);
  void v7[2] = sub_1001A3B44;
  v7[3] = v6;
  aBlock[4] = sub_1001A41AC;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1001B2264;
  aBlock[3] = &unk_10028FB08;
  uint64_t v8 = _Block_copy(aBlock);
  sub_100077D1C();
  swift_retain();
  swift_release();
  aBlock[0] = 0LL;
  id v9 = [v4 executeStatement:v5 error:aBlock bindings:v8];
  _Block_release(v8);

  id v10 = aBlock[0];
  if ((_DWORD)v9) {
    goto LABEL_5;
  }
  uint64_t v11 = v10;
  uint64_t v8 = (void *)_convertNSErrorToError(_:)(v10);

  swift_willThrow(v12);
  if (qword_1002A8D90 != -1) {
    goto LABEL_10;
  }
  while (1)
  {
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_100018F68(v13, (uint64_t)qword_1002EB9D0);
    sub_100077D1C();
    swift_errorRetain(v8);
    sub_100077D1C();
    uint64_t v14 = swift_errorRetain(v8);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v17 = static os_log_type_t.error.getter(v15, v16);
    if (os_log_type_enabled(v15, v17))
    {
      uint64_t v18 = sub_100019464(22LL);
      uint64_t v23 = (void *)sub_100019464(64LL);
      aBlock[0] = v23;
      *(_DWORD *)uint64_t v18 = 136315394;
      sub_100077D1C();
      uint64_t v26 = sub_1000CF360((uint64_t)v3, a2, (uint64_t *)aBlock);
      id v3 = &v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v18 + 4);
      sub_100077CA8(a2);
      *(_WORD *)(v18 + 1sub_100019F7C(v0 + 2) = 2080;
      a2 = v18 + 14;
      swift_getErrorValue(v8, v25, v24);
      uint64_t v19 = Error.localizedDescription.getter(v24[1], v24[2]);
      uint64_t v26 = sub_1000CF360(v19, v20, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v18 + 14);
      sub_10001EDA0();
      sub_10014E70C();
      sub_10014E70C();
      _os_log_impl( (void *)&_mh_execute_header,  v15,  v17,  "Error deleting transactions for %s: %s",  (uint8_t *)v18,  0x16u);
      sub_1001A428C();
      sub_10001A408((uint64_t)v23);
      sub_10001A408(v18);

      sub_10014E70C();
LABEL_5:
      sub_10002A5A4();
    }

    else
    {
      sub_10014E70C();
      sub_10001EDE8(a2);
      sub_10014E70C();
      sub_10014E70C();
      sub_10002A5A4();
    }

    char v21 = sub_1001A42B8((uint64_t)v7, (uint64_t)"", 121LL, 21LL, 99LL);
    swift_release();
    if ((v21 & 1) == 0) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_once(&qword_1002A8D90, sub_100183E34);
  }

  return v9;
}

void sub_10019F8D8(void *a1)
{
  id v2 = String._bridgeToObjectiveC()();
  [a1 bindString:v2 atPosition:1];
}

uint64_t sub_10019F928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000175B0((uint64_t *)&unk_1002B8BB0);
  uint64_t inited = swift_initStackObject(v6, v26);
  *(void *)(inited + 3sub_100019F7C(v0 + 2) = 0x695F656C646E7562LL;
  *(void *)(inited + 4sub_10019B2E8(v0, 0) = 0xE900000000000064LL;
  *(_OWORD *)(inited + sub_100195C94(v0 + 16) = xmmword_1001F3DD0;
  *(void *)(inited + 48) = a1;
  *(void *)(inited + 56) = a2;
  *(void *)(inited + 7sub_100019F7C(v0 + 2) = &type metadata for String;
  *(void *)(inited + 8sub_10019B2E8(v0, 0) = 0x6C616E696769726FLL;
  *(void *)(inited + 12sub_10019B2E8(v0, 0) = &type metadata for UInt;
  *(void *)(inited + 88) = 0xEB0000000064695FLL;
  *(void *)(inited + 96) = a3;
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_1001A42AC(inited, v8, (uint64_t)&type metadata for Any + 8);
  uint64_t v10 = sub_1000175B0((uint64_t *)&unk_1002AFCF0);
  uint64_t v12 = sub_1001A42AC((uint64_t)_swiftEmptyArrayStorage, v11, v10);
  sub_10019A0F8(v9, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, v12);
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  sub_10001A420();
  uint64_t v15 = sub_1000B8300();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v15);
  id v17 = sub_1001A41E0((uint64_t)ObjCClassFromMetadata, "connection");
  id v18 = [ObjCClassFromMetadata queryOnConnection:v17 predicate:v14];

  uint64_t v25 = &_swiftEmptySetSingleton;
  uint64_t v19 = swift_allocObject(&unk_10028FA50, 24LL, 7LL);
  *(void *)(v19 + sub_100195C94(v0 + 16) = &v25;
  uint64_t v20 = sub_1000AC93C((uint64_t)&unk_10028FA78);
  *(void *)(v20 + sub_100195C94(v0 + 16) = sub_1001A0918;
  *(void *)(v20 + 24) = v19;
  aBlock[4] = sub_1001652A4;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10019F444;
  aBlock[3] = &unk_10028FA90;
  char v21 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v18 enumerateMemoryEntitiesUsingBlock:v21];
  _Block_release(v21);
  LOBYTE(v21) = sub_1001A42B8(v20, (uint64_t)"", 121LL, 38LL, 39LL);
  uint64_t result = sub_10002A5A4();
  if ((v21 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    [v18 deleteAllEntities];

    uint64_t v23 = v25;
    sub_10002A51C();
    return (uint64_t)v23;
  }

  return result;
}

void sub_10019FBCC(void *a1)
{
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [a1 numberValueForProperty:v2];

  if (v3)
  {
    id v4 = [v3 unsignedIntegerValue];

    sub_1001A0CD8(&v5, (uint64_t)v4);
  }

uint64_t sub_10019FC58(void *a1)
{
  if (![a1 databaseID]) {
    return 2LL;
  }
  id v2 = [(id)swift_getObjCClassFromObject(a1) databaseEntityClass];
  uint64_t ObjCClassMetadata = swift_getObjCClassMetadata(v2);
  uint64_t v4 = sub_1000C0368(ObjCClassMetadata, (unint64_t *)&unk_1002B8BA0, off_10026E2E0);
  uint64_t v5 = swift_dynamicCastMetatype(ObjCClassMetadata, v4);
  uint64_t v6 = 3LL;
  if (v5)
  {
    uint64_t v7 = v5;
    id v8 = sub_1001A41E0(v5, "databaseID");
    id v9 = sub_1001A4298((uint64_t)v8, "connection");
    id v10 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v7)) initWithPersistentID:v8 onConnection:v9];

    LODWORD(v9) = [v10 deleteFromDatabase];
    if ((_DWORD)v9) {
      return 4LL;
    }
    else {
      return 3LL;
    }
  }

  return v6;
}

uint64_t sub_10019FD54(void *a1)
{
  uint64_t ObjectType = swift_getObjectType(v1);
  if (!sub_1001A41E0(ObjectType, "databaseID")) {
    return 2LL;
  }
  id v4 = [(id)swift_getObjCClassFromObject(a1) databaseEntityClass];
  uint64_t ObjCClassMetadata = swift_getObjCClassMetadata(v4);
  uint64_t v6 = sub_1000C0368(ObjCClassMetadata, (unint64_t *)&unk_1002B8BA0, off_10026E2E0);
  uint64_t v7 = swift_dynamicCastMetatype(ObjCClassMetadata, v6);
  if (!v7) {
    return 3LL;
  }
  uint64_t v8 = v7;
  id v9 = sub_1001A41E0(v7, "databaseID");
  id v10 = [v1 connection];
  id v11 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v8)) initWithPersistentID:v9 onConnection:v10];

  uint64_t v12 = type metadata accessor for Transaction();
  uint64_t v13 = swift_dynamicCastClass(a1, v12);
  if (!v13 || (*(_BYTE *)(v13 + OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels) & 2) != 0)
  {
    id v19 = sub_1001A41E0(v13, "propertyValues");
    sub_1001A4258((uint64_t)v19);

    sub_1001BD71C();
    sub_10001DC10();
    v16.super.Class isa = sub_1001A4268().super.isa;
    uint64_t v20 = sub_10001EDA0();
    sub_1001A42A0(v20, "setValuesWithDictionary:");
  }

  else
  {
    id v14 = a1;
    id v15 = [v14 propertyValues];
    sub_1001A4258((uint64_t)v15);

    v16.super.Class isa = sub_1001A4268().super.isa;
    uint64_t v17 = sub_10001DC10();
    sub_1001A42A0(v17, "setValuesWithDictionary:");
  }

  return 4LL;
}

void sub_10019FF68(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v59 = a5;
  uint64_t v60 = a4;
  uint64_t v62 = a3;
  uint64_t v9 = sub_100092A18();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v61 = sub_1001A4298(v12, "connection");
  aBlock = 0LL;
  unint64_t v66 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(60LL);
  v14._unint64_t countAndFlagsBits = 0x20455441445055LL;
  v14._object = (void *)0xE700000000000000LL;
  String.append(_:)(v14);
  id v15 = [(id)sub_1000B8300() databaseTable];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  id v18 = v17;

  v19._unint64_t countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  sub_10001DC10();
  v20._unint64_t countAndFlagsBits = 0x2054455320LL;
  v20._object = (void *)0xE500000000000000LL;
  String.append(_:)(v20);
  v21._unint64_t countAndFlagsBits = 0x6C616E696769726FLL;
  v21._object = (void *)0xEB0000000064695FLL;
  String.append(_:)(v21);
  sub_1001A41E8();
  v22._unint64_t countAndFlagsBits = 0xD000000000000016LL;
  v22._object = (void *)0x80000001002175B0LL;
  String.append(_:)(v22);
  sub_1001A41E8();
  v23._unint64_t countAndFlagsBits = 0x6470755F7473616CLL;
  v23._object = (void *)0xEC00000064657461LL;
  String.append(_:)(v23);
  v24._unint64_t countAndFlagsBits = 0x454857203F203D20LL;
  v24._object = (void *)0xEB00000000204552LL;
  String.append(_:)(v24);
  v25._object = (void *)0xE900000000000064LL;
  v25._unint64_t countAndFlagsBits = 0x695F656C646E7562LL;
  String.append(_:)(v25);
  v26._unint64_t countAndFlagsBits = 0x444E41203F203D20LL;
  v26._object = (void *)0xE900000000000020LL;
  String.append(_:)(v26);
  v27._object = (void *)0x80000001002175E0LL;
  v27._unint64_t countAndFlagsBits = 0xD000000000000015LL;
  String.append(_:)(v27);
  v28._unint64_t countAndFlagsBits = 1059077408LL;
  v28._object = (void *)0xE400000000000000LL;
  String.append(_:)(v28);
  NSString v29 = String._bridgeToObjectiveC()();
  sub_10001A420();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a6, v9);
  uint64_t v30 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v31 = (v30 + 24) & ~v30;
  unint64_t v32 = (v11 + v31 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v33 = (v32 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v34 = swift_allocObject(&unk_10028F9D8, v33 + 16, v30 | 7);
  *(void *)(v34 + sub_100195C94(v0 + 16) = v59;
  uint64_t v35 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
  uint64_t v36 = v60;
  v35(v34 + v31, v13, v9);
  char v37 = (uint64_t *)(v34 + v32);
  uint64_t v59 = a1;
  *char v37 = a1;
  v37[1] = a2;
  char v38 = (void *)(v34 + v33);
  *char v38 = v62;
  v38[1] = v36;
  unint64_t v39 = a2;
  uint64_t v40 = sub_1000AC93C((uint64_t)&unk_10028FA00);
  *(void *)(v40 + sub_100195C94(v0 + 16) = sub_1001A0804;
  *(void *)(v40 + 24) = v34;
  uint64_t v69 = sub_1001A086C;
  uint64_t v70 = v40;
  aBlock = _NSConcreteStackBlock;
  unint64_t v66 = 1107296256LL;
  uint64_t v67 = sub_1001B2264;
  uint64_t v68 = &unk_10028FA18;
  uint64_t v41 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  sub_100019320();
  swift_retain();
  swift_release();
  aBlock = 0LL;
  id v42 = v61;
  LODWORD(v9) = [v61 executeStatement:v29 error:&aBlock bindings:v41];
  _Block_release(v41);

  uint64_t v43 = aBlock;
  if ((_DWORD)v9) {
    goto LABEL_5;
  }
  uint64_t v44 = v43;
  uint64_t v13 = (char *)_convertNSErrorToError(_:)(v43);

  swift_willThrow(v45);
  if (qword_1002A8D90 != -1) {
    goto LABEL_10;
  }
  while (1)
  {
    uint64_t v46 = type metadata accessor for Logger(0LL);
    sub_100018F68(v46, (uint64_t)qword_1002EB9D0);
    sub_10003574C();
    sub_100019320();
    sub_1001A4284();
    sub_10003574C();
    sub_100019320();
    uint64_t v47 = sub_1001A4284();
    char v48 = (void *)Logger.logObject.getter(v47);
    os_log_type_t v50 = static os_log_type_t.error.getter(v48, v49);
    id v61 = v48;
    if (os_log_type_enabled((os_log_t)v48, v50))
    {
      uint64_t v51 = sub_100019464(32LL);
      uint64_t v57 = (void *)sub_100019464(8LL);
      uint64_t v58 = (void **)sub_100019464(64LL);
      aBlock = v58;
      *(_DWORD *)uint64_t v51 = 136315650;
      sub_10003574C();
      uint64_t v63 = sub_1000CF360(v59, v39, (uint64_t *)&aBlock);
      sub_1001A4228();
      sub_100077CA8(v39);
      *(_WORD *)(v51 + 1sub_100019F7C(v0 + 2) = 2080;
      sub_100019320();
      uint64_t v63 = sub_1000CF360(v62, v36, (uint64_t *)&aBlock);
      sub_1001A4228();
      sub_100077CA8(v36);
      *(_WORD *)(v51 + 2sub_100019F7C(v0 + 2) = 2112;
      sub_1001A4284();
      uint64_t v52 = _swift_stdlib_bridgeErrorToNSError(v13);
      uint64_t v63 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v51 + 24);
      uint64_t v53 = (uint64_t)v57;
      *uint64_t v57 = v52;
      sub_1001A41D8();
      sub_1001A41D8();
      id v54 = v61;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v61,  v50,  "Failed to update original ID for %s/%s: %@",  (uint8_t *)v51,  0x20u);
      sub_1000175B0(&qword_1002B6F90);
      swift_arrayDestroy(v53, 1LL);
      sub_10001A408(v53);
      uint64_t v55 = (uint64_t)v58;
      sub_1001A428C();
      sub_10001A408(v55);
      sub_10001A408(v51);

      sub_1001A41D8();
LABEL_5:
      swift_release();
    }

    else
    {
      sub_1001A41D8();
      sub_10001EDE8(v36);
      sub_10001EDE8(v39);
      sub_1001A41D8();
      sub_1001A41D8();
      swift_release();
    }

    uint64_t v36 = sub_1001A42B8(v40, (uint64_t)"", 121LL, 88LL, 18LL);
    swift_release();
    if ((v36 & 1) == 0) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_once(&qword_1002A8D90, sub_100183E34);
  }

  sub_10002A580();
}

void sub_1001A0554(void *a1, uint64_t a2)
{
  id v3 = [objc_allocWithZone(NSNumber) initWithUnsignedInteger:a2];
  [a1 bindNumber:v3 atPosition:1];

  id v5 = [a1 bindDouble:2 atPosition:Date.timeIntervalSinceReferenceDate.getter(v4)];
  static Date.timeIntervalSinceReferenceDate.getter(v5);
  objc_msgSend(a1, "bindDouble:atPosition:", 3);
  NSString v6 = String._bridgeToObjectiveC()();
  [a1 bindString:v6 atPosition:4];

  id v7 = String._bridgeToObjectiveC()();
  [a1 bindString:v7 atPosition:5];
}

id sub_1001A0664()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DatabaseTransaction();
  return objc_msgSendSuper2(&v2, "init");
}

id sub_1001A06B4(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for DatabaseTransaction();
  id v3 = objc_msgSendSuper2(&v5, "initWithConnection:", a1);

  return v3;
}

id sub_1001A0724()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DatabaseTransaction();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DatabaseTransaction()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService19DatabaseTransaction);
}

uint64_t sub_1001A0774()
{
  uint64_t v1 = sub_100092A18();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v6 + 16, v5);
}

void sub_1001A0804(void *a1)
{
}

void sub_1001A086C(uint64_t a1)
{
}

uint64_t sub_1001A0874(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10019B2E8(v0, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001A0884(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

id sub_1001A088C(void *a1, uint64_t a2)
{
  if (a2)
  {
    v5.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    v5.super.Class isa = 0LL;
  }

  id v6 = [v2 initWithDatabaseEntity:a1 properties:v5.super.isa];

  return v6;
}

uint64_t sub_1001A0908()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1001A0918(void *a1)
{
}

uint64_t sub_1001A0924(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v26);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v26, a2, a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  sub_1000BBDE8();
  if ((v11 & 1) != 0)
  {
    uint64_t v12 = *(void *)(v7 + 48);
    uint64_t v13 = (uint64_t *)(v12 + 16 * v10);
    uint64_t v14 = v13[1];
    BOOL v15 = *v13 == a2 && v14 == a3;
    if (v15 || (sub_1001A4248(*v13, v14) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      sub_10001DC10();
      uint64_t v16 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v17 = v16[1];
      *a1 = *v16;
      a1[1] = v17;
      swift_bridgeObjectRetain(v17);
      return 0LL;
    }

    uint64_t v19 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v19;
      sub_1000BBDE8();
      if ((v20 & 1) == 0) {
        break;
      }
      Swift::String v21 = (uint64_t *)(v12 + 16 * v10);
      uint64_t v22 = v21[1];
      BOOL v23 = *v21 == a2 && v22 == a3;
      if (v23 || (sub_1001A4248(*v21, v22) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  sub_10001DC10();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v26[0] = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  swift_bridgeObjectRetain(a3);
  sub_1001A212C(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t v25 = *v3;
  *uint64_t v3 = v26[0];
  swift_bridgeObjectRelease(v25);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

void sub_1001A0A98(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Calendar.Component(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v2;
  uint64_t v11 = *(void *)(*v2 + 40LL);
  uint64_t v12 = sub_1001A415C( (unint64_t *)&qword_1002B8440,  (const char *)&protocol conformance descriptor for Calendar.Component);
  swift_bridgeObjectRetain(v10);
  unint64_t v33 = a2;
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v12);
  uint64_t v14 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v15 = v13 & ~v14;
  uint64_t v16 = v10;
  uint64_t v17 = v10 + 56;
  if (((*(void *)(v10 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) != 0)
  {
    NSString v29 = v3;
    uint64_t v30 = a1;
    uint64_t v31 = ~v14;
    uint64_t v18 = v7;
    uint64_t v19 = *(void *)(v7 + 72);
    uint64_t v32 = v18;
    char v20 = *(void (**)(void, void, void))(v18 + 16);
    while (1)
    {
      uint64_t v21 = v16;
      uint64_t v22 = v20;
      v20(v9, *(void *)(v16 + 48) + v19 * v15, v6);
      uint64_t v23 = sub_1001A415C(&qword_1002B8BE0, (const char *)&protocol conformance descriptor for Calendar.Component);
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v33, v6, v23);
      uint64_t v25 = *(void (**)(char *, uint64_t))(v32 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0) {
        break;
      }
      unint64_t v15 = (v15 + 1) & v31;
      uint64_t v16 = v21;
      char v20 = v22;
      if (((*(void *)(v17 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        uint64_t v3 = v29;
        a1 = v30;
        uint64_t v7 = v32;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease(v21);
    v25(v33, v6);
    v22(v30, *(void *)(*v29 + 48LL) + v19 * v15, v6);
  }

  else
  {
    swift_bridgeObjectRelease(v10);
    char v20 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    Swift::String v27 = v33;
    v20(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_1001A22C4((uint64_t)v9, v15, isUniquelyReferenced_nonNull_native);
    uint64_t v28 = *v3;
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease(v28);
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v27, v6);
  }

  sub_10002A580();
}

uint64_t sub_1001A0CD8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), a2);
  uint64_t v8 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v15 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_1001A24B8(a2, v9, isUniquelyReferenced_nonNull_native);
    uint64_t v14 = *v3;
    *uint64_t v3 = v15;
    swift_bridgeObjectRelease(v14);
    uint64_t result = 1LL;
    goto LABEL_8;
  }

  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }

    while (*(void *)(v10 + 8 * v9) != a2);
  }

  uint64_t result = 0LL;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1001A0DD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  Hasher.init(_seed:)(v33);
  uint64_t v5 = sub_1001336F4(a2);
  uint64_t v7 = v6;
  sub_10003574C();
  String.hash(into:)(v33, v5, v7);
  sub_10001A420();
  unint64_t v8 = Hasher._finalize()() & ~(-1LL << *(_BYTE *)(v4 + 32));
  if (((*(void *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0) {
    __asm { BR              X9 }
  }

  uint64_t v9 = swift_bridgeObjectRelease();
  sub_1001A4278(v9, v10, v11, v12, v13, v14, v15, v16, a2, v29);
  sub_1001A41FC();
  char v17 = v28;
  Swift::Int v19 = sub_1001A25D8(v28, v8, v18);
  sub_1001A4218(v19, v20, v21, v22, v23, v24, v25, v26, v28, v30, a1, v33[0]);
  uint64_t result = 1LL;
  *uint64_t v32 = v17;
  return result;
}

uint64_t sub_1001A1078(_BYTE *a1, char a2)
{
  uint64_t v40 = a1;
  int v3 = a2 & 1;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(v4 + 40);
  swift_bridgeObjectRetain();
  sub_1000B2D88(v5);
  uint64_t v6 = -1LL << *(_BYTE *)(v4 + 32);
  unint64_t v8 = v7 & ~v6;
  HIDWORD(v36) = v3;
  if (((*(void *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
  {
    uint64_t v9 = ~v6;
    if (v3) {
      unint64_t v10 = 1634497893LL;
    }
    else {
      unint64_t v10 = 0xD000000000000010LL;
    }
    if (v3) {
      unint64_t v11 = 0xE400000000000000LL;
    }
    else {
      unint64_t v11 = 0x8000000100217090LL;
    }
    while (1)
    {
      unint64_t v12 = *(_BYTE *)(*(void *)(v4 + 48) + v8) ? 1634497893LL : 0xD000000000000010LL;
      unint64_t v13 = *(_BYTE *)(*(void *)(v4 + 48) + v8) ? 0xE400000000000000LL : 0x8000000100217090LL;
      if (v12 == v10 && v13 == v11) {
        break;
      }
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, v10, v11, 0LL);
      swift_bridgeObjectRelease();
      sub_10001A420();
      if ((v15 & 1) != 0) {
        goto LABEL_22;
      }
      unint64_t v8 = (v8 + 1) & v9;
      if (((*(void *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
        goto LABEL_20;
      }
    }

    sub_10001EDA0();
    sub_10001A420();
LABEL_22:
    sub_10001A420();
    uint64_t result = sub_1001A42C0();
    char v24 = *(_BYTE *)(v35 + v8);
  }

  else
  {
LABEL_20:
    uint64_t v16 = sub_10001EDA0();
    sub_1001A4278(v16, v17, v18, v19, v20, v21, v22, v23, v36, v38);
    sub_1001A41FC();
    char v24 = BYTE4(v37);
    sub_1001A28F4(SBYTE4(v37), v8, v25);
    sub_1001A4218(v26, v27, v28, v29, v30, v31, v32, v33, v37, v39, (uint64_t)v40, v41);
    uint64_t result = 1LL;
  }

  *uint64_t v40 = v24;
  return result;
}

uint64_t sub_1001A11FC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1000175B0((uint64_t *)&unk_1002B8BD0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v32 = v2;
    uint64_t v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0LL;
    if (!v9) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      uint64_t v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)(v34);
      String.hash(into:)(v34, v20, v21);
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) == 0)
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          BOOL v28 = v24 == v27;
          if (v24 == v27) {
            unint64_t v24 = 0LL;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v11 + 8 * v24);
          if (v29 != -1)
          {
            unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }

      unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
      uint64_t v30 = (void *)(*(void *)(v6 + 48) + 16 * v25);
      *uint64_t v30 = v20;
      v30[1] = v21;
      ++*(void *)(v6 + 16);
      if (v9) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v16 = v13 + 1;
      if (__OFADD__(v13, 1LL)) {
        goto LABEL_41;
      }
      if (v16 >= v10) {
        goto LABEL_35;
      }
      unint64_t v17 = v33[v16];
      ++v13;
      if (!v17)
      {
        int64_t v13 = v16 + 1;
        if (v16 + 1 >= v10) {
          goto LABEL_35;
        }
        unint64_t v17 = v33[v13];
        if (!v17)
        {
          int64_t v13 = v16 + 2;
          if (v16 + 2 >= v10) {
            goto LABEL_35;
          }
          unint64_t v17 = v33[v13];
          if (!v17)
          {
            int64_t v18 = v16 + 3;
            if (v18 >= v10)
            {
LABEL_35:
              swift_release(v3);
              uint64_t v2 = v32;
              uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
              if (v31 > 63) {
                sub_1001A2AC0(0LL, (unint64_t)(v31 + 63) >> 6, v33);
              }
              else {
                *uint64_t v33 = -1LL << v31;
              }
              *(void *)(v3 + sub_100195C94(v0 + 16) = 0LL;
              break;
            }

            unint64_t v17 = v33[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v13 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  goto LABEL_42;
                }
                if (v13 >= v10) {
                  goto LABEL_35;
                }
                unint64_t v17 = v33[v13];
                ++v18;
                if (v17) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v13 = v18;
          }
        }
      }

uint64_t sub_1001A14D4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Calendar.Component(0LL);
  uint64_t v40 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_1000175B0(&qword_1002B8BE8);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1LL);
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_38;
  }
  uint64_t v10 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  uint64_t v39 = (void *)(v7 + 56);
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  else {
    uint64_t v12 = -1LL;
  }
  unint64_t v13 = v12 & v11;
  uint64_t v37 = v2;
  int64_t v38 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v14 = v8 + 56;
  uint64_t result = swift_retain();
  int64_t v16 = 0LL;
  if (!v13) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v17 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v17 | (v16 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v16 << 6))
  {
    uint64_t v22 = v7;
    uint64_t v23 = *(void *)(v40 + 72);
    unint64_t v24 = *(void *)(v7 + 48) + v23 * i;
    unint64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
    v25(v6, v24, v4);
    uint64_t v26 = *(void *)(v9 + 40);
    uint64_t v27 = sub_1001A415C( (unint64_t *)&qword_1002B8440,  (const char *)&protocol conformance descriptor for Calendar.Component);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v4, v27);
    uint64_t v28 = -1LL << *(_BYTE *)(v9 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1LL << v29) & ~*(void *)(v14 + 8 * (v29 >> 6))) == 0)
    {
      char v32 = 0;
      unint64_t v33 = (unint64_t)(63 - v28) >> 6;
      while (++v30 != v33 || (v32 & 1) == 0)
      {
        BOOL v34 = v30 == v33;
        if (v30 == v33) {
          unint64_t v30 = 0LL;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v14 + 8 * v30);
        if (v35 != -1)
        {
          unint64_t v31 = __clz(__rbit64(~v35)) + (v30 << 6);
          goto LABEL_32;
        }
      }

      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }

    unint64_t v31 = __clz(__rbit64((-1LL << v29) & ~*(void *)(v14 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_32:
    *(void *)(v14 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v31;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v25)(*(void *)(v9 + 48) + v31 * v23, v6, v4);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v22;
    if (v13) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v19 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      goto LABEL_40;
    }
    if (v19 >= v38) {
      goto LABEL_34;
    }
    unint64_t v20 = v39[v19];
    ++v16;
    if (!v20)
    {
      int64_t v16 = v19 + 1;
      if (v19 + 1 >= v38) {
        goto LABEL_34;
      }
      unint64_t v20 = v39[v16];
      if (!v20)
      {
        int64_t v16 = v19 + 2;
        if (v19 + 2 >= v38) {
          goto LABEL_34;
        }
        unint64_t v20 = v39[v16];
        if (!v20) {
          break;
        }
      }
    }

uint64_t sub_1001A1834(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1000175B0(&qword_1002B8BC0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = result;
  if (*(void *)(v3 + 16))
  {
    int64_t v7 = 0LL;
    uint64_t v9 = (uint64_t *)(v3 + 56);
    uint64_t v8 = *(void *)(v3 + 56);
    uint64_t v10 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v29 = -1LL << v10;
    unint64_t v30 = v2;
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & v8;
    uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 56;
    if ((v11 & v8) == 0) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v15 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    for (unint64_t i = v15 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v7 << 6))
    {
      uint64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * i);
      uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), v20);
      uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v14 + 8 * (v22 >> 6))) == 0)
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v21) >> 6;
        while (++v23 != v26 || (v25 & 1) == 0)
        {
          BOOL v27 = v23 == v26;
          if (v23 == v26) {
            unint64_t v23 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v14 + 8 * v23);
          if (v28 != -1)
          {
            unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }

      unint64_t v24 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v14 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v14 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v24;
      *(void *)(*(void *)(v6 + 48) + 8 * v24) = v20;
      ++*(void *)(v6 + 16);
      if (v12) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v17 = v7 + 1;
      if (__OFADD__(v7, 1LL)) {
        goto LABEL_41;
      }
      if (v17 >= v13) {
        goto LABEL_35;
      }
      unint64_t v18 = v9[v17];
      ++v7;
      if (!v18)
      {
        int64_t v7 = v17 + 1;
        if (v17 + 1 >= v13) {
          goto LABEL_35;
        }
        unint64_t v18 = v9[v7];
        if (!v18)
        {
          int64_t v7 = v17 + 2;
          if (v17 + 2 >= v13) {
            goto LABEL_35;
          }
          unint64_t v18 = v9[v7];
          if (!v18)
          {
            int64_t v19 = v17 + 3;
            if (v19 >= v13)
            {
LABEL_35:
              if (v31 > 63) {
                sub_1001A2AC0(0LL, v13, (void *)(v3 + 56));
              }
              else {
                *uint64_t v9 = v29;
              }
              uint64_t v2 = v30;
              *(void *)(v3 + sub_100195C94(v0 + 16) = 0LL;
              break;
            }

            unint64_t v18 = v9[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v7 = v19 + 1;
                if (__OFADD__(v19, 1LL)) {
                  goto LABEL_42;
                }
                if (v7 >= v13) {
                  goto LABEL_35;
                }
                unint64_t v18 = v9[v7];
                ++v19;
                if (v18) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v7 = v19;
          }
        }
      }

uint64_t sub_1001A1AB4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1000175B0((uint64_t *)&unk_1002B8BF0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  if (!*(void *)(v3 + 16)) {
    goto LABEL_28;
  }
  unint64_t v18 = v2;
  uint64_t v6 = 1LL << *(_BYTE *)(v3 + 32);
  int64_t v7 = (void *)(v3 + 56);
  if (v6 < 64) {
    uint64_t v8 = ~(-1LL << v6);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v3 + 56);
  int64_t v10 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    unint64_t v11 = __clz(__rbit64(v9));
    goto LABEL_23;
  }

  if (v10 > 1)
  {
    unint64_t v12 = *(void *)(v3 + 64);
    uint64_t v13 = 1LL;
    if (v12) {
      goto LABEL_22;
    }
    uint64_t v13 = 2LL;
    if (v10 > 2)
    {
      unint64_t v12 = *(void *)(v3 + 72);
      if (v12) {
        goto LABEL_22;
      }
      uint64_t v13 = 3LL;
      if (v10 > 3)
      {
        unint64_t v12 = *(void *)(v3 + 80);
        if (!v12)
        {
          uint64_t v14 = 4LL;
          if (v10 > 4)
          {
            unint64_t v12 = *(void *)(v3 + 88);
            if (v12)
            {
              uint64_t v13 = 4LL;
              goto LABEL_22;
            }

            while (1)
            {
              uint64_t v13 = v14 + 1;
              if (__OFADD__(v14, 1LL))
              {
                __break(1u);
                JUMPOUT(0x1001A1E14LL);
              }

              if (v13 >= v10) {
                break;
              }
              unint64_t v12 = v7[v13];
              ++v14;
              if (v12) {
                goto LABEL_22;
              }
            }
          }

          goto LABEL_24;
        }

uint64_t sub_1001A1E28(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1000175B0(&qword_1002B8BC8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v31 = v2;
    char v32 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0LL;
    if (!v9) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      int v19 = *(unsigned __int8 *)(*(void *)(v3 + 48) + i);
      Hasher.init(_seed:)(v33);
      if (v19) {
        unint64_t v20 = 1634497893LL;
      }
      else {
        unint64_t v20 = 0xD000000000000010LL;
      }
      if (v19) {
        unint64_t v21 = 0xE400000000000000LL;
      }
      else {
        unint64_t v21 = 0x8000000100217090LL;
      }
      String.hash(into:)(v33, v20, v21);
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) == 0)
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          BOOL v28 = v24 == v27;
          if (v24 == v27) {
            unint64_t v24 = 0LL;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v11 + 8 * v24);
          if (v29 != -1)
          {
            unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_39;
          }
        }

        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
        return result;
      }

      unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_39:
      *(void *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
      *(_BYTE *)(*(void *)(v6 + 48) + v25) = v19;
      ++*(void *)(v6 + 16);
      if (v9) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v16 = v13 + 1;
      if (__OFADD__(v13, 1LL)) {
        goto LABEL_47;
      }
      if (v16 >= v10) {
        goto LABEL_41;
      }
      unint64_t v17 = v32[v16];
      ++v13;
      if (!v17)
      {
        int64_t v13 = v16 + 1;
        if (v16 + 1 >= v10) {
          goto LABEL_41;
        }
        unint64_t v17 = v32[v13];
        if (!v17)
        {
          int64_t v13 = v16 + 2;
          if (v16 + 2 >= v10) {
            goto LABEL_41;
          }
          unint64_t v17 = v32[v13];
          if (!v17)
          {
            int64_t v18 = v16 + 3;
            if (v18 >= v10)
            {
LABEL_41:
              swift_release();
              uint64_t v2 = v31;
              uint64_t v30 = 1LL << *(_BYTE *)(v3 + 32);
              if (v30 > 63) {
                sub_1001A2AC0(0LL, (unint64_t)(v30 + 63) >> 6, v32);
              }
              else {
                *char v32 = -1LL << v30;
              }
              *(void *)(v3 + sub_100195C94(v0 + 16) = 0LL;
              break;
            }

            unint64_t v17 = v32[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v13 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  goto LABEL_48;
                }
                if (v13 >= v10) {
                  goto LABEL_41;
                }
                unint64_t v17 = v32[v13];
                ++v18;
                if (v17) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v13 = v18;
          }
        }
      }

uint64_t sub_1001A212C(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_1001A11FC(v11);
  }

  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_1001A2ADC();
      goto LABEL_22;
    }

    sub_1001A3300(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v28);
  String.hash(into:)(v28, v8, a2);
  uint64_t result = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  uint64_t v14 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v15 = *(void *)(v12 + 48);
    int64_t v16 = (void *)(v15 + 16 * a3);
    uint64_t v17 = v16[1];
    BOOL v18 = *v16 == v8 && v17 == a2;
    if (v18 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0LL), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        unint64_t v20 = (void *)(v15 + 16 * a3);
        uint64_t v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0LL);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_21;
      }
    }
  }

uint64_t sub_1001A22C4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v30 = a1;
  uint64_t v6 = type metadata accessor for Calendar.Component(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1001A14D4(v12);
  }

  else
  {
    if (v11 > v10)
    {
      sub_1001A2C54();
      goto LABEL_12;
    }

    sub_1001A35A8(v12);
  }

  uint64_t v13 = *v3;
  uint64_t v14 = *(void *)(*v3 + 40);
  uint64_t v15 = sub_1001A415C( (unint64_t *)&qword_1002B8440,  (const char *)&protocol conformance descriptor for Calendar.Component);
  uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  uint64_t v17 = -1LL << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v18 = ~v17;
    uint64_t v19 = *(void *)(v7 + 72);
    unint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(void *)(v13 + 48) + v19 * a2, v6);
      uint64_t v21 = sub_1001A415C(&qword_1002B8BE0, (const char *)&protocol conformance descriptor for Calendar.Component);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v18;
    }

    while (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

uint64_t sub_1001A24B8(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1001A1834(v8);
  }

  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_1001A2E7C();
      goto LABEL_14;
    }

    sub_1001A38C4(v8);
  }

  uint64_t v9 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)(*(void *)(*v3 + 40), v5);
  uint64_t v10 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v9 + 48);
    if (*(void *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt);
      __break(1u);
    }

    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v11 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }

Swift::Int sub_1001A25D8(Swift::Int result, unint64_t a2, char a3)
{
  unsigned __int8 v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    uint64_t v8 = v6 + 1;
    if ((a3 & 1) != 0)
    {
      sub_1001A1AB4(v8);
    }

    else
    {
      if (v7 > v6)
      {
        uint64_t result = (Swift::Int)sub_1001A2FD8();
        goto LABEL_10;
      }

      sub_1001A3B50(v8);
    }

    uint64_t v9 = *v3;
    Hasher.init(_seed:)(v18);
    uint64_t v10 = sub_1001336F4(v5);
    String.hash(into:)(v18, v10, v11);
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    a2 = result & ~(-1LL << *(_BYTE *)(v9 + 32));
    if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0) {
      __asm { BR              X9 }
    }
  }

void sub_1001A28F4(char a1, unint64_t a2, char a3)
{
  int v6 = a1 & 1;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  char v24 = a1 & 1;
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_27;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1001A1E28(v9);
  }

  else
  {
    if (v8 > v7)
    {
      sub_1001A316C();
      goto LABEL_27;
    }

    sub_1001A3E90(v9);
  }

  uint64_t v10 = *v3;
  sub_1000B2D88(*(void *)(*v3 + 40));
  uint64_t v11 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = v12 & ~v11;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v13 = ~v11;
    if (v6) {
      unint64_t v14 = 1634497893LL;
    }
    else {
      unint64_t v14 = 0xD000000000000010LL;
    }
    if (v6) {
      unint64_t v4 = 0xE400000000000000LL;
    }
    else {
      unint64_t v4 = 0x8000000100217090LL;
    }
    do
    {
      unint64_t v15 = *(_BYTE *)(*(void *)(v10 + 48) + a2) ? 1634497893LL : 0xD000000000000010LL;
      unint64_t v16 = *(_BYTE *)(*(void *)(v10 + 48) + a2) ? 0xE400000000000000LL : 0x8000000100217090LL;
      if (v15 == v14 && v16 == v4) {
        goto LABEL_30;
      }
      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v14, v4, 0LL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v18 & 1) != 0) {
        goto LABEL_31;
      }
      a2 = (a2 + 1) & v13;
    }

    while (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

uint64_t sub_1001A2AC0(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }

  return result;
}

void *sub_1001A2ADC()
{
  uint64_t v3 = v0;
  sub_1000175B0((uint64_t *)&unk_1002B8BD0);
  uint64_t v4 = sub_1001A4238();
  if (!*(void *)(v1 + 16))
  {
LABEL_28:
    uint64_t result = (void *)sub_10002A51C();
    *uint64_t v3 = v4;
    return result;
  }

  uint64_t result = (void *)sub_1001A41B0();
  if (v8) {
    BOOL v9 = (unint64_t)result >= v7;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    uint64_t result = sub_1001A42D4(result, v6);
  }
  int64_t v10 = 0LL;
  *(void *)(v4 + sub_100195C94(v0 + 16) = *(void *)(v1 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v1 + 32);
  uint64_t v12 = *(void *)(v1 + 56);
  uint64_t v13 = -1LL;
  if (v11 < 64) {
    uint64_t v13 = ~(-1LL << v11);
  }
  unint64_t v14 = v13 & v12;
  int64_t v15 = (unint64_t)(v11 + 63) >> 6;
  if ((v13 & v12) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v16 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (unint64_t i = v16 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v10 << 6))
  {
    BOOL v21 = (void *)(*(void *)(v1 + 48) + 16 * i);
    uint64_t v22 = v21[1];
    uint64_t v23 = (void *)(*(void *)(v4 + 48) + 16 * i);
    *uint64_t v23 = *v21;
    v23[1] = v22;
    uint64_t result = (void *)swift_bridgeObjectRetain(v22);
    if (v14) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v18 >= v15) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v2 + 8 * v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v15) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v2 + 8 * v10);
      if (!v19)
      {
        int64_t v10 = v18 + 2;
        if (v18 + 2 >= v15) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v2 + 8 * v10);
        if (!v19) {
          break;
        }
      }
    }

void *sub_1001A2C54()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Calendar.Component(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unsigned __int8 v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000175B0(&qword_1002B8BE8);
  uint64_t v6 = *v0;
  uint64_t v7 = static _SetStorage.copy(original:)(*v0);
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release(v6);
LABEL_30:
    *uint64_t v1 = v8;
    return result;
  }

  uint64_t v26 = v1;
  uint64_t result = (void *)(v7 + 56);
  uint64_t v10 = v6 + 56;
  unint64_t v11 = (unint64_t)((1LL << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  int64_t v13 = 0LL;
  *(void *)(v8 + sub_100195C94(v0 + 16) = *(void *)(v6 + 16);
  uint64_t v14 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v15 = *(void *)(v6 + 56);
  uint64_t v16 = -1LL;
  if (v14 < 64) {
    uint64_t v16 = ~(-1LL << v14);
  }
  unint64_t v17 = v16 & v15;
  int64_t v18 = (unint64_t)(v14 + 63) >> 6;
  if ((v16 & v15) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v19 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (unint64_t i = v19 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v13 << 6))
  {
    unint64_t v24 = *(void *)(v3 + 72) * i;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v24, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))( *(void *)(v8 + 48) + v24,  v5,  v2);
    if (v17) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v21 >= v18) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v18) {
        goto LABEL_28;
      }
      unint64_t v22 = *(void *)(v10 + 8 * v13);
      if (!v22)
      {
        int64_t v13 = v21 + 2;
        if (v21 + 2 >= v18) {
          goto LABEL_28;
        }
        unint64_t v22 = *(void *)(v10 + 8 * v13);
        if (!v22) {
          break;
        }
      }
    }

void *sub_1001A2E7C()
{
  uint64_t v3 = v0;
  sub_1000175B0(&qword_1002B8BC0);
  uint64_t v4 = sub_1001A4238();
  if (!*(void *)(v1 + 16))
  {
LABEL_28:
    uint64_t result = (void *)sub_10002A51C();
    *uint64_t v3 = v4;
    return result;
  }

  uint64_t result = (void *)sub_1001A41B0();
  if (v8) {
    BOOL v9 = (unint64_t)result >= v7;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    uint64_t result = sub_1001A42D4(result, v6);
  }
  int64_t v10 = 0LL;
  *(void *)(v4 + sub_100195C94(v0 + 16) = *(void *)(v1 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v1 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v1 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  if (!v13) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v10 << 6))
  {
    *(void *)(*(void *)(v4 + 48) + 8 * i) = *(void *)(*(void *)(v1 + 48) + 8 * i);
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v2 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v2 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v2 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }

void *sub_1001A2FD8()
{
  uint64_t v1 = v0;
  sub_1000175B0((uint64_t *)&unk_1002B8BF0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + sub_100195C94(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  if (!v12) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v14 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v9 << 6))
  {
    *(_BYTE *)(*(void *)(v4 + 48) + i) = *(_BYTE *)(*(void *)(v2 + 48) + i);
    if (v12) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }

void *sub_1001A316C()
{
  uint64_t v1 = v0;
  sub_1000175B0(&qword_1002B8BC8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + sub_100195C94(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  if (!v12) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v14 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v9 << 6))
  {
    *(_BYTE *)(*(void *)(v4 + 48) + i) = *(_BYTE *)(*(void *)(v2 + 48) + i);
    if (v12) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }

uint64_t sub_1001A3300(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1000175B0((uint64_t *)&unk_1002B8BD0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
LABEL_37:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  uint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v13 = 0LL;
  if (!v10) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    int64_t v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)(v33);
    swift_bridgeObjectRetain(v21);
    String.hash(into:)(v33, v20, v21);
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) == 0)
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v24);
        if (v29 != -1)
        {
          unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
    uint64_t v30 = (void *)(*(void *)(v6 + 48) + 16 * v25);
    *uint64_t v30 = v20;
    v30[1] = v21;
    ++*(void *)(v6 + 16);
    if (v10) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      goto LABEL_39;
    }
    if (v16 >= v32) {
      goto LABEL_35;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v32) {
        goto LABEL_35;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v13);
      if (!v17)
      {
        int64_t v13 = v16 + 2;
        if (v16 + 2 >= v32) {
          goto LABEL_35;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v13);
        if (!v17) {
          break;
        }
      }
    }

uint64_t sub_1001A35A8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Calendar.Component(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_1000175B0(&qword_1002B8BE8);
  uint64_t v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 0LL);
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
    uint64_t result = swift_release(v8);
LABEL_36:
    *uint64_t v2 = v10;
    return result;
  }

  uint64_t v11 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 56);
  uint64_t v35 = v2;
  uint64_t v36 = v8 + 56;
  if (v11 < 64) {
    uint64_t v13 = ~(-1LL << v11);
  }
  else {
    uint64_t v13 = -1LL;
  }
  unint64_t v14 = v13 & v12;
  int64_t v37 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 56;
  uint64_t result = swift_retain();
  int64_t v17 = 0LL;
  if (!v14) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v18 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    uint64_t v23 = *(void *)(v5 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v23 * i, v4);
    uint64_t v24 = *(void *)(v10 + 40);
    uint64_t v25 = sub_1001A415C( (unint64_t *)&qword_1002B8440,  (const char *)&protocol conformance descriptor for Calendar.Component);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v24, v4, v25);
    uint64_t v26 = -1LL << *(_BYTE *)(v10 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1LL << v27) & ~*(void *)(v15 + 8 * (v27 >> 6))) == 0)
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v26) >> 6;
      while (++v28 != v31 || (v30 & 1) == 0)
      {
        BOOL v32 = v28 == v31;
        if (v28 == v31) {
          unint64_t v28 = 0LL;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v15 + 8 * v28);
        if (v33 != -1)
        {
          unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
          goto LABEL_32;
        }
      }

      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    unint64_t v29 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v15 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_32:
    *(void *)(v15 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v29;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))( *(void *)(v10 + 48) + v29 * v23,  v7,  v4);
    ++*(void *)(v10 + 16);
    if (v14) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      goto LABEL_38;
    }
    if (v20 >= v37) {
      goto LABEL_34;
    }
    unint64_t v21 = *(void *)(v36 + 8 * v20);
    ++v17;
    if (!v21)
    {
      int64_t v17 = v20 + 1;
      if (v20 + 1 >= v37) {
        goto LABEL_34;
      }
      unint64_t v21 = *(void *)(v36 + 8 * v17);
      if (!v21)
      {
        int64_t v17 = v20 + 2;
        if (v20 + 2 >= v37) {
          goto LABEL_34;
        }
        unint64_t v21 = *(void *)(v36 + 8 * v17);
        if (!v21) {
          break;
        }
      }
    }

uint64_t sub_1001A38C4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1000175B0(&qword_1002B8BC0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = result;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
LABEL_37:
    *uint64_t v2 = v6;
    return result;
  }

  unint64_t v28 = v2;
  int64_t v7 = 0LL;
  uint64_t v8 = v3 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = result + 56;
  if (!v11) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v14 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v7 << 6))
  {
    uint64_t v19 = *(void *)(*(void *)(v3 + 48) + 8 * i);
    uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), v19);
    uint64_t v20 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v13 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v13 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v13 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v13 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    *(void *)(*(void *)(v6 + 48) + 8 * v23) = v19;
    ++*(void *)(v6 + 16);
    if (v11) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v16 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      goto LABEL_39;
    }
    if (v16 >= v12) {
      goto LABEL_35;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v7;
    if (!v17)
    {
      int64_t v7 = v16 + 1;
      if (v16 + 1 >= v12) {
        goto LABEL_35;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v7);
      if (!v17)
      {
        int64_t v7 = v16 + 2;
        if (v16 + 2 >= v12) {
          goto LABEL_35;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v7);
        if (!v17) {
          break;
        }
      }
    }

uint64_t sub_1001A3B20()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1001A3B44(void *a1)
{
}

uint64_t sub_1001A3B50(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1000175B0((uint64_t *)&unk_1002B8BF0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
    goto LABEL_26;
  }

  int64_t v16 = v2;
  uint64_t v6 = 1LL << *(_BYTE *)(v3 + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  else {
    uint64_t v7 = -1LL;
  }
  unint64_t v8 = v7 & *(void *)(v3 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  if (v8)
  {
    unint64_t v10 = __clz(__rbit64(v8));
    goto LABEL_23;
  }

  if (v9 > 1)
  {
    unint64_t v11 = *(void *)(v3 + 64);
    uint64_t v12 = 1LL;
    if (v11) {
      goto LABEL_22;
    }
    uint64_t v12 = 2LL;
    if (v9 > 2)
    {
      unint64_t v11 = *(void *)(v3 + 72);
      if (v11) {
        goto LABEL_22;
      }
      uint64_t v12 = 3LL;
      if (v9 > 3)
      {
        unint64_t v11 = *(void *)(v3 + 80);
        if (!v11)
        {
          uint64_t v13 = 4LL;
          if (v9 > 4)
          {
            unint64_t v11 = *(void *)(v3 + 88);
            if (v11)
            {
              uint64_t v12 = 4LL;
              goto LABEL_22;
            }

            while (1)
            {
              uint64_t v12 = v13 + 1;
              if (__OFADD__(v13, 1LL))
              {
                __break(1u);
                JUMPOUT(0x1001A3E7CLL);
              }

              if (v12 >= v9) {
                break;
              }
              unint64_t v11 = *(void *)(v3 + 56 + 8 * v12);
              ++v13;
              if (v11) {
                goto LABEL_22;
              }
            }
          }

          goto LABEL_24;
        }

uint64_t sub_1001A3E90(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1000175B0(&qword_1002B8BC8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release();
LABEL_43:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  char v30 = v2;
  int64_t v31 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v13 = 0LL;
  if (!v10) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    int v19 = *(unsigned __int8 *)(*(void *)(v3 + 48) + i);
    Hasher.init(_seed:)(v32);
    if (v19) {
      unint64_t v20 = 1634497893LL;
    }
    else {
      unint64_t v20 = 0xD000000000000010LL;
    }
    if (v19) {
      unint64_t v21 = 0xE400000000000000LL;
    }
    else {
      unint64_t v21 = 0x8000000100217090LL;
    }
    String.hash(into:)(v32, v20, v21);
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) == 0)
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v24);
        if (v29 != -1)
        {
          unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_39;
        }
      }

      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }

    unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_39:
    *(void *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
    *(_BYTE *)(*(void *)(v6 + 48) + v25) = v19;
    ++*(void *)(v6 + 16);
    if (v10) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      goto LABEL_45;
    }
    if (v16 >= v31) {
      goto LABEL_41;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v31) {
        goto LABEL_41;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v13);
      if (!v17)
      {
        int64_t v13 = v16 + 2;
        if (v16 + 2 >= v31) {
          goto LABEL_41;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v13);
        if (!v17) {
          break;
        }
      }
    }

uint64_t sub_1001A415C(unint64_t *a1, const char *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for Calendar.Component(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1001A41B0()
{
  return v0 + 56;
}

uint64_t sub_1001A41D8()
{
  return swift_errorRelease(v0);
}

id sub_1001A41E0(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

void sub_1001A41E8()
{
  v0._unint64_t countAndFlagsBits = 0x202C3F203D20LL;
  v0._object = (void *)0xE600000000000000LL;
  String.append(_:)(v0);
}

void sub_1001A41FC()
{
  void *v0 = 0x8000000000000000LL;
}

uint64_t sub_1001A4218( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = *v12;
  *uint64_t v12 = a12;
  return swift_bridgeObjectRelease(v13);
}

uint64_t sub_1001A4228()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 152, v0, v1);
}

uint64_t sub_1001A4238()
{
  return static _SetStorage.copy(original:)(*v0);
}

uint64_t sub_1001A4248(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_1001A4258(uint64_t a1)
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a1, v2, v1, v3);
}

NSDictionary sub_1001A4268()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_1001A4278( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  return swift_isUniquelyReferenced_nonNull_native(*a10);
}

uint64_t sub_1001A4284()
{
  return swift_errorRetain(v0);
}

uint64_t sub_1001A428C()
{
  return swift_arrayDestroy(v0, 2LL);
}

id sub_1001A4298(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

id sub_1001A42A0(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_1001A42AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Dictionary.init(dictionaryLiteral:)(a1, v3, a3);
}

uint64_t sub_1001A42B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return swift_isEscapingClosureAtFileLocation(a1, a2, a3, a4, a5, 1LL);
}

uint64_t sub_1001A42C0()
{
  return 0LL;
}

void *sub_1001A42D4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return memmove(a1, v2, 8 * a2);
}

uint64_t sub_1001A42E0(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *(void *)a1 = *a2;
    uint64_t v19 = v18 + ((v5 + 16LL) & ~(unint64_t)v5);
    swift_retain();
  }

  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + sub_100195C94(v0 + 16) = *((_BYTE *)a2 + 16);
    uint64_t v8 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 3sub_100019F7C(v0 + 2) = v8;
    *(void *)(a1 + 4sub_10019B2E8(v0, 0) = a2[5];
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    uint64_t v9 = a2[8];
    *(void *)(a1 + 56) = a2[7];
    *(void *)(a1 + 64) = v9;
    uint64_t v10 = a2[10];
    *(void *)(a1 + 7sub_100019F7C(v0 + 2) = a2[9];
    *(void *)(a1 + 8sub_10019B2E8(v0, 0) = v10;
    uint64_t v11 = a2[12];
    *(void *)(a1 + 88) = a2[11];
    *(void *)(a1 + 96) = v11;
    uint64_t v12 = a2[14];
    *(void *)(a1 + 104) = a2[13];
    *(void *)(a1 + 11sub_100019F7C(v0 + 2) = v12;
    uint64_t v13 = a2[16];
    uint64_t v14 = a3[13];
    __dst = (void *)(a1 + v14);
    uint64_t v15 = (char *)a2 + v14;
    *(void *)(a1 + 12sub_10019B2E8(v0, 0) = a2[15];
    *(void *)(a1 + sub_100081CEC(v0 + 128) = v13;
    uint64_t v16 = type metadata accessor for Date(0LL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (sub_10001D158((uint64_t)v15, 1LL, v16))
    {
      uint64_t v17 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
      memcpy(__dst, v15, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL))(__dst, v15, v16);
      sub_10001762C((uint64_t)__dst, 0LL, 1LL, v16);
    }

    uint64_t v20 = a3[14];
    uint64_t v19 = a1;
    unint64_t v21 = (void *)(a1 + v20);
    uint64_t v22 = (char *)a2 + v20;
    if (sub_10001D158((uint64_t)a2 + v20, 1LL, v16))
    {
      uint64_t v23 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL))(v21, v22, v16);
      sub_10001762C((uint64_t)v21, 0LL, 1LL, v16);
    }

    uint64_t v24 = a3[15];
    uint64_t v25 = a3[16];
    uint64_t v26 = a1 + v24;
    uint64_t v27 = (uint64_t)a2 + v24;
    *(void *)uint64_t v26 = *(void *)v27;
    *(_BYTE *)(v26 + 8) = *(_BYTE *)(v27 + 8);
    uint64_t v28 = a1 + v25;
    uint64_t v29 = (uint64_t *)((char *)a2 + v25);
    unint64_t v30 = *(uint64_t *)((char *)a2 + v25 + 8);
    if (v30 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
    }

    else
    {
      uint64_t v31 = *v29;
      sub_10003AA88(*v29, v30);
      *(void *)uint64_t v28 = v31;
      *(void *)(v28 + 8) = v30;
    }

    uint64_t v32 = a3[17];
    uint64_t v33 = (void *)(a1 + v32);
    uint64_t v34 = (uint64_t *)((char *)a2 + v32);
    uint64_t v35 = sub_1000175B0(&qword_1002AA328);
    if (sub_10001D158((uint64_t)v34, 1LL, v35))
    {
      uint64_t v36 = sub_1000175B0(&qword_1002AB750);
      memcpy(v33, v34, *(void *)(*(void *)(v36 - 8) + 64LL));
    }

    else
    {
      uint64_t v37 = v34[1];
      *uint64_t v33 = *v34;
      v33[1] = v37;
      uint64_t v38 = v34[3];
      _OWORD v33[2] = v34[2];
      v33[3] = v38;
      uint64_t v39 = v34[5];
      v33[4] = v34[4];
      void v33[5] = v39;
      uint64_t v175 = (uint64_t)v33;
      __dsta = (void *)v16;
      uint64_t v40 = v34[7];
      v33[6] = v34[6];
      v33[7] = v40;
      v33[8] = v34[8];
      uint64_t v173 = (int *)v35;
      double v174 = v34;
      uint64_t v41 = *(int *)(v35 + 36);
      id v42 = (void *)((char *)v33 + v41);
      uint64_t v43 = (void *)((char *)v34 + v41);
      uint64_t v44 = v43[1];
      void *v42 = *v43;
      v42[1] = v44;
      uint64_t v45 = (int *)type metadata accessor for CheddarTransaction(0LL);
      uint64_t v46 = v45[5];
      uint64_t v169 = (char *)v43 + v46;
      int v171 = (char *)v42 + v46;
      uint64_t v47 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v47(v171, v169, v16);
      uint64_t v48 = v45[6];
      uint64_t v49 = (void *)((char *)v42 + v48);
      os_log_type_t v50 = (void *)((char *)v43 + v48);
      uint64_t v51 = v50[1];
      *uint64_t v49 = *v50;
      v49[1] = v51;
      uint64_t v52 = v45[7];
      uint64_t v53 = (void *)((char *)v42 + v52);
      id v54 = (void *)((char *)v43 + v52);
      uint64_t v55 = v54[1];
      *uint64_t v53 = *v54;
      v53[1] = v55;
      uint64_t v56 = v45[8];
      uint64_t v57 = (void *)((char *)v42 + v56);
      uint64_t v58 = (void *)((char *)v43 + v56);
      uint64_t v59 = v58[1];
      *uint64_t v57 = *v58;
      v57[1] = v59;
      uint64_t v60 = v45[9];
      id v61 = (char *)v42 + v60;
      uint64_t v62 = (char *)v43 + v60;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v47(v61, v62, v16);
      uint64_t v63 = v45[10];
      uint64_t v64 = (void *)((char *)v42 + v63);
      uint64_t v65 = (void *)((char *)v43 + v63);
      uint64_t v66 = v65[1];
      *uint64_t v64 = *v65;
      v64[1] = v66;
      *((_BYTE *)v42 + v45[11]) = *((_BYTE *)v43 + v45[11]);
      uint64_t v67 = v45[12];
      uint64_t v68 = (void *)((char *)v42 + v67);
      uint64_t v69 = (void *)((char *)v43 + v67);
      uint64_t v70 = v69[1];
      *uint64_t v68 = *v69;
      v68[1] = v70;
      uint64_t v71 = v45[13];
      char v72 = (char *)v42 + v71;
      int v73 = (char *)v43 + v71;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v47(v72, v73, v16);
      *(void *)((char *)v42 + v45[14]) = *(void *)((char *)v43 + v45[14]);
      uint64_t v74 = v45[15];
      uint64_t v75 = (void *)((char *)v42 + v74);
      uint64_t v76 = (void *)((char *)v43 + v74);
      uint64_t v77 = v76[1];
      *uint64_t v75 = *v76;
      v75[1] = v77;
      *(void *)((char *)v42 + v45[16]) = *(void *)((char *)v43 + v45[16]);
      *((_BYTE *)v42 + v45[17]) = *((_BYTE *)v43 + v45[17]);
      uint64_t v78 = v45[18];
      uint64_t v79 = (void *)((char *)v42 + v78);
      uint64_t v80 = (void *)((char *)v43 + v78);
      uint64_t v81 = v80[1];
      *uint64_t v79 = *v80;
      v79[1] = v81;
      uint64_t v82 = v45[19];
      unint64_t v83 = (void *)((char *)v42 + v82);
      uint64_t v84 = (void *)((char *)v43 + v82);
      uint64_t v85 = v84[1];
      *unint64_t v83 = *v84;
      v83[1] = v85;
      uint64_t v86 = v45[20];
      uint64_t v87 = (void *)((char *)v42 + v86);
      id v88 = (void *)((char *)v43 + v86);
      uint64_t v89 = v88[1];
      *uint64_t v87 = *v88;
      v87[1] = v89;
      uint64_t v90 = v45[21];
      uint64_t v91 = (void *)((char *)v42 + v90);
      uint64_t v92 = (void *)((char *)v43 + v90);
      uint64_t v93 = v92[1];
      *uint64_t v91 = *v92;
      v91[1] = v93;
      uint64_t v94 = v45[22];
      char v95 = (char *)v42 + v94;
      uint64_t v96 = (char *)v43 + v94;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (sub_10001D158((uint64_t)v96, 1LL, (uint64_t)__dsta))
      {
        uint64_t v97 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
        memcpy(v95, v96, *(void *)(*(void *)(v97 - 8) + 64LL));
        uint64_t v98 = (void (*)(char *, char *, void *))v47;
      }

      else
      {
        uint64_t v99 = v96;
        uint64_t v98 = (void (*)(char *, char *, void *))v47;
        v47(v95, v99, (uint64_t)__dsta);
        sub_10001762C((uint64_t)v95, 0LL, 1LL, (uint64_t)__dsta);
      }

      uint64_t v100 = v45[23];
      int64_t v101 = (void *)((char *)v42 + v100);
      int64_t v102 = (void *)((char *)v43 + v100);
      uint64_t v103 = v102[1];
      *int64_t v101 = *v102;
      v101[1] = v103;
      uint64_t v104 = v45[24];
      __int128 v105 = (void *)((char *)v42 + v104);
      uint64_t v106 = (void *)((char *)v43 + v104);
      uint64_t v107 = v106[1];
      *__int128 v105 = *v106;
      v105[1] = v107;
      uint64_t v108 = v45[25];
      __int128 v109 = (void *)((char *)v42 + v108);
      unint64_t v110 = (void *)((char *)v43 + v108);
      uint64_t v111 = v110[1];
      *__int128 v109 = *v110;
      v109[1] = v111;
      uint64_t v112 = v45[26];
      char v113 = (char *)v42 + v112;
      uint64_t v114 = (char *)v43 + v112;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v19 = a1;
      if (sub_10001D158((uint64_t)v114, 1LL, (uint64_t)__dsta))
      {
        uint64_t v115 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
        memcpy(v113, v114, *(void *)(*(void *)(v115 - 8) + 64LL));
      }

      else
      {
        v98(v113, v114, __dsta);
        sub_10001762C((uint64_t)v113, 0LL, 1LL, (uint64_t)__dsta);
      }

      *((_BYTE *)v42 + v45[27]) = *((_BYTE *)v43 + v45[27]);
      uint64_t v116 = v45[28];
      char v117 = (void *)((char *)v42 + v116);
      uint64_t v118 = (void *)((char *)v43 + v116);
      __dstb = (void *)v118[1];
      *char v117 = *v118;
      v117[1] = __dstb;
      *((_BYTE *)v42 + v45[29]) = *((_BYTE *)v43 + v45[29]);
      *((_BYTE *)v42 + v45[30]) = *((_BYTE *)v43 + v45[30]);
      *((_BYTE *)v42 + v45[31]) = *((_BYTE *)v43 + v45[31]);
      uint64_t v119 = v45[32];
      char v120 = (void *)((char *)v42 + v119);
      double v121 = (void *)((char *)v43 + v119);
      uint64_t v172 = v121[1];
      *char v120 = *v121;
      v120[1] = v172;
      uint64_t v122 = v45[33];
      uint64_t v123 = (void *)((char *)v42 + v122);
      double v124 = (void *)((char *)v43 + v122);
      uint64_t v170 = v124[1];
      *uint64_t v123 = *v124;
      v123[1] = v170;
      uint64_t v125 = v45[34];
      uint64_t v126 = (void *)((char *)v42 + v125);
      uint64_t v127 = (void *)((char *)v43 + v125);
      uint64_t v168 = v127[1];
      *uint64_t v126 = *v127;
      v126[1] = v168;
      uint64_t v128 = v45[35];
      uint64_t v129 = (void *)((char *)v42 + v128);
      uint64_t v130 = (void *)((char *)v43 + v128);
      uint64_t v167 = v130[1];
      *uint64_t v129 = *v130;
      v129[1] = v167;
      uint64_t v131 = v45[36];
      unint64_t v132 = (void *)((char *)v42 + v131);
      uint64_t v133 = (void *)((char *)v43 + v131);
      uint64_t v166 = v133[1];
      *unint64_t v132 = *v133;
      v132[1] = v166;
      uint64_t v134 = v45[37];
      uint64_t v135 = (void *)((char *)v42 + v134);
      char v136 = (void *)((char *)v43 + v134);
      uint64_t v137 = v136[1];
      *uint64_t v135 = *v136;
      v135[1] = v137;
      uint64_t v138 = v45[38];
      uint64_t v139 = (void *)((char *)v42 + v138);
      unint64_t v140 = (void *)((char *)v43 + v138);
      uint64_t v141 = v140[1];
      *uint64_t v139 = *v140;
      v139[1] = v141;
      uint64_t v142 = v45[39];
      uint64_t v143 = (void *)((char *)v42 + v142);
      char v144 = (void *)((char *)v43 + v142);
      uint64_t v145 = v144[1];
      void *v143 = *v144;
      v143[1] = v145;
      uint64_t v146 = v45[40];
      double v147 = (void *)((char *)v42 + v146);
      uint64_t v148 = (void *)((char *)v43 + v146);
      uint64_t v149 = v148[1];
      *double v147 = *v148;
      v147[1] = v149;
      uint64_t v150 = v45[41];
      uint64_t v151 = (char *)v42 + v150;
      uint64_t v152 = (char *)v43 + v150;
      *(void *)uint64_t v151 = *(void *)v152;
      v151[8] = v152[8];
      uint64_t v153 = v45[42];
      uint64_t v154 = (void *)((char *)v42 + v153);
      uint64_t v155 = (void *)((char *)v43 + v153);
      uint64_t v156 = v155[1];
      *uint64_t v154 = *v155;
      v154[1] = v156;
      uint64_t v157 = v173[10];
      uint64_t v164 = (char *)v174 + v157;
      uint64_t v165 = v175 + v157;
      uint64_t v158 = type metadata accessor for P256.Signing.PrivateKey(0LL);
      char v163 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v158 - 8) + 16LL);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v163(v165, v164, v158);
      uint64_t v159 = v173[11];
      uint64_t v160 = v175 + v159;
      char v161 = (char *)v174 + v159;
      *(void *)uint64_t v160 = *(void *)v161;
      *(_BYTE *)(v160 + 8) = v161[8];
      *(_BYTE *)(v175 + v173[12]) = *((_BYTE *)v174 + v173[12]);
      sub_10001762C(v175, 0LL, 1LL, (uint64_t)v173);
    }
  }

  return v19;
}

uint64_t sub_1001A4AE4(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[13];
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = a1 + a2[14];
  uint64_t v7 = (uint64_t *)(a1 + a2[16]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_10003A9EC(*v7, v8);
  }
  uint64_t v9 = a1 + a2[17];
  uint64_t v10 = sub_1000175B0(&qword_1002AA328);
  uint64_t result = sub_10001D158(v9, 1LL, v10);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v12 = v9 + *(int *)(v10 + 36);
    swift_bridgeObjectRelease();
    uint64_t v13 = (int *)type metadata accessor for CheddarTransaction(0LL);
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
    v14(v12 + v13[5], v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14(v12 + v13[9], v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14(v12 + v13[13], v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v15 = v12 + v13[22];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v16 = v12 + v13[26];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v17 = v9 + *(int *)(v10 + 40);
    uint64_t v18 = type metadata accessor for P256.Signing.PrivateKey(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8LL))(v17, v18);
  }

  return result;
}

uint64_t sub_1001A4E88(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + sub_100195C94(v0 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = v6;
  *(void *)(a1 + 4sub_10019B2E8(v0, 0) = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 7sub_100019F7C(v0 + 2) = *(void *)(a2 + 72);
  *(void *)(a1 + 8sub_10019B2E8(v0, 0) = v8;
  uint64_t v9 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v9;
  uint64_t v10 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 11sub_100019F7C(v0 + 2) = v10;
  uint64_t v11 = *(void *)(a2 + 128);
  uint64_t v12 = a3[13];
  __dst = (void *)(a1 + v12);
  uint64_t v13 = (const void *)(a2 + v12);
  *(void *)(a1 + 12sub_10019B2E8(v0, 0) = *(void *)(a2 + 120);
  *(void *)(a1 + sub_100081CEC(v0 + 128) = v11;
  uint64_t v14 = type metadata accessor for Date(0LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (sub_10001D158((uint64_t)v13, 1LL, v14))
  {
    uint64_t v15 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(__dst, v13, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 16LL))(__dst, v13, v14);
    sub_10001762C((uint64_t)__dst, 0LL, 1LL, v14);
  }

  uint64_t v16 = a3[14];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  if (sub_10001D158(a2 + v16, 1LL, v14))
  {
    uint64_t v19 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 16LL))(v17, v18, v14);
    sub_10001762C((uint64_t)v17, 0LL, 1LL, v14);
  }

  uint64_t v20 = a3[15];
  uint64_t v21 = a3[16];
  uint64_t v22 = a1 + v20;
  uint64_t v23 = a2 + v20;
  *(void *)uint64_t v22 = *(void *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  uint64_t v24 = a1 + v21;
  uint64_t v25 = (uint64_t *)(a2 + v21);
  unint64_t v26 = *(void *)(a2 + v21 + 8);
  if (v26 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  }

  else
  {
    uint64_t v27 = *v25;
    sub_10003AA88(*v25, v26);
    *(void *)uint64_t v24 = v27;
    *(void *)(v24 + 8) = v26;
  }

  uint64_t v28 = a3[17];
  uint64_t v29 = (void *)(a1 + v28);
  unint64_t v30 = (void *)(a2 + v28);
  uint64_t v31 = sub_1000175B0(&qword_1002AA328);
  if (sub_10001D158((uint64_t)v30, 1LL, v31))
  {
    uint64_t v32 = sub_1000175B0(&qword_1002AB750);
    memcpy(v29, v30, *(void *)(*(void *)(v32 - 8) + 64LL));
  }

  else
  {
    uint64_t v33 = v30[1];
    void *v29 = *v30;
    v29[1] = v33;
    uint64_t v34 = v30[3];
    void v29[2] = v30[2];
    v29[3] = v34;
    uint64_t v35 = v30[5];
    v29[4] = v30[4];
    v29[5] = v35;
    uint64_t v174 = v14;
    uint64_t v36 = v30[7];
    v29[6] = v30[6];
    v29[7] = v36;
    v29[8] = v30[8];
    uint64_t v167 = (int *)v31;
    uint64_t v168 = v30;
    uint64_t v37 = *(int *)(v31 + 36);
    uint64_t v169 = (uint64_t)v29;
    uint64_t v38 = (void *)((char *)v29 + v37);
    uint64_t v39 = (void *)((char *)v30 + v37);
    uint64_t v40 = v39[1];
    *uint64_t v38 = *v39;
    v38[1] = v40;
    uint64_t v41 = (int *)type metadata accessor for CheddarTransaction(0LL);
    uint64_t v42 = v41[5];
    char v163 = (char *)v39 + v42;
    uint64_t v165 = (char *)v38 + v42;
    __dsta = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __dsta(v165, v163, v14);
    uint64_t v43 = v41[6];
    uint64_t v44 = (void *)((char *)v38 + v43);
    uint64_t v45 = (void *)((char *)v39 + v43);
    uint64_t v46 = v45[1];
    *uint64_t v44 = *v45;
    v44[1] = v46;
    uint64_t v47 = v41[7];
    uint64_t v48 = (void *)((char *)v38 + v47);
    uint64_t v49 = (void *)((char *)v39 + v47);
    uint64_t v50 = v49[1];
    *uint64_t v48 = *v49;
    v48[1] = v50;
    uint64_t v51 = v41[8];
    uint64_t v52 = (void *)((char *)v38 + v51);
    uint64_t v53 = (void *)((char *)v39 + v51);
    uint64_t v54 = v53[1];
    *uint64_t v52 = *v53;
    v52[1] = v54;
    uint64_t v55 = v41[9];
    uint64_t v56 = (char *)v38 + v55;
    uint64_t v57 = (char *)v39 + v55;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __dsta(v56, v57, v14);
    uint64_t v58 = v41[10];
    uint64_t v59 = (void *)((char *)v38 + v58);
    uint64_t v60 = (void *)((char *)v39 + v58);
    uint64_t v61 = v60[1];
    *uint64_t v59 = *v60;
    v59[1] = v61;
    *((_BYTE *)v38 + v41[11]) = *((_BYTE *)v39 + v41[11]);
    uint64_t v62 = v41[12];
    uint64_t v63 = (void *)((char *)v38 + v62);
    uint64_t v64 = (void *)((char *)v39 + v62);
    uint64_t v65 = v64[1];
    *uint64_t v63 = *v64;
    v63[1] = v65;
    uint64_t v66 = v41[13];
    uint64_t v67 = (char *)v38 + v66;
    uint64_t v68 = (char *)v39 + v66;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __dsta(v67, v68, v14);
    *(void *)((char *)v38 + v41[14]) = *(void *)((char *)v39 + v41[14]);
    uint64_t v69 = v41[15];
    uint64_t v70 = (void *)((char *)v38 + v69);
    uint64_t v71 = (void *)((char *)v39 + v69);
    uint64_t v72 = v71[1];
    *uint64_t v70 = *v71;
    v70[1] = v72;
    *(void *)((char *)v38 + v41[16]) = *(void *)((char *)v39 + v41[16]);
    *((_BYTE *)v38 + v41[17]) = *((_BYTE *)v39 + v41[17]);
    uint64_t v73 = v41[18];
    uint64_t v74 = (void *)((char *)v38 + v73);
    uint64_t v75 = (void *)((char *)v39 + v73);
    uint64_t v76 = v75[1];
    *uint64_t v74 = *v75;
    v74[1] = v76;
    uint64_t v77 = v41[19];
    uint64_t v78 = (void *)((char *)v38 + v77);
    uint64_t v79 = (void *)((char *)v39 + v77);
    uint64_t v80 = v79[1];
    *uint64_t v78 = *v79;
    v78[1] = v80;
    uint64_t v81 = v41[20];
    uint64_t v82 = (void *)((char *)v38 + v81);
    unint64_t v83 = (void *)((char *)v39 + v81);
    uint64_t v84 = v83[1];
    *uint64_t v82 = *v83;
    v82[1] = v84;
    uint64_t v85 = v41[21];
    uint64_t v86 = (void *)((char *)v38 + v85);
    uint64_t v87 = (void *)((char *)v39 + v85);
    uint64_t v88 = v87[1];
    *uint64_t v86 = *v87;
    v86[1] = v88;
    uint64_t v89 = v41[22];
    uint64_t v90 = (char *)v38 + v89;
    uint64_t v91 = (char *)v39 + v89;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (sub_10001D158((uint64_t)v91, 1LL, v174))
    {
      uint64_t v92 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
      memcpy(v90, v91, *(void *)(*(void *)(v92 - 8) + 64LL));
      uint64_t v93 = __dsta;
    }

    else
    {
      uint64_t v94 = v91;
      uint64_t v93 = __dsta;
      __dsta(v90, v94, v174);
      sub_10001762C((uint64_t)v90, 0LL, 1LL, v174);
    }

    uint64_t v95 = v41[23];
    uint64_t v96 = (void *)((char *)v38 + v95);
    uint64_t v97 = (void *)((char *)v39 + v95);
    uint64_t v98 = v97[1];
    *uint64_t v96 = *v97;
    v96[1] = v98;
    uint64_t v99 = v41[24];
    uint64_t v100 = (void *)((char *)v38 + v99);
    int64_t v101 = (void *)((char *)v39 + v99);
    uint64_t v102 = v101[1];
    *uint64_t v100 = *v101;
    v100[1] = v102;
    uint64_t v103 = v41[25];
    uint64_t v104 = (void *)((char *)v38 + v103);
    __int128 v105 = (void *)((char *)v39 + v103);
    uint64_t v106 = v105[1];
    *uint64_t v104 = *v105;
    v104[1] = v106;
    uint64_t v107 = v41[26];
    uint64_t v108 = (char *)v38 + v107;
    __int128 v109 = (char *)v39 + v107;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (sub_10001D158((uint64_t)v109, 1LL, v174))
    {
      uint64_t v110 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
      memcpy(v108, v109, *(void *)(*(void *)(v110 - 8) + 64LL));
    }

    else
    {
      v93(v108, v109, v174);
      sub_10001762C((uint64_t)v108, 0LL, 1LL, v174);
    }

    *((_BYTE *)v38 + v41[27]) = *((_BYTE *)v39 + v41[27]);
    uint64_t v111 = v41[28];
    uint64_t v112 = (void *)((char *)v38 + v111);
    char v113 = (void *)((char *)v39 + v111);
    uint64_t v175 = v113[1];
    *uint64_t v112 = *v113;
    v112[1] = v175;
    *((_BYTE *)v38 + v41[29]) = *((_BYTE *)v39 + v41[29]);
    *((_BYTE *)v38 + v41[30]) = *((_BYTE *)v39 + v41[30]);
    *((_BYTE *)v38 + v41[31]) = *((_BYTE *)v39 + v41[31]);
    uint64_t v114 = v41[32];
    uint64_t v115 = (void *)((char *)v38 + v114);
    uint64_t v116 = (void *)((char *)v39 + v114);
    __dstb = (void *)v116[1];
    *uint64_t v115 = *v116;
    v115[1] = __dstb;
    uint64_t v117 = v41[33];
    uint64_t v118 = (void *)((char *)v38 + v117);
    uint64_t v119 = (void *)((char *)v39 + v117);
    uint64_t v166 = v119[1];
    *uint64_t v118 = *v119;
    v118[1] = v166;
    uint64_t v120 = v41[34];
    double v121 = (void *)((char *)v38 + v120);
    uint64_t v122 = (void *)((char *)v39 + v120);
    uint64_t v164 = v122[1];
    *double v121 = *v122;
    v121[1] = v164;
    uint64_t v123 = v41[35];
    double v124 = (void *)((char *)v38 + v123);
    uint64_t v125 = (void *)((char *)v39 + v123);
    uint64_t v162 = v125[1];
    *double v124 = *v125;
    v124[1] = v162;
    uint64_t v126 = v41[36];
    uint64_t v127 = (void *)((char *)v38 + v126);
    uint64_t v128 = (void *)((char *)v39 + v126);
    uint64_t v161 = v128[1];
    *uint64_t v127 = *v128;
    v127[1] = v161;
    uint64_t v129 = v41[37];
    uint64_t v130 = (void *)((char *)v38 + v129);
    uint64_t v131 = (void *)((char *)v39 + v129);
    uint64_t v132 = v131[1];
    *uint64_t v130 = *v131;
    v130[1] = v132;
    uint64_t v133 = v41[38];
    uint64_t v134 = (void *)((char *)v38 + v133);
    uint64_t v135 = (void *)((char *)v39 + v133);
    uint64_t v136 = v135[1];
    *uint64_t v134 = *v135;
    v134[1] = v136;
    uint64_t v137 = v41[39];
    uint64_t v138 = (void *)((char *)v38 + v137);
    uint64_t v139 = (void *)((char *)v39 + v137);
    uint64_t v140 = v139[1];
    *uint64_t v138 = *v139;
    v138[1] = v140;
    uint64_t v141 = v41[40];
    uint64_t v142 = (void *)((char *)v38 + v141);
    uint64_t v143 = (void *)((char *)v39 + v141);
    uint64_t v144 = v143[1];
    *uint64_t v142 = *v143;
    v142[1] = v144;
    uint64_t v145 = v41[41];
    uint64_t v146 = (char *)v38 + v145;
    double v147 = (char *)v39 + v145;
    *(void *)uint64_t v146 = *(void *)v147;
    v146[8] = v147[8];
    uint64_t v148 = v41[42];
    uint64_t v149 = (void *)((char *)v38 + v148);
    uint64_t v150 = (void *)((char *)v39 + v148);
    uint64_t v151 = v150[1];
    *uint64_t v149 = *v150;
    v149[1] = v151;
    uint64_t v152 = v167[10];
    uint64_t v159 = (char *)v168 + v152;
    uint64_t v160 = v169 + v152;
    uint64_t v153 = type metadata accessor for P256.Signing.PrivateKey(0LL);
    uint64_t v158 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v153 - 8) + 16LL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v158(v160, v159, v153);
    uint64_t v154 = v167[11];
    uint64_t v155 = v169 + v154;
    uint64_t v156 = (char *)v168 + v154;
    *(void *)uint64_t v155 = *(void *)v156;
    *(_BYTE *)(v155 + 8) = v156[8];
    *(_BYTE *)(v169 + v167[12]) = *((_BYTE *)v168 + v167[12]);
    sub_10001762C(v169, 0LL, 1LL, (uint64_t)v167);
  }

  return a1;
}

uint64_t sub_1001A565C(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + sub_100195C94(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 4sub_10019B2E8(v0, 0) = v7;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 7sub_100019F7C(v0 + 2) = *(void *)(a2 + 72);
  *(void *)(a1 + 8sub_10019B2E8(v0, 0) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 11sub_100019F7C(v0 + 2) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 12sub_10019B2E8(v0, 0) = *(void *)(a2 + 120);
  *(void *)(a1 + sub_100081CEC(v0 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = a3[13];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for Date(0LL);
  int v12 = sub_10001D158((uint64_t)v9, 1LL, v11);
  int v13 = sub_10001D158((uint64_t)v10, 1LL, v11);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
      sub_10001762C((uint64_t)v9, 0LL, 1LL, v11);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v14 = *(void *)(v11 - 8);
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v9, v11);
LABEL_6:
    uint64_t v15 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(v14 + 24))(v9, v10, v11);
LABEL_7:
  uint64_t v16 = a3[14];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  int v19 = sub_10001D158(a1 + v16, 1LL, v11);
  int v20 = sub_10001D158((uint64_t)v18, 1LL, v11);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v17, v18, v11);
      sub_10001762C((uint64_t)v17, 0LL, 1LL, v11);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v21 = *(void *)(v11 - 8);
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v21 + 8))(v17, v11);
LABEL_12:
    uint64_t v22 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v17, v18, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(void *, const void *, uint64_t))(v21 + 24))(v17, v18, v11);
LABEL_13:
  uint64_t v23 = a3[15];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = (uint64_t *)(a2 + v23);
  uint64_t v26 = *v25;
  *(_BYTE *)(v24 + 8) = *((_BYTE *)v25 + 8);
  *(void *)uint64_t v24 = v26;
  uint64_t v27 = a3[16];
  uint64_t v28 = (uint64_t *)(a1 + v27);
  uint64_t v29 = (uint64_t *)(a2 + v27);
  unint64_t v30 = *(void *)(a2 + v27 + 8);
  if (*(void *)(a1 + v27 + 8) >> 60 == 15LL)
  {
    if (v30 >> 60 != 15)
    {
      uint64_t v31 = *v29;
      sub_10003AA88(*v29, v30);
      uint64_t *v28 = v31;
      v28[1] = v30;
      goto LABEL_20;
    }

    goto LABEL_18;
  }

  if (v30 >> 60 == 15)
  {
    sub_100047E84((uint64_t)v28);
LABEL_18:
    *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
    goto LABEL_20;
  }

  uint64_t v32 = *v29;
  sub_10003AA88(*v29, v30);
  uint64_t v33 = *v28;
  unint64_t v34 = v28[1];
  uint64_t *v28 = v32;
  v28[1] = v30;
  sub_10003A9EC(v33, v34);
LABEL_20:
  uint64_t v35 = a3[17];
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (void *)(a2 + v35);
  uint64_t v38 = (int *)sub_1000175B0(&qword_1002AA328);
  int v39 = sub_10001D158((uint64_t)v36, 1LL, (uint64_t)v38);
  int v40 = sub_10001D158((uint64_t)v37, 1LL, (uint64_t)v38);
  if (!v39)
  {
    if (v40)
    {
      sub_1001A6838((uint64_t)v36);
      goto LABEL_26;
    }

    *uint64_t v36 = *v37;
    v36[1] = v37[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    void v36[2] = v37[2];
    v36[3] = v37[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v36[4] = v37[4];
    v36[5] = v37[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v36[6] = v37[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v36[7] = v37[7];
    v36[8] = v37[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v256 = v38;
    uint64_t v258 = v37;
    uint64_t v89 = v38[9];
    uint64_t v90 = (char *)v36 + v89;
    uint64_t v91 = (char *)v37 + v89;
    *(void *)uint64_t v90 = *(void *)((char *)v37 + v89);
    *((void *)v90 + 1) = *(void *)((char *)v37 + v89 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v92 = (int *)type metadata accessor for CheddarTransaction(0LL);
    uint64_t v259 = *(void *)(v11 - 8);
    uint64_t v93 = *(void (**)(char *, char *, uint64_t))(v259 + 24);
    v93(&v90[v92[5]], &v91[v92[5]], v11);
    uint64_t v94 = v92[6];
    uint64_t v95 = &v90[v94];
    uint64_t v96 = &v91[v94];
    *(void *)uint64_t v95 = *(void *)v96;
    *((void *)v95 + 1) = *((void *)v96 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v97 = v92[7];
    uint64_t v98 = &v90[v97];
    uint64_t v99 = &v91[v97];
    *(void *)uint64_t v98 = *(void *)v99;
    *((void *)v98 + 1) = *((void *)v99 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v100 = v92[8];
    int64_t v101 = &v90[v100];
    uint64_t v102 = &v91[v100];
    *(void *)int64_t v101 = *(void *)v102;
    *((void *)v101 + 1) = *((void *)v102 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v93(&v90[v92[9]], &v91[v92[9]], v11);
    uint64_t v103 = v92[10];
    uint64_t v104 = &v90[v103];
    __int128 v105 = &v91[v103];
    *(void *)uint64_t v104 = *(void *)v105;
    *((void *)v104 + 1) = *((void *)v105 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v90[v92[11]] = v91[v92[11]];
    uint64_t v106 = v92[12];
    uint64_t v107 = &v90[v106];
    uint64_t v108 = &v91[v106];
    *(void *)uint64_t v107 = *(void *)v108;
    *((void *)v107 + 1) = *((void *)v108 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    char v255 = v93;
    v93(&v90[v92[13]], &v91[v92[13]], v11);
    *(void *)&v90[v92[14]] = *(void *)&v91[v92[14]];
    uint64_t v109 = v92[15];
    uint64_t v110 = &v90[v109];
    uint64_t v111 = &v91[v109];
    *(void *)uint64_t v110 = *(void *)v111;
    *((void *)v110 + 1) = *((void *)v111 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)&v90[v92[16]] = *(void *)&v91[v92[16]];
    v90[v92[17]] = v91[v92[17]];
    uint64_t v112 = v92[18];
    char v113 = &v90[v112];
    uint64_t v114 = &v91[v112];
    *(void *)char v113 = *(void *)v114;
    *((void *)v113 + 1) = *((void *)v114 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v115 = v92[19];
    uint64_t v116 = &v90[v115];
    uint64_t v117 = &v91[v115];
    *(void *)uint64_t v116 = *(void *)v117;
    *((void *)v116 + 1) = *((void *)v117 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v118 = v92[20];
    uint64_t v119 = &v90[v118];
    uint64_t v120 = &v91[v118];
    *(void *)uint64_t v119 = *(void *)v120;
    *((void *)v119 + 1) = *((void *)v120 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v121 = v92[21];
    uint64_t v122 = &v90[v121];
    uint64_t v123 = &v91[v121];
    *(void *)uint64_t v122 = *(void *)v123;
    *((void *)v122 + 1) = *((void *)v123 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v124 = v92[22];
    uint64_t v125 = &v90[v124];
    uint64_t v126 = &v91[v124];
    int v127 = sub_10001D158((uint64_t)&v90[v124], 1LL, v11);
    int v128 = sub_10001D158((uint64_t)v126, 1LL, v11);
    if (v127)
    {
      if (v128)
      {
        uint64_t v129 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
        memcpy(v125, v126, *(void *)(*(void *)(v129 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v259 + 16))(v125, v126, v11);
        sub_10001762C((uint64_t)v125, 0LL, 1LL, v11);
      }
    }

    else if (v128)
    {
      (*(void (**)(char *, uint64_t))(v259 + 8))(v125, v11);
      uint64_t v186 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
      memcpy(v125, v126, *(void *)(*(void *)(v186 - 8) + 64LL));
    }

    else
    {
      v255(v125, v126, v11);
    }

    uint64_t v187 = v92[23];
    uint64_t v188 = &v90[v187];
    v189 = &v91[v187];
    *(void *)uint64_t v188 = *(void *)v189;
    *((void *)v188 + 1) = *((void *)v189 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v190 = v92[24];
    uint64_t v191 = &v90[v190];
    uint64_t v192 = &v91[v190];
    *(void *)uint64_t v191 = *(void *)v192;
    *((void *)v191 + 1) = *((void *)v192 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v193 = v92[25];
    uint64_t v194 = &v90[v193];
    uint64_t v195 = &v91[v193];
    *(void *)uint64_t v194 = *(void *)v195;
    *((void *)v194 + 1) = *((void *)v195 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v196 = v92[26];
    uint64_t v197 = &v90[v196];
    v198 = &v91[v196];
    int v199 = sub_10001D158((uint64_t)&v90[v196], 1LL, v11);
    int v200 = sub_10001D158((uint64_t)v198, 1LL, v11);
    if (v199)
    {
      if (!v200)
      {
        (*(void (**)(char *, char *, uint64_t))(v259 + 16))(v197, v198, v11);
        sub_10001762C((uint64_t)v197, 0LL, 1LL, v11);
LABEL_47:
        v90[v92[27]] = v91[v92[27]];
        uint64_t v202 = v92[28];
        uint64_t v203 = &v90[v202];
        uint64_t v204 = &v91[v202];
        *(void *)uint64_t v203 = *(void *)v204;
        *((void *)v203 + 1) = *((void *)v204 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v90[v92[29]] = v91[v92[29]];
        v90[v92[30]] = v91[v92[30]];
        v90[v92[31]] = v91[v92[31]];
        uint64_t v205 = v92[32];
        uint64_t v206 = &v90[v205];
        uint64_t v207 = &v91[v205];
        *(void *)uint64_t v206 = *(void *)v207;
        *((void *)v206 + 1) = *((void *)v207 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v208 = v92[33];
        uint64_t v209 = &v90[v208];
        uint64_t v210 = &v91[v208];
        *(void *)uint64_t v209 = *(void *)v210;
        *((void *)v209 + 1) = *((void *)v210 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v211 = v92[34];
        uint64_t v212 = &v90[v211];
        uint64_t v213 = &v91[v211];
        *(void *)uint64_t v212 = *(void *)v213;
        *((void *)v212 + 1) = *((void *)v213 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v214 = v92[35];
        double v215 = &v90[v214];
        uint64_t v216 = &v91[v214];
        *(void *)double v215 = *(void *)v216;
        *((void *)v215 + 1) = *((void *)v216 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v217 = v92[36];
        uint64_t v218 = &v90[v217];
        uint64_t v219 = &v91[v217];
        *(void *)uint64_t v218 = *(void *)v219;
        *((void *)v218 + 1) = *((void *)v219 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v220 = v92[37];
        char v221 = &v90[v220];
        uint64_t v222 = &v91[v220];
        *(void *)char v221 = *(void *)v222;
        *((void *)v221 + 1) = *((void *)v222 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v223 = v92[38];
        uint64_t v224 = &v90[v223];
        uint64_t v225 = &v91[v223];
        *(void *)uint64_t v224 = *(void *)v225;
        *((void *)v224 + 1) = *((void *)v225 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v226 = v92[39];
        uint64_t v227 = &v90[v226];
        uint64_t v228 = &v91[v226];
        *(void *)uint64_t v227 = *(void *)v228;
        *((void *)v227 + 1) = *((void *)v228 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v229 = v92[40];
        uint64_t v230 = &v90[v229];
        double v231 = &v91[v229];
        *(void *)uint64_t v230 = *(void *)v231;
        *((void *)v230 + 1) = *((void *)v231 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v232 = v92[41];
        uint64_t v233 = &v90[v232];
        uint64_t v234 = &v91[v232];
        uint64_t v235 = *(void *)v234;
        v233[8] = v234[8];
        *(void *)uint64_t v233 = v235;
        uint64_t v236 = v92[42];
        v237 = &v90[v236];
        v238 = &v91[v236];
        *(void *)v237 = *(void *)v238;
        *((void *)v237 + 1) = *((void *)v238 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v239 = v256[10];
        uint64_t v240 = (char *)v36 + v239;
        uint64_t v241 = (char *)v258 + v239;
        uint64_t v242 = type metadata accessor for P256.Signing.PrivateKey(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v242 - 8) + 24LL))(v240, v241, v242);
        uint64_t v243 = v256[11];
        uint64_t v244 = (char *)v36 + v243;
        char v245 = (char *)v258 + v243;
        uint64_t v246 = *(void *)v245;
        v244[8] = v245[8];
        *(void *)uint64_t v244 = v246;
        *((_BYTE *)v36 + v256[12]) = *((_BYTE *)v258 + v256[12]);
        return a1;
      }
    }

    else
    {
      if (!v200)
      {
        v255(v197, v198, v11);
        goto LABEL_47;
      }

      (*(void (**)(char *, uint64_t))(v259 + 8))(v197, v11);
    }

    uint64_t v201 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v197, v198, *(void *)(*(void *)(v201 - 8) + 64LL));
    goto LABEL_47;
  }

  if (v40)
  {
LABEL_26:
    uint64_t v88 = sub_1000175B0(&qword_1002AB750);
    memcpy(v36, v37, *(void *)(*(void *)(v88 - 8) + 64LL));
    return a1;
  }

  *uint64_t v36 = *v37;
  v36[1] = v37[1];
  void v36[2] = v37[2];
  v36[3] = v37[3];
  v36[4] = v37[4];
  v36[5] = v37[5];
  v36[6] = v37[6];
  v36[7] = v37[7];
  char v257 = v37;
  v36[8] = v37[8];
  uint64_t v41 = v38[9];
  uint64_t v253 = (uint64_t)v36;
  uint64_t v42 = (void *)((char *)v36 + v41);
  uint64_t v43 = (char *)v37 + v41;
  void *v42 = *(void *)((char *)v37 + v41);
  v42[1] = *(void *)((char *)v37 + v41 + 8);
  uint64_t v44 = (int *)type metadata accessor for CheddarTransaction(0LL);
  uint64_t v45 = v44[5];
  unint64_t v251 = &v43[v45];
  uint64_t v252 = (char *)v42 + v45;
  uint64_t v254 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v254(v252, v251, v11);
  uint64_t v46 = v44[6];
  uint64_t v47 = (void *)((char *)v42 + v46);
  uint64_t v48 = &v43[v46];
  *uint64_t v47 = *(void *)v48;
  v47[1] = *((void *)v48 + 1);
  uint64_t v49 = v44[7];
  uint64_t v50 = (void *)((char *)v42 + v49);
  uint64_t v51 = &v43[v49];
  void *v50 = *(void *)v51;
  v50[1] = *((void *)v51 + 1);
  uint64_t v52 = v44[8];
  uint64_t v53 = (void *)((char *)v42 + v52);
  uint64_t v54 = &v43[v52];
  *uint64_t v53 = *(void *)v54;
  v53[1] = *((void *)v54 + 1);
  uint64_t v55 = v44[9];
  uint64_t v56 = (char *)v42 + v55;
  uint64_t v57 = &v43[v55];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v254(v56, v57, v11);
  uint64_t v58 = v44[10];
  uint64_t v59 = (void *)((char *)v42 + v58);
  uint64_t v60 = &v43[v58];
  *uint64_t v59 = *(void *)v60;
  v59[1] = *((void *)v60 + 1);
  *((_BYTE *)v42 + v44[11]) = v43[v44[11]];
  uint64_t v61 = v44[12];
  uint64_t v62 = (void *)((char *)v42 + v61);
  uint64_t v63 = &v43[v61];
  *uint64_t v62 = *(void *)v63;
  v62[1] = *((void *)v63 + 1);
  uint64_t v64 = v44[13];
  uint64_t v65 = (char *)v42 + v64;
  uint64_t v66 = &v43[v64];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v254(v65, v66, v11);
  *(void *)((char *)v42 + v44[14]) = *(void *)&v43[v44[14]];
  uint64_t v67 = v44[15];
  uint64_t v68 = (void *)((char *)v42 + v67);
  uint64_t v69 = &v43[v67];
  *uint64_t v68 = *(void *)v69;
  v68[1] = *((void *)v69 + 1);
  *(void *)((char *)v42 + v44[16]) = *(void *)&v43[v44[16]];
  *((_BYTE *)v42 + v44[17]) = v43[v44[17]];
  uint64_t v70 = v44[18];
  uint64_t v71 = (void *)((char *)v42 + v70);
  uint64_t v72 = &v43[v70];
  *uint64_t v71 = *(void *)v72;
  v71[1] = *((void *)v72 + 1);
  uint64_t v73 = v44[19];
  uint64_t v74 = (void *)((char *)v42 + v73);
  uint64_t v75 = &v43[v73];
  *uint64_t v74 = *(void *)v75;
  v74[1] = *((void *)v75 + 1);
  uint64_t v76 = v44[20];
  uint64_t v77 = (void *)((char *)v42 + v76);
  uint64_t v78 = &v43[v76];
  *uint64_t v77 = *(void *)v78;
  v77[1] = *((void *)v78 + 1);
  uint64_t v79 = v44[21];
  uint64_t v80 = (void *)((char *)v42 + v79);
  uint64_t v81 = &v43[v79];
  *uint64_t v80 = *(void *)v81;
  v80[1] = *((void *)v81 + 1);
  uint64_t v82 = v44[22];
  unint64_t v83 = (char *)v42 + v82;
  uint64_t v84 = &v43[v82];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v85 = v11;
  swift_bridgeObjectRetain();
  if (sub_10001D158((uint64_t)v84, 1LL, v11))
  {
    uint64_t v86 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v83, v84, *(void *)(*(void *)(v86 - 8) + 64LL));
    uint64_t v87 = v254;
  }

  else
  {
    uint64_t v87 = v254;
    v254(v83, v84, v85);
    sub_10001762C((uint64_t)v83, 0LL, 1LL, v85);
  }

  uint64_t v130 = v44[23];
  uint64_t v131 = (void *)((char *)v42 + v130);
  uint64_t v132 = &v43[v130];
  *uint64_t v131 = *(void *)v132;
  v131[1] = *((void *)v132 + 1);
  uint64_t v133 = v44[24];
  uint64_t v134 = (void *)((char *)v42 + v133);
  uint64_t v135 = &v43[v133];
  *uint64_t v134 = *(void *)v135;
  v134[1] = *((void *)v135 + 1);
  uint64_t v136 = v44[25];
  uint64_t v137 = (void *)((char *)v42 + v136);
  uint64_t v138 = &v43[v136];
  *uint64_t v137 = *(void *)v138;
  v137[1] = *((void *)v138 + 1);
  uint64_t v139 = v44[26];
  uint64_t v140 = (char *)v42 + v139;
  uint64_t v141 = &v43[v139];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (sub_10001D158((uint64_t)v141, 1LL, v85))
  {
    uint64_t v142 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v140, v141, *(void *)(*(void *)(v142 - 8) + 64LL));
  }

  else
  {
    v87(v140, v141, v85);
    sub_10001762C((uint64_t)v140, 0LL, 1LL, v85);
  }

  *((_BYTE *)v42 + v44[27]) = v43[v44[27]];
  uint64_t v143 = v44[28];
  uint64_t v144 = (void *)((char *)v42 + v143);
  uint64_t v145 = &v43[v143];
  *uint64_t v144 = *(void *)v145;
  v144[1] = *((void *)v145 + 1);
  *((_BYTE *)v42 + v44[29]) = v43[v44[29]];
  *((_BYTE *)v42 + v44[30]) = v43[v44[30]];
  *((_BYTE *)v42 + v44[31]) = v43[v44[31]];
  uint64_t v146 = v44[32];
  double v147 = (void *)((char *)v42 + v146);
  uint64_t v148 = &v43[v146];
  *double v147 = *(void *)v148;
  v147[1] = *((void *)v148 + 1);
  uint64_t v149 = v44[33];
  uint64_t v150 = (void *)((char *)v42 + v149);
  uint64_t v151 = &v43[v149];
  *uint64_t v150 = *(void *)v151;
  v150[1] = *((void *)v151 + 1);
  uint64_t v152 = v44[34];
  uint64_t v153 = (void *)((char *)v42 + v152);
  uint64_t v154 = &v43[v152];
  *uint64_t v153 = *(void *)v154;
  v153[1] = *((void *)v154 + 1);
  uint64_t v155 = v44[35];
  uint64_t v156 = (void *)((char *)v42 + v155);
  uint64_t v157 = &v43[v155];
  *uint64_t v156 = *(void *)v157;
  v156[1] = *((void *)v157 + 1);
  uint64_t v158 = v44[36];
  uint64_t v159 = (void *)((char *)v42 + v158);
  uint64_t v160 = &v43[v158];
  *uint64_t v159 = *(void *)v160;
  v159[1] = *((void *)v160 + 1);
  uint64_t v161 = v44[37];
  uint64_t v162 = (void *)((char *)v42 + v161);
  char v163 = &v43[v161];
  *uint64_t v162 = *(void *)v163;
  v162[1] = *((void *)v163 + 1);
  uint64_t v164 = v44[38];
  uint64_t v165 = (void *)((char *)v42 + v164);
  uint64_t v166 = &v43[v164];
  *uint64_t v165 = *(void *)v166;
  v165[1] = *((void *)v166 + 1);
  uint64_t v167 = v44[39];
  uint64_t v168 = (void *)((char *)v42 + v167);
  uint64_t v169 = &v43[v167];
  *uint64_t v168 = *(void *)v169;
  v168[1] = *((void *)v169 + 1);
  uint64_t v170 = v44[40];
  int v171 = (void *)((char *)v42 + v170);
  uint64_t v172 = &v43[v170];
  *int v171 = *(void *)v172;
  v171[1] = *((void *)v172 + 1);
  uint64_t v173 = v44[41];
  uint64_t v174 = (char *)v42 + v173;
  uint64_t v175 = &v43[v173];
  uint64_t v176 = *(void *)v175;
  v174[8] = v175[8];
  *(void *)uint64_t v174 = v176;
  uint64_t v177 = v44[42];
  uint64_t v178 = (void *)((char *)v42 + v177);
  unsigned int v179 = &v43[v177];
  *uint64_t v178 = *(void *)v179;
  v178[1] = *((void *)v179 + 1);
  uint64_t v180 = v38[10];
  uint64_t v249 = (char *)v257 + v180;
  uint64_t v250 = v253 + v180;
  uint64_t v181 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  uint64_t v248 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v181 - 8) + 16LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v248(v250, v249, v181);
  uint64_t v182 = v38[11];
  uint64_t v183 = v253 + v182;
  char v184 = (char *)v257 + v182;
  uint64_t v185 = *(void *)v184;
  *(_BYTE *)(v183 + 8) = v184[8];
  *(void *)uint64_t v183 = v185;
  *(_BYTE *)(v253 + v38[12]) = *((_BYTE *)v257 + v38[12]);
  sub_10001762C(v253, 0LL, 1LL, (uint64_t)v38);
  return a1;
}

uint64_t sub_1001A6838(uint64_t a1)
{
  uint64_t v2 = sub_1000175B0(&qword_1002AA328);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1001A6878(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + sub_100195C94(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 4sub_10019B2E8(v0, 0) = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 7sub_100019F7C(v0 + 2) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  uint64_t v7 = a3[13];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 12sub_10019B2E8(v0, 0) = *(_OWORD *)(a2 + 120);
  uint64_t v10 = type metadata accessor for Date(0LL);
  if (sub_10001D158((uint64_t)v9, 1LL, v10))
  {
    uint64_t v11 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
    sub_10001762C((uint64_t)v8, 0LL, 1LL, v10);
  }

  uint64_t v12 = a3[14];
  int v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  if (sub_10001D158(a2 + v12, 1LL, v10))
  {
    uint64_t v15 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v13, v14, v10);
    sub_10001762C((uint64_t)v13, 0LL, 1LL, v10);
  }

  uint64_t v16 = a3[15];
  uint64_t v17 = a3[16];
  uint64_t v18 = a1 + v16;
  uint64_t v19 = a2 + v16;
  *(void *)uint64_t v18 = *(void *)v19;
  __int128 v20 = *(_OWORD *)(a2 + v17);
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  *(_OWORD *)(a1 + v17) = v20;
  uint64_t v21 = a3[17];
  uint64_t v22 = (char *)(a1 + v21);
  uint64_t v23 = (char *)(a2 + v21);
  uint64_t v24 = (int *)sub_1000175B0(&qword_1002AA328);
  if (sub_10001D158((uint64_t)v23, 1LL, (uint64_t)v24))
  {
    uint64_t v25 = sub_1000175B0(&qword_1002AB750);
    memcpy(v22, v23, *(void *)(*(void *)(v25 - 8) + 64LL));
  }

  else
  {
    memcpy(v22, v23, 0x48uLL);
    uint64_t v26 = v24[9];
    uint64_t v50 = (uint64_t)v22;
    uint64_t v27 = &v22[v26];
    uint64_t v28 = &v23[v26];
    *(_OWORD *)&v22[v26] = *(_OWORD *)&v23[v26];
    uint64_t v29 = (int *)type metadata accessor for CheddarTransaction(0LL);
    unint64_t v30 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL);
    v30(&v27[v29[5]], &v28[v29[5]], v10);
    *(_OWORD *)&v27[v29[6]] = *(_OWORD *)&v28[v29[6]];
    *(_OWORD *)&v27[v29[7]] = *(_OWORD *)&v28[v29[7]];
    *(_OWORD *)&v27[v29[8]] = *(_OWORD *)&v28[v29[8]];
    v30(&v27[v29[9]], &v28[v29[9]], v10);
    *(_OWORD *)&v27[v29[10]] = *(_OWORD *)&v28[v29[10]];
    v27[v29[11]] = v28[v29[11]];
    *(_OWORD *)&v27[v29[12]] = *(_OWORD *)&v28[v29[12]];
    v30(&v27[v29[13]], &v28[v29[13]], v10);
    *(void *)&v27[v29[14]] = *(void *)&v28[v29[14]];
    *(_OWORD *)&v27[v29[15]] = *(_OWORD *)&v28[v29[15]];
    *(void *)&v27[v29[16]] = *(void *)&v28[v29[16]];
    v27[v29[17]] = v28[v29[17]];
    *(_OWORD *)&v27[v29[18]] = *(_OWORD *)&v28[v29[18]];
    *(_OWORD *)&v27[v29[19]] = *(_OWORD *)&v28[v29[19]];
    *(_OWORD *)&v27[v29[20]] = *(_OWORD *)&v28[v29[20]];
    *(_OWORD *)&v27[v29[21]] = *(_OWORD *)&v28[v29[21]];
    uint64_t v31 = v29[22];
    uint64_t v32 = &v27[v31];
    uint64_t v33 = &v28[v31];
    if (sub_10001D158((uint64_t)&v28[v31], 1LL, v10))
    {
      uint64_t v34 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
      memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64LL));
    }

    else
    {
      v30(v32, v33, v10);
      sub_10001762C((uint64_t)v32, 0LL, 1LL, v10);
    }

    *(_OWORD *)&v27[v29[23]] = *(_OWORD *)&v28[v29[23]];
    *(_OWORD *)&v27[v29[24]] = *(_OWORD *)&v28[v29[24]];
    *(_OWORD *)&v27[v29[25]] = *(_OWORD *)&v28[v29[25]];
    uint64_t v35 = v29[26];
    uint64_t v36 = &v27[v35];
    uint64_t v37 = &v28[v35];
    if (sub_10001D158((uint64_t)&v28[v35], 1LL, v10))
    {
      uint64_t v38 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
      memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64LL));
    }

    else
    {
      v30(v36, v37, v10);
      sub_10001762C((uint64_t)v36, 0LL, 1LL, v10);
    }

    v27[v29[27]] = v28[v29[27]];
    *(_OWORD *)&v27[v29[28]] = *(_OWORD *)&v28[v29[28]];
    v27[v29[29]] = v28[v29[29]];
    v27[v29[30]] = v28[v29[30]];
    v27[v29[31]] = v28[v29[31]];
    *(_OWORD *)&v27[v29[32]] = *(_OWORD *)&v28[v29[32]];
    *(_OWORD *)&v27[v29[33]] = *(_OWORD *)&v28[v29[33]];
    *(_OWORD *)&v27[v29[34]] = *(_OWORD *)&v28[v29[34]];
    *(_OWORD *)&v27[v29[35]] = *(_OWORD *)&v28[v29[35]];
    *(_OWORD *)&v27[v29[36]] = *(_OWORD *)&v28[v29[36]];
    *(_OWORD *)&v27[v29[37]] = *(_OWORD *)&v28[v29[37]];
    *(_OWORD *)&v27[v29[38]] = *(_OWORD *)&v28[v29[38]];
    *(_OWORD *)&v27[v29[39]] = *(_OWORD *)&v28[v29[39]];
    *(_OWORD *)&v27[v29[40]] = *(_OWORD *)&v28[v29[40]];
    uint64_t v39 = v29[41];
    int v40 = &v27[v39];
    uint64_t v41 = &v28[v39];
    *(void *)int v40 = *(void *)v41;
    v40[8] = v41[8];
    *(_OWORD *)&v27[v29[42]] = *(_OWORD *)&v28[v29[42]];
    uint64_t v42 = v24[10];
    uint64_t v43 = v50 + v42;
    uint64_t v44 = &v23[v42];
    uint64_t v45 = type metadata accessor for P256.Signing.PrivateKey(0LL);
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v45 - 8) + 32LL))(v43, v44, v45);
    uint64_t v46 = v24[11];
    uint64_t v47 = v50 + v46;
    uint64_t v48 = &v23[v46];
    *(void *)uint64_t v47 = *(void *)v48;
    *(_BYTE *)(v47 + 8) = v48[8];
    *(_BYTE *)(v50 + v24[12]) = v23[v24[12]];
    sub_10001762C(v50, 0LL, 1LL, (uint64_t)v24);
  }

  return a1;
}

uint64_t sub_1001A6DD4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + sub_100195C94(v0 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 4sub_10019B2E8(v0, 0) = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(a1 + 7sub_100019F7C(v0 + 2) = *(void *)(a2 + 72);
  *(void *)(a1 + 8sub_10019B2E8(v0, 0) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 11sub_100019F7C(v0 + 2) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 128);
  *(void *)(a1 + 12sub_10019B2E8(v0, 0) = *(void *)(a2 + 120);
  *(void *)(a1 + sub_100081CEC(v0 + 128) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[13];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v16 = type metadata accessor for Date(0LL);
  int v17 = sub_10001D158((uint64_t)v14, 1LL, v16);
  int v18 = sub_10001D158((uint64_t)v15, 1LL, v16);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v16 - 8) + 32LL))(v14, v15, v16);
      sub_10001762C((uint64_t)v14, 0LL, 1LL, v16);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v19 = *(void *)(v16 - 8);
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v19 + 8))(v14, v16);
LABEL_6:
    uint64_t v20 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v14, v15, *(void *)(*(void *)(v20 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(v19 + 40))(v14, v15, v16);
LABEL_7:
  uint64_t v21 = a3[14];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (const void *)(a2 + v21);
  int v24 = sub_10001D158(a1 + v21, 1LL, v16);
  int v25 = sub_10001D158((uint64_t)v23, 1LL, v16);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v16 - 8) + 32LL))(v22, v23, v16);
      sub_10001762C((uint64_t)v22, 0LL, 1LL, v16);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v26 = *(void *)(v16 - 8);
  if (v25)
  {
    (*(void (**)(void *, uint64_t))(v26 + 8))(v22, v16);
LABEL_12:
    uint64_t v27 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v22, v23, *(void *)(*(void *)(v27 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(void *, const void *, uint64_t))(v26 + 40))(v22, v23, v16);
LABEL_13:
  uint64_t v28 = a3[15];
  uint64_t v29 = a3[16];
  uint64_t v30 = a1 + v28;
  uint64_t v31 = a2 + v28;
  *(void *)uint64_t v30 = *(void *)v31;
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
  uint64_t v32 = a1 + v29;
  uint64_t v33 = a2 + v29;
  unint64_t v34 = *(void *)(a1 + v29 + 8);
  if (v34 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    goto LABEL_18;
  }

  unint64_t v35 = *(void *)(v33 + 8);
  if (v35 >> 60 == 15)
  {
    sub_100047E84(v32);
    goto LABEL_16;
  }

  uint64_t v36 = *(void *)v32;
  *(void *)uint64_t v32 = *(void *)v33;
  *(void *)(v32 + 8) = v35;
  sub_10003A9EC(v36, v34);
LABEL_18:
  uint64_t v37 = a3[17];
  uint64_t v38 = (void *)(a1 + v37);
  uint64_t v39 = (void *)(a2 + v37);
  int v40 = (int *)sub_1000175B0(&qword_1002AA328);
  int v41 = sub_10001D158((uint64_t)v38, 1LL, (uint64_t)v40);
  int v42 = sub_10001D158((uint64_t)v39, 1LL, (uint64_t)v40);
  if (!v41)
  {
    if (v42)
    {
      sub_1001A6838((uint64_t)v38);
      goto LABEL_24;
    }

    uint64_t v53 = v39[1];
    *uint64_t v38 = *v39;
    v38[1] = v53;
    swift_bridgeObjectRelease();
    uint64_t v54 = v39[3];
    v38[2] = v39[2];
    v38[3] = v54;
    swift_bridgeObjectRelease();
    uint64_t v55 = v39[5];
    v38[4] = v39[4];
    v38[5] = v55;
    swift_bridgeObjectRelease();
    v38[6] = v39[6];
    swift_bridgeObjectRelease();
    uint64_t v56 = v39[8];
    uint64_t v38[7] = v39[7];
    v38[8] = v56;
    swift_bridgeObjectRelease();
    uint64_t v57 = v40[9];
    uint64_t v58 = (char *)v38 + v57;
    uint64_t v59 = (char *)v39 + v57;
    uint64_t v60 = *(void *)((char *)v39 + v57 + 8);
    *(void *)uint64_t v58 = *(void *)((char *)v39 + v57);
    *((void *)v58 + 1) = v60;
    swift_bridgeObjectRelease();
    uint64_t v61 = (int *)type metadata accessor for CheddarTransaction(0LL);
    uint64_t v221 = *(void *)(v16 - 8);
    uint64_t v62 = *(void (**)(char *, char *, uint64_t))(v221 + 40);
    v62(&v58[v61[5]], &v59[v61[5]], v16);
    uint64_t v63 = v61[6];
    uint64_t v64 = &v58[v63];
    uint64_t v65 = &v59[v63];
    uint64_t v67 = *(void *)v65;
    uint64_t v66 = *((void *)v65 + 1);
    *(void *)uint64_t v64 = v67;
    *((void *)v64 + 1) = v66;
    swift_bridgeObjectRelease();
    uint64_t v68 = v61[7];
    uint64_t v69 = &v58[v68];
    uint64_t v70 = &v59[v68];
    uint64_t v72 = *(void *)v70;
    uint64_t v71 = *((void *)v70 + 1);
    *(void *)uint64_t v69 = v72;
    *((void *)v69 + 1) = v71;
    swift_bridgeObjectRelease();
    uint64_t v73 = v61[8];
    uint64_t v74 = &v58[v73];
    uint64_t v75 = &v59[v73];
    uint64_t v77 = *(void *)v75;
    uint64_t v76 = *((void *)v75 + 1);
    *(void *)uint64_t v74 = v77;
    *((void *)v74 + 1) = v76;
    swift_bridgeObjectRelease();
    v62(&v58[v61[9]], &v59[v61[9]], v16);
    uint64_t v78 = v61[10];
    uint64_t v79 = &v58[v78];
    uint64_t v80 = &v59[v78];
    uint64_t v82 = *(void *)v80;
    uint64_t v81 = *((void *)v80 + 1);
    *(void *)uint64_t v79 = v82;
    *((void *)v79 + 1) = v81;
    swift_bridgeObjectRelease();
    v58[v61[11]] = v59[v61[11]];
    uint64_t v83 = v61[12];
    uint64_t v84 = &v58[v83];
    uint64_t v85 = &v59[v83];
    uint64_t v87 = *(void *)v85;
    uint64_t v86 = *((void *)v85 + 1);
    *(void *)uint64_t v84 = v87;
    *((void *)v84 + 1) = v86;
    swift_bridgeObjectRelease();
    uint64_t v220 = (void (*)(uint64_t, char *, uint64_t))v62;
    v62(&v58[v61[13]], &v59[v61[13]], v16);
    *(void *)&v58[v61[14]] = *(void *)&v59[v61[14]];
    uint64_t v88 = v61[15];
    uint64_t v89 = &v58[v88];
    uint64_t v90 = &v59[v88];
    uint64_t v92 = *(void *)v90;
    uint64_t v91 = *((void *)v90 + 1);
    *(void *)uint64_t v89 = v92;
    *((void *)v89 + 1) = v91;
    swift_bridgeObjectRelease();
    *(void *)&v58[v61[16]] = *(void *)&v59[v61[16]];
    v58[v61[17]] = v59[v61[17]];
    uint64_t v93 = v61[18];
    uint64_t v94 = &v58[v93];
    uint64_t v95 = &v59[v93];
    uint64_t v97 = *(void *)v95;
    uint64_t v96 = *((void *)v95 + 1);
    *(void *)uint64_t v94 = v97;
    *((void *)v94 + 1) = v96;
    swift_bridgeObjectRelease();
    uint64_t v98 = v61[19];
    uint64_t v99 = &v58[v98];
    uint64_t v100 = &v59[v98];
    uint64_t v102 = *(void *)v100;
    uint64_t v101 = *((void *)v100 + 1);
    *(void *)uint64_t v99 = v102;
    *((void *)v99 + 1) = v101;
    swift_bridgeObjectRelease();
    uint64_t v103 = v61[20];
    uint64_t v104 = &v58[v103];
    __int128 v105 = &v59[v103];
    uint64_t v107 = *(void *)v105;
    uint64_t v106 = *((void *)v105 + 1);
    *(void *)uint64_t v104 = v107;
    *((void *)v104 + 1) = v106;
    swift_bridgeObjectRelease();
    uint64_t v108 = v61[21];
    uint64_t v109 = &v58[v108];
    uint64_t v110 = &v59[v108];
    uint64_t v112 = *(void *)v110;
    uint64_t v111 = *((void *)v110 + 1);
    *(void *)uint64_t v109 = v112;
    *((void *)v109 + 1) = v111;
    swift_bridgeObjectRelease();
    uint64_t v113 = v61[22];
    uint64_t v114 = &v59[v113];
    uint64_t v222 = (uint64_t)&v58[v113];
    int v115 = sub_10001D158((uint64_t)&v58[v113], 1LL, v16);
    int v116 = sub_10001D158((uint64_t)v114, 1LL, v16);
    if (v115)
    {
      if (v116)
      {
        size_t v117 = *(void *)(*(void *)(sub_1000175B0((uint64_t *)&unk_1002AFCD0) - 8) + 64LL);
        uint64_t v118 = (void *)v222;
LABEL_37:
        memcpy(v118, v114, v117);
        goto LABEL_40;
      }

      (*(void (**)(uint64_t, char *, uint64_t))(v221 + 32))(v222, v114, v16);
      sub_10001762C(v222, 0LL, 1LL, v16);
    }

    else
    {
      if (v116)
      {
        (*(void (**)(uint64_t, uint64_t))(v221 + 8))(v222, v16);
        size_t v117 = *(void *)(*(void *)(sub_1000175B0((uint64_t *)&unk_1002AFCD0) - 8) + 64LL);
        uint64_t v118 = (void *)v222;
        goto LABEL_37;
      }

      v220(v222, v114, v16);
    }

uint64_t sub_1001A7A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001A7A3C);
}

uint64_t sub_1001A7A3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == (_DWORD)a2)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(int *)(a3 + 52);
    }

    else
    {
      uint64_t v9 = sub_1000175B0(&qword_1002AB750);
      uint64_t v10 = *(int *)(a3 + 68);
    }

    return sub_10001D158(a1 + v10, a2, v9);
  }

uint64_t sub_1001A7ADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001A7AE8);
}

uint64_t sub_1001A7AE8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 3sub_100019F7C(v0 + 2) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(int *)(a4 + 52);
    }

    else
    {
      uint64_t v9 = sub_1000175B0(&qword_1002AB750);
      uint64_t v10 = *(int *)(a4 + 68);
    }

    return sub_10001762C(v5 + v10, a2, a2, v9);
  }

  return result;
}

uint64_t type metadata accessor for IAPTransaction(uint64_t a1)
{
  uint64_t result = qword_1002B8C58;
  if (!qword_1002B8C58) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IAPTransaction);
  }
  return result;
}

void sub_1001A7BBC(uint64_t a1)
{
  v6[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[1] = "\t";
  _OWORD v6[2] = &unk_10020AE38;
  v6[3] = "\t";
  void v6[4] = &unk_10020AE50;
  v6[5] = &unk_10020AE50;
  v6[6] = &unk_10020AE50;
  v6[7] = &unk_10020AE50;
  v6[8] = &unk_10020AE50;
  sub_1000A4384(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v7 = *(void *)(v2 - 8) + 64LL;
    uint64_t v8 = v7;
    uint64_t v9 = "\t";
    uint64_t v10 = &unk_10020AE68;
    sub_1001A7C84(319LL);
    if (v5 <= 0x3F)
    {
      uint64_t v11 = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 14LL, v6, a1 + 16);
    }
  }

void sub_1001A7C84(uint64_t a1)
{
  if (!qword_1002B8C68)
  {
    uint64_t v2 = sub_100018EC0(&qword_1002AA328);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1002B8C68);
    }
  }

void sub_1001A7CDC(void *a1@<X0>, void (*a2)(void *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_1000175B0(&qword_1002AB750);
  __chkstk_darwin(v6);
  sub_10001DAD0();
  uint64_t v29 = v8 - v7;
  uint64_t v9 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  __chkstk_darwin(v9);
  sub_10001DAD0();
  uint64_t v12 = v11 - v10;
  *(void *)a3 = 0LL;
  *(void *)(a3 + 8) = 0LL;
  *(_BYTE *)(a3 + sub_100195C94(v0 + 16) = 1;
  *(void *)(a3 + 24) = 0x65646F6358LL;
  *(void *)(a3 + 3sub_100019F7C(v0 + 2) = 0xE500000000000000LL;
  *(void *)(a3 + 4sub_10019B2E8(v0, 0) = 0LL;
  *(_BYTE *)(a3 + 48) = 1;
  uint64_t v13 = (int *)type metadata accessor for IAPTransaction(0LL);
  *(void *)(a3 + 7sub_100019F7C(v0 + 2) = 0LL;
  *(void *)(a3 + 8sub_10019B2E8(v0, 0) = 0LL;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 12sub_10019B2E8(v0, 0) = 0u;
  uint64_t v14 = a3 + v13[13];
  type metadata accessor for Date(0LL);
  sub_100093038(v14, 1LL);
  uint64_t v15 = a3 + v13[14];
  sub_100093038(v15, 1LL);
  uint64_t v16 = a3 + v13[15];
  *(void *)uint64_t v16 = 0LL;
  *(_BYTE *)(v16 + 8) = 1;
  *(_OWORD *)(a3 + v13[16]) = xmmword_1001F6080;
  uint64_t v17 = a3 + v13[17];
  uint64_t v18 = sub_1000175B0(&qword_1002AA328);
  sub_10001762C(v17, 1LL, 1LL, v18);
  *(void *)(a3 + 56) = sub_1000B3DEC();
  *(void *)(a3 + 64) = v19;
  *(void *)(a3 + 88) = sub_1000B3DDC();
  *(void *)(a3 + 96) = v20;
  sub_1000B52F0();
  *(void *)(a3 + 104) = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  *(void *)(a3 + 11sub_100019F7C(v0 + 2) = v21;
  sub_1000B85BC(8u);
  char v23 = v22;
  uint64_t v24 = 0LL;
  uint64_t v25 = 0LL;
  if ((v23 & 1) == 0) {
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  }
  *(void *)(a3 + 12sub_10019B2E8(v0, 0) = v24;
  *(void *)(a3 + sub_100081CEC(v0 + 128) = v25;
  double v26 = sub_1000B4050();
  Date.init(timeIntervalSinceReferenceDate:)(v26);
  sub_100093038(v12, 0LL);
  sub_1001A8794(v12, v14, (uint64_t *)&unk_1002AFCD0);
  uint64_t v27 = sub_1000B85C8(0xCu);
  if ((v28 & 1) != 0)
  {
    sub_1000E4E64(v14, v15);
  }

  else
  {
    Date.init(timeIntervalSinceReferenceDate:)(*(double *)&v27);
    sub_100093038(v12, 0LL);
    sub_1001A8794(v12, v15, (uint64_t *)&unk_1002AFCD0);
  }

  *(void *)uint64_t v16 = sub_1000B5B90();
  *(_BYTE *)(v16 + 8) = 0;
  if (a2)
  {
    swift_retain();
    a2(a1);
    sub_1001A8A1C();

    sub_1001A8A1C();
    sub_1001A8794(v29, v17, &qword_1002AB750);
  }

  else
  {
  }

unint64_t sub_1001A7F98(Swift::String string)
{
  object = string._object;
  v2._unint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100274398, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xE) {
    return 14LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1001A7FE4()
{
  return 14LL;
}

uint64_t sub_1001A7FEC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001A8020 + 4 * byte_10020ADC0[a1]))( 0x64692D6D657469LL,  0xE700000000000000LL);
}

uint64_t sub_1001A8020()
{
  return 0x6D6574692D707061LL;
}

uint64_t sub_1001A8040()
{
  return 0x6D6E6F7269766E65LL;
}

unint64_t sub_1001A8060()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_1001A8134()
{
  return 0x797469746E617571LL;
}

uint64_t sub_1001A814C()
{
  return 0x2D74706965636572LL;
}

unint64_t sub_1001A816C()
{
  return 0xD000000000000013LL;
}

uint64_t sub_1001A8188(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001A81BC + 4 * byte_10020ADCE[a1]))( 0x64692D6D657469LL,  0xE700000000000000LL);
}

uint64_t sub_1001A81BC()
{
  return 0x6D6574692D707061LL;
}

uint64_t sub_1001A81DC()
{
  return 0x6D6E6F7269766E65LL;
}

unint64_t sub_1001A81FC()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_1001A82D0()
{
  return 0x797469746E617571LL;
}

uint64_t sub_1001A82E8()
{
  return 0x2D74706965636572LL;
}

unint64_t sub_1001A8308()
{
  return 0xD000000000000013LL;
}

uint64_t sub_1001A8324(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_1000175B0(&qword_1002B8CC8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10001DAD0();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100019F58(a1, v10);
  unint64_t v12 = sub_1001A8718();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for IAPTransaction.CodingKeys,  &type metadata for IAPTransaction.CodingKeys,  v12,  v10,  v11);
  LOBYTE(v3sub_10019B2E8(v0, 0) = 0;
  sub_1001A8A28();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  }
  uint64_t v13 = *v3;
  LOBYTE(v3sub_10019B2E8(v0, 0) = 1;
  KeyedEncodingContainer.encode(_:forKey:)(v13, &v30, v5);
  LOBYTE(v3sub_10019B2E8(v0, 0) = 2;
  sub_1001A8A28();
  KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v16, v17);
  sub_1001A8A04(v3[5], *((unsigned __int8 *)v3 + 48), 3);
  sub_1001A89EC(v3[7], v3[8], 4);
  sub_1001A89EC(v3[9], v3[10], 5);
  sub_1001A89EC(v3[11], v3[12], 6);
  sub_1001A89EC(v3[13], v3[14], 7);
  sub_1001A89EC(v3[15], v3[16], 8);
  uint64_t v28 = v6;
  uint64_t v18 = (int *)type metadata accessor for IAPTransaction(0LL);
  uint64_t v19 = (uint64_t)v3 + v18[13];
  LOBYTE(v3sub_10019B2E8(v0, 0) = 9;
  uint64_t v20 = type metadata accessor for Date(0LL);
  unint64_t v21 = sub_1001A8754();
  sub_1001163D4(v19, (uint64_t)&v30, v5, v20, v21);
  uint64_t v22 = (uint64_t)v3 + v18[14];
  LOBYTE(v3sub_10019B2E8(v0, 0) = 10;
  sub_1001163D4(v22, (uint64_t)&v30, v5, v20, v21);
  sub_1001A8A04(*(uint64_t *)((char *)v3 + v18[15]), *((unsigned __int8 *)v3 + v18[15] + 8), 11);
  __int128 v30 = *(_OWORD *)((char *)v3 + v18[16]);
  char v29 = 12;
  unint64_t v23 = sub_100048400();
  sub_1001163D4((uint64_t)&v30, (uint64_t)&v29, v5, (uint64_t)&type metadata for Data, v23);
  uint64_t v24 = (uint64_t)v3 + v18[17];
  LOBYTE(v3sub_10019B2E8(v0, 0) = 13;
  uint64_t v25 = sub_1000175B0(&qword_1002AA328);
  unint64_t v26 = sub_1000A8794();
  sub_1001163D4(v24, (uint64_t)&v30, v5, v25, v26);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v9, v5);
}

void sub_1001A85EC(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_1001A85F8()
{
}

uint64_t sub_1001A8600(uint64_t a1)
{
  return sub_1000B22C8(a1, *v1);
}

void sub_1001A8608(uint64_t a1)
{
}

unint64_t sub_1001A8610@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1001A7F98(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001A863C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1001A7FEC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1001A8664()
{
  return sub_1001A8188(*v0);
}

uint64_t sub_1001A866C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1001A7FE0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001A8690@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_1001A7FE4();
  *a1 = result;
  return result;
}

uint64_t sub_1001A86B4(uint64_t a1)
{
  unint64_t v2 = sub_1001A8718();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A86DC(uint64_t a1)
{
  unint64_t v2 = sub_1001A8718();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001A8704(void *a1)
{
  return sub_1001A8324(a1);
}

unint64_t sub_1001A8718()
{
  unint64_t result = qword_1002B8CD0;
  if (!qword_1002B8CD0)
  {
    unint64_t result = swift_getWitnessTable(byte_10020AFA4, &type metadata for IAPTransaction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B8CD0);
  }

  return result;
}

unint64_t sub_1001A8754()
{
  unint64_t result = qword_1002A93C8;
  if (!qword_1002A93C8)
  {
    uint64_t v1 = type metadata accessor for Date(255LL);
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_1002A93C8);
  }

  return result;
}

uint64_t sub_1001A8794(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000175B0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

uint64_t getEnumTagSinglePayload for IAPTransaction.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF3)
  {
    if (a2 + 13 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 13) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 14;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for IAPTransaction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF2) {
    return ((uint64_t (*)(void))((char *)&loc_1001A88AC + 4 * byte_10020ADE1[v4]))();
  }
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_1001A88E0 + 4 * byte_10020ADDC[v4]))();
}

uint64_t sub_1001A88E0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A88E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001A88F0LL);
  }
  return result;
}

uint64_t sub_1001A88FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001A8904LL);
  }
  *(_BYTE *)unint64_t result = a2 + 13;
  return result;
}

uint64_t sub_1001A8908(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A8910(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IAPTransaction.CodingKeys()
{
  return &type metadata for IAPTransaction.CodingKeys;
}

unint64_t sub_1001A8930()
{
  unint64_t result = qword_1002B8CD8;
  if (!qword_1002B8CD8)
  {
    unint64_t result = swift_getWitnessTable(byte_10020AF7C, &type metadata for IAPTransaction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B8CD8);
  }

  return result;
}

unint64_t sub_1001A8970()
{
  unint64_t result = qword_1002B8CE0;
  if (!qword_1002B8CE0)
  {
    unint64_t result = swift_getWitnessTable("%M\b", &type metadata for IAPTransaction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B8CE0);
  }

  return result;
}

unint64_t sub_1001A89B0()
{
  unint64_t result = qword_1002B8CE8;
  if (!qword_1002B8CE8)
  {
    unint64_t result = swift_getWitnessTable("\rM\b", &type metadata for IAPTransaction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B8CE8);
  }

  return result;
}

uint64_t sub_1001A89EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(_BYTE *)(v4 - 8sub_10019B2E8(v0, 0) = a3;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v4 - 80, v3);
}

uint64_t sub_1001A8A04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(_BYTE *)(v4 - 8sub_10019B2E8(v0, 0) = a3;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v4 - 80, v3);
}

uint64_t sub_1001A8A1C()
{
  return sub_100034E8C(v1, v0);
}

  ;
}

uint64_t sub_1001A8A3C()
{
  uint64_t v1 = v0;
  EmbeddedChannel.pipeline.getter();
  swift_retain();
  ChannelPipeline.close(mode:promise:)();
  swift_release();
  swift_release();
  return v1;
}

void sub_1001A8AA8(uint64_t a1@<X8>)
{
  if (v1[1] == v1[2])
  {
    __break(1u);
    goto LABEL_6;
  }

  uint64_t v3 = *v1;
  unsigned int v4 = sub_10002CEDC(*v1);
  if ((unint64_t)v4 >= *(void *)(v3 + 16))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v5 = v3 + ((unint64_t)v4 << 6);
  uint64_t v8 = *(void *)(v5 + 32);
  unsigned int v6 = (void *)(v5 + 32);
  uint64_t v7 = v8;
  if (v8)
  {
    uint64_t v10 = v6[6];
    uint64_t v9 = v6[7];
    uint64_t v11 = v6[4];
    uint64_t v12 = v6[5];
    uint64_t v13 = v6[2];
    uint64_t v14 = v6[3];
    uint64_t v15 = v6[1];
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v15;
    *(_DWORD *)(a1 + sub_100195C94(v0 + 16) = v13;
    *(_WORD *)(a1 + 2sub_10019B2E8(v0, 0) = WORD2(v13);
    *(_BYTE *)(a1 + 2sub_100019F7C(v0 + 2) = BYTE6(v13);
    *(void *)(a1 + 24) = v14;
    *(void *)(a1 + 3sub_100019F7C(v0 + 2) = v11;
    *(void *)(a1 + 4sub_10019B2E8(v0, 0) = v12;
    *(void *)(a1 + 48) = v10;
    *(void *)(a1 + 56) = v9;
    swift_retain();
    sub_100041B5C();
    sub_10009B678();
    sub_100034980(v12, v10);
    sub_10002E3A0();
    return;
  }

void sub_1001A8B7C(_OWORD *a1@<X8>)
{
  uint64_t v2 = v1[1];
  uint64_t v3 = v1[2];
  uint64_t v4 = v3 - v2;
  if (v3 == v2)
  {
    __break(1u);
  }

  else
  {
    if (v3 < v2) {
      v4 += *(void *)(*v1 + 16LL);
    }
    sub_1001658D0(v1[1], v4, v1[1]);
    sub_10002D070(v7);
    __int128 v6 = v7[1];
    *a1 = v7[0];
    a1[1] = v6;
    a1[2] = v8[0];
    *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)v8 + 9);
    sub_10002E5CC(1LL);
  }

void sub_1001A8C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1001A8C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), void (*a6)(void))
{
}

uint64_t sub_1001A8C60(uint64_t *a1)
{
  uint64_t v3 = v2;
  EmbeddedChannel.pipeline.getter();
  swift_retain();
  ChannelPipeline.writeAndFlush(_:promise:)(a1, v3);
  swift_release();
  swift_release();
  return v3;
}

double sub_1001A8CCC@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>)
{
  if ((ValueMetadata *)((char *)&type metadata for Any + 8) == &type metadata for ByteBuffer)
  {
    sub_1000346EC(v9, (uint64_t)&v22);
    if (v26)
    {
      sub_1000842A0((uint64_t)&v22);
      goto LABEL_20;
    }

    if ((v22 & 0x8000000000000000LL) != 0)
    {
      sub_100018F04(v22);
      goto LABEL_20;
    }

    __int128 v29 = v22;
    int v30 = v23;
    __int16 v31 = WORD2(v23);
    char v32 = (v23 | ((unint64_t)(WORD2(v23) | (BYTE6(v23) << 16)) << 32)) >> 48;
    uint64_t v14 = &type metadata for ByteBuffer;
    uint64_t v18 = (char *)&type metadata for Any + 8;
    uint64_t v19 = &v29;
    goto LABEL_13;
  }

  if ((ValueMetadata *)((char *)&type metadata for Any + 8) == &type metadata for FileRegion)
  {
    NIOAny.tryAsFileRegion()(a1, a2, a3, a4, a5, a6, a7, a8);
    if (!v11) {
      goto LABEL_20;
    }
    *(void *)&__int128 v22 = v11;
    *((void *)&v22 + 1) = v12;
    LODWORD(v23) = v13;
    WORD2(v23) = WORD2(v13);
    BYTE6(v23) = BYTE6(v13);
    uint64_t v14 = &type metadata for FileRegion;
    goto LABEL_10;
  }

  if ((ValueMetadata *)((char *)&type metadata for Any + 8) == &type metadata for IOData)
  {
    NIOAny.tryAsIOData()(a1, a2, a3, a4, a5, a6, a7, a8);
    if ((~v15 & 0xF000000000000007LL) == 0) {
      goto LABEL_20;
    }
    *(void *)&__int128 v22 = v15;
    *((void *)&v22 + 1) = v16;
    LODWORD(v23) = v17;
    BYTE6(v23) = BYTE6(v17);
    WORD2(v23) = WORD2(v17);
    uint64_t v14 = &type metadata for IOData;
LABEL_10:
    uint64_t v18 = (char *)&type metadata for Any + 8;
    uint64_t v19 = &v22;
LABEL_13:
    uint64_t v20 = a9;
LABEL_14:
    swift_dynamicCast(v20, v19, v14, v18, 7LL);
    return result;
  }

  if ((_UNKNOWN *)sub_1000175B0(&qword_1002AA4B8) != (_UNKNOWN *)((char *)&type metadata for Any + 8))
  {
    sub_10002D43C(a9);
    return result;
  }

  NIOAny.tryAsByteEnvelope()((uint64_t)&v29);
  sub_1000925C4((uint64_t)&v29, (uint64_t)&v22, &qword_1002AE328);
  if (*((void *)&v22 + 1))
  {
    v27[0] = v22;
    v27[1] = v23;
    v27[2] = v24;
    uint64_t v28 = v25;
    uint64_t v14 = (ValueMetadata *)((char *)&type metadata for Any + 8);
    uint64_t v19 = v27;
    uint64_t v20 = a9;
    uint64_t v18 = (char *)&type metadata for Any + 8;
    goto LABEL_14;
  }

uint64_t sub_1001A8EA8(unint64_t a1, unint64_t a2)
{
  BOOL v2 = a2 >= a1;
  if (!a1) {
    BOOL v2 = 0;
  }
  return !a2 || v2;
}

BOOL sub_1001A8EC8(uint64_t a1, uint64_t a2)
{
  return (v2 & 1) == 0;
}

BOOL sub_1001A8EFC(uint64_t a1, uint64_t a2)
{
  return (static ScheduledTask.< infix(_:_:)(a2, a1) & 1) == 0;
}

BOOL sub_1001A8F34(uint64_t a1, uint64_t a2)
{
  return a2 >= a1;
}

void sub_1001A8F40(uint64_t a1, uint64_t a2)
{
  if (a2 < 0 || a1 < 0)
  {
    sub_100034FD0();
    sub_100083058( (uint64_t)"Fatal error",  v2,  v3,  (uint64_t)"Negative value is not representable",  v4,  v5,  (uint64_t)"Swift/Integers.swift");
    __break(1u);
  }

  else
  {
    sub_1000078BC();
  }

void sub_1001A8F8C(uint64_t a1, uint64_t a2)
{
  if (a2 < 0 || a1 < 0)
  {
    sub_100034FD0();
    sub_100083058( (uint64_t)"Fatal error",  v2,  v3,  (uint64_t)"Negative value is not representable",  v4,  v5,  (uint64_t)"Swift/Integers.swift");
    __break(1u);
  }

  else
  {
    sub_1000078BC();
  }

uint64_t sub_1001A8FD8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1001A8FF8()
{
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v2 + 48);
  uint64_t ObjectType = swift_getObjectType(*(void *)(v2 + 40));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 80))( v6,  v4,  v1,  v0,  ObjectType,  v7);
  uint64_t v9 = sub_100019310((uint64_t)&unk_1002901F8, 33LL);
  *(void *)(v9 + sub_100195C94(v0 + 16) = 0LL;
  *(void *)(v9 + 24) = 0LL;
  *(_BYTE *)(v9 + 3sub_100019F7C(v0 + 2) = -1;
  uint64_t v10 = sub_1000175B0(&qword_1002B0EA0);
  sub_100019310(v10, 40LL);
  sub_1001AE808();
  swift_retain();
  sub_10002A674();
  sub_10001EDE0();
  sub_100101180();
  sub_100106714(1LL);
  Lock.unlock()();
  uint64_t result = sub_1000487CC(v9 + 16, (uint64_t)v14);
  int v12 = *(unsigned __int8 *)(v9 + 32);
  if (v12 == 255)
  {
    __break(1u);
  }

  else
  {
    if ((v12 & 1) != 0)
    {
      uint64_t v13 = swift_errorRetain(*(void *)(v9 + 16));
      swift_willThrow(v13);
    }

    else
    {
      sub_10009B28C();
    }

    sub_10002A5A4();
    sub_10002A524();
    return sub_1001AE6F8();
  }

  return result;
}

uint64_t sub_1001A913C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001A9158(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000FF778);
}

uint64_t sub_1001A9158( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v7 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(v7 + 32));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 80))( v12,  v10,  v6,  v5,  ObjectType,  v13);
  uint64_t v15 = sub_100019310((uint64_t)&unk_100290220, 25LL);
  *(void *)(v15 + sub_100195C94(v0 + 16) = 0LL;
  *(_BYTE *)(v15 + 24) = -1;
  uint64_t v16 = sub_1000175B0(&qword_1002B0EA0);
  sub_100019310(v16, 40LL);
  sub_1001AE808();
  uint64_t v18 = v17;
  swift_retain();
  sub_10002A674();
  uint64_t v19 = sub_10001EDE0();
  a5(v19, v18, v15, v7);
  sub_100106714(1LL);
  Lock.unlock()();
  uint64_t result = sub_1000487CC(v15 + 16, (uint64_t)v23);
  int v21 = *(unsigned __int8 *)(v15 + 24);
  if (v21 == 255)
  {
    __break(1u);
  }

  else
  {
    if ((v21 & 1) != 0)
    {
      uint64_t v22 = sub_100171EB4();
      swift_willThrow(v22);
    }

    sub_10002A5A4();
    return swift_release();
  }

  return result;
}

void sub_1001A9288()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  if ((v2 & 0x2000000000000000LL) == 0)
  {
    uint64_t v3 = v1 & 0xFFFFFFFFFFFFLL;
    if ((v1 & 0xFFFFFFFFFFFFLL) != 0) {
      goto LABEL_5;
    }
    __break(1u);
  }

  uint64_t v3 = HIBYTE(v2) & 0xF;
  if (!v3)
  {
    __break(1u);
    return;
  }

void sub_1001A92DC()
{
  if (*(void *)(*(void *)v0 + 16LL))
  {
    sub_1001ADA34();
    if (!v1) {
      sub_1001AD90C(*(void *)(*(void *)v0 + 16LL) - 1LL);
    }
  }

  else
  {
    __break(1u);
  }

void sub_1001A9318()
{
}

void sub_1001A932C()
{
  if (*(void *)(*(void *)v1 + 16LL))
  {
    sub_100092F74();
    sub_1001ADA94(v3);
    if (!v4) {
      sub_1001AD980(*(void *)(*(void *)v1 + 16LL) - 1LL, v2, v0);
    }
    sub_1000193B8();
  }

  else
  {
    __break(1u);
  }

unint64_t sub_1001A937C(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)(a2 + 16) > result)
  {
    return swift_retain(*(void *)(a2 + 8 * result + 32));
  }

  __break(1u);
  return result;
}

void sub_1001A93A0(uint64_t a1, char a2)
{
}

void sub_1001A93B4( uint64_t a1, char a2, void (*a3)(uint64_t), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v7 = v4;
  uint64_t v10 = sub_10002A444();
  sub_1001AE6A8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  v11,  v12,  v13,  v10);
  sub_10002A718(v4 + 16, (uint64_t)v16, 1LL);
  if (*(unsigned __int8 *)(v4 + 24) == 255)
  {
    uint64_t v14 = *(void *)(v4 + 16);
    *(void *)(v7 + sub_100195C94(v0 + 16) = a1;
    *(_BYTE *)(v7 + 24) = a2 & 1;
    a3(a1);
    a4(v14, 255LL);
    sub_10002A718(v7 + 48, (uint64_t)&v15, 1LL);
    *(void *)(v7 + 56) = 0LL;
    *(void *)(v7 + 64) = 0LL;
    *(void *)(v7 + 48) = 0LL;
    sub_1001AE7D4();
    sub_1001AE7B8();
  }

  sub_1001AE704();
  sub_10006B958();
}

void sub_1001A9480(uint64_t a1, char a2)
{
}

void sub_1001A9494(uint64_t a1, uint64_t a2, char a3)
{
}

void sub_1001A94A8(uint64_t a1, char a2)
{
}

void sub_1001A94BC(uint64_t a1, char a2)
{
}

void sub_1001A94D0(uint64_t a1, char a2)
{
}

void sub_1001A94E4(uint64_t a1, char a2)
{
}

void sub_1001A94F8(uint64_t a1, uint64_t a2, char a3)
{
}

void sub_1001A950C( uint64_t a1, uint64_t a2, char a3, void (*a4)(uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = v5;
  uint64_t v12 = *(void *)(v5 + 48);
  uint64_t v13 = sub_10002A444();
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  769LL,  v13,  v12);
  sub_10002A718(v5 + 16, (uint64_t)v19, 1LL);
  if (*(unsigned __int8 *)(v5 + 32) == 255)
  {
    uint64_t v14 = *(void *)(v5 + 16);
    uint64_t v15 = *(void *)(v8 + 24);
    *(void *)(v8 + sub_100195C94(v0 + 16) = a1;
    *(void *)(v8 + 24) = a2;
    *(_BYTE *)(v8 + 3sub_100019F7C(v0 + 2) = a3 & 1;
    a4(a1, a2);
    a5(v14, v15, 255LL);
    sub_10002A718(v8 + 56, (uint64_t)&v18, 1LL);
    uint64_t v16 = *(void *)(v8 + 56);
    uint64_t v17 = *(void *)(v8 + 64);
    *(void *)(v8 + 64) = 0LL;
    *(void *)(v8 + 7sub_100019F7C(v0 + 2) = 0LL;
    *(void *)(v8 + 56) = 0LL;
    sub_100034E9C(v16, v17);
    swift_bridgeObjectRetain();
    sub_1001AE7F0();
    swift_bridgeObjectRelease();
  }

  sub_100019328();
}

void sub_1001A9618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = v3[6];
  uint64_t v8 = sub_10002A444();
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  769LL,  v8,  v7);
  sub_10002A718((uint64_t)(v3 + 2), (uint64_t)v17, 1LL);
  unint64_t v9 = v3[4];
  if (HIBYTE(v9) == 255)
  {
    v3[2] = a1;
    v3[3] = a2;
    v3[4] = a3 & 0x1FFFFFFFFFFFFFFLL;
    sub_10009AEA0(a1, a2, a3, HIBYTE(a3) & 1);
    uint64_t v10 = sub_1001AE6F8();
    sub_1001AE528(v10, v11, v9);
    sub_10002A718((uint64_t)(v3 + 7), (uint64_t)&v16, 1LL);
    v3[8] = 0LL;
    v3[9] = 0LL;
    v3[7] = 0LL;
    uint64_t v12 = sub_1001AE6F8();
    sub_100034E9C(v12, v13);
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_1001AE6F8();
    sub_100034E8C(v14, v15);
    swift_bridgeObjectRelease();
  }

  sub_1001AE6F8();
  sub_10006B958();
}

void sub_1001A971C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = sub_10002A444();
  sub_1001AE6A8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  v10,  v11,  v12,  v9);
  sub_10002A718((uint64_t)(v4 + 2), (uint64_t)v18, 1LL);
  unint64_t v13 = v4[5];
  if (HIBYTE(v13) == 255)
  {
    void v4[2] = a1;
    void v4[3] = a2;
    v4[4] = a3;
    void v4[5] = a4 & 0x1FFFFFFFFFFFFFFLL;
    sub_10009ADD8(a1, a2, a3, a4, HIBYTE(a4) & 1);
    uint64_t v14 = sub_1001AE704();
    sub_1001AE510(v14, v15, v16, v13);
    sub_10002A718((uint64_t)(v4 + 8), (uint64_t)&v17, 1LL);
    char v4[9] = 0LL;
    v4[10] = 0LL;
    v4[8] = 0LL;
    sub_1001AE7D4();
    sub_1001AE7B8();
  }

  sub_1001AE704();
  sub_100019328();
}

void sub_1001A9804(uint64_t a1, char a2)
{
}

void sub_1001A9818()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  BOOL v3 = __OFSUB__(v2, v1);
  uint64_t v4 = v2 - v1;
  if (v4 < 0 != v3) {
    v4 += *(void *)(*(void *)v0 + 16LL);
  }
  BOOL v5 = v4 < 1;
  uint64_t v6 = v4 - 1;
  if (!v5)
  {
    *(void *)(v0 + 24) = v6;
    *(_BYTE *)(v0 + 3sub_100019F7C(v0 + 2) = 0;
  }

void sub_1001A9848()
{
  unint64_t v1 = *(void *)(v0 + 8);
  if ((v1 & 0x8000000000000000LL) != 0)
  {
    sub_100034FD0();
    BOOL v3 = "Fatal error";
    uint64_t v4 = "Negative value is not representable";
    BOOL v5 = "Swift/Integers.swift";
    uint64_t v6 = 11LL;
    uint64_t v7 = 2LL;
    uint64_t v8 = 35LL;
  }

  else
  {
    if (!HIDWORD(v1))
    {
      sub_1000078BC();
      return;
    }

    sub_100034FD0();
    sub_100035144();
  }

  sub_100035124((uint64_t)v3, v6, v7, (uint64_t)v4, v8, v2, (uint64_t)v5);
  __break(1u);
}

uint64_t sub_1001A98CC( uint64_t result, void (*a2)(void), uint64_t (*a3)(unint64_t, unint64_t), uint64_t (*a4)(unint64_t, unint64_t))
{
  if (result + 0x4000000000000000LL < 0)
  {
LABEL_13:
    __break(1u);
  }

  else
  {
    uint64_t v6 = v4;
    unint64_t v7 = result;
    while (!__OFADD__(2 * v7, 2LL))
    {
      uint64_t v8 = *v6;
      uint64_t v9 = *(void *)(*v6 + 16);
      unint64_t v10 = v7;
      if (v9 > (uint64_t)((2 * v7) | 1))
      {
        unint64_t v11 = sub_1001A937C((2 * v7) | 1, *v6);
        unint64_t v12 = sub_1001A937C(v7, v8);
        a2(0LL);
        char v13 = a3(v11, v12);
        sub_10009B4FC();
        uint64_t result = sub_10001EDD8();
        if ((v13 & 1) != 0) {
          unint64_t v10 = (2 * v7) | 1;
        }
        else {
          unint64_t v10 = v7;
        }
      }

      if (v9 > (uint64_t)(2 * v7 + 2))
      {
        unint64_t v14 = sub_1001A937C(2 * v7 + 2, v8);
        unint64_t v15 = sub_1001A937C(v10, v8);
        a2(0LL);
        char v16 = a3(v14, v15);
        sub_10001EDD8();
        uint64_t result = sub_10009B770();
        if ((v16 & 1) != 0) {
          unint64_t v10 = 2 * v7 + 2;
        }
      }

      if (v10 == v7) {
        return result;
      }
      uint64_t result = a4(v7, v10);
      unint64_t v7 = v10;
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_1001A9A2C(uint64_t a1)
{
  return sub_1001A98CC( a1,  (void (*)(void))type metadata accessor for ScheduledTask,  (uint64_t (*)(unint64_t, unint64_t))static ScheduledTask.< infix(_:_:),  (uint64_t (*)(unint64_t, unint64_t))sub_1000470A0);
}

uint64_t sub_1001A9A48(unint64_t a1, uint64_t a2)
{
  unint64_t v4 = a1;
  uint64_t v5 = *v2;
  unint64_t v6 = sub_1001A937C(a1, *v2);
  type metadata accessor for ScheduledTask();
  char v7 = static ScheduledTask.< infix(_:_:)(v6, a2);
  swift_release(v6);
  if ((v7 & 1) != 0) {
    goto LABEL_20;
  }
  if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
  {
    sub_1000F2440();
    uint64_t v5 = v8;
  }

  if ((v4 & 0x8000000000000000LL) != 0) {
    goto LABEL_18;
  }
  if (*(void *)(v5 + 16) <= v4)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000033LL,  0x80000001002193E0LL,  "ASOctaneSupportXPCService/Heap.swift",  36LL,  2LL);
    __break(1u);
    return result;
  }

  uint64_t v9 = v5 + 32;
  uint64_t v10 = *(void *)(v5 + 32 + 8 * v4);
  swift_retain();
  uint64_t result = swift_release(v10);
  *(void *)(v5 + 32 + 8 * v4) = a2;
  *uint64_t v2 = v5;
  if (v4)
  {
    while (1)
    {
      unint64_t v12 = *(void *)(v5 + 16);
      if (v4 >= v12) {
        break;
      }
      unint64_t v13 = v4 - 1;
      unint64_t v14 = (v4 - 1) >> 1;
      if (v14 >= v12) {
        goto LABEL_16;
      }
      uint64_t result = static ScheduledTask.< infix(_:_:)(*(void *)(v9 + 8 * v4), *(void *)(v9 + 8 * v14));
      if ((result & 1) == 0) {
        return result;
      }
      if (v4 != v14)
      {
        uint64_t v15 = *(void *)(v9 + 8 * v4);
        *(void *)(v9 + 8 * v4) = *(void *)(v9 + 8 * v14);
        unint64_t v16 = *(void *)(v5 + 16);
        swift_retain();
        if (v14 >= v16) {
          goto LABEL_17;
        }
        uint64_t v17 = *(void *)(v9 + 8 * v14);
        *(void *)(v9 + 8 * v14) = v15;
        uint64_t result = swift_release(v17);
        *uint64_t v2 = v5;
      }

      unint64_t v4 = v14;
      if (v13 <= 1) {
        return result;
      }
    }

    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  return result;
}

uint64_t sub_1001A9BDC(unint64_t a1, uint64_t a2)
{
  return sub_1001A9BF8( a1,  a2,  (void (*)(void))type metadata accessor for ScheduledTask,  (uint64_t (*)(unint64_t, uint64_t))static ScheduledTask.< infix(_:_:),  sub_1000F2BE4);
}

uint64_t sub_1001A9BF8( unint64_t a1, uint64_t a2, void (*a3)(void), uint64_t (*a4)(unint64_t, uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t v52 = a5;
  uint64_t v8 = v5;
  unint64_t v10 = a1;
  unint64_t v11 = sub_1001A937C(a1, *v5);
  a3(0LL);
  char v12 = a4(v11, a2);
  sub_10009B4FC();
  if ((v12 & 1) != 0) {
    goto LABEL_26;
  }
  uint64_t v13 = *v8;
  uint64_t v14 = sub_10006B92C();
  uint64_t *v8 = v13;
  if ((v14 & 1) == 0)
  {
    uint64_t v22 = sub_1001AE7FC(v14, v15, v16, v17, v18, v19, v20, v21, v49, v50, v51, v52);
    sub_1001AE734(v22);
  }

  if ((v10 & 0x8000000000000000LL) != 0) {
    goto LABEL_24;
  }
  if (*(void *)(v13 + 16) <= v10)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    sub_1001AE6D8();
    uint64_t result = sub_1001AE5B0( (uint64_t)"Fatal error",  v46,  v47,  v48,  0x80000001002193E0LL,  (uint64_t)"ASOctaneSupportXPCService/Heap.swift");
    __break(1u);
    return result;
  }

  sub_10009B678();
  sub_100024F0C();
  *(void *)(v13 + 8 * v10 + 3sub_100019F7C(v0 + 2) = a2;
  uint64_t result = sub_1001AE5CC();
  if (v10)
  {
    while (1)
    {
      uint64_t v24 = *v8;
      unint64_t v25 = *(void *)(*v8 + 16);
      if (v10 >= v25) {
        break;
      }
      unint64_t v26 = v10 - 1;
      unint64_t v27 = (v10 - 1) >> 1;
      if (v27 >= v25) {
        goto LABEL_21;
      }
      uint64_t v28 = v24 + 32;
      uint64_t result = a4(*(void *)(v24 + 32 + 8 * v10), *(void *)(v24 + 32 + 8 * v27));
      if ((result & 1) == 0) {
        return result;
      }
      if (v10 != v27)
      {
        uint64_t v29 = *(void *)(v28 + 8 * v10);
        uint64_t v30 = *(void *)(v28 + 8 * v27);
        sub_10009B678();
        ChannelPipeline.syncOperations.getter();
        char v31 = sub_100138778();
        uint64_t *v8 = v24;
        if ((v31 & 1) == 0)
        {
          uint64_t v24 = v52(v24);
          uint64_t *v8 = v24;
        }

        if (v10 >= *(void *)(v24 + 16)) {
          goto LABEL_22;
        }
        unint64_t v32 = v24 + 8 * v10;
        uint64_t v33 = *(void *)(v32 + 32);
        *(void *)(v32 + 3sub_100019F7C(v0 + 2) = v30;
        swift_release(v33);
        sub_1001AE5CC();
        uint64_t v34 = *v8;
        uint64_t v35 = sub_10006B92C();
        uint64_t *v8 = v34;
        if ((v35 & 1) == 0)
        {
          uint64_t v43 = sub_1001AE7FC(v35, v36, v37, v38, v39, v40, v41, v42, v49, v50, v51, v52);
          sub_1001AE734(v43);
        }

        if (v27 >= *(void *)(v34 + 16)) {
          goto LABEL_23;
        }
        unint64_t v44 = v34 + 8 * v27;
        uint64_t v45 = *(void *)(v44 + 32);
        *(void *)(v44 + 3sub_100019F7C(v0 + 2) = v29;
        swift_release(v45);
        uint64_t result = sub_1001AE5CC();
      }

      unint64_t v10 = (v10 - 1) >> 1;
      if (v26 <= 1) {
        return result;
      }
    }

    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  return result;
}

uint64_t sub_1001A9DE0(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4) {
    return 0LL;
  }
  unint64_t v6 = sub_1001A937C(a1, v3);
  unint64_t v7 = v4 - 1;
  if (!v7) {
    goto LABEL_10;
  }
  unint64_t v8 = sub_1001A937C(a1, v3);
  unint64_t v9 = sub_1001A937C(v7, v3);
  swift_release();
  swift_release();
  if (v8 == v9) {
    goto LABEL_10;
  }
  uint64_t v10 = *v2;
  unint64_t v11 = sub_1001A937C(a1, *v2);
  unint64_t v12 = sub_1001A937C(*(void *)(v10 + 16) - 1LL, v10);
  type metadata accessor for EmbeddedScheduledTask();
  sub_1001AA2D4(v11, v12);
  char v14 = v13;
  swift_release();
  swift_release();
  uint64_t v15 = *v2;
  unint64_t v16 = sub_1001A937C(*(void *)(*v2 + 16) - 1LL, *v2);
  if ((v14 & 1) == 0)
  {
    sub_1001A9BF8( a1,  v16,  (void (*)(void))type metadata accessor for EmbeddedScheduledTask,  (uint64_t (*)(unint64_t, uint64_t))sub_1001AA2D4,  sub_1000F2BE4);
    swift_release();
LABEL_10:
    sub_1001A932C();
    swift_release();
    return v6;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native(v15);
  *uint64_t v2 = v15;
  if ((result & 1) == 0)
  {
    uint64_t result = sub_1000F2BE4(v15);
    uint64_t v15 = result;
    *uint64_t v2 = result;
  }

  if ((a1 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)(v15 + 16) > a1)
  {
    uint64_t v18 = swift_release();
    *(void *)(v15 + 8 * a1 + 3sub_100019F7C(v0 + 2) = v16;
    specialized ContiguousArray._endMutation()(v18);
    sub_1001A932C();
    swift_release();
    sub_1001A98CC( a1,  (void (*)(void))type metadata accessor for EmbeddedScheduledTask,  (uint64_t (*)(unint64_t, unint64_t))sub_1001AA2D4,  (uint64_t (*)(unint64_t, unint64_t))sub_1000470A0);
    return v6;
  }

  __break(1u);
  return result;
}

void sub_1001A9FD8(unint64_t a1)
{
  uint64_t v4 = v1;
  uint64_t v5 = *v1;
  uint64_t v6 = *(void *)(*v1 + 16);
  if (!v6) {
    goto LABEL_11;
  }
  sub_1001A937C(a1, v5);
  unint64_t v8 = v6 - 1;
  if (v6 == 1) {
    goto LABEL_10;
  }
  type metadata accessor for ScheduledTask();
  unint64_t v9 = sub_1001AE604();
  swift_release(v9);
  sub_10009B4FC();
  if (v2 == v3) {
    goto LABEL_10;
  }
  unint64_t v10 = sub_1001AE604();
  char v11 = static ScheduledTask.< infix(_:_:)(v10, v3);
  sub_10002A7BC();
  sub_10009B4FC();
  unint64_t v12 = sub_1001A937C(v8, v5);
  if ((v11 & 1) == 0)
  {
    sub_1001A9A48(a1, v12);
    sub_10001ED6C();
LABEL_10:
    sub_1001A92DC();
    swift_release(v15);
    goto LABEL_11;
  }

  if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
  {
    sub_1000F2440();
    uint64_t v5 = v13;
  }

  if ((a1 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)(v5 + 16) > a1)
  {
    sub_10009B434();
    *(void *)(v5 + 8 * a1 + 3sub_100019F7C(v0 + 2) = v12;
    *uint64_t v4 = v5;
    sub_1001A92DC();
    swift_release(v14);
    sub_1001A98CC( a1,  (void (*)(void))type metadata accessor for ScheduledTask,  (uint64_t (*)(unint64_t, unint64_t))static ScheduledTask.< infix(_:_:),  (uint64_t (*)(unint64_t, unint64_t))sub_10004727C);
LABEL_11:
    sub_100023E74();
    return;
  }

  __break(1u);
}

void sub_1001AA10C(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4) {
    goto LABEL_11;
  }
  sub_1001A937C(a1, v3);
  unint64_t v6 = v4 - 1;
  if (!v6) {
    goto LABEL_10;
  }
  unint64_t v7 = sub_1001AE870();
  unint64_t v8 = sub_1001A937C(v6, v3);
  sub_10001ED6C();
  sub_100024F0C();
  if (v7 == v8) {
    goto LABEL_10;
  }
  unint64_t v9 = sub_1001AE870();
  unint64_t v10 = sub_1001AE714();
  type metadata accessor for ScheduledTask();
  char v11 = static ScheduledTask.< infix(_:_:)(v9, v10);
  sub_10002A524();
  sub_10001ED6C();
  uint64_t v12 = *v2;
  unint64_t v13 = sub_1001AE714();
  if ((v11 & 1) == 0)
  {
    sub_1001A9BF8( a1,  v13,  (void (*)(void))type metadata accessor for ScheduledTask,  (uint64_t (*)(unint64_t, uint64_t))static ScheduledTask.< infix(_:_:),  sub_1000F2BE4);
    sub_10002A524();
LABEL_10:
    sub_1001A932C();
    swift_release(v17);
    goto LABEL_11;
  }

  char v14 = sub_10006B92C();
  *uint64_t v2 = v12;
  if ((v14 & 1) == 0)
  {
    uint64_t v12 = sub_1000F2BE4(v12);
    *uint64_t v2 = v12;
  }

  if ((a1 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)(v12 + 16) > a1)
  {
    uint64_t v15 = sub_10009B434();
    *(void *)(v12 + 8 * a1 + 3sub_100019F7C(v0 + 2) = v13;
    specialized ContiguousArray._endMutation()(v15);
    sub_1001A932C();
    swift_release(v16);
    sub_1001A98CC( a1,  (void (*)(void))type metadata accessor for ScheduledTask,  (uint64_t (*)(unint64_t, unint64_t))static ScheduledTask.< infix(_:_:),  (uint64_t (*)(unint64_t, unint64_t))sub_1000470A0);
LABEL_11:
    sub_100023E74();
    return;
  }

  __break(1u);
}

uint64_t sub_1001AA2B0()
{
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

void sub_1001AA2D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a2 + 32);
  if (v2 != v3 && (v2 < 0 || v3 < 0))
  {
    sub_100034FD0();
    sub_100083058( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"Negative value is not representable",  v6,  v7,  (uint64_t)"Swift/Integers.swift");
    __break(1u);
  }

  else
  {
    sub_1000078BC();
  }

void sub_1001AA33C(uint64_t *a1, uint64_t *a2)
{
}

BOOL sub_1001AA348(uint64_t *a1, uint64_t *a2)
{
  return sub_1001A8EC8(*a1, *a2);
}

BOOL sub_1001AA354(uint64_t *a1, uint64_t *a2)
{
  return sub_10006BA84(*a1, *a2);
}

uint64_t sub_1001AA360(uint64_t *a1, uint64_t *a2)
{
  return sub_100068D4C(*a1, *a2);
}

void EmbeddedEventLoop.__allocating_init()()
{
}

void EmbeddedEventLoop.init()()
{
  v0[2] = 0LL;
  unint64_t v1 = _swiftEmptyArrayStorage;
  v0[3] = v1;
  uint64_t v2 = sub_1000175B0(&qword_1002A8ED0);
  sub_1000175F0();
  v0[4] = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for _NIOEventLoopFutureIdentifier,  v2);
  v0[5] = 0LL;
  sub_10001945C();
}

uint64_t sub_1001AA404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_10003D6D4();
  uint64_t v8 = *(void *)(v3 + 40);
  if (v8 == -1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v9 = result;
    *(void *)(v3 + 4sub_10019B2E8(v0, 0) = v8 + 1;
    unint64_t v10 = (void *)swift_allocObject(&unk_100290248, 40LL, 7LL);
    void v10[2] = v9;
    v10[3] = a2;
    v10[4] = a3;
    uint64_t v11 = type metadata accessor for EmbeddedScheduledTask();
    uint64_t v12 = (void *)swift_allocObject(v11, 48LL, 7LL);
    void v12[4] = a1;
    v12[5] = v8;
    v12[2] = sub_100156418;
    void v12[3] = v10;
    uint64_t v13 = swift_allocObject(&unk_100290270, 32LL, 7LL);
    *(void *)(v13 + sub_100195C94(v0 + 16) = v3;
    *(void *)(v13 + 24) = v12;
    uint64_t v14 = swift_allocObject(&unk_100290298, 32LL, 7LL);
    *(void *)(v14 + sub_100195C94(v0 + 16) = sub_1001AE544;
    *(void *)(v14 + 24) = v13;
    swift_retain_n(v9, 3LL);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1000FEE04();
    swift_release();
    swift_release();
    swift_beginAccess(v3 + 24, v15, 33LL, 0LL);
    sub_10003E034();
    swift_endAccess(v15);
    swift_release();
    swift_release();
    return v9;
  }

  return result;
}

uint64_t EmbeddedEventLoop.scheduleTask<A>(deadline:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  EmbeddedChannel.WrongTypeError.actual.getter(*v4, a4);
  sub_1001AE740();
  uint64_t result = EventLoop.makePromise<A>(of:file:line:)( v10,  v11,  v12,  v13,  92LL,  v9,  a4,  (uint64_t)&protocol witness table for EmbeddedEventLoop);
  uint64_t v15 = v4[5];
  if (v15 == -1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v16 = result;
    void v4[5] = v15 + 1;
    uint64_t v17 = (void *)sub_100019310((uint64_t)&unk_10028FC98, 48LL);
    v17[2] = a4;
    v17[3] = v16;
    void v17[4] = a2;
    v17[5] = a3;
    uint64_t v18 = sub_1001AE75C();
    uint64_t v19 = (void *)sub_100019310(v18, 48LL);
    v19[4] = a1;
    os_log_t v19[5] = v15;
    void v19[2] = sub_10003E94C;
    v19[3] = v17;
    uint64_t v20 = sub_100019310((uint64_t)&unk_10028FCC0, 32LL);
    *(void *)(v20 + sub_100195C94(v0 + 16) = v4;
    *(void *)(v20 + 24) = v19;
    swift_retain_n(v16, 2LL);
    sub_10002A674();
    ChannelPipeline.syncOperations.getter();
    sub_10001EDE0();
    Scheduled.init(promise:cancellationTask:)(v16, (uint64_t)sub_1001AD644, v20);
    uint64_t v22 = v21;
    sub_10002A718((uint64_t)(v4 + 3), (uint64_t)v23, 33LL);
    sub_10003E034();
    swift_endAccess(v23);
    sub_10001ED6C();
    sub_10002A51C();
    return v22;
  }

  return result;
}

uint64_t sub_1001AA6EC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000CB954(a2, *(void *)(a1 + 24));
  if ((v5 & 1) == 0)
  {
    sub_1001A9DE0(v4);
    swift_release();
  }

  return swift_endAccess(v7);
}

uint64_t EmbeddedEventLoop.scheduleTask<A>(in:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_1001AE7AC(a1);
  return EmbeddedEventLoop.scheduleTask<A>(deadline:_:)(v7, a2, a3, a4);
}

uint64_t EmbeddedEventLoop.execute(_:)()
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = sub_100019310((uint64_t)&unk_10028FCE8, 32LL);
  *(void *)(v4 + sub_100195C94(v0 + 16) = v2;
  *(void *)(v4 + 24) = v0;
  sub_10002A4C8();
  sub_1001AA404(v3, (uint64_t)sub_10005E558, v4);
  swift_release();
  return sub_10009B134(v4);
}

Swift::Void __swiftcall EmbeddedEventLoop.run()()
{
}

Swift::Void __swiftcall EmbeddedEventLoop.advanceTime(to:)(ASOctaneSupportXPCService::NIODeadline to)
{
  uint64_t v2 = v1;
  sub_1001A8F8C(to._uptimeNanoseconds, *(void *)(v1 + 16));
  uint64_t v46 = v3;
  uint64_t v4 = (uint64_t *)(v1 + 24);
  sub_10002A718(v1 + 24, (uint64_t)v49, 0LL);
  uint64_t v5 = sub_100083090(*(void *)(v1 + 24));
  if (!v5) {
    goto LABEL_53;
  }
  uint64_t v6 = v5;
  uint64_t v7 = (uint64_t)_swiftEmptyArrayStorage;
  while (1)
  {
    sub_1001A8F40(*(void *)(v6 + 32), v46);
    if ((v8 & 1) == 0)
    {
      sub_10002A524();
LABEL_53:
      *(void *)(v2 + sub_100195C94(v0 + 16) = v46;
      sub_1001AE5D4();
      return;
    }

    uint64_t v48 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v9 = *v4;
    if (*(void *)(*v4 + 16)) {
      break;
    }
LABEL_37:
    *(void *)(v2 + sub_100195C94(v0 + 16) = *(void *)(v6 + 32);
    if ((unint64_t)v7 >> 62)
    {
      if (v7 < 0) {
        uint64_t v42 = v7;
      }
      else {
        uint64_t v42 = v7 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v37 = _CocoaArrayWrapper.endIndex.getter(v42);
      swift_bridgeObjectRelease();
      if (v37)
      {
LABEL_39:
        if (v37 < 1) {
          goto LABEL_61;
        }
        uint64_t v38 = 0LL;
        do
        {
          if ((v7 & 0xC000000000000001LL) != 0)
          {
            uint64_t v39 = specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v7);
          }

          else
          {
            uint64_t v39 = *(void *)(v7 + 8 * v38 + 32);
            sub_1000A4BF4();
          }

          ++v38;
          uint64_t v40 = *(void (**)(uint64_t))(v39 + 16);
          uint64_t v41 = ChannelPipeline.syncOperations.getter();
          v40(v41);
          sub_100056B1C();
          sub_100024F0C();
        }

        while (v37 != v38);
      }
    }

    else
    {
      uint64_t v37 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v37) {
        goto LABEL_39;
      }
    }

    sub_10002A524();
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_100083090(*v4);
    uint64_t v7 = (uint64_t)_swiftEmptyArrayStorage;
    if (!v6) {
      goto LABEL_53;
    }
  }

  while (1)
  {
    uint64_t v10 = *(void *)(v9 + 32);
    if (*(void *)(v10 + 32) != *(void *)(v6 + 32))
    {
LABEL_36:
      uint64_t v7 = v48;
      goto LABEL_37;
    }

    uint64_t v11 = swift_retain_n(v10, 2LL);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
    unint64_t v13 = *(void *)((v48 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v12 = *(void *)((v48 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v13 >= v12 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1);
    }
    uint64_t v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v10);
    specialized Array._endMutation()(v14);
    uint64_t v15 = sub_10002A718((uint64_t)v4, (uint64_t)v47, 33LL);
    uint64_t v18 = *v4;
    uint64_t v19 = *(void *)(*v4 + 16);
    if (!v19) {
      goto LABEL_25;
    }
    uint64_t v20 = v18 + 32;
    uint64_t v21 = v19 - 1;
    if (v19 == 1 || *(void *)(v18 + 32) == *(void *)(v20 + 8 * v21)) {
      break;
    }
    sub_1001AE75C();
    sub_1001AE864();
    uint64_t v22 = *(void *)(v20 + 8 * v21);
    if ((v23 & 1) == 0)
    {
      sub_1001AE864();
      if ((v31 & 1) != 0) {
        goto LABEL_62;
      }
      sub_1000A4BF4();
      sub_10009B678();
      char v32 = sub_1001AE840();
      *uint64_t v4 = v18;
      if ((v32 & 1) == 0)
      {
        uint64_t v18 = sub_1001AE82C();
        *uint64_t v4 = v18;
      }

      if (!*(void *)(v18 + 16)) {
        goto LABEL_55;
      }
      sub_10009B678();
      sub_100024F0C();
      *(void *)(v18 + 3sub_100019F7C(v0 + 2) = v22;
      sub_1001AE5CC();
      sub_10002A7BC();
      uint64_t v33 = *v4;
      if (!*(void *)(*v4 + 16)) {
        goto LABEL_58;
      }
      char v34 = sub_10006B92C();
      *uint64_t v4 = v33;
      if ((v34 & 1) == 0)
      {
        uint64_t v35 = sub_1001AE5FC();
        sub_1001AE734(v35);
      }

      uint64_t v36 = *(void *)(v33 + 16);
      if (!v36) {
        goto LABEL_60;
      }
      *(void *)(v33 + sub_100195C94(v0 + 16) = v36 - 1;
      sub_1001AE5CC();
      goto LABEL_24;
    }

    sub_1000A4BF4();
    sub_10009B678();
    char v24 = sub_1001AE840();
    *uint64_t v4 = v18;
    if ((v24 & 1) == 0)
    {
      uint64_t v18 = sub_1001AE82C();
      *uint64_t v4 = v18;
    }

    if (!*(void *)(v18 + 16)) {
      goto LABEL_56;
    }
    swift_release();
    *(void *)(v18 + 3sub_100019F7C(v0 + 2) = v22;
    sub_1001AE5CC();
    uint64_t v25 = *v4;
    if (!*(void *)(*v4 + 16)) {
      goto LABEL_57;
    }
    char v26 = sub_10006B92C();
    *uint64_t v4 = v25;
    if ((v26 & 1) == 0)
    {
      uint64_t v27 = sub_1001AE5FC();
      sub_1001AE734(v27);
    }

    uint64_t v28 = *(void *)(v25 + 16);
    if (!v28) {
      goto LABEL_59;
    }
    *(void *)(v25 + sub_100195C94(v0 + 16) = v28 - 1;
    sub_1001AE5CC();
    sub_10001ED6C();
    uint64_t v15 = sub_1001A98CC( 0LL,  (void (*)(void))type metadata accessor for EmbeddedScheduledTask,  (uint64_t (*)(unint64_t, unint64_t))sub_1001AA2D4,  (uint64_t (*)(unint64_t, unint64_t))sub_1000470A0);
LABEL_25:
    sub_1001AE85C(v15, v16, v17);
    sub_100056B1C();
    sub_10009B770();
    uint64_t v9 = *v4;
    if (!*(void *)(*v4 + 16)) {
      goto LABEL_36;
    }
  }

  sub_1000A4BF4();
  char v29 = sub_1001AE840();
  *uint64_t v4 = v18;
  if ((v29 & 1) == 0)
  {
    uint64_t v18 = sub_1001AE82C();
    *uint64_t v4 = v18;
  }

  uint64_t v30 = *(void *)(v18 + 16);
  if (v30)
  {
    *(void *)(v18 + sub_100195C94(v0 + 16) = v30 - 1;
    sub_1001AE5CC();
LABEL_24:
    uint64_t v15 = swift_release();
    goto LABEL_25;
  }

  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  sub_1001AE6D8();
  sub_1001AE5B0( (uint64_t)"Fatal error",  v43,  v44,  v45,  0x80000001002193E0LL,  (uint64_t)"ASOctaneSupportXPCService/Heap.swift");
  __break(1u);
}

Swift::Void __swiftcall EmbeddedEventLoop.advanceTime(by:)(ASOctaneSupportXPCService::TimeAmount by)
{
  uint64_t v1 = sub_1001AE7AC(by.nanoseconds);
  EmbeddedEventLoop.advanceTime(to:)((ASOctaneSupportXPCService::NIODeadline)v1);
}

void sub_1001AABF8()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 24;
  sub_10002A718(v0 + 24, (uint64_t)v48, 0LL);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v49 = v3;
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4)
  {
LABEL_30:
    uint64_t v21 = sub_10002A718(v2, (uint64_t)v47, 33LL);
    uint64_t v24 = *(void *)v2;
    uint64_t v25 = *(void *)(*(void *)v2 + 16LL);
    if (!v25)
    {
LABEL_58:
      sub_1001AE85C(v21, v22, v23);
      sub_1001AE5D4();
      return;
    }

    while (1)
    {
      uint64_t v26 = v24 + 32;
      uint64_t v27 = v25 - 1;
      if (v25 == 1 || *(void *)(v24 + 32) == *(void *)(v26 + 8 * v27)) {
        break;
      }
      sub_1001AE75C();
      sub_1001AE834();
      uint64_t v28 = *(void *)(v26 + 8 * v27);
      if ((v29 & 1) == 0)
      {
        sub_1001AE834();
        if ((v39 & 1) != 0) {
          goto LABEL_73;
        }
        sub_10001EDE0();
        sub_100041B08();
        char v40 = sub_100052324();
        *(void *)uint64_t v2 = v24;
        if ((v40 & 1) == 0)
        {
          uint64_t v24 = sub_1001AE848();
          *(void *)uint64_t v2 = v24;
        }

        if (!*(void *)(v24 + 16)) {
          goto LABEL_68;
        }
        sub_100041B08();
        sub_100024F0C();
        *(void *)(v24 + 3sub_100019F7C(v0 + 2) = v28;
        sub_100041B34();
        sub_10009B4FC();
        uint64_t v41 = *(void *)v2;
        if (!*(void *)(*(void *)v2 + 16LL)) {
          goto LABEL_70;
        }
        char v42 = sub_10006B92C();
        *(void *)uint64_t v2 = v41;
        if ((v42 & 1) == 0)
        {
          uint64_t v41 = sub_1001AE5FC();
          *(void *)uint64_t v2 = v41;
        }

        uint64_t v43 = *(void *)(v41 + 16);
        if (!v43) {
          goto LABEL_72;
        }
        sub_1001AE64C(v43);
        goto LABEL_46;
      }

      sub_10001EDE0();
      sub_100041B08();
      char v30 = sub_100052324();
      *(void *)uint64_t v2 = v24;
      if ((v30 & 1) == 0)
      {
        uint64_t v24 = sub_1001AE848();
        *(void *)uint64_t v2 = v24;
      }

      if (!*(void *)(v24 + 16)) {
        goto LABEL_67;
      }
      swift_release();
      *(void *)(v24 + 3sub_100019F7C(v0 + 2) = v28;
      sub_100041B34();
      uint64_t v31 = *(void *)v2;
      if (!*(void *)(*(void *)v2 + 16LL)) {
        goto LABEL_69;
      }
      char v32 = sub_10006B92C();
      *(void *)uint64_t v2 = v31;
      if ((v32 & 1) == 0)
      {
        uint64_t v31 = sub_1001AE5FC();
        *(void *)uint64_t v2 = v31;
      }

      uint64_t v33 = *(void *)(v31 + 16);
      if (!v33) {
        goto LABEL_71;
      }
      sub_1001AE64C(v33);
      sub_10002A7BC();
      uint64_t v34 = sub_1001A98CC( 0LL,  (void (*)(void))type metadata accessor for EmbeddedScheduledTask,  (uint64_t (*)(unint64_t, unint64_t))sub_1001AA2D4,  (uint64_t (*)(unint64_t, unint64_t))sub_1000470A0);
LABEL_47:
      sub_1001AE85C(v34, v35, v36);
      sub_10001ED6C();
      uint64_t v21 = sub_10002A718(v2, (uint64_t)v47, 33LL);
      uint64_t v24 = *(void *)v2;
      uint64_t v25 = *(void *)(*(void *)v2 + 16LL);
      if (!v25) {
        goto LABEL_58;
      }
    }

    sub_10001EDE0();
    char v37 = sub_100052324();
    *(void *)uint64_t v2 = v24;
    if ((v37 & 1) == 0)
    {
      uint64_t v24 = sub_1001AE848();
      *(void *)uint64_t v2 = v24;
    }

    uint64_t v38 = *(void *)(v24 + 16);
    if (!v38) {
      goto LABEL_60;
    }
    *(void *)(v24 + sub_100195C94(v0 + 16) = v38 - 1;
    sub_100041B34();
LABEL_46:
    uint64_t v34 = swift_release();
    goto LABEL_47;
  }

  sub_100041B08();
  while (1)
  {
    uint64_t v6 = v3 + 32;
    uint64_t v5 = *(void *)(v3 + 32);
    uint64_t v7 = v4 - 1;
    if (v4 == 1 || v5 == *(void *)(v6 + 8 * v7)) {
      break;
    }
    sub_1001AE75C();
    sub_1001AE850();
    uint64_t v8 = *(void *)(v6 + 8 * v7);
    if ((v9 & 1) != 0)
    {
      sub_10009B678();
      sub_1000D94A0();
      char v10 = sub_100138778();
      uint64_t v49 = v3;
      if ((v10 & 1) == 0)
      {
        uint64_t v3 = sub_100138770();
        uint64_t v49 = v3;
      }

      if (!*(void *)(v3 + 16)) {
        goto LABEL_61;
      }
      swift_release();
      *(void *)(v3 + 3sub_100019F7C(v0 + 2) = v8;
      sub_1001AE68C();
      uint64_t v11 = v49;
      if (!*(void *)(v49 + 16)) {
        goto LABEL_63;
      }
      if ((sub_10006B92C() & 1) == 0)
      {
        uint64_t v11 = sub_1001AE5FC();
        uint64_t v49 = v11;
      }

      uint64_t v12 = *(void *)(v11 + 16);
      if (!v12) {
        goto LABEL_65;
      }
      sub_1001AE634(v12);
      sub_10009B4FC();
      sub_1001A98CC( 0LL,  (void (*)(void))type metadata accessor for EmbeddedScheduledTask,  (uint64_t (*)(unint64_t, unint64_t))sub_1001AA2D4,  (uint64_t (*)(unint64_t, unint64_t))sub_1000470A0);
      goto LABEL_19;
    }

    sub_1001AE850();
    if ((v17 & 1) != 0) {
      goto LABEL_73;
    }
    sub_10009B678();
    sub_1000D94A0();
    char v18 = sub_100138778();
    uint64_t v49 = v3;
    if ((v18 & 1) == 0)
    {
      uint64_t v3 = sub_100138770();
      uint64_t v49 = v3;
    }

    if (!*(void *)(v3 + 16)) {
      goto LABEL_62;
    }
    sub_1000D94A0();
    sub_100024F0C();
    *(void *)(v3 + 3sub_100019F7C(v0 + 2) = v8;
    sub_1001AE68C();
    sub_10009B770();
    uint64_t v19 = v49;
    if (!*(void *)(v49 + 16)) {
      goto LABEL_64;
    }
    if ((sub_10006B92C() & 1) == 0)
    {
      uint64_t v19 = sub_1001AE5FC();
      uint64_t v49 = v19;
    }

    uint64_t v20 = *(void *)(v19 + 16);
    if (!v20) {
      goto LABEL_66;
    }
    sub_1001AE634(v20);
LABEL_18:
    swift_release();
LABEL_19:
    *(void *)(v1 + sub_100195C94(v0 + 16) = *(void *)(v5 + 32);
    uint64_t v15 = *(void (**)(uint64_t))(v5 + 16);
    uint64_t v16 = ChannelPipeline.syncOperations.getter();
    v15(v16);
    sub_10002A7BC();
    sub_100024F0C();
    uint64_t v3 = v49;
    uint64_t v4 = *(void *)(v49 + 16);
    if (!v4)
    {
      sub_10009B4FC();
      goto LABEL_30;
    }
  }

  sub_10009B678();
  char v13 = sub_100138778();
  uint64_t v49 = v3;
  if ((v13 & 1) == 0)
  {
    uint64_t v3 = sub_100138770();
    uint64_t v49 = v3;
  }

  uint64_t v14 = *(void *)(v3 + 16);
  if (v14)
  {
    *(void *)(v3 + sub_100195C94(v0 + 16) = v14 - 1;
    sub_1001AE68C();
    goto LABEL_18;
  }

  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  sub_1001AE6D8();
  sub_1001AE5B0( (uint64_t)"Fatal error",  v44,  v45,  v46,  0x80000001002193E0LL,  (uint64_t)"ASOctaneSupportXPCService/Heap.swift");
  __break(1u);
}

uint64_t EmbeddedEventLoop.shutdownGracefully(queue:_:)(dispatch_queue_s *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100019310((uint64_t)&unk_10028FD10, 32LL);
  *(void *)(v7 + sub_100195C94(v0 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  uint64_t v8 = sub_100019310((uint64_t)&unk_10028FD38, 32LL);
  *(void *)(v8 + sub_100195C94(v0 + 16) = sub_10019DD4C;
  *(void *)(v8 + 24) = v7;
  v11[4] = sub_1000413B8;
  v11[5] = v8;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256LL;
  void v11[2] = sub_1001AB150;
  void v11[3] = &unk_10028FD50;
  char v9 = _Block_copy(v11);
  sub_10002A674();
  ChannelPipeline.syncOperations.getter();
  sub_10001ED6C();
  dispatch_sync(a1, v9);
  _Block_release(v9);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation(v8, "", 110LL, 189LL, 20LL, 1LL);
  sub_10001EDD8();
  uint64_t result = sub_100024F0C();
  return result;
}

uint64_t sub_1001AB150(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void EmbeddedEventLoop.deinit()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 16LL);
  swift_release();
  if (v1)
  {
    __break(1u);
  }

  else
  {
    swift_bridgeObjectRelease();
    sub_100013868();
  }

uint64_t EmbeddedEventLoop.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

void sub_1001AB1E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  *(_WORD *)(v4 + sub_100195C94(v0 + 16) = 1;
  sub_10002AF70(0x10uLL);
  *(void *)(v4 + 64) = v8;
  *(void *)(v4 + 7sub_100019F7C(v0 + 2) = v9;
  *(void *)(v4 + 8sub_10019B2E8(v0, 0) = v10;
  sub_10002AED0(0x10uLL);
  *(void *)(v4 + 88) = v11;
  *(void *)(v4 + 96) = v12;
  *(void *)(v4 + 104) = v13;
  *(void *)(v4 + 11sub_100019F7C(v0 + 2) = 0LL;
  *(_BYTE *)(v4 + 12sub_10019B2E8(v0, 0) = 1;
  sub_10002AF70(0x10uLL);
  *(void *)(v4 + sub_100081CEC(v0 + 128) = v14;
  *(void *)(v4 + 136) = v15;
  *(void *)(v4 + 144) = v16;
  uint64_t v17 = sub_10002A444();
  EmbeddedChannel.WrongTypeError.actual.getter(v17, (uint64_t)&type metadata for ()[8]);
  sub_1001AE740();
  uint64_t v22 = EventLoop.makePromise<A>(of:file:line:)(v18, v19, v20, v21, 233LL, v17, (uint64_t)&type metadata for ()[8], a3);
  *(void *)(v4 + 48) = 0LL;
  *(void *)(v4 + 56) = a1;
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 3sub_100019F7C(v0 + 2) = a3;
  *(void *)(v4 + 4sub_10019B2E8(v0, 0) = v22;
  sub_10002A3D4();
}

void EmbeddedChannelCore.deinit()
{
  *(_BYTE *)(v0 + sub_100195C94(v0 + 16) = 0;
  uint64_t v1 = *(void *)(v0 + 40);
  sub_10002A4C8();
  sub_100098A70(0LL, 0LL, v1);
  sub_10001EDD8();
  swift_unknownObjectRelease(*(void *)(v0 + 24));
  swift_release();
  swift_errorRelease(*(void *)(v0 + 48));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10001945C();
}

uint64_t EmbeddedChannelCore.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 152LL, 7LL);
}

void EmbeddedChannelCore.outboundBuffer.getter()
{
}

void EmbeddedChannelCore.outboundBuffer.setter()
{
  v1[8] = v3;
  v1[9] = v2;
  v1[10] = v0;
  swift_release();
  sub_100013858();
}

void EmbeddedChannelCore.outboundBuffer.modify(uint64_t a1)
{
}

void EmbeddedChannelCore.pendingOutboundBuffer.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 112);
  char v4 = *(_BYTE *)(v1 + 120);
  *(void *)a1 = *(void *)(v1 + 88);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 96);
  *(void *)(a1 + 24) = v3;
  *(_BYTE *)(a1 + 3sub_100019F7C(v0 + 2) = v4;
  swift_retain();
  sub_100013868();
}

void EmbeddedChannelCore.pendingOutboundBuffer.setter(uint64_t a1)
{
  __int128 v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 88) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 104) = v3;
  *(_BYTE *)(v1 + 12sub_10019B2E8(v0, 0) = *(_BYTE *)(a1 + 32);
  sub_100041B5C();
  swift_release();
  sub_100063354((void *)a1);
  sub_100013858();
}

void EmbeddedChannelCore.inboundBuffer.getter()
{
}

void EmbeddedChannelCore.inboundBuffer.setter()
{
  v1[16] = v3;
  v1[17] = v2;
  v1[18] = v0;
  swift_release();
  sub_100013858();
}

void EmbeddedChannelCore.inboundBuffer.modify(uint64_t a1)
{
}

uint64_t EmbeddedChannelCore.remoteAddress0()()
{
  return sub_1001AB558();
}

uint64_t sub_1001AB558()
{
  unint64_t v0 = sub_100029C98();
  uint64_t v1 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v0);
  sub_1001AE78C(v1, v2);
  return sub_1000AA06C();
}

void EmbeddedChannelCore.close0(error:mode:promise:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (*(_BYTE *)(v4 + 16) == 1)
  {
    *(_WORD *)(v4 + sub_100195C94(v0 + 16) = 0;
    if (a3) {
      sub_100098A70(0LL, 0LL, a3);
    }
    uint64_t v6 = *(void *)(v4 + 56);
    uint64_t v7 = *(void *)(v6 + 56);
    uint64_t v8 = sub_10002A444();
    EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  1141LL,  v8,  v7);
    if (sub_100095918())
    {
      sub_10002A7F4();
      sub_100096294();
      sub_10002A51C();
      sub_100024F0C();
    }

    uint64_t v9 = *(void *)(v6 + 56);
    uint64_t v10 = sub_10002A444();
    EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  1133LL,  v10,  v9);
    if (sub_100095918())
    {
      sub_10002A7F4();
      sub_100096208();
      sub_10002A51C();
      sub_100024F0C();
    }

    uint64_t v11 = *(void *)(v4 + 24);
    uint64_t v12 = *(void *)(v4 + 32);
    uint64_t v13 = sub_10002A444();
    uint64_t v14 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v12 + 24);
    sub_10009B28C();
    sub_10002A4C8();
    v14(sub_1001ADA2C, v4, v13, v12);
    swift_unknownObjectRelease(v11);
    sub_10009B134(v4);
  }

  else if (a3)
  {
    unint64_t v15 = sub_100029C98();
    uint64_t v16 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v15);
    *(void *)uint64_t v17 = 3LL;
    *(_BYTE *)(v17 + 8) = 3;
    swift_errorRetain(v16);
    sub_100098A70(v16, 1LL, a3);
    swift_errorRelease(v16);
    swift_errorRelease(v16);
  }

uint64_t sub_1001AB714(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  swift_retain();
  sub_100098A70(0LL, 0LL, v2);
  return swift_release();
}

uint64_t EmbeddedChannelCore.bind0(to:promise:)(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return sub_100098A70(0LL, 0LL, a2);
  }
  return result;
}

void EmbeddedChannelCore.connect0(to:promise:)(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(v2 + 17) = 1;
  if (a2) {
    sub_1001AE87C(a1, a2, a2);
  }
  uint64_t v3 = sub_10002A444();
  sub_1001AE6BC( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  v4,  v5,  v6,  v3);
  uint64_t v7 = sub_10002A6DC();
  if (v7)
  {
    uint64_t v8 = v7;
    sub_10002A4C8();
    sub_100096320();
    sub_10001EDD8();
    sub_10002A598(v8);
  }

  else
  {
    sub_1000193B8();
  }

void EmbeddedChannelCore.register0(promise:)(uint64_t a1, uint64_t a2)
{
  if (a1) {
    sub_1001AE87C(a1, a2, a1);
  }
  uint64_t v3 = *(void *)(*(void *)(v2 + 56) + 56LL);
  uint64_t v4 = sub_10002A444();
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  1125LL,  v4,  v3);
  uint64_t v5 = sub_10002A6DC();
  if (v5)
  {
    uint64_t v6 = v5;
    sub_10002A4C8();
    sub_10009617C();
    sub_10001EDD8();
    sub_10002A598(v6);
  }

  else
  {
    sub_1000193B8();
  }

void EmbeddedChannelCore.registerAlreadyConfigured0(promise:)(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(v2 + 17) = 1;
  EmbeddedChannelCore.register0(promise:)(a1, a2);
  uint64_t v3 = sub_10002A444();
  sub_1001AE6BC( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  v4,  v5,  v6,  v3);
  uint64_t v7 = sub_10002A6DC();
  if (v7)
  {
    uint64_t v8 = v7;
    sub_10002A4C8();
    sub_100096320();
    sub_10001EDD8();
    sub_10002A598(v8);
  }

  else
  {
    sub_1000193B8();
  }

uint64_t EmbeddedChannelCore.write0(_:promise:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v7 = a2;
  sub_10002A718(v2 + 88, (uint64_t)v5, 33LL);
  sub_10002A4C8();
  sub_10002B9D8((uint64_t)v6);
  sub_100034F14((uint64_t)v6, &qword_1002AA4D0);
  return swift_endAccess(v5);
}

Swift::Void __swiftcall EmbeddedChannelCore.flush0()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)(v0 + 88);
  sub_10002A718(v0 + 88, (uint64_t)v64, 1LL);
  sub_1001A9818();
  if ((*(_BYTE *)(v0 + 120) & 1) != 0) {
    return;
  }
  while (1)
  {
    sub_10002A718((uint64_t)v2, (uint64_t)v59, 33LL);
    if ((*(_BYTE *)(v1 + 120) & 1) == 0)
    {
      uint64_t v3 = *(void *)(v1 + 112);
      BOOL v4 = v3 < 1;
      uint64_t v5 = v3 - 1;
      char v6 = v4;
      if (v4) {
        uint64_t v5 = 0LL;
      }
      *(void *)(v1 + 11sub_100019F7C(v0 + 2) = v5;
      *(_BYTE *)(v1 + 12sub_10019B2E8(v0, 0) = v6;
    }

    uint64_t v7 = *(void *)(v1 + 88);
    unint64_t v8 = *(void *)(v1 + 96);
    uint64_t v9 = *(void *)(v1 + 104);
    uint64_t v10 = v9 - v8;
    if (v10 < 1)
    {
      memset(__dst, 0, 64);
      uint64_t v14 = 1LL;
      *(void *)&__dst[4] = 1LL;
      goto LABEL_25;
    }

    if (v9 == v8) {
      goto LABEL_42;
    }
    if ((v8 & 0x8000000000000000LL) != 0) {
      goto LABEL_47;
    }
    if (HIDWORD(v8)) {
      break;
    }
    if (v8 >= *(void *)(v7 + 16)) {
      goto LABEL_43;
    }
    sub_1001ADB24(v7 + 72 * v8 + 32, (uint64_t)__src);
    if (*(void *)&__src[64] == 1LL) {
      goto LABEL_46;
    }
    memcpy(__dst, __src, 0x48uLL);
    uint64_t v11 = v9 - v8;
    if (v11 < 1) {
      goto LABEL_44;
    }
    char v12 = sub_10006B92C();
    *uint64_t v2 = v7;
    if ((v12 & 1) == 0)
    {
      sub_1000F2420();
      uint64_t v7 = v13;
    }

    memset(__src, 0, 64);
    *(void *)&__src[64] = 1LL;
    *uint64_t v2 = v7;
    if (v8 >= *(void *)(v7 + 16)) {
      goto LABEL_45;
    }
    sub_100067D3C((uint64_t)__src, v7 + 72 * v8 + 32, &qword_1002AA4D8);
    *(void *)(v1 + 96) = (*(void *)(*(void *)(v1 + 88) + 16LL) - 1LL) & (v8 + 1);
    uint64_t v14 = *(void *)&__dst[4];
LABEL_25:
    swift_endAccess(v59);
    if (v14 == 1)
    {
      sub_100034F14((uint64_t)__dst, &qword_1002AA4D8);
      return;
    }

    v61[0] = __dst[0];
    v61[1] = __dst[1];
    v62[0] = __dst[2];
    *(_OWORD *)((char *)v62 + 9) = *(_OWORD *)((char *)&__dst[2] + 9);
    uint64_t v63 = v14;
    uint64_t v15 = sub_10002A718(v1 + 64, (uint64_t)__src, 33LL);
    unint64_t v16 = *(void *)(v1 + 80);
    sub_1001AE7A0( v15,  v17,  v18,  v19,  v20,  v21,  v22,  v23,  v50,  v52,  v54,  v56,  *(uint64_t *)__src,  *(uint64_t *)&__src[8],  *(uint64_t *)&__src[16],  *(uint64_t *)&__src[24]);
    uint64_t v24 = *(void *)(v1 + 64);
    char v25 = sub_10006B92C();
    *(void *)(v1 + 64) = v24;
    if ((v25 & 1) == 0)
    {
      sub_1000F23F0();
      sub_1001AE734(v26);
    }

    if ((v16 & 0x8000000000000000LL) != 0)
    {
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      sub_100034FD0();
      uint64_t v44 = "Fatal error";
      uint64_t v45 = "Negative value is not representable";
      uint64_t v46 = "Swift/Integers.swift";
      uint64_t v47 = 11LL;
      uint64_t v48 = 2LL;
      uint64_t v49 = 35LL;
      goto LABEL_49;
    }

    if (v16 >= *(void *)(v24 + 16)) {
      goto LABEL_41;
    }
    sub_100067D3C((uint64_t)__dst, v24 + (v16 << 6) + 32, &qword_1002AA490);
    uint64_t v27 = *(void *)(v1 + 72);
    uint64_t v28 = (*(void *)(*(void *)(v1 + 64) + 16LL) - 1LL) & (*(void *)(v1 + 80) + 1LL);
    *(void *)(v1 + 8sub_10019B2E8(v0, 0) = v28;
    if (v27 == v28) {
      sub_1000F3B80();
    }
    uint64_t v29 = swift_endAccess(__src);
    sub_1001AE7A0( v29,  v30,  v31,  v32,  v33,  v34,  v35,  v36,  v51,  v53,  v55,  v57,  *(uint64_t *)__src,  *(uint64_t *)&__src[8],  *(uint64_t *)&__src[16],  *(uint64_t *)&__src[24]);
    uint64_t v37 = v63;
    *(void *)&__dst[4] = v63;
    if (v63)
    {
      uint64_t v38 = *(void *)(v63 + 40);
      uint64_t v39 = sub_10002A444();
      char v40 = *(uint64_t (**)(uint64_t, uint64_t))(v38 + 16);
      sub_1000A4BF4();
      if ((v40(v39, v38) & 1) != 0)
      {
        sub_1001A93B4( 0LL,  0,  (void (*)(uint64_t))sub_1000419E4,  (void (*)(uint64_t, uint64_t))sub_10010D6BC);
        CallbackList._run()();
        sub_1001AE7F0();
        sub_100056B1C();
        swift_bridgeObjectRelease();
      }

      else
      {
        *(void *)__src = 0LL;
        __src[8] = 0;
        uint64_t v41 = sub_100019310((uint64_t)&unk_10028FD88, 33LL);
        *(void *)(v41 + sub_100195C94(v0 + 16) = v37;
        sub_1000925C4((uint64_t)__src, v41 + 24, qword_1002AEC20);
        char v42 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v38 + 24);
        sub_1000A4BF4();
        v42(sub_10009AF34, v41, v39, v38);
        sub_100056B1C();
        sub_10002A524();
      }
    }

    sub_100034F14((uint64_t)v61, &qword_1002AA4D0);
    sub_1000324E8((uint64_t)__dst);
    if (*(_BYTE *)(v1 + 120) == 1) {
      return;
    }
  }

  sub_100034FD0();
  sub_100035144();
LABEL_49:
  sub_100035124((uint64_t)v44, v47, v48, (uint64_t)v45, v49, v43, (uint64_t)v46);
  __break(1u);
}

void EmbeddedChannelCore.triggerUserOutboundEvent0(_:promise:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    unint64_t v3 = sub_100029C98();
    uint64_t v4 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v3);
    sub_1001AE78C(v4, v5);
    swift_errorRetain(v6);
    sub_100098A70(v4, 1LL, a2);
    swift_errorRelease(v4);
    swift_errorRelease(v4);
  }

void EmbeddedChannelCore.channelRead0(_:)(uint64_t *a1)
{
}

uint64_t EmbeddedChannelCore.errorCaught0(error:)(uint64_t result)
{
  if (!*(void *)(v1 + 48))
  {
    *(void *)(v1 + 48) = result;
    swift_errorRetain(result);
    return swift_errorRelease(0LL);
  }

  return result;
}

uint64_t sub_1001ABDE0()
{
  return EmbeddedChannelCore.remoteAddress0()();
}

uint64_t sub_1001ABDFC(uint64_t a1, uint64_t a2)
{
  return EmbeddedChannelCore.bind0(to:promise:)(a1, a2);
}

void sub_1001ABE20(uint64_t a1, uint64_t a2)
{
}

BOOL static EmbeddedChannel.WrongTypeError.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 == a3 && a2 == a4;
}

BOOL sub_1001ABE4C(uint64_t *a1, uint64_t *a2)
{
  return static EmbeddedChannel.WrongTypeError.== infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

uint64_t EmbeddedChannel.isActive.getter()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 17);
  swift_release();
  return v1;
}

void EmbeddedChannel.channelcore.getter()
{
  if (*(void *)(v0 + 16)) {
    goto LABEL_4;
  }
  if (*(void *)(v0 + 32))
  {
    uint64_t v1 = EmbeddedChannel.eventLoop.getter();
    uint64_t v2 = type metadata accessor for EmbeddedChannelCore();
    sub_100019310(v2, 152LL);
    uint64_t v3 = sub_10002A7F4();
    sub_1001AB1E8(v3, v1, (uint64_t)&protocol witness table for EmbeddedEventLoop);
    *(void *)(v0 + sub_100195C94(v0 + 16) = v0;
    ChannelPipeline.syncOperations.getter();
    sub_10002A51C();
LABEL_4:
    swift_retain();
    sub_1000193B8();
    return;
  }

  __break(1u);
}

void EmbeddedChannel.closeFuture.getter()
{
}

uint64_t EmbeddedChannel.eventLoop.getter()
{
  return swift_retain();
}

uint64_t EmbeddedChannel.channelcore.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v1 + sub_100195C94(v0 + 16) = a1;
  return swift_release(v2);
}

void EmbeddedChannel.channelcore.modify(void *a1)
{
  a1[1] = v1;
  EmbeddedChannel.channelcore.getter();
  *a1 = v3;
  sub_10001945C();
}

void sub_1001ABFB8(uint64_t *a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    uint64_t v2 = sub_10002A4C8();
    EmbeddedChannel.channelcore.setter(v2);
    swift_release();
  }

  else
  {
    EmbeddedChannel.channelcore.setter(*a1);
    sub_10001945C();
  }

void EmbeddedChannel._channelCore.getter()
{
}

uint64_t EmbeddedChannel.pipeline.getter()
{
  uint64_t result = *(void *)(v0 + 32);
  if (result) {
    return swift_retain(result);
  }
  __break(1u);
  return result;
}

void EmbeddedChannel.isWritable.getter()
{
}

void EmbeddedChannel.isWritable.setter(char a1)
{
  *(_BYTE *)(v1 + 24) = a1;
  sub_100013868();
}

void EmbeddedChannel.isWritable.modify(uint64_t a1)
{
}

uint64_t EmbeddedChannel.finish(acceptAlreadyClosed:)(uint64_t a1)
{
  uint64_t v3 = v1;
  sub_1001AE740();
  sub_1001A8A3C();
  sub_1001A9158( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Embedded.swift",  110LL,  2LL,  498LL,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000FF778);
  if (v2)
  {
    swift_release();
    __dst[0] = v2;
    sub_100171EB4();
    uint64_t v5 = sub_1000175B0(&qword_1002A9710);
    if (swift_dynamicCast(__src, __dst, v5, &type metadata for ChannelError, 0LL))
    {
      swift_errorRelease(v2);
      uint64_t v6 = *(void *)__src;
      char v7 = __src[8];
      BOOL v8 = __src[8] == 3 && *(void *)__src == 3LL;
      if (v8 && (a1 & 1) != 0)
      {
        swift_errorRelease(__dst[0]);
        goto LABEL_11;
      }

      unint64_t v32 = sub_100029C98();
      sub_1000252D0((uint64_t)&type metadata for ChannelError, v32);
      *(void *)uint64_t v33 = v6;
      *(_BYTE *)(v33 + 8) = v7;
      sub_1000AA06C();
    }

    swift_errorRelease(__dst[0]);
    return a1;
  }

  swift_release();
LABEL_11:
  sub_1000487CC(v3 + 72, (uint64_t)v52);
  ChannelPipeline.syncOperations.getter();
  sub_1001AABF8();
  sub_100024F0C();
  v9._uptimeNanoseconds = *(void *)(*(void *)(v3 + 72) + 16LL);
  ChannelPipeline.syncOperations.getter();
  EmbeddedEventLoop.advanceTime(to:)(v9);
  sub_100024F0C();
  EmbeddedChannel.throwIfErrorCaught()();
  if (v10) {
    return a1;
  }
  EmbeddedChannel.channelcore.getter();
  uint64_t v12 = v11;
  sub_1000487CC(v11 + 64, (uint64_t)v51);
  if (*(void *)(v12 + 72) == *(void *)(v12 + 80))
  {
    sub_1000487CC(v12 + 128, (uint64_t)v42);
    if (*(void *)(v12 + 136) == *(void *)(v12 + 144))
    {
      sub_1000487CC(v12 + 88, (uint64_t)v41);
      if (*(void *)(v12 + 96) == *(void *)(v12 + 104))
      {
        sub_10002A5A4();
        return 0LL;
      }
    }
  }

  uint64_t v55 = 0LL;
  sub_1000487CC(v12 + 128, (uint64_t)v50);
  uint64_t v13 = *(void *)(v12 + 136);
  uint64_t v14 = *(void *)(v12 + 144);
  uint64_t v15 = ChannelPipeline.syncOperations.getter();
  sub_100018AD4(v15, v13, v14);
  a1 = v16;
  sub_100024F0C();
  uint64_t v17 = *(void *)(v12 + 72);
  uint64_t v18 = *(void *)(v12 + 80);
  uint64_t v19 = ChannelPipeline.syncOperations.getter();
  sub_100018AD4(v19, v17, v18);
  sub_100024F0C();
  sub_1000487CC(v12 + 88, (uint64_t)v49);
  __int128 v20 = *(_OWORD *)(v12 + 104);
  v53[0] = *(_OWORD *)(v12 + 88);
  v53[1] = v20;
  char v54 = *(_BYTE *)(v12 + 120);
  uint64_t v21 = *(void *)&v53[0];
  uint64_t v22 = v20 - *((void *)&v53[0] + 1);
  if (!v22)
  {
    sub_10002A5A4();
    return a1;
  }

  uint64_t v48 = _swiftEmptyArrayStorage;
  sub_10009B678();
  sub_10003277C();
  sub_1001A9848();
  if ((v22 & 0x8000000000000000LL) == 0)
  {
    unint64_t v24 = *(void *)(v21 + 16);
    while (1)
    {
      uint64_t v25 = v23;
      sub_1001ADB24(v21 + 32 + 72LL * v23, (uint64_t)__src);
      if (*(void *)&__src[64] == 1LL) {
        goto LABEL_36;
      }
      memcpy(__dst, __src, sizeof(__dst));
      sub_10002B550(__dst, (uint64_t)__src);
      __int128 v45 = *(_OWORD *)__src;
      __int128 v46 = *(_OWORD *)&__src[16];
      v47[0] = *(_OWORD *)&__src[32];
      *(_OWORD *)((char *)v47 + 9) = *(_OWORD *)&__src[41];
      sub_100034F14((uint64_t)__dst, &qword_1002AA4D0);
      uint64_t v26 = v48;
      if ((swift_isUniquelyReferenced_nonNull_native(v48) & 1) == 0)
      {
        sub_10003277C();
        uint64_t v26 = v48;
      }

      unint64_t v27 = v26[2];
      if (v27 >= v26[3] >> 1)
      {
        sub_10003277C();
        uint64_t v26 = v48;
      }

      void v26[2] = v27 + 1;
      uint64_t v28 = &v26[8 * v27];
      __int128 v29 = v45;
      __int128 v30 = v46;
      __int128 v31 = v47[0];
      *(_OWORD *)((char *)v28 + 73) = *(_OWORD *)((char *)v47 + 9);
      void v28[3] = v30;
      v28[4] = v31;
      void v28[2] = v29;
      unint64_t v23 = (*(void *)(v21 + 16) - 1LL) & (v25 + 1);
      if (HIDWORD(v23)) {
        goto LABEL_37;
      }
      if (!--v22)
      {
        swift_release();
        sub_100063354(v53);
        return a1;
      }
    }

    __break(1u);
  }

  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  sub_100034FD0();
  sub_100035144();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)(v35, v36, v37, v38, v39, 2LL, v40, 20LL);
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> EmbeddedChannel.throwIfErrorCaught()()
{
  uint64_t v1 = *(void *)(v0 + 48);
  sub_100171EB4();
  sub_10002A524();
  if (v1)
  {
    EmbeddedChannel.channelcore.getter();
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)(v2 + 48);
    *(void *)(v3 + 48) = 0LL;
    swift_errorRelease(v4);
    uint64_t v5 = sub_100024F0C();
    swift_willThrow(v5);
  }

uint64_t EmbeddedChannel.finish()()
{
  uint64_t result = EmbeddedChannel.finish(acceptAlreadyClosed:)(0LL);
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t EmbeddedChannel.allocator.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t EmbeddedChannel.allocator.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_10002A718((uint64_t)(v4 + 5), (uint64_t)v10, 1LL);
  void v4[5] = a1;
  v4[6] = a2;
  v4[7] = a3;
  v4[8] = a4;
  return result;
}

void EmbeddedChannel.embeddedEventLoop.getter()
{
}

void EmbeddedChannel.embeddedEventLoop.setter(uint64_t a1)
{
  *(void *)(v1 + 7sub_100019F7C(v0 + 2) = a1;
  swift_release();
  sub_100013868();
}

void EmbeddedChannel.embeddedEventLoop.modify(uint64_t a1)
{
}

void EmbeddedChannel.localAddress.getter()
{
}

void EmbeddedChannel.localAddress.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 80);
  *(void *)(v1 + 8sub_10019B2E8(v0, 0) = a1;
  sub_100029DF4(v3);
  sub_100013868();
}

void EmbeddedChannel.remoteAddress.getter()
{
}

void EmbeddedChannel.remoteAddress.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 88);
  *(void *)(v1 + 88) = a1;
  sub_100029DF4(v3);
  sub_100013868();
}

void EmbeddedChannel.parent.getter()
{
}

void EmbeddedChannel.readOutbound<A>(as:)()
{
  uint64_t v1 = sub_1001AE678();
  sub_1001AE8C4(v1);
  swift_release();
  sub_1001AE664();
}

uint64_t EmbeddedChannel._readFromBuffer<A>(buffer:)@<X0>( uint64_t a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Optional(0LL, a2);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  ASOctaneSupportXPCService::NIODeadline v9 = (char *)&v29 - v8;
  if (*(void *)(a1 + 8) == *(void *)(a1 + 16))
  {
    uint64_t v10 = a3;
    uint64_t v11 = 1LL;
    return sub_10001762C(v10, v11, 1LL, (uint64_t)a2);
  }

  sub_1001A8B7C(v31);
  EmbeddedChannel.channelcore.getter();
  uint64_t v12 = type metadata accessor for EmbeddedChannelCore();
  ChannelCore.tryUnwrapData<A>(_:as:)( v12,  a2,  (uint64_t)&protocol witness table for EmbeddedChannelCore,  v13,  v14,  v15,  (uint64_t)v9);
  sub_100024F0C();
  if (sub_10001D158((uint64_t)v9, 1LL, (uint64_t)a2) != 1)
  {
    sub_1001AE89C();
    (*((void (**)(uint64_t, char *, ValueMetadata *))a2[-1].Description + 4))(a3, v9, a2);
    uint64_t v10 = a3;
    uint64_t v11 = 0LL;
    return sub_10001762C(v10, v11, 1LL, (uint64_t)a2);
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  EmbeddedChannel.channelcore.getter();
  sub_1001A8CCC((uint64_t)&type metadata for Any + 8, v16, v17, v18, v19, v20, v21, v22, &v29);
  uint64_t result = sub_10002A5A4();
  uint64_t v24 = v30;
  if (v30)
  {
    uint64_t v25 = sub_100019F58(&v29, v30);
    uint64_t DynamicType = swift_getDynamicType(v25, v24, 1LL);
    sub_100019F7C(&v29);
    unint64_t v27 = sub_1001ADB8C();
    sub_1000252D0((uint64_t)&type metadata for EmbeddedChannel.WrongTypeError, v27);
    _OWORD *v28 = a2;
    v28[1] = (ValueMetadata *)DynamicType;
    sub_1000AA06C();
    return sub_1001AE89C();
  }

  else
  {
    __break(1u);
  }

  return result;
}

void EmbeddedChannel.readInbound<A>(as:)()
{
  uint64_t v1 = sub_1001AE678();
  sub_1001AE8C4(v1);
  swift_release();
  sub_1001AE664();
}

uint64_t EmbeddedChannel.writeInbound<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  EmbeddedChannel.pipeline.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a2);
  NIOAny.init<A>(_:)((uint64_t)v7, a2);
  ChannelPipeline.fireChannelRead(_:)(v18);
  sub_100024F0C();
  sub_1001AE89C();
  EmbeddedChannel.pipeline.getter();
  ChannelPipeline.fireChannelReadComplete()();
  sub_100024F0C();
  EmbeddedChannel.throwIfErrorCaught()();
  if (!v8)
  {
    sub_1001AE6D0();
    uint64_t v10 = v9;
    sub_1000487CC(v9 + 128, (uint64_t)v18);
    uint64_t v11 = *(void *)(v10 + 136);
    uint64_t v12 = *(void *)(v10 + 144);
    sub_100024F0C();
    uint64_t v2 = 0LL;
    if (v11 != v12)
    {
      sub_1001AE6D0();
      sub_1000487CC(v13 + 128, (uint64_t)v17);
      sub_10002A75C();
      swift_release();
      sub_1001AE74C();
      uint64_t v2 = v14;
      sub_10002A524();
    }
  }

  return v2;
}

uint64_t EmbeddedChannel.writeOutbound<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  (*(void (**)(char *))(v6 + 16))(v5);
  NIOAny.init<A>(_:)((uint64_t)v5, a2);
  sub_1001AE740();
  uint64_t v8 = sub_1001A8C60(v7);
  sub_1000324E8((uint64_t)v18);
  sub_1001A9158( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Embedded.swift",  110LL,  2LL,  614LL,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1001009AC);
  sub_100024F0C();
  if (!v2)
  {
    sub_1001AE6D0();
    uint64_t v10 = v9;
    sub_1000487CC(v9 + 64, (uint64_t)v18);
    uint64_t v11 = *(void *)(v10 + 72);
    uint64_t v12 = *(void *)(v10 + 80);
    sub_100024F0C();
    uint64_t v8 = 0LL;
    if (v11 != v12)
    {
      sub_1001AE6D0();
      sub_1000487CC(v13 + 64, (uint64_t)v17);
      sub_10002A75C();
      swift_release();
      sub_1001AE74C();
      uint64_t v8 = v14;
      sub_10002A524();
    }
  }

  return v8;
}

void EmbeddedChannel.__allocating_init(handler:loop:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v7 = sub_1000175B0(&qword_1002AA578);
    uint64_t v8 = (void *)sub_100019310(v7, 48LL);
    *((_OWORD *)v8 + 1) = xmmword_1001F3C00;
    v8[4] = a1;
    void v8[5] = a2;
  }

  else
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
  }

  sub_100019310(v3, 112LL);
  EmbeddedChannel.init(handlers:loop:)((uint64_t)v8, a3);
  sub_10002A3D4();
}

void EmbeddedChannel.__allocating_init(handlers:loop:)()
{
  uint64_t v1 = sub_1001AE724();
  EmbeddedChannel.init(handlers:loop:)(v1, v2);
  sub_1000193B8();
}

uint64_t EmbeddedChannel.init(handlers:loop:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v2[1].i8[8] = 1;
  v2[2].i64[0] = 0LL;
  v2[2].i64[1] = (uint64_t)j_j__malloc;
  v2[1].i64[0] = 0LL;
  v2[3].i64[0] = (uint64_t)j_j__realloc;
  v2[3].i64[1] = (uint64_t)j_j__free;
  v2[4].i64[0] = (uint64_t)sub_10005B53C;
  uint64_t v6 = type metadata accessor for EmbeddedEventLoop();
  uint64_t v7 = sub_100019310(v6, 48LL);
  EmbeddedEventLoop.init()();
  v3[4].i64[1] = v7;
  v3[5] = vdupq_n_s64(0xF000000000000007LL);
  v3[6].i64[0] = 0LL;
  v3[6].i64[1] = 0LL;
  sub_10002A718((uint64_t)&v3[4].i64[1], (uint64_t)v28, 1LL);
  v3[4].i64[1] = a2;
  sub_10002A674();
  sub_100024F0C();
  uint64_t v8 = type metadata accessor for ChannelPipeline();
  uint64_t v9 = sub_100019310(v8, 80LL);
  uint64_t v10 = sub_10002A4C8();
  v3[2].i64[0] = sub_1001ADDE8(v10, v9);
  uint64_t v11 = swift_release();
  if (v3[2].i64[0])
  {
    ChannelPipeline.syncOperations.getter();
    uint64_t v11 = sub_1000969B0(a1, 1LL, 0x8000000000000000LL);
    if ((v12 & 1) == 0)
    {
      sub_100024F0C();
      swift_bridgeObjectRelease();
      uint64_t v13 = sub_1001AE888();
      sub_1001A8C24(v13, v14, v15, v16, v17, v18);
      uint64_t v19 = sub_1001AE888();
      sub_1001A9158(v19, v20, v21, v22, v23);
      sub_100024F0C();
      swift_release();
      return (uint64_t)v3;
    }
  }

  else
  {
    __break(1u);
  }

  uint64_t v27 = v11;
  uint64_t v25 = v11;
  uint64_t v26 = sub_1000175B0(&qword_1002A9710);
  swift_willThrowTypedImpl(&v27, v26, &protocol self-conformance witness table for Error);
  sub_100024F0C();
  swift_bridgeObjectRelease();
  uint64_t result = swift_unexpectedError(v25, "ASOctaneSupportXPCService/Embedded.swift", 40LL, 1LL, 663LL);
  __break(1u);
  return result;
}

void EmbeddedChannel.setOption<A>(_:value:)()
{
}

void EmbeddedChannel.setOptionSync<A>(_:value:)()
{
}

void EmbeddedChannel.getOption<A>(_:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v3,  v1,  &protocol requirements base descriptor for ChannelOption,  &associated type descriptor for ChannelOption.Value);
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v7 = (char *)&v9 - v6;
  uint64_t v8 = EmbeddedChannel.eventLoop.getter();
  swift_getObjectType(v8);
  EmbeddedChannel.getOptionSync<A>(_:)(v2, v1, v0, (uint64_t)v7);
  sub_1001AE740();
  EventLoop.makeSucceededFuture<A>(_:file:line:)();
  swift_unknownObjectRelease(v8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  sub_100023E74();
}

uint64_t EmbeddedChannel.getOptionSync<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v17 - v10;
  uint64_t v12 = sub_1001AE820((uint64_t)&v17 - v10);
  if (swift_dynamicCast(v12, v11, a2, &type metadata for ChannelOptions.Types.AutoReadOption, 6LL))
  {
    LOBYTE(v17) = 1;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a3,  a2,  &protocol requirements base descriptor for ChannelOption,  &associated type descriptor for ChannelOption.Value);
    return swift_dynamicCast(a4, &v17, &type metadata for Bool, AssociatedTypeWitness, 7LL);
  }

  else
  {
    sub_1001AE820((uint64_t)v9);
    uint64_t v17 = 0LL;
    uint64_t v18 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(23LL);
    v15._unint64_t countAndFlagsBits = 0x206E6F6974706FLL;
    v15._object = (void *)0xE700000000000000LL;
    String.append(_:)(v15);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(v9, a2);
    v16._unint64_t countAndFlagsBits = 0x70757320746F6E20LL;
    v16._object = (void *)0xEE00646574726F70LL;
    String.append(_:)(v16);
    uint64_t result = sub_1001AE8A4( (uint64_t)"Fatal error",  11LL,  2LL,  v17,  v18,  (uint64_t)"ASOctaneSupportXPCService/Embedded.swift");
    __break(1u);
  }

  return result;
}

uint64_t EmbeddedChannel.bind(to:promise:)()
{
  if (v2)
  {
    uint64_t v3 = sub_100019310((uint64_t)&unk_10028FDB0, 32LL);
    *(void *)(v3 + sub_100195C94(v0 + 16) = v0;
    *(void *)(v3 + 24) = v1;
    uint64_t v4 = sub_100019310((uint64_t)&unk_10028FDD8, 32LL);
    sub_1001AE814(v4, (uint64_t)sub_1001ADF70);
    sub_10002A4C8();
    sub_10002A75C();
    ChannelPipeline.syncOperations.getter();
    sub_1001AE6E8();
    sub_10002A524();
  }

  EmbeddedChannel.pipeline.getter();
  uint64_t v5 = sub_1001AE724();
  ChannelPipeline.bind(to:promise:)(v5, v6);
  return sub_10009B134(v0);
}

uint64_t sub_1001AD25C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 80);
  *(void *)(a1 + 8sub_10019B2E8(v0, 0) = a2;
  sub_100029DF4(v4);
  return swift_retain();
}

uint64_t EmbeddedChannel.connect(to:promise:)()
{
  if (v2)
  {
    uint64_t v3 = sub_100019310((uint64_t)&unk_10028FE00, 32LL);
    *(void *)(v3 + sub_100195C94(v0 + 16) = v0;
    *(void *)(v3 + 24) = v1;
    uint64_t v4 = sub_100019310((uint64_t)&unk_10028FE28, 32LL);
    sub_1001AE814(v4, (uint64_t)sub_1001ADFB8);
    sub_10002A4C8();
    sub_10002A75C();
    ChannelPipeline.syncOperations.getter();
    sub_1001AE6E8();
    sub_10002A524();
  }

  EmbeddedChannel.pipeline.getter();
  uint64_t v5 = sub_1001AE724();
  ChannelPipeline.connect(to:promise:)(v5, v6);
  return sub_10009B134(v0);
}

uint64_t sub_1001AD334(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = a2;
  sub_100029DF4(v4);
  return swift_retain();
}

uint64_t *EmbeddedChannel.deinit()
{
  return v0;
}

uint64_t EmbeddedChannel.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 112LL, 7LL);
}

uint64_t sub_1001AD3E0()
{
  return *(void *)(v0 + 40);
}

uint64_t sub_1001AD41C()
{
  uint64_t v1 = *(void *)(v0 + 80);
  sub_100029DDC(v1);
  return v1;
}

uint64_t sub_1001AD460()
{
  uint64_t v1 = *(void *)(v0 + 88);
  sub_100029DDC(v1);
  return v1;
}

uint64_t sub_1001AD4A4()
{
  return swift_unknownObjectRetain(*(void *)(v0 + 96));
}

void sub_1001AD4C8()
{
}

uint64_t sub_1001AD4D8()
{
  return *(unsigned __int8 *)(v0 + 24);
}

void sub_1001AD50C()
{
}

uint64_t EmbeddedChannel.syncOptions.getter@<X0>(void *a1@<X8>)
{
  a1[3] = &type metadata for EmbeddedChannel.SynchronousOptions;
  a1[4] = &protocol witness table for EmbeddedChannel.SynchronousOptions;
  *a1 = v1;
  return swift_retain(v1);
}

uint64_t sub_1001AD54C()
{
  return EmbeddedChannel.bind(to:promise:)();
}

uint64_t sub_1001AD56C()
{
  return EmbeddedChannel.connect(to:promise:)();
}

void sub_1001AD58C()
{
}

uint64_t EmbeddedChannel.SynchronousOptions.getOption<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return EmbeddedChannel.getOptionSync<A>(_:)(a1, a2, a3, a4);
}

uint64_t sub_1001AD5DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return EmbeddedChannel.SynchronousOptions.getOption<A>(_:)(a1, a2, a3, a4);
}

uint64_t sub_1001AD5F8()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t type metadata accessor for EmbeddedScheduledTask()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCServiceP33_2BD33AE1E0B741588AA1A4B01A075DD021EmbeddedScheduledTask);
}

uint64_t sub_1001AD644()
{
  return sub_1001AA6EC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1001AD64C()
{
  uint64_t v1 = sub_1001AE56C();
  uint64_t v2 = (uint64_t *)sub_1001AE59C((uint64_t)v1);
  *(void *)(v0 + 3sub_100019F7C(v0 + 2) = sub_1001AD76C(v2, v3, v4);
  sub_1000193B8();
}

void sub_1001AD680()
{
  uint64_t v1 = sub_1001AE56C();
  uint64_t v2 = sub_1001AE59C((uint64_t)v1);
  sub_1001AD7D8(v2, v3);
  *(void *)(v0 + 3sub_100019F7C(v0 + 2) = v4;
  sub_1000193B8();
}

void sub_1001AD6B0()
{
  uint64_t v1 = sub_1001AE56C();
  uint64_t v2 = sub_1001AE59C((uint64_t)v1);
  sub_1001AD818(v2, v3);
  *(void *)(v0 + 3sub_100019F7C(v0 + 2) = v4;
  sub_1000193B8();
}

void sub_1001AD6E0()
{
  uint64_t v1 = sub_1001AE56C();
  uint64_t v2 = (uint64_t *)sub_1001AE59C((uint64_t)v1);
  *(void *)(v0 + 3sub_100019F7C(v0 + 2) = sub_1001AD860(v2, v3, v4);
  sub_1000193B8();
}

void sub_1001AD710()
{
  uint64_t v1 = sub_1001AE56C();
  uint64_t v2 = sub_1001AE59C((uint64_t)v1);
  sub_1001AD8CC(v2, v3);
  *(void *)(v0 + 3sub_100019F7C(v0 + 2) = v4;
  sub_1000193B8();
}

void sub_1001AD740(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

uint64_t (*sub_1001AD76C(uint64_t *a1, uint64_t a2, uint64_t a3))(void *)
{
  unint64_t v6 = a3 & 0xC000000000000001LL;
  sub_100119E64(a2, (a3 & 0xC000000000000001LL) == 0, a3);
  if (v6) {
    uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
  }
  else {
    uint64_t v7 = swift_retain(*(void *)(a3 + 8 * a2 + 32));
  }
  *a1 = v7;
  return j__s25ASOctaneSupportXPCService10ByteBufferVwxx;
}

void sub_1001AD7D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AE580(a1, a2);
  sub_100119E64(v4, v5, v6);
  if (v3) {
    uint64_t v7 = sub_1001AE5F0();
  }
  else {
    uint64_t v7 = sub_1001AE774();
  }
  *uint64_t v2 = v7;
  sub_1000193B8();
}

void sub_1001AD818(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AE580(a1, a2);
  sub_100119E64(v4, v5, v6);
  if (v3) {
    uint64_t v7 = sub_1001AE5F0();
  }
  else {
    uint64_t v7 = (uint64_t)sub_1001AE780();
  }
  *uint64_t v2 = v7;
  sub_1000193B8();
}

void sub_1001AD858(id *a1)
{
}

uint64_t (*sub_1001AD860(uint64_t *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = a3 & 0xC000000000000001LL;
  sub_100119E64(a2, (a3 & 0xC000000000000001LL) == 0, a3);
  if (v6) {
    uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
  }
  else {
    uint64_t v7 = swift_retain();
  }
  *a1 = v7;
  return destroy for ByteBuffer;
}

void sub_1001AD8CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001AE580(a1, a2);
  sub_100119E64(v4, v5, v6);
  if (v3) {
    uint64_t v7 = sub_1001AE5F0();
  }
  else {
    uint64_t v7 = (uint64_t)sub_1001AE780();
  }
  *uint64_t v2 = v7;
  sub_1000193B8();
}

void sub_1001AD90C(unint64_t a1)
{
  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native(*v1) & 1) == 0)
  {
    sub_1000F2440();
    uint64_t v3 = v4;
  }

  unint64_t v5 = *(void *)(v3 + 16);
  if (v5 <= a1)
  {
    __break(1u);
  }

  else
  {
    unint64_t v6 = v5 - 1;
    sub_1000314BC(v3 + 8 * a1 + 40, v5 - 1 - a1, v3 + 8 * a1 + 32);
    *(void *)(v3 + sub_100195C94(v0 + 16) = v6;
    *uint64_t v1 = v3;
  }

void sub_1001AD980( unint64_t a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v7 = *v3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  *uint64_t v3 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v7 = a2(v7);
    *uint64_t v3 = v7;
  }

  unint64_t v9 = *(void *)(v7 + 16);
  if (v9 <= a1)
  {
    __break(1u);
  }

  else
  {
    unint64_t v10 = v9 - 1;
    uint64_t v11 = a3(v7 + 8 * a1 + 40, v9 - 1 - a1);
    *(void *)(*v3 + sub_100195C94(v0 + 16) = v10;
    specialized ContiguousArray._endMutation()(v11);
    sub_10002A3D4();
  }

uint64_t sub_1001ADA04()
{
  uint64_t v0 = sub_10010E20C();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1001ADA14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10019B2E8(v0, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001ADA24(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1001ADA2C()
{
  return sub_1001AB714(v0);
}

void sub_1001ADA34()
{
  uint64_t v1 = *v0;
  if ((swift_isUniquelyReferenced_nonNull_native(*v0) & 1) == 0)
  {
    sub_1000F2440();
    uint64_t v1 = v2;
  }

  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    *(void *)(v1 + sub_100195C94(v0 + 16) = v3 - 1;
    void *v0 = v1;
  }

  else
  {
    __break(1u);
  }

void sub_1001ADA88()
{
}

void sub_1001ADA94(uint64_t (*a1)(uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *uint64_t v1 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t isUniquelyReferenced_nonNull_native = a1(v3);
    uint64_t v3 = isUniquelyReferenced_nonNull_native;
    *uint64_t v1 = isUniquelyReferenced_nonNull_native;
  }

  uint64_t v5 = *(void *)(v3 + 16);
  if (v5)
  {
    *(void *)(v3 + sub_100195C94(v0 + 16) = v5 - 1;
    specialized ContiguousArray._endMutation()(isUniquelyReferenced_nonNull_native);
    sub_1000193B8();
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1001ADAF8()
{
  return swift_deallocObject(v0, 33LL, 7LL);
}

uint64_t sub_1001ADB24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002AA4D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for EmbeddedChannelCore()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService19EmbeddedChannelCore);
}

unint64_t sub_1001ADB8C()
{
  unint64_t result = qword_1002B8CF0;
  if (!qword_1002B8CF0)
  {
    unint64_t result = swift_getWitnessTable( protocol conformance descriptor for EmbeddedChannel.WrongTypeError,  &type metadata for EmbeddedChannel.WrongTypeError);
    atomic_store(result, (unint64_t *)&qword_1002B8CF0);
  }

  return result;
}

uint64_t type metadata accessor for EmbeddedEventLoop()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService17EmbeddedEventLoop);
}

void sub_1001ADBEC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  *(_WORD *)(a5 + 88) = 0;
  *(void *)(a5 + 4sub_10019B2E8(v0, 0) = a1;
  *(void *)(a5 + 48) = a2;
  *(void *)(a5 + 3sub_100019F7C(v0 + 2) = a4;
  uint64_t v8 = sub_100099EE4((uint64_t)a3, *a3, (uint64_t)&protocol descriptor for _ChannelInboundHandler);
  if (v8)
  {
    uint64_t v9 = v7;
    sub_10009B28C();
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  *(void *)(a5 + 56) = v8;
  *(void *)(a5 + 64) = v9;
  uint64_t v10 = sub_100099EE4((uint64_t)a3, *a3, (uint64_t)&protocol descriptor for _ChannelOutboundHandler);
  if (!v10)
  {
    sub_100024F0C();
    uint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
  }

  *(void *)(a5 + 7sub_100019F7C(v0 + 2) = v10;
  *(void *)(a5 + 8sub_10019B2E8(v0, 0) = v11;
  *(void *)(a5 + sub_100195C94(v0 + 16) = 0LL;
  *(void *)(a5 + 24) = 0LL;
  if (*(void *)(a5 + 56) | v10) {
    sub_1000193B8();
  }
  else {
    __break(1u);
  }
}

void sub_1001ADC8C(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 3sub_100019F7C(v0 + 2) = 0LL;
  *(_BYTE *)(a2 + 4sub_10019B2E8(v0, 0) = 0;
  *(void *)(a2 + 64) = a1;
  *(void *)(a2 + 7sub_100019F7C(v0 + 2) = &off_1002768E8;
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(void *)(a2 + 56) = &protocol witness table for SelectableEventLoop;
  *(void *)(a2 + sub_100195C94(v0 + 16) = 0LL;
  uint64_t v3 = a2 + 16;
  *(void *)(a2 + 24) = 0LL;
  uint64_t v4 = type metadata accessor for HeadChannelHandler();
  ChannelPipeline.syncOperations.getter();
  sub_100041B5C();
  uint64_t inited = (uint64_t *)swift_initStaticObject(v4, &unk_1002A8E40);
  uint64_t v6 = type metadata accessor for ChannelHandlerContext();
  uint64_t v7 = sub_100019310(v6, 90LL);
  sub_10002A4C8();
  sub_1001ADBEC(1684104552LL, 0xE400000000000000LL, inited, a2, v7);
  *(void *)uint64_t v3 = v8;
  swift_release();
  uint64_t v9 = type metadata accessor for TailChannelHandler();
  uint64_t v10 = (uint64_t *)swift_initStaticObject(v9, &unk_1002A8E58);
  uint64_t v11 = sub_100019310(v6, 90LL);
  sub_10002A4C8();
  sub_1001ADBEC(1818845556LL, 0xE400000000000000LL, v10, a2, v11);
  uint64_t v13 = v12;
  sub_100024F0C();
  *(void *)(a2 + 24) = v13;
  swift_release();
  if (*(void *)v3)
  {
    *(void *)(*(void *)v3 + 16LL) = *(void *)(a2 + 24);
    swift_retain();
    sub_100024F0C();
  }

  uint64_t v14 = *(void *)(a2 + 24);
  if (v14)
  {
    *(void *)(v14 + 24) = *(void *)v3;
    swift_retain();
    sub_100024F0C();
  }

  sub_10002A3D4();
}

uint64_t sub_1001ADDE8(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 3sub_100019F7C(v0 + 2) = 0LL;
  *(_BYTE *)(a2 + 4sub_10019B2E8(v0, 0) = 0;
  *(void *)(a2 + 64) = a1;
  *(void *)(a2 + 7sub_100019F7C(v0 + 2) = &protocol witness table for EmbeddedChannel;
  *(void *)(a2 + 48) = EmbeddedChannel.eventLoop.getter();
  *(void *)(a2 + 56) = &protocol witness table for EmbeddedEventLoop;
  *(void *)(a2 + sub_100195C94(v0 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  uint64_t v3 = type metadata accessor for HeadChannelHandler();
  swift_retain();
  uint64_t inited = (uint64_t *)swift_initStaticObject(v3, &unk_1002A8E40);
  uint64_t v5 = type metadata accessor for ChannelHandlerContext();
  uint64_t v6 = swift_allocObject(v5, 90LL, 7LL);
  swift_retain();
  sub_1001ADBEC(1684104552LL, 0xE400000000000000LL, inited, a2, v6);
  *(void *)(a2 + sub_100195C94(v0 + 16) = v7;
  swift_release();
  uint64_t v8 = type metadata accessor for TailChannelHandler();
  uint64_t v9 = (uint64_t *)swift_initStaticObject(v8, &unk_1002A8E58);
  uint64_t v10 = swift_allocObject(v5, 90LL, 7LL);
  swift_retain();
  sub_1001ADBEC(1818845556LL, 0xE400000000000000LL, v9, a2, v10);
  uint64_t v12 = v11;
  swift_release();
  *(void *)(a2 + 24) = v12;
  swift_release();
  if (*(void *)(a2 + 16))
  {
    *(void *)(*(void *)(a2 + 16) + 16LL) = *(void *)(a2 + 24);
    swift_retain();
    swift_release();
  }

  uint64_t v13 = *(void *)(a2 + 24);
  if (v13)
  {
    *(void *)(v13 + 24) = *(void *)(a2 + 16);
    swift_retain();
    swift_release();
  }

  return a2;
}

uint64_t sub_1001ADF70()
{
  return sub_1001AD25C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001ADF78()
{
  uint64_t v0 = sub_10010E20C();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1001ADF94()
{
  uint64_t v0 = sub_10010E20C();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1001ADFB8()
{
  return sub_1001AD334(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t type metadata accessor for EmbeddedChannel()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService15EmbeddedChannel);
}

unint64_t destroy for EmbeddedChannel.LeftOverState(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[1]);
    return swift_bridgeObjectRelease(a1[2]);
  }

  return result;
}

void _s25ASOctaneSupportXPCService15EmbeddedChannelC13LeftOverStateOwCP_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + sub_100195C94(v0 + 16) = *(void *)(a2 + 16);
  }

  else
  {
    uint64_t v2 = *(void *)(a2 + 8);
    uint64_t v3 = *(void *)(a2 + 16);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v2;
    *(void *)(a1 + sub_100195C94(v0 + 16) = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  sub_1000193B8();
}

unint64_t *assignWithCopy for EmbeddedChannel.LeftOverState( unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = v5;
      unint64_t v10 = a2[1];
      a1[1] = v10;
      unint64_t v11 = a2[2];
      a1[2] = v11;
      swift_bridgeObjectRetain(v5);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v11);
      return a1;
    }

void *assignWithTake for EmbeddedChannel.LeftOverState(void *a1, uint64_t a2)
{
  unint64_t v4 = *a1;
  if (v4 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[1]);
    swift_bridgeObjectRelease(a1[2]);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = *(void *)(a2 + 16);
    return a1;
  }

  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v5 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for EmbeddedChannel.LeftOverState(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for EmbeddedChannel.LeftOverState( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(void *)(result + sub_100195C94(v0 + 16) = 0LL;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }

  return result;
}

void *sub_1001AE2B4(void *result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    result[1] = 0LL;
    result[2] = 0LL;
  }

  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }

  *unint64_t result = v2;
  return result;
}

void type metadata accessor for EmbeddedChannel.LeftOverState()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for EmbeddedChannel.BufferState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *assignWithCopy for EmbeddedChannel.BufferState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t *assignWithTake for EmbeddedChannel.BufferState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for EmbeddedChannel.BufferState(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for EmbeddedChannel.BufferState( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0LL;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }

  return result;
}

void type metadata accessor for EmbeddedChannel.BufferState()
{
}

void type metadata accessor for EmbeddedChannel.WrongTypeError()
{
}

void type metadata accessor for EmbeddedChannel.SynchronousOptions()
{
}