unint64_t sub_1000CCD60()
{
  return sub_1000CCD80((uint64_t (*)(void))sub_1000CD35C);
}

unint64_t sub_1000CCD80(uint64_t (*a1)(void))
{
  unint64_t result = sub_1000CD370((uint64_t)v4, 0x80uLL, v1, a1);
  if (!v2) {
    return sub_1000CCF58();
  }
  return result;
}

void sub_1000CCE10(uint64_t a1, int a2)
{
  if ((_DWORD)a1 == 6 && a2 == 1)
  {
    unint64_t v4 = sub_1000CCD80((uint64_t (*)(void))sub_1000CD348);
    if (v2)
    {
      a1 = swift_errorRelease(v2);
    }

    else
    {
      unint64_t v5 = v4;
      a1 = swift_release();
      if ((v5 & 0x8000000000000000LL) != 0) {
        return;
      }
    }
  }

  __chkstk_darwin(a1);
  sub_100150734();
}

uint64_t sub_1000CCEDC(unint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(v1 + 16);
  if ((v2 & 0x80000000) != 0)
  {
    unint64_t v5 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v5);
    sub_100073658();
    return sub_100052668(v6, v7);
  }

  else
  {
    swift_retain();
    sub_1000CD894(v2, a1);
    return swift_release();
  }

unint64_t sub_1000CCF58()
{
  int v9 = *(unsigned __int8 *)(v0 + 1);
  if (v9 == 1)
  {
    uint64_t v14 = sub_1000175B0(&qword_1002AFF60);
    uint64_t v15 = sub_100019310(v14, 122LL);
    return sub_1000CDB8C(v15);
  }

  if (v9 == 30)
  {
    sub_1000CDC60();
    unint64_t v43 = v2;
    unint64_t v44 = v6;
    sub_1000CB4F4(v10, &v43);
    if (!v1)
    {
      uint64_t v11 = sub_1000175B0(&qword_1002AAFA0);
      uint64_t v12 = sub_100019310(v11, 64LL);
      return sub_1000CDC38(v12);
    }

    uint64_t v24 = sub_1000CDC98();
    goto LABEL_13;
  }

  if (v9 != 2)
  {
    _StringGuts.grow(_:)(26LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    unint64_t v43 = 0xD000000000000018LL;
    unint64_t v44 = 0x800000010021C050LL;
    v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
    object = v29._object;
    String.append(_:)(v29);
    swift_bridgeObjectRelease(object);
    sub_1000CDC84();
    _assertionFailure(_:_:file:line:flags:)(v31, v32, v33, v34, v35, v36, v37, v38);
    __break(1u);
    goto LABEL_12;
  }

  sub_1000CDBDC();
  LOBYTE(v43) = v0;
  BYTE1(v43) = v16;
  WORD1(v43) = v2;
  HIDWORD(v43) = v3;
  LOBYTE(v44) = v4;
  BYTE1(v44) = v5;
  BYTE2(v44) = v6;
  BYTE3(v44) = v7;
  BYTE4(v44) = v8;
  char v41 = v18;
  char v42 = v17;
  BYTE5(v44) = v17;
  BYTE6(v44) = v18;
  HIBYTE(v44) = v0;
  uint64_t v20 = sub_1000CB520(v19, (char *)&v43 + 4);
  uint64_t v39 = v21;
  uint64_t v40 = v20;
  if (v1)
  {
LABEL_12:
    uint64_t v24 = sub_1000CDCAC();
LABEL_13:
    unint64_t result = swift_unexpectedError(v24, v25, v26, v27, v28);
    __break(1u);
    return result;
  }

  uint64_t v22 = sub_1000175B0(&qword_1002AAFA8);
  uint64_t v23 = sub_100019310(v22, 48LL);
  unint64_t result = sub_1000CDC0C(v23);
  *(_BYTE *)(result + 29) = v42;
  *(_BYTE *)(result + 30) = v41;
  *(_BYTE *)(result + 31) = v0;
  *(void *)(result + 32) = v40;
  *(void *)(result + 40) = v39;
  return result;
}

uint64_t sub_1000CD180()
{
  return sub_1000CCC78((uint64_t (*)(void))sub_1000CDB54);
}

unint64_t sub_1000CD1B0(uint64_t a1)
{
  char v10 = a1;
  int v11 = *(unsigned __int8 *)(a1 + 1);
  switch(v11)
  {
    case 1:
      uint64_t v24 = sub_1000175B0(&qword_1002AFF60);
      uint64_t v25 = sub_100019310(v24, 122LL);
      return sub_1000CDB8C(v25);
    case 30:
      sub_1000CDC60();
      uint64_t v35 = v3;
      uint64_t v36 = v7;
      sub_1000CB4F4(v21, &v35);
      if (!v2)
      {
        uint64_t v22 = sub_1000175B0(&qword_1002AAFA0);
        uint64_t v23 = sub_100019310(v22, 64LL);
        return sub_1000CDC38(v23);
      }

      uint64_t v26 = sub_1000CDC98();
      goto LABEL_13;
    case 2:
      sub_1000CDBDC();
      LOBYTE(v35) = v1;
      BYTE1(v35) = v12;
      WORD1(v35) = v3;
      HIDWORD(v35) = v4;
      LOBYTE(v36) = v5;
      BYTE1(v36) = v6;
      BYTE2(v36) = v7;
      BYTE3(v36) = v8;
      BYTE4(v36) = v9;
      char v33 = v14;
      char v34 = v13;
      BYTE5(v36) = v13;
      BYTE6(v36) = v14;
      HIBYTE(v36) = v10;
      uint64_t v16 = sub_1000CB520(v15, (char *)&v35 + 4);
      uint64_t v31 = v17;
      uint64_t v32 = v16;
      if (!v2)
      {
        uint64_t v18 = sub_1000175B0(&qword_1002AAFA8);
        uint64_t v19 = sub_100019310(v18, 48LL);
        unint64_t result = sub_1000CDC0C(v19);
        *(_BYTE *)(result + 29) = v34;
        *(_BYTE *)(result + 30) = v33;
        *(_BYTE *)(result + 31) = v10;
        *(void *)(result + 32) = v32;
        *(void *)(result + 40) = v31;
        return result;
      }

      uint64_t v26 = sub_1000CDCAC();
LABEL_13:
      unint64_t result = swift_unexpectedError(v26, v27, v28, v29, v30);
      __break(1u);
      return result;
  }

  return 0xF000000000000007LL;
}

void sub_1000CD348()
{
}

void sub_1000CD35C()
{
}

uint64_t sub_1000CD370(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    char v8 = "Negative value is not representable";
    uint64_t v9 = 35LL;
LABEL_8:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v8,  v9,  2LL,  "Swift/Integers.swift",  20LL);
    __break(1u);
    return result;
  }

  if (HIDWORD(a2))
  {
    char v8 = "Not enough bits to represent the passed value";
    uint64_t v9 = 45LL;
    goto LABEL_8;
  }

  if ((*(_DWORD *)(a3 + 16) & 0x80000000) == 0) {
    return a4();
  }
  unint64_t v5 = sub_100025100();
  uint64_t v6 = swift_allocError(&type metadata for IOError, v5, 0LL, 0LL);
  *(void *)uint64_t v7 = 0xD00000000000001FLL;
  *(void *)(v7 + 8) = 0x80000001002194A0LL;
  *(_DWORD *)(v7 + 16) = 9;
  return swift_willThrow(v6);
}

uint64_t type metadata accessor for BaseSocket()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService10BaseSocket);
}

uint64_t sub_1000CD4E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a5 - 8);
  unint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(a1);
  (*(void (**)(char *))(v9 + 16))((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if ((v10 & 0x8000000000000000LL) != 0)
  {
    char v12 = "Negative value is not representable";
    uint64_t v13 = 35LL;
  }

  else
  {
    if (!HIDWORD(v10))
    {
      sub_100171484(a1, a3, a4, (uint64_t)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL), v10);
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))( (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a5);
    }

    char v12 = "Not enough bits to represent the passed value";
    uint64_t v13 = 45LL;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v12,  v13,  2LL,  "Swift/Integers.swift",  20LL);
  __break(1u);
  return result;
}

uint64_t sub_1000CD668@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = *(void *)(a4 - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  if ((v7 & 0x8000000000000000LL) != 0)
  {
    uint64_t v21 = "Negative value is not representable";
    uint64_t v22 = 35LL;
LABEL_20:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v21,  v22,  2LL,  "Swift/Integers.swift",  20LL);
    __break(1u);
    return result;
  }

  if (HIDWORD(v7))
  {
    uint64_t v21 = "Not enough bits to represent the passed value";
    uint64_t v22 = 45LL;
    goto LABEL_20;
  }

  socklen_t v24 = *(void *)(v6 + 64);
  uint64_t v12 = *(void *)(v6 + 72);
  uint64_t v13 = (_BYTE *)static UnsafeMutableRawBufferPointer.allocate(byteCount:alignment:)( v12,  *(unsigned __int8 *)(v6 + 80) + 1LL);
  uint64_t v15 = (uint64_t)v14;
  sub_100078CA8(0LL, v13, v14);
  if (v13)
  {
    if (v12)
    {
      if (v15 - (void)v13 != 0x8000000000000000LL || v12 != -1)
      {
        uint64_t v17 = (v15 - (uint64_t)v13) / v12;
        goto LABEL_11;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
LABEL_17:
    __break(1u);
  }

  uint64_t v17 = 0LL;
LABEL_11:
  uint64_t v18 = UnsafeMutableBufferPointer.baseAddress.getter(v13, v17, a4);
  if (!v18) {
    goto LABEL_17;
  }
  uint64_t v19 = v18;
  sub_1001711C4(a1, a2, a3, v18, &v24);
  if (!v5) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a5, v19, a4);
  }
  return sub_1000CD84C(v19, (uint64_t)v13, v15, a4);
}

uint64_t sub_1000CD84C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = UnsafeMutablePointer.deinitialize(count:)(1LL, a1, a4);
  if (a2) {
    return swift_slowDealloc(a2, -1LL, -1LL);
  }
  return result;
}

uint64_t sub_1000CD894(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
  {
    if (a2 >> 62 == 1)
    {
      int v2 = *(_DWORD *)(a2 + 20);
      uint64_t v3 = *(void *)(a2 + 24);
      uint64_t v4 = *(void *)(a2 + 32);
      int v5 = *(_DWORD *)(a2 + 40);
      LODWORD(v16) = *(_DWORD *)(a2 + 16);
      DWORD1(v16) = v2;
      *((void *)&v16 + 1) = v3;
      *(void *)&__int128 v17 = v4;
      DWORD2(v17) = v5;
      unint64_t v6 = 28LL;
    }

    else
    {
      __int16 v8 = *(_WORD *)(a2 + 120);
      __int128 v9 = *(_OWORD *)(a2 + 32);
      __int128 v10 = *(_OWORD *)(a2 + 48);
      __int128 v11 = *(_OWORD *)(a2 + 64);
      __int128 v12 = *(_OWORD *)(a2 + 80);
      __int128 v13 = *(_OWORD *)(a2 + 96);
      __int128 v16 = *(_OWORD *)(a2 + 16);
      __int128 v17 = v9;
      uint64_t v14 = *(void *)(a2 + 112);
      __int128 v18 = v10;
      __int128 v19 = v11;
      __int128 v20 = v12;
      __int128 v21 = v13;
      uint64_t v22 = v14;
      __int16 v23 = v8;
      unint64_t v6 = 106LL;
    }
  }

  else
  {
    int v7 = *(_DWORD *)(a2 + 20);
    LODWORD(v16) = *(_DWORD *)(a2 + 16);
    DWORD1(v16) = v7;
    *((void *)&v16 + 1) = *(void *)(a2 + 24);
    unint64_t v6 = 16LL;
  }

  return sub_100170DF4(a1, (uint64_t)&v16, v6);
}

uint64_t sub_1000CD95C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176LL))();
}

uint64_t sub_1000CD984(unint64_t a1)
{
  return sub_1000CCEDC(a1);
}

unint64_t sub_1000CD9A4()
{
  return sub_1000CCD40();
}

unint64_t sub_1000CD9C4()
{
  return sub_1000CCD60();
}

void sub_1000CD9E4(uint64_t a1, int a2)
{
}

uint64_t sub_1000CDA04()
{
  return sub_1000CD180();
}

unint64_t sub_1000CDA24()
{
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 32032LL;
  v2._object = (void *)0xE200000000000000LL;
  String.append(_:)(v2);
  return 0xD000000000000010LL;
}

unint64_t sub_1000CDAC8()
{
  return sub_1000CDA24();
}

_UNKNOWN **sub_1000CDAE8()
{
  return &off_100281010;
}

unint64_t sub_1000CDAF4(uint64_t a1)
{
  unint64_t result = sub_1000CDB18();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000CDB18()
{
  unint64_t result = qword_1002B01A8;
  if (!qword_1002B01A8)
  {
    uint64_t v1 = type metadata accessor for BaseSocket();
    unint64_t result = swift_getWitnessTable(byte_1001FE13C, v1);
    atomic_store(result, (unint64_t *)&qword_1002B01A8);
  }

  return result;
}

uint64_t sub_1000CDB54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CD668(a1, *(unsigned int *)(v2 + 24), *(unsigned int *)(v2 + 28), *(void *)(v2 + 16), a2);
}

uint64_t sub_1000CDB70(uint64_t a1)
{
  return sub_1000CD4E4( a1,  *(void *)(v1 + 24),  *(unsigned int *)(v1 + 32),  *(unsigned int *)(v1 + 36),  *(void *)(v1 + 16));
}

unint64_t sub_1000CDB8C(uint64_t a1)
{
  *(_BYTE *)(a1 + 16) = v2;
  *(_BYTE *)(a1 + 17) = 1;
  *(_OWORD *)(a1 + 18) = *(_OWORD *)(v1 + 2);
  *(_OWORD *)(a1 + 34) = *(_OWORD *)(v1 + 18);
  *(_OWORD *)(a1 + 50) = *(_OWORD *)(v1 + 34);
  __int128 v4 = *(_OWORD *)(v1 + 66);
  __int128 v5 = *(_OWORD *)(v1 + 82);
  uint64_t v6 = *(void *)(v1 + 98);
  *(_OWORD *)(a1 + 66) = *(_OWORD *)(v1 + 50);
  *(_OWORD *)(a1 + 82) = v4;
  *(_OWORD *)(a1 + 98) = v5;
  unint64_t result = a1 | 0x8000000000000000LL;
  *(void *)(a1 + 114) = v6;
  return result;
}

  ;
}

uint64_t sub_1000CDC0C(uint64_t result)
{
  *(_BYTE *)(result + 16) = v1;
  *(_BYTE *)(result + 17) = 2;
  *(_WORD *)(result + 18) = v2;
  *(_DWORD *)(result + 20) = v3;
  *(_BYTE *)(result + 24) = v4;
  *(_BYTE *)(result + 25) = v5;
  *(_BYTE *)(result + 26) = v6;
  *(_BYTE *)(result + 27) = v7;
  *(_BYTE *)(result + 28) = v8;
  return result;
}

uint64_t sub_1000CDC38(uint64_t a1)
{
  *(_BYTE *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 17) = v9;
  *(_WORD *)(a1 + 18) = v4;
  *(_DWORD *)(a1 + 20) = v5;
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v7;
  *(_DWORD *)(a1 + 40) = v6;
  uint64_t result = a1 | 0x4000000000000000LL;
  *(void *)(a1 + 48) = v1;
  *(void *)(a1 + 56) = v2;
  return result;
}

  ;
}

uint64_t sub_1000CDC78()
{
  return sub_100024FB4(v0);
}

  ;
}

uint64_t sub_1000CDC98()
{
  return v0;
}

uint64_t sub_1000CDCAC()
{
  return v0;
}

uint64_t sub_1000CDCC0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_errorRelease(a14);
}

uint64_t sub_1000CDCC8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000CDD14 + 4 * byte_1001FE195[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000CDD48 + 4 * byte_1001FE190[v4]))();
}

uint64_t sub_1000CDD48(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CDD50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000CDD58LL);
  }
  return result;
}

uint64_t sub_1000CDD64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000CDD6CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000CDD70(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CDD78(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for StoreKitClientVersion()
{
}

uint64_t sub_1000CDD90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1;
  BOOL v157 = 1;
  BOOL v156 = 1;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain_n(a1, 2LL);
    char v9 = (uint64_t *)(v3 + 56);
    __int128 v10 = _swiftEmptyArrayStorage;
    do
    {
      unint64_t v12 = *(v9 - 3);
      unint64_t v11 = *(v9 - 2);
      uint64_t v14 = *(v9 - 1);
      uint64_t v13 = *v9;
      if ((v11 & 0x1000000000000000LL) != 0) {
        goto LABEL_9;
      }
      if ((v11 & 0x2000000000000000LL) != 0)
      {
        v154 = (void *)*(v9 - 3);
        uint64_t v155 = v11 & 0xFFFFFFFFFFFFFFLL;
      }

      else if ((v12 & 0x1000000000000000LL) == 0)
      {
        _StringObject.sharedUTF8.getter(*(v9 - 3));
      }

      sub_1000D0424();
      sub_100188130(v15, v16, v17, 0xEA00000000007A54LL);
      if ((v18 & 0xFE) == 2) {
LABEL_9:
      }
        char v18 = sub_100188228(0x2D656C7070412D58uLL, 0xEA00000000007A54LL, v12, v11, v5, v6, v7, v8);
      if ((v18 & 1) != 0)
      {
        swift_bridgeObjectRetain_n(v13, 2LL);
        sub_10001DBCC();
        if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
        {
          sub_1000D0438();
          __int128 v10 = v21;
        }

        unint64_t v19 = v10[2];
        unint64_t v2 = v19 + 1;
        if (v19 >= v10[3] >> 1)
        {
          sub_1000D0438();
          __int128 v10 = v22;
        }

        v10[2] = v2;
        __int128 v20 = &v10[2 * v19];
        v20[4] = v14;
        v20[5] = v13;
        swift_bridgeObjectRelease();
        sub_10001EDA0();
      }

      v9 += 4;
      --v4;
    }

    while (v4);
    uint64_t v3 = a1;
    swift_bridgeObjectRelease_n(a1, 2LL);
  }

  else
  {
    __int128 v10 = _swiftEmptyArrayStorage;
  }

  if (v10[2])
  {
    sub_100119E44(0LL, 1, (uint64_t)v10);
    uint64_t v24 = v10[4];
    unint64_t v23 = v10[5];
    sub_10001DBCC();
  }

  else
  {
    uint64_t v24 = 0LL;
    unint64_t v23 = 0xE000000000000000LL;
  }

  swift_bridgeObjectRelease();
  uint64_t v25 = HIBYTE(v23) & 0xF;
  uint64_t v26 = v24 & 0xFFFFFFFFFFFFLL;
  if ((v23 & 0x2000000000000000LL) != 0) {
    uint64_t v27 = HIBYTE(v23) & 0xF;
  }
  else {
    uint64_t v27 = v24 & 0xFFFFFFFFFFFFLL;
  }
  if (!v27) {
    goto LABEL_163;
  }
  if ((v23 & 0x1000000000000000LL) != 0)
  {
    uint64_t v29 = sub_100161AEC(v24, v23, 10LL);
    LOBYTE(v24) = v109;
    goto LABEL_57;
  }

  if ((v23 & 0x2000000000000000LL) == 0)
  {
    if ((v24 & 0x1000000000000000LL) != 0) {
      uint64_t v28 = (unsigned __int8 *)((v23 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v28 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v24);
    }
    uint64_t v29 = (uint64_t)sub_100161AC4(v28, v26);
    LOBYTE(v24) = v30 & 1;
    goto LABEL_57;
  }

  v154 = (void *)v24;
  uint64_t v155 = v23 & 0xFFFFFFFFFFFFFFLL;
  if (v24 == 43)
  {
    if (v25)
    {
      if (v25 != 1 && (BYTE1(v24) - 48) <= 9u)
      {
        uint64_t v29 = (BYTE1(v24) - 48);
        if (v25 == 2) {
          goto LABEL_56;
        }
        if ((BYTE2(v24) - 48) <= 9u)
        {
          uint64_t v29 = 10LL * (BYTE1(v24) - 48) + (BYTE2(v24) - 48);
          if (v25 != 3)
          {
            while (1)
            {
              sub_100024EAC();
              if (!v32 & v31) {
                goto LABEL_54;
              }
              sub_1000D03A8();
              if (!v32) {
                goto LABEL_54;
              }
              uint64_t v29 = v34 + v33;
              if (__OFADD__(v34, v33)) {
                goto LABEL_54;
              }
              sub_100058A24();
              if (v32) {
                goto LABEL_57;
              }
            }
          }

          goto LABEL_56;
        }
      }

      goto LABEL_54;
    }
  }

  else
  {
    if (v24 != 45)
    {
      if (v25 && (v24 - 48) <= 9u)
      {
        uint64_t v29 = (v24 - 48);
        if (v25 == 1) {
          goto LABEL_56;
        }
        if ((BYTE1(v24) - 48) <= 9u)
        {
          uint64_t v29 = 10LL * (v24 - 48) + (BYTE1(v24) - 48);
          if (v25 != 2)
          {
            while (1)
            {
              sub_100024EAC();
              if (!v32 & v31) {
                goto LABEL_54;
              }
              sub_1000D03A8();
              if (!v32) {
                goto LABEL_54;
              }
              uint64_t v29 = v106 + v105;
              if (__OFADD__(v106, v105)) {
                goto LABEL_54;
              }
              sub_100058A24();
              if (v32) {
                goto LABEL_57;
              }
            }
          }

          goto LABEL_56;
        }
      }

LABEL_56:
          LOBYTE(v24) = 0;
          goto LABEL_57;
        }
      }

      goto LABEL_54;
    }

    __break(1u);
  }

  __break(1u);
LABEL_168:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

              __break(1u);
              goto LABEL_57;
            }

uint64_t sub_1000CEC04(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v28 = a3;
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    unint64_t v26 = a4;
    unint64_t v12 = (uint64_t *)(a2 + 56);
    do
    {
      unint64_t v14 = *(v12 - 3);
      unint64_t v13 = *(v12 - 2);
      uint64_t v15 = *(v12 - 1);
      uint64_t v16 = *v12;
      if ((v13 & 0x1000000000000000LL) != 0
        || ((v13 & 0x2000000000000000LL) != 0
          ? (v18 = HIBYTE(v13) & 0xF, v27[0] = *(v12 - 3), v27[1] = v13 & 0xFFFFFFFFFFFFFFLL, uint64_t v17 = v27)
          : (v14 & 0x1000000000000000LL) == 0
          ? (uint64_t v17 = (_BYTE *)_StringObject.sharedUTF8.getter(*(v12 - 3)))
          : (_BYTE *)(uint64_t v17 = (_BYTE *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 32), v18 = v14 & 0xFFFFFFFFFFFFLL),
            sub_100188130(v17, v18, v28, a4),
            (v19 & 0xFE) == 2))
      {
        char v20 = sub_100188228(v28, a4, v14, v13, v8, v9, v10, v11);
      }

      else
      {
        char v20 = v19 & 1;
      }

      swift_bridgeObjectRetain_n(v16, 2LL);
      swift_bridgeObjectRetain();
      if ((v20 & 1) != 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(a1) & 1) == 0)
        {
          sub_10002EC18();
          a1 = v23;
        }

        unint64_t v21 = *(void *)(a1 + 16);
        if (v21 >= *(void *)(a1 + 24) >> 1)
        {
          sub_10002EC18();
          a1 = v24;
        }

        *(void *)(a1 + 16) = v21 + 1;
        uint64_t v22 = a1 + 16 * v21;
        *(void *)(v22 + 32) = v15;
        *(void *)(v22 + 40) = v16;
        a4 = v26;
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      v12 += 4;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      --v6;
    }

    while (v6);
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000CEDCC(char a1)
{
  if ((a1 & 1) != 0) {
    return 3157554LL;
  }
  else {
    return 3157553LL;
  }
}

uint64_t sub_1000CEDE4(uint64_t a1, unint64_t a2)
{
  if (a1 == 49 && a2 == 0xE100000000000000LL)
  {
    unint64_t v6 = 0xE100000000000000LL;
    goto LABEL_14;
  }

  if ((sub_1000D0358(49LL, 0xE100000000000000LL) & 1) != 0) {
    goto LABEL_11;
  }
  if (a1 == 3157553 && a2 == 0xE300000000000000LL)
  {
    unint64_t v6 = 0xE300000000000000LL;
    goto LABEL_14;
  }

  if ((sub_1000D0358(3157553LL, 0xE300000000000000LL) & 1) != 0)
  {
LABEL_11:
    unint64_t v6 = a2;
LABEL_14:
    swift_bridgeObjectRelease(v6);
    return 0LL;
  }

  if (a1 == 50 && a2 == 0xE100000000000000LL)
  {
    unint64_t v10 = 0xE100000000000000LL;
  }

  else
  {
    if ((sub_1000D0358(50LL, 0xE100000000000000LL) & 1) == 0)
    {
      if (a1 == 3157554 && a2 == 0xE300000000000000LL)
      {
        unint64_t v10 = 0xE300000000000000LL;
        goto LABEL_29;
      }

      if ((sub_1000D0358(3157554LL, 0xE300000000000000LL) & 1) == 0)
      {
        if (qword_1002A8D90 != -1) {
          swift_once(&qword_1002A8D90, sub_100183E34);
        }
        uint64_t v11 = type metadata accessor for Logger(0LL);
        sub_100018F68(v11, (uint64_t)qword_1002EB9D0);
        uint64_t v12 = swift_bridgeObjectRetain(a2);
        unint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
        os_log_type_t v14 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v13, v14))
        {
          uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v16 = swift_slowAlloc(32LL, -1LL);
          uint64_t v18 = v16;
          *(_DWORD *)uint64_t v15 = 136315138;
          swift_bridgeObjectRetain(a2);
          uint64_t v17 = sub_1000CF360(a1, a2, &v18);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v15 + 4);
          swift_bridgeObjectRelease_n(a2, 3LL);
          _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "Defaulting to legacy StoreKit mode because an invalid header version value was provided (%s)",  v15,  0xCu);
          swift_arrayDestroy(v16, 1LL);
          sub_10001A408(v16);
          sub_10001A408((uint64_t)v15);
        }

        else
        {

          swift_bridgeObjectRelease_n(a2, 2LL);
        }

        return 0LL;
      }
    }

    unint64_t v10 = a2;
  }

BOOL sub_1000CF038(Swift::String a1)
{
  v1._rawValue = &off_1002708B8;
  return sub_1000CF06C(a1, v1);
}

unint64_t sub_1000CF044()
{
  return 0xD000000000000023LL;
}

BOOL sub_1000CF060(Swift::String a1)
{
  v1._rawValue = &off_1002708F0;
  return sub_1000CF06C(a1, v1);
}

BOOL sub_1000CF06C(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  sub_100019390();
  return v5 != 0;
}

uint64_t sub_1000CF0A8()
{
  return 1766222167LL;
}

BOOL sub_1000CF0C4@<W0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_1002708B8;
  BOOL result = sub_1000CF06C(*a1, v3);
  *a2 = result;
  return result;
}

unint64_t sub_1000CF100@<X0>(void *a1@<X8>)
{
  unint64_t result = sub_1000CF044();
  *a1 = 0xD000000000000023LL;
  a1[1] = v3;
  return result;
}

BOOL sub_1000CF138@<W0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_1002708F0;
  BOOL result = sub_1000CF06C(*a1, v3);
  *a2 = result;
  return result;
}

void sub_1000CF174(void *a1@<X8>)
{
  *a1 = 1766222167LL;
  a1[1] = 0xE400000000000000LL;
}

uint64_t sub_1000CF188(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002725D8, v2);
  sub_100019390();
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000CF1D4(char *a1, char *a2)
{
  return sub_1000D42CC(*a1, *a2);
}

void sub_1000CF1E0()
{
}

uint64_t sub_1000CF1E8(uint64_t a1)
{
  return sub_1000B1818(a1, *v1);
}

void sub_1000CF1F0(uint64_t a1)
{
}

uint64_t sub_1000CF1F8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000CF188(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000CF224@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000CEDCC(*v1);
  *a1 = result;
  a1[1] = 0xE300000000000000LL;
  return result;
}

unint64_t sub_1000CF254()
{
  unint64_t result = qword_1002B01B0;
  if (!qword_1002B01B0)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FE270, &unk_1002810C0);
    atomic_store(result, (unint64_t *)&qword_1002B01B0);
  }

  return result;
}

uint64_t sub_1000CF290(uint64_t result, _BYTE **a2)
{
  Swift::String v2 = *a2;
  *Swift::String v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_1000CF2A0( uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_1000CF2D4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000CF2F4(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  uint64_t v8 = sub_1000CF360(v6, v7, a3);
  uint64_t v9 = *a1;
  uint64_t v10 = *a1 + 8;
  uint64_t v12 = v8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v9);
  uint64_t result = sub_10001EDA0();
  *a1 = v10;
  return result;
}

uint64_t sub_1000CF360(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1000CF430(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10002C010((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10002C010((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  sub_100019F7C(v12);
  return v7;
}

void *sub_1000CF430(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_1000CF584((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
      uint64_t result = 0LL;
      *a1 = __dst;
      return result;
    }

    goto LABEL_11;
  }

  if ((a6 & 0x1000000000000000LL) != 0)
  {
LABEL_11:
    uint64_t result = sub_1000CF648(a5, a6);
    *a1 = v12;
    return result;
  }

  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }

  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter(a5);
    if (!v8)
    {
      uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL);
      __break(1u);
      return result;
    }
  }

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return (void *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

void *sub_1000CF584(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory with negative count",  60LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1170LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1173LL,  0);
  }

  __break(1u);
  return result;
}

void *sub_1000CF648(uint64_t a1, unint64_t a2)
{
  Swift::String v2 = sub_1000CF6DC(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    Swift::String v2 = sub_1000CF908(0LL, v2[2] + 1LL, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    Swift::String v2 = sub_1000CF908((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 32) = 0;
  return v2;
}

void *sub_1000CF6DC(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v4 = String.UTF8View._foreignCount()();
    if (v4) {
      goto LABEL_6;
    }
    return &_swiftEmptyArrayStorage;
  }

  if ((a2 & 0x2000000000000000LL) != 0) {
    Swift::Int v4 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_6:
  Swift::Int v5 = sub_1000CF84C(v4, 0LL);
  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  2,  71LL,  0);
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v6 = v5;
  uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    uint64_t v9 = "Insufficient space allocated to copy string contents";
    uint64_t v10 = "Swift/StringUTF8View.swift";
    uint64_t v11 = 52LL;
    uint64_t v12 = 26LL;
    goto LABEL_15;
  }

  if (v7 == v4) {
    return v6;
  }
  uint64_t v9 = "invalid Collection: less than 'count' elements in collection";
  uint64_t v10 = "Swift/ContiguousArrayBuffer.swift";
  uint64_t v11 = 60LL;
  uint64_t v12 = 33LL;
LABEL_15:
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11LL, 2LL, v9, v11, 2LL, v10, v12);
  __break(1u);
  return result;
}

void *sub_1000CF84C(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_1000175B0(&qword_1002A90E0);
  Swift::Int v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1000CF8B0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = a1 >> 16;
  if ((a3 & 0x1000000000000000LL) == 0 || (a2 & 0x800000000000000LL) != 0)
  {
    uint64_t v9 = String.UTF16View.index(_:offsetBy:)(15LL, v5, a2);
    sub_1000D040C(v9);
    return v10 | 4;
  }

  else
  {
    uint64_t v6 = String.UTF8View._foreignIndex(_:offsetBy:)(15LL, v5);
    sub_1000D040C(v6);
    return v7 | 8;
  }

char *sub_1000CF908(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1000175B0(&qword_1002A90E0);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  os_log_type_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_100031E34(v14, v8, v13);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_1000CF9DC(v14, v8, v13);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_1000CF9DC(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

_BYTE **sub_1000CFAA0(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  *uint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t sub_1000CFAB0(void *a1)
{
  return swift_bridgeObjectRelease(a1[38]);
}

uint64_t sub_1000CFB50(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 56);
  uint64_t v23 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v23;
  *(void *)(a1 + 56) = v4;
  uint64_t v5 = *(void *)(a2 + 72);
  uint64_t v22 = *(void *)(a2 + 64);
  *(void *)(a1 + 64) = v22;
  *(void *)(a1 + 72) = v5;
  uint64_t v6 = *(void *)(a2 + 88);
  uint64_t v21 = *(void *)(a2 + 80);
  *(void *)(a1 + 80) = v21;
  *(void *)(a1 + 88) = v6;
  uint64_t v7 = *(void *)(a2 + 104);
  uint64_t v20 = *(void *)(a2 + 96);
  *(void *)(a1 + 96) = v20;
  *(void *)(a1 + 104) = v7;
  uint64_t v9 = *(void *)(a2 + 112);
  uint64_t v8 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = v9;
  *(void *)(a1 + 120) = v8;
  uint64_t v11 = *(void *)(a2 + 128);
  uint64_t v10 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = v11;
  *(void *)(a1 + 136) = v10;
  uint64_t v12 = *(void *)(a2 + 144);
  uint64_t v26 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = v12;
  *(void *)(a1 + 152) = v26;
  uint64_t v25 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v25;
  *(_WORD *)(a1 + 176) = *(_WORD *)(a2 + 176);
  uint64_t v24 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v24;
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  uint64_t v13 = *(void *)(a2 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = v13;
  uint64_t v14 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v14;
  uint64_t v15 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v15;
  uint64_t v16 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v16;
  uint64_t v17 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = v17;
  uint64_t v18 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = v18;
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  return a1;
}

uint64_t sub_1000CFCF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  uint64_t v5 = a2[3];
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = a2[6];
  *(void *)(a1 + 48) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  *(void *)(a1 + 56) = a2[7];
  uint64_t v10 = a2[8];
  uint64_t v11 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 72) = a2[9];
  uint64_t v12 = a2[10];
  uint64_t v13 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(void *)(a1 + 88) = a2[11];
  uint64_t v14 = a2[12];
  uint64_t v15 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(void *)(a1 + 104) = a2[13];
  uint64_t v16 = a2[14];
  uint64_t v17 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(void *)(a1 + 120) = a2[15];
  uint64_t v18 = a2[16];
  uint64_t v19 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(void *)(a1 + 136) = a2[17];
  uint64_t v20 = a2[18];
  uint64_t v21 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  uint64_t v22 = *(void *)(a1 + 152);
  uint64_t v23 = a2[19];
  *(void *)(a1 + 152) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v22);
  *(void *)(a1 + 160) = a2[20];
  uint64_t v24 = a2[21];
  uint64_t v25 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  *(_BYTE *)(a1 + 176) = *((_BYTE *)a2 + 176);
  *(_BYTE *)(a1 + 177) = *((_BYTE *)a2 + 177);
  *(void *)(a1 + 184) = a2[23];
  uint64_t v26 = a2[24];
  uint64_t v27 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  uint64_t v28 = a2[25];
  *(_BYTE *)(a1 + 208) = *((_BYTE *)a2 + 208);
  *(void *)(a1 + 200) = v28;
  *(void *)(a1 + 216) = a2[27];
  uint64_t v29 = a2[28];
  uint64_t v30 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  *(void *)(a1 + 232) = a2[29];
  uint64_t v31 = a2[30];
  uint64_t v32 = *(void *)(a1 + 240);
  *(void *)(a1 + 240) = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  *(void *)(a1 + 248) = a2[31];
  uint64_t v33 = a2[32];
  uint64_t v34 = *(void *)(a1 + 256);
  *(void *)(a1 + 256) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  *(void *)(a1 + 264) = a2[33];
  uint64_t v35 = a2[34];
  uint64_t v36 = *(void *)(a1 + 272);
  *(void *)(a1 + 272) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  *(void *)(a1 + 280) = a2[35];
  uint64_t v37 = a2[36];
  uint64_t v38 = *(void *)(a1 + 288);
  *(void *)(a1 + 288) = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  *(void *)(a1 + 296) = a2[37];
  uint64_t v39 = a2[38];
  uint64_t v40 = *(void *)(a1 + 304);
  *(void *)(a1 + 304) = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  *(_BYTE *)(a1 + 312) = *((_BYTE *)a2 + 312);
  return a1;
}

void *sub_1000CFF7C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x139uLL);
}

uint64_t sub_1000CFF84(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a2 + 64);
  uint64_t v8 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void *)(a2 + 80);
  uint64_t v10 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v9;
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a2 + 96);
  uint64_t v12 = *(void *)(a1 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v11;
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = *(void *)(a2 + 112);
  uint64_t v14 = *(void *)(a1 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v13;
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = *(void *)(a2 + 128);
  uint64_t v16 = *(void *)(a1 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v15;
  swift_bridgeObjectRelease(v16);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease(*(void *)(a1 + 144));
  uint64_t v17 = *(void *)(a1 + 152);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = *(void *)(a2 + 168);
  uint64_t v19 = *(void *)(a1 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v18;
  swift_bridgeObjectRelease(v19);
  *(_WORD *)(a1 + 176) = *(_WORD *)(a2 + 176);
  uint64_t v20 = *(void *)(a2 + 192);
  uint64_t v21 = *(void *)(a1 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v20;
  swift_bridgeObjectRelease(v21);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  uint64_t v22 = *(void *)(a2 + 224);
  uint64_t v23 = *(void *)(a1 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = v22;
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = *(void *)(a2 + 240);
  uint64_t v25 = *(void *)(a1 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v24;
  swift_bridgeObjectRelease(v25);
  uint64_t v26 = *(void *)(a2 + 256);
  uint64_t v27 = *(void *)(a1 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v26;
  swift_bridgeObjectRelease(v27);
  uint64_t v28 = *(void *)(a2 + 272);
  uint64_t v29 = *(void *)(a1 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v28;
  swift_bridgeObjectRelease(v29);
  uint64_t v30 = *(void *)(a2 + 288);
  uint64_t v31 = *(void *)(a1 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = v30;
  swift_bridgeObjectRelease(v31);
  uint64_t v32 = *(void *)(a2 + 304);
  uint64_t v33 = *(void *)(a1 + 304);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = v32;
  swift_bridgeObjectRelease(v33);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  return a1;
}

uint64_t sub_1000D00F8(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 313))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      unint64_t v3 = *(void *)(a1 + 24);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_1000D014C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 312) = 0;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 313) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 313) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }

  return result;
}

void type metadata accessor for AppleSpecificHeaders()
{
}

void type metadata accessor for ConnectionType()
{
}

uint64_t sub_1000D0210(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1000D0250 + 4 * byte_1001FE19A[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000D0270 + 4 * byte_1001FE19F[v4]))();
  }
}

_BYTE *sub_1000D0250(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_1000D0270(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1000D0278(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1000D0280(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1000D0288(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1000D0290(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

void type metadata accessor for CachePolicy()
{
}

unint64_t sub_1000D02AC()
{
  unint64_t result = qword_1002B01B8;
  if (!qword_1002B01B8)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FE348, &unk_1002812B8);
    atomic_store(result, (unint64_t *)&qword_1002B01B8);
  }

  return result;
}

unint64_t sub_1000D02EC()
{
  unint64_t result = qword_1002B01C0;
  if (!qword_1002B01C0)
  {
    unint64_t result = swift_getWitnessTable(")/\b", &unk_100281228);
    atomic_store(result, (unint64_t *)&qword_1002B01C0);
  }

  return result;
}

unint64_t sub_1000D0328()
{
  return sub_100119E44(0LL, 1, v0);
}

uint64_t sub_1000D0338()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000D0344()
{
  return swift_bridgeObjectRelease(0LL);
}

uint64_t sub_1000D034C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1000CEC04(a1, v3, a2, a3 | 0x8000000000000000LL);
}

uint64_t sub_1000D0358(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_1000D0368()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 40));
}

uint64_t sub_1000D0374@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CEC04(a1, v2, 0xD000000000000017LL, a2 | 0x8000000000000000LL);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000D03D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return StringProtocol.components<A>(separatedBy:)(v4 - 144, a2, a2, a4, a4);
}

uint64_t sub_1000D03EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CEC04(a1, v3, v2, a2 | 0x8000000000000000LL);
}

uint64_t sub_1000D03FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CEC04(a1, v3, v2, a2 | 0x8000000000000000LL);
}

unint64_t sub_1000D040C(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

  ;
}

void sub_1000D0438()
{
}

BOOL sub_1000D0444(uint64_t a1, uint64_t a2, Swift::OpaquePointer a3)
{
  v6._countAndFlagsBits = v3;
  v6._object = v4;
  return sub_1000CF06C(v6, a3);
}

uint64_t sub_1000D0450()
{
  return sub_100160A58(v0, v1);
}

void sub_1000D045C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000435C0();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchQoS.QoSClass.default(_:), v4);
  uint64_t v8 = (void *)static OS_dispatch_queue.global(qos:)(v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  MultiThreadedEventLoopGroup.shutdownGracefully(queue:_:)(v8, a1, a2);
}

uint64_t sub_1000D0534(uint64_t result, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_errorRetain(result);
  }
  if (!a3) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t destroy for ServerError(uint64_t a1)
{
  return sub_1000D0564(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_1000D0564(uint64_t result, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_errorRelease(result);
  }
  if (!a3) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t _s25ASOctaneSupportXPCService11ServerErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_1000D0534(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ServerError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_1000D0534(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1000D0564(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ServerError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1000D0564(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ServerError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 254;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000D06E8(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1000D0700(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)unint64_t result = a2 - 2;
    *(void *)(result + 8) = 0LL;
    LOBYTE(a2) = 2;
  }

  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ServerError()
{
  return &type metadata for ServerError;
}

uint64_t sub_1000D0728()
{
  uint64_t v5 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain(*(void *)(v0 + 32));
  v1._countAndFlagsBits = 58LL;
  v1._object = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  return v5;
}

uint64_t sub_1000D07A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sysconf(58);
  if (v8 >= 3) {
    uint64_t v9 = 3LL;
  }
  else {
    uint64_t v9 = v8;
  }
  type metadata accessor for MultiThreadedEventLoopGroup();
  sub_10011880C(v9, (uint64_t)sub_1001187F8, 0LL);
  *(void *)(v4 + 16) = v10;
  *(void *)(v4 + 40) = 0LL;
  uint64_t v11 = type metadata accessor for UnfairLock();
  uint64_t v12 = swift_allocObject(v11, 24LL, 7LL);
  uint64_t v13 = (_DWORD *)sub_100019464(4LL);
  *(void *)(v12 + 16) = v13;
  *uint64_t v13 = 0;
  *(_BYTE *)(v4 + 56) = 0;
  *(void *)(v4 + 24) = a1;
  *(void *)(v4 + 32) = a2;
  *(void *)(v4 + 40) = a3;
  *(void *)(v4 + 48) = v12;
  return v4;
}

void sub_1000D0850()
{
  uint64_t v2 = v1;
  if ((*(_BYTE *)(v0 + 56) & 1) == 0)
  {
    uint64_t v3 = v0;
    uint64_t v4 = *(void *)(v0 + 48);
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v4 + 16));
    uint64_t v5 = (void *)swift_retain();
    Class v6 = sub_1000D1414(v5);
    sub_100092DEC((uint64_t)v6);
    sub_10012C380(256);
    sub_10012C278(0x40000FFFFLL, 1);
    uint64_t v7 = swift_endAccess(v28);
    sub_100092DEC(v7);
    sub_10012C278(0x100000006LL, 1);
    swift_endAccess(v28);
    swift_retain();
    uint64_t v8 = ServerBootstrap.childChannelInitializer(_:)((uint64_t)sub_1000D14A8, v0);
    swift_release();
    swift_release();
    uint64_t v10 = *(void *)(v0 + 24);
    uint64_t v9 = *(void *)(v0 + 32);
    uint64_t v11 = *(void *)(v3 + 40);
    swift_bridgeObjectRetain();
    sub_10012C4A8(v8, v10, v9, v11);
    uint64_t v12 = sub_1001A8FF8();
    uint64_t v14 = v2;
    if (v2)
    {
      sub_100024F0C();
      uint64_t v15 = sub_1000D0728();
      uint64_t v17 = v16;
      unint64_t v18 = sub_1000D1360();
      uint64_t v19 = sub_1000252D0((uint64_t)&type metadata for ServerError, v18);
      *(void *)uint64_t v20 = v15;
      *(void *)(v20 + 8) = v17;
      *(_BYTE *)(v20 + 16) = 0;
      swift_willThrow(v19);
      swift_errorRelease(v14);
    }

    else
    {
      uint64_t v21 = v12;
      uint64_t v22 = v13;
      sub_100024F0C();
      uint64_t ObjectType = swift_getObjectType(v21);
      unint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 40))(ObjectType, v22);
      if ((~v24 & 0xF000000000000007LL) != 0)
      {
        uint64_t v25 = v24;
        uint64_t v29 = SocketAddress.port.getter(v24);
        char v27 = v26;
        sub_100029DF4(v25);
        if ((v27 & 1) == 0)
        {
          *(void *)(v3 + 40) = v29;
          (*(void (**)(void))(*(void *)v3 + 248LL))();
        }
      }

      *(_BYTE *)(v3 + 56) = 1;
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 16));
      (*(void (**)(uint64_t, uint64_t))(v22 + 24))(ObjectType, v22);
      sub_1001A913C( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/Server.swift",  99LL,  2LL,  81LL);
      swift_unknownObjectRelease(v21);
      sub_100024F0C();
    }

    sub_10001EDD8();
  }

uint64_t sub_1000D0AB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = swift_getObjectType(a1);
  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(ObjectType, a2);
  ChannelPipeline.configureHTTPServerPipeline(position:withPipeliningAssistance:withServerUpgrade:withErrorHandling:)( 1LL,  0x8000000000000000LL,  1LL,  0LL,  0LL,  0LL,  1);
  swift_release();
  uint64_t v7 = (void *)swift_allocObject(&unk_100281448, 40LL, 7LL);
  v7[2] = a3;
  v7[3] = a1;
  v7[4] = a2;
  swift_retain();
  swift_unknownObjectRetain(a1);
  uint64_t v8 = sub_1001723F0((uint64_t)sub_1000D14D8, (uint64_t)v7);
  swift_release();
  swift_release();
  return v8;
}

uint64_t sub_1000D0B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for HTTPHandler();
  swift_allocObject(v7, 144LL, 7LL);
  uint64_t v8 = sub_1001724EC();
  *(void *)(v8 + 136) = &off_1002813B0;
  swift_unknownObjectWeakAssign(v8 + 128, a2);
  uint64_t ObjectType = swift_getObjectType(a3);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(ObjectType, a4);
  uint64_t v11 = swift_retain();
  sub_1000D1674(v11, 0LL, 0LL, 1LL, 0x8000000000000000LL, v10);
  swift_release();
  swift_release();
  return swift_release_n(v8, 2LL);
}

void sub_1000D0C44()
{
  if (*(_BYTE *)(v0 + 56) == 1)
  {
    uint64_t v2 = v0;
    sub_1000D0D0C();
    if (v1)
    {
      unint64_t v3 = sub_1000D1360();
      uint64_t v4 = sub_1000252D0((uint64_t)&type metadata for ServerError, v3);
      *(void *)uint64_t v5 = v1;
      *(void *)(v5 + 8) = 0LL;
      *(_BYTE *)(v5 + 16) = 1;
      swift_willThrow(v4);
      Class v6 = *(os_unfair_lock_s **)(*(void *)(v0 + 48) + 16LL);
      sub_10002A4C8();
      os_unfair_lock_lock(v6);
      *(_BYTE *)(v2 + 56) = 0;
      os_unfair_lock_unlock(v6);
      sub_10001EDD8();
    }

    else
    {
      uint64_t v7 = *(os_unfair_lock_s **)(*(void *)(v0 + 48) + 16LL);
      sub_10002A4C8();
      os_unfair_lock_lock(v7);
      *(_BYTE *)(v0 + 56) = 0;
      os_unfair_lock_unlock(v7);
      sub_10001EDD8();
    }
  }

uint64_t sub_1000D0D0C()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags(0LL);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)aBlock - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v3 = static MultiThreadedEventLoopGroup.currentEventLoop.getter();
  if (v3)
  {
    uint64_t result = swift_unknownObjectRelease(v3);
    __break(1u);
  }

  else
  {
    uint64_t v4 = type metadata accessor for Lock();
    swift_allocObject(v4, 24LL, 7LL);
    uint64_t v5 = Lock.init()();
    uint64_t v6 = swift_allocObject(&unk_1002813D0, 24LL, 7LL);
    *(void *)(v6 + 16) = 0LL;
    aBlock[4] = debugOnly(_:);
    aBlock[5] = 0LL;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000169C8;
    aBlock[3] = &unk_1002813E8;
    uint64_t v7 = _Block_copy(aBlock);
    uint64_t v19 = _swiftEmptyArrayStorage;
    unint64_t v8 = sub_100025C10();
    uint64_t v9 = sub_1000175B0(&qword_1002A9118);
    unint64_t v10 = sub_100025C50();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v9, v10, v0, v8);
    uint64_t v11 = type metadata accessor for DispatchWorkItem(0LL);
    swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v12 = DispatchWorkItem.init(flags:block:)(v2, v7);
    uint64_t v13 = (void *)swift_allocObject(&unk_100281420, 40LL, 7LL);
    v13[2] = v5;
    v13[3] = v6;
    v13[4] = v12;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1000D045C((uint64_t)sub_1000D1408, (uint64_t)v13);
    uint64_t v14 = swift_release(v13);
    dispatch thunk of DispatchWorkItem.wait()(v14);
    Lock.lock()();
    swift_beginAccess(v6 + 16, aBlock, 0LL, 0LL);
    if (*(void *)(v6 + 16))
    {
      uint64_t v15 = swift_errorRetain(*(void *)(v6 + 16));
      swift_willThrow(v15);
    }

    Lock.unlock()();
    swift_release(v6);
    swift_release(v12);
    return swift_release(v5);
  }

  return result;
}

uint64_t sub_1000D0F6C(void *a1)
{
  if (qword_1002A8D20 != -1) {
    swift_once(&qword_1002A8D20, sub_100124678);
  }
  uint64_t v2 = qword_1002EB988;
  swift_retain();
  sub_100124030(a1, 0LL, 0LL, 0LL, 0LL);
  return swift_release(v2);
}

uint64_t sub_1000D11DC()
{
  return v0;
}

uint64_t sub_1000D1204()
{
  return swift_deallocClassInstance(v0, 57LL, 7LL);
}

uint64_t type metadata accessor for Server()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService6Server);
}

uint64_t sub_1000D1244(void *a1)
{
  uint64_t v3 = v2;
  sub_1000D12E4(&v5);
  return v3;
}

uint64_t sub_1000D12D0(void *a1)
{
  return sub_1000D1244(a1);
}

void *sub_1000D12E4(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  swift_bridgeObjectRelease();
  swift_release();
  sub_100039090(v2, v3, v4);
  return a1;
}

unint64_t sub_1000D1360()
{
  unint64_t result = qword_1002B0310;
  if (!qword_1002B0310)
  {
    unint64_t result = swift_getWitnessTable(protocol conformance descriptor for ServerError, &type metadata for ServerError);
    atomic_store(result, (unint64_t *)&qword_1002B0310);
  }

  return result;
}

uint64_t sub_1000D139C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000D13C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000D13D0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000D13D8()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000D1408(uint64_t a1)
{
  return sub_100137888(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

Class sub_1000D1414(void *a1)
{
  Class result = object_getClass(a1);
  if (result != (Class)&OBJC_CLASS____TtC25ASOctaneSupportXPCService27MultiThreadedEventLoopGroup
    && result != (Class)&OBJC_CLASS____TtC25ASOctaneSupportXPCService19SelectableEventLoop
    || a1 == 0LL)
  {
    __break(1u);
  }

  else
  {
    uint64_t v5 = type metadata accessor for ServerBootstrap();
    uint64_t v6 = (void *)swift_allocObject(v5, 96LL, 7LL);
    uint64_t v7 = (void *)swift_retain_n(a1, 2LL);
    Class result = (Class)sub_1000D14E4(v7, a1, &protocol witness table for MultiThreadedEventLoopGroup, v6);
    if (result)
    {
      Class v8 = result;
      swift_release();
      return v8;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1000D14A8(uint64_t a1, uint64_t a2)
{
  return sub_1000D0AB0(a1, a2, v2);
}

uint64_t sub_1000D14B0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000D14D8(uint64_t a1)
{
  return sub_1000D0B84(a1, v1[2], v1[3], v1[4]);
}

void *sub_1000D14E4(id a1, void *a2, char **a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v7 = *a4;
  if (a2)
  {
    id v9 = a2;
  }

  else
  {
    swift_unknownObjectRetain(a1);
    a3 = &protocol witness table for MultiThreadedEventLoopGroup;
    id v9 = a1;
  }

  Class = (__objc2_class *)object_getClass(a1);
  BOOL v12 = Class != &OBJC_CLASS____TtC25ASOctaneSupportXPCService27MultiThreadedEventLoopGroup
     && Class != &OBJC_CLASS____TtC25ASOctaneSupportXPCService19SelectableEventLoop
     || a1 == 0LL;
  if (v12
    || ((uint64_t v13 = (__objc2_class *)object_getClass(v9),
         v13 != &OBJC_CLASS____TtC25ASOctaneSupportXPCService27MultiThreadedEventLoopGroup)
      ? (BOOL v14 = v13 == &OBJC_CLASS____TtC25ASOctaneSupportXPCService19SelectableEventLoop)
      : (BOOL v14 = 1),
        v14 ? (BOOL v15 = v9 == 0LL) : (BOOL v15 = 1),
        v15))
  {
    swift_unknownObjectRelease(v9);
    swift_release();
    swift_deallocPartialClassInstance(v4, v7, 96LL, 7LL);
    return 0LL;
  }

  else
  {
    v4[2] = a1;
    v4[3] = &protocol witness table for MultiThreadedEventLoopGroup;
    v4[4] = v9;
    v4[5] = a3;
    swift_retain();
    swift_unknownObjectRetain(a2);
    swift_unknownObjectRetain(v9);
    v4[10] = sub_10002FA94(0LL, 2LL, 0LL);
    v4[11] = sub_10002FA94(0LL, 2LL, 0LL);
    *((_OWORD *)v4 + 3) = 0u;
    *((_OWORD *)v4 + 4) = 0u;
    swift_beginAccess(v4 + 10, v17, 33LL, 0LL);
    sub_10012C278(0x100000006LL, 1);
    swift_endAccess(v17);
    swift_unknownObjectRelease(v9);
    swift_release();
    swift_unknownObjectRelease(a2);
  }

  return v4;
}

uint64_t sub_1000D1674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(a6 + 56);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a6 + 48));
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(ObjectType, v12) & 1) != 0)
  {
    uint64_t v14 = sub_1000D1998(a1, a2, a3, a4, a5, a6, (uint64_t)sub_1001ADBE8);
    char v16 = v15 & 1;
    LOBYTE(v27) = v15 & 1;
    EventLoop.makeCompletedFuture<A>(_:)( (uint64_t)&v26,  ObjectType,  (uint64_t)&type metadata for ()[8],  v12,  v17,  v18,  v19,  v20,  v14,  v27,  v28,  v29,  v30,  v31,  v32,  v33,  v34,  v35,  v36,  v37);
    uint64_t v22 = v21;
    sub_100034F08(v14, v16);
  }

  else
  {
    uint64_t v23 = (void *)swift_allocObject(&unk_100281470, 72LL, 7LL);
    v23[2] = a6;
    v23[3] = a1;
    v23[4] = &off_10028C338;
    v23[5] = a2;
    v23[6] = a3;
    v23[7] = a4;
    v23[8] = a5;
    unint64_t v24 = *(uint64_t (**)(void (*)(), void *, char *, uint64_t, uint64_t))(v12 + 32);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_10006AC2C(a4, a5);
    uint64_t v22 = v24(sub_1000D17E0, v23, &type metadata for ()[8], ObjectType, v12);
    swift_release();
  }

  return v22;
}

void sub_1000D17E0()
{
}

uint64_t sub_1000D17F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(a6 + 56);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a6 + 48));
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(ObjectType, v12) & 1) != 0)
  {
    uint64_t v14 = sub_1000D1998(a1, a2, a3, a4, a5, a6, (uint64_t)sub_1001ADBE8);
    char v16 = v15 & 1;
    LOBYTE(v27) = v15 & 1;
    EventLoop.makeCompletedFuture<A>(_:)( (uint64_t)&v26,  ObjectType,  (uint64_t)&type metadata for ()[8],  v12,  v17,  v18,  v19,  v20,  v14,  v27,  v28,  v29,  v30,  v31,  v32,  v33,  v34,  v35,  v36,  v37);
    uint64_t v22 = v21;
    sub_100034F08(v14, v16);
  }

  else
  {
    uint64_t v23 = (void *)swift_allocObject(&unk_100281498, 72LL, 7LL);
    v23[2] = a6;
    v23[3] = a1;
    v23[4] = &off_100287668;
    v23[5] = a2;
    v23[6] = a3;
    v23[7] = a4;
    v23[8] = a5;
    unint64_t v24 = *(uint64_t (**)(void (*)(), void *, char *, uint64_t, uint64_t))(v12 + 32);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_10006AC2C(a4, a5);
    uint64_t v22 = v24(sub_1000D17E0, v23, &type metadata for ()[8], ObjectType, v12);
    swift_release();
  }

  return v22;
}

uint64_t sub_1000D1960()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_1000D1998( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_1000D1E10( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Ch annelPipeline.swift",  117LL,  2LL,  198LL);
  if (*(_BYTE *)(a6 + 40) == 1)
  {
    unint64_t v14 = sub_100029C98();
    uint64_t v15 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v14);
    sub_1000D1E84(v15, v16);
    return v7;
  }

  if (!(a5 >> 62))
  {
    sub_1000D1E10( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  248LL);
    uint64_t v22 = *(void *)(a6 + 16);
    if (v22)
    {
      uint64_t v75 = a7;
      uint64_t v23 = *(void *)(v22 + 16);
      sub_10006AC2C(a4, a5);
      sub_10006AC2C(a4, a5);
      sub_10002A4C8();
      swift_retain();
      if (v23)
      {
        do
        {
          uint64_t v24 = *(void *)(a6 + 24);
          if (v24 && v23 == v24) {
            goto LABEL_31;
          }
          ChannelHandlerContext.handler.getter();
          uint64_t v7 = v26;
          swift_unknownObjectRelease(v26);
          if (v7 == a4)
          {
            sub_1000D1E20();
            sub_1000D1E10( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/C hannelPipeline.swift",  117LL,  2LL,  280LL);
            if (*(_BYTE *)(a6 + 40) == 1)
            {
LABEL_45:
              unint64_t v35 = sub_100029C98();
              uint64_t v36 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v35);
              sub_1000D1E84(v36, v37);
              sub_10001EDD8();
              sub_10009B4FC();
              sub_1000D1E20();
              return v7;
            }

            if (!a3)
            {
              sub_1000D1E6C();
              sub_1000D1EA4();
            }

            uint64_t v56 = sub_1000D1E9C();
            sub_1000D1E2C(v56);
            sub_10002A4C8();
            uint64_t v57 = sub_100023E9C();
            uint64_t v65 = sub_1000D1EC8(v57, v58, v59, v60, v61, v62, v63, v64, v75, a1);
            uint64_t v73 = sub_1000D1E38(v65, v66, v67, v68, v69, v70, v71, v72, v77);
            sub_10009459C(v73, v23);
LABEL_52:
            sub_100094800();
            sub_10001EDD8();
            sub_10009B4FC();
            swift_release();
            sub_1000D1E20();
            return 0LL;
          }

          sub_1000D1EB0();
          sub_10009B4FC();
          uint64_t v23 = v7;
        }

        while (v7);
      }

LABEL_27:
    sub_10006AC2C(a4, a5);
    sub_10002A4C8();
LABEL_33:
    unint64_t v29 = sub_100099BC0();
    uint64_t v7 = sub_1000252D0((uint64_t)&type metadata for ChannelPipelineError, v29);
    *uint64_t v30 = 1;
    sub_10001EDD8();
    sub_1000D1E20();
    return v7;
  }

  if (a5 >> 62 == 1)
  {
    sub_1000D1E10( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  248LL);
    uint64_t v17 = *(void *)(a6 + 16);
    if (v17)
    {
      uint64_t v74 = a7;
      uint64_t v18 = *(void *)(v17 + 16);
      sub_10006AC2C(a4, a5);
      sub_10006AC2C(a4, a5);
      sub_10002A4C8();
      swift_retain();
      if (v18)
      {
        while (1)
        {
          uint64_t v19 = *(void *)(a6 + 24);
          if (v19 && v18 == v19) {
            break;
          }
          ChannelHandlerContext.handler.getter();
          uint64_t v7 = v21;
          swift_unknownObjectRelease(v21);
          if (v7 == a4)
          {
            sub_1000D1E20();
            sub_1000D1E10( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/C hannelPipeline.swift",  117LL,  2LL,  280LL);
            if (*(_BYTE *)(a6 + 40) == 1) {
              goto LABEL_45;
            }
            if (!a3)
            {
              sub_1000D1E6C();
              sub_1000D1EA4();
            }

            uint64_t v38 = sub_1000D1E9C();
            sub_1000D1E2C(v38);
            sub_10002A4C8();
            uint64_t v39 = sub_100023E9C();
            uint64_t v47 = sub_1000D1EC8(v39, v40, v41, v42, v43, v44, v45, v46, v74, a1);
            uint64_t v55 = sub_1000D1E38(v47, v48, v49, v50, v51, v52, v53, v54, v76);
            sub_1000944E4(v55, v18);
            goto LABEL_52;
          }

          sub_1000D1EB0();
          sub_10009B4FC();
          uint64_t v18 = v7;
          if (!v7) {
            goto LABEL_32;
          }
        }

                __break(1u);
                return;
              }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  __break(1u);
  return result;
}

  uint64_t v19 = *v23;
  *(void *)(*v23 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(_BYTE *)(*(void *)(v19 + 48) + a2) = v24;
  uint64_t v20 = *(void *)(v19 + 16);
  uint64_t v21 = __OFADD__(v20, 1LL);
  uint64_t v22 = v20 + 1;
  if (!v21)
  {
    *(void *)(v19 + 16) = v22;
    return;
  }

  __break(1u);
LABEL_30:
  swift_bridgeObjectRelease_n(v4, 2LL);
LABEL_31:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AppInformationRequest.Extension);
  __break(1u);
}

    uint64_t v12 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(void *)(v4 + 48) + v15) = *(_BYTE *)(*(void *)(v2 + 48) + v15);
  }

  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    id v9 = v18;
    goto LABEL_27;
  }

  while (1)
  {
    id v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }

uint64_t sub_1000D1E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, a2, a3, a4, v4, v5);
}

uint64_t sub_1000D1E20()
{
  return sub_10006ABF8(v1, v0);
}

uint64_t sub_1000D1E2C(uint64_t a1)
{
  return swift_allocObject(a1, 90LL, 7LL);
}

uint64_t sub_1000D1E38( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  return a9(v12, v10, v13, v9, v11);
}

uint64_t sub_1000D1E54()
{
  return v5(v4, v1, v3, v0, v2);
}

uint64_t sub_1000D1E6C()
{
  return sub_100094750();
}

uint64_t sub_1000D1E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v5, v4);
}

void sub_1000D1E84(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = 2LL;
  *(_BYTE *)(a2 + 8) = 3;
}

uint64_t sub_1000D1E9C()
{
  return type metadata accessor for ChannelHandlerContext();
}

  ;
}

uint64_t sub_1000D1EB0()
{
  return swift_retain(*(void *)(v0 + 16));
}

uint64_t sub_1000D1EBC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  return sub_1000CF360(a1, a2, (uint64_t *)va);
}

uint64_t sub_1000D1EC8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_retain(a10);
}

uint64_t sub_1000D1ED4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for InAppCheckDownloadQueueCountResponse();
  swift_allocObject(v2, 88LL, 7LL);
  uint64_t v3 = sub_1000AD540();
  *(_BYTE *)(v3 + 24) = 2;
  *(void *)(v3 + 48) = _swiftEmptyArrayStorage;
  swift_retain();
  swift_bridgeObjectRelease();
  *(void *)(v3 + 32) = a1;
  *(_BYTE *)(v3 + 40) = 0;
  swift_release(v3);
  return v3;
}

uint64_t type metadata accessor for InAppCheckDownloadQueueCountResponse()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService36InAppCheckDownloadQueueCountResponse);
}

void sub_1000D1F6C(uint64_t a1)
{
  if (*(void *)(a1 + 40)) {
    __asm { BR              X10 }
  }

  __asm { BR              X10 }

uint64_t sub_1000D20BC()
{
  uint64_t v3 = *(void *)(v2 + 72);
  uint64_t v14 = *(void *)(v2 + 64);
  uint64_t v4 = *(void *)(v2 + 48);
  int v5 = *(unsigned __int8 *)(v2 + 56);
  uint64_t v6 = *(__objc2_class **)v2;
  if (*(__objc2_class **)v2 == &OBJC_CLASS____TtCC25ASOctaneSupportXPCService18OctaneSubscription10AdHocOffer)
  {
    uint64_t v7 = *(void *)(v2 + 96);
    uint64_t v8 = *(void *)(v2 + 104);
    sub_100023E64(v3);
    sub_10003574C();
    swift_bridgeObjectRetain();
    swift_release(v2);
    unint64_t v11 = 0xEA00000000007265LL;
    uint64_t v10 = 0x66664F636F686441LL;
  }

  else
  {
    sub_100023E64(v3);
    sub_10003574C();
    swift_release(v2);
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    BOOL v9 = v6 == &OBJC_CLASS____TtCC25ASOctaneSupportXPCService18OctaneSubscription17IntroductoryOffer;
    if (v6 == &OBJC_CLASS____TtCC25ASOctaneSupportXPCService18OctaneSubscription17IntroductoryOffer) {
      uint64_t v10 = 0x66664F6F72746E49LL;
    }
    else {
      uint64_t v10 = 0LL;
    }
    if (v9) {
      unint64_t v11 = 0xEA00000000007265LL;
    }
    else {
      unint64_t v11 = 0LL;
    }
  }

  if (v5) {
    uint64_t v12 = 1LL;
  }
  else {
    uint64_t v12 = v4;
  }
  sub_100023E64(v1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10003574C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n(v1, 2LL);
  uint64_t result = swift_bridgeObjectRelease_n(0xE90000000000006CLL, 2LL);
  *(void *)uint64_t v0 = v7;
  *(void *)(v0 + 8) = v8;
  *(void *)(v0 + 16) = v10;
  *(void *)(v0 + 24) = v11;
  *(void *)(v0 + 32) = v16;
  *(_BYTE *)(v0 + 40) = v15;
  *(void *)(v0 + 48) = v17;
  *(void *)(v0 + 56) = v1;
  *(void *)(v0 + 64) = 0x6169725465657246LL;
  *(void *)(v0 + 72) = 0xE90000000000006CLL;
  *(void *)(v0 + 80) = v14;
  *(void *)(v0 + 88) = v3;
  *(void *)(v0 + 96) = v12;
  *(_BYTE *)(v0 + 104) = 0;
  return result;
}

unint64_t sub_1000D2268(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100272628, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7) {
    return 7LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000D22B4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000D22DC + 4 * byte_1001FE538[a1]))( 25705LL,  0xE200000000000000LL);
}

uint64_t sub_1000D22DC()
{
  return 1701869940LL;
}

uint64_t sub_1000D22EC()
{
  return 0x6563697270LL;
}

uint64_t sub_1000D2300()
{
  return 0x69642D6563697270LL;
}

uint64_t sub_1000D2324()
{
  return 0x6570795465646F6DLL;
}

unint64_t sub_1000D233C()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_1000D2358()
{
  return 0x726550664F6D756ELL;
}

uint64_t sub_1000D2378(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000D23A0 + 4 * byte_1001FE53F[a1]))( 25705LL,  0xE200000000000000LL);
}

uint64_t sub_1000D23A0()
{
  return 1701869940LL;
}

uint64_t sub_1000D23B0()
{
  return 0x6563697270LL;
}

uint64_t sub_1000D23C4()
{
  return 0x69642D6563697270LL;
}

uint64_t sub_1000D23E8()
{
  return 0x6570795465646F6DLL;
}

unint64_t sub_1000D2400()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_1000D241C()
{
  return 0x726550664F6D756ELL;
}

uint64_t sub_1000D243C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000175B0(&qword_1002B04C0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100019F58(a1, v9);
  unint64_t v11 = sub_1000D2A44();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for Discount.CodingKeys,  &type metadata for Discount.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *(void *)v3;
  uint64_t v13 = *(void *)(v3 + 8);
  char v34 = 0;
  sub_100044D1C(v12, v13, (uint64_t)&v34);
  if (!v2)
  {
    uint64_t v14 = *(void *)(v3 + 16);
    uint64_t v15 = *(void *)(v3 + 24);
    char v33 = 1;
    sub_100044D1C(v14, v15, (uint64_t)&v33);
    uint64_t v16 = *(void *)(v3 + 32);
    uint64_t v17 = *(unsigned __int8 *)(v3 + 40);
    char v32 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v32, v5);
    uint64_t v18 = *(void *)(v3 + 48);
    uint64_t v19 = *(void *)(v3 + 56);
    char v31 = 3;
    sub_100044D1C(v18, v19, (uint64_t)&v31);
    uint64_t v20 = *(void *)(v3 + 64);
    uint64_t v21 = *(void *)(v3 + 72);
    char v30 = 4;
    sub_100044D1C(v20, v21, (uint64_t)&v30);
    uint64_t v22 = *(void *)(v3 + 80);
    uint64_t v23 = *(void *)(v3 + 88);
    char v29 = 5;
    sub_100044D1C(v22, v23, (uint64_t)&v29);
    uint64_t v24 = *(void *)(v3 + 96);
    uint64_t v25 = *(unsigned __int8 *)(v3 + 104);
    char v28 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v28, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000D25E4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_1000175B0(&qword_1002B04B0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100019F58(a1, v9);
  unint64_t v11 = sub_1000D2A44();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for Discount.CodingKeys,  &type metadata for Discount.CodingKeys,  v11,  v9,  v10);
  if (v2)
  {
    sub_1000D2F7C();
    sub_100019F7C(a1);
    sub_10001A420();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10003561C();
    return sub_100024E84();
  }

  else
  {
    char v50 = 0;
    uint64_t v12 = sub_1000D2F54((uint64_t)&v50);
    uint64_t v14 = v13;
    char v49 = 1;
    sub_100075D08(v12, v13);
    uint64_t v41 = sub_1000D2F54((uint64_t)&v49);
    uint64_t v42 = v15;
    uint64_t v43 = v14;
    char v48 = 2;
    sub_100075D08(v41, v15);
    uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v48, v5);
    int v39 = v17;
    uint64_t v40 = v16;
    char v47 = 3;
    uint64_t v18 = sub_1000D2F54((uint64_t)&v47);
    uint64_t v20 = v19;
    uint64_t v37 = v18;
    uint64_t v38 = a2;
    char v46 = 4;
    sub_100075D08(v18, v19);
    uint64_t v21 = sub_1000D2F54((uint64_t)&v46);
    uint64_t v23 = v22;
    uint64_t v35 = v21;
    uint64_t v36 = v12;
    char v45 = 5;
    sub_100075D08(v21, v22);
    uint64_t v24 = sub_1000D2F54((uint64_t)&v45);
    uint64_t v26 = v25;
    uint64_t v34 = v24;
    char v44 = 6;
    sub_100075D08(v24, v25);
    uint64_t v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v44, v5);
    char v28 = v8;
    char v30 = v29;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v28, v5);
    sub_100019F7C(a1);
    sub_10001A420();
    sub_100024E84();
    sub_10003561C();
    sub_1000D2F64();
    uint64_t v31 = v43;
    uint64_t result = swift_bridgeObjectRelease();
    char v33 = v38;
    *uint64_t v38 = v36;
    v33[1] = v31;
    v33[2] = v41;
    v33[3] = v6;
    v33[4] = v40;
    *((_BYTE *)v33 + 40) = v39 & 1;
    v33[6] = v37;
    v33[7] = v20;
    v33[8] = v35;
    v33[9] = v23;
    v33[10] = v34;
    v33[11] = v26;
    v33[12] = v27;
    *((_BYTE *)v33 + 104) = v30 & 1;
  }

  return result;
}

void sub_1000D28F4(char *a1)
{
}

void sub_1000D2900()
{
}

void sub_1000D2908(uint64_t a1)
{
}

void sub_1000D2910(uint64_t a1)
{
}

unint64_t sub_1000D2918@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000D2268(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000D2944@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000D22B4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000D296C()
{
  return sub_1000D2378(*v0);
}

uint64_t sub_1000D2974@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000D22B0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000D2998(uint64_t a1)
{
  unint64_t v2 = sub_1000D2A44();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D29C0(uint64_t a1)
{
  unint64_t v2 = sub_1000D2A44();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1000D29E8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (void *)sub_1000D25E4(a1, v5);
  if (!v2) {
    return memcpy(a2, v5, 0x69uLL);
  }
  return result;
}

uint64_t sub_1000D2A30(void *a1)
{
  return sub_1000D243C(a1);
}

unint64_t sub_1000D2A44()
{
  unint64_t result = qword_1002B04B8;
  if (!qword_1002B04B8)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FE6C4, &type metadata for Discount.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B04B8);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for Discount.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_1000D2ACC + 4 * byte_1001FE54B[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1000D2B00 + 4 * byte_1001FE546[v4]))();
}

uint64_t sub_1000D2B00(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D2B08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000D2B10LL);
  }
  return result;
}

uint64_t sub_1000D2B1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000D2B24LL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_1000D2B28(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D2B30(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Discount.CodingKeys()
{
  return &type metadata for Discount.CodingKeys;
}

uint64_t destroy for Discount(void *a1)
{
  return swift_bridgeObjectRelease(a1[11]);
}

uint64_t initializeWithCopy for Discount(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for Discount(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v13 = *(void *)(a2 + 88);
  uint64_t v14 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 96) = v15;
  return a1;
}

void *initializeWithTake for Discount(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x69uLL);
}

uint64_t assignWithTake for Discount(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v9 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 72);
  uint64_t v11 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 88);
  uint64_t v13 = *(void *)(a1 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v12;
  swift_bridgeObjectRelease(v13);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for Discount(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 105))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Discount(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 105) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 105) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Discount()
{
  return &type metadata for Discount;
}

unint64_t sub_1000D2E88()
{
  unint64_t result = qword_1002B04C8;
  if (!qword_1002B04C8)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FE69C, &type metadata for Discount.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B04C8);
  }

  return result;
}

unint64_t sub_1000D2EC8()
{
  unint64_t result = qword_1002B04D0;
  if (!qword_1002B04D0)
  {
    unint64_t result = swift_getWitnessTable("]0\b", &type metadata for Discount.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B04D0);
  }

  return result;
}

unint64_t sub_1000D2F08()
{
  unint64_t result = qword_1002B04D8;
  if (!qword_1002B04D8)
  {
    unint64_t result = swift_getWitnessTable("E0\b", &type metadata for Discount.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B04D8);
  }

  return result;
}

uint64_t sub_1000D2F44()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_1000D2F54(uint64_t a1)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, v1);
}

uint64_t sub_1000D2F64()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 96));
}

uint64_t sub_1000D2F70()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 88));
}

  ;
}

BOOL static ChannelOptions.Types.SocketOption.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void sub_1000D2F9C(char a1, uint64_t a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x2E746E756F636361LL;
  }
  else {
    uint64_t v3 = 0xD00000000000001BLL;
  }
  if (v2) {
    unint64_t v4 = 0x80000001002178F0LL;
  }
  else {
    unint64_t v4 = 0xEF676E696C6C6962LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x2E746E756F636361LL;
  }
  else {
    uint64_t v5 = 0xD00000000000001BLL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xEF676E696C6C6962LL;
  }
  else {
    unint64_t v6 = 0x80000001002178F0LL;
  }
  if (v3 == v5 && v4 == v6) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v3, a2, v5);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D302C(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1000D3098(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000D3100 + 4 * byte_1001FE724[a2]))(0x75736E6F436E6F4ELL);
}

void sub_1000D3100(uint64_t a1)
{
  if (a1 == 0x75736E6F436E6F4ELL && v1 == 0xED0000656C62616DLL) {
    sub_1000D69C0();
  }
  else {
    sub_100048720(a1, v1, 0x75736E6F436E6F4ELL, 0xED0000656C62616DLL);
  }
  sub_10001EDA0();
  sub_100019390();
  sub_1000193B8();
}

void sub_1000D3184(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1000D31F0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000D32C8 + 4 * byte_1001FE730[a2]))(0x6853796C696D6166LL);
}

void sub_1000D32C8(uint64_t a1)
{
  if (a1 == 0x6853796C696D6166LL && v1 == 0xEF656C6261657261LL) {
    sub_1000D69C0();
  }
  else {
    sub_100048720(a1, v1, 0x6853796C696D6166LL, 0xEF656C6261657261LL);
  }
  sub_10001EDA0();
  sub_100019390();
  sub_1000193B8();
}

void sub_1000D33B4(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1000D33F4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000D3458 + 4 * byte_1001FE73F[a2]))(1701869940LL);
}

void sub_1000D3458(uint64_t a1, uint64_t a2)
{
  if (a1 == 1701869940 && v2 == 0xE400000000000000LL) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(a1, a2, 1701869940LL);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D34C8(uint64_t a1, uint64_t a2)
{
}

void sub_1000D34D4(uint64_t a1, uint64_t a2)
{
}

void sub_1000D34E0(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1000D3530(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000D35F0 + 4 * byte_1001FE74D[a2]))(0x6567617373656DLL);
}

void sub_1000D35F0(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6567617373656DLL && v2 == 0xE700000000000000LL) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(a1, a2, 0x6567617373656DLL);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D36C0(uint64_t a1, uint64_t a2)
{
}

void sub_1000D36D0(uint64_t a1, uint64_t a2)
{
}

void sub_1000D36DC(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0xED00006E6F697372LL;
  uint64_t v3 = 0x65762D65726F7473LL;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 0xD000000000000018LL;
    }
    else {
      uint64_t v5 = 0xD000000000000015LL;
    }
    if (v4 == 1) {
      uint64_t v6 = 0x8000000100217E70LL;
    }
    else {
      uint64_t v6 = 0x8000000100217E90LL;
    }
  }

  else
  {
    uint64_t v5 = 0x65762D65726F7473LL;
    uint64_t v6 = 0xED00006E6F697372LL;
  }

  if (a2)
  {
    if (a2 == 1) {
      uint64_t v3 = 0xD000000000000018LL;
    }
    else {
      uint64_t v3 = 0xD000000000000015LL;
    }
    if (a2 == 1) {
      uint64_t v2 = 0x8000000100217E70LL;
    }
    else {
      uint64_t v2 = 0x8000000100217E90LL;
    }
  }

  if (v5 == v3 && v6 == v2) {
    sub_1000D69C0();
  }
  else {
    sub_100048720(v5, v6, v3, v2);
  }
  sub_10001EDA0();
  sub_100019390();
  sub_1000193B8();
}

void sub_1000D37D0()
{
  __asm { BR              X10 }

uint64_t sub_1000D3810()
{
  uint64_t v0 = sub_1000D6B2C();
  return ((uint64_t (*)(uint64_t))((char *)sub_1000D3890 + 4 * byte_1001FE75C[v1]))(v0);
}

void sub_1000D3890()
{
  if (v2 == v4 && v0 == v1) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v2, v3, v4);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D3920(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1000D398C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000D39E0 + 4 * byte_1001FE769[a2]))(1684957547LL);
}

void sub_1000D39E0(uint64_t a1)
{
  if (a1 == 1684957547 && v1 == 0xE400000000000000LL) {
    sub_1000D69C0();
  }
  else {
    sub_100048720(a1, v1, 1684957547LL, 0xE400000000000000LL);
  }
  sub_10001EDA0();
  sub_100019390();
  sub_1000193B8();
}

void sub_1000D3A5C()
{
  __asm { BR              X10 }

uint64_t sub_1000D3A94()
{
  uint64_t v0 = sub_1000D694C();
  return ((uint64_t (*)(uint64_t))((char *)sub_1000D3AEC + 4 * byte_1001FE774[v1]))(v0);
}

void sub_1000D3AEC()
{
  if (v2 == v4 && v0 == v1) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v2, v3, v4);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D3B50(char a1, uint64_t a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x6C65636E6163LL;
  }
  else {
    uint64_t v3 = 7041889LL;
  }
  if (v2) {
    unint64_t v4 = 0xE300000000000000LL;
  }
  else {
    unint64_t v4 = 0xE600000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x6C65636E6163LL;
  }
  else {
    uint64_t v5 = 7041889LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE600000000000000LL;
  }
  else {
    unint64_t v6 = 0xE300000000000000LL;
  }
  if (v3 == v5 && v4 == v6) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v3, a2, v5);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D3BC4(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1000D3C0C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000D3C8C + 4 * byte_1001FE781[a2]))(0x6574756E696DLL);
}

void sub_1000D3C8C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6574756E696DLL && v2 == v3) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(a1, a2, 0x6574756E696DLL);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D3D1C(char a1, uint64_t a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x736E6F6974706FLL;
  }
  else {
    uint64_t v3 = 1701869940LL;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000LL;
  }
  else {
    unint64_t v4 = 0xE700000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x736E6F6974706FLL;
  }
  else {
    uint64_t v5 = 1701869940LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE700000000000000LL;
  }
  else {
    unint64_t v6 = 0xE400000000000000LL;
  }
  if (v3 == v5 && v4 == v6) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v3, a2, v5);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D3D94(char a1, uint64_t a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0xD000000000000010LL;
  }
  else {
    uint64_t v3 = 1701667182LL;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000LL;
  }
  else {
    unint64_t v4 = 0x8000000100218370LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0xD000000000000010LL;
  }
  else {
    uint64_t v5 = 1701667182LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0x8000000100218370LL;
  }
  else {
    unint64_t v6 = 0xE400000000000000LL;
  }
  if (v3 == v5 && v4 == v6) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v3, a2, v5);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D3E10(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1000D3E60(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000D3F14 + 4 * byte_1001FE78F[a2]))(0x6F44656C676E696ALL);
}

void sub_1000D3F14(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6F44656C676E696ALL && v2 == 0xED00006570795463LL) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(a1, a2, 0x6F44656C676E696ALL);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D3FDC(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1000D4040(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000D40B8 + 4 * byte_1001FE79C[a2]))(0x2D6E6F6973726576LL);
}

void sub_1000D40B8(uint64_t a1)
{
  if (a1 == 0x2D6E6F6973726576LL && v1 == 0xEA00000000006469LL) {
    sub_1000D69C0();
  }
  else {
    sub_100048720(a1, v1, 0x2D6E6F6973726576LL, 0xEA00000000006469LL);
  }
  sub_10001EDA0();
  sub_100019390();
  sub_1000193B8();
}

void sub_1000D4144(uint64_t a1, uint64_t a2)
{
}

void sub_1000D4150(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1000D4190(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000D41E8 + 4 * byte_1001FE7A7[a2]))(1936881250LL);
}

void sub_1000D41E8(uint64_t a1, uint64_t a2)
{
  if (a1 == 1936881250 && v2 == 0xE400000000000000LL) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(a1, a2, 1936881250LL);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D4250(char a1, uint64_t a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0xD000000000000012LL;
  }
  else {
    uint64_t v3 = 1634497893LL;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000LL;
  }
  else {
    unint64_t v4 = 0x80000001002170C0LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0xD000000000000012LL;
  }
  else {
    uint64_t v5 = 1634497893LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0x80000001002170C0LL;
  }
  else {
    unint64_t v6 = 0xE400000000000000LL;
  }
  if (v3 == v5 && v4 == v6) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v3, a2, v5);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

uint64_t sub_1000D42CC(char a1, char a2)
{
  if ((a1 & 1) != 0) {
    uint64_t v2 = 3157554LL;
  }
  else {
    uint64_t v2 = 3157553LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v3 = 3157554LL;
  }
  else {
    uint64_t v3 = 3157553LL;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = sub_100048720(v2, 0xE300000000000000LL, v3, 0xE300000000000000LL);
  }
  swift_bridgeObjectRelease_n(0xE300000000000000LL, 2LL);
  return v4 & 1;
}

void sub_1000D432C(char a1, uint64_t a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 1634497893LL;
  }
  else {
    uint64_t v3 = 0xD000000000000010LL;
  }
  if (v2) {
    unint64_t v4 = 0x8000000100217090LL;
  }
  else {
    unint64_t v4 = 0xE400000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 1634497893LL;
  }
  else {
    uint64_t v5 = 0xD000000000000010LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE400000000000000LL;
  }
  else {
    unint64_t v6 = 0x8000000100217090LL;
  }
  if (v3 == v5 && v4 == v6) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v3, a2, v5);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D43A8(char a1, uint64_t a2)
{
  uint64_t v2 = 1701667182LL;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x746E6572727563LL;
    }
    else {
      uint64_t v3 = 0x64656C62616E65LL;
    }
    unint64_t v4 = 0xE700000000000000LL;
  }

  else
  {
    unint64_t v4 = 0xE400000000000000LL;
    uint64_t v3 = 1701667182LL;
  }

  if ((_BYTE)a2)
  {
    else {
      uint64_t v2 = 0x64656C62616E65LL;
    }
    unint64_t v5 = 0xE700000000000000LL;
  }

  else
  {
    unint64_t v5 = 0xE400000000000000LL;
  }

  if (v3 == v2 && v4 == v5) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v3, a2, v2);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D4480(char a1, uint64_t a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x7865646E69LL;
  }
  else {
    uint64_t v3 = 1701869940LL;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000LL;
  }
  else {
    unint64_t v4 = 0xE500000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x7865646E69LL;
  }
  else {
    uint64_t v5 = 1701869940LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE500000000000000LL;
  }
  else {
    unint64_t v6 = 0xE400000000000000LL;
  }
  if (v3 == v5 && v4 == v6) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v3, a2, v5);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D44F4(char a1)
{
  __asm { BR              X11 }

uint64_t sub_1000D455C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(unint64_t))((char *)sub_1000D4618 + 4 * byte_1001FE7B4[a2]))(0xD000000000000018LL);
}

void sub_1000D4618(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000018LL && v3 == ((v2 - 32) | 0x8000000000000000LL)) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(a1, a2, 0xD000000000000018LL);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D46E0(char a1, uint64_t a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x656C646E7562LL;
  }
  else {
    uint64_t v3 = 1701603686LL;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000LL;
  }
  else {
    unint64_t v4 = 0xE600000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x656C646E7562LL;
  }
  else {
    uint64_t v5 = 1701603686LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE600000000000000LL;
  }
  else {
    unint64_t v6 = 0xE400000000000000LL;
  }
  if (v3 == v5 && v4 == v6) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v3, a2, v5);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D4754(char a1, uint64_t a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x616B636174537369LL;
  }
  else {
    uint64_t v3 = 0x6C69626967696C65LL;
  }
  if (v2) {
    unint64_t v4 = 0xEB00000000797469LL;
  }
  else {
    unint64_t v4 = 0xEB00000000656C62LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x616B636174537369LL;
  }
  else {
    uint64_t v5 = 0x6C69626967696C65LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xEB00000000656C62LL;
  }
  else {
    unint64_t v6 = 0xEB00000000797469LL;
  }
  if (v3 == v5 && v4 == v6) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v3, a2, v5);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D47E4(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1000D4824(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000D4888 + 4 * byte_1001FE7C0[a2]))(1701147238LL);
}

void sub_1000D4888(uint64_t a1, uint64_t a2)
{
  if (a1 == 1701147238 && v2 == v3) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(a1, a2, 1701147238LL);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D48FC(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2 = 7824750LL;
  int v3 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v4 = 0x676E697473697865LL;
    }
    else {
      uint64_t v4 = 0x64657269707865LL;
    }
    if (v3 == 1) {
      unint64_t v5 = 0xE800000000000000LL;
    }
    else {
      unint64_t v5 = 0xE700000000000000LL;
    }
  }

  else
  {
    unint64_t v5 = 0xE300000000000000LL;
    uint64_t v4 = 7824750LL;
  }

  if ((_BYTE)a2)
  {
    else {
      uint64_t v2 = 0x64657269707865LL;
    }
    else {
      unint64_t v6 = 0xE700000000000000LL;
    }
  }

  else
  {
    unint64_t v6 = 0xE300000000000000LL;
  }

  if (v4 == v2 && v5 == v6) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v4, a2, v2);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D49D4(char a1, uint64_t a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x626967696C457369LL;
  }
  else {
    uint64_t v3 = 0x4449726566666FLL;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000LL;
  }
  else {
    unint64_t v4 = 0xEA0000000000656CLL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x626967696C457369LL;
  }
  else {
    uint64_t v5 = 0x4449726566666FLL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xEA0000000000656CLL;
  }
  else {
    unint64_t v6 = 0xE700000000000000LL;
  }
  if (v3 == v5 && v4 == v6) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v3, a2, v5);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D4A58()
{
  __asm { BR              X11 }

uint64_t sub_1000D4AB0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000D4B50 + 4 * byte_1001FE7CB[a2]))(0x6566664F65646F63LL);
}

void sub_1000D4B50(uint64_t a1)
{
  if (a1 == 0x6566664F65646F63LL && v1 == 0xEA00000000007372LL) {
    sub_1000D69C0();
  }
  else {
    sub_100048720(a1, v1, 0x6566664F65646F63LL, 0xEA00000000007372LL);
  }
  sub_10001EDA0();
  sub_100019390();
  sub_1000193B8();
}

void sub_1000D4C0C(char a1, uint64_t a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x636E657265666572LL;
  }
  else {
    uint64_t v3 = 0x4449726566666FLL;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000LL;
  }
  else {
    unint64_t v4 = 0xED0000656D614E65LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x636E657265666572LL;
  }
  else {
    uint64_t v5 = 0x4449726566666FLL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xED0000656D614E65LL;
  }
  else {
    unint64_t v6 = 0xE700000000000000LL;
  }
  if (v3 == v5 && v4 == v6) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v3, a2, v5);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D4C98(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1000D4CE0()
{
  uint64_t v0 = sub_1000D6AB8();
  return ((uint64_t (*)(uint64_t))((char *)sub_1000D4D98 + 4 * byte_1001FE7DB[v1]))(v0);
}

void sub_1000D4D98()
{
  if (v1 == v3 && v0 == 0xE500000000000000LL) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v1, v2, v3);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D4E60(uint64_t a1, uint64_t a2)
{
}

void sub_1000D4E6C(char a1, uint64_t a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x4C4157454E4552LL;
  }
  else {
    uint64_t v3 = 0x4553414843525550LL;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000LL;
  }
  else {
    unint64_t v4 = 0xE700000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x4C4157454E4552LL;
  }
  else {
    uint64_t v5 = 0x4553414843525550LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE700000000000000LL;
  }
  else {
    unint64_t v6 = 0xE800000000000000LL;
  }
  if (v3 == v5 && v4 == v6) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v3, a2, v5);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D4EEC(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0xEA00000000004C41LL;
  uint64_t v3 = 0x4952545F45455246LL;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 0x595F53415F594150LL;
    }
    else {
      uint64_t v5 = 0x465F50555F594150LL;
    }
    if (v4 == 1) {
      uint64_t v6 = 0xED00004F475F554FLL;
    }
    else {
      uint64_t v6 = 0xEC000000544E4F52LL;
    }
  }

  else
  {
    uint64_t v5 = 0x4952545F45455246LL;
    uint64_t v6 = 0xEA00000000004C41LL;
  }

  if (a2)
  {
    if (a2 == 1) {
      uint64_t v3 = 0x595F53415F594150LL;
    }
    else {
      uint64_t v3 = 0x465F50555F594150LL;
    }
    if (a2 == 1) {
      uint64_t v2 = 0xED00004F475F554FLL;
    }
    else {
      uint64_t v2 = 0xEC000000544E4F52LL;
    }
  }

  if (v5 == v3 && v6 == v2) {
    sub_1000D69C0();
  }
  else {
    sub_100048720(v5, v6, v3, v2);
  }
  sub_10001EDA0();
  sub_100019390();
  sub_1000193B8();
}

void sub_1000D5008(char a1, uint64_t a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x535F594C494D4146LL;
  }
  else {
    uint64_t v3 = 0x4553414843525550LL;
  }
  if (v2) {
    unint64_t v4 = 0xE900000000000044LL;
  }
  else {
    unint64_t v4 = 0xED00004445524148LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x535F594C494D4146LL;
  }
  else {
    uint64_t v5 = 0x4553414843525550LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xED00004445524148LL;
  }
  else {
    unint64_t v6 = 0xE900000000000044LL;
  }
  if (v3 == v5 && v4 == v6) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v3, a2, v5);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D5098(uint64_t a1, uint64_t a2)
{
}

void sub_1000D50A4(uint64_t a1, uint64_t a2)
{
}

void sub_1000D50B0(char a1, uint64_t a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x4C4452445453LL;
  }
  else {
    uint64_t v3 = 1363432531LL;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000LL;
  }
  else {
    unint64_t v4 = 0xE600000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x4C4452445453LL;
  }
  else {
    uint64_t v5 = 1363432531LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE600000000000000LL;
  }
  else {
    unint64_t v6 = 0xE400000000000000LL;
  }
  if (v3 == v5 && v4 == v6) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v3, a2, v5);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D5124(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2 = 0x656C61636F6CLL;
  int v3 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v4 = 0x52557963696C6F70LL;
    }
    else {
      uint64_t v4 = 0x65547963696C6F70LL;
    }
    if (v3 == 1) {
      unint64_t v5 = 0xE90000000000004CLL;
    }
    else {
      unint64_t v5 = 0xEA00000000007478LL;
    }
  }

  else
  {
    unint64_t v5 = 0xE600000000000000LL;
    uint64_t v4 = 0x656C61636F6CLL;
  }

  if ((_BYTE)a2)
  {
    else {
      uint64_t v2 = 0x65547963696C6F70LL;
    }
    else {
      unint64_t v6 = 0xEA00000000007478LL;
    }
  }

  else
  {
    unint64_t v6 = 0xE600000000000000LL;
  }

  if (v4 == v2 && v5 == v6) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v4, a2, v2);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D5214(char a1, uint64_t a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x73656963696C6F70LL;
  }
  else {
    uint64_t v3 = 1634497893LL;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000LL;
  }
  else {
    unint64_t v4 = 0xE800000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x73656963696C6F70LL;
  }
  else {
    uint64_t v5 = 1634497893LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE800000000000000LL;
  }
  else {
    unint64_t v6 = 0xE400000000000000LL;
  }
  if (v3 == v5 && v4 == v6) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v3, a2, v5);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D528C(char a1, uint64_t a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x6269726373627553LL;
  }
  else {
    uint64_t v3 = 7954768LL;
  }
  if (v2) {
    unint64_t v4 = 0xE300000000000000LL;
  }
  else {
    unint64_t v4 = 0xE900000000000065LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x6269726373627553LL;
  }
  else {
    uint64_t v5 = 7954768LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE900000000000065LL;
  }
  else {
    unint64_t v6 = 0xE300000000000000LL;
  }
  if (v3 == v5 && v4 == v6) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v3, a2, v5);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D5308(uint64_t a1, uint64_t a2)
{
}

void sub_1000D5314(char a1)
{
  __asm { BR              X11 }

uint64_t sub_1000D5360(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000D53C0 + 4 * byte_1001FE7E8[a2]))(7959874LL);
}

void sub_1000D53C0(uint64_t a1, uint64_t a2)
{
  if (a1 == 7959874 && v2 == 0xE300000000000000LL) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(a1, a2, 7959874LL);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D5430(uint64_t a1, uint64_t a2)
{
}

void sub_1000D543C(char a1)
{
  __asm { BR              X12 }

uint64_t sub_1000D54A4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(unint64_t))((char *)sub_1000D54EC + 4 * byte_1001FE7F0[a2]))(0xD000000000000015LL);
}

void sub_1000D54EC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000015LL && v3 == ((v2 - 32) | 0x8000000000000000LL)) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(a1, a2, 0xD000000000000015LL);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D5544(char a1, uint64_t a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0xD000000000000010LL;
  }
  else {
    uint64_t v3 = 0xD00000000000001BLL;
  }
  if (v2) {
    unint64_t v4 = 0x80000001002171C0LL;
  }
  else {
    unint64_t v4 = 0x80000001002171E0LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0xD000000000000010LL;
  }
  else {
    uint64_t v5 = 0xD00000000000001BLL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0x80000001002171E0LL;
  }
  else {
    unint64_t v6 = 0x80000001002171C0LL;
  }
  if (v3 == v5 && v4 == v6) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v3, a2, v5);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D55CC()
{
  __asm { BR              X10 }

uint64_t sub_1000D55FC()
{
  uint64_t v0 = sub_1000D68FC();
  return ((uint64_t (*)(uint64_t))((char *)sub_1000D563C + 4 * byte_1001FE7F9[v1]))(v0);
}

void sub_1000D563C()
{
  if (v2 == v4 && v0 == v1) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v2, v3, v4);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D568C(uint64_t a1, uint64_t a2)
{
}

void sub_1000D5698(uint64_t a1, uint64_t a2)
{
}

void sub_1000D56A4()
{
  __asm { BR              X10 }

uint64_t sub_1000D56DC()
{
  uint64_t v0 = sub_1000D68FC();
  return ((uint64_t (*)(uint64_t))((char *)sub_1000D5718 + 4 * byte_1001FE802[v1]))(v0);
}

void sub_1000D5718()
{
  if (v2 == v4 && v0 == v1) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v2, v3, v4);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

BOOL sub_1000D5760(char a1, char a2)
{
  return qword_1001FEA58[a1] == qword_1001FEA58[a2];
}

void sub_1000D5784(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2 = 7959874LL;
  int v3 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v4 = 0x6C65636E6143LL;
    }
    else {
      uint64_t v4 = 27503LL;
    }
    if (v3 == 1) {
      unint64_t v5 = 0xE600000000000000LL;
    }
    else {
      unint64_t v5 = 0xE200000000000000LL;
    }
  }

  else
  {
    unint64_t v5 = 0xE300000000000000LL;
    uint64_t v4 = 7959874LL;
  }

  if ((_BYTE)a2)
  {
    else {
      uint64_t v2 = 27503LL;
    }
    else {
      unint64_t v6 = 0xE200000000000000LL;
    }
  }

  else
  {
    unint64_t v6 = 0xE300000000000000LL;
  }

  if (v4 == v2 && v5 == v6) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v4, a2, v2);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D583C(char a1)
{
  __asm { BR              X12 }

uint64_t sub_1000D58AC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(unint64_t))((char *)sub_1000D58F8 + 4 * byte_1001FE80A[a2]))(0xD000000000000014LL);
}

void sub_1000D58F8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000014LL && v3 == ((v2 - 32) | 0x8000000000000000LL)) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(a1, a2, 0xD000000000000014LL);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D5954(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1000D5994(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000D5A28 + 4 * byte_1001FE814[a2]))(0x6D61726150797562LL);
}

void sub_1000D5A28(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6D61726150797562LL && v2 == 0xE900000000000073LL) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(a1, a2, 0x6D61726150797562LL);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D5ACC(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1000D5B0C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000D5B70 + 4 * byte_1001FE81E[a2]))(0x77656E6552LL);
}

void sub_1000D5B70(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x77656E6552LL && v2 == 0xE500000000000000LL) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(a1, a2, 0x77656E6552LL);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

BOOL sub_1000D5BE4(char a1, char a2)
{
  return qword_1001FEAC8[a1] == qword_1001FEAC8[a2];
}

void sub_1000D5C08(uint64_t a1, uint64_t a2)
{
}

void sub_1000D5C14(char a1, uint64_t a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 2036429415LL;
  }
  else {
    uint64_t v3 = 0x6B63616C62LL;
  }
  if (v2) {
    unint64_t v4 = 0xE500000000000000LL;
  }
  else {
    unint64_t v4 = 0xE400000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 2036429415LL;
  }
  else {
    uint64_t v5 = 0x6B63616C62LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE400000000000000LL;
  }
  else {
    unint64_t v6 = 0xE500000000000000LL;
  }
  if (v3 == v5 && v4 == v6) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v3, a2, v5);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D5C88(char a1, uint64_t a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x656772616CLL;
  }
  else {
    uint64_t v3 = 0x6C616D726F6ELL;
  }
  if (v2) {
    unint64_t v4 = 0xE600000000000000LL;
  }
  else {
    unint64_t v4 = 0xE500000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x656772616CLL;
  }
  else {
    uint64_t v5 = 0x6C616D726F6ELL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE500000000000000LL;
  }
  else {
    unint64_t v6 = 0xE600000000000000LL;
  }
  if (v3 == v5 && v4 == v6) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v3, a2, v5);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D5D00(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1000D5D64(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(unint64_t))((char *)sub_1000D5DC0 + 4 * byte_1001FE826[a2]))(0xD000000000000014LL);
}

void sub_1000D5DC0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a2 - 32;
  if (a1 == 0xD000000000000014LL && v2 == (v3 | 0x8000000000000000LL)) {
    sub_1000D69C0();
  }
  else {
    sub_100048720(a1, v2, 0xD000000000000014LL, v3 | 0x8000000000000000LL);
  }
  sub_10001EDA0();
  sub_100019390();
  sub_1000193B8();
}

void sub_1000D5E38(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2 = 0x726564616568LL;
  int v3 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v4 = 0x65756C6176LL;
    }
    else {
      uint64_t v4 = 0x7475626972747461LL;
    }
    if (v3 == 1) {
      unint64_t v5 = 0xE500000000000000LL;
    }
    else {
      unint64_t v5 = 0xEE007473694C6465LL;
    }
  }

  else
  {
    unint64_t v5 = 0xE600000000000000LL;
    uint64_t v4 = 0x726564616568LL;
  }

  if ((_BYTE)a2)
  {
    else {
      uint64_t v2 = 0x7475626972747461LL;
    }
    else {
      unint64_t v6 = 0xEE007473694C6465LL;
    }
  }

  else
  {
    unint64_t v6 = 0xE600000000000000LL;
  }

  if (v4 == v2 && v5 == v6) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v4, a2, v2);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D5F28(uint64_t a1, uint64_t a2)
{
}

void sub_1000D5F34(char a1, uint64_t a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x657070616D2D3276LL;
  }
  else {
    uint64_t v3 = 0x702D6C72752D3276LL;
  }
  if (v2) {
    unint64_t v4 = 0xEF736E7265747461LL;
  }
  else {
    unint64_t v4 = 0xEE00736C72752D64LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x657070616D2D3276LL;
  }
  else {
    uint64_t v5 = 0x702D6C72752D3276LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xEE00736C72752D64LL;
  }
  else {
    unint64_t v6 = 0xEF736E7265747461LL;
  }
  if (v3 == v5 && v4 == v6) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v3, a2, v5);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D5FCC(uint64_t a1, uint64_t a2)
{
}

void sub_1000D5FD8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3();
  uint64_t v7 = v6;
  uint64_t v8 = ((uint64_t (*)(uint64_t))a3)(a2);
  if (v5 == v8 && v7 == v9) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v5, v9, v8);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D6040()
{
  __asm { BR              X10 }

uint64_t sub_1000D6078()
{
  uint64_t v0 = sub_1000D69CC();
  return ((uint64_t (*)(uint64_t))((char *)sub_1000D60D0 + 4 * byte_1001FE82E[v1]))(v0);
}

void sub_1000D60D0()
{
  unint64_t v5 = v1 & 0xFFFFFFFFFFFFLL | 0xED00000000000000LL;
  if (v2 == v4 && v0 == v5) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v2, v3, v4);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

void sub_1000D6138(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  HTTPMethod.rawValue.getter(a3, a4);
  if (v7 == v10 && v9 == v11) {
    sub_1000D68F0();
  }
  else {
    sub_1000D68E0(v7, v11, v10);
  }
  sub_100019390();
  sub_10001EDA0();
  sub_1000193B8();
}

uint64_t sub_1000D61A4(uint64_t result)
{
  *v1 |= result;
  return result;
}

uint64_t sub_1000D61B4(uint64_t result)
{
  *v1 |= result;
  return result;
}

BOOL sub_1000D61CC(void *a1, uint64_t a2)
{
  uint64_t v3 = *v2 & a2;
  if (v3 != a2) {
    *v2 |= a2;
  }
  *a1 = a2;
  return v3 != a2;
}

BOOL sub_1000D61F8(unsigned __int8 *a1, unsigned __int8 a2)
{
  int v3 = (*v2 & a2);
  if (v3 != a2) {
    *v2 |= a2;
  }
  *a1 = a2;
  return v3 != a2;
}

uint64_t sub_1000D6228(uint64_t result)
{
  *v1 &= result;
  return result;
}

uint64_t sub_1000D6238(uint64_t result)
{
  *v1 &= result;
  return result;
}

uint64_t NIOFileHandle.withUnsafeFileDescriptor<A>(_:)(uint64_t (*a1)(void))
{
  if (*(_BYTE *)(v1 + 16) == 1) {
    return a1(*(unsigned int *)(v1 + 20));
  }
  unint64_t v4 = sub_100025100();
  sub_1000252D0((uint64_t)&type metadata for IOError, v4);
  sub_100073658();
  return sub_100052668(v5, v6);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NIOFileHandle.close()()
{
  if (*(_BYTE *)(v0 + 16) == 1)
  {
    sub_100024FB4(*(_DWORD *)(v0 + 20));
    if (!v1) {
      *(_BYTE *)(v0 + 16) = 0;
    }
  }

  else
  {
    unint64_t v2 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v2);
    sub_100073658();
    sub_100052668(v3, v4);
  }

uint64_t NIOFileHandle.isOpen.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t NIOFileHandle.__allocating_init(descriptor:)(int a1)
{
  uint64_t result = swift_allocObject(v1, 24LL, 7LL);
  *(_DWORD *)(result + 20) = a1;
  *(_BYTE *)(result + 16) = 1;
  return result;
}

uint64_t NIOFileHandle.init(descriptor:)(int a1)
{
  *(_DWORD *)(v1 + 20) = a1;
  *(_BYTE *)(v1 + 16) = 1;
  return v1;
}

uint64_t NIOFileHandle.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t NIOFileHandle.duplicate()(uint64_t a1)
{
  uint64_t v3 = *(void *)v1;
  sub_1000D6AA4(a1);
  if (*(_BYTE *)(v1 + 16) == 1)
  {
    uint64_t result = sub_100024F14(*(_DWORD *)(v1 + 20));
    if (!v2)
    {
      int v5 = result;
      uint64_t result = sub_1000D6B98(v3);
      *(_DWORD *)(result + 20) = v5;
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    unint64_t v6 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v6);
    sub_100073658();
    return sub_100052668(v7, v8);
  }

  return result;
}

Swift::Int32 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NIOFileHandle.takeDescriptorOwnership()()
{
  if ((*(_BYTE *)(v0 + 16) & 1) != 0)
  {
    *(_BYTE *)(v0 + 16) = 0;
    return *(_DWORD *)(v0 + 20);
  }

  else
  {
    unint64_t v2 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v2);
    return sub_100052668(v3, 0xD00000000000002CLL);
  }

uint64_t sub_1000D64F8(uint64_t (*a1)(void))
{
  return NIOFileHandle.withUnsafeFileDescriptor<A>(_:)(a1);
}

uint64_t sub_1000D6518()
{
  uint64_t v1 = *v0;
  swift_beginAccess(*v0 + 16, v3, 0LL, 0LL);
  return *(unsigned __int8 *)(v1 + 16);
}

void sub_1000D6554()
{
}

void *NIOFileHandle.Mode.read.unsafeMutableAddressor()
{
  return &static NIOFileHandle.Mode.read;
}

void *NIOFileHandle.Mode.write.unsafeMutableAddressor()
{
  return &static NIOFileHandle.Mode.write;
}

uint64_t sub_1000D658C(unsigned __int8 *a1)
{
  return sub_1000BB94C(*a1);
}

uint64_t sub_1000D6594@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000BB948(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_1000D65C0(char *a1)
{
  return sub_10002A334(*a1, *v1);
}

BOOL sub_1000D65CC(unsigned __int8 *a1)
{
  return sub_1000BB964(*a1, *v1);
}

uint64_t sub_1000D65D8(unsigned __int8 *a1)
{
  return sub_1000BB984(*a1);
}

void *NIOFileHandle.Flags.default.unsafeMutableAddressor()
{
  return &static NIOFileHandle.Flags.default;
}

uint64_t static NIOFileHandle.Flags.allowFileCreation(posixMode:)(unsigned __int16 a1)
{
  return a1 | 0x20000000000LL;
}

unint64_t static NIOFileHandle.Flags.posix(flags:mode:)(uint64_t a1, unsigned __int16 a2)
{
  return a2 | (unint64_t)(a1 << 32);
}

uint64_t NIOFileHandle.__allocating_init(path:mode:flags:)(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  unsigned int v6 = (a3 - 1);
  if (v6 > 2)
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = v6 | HIDWORD(a4) | 0x1000000;
    uint64_t v9 = String.utf8CString.getter(result, a2);
    swift_bridgeObjectRelease();
    int v10 = sub_100025030(v9 + 32, v8, a4);
    uint64_t result = swift_release();
    if (!v5)
    {
      uint64_t result = sub_1000D6B98(v4);
      *(_DWORD *)(result + 20) = v10;
      *(_BYTE *)(result + 16) = 1;
    }
  }

  return result;
}

uint64_t NIOFileHandle.__allocating_init(path:)(uint64_t a1, uint64_t a2)
{
  return NIOFileHandle.__allocating_init(path:mode:flags:)(a1, a2, 1, 0LL);
}

unint64_t NIOFileHandle.description.getter()
{
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
  String.append(_:)(v0);
  sub_100019390();
  v1._countAndFlagsBits = 32032LL;
  v1._object = (void *)0xE200000000000000LL;
  String.append(_:)(v1);
  return 0xD000000000000019LL;
}

unint64_t sub_1000D676C()
{
  unint64_t result = qword_1002B04E0;
  if (!qword_1002B04E0)
  {
    unint64_t result = swift_getWitnessTable("5/\b", &type metadata for NIOFileHandle.Mode);
    atomic_store(result, (unint64_t *)&qword_1002B04E0);
  }

  return result;
}

unint64_t sub_1000D67AC()
{
  unint64_t result = qword_1002B04E8;
  if (!qword_1002B04E8)
  {
    unint64_t result = swift_getWitnessTable("M/\b", &type metadata for NIOFileHandle.Mode);
    atomic_store(result, (unint64_t *)&qword_1002B04E8);
  }

  return result;
}

unint64_t sub_1000D67EC()
{
  unint64_t result = qword_1002B04F0;
  if (!qword_1002B04F0)
  {
    unint64_t result = swift_getWitnessTable( protocol conformance descriptor for NIOFileHandle.Mode,  &type metadata for NIOFileHandle.Mode);
    atomic_store(result, (unint64_t *)&qword_1002B04F0);
  }

  return result;
}

unint64_t sub_1000D682C()
{
  unint64_t result = qword_1002B04F8;
  if (!qword_1002B04F8)
  {
    unint64_t result = swift_getWitnessTable( protocol conformance descriptor for NIOFileHandle.Mode,  &type metadata for NIOFileHandle.Mode);
    atomic_store(result, (unint64_t *)&qword_1002B04F8);
  }

  return result;
}

unint64_t sub_1000D6868()
{
  return NIOFileHandle.description.getter();
}

uint64_t type metadata accessor for NIOFileHandle()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService13NIOFileHandle);
}

ValueMetadata *type metadata accessor for NIOFileHandle.Mode()
{
  return &type metadata for NIOFileHandle.Mode;
}

ValueMetadata *type metadata accessor for NIOFileHandle.Flags()
{
  return &type metadata for NIOFileHandle.Flags;
}

uint64_t sub_1000D68E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, a3, v4, 0LL);
}

  ;
}

uint64_t sub_1000D68FC()
{
  return 0x496D616441707061LL;
}

  ;
}

  ;
}

uint64_t sub_1000D694C()
{
  return 0x6449656C646E7562LL;
}

  ;
}

  ;
}

uint64_t sub_1000D699C()
{
  return 0x4F6B6361626E6977LL;
}

  ;
}

uint64_t sub_1000D69CC()
{
  return 0x69642D6563697270LL;
}

uint64_t sub_1000D69EC()
{
  return 0x6D6E6F7269766E65LL;
}

  ;
}

uint64_t sub_1000D6A2C()
{
  return 0x66664F636F486461LL;
}

  ;
}

  ;
}

uint64_t sub_1000D6A88()
{
  return 0x726550664F6D756ELL;
}

uint64_t sub_1000D6AA4(uint64_t a1, ...)
{
  return swift_beginAccess(v1 + 16, va, 0LL, 0LL);
}

uint64_t sub_1000D6AB8()
{
  return 0x6563697270LL;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000D6B08()
{
  return 1684632420LL;
}

uint64_t sub_1000D6B14()
{
  return 0x6570795465646F6DLL;
}

uint64_t sub_1000D6B2C()
{
  return 0x6E6F697369766572LL;
}

  ;
}

unint64_t sub_1000D6B54()
{
  return 0xD000000000000012LL;
}

uint64_t sub_1000D6B60(unsigned int a1, int a2)
{
  return a2 & a1;
}

uint64_t sub_1000D6B68(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

  ;
}

  ;
}

uint64_t sub_1000D6B98(uint64_t a1)
{
  return swift_allocObject(a1, 24LL, 7LL);
}

uint64_t sub_1000D6BA4()
{
  return 0x6E4F707041534F69LL;
}

unint64_t sub_1000D6BB8()
{
  return 0xD00000000000001BLL;
}

  ;
}

  ;
}

uint64_t sub_1000D6BF4(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v9))
  {
    type metadata accessor for OctaneLocale();
    uint64_t v5 = 4LL;
    while (1)
    {
      if ((a1 & 0xC000000000000001LL) != 0)
      {
        uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1);
      }

      else
      {
        uint64_t v6 = *(void *)(a1 + 8 * v5);
        swift_retain();
      }

      uint64_t v7 = v5 - 3;
      if (__OFADD__(v5 - 4, 1LL)) {
        break;
      }
      if ((sub_1000CC284(*(void **)(v6 + 16), a2) & 1) != 0)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return v6;
      }

      swift_release();
      ++v5;
      if (v7 == v4) {
        goto LABEL_10;
      }
    }

    __break(1u);
LABEL_14:
    if (a1 < 0) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
  }

void sub_1000D6D18()
{
  uint64_t v2 = type metadata accessor for URL.DirectoryHint(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100022788();
  uint64_t v4 = sub_1000175B0(&qword_1002A9720);
  __chkstk_darwin(v4);
  sub_10001DAD0();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for URL(0LL);
  __chkstk_darwin(v8);
  sub_1000C78A4();
  unint64_t v9 = sub_10001B4A0();
  uint64_t v10 = StringProtocol.removingPercentEncoding.getter(&type metadata for String, v9);
  if (v11)
  {
    uint64_t v12 = v10;
    uint64_t v13 = v11;
    sub_10001762C(v7, 1LL, 1LL, v8);
    (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))( v0,  enum case for URL.DirectoryHint.inferFromPath(_:),  v2);
    URL.init(filePath:directoryHint:relativeTo:)(v12, v13, v0, v7);
    sub_1000D77A0(v1);
    sub_1000D9514();
  }

  else
  {
    uint64_t v14 = type metadata accessor for OctaneError(0LL);
    uint64_t v16 = sub_1000D9498((unint64_t *)&qword_1002AD048, v15, type metadata accessor for OctaneError, "}-\b");
    sub_1000252D0(v14, v16);
    uint64_t v18 = swift_storeEnumTagMultiPayload(v17, v14, 2LL);
    swift_willThrow(v18);
  }

  sub_10001DAB8();
}

void sub_1000D6EC0()
{
  *(void *)(v0 + 32) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 40) = _swiftEmptyArrayStorage;
  uint64_t v1 = type metadata accessor for OctaneConfigurationSettings();
  sub_100019310(v1, 73LL);
  *(void *)(v0 + 48) = sub_10007D7AC();
  *(void *)(v0 + 56) = _swiftEmptyArrayStorage;
  uint64_t v2 = type metadata accessor for OctaneAppPolicies();
  uint64_t v3 = (void *)sub_100019310(v2, 40LL);
  v3[2] = 0LL;
  v3[3] = 0xE000000000000000LL;
  v3[4] = _swiftEmptyArrayStorage;
  *(void *)(v0 + 120) = v3;
  *(void *)(v0 + 64) = _swiftEmptyArrayStorage;
  *(_OWORD *)(v0 + 128) = xmmword_1001FA370;
  sub_1000193B8();
}

unint64_t sub_1000D6F3C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002726F0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 8) {
    return 8LL;
  }
  else {
    return v3;
  }
}

_UNKNOWN **sub_1000D6F88()
{
  return &off_1002727D0;
}

uint64_t sub_1000D6F94(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000D6FC8 + 4 * byte_1001FEAF0[a1]))( 0x656D614E707061LL,  0xE700000000000000LL);
}

unint64_t sub_1000D6FC8()
{
  return 0xD000000000000018LL;
}

unint64_t sub_1000D7030()
{
  return 0xD000000000000012LL;
}

uint64_t sub_1000D704C()
{
  return 0x63696C6F50707061LL;
}

uint64_t sub_1000D706C()
{
  return 0x6E6F6973726576LL;
}

uint64_t sub_1000D7080(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000D70B4 + 4 * byte_1001FEAF8[a1]))( 0x656D614E707061LL,  0xE700000000000000LL);
}

unint64_t sub_1000D70B4()
{
  return 0xD000000000000018LL;
}

unint64_t sub_1000D711C()
{
  return 0xD000000000000012LL;
}

uint64_t sub_1000D7138()
{
  return 0x63696C6F50707061LL;
}

uint64_t sub_1000D7158()
{
  return 0x6E6F6973726576LL;
}

void sub_1000D716C(char *a1)
{
}

void sub_1000D7178()
{
}

void sub_1000D7180(uint64_t a1)
{
}

void sub_1000D7188(uint64_t a1)
{
}

unint64_t sub_1000D7190@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000D6F3C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000D71BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000D6F94(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000D71E4()
{
  return sub_1000D7080(*v0);
}

uint64_t sub_1000D71EC@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000D6F84(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000D7210@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = static NIOBSDSocket.Option.so_keepalive.getter();
  *a1 = result;
  return result;
}

_UNKNOWN **sub_1000D7234@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1000D6F88();
  *a1 = result;
  return result;
}

uint64_t sub_1000D7258(uint64_t a1)
{
  unint64_t v2 = sub_1000D8DC0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D7280(uint64_t a1)
{
  unint64_t v2 = sub_1000D8DC0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D72A8(void *a1)
{
  uint64_t v3 = sub_100019310(v1, 144LL);
  sub_1000D72F0(a1);
  return v3;
}

void sub_1000D72F0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000175B0(&qword_1002B0848);
  __chkstk_darwin(v5);
  sub_1000C78A4();
  sub_1000D94FC();
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100019F58(a1, v6);
  unint64_t v8 = sub_1000D8DC0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for OctaneConfiguration.CodingKeys,  &type metadata for OctaneConfiguration.CodingKeys,  v8,  v6,  v7);
  if (v2)
  {
    swift_bridgeObjectRelease();
    sub_1000D94EC();
    uint64_t v13 = type metadata accessor for OctaneConfiguration();
    swift_deallocPartialClassInstance(v1, v13, 144LL, 7LL);
  }

  else
  {
    LOBYTE(v38) = 0;
    v1[2] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v38, v5);
    v1[3] = v9;
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_1000175B0(&qword_1002A90A0);
    char v41 = 1;
    sub_1000D911C(&qword_1002B0850);
    uint64_t v12 = v11;
    sub_1000D948C(v10, (uint64_t)&v41, v5, v10, v11);
    uint64_t v14 = (void *)v38;
    if (!(void)v38) {
      uint64_t v14 = _swiftEmptyArrayStorage;
    }
    v1[4] = v14;
    char v41 = 2;
    sub_1000D948C(v10, (uint64_t)&v41, v5, v10, v12);
    uint64_t v15 = (void *)v38;
    if (!(void)v38) {
      uint64_t v15 = _swiftEmptyArrayStorage;
    }
    v1[5] = v15;
    uint64_t v16 = type metadata accessor for OctaneConfigurationSettings();
    char v41 = 3;
    uint64_t v18 = sub_1000D9498( &qword_1002B0860,  v17,  (uint64_t (*)(uint64_t))type metadata accessor for OctaneConfigurationSettings,  byte_1001FA464);
    sub_1000D948C(v16, (uint64_t)&v41, v5, v16, v18);
    uint64_t v19 = v38;
    if (!(void)v38)
    {
      sub_100019310(v16, 73LL);
      uint64_t v19 = sub_10007D7AC();
    }

    v1[6] = v19;
    char v41 = 4;
    unint64_t v20 = sub_1000D9178();
    sub_1000D948C( (uint64_t)&type metadata for OctaneKeyPair,  (uint64_t)&v41,  v5,  (uint64_t)&type metadata for OctaneKeyPair,  v20);
    uint64_t v21 = v1[9];
    uint64_t v22 = v1[10];
    uint64_t v23 = v1[11];
    uint64_t v24 = v1[12];
    uint64_t v25 = v1[13];
    uint64_t v26 = v1[14];
    __int128 v27 = v39;
    *(_OWORD *)(v1 + 9) = v38;
    *(_OWORD *)(v1 + 11) = v27;
    *(_OWORD *)(v1 + 13) = v40;
    sub_1000D90E0(v21, v22, v23, v24, v25, v26);
    uint64_t v28 = sub_1000175B0(&qword_1002B0820);
    char v41 = 5;
    sub_1000D91B4(&qword_1002B0870);
    sub_1000D948C(v28, (uint64_t)&v41, v5, v28, v29);
    char v30 = (void *)v38;
    if (!(void)v38) {
      char v30 = _swiftEmptyArrayStorage;
    }
    v3[7] = v30;
    uint64_t v31 = type metadata accessor for OctaneAppPolicies();
    char v41 = 6;
    uint64_t v33 = sub_1000D9498( &qword_1002B0880,  v32,  (uint64_t (*)(uint64_t))type metadata accessor for OctaneAppPolicies,  byte_1001FC0E0);
    sub_1000D948C(v31, (uint64_t)&v41, v5, v31, v33);
    uint64_t v34 = (void *)v38;
    if (!(void)v38)
    {
      uint64_t v34 = (void *)sub_100019310(v31, 40LL);
      v34[2] = 0LL;
      v34[3] = 0xE000000000000000LL;
      v34[4] = _swiftEmptyArrayStorage;
    }

    v3[15] = v34;
    v3[8] = _swiftEmptyArrayStorage;
    char v41 = 7;
    unint64_t v35 = sub_1000D9210();
    sub_1000D948C( (uint64_t)&type metadata for OctaneConfigurationVersion,  (uint64_t)&v41,  v5,  (uint64_t)&type metadata for OctaneConfigurationVersion,  v35);
    if ((_BYTE)v39) {
      uint64_t v36 = 4LL;
    }
    else {
      uint64_t v36 = v38;
    }
    if ((_BYTE)v39) {
      uint64_t v37 = 0LL;
    }
    else {
      uint64_t v37 = *((void *)&v38 + 1);
    }
    sub_100023E48();
    v3[16] = v36;
    v3[17] = v37;
  }

  sub_100019F7C(a1);
  sub_10001DAB8();
}

#error "1000D7ED4: call analysis failed (funcsize=467)"
uint64_t sub_1000D7F48()
{
  id v0;
  unsigned int v1;
  uint64_t v0 = [(id)objc_opt_self(NSFileManager) defaultManager];
  uint64_t v1 = NSFileManager.fileExists(at:)();

  if ((v1 & 1) != 0) {
    return (v1 >> 8) & 1;
  }
  else {
    return 2LL;
  }
}

void sub_1000D7FA8(uint64_t a1, uint64_t a2)
{
  if (v4 || (sub_1000D7FF8(a1, a2), v5)) {
    sub_1000193B8();
  }
  else {
    sub_1000D868C(a1, a2);
  }
}

void sub_1000D7FF8(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = *(void *)(v2 + 32);
  if (v6 >> 62) {
    goto LABEL_16;
  }
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  sub_100019320();
  for (; v7; uint64_t v7 = sub_100019448())
  {
    uint64_t v8 = 4LL;
    while (1)
    {
      if ((v6 & 0xC000000000000001LL) != 0) {
        uint64_t v3 = sub_1000C0A98(v8 - 4);
      }
      else {
        sub_100023ED4();
      }
      uint64_t v9 = v8 - 3;
      if (__OFADD__(v8 - 4, 1LL)) {
        break;
      }
      uint64_t v10 = *(void *)(v3 + 80);
      uint64_t v11 = *(void *)(v3 + 88);
      if ((v10 != a1 || v11 != a2) && (sub_100023EC4(v10, v11) & 1) == 0)
      {
        swift_release(v3);
        ++v8;
        if (v9 != v7) {
          continue;
        }
      }

      goto LABEL_14;
    }

    __break(1u);
LABEL_16:
    sub_10006B984();
  }

void sub_1000D80C0(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = *(void *)(v2 + 40);
  if (v6 >> 62) {
    goto LABEL_16;
  }
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  sub_100019320();
  for (; v7; uint64_t v7 = sub_100019448())
  {
    uint64_t v8 = 4LL;
    while (1)
    {
      if ((v6 & 0xC000000000000001LL) != 0) {
        uint64_t v3 = sub_1000C0A98(v8 - 4);
      }
      else {
        sub_100023ED4();
      }
      uint64_t v9 = v8 - 3;
      if (__OFADD__(v8 - 4, 1LL)) {
        break;
      }
      uint64_t v10 = *(void *)(v3 + 80);
      uint64_t v11 = *(void *)(v3 + 88);
      if ((v10 != a1 || v11 != a2) && (sub_100023EC4(v10, v11) & 1) == 0)
      {
        swift_release(v3);
        ++v8;
        if (v9 != v7) {
          continue;
        }
      }

      goto LABEL_14;
    }

    __break(1u);
LABEL_16:
    sub_10006B984();
  }

void *sub_1000D8188(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    uint64_t v5 = swift_bridgeObjectRetain();
    uint64_t v6 = sub_100186F84(v5);
    uint64_t v7 = sub_100019310((uint64_t)&unk_100281988, 24LL);
    *(void *)(v7 + 16) = v6;
    uint64_t v8 = (uint64_t (__cdecl *)())sub_1000D90D8;
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v6 = 0LL;
    uint64_t v8 = static System.hasAsyncAwaitSupport.getter;
  }

  swift_bridgeObjectRetain();
  if (a2)
  {
    uint64_t v9 = sub_10001ED74();
    uint64_t v10 = sub_100186F84(v9);
    uint64_t v11 = sub_100019310((uint64_t)&unk_100281960, 24LL);
    *(void *)(v11 + 16) = v10;
    uint64_t v12 = v11;
    uint64_t v13 = sub_1000D90AC;
  }

  else
  {
    uint64_t v12 = 0LL;
    uint64_t v13 = (uint64_t (*)(uint64_t))static System.hasAsyncAwaitSupport.getter;
  }

  uint64_t v14 = (void *)sub_100019310((uint64_t)&unk_1002818E8, 48LL);
  v14[2] = v8;
  v14[3] = v7;
  v14[4] = v13;
  v14[5] = v12;
  uint64_t v43 = v14;
  uint64_t v49 = v12;
  char v50 = v13;
  if (v6)
  {
    uint64_t v15 = *(void *)(v6 + 16);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v16 = sub_10006F028(v15, 0);
    specialized Array._endMutation()(v16);
  }

  else
  {
    swift_retain();
    swift_retain();
  }

  uint64_t v17 = *(void *)(v3 + 40);
  uint64_t v18 = sub_100019310((uint64_t)&unk_100281910, 32LL);
  *(void *)(v18 + 16) = sub_1000D8EE4;
  *(void *)(v18 + 24) = v43;
  sub_100077D1C();
  sub_1000D94A0();
  sub_100188B54(v17, sub_1000D8F58, v18);
  uint64_t v19 = sub_100019310((uint64_t)&unk_100281938, 32LL);
  *(void *)(v19 + 16) = sub_1000D8EE4;
  *(void *)(v19 + 24) = v43;
  sub_1000D94A0();
  uint64_t v20 = sub_100077D1C();
  sub_100188B54(v20, sub_1000D9460, v19);
  uint64_t v21 = *(void *)(v3 + 56);
  uint64_t v22 = v21 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v48 = v21 & 0xFFFFFFFFFFFFFF8LL;
  if (v21 < 0) {
    uint64_t v22 = *(void *)(v3 + 56);
  }
  uint64_t v41 = v22;
  uint64_t v45 = v21 + 32;
  unint64_t v46 = v21 & 0xC000000000000001LL;
  sub_1000D94A0();
  sub_10001DBCC();
  unint64_t v23 = 0LL;
  uint64_t v42 = v21;
  unint64_t v47 = (unint64_t)v21 >> 62;
  while (1)
  {
    if (v47)
    {
      sub_10001ED74();
      uint64_t v32 = _CocoaArrayWrapper.endIndex.getter(v41);
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v32 = *(void *)(v48 + 16);
    }

    if (v23 == v32) {
      break;
    }
    if (v46)
    {
      uint64_t v33 = specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v42);
    }

    else
    {
      if (v23 >= *(void *)(v48 + 16))
      {
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }

      uint64_t v33 = *(void *)(v45 + 8 * v23);
      swift_retain();
    }

    if (__OFADD__(v23++, 1LL)) {
      goto LABEL_49;
    }
    uint64_t v35 = *(void *)(v33 + 56);
    sub_100077D1C();
    sub_100024F0C();
    sub_10001DC10();
    unint64_t v36 = v35;
    if (v35)
    {
      unint64_t v24 = 0LL;
      if (v35 >= 0) {
        uint64_t v25 = v35 & 0xFFFFFFFFFFFFFF8LL;
      }
      else {
        uint64_t v25 = v35;
      }
      uint64_t v44 = v25;
      while (1)
      {
        if (v36 >> 62)
        {
          sub_100023E9C();
          uint64_t v26 = _CocoaArrayWrapper.endIndex.getter(v44);
          sub_10001DC10();
        }

        else
        {
          uint64_t v26 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        }

        if (v24 == v26) {
          break;
        }
        if ((v36 & 0xC000000000000001LL) != 0)
        {
          uint64_t v27 = specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v36);
        }

        else
        {
          if (v24 >= *(void *)((v36 & 0xFFFFFFFFFFFFFF8LL) + 0x10))
          {
            __break(1u);
LABEL_47:
            __break(1u);
            goto LABEL_48;
          }

          uint64_t v27 = *(void *)(v36 + 8 * v24 + 32);
          swift_retain();
        }

        if (__OFADD__(v24, 1LL)) {
          goto LABEL_47;
        }
        if ((v8() & 1) != 0 && (uint64_t v28 = v50(v27), (v28 & 1) != 0))
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v28);
          uint64_t v29 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v29);
          uint64_t v30 = v29;
          uint64_t v12 = v49;
          uint64_t v31 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v27);
          specialized ContiguousArray._endMutation()(v31);
        }

        else
        {
          swift_release(v27);
        }

        ++v24;
      }
    }
  }

  swift_bridgeObjectRelease();
  sub_10001DC10();
  swift_release(v43);
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000LL) == 0
    && ((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000LL) == 0)
  {
    uint64_t v37 = sub_10001DBCC();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v37);
    type metadata accessor for OctaneIAP();
    goto LABEL_45;
  }

LABEL_50:
  uint64_t v39 = type metadata accessor for OctaneIAP();
  uint64_t v40 = sub_10001DBCC();
  _bridgeCocoaArray<A>(_:)(v40, v39);
  sub_100024F0C();
LABEL_45:
  sub_100024F0C();
  sub_100188D6C();
  swift_release(v12);
  swift_release(v7);
  swift_release(v43);
  return _swiftEmptyArrayStorage;
}

                __break(1u);
              }

              uint64_t v14 = v9 + 5;
            }
          }
        }
      }

uint64_t sub_1000D85C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 88);
  swift_bridgeObjectRetain();
  sub_1000B3C84(v3, v4, a2);
  LOBYTE(a2) = v5;
  swift_bridgeObjectRelease();
  return a2 & 1;
}

uint64_t sub_1000D8610(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OctaneSubscription();
  uint64_t result = swift_dynamicCastClass(a1, v4);
  if (result)
  {
    uint64_t v6 = *(void *)(result + 192);
    uint64_t v7 = *(void *)(result + 200);
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1000B3C84(v6, v7, a2);
    char v9 = v8;
    swift_release(a1);
    swift_bridgeObjectRelease();
    return v9 & 1;
  }

  return result;
}

uint64_t sub_1000D868C(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = *(void *)(v2 + 56);
  if (v5 >> 62)
  {
LABEL_34:
    sub_10006B984();
    uint64_t result = sub_100019448();
    uint64_t v6 = result;
    if (result) {
      goto LABEL_3;
    }
  }

  else
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t result = sub_100019320();
    if (v6)
    {
LABEL_3:
      unint64_t v8 = 0LL;
      unint64_t v9 = v5 & 0xC000000000000001LL;
      uint64_t v21 = v6;
      do
      {
        if (v9)
        {
          uint64_t v10 = sub_1000C0A98(v8);
        }

        else
        {
          if (v8 >= *(void *)((v5 & 0xFFFFFFFFFFFFFF8LL) + 0x10))
          {
            __break(1u);
            return result;
          }

          uint64_t v10 = *(void *)(v5 + 32 + 8 * v8);
          sub_1000D94A0();
        }

        if (__OFADD__(v8++, 1LL)) {
          goto LABEL_33;
        }
        uint64_t v12 = *(void *)(v10 + 56);
        if ((unint64_t)v12 >> 62)
        {
          if (v12 < 0) {
            uint64_t v20 = *(void *)(v10 + 56);
          }
          else {
            uint64_t v20 = v12 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain_n(*(void *)(v10 + 56), 2LL);
          uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v20);
          sub_10001DC10();
          if (v13)
          {
LABEL_11:
            uint64_t v22 = v10;
            uint64_t v14 = 4LL;
            while (1)
            {
              if ((v12 & 0xC000000000000001LL) != 0)
              {
                uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(v14 - 4, v12);
              }

              else
              {
                uint64_t v15 = *(void *)(v12 + 8 * v14);
                sub_1000D94A0();
              }

              uint64_t v16 = v14 - 3;
              if (__OFADD__(v14 - 4, 1LL)) {
                break;
              }
              uint64_t v17 = *(void *)(v15 + 80);
              uint64_t v18 = *(void *)(v15 + 88);
              BOOL v19 = v17 == a1 && v18 == a2;
              if (v19 || (sub_1000D9568(v17, v18, a1) & 1) != 0)
              {
                sub_10001DC10();
                swift_release(v22);
                sub_100019390();
                return v15;
              }

              swift_release(v15);
              ++v14;
              if (v16 == v13)
              {
                swift_release(v22);
                unint64_t v9 = v5 & 0xC000000000000001LL;
                uint64_t v6 = v21;
                goto LABEL_28;
              }
            }

            __break(1u);
LABEL_33:
            __break(1u);
            goto LABEL_34;
          }
        }

        else
        {
          uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFF8LL) + 0x10);
          sub_100023E9C();
          if (v13) {
            goto LABEL_11;
          }
        }

        swift_release(v10);
LABEL_28:
        uint64_t result = sub_10001DC10();
      }

      while (v8 != v6);
    }
  }

  sub_100019390();
  return 0LL;
}

void sub_1000D8854(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001DBCC();
  sub_1000233E4(v4, a1, a2);
  sub_1000D9574();
  sub_10001DBAC();
}

void sub_1000D88A0(void *a1)
{
  uint64_t v2 = sub_10001DBCC();
  sub_1000D6BF4(v2, a1);
  sub_1000D9574();
  sub_10001DBAC();
}

uint64_t sub_1000D88E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = type metadata accessor for OctaneAsset(0LL);
  __chkstk_darwin(v8);
  sub_100022788();
  uint64_t v10 = *(void *)(v3 + 64);
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v12 = v10 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v13 = *(void *)(v9 + 72);
    sub_10001ED74();
    while (1)
    {
      sub_1000D8E74(v12, (uint64_t)v4);
      uint64_t v14 = v4[1];
      BOOL v15 = *v4 == a1 && v14 == a2;
      if (v15 || (sub_1000D9568(*v4, v14, a1) & 1) != 0) {
        break;
      }
      sub_100055698((uint64_t)v4);
      v12 += v13;
      if (!--v11) {
        goto LABEL_12;
      }
    }

    sub_100055654((uint64_t)v4, a3);
    uint64_t v16 = 0LL;
  }

  else
  {
    sub_10001ED74();
LABEL_12:
    uint64_t v16 = 1LL;
  }

  sub_10001762C(a3, v16, 1LL, v8);
  return swift_bridgeObjectRelease();
}

uint64_t *sub_1000D89EC()
{
  return v0;
}

uint64_t sub_1000D8A48()
{
  return swift_deallocClassInstance(v0, 144LL, 7LL);
}

uint64_t type metadata accessor for OctaneConfiguration()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService19OctaneConfiguration);
}

uint64_t sub_1000D8A88(void *a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = sub_1000175B0(&qword_1002B07F0);
  __chkstk_darwin(v6);
  sub_10001DAD0();
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100019F58(a1, v7);
  unint64_t v9 = sub_1000D8DC0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for OctaneConfiguration.CodingKeys,  &type metadata for OctaneConfiguration.CodingKeys,  v9,  v7,  v8);
  uint64_t v10 = *(void *)(v4 + 16);
  uint64_t v11 = *(void *)(v4 + 24);
  LOBYTE(v24[0]) = 0;
  sub_100023E9C();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v10, v11, v24, v6);
  if (v3)
  {
    sub_1000227A0();
    return swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    *(void *)&v24[0] = *(void *)(v4 + 32);
    char v25 = 1;
    uint64_t v13 = sub_1000175B0(&qword_1002A90A0);
    sub_1000D911C(&qword_1002B0800);
    uint64_t v15 = v14;
    sub_100052298((uint64_t)v24, (uint64_t)&v25, v6, v13, v14);
    *(void *)&v24[0] = *(void *)(v4 + 40);
    char v25 = 2;
    sub_100052298((uint64_t)v24, (uint64_t)&v25, v6, v13, v15);
    *(void *)&v24[0] = *(void *)(v4 + 48);
    char v25 = 3;
    type metadata accessor for OctaneConfigurationSettings();
    uint64_t v17 = sub_1000D9498( &qword_1002B0810,  v16,  (uint64_t (*)(uint64_t))type metadata accessor for OctaneConfigurationSettings,  byte_1001FA43C);
    sub_1000D946C(v17);
    __int128 v18 = *(_OWORD *)(v4 + 88);
    v24[0] = *(_OWORD *)(v4 + 72);
    v24[1] = v18;
    v24[2] = *(_OWORD *)(v4 + 104);
    char v25 = 4;
    unint64_t v19 = sub_1000D8DFC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v24, &v25, v6, &type metadata for OctaneKeyPair, v19);
    *(void *)&v24[0] = *(void *)(v4 + 56);
    char v25 = 5;
    sub_1000175B0(&qword_1002B0820);
    sub_1000D91B4(&qword_1002B0828);
    sub_1000D946C(v20);
    *(void *)&v24[0] = *(void *)(v4 + 120);
    char v25 = 6;
    type metadata accessor for OctaneAppPolicies();
    uint64_t v22 = sub_1000D9498( &qword_1002B0838,  v21,  (uint64_t (*)(uint64_t))type metadata accessor for OctaneAppPolicies,  byte_1001FC0B8);
    sub_1000D946C(v22);
    v24[0] = *(_OWORD *)(v4 + 128);
    char v25 = 7;
    unint64_t v23 = sub_1000D8E38();
    sub_100052298((uint64_t)v24, (uint64_t)&v25, v6, (uint64_t)&type metadata for OctaneConfigurationVersion, v23);
    return sub_1000227A0();
  }

uint64_t sub_1000D8D78@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000D72A8(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1000D8DA0(void *a1)
{
  return sub_1000D8A88(a1);
}

unint64_t sub_1000D8DC0()
{
  unint64_t result = qword_1002B07F8;
  if (!qword_1002B07F8)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FED18, &type metadata for OctaneConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B07F8);
  }

  return result;
}

unint64_t sub_1000D8DFC()
{
  unint64_t result = qword_1002B0818;
  if (!qword_1002B0818)
  {
    unint64_t result = swift_getWitnessTable(byte_10020BCF8, &type metadata for OctaneKeyPair);
    atomic_store(result, (unint64_t *)&qword_1002B0818);
  }

  return result;
}

unint64_t sub_1000D8E38()
{
  unint64_t result = qword_1002B0840;
  if (!qword_1002B0840)
  {
    unint64_t result = swift_getWitnessTable("}\x1B\b", &type metadata for OctaneConfigurationVersion);
    atomic_store(result, (unint64_t *)&qword_1002B0840);
  }

  return result;
}

uint64_t sub_1000D8E74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OctaneAsset(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D8EB8()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000D8EE4(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v1 + 32);
  else {
    return 0LL;
  }
}

uint64_t sub_1000D8F34()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000D8F58(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1) & 1;
}

uint64_t sub_1000D8F80(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x656C646E7562LL;
  }
  else {
    return 1701603686LL;
  }
}

uint64_t sub_1000D8FAC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000D8F80(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

id sub_1000D8FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v12 = 0LL;
  id v7 = [v3 initWithContentsOfFile:v6 options:a3 error:&v12];

  id v8 = v12;
  if (v7)
  {
    id v9 = v12;
  }

  else
  {
    id v10 = v12;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow();
  }

  return v7;
}

uint64_t sub_1000D90AC(uint64_t a1)
{
  return sub_1000D8610(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000D90B4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000D90D8(uint64_t a1)
{
  return sub_1000D85C0(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000D90E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a6);
  }

  return result;
}

void sub_1000D911C(unint64_t *a1)
{
  if (!*a1)
  {
    uint64_t v2 = sub_100018EC0(&qword_1002A90A0);
    uint64_t v4 = sub_1000D9524(v2, v3, (uint64_t (*)(uint64_t))type metadata accessor for OctaneIAP);
    atomic_store(sub_1000D94C8(v4, v5, v6, v7, v8, v9, v10, v11, v12, v13), a1);
  }

  sub_100041AF4();
}

unint64_t sub_1000D9178()
{
  unint64_t result = qword_1002B0868;
  if (!qword_1002B0868)
  {
    unint64_t result = swift_getWitnessTable(byte_10020BD20, &type metadata for OctaneKeyPair);
    atomic_store(result, (unint64_t *)&qword_1002B0868);
  }

  return result;
}

void sub_1000D91B4(unint64_t *a1)
{
  if (!*a1)
  {
    uint64_t v2 = sub_100018EC0(&qword_1002B0820);
    uint64_t v4 = sub_1000D9524(v2, v3, (uint64_t (*)(uint64_t))type metadata accessor for OctaneSubscriptionGroup);
    atomic_store(sub_1000D94C8(v4, v5, v6, v7, v8, v9, v10, v11, v12, v13), a1);
  }

  sub_100041AF4();
}

unint64_t sub_1000D9210()
{
  unint64_t result = qword_1002B0888;
  if (!qword_1002B0888)
  {
    unint64_t result = swift_getWitnessTable("e\x1B\b", &type metadata for OctaneConfigurationVersion);
    atomic_store(result, (unint64_t *)&qword_1002B0888);
  }

  return result;
}

uint64_t sub_1000D924C(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), const char *a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = a3(a2);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for OctaneConfiguration.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_1000D92D8 + 4 * byte_1001FEB05[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1000D930C + 4 * byte_1001FEB00[v4]))();
}

uint64_t sub_1000D930C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D9314(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000D931CLL);
  }
  return result;
}

uint64_t sub_1000D9328(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000D9330LL);
  }
  *(_BYTE *)uint64_t result = a2 + 7;
  return result;
}

uint64_t sub_1000D9334(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D933C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OctaneConfiguration.CodingKeys()
{
  return &type metadata for OctaneConfiguration.CodingKeys;
}

unint64_t sub_1000D935C()
{
  unint64_t result = qword_1002B0898;
  if (!qword_1002B0898)
  {
    uint64_t v1 = sub_100018EC0(&qword_1002B08A0);
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002B0898);
  }

  return result;
}

unint64_t sub_1000D93A4()
{
  unint64_t result = qword_1002B08A8;
  if (!qword_1002B08A8)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FECF0, &type metadata for OctaneConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B08A8);
  }

  return result;
}

unint64_t sub_1000D93E4()
{
  unint64_t result = qword_1002B08B0;
  if (!qword_1002B08B0)
  {
    unint64_t result = swift_getWitnessTable("a.\b", &type metadata for OctaneConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B08B0);
  }

  return result;
}

unint64_t sub_1000D9424()
{
  unint64_t result = qword_1002B08B8;
  if (!qword_1002B08B8)
  {
    unint64_t result = swift_getWitnessTable("I.\b", &type metadata for OctaneConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B08B8);
  }

  return result;
}

uint64_t sub_1000D946C(uint64_t a1)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 128, v3 - 65, v1, v2, a1);
}

uint64_t sub_1000D948C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_1000D9498(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), const char *a4)
{
  return sub_1000D924C(a1, 255LL, a3, a4);
}

uint64_t sub_1000D94A0()
{
  return swift_retain(v0);
}

uint64_t sub_1000D94A8()
{
  return sub_10003A9EC(*(void *)(v0 - 128), *(void *)(v0 - 104));
}

uint64_t sub_1000D94B4()
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8);
  *(void *)(v3 - 144) = v4;
  return v4(v2, v0);
}

uint64_t sub_1000D94C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a10 = a1;
  return swift_getWitnessTable(v10, v11, &a10);
}

uint64_t sub_1000D94DC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 144))(v1, v0);
}

uint64_t sub_1000D94EC()
{
  return sub_1000D90E0(v0[9], v0[10], v0[11], v0[12], v0[13], v0[14]);
}

double sub_1000D94FC()
{
  *(void *)(v0 + 16) = 0LL;
  *(void *)(v0 + 24) = 0LL;
  double result = 0.0;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  return result;
}

uint64_t sub_1000D9514()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1000D9524(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  return sub_1000D924C(v4, 255LL, a3, v3);
}

  ;
}

  ;
}

uint64_t sub_1000D955C()
{
  return v0(*(void *)(v2 - 168), v1);
}

uint64_t sub_1000D9568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, v3, 0LL);
}

uint64_t sub_1000D9574()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000D9580(uint64_t a1, unint64_t a2)
{
  return sub_1000CF360(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_1000D958C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 144))(a1, v1);
}

uint64_t sub_1000D9598()
{
  return sub_10003A9EC(v1, v0);
}

uint64_t sub_1000D95A4()
{
  v0._countAndFlagsBits = 47LL;
  v0._object = (void *)0xE100000000000000LL;
  if (String.hasPrefix(_:)(v0))
  {
    uint64_t v4 = sub_1000E5784();
  }

  else
  {
    uint64_t v4 = sub_1000E5784();
    v1._countAndFlagsBits = 47LL;
    v1._object = (void *)0xE100000000000000LL;
    String.append(_:)(v1);
  }

  v2._countAndFlagsBits = sub_1000706C8();
  String.append(_:)(v2);
  return v4;
}

void sub_1000D962C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v10 = swift_bridgeObjectRetain(a1);
    uint64_t v7 = (uint64_t *)(v10 + 40);
    do
    {
      uint64_t v8 = *v7;
      uint64_t v9 = sub_100019F58((void *)(a2 + 56), *(void *)(a2 + 80));
      __chkstk_darwin(v9);
      sub_100019320();
      sub_1001B2E60();
      swift_bridgeObjectRelease(v8);
      v7 += 2;
      --v6;
    }

    while (v6);
    swift_bridgeObjectRelease(v10);
  }

  swift_release(a2);
  swift_bridgeObjectRelease(a4);
  sub_10001DAB8();
}

void sub_1000D977C(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v34 = a3;
  uint64_t v33 = a2;
  sub_1000175B0(&qword_1002B0A50);
  sub_100043FD8();
  __chkstk_darwin(v7);
  uint64_t v8 = sub_100043FBC();
  uint64_t v31 = type metadata accessor for IAPTransaction(v8);
  uint64_t v28 = *(void *)(v31 - 8);
  sub_100043FD8();
  __chkstk_darwin(v9);
  sub_100092F38();
  uint64_t v32 = v10 - v11;
  __chkstk_darwin(v12);
  uint64_t v27 = (uint64_t)&v26 - v13;
  uint64_t v29 = a1;
  uint64_t v14 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  sub_100019320();
  for (; v14; uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v25))
  {
    uint64_t v26 = v5;
    a1 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v5 = v29;
    unint64_t v30 = v29 & 0xC000000000000001LL;
    uint64_t v15 = 4LL;
    uint64_t v16 = v33;
    while (1)
    {
      id v17 = v30 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15 - 4, v5) : *(id *)(v5 + 8 * v15);
      uint64_t v18 = v15 - 3;
      if (__OFADD__(v15 - 4, 1LL)) {
        break;
      }
      id v19 = v17;
      sub_100034E9C((uint64_t)v16, v34);
      sub_1001A7CDC(v19, v16, v4);
      uint64_t v20 = v31;
      sub_10001762C(v4, 0LL, 1LL, v31);

      if (sub_10001D158(v4, 1LL, v20) == 1)
      {
        sub_10004DB00(v4, &qword_1002B0A50);
      }

      else
      {
        uint64_t v21 = v27;
        sub_1000E52F4(v4, v27, type metadata accessor for IAPTransaction);
        sub_1000E52F4(v21, v32, type metadata accessor for IAPTransaction);
        if ((swift_isUniquelyReferenced_nonNull_native(a1) & 1) == 0)
        {
          sub_1000E5748();
          a1 = v23;
        }

        unint64_t v22 = *(void *)(a1 + 16);
        if (v22 >= *(void *)(a1 + 24) >> 1)
        {
          sub_1000E5748();
          a1 = v24;
        }

        *(void *)(a1 + 16) = v22 + 1;
        sub_1000E52F4( v32,  a1 + ((*(unsigned __int8 *)(v28 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))
        + *(void *)(v28 + 72) * v22,
          type metadata accessor for IAPTransaction);
        uint64_t v5 = v29;
      }

      ++v15;
      if (v18 == v14) {
        goto LABEL_22;
      }
    }

    __break(1u);
LABEL_18:
    if (a1 < 0) {
      uint64_t v25 = a1;
    }
    else {
      uint64_t v25 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_100019320();
  }

double sub_1000D9A18@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for PurchaseEngagementDialog();
  swift_allocObject(v12, 448LL, 7LL);
  uint64_t v13 = sub_1000E3908(a1, a2, a3, a4, a5);
  *(void *)a6 = 0LL;
  *(void *)(a6 + 8) = 0LL;
  *(void *)(a6 + 16) = _swiftEmptyArrayStorage;
  *(_WORD *)(a6 + 24) = 0;
  *(void *)(a6 + 32) = 0x3233363232333731LL;
  *(void *)(a6 + 40) = 0xEB00000000373231LL;
  *(void *)(a6 + 48) = 0LL;
  *(_BYTE *)(a6 + 56) = 1;
  *(void *)(a6 + 64) = 0LL;
  *(void *)(a6 + 72) = 0LL;
  *(void *)(a6 + 80) = 0xF000000000000000LL;
  *(void *)(a6 + 88) = 0LL;
  *(void *)(a6 + 96) = 0LL;
  *(void *)(a6 + 104) = 1LL;
  double result = 0.0;
  *(_OWORD *)(a6 + 144) = 0u;
  *(_OWORD *)(a6 + 160) = 0u;
  *(_OWORD *)(a6 + 112) = 0u;
  *(_OWORD *)(a6 + 128) = 0u;
  *(_BYTE *)(a6 + 176) = 19;
  *(void *)(a6 + 184) = 0xD000000000000022LL;
  *(void *)(a6 + 192) = 0x8000000100219A90LL;
  *(void *)(a6 + 200) = v13;
  *(_BYTE *)(a6 + 208) = 2;
  return result;
}

uint64_t sub_1000D9B24@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v99 = sub_1000175B0(&qword_1002B0A48);
  uint64_t v5 = __chkstk_darwin(v99);
  uint64_t v98 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  char v94 = (char *)&v89 - v7;
  uint64_t v100 = type metadata accessor for PurchaseConfiguration(0LL);
  uint64_t v8 = __chkstk_darwin(v100);
  uint64_t v10 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  v96 = (uint64_t *)((char *)&v89 - v12);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (uint64_t *)((char *)&v89 - v14);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (uint64_t *)((char *)&v89 - v17);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v89 - v19;
  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  Swift::String v101 = v15;
  uint64_t v21 = type metadata accessor for Logger(0LL);
  sub_100018F68(v21, (uint64_t)qword_1002EB9D0);
  sub_1000E51AC((uint64_t)a1, (uint64_t)v20, type metadata accessor for PurchaseConfiguration);
  sub_1000E51AC((uint64_t)a1, (uint64_t)v18, type metadata accessor for PurchaseConfiguration);
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.default.getter();
  int v25 = v24;
  BOOL v26 = os_log_type_enabled(v23, v24);
  uint64_t v95 = v2;
  uint64_t v93 = a2;
  v97 = v10;
  if (v26)
  {
    uint64_t v27 = swift_slowAlloc(22LL, -1LL);
    uint64_t v92 = swift_slowAlloc(64LL, -1LL);
    v103[0] = v92;
    *(_DWORD *)uint64_t v27 = 136315394;
    LODWORD(v91) = v25;
    uint64_t v28 = *((void *)v20 + 2);
    unint64_t v29 = *((void *)v20 + 3);
    swift_bridgeObjectRetain();
    uint64_t v105 = sub_1000CF360(v28, v29, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106, v27 + 4);
    swift_bridgeObjectRelease();
    sub_10004DBAC((uint64_t)v20, type metadata accessor for PurchaseConfiguration);
    *(_WORD *)(v27 + 12) = 2080;
    uint64_t v30 = *v18;
    unint64_t v31 = v18[1];
    swift_bridgeObjectRetain();
    uint64_t v105 = sub_1000CF360(v30, v31, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106, v27 + 14);
    swift_bridgeObjectRelease();
    sub_10004DBAC((uint64_t)v18, type metadata accessor for PurchaseConfiguration);
    _os_log_impl( (void *)&_mh_execute_header,  v23,  (os_log_type_t)v91,  "Will run simulated off device purchase of %s for %s",  (uint8_t *)v27,  0x16u);
    uint64_t v32 = v92;
    swift_arrayDestroy(v92, 2LL);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  else
  {
    sub_10004DBAC((uint64_t)v20, type metadata accessor for PurchaseConfiguration);
    sub_10004DBAC((uint64_t)v18, type metadata accessor for PurchaseConfiguration);
  }

  uint64_t v33 = (void *)(v102 + 48);
  sub_100019F58((void *)(v102 + 48), *(void *)(v102 + 72));
  uint64_t v34 = a1[2];
  uint64_t v35 = a1[3];
  sub_100075EE8(*a1, a1[1]);
  sub_1000D7FA8(v34, v35);
  uint64_t v37 = v36;
  swift_release();
  if (v37)
  {
    __int128 v38 = v101;
    sub_1000E51AC((uint64_t)a1, (uint64_t)v101, type metadata accessor for PurchaseConfiguration);
    uint64_t v39 = v100;
    uint64_t v40 = *(int *)(v100 + 44);
    int v41 = *((unsigned __int8 *)v38 + v40);
    if (v41 != 3)
    {
      uint64_t v42 = (uint64_t *)((char *)v38 + *(int *)(v100 + 40));
      uint64_t v43 = v42[1];
      if (v43)
      {
        if (v41 == 1)
        {
          uint64_t v89 = (uint64_t *)((char *)v38 + *(int *)(v100 + 40));
          uint64_t v44 = *v42;
          sub_100019F58(v33, *(void *)(v102 + 72));
          uint64_t v45 = v38[2];
          uint64_t v46 = v38[3];
          uint64_t v47 = *v38;
          uint64_t v48 = v38[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_100075EE8(v47, v48);
          uint64_t v49 = sub_1000D868C(v45, v46);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          if (v49)
          {
            uint64_t v50 = *(void *)(v49 + 152);
            swift_bridgeObjectRetain();
            swift_release();
            uint64_t v91 = v44;
            uint64_t v51 = *(void *)((v50 & 0xFFFFFFFFFFFFF8LL) + 0x10);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            for (; v51; uint64_t v51 = _CocoaArrayWrapper.endIndex.getter(v88))
            {
              unint64_t v90 = v50 & 0xC000000000000001LL;
              uint64_t v52 = 4LL;
              while (1)
              {
                if (v90)
                {
                  uint64_t v53 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v52 - 4, v50);
                }

                else
                {
                  uint64_t v53 = *(void **)(v50 + 8 * v52);
                  swift_retain();
                }

                uint64_t v54 = v52 - 3;
                if (__OFADD__(v52 - 4, 1LL)) {
                  break;
                }
                uint64_t v55 = v53[10];
                uint64_t v56 = v53[11];
                BOOL v57 = v55 == v91 && v43 == v56;
                if (v57 || (_stringCompareWithSmolCheck(_:_:expecting:)(v55, v56, v91, v43, 0LL) & 1) != 0)
                {
                  swift_bridgeObjectRelease_n(v50, 2LL);
                  swift_bridgeObjectRelease_n(v43, 2LL);
                  uint64_t v63 = v53[2];
                  uint64_t v62 = v53[3];
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRelease();
                  swift_release();
                  uint64_t v64 = v89;
                  *uint64_t v89 = v63;
                  v64[1] = v62;
                  __int128 v38 = v101;
                  *((_BYTE *)v101 + v40) = 1;
                  goto LABEL_29;
                }

                swift_release();
                ++v52;
                if (v54 == v51) {
                  goto LABEL_24;
                }
              }

              __break(1u);
LABEL_41:
              if (v50 < 0) {
                uint64_t v88 = v50;
              }
              else {
                uint64_t v88 = v50 & 0xFFFFFFFFFFFFFF8LL;
              }
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }

void sub_1000DA370()
{
  if ((v0 & 1) == 0) {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  sub_100086438();
  sub_1000E57C0();
  swift_bridgeObjectRelease();
  sub_100023E74();
}

uint64_t sub_1000DA3F0(uint64_t *a1, uint64_t *a2, void *a3, uint64_t a4)
{
  *(void *)&__int128 v296 = a4;
  v313 = a2;
  v310 = a1;
  uint64_t v6 = type metadata accessor for IAPTransaction(0LL);
  *(void *)&__int128 v290 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  v291 = (char *)v269 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&__int128 v307 = type metadata accessor for UUID(0LL);
  *(void *)&__int128 v288 = *(void *)(v307 - 8);
  __chkstk_darwin(v307);
  *(void *)&__int128 v287 = (char *)v269 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&__int128 v283 = sub_1000175B0(&qword_1002AE8B0);
  uint64_t v9 = __chkstk_darwin(v283);
  *(void *)&__int128 v284 = (char *)v269 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  *(void *)&__int128 v280 = (char *)v269 - v11;
  *(void *)&__int128 v281 = sub_1000175B0(&qword_1002AE8B8);
  uint64_t v12 = __chkstk_darwin(v281);
  *(void *)&__int128 v282 = (char *)v269 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  *(void *)&__int128 v285 = (char *)v269 - v14;
  uint64_t v15 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  uint64_t v16 = __chkstk_darwin(v15);
  *(void *)&__int128 v289 = (char *)v269 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  *(void *)&__int128 v303 = (char *)v269 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  *(void *)&__int128 v300 = (char *)v269 - v21;
  __chkstk_darwin(v20);
  *(void *)&__int128 v299 = (char *)v269 - v22;
  uint64_t v23 = sub_1000175B0(&qword_1002AC060);
  uint64_t v24 = __chkstk_darwin(v23);
  *(void *)&__int128 v286 = (char *)v269 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = __chkstk_darwin(v24);
  *(void *)&__int128 v297 = (char *)v269 - v27;
  __chkstk_darwin(v26);
  v309 = (char *)v269 - v28;
  uint64_t v311 = type metadata accessor for Date(0LL);
  *(void *)&__int128 v306 = *(void *)(v311 - 8);
  uint64_t v29 = __chkstk_darwin(v311);
  v292 = (char *)v269 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = __chkstk_darwin(v29);
  *(void *)&__int128 v293 = (char *)v269 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  *(void *)&__int128 v301 = (char *)v269 - v34;
  __chkstk_darwin(v33);
  *(void *)&__int128 v304 = (char *)v269 - v35;
  uint64_t v36 = sub_1000175B0(&qword_1002B0A48);
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = *(void *)(v37 + 64);
  uint64_t v39 = __chkstk_darwin(v36);
  *(void *)&__int128 v305 = (char *)v269 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = __chkstk_darwin(v39);
  *(void *)&__int128 v294 = (char *)v269 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  *(void *)&__int128 v295 = (char *)v269 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  *(void *)&__int128 v298 = (char *)v269 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v48 = (char *)v269 - v47;
  uint64_t v49 = __chkstk_darwin(v46);
  uint64_t v51 = (char *)v269 - v50;
  uint64_t v52 = __chkstk_darwin(v49);
  uint64_t v54 = (char *)v269 - v53;
  uint64_t v308 = v52;
  uint64_t v315 = *(int *)(v52 + 52);
  char v55 = *((_BYTE *)a3 + v315);
  v316 = a3;
  sub_100067DA4((uint64_t)a3, (uint64_t)v269 - v53, &qword_1002B0A48);
  v314 = v4;
  if ((v55 & 1) != 0)
  {
    int v312 = 0;
  }

  else
  {
    sub_100019F58(v4 + 6, v4[9]);
    int v312 = sub_100075EC8();
  }

  sub_10004DB00((uint64_t)v54, &qword_1002B0A48);
  char v56 = *((_BYTE *)v316 + v315);
  sub_100067DA4((uint64_t)v316, (uint64_t)v51, &qword_1002B0A48);
  if ((v56 & 1) != 0)
  {
    BOOL v57 = 0;
  }

  else
  {
    sub_100019F58(v314 + 6, v314[9]);
    BOOL v57 = sub_1000760F8();
  }

  sub_10004DB00((uint64_t)v51, &qword_1002B0A48);
  unint64_t v58 = v316;
  sub_100067DA4((uint64_t)v316, (uint64_t)v48, &qword_1002B0A48);
  uint64_t v59 = *(unsigned __int8 *)(v37 + 80);
  uint64_t v60 = (v59 + 16) & ~v59;
  unint64_t v61 = (v60 + v38 + 9) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v62 = swift_allocObject(&unk_100281C18, v61 + 873, v59 | 7);
  sub_1000925C4((uint64_t)v48, v62 + v60, &qword_1002B0A48);
  uint64_t v63 = (_BYTE *)(v62 + v60 + v38);
  *uint64_t v63 = v312 & 1;
  LODWORD(v302) = v57;
  v63[1] = v57;
  uint64_t v64 = (uint64_t)v313;
  memcpy((void *)(v62 + v61), v313, 0x369uLL);
  sub_1000A2B6C(v64);
  NSString v65 = String._bridgeToObjectiveC()();
  uint64_t v66 = swift_allocObject(&unk_100281C40, 32LL, 7LL);
  *(void *)(v66 + 16) = sub_1000E513C;
  *(void *)(v66 + 24) = v62;
  *(void *)&v377[2] = sub_1000A3384;
  *((void *)&v377[2] + 1) = v66;
  *(void *)&v377[0] = _NSConcreteStackBlock;
  *((void *)&v377[0] + 1) = 1107296256LL;
  *(void *)&v377[1] = sub_100124868;
  *((void *)&v377[1] + 1) = &unk_100281C58;
  uint64_t v67 = _Block_copy(v377);
  swift_retain();
  uint64_t v68 = (uint64_t)v58;
  swift_release();
  AnalyticsSendEventLazy(v65, v67);
  _Block_release(v67);
  swift_release();

  uint64_t v69 = type metadata accessor for AllSetDialog();
  swift_allocObject(v69, 448LL, 7LL);
  uint64_t v70 = sub_10011BB88();
  char v375 = 0;
  char v374 = 1;
  unsigned __int8 v373 = 0;
  char v370 = 1;
  if (*((_BYTE *)v58 + v315) == 1 && *(_BYTE *)(v58[3] + 112LL) == 1)
  {
    sub_100019F58(v314 + 11, v314[14]);
    uint64_t v71 = swift_retain();
    uint64_t v72 = v304;
    static Date.now.getter(v71);
    uint64_t v73 = (void *)sub_100088140();
    (*(void (**)(uint64_t, uint64_t))(v306 + 8))(v72, v311);
    if (v73)
    {
      v317[0] = 0uLL;
      *(void *)&v317[1] = _swiftEmptyArrayStorage;
      WORD4(v317[1]) = 0;
      uint64_t v74 = v70;
      *(void *)&v317[2] = 0x3233363232333731LL;
      *((void *)&v317[2] + 1) = 0xEB00000000373231LL;
      *(void *)&v317[3] = 0LL;
      BYTE8(v317[3]) = 1;
      v317[4] = 0uLL;
      v317[5] = 0xF000000000000000LL;
      *(void *)&v317[6] = 0LL;
      *((void *)&v317[6] + 1) = 1LL;
      memset(&v317[7], 0, 64);
      LOBYTE(v317[11]) = 4;
      *(void *)&v317[12] = 0LL;
      *((void *)&v317[11] + 1) = 0LL;
      *((void *)&v317[12] + 1) = v70;
      LOBYTE(v317[13]) = 2;
      sub_100053590((uint64_t)v317);
      swift_release();
      uint64_t v75 = v310;
      v310[3] = (uint64_t)&type metadata for LegacyInAppBuyResponse;
      v75[4] = sub_1000A2F64();
      uint64_t v76 = swift_allocObject(&unk_100281C90, 225LL, 7LL);
      unint64_t v77 = (void *)(v76 + 16);
      uint64_t *v75 = v76;

      memcpy(v77, v317, 0xD1uLL);
      v377[0] = 0uLL;
      *(void *)&v377[1] = _swiftEmptyArrayStorage;
      WORD4(v377[1]) = v373;
      *(void *)&v377[2] = 0x3233363232333731LL;
      *((void *)&v377[2] + 1) = 0xEB00000000373231LL;
      *(void *)&v377[3] = 0LL;
      BYTE8(v377[3]) = v370;
      v377[4] = 0uLL;
      v377[5] = 0xF000000000000000LL;
      *(void *)&v377[6] = 0LL;
      *((void *)&v377[6] + 1) = 1LL;
      memset(&v377[7], 0, 64);
      LOBYTE(v377[11]) = 4;
      *((void *)&v377[11] + 1) = 0LL;
      *(void *)&v377[12] = 0LL;
      *((void *)&v377[12] + 1) = v74;
      LOBYTE(v377[13]) = 2;
LABEL_36:
      uint64_t v139 = v377;
      goto LABEL_37;
    }

    swift_release();
    uint64_t v68 = (uint64_t)v58;
  }

  v78 = v313;
  id v79 = v314;
  if ((*(_BYTE *)(v68 + 16) & 1) == 0)
  {
    uint64_t v80 = (void *)v313[33];
    if (!v80
      || (uint64_t v81 = v313[32],
          swift_bridgeObjectRetain(),
          v82._countAndFlagsBits = v81,
          v82._object = v80,
          !Bool.init(_:)(v82).value))
    {
      uint64_t v83 = v305;
      sub_100067DA4(v68, v305, &qword_1002B0A48);
      uint64_t v84 = *(void *)(v68 + 24);
      int v85 = *(unsigned __int8 *)(v84 + 112);
      if (v85 == 1)
      {
        if (sub_1000DD8DC((uint64_t)v79, v83))
        {
          sub_10004DB00(v83, &qword_1002B0A48);
          sub_1000925C4((uint64_t)(v78 + 70), (uint64_t)v346, &qword_1002AA7C0);
          LODWORD(v316) = *((unsigned __int8 *)v78 + 552);
          uint64_t v315 = v78[67];
          v314 = (void *)v78[68];
          int v312 = *((unsigned __int8 *)v78 + 528);
          uint64_t v311 = v78[64];
          uint64_t v308 = v78[65];
          __int128 v86 = *((_OWORD *)v78 + 31);
          __int128 v306 = *((_OWORD *)v78 + 30);
          __int128 v307 = v86;
          __int128 v87 = *((_OWORD *)v78 + 29);
          __int128 v304 = *((_OWORD *)v78 + 28);
          __int128 v305 = v87;
          __int128 v88 = *((_OWORD *)v78 + 27);
          __int128 v302 = *((_OWORD *)v78 + 26);
          __int128 v303 = v88;
          __int128 v89 = *((_OWORD *)v78 + 25);
          __int128 v300 = *((_OWORD *)v78 + 24);
          __int128 v301 = v89;
          __int128 v90 = *((_OWORD *)v78 + 23);
          __int128 v298 = *((_OWORD *)v78 + 22);
          __int128 v299 = v90;
          __int128 v91 = *((_OWORD *)v78 + 21);
          __int128 v296 = *((_OWORD *)v78 + 20);
          __int128 v297 = v91;
          __int128 v92 = *((_OWORD *)v78 + 19);
          __int128 v294 = *((_OWORD *)v78 + 18);
          __int128 v295 = v92;
          __int128 v293 = *((_OWORD *)v78 + 17);
          v292 = (char *)v78[30];
          v291 = (char *)v78[31];
          __int128 v93 = *((_OWORD *)v78 + 14);
          __int128 v289 = *((_OWORD *)v78 + 13);
          __int128 v290 = v93;
          uint64_t v94 = v68;
          char v95 = *((_BYTE *)v78 + 200);
          uint64_t v96 = (uint64_t)v78;
          uint64_t v97 = v78[23];
          uint64_t v98 = *(void *)(v96 + 192);
          __int128 v99 = *(_OWORD *)(v96 + 168);
          __int128 v287 = *(_OWORD *)(v96 + 152);
          __int128 v288 = v99;
          __int128 v100 = *(_OWORD *)(v96 + 136);
          __int128 v285 = *(_OWORD *)(v96 + 120);
          __int128 v286 = v100;
          __int128 v101 = *(_OWORD *)(v96 + 104);
          char v102 = *(_BYTE *)(v96 + 96);
          v309 = (char *)v70;
          uint64_t v103 = *(void *)(v96 + 80);
          uint64_t v104 = *(void *)(v96 + 88);
          __int128 v283 = *(_OWORD *)(v96 + 64);
          __int128 v284 = v101;
          __int128 v105 = *(_OWORD *)(v96 + 48);
          __int128 v281 = *(_OWORD *)(v96 + 32);
          __int128 v282 = v105;
          __int128 v106 = *(_OWORD *)(v96 + 16);
          __int128 v279 = *(_OWORD *)v96;
          __int128 v280 = v106;
          sub_1000A2B6C(v96);
          swift_bridgeObjectRelease();
          uint64_t v107 = *(void *)(v94 + 24);
          v317[0] = v279;
          v317[1] = v280;
          v317[2] = v281;
          v317[3] = v282;
          v317[4] = v283;
          *(void *)&v317[5] = v103;
          *((void *)&v317[5] + 1) = v104;
          LOBYTE(v317[6]) = v102;
          *(_OWORD *)((char *)&v317[6] + 8) = v284;
          *(_OWORD *)((char *)&v317[7] + 8) = v285;
          *(_OWORD *)((char *)&v317[8] + 8) = v286;
          *(_OWORD *)((char *)&v317[9] + 8) = v287;
          *(_OWORD *)((char *)&v317[10] + 8) = v288;
          *((void *)&v317[11] + 1) = v97;
          *(void *)&v317[12] = v98;
          BYTE8(v317[12]) = v95;
          v317[13] = v289;
          v317[14] = v290;
          *(void *)&v317[15] = v292;
          *((void *)&v317[15] + 1) = v291;
          v317[16] = xmmword_1001FB240;
          v317[17] = v293;
          v317[18] = v294;
          v317[19] = v295;
          v317[20] = v296;
          v317[21] = v297;
          v317[22] = v298;
          v317[23] = v299;
          v317[24] = v300;
          v317[25] = v301;
          v317[26] = v302;
          v317[27] = v303;
          v317[28] = v304;
          v317[29] = v305;
          v317[30] = v306;
          v317[31] = v307;
          *(void *)&v317[32] = v311;
          *((void *)&v317[32] + 1) = v308;
          LOBYTE(v317[33]) = v312;
          *((void *)&v317[33] + 1) = v315;
          *(void *)&v317[34] = v314;
          BYTE8(v317[34]) = (_BYTE)v316;
          sub_1000925C4((uint64_t)v346, (uint64_t)&v317[35], &qword_1002AA7C0);
          memcpy(v377, v317, 0x369uLL);
          swift_retain();
          uint64_t v108 = sub_10016AC94();
          uint64_t v110 = v109;
          sub_1000A343C((uint64_t)v317);
          sub_100052934(v107, v108, v110, (uint64_t)v344);
LABEL_22:
          uint64_t v137 = v310;
          v310[3] = (uint64_t)&type metadata for LegacyInAppBuyResponse;
          v137[4] = sub_1000A2F64();
          uint64_t v138 = swift_allocObject(&unk_100281C90, 225LL, 7LL);
          *uint64_t v137 = v138;
          memcpy((void *)(v138 + 16), v344, 0xD1uLL);
          v318[1] = 0LL;
          v318[0] = 0LL;
          v318[2] = _swiftEmptyArrayStorage;
          unsigned __int8 v319 = v373;
          char v320 = 0;
          int v321 = v371;
          __int16 v322 = v372;
          uint64_t v323 = 0x3233363232333731LL;
          unint64_t v324 = 0xEB00000000373231LL;
          uint64_t v325 = 0LL;
          char v326 = v370;
          *(_DWORD *)&v327[3] = *(_DWORD *)((char *)v369 + 3);
          *(_DWORD *)v327 = v369[0];
          uint64_t v328 = 0LL;
          uint64_t v329 = 0LL;
          unint64_t v330 = 0xF000000000000000LL;
          uint64_t v331 = 0LL;
          uint64_t v332 = 0LL;
          uint64_t v333 = 1LL;
          __int128 v334 = 0u;
          __int128 v335 = 0u;
          __int128 v336 = 0u;
          __int128 v337 = 0u;
          char v338 = 22;
          *(_DWORD *)v339 = v368[0];
          *(_DWORD *)&v339[3] = *(_DWORD *)((char *)v368 + 3);
          uint64_t v340 = 0LL;
          uint64_t v341 = 0LL;
          v342 = v309;
          char v343 = 2;
          uint64_t v139 = v318;
          goto LABEL_37;
        }

        int v85 = *(unsigned __int8 *)(v84 + 112);
      }

      if (v85 == 2)
      {
        BOOL v111 = sub_1000DD8DC((uint64_t)v79, v83);
        sub_10004DB00(v83, &qword_1002B0A48);
        if (v111)
        {
          sub_1000925C4((uint64_t)(v78 + 70), (uint64_t)v346, &qword_1002AA7C0);
          LODWORD(v316) = *((unsigned __int8 *)v78 + 552);
          uint64_t v315 = v78[67];
          v314 = (void *)v78[68];
          int v312 = *((unsigned __int8 *)v78 + 528);
          uint64_t v311 = v78[64];
          uint64_t v308 = v78[65];
          __int128 v112 = *((_OWORD *)v78 + 31);
          __int128 v306 = *((_OWORD *)v78 + 30);
          __int128 v307 = v112;
          __int128 v113 = *((_OWORD *)v78 + 29);
          __int128 v304 = *((_OWORD *)v78 + 28);
          __int128 v305 = v113;
          __int128 v114 = *((_OWORD *)v78 + 27);
          __int128 v302 = *((_OWORD *)v78 + 26);
          __int128 v303 = v114;
          __int128 v115 = *((_OWORD *)v78 + 25);
          __int128 v300 = *((_OWORD *)v78 + 24);
          __int128 v301 = v115;
          __int128 v116 = *((_OWORD *)v78 + 23);
          __int128 v298 = *((_OWORD *)v78 + 22);
          __int128 v299 = v116;
          __int128 v117 = *((_OWORD *)v78 + 21);
          __int128 v296 = *((_OWORD *)v78 + 20);
          __int128 v297 = v117;
          __int128 v118 = *((_OWORD *)v78 + 19);
          __int128 v294 = *((_OWORD *)v78 + 18);
          __int128 v295 = v118;
          __int128 v293 = *((_OWORD *)v78 + 17);
          v292 = (char *)v78[30];
          v309 = (char *)v70;
          v291 = (char *)v78[31];
          __int128 v119 = *((_OWORD *)v78 + 14);
          __int128 v289 = *((_OWORD *)v78 + 13);
          __int128 v290 = v119;
          char v120 = *((_BYTE *)v78 + 200);
          uint64_t v121 = v68;
          uint64_t v122 = (uint64_t)v78;
          uint64_t v123 = v78[23];
          uint64_t v124 = v78[24];
          __int128 v125 = *(_OWORD *)(v122 + 168);
          __int128 v287 = *(_OWORD *)(v122 + 152);
          __int128 v288 = v125;
          __int128 v126 = *(_OWORD *)(v122 + 136);
          __int128 v285 = *(_OWORD *)(v122 + 120);
          __int128 v286 = v126;
          __int128 v127 = *(_OWORD *)(v122 + 104);
          char v128 = *(_BYTE *)(v122 + 96);
          uint64_t v130 = *(void *)(v122 + 80);
          uint64_t v129 = *(void *)(v122 + 88);
          __int128 v283 = *(_OWORD *)(v122 + 64);
          __int128 v284 = v127;
          __int128 v131 = *(_OWORD *)(v122 + 48);
          __int128 v281 = *(_OWORD *)(v122 + 32);
          __int128 v282 = v131;
          __int128 v132 = *(_OWORD *)(v122 + 16);
          __int128 v279 = *(_OWORD *)v122;
          __int128 v280 = v132;
          sub_1000A2B6C(v122);
          swift_bridgeObjectRelease();
          uint64_t v133 = *(void *)(v121 + 24);
          v317[0] = v279;
          v317[1] = v280;
          v317[2] = v281;
          v317[3] = v282;
          v317[4] = v283;
          *(void *)&v317[5] = v130;
          *((void *)&v317[5] + 1) = v129;
          LOBYTE(v317[6]) = v128;
          *(_OWORD *)((char *)&v317[6] + 8) = v284;
          *(_OWORD *)((char *)&v317[7] + 8) = v285;
          *(_OWORD *)((char *)&v317[8] + 8) = v286;
          *(_OWORD *)((char *)&v317[9] + 8) = v287;
          *(_OWORD *)((char *)&v317[10] + 8) = v288;
          *((void *)&v317[11] + 1) = v123;
          *(void *)&v317[12] = v124;
          BYTE8(v317[12]) = v120;
          v317[13] = v289;
          v317[14] = v290;
          *(void *)&v317[15] = v292;
          *((void *)&v317[15] + 1) = v291;
          v317[16] = xmmword_1001FB240;
          v317[17] = v293;
          v317[18] = v294;
          v317[19] = v295;
          v317[20] = v296;
          v317[21] = v297;
          v317[22] = v298;
          v317[23] = v299;
          v317[24] = v300;
          v317[25] = v301;
          v317[26] = v302;
          v317[27] = v303;
          v317[28] = v304;
          v317[29] = v305;
          v317[30] = v306;
          v317[31] = v307;
          *(void *)&v317[32] = v311;
          *((void *)&v317[32] + 1) = v308;
          LOBYTE(v317[33]) = v312;
          *((void *)&v317[33] + 1) = v315;
          *(void *)&v317[34] = v314;
          BYTE8(v317[34]) = (_BYTE)v316;
          sub_1000925C4((uint64_t)v346, (uint64_t)&v317[35], &qword_1002AA7C0);
          memcpy(v377, v317, 0x369uLL);
          swift_retain();
          uint64_t v134 = sub_10016AC94();
          uint64_t v136 = v135;
          sub_1000A343C((uint64_t)v317);
          sub_100052948(v133, v134, v136, (uint64_t)v344);
          goto LABEL_22;
        }
      }

      else
      {
        sub_10004DB00(v83, &qword_1002B0A48);
      }
    }
  }

  int v140 = *(unsigned __int8 *)(*(void *)(v68 + 24) + 112LL);
  sub_10016B0A4();
  if (v140 == 3)
  {
    uint64_t v142 = (uint64_t)v309;
    if (v141 > 1)
    {
      uint64_t v143 = type metadata accessor for MultipleQuantitiesNotAllowedDialog();
      swift_allocObject(v143, 448LL, 7LL);
      uint64_t v144 = sub_10011C4A8();
LABEL_29:
      uint64_t v146 = v144;
      swift_retain();
      swift_release();
      if (*(_BYTE *)(v68 + v315)) {
        char v147 = 3;
      }
      else {
        char v147 = 0;
      }
      v317[0] = 0uLL;
      *(void *)&v317[1] = _swiftEmptyArrayStorage;
      WORD4(v317[1]) = 1;
      *(void *)&v317[2] = 0x3233363232333731LL;
      *((void *)&v317[2] + 1) = 0xEB00000000373231LL;
      *(void *)&v317[3] = 0LL;
      BYTE8(v317[3]) = 1;
      v317[4] = 0uLL;
      v317[5] = 0xF000000000000000LL;
      *(void *)&v317[6] = 0LL;
      *((void *)&v317[6] + 1) = 1LL;
      memset(&v317[7], 0, 64);
      LOBYTE(v317[11]) = v147;
      *(void *)&v317[12] = 0LL;
      *((void *)&v317[11] + 1) = 0LL;
      *((void *)&v317[12] + 1) = v146;
      LOBYTE(v317[13]) = 1;
      sub_100053590((uint64_t)v317);
      swift_release();
      v148 = v310;
      v310[3] = (uint64_t)&type metadata for LegacyInAppBuyResponse;
      v148[4] = sub_1000A2F64();
      uint64_t v149 = swift_allocObject(&unk_100281C90, 225LL, 7LL);
      uint64_t *v148 = v149;
      memcpy((void *)(v149 + 16), v317, 0xD1uLL);
      v377[0] = 0uLL;
      *(void *)&v377[1] = _swiftEmptyArrayStorage;
      WORD4(v377[1]) = 1;
      *(void *)&v377[2] = 0x3233363232333731LL;
      *((void *)&v377[2] + 1) = 0xEB00000000373231LL;
      *(void *)&v377[3] = 0LL;
      BYTE8(v377[3]) = v370;
      v377[4] = 0uLL;
      v377[5] = 0xF000000000000000LL;
      *(void *)&v377[6] = 0LL;
      *((void *)&v377[6] + 1) = 1LL;
      memset(&v377[7], 0, 64);
      LOBYTE(v377[11]) = v147;
      *(void *)&v377[12] = 0LL;
      *((void *)&v377[11] + 1) = 0LL;
      *((void *)&v377[12] + 1) = v146;
      LOBYTE(v377[13]) = 1;
      goto LABEL_36;
    }
  }

  else
  {
    uint64_t v142 = (uint64_t)v309;
    if (v141 > 10)
    {
      uint64_t v145 = type metadata accessor for InvalidQuantityDialog();
      swift_allocObject(v145, 448LL, 7LL);
      uint64_t v144 = sub_10011C390();
      goto LABEL_29;
    }
  }

  uint64_t v150 = v78[62];
  uint64_t v151 = v78[63];
  if (v151)
  {
    UUID.init(uuidString:)(v78[62]);
    if (sub_10001D158(v142, 1LL, v307) == 1)
    {
      sub_10004DB00(v142, &qword_1002AC060);
      uint64_t v152 = type metadata accessor for InvalidAppAccountTokenDialog();
      swift_allocObject(v152, 448LL, 7LL);
      uint64_t v153 = sub_10011C500();
      swift_retain();
      swift_release();
      v317[0] = 0uLL;
      *(void *)&v317[1] = _swiftEmptyArrayStorage;
      WORD4(v317[1]) = 1;
      *(void *)&v317[2] = 0x3233363232333731LL;
      *((void *)&v317[2] + 1) = 0xEB00000000373231LL;
      *(void *)&v317[3] = 0LL;
      BYTE8(v317[3]) = 1;
      v317[4] = 0uLL;
      v317[5] = 0xF000000000000000LL;
      *(void *)&v317[6] = 0LL;
      *((void *)&v317[6] + 1) = 1LL;
      memset(&v317[7], 0, 65);
      *(void *)&v317[12] = 0LL;
      *((void *)&v317[11] + 1) = 0LL;
      *((void *)&v317[12] + 1) = v153;
      LOBYTE(v317[13]) = 2;
      sub_100053590((uint64_t)v317);
      swift_release();
      v154 = v310;
      v310[3] = (uint64_t)&type metadata for LegacyInAppBuyResponse;
      v154[4] = sub_1000A2F64();
      uint64_t v155 = swift_allocObject(&unk_100281C90, 225LL, 7LL);
      uint64_t *v154 = v155;
      memcpy((void *)(v155 + 16), v317, 0xD1uLL);
      v377[0] = 0uLL;
      *(void *)&v377[1] = _swiftEmptyArrayStorage;
      WORD4(v377[1]) = 1;
      *(void *)&v377[2] = 0x3233363232333731LL;
      *((void *)&v377[2] + 1) = 0xEB00000000373231LL;
      *(void *)&v377[3] = 0LL;
      BYTE8(v377[3]) = v370;
      v377[4] = 0uLL;
      v377[5] = 0xF000000000000000LL;
      *(void *)&v377[6] = 0LL;
      *((void *)&v377[6] + 1) = 1LL;
      memset(&v377[7], 0, 65);
      *(void *)&v377[12] = 0LL;
      *((void *)&v377[11] + 1) = 0LL;
      *((void *)&v377[12] + 1) = v153;
      LOBYTE(v377[13]) = 2;
      goto LABEL_36;
    }

    sub_10004DB00(v142, &qword_1002AC060);
  }

  uint64_t v273 = v150;
  v309 = (char *)v70;
  uint64_t v156 = v79[9];
  v277 = v79 + 6;
  sub_100019F58(v79 + 6, v156);
  sub_100075EE8(*(void *)v68, *(void *)(v68 + 8));
  *(void *)&__int128 v304 = v157;
  sub_1000925C4((uint64_t)(v78 + 70), (uint64_t)v317, &qword_1002AA7C0);
  sub_1000925C4((uint64_t)v317, (uint64_t)v377, &qword_1002AA7C0);
  if (BYTE8(v377[19]) == 1)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    char v158 = _stringCompareWithSmolCheck(_:_:expecting:)( 3157553LL,  0xE300000000000000LL,  3157554LL,  0xE300000000000000LL,  0LL);
    swift_bridgeObjectRelease();
    if ((v158 & 1) == 0) {
      goto LABEL_45;
    }
  }

  sub_1000925C4((uint64_t)(v78 + 60), (uint64_t)v376, &qword_1002AA990);
  sub_1000925C4((uint64_t)v376, (uint64_t)&v378, &qword_1002AA990);
  uint64_t v159 = v379;
  if (v379)
  {
    uint64_t v160 = v378;
    v161 = (void *)swift_allocObject(&unk_100281CE0, 40LL, 7LL);
    v161[2] = v79;
    v161[3] = v160;
    *(void *)&__int128 v279 = v161;
    v161[4] = v159;
    swift_retain();
    sub_100047A90((uint64_t)v376);
    v278 = sub_1000A2F58;
    goto LABEL_46;
  }

uint64_t sub_1000DD464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 24);
  sub_100174CE0();
  uint64_t v7 = v6;
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  swift_isUniquelyReferenced_nonNull_native(v7);
  sub_1001B8C10((uint64_t)isa, 0x7975426F546B7361LL, 0xEF64656C62616E45LL);
  swift_bridgeObjectRelease();
  Class v9 = Bool._bridgeToObjectiveC()().super.super.isa;
  swift_isUniquelyReferenced_nonNull_native(v7);
  sub_1001B8C10((uint64_t)v9, 0x4473676F6C616964LL, 0xEF64656C62617369LL);
  swift_bridgeObjectRelease();
  Class v10 = Bool._bridgeToObjectiveC()().super.super.isa;
  swift_isUniquelyReferenced_nonNull_native(v7);
  sub_1001B8C10((uint64_t)v10, 0xD000000000000015LL, 0x800000010021B4A0LL);
  swift_bridgeObjectRelease();
  Class v11 = Bool._bridgeToObjectiveC()().super.super.isa;
  swift_isUniquelyReferenced_nonNull_native(v7);
  sub_1001B8C10((uint64_t)v11, 0xD000000000000012LL, 0x800000010021B4C0LL);
  swift_bridgeObjectRelease();
  sub_10016B0A4();
  Class v12 = Int._bridgeToObjectiveC()().super.super.isa;
  swift_isUniquelyReferenced_nonNull_native(v7);
  v24[0] = v7;
  sub_1001B8C10((uint64_t)v12, 0x797469746E617571LL, 0xE800000000000000LL);
  uint64_t v13 = v7;
  swift_bridgeObjectRelease();
  sub_1000925C4(a4 + 560, (uint64_t)v23, &qword_1002AA7C0);
  sub_1000925C4((uint64_t)v23, (uint64_t)v24, &qword_1002AA7C0);
  if (sub_1000A3034((uint64_t)v24) != 1)
  {
    if ((v25 & 1) == 0) {
      _stringCompareWithSmolCheck(_:_:expecting:)(3157553LL, 0xE300000000000000LL, 3157554LL, 0xE300000000000000LL, 0LL);
    }
    swift_bridgeObjectRelease();
    Class v14 = Bool._bridgeToObjectiveC()().super.super.isa;
    swift_isUniquelyReferenced_nonNull_native(v7);
    uint64_t v27 = v7;
    sub_1001B8C10((uint64_t)v14, 0x4B65726F74537369LL, 0xEB00000000327469LL);
    uint64_t v13 = v27;
    swift_bridgeObjectRelease();
  }

  uint64_t v15 = type metadata accessor for OctaneSubscription();
  if (swift_dynamicCastClass(v5, v15))
  {
    sub_1000925C4(a4 + 448, (uint64_t)v22, &qword_1002AA990);
    sub_1000925C4((uint64_t)v22, (uint64_t)&v27, &qword_1002AA990);
    Class v16 = Bool._bridgeToObjectiveC()().super.super.isa;
    swift_isUniquelyReferenced_nonNull_native(v13);
    uint64_t v26 = v13;
    sub_1001B8C10((uint64_t)v16, 0x6F6D6F7250736168LL, 0xED0000726566664FLL);
    uint64_t v17 = v26;
    swift_bridgeObjectRelease();
    sub_1000925C4((uint64_t)v22, (uint64_t)&v26, &qword_1002AA990);
    Class v18 = Bool._bridgeToObjectiveC()().super.super.isa;
    swift_isUniquelyReferenced_nonNull_native(v17);
    sub_1001B8C10((uint64_t)v18, 0x61626E6957736168LL, 0xEF726566664F6B63LL);
    uint64_t v13 = v17;
    swift_bridgeObjectRelease();
  }

  sub_1000925C4(a4 + 552, (uint64_t)&v21, &qword_1002AECC8);
  sub_1000925C4((uint64_t)&v21, (uint64_t)&v28, &qword_1002AECC8);
  if ((v28 & 1) != 0)
  {
    sub_1000A3784();
    Class v19 = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
    swift_isUniquelyReferenced_nonNull_native(v13);
    sub_1001B8C10((uint64_t)v19, 0xD000000000000017LL, 0x800000010021B4E0LL);
    swift_bridgeObjectRelease();
  }

  return v13;
}

BOOL sub_1000DD8DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v16[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  Class v10 = (char *)&v16[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000E4EAC(a1 + 88, (uint64_t)v16);
  sub_100019F58(v16, v16[3]);
  uint64_t v11 = sub_1000175B0(&qword_1002B0A48);
  sub_100067DA4(a2 + *(int *)(v11 + 44), (uint64_t)v6, (uint64_t *)&unk_1002AFCD0);
  uint64_t v12 = sub_10001D158((uint64_t)v6, 1LL, v7);
  if ((_DWORD)v12 == 1)
  {
    static Date.now.getter(v12);
    sub_10004DB00((uint64_t)v6, (uint64_t *)&unk_1002AFCD0);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  }

  uint64_t v13 = (void *)sub_100088140();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v13) {

  }
  sub_100019F7C(v16);
  return v13 != 0LL;
}

uint64_t sub_1000DDA6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v97 = a3;
  uint64_t v98 = a4;
  uint64_t v10 = sub_1000175B0(&qword_1002AC060);
  __chkstk_darwin(v10);
  uint64_t v95 = a5;
  *(void *)&__int128 v96 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(a5 + 144);
  uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain_n(*(void *)(a5 + 144), 2LL);
  swift_bridgeObjectRetain();
  for (; v13; uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v87))
  {
    uint64_t v14 = 4LL;
    while (1)
    {
      if ((v12 & 0xC000000000000001LL) != 0)
      {
        uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(v14 - 4, v12);
      }

      else
      {
        uint64_t v15 = *(void *)(v12 + 8 * v14);
        swift_retain();
      }

      uint64_t v16 = v14 - 3;
      if (__OFADD__(v14 - 4, 1LL)) {
        break;
      }
      uint64_t v17 = *(void *)(v15 + 96);
      uint64_t v18 = *(void *)(v15 + 104);
      BOOL v19 = v17 == a1 && v18 == a2;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, a1, a2, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease_n(v12, 2LL);
        sub_1000925C4(a6 + 416, (uint64_t)v104, &qword_1002AA990);
        sub_1000925C4((uint64_t)v104, (uint64_t)&v111, &qword_1002AA990);
        uint64_t v27 = v112;
        if (v112)
        {
          char v28 = v111;
          sub_1000925C4(a6 + 448, (uint64_t)v103, &qword_1002AA990);
          sub_1000925C4((uint64_t)v103, (uint64_t)&v113, &qword_1002AA990);
          uint64_t v29 = v114;
          if (v114)
          {
            uint64_t v30 = v113;
            sub_1000925C4(a6 + 464, (uint64_t)v102, &qword_1002AA990);
            sub_1000925C4((uint64_t)v102, (uint64_t)&v115, &qword_1002AA990);
            uint64_t v31 = v116;
            if (v116)
            {
              uint64_t v94 = v115;
              sub_1000925C4(a6 + 432, (uint64_t)v101, &qword_1002AA990);
              sub_1000925C4((uint64_t)v101, (uint64_t)&v117, &qword_1002AA990);
              if (*((void *)&v117 + 1))
              {
                __int128 v89 = v117;
                sub_1000925C4(a6 + 560, (uint64_t)v100, &qword_1002AA7C0);
                sub_1000925C4((uint64_t)v100, (uint64_t)v118, &qword_1002AA7C0);
                int v32 = sub_1000A3034((uint64_t)v118);
                uint64_t v91 = v30;
                uint64_t v92 = v29;
                __int128 v93 = v28;
                uint64_t v90 = v31;
                if (v32 == 1) {
                  goto LABEL_48;
                }
                if ((v118[312] & 1) == 0)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_46;
                }

                char v49 = _stringCompareWithSmolCheck(_:_:expecting:)( 3157554LL,  0xE300000000000000LL,  3157553LL,  0xE300000000000000LL,  0LL);
                swift_bridgeObjectRelease();
                if ((v49 & 1) == 0)
                {
LABEL_48:
                  sub_1000925C4(a6 + 496, (uint64_t)v99, &qword_1002AA990);
                  sub_1000925C4((uint64_t)v99, (uint64_t)v119, &qword_1002AA990);
                  if (v119[1])
                  {
                    uint64_t v52 = v96;
                    UUID.init(uuidString:)(v119[0]);
                    uint64_t v53 = type metadata accessor for UUID(0LL);
                    uint64_t v54 = sub_10001D158(v52, 1LL, v53);
                    uint64_t v55 = *((void *)&v96 + 1);
                    if ((_DWORD)v54 != 1)
                    {
                      uint64_t v56 = UUID.uuidString.getter(v54);
                      uint64_t v58 = v57;
                      (*(void (**)(uint64_t, uint64_t))(*(void *)(v53 - 8) + 8LL))(v52, v53);
                      uint64_t v105 = v56;
                      uint64_t v106 = v58;
                      unint64_t v59 = sub_10001B4A0();
                      uint64_t v50 = StringProtocol.localizedLowercase.getter(&type metadata for String, v59);
                      unint64_t v51 = v60;
                      swift_bridgeObjectRelease();
                      goto LABEL_55;
                    }
                  }

                  else
                  {
                    uint64_t v61 = type metadata accessor for UUID(0LL);
                    uint64_t v52 = v96;
                    sub_10001762C(v96, 1LL, 1LL, v61);
                    uint64_t v55 = *((void *)&v96 + 1);
                  }

                  sub_10004DB00(v52, &qword_1002AC060);
                  uint64_t v50 = 0LL;
                  unint64_t v51 = 0xE000000000000000LL;
                }

                else
                {
LABEL_46:
                  if (*(void *)(a6 + 344))
                  {
                    uint64_t v50 = *(void *)(a6 + 336);
                    unint64_t v51 = *(void *)(a6 + 344);
                  }

                  else
                  {
                    uint64_t v50 = 0LL;
                    unint64_t v51 = 0xE000000000000000LL;
                  }

                  uint64_t v55 = *((void *)&v96 + 1);
                  swift_bridgeObjectRetain();
                }

uint64_t sub_1000DE43C(uint64_t a1, uint64_t a2, void (*a3)(void *), uint64_t a4)
{
  uint64_t v8 = v7;
  sub_100034E9C((uint64_t)a3, a4);
  sub_1000D977C(v8, a3, a4);
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1000DE4CC(uint64_t a1)
{
  if (!v6[1] || !*(void *)(a1 + 392)) {
    return 0LL;
  }
  sub_100019F58((void *)(v1 + 88), *(void *)(v1 + 112));
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_1000884B8();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1000DE5A4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = v5 + 88;
  sub_100019F58((void *)(v5 + 88), *(void *)(v5 + 112));
  sub_100087FF0(a3, a4, a5);
  if (!v13)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    unint64_t v16 = sub_1000A2EB4();
    uint64_t v17 = swift_allocError(&type metadata for InAppBuyRouteError, v16, 0LL, 0LL);
    *uint64_t v18 = 7;
    swift_willThrow(v17);
    return v6;
  }

  if (v13 == 1)
  {
    unint64_t v14 = 0xE800000000000000LL;
    uint64_t v15 = 0x676E697473697865LL;
  }

  else
  {
    unint64_t v14 = 0xE700000000000000LL;
    uint64_t v15 = 0x64657269707865LL;
  }

  uint64_t v6 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v14, 7824750LL, 0xE300000000000000LL, 0LL);
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0) {
    goto LABEL_7;
  }
  sub_100023578(a1, a2);
  if (v20)
  {
    uint64_t v6 = v20;
    if ((*(_BYTE *)(v20 + 112) & 1) == 0)
    {
      unint64_t v40 = sub_1000A2EB4();
      uint64_t v41 = swift_allocError(&type metadata for InAppBuyRouteError, v40, 0LL, 0LL);
      *uint64_t v42 = 7;
      swift_willThrow(v41);
      swift_release();
      return v6;
    }

    sub_1000E4EAC(v12, (uint64_t)v48);
    uint64_t v21 = sub_100019F58(v48, v48[3]);
    uint64_t v22 = sub_1000175B0(&qword_1002A9098);
    uint64_t inited = swift_initStackObject(v22, v47);
    *(_OWORD *)(inited + 16) = xmmword_1001F3C00;
    uint64_t v24 = *(void *)(a3 + 200);
    *(void *)(inited + 32) = *(void *)(a3 + 192);
    *(void *)(inited + 40) = v24;
    uint64_t v25 = *v21;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000D962C(inited, v25, a4, a5);
    uint64_t v27 = v26;
    swift_setDeallocating(inited);
    sub_1001B7630();
    if ((unint64_t)v27 >> 62)
    {
      if (v27 < 0) {
        uint64_t v43 = v27;
      }
      else {
        uint64_t v43 = v27 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      id v28 = (id)_CocoaArrayWrapper.endIndex.getter(v43);
      swift_bridgeObjectRelease();
      if (v28)
      {
LABEL_13:
        sub_100119E64(0LL, (v27 & 0xC000000000000001LL) == 0, v27);
        if ((v27 & 0xC000000000000001LL) != 0) {
          id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v27);
        }
        else {
          id v29 = *(id *)(v27 + 32);
        }
        uint64_t v30 = v29;
        swift_bridgeObjectRelease();
        sub_100019F7C(v48);
        id v28 = v30;
        if (sub_1000B7788())
        {
          sub_1000B4F18();
          uint64_t v32 = v31;

          swift_bridgeObjectRelease();
          if (!v32)
          {

            return v6;
          }
        }

        else
        {
        }

void sub_1000DEA28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!v11)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    char v15 = 4;
LABEL_8:
    unint64_t v16 = sub_1000A2EB4();
    uint64_t v17 = swift_allocError(&type metadata for InAppBuyRouteError, v16, 0LL, 0LL);
    *uint64_t v18 = v15;
    swift_willThrow(v17);
    return;
  }

  if (v11 == 1)
  {
    unint64_t v12 = 0xE800000000000000LL;
    uint64_t v13 = 0x676E697473697865LL;
  }

  else
  {
    unint64_t v12 = 0xE700000000000000LL;
    uint64_t v13 = 0x64657269707865LL;
  }

  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v12, 7824750LL, 0xE300000000000000LL, 0LL);
  swift_bridgeObjectRelease();
  if ((v14 & 1) != 0) {
    goto LABEL_7;
  }
  sub_1000232FC(a1, a2);
  if (!v19)
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    uint64_t v21 = sub_100018F68(v20, (uint64_t)qword_1002EB9D0);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v24 = static os_log_type_t.error.getter(v22, v23);
    if (os_log_type_enabled(v22, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  v24,  "Requested offer for invalid ad-hoc offer identifier. This may be a client error in the StoreKit framework.",  v25,  2u);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    char v15 = 3;
    goto LABEL_8;
  }

os_log_s *sub_1000DEC00(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = sub_100023514(a1, a2);
  if (v11)
  {
    unint64_t v12 = (os_log_s *)v11;
    sub_100019F58((void *)(v5 + 88), *(void *)(v5 + 112));
    sub_100087FF0(a3, a4, a5);
    char v14 = v13;
    uint64_t v15 = *((void *)v12 + 12);
    swift_bridgeObjectRetain();
    char v16 = sub_1000B3B04(v14, v15);
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
    {
      if (qword_1002A8D90 != -1) {
        swift_once(&qword_1002A8D90, sub_100183E34);
      }
      uint64_t v17 = type metadata accessor for Logger(0LL);
      sub_100018F68(v17, (uint64_t)qword_1002EB9D0);
      swift_bridgeObjectRetain_n(a2, 2LL);
      uint64_t v18 = swift_retain_n(v12, 2LL);
      uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
      os_log_type_t v21 = static os_log_type_t.error.getter(v19, v20);
      if (os_log_type_enabled(v19, v21))
      {
        os_log_type_t v46 = v21;
        uint64_t v22 = swift_slowAlloc(32LL, -1LL);
        uint64_t v45 = swift_slowAlloc(96LL, -1LL);
        uint64_t v49 = v45;
        *(_DWORD *)uint64_t v22 = 136315650;
        swift_bridgeObjectRetain();
        uint64_t v47 = sub_1000CF360(a1, a2, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v22 + 4);
        swift_bridgeObjectRelease_n(a2, 3LL);
        *(_WORD *)(v22 + 12) = 2080;
        unint64_t v23 = sub_1000A2EF0();
        uint64_t v24 = swift_bridgeObjectRetain();
        uint64_t v25 = Set.description.getter(v24, &unk_100288CC0, v23);
        unint64_t v27 = v26;
        swift_bridgeObjectRelease();
        uint64_t v47 = sub_1000CF360(v25, v27, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v22 + 14);
        swift_release_n(v12, 2LL);
        swift_bridgeObjectRelease();
        *(_WORD *)(v22 + 22) = 2080;
        if (v14)
        {
          if (v14 == 1)
          {
            unint64_t v28 = 0xE800000000000000LL;
            uint64_t v29 = 0x676E697473697865LL;
          }

          else
          {
            unint64_t v28 = 0xE700000000000000LL;
            uint64_t v29 = 0x64657269707865LL;
          }
        }

        else
        {
          unint64_t v28 = 0xE300000000000000LL;
          uint64_t v29 = 7824750LL;
        }

        uint64_t v47 = sub_1000CF360(v29, v28, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v22 + 24);
        swift_bridgeObjectRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v19,  v46,  " Currently ineligible for offer code  %s: %s does not  contain %s",  (uint8_t *)v22,  0x20u);
        swift_arrayDestroy(v45, 3LL);
        swift_slowDealloc(v45, -1LL, -1LL);
        swift_slowDealloc(v22, -1LL, -1LL);
      }

      else
      {

        swift_release_n(v12, 2LL);
        swift_bridgeObjectRelease_n(a2, 2LL);
      }

      unint64_t v41 = sub_1000A2EB4();
      uint64_t v42 = swift_allocError(&type metadata for InAppBuyRouteError, v41, 0LL, 0LL);
      *uint64_t v43 = 5;
      swift_willThrow(v42);
      swift_release();
    }
  }

  else
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v30 = type metadata accessor for Logger(0LL);
    sub_100018F68(v30, (uint64_t)qword_1002EB9D0);
    swift_bridgeObjectRetain_n(a2, 2LL);
    uint64_t v31 = swift_retain_n(a3, 2LL);
    unint64_t v12 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v33 = static os_log_type_t.error.getter(v12, v32);
    if (os_log_type_enabled(v12, v33))
    {
      uint64_t v34 = swift_slowAlloc(22LL, -1LL);
      uint64_t v35 = swift_slowAlloc(64LL, -1LL);
      uint64_t v49 = v35;
      *(_DWORD *)uint64_t v34 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v47 = sub_1000CF360(a1, a2, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v34 + 4);
      swift_bridgeObjectRelease_n(a2, 3LL);
      *(_WORD *)(v34 + 12) = 2080;
      uint64_t v36 = *(void *)(a3 + 80);
      unint64_t v37 = *(void *)(a3 + 88);
      swift_bridgeObjectRetain();
      uint64_t v47 = sub_1000CF360(v36, v37, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v34 + 14);
      swift_release_n(a3, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v12,  v33,  "Internal ID %s did not correspond to a configured offer for codes for %s",  (uint8_t *)v34,  0x16u);
      swift_arrayDestroy(v35, 2LL);
      swift_slowDealloc(v35, -1LL, -1LL);
      swift_slowDealloc(v34, -1LL, -1LL);
    }

    else
    {

      swift_release_n(a3, 2LL);
      swift_bridgeObjectRelease_n(a2, 2LL);
    }

    unint64_t v38 = sub_1000A2EB4();
    uint64_t v39 = swift_allocError(&type metadata for InAppBuyRouteError, v38, 0LL, 0LL);
    *unint64_t v40 = 2;
    swift_willThrow(v39);
  }

  return v12;
}

uint64_t sub_1000DF16C(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = (*(uint64_t (**)(void))(a2 + 8))();
  v4._countAndFlagsBits = 3092282LL;
  v4._object = (void *)0xE300000000000000LL;
  String.append(_:)(v4);
  v5._countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 58LL;
  v7._object = (void *)0xE100000000000000LL;
  String.append(_:)(v7);
  (*(void (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  uint64_t v9 = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v9);
  return v11;
}

uint64_t sub_1000DF248()
{
  uint64_t result = sub_1000DF280();
  qword_1002EB960 = result;
  return result;
}

uint64_t sub_1000DF280()
{
  uint64_t v0 = type metadata accessor for OctaneConfigurationManager();
  sub_100019310(v0, 144LL);
  sub_100077948();
  uint64_t v2 = v1;
  uint64_t v3 = qword_1002A8DD0;
  swift_retain();
  if (v3 != -1) {
    swift_once(&qword_1002A8DD0, sub_1001B275C);
  }
  sub_1000E497C(v2, (uint64_t)(id)qword_1002EBA00);
  uint64_t v4 = sub_1000706C8();
  return sub_1000E4ABC(v4, v5, v2, v6);
}

uint64_t sub_1000DF310()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 64;
  sub_1000E4EAC(v0 + 64, (uint64_t)v143);
  uint64_t v139 = v0 + 104;
  sub_1000E4EAC(v0 + 104, (uint64_t)v140);
  uint64_t v138 = sub_1000175B0(&qword_1002B0A28);
  uint64_t v3 = (void *)swift_allocObject(v138, 136LL, 7LL);
  uint64_t v4 = sub_100043F18((uint64_t)v143, v144);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v138 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v7 + 16))(v6);
  uint64_t v8 = sub_100043F18((uint64_t)v140, v141);
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v138 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v11 + 16))(v10);
  uint64_t v12 = *v6;
  uint64_t v13 = *v10;
  uint64_t v14 = swift_retain();
  uint64_t v15 = sub_1000E4574(v14, v12, v13, v3);
  sub_100019F7C(v140);
  sub_100019F7C(v143);
  swift_weakAssign(v1 + 144, v15);
  uint64_t v16 = sub_1000175B0(&qword_1002B0A30);
  uint64_t v17 = swift_allocObject(v16, 672LL, 7LL);
  *(_OWORD *)(v17 + 16) = xmmword_1001FED70;
  uint64_t v18 = type metadata accessor for AppIconRoute();
  swift_allocObject(v18, 48LL, 7LL);
  *(void *)(v17 + 32) = sub_10005A0C4();
  uint64_t v19 = (void *)(v17 + 32);
  *(void *)(v17 + 56) = v18;
  *(void *)(v17 + 64) = &off_100279A98;
  sub_1000E4EAC(v2, (uint64_t)v143);
  uint64_t v20 = sub_100043F18((uint64_t)v143, v144);
  __chkstk_darwin(v20);
  uint64_t v22 = (void **)((char *)&v138 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(void **))(v23 + 16))(v22);
  sub_1000E4278( *v22,  (uint64_t (*)(void))type metadata accessor for AssetRoute,  (void (*)(void, uint64_t))sub_1000E3E14);
  uint64_t v25 = v24;
  sub_100019F7C(v143);
  *(void *)(v17 + 96) = type metadata accessor for AssetRoute();
  *(void *)(v17 + 104) = &off_10027CAB8;
  *(void *)(v17 + 72) = v25;
  uint64_t v26 = *(void *)(v1 + 24);
  uint64_t v27 = *(void *)(v1 + 32);
  sub_1000E4EAC(v2, (uint64_t)v143);
  uint64_t v28 = sub_100043F18((uint64_t)v143, v144);
  __chkstk_darwin(v28);
  uint64_t v30 = (uint64_t *)((char *)&v138 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v31 + 16))(v30);
  uint64_t v32 = *v30;
  swift_retain();
  swift_bridgeObjectRetain(v27);
  os_log_type_t v33 = sub_1000E47F8(v1, v26, v27, v32);
  sub_100019F7C(v143);
  *(void *)(v17 + 136) = type metadata accessor for BagRoute();
  *(void *)(v17 + 144) = &off_10027CAB8;
  *(void *)(v17 + 112) = v33;
  sub_1000E4EAC(v2, (uint64_t)v143);
  uint64_t v34 = sub_100043F18((uint64_t)v143, v144);
  __chkstk_darwin(v34);
  uint64_t v36 = (void **)((char *)&v138 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(void **))(v37 + 16))(v36);
  sub_1000E4278( *v36,  (uint64_t (*)(void))type metadata accessor for FetchSoftwareAddOnsRoute,  (void (*)(void, uint64_t))sub_1000E3EE4);
  uint64_t v39 = v38;
  sub_100019F7C(v143);
  *(void *)(v17 + 176) = type metadata accessor for FetchSoftwareAddOnsRoute();
  *(void *)(v17 + 184) = &off_10027CAB8;
  *(void *)(v17 + 152) = v39;
  *(void *)(v17 + 216) = v138;
  *(void *)(v17 + 224) = &off_10027CAB8;
  *(void *)(v17 + 192) = v15;
  sub_1000E4EAC(v2, (uint64_t)v143);
  uint64_t v40 = v139;
  sub_1000E4EAC(v139, (uint64_t)v140);
  uint64_t v41 = sub_100043F18((uint64_t)v143, v144);
  __chkstk_darwin(v41);
  (*(void (**)(char *))(v43 + 16))((char *)&v138 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v44 = sub_100043F18((uint64_t)v140, v141);
  __chkstk_darwin(v44);
  (*(void (**)(char *))(v46 + 16))((char *)&v138 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v138 = (uint64_t)v15;
  swift_retain();
  sub_1000E4468();
  uint64_t v48 = v47;
  sub_100019F7C(v140);
  sub_100019F7C(v143);
  *(void *)(v17 + 256) = type metadata accessor for InAppTransactionDoneRoute();
  *(void *)(v17 + 264) = &off_10027CAB8;
  *(void *)(v17 + 232) = v48;
  sub_1000E4EAC(v2, (uint64_t)v143);
  uint64_t v49 = v40;
  sub_1000E4EAC(v40, (uint64_t)v140);
  uint64_t v50 = sub_100043F18((uint64_t)v143, v144);
  __chkstk_darwin(v50);
  (*(void (**)(char *))(v52 + 16))((char *)&v138 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v53 = sub_100043F18((uint64_t)v140, v141);
  __chkstk_darwin(v53);
  (*(void (**)(char *))(v55 + 16))((char *)&v138 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_1000E4468();
  uint64_t v57 = v56;
  sub_100019F7C(v140);
  sub_100019F7C(v143);
  *(void *)(v17 + 296) = type metadata accessor for InAppCheckDownloadQueueRoute();
  *(void *)(v17 + 304) = &off_10027CAB8;
  *(void *)(v17 + 272) = v57;
  sub_1000E4EAC(v2, (uint64_t)v143);
  sub_1000E4EAC(v40, (uint64_t)v140);
  uint64_t v58 = sub_100043F18((uint64_t)v143, v144);
  __chkstk_darwin(v58);
  (*(void (**)(char *))(v60 + 16))((char *)&v138 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v61 = sub_100043F18((uint64_t)v140, v141);
  __chkstk_darwin(v61);
  (*(void (**)(char *))(v63 + 16))((char *)&v138 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_1000E4468();
  uint64_t v65 = v64;
  sub_100019F7C(v140);
  sub_100019F7C(v143);
  *(void *)(v17 + 336) = type metadata accessor for InAppPendingTransactionsRoute();
  *(void *)(v17 + 344) = &off_10027CAB8;
  *(void *)(v17 + 312) = v65;
  sub_1000E4EAC(v2, (uint64_t)v143);
  sub_1000E4EAC(v40, (uint64_t)v140);
  uint64_t v66 = sub_100043F18((uint64_t)v143, v144);
  __chkstk_darwin(v66);
  (*(void (**)(char *))(v68 + 16))((char *)&v138 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v69 = sub_100043F18((uint64_t)v140, v141);
  __chkstk_darwin(v69);
  (*(void (**)(char *))(v71 + 16))((char *)&v138 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_1000E4468();
  uint64_t v73 = v72;
  sub_100019F7C(v140);
  sub_100019F7C(v143);
  *(void *)(v17 + 376) = type metadata accessor for InAppRegrantPurchaseHistoryRoute();
  *(void *)(v17 + 384) = &off_10027CAB8;
  *(void *)(v17 + 352) = v73;
  sub_1000E4EAC(v2, (uint64_t)v143);
  sub_1000E4EAC(v40, (uint64_t)v140);
  uint64_t v74 = sub_100043F18((uint64_t)v143, v144);
  __chkstk_darwin(v74);
  (*(void (**)(char *))(v76 + 16))((char *)&v138 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v77 = sub_100043F18((uint64_t)v140, v141);
  __chkstk_darwin(v77);
  (*(void (**)(char *))(v79 + 16))((char *)&v138 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_1000E4468();
  uint64_t v81 = v80;
  sub_100019F7C(v140);
  sub_100019F7C(v143);
  *(void *)(v17 + 416) = type metadata accessor for CreateAppReceiptRoute();
  *(void *)(v17 + 424) = &off_10027CAB8;
  *(void *)(v17 + 392) = v81;
  sub_1000E4EAC(v2, (uint64_t)v143);
  uint64_t Route = type metadata accessor for CheddarFetchRoute();
  uint64_t v83 = (void *)swift_allocObject(Route, 104LL, 7LL);
  uint64_t v84 = sub_100043F18((uint64_t)v143, v144);
  __chkstk_darwin(v84);
  uint64_t v86 = (uint64_t *)((char *)&v138 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v87 + 16))(v86);
  uint64_t v88 = *v86;
  swift_retain();
  __int128 v89 = sub_1000E4710(v88, v1, v83);
  sub_100019F7C(v143);
  *(void *)(v17 + 456) = Route;
  *(void *)(v17 + 464) = &off_10027CAB8;
  *(void *)(v17 + 432) = v89;
  sub_1000E4EAC(v2, (uint64_t)v143);
  sub_1000E4EAC(v49, (uint64_t)v140);
  uint64_t v90 = sub_100043F18((uint64_t)v143, v144);
  __chkstk_darwin(v90);
  (*(void (**)(char *))(v92 + 16))((char *)&v138 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v93 = sub_100043F18((uint64_t)v140, v141);
  __chkstk_darwin(v93);
  (*(void (**)(char *))(v95 + 16))((char *)&v138 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_1000E4468();
  uint64_t v97 = v96;
  sub_100019F7C(v140);
  sub_100019F7C(v143);
  *(void *)(v17 + 496) = type metadata accessor for TransactionHistoryRoute();
  *(void *)(v17 + 504) = &off_10027CAB8;
  *(void *)(v17 + 472) = v97;
  sub_1000E4EAC(v2, (uint64_t)v143);
  sub_1000E4EAC(v49, (uint64_t)v140);
  uint64_t v98 = sub_100043F18((uint64_t)v143, v144);
  __chkstk_darwin(v98);
  __int128 v100 = (uint64_t *)((char *)&v138 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v101 + 16))(v100);
  uint64_t v102 = sub_100043F18((uint64_t)v140, v141);
  __chkstk_darwin(v102);
  uint64_t v104 = (uint64_t *)((char *)&v138 - ((v103 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v105 + 16))(v104);
  uint64_t v106 = sub_1000E4328(*v100, *v104);
  sub_100019F7C(v140);
  sub_100019F7C(v143);
  *(void *)(v17 + 536) = type metadata accessor for SingleStatusRoute();
  *(void *)(v17 + 544) = &off_10027CAB8;
  *(void *)(v17 + 512) = v106;
  sub_1000E4EAC(v2, (uint64_t)v143);
  sub_1000E4EAC(v49, (uint64_t)v140);
  uint64_t v107 = sub_100043F18((uint64_t)v143, v144);
  __chkstk_darwin(v107);
  (*(void (**)(char *))(v109 + 16))((char *)&v138 - ((v108 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v110 = sub_100043F18((uint64_t)v140, v141);
  __chkstk_darwin(v110);
  (*(void (**)(char *))(v112 + 16))((char *)&v138 - ((v111 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_1000E4468();
  uint64_t v114 = v113;
  sub_100019F7C(v140);
  sub_100019F7C(v143);
  *(void *)(v17 + 576) = type metadata accessor for AllStatusRoute();
  *(void *)(v17 + 584) = &off_10027CAB8;
  *(void *)(v17 + 552) = v114;
  sub_1000E4EAC(v2, (uint64_t)v143);
  uint64_t v115 = type metadata accessor for AppInformationRoute();
  uint64_t v116 = (void *)swift_allocObject(v115, 104LL, 7LL);
  uint64_t v117 = sub_100043F18((uint64_t)v143, v144);
  __chkstk_darwin(v117);
  __int128 v119 = (uint64_t *)((char *)&v138 - ((v118 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v120 + 16))(v119);
  uint64_t v121 = *v119;
  uint64_t v122 = type metadata accessor for OctaneConfigurationManager();
  uint64_t v141 = v122;
  uint64_t v142 = &off_10027C250;
  v140[0] = v121;
  v116[12] = 0LL;
  swift_unknownObjectWeakInit(v116 + 11, 0LL);
  uint64_t v123 = sub_100043F18((uint64_t)v140, v122);
  __chkstk_darwin(v123);
  __int128 v125 = (uint64_t *)((char *)&v138 - ((v124 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v126 + 16))(v125);
  uint64_t v127 = *v125;
  v116[9] = v122;
  v116[10] = &off_10027C250;
  v116[5] = 0LL;
  v116[6] = v127;
  v116[2] = 0xD00000000000001CLL;
  v116[3] = 0x800000010021C6A0LL;
  v116[4] = 0LL;
  swift_retain();
  sub_100019F7C(v140);
  v116[12] = &off_100281B20;
  swift_unknownObjectWeakAssign(v116 + 11, v1);
  swift_release(v1);
  sub_100019F7C(v143);
  *(void *)(v17 + 616) = v115;
  *(void *)(v17 + 624) = &off_10027CAB8;
  *(void *)(v17 + 592) = v116;
  sub_1000E4EAC(v2, (uint64_t)v143);
  sub_1000E4EAC(v139, (uint64_t)v140);
  uint64_t v128 = sub_100043F18((uint64_t)v143, v144);
  __chkstk_darwin(v128);
  (*(void (**)(char *))(v130 + 16))((char *)&v138 - ((v129 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v131 = sub_100043F18((uint64_t)v140, v141);
  __chkstk_darwin(v131);
  (*(void (**)(char *))(v133 + 16))((char *)&v138 - ((v132 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_1000E4468();
  uint64_t v135 = v134;
  sub_100019F7C(v140);
  sub_100019F7C(v143);
  *(void *)(v17 + 656) = type metadata accessor for AskToBuyPermissionRoute();
  *(void *)(v17 + 664) = &off_10027CAB8;
  *(void *)(v17 + 632) = v135;
  for (uint64_t i = *(void *)(v17 + 16); i; --i)
  {
    sub_1000D0F6C(v19);
    v19 += 5;
  }

  swift_release(v138);
  swift_setDeallocating(v17);
  return sub_1001B7624();
}

void sub_1000E0270()
{
  uint64_t v1 = sub_100019F58(v0 + 8, v0[11]);
  uint64_t v2 = *v1;
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)(*v1 + 24) + 16LL);
  swift_retain();
  sub_100019320();
  os_unfair_lock_lock(v3);
  sub_100075E20(v2);
  os_unfair_lock_unlock(v3);
  sub_100019390();
  swift_release();
  sub_100092F60(v0 + 13, v0[16]);
  sub_100087B44();
}

uint64_t sub_1000E0314@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_1000BBB14();
  uint64_t Strong = swift_weakLoadStrong(v2 + 144);
  if (!Strong)
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v62 = v3;
    uint64_t v63 = v9;
    v65[8] = v8;
    uint64_t v11 = type metadata accessor for Logger(0LL);
    uint64_t v12 = sub_100018F68(v11, (uint64_t)qword_1002EB9D0);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)sub_100019464(2LL);
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "Creating temporary buy route to simulate off-device buy.",  v15,  2u);
      sub_10001A408((uint64_t)v15);
    }

    sub_1000E4EAC(v5 + 64, (uint64_t)v64);
    sub_1000E4EAC(v5 + 104, (uint64_t)v65);
    uint64_t v16 = sub_1000175B0(&qword_1002B0A28);
    uint64_t v17 = (void *)swift_allocObject(v16, 136LL, 7LL);
    sub_100043F18((uint64_t)v64, v64[3]);
    uint64_t v61 = (uint64_t)&v61;
    sub_1000E55DC();
    __chkstk_darwin(v18);
    sub_10001DAD0();
    uint64_t v21 = (uint64_t *)(v20 - v19);
    (*(void (**)(uint64_t))(v22 + 16))(v20 - v19);
    sub_100043F18((uint64_t)v65, v65[3]);
    sub_1000E55DC();
    __chkstk_darwin(v23);
    sub_10001DAD0();
    uint64_t v26 = (uint64_t *)(v25 - v24);
    (*(void (**)(uint64_t))(v27 + 16))(v25 - v24);
    uint64_t v28 = *v21;
    uint64_t v29 = *v26;
    uint64_t v30 = swift_retain();
    sub_1000E4574(v30, v28, v29, v17);
    sub_100019F7C(v65);
    uint64_t Strong = sub_100019F7C(v64);
    uint64_t v4 = v62;
  }

  static Date.now.getter(Strong);
  sub_1000D9B24(a1, a2);
  if (v4)
  {
    sub_1000E55CC();
    sub_10009B770();
    sub_1000E55B4();
    uint64_t v31 = sub_1000175B0(&qword_1002A9710);
    if (sub_1000E5470(v31, v32, v33, (uint64_t)&type metadata for InAppBuyRouteError)
      && LOBYTE(v65[0]) == 1)
    {
      sub_1000E5624();
      unint64_t v34 = sub_100048C8C();
      uint64_t v35 = sub_1000252D0((uint64_t)&type metadata for ConfigurationError, v34);
      *uint64_t v36 = 0;
LABEL_25:
      swift_willThrow(v35);
      return sub_1000E5638();
    }

    sub_1000E5638();
    uint64_t v37 = sub_1000E55B4();
    if (sub_1000E5470(v37, v38, v39, (uint64_t)&type metadata for ConfigurationError))
    {
      sub_1000E5624();
      char v40 = v65[0];
      unint64_t v41 = sub_100048C8C();
      uint64_t v42 = &type metadata for ConfigurationError;
LABEL_24:
      uint64_t v35 = sub_1000252D0((uint64_t)v42, v41);
      *uint64_t v57 = v40;
      goto LABEL_25;
    }

    sub_1000E5638();
    uint64_t v47 = sub_1000E55B4();
    if (sub_1000E5470(v47, v48, v49, (uint64_t)&type metadata for TransactionError))
    {
      sub_1000E5624();
      char v40 = v65[0];
      unint64_t v41 = sub_1000588D4();
      uint64_t v42 = &type metadata for TransactionError;
      goto LABEL_24;
    }

    sub_1000E5638();
    uint64_t v54 = sub_1000E55B4();
    if (sub_1000E5470(v54, v55, v56, (uint64_t)&type metadata for FailureType))
    {
      sub_1000E5624();
      char v40 = v65[0];
      unint64_t v41 = sub_1000E4C94();
      uint64_t v42 = &type metadata for FailureType;
      goto LABEL_24;
    }

    sub_1000E5638();
    unint64_t v58 = sub_1000588D4();
    uint64_t v59 = sub_1000252D0((uint64_t)&type metadata for TransactionError, v58);
    sub_1000E5608(v59, v60);
    return sub_1000E5624();
  }

  else
  {
    if (qword_1002A8CF8 != -1) {
      swift_once(&qword_1002A8CF8, sub_10010EF80);
    }
    sub_10010F5E4(*a1, a1[1]);
    double v44 = Date.timeIntervalSinceReferenceDate.getter(v43);
    id v45 = *(id *)(a2 + 40);
    double v46 = sub_1000B4050();

    sub_1000E4CD0(a2, (uint64_t)v64);
    if (v44 >= v46)
    {
      uint64_t v50 = *(void *)(v64[5] + OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels);
      sub_1000E4D0C((uint64_t)v64);
      if ((v50 & 2) == 0)
      {
        sub_1000E55CC();
        return sub_10009B770();
      }
    }

    else
    {
      sub_1000E4D0C((uint64_t)v64);
    }

    uint64_t v52 = *a1;
    uint64_t v53 = a1[1];
    swift_bridgeObjectRetain();
    sub_1000E2734(0, v52, v53, 0xD000000000000011LL, 0x800000010021C790LL);
    swift_bridgeObjectRelease();
    sub_10009B770();
    return sub_1000E55CC();
  }

uint64_t sub_1000E07AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for PurchaseConfiguration(0LL);
  sub_100043FD8();
  __chkstk_darwin(v8);
  sub_100092F38();
  uint64_t v11 = v9 - v10;
  __chkstk_darwin(v12);
  os_log_type_t v14 = (uint64_t *)((char *)&v28 - v13);
  uint64_t v15 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  PropertyListDecoder.init()();
  sub_100046F3C(&qword_1002B0A38, type metadata accessor for PurchaseConfiguration, byte_100204288);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v7, a1, a2, v7);
  if (v3)
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_100018F68(v16, (uint64_t)qword_1002EB9D0);
    sub_1000E572C();
    uint64_t v17 = sub_1000E572C();
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v20 = static os_log_type_t.error.getter(v18, v19);
    if (os_log_type_enabled(v18, v20))
    {
      uint64_t v21 = (uint8_t *)sub_100019464(12LL);
      uint64_t v22 = (void *)sub_100019464(8LL);
      *(_DWORD *)uint64_t v21 = 138412290;
      sub_1000E572C();
      uint64_t v23 = _swift_stdlib_bridgeErrorToNSError(v3);
      uint64_t v29 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v21 + 4);
      *uint64_t v22 = v23;
      sub_10006D32C();
      sub_10006D32C();
      _os_log_impl((void *)&_mh_execute_header, v18, v20, "Failed to decode purchase configuration: %@", v21, 0xCu);
      sub_1000175B0(&qword_1002B6F90);
      swift_arrayDestroy(v22, 1LL);
      sub_10001A408((uint64_t)v22);
      sub_10001A408((uint64_t)v21);
    }

    else
    {
      sub_10006D32C();
      sub_10006D32C();
    }

    unint64_t v25 = sub_1000588D4();
    uint64_t v26 = sub_1000252D0((uint64_t)&type metadata for TransactionError, v25);
    sub_1000E5608(v26, v27);
    swift_release();
    return sub_10006D32C();
  }

  else
  {
    sub_1000E52F4(v11, (uint64_t)v14, type metadata accessor for PurchaseConfiguration);
    sub_1000E0314(v14, a3);
    sub_10004DBAC((uint64_t)v14, type metadata accessor for PurchaseConfiguration);
    return swift_release();
  }

void sub_1000E0A54()
{
  if (sub_1000891E0())
  {
    sub_1000B5BB8();
    ((void (*)(uint64_t))((char *)&loc_1000E0AD4 + 4 * byte_1001FEDC0[v0]))(0x62616D75736E6F43LL);
  }

  else
  {
    unint64_t v1 = sub_1000588D4();
    uint64_t v2 = sub_1000252D0((uint64_t)&type metadata for TransactionError, v1);
    sub_1000E55A8(v2, v3);
    sub_100023E74();
  }

uint64_t sub_1000E0C30()
{
  uint64_t v3 = v1;
  sub_100092F74();
  if (qword_1002A8CF8 != -1) {
    swift_once(&qword_1002A8CF8, sub_10010EF80);
  }
  uint64_t v4 = qword_1002EB970;
  uint64_t v5 = sub_1000706C8();
  sub_100110D68(v5, v6, 0LL, v7, v8, v9, v10, v11);
  sub_100092F60((void *)(v3 + 64), *(void *)(v3 + 88));
  uint64_t v12 = *(void *)(v4 + 24);
  ChannelPipeline.syncOperations.getter();
  sub_100019320();
  sub_1000AC840(v12, v4, v2, v0);
  return 0LL;
}

void sub_1000E0CD0()
{
  uint64_t v1 = sub_1000E5484();
  if (v1)
  {
    uint64_t v2 = sub_1000E56F8(v1);
    sub_1000877F4(v2, v3);
    sub_10009305C();
    if (v4)
    {
    }

    else
    {
      unint64_t v8 = sub_1000E5760();
      uint64_t v9 = sub_1000252D0((uint64_t)&type metadata for TransactionError, v8);
      sub_1000E5640(v9, v10);
    }
  }

  else
  {
    unint64_t v5 = sub_1000588D4();
    uint64_t v6 = sub_1000252D0((uint64_t)&type metadata for TransactionError, v5);
    sub_1000E55A8(v6, v7);
  }

  sub_100023E74();
}

void sub_1000E0D4C()
{
  uint64_t v1 = sub_1000E5434();
  if (v1)
  {
    sub_1000E5568(v1);
    sub_100087858();
    sub_10009305C();
    if (v2)
    {
    }

    else
    {
      unint64_t v6 = sub_1000E5760();
      uint64_t v7 = sub_1000252D0((uint64_t)&type metadata for TransactionError, v6);
      sub_1000E5640(v7, v8);
    }
  }

  else
  {
    unint64_t v3 = sub_1000588D4();
    uint64_t v4 = sub_1000252D0((uint64_t)&type metadata for TransactionError, v3);
    sub_1000E55A8(v4, v5);
  }

  sub_10002A3D4();
}

uint64_t sub_1000E0DC8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = v5;
  uint64_t v11 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v11);
  sub_10001DAD0();
  uint64_t v12 = v5 + 8;
  sub_100092F60(v5 + 8, v5[11]);
  sub_100075EE8(a4, a5);
  sub_1000D7FA8(a1, a2);
  uint64_t v14 = v13;
  swift_release();
  if (!v14) {
    goto LABEL_9;
  }
  uint64_t v15 = type metadata accessor for OctaneSubscription();
  if (!swift_dynamicCastClass(v14, v15))
  {
    sub_10002A5A4();
LABEL_9:
    unint64_t v24 = sub_100048C8C();
    uint64_t v25 = sub_1000252D0((uint64_t)&type metadata for ConfigurationError, v24);
    *uint64_t v26 = 0;
    return v25;
  }

  uint64_t v16 = sub_100019F58(v5 + 13, v5[16]);
  static Date.now.getter(v16);
  uint64_t v17 = (void *)sub_100088140();
  uint64_t v18 = sub_1000E55C0();
  if (v17)
  {
    static Date.now.getter(v18);
    sub_1000B5190();
    char v20 = v19;
    uint64_t v21 = sub_1000E55C0();
    if ((a3 & 1) != 0)
    {
      if ((v20 & 1) == 0)
      {
LABEL_21:
        sub_10002A5A4();

        return 0LL;
      }

      uint64_t v22 = Date.init()(v21);
      Date.timeIntervalSinceReferenceDate.getter(v22);
      sub_1000E55C0();
      sub_1000E56D8();
      sub_1000B534C(0LL, 0LL);
      uint64_t v23 = sub_1000B4EE8();
    }

    else
    {
      uint64_t v29 = Date.init()(v21);
      Date.timeIntervalSinceReferenceDate.getter(v29);
      sub_1000E55C0();
      sub_1000E56D8();
    }

    uint64_t v30 = (void *)sub_1000E565C(v23, v6[16]);
    sub_100089348(v30, 1);
    if ((a3 & 1) == 0)
    {
      sub_100092F60(v12, v6[11]);
      BOOL v31 = sub_100076FC0();
      if (v31)
      {
        sub_1000E565C(v31, v6[16]);
        sub_1000897D0();
      }

      else
      {
        if (qword_1002A8CB8 != -1) {
          swift_once(&qword_1002A8CB8, sub_100045AA8);
        }
        sub_1000468C4(v17);
        sub_1000E565C(v32, v6[16]);
        sub_100086EB8();
      }

      if (qword_1002A8CF8 != -1) {
        swift_once(&qword_1002A8CF8, sub_10010EF80);
      }
      sub_10010F5E4(a4, a5);
    }

    goto LABEL_21;
  }

  unint64_t v27 = sub_1000588D4();
  uint64_t v25 = sub_1000252D0((uint64_t)&type metadata for TransactionError, v27);
  sub_1000E55A8(v25, v28);
  sub_10002A5A4();
  return v25;
}

void sub_1000E10B0(uint64_t a1)
{
  if (qword_1002A8CF8 != -1) {
    swift_once(&qword_1002A8CF8, sub_10010EF80);
  }
  sub_10011050C(a1);
}

uint64_t sub_1000E1104()
{
  uint64_t v3 = v2;
  if (v2 >> 62)
  {
LABEL_54:
    if (v3 < 0) {
      uint64_t v57 = v3;
    }
    else {
      uint64_t v57 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain_n(v3, 2LL);
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v57);
    sub_100056ADC();
    if (v4) {
      goto LABEL_3;
    }
LABEL_58:
    sub_100056ADC();
    goto LABEL_59;
  }

  uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  if (!v4) {
    goto LABEL_58;
  }
LABEL_3:
  unint64_t v5 = _swiftEmptyDictionarySingleton;
  uint64_t v77 = v4;
  unint64_t v78 = v3 & 0xC000000000000001LL;
  uint64_t v6 = 4LL;
  uint64_t v76 = v3;
  while (1)
  {
    if (v78) {
      uint64_t v7 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, v3);
    }
    else {
      uint64_t v7 = (char *)*(id *)(v3 + 8 * v6);
    }
    unint64_t v8 = v7;
    uint64_t v9 = v6 - 3;
    if (__OFADD__(v6 - 4, 1LL))
    {
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }

    sub_1000B8508(0xFu);
    if (!v11) {
      goto LABEL_28;
    }
    uint64_t v12 = v10;
    uint64_t v13 = v11;
    if (v5[2])
    {
      unint64_t v14 = sub_1000E562C(v10);
      if ((v15 & 1) != 0) {
        break;
      }
    }

    uint64_t v75 = v6 - 3;
    sub_1000B52F0();
    uint64_t v3 = v26;
    unint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
    v82[0] = v5;
    uint64_t v27 = v12;
    sub_1000E562C(v12);
    sub_1000E5768();
    if (v23) {
      goto LABEL_51;
    }
    unint64_t v30 = v28;
    char v31 = v29;
    sub_1000175B0(&qword_1002B0A58);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, (Swift::Int)v5))
    {
      unint64_t v32 = sub_1000E564C();
      if ((v31 & 1) != (v33 & 1))
      {
LABEL_69:
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        __break(1u);
        return result;
      }

      unint64_t v30 = v32;
    }

    unint64_t v5 = v82[0];
    if ((v31 & 1) == 0)
    {
      sub_1000E5734((uint64_t)v82[0] + 8 * (v30 >> 6));
      uint64_t v35 = (uint64_t *)(v34 + 16 * v30);
      *uint64_t v35 = v27;
      v35[1] = v13;
      *(void *)(v5[7] + 8 * v30) = v3;
      uint64_t v36 = v5[2];
      BOOL v23 = __OFADD__(v36, 1LL);
      uint64_t v37 = v36 + 1;
      if (v23) {
        goto LABEL_52;
      }
      goto LABEL_25;
    }

    *(void *)(*((void *)v82[0] + 7) + 8 * v30) = v3;
LABEL_26:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = v76;
    uint64_t v4 = v77;
    uint64_t v9 = v75;
LABEL_29:
    ++v6;
    if (v9 == v4) {
      goto LABEL_34;
    }
  }

  unint64_t isUniquelyReferenced_nonNull_native = *(void *)(v5[7] + 8 * v14);
  sub_1000B52F0();
  if (isUniquelyReferenced_nonNull_native >= v16)
  {
    swift_bridgeObjectRelease();
LABEL_28:

    goto LABEL_29;
  }

  uint64_t v75 = v6 - 3;
  unint64_t isUniquelyReferenced_nonNull_native = *(void *)&v8[OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___id];
  char v17 = swift_isUniquelyReferenced_nonNull_native(v5);
  uint64_t v18 = v12;
  Swift::Bool v19 = v17;
  v82[0] = v5;
  uint64_t v20 = v18;
  sub_1000E562C(v18);
  sub_1000E5768();
  if (v23) {
    goto LABEL_53;
  }
  uint64_t v3 = v21;
  uint64_t v4 = v22;
  sub_1000175B0(&qword_1002B0A58);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v19, (Swift::Int)v5))
  {
    unint64_t v24 = sub_1000E564C();
    if ((v4 & 1) != (v25 & 1)) {
      goto LABEL_69;
    }
    uint64_t v3 = v24;
  }

  unint64_t v5 = v82[0];
  if ((v4 & 1) != 0)
  {
    *(void *)(*((void *)v82[0] + 7) + 8 * v3) = isUniquelyReferenced_nonNull_native;
    goto LABEL_26;
  }

  sub_1000E5734((uint64_t)v82[0] + 8 * ((unint64_t)v3 >> 6));
  uint64_t v39 = (uint64_t *)(v38 + 16 * v3);
  *uint64_t v39 = v20;
  v39[1] = v13;
  *(void *)(v5[7] + 8 * v3) = isUniquelyReferenced_nonNull_native;
  uint64_t v40 = v5[2];
  BOOL v23 = __OFADD__(v40, 1LL);
  uint64_t v37 = v40 + 1;
  if (!v23)
  {
LABEL_25:
    v5[2] = v37;
    swift_bridgeObjectRetain();
    goto LABEL_26;
  }

  __break(1u);
LABEL_34:
  sub_100056ADC();
  if (v4 < 1)
  {
    __break(1u);
    goto LABEL_68;
  }

  uint64_t v41 = 0LL;
  uint64_t v42 = _swiftEmptyArrayStorage;
  do
  {
    if (v78) {
      id v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v41, v3);
    }
    else {
      id v43 = *(id *)(v3 + 8 * v41 + 32);
    }
    double v44 = v43;
    sub_1000B41BC();
    uint64_t v46 = v45;
    uint64_t v81 = v45;
    sub_1000B8508(0xFu);
    if (v48)
    {
      sub_10012A554(v47, v48, (uint64_t)v5);
      uint64_t v50 = v49;
      char v52 = v51;
      sub_10001EDA0();
      if ((v52 & 1) != 0)
      {
        uint64_t v3 = v76;
      }

      else
      {
        sub_1000B52F0();
        uint64_t v3 = v76;
        if (v53 == v50)
        {
          v82[3] = &type metadata for Bool;
          LOBYTE(v82[0]) = 1;
          sub_1001B1C84((uint64_t)v82, 0x7473614C7369LL, 0xE600000000000000LL);
          uint64_t v46 = v81;
        }
      }
    }

    if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
    {
      sub_100093020();
      uint64_t v42 = v55;
    }

    unint64_t v54 = v42[2];
    if (v54 >= v42[3] >> 1)
    {
      sub_100093020();
      uint64_t v42 = v56;
    }

    ++v41;
    v42[2] = v54 + 1;
    v42[v54 + 4] = v46;
  }

  while (v77 != v41);
LABEL_59:
  sub_100056ADC();
  unint64_t v58 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  sub_1000175B0(&qword_1002AA338);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  sub_10003561C();
  v82[0] = 0LL;
  id v60 = [v58 dataWithJSONObject:isa options:0 error:v82];

  id v61 = v82[0];
  if (v60)
  {
    uint64_t v62 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v60);
    sub_100019390();
  }

  else
  {
    uint64_t v63 = v61;
    unint64_t isUniquelyReferenced_nonNull_native = _convertNSErrorToError(_:)(v61);

    swift_willThrow(v64);
    if (qword_1002A8D90 != -1) {
LABEL_68:
    }
      swift_once(&qword_1002A8D90, sub_100183E34);
    uint64_t v65 = sub_100077D08();
    sub_100018F68(v65, (uint64_t)qword_1002EB9D0);
    swift_errorRetain(isUniquelyReferenced_nonNull_native);
    uint64_t v66 = swift_errorRetain(isUniquelyReferenced_nonNull_native);
    uint64_t v67 = (os_log_s *)Logger.logObject.getter(v66);
    os_log_type_t v69 = static os_log_type_t.error.getter(v67, v68);
    if (os_log_type_enabled(v67, v69))
    {
      uint64_t v70 = (uint8_t *)sub_100019464(12LL);
      uint64_t v71 = (void *)sub_100019464(32LL);
      v82[0] = v71;
      *(_DWORD *)uint64_t v70 = 136446210;
      swift_getErrorValue(isUniquelyReferenced_nonNull_native, v80, v79);
      uint64_t v72 = Error.localizedDescription.getter(v79[1], v79[2]);
      uint64_t v81 = sub_1000CF360(v72, v73, (uint64_t *)v82);
      sub_1000E5720((uint64_t)&v81, (uint64_t)v82);
      sub_10001EDA0();
      sub_10006D32C();
      sub_10006D32C();
      sub_100092A00( (void *)&_mh_execute_header,  v67,  v69,  "Error serializing transaction dictionaries: %{public}s",  v70);
      sub_10009293C((uint64_t)v71);
      sub_10001A408((uint64_t)v71);
      sub_10001A408((uint64_t)v70);

      sub_10006D32C();
    }

    else
    {
      sub_10006D32C();
      sub_10006D32C();
      sub_10006D32C();
    }

    sub_100019390();
    return 0LL;
  }

  return v62;
}

uint64_t sub_1000E179C()
{
  uint64_t v1 = sub_1000E5434();
  if (v1)
  {
    unint64_t v2 = (void *)sub_1000E5568(v1);
    uint64_t v3 = 0LL;
    sub_100088DDC(v2, 1, 0);
  }

  else
  {
    unint64_t v4 = sub_1000588D4();
    uint64_t v3 = sub_1000252D0((uint64_t)&type metadata for TransactionError, v4);
    sub_1000E55A8(v3, v5);
  }

  return v3;
}

void sub_1000E1810()
{
  uint64_t v1 = sub_1000E5434();
  if (v1)
  {
    unint64_t v2 = (void *)sub_1000E5568(v1);
    sub_100088F7C(v2);
    sub_10009305C();
    if (v3)
    {
    }

    else
    {
      unint64_t v7 = sub_1000E5760();
      uint64_t v8 = sub_1000252D0((uint64_t)&type metadata for TransactionError, v7);
      sub_1000E5640(v8, v9);
    }
  }

  else
  {
    unint64_t v4 = sub_1000588D4();
    uint64_t v5 = sub_1000252D0((uint64_t)&type metadata for TransactionError, v4);
    sub_1000E55A8(v5, v6);
  }

  sub_10002A3D4();
}

void sub_1000E188C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1000E5524(a1);
  sub_1000761E8(v3, a2, 6LL);
  sub_10002A3D4();
}

uint64_t sub_1000E18CC(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_1000E5524(a1);
  uint64_t result = sub_100076AE8();
  if ((result & 1) == 0)
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v4 = sub_100077D08();
    uint64_t v5 = (os_log_s *)sub_100018F68(v4, (uint64_t)qword_1002EB9D0);
    uint64_t v6 = sub_100023E58();
    Logger.logObject.getter(v6);
    os_log_type_t v7 = sub_100092CFC();
    if (os_log_type_enabled(v5, v7))
    {
      uint64_t v8 = (uint8_t *)sub_100019464(12LL);
      uint64_t v14 = sub_100019464(32LL);
      *(_DWORD *)uint64_t v8 = 136315138;
      uint64_t v9 = sub_100019320();
      sub_1000E54C4(v9);
      sub_1000931B4();
      sub_1000E5720(v10, v11);
      sub_100077C58();
      sub_100092A00((void *)&_mh_execute_header, v5, v7, "Will start renewing subscriptions for %s", v8);
      sub_10009293C(v14);
      sub_10001A408(v14);
      sub_10001A408((uint64_t)v8);
    }

    else
    {

      sub_100077C64();
    }

    sub_100019F58((void *)(v2 + 104), *(void *)(v2 + 128));
    uint64_t v12 = (void *)sub_1000706C8();
    return sub_10008B4E0(v12, v13);
  }

  return result;
}

void sub_1000E1A44()
{
  uint64_t v2 = sub_1000891E0();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    sub_100092F60(v1, *(void *)(v0 + 128));
    sub_100089E70();
  }

  else
  {
    unint64_t v4 = sub_1000588D4();
    uint64_t v5 = sub_1000252D0((uint64_t)&type metadata for TransactionError, v4);
    sub_1000E55A8(v5, v6);
  }

  sub_100023E74();
}

void sub_1000E1AC8()
{
  uint64_t v1 = sub_1000E5484();
  if (v1)
  {
    uint64_t v2 = (void *)sub_1000E56F8(v1);
    sub_10008A040(v2, v3);
  }

  else
  {
    unint64_t v4 = sub_1000588D4();
    uint64_t v5 = sub_1000252D0((uint64_t)&type metadata for TransactionError, v4);
    sub_1000E55A8(v5, v6);
  }

  sub_1000193DC();
}

uint64_t sub_1000E1CE0()
{
  uint64_t v3 = (uint64_t)v1;
  sub_100092F74();
  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v4 = sub_100077D08();
  sub_100018F68(v4, (uint64_t)qword_1002EB9D0);
  sub_100023E58();
  sub_1000E577C();
  os_log_type_t v5 = sub_100092CFC();
  uint64_t v6 = &word_1001F3000;
  if (os_log_type_enabled(v1, v5))
  {
    os_log_type_t v7 = (uint8_t *)sub_100019464(12LL);
    uint64_t v46 = sub_100019464(32LL);
    *(_DWORD *)os_log_type_t v7 = 136315138;
    uint64_t v8 = sub_100019320();
    sub_1000E54C4(v8);
    sub_1000931B4();
    uint64_t v6 = &word_1001F3000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v9, v10, v7 + 4);
    sub_100077C58();
    sub_100092A00((void *)&_mh_execute_header, v1, v5, "appstored is checking for messages for %s", v7);
    sub_10009293C(v46);
    sub_10001A408(v46);
    sub_10001A408((uint64_t)v7);
  }

  else
  {

    sub_100077C64();
  }

  uint64_t v11 = (os_log_s *)*sub_100019F58((void *)v1 + 13, *((void *)v1 + 16));
  sub_1000706C8();
  uint64_t v12 = sub_10008A2FC();
  if (!v13)
  {
    sub_100023E58();
    sub_1000E577C();
    os_log_type_t v21 = sub_100092CFC();
    if (sub_100077C98(v21))
    {
      uint64_t v22 = (uint8_t *)sub_100019464(12LL);
      uint64_t v23 = sub_100019464(32LL);
      *(_DWORD *)uint64_t v22 = *((void *)v6 + 128);
      uint64_t v24 = sub_100019320();
      uint64_t v25 = sub_1000E54C4(v24);
      sub_1000E558C(v25, v26, v27, v28, v29, v30, v31, v32, v45, v23);
      sub_100077C58();
      char v33 = "there is no message for %s";
LABEL_13:
      sub_100092A00((void *)&_mh_execute_header, v11, (os_log_type_t)v3, v33, v22);
      sub_10009293C(v23);
      sub_10001A408(v23);
      sub_10001A408((uint64_t)v22);

      return 0LL;
    }

void sub_1000E1FD8(unsigned __int8 a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v8 = sub_100077D08();
  sub_100018F68(v8, (uint64_t)qword_1002EB9D0);
  uint64_t v9 = sub_100023E58();
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  uint64_t v27 = a2;
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = sub_100019464(22LL);
    uint64_t v13 = sub_100019464(32LL);
    uint64_t v29 = v13;
    *(_DWORD *)uint64_t v12 = 136315394;
    sub_100019320();
    uint64_t v28 = sub_1000CF360(a2, a3, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v12 + 4);
    sub_100077C58();
    *(_WORD *)(v12 + 12) = 2048;
    uint64_t v28 = a1 + 1LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v12 + 14);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "storekitd is checking for messages for %s with type %ld",  (uint8_t *)v12,  0x16u);
    sub_10009293C(v13);
    sub_10001A408(v13);
    sub_10001A408(v12);
  }

  else
  {

    uint64_t v14 = sub_100077C64();
  }

  if ((a1 - 1) > 2u)
  {
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)sub_100019464(12LL);
      *(_DWORD *)uint64_t v26 = 134217984;
      uint64_t v29 = 1LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v26 + 4);
      sub_100092A00((void *)&_mh_execute_header, v24, v25, "Message type %ld unhandled", v26);
      sub_10001A408((uint64_t)v26);
    }
  }

  else
  {
    sub_100092F60((void *)(v3 + 104), *(void *)(v3 + 128));
    sub_10008B3C4(a1);
    if (v16)
    {
      uint64_t v18 = v15;
      uint64_t v19 = v16;
      int v20 = v17;
      os_log_type_t v21 = *(os_unfair_lock_s **)(*(void *)(v4 + 48) + 16LL);
      sub_10002A674();
      os_unfair_lock_lock(v21);
      uint64_t v22 = *(void *)(v4 + 40);
      os_unfair_lock_unlock(v21);
      sub_10002A5A4();
      uint64_t v23 = sub_1000AA2F0(v22, v27, a3, v18, v19, v20 & 0xFFFFFF01);
      sub_10001EDA0();
      if (v23)
      {
        sub_1001B1DE0(v23);
        sub_1000E57C0();
      }
    }
  }

  sub_1000193DC();
}

void sub_1000E2284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_1000E5524(a1);
  sub_100076118(v7, 0, a2, a3, a4, v8, v9, v10);
  sub_10002A3D4();
}

uint64_t sub_1000E22C8()
{
  return swift_weakDestroy(v0 + 144);
}

void sub_1000E22EC()
{
  uint64_t v0 = sub_1000D11DC();
  sub_100019F7C((void *)(v0 + 64));
  sub_100019F7C((void *)(v0 + 104));
  swift_weakDestroy(v0 + 144);
  sub_10001945C();
}

uint64_t sub_1000E2324()
{
  return swift_deallocClassInstance(v0, 152LL, 7LL);
}

uint64_t type metadata accessor for OctaneServer()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService12OctaneServer);
}

uint64_t sub_1000E2364()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain(*(void *)(v0 + 32));
  return v1;
}

void sub_1000E2390()
{
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + 48) + 16LL);
  ChannelPipeline.syncOperations.getter();
  os_unfair_lock_lock(v1);
  os_unfair_lock_unlock(v1);
  swift_release();
  sub_1000193B8();
}

void sub_1000E23DC(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(void *)(a2 + 16))
  {
LABEL_11:
    sub_10002A44C();
    return;
  }

  int v7 = a1 & 1;
  uint64_t v8 = *(void *)(v4 + 56);
  if (v8)
  {
    uint64_t v10 = sub_1000E5790((uint64_t)&unk_1001FEE38);
    uint64_t v11 = sub_100019310((uint64_t)&unk_100281DA8, 56LL);
    sub_1000E5504(v11);
    ChannelPipeline.syncOperations.getter();
    uint64_t v12 = swift_bridgeObjectRetain(a4);
    sub_1000E56B8( v12,  v13,  (uint64_t)sub_1000E4D54,  v14,  (uint64_t)&unk_100281D08,  (uint64_t)sub_1000E5324,  (uint64_t)&unk_100281D20);
    swift_release(v10);
    swift_release(v6);
    sub_1000E54D4(v8);
    return;
  }

  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v15 = sub_100077D08();
  uint64_t v16 = sub_100018F68(v15, (uint64_t)qword_1002EB9D0);
  uint64_t v32 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.error.getter(v32, v17);
  if (sub_1000E56A8(v18, v19, v20, v21, v22, v23, v24, v25, v32))
  {
    uint64_t v26 = (uint8_t *)sub_100019464(12LL);
    uint64_t v27 = (void *)sub_100019464(8LL);
    unint64_t v28 = sub_1000E5698(5.7779e-34);
    if (v7) {
      Swift::Int v29 = 37LL;
    }
    else {
      Swift::Int v29 = 36LL;
    }
    v30.super.super.Class isa = NSNumber.init(integerLiteral:)(v29).super.super.isa;
    sub_1000E5548((uint64_t)v30.super.super.isa, v31);
    *uint64_t v27 = v28;
    sub_100092A00((void *)&_mh_execute_header, v33, v5, "Unable to communicate with daemon to simulate push %@", v26);
    sub_1000175B0(&qword_1002B6F90);
    sub_10009293C((uint64_t)v27);
    sub_10001A408((uint64_t)v27);
    sub_10001A408((uint64_t)v26);

    goto LABEL_11;
  }

  sub_1000E54EC(v33);
}

void sub_1000E2588(char a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16))
  {
LABEL_11:
    sub_10002A44C();
    return;
  }

  int v4 = a1 & 1;
  uint64_t v5 = *(void *)(v2 + 56);
  if (v5)
  {
    sub_1000E5790((uint64_t)&unk_1001FEE38);
    uint64_t v6 = sub_100019310((uint64_t)&unk_100281DD0, 56LL);
    sub_1000E5504(v6);
    ChannelPipeline.syncOperations.getter();
    uint64_t v7 = swift_bridgeObjectRetain();
    sub_1000E56B8( v7,  v8,  (uint64_t)sub_1000E4D54,  v9,  (uint64_t)&unk_100281DF8,  (uint64_t)sub_1000E53B4,  (uint64_t)&unk_100281E10);
    swift_release();
    swift_release();
    sub_1000E54D4(v5);
    return;
  }

  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v10 = sub_100077D08();
  uint64_t v11 = sub_100018F68(v10, (uint64_t)qword_1002EB9D0);
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.error.getter(v27, v12);
  if (sub_1000E56A8(v13, v14, v15, v16, v17, v18, v19, v20, v27))
  {
    int v21 = (uint8_t *)sub_100019464(12LL);
    int v22 = (void *)sub_100019464(8LL);
    unint64_t v23 = sub_1000E5698(5.7779e-34);
    if (v4) {
      Swift::Int v24 = 37LL;
    }
    else {
      Swift::Int v24 = 36LL;
    }
    v25.super.super.Class isa = NSNumber.init(integerLiteral:)(v24).super.super.isa;
    sub_1000E5548((uint64_t)v25.super.super.isa, v26);
    *int v22 = v23;
    sub_100092A00((void *)&_mh_execute_header, v28, v3, "Unable to communicate with daemon to simulate push %@", v21);
    sub_1000175B0(&qword_1002B6F90);
    sub_10009293C((uint64_t)v22);
    sub_10001A408((uint64_t)v22);
    sub_10001A408((uint64_t)v21);

    goto LABEL_11;
  }

  sub_1000E54EC(v28);
}

void sub_1000E2734(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = a1 & 1;
  uint64_t v7 = *(void *)(v5 + 56);
  if (v7)
  {
    if ((a1 & 1) != 0) {
      uint64_t v12 = &unk_1001FEE38;
    }
    else {
      uint64_t v12 = &unk_1001FEE68;
    }
    uint64_t KeyPath = swift_getKeyPath(v12);
    uint64_t v14 = swift_allocObject(&unk_100281B50, 56LL, 7LL);
    *(void *)(v14 + 16) = v5;
    *(_BYTE *)(v14 + 24) = v6;
    *(void *)(v14 + 32) = a4;
    *(void *)(v14 + 40) = a5;
    *(void *)(v14 + 48) = v7;
    swift_unknownObjectRetain_n(v7, 2LL);
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1000E2BE0(a2, a3, KeyPath, (uint64_t)sub_1000E4D54, v14);
    swift_release();
    swift_release();
    swift_unknownObjectRelease(v7);
  }

  else
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    uint64_t v16 = sub_100018F68(v15, (uint64_t)qword_1002EB9D0);
    oslog = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.error.getter(oslog, v17);
    if (os_log_type_enabled(oslog, v18))
    {
      int v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      int v20 = (Class *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)int v19 = 138412290;
      sub_1000A3784();
      if (v6) {
        Swift::Int v21 = 37LL;
      }
      else {
        Swift::Int v21 = 36LL;
      }
      Class isa = NSNumber.init(integerLiteral:)(v21).super.super.isa;
      Class v24 = isa;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v19 + 4);
      *int v20 = isa;
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  v18,  "Unable to communicate with daemon to simulate push %@",  v19,  0xCu);
      sub_1000175B0(&qword_1002B6F90);
      swift_arrayDestroy(v20, 1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
    }
  }

uint64_t sub_1000E29A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*(void *)a2 + 24LL);
  *(void *)(*(void *)a2 + 24LL) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_1000E29D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*(void *)a2 + 16LL);
  *(void *)(*(void *)a2 + 16LL) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v3);
}

void sub_1000E2A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1000E2A20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = v7;
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags(0LL);
  sub_100043FD8();
  __chkstk_darwin(v18);
  sub_10004878C();
  uint64_t v19 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v31 = *(void *)(v19 - 8);
  uint64_t v32 = v19;
  sub_100043FD8();
  __chkstk_darwin(v20);
  sub_1000BBB14();
  Swift::Int v21 = (void *)sub_100019310(a5, 56LL);
  v21[2] = v12;
  v21[3] = a2;
  v21[4] = a3;
  v21[5] = a4;
  v21[6] = a1;
  aBlock[4] = a6;
  uint64_t v35 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000169C8;
  aBlock[3] = a7;
  int v22 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a1);
  swift_retain();
  swift_retain();
  uint64_t v23 = swift_retain();
  static DispatchQoS.unspecified.getter(v23);
  char v33 = _swiftEmptyArrayStorage;
  sub_100046F3C( (unint64_t *)&qword_1002B6F20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (const char *)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v25 = v24;
  uint64_t v26 = sub_1000175B0(&qword_1002A9118);
  unint64_t v27 = sub_100025C50();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v26, v27, v17, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v8, v22);
  _Block_release(v22);
  uint64_t v28 = sub_1000706C8();
  v29(v28);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v9, v32);
  swift_release(v35);
  sub_10002A580();
}

uint64_t sub_1000E2BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v28 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v15 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = *(void *)(v6 + 48);
  uint64_t v18 = (void *)swift_allocObject(&unk_100281B78, 64LL, 7LL);
  v18[2] = v6;
  v18[3] = a3;
  v18[4] = a4;
  v18[5] = a5;
  v18[6] = a1;
  v18[7] = a2;
  aBlock[4] = sub_1000E4E2C;
  void aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000169C8;
  aBlock[3] = &unk_100281B90;
  uint64_t v19 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v20 = swift_retain();
  static DispatchQoS.unspecified.getter(v20);
  Swift::Int v29 = _swiftEmptyArrayStorage;
  sub_100046F3C( (unint64_t *)&qword_1002B6F20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (const char *)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v22 = v21;
  uint64_t v23 = sub_1000175B0(&qword_1002A9118);
  unint64_t v24 = sub_100025C50();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v23, v24, v12, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v17, v14, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v27);
  return swift_release();
}

void sub_1000E2DEC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t))
{
  uint64_t v50 = a7;
  uint64_t v51 = a8;
  uint64_t v48 = a6;
  uint64_t v49 = a3;
  uint64_t v52 = a4;
  unint64_t v58 = a9;
  uint64_t v59 = a5;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v56 = *(void *)(v12 - 8);
  uint64_t v57 = v12;
  sub_100043FD8();
  __chkstk_darwin(v13);
  uint64_t v14 = sub_100043FBC();
  uint64_t v15 = type metadata accessor for DispatchQoS(v14);
  uint64_t v54 = *(void *)(v15 - 8);
  uint64_t v55 = v15;
  sub_100043FD8();
  __chkstk_darwin(v16);
  sub_10001DAD0();
  uint64_t v19 = v18 - v17;
  uint64_t v20 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (uint64_t *)((char *)&v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v53 = type metadata accessor for DispatchTime(0LL);
  uint64_t v24 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  sub_100092F38();
  uint64_t v27 = v25 - v26;
  __chkstk_darwin(v28);
  NSNumber v30 = (char *)&v47 - v29;
  aBlock[0] = a1;
  sub_10002A674();
  uint64_t v60 = a2;
  swift_getAtKeyPath(v63, aBlock, a2);
  sub_10002A5A4();
  uint64_t v31 = *(void *)(v63[0] + 16LL);
  uint64_t v32 = swift_bridgeObjectRelease(v63[0]);
  if (!v31)
  {
    uint64_t v47 = *(void *)(a1 + 48);
    static DispatchTime.now()(v32);
    *uint64_t v23 = 500LL;
    (*(void (**)(void *, void, uint64_t))(v21 + 104))( v23,  enum case for DispatchTimeInterval.milliseconds(_:),  v20);
    + infix(_:_:)(v27, v23);
    (*(void (**)(void *, uint64_t))(v21 + 8))(v23, v20);
    char v33 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    uint64_t v34 = v53;
    v33(v27, v53);
    uint64_t v35 = (void *)sub_100019310(v48, 48LL);
    uint64_t v36 = v60;
    v35[2] = a1;
    v35[3] = v36;
    uint64_t v37 = v52;
    v35[4] = v49;
    v35[5] = v37;
    aBlock[4] = v50;
    uint64_t v62 = v35;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000169C8;
    aBlock[3] = v51;
    uint64_t v38 = _Block_copy(aBlock);
    sub_10002A674();
    ChannelPipeline.syncOperations.getter();
    uint64_t v39 = swift_retain();
    static DispatchQoS.unspecified.getter(v39);
    v63[0] = _swiftEmptyArrayStorage;
    sub_100046F3C( (unint64_t *)&qword_1002B6F20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (const char *)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v41 = v40;
    uint64_t v42 = sub_1000175B0(&qword_1002A9118);
    unint64_t v43 = sub_100025C50();
    uint64_t v44 = v57;
    dispatch thunk of SetAlgebra.init<A>(_:)(v63, v42, v43, v57, v41);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v30, v19, v9, v38);
    _Block_release(v38);
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v9, v44);
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v19, v55);
    v33((uint64_t)v30, v34);
    swift_release(v62);
  }

  v63[0] = a1;
  sub_10002A674();
  uint64_t v45 = v59;
  swift_bridgeObjectRetain(v59);
  uint64_t v46 = (void (*)(void *, void))swift_modifyAtReferenceWritableKeyPath(aBlock, v63, v60);
  v58(v45);
  v46(aBlock, 0LL);
  swift_release(v63[0]);
  sub_10002A580();
}

uint64_t sub_1000E3118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v49 = a5;
  uint64_t v50 = a6;
  uint64_t v42 = a3;
  uint64_t v43 = a4;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v47 = *(void *)(v8 - 8);
  uint64_t v48 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v45 = *(void *)(v11 - 8);
  uint64_t v46 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (void *)((char *)v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v44 = type metadata accessor for DispatchTime(0LL);
  uint64_t v18 = *(void *)(v44 - 8);
  uint64_t v19 = __chkstk_darwin(v44);
  uint64_t v21 = (char *)v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)v41 - v22;
  aBlock[0] = a1;
  swift_retain();
  uint64_t v51 = a2;
  swift_getAtKeyPath(&v53, aBlock, a2);
  swift_release();
  uint64_t v24 = v53[2];
  uint64_t v25 = swift_bridgeObjectRelease();
  if (!v24)
  {
    v41[1] = *(void *)(a1 + 48);
    static DispatchTime.now()(v25);
    *uint64_t v17 = 500LL;
    (*(void (**)(void *, void, uint64_t))(v15 + 104))( v17,  enum case for DispatchTimeInterval.milliseconds(_:),  v14);
    + infix(_:_:)(v21, v17);
    (*(void (**)(void *, uint64_t))(v15 + 8))(v17, v14);
    uint64_t v26 = *(void (**)(char *, uint64_t))(v18 + 8);
    uint64_t v27 = v44;
    v26(v21, v44);
    uint64_t v28 = (void *)swift_allocObject(&unk_100281BC8, 48LL, 7LL);
    uint64_t v29 = v51;
    v28[2] = a1;
    v28[3] = v29;
    uint64_t v30 = v43;
    v28[4] = v42;
    v28[5] = v30;
    aBlock[4] = sub_1000E4E58;
    void aBlock[5] = v28;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000169C8;
    aBlock[3] = &unk_100281BE0;
    uint64_t v31 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    uint64_t v32 = swift_retain();
    static DispatchQoS.unspecified.getter(v32);
    uint64_t v53 = _swiftEmptyArrayStorage;
    sub_100046F3C( (unint64_t *)&qword_1002B6F20,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (const char *)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v34 = v33;
    uint64_t v35 = sub_1000175B0(&qword_1002A9118);
    unint64_t v36 = sub_100025C50();
    uint64_t v37 = v48;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v53, v35, v36, v48, v34);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v23, v13, v10, v31);
    _Block_release(v31);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v10, v37);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v46);
    v26(v23, v27);
    swift_release();
  }

  uint64_t v54 = a1;
  swift_retain();
  uint64_t v38 = v50;
  swift_bridgeObjectRetain();
  uint64_t v39 = (void (*)(void *, void))swift_modifyAtReferenceWritableKeyPath(aBlock, &v54, v51);
  sub_1001A0924((uint64_t *)&v53, v49, v38);
  swift_bridgeObjectRelease();
  v39(aBlock, 0LL);
  return swift_release();
}

uint64_t sub_1000E34A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v4 = *(v3 - 1);
      uint64_t v5 = *v3;
      swift_bridgeObjectRetain(*v3);
      sub_1001A0924(v7, v4, v5);
      swift_bridgeObjectRelease(v7[1]);
      v3 += 2;
      --v2;
    }

    while (v2);
  }

  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_1000E3518(uint64_t result)
{
  uint64_t v1 = result;
  int64_t v2 = 0LL;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v8 | (v2 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v2 << 6))
  {
    uint64_t v13 = (uint64_t *)(*(void *)(v1 + 48) + 16 * i);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    swift_bridgeObjectRetain();
    sub_1001A0924(&v16, v14, v15);
    uint64_t result = swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v10 = v2 + 1;
    if (__OFADD__(v2, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v10 >= v7) {
      return swift_release();
    }
    unint64_t v11 = *(void *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      int64_t v2 = v10 + 1;
      if (v10 + 1 >= v7) {
        return swift_release();
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (!v11)
      {
        int64_t v2 = v10 + 2;
        if (v10 + 2 >= v7) {
          return swift_release();
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        if (!v11)
        {
          int64_t v2 = v10 + 3;
          if (v10 + 3 >= v7) {
            return swift_release();
          }
          unint64_t v11 = *(void *)(v3 + 8 * v2);
          if (!v11) {
            break;
          }
        }
      }
    }

uint64_t sub_1000E3688(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v11 = sub_10011B8D4();
  *(_BYTE *)(v11 + 219) = 1;
  *(_OWORD *)(v11 + 24) = xmmword_1001FED80;
  swift_retain();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(66LL);
  v12._object = (void *)0x800000010021C7B0LL;
  v12._countAndFlagsBits = 0x1000000000000014LL;
  String.append(_:)(v12);
  v13._countAndFlagsBits = a1;
  v13._object = a2;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x100000000000002CLL;
  v14._object = (void *)0x800000010021C7D0LL;
  String.append(_:)(v14);
  sub_10011B0B0(0LL, 0xE000000000000000LL);
  *(_BYTE *)(v11 + 56) = 2;
  *(_OWORD *)(v11 + 64) = xmmword_1001FED90;
  swift_bridgeObjectRelease();
  *(_OWORD *)(v11 + 144) = xmmword_1001FEDA0;
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(v11 + 80);
  uint64_t v16 = *(void *)(v11 + 88);
  uint64_t v17 = *(void *)(v11 + 96);
  uint64_t v18 = *(void *)(v11 + 104);
  uint64_t v19 = *(void *)(v11 + 112);
  uint64_t v20 = *(void *)(v11 + 120);
  uint64_t v21 = *(void *)(v11 + 128);
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(void *)(v11 + 128) = 0LL;
  *(_WORD *)(v11 + 136) = 513;
  sub_1000E52B4(v15, v16, v17, v18, v19, v20, v21);
  if (a6)
  {
    swift_retain();
    _StringGuts.grow(_:)(25LL);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 0x3D64696226LL;
    v23._object = (void *)0xE500000000000000LL;
    String.append(_:)(v23);
    v24._countAndFlagsBits = a4;
    v24._object = a5;
    String.append(_:)(v24);
    sub_1001828C8(0xD000000000000014LL, (void *)0x800000010021C800LL);
    uint64_t v26 = v25;
    uint64_t v28 = v27;
    swift_bridgeObjectRelease();
    swift_release_n(a6, 2LL);
    swift_bridgeObjectRelease();
    uint64_t v29 = *(void *)(v11 + 160);
    uint64_t v30 = *(void *)(v11 + 168);
    uint64_t v31 = *(void *)(v11 + 176);
    uint64_t v32 = *(void *)(v11 + 184);
    uint64_t v33 = *(void *)(v11 + 192);
    uint64_t v34 = *(void *)(v11 + 200);
    uint64_t v35 = *(void *)(v11 + 208);
    *(void *)(v11 + 160) = 3LL;
    *(_OWORD *)(v11 + 168) = 0u;
    *(_OWORD *)(v11 + 184) = 0u;
    *(void *)(v11 + 200) = v26;
    *(void *)(v11 + 208) = v28;
    *(_WORD *)(v11 + 216) = 513;
    sub_1000E52B4(v29, v30, v31, v32, v33, v34, v35);
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  swift_release();
  return v11;
}

uint64_t sub_1000E3908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_10011B8D4();
  *(void *)(v10 + 24) = 0xD000000000000020LL;
  *(void *)(v10 + 32) = 0x800000010021C820LL;
  swift_retain();
  swift_bridgeObjectRelease();
  sub_10011B0B0(0xD000000000000048LL, 0x800000010021C850LL);
  *(_BYTE *)(v10 + 56) = 2;
  *(_OWORD *)(v10 + 64) = xmmword_1001FEDB0;
  swift_bridgeObjectRelease();
  if (a5)
  {
    type metadata accessor for ConfirmPurchaseEngagementUIRoute();
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t v11 = sub_10005F318(a3, a4);
    Swift::String v13 = v12;
    swift_bridgeObjectRelease();
    sub_1001828C8(v11, v13);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    swift_bridgeObjectRelease();
    swift_release_n(a5, 2LL);
    uint64_t v18 = *(void *)(v10 + 80);
    uint64_t v19 = *(void *)(v10 + 88);
    uint64_t v20 = *(void *)(v10 + 96);
    uint64_t v21 = *(void *)(v10 + 104);
    uint64_t v22 = *(void *)(v10 + 112);
    uint64_t v23 = *(void *)(v10 + 120);
    uint64_t v24 = *(void *)(v10 + 128);
    *(void *)(v10 + 80) = 2LL;
    *(void *)(v10 + 88) = a3;
    *(void *)(v10 + 96) = a4;
    *(void *)(v10 + 104) = a1;
    *(void *)(v10 + 112) = a2;
    *(void *)(v10 + 120) = v15;
    *(void *)(v10 + 128) = v17;
    *(_WORD *)(v10 + 136) = 256;
    sub_1000E52B4(v18, v19, v20, v21, v22, v23, v24);
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  *(_BYTE *)(v10 + 218) = 1;
  swift_release();
  return v10;
}

uint64_t sub_1000E3A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[3] = type metadata accessor for OctaneConfigurationManager();
  v27[4] = &off_10027C250;
  v27[0] = a1;
  uint64_t v25 = type metadata accessor for DatabaseStore();
  uint64_t v26 = &off_100290990;
  v24[0] = a2;
  *(void *)(a3 + 96) = &_swiftEmptySetSingleton;
  *(void *)(a3 + 104) = &_swiftEmptySetSingleton;
  *(_BYTE *)(a3 + 112) = 0;
  uint64_t v6 = type metadata accessor for SubscriptionRenewalCoordinator();
  uint64_t v7 = swift_allocObject(v6, 120LL, 15LL);
  swift_defaultActor_initialize();
  *(void *)(v7 + 112) = _swiftEmptyArrayStorage;
  *(void *)(a3 + 120) = v7;
  uint64_t v8 = type metadata accessor for UnfairLock();
  uint64_t v9 = swift_allocObject(v8, 24LL, 7LL);
  uint64_t v10 = (_DWORD *)swift_slowAlloc(4LL, -1LL);
  *(void *)(v9 + 16) = v10;
  *uint64_t v10 = 0;
  *(void *)(a3 + 128) = v9;
  *(void *)(a3 + 136) = 0LL;
  *(void *)(a3 + 144) = 0LL;
  *(void *)(a3 + 152) = 0LL;
  *(void *)(a3 + 160) = 0xB000000000000000LL;
  *(void *)(a3 + 168) = 0x3FF0000000000000LL;
  sub_1000E4EAC((uint64_t)v27, a3 + 16);
  sub_1000E4EAC((uint64_t)v24, a3 + 56);
  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_100018F68(v11, (uint64_t)qword_1002EB9D0);
  sub_1000E4EAC((uint64_t)v24, (uint64_t)v23);
  Swift::String v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    uint64_t v22 = v16;
    *(_DWORD *)uint64_t v15 = 136446210;
    sub_100019F58(v23, v23[3]);
    unint64_t v17 = sub_1001B2D30();
    unint64_t v19 = v18;
    uint64_t v21 = sub_1000CF360(v17, v18, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v15 + 4);
    swift_bridgeObjectRelease(v19);
    sub_100019F7C(v23);
    _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "Transaction manager initialized with database: %{public}s",  v15,  0xCu);
    swift_arrayDestroy(v16, 1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {
    sub_100019F7C(v23);
  }

  sub_100019F58(v24, v25);
  sub_1001B2E60();
  sub_100019F7C(v27);
  sub_100019F7C(v24);
  return a3;
}

void *sub_1000E3D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  a7[14] = type metadata accessor for OctaneTransactionManager();
  a7[15] = &off_10027DAD8;
  a7[11] = a6;
  uint64_t v14 = type metadata accessor for OctaneConfigurationManager();
  v22[3] = v14;
  v22[4] = &off_10027C250;
  v22[0] = a5;
  uint64_t v15 = sub_100043F18((uint64_t)v22, v14);
  __chkstk_darwin(v15);
  unint64_t v17 = (void *)((char *)&v22[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  uint64_t v19 = *v17;
  a7[9] = v14;
  a7[10] = &off_10027C250;
  a7[5] = a4;
  a7[6] = v19;
  a7[2] = a1;
  a7[3] = a2;
  a7[4] = a3;
  sub_100019F7C(v22);
  return a7;
}

void *sub_1000E3E14(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for OctaneConfigurationManager();
  void v12[3] = v4;
  v12[4] = &off_10027C250;
  v12[0] = a1;
  uint64_t v5 = sub_100043F18((uint64_t)v12, v4);
  __chkstk_darwin(v5);
  uint64_t v7 = (void *)((char *)&v12[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v8 + 16))(v7);
  uint64_t v9 = *v7;
  a2[9] = v4;
  a2[10] = &off_10027C250;
  a2[5] = 0LL;
  a2[6] = v9;
  a2[2] = 0xD000000000000018LL;
  a2[3] = 0x800000010021C770LL;
  a2[4] = 0LL;
  sub_100019F7C(v12);
  return a2;
}

void *sub_1000E3EE4(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for OctaneConfigurationManager();
  void v12[3] = v4;
  v12[4] = &off_10027C250;
  v12[0] = a1;
  uint64_t v5 = sub_100043F18((uint64_t)v12, v4);
  __chkstk_darwin(v5);
  uint64_t v7 = (void *)((char *)&v12[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v8 + 16))(v7);
  uint64_t v9 = *v7;
  a2[9] = v4;
  a2[10] = &off_10027C250;
  a2[5] = 0LL;
  a2[6] = v9;
  a2[2] = 0xD00000000000002ELL;
  a2[3] = 0x80000001002185F0LL;
  a2[4] = 0LL;
  sub_100019F7C(v12);
  return a2;
}

void sub_1000E3FB4()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = sub_1000E5678();
  v21[3] = sub_1000E5688(v10, (uint64_t)&off_10027C250);
  v21[4] = &off_10027DAD8;
  v21[0] = v0;
  sub_1000E4EAC((uint64_t)v22, (uint64_t)v20);
  sub_1000E4EAC((uint64_t)v21, (uint64_t)v19);
  sub_100043F18((uint64_t)v20, v20[3]);
  sub_1000E55DC();
  __chkstk_darwin(v11);
  Swift::String v13 = (uint64_t *)((char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  sub_100043F18((uint64_t)v19, v19[3]);
  sub_1000E55DC();
  __chkstk_darwin(v15);
  unint64_t v17 = sub_1000E55E8(v16, v19[0]);
  v18(v17);
  sub_1000E3D20(v7, v5, 0LL, v3, *v13, *v1, v9);
  sub_100019F7C(v19);
  sub_100019F7C(v20);
  sub_100019F7C(v21);
  sub_100019F7C(v22);
  sub_100023E74();
}

void *sub_1000E40E8(uint64_t a1, uint64_t a2, void *a3)
{
  v19[3] = type metadata accessor for OctaneConfigurationManager();
  v19[4] = &off_10027C250;
  v19[0] = a1;
  v18[3] = type metadata accessor for OctaneTransactionManager();
  v18[4] = &off_10027DAD8;
  v18[0] = a2;
  v17[0] = 0LL;
  v17[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(25LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  sub_1000E4EAC((uint64_t)v19, (uint64_t)v17);
  sub_1000E4EAC((uint64_t)v18, (uint64_t)v16);
  uint64_t v6 = sub_100043F18((uint64_t)v17, v17[3]);
  __chkstk_darwin(v6);
  uint64_t v8 = (void *)((char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v9 + 16))(v8);
  uint64_t v10 = sub_100043F18((uint64_t)v16, v16[3]);
  __chkstk_darwin(v10);
  uint64_t v12 = (void *)((char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  uint64_t v14 = sub_1000E3D20(0xD000000000000019LL, 0x800000010021C6E0LL, 0LL, 4LL, *v8, *v12, a3);
  sub_100019F7C(v16);
  sub_100019F7C(v17);
  sub_100019F7C(v18);
  sub_100019F7C(v19);
  return v14;
}

void sub_1000E4278(void *a1, uint64_t (*a2)(void), void (*a3)(void, uint64_t))
{
  uint64_t v11 = type metadata accessor for OctaneConfigurationManager();
  uint64_t v12 = &off_10027C250;
  v10[0] = a1;
  uint64_t v6 = a2(0LL);
  uint64_t v7 = sub_100019310(v6, 88LL);
  sub_100043F18((uint64_t)v10, v11);
  sub_1000E55DC();
  __chkstk_darwin(v8);
  sub_10004878C();
  (*(void (**)(void *))(v9 + 16))(a1);
  a3(*a1, v7);
  sub_100019F7C(v10);
  sub_1000193B8();
}

void *sub_1000E4328(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = type metadata accessor for OctaneConfigurationManager();
  uint64_t v21 = &off_10027C250;
  v19[0] = a1;
  uint64_t v17 = type metadata accessor for OctaneTransactionManager();
  uint64_t v18 = &off_10027DAD8;
  v16[0] = a2;
  uint64_t v4 = type metadata accessor for SingleStatusRoute();
  uint64_t v5 = (void *)swift_allocObject(v4, 128LL, 7LL);
  uint64_t v6 = sub_100043F18((uint64_t)v19, v20);
  __chkstk_darwin(v6);
  uint64_t v8 = (void *)((char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v9 + 16))(v8);
  uint64_t v10 = sub_100043F18((uint64_t)v16, v17);
  __chkstk_darwin(v10);
  uint64_t v12 = (void *)((char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  uint64_t v14 = sub_1000E40E8(*v8, *v12, v5);
  sub_100019F7C(v16);
  sub_100019F7C(v19);
  return v14;
}

void sub_1000E4468()
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_1000E5678();
  uint64_t v12 = sub_1000E5688(v3, (uint64_t)&off_10027C250);
  uint64_t v13 = &off_10027DAD8;
  v11[0] = v0;
  uint64_t v4 = v2(0LL);
  sub_100019310(v4, 128LL);
  sub_100043F18((uint64_t)v14, v3);
  sub_1000E55DC();
  __chkstk_darwin(v5);
  sub_1000BBB14();
  (*(void (**)(uint64_t))(v6 + 16))(v0);
  sub_100043F18((uint64_t)v11, v12);
  sub_1000E55DC();
  __chkstk_darwin(v7);
  uint64_t v9 = sub_1000E55E8(v8, v11[0]);
  v10(v9);
  sub_1000E3FB4();
  sub_100019F7C(v11);
  sub_100019F7C(v14);
  sub_100023E74();
}

void *sub_1000E4574(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v22[3] = type metadata accessor for OctaneConfigurationManager();
  v22[4] = &off_10027C250;
  v22[0] = a2;
  v21[3] = type metadata accessor for OctaneTransactionManager();
  v21[4] = &off_10027DAD8;
  v21[0] = a3;
  uint64_t v8 = swift_weakInit(a4 + 16, 0LL);
  swift_weakAssign(v8, a1);
  sub_1000E4EAC((uint64_t)v22, (uint64_t)v20);
  sub_1000E4EAC((uint64_t)v21, (uint64_t)v19);
  uint64_t v9 = sub_100043F18((uint64_t)v20, v20[3]);
  __chkstk_darwin(v9);
  uint64_t v11 = (void *)((char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  uint64_t v13 = sub_100043F18((uint64_t)v19, v19[3]);
  __chkstk_darwin(v13);
  uint64_t v15 = (void *)((char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  uint64_t v17 = sub_1000E3D20(0xD000000000000021LL, 0x8000000100218560LL, 0LL, 4LL, *v11, *v15, a4);
  sub_100019F7C(v19);
  sub_100019F7C(v20);
  swift_release(a1);
  sub_100019F7C(v21);
  sub_100019F7C(v22);
  return v17;
}

void *sub_1000E4710(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for OctaneConfigurationManager();
  v14[3] = v6;
  v14[4] = &off_10027C250;
  v14[0] = a1;
  a3[11] = a2;
  a3[12] = &off_100281B20;
  uint64_t v7 = sub_100043F18((uint64_t)v14, v6);
  __chkstk_darwin(v7);
  uint64_t v9 = (void *)((char *)&v14[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v10 + 16))(v9);
  uint64_t v11 = *v9;
  a3[9] = v6;
  a3[10] = &off_10027C250;
  a3[5] = 0LL;
  a3[6] = v11;
  a3[2] = 0xD00000000000001FLL;
  a3[3] = 0x800000010021C720LL;
  a3[4] = 0LL;
  sub_100019F7C(v14);
  return a3;
}

void *sub_1000E47F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for OctaneConfigurationManager();
  v22[3] = v8;
  v22[4] = &off_10027C250;
  v22[0] = a4;
  uint64_t v9 = type metadata accessor for BagRoute();
  uint64_t v10 = (void *)swift_allocObject(v9, 120LL, 7LL);
  uint64_t v11 = sub_100043F18((uint64_t)v22, v8);
  uint64_t v12 = *(void *)(*(void *)(v8 - 8) + 64LL);
  __chkstk_darwin(v11);
  unint64_t v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v15 = *(void (**)(char *))(v14 + 16);
  v15((char *)v21 - v13);
  uint64_t v16 = *(void *)((char *)v21 - v13);
  v21[3] = v8;
  v21[4] = &off_10027C250;
  v21[0] = v16;
  v10[12] = 0LL;
  uint64_t v17 = swift_unknownObjectWeakInit(v10 + 11, 0LL);
  v10[12] = &off_100281B20;
  swift_unknownObjectWeakAssign(v17, a1);
  v10[13] = a2;
  v10[14] = a3;
  swift_release(a1);
  uint64_t v18 = sub_100043F18((uint64_t)v21, v8);
  __chkstk_darwin(v18);
  v15((char *)v21 - v13);
  uint64_t v19 = *(void *)((char *)v21 - v13);
  v10[9] = v8;
  v10[10] = &off_10027C250;
  v10[5] = 0LL;
  v10[6] = v19;
  v10[2] = 0xD000000000000029LL;
  void v10[3] = 0x800000010021C740LL;
  v10[4] = 0LL;
  sub_100019F7C(v21);
  sub_100019F7C(v22);
  return v10;
}

uint64_t sub_1000E497C(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = type metadata accessor for OctaneConfigurationManager();
  uint64_t v21 = &off_10027C250;
  v19[0] = a1;
  uint64_t v17 = type metadata accessor for DatabaseStore();
  uint64_t v18 = &off_100290990;
  v16[0] = a2;
  uint64_t v4 = type metadata accessor for OctaneTransactionManager();
  uint64_t v5 = swift_allocObject(v4, 176LL, 7LL);
  uint64_t v6 = sub_100043F18((uint64_t)v19, v20);
  __chkstk_darwin(v6);
  uint64_t v8 = (void *)((char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v9 + 16))(v8);
  uint64_t v10 = sub_100043F18((uint64_t)v16, v17);
  __chkstk_darwin(v10);
  uint64_t v12 = (void *)((char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  uint64_t v14 = sub_1000E3A84(*v8, *v12, v5);
  sub_100019F7C(v16);
  sub_100019F7C(v19);
  return v14;
}

uint64_t sub_1000E4ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for OctaneConfigurationManager();
  v30[3] = v8;
  v30[4] = &off_10027C250;
  v30[0] = a3;
  uint64_t v9 = type metadata accessor for OctaneTransactionManager();
  uint64_t v28 = v9;
  uint64_t v29 = &off_10027DAD8;
  v27[0] = a4;
  uint64_t v10 = type metadata accessor for OctaneServer();
  uint64_t v11 = swift_allocObject(v10, 152LL, 7LL);
  uint64_t v12 = sub_100043F18((uint64_t)v30, v8);
  __chkstk_darwin(v12);
  uint64_t v14 = (void *)((char *)&v25[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  uint64_t v16 = sub_100043F18((uint64_t)v27, v28);
  __chkstk_darwin(v16);
  uint64_t v18 = (void *)((char *)&v25[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  uint64_t v20 = *v14;
  uint64_t v21 = *v18;
  v26[3] = v8;
  v26[4] = &off_10027C250;
  v25[4] = &off_10027DAD8;
  v26[0] = v20;
  v25[3] = v9;
  v25[0] = v21;
  swift_weakInit(v11 + 144, 0LL);
  sub_1000E4EAC((uint64_t)v26, v11 + 64);
  sub_1000E4EAC((uint64_t)v25, v11 + 104);
  swift_weakAssign(v11 + 144, 0LL);
  uint64_t v22 = sub_1000D07A0(a1, a2, 0LL);
  swift_retain();
  sub_1000DF310();
  swift_release(v22);
  sub_100019F7C(v25);
  sub_100019F7C(v26);
  sub_100019F7C(v27);
  sub_100019F7C(v30);
  return v22;
}

uint64_t sub_1000E4C8C(void *a1)
{
  return sub_100085DB4(a1, v1);
}

unint64_t sub_1000E4C94()
{
  unint64_t result = qword_1002B0A40;
  if (!qword_1002B0A40)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FAA3C, &type metadata for FailureType);
    atomic_store(result, (unint64_t *)&qword_1002B0A40);
  }

  return result;
}

uint64_t sub_1000E4CD0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000E4D0C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000E4D40@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1000E561C(*(void *)(*(void *)a1 + 16LL), a2);
}

uint64_t sub_1000E4D58@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1000E561C(*(void *)(*(void *)a1 + 24LL), a2);
}

void sub_1000E4D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
}

void sub_1000E4DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
}

uint64_t sub_1000E4DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return sub_1000E3118(a1, a2, a3, a4, *a5, a5[1]);
}

uint64_t sub_1000E4DFC()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1000E4E2C()
{
  return sub_1000E4DF0(v0[2], v0[3], v0[4], v0[5], v0 + 6);
}

uint64_t sub_1000E4E3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000E4E4C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_1000E4E58()
{
}

uint64_t sub_1000E4E64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

void sub_1000E4EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v2;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  sub_10001945C();
}

uint64_t sub_1000E4EEC()
{
  uint64_t v1 = sub_1000175B0(&qword_1002B0A48);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 9) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = v0 + v4;
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v7 = v6 + *(int *)(v1 + 44);
  uint64_t v8 = type metadata accessor for Date(0LL);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + v5 + 584) != 1LL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject(v0, v5 + 873, v3 | 7);
}

uint64_t sub_1000E513C()
{
  uint64_t v1 = *(void *)(sub_1000175B0(&qword_1002B0A48) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1000DD464( v0 + v2,  *(unsigned __int8 *)(v0 + v2 + *(void *)(v1 + 64)),  *(unsigned __int8 *)(v0 + v2 + *(void *)(v1 + 64) + 1),  v0 + ((v2 + *(void *)(v1 + 64) + 9) & 0xFFFFFFFFFFFFFFF8LL));
}

uint64_t sub_1000E518C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1000E51AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_1000E56C8(a1, a2, a3);
  sub_1000354AC(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  sub_10001945C();
}

uint64_t sub_1000E51D8()
{
  unint64_t v1 = v0[12];
  if (v1 >> 60 != 15) {
    sub_10003A9EC(v0[11], v1);
  }
  if (v0[15] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, 225LL, 7LL);
}

uint64_t sub_1000E526C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1000E527C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1000E52A4()
{
}

uint64_t sub_1000E52B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != 1)
  {
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a5);
    return swift_bridgeObjectRelease(a7);
  }

  return result;
}

void sub_1000E52F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_1000E56C8(a1, a2, a3);
  sub_1000354AC(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  sub_10001945C();
}

uint64_t sub_1000E5324()
{
  return sub_1000E53C0((uint64_t (*)(void, void, void, void, void *))sub_1000E4D68);
}

uint64_t sub_1000E533C()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_1000E536C(uint64_t a1)
{
}

uint64_t sub_1000E5384()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1000E53B4()
{
  return sub_1000E53C0((uint64_t (*)(void, void, void, void, void *))sub_1000E4DAC);
}

uint64_t sub_1000E53C0(uint64_t (*a1)(void, void, void, void, void *))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1 + 6);
}

uint64_t sub_1000E53D8()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000E5434()
{
  return sub_1000891E0();
}

uint64_t sub_1000E5470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v5 - 136, v5 - 184, v4, a4, 0LL);
}

uint64_t sub_1000E5484()
{
  return sub_1000891E0();
}

uint64_t sub_1000E54C4(uint64_t a1, ...)
{
  return sub_1000CF360(v2, v1, (uint64_t *)va);
}

uint64_t sub_1000E54D4(uint64_t a1)
{
  return swift_unknownObjectRelease(a1);
}

void sub_1000E54EC(id a1)
{
}

uint64_t sub_1000E5504(uint64_t a1)
{
  *(void *)(a1 + 16) = v2;
  *(_BYTE *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v3;
  *(void *)(a1 + 48) = v1;
  return swift_unknownObjectRetain_n(v1, 2LL);
}

uint64_t sub_1000E5524(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000E5548(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v4 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)((uint64_t *)va, va1, v2 + 4);
}

uint64_t sub_1000E5568(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000E558C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a9, &a10, v10);
}

void sub_1000E55A8(uint64_t a1, _BYTE *a2)
{
  *a2 = 2;
}

uint64_t sub_1000E55B4()
{
  *(void *)(v1 - 184) = v0;
  return swift_errorRetain(v0);
}

uint64_t sub_1000E55C0()
{
  return v0(v1, v2);
}

uint64_t sub_1000E55CC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

  ;
}

char *sub_1000E55E8@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_1000E5608(uint64_t a1, _BYTE *a2)
{
  *a2 = 3;
  return swift_willThrow();
}

uint64_t sub_1000E561C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_1000E5624()
{
  return swift_errorRelease(v0);
}

unint64_t sub_1000E562C(uint64_t a1)
{
  return sub_1000F168C(a1, v1);
}

uint64_t sub_1000E5638()
{
  return swift_errorRelease(*(void *)(v0 - 184));
}

void sub_1000E5640(uint64_t a1, _BYTE *a2)
{
  *a2 = v3;
}

unint64_t sub_1000E564C()
{
  return sub_1000F168C(v1, v0);
}

uint64_t sub_1000E565C(uint64_t a1, uint64_t a2)
{
  return v3;
}

uint64_t sub_1000E5678()
{
  return type metadata accessor for OctaneConfigurationManager();
}

uint64_t sub_1000E5688@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v3 - 80) = a1;
  *(void *)(v3 - 72) = a2;
  *(void *)(v3 - 104) = v2;
  return type metadata accessor for OctaneTransactionManager();
}

unint64_t sub_1000E5698(float a1)
{
  *uint64_t v1 = a1;
  return sub_1000A3784();
}

BOOL sub_1000E56A8(os_log_type_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, os_log_t oslog)
{
  return os_log_type_enabled(oslog, a1);
}

void sub_1000E56B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

uint64_t sub_1000E56C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3(0LL);
}

void sub_1000E56D8()
{
}

uint64_t sub_1000E56E8()
{
  return 1886680168LL;
}

uint64_t sub_1000E56F8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000E5720(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_1000E572C()
{
  return swift_errorRetain(v0);
}

void sub_1000E5734(uint64_t a1@<X8>)
{
  *(void *)(a1 + 64) |= v1;
}

void sub_1000E5748()
{
}

uint64_t sub_1000E5754()
{
  return sub_100034E8C(*(void *)(v0 - 88), *(void *)(v0 - 72));
}

unint64_t sub_1000E5760()
{
  return sub_1000588D4();
}

  ;
}

uint64_t sub_1000E577C()
{
  return Logger.logObject.getter();
}

uint64_t sub_1000E5784()
{
  return sub_1000DF16C(v1, v0);
}

uint64_t sub_1000E5790@<X0>(uint64_t a1@<X8>)
{
  if (v2) {
    return swift_getKeyPath(a1);
  }
  else {
    return swift_getKeyPath(v1);
  }
}

uint64_t sub_1000E579C()
{
  return v1;
}

uint64_t sub_1000E57C0()
{
  return swift_bridgeObjectRelease(v0);
}

void *sub_1000E57CC()
{
  return &protocol witness table for Bool;
}

uint64_t sub_1000E57D8(void *a1)
{
  uint64_t v4 = sub_1000E5AB8();
  dispatch thunk of Decoder.singleValueContainer()(v4);
  if (!v2)
  {
    sub_100019F58(v8, v8[3]);
    uint64_t v5 = sub_1000E5AB8();
    uint64_t v6 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v5);
    char v1 = v6;
    sub_1000CC6FC(v6);
  }

  sub_100019F7C(a1);
  return v1 & 1;
}

uint64_t sub_1000E5910(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100019F58(a1, v3);
  dispatch thunk of Encoder.singleValueContainer()(v9, v3, v4);
  uint64_t v5 = v10;
  uint64_t v6 = v11;
  sub_100043F18((uint64_t)v9, v10);
  uint64_t v7 = dispatch thunk of SingleValueEncodingContainer.encode(_:)(a2, v5, v6);
  return sub_1000CC6FC(v7);
}

uint64_t sub_1000E599C@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000E57D8(a1);
  if (!v2) {
    *a2 = result & 1;
  }
  return result;
}

uint64_t sub_1000E59C8(void *a1)
{
  return sub_1000E5910(a1, *v1);
}

uint64_t sub_1000E59E0(char a1)
{
  return a1 & 1;
}

uint64_t storeEnumTagSinglePayload for FlexiblyDecodableBool(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000E5A34 + 4 * byte_1001FEE95[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000E5A68 + 4 * byte_1001FEE90[v4]))();
}

uint64_t sub_1000E5A68(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E5A70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000E5A78LL);
  }
  return result;
}

uint64_t sub_1000E5A84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000E5A8CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000E5A90(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E5A98(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FlexiblyDecodableBool()
{
  return &type metadata for FlexiblyDecodableBool;
}

uint64_t sub_1000E5AB8()
{
  return v0;
}

uint64_t sub_1000E5ACC(void *a1)
{
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t sub_1000E5AFC(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 4sub_1000B58F0(v0, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t sub_1000E5B60(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 4sub_1000B58F0(v0, 0) = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

uint64_t sub_1000E5C04(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 4sub_1000B58F0(v0, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  return a1;
}

uint64_t sub_1000E5C68(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 58))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      unint64_t v3 = *(void *)(a1 + 16);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_1000E5CBC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 4sub_1000B58F0(v0, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 58) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 58) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }

  return result;
}

void type metadata accessor for ButtonAction()
{
}

void sub_1000E5D2C(uint64_t a1)
{
  v2._rawValue = &off_1002727F8;
  sub_100052314(v2, a1);
  sub_100019344();
  sub_10001945C();
}

uint64_t sub_1000E5D64(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000E5D9C + 4 * byte_1001FEFD0[a1]))( 0xD000000000000016LL,  0x80000001002178C0LL);
}

uint64_t sub_1000E5D9C()
{
  return 7959874LL;
}

uint64_t sub_1000E5DAC()
{
  return 1869901639LL;
}

uint64_t sub_1000E5DBC()
{
  return 0x4165636976726553LL;
}

void sub_1000E5DE0(uint64_t a1)
{
  v2._rawValue = &off_100272878;
  sub_100052314(v2, a1);
  sub_100019344();
  sub_10001945C();
}

uint64_t sub_1000E5E14()
{
  return 1852399981LL;
}

void sub_1000E5E24(uint64_t a1)
{
  v2._rawValue = &off_1002728B0;
  sub_100052314(v2, a1);
  sub_100019344();
  sub_10001945C();
}

uint64_t sub_1000E5E64(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x2E746E756F636361LL;
  }
  else {
    return 0xD00000000000001BLL;
  }
}

void sub_1000E5EAC(char *a1)
{
}

void sub_1000E5EB8()
{
}

void sub_1000E5EC0(uint64_t a1)
{
}

void sub_1000E5EC8(uint64_t a1)
{
}

void sub_1000E5ED0(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = v3;
}

void sub_1000E5EFC(uint64_t *a1@<X8>)
{
  *a1 = sub_1000E5D64(*v1);
  a1[1] = v3;
  sub_10001945C();
}

uint64_t sub_1000E5F20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000E6FCC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000E5F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000E6FCC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_1000E5FD4(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

void sub_1000E6008(void *a1@<X8>)
{
  *a1 = 1852399981LL;
  a1[1] = 0xE400000000000000LL;
}

uint64_t sub_1000E601C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000E7008();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000E6078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000E7008();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_1000E60C4(char *a1, unsigned __int8 *a2)
{
}

void sub_1000E60D0()
{
}

uint64_t sub_1000E60D8(uint64_t a1)
{
  return sub_1000B0EE8(a1, *v1);
}

void sub_1000E60E0(uint64_t a1)
{
}

void sub_1000E60E8(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = v3;
}

void sub_1000E6114(uint64_t *a1@<X8>)
{
  *a1 = sub_1000E5E64(*v1);
  a1[1] = v3;
  sub_10001945C();
}

uint64_t sub_1000E6138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000E7044();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000E6194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000E7044();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t sub_1000E61E0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100272900, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6) {
    return 6LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000E622C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000E6258 + 4 * byte_1001FEFD4[a1]))( 1684957547LL,  0xE400000000000000LL);
}

uint64_t sub_1000E6258()
{
  return 0x6D61726150797562LL;
}

uint64_t sub_1000E6274()
{
  return 0x656D614E6D657469LL;
}

uint64_t sub_1000E628C()
{
  return 7107189LL;
}

uint64_t sub_1000E629C()
{
  return 0x746567726174LL;
}

uint64_t sub_1000E62B0()
{
  return 0x6567726174627573LL;
}

uint64_t sub_1000E62D0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000E62FC + 4 * byte_1001FEFDA[a1]))( 1684957547LL,  0xE400000000000000LL);
}

uint64_t sub_1000E62FC()
{
  return 0x6D61726150797562LL;
}

uint64_t sub_1000E6318()
{
  return 0x656D614E6D657469LL;
}

uint64_t sub_1000E6330()
{
  return 7107189LL;
}

uint64_t sub_1000E6340()
{
  return 0x746567726174LL;
}

uint64_t sub_1000E6354()
{
  return 0x6567726174627573LL;
}

uint64_t sub_1000E6374(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_1000175B0(&qword_1002B0A88);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100019F58(a1, v9);
  unint64_t v11 = sub_1000E69B4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ButtonAction.CodingKeys,  &type metadata for ButtonAction.CodingKeys,  v11,  v9,  v10);
  sub_100054254((uint64_t)v3, (uint64_t)&v33);
  sub_100054254((uint64_t)&v33, (uint64_t)&v30);
  char v29 = 0;
  unint64_t v12 = sub_1000E6AA4();
  sub_1000E7090((uint64_t)&v30, (uint64_t)&v29, v13, (uint64_t)&unk_100282240, v12);
  if (!v2)
  {
    uint64_t v14 = v3[1];
    uint64_t v15 = v3[2];
    char v28 = 1;
    sub_100044D1C(v14, v15, (uint64_t)&v28);
    uint64_t v16 = v3[3];
    uint64_t v17 = v3[4];
    char v27 = 2;
    sub_100044D1C(v16, v17, (uint64_t)&v27);
    uint64_t v18 = v3[5];
    uint64_t v19 = v3[6];
    char v26 = 3;
    sub_100044D1C(v18, v19, (uint64_t)&v26);
    sub_100054254((uint64_t)(v3 + 7), (uint64_t)&v32);
    sub_100054254((uint64_t)&v32, (uint64_t)&v25 + 7);
    BYTE6(v25) = 4;
    unint64_t v20 = sub_1000E6AE0();
    sub_1000E7090((uint64_t)&v25 + 7, (uint64_t)&v25 + 6, v21, (uint64_t)&unk_1002821B0, v20);
    sub_100054254((uint64_t)v3 + 57, (uint64_t)&v31);
    sub_100054254((uint64_t)&v31, (uint64_t)&v25 + 5);
    BYTE4(v25) = 5;
    unint64_t v22 = sub_1000E6B1C();
    sub_1000E7090((uint64_t)&v25 + 5, (uint64_t)&v25 + 4, v23, (uint64_t)&unk_100282120, v22);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000E6570@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_1000175B0(&qword_1002B0A60);
  __chkstk_darwin(v5);
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100019F58(a1, v6);
  unint64_t v8 = sub_1000E69B4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ButtonAction.CodingKeys,  &type metadata for ButtonAction.CodingKeys,  v8,  v6,  v7);
  if (v2) {
    goto LABEL_3;
  }
  v35[0] = 0;
  unint64_t v9 = sub_1000E69F0();
  sub_1000E70B0((uint64_t)&unk_100282240, (uint64_t)v35, v5, (uint64_t)&unk_100282240, v9);
  char v10 = v35[1];
  char v34 = 1;
  uint64_t v11 = sub_1000E70A0((uint64_t)&v34);
  uint64_t v14 = v13;
  uint64_t v28 = v11;
  char v29 = v10;
  char v33 = 2;
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1000E70A0((uint64_t)&v33);
  uint64_t v17 = v16;
  uint64_t v26 = v15;
  uint64_t v27 = a2;
  char v32 = 3;
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_1000E70A0((uint64_t)&v32);
  uint64_t v20 = v19;
  uint64_t v25 = v18;
  v31[0] = 4;
  unint64_t v21 = sub_1000E6A2C();
  swift_bridgeObjectRetain();
  sub_1000E70B0((uint64_t)&unk_1002821B0, (uint64_t)v31, v5, (uint64_t)&unk_1002821B0, v21);
  if (v21)
  {
    sub_1000E7080();
    sub_10003561C();
    sub_100023EF4();
    sub_100024E84();
LABEL_3:
    sub_100019F7C(a1);
    sub_10003561C();
    sub_100023EF4();
    return sub_100024E84();
  }

  char v24 = v31[1];
  v30[0] = 5;
  unint64_t v22 = sub_1000E6A68();
  sub_1000E70B0((uint64_t)&unk_100282120, (uint64_t)v30, v5, (uint64_t)&unk_100282120, v22);
  sub_1000E7080();
  char v23 = v30[9];
  sub_100019F7C(a1);
  sub_100024E84();
  sub_100023EF4();
  uint64_t result = sub_10003561C();
  *(_BYTE *)uint64_t v27 = v29;
  *(void *)(v27 + 8) = v28;
  *(void *)(v27 + 16) = v14;
  *(void *)(v27 + 24) = v26;
  *(void *)(v27 + 32) = v17;
  *(void *)(v27 + 4sub_1000B58F0(v0, 0) = v25;
  *(void *)(v27 + 48) = v20;
  *(_BYTE *)(v27 + 56) = v24;
  *(_BYTE *)(v27 + 57) = v23;
  return result;
}

void sub_1000E6818()
{
  qword_1002EB968 = v0;
}

void sub_1000E683C(char *a1)
{
}

void sub_1000E6848()
{
}

void sub_1000E6850(uint64_t a1)
{
}

void sub_1000E6858(uint64_t a1)
{
}

unint64_t sub_1000E6860@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000E61E0(*a1);
  *a2 = result;
  return result;
}

void sub_1000E688C(uint64_t *a1@<X8>)
{
  *a1 = sub_1000E622C(*v1);
  a1[1] = v3;
  sub_10001945C();
}

uint64_t sub_1000E68B0()
{
  return sub_1000E62D0(*v0);
}

uint64_t sub_1000E68B8@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000E6228(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000E68DC(uint64_t a1)
{
  unint64_t v2 = sub_1000E69B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E6904(uint64_t a1)
{
  unint64_t v2 = sub_1000E69B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000E692C@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    a2[2] = v7[0];
    double result = *(double *)((char *)v7 + 10);
    *(_OWORD *)((char *)a2 + 42) = *(_OWORD *)((char *)v7 + 10);
  }

  return result;
}

uint64_t sub_1000E6974(void *a1)
{
  return sub_1000E6374(a1);
}

unint64_t sub_1000E69B4()
{
  unint64_t result = qword_1002B0A68;
  if (!qword_1002B0A68)
  {
    unint64_t result = swift_getWitnessTable("e.\b", &type metadata for ButtonAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B0A68);
  }

  return result;
}

unint64_t sub_1000E69F0()
{
  unint64_t result = qword_1002B0A70;
  if (!qword_1002B0A70)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FF45C, &unk_100282240);
    atomic_store(result, (unint64_t *)&qword_1002B0A70);
  }

  return result;
}

unint64_t sub_1000E6A2C()
{
  unint64_t result = qword_1002B0A78;
  if (!qword_1002B0A78)
  {
    unint64_t result = swift_getWitnessTable("-.\b", &unk_1002821B0);
    atomic_store(result, (unint64_t *)&qword_1002B0A78);
  }

  return result;
}

unint64_t sub_1000E6A68()
{
  unint64_t result = qword_1002B0A80;
  if (!qword_1002B0A80)
  {
    unint64_t result = swift_getWitnessTable("U.\b", &unk_100282120);
    atomic_store(result, (unint64_t *)&qword_1002B0A80);
  }

  return result;
}

unint64_t sub_1000E6AA4()
{
  unint64_t result = qword_1002B0A98;
  if (!qword_1002B0A98)
  {
    unint64_t result = swift_getWitnessTable("m.\b", &unk_100282240);
    atomic_store(result, (unint64_t *)&qword_1002B0A98);
  }

  return result;
}

unint64_t sub_1000E6AE0()
{
  unint64_t result = qword_1002B0AA8;
  if (!qword_1002B0AA8)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FF3BC, &unk_1002821B0);
    atomic_store(result, (unint64_t *)&qword_1002B0AA8);
  }

  return result;
}

unint64_t sub_1000E6B1C()
{
  unint64_t result = qword_1002B0AB8;
  if (!qword_1002B0AB8)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FF394, &unk_100282120);
    atomic_store(result, (unint64_t *)&qword_1002B0AB8);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for ButtonAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1000E6BA4 + 4 * byte_1001FEFE5[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000E6BD8 + 4 * byte_1001FEFE0[v4]))();
}

uint64_t sub_1000E6BD8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E6BE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000E6BE8LL);
  }
  return result;
}

uint64_t sub_1000E6BF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000E6BFCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1000E6C00(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E6C08(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ButtonAction.CodingKeys()
{
  return &type metadata for ButtonAction.CodingKeys;
}

uint64_t sub_1000E6C24(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000E6C70 + 4 * byte_1001FEFEF[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000E6CA4 + 4 * byte_1001FEFEA[v4]))();
}

uint64_t sub_1000E6CA4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E6CAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000E6CB4LL);
  }
  return result;
}

uint64_t sub_1000E6CC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000E6CC8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000E6CCC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E6CD4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for Subtarget()
{
}

uint64_t sub_1000E6CEC(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1000E6D2C + 4 * byte_1001FEFF4[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000E6D4C + 4 * byte_1001FEFF9[v4]))();
  }
}

_BYTE *sub_1000E6D2C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1000E6D4C(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000E6D54(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000E6D5C(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000E6D64(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000E6D6C(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

void type metadata accessor for Target()
{
}

uint64_t sub_1000E6D84(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000E6DD0 + 4 * byte_1001FF003[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000E6E04 + 4 * byte_1001FEFFE[v4]))();
}

uint64_t sub_1000E6E04(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E6E0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000E6E14LL);
  }
  return result;
}

uint64_t sub_1000E6E20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000E6E28LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000E6E2C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E6E34(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ButtonActionKind()
{
}

unint64_t sub_1000E6E50()
{
  unint64_t result = qword_1002B0AC0;
  if (!qword_1002B0AC0)
  {
    unint64_t result = swift_getWitnessTable("}1\b", &unk_100282240);
    atomic_store(result, (unint64_t *)&qword_1002B0AC0);
  }

  return result;
}

unint64_t sub_1000E6E90()
{
  unint64_t result = qword_1002B0AC8;
  if (!qword_1002B0AC8)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FF1DC, &unk_1002821B0);
    atomic_store(result, (unint64_t *)&qword_1002B0AC8);
  }

  return result;
}

unint64_t sub_1000E6ED0()
{
  unint64_t result = qword_1002B0AD0;
  if (!qword_1002B0AD0)
  {
    unint64_t result = swift_getWitnessTable("=0\b", &unk_100282120);
    atomic_store(result, (unint64_t *)&qword_1002B0AD0);
  }

  return result;
}

unint64_t sub_1000E6F10()
{
  unint64_t result = qword_1002B0AD8;
  if (!qword_1002B0AD8)
  {
    unint64_t result = swift_getWitnessTable("M/\b", &type metadata for ButtonAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B0AD8);
  }

  return result;
}

unint64_t sub_1000E6F50()
{
  unint64_t result = qword_1002B0AE0;
  if (!qword_1002B0AE0)
  {
    unint64_t result = swift_getWitnessTable("%0\b", &type metadata for ButtonAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B0AE0);
  }

  return result;
}

unint64_t sub_1000E6F90()
{
  unint64_t result = qword_1002B0AE8;
  if (!qword_1002B0AE8)
  {
    unint64_t result = swift_getWitnessTable("\r0\b", &type metadata for ButtonAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B0AE8);
  }

  return result;
}

unint64_t sub_1000E6FCC()
{
  unint64_t result = qword_1002B0AF0;
  if (!qword_1002B0AF0)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FF0C4, &unk_100282240);
    atomic_store(result, (unint64_t *)&qword_1002B0AF0);
  }

  return result;
}

unint64_t sub_1000E7008()
{
  unint64_t result = qword_1002B0AF8;
  if (!qword_1002B0AF8)
  {
    unint64_t result = swift_getWitnessTable("\r1\b", &unk_1002821B0);
    atomic_store(result, (unint64_t *)&qword_1002B0AF8);
  }

  return result;
}

unint64_t sub_1000E7044()
{
  unint64_t result = qword_1002B0B00;
  if (!qword_1002B0B00)
  {
    unint64_t result = swift_getWitnessTable("m0\b", &unk_100282120);
    atomic_store(result, (unint64_t *)&qword_1002B0B00);
  }

  return result;
}

uint64_t sub_1000E7080()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1000E7090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(a1, a2, v5, a4, a5);
}

uint64_t sub_1000E70A0(uint64_t a1)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, v1);
}

uint64_t sub_1000E70B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t CircularBuffer.init(initialCapacity:)(unint64_t a1, uint64_t a2)
{
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    sub_100034FD0();
    uint64_t v7 = "Negative value is not representable";
    uint64_t v8 = 35LL;
  }

  else
  {
    if (!HIDWORD(a1))
    {
      sub_1000E764C(a1);
      uint64_t v4 = sub_1000EB9BC();
      return ContiguousArray.init(repeating:count:)(v4);
    }

    sub_100034FD0();
    uint64_t v7 = "Not enough bits to represent the passed value";
    uint64_t v8 = 45LL;
  }

  uint64_t result = sub_100035124((uint64_t)"Fatal error", 11LL, 2LL, (uint64_t)v7, v8, v6, (uint64_t)"Swift/Integers.swift");
  __break(1u);
  return result;
}

void CircularBuffer.count.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 < a2)
  {
    sub_1000EBA84(0LL, a2, a3, a4);
    _s25ASOctaneSupportXPCService4HeapV19underestimatedCountSivg_0();
  }

  sub_10001945C();
}

void CircularBuffer.append(_:)()
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 16);
  uint64_t v6 = *(void *)(type metadata accessor for Optional(0LL, v5) - 8);
  sub_100067F88();
  __chkstk_darwin(v7);
  sub_1000EB780();
  unint64_t v8 = v0[2];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(v1, v3, v5);
  uint64_t v9 = sub_1000EB8C0();
  sub_10001762C(v9, v10, v11, v5);
  sub_1000EB6E8();
  ContiguousArray._makeMutableAndUnique()();
  uint64_t v12 = *v0;
  sub_1000EB130(v8, *v0);
  sub_10002A828( v12 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
  + *(void *)(v6 + 72) * v8,
    v1,
    *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 40));
  CircularBuffer.advanceTailIdx(by:)(1LL);
  if (v0[1] == v0[2]) {
    CircularBuffer._doubleCapacity()();
  }
  sub_100023E74();
}

Swift::Void __swiftcall CircularBuffer.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  uint64_t v4 = *(void *)(v1 + 16);
  sub_1000EBB10();
  sub_1000EB5A0();
  __chkstk_darwin(v5);
  sub_1000EB69C();
  if (keepingCapacity)
  {
    CircularBuffer.count.getter(*v2, v2[1], v2[2], v4);
    CircularBuffer.removeFirst(_:)(v6);
  }

  else
  {
    type metadata accessor for ContiguousArray(0LL);
    ContiguousArray.removeAll(keepingCapacity:)(0);
    uint64_t v7 = sub_1000EB9BC();
    ContiguousArray.append(_:)(v7, v8);
  }

  v2[1] = 0LL;
  v2[2] = 0LL;
  sub_10002A3D4();
}

uint64_t CircularBuffer.first.getter@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (a2 == a3)
  {
    uint64_t v7 = 1LL;
  }

  else
  {
    CircularBuffer.startIndex.getter(a1, a2, a3, a4);
    sub_1000EB588(v8);
    sub_1000EBAC0(a5);
    uint64_t v7 = 0LL;
  }

  return sub_100022718(a5, v7, 1LL, a4);
}

void CircularBuffer.removeFirst()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  sub_1000EBB10();
  sub_1000EB5A0();
  __chkstk_darwin(v6);
  sub_1000EB69C();
  CircularBuffer.first.getter(*(void *)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), v5, v3);
  sub_1000EB7D8(v3, 1LL, v5);
  if (v7)
  {
    __break(1u);
  }

  else
  {
    sub_100085164(a2, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL));
    sub_1000EA308(v2, v5, v8, v9);
    sub_1000193B8();
  }

uint64_t CircularBuffer.capacity.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s25ASOctaneSupportXPCService4HeapV19underestimatedCountSivg_0();
}

BOOL CircularBuffer.isEmpty.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a2 == a3;
}

void CircularBuffer.prepend(_:)()
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 16);
  uint64_t v6 = *(void *)(type metadata accessor for Optional(0LL, v5) - 8);
  sub_100067F88();
  __chkstk_darwin(v7);
  sub_1000EB69C();
  unint64_t v8 = v0[1];
  sub_10009B678();
  CircularBuffer.indexBeforeHeadIdx()();
  sub_1000EB7B8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(v1, v3, v5);
  sub_10001762C(v1, 0LL, 1LL, v5);
  sub_1000EB6E8();
  ContiguousArray._makeMutableAndUnique()();
  uint64_t v9 = *v0;
  sub_1000EB130(v8, *v0);
  sub_10002A828( v9 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
  + *(void *)(v6 + 72) * v8,
    v1,
    *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 40));
  CircularBuffer.advanceHeadIdx(by:)(-1LL);
  if (v0[1] == v0[2]) {
    CircularBuffer._doubleCapacity()();
  }
  sub_10002A580();
}

void CircularBuffer.startIndex.getter(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = CircularBuffer.Index.init(backingIndex:backingCount:backingIndexOfHead:)(a2, v5, a2);
  sub_1000EB588(v6);
  sub_10001945C();
}

void CircularBuffer.subscript.getter(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  unint64_t v6 = (char *)&v8 - v5;
  _s25ASOctaneSupportXPCService4HeapVyxSicig_0();
  sub_1000EB7D8((uint64_t)v6, 1LL, a1);
  if (v7)
  {
    __break(1u);
  }

  else
  {
    sub_100085164(a2, (uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 32LL));
    sub_10002A3D4();
  }

unint64_t CircularBuffer.index(after:)( unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000E7D6C(a1, a2, a3, a4, a5, 1LL);
}

uint64_t CircularBuffer.init()(uint64_t a1)
{
  return CircularBuffer.init(initialCapacity:)(0x10uLL, a1);
}

uint64_t sub_1000E764C(int a1)
{
  unsigned int v1 = __clz(a1 - 1);
  if (v1) {
    unsigned int v2 = 1 << -(char)v1;
  }
  else {
    unsigned int v2 = 0;
  }
  if (a1) {
    return v2;
  }
  else {
    return 1LL;
  }
}

uint64_t sub_1000E7674(uint64_t result)
{
  if (!result) {
    return 1LL;
  }
  if (__OFSUB__(result, 1LL))
  {
    __break(1u);
  }

  else
  {
    unint64_t v1 = __clz(result - 1);
    if (v1) {
      return 1LL << -(char)v1;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t IOError.errnoCode.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t CircularBuffer.tailBackingIndex.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

void CircularBuffer.mask.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

Swift::Void __swiftcall CircularBuffer.advanceHeadIdx(by:)(Swift::Int by)
{
  v4[1] = v5 & v3;
  sub_10001945C();
}

Swift::Int __swiftcall CircularBuffer.indexAdvanced(index:by:)(Swift::Int index, Swift::Int by)
{
  return result;
}

Swift::Void __swiftcall CircularBuffer.advanceTailIdx(by:)(Swift::Int by)
{
  v4[2] = v5 & v3;
  sub_10001945C();
}

Swift::Int __swiftcall CircularBuffer.indexBeforeHeadIdx()()
{
  return result;
}

Swift::Int __swiftcall CircularBuffer.indexBeforeTailIdx()()
{
  return result;
}

uint64_t CircularBuffer.Index.isIndexGEQHeadIndex.getter(unint64_t a1)
{
  return HIBYTE(a1) & 1;
}

uint64_t CircularBuffer.Index.isIndexGEQHeadIndex.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 7) = result;
  return result;
}

uint64_t (*CircularBuffer.Index.isIndexGEQHeadIndex.modify())()
{
  return debugOnly(_:);
}

uint64_t CircularBuffer.Index.backingIndex.getter(uint64_t result)
{
  return result;
}

uint64_t CircularBuffer.Index.init(backingIndex:backingCount:backingIndexOfHead:)( unint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    sub_100034FD0();
    unint64_t v6 = "Negative value is not representable";
    uint64_t v7 = 35LL;
LABEL_8:
    uint64_t result = sub_100035124((uint64_t)"Fatal error", 11LL, 2LL, (uint64_t)v6, v7, v5, (uint64_t)"Swift/Integers.swift");
    __break(1u);
    return result;
  }

  if (HIDWORD(a1))
  {
    sub_100034FD0();
    unint64_t v6 = "Not enough bits to represent the passed value";
    uint64_t v7 = 45LL;
    goto LABEL_8;
  }

  uint64_t v3 = 0x1FFFFFF00000000LL;
  return v3 | a1;
}

uint64_t static CircularBuffer.Index.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0xFFFFFFFFFFFFFFLL) == (a2 & 0xFFFFFFFFFFFFFFLL)) {
    return ((a1 & 0x100000000000000LL) == 0) ^ HIBYTE(a2) & 1u;
  }
  else {
    return 0LL;
  }
}

BOOL static CircularBuffer.Index.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 < (unint64_t)a2;
  if ((a2 & 0x100000000000000LL) != 0) {
    BOOL v2 = 0;
  }
  BOOL v3 = a1 < (unint64_t)a2;
  if ((a2 & 0x100000000000000LL) == 0) {
    BOOL v3 = 1;
  }
  if ((a1 & 0x100000000000000LL) != 0) {
    return v3;
  }
  else {
    return v2;
  }
}

BOOL CircularBuffer.Index.isValidIndex(for:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((~a4 & 0xFFFFFF00000000LL) == 0) {
    return 1LL;
  }
  uint64_t v6 = (a4 >> 24) & 0xFFFF00 | BYTE6(a4);
  CircularBuffer.count.getter(a1, a2, a3, a5);
  return v6 == v7;
}

uint64_t sub_1000E78F8(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E791C( a1,  a2,  a3,  a4,  (uint64_t (*)(unint64_t, unint64_t))static CircularBuffer.Index.< infix(_:_:));
}

uint64_t sub_1000E7910(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E791C( a1,  a2,  a3,  a4,  (uint64_t (*)(unint64_t, unint64_t))static CircularBuffer.Index.== infix(_:_:));
}

uint64_t sub_1000E791C( unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(unint64_t, unint64_t))
{
  if (*((_BYTE *)a1 + 7)) {
    uint64_t v5 = 0x100000000000000LL;
  }
  else {
    uint64_t v5 = 0LL;
  }
  unint64_t v6 = v5 | ((unint64_t)*((unsigned __int8 *)a1 + 6) << 48) | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32) | *a1;
  if (*((_BYTE *)a2 + 7)) {
    uint64_t v7 = 0x100000000000000LL;
  }
  else {
    uint64_t v7 = 0LL;
  }
  return a5( v6,  v7 | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 48) | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32) | *a2);
}

uint64_t sub_1000E796C()
{
  return CircularBuffer.description.getter();
}

uint64_t CircularBuffer.description.getter()
{
  uint64_t v46 = v0;
  uint64_t v47 = v1;
  uint64_t v36 = v2;
  uint64_t v38 = v3;
  uint64_t v39 = v4;
  uint64_t v6 = v5;
  uint64_t v7 = sub_1000EBA84(255LL, v3, v2, v4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, &type metadata for Int, v7, "offset element ", 0LL);
  uint64_t v37 = *(void *)(TupleTypeMetadata2 - 8);
  sub_1000706E4();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v35 - v10;
  type metadata accessor for Optional(0LL, TupleTypeMetadata2);
  sub_1000EB5A0();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v35 - v13;
  uint64_t v44 = 8283LL;
  unint64_t v45 = 0xE200000000000000LL;
  uint64_t v35 = v6;
  v43._countAndFlagsBits = v6;
  uint64_t v15 = type metadata accessor for ContiguousArray(0LL);
  uint64_t v16 = sub_1000EB680((const char *)&protocol conformance descriptor for ContiguousArray<A>);
  Sequence.enumerated()(v15, v16);
  uint64_t v42 = v40;
  uint64_t v17 = type metadata accessor for EnumeratedSequence(0LL, v15, v16);
  ((void (*)(Swift::String *__return_ptr, uint64_t))EnumeratedSequence.makeIterator())(&v43, v17);
  uint64_t v18 = type metadata accessor for EnumeratedSequence.Iterator(0LL, v15, v16);
  ((void (*)(void))EnumeratedSequence.Iterator.next())();
  sub_1000EB7D8((uint64_t)v14, 1LL, TupleTypeMetadata2);
  if (!v19)
  {
    uint64_t v20 = *(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL);
    while (1)
    {
      uint64_t v21 = *(void *)v14;
      uint64_t v22 = *(int *)(TupleTypeMetadata2 + 48);
      *(void *)uint64_t v11 = *(void *)v14;
      uint64_t v23 = v20(&v11[v22], &v14[v22], v7);
      if (v21 == v38) {
        break;
      }
      if (v21 == v36)
      {
        uint64_t v24 = 62LL;
        goto LABEL_7;
      }

unint64_t CircularBuffer.index(_:offsetBy:)( unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = a2 + a1;
  CircularBuffer.mask.getter(a3, a2, a3, a6);
  unint64_t v12 = v11 & v10;
  CircularBuffer.count.getter(a3, a4, a5, a6);
  unint64_t v14 = CircularBuffer.Index.init(backingIndex:backingCount:backingIndexOfHead:)(v12, v13, a4);
  return sub_1000EB588(v14);
}

unint64_t CircularBuffer.index(before:)( unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000E7D6C(a1, a2, a3, a4, a5, -1LL);
}

unint64_t sub_1000E7D6C(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6 = CircularBuffer.index(_:offsetBy:)(a1, a6, a2, a3, a4, a5);
  return sub_1000EB588(v6);
}

void CircularBuffer.subscript.setter()
{
  unsigned int v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = sub_1000EB64C();
  uint64_t v9 = *(void *)(v8 - 8);
  sub_100067F88();
  __chkstk_darwin(v10);
  sub_1000EB780();
  uint64_t v11 = *(void *)(v7 - 8);
  sub_10002A828(v1, v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16));
  uint64_t v12 = sub_1000EB8C0();
  sub_10001762C(v12, v13, v14, v7);
  sub_1000EB85C();
  ContiguousArray._makeMutableAndUnique()();
  uint64_t v15 = *v0;
  sub_1000EB130(v3, v15);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 40))( v15 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
  + *(void *)(v9 + 72) * v3,
    v1,
    v8);
  sub_1000EB7CC(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  sub_100023E74();
}

void CircularBuffer.subscript.modify()
{
  uint64_t v1 = sub_1000EB790();
  unsigned int v2 = sub_1000EB658(v1);
  unsigned int v3 = sub_1000EBB28((uint64_t)v2);
  *(void *)(v0 + 48) = v3;
  sub_1000EBAC0((uint64_t)v3);
  sub_10002A3D4();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v1 = sub_1000EB790();
  unsigned int v2 = sub_1000EB658(v1);
  *(void *)(v0 + 48) = sub_1000EBB28((uint64_t)v2);
  CircularBuffer.subscript.getter();
  sub_10002A3D4();
}

void sub_1000E7EAC()
{
  uint64_t v1 = *v0;
  if ((v2 & 1) != 0)
  {
    sub_1000EB688();
    sub_1000EB994();
    sub_1000EB6AC();
  }

  else
  {
    CircularBuffer.subscript.setter();
  }

  sub_1000EBAC8();
  sub_1000EBA8C();
  sub_1000EB574(v1);
}

void CircularBuffer.endIndex.getter(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v7 = CircularBuffer.Index.init(backingIndex:backingCount:backingIndexOfHead:)(a3, v6, a2);
  sub_1000EB588(v7);
  sub_10001945C();
}

unint64_t CircularBuffer.distance(from:to:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = _s25ASOctaneSupportXPCService4HeapV19underestimatedCountSivg_0();
  if ((a1 & 0x100000000000000LL) != 0)
  {
    if ((a2 & 0x100000000000000LL) != 0) {
      return a2 - (unint64_t)a1;
    }
    else {
      return v8 - a1 + a2;
    }
  }

  else if ((a2 & 0x100000000000000LL) != 0)
  {
    unint64_t v10 = a1 - (unint64_t)a2 + v8;
    unint64_t result = -(uint64_t)v10;
    if (__OFSUB__(0LL, v10)) {
      __break(1u);
    }
  }

  else
  {
    return a2 - (unint64_t)a1;
  }

  return result;
}

void sub_1000E7FD0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_1000E7FDC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_1000E7FE8( uint64_t a1@<X0>, uint64_t (*a2)(void, void, void, void)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a2(*v3, v3[1], v3[2], *(void *)(a1 + 16));
  sub_1000EB634(v5);
  *(_WORD *)(a3 + 4) = v6;
  if (v7) {
    char v8 = 0;
  }
  else {
    char v8 = 1;
  }
  sub_1000EBAA8(v8);
  sub_10001945C();
}

void sub_1000E8028(void *a1, unsigned int *a2, uint64_t a3)
{
  char v7 = malloc(0x28uLL);
  char v8 = v7;
  *a1 = v7;
  uint64_t v9 = 0x100000000000000LL;
  if (!*((_BYTE *)a2 + 7)) {
    uint64_t v9 = 0LL;
  }
  sub_1000E80CC( v7,  v9 | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 48) | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32) | *a2,  *v3,  v3[1],  v3[2],  *(void *)(a3 + 16));
  void v8[4] = v10;
  sub_10002A3D4();
}

void sub_1000E80A4(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  sub_1000EB7C4(v1);
}

void sub_1000E80CC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a6 - 8);
  *a1 = a6;
  a1[1] = v7;
  char v8 = malloc(*(void *)(v7 + 64));
  a1[2] = v8;
  sub_1000EBAC0((uint64_t)v8);
  sub_10002A3D4();
}

void sub_1000E812C(void *a1)
{
  uint64_t v1 = (void *)a1[2];
  (*(void (**)(void *, void))(a1[1] + 8LL))(v1, *a1);
  sub_1000EB7C4(v1);
}

unint64_t sub_1000E8158@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v5 = a1[2];
  uint64_t v6 = *((unsigned __int16 *)a1 + 6);
  uint64_t v7 = *((unsigned __int8 *)a1 + 14);
  int v8 = *((unsigned __int8 *)a1 + 15);
  uint64_t v9 = 0x100000000000000LL;
  if (*((_BYTE *)a1 + 7)) {
    uint64_t v10 = 0x100000000000000LL;
  }
  else {
    uint64_t v10 = 0LL;
  }
  unint64_t v11 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 6) << 48) | v10;
  if (!v8) {
    uint64_t v9 = 0LL;
  }
  unint64_t result = CircularBuffer.subscript.getter( v11,  v5 | (v6 << 32) | (v7 << 48) | v9,  *(void *)v3,  *(void *)(v3 + 8),  *(void *)(v3 + 16),  *(void *)(a2 + 16));
  *a3 = result;
  a3[1] = v13;
  a3[2] = v14;
  return result;
}

unint64_t CircularBuffer.subscript.getter( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10 = sub_1000EB588(v9);
  unint64_t result = sub_1000EBA7C(v10, a1 & 0x1FFFFFFFFFFFFFFLL, a3, v11, v12);
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    sub_1000EB6BC(a3);
    unint64_t result = sub_1000EBA7C( a2 & 0x1FFFFFFFFFFFFFFLL,  v14 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)(HIBYTE(v14) != 0) << 56),  a3,  v15,  v16);
    if ((result & 0x8000000000000000LL) == 0) {
      return swift_retain();
    }
  }

  __break(1u);
  return result;
}

BOOL sub_1000E8294(uint64_t a1)
{
  return CircularBuffer.isEmpty.getter(a1, *(void *)(v1 + 8), *(void *)(v1 + 16));
}

void sub_1000E829C(uint64_t a1)
{
}

void sub_1000E82B0(void *a1@<X8>)
{
  *a1 = 0x300000000000000LL;
}

void sub_1000E82D0(uint64_t a1@<X8>)
{
}

void sub_1000E82DC(uint64_t a1)
{
}

void sub_1000E82E8()
{
}

void (*sub_1000E8314(void *a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  *uint64_t v7 = v3;
  v7[1] = a3;
  uint64_t v8 = *(void *)(a3 + 16);
  _OWORD v7[2] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[3] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[4] = malloc(v10);
  uint64_t v11 = malloc(v10);
  v7[5] = v11;
  *((_DWORD *)v7 + 12) = *(_DWORD *)a2;
  *((_WORD *)v7 + 26) = *(_WORD *)(a2 + 4);
  *((_BYTE *)v7 + 54) = *(_BYTE *)(a2 + 6);
  *((_BYTE *)v7 + 55) = *(_BYTE *)(a2 + 7);
  CircularBuffer.subscript.getter(v8, (uint64_t)v11);
  return sub_1000E83E0;
}

void sub_1000E83E0()
{
  uint64_t v1 = *v0;
  if ((v2 & 1) != 0)
  {
    sub_1000EB688();
    sub_1000EB994();
    sub_1000EB6AC();
  }

  else
  {
    CircularBuffer.subscript.setter();
  }

  sub_1000EBAC8();
  sub_1000EBA8C();
  sub_1000EB574(v1);
}

unint64_t sub_1000E8478(uint64_t *a1, unsigned int *a2)
{
  uint64_t v2 = 0x100000000000000LL;
  if (*((_BYTE *)a2 + 7)) {
    uint64_t v3 = 0x100000000000000LL;
  }
  else {
    uint64_t v3 = 0LL;
  }
  if (!*((_BYTE *)a2 + 15)) {
    uint64_t v2 = 0LL;
  }
  return CircularBuffer.subscript.setter( *a1,  a1[1],  a1[2],  *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 48) | v3,  a2[2] | ((unint64_t)*((unsigned __int16 *)a2 + 6) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 14) << 48) | v2);
}

unint64_t CircularBuffer.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = sub_1000EBA40();
  CircularBuffer.startIndex.getter(v7, v8, v9, v10);
  unint64_t v12 = sub_1000EB588(v11);
  unint64_t result = sub_1000EBA54(v12, a4 & 0x1FFFFFFFFFFFFFFLL, v13, v14, v15);
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v17 = sub_1000EBA40();
    CircularBuffer.endIndex.getter(v17, v18, v19, v20);
    unint64_t result = sub_1000EBA54( a5 & 0x1FFFFFFFFFFFFFFLL,  v21 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)(HIBYTE(v21) != 0) << 56),  v22,  v23,  v24);
    if ((result & 0x8000000000000000LL) == 0)
    {
      sub_1000EB7EC(protocol conformance descriptor for CircularBuffer<A>);
      CircularBuffer.replaceSubrange<A>(_:with:)();
      return swift_release();
    }
  }

  __break(1u);
  return result;
}

void (*sub_1000E85CC(void *a1, unsigned int *a2, uint64_t a3))()
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[3] = v3;
  v7[4] = a3;
  uint64_t v8 = *a2;
  uint64_t v9 = *((unsigned __int16 *)a2 + 2);
  *((_WORD *)v7 + 24) = v9;
  uint64_t v10 = *((unsigned __int8 *)a2 + 6);
  *((_BYTE *)v7 + 52) = v10;
  int v11 = *((unsigned __int8 *)a2 + 7);
  *((_BYTE *)v7 + 53) = v11;
  uint64_t v12 = a2[2];
  *((_DWORD *)v7 + 1sub_1000B58F0(v0, 0) = v8;
  *((_DWORD *)v7 + 11) = v12;
  uint64_t v13 = *((unsigned __int16 *)a2 + 6);
  *((_WORD *)v7 + 25) = v13;
  uint64_t v14 = *((unsigned __int8 *)a2 + 14);
  *((_BYTE *)v7 + 54) = v14;
  uint64_t v15 = v8 | (v9 << 32) | (v10 << 48);
  int v16 = *((unsigned __int8 *)a2 + 15);
  *((_BYTE *)v7 + 55) = v16;
  if (v11) {
    uint64_t v17 = 0x100000000000000LL;
  }
  else {
    uint64_t v17 = 0LL;
  }
  if (v16) {
    uint64_t v18 = 0x100000000000000LL;
  }
  else {
    uint64_t v18 = 0LL;
  }
  *uint64_t v7 = CircularBuffer.subscript.getter( v15 | v17,  v12 | (v13 << 32) | (v14 << 48) | v18,  *(void *)v3,  *(void *)(v3 + 8),  *(void *)(v3 + 16),  *(void *)(a3 + 16));
  v7[1] = v19;
  _OWORD v7[2] = v20;
  return sub_1000E86A0;
}

void sub_1000E86A0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = **v0;
  if ((v3 & 1) != 0)
  {
    uint64_t v4 = swift_retain();
    sub_1000EB724(v4);
    swift_release();
  }

  else
  {
    sub_1000EB724(v2);
  }

  sub_1000EB574(v1);
}

void CircularBuffer.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = malloc(0x38uLL);
  *a1 = v9;
  v9[5] = a4;
  v9[6] = v4;
  void v9[3] = a2;
  v9[4] = a3;
  *uint64_t v9 = CircularBuffer.subscript.getter( a2 & 0x1FFFFFFFFFFFFFFLL,  a3 & 0x1FFFFFFFFFFFFFFLL,  *(void *)v4,  *(void *)(v4 + 8),  *(void *)(v4 + 16),  *(void *)(a4 + 16));
  v9[1] = v10;
  v9[2] = v11;
  sub_10002A3D4();
}

void sub_1000E87A4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = **v0;
  if ((v3 & 1) != 0)
  {
    uint64_t v4 = swift_retain();
    sub_1000EB73C(v4);
    swift_release();
  }

  else
  {
    sub_1000EB73C(v2);
  }

  sub_1000EB574(v1);
}

uint64_t sub_1000E87FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable("a/\b", a3);
  return MutableCollection<>.partition(by:)(a1, a2, a3, WitnessTable, a4);
}

uint64_t sub_1000E8870@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  unint64_t v5 = v2[1];
  uint64_t v6 = v2[2];
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = swift_retain();
  CircularBuffer.startIndex.getter(v8, v5, v6, v7);
  unint64_t v10 = v9;
  uint64_t result = swift_release();
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 24) = v10;
  *(_WORD *)(a2 + 28) = WORD2(v10);
  *(_BYTE *)(a2 + 3sub_1000B58F0(v0, 0) = BYTE6(v10);
  *(_BYTE *)(a2 + 31) = HIBYTE(v10) != 0;
  return result;
}

uint64_t sub_1000E88F8(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for CircularBuffer<A>, a1);
  return Collection.underestimatedCount.getter(a1, WitnessTable);
}

uint64_t sub_1000E892C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for CircularBuffer<A>, a1);
  return Collection._copyToContiguousArray()(a1, WitnessTable);
}

void CircularBuffer.replaceSubrange<A>(_:with:)()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v179 = v5;
  unint64_t v7 = v6;
  uint64_t v9 = v8;
  unint64_t v10 = HIDWORD(v8);
  uint64_t v173 = v11;
  uint64_t v12 = *(void *)(v11 + 16);
  unint64_t v13 = HIWORD(v8);
  uint64_t v14 = HIBYTE(v8) & 1;
  uint64_t v15 = type metadata accessor for Optional(255LL, v12);
  uint64_t v155 = type metadata accessor for Repeated(0LL, v15);
  sub_1000EB5A0();
  __chkstk_darwin(v16);
  sub_1000EBAE4();
  sub_1000EB938(v17);
  uint64_t v181 = v2;
  uint64_t v18 = *(void *)(v2 + 8);
  uint64_t v164 = type metadata accessor for LazySequence(0LL, v4, v18);
  uint64_t v163 = *(void *)(v164 - 8);
  sub_1000706E4();
  __chkstk_darwin(v19);
  sub_1000EBAE4();
  sub_1000EB938(v20);
  uint64_t v162 = type metadata accessor for LazyMapSequence(0LL, v4, v15, v18);
  sub_1000EB5A0();
  __chkstk_darwin(v21);
  sub_1000EBAE4();
  sub_1000EB938(v22);
  Swift::Int v183 = *(void *)(v12 - 8);
  sub_100043FD8();
  __chkstk_darwin(v23);
  sub_1000227D0();
  sub_1000EB938(v24);
  uint64_t v186 = v15;
  uint64_t v182 = *(void *)(v15 - 8);
  sub_100043FD8();
  __chkstk_darwin(v25);
  sub_10009291C();
  uint64_t v170 = v26;
  __chkstk_darwin(v27);
  uint64_t v187 = (uint64_t)v154 - v28;
  uint64_t v177 = *(v4 - 1);
  sub_100043FD8();
  __chkstk_darwin(v29);
  sub_10009291C();
  uint64_t v167 = v30;
  __chkstk_darwin(v31);
  sub_1000EB938((uint64_t)v154 - v32);
  uint64_t v174 = v18;
  uint64_t v180 = (void (*)(void, void, void))v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v18,  v4,  &protocol requirements base descriptor for Sequence,  &associated type descriptor for Sequence.Iterator);
  uint64_t v168 = *(void *)(AssociatedTypeWitness - 8);
  sub_1000706E4();
  __chkstk_darwin(v33);
  sub_1000EBAE4();
  uint64_t v184 = v34;
  uint64_t v37 = type metadata accessor for CircularBuffer.Index(0LL, v12, v35, v36);
  LODWORD(v189) = v9;
  unint64_t v176 = v10;
  WORD2(v189) = v10;
  uint64_t v175 = v13;
  BYTE6(v189) = v13;
  HIBYTE(v189) = v14;
  uint64_t v38 = *v0;
  unint64_t v39 = v0[1];
  uint64_t v178 = v0;
  uint64_t v40 = v0[2];
  uint64_t v41 = sub_10002A75C();
  sub_1000EBA60(v41, v39, v40);
  sub_10002A524();
  sub_1000EBA04();
  WORD2(v188[0]) = v43;
  if (v44) {
    char v45 = 0;
  }
  else {
    char v45 = 1;
  }
  BYTE6(v188[0]) = v42;
  HIBYTE(v188[0]) = v45;
  uint64_t WitnessTable = swift_getWitnessTable("\t0\b", v37);
  if ((static Comparable.>= infix(_:_:)(&v189) & 1) == 0)
  {
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  LODWORD(v189) = v7;
  unint64_t v158 = HIDWORD(v7);
  WORD2(v189) = WORD2(v7);
  unint64_t v159 = HIWORD(v7);
  BYTE6(v189) = BYTE6(v7);
  uint64_t v157 = HIBYTE(v7) & 1;
  HIBYTE(v189) = HIBYTE(v7) & 1;
  uint64_t v47 = sub_10002A75C();
  uint64_t v165 = v40;
  CircularBuffer.endIndex.getter(v47, v39, v40, v12);
  sub_10002A524();
  sub_1000EBA04();
  WORD2(v188[0]) = v49;
  if (v44) {
    char v50 = 0;
  }
  else {
    char v50 = 1;
  }
  BYTE6(v188[0]) = v48;
  HIBYTE(v188[0]) = v50;
  uint64_t v172 = WitnessTable;
  if ((static Comparable.<= infix(_:_:)(&v189) & 1) == 0) {
    goto LABEL_32;
  }
  uint64_t v171 = v37;
  unint64_t v156 = v7;
  uint64_t v51 = v7 & 0x1FFFFFFFFFFFFFFLL;
  sub_10002A75C();
  unint64_t v54 = sub_1000EBA7C(v9 & 0x1FFFFFFFFFFFFFFLL, v7 & 0x1FFFFFFFFFFFFFFLL, v38, v52, v53);
  sub_10002A524();
  uint64_t v55 = v179;
  uint64_t v56 = v180;
  if (v54 == dispatch thunk of Collection.count.getter(v180, v181))
  {
    (*(void (**)(uint64_t, uint64_t, void))(v177 + 16))(v166, v55, v56);
    uint64_t v57 = v174;
    dispatch thunk of Sequence.makeIterator()(v56, v174);
    uint64_t v58 = v57;
    uint64_t v59 = AssociatedTypeWitness;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v58,  v56,  AssociatedTypeWitness,  &protocol requirements base descriptor for Sequence,  &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    uint64_t v61 = v187;
    uint64_t v181 = AssociatedConformanceWitness;
    dispatch thunk of IteratorProtocol.next()(v59, AssociatedConformanceWitness);
    uint64_t v62 = v61;
    sub_1000EB7D8(v61, 1LL, v12);
    uint64_t v63 = v178;
    uint64_t v64 = v170;
    uint64_t v65 = v169;
    if (!v44)
    {
      uint64_t v180 = *(void (**)(void, void, void))(v183 + 32);
      Swift::Int v66 = v183;
      do
      {
        v180(v65, v62, v12);
        unsigned int v67 = v9;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v64, v65, v12);
        uint64_t v68 = sub_1000EB8C0();
        sub_10001762C(v68, v69, v70, v12);
        type metadata accessor for ContiguousArray(0LL);
        ContiguousArray._makeMutableAndUnique()();
        sub_1000EB130(v9, *v63);
        sub_1000EB908();
        sub_100085164( v71 + v72 * v9,  v64,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 40));
        uint64_t v74 = *v63;
        uint64_t v75 = v63[1];
        uint64_t v9 = v63[2];
        ChannelPipeline.syncOperations.getter();
        LODWORD(v9) = CircularBuffer.index(after:)(v67, v74, v75, v9, v12);
        sub_100024F0C();
        (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v65, v12);
        dispatch thunk of IteratorProtocol.next()(AssociatedTypeWitness, v181);
        uint64_t v62 = v187;
        sub_1000EB7D8(v187, 1LL, v12);
      }

      while (!v44);
    }

    (*(void (**)(uint64_t, uint64_t))(v168 + 8))(v184, AssociatedTypeWitness);
    goto LABEL_30;
  }

  uint64_t AssociatedTypeWitness = v9 & 0x1FFFFFFFFFFFFFFLL;
  uint64_t v76 = sub_10002A75C();
  uint64_t v77 = v39;
  uint64_t v78 = v55;
  uint64_t v79 = v54;
  uint64_t v80 = v12;
  CircularBuffer.count.getter(v76, v77, v165, v12);
  uint64_t v82 = v81;
  sub_10002A524();
  (*(void (**)(uint64_t, uint64_t, void))(v177 + 16))(v167, v78, v56);
  uint64_t v187 = v79;
  if (v79 == v82)
  {
    uint64_t v83 = v181;
    char v84 = dispatch thunk of Collection.isEmpty.getter(v56, v181);
    sub_1000EB868();
    if ((v84 & 1) != 0)
    {
      CircularBuffer.removeSubrange(_:)();
LABEL_30:
      sub_10002A580();
      return;
    }
  }

  else
  {
    sub_1000EB868();
    uint64_t v83 = v181;
  }

  uint64_t v184 = v51;
  uint64_t v85 = v186;
  uint64_t v86 = static Array._allocateUninitialized(_:)(0LL, v186);
  uint64_t v192 = ContiguousArray.init(arrayLiteral:)(v86, v85);
  uint64_t v87 = *v178;
  unint64_t v88 = v178[1];
  uint64_t v89 = v178[2];
  uint64_t v90 = sub_10002A75C();
  CircularBuffer.count.getter(v90, v88, v89, v80);
  uint64_t v92 = v91;
  sub_10002A524();
  uint64_t v93 = dispatch thunk of Collection.count.getter(v180, v83);
  uint64_t v94 = v92 + v93;
  if (__OFADD__(v92, v93)) {
    goto LABEL_33;
  }
  BOOL v95 = __OFSUB__(v94, v187);
  uint64_t v96 = v94 - v187;
  if (v95)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  uint64_t v97 = v96 + 1;
  if (__OFADD__(v96, 1LL))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v98 = sub_10002A75C();
  uint64_t v99 = v80;
  uint64_t v102 = CircularBuffer.capacity.getter(v98, v100, v101, v80);
  sub_10002A524();
  uint64_t v103 = sub_1000E7674(v97);
  if (v103 <= v102) {
    Swift::Int v104 = v102;
  }
  else {
    Swift::Int v104 = v103;
  }
  uint64_t v187 = type metadata accessor for ContiguousArray(0LL);
  ContiguousArray.reserveCapacity(_:)(v104);
  uint64_t v105 = sub_10002A75C();
  sub_1000EBA60(v105, v88, v89);
  unint64_t v107 = v106;
  sub_10002A524();
  LODWORD(v189) = v107;
  WORD2(v189) = WORD2(v107);
  BYTE6(v189) = BYTE6(v107);
  HIBYTE(v189) = HIBYTE(v107) != 0;
  LODWORD(v188[0]) = v9;
  WORD2(v188[0]) = v176;
  BYTE6(v188[0]) = v175;
  HIBYTE(v188[0]) = (v9 & 0x100000000000000uLL) >> 56;
  if ((static Comparable.<= infix(_:_:)(&v189) & 1) == 0) {
    goto LABEL_36;
  }
  Swift::Int v183 = v104;
  unint64_t v189 = sub_1000EBAB4( v107 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)(HIBYTE(v107) != 0) << 56),  AssociatedTypeWitness,  v87,  v88);
  uint64_t v190 = v108;
  uint64_t v191 = v109;
  uint64_t v110 = v173;
  uint64_t v111 = sub_1000EB680(protocol conformance descriptor for CircularBuffer<A>);
  Sequence.lazy.getter(v188, v110, v111);
  sub_10002A51C();
  sub_1000EBA94();
  uint64_t v112 = (void *)sub_100019310((uint64_t)&unk_100282330, 40LL);
  uint64_t v113 = v180;
  v112[2] = v99;
  v112[3] = v113;
  uint64_t v114 = v181;
  v112[4] = v181;
  uint64_t v115 = (void *)sub_100019310((uint64_t)&unk_100282358, 56LL);
  v115[2] = v99;
  v115[3] = v113;
  v115[4] = v114;
  v115[5] = sub_1000EB178;
  v115[6] = v112;
  uint64_t v116 = type metadata accessor for LazySequence(0LL, v110, v111);
  swift_getWitnessTable((const char *)&protocol conformance descriptor for LazySequence<A>, v116);
  sub_1000EBA68();
  *(void *)(v117 - 256) = v116;
  uint64_t v118 = v186;
  unint64_t v176 = v119;
  ((void (*)(void))LazySequenceProtocol.map<A>(_:))();
  sub_10002A51C();
  swift_release();
  sub_1000EB920();
  uint64_t AssociatedTypeWitness = v111;
  uint64_t v120 = type metadata accessor for LazyMapSequence(0LL, v110, v118, v111);
  uint64_t v121 = sub_1000EB680((const char *)&protocol conformance descriptor for LazyMapSequence<A, B>);
  uint64_t v122 = v187;
  uint64_t v175 = v120;
  uint64_t v169 = v121;
  ContiguousArray.append<A>(contentsOf:)(v188, v187, v120, v121);
  uint64_t v123 = v161;
  Sequence.lazy.getter(v161, v113, v174);
  uint64_t v124 = (void *)sub_100019310((uint64_t)&unk_100282380, 40LL);
  v124[2] = v99;
  v124[3] = v113;
  v124[4] = v114;
  __int128 v125 = (void *)sub_100019310((uint64_t)&unk_1002823A8, 56LL);
  v125[2] = v99;
  v125[3] = v113;
  v125[4] = v114;
  v125[5] = sub_1000EB178;
  v125[6] = v124;
  uint64_t v126 = v164;
  uint64_t v127 = sub_1000EB680((const char *)&protocol conformance descriptor for LazySequence<A>);
  uint64_t v128 = v160;
  LazySequenceProtocol.map<A>(_:)(sub_1000EB17C, v125, v126, v118, v127);
  sub_10002A51C();
  (*(void (**)(void *, uint64_t))(v163 + 8))(v123, v126);
  uint64_t v129 = v162;
  uint64_t v130 = sub_1000EB680((const char *)&protocol conformance descriptor for LazyMapSequence<A, B>);
  ContiguousArray.append<A>(contentsOf:)(v128, v122, v129, v130);
  uint64_t v131 = *v178;
  unint64_t v132 = v178[1];
  unint64_t v133 = v178[2];
  uint64_t v134 = sub_10002A75C();
  CircularBuffer.endIndex.getter(v134, v132, v133, v99);
  unint64_t v136 = v135;
  sub_10002A524();
  LODWORD(v189) = v156;
  WORD2(v189) = v158;
  BYTE6(v189) = v159;
  HIBYTE(v189) = v157;
  LODWORD(v188[0]) = v136;
  WORD2(v188[0]) = WORD2(v136);
  BYTE6(v188[0]) = BYTE6(v136);
  HIBYTE(v188[0]) = HIBYTE(v136) != 0;
  if ((static Comparable.<= infix(_:_:)(&v189) & 1) != 0)
  {
    unint64_t v189 = sub_1000EBAB4(v184, v136 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)(HIBYTE(v136) != 0) << 56), v131, v132);
    uint64_t v190 = v137;
    uint64_t v191 = v138;
    Sequence.lazy.getter(v188, v173, AssociatedTypeWitness);
    sub_10002A51C();
    sub_1000EBA94();
    uint64_t v139 = (void *)sub_100019310((uint64_t)&unk_1002823D0, 40LL);
    v139[2] = v99;
    v139[3] = v113;
    v139[4] = v114;
    int v140 = (void *)sub_100019310((uint64_t)&unk_1002823F8, 56LL);
    v140[2] = v99;
    void v140[3] = v113;
    v140[4] = v114;
    v140[5] = sub_1000EB178;
    v140[6] = v139;
    sub_1000EBA68();
    uint64_t v142 = v186;
    LazySequenceProtocol.map<A>(_:)(v143, v144, *(void *)(v141 - 256), v186, v176);
    sub_10002A51C();
    swift_release();
    sub_1000EB920();
    ContiguousArray.append<A>(contentsOf:)(v188, v187, v175, v169);
    ChannelPipeline.syncOperations.getter();
    uint64_t v145 = _s25ASOctaneSupportXPCService4HeapV19underestimatedCountSivg_0();
    sub_100024F0C();
    Swift::Int v146 = v183 - v145;
    if (v183 - v145 >= 1)
    {
      uint64_t v147 = v170;
      sub_10001762C(v170, 1LL, 1LL, v99);
      uint64_t v148 = v154[1];
      repeatElement<A>(_:count:)(v147, v146, v142);
      (*(void (**)(uint64_t, uint64_t))(v182 + 8))(v147, v142);
      uint64_t v149 = v155;
      uint64_t v150 = sub_1000EB680((const char *)&protocol conformance descriptor for Repeated<A>);
      ContiguousArray.append<A>(contentsOf:)(v148, v187, v149, v150);
    }

    uint64_t v151 = v192;
    uint64_t v152 = v178;
    ChannelPipeline.syncOperations.getter();
    sub_10002A51C();
    *uint64_t v152 = v151;
    v152[1] = 0LL;
    uint64_t v153 = _s25ASOctaneSupportXPCService4HeapV19underestimatedCountSivg_0();
    sub_100024F0C();
    v152[2] = v153 - v146;
    goto LABEL_30;
  }

void sub_1000E95E8(uint64_t a1@<X8>)
{
}

void sub_1000E95F4(uint64_t a1@<X8>)
{
  if (v8) {
    uint64_t v7 = 0LL;
  }
  uint64_t v9 = v3(v7 | (v6 << 48) | (v5 << 32) | v4, v2);
  sub_1000EB634(v9);
  *(_WORD *)(a1 + 4) = v10;
  if (v8) {
    char v11 = 0;
  }
  else {
    char v11 = 1;
  }
  sub_1000EBAA8(v11);
  sub_10001945C();
}

void sub_1000E9644(uint64_t a1)
{
}

void sub_1000E9650(uint64_t a1)
{
  if (v8) {
    uint64_t v7 = 0LL;
  }
  uint64_t v9 = v2(v7 | (v6 << 48) | (v5 << 32) | v4, v3);
  sub_1000EB634(v9);
  *(_WORD *)(a1 + 4) = v10;
  if (v8) {
    char v11 = 0;
  }
  else {
    char v11 = 1;
  }
  sub_1000EBAA8(v11);
  sub_10001945C();
}

void sub_1000E96A0(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6 = CircularBuffer.index(_:offsetBy:)(*a1, a2, *v4, v4[1], v4[2], *(void *)(a3 + 16));
  sub_1000EB634(v6);
  *(_WORD *)(a4 + 4) = v7;
  if (v8) {
    char v9 = 0;
  }
  else {
    char v9 = 1;
  }
  sub_1000EBAA8(v9);
  sub_10001945C();
}

uint64_t sub_1000E9704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable("y/\b", a4);
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)(a1, a2, a3, a4, WitnessTable);
}

unint64_t sub_1000E9768(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*((_BYTE *)a1 + 7)) {
    uint64_t v6 = 0x100000000000000LL;
  }
  else {
    uint64_t v6 = 0LL;
  }
  unint64_t v7 = v6 | ((unint64_t)*((unsigned __int8 *)a1 + 6) << 48) | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32) | *a1;
  if (*((_BYTE *)a2 + 7)) {
    uint64_t v8 = 0x100000000000000LL;
  }
  else {
    uint64_t v8 = 0LL;
  }
  return CircularBuffer.distance(from:to:)( v7,  v8 | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 48) | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32) | *a2,  *v5,  a4,  a5,  *(void *)(a3 + 16));
}

Swift::Void __swiftcall CircularBuffer._doubleCapacity()()
{
  uint64_t v2 = v0;
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = type metadata accessor for Optional(0LL, v4);
  uint64_t v6 = *(void *)(v5 - 8);
  sub_100067F88();
  __chkstk_darwin(v7);
  sub_1000EB780();
  uint64_t v8 = sub_1000EBB04();
  sub_1000EB5A0();
  __chkstk_darwin(v9);
  char v11 = (char *)&v28 - v10;
  uint64_t v13 = *v2;
  uint64_t v12 = v2[1];
  uint64_t v33 = v2[2];
  Swift::Int v16 = 2 * CircularBuffer.capacity.getter(v13, v14, v15, v4);
  uint64_t v17 = sub_1000EB850();
  uint64_t v39 = ContiguousArray.init(arrayLiteral:)(v17, v5);
  if (v16 < 1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v18 = sub_1000EB6E8();
    uint64_t v31 = v11;
    uint64_t v32 = v8;
    uint64_t v19 = v18;
    ContiguousArray.reserveCapacity(_:)(v16);
    *(void *)&__int128 v34 = v13;
    uint64_t v36 = v12;
    sub_10007F094();
    uint64_t v30 = v6;
    swift_getWitnessTable((const char *)&protocol conformance descriptor for ContiguousArray<A>, v19);
    sub_1000EBA1C(&qword_1002B0B10, v20, (const char *)&protocol conformance descriptor for PartialRangeFrom<A>);
    uint64_t v21 = sub_1000EB944();
    MutableCollection.subscript.getter(v21);
    uint64_t v22 = sub_1000EB7A4();
    swift_getWitnessTable((const char *)&protocol conformance descriptor for ArraySlice<A>, v22);
    uint64_t v29 = v4;
    sub_1000EB754();
    *(void *)&__int128 v34 = v13;
    uint64_t v36 = v33;
    sub_10007F094();
    sub_1000EBA1C(qword_1002B0B20, v23, (const char *)&protocol conformance descriptor for PartialRangeUpTo<A>);
    uint64_t v24 = sub_1000EB944();
    MutableCollection.subscript.getter(v24);
    __int128 v34 = v37;
    __int128 v35 = v38;
    sub_1000EB754();
    ChannelPipeline.syncOperations.getter();
    _s25ASOctaneSupportXPCService4HeapV19underestimatedCountSivg_0();
    sub_100024F0C();
    sub_10001762C(v1, 1LL, 1LL, v29);
    uint64_t v25 = v31;
    sub_1000EBB1C(v1);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v1, v5);
    uint64_t v26 = v32;
    uint64_t v27 = sub_1000EB7EC((const char *)&protocol conformance descriptor for Repeated<A>);
    ContiguousArray.append<A>(contentsOf:)(v25, v19, v26, v27);
    sub_1000EB8B0();
    *uint64_t v2 = (uint64_t)&v39;
    sub_10002A580();
  }

Swift::Bool __swiftcall CircularBuffer.verifyInvariants()()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = sub_1000EBA84(0LL, v5, v3, v1);
  uint64_t v10 = *(void *)(v9 - 8);
  sub_100067F88();
  __chkstk_darwin(v11);
  sub_1000EB780();
  if (v6 == v4) {
    return 1;
  }
  do
  {
    _s25ASOctaneSupportXPCService4HeapVyxSicig_0();
    int v13 = sub_10001D158(v0, 1LL, v2);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0, v9);
    BOOL v16 = v13 == 1;
    Swift::Bool v12 = v13 != 1;
    if (v16) {
      break;
    }
    CircularBuffer.mask.getter(v8, v14, v15, v2);
    uint64_t v6 = v17 & (v6 + 1);
  }

  while (v6 != v4);
  return v12;
}

Swift::Void __swiftcall CircularBuffer._resizeAndFlatten(newCapacity:)(Swift::Int newCapacity)
{
  uint64_t v3 = v1;
  Swift::Int v5 = v4;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = type metadata accessor for Optional(0LL, v7);
  uint64_t v9 = *(void *)(v8 - 8);
  sub_100067F88();
  __chkstk_darwin(v10);
  Swift::Bool v12 = (char *)v39 - v11;
  uint64_t v13 = sub_1000EBB04();
  sub_1000EB5A0();
  __chkstk_darwin(v14);
  sub_1000EB69C();
  uint64_t v15 = sub_1000EB850();
  uint64_t v49 = ContiguousArray.init(arrayLiteral:)(v15, v8);
  if (v5 < 1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v42 = v2;
    uint64_t v43 = v7;
    uint64_t v16 = sub_1000EB6E8();
    ContiguousArray.reserveCapacity(_:)(v5);
    uint64_t v17 = v3[1];
    uint64_t v18 = v3[2];
    uint64_t v19 = *v3;
    if ((uint64_t)v18 >= (uint64_t)v17)
    {
      *(void *)&__int128 v47 = ContiguousArray.subscript.getter();
      *((void *)&v47 + 1) = v33;
      *(void *)&__int128 v48 = v34;
      *((void *)&v48 + 1) = v35;
      uint64_t v36 = type metadata accessor for ArraySlice(0LL, v8);
      uint64_t WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for ArraySlice<A>, v36);
      uint64_t v29 = &v47;
      uint64_t v30 = v16;
      uint64_t v31 = v36;
    }

    else
    {
      *(void *)&__int128 v44 = *v3;
      uint64_t v46 = v17;
      sub_10007F094();
      uint64_t v40 = v9;
      swift_getWitnessTable((const char *)&protocol conformance descriptor for ContiguousArray<A>, v16);
      v39[1] = v5;
      sub_1000EBA1C(&qword_1002B0B10, v20, (const char *)&protocol conformance descriptor for PartialRangeFrom<A>);
      uint64_t v21 = sub_1000EB95C();
      MutableCollection.subscript.getter(v21);
      uint64_t v22 = sub_1000EB7A4();
      swift_getWitnessTable((const char *)&protocol conformance descriptor for ArraySlice<A>, v22);
      uint64_t v41 = v13;
      uint64_t v23 = sub_1000EB8F0();
      ContiguousArray.append<A>(contentsOf:)(v23, v24, v25, v26);
      *(void *)&__int128 v44 = v19;
      uint64_t v46 = v18;
      sub_10007F094();
      sub_1000EBA1C(qword_1002B0B20, v27, (const char *)&protocol conformance descriptor for PartialRangeUpTo<A>);
      uint64_t v28 = sub_1000EB95C();
      MutableCollection.subscript.getter(v28);
      __int128 v44 = v47;
      __int128 v45 = v48;
      uint64_t v29 = (__int128 *)sub_1000EB8F0();
      uint64_t v9 = v40;
      uint64_t v13 = v41;
    }

    ContiguousArray.append<A>(contentsOf:)(v29, v30, v31, WitnessTable);
    ChannelPipeline.syncOperations.getter();
    _s25ASOctaneSupportXPCService4HeapV19underestimatedCountSivg_0();
    sub_100024F0C();
    sub_10001762C((uint64_t)v12, 1LL, 1LL, v43);
    uint64_t v37 = v42;
    sub_1000EBB1C((uint64_t)v12);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    uint64_t v38 = sub_1000EBA24((const char *)&protocol conformance descriptor for Repeated<A>);
    ContiguousArray.append<A>(contentsOf:)(v37, v16, v13, v38);
    sub_1000EB8B0();
    *uint64_t v3 = &v49;
    sub_10002A580();
  }

void CircularBuffer.subscript.getter()
{
  uint64_t v2 = v1;
  CircularBuffer.startIndex.getter(v3, v4, v5, v6);
  sub_1000EB7F4(v7);
  sub_1000EBA2C();
  unint64_t v14 = CircularBuffer.index(_:offsetBy:)(v8, v9, v10, v11, v12, v13);
  sub_1000EB588(v14);
  CircularBuffer.subscript.getter(v0, v2);
}

void CircularBuffer.subscript.setter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v21;
  a20 = v22;
  uint64_t v24 = v23;
  uint64_t v26 = *(void *)(v25 + 16);
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v23);
  uint64_t v29 = (char *)&a9 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = *v20;
  unint64_t v31 = v20[1];
  uint64_t v32 = v20[2];
  CircularBuffer.startIndex.getter(*v20, v31, v32, v26);
  unsigned int v34 = sub_1000EB7F4(v33);
  CircularBuffer.index(_:offsetBy:)(v34, v35, v30, v31, v32, v26);
  sub_10002A828((uint64_t)v29, v24, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 16));
  CircularBuffer.subscript.setter();
  sub_1000EB7CC(*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
  sub_10002A580();
}

#error "1000E9EF0: call analysis failed (funcsize=27)"
Swift::Void __swiftcall CircularBuffer.removeFirst(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  sub_1000353E0();
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 16);
  sub_1000EB64C();
  sub_100067F88();
  __chkstk_darwin(v6);
  sub_1000EB9F4();
  unint64_t v7 = *(void *)(v1 + 8);
  unsigned int v8 = *(void *)(v1 + 16);
  uint64_t v9 = sub_10009B678();
  CircularBuffer.count.getter(v9, v7, v8, v5);
  sub_1000EB7B8();
  if (v8 < v3)
  {
    __break(1u);
    goto LABEL_8;
  }

  if (v3 < 0)
  {
LABEL_8:
    __break(1u);
    return;
  }

  if (v3)
  {
    sub_1000EB85C();
    ContiguousArray._makeMutableAndUnique()();
    ContiguousArray._makeMutableAndUnique()();
    do
    {
      sub_1000EB82C();
      sub_1000EB5F0();
      uint64_t v10 = v7 + 1;
      uint64_t v11 = swift_retain();
      sub_1000EB878(v11, v12, v13);
      uint64_t v15 = v14;
      sub_10009B4FC();
      unint64_t v7 = v15 & v10;
      --v3;
    }

    while (v3);
  }

  *(void *)(v1 + 8) = v7;
  sub_10002A580();
}

uint64_t CircularBuffer.modify<A>(_:_:)( unsigned int a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 16);
  unint64_t v7 = a1;
  uint64_t v8 = type metadata accessor for Optional(255LL, v6);
  type metadata accessor for ContiguousArray(0LL);
  ContiguousArray._makeMutableAndUnique()();
  uint64_t v9 = *v4;
  sub_1000EB130(v7, v9);
  uint64_t v10 = v9
  uint64_t result = sub_10001D158(v10, 1LL, v6);
  if ((_DWORD)result != 1) {
    return a2(v10);
  }
  __break(1u);
  return result;
}

void sub_1000EA09C(void *a1@<X8>)
{
  v2._countAndFlagsBits = 32LL;
  v2._object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
}

uint64_t CircularBuffer.popFirst()(uint64_t a1)
{
  if (v4 < 1)
  {
    uint64_t v5 = 1LL;
  }

  else
  {
    CircularBuffer.removeFirst()(v3, v1);
    uint64_t v5 = 0LL;
  }

  return sub_100022718(v1, v5, 1LL, v2);
}

uint64_t CircularBuffer.popLast()(uint64_t a1)
{
  if (v4 < 1)
  {
    uint64_t v5 = 1LL;
  }

  else
  {
    CircularBuffer.removeLast()(v3, v1);
    uint64_t v5 = 0LL;
  }

  return sub_100022718(v1, v5, 1LL, v2);
}

void CircularBuffer.removeLast()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 16);
  sub_1000EB64C();
  sub_1000EB5A0();
  __chkstk_darwin(v7);
  sub_1000EB9F4();
  uint64_t v8 = sub_1000EBA24("a/\b");
  BidirectionalCollection.last.getter(a1, v8);
  sub_1000EB7D8(v3, 1LL, v6);
  if (v9)
  {
    __break(1u);
  }

  else
  {
    sub_10002A828(a2, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL));
    sub_1000EA338(v2, v6, v10, v11);
    sub_10002A3D4();
  }

Swift::Void __swiftcall CircularBuffer.removeLast(_:)(Swift::Int a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v4 + 16);
  sub_1000EB64C();
  sub_100067F88();
  __chkstk_darwin(v6);
  sub_1000EB9F4();
  uint64_t v7 = *(void *)(v1 + 8);
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v9 = sub_10009B678();
  CircularBuffer.count.getter(v9, v7, v8, v5);
  sub_1000EB7B8();
  if (v7 < v3)
  {
    __break(1u);
    goto LABEL_8;
  }

  if (v3 < 0)
  {
LABEL_8:
    __break(1u);
    return;
  }

  if (v3)
  {
    sub_1000EB85C();
    ContiguousArray._makeMutableAndUnique()();
    ContiguousArray._makeMutableAndUnique()();
    do
    {
      uint64_t v10 = v8 - 1;
      uint64_t v11 = swift_retain();
      sub_1000EB878(v11, v12, v13);
      uint64_t v15 = v14;
      sub_10009B4FC();
      uint64_t v8 = v15 & v10;
      sub_1000EB82C();
      sub_1000EB5F0();
      --v3;
    }

    while (v3);
  }

  *(void *)(v1 + 16) = v8;
  sub_10002A580();
}

void sub_1000EA308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1000EA338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void CircularBuffer.removeSubrange(_:)()
{
  unint64_t v2 = v1;
  uint64_t v41 = v4;
  uint64_t v42 = v3;
  unint64_t v5 = HIDWORD(v1);
  unint64_t v6 = HIWORD(v1);
  uint64_t v7 = *(void *)(v4 + 16);
  uint64_t v40 = *(void *)(v7 - 8);
  sub_100043FD8();
  __chkstk_darwin(v8);
  sub_1000227D0();
  uint64_t v11 = type metadata accessor for CircularBuffer.Index(0LL, v7, v9, v10);
  LODWORD(v44) = v2;
  WORD2(v44) = v5;
  uint64_t v43 = v0;
  BYTE6(v44) = v6;
  HIBYTE(v44) = HIBYTE(v2) & 1;
  uint64_t v12 = *v0;
  uint64_t v39 = v0 + 1;
  uint64_t v13 = sub_1000EB76C();
  CircularBuffer.startIndex.getter(v13, v14, v15, v16);
  sub_1000EB9A4(v17);
  swift_getWitnessTable("\t0\b", v11);
  uint64_t v18 = sub_1000EB880();
  if ((static Comparable.>= infix(_:_:)(v18) & 1) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }

  LODWORD(v44) = v2;
  WORD2(v44) = v5;
  BYTE6(v44) = v6;
  HIBYTE(v44) = HIBYTE(v2) & 1;
  uint64_t v19 = sub_1000EB76C();
  CircularBuffer.endIndex.getter(v19, v20, v21, v22);
  sub_1000EB9A4(v23);
  uint64_t v24 = sub_1000EB880();
  if ((static Comparable.<= infix(_:_:)(v24) & 1) == 0)
  {
LABEL_10:
    __break(1u);
    return;
  }

  uint64_t v27 = v2 & 0x1FFFFFFFFFFFFFFLL;
  unint64_t v28 = CircularBuffer.distance(from:to:)(v42 & 0x1FFFFFFFFFFFFFFLL, v2 & 0x1FFFFFFFFFFFFFFLL, v12, v25, v26, v7);
  if (v28 == 1)
  {
    CircularBuffer.remove(at:)();
    sub_1000EB7CC(*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8));
  }

  else
  {
    unint64_t v29 = v28;
    uint64_t v30 = sub_1000EB76C();
    CircularBuffer.count.getter(v30, v31, v32, v33);
    if (v34 == v29)
    {
      sub_1000EB64C();
      unint64_t v35 = _s25ASOctaneSupportXPCService4HeapV19underestimatedCountSivg_0();
      uint64_t v36 = CircularBuffer.init(initialCapacity:)(v35, v7);
      sub_10002A524();
      *uint64_t v43 = v36;
      *uint64_t v39 = 0LL;
      v39[1] = 0LL;
    }

    else
    {
      uint64_t v44 = sub_1000EB850();
      uint64_t v37 = type metadata accessor for Array(0LL, v7);
      uint64_t v38 = sub_1000EB7EC((const char *)&protocol conformance descriptor for [A]);
      CircularBuffer.replaceSubrange<A>(_:with:)(v42 & 0x1FFFFFFFFFFFFFFLL, v27, &v44, v41, v37, v38);
      swift_bridgeObjectRelease();
    }
  }

  sub_10002A580();
}

uint64_t sub_1000EA568@<X0>(void (*a1)(void)@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return sub_10001762C(a3, 0LL, 1LL, a2);
}

void CircularBuffer.remove(at:)()
{
  unint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v52 = v6;
  uint64_t v55 = (void (*)(uint64_t, char *, uint64_t))HIDWORD(v4);
  unint64_t v56 = HIWORD(v4);
  uint64_t v7 = *(void *)(v2 + 16);
  v51[2] = *(void *)(sub_1000EB64C() - 8);
  sub_100043FD8();
  __chkstk_darwin(v8);
  sub_10009291C();
  v51[3] = v9;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v51 - v11;
  uint64_t v53 = *(void *)(v7 - 8);
  sub_100043FD8();
  __chkstk_darwin(v13);
  sub_1000227D0();
  uint64_t v57 = v14;
  unint64_t v15 = v0[1];
  uint64_t v16 = v0[2];
  uint64_t v62 = *v0;
  *(void *)&__int128 v63 = v15;
  unint64_t v54 = v15;
  v51[1] = v16;
  *((void *)&v63 + 1) = v16;
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for CircularBuffer<A>, v3);
  Collection<>.indices.getter(&v72, v3, WitnessTable);
  uint64_t v62 = v72;
  __int128 v63 = v73;
  int v64 = v74;
  __int16 v65 = v75;
  char v66 = v76;
  char v67 = v77;
  int v68 = v78;
  __int16 v69 = v79;
  char v70 = v80;
  char v71 = v81;
  int v58 = v5;
  __int16 v59 = (__int16)v55;
  char v60 = v56;
  char v61 = HIBYTE(v5) & 1;
  unint64_t v56 = v3;
  uint64_t v18 = type metadata accessor for DefaultIndices(0LL, v3, WitnessTable);
  uint64_t v19 = sub_1000EBA24((const char *)&protocol conformance descriptor for DefaultIndices<A>);
  uint64_t v22 = type metadata accessor for CircularBuffer.Index(255LL, v7, v20, v21);
  uint64_t v23 = swift_getWitnessTable(protocol conformance descriptor for CircularBuffer<A>.Index, v22);
  char v24 = Sequence<>.contains(_:)(&v58, v18, v19, v23);
  sub_10009B4FC();
  if ((v24 & 1) != 0)
  {
    uint64_t v5 = v5;
    _s25ASOctaneSupportXPCService4HeapVyxSicig_0();
    sub_1000EB7D8((uint64_t)v12, 1LL, v7);
    if (!v25)
    {
      uint64_t v26 = *(void (**)(uint64_t, char *, uint64_t))(v53 + 32);
      uint64_t v27 = v57;
      v26((uint64_t)v57, v12, v7);
      unint64_t v28 = v54;
      if (v54 == v5)
      {
        CircularBuffer.advanceHeadIdx(by:)(1LL);
        sub_1000EB5C4();
        ContiguousArray._makeMutableAndUnique()();
        sub_1000EB6F4(v28);
        uint64_t v31 = v29 + v30 * v28;
      }

      else
      {
        swift_retain();
        Swift::Int v32 = CircularBuffer.indexBeforeTailIdx()();
        swift_release();
        if (v32 != v5)
        {
          uint64_t v55 = v26;
          sub_1000EB5C4();
          ContiguousArray._makeMutableAndUnique()();
          sub_1000EB130(v5, *v1);
          sub_1000EB908();
          sub_1000EB8E0(v36 + v37 * v5);
          uint64_t v38 = v1[2];
          uint64_t v39 = ChannelPipeline.syncOperations.getter();
          sub_1000EB878(v39, v40, v41);
          uint64_t v43 = v42;
          sub_100024F0C();
          uint64_t v44 = v43 & (v5 + 1LL);
          if (v44 != v38)
          {
            do
            {
              uint64_t v72 = v5;
              uint64_t v62 = v44;
              sub_1000EB680((const char *)&protocol conformance descriptor for ContiguousArray<A>);
              MutableCollection.swapAt(_:_:)(&v72);
              uint64_t v45 = v1[2];
              uint64_t v46 = ChannelPipeline.syncOperations.getter();
              sub_1000EB878(v46, v47, v48);
              uint64_t v50 = v49;
              sub_100024F0C();
              uint64_t v5 = v44;
              uint64_t v44 = v50 & (v44 + 1);
            }

            while (v44 != v45);
          }

          sub_1000EB8D0();
          uint64_t v35 = v52;
          uint64_t v27 = v57;
          uint64_t v26 = v55;
          goto LABEL_11;
        }

        sub_1000EB8D0();
        sub_1000EB5C4();
        ContiguousArray._makeMutableAndUnique()();
        sub_1000EB6F4(v5);
        uint64_t v31 = v33 + v34 * v5;
      }

      sub_1000EB8E0(v31);
      uint64_t v35 = v52;
LABEL_11:
      v26(v35, v27, v7);
      sub_10002A580();
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

Swift::Void __swiftcall CircularBuffer.reserveCapacity(_:)(Swift::Int a1)
{
  if (CircularBuffer.capacity.getter(*v3, v1, v2, *(void *)(v1 + 16)) >= a1)
  {
    sub_1000193B8();
  }

  else
  {
    Swift::Int v5 = sub_1000E7674(a1);
    CircularBuffer._resizeAndFlatten(newCapacity:)(v5);
  }

uint64_t sub_1000EA970@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = CircularBuffer.init()(*(void *)(a1 + 16));
  a2[1] = 0LL;
  a2[2] = 0LL;
  *a2 = result;
  return result;
}

uint64_t sub_1000EA99C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a2, a3);
}

uint64_t sub_1000EAA3C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8LL) + 8LL))(a1);
}

void sub_1000EAA7C()
{
}

void sub_1000EAAA8()
{
}

uint64_t sub_1000EAAFC(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable("a/\b", a1);
  return RangeReplaceableCollection<>._customRemoveLast()(a1, WitnessTable, a2);
}

uint64_t sub_1000EAB48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable("a/\b");
  return RangeReplaceableCollection<>._customRemoveLast(_:)(a1, a2, WitnessTable, a3);
}

uint64_t sub_1000EAB9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for CircularBuffer<A>, a3);
  return RangeReplaceableCollection<>.removeAll(where:)(a1, a2, a3, WitnessTable, a4);
}

uint64_t static CircularBuffer<A>.== infix(_:_:)()
{
  uint64_t v43 = v0;
  uint64_t v44 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  CircularBuffer.count.getter(v16, v14, v12, v4);
  uint64_t v19 = v18;
  CircularBuffer.count.getter(v11, v9, v7, v5);
  if (v19 == v22)
  {
    uint64_t v35 = v17;
    *(void *)&__int128 v36 = v15;
    *((void *)&v36 + 1) = v13;
    uint64_t v31 = v11;
    uint64_t v32 = v9;
    uint64_t v33 = v7;
    uint64_t v23 = type metadata accessor for CircularBuffer(0LL, v5, v20, v21);
    uint64_t v24 = sub_1000EB7EC(protocol conformance descriptor for CircularBuffer<A>);
    ((void (*)(uint64_t *__return_ptr, uint64_t *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))zip<A, B>(_:_:))( &v39,  &v35,  &v31,  v23,  v23,  v24,  v24);
    uint64_t v35 = v39;
    __int128 v36 = v40;
    uint64_t v37 = v41;
    __int128 v38 = v42;
    char v25 = (void *)sub_100019310((uint64_t)&unk_100282420, 40LL);
    v25[2] = v5;
    v25[3] = v3;
    v25[4] = v5;
    v30[2] = v5;
    v30[3] = v3;
    v30[4] = sub_1000EB1E4;
    v30[5] = __chkstk_darwin(v25);
    uint64_t v31 = v23;
    uint64_t v32 = v23;
    uint64_t v33 = v24;
    uint64_t v34 = v24;
    uint64_t v26 = ((uint64_t (*)(void, uint64_t *))type metadata accessor for Zip2Sequence)(0LL, &v31);
    uint64_t v27 = sub_1000EB680((const char *)&protocol conformance descriptor for Zip2Sequence<A, B>);
    char v28 = ((uint64_t (*)(uint64_t (*)(uint64_t), void *, uint64_t, uint64_t))Sequence.allSatisfy(_:))( sub_1000EB20C,  v30,  v26,  v27);
    swift_release();
    sub_10002A524();
    sub_100024F0C();
  }

  else
  {
    char v28 = 0;
  }

  return v28 & 1;
}

uint64_t sub_1000EADAC(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, a4, a4, 0LL, 0LL);
  return a2(a1, a1 + *(int *)(TupleTypeMetadata2 + 48)) & 1;
}

uint64_t sub_1000EAE0C()
{
  return static CircularBuffer<A>.== infix(_:_:)();
}

void CircularBuffer<A>.hash(into:)()
{
  uint64_t v24 = v0;
  uint64_t v25 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  unint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(v4 - 8);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_retain();
  sub_1000EBA60(v11, v9, v7);
  LODWORD(v18) = v17;
  int v19 = HIBYTE(v17) != 0;
  sub_1000EB6BC(v11);
  sub_1000EB810();
  if (!v21 || v19 != v20)
  {
    do
    {
      do
      {
        CircularBuffer.subscript.getter(v5, (uint64_t)v16);
        swift_retain();
        unint64_t v18 = CircularBuffer.index(after:)(v18, v11, v9, v7, v5);
        sub_10002A51C();
        ((void (*)(uint64_t, uint64_t, uint64_t))dispatch thunk of Hashable.hash(into:))(v13, v5, v3);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v5);
        sub_1000EB6BC(v11);
        sub_1000EB810();
      }

      while (!v21);
    }

    while ((((HIBYTE(v18) != 0) ^ v22) & 1) != 0);
    sub_10002A51C();
    sub_10002A580();
  }

  else
  {
    swift_release();
  }

Swift::Int CircularBuffer<A>.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000EAFE8()
{
  return CircularBuffer<A>.hashValue.getter();
}

void sub_1000EB000()
{
}

Swift::Int sub_1000EB018()
{
  return Hasher._finalize()();
}

uint64_t CircularBuffer.init(arrayLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for CircularBuffer(0LL, a2, a3, a4);
  v11[0] = a1;
  uint64_t v7 = type metadata accessor for Array(0LL, a2);
  uint64_t v8 = sub_1000EB7EC("I/\b");
  uint64_t v9 = sub_1000EB680((const char *)&protocol conformance descriptor for [A]);
  RangeReplaceableCollection.init<A>(_:)(v11, v6, v7, v8, v9);
  return v11[1];
}

uint64_t sub_1000EB104@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = CircularBuffer.init(arrayLiteral:)(a1, *(void *)(a2 + 16), a3, a4);
  *a5 = result;
  a5[1] = v7;
  a5[2] = v8;
  return result;
}

unint64_t sub_1000EB130(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }

  if (*(void *)(a2 + 16) <= result) {
LABEL_5:
  }
    __break(1u);
  return result;
}

void sub_1000EB14C(void *a1@<X8>)
{
}

uint64_t type metadata accessor for CircularBuffer.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CircularBuffer.Index);
}

uint64_t sub_1000EB188@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v2 + 16) - 8LL) + 16LL))(a2, a1);
}

uint64_t sub_1000EB1A0()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1000EB1C4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000EA568(*(void (**)(void))(v1 + 40), *(void *)(v1 + 16), a1);
}

uint64_t type metadata accessor for CircularBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CircularBuffer);
}

uint64_t sub_1000EB1E4(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24)) & 1;
}

uint64_t sub_1000EB20C(uint64_t a1)
{
  return sub_1000EADAC( a1,  *(uint64_t (**)(uint64_t, uint64_t))(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 16)) & 1;
}

uint64_t sub_1000EB22C(uint64_t a1)
{
  return swift_getWitnessTable(protocol conformance descriptor for CircularBuffer<A>.Index, a1);
}

uint64_t sub_1000EB23C(uint64_t a1)
{
  return swift_getWitnessTable(protocol conformance descriptor for CircularBuffer<A>, a1);
}

uint64_t sub_1000EB24C(uint64_t a1)
{
  return swift_getWitnessTable("\t0\b", a1);
}

uint64_t sub_1000EB25C(uint64_t a1)
{
  return swift_getWitnessTable((const char *)&protocol conformance descriptor for DefaultIndices<A>, a1);
}

uint64_t sub_1000EB26C(uint64_t a1)
{
  return swift_getWitnessTable(protocol conformance descriptor for CircularBuffer<A>, a1);
}

uint64_t sub_1000EB27C(uint64_t a1)
{
  return swift_getWitnessTable(protocol conformance descriptor for CircularBuffer<A>, a1);
}

uint64_t sub_1000EB28C(uint64_t a1)
{
  return swift_getWitnessTable((const char *)&protocol conformance descriptor for IndexingIterator<A>, a1);
}

uint64_t sub_1000EB29C(uint64_t a1)
{
  return swift_getWitnessTable("a/\b", a1);
}

uint64_t sub_1000EB2AC(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable("y/\b");
  return swift_getWitnessTable( (const char *)&protocol conformance descriptor for <> DefaultIndices<A>,  a1,  &WitnessTable);
}

uint64_t sub_1000EB2F4(uint64_t a1)
{
  return swift_getWitnessTable("y/\b", a1);
}

uint64_t sub_1000EB304(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable("a/\b");
  return swift_getWitnessTable( (const char *)&protocol conformance descriptor for <> DefaultIndices<A>,  a1,  &WitnessTable);
}

uint64_t sub_1000EB34C(uint64_t a1)
{
  return swift_getWitnessTable("I/\b", a1);
}

uint64_t sub_1000EB35C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 - 8) + 8LL);
  return swift_getWitnessTable(protocol conformance descriptor for <A> CircularBuffer<A>, a1, &v4);
}

uint64_t sub_1000EB394(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  swift_retain(v3);
  return a1;
}

uint64_t *sub_1000EB3C8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t *sub_1000EB41C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  return a1;
}

uint64_t sub_1000EB458(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_1000EB498(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t sub_1000EB4D8(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 8))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 7);
      BOOL v4 = v3 >= 2;
      int v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_1000EB524(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 7) = a2 + 1;
    }
  }

  return result;
}

void sub_1000EB574(void *a1)
{
}

unint64_t sub_1000EB588(unint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)(HIBYTE(a1) != 0) << 56);
}

  ;
}

uint64_t sub_1000EB5B4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000EB5C4()
{
  return type metadata accessor for ContiguousArray(0LL);
}

uint64_t sub_1000EB5F0()
{
  uint64_t v5 = *v0;
  sub_1000EB130(v3, *v0);
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v4 + 40))( v5 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
         + *(void *)(v4 + 72) * v3,
           v2,
           v1);
}

uint64_t sub_1000EB634(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t sub_1000EB64C()
{
  return type metadata accessor for Optional(0LL, v0);
}

void *sub_1000EB658(void *a1)
{
  *uint64_t v4 = a1;
  *a1 = v3;
  a1[1] = v1;
  uint64_t v5 = *(void *)(v1 + 16);
  a1[2] = v2;
  a1[3] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  a1[4] = v6;
  return malloc(*(void *)(v6 + 64));
}

uint64_t sub_1000EB680(const char *a1)
{
  return swift_getWitnessTable(a1, v1);
}

uint64_t sub_1000EB688()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v0, v1, v2);
}

  ;
}

uint64_t sub_1000EB6AC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void sub_1000EB6BC(uint64_t a1)
{
}

void sub_1000EB6CC(uint64_t a1)
{
}

uint64_t sub_1000EB6E8()
{
  return type metadata accessor for ContiguousArray(0LL);
}

unint64_t sub_1000EB6F4(unint64_t a1)
{
  return sub_1000EB130(a1, v1);
}

unint64_t sub_1000EB724(uint64_t a1)
{
  return CircularBuffer.subscript.setter(a1, v1, v2, v3, v4);
}

unint64_t sub_1000EB73C(uint64_t a1)
{
  return CircularBuffer.subscript.setter(a1, v1, v4, v2, v3);
}

uint64_t sub_1000EB754()
{
  return ContiguousArray.append<A>(contentsOf:)(v3 - 176, v2, v0, v1);
}

uint64_t sub_1000EB76C()
{
  return v0;
}

  ;
}

void *sub_1000EB790()
{
  return malloc(0x38uLL);
}

uint64_t sub_1000EB7A4()
{
  __int128 v2 = *(_OWORD *)(v1 - 112);
  *(_OWORD *)(v1 - 176) = *(_OWORD *)(v1 - 128);
  *(_OWORD *)(v1 - 16sub_1000B58F0(v0, 0) = v2;
  return type metadata accessor for ArraySlice(0LL, v0);
}

uint64_t sub_1000EB7B8()
{
  return swift_release(v0);
}

void sub_1000EB7C4(void *a1)
{
}

uint64_t sub_1000EB7CC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_1000EB7D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001D158(a1, a2, a3);
}

uint64_t sub_1000EB7EC(const char *a1)
{
  return swift_getWitnessTable(a1, v1);
}

unint64_t sub_1000EB7F4(unint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)(HIBYTE(a1) != 0) << 56);
}

  ;
}

void sub_1000EB82C()
{
}

uint64_t sub_1000EB850()
{
  return static Array._allocateUninitialized(_:)(0LL, v0);
}

uint64_t sub_1000EB85C()
{
  return type metadata accessor for ContiguousArray(0LL);
}

uint64_t sub_1000EB868()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

void sub_1000EB878(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1000EB880()
{
  return v0 - 88;
}

  ;
}

uint64_t sub_1000EB8B0()
{
  v0[1] = 0LL;
  v0[2] = v1;
  return swift_release(*v0);
}

uint64_t sub_1000EB8C0()
{
  return v0;
}

void sub_1000EB8D0()
{
}

uint64_t sub_1000EB8E0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 40))(a1, v2, v3);
}

uint64_t sub_1000EB8F0()
{
  return v0 - 176;
}

  ;
}

__n128 sub_1000EB920()
{
  *(void *)(v0 - 20sub_1000B58F0(v0, 0) = *(void *)(v0 - 136);
  __n128 result = *(__n128 *)(v0 - 112);
  *(_OWORD *)(v0 - 192) = *(_OWORD *)(v0 - 128);
  *(__n128 *)(v0 - 176) = result;
  return result;
}

void sub_1000EB938(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

uint64_t sub_1000EB944()
{
  return v0 - 136;
}

uint64_t sub_1000EB95C()
{
  return v0 - 136;
}

uint64_t sub_1000EB974()
{
  return dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
}

uint64_t sub_1000EB984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for Optional(0LL, a4);
}

void sub_1000EB994()
{
}

uint64_t sub_1000EB9A4(uint64_t result)
{
  *(_DWORD *)(v1 - 96) = result;
  return result;
}

uint64_t sub_1000EB9BC()
{
  return v1;
}

void sub_1000EB9E4(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

  ;
}

void sub_1000EBA04()
{
  *(_DWORD *)(v1 - 20sub_1000B58F0(v0, 0) = v0;
}

void sub_1000EBA1C(unint64_t *a1, uint64_t a2, const char *a3)
{
}

uint64_t sub_1000EBA24(const char *a1)
{
  return swift_getWitnessTable(a1, v1);
}

  ;
}

uint64_t sub_1000EBA40()
{
  return v0;
}

unint64_t sub_1000EBA54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return CircularBuffer.distance(from:to:)(a1, a2, v5, a4, a5, v6);
}

void sub_1000EBA60(uint64_t a1, unint64_t a2, uint64_t a3)
{
}

  ;
}

unint64_t sub_1000EBA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return CircularBuffer.distance(from:to:)(a1, a2, a3, a4, a5, v5);
}

uint64_t sub_1000EBA84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for Optional(a1, a4);
}

void sub_1000EBA8C()
{
}

__n128 sub_1000EBA94()
{
  *(void *)(v0 - 16sub_1000B58F0(v0, 0) = *(void *)(v0 - 200);
  __n128 result = *(__n128 *)(v0 - 192);
  *(__n128 *)(v0 - 152) = result;
  return result;
}

void sub_1000EBAA8(char a1@<W8>)
{
  *(_BYTE *)(v2 + 6) = v1;
  *(_BYTE *)(v2 + 7) = a1;
}

unint64_t sub_1000EBAB4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return CircularBuffer.subscript.getter(a1, a2, a3, a4, v5, v4);
}

void sub_1000EBAC0(uint64_t a1@<X8>)
{
}

void sub_1000EBAC8()
{
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000EBB04()
{
  return type metadata accessor for Repeated(0LL, v0);
}

uint64_t sub_1000EBB10()
{
  return type metadata accessor for Optional(0LL, v0);
}

uint64_t sub_1000EBB1C(uint64_t a1)
{
  return repeatElement<A>(_:count:)(a1, v1, v2);
}

void *sub_1000EBB28(uint64_t a1)
{
  *(void *)(v2 + 4sub_1000B58F0(v0, 0) = a1;
  return malloc(v1);
}

uint64_t sub_1000EBB34()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000175B0(&qword_1002B0A50);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_1000175B0(&qword_1002AB750);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100023BAC(v1, (uint64_t)v28);
  uint64_t v8 = sub_1000175B0(&qword_1002B0C28);
  memcpy(v26, v27, 0xD1uLL);
  if (!v26[8])
  {
    sub_1000ECB9C();
    return 0LL;
  }

  sub_100083238(v26[8], (uint64_t)v4);
  uint64_t v9 = type metadata accessor for IAPTransaction(0LL);
  if (sub_10001D158((uint64_t)v4, 1LL, v9) == 1)
  {
    sub_1000ECB9C();
    uint64_t v10 = &qword_1002B0A50;
    uint64_t v11 = (uint64_t)v4;
LABEL_9:
    sub_100043F40(v11, v10);
    return 0LL;
  }

  sub_1000EBDBC((uint64_t)&v4[*(int *)(v9 + 68)], (uint64_t)v7);
  sub_1000EBE04((uint64_t)v4);
  uint64_t v12 = sub_1000175B0(&qword_1002AA328);
  if (sub_10001D158((uint64_t)v7, 1LL, v12) == 1)
  {
    sub_1000ECB9C();
    uint64_t v10 = &qword_1002AB750;
    uint64_t v11 = (uint64_t)v7;
    goto LABEL_9;
  }

  sub_1000EBE40(v25);
  uint64_t v14 = v25[0];
  uint64_t v15 = v25[1];
  uint64_t v16 = v25[2];
  uint64_t v17 = v25[3];
  uint64_t v18 = v25[4];
  uint64_t v19 = v25[5];
  sub_100043F40((uint64_t)v7, &qword_1002AA328);
  uint64_t v20 = sub_1000175B0(&qword_1002A9098);
  uint64_t v21 = swift_allocObject(v20, 80LL, 7LL);
  *(_OWORD *)(v21 + 16) = xmmword_1001FCE90;
  *(void *)(v21 + 32) = v14;
  *(void *)(v21 + 4sub_1000B58F0(v0, 0) = v15;
  *(void *)(v21 + 48) = v16;
  *(void *)(v21 + 56) = v17;
  *(void *)(v21 + 64) = v18;
  *(void *)(v21 + 72) = v19;
  v25[0] = v21;
  uint64_t v22 = sub_1000175B0(&qword_1002A93B8);
  uint64_t v23 = sub_1000EC7B8( (unint64_t *)&qword_1002AD9C0,  &qword_1002A93B8,  (const char *)&protocol conformance descriptor for [A]);
  uint64_t v24 = BidirectionalCollection<>.joined(separator:)(46LL, 0xE100000000000000LL, v22, v23);
  sub_1000ECB9C();
  swift_bridgeObjectRelease();
  return v24;
}

uint64_t sub_1000EBDBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002AB750);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000EBE04(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IAPTransaction(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000EBE40@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v102 = a1;
  uint64_t v101 = type metadata accessor for P256.Signing.ECDSASignature(0LL);
  uint64_t v100 = *(void *)(v101 - 8);
  __chkstk_darwin(v101);
  unint64_t v106 = (char *)&v95 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for String.Encoding(0LL);
  uint64_t v108 = *(void *)(v4 - 8);
  unint64_t v109 = v4;
  __chkstk_darwin(v4);
  unint64_t v107 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v104 = *(void *)(v6 - 8);
  uint64_t v105 = v6;
  __chkstk_darwin(v6);
  uint64_t v103 = (char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for JSONEncoder(0LL);
  uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  uint64_t v14 = JSONEncoder.init()(v13);
  if (qword_1002A8CB0 != -1) {
    swift_once(&qword_1002A8CB0, sub_100043DB4);
  }
  uint64_t v15 = sub_100018F68(v8, (uint64_t)qword_1002EB900);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v15, v8);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v11);
  uint64_t v16 = *(void **)(v1 + 8);
  uint64_t v17 = *(void *)(v1 + 16);
  uint64_t v18 = *(void *)(v1 + 24);
  uint64_t v19 = *(void *)(v1 + 32);
  uint64_t v20 = *(void *)(v1 + 40);
  uint64_t v21 = *(void *)(v1 + 64);
  v115._uint64_t countAndFlagsBits = *(void *)v1;
  v115._object = v16;
  uint64_t v116 = v17;
  uint64_t v117 = v18;
  uint64_t v118 = v19;
  uint64_t v119 = v20;
  __int128 v120 = *(_OWORD *)(v1 + 48);
  uint64_t v121 = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_1000175B0(&qword_1002B0C30);
  uint64_t v23 = sub_1000EC7B8(&qword_1002B0C38, &qword_1002B0C30, byte_100205018);
  uint64_t v122 = v14;
  uint64_t v24 = v110;
  uint64_t v25 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v115, v22, v23);
  if (v24)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  uint64_t v27 = v25;
  unint64_t v28 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::String v115 = Data.base64EncodedString(options:)(0LL);
  uint64_t v113 = 43LL;
  unint64_t v114 = 0xE100000000000000LL;
  uint64_t v111 = 45LL;
  unint64_t v112 = 0xE100000000000000LL;
  sub_10001B4A0();
  uint64_t v110 = 0LL;
  uint64_t v29 = v27;
  uint64_t v30 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v113,  &v111,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String);
  uint64_t v32 = v31;
  swift_bridgeObjectRelease();
  v115._uint64_t countAndFlagsBits = v30;
  v115._object = v32;
  uint64_t v113 = 47LL;
  unint64_t v114 = 0xE100000000000000LL;
  uint64_t v111 = 95LL;
  unint64_t v112 = 0xE100000000000000LL;
  uint64_t v33 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v113,  &v111,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String);
  uint64_t v35 = v34;
  swift_bridgeObjectRelease();
  v115._uint64_t countAndFlagsBits = v33;
  v115._object = v35;
  uint64_t v113 = 61LL;
  unint64_t v114 = 0xE100000000000000LL;
  uint64_t v111 = 0LL;
  unint64_t v112 = 0xE000000000000000LL;
  uint64_t v36 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v113,  &v111,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String);
  __int128 v38 = v37;
  swift_bridgeObjectRelease();
  sub_10003A9EC(v29, v28);
  uint64_t v39 = sub_1000175B0(&qword_1002AA328);
  uint64_t v40 = v2 + *(int *)(v39 + 36);
  uint64_t v41 = type metadata accessor for CheddarTransaction(0LL);
  unint64_t v42 = sub_1000EC7F8();
  uint64_t v43 = v110;
  uint64_t v44 = dispatch thunk of JSONEncoder.encode<A>(_:)(v40, v41, v42);
  if (v43)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }

  unint64_t v47 = v45;
  uint64_t v99 = v38;
  uint64_t v96 = v36;
  uint64_t v110 = 0LL;
  uint64_t v98 = v44;
  uint64_t v48 = v39;
  Swift::String v115 = Data.base64EncodedString(options:)(0LL);
  uint64_t v113 = 43LL;
  unint64_t v114 = 0xE100000000000000LL;
  uint64_t v111 = 45LL;
  unint64_t v112 = 0xE100000000000000LL;
  uint64_t v49 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v113,  &v111,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String);
  uint64_t v50 = &type metadata for String;
  uint64_t v52 = v51;
  swift_bridgeObjectRelease();
  v115._uint64_t countAndFlagsBits = v49;
  v115._object = v52;
  uint64_t v113 = 47LL;
  unint64_t v114 = 0xE100000000000000LL;
  uint64_t v111 = 95LL;
  unint64_t v112 = 0xE100000000000000LL;
  uint64_t v53 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v113, &v111, 0LL, 0LL, 0LL, 1LL, v50, v50);
  uint64_t v55 = v54;
  swift_bridgeObjectRelease();
  v115._uint64_t countAndFlagsBits = v53;
  v115._object = v55;
  uint64_t v113 = 61LL;
  unint64_t v114 = 0xE100000000000000LL;
  uint64_t v111 = 0LL;
  unint64_t v112 = 0xE000000000000000LL;
  uint64_t v56 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v113, &v111, 0LL, 0LL, 0LL, 1LL, v50, v50);
  int v58 = v57;
  swift_bridgeObjectRelease();
  uint64_t v59 = sub_10003A9EC(v98, v47);
  uint64_t v98 = v48;
  uint64_t v60 = v2 + *(int *)(v48 + 44);
  char v61 = *(_BYTE *)(v60 + 8);
  uint64_t v95 = v56;
  uint64_t v97 = (uint64_t)v58;
  if ((v61 & 1) != 0 || *(void *)v60 != 21LL)
  {
    v115._uint64_t countAndFlagsBits = v96;
    v115._object = v99;
    swift_bridgeObjectRetain();
    v68._uint64_t countAndFlagsBits = 46LL;
    v68._object = (void *)0xE100000000000000LL;
    String.append(_:)(v68);
    swift_bridgeObjectRetain();
    v69._uint64_t countAndFlagsBits = v56;
    v69._object = v58;
    String.append(_:)(v69);
    uint64_t v67 = swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = v115._countAndFlagsBits;
    object = v115._object;
  }

  else
  {
    uint64_t v62 = v103;
    uint64_t v63 = UUID.init()(v59);
    uint64_t countAndFlagsBits = UUID.uuidString.getter(v63);
    object = v65;
    uint64_t v67 = (*(uint64_t (**)(char *, uint64_t))(v104 + 8))(v62, v105);
  }

  char v70 = v107;
  static String.Encoding.utf8.getter(v67);
  uint64_t v71 = String.data(using:allowLossyConversion:)(v70, 0LL, countAndFlagsBits, object);
  unint64_t v73 = v72;
  uint64_t v75 = v108;
  unint64_t v74 = v109;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, unint64_t))(v75 + 8))(v70, v74);
  if (v73 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v76 = sub_1000EC838();
    uint64_t v77 = swift_allocError(&type metadata for JWSError, v76, 0LL, 0LL);
    swift_willThrow(v77);
    return swift_release();
  }

  else
  {
    v115._uint64_t countAndFlagsBits = v71;
    v115._object = (void *)v73;
    sub_10003AA88(v71, v73);
    unint64_t v78 = sub_1000EC874();
    uint64_t v79 = v110;
    uint64_t v80 = P256.Signing.PrivateKey.signature<A>(for:)(&v115, &type metadata for Data, v78);
    if (v79)
    {
      sub_10003AACC(v71, v73);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return sub_10003AACC(v71, v73);
    }

    else
    {
      uint64_t v110 = 0LL;
      uint64_t v81 = P256.Signing.ECDSASignature.rawRepresentation.getter(v80);
      unint64_t v109 = v82;
      Swift::String v115 = Data.base64EncodedString(options:)(0LL);
      uint64_t v113 = 43LL;
      unint64_t v114 = 0xE100000000000000LL;
      uint64_t v111 = 45LL;
      unint64_t v112 = 0xE100000000000000LL;
      uint64_t v83 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v113,  &v111,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String);
      uint64_t v85 = v84;
      swift_bridgeObjectRelease();
      v115._uint64_t countAndFlagsBits = v83;
      v115._object = v85;
      uint64_t v113 = 47LL;
      unint64_t v114 = 0xE100000000000000LL;
      uint64_t v111 = 95LL;
      unint64_t v112 = 0xE100000000000000LL;
      uint64_t v86 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v113,  &v111,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String);
      unint64_t v88 = v87;
      swift_bridgeObjectRelease();
      v115._uint64_t countAndFlagsBits = v86;
      v115._object = v88;
      uint64_t v113 = 61LL;
      unint64_t v114 = 0xE100000000000000LL;
      uint64_t v111 = 0LL;
      unint64_t v112 = 0xE000000000000000LL;
      uint64_t v89 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v113,  &v111,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String);
      uint64_t v91 = v90;
      swift_bridgeObjectRelease();
      sub_10003A9EC(v81, v109);
      sub_10003AACC(v71, v73);
      swift_release();
      sub_10003AACC(v71, v73);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v100 + 8))(v106, v101);
      uint64_t v92 = v102;
      uint64_t v93 = (uint64_t)v99;
      *uint64_t v102 = v96;
      v92[1] = v93;
      uint64_t v94 = v97;
      v92[2] = v95;
      v92[3] = v94;
      v92[4] = v89;
      v92[5] = v91;
    }
  }

  return result;
}

uint64_t sub_1000EC7B8(unint64_t *a1, uint64_t *a2, const char *a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_100018EC0(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1000EC7F8()
{
  unint64_t result = qword_1002AB7C8;
  if (!qword_1002AB7C8)
  {
    uint64_t v1 = type metadata accessor for CheddarTransaction(255LL);
    unint64_t result = swift_getWitnessTable(byte_10020145C, v1);
    atomic_store(result, (unint64_t *)&qword_1002AB7C8);
  }

  return result;
}

unint64_t sub_1000EC838()
{
  unint64_t result = qword_1002B0C40;
  if (!qword_1002B0C40)
  {
    unint64_t result = swift_getWitnessTable(byte_100204FD8, &type metadata for JWSError);
    atomic_store(result, (unint64_t *)&qword_1002B0C40);
  }

  return result;
}

unint64_t sub_1000EC874()
{
  unint64_t result = qword_1002B0C48;
  if (!qword_1002B0C48)
  {
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1002B0C48);
  }

  return result;
}

void destroy for InAppBuyResult(uint64_t a1)
{
}

uint64_t initializeWithCopy for InAppBuyResult(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void **)(a2 + 40);
  *(void *)(a1 + 4sub_1000B58F0(v0, 0) = v5;
  id v6 = v5;
  return a1;
}

void *assignWithCopy for InAppBuyResult(void *a1, void *a2)
{
  __int128 v4 = (void *)a2[5];
  uint64_t v5 = (void *)a1[5];
  a1[5] = v4;
  id v6 = v4;

  return a1;
}

void *sub_1000EC958(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        unint64_t result = (void *)swift_release(v11);
        *uint64_t v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          *uint64_t v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          *uint64_t v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

uint64_t assignWithTake for InAppBuyResult(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1000B58F0(v0, 0) = v5;

  return a1;
}

uint64_t getEnumTagSinglePayload for InAppBuyResult(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InAppBuyResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 4sub_1000B58F0(v0, 0) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for InAppBuyResult()
{
  return &type metadata for InAppBuyResult;
}

uint64_t sub_1000ECB9C()
{
  return sub_1000536E8(v0 + 56);
}

void *NonBlockingFileIO.defaultThreadPoolSize.unsafeMutableAddressor()
{
  return &static NonBlockingFileIO.defaultThreadPoolSize;
}

void *NonBlockingFileIO.defaultChunkSize.unsafeMutableAddressor()
{
  return &static NonBlockingFileIO.defaultChunkSize;
}

uint64_t static NonBlockingFileIO.defaultChunkSize.getter()
{
  return 0x20000LL;
}

uint64_t NonBlockingFileIO.readChunked(fileRegion:chunkSize:allocator:eventLoop:chunkHandler:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v16 = sub_1000EEF7C();
  return sub_1000ECCB0(v16, v17, v18, v19, v20, v21, v22, v23, v25, a9, a10, a11, a12, a13);
}

uint64_t NonBlockingFileIO.readChunked(fileHandle:fromOffset:byteCount:chunkSize:allocator:eventLoop:chunkHandler:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return sub_1000ECCB0(v13, v14, 0, v15, v16, v17, v18, v20, v19, a9, a10, a11, a12, a13);
}

uint64_t NonBlockingFileIO.readChunked(fileHandle:byteCount:chunkSize:allocator:eventLoop:chunkHandler:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v23 = v12;
  uint64_t v24 = v13;
  sub_1000EF024();
  return sub_1000ECCB0(v14, v15, v16, v17, v18, v19, v20, v21, v23, v24, a9, a10, a11, a12);
}

uint64_t sub_1000ECCB0( uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a5 < 1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v15 = a4 / a5 + 1;
    if (!__OFADD__(a4 / a5, 1LL))
    {
      char v24 = a3 & 1;
      uint64_t v21 = a4 % a5;
      uint64_t v22 = result;
      uint64_t ObjectType = swift_getObjectType(a10);
      uint64_t v20 = EventLoop.makePromise<A>(of:file:line:)( (uint64_t)&type metadata for ()[8],  (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/N onBlockingFileIO.swift",  119LL,  2LL,  176LL,  ObjectType,  (uint64_t)&type metadata for ()[8],  a11);
      sub_1000ECDBC(v15, 0LL, v21, a5, a14, v22, a2, v24, a6, a7, a8, a9, a10, a11, a12, a13, v20);
      return v20;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1000ECDBC( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t (*a9)(void), uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17 = a4;
  if (result <= 1)
  {
    BOOL v20 = result != 1 || a3 < 1;
    a4 = a3;
    if (v20) {
      return sub_100098A70(0LL, 0LL, a17);
    }
  }

  uint64_t v21 = a7;
  int v22 = a8 & 1;
  if ((a8 & 1) == 0 && (uint64_t v21 = a7 + a2, __OFADD__(a7, a2)))
  {
    __break(1u);
  }

  else
  {
    BOOL v30 = v22 != 0;
    uint64_t v28 = a2;
    uint64_t v29 = result;
    uint64_t v26 = v17;
    sub_1000ECF7C(a6, v21, v22, a4, a9, a10, a11, a12, a13, a14);
    uint64_t v25 = swift_allocObject(&unk_100282B08, 152LL, 7LL);
    *(void *)(v25 + 16) = a15;
    *(void *)(v25 + 24) = a16;
    *(void *)(v25 + 32) = a17;
    *(void *)(v25 + 4sub_1000B58F0(v0, 0) = a13;
    *(void *)(v25 + 48) = a14;
    *(void *)(v25 + 56) = a3;
    *(void *)(v25 + 64) = v26;
    *(void *)(v25 + 72) = a5;
    *(void *)(v25 + 8sub_1000B58F0(v0, 0) = a6;
    *(void *)(v25 + 88) = a7;
    *(_BYTE *)(v25 + 96) = v30;
    *(void *)(v25 + 104) = a9;
    *(void *)(v25 + 112) = a10;
    *(void *)(v25 + 12sub_1000B58F0(v0, 0) = a11;
    *(void *)(v25 + 128) = a12;
    *(void *)(v25 + 136) = v29;
    *(void *)(v25 + 144) = v28;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain(a13);
    swift_retain();
    swift_retain();
    sub_100101D08();
    swift_release();
    return swift_release();
  }

  return result;
}

uint64_t sub_1000ECF7C( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a4 < 1)
  {
    swift_getObjectType(a9);
    if (qword_1002A8CC8 != -1) {
      swift_once(&qword_1002A8CC8, sub_10005B580);
    }
    swift_retain();
    EventLoop.makeSucceededFuture<A>(_:file:line:)();
    uint64_t v22 = v23;
  }

  else
  {
    uint64_t v18 = swift_allocObject(&unk_100282A90, 39LL, 7LL);
    type metadata accessor for ByteBuffer._Storage();
    static ByteBuffer._Storage.reallocated(minimumCapacity:allocator:)(a4, a5, a6, a7, a8);
    int v20 = *(_DWORD *)(v19 + 16);
    *(void *)(v18 + 16) = v19;
    *(void *)(v18 + 24) = 0LL;
    *(_DWORD *)(v18 + 32) = v20;
    *(_WORD *)(v18 + 36) = 0;
    *(_BYTE *)(v18 + 38) = 0;
    uint64_t v21 = swift_allocObject(&unk_100282AB8, 49LL, 7LL);
    *(void *)(v21 + 16) = a4;
    *(void *)(v21 + 24) = v18;
    *(void *)(v21 + 32) = a1;
    *(void *)(v21 + 4sub_1000B58F0(v0, 0) = a2;
    *(_BYTE *)(v21 + 48) = a3 & 1;
    swift_retain();
    swift_retain();
    uint64_t v22 = sub_1000EDA04( a9,  a10,  (uint64_t)sub_1000EEE0C,  v21,  (uint64_t)&type metadata for ByteBuffer,  (uint64_t)&unk_100282AE0);
    swift_release();
  }

  swift_release();
  return v22;
}

uint64_t sub_1000ED16C( uint64_t result, void (*a2)(uint64_t, uint64_t, unint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19 = *(void *)result;
  uint64_t v20 = *(void *)(result + 8);
  unint64_t v21 = *(unsigned int *)(result + 16) | ((unint64_t)(*(unsigned __int16 *)(result + 20) | (*(unsigned __int8 *)(result + 22) << 16)) << 32);
  char v22 = *(_BYTE *)(result + 23);
  if ((v22 & 1) != 0)
  {
    swift_errorRetain(*(void *)result);
    sub_100098A70(v19, 1LL, a4);
    return sub_10009AE88(v19, v20, v21, v22);
  }

  if (HIDWORD(v20) >= v20)
  {
    if (HIDWORD(v20) == (_DWORD)v20)
    {
      uint64_t v28 = swift_retain();
      a2(v28, v20, v21 & 0xFFFFFFFFFFFFFFLL);
      sub_10002C4B8(a4);
    }

    else
    {
      uint64_t v26 = swift_retain();
      a2(v26, v20, v21 & 0xFFFFFFFFFFFFFFLL);
      uint64_t v27 = swift_allocObject(&unk_100282B30, 160LL, 7LL);
      *(void *)(v27 + 16) = a5;
      *(void *)(v27 + 24) = a6;
      *(void *)(v27 + 32) = a7;
      *(void *)(v27 + 4sub_1000B58F0(v0, 0) = a8;
      *(void *)(v27 + 48) = a9;
      *(void *)(v27 + 56) = a10;
      *(void *)(v27 + 64) = a11;
      *(_BYTE *)(v27 + 72) = a12 & 1;
      *(void *)(v27 + 8sub_1000B58F0(v0, 0) = a13;
      *(void *)(v27 + 88) = a14;
      *(void *)(v27 + 96) = a15;
      *(void *)(v27 + 104) = a16;
      *(void *)(v27 + 112) = a2;
      *(void *)(v27 + 12sub_1000B58F0(v0, 0) = a3;
      *(void *)(v27 + 128) = a4;
      *(void *)(v27 + 136) = a17;
      *(void *)(v27 + 144) = a18;
      *(void *)(v27 + 152) = (HIDWORD(v20) - v20);
      swift_retain();
      swift_retain();
      swift_unknownObjectRetain(a5);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1000FEED0();
      swift_release();
    }

    swift_release();
    return sub_10009AE88(v19, v20, v21, v22);
  }

  __break(1u);
  return result;
}

uint64_t sub_1000ED394( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (*((_BYTE *)a1 + 8) == 1)
  {
    uint64_t v19 = *a1;
    swift_errorRetain(*a1);
    sub_100098A70(v19, 1LL, a16);
    return sub_100034F08(v19, 1);
  }

  uint64_t ObjectType = swift_getObjectType(a2);
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/NonBlockingFileIO.swift",  119LL,  2LL,  200LL,  ObjectType,  a3);
  uint64_t result = a17 - 1;
  if (__OFSUB__(a17, 1LL))
  {
    __break(1u);
  }

  else if (!__OFADD__(a18, a19))
  {
    return sub_1000ECDBC(result, a18 + a19, a4, a5, a6, a7, a8, a9 & 1, a10, a11, a12, a13, a2, a3, a14, a15, a16);
  }

  __break(1u);
  return result;
}

uint64_t NonBlockingFileIO.read(fileRegion:allocator:eventLoop:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12 = sub_1000EEF7C();
  return sub_1000ECF7C(v12, v13, v14, v15, v16, v17, v18, v19, v21, a9);
}

uint64_t NonBlockingFileIO.read(fileHandle:fromOffset:byteCount:allocator:eventLoop:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1000ECF7C(v9, v10, 0, v11, v12, v13, v14, v16, v15, a9);
}

uint64_t NonBlockingFileIO.read(fileHandle:byteCount:allocator:eventLoop:)()
{
  uint64_t v12 = v0;
  uint64_t v11 = v1;
  sub_1000EF024();
  return sub_1000ECF7C(v2, v3, v4, v5, v6, v7, v8, v9, v11, v12);
}

void sub_1000ED5C8( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  int v63 = a5;
  uint64_t v9 = (void *)(a2 + 16);
  if (a1 < 1)
  {
LABEL_49:
    swift_beginAccess(v9, v62, 0LL, 0LL);
    int v49 = *(_DWORD *)(a2 + 32);
    __int16 v50 = *(_WORD *)(a2 + 36);
    char v51 = *(_BYTE *)(a2 + 38);
    *(void *)a6 = *(void *)(a2 + 16);
    *(void *)(a6 + 8) = *(void *)(a2 + 24);
    *(_DWORD *)(a6 + 16) = v49;
    *(_WORD *)(a6 + 2sub_1000B58F0(v0, 0) = v50;
    *(_BYTE *)(a6 + 22) = v51;
    swift_retain();
    return;
  }

  uint64_t v10 = 0LL;
  uint64_t v59 = (_BYTE *)(a3 + 16);
  uint64_t v58 = a1;
  while (1)
  {
    uint64_t v11 = a1 - v10;
    if (__OFSUB__(a1, v10)) {
      break;
    }
    swift_beginAccess(v9, v62, 33LL, 0LL);
    if (v11 >= 1)
    {
      uint64_t v12 = *(unsigned int *)(a2 + 28);
      uint64_t v13 = v12 + v11;
      if (__OFADD__(v12, v11)) {
        goto LABEL_58;
      }
      unsigned int v14 = *(_DWORD *)(a2 + 32);
      unsigned int v15 = *(unsigned __int8 *)(a2 + 38) | (*(unsigned __int16 *)(a2 + 36) << 8);
      BOOL v16 = v14 >= v15;
      unsigned int v17 = v14 - v15;
      if (!v16) {
        goto LABEL_59;
      }
      if (v13 > v17)
      {
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(a2 + 16));
        uint64_t v19 = *(unsigned __int8 *)(a2 + 38) | (*(unsigned __int16 *)(a2 + 36) << 8);
        if (!isUniquelyReferenced_nonNull_native)
        {
          LODWORD(v26) = *(_DWORD *)(a2 + 32);
          if (__CFADD__((_DWORD)v19, v26 - v19)) {
            goto LABEL_67;
          }
          unsigned int v27 = v19 + v13;
          if (__CFADD__((_DWORD)v19, (_DWORD)v13)) {
            goto LABEL_68;
          }
          else {
            uint64_t v26 = v27;
          }
          ByteBuffer._Storage.reallocSlice(_:capacity:)(v19 | (v26 << 32), v13);
          uint64_t v29 = v28;
          swift_release();
          *(void *)(a2 + 16) = v29;
          int v30 = *(_DWORD *)(v29 + 16);
          goto LABEL_28;
        }

        unsigned int v20 = v19 + v13;
        if (__CFADD__((_DWORD)v19, (_DWORD)v13)) {
          goto LABEL_65;
        }
        uint64_t v21 = *(unsigned int *)(a2 + 32);
        if (v21 < v20)
        {
          uint64_t v22 = *v9;
          unsigned int v23 = *(_DWORD *)(*v9 + 16LL);
          if (v23 < v20)
          {
            if ((_DWORD)v19)
            {
              ByteBuffer._Storage.reallocSlice(_:capacity:)(v19 | (v21 << 32), v13);
              uint64_t v25 = v24;
              swift_release();
              *uint64_t v9 = v25;
              uint64_t v22 = v25;
            }

            else
            {
              ByteBuffer._Storage.reallocStorage(capacity:)(v13);
            }

            int v30 = *(_DWORD *)(v22 + 16);
LABEL_28:
            *(_DWORD *)(a2 + 32) = v30;
            *(_WORD *)(a2 + 36) = 0;
            *(_BYTE *)(a2 + 38) = 0;
            goto LABEL_29;
          }

          *(_DWORD *)(a2 + 32) = v23;
        }
      }
    }

uint64_t sub_1000EDA04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v12 = EventLoop.makePromise<A>(of:file:line:)( a5,  (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/NIOThreadPool.swift",  115LL,  2LL,  224LL,  ObjectType,  a5,  a2);
  uint64_t v13 = (void *)sub_100019310(a6, 40LL);
  v13[2] = v12;
  v13[3] = a3;
  v13[4] = a4;
  swift_retain();
  swift_retain();
  NIOThreadPool.submit(_:)();
  swift_release();
  return v12;
}

uint64_t sub_1000EDACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v8 = sub_1000175B0(&qword_1002B0C60);
  uint64_t v9 = EventLoop.makePromise<A>(of:file:line:)( v8,  (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/NIOThreadPool.swift",  115LL,  2LL,  224LL,  ObjectType,  v8,  a2);
  uint64_t v10 = (void *)swift_allocObject(&unk_1002829F0, 40LL, 7LL);
  v10[2] = v9;
  void v10[3] = a3;
  v10[4] = a4;
  swift_retain();
  swift_retain();
  NIOThreadPool.submit(_:)();
  swift_release();
  return v9;
}

uint64_t sub_1000EDB98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v8 = type metadata accessor for NIOFileHandle();
  uint64_t v9 = EventLoop.makePromise<A>(of:file:line:)( v8,  (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/NIOThreadPool.swift",  115LL,  2LL,  224LL,  ObjectType,  v8,  a2);
  uint64_t v10 = (void *)swift_allocObject(&unk_1002829C8, 40LL, 7LL);
  v10[2] = v9;
  void v10[3] = a3;
  v10[4] = a4;
  swift_retain();
  swift_retain();
  NIOThreadPool.submit(_:)();
  swift_release();
  return v9;
}

void NonBlockingFileIO.changeFileSize(fileHandle:size:eventLoop:)()
{
  uint64_t v4 = sub_100019310((uint64_t)&unk_100282898, 32LL);
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  swift_retain();
  sub_1000EDA04(v1, v0, (uint64_t)sub_1000EE604, v4, (uint64_t)&type metadata for ()[8], (uint64_t)&unk_100282A68);
  sub_1000EF038();
  sub_10002A3D4();
}

void sub_1000EDCDC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16) == 1)
  {
    sub_100170B50();
  }

  else
  {
    unint64_t v2 = sub_100025100();
    uint64_t v3 = swift_allocError(&type metadata for IOError, v2, 0LL, 0LL);
    *(void *)uint64_t v4 = 0xD00000000000001FLL;
    *(void *)(v4 + 8) = 0x80000001002194A0LL;
    *(_DWORD *)(v4 + 16) = 9;
    swift_willThrow(v3);
  }

uint64_t NonBlockingFileIO.readFileSize(fileHandle:eventLoop:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000EDA04(a2, a3, (uint64_t)sub_1000EE61C, a1, (uint64_t)&type metadata for Int64, (uint64_t)&unk_100282A40);
  swift_release();
  return v6;
}

void sub_1000EDE0C(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(_BYTE *)(a1 + 16) == 1)
  {
    sub_100170BEC();
    if (!v2)
    {
      sub_100170BEC();
      uint64_t v6 = v5;
      sub_100170BEC();
      *a2 = v6;
    }
  }

  else
  {
    unint64_t v7 = sub_100025100();
    uint64_t v8 = swift_allocError(&type metadata for IOError, v7, 0LL, 0LL);
    *(void *)uint64_t v9 = 0xD00000000000001FLL;
    *(void *)(v9 + 8) = 0x80000001002194A0LL;
    *(_DWORD *)(v9 + 16) = 9;
    swift_willThrow(v8);
  }

void NonBlockingFileIO.write(fileHandle:buffer:eventLoop:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void sub_1000EDF64( uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  unint64_t v9 = HIDWORD(a5);
  uint64_t v10 = (HIDWORD(a5) - a5);
  if (HIDWORD(a5) < a5)
  {
    __break(1u);
  }

  else if ((_DWORD)v10)
  {
    int v11 = a6;
    unint64_t v18 = HIWORD(a6);
    unint64_t v14 = HIDWORD(a6);
    uint64_t v17 = swift_allocObject(&unk_100282A18, 65LL, 7LL);
    *(void *)(v17 + 16) = a4;
    *(_DWORD *)(v17 + 24) = v8;
    *(_DWORD *)(v17 + 28) = v9;
    *(_DWORD *)(v17 + 32) = v11;
    *(_WORD *)(v17 + 36) = v14;
    *(_BYTE *)(v17 + 38) = v18;
    *(void *)(v17 + 4sub_1000B58F0(v0, 0) = v10;
    *(void *)(v17 + 48) = a1;
    *(void *)(v17 + 56) = a2;
    *(_BYTE *)(v17 + 64) = a3 & 1;
    swift_retain();
    swift_retain();
    sub_1000EDA04(a7, a8, (uint64_t)sub_1000EED28, v17, (uint64_t)&type metadata for ()[8], (uint64_t)&unk_100282A68);
    swift_release();
  }

  else
  {
    swift_getObjectType(a7);
    EventLoop.makeSucceededFuture<A>(_:file:line:)();
  }

void NonBlockingFileIO.write(fileHandle:toOffset:buffer:eventLoop:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void sub_1000EE0FC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v8 = v7;
  int v27 = a7;
  unsigned int v10 = a2;
  unint64_t v11 = HIDWORD(a2);
  uint64_t v12 = a1 + 24;
  uint64_t v13 = (_BYTE *)(a5 + 16);
  swift_retain();
  swift_beginAccess(v12, v26, 0LL, 0LL);
  swift_beginAccess(v13, v25, 0LL, 0LL);
  uint64_t v14 = 0LL;
  while (v11 >= v10)
  {
    if (__OFSUB__(a4, v14)) {
      goto LABEL_22;
    }
    if (a4 - v14 != (_DWORD)v11 - v10) {
      goto LABEL_23;
    }
    if (*v13 != 1)
    {
      unint64_t v20 = sub_100025100();
      uint64_t v21 = swift_allocError(&type metadata for IOError, v20, 0LL, 0LL);
      *(void *)uint64_t v22 = 0xD00000000000001FLL;
      *(void *)(v22 + 8) = 0x80000001002194A0LL;
      *(_DWORD *)(v22 + 16) = 9;
LABEL_19:
      swift_willThrow(v21);
LABEL_20:
      swift_release();
      return;
    }

    if ((v27 & 1) != 0)
    {
      uint64_t v15 = v8;
      sub_1001709F8();
    }

    else
    {
      if (__OFADD__(a6, v14)) {
        goto LABEL_26;
      }
      uint64_t v15 = v8;
      sub_100170C88();
    }

    uint64_t v8 = v15;
    if (v15) {
      goto LABEL_20;
    }
    if ((v17 & 1) == 0)
    {
      unint64_t v23 = sub_1000EED60();
      uint64_t v21 = swift_allocError(&type metadata for NonBlockingFileIO.Error, v23, 0LL, 0LL);
      goto LABEL_19;
    }

    BOOL v18 = __CFADD__(v10, (_DWORD)v16);
    v10 += v16;
    if (v18) {
      goto LABEL_24;
    }
    BOOL v19 = __OFADD__(v14, v16);
    v14 += v16;
    if (v19) {
      goto LABEL_25;
    }
    if (v14 >= a4) {
      goto LABEL_20;
    }
  }

  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
}

void NonBlockingFileIO.openFile(path:eventLoop:)()
{
  uint64_t v4 = sub_100019310((uint64_t)&unk_1002828C0, 32LL);
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  swift_bridgeObjectRetain();
  sub_1000EDACC(v1, v0, (uint64_t)sub_1000EE658, v4);
  sub_1000EF038();
  sub_10002A3D4();
}

uint64_t sub_1000EE328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = NIOFileHandle.__allocating_init(path:mode:flags:)(a1, a2, 1, 0LL);
  if (!v3)
  {
    uint64_t v8 = result;
    swift_beginAccess(result + 16, v20, 0LL, 0LL);
    if (*(_BYTE *)(v8 + 16) == 1)
    {
      int v9 = *(_DWORD *)(v8 + 20);
      swift_retain();
      off_t v10 = sub_10002513C(v9, 0LL, 2);
      sub_10002513C(v9, 0LL, 0);
      uint64_t result = FileRegion.init(fileHandle:readerIndex:endIndex:)(v8, 0LL, v10);
      *(void *)a3 = v8;
      *(void *)(a3 + 8) = result;
      *(void *)(a3 + 16) = v16;
      *(_DWORD *)(a3 + 24) = v17;
      *(_WORD *)(a3 + 28) = v18;
      *(_BYTE *)(a3 + 3sub_1000B58F0(v0, 0) = v19;
    }

    else
    {
      unint64_t v11 = sub_100025100();
      uint64_t v12 = swift_allocError(&type metadata for IOError, v11, 0LL, 0LL);
      *(void *)uint64_t v13 = 0xD00000000000001FLL;
      *(void *)(v13 + 8) = 0x80000001002194A0LL;
      *(_DWORD *)(v13 + 16) = 9;
      swift_willThrow(v12);
      NIOFileHandle.close()();
      if (v15) {
        uint64_t v14 = swift_errorRelease(v15);
      }
      swift_willThrow(v14);
      return swift_release();
    }
  }

  return result;
}

uint64_t NonBlockingFileIO.openFile(path:mode:flags:eventLoop:)( uint64_t a1, uint64_t a2, char a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  __int16 v8 = a4;
  unint64_t v12 = HIDWORD(a4);
  uint64_t v13 = sub_100019310((uint64_t)&unk_1002828E8, 44LL);
  *(void *)(v13 + 16) = a1;
  *(void *)(v13 + 24) = a2;
  *(_BYTE *)(v13 + 32) = a3;
  *(_WORD *)(v13 + 36) = v8;
  *(_DWORD *)(v13 + 4sub_1000B58F0(v0, 0) = v12;
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_1000EDB98(a5, a6, (uint64_t)sub_1000EE694, v13);
  swift_release();
  return v14;
}

uint64_t sub_1000EE568@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = NIOFileHandle.__allocating_init(path:mode:flags:)(a1, a2, a3, a4 & 0xFFFFFFFF0000FFFFLL);
  if (!v5) {
    *a5 = result;
  }
  return result;
}

uint64_t sub_1000EE5E4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1000EE604()
{
}

void sub_1000EE61C(void *a1@<X8>)
{
}

uint64_t sub_1000EE634()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000EE658@<X0>(uint64_t a1@<X8>)
{
  return sub_1000EE328(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1000EE670()
{
  return swift_deallocObject(v0, 44LL, 7LL);
}

uint64_t sub_1000EE694@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000EE568( *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(_BYTE *)(v1 + 32),  *(unsigned __int16 *)(v1 + 36) | ((unint64_t)*(unsigned int *)(v1 + 40) << 32),  a1);
}

unint64_t sub_1000EE6C0()
{
  unint64_t result = qword_1002B0C50;
  if (!qword_1002B0C50)
  {
    unint64_t result = swift_getWitnessTable( protocol conformance descriptor for NonBlockingFileIO.Error,  &type metadata for NonBlockingFileIO.Error);
    atomic_store(result, (unint64_t *)&qword_1002B0C50);
  }

  return result;
}

ValueMetadata *type metadata accessor for NonBlockingFileIO()
{
  return &type metadata for NonBlockingFileIO;
}

uint64_t storeEnumTagSinglePayload for NonBlockingFileIO.Error(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1000EE74C + 4 * asc_1001FFA10[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000EE76C + 4 * byte_1001FFA15[v4]))();
  }
}

_BYTE *sub_1000EE74C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1000EE76C(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000EE774(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000EE77C(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000EE784(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000EE78C(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NonBlockingFileIO.Error()
{
  return &type metadata for NonBlockingFileIO.Error;
}

uint64_t sub_1000EE7A8(char a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if ((a1 & 1) != 0)
  {
    unint64_t v3 = sub_1000EECB0();
    uint64_t v4 = swift_allocError(&type metadata for NIOThreadPoolError.ThreadPoolInactive, v3, 0LL, 0LL);
    swift_errorRetain(v4);
    sub_100099090();
    swift_errorRelease(v4);
    return swift_errorRelease(v4);
  }

  else
  {
    a3(&v7);
    uint64_t v5 = v7;
    swift_retain();
    sub_100099090();
    return swift_release_n(v5, 2LL);
  }

uint64_t sub_1000EE8CC(char a1, uint64_t a2, void (*a3)(void))
{
  if ((a1 & 1) != 0)
  {
    unint64_t v4 = sub_1000EECB0();
    uint64_t v5 = swift_allocError(&type metadata for NIOThreadPoolError.ThreadPoolInactive, v4, 0LL, 0LL);
    swift_errorRetain(v5);
    sub_100098A70(v5, 1LL, a2);
    swift_errorRelease(v5);
    return swift_errorRelease(v5);
  }

  else
  {
    a3();
    return sub_100098A70(0LL, 0LL, a2);
  }

uint64_t sub_1000EE994(char a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if ((a1 & 1) != 0)
  {
    unint64_t v4 = sub_1000EECB0();
    uint64_t v5 = swift_allocError(&type metadata for NIOThreadPoolError.ThreadPoolInactive, v4, 0LL, 0LL);
    swift_errorRetain(v5);
    sub_100099178(v5, 1LL, a2);
    swift_errorRelease(v5);
    return swift_errorRelease(v5);
  }

  else
  {
    a3(&v7);
    return sub_100099178(v7, 0LL, a2);
  }

uint64_t sub_1000EEA60(char a1, uint64_t a2, void (*a3)(void *__return_ptr))
{
  if ((a1 & 1) != 0)
  {
    unint64_t v4 = sub_1000EECB0();
    uint64_t v5 = swift_allocError(&type metadata for NIOThreadPoolError.ThreadPoolInactive, v4, 0LL, 0LL);
    swift_errorRetain(v5);
    sub_100099214(v5, 0LL, 0LL, 0x100000000000000uLL, a2);
    swift_errorRelease(v5);
    return swift_errorRelease(v5);
  }

  else
  {
    a3(v11);
    uint64_t v6 = v11[0];
    uint64_t v7 = v11[1];
    uint64_t v8 = v11[2];
    unint64_t v9 = v12 | ((unint64_t)v13 << 32) | ((unint64_t)v14 << 48);
    swift_retain();
    swift_retain();
    sub_100099214(v6, v7, v8, v9, a2);
    swift_release_n(v7, 2LL);
    return swift_release_n(v6, 2LL);
  }

uint64_t sub_1000EEBB8(char a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if ((a1 & 1) != 0)
  {
    unint64_t v4 = sub_1000EECB0();
    uint64_t v5 = swift_allocError(&type metadata for NIOThreadPoolError.ThreadPoolInactive, v4, 0LL, 0LL);
    swift_errorRetain(v5);
    sub_100099358(v5, 1LL, a2);
    swift_errorRelease(v5);
    return swift_errorRelease(v5);
  }

  else
  {
    a3(&v9);
    uint64_t v6 = v9;
    uint64_t v7 = swift_retain();
    sub_100099358(v7, 0LL, a2);
    return swift_release_n(v6, 2LL);
  }

uint64_t sub_1000EECA0(char a1)
{
  return sub_1000EEBB8(a1 & 1, *(void *)(v1 + 16), *(void (**)(uint64_t *__return_ptr))(v1 + 24));
}

unint64_t sub_1000EECB0()
{
  unint64_t result = qword_1002B0C58;
  if (!qword_1002B0C58)
  {
    unint64_t result = swift_getWitnessTable( protocol conformance descriptor for NIOThreadPoolError.ThreadPoolInactive,  &type metadata for NIOThreadPoolError.ThreadPoolInactive);
    atomic_store(result, (unint64_t *)&qword_1002B0C58);
  }

  return result;
}

uint64_t sub_1000EECF0(char a1)
{
  return sub_1000EEA60(a1 & 1, *(void *)(v1 + 16), *(void (**)(void *__return_ptr))(v1 + 24));
}

uint64_t sub_1000EED00()
{
  return swift_deallocObject(v0, 65LL, 7LL);
}

void sub_1000EED28()
{
}

unint64_t sub_1000EED60()
{
  unint64_t result = qword_1002B0C68;
  if (!qword_1002B0C68)
  {
    unint64_t result = swift_getWitnessTable( protocol conformance descriptor for NonBlockingFileIO.Error,  &type metadata for NonBlockingFileIO.Error);
    atomic_store(result, (unint64_t *)&qword_1002B0C68);
  }

  return result;
}

uint64_t sub_1000EEDA0(char a1)
{
  return sub_1000EE994(a1 & 1, *(void *)(v1 + 16), *(void (**)(uint64_t *__return_ptr))(v1 + 24));
}

uint64_t sub_1000EEDB4(char a1)
{
  return sub_1000EE8CC(a1 & 1, *(void *)(v1 + 16), *(void (**)(void))(v1 + 24));
}

uint64_t sub_1000EEDC4()
{
  return swift_deallocObject(v0, 39LL, 7LL);
}

uint64_t sub_1000EEDE4()
{
  return swift_deallocObject(v0, 49LL, 7LL);
}

void sub_1000EEE0C(uint64_t a1@<X8>)
{
}

uint64_t sub_1000EEE30()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000EEE54(char a1)
{
  return sub_1000EE7A8(a1 & 1, *(void *)(v1 + 16), *(void (**)(uint64_t *__return_ptr))(v1 + 24));
}

uint64_t sub_1000EEE64()
{
  return swift_deallocObject(v0, 152LL, 7LL);
}

uint64_t sub_1000EEEA4()
{
  return sub_1000ED16C( v1,  v2,  v3,  v4,  v5,  v6,  v7,  v8,  *(void *)(v0 + 72),  *(void *)(v0 + 80),  *(void *)(v0 + 88),  *(_BYTE *)(v0 + 96),  *(void *)(v0 + 104),  *(void *)(v0 + 112),  *(void *)(v0 + 120),  *(void *)(v0 + 128),  *(void *)(v0 + 136),  *(void *)(v0 + 144));
}

uint64_t sub_1000EEEF0()
{
  return swift_deallocObject(v0, 160LL, 7LL);
}

uint64_t sub_1000EEF34()
{
  return sub_1000ED394( v1,  v2,  v3,  v4,  v5,  v6,  v7,  v8,  *(_BYTE *)(v0 + 72),  *(void *)(v0 + 80),  *(void *)(v0 + 88),  *(void *)(v0 + 96),  *(void *)(v0 + 104),  *(void *)(v0 + 112),  *(void *)(v0 + 120),  *(void *)(v0 + 128),  *(void *)(v0 + 136),  *(void *)(v0 + 144),  *(void *)(v0 + 152));
}

uint64_t sub_1000EEF7C()
{
  return v0;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000EF018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FileRegion.readableBytes.getter(a1, a2, a3 & 0xFFFFFFFFFFFFFFLL);
}

  ;
}

uint64_t sub_1000EF038()
{
  return swift_release(v0);
}

uint64_t sub_1000EF044@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = sub_1001C0B84();
  unint64_t v5 = v3;
  if (v3)
  {
    sub_1000EF15C(v2, v3, v4 & 1);
    swift_bridgeObjectRelease();
    sub_1001C1C90();
    uint64_t v6 = v14;
    unint64_t v5 = v15;
    uint64_t v7 = v16;
    uint64_t v8 = v17;
    unint64_t v9 = v18 | ((unint64_t)v19 << 32) | ((unint64_t)v20 << 48);
    uint64_t v10 = 3LL;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    unint64_t v9 = 0LL;
    uint64_t v10 = 21LL;
  }

  ASOctaneSupportXPCService::HTTPVersion v11 = HTTPVersion.init(major:minor:)(1LL, 1LL);
  uint64_t v12 = type metadata accessor for HTTPResponseHead._Storage();
  uint64_t result = swift_allocObject(v12, 44LL, 7LL);
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 32) = v10;
  *(ASOctaneSupportXPCService::HTTPVersion *)(result + 4sub_1000B58F0(v0, 0) = v11;
  *(void *)a1 = result;
  *(void *)(a1 + 8) = _swiftEmptyArrayStorage;
  *(_BYTE *)(a1 + 16) = 2;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 4sub_1000B58F0(v0, 0) = v7;
  *(void *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 62) = BYTE6(v9);
  *(_WORD *)(a1 + 6sub_1000B58F0(v0, 0) = WORD2(v9);
  *(_DWORD *)(a1 + 56) = v9;
  return result;
}

uint64_t sub_1000EF15C(unint64_t a1, unint64_t a2, char a3)
{
  char v6 = a3 & 1;
  sub_100056BD8(a1, a2);
  if ((v7 & 1) != 0 || (sub_100019F58((void *)(v3 + 88), *(void *)(v3 + 112)), (uint64_t v8 = sub_100089154()) == 0))
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    sub_100018F68(v12, (uint64_t)qword_1002EB9D0);
    uint64_t v13 = swift_bridgeObjectRetain_n(a2, 2LL);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v16 = static os_log_type_t.error.getter(v14, v15);
    if (os_log_type_enabled(v14, v16))
    {
      uint64_t v17 = (uint8_t *)sub_100019464(12LL);
      uint64_t v18 = sub_100019464(32LL);
      uint64_t v25 = v18;
      *(_DWORD *)uint64_t v17 = 136315138;
      unint64_t v23 = sub_100056BD8(a1, a2);
      v24[0] = v19 & 1;
      uint64_t v20 = sub_1000175B0(&qword_1002AC948);
      uint64_t v21 = String.init<A>(describing:)(&v23, v20);
      unint64_t v23 = sub_1000CF360(v21, v22, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v17 + 4);
      sub_10009B720();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v16, "no transaction for id: %s", v17, 0xCu);
      swift_arrayDestroy(v18, 1LL);
      sub_10001A408(v18);
      sub_10001A408((uint64_t)v17);
    }

    else
    {

      sub_10009B720();
    }

    return 0LL;
  }

  else
  {
    unint64_t v9 = (void *)v8;
    sub_1000B85C8(3u);
    if ((v10 & 1) != 0 && (sub_1000B3D80() & 1) == 0)
    {
      sub_100019F58((void *)(v3 + 88), *(void *)(v3 + 112));
      sub_100088DDC(v9, 1, v6);

      return 2LL;
    }

    else
    {

      return 1LL;
    }
  }

uint64_t type metadata accessor for RefundRequestRoute()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService18RefundRequestRoute);
}

void *sub_1000EF52C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100032050();
    uint64_t v3 = a1 + 56;
    do
    {
      uint64_t v4 = *(void *)(v3 - 24);
      swift_bridgeObjectRetain();
      uint64_t v5 = static String._fromSubstring(_:)(v4);
      uint64_t v7 = v6;
      swift_bridgeObjectRelease();
      unint64_t v8 = _swiftEmptyArrayStorage[2];
      if (v8 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_100032050();
      }
      _swiftEmptyArrayStorage[2] = v8 + 1;
      unint64_t v9 = &_swiftEmptyArrayStorage[2 * v8];
      v9[4] = v5;
      v9[5] = v7;
      v3 += 32LL;
      --v1;
    }

    while (v1);
  }

  return _swiftEmptyArrayStorage;
}

uint64_t HTTPServerUpgradeHandler.__allocating_init(upgraders:httpEncoder:extraHTTPHandlers:upgradeCompletionHandler:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = sub_100019310(v5, 104LL);
  HTTPServerUpgradeHandler.init(upgraders:httpEncoder:extraHTTPHandlers:upgradeCompletionHandler:)(a1, a2, a3, a4, a5);
  return v11;
}

Swift::Int HTTPServerUpgradeErrors.hashValue.getter()
{
  return sub_100035698();
}

uint64_t HTTPServerUpgradeHandler.init(upgraders:httpEncoder:extraHTTPHandlers:upgradeCompletionHandler:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_BYTE *)(v5 + 56) = 0;
  *(void *)(v5 + 64) = 0LL;
  *(void *)(v5 + 72) = 0LL;
  sub_10002AF70(0x10uLL);
  *(void *)(v5 + 8sub_1000B58F0(v0, 0) = v11;
  *(void *)(v5 + 88) = v12;
  *(void *)(v5 + 96) = v13;
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14)
  {
    uint64_t v39 = a4;
    uint64_t v40 = a2;
    uint64_t v41 = a5;
    uint64_t v42 = a3;
    uint64_t v43 = v5;
    uint64_t v15 = a1 + 32;
    os_log_type_t v16 = _swiftEmptyDictionarySingleton;
    while (1)
    {
      sub_100023BAC(v15, (uint64_t)v46);
      uint64_t v17 = v47;
      uint64_t v18 = v48;
      sub_100019F58(v46, v47);
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
      Swift::String v19 = String.lowercased()();
      sub_10001EDA0();
      sub_100023BAC((uint64_t)v46, (uint64_t)v45);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
      char v44 = v16;
      uint64_t v21 = sub_1000F2C4C();
      unint64_t v23 = sub_1000F168C(v21, v22);
      uint64_t v25 = v16[2];
      BOOL v26 = (v24 & 1) == 0;
      Swift::Int v27 = v25 + v26;
      if (__OFADD__(v25, v26)) {
        break;
      }
      unint64_t v28 = v23;
      char v29 = v24;
      sub_1000175B0(&qword_1002B0D50);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v27))
      {
        uint64_t v30 = sub_1000F2C4C();
        unint64_t v32 = sub_1000F168C(v30, v31);
        if ((v29 & 1) != (v33 & 1)) {
          goto LABEL_17;
        }
        unint64_t v28 = v32;
      }

      os_log_type_t v16 = v44;
      if ((v29 & 1) != 0)
      {
        int v34 = (void *)(v44[7] + 40 * v28);
        sub_100019F7C(v34);
        sub_10002A118(v45, (uint64_t)v34);
      }

      else
      {
        v44[(v28 >> 6) + 8] |= 1LL << v28;
        *(Swift::String *)(v44[6] + 16 * v28) = v19;
        sub_10002A118(v45, v44[7] + 40 * v28);
        uint64_t v35 = v44[2];
        BOOL v36 = __OFADD__(v35, 1LL);
        uint64_t v37 = v35 + 1;
        if (v36) {
          goto LABEL_16;
        }
        v44[2] = v37;
        swift_bridgeObjectRetain();
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100019F7C(v46);
      v15 += 40LL;
      if (!--v14)
      {
        swift_bridgeObjectRelease();
        a3 = v42;
        uint64_t v5 = v43;
        a2 = v40;
        a5 = v41;
        a4 = v39;
        goto LABEL_14;
      }
    }

    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
  }

  else
  {
    swift_bridgeObjectRelease();
    os_log_type_t v16 = _swiftEmptyDictionarySingleton;
LABEL_14:
    *(void *)(v5 + 16) = v16;
    *(void *)(v5 + 24) = a4;
    *(void *)(v5 + 32) = a5;
    *(void *)(v5 + 4sub_1000B58F0(v0, 0) = a2;
    *(void *)(v5 + 48) = a3;
    return v5;
  }

  return result;
}

uint64_t HTTPServerUpgradeHandler.channelRead(context:data:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  if ((*(_BYTE *)(v3 + 56) & 1) != 0)
  {
    sub_10002A718(v3 + 80, (uint64_t)v16, 33LL);
    sub_10002B894(a2);
    return swift_endAccess(v16);
  }

  else
  {
    sub_1000175B0(&qword_1002AA4A0);
    uint64_t v9 = sub_10002D534();
    uint64_t v10 = v7;
    uint64_t v11 = v8;
    unint64_t v12 = HIBYTE(v8);
    uint64_t v13 = *(void (**)(uint64_t))(v3 + 64);
    switch((unint64_t)v13)
    {
      case 0uLL:
        sub_1000EFAAC(a1, v9, v7, v8);
        goto LABEL_11;
      case 1uLL:
        if ((_DWORD)v12 != 2) {
          goto LABEL_11;
        }
        uint64_t result = sub_1000F2C38();
        *(_BYTE *)(v3 + 56) = 1;
        break;
      case 2uLL:
        __break(1u);
        goto LABEL_13;
      case 3uLL:
        ChannelHandlerContext.fireChannelRead(_:)();
        goto LABEL_11;
      case 4uLL:
LABEL_13:
        __break(1u);
        JUMPOUT(0x1000EFA98LL);
      default:
        if ((_DWORD)v12 == 2)
        {
          uint64_t v14 = *(void *)(v3 + 72);
          *(_BYTE *)(v3 + 56) = 1;
          uint64_t v15 = swift_retain();
          v13(v15);
          sub_1000F2C38();
          uint64_t result = sub_1000F2460((unint64_t)v13, v14);
        }

        else
        {
LABEL_11:
          uint64_t result = sub_100034F80(v9, v10, v11, v12);
        }

        break;
    }
  }

  return result;
}

void sub_1000EFAAC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (HIBYTE(a4))
  {
    unint64_t v16 = sub_1000F2824();
    uint64_t v17 = swift_allocError(&type metadata for HTTPServerUpgradeErrors, v16, 0LL, 0LL);
    ChannelHandlerContext.fireErrorCaught(_:)();
    swift_errorRelease(v17);
    sub_1000EFF30(a1, a2, a3, a4);
  }

  else
  {
    swift_retain();
    swift_bridgeObjectRetain();
    HTTPHeaders.subscript.getter();
    uint64_t v10 = sub_1000EF52C(v9);
    swift_bridgeObjectRelease();
    if (v10[2])
    {
      unint64_t v11 = *(void *)(v4 + 64);
      uint64_t v12 = *(void *)(v4 + 72);
      *(_OWORD *)(v4 + 64) = xmmword_1001FA330;
      sub_1000F2460(v11, v12);
      sub_1000F0080(a1, a2, a3, a4, (uint64_t)v10);
      swift_bridgeObjectRelease();
      uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 48LL);
      uint64_t v14 = swift_unknownObjectRetain(v13);
      sub_10012BF98(v14);
      swift_release();
      swift_unknownObjectRelease(v13);
      uint64_t v15 = swift_allocObject(&unk_100282E10, 56LL, 7LL);
      *(void *)(v15 + 16) = a1;
      *(void *)(v15 + 24) = v4;
      *(void *)(v15 + 32) = a2;
      *(void *)(v15 + 4sub_1000B58F0(v0, 0) = a3;
      *(_BYTE *)(v15 + 54) = BYTE6(a4);
      *(_WORD *)(v15 + 52) = WORD2(a4);
      *(_DWORD *)(v15 + 48) = a4;
      *(_BYTE *)(v15 + 55) = 0;
      sub_10007D6D0(a2, a3, a4, 0);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      sub_100100570();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }

    else
    {
      swift_bridgeObjectRelease();
      sub_1000EFF30(a1, a2, a3, a4);
      swift_bridgeObjectRelease();
    }

    swift_release();
  }

void HTTPServerUpgradeHandler.removeHandler(context:removalToken:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 10;
  sub_10002A718((uint64_t)(v2 + 10), (uint64_t)v24, 0LL);
LABEL_2:
  uint64_t v5 = v2[11];
  uint64_t v6 = v2[12];
  uint64_t v7 = v6 - v5;
  if (v6 < v5) {
    v7 += *(void *)(*v4 + 16LL);
  }
  if (v7 < 1)
  {
    ChannelHandlerContext.leavePipeline(removalToken:)(a2);
  }

  else
  {
    while (1)
    {
      BOOL v8 = __OFSUB__(v6, v5);
      uint64_t v9 = v6 - v5;
      if (v9 < 0 != v8) {
        v9 += *(void *)(*v4 + 16LL);
      }
      if (v9 < 1)
      {
        ChannelHandlerContext.fireChannelReadComplete()();
        goto LABEL_2;
      }

      sub_10002A718((uint64_t)(v2 + 10), (uint64_t)v21, 33LL);
      unint64_t v10 = v2[11];
      uint64_t v11 = v2[12];
      if (v11 == v10)
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        sub_100034FD0();
        unint64_t v16 = "Negative value is not representable";
        uint64_t v17 = 35LL;
        goto LABEL_30;
      }

      if ((v10 & 0x8000000000000000LL) != 0) {
        goto LABEL_28;
      }
      if (HIDWORD(v10)) {
        break;
      }
      uint64_t v12 = v2[10];
      if (v10 >= *(void *)(v12 + 16)) {
        goto LABEL_24;
      }
      sub_1000F2474(v12 + (v10 << 6) + 32, (uint64_t)&v18);
      if (v20[24] == 255) {
        goto LABEL_27;
      }
      v22[0] = v18;
      v22[1] = v19;
      v23[0] = *(_OWORD *)v20;
      *(_OWORD *)((char *)v23 + 9) = *(_OWORD *)&v20[9];
      uint64_t v13 = v11 - v10;
      if (v13 < 1) {
        goto LABEL_25;
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12);
      *uint64_t v4 = v12;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000F23F0();
        uint64_t v12 = v15;
      }

      __int128 v19 = 0u;
      memset(v20, 0, 24);
      __int128 v18 = 0u;
      _BYTE v20[24] = -1;
      *uint64_t v4 = v12;
      if (v10 >= *(void *)(v12 + 16)) {
        goto LABEL_26;
      }
      sub_10007D688((uint64_t)&v18, v12 + (v10 << 6) + 32);
      v2[11] = (*(void *)(v2[10] + 16LL) - 1LL) & (v10 + 1);
      swift_endAccess(v21);
      ChannelHandlerContext.fireChannelRead(_:)();
      sub_1000324E8((uint64_t)v22);
      uint64_t v5 = v2[11];
      uint64_t v6 = v2[12];
    }

    sub_100034FD0();
    unint64_t v16 = "Not enough bits to represent the passed value";
    uint64_t v17 = 45LL;
LABEL_30:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11LL, 2LL, v16, v17, 2LL, "Swift/Integers.swift", 20LL);
    __break(1u);
  }

void sub_1000EFF30(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v8 = HIBYTE(a4);
  unint64_t v9 = *(void *)(v4 + 64);
  uint64_t v10 = *(void *)(v4 + 72);
  *(_OWORD *)(v4 + 64) = xmmword_1001FA360;
  sub_1000F2460(v9, v10);
  if ((*(_BYTE *)(v4 + 56) & 1) != 0)
  {
    uint64_t v11 = sub_1000175B0(&qword_1002AA4A0);
    uint64_t v14 = v11;
    *(void *)uint64_t v12 = a2;
    *(void *)&v12[8] = a3;
    v12[22] = BYTE6(a4);
    *(_WORD *)&v12[20] = WORD2(a4);
    *(_DWORD *)&v12[16] = a4;
    char v13 = v8;
    char v15 = 2;
    sub_10007D6D0(a2, a3, a4, v8);
    ChannelHandlerContext.fireChannelRead(_:)();
    sub_1000324E8((uint64_t)v12);
    uint64_t v14 = v11;
    memset(v12, 0, sizeof(v12));
    char v13 = 2;
    char v15 = 2;
  }

  else
  {
    uint64_t v14 = sub_1000175B0(&qword_1002AA4A0);
    *(void *)uint64_t v12 = a2;
    *(void *)&v12[8] = a3;
    v12[22] = BYTE6(a4);
    *(_WORD *)&v12[20] = WORD2(a4);
    *(_DWORD *)&v12[16] = a4;
    char v13 = v8;
    char v15 = 2;
    sub_10007D6D0(a2, a3, a4, v8);
  }

  ChannelHandlerContext.fireChannelRead(_:)();
  sub_1000324E8((uint64_t)v12);
  ChannelHandlerContext.fireChannelReadComplete()();
  ChannelPipeline.removeHandler(context:promise:)();
}

void sub_1000F0080(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 + 16);
  if (v8)
  {
    sub_100032050();
    uint64_t v9 = v7 + 56;
    do
    {
      swift_bridgeObjectRetain();
      Swift::String v10 = Substring.lowercased()();
      swift_bridgeObjectRelease();
      unint64_t v11 = _swiftEmptyArrayStorage[2];
      if (v11 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_100032050();
      }
      _swiftEmptyArrayStorage[2] = v11 + 1;
      *(Swift::String *)&_swiftEmptyArrayStorage[2 * v11 + 4] = v10;
      v9 += 32LL;
      --v8;
    }

    while (v8);
  }

  swift_bridgeObjectRelease();
  uint64_t v12 = sub_100186F84((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v13 = *(void *)(a3 + 16);
  uint64_t v14 = sub_100018BC0(0LL, v13);
  if (v14)
  {
    uint64_t v15 = v14;
    swift_bridgeObjectRetain();
    sub_100032050();
    if ((v15 & 0x8000000000000000LL) == 0)
    {
      uint64_t v16 = a3 + 40;
      while (v13)
      {
        Swift::String v17 = String.lowercased()();
        unint64_t v18 = _swiftEmptyArrayStorage[2];
        if (v18 >= _swiftEmptyArrayStorage[3] >> 1) {
          sub_100032050();
        }
        _swiftEmptyArrayStorage[2] = v18 + 1;
        *(Swift::String *)&_swiftEmptyArrayStorage[2 * v18 + 4] = v17;
        --v13;
        v16 += 32LL;
        if (!--v15)
        {
          swift_bridgeObjectRelease();
          goto LABEL_14;
        }
      }

      __break(1u);
    }

    __break(1u);
  }

  else
  {
LABEL_14:
    uint64_t v19 = sub_100186F84((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRetain();
    sub_1000F03E0(a1, a5, 0LL, a2, a3, a4, v19, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

void sub_1000F02F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v7 = *(void (**)(uint64_t))a1;
  if (*(void *)a1)
  {
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v9 = swift_allocObject(&unk_100282E38, 32LL, 7LL);
    *(void *)(v9 + 16) = v7;
    *(void *)(v9 + 24) = v8;
    if (*(void *)(a3 + 64) == 1LL)
    {
      uint64_t v10 = *(void *)(a3 + 72);
      *(void *)(a3 + 64) = sub_1000F28D4;
      *(void *)(a3 + 72) = v9;
      sub_100034E9C((uint64_t)v7, v8);
      swift_retain();
      sub_1000F2460(1uLL, v10);
      if (*(_BYTE *)(a3 + 56) == 1)
      {
        uint64_t v11 = swift_retain();
        v7(v11);
        swift_release();
      }

      sub_100034E8C((uint64_t)v7, v8);
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    sub_1000EFF30(a2, a4, a5, a6);
  }

uint64_t sub_1000F03E0( uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9 = *(void *)(a2 + 16);
  if (v9 != a3)
  {
    if (v9 <= a3)
    {
      __break(1u);
      return result;
    }

    uint64_t v13 = v8;
    uint64_t v65 = result;
    uint64_t v18 = a2 + 16 * a3;
    uint64_t v19 = *(void *)(v18 + 40);
    uint64_t v20 = a3 + 1;
    uint64_t v21 = *(void *)(v8 + 16);
    uint64_t v57 = *(void *)(v18 + 32);
    String.lowercased()();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10012A410(v21, (uint64_t)&v66);
    swift_bridgeObjectRelease();
    if (!v67)
    {
      swift_bridgeObjectRelease();
      sub_1000F28DC((uint64_t)&v66);
      uint64_t v12 = sub_1000F2C20( v65,  a2,  v20,  a4,  v31,  v32,  v33,  v34,  v46,  v47,  v48,  v49,  v50,  v51,  v52,  v53,  v55,  v57,  v58,  v60,  v62,  a6);
      swift_bridgeObjectRelease();
      return v12;
    }

    uint64_t v56 = v20;
    uint64_t v59 = a7;
    uint64_t v61 = a8;
    sub_10002A118(&v66, (uint64_t)v68);
    uint64_t v22 = v69;
    uint64_t v23 = v70;
    sub_100019F58(v68, v69);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(v22, v23);
    uint64_t v25 = *(void *)(v24 + 16);
    if (v25)
    {
      uint64_t v52 = a5;
      uint64_t v53 = v13;
      *(void *)&__int128 v66 = _swiftEmptyArrayStorage;
      sub_100032050();
      BOOL v26 = (void *)v66;
      uint64_t v27 = v24 + 40;
      do
      {
        Swift::String v28 = String.lowercased()();
        *(void *)&__int128 v66 = v26;
        unint64_t v29 = v26[2];
        if (v29 >= v26[3] >> 1)
        {
          sub_100032050();
          BOOL v26 = (void *)v66;
        }

        v27 += 16LL;
        v26[2] = v29 + 1;
        *(Swift::String *)&v26[2 * v29 + 4] = v28;
        --v25;
      }

      while (v25);
      swift_bridgeObjectRelease();
      uint64_t v30 = a4;
      uint64_t v13 = v53;
    }

    else
    {
      swift_bridgeObjectRelease();
      BOOL v26 = _swiftEmptyArrayStorage;
      uint64_t v30 = a4;
    }

    uint64_t v35 = sub_100186F84((uint64_t)v26);
    if ((sub_1000F087C(v59, v35) & 1) != 0)
    {
      char v36 = sub_1000F087C(v61, v35);
      sub_10001EDA0();
      if ((v36 & 1) != 0)
      {
        sub_1000F0B60(v57, v19);
        uint64_t v54 = v13;
        uint64_t v37 = v70;
        sub_100019F58(v68, v69);
        uint64_t v38 = sub_100094338();
        (*(void (**)(uint64_t))(v37 + 24))(v38);
        swift_unknownObjectRelease(v38);
        swift_bridgeObjectRelease();
        sub_100023BAC((uint64_t)v68, (uint64_t)&v66);
        uint64_t v39 = sub_100019310((uint64_t)&unk_100282E60, 112LL);
        *(void *)(v39 + 16) = v54;
        *(void *)(v39 + 24) = v65;
        *(void *)(v39 + 32) = v30;
        *(void *)(v39 + 4sub_1000B58F0(v0, 0) = a5;
        *(_BYTE *)(v39 + 48) = a6;
        sub_10002A118(&v66, v39 + 56);
        *(void *)(v39 + 96) = v57;
        *(void *)(v39 + 104) = v19;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v40 = sub_100172078( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO /HTTPServerUpgradeHandler.swift",  126LL,  2LL,  215LL,  (uint64_t)sub_1000F2958,  v39);
        swift_release();
        swift_release();
        swift_retain_n(v30, 2LL);
        swift_bridgeObjectRetain_n(a5, 2LL);
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v41 = swift_bridgeObjectRetain();
        uint64_t v12 = sub_1000F6A08( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO /HTTPServerUpgradeHandler.swift",  126LL,  2LL,  245LL,  v40,  v65,  v54,  a2,  v56,  v30,  a5,  a6,  v59,  v41);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
LABEL_19:
        swift_bridgeObjectRelease();
        sub_100019F7C(v68);
        return v12;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
    }

    sub_10001EDA0();
    uint64_t v12 = sub_1000F2C20( v65,  a2,  v56,  v30,  v42,  v43,  v44,  v45,  v46,  v47,  v48,  v49,  v50,  v51,  v52,  v53,  v56,  v57,  v59,  v61,  v62,  a6);
    goto LABEL_19;
  }

  uint64_t v10 = *(void *)(*(void *)(result + 32) + 48LL);
  swift_getObjectType(v10);
  v68[0] = 0LL;
  v68[1] = 0LL;
  swift_unknownObjectRetain(v10);
  sub_1000175B0(&qword_1002B0E98);
  EventLoop.makeSucceededFuture<A>(_:file:line:)();
  uint64_t v12 = v11;
  swift_unknownObjectRelease(v10);
  return v12;
}

uint64_t sub_1000F087C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) < *(void *)(a2 + 16)) {
    return 0LL;
  }
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  uint64_t v33 = a2 + 56;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  if (-v5 < 64) {
    uint64_t v6 = ~(-1LL << -(char)v5);
  }
  else {
    uint64_t v6 = -1LL;
  }
  unint64_t v7 = v6 & *(void *)(a2 + 56);
  int64_t v32 = (unint64_t)(63 - v5) >> 6;
  uint64_t v34 = a1 + 56;
  uint64_t result = swift_bridgeObjectRetain();
  for (int64_t i = 0LL; ; int64_t i = v12)
  {
    if (v7)
    {
      unint64_t v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v11 = v10 | (i << 6);
      int64_t v12 = i;
      goto LABEL_23;
    }

    int64_t v13 = i + 1;
    if (__OFADD__(i, 1LL))
    {
      __break(1u);
      goto LABEL_44;
    }

    if (v13 >= v32) {
      goto LABEL_40;
    }
    unint64_t v14 = *(void *)(v33 + 8 * v13);
    int64_t v12 = i + 1;
    if (!v14)
    {
      int64_t v12 = i + 2;
      if (i + 2 >= v32) {
        goto LABEL_40;
      }
      unint64_t v14 = *(void *)(v33 + 8 * v12);
      if (!v14)
      {
        int64_t v12 = i + 3;
        if (i + 3 >= v32) {
          goto LABEL_40;
        }
        unint64_t v14 = *(void *)(v33 + 8 * v12);
        if (!v14) {
          break;
        }
      }
    }

uint64_t sub_1000F0B60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002A92A8);
  uint64_t v5 = swift_allocObject(v4, 96LL, 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_1001F3DD0;
  *(void *)(v5 + 32) = 0x697463656E6E6F63LL;
  *(void *)(v5 + 4sub_1000B58F0(v0, 0) = 0xEA00000000006E6FLL;
  *(void *)(v5 + 48) = 0x65646172677075LL;
  *(void *)(v5 + 56) = 0xE700000000000000LL;
  *(void *)(v5 + 64) = 0x65646172677075LL;
  *(void *)(v5 + 72) = 0xE700000000000000LL;
  *(void *)(v5 + 8sub_1000B58F0(v0, 0) = a1;
  *(void *)(v5 + 88) = a2;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_1000F0BFC@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t (**a9)()@<X8>, uint64_t a10)
{
  uint64_t v16 = *a1;
  char v17 = *((_BYTE *)a1 + 8);
  sub_100023BAC(a7, (uint64_t)v21);
  uint64_t v18 = swift_allocObject(&unk_100282E88, 128LL, 7LL);
  *(void *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  *(void *)(v18 + 32) = a4;
  *(void *)(v18 + 4sub_1000B58F0(v0, 0) = a5;
  *(_BYTE *)(v18 + 48) = a6;
  *(void *)(v18 + 56) = v16;
  *(_BYTE *)(v18 + 64) = v17;
  sub_10002A118(v21, v18 + 72);
  *(void *)(v18 + 112) = a8;
  *(void *)(v18 + 12sub_1000B58F0(v0, 0) = a10;
  *a9 = sub_1000F29D0;
  a9[1] = (uint64_t (*)())v18;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000F0CEC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v17 = *(void *)(a1 + 64);
  uint64_t v18 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = xmmword_1001FA350;
  sub_1000F2460(v17, v18);
  uint64_t v19 = sub_1000F108C(a2);
  uint64_t v20 = swift_allocObject(&unk_100282EB0, 65LL, 7LL);
  *(void *)(v20 + 16) = a1;
  *(void *)(v20 + 24) = a2;
  *(void *)(v20 + 32) = a3;
  *(void *)(v20 + 4sub_1000B58F0(v0, 0) = a4;
  *(_BYTE *)(v20 + 48) = a5;
  *(void *)(v20 + 56) = a6;
  *(_BYTE *)(v20 + 64) = a7;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000F2E10( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/HTTPServerU pgradeHandler.swift",  126LL,  2LL,  229LL,  v19,  (uint64_t)sub_1000F2A40,  v20);
  uint64_t v22 = v21;
  swift_release();
  swift_release();
  uint64_t v23 = swift_allocObject(&unk_100282ED8, 32LL, 7LL);
  *(void *)(v23 + 16) = a1;
  *(void *)(v23 + 24) = a2;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000F2E10( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/HTTPServerU pgradeHandler.swift",  126LL,  2LL,  231LL,  v22,  (uint64_t)sub_1000F2A78,  v23);
  swift_release();
  swift_release();
  uint64_t v24 = swift_allocObject(&unk_100282F00, 32LL, 7LL);
  *(void *)(v24 + 16) = a1;
  *(void *)(v24 + 24) = a2;
  uint64_t v25 = swift_allocObject(&unk_100282F28, 32LL, 7LL);
  *(void *)(v25 + 16) = sub_1000F2AA8;
  *(void *)(v25 + 24) = v24;
  swift_retain();
  swift_retain();
  uint64_t v26 = sub_100172010( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/HTTPS erverUpgradeHandler.swift",  126LL,  2LL,  233LL,  (uint64_t)sub_10007D590,  v25);
  swift_release();
  swift_release();
  sub_100023BAC(a8, (uint64_t)v32);
  uint64_t v27 = swift_allocObject(&unk_100282F50, 81LL, 7LL);
  sub_10002A118(v32, v27 + 16);
  *(void *)(v27 + 56) = a2;
  *(void *)(v27 + 64) = a3;
  *(void *)(v27 + 72) = a4;
  *(_BYTE *)(v27 + 8sub_1000B58F0(v0, 0) = a5;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000F2E10( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/HTTPServerU pgradeHandler.swift",  126LL,  2LL,  235LL,  v26,  (uint64_t)sub_1000F2B08,  v27);
  swift_release();
  swift_release();
  uint64_t v28 = swift_allocObject(&unk_100282F78, 72LL, 7LL);
  *(void *)(v28 + 16) = a2;
  *(void *)(v28 + 24) = a9;
  *(void *)(v28 + 32) = a10;
  *(void *)(v28 + 4sub_1000B58F0(v0, 0) = a3;
  *(void *)(v28 + 48) = a4;
  *(_BYTE *)(v28 + 56) = a5;
  *(void *)(v28 + 64) = a1;
  uint64_t v29 = swift_allocObject(&unk_100282FA0, 32LL, 7LL);
  *(void *)(v29 + 16) = sub_1000F2B5C;
  *(void *)(v29 + 24) = v28;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100172010( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/HTTPServerU pgradeHandler.swift",  126LL,  2LL,  237LL,  (uint64_t)sub_10007D75C,  v29);
  swift_release();
  swift_release();
  swift_retain_n(a2, 2LL);
  swift_retain();
  sub_1000FEED0();
  swift_release();
  return swift_release();
}

uint64_t sub_1000F108C(uint64_t a1)
{
  if (*(void *)(*(void *)(v1 + 48) + 16LL))
  {
    swift_retain();
    uint64_t v3 = swift_bridgeObjectRetain();
    uint64_t v4 = sub_10007B638(v3, a1);
    swift_bridgeObjectRelease();
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(v5 + 48);
    uint64_t v6 = *(void *)(v5 + 56);
    uint64_t ObjectType = swift_getObjectType(v7);
    uint64_t v9 = EventLoop.makePromise<A>(of:file:line:)( (uint64_t)&type metadata for ()[8],  (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Even tLoopFuture.swift",  117LL,  2LL,  1084LL,  ObjectType,  (uint64_t)&type metadata for ()[8],  v6);
    swift_unknownObjectRetain(v7);
    sub_1000F15B8((uint64_t)v4, v9);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 48LL);
    swift_getObjectType(v7);
    swift_unknownObjectRetain(v7);
    EventLoop.makeSucceededFuture<A>(_:file:line:)();
    uint64_t v9 = v10;
  }

  swift_unknownObjectRelease(v7);
  return v9;
}

uint64_t sub_1000F11AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  uint64_t v8 = type metadata accessor for HTTPResponseHead._Storage();
  uint64_t v9 = swift_allocObject(v8, 44LL, 7LL);
  *(void *)(v9 + 16) = 0LL;
  *(void *)(v9 + 24) = 0LL;
  *(void *)(v9 + 32) = 1LL;
  *(_DWORD *)(v9 + 4sub_1000B58F0(v0, 0) = 65537;
  uint64_t v16 = sub_1000175B0(&qword_1002AA1A0);
  v13[0] = v9;
  v13[1] = a5;
  int v14 = a6;
  int v15 = 0;
  char v17 = 2;
  sub_10002CDE8();
  uint64_t v11 = v10;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  ChannelHandlerContext.writeAndFlush(_:promise:)();
  swift_release();
  sub_1000324E8((uint64_t)v13);
  swift_release();
  return v11;
}

uint64_t sub_1000F128C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain();
  uint64_t v4 = sub_1000F12F0(a2, v3);
  swift_release();
  return v4;
}

uint64_t sub_1000F12F0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_unknownObjectRetain(a2);
    ChannelPipeline.removeHandler(_:)();
    uint64_t v4 = v3;
    swift_unknownObjectRelease(a2);
    return v4;
  }

  else
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 48LL);
    swift_getObjectType(v6);
    swift_unknownObjectRetain(v6);
    EventLoop.makeSucceededFuture<A>(_:file:line:)();
    uint64_t v8 = v7;
    swift_unknownObjectRelease(v6);
    return v8;
  }

uint64_t sub_1000F139C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100019F58(a1, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 32))( a2,  a3,  a4,  a5,  v9,  v10);
}

unint64_t sub_1000F1408( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  v17[3] = &type metadata for HTTPServerUpgradeEvents;
  uint64_t v13 = swift_allocObject(&unk_100282FC8, 49LL, 7LL);
  v17[0] = v13;
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  *(void *)(v13 + 32) = a4;
  *(void *)(v13 + 4sub_1000B58F0(v0, 0) = a5;
  *(_BYTE *)(v13 + 48) = a6;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  ChannelHandlerContext.fireUserInboundEventTriggered(_:)((uint64_t)v17);
  sub_100019F7C(v17);
  unint64_t v14 = *(void *)(a7 + 64);
  uint64_t v15 = *(void *)(a7 + 72);
  *(_OWORD *)(a7 + 64) = xmmword_1001FA370;
  return sub_1000F2460(v14, v15);
}

uint64_t sub_1000F14CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10)
{
  return sub_1000F03E0(a2, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t HTTPServerUpgradeHandler.deinit()
{
  return v0;
}

uint64_t HTTPServerUpgradeHandler.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 104LL, 7LL);
}

uint64_t sub_1000F15B8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t ObjectType = swift_getObjectType(v5);
  uint64_t v8 = (void *)sub_100019310((uint64_t)&unk_100282FF0, 48LL);
  v8[2] = a2;
  v8[3] = a1;
  void v8[4] = v5;
  v8[5] = v4;
  uint64_t v9 = *(void (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(v4 + 24);
  swift_retain(a2);
  swift_bridgeObjectRetain(a1);
  swift_unknownObjectRetain(v5);
  v9(sub_1000F2BD0, v8, ObjectType, v4);
  return swift_release(v8);
}

unint64_t sub_1000F168C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000F2C4C();
  return sub_1000F1874(v4, v5, v6);
}

unint64_t sub_1000F16E0(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  sub_1000F2BFC(a1);
  uint64_t v2 = sub_10011D3B4(v1);
  sub_1000F2C08(v2, v3, v4);
  sub_10001EDA0();
  Swift::Int v5 = sub_100035698();
  return sub_1000F1954(v1, v5);
}

unint64_t sub_1000F1730(uint64_t a1)
{
  uint64_t v3 = static Hasher._hash(seed:_:)(*(void *)(v1 + 40), a1);
  return sub_1000F1AC8(a1, v3);
}

unint64_t sub_1000F1760(uint64_t a1)
{
  uint64_t v1 = sub_1000F2C4C();
  HTTPMethod.rawValue.getter(v1, v2);
  sub_1000F2C08(v3, v4, v5);
  sub_10001EDA0();
  sub_100035698();
  uint64_t v6 = sub_1000F2C4C();
  return sub_1000F1B64(v6, v7, v8);
}

unint64_t sub_1000F17B4(uint64_t a1)
{
  uint64_t v3 = v2;
  unint64_t v4 = sub_1000F27E4();
  _CFObject.hash(into:)(v7, v3, v4);
  Swift::Int v5 = sub_100035698();
  return sub_1000F2278(a1, v5);
}

unint64_t sub_1000F181C(Swift::UInt a1)
{
  Swift::Int v2 = sub_100035698();
  return sub_1000F1AC8(a1, v2);
}

unint64_t sub_1000F1874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        unint64_t v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_1000F1954(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    uint64_t v7 = sub_10011D3B4(*(_BYTE *)(*(void *)(v2 + 48) + v5));
    uint64_t v9 = v8;
    uint64_t v10 = sub_10011D3B4(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2LL);
      return v5;
    }

    uint64_t v13 = v11;
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0LL);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      uint64_t v15 = ~v4;
      unint64_t v5 = (v5 + 1) & v15;
      if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
      {
        while (1)
        {
          uint64_t v16 = sub_10011D3B4(*(_BYTE *)(*(void *)(v2 + 48) + v5));
          uint64_t v9 = v17;
          uint64_t v18 = sub_10011D3B4(a1);
          if (v16 == v18 && v9 == v19) {
            break;
          }
          uint64_t v21 = v19;
          char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0LL);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v15;
            if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
              continue;
            }
          }

          return v5;
        }

        goto LABEL_16;
      }
    }
  }

  return v5;
}

unint64_t sub_1000F1AC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

unint64_t sub_1000F1B64(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v5 = a3 & ~v4;
  if (((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    uint64_t v22 = ~v4;
    while (1)
    {
      uint64_t v8 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v5);
      uint64_t v9 = *v8;
      unint64_t v10 = v8[1];
      unint64_t v11 = 0xE300000000000000LL;
      unint64_t v12 = 5522759LL;
      switch(v10)
      {
        case 0uLL:
          break;
        case 1uLL:
          unint64_t v12 = 5526864LL;
          break;
        case 2uLL:
          unint64_t v12 = 4997953LL;
          break;
        case 3uLL:
          unint64_t v11 = 0xE400000000000000LL;
          unint64_t v12 = 1145128264LL;
          break;
        case 4uLL:
          unint64_t v11 = 0xE400000000000000LL;
          unint64_t v12 = 1414745936LL;
          break;
        case 5uLL:
          unint64_t v11 = 0xE400000000000000LL;
          unint64_t v12 = 1498435395LL;
          break;
        case 6uLL:
          unint64_t v11 = 0xE400000000000000LL;
          unint64_t v12 = 1262702412LL;
          break;
        case 7uLL:
          unint64_t v11 = 0xE400000000000000LL;
          unint64_t v12 = 1163284301LL;
          break;
        case 8uLL:
          unint64_t v11 = 0xE400000000000000LL;
          unint64_t v12 = 1145981250LL;
          break;
        case 9uLL:
          unint64_t v11 = 0xE400000000000000LL;
          unint64_t v12 = 1263421772LL;
          break;
        case 0xAuLL:
          unint64_t v11 = 0xE500000000000000LL;
          unint64_t v12 = 0x4843544150LL;
          break;
        case 0xBuLL:
          unint64_t v11 = 0xE500000000000000LL;
          unint64_t v13 = 1128354388LL;
          goto LABEL_20;
        case 0xCuLL:
          unint64_t v11 = 0xE500000000000000LL;
          unint64_t v12 = 0x4C4F434B4DLL;
          break;
        case 0xDuLL:
          unint64_t v11 = 0xE500000000000000LL;
          uint64_t v14 = 17741LL;
          goto LABEL_19;
        case 0xEuLL:
          unint64_t v11 = 0xE500000000000000LL;
          uint64_t v14 = 21840LL;
LABEL_19:
          unint64_t v13 = v14 & 0xFFFFFFFF0000FFFFLL | 0x47520000;
LABEL_20:
          unint64_t v12 = v13 & 0xFFFF0000FFFFFFFFLL | 0x4500000000LL;
          break;
        case 0xFuLL:
          unint64_t v11 = 0xE600000000000000LL;
          unint64_t v12 = 0x594649544F4ELL;
          break;
        case 0x10uLL:
          unint64_t v11 = 0xE600000000000000LL;
          unint64_t v12 = 0x484352414553LL;
          break;
        case 0x11uLL:
          unint64_t v11 = 0xE600000000000000LL;
          unint64_t v12 = 0x4B434F4C4E55LL;
          break;
        case 0x12uLL:
          unint64_t v11 = 0xE600000000000000LL;
          unint64_t v12 = 0x444E49424552LL;
          break;
        case 0x13uLL:
          unint64_t v12 = 0x444E49424E55LL;
          unint64_t v11 = 0xE600000000000000LL;
          break;
        case 0x14uLL:
          unint64_t v11 = 0xE600000000000000LL;
          unint64_t v12 = 0x54524F504552LL;
          break;
        case 0x15uLL:
          unint64_t v11 = 0xE600000000000000LL;
          unint64_t v12 = 0x4554454C4544LL;
          break;
        case 0x16uLL:
          unint64_t v11 = 0xE600000000000000LL;
          unint64_t v12 = 0x4B4E494C4E55LL;
          break;
        case 0x17uLL:
          unint64_t v11 = 0xE700000000000000LL;
          unint64_t v12 = 0x5443454E4E4F43LL;
          break;
        case 0x18uLL:
          unint64_t v11 = 0xE700000000000000LL;
          unint64_t v12 = 0x4843524145534DLL;
          break;
        case 0x19uLL:
          unint64_t v11 = 0xE700000000000000LL;
          unint64_t v12 = 0x534E4F4954504FLL;
          break;
        case 0x1AuLL:
          unint64_t v11 = 0xE800000000000000LL;
          unint64_t v12 = 0x444E4946504F5250LL;
          break;
        case 0x1BuLL:
          unint64_t v11 = 0xE800000000000000LL;
          unint64_t v12 = 0x54554F4B43454843LL;
          break;
        case 0x1CuLL:
          unint64_t v12 = 0x43544150504F5250LL;
          unint64_t v11 = 0xE900000000000048LL;
          break;
        case 0x1DuLL:
          unint64_t v12 = 0x4249524353425553LL;
          unint64_t v11 = 0xE900000000000045LL;
          break;
        case 0x1EuLL:
          unint64_t v12 = 0x444E454C41434B4DLL;
          unint64_t v11 = 0xEA00000000005241LL;
          break;
        case 0x1FuLL:
          unint64_t v12 = 0x4956495443414B4DLL;
          unint64_t v11 = 0xEA00000000005954LL;
          break;
        case 0x20uLL:
          unint64_t v12 = 0x5243534255534E55LL;
          unint64_t v11 = 0xEB00000000454249LL;
          break;
        case 0x21uLL:
          unint64_t v11 = 0xE600000000000000LL;
          unint64_t v12 = 0x454352554F53LL;
          break;
        default:
          unint64_t v12 = *v8;
          unint64_t v11 = v8[1];
          break;
      }

      unint64_t v15 = 0xE300000000000000LL;
      unint64_t v16 = 5522759LL;
      switch(a2)
      {
        case 0uLL:
          break;
        case 1uLL:
          unint64_t v16 = 5526864LL;
          break;
        case 2uLL:
          unint64_t v16 = 4997953LL;
          break;
        case 3uLL:
          unint64_t v15 = 0xE400000000000000LL;
          unint64_t v16 = 1145128264LL;
          break;
        case 4uLL:
          unint64_t v15 = 0xE400000000000000LL;
          unint64_t v16 = 1414745936LL;
          break;
        case 5uLL:
          unint64_t v15 = 0xE400000000000000LL;
          unint64_t v16 = 1498435395LL;
          break;
        case 6uLL:
          unint64_t v15 = 0xE400000000000000LL;
          unint64_t v16 = 1262702412LL;
          break;
        case 7uLL:
          unint64_t v15 = 0xE400000000000000LL;
          unint64_t v16 = 1163284301LL;
          break;
        case 8uLL:
          unint64_t v15 = 0xE400000000000000LL;
          unint64_t v16 = 1145981250LL;
          break;
        case 9uLL:
          unint64_t v15 = 0xE400000000000000LL;
          unint64_t v16 = 1263421772LL;
          break;
        case 0xAuLL:
          unint64_t v15 = 0xE500000000000000LL;
          unint64_t v16 = 0x4843544150LL;
          break;
        case 0xBuLL:
          unint64_t v15 = 0xE500000000000000LL;
          unint64_t v17 = 1128354388LL;
          goto LABEL_57;
        case 0xCuLL:
          unint64_t v15 = 0xE500000000000000LL;
          unint64_t v16 = 0x4C4F434B4DLL;
          break;
        case 0xDuLL:
          unint64_t v15 = 0xE500000000000000LL;
          uint64_t v18 = 17741LL;
          goto LABEL_56;
        case 0xEuLL:
          unint64_t v15 = 0xE500000000000000LL;
          uint64_t v18 = 21840LL;
LABEL_56:
          unint64_t v17 = v18 & 0xFFFFFFFF0000FFFFLL | 0x47520000;
LABEL_57:
          unint64_t v16 = v17 & 0xFFFF0000FFFFFFFFLL | 0x4500000000LL;
          break;
        case 0xFuLL:
          unint64_t v15 = 0xE600000000000000LL;
          unint64_t v16 = 0x594649544F4ELL;
          break;
        case 0x10uLL:
          unint64_t v15 = 0xE600000000000000LL;
          unint64_t v16 = 0x484352414553LL;
          break;
        case 0x11uLL:
          unint64_t v15 = 0xE600000000000000LL;
          unint64_t v16 = 0x4B434F4C4E55LL;
          break;
        case 0x12uLL:
          unint64_t v15 = 0xE600000000000000LL;
          unint64_t v16 = 0x444E49424552LL;
          break;
        case 0x13uLL:
          unint64_t v16 = 0x444E49424E55LL;
          unint64_t v15 = 0xE600000000000000LL;
          break;
        case 0x14uLL:
          unint64_t v15 = 0xE600000000000000LL;
          unint64_t v16 = 0x54524F504552LL;
          break;
        case 0x15uLL:
          unint64_t v15 = 0xE600000000000000LL;
          unint64_t v16 = 0x4554454C4544LL;
          break;
        case 0x16uLL:
          unint64_t v15 = 0xE600000000000000LL;
          unint64_t v16 = 0x4B4E494C4E55LL;
          break;
        case 0x17uLL:
          unint64_t v15 = 0xE700000000000000LL;
          unint64_t v16 = 0x5443454E4E4F43LL;
          break;
        case 0x18uLL:
          unint64_t v15 = 0xE700000000000000LL;
          unint64_t v16 = 0x4843524145534DLL;
          break;
        case 0x19uLL:
          unint64_t v15 = 0xE700000000000000LL;
          unint64_t v16 = 0x534E4F4954504FLL;
          break;
        case 0x1AuLL:
          unint64_t v15 = 0xE800000000000000LL;
          unint64_t v16 = 0x444E4946504F5250LL;
          break;
        case 0x1BuLL:
          unint64_t v15 = 0xE800000000000000LL;
          unint64_t v16 = 0x54554F4B43454843LL;
          break;
        case 0x1CuLL:
          unint64_t v16 = 0x43544150504F5250LL;
          unint64_t v15 = 0xE900000000000048LL;
          break;
        case 0x1DuLL:
          unint64_t v16 = 0x4249524353425553LL;
          unint64_t v15 = 0xE900000000000045LL;
          break;
        case 0x1EuLL:
          unint64_t v16 = 0x444E454C41434B4DLL;
          unint64_t v15 = 0xEA00000000005241LL;
          break;
        case 0x1FuLL:
          unint64_t v16 = 0x4956495443414B4DLL;
          unint64_t v15 = 0xEA00000000005954LL;
          break;
        case 0x20uLL:
          unint64_t v16 = 0x5243534255534E55LL;
          unint64_t v15 = 0xEB00000000454249LL;
          break;
        case 0x21uLL:
          unint64_t v15 = 0xE600000000000000LL;
          unint64_t v16 = 0x454352554F53LL;
          break;
        default:
          unint64_t v16 = a1;
          unint64_t v15 = a2;
          break;
      }

      if (v12 == v16 && v11 == v15) {
        break;
      }
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v11, v16, v15, 0LL);
      sub_10005A6F0(v9, v10);
      sub_10005A6F0(v9, v10);
      sub_10005A6F0(a1, a2);
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v15);
      sub_10005A704(v9, v10);
      if ((v20 & 1) == 0)
      {
        unint64_t v5 = (v5 + 1) & v22;
        if (((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
          continue;
        }
      }

      return v5;
    }

    sub_10005A6F0(v9, v10);
    sub_10005A6F0(v9, v10);
    sub_10005A6F0(a1, a2);
    swift_bridgeObjectRelease_n(v11, 2LL);
    sub_10005A704(v9, v10);
  }

  return v5;
}

unint64_t sub_1000F2278(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t v6 = v2;
    type metadata accessor for CFString(0LL);
    uint64_t v9 = v8;
    unint64_t v10 = *(void **)(*(void *)(v6 + 48) + 8 * i);
    unint64_t v11 = sub_1000F27E4();
    id v12 = v10;
    char v13 = static _CFObject.== infix(_:_:)(v12, a1, v9, v11);

    if ((v13 & 1) == 0)
    {
      uint64_t v14 = ~v4;
      for (unint64_t i = (i + 1) & v14; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v14)
      {
        id v15 = *(id *)(*(void *)(v6 + 48) + 8 * i);
        char v16 = static _CFObject.== infix(_:_:)(v15, a1, v9, v11);

        if ((v16 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

void sub_1000F23A0()
{
}

uint64_t sub_1000F23B0()
{
  uint64_t v0 = sub_1000F2BE8();
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v0);
}

void sub_1000F23C0()
{
}

void sub_1000F23D0()
{
}

void sub_1000F23E0()
{
}

void sub_1000F23F0()
{
}

void sub_1000F2400()
{
}

void sub_1000F2410()
{
}

void sub_1000F2420()
{
}

void sub_1000F2430()
{
}

void sub_1000F2440()
{
}

void sub_1000F2450()
{
}

unint64_t sub_1000F2460(unint64_t result, uint64_t a2)
{
  if (result >= 5) {
    return swift_release(a2);
  }
  return result;
}

uint64_t sub_1000F2474(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002AA490);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000F24C0()
{
  unint64_t result = qword_1002B0D58;
  if (!qword_1002B0D58)
  {
    unint64_t result = swift_getWitnessTable("Y4\b", &type metadata for HTTPServerUpgradeErrors);
    atomic_store(result, (unint64_t *)&qword_1002B0D58);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for HTTPServerUpgradeErrors(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1000F253C + 4 * byte_1001FFBA4[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000F255C + 4 * byte_1001FFBA9[v4]))();
  }
}

_BYTE *sub_1000F253C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1000F255C(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000F2564(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000F256C(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000F2574(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000F257C(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for HTTPServerUpgradeErrors()
{
  return &type metadata for HTTPServerUpgradeErrors;
}

uint64_t destroy for HTTPServerUpgradeEvents(void *a1)
{
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t initializeWithCopy for HTTPServerUpgradeEvents(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for HTTPServerUpgradeEvents(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v6;
  swift_retain(v6);
  swift_release(v7);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for HTTPServerUpgradeEvents(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease(*(void *)(a1 + 8));
  uint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for HTTPServerUpgradeEvents()
{
  return &type metadata for HTTPServerUpgradeEvents;
}

uint64_t type metadata accessor for HTTPServerUpgradeHandler()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService24HTTPServerUpgradeHandler);
}

uint64_t getEnumTagSinglePayload for HTTPServerUpgradeHandler.UpgradeState(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 > 0x7FFFFFFA && *((_BYTE *)a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483643);
  }
  uint64_t v3 = *a1;
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 4;
  if (v4 >= 6) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for HTTPServerUpgradeHandler.UpgradeState( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(void *)unint64_t result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFB) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 4;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for HTTPServerUpgradeHandler.UpgradeState()
{
  return &type metadata for HTTPServerUpgradeHandler.UpgradeState;
}

unint64_t sub_1000F27E4()
{
  unint64_t result = qword_1002B0E80;
  if (!qword_1002B0E80)
  {
    type metadata accessor for CFString(255LL);
    unint64_t result = swift_getWitnessTable(byte_1001F3B68, v1);
    atomic_store(result, (unint64_t *)&qword_1002B0E80);
  }

  return result;
}

unint64_t sub_1000F2824()
{
  unint64_t result = qword_1002B0E88;
  if (!qword_1002B0E88)
  {
    unint64_t result = swift_getWitnessTable(")4\b", &type metadata for HTTPServerUpgradeErrors);
    atomic_store(result, (unint64_t *)&qword_1002B0E88);
  }

  return result;
}

uint64_t sub_1000F2860()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_1000F28A4(uint64_t a1)
{
}

uint64_t sub_1000F28B4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1000F28D4()
{
}

uint64_t sub_1000F28DC(uint64_t a1)
{
  uint64_t v2 = sub_1000175B0(&qword_1002B0E90);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000F291C()
{
  return swift_deallocObject(v0, 112LL, 7LL);
}

uint64_t sub_1000F2958@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  return sub_1000F0BFC( a1,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  *(_BYTE *)(v2 + 48),  v2 + 56,  *(void *)(v2 + 96),  a2,  *(void *)(v2 + 104));
}

uint64_t sub_1000F298C()
{
  return swift_deallocObject(v0, 128LL, 7LL);
}

uint64_t sub_1000F29D0()
{
  return sub_1000F0CEC( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(_BYTE *)(v0 + 48),  *(void *)(v0 + 56),  *(_BYTE *)(v0 + 64),  v0 + 72,  *(void *)(v0 + 112),  *(void *)(v0 + 120));
}

uint64_t sub_1000F2A0C()
{
  return swift_deallocObject(v0, 65LL, 7LL);
}

uint64_t sub_1000F2A40()
{
  return sub_1000F11AC( *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(unsigned __int8 *)(v0 + 48),  *(void *)(v0 + 56),  *(_BYTE *)(v0 + 64));
}

uint64_t sub_1000F2A78()
{
  return sub_1000F128C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000F2A84()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000F2AA8()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 24LL))(*(void *)(v0 + 24));
}

uint64_t sub_1000F2ACC()
{
  return swift_deallocObject(v0, 81LL, 7LL);
}

uint64_t sub_1000F2B08()
{
  return sub_1000F139C( (void *)(v0 + 16),  *(void *)(v0 + 56),  *(void *)(v0 + 64),  *(void *)(v0 + 72),  *(unsigned __int8 *)(v0 + 80));
}

uint64_t sub_1000F2B1C()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

unint64_t sub_1000F2B5C()
{
  return sub_1000F1408( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  *(_BYTE *)(v0 + 56),  *(void *)(v0 + 64));
}

uint64_t sub_1000F2B74()
{
  return swift_deallocObject(v0, 49LL, 7LL);
}

uint64_t sub_1000F2BA0()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000F2BD0()
{
  return sub_100107B4C(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1000F2BE8()
{
  return 0LL;
}

void *sub_1000F2BFC(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va);
}

uint64_t sub_1000F2C08(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return String.hash(into:)(va, a1, a2);
}

uint64_t sub_1000F2C20( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, int a21, unsigned int a22)
{
  return sub_1000F03E0(a1, a2, a3, a4, v23, a22, v24, v22);
}

uint64_t sub_1000F2C38()
{
  return sub_100034F80(v2, v1, v0, 2);
}

uint64_t sub_1000F2C4C()
{
  return v0;
}

uint64_t sub_1000F2C58()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 40));
}

void EventLoopPromise.succeed(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_10010DA70();
  sub_100067F88();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v9 - v7;
  sub_100085164( (uint64_t)&v9 - v7,  a1,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16LL));
  swift_storeEnumTagMultiPayload(v8, v5, 0LL);
  sub_10010E304();
  sub_10010E2EC();
  sub_10002A3D4();
}

void EventLoopPromise.fail(_:)(uint64_t a1)
{
  uint64_t v2 = sub_10010DA70();
  sub_100067F88();
  __chkstk_darwin(v3);
  *(uint64_t *)((char *)&v5 - v4) = a1;
  sub_10010E5AC((uint64_t)&v5 - v4, v2);
  sub_10002A710();
  sub_10010E304();
  sub_10010E2EC();
  sub_10002A3D4();
}

uint64_t EventLoopFuture.whenFailure(_:)(uint64_t a1, uint64_t a2)
{
  return sub_1000F69B0(a1, a2, (uint64_t)&unk_1002830A0);
}

void EventLoopFuture.cascadeFailure<A>(to:)(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v5 = *v2;
    uint64_t v6 = (void *)sub_100019310((uint64_t)&unk_1002830C8, 40LL);
    _OWORD v6[2] = *(void *)(v5 + 80);
    v6[3] = a2;
    v6[4] = a1;
    sub_10009B59C(a1);
    EventLoopFuture.whenFailure(_:)((uint64_t)sub_1001063F0, (uint64_t)v6);
    sub_10001EDD8();
    sub_10009B134((uint64_t)v6);
  }

  else
  {
    sub_10002A3D4();
  }

void sub_1000F2E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

uint64_t sub_1000F2E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = sub_1000175B0(&qword_1002AAD98);
  uint64_t v7 = sub_100019310(v6, 72LL);
  __int128 v17 = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(v7 + 32) = v17;
  *(void *)(v7 + 16) = 0LL;
  *(_BYTE *)(v7 + 24) = -1;
  *(void *)(v7 + 56) = 0LL;
  *(void *)(v7 + 64) = 0LL;
  *(void *)(v7 + 48) = 0LL;
  sub_10009B59C(v7);
  uint64_t v8 = sub_10002A4C8();
  sub_10010D930(v8, v9, v10, v11, v12, v13, v14, v15, v17);
  sub_1000FFE74(a5, a5, v7);
  sub_100024F0C();
  return v7;
}

void sub_1000F2E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_1000F2EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_1000F2EB4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = sub_1000175B0(&qword_1002B0FE8);
  uint64_t v9 = sub_100019310(v8, 80LL);
  __int128 v18 = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(v9 + 4sub_1000B58F0(v0, 0) = v18;
  *(void *)(v9 + 16) = 0LL;
  *(void *)(v9 + 24) = 0LL;
  *(_BYTE *)(v9 + 32) = -1;
  *(void *)(v9 + 64) = 0LL;
  *(void *)(v9 + 72) = 0LL;
  *(void *)(v9 + 56) = 0LL;
  sub_10009B59C(v9);
  uint64_t v10 = ChannelPipeline.syncOperations.getter();
  sub_10010D930(v10, v11, v12, v13, v14, v15, v16, v17, v18);
  a6(a5, a5, v9);
  sub_10002A51C();
  sub_10001DBAC();
}

void EventLoopFuture.flatMap<A>(file:line:_:)()
{
}

uint64_t EventLoopFuture.cascade(to:)(uint64_t a1)
{
  return sub_100106388( a1,  (uint64_t)&unk_100283118,  (uint64_t)sub_100106408,  (void (*)(uint64_t, uint64_t))EventLoopFuture.whenComplete(_:));
}

uint64_t EventLoopFuture.whenComplete(_:)()
{
  uint64_t v3 = (void *)sub_100019310((uint64_t)&unk_100283140, 40LL);
  v3[2] = v2;
  v3[3] = v0;
  v3[4] = v1;
  sub_10002A4C8();
  ChannelPipeline.syncOperations.getter();
  EventLoopFuture._whenComplete(_:)();
  return swift_release(v3);
}

void sub_1000F2FD8(uint64_t a1)
{
  uint64_t v3 = v2;
  unint64_t v5 = v4;
  unint64_t v7 = v6;
  unint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    uint64_t v9 = 0LL;
    uint64_t v10 = a1 + 40;
LABEL_3:
    uint64_t v11 = (uint64_t *)(v10 + 16 * v9++);
    while (v9 - 1 < v8)
    {
      uint64_t v13 = *(v11 - 1);
      uint64_t v12 = *v11;
      swift_retain_n(*v11, 2LL);
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_1000F23C0();
        uint64_t v3 = v14;
      }

      if ((v7 & 0x8000000000000000LL) != 0) {
        goto LABEL_21;
      }
      if (v7 >= v3[2]) {
        goto LABEL_22;
      }
      uint64_t v15 = &v3[2 * v7 + 4];
      sub_100034E8C(*v15, v15[1]);
      *uint64_t v15 = v13;
      v15[1] = v12;
      uint64_t v16 = v3[2];
      unint64_t v7 = (v16 - 1) & (v7 + 1);
      if (v5 == v7)
      {
        uint64_t v18 = 2 * v16;
        if (2 * v16 >= 1)
        {
          sub_1000321FC();
          uint64_t v19 = v3[2];
          if (v19 >= (uint64_t)v5)
          {
            if ((v5 & 0x8000000000000000LL) == 0)
            {
              uint64_t v20 = (2 * v19) | 1;
              uint64_t v21 = swift_retain(v3);
              sub_1000F64A8(v21, v3 + 4, v5, v20, sub_1000321FC, sub_10018E90C);
              if (v3[2] >= v5)
              {
                uint64_t v22 = swift_retain(v3);
                sub_1000F64A8(v22, v3 + 4, 0LL, (2 * v5) | 1, sub_1000321FC, sub_10018E90C);
                unint64_t v7 = _swiftEmptyArrayStorage[2];
                if ((uint64_t)(v18 - v7) >= 0)
                {
                  sub_1000F6580(v18 - v7, 0LL, 0LL);
                  swift_release(v12);
                  swift_release(v3);
                  unint64_t v5 = 0LL;
                  uint64_t v10 = a1 + 40;
                  uint64_t v3 = _swiftEmptyArrayStorage;
                  unint64_t v8 = *(void *)(a1 + 16);
                  if (v8 != v9) {
                    goto LABEL_3;
                  }
                  goto LABEL_19;
                }

void sub_1000F3214(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = (void *)(a1 + 40);
    while (1)
    {
      uint64_t v4 = *(v3 - 1);
      uint64_t v5 = *v3;
      unint64_t v6 = v1[2];
      uint64_t v7 = *v1;
      swift_retain_n(*v3, 2LL);
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
      {
        sub_1000F23C0();
        uint64_t v7 = v8;
      }

      if ((v6 & 0x8000000000000000LL) != 0) {
        break;
      }
      if (v6 >= *(void *)(v7 + 16)) {
        goto LABEL_12;
      }
      uint64_t v9 = v7 + 16 * v6;
      sub_100034E8C(*(void *)(v9 + 32), *(void *)(v9 + 40));
      *(void *)(v9 + 32) = v4;
      *(void *)(v9 + 4sub_1000B58F0(v0, 0) = v5;
      *uint64_t v1 = v7;
      uint64_t v10 = (*(void *)(v7 + 16) - 1LL) & (v6 + 1);
      v1[2] = v10;
      if (v1[1] == v10) {
        sub_1000F3EAC();
      }
      swift_release(v5);
      v3 += 2;
      if (!--v2) {
        goto LABEL_10;
      }
    }

    __break(1u);
LABEL_12:
    __break(1u);
  }

  else
  {
LABEL_10:
    swift_bridgeObjectRelease(a1);
  }

uint64_t sub_1000F3328(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v3 = a3 - a2;
  }
  else {
    uint64_t v3 = 0LL;
  }
  if (v3 < result) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000F334C(uint64_t result, uint64_t a2)
{
  if (*(void *)(a2 + 16) < result)
  {
    __break(1u);
  }

  else if ((result & 0x8000000000000000LL) == 0)
  {
    return swift_retain(a2);
  }

  __break(1u);
  return result;
}

void sub_1000F33A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = sub_1000175B0(&qword_1002B0FE8);
  uint64_t v9 = sub_100019310(v8, 80LL);
  __int128 v18 = *(_OWORD *)(a5 + 40);
  *(_OWORD *)(v9 + 4sub_1000B58F0(v0, 0) = v18;
  *(void *)(v9 + 16) = 0LL;
  *(void *)(v9 + 24) = 0LL;
  *(_BYTE *)(v9 + 32) = -1;
  *(void *)(v9 + 64) = 0LL;
  *(void *)(v9 + 72) = 0LL;
  *(void *)(v9 + 56) = 0LL;
  sub_10009B59C(v9);
  uint64_t v10 = ChannelPipeline.syncOperations.getter();
  sub_10010D930(v10, v11, v12, v13, v14, v15, v16, v17, v18);
  sub_100100FC8(a5, a5, v9, a6);
  sub_10002A51C();
  sub_10001DBAC();
}

void EventLoopFuture.flatMapErrorThrowing(file:line:_:)()
{
}

void static EventLoopFuture.andAllSucceed(_:on:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t EventLoopFuture.map<A>(file:line:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7)
{
  uint64_t v10 = &type metadata for ()[8];
  if (*(char **)(*(void *)v7 + 80LL) == a7 && a7 == v10)
  {
    v22[0] = a5;
    v22[1] = a6;
    FunctionTypeMetadata1 = swift_getFunctionTypeMetadata1( 67108865LL,  &type metadata for ()[8],  &type metadata for ()[8]);
    sub_10002A4C8();
    swift_dynamicCast(&v21, v22, FunctionTypeMetadata1, FunctionTypeMetadata1, 7LL);
    uint64_t v16 = sub_100019310((uint64_t)&unk_1002831B8, 48LL);
    *(void *)(v16 + 16) = v10;
    *(void *)(v16 + 24) = v10;
    *(_OWORD *)(v16 + 32) = v21;
    EventLoopFuture.whenSuccess(_:)((uint64_t)sub_1001072D0, v16);
    sub_10001EDD8();
    uint64_t v19 = type metadata accessor for EventLoopFuture(0LL, (uint64_t)&type metadata for ()[8], v17, v18);
    uint64_t v13 = swift_dynamicCastClassUnconditional(v7, v19, 0LL, 0LL, 0LL);
    swift_retain();
  }

  else
  {
    uint64_t v13 = sub_10010E4BC(a1, *(void *)(v7 + *(void *)(*(void *)v7 + 96LL) + 8), a1, a2, a3, a4);
    uint64_t v14 = (void *)sub_100019310((uint64_t)&unk_100283190, 56LL);
    v14[2] = a7;
    v14[3] = v13;
    v14[4] = v7;
    void v14[5] = a5;
    v14[6] = a6;
    sub_10002A4C8();
    ChannelPipeline.syncOperations.getter();
    sub_10010DF3C();
    sub_100041B5C();
    EventLoopFuture._whenComplete(_:)();
    sub_10002A7BC();
  }

  return v13;
}

uint64_t sub_1000F35C0(void (*a1)(uint64_t *__return_ptr), uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
  {
    uint64_t v4 = a3;
    swift_errorRetain(a3);
  }

  else
  {
    a1(&v6);
    return v6;
  }

  return v4;
}

uint64_t sub_1000F3610(void (*a1)(uint64_t *__return_ptr), uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
  {
    uint64_t v4 = a3;
    swift_errorRetain(a3);
  }

  else
  {
    a1(&v6);
    return v6;
  }

  return v4;
}

uint64_t EventLoopFuture.always(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = (void *)sub_100019310((uint64_t)&unk_1002831E0, 40LL);
  _OWORD v6[2] = *(void *)(v5 + 80);
  v6[3] = a1;
  v6[4] = a2;
  sub_10002A4C8();
  EventLoopFuture.whenComplete(_:)();
  sub_10002A5A4();
  return swift_retain();
}

uint64_t EventLoopFuture.wait(file:line:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = v5;
  uint64_t v11 = *v5;
  uint64_t v12 = *(void *)(*v5 + 80);
  sub_100018EC0(&qword_1002A9710);
  uint64_t v13 = type metadata accessor for Result(255LL, v12);
  uint64_t v14 = type metadata accessor for Optional(0LL, v13);
  uint64_t v38 = *(void *)(v14 - 8);
  sub_1000706E4();
  __chkstk_darwin(v15);
  sub_1000EB780();
  uint64_t v16 = (uint64_t *)((char *)v7 + *(void *)(v11 + 96));
  uint64_t v17 = v16[1];
  uint64_t ObjectType = swift_getObjectType(*v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 80))( a1,  a2,  a3,  a4,  ObjectType,  v17);
  uint64_t v19 = swift_allocBox(v14);
  uint64_t v21 = v20;
  uint64_t v22 = sub_10010E1BC(v19, v20);
  sub_10001762C(v22, v23, v24, v13);
  uint64_t v25 = sub_1000175B0(&qword_1002B0EA0);
  sub_10010E578(v25);
  sub_10010A614(0LL);
  uint64_t v27 = v26;
  uint64_t v28 = (void *)sub_10010E578((uint64_t)&unk_100283208);
  v28[2] = v27;
  v28[3] = v19;
  v28[4] = v7;
  sub_10002A674();
  sub_100041B08();
  sub_1000D94A0();
  EventLoopFuture._whenComplete(_:)();
  swift_release();
  sub_100106714(1LL);
  Lock.unlock()();
  swift_beginAccess(v21, v37, 0LL, 0LL);
  uint64_t v29 = sub_10010E474();
  v30(v29);
  uint64_t result = sub_10001D158(v6, 1LL, v13);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v32 = sub_10010E48C();
    uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v32, v33);
    if ((_DWORD)EnumCaseMultiPayload == 1)
    {
      swift_willThrow(EnumCaseMultiPayload);
      swift_release();
      return swift_release();
    }

    else
    {
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL))(a5, v6);
      return swift_release();
    }
  }

  return result;
}

void sub_1000F38F0()
{
}

void sub_1000F3914()
{
  if (v3 != v4)
  {
    __break(1u);
    goto LABEL_7;
  }

  unint64_t v5 = v0[2];
  sub_10010DA04();
  sub_100032230();
  uint64_t v6 = sub_10010D9F8();
  sub_10010E520(v6, v7, v8, v9);
  if ((v5 & 0x8000000000000000LL) != 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(void *)(v1 + 16) < v5)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v10 = sub_100041B5C();
  sub_10010DFE0(v10);
  uint64_t v11 = _swiftEmptyArrayStorage[2];
  if (v2 - v11 >= 0)
  {
    sub_10010E29C();
    sub_1000F3FA0(v12, v13, v14, 0LL);
    sub_10002A51C();
    v0[1] = 0LL;
    v0[2] = v11;
    *uint64_t v0 = _swiftEmptyArrayStorage;
    sub_10002A44C();
    return;
  }

void sub_1000F39E8()
{
  if (v3 != v4)
  {
    __break(1u);
    goto LABEL_7;
  }

  unint64_t v5 = v0[2];
  sub_10010DA04();
  sub_100032264();
  uint64_t v6 = sub_10010D9F8();
  sub_10010E520(v6, v7, v8, v9);
  if ((v5 & 0x8000000000000000LL) != 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(void *)(v1 + 16) < v5)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v10 = sub_100041B5C();
  sub_10010DFE0(v10);
  uint64_t v11 = _swiftEmptyArrayStorage[2];
  if (v2 - v11 >= 0)
  {
    sub_10010E29C();
    sub_1000F4330(v12, v13, v14, 0);
    sub_10002A51C();
    v0[1] = 0LL;
    v0[2] = v11;
    *uint64_t v0 = _swiftEmptyArrayStorage;
    sub_10002A44C();
    return;
  }

void sub_1000F3ABC()
{
  if (v3 != v4)
  {
    __break(1u);
    goto LABEL_8;
  }

  sub_10010E2AC();
  sub_10010DA04();
  sub_100032298();
  uint64_t v5 = sub_10010D9F8();
  sub_1000F45D8(v5, v6, v7, v8);
  if (v2 < 0)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  sub_10010E2C0();
  if (!v9) {
    goto LABEL_9;
  }
  sub_100041B5C();
  sub_10010DB8C();
  sub_1000F45D8(v10, v11, v12, v13);
  uint64_t v14 = _swiftEmptyArrayStorage[2];
  if (v1 - v14 >= 0)
  {
    uint64_t v15 = v1 - v14;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    sub_1000F46E0(&v15);
    sub_10002A51C();
    v0[1] = 0LL;
    v0[2] = v14;
    *uint64_t v0 = _swiftEmptyArrayStorage;
    sub_10010DB54();
    return;
  }

void sub_1000F3B80()
{
  if (v4 != v5)
  {
    __break(1u);
    goto LABEL_8;
  }

  sub_10010E2AC();
  __int128 v18 = _swiftEmptyArrayStorage;
  sub_10010DA04();
  sub_1000323D8();
  uint64_t v6 = sub_10010D9F8();
  sub_1000F49FC(v6, v7, v8, v9);
  if (v3 < 0)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  sub_10010E2C0();
  if (!v10) {
    goto LABEL_9;
  }
  uint64_t v11 = v1 + 32;
  sub_100041B5C();
  sub_10010DB8C();
  sub_1000F49FC(v12, v13, v14, v15);
  sub_10010DD3C();
  char v17 = -1;
  if (v2 - (v1 + 32) >= 0)
  {
    v16[0] = v2 - v11;
    sub_1000F4D24(v16);
    sub_10002A51C();
    v0[1] = 0LL;
    v0[2] = v11;
    *uint64_t v0 = v18;
    sub_10010DB54();
    return;
  }

void sub_1000F3C30()
{
  if (v3 != v4)
  {
    __break(1u);
    goto LABEL_8;
  }

  sub_10010E2AC();
  sub_10010DA04();
  sub_10003240C();
  uint64_t v5 = sub_10010D9F8();
  sub_1000F5104(v5, v6, v7, v8);
  if (v2 < 0)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  sub_10010E2C0();
  if (!v9) {
    goto LABEL_9;
  }
  sub_100041B5C();
  sub_10010DB8C();
  sub_1000F5104(v10, v11, v12, v13);
  uint64_t v14 = _swiftEmptyArrayStorage[2];
  if (v1 - v14 >= 0)
  {
    v15[0] = v1 - v14;
    memset(&v15[1], 0, 24);
    v15[4] = 1LL;
    sub_1000F520C(v15);
    sub_10002A51C();
    v0[1] = 0LL;
    v0[2] = v14;
    *uint64_t v0 = _swiftEmptyArrayStorage;
    return;
  }

void sub_1000F3D04()
{
  if (v3 != v4)
  {
    __break(1u);
    goto LABEL_8;
  }

  sub_10010E2AC();
  uint64_t v21 = _swiftEmptyArrayStorage;
  sub_10010DA04();
  sub_100032438();
  uint64_t v5 = sub_10010D9F8();
  sub_1000F546C(v5, v6, v7, v8);
  if (v2 < 0)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  sub_10010E2C0();
  if (!v9) {
    goto LABEL_9;
  }
  sub_100041B5C();
  sub_10010DB8C();
  sub_1000F546C(v10, v11, v12, v13);
  uint64_t v14 = v21[2];
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  uint64_t v20 = 1LL;
  if (v1 - v14 >= 0)
  {
    uint64_t v15 = v1 - v14;
    sub_1000F5798(&v15);
    sub_10002A51C();
    v0[1] = 0LL;
    v0[2] = v14;
    *uint64_t v0 = v21;
    return;
  }

void sub_1000F3DD8()
{
  if (v4 != v5)
  {
    __break(1u);
    goto LABEL_8;
  }

  sub_10010E2AC();
  __int128 v18 = _swiftEmptyArrayStorage;
  sub_10010DA04();
  sub_100032454();
  uint64_t v6 = sub_10010D9F8();
  sub_1000F5B78(v6, v7, v8, v9);
  if (v3 < 0)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  sub_10010E2C0();
  if (!v10) {
    goto LABEL_9;
  }
  uint64_t v11 = v1 + 32;
  sub_100041B5C();
  sub_10010DB8C();
  sub_1000F5B78(v12, v13, v14, v15);
  sub_10010DD3C();
  __int16 v17 = -256;
  if (v2 - (v1 + 32) >= 0)
  {
    v16[0] = v2 - v11;
    sub_1000F5EA0(v16);
    sub_10002A51C();
    v0[1] = 0LL;
    v0[2] = v11;
    *uint64_t v0 = v18;
    sub_10010DB54();
    return;
  }

void sub_1000F3E88()
{
}

void sub_1000F3EAC()
{
  uint64_t v4 = *v0;
  uint64_t v5 = 2LL * *(void *)(*v0 + 16);
  if (v5 < 1)
  {
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v6 = v3;
  uint64_t v7 = v2;
  uint64_t v8 = v1;
  uint64_t v9 = v0[1];
  unint64_t v10 = v0[2];
  ((void (*)(void, uint64_t, void))v1)(0LL, v5, 0LL);
  uint64_t v11 = sub_1000F334C(v9, v4);
  sub_10010E514(v11, v12, v13, v14);
  if ((v10 & 0x8000000000000000LL) != 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(void *)(v4 + 16) < v10)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v15 = sub_10002A674();
  sub_10010E514(v15, v4 + 32, 0LL, (2 * v10) | 1);
  uint64_t v16 = *((void *)&_swiftEmptyArrayStorage + 2);
  if (v5 - v16 >= 0)
  {
    sub_10010E29C();
    sub_1000F6280(v17, v18, v19, v8, v7, v6);
    sub_10002A5A4();
    v0[1] = 0LL;
    v0[2] = v16;
    *uint64_t v0 = (uint64_t)&_swiftEmptyArrayStorage;
    sub_100092B84();
    return;
  }

void sub_1000F3FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *v4;
  uint64_t v6 = *(void *)(*v4 + 16LL);
  uint64_t v7 = v6 + a1;
  if (__OFADD__(v6, a1))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  *uint64_t v4 = v5;
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v13 = *(void *)(v5 + 24) >> 1, v13 < v7))
  {
    sub_100032230();
    uint64_t v5 = *v4;
    uint64_t v13 = *(void *)(*v4 + 24LL) >> 1;
  }

  uint64_t v14 = *(void *)(v5 + 16);
  uint64_t v15 = v13 - v14;
  uint64_t v16 = sub_10010AEB4((uint64_t)&v36, v5 + 24 * v14 + 32, v13 - v14, a1, a2, a3, a4 & 0xFFFFFFFFFFFFFFLL);
  if (v16 < a1) {
    goto LABEL_33;
  }
  if (v16 < 1)
  {
LABEL_9:
    if (v16 == v15)
    {
      uint64_t v21 = v36;
      uint64_t v20 = v37;
      if (v42 != v36)
      {
        if (v42 < 0 || v42 >= v36) {
          goto LABEL_35;
        }
        uint64_t v22 = *(void *)(v5 + 16);
        uint64_t v35 = v38;
        unint64_t v23 = v39 | ((unint64_t)(v40 | (v41 << 16)) << 32);
        uint64_t v24 = v42 + 1;
        swift_retain();
        unint64_t v33 = HIWORD(v23);
        int v34 = v23;
        unint64_t v32 = HIDWORD(v23);
        while (1)
        {
          uint64_t v25 = v22 + 1;
          if (v22 + 1 > *(void *)(v5 + 24) >> 1) {
            sub_100032230();
          }
          uint64_t v5 = *v4;
          unint64_t v26 = *(void *)(*v4 + 24LL);
LABEL_26:
          *(void *)(v5 + 16) = v22;
        }

        uint64_t v27 = v5 + 24 * v22;
        *(void *)(v27 + 32) = v20;
        *(void *)(v27 + 4sub_1000B58F0(v0, 0) = v35;
        *(_BYTE *)(v27 + 54) = v33;
        *(_WORD *)(v27 + 52) = v32;
        *(_DWORD *)(v27 + 48) = v34;
        if (v24 == v21)
        {
LABEL_29:
          *(void *)(v5 + 16) = v25;
          goto LABEL_30;
        }

        if ((v24 & 0x8000000000000000LL) == 0 && v24 < v21)
        {
          uint64_t v28 = 0LL;
          uint64_t v29 = v26 >> 1;
          unint64_t v31 = v24 + (v26 >> 1) - v22;
          uint64_t v30 = v5 + 24 * v22 + 72;
          while (1)
          {
            if (v22 + v28 + 1 >= v29)
            {
              swift_retain();
              v22 += v28 + 1;
              uint64_t v24 = v31;
              goto LABEL_26;
            }

            *(void *)(v30 - 16) = v20;
            *(void *)(v30 - 8) = v35;
            *(_DWORD *)uint64_t v30 = v34;
            *(_BYTE *)(v30 + 6) = v33;
            *(_WORD *)(v30 + 4) = v32;
            if (v21 - 1 - v24 == v28) {
              break;
            }
            swift_retain();
            ++v28;
            v30 += 24LL;
            if (v24 + v28 >= v21) {
              goto LABEL_31;
            }
          }

          swift_retain();
          uint64_t v25 = v22 + v28 + 2;
          goto LABEL_29;
        }

#error "1000F42F0: call analysis failed (funcsize=55)"
void sub_1000F4330(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v5 = *v4;
  uint64_t v6 = *(void *)(*v4 + 16LL);
  uint64_t v7 = v6 + a1;
  if (__OFADD__(v6, a1))
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  *uint64_t v4 = v5;
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v13 = *(void *)(v5 + 24) >> 1, v13 < v7))
  {
    sub_100032264();
    uint64_t v5 = *v4;
    uint64_t v13 = *(void *)(*v4 + 24LL) >> 1;
  }

  uint64_t v14 = *(void *)(v5 + 16);
  uint64_t v15 = v13 - v14;
  uint64_t v16 = sub_10010AFC8((uint64_t)&v40, v5 + 24 * v14 + 32, v13 - v14, a1, a2, a3, a4);
  if (v16 < a1) {
    goto LABEL_35;
  }
  if (v16 >= 1)
  {
    uint64_t v17 = *(void *)(v5 + 16);
    BOOL v18 = __OFADD__(v17, v16);
    uint64_t v19 = v17 + v16;
    if (v18)
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }

    *(void *)(v5 + 16) = v19;
  }

  if (v16 != v15)
  {
    unint64_t v23 = v41;
    uint64_t v24 = v42;
    goto LABEL_13;
  }

  uint64_t v20 = v41;
  uint64_t v21 = v42;
  uint64_t v22 = v43;
  if (v44 == v40)
  {
LABEL_11:
    unint64_t v23 = v20;
    uint64_t v24 = v21;
LABEL_13:
    sub_100034754(v23, v24);
LABEL_31:
    *uint64_t v4 = v5;
    return;
  }

  if ((v44 & 0x8000000000000000LL) == 0 && v44 < v40)
  {
    uint64_t v25 = *(void *)(v5 + 16);
    unint64_t v26 = v44 + 1;
    unsigned int v39 = v40;
    sub_100034D48(v41, v42);
    uint64_t v27 = v26;
    uint64_t v28 = v39;
    while (1)
    {
      if (v25 + 1 > *(void *)(v5 + 24) >> 1)
      {
        uint64_t v36 = v27;
        sub_100032264();
        uint64_t v27 = v36;
        uint64_t v28 = v39;
      }

      uint64_t v5 = *v4;
      uint64_t v29 = *(void *)(*v4 + 24LL);
LABEL_29:
      *(void *)(v5 + 16) = v25;
    }

    uint64_t v30 = v5 + 24 * v25;
    *(void *)(v30 + 32) = v20;
    *(void *)(v30 + 4sub_1000B58F0(v0, 0) = v21;
    *(_BYTE *)(v30 + 48) = v22;
    if (v27 == v28)
    {
      *(void *)(v5 + 16) = v25 + 1;
      goto LABEL_11;
    }

    uint64_t v38 = v5;
    if ((v27 & 0x8000000000000000LL) == 0 && v27 < v28)
    {
      unint64_t v31 = 0LL;
      unint64_t v32 = v29 >> 1;
      uint64_t v37 = v27 + (v29 >> 1) - v25;
      unint64_t v33 = (_BYTE *)(v5 + 24 * v25 + 72);
      int v34 = 1 - v39 + v27;
      while (1)
      {
        if (v25 + v31 + 1 >= v32)
        {
          sub_100034D48(v20, v21);
          v25 += v31 + 1;
          uint64_t v27 = v37;
          uint64_t v5 = v38;
          uint64_t v28 = v39;
          goto LABEL_29;
        }

        *((void *)v33 - 2) = v20;
        *((void *)v33 - 1) = v21;
        *unint64_t v33 = v22;
        if (!(v34 + v31)) {
          break;
        }
        uint64_t v35 = v27;
        sub_100034D48(v20, v21);
        uint64_t v27 = v35;
        ++v31;
        v33 += 24;
        if (v35 + v31 >= v39) {
          goto LABEL_33;
        }
      }

      uint64_t v5 = v38;
      *(void *)(v38 + 16) = v25 + v31 + 2;
      goto LABEL_31;
    }

void sub_1000F45D8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v7 = *v4;
  uint64_t v8 = *(void *)(*v4 + 16LL);
  if (__OFADD__(v8, v6))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  *uint64_t v4 = v7;
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v13 = *(void *)(v7 + 24) >> 1, v13 < v8 + v6))
  {
    sub_100032298();
    uint64_t v7 = *v4;
    uint64_t v13 = *(void *)(*v4 + 24LL) >> 1;
  }

  if (v5 == a3)
  {
    if (v6 <= 0)
    {
LABEL_13:
      swift_unknownObjectRelease(a1);
      *uint64_t v4 = v7;
      return;
    }

    __break(1u);
  }

  if (v13 - *(void *)(v7 + 16) < v6)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  sub_10018E9BC(a2 + (a3 << 6), v6);
  if (v6 <= 0) {
    goto LABEL_13;
  }
  uint64_t v14 = *(void *)(v7 + 16);
  BOOL v15 = __OFADD__(v14, v6);
  uint64_t v16 = v14 + v6;
  if (!v15)
  {
    *(void *)(v7 + 16) = v16;
    goto LABEL_13;
  }

void sub_1000F46E0(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 16);
  if (__OFADD__(v5, v3))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v6 = v4;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
  *uint64_t v2 = v6;
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v8 = v6, v9 = *(void *)(v6 + 24) >> 1, v9 < v5 + v3))
  {
    sub_100032298();
    uint64_t v8 = *v2;
    uint64_t v9 = *(void *)(*v2 + 24) >> 1;
  }

  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t v11 = v9 - v10;
  uint64_t v56 = v8;
  sub_10010B0C0((uint64_t)&v58, v8 + (v10 << 6) + 32, v9 - v10);
  if (v12 < v3) {
    goto LABEL_36;
  }
  if (v12 >= 1)
  {
    uint64_t v13 = *(void *)(v56 + 16);
    BOOL v14 = __OFADD__(v13, v12);
    uint64_t v15 = v13 + v12;
    if (!v14)
    {
      *(void *)(v56 + 16) = v15;
      goto LABEL_9;
    }

void sub_1000F49FC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v7 = *v4;
  uint64_t v8 = *(void *)(*v4 + 16LL);
  if (__OFADD__(v8, v6))
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  *uint64_t v4 = v7;
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v12 = *(void *)(v7 + 24) >> 1, v12 < v8 + v6))
  {
    sub_1000323D8();
    uint64_t v7 = *v4;
    uint64_t v12 = *(void *)(*v4 + 24LL) >> 1;
  }

  uint64_t v13 = v12 - *(void *)(v7 + 16);
  if (v5 == a3)
  {
    if (v6 <= 0)
    {
      uint64_t v6 = 0LL;
      uint64_t v14 = a3;
      goto LABEL_14;
    }

    goto LABEL_38;
  }

  if (v13 < v6)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }

  sub_10018E9B0(a2 + (a3 << 6), v6);
  if (v6 > 0)
  {
    uint64_t v15 = *(void *)(v7 + 16);
    BOOL v16 = __OFADD__(v15, v6);
    uint64_t v17 = v15 + v6;
    if (v16)
    {
LABEL_40:
      __break(1u);
      return;
    }

    *(void *)(v7 + 16) = v17;
  }

  uint64_t v14 = v5;
LABEL_14:
  if (v6 == v13)
  {
    uint64_t v23 = a1;
    uint64_t v18 = *(void *)(v7 + 16);
    uint64_t v32 = 0LL;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v29 = 0u;
    char v33 = -2;
    sub_10010D65C((uint64_t)&v29, (uint64_t)v27, &qword_1002B0FC8);
    while (v28 != 254)
    {
      sub_100034F14((uint64_t)v27, &qword_1002B0FC8);
      uint64_t v19 = *v4;
      uint64_t v20 = *(void *)(*v4 + 24LL) >> 1;
      if (v20 < v18 + 1)
      {
        sub_1000323D8();
        uint64_t v19 = *v4;
        uint64_t v20 = *(void *)(*v4 + 24LL) >> 1;
      }

      swift_retain();
      sub_10010D65C((uint64_t)&v29, (uint64_t)v25, &qword_1002B0FC8);
      if (v26 == 254)
      {
LABEL_32:
        swift_release(v19);
        sub_100034F14((uint64_t)v25, &qword_1002B0FC8);
      }

      else
      {
        uint64_t v21 = v19 + (v18 << 6) + 32;
        while (1)
        {
          sub_10010D67C((uint64_t)v25, (uint64_t)v27, &qword_1002AA490);
          if (v18 >= v20) {
            break;
          }
          sub_100034F14((uint64_t)&v29, &qword_1002B0FC8);
          sub_10010D67C((uint64_t)v27, v21, &qword_1002AA490);
          if (v14 == v5)
          {
            uint64_t v32 = 0LL;
            __int128 v30 = 0u;
            __int128 v31 = 0u;
            __int128 v29 = 0u;
            uint64_t v14 = v5;
            char v33 = -2;
          }

          else
          {
            if (v14 < a3 || v14 >= v5)
            {
              __break(1u);
              goto LABEL_36;
            }

            sub_10010D65C(a2 + (v14++ << 6), (uint64_t)&v29, &qword_1002AA490);
          }

          sub_10010D65C((uint64_t)&v29, (uint64_t)v25, &qword_1002B0FC8);
          v21 += 64LL;
          ++v18;
          if (v26 == 254) {
            goto LABEL_32;
          }
        }

        sub_100034F14((uint64_t)v27, &qword_1002AA490);
        swift_release(v19);
      }

      *(void *)(*v4 + 16LL) = v18;
      sub_10010D65C((uint64_t)&v29, (uint64_t)v27, &qword_1002B0FC8);
    }

    sub_100034F14((uint64_t)&v29, &qword_1002B0FC8);
    swift_unknownObjectRelease(v23);
    sub_100034F14((uint64_t)v27, &qword_1002B0FC8);
  }

  else
  {
    swift_unknownObjectRelease(a1);
  }

void sub_1000F4D24(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v4 + 16);
  uint64_t v6 = v5 + *a1;
  if (__OFADD__(v5, *a1)) {
    goto LABEL_39;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
  *uint64_t v2 = v4;
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v9 = *(void *)(v4 + 24) >> 1, v9 < v6))
  {
    sub_1000323D8();
    uint64_t v4 = *v2;
    uint64_t v9 = *(void *)(*v2 + 24LL) >> 1;
  }

  uint64_t v10 = *(void *)(v4 + 16);
  uint64_t v11 = v9 - v10;
  uint64_t v12 = v4 + (v10 << 6) + 32;
  sub_10010D65C((uint64_t)a1, (uint64_t)v35, &qword_1002B0FB8);
  sub_10010B4D4(&v37, v12, v11);
  uint64_t v14 = v13;
  sub_100034F14((uint64_t)a1, &qword_1002B0FB8);
  if (v14 < v3)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  if (v14 < 1) {
    goto LABEL_9;
  }
  uint64_t v15 = *(void *)(*v2 + 16LL);
  BOOL v16 = __OFADD__(v15, v14);
  uint64_t v17 = v15 + v14;
  if (v16)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }

  *(void *)(*v2 + 16LL) = v17;
LABEL_9:
  if (v14 != v11)
  {
    uint64_t v20 = &qword_1002B0FC0;
    uint64_t v21 = &v37;
LABEL_19:
    sub_100034F14((uint64_t)v21, v20);
    return;
  }

  uint64_t v18 = *(void *)(*v2 + 16LL);
  uint64_t v19 = v39;
  if (v39 == v37)
  {
    uint64_t v33 = 0LL;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    __int128 v30 = 0u;
    char v34 = -2;
LABEL_17:
    sub_10010D65C((uint64_t)&v30, (uint64_t)v35, &qword_1002B0FC8);
    if (v36 != 254)
    {
      unsigned __int8 v28 = v2;
      do
      {
        sub_100034F14((uint64_t)v35, &qword_1002B0FC8);
        uint64_t v23 = *v2;
        uint64_t v24 = *(void *)(*v2 + 24LL) >> 1;
        if (v24 < v18 + 1)
        {
          sub_1000323D8();
          uint64_t v23 = *v28;
          uint64_t v24 = *(void *)(*v28 + 24LL) >> 1;
        }

        swift_retain();
        sub_10010D65C((uint64_t)&v30, (uint64_t)v35, &qword_1002B0FC8);
        if (v36 != 254)
        {
          uint64_t v25 = v23 + (v18 << 6) + 32;
          do
          {
            sub_10010D67C((uint64_t)v35, (uint64_t)v29, &qword_1002AA490);
            if (v18 >= v24)
            {
              sub_100034F14((uint64_t)v29, &qword_1002AA490);
              swift_release(v23);
              goto LABEL_35;
            }

            sub_100034F14((uint64_t)&v30, &qword_1002B0FC8);
            sub_10010D67C((uint64_t)v29, v25, &qword_1002AA490);
            uint64_t v26 = v39;
            if (v39 == v37)
            {
              uint64_t v33 = 0LL;
              __int128 v31 = 0u;
              __int128 v32 = 0u;
              __int128 v30 = 0u;
              char v34 = -2;
            }

            else
            {
              sub_10010D65C((uint64_t)&v37, (uint64_t)v35, &qword_1002B0FB8);
              uint64_t v27 = v35[0];
              sub_100034F14((uint64_t)v35, &qword_1002B0FB8);
              if (v26 < 0 || v26 >= v27)
              {
                __break(1u);
LABEL_38:
                __break(1u);
LABEL_39:
                __break(1u);
                goto LABEL_40;
              }

              sub_10010D65C((uint64_t)v38, (uint64_t)&v30, &qword_1002AA490);
              if (v26 >= v37) {
                goto LABEL_38;
              }
              uint64_t v39 = v26 + 1;
            }

            sub_10010D65C((uint64_t)&v30, (uint64_t)v35, &qword_1002B0FC8);
            v25 += 64LL;
            ++v18;
          }

          while (v36 != 254);
        }

        swift_release(v23);
        sub_100034F14((uint64_t)v35, &qword_1002B0FC8);
LABEL_35:
        uint64_t v2 = v28;
        *(void *)(*v28 + 16LL) = v18;
        sub_10010D65C((uint64_t)&v30, (uint64_t)v35, &qword_1002B0FC8);
      }

      while (v36 != 254);
    }

    sub_100034F14((uint64_t)&v30, &qword_1002B0FC8);
    sub_100034F14((uint64_t)&v37, &qword_1002B0FC0);
    uint64_t v21 = v35;
    uint64_t v20 = &qword_1002B0FC8;
    goto LABEL_19;
  }

  sub_10010D65C((uint64_t)&v37, (uint64_t)v35, &qword_1002B0FB8);
  uint64_t v22 = v35[0];
  sub_100034F14((uint64_t)v35, &qword_1002B0FB8);
  if (v19 < 0 || v19 >= v22) {
    goto LABEL_42;
  }
  sub_10010D65C((uint64_t)v38, (uint64_t)&v30, &qword_1002AA490);
  if (v19 < v37)
  {
    uint64_t v39 = v19 + 1;
    goto LABEL_17;
  }

LABEL_43:
  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

void sub_1000F5104(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v7 = *v4;
  uint64_t v8 = *(void *)(*v4 + 16LL);
  if (__OFADD__(v8, v6))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  *uint64_t v4 = v7;
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v13 = *(void *)(v7 + 24) >> 1, v13 < v8 + v6))
  {
    sub_10003240C();
    uint64_t v7 = *v4;
    uint64_t v13 = *(void *)(*v4 + 24LL) >> 1;
  }

  if (v5 == a3)
  {
    if (v6 <= 0)
    {
LABEL_13:
      swift_unknownObjectRelease(a1);
      *uint64_t v4 = v7;
      return;
    }

    __break(1u);
  }

  if (v13 - *(void *)(v7 + 16) < v6)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  sub_10018EA4C(a2 + 32 * a3, v6);
  if (v6 <= 0) {
    goto LABEL_13;
  }
  uint64_t v14 = *(void *)(v7 + 16);
  BOOL v15 = __OFADD__(v14, v6);
  uint64_t v16 = v14 + v6;
  if (!v15)
  {
    *(void *)(v7 + 16) = v16;
    goto LABEL_13;
  }

void sub_1000F520C(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 16);
  uint64_t v6 = v5 + *a1;
  if (__OFADD__(v5, *a1))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
  *uint64_t v2 = v4;
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v8 = *(void *)(v4 + 24) >> 1, v8 < v6))
  {
    sub_10003240C();
    uint64_t v4 = *v2;
    uint64_t v8 = *(void *)(*v2 + 24) >> 1;
  }

  uint64_t v9 = *(void *)(v4 + 16);
  uint64_t v10 = v8 - v9;
  sub_10010B600((uint64_t)&v40, v4 + 32 * v9 + 32, v8 - v9);
  if (v11 < v3) {
    goto LABEL_36;
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)(v4 + 16);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (!v13)
    {
      *(void *)(v4 + 16) = v14;
      goto LABEL_9;
    }

void sub_1000F546C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v7 = *v4;
  uint64_t v8 = *(void *)(*v4 + 16LL);
  if (__OFADD__(v8, v6))
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  *uint64_t v4 = v7;
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v12 = *(void *)(v7 + 24) >> 1, v12 < v8 + v6))
  {
    sub_100032438();
    uint64_t v7 = *v4;
    uint64_t v12 = *(void *)(*v4 + 24LL) >> 1;
  }

  uint64_t v13 = v12 - *(void *)(v7 + 16);
  if (v5 == a3)
  {
    if (v6 <= 0)
    {
      uint64_t v6 = 0LL;
      uint64_t v14 = a3;
      goto LABEL_14;
    }

    goto LABEL_38;
  }

  if (v13 < v6)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }

  sub_10018EF0C(a2 + 72 * a3, v6);
  if (v6 > 0)
  {
    uint64_t v15 = *(void *)(v7 + 16);
    BOOL v16 = __OFADD__(v15, v6);
    uint64_t v17 = v15 + v6;
    if (v16)
    {
LABEL_40:
      __break(1u);
      return;
    }

    *(void *)(v7 + 16) = v17;
  }

  uint64_t v14 = v5;
LABEL_14:
  if (v6 == v13)
  {
    uint64_t v23 = a1;
    uint64_t v18 = *(void *)(v7 + 16);
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    uint64_t v33 = 2LL;
    sub_10010D65C((uint64_t)&v29, (uint64_t)v27, &qword_1002B0FE0);
    while (v28 != 2)
    {
      sub_100034F14((uint64_t)v27, &qword_1002B0FE0);
      uint64_t v19 = *v4;
      uint64_t v20 = *(void *)(*v4 + 24LL) >> 1;
      if (v20 < v18 + 1)
      {
        sub_100032438();
        uint64_t v19 = *v4;
        uint64_t v20 = *(void *)(*v4 + 24LL) >> 1;
      }

      swift_retain();
      sub_10010D65C((uint64_t)&v29, (uint64_t)v25, &qword_1002B0FE0);
      if (v26 == 2)
      {
LABEL_32:
        swift_release();
        sub_100034F14((uint64_t)v25, &qword_1002B0FE0);
      }

      else
      {
        uint64_t v21 = v19 + 72 * v18 + 32;
        while (1)
        {
          sub_10010D67C((uint64_t)v25, (uint64_t)v27, &qword_1002AA4D8);
          if (v18 >= v20) {
            break;
          }
          sub_100034F14((uint64_t)&v29, &qword_1002B0FE0);
          sub_10010D67C((uint64_t)v27, v21, &qword_1002AA4D8);
          if (v14 == v5)
          {
            __int128 v31 = 0u;
            __int128 v32 = 0u;
            __int128 v29 = 0u;
            __int128 v30 = 0u;
            uint64_t v14 = v5;
            uint64_t v33 = 2LL;
          }

          else
          {
            if (v14 < a3 || v14 >= v5)
            {
              __break(1u);
              goto LABEL_36;
            }

            sub_10010D65C(a2 + 72 * v14++, (uint64_t)&v29, &qword_1002AA4D8);
          }

          sub_10010D65C((uint64_t)&v29, (uint64_t)v25, &qword_1002B0FE0);
          v21 += 72LL;
          ++v18;
          if (v26 == 2) {
            goto LABEL_32;
          }
        }

        sub_100034F14((uint64_t)v27, &qword_1002AA4D8);
        swift_release();
      }

      *(void *)(*v4 + 16LL) = v18;
      sub_10010D65C((uint64_t)&v29, (uint64_t)v27, &qword_1002B0FE0);
    }

    sub_100034F14((uint64_t)&v29, &qword_1002B0FE0);
    swift_unknownObjectRelease(v23);
    sub_100034F14((uint64_t)v27, &qword_1002B0FE0);
  }

  else
  {
    swift_unknownObjectRelease(a1);
  }

void sub_1000F5798(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v4 + 16);
  uint64_t v6 = v5 + *a1;
  if (__OFADD__(v5, *a1)) {
    goto LABEL_39;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
  *uint64_t v2 = v4;
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v9 = *(void *)(v4 + 24) >> 1, v9 < v6))
  {
    sub_100032438();
    uint64_t v4 = *v2;
    uint64_t v9 = *(void *)(*v2 + 24LL) >> 1;
  }

  uint64_t v10 = *(void *)(v4 + 16);
  uint64_t v11 = v9 - v10;
  uint64_t v12 = v4 + 72 * v10 + 32;
  sub_10010D65C((uint64_t)a1, (uint64_t)v35, &qword_1002B0FD0);
  sub_10010B728(&v37, v12, v11);
  uint64_t v14 = v13;
  sub_100034F14((uint64_t)a1, &qword_1002B0FD0);
  if (v14 < v3)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  if (v14 < 1) {
    goto LABEL_9;
  }
  uint64_t v15 = *(void *)(*v2 + 16LL);
  BOOL v16 = __OFADD__(v15, v14);
  uint64_t v17 = v15 + v14;
  if (v16)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }

  *(void *)(*v2 + 16LL) = v17;
LABEL_9:
  if (v14 != v11)
  {
    uint64_t v20 = &qword_1002B0FD8;
    uint64_t v21 = &v37;
LABEL_19:
    sub_100034F14((uint64_t)v21, v20);
    return;
  }

  uint64_t v18 = *(void *)(*v2 + 16LL);
  uint64_t v19 = v39;
  if (v39 == v37)
  {
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    uint64_t v34 = 2LL;
LABEL_17:
    sub_10010D65C((uint64_t)&v30, (uint64_t)v35, &qword_1002B0FE0);
    if (v36 != 2)
    {
      uint64_t v28 = v2;
      do
      {
        sub_100034F14((uint64_t)v35, &qword_1002B0FE0);
        uint64_t v23 = *v2;
        uint64_t v24 = *(void *)(*v2 + 24LL) >> 1;
        if (v24 < v18 + 1)
        {
          sub_100032438();
          uint64_t v23 = *v28;
          uint64_t v24 = *(void *)(*v28 + 24LL) >> 1;
        }

        swift_retain();
        sub_10010D65C((uint64_t)&v30, (uint64_t)v35, &qword_1002B0FE0);
        if (v36 != 2)
        {
          uint64_t v25 = v23 + 72 * v18 + 32;
          do
          {
            sub_10010D67C((uint64_t)v35, (uint64_t)v29, &qword_1002AA4D8);
            if (v18 >= v24)
            {
              sub_100034F14((uint64_t)v29, &qword_1002AA4D8);
              swift_release();
              goto LABEL_35;
            }

            sub_100034F14((uint64_t)&v30, &qword_1002B0FE0);
            sub_10010D67C((uint64_t)v29, v25, &qword_1002AA4D8);
            uint64_t v26 = v39;
            if (v39 == v37)
            {
              __int128 v32 = 0u;
              __int128 v33 = 0u;
              __int128 v30 = 0u;
              __int128 v31 = 0u;
              uint64_t v34 = 2LL;
            }

            else
            {
              sub_10010D65C((uint64_t)&v37, (uint64_t)v35, &qword_1002B0FD0);
              uint64_t v27 = v35[0];
              sub_100034F14((uint64_t)v35, &qword_1002B0FD0);
              if (v26 < 0 || v26 >= v27)
              {
                __break(1u);
LABEL_38:
                __break(1u);
LABEL_39:
                __break(1u);
                goto LABEL_40;
              }

              sub_10010D65C((uint64_t)v38, (uint64_t)&v30, &qword_1002AA4D8);
              if (v26 >= v37) {
                goto LABEL_38;
              }
              uint64_t v39 = v26 + 1;
            }

            sub_10010D65C((uint64_t)&v30, (uint64_t)v35, &qword_1002B0FE0);
            v25 += 72LL;
            ++v18;
          }

          while (v36 != 2);
        }

        swift_release();
        sub_100034F14((uint64_t)v35, &qword_1002B0FE0);
LABEL_35:
        uint64_t v2 = v28;
        *(void *)(*v28 + 16LL) = v18;
        sub_10010D65C((uint64_t)&v30, (uint64_t)v35, &qword_1002B0FE0);
      }

      while (v36 != 2);
    }

    sub_100034F14((uint64_t)&v30, &qword_1002B0FE0);
    sub_100034F14((uint64_t)&v37, &qword_1002B0FD8);
    uint64_t v21 = v35;
    uint64_t v20 = &qword_1002B0FE0;
    goto LABEL_19;
  }

  sub_10010D65C((uint64_t)&v37, (uint64_t)v35, &qword_1002B0FD0);
  uint64_t v22 = v35[0];
  sub_100034F14((uint64_t)v35, &qword_1002B0FD0);
  if (v19 < 0 || v19 >= v22) {
    goto LABEL_42;
  }
  sub_10010D65C((uint64_t)v38, (uint64_t)&v30, &qword_1002AA4D8);
  if (v19 < v37)
  {
    uint64_t v39 = v19 + 1;
    goto LABEL_17;
  }

void sub_1000F5B78(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v7 = *v4;
  uint64_t v8 = *(void *)(*v4 + 16LL);
  if (__OFADD__(v8, v6))
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  *uint64_t v4 = v7;
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v11 = *(void *)(v7 + 24) >> 1, v11 < v8 + v6))
  {
    sub_100032454();
    uint64_t v7 = *v4;
    uint64_t v11 = *(void *)(*v4 + 24LL) >> 1;
  }

  uint64_t v12 = v11 - *(void *)(v7 + 16);
  if (v5 == a3)
  {
    if (v6 <= 0)
    {
      uint64_t v6 = 0LL;
      uint64_t v13 = a3;
      goto LABEL_14;
    }

    goto LABEL_38;
  }

  if (v12 < v6)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }

  sub_10018EFAC(a2 + (a3 << 6), v6);
  if (v6 > 0)
  {
    uint64_t v14 = *(void *)(v7 + 16);
    BOOL v15 = __OFADD__(v14, v6);
    uint64_t v16 = v14 + v6;
    if (v15)
    {
LABEL_40:
      __break(1u);
      return;
    }

    *(void *)(v7 + 16) = v16;
  }

  uint64_t v13 = v5;
LABEL_14:
  if (v6 == v12)
  {
    uint64_t v17 = *(void *)(v7 + 16);
    uint64_t v31 = 0LL;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v28 = 0u;
    __int16 v32 = -512;
    sub_10010D65C((uint64_t)&v28, (uint64_t)v26, &qword_1002B1008);
    while (v27 << 8 != 65024)
    {
      sub_100034F14((uint64_t)v26, &qword_1002B1008);
      uint64_t v18 = *v4;
      uint64_t v19 = *(void *)(*v4 + 24LL) >> 1;
      if (v19 < v17 + 1)
      {
        sub_100032454();
        uint64_t v18 = *v4;
        uint64_t v19 = *(void *)(*v4 + 24LL) >> 1;
      }

      swift_retain();
      sub_10010D65C((uint64_t)&v28, (uint64_t)v24, &qword_1002B1008);
      if (v25 << 8 == 65024)
      {
LABEL_32:
        swift_release(v18);
        sub_100034F14((uint64_t)v24, &qword_1002B1008);
      }

      else
      {
        uint64_t v20 = v18 + (v17 << 6) + 32;
        while (1)
        {
          sub_10010D67C((uint64_t)v24, (uint64_t)v26, &qword_1002AA198);
          if (v17 >= v19) {
            break;
          }
          sub_100034F14((uint64_t)&v28, &qword_1002B1008);
          sub_10010D67C((uint64_t)v26, v20, &qword_1002AA198);
          if (v13 == v5)
          {
            uint64_t v31 = 0LL;
            __int128 v29 = 0u;
            __int128 v30 = 0u;
            __int128 v28 = 0u;
            uint64_t v13 = v5;
            __int16 v32 = -512;
          }

          else
          {
            if (v13 < a3 || v13 >= v5)
            {
              __break(1u);
              goto LABEL_36;
            }

            sub_10010D65C(a2 + (v13++ << 6), (uint64_t)&v28, &qword_1002AA198);
          }

          sub_10010D65C((uint64_t)&v28, (uint64_t)v24, &qword_1002B1008);
          v20 += 64LL;
          ++v17;
          if (v25 << 8 == 65024) {
            goto LABEL_32;
          }
        }

        sub_100034F14((uint64_t)v26, &qword_1002AA198);
        swift_release(v18);
      }

      *(void *)(*v4 + 16LL) = v17;
      sub_10010D65C((uint64_t)&v28, (uint64_t)v26, &qword_1002B1008);
    }

    sub_100034F14((uint64_t)&v28, &qword_1002B1008);
    swift_unknownObjectRelease(a1);
    sub_100034F14((uint64_t)v26, &qword_1002B1008);
  }

  else
  {
    swift_unknownObjectRelease(a1);
  }

void sub_1000F5EA0(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v4 + 16);
  uint64_t v6 = v5 + *a1;
  if (__OFADD__(v5, *a1)) {
    goto LABEL_39;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
  *uint64_t v2 = v4;
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v9 = *(void *)(v4 + 24) >> 1, v9 < v6))
  {
    sub_100032454();
    uint64_t v4 = *v2;
    uint64_t v9 = *(void *)(*v2 + 24LL) >> 1;
  }

  uint64_t v10 = *(void *)(v4 + 16);
  uint64_t v11 = v9 - v10;
  uint64_t v12 = v4 + (v10 << 6) + 32;
  sub_10010D65C((uint64_t)a1, (uint64_t)v35, &qword_1002B0FF8);
  sub_10010B854(&v37, v12, v11);
  uint64_t v14 = v13;
  sub_100034F14((uint64_t)a1, &qword_1002B0FF8);
  if (v14 < v3)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  if (v14 < 1) {
    goto LABEL_9;
  }
  uint64_t v15 = *(void *)(*v2 + 16LL);
  BOOL v16 = __OFADD__(v15, v14);
  uint64_t v17 = v15 + v14;
  if (v16)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }

  *(void *)(*v2 + 16LL) = v17;
LABEL_9:
  if (v14 != v11)
  {
    uint64_t v20 = &qword_1002B1000;
    uint64_t v21 = &v37;
LABEL_19:
    sub_100034F14((uint64_t)v21, v20);
    return;
  }

  uint64_t v18 = *(void *)(*v2 + 16LL);
  uint64_t v19 = v39;
  if (v39 == v37)
  {
    uint64_t v33 = 0LL;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    __int128 v30 = 0u;
    __int16 v34 = -512;
LABEL_17:
    sub_10010D65C((uint64_t)&v30, (uint64_t)v35, &qword_1002B1008);
    if (v36 << 8 != 65024)
    {
      __int128 v28 = v2;
      do
      {
        sub_100034F14((uint64_t)v35, &qword_1002B1008);
        uint64_t v23 = *v2;
        uint64_t v24 = *(void *)(*v2 + 24LL) >> 1;
        if (v24 < v18 + 1)
        {
          sub_100032454();
          uint64_t v23 = *v28;
          uint64_t v24 = *(void *)(*v28 + 24LL) >> 1;
        }

        swift_retain();
        sub_10010D65C((uint64_t)&v30, (uint64_t)v35, &qword_1002B1008);
        if (v36 << 8 != 65024)
        {
          uint64_t v25 = v23 + (v18 << 6) + 32;
          do
          {
            sub_10010D67C((uint64_t)v35, (uint64_t)v29, &qword_1002AA198);
            if (v18 >= v24)
            {
              sub_100034F14((uint64_t)v29, &qword_1002AA198);
              swift_release(v23);
              goto LABEL_35;
            }

            sub_100034F14((uint64_t)&v30, &qword_1002B1008);
            sub_10010D67C((uint64_t)v29, v25, &qword_1002AA198);
            uint64_t v26 = v39;
            if (v39 == v37)
            {
              uint64_t v33 = 0LL;
              __int128 v31 = 0u;
              __int128 v32 = 0u;
              __int128 v30 = 0u;
              __int16 v34 = -512;
            }

            else
            {
              sub_10010D65C((uint64_t)&v37, (uint64_t)v35, &qword_1002B0FF8);
              uint64_t v27 = v35[0];
              sub_100034F14((uint64_t)v35, &qword_1002B0FF8);
              if (v26 < 0 || v26 >= v27)
              {
                __break(1u);
LABEL_38:
                __break(1u);
LABEL_39:
                __break(1u);
                goto LABEL_40;
              }

              sub_10010D65C((uint64_t)v38, (uint64_t)&v30, &qword_1002AA198);
              if (v26 >= v37) {
                goto LABEL_38;
              }
              uint64_t v39 = v26 + 1;
            }

            sub_10010D65C((uint64_t)&v30, (uint64_t)v35, &qword_1002B1008);
            v25 += 64LL;
            ++v18;
          }

          while (v36 << 8 != 65024);
        }

        swift_release(v23);
        sub_100034F14((uint64_t)v35, &qword_1002B1008);
LABEL_35:
        uint64_t v2 = v28;
        *(void *)(*v28 + 16LL) = v18;
        sub_10010D65C((uint64_t)&v30, (uint64_t)v35, &qword_1002B1008);
      }

      while (v36 << 8 != 65024);
    }

    sub_100034F14((uint64_t)&v30, &qword_1002B1008);
    sub_100034F14((uint64_t)&v37, &qword_1002B1000);
    uint64_t v21 = v35;
    uint64_t v20 = &qword_1002B1008;
    goto LABEL_19;
  }

  sub_10010D65C((uint64_t)&v37, (uint64_t)v35, &qword_1002B0FF8);
  uint64_t v22 = v35[0];
  sub_100034F14((uint64_t)v35, &qword_1002B0FF8);
  if (v19 < 0 || v19 >= v22) {
    goto LABEL_42;
  }
  sub_10010D65C((uint64_t)v38, (uint64_t)&v30, &qword_1002AA198);
  if (v19 < v37)
  {
    uint64_t v39 = v19 + 1;
    goto LABEL_17;
  }

void sub_1000F6280( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t), void (*a6)(uint64_t, uint64_t))
{
  uint64_t v7 = *v6;
  uint64_t v8 = *(void *)(*v6 + 16);
  uint64_t v9 = v8 + a1;
  if (__OFADD__(v8, a1))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  int v13 = sub_10003532C();
  *uint64_t v6 = v7;
  if (!v13 || (uint64_t v14 = *(void *)(v7 + 24) >> 1, v14 < v9))
  {
    a4();
    uint64_t v7 = *v6;
    uint64_t v14 = *(void *)(*v6 + 24) >> 1;
  }

  uint64_t v15 = v14 - *(void *)(v7 + 16);
  sub_10010BAEC();
  if (v16 < a1) {
    goto LABEL_36;
  }
  if (v16 >= 1)
  {
    uint64_t v24 = *(void *)(v7 + 16);
    BOOL v25 = __OFADD__(v24, v16);
    uint64_t v26 = v24 + v16;
    if (v25)
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }

    *(void *)(v7 + 16) = v26;
  }

  if (v16 != v15)
  {
    uint64_t v27 = v55;
    uint64_t v28 = v56;
    goto LABEL_13;
  }

  if (v57 == v54)
  {
    uint64_t v27 = sub_10010E0D8();
LABEL_13:
    a6(v27, v28);
LABEL_32:
    *uint64_t v6 = v7;
    return;
  }

  if ((v57 & 0x8000000000000000LL) == 0 && v57 < v54)
  {
    uint64_t v46 = (uint64_t)a4;
    uint64_t v29 = *(void *)(v7 + 16);
    uint64_t v30 = v57 + 1;
    uint64_t v31 = sub_10010DBF8(v16, v17, v18, v19, v20, v21, v22, v23, v46, (uint64_t)a6, v49, a5);
    while (1)
    {
      unint64_t v39 = *(void *)(v7 + 24);
      uint64_t v40 = v29 + 1;
      uint64_t v7 = *v6;
      unint64_t v41 = *(void *)(*v6 + 24);
      uint64_t v40 = v29;
LABEL_30:
      *(void *)(v7 + 16) = v40;
    }

    uint64_t v42 = v7 + 16 * v29;
    *(void *)(v42 + 32) = v55;
    *(void *)(v42 + 4sub_1000B58F0(v0, 0) = v56;
    if (v30 == v54)
    {
      *(void *)(v7 + 16) = v40;
      uint64_t v45 = sub_10010E0D8();
      v48(v45);
      goto LABEL_32;
    }

    if ((v30 & 0x8000000000000000LL) == 0 && v30 < v54)
    {
      int64_t v43 = v41 >> 1;
      uint64_t v50 = v30 + (v41 >> 1) - v29;
      uint64_t v44 = (void *)(v7 + 16 * v29 + 56);
      while (1)
      {
        if (v40 >= v43)
        {
          uint64_t v31 = sub_10010DBF8(v31, v32, v33, v34, v35, v36, v37, v38, (uint64_t)v47, (uint64_t)v48, v50, v53);
          uint64_t v29 = v40;
          uint64_t v30 = v51;
          goto LABEL_30;
        }

        *(v44 - 1) = v55;
        *uint64_t v44 = v56;
        if (v54 - 1 == v30) {
          break;
        }
        ++v30;
        uint64_t v31 = sub_10010DBF8(v31, v32, v33, v34, v35, v36, v37, v38, (uint64_t)v47, (uint64_t)v48, v50, v53);
        v44 += 2;
        ++v40;
        if (v30 >= v54) {
          goto LABEL_34;
        }
      }

      *(void *)(v7 + 16) = v40 + 1;
      goto LABEL_32;
    }

#error "1000F6540: call analysis failed (funcsize=54)"
void sub_1000F6580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v4 = *v3;
  uint64_t v5 = *(void *)(*v3 + 16LL);
  uint64_t v6 = v5 + a1;
  if (__OFADD__(v5, a1)) {
    goto LABEL_39;
  }
  uint64_t v7 = v3;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  *uint64_t v3 = v4;
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v12 = *(void *)(v4 + 24) >> 1, v12 < v6))
  {
    sub_1000321FC();
    uint64_t v4 = *v3;
    uint64_t v12 = *(void *)(*v3 + 24LL) >> 1;
  }

  int v13 = *(void *)(v4 + 16);
  uint64_t v14 = v12 - v13;
  if (v12 == v13)
  {
    if (a1 > 0)
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }

    uint64_t v15 = 0LL;
    goto LABEL_19;
  }

  if (v14 < 1)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }

  uint64_t v15 = a1;
  if (a1)
  {
    uint64_t v26 = v12 - v13;
    uint64_t v27 = v3;
    uint64_t v16 = 0LL;
    uint64_t v17 = (uint64_t *)(v4 + 16 * v13 + 32);
    uint64_t v18 = ~v13 + v12;
    while ((a1 & ~(a1 >> 63)) != v16)
    {
      *uint64_t v17 = a2;
      v17[1] = a3;
      if (v18 == v16)
      {
        sub_100034E9C(a2, a3);
        uint64_t v15 = v26;
        uint64_t v7 = v27;
        if (v14 < a1) {
          goto LABEL_40;
        }
        goto LABEL_16;
      }

      sub_100034E9C(a2, a3);
      ++v16;
      v17 += 2;
      if (a1 == v16)
      {
        uint64_t v15 = a1;
        uint64_t v7 = v27;
        goto LABEL_16;
      }
    }

void sub_1000F67B4(uint64_t a1)
{
  if (a1 < 1)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  sub_1000321FC();
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = *v1;
  if (v4 < v3)
  {
    uint64_t v6 = sub_1000F334C(v1[1], *v1);
    sub_1000F64A8(v6, v7, v8, v9, sub_1000321FC, sub_10018E90C);
    if (v4 < 0)
    {
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }

    if (*(void *)(v5 + 16) < (unint64_t)v4)
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }

    uint64_t v3 = 0LL;
    goto LABEL_11;
  }

  if ((v3 & 0x8000000000000000LL) == 0)
  {
    uint64_t v10 = *(void *)(v5 + 16);
LABEL_11:
    uint64_t v12 = swift_retain(v5);
    sub_1000F64A8(v12, v5 + 32, v3, (2 * v4) | 1, sub_1000321FC, sub_10018E90C);
    uint64_t v13 = _swiftEmptyArrayStorage[2];
    if (a1 - v13 >= 0)
    {
      sub_1000F6280( a1 - v13,  0LL,  0LL,  sub_1000321FC,  sub_100034E9C,  (void (*)(uint64_t, uint64_t))sub_100034E8C);
      swift_release(v5);
      v1[1] = 0LL;
      v1[2] = v13;
      *uint64_t v1 = (uint64_t)_swiftEmptyArrayStorage;
      return;
    }

    goto LABEL_14;
  }

void EventLoopFuture.hop(to:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(v2 + *(void *)(*(void *)v2 + 96LL)) == a1)
  {
    sub_10002A4C8();
  }

  else
  {
    swift_getObjectType(a1);
    sub_10009B648();
    EventLoop.makePromise<A>(of:file:line:)(v4, v5, v6, v7, 1379LL, v8, v4, a2);
    uint64_t v9 = swift_retain();
    EventLoopFuture.cascade(to:)(v9);
    sub_10002A51C();
  }

  sub_1000193B8();
}

uint64_t EventLoopFuture.whenSuccess(_:)(uint64_t a1, uint64_t a2)
{
  return sub_1000F69B0(a1, a2, (uint64_t)&unk_100283230);
}

uint64_t sub_1000F69B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)sub_100019310(a3, 40LL);
  _OWORD v6[2] = v3;
  v6[3] = a1;
  v6[4] = a2;
  ChannelPipeline.syncOperations.getter();
  sub_100041B5C();
  EventLoopFuture._whenComplete(_:)();
  return sub_10009B134((uint64_t)v6);
}

uint64_t sub_1000F6A08( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15 = *(void *)(a5 + 40);
  uint64_t v16 = *(void *)(a5 + 48);
  uint64_t v17 = sub_1000175B0(&qword_1002B0FF0);
  sub_100019310(v17, 80LL);
  uint64_t v18 = sub_1001458F4(v15, v16, 0LL, 0LL, 255);
  sub_10009B59C(v18);
  sub_10002A4C8();
  sub_100041B5C();
  sub_10001FFF0();
  sub_1000A4BF4();
  sub_100077D1C();
  swift_bridgeObjectRetain();
  sub_10005231C();
  sub_1000D94A0();
  swift_unknownObjectRetain(v15);
  sub_100100174(a5, a5, v18, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  sub_100023EF4();
  sub_10001DC10();
  sub_10001A420();
  sub_100056B1C();
  sub_100023EEC();
  sub_10002A51C();
  sub_10001EDD8();
  sub_100024F0C();
  return v18;
}

void sub_1000F6B68()
{
}

void sub_1000F6B74( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = sub_1000175B0(&qword_1002B0FE8);
  uint64_t v13 = sub_100019310(v12, 80LL);
  __int128 v25 = *(_OWORD *)(a5 + 40);
  *(_OWORD *)(v13 + 4sub_1000B58F0(v0, 0) = v25;
  *(void *)(v13 + 16) = 0LL;
  *(void *)(v13 + 24) = 0LL;
  *(_BYTE *)(v13 + 32) = -1;
  *(void *)(v13 + 64) = 0LL;
  *(void *)(v13 + 72) = 0LL;
  *(void *)(v13 + 56) = 0LL;
  sub_10009B59C(v13);
  sub_10002A4C8();
  sub_10009B28C();
  uint64_t v14 = sub_10002A674();
  sub_10010D930(v14, v15, v16, v17, v18, v19, v20, v21, v25);
  sub_10010E5C8();
  sub_100101410(v22, v23, v24, a6, a7, a8);
  sub_10002A338();
  sub_10001EDD8();
  sub_10002A524();
  sub_100041AF4();
}

void sub_1000F6C18()
{
}

void sub_1000F6C24()
{
  uint64_t v3 = sub_1000175B0(&qword_1002B0FE8);
  uint64_t v4 = sub_100019310(v3, 80LL);
  __int128 v13 = *(_OWORD *)(v2 + 40);
  *(_OWORD *)(v4 + 4sub_1000B58F0(v0, 0) = v13;
  *(void *)(v4 + 16) = 0LL;
  *(void *)(v4 + 24) = 0LL;
  *(_BYTE *)(v4 + 32) = -1;
  *(void *)(v4 + 64) = 0LL;
  *(void *)(v4 + 72) = 0LL;
  *(void *)(v4 + 56) = 0LL;
  sub_10009B59C(v4);
  sub_10009B28C();
  uint64_t v5 = sub_100041B5C();
  sub_10010D930(v5, v6, v7, v8, v9, v10, v11, v12, v13);
  sub_1001017DC(v2, v2, v4, v1, v0);
  sub_10002A338();
  sub_10002A5A4();
  sub_10001DBAC();
}

void sub_1000F6CB0()
{
}

void sub_1000F6CBC()
{
  uint64_t v1 = sub_1000175B0(&qword_1002B0FE8);
  uint64_t v2 = sub_100019310(v1, 80LL);
  __int128 v11 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v2 + 4sub_1000B58F0(v0, 0) = v11;
  *(void *)(v2 + 16) = 0LL;
  *(void *)(v2 + 24) = 0LL;
  *(_BYTE *)(v2 + 32) = -1;
  *(void *)(v2 + 64) = 0LL;
  *(void *)(v2 + 72) = 0LL;
  *(void *)(v2 + 56) = 0LL;
  sub_10009B59C(v2);
  ChannelPipeline.syncOperations.getter();
  uint64_t v3 = sub_100041B5C();
  sub_10010D930(v3, v4, v5, v6, v7, v8, v9, v10, v11);
  sub_10010E008();
  sub_100024F0C();
  sub_10002A5A4();
  sub_10001DBAC();
}

void EventLoopFuture.flatMapError(file:line:_:)()
{
}

void CallbackList.firstCallback.getter(uint64_t a1, uint64_t a2)
{
}

void CallbackList.firstCallback.setter()
{
  *uint64_t v1 = v2;
  v1[1] = v0;
  sub_1000193B8();
}

uint64_t CallbackList.furtherCallbacks.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_bridgeObjectRetain(a3);
}

void CallbackList.furtherCallbacks.setter(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  sub_10001945C();
}

uint64_t CallbackList.init()()
{
  return _s25ASOctaneSupportXPCService35NIOSingleStepByteToMessageProcessorC7_bufferAA0F6BufferVSgvpfi_0();
}

void CallbackList.append(_:)()
{
  if (*v1)
  {
    uint64_t v4 = v1[2];
    uint64_t v3 = v1 + 2;
    if (v4)
    {
      uint64_t v5 = sub_100019310((uint64_t)&unk_1002832A8, 32LL);
      *(void *)(v5 + 16) = v2;
      *(void *)(v5 + 24) = v0;
      sub_10002A4C8();
      sub_10002E814();
      uint64_t v6 = *(void *)(*v3 + 16);
      sub_10002EA0C();
      uint64_t v7 = *v3;
      *(void *)(v7 + 16) = v6 + 1;
      uint64_t v8 = v7 + 16 * v6;
      *(void *)(v8 + 32) = sub_10010A6B0;
      *(void *)(v8 + 4sub_1000B58F0(v0, 0) = v5;
      *uint64_t v3 = v7;
    }

    else
    {
      uint64_t v9 = sub_1000175B0(&qword_1002AA368);
      uint64_t v10 = sub_100019310(v9, 48LL);
      *(_OWORD *)(v10 + 16) = xmmword_1001F3C00;
      uint64_t v11 = sub_100019310((uint64_t)&unk_100283280, 32LL);
      *(void *)(v11 + 16) = v2;
      *(void *)(v11 + 24) = v0;
      *(void *)(v10 + 32) = sub_10010A6B0;
      *(void *)(v10 + 4sub_1000B58F0(v0, 0) = v11;
      sub_10002A4C8();
      swift_bridgeObjectRelease(0LL);
      *uint64_t v3 = v10;
    }

    sub_1000193B8();
  }

  else
  {
    *uint64_t v1 = v2;
    v1[1] = v0;
    swift_retain(v0);
  }

void sub_1000F6EBC(uint64_t (*a1)(void)@<X0>, void *a2@<X8>)
{
  *a2 = a1();
  a2[1] = v3;
  a2[2] = v4;
  sub_10001945C();
}

void CallbackList._allCallbacks()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (a3)
    {
      sub_1000F2FD8((uint64_t)_swiftEmptyArrayStorage);
      v14[0] = v6;
      v14[1] = v7;
      v14[2] = v8;
      CallbackList.appendAllCallbacks(_:)(v14, a1, a2, a3);
      return;
    }

    uint64_t v10 = sub_1000175B0(&qword_1002AA368);
    uint64_t inited = swift_initStackObject(v10, v13);
    *(_OWORD *)(inited + 16) = xmmword_1001F3C00;
    uint64_t v12 = sub_100019310((uint64_t)&unk_1002832D0, 32LL);
    *(void *)(v12 + 16) = a1;
    *(void *)(v12 + 24) = a2;
    *(void *)(inited + 32) = sub_10010A6B0;
    *(void *)(inited + 4sub_1000B58F0(v0, 0) = v12;
    sub_10002A4C8();
    uint64_t v9 = (void *)inited;
  }

  else
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
  }

  sub_1000F2FD8((uint64_t)v9);
}

void CallbackList.appendAllCallbacks(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    sub_10002A3D4();
    return;
  }

  if (!a4)
  {
    uint64_t v16 = sub_100019310((uint64_t)&unk_100283320, 32LL);
    *(void *)(v16 + 16) = a2;
    *(void *)(v16 + 24) = a3;
    sub_10009B59C(a3);
    sub_10002B58C((uint64_t)sub_10010A6B0, v16);
    sub_10010E584();
    sub_10009B134(v16);
    return;
  }

  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  BOOL v10 = __OFSUB__(v9, v8);
  uint64_t v11 = v9 - v8;
  if (v11 < 0 != v10) {
    v11 += *(void *)(v7 + 16);
  }
  BOOL v10 = __OFADD__(v11, 1LL);
  uint64_t v12 = v11 + 1;
  if (v10)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v13 = *(void *)(a4 + 16);
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
LABEL_15:
    __break(1u);
    return;
  }

  if (*(void *)(v7 + 16) >= v14)
  {
    sub_100034E9C(a2, a3);
    sub_10001FFF0();
  }

  else
  {
    uint64_t v15 = sub_1000E7674(v14);
    sub_100034E9C(a2, a3);
    sub_10001FFF0();
    sub_1000F67B4(v15);
  }

  uint64_t v17 = sub_100019310((uint64_t)&unk_1002832F8, 32LL);
  *(void *)(v17 + 16) = a2;
  *(void *)(v17 + 24) = a3;
  sub_10002A4C8();
  sub_10002B58C((uint64_t)sub_10010A6B0, v17);
  sub_10002A524();
  sub_1000F3214(a4);
  sub_100034E8C(a2, a3);
}

Swift::Void __swiftcall CallbackList._run()()
{
  void (*v12)(void **__return_ptr, uint64_t);
  void *v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int64_t v76;
  uint64_t v78;
  uint64_t v79;
  int64_t v80;
  uint64_t v81;
  int64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v87;
  uint64_t v88;
  int64_t v89;
  unint64_t v90;
  void *v91;
  int64_t v92;
  uint64_t v93;
  uint64_t v94;
  int64_t v95;
  void *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t (*v102)(uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  void *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  void (*v116)(void **__return_ptr, uint64_t);
  uint64_t v117;
  void *v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  void *v152;
  uint64_t v153;
  unint64_t v154;
  void *v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  unint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  unint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int64_t v180;
  unint64_t v181;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int64_t v186;
  uint64_t v187;
  int64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  uint64_t v194;
  int64_t v195;
  unint64_t v196;
  void *v197;
  int64_t v198;
  uint64_t v199;
  uint64_t v200;
  int64_t v201;
  void *v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  const char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  void *v242;
  uint64_t v243;
  uint64_t v244;
  void *v245;
  uint64_t v246;
  unint64_t v247;
  if (v0)
  {
    sub_100092F74();
    if (v3)
    {
      CallbackList._allCallbacks()(v2, v1, v3);
      uint64_t v5 = v4;
      unint64_t v7 = v6;
      uint64_t v9 = v8;
      uint64_t v245 = v4;
      char v246 = v6;
      uint64_t v247 = v8;
      while (1)
      {
        uint64_t v10 = v9 - v7;
        if (v10 < 1)
        {
          sub_10002A51C();
          return;
        }

        if (v9 == v7) {
          goto LABEL_290;
        }
        if ((v7 & 0x8000000000000000LL) != 0) {
          goto LABEL_331;
        }
        if (HIDWORD(v7)) {
          goto LABEL_332;
        }
        unint64_t v11 = v5[2];
        if (v7 >= v11) {
          goto LABEL_291;
        }
        uint64_t v12 = (void (*)(void **__return_ptr, uint64_t))v5[2 * v7 + 4];
        if (!v12) {
          goto LABEL_326;
        }
        ChannelPipeline.syncOperations.getter();
        if ((sub_10003532C() & 1) == 0)
        {
          sub_10010E598();
          uint64_t v5 = v13;
        }

        if (v7 >= v5[2]) {
          goto LABEL_293;
        }
        uint64_t v14 = &v5[2 * v7];
        uint64_t v15 = sub_100034E8C(v14[4], v14[5]);
        v14[4] = 0LL;
        void v14[5] = 0LL;
        uint64_t v16 = v7 + 1;
        uint64_t v17 = v5[2];
        uint64_t v18 = (v17 - 1) & v16;
        uint64_t v245 = v5;
        char v246 = v18;
        v12(&v242, v15);
        sub_10010E5C0((uint64_t)v12);
        uint64_t v26 = (uint64_t)v242;
        uint64_t v27 = v244;
        if (!v242) {
          goto LABEL_126;
        }
        uint64_t v28 = v243;
        if (v244)
        {
          if (v9 >= v18) {
            uint64_t v29 = 0LL;
          }
          else {
            uint64_t v29 = v17;
          }
          uint64_t v30 = v9 - v18 + v29;
          uint64_t v31 = __OFADD__(v30, 1LL);
          uint64_t v32 = v30 + 1;
          if (v31) {
            goto LABEL_304;
          }
          uint64_t v33 = *(void *)(v244 + 16);
          uint64_t v31 = __OFADD__(v32, v33);
          uint64_t v34 = v32 + v33;
          if (v31) {
            goto LABEL_305;
          }
          char v234 = v244;
          if (v17 >= v34)
          {
            sub_10010E604( v244,  v19,  v20,  v21,  v22,  v23,  v24,  v25,  v215,  v216,  v217,  v218,  v219,  v221,  v223,  v225,  v226,  v227,  v229,  v231,  v244);
          }

          else
          {
            sub_10010E644();
            uint64_t v37 = v36 << v35;
            sub_10010E604( v38,  v39,  v40,  v41,  v42,  v43,  v44,  v45,  v215,  v216,  v217,  v218,  v219,  v221,  v223,  v225,  v226,  v227,  v229,  v231,  v234);
            sub_1000F67B4(v37);
            uint64_t v5 = v245;
          }

          uint64_t v49 = sub_100019310((uint64_t)&unk_100283348, 32LL);
          *(void *)(v49 + 16) = v26;
          *(void *)(v49 + 24) = v28;
          uint64_t v50 = v247;
          sub_10010E5F8();
          sub_10002A674();
          if ((sub_10003532C() & 1) == 0)
          {
            sub_10010E598();
            uint64_t v5 = v51;
          }

          if ((v50 & 0x8000000000000000LL) != 0) {
            goto LABEL_306;
          }
          if (v50 >= v5[2]) {
            goto LABEL_307;
          }
          int v231 = v28;
          uint64_t v52 = &v5[2 * v50];
          sub_100034E8C(v52[4], v52[5]);
          v52[4] = sub_10010A6B0;
          v52[5] = v49;
          uint64_t v53 = (v5[2] - 1LL) & (v50 + 1);
          uint64_t v245 = v5;
          uint64_t v247 = v53;
          if (v246 == v53) {
            sub_1000F3EAC();
          }
          sub_10002A5A4();
          uint64_t v54 = *(void *)(v235 + 16);
          if (v54)
          {
            int v229 = v26;
            uint64_t v55 = 0LL;
            uint64_t v56 = v245;
            uint64_t v57 = v247;
            double v236 = *(void *)(v235 + 16);
            while (1)
            {
              uint64_t v58 = (uint64_t *)(v235 + 32 + 16 * v55);
              uint64_t v59 = *v58;
              uint64_t v60 = v58[1];
              sub_10009B59C(v60);
              if ((sub_100035424() & 1) == 0)
              {
                sub_10010E2CC();
                uint64_t v56 = v61;
              }

              if ((v57 & 0x8000000000000000LL) != 0) {
                goto LABEL_268;
              }
              if (v57 >= v56[2]) {
                goto LABEL_269;
              }
              uint64_t v62 = (unint64_t)(v56 + 4);
              uint64_t v63 = &v56[2 * v57 + 4];
              sub_100034E8C(*v63, v63[1]);
              *uint64_t v63 = v59;
              v63[1] = v60;
              uint64_t v64 = v56[2];
              uint64_t v57 = (v64 - 1) & (v57 + 1);
              if (v246 != v57)
              {
                sub_10001ED6C();
                goto LABEL_115;
              }

              uint64_t v65 = 2 * v64;
              if (2 * v64 < 1) {
                goto LABEL_270;
              }
              uint64_t v240 = v60;
              uint64_t v242 = _swiftEmptyArrayStorage;
              sub_1000321FC();
              uint64_t v66 = v56[2];
              uint64_t v67 = v66 - v57;
              if (v66 < v57) {
                goto LABEL_271;
              }
              Swift::String v68 = v242;
              uint64_t v69 = v242[2];
              if (__OFADD__(v69, v67)) {
                goto LABEL_272;
              }
              v238 = v65;
              uint64_t v70 = v242[3] >> 1;
              sub_10002A4C8();
              if (v70 < v69 + v67)
              {
                sub_10010D920();
                Swift::String v68 = v242;
                uint64_t v69 = v242[2];
                uint64_t v70 = v242[3] >> 1;
              }

              if (v66 == v57)
              {
                if (v67 > 0) {
                  goto LABEL_273;
                }
              }

              else
              {
                if (v70 - v69 < v67) {
                  goto LABEL_283;
                }
                if (v67 < 0) {
                  goto LABEL_329;
                }
                uint64_t v71 = (unint64_t)&v68[2 * v69 + 4];
                if (v62 + 16 * v57 < v71 + 16 * v67 && v71 < v62 + 16 * v66) {
                  goto LABEL_328;
                }
                sub_1000175B0(&qword_1002B0E98);
                swift_arrayInitWithCopy(v71);
                unint64_t v73 = v68[2];
                uint64_t v31 = __OFADD__(v73, v67);
                unint64_t v74 = v73 + v67;
                if (v31) {
                  goto LABEL_284;
                }
                v68[2] = v74;
              }

              sub_10001EDD8();
              if (v56[2] < v57) {
                goto LABEL_274;
              }
              uint64_t v75 = v68[2];
              if (__OFADD__(v75, v57)) {
                goto LABEL_275;
              }
              uint64_t v242 = v68;
              unint64_t v76 = v68[3] >> 1;
              sub_10002A4C8();
              if (v76 < (uint64_t)(v75 + v57))
              {
                sub_10010D920();
                Swift::String v68 = v242;
                uint64_t v75 = v242[2];
                unint64_t v76 = v242[3] >> 1;
              }

              if (v57)
              {
                uint64_t v75 = (unint64_t)&v68[2 * v75 + 4];
                if (v62 < v75 + 16 * v57 && v75 < v62 + 16 * v57) {
                  goto LABEL_328;
                }
                sub_1000175B0(&qword_1002B0E98);
                sub_10010DFA4();
                unint64_t v78 = v68[2];
                uint64_t v31 = __OFADD__(v78, v57);
                uint64_t v79 = v78 + v57;
                if (v31) {
                  goto LABEL_281;
                }
                v68[2] = v79;
              }

              sub_10001EDD8();
              uint64_t v57 = v68[2];
              uint64_t v80 = v238 - v57;
              if (__OFADD__(v57, v80)) {
                goto LABEL_277;
              }
              uint64_t v242 = v68;
              uint64_t v81 = v68[3] >> 1;
              unint64_t v82 = v57;
              if (v81 < v238)
              {
                sub_10010D920();
                Swift::String v68 = v242;
                unint64_t v82 = v242[2];
                uint64_t v81 = v242[3] >> 1;
              }

              uint64_t v83 = v81 - v82;
              uint64_t v54 = v236;
              if (v81 == v82) {
                goto LABEL_85;
              }
              if (v83 < 1) {
                goto LABEL_282;
              }
              if (v238 == v57)
              {
LABEL_85:
                char v84 = 0LL;
LABEL_86:
                if (v84 < v80) {
                  goto LABEL_278;
                }
LABEL_87:
                if (v84 <= 0) {
                  goto LABEL_94;
                }
              }

              else
              {
                uint64_t v85 = &v68[2 * v82];
                v85[4] = 0LL;
                v85[5] = 0LL;
                if (v83 != 1)
                {
                  uint64_t v97 = v85 + 6;
                  uint64_t v98 = 1LL;
                  while (v98 < v83)
                  {
                    if (v80 == v98)
                    {
                      char v84 = v238 - v57;
                      goto LABEL_87;
                    }

                    if (v98 >= v80) {
                      goto LABEL_267;
                    }
                    ++v98;
                    void *v97 = 0LL;
                    v97[1] = 0LL;
                    v97 += 2;
                    if (v83 == v98)
                    {
                      char v84 = v83;
                      goto LABEL_86;
                    }
                  }

                  goto LABEL_266;
                }

                char v84 = 1LL;
              }

              uint64_t v31 = __OFADD__(v82, v84);
              v82 += v84;
              if (v31) {
                goto LABEL_279;
              }
              v68[2] = v82;
LABEL_94:
              if (v84 == v83 && v84 != v80)
              {
                if (v83 >= v80) {
                  goto LABEL_285;
                }
                unint64_t v88 = v83 + 1;
                while (1)
                {
                  uint64_t v89 = v82 + 1;
                  if (v82 + 1 > v68[3] >> 1)
                  {
                    uint64_t v75 = (unint64_t)&v242;
                    sub_1000321FC();
                  }

                  Swift::String v68 = v242;
                  uint64_t v90 = v242[3];
LABEL_113:
                  v68[2] = v82;
                }

                uint64_t v91 = &v242[2 * v82];
                v91[4] = 0LL;
                v91[5] = 0LL;
                if (v88 != v80)
                {
                  uint64_t v92 = v90 >> 1;
                  uint64_t v93 = v88 + (v90 >> 1) - v82;
                  uint64_t v94 = 16 * v82 + 48;
                  uint64_t v95 = v88;
                  uint64_t v87 = v240;
                  while ((v88 & 0x8000000000000000LL) == 0 && v95 < v80)
                  {
                    if (v89 >= v92)
                    {
                      unint64_t v82 = v89;
                      unint64_t v88 = v93;
                      goto LABEL_113;
                    }

                    ++v95;
                    ++v89;
                    uint64_t v96 = (void *)((char *)v68 + v94);
                    uint64_t *v96 = 0LL;
                    v96[1] = 0LL;
                    v94 += 16LL;
                    if (v80 == v95)
                    {
                      v68[2] = v89;
                      goto LABEL_114;
                    }
                  }

                  __break(1u);
                  goto LABEL_137;
                }

                v68[2] = v89;
                sub_10010E62C();
              }

              uint64_t v87 = v240;
LABEL_114:
              swift_release(v87);
              sub_10001EDD8();
              char v246 = 0LL;
              uint64_t v56 = v68;
LABEL_115:
              if (++v55 == v54)
              {
                sub_10003561C();
                sub_10010E508();
                sub_10010E508();
                sub_10003561C();
                uint64_t v247 = v57;
                uint64_t v245 = v56;
                goto LABEL_127;
              }
            }
          }

          sub_10001EDA0();
          sub_100034E8C(v26, v231);
          sub_10010E5EC();
          uint64_t v27 = v235;
LABEL_126:
          swift_bridgeObjectRelease(v27);
LABEL_127:
          unint64_t v7 = v246;
          uint64_t v9 = v247;
          uint64_t v5 = v245;
        }

        else
        {
          uint64_t v46 = sub_100019310((uint64_t)&unk_100283370, 32LL);
          *(void *)(v46 + 16) = v26;
          *(void *)(v46 + 24) = v28;
          sub_10010E5F8();
          sub_10002A75C();
          if ((sub_10003532C() & 1) == 0)
          {
            sub_10010E598();
            uint64_t v5 = v47;
          }

          if (v9 < 0) {
            goto LABEL_314;
          }
          uint64_t v48 = &v5[2 * v9];
          sub_100034E8C(v48[4], v48[5]);
          v48[4] = sub_10010A6B0;
          uint64_t v48[5] = v46;
          uint64_t v9 = (v5[2] - 1LL) & (v9 + 1);
          uint64_t v245 = v5;
          uint64_t v247 = v9;
          unint64_t v7 = v246;
          if (v246 == v9)
          {
            sub_1000F3EAC();
            sub_10002A524();
            sub_10010E5EC();
            goto LABEL_127;
          }

          sub_10002A524();
          sub_10010E5C0(v26);
        }
      }
    }

    sub_10009B59C(v1);
    uint64_t v99 = sub_10010E2B8();
    uint64_t v75 = v101;
    if (!v99)
    {
LABEL_137:
      sub_10002A7BC();
      sub_10010E584();
      swift_bridgeObjectRelease(v75);
      return;
    }

    uint64_t v102 = (uint64_t (*)(uint64_t))v99;
    uint64_t v103 = v100;
    while (!v75)
    {
      uint64_t v104 = sub_10002A7BC();
      uint64_t v102 = (uint64_t (*)(uint64_t))v102(v104);
      uint64_t v103 = v105;
      uint64_t v75 = v106;
      if (!v102) {
        goto LABEL_137;
      }
    }

    v222 = v2;
    uint64_t v224 = v1;
    v220 = v75;
    CallbackList._allCallbacks()((uint64_t)v102, v103, v75);
    uint64_t v108 = v107;
    uint64_t v110 = v109;
    unint64_t v112 = v111;
    uint64_t v245 = v107;
    char v246 = v109;
    uint64_t v247 = v111;
    v228 = v103;
    v230 = (uint64_t)v102;
    while (1)
    {
      uint64_t v113 = v112 - v110;
      if (v113 < 1)
      {
        sub_100034E8C(v222, v224);
        sub_10002A7BC();
        sub_100034E8C((uint64_t)v102, v103);
        sub_10001EDD8();
        swift_bridgeObjectRelease(v220);
        return;
      }

      if (v112 == v110) {
        goto LABEL_316;
      }
      if ((v110 & 0x8000000000000000LL) != 0) {
        goto LABEL_331;
      }
      if (HIDWORD(v110))
      {
LABEL_332:
        sub_100034FD0();
        sub_100035144();
LABEL_333:
        sub_100035124(v208, v209, v210, v211, v212, v213, v214);
        __break(1u);
        return;
      }

      unint64_t v114 = v108[2];
      if (v110 >= v114) {
        goto LABEL_317;
      }
      Swift::String v115 = &v108[2 * v110];
      uint64_t v116 = (void (*)(void **__return_ptr, uint64_t))v115[4];
      if (!v116) {
        goto LABEL_327;
      }
      uint64_t v117 = v115[5];
      sub_100041B08();
      if ((sub_100035424() & 1) == 0)
      {
        sub_10010E2CC();
        uint64_t v108 = v118;
      }

      if (v110 >= v108[2])
      {
LABEL_319:
        __break(1u);
LABEL_320:
        __break(1u);
LABEL_321:
        __break(1u);
LABEL_322:
        __break(1u);
LABEL_323:
        __break(1u);
LABEL_324:
        __break(1u);
LABEL_325:
        __break(1u);
LABEL_326:
        __break(1u);
LABEL_327:
        __break(1u);
LABEL_328:
        sub_100034FD0();
        uint64_t v206 = "UnsafeMutablePointer.initialize overlapping range";
        int v207 = 49LL;
LABEL_330:
        _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v206,  v207,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v215,  v216,  v217);
        __break(1u);
LABEL_331:
        sub_100034FD0();
        sub_100035154();
        goto LABEL_333;
      }

      uint64_t v119 = &v108[2 * v110];
      __int128 v120 = sub_100034E8C(v119[4], v119[5]);
      v119[4] = 0LL;
      v119[5] = 0LL;
      uint64_t v121 = v108[2];
      uint64_t v122 = (v121 - 1) & (v110 + 1);
      uint64_t v245 = v108;
      char v246 = v122;
      v116(&v242, v120);
      sub_100034E8C((uint64_t)v116, v117);
      uint64_t v130 = (uint64_t)v242;
      if (!v242) {
        break;
      }
      uint64_t v131 = v243;
      if (v244)
      {
        if (v112 >= v122) {
          unint64_t v132 = 0LL;
        }
        else {
          unint64_t v132 = v121;
        }
        unint64_t v133 = v112 - v122 + v132;
        uint64_t v31 = __OFADD__(v133, 1LL);
        uint64_t v134 = v133 + 1;
        if (v31) {
          goto LABEL_320;
        }
        unint64_t v135 = *(void *)(v244 + 16);
        uint64_t v31 = __OFADD__(v134, v135);
        unint64_t v136 = v134 + v135;
        if (v31) {
          goto LABEL_321;
        }
        uint64_t v232 = v244;
        if (v121 >= v136)
        {
          sub_10010E52C( v244,  v123,  v124,  v125,  v126,  v127,  v128,  v129,  v215,  v216,  v217,  v218,  v220,  v222,  v224,  v225,  v226,  v228,  v230,  v244);
        }

        else
        {
          sub_10010E644();
          uint64_t v139 = v138 << v137;
          sub_10010E52C( v140,  v141,  v142,  v143,  v144,  v145,  v146,  v147,  v215,  v216,  v217,  v218,  v220,  v222,  v224,  v225,  v226,  v228,  v230,  v232);
          sub_1000F67B4(v139);
          uint64_t v108 = v245;
        }

        uint64_t v103 = v228;
        uint64_t v102 = (uint64_t (*)(uint64_t))v230;
        uint64_t v153 = sub_100019310((uint64_t)&unk_100283398, 32LL);
        *(void *)(v153 + 16) = v130;
        *(void *)(v153 + 24) = v131;
        v154 = v247;
        uint64_t v225 = v131;
        uint64_t v226 = v130;
        sub_100034E9C(v130, v131);
        sub_100041B5C();
        if ((sub_100035424() & 1) == 0)
        {
          sub_10010E2CC();
          uint64_t v108 = v155;
        }

        if ((v154 & 0x8000000000000000LL) != 0) {
          goto LABEL_322;
        }
        if (v154 >= v108[2]) {
          goto LABEL_323;
        }
        unint64_t v156 = &v108[2 * v154];
        sub_100034E8C(v156[4], v156[5]);
        v156[4] = sub_10010A6B0;
        v156[5] = v153;
        uint64_t v157 = (v108[2] - 1LL) & (v154 + 1);
        uint64_t v245 = v108;
        uint64_t v247 = v157;
        if (v246 == v157) {
          sub_1000F3EAC();
        }
        sub_10002A51C();
        unint64_t v158 = *(void *)(v233 + 16);
        if (v158)
        {
          unint64_t v159 = 0LL;
          uint64_t v160 = v245;
          v161 = v247;
          while (1)
          {
            uint64_t v162 = (uint64_t *)(v233 + 32 + 16 * v159);
            uint64_t v163 = *v162;
            uint64_t v164 = v162[1];
            sub_10009B59C(v164);
            if ((swift_isUniquelyReferenced_nonNull_native(v160) & 1) == 0)
            {
              sub_1000F23C0();
              uint64_t v160 = v165;
            }

            if ((v161 & 0x8000000000000000LL) != 0)
            {
LABEL_288:
              __break(1u);
LABEL_289:
              __break(1u);
LABEL_290:
              __break(1u);
LABEL_291:
              __break(1u);
LABEL_292:
              __break(1u);
LABEL_293:
              __break(1u);
LABEL_294:
              __break(1u);
LABEL_295:
              __break(1u);
LABEL_296:
              __break(1u);
LABEL_297:
              __break(1u);
LABEL_298:
              __break(1u);
LABEL_299:
              __break(1u);
LABEL_300:
              __break(1u);
LABEL_301:
              __break(1u);
LABEL_302:
              __break(1u);
LABEL_303:
              __break(1u);
LABEL_304:
              __break(1u);
LABEL_305:
              __break(1u);
LABEL_306:
              __break(1u);
LABEL_307:
              __break(1u);
LABEL_308:
              __break(1u);
LABEL_309:
              __break(1u);
LABEL_310:
              __break(1u);
LABEL_311:
              __break(1u);
LABEL_312:
              __break(1u);
LABEL_313:
              __break(1u);
LABEL_314:
              __break(1u);
LABEL_315:
              __break(1u);
LABEL_316:
              __break(1u);
LABEL_317:
              __break(1u);
LABEL_318:
              __break(1u);
              goto LABEL_319;
            }

            if (v161 >= v160[2]) {
              goto LABEL_289;
            }
            uint64_t v166 = (unint64_t)(v160 + 4);
            uint64_t v167 = &v160[2 * v161 + 4];
            sub_100034E8C(*v167, v167[1]);
            *uint64_t v167 = v163;
            v167[1] = v164;
            uint64_t v168 = v160[2];
            v161 = (v168 - 1) & (v161 + 1);
            if (v246 != v161)
            {
              sub_10002A5A4();
              goto LABEL_250;
            }

            if (2 * v168 < 1) {
              goto LABEL_294;
            }
            uint64_t v241 = v164;
            v239 = v159;
            uint64_t v169 = v158;
            uint64_t v242 = _swiftEmptyArrayStorage;
            uint64_t v237 = 2 * v168;
            sub_1000321FC();
            uint64_t v170 = v160[2];
            uint64_t v171 = v170 - v161;
            if (v170 < v161) {
              goto LABEL_295;
            }
            uint64_t v172 = v242;
            uint64_t v173 = v242[2];
            if (__OFADD__(v173, v171)) {
              goto LABEL_296;
            }
            uint64_t v174 = v242[3] >> 1;
            sub_10002A75C();
            if (v174 < v173 + v171)
            {
              sub_10010D920();
              uint64_t v172 = v242;
              uint64_t v173 = v242[2];
              uint64_t v174 = v242[3] >> 1;
            }

            if (v170 == v161)
            {
              unint64_t v158 = v169;
              if (v171 > 0) {
                goto LABEL_297;
              }
            }

            else
            {
              if (v174 - v173 < v171) {
                goto LABEL_311;
              }
              if (v171 < 0)
              {
LABEL_329:
                sub_100034FD0();
                uint64_t v206 = "UnsafeMutablePointer.initialize with negative count";
                int v207 = 51LL;
                goto LABEL_330;
              }

              uint64_t v175 = (unint64_t)&v172[2 * v173 + 4];
              if (v166 + 16 * v161 < v175 + 16 * v171 && v175 < v166 + 16 * v170) {
                goto LABEL_328;
              }
              sub_1000175B0(&qword_1002B0E98);
              sub_10010DFA4();
              uint64_t v177 = v172[2];
              uint64_t v31 = __OFADD__(v177, v171);
              uint64_t v178 = v177 + v171;
              if (v31) {
                goto LABEL_312;
              }
              unint64_t v158 = v169;
              v172[2] = v178;
            }

            sub_10002A524();
            if (v160[2] < v161) {
              goto LABEL_298;
            }
            uint64_t v179 = v172[2];
            if (__OFADD__(v179, v161)) {
              goto LABEL_299;
            }
            uint64_t v242 = v172;
            uint64_t v180 = v172[3] >> 1;
            sub_10002A75C();
            if (v180 < (uint64_t)(v179 + v161))
            {
              sub_10010D920();
              uint64_t v172 = v242;
              uint64_t v179 = v242[2];
              uint64_t v180 = v242[3] >> 1;
            }

            unint64_t v159 = v239;
            if (v161)
            {
              uint64_t v181 = (unint64_t)&v172[2 * v179 + 4];
              if (v166 < v181 + 16 * v161 && v181 < v166 + 16 * v161) {
                goto LABEL_328;
              }
              sub_1000175B0(&qword_1002B0E98);
              swift_arrayInitWithCopy(v181);
              Swift::Int v183 = v172[2];
              uint64_t v31 = __OFADD__(v183, v161);
              uint64_t v184 = v183 + v161;
              if (v31) {
                goto LABEL_309;
              }
              v172[2] = v184;
            }

            sub_10002A524();
            v161 = v172[2];
            v185 = v237;
            uint64_t v186 = v237 - v161;
            if (__OFADD__(v161, v186)) {
              goto LABEL_301;
            }
            uint64_t v242 = v172;
            uint64_t v187 = v172[3] >> 1;
            uint64_t v188 = v161;
            if (v187 < v237)
            {
              sub_10010D920();
              v185 = v237;
              uint64_t v172 = v242;
              uint64_t v188 = v242[2];
              uint64_t v187 = v242[3] >> 1;
            }

            unint64_t v189 = v187 - v188;
            uint64_t v190 = v241;
            if (v187 == v188) {
              goto LABEL_221;
            }
            if (v189 < 1) {
              goto LABEL_310;
            }
            if (v185 == v161)
            {
LABEL_221:
              uint64_t v191 = 0LL;
LABEL_222:
              if (v191 < v186) {
                goto LABEL_302;
              }
LABEL_223:
              if (v191 <= 0) {
                goto LABEL_230;
              }
            }

            else
            {
              uint64_t v192 = &v172[2 * v188];
              v192[4] = 0LL;
              v192[5] = 0LL;
              if (v189 != 1)
              {
                int v203 = v192 + 6;
                uint64_t v204 = 1LL;
                while (v204 < v189)
                {
                  if (v186 == v204)
                  {
                    uint64_t v191 = v237 - v161;
                    goto LABEL_223;
                  }

                  if (v204 >= v186) {
                    goto LABEL_287;
                  }
                  ++v204;
                  *int v203 = 0LL;
                  v203[1] = 0LL;
                  v203 += 2;
                  if (v189 == v204)
                  {
                    uint64_t v191 = v189;
                    goto LABEL_222;
                  }
                }

                goto LABEL_286;
              }

              uint64_t v191 = 1LL;
            }

            uint64_t v31 = __OFADD__(v188, v191);
            v188 += v191;
            if (v31) {
              goto LABEL_303;
            }
            v172[2] = v188;
LABEL_230:
            if (v191 == v189 && v191 != v186)
            {
              if (v189 >= v186) {
                goto LABEL_313;
              }
              v194 = v189 + 1;
              while (1)
              {
                uint64_t v195 = v188 + 1;
                if (v188 + 1 > v172[3] >> 1) {
                  sub_1000321FC();
                }
                uint64_t v172 = v242;
                uint64_t v196 = v242[3];
LABEL_247:
                v172[2] = v188;
              }

              uint64_t v197 = &v242[2 * v188];
              v197[4] = 0LL;
              v197[5] = 0LL;
              if (v194 != v186)
              {
                int v198 = v196 >> 1;
                v199 = v194 + (v196 >> 1) - v188;
                id v200 = 16 * v188 + 48;
                v201 = v194;
                while ((v194 & 0x8000000000000000LL) == 0 && v201 < v186)
                {
                  if (v195 >= v198)
                  {
                    uint64_t v188 = v195;
                    v194 = v199;
                    goto LABEL_247;
                  }

                  ++v201;
                  ++v195;
                  v202 = (void *)((char *)v172 + v200);
                  void *v202 = 0LL;
                  v202[1] = 0LL;
                  v200 += 16LL;
                  if (v186 == v201)
                  {
                    v172[2] = v195;
                    goto LABEL_248;
                  }
                }

                __break(1u);
LABEL_266:
                __break(1u);
LABEL_267:
                __break(1u);
LABEL_268:
                __break(1u);
LABEL_269:
                __break(1u);
LABEL_270:
                __break(1u);
LABEL_271:
                __break(1u);
LABEL_272:
                __break(1u);
LABEL_273:
                __break(1u);
LABEL_274:
                __break(1u);
LABEL_275:
                __break(1u);
LABEL_276:
                __break(1u);
LABEL_277:
                __break(1u);
LABEL_278:
                __break(1u);
LABEL_279:
                __break(1u);
LABEL_280:
                __break(1u);
LABEL_281:
                __break(1u);
LABEL_282:
                __break(1u);
LABEL_283:
                __break(1u);
LABEL_284:
                __break(1u);
LABEL_285:
                __break(1u);
LABEL_286:
                __break(1u);
LABEL_287:
                __break(1u);
                goto LABEL_288;
              }

              v172[2] = v195;
              sub_10010E62C();
LABEL_248:
              uint64_t v190 = v241;
            }

            swift_release(v190);
            sub_10002A524();
            char v246 = 0LL;
            uint64_t v160 = v172;
LABEL_250:
            if (++v159 == v158)
            {
              sub_100023EEC();
              sub_100034E8C(v226, v225);
              sub_10010E5C0(v226);
              sub_100023EEC();
              uint64_t v247 = v161;
              uint64_t v245 = v160;
              goto LABEL_260;
            }
          }
        }

        swift_bridgeObjectRelease(v233);
        sub_100034E8C(v226, v131);
        uint64_t v205 = sub_10009B180();
        swift_bridgeObjectRelease(v205);
LABEL_262:
        uint64_t v110 = v246;
        unint64_t v112 = v247;
        uint64_t v108 = v245;
      }

      else
      {
        uint64_t v148 = (uint64_t)v242;
        uint64_t v149 = v243;
        uint64_t v150 = sub_100019310((uint64_t)&unk_1002833C0, 32LL);
        *(void *)(v150 + 16) = v148;
        *(void *)(v150 + 24) = v131;
        sub_100034E9C(v148, v149);
        sub_10002A674();
        if ((sub_100035424() & 1) == 0)
        {
          sub_10010E2CC();
          uint64_t v108 = v151;
        }

        uint64_t v103 = v228;
        uint64_t v102 = (uint64_t (*)(uint64_t))v230;
        if (v112 < 0) {
          goto LABEL_324;
        }
        uint64_t v152 = &v108[2 * v112];
        sub_100034E8C(v152[4], v152[5]);
        v152[4] = sub_10010A6B0;
        v152[5] = v150;
        unint64_t v112 = (v108[2] - 1LL) & (v112 + 1);
        uint64_t v245 = v108;
        uint64_t v247 = v112;
        uint64_t v110 = v246;
        if (v246 == v112)
        {
          sub_1000F3EAC();
          sub_10002A5A4();
          sub_10010E694();
          goto LABEL_262;
        }

        sub_10002A5A4();
        sub_10010E694();
      }
    }

    swift_bridgeObjectRelease(v244);
LABEL_260:
    uint64_t v103 = v228;
    uint64_t v102 = (uint64_t (*)(uint64_t))v230;
    goto LABEL_262;
  }

#error "1000F8274: call analysis failed (funcsize=22)"
void EventLoopFuture.__allocating_init(_eventLoop:file:line:)( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  sub_1000353E0();
  a19 = v21;
  a20 = v22;
  sub_10010E13C();
  uint64_t v23 = *(void *)(v20 + 80);
  sub_100018EC0(&qword_1002A9710);
  uint64_t v24 = type metadata accessor for Result(255LL, v23);
  type metadata accessor for Optional(0LL, v24);
  sub_1000706E4();
  __chkstk_darwin(v25);
  sub_10001762C((uint64_t)&a9 - v26, 1LL, 1LL, v24);
  sub_10010E0D8();
  sub_10010DF74();
  sub_10002A580();
}

void EventLoopPromise._resolve(value:)()
{
  uint64_t v22 = v0;
  uint64_t v23 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  sub_100018EC0(&qword_1002A9710);
  uint64_t v8 = sub_10010E2FC(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v20 - v11;
  sub_10010E1AC();
  uint64_t v14 = *(void *)(v13 + 8);
  uint64_t v15 = sub_10002A444();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v15, v14) & 1) != 0)
  {
    sub_10010E474();
    EventLoopPromise._setValue(value:)();
    sub_10009B170();
    sub_10009B180();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10010E440((uint64_t)v12, v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16));
    uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v21 = v3;
    uint64_t v17 = (v16 + 32) & ~v16;
    uint64_t v18 = swift_allocObject(&unk_1002833E8, v17 + v10, v16 | 7);
    *(void *)(v18 + 16) = v21;
    *(void *)(v18 + 24) = v5;
    sub_10010E440(v18 + v17, (uint64_t)v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32));
    uint64_t v19 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v14 + 24);
    sub_10002A4C8();
    v19(sub_10010BD5C, v18, v15, v14);
    sub_10001ED6C();
    sub_10002A580();
  }

void EventLoopPromise.completeWith(_:)(uint64_t a1, uint64_t a2)
{
}

void EventLoopPromise._setValue(value:)()
{
}

uint64_t sub_1000F84AC()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  CallbackList._run()();
  sub_100034E8C(v1, v3);
  return swift_bridgeObjectRelease();
}

void EventLoopFuture._setValue(value:)()
{
  uint64_t v2 = v0;
  uint64_t v24 = v3;
  sub_100018EC0(&qword_1002A9710);
  uint64_t v4 = sub_10010E3E0();
  uint64_t v5 = sub_10010E12C(v4);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v23 - v10;
  sub_10002A444();
  sub_10002A6F4();
  sub_10010E448(v12, v13, v14, 769LL, v15);
  uint64_t v16 = v2 + *(void *)(*(void *)v2 + 88LL);
  sub_1000487CC(v16, (uint64_t)&v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v11, v16, v5);
  uint64_t v17 = sub_10010E45C();
  int v19 = sub_10001D158(v17, v18, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  if (v19 == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))(v9, v24, v1);
    sub_10001762C((uint64_t)v9, 0LL, 1LL, v1);
    sub_10002A718(v16, (uint64_t)v25, 33LL);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v16, v9, v5);
    swift_endAccess(v25);
    uint64_t v20 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 104LL));
    sub_10002A718((uint64_t)v20, (uint64_t)v25, 1LL);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    v20[1] = 0LL;
    v20[2] = 0LL;
    *uint64_t v20 = 0LL;
    sub_100034E9C(v21, v22);
    swift_bridgeObjectRetain();
    sub_100034E8C(v21, v22);
    sub_100056ADC();
  }

  sub_10002A580();
}

void EventLoopFuture._value.getter()
{
  uint64_t v1 = sub_10010E0A0(*(void *)(*(void *)v0 + 88LL));
  sub_1000487CC(v1, v2);
  sub_100018EC0(&qword_1002A9710);
  uint64_t v3 = sub_10010E2FC(255LL);
  uint64_t v4 = sub_10010DBDC(v3);
  sub_10010DE9C(v4);
  sub_100013858();
}

void EventLoopFuture._value.setter()
{
  uint64_t v1 = sub_10010E0A0(*(void *)(*(void *)v0 + 88LL));
  sub_10002A718(v1, v2, 33LL);
  sub_100018EC0(&qword_1002A9710);
  uint64_t v3 = sub_10010E2FC(255LL);
  sub_10010DBDC(v3);
  uint64_t v4 = sub_10010E4F0();
  v5(v4);
  swift_endAccess(v6);
  sub_100013858();
}

void EventLoopFuture._value.modify(uint64_t a1)
{
}

void EventLoopFuture.eventLoop.getter()
{
}

uint64_t EventLoopFuture._callbacks.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 104LL));
  sub_1000487CC((uint64_t)v1, (uint64_t)v4);
  uint64_t v2 = *v1;
  sub_100034E9C(*v1, v1[1]);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t EventLoopFuture._callbacks.setter()
{
  uint64_t v4 = sub_10010E0A0(*(void *)(*v1 + 104));
  sub_10002A718(v4, v5, 1LL);
  uint64_t v6 = *v1;
  uint64_t v7 = v1[1];
  *uint64_t v1 = v3;
  v1[1] = v2;
  v1[2] = v0;
  sub_100034E8C(v6, v7);
  return sub_10003561C();
}

void EventLoopFuture._callbacks.modify(uint64_t a1)
{
}

void EventLoopFuture.__allocating_init(_eventLoop:value:file:line:)()
{
}

void EventLoopFuture.init(_eventLoop:value:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)(v3 + *(void *)(*(void *)v3 + 96LL));
  *uint64_t v5 = a1;
  v5[1] = a2;
  uint64_t v6 = v3 + *(void *)(*(void *)v3 + 88LL);
  sub_100018EC0(&qword_1002A9710);
  uint64_t v7 = sub_10010DED0();
  uint64_t v8 = sub_10010DBDC(v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, a3, v8);
  uint64_t v9 = (void *)(v3 + *(void *)(*(void *)v3 + 104LL));
  v9[1] = 0LL;
  v9[2] = 0LL;
  *uint64_t v9 = 0LL;
  sub_1000193B8();
}

void _NIOEventLoopFutureIdentifier.init<A>(_:)()
{
}

void EventLoopFuture.__allocating_init(eventLoop:value:file:line:)()
{
  v9[1] = v1;
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v0 + 80);
  sub_100018EC0(&qword_1002A9710);
  uint64_t v5 = sub_10010E3EC();
  sub_10010E638();
  sub_1000706E4();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v9 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))((char *)v9 - v7, v3, v4);
  swift_storeEnumTagMultiPayload(v8, v5, 0LL);
  sub_10001762C((uint64_t)v8, 0LL, 1LL, v5);
  sub_10010E0D8();
  EventLoopFuture.__allocating_init(_eventLoop:value:file:line:)();
  sub_10002A580();
}

void EventLoopFuture.__allocating_init(eventLoop:error:file:line:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  sub_10010E164();
  uint64_t v24 = *(void *)(v20 + 80);
  sub_100018EC0(&qword_1002A9710);
  uint64_t v25 = sub_10010E3EC();
  sub_10010E3B4(v25);
  sub_1000706E4();
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&a9 - v27;
  *(uint64_t *)((char *)&a9 - v27) = v21;
  sub_10010E5AC((uint64_t)&a9 - v27, v24);
  sub_10001762C((uint64_t)v28, 0LL, 1LL, v24);
  sub_10010DF74();
  sub_10002A580();
}

void EventLoopFuture.deinit()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80LL);
  uint64_t v2 = v0 + *(void *)(*(void *)v0 + 88LL);
  sub_100018EC0(&qword_1002A9710);
  uint64_t v3 = type metadata accessor for Result(255LL, v1);
  uint64_t v4 = sub_10010DBDC(v3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v2, v4);
  swift_unknownObjectRelease(*(void *)(v0 + *(void *)(*(void *)v0 + 96LL)));
  sub_100034E8C( *(void *)(v0 + *(void *)(*(void *)v0 + 104LL)),  *(void *)(v0 + *(void *)(*(void *)v0 + 104LL) + 8));
  sub_100019390();
  sub_1000193B8();
}

uint64_t EventLoopFuture.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1000F8C44(void *a1, void *a2)
{
  return static _NIOEventLoopFutureIdentifier.__derived_struct_equals(_:_:)(*a1, *a2) & 1;
}

uint64_t sub_1000F8C64(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v8 = swift_beginAccess(a1 + 16, v21, 0LL, 0LL);
  int v9 = *(unsigned __int8 *)(a1 + 24);
  if (v9 != 255)
  {
    if ((v9 & 1) != 0)
    {
      uint64_t v18 = *(void *)(a1 + 16);
      swift_errorRetain(v18);
      sub_1001A93A0(v18, 1);
      uint64_t v16 = v19;
      sub_10010CA6C(v18, v9);
      uint64_t v17 = a4;
    }

    else
    {
      uint64_t v10 = a3(v8);
      uint64_t v11 = *(void *)(v10 + 32);
      uint64_t v12 = *(void *)(v10 + 40);
      uint64_t ObjectType = swift_getObjectType(v11);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 16);
      swift_unknownObjectRetain(v11);
      LOBYTE(v12) = v14(ObjectType, v12);
      swift_unknownObjectRelease(v11);
      if ((v12 & 1) == 0)
      {
        sub_10002C4B8(a2);
        swift_release(a4);
        swift_release(v10);
        return 0LL;
      }

      swift_retain();
      uint64_t v15 = swift_retain();
      uint64_t v16 = sub_1000FA79C(v15, a2, v10);
      swift_release(a4);
      uint64_t v17 = v10;
    }

    swift_release(v17);
    return v16;
  }

  uint64_t result = swift_release(a4);
  __break(1u);
  return result;
}

uint64_t sub_1000F8DCC(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t result = swift_beginAccess(a1 + 16, v18, 0LL, 0LL);
  int v8 = *(unsigned __int8 *)(a1 + 24);
  if (v8 == 255)
  {
    __break(1u);
  }

  else
  {
    if ((v8 & 1) != 0)
    {
      uint64_t v16 = *(void *)(a1 + 16);
      swift_errorRetain(v16);
      sub_1001A93A0(v16, 1);
      uint64_t v15 = v17;
      sub_10010CA6C(v16, v8);
    }

    else
    {
      uint64_t v9 = a2(result);
      uint64_t v10 = *(void *)(v9 + 32);
      uint64_t v11 = *(void *)(v9 + 40);
      uint64_t ObjectType = swift_getObjectType(v10);
      uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 16);
      swift_unknownObjectRetain(v10);
      LOBYTE(sub_1000EF018(v9, v10, v11) = v13(ObjectType, v11);
      swift_unknownObjectRelease(v10);
      if ((v11 & 1) != 0)
      {
        swift_retain();
        uint64_t v14 = swift_retain();
        uint64_t v15 = sub_1000FA79C(v14, a4, v9);
        swift_release();
      }

      else
      {
        sub_10002C4B8(a4);
        swift_release();
        return 0LL;
      }
    }

    return v15;
  }

  return result;
}

uint64_t sub_1000F8F0C(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_beginAccess(a1 + 16, v13, 0LL, 0LL);
  int v5 = *(unsigned __int8 *)(a1 + 24);
  if (v5 == 255)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 16);
    if ((v5 & 1) != 0)
    {
      swift_errorRetain(*(void *)(a1 + 16));
      sub_1001A93A0(v6, 1);
      uint64_t v11 = v12;
    }

    else
    {
      uint64_t v7 = *(void *)(v6 + 32);
      uint64_t v8 = *(void *)(v6 + 40);
      uint64_t ObjectType = swift_getObjectType(v7);
      uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 16);
      sub_10010CDFC(v6, v5);
      sub_10010CDFC(v6, v5);
      swift_unknownObjectRetain(v7);
      LOBYTE(v8) = v10(ObjectType, v8);
      swift_unknownObjectRelease(v7);
      if ((v8 & 1) != 0)
      {
        sub_10010CDFC(v6, v5);
        swift_retain();
        uint64_t v11 = sub_1000FA60C(v6, a2, v6);
        sub_10010CDD0(v6, v5);
      }

      else
      {
        sub_10002C4B8(a2);
        sub_10010CDD0(v6, v5);
        uint64_t v11 = 0LL;
      }
    }

    sub_10010CDD0(v6, v5);
    return v11;
  }

  return result;
}

uint64_t sub_1000F906C(uint64_t a1, uint64_t (*a2)(uint64_t *), uint64_t a3, uint64_t a4)
{
  uint64_t result = swift_beginAccess(a1 + 16, v19, 0LL, 0LL);
  int v8 = *(unsigned __int8 *)(a1 + 24);
  if (v8 != 255)
  {
    uint64_t v9 = *(void *)(a1 + 16);
    if ((v8 & 1) != 0)
    {
      swift_errorRetain(v9);
      sub_1001A93A0(v9, 1);
      uint64_t v16 = v17;
    }

    else
    {
      uint64_t v18 = v9;
      swift_retain();
      uint64_t v10 = a2(&v18);
      uint64_t v11 = *(void *)(v10 + 32);
      uint64_t v12 = *(void *)(v10 + 40);
      uint64_t ObjectType = swift_getObjectType(v11);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 16);
      swift_unknownObjectRetain(v11);
      LOBYTE(v12) = v14(ObjectType, v12);
      swift_unknownObjectRelease(v11);
      if ((v12 & 1) == 0)
      {
        sub_10002C4B8(a4);
        swift_release();
        sub_10010CDD0(v9, v8);
        return 0LL;
      }

      swift_retain();
      uint64_t v15 = swift_retain();
      uint64_t v16 = sub_1000FA60C(v15, a4, v10);
      swift_release();
    }

    sub_10010CDD0(v9, v8);
    return v16;
  }

  __break(1u);
  return result;
}

void sub_1000F91D0(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 24);
  if (v4 == 255)
  {
    __break(1u);
  }

  else
  {
    uint64_t v5 = *(void *)(a1 + 16);
    if ((v4 & 1) != 0)
    {
      sub_10002A710();
      sub_1001A94F8(v5, 0LL, 1);
    }

    else
    {
      uint64_t v6 = *(void *)(v5 + 48);
      uint64_t v7 = sub_10002A444();
      int v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 16);
      sub_10010E01C();
      sub_10010E01C();
      sub_10009B28C();
      LOBYTE(v6) = v8(v7, v6);
      sub_10002A338();
      if ((v6 & 1) != 0)
      {
        sub_10010E01C();
        sub_10002A674();
        sub_1000FD73C(v5, a2, v5);
      }

      else
      {
        sub_10002C538(a2);
      }

      sub_10010E028();
    }

    sub_10010E028();
    sub_10010E5C8();
    sub_10002A568();
  }

uint64_t sub_1000F92D0(uint64_t a1, uint64_t (*a2)(uint64_t *), uint64_t a3, uint64_t a4)
{
  uint64_t result = swift_beginAccess(a1 + 16, v19, 0LL, 0LL);
  int v8 = *(unsigned __int8 *)(a1 + 24);
  if (v8 != 255)
  {
    uint64_t v9 = *(void *)(a1 + 16);
    if ((v8 & 1) != 0)
    {
      swift_errorRetain(v9);
      sub_1001A94F8(v9, 0LL, 1);
      uint64_t v16 = v17;
    }

    else
    {
      uint64_t v18 = v9;
      swift_retain();
      uint64_t v10 = a2(&v18);
      uint64_t v11 = *(void *)(v10 + 40);
      uint64_t v12 = *(void *)(v10 + 48);
      uint64_t ObjectType = swift_getObjectType(v11);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 16);
      swift_unknownObjectRetain(v11);
      LOBYTE(v12) = v14(ObjectType, v12);
      swift_unknownObjectRelease(v11);
      if ((v12 & 1) == 0)
      {
        sub_10002C538(a4);
        swift_release();
        sub_10010CDD0(v9, v8);
        return 0LL;
      }

      swift_retain();
      uint64_t v15 = swift_retain();
      uint64_t v16 = sub_1000FD73C(v15, a4, v10);
      swift_release();
    }

    sub_10010CDD0(v9, v8);
    return v16;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000F9438(uint64_t *a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v37 = a4;
  v34[1] = a3;
  uint64_t v35 = a2;
  uint64_t v7 = *a1;
  sub_100018EC0(&qword_1002A9710);
  uint64_t v8 = type metadata accessor for Result(0LL, a5);
  v34[0] = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (void *)((char *)v34 - v10);
  uint64_t v12 = *(void *)(v7 + 80);
  uint64_t v36 = *(void *)(v12 - 8);
  __chkstk_darwin(v9);
  uint64_t v14 = (char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Result(255LL, v12);
  uint64_t v16 = type metadata accessor for Optional(0LL, v15);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (void *)((char *)v34 - v18);
  uint64_t v20 = (char *)a1 + *(void *)(v7 + 88);
  swift_beginAccess(v20, v38, 0LL, 0LL);
  (*(void (**)(uint64_t *, char *, uint64_t))(v17 + 16))(v19, v20, v16);
  uint64_t result = sub_10001D158((uint64_t)v19, 1LL, v15);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(v19, v15) == 1)
    {
      uint64_t v22 = *v19;
      *uint64_t v11 = *v19;
      swift_storeEnumTagMultiPayload(v11, v8, 1LL);
      swift_errorRetain(v22);
      EventLoopPromise._setValue(value:)();
      uint64_t v24 = v23;
      swift_errorRelease(v22);
      (*(void (**)(uint64_t *, uint64_t))(v34[0] + 8LL))(v11, v8);
    }

    else
    {
      uint64_t v25 = v36;
      (*(void (**)(char *, uint64_t *, uint64_t))(v36 + 32))(v14, v19, v12);
      uint64_t v26 = v35(v14);
      uint64_t v27 = (void *)(v26 + *(void *)(*(void *)v26 + 96LL));
      uint64_t v28 = *v27;
      uint64_t v29 = v27[1];
      uint64_t ObjectType = swift_getObjectType(*v27);
      uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t))(v29 + 16);
      swift_unknownObjectRetain(v28);
      LOBYTE(v29) = v31(ObjectType, v29);
      swift_unknownObjectRelease(v28);
      if ((v29 & 1) != 0)
      {
        uint64_t v32 = (void *)swift_allocObject(&unk_100285598, 40LL, 7LL);
        __int128 v32[2] = v12;
        v32[3] = v37;
        v32[4] = v26;
        swift_retain();
        swift_retain();
        EventLoopFuture._addCallback(_:)();
        uint64_t v24 = v33;
        swift_release();
        swift_release();
        (*(void (**)(char *, uint64_t))(v25 + 8))(v14, v12);
      }

      else
      {
        EventLoopFuture.cascade(to:)(v37);
        swift_release();
        (*(void (**)(char *, uint64_t))(v25 + 8))(v14, v12);
        return 0LL;
      }
    }

    return v24;
  }

  return result;
}

void sub_1000F973C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)(a2 + 16);
  sub_1000487CC(a2 + 16, (uint64_t)v6);
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if (v4 == 255)
  {
    __break(1u);
  }

  else
  {
    uint64_t v5 = *v3;
    sub_1000419E4(v5, v4 & 1);
    sub_1001A93A0(v5, v4 & 1);
    sub_10010CA6C(v5, v4);
    sub_10010E5C8();
    sub_100019398();
  }

uint64_t sub_1000F97C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*a2 + 80);
  sub_100018EC0(&qword_1002A9710);
  uint64_t v5 = type metadata accessor for Result(255LL, v4);
  uint64_t v6 = type metadata accessor for Optional(0LL, v5);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v15[-v8 - 8];
  uint64_t v10 = (uint64_t)a2 + *(void *)(v3 + 88);
  swift_beginAccess(v10, v15, 0LL, 0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  uint64_t result = sub_10001D158((uint64_t)v9, 1LL, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    EventLoopPromise._setValue(value:)();
    uint64_t v13 = v12;
    (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v9, v5);
    return v13;
  }

  return result;
}

uint64_t sub_1000F98F0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject(&unk_100284CD8, 40LL, 7LL);
  v8[2] = a2;
  v8[3] = a3;
  void v8[4] = a4;
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v9);
  swift_beginAccess(a1 + 16, v15, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    swift_beginAccess(a1 + 48, v14, 33LL, 0LL);
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v14);
LABEL_8:
    swift_release(a2);
    swift_release(v8);
    swift_release(a4);
    return 0LL;
  }

  uint64_t result = swift_beginAccess(a2 + 16, v14, 0LL, 0LL);
  int v12 = *(unsigned __int8 *)(a2 + 24);
  if (v12 != 255)
  {
    uint64_t v13 = *(void *)(a2 + 16);
    swift_retain();
    swift_retain();
    if ((v12 & 1) != 0)
    {
      sub_10010CA54(v13, v12);
      a3(v13);
    }

    sub_10010CA6C(v13, v12);
    goto LABEL_8;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000F9A7C(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject(&unk_100285458, 40LL, 7LL);
  v8[2] = a2;
  v8[3] = a3;
  void v8[4] = a4;
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v9);
  swift_beginAccess(a1 + 16, v17, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    swift_beginAccess(a1 + 48, v16, 33LL, 0LL);
    swift_retain(a3);
    swift_retain(a4);
    CallbackList.append(_:)();
    swift_endAccess(v16);
    goto LABEL_5;
  }

  uint64_t result = swift_beginAccess(a4 + 16, v16, 0LL, 0LL);
  uint64_t v12 = *(void *)(a4 + 16);
  int v13 = *(unsigned __int8 *)(a4 + 24);
  uint64_t v14 = v12;
  char v15 = v13;
  if (v13 != 255)
  {
    swift_retain(a3);
    swift_retain(a4);
    sub_10010CA54(v12, v13);
    a2(&v14);
    sub_100034F08(v14, v15);
LABEL_5:
    swift_release(a3);
    swift_release(v8);
    swift_release(a4);
    return 0LL;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000F9BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_allocObject(&unk_100284328, 56LL, 7LL);
  v12[2] = a2;
  void v12[3] = a3;
  v12[4] = a4;
  void v12[5] = a5;
  v12[6] = a6;
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v13);
  swift_beginAccess(a1 + 16, v19, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    swift_beginAccess(a1 + 48, v18, 33LL, 0LL);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v18);
    swift_release();
    swift_release();
    uint64_t v16 = 0LL;
  }

  else
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_100105B6C(a2, a3, a4, a5, a6, (void (*)(uint64_t))sub_1001A94BC, (void (*)(void))sub_10010D6B0);
    uint64_t v16 = v15;
    swift_release();
    swift_release();
  }

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v16;
}

uint64_t sub_1000F9DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_allocObject(&unk_1002843A0, 48LL, 7LL);
  v10[2] = a2;
  void v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v11);
  swift_beginAccess(a1 + 16, v17, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    swift_beginAccess(a1 + 48, v16, 33LL, 0LL);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v16);
    swift_release();
    swift_release();
    uint64_t v14 = 0LL;
  }

  else
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1001055F4( a2,  a3,  a4,  a5,  (void (*)(uint64_t))sub_1001A94BC,  (void (*)(uint64_t, uint64_t))sub_10010D6BC,  (void (*)(void))sub_10010D6B0);
    uint64_t v14 = v13;
    swift_release();
    swift_release();
  }

  swift_release();
  swift_release();
  swift_release();
  return v14;
}

uint64_t sub_1000F9F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_allocObject(&unk_100284238, 56LL, 7LL);
  v12[2] = a2;
  void v12[3] = a3;
  v12[4] = a4;
  void v12[5] = a5;
  v12[6] = a6;
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v13);
  swift_beginAccess(a1 + 16, v19, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    swift_beginAccess(a1 + 48, v18, 33LL, 0LL);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v18);
    swift_release();
    swift_release();
    uint64_t v16 = 0LL;
  }

  else
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_100105B6C(a2, a3, a4, a5, a6, (void (*)(uint64_t))sub_1001A94A8, (void (*)(void))sub_100034F08);
    uint64_t v16 = v15;
    swift_release();
    swift_release();
  }

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v16;
}

uint64_t sub_1000FA160(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject(&unk_100284D50, 40LL, 7LL);
  v8[2] = a2;
  v8[3] = a3;
  void v8[4] = a4;
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v9);
  swift_beginAccess(a1 + 16, v15, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    swift_beginAccess(a1 + 48, v14, 33LL, 0LL);
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v14);
LABEL_6:
    swift_release(a2);
    swift_release(v8);
    swift_release(a4);
    return 0LL;
  }

  uint64_t result = swift_beginAccess(a2 + 16, v14, 0LL, 0LL);
  int v12 = *(unsigned __int8 *)(a2 + 24);
  if (v12 != 255)
  {
    swift_retain();
    uint64_t v13 = swift_retain();
    if ((v12 & 1) == 0) {
      a3(v13);
    }
    goto LABEL_6;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000FA2BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v10 = swift_allocObject(&unk_100285638, 32LL, 7LL);
  *(void *)(v10 + 16) = a4;
  *(void *)(v10 + 24) = a5;
  uint64_t v11 = (void *)swift_allocObject(&unk_100285660, 48LL, 7LL);
  void v11[2] = a2;
  void v11[3] = sub_10010D7D4;
  v11[4] = v10;
  v11[5] = a3;
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v12);
  swift_beginAccess(a1 + 16, v17, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    swift_beginAccess(a1 + 48, v16, 33LL, 0LL);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v16);
    swift_release(a2);
    swift_release(v11);
    uint64_t v14 = 0LL;
  }

  else
  {
    swift_retain_n(a5, 2LL);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v14 = sub_1000F8C64(a2, a3, a4, a5);
    swift_release(a2);
    swift_release(v11);
  }

  swift_release(a3);
  swift_release(a5);
  swift_release(v10);
  return v14;
}

uint64_t sub_1000FA488(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_allocObject(&unk_100283F18, 48LL, 7LL);
  v10[2] = a2;
  void v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v11);
  swift_beginAccess(a1 + 16, v16, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    swift_beginAccess(a1 + 48, v15, 33LL, 0LL);
    swift_retain();
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v15);
    swift_release();
    swift_release();
    uint64_t v13 = 0LL;
  }

  else
  {
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v13 = sub_1000F8DCC(a2, a3, a4, a5);
    swift_release();
    swift_release();
  }

  swift_release();
  swift_release();
  return v13;
}

uint64_t sub_1000FA60C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject(&unk_100283FE0, 32LL, 7LL);
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v7);
  swift_beginAccess(a1 + 16, v15, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    swift_beginAccess(a1 + 48, v14, 33LL, 0LL);
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v14);
    uint64_t v13 = 0LL;
    goto LABEL_5;
  }

  uint64_t result = swift_beginAccess(a3 + 16, v14, 0LL, 0LL);
  int v10 = *(unsigned __int8 *)(a3 + 24);
  if (v10 != 255)
  {
    uint64_t v11 = *(void *)(a3 + 16);
    swift_retain();
    swift_retain();
    sub_10010CA54(v11, v10);
    sub_1001A93A0(v11, v10 & 1);
    uint64_t v13 = v12;
    sub_10010CA6C(v11, v10);
LABEL_5:
    swift_release();
    swift_release();
    swift_release();
    return v13;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000FA79C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject(&unk_100283F40, 32LL, 7LL);
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v7);
  swift_beginAccess(a1 + 16, v15, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    swift_beginAccess(a1 + 48, v14, 33LL, 0LL);
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v14);
    uint64_t v13 = 0LL;
    goto LABEL_5;
  }

  uint64_t result = swift_beginAccess(a3 + 16, v14, 0LL, 0LL);
  int v10 = *(unsigned __int8 *)(a3 + 24);
  if (v10 != 255)
  {
    uint64_t v11 = *(void *)(a3 + 16);
    swift_retain();
    swift_retain();
    sub_10010CA54(v11, v10);
    sub_1001A93A0(v11, v10 & 1);
    uint64_t v13 = v12;
    sub_10010CA6C(v11, v10);
LABEL_5:
    swift_release(a2);
    swift_release(v6);
    swift_release(a3);
    return v13;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000FA92C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)sub_100019310((uint64_t)&unk_100285480, 48LL);
  _OWORD v6[2] = a2;
  v6[3] = a3;
  v6[4] = sub_10006E8E0;
  v6[5] = 0LL;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  sub_10002A444();
  sub_10010E0FC();
  EventLoop.assertInEventLoop(file:line:)(v9, v10, v11, v12, v13, v8);
  sub_1000487CC(a1 + 16, (uint64_t)v19);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    sub_10002A718(a1 + 48, (uint64_t)v18, 33LL);
    sub_10002A75C();
    sub_10002A4C8();
    CallbackList.append(_:)();
    swift_endAccess(v18);
    sub_10002A524();
    sub_10002A5A4();
    uint64_t v7 = 0LL;
LABEL_8:
    sub_10001EDD8();
    return v7;
  }

  uint64_t result = sub_1000487CC(a2 + 16, (uint64_t)v18);
  int v15 = *(unsigned __int8 *)(a2 + 24);
  if (v15 != 255)
  {
    uint64_t v16 = *(void *)(a2 + 16);
    swift_retain(a2);
    sub_10002A4C8();
    if ((v15 & 1) != 0)
    {
      sub_10010CA54(v16, v15);
      sub_10006E8E0(v16);
      sub_10010E434(0LL);
      sub_10010DD9C();
    }

    else
    {
      sub_10010E434(v16);
      uint64_t v7 = v17;
    }

    sub_10002A524();
    sub_10002A5A4();
    goto LABEL_8;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000FAADC( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr), uint64_t a5)
{
  uint64_t v10 = (void *)swift_allocObject(&unk_100284620, 48LL, 7LL);
  v10[2] = a2;
  void v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v11);
  swift_beginAccess(a1 + 16, v24, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    swift_beginAccess(a1 + 48, v23, 33LL, 0LL);
    swift_retain();
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v23);
    uint64_t v22 = 0LL;
    goto LABEL_5;
  }

  uint64_t result = swift_beginAccess(a3 + 16, v23, 0LL, 0LL);
  int v14 = *(unsigned __int8 *)(a3 + 24);
  if (v14 != 255)
  {
    uint64_t v15 = *(void *)(a3 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_10010CA54(v15, v14);
    uint64_t v16 = sub_1000F3610(a4, a5, v15, v14 & 1);
    uint64_t v18 = v17;
    char v20 = v19 & 1;
    sub_10010CA6C(v15, v14);
    sub_1001A94F8(v16, v18, v20);
    uint64_t v22 = v21;
    sub_100034DB8(v16, v18, v20);
LABEL_5:
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return v22;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000FACCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject(&unk_100284148, 40LL, 7LL);
  v8[2] = a2;
  v8[3] = a3;
  void v8[4] = a4;
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v9);
  swift_beginAccess(a1 + 16, v15, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    swift_beginAccess(a1 + 48, v14, 33LL, 0LL);
    swift_retain();
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v14);
    swift_release();
    swift_release();
    uint64_t v12 = 0LL;
  }

  else
  {
    swift_retain();
    swift_retain();
    swift_retain();
    sub_100106500();
    uint64_t v12 = v11;
    swift_release();
    swift_release();
  }

  swift_release();
  swift_release();
  return v12;
}

uint64_t sub_1000FAE48(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v10 = swift_allocObject(&unk_100283E78, 32LL, 7LL);
  *(void *)(v10 + 16) = a4;
  *(void *)(v10 + 24) = a5;
  uint64_t v11 = (void *)swift_allocObject(&unk_100283EA0, 48LL, 7LL);
  void v11[2] = a2;
  void v11[3] = sub_10010D774;
  v11[4] = v10;
  v11[5] = a3;
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v12);
  swift_beginAccess(a1 + 16, v22, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    swift_beginAccess(a1 + 48, v21, 33LL, 0LL);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v21);
    swift_release();
    swift_release();
    uint64_t v19 = 0LL;
LABEL_8:
    swift_release();
    swift_release();
    swift_release();
    return v19;
  }

  swift_beginAccess(a2 + 16, v21, 0LL, 0LL);
  int v14 = *(unsigned __int8 *)(a2 + 24);
  if (v14 != 255)
  {
    uint64_t v15 = *(void *)(a2 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if ((v14 & 1) != 0)
    {
      sub_10010CA54(v15, v14);
      sub_1001A93A0(v15, 1);
      uint64_t v19 = v17;
      sub_10010CA6C(v15, v14);
    }

    else
    {
      uint64_t v16 = swift_retain();
      a4(v16);
      sub_1001A93A0(0LL, 0);
      uint64_t v19 = v18;
      swift_release();
    }

    swift_release();
    swift_release();
    goto LABEL_8;
  }

  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t result = swift_retain();
  __break(1u);
  return result;
}

uint64_t sub_1000FB108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject(&unk_100283BF8, 48LL, 7LL);
  v8[2] = a2;
  v8[3] = a3;
  void v8[4] = sub_10010C7D4;
  v8[5] = a4;
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v9);
  swift_beginAccess(a1 + 16, v14, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    swift_beginAccess(a1 + 48, v13, 33LL, 0LL);
    swift_retain_n(a4, 2LL);
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v13);
    swift_release();
    swift_release();
    uint64_t v11 = 0LL;
  }

  else
  {
    swift_retain_n(a4, 3LL);
    swift_retain();
    swift_retain();
    uint64_t v11 = sub_100104784(a2, a3, a4);
    swift_release();
    swift_release();
  }

  swift_release_n(a4, 2LL);
  swift_release();
  return v11;
}

uint64_t sub_1000FB298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject(&unk_100283CE8, 48LL, 7LL);
  v8[2] = a2;
  v8[3] = a3;
  void v8[4] = sub_10010C84C;
  v8[5] = a4;
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v9);
  swift_beginAccess(a1 + 16, v14, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    swift_beginAccess(a1 + 48, v13, 33LL, 0LL);
    swift_retain_n(a4, 2LL);
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v13);
    swift_release();
    swift_release();
    uint64_t v11 = 0LL;
  }

  else
  {
    swift_retain_n(a4, 3LL);
    swift_retain();
    swift_retain();
    uint64_t v11 = sub_100104884(a2, a3, a4);
    swift_release();
    swift_release();
  }

  swift_release_n(a4, 2LL);
  swift_release();
  return v11;
}

uint64_t sub_1000FB428( uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t *__return_ptr, void *), uint64_t a5)
{
  void (*v28)(uint64_t *__return_ptr, void *);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void v32[2];
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  __int16 v39;
  char v40;
  uint64_t v41;
  char v42[24];
  char v43[32];
  uint64_t v10 = (void *)swift_allocObject(&unk_100283B80, 48LL, 7LL);
  v10[2] = a2;
  void v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  uint64_t v11 = *(void *)(a1 + 88);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 80));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v11);
  swift_beginAccess(a1 + 16, v43, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 79) == 255LL)
  {
    swift_beginAccess(a1 + 96, v32, 33LL, 0LL);
    swift_retain();
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v32);
    uint64_t v13 = 0LL;
LABEL_8:
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return v13;
  }

  uint64_t v28 = a4;
  uint64_t result = swift_beginAccess(a3 + 2, v42, 0LL, 0LL);
  unint64_t v15 = a3[9];
  if (HIBYTE(v15) != 255)
  {
    uint64_t v17 = a3[2];
    uint64_t v16 = a3[3];
    uint64_t v18 = a3[4];
    uint64_t v19 = a3[5];
    uint64_t v20 = a3[6];
    uint64_t v21 = a3[7];
    uint64_t v30 = v20;
    uint64_t v31 = v15 & 0x100000000000000LL;
    uint64_t v22 = a3[8];
    if ((v15 & 0x100000000000000LL) != 0)
    {
      uint64_t v23 = a3[8];
      uint64_t v29 = a3[4];
      swift_retain();
      swift_retain();
      swift_retain();
      sub_10010C60C(v17, v16, v29, v19, v30, v21, v23, v15);
    }

    else
    {
      v32[0] = a3[2];
      v32[1] = v16;
      uint64_t v33 = v18;
      uint64_t v34 = v19;
      uint64_t v35 = v20;
      uint64_t v27 = v21;
      uint64_t v36 = v21;
      uint64_t v37 = v22;
      uint64_t v38 = v15;
      uint64_t v40 = BYTE6(v15);
      unint64_t v39 = WORD2(v15);
      uint64_t v24 = v22;
      uint64_t v25 = v18;
      swift_retain();
      swift_retain();
      swift_retain();
      sub_10010C60C(v17, v16, v25, v19, v20, v27, v24, v15);
      v28(&v41, v32);
      sub_10010C6B8(v17, v16, v25, v19, v20, v27, v24, v15);
      uint64_t v17 = v41;
    }

    sub_1001A93A0(v17, SHIBYTE(v31));
    uint64_t v13 = v26;
    sub_100034F08(v17, v31 != 0);
    goto LABEL_8;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000FB6E0(uint64_t (*a1)(uint64_t))
{
  uint64_t v3 = *(void *)(v1 + 88);
  uint64_t ObjectType = swift_getObjectType(*(void *)(v1 + 80));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v3);
  uint64_t v5 = swift_beginAccess(v1 + 16, v8, 0LL, 0LL);
  swift_beginAccess(v1 + 96, v7, 33LL, 0LL);
  CallbackList.append(_:)();
  swift_endAccess(v7);
  return 0LL;
}

uint64_t sub_1000FB7B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_allocObject(&unk_100283FB8, 48LL, 7LL);
  _OWORD v6[2] = a2;
  v6[3] = sub_10010D7F0;
  v6[4] = 0LL;
  v6[5] = a3;
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v7);
  swift_beginAccess(a1 + 16, v12, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    swift_beginAccess(a1 + 48, v11, 33LL, 0LL);
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v11);
    swift_release();
    swift_release();
    uint64_t v9 = 0LL;
  }

  else
  {
    swift_retain();
    swift_retain();
    uint64_t v9 = sub_1000F8F0C(a2, a3);
    swift_release();
    swift_release();
  }

  swift_release();
  return v9;
}

uint64_t sub_1000FB90C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject(&unk_100284418, 40LL, 7LL);
  v8[2] = a2;
  v8[3] = a3;
  void v8[4] = a4;
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v9);
  swift_beginAccess(a1 + 16, v15, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    swift_beginAccess(a1 + 48, v14, 33LL, 0LL);
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v14);
LABEL_7:
    swift_release();
    swift_release();
    swift_release();
    return 0LL;
  }

  uint64_t result = swift_beginAccess(a2 + 16, v14, 0LL, 0LL);
  int v12 = *(unsigned __int8 *)(a2 + 24);
  if (v12 != 255)
  {
    if ((v12 & 1) != 0)
    {
      uint64_t v13 = *(void *)(a2 + 16);
      swift_retain();
      swift_retain();
      sub_10010CDFC(v13, v12);
      a3(v13);
      sub_10010CDD0(v13, v12);
    }

    else
    {
      swift_retain();
      swift_retain();
    }

    goto LABEL_7;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000FBA9C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject(&unk_100284490, 40LL, 7LL);
  v8[2] = a2;
  v8[3] = a3;
  void v8[4] = a4;
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v9);
  swift_beginAccess(a1 + 16, v16, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    swift_beginAccess(a1 + 48, v15, 33LL, 0LL);
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v15);
LABEL_7:
    swift_release();
    swift_release();
    swift_release();
    return 0LL;
  }

  uint64_t result = swift_beginAccess(a2 + 16, v15, 0LL, 0LL);
  int v12 = *(unsigned __int8 *)(a2 + 24);
  if (v12 != 255)
  {
    if ((v12 & 1) != 0)
    {
      swift_retain();
      swift_retain();
    }

    else
    {
      uint64_t v14 = *(void *)(a2 + 16);
      uint64_t v13 = v14;
      swift_retain();
      swift_retain();
      sub_10010CDFC(v14, v12);
      a3(&v14);
      sub_10010CDD0(v13, v12);
    }

    goto LABEL_7;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000FBC30( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, uint64_t a12)
{
  uint64_t v18 = swift_allocObject(&unk_100284F30, 88LL, 7LL);
  *(void *)(v18 + 16) = a4;
  *(void *)(v18 + 24) = a5;
  uint64_t v26 = a5;
  *(void *)(v18 + 32) = a6;
  *(void *)(v18 + 4sub_1000B58F0(v0, 0) = a7;
  *(void *)(v18 + 48) = a8;
  *(void *)(v18 + 56) = a9;
  *(_BYTE *)(v18 + 64) = a10;
  uint64_t v19 = v18;
  *(void *)(v18 + 72) = a11;
  *(void *)(v18 + 8sub_1000B58F0(v0, 0) = a12;
  uint64_t v20 = (void *)swift_allocObject(&unk_100284F58, 48LL, 7LL);
  v20[2] = a2;
  v20[3] = a3;
  v20[4] = sub_10010D1EC;
  void v20[5] = v19;
  uint64_t v21 = *(void *)(a1 + 48);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 40));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v21);
  swift_beginAccess(a1 + 16, v29, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    swift_beginAccess(a1 + 56, v28, 33LL, 0LL);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v28);
    swift_release();
    swift_release();
    uint64_t v23 = 0LL;
  }

  else
  {
    swift_retain_n(a4, 2LL);
    swift_retain_n(v26, 2LL);
    swift_bridgeObjectRetain_n(a6, 2LL);
    swift_retain_n(a8, 2LL);
    swift_bridgeObjectRetain_n(a9, 2LL);
    swift_bridgeObjectRetain_n(a11, 2LL);
    swift_bridgeObjectRetain_n(a12, 2LL);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v23 = sub_1001030B8(a2, a3, a4, v26, a6, a7, a8, a9, a10, a11, a12);
    swift_release();
    swift_release();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v23;
}

uint64_t sub_1000FBF2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject(&unk_100284F80, 32LL, 7LL);
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 40));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v7);
  swift_beginAccess(a1 + 16, v16, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    swift_beginAccess(a1 + 56, v15, 33LL, 0LL);
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v15);
    uint64_t v14 = 0LL;
    goto LABEL_5;
  }

  uint64_t result = swift_beginAccess(a3 + 16, v15, 0LL, 0LL);
  int v10 = *(unsigned __int8 *)(a3 + 32);
  if (v10 != 255)
  {
    uint64_t v12 = *(void *)(a3 + 16);
    uint64_t v11 = *(void *)(a3 + 24);
    swift_retain();
    swift_retain();
    sub_10010D170(v12, v11, v10);
    sub_1001A9494(v12, v11, v10 & 1);
    uint64_t v14 = v13;
    sub_10010D188(v12, v11, v10);
LABEL_5:
    swift_release();
    swift_release();
    swift_release();
    return v14;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000FC0D0(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject(&unk_100284E90, 40LL, 7LL);
  v8[2] = a2;
  v8[3] = a3;
  void v8[4] = a4;
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 40));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v9);
  swift_beginAccess(a1 + 16, v19, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    swift_beginAccess(a1 + 56, v18, 33LL, 0LL);
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v18);
    goto LABEL_5;
  }

  uint64_t result = swift_beginAccess(a4 + 16, v18, 0LL, 0LL);
  uint64_t v12 = *(void *)(a4 + 16);
  uint64_t v13 = *(void *)(a4 + 24);
  int v14 = *(unsigned __int8 *)(a4 + 32);
  uint64_t v15 = v12;
  uint64_t v16 = v13;
  char v17 = v14;
  if (v14 != 255)
  {
    swift_retain();
    swift_retain();
    sub_10010D170(v12, v13, v14);
    a2(&v15);
    sub_100034EB4(v15, v16, v17);
LABEL_5:
    swift_release();
    swift_release();
    swift_release();
    return 0LL;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000FC254(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject(&unk_100284E18, 40LL, 7LL);
  v8[2] = a2;
  v8[3] = a3;
  void v8[4] = a4;
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 40));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v9);
  swift_beginAccess(a1 + 16, v17, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    swift_beginAccess(a1 + 56, v16, 33LL, 0LL);
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v16);
LABEL_7:
    swift_release();
    swift_release();
    swift_release();
    return 0LL;
  }

  uint64_t result = swift_beginAccess(a2 + 16, v16, 0LL, 0LL);
  int v12 = *(unsigned __int8 *)(a2 + 32);
  if (v12 != 255)
  {
    if ((v12 & 1) != 0)
    {
      swift_retain();
      swift_retain();
    }

    else
    {
      uint64_t v14 = *(void *)(a2 + 24);
      v15[0] = *(void *)(a2 + 16);
      uint64_t v13 = v15[0];
      v15[1] = v14;
      swift_retain();
      swift_retain();
      sub_10010D170(v15[0], v14, v12);
      a3(v15);
      sub_10010D188(v13, v14, v12);
    }

    goto LABEL_7;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000FC3F0( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *__return_ptr, uint64_t *), uint64_t a5)
{
  int v10 = (void *)swift_allocObject(&unk_100284FF8, 48LL, 7LL);
  v10[2] = a2;
  void v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v11);
  swift_beginAccess(a1 + 16, v25, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 25) == 255)
  {
    swift_beginAccess(a1 + 48, v24, 33LL, 0LL);
    swift_retain();
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v24);
    uint64_t v13 = 0LL;
LABEL_8:
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return v13;
  }

  uint64_t result = swift_beginAccess(a3 + 16, v24, 0LL, 0LL);
  uint64_t v15 = *(unsigned __int16 *)(a3 + 24);
  if (v15 >> 8 <= 0xFE)
  {
    uint64_t v16 = *(void *)(a3 + 16);
    int v17 = v15 & 0x100;
    if ((v15 & 0x100) != 0)
    {
      swift_retain();
      swift_retain();
      swift_retain();
      sub_10010D32C(v16, v15);
      uint64_t v18 = 0LL;
    }

    else
    {
      uint64_t v22 = *(void *)(a3 + 16);
      char v23 = v15;
      swift_retain();
      swift_retain();
      swift_retain();
      sub_10010D32C(v16, v15);
      a4(v21, &v22);
      int v17 = v15 & 0x100;
      sub_10010D350(v16, v15);
      uint64_t v16 = v21[0];
      uint64_t v18 = v21[1];
    }

    char v19 = v17 != 0;
    sub_1001A9494(v16, v18, SBYTE1(v17));
    uint64_t v13 = v20;
    sub_100034EB4(v16, v18, v19);
    goto LABEL_8;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000FC620(uint64_t (*a1)(uint64_t))
{
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(v1 + 32));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v3);
  uint64_t v5 = swift_beginAccess(v1 + 16, v8, 0LL, 0LL);
  swift_beginAccess(v1 + 48, v7, 33LL, 0LL);
  CallbackList.append(_:)();
  swift_endAccess(v7);
  return 0LL;
}

uint64_t sub_1000FC6F0( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr), uint64_t a5)
{
  int v10 = (void *)swift_allocObject(&unk_1002841C0, 48LL, 7LL);
  v10[2] = a2;
  void v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v11);
  swift_beginAccess(a1 + 16, v22, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    swift_beginAccess(a1 + 48, v21, 33LL, 0LL);
    swift_retain();
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v21);
    uint64_t v20 = 0LL;
    goto LABEL_5;
  }

  uint64_t result = swift_beginAccess(a3 + 16, v21, 0LL, 0LL);
  int v14 = *(unsigned __int8 *)(a3 + 24);
  if (v14 != 255)
  {
    uint64_t v15 = *(void *)(a3 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_10010CA54(v15, v14);
    uint64_t v16 = sub_1000F35C0(a4, a5, v15, v14 & 1);
    char v18 = v17 & 1;
    sub_10010CA6C(v15, v14);
    sub_1001A93A0(v16, v18);
    uint64_t v20 = v19;
    sub_100034F08(v16, v18);
LABEL_5:
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return v20;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000FC8D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10 = (void *)swift_allocObject(&unk_1002842B0, 48LL, 7LL);
  v10[2] = a2;
  void v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v11);
  swift_beginAccess(a1 + 16, v17, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    swift_beginAccess(a1 + 48, v16, 33LL, 0LL);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v16);
    swift_release();
    swift_release();
    uint64_t v14 = 0LL;
  }

  else
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1001055F4( a2,  a3,  a4,  a5,  (void (*)(uint64_t))sub_1001A94A8,  (void (*)(uint64_t, uint64_t))sub_10010D6BC,  (void (*)(void))sub_100034F08);
    uint64_t v14 = v13;
    swift_release();
    swift_release();
  }

  swift_release();
  swift_release();
  swift_release();
  return v14;
}

uint64_t sub_1000FCA88(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject(&unk_100284C10, 40LL, 7LL);
  v8[2] = a2;
  v8[3] = a3;
  void v8[4] = a4;
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v9);
  swift_beginAccess(a1 + 16, v17, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    swift_beginAccess(a1 + 48, v16, 33LL, 0LL);
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v16);
    goto LABEL_5;
  }

  uint64_t result = swift_beginAccess(a4 + 16, v16, 0LL, 0LL);
  uint64_t v12 = *(void *)(a4 + 16);
  int v13 = *(unsigned __int8 *)(a4 + 24);
  uint64_t v14 = v12;
  char v15 = v13;
  if (v13 != 255)
  {
    swift_retain();
    swift_retain();
    sub_10010CA54(v12, v13);
    a2(&v14);
    sub_100034F08(v14, v15);
LABEL_5:
    swift_release(a3);
    swift_release(v8);
    swift_release(a4);
    return 0LL;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000FCC08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject(&unk_1002840D0, 40LL, 7LL);
  v8[2] = a2;
  v8[3] = a3;
  void v8[4] = a4;
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v9);
  swift_beginAccess(a1 + 16, v15, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    swift_beginAccess(a1 + 48, v14, 33LL, 0LL);
    swift_retain();
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v14);
    swift_release();
    swift_release();
    uint64_t v12 = 0LL;
  }

  else
  {
    swift_retain();
    swift_retain();
    swift_retain();
    sub_100106500();
    uint64_t v12 = v11;
    swift_release();
    swift_release();
  }

  swift_release();
  swift_release();
  return v12;
}

uint64_t sub_1000FCD84(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject(&unk_100285570, 40LL, 7LL);
  v8[2] = a2;
  v8[3] = a3;
  void v8[4] = a4;
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v9);
  swift_beginAccess(a1 + 16, v17, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    swift_beginAccess(a1 + 48, v16, 33LL, 0LL);
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v16);
    goto LABEL_5;
  }

  uint64_t result = swift_beginAccess(a4 + 16, v16, 0LL, 0LL);
  uint64_t v12 = *(void *)(a4 + 16);
  int v13 = *(unsigned __int8 *)(a4 + 24);
  uint64_t v14 = v12;
  char v15 = v13;
  if (v13 != 255)
  {
    swift_retain();
    swift_retain();
    sub_10010CDFC(v12, v13);
    a2(&v14);
    sub_10009AD58(v14, v15, (uint64_t (*)(void))&_swift_release);
LABEL_5:
    swift_release(a3);
    swift_release(v8);
    swift_release(a4);
    return 0LL;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000FCF0C(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject(&unk_1002854F8, 40LL, 7LL);
  v8[2] = a2;
  v8[3] = a3;
  void v8[4] = a4;
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v9);
  swift_beginAccess(a1 + 16, v17, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    swift_beginAccess(a1 + 48, v16, 33LL, 0LL);
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v16);
    goto LABEL_5;
  }

  uint64_t result = swift_beginAccess(a4 + 16, v16, 0LL, 0LL);
  uint64_t v12 = *(void *)(a4 + 16);
  int v13 = *(unsigned __int8 *)(a4 + 24);
  uint64_t v14 = v12;
  char v15 = v13;
  if (v13 != 255)
  {
    swift_retain();
    swift_retain();
    sub_10010CDFC(v12, v13);
    a2(&v14);
    sub_10009AD58(v14, v15, (uint64_t (*)(void))&_swift_release);
LABEL_5:
    swift_release(a3);
    swift_release(v8);
    swift_release(a4);
    return 0LL;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000FD094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_allocObject(&unk_1002849B8, 48LL, 7LL);
  _OWORD v6[2] = a2;
  v6[3] = sub_10012D1A8;
  v6[4] = 0LL;
  v6[5] = a3;
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v7);
  swift_beginAccess(a1 + 16, v13, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    swift_beginAccess(a1 + 48, v12, 33LL, 0LL);
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v12);
    swift_release();
    swift_release();
    uint64_t v10 = 0LL;
  }

  else
  {
    swift_retain();
    swift_retain();
    sub_1000F91D0(a2, a3);
    uint64_t v10 = v9;
    swift_release();
    swift_release();
  }

  swift_release();
  return v10;
}

uint64_t sub_1000FD1F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_allocObject(&unk_100284918, 48LL, 7LL);
  _OWORD v6[2] = a2;
  v6[3] = sub_10010CC40;
  v6[4] = 0LL;
  v6[5] = a3;
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v7);
  swift_beginAccess(a1 + 16, v13, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    swift_beginAccess(a1 + 48, v12, 33LL, 0LL);
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v12);
    swift_release();
    swift_release();
    uint64_t v10 = 0LL;
  }

  else
  {
    swift_retain();
    swift_retain();
    sub_1000F91D0(a2, a3);
    uint64_t v10 = v9;
    swift_release();
    swift_release();
  }

  swift_release();
  return v10;
}

uint64_t sub_1000FD34C(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject(&unk_1002845A8, 40LL, 7LL);
  v8[2] = a2;
  v8[3] = a3;
  void v8[4] = a4;
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 40));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v9);
  swift_beginAccess(a1 + 16, v19, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    swift_beginAccess(a1 + 56, v18, 33LL, 0LL);
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v18);
    goto LABEL_5;
  }

  uint64_t result = swift_beginAccess(a4 + 16, v18, 0LL, 0LL);
  uint64_t v12 = *(void *)(a4 + 16);
  uint64_t v13 = *(void *)(a4 + 24);
  int v14 = *(unsigned __int8 *)(a4 + 32);
  uint64_t v15 = v12;
  uint64_t v16 = v13;
  char v17 = v14;
  if (v14 != 255)
  {
    swift_retain();
    swift_retain();
    sub_10010C898(v12, v13, v14);
    a2(&v15);
    sub_100034DB8(v15, v16, v17);
LABEL_5:
    swift_release();
    swift_release();
    swift_release();
    return 0LL;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000FD4D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject(&unk_1002846C0, 20LL, 7LL);
  *(_DWORD *)(v8 + 16) = a4;
  uint64_t v9 = (void *)swift_allocObject(&unk_1002846E8, 48LL, 7LL);
  void v9[2] = a2;
  void v9[3] = a3;
  v9[4] = sub_10010D7DC;
  v9[5] = v8;
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 40));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v10);
  swift_beginAccess(a1 + 16, v21, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    swift_beginAccess(a1 + 56, v20, 33LL, 0LL);
    swift_retain();
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v20);
    swift_release();
    uint64_t v16 = 0LL;
LABEL_8:
    swift_release();
    swift_release();
    swift_release();
    return v16;
  }

  swift_beginAccess(a2 + 16, v20, 0LL, 0LL);
  int v12 = *(unsigned __int8 *)(a2 + 32);
  if (v12 != 255)
  {
    uint64_t v13 = *(void *)(a2 + 16);
    uint64_t v14 = *(void *)(a2 + 24);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_10010C898(v13, v14, v12);
    if ((v12 & 1) != 0)
    {
      uint64_t v17 = sub_100024FB4(a4);
      swift_willThrow(v17);
      sub_10009A878(v13, v14, 1);
      sub_1001A94F8(v13, v14, 1);
      uint64_t v16 = v18;
      sub_10010C8B0(v13, v14, v12);
    }

    else
    {
      sub_1001A94F8(v13, v14, 0);
      uint64_t v16 = v15;
    }

    sub_10010C8B0(v13, v14, v12);
    swift_release();
    goto LABEL_8;
  }

  __break(1u);
  uint64_t result = swift_unexpectedError(a4, "ASOctaneSupportXPCService/Bootstrap.swift", 41LL, 1LL, 1056LL);
  __break(1u);
  return result;
}

uint64_t sub_1000FD73C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject(&unk_100284940, 32LL, 7LL);
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 40));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v7);
  swift_beginAccess(a1 + 16, v16, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    swift_beginAccess(a1 + 56, v15, 33LL, 0LL);
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v15);
    uint64_t v14 = 0LL;
    goto LABEL_5;
  }

  uint64_t result = swift_beginAccess(a3 + 16, v15, 0LL, 0LL);
  int v10 = *(unsigned __int8 *)(a3 + 32);
  if (v10 != 255)
  {
    uint64_t v12 = *(void *)(a3 + 16);
    uint64_t v11 = *(void *)(a3 + 24);
    swift_retain();
    swift_retain();
    sub_10010C898(v12, v11, v10);
    sub_1001A94F8(v12, v11, v10 & 1);
    uint64_t v14 = v13;
    sub_10010C8B0(v12, v11, v10);
LABEL_5:
    swift_release();
    swift_release();
    swift_release();
    return v14;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000FD8E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject(&unk_100284058, 40LL, 7LL);
  v8[2] = a2;
  v8[3] = a3;
  void v8[4] = a4;
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 40));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v9);
  swift_beginAccess(a1 + 16, v14, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    swift_beginAccess(a1 + 56, v13, 33LL, 0LL);
    swift_retain();
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v13);
    swift_release();
    swift_release();
    uint64_t v11 = 0LL;
  }

  else
  {
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v11 = sub_100106438(a2, a3, a4);
    swift_release();
    swift_release();
  }

  swift_release();
  swift_release();
  return v11;
}

uint64_t sub_1000FDA5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject(&unk_1002848A0, 48LL, 7LL);
  v8[2] = a2;
  v8[3] = a3;
  void v8[4] = sub_10010CD9C;
  v8[5] = a4;
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 40));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v9);
  swift_beginAccess(a1 + 16, v14, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    swift_beginAccess(a1 + 56, v13, 33LL, 0LL);
    swift_retain_n(a4, 2LL);
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v13);
    swift_release();
    swift_release();
    uint64_t v11 = 0LL;
  }

  else
  {
    swift_retain_n(a4, 3LL);
    swift_retain();
    swift_retain();
    uint64_t v11 = sub_1001034A8(a2, a3, a4);
    swift_release();
    swift_release();
  }

  swift_release_n(a4, 2LL);
  swift_release();
  return v11;
}

uint64_t sub_1000FDBEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_allocObject(&unk_100284A58, 40LL, 7LL);
  v12[2] = a4;
  void v12[3] = a5;
  v12[4] = a6;
  uint64_t v13 = (void *)swift_allocObject(&unk_100284A80, 48LL, 7LL);
  void v13[2] = a2;
  v13[3] = a3;
  v13[4] = sub_10010D6FC;
  v13[5] = v12;
  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 40));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v14);
  swift_beginAccess(a1 + 16, v19, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    swift_beginAccess(a1 + 56, v18, 33LL, 0LL);
    swift_retain();
    swift_unknownObjectRetain(a5);
    swift_retain();
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v18);
    swift_release();
    swift_release();
    uint64_t v16 = 0LL;
  }

  else
  {
    swift_retain_n(a4, 2LL);
    swift_unknownObjectRetain_n(a5, 2LL);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v16 = sub_100103688(a2, a3, a4, a5, a6);
    swift_release();
    swift_release();
  }

  swift_unknownObjectRelease(a5);
  swift_release();
  swift_release();
  swift_release();
  return v16;
}

uint64_t sub_1000FDDE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject(&unk_100284828, 48LL, 7LL);
  v8[2] = a2;
  v8[3] = a3;
  void v8[4] = sub_10010CD9C;
  v8[5] = a4;
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 40));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v9);
  swift_beginAccess(a1 + 16, v14, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    swift_beginAccess(a1 + 56, v13, 33LL, 0LL);
    swift_retain_n(a4, 2LL);
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v13);
    swift_release();
    swift_release();
    uint64_t v11 = 0LL;
  }

  else
  {
    swift_retain_n(a4, 3LL);
    swift_retain();
    swift_retain();
    uint64_t v11 = sub_1001034A8(a2, a3, a4);
    swift_release();
    swift_release();
  }

  swift_release_n(a4, 2LL);
  swift_release();
  return v11;
}

uint64_t sub_1000FDF70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject(&unk_100284788, 32LL, 7LL);
  *(void *)(v10 + 16) = a4;
  *(void *)(v10 + 24) = a5;
  uint64_t v11 = (void *)swift_allocObject(&unk_1002847B0, 48LL, 7LL);
  void v11[2] = a2;
  void v11[3] = a3;
  v11[4] = sub_10010D7D0;
  v11[5] = v10;
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 40));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v12);
  swift_beginAccess(a1 + 16, v17, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    swift_beginAccess(a1 + 56, v16, 33LL, 0LL);
    swift_unknownObjectRetain(a4);
    swift_retain();
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v16);
    swift_release();
    swift_release();
    uint64_t v14 = 0LL;
  }

  else
  {
    swift_unknownObjectRetain_n(a4, 2LL);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v14 = sub_100103890(a2, a3, a4, a5);
    swift_release();
    swift_release();
  }

  swift_unknownObjectRelease(a4);
  swift_release();
  swift_release();
  return v14;
}

uint64_t sub_1000FE13C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject(&unk_100284508, 48LL, 7LL);
  v8[2] = a2;
  v8[3] = a3;
  void v8[4] = sub_10010CC6C;
  v8[5] = a4;
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 40));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v9);
  swift_beginAccess(a1 + 16, v14, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    swift_beginAccess(a1 + 56, v13, 33LL, 0LL);
    swift_retain_n(a4, 2LL);
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v13);
    swift_release();
    swift_release();
    uint64_t v11 = 0LL;
  }

  else
  {
    swift_retain_n(a4, 3LL);
    swift_retain();
    swift_retain();
    uint64_t v11 = sub_100103A5C(a2, a3, a4);
    swift_release();
    swift_release();
  }

  swift_release_n(a4, 2LL);
  swift_release();
  return v11;
}

uint64_t sub_1000FE2CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject(&unk_100284530, 32LL, 7LL);
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 40));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v7);
  swift_beginAccess(a1 + 16, v16, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    swift_beginAccess(a1 + 56, v15, 33LL, 0LL);
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v15);
    uint64_t v14 = 0LL;
    goto LABEL_5;
  }

  uint64_t result = swift_beginAccess(a3 + 16, v15, 0LL, 0LL);
  int v10 = *(unsigned __int8 *)(a3 + 32);
  if (v10 != 255)
  {
    uint64_t v12 = *(void *)(a3 + 16);
    uint64_t v11 = *(void *)(a3 + 24);
    swift_retain();
    swift_retain();
    sub_10010C898(v12, v11, v10);
    sub_1001A94F8(v12, v11, v10 & 1);
    uint64_t v14 = v13;
    sub_10010C8B0(v12, v11, v10);
LABEL_5:
    swift_release();
    swift_release();
    swift_release();
    return v14;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000FE470(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject(&unk_100283DD8, 40LL, 7LL);
  v8[2] = a2;
  v8[3] = a3;
  void v8[4] = a4;
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 40));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v9);
  swift_beginAccess(a1 + 16, v16, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    swift_beginAccess(a1 + 56, v15, 33LL, 0LL);
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v15);
LABEL_7:
    swift_release();
    swift_release();
    swift_release();
    return 0LL;
  }

  uint64_t result = swift_beginAccess(a2 + 16, v15, 0LL, 0LL);
  int v12 = *(unsigned __int8 *)(a2 + 32);
  if (v12 != 255)
  {
    if ((v12 & 1) != 0)
    {
      uint64_t v13 = *(void *)(a2 + 16);
      uint64_t v14 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      sub_10010C898(v13, v14, v12);
      a3(v13);
      sub_10010C8B0(v13, v14, v12);
    }

    else
    {
      swift_retain();
      swift_retain();
    }

    goto LABEL_7;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000FE608(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v8 = (void *)sub_100019310((uint64_t)&unk_100283D60, 40LL);
  v8[2] = a2;
  v8[3] = a3;
  void v8[4] = a4;
  uint64_t v9 = *(void *)(a1 + 48);
  sub_10002A444();
  sub_10010E0FC();
  EventLoop.assertInEventLoop(file:line:)(v10, v11, v12, v13, v14, v9);
  sub_1000487CC(a1 + 16, (uint64_t)v21);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    sub_10002A718(a1 + 56, (uint64_t)v20, 33LL);
    sub_100041B5C();
    sub_10002A4C8();
    CallbackList.append(_:)();
    swift_endAccess(v20);
LABEL_7:
    sub_10002A51C();
    sub_10002A5A4();
    sub_10001EDD8();
    return _s25ASOctaneSupportXPCService35NIOSingleStepByteToMessageProcessorC7_bufferAA0F6BufferVSgvpfi_0();
  }

  uint64_t result = sub_1000487CC(a2 + 16, (uint64_t)v20);
  int v16 = *(unsigned __int8 *)(a2 + 32);
  if (v16 != 255)
  {
    if ((v16 & 1) != 0)
    {
      sub_100041B5C();
      sub_10002A4C8();
    }

    else
    {
      uint64_t v18 = *(void *)(a2 + 24);
      v19[0] = *(void *)(a2 + 16);
      uint64_t v17 = v19[0];
      v19[1] = v18;
      sub_100041B5C();
      sub_10002A4C8();
      sub_10010C898(v19[0], v18, v16);
      a3(v19);
      sub_10010C8B0(v17, v18, v16);
    }

    goto LABEL_7;
  }

  __break(1u);
  return result;
}

void sub_1000FE754()
{
  uint64_t v1 = sub_10002A444();
  sub_10010DEF0( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  v2,  v3,  v4,  v1);
  sub_1000487CC(v0 + 16, (uint64_t)v6);
  if (*(unsigned __int8 *)(v0 + 32) == 255)
  {
    sub_10002A718(v0 + 56, (uint64_t)v5, 33LL);
    sub_10010DFFC();
    swift_endAccess(v5);
    _s25ASOctaneSupportXPCService35NIOSingleStepByteToMessageProcessorC7_bufferAA0F6BufferVSgvpfi_0();
  }

  else
  {
    sub_10010E2B8();
  }

  sub_10010D9C8();
}

uint64_t sub_1000FE7DC(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3, void *a4)
{
  uint64_t v8 = (void *)swift_allocObject(&unk_1002853E0, 40LL, 7LL);
  v8[2] = a2;
  v8[3] = a3;
  void v8[4] = a4;
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 40));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v9);
  swift_beginAccess(a1 + 16, v19, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 39) == 255LL)
  {
    swift_beginAccess(a1 + 56, v18, 33LL, 0LL);
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v18);
LABEL_5:
    swift_release();
    swift_release();
    swift_release();
    return 0LL;
  }

  uint64_t result = swift_beginAccess(a4 + 2, v18, 0LL, 0LL);
  uint64_t v12 = a4[2];
  uint64_t v13 = a4[3];
  unint64_t v14 = a4[4];
  uint64_t v15 = v12;
  uint64_t v16 = v13;
  unint64_t v17 = v14;
  if (HIBYTE(v14) != 255)
  {
    swift_retain();
    swift_retain();
    sub_10010D500(v12, v13, v14);
    a2(&v15);
    sub_10009AE88( v15,  v16,  v17 | ((unint64_t)(WORD2(v17) | (BYTE6(v17) << 16)) << 32),  SHIBYTE(v17));
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000FE978(uint64_t (*a1)(uint64_t))
{
  uint64_t v3 = *(void *)(v1 + 48);
  uint64_t ObjectType = swift_getObjectType(*(void *)(v1 + 40));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v3);
  uint64_t v5 = swift_beginAccess(v1 + 16, v8, 0LL, 0LL);
  swift_beginAccess(v1 + 56, v7, 33LL, 0LL);
  CallbackList.append(_:)();
  swift_endAccess(v7);
  return 0LL;
}

uint64_t sub_1000FEA48( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t *), uint64_t a5)
{
  uint64_t v10 = (void *)swift_allocObject(&unk_100283C70, 48LL, 7LL);
  v10[2] = a2;
  void v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  692LL,  ObjectType,  v11);
  swift_beginAccess(a1 + 16, v21, 0LL, 0LL);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    swift_beginAccess(a1 + 48, v20, 33LL, 0LL);
    swift_retain();
    swift_retain();
    swift_retain();
    CallbackList.append(_:)();
    swift_endAccess(v20);
    uint64_t v16 = 0LL;
LABEL_8:
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return v16;
  }

  uint64_t result = swift_beginAccess(a3 + 16, v20, 0LL, 0LL);
  int v14 = *(unsigned __int8 *)(a3 + 24);
  if (v14 != 255)
  {
    uint64_t v15 = *(void *)(a3 + 16);
    if ((v14 & 1) != 0)
    {
      swift_retain();
      swift_retain();
      swift_retain();
      sub_10010C808(v15, v14);
    }

    else
    {
      uint64_t v18 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      swift_retain();
      sub_10010C808(v15, v14);
      a4(&v19, &v18);
      sub_10010C820(v15, v14);
      uint64_t v15 = v19;
    }

    sub_1001A93A0(v15, v14 & 1);
    uint64_t v16 = v17;
    sub_100034F08(v15, v14 & 1);
    goto LABEL_8;
  }

  __break(1u);
  return result;
}

void sub_1000FEC54()
{
  uint64_t v1 = sub_10002A444();
  sub_10010DEF0( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  v2,  v3,  v4,  v1);
  sub_1000487CC(v0 + 16, (uint64_t)v6);
  if (*(unsigned __int8 *)(v0 + 24) == 255)
  {
    sub_10002A718(v0 + 48, (uint64_t)v5, 33LL);
    sub_10010DFFC();
    swift_endAccess(v5);
    _s25ASOctaneSupportXPCService35NIOSingleStepByteToMessageProcessorC7_bufferAA0F6BufferVSgvpfi_0();
  }

  else
  {
    sub_10010E2B8();
  }

  sub_10010D9C8();
}

void EventLoopFuture._addCallback(_:)()
{
  uint64_t v2 = v0;
  sub_100092F74();
  sub_100018EC0(&qword_1002A9710);
  uint64_t v3 = sub_10010E3E0();
  uint64_t v4 = type metadata accessor for Optional(0LL, v3);
  uint64_t v5 = *(void *)(v4 - 8);
  sub_100067F88();
  __chkstk_darwin(v6);
  sub_10010E314();
  sub_10002A444();
  sub_10010E0FC();
  sub_10010E448(v7, v8, v9, v10, v11);
  uint64_t v12 = v2 + *(void *)(*(void *)v2 + 88LL);
  sub_1000487CC(v12, (uint64_t)&v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v12, v4);
  uint64_t v13 = sub_10010E45C();
  LODWORD(v12) = sub_10001D158(v13, v14, v3);
  uint64_t v15 = sub_10010E0D8();
  v16(v15);
  if ((_DWORD)v12 == 1)
  {
    sub_10002A718(v2 + *(void *)(*(void *)v2 + 104LL), (uint64_t)v17, 33LL);
    sub_10010DFFC();
    swift_endAccess(v17);
    _s25ASOctaneSupportXPCService35NIOSingleStepByteToMessageProcessorC7_bufferAA0F6BufferVSgvpfi_0();
  }

  else
  {
    sub_10010E2B8();
  }

  sub_10002A580();
}

uint64_t sub_1000FEE04()
{
  uint64_t v4 = (void *)sub_100019310((uint64_t)&unk_100284C88, 40LL);
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v0;
  uint64_t v5 = *(void *)(v2 + 32);
  sub_10002A444();
  sub_100041B5C();
  sub_10002A4C8();
  if ((sub_10010D828() & 1) != 0)
  {
    sub_100041B5C();
    sub_10002A4C8();
    uint64_t v6 = sub_10010D8CC();
    sub_1000F98F0(v6, v7, v8, v9);
    sub_10010D818();
    sub_100034E8C(v5, v2);
    sub_10002A51C();
    sub_10002A5A4();
    sub_10001A420();
  }

  else
  {
    uint64_t v10 = (void *)sub_100019310((uint64_t)&unk_100284CB0, 40LL);
    sub_10010D7F4(v10, (uint64_t)sub_10010D0D4);
    sub_10002A674();
    sub_10010D808((uint64_t)sub_10010D790);
    sub_10002A51C();
    sub_10002A5A4();
    sub_10002A7BC();
  }

  return sub_100041A88(v0);
}

uint64_t sub_1000FEED0()
{
  uint64_t v4 = (void *)sub_100019310((uint64_t)&unk_100285408, 40LL);
  v4[2] = v3;
  v4[3] = v1;
  v4[4] = v0;
  uint64_t v5 = *(void *)(v2 + 32);
  sub_10002A444();
  sub_100041B5C();
  sub_10002A4C8();
  if ((sub_10010D828() & 1) != 0)
  {
    sub_100041B5C();
    sub_10002A4C8();
    uint64_t v6 = sub_10010D8B8();
    sub_1000F9A7C(v6, v7, v8, v9);
    sub_10010D818();
    sub_100034E8C(v5, v2);
    sub_10002A51C();
    sub_10002A5A4();
    sub_10001A420();
  }

  else
  {
    uint64_t v10 = (void *)sub_100019310((uint64_t)&unk_100285430, 40LL);
    sub_10010D7F4(v10, (uint64_t)sub_10010D7B4);
    sub_10002A674();
    sub_10010D808((uint64_t)sub_10010D790);
    sub_10002A51C();
    sub_10002A5A4();
    sub_10002A7BC();
  }

  return sub_100041A88(v0);
}

#error "1000FF06C: call analysis failed (funcsize=57)"
#error "1000FF17C: call analysis failed (funcsize=72)"
#error "1000FF2AC: call analysis failed (funcsize=72)"
uint64_t sub_1000FF2F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  void *v10;
  sub_1000353E0();
  sub_10010D890();
  uint64_t v4 = (void *)sub_100019310((uint64_t)&unk_100284D00, 40LL);
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v0;
  uint64_t v5 = *(void *)(v2 + 32);
  sub_10002A444();
  sub_100041B5C();
  sub_10002A4C8();
  if ((sub_10010D828() & 1) != 0)
  {
    sub_100041B5C();
    sub_10002A4C8();
    uint64_t v6 = sub_10010D8CC();
    sub_1000FA160(v6, v7, v8, v9);
    sub_10010D818();
    sub_100034E8C(v5, v2);
    sub_10002A51C();
    sub_10002A5A4();
    sub_10001A420();
  }

  else
  {
    uint64_t v10 = (void *)sub_100019310((uint64_t)&unk_100284D28, 40LL);
    sub_10010D7F4(v10, (uint64_t)sub_10010D0EC);
    sub_10002A674();
    sub_10010D808((uint64_t)sub_10010D790);
    sub_10002A51C();
    sub_10002A5A4();
    sub_10002A7BC();
  }

  return sub_100041A88(v0);
}

uint64_t sub_1000FF3BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v10 = swift_allocObject(&unk_1002855C0, 32LL, 7LL);
  *(void *)(v10 + 16) = a4;
  *(void *)(v10 + 24) = a5;
  uint64_t v11 = (void *)swift_allocObject(&unk_1002855E8, 48LL, 7LL);
  void v11[2] = a2;
  void v11[3] = sub_1000413B8;
  v11[4] = v10;
  v11[5] = a3;
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if ((v14(ObjectType, v12) & 1) != 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v15 = sub_1000FA2BC(a1, a2, a3, a4, a5);
    uint64_t v17 = v16;
    swift_release(v10);
    CallbackList._run()();
    sub_100034E8C(v15, v17);
    swift_release(a2);
    swift_release(v11);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v18 = (void *)swift_allocObject(&unk_100285610, 40LL, 7LL);
    v18[2] = a1;
    v18[3] = sub_10010D6D0;
    v18[4] = v11;
    uint64_t v20 = *(void (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(v12 + 24);
    swift_retain();
    swift_retain();
    v20(sub_10010D790, v18, ObjectType, v12);
    swift_release(a2);
    swift_release(v11);
    swift_release(v18);
  }

  swift_release(a3);
  swift_release(a5);
  return swift_release(v10);
}

uint64_t sub_1000FF5A8()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = (void *)sub_100019310((uint64_t)&unk_100283EC8, 48LL);
  v10[2] = v7;
  void v10[3] = v5;
  v10[4] = v3;
  v10[5] = v1;
  uint64_t v11 = *(void *)(v9 + 32);
  sub_10002A444();
  sub_10002A674();
  sub_10002A4C8();
  sub_100041B5C();
  if ((sub_10010D980() & 1) != 0)
  {
    sub_10002A674();
    sub_10002A4C8();
    sub_100041B5C();
    sub_1000FA488(v9, v7, v5, v3, v1);
    sub_10010D834();
    sub_100034E8C(v11, v9);
    sub_10002A5A4();
    sub_10002A524();
    sub_10001DC10();
  }

  else
  {
    uint64_t v12 = (void *)sub_100019310((uint64_t)&unk_100283EF0, 40LL);
    sub_10010D844(v12, (uint64_t)sub_10010C934);
    sub_10002A75C();
    sub_10010D8E0((uint64_t)sub_10010D790);
    sub_10002A5A4();
    sub_10002A524();
    sub_10002A7BC();
  }

  sub_10002A51C();
  return sub_100041A88(v3);
}

uint64_t sub_1000FF6A0()
{
  void (*v10)(uint64_t *__return_ptr);
  uint64_t v11;
  void *v12;
  sub_1000353E0();
  sub_10010D908();
  uint64_t v5 = (void *)sub_100019310((uint64_t)&unk_1002845D0, 48LL);
  v5[2] = v2;
  v5[3] = v0;
  v5[4] = v4;
  v5[5] = v1;
  uint64_t v6 = *(void *)(v3 + 32);
  sub_10002A444();
  sub_10002A674();
  sub_10002A4C8();
  sub_100041B5C();
  if ((sub_10010D980() & 1) != 0)
  {
    sub_10002A674();
    sub_10002A4C8();
    sub_100041B5C();
    uint64_t v7 = sub_10010D8F0();
    sub_1000FAADC(v7, v8, v9, v10, v11);
    sub_10010D834();
    sub_100034E8C(v6, v3);
    sub_10002A5A4();
    sub_10002A524();
    sub_10001DC10();
  }

  else
  {
    uint64_t v12 = (void *)sub_100019310((uint64_t)&unk_1002845F8, 40LL);
    sub_10010D844(v12, (uint64_t)sub_10010CD10);
    sub_10002A75C();
    sub_10010D8E0((uint64_t)sub_10010D790);
    sub_10002A5A4();
    sub_10002A524();
    sub_10002A7BC();
  }

  sub_10002A51C();
  return sub_100041A88(v0);
}

uint64_t sub_1000FF778()
{
  uint64_t v4 = v3;
  sub_10010D9B0();
  uint64_t v5 = (void *)sub_100019310((uint64_t)&unk_1002840F8, 40LL);
  v5[2] = v1;
  v5[3] = v0;
  v5[4] = v4;
  uint64_t v6 = *(void *)(v2 + 32);
  sub_10002A444();
  sub_10002A674();
  sub_10002A4C8();
  sub_100041B5C();
  if ((sub_10010E084() & 1) != 0)
  {
    sub_10002A674();
    sub_10002A4C8();
    sub_100041B5C();
    uint64_t v7 = sub_10010DCF0();
    sub_1000FACCC(v7, v8, v9, v10);
    sub_10010D834();
    sub_100034E8C(v6, v2);
    sub_10002A5A4();
    sub_10002A524();
    sub_10001DC10();
  }

  else
  {
    uint64_t v11 = (void *)sub_100019310((uint64_t)&unk_100284120, 40LL);
    void v11[2] = v2;
    void v11[3] = sub_10010C9F8;
    v11[4] = v5;
    sub_10001EDE0();
    sub_10002A75C();
    sub_10010DBE8((uint64_t)sub_10010D790);
    sub_10002A5A4();
    sub_10002A524();
    sub_10009B770();
  }

  sub_10002A51C();
  return sub_100041A88(v0);
}

uint64_t sub_1000FF860(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v10 = swift_allocObject(&unk_100283E00, 32LL, 7LL);
  *(void *)(v10 + 16) = a4;
  *(void *)(v10 + 24) = a5;
  uint64_t v11 = (void *)swift_allocObject(&unk_100283E28, 48LL, 7LL);
  void v11[2] = a2;
  void v11[3] = sub_10005E558;
  v11[4] = v10;
  v11[5] = a3;
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if ((v14(ObjectType, v12) & 1) != 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v15 = sub_1000FAE48(a1, a2, a3, a4, a5);
    uint64_t v17 = v16;
    swift_release();
    CallbackList._run()();
    sub_100034E8C(v15, v17);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v18 = (void *)swift_allocObject(&unk_100283E50, 40LL, 7LL);
    v18[2] = a1;
    v18[3] = sub_10010C91C;
    v18[4] = v11;
    uint64_t v20 = *(void (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(v12 + 24);
    swift_retain();
    swift_retain();
    v20(sub_10010D790, v18, ObjectType, v12);
    swift_release();
    swift_release();
    swift_release();
  }

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1000FFA4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject(&unk_100283BA8, 48LL, 7LL);
  v8[2] = a2;
  v8[3] = a3;
  void v8[4] = sub_10010C7D4;
  v8[5] = a4;
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 16);
  swift_retain_n(a4, 2LL);
  swift_retain();
  swift_retain();
  if ((v11(ObjectType, v9) & 1) != 0)
  {
    swift_retain_n(a4, 2LL);
    swift_retain();
    swift_retain();
    uint64_t v12 = sub_1000FB108(a1, a2, a3, a4);
    uint64_t v14 = v13;
    swift_release();
    CallbackList._run()();
    sub_100034E8C(v12, v14);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v15 = (void *)swift_allocObject(&unk_100283BD0, 40LL, 7LL);
    uint64_t v15[2] = a1;
    v15[3] = sub_10010C7DC;
    v15[4] = v8;
    uint64_t v16 = *(void (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(v9 + 24);
    swift_retain();
    swift_retain();
    v16(sub_10010D790, v15, ObjectType, v9);
    swift_release();
    swift_release();
    swift_release();
  }

  swift_release_n(a4, 2LL);
  return swift_release();
}

uint64_t sub_1000FFBF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject(&unk_100283C98, 48LL, 7LL);
  v8[2] = a2;
  v8[3] = a3;
  void v8[4] = sub_10010C84C;
  v8[5] = a4;
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 16);
  swift_retain_n(a4, 2LL);
  swift_retain();
  swift_retain();
  if ((v11(ObjectType, v9) & 1) != 0)
  {
    swift_retain_n(a4, 2LL);
    swift_retain();
    swift_retain();
    uint64_t v12 = sub_1000FB298(a1, a2, a3, a4);
    uint64_t v14 = v13;
    swift_release();
    CallbackList._run()();
    sub_100034E8C(v12, v14);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v15 = (void *)swift_allocObject(&unk_100283CC0, 40LL, 7LL);
    uint64_t v15[2] = a1;
    v15[3] = sub_10010D6C4;
    v15[4] = v8;
    uint64_t v16 = *(void (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(v9 + 24);
    swift_retain();
    swift_retain();
    v16(sub_10010D790, v15, ObjectType, v9);
    swift_release();
    swift_release();
    swift_release();
  }

  swift_release_n(a4, 2LL);
  return swift_release();
}

uint64_t sub_1000FFD9C()
{
  void (*v10)(uint64_t *__return_ptr, void *);
  uint64_t v11;
  void *v12;
  sub_1000353E0();
  sub_10010D908();
  uint64_t v5 = (void *)sub_100019310((uint64_t)&unk_100283B30, 48LL);
  v5[2] = v2;
  v5[3] = v0;
  v5[4] = v4;
  v5[5] = v1;
  uint64_t v6 = *(void *)(v3 + 80);
  sub_10002A444();
  sub_10002A674();
  sub_10002A4C8();
  sub_100041B5C();
  if ((sub_10010D980() & 1) != 0)
  {
    sub_10002A674();
    sub_10002A4C8();
    sub_100041B5C();
    uint64_t v7 = sub_10010D8F0();
    sub_1000FB428(v7, v8, v9, v10, v11);
    sub_10010D834();
    sub_100034E8C(v6, v3);
    sub_10002A5A4();
    sub_10002A524();
    sub_10001DC10();
  }

  else
  {
    uint64_t v12 = (void *)sub_100019310((uint64_t)&unk_100283B58, 40LL);
    sub_10010D844(v12, (uint64_t)sub_10010C5D4);
    sub_10002A75C();
    sub_10010D8E0((uint64_t)sub_10010C5E4);
    sub_10002A5A4();
    sub_10002A524();
    sub_10002A7BC();
  }

  sub_10002A51C();
  return sub_100041A88(v0);
}

uint64_t sub_1000FFE74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_allocObject(&unk_100283F68, 48LL, 7LL);
  _OWORD v6[2] = a2;
  v6[3] = sub_10010D7F0;
  v6[4] = 0LL;
  v6[5] = a3;
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 16);
  swift_retain();
  swift_retain();
  if ((v9(ObjectType, v7) & 1) != 0)
  {
    swift_retain();
    swift_retain();
    uint64_t v10 = sub_1000FB7B0(a1, a2, a3);
    uint64_t v12 = v11;
    CallbackList._run()();
    sub_100034E8C(v10, v12);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v13 = (void *)swift_allocObject(&unk_100283F90, 40LL, 7LL);
    void v13[2] = a1;
    v13[3] = sub_10010C968;
    v13[4] = v6;
    uint64_t v14 = *(void (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(v7 + 24);
    swift_retain();
    swift_retain();
    v14(sub_10010D790, v13, ObjectType, v7);
    swift_release();
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t sub_1000FFFDC()
{
  uint64_t v4 = (void *)sub_100019310((uint64_t)&unk_100284440, 40LL);
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v0;
  uint64_t v5 = *(void *)(v2 + 32);
  sub_10002A444();
  sub_100041B5C();
  sub_10002A4C8();
  if ((sub_10010D828() & 1) != 0)
  {
    sub_100041B5C();
    sub_10002A4C8();
    uint64_t v6 = sub_10010D8CC();
    sub_1000FBA9C(v6, v7, v8, v9);
    sub_10010D818();
    sub_100034E8C(v5, v2);
    sub_10002A51C();
    sub_10002A5A4();
    sub_10001A420();
  }

  else
  {
    uint64_t v10 = (void *)sub_100019310((uint64_t)&unk_100284468, 40LL);
    sub_10010D7F4(v10, (uint64_t)sub_10010CBC4);
    sub_10002A674();
    sub_10010D808((uint64_t)sub_10010D790);
    sub_10002A51C();
    sub_10002A5A4();
    sub_10002A7BC();
  }

  return sub_100041A88(v0);
}

uint64_t sub_1001000A8()
{
  uint64_t v4 = (void *)sub_100019310((uint64_t)&unk_1002843C8, 40LL);
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v0;
  uint64_t v5 = *(void *)(v2 + 32);
  sub_10002A444();
  sub_100041B5C();
  sub_10002A4C8();
  if ((sub_10010D828() & 1) != 0)
  {
    sub_100041B5C();
    sub_10002A4C8();
    uint64_t v6 = sub_10010D8CC();
    sub_1000FB90C(v6, v7, v8, v9);
    sub_10010D818();
    sub_100034E8C(v5, v2);
    sub_10002A51C();
    sub_10002A5A4();
    sub_10001A420();
  }

  else
  {
    uint64_t v10 = (void *)sub_100019310((uint64_t)&unk_1002843F0, 40LL);
    sub_10010D7F4(v10, (uint64_t)sub_10010CBAC);
    sub_10002A674();
    sub_10010D808((uint64_t)sub_10010D790);
    sub_10002A51C();
    sub_10002A5A4();
    sub_10002A7BC();
  }

  return sub_100041A88(v0);
}

uint64_t sub_100100174( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17 = swift_allocObject(&unk_100284EB8, 88LL, 7LL);
  *(void *)(v17 + 16) = a4;
  *(void *)(v17 + 24) = a5;
  *(void *)(v17 + 32) = a6;
  *(void *)(v17 + 4sub_1000B58F0(v0, 0) = a7;
  uint64_t v28 = a7;
  *(void *)(v17 + 48) = a8;
  *(void *)(v17 + 56) = a9;
  *(_BYTE *)(v17 + 64) = a10;
  *(void *)(v17 + 72) = a11;
  *(void *)(v17 + 8sub_1000B58F0(v0, 0) = a12;
  uint64_t v18 = (void *)swift_allocObject(&unk_100284EE0, 48LL, 7LL);
  v18[2] = a2;
  v18[3] = a3;
  v18[4] = sub_10010D1EC;
  void v18[5] = v17;
  uint64_t v31 = a1;
  uint64_t v32 = v18;
  uint64_t v19 = *(void *)(a1 + 40);
  uint64_t v20 = *(void *)(a1 + 48);
  uint64_t ObjectType = swift_getObjectType(v19);
  uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 16);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  if ((v30(ObjectType, v20) & 1) != 0)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v22 = sub_1000FBC30(v31, a2, a3, a4, a5, a6, v28, a8, a9, a10, a11, a12);
    uint64_t v24 = v23;
    swift_release();
    CallbackList._run()();
    sub_100034E8C(v22, v24);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v25 = (void *)swift_allocObject(&unk_100284F08, 40LL, 7LL);
    v25[2] = v31;
    v25[3] = sub_10010D1F4;
    v25[4] = v32;
    uint64_t v26 = *(void (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(v20 + 24);
    swift_retain();
    swift_retain();
    v26(sub_10010D798, v25, ObjectType, v20);
    swift_release();
    swift_release();
    swift_release();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1001004A4()
{
  uint64_t v4 = (void *)sub_100019310((uint64_t)&unk_100284E40, 40LL);
  v4[2] = v3;
  v4[3] = v1;
  v4[4] = v0;
  uint64_t v5 = *(void *)(v2 + 40);
  sub_10002A444();
  sub_100041B5C();
  sub_10002A4C8();
  if ((sub_10010D828() & 1) != 0)
  {
    sub_100041B5C();
    sub_10002A4C8();
    uint64_t v6 = sub_10010D8B8();
    sub_1000FC0D0(v6, v7, v8, v9);
    sub_10010D818();
    sub_100034E8C(v5, v2);
    sub_10002A51C();
    sub_10002A5A4();
    sub_10001A420();
  }

  else
  {
    uint64_t v10 = (void *)sub_100019310((uint64_t)&unk_100284E68, 40LL);
    sub_10010D7F4(v10, (uint64_t)sub_10010D1AC);
    sub_10002A674();
    sub_10010D808((uint64_t)sub_10010D798);
    sub_10002A51C();
    sub_10002A5A4();
    sub_10002A7BC();
  }

  return sub_100041A88(v0);
}

uint64_t sub_100100570()
{
  uint64_t v4 = (void *)sub_100019310((uint64_t)&unk_100284DC8, 40LL);
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v0;
  uint64_t v5 = *(void *)(v2 + 40);
  sub_10002A444();
  sub_100041B5C();
  sub_10002A4C8();
  if ((sub_10010D828() & 1) != 0)
  {
    sub_100041B5C();
    sub_10002A4C8();
    uint64_t v6 = sub_10010D8CC();
    sub_1000FC254(v6, v7, v8, v9);
    sub_10010D818();
    sub_100034E8C(v5, v2);
    sub_10002A51C();
    sub_10002A5A4();
    sub_10001A420();
  }

  else
  {
    uint64_t v10 = (void *)sub_100019310((uint64_t)&unk_100284DF0, 40LL);
    sub_10010D7F4(v10, (uint64_t)sub_10010D15C);
    sub_10002A674();
    sub_10010D808((uint64_t)sub_10010D798);
    sub_10002A51C();
    sub_10002A5A4();
    sub_10002A7BC();
  }

  return sub_100041A88(v0);
}

uint64_t sub_10010063C()
{
  void (*v10)(void *__return_ptr, uint64_t *);
  uint64_t v11;
  void *v12;
  sub_1000353E0();
  sub_10010D908();
  uint64_t v5 = (void *)sub_100019310((uint64_t)&unk_100284FA8, 48LL);
  v5[2] = v2;
  v5[3] = v0;
  v5[4] = v4;
  v5[5] = v1;
  uint64_t v6 = *(void *)(v3 + 32);
  sub_10002A444();
  sub_10002A674();
  sub_10002A4C8();
  sub_100041B5C();
  if ((sub_10010D980() & 1) != 0)
  {
    sub_10002A674();
    sub_10002A4C8();
    sub_100041B5C();
    uint64_t v7 = sub_10010D8F0();
    sub_1000FC3F0(v7, v8, v9, v10, v11);
    sub_10010D834();
    sub_100034E8C(v6, v3);
    sub_10002A5A4();
    sub_10002A524();
    sub_10001DC10();
  }

  else
  {
    uint64_t v12 = (void *)sub_100019310((uint64_t)&unk_100284FD0, 40LL);
    sub_10010D844(v12, (uint64_t)sub_10010D2F4);
    sub_10002A75C();
    sub_10010D8E0((uint64_t)sub_10010D304);
    sub_10002A5A4();
    sub_10002A524();
    sub_10002A7BC();
  }

  sub_10002A51C();
  return sub_100041A88(v0);
}

uint64_t sub_100100714()
{
  void (*v10)(uint64_t *__return_ptr);
  uint64_t v11;
  void *v12;
  sub_1000353E0();
  sub_10010D908();
  uint64_t v5 = (void *)sub_100019310((uint64_t)&unk_100284170, 48LL);
  v5[2] = v2;
  v5[3] = v0;
  v5[4] = v4;
  v5[5] = v1;
  uint64_t v6 = *(void *)(v3 + 32);
  sub_10002A444();
  sub_10002A674();
  sub_10002A4C8();
  sub_100041B5C();
  if ((sub_10010D980() & 1) != 0)
  {
    sub_10002A674();
    sub_10002A4C8();
    sub_100041B5C();
    uint64_t v7 = sub_10010D8F0();
    sub_1000FC6F0(v7, v8, v9, v10, v11);
    sub_10010D834();
    sub_100034E8C(v6, v3);
    sub_10002A5A4();
    sub_10002A524();
    sub_10001DC10();
  }

  else
  {
    uint64_t v12 = (void *)sub_100019310((uint64_t)&unk_100284198, 40LL);
    sub_10010D844(v12, (uint64_t)sub_10010CA40);
    sub_10002A75C();
    sub_10010D8E0((uint64_t)sub_10010D790);
    sub_10002A5A4();
    sub_10002A524();
    sub_10002A7BC();
  }

  sub_10002A51C();
  return sub_100041A88(v0);
}

#error "1001008BC: call analysis failed (funcsize=57)"
uint64_t sub_1001008E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t *);
  uint64_t v8;
  uint64_t v9;
  void *v10;
  sub_1000353E0();
  sub_10010D87C();
  uint64_t v4 = (void *)sub_100019310((uint64_t)&unk_100284BC0, 40LL);
  v4[2] = v3;
  v4[3] = v1;
  v4[4] = v0;
  uint64_t v5 = *(void *)(v2 + 32);
  sub_10002A444();
  sub_100041B5C();
  sub_10002A4C8();
  if ((sub_10010D828() & 1) != 0)
  {
    sub_100041B5C();
    sub_10002A4C8();
    uint64_t v6 = sub_10010D8B8();
    sub_1000FCA88(v6, v7, v8, v9);
    sub_10010D818();
    sub_100034E8C(v5, v2);
    sub_10002A51C();
    sub_10002A5A4();
    sub_10001A420();
  }

  else
  {
    uint64_t v10 = (void *)sub_100019310((uint64_t)&unk_100284BE8, 40LL);
    sub_10010D7F4(v10, (uint64_t)sub_10010D7B4);
    sub_10002A674();
    sub_10010D808((uint64_t)sub_10010D790);
    sub_10002A51C();
    sub_10002A5A4();
    sub_10002A7BC();
  }

  return sub_100041A88(v0);
}

uint64_t sub_1001009AC()
{
  uint64_t v4 = v3;
  sub_10010D9B0();
  uint64_t v5 = (void *)sub_100019310((uint64_t)&unk_100284080, 40LL);
  v5[2] = v1;
  v5[3] = v0;
  v5[4] = v4;
  uint64_t v6 = *(void *)(v2 + 32);
  sub_10002A444();
  sub_10002A674();
  sub_10002A4C8();
  sub_100041B5C();
  if ((sub_10010E084() & 1) != 0)
  {
    sub_10002A674();
    sub_10002A4C8();
    sub_100041B5C();
    uint64_t v7 = sub_10010DCF0();
    sub_1000FCC08(v7, v8, v9, v10);
    sub_10010D834();
    sub_100034E8C(v6, v2);
    sub_10002A5A4();
    sub_10002A524();
    sub_10001DC10();
  }

  else
  {
    uint64_t v11 = (void *)sub_100019310((uint64_t)&unk_1002840A8, 40LL);
    void v11[2] = v2;
    void v11[3] = sub_10010D7A4;
    v11[4] = v5;
    sub_10001EDE0();
    sub_10002A75C();
    sub_10010DBE8((uint64_t)sub_10010D790);
    sub_10002A5A4();
    sub_10002A524();
    sub_10009B770();
  }

  sub_10002A51C();
  return sub_100041A88(v0);
}

uint64_t sub_100100A94()
{
  uint64_t v4 = (void *)sub_100019310((uint64_t)&unk_100285520, 40LL);
  v4[2] = v3;
  v4[3] = v1;
  v4[4] = v0;
  uint64_t v5 = *(void *)(v2 + 32);
  sub_10002A444();
  sub_100041B5C();
  sub_10002A4C8();
  if ((sub_10010D828() & 1) != 0)
  {
    sub_100041B5C();
    sub_10002A4C8();
    uint64_t v6 = sub_10010D8B8();
    sub_1000FCD84(v6, v7, v8, v9);
    sub_10010D818();
    sub_100034E8C(v5, v2);
    sub_10002A51C();
    sub_10002A5A4();
    sub_10001A420();
  }

  else
  {
    uint64_t v10 = (void *)sub_100019310((uint64_t)&unk_100285548, 40LL);
    sub_10010D7F4(v10, (uint64_t)sub_10010D580);
    sub_10002A674();
    sub_10010D808((uint64_t)sub_10010D5A0);
    sub_10002A51C();
    sub_10002A5A4();
    sub_10002A7BC();
  }

  return sub_100041A88(v0);
}

uint64_t sub_100100B60()
{
  uint64_t v4 = (void *)sub_100019310((uint64_t)&unk_1002854A8, 40LL);
  v4[2] = v3;
  v4[3] = v1;
  v4[4] = v0;
  uint64_t v5 = *(void *)(v2 + 32);
  sub_10002A444();
  sub_100041B5C();
  sub_10002A4C8();
  if ((sub_10010D828() & 1) != 0)
  {
    sub_100041B5C();
    sub_10002A4C8();
    uint64_t v6 = sub_10010D8B8();
    sub_1000FCF0C(v6, v7, v8, v9);
    sub_10010D818();
    sub_100034E8C(v5, v2);
    sub_10002A51C();
    sub_10002A5A4();
    sub_10001A420();
  }

  else
  {
    uint64_t v10 = (void *)sub_100019310((uint64_t)&unk_1002854D0, 40LL);
    sub_10010D7F4(v10, (uint64_t)sub_10010D7CC);
    sub_10002A674();
    sub_10010D808((uint64_t)sub_10010D790);
    sub_10002A51C();
    sub_10002A5A4();
    sub_10002A7BC();
  }

  return sub_100041A88(v0);
}

uint64_t sub_100100C2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_allocObject(&unk_100284968, 48LL, 7LL);
  _OWORD v6[2] = a2;
  v6[3] = sub_10012D1A8;
  v6[4] = 0LL;
  v6[5] = a3;
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 16);
  swift_retain();
  swift_retain();
  if ((v9(ObjectType, v7) & 1) != 0)
  {
    swift_retain();
    swift_retain();
    uint64_t v10 = sub_1000FD094(a1, a2, a3);
    uint64_t v12 = v11;
    CallbackList._run()();
    sub_100034E8C(v10, v12);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v13 = (void *)swift_allocObject(&unk_100284990, 40LL, 7LL);
    void v13[2] = a1;
    v13[3] = sub_10010D6F0;
    v13[4] = v6;
    uint64_t v14 = *(void (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(v7 + 24);
    swift_retain();
    swift_retain();
    v14(sub_10010D790, v13, ObjectType, v7);
    swift_release();
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t sub_100100D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_allocObject(&unk_1002848C8, 48LL, 7LL);
  _OWORD v6[2] = a2;
  v6[3] = sub_10010CC40;
  v6[4] = 0LL;
  v6[5] = a3;
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 32));
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 16);
  swift_retain();
  swift_retain();
  if ((v9(ObjectType, v7) & 1) != 0)
  {
    swift_retain();
    swift_retain();
    uint64_t v10 = sub_1000FD1F0(a1, a2, a3);
    uint64_t v12 = v11;
    CallbackList._run()();
    sub_100034E8C(v10, v12);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v13 = (void *)swift_allocObject(&unk_1002848F0, 40LL, 7LL);
    void v13[2] = a1;
    v13[3] = sub_10010CDBC;
    v13[4] = v6;
    uint64_t v14 = *(void (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(v7 + 24);
    swift_retain();
    swift_retain();
    v14(sub_10010D790, v13, ObjectType, v7);
    swift_release();
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t sub_100100EFC()
{
  uint64_t v4 = (void *)sub_100019310((uint64_t)&unk_100284558, 40LL);
  v4[2] = v3;
  v4[3] = v1;
  v4[4] = v0;
  uint64_t v5 = *(void *)(v2 + 40);
  sub_10002A444();
  sub_100041B5C();
  sub_10002A4C8();
  if ((sub_10010D828() & 1) != 0)
  {
    sub_100041B5C();
    sub_10002A4C8();
    uint64_t v6 = sub_10010D8B8();
    sub_1000FD34C(v6, v7, v8, v9);
    sub_10010D818();
    sub_100034E8C(v5, v2);
    sub_10002A51C();
    sub_10002A5A4();
    sub_10001A420();
  }

  else
  {
    uint64_t v10 = (void *)sub_100019310((uint64_t)&unk_100284580, 40LL);
    sub_10010D7F4(v10, (uint64_t)sub_10010CCD0);
    sub_10002A674();
    sub_10010D808((uint64_t)sub_10010D798);
    sub_10002A51C();
    sub_10002A5A4();
    sub_10002A7BC();
  }

  return sub_100041A88(v0);
}

uint64_t sub_100100FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject(&unk_100284648, 20LL, 7LL);
  *(_DWORD *)(v8 + 16) = a4;
  uint64_t v9 = (void *)swift_allocObject(&unk_100284670, 48LL, 7LL);
  void v9[2] = a2;
  void v9[3] = a3;
  v9[4] = sub_10010CD30;
  v9[5] = v8;
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 40));
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  if ((v12(ObjectType, v10) & 1) != 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v13 = sub_1000FD4D0(a1, a2, a3, a4);
    uint64_t v15 = v14;
    swift_release();
    CallbackList._run()();
    sub_100034E8C(v13, v15);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v16 = (void *)swift_allocObject(&unk_100284698, 40LL, 7LL);
    v16[2] = a1;
    void v16[3] = sub_10010CD4C;
    v16[4] = v9;
    uint64_t v17 = *(void (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(v10 + 24);
    swift_retain();
    swift_retain();
    v17(sub_10010D798, v16, ObjectType, v10);
    swift_release();
    swift_release();
    swift_release();
  }

  swift_release();
  return swift_release();
}

uint64_t sub_100101180()
{
  uint64_t v4 = v3;
  sub_10010D9B0();
  uint64_t v5 = (void *)sub_100019310((uint64_t)&unk_100284008, 40LL);
  v5[2] = v1;
  v5[3] = v0;
  v5[4] = v4;
  uint64_t v6 = *(void *)(v2 + 40);
  sub_10002A444();
  sub_10002A674();
  sub_10002A4C8();
  sub_100041B5C();
  if ((sub_10010E084() & 1) != 0)
  {
    sub_10002A674();
    sub_10002A4C8();
    sub_100041B5C();
    uint64_t v7 = sub_10010DCF0();
    sub_1000FD8E0(v7, v8, v9, v10);
    sub_10010D834();
    sub_100034E8C(v6, v2);
    sub_10002A5A4();
    sub_10002A524();
    sub_10001DC10();
  }

  else
  {
    uint64_t v11 = (void *)sub_100019310((uint64_t)&unk_100284030, 40LL);
    void v11[2] = v2;
    void v11[3] = sub_10010C9A4;
    v11[4] = v5;
    sub_10001EDE0();
    sub_10002A75C();
    sub_10010DBE8((uint64_t)sub_10010D798);
    sub_10002A5A4();
    sub_10002A524();
    sub_10009B770();
  }

  sub_10002A51C();
  return sub_100041A88(v0);
}

uint64_t sub_100101268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject(&unk_100284850, 48LL, 7LL);
  v8[2] = a2;
  v8[3] = a3;
  void v8[4] = sub_10010CD9C;
  v8[5] = a4;
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 40));
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 16);
  swift_retain_n(a4, 2LL);
  swift_retain();
  swift_retain();
  if ((v11(ObjectType, v9) & 1) != 0)
  {
    swift_retain_n(a4, 2LL);
    swift_retain();
    swift_retain();
    uint64_t v12 = sub_1000FDA5C(a1, a2, a3, a4);
    uint64_t v14 = v13;
    swift_release();
    CallbackList._run()();
    sub_100034E8C(v12, v14);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v15 = (void *)swift_allocObject(&unk_100284878, 40LL, 7LL);
    uint64_t v15[2] = a1;
    v15[3] = sub_10010D6E4;
    v15[4] = v8;
    uint64_t v16 = *(void (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(v9 + 24);
    swift_retain();
    swift_retain();
    v16(sub_10010D798, v15, ObjectType, v9);
    swift_release();
    swift_release();
    swift_release();
  }

  swift_release_n(a4, 2LL);
  return swift_release();
}

uint64_t sub_100101410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_allocObject(&unk_1002849E0, 40LL, 7LL);
  v12[2] = a4;
  void v12[3] = a5;
  uint64_t v23 = a6;
  v12[4] = a6;
  uint64_t v13 = (void *)swift_allocObject(&unk_100284A08, 48LL, 7LL);
  void v13[2] = a2;
  v13[3] = a3;
  v13[4] = sub_10010CE44;
  v13[5] = v12;
  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v24 = a1;
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 40));
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 16);
  swift_retain();
  swift_unknownObjectRetain(a5);
  swift_retain();
  swift_retain();
  swift_retain();
  if ((v16(ObjectType, v14) & 1) != 0)
  {
    swift_retain();
    swift_unknownObjectRetain(a5);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v17 = sub_1000FDBEC(v24, a2, a3, a4, a5, v23);
    uint64_t v19 = v18;
    swift_release();
    CallbackList._run()();
    sub_100034E8C(v17, v19);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v20 = (void *)swift_allocObject(&unk_100284A30, 40LL, 7LL);
    v20[2] = v24;
    v20[3] = sub_10010D6E4;
    v20[4] = v13;
    uint64_t v21 = *(void (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(v14 + 24);
    swift_retain();
    swift_retain();
    v21(sub_10010D798, v20, ObjectType, v14);
    swift_release();
    swift_release();
    swift_release();
  }

  swift_unknownObjectRelease(a5);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100101634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject(&unk_1002847D8, 48LL, 7LL);
  v8[2] = a2;
  v8[3] = a3;
  void v8[4] = sub_10010CD9C;
  v8[5] = a4;
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 40));
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 16);
  swift_retain_n(a4, 2LL);
  swift_retain();
  swift_retain();
  if ((v11(ObjectType, v9) & 1) != 0)
  {
    swift_retain_n(a4, 2LL);
    swift_retain();
    swift_retain();
    uint64_t v12 = sub_1000FDDE0(a1, a2, a3, a4);
    uint64_t v14 = v13;
    swift_release();
    CallbackList._run()();
    sub_100034E8C(v12, v14);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v15 = (void *)swift_allocObject(&unk_100284800, 40LL, 7LL);
    uint64_t v15[2] = a1;
    v15[3] = sub_10010D6E4;
    v15[4] = v8;
    uint64_t v16 = *(void (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(v9 + 24);
    swift_retain();
    swift_retain();
    v16(sub_10010D798, v15, ObjectType, v9);
    swift_release();
    swift_release();
    swift_release();
  }

  swift_release_n(a4, 2LL);
  return swift_release();
}

uint64_t sub_1001017DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject(&unk_100284710, 32LL, 7LL);
  *(void *)(v10 + 16) = a4;
  *(void *)(v10 + 24) = a5;
  uint64_t v11 = (void *)swift_allocObject(&unk_100284738, 48LL, 7LL);
  void v11[2] = a2;
  void v11[3] = a3;
  v11[4] = sub_10010CD88;
  v11[5] = v10;
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 40));
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 16);
  swift_unknownObjectRetain(a4);
  swift_retain();
  swift_retain();
  swift_retain();
  if ((v14(ObjectType, v12) & 1) != 0)
  {
    swift_unknownObjectRetain(a4);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v15 = sub_1000FDF70(a1, a2, a3, a4, a5);
    uint64_t v17 = v16;
    swift_release();
    CallbackList._run()();
    sub_100034E8C(v15, v17);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v18 = (void *)swift_allocObject(&unk_100284760, 40LL, 7LL);
    v18[2] = a1;
    v18[3] = sub_10010D6E4;
    v18[4] = v11;
    uint64_t v20 = *(void (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(v12 + 24);
    swift_retain();
    swift_retain();
    v20(sub_10010D798, v18, ObjectType, v12);
    swift_release();
    swift_release();
    swift_release();
  }

  swift_unknownObjectRelease(a4);
  swift_release();
  return swift_release();
}

uint64_t sub_1001019C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject(&unk_1002844B8, 48LL, 7LL);
  v8[2] = a2;
  v8[3] = a3;
  void v8[4] = sub_10010CC6C;
  v8[5] = a4;
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 40));
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 16);
  swift_retain_n(a4, 2LL);
  swift_retain();
  swift_retain();
  if ((v11(ObjectType, v9) & 1) != 0)
  {
    swift_retain_n(a4, 2LL);
    swift_retain();
    swift_retain();
    uint64_t v12 = sub_1000FE13C(a1, a2, a3, a4);
    uint64_t v14 = v13;
    swift_release();
    CallbackList._run()();
    sub_100034E8C(v12, v14);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v15 = (void *)swift_allocObject(&unk_1002844E0, 40LL, 7LL);
    uint64_t v15[2] = a1;
    v15[3] = sub_10010CC74;
    v15[4] = v8;
    uint64_t v16 = *(void (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(v9 + 24);
    swift_retain();
    swift_retain();
    v16(sub_10010D798, v15, ObjectType, v9);
    swift_release();
    swift_release();
    swift_release();
  }

  swift_release_n(a4, 2LL);
  return swift_release();
}

uint64_t sub_100101B70()
{
  uint64_t v4 = (void *)sub_100019310((uint64_t)&unk_100283D10, 40LL);
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v0;
  uint64_t v5 = *(void *)(v2 + 40);
  sub_10002A444();
  sub_100041B5C();
  sub_10002A4C8();
  if ((sub_10010D828() & 1) != 0)
  {
    sub_100041B5C();
    sub_10002A4C8();
    uint64_t v6 = sub_10010D8CC();
    sub_1000FE608(v6, v7, v8, v9);
    sub_10010D818();
    sub_100034E8C(v5, v2);
    sub_10002A51C();
    sub_10002A5A4();
    sub_10001A420();
  }

  else
  {
    uint64_t v10 = (void *)sub_100019310((uint64_t)&unk_100283D38, 40LL);
    sub_10010D7F4(v10, (uint64_t)sub_10010C860);
    sub_10002A674();
    sub_10010D808((uint64_t)sub_10010C870);
    sub_10002A51C();
    sub_10002A5A4();
    sub_10002A7BC();
  }

  return sub_100041A88(v0);
}

uint64_t sub_100101C3C()
{
  uint64_t v4 = (void *)sub_100019310((uint64_t)&unk_100283D88, 40LL);
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v0;
  uint64_t v5 = *(void *)(v2 + 40);
  sub_10002A444();
  sub_100041B5C();
  sub_10002A4C8();
  if ((sub_10010D828() & 1) != 0)
  {
    sub_100041B5C();
    sub_10002A4C8();
    uint64_t v6 = sub_10010D8CC();
    sub_1000FE470(v6, v7, v8, v9);
    sub_10010D818();
    sub_100034E8C(v5, v2);
    sub_10002A51C();
    sub_10002A5A4();
    sub_10001A420();
  }

  else
  {
    uint64_t v10 = (void *)sub_100019310((uint64_t)&unk_100283DB0, 40LL);
    sub_10010D7F4(v10, (uint64_t)sub_10010C8CC);
    sub_10002A674();
    sub_10010D808((uint64_t)sub_10010D798);
    sub_10002A51C();
    sub_10002A5A4();
    sub_10002A7BC();
  }

  return sub_100041A88(v0);
}

uint64_t sub_100101D08()
{
  uint64_t v4 = (void *)sub_100019310((uint64_t)&unk_100285390, 40LL);
  v4[2] = v3;
  v4[3] = v1;
  v4[4] = v0;
  uint64_t v5 = *(void *)(v2 + 40);
  sub_10002A444();
  sub_100041B5C();
  sub_10002A4C8();
  if ((sub_10010D828() & 1) != 0)
  {
    sub_100041B5C();
    sub_10002A4C8();
    uint64_t v6 = sub_10010D8B8();
    sub_1000FE7DC(v6, v7, v8, v9);
    sub_10010D818();
    sub_100034E8C(v5, v2);
    sub_10002A51C();
    sub_10002A5A4();
    sub_10001A420();
  }

  else
  {
    uint64_t v10 = (void *)sub_100019310((uint64_t)&unk_1002853B8, 40LL);
    sub_10010D7F4(v10, (uint64_t)sub_10010D4C0);
    sub_10002A674();
    sub_10010D808((uint64_t)sub_10010D4D0);
    sub_10002A51C();
    sub_10002A5A4();
    sub_10002A7BC();
  }

  return sub_100041A88(v0);
}

uint64_t sub_100101DD4()
{
  void (*v10)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v11;
  void *v12;
  sub_1000353E0();
  sub_10010D908();
  uint64_t v5 = (void *)sub_100019310((uint64_t)&unk_100283C20, 48LL);
  v5[2] = v2;
  v5[3] = v0;
  v5[4] = v4;
  v5[5] = v1;
  uint64_t v6 = *(void *)(v3 + 32);
  sub_10002A444();
  sub_10002A674();
  sub_10002A4C8();
  sub_100041B5C();
  if ((sub_10010D980() & 1) != 0)
  {
    sub_10002A674();
    sub_10002A4C8();
    sub_100041B5C();
    uint64_t v7 = sub_10010D8F0();
    sub_1000FEA48(v7, v8, v9, v10, v11);
    sub_10010D834();
    sub_100034E8C(v6, v3);
    sub_10002A5A4();
    sub_10002A524();
    sub_10001DC10();
  }

  else
  {
    uint64_t v12 = (void *)sub_100019310((uint64_t)&unk_100283C48, 40LL);
    sub_10010D844(v12, (uint64_t)sub_10010C7F4);
    sub_10002A75C();
    sub_10010D8E0((uint64_t)sub_10010D790);
    sub_10002A5A4();
    sub_10002A524();
    sub_10002A7BC();
  }

  sub_10002A51C();
  return sub_100041A88(v0);
}

uint64_t EventLoopFuture._whenComplete(_:)()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_10010DD04();
  uint64_t v6 = *(void *)(v5 + 8);
  uint64_t v7 = sub_10002A444();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v7, v6) & 1) != 0)
  {
    sub_10010E474();
    EventLoopFuture._addCallback(_:)();
    sub_10009B170();
    sub_10009B180();
    return swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v9 = (void *)sub_100019310((uint64_t)&unk_100283410, 40LL);
    void v9[2] = v0;
    void v9[3] = v4;
    v9[4] = v2;
    uint64_t v10 = *(void (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(v6 + 24);
    sub_10002A674();
    sub_10002A4C8();
    v10(sub_10010BDB4, v9, v7, v6);
    return sub_10009B144((uint64_t)v9);
  }

void sub_100101F64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void sub_100101F70( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(void))
{
  uint64_t v10 = sub_1000175B0(&qword_1002AAD98);
  uint64_t v11 = sub_100019310(v10, 72LL);
  __int128 v20 = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(v11 + 32) = v20;
  *(void *)(v11 + 16) = 0LL;
  *(_BYTE *)(v11 + 24) = -1;
  *(void *)(v11 + 56) = 0LL;
  *(void *)(v11 + 64) = 0LL;
  *(void *)(v11 + 48) = 0LL;
  sub_10009B59C(v11);
  ChannelPipeline.syncOperations.getter();
  uint64_t v12 = sub_10002A674();
  sub_10010D930(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  sub_10010E5C8();
  a8();
  sub_100024F0C();
  sub_10002A524();
  sub_100041AF4();
}

void EventLoopFuture.flatMapThrowing<A>(file:line:_:)()
{
}

void sub_100102034()
{
  uint64_t v6 = *v5;
  uint64_t v11 = EventLoopPromise.init(eventLoop:file:line:)(*v5, v5[1], v7, v8, v9, v10);
  uint64_t v12 = (void *)sub_100019310(v0, 56LL);
  v12[2] = v2;
  void v12[3] = v1;
  v12[4] = v4;
  void v12[5] = v3;
  v12[6] = v11;
  swift_unknownObjectRetain(v6);
  ChannelPipeline.syncOperations.getter();
  sub_10002A674();
  sub_100041B08();
  sub_10010E474();
  EventLoopFuture._whenComplete(_:)();
  sub_10001EDD8();
  sub_100023E74();
}

uint64_t sub_1001020AC(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t result = swift_beginAccess(a1 + 16, v10, 0LL, 0LL);
  int v5 = *(unsigned __int8 *)(a1 + 24);
  if (v5 == 255)
  {
    __break(1u);
  }

  else
  {
    if ((v5 & 1) != 0)
    {
      uint64_t v6 = *(void *)(a1 + 16);
      swift_errorRetain(v6);
      sub_1001A93A0(v6, 1);
      uint64_t v9 = v7;
      sub_10010CA6C(v6, v5);
    }

    else
    {
      a2(result);
      sub_1001A93A0(0LL, 0);
      return v8;
    }

    return v9;
  }

  return result;
}

uint64_t sub_1001021BC(uint64_t *a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v38 = a4;
  uint64_t v35 = a3;
  uint64_t v36 = a2;
  uint64_t v7 = *a1;
  sub_100018EC0(&qword_1002A9710);
  uint64_t v8 = type metadata accessor for Result(0LL, a5);
  uint64_t v39 = *(void *)(v8 - 8);
  uint64_t v40 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v33 - v10);
  uint64_t v33 = *(void *)(a5 - 8);
  uint64_t v34 = a5;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(void *)(v7 + 80);
  uint64_t v37 = *(void *)(v15 - 8);
  __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for Result(255LL, v15);
  uint64_t v19 = type metadata accessor for Optional(0LL, v18);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (uint64_t *)((char *)&v33 - v21);
  uint64_t v23 = (char *)a1 + *(void *)(v7 + 88);
  swift_beginAccess(v23, v41, 0LL, 0LL);
  (*(void (**)(uint64_t *, char *, uint64_t))(v20 + 16))(v22, v23, v19);
  uint64_t result = sub_10001D158((uint64_t)v22, 1LL, v18);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(v22, v18) == 1)
    {
      uint64_t v25 = *v22;
      *uint64_t v11 = *v22;
      uint64_t v26 = v40;
      swift_storeEnumTagMultiPayload(v11, v40, 1LL);
      swift_errorRetain(v25);
      EventLoopPromise._setValue(value:)();
      uint64_t v28 = v27;
      swift_errorRelease(v25);
      (*(void (**)(uint64_t *, uint64_t))(v39 + 8))(v11, v26);
    }

    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(v37 + 32))(v17, v22, v15);
      v36(v17);
      uint64_t v30 = v33;
      uint64_t v29 = v34;
      (*(void (**)(uint64_t *, char *, uint64_t))(v33 + 16))(v11, v14, v34);
      uint64_t v31 = v40;
      swift_storeEnumTagMultiPayload(v11, v40, 0LL);
      EventLoopPromise._setValue(value:)();
      uint64_t v28 = v32;
      (*(void (**)(uint64_t *, uint64_t))(v39 + 8))(v11, v31);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v29);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v17, v15);
    }

    return v28;
  }

  return result;
}

void sub_1001024EC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  int v5 = *(unsigned __int8 *)(a1 + 24);
  if (v5 == 255)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 16);
    if ((v5 & 1) != 0)
    {
      swift_errorRetain(*(void *)(a1 + 16));
      a3(v6);
      sub_10010E3D8(0LL, 0);
      sub_10010DD84();
    }

    else
    {
      sub_10010E3D8(*(void *)(a1 + 16), 0);
    }

    sub_100019398();
  }

uint64_t sub_1001025B8(uint64_t a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t))
{
  uint64_t result = swift_beginAccess(a1 + 16, v17, 0LL, 0LL);
  int v6 = *(unsigned __int8 *)(a1 + 32);
  if (v6 == 255)
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = *(void *)(a1 + 16);
    uint64_t v7 = *(void *)(a1 + 24);
    if ((v6 & 1) != 0)
    {
      swift_errorRetain(v8);
      a3(v16, v8);
      uint64_t v13 = v16[0];
      uint64_t v12 = v16[1];
      uint64_t v14 = swift_unknownObjectRetain(v16[0]);
      sub_1001A94F8(v14, v12, 0);
      uint64_t v11 = v15;
      sub_10010C8B0(v8, v7, v6);
      swift_unknownObjectRelease_n(v13, 2LL);
    }

    else
    {
      uint64_t v9 = swift_unknownObjectRetain(v8);
      sub_1001A94F8(v9, v7, 0);
      uint64_t v11 = v10;
      sub_10010C8B0(v8, v7, v6);
    }

    return v11;
  }

  return result;
}

uint64_t sub_10010271C(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  v29[1] = a4;
  uint64_t v30 = a3;
  uint64_t v32 = a2;
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*a1 + 80);
  sub_100018EC0(&qword_1002A9710);
  uint64_t v7 = type metadata accessor for Result(0LL, v6);
  uint64_t v33 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)v29 - v9;
  uint64_t v11 = *(void *)(v6 - 8);
  uint64_t v12 = __chkstk_darwin(v8);
  uint64_t v31 = (char *)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v29 - v14;
  uint64_t v16 = type metadata accessor for Optional(0LL, v7);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (void *)((char *)v29 - v18);
  uint64_t v20 = (uint64_t)a1 + *(void *)(v5 + 88);
  swift_beginAccess(v20, v34, 0LL, 0LL);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v17 + 16))(v19, v20, v16);
  uint64_t result = sub_10001D158((uint64_t)v19, 1LL, v7);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(v19, v7) == 1)
    {
      uint64_t v22 = *v19;
      uint64_t v23 = v31;
      v30(v22);
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v10, v23, v6);
      swift_storeEnumTagMultiPayload(v10, v7, 0LL);
      EventLoopPromise._setValue(value:)();
      uint64_t v26 = v25;
      swift_errorRelease(v22);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v7);
      uint64_t v27 = *(void (**)(char *, uint64_t))(v11 + 8);
      uint64_t v28 = v23;
    }

    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(v11 + 32))(v15, v19, v6);
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v10, v15, v6);
      swift_storeEnumTagMultiPayload(v10, v7, 0LL);
      EventLoopPromise._setValue(value:)();
      uint64_t v26 = v24;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v7);
      uint64_t v27 = *(void (**)(char *, uint64_t))(v11 + 8);
      uint64_t v28 = v15;
    }

    v27(v28, v6);
    return v26;
  }

  return result;
}

uint64_t sub_100102A04(uint64_t a1, void *a2, void (*a3)(uint64_t *__return_ptr, void *))
{
  uint64_t result = swift_beginAccess(a2 + 2, v27, 0LL, 0LL);
  unint64_t v5 = a2[9];
  if (HIBYTE(v5) == 255)
  {
    __break(1u);
  }

  else
  {
    uint64_t v7 = a2[2];
    uint64_t v6 = a2[3];
    uint64_t v8 = a2[4];
    uint64_t v9 = a2[5];
    uint64_t v11 = a2[6];
    uint64_t v10 = a2[7];
    uint64_t v12 = v5 & 0x100000000000000LL;
    uint64_t v13 = a2[8];
    if ((v5 & 0x100000000000000LL) != 0)
    {
      sub_10010C63C(v7, v6, v8, v9, v11, v10, v13, v5, 1);
    }

    else
    {
      v17[0] = v7;
      v17[1] = v6;
      char v18 = v8;
      uint64_t v19 = v9;
      uint64_t v20 = v11;
      uint64_t v21 = v10;
      uint64_t v22 = v13;
      int v23 = v5;
      char v25 = BYTE6(v5);
      __int16 v24 = WORD2(v5);
      sub_10010C63C(v7, v6, v8, v9, v11, v10, v13, v5, 0);
      a3(&v26, v17);
      sub_10010C6B8(v7, v6, v8, v9, v11, v10, v13, v5);
      uint64_t v7 = v26;
    }

    sub_1001A93A0(v7, SHIBYTE(v12));
    uint64_t v15 = v14;
    sub_100034F08(v7, v12 != 0);
    return v15;
  }

  return result;
}

uint64_t sub_100102B80(uint64_t a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t *))
{
  uint64_t result = swift_beginAccess(a2 + 16, v15, 0LL, 0LL);
  uint64_t v6 = *(unsigned __int16 *)(a2 + 24);
  if (v6 >> 8 > 0xFE)
  {
    __break(1u);
  }

  else
  {
    uint64_t v7 = *(void *)(a2 + 16);
    int v8 = v6 & 0x100;
    if ((v6 & 0x100) != 0)
    {
      sub_10010D344(v7, v6, 1);
      uint64_t v9 = 0LL;
    }

    else
    {
      uint64_t v13 = v7;
      char v14 = v6;
      sub_10010D32C(v7, v6);
      a3(v12, &v13);
      sub_10010D350(v7, v6);
      uint64_t v7 = v12[0];
      uint64_t v9 = v12[1];
    }

    sub_1001A9494(v7, v9, SBYTE1(v8));
    uint64_t v11 = v10;
    sub_100034EB4(v7, v9, v8 != 0);
    return v11;
  }

  return result;
}

uint64_t sub_100102C80(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr), uint64_t a4)
{
  uint64_t v7 = (uint64_t *)(a2 + 16);
  uint64_t result = swift_beginAccess(a2 + 16, v16, 0LL, 0LL);
  int v9 = *(unsigned __int8 *)(a2 + 24);
  if (v9 == 255)
  {
    __break(1u);
  }

  else
  {
    uint64_t v10 = *v7;
    sub_1000419E4(v10, v9 & 1);
    uint64_t v11 = sub_1000F35C0(a3, a4, v10, v9 & 1);
    char v13 = v12 & 1;
    sub_10010CA6C(v10, v9);
    sub_1001A93A0(v11, v13);
    uint64_t v15 = v14;
    sub_100034F08(v11, v13);
    return v15;
  }

  return result;
}

uint64_t sub_100102D54(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr), uint64_t a4)
{
  uint64_t v7 = (uint64_t *)(a2 + 16);
  uint64_t result = swift_beginAccess(a2 + 16, v18, 0LL, 0LL);
  int v9 = *(unsigned __int8 *)(a2 + 24);
  if (v9 == 255)
  {
    __break(1u);
  }

  else
  {
    uint64_t v10 = *v7;
    sub_1000419E4(v10, v9 & 1);
    uint64_t v11 = sub_1000F3610(a3, a4, v10, v9 & 1);
    uint64_t v13 = v12;
    char v15 = v14 & 1;
    sub_10010CA6C(v10, v9);
    sub_1001A94F8(v11, v13, v15);
    uint64_t v17 = v16;
    sub_100034DB8(v11, v13, v15);
    return v17;
  }

  return result;
}

uint64_t sub_100102E34(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t result = swift_beginAccess(a2 + 16, v12, 0LL, 0LL);
  int v6 = *(unsigned __int8 *)(a2 + 24);
  if (v6 == 255)
  {
    __break(1u);
  }

  else
  {
    uint64_t v7 = *(void *)(a2 + 16);
    if ((v6 & 1) != 0)
    {
      swift_errorRetain(v7);
    }

    else
    {
      uint64_t v10 = *(void *)(a2 + 16);
      swift_bridgeObjectRetain();
      a3(&v11, &v10);
      sub_10010C820(v7, v6);
      uint64_t v7 = v11;
    }

    sub_1001A93A0(v7, v6 & 1);
    uint64_t v9 = v8;
    sub_100034F08(v7, v6 & 1);
    return v9;
  }

  return result;
}

uint64_t sub_100102F0C( void (*a1)(char *), uint64_t *a2, void (*a3)(char *), void (*a4)(char *), uint64_t a5)
{
  v22[0] = a3;
  v22[1] = a4;
  void v22[2] = a1;
  uint64_t v7 = *a2;
  uint64_t v8 = *(void *)(*a2 + 80);
  sub_100018EC0(&qword_1002A9710);
  uint64_t v9 = type metadata accessor for Result(255LL, v8);
  uint64_t v10 = type metadata accessor for Optional(0LL, v9);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v22 - v12;
  uint64_t v14 = type metadata accessor for Result(0LL, a5);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v22 - v16;
  uint64_t v18 = (uint64_t)a2 + *(void *)(v7 + 88);
  swift_beginAccess(v18, v23, 0LL, 0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v18, v10);
  uint64_t result = sub_10001D158((uint64_t)v13, 1LL, v9);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    sub_100098910(v22[0], v9, a5, (uint64_t)v17);
    (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8LL))(v13, v9);
    EventLoopPromise._setValue(value:)();
    uint64_t v21 = v20;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    return v21;
  }

  return result;
}

uint64_t sub_1001030B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11)
{
  int v17 = *(unsigned __int8 *)(a1 + 32);
  if (v17 == 255)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    __break(1u);
  }

  else
  {
    uint64_t v18 = *(void *)(a1 + 16);
    uint64_t v19 = *(void *)(a1 + 24);
    if ((v17 & 1) != 0)
    {
      sub_10010D170(v18, v19, v17);
      ChannelHandlerContext.fireErrorCaught(_:)();
      uint64_t v21 = sub_1000F03E0(a3, a5, a6, a7, a8, a9, a10, a11);
      uint64_t v22 = *(void *)(v21 + 40);
      uint64_t v23 = *(void *)(v21 + 48);
      uint64_t ObjectType = swift_getObjectType(v22);
      char v25 = *(uint64_t (**)(uint64_t, uint64_t))(v23 + 16);
      swift_unknownObjectRetain(v22);
      LOBYTE(v23) = v25(ObjectType, v23);
      swift_unknownObjectRelease(v22);
      if ((v23 & 1) != 0)
      {
        swift_retain();
        uint64_t v26 = swift_retain();
        uint64_t v29 = sub_1000FBF2C(v26, a2, v21);
        swift_release();
        sub_10010D188(v18, v19, v17);
        swift_release();
      }

      else
      {
        sub_10002C4F8(a2);
        sub_10010D188(v18, v19, v17);
        swift_release();
        swift_release();
        uint64_t v29 = 0LL;
      }
    }

    else
    {
      sub_100034E9C(*(void *)(a1 + 16), *(void *)(a1 + 24));
      sub_1001A9494(v18, v19, 0);
      uint64_t v29 = v20;
      sub_10010D188(v18, v19, v17);
      swift_release();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return v29;
  }

  return result;
}

uint64_t sub_100103334(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = swift_beginAccess(a1 + 16, v18, 0LL, 0LL);
  int v7 = *(unsigned __int8 *)(a1 + 32);
  if (v7 != 255)
  {
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v8 = *(void *)(a1 + 24);
    if ((v7 & 1) != 0)
    {
      swift_errorRetain(v9);
      uint64_t v12 = a3(v9);
      uint64_t v13 = *(void *)(v12 + 40);
      uint64_t v14 = *(void *)(v12 + 48);
      uint64_t ObjectType = swift_getObjectType(v13);
      uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 16);
      swift_unknownObjectRetain(v13);
      LOBYTE(v14) = v16(ObjectType, v14);
      swift_unknownObjectRelease(v13);
      if ((v14 & 1) == 0)
      {
        sub_10002C4F8(a2);
        sub_10010D188(v9, v8, v7);
        swift_release();
        return 0LL;
      }

      swift_retain();
      uint64_t v17 = swift_retain();
      uint64_t v11 = sub_1000FBF2C(v17, a2, v12);
      swift_release();
    }

    else
    {
      sub_100034E9C(v9, v8);
      sub_1001A9494(v9, v8, 0);
      uint64_t v11 = v10;
    }

    sub_10010D188(v9, v8, v7);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_1001034A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(unsigned __int8 *)(a1 + 32);
  if (v6 != 255)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    uint64_t v7 = *(void *)(a1 + 24);
    if ((v6 & 1) != 0)
    {
      sub_10010C898(v8, *(void *)(a1 + 24), *(_BYTE *)(a1 + 32));
      sub_10015195C();
      uint64_t v12 = *(void *)(a3 + 48);
      uint64_t v13 = sub_1000175B0(&qword_1002B0FE8);
      uint64_t v14 = swift_allocObject(v13, 80LL, 7LL);
      *(void *)(v14 + 4sub_1000B58F0(v0, 0) = v12;
      *(void *)(v14 + 48) = &protocol witness table for SelectableEventLoop;
      *(void *)(v14 + 16) = v8;
      *(void *)(v14 + 24) = v7;
      *(_BYTE *)(v14 + 32) = v6;
      *(void *)(v14 + 64) = 0LL;
      *(void *)(v14 + 72) = 0LL;
      *(void *)(v14 + 56) = 0LL;
      swift_retain();
      sub_10010C898(v8, v7, v6);
      type metadata accessor for SelectableEventLoop();
      swift_retain();
      BOOL v15 = j___s25ASOctaneSupportXPCService19SelectableEventLoopC02ineF0Sbvg();
      swift_release();
      if (!v15)
      {
        sub_10002C538(a2);
        sub_10010C8B0(v8, v7, v6);
        swift_release();
        swift_release();
        return 0LL;
      }

      swift_retain();
      uint64_t v16 = swift_retain();
      uint64_t v11 = sub_1000FE2CC(v16, a2, v14);
      swift_release();
    }

    else
    {
      uint64_t v9 = swift_unknownObjectRetain(v8);
      sub_1001A94F8(v9, v7, 0);
      uint64_t v11 = v10;
    }

    sub_10010C8B0(v8, v7, v6);
    swift_release();
    return v11;
  }

  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_100103688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9 = *(unsigned __int8 *)(a1 + 32);
  if (v9 != 255)
  {
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v10 = *(void *)(a1 + 24);
    if ((v9 & 1) != 0)
    {
      sub_10010C898(v11, *(void *)(a1 + 24), *(_BYTE *)(a1 + 32));
      sub_10014F21C(v11, 2, 0LL);
      uint64_t ObjectType = swift_getObjectType(a4);
      uint64_t v16 = sub_1000175B0(&qword_1002AA4B0);
      uint64_t v17 = EventLoop.makeFailedFuture<A>(_:file:line:)( v11,  "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  319LL,  ObjectType,  v16,  a5);
      uint64_t v18 = *(void *)(v17 + 40);
      uint64_t v19 = *(void *)(v17 + 48);
      uint64_t v20 = swift_getObjectType(v18);
      uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 16);
      swift_unknownObjectRetain(v18);
      LOBYTE(v19) = v21(v20, v19);
      swift_unknownObjectRelease(v18);
      if ((v19 & 1) == 0)
      {
        sub_10002C538(a2);
        sub_10010C8B0(v11, v10, v9);
        swift_release();
        swift_release();
        uint64_t v14 = 0LL;
        goto LABEL_8;
      }

      swift_retain();
      uint64_t v22 = swift_retain();
      uint64_t v14 = sub_1000FE2CC(v22, a2, v17);
      swift_release();
      sub_10010C8B0(v11, v10, v9);
    }

    else
    {
      uint64_t v12 = swift_unknownObjectRetain(v11);
      sub_1001A94F8(v12, v10, 0);
      uint64_t v14 = v13;
      sub_10010C8B0(v11, v10, v9);
    }

    swift_release();
LABEL_8:
    swift_unknownObjectRelease(a4);
    return v14;
  }

  swift_unknownObjectRelease(a4);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_100103890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(unsigned __int8 *)(a1 + 32);
  if (v8 != 255)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v9 = *(void *)(a1 + 24);
    if ((v8 & 1) != 0)
    {
      uint64_t ObjectType = swift_getObjectType(a3);
      uint64_t v15 = sub_1000175B0(&qword_1002AA4B0);
      uint64_t v16 = EventLoop.makeFailedFuture<A>(_:file:line:)( v10,  "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  938LL,  ObjectType,  v15,  a4);
      uint64_t v17 = *(void *)(v16 + 40);
      uint64_t v18 = *(void *)(v16 + 48);
      uint64_t v19 = swift_getObjectType(v17);
      uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 16);
      sub_10010C898(v10, v9, v8);
      swift_unknownObjectRetain(v17);
      LOBYTE(v18) = v20(v19, v18);
      swift_unknownObjectRelease(v17);
      if ((v18 & 1) == 0)
      {
        sub_10002C538(a2);
        sub_10010C8B0(v10, v9, v8);
        swift_unknownObjectRelease(a3);
        swift_release();
        return 0LL;
      }

      swift_retain();
      uint64_t v21 = swift_retain();
      uint64_t v13 = sub_1000FE2CC(v21, a2, v16);
      swift_release();
    }

    else
    {
      uint64_t v11 = swift_unknownObjectRetain(v10);
      sub_1001A94F8(v11, v9, 0);
      uint64_t v13 = v12;
    }

    sub_10010C8B0(v10, v9, v8);
    swift_unknownObjectRelease(a3);
    return v13;
  }

  uint64_t result = swift_unknownObjectRelease(a3);
  __break(1u);
  return result;
}

uint64_t sub_100103A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(unsigned __int8 *)(a1 + 32);
  if (v6 != 255)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    uint64_t v7 = *(void *)(a1 + 24);
    if ((v6 & 1) != 0)
    {
      sub_10010C898(v8, *(void *)(a1 + 24), *(_BYTE *)(a1 + 32));
      sub_100151B40();
      uint64_t v12 = *(void *)(a3 + 48);
      uint64_t v13 = sub_1000175B0(&qword_1002B0FE8);
      uint64_t v14 = swift_allocObject(v13, 80LL, 7LL);
      *(void *)(v14 + 4sub_1000B58F0(v0, 0) = v12;
      *(void *)(v14 + 48) = &protocol witness table for SelectableEventLoop;
      *(void *)(v14 + 16) = v8;
      *(void *)(v14 + 24) = v7;
      *(_BYTE *)(v14 + 32) = v6;
      *(void *)(v14 + 64) = 0LL;
      *(void *)(v14 + 72) = 0LL;
      *(void *)(v14 + 56) = 0LL;
      swift_retain();
      sub_10010C898(v8, v7, v6);
      type metadata accessor for SelectableEventLoop();
      swift_retain();
      BOOL v15 = j___s25ASOctaneSupportXPCService19SelectableEventLoopC02ineF0Sbvg();
      swift_release();
      if (!v15)
      {
        sub_10002C538(a2);
        sub_10010C8B0(v8, v7, v6);
        swift_release();
        swift_release();
        return 0LL;
      }

      swift_retain();
      uint64_t v16 = swift_retain();
      uint64_t v11 = sub_1000FE2CC(v16, a2, v14);
      swift_release();
    }

    else
    {
      uint64_t v9 = swift_unknownObjectRetain(v8);
      sub_1001A94F8(v9, v7, 0);
      uint64_t v11 = v10;
    }

    sub_10010C8B0(v8, v7, v6);
    swift_release();
    return v11;
  }

  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_100103C3C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = swift_beginAccess(a1 + 16, v19, 0LL, 0LL);
  int v7 = *(unsigned __int8 *)(a1 + 32);
  if (v7 != 255)
  {
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v8 = *(void *)(a1 + 24);
    if ((v7 & 1) != 0)
    {
      swift_errorRetain(v9);
      uint64_t v13 = a3(v9);
      uint64_t v14 = *(void *)(v13 + 40);
      uint64_t v15 = *(void *)(v13 + 48);
      uint64_t ObjectType = swift_getObjectType(v14);
      uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 16);
      swift_unknownObjectRetain(v14);
      LOBYTE(sub_1000EF018(v13, v14, v15) = v17(ObjectType, v15);
      swift_unknownObjectRelease(v14);
      if ((v15 & 1) == 0)
      {
        sub_10002C538(a2);
        sub_10010C8B0(v9, v8, v7);
        swift_release();
        return 0LL;
      }

      swift_retain();
      uint64_t v18 = swift_retain();
      uint64_t v12 = sub_1000FE2CC(v18, a2, v13);
      swift_release();
    }

    else
    {
      uint64_t v10 = swift_unknownObjectRetain(v9);
      sub_1001A94F8(v10, v8, 0);
      uint64_t v12 = v11;
    }

    sub_10010C8B0(v9, v8, v7);
    return v12;
  }

  __break(1u);
  return result;
}

uint64_t sub_100103DA8(uint64_t *a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  v31[1] = a4;
  uint64_t v32 = a3;
  uint64_t v34 = a2;
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*a1 + 80);
  sub_100018EC0(&qword_1002A9710);
  uint64_t v7 = type metadata accessor for Result(0LL, v6);
  uint64_t v33 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)v31 - v9;
  uint64_t v11 = *(void *)(v6 - 8);
  __chkstk_darwin(v8);
  uint64_t v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Optional(0LL, v7);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (void *)((char *)v31 - v16);
  uint64_t v18 = (uint64_t)a1 + *(void *)(v5 + 88);
  swift_beginAccess(v18, v35, 0LL, 0LL);
  (*(void (**)(void *, uint64_t, uint64_t))(v15 + 16))(v17, v18, v14);
  uint64_t result = sub_10001D158((uint64_t)v17, 1LL, v7);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(v17, v7) == 1)
    {
      uint64_t v20 = *v17;
      uint64_t v21 = v32(*v17);
      uint64_t v22 = (void *)(v21 + *(void *)(*(void *)v21 + 96LL));
      uint64_t v23 = *v22;
      uint64_t v24 = v22[1];
      uint64_t ObjectType = swift_getObjectType(*v22);
      uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 16);
      swift_unknownObjectRetain(v23);
      LOBYTE(v24) = v26(ObjectType, v24);
      swift_unknownObjectRelease(v23);
      if ((v24 & 1) != 0)
      {
        uint64_t v27 = swift_allocObject(&unk_100284DA0, 32LL, 7LL);
        *(void *)(v27 + 16) = v34;
        *(void *)(v27 + 24) = v21;
        swift_retain();
        swift_retain();
        EventLoopFuture._addCallback(_:)();
        uint64_t v29 = v28;
        swift_release();
        swift_release();
        swift_errorRelease(v20);
      }

      else
      {
        EventLoopFuture.cascade(to:)(v34);
        swift_errorRelease(v20);
        swift_release();
        return 0LL;
      }
    }

    else
    {
      (*(void (**)(char *, void *, uint64_t))(v11 + 32))(v13, v17, v6);
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v10, v13, v6);
      swift_storeEnumTagMultiPayload(v10, v7, 0LL);
      EventLoopPromise._setValue(value:)();
      uint64_t v29 = v30;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v7);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v6);
    }

    return v29;
  }

  return result;
}

void sub_100104088( uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, void), void (*a4)(uint64_t, uint64_t, void), void (*a5)(uint64_t))
{
  int v9 = *(unsigned __int8 *)(a2 + 32);
  if (v9 == 255)
  {
    __break(1u);
  }

  else
  {
    uint64_t v12 = a2 + 16;
    uint64_t v10 = *(void *)(a2 + 16);
    uint64_t v11 = *(void *)(v12 + 8);
    a3(v10, v11, v9 & 1);
    a4(v10, v11, v9 & 1);
    uint64_t v13 = sub_10010E48C();
    a5(v13);
    sub_10002A568();
  }

void EventLoopFuture.flatMapResult<A, B>(file:line:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  uint64_t v32 = sub_10010E4BC(v27, *(void *)(v26 + 8), v28, v29, v30, v31);
  uint64_t v33 = (void *)sub_100019310((uint64_t)&unk_100283460, 72LL);
  v33[2] = v23;
  v33[3] = v21;
  v33[4] = a21;
  v33[5] = v22;
  v33[6] = v25;
  v33[7] = v24;
  v33[8] = v32;
  sub_10010DF3C();
  ChannelPipeline.syncOperations.getter();
  sub_10002A674();
  sub_10009B678();
  EventLoopFuture._whenComplete(_:)();
  sub_10009B4FC();
  sub_10002A580();
}

uint64_t sub_1001041A8( uint64_t *a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v71 = a4;
  uint64_t v65 = a3;
  uint64_t v66 = a2;
  uint64_t v11 = *a1;
  uint64_t v63 = *(void *)(a6 - 8);
  uint64_t v12 = __chkstk_darwin(a1);
  uint64_t v60 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v62 = (char *)&v57 - v14;
  sub_100018EC0(&qword_1002A9710);
  uint64_t v72 = type metadata accessor for Result(0LL, a5);
  uint64_t v70 = *(void *)(v72 - 8);
  uint64_t v15 = __chkstk_darwin(v72);
  uint64_t v59 = (uint64_t *)((char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char **)((char *)&v57 - v18);
  uint64_t v58 = *(void *)(a5 - 8);
  __chkstk_darwin(v17);
  uint64_t v57 = (char *)&v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = a6;
  uint64_t v61 = a7;
  uint64_t v21 = type metadata accessor for Result(0LL, a5);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v57 - v23;
  uint64_t v69 = *(void *)(*(void *)(v11 + 80) - 8LL);
  __chkstk_darwin(v22);
  uint64_t v67 = (char *)&v57 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v68 = v26;
  uint64_t v27 = type metadata accessor for Result(255LL, v26);
  uint64_t v28 = type metadata accessor for Optional(0LL, v27);
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v31 = (char **)((char *)&v57 - v30);
  uint64_t v32 = (char *)a1 + *(void *)(v11 + 88);
  swift_beginAccess(v32, v73, 0LL, 0LL);
  (*(void (**)(void *, char *, uint64_t))(v29 + 16))(v31, v32, v28);
  uint64_t result = sub_10001D158((uint64_t)v31, 1LL, v27);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(v31, v27) == 1)
    {
      uint64_t v34 = *v31;
      *uint64_t v19 = *v31;
      uint64_t v35 = v72;
      swift_storeEnumTagMultiPayload(v19, v72, 1LL);
      swift_errorRetain(v34);
      EventLoopPromise._setValue(value:)();
      uint64_t v37 = v36;
      swift_errorRelease(v34);
      (*(void (**)(void *, uint64_t))(v70 + 8))(v19, v35);
    }

    else
    {
      uint64_t v38 = v67;
      uint64_t v39 = v31;
      uint64_t v40 = v68;
      (*(void (**)(char *, void *, uint64_t))(v69 + 32))(v67, v39, v68);
      v66(v38);
      if (swift_getEnumCaseMultiPayload(v24, v21) == 1)
      {
        uint64_t v42 = v62;
        uint64_t v41 = v63;
        int64_t v43 = *(void (**)(char *, char *, uint64_t))(v63 + 32);
        uint64_t v44 = v64;
        v43(v62, v24, v64);
        uint64_t v45 = v60;
        (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v60, v42, v44);
        uint64_t v46 = v61;
        uint64_t v47 = _getErrorEmbeddedNSError<A>(_:)(v45, v44, v61);
        if (v47)
        {
          uint64_t v48 = v47;
          (*(void (**)(char *, uint64_t))(v41 + 8))(v45, v44);
        }

        else
        {
          uint64_t v48 = swift_allocError(v44, v46, 0LL, 0LL);
          v43(v53, v45, v44);
        }

        uint64_t v54 = v59;
        *uint64_t v59 = v48;
        uint64_t v55 = v72;
        swift_storeEnumTagMultiPayload(v54, v72, 1LL);
        EventLoopPromise._setValue(value:)();
        uint64_t v37 = v56;
        (*(void (**)(uint64_t *, uint64_t))(v70 + 8))(v54, v55);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v44);
        (*(void (**)(char *, uint64_t))(v69 + 8))(v67, v68);
      }

      else
      {
        uint64_t v49 = v57;
        uint64_t v50 = v58;
        (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v57, v24, a5);
        (*(void (**)(void *, char *, uint64_t))(v50 + 16))(v19, v49, a5);
        uint64_t v51 = v72;
        swift_storeEnumTagMultiPayload(v19, v72, 0LL);
        EventLoopPromise._setValue(value:)();
        uint64_t v37 = v52;
        (*(void (**)(void *, uint64_t))(v70 + 8))(v19, v51);
        (*(void (**)(char *, uint64_t))(v50 + 8))(v49, a5);
        (*(void (**)(char *, uint64_t))(v69 + 8))(v38, v40);
      }
    }

    return v37;
  }

  return result;
}

void sub_100104668()
{
}

void sub_100104674()
{
}

void sub_100104680()
{
  uint64_t v1 = sub_1000175B0(&qword_1002AAD98);
  uint64_t v2 = sub_100019310(v1, 72LL);
  __int128 v11 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v2 + 32) = v11;
  *(void *)(v2 + 16) = 0LL;
  *(_BYTE *)(v2 + 24) = -1;
  *(void *)(v2 + 56) = 0LL;
  *(void *)(v2 + 64) = 0LL;
  *(void *)(v2 + 48) = 0LL;
  sub_10009B59C(v2);
  ChannelPipeline.syncOperations.getter();
  uint64_t v3 = sub_100041B5C();
  sub_10010D930(v3, v4, v5, v6, v7, v8, v9, v10, v11);
  sub_10010E008();
  sub_100024F0C();
  sub_10002A5A4();
  sub_10001DBAC();
}

void EventLoopFuture.recover(file:line:_:)()
{
}

void sub_10010470C()
{
  uint64_t v9 = sub_10010E4BC(v4, *(void *)(v0 + *(void *)(*(void *)v0 + 96LL) + 8), v5, v6, v7, v8);
  uint64_t v10 = (void *)sub_100019310(v1, 48LL);
  v10[2] = v0;
  void v10[3] = v9;
  v10[4] = v3;
  v10[5] = v2;
  sub_10010DF3C();
  ChannelPipeline.syncOperations.getter();
  sub_10009B678();
  sub_10002A674();
  EventLoopFuture._whenComplete(_:)();
  sub_10002A51C();
  sub_100023E74();
}

uint64_t sub_100104784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(a1 + 24);
  if (v5 == 255)
  {
    uint64_t result = swift_release();
    __break(1u);
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 16);
    if ((v5 & 1) != 0)
    {
      swift_beginAccess(a3 + 216, &v14, 1LL, 0LL);
      uint64_t v9 = *(void *)(a3 + 248);
      *(void *)(a3 + 248) = v6;
      sub_10010CA54(v6, v5);
      swift_errorRetain(v6);
      uint64_t v10 = swift_errorRelease(v9);
      sub_1001A93A0(v10, 0);
      uint64_t v8 = v11;
      uint64_t v12 = sub_10010CA6C(v6, v5);
      sub_100034F08(v12, 0);
    }

    else
    {
      sub_1001A93A0(v6, 0);
      uint64_t v8 = v7;
    }

    swift_release();
    return v8;
  }

  return result;
}

uint64_t sub_100104884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(a1 + 24);
  if (v5 == 255)
  {
    uint64_t result = swift_release();
    __break(1u);
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 16);
    if ((v5 & 1) != 0)
    {
      swift_beginAccess(a3 + 216, &v14, 1LL, 0LL);
      uint64_t v9 = *(void *)(a3 + 240);
      *(void *)(a3 + 24sub_1000B58F0(v0, 0) = v6;
      sub_10010CA54(v6, v5);
      swift_errorRetain(v6);
      uint64_t v10 = swift_errorRelease(v9);
      sub_1001A93A0(v10, 0);
      uint64_t v8 = v11;
      uint64_t v12 = sub_10010CA6C(v6, v5);
      sub_100034F08(v12, 0);
    }

    else
    {
      sub_1001A93A0(v6, 0);
      uint64_t v8 = v7;
    }

    swift_release();
    return v8;
  }

  return result;
}

uint64_t sub_100104984(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t result = swift_beginAccess(a1 + 16, v13, 0LL, 0LL);
  int v6 = *(unsigned __int8 *)(a1 + 24);
  if (v6 == 255)
  {
    __break(1u);
  }

  else
  {
    uint64_t v7 = *(void *)(a1 + 16);
    if ((v6 & 1) != 0)
    {
      swift_errorRetain(v7);
      a3(&v12, v7);
      uint64_t v10 = v12;
      sub_1001A93A0(v12, 0);
      uint64_t v9 = v11;
      sub_10010CA6C(v7, v6);
      sub_100034F08(v10, 0);
    }

    else
    {
      sub_1001A93A0(v7, 0);
      return v8;
    }

    return v9;
  }

  return result;
}

uint64_t sub_100104A68(uint64_t *a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  v25[1] = a4;
  uint64_t v26 = a3;
  uint64_t v27 = a2;
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*a1 + 80);
  sub_100018EC0(&qword_1002A9710);
  uint64_t v7 = type metadata accessor for Result(0LL, v6);
  uint64_t v28 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)v25 - v9;
  uint64_t v11 = *(void *)(v6 - 8);
  __chkstk_darwin(v8);
  uint64_t v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Optional(0LL, v7);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (void *)((char *)v25 - v16);
  uint64_t v18 = (uint64_t)a1 + *(void *)(v5 + 88);
  swift_beginAccess(v18, v29, 0LL, 0LL);
  (*(void (**)(void *, uint64_t, uint64_t))(v15 + 16))(v17, v18, v14);
  uint64_t result = sub_10001D158((uint64_t)v17, 1LL, v7);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(v17, v7) == 1)
    {
      uint64_t v20 = *v17;
      v26(*v17);
      swift_storeEnumTagMultiPayload(v10, v7, 0LL);
      EventLoopPromise._setValue(value:)();
      uint64_t v22 = v21;
      swift_errorRelease(v20);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v7);
    }

    else
    {
      uint64_t v23 = v11;
      (*(void (**)(char *, void *, uint64_t))(v11 + 32))(v13, v17, v6);
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v10, v13, v6);
      swift_storeEnumTagMultiPayload(v10, v7, 0LL);
      EventLoopPromise._setValue(value:)();
      uint64_t v22 = v24;
      (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v7);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v13, v6);
    }

    return v22;
  }

  return result;
}

uint64_t sub_100104CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100104CC0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_1000FEC54);
}

uint64_t sub_100104CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v4 = sub_10009B180();
  return sub_10009B43C(v4);
}

uint64_t sub_100104CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100104CC0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_1000FE754);
}

uint64_t sub_100104CF0(uint64_t *a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v18 = a3;
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*a1 + 80);
  sub_100018EC0(&qword_1002A9710);
  uint64_t v7 = type metadata accessor for Result(255LL, v6);
  uint64_t v8 = type metadata accessor for Optional(0LL, v7);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = &v19[-v11 - 8];
  uint64_t v13 = *(void *)(v6 - 8);
  __chkstk_darwin(v10);
  uint64_t v15 = &v19[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v16 = (uint64_t)a1 + *(void *)(v5 + 88);
  swift_beginAccess(v16, v19, 0LL, 0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v16, v8);
  uint64_t result = sub_10001D158((uint64_t)v12, 1LL, v7);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(v12, v7) == 1)
    {
      (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8LL))(v12, v7);
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, v6);
      a2(v15);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v6);
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_100104E80(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t result = swift_beginAccess(a1 + 16, v7, 0LL, 0LL);
  int v5 = *(unsigned __int8 *)(a1 + 24);
  if (v5 == 255)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 16);
    if ((v5 & 1) != 0)
    {
      swift_errorRetain(v6);
      a2(v6);
    }

    sub_10010CA6C(v6, v5);
    return 0LL;
  }

  return result;
}

uint64_t sub_100104F08(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t result = swift_beginAccess(a1 + 16, v7, 0LL, 0LL);
  int v5 = *(unsigned __int8 *)(a1 + 24);
  if (v5 == 255)
  {
    __break(1u);
  }

  else
  {
    if ((v5 & 1) != 0)
    {
      uint64_t v6 = *(void *)(a1 + 16);
      swift_errorRetain(v6);
      a2(v6);
      sub_10010CDD0(v6, v5);
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_100104F90(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t result = swift_beginAccess(a1 + 16, v8, 0LL, 0LL);
  int v5 = *(unsigned __int8 *)(a1 + 32);
  if (v5 == 255)
  {
    __break(1u);
  }

  else
  {
    if ((v5 & 1) != 0)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      swift_errorRetain(v7);
      a2(v7);
      sub_10010C8B0(v7, v6, v5);
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_100105024(uint64_t *a1, void (*a2)(void))
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 80);
  sub_100018EC0(&qword_1002A9710);
  uint64_t v6 = type metadata accessor for Result(255LL, v5);
  uint64_t v7 = type metadata accessor for Optional(0LL, v6);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v15[-v9 - 8];
  uint64_t v11 = (uint64_t)a1 + *(void *)(v4 + 88);
  swift_beginAccess(v11, v15, 0LL, 0LL);
  (*(void (**)(void *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  uint64_t result = sub_10001D158((uint64_t)v10, 1LL, v6);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(v10, v6) == 1)
    {
      uint64_t v13 = *v10;
      a2(*v10);
      swift_errorRelease(v13);
    }

    else
    {
      (*(void (**)(void *, uint64_t))(*(void *)(v6 - 8) + 8LL))(v10, v6);
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_10010516C()
{
  return sub_100105024(*(uint64_t **)(v0 + 16), *(void (**)(void))(v0 + 24));
}

void sub_100105178(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_10010E324();
  if (v6)
  {
    __break(1u);
  }

  else
  {
    sub_1000419E4(v4, v5 & 1);
    a1(&v7);
    sub_100034F08(v7, v8);
    _s25ASOctaneSupportXPCService35NIOSingleStepByteToMessageProcessorC7_bufferAA0F6BufferVSgvpfi_0();
    sub_100092C28();
  }

void sub_1001051D8(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_10010E324();
  if (v6)
  {
    __break(1u);
  }

  else
  {
    sub_10009AF58(v4, v5 & 1);
    a1(&v7);
    sub_10009AD58(v7, v8, (uint64_t (*)(void))&_swift_release);
    _s25ASOctaneSupportXPCService35NIOSingleStepByteToMessageProcessorC7_bufferAA0F6BufferVSgvpfi_0();
    sub_100092C28();
  }

void sub_100105240( void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, void (*a4)(void), void (*a5)(uint64_t, uint64_t, void))
{
  uint64_t v9 = *(void *)(a3 + 24);
  int v10 = *(unsigned __int8 *)(a3 + 32);
  uint64_t v11 = *(void *)(a3 + 16);
  uint64_t v12 = v9;
  unsigned __int8 v13 = v10;
  if (v10 == 255)
  {
    __break(1u);
  }

  else
  {
    a4();
    a1(&v11);
    a5(v11, v12, v13);
    _s25ASOctaneSupportXPCService35NIOSingleStepByteToMessageProcessorC7_bufferAA0F6BufferVSgvpfi_0();
    sub_10010D9C8();
  }

uint64_t sub_1001052BC(void (*a1)(uint64_t *), uint64_t a2, void *a3)
{
  uint64_t result = a3[2];
  uint64_t v6 = a3[3];
  unint64_t v7 = a3[4];
  uint64_t v8 = result;
  uint64_t v9 = v6;
  unint64_t v10 = v7;
  if (HIBYTE(v7) == 255)
  {
    __break(1u);
  }

  else
  {
    sub_10009AEA0(result, v6, v7, HIBYTE(v7) & 1);
    a1(&v8);
    sub_10009AE88(v8, v9, v10 | ((unint64_t)(WORD2(v10) | (BYTE6(v10) << 16)) << 32), SHIBYTE(v10));
    return 0LL;
  }

  return result;
}

uint64_t sub_100105360(void (*a1)(char *), uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = *(void *)(*a3 + 80);
  sub_100018EC0(&qword_1002A9710);
  uint64_t v7 = type metadata accessor for Result(255LL, v6);
  uint64_t v8 = type metadata accessor for Optional(0LL, v7);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v15[-v10 - 8];
  uint64_t v12 = (uint64_t)a3 + *(void *)(v5 + 88);
  swift_beginAccess(v12, v15, 0LL, 0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  uint64_t result = sub_10001D158((uint64_t)v11, 1LL, v7);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    a1(v11);
    (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8LL))(v11, v7);
    return 0LL;
  }

  return result;
}

void EventLoopFuture.and<A>(_:file:line:)()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(*(void *)v0 + 80LL);
  uint64_t v13 = *(void *)(*(void *)v10 + 80LL);
  swift_getTupleTypeMetadata2(0LL, v12, v13, 0LL, 0LL);
  uint64_t v14 = sub_10010E48C();
  uint64_t v16 = EventLoopPromise.init(eventLoop:file:line:)(v14, v15, v9, v7, v5, v3);
  uint64_t v17 = sub_10010E638();
  uint64_t v18 = swift_allocBox(v17);
  uint64_t v20 = sub_10010E1BC(v18, v19);
  sub_10001762C(v20, v21, v22, v12);
  uint64_t v23 = type metadata accessor for Optional(0LL, v13);
  uint64_t v24 = swift_allocBox(v23);
  uint64_t v26 = sub_10010E1BC(v24, v25);
  sub_10001762C(v26, v27, v28, v13);
  uint64_t v29 = (void *)sub_100019310((uint64_t)&unk_1002834B0, 56LL);
  void v29[2] = v13;
  v29[3] = v1;
  v29[4] = v16;
  v29[5] = v24;
  v29[6] = v18;
  sub_10010DF3C();
  sub_10002A674();
  sub_100041B5C();
  sub_100041B08();
  sub_10002A75C();
  EventLoopFuture._whenComplete(_:)();
  sub_10009B770();
  uint64_t v30 = sub_10010E48C();
  EventLoopFuture.hop(to:)(v30, v31);
  uint64_t v32 = (void *)sub_100019310((uint64_t)&unk_1002834D8, 56LL);
  __int128 v32[2] = v1;
  v32[3] = v11;
  v32[4] = v16;
  v32[5] = v18;
  v32[6] = v24;
  sub_10002A674();
  sub_100041B5C();
  sub_100041B08();
  sub_10002A75C();
  sub_10002A4C8();
  EventLoopFuture._whenComplete(_:)();
  sub_10002A524();
  sub_10009B4FC();
  sub_10001ED6C();
  sub_100024F0C();
  sub_10002A580();
}

void sub_1001055F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), void (*a6)(uint64_t, uint64_t), void (*a7)(void))
{
  uint64_t v13 = *(unsigned __int8 *)(a1 + 24);
  if ((_DWORD)v13 == 255)
  {
    __break(1u);
  }

  else
  {
    if ((v13 & 1) != 0)
    {
      uint64_t v15 = *(void *)(a1 + 16);
      sub_10002A710();
      uint64_t v16 = sub_10010E5A0();
      a5(v16);
      a6(v15, v13);
    }

    else
    {
      uint64_t v14 = sub_1000487CC(a3 + 16, (uint64_t)v18);
      if ((*(_BYTE *)(a3 + 16) & 1) != 0)
      {
        sub_10002A718(a4 + 16, (uint64_t)v17, 1LL);
        *(_BYTE *)(a4 + 16) = 0;
      }

      else
      {
        ((void (*)(uint64_t, void))a5)(v14, 0LL);
        a7();
      }
    }

    sub_10010DE24();
  }

uint64_t sub_1001056E8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v60 = a2;
  uint64_t v61 = a4;
  uint64_t v8 = *a1;
  uint64_t v9 = *(void *)(*a1 + 80);
  uint64_t v10 = type metadata accessor for Optional(0LL, v9);
  uint64_t v51 = *(void *)(v10 - 8);
  uint64_t v52 = v10;
  __chkstk_darwin(v10);
  uint64_t v50 = (char *)&v46 - v11;
  uint64_t v55 = type metadata accessor for Optional(0LL, a5);
  uint64_t v53 = *(void *)(v55 - 8);
  uint64_t v12 = __chkstk_darwin(v55);
  uint64_t v54 = (char *)&v46 - v13;
  uint64_t v49 = *(void *)(a5 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v48 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v59 = *(void *)(v9 - 8);
  __chkstk_darwin(v14);
  uint64_t v56 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255LL, v9, a5, 0LL, 0LL);
  sub_100018EC0(&qword_1002A9710);
  uint64_t v47 = TupleTypeMetadata2;
  uint64_t v18 = type metadata accessor for Result(0LL, TupleTypeMetadata2);
  uint64_t v57 = *(void *)(v18 - 8);
  uint64_t v58 = v18;
  __chkstk_darwin(v18);
  uint64_t v20 = (uint64_t *)((char *)&v46 - v19);
  uint64_t v21 = type metadata accessor for Result(255LL, v9);
  uint64_t v22 = type metadata accessor for Optional(0LL, v21);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v25 = (uint64_t *)((char *)&v46 - v24);
  uint64_t v26 = swift_projectBox(a3);
  uint64_t v61 = swift_projectBox(v61);
  uint64_t v27 = (uint64_t)a1 + *(void *)(v8 + 88);
  swift_beginAccess(v27, v64, 0LL, 0LL);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v23 + 16))(v25, v27, v22);
  uint64_t result = sub_10001D158((uint64_t)v25, 1LL, v21);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(v25, v21) == 1)
    {
      uint64_t v29 = *v25;
      *uint64_t v20 = *v25;
      uint64_t v30 = v58;
      swift_storeEnumTagMultiPayload(v20, v58, 1LL);
      swift_errorRetain(v29);
      EventLoopPromise._setValue(value:)();
      uint64_t v32 = v31;
      swift_errorRelease(v29);
      (*(void (**)(uint64_t *, uint64_t))(v57 + 8))(v20, v30);
    }

    else
    {
      uint64_t v33 = v59;
      uint64_t v34 = *(void (**)(char *, uint64_t *, uint64_t))(v59 + 32);
      uint64_t v35 = v56;
      v34(v56, v25, v9);
      swift_beginAccess(v26, v63, 0LL, 0LL);
      uint64_t v37 = v53;
      uint64_t v36 = (uint64_t)v54;
      uint64_t v38 = v55;
      (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v54, v26, v55);
      if (sub_10001D158(v36, 1LL, a5) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
        uint64_t v39 = (uint64_t)v50;
        v34(v50, (uint64_t *)v35, v9);
        sub_10001762C(v39, 0LL, 1LL, v9);
        uint64_t v40 = v61;
        swift_beginAccess(v61, v62, 1LL, 0LL);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 40))(v40, v39, v52);
        return 0LL;
      }

      else
      {
        uint64_t v41 = v49;
        uint64_t v42 = v48;
        (*(void (**)(char *, uint64_t, uint64_t))(v49 + 32))(v48, v36, a5);
        int64_t v43 = (char *)v20 + *(int *)(v47 + 48);
        (*(void (**)(uint64_t *, char *, uint64_t))(v33 + 16))(v20, v35, v9);
        (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v43, v42, a5);
        uint64_t v44 = v58;
        swift_storeEnumTagMultiPayload(v20, v58, 0LL);
        EventLoopPromise._setValue(value:)();
        uint64_t v32 = v45;
        (*(void (**)(uint64_t *, uint64_t))(v57 + 8))(v20, v44);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v42, a5);
        (*(void (**)(char *, uint64_t))(v59 + 8))(v35, v9);
      }
    }

    return v32;
  }

  return result;
}

void sub_100105B6C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t), void (*a7)(void))
{
  int v16 = *(unsigned __int8 *)(a2 + 24);
  if (v16 == 255)
  {
    __break(1u);
  }

  else
  {
    if ((v16 & 1) != 0)
    {
      uint64_t v18 = *(void *)(a2 + 16);
      sub_10002A710();
      uint64_t v19 = sub_10010E5A0();
      a6(v19);
      sub_10010CA6C(v18, v16);
    }

    else
    {
      uint64_t v17 = sub_1000487CC(a4 + 16, (uint64_t)v21);
      if ((*(_BYTE *)(a4 + 16) & 1) != 0)
      {
        sub_10002A718(a5 + 16, (uint64_t)v20, 1LL);
        *(_BYTE *)(a5 + 16) = 0;
      }

      else
      {
        ((void (*)(uint64_t, void))a6)(v17, 0LL);
        a7();
      }
    }

    sub_10010DE24();
  }

uint64_t sub_100105C84(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v64 = a4;
  uint64_t v65 = a5;
  uint64_t v63 = a3;
  uint64_t v7 = *a1;
  uint64_t v8 = *(void *)(*(void *)a2 + 80LL);
  uint64_t v9 = type metadata accessor for Optional(0LL, v8);
  uint64_t v54 = *(void *)(v9 - 8);
  uint64_t v55 = v9;
  __chkstk_darwin(v9);
  uint64_t v53 = (char *)&v50 - v10;
  uint64_t v11 = *(void *)(v7 + 80);
  uint64_t v58 = type metadata accessor for Optional(0LL, v11);
  uint64_t v56 = *(void *)(v58 - 8);
  uint64_t v12 = __chkstk_darwin(v58);
  uint64_t v57 = (char *)&v50 - v13;
  uint64_t v52 = *(void *)(v11 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v51 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v62 = *(void *)(v8 - 8);
  __chkstk_darwin(v14);
  uint64_t v59 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255LL, v11, v8, 0LL, 0LL);
  sub_100018EC0(&qword_1002A9710);
  uint64_t v50 = TupleTypeMetadata2;
  uint64_t v18 = type metadata accessor for Result(0LL, TupleTypeMetadata2);
  uint64_t v60 = *(void *)(v18 - 8);
  uint64_t v61 = v18;
  __chkstk_darwin(v18);
  uint64_t v20 = (uint64_t *)((char *)&v50 - v19);
  uint64_t v21 = type metadata accessor for Result(255LL, v8);
  uint64_t v22 = type metadata accessor for Optional(0LL, v21);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v25 = (uint64_t *)((char *)&v50 - v24);
  uint64_t v64 = swift_projectBox(v64);
  uint64_t v65 = swift_projectBox(v65);
  uint64_t v26 = (uint64_t *)((char *)a1 + *(void *)(v7 + 96));
  uint64_t v27 = v26[1];
  uint64_t ObjectType = swift_getObjectType(*v26);
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  812LL,  ObjectType,  v27);
  uint64_t v29 = a2 + *(void *)(*(void *)a2 + 88LL);
  swift_beginAccess(v29, v68, 0LL, 0LL);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v23 + 16))(v25, v29, v22);
  uint64_t result = sub_10001D158((uint64_t)v25, 1LL, v21);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(v25, v21) == 1)
    {
      uint64_t v31 = *v25;
      *uint64_t v20 = *v25;
      uint64_t v32 = v61;
      swift_storeEnumTagMultiPayload(v20, v61, 1LL);
      swift_errorRetain(v31);
      EventLoopPromise._setValue(value:)();
      uint64_t v34 = v33;
      swift_errorRelease(v31);
      (*(void (**)(uint64_t *, uint64_t))(v60 + 8))(v20, v32);
    }

    else
    {
      uint64_t v35 = v62;
      uint64_t v36 = *(void (**)(char *, uint64_t *, uint64_t))(v62 + 32);
      uint64_t v37 = v59;
      v36(v59, v25, v8);
      uint64_t v38 = v64;
      swift_beginAccess(v64, v67, 0LL, 0LL);
      uint64_t v40 = v56;
      uint64_t v39 = (uint64_t)v57;
      uint64_t v41 = v38;
      uint64_t v42 = v58;
      (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v57, v41, v58);
      if (sub_10001D158(v39, 1LL, v11) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v42);
        uint64_t v43 = (uint64_t)v53;
        v36(v53, (uint64_t *)v37, v8);
        sub_10001762C(v43, 0LL, 1LL, v8);
        uint64_t v44 = v65;
        swift_beginAccess(v65, v66, 1LL, 0LL);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 40))(v44, v43, v55);
        return 0LL;
      }

      else
      {
        uint64_t v45 = v52;
        uint64_t v46 = v51;
        (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(v51, v39, v11);
        uint64_t v47 = (char *)v20 + *(int *)(v50 + 48);
        (*(void (**)(uint64_t *, char *, uint64_t))(v45 + 16))(v20, v46, v11);
        (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v47, v37, v8);
        uint64_t v48 = v61;
        swift_storeEnumTagMultiPayload(v20, v61, 0LL);
        EventLoopPromise._setValue(value:)();
        uint64_t v34 = v49;
        (*(void (**)(uint64_t *, uint64_t))(v60 + 8))(v20, v48);
        (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v11);
        (*(void (**)(char *, uint64_t))(v62 + 8))(v37, v8);
      }
    }

    return v34;
  }

  return result;
}

void EventLoopFuture.and<A>(value:file:line:)()
{
  uint64_t v13 = v0;
  v12[1] = v1;
  sub_10010E13C();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for EventLoopFuture(0LL, v9, v7, v8);
  sub_10010E1AC();
  uint64_t v11 = *v10;
  sub_10010E468((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  EventLoopFuture.__allocating_init(eventLoop:value:file:line:)();
  swift_unknownObjectRetain(v11);
  sub_10009B648();
  EventLoopFuture.and<A>(_:file:line:)();
  sub_10002A51C();
  sub_10002A580();
}

uint64_t sub_100106234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100018EC0(&qword_1002A9710);
  uint64_t v9 = type metadata accessor for Result(0LL, a3);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v15 - v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v15 - v10, a1, v9);
  if (swift_getEnumCaseMultiPayload(v11, v9) == 1)
  {
    uint64_t v13 = *v11;
    EventLoopPromise.fail(_:)(*v11);
    return swift_errorRelease(v13);
  }

  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v6 + 32))(v8, v11, a3);
    EventLoopPromise.succeed(_:)((uint64_t)v8, a2, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a3);
  }

uint64_t EventLoopFuture.cascadeSuccess(to:)(uint64_t a1)
{
  return sub_100106388( a1,  (uint64_t)&unk_100283500,  (uint64_t)sub_10010BEA4,  (void (*)(uint64_t, uint64_t))EventLoopFuture.whenSuccess(_:));
}

uint64_t sub_100106388(uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = *v4;
    uint64_t v9 = sub_100019310(a2, 32LL);
    *(void *)(v9 + 16) = *(void *)(v8 + 80);
    *(void *)(v9 + 24) = v7;
    sub_10009B59C(v7);
    a4(a3, v9);
    sub_10002A51C();
    return sub_10009B134(v9);
  }

  return result;
}

void sub_1001063F0(uint64_t a1)
{
}

uint64_t sub_1001063FC()
{
  return sub_10010BE7C((uint64_t (*)(void, void, void, void, void))sub_1000F9438);
}

uint64_t sub_100106408(uint64_t a1)
{
  return sub_100106234(a1, *(void *)(v1 + 24), *(void *)(v1 + 16));
}

uint64_t sub_100106410()
{
  return sub_10010D5DC((void (*)(void))&_swift_release);
}

uint64_t sub_10010641C()
{
  return sub_100105360(*(void (**)(char *))(v0 + 16), *(void *)(v0 + 24), *(uint64_t **)(v0 + 32));
}

uint64_t sub_10010642C()
{
  return sub_10010271C( *(uint64_t **)(v0 + 16),  *(void *)(v0 + 24),  *(void (**)(uint64_t))(v0 + 32),  *(void *)(v0 + 40));
}

uint64_t sub_100106438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 16;
  Lock.lock()();
  swift_beginAccess(a3 + 16, v13, 0LL, 0LL);
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  LOBYTE(a3) = *(_BYTE *)(a3 + 32);
  swift_beginAccess(v5, &v12, 1LL, 0LL);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v7;
  unsigned __int8 v10 = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a2 + 32) = a3;
  sub_10010C898(v6, v7, a3);
  sub_10010C8B0(v8, v9, v10);
  sub_1001066BC(1LL);
  return 0LL;
}

void sub_100106500()
{
  uint64_t v3 = v2 + 16;
  Lock.lock()();
  sub_1000487CC(v0 + 16, (uint64_t)v9);
  uint64_t v4 = *(void *)(v0 + 16);
  unsigned __int8 v5 = *(_BYTE *)(v0 + 24);
  sub_10002A718(v3, (uint64_t)&v8, 1LL);
  uint64_t v6 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = v4;
  unsigned __int8 v7 = *(_BYTE *)(v1 + 24);
  *(_BYTE *)(v1 + 24) = v5;
  sub_10010CA54(v4, v5);
  sub_10010CA6C(v6, v7);
  sub_1001066BC(1LL);
  _s25ASOctaneSupportXPCService35NIOSingleStepByteToMessageProcessorC7_bufferAA0F6BufferVSgvpfi_0();
  sub_10010D9C8();
}

uint64_t sub_10010658C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)a3 + 80LL);
  sub_100018EC0(&qword_1002A9710);
  uint64_t v6 = type metadata accessor for Result(255LL, v5);
  uint64_t v7 = type metadata accessor for Optional(0LL, v6);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unsigned __int8 v10 = &v14[-v9];
  uint64_t v11 = swift_projectBox(a2);
  Lock.lock()();
  uint64_t v12 = a3 + *(void *)(*(void *)a3 + 88LL);
  swift_beginAccess(v12, v15, 0LL, 0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, v12, v7);
  swift_beginAccess(v11, v14, 1LL, 0LL);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v8 + 40))(v11, v10, v7);
  sub_1001066BC(1LL);
  return 0LL;
}

uint64_t sub_1001066BC(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_beginAccess(v2 + 16, v5, 1LL, 0LL);
  *(void *)(v2 + 16) = a1;
  Lock.unlock()();
  uint64_t result = pthread_cond_broadcast(*(pthread_cond_t **)(v2 + 32));
  if ((_DWORD)result) {
    __break(1u);
  }
  return result;
}

void sub_100106714(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v1 + 24);
  Lock.lock()();
  sub_1000487CC(v2 + 16, (uint64_t)v5);
  while (*(void *)(v2 + 16) != a1)
  {
    if (pthread_cond_wait(*(pthread_cond_t **)(v2 + 32), *(pthread_mutex_t **)(v4 + 16)))
    {
      __break(1u);
      break;
    }
  }

  sub_100013858();
}

void EventLoopFuture.fold<A>(_:with:)()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = *(uint64_t *)((char *)v0 + *(void *)(*v0 + 96) + 8);
  uint64_t v10 = sub_10002A444();
  if ((sub_10009B250(v10) & 1) != 0)
  {
    sub_10010686C(v8, v0, v6, v4, v2);
  }

  else
  {
    sub_10009B648();
    uint64_t v15 = EventLoop.makePromise<A>(of:file:line:)(v11, v12, v13, v14, 981LL, v10, v11, v9);
    uint64_t v16 = (void *)sub_100019310((uint64_t)&unk_100283528, 64LL);
    void v16[2] = v2;
    void v16[3] = v8;
    v16[4] = v0;
    void v16[5] = v6;
    v16[6] = v4;
    v16[7] = v15;
    uint64_t v17 = *(void (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(v9 + 24);
    sub_100077D1C();
    sub_10002A674();
    sub_100041B5C();
    sub_1000D94A0();
    v17(sub_10010BED4, v16, v10, v9);
    sub_100056B1C();
    sub_10002A580();
  }

uint64_t sub_10010686C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a2;
  v14[1] = a1;
  v14[0] = a2;
  void v13[2] = a5;
  v13[3] = a2;
  v13[4] = a3;
  v13[5] = a4;
  uint64_t v6 = type metadata accessor for EventLoopFuture(255LL, a5, a3, a4);
  uint64_t v7 = type metadata accessor for Array(0LL, v6);
  uint64_t v10 = type metadata accessor for EventLoopFuture(0LL, *(void *)(v5 + 80), v8, v9);
  uint64_t WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v7);
  Sequence.reduce<A>(_:_:)(&v15, v14, sub_10010D100, v13, v7, v10, WitnessTable);
  return v15;
}

uint64_t sub_100106914@<X0>( uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, void *a5@<X8>)
{
  uint64_t v10 = (void *)swift_allocObject(&unk_100284D78, 48LL, 7LL);
  v10[2] = a4;
  void v10[3] = a1;
  v10[4] = a2;
  v10[5] = a3;
  swift_retain();
  swift_retain();
  EventLoopFuture.flatMap<A>(file:line:_:)();
  uint64_t v12 = v11;
  swift_release();
  uint64_t result = swift_release();
  *a5 = v12;
  return result;
}

uint64_t sub_100106A04( uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, char *), uint64_t a4, uint64_t a5)
{
  uint64_t v29 = a4;
  uint64_t v30 = a3;
  uint64_t v28 = a2;
  uint64_t v7 = *(void *)(*(void *)a2 + 80LL);
  swift_getTupleTypeMetadata2(0LL, v7, a5, 0LL, 0LL);
  uint64_t v8 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v10 = (char *)&v27 - v9;
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = __chkstk_darwin(v8);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(void *)(v7 - 8);
  uint64_t v16 = __chkstk_darwin(v12);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *(int *)(v16 + 48);
  uint64_t v20 = &v10[v19];
  uint64_t v21 = a1 + v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v10, a1, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v20, v21, a5);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v10, v7);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v20, a5);
  uint64_t v22 = (void *)(v28 + *(void *)(*(void *)v28 + 96LL));
  uint64_t v23 = v22[1];
  uint64_t ObjectType = swift_getObjectType(*v22);
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  969LL,  ObjectType,  v23);
  uint64_t v25 = v30(v18, v14);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, a5);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v7);
  return v25;
}

uint64_t sub_100106BC4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return swift_release();
}

void static EventLoopFuture.reduce<A>(_:_:on:_:)()
{
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  sub_10010E164();
  swift_getObjectType(v8);
  uint64_t v9 = *(void *)(v0 + 80);
  sub_10009B648();
  EventLoop.makeSucceededFuture<A>(_:file:line:)();
  uint64_t v10 = (void *)sub_100019310((uint64_t)&unk_100283550, 64LL);
  v10[2] = v9;
  void v10[3] = v5;
  v10[4] = v3;
  v10[5] = v2;
  v10[6] = v1;
  v10[7] = v7;
  sub_10010DF3C();
  sub_100041B5C();
  EventLoopFuture.fold<A>(_:with:)();
  sub_10009B4FC();
  sub_100024F0C();
  sub_10002A580();
}

uint64_t sub_100106CA8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v11 = *(void *)(a7 - 8);
  __chkstk_darwin(a1);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_getObjectType(v14);
  a5(a1, a2);
  EventLoop.makeSucceededFuture<A>(_:file:line:)();
  uint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a7);
  return v16;
}

void static EventLoopFuture.reduce<A>(into:_:on:_:)()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v25 = v5;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t ObjectType = swift_getObjectType(v8);
  uint64_t v13 = *(void *)(v0 + 80);
  sub_10009B648();
  uint64_t v18 = EventLoop.makePromise<A>(of:file:line:)(v14, v15, v16, v17, 1046LL, ObjectType, v13, v7);
  uint64_t v19 = swift_allocBox(v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL))(v20, v11, v13);
  sub_10009B648();
  EventLoop.makeSucceededFuture<A>(_:file:line:)();
  uint64_t v21 = (void *)sub_100019310((uint64_t)&unk_100283578, 72LL);
  void v21[2] = v13;
  v21[3] = v2;
  v21[4] = v9;
  void v21[5] = v7;
  v21[6] = v25;
  v21[7] = v4;
  v21[8] = v19;
  sub_10010E590();
  sub_1000D94A0();
  sub_10001EDE0();
  EventLoopFuture.fold<A>(_:with:)();
  sub_100056B1C();
  uint64_t v22 = (void *)sub_100019310((uint64_t)&unk_1002835A0, 64LL);
  void v22[2] = v13;
  v22[3] = v2;
  v22[4] = v9;
  void v22[5] = v7;
  v22[6] = v18;
  v22[7] = v19;
  uint64_t v23 = sub_100019310((uint64_t)&unk_1002835C8, 32LL);
  *(void *)(v23 + 16) = sub_10010BF7C;
  *(void *)(v23 + 24) = v22;
  sub_10010E590();
  sub_10001EDE0();
  sub_100041B08();
  sub_1000A4BF4();
  sub_10002A4C8();
  sub_1000FF2F0();
  sub_100056B1C();
  uint64_t v24 = (void *)sub_100019310((uint64_t)&unk_1002835F0, 56LL);
  v24[2] = v13;
  void v24[3] = v2;
  v24[4] = v9;
  v24[5] = v7;
  v24[6] = v18;
  sub_10010E590();
  sub_100041B08();
  sub_10002A4C8();
  sub_1000D94A0();
  sub_1000FEE04();
  sub_10001ED6C();
  sub_10009B770();
  sub_100024F0C();
  sub_10009B4FC();
  sub_100092B84();
}

void sub_100106F6C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v11 = swift_projectBox(a7);
  uint64_t ObjectType = swift_getObjectType(a3);
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  1051LL,  ObjectType,  a4);
  swift_beginAccess(v11, v13, 33LL, 0LL);
  a5(v11, a2);
  swift_endAccess(v13);
  EventLoop.makeSucceededFuture<A>(_:file:line:)();
}

uint64_t sub_100107058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  uint64_t v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = swift_projectBox(v12);
  uint64_t ObjectType = swift_getObjectType(a1);
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  1057LL,  ObjectType,  a2);
  swift_beginAccess(v13, v17, 0LL, 0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, a5);
  EventLoopPromise.succeed(_:)((uint64_t)v11, a3, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, a5);
}

void sub_10010714C(uint64_t a1, void (*a2)(void))
{
}

void sub_100107168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = swift_getObjectType(a2);
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  1061LL,  ObjectType,  a3);
  EventLoopPromise.fail(_:)(a1);
}

uint64_t static EventLoopFuture.andAllSucceed(_:promise:)()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = *(void *)(v2 + 32);
  uint64_t v6 = *(void *)(v2 + 40);
  uint64_t v8 = sub_10002A444();
  if ((sub_10009B250(v8) & 1) != 0)
  {
    uint64_t v9 = sub_100019310((uint64_t)&unk_100283640, 24LL);
    *(void *)(v9 + 16) = *(void *)(v1 + 80);
    sub_10010E054();
    static EventLoopFuture._reduceSuccesses0<A>(_:_:_:onValue:)();
    return sub_10009B144(v9);
  }

  else
  {
    uint64_t v11 = (void *)sub_100019310((uint64_t)&unk_100283618, 56LL);
    void v11[2] = v1;
    void v11[3] = v3;
    v11[4] = v5;
    v11[5] = v7;
    v11[6] = v6;
    sub_10002A75C();
    swift_bridgeObjectRetain();
    sub_10009B28C();
    sub_10010E2DC((uint64_t)sub_10010BFE4);
    return sub_10009B144((uint64_t)v11);
  }

uint64_t sub_10010728C()
{
  uint64_t v0 = sub_10009B654();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1001072AC()
{
  return sub_10010BE7C((uint64_t (*)(void, void, void, void, void))sub_100102F0C);
}

uint64_t sub_1001072B8()
{
  uint64_t v0 = sub_100041B64();
  return swift_deallocObject(v0, v1, v2);
}

void sub_1001072D0()
{
}

uint64_t type metadata accessor for EventLoopFuture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventLoopFuture);
}

#error "100107420: call analysis failed (funcsize=499)"
#error "100107C74: call analysis failed (funcsize=499)"
void static EventLoopFuture._reduceSuccesses0<A>(_:_:_:onValue:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, char *);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  sub_1000353E0();
  uint64_t v59 = v1;
  uint64_t v57 = v5;
  uint64_t v58 = v6;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  sub_100092F74();
  sub_100018EC0(&qword_1002A9710);
  uint64_t v11 = sub_10010DED0();
  uint64_t v12 = sub_10010E3B4(v11);
  uint64_t v52 = *(void *)(v12 - 8);
  uint64_t v53 = v12;
  sub_1000706E4();
  __chkstk_darwin(v13);
  sub_10010E314();
  uint64_t v51 = *(void *)(v4 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = sub_10010E1FC((uint64_t)&v48 - v18);
  uint64_t v54 = v10;
  uint64_t v55 = v8;
  sub_10010E4E4( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoopFuture.swift",  117LL,  2LL,  1171LL,  v19);
  uint64_t v20 = sub_100019310((uint64_t)&unk_100283668, 24LL);
  uint64_t v24 = sub_10010DE74(v20, v21, v22, v23);
  *(void *)(v20 + 16) = v24;
  if (!v24)
  {
    sub_10010E428(0LL);
    sub_100041A88(v20);
    return;
  }

  uint64_t v49 = v17;
  uint64_t v61 = v0;
  uint64_t v25 = sub_10010E620();
  swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v25);
  sub_10010E56C();
  uint64_t v26 = sub_10010DD5C();
  EnumeratedSequence.makeIterator()(&v63, v26);
  sub_10010E36C();
  sub_10010E4D8();
  uint64_t v56 = v27;
  ((void (*)(void))EnumeratedSequence.Iterator.next())();
  uint64_t v28 = v62;
  if (!v62)
  {
LABEL_11:
    sub_100056B1C();
    sub_100019390();
    goto LABEL_12;
  }

  uint64_t v29 = v61;
  while (1)
  {
    uint64_t v30 = *(void *)(v28 + *(void *)(*(void *)v28 + 96LL) + 8);
    uint64_t v31 = sub_10002A444();
    uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t))(v30 + 16);
    sub_10009B28C();
    LOBYTE(v31) = v32(v31, v30);
    sub_10002A338();
    if ((v31 & 1) != 0) {
      break;
    }
LABEL_7:
    EventLoopFuture.hop(to:)(v54, v55);
    uint64_t v37 = (void *)sub_100019310((uint64_t)&unk_100283690, 72LL);
    v37[5] = sub_10010DD14(v37);
    v37[6] = v20;
    v37[7] = v2;
    v37[8] = v29;
    swift_retain();
    sub_1000A4BF4();
    sub_100041B5C();
    EventLoopFuture.whenComplete(_:)();
    sub_100024F0C();
    sub_10001EDD8();
    sub_10009B4FC();
LABEL_10:
    sub_10010E4D8();
    EnumeratedSequence.Iterator.next()(v56);
    uint64_t v29 = v61;
    uint64_t v28 = v62;
    if (!v62) {
      goto LABEL_11;
    }
  }

  uint64_t v33 = v28 + *(void *)(*(void *)v28 + 88LL);
  sub_1000487CC(v33, (uint64_t)&v60);
  uint64_t v34 = v52;
  sub_100085164(v3, v33, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 16));
  uint64_t v35 = sub_10010E45C();
  if (sub_10001D158(v35, v36, v4) == 1)
  {
    sub_10002A788(v3, *(uint64_t (**)(uint64_t, uint64_t))(v34 + 8));
    goto LABEL_7;
  }

  uint64_t v39 = v50;
  uint64_t v38 = v51;
  uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 32);
  v40(v50, v3, v4);
  uint64_t v41 = sub_10010E194();
  sub_100108C14(v41, v42, v43, v44, v20, v2, v45, v46);
  sub_10009B4FC();
  uint64_t v47 = v49;
  v40((uint64_t)v49, v39, v4);
  if (swift_getEnumCaseMultiPayload(v47, v4) != 1)
  {
    (*(void (**)(void *, uint64_t))(v38 + 8))(v47, v4);
    goto LABEL_10;
  }

  swift_bridgeObjectRelease();
  swift_errorRelease(*v47);
  sub_100056B1C();
LABEL_12:
  sub_10002A580();
}

void static EventLoopFuture.whenAllSucceed(_:on:)(uint64_t a1, uint64_t a2)
{
}

void static EventLoopFuture.whenAllSucceed(_:promise:)()
{
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v0 + 80);
  uint64_t v8 = type metadata accessor for Optional(0LL, v7);
  sub_1000706E4();
  __chkstk_darwin(v9);
  sub_1000EB780();
  uint64_t v10 = *(void *)(v4 + 32);
  uint64_t v11 = *(void *)(v4 + 40);
  uint64_t v12 = sub_10002A444();
  sub_10009B648();
  uint64_t v17 = EventLoop.makePromise<A>(of:file:line:)(v13, v14, v15, v16, 1134LL, v12, v13, v11);
  uint64_t v18 = sub_100019310((uint64_t)&unk_1002836B8, 24LL);
  sub_10001762C(v1, 1LL, 1LL, v7);
  uint64_t v19 = Array.count.getter(v6, v2);
  *(void *)(v18 + 16) = Array.init(repeating:count:)(v1, v19, v8);
  uint64_t v20 = sub_100019310((uint64_t)&unk_1002836E0, 32LL);
  *(void *)(v20 + 16) = v7;
  *(void *)(v20 + 24) = v18;
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 16);
  sub_10002A75C();
  if ((v21(v12, v11) & 1) != 0)
  {
    static EventLoopFuture._reduceSuccesses0<A>(_:_:_:onValue:)();
  }

  else
  {
    uint64_t v22 = (void *)sub_100019310((uint64_t)&unk_100283708, 72LL);
    void v22[2] = v2;
    v22[3] = v17;
    v22[4] = v6;
    void v22[5] = v10;
    v22[6] = v11;
    v22[7] = sub_10010C03C;
    v22[8] = v20;
    uint64_t v23 = *(void (**)(void (*)(), void *, uint64_t, uint64_t))(v11 + 24);
    sub_10002A674();
    swift_bridgeObjectRetain();
    sub_10009B28C();
    sub_1000D94A0();
    v23(sub_10010C048, v22, v12, v11);
    sub_10001ED6C();
  }

  uint64_t v24 = (void *)sub_100019310((uint64_t)&unk_100283730, 40LL);
  sub_10010DC48(v24);
  sub_10002A75C();
  ChannelPipeline.syncOperations.getter();
  sub_10002A4C8();
  sub_1000FEED0();
  sub_10002A524();
  sub_10009B770();
  sub_100024F0C();
  sub_10010E548();
  sub_10002A580();
}

uint64_t sub_1001088D0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Optional(0LL, a4);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v15[-v10 - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16LL))(&v15[-v10 - 8], a2, a4);
  sub_10001762C((uint64_t)v11, 0LL, 1LL, a4);
  swift_beginAccess(a3 + 16, v15, 33LL, 0LL);
  type metadata accessor for Array(0LL, v8);
  Array._makeMutableAndUnique()();
  uint64_t v12 = *(void *)(a3 + 16);
  sub_10010C764(a1, v12, v8);
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v9 + 40))( v12 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
  + *(void *)(v9 + 72) * a1,
    v11,
    v8);
  return swift_endAccess(v15);
}

uint64_t sub_1001089EC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*((_BYTE *)a1 + 8) == 1)
  {
    uint64_t v6 = *a1;
    swift_errorRetain(*a1);
    type metadata accessor for Array(0LL, a4);
    EventLoopPromise.fail(_:)(v6);
    return sub_100034F08(v6, 1);
  }

  else
  {
    uint64_t v9 = swift_beginAccess(a2 + 16, v18, 0LL, 0LL);
    uint64_t v17 = *(void *)(a2 + 16);
    __chkstk_darwin(v9);
    void v16[2] = a4;
    uint64_t v10 = type metadata accessor for Optional(255LL, a4);
    uint64_t v11 = type metadata accessor for Array(0LL, v10);
    swift_bridgeObjectRetain();
    uint64_t WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v11);
    uint64_t v14 = sub_10017507C( (void (*)(char *, uint64_t))sub_10010D0B0,  (uint64_t)v16,  v11,  a4,  (uint64_t)&type metadata for Never,  WitnessTable,  (uint64_t)&protocol witness table for Never,  v13);
    swift_bridgeObjectRelease();
    uint64_t v17 = v14;
    uint64_t v15 = type metadata accessor for Array(0LL, a4);
    EventLoopPromise.succeed(_:)((uint64_t)&v17, a3, v15);
    return swift_bridgeObjectRelease();
  }

uint64_t sub_100108B5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Optional(0LL, a2);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v11 - v7;
  (*(void (**)(char *, uint64_t))(v9 + 16))((char *)v11 - v7, a1);
  uint64_t result = sub_10001D158((uint64_t)v8, 1LL, a2);
  if ((_DWORD)result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(a2 - 8) + 32LL))(a3, v8, a2);
  }
  __break(1u);
  return result;
}

uint64_t sub_100108C14( uint64_t a1, uint64_t a2, void (*a3)(uint64_t, char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v23 = a3;
  uint64_t v12 = *(void *)(a8 - 8);
  __chkstk_darwin(a1);
  uint64_t v14 = &v24[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_100018EC0(&qword_1002A9710);
  uint64_t v15 = type metadata accessor for Result(0LL, a8);
  __chkstk_darwin(v15);
  uint64_t v17 = &v24[-v16 - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v18 + 16))(&v24[-v16 - 8], a2, v15);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    uint64_t v19 = *v17;
    swift_errorRetain(*v17);
    sub_100098B34(v19);
    swift_errorRelease(v19);
    return swift_errorRelease(v19);
  }

  else
  {
    uint64_t v21 = (uint64_t *)(a5 + 16);
    (*(void (**)(char *, void *, uint64_t))(v12 + 32))(v14, v17, a8);
    v23(a1, v14);
    uint64_t result = swift_beginAccess(v21, v24, 1LL, 0LL);
    uint64_t v22 = *v21 - 1;
    if (__OFSUB__(*v21, 1LL))
    {
      __break(1u);
    }

    else
    {
      *uint64_t v21 = v22;
      if (!v22) {
        sub_100098B34(0LL);
      }
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a8);
    }
  }

  return result;
}

uint64_t sub_100108DB8( uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    sub_100098B34(a1);
    return sub_100034F08(a1, 1);
  }

  else
  {
    uint64_t v7 = (uint64_t *)(a5 + 16);
    a3(a7);
    uint64_t result = swift_beginAccess(v7, v11, 1LL, 0LL);
    uint64_t v9 = *v7 - 1;
    if (__OFSUB__(*v7, 1LL))
    {
      __break(1u);
    }

    else
    {
      *uint64_t v7 = v9;
      if (!v9) {
        return sub_100098B34(0LL);
      }
    }
  }

  return result;
}

void static EventLoopFuture.andAllComplete(_:on:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_100108E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v14 = EventLoop.makePromise<A>(of:file:line:)(v9, v10, v11, v12, a4, v13, v9, a3);
  a5(a1, v14);
  sub_10002A3D4();
}

uint64_t static EventLoopFuture.andAllComplete(_:promise:)()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = *(void *)(v2 + 32);
  uint64_t v6 = *(void *)(v2 + 40);
  uint64_t v8 = sub_10002A444();
  if ((sub_10009B250(v8) & 1) != 0)
  {
    uint64_t v9 = sub_100019310((uint64_t)&unk_100283780, 24LL);
    *(void *)(v9 + 16) = *(void *)(v1 + 80);
    sub_10010E054();
    static EventLoopFuture._reduceCompletions0<A>(_:_:_:onResult:)();
    return sub_10009B144(v9);
  }

  else
  {
    uint64_t v11 = (void *)sub_100019310((uint64_t)&unk_100283758, 56LL);
    void v11[2] = v1;
    void v11[3] = v3;
    v11[4] = v5;
    v11[5] = v7;
    v11[6] = v6;
    sub_10002A75C();
    swift_bridgeObjectRetain();
    sub_10009B28C();
    sub_10010E2DC((uint64_t)sub_10010C080);
    return sub_10009B144((uint64_t)v11);
  }

void static EventLoopFuture._reduceCompletions0<A>(_:_:_:onResult:)()
{
  uint64_t v56 = v0;
  uint64_t v54 = v4;
  uint64_t v55 = v5;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  sub_100092F74();
  sub_100018EC0(&qword_1002A9710);
  uint64_t v10 = sub_10010DED0();
  uint64_t v50 = sub_10010E12C(v10);
  uint64_t v11 = *(void *)(v50 - 8);
  sub_100067F88();
  __chkstk_darwin(v12);
  sub_10010E314();
  uint64_t v51 = v2;
  uint64_t v48 = *(void *)(v2 - 8);
  sub_1000706E4();
  __chkstk_darwin(v13);
  sub_10010E1FC((uint64_t)&v47 - v14);
  sub_10002A6F4();
  uint64_t v52 = v9;
  uint64_t v53 = v7;
  sub_10010E4E4(v15, v16, v17, 1325LL, v18);
  uint64_t v19 = sub_100019310((uint64_t)&unk_100283668, 24LL);
  uint64_t v23 = sub_10010DE74(v19, v20, v21, v22);
  *(void *)(v19 + 16) = v23;
  if (v23)
  {
    uint64_t v49 = v11;
    uint64_t v24 = sub_10010E620();
    swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v24);
    sub_10010E56C();
    uint64_t v25 = sub_10010DD5C();
    EnumeratedSequence.makeIterator()(&v60, v25);
    uint64_t v26 = sub_10010E36C();
    sub_10010E4D8();
    EnumeratedSequence.Iterator.next()(v27);
    uint64_t v28 = v59;
    if (v59)
    {
      uint64_t v29 = v58;
      do
      {
        sub_10010E1AC();
        uint64_t v31 = *(void *)(v30 + 8);
        uint64_t v32 = sub_10002A444();
        uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 16);
        sub_10009B28C();
        LOBYTE(v31) = v33(v32, v31);
        sub_10002A338();
        if ((v31 & 1) != 0)
        {
          uint64_t v34 = v28 + *(void *)(*(void *)v28 + 88LL);
          sub_1000487CC(v34, (uint64_t)&v57);
          uint64_t v36 = v49;
          uint64_t v35 = v50;
          sub_10010E440(v3, v34, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 16));
          uint64_t v37 = sub_10010E45C();
          uint64_t v38 = v51;
          if (sub_10001D158(v37, v39, v51) != 1)
          {
            uint64_t v42 = v47;
            uint64_t v41 = v48;
            sub_10010E468(v47, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 32));
            uint64_t v43 = sub_10010E194();
            sub_100109750(v43, v44, v45, v46, v19);
            sub_10001EDD8();
            (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v38);
            goto LABEL_9;
          }

          (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v3, v35);
        }

        EventLoopFuture.hop(to:)(v52, v53);
        uint64_t v40 = (void *)sub_100019310((uint64_t)&unk_1002837A8, 72LL);
        v40[5] = sub_10010DD14(v40);
        v40[6] = v19;
        v40[7] = v1;
        v40[8] = v29;
        swift_retain();
        sub_100041B08();
        sub_100041B5C();
        EventLoopFuture.whenComplete(_:)();
        sub_100024F0C();
        sub_10002A5A4();
        sub_10001EDD8();
LABEL_9:
        sub_10010E4D8();
        EnumeratedSequence.Iterator.next()(v26);
        uint64_t v29 = v58;
        uint64_t v28 = v59;
      }

      while (v59);
    }

    sub_10009B4FC();
    sub_100019390();
    sub_10002A580();
  }

  else
  {
    sub_10010E428(0LL);
    sub_100041A88(v19);
  }

uint64_t sub_100109230()
{
  uint64_t v2 = v1;
  sub_10010E13C();
  uint64_t v4 = sub_100019310(v3, 24LL);
  *(void *)(v4 + 16) = *(void *)(v0 + 80);
  uint64_t v5 = sub_10010E4C4();
  v2(v5);
  return sub_10009B144(v4);
}

void static EventLoopFuture.whenAllComplete(_:on:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 80);
  sub_100018EC0(&qword_1002A9710);
  uint64_t v4 = type metadata accessor for Result(255LL, v3);
  type metadata accessor for Array(0LL, v4);
  sub_10009B648();
  sub_10010DFB8(v5, v6, v7, v8, 1269LL);
  sub_10010E66C();
  static EventLoopFuture.whenAllComplete(_:promise:)();
  sub_10002A3D4();
}

void static EventLoopFuture.whenAllComplete(_:promise:)()
{
  uint64_t v25 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v0 + 80);
  sub_100018EC0(&qword_1002A9710);
  uint64_t v7 = sub_10010E2FC(0LL);
  sub_1000706E4();
  __chkstk_darwin(v8);
  sub_1000EB780();
  uint64_t v9 = *(void *)(v3 + 32);
  uint64_t v10 = *(void *)(v3 + 40);
  uint64_t v11 = sub_10002A444();
  sub_10009B648();
  uint64_t v16 = EventLoop.makePromise<A>(of:file:line:)(v12, v13, v14, v15, 1285LL, v11, v12, v10);
  uint64_t v17 = sub_100019310((uint64_t)&unk_1002837D0, 24LL);
  unint64_t v18 = sub_10010C108();
  *uint64_t v1 = swift_allocError(&type metadata for OperationPlaceholderError, v18, 0LL, 0LL);
  sub_10010E5AC((uint64_t)v1, v7);
  uint64_t v19 = Array.count.getter(v5, v25);
  *(void *)(v17 + 16) = Array.init(repeating:count:)(v1, v19, v7);
  uint64_t v20 = sub_100019310((uint64_t)&unk_1002837F8, 32LL);
  *(void *)(v20 + 16) = v6;
  *(void *)(v20 + 24) = v17;
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 16);
  sub_10002A75C();
  if ((v21(v11, v10) & 1) != 0)
  {
    static EventLoopFuture._reduceCompletions0<A>(_:_:_:onResult:)();
  }

  else
  {
    uint64_t v22 = (void *)sub_100019310((uint64_t)&unk_100283820, 72LL);
    void v22[2] = v25;
    v22[3] = v16;
    v22[4] = v5;
    void v22[5] = v9;
    v22[6] = v10;
    v22[7] = sub_10010C144;
    v22[8] = v20;
    uint64_t v23 = *(void (**)(void (*)(), void *, uint64_t, uint64_t))(v10 + 24);
    sub_10002A674();
    swift_bridgeObjectRetain();
    sub_10009B28C();
    sub_1000A4BF4();
    v23(sub_10010C17C, v22, v11, v10);
    sub_10001ED6C();
  }

  uint64_t v24 = (void *)sub_100019310((uint64_t)&unk_100283848, 40LL);
  sub_10010DC48(v24);
  sub_10002A75C();
  ChannelPipeline.syncOperations.getter();
  sub_10002A4C8();
  sub_1001008E0();
  sub_10002A524();
  sub_100056B1C();
  sub_100024F0C();
  sub_10010E548();
  sub_10002A580();
}

uint64_t sub_100109524(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Result(255LL, a4);
  type metadata accessor for Array(0LL, v8);
  Array._makeMutableAndUnique()();
  uint64_t v9 = *(void *)(a3 + 16);
  sub_10010C764(a1, v9, v8);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 24LL))( v9 + ((*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL))
  + *(void *)(*(void *)(v8 - 8) + 72LL) * a1,
    a2,
    v8);
  return swift_endAccess(v11);
}

void sub_100109600( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))
{
}

uint64_t sub_10010963C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*((_BYTE *)a1 + 8) == 1)
  {
    uint64_t v6 = *a1;
    swift_errorRetain(*a1);
    sub_100018EC0(&qword_1002A9710);
    uint64_t v7 = type metadata accessor for Result(255LL, a4);
    type metadata accessor for Array(0LL, v7);
    EventLoopPromise.fail(_:)(v6);
    return sub_100034F08(v6, 1);
  }

  else
  {
    swift_beginAccess(a2 + 16, v13, 0LL, 0LL);
    uint64_t v12 = *(void *)(a2 + 16);
    swift_bridgeObjectRetain();
    sub_100018EC0(&qword_1002A9710);
    uint64_t v10 = type metadata accessor for Result(255LL, a4);
    uint64_t v11 = type metadata accessor for Array(0LL, v10);
    EventLoopPromise.succeed(_:)((uint64_t)&v12, a3, v11);
    return swift_bridgeObjectRelease();
  }

uint64_t sub_100109750(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (void *)(a5 + 16);
  a3();
  uint64_t result = swift_beginAccess(v6, v11, 1LL, 0LL);
  uint64_t v8 = *(void *)(a5 + 16);
  BOOL v9 = __OFSUB__(v8, 1LL);
  uint64_t v10 = v8 - 1;
  if (v9)
  {
    __break(1u);
  }

  else
  {
    *uint64_t v6 = v10;
    if (!v10) {
      return sub_100098B34(0LL);
    }
  }

  return result;
}

void sub_1001097C8()
{
}

void EventLoopFuture.unwrap<A>(orError:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = sub_100019310((uint64_t)&unk_100283870, 32LL);
  *(void *)(v4 + 16) = *(void *)(*(void *)(v3 + 80) + 16LL);
  *(void *)(v4 + 24) = a1;
  swift_errorRetain(a1);
  sub_10002A6F4();
  EventLoopFuture.flatMapThrowing<A>(file:line:_:)();
  sub_10002A51C();
  sub_1000193B8();
}

uint64_t sub_10010985C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Optional(0LL, a3);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v14 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v14 - v10, a1, v8);
  uint64_t v12 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_willThrow(v12);
  return swift_errorRetain(a2);
}

void EventLoopFuture.unwrap<A>(orReplace:)(uint64_t a1)
{
  uint64_t v2 = *(char **)(*(void *)(*(void *)v1 + 80LL) + 16LL);
  uint64_t v3 = *((void *)v2 - 1);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(a1);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100085164((uint64_t)v5, v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  uint64_t v7 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = (v7 + 24) & ~v7;
  uint64_t v9 = swift_allocObject(&unk_100283898, v8 + v4, v7 | 7);
  *(void *)(v9 + 16) = v2;
  sub_100085164(v9 + v8, (uint64_t)v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
  sub_10002A6F4();
  EventLoopFuture.map<A>(file:line:_:)(v10, v11, v12, 1445LL, v13, v9, v2);
  sub_10002A51C();
  sub_10002A3D4();
}

uint64_t sub_100109A1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Optional(0LL, a3);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v13 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v13 - v10, a1, v8);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16LL))(a4, a2, a3);
}

void EventLoopFuture.unwrap<A>(orElse:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = (void *)sub_100019310((uint64_t)&unk_1002838C0, 40LL);
  uint64_t v7 = *(char **)(*(void *)(v5 + 80) + 16LL);
  _OWORD v6[2] = v7;
  v6[3] = a1;
  v6[4] = a2;
  sub_10002A4C8();
  sub_10002A6F4();
  EventLoopFuture.map<A>(file:line:_:)(v8, v9, v10, 1469LL, v11, (uint64_t)v6, v7);
  sub_10002A5A4();
  sub_10002A3D4();
}

uint64_t sub_100109B80@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Optional(0LL, a3);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v14 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v14 - v10, a1, v8);
  uint64_t v12 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return a2(v12);
}

void EventLoopFuture.flatMapBlocking<A>(onto:_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)sub_100019310((uint64_t)&unk_1002838E8, 56LL);
  void v9[2] = a4;
  void v9[3] = a1;
  v9[4] = v4;
  v9[5] = a2;
  v9[6] = a3;
  id v10 = a1;
  ChannelPipeline.syncOperations.getter();
  sub_100041B5C();
  sub_10002A6F4();
  EventLoopFuture.flatMap<A>(file:line:_:)();
  sub_10001ED6C();
  sub_10002A3D4();
}

uint64_t sub_100109CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v23[1] = a2;
  uint64_t v9 = *(void *)(*(void *)a3 + 80LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(a1);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = (uint64_t *)(v14 + *(void *)(v13 + 96));
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  (*(void (**)(char *))(v10 + 16))(v12);
  uint64_t v18 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v19 = (v18 + 48) & ~v18;
  uint64_t v20 = (char *)swift_allocObject(&unk_100284B98, v19 + v11, v18 | 7);
  *((void *)v20 + 2) = v9;
  *((void *)v20 + 3) = a6;
  *((void *)v20 + 4) = a4;
  *((void *)v20 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v20[v19], v12, v9);
  swift_retain();
  uint64_t v21 = OS_dispatch_queue.asyncWithFuture<A>(eventLoop:_:)(v16, v17, (uint64_t)sub_10010D054, (uint64_t)v20, a6);
  swift_release();
  return v21;
}

uint64_t EventLoopFuture.whenSuccessBlocking(onto:_:)()
{
  return sub_10010A290();
}

uint64_t sub_100109E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = a3;
  uint64_t v31 = a2;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v30 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v28 = *(void *)(v11 - 8);
  uint64_t v29 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(void *)(a5 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))( (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  a5);
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (v17 + 40) & ~v17;
  uint64_t v19 = (char *)swift_allocObject(&unk_100284B48, v18 + v16, v17 | 7);
  uint64_t v20 = v27;
  *((void *)v19 + 2) = a5;
  *((void *)v19 + 3) = v20;
  *((void *)v19 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))( &v19[v18],  (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a5);
  aBlock[4] = sub_10010CFD0;
  void aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000169C8;
  aBlock[3] = &unk_100284B60;
  uint64_t v21 = _Block_copy(aBlock);
  uint64_t v22 = swift_retain();
  static DispatchQoS.unspecified.getter(v22);
  uint64_t v32 = _swiftEmptyArrayStorage;
  unint64_t v23 = sub_100025C10();
  uint64_t v24 = sub_1000175B0(&qword_1002A9118);
  unint64_t v25 = sub_100025C50();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v24, v25, v8, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v10, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v29);
  return swift_release();
}

uint64_t EventLoopFuture.whenFailureBlocking(onto:_:)()
{
  uint64_t v3 = (void *)sub_100019310((uint64_t)&unk_100283938, 40LL);
  v3[2] = v2;
  v3[3] = v1;
  v3[4] = v0;
  id v4 = v2;
  sub_10002A4C8();
  EventLoopFuture.whenFailure(_:)((uint64_t)sub_10010C2EC, (uint64_t)v3);
  return sub_10009B134((uint64_t)v3);
}

uint64_t sub_10010A0AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = (void *)swift_allocObject(&unk_100284AF8, 40LL, 7LL);
  uint64_t v15[2] = a3;
  v15[3] = a4;
  v15[4] = a1;
  aBlock[4] = sub_10010CF60;
  void aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000169C8;
  aBlock[3] = &unk_100284B10;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v17 = swift_errorRetain(a1);
  static DispatchQoS.unspecified.getter(v17);
  unint64_t v23 = _swiftEmptyArrayStorage;
  unint64_t v18 = sub_100025C10();
  uint64_t v19 = sub_1000175B0(&qword_1002A9118);
  unint64_t v20 = sub_100025C50();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v19, v20, v7, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t EventLoopFuture.whenCompleteBlocking(onto:_:)()
{
  return sub_10010A290();
}

uint64_t sub_10010A290()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = *v0;
  uint64_t v13 = (void *)sub_100019310(v12, 48LL);
  void v13[2] = *(void *)(v11 + 80);
  v13[3] = v10;
  v13[4] = v8;
  v13[5] = v6;
  id v14 = v10;
  sub_10002A674();
  v2(v4, v13);
  return sub_10009B144((uint64_t)v13);
}

uint64_t sub_10010A2F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v29 = a3;
  uint64_t v33 = a2;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v32 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v30 = *(void *)(v11 - 8);
  uint64_t v31 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100018EC0(&qword_1002A9710);
  uint64_t v14 = type metadata accessor for Result(0LL, a5);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14);
  unint64_t v18 = (char *)&v29 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)&v29 - v17, a1, v14);
  uint64_t v19 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v20 = (v19 + 40) & ~v19;
  uint64_t v21 = (char *)swift_allocObject(&unk_100284AA8, v20 + v16, v19 | 7);
  uint64_t v22 = v29;
  *((void *)v21 + 2) = a5;
  *((void *)v21 + 3) = v22;
  *((void *)v21 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v21[v20], v18, v14);
  aBlock[4] = sub_10010CEE8;
  void aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000169C8;
  aBlock[3] = &unk_100284AC0;
  unint64_t v23 = _Block_copy(aBlock);
  uint64_t v24 = swift_retain();
  static DispatchQoS.unspecified.getter(v24);
  uint64_t v34 = _swiftEmptyArrayStorage;
  unint64_t v25 = sub_100025C10();
  uint64_t v26 = sub_1000175B0(&qword_1002A9118);
  unint64_t v27 = sub_100025C50();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v26, v27, v8, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v10, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v31);
  return swift_release();
}

void _NIOEventLoopFutureIdentifier.hash(into:)(int a1, Swift::UInt a2)
{
}

Swift::Int _NIOEventLoopFutureIdentifier.hashValue.getter(Swift::UInt a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_10010A5B8()
{
  return _NIOEventLoopFutureIdentifier.hashValue.getter(*v0);
}

void sub_10010A5C0(int a1)
{
}

Swift::Int sub_10010A5C8()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10010A608(void *a1, void *a2)
{
  return static _NIOEventLoopFutureIdentifier.__derived_struct_equals(_:_:)(*a1, *a2);
}

void sub_10010A614(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (pthread_cond_t *)swift_slowAlloc(48LL, -1LL);
  v2[4] = v4;
  v2[2] = a1;
  uint64_t v5 = type metadata accessor for Lock();
  sub_100019310(v5, 24LL);
  v2[3] = Lock.init()();
  if (pthread_cond_init(v4, 0LL)) {
    __break(1u);
  }
  else {
    sub_1000193B8();
  }
}

uint64_t sub_10010A684()
{
  return sub_10010658C(v0[2], v0[3], v0[4]);
}

uint64_t sub_10010A694()
{
  return sub_100104CF0(*(uint64_t **)(v0 + 16), *(void (**)(char *))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10010A6A4()
{
  return sub_100103DA8( *(uint64_t **)(v0 + 16),  *(void *)(v0 + 24),  *(uint64_t (**)(void))(v0 + 32),  *(void *)(v0 + 40));
}

uint64_t sub_10010A6B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  int v8 = *((_DWORD *)v3 + 2);
  uint64_t v9 = v3[2];
  int v10 = *((_DWORD *)v3 + 6);
  uint64_t v11 = v3[4];
  uint64_t v12 = v3[5];
  sub_10010E284();
  uint64_t v14 = sub_10000BF90(v13);
  uint64_t v15 = (unsigned int *)v14;
  if (!a2) {
    goto LABEL_14;
  }
  if (!a3) {
    goto LABEL_15;
  }
  if (a3 < 0) {
LABEL_17:
  }
    __break(1u);
  if (!v14)
  {
LABEL_14:
    a3 = 0LL;
    goto LABEL_15;
  }

  uint64_t v25 = v11;
  int v26 = v8;
  uint64_t v27 = v7;
  uint64_t v16 = 0LL;
  do
  {
    uint64_t v17 = *(void *)(v15 + 1);
    uint64_t v18 = sub_10000C008((uint64_t)v15);
    uint64_t v19 = *v15;
    uint64_t v20 = sub_10000C038(0LL);
    if (__OFSUB__(v19, v20))
    {
      __break(1u);
      goto LABEL_17;
    }

    if (v18) {
      uint64_t v21 = v18 + v19 - v20;
    }
    else {
      uint64_t v21 = 0LL;
    }
    sub_10010E284();
    unint64_t v23 = sub_10000BFC0(v22, v15);
    uint64_t v15 = (unsigned int *)v23;
    *(void *)a2 = v17;
    *(void *)(a2 + 8) = v18;
    *(void *)(a2 + 16) = v21;
    *(_BYTE *)(a2 + 24) = 0;
    if (a3 - 1 == v16) {
      goto LABEL_13;
    }
    a2 += 32LL;
    ++v16;
  }

  while (v23);
  a3 = v16;
LABEL_13:
  uint64_t v7 = v27;
  int v8 = v26;
  uint64_t v11 = v25;
LABEL_15:
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 4sub_1000B58F0(v0, 0) = v12;
  *(void *)(a1 + 48) = v15;
  return a3;
}

uint64_t *sub_10010A81C(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a2)
  {
    a3 = 0LL;
    goto LABEL_25;
  }

  if (!a3)
  {
LABEL_25:
    *uint64_t result = a4;
    result[1] = a5;
    result[2] = a6;
    result[3] = a3;
    return (uint64_t *)a3;
  }

  if (a3 < 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  if (a4)
  {
    uint64_t v6 = 0LL;
    BOOL v8 = a6 - a5 == 0x8000000000000000LL && a4 == -1;
    while (1)
    {
      if (a5)
      {
        if (v8) {
          goto LABEL_29;
        }
        if (v6 == (a6 - a5) / a4)
        {
LABEL_24:
          a3 = v6;
          goto LABEL_25;
        }
      }

      else if (!v6)
      {
        goto LABEL_24;
      }

      uint64_t v9 = v6 * a4;
      uint64_t v10 = ++v6 * a4;
      if (v10 < v9) {
        goto LABEL_28;
      }
      uint64_t v11 = a5 + v9;
      uint64_t v12 = a5 + v10;
      if (!a5)
      {
        uint64_t v12 = 0LL;
        uint64_t v11 = 0LL;
      }

      *a2 = v11;
      a2[1] = v12;
      a2 += 2;
      if (a3 == v6) {
        goto LABEL_25;
      }
    }

    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

void sub_10010A8E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  a25 = v27;
  a26 = v30;
  uint64_t v32 = v31;
  uint64_t v33 = *v26;
  uint64_t v34 = *((unsigned int *)v26 + 2);
  uint64_t v35 = *(uint64_t *)((char *)v26 + 12);
  uint64_t v36 = *((unsigned __int16 *)v26 + 10);
  uint64_t v37 = *((unsigned __int8 *)v26 + 22);
  uint64_t v39 = v26[3];
  uint64_t v38 = v26[4];
  if (!v28) {
    goto LABEL_5;
  }
  uint64_t v40 = v29;
  if (!v29) {
    goto LABEL_5;
  }
  if (v29 < 0) {
    goto LABEL_24;
  }
  if (v38 == v39)
  {
LABEL_5:
    uint64_t v41 = v39;
LABEL_6:
    *(void *)uint64_t v32 = v33;
    *(_DWORD *)(v32 + 8) = v34;
    *(void *)(v32 + 12) = v35;
    *(_WORD *)(v32 + 2sub_1000B58F0(v0, 0) = v36;
    *(_BYTE *)(v32 + 22) = v37;
    *(void *)(v32 + 24) = v39;
    *(void *)(v32 + 32) = v38;
    *(void *)(v32 + 4sub_1000B58F0(v0, 0) = v41;
    sub_100019328();
    return;
  }

  uint64_t v48 = v35;
  uint64_t v42 = (v35 - v34);
  if (v35 >= v34)
  {
    uint64_t v43 = v28;
    sub_1000487CC(v33 + 24, (uint64_t)&a12);
    uint64_t v35 = v48;
    if (v38 <= v39)
    {
LABEL_19:
      __break(1u);
LABEL_20:
      uint64_t v41 = v38;
      goto LABEL_6;
    }

    uint64_t v44 = *(void *)(v33 + 24) + (v37 | (v36 << 8)) + v34;
    uint64_t v45 = v40 - 1;
    uint64_t v41 = v39 + 1;
    while (1)
    {
      uint64_t v46 = v41 - 1 - v34;
      if (__OFSUB__(v41 - 1, v34)) {
        break;
      }
      if (v46 < 0) {
        goto LABEL_22;
      }
      if (v46 >= v42) {
        goto LABEL_23;
      }
      *uint64_t v43 = *(_BYTE *)(v44 + v46);
      if (!v45) {
        goto LABEL_6;
      }
      if (v38 == v41) {
        goto LABEL_20;
      }
      ++v43;
      --v45;
      BOOL v47 = v41 >= v39 && v41 < v38;
      ++v41;
      if (!v47) {
        goto LABEL_19;
      }
    }

    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }

  __break(1u);
}

void sub_10010AA08()
{
  char v4 = v3;
  uint64_t v5 = v2;
  uint64_t v7 = v6;
  if (!v0)
  {
LABEL_11:
    unint64_t v8 = 0LL;
    goto LABEL_14;
  }

  unint64_t v8 = v1;
  if (!v1)
  {
LABEL_14:
    *(void *)uint64_t v7 = v5;
    *(_BYTE *)(v7 + 8) = v4;
    *(void *)(v7 + 16) = v8;
    sub_10002A580();
    return;
  }

  if ((v1 & 0x8000000000000000LL) == 0)
  {
    if (*(void *)(v2 + 16))
    {
      uint64_t v9 = v0;
      uint64_t v10 = (uint64_t *)(v2 + 56);
      unint64_t v11 = 1LL;
      while (1)
      {
        uint64_t v12 = *(v10 - 1);
        uint64_t v13 = *v10;
        uint64_t v14 = *(v10 - 2);
        *uint64_t v9 = *(v10 - 3);
        v9[1] = v14;
        void v9[2] = v12;
        void v9[3] = v13;
        if (v8 == v11) {
          break;
        }
        unint64_t v15 = *(void *)(v5 + 16);
        if (v11 == v15)
        {
          unint64_t v8 = v11;
          break;
        }

        v10 += 4;
        swift_bridgeObjectRetain();
        sub_100077D1C();
        v9 += 4;
        if (v11++ >= v15)
        {
          __break(1u);
          goto LABEL_11;
        }
      }

      swift_bridgeObjectRetain();
      sub_100077D1C();
      goto LABEL_14;
    }

    goto LABEL_11;
  }

  __break(1u);
}

void sub_10010AAC4()
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v7 = v6;
  if (!v0 || !v1) {
    goto LABEL_5;
  }
  if ((v1 & 0x8000000000000000LL) == 0)
  {
    unint64_t v8 = *(void *)(v2 + 16);
    if (v8 == v3)
    {
LABEL_5:
      *uint64_t v7 = v5;
      v7[1] = v4;
      sub_100023E74();
      return;
    }

    uint64_t v9 = v0;
    uint64_t v10 = 0LL;
    uint64_t v11 = v1 - 1;
    uint64_t v12 = v2 + 16 * v3 + 32;
    while (1)
    {
      uint64_t v13 = v10;
      if (v4 + v10 >= v8) {
        break;
      }
      __int128 v14 = *(_OWORD *)(v12 + 16 * v10);
      *(_OWORD *)(v9 + 16 * v1sub_1000B58F0(v0, 0) = v14;
      if (v11 == v10)
      {
        swift_unknownObjectRetain(v14);
        v4 += v13 + 1;
        goto LABEL_5;
      }

      swift_unknownObjectRetain(v14);
      unint64_t v8 = *(void *)(v5 + 16);
      uint64_t v10 = v13 + 1;
      if (v4 + v13 + 1 == v8)
      {
        v4 += v13 + 1;
        goto LABEL_5;
      }
    }

    __break(1u);
  }

  __break(1u);
}

uint64_t sub_10010AB8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a5 < 0) {
    goto LABEL_31;
  }
  if (HIDWORD(a5)) {
    goto LABEL_30;
  }
  if (!a2)
  {
    a3 = 0LL;
    *(void *)a1 = a4;
    *(void *)(a1 + 8) = a5;
    *(void *)(a1 + 16) = a6;
    *(_DWORD *)(a1 + 24) = a5;
    *(_DWORD *)(a1 + 28) = 0x1FFFFFF;
    return a3;
  }

  if (!a3)
  {
    BOOL v11 = 1;
    LODWORD(v8) = a5;
LABEL_23:
    *(void *)a1 = a4;
    *(void *)(a1 + 8) = a5;
    *(void *)(a1 + 16) = a6;
    *(_DWORD *)(a1 + 24) = v8;
    *(_WORD *)(a1 + 28) = -1;
    *(_BYTE *)(a1 + 3sub_1000B58F0(v0, 0) = -1;
LABEL_25:
    *(_BYTE *)(a1 + 31) = v11;
    return a3;
  }

  if (a3 < 0) {
    goto LABEL_28;
  }
  if (a6 < 0)
  {
LABEL_31:
    sub_100034FD0();
    sub_100035154();
    goto LABEL_32;
  }

  if (!HIDWORD(a6))
  {
    uint64_t v6 = 0LL;
    if ((_DWORD)a5 == (_DWORD)a6 && a6 >= a5)
    {
      BOOL v11 = 1;
LABEL_24:
      *(void *)a1 = a4;
      *(void *)(a1 + 8) = a5;
      *(void *)(a1 + 16) = a6;
      *(_DWORD *)(a1 + 24) = a6;
      *(_WORD *)(a1 + 28) = -1;
      *(_BYTE *)(a1 + 3sub_1000B58F0(v0, 0) = -1;
      a3 = v6;
      goto LABEL_25;
    }

    LODWORD(v8) = a5;
    while (1)
    {
      unint64_t v9 = *(void *)(a4 + 16);
      uint64_t v10 = (_BYTE *)(a4 + 32 + 2LL * v8);
      if ((v10[1] & 1) != 0) {
        goto LABEL_29;
      }
      uint64_t v8 = (v9 - 1) & (v8 + 1LL);
      if (HIDWORD(v8)) {
        goto LABEL_30;
      }
      BOOL v11 = v8 >= a5;
      *(_BYTE *)(a2 + v6) = *v10;
      if (a3 - 1 == v6) {
        goto LABEL_23;
      }
      ++v6;
      if ((_DWORD)v8 == (_DWORD)a6 && a6 < a5 != v8 >= a5) {
        goto LABEL_24;
      }
    }

    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
  }

void *sub_10010AD20(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1LL;
  uint64_t v6 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0LL;
    a3 = 0LL;
LABEL_36:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }

  if (!a3)
  {
    int64_t v8 = 0LL;
    goto LABEL_36;
  }

  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  int64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_19:
    ++v9;
    *a2++ = *(void *)(*(void *)(a4 + 48) + 8 * v12);
    if (v9 == a3) {
      goto LABEL_36;
    }
  }

  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_38;
  }

  if (v13 >= v10) {
    goto LABEL_31;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_18;
  }
  v8 += 2LL;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v13;
    goto LABEL_35;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_14:
    int64_t v13 = v8;
LABEL_18:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_19;
  }

  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_31;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_17:
    int64_t v13 = v15;
    goto LABEL_18;
  }

  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v13 + 2;
    goto LABEL_35;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_14;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_31:
    unint64_t v7 = 0LL;
LABEL_35:
    a3 = v9;
    goto LABEL_36;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0LL;
      int64_t v8 = v10 - 1;
      goto LABEL_35;
    }

    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }

LABEL_39:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_10010AEB4( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  int v7 = a7;
  uint64_t v11 = result;
  unint64_t v12 = HIWORD(a7);
  unint64_t v13 = HIDWORD(a7);
  if (!a2)
  {
    uint64_t v15 = 0LL;
    uint64_t result = 0LL;
    goto LABEL_16;
  }

  uint64_t v14 = a3;
  if (!a3)
  {
    uint64_t v15 = 0LL;
LABEL_15:
    uint64_t result = v14;
    goto LABEL_16;
  }

  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v15 = a4;
  uint64_t result = a4;
  if (!a4)
  {
LABEL_16:
    *(void *)uint64_t v11 = a4;
    *(void *)(v11 + 8) = a5;
    *(void *)(v11 + 16) = a6;
    *(_DWORD *)(v11 + 24) = v7;
    *(_BYTE *)(v11 + 3sub_1000B58F0(v0, 0) = v12;
    *(_WORD *)(v11 + 28) = v13;
    *(void *)(v11 + 32) = v15;
    return result;
  }

  if (a4 >= 1)
  {
    *(void *)a2 = a5;
    *(void *)(a2 + 8) = a6;
    *(_DWORD *)(a2 + 16) = a7;
    *(_BYTE *)(a2 + 22) = BYTE6(a7);
    *(_WORD *)(a2 + 2sub_1000B58F0(v0, 0) = WORD2(a7);
    if (a3 != 1)
    {
      uint64_t v16 = a2 + 40;
      uint64_t v17 = 1LL;
      while (a4 != v17)
      {
        ++v17;
        *(void *)(v16 - 16) = a5;
        *(void *)(v16 - 8) = a6;
        *(_DWORD *)uint64_t v16 = v7;
        *(_BYTE *)(v16 + 6) = v12;
        *(_WORD *)(v16 + 4) = v13;
        swift_retain(a5);
        v16 += 24LL;
        if (v14 == v17) {
          goto LABEL_14;
        }
      }

      uint64_t v14 = a4;
    }

uint64_t sub_10010AFC8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v11 = result;
  if (!a2)
  {
    uint64_t v13 = 0LL;
    uint64_t result = 0LL;
    goto LABEL_16;
  }

  uint64_t v12 = a3;
  if (!a3)
  {
    uint64_t v13 = 0LL;
LABEL_15:
    uint64_t result = v12;
    goto LABEL_16;
  }

  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v13 = a4;
  uint64_t result = a4;
  if (!a4)
  {
LABEL_16:
    *(void *)uint64_t v11 = a4;
    *(void *)(v11 + 8) = a5;
    *(void *)(v11 + 16) = a6;
    *(_BYTE *)(v11 + 24) = a7;
    *(void *)(v11 + 32) = v13;
    return result;
  }

  if (a4 >= 1)
  {
    *(void *)a2 = a5;
    *(void *)(a2 + 8) = a6;
    *(_BYTE *)(a2 + 16) = a7;
    if (a3 != 1)
    {
      uint64_t v14 = (_BYTE *)(a2 + 40);
      uint64_t v15 = 1LL;
      while (a4 != v15)
      {
        ++v15;
        *((void *)v14 - 2) = a5;
        *((void *)v14 - 1) = a6;
        *uint64_t v14 = a7;
        v14 += 24;
        sub_100034D48(a5, a6);
        if (v12 == v15) {
          goto LABEL_14;
        }
      }

      uint64_t v12 = a4;
    }

void sub_10010B0C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  __int128 v6 = *(_OWORD *)v3;
  __int128 v7 = *((_OWORD *)v3 + 1);
  __int128 v8 = *((_OWORD *)v3 + 2);
  __int128 v9 = *((_OWORD *)v3 + 3);
  uint64_t v10 = v3[8];
  if (!a2)
  {
    uint64_t v12 = 0LL;
    goto LABEL_16;
  }

  uint64_t v11 = a3;
  if (!a3)
  {
    uint64_t v12 = 0LL;
    goto LABEL_16;
  }

  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v12 = v6;
  if (!(void)v6)
  {
LABEL_16:
    *(_OWORD *)a1 = v6;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 48) = v9;
    *(void *)(a1 + 64) = v10;
    *(void *)(a1 + 72) = v12;
    return;
  }

  __int128 v16 = v9;
  __int128 v17 = v8;
  __int128 v18 = v7;
  __int128 v19 = v6;
  sub_10010D67C((uint64_t)(v4 + 1), (uint64_t)v20, &qword_1002AA510);
  if (v12 >= 1)
  {
    sub_10010D67C((uint64_t)v20, a2, &qword_1002AA510);
    if (v11 != 1)
    {
      uint64_t v14 = a2 + 64;
      uint64_t v15 = 1LL;
      while (v12 != v15)
      {
        ++v15;
        sub_10010D67C((uint64_t)v20, v14, &qword_1002AA510);
        sub_10010C8E0(v4);
        v14 += 64LL;
        if (v11 == v15) {
          goto LABEL_15;
        }
      }

      uint64_t v11 = v12;
    }

void sub_10010B1F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  a25 = v26;
  a26 = v30;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v35 = v29;
  uint64_t v37 = v36;
  if (!v27)
  {
    uint64_t v39 = 0LL;
    goto LABEL_23;
  }

  unint64_t v38 = v28;
  if (!v28)
  {
    uint64_t v39 = 0LL;
    goto LABEL_23;
  }

  if ((v28 & 0x8000000000000000LL) != 0)
  {
LABEL_28:
    __break(1u);
  }

  else if (!(v29 >> 62))
  {
    uint64_t v39 = *(void *)((v29 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    goto LABEL_6;
  }

  if (v35 < 0) {
    uint64_t v43 = v35;
  }
  else {
    uint64_t v43 = v35 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t v44 = v27;
  swift_bridgeObjectRetain();
  uint64_t v39 = _CocoaArrayWrapper.endIndex.getter(v43);
  sub_100023EEC();
  uint64_t v27 = v44;
LABEL_6:
  if (v39)
  {
    unint64_t v40 = 0LL;
    uint64_t v41 = 1LL;
    unint64_t v45 = v38;
    while (2)
    {
      uint64_t v46 = v41;
      BOOL v47 = v27;
      unint64_t v38 = v40;
      while (1)
      {
        if ((v35 & 0xC000000000000001LL) != 0)
        {
          uint64_t v42 = specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v35);
        }

        else
        {
          if ((v38 & 0x8000000000000000LL) != 0)
          {
            __break(1u);
LABEL_26:
            __break(1u);
LABEL_27:
            __break(1u);
            goto LABEL_28;
          }

          if (v38 >= *(void *)((v35 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
            goto LABEL_26;
          }
          uint64_t v42 = *(void *)(v35 + 8 * v38 + 32);
          sub_1000D94A0();
        }

        unint64_t v40 = v38 + 1;
        if (__OFADD__(v38, 1LL)) {
          goto LABEL_27;
        }
        a14 = v42;
        if ((v34(&a14) & 1) != 0) {
          break;
        }
        sub_10009B770();
        ++v38;
        if (v40 == v39) {
          goto LABEL_23;
        }
      }

      *BOOL v47 = v42;
      if (v46 == v45)
      {
        uint64_t v39 = v38 + 1;
      }

      else
      {
        uint64_t v27 = v47 + 1;
        uint64_t v41 = v46 + 1;
        if (v40 != v39) {
          continue;
        }
      }

      break;
    }
  }

void sub_10010B364()
{
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 56;
  sub_10010DDB4();
  if (v9 && (uint64_t v10 = v8) != 0)
  {
    if (v8 < 0)
    {
LABEL_30:
      __break(1u);
    }

    else
    {
      sub_10010DB9C();
      if (!v2) {
        goto LABEL_6;
      }
LABEL_5:
      sub_10010E22C();
      while (1)
      {
        ++v1;
        uint64_t v13 = (void *)(*(void *)(v6 + 48) + 16 * v11);
        uint64_t v14 = v13[1];
        *uint64_t v0 = *v13;
        v0[1] = v14;
        if (v1 == v10)
        {
          swift_bridgeObjectRetain();
          goto LABEL_28;
        }

        v0 += 2;
        swift_bridgeObjectRetain();
        if (v2) {
          goto LABEL_5;
        }
LABEL_6:
        uint64_t v12 = v4 + 1;
        if (__OFADD__(v4, 1LL))
        {
          __break(1u);
          goto LABEL_30;
        }

        if (v12 >= v3) {
          goto LABEL_28;
        }
        if (!*(void *)(v7 + 8 * v12))
        {
          v4 += 2LL;
          if (v12 + 1 >= v3) {
            goto LABEL_28;
          }
          if (!*(void *)(v7 + 8 * v4))
          {
            if (v12 + 2 >= v3) {
              goto LABEL_28;
            }
            if (!*(void *)(v7 + 8 * (v12 + 2)))
            {
              uint64_t v4 = v12 + 3;
              if (v12 + 3 >= v3) {
                goto LABEL_28;
              }
              if (!*(void *)(v7 + 8 * v4))
              {
                uint64_t v15 = v12 + 4;
                if (v12 + 4 >= v3) {
                  goto LABEL_28;
                }
                if (!*(void *)(v7 + 8 * v15)) {
                  break;
                }
              }
            }
          }
        }

void sub_10010B4D4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  memcpy(__dst, v4, 0x41uLL);
  __dst[9] = 0LL;
  if (!a2 || !a3) {
    goto LABEL_11;
  }
  if ((a3 & 0x8000000000000000LL) == 0)
  {
    if (__dst[0])
    {
      uint64_t v8 = 1LL;
      while (1)
      {
        sub_10010D65C((uint64_t)__dst, (uint64_t)v11, &qword_1002B0FB8);
        uint64_t v9 = v11[0];
        sub_100034F14((uint64_t)v11, &qword_1002B0FB8);
        if (v8 - 1 >= v9) {
          break;
        }
        if (v8 - 1 >= __dst[0]) {
          goto LABEL_13;
        }
        __dst[9] = v8;
        sub_10010D65C((uint64_t)&__dst[1], a2, &qword_1002AA490);
        if (a3 != v8)
        {
          a2 += 64LL;
          if (v8++ != __dst[0]) {
            continue;
          }
        }

        goto LABEL_11;
      }

      __break(1u);
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }

void sub_10010B600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  __int128 v6 = *(_OWORD *)v3;
  __int128 v7 = *((_OWORD *)v3 + 1);
  uint64_t v8 = v3[4];
  if (!a2)
  {
    uint64_t v10 = 0LL;
    goto LABEL_16;
  }

  uint64_t v9 = a3;
  if (!a3)
  {
    uint64_t v10 = 0LL;
    goto LABEL_16;
  }

  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v10 = v6;
  if (!(void)v6)
  {
LABEL_16:
    *(_OWORD *)a1 = v6;
    *(_OWORD *)(a1 + 16) = v7;
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 4sub_1000B58F0(v0, 0) = v10;
    return;
  }

  __int128 v14 = v7;
  __int128 v15 = v6;
  sub_10010D67C((uint64_t)(v4 + 1), (uint64_t)v16, &qword_1002AA3A0);
  if (v10 >= 1)
  {
    sub_10010D67C((uint64_t)v16, a2, &qword_1002AA3A0);
    if (v9 != 1)
    {
      uint64_t v12 = a2 + 32;
      uint64_t v13 = 1LL;
      while (v10 != v13)
      {
        ++v13;
        sub_10010D67C((uint64_t)v16, v12, &qword_1002AA3A0);
        sub_10010C9B8(v4);
        v12 += 32LL;
        if (v9 == v13) {
          goto LABEL_15;
        }
      }

      uint64_t v9 = v10;
    }

void sub_10010B728(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  memcpy(__dst, v4, 0x50uLL);
  void __dst[10] = 0LL;
  if (!a2 || !a3) {
    goto LABEL_11;
  }
  if ((a3 & 0x8000000000000000LL) == 0)
  {
    if (__dst[0])
    {
      uint64_t v8 = 1LL;
      while (1)
      {
        sub_10010D65C((uint64_t)__dst, (uint64_t)v11, &qword_1002B0FD0);
        uint64_t v9 = v11[0];
        sub_100034F14((uint64_t)v11, &qword_1002B0FD0);
        if (v8 - 1 >= v9) {
          break;
        }
        if (v8 - 1 >= __dst[0]) {
          goto LABEL_13;
        }
        void __dst[10] = v8;
        sub_10010D65C((uint64_t)&__dst[1], a2, &qword_1002AA4D8);
        if (a3 != v8)
        {
          a2 += 72LL;
          if (v8++ != __dst[0]) {
            continue;
          }
        }

        goto LABEL_11;
      }

      __break(1u);
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }

void sub_10010B854(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  memcpy(__dst, v4, 0x42uLL);
  __dst[9] = 0LL;
  if (!a2 || !a3) {
    goto LABEL_11;
  }
  if ((a3 & 0x8000000000000000LL) == 0)
  {
    if (__dst[0])
    {
      uint64_t v8 = 1LL;
      while (1)
      {
        sub_10010D65C((uint64_t)__dst, (uint64_t)v11, &qword_1002B0FF8);
        uint64_t v9 = v11[0];
        sub_100034F14((uint64_t)v11, &qword_1002B0FF8);
        if (v8 - 1 >= v9) {
          break;
        }
        if (v8 - 1 >= __dst[0]) {
          goto LABEL_13;
        }
        __dst[9] = v8;
        sub_10010D65C((uint64_t)&__dst[1], a2, &qword_1002AA198);
        if (a3 != v8)
        {
          a2 += 64LL;
          if (v8++ != __dst[0]) {
            continue;
          }
        }

        goto LABEL_11;
      }

      __break(1u);
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }

void sub_10010B980()
{
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 64;
  sub_10010DDB4();
  if (v9 && (uint64_t v10 = v8) != 0)
  {
    if (v8 < 0)
    {
LABEL_30:
      __break(1u);
    }

    else
    {
      sub_10010DB9C();
      if (!v2) {
        goto LABEL_6;
      }
LABEL_5:
      sub_10010E22C();
      while (1)
      {
        ++v1;
        uint64_t v13 = *(void **)(*(void *)(v6 + 56) + 8 * v11);
        *uint64_t v0 = v13;
        if (v1 == v10)
        {
          id v17 = v13;
          goto LABEL_28;
        }

        ++v0;
        id v14 = v13;
        if (v2) {
          goto LABEL_5;
        }
LABEL_6:
        uint64_t v12 = v4 + 1;
        if (__OFADD__(v4, 1LL))
        {
          __break(1u);
          goto LABEL_30;
        }

        if (v12 >= v3) {
          goto LABEL_28;
        }
        if (!*(void *)(v7 + 8 * v12))
        {
          v4 += 2LL;
          if (v12 + 1 >= v3) {
            goto LABEL_28;
          }
          if (!*(void *)(v7 + 8 * v4))
          {
            if (v12 + 2 >= v3) {
              goto LABEL_28;
            }
            if (!*(void *)(v7 + 8 * (v12 + 2)))
            {
              uint64_t v4 = v12 + 3;
              if (v12 + 3 >= v3) {
                goto LABEL_28;
              }
              if (!*(void *)(v7 + 8 * v4))
              {
                uint64_t v15 = v12 + 4;
                if (v12 + 4 >= v3) {
                  goto LABEL_28;
                }
                if (!*(void *)(v7 + 8 * v15)) {
                  break;
                }
              }
            }
          }
        }

void sub_10010BAEC()
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  uint64_t v9 = v8;
  if (!v0)
  {
    uint64_t v11 = 0LL;
    goto LABEL_15;
  }

  uint64_t v10 = v1;
  if (!v1)
  {
    uint64_t v11 = 0LL;
    goto LABEL_15;
  }

  if (v1 < 0)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v11 = v2;
  if (!v2)
  {
LABEL_15:
    *uint64_t v9 = v7;
    v9[1] = v6;
    void v9[2] = v5;
    void v9[3] = v11;
    sub_100023E74();
    return;
  }

  if (v2 >= 1)
  {
    *uint64_t v0 = v3;
    v0[1] = v4;
    if (v1 != 1)
    {
      uint64_t v12 = v0 + 3;
      uint64_t v13 = 1LL;
      while (v7 != v13)
      {
        ++v13;
        *(v12 - 1) = v6;
        *uint64_t v12 = v5;
        sub_10010E4FC();
        v12 += 2;
        if (v10 == v13) {
          goto LABEL_14;
        }
      }

      uint64_t v10 = v7;
    }

#error "10010BC88: call analysis failed (funcsize=69)"
uint64_t sub_10010BCDC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  sub_100035310();
  sub_100018EC0(&qword_1002A9710);
  uint64_t v2 = *(void *)(sub_10010DA70() - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  sub_100035650();
  else {
    sub_10010E070();
  }
  return sub_10010DB68(v0, ((v3 + 32) & ~v3) + v4, v3 | 7);
}

uint64_t sub_10010BD5C()
{
  return sub_1000F84AC();
}

uint64_t sub_10010BDB4()
{
  return sub_100104CC0(v0[2], v0[3], v0[4], (uint64_t (*)(uint64_t, uint64_t))EventLoopFuture._addCallback(_:));
}

uint64_t sub_10010BDDC()
{
  uint64_t v0 = sub_10009B654();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10010BDFC()
{
  return sub_10010BE7C((uint64_t (*)(void, void, void, void, void))sub_1001021BC);
}

uint64_t sub_10010BE08()
{
  uint64_t v0 = sub_10010DD74();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10010BE28()
{
  return sub_1001041A8( *(uint64_t **)(v0 + 40),  *(void (**)(char *))(v0 + 48),  *(void *)(v0 + 56),  *(void *)(v0 + 64),  *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32));
}

uint64_t sub_10010BE40()
{
  return sub_100104A68( *(uint64_t **)(v0 + 16),  *(void *)(v0 + 24),  *(void (**)(void))(v0 + 32),  *(void *)(v0 + 40));
}

uint64_t sub_10010BE4C()
{
  uint64_t v0 = sub_10009B654();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10010BE70()
{
  return sub_10010BE7C((uint64_t (*)(void, void, void, void, void))sub_1001056E8);
}

uint64_t sub_10010BE7C(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[3], v1[4], v1[5], v1[6], v1[2]);
}

uint64_t sub_10010BE94()
{
  return sub_100105C84( *(uint64_t **)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48));
}

void sub_10010BEA4(uint64_t a1)
{
}

uint64_t sub_10010BEAC()
{
  uint64_t v0 = sub_10010E21C();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10010BED4()
{
  return sub_100106BC4( *(void *)(v0 + 24),  *(uint64_t **)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56),  *(void *)(v0 + 16));
}

uint64_t sub_10010BEE4()
{
  uint64_t v0 = sub_10010E21C();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10010BF00(uint64_t a1, uint64_t a2)
{
  return sub_100106CA8( a1,  a2,  *(void *)(v2 + 32),  *(void *)(v2 + 40),  *(void (**)(uint64_t, uint64_t))(v2 + 48),  *(void *)(v2 + 56),  *(void *)(v2 + 16));
}

uint64_t sub_10010BF10()
{
  uint64_t v0 = sub_10010DD74();
  return swift_deallocObject(v0, v1, v2);
}

void sub_10010BF30(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10010BF5C()
{
  uint64_t v0 = sub_10010E21C();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10010BF7C()
{
  return sub_100107058(v0[4], v0[5], v0[6], v0[7], v0[2]);
}

uint64_t sub_10010BF8C()
{
  uint64_t v0 = sub_10010E20C();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10010BFA4()
{
  uint64_t v0 = sub_10009B654();
  return swift_deallocObject(v0, v1, v2);
}

void sub_10010BFC0(uint64_t a1)
{
}

uint64_t sub_10010BFD0()
{
  return sub_10010D400();
}

uint64_t sub_10010BFE4()
{
  return sub_10010C09C();
}

uint64_t sub_10010C00C(uint64_t a1)
{
  return sub_10010C0EC( a1,  (uint64_t (*)(void, uint64_t, void, void, void, void, void, void))sub_100108C14);
}

uint64_t sub_10010C018()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10010C03C(unint64_t a1, uint64_t a2)
{
  return sub_1001088D0(a1, a2, *(void *)(v2 + 24), *(void *)(v2 + 16));
}

void sub_10010C048()
{
}

uint64_t sub_10010C054()
{
  return sub_10010D5DC((void (*)(void))&_swift_release);
}

uint64_t sub_10010C060(uint64_t *a1)
{
  return sub_1001089EC(a1, v1[3], v1[4], v1[2]);
}

uint64_t sub_10010C06C()
{
  return sub_10010D400();
}

uint64_t sub_10010C080()
{
  return sub_10010C09C();
}

uint64_t sub_10010C09C()
{
  return sub_100109230();
}

uint64_t sub_10010C0C0()
{
  uint64_t v0 = sub_10010DD74();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10010C0E0(uint64_t a1)
{
  return sub_10010C0EC( a1,  (uint64_t (*)(void, uint64_t, void, void, void, void, void, void))sub_100109750);
}

uint64_t sub_10010C0EC( uint64_t a1, uint64_t (*a2)(void, uint64_t, void, void, void, void, void, void))
{
  return a2(v2[8], a1, v2[4], v2[5], v2[6], v2[7], v2[2], v2[3]);
}

unint64_t sub_10010C108()
{
  unint64_t result = qword_1002B0EA8;
  if (!qword_1002B0EA8)
  {
    unint64_t result = swift_getWitnessTable( protocol conformance descriptor for OperationPlaceholderError,  &type metadata for OperationPlaceholderError);
    atomic_store(result, (unint64_t *)&qword_1002B0EA8);
  }

  return result;
}

uint64_t sub_10010C144(unint64_t a1, uint64_t a2)
{
  return sub_100109524(a1, a2, *(void *)(v2 + 24), *(void *)(v2 + 16));
}

uint64_t sub_10010C150()
{
  uint64_t v1 = sub_10010DD74();
  return swift_deallocObject(v1, v2, v3);
}

void sub_10010C17C()
{
}

void sub_10010C188(void (*a1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))
{
}

uint64_t sub_10010C1B0()
{
  return sub_10010D5DC((void (*)(void))&_swift_release);
}

uint64_t sub_10010C1BC(uint64_t *a1)
{
  return sub_10010963C(a1, v1[3], v1[4], v1[2]);
}

uint64_t sub_10010C1C8()
{
  uint64_t v1 = sub_10010E20C();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10010C1E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10010985C(a1, *(void *)(v2 + 24), *(void *)(v2 + 16), a2);
}

uint64_t sub_10010C1FC()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8LL);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + ((v2 + 24) & ~v2));
  uint64_t v4 = sub_10010E4F0();
  return sub_10010DA48(v4, v5, v3);
}

uint64_t sub_10010C248@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(v3 - 8) + 80LL);
  return sub_100109A1C(a1, v2 + ((v4 + 24) & ~v4), v3, a2);
}

uint64_t sub_10010C264()
{
  uint64_t v0 = sub_10010DB7C();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10010C27C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100109B80(a1, *(uint64_t (**)(uint64_t))(v2 + 24), *(void *)(v2 + 16), a2);
}

uint64_t sub_10010C288()
{
  sub_10009B434();
  sub_10010DAC8();
  uint64_t v1 = sub_10009B654();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10010C2AC(uint64_t a1)
{
  return sub_100109CE8(a1, v1[3], v1[4], v1[5], v1[6], v1[2]);
}

uint64_t sub_10010C2C0(uint64_t a1)
{
  return sub_100109E20(a1, v1[3], v1[4], v1[5], v1[2]);
}

uint64_t sub_10010C2CC()
{
  sub_10009B434();
  uint64_t v1 = sub_10010DB7C();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10010C2EC(uint64_t a1)
{
  return sub_10010A0AC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10010C2FC()
{
  sub_100041B9C();
  uint64_t v1 = sub_100041B64();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10010C31C(uint64_t a1)
{
  return sub_10010A2F8(a1, v1[3], v1[4], v1[5], v1[2]);
}

unint64_t sub_10010C32C()
{
  unint64_t result = qword_1002B0EB0[0];
  if (!qword_1002B0EB0[0])
  {
    unint64_t result = swift_getWitnessTable("YX\b", &type metadata for _NIOEventLoopFutureIdentifier);
    atomic_store(result, qword_1002B0EB0);
  }

  return result;
}

uint64_t destroy for CallbackList(void *a1)
{
  if (*a1) {
    swift_release(a1[1]);
  }
  return swift_bridgeObjectRelease(a1[2]);
}

void _s25ASOctaneSupportXPCService12CallbackListVwCP_0(void *a1, void *a2)
{
  if (*a2)
  {
    uint64_t v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_retain();
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  sub_10001945C();
}

void *assignWithCopy for CallbackList(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (!*a1)
  {
    if (v4)
    {
      uint64_t v7 = a2[1];
      *a1 = v4;
      a1[1] = v7;
      swift_retain(v7);
      goto LABEL_8;
    }

void *assignWithTake for CallbackList(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (!*a1)
  {
    if (v4)
    {
      uint64_t v7 = a2[1];
      *a1 = v4;
      a1[1] = v7;
      goto LABEL_8;
    }

void type metadata accessor for CallbackList()
{
}

void type metadata accessor for OperationPlaceholderError()
{
}

uint64_t type metadata accessor for EventLoopPromise(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventLoopPromise);
}

uint64_t sub_10010C518(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  sub_100018EC0(&qword_1002A9710);
  uint64_t v3 = type metadata accessor for Result(255LL, v2);
  uint64_t result = type metadata accessor for Optional(319LL, v3);
  if (v5 <= 0x3F)
  {
    v6[0] = *(void *)(result - 8) + 64LL;
    v6[1] = &unk_1001FFF20;
    _OWORD v6[2] = &unk_1001FFF38;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 3LL, v6, a1 + 88);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void type metadata accessor for _NIOEventLoopFutureIdentifier()
{
}

uint64_t sub_10010C5D4()
{
  return sub_100102A04( *(void *)(v0 + 16),  *(void **)(v0 + 24),  *(void (**)(uint64_t *__return_ptr, void *))(v0 + 32));
}

uint64_t sub_10010C5E4()
{
  return sub_100104CC0(v0[2], v0[3], v0[4], (uint64_t (*)(uint64_t, uint64_t))sub_1000FB6E0);
}

uint64_t sub_10010C60C( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  if (HIBYTE(a8) != 255) {
    return sub_10010C63C(result, a2, a3, a4, a5, a6, a7, a8, HIBYTE(a8) & 1);
  }
  return result;
}

uint64_t sub_10010C63C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if ((a9 & 1) != 0) {
    return swift_errorRetain(a1);
  }
  swift_retain();
  swift_bridgeObjectRetain();
  return sub_1000555E4(a4, a5, a6);
}

uint64_t sub_10010C6B8( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  if (HIBYTE(a8) != 255) {
    return sub_10010C6E8(result, a2, a3, a4, a5, a6, a7, a8, HIBYTE(a8) & 1);
  }
  return result;
}

uint64_t sub_10010C6E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if ((a9 & 1) != 0) {
    return swift_errorRelease(a1);
  }
  swift_release();
  swift_bridgeObjectRelease();
  return sub_100039090(a4, a5, a6);
}

uint64_t sub_10010C764(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = _swift_isClassOrObjCExistentialType(a3, a3);
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }

  uint64_t v6 = a2 & 0xFFFFFFFFFFFFF8LL;
  if ((result & 1) == 0) {
    uint64_t v6 = a2;
  }
  if (*(void *)(v6 + 16) <= a1) {
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_10010C7B4( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(a8 + 32) = a1;
  *(void *)(a8 + 4sub_1000B58F0(v0, 0) = a10;
  *(void *)(a8 + 16) = a2;
  *(_BYTE *)(a8 + 24) = a3;
  *(void *)(a8 + 56) = 0LL;
  *(void *)(a8 + 64) = 0LL;
  *(void *)(a8 + 48) = 0LL;
  return a8;
}

uint64_t sub_10010C7DC()
{
  return sub_100104984( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void (**)(uint64_t *__return_ptr, uint64_t))(v0 + 32));
}

uint64_t sub_10010C7F4()
{
  return sub_100102E34( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void (**)(uint64_t *__return_ptr, uint64_t *))(v0 + 32));
}

uint64_t sub_10010C808(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_10009A8EC(result, a2 & 1);
  }
  return result;
}

uint64_t sub_10010C820(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_10009AD58(result, a2 & 1, (uint64_t (*)(void))&_swift_bridgeObjectRelease);
  }
  return result;
}

void sub_10010C860()
{
}

uint64_t sub_10010C870()
{
  return sub_100104CC0(v0[2], v0[3], v0[4], (uint64_t (*)(uint64_t, uint64_t))sub_1000FE754);
}

uint64_t sub_10010C898(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_10009A878(result, a2, a3 & 1);
  }
  return result;
}

uint64_t sub_10010C8B0(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_100034DB8(result, a2, a3 & 1);
  }
  return result;
}

uint64_t sub_10010C8CC()
{
  return sub_100104F90(*(void *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24));
}

uint64_t *sub_10010C8E0(uint64_t *a1)
{
  return a1;
}

uint64_t sub_10010C91C()
{
  return sub_1001020AC(*(void *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24));
}

uint64_t sub_10010C934()
{
  return sub_1000F8DCC( *(void *)(v0 + 16),  *(uint64_t (**)(uint64_t))(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40));
}

uint64_t sub_10010C948()
{
  return sub_10010D858();
}

uint64_t sub_10010C954(uint64_t a1, uint64_t a2)
{
  return sub_100099490(a1, *(void *)a2, *(_BYTE *)(a2 + 8));
}

uint64_t sub_10010C968()
{
  return sub_1000F906C( *(void *)(v0 + 16),  *(uint64_t (**)(uint64_t *))(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40));
}

uint64_t sub_10010C97C()
{
  return sub_10010D858();
}

void sub_10010C988()
{
}

uint64_t sub_10010C9A4()
{
  return sub_100106438(v0[2], v0[3], v0[4]);
}

uint64_t *sub_10010C9B8(uint64_t *a1)
{
  return a1;
}

void sub_10010C9F8()
{
}

uint64_t sub_10010CA1C()
{
  uint64_t v0 = sub_10010DB7C();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10010CA40()
{
  return sub_100102C80( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void (**)(uint64_t *__return_ptr))(v0 + 32),  *(void *)(v0 + 40));
}

uint64_t sub_10010CA54(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_1000419E4(result, a2 & 1);
  }
  return result;
}

uint64_t sub_10010CA6C(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_100034F08(result, a2 & 1);
  }
  return result;
}

void sub_10010CA88()
{
}

void sub_10010CA9C()
{
  uint64_t v0 = sub_10010E39C();
  sub_100105B6C(v0, v1, v2, v3, v4, v5, v6);
}

void sub_10010CAC0()
{
}

void sub_10010CB00()
{
}

uint64_t sub_10010CB1C()
{
  uint64_t v0 = sub_10009B654();
  return swift_deallocObject(v0, v1, v2);
}

void sub_10010CB48()
{
}

uint64_t sub_10010CB84()
{
  uint64_t v0 = sub_100041B64();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10010CBAC()
{
  return sub_100104F08(*(void *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24));
}

void sub_10010CBC4()
{
}

uint64_t sub_10010CBD8( uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100108DB8(*(void *)a1, *(_BYTE *)(a1 + 8), a2, a3, a4, a5, a6);
}

void sub_10010CBFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = sub_1000175B0(&qword_1002AAD98);
  uint64_t v10 = sub_100019310(v9, 72LL);
  *(void *)(v10 + 32) = a1;
  *(void *)(v10 + 4sub_1000B58F0(v0, 0) = a7;
  *(void *)(v10 + 16) = 0LL;
  *(_BYTE *)(v10 + 24) = 0;
  *(void *)(v10 + 56) = 0LL;
  *(void *)(v10 + 64) = 0LL;
  *(void *)(v10 + 48) = 0LL;
  sub_10001945C();
}

uint64_t sub_10010CC40(void *a1)
{
  return Scheduled._promise.getter(*a1);
}

uint64_t sub_10010CC48( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(a9 + 4sub_1000B58F0(v0, 0) = a1;
  *(void *)(a9 + 48) = a11;
  *(void *)(a9 + 16) = a2;
  *(void *)(a9 + 24) = a3;
  *(_BYTE *)(a9 + 32) = a4;
  *(void *)(a9 + 64) = 0LL;
  *(void *)(a9 + 72) = 0LL;
  *(void *)(a9 + 56) = 0LL;
  return a9;
}

uint64_t sub_10010CC74()
{
  return sub_100103C3C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(uint64_t (**)(uint64_t))(v0 + 32));
}

uint64_t sub_10010CC88()
{
  return sub_10010D858();
}

void sub_10010CC94()
{
}

uint64_t sub_10010CCC4()
{
  return sub_10010D5DC((void (*)(void))&_swift_release);
}

void sub_10010CCD0()
{
}

uint64_t sub_10010CD00()
{
  return sub_10010D5DC((void (*)(void))&_swift_release);
}

uint64_t sub_10010CD10()
{
  return sub_100102D54( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void (**)(uint64_t *__return_ptr))(v0 + 32),  *(void *)(v0 + 40));
}

uint64_t sub_10010CD24()
{
  return sub_1000C0330(v0, 20LL);
}

uint64_t sub_10010CD30(uint64_t a1)
{
  return sub_100130B78(a1, *(_DWORD *)(v1 + 16));
}

uint64_t sub_10010CD4C()
{
  return sub_1001025B8( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void (**)(void *__return_ptr, uint64_t))(v0 + 32));
}

uint64_t sub_10010CD5C()
{
  return sub_1000C0330(v0, 20LL);
}

uint64_t sub_10010CD6C()
{
  uint64_t v1 = sub_10010E20C();
  return swift_deallocObject(v1, v2, v3);
}

void sub_10010CD88(uint64_t a1)
{
}

uint64_t sub_10010CDBC()
{
  return sub_1000F92D0( *(void *)(v0 + 16),  *(uint64_t (**)(uint64_t *))(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40));
}

uint64_t sub_10010CDD0(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_10009AD58(result, a2 & 1, (uint64_t (*)(void))&_swift_release);
  }
  return result;
}

uint64_t sub_10010CDFC(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_10009AF58(result, a2 & 1);
  }
  return result;
}

uint64_t sub_10010CE20()
{
  return sub_10010D858();
}

uint64_t sub_10010CE38()
{
  return sub_10010DFF4();
}

void sub_10010CE44(uint64_t a1)
{
}

uint64_t sub_10010CE58()
{
  return sub_10010DFF4();
}

uint64_t sub_10010CE68()
{
  uint64_t v2 = *(void *)(sub_10010DA70() - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  sub_10009B434();
  else {
    sub_10010E070();
  }
  return sub_10010DB68(v0, ((v3 + 40) & ~v3) + v4, v3 | 7);
}

void sub_10010CEE8()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(sub_10010DA70() - 8) + 80LL);
  (*(void (**)(uint64_t))(v0 + 24))(v0 + ((v1 + 40) & ~v1));
  sub_10001945C();
}

uint64_t sub_10010CF3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1000B58F0(v0, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10010CF4C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10010CF54()
{
  return sub_10010D5DC((void (*)(void))&_swift_errorRelease);
}

void sub_10010CF60()
{
}

uint64_t sub_10010CF84()
{
  uint64_t v4 = *(void *)(*(void *)(v0 + 16) - 8LL);
  sub_10010E658();
  sub_10009B434();
  sub_10002A788(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  return sub_10010DC98(v0, v1, v2);
}

void sub_10010CFD0()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8LL) + 80LL);
  (*(void (**)(uint64_t))(v0 + 24))(v0 + ((v1 + 40) & ~v1));
  sub_10001945C();
}

uint64_t sub_10010D008()
{
  uint64_t v4 = *(void *)(*(void *)(v0 + 16) - 8LL);
  sub_10010E658();
  sub_100041B9C();
  sub_10002A788(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  return sub_10010DC98(v0, v1, v2);
}

uint64_t sub_10010D054()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8LL) + 80LL);
  return (*(uint64_t (**)(uint64_t))(v0 + 32))(v0 + ((v1 + 48) & ~v1));
}

uint64_t sub_10010D090()
{
  return sub_10010D5DC((void (*)(void))&_swift_release);
}

uint64_t sub_10010D0A0()
{
  return sub_10010D5DC((void (*)(void))&_swift_release);
}

uint64_t sub_10010D0B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100108B5C(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_10010D0D4()
{
  return sub_100104E80(*(void *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24));
}

void sub_10010D0EC()
{
}

uint64_t sub_10010D100@<X0>(void *a1@<X8>)
{
  return sub_100106914(v1[3], v1[4], v1[5], v1[2], a1);
}

uint64_t sub_10010D11C()
{
  uint64_t v0 = sub_100041B64();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10010D138(uint64_t a1)
{
  return sub_100106A04( a1,  *(void *)(v1 + 24),  *(uint64_t (**)(char *, char *))(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 16));
}

uint64_t sub_10010D144()
{
  return sub_10010D858();
}

uint64_t sub_10010D150()
{
  return sub_1000F97C4(*(void *)(v0 + 16), *(uint64_t **)(v0 + 24));
}

void sub_10010D15C()
{
}

uint64_t sub_10010D170(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_10009AD40(result, a2, a3 & 1);
  }
  return result;
}

uint64_t sub_10010D188(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_100034EB4(result, a2, a3 & 1);
  }
  return result;
}

uint64_t sub_10010D1A0()
{
  return sub_10010D5DC((void (*)(void))&_swift_release);
}

void sub_10010D1AC()
{
}

uint64_t sub_10010D1DC()
{
  return sub_10010D5DC((void (*)(void))&_swift_release);
}

uint64_t sub_10010D1F4()
{
  return sub_100103334(*(void *)(v0 + 16), *(void *)(v0 + 24), *(uint64_t (**)(uint64_t))(v0 + 32));
}

uint64_t sub_10010D208()
{
  return swift_deallocObject(v0, 88LL, 7LL);
}

void sub_10010D250(uint64_t a1)
{
}

uint64_t sub_10010D284()
{
  return sub_10010D858();
}

uint64_t sub_10010D290()
{
  uint64_t v2 = sub_10010E4F0();
  return sub_10010DA48(v2, v3, 7LL);
}

void sub_10010D2C0()
{
}

uint64_t sub_10010D2F4()
{
  return sub_100102B80( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void (**)(void *__return_ptr, uint64_t *))(v0 + 32));
}

uint64_t sub_10010D304()
{
  return sub_100104CC0(v0[2], v0[3], v0[4], (uint64_t (*)(uint64_t, uint64_t))sub_1000FC620);
}

uint64_t sub_10010D32C(uint64_t result, uint64_t a2)
{
  if (BYTE1(a2) != 255) {
    return sub_10010D344(result, a2, BYTE1(a2) & 1);
  }
  return result;
}

uint64_t sub_10010D344(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_errorRetain(a1);
  }
  else {
    return swift_bridgeObjectRetain(a1);
  }
}

uint64_t sub_10010D350(uint64_t result, uint64_t a2)
{
  if (BYTE1(a2) != 255) {
    return sub_10010D368(result, a2, BYTE1(a2) & 1);
  }
  return result;
}

uint64_t sub_10010D368(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_errorRelease(a1);
  }
  else {
    return swift_bridgeObjectRelease(a1);
  }
}

uint64_t sub_10010D374()
{
  return sub_10010D9DC();
}

uint64_t sub_10010D384()
{
  return sub_10010D5DC((void (*)(void))&_swift_release);
}

void sub_10010D390()
{
}

uint64_t sub_10010D3B0()
{
  return sub_10010D9DC();
}

uint64_t sub_10010D3BC()
{
  return sub_10010D5DC((void (*)(void))&_swift_release);
}

uint64_t sub_10010D3D8()
{
  return sub_10010D9DC();
}

uint64_t sub_10010D3E4()
{
  return sub_10010D5DC((void (*)(void))&_swift_release);
}

uint64_t sub_10010D3F4()
{
  return sub_10010D9DC();
}

uint64_t sub_10010D400()
{
  uint64_t v3 = sub_10009B654();
  return sub_10010DA48(v3, v4, v5);
}

uint64_t sub_10010D434(uint64_t a1)
{
  return sub_10010CBD8( a1,  *(void (**)(uint64_t))(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48));
}

uint64_t sub_10010D444()
{
  return sub_10010D5DC((void (*)(void))&_swift_release);
}

void sub_10010D450(void *a1@<X8>)
{
  *a1 = (*(uint64_t (**)(void))(v1 + 16))();
  a1[1] = v3;
  a1[2] = v4;
  sub_10001945C();
}

uint64_t sub_10010D488()
{
  return swift_deallocObject(v0, 33LL, 7LL);
}

uint64_t sub_10010D4B4()
{
  return sub_10010D5DC((void (*)(void))&_swift_release);
}

uint64_t sub_10010D4C0()
{
  return sub_1001052BC(*(void (**)(uint64_t *))(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_10010D4D0()
{
  return sub_100104CC0(v0[2], v0[3], v0[4], (uint64_t (*)(uint64_t, uint64_t))sub_1000FE978);
}

uint64_t sub_10010D4F4()
{
  return sub_10010D5DC((void (*)(void))&_swift_release);
}

uint64_t sub_10010D500(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (HIBYTE(a3) != 255) {
    return sub_10009AEA0(result, a2, a3, HIBYTE(a3) & 1);
  }
  return result;
}

uint64_t sub_10010D518()
{
  return sub_10010D5DC((void (*)(void))&_swift_release);
}

uint64_t sub_10010D528()
{
  return sub_10010D5DC((void (*)(void))&_swift_release);
}

uint64_t sub_10010D538()
{
  uint64_t v0 = sub_100041B64();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10010D558()
{
  return sub_10010D5DC((void (*)(void))&_swift_release);
}

uint64_t sub_10010D568()
{
  return sub_10010D5DC((void (*)(void))&_swift_release);
}

uint64_t sub_10010D574()
{
  return sub_10010D5DC((void (*)(void))&_swift_release);
}

void sub_10010D580()
{
}

uint64_t sub_10010D5A0()
{
  return sub_100104CC0(v0[2], v0[3], v0[4], (uint64_t (*)(uint64_t, uint64_t))sub_1000FEC54);
}

uint64_t sub_10010D5C4()
{
  return sub_10010D5DC((void (*)(void))&_swift_release);
}

uint64_t sub_10010D5D0()
{
  return sub_10010D5DC((void (*)(void))&_swift_release);
}

uint64_t sub_10010D5DC(void (*a1)(void))
{
  uint64_t v3 = sub_10010DB7C();
  return swift_deallocObject(v3, v4, v5);
}

uint64_t sub_10010D608()
{
  return sub_1000F97C4(*(void *)(v0 + 24), *(uint64_t **)(v0 + 32));
}

uint64_t sub_10010D61C()
{
  uint64_t v0 = sub_10010DB7C();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10010D63C()
{
  uint64_t v0 = sub_100041B64();
  return swift_deallocObject(v0, v1, v2);
}

void sub_10010D65C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_100035374(a1, a2, a3);
  sub_10010DE9C(v3);
  sub_10001945C();
}

void sub_10010D67C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100035374(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(v3, v4, v5);
  sub_10001945C();
}

uint64_t sub_10010D774()
{
  return sub_10005E558();
}

uint64_t sub_10010D7DC(uint64_t a1)
{
  return sub_10010CD30(a1);
}

uint64_t sub_10010D7F4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  a1[2] = v3;
  a1[3] = a2;
  a1[4] = v2;
  return swift_retain(v3);
}

uint64_t sub_10010D808(uint64_t a1)
{
  return v4(a1, v2, v3, v1);
}

void sub_10010D818()
{
}

uint64_t sub_10010D828()
{
  return v2(v1, v0);
}

void sub_10010D834()
{
}

uint64_t sub_10010D844@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  a1[2] = v3;
  a1[3] = a2;
  a1[4] = v2;
  return swift_retain(v3);
}

uint64_t sub_10010D858()
{
  return sub_10010D290();
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_10010D8B8()
{
  return v0;
}

uint64_t sub_10010D8CC()
{
  return v0;
}

uint64_t sub_10010D8E0(uint64_t a1)
{
  return v4(a1, v1, v3, v2);
}

uint64_t sub_10010D8F0()
{
  return v0;
}

  ;
}

void sub_10010D920()
{
}

uint64_t sub_10010D930( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return swift_unknownObjectRetain(a9);
}

__n128 sub_10010D93C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, __int128 a23, __int128 a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28)
{
  v31[24] = a28;
  *(void *)&v31[16] = a27;
  *(void *)&v31[8] = a26;
  *(void *)uint64_t v31 = a25;
  *(_OWORD *)(v29 - 119) = *(_OWORD *)&v31[9];
  *(_OWORD *)(v29 - 144) = a24;
  *(_OWORD *)(v29 - 128) = *(_OWORD *)v31;
  *(_OWORD *)(v29 - 16sub_1000B58F0(v0, 0) = a23;
  *(_OWORD *)uint64_t v28 = a23;
  *(_OWORD *)(v28 + 16) = a24;
  *(_OWORD *)(v28 + 32) = *(_OWORD *)(v29 - 128);
  __n128 result = *(__n128 *)(v29 - 119);
  *(__n128 *)(v28 + 41) = result;
  return result;
}

uint64_t sub_10010D980()
{
  return v2(v1, v0);
}

  ;
}

  ;
}

void sub_10010D9C0()
{
}

  ;
}

uint64_t sub_10010D9DC()
{
  return sub_10010D400();
}

uint64_t sub_10010D9E4()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10010D9F8()
{
  return sub_1000F334C(v1, v0);
}

uint64_t sub_10010DA04()
{
  return 0LL;
}

__n128 sub_10010DA14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22)
{
  v23[16] = a22;
  *(void *)&v23[8] = a21;
  *(void *)unint64_t v23 = a20;
  return *(__n128 *)&v23[1];
}

uint64_t sub_10010DA48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_10010DA54()
{
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10010DA70()
{
  return type metadata accessor for Result(0LL, v0);
}

uint64_t sub_10010DA7C(uint64_t a1)
{
  return swift_release(a1);
}

void sub_10010DA98(char a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)a6 = v8;
  *(void *)(a6 + 8) = v7;
  *(void *)(a6 + 16) = v6;
  *(_DWORD *)(a6 + 24) = v9;
  *(_WORD *)(a6 + 28) = -1;
  *(_BYTE *)(a6 + 3sub_1000B58F0(v0, 0) = -1;
  *(_BYTE *)(a6 + 31) = a1 & 1;
}

uint64_t sub_10010DAC8()
{
  return swift_release(*(void *)(v0 + 48));
}

uint64_t sub_10010DAD0(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_10010DAEC(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_10010DB08(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

void sub_10010DB24()
{
}

uint64_t sub_10010DB34(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  return v2 - 160;
}

void sub_10010DB44()
{
}

  ;
}

uint64_t sub_10010DB68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_10010DB7C()
{
  return v0;
}

  ;
}

  ;
}

uint64_t sub_10010DBC0()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_10010DBDC(uint64_t a1)
{
  return type metadata accessor for Optional(0LL, a1);
}

uint64_t sub_10010DBE8(uint64_t a1)
{
  return v4(a1, v3, v2, v1);
}

uint64_t sub_10010DBF8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(uint64_t, uint64_t))
{
  return a12(v13, v12);
}

  ;
}

uint64_t sub_10010DC24@<X0>(uint64_t result@<X0>, char a2@<W8>)
{
  *(void *)__n128 result = v4;
  *(void *)(result + 8) = v3;
  *(void *)(result + 16) = v2;
  *(_DWORD *)(result + 24) = v5;
  *(_WORD *)(result + 28) = -1;
  *(_BYTE *)(result + 3sub_1001A93A0(0LL, 0) = -1;
  *(_BYTE *)(result + 3sub_1001A93A0(v0, 1) = a2;
  return result;
}

uint64_t sub_10010DC48(void *a1)
{
  a1[2] = v1;
  a1[3] = v3;
  a1[4] = *(void *)(v4 - 88);
  return swift_retain_n(v2, 3LL);
}

  ;
}

uint64_t sub_10010DC80()
{
  return swift_retain_n(v0, 3LL);
}

void sub_10010DC8C()
{
}

uint64_t sub_10010DC98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_10010DCA8()
{
  return swift_retain_n(v0, 3LL);
}

  ;
}

uint64_t sub_10010DCD0()
{
  return swift_release(*(void *)(v0 + 56));
}

uint64_t sub_10010DCD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, 117LL, 2LL, 1171LL, a5, v5);
}

uint64_t sub_10010DCF0()
{
  return v0;
}

  ;
}

uint64_t sub_10010DD14(void *a1)
{
  uint64_t v2 = *(void *)(v1 - 168);
  a1[2] = *(void *)(*(void *)(v1 - 160) + 80LL);
  a1[3] = v2;
  a1[4] = *(void *)(v1 - 184);
  return *(void *)(v1 - 176);
}

uint64_t sub_10010DD34( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  return swift_release(a25);
}

double sub_10010DD3C()
{
  return 0.0;
}

uint64_t sub_10010DD5C()
{
  *(void *)(v2 - 128) = *(void *)(v2 - 152);
  return type metadata accessor for EnumeratedSequence(0LL, v0, v1);
}

uint64_t sub_10010DD74()
{
  return v0;
}

uint64_t sub_10010DD84()
{
  return sub_10010CA6C(v1, v0);
}

uint64_t sub_10010DD9C()
{
  return sub_10010CA6C(v0, v1);
}

  ;
}

uint64_t sub_10010DDD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getObjectType(a3);
}

uint64_t sub_10010DDEC(uint64_t a1, uint64_t a2)
{
  return swift_getObjectType(a2);
}

  ;
}

  ;
}

uint64_t sub_10010DE3C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t (*a15)(uint64_t, uint64_t))
{
  return a15(v16, v15);
}

void sub_10010DE54(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = v1;
  *(void *)(a1 + 4sub_1001A93A0(0LL, 0) = v2;
  *(void *)(v4 + 64) = v3;
}

uint64_t sub_10010DE74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v6 - 168) = v5;
  uint64_t v7 = type metadata accessor for EventLoopFuture(0LL, v5, a3, a4);
  return Array.count.getter(v4, v7);
}

uint64_t sub_10010DE9C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(v1, v2, a1);
}

  ;
}

uint64_t sub_10010DED0()
{
  return type metadata accessor for Result(255LL, v0);
}

uint64_t sub_10010DEDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, 117LL, 2LL, 692LL, a5, v5);
}

uint64_t sub_10010DEF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, 117LL, 2LL, 692LL, a5, v5);
}

uint64_t sub_10010DF04( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t (*a15)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  return a15(a1, v16, a12, v15);
}

uint64_t sub_10010DF18()
{
  return swift_errorRetain(v0);
}

uint64_t sub_10010DF3C()
{
  return swift_unknownObjectRetain(v0);
}

uint64_t sub_10010DF44@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = a1;
  v2[4] = v3;
  return swift_retain(a2);
}

uint64_t sub_10010DF58( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return a9;
}

void sub_10010DF74()
{
}

  ;
}

uint64_t sub_10010DFA4()
{
  return swift_arrayInitWithCopy(v0);
}

uint64_t sub_10010DFB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EventLoop.makePromise<A>(of:file:line:)(a1, a2, a3, a4, a5, v6, a1, v5);
}

uint64_t sub_10010DFCC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  return a10(a1, v12, v11, v10);
}

uint64_t sub_10010DFE0(uint64_t a1)
{
  return sub_1000F4254(a1, v1, 0LL, v2);
}

uint64_t sub_10010DFF4()
{
  return sub_10010D290();
}

void sub_10010DFFC()
{
}

uint64_t sub_10010E008()
{
  return v0(v2, v2, v3, v1);
}

uint64_t sub_10010E01C()
{
  return sub_10010CDFC(v1, v0);
}

uint64_t sub_10010E028()
{
  return sub_10010CDD0(v1, v0);
}

void sub_10010E034()
{
}

void sub_10010E03C(uint64_t a1)
{
}

void sub_10010E044(uint64_t a1)
{
}

void sub_10010E04C()
{
}

uint64_t sub_10010E054()
{
  return v0;
}

uint64_t sub_10010E070()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v0 - 8) + 8LL))(v1, v0);
}

uint64_t sub_10010E084()
{
  return v2(v1, v0);
}

void sub_10010E090( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

uint64_t sub_10010E0A0@<X0>(uint64_t a1@<X8>)
{
  return v1 + a1;
}

uint64_t sub_10010E0B0()
{
  return swift_getEnumCaseMultiPayload(v0 + v2, v1);
}

uint64_t sub_10010E0C0(uint64_t result)
{
  *(void *)__n128 result = v3;
  *(void *)(result + 8) = v2;
  *(void *)(result + 16) = v1;
  *(_DWORD *)(result + 24) = v4;
  *(_DWORD *)(result + 28) = 0x1FFFFFF;
  return result;
}

uint64_t sub_10010E0D8()
{
  return v0;
}

uint64_t sub_10010E0E4()
{
  return v0;
}

  ;
}

uint64_t sub_10010E10C(uint64_t a1)
{
  return v2(a1, v4, v3, v1);
}

uint64_t sub_10010E11C(uint64_t a1)
{
  return v4(a1, v3, v2, v1);
}

uint64_t sub_10010E12C(uint64_t a1)
{
  return type metadata accessor for Optional(0LL, a1);
}

  ;
}

uint64_t sub_10010E14C()
{
  return swift_unknownObjectRelease(*(void *)(v0 + 32));
}

uint64_t sub_10010E154( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t (*a14)(uint64_t, uint64_t))
{
  return a14(v15, v14);
}

  ;
}

  ;
}

uint64_t sub_10010E194()
{
  return v0;
}

  ;
}

uint64_t sub_10010E1BC(uint64_t a1, uint64_t a2)
{
  return a2;
}

  ;
}

  ;
}

uint64_t sub_10010E1E4()
{
  *uint64_t v0 = v1;
  v0[1] = v3;
  v0[2] = ~v4;
  v0[3] = v6;
  v0[4] = v5;
  return v2;
}

uint64_t sub_10010E1FC@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 24sub_1001A93A0(0LL, 0) = a1;
  return swift_getObjectType(v1);
}

uint64_t sub_10010E20C()
{
  return v0;
}

uint64_t sub_10010E21C()
{
  return v0;
}

  ;
}

void sub_10010E244()
{
}

uint64_t sub_10010E254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  return a4(a2, a3);
}

void sub_10010E264()
{
}

void sub_10010E274()
{
}

__n128 sub_10010E284()
{
  return v0[2];
}

  ;
}

  ;
}

uint64_t sub_10010E2B8()
{
  return v0();
}

  ;
}

void sub_10010E2CC()
{
}

uint64_t sub_10010E2D4()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_10010E2DC(uint64_t a1)
{
  return v2(a1, v3, v4, v1);
}

uint64_t sub_10010E2EC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10010E2FC(uint64_t a1)
{
  return type metadata accessor for Result(a1, v1);
}

void sub_10010E304()
{
}

  ;
}

uint64_t sub_10010E324()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_10010E33C(uint64_t a1)
{
  return v4(a1, v3, v2, v1);
}

uint64_t sub_10010E34C(uint64_t a1)
{
  return v2(a1, v1, v3, v4);
}

uint64_t sub_10010E35C(uint64_t a1)
{
  return v3(a1, v1, v2, v4);
}

uint64_t sub_10010E36C()
{
  return type metadata accessor for EnumeratedSequence.Iterator(0LL, v0, v1);
}

void sub_10010E37C()
{
}

uint64_t sub_10010E38C()
{
  return sub_100098B34(0LL);
}

uint64_t sub_10010E39C()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_10010E3B4(uint64_t a1)
{
  return type metadata accessor for Optional(0LL, a1);
}

void *sub_10010E3C4@<X0>( void *result@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  result[2] = a2;
  result[3] = 0LL;
  result[4] = v21;
  result[5] = a20;
  result[6] = v20;
  return result;
}

void sub_10010E3D8(uint64_t a1, char a2)
{
}

uint64_t sub_10010E3E0()
{
  return type metadata accessor for Result(255LL, v0);
}

uint64_t sub_10010E3EC()
{
  return type metadata accessor for Result(255LL, v0);
}

void *sub_10010E3F8( void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  result[2] = v27;
  result[3] = 0LL;
  result[4] = v28;
  result[5] = a26;
  result[6] = v26;
  return result;
}

  ;
}

uint64_t sub_10010E420()
{
  return swift_release(*(void *)(v0 + 64));
}

uint64_t sub_10010E428(uint64_t a1)
{
  return sub_100098B34(a1);
}

void sub_10010E434(uint64_t a1)
{
}

uint64_t sub_10010E440@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_10010E448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, a2, a3, a4, a5, v5);
}

uint64_t sub_10010E450()
{
  return v1(v0, v2);
}

uint64_t sub_10010E45C()
{
  return v0;
}

uint64_t sub_10010E468@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v3, v2);
}

uint64_t sub_10010E474()
{
  return v0;
}

uint64_t sub_10010E480()
{
  return v0(v1, v2);
}

uint64_t sub_10010E48C()
{
  return v0;
}

uint64_t sub_10010E498()
{
  return v1(v2, v0);
}

uint64_t sub_10010E4A4()
{
  return swift_retain(v0);
}

uint64_t sub_10010E4B0()
{
  return swift_retain(v0);
}

uint64_t sub_10010E4BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return EventLoopPromise.init(eventLoop:file:line:)(v6, a2, a3, a4, a5, a6);
}

uint64_t sub_10010E4C4()
{
  return v0;
}

  ;
}

uint64_t sub_10010E4E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, a2, a3, a4, a5, v5);
}

uint64_t sub_10010E4F0()
{
  return v0;
}

uint64_t sub_10010E4FC()
{
  return v2(v1, v0);
}

uint64_t sub_10010E508()
{
  return sub_100034E8C(v0, v1);
}

uint64_t sub_10010E514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000F64A8(a1, a2, a3, a4, v4, v5);
}

uint64_t sub_10010E520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000F4254(a1, a2, a3, a4);
}

uint64_t sub_10010E52C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return swift_bridgeObjectRetain(a20);
}

uint64_t sub_10010E548()
{
  return swift_release_n(v0, 3LL);
}

uint64_t sub_10010E554()
{
  return sub_10010CA54(v0, v1);
}

uint64_t sub_10010E560()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v0, v1);
}

uint64_t sub_10010E56C()
{
  return Sequence.enumerated()(v0, v1);
}

uint64_t sub_10010E578(uint64_t a1)
{
  return swift_allocObject(a1, 40LL, 7LL);
}

uint64_t sub_10010E584()
{
  return sub_100034E8C(v1, v0);
}

uint64_t sub_10010E590()
{
  return swift_unknownObjectRetain(v0);
}

void sub_10010E598()
{
}

uint64_t sub_10010E5A0()
{
  return v0;
}

uint64_t sub_10010E5AC(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 1LL);
}

void sub_10010E5B4()
{
  *(void *)(v0 - 16sub_1001A93A0(0LL, 0) = 0LL;
  *(_BYTE *)(v0 - 152) = 0;
}

uint64_t sub_10010E5C0(uint64_t a1)
{
  return sub_100034E8C(a1, v1);
}

  ;
}

uint64_t sub_10010E5D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t, uint64_t))
{
  return a10(a1, v10);
}

uint64_t sub_10010E5E0()
{
  return v2(v1, v0);
}

uint64_t sub_10010E5EC()
{
  return sub_100034E8C(v1, v0);
}

uint64_t sub_10010E5F8()
{
  return sub_100034E9C(v1, v0);
}

uint64_t sub_10010E604( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  return swift_bridgeObjectRetain(a21);
}

uint64_t sub_10010E620()
{
  return type metadata accessor for Array(0LL, v0);
}

uint64_t sub_10010E62C()
{
  return sub_100034E8C(0LL, 0LL);
}

uint64_t sub_10010E638()
{
  return type metadata accessor for Optional(0LL, v0);
}

  ;
}

  ;
}

uint64_t sub_10010E66C()
{
  return v0;
}

  ;
}

uint64_t sub_10010E694()
{
  return sub_100034E8C(v0, v1);
}

uint64_t ByteBuffer.getJSONDecodable<A>(_:decoder:at:length:)@<X0>( uint64_t a1@<X2>, unint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  if (v11 >> 60 == 15) {
    return sub_1000A6D8C(a7, 1LL);
  }
  uint64_t v13 = v10;
  unint64_t v14 = v11;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(a6, v10, v11, a6);
  if (!v7) {
    sub_1000A6D8C(a7, 0LL);
  }
  return sub_10003AACC(v13, v14);
}

uint64_t ByteBuffer.readJSONDecodable<A>(_:decoder:length:)@<X0>( unint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v21 = a3;
  uint64_t v20 = a4;
  uint64_t v7 = type metadata accessor for Optional(0LL, a2);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v12 = *(unsigned int *)(v4 + 8);
  uint64_t v11 = *(unsigned int *)(v4 + 12);
  uint64_t v13 = v22;
  uint64_t result = ByteBuffer.getJSONDecodable<A>(_:decoder:at:length:)( v12,  a1,  *(void *)v4,  v12 | (v11 << 32),  *(unsigned int *)(v4 + 16) | ((unint64_t)*(unsigned __int16 *)(v4 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v4 + 22) << 48),  a2,  (uint64_t)&v19 - v9);
  if (!v13)
  {
    uint64_t v22 = v11;
    uint64_t v15 = v20;
    if (sub_10001D158((uint64_t)v10, 1LL, a2) == 1)
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      uint64_t v16 = v15;
      uint64_t v17 = 1LL;
      return sub_10001762C(v16, v17, 1LL, a2);
    }

    uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(a2 - 8) + 32LL))(v15, v10, a2);
    unsigned int v18 = v12 + a1;
    if (__CFADD__((_DWORD)v12, (_DWORD)a1))
    {
      __break(1u);
    }

    else if (v22 >= v18)
    {
      *(_DWORD *)(v4 + 8) = v18;
      uint64_t v16 = v15;
      uint64_t v17 = 0LL;
      return sub_10001762C(v16, v17, 1LL, a2);
    }

    __break(1u);
  }

  return result;
}

uint64_t ByteBuffer.setJSONEncodable<A>(_:encoder:at:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = dispatch thunk of JSONEncoder.encode<A>(_:)(a1, a4, a5);
  if (!v5)
  {
    __chkstk_darwin(result);
    __asm { BR              X10 }
  }

  return result;
}

void sub_10010EA34()
{
  *(void *)(v4 - 72) = v3;
  if (v0 >> 32 >= (int)v0)
  {
    sub_10003AA88(v0, v2);
    uint64_t v5 = sub_10010EF18( (int)v0,  v0 >> 32,  v2 & 0x3FFFFFFFFFFFFFFFLL,  (void *(*)(uint64_t *__return_ptr, void *, uint64_t))sub_100070298);
    if (!v1)
    {
      unint64_t v6 = (unint64_t)v5;
      sub_10010EF00();
      if ((v6 & 0x100000000LL) == 0) {
        JUMPOUT(0x10010EA08LL);
      }
      JUMPOUT(0x10010E9F0LL);
    }

    sub_10010EF00();
    __break(1u);
    JUMPOUT(0x10010EAB0LL);
  }

  __break(1u);
  JUMPOUT(0x10010EA94LL);
}

Swift::Int ByteBuffer.writeJSONEncodable<A>(_:encoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::Int v6 = ByteBuffer.setJSONEncodable<A>(_:encoder:at:)(a1, a2, *(unsigned int *)(v4 + 12), a3, a4);
  Swift::Int v7 = v6;
  if (!v5) {
    ByteBuffer.moveWriterIndex(forwardBy:)(v6);
  }
  return v7;
}

uint64_t JSONDecoder.decode<A>(_:from:)@<X0>( uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v16 = a5;
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = type metadata accessor for Optional(0LL, a4);
  uint64_t result = __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v15 - v13;
  if (v10 < a2)
  {
    __break(1u);
    goto LABEL_7;
  }

  uint64_t result = ByteBuffer.getJSONDecodable<A>(_:decoder:at:length:)( a2,  (v10 - a2),  a1,  a2,  a3 & 0xFFFFFFFFFFFFFFLL,  a4,  (uint64_t)&v15 - v13);
  if (v5) {
    return result;
  }
  uint64_t result = sub_10001D158((uint64_t)v14, 1LL, a4);
  if ((_DWORD)result == 1)
  {
LABEL_7:
    __break(1u);
    return result;
  }

  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(a4 - 8) + 32LL))(v16, v14, a4);
}

Swift::Int JSONEncoder.encode<A>(_:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ByteBuffer.writeJSONEncodable<A>(_:encoder:)(a1, v4, a3, a4);
}

uint64_t JSONEncoder.encodeAsByteBuffer<A>(_:allocator:)( uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = dispatch thunk of JSONEncoder.encode<A>(_:)(a1, a6, a7);
  if (!v8)
  {
    uint64_t v36 = v7;
    uint64_t v37 = result;
    unint64_t v43 = v17;
    uint64_t v18 = Data.count.getter(result, v17);
    if (v18 < 0)
    {
      __break(1u);
    }

    else
    {
      int v20 = v18;
      if (v18)
      {
        type metadata accessor for ByteBuffer._Storage();
        static ByteBuffer._Storage.reallocated(minimumCapacity:allocator:)(v20, a2, a3, a4, a5);
        __int16 v22 = 0;
        char v23 = 0;
        int v24 = *(_DWORD *)(v21 + 16);
        uint64_t v25 = 0LL;
LABEL_7:
        uint64_t v38 = v21;
        uint64_t v40 = v25;
        LODWORD(v4sub_1001A93A0(v0, 1) = v24;
        WORD2(v4sub_1001A93A0(v0, 1) = v22;
        BYTE6(v4sub_1001A93A0(v0, 1) = v23;
        Swift::Int v26 = ByteBuffer.writeJSONEncodable<A>(_:encoder:)(a1, v36, a6, a7);
        sub_10010EF0C( v26,  v27,  v28,  v29,  v30,  v31,  v32,  v33,  v34,  *((uint64_t *)&v34 + 1),  v35,  v36,  v37,  v38,  v40,  v41,  v42,  v43);
        return v39;
      }

      if (qword_1002A8CC8 == -1)
      {
LABEL_6:
        *(void *)&__int128 v19 = qword_1002EB928;
        __int128 v34 = v19;
        int v24 = dword_1002EB930;
        __int16 v22 = word_1002EB934;
        char v23 = byte_1002EB936;
        uint64_t v21 = swift_retain();
        uint64_t v25 = v34;
        goto LABEL_7;
      }
    }

    swift_once(&qword_1002A8CC8, sub_10005B580);
    goto LABEL_6;
  }

  return result;
}

void *sub_10010EDB4( uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, uint64_t))
{
  uint64_t result = (void *)__DataStorage._bytes.getter();
  uint64_t v9 = result;
  if (result)
  {
    uint64_t result = (void *)__DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_17:
      __break(1u);
      return result;
    }

    uint64_t v9 = (void *)((char *)v9 + a1 - (void)result);
  }

  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v12 = __DataStorage._length.getter();
  if (!v9)
  {
    uint64_t result = a4(&v17, 0LL, 0LL);
    if (v4) {
      return result;
    }
    unsigned int v14 = v17;
    goto LABEL_14;
  }

  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = a4(&v15, v9, v13);
  if (!v4)
  {
    unsigned int v14 = v15;
LABEL_14:
    char v16 = 0;
    return (void *)v14;
  }

  return result;
}

void *sub_10010EE94( uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  if (a1)
  {
    uint64_t result = a3(&v6, a1, a2 - a1);
    if (!v3) {
      return (void *)v6;
    }
  }

  else
  {
    uint64_t result = a3(&var4, 0LL, 0LL);
    if (!v3) {
      return (void *)var4;
    }
  }

  return result;
}

uint64_t sub_10010EF00()
{
  return sub_10003A9EC(v0, v1);
}

uint64_t sub_10010EF0C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  return sub_10003A9EC(a13, a18);
}

void *sub_10010EF18( uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, uint64_t))
{
  return sub_10010EDB4(a1, a2, a3, a4);
}

NSNumber sub_10010EF24(uint64_t a1)
{
  char v1 = a1;
  sub_1000C0368(a1, qword_1002AECD0, &OBJC_CLASS___NSNumber_ptr);
  if ((v1 & 1) != 0) {
    Swift::Int v2 = 37LL;
  }
  else {
    Swift::Int v2 = 36LL;
  }
  return NSNumber.init(integerLiteral:)(v2);
}

uint64_t sub_10010EF68()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

uint64_t ExternalGatewaySheetRequest.options.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 24));
}

uint64_t sub_10010EF78()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 32));
}

void *sub_10010EF80()
{
  uint64_t v0 = type metadata accessor for DaemonConnection();
  uint64_t v1 = sub_100019310(v0, 64LL);
  uint64_t result = sub_100110F0C();
  qword_1002EB970 = v1;
  return result;
}

uint64_t sub_10010EFB4()
{
  id v0 = sub_10010F1D8(0xD000000000000024LL, 0x800000010021CCD0LL, 0LL);
  id v1 =  [(id)objc_opt_self(NSXPCInterface) interfaceWithProtocol:&OBJC_PROTOCOL___ASDOctaneServiceInternalProtocol];
  [v0 setRemoteObjectInterface:v1];
  uint64_t v13 = sub_10010F250;
  uint64_t v14 = 0LL;
  aBlock = _NSConcreteStackBlock;
  uint64_t v10 = 1107296256LL;
  uint64_t v11 = sub_1000169C8;
  uint64_t v12 = &unk_1002856E0;
  Swift::Int v2 = _Block_copy(&aBlock);
  [v0 setInterruptionHandler:v2];
  _Block_release(v2);
  uint64_t v13 = sub_10010F25C;
  uint64_t v14 = 0LL;
  aBlock = _NSConcreteStackBlock;
  uint64_t v10 = 1107296256LL;
  uint64_t v11 = sub_1000169C8;
  uint64_t v12 = &unk_100285708;
  uint64_t v3 = _Block_copy(&aBlock);
  [v0 setInvalidationHandler:v3];
  _Block_release(v3);
  [v0 resume];
  uint64_t v13 = sub_10010F318;
  uint64_t v14 = 0LL;
  aBlock = _NSConcreteStackBlock;
  uint64_t v10 = 1107296256LL;
  uint64_t v11 = sub_10010F4F0;
  uint64_t v12 = &unk_100285730;
  uint64_t v4 = _Block_copy(&aBlock);
  id v5 = [v0 remoteObjectProxyWithErrorHandler:v4];
  _Block_release(v4);
  _bridgeAnyObjectToAny(_:)(&aBlock, v5);

  swift_unknownObjectRelease(v5);
  uint64_t v6 = sub_1000175B0(&qword_1002B11B0);
  else {
    return 0LL;
  }
}

id sub_10010F1D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3));
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v8 = [v6 initWithMachServiceName:v7 options:a3];

  return v8;
}

void sub_10010F250()
{
}

void sub_10010F25C()
{
}

void sub_10010F268(const char *a1)
{
  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v2 = sub_100077D08();
  uint64_t v3 = sub_100092ADC(v2, (uint64_t)qword_1002EB9D0);
  os_log_type_t v5 = sub_1001123EC(v3, v4);
  if (os_log_type_enabled(oslog, v5))
  {
    id v6 = (uint8_t *)sub_10001A414();
    *(_WORD *)id v6 = 0;
    sub_1001123C8((void *)&_mh_execute_header, oslog, v5, a1, v6);
    sub_10001A408((uint64_t)v6);
  }
}

void sub_10010F318(uint64_t a1)
{
  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_100018F68(v2, (uint64_t)qword_1002EB9D0);
  swift_errorRetain(a1);
  uint64_t v3 = swift_errorRetain(a1);
  oslog = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(oslog, v4);
  if (os_log_type_enabled(oslog, v5))
  {
    id v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v7;
    *(_DWORD *)id v6 = 136446210;
    swift_getErrorValue(a1, v14, v13);
    uint64_t v8 = Error.localizedDescription.getter(v13[1], v13[2]);
    unint64_t v10 = v9;
    uint64_t v12 = sub_1000CF360(v8, v9, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, v13, v6 + 4);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl( (void *)&_mh_execute_header,  oslog,  v5,  "Could not create remote object proxy, error:%{public}s",  v6,  0xCu);
    swift_arrayDestroy(v7, 1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

void sub_10010F4F0(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
}

void sub_10010F540()
{
  id v1 = *(void **)(v0 + 56);
  if (v1)
  {
    [v1 invalidateBag];
  }

  else
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v2 = sub_100077D08();
    uint64_t v3 = sub_100092ADC(v2, (uint64_t)qword_1002EB9D0);
    os_log_type_t v5 = sub_1001123EC(v3, v4);
    if (sub_1001123B8(v5, v6, v7, v8, v9, v10, v11, v12, v20, v22))
    {
      uint64_t v13 = (_WORD *)sub_10001A414();
      sub_100112414(v13);
      sub_100112390( (void *)&_mh_execute_header,  v14,  v15,  "Unable to communicate with daemon to invalidate the bag",  v16,  v17,  v18,  v19,  v21,  v23);
      sub_10001A408(v0);
    }

    sub_1001123F4(v23);
  }

void sub_10010F5E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 56);
  if (v3)
  {
    uint64_t v6 = sub_1000175B0(&qword_1002A9098);
    uint64_t v7 = sub_100019310(v6, 48LL);
    *(_OWORD *)(v7 + 16) = xmmword_1001F3C00;
    *(void *)(v7 + 32) = a1;
    *(void *)(v7 + 4sub_1001A93A0(0LL, 0) = a2;
    uint64_t KeyPath = swift_getKeyPath(&unk_1001FFFF0);
    uint64_t v9 = sub_100019310((uint64_t)&unk_1002857B8, 24LL);
    *(void *)(v9 + 16) = v3;
    swift_unknownObjectRetain_n(v3, 2LL);
    swift_bridgeObjectRetain(a2);
    sub_1000E2A04(v7, KeyPath, (uint64_t)sub_10011233C, v9);
    swift_bridgeObjectRelease(v7);
    sub_10009B6D8();
    swift_release(KeyPath);
    swift_release(v9);
  }

  else
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v10 = sub_100077D08();
    uint64_t v11 = sub_100092ADC(v10, (uint64_t)qword_1002EB9D0);
    os_log_type_t v13 = sub_1001123EC(v11, v12);
    if (sub_1001123B8(v13, v14, v15, v16, v17, v18, v19, v20, v28, v30))
    {
      uint64_t v21 = (_WORD *)sub_10001A414();
      sub_100112414(v21);
      sub_100112390( (void *)&_mh_execute_header,  v22,  v23,  "Unable to communicate with daemon to signal queue refresh",  v24,  v25,  v26,  v27,  v29,  v31);
      sub_10001A408(v2);
    }

    sub_1001123A4(v31);
  }

uint64_t sub_10010F72C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*(void *)a2 + 32LL);
  *(void *)(*(void *)a2 + 32LL) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v3);
}

void sub_10010F75C(uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + 56;
  uint64_t v5 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v9 = 0LL;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v10 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    int v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    swift_bridgeObjectRetain(v17);
    NSString v18 = String._bridgeToObjectiveC()();
    uint64_t v19 = swift_allocObject(&unk_1002857E0, 32LL, 7LL);
    *(void *)(v19 + 16) = v16;
    *(void *)(v19 + 24) = v17;
    v21[4] = sub_100112368;
    uint64_t v22 = v19;
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 1107296256LL;
    void v21[2] = sub_10010FBAC;
    v21[3] = &unk_1002857F8;
    int v20 = _Block_copy(v21);
    swift_release(v22);
    [a2 refreshQueueForBundleId:v18 completion:v20];
    _Block_release(v20);

    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_23;
    }

    if (v12 >= v8) {
      goto LABEL_21;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v12);
    ++v9;
    if (!v13)
    {
      int64_t v9 = v12 + 1;
      if (v12 + 1 >= v8) {
        goto LABEL_21;
      }
      unint64_t v13 = *(void *)(v4 + 8 * v9);
      if (!v13)
      {
        int64_t v9 = v12 + 2;
        if (v12 + 2 >= v8) {
          goto LABEL_21;
        }
        unint64_t v13 = *(void *)(v4 + 8 * v9);
        if (!v13) {
          break;
        }
      }
    }

void sub_10010F954(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    sub_100018F68(v6, (uint64_t)qword_1002EB9D0);
    swift_errorRetain(a1);
    swift_bridgeObjectRetain(a3);
    swift_errorRetain(a1);
    uint64_t v7 = swift_bridgeObjectRetain(a3);
    oslog = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.error.getter(oslog, v8);
    if (os_log_type_enabled(oslog, v9))
    {
      uint64_t v10 = swift_slowAlloc(22LL, -1LL);
      uint64_t v11 = swift_slowAlloc(64LL, -1LL);
      uint64_t v19 = v11;
      *(_DWORD *)uint64_t v10 = 136446466;
      swift_bridgeObjectRetain(a3);
      uint64_t v18 = sub_1000CF360(a2, a3, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v10 + 4);
      swift_bridgeObjectRelease_n(a3, 3LL);
      *(_WORD *)(v10 + 12) = 2082;
      swift_getErrorValue(a1, v17, v16);
      uint64_t v12 = Error.localizedDescription.getter(v16[1], v16[2]);
      unint64_t v14 = v13;
      uint64_t v18 = sub_1000CF360(v12, v13, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v10 + 14);
      swift_bridgeObjectRelease(v14);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  v9,  "Failed to refresh queue for %{public}s: %{public}s",  (uint8_t *)v10,  0x16u);
      swift_arrayDestroy(v11, 2LL);
      swift_slowDealloc(v11, -1LL, -1LL);
      swift_slowDealloc(v10, -1LL, -1LL);

      swift_errorRelease(a1);
    }

    else
    {
      swift_errorRelease(a1);
      swift_bridgeObjectRelease_n(a3, 2LL);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }
  }

void sub_10010FBAC(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void *))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4(a2);
  swift_release(v3);
}

void sub_10010FC00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v7 = swift_bridgeObjectRetain();
    sub_100186F84(v7);
    sub_10001748C();
    sub_100035734();
    uint64_t v8 = *(void **)(v3 + 56);
    if (v8)
    {
      swift_unknownObjectRetain(v8);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_release();
      NSString v10 = String._bridgeToObjectiveC()();
      uint64_t v11 = (void *)sub_100019310((uint64_t)&unk_100285768, 40LL);
      void v11[2] = a1;
      void v11[3] = a2;
      v11[4] = a3;
      aBlock[4] = sub_1001122F8;
      void aBlock[5] = v11;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_10010FBAC;
      aBlock[3] = &unk_100285780;
      uint64_t v12 = _Block_copy(aBlock);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_release();
      [v8 revokeEntitlementsForProductIdentifiers:isa forBundleId:v10 completion:v12];
      _Block_release(v12);
      swift_unknownObjectRelease(v8);
    }

    else
    {
      swift_release();
      if (qword_1002A8D90 != -1) {
        swift_once(&qword_1002A8D90, sub_100183E34);
      }
      uint64_t v13 = sub_100077D08();
      uint64_t v14 = sub_100092ADC(v13, (uint64_t)qword_1002EB9D0);
      os_log_type_t v16 = sub_1001123EC(v14, v15);
      if (sub_1001123B8(v16, v17, v18, v19, v20, v21, v22, v23, v31, v33))
      {
        int v24 = (_WORD *)sub_10001A414();
        sub_100112414(v24);
        sub_100112390( (void *)&_mh_execute_header,  v25,  v26,  "Unable to communicate with daemon to revoke entitlements",  v27,  v28,  v29,  v30,  v32,  v34);
        sub_10001A408(0LL);
      }
    }
  }

void sub_10010FDD8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    sub_100018F68(v8, (uint64_t)qword_1002EB9D0);
    swift_errorRetain(a1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain(a1);
    swift_bridgeObjectRetain();
    uint64_t v9 = swift_bridgeObjectRetain();
    oslog = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.error.getter(oslog, v10);
    if (os_log_type_enabled(oslog, v11))
    {
      uint64_t v12 = swift_slowAlloc(32LL, -1LL);
      uint64_t v13 = swift_slowAlloc(96LL, -1LL);
      uint64_t v24 = v13;
      *(_DWORD *)uint64_t v12 = 136315650;
      uint64_t v14 = swift_bridgeObjectRetain();
      uint64_t v15 = Array.description.getter(v14, &type metadata for String);
      unint64_t v17 = v16;
      swift_bridgeObjectRelease();
      uint64_t v23 = sub_1000CF360(v15, v17, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v12 + 4);
      swift_bridgeObjectRelease_n(a2, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v23 = sub_1000CF360(a3, a4, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v12 + 14);
      swift_bridgeObjectRelease_n(a4, 3LL);
      *(_WORD *)(v12 + 22) = 2080;
      swift_getErrorValue(a1, v22, v21);
      uint64_t v18 = Error.localizedDescription.getter(v21[1], v21[2]);
      uint64_t v23 = sub_1000CF360(v18, v19, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v12 + 24);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  v11,  "Failed to revoke entitlements of %s for %{public}s: %s",  (uint8_t *)v12,  0x20u);
      swift_arrayDestroy(v13, 3LL);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);

      swift_errorRelease(a1);
    }

    else
    {
      swift_errorRelease(a1);
      swift_bridgeObjectRelease_n(a4, 2LL);
      swift_bridgeObjectRelease_n(a2, 2LL);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }
  }

void sub_1001100C8()
{
  uint64_t v2 = *(void **)(v0 + 56);
  if (v2)
  {
    sub_10009B6E0();
    sub_1000B52F0();
    uint64_t v4 = v3;
    sub_1000B3DDC();
    String._bridgeToObjectiveC()();
    sub_100035734();
    sub_1000B3DEC();
    int v26 = (os_log_s *)String._bridgeToObjectiveC()();
    sub_10001EDA0();
    [v2 transactionDeleted:v4 productID:v1 forBundleID:v26];
    sub_10009B6D8();
  }

  else
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v5 = sub_100077D08();
    uint64_t v6 = sub_100092ADC(v5, (uint64_t)qword_1002EB9D0);
    os_log_type_t v8 = sub_1001123EC(v6, v7);
    if (sub_1001123B8(v8, v9, v10, v11, v12, v13, v14, v15, v23, v25))
    {
      unint64_t v16 = (_WORD *)sub_10001A414();
      sub_100112414(v16);
      sub_100112390( (void *)&_mh_execute_header,  v17,  v18,  "Unable to communicate with daemon to notify of deleted transaction",  v19,  v20,  v21,  v22,  v24,  v26);
      sub_10001A408(v0);
    }
  }

  sub_1001123A4(v26);
}

void sub_1001101BC()
{
  id v1 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  sub_1000B41BC();
  uint64_t v3 = v2;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  id v30 = 0LL;
  id v5 = [v1 dataWithJSONObject:isa options:0 error:&v30];

  id v6 = v30;
  if (v5)
  {
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);

    uint64_t v7 = *(void **)(v0 + 56);
    if (v7)
    {
      swift_unknownObjectRetain(v7);
      Class v8 = Data._bridgeToObjectiveC()().super.isa;
      sub_1000B3DEC();
      NSString v9 = String._bridgeToObjectiveC()();
      sub_10001EDA0();
      [v7 transactionUpdated:v8 forBundleID:v9];
      sub_10011243C();
      swift_unknownObjectRelease(v7);
    }

    else
    {
      if (qword_1002A8D90 != -1) {
        swift_once(&qword_1002A8D90, sub_100183E34);
      }
      uint64_t v22 = sub_100077D08();
      uint64_t v23 = (os_log_s *)sub_100092ADC(v22, (uint64_t)qword_1002EB9D0);
      os_log_type_t v25 = static os_log_type_t.error.getter(v23, v24);
      if (os_log_type_enabled(v23, v25))
      {
        int v26 = (uint8_t *)sub_10001A414();
        *(_WORD *)int v26 = 0;
        sub_1001123C8( (void *)&_mh_execute_header,  v23,  v25,  "Unable to communicate with daemon to notify of updated transaction",  v26);
        sub_10001A408((uint64_t)v26);
      }

      sub_10011243C();
    }
  }

  else
  {
    int v10 = v6;
    uint64_t v11 = _convertNSErrorToError(_:)(v6);

    swift_willThrow(v12);
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v13 = sub_100077D08();
    sub_100018F68(v13, (uint64_t)qword_1002EB9D0);
    swift_errorRetain(v11);
    uint64_t v14 = swift_errorRetain(v11);
    int v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v17 = static os_log_type_t.error.getter(v15, v16);
    if (os_log_type_enabled(v15, v17))
    {
      int v18 = (uint8_t *)sub_100019464(12LL);
      int v19 = (void *)sub_100019464(32LL);
      id v30 = v19;
      *(_DWORD *)int v18 = 136446210;
      swift_getErrorValue(v11, v29, v28);
      uint64_t v20 = Error.localizedDescription.getter(v28[1], v28[2]);
      uint64_t v27 = sub_1000CF360(v20, v21, (uint64_t *)&v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28, v18 + 4);
      sub_10001EDA0();
      sub_1000E5624();
      sub_1000E5624();
      _os_log_impl( (void *)&_mh_execute_header,  v15,  v17,  "Error serializing transaction for updated transaction: %{public}s",  v18,  0xCu);
      swift_arrayDestroy(v19, 1LL);
      sub_10001A408((uint64_t)v19);
      sub_10001A408((uint64_t)v18);

      sub_1000E5624();
    }

    else
    {
      sub_1000E5624();
      sub_1000E5624();
      sub_1000E5624();
    }
  }

  sub_1001123D0();
}

void sub_10011050C(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 56);
  if (v3)
  {
    [v3 updatePort:a1];
  }

  else
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v4 = sub_100077D08();
    uint64_t v5 = sub_100092ADC(v4, (uint64_t)qword_1002EB9D0);
    os_log_type_t v7 = sub_1001123EC(v5, v6);
    if (sub_1001123B8(v7, v8, v9, v10, v11, v12, v13, v14, v22, v24))
    {
      int v15 = (_WORD *)sub_10001A414();
      sub_100112414(v15);
      sub_100112390( (void *)&_mh_execute_header,  v16,  v17,  "Unable to communicate with daemon to update the port",  v18,  v19,  v20,  v21,  v23,  v25);
      sub_10001A408(v1);
    }

    sub_1001123F4(v25);
  }

void sub_1001105B4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, void *a6)
{
  uint64_t v11 = swift_bridgeObjectRetain();
  sub_100110870(v11, a1);
  swift_bridgeObjectRelease();
  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v12 = sub_100077D08();
  sub_100018F68(v12, (uint64_t)qword_1002EB9D0);
  uint64_t v13 = swift_bridgeObjectRetain_n(a5, 2LL);
  int v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v24 = a4;
    uint64_t v16 = sub_100019464(22LL);
    int v17 = (void *)sub_100019464(8LL);
    uint64_t v25 = sub_100019464(32LL);
    uint64_t v27 = v25;
    *(_DWORD *)uint64_t v16 = 138412546;
    sub_1000C0368(v25, qword_1002AECD0, &OBJC_CLASS___NSNumber_ptr);
    if ((a3 & 1) != 0) {
      Swift::Int v18 = 37LL;
    }
    else {
      Swift::Int v18 = 36LL;
    }
    Class isa = NSNumber.init(integerLiteral:)(v18).super.super.isa;
    uint64_t v26 = (uint64_t)isa;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v16 + 4);
    *int v17 = isa;
    *(_WORD *)(v16 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v26 = sub_1000CF360(v24, a5, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v16 + 14);
    swift_bridgeObjectRelease_n(a5, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "sending push %@ from %s", (uint8_t *)v16, 0x16u);
    sub_1000175B0(&qword_1002B6F90);
    sub_100112430();
    sub_10001A408((uint64_t)v17);
    sub_100112430();
    sub_10001A408(v25);
    sub_10001A408(v16);
  }

  else
  {

    uint64_t v20 = swift_bridgeObjectRelease_n(a5, 2LL);
  }

  sub_1000C0368(v20, qword_1002AECD0, &OBJC_CLASS___NSNumber_ptr);
  if ((a3 & 1) != 0) {
    Swift::Int v21 = 37LL;
  }
  else {
    Swift::Int v21 = 36LL;
  }
  Class v22 = NSNumber.init(integerLiteral:)(v21).super.super.isa;
  sub_10001748C();
  swift_bridgeObjectRelease();
  Class v23 = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  [a6 simulateStoreKitPushWithAction:v22 forBundleIdentifiers:v23];

  sub_1001123D0();
}

unint64_t *sub_100110870(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) > *(void *)(a2 + 16) >> 3) {
    return sub_100111808(a1, a2);
  }
  sub_1001110AC(a1);
  return (unint64_t *)a2;
}

void sub_1001108C0(uint64_t a1, uint64_t a2, void (*a3)(void *))
{
  LOBYTE(v24) = a1;
  uint64_t v6 = swift_retain();
  sub_100112420(v6, v7, v8, v9, v10, v11, v12, v13, (uint64_t)v23, v24);
  sub_10001EDD8();
  uint64_t v14 = v23[2];
  swift_bridgeObjectRelease();
  if (v14)
  {
    uint64_t v15 = swift_retain();
    sub_100112420(v15, v16, v17, v18, v19, v20, v21, v22, (uint64_t)v23, a1);
    sub_10001EDD8();
    a3(v23);
    swift_bridgeObjectRelease();
  }

  uint64_t v24 = a1;
  Class v23 = &_swiftEmptySetSingleton;
  swift_retain();
  swift_setAtReferenceWritableKeyPath(&v24, a2, &v23);
  sub_10001EDD8();
  sub_100041AF4();
}

void sub_100110964(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 56);
  if (v2)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4)
    {
      sub_10009B6E0();
      specialized ContiguousArray.reserveCapacity(_:)(v4);
      uint64_t v5 = (uint64_t *)(a1 + 32);
      do
      {
        uint64_t v6 = *v5++;
        id v7 = [objc_allocWithZone(NSNumber) initWithUnsignedInteger:v6];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v7);
        uint64_t v8 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
        uint64_t v9 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v7);
        uint64_t v10 = specialized ContiguousArray._endMutation()(v9);
        --v4;
      }

      while (v4);
    }

    else
    {
      uint64_t v10 = sub_10009B6E0();
    }

    sub_1000C0368(v10, qword_1002AECD0, &OBJC_CLASS___NSNumber_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    sub_10001EDA0();
    oslog = (os_log_s *)String._bridgeToObjectiveC()();
    objc_msgSend(v2, "removeTransactionIdentifiersFromCache:forBundleIdentifier:", isa);
    sub_10009B6D8();
  }

  else
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v11 = sub_100077D08();
    oslog = (os_log_s *)sub_100092ADC(v11, (uint64_t)qword_1002EB9D0);
    os_log_type_t v13 = static os_log_type_t.error.getter(oslog, v12);
    if (os_log_type_enabled(oslog, v13))
    {
      uint64_t v14 = (_WORD *)sub_10001A414();
      sub_100112414(v14);
      sub_1001123C8( (void *)&_mh_execute_header,  oslog,  v13,  "Unable to communicate with daemon to notify of deleted transactions",  (uint8_t *)v1);
      sub_10001A408(v1);
    }
  }
}

void sub_100110B38(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void **)(v3 + 56);
  if (v5)
  {
    swift_unknownObjectRetain(*(void *)(v3 + 56));
    if (a3 >> 60 == 15) {
      Class isa = 0LL;
    }
    else {
      Class isa = Data._bridgeToObjectiveC()().super.isa;
    }
    oslog = (os_log_s *)UUID._bridgeToObjectiveC()().super.isa;
    [v5 receiveEventOfType:a1 eventData:isa identifier:oslog];
    swift_unknownObjectRelease(v5);
  }

  else
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v8 = sub_100077D08();
    oslog = (os_log_s *)sub_100092ADC(v8, (uint64_t)qword_1002EB9D0);
    os_log_type_t v10 = static os_log_type_t.error.getter(oslog, v9);
    if (os_log_type_enabled(oslog, v10))
    {
      uint64_t v11 = (uint8_t *)sub_100019464(12LL);
      *(_DWORD *)uint64_t v11 = 134217984;
      uint64_t v13 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v11 + 4);
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  v10,  "Unable to communicate with daemon to notify of event %ld",  v11,  0xCu);
      sub_10001A408((uint64_t)v11);

      sub_100041AF4();
      return;
    }
  }

  sub_1001123A4(oslog);
}

void sub_100110C9C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t sub_100110CDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8 = *(void *)(a1 + 40);
  swift_bridgeObjectRetain(v8);
  sub_1000B3C84(a2, a3, v8);
  LOBYTE(a3) = v9;
  uint64_t result = swift_bridgeObjectRelease(v8);
  *a4 = a3 & 1;
  return result;
}

void sub_100110D68( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t sub_100110DAC@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v8 = a2 + 40;
  if ((a1 & 1) != 0)
  {
    swift_beginAccess(v8, v15, 33LL, 0LL);
    swift_bridgeObjectRetain();
    char v9 = sub_1001A0924(&v14, a3, a4);
    swift_endAccess(v15);
    uint64_t result = swift_bridgeObjectRelease();
    char v11 = v9 & 1;
  }

  else
  {
    swift_beginAccess(v8, v15, 33LL, 0LL);
    sub_10011134C(a3, a4);
    uint64_t v13 = v12;
    uint64_t result = swift_endAccess(v15);
    if (v13) {
      uint64_t result = swift_bridgeObjectRelease();
    }
    char v11 = v13 != 0;
  }

  *a5 = v11;
  return result;
}

uint64_t sub_100110E88()
{
  swift_unknownObjectRelease(*(void *)(v0 + 56));
  return v0;
}

uint64_t sub_100110ECC()
{
  return swift_deallocClassInstance(v0, 64LL, 7LL);
}

uint64_t type metadata accessor for DaemonConnection()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService16DaemonConnection);
}

void *sub_100110F0C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_10001DAD0();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v7);
  sub_10001DAD0();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v11);
  sub_10001DAD0();
  uint64_t v14 = v13 - v12;
  v1[2] = &_swiftEmptySetSingleton;
  v1[3] = &_swiftEmptySetSingleton;
  v1[4] = &_swiftEmptySetSingleton;
  v1[5] = &_swiftEmptySetSingleton;
  uint64_t v16 = sub_1000C0368(v15, (unint64_t *)&qword_1002B6F70, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v16);
  uint64_t v21 = _swiftEmptyArrayStorage;
  unint64_t v17 = sub_1001121F4();
  uint64_t v18 = sub_1000175B0((uint64_t *)&unk_1002B6F80);
  unint64_t v19 = sub_100112234();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v18, v19, v7, v17);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))( v6,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v2);
  v1[6] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002CLL,  0x800000010021CCA0LL,  v14,  v10,  v6,  0LL);
  v1[7] = sub_10010EFB4();
  return v1;
}

uint64_t sub_1001110AC(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16LL)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0LL;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    uint64_t v14 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    swift_bridgeObjectRetain();
    sub_10011134C(v15, v16);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v11 >= v7) {
      return swift_release();
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        return swift_release();
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          return swift_release();
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            return swift_release();
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }

uint64_t sub_100111244(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = static Hasher._hash(seed:_:)(*(void *)(*v2 + 40LL), a1);
  uint64_t v6 = -1LL << *(_BYTE *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) == 0) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(v4 + 48);
  if (*(void *)(v8 + 8 * v7) != a1)
  {
    uint64_t v9 = ~v6;
    do
    {
      unint64_t v7 = (v7 + 1) & v9;
      if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) == 0) {
        return 0LL;
      }
    }

    while (*(void *)(v8 + 8 * v7) != a1);
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v11 = *v2;
  uint64_t v14 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001A2E7C();
    uint64_t v11 = v14;
  }

  uint64_t v12 = *(void *)(*(void *)(v11 + 48) + 8 * v7);
  sub_1001114D8(v7);
  *uint64_t v2 = v14;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_10011134C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(v21);
  swift_bridgeObjectRetain();
  String.hash(into:)(v21, a1, a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0LL;
  }

  uint64_t v9 = *(void *)(v5 + 48);
  uint64_t v10 = (void *)(v9 + 16 * v8);
  uint64_t v11 = v10[1];
  BOOL v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
  {
    uint64_t v16 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v16;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      unint64_t v17 = (void *)(v9 + 16 * v8);
      uint64_t v18 = v17[1];
      BOOL v19 = *v17 == a1 && v18 == a2;
    }

    while (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) == 0);
  }

  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v14 = *v2;
  v21[0] = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001A2ADC();
    uint64_t v14 = v21[0];
  }

  uint64_t v15 = *(void *)(*(void *)(v14 + 48) + 16 * v8);
  sub_100111650(v8);
  *uint64_t v2 = v21[0];
  swift_bridgeObjectRelease();
  return v15;
}

unint64_t sub_1001114D8(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(v3);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(v3 + 48);
        uint64_t v11 = (void *)(v10 + 8 * v6);
        uint64_t v12 = static Hasher._hash(seed:_:)(*(void *)(v3 + 40), *v11) & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_15:
            uint64_t v15 = (void *)(v10 + 8 * v2);
            BOOL v16 = v2 != v6 || v15 >= v11 + 1;
            int64_t v2 = v6;
            if (v16)
            {
              *uint64_t v15 = *v11;
              int64_t v2 = v6;
            }
          }
        }

        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_15;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v17 = *(void *)(v3 + 16);
  BOOL v18 = __OFSUB__(v17, 1LL);
  uint64_t v19 = v17 - 1;
  if (v18)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v19;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

unint64_t sub_100111650(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v24);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v24, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        Swift::Int v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 >= v9 && v2 >= v14)
          {
LABEL_15:
            uint64_t v17 = *(void *)(v3 + 48);
            BOOL v18 = (_OWORD *)(v17 + 16 * v2);
            uint64_t v19 = (_OWORD *)(v17 + 16 * v6);
            BOOL v20 = v2 != v6 || v18 >= v19 + 1;
            int64_t v2 = v6;
            if (v20)
            {
              *BOOL v18 = *v19;
              int64_t v2 = v6;
            }
          }
        }

        else if (v14 >= v9 || v2 >= v14)
        {
          goto LABEL_15;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v21 = *(void *)(v3 + 16);
  BOOL v22 = __OFSUB__(v21, 1LL);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v23;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

unint64_t *sub_100111808(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v41 = a1 + 56;
    uint64_t v5 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v39 = ~v5;
    if (-v5 < 64) {
      uint64_t v6 = ~(-1LL << -(char)v5);
    }
    else {
      uint64_t v6 = -1LL;
    }
    unint64_t v7 = v6 & v4;
    int64_t v40 = (unint64_t)(63 - v5) >> 6;
    uint64_t v8 = a2 + 56;
    swift_bridgeObjectRetain();
    int64_t v9 = 0LL;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v11 = v10 | (v9 << 6);
    while (1)
    {
      BOOL v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      Hasher.init(_seed:)(v42);
      swift_bridgeObjectRetain();
      String.hash(into:)(v42, v18, v17);
      Swift::Int v19 = Hasher._finalize()();
      uint64_t v20 = -1LL << *(_BYTE *)(v2 + 32);
      unint64_t v21 = v19 & ~v20;
      if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) != 0) {
        break;
      }
LABEL_37:
      swift_bridgeObjectRelease();
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v12 = v9 + 1;
      if (__OFADD__(v9, 1LL))
      {
        __break(1u);
        goto LABEL_50;
      }

      if (v12 >= v40) {
        goto LABEL_48;
      }
      unint64_t v13 = *(void *)(v41 + 8 * v12);
      int64_t v14 = v9 + 1;
      if (!v13)
      {
        int64_t v14 = v9 + 2;
        if (v9 + 2 >= v40) {
          goto LABEL_48;
        }
        unint64_t v13 = *(void *)(v41 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v9 + 3;
          if (v9 + 3 >= v40) {
            goto LABEL_48;
          }
          unint64_t v13 = *(void *)(v41 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 4;
            if (v9 + 4 >= v40) {
              goto LABEL_48;
            }
            unint64_t v13 = *(void *)(v41 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v9 + 5;
              if (v9 + 5 >= v40)
              {
LABEL_48:
                sub_100018F04(a1);
                return (unint64_t *)v2;
              }

              unint64_t v13 = *(void *)(v41 + 8 * v15);
              if (!v13)
              {
                while (1)
                {
                  int64_t v14 = v15 + 1;
                  if (__OFADD__(v15, 1LL)) {
                    break;
                  }
                  if (v14 >= v40) {
                    goto LABEL_48;
                  }
                  unint64_t v13 = *(void *)(v41 + 8 * v14);
                  ++v15;
                  if (v13) {
                    goto LABEL_22;
                  }
                }

unint64_t *sub_100111C78( unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v41 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v43 = a3 + 56;
  while (2)
  {
    uint64_t v40 = v8;
    do
    {
      while (1)
      {
        int64_t v9 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v11 = (v10 - 1) & v10;
          unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_15;
        }

        int64_t v13 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
          __break(1u);
          goto LABEL_48;
        }

        int64_t v14 = (unint64_t)(a5[2] + 64LL) >> 6;
        int64_t v15 = a5[3];
        if (v13 >= v14) {
          goto LABEL_46;
        }
        uint64_t v16 = a5[1];
        unint64_t v17 = *(void *)(v16 + 8 * v13);
        if (!v17)
        {
          int64_t v18 = v9 + 2;
          int64_t v15 = v9 + 1;
          if (v9 + 2 >= v14) {
            goto LABEL_46;
          }
          unint64_t v17 = *(void *)(v16 + 8 * v18);
          if (!v17)
          {
            int64_t v15 = v9 + 2;
            if (v9 + 3 >= v14) {
              goto LABEL_46;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              int64_t v13 = v9 + 3;
              goto LABEL_14;
            }

            int64_t v18 = v9 + 4;
            int64_t v15 = v9 + 3;
            if (v9 + 4 >= v14) {
              goto LABEL_46;
            }
            unint64_t v17 = *(void *)(v16 + 8 * v18);
            if (!v17)
            {
              int64_t v13 = v9 + 5;
              int64_t v15 = v9 + 4;
              if (v9 + 5 >= v14) {
                goto LABEL_46;
              }
              unint64_t v17 = *(void *)(v16 + 8 * v13);
              if (!v17)
              {
                int64_t v38 = v9 + 6;
                while (v38 < v14)
                {
                  unint64_t v17 = *(void *)(v16 + 8 * v38++);
                  if (v17)
                  {
                    int64_t v13 = v38 - 1;
                    goto LABEL_14;
                  }
                }

                int64_t v15 = v14 - 1;
LABEL_46:
                a5[3] = v15;
                a5[4] = 0LL;
                swift_retain();
                return (unint64_t *)sub_100111F68(v41, a2, v40, a3);
              }

              goto LABEL_14;
            }
          }

          int64_t v13 = v18;
        }

Swift::Int sub_100111F68(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_35:
    swift_release();
    return (Swift::Int)v8;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_1000175B0((uint64_t *)&unk_1002B8BD0);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v5);
  uint64_t v8 = (_BYTE *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0LL;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0LL;
  Swift::Int v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }

    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_35;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_35;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_35;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }

unint64_t sub_1001121F4()
{
  unint64_t result = qword_1002AAFB0;
  if (!qword_1002AAFB0)
  {
    uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes(255LL);
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_1002AAFB0);
  }

  return result;
}

unint64_t sub_100112234()
{
  unint64_t result = qword_1002AAFB8;
  if (!qword_1002AAFB8)
  {
    uint64_t v1 = sub_100018EC0((uint64_t *)&unk_1002B6F80);
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002AAFB8);
  }

  return result;
}

uint64_t sub_100112278(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1001A93A0(0LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100112288(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100112290@<X0>(_BYTE *a1@<X8>)
{
  return sub_100110DAC(*(_BYTE *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t sub_1001122B0@<X0>(_BYTE *a1@<X8>)
{
  return sub_100110CDC(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_1001122CC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1001122F8(uint64_t a1)
{
}

uint64_t sub_100112304@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)a1 + 32LL);
  *a2 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100112318()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10011233C(uint64_t a1)
{
}

uint64_t sub_100112344()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100112368(uint64_t a1)
{
}

void sub_100112390( void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, os_log_t log)
{
}

void sub_1001123A4(id a1)
{
}

BOOL sub_1001123B8( os_log_type_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_log_t oslog)
{
  return os_log_type_enabled(oslog, a1);
}

void sub_1001123C8(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

uint64_t sub_1001123EC(uint64_t a1, uint64_t a2)
{
  return static os_log_type_t.error.getter(a1, a2);
}

void sub_1001123F4(id a1)
{
}

uint64_t sub_100112400( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return OS_dispatch_queue.sync<A>(execute:)(a1, &a9);
}

_WORD *sub_100112414(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

void *sub_100112420( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return swift_getAtKeyPath(&a9, &a10, v10);
}

uint64_t sub_100112430()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t sub_10011243C()
{
  return sub_10003A9EC(v1, v0);
}

uint64_t sub_100112448@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, unint64_t a7@<X8>)
{
  int v213 = a6;
  uint64_t v215 = a5;
  uint64_t v216 = a4;
  uint64_t v214 = a3;
  uint64_t v225 = a2;
  sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  sub_100043FD8();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v217 = (uint64_t)&v205 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v205 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v212 = (uint64_t)&v205 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v209 = (char *)&v205 - v19;
  __chkstk_darwin(v18);
  unint64_t v21 = (unint64_t)&v205 - v20;
  uint64_t v22 = sub_100092A18();
  uint64_t v220 = *(void *)(v22 - 8);
  sub_100043FD8();
  __chkstk_darwin(v23);
  sub_10001DAD0();
  unint64_t v26 = v25 - v24;
  sub_100116628();
  *(void *)a7 = v27;
  *(void *)(a7 + 8) = v28;
  uint64_t v29 = sub_1000B85BC(8u);
  if ((v30 & 1) != 0) {
    sub_1000B52F0();
  }
  *(void *)&NSDecimal number = v29;
  *(void *)(a7 + 24) = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  *(void *)(a7 + 32) = v31;
  *(void *)(a7 + 56) = sub_1000B3DDC();
  *(void *)(a7 + 64) = v32;
  uint64_t v33 = type metadata accessor for RenewalInfo(0LL);
  Date.init()(v33);
  uint64_t v34 = swift_allocObject(&unk_100285830, 24LL, 7LL);
  uint64_t v224 = v34;
  *(void *)(v34 + 16) = 1LL;
  static Date.now.getter(v34);
  sub_1000B5190();
  char v36 = v35;
  uint64_t v37 = *(void *)(v220 + 8);
  uint64_t v38 = sub_10011665C();
  uint64_t v221 = (int *)v33;
  uint64_t v222 = v22;
  uint64_t v218 = (void (*)(uint64_t, uint64_t))v37;
  unint64_t v219 = v26;
  if ((v36 & 1) != 0)
  {
    *(_BYTE *)(a7 + 16) = 5;
LABEL_19:
    uint64_t p_number = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_20;
  }

  sub_1000B6E1C(v21);
  uint64_t v7 = 1LL;
  int v39 = sub_10001D158(v21, 1LL, v22);
  sub_100049980(v21);
  if (v39 == 1)
  {
    uint64_t v40 = sub_100116534();
    swift_release(v40);
    if (v40)
    {
      if ((sub_1000B3D80() & 1) != 0)
      {
LABEL_8:
        *(_BYTE *)(a7 + 16) = 0;
        goto LABEL_16;
      }

      if (sub_100116620() == 5)
      {
        sub_1000B4F18();
        sub_100116678(v42, v43);
        if (!a1) {
          goto LABEL_8;
        }
        char v41 = 4;
      }

      else
      {
        char v41 = 2;
      }
    }

    else
    {
      char v41 = 3;
    }

    *(_BYTE *)(a7 + 16) = v41;
  }

  else
  {
    *(_BYTE *)(a7 + 16) = 1;
  }

LABEL_52:
    *(_BYTE *)(a7 + 72) = 0;
    *(void *)(a7 + 4sub_1001A93A0(0LL, 0) = 0LL;
    *(void *)(a7 + 48) = 0LL;
    uint64_t v83 = (uint64_t)v221;
    unint64_t v26 = v222;
    sub_100116614(v221[17]);
    *(_BYTE *)(a7 + *(int *)(v83 + sub_1000EE0FC( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int16 *)(v0 + 36) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 38) << 48),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56),  *(unsigned __int8 *)(v0 + 64)) = 4;
    *(_BYTE *)(a7 + *(int *)(v83 + sub_100019F7C((void *)(v0 + 72)) = 3;
    sub_100116684(a7 + *(int *)(v83 + 92), 1LL);
    sub_1001165F4();
    *(_BYTE *)(v86 + 8) = 1;
    sub_100116614(*(int *)(v83 + 80));
    goto LABEL_110;
  }

    __break(1u);
    return result;
  }

  sub_100125C20();
  unsigned __int8 v54 = *(uint64_t (**)(uint64_t))(v49 + 16);
  sub_100125BD4();
  uint64_t v55 = sub_100125C0C();
  uint64_t v56 = v54(v55);
  char v58 = v57;
  sub_100023BAC((uint64_t)a1, (uint64_t)&v105);
  sub_100035224(v110 + 40, (uint64_t)v109);
  sub_1001B1D60((uint64_t)&v105, v56, v58);
  swift_endAccess(v109);
  char v59 = v18;
  return swift_unknownObjectRelease(v59);
}

LABEL_163:
  if (v83 < 0) {
    uint64_t v204 = v83;
  }
  else {
    uint64_t v204 = v83 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_1000931C8();
  uint64_t v84 = _CocoaArrayWrapper.endIndex.getter(v204);
  if (!v84) {
    goto LABEL_167;
  }
LABEL_41:
  uint64_t p_number = 0LL;
  a7 = v83 & 0xC000000000000001LL;
  uint64_t v206 = (int *)(v83 + 32);
  while (1)
  {
    if (a7)
    {
      sub_1000931C8();
      unint64_t v21 = sub_10011652C(p_number);
      sub_100024E84();
    }

    else
    {
      unint64_t v21 = *(void *)(v83 + 8 * p_number + 32);
      swift_retain();
    }

    uint64_t v7 = *(unsigned __int8 *)(v21 + 112);
    swift_release(v21);
    if ((v7 & 1) != 0) {
      break;
    }
    uint64_t v85 = p_number + 1;
    if (__OFADD__(p_number, 1LL))
    {
LABEL_155:
      __break(1u);
      goto LABEL_156;
    }

    ++p_number;
    if (v85 == v84)
    {
      uint64_t p_number = v84;
      break;
    }
  }

  uint64_t v211 = a1;
  if (v84 >= p_number)
  {
    if (p_number == v84) {
      goto LABEL_167;
    }
    uint64_t v7 = 1LL;
    a1 = v84;
  }

  else
  {
    uint64_t v7 = -1LL;
    a1 = p_number;
    uint64_t p_number = v84;
  }

  uint64_t v127 = 0LL;
  uint64_t v226 = v83 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v128 = v7;
  do
  {
    BOOL v129 = __OFADD__(v127, v7);
    v127 += v7;
    if (v129) {
      goto LABEL_152;
    }
    if (p_number == v84) {
      goto LABEL_153;
    }
    if (__OFADD__(p_number, 1LL)) {
      goto LABEL_154;
    }
    uint64_t v223 = v128;
    unint64_t v21 = v84;
    if (p_number + 1 != v84)
    {
      uint64_t v130 = p_number + 5;
      while (1)
      {
        unint64_t v21 = v130 - 4;
        if (a7)
        {
          sub_1000931C8();
          uint64_t p_number = sub_10011652C(v130 - 4);
          sub_100024E84();
        }

        else
        {
          if ((v21 & 0x8000000000000000LL) != 0) {
            goto LABEL_148;
          }
          if (v21 >= *(void *)(v226 + 16)) {
            goto LABEL_149;
          }
          uint64_t p_number = *(void *)(v83 + 8 * v130);
          ChannelPipeline.syncOperations.getter();
        }

        unint64_t v26 = *(unsigned __int8 *)(p_number + 112);
        sub_100024F0C();
        if ((v26 & 1) != 0) {
          goto LABEL_78;
        }
        uint64_t v131 = v130 - 3;
        if (__OFADD__(v21, 1LL)) {
          break;
        }
        ++v130;
        if (v131 == v84)
        {
          unint64_t v21 = v84;
          goto LABEL_78;
        }
      }

      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
      goto LABEL_155;
    }

LABEL_78:
    uint64_t v128 = v223 + v7;
    uint64_t p_number = v21;
  }

  while (v21 != a1);
  a1 = v211;
  if (!v127) {
    goto LABEL_167;
  }
  *(void *)&NSDecimal number = _swiftEmptyArrayStorage;
  sub_100032050();
  unint64_t v21 = 0LL;
  uint64_t p_number = (uint64_t)number;
  while (1)
  {
    uint64_t v132 = p_number;
    if (a7)
    {
      sub_1000931C8();
      uint64_t p_number = sub_10011652C(v21);
      sub_100024E84();
    }

    else
    {
      uint64_t p_number = *(void *)(v83 + 8 * v21 + 32);
      ChannelPipeline.syncOperations.getter();
    }

    char v133 = *(_BYTE *)(p_number + 112);
    sub_100024F0C();
    if ((v133 & 1) != 0) {
      break;
    }
    unint64_t v134 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      goto LABEL_159;
    }
    uint64_t p_number = v132;
    ++v21;
    if (v134 == v84)
    {
      unint64_t v21 = v84;
      goto LABEL_121;
    }
  }

  uint64_t p_number = v132;
LABEL_121:
  if (v127 < 0) {
    __break(1u);
  }
  uint64_t v7 = 0LL;
  while (v7 != v223)
  {
    if (a7)
    {
      uint64_t v198 = p_number;
      uint64_t p_number = sub_10011652C(v21);
    }

    else
    {
      if ((v21 & 0x8000000000000000LL) != 0)
      {
        __break(1u);
LABEL_162:
        __break(1u);
        goto LABEL_163;
      }

      if (v21 >= *(void *)(v226 + 16)) {
        goto LABEL_162;
      }
      uint64_t v198 = p_number;
      uint64_t p_number = *(void *)&v206[2 * v21];
      ChannelPipeline.syncOperations.getter();
    }

    a1 = *(void *)(p_number + 104);
    uint64_t v210 = *(void *)(p_number + 96);
    swift_bridgeObjectRetain();
    sub_100024F0C();
    unint64_t v199 = v198;
    *(void *)&NSDecimal number = v198;
    unint64_t v26 = *(void *)(v198 + 16);
    if (v26 >= *(void *)(v198 + 24) >> 1)
    {
      uint64_t p_number = (uint64_t)&number;
      sub_100032050();
      unint64_t v199 = (unint64_t)number;
    }

    *(void *)(v199 + 16) = v26 + 1;
    unint64_t v200 = v199 + 16 * v26;
    *(void *)(v200 + 32) = v210;
    *(void *)(v200 + 4sub_1001A93A0(0LL, 0) = a1;
    if (v21 == v84) {
      goto LABEL_157;
    }
    if (__OFADD__(v21, 1LL)) {
      goto LABEL_158;
    }
    unint64_t v26 = v199;
    uint64_t p_number = v84;
    if (v21 + 1 != v84)
    {
      a1 = v21 + 5;
      while (1)
      {
        uint64_t p_number = a1 - 4;
        if (a7)
        {
          sub_1000931C8();
          uint64_t v201 = sub_10011652C(a1 - 4);
          sub_100024E84();
        }

        else
        {
          if (p_number < 0) {
            goto LABEL_150;
          }
          uint64_t v201 = *(void *)(v83 + 8 * a1);
          swift_retain();
        }

        char v202 = *(_BYTE *)(v201 + 112);
        swift_release(v201);
        if ((v202 & 1) != 0) {
          break;
        }
        uint64_t v203 = a1 - 3;
        if (__OFADD__(p_number, 1LL)) {
          goto LABEL_147;
        }
        ++a1;
        if (v203 == v84)
        {
          uint64_t p_number = v84;
          break;
        }
      }
    }

    ++v7;
    unint64_t v21 = p_number;
    a1 = v211;
    uint64_t p_number = v26;
    if (v7 == v127)
    {
      sub_100024E84();
      uint64_t v38 = sub_100116670((uint64_t)&v229);
      goto LABEL_168;
    }
  }

LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  swift_once(&qword_1002A8D28, sub_10012A5D0);
LABEL_97:
  uint64_t v171 = *(void *)(qword_1002EB990 + 16);
  if (v171)
  {
    uint64_t v172 = (uint64_t *)(qword_1002EB990 + 48);
    while (1)
    {
      uint64_t v173 = *(v172 - 2);
      uint64_t v174 = *v172;
      uint64_t v175 = v172[1];
      BOOL v176 = v173 == a1 && *(v172 - 1) == p_number;
      if (v176 || (_stringCompareWithSmolCheck(_:_:expecting:)(v173, *(v172 - 1), a1, p_number, 0LL) & 1) != 0) {
        break;
      }
      v172 += 10;
      if (!--v171)
      {
        sub_10001EDA0();
        sub_100116668();
        uint64_t v174 = 0LL;
        uint64_t v175 = 0LL;
        goto LABEL_108;
      }
    }

    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000931C8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001EDA0();
    sub_100116668();
    swift_bridgeObjectRelease();
LABEL_108:
    uint64_t v83 = (uint64_t)v221;
    unint64_t v26 = v222;
  }

  else
  {
    sub_10001EDA0();
    sub_100116668();
    uint64_t v174 = 0LL;
    uint64_t v175 = 0LL;
  }

  uint64_t v177 = (void *)(a7 + *(int *)(v83 + 80));
  *uint64_t v177 = v174;
  v177[1] = v175;
  unint64_t v15 = v208;
  a1 = v211;
LABEL_110:
  uint64_t v178 = v212;
  sub_1000B6E1C(v212);
  int v179 = sub_100116584();
  sub_100049980(v178);
  if (v179 == 1)
  {
    char v181 = 2;
  }

  else
  {
    sub_1000B5088();
    char v181 = v180 & 1;
  }

  *(_BYTE *)(a7 + 73) = v181;
  sub_1000B6DC0(a7 + *(int *)(v83 + 48));
  sub_100116644();
  sub_1000B5190();
  Swift::Int v183 = v182;
  v218(v178, v26);
  if ((v183 & 1) != 0)
  {
    unint64_t v184 = 0x20101020100uLL >> (8 * sub_100116620());
  }

  else
  {
    LOBYTE(v184) = 2;
    Swift::Int v183 = (void *)a1;
  }

  uint64_t v185 = v214;
  *(_BYTE *)(a7 + 74) = v184;
  sub_10005A734(v185, v216);
  uint64_t v187 = v186;
  uint64_t v189 = v188;
  uint64_t v191 = v190;
  uint64_t v193 = v192;
  swift_bridgeObjectRelease();
  v194 = (void *)(a7 + *(int *)(v83 + 56));
  void *v194 = v187;
  v194[1] = v189;
  uint64_t v195 = (void *)(a7 + *(int *)(v83 + 52));
  *uint64_t v195 = v191;
  v195[1] = v193;
  uint64_t v196 = v217;
  sub_1000B5344(v217);
  if (sub_100116584() == 1)
  {
    static Date.distantPast.getter();

    swift_release(v225);
    sub_100049980(v196);
  }

  else
  {

    swift_release(v225);
    (*(void (**)(char *, uint64_t, unint64_t))(v220 + 32))(v15, v196, v26);
  }

  sub_100116684((uint64_t)v15, 0LL);
  sub_100114700((uint64_t)v15, a7 + *(int *)(v83 + 88));
  return swift_release(v224);
}

uint64_t _s15StoreKit_Shared11MessageTypeO8rawValueACSgSi_tcfC_0(unint64_t a1)
{
  if (a1 >= 6) {
    return 5LL;
  }
  else {
    return (0x40302010005uLL >> (8 * a1));
  }
}

void sub_1001133EC()
{
}

uint64_t sub_1001133F4@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = _s15StoreKit_Shared11MessageTypeO8rawValueACSgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_10011341C(uint64_t *a1@<X8>)
{
  *a1 = MessageType.rawValue.getter(*v1);
  sub_10001945C();
}

uint64_t sub_100113440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001162AC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10011349C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001162AC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001134E8(uint64_t a1)
{
  return sub_1000B2EBC(a1, *v1);
}

void sub_1001134F0(uint64_t *a1@<X8>)
{
  *a1 = sub_1000B7AB8(*v1);
  sub_10001945C();
}

uint64_t sub_100113514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001162E8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100113570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001162E8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001135BC(uint64_t a1)
{
  return j___s25ASOctaneSupportXPCService20ChannelPipelineErrorO4hash4intoys6HasherVz_tF(a1, *v1);
}

uint64_t sub_1001135C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100116324();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100113620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100116324();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10011366C(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 16);
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v3 = v1;
  if (v1 == 1)
  {
    uint64_t v4 = sub_1000B3DDC();
    uint64_t v3 = sub_1000D868C(v4, v5);
    swift_bridgeObjectRelease();
    swift_beginAccess(v2, v8, 1LL, 0LL);
    uint64_t v6 = *v2;
    *uint64_t v2 = v3;
    swift_retain();
    sub_10011475C(v6);
  }

  sub_10011476C(v1);
  return v3;
}

uint64_t sub_10011370C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1002729B0, a1, a2, &unk_1002A8E88);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x14) {
    return 20LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_100113760()
{
  return 20LL;
}

uint64_t sub_100113768(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001137A4 + 4 * byte_100200030[a1]))( 0x6D6E6F7269766E65LL,  0xEB00000000746E65LL);
}

unint64_t sub_1001137A4()
{
  return 0xD000000000000010LL;
}

uint64_t sub_100113958()
{
  return 0x446C6177656E6572LL;
}

uint64_t sub_100113978()
{
  return 0x506C6177656E6572LL;
}

uint64_t sub_100113998()
{
  return 0x79636E6572727563LL;
}

void sub_1001139B4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000175B0(&qword_1002B12C8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10001DAD0();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100019F58(a1, v10);
  unint64_t v12 = sub_100115AC8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_1002858F0, &unk_1002858F0, v12, v10, v11);
  uint64_t v13 = *(void *)v3;
  uint64_t v14 = *(void *)(v3 + 8);
  LOBYTE(v53) = 0;
  sub_10011639C(v13, v14);
  if (!v2)
  {
    LOBYTE(v53) = *(_BYTE *)(v3 + 16);
    char v54 = 1;
    unint64_t v15 = sub_100115CB0();
    sub_1001163B0(v15, v16, v17, (uint64_t)&unk_100285AA0, v15);
    uint64_t v18 = *(void *)(v3 + 24);
    uint64_t v19 = *(void *)(v3 + 32);
    LOBYTE(v53) = 2;
    sub_10011639C(v18, v19);
    sub_100116410(*(void *)(v3 + 40), *(void *)(v3 + 48), 3);
    uint64_t v20 = *(void *)(v3 + 56);
    uint64_t v21 = *(void *)(v3 + 64);
    LOBYTE(v53) = 4;
    sub_10011639C(v20, v21);
    LOBYTE(v53) = *(_BYTE *)(v3 + 72);
    char v54 = 5;
    unint64_t v22 = sub_100115CEC();
    sub_10001DB44((uint64_t)&v53, (uint64_t)&v54, v5, (uint64_t)&unk_100285A10, v22);
    uint64_t v23 = *(unsigned __int8 *)(v3 + 73);
    LOBYTE(v53) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, &v53, v5);
    LOBYTE(v53) = *(_BYTE *)(v3 + 74);
    char v54 = 7;
    unint64_t v24 = sub_100115D28();
    sub_1001163B0(v24, v25, v26, (uint64_t)&unk_100285980, v24);
    uint64_t v27 = (int *)type metadata accessor for RenewalInfo(0LL);
    uint64_t v28 = v3 + v27[12];
    LOBYTE(v53) = 8;
    uint64_t v29 = type metadata accessor for Date(0LL);
    uint64_t v30 = sub_1000221A8( (unint64_t *)&qword_1002A93C8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    sub_1001163D4(v28, (uint64_t)&v53, v5, v29, v30);
    uint64_t v31 = sub_10001DB50(v27[13]);
    LOBYTE(v53) = 9;
    sub_10011639C(v31, v32);
    uint64_t v33 = sub_10001DB50(v27[14]);
    LOBYTE(v53) = 10;
    sub_10011639C(v33, v34);
    uint64_t v35 = v3 + v27[15];
    LOBYTE(v53) = 11;
    sub_10001DB44(v35, (uint64_t)&v53, v5, v29, v30);
    LOBYTE(v53) = *(_BYTE *)(v3 + v27[16]);
    char v54 = 12;
    unint64_t v36 = sub_100115D64();
    sub_1001163B0(v36, v37, v38, (uint64_t)&unk_100286840, v36);
    uint64_t v39 = sub_10001DB50(v27[17]);
    sub_100116410(v39, v40, 13);
    LOBYTE(v53) = *(_BYTE *)(v3 + v27[18]);
    char v54 = 14;
    unint64_t v41 = sub_100115DA0();
    sub_1001163B0(v41, v42, v43, (uint64_t)&unk_1002867B0, v41);
    uint64_t v53 = *(void *)(v3 + v27[21]);
    char v54 = 15;
    uint64_t v44 = sub_1000175B0(&qword_1002A93B8);
    uint64_t v45 = sub_100115DDC( (unint64_t *)&qword_1002A93C0,  (uint64_t)&protocol witness table for String,  (const char *)&protocol conformance descriptor for <A> [A]);
    sub_10001DB44((uint64_t)&v53, (uint64_t)&v54, v5, v44, v45);
    uint64_t v46 = v3 + v27[22];
    LOBYTE(v53) = 16;
    sub_1001163D4(v46, (uint64_t)&v53, v5, v29, v30);
    uint64_t v47 = v3 + v27[23];
    LOBYTE(v53) = 17;
    sub_1001163D4(v47, (uint64_t)&v53, v5, v29, v30);
    char v48 = (uint64_t *)(v3 + v27[19]);
    uint64_t v49 = *v48;
    uint64_t v50 = *((unsigned __int8 *)v48 + 8);
    LOBYTE(v53) = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v49, v50, &v53, v5);
    uint64_t v51 = sub_10001DB50(v27[20]);
    sub_100116410(v51, v52, 19);
  }

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  sub_10001DAB8();
}

void sub_100113DC0(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v100 = a2;
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v101 = *(void *)(v3 - 8);
  uint64_t v102 = v3;
  sub_100043FD8();
  __chkstk_darwin(v4);
  sub_10001DAD0();
  uint64_t v103 = v6 - v5;
  sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  sub_100043FD8();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v97 - v12;
  __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v97 - v14;
  uint64_t v105 = sub_1000175B0(&qword_1002B1290);
  uint64_t v16 = *(void *)(v105 - 8);
  __chkstk_darwin(v105);
  sub_10001DAD0();
  uint64_t v19 = v18 - v17;
  uint64_t v109 = (int *)type metadata accessor for RenewalInfo(0LL);
  sub_100043FD8();
  __chkstk_darwin(v20);
  sub_10001DAD0();
  sub_100116628();
  *uint64_t v23 = v21;
  v23[1] = v22;
  uint64_t v107 = v23;
  uint64_t v25 = a1[3];
  uint64_t v24 = a1[4];
  unsigned int v26 = sub_100019F58(a1, v25);
  unint64_t v27 = sub_100115AC8();
  uint64_t v104 = v19;
  uint64_t v28 = v108;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_1002858F0, &unk_1002858F0, v27, v25, v24);
  int v29 = v28;
  uint64_t v106 = a1;
  if (v28)
  {
    uint64_t v108 = v28;
    LODWORD(v33) = 0;
    sub_100116370();
  }

  else
  {
    uint64_t v98 = v10;
    uint64_t v99 = v13;
    LODWORD(v25) = v16;
    char v111 = 1;
    unint64_t v30 = sub_100115B04();
    uint64_t v33 = v105;
    sub_100116604((uint64_t)&unk_100285AA0, (uint64_t)&v111, v31, v32, v30);
    unint64_t v36 = v107;
    *((_BYTE *)v107 + 16) = v110;
    LODWORD(v13) = v25;
    v36[3] = sub_1001164DC(2);
    v36[4] = v37;
    uint64_t v38 = sub_1001165CC(3);
    v36[5] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v38, v39);
    v36[6] = v40;
    v36[7] = sub_1001164DC(4);
    v36[8] = v41;
    char v111 = 5;
    sub_100115B40();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&unk_100285A10, &v111, v33, &unk_100285A10);
    *((_BYTE *)v36 + 72) = v110;
    uint64_t v42 = sub_1001165CC(6);
    *((_BYTE *)v36 + 73) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v42, v43);
    char v111 = 7;
    unint64_t v44 = sub_100115B7C();
    sub_100116604((uint64_t)&unk_100285980, (uint64_t)&v111, v45, v46, v44);
    int v29 = 0;
    *((_BYTE *)v36 + 74) = v110;
    LOBYTE(v11sub_1001A93A0(0LL, 0) = 8;
    uint64_t v47 = sub_1000221A8( &qword_1002A93E8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    LODWORD(asub_1001A93A0(v0, 1) = (_DWORD)v15;
    LODWORD(v19) = v47;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v102, &v110, v33, v102, v47);
    sub_100114700((uint64_t)v15, (uint64_t)v36 + v109[12]);
    uint64_t v48 = sub_1001165CC(9);
    uint64_t v50 = KeyedDecodingContainer.decode(_:forKey:)(v48, v49);
    uint64_t v108 = 0LL;
    uint64_t v52 = (void *)((char *)v36 + v109[13]);
    *uint64_t v52 = v50;
    v52[1] = v51;
    uint64_t v53 = sub_1001164DC(10);
    uint64_t v108 = 0LL;
    char v54 = (void *)((char *)v107 + v109[14]);
    *char v54 = v53;
    v54[1] = v55;
    LOBYTE(v11sub_1001A93A0(0LL, 0) = 11;
    sub_100116594();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v56, v57, v58, v59);
    uint64_t v108 = 0LL;
    (*(void (**)(char *, uint64_t, uint64_t))(v101 + 32))((char *)v107 + v109[15], v103, v102);
    char v111 = 12;
    unint64_t v60 = sub_100115BB8();
    sub_100116514((uint64_t)&unk_100286840, v61, v62, v63, v60);
    uint64_t v108 = 0LL;
    *((_BYTE *)v107 + v109[16]) = v110;
    uint64_t v64 = sub_1001165BC(13);
    uint64_t v108 = 0LL;
    uint64_t v65 = (void *)((char *)v107 + v109[17]);
    *uint64_t v65 = v64;
    v65[1] = v66;
    char v111 = 14;
    unint64_t v67 = sub_100115BF4();
    sub_100116514((uint64_t)&unk_1002867B0, v68, v69, v70, v67);
    uint64_t v108 = 0LL;
    *((_BYTE *)v107 + v109[18]) = v110;
    uint64_t v71 = sub_1000175B0(&qword_1002A93B8);
    char v111 = 15;
    sub_100115DDC( &qword_1002A93E0,  (uint64_t)&protocol witness table for String,  (const char *)&protocol conformance descriptor for <A> [A]);
    uint64_t v72 = v71;
    uint64_t v73 = v71;
    unsigned int v26 = v104;
    uint64_t v74 = v108;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v72, &v111, v105, v73);
    uint64_t v108 = v74;
    if (v74)
    {
      sub_1001163C8();
      sub_100116458();
      LODWORD(v25) = 1;
    }

    else
    {
      *(void *)((char *)v107 + v109[21]) = v110;
      LOBYTE(v11sub_1001A93A0(0LL, 0) = 16;
      sub_100116594();
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v75, v76, v77, v78, v79);
      uint64_t v108 = 0LL;
      sub_100114700((uint64_t)v99, (uint64_t)v107 + v109[22]);
      LOBYTE(v11sub_1001A93A0(0LL, 0) = 17;
      sub_100116594();
      uint64_t v80 = v108;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v81, v82, v83, v84, v85);
      uint64_t v108 = v80;
      if (v80)
      {
        sub_1001163C8();
        sub_100116428();
        LODWORD(v104) = v86;
      }

      else
      {
        sub_100114700((uint64_t)v98, (uint64_t)v107 + v109[23]);
        LOBYTE(v11sub_1001A93A0(0LL, 0) = 18;
        uint64_t v87 = v108;
        uint64_t v88 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v110, v105);
        uint64_t v108 = v87;
        if (!v87)
        {
          uint64_t v90 = (char *)v107 + v109[19];
          *(void *)uint64_t v90 = v88;
          v90[8] = v89 & 1;
          uint64_t v91 = sub_1001165BC(19);
          uint64_t v108 = 0LL;
          uint64_t v92 = v91;
          uint64_t v94 = v93;
          sub_1001163C8();
          uint64_t v95 = (uint64_t)v107;
          uint64_t v96 = (void *)((char *)v107 + v109[20]);
          uint64_t *v96 = v92;
          v96[1] = v94;
          sub_100115C30(v95, v100);
          sub_100019F7C(v106);
          sub_100115C74(v95);
          goto LABEL_21;
        }

        sub_1001163C8();
        LODWORD(v33) = 1;
        unsigned int v26 = 1;
        int v29 = 1;
        LODWORD(v19) = 1;
        LODWORD(sub_10010E448(v12, v13, v14, 812LL, v15) = 1;
        LODWORD(asub_1001A93A0(v0, 1) = 1;
        LODWORD(v13) = 1;
        LODWORD(v25) = 1;
        LODWORD(v103) = 1;
        LODWORD(v104) = 1;
        LODWORD(v105) = 1;
      }
    }
  }

  uint64_t v34 = (char *)v107;
  sub_100019F7C(v106);
  swift_bridgeObjectRelease();
  if ((_DWORD)v33)
  {
    swift_bridgeObjectRelease();
    if (!v26)
    {
LABEL_6:
      if (!v29) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }

  else if (!v26)
  {
    goto LABEL_6;
  }

  swift_bridgeObjectRelease();
  if (v29) {
LABEL_7:
  }
    swift_bridgeObjectRelease();
LABEL_8:
  uint64_t v35 = v109;
  if ((_DWORD)v19) {
    sub_10011663C(v109[12]);
  }
  if ((_DWORD)v15)
  {
    sub_100116540(v35[13]);
    if (!(_DWORD)a1)
    {
LABEL_12:
      if (!(_DWORD)v13) {
        goto LABEL_13;
      }
LABEL_27:
      (*(void (**)(char *, uint64_t))(v101 + 8))(&v34[v35[15]], v102);
      if (!(_DWORD)v25) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }
  }

  else if (!(_DWORD)a1)
  {
    goto LABEL_12;
  }

  sub_100116540(v35[14]);
  if ((_DWORD)v13) {
    goto LABEL_27;
  }
LABEL_13:
  if ((_DWORD)v25) {
LABEL_14:
  }
    sub_100116540(v35[17]);
LABEL_15:
  if ((_DWORD)v103) {
    swift_bridgeObjectRelease();
  }
  if ((_DWORD)v104) {
    sub_10011663C(v35[22]);
  }
  if ((_DWORD)v105) {
    sub_10011663C(v35[23]);
  }
LABEL_21:
  sub_10001DAB8();
}

void sub_100114578(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_100114584()
{
}

uint64_t sub_10011458C(uint64_t a1)
{
  return sub_1000B26A4(a1, *v1);
}

void sub_100114594(uint64_t a1)
{
}

uint64_t sub_10011459C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10011370C(*a1, a1[1]);
  *a2 = result;
  return result;
}

void sub_1001145C8(uint64_t *a1@<X8>)
{
  *a1 = sub_100113768(*v1);
  a1[1] = v3;
  sub_10001945C();
}

uint64_t sub_1001145EC()
{
  return sub_1001139B0(*v0);
}

uint64_t sub_1001145F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10011375C(a1, a2);
  *a3 = result;
  return result;
}

void sub_100114618(_BYTE *a1@<X8>)
{
  *a1 = 20;
}

uint64_t sub_100114624(uint64_t a1)
{
  unint64_t v2 = sub_100115AC8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10011464C(uint64_t a1)
{
  unint64_t v2 = sub_100115AC8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100114674(void *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_100114688(void *a1)
{
}

uint64_t type metadata accessor for RenewalInfo(uint64_t a1)
{
  uint64_t result = qword_1002B1210;
  if (!qword_1002B1210) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RenewalInfo);
  }
  return result;
}

uint64_t sub_1001146D4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1 != 1) {
    swift_release(v1);
  }
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100114700(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100114748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 0xFF) {
    return sub_1000925F0(a1, a2, a3, a4, a5);
  }
  return a1;
}

uint64_t sub_10011475C(uint64_t result)
{
  if (result != 1) {
    return swift_release(result);
  }
  return result;
}

uint64_t sub_10011476C(uint64_t result)
{
  if (result != 1) {
    return swift_retain(result);
  }
  return result;
}

void *sub_10011477C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v17 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    uint64_t v8 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v8;
    uint64_t v9 = a2[6];
    *(void *)(a1 + 4sub_1001A93A0(0LL, 0) = a2[5];
    *(void *)(a1 + 48) = v9;
    uint64_t v10 = a2[7];
    uint64_t v11 = a2[8];
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_WORD *)(a1 + 73) = *(_WORD *)((char *)a2 + 73);
    uint64_t v12 = a3[12];
    uint64_t v13 = (void *)(a1 + v12);
    uint64_t v14 = (char *)a2 + v12;
    *(void *)(a1 + 56) = v10;
    *(void *)(a1 + 64) = v11;
    uint64_t v15 = type metadata accessor for Date(0LL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (sub_10001D158((uint64_t)v14, 1LL, v15))
    {
      uint64_t v16 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
      memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
      sub_10001762C((uint64_t)v13, 0LL, 1LL, v15);
    }

    uint64_t v18 = a3[13];
    uint64_t v19 = a3[14];
    uint64_t v20 = (void *)((char *)v4 + v18);
    uint64_t v21 = (uint64_t *)((char *)a2 + v18);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = (void *)((char *)v4 + v19);
    uint64_t v24 = (uint64_t *)((char *)a2 + v19);
    uint64_t v25 = v24[1];
    *uint64_t v23 = *v24;
    v23[1] = v25;
    uint64_t v26 = a3[15];
    unint64_t v27 = (char *)v4 + v26;
    uint64_t v28 = (uint64_t)a2 + v26;
    int v29 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29(v27, v28, v15);
    uint64_t v30 = a3[17];
    *((_BYTE *)v4 + a3[16]) = *((_BYTE *)a2 + a3[16]);
    uint64_t v31 = (void *)((char *)v4 + v30);
    uint64_t v32 = (uint64_t *)((char *)a2 + v30);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = a3[18];
    uint64_t v36 = a3[19];
    char v37 = *((_BYTE *)a2 + v35);
    *uint64_t v31 = v34;
    v31[1] = v33;
    *((_BYTE *)v4 + v35) = v37;
    uint64_t v38 = (char *)v4 + v36;
    *(void *)uint64_t v38 = *(uint64_t *)((char *)a2 + v36);
    v38[8] = *((_BYTE *)a2 + v36 + 8);
    uint64_t v39 = a3[20];
    uint64_t v40 = a3[21];
    uint64_t v41 = (void *)((char *)v4 + v39);
    uint64_t v42 = (uint64_t *)((char *)a2 + v39);
    uint64_t v43 = v42[1];
    uint64_t v44 = *(uint64_t *)((char *)a2 + v40);
    *uint64_t v41 = *v42;
    v41[1] = v43;
    *(void *)((char *)v4 + v4sub_1001A93A0(0LL, 0) = v44;
    uint64_t v45 = a3[22];
    uint64_t v46 = (char *)v4 + v45;
    uint64_t v47 = (char *)a2 + v45;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (sub_10001D158((uint64_t)v47, 1LL, v15))
    {
      uint64_t v48 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
      memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64LL));
    }

    else
    {
      v29(v46, (uint64_t)v47, v15);
      sub_10001762C((uint64_t)v46, 0LL, 1LL, v15);
    }

    uint64_t v49 = a3[23];
    uint64_t v50 = (char *)v4 + v49;
    uint64_t v51 = (char *)a2 + v49;
    if (sub_10001D158((uint64_t)v51, 1LL, v15))
    {
      uint64_t v52 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
      memcpy(v50, v51, *(void *)(*(void *)(v52 - 8) + 64LL));
    }

    else
    {
      v29(v50, (uint64_t)v51, v15);
      sub_10001762C((uint64_t)v50, 0LL, 1LL, v15);
    }
  }

  return v4;
}

uint64_t sub_100114A58(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[12];
  uint64_t v5 = type metadata accessor for Date(0LL);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v9(a1 + a2[15], v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + a2[22];
  uint64_t v7 = a1 + a2[23];
  uint64_t result = sub_10001D158(v7, 1LL, v5);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v7, v5);
  }
  return result;
}

uint64_t sub_100114BB4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 4sub_1001A93A0(0LL, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  uint64_t v9 = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
  uint64_t v11 = a3[12];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  uint64_t v14 = type metadata accessor for Date(0LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (sub_10001D158((uint64_t)v13, 1LL, v14))
  {
    uint64_t v15 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
    sub_10001762C((uint64_t)v12, 0LL, 1LL, v14);
  }

  uint64_t v16 = a3[13];
  uint64_t v17 = a3[14];
  uint64_t v18 = (void *)(a1 + v16);
  uint64_t v19 = (void *)(a2 + v16);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  uint64_t v21 = (void *)(a1 + v17);
  uint64_t v22 = (void *)(a2 + v17);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  uint64_t v24 = a3[15];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (const void *)(a2 + v24);
  unint64_t v27 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 16LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27(v25, v26, v14);
  uint64_t v28 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  int v29 = (void *)(a1 + v28);
  uint64_t v30 = (uint64_t *)(a2 + v28);
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  uint64_t v33 = a3[18];
  uint64_t v34 = a3[19];
  char v35 = *(_BYTE *)(a2 + v33);
  *int v29 = v32;
  v29[1] = v31;
  *(_BYTE *)(a1 + v33) = v35;
  uint64_t v36 = a1 + v34;
  *(void *)uint64_t v36 = *(void *)(a2 + v34);
  *(_BYTE *)(v36 + 8) = *(_BYTE *)(a2 + v34 + 8);
  uint64_t v37 = a3[20];
  uint64_t v38 = a3[21];
  uint64_t v39 = (void *)(a1 + v37);
  uint64_t v40 = (void *)(a2 + v37);
  uint64_t v41 = v40[1];
  uint64_t v42 = *(void *)(a2 + v38);
  *uint64_t v39 = *v40;
  v39[1] = v41;
  *(void *)(a1 + v38) = v42;
  uint64_t v43 = a3[22];
  uint64_t v44 = (void *)(a1 + v43);
  uint64_t v45 = (const void *)(a2 + v43);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (sub_10001D158((uint64_t)v45, 1LL, v14))
  {
    uint64_t v46 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64LL));
  }

  else
  {
    v27(v44, v45, v14);
    sub_10001762C((uint64_t)v44, 0LL, 1LL, v14);
  }

  uint64_t v47 = a3[23];
  uint64_t v48 = (void *)(a1 + v47);
  uint64_t v49 = (const void *)(a2 + v47);
  if (sub_10001D158((uint64_t)v49, 1LL, v14))
  {
    uint64_t v50 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64LL));
  }

  else
  {
    v27(v48, v49, v14);
    sub_10001762C((uint64_t)v48, 0LL, 1LL, v14);
  }

  return a1;
}

uint64_t sub_100114E64(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 4sub_1001A93A0(0LL, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  uint64_t v6 = a3[12];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date(0LL);
  int v10 = sub_10001D158((uint64_t)v7, 1LL, v9);
  int v11 = sub_10001D158((uint64_t)v8, 1LL, v9);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
      sub_10001762C((uint64_t)v7, 0LL, 1LL, v9);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v12 = *(void *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    uint64_t v13 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v14 = a3[13];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[14];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  *uint64_t v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(v9 - 8);
  uint64_t v21 = *(void (**)(void *, const void *, uint64_t))(v20 + 24);
  v21((void *)(a1 + a3[15]), (const void *)(a2 + a3[15]), v9);
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  uint64_t v22 = a3[17];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  *uint64_t v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  uint64_t v25 = a3[19];
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  char v28 = *(_BYTE *)(v27 + 8);
  *(void *)uint64_t v26 = *(void *)v27;
  *(_BYTE *)(v26 + 8) = v28;
  uint64_t v29 = a3[20];
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (void *)(a2 + v29);
  *uint64_t v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[21]) = *(void *)(a2 + a3[21]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[22];
  uint64_t v33 = (void *)(a1 + v32);
  uint64_t v34 = (const void *)(a2 + v32);
  int v35 = sub_10001D158(a1 + v32, 1LL, v9);
  int v36 = sub_10001D158((uint64_t)v34, 1LL, v9);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(void *, const void *, uint64_t))(v20 + 16))(v33, v34, v9);
      sub_10001762C((uint64_t)v33, 0LL, 1LL, v9);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v36)
  {
    (*(void (**)(void *, uint64_t))(v20 + 8))(v33, v9);
LABEL_12:
    uint64_t v37 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64LL));
    goto LABEL_13;
  }

  v21(v33, v34, v9);
LABEL_13:
  uint64_t v38 = a3[23];
  uint64_t v39 = (void *)(a1 + v38);
  uint64_t v40 = (const void *)(a2 + v38);
  int v41 = sub_10001D158(a1 + v38, 1LL, v9);
  int v42 = sub_10001D158((uint64_t)v40, 1LL, v9);
  if (!v41)
  {
    if (!v42)
    {
      v21(v39, v40, v9);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v20 + 8))(v39, v9);
    goto LABEL_18;
  }

  if (v42)
  {
LABEL_18:
    uint64_t v43 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, const void *, uint64_t))(v20 + 16))(v39, v40, v9);
  sub_10001762C((uint64_t)v39, 0LL, 1LL, v9);
  return a1;
}

uint64_t sub_100115284(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 4sub_1001A93A0(0LL, 0) = *(_OWORD *)(a2 + 40);
  __int128 v6 = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
  uint64_t v7 = a3[12];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 56) = v6;
  uint64_t v10 = type metadata accessor for Date(0LL);
  if (sub_10001D158((uint64_t)v9, 1LL, v10))
  {
    uint64_t v11 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
    uint64_t v12 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32LL);
  }

  else
  {
    uint64_t v12 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32LL);
    v12(v8, v9, v10);
    sub_10001762C((uint64_t)v8, 0LL, 1LL, v10);
  }

  uint64_t v13 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  v12((void *)(a1 + a3[15]), (const void *)(a2 + a3[15]), v10);
  uint64_t v14 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  uint64_t v15 = a3[19];
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  *(void *)uint64_t v16 = *(void *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  uint64_t v18 = a3[21];
  *(_OWORD *)(a1 + a3[20]) = *(_OWORD *)(a2 + a3[20]);
  *(void *)(a1 + v18) = *(void *)(a2 + v18);
  uint64_t v19 = a3[22];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (const void *)(a2 + v19);
  if (sub_10001D158(a2 + v19, 1LL, v10))
  {
    uint64_t v22 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64LL));
  }

  else
  {
    v12(v20, v21, v10);
    sub_10001762C((uint64_t)v20, 0LL, 1LL, v10);
  }

  uint64_t v23 = a3[23];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (const void *)(a2 + v23);
  if (sub_10001D158((uint64_t)v25, 1LL, v10))
  {
    uint64_t v26 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64LL));
  }

  else
  {
    v12(v24, v25, v10);
    sub_10001762C((uint64_t)v24, 0LL, 1LL, v10);
  }

  return a1;
}

uint64_t sub_1001154C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 4sub_1001A93A0(0LL, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v9;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
  uint64_t v10 = a3[12];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (const void *)(a2 + v10);
  uint64_t v13 = type metadata accessor for Date(0LL);
  int v14 = sub_10001D158((uint64_t)v11, 1LL, v13);
  int v15 = sub_10001D158((uint64_t)v12, 1LL, v13);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 32LL))(v11, v12, v13);
      sub_10001762C((uint64_t)v11, 0LL, 1LL, v13);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v16 = *(void *)(v13 - 8);
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v11, v13);
LABEL_6:
    uint64_t v17 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v11, v12, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(v16 + 40))(v11, v12, v13);
LABEL_7:
  uint64_t v18 = a3[13];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (uint64_t *)(a2 + v18);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  *uint64_t v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[14];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (uint64_t *)(a2 + v23);
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  *uint64_t v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease();
  uint64_t v28 = *(void *)(v13 - 8);
  uint64_t v29 = *(void (**)(void *, const void *, uint64_t))(v28 + 40);
  v29((void *)(a1 + a3[15]), (const void *)(a2 + a3[15]), v13);
  uint64_t v30 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (uint64_t *)(a2 + v30);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *uint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  uint64_t v35 = a3[19];
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  uint64_t v36 = a1 + v35;
  uint64_t v37 = a2 + v35;
  *(void *)uint64_t v36 = *(void *)v37;
  *(_BYTE *)(v36 + 8) = *(_BYTE *)(v37 + 8);
  uint64_t v38 = a3[20];
  uint64_t v39 = (void *)(a1 + v38);
  uint64_t v40 = (uint64_t *)(a2 + v38);
  uint64_t v42 = *v40;
  uint64_t v41 = v40[1];
  *uint64_t v39 = v42;
  v39[1] = v41;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[21]) = *(void *)(a2 + a3[21]);
  swift_bridgeObjectRelease();
  uint64_t v43 = a3[22];
  uint64_t v44 = (void *)(a1 + v43);
  uint64_t v45 = (const void *)(a2 + v43);
  int v46 = sub_10001D158(a1 + v43, 1LL, v13);
  int v47 = sub_10001D158((uint64_t)v45, 1LL, v13);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(void *, const void *, uint64_t))(v28 + 32))(v44, v45, v13);
      sub_10001762C((uint64_t)v44, 0LL, 1LL, v13);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v47)
  {
    (*(void (**)(void *, uint64_t))(v28 + 8))(v44, v13);
LABEL_12:
    uint64_t v48 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64LL));
    goto LABEL_13;
  }

  v29(v44, v45, v13);
LABEL_13:
  uint64_t v49 = a3[23];
  uint64_t v50 = (void *)(a1 + v49);
  uint64_t v51 = (const void *)(a2 + v49);
  int v52 = sub_10001D158(a1 + v49, 1LL, v13);
  int v53 = sub_10001D158((uint64_t)v51, 1LL, v13);
  if (!v52)
  {
    if (!v53)
    {
      v29(v50, v51, v13);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v28 + 8))(v50, v13);
    goto LABEL_18;
  }

  if (v53)
  {
LABEL_18:
    uint64_t v54 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, const void *, uint64_t))(v28 + 32))(v50, v51, v13);
  sub_10001762C((uint64_t)v50, 0LL, 1LL, v13);
  return a1;
}

uint64_t sub_10011584C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100115858);
}

uint64_t sub_100115858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == (_DWORD)a2)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(int *)(a3 + 48);
    }

    else
    {
      uint64_t v9 = sub_100092A18();
      uint64_t v10 = *(int *)(a3 + 60);
    }

    return sub_10001D158(a1 + v10, a2, v9);
  }

uint64_t sub_1001158F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001158FC);
}

uint64_t sub_1001158FC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(int *)(a4 + 48);
    }

    else
    {
      uint64_t v9 = sub_100092A18();
      uint64_t v10 = *(int *)(a4 + 60);
    }

    return sub_10001762C(v5 + v10, a2, a2, v9);
  }

  return result;
}

void sub_100115990(uint64_t a1)
{
  v7[0] = &unk_100200098;
  v7[1] = &unk_1002000B0;
  _OWORD v7[2] = &unk_100200098;
  v7[3] = &unk_1002000C8;
  v7[4] = &unk_100200098;
  v7[5] = &unk_1002000E0;
  v7[6] = &unk_1002000F8;
  v7[7] = &unk_1002000F8;
  sub_1000A4384(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(v2 - 8) + 64LL;
    v7[8] = v4;
    v7[9] = &unk_100200098;
    v7[10] = &unk_100200098;
    uint64_t v5 = type metadata accessor for Date(319LL);
    if (v6 <= 0x3F)
    {
      v7[11] = *(void *)(v5 - 8) + 64LL;
      v7[12] = &unk_100200110;
      v7[13] = &unk_1002000C8;
      v7[14] = &unk_100200128;
      v7[15] = &unk_100200140;
      v7[16] = &unk_1002000C8;
      v7[17] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v7[18] = v4;
      v7[19] = v4;
      swift_initStructMetadata(a1, 256LL, 20LL, v7, a1 + 16);
    }
  }

uint64_t sub_100115A8C(uint64_t a1)
{
  uint64_t result = sub_1000221A8((unint64_t *)&unk_1002AB7D8, type metadata accessor for RenewalInfo, (uint64_t)"EY\b");
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100115AC8()
{
  unint64_t result = qword_1002B1298;
  if (!qword_1002B1298)
  {
    unint64_t result = swift_getWitnessTable("}U\b", &unk_1002858F0);
    atomic_store(result, (unint64_t *)&qword_1002B1298);
  }

  return result;
}

unint64_t sub_100115B04()
{
  unint64_t result = qword_1002B12A0;
  if (!qword_1002B12A0)
  {
    unint64_t result = swift_getWitnessTable(byte_1002005AC, &unk_100285AA0);
    atomic_store(result, (unint64_t *)&qword_1002B12A0);
  }

  return result;
}

unint64_t sub_100115B40()
{
  unint64_t result = qword_1002B12A8;
  if (!qword_1002B12A8)
  {
    unint64_t result = swift_getWitnessTable("EU\b", &unk_100285A10);
    atomic_store(result, (unint64_t *)&qword_1002B12A8);
  }

  return result;
}

unint64_t sub_100115B7C()
{
  unint64_t result = qword_1002B12B0;
  if (!qword_1002B12B0)
  {
    unint64_t result = swift_getWitnessTable("mU\b", &unk_100285980);
    atomic_store(result, (unint64_t *)&qword_1002B12B0);
  }

  return result;
}

unint64_t sub_100115BB8()
{
  unint64_t result = qword_1002B12B8;
  if (!qword_1002B12B8)
  {
    unint64_t result = swift_getWitnessTable(byte_100201978, &unk_100286840);
    atomic_store(result, (unint64_t *)&qword_1002B12B8);
  }

  return result;
}

unint64_t sub_100115BF4()
{
  unint64_t result = qword_1002B12C0;
  if (!qword_1002B12C0)
  {
    unint64_t result = swift_getWitnessTable("9P\b", &unk_1002867B0);
    atomic_store(result, (unint64_t *)&qword_1002B12C0);
  }

  return result;
}

uint64_t sub_100115C30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RenewalInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100115C74(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RenewalInfo(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_100115CB0()
{
  unint64_t result = qword_1002B12D0;
  if (!qword_1002B12D0)
  {
    unint64_t result = swift_getWitnessTable(byte_100200534, &unk_100285AA0);
    atomic_store(result, (unint64_t *)&qword_1002B12D0);
  }

  return result;
}

unint64_t sub_100115CEC()
{
  unint64_t result = qword_1002B12D8;
  if (!qword_1002B12D8)
  {
    unint64_t result = swift_getWitnessTable(byte_10020050C, &unk_100285A10);
    atomic_store(result, (unint64_t *)&qword_1002B12D8);
  }

  return result;
}

unint64_t sub_100115D28()
{
  unint64_t result = qword_1002B12E0;
  if (!qword_1002B12E0)
  {
    unint64_t result = swift_getWitnessTable(byte_1002004E4, &unk_100285980);
    atomic_store(result, (unint64_t *)&qword_1002B12E0);
  }

  return result;
}

unint64_t sub_100115D64()
{
  unint64_t result = qword_1002B12E8;
  if (!qword_1002B12E8)
  {
    unint64_t result = swift_getWitnessTable(byte_1002018D8, &unk_100286840);
    atomic_store(result, (unint64_t *)&qword_1002B12E8);
  }

  return result;
}

unint64_t sub_100115DA0()
{
  unint64_t result = qword_1002B12F0;
  if (!qword_1002B12F0)
  {
    unint64_t result = swift_getWitnessTable(byte_1002018B0, &unk_1002867B0);
    atomic_store(result, (unint64_t *)&qword_1002B12F0);
  }

  return result;
}

uint64_t sub_100115DDC(unint64_t *a1, uint64_t a2, const char *a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_100018EC0(&qword_1002A93B8);
    uint64_t v8 = a2;
    uint64_t result = swift_getWitnessTable(a3, v7, &v8);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100115E3C(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xED)
  {
    if (a2 + 19 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 19) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 20;
    return (v5 + 1);
  }

uint64_t sub_100115EC4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 19 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 19) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xED) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xEC) {
    return ((uint64_t (*)(void))((char *)&loc_100115F10 + 4 * byte_100200049[v4]))();
  }
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_100115F44 + 4 * byte_100200044[v4]))();
}

uint64_t sub_100115F44(uint64_t result)
{
  *(_BYTE *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_100115F4C(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x100115F54LL);
  }
  return result;
}

uint64_t sub_100115F60(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x100115F68LL);
  }
  *(_BYTE *)uint64_t result = a2 + 19;
  return result;
}

uint64_t sub_100115F6C(uint64_t result)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_100115F74(uint64_t result)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

void type metadata accessor for RenewalInfo.CodingKeys()
{
}

void type metadata accessor for RenewalInfo.PriceIncreaseStatus()
{
}

uint64_t sub_100115F9C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100115FE8 + 4 * byte_100200053[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10011601C + 4 * byte_10020004E[v4]))();
}

uint64_t sub_10011601C(uint64_t result)
{
  *(_BYTE *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_100116024(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x10011602CLL);
  }
  return result;
}

uint64_t sub_100116038(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x100116040LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100116044(uint64_t result)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_10011604C(uint64_t result)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

void type metadata accessor for RenewalInfo.RenewalStatus()
{
}

uint64_t sub_100116064(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1001160B0 + 4 * byte_10020005D[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001160E4 + 4 * byte_100200058[v4]))();
}

uint64_t sub_1001160E4(uint64_t result)
{
  *(_BYTE *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_1001160EC(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x1001160F4LL);
  }
  return result;
}

uint64_t sub_100116100(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x100116108LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10011610C(uint64_t result)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_100116114(uint64_t result)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

void type metadata accessor for RenewalInfo.ExpirationIntent()
{
}

unint64_t sub_100116130()
{
  unint64_t result = qword_1002B12F8;
  if (!qword_1002B12F8)
  {
    unint64_t result = swift_getWitnessTable(byte_10020028C, &unk_100285AA0);
    atomic_store(result, (unint64_t *)&qword_1002B12F8);
  }

  return result;
}

unint64_t sub_100116170()
{
  unint64_t result = qword_1002B1300;
  if (!qword_1002B1300)
  {
    unint64_t result = swift_getWitnessTable(byte_10020032C, &unk_100285A10);
    atomic_store(result, (unint64_t *)&qword_1002B1300);
  }

  return result;
}

unint64_t sub_1001161B0()
{
  unint64_t result = qword_1002B1308;
  if (!qword_1002B1308)
  {
    unint64_t result = swift_getWitnessTable("UW\b", &unk_100285980);
    atomic_store(result, (unint64_t *)&qword_1002B1308);
  }

  return result;
}

unint64_t sub_1001161F0()
{
  unint64_t result = qword_1002B1310;
  if (!qword_1002B1310)
  {
    unint64_t result = swift_getWitnessTable("eV\b", &unk_1002858F0);
    atomic_store(result, (unint64_t *)&qword_1002B1310);
  }

  return result;
}

unint64_t sub_100116230()
{
  unint64_t result = qword_1002B1318;
  if (!qword_1002B1318)
  {
    unint64_t result = swift_getWitnessTable("=W\b", &unk_1002858F0);
    atomic_store(result, (unint64_t *)&qword_1002B1318);
  }

  return result;
}

unint64_t sub_100116270()
{
  unint64_t result = qword_1002B1320;
  if (!qword_1002B1320)
  {
    unint64_t result = swift_getWitnessTable("%W\b", &unk_1002858F0);
    atomic_store(result, (unint64_t *)&qword_1002B1320);
  }

  return result;
}

unint64_t sub_1001162AC()
{
  unint64_t result = qword_1002B1328;
  if (!qword_1002B1328)
  {
    unint64_t result = swift_getWitnessTable(byte_100200214, &unk_100285AA0);
    atomic_store(result, (unint64_t *)&qword_1002B1328);
  }

  return result;
}

unint64_t sub_1001162E8()
{
  unint64_t result = qword_1002B1330;
  if (!qword_1002B1330)
  {
    unint64_t result = swift_getWitnessTable("%X\b", &unk_100285A10);
    atomic_store(result, (unint64_t *)&qword_1002B1330);
  }

  return result;
}

unint64_t sub_100116324()
{
  unint64_t result = qword_1002B1338;
  if (!qword_1002B1338)
  {
    unint64_t result = swift_getWitnessTable(byte_100200354, &unk_100285980);
    atomic_store(result, (unint64_t *)&qword_1002B1338);
  }

  return result;
}

void sub_100116370()
{
  *(_DWORD *)(v0 - 144) = 0;
  *(_DWORD *)(v0 - 136) = 0;
  *(_DWORD *)(v0 - 128) = 0;
}

uint64_t sub_10011639C(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v3 - 88, v2);
}

uint64_t sub_1001163B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v6 - 88, v6 - 65, v5, a4, a5);
}

uint64_t sub_1001163C8()
{
  return (*(uint64_t (**)(void, void))(v0 + 8))(*(void *)(v1 - 136), *(void *)(v1 - 128));
}

uint64_t sub_1001163D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_1001163E0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1001163F0(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 - 176) = a2;
  return v2;
}

uint64_t sub_100116410@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(_BYTE *)(v4 - 88) = a3;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v4 - 88, v3);
}

void sub_100116428()
{
  *(_DWORD *)(v0 - 128) = 0;
  *(_DWORD *)(v0 - 144) = 1;
}

void sub_100116458()
{
  *(_DWORD *)(v0 - 144) = 0;
  *(_DWORD *)(v0 - 136) = 0;
  *(_DWORD *)(v0 - 128) = 0;
}

void sub_100116484()
{
  *(_DWORD *)(v0 - 144) = 0;
  *(_DWORD *)(v0 - 136) = 0;
  *(_DWORD *)(v0 - 128) = 0;
}

void sub_1001164B0()
{
  *(_DWORD *)(v0 - 144) = 0;
  *(_DWORD *)(v0 - 136) = 0;
  *(_DWORD *)(v0 - 128) = 0;
}

uint64_t sub_1001164DC@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v2 - 88) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v2 - 88, v1);
}

uint64_t sub_1001164EC()
{
  return v0;
}

uint64_t sub_100116500()
{
  return v0;
}

uint64_t sub_100116514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, v5 - 65, *(void *)(v5 - 128), a1, a5);
}

uint64_t sub_10011652C(uint64_t a1)
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(a1, v1);
}

uint64_t sub_100116534()
{
  return sub_10011366C(*(void *)(v0 - 168));
}

uint64_t sub_100116540@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(v1 + a1 + 8));
}

void sub_10011654C()
{
  *(void *)(v3 + 4sub_1001A93A0(0LL, 0) = v2;
  *(void *)(v3 + 48) = v1;
  uint64_t v6 = (void *)(v3 + *(int *)(*(void *)(v5 - 192) + 68LL));
  *uint64_t v6 = v0;
  v6[1] = v4;
}

uint64_t sub_100116568@<X0>(uint64_t a1@<X8>)
{
  *(_BYTE *)(v3 + asub_1001A93A0(v0, 1) = v1;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100116574()
{
  return v0;
}

uint64_t sub_100116584()
{
  return sub_10001D158(v0, 1LL, v1);
}

  ;
}

  ;
}

uint64_t sub_1001165BC@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v1 - 88) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v1 - 88, *(void *)(v1 - 128));
}

uint64_t sub_1001165CC@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v1 - 88) = a1;
  return v1 - 88;
}

uint64_t sub_1001165DC()
{
  return v0;
}

void sub_1001165F4()
{
  *(void *)(v0 + *(int *)(v1 + 76)) = 0LL;
}

uint64_t sub_100116604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, v5, a1, a5);
}

void sub_100116614(uint64_t a1@<X8>)
{
  uint64_t v2 = (void *)(v1 + a1);
  *uint64_t v2 = 0LL;
  v2[1] = 0LL;
}

uint64_t sub_100116620()
{
  return sub_1000B4EE8();
}

  ;
}

uint64_t sub_10011663C@<X0>(uint64_t a1@<X8>)
{
  return sub_100049980(v1 + a1);
}

uint64_t sub_100116644()
{
  return static Date.now.getter();
}

uint64_t sub_100116650()
{
  return swift_release(v0);
}

uint64_t sub_10011665C()
{
  return v2(v1, v0);
}

uint64_t sub_100116668()
{
  return swift_release(*(void *)(v0 - 152));
}

uint64_t sub_100116670@<X0>(uint64_t a1@<X8>)
{
  return swift_release(*(void *)(a1 - 256));
}

uint64_t sub_100116678(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a2);
}

uint64_t sub_100116684(uint64_t a1, uint64_t a2)
{
  return sub_10001762C(a1, a2, 1LL, v2);
}

uint64_t sub_100116690(unint64_t a1)
{
  if (a1 < 9) {
    return 2 * a1 + 14;
  }
  sub_100117350();
  uint64_t result = sub_100117344(v2, v3);
  __break(1u);
  return result;
}

uint64_t sub_1001166CC(unint64_t a1)
{
  if (a1 < 9) {
    return 2 * a1 + 13;
  }
  sub_100117350();
  uint64_t result = sub_100117344(v2, v3);
  __break(1u);
  return result;
}

uint64_t sub_100116708(uint64_t result)
{
  switch(result)
  {
    case 0LL:
      return result;
    case 1LL:
      uint64_t result = 0x6E776F6E6B6E55LL;
      break;
    case 2LL:
      uint64_t result = 0x6E61432072657355LL;
      break;
    case 3LL:
      uint64_t result = 0x206B726F7774654ELL;
      break;
    case 4LL:
      uint64_t result = 0x45206D6574737953LL;
      break;
    case 5LL:
      uint64_t result = 0xD00000000000001BLL;
      break;
    case 6LL:
      uint64_t result = 0x69746E4520746F4ELL;
      break;
    case 7LL:
      uint64_t result = 0xD000000000000010LL;
      break;
    case 8LL:
    case 12LL:
    case 17LL:
      uint64_t result = 0xD000000000000013LL;
      break;
    case 9LL:
      uint64_t result = 0xD000000000000014LL;
      break;
    case 10LL:
      uint64_t result = 0xD000000000000014LL;
      break;
    case 11LL:
      uint64_t result = 0xD000000000000018LL;
      break;
    case 13LL:
      uint64_t result = 0xD000000000000017LL;
      break;
    case 14LL:
      uint64_t result = 0xD000000000000018LL;
      break;
    case 15LL:
      uint64_t result = 0xD000000000000011LL;
      break;
    case 16LL:
      uint64_t result = 0x64656C696146LL;
      break;
    case 18LL:
      uint64_t result = 0xD000000000000019LL;
      break;
    case 19LL:
      uint64_t result = 0xD00000000000001BLL;
      break;
    case 20LL:
      uint64_t result = 0xD000000000000010LL;
      break;
    case 21LL:
      uint64_t result = 0xD000000000000011LL;
      break;
    case 22LL:
      uint64_t result = 0xD00000000000001BLL;
      break;
    default:
      type metadata accessor for ASOctaneSimulatedError(0LL);
      uint64_t result = sub_100117344(v1, v2);
      __break(1u);
      break;
  }

  return result;
}

void sub_100116984()
{
  static ASOctaneSimulatedErrorCategory.allCases = (uint64_t)&off_100272BB0;
}

uint64_t *ASOctaneSimulatedErrorCategory.allCases.unsafeMutableAddressor()
{
  if (qword_1002A8D00 != -1) {
    swift_once(&qword_1002A8D00, sub_100116984);
  }
  return &static ASOctaneSimulatedErrorCategory.allCases;
}

uint64_t static ASOctaneSimulatedErrorCategory.allCases.getter()
{
  if (qword_1002A8D00 != -1) {
    swift_once(&qword_1002A8D00, sub_100116984);
  }
  sub_10002A718((uint64_t)&static ASOctaneSimulatedErrorCategory.allCases, (uint64_t)v1, 0LL);
  return swift_bridgeObjectRetain();
}

uint64_t static ASOctaneSimulatedErrorCategory.allCases.setter(uint64_t a1)
{
  if (qword_1002A8D00 != -1) {
    swift_once(&qword_1002A8D00, sub_100116984);
  }
  sub_10002A718((uint64_t)&static ASOctaneSimulatedErrorCategory.allCases, (uint64_t)v3, 1LL);
  static ASOctaneSimulatedErrorCategory.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static ASOctaneSimulatedErrorCategory.allCases.modify(uint64_t a1))(void)
{
  if (qword_1002A8D00 != -1) {
    swift_once(&qword_1002A8D00, sub_100116984);
  }
  sub_10002A718((uint64_t)&static ASOctaneSimulatedErrorCategory.allCases, a1, 33LL);
  return j__swift_endAccess;
}

unint64_t sub_100116B1C()
{
  unint64_t result = qword_1002B1340;
  if (!qword_1002B1340)
  {
    uint64_t v1 = sub_100018EC0(&qword_1002B1348);
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002B1340);
  }

  return result;
}

uint64_t sub_100116B60@<X0>(void *a1@<X8>)
{
  *a1 = static ASOctaneSimulatedErrorCategory.allCases;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100116BB0(uint64_t a1, unint64_t a2)
{
  BOOL v2 = a1 == 0x6E776F6E6B6E55LL && a2 == 0xE700000000000000LL;
  if (v2)
  {
    unint64_t v5 = 0xE700000000000000LL;
    goto LABEL_8;
  }

  if ((sub_1000AD508(0x6E776F6E6B6E55LL, 0xE700000000000000LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 1LL;
  }

  if (a1 == 0x6E61432072657355LL && a2 == 0xEE0064656C6C6563LL)
  {
    unint64_t v8 = 0xEE0064656C6C6563LL;
    goto LABEL_16;
  }

  if ((sub_1000AD508(0x6E61432072657355LL, 0xEE0064656C6C6563LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if (a1 == 0x206B726F7774654ELL && a2 == 0xED0000726F727245LL)
  {
    unint64_t v10 = 0xED0000726F727245LL;
    goto LABEL_24;
  }

  if ((sub_1000AD508(0x206B726F7774654ELL, 0xED0000726F727245LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 3LL;
  }

  if (a1 == 0x45206D6574737953LL && a2 == 0xEC000000726F7272LL)
  {
    unint64_t v12 = 0xEC000000726F7272LL;
    goto LABEL_32;
  }

  if ((sub_1000AD508(0x45206D6574737953LL, 0xEC000000726F7272LL) & 1) != 0)
  {
    unint64_t v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 4LL;
  }

  uint64_t v13 = "Not Available In Storefront";
  if (a1 == 0xD00000000000001BLL)
  {
    unint64_t v14 = sub_100117334((uint64_t)"Not Available In Storefront");
    if (v2) {
      goto LABEL_37;
    }
  }

  if ((sub_1000AD508(0xD00000000000001BLL, (unint64_t)(v13 - 32) | 0x8000000000000000LL) & 1) != 0)
  {
    unint64_t v14 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v14);
    return 5LL;
  }

  if (a1 == 0x69746E4520746F4ELL && a2 == 0xEC00000064656C74LL)
  {
    unint64_t v16 = 0xEC00000064656C74LL;
    goto LABEL_45;
  }

  if ((sub_1000AD508(0x69746E4520746F4ELL, 0xEC00000064656C74LL) & 1) != 0)
  {
    unint64_t v16 = a2;
LABEL_45:
    swift_bridgeObjectRelease(v16);
    return 6LL;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v17 = 0x800000010021CEE0LL;
    if (a2 == 0x800000010021CEE0LL) {
      goto LABEL_50;
    }
  }

  if ((sub_1000AD508(0xD000000000000010LL, 0x800000010021CEE0LL) & 1) != 0)
  {
    unint64_t v17 = a2;
LABEL_50:
    swift_bridgeObjectRelease(v17);
    return 7LL;
  }

  uint64_t v18 = "Product Unavailable";
  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v19 = sub_100117334((uint64_t)"Product Unavailable");
    if (v2) {
      goto LABEL_55;
    }
  }

  if ((sub_1000AD508(0xD000000000000013LL, (unint64_t)(v18 - 32) | 0x8000000000000000LL) & 1) != 0)
  {
    unint64_t v19 = a2;
LABEL_55:
    swift_bridgeObjectRelease(v19);
    return 8LL;
  }

  uint64_t v20 = "Purchase Not Allowed";
  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v21 = sub_100117334((uint64_t)"Purchase Not Allowed");
    if (v2) {
      goto LABEL_60;
    }
  }

  if ((sub_1000AD508(0xD000000000000014LL, (unint64_t)(v20 - 32) | 0x8000000000000000LL) & 1) != 0)
  {
    unint64_t v21 = a2;
LABEL_60:
    swift_bridgeObjectRelease(v21);
    return 9LL;
  }

  uint64_t v22 = "Ineligible For Offer";
  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v23 = sub_100117334((uint64_t)"Ineligible For Offer");
    if (v2) {
      goto LABEL_65;
    }
  }

  if ((sub_1000AD508(0xD000000000000014LL, (unint64_t)(v22 - 32) | 0x8000000000000000LL) & 1) != 0)
  {
    unint64_t v23 = a2;
LABEL_65:
    swift_bridgeObjectRelease(v23);
    return 10LL;
  }

  uint64_t v24 = "Invalid Offer Identifier";
  if (a1 == 0xD000000000000018LL)
  {
    unint64_t v25 = sub_100117334((uint64_t)"Invalid Offer Identifier");
    if (v2) {
      goto LABEL_70;
    }
  }

  if ((sub_1000AD508(0xD000000000000018LL, (unint64_t)(v24 - 32) | 0x8000000000000000LL) & 1) != 0)
  {
    unint64_t v25 = a2;
LABEL_70:
    swift_bridgeObjectRelease(v25);
    return 11LL;
  }

  uint64_t v26 = "Invalid Offer Price";
  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v27 = sub_100117334((uint64_t)"Invalid Offer Price");
    if (v2) {
      goto LABEL_75;
    }
  }

  if ((sub_1000AD508(0xD000000000000013LL, (unint64_t)(v26 - 32) | 0x8000000000000000LL) & 1) != 0)
  {
    unint64_t v27 = a2;
LABEL_75:
    swift_bridgeObjectRelease(v27);
    return 12LL;
  }

  if (a1 == 0xD000000000000017LL && a2 == 0x800000010021CE20LL)
  {
    unint64_t v28 = 0x800000010021CE20LL;
LABEL_81:
    swift_bridgeObjectRelease(v28);
    return 13LL;
  }

  if ((sub_1000AD508(0xD000000000000017LL, 0x800000010021CE20LL) & 1) != 0)
  {
    unint64_t v28 = a2;
    goto LABEL_81;
  }

  uint64_t v29 = "Missing Offer Parameters";
  if (a1 == 0xD000000000000018LL)
  {
    unint64_t v30 = sub_100117334((uint64_t)"Missing Offer Parameters");
    if (v2) {
      goto LABEL_86;
    }
  }

  if ((sub_1000AD508(0xD000000000000018LL, (unint64_t)(v29 - 32) | 0x8000000000000000LL) & 1) != 0)
  {
    unint64_t v30 = a2;
LABEL_86:
    swift_bridgeObjectRelease(v30);
    return 14LL;
  }

  uint64_t v31 = "Duplicate Request";
  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v32 = sub_100117334((uint64_t)"Duplicate Request");
    if (v2) {
      goto LABEL_91;
    }
  }

  if ((sub_1000AD508(0xD000000000000011LL, (unint64_t)(v31 - 32) | 0x8000000000000000LL) & 1) != 0)
  {
    unint64_t v32 = a2;
LABEL_91:
    swift_bridgeObjectRelease(v32);
    return 15LL;
  }

  if (a1 == 0x64656C696146LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v34 = 0xE600000000000000LL;
    goto LABEL_99;
  }

  if ((sub_1000AD508(0x64656C696146LL, 0xE600000000000000LL) & 1) != 0)
  {
    unint64_t v34 = a2;
LABEL_99:
    swift_bridgeObjectRelease(v34);
    return 16LL;
  }

  uint64_t v35 = "Revoked Certificate";
  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v36 = sub_100117334((uint64_t)"Revoked Certificate");
    if (v2) {
      goto LABEL_104;
    }
  }

  if ((sub_1000AD508(0xD000000000000013LL, (unint64_t)(v35 - 32) | 0x8000000000000000LL) & 1) != 0)
  {
    unint64_t v36 = a2;
LABEL_104:
    swift_bridgeObjectRelease(v36);
    return 17LL;
  }

  if (a1 == 0xD000000000000019LL && a2 == 0x800000010021CDA0LL)
  {
    unint64_t v37 = 0x800000010021CDA0LL;
LABEL_110:
    swift_bridgeObjectRelease(v37);
    return 18LL;
  }

  if ((sub_1000AD508(0xD000000000000019LL, 0x800000010021CDA0LL) & 1) != 0)
  {
    unint64_t v37 = a2;
    goto LABEL_110;
  }

  uint64_t v38 = "Invalid Device Verification";
  if (a1 == 0xD00000000000001BLL)
  {
    unint64_t v39 = sub_100117334((uint64_t)"Invalid Device Verification");
    if (v2) {
      goto LABEL_115;
    }
  }

  if ((sub_1000AD508(0xD00000000000001BLL, (unint64_t)(v38 - 32) | 0x8000000000000000LL) & 1) != 0)
  {
    unint64_t v39 = a2;
LABEL_115:
    swift_bridgeObjectRelease(v39);
    return 19LL;
  }

  uint64_t v40 = "Invalid Encoding";
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v41 = sub_100117334((uint64_t)"Invalid Encoding");
    if (v2) {
      goto LABEL_120;
    }
  }

  if ((sub_1000AD508(0xD000000000000010LL, (unint64_t)(v40 - 32) | 0x8000000000000000LL) & 1) != 0)
  {
    unint64_t v41 = a2;
LABEL_120:
    swift_bridgeObjectRelease(v41);
    return 20LL;
  }

  uint64_t v42 = "Invalid Signature";
  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v43 = sub_100117334((uint64_t)"Invalid Signature");
    if (v2) {
      goto LABEL_125;
    }
  }

  if ((sub_1000AD508(0xD000000000000011LL, (unint64_t)(v42 - 32) | 0x8000000000000000LL) & 1) != 0)
  {
    unint64_t v43 = a2;
LABEL_125:
    swift_bridgeObjectRelease(v43);
    return 21LL;
  }

  uint64_t v44 = "Missing Required Properties";
  if (a1 == 0xD00000000000001BLL && (unint64_t v45 = sub_100117334((uint64_t)"Missing Required Properties"), v2))
  {
    swift_bridgeObjectRelease(v45);
    return 22LL;
  }

  else
  {
    char v46 = sub_1000AD508(0xD00000000000001BLL, (unint64_t)(v44 - 32) | 0x8000000000000000LL);
    swift_bridgeObjectRelease(a2);
    if ((v46 & 1) != 0) {
      return 22LL;
    }
    else {
      return 0LL;
    }
  }

unint64_t sub_100117334@<X0>(uint64_t a1@<X8>)
{
  return (a1 - 32) | 0x8000000000000000LL;
}

uint64_t sub_100117344(uint64_t a1, uint64_t a2, ...)
{
  return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(a1, va, a1);
}

void sub_100117350()
{
}

uint64_t sub_10011735C(uint64_t a1)
{
  return sub_10011741C(a1, &qword_1002AA4A0, (uint64_t (*)(uint64_t))sub_10002D534);
}

void sub_100117370()
{
}

uint64_t sub_100117398()
{
  return sub_100117764();
}

void sub_1001173C4()
{
}

void sub_1001173E8()
{
}

void ChannelInboundHandler.unwrapInboundIn(_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

uint64_t sub_10011741C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_1000175B0(a2);
  return a3(v4);
}

void ChannelOutboundHandler.unwrapOutboundIn(_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

void sub_100117454( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  BOOL v7 = (ValueMetadata *)sub_100117CA8(a1, a2, a3, a4, a5);
  NIOAny.forceAs<A>(type:)(v7, a6);
  sub_10001945C();
}

uint64_t sub_100117484@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, unint64_t, unint64_t)@<X4>, uint64_t a6@<X8>)
{
  unint64_t v11 = HIBYTE(a3);
  *(void *)(a6 + 24) = sub_1000175B0(a4);
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(_DWORD *)(a6 + 16) = a3;
  *(_BYTE *)(a6 + 22) = BYTE6(a3);
  *(_WORD *)(a6 + 2sub_1001A93A0(0LL, 0) = WORD2(a3);
  *(_BYTE *)(a6 + 23) = v11;
  *(_BYTE *)(a6 + 56) = 2;
  return a5(a1, a2, a3, v11);
}

uint64_t sub_100117508@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = a3;
  *(_BYTE *)(a4 + 22) = BYTE6(a3);
  *(_WORD *)(a4 + 2sub_1001A93A0(0LL, 0) = WORD2(a3);
  *(_BYTE *)(a4 + 56) = 0;
  return sub_100033ED4(a1);
}

uint64_t sub_100117528@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_100117484( a1,  a2,  a3,  &qword_1002AA1A0,  (uint64_t (*)(uint64_t, uint64_t, unint64_t, unint64_t))sub_100117B40,  a4);
}

void _EmittingChannelHandler.wrapOutboundOut(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10011758C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_1001175A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100117A74(a1, &qword_1002AA4A0, a2);
}

void sub_1001175AC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 24) = a2;
  uint64_t v6 = (_OWORD *)swift_allocObject(a3, 63LL, 7LL);
  *(void *)a4 = v6;
  __int128 v7 = *(_OWORD *)(a1 + 16);
  v6[1] = *(_OWORD *)a1;
  _OWORD v6[2] = v7;
  *(_OWORD *)((char *)v6 + 47) = *(_OWORD *)(a1 + 31);
  *(_BYTE *)(a4 + 56) = 2;
  sub_100117C34((uint64_t *)a1);
  sub_10001945C();
}

void sub_100117600(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for Never;
  *(_BYTE *)(a1 + 56) = 2;
}

uint64_t sub_100117618@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = a3;
  *(_BYTE *)(a4 + 22) = BYTE6(a3);
  *(_WORD *)(a4 + 2sub_1001A93A0(0LL, 0) = WORD2(a3);
  *(_BYTE *)(a4 + 56) = 0;
  return swift_retain(a1);
}

_OWORD *sub_100117638@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = &type metadata for NIOAny;
  *(void *)&__int128 v4 = swift_allocObject(&unk_100285BB8, 73LL, 7LL);
  sub_10002B550(v7, v4 + 16);
  char v6 = 2;
  sub_1000324E8((uint64_t)v7);
  return sub_100083804(&v4, a2);
}

void ChannelInboundHandler.wrapInboundOut(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_100117700(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_100117714( uint64_t a1@<X0>, uint64_t *a2@<X3>, uint64_t (*a3)(uint64_t)@<X4>, uint64_t a4@<X8>)
{
  *(void *)a4 = sub_10011741C(a1, a2, a3);
  *(void *)(a4 + 8) = v5;
  *(_DWORD *)(a4 + 16) = v6;
  *(_BYTE *)(a4 + 22) = v7;
  *(_WORD *)(a4 + 2sub_1001A93A0(0LL, 0) = v8;
  *(_BYTE *)(a4 + 23) = v9;
  sub_10001945C();
}

void sub_100117758(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_100117764()
{
  uint64_t v0 = (ValueMetadata *)sub_1000175B0(&qword_1002AA4B0);
  if (v0 == &type metadata for ByteBuffer)
  {
    NIOAny.forceAsByteBuffer()();
    uint64_t v21 = v3;
    uint64_t v22 = v4;
    int v23 = v5;
    __int16 v24 = v6;
    char v25 = v7;
    __int16 v8 = &type metadata for ByteBuffer;
LABEL_9:
    unint64_t v19 = v8;
LABEL_10:
    swift_dynamicCast(v26, &v21, v8, v19, 7LL);
    return v26[0];
  }

  uint64_t v1 = v0;
  if (v0 == &type metadata for FileRegion)
  {
    NIOAny.forceAsFileRegion()();
    uint64_t v21 = v9;
    uint64_t v22 = v10;
    int v23 = v11;
    __int16 v24 = v12;
    char v25 = v13;
    __int16 v8 = &type metadata for FileRegion;
    goto LABEL_9;
  }

  if (v0 == &type metadata for IOData)
  {
    NIOAny.forceAsIOData()();
    uint64_t v21 = v14;
    uint64_t v22 = v15;
    int v23 = v16;
    char v25 = v17;
    __int16 v24 = v18;
    __int16 v8 = &type metadata for IOData;
    goto LABEL_9;
  }

  if (v0 == (ValueMetadata *)sub_1000175B0(&qword_1002AA4B8))
  {
    NIOAny.forceAsByteEnvelope()((uint64_t)&v21);
    __int16 v8 = v1;
    unint64_t v19 = v1;
    goto LABEL_10;
  }

  v26[0] = sub_10002D85C();
  v26[1] = v2;
  return v26[0];
}

void sub_1001178A4(uint64_t a1)
{
}

void sub_1001178D8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_1001178EC(uint64_t a1)
{
}

void sub_100117920(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

void sub_100117938(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_100117950(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_100117964(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

void sub_10011797C(uint64_t *a1@<X8>)
{
  *a1 = sub_100117398();
  a1[1] = v2;
  sub_10001945C();
}

void sub_1001179A0(uint64_t a1@<X8>)
{
  *(void *)a1 = v2;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 2sub_1001A93A0(0LL, 0) = v6;
  *(_BYTE *)(a1 + 22) = v7;
  sub_10001945C();
}

uint64_t sub_1001179DC()
{
  return sub_100117CC0(v0, v1);
}

void sub_1001179F8()
{
}

_OWORD *sub_100117A18@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_100117638(a1, a2);
}

void sub_100117A2C(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
}

uint64_t sub_100117A48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100117A74(a1, &qword_1002AA4A8, a2);
}

void sub_100117A54(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_100117A68(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_100117A74@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X3>, uint64_t a3@<X8>)
{
  return sub_100117484( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  a2,  (uint64_t (*)(uint64_t, uint64_t, unint64_t, unint64_t))sub_10007D6D0,  a3);
}

void sub_100117A9C(void *a1@<X8>)
{
  *a1 = v2;
  sub_10001945C();
}

void sub_100117ABC(uint64_t a1@<X8>)
{
}

void sub_100117AD8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_100117B10(uint64_t a1@<X0>, uint64_t *a2@<X3>, uint64_t a3@<X8>)
{
}

void sub_100117B40(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  switch(a4)
  {
    case 2:
      goto LABEL_5;
    case 1:
      sub_100033ED4(a1);
      break;
    case 0:
      swift_retain();
LABEL_5:
      swift_bridgeObjectRetain();
      return;
    default:
      sub_10001945C();
      break;
  }

uint64_t sub_100117B94()
{
  int v1 = *(unsigned __int8 *)(v0 + 72);
  if (v1 == 2)
  {
    sub_100019F7C((void *)(v0 + 16));
  }

  else if (v1 == 1)
  {
    swift_release();
    swift_release();
    if (*(_BYTE *)(v0 + 48) != 4LL && (~*(void *)(v0 + 56) & 0xF000000000000007LL) != 0) {
      swift_release();
    }
  }

  else if (!*(_BYTE *)(v0 + 72))
  {
    sub_100018F04(*(void *)(v0 + 16));
  }

  return swift_deallocObject(v0, 73LL, 7LL);
}

uint64_t *sub_100117C34(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  swift_retain(a1[3]);
  swift_retain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_100117C88@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a1 + 16))((char *)&a2 - v2, v3, v4);
}

uint64_t sub_100117CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return swift_getAssociatedTypeWitness(0LL, a3, v5, a4, a5);
}

void sub_100117CB8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

uint64_t sub_100117CC0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100117618(v2, a1, v3 | (v4 << 32) | (v5 << 48), a2);
}

  ;
}

void sub_100117CE8()
{
}

  ;
}

__n128 sub_100117D0C(uint64_t a1)
{
  return *(__n128 *)(a1 + 31);
}

uint64_t sub_100117D20(uint64_t a1)
{
  if (a1 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL);
    __break(1u);
  }

  else
  {
    unint64_t v1 = sub_10011A354();
    v2._uint64_t countAndFlagsBits = BinaryInteger.description.getter(&type metadata for UInt64, v1);
    String.append(_:)(v2);
    return swift_bridgeObjectRelease();
  }

  return result;
}

void *static MultiThreadedEventLoopGroup.currentEventLoop.getter()
{
  if (qword_1002A8D10 != -1) {
    swift_once(&qword_1002A8D10, sub_10011813C);
  }
  return sub_100117EF0((uint64_t (*)(void))type metadata accessor for SelectableEventLoop);
}

void *ScheduledTask.__allocating_init(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = (void *)sub_100019310(v5, 56LL);
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  result[6] = a5;
  return result;
}

uint64_t sub_100117E80(unint64_t a1)
{
  unint64_t v3 = *(void *)(v1 + 48);
  if ((v3 & 0x8000000000000000LL) != 0 || (a1 & 0x8000000000000000LL) != 0)
  {
    sub_100083070();
    uint64_t result = sub_100083058( (uint64_t)"Fatal error",  v5,  v6,  (uint64_t)"Negative value is not representable",  v7,  v8,  (uint64_t)"Swift/Integers.swift");
    __break(1u);
  }

  else if (v3 >= a1)
  {
    return static NIODeadline.- infix(_:_:)(v3, a1);
  }

  else
  {
    return 0LL;
  }

  return result;
}

void *sub_100117EE4()
{
  return sub_100117EF0((uint64_t (*)(void))sub_1000435C0);
}

void *sub_100117EF0(uint64_t (*a1)(void))
{
  uint64_t result = pthread_getspecific(*(void *)(*(void *)(v1 + 16) + 16LL));
  if (result)
  {
    uint64_t v6 = result[3];
    swift_unknownObjectRetain(v6);
    uint64_t v4 = a1(0LL);
    swift_dynamicCast(&v5, &v6, (char *)&type metadata for Swift.AnyObject + 8, v4, 7LL);
    return (void *)v5;
  }

  return result;
}

void *sub_100117F5C()
{
  uint64_t v2 = v0;
  *(void *)(v0 + 24) = &_swiftEmptyDictionarySingleton;
  *(_DWORD *)(v0 + 32) = -1;
  uint64_t v3 = type metadata accessor for Lock();
  swift_allocObject(v3, 24LL, 7LL);
  *(void *)(v0 + 48) = Lock.init()();
  *(_DWORD *)(v0 + 56) = -1;
  *(void *)(v0 + 72) = 64LL;
  pthread_t v4 = pthread_self();
  uint64_t v5 = type metadata accessor for NIOThread();
  uint64_t result = (void *)swift_allocObject(v5, 40LL, 7LL);
  result[3] = 0LL;
  result[4] = v4;
  result[2] = 0LL;
  *(void *)(v2 + 4sub_1001A93A0(0LL, 0) = result;
  *(_BYTE *)(v2 + 16) = 2;
  uint64_t v7 = *(void *)(v2 + 72);
  if ((unint64_t)(v7 - 0x400000000000000LL) >> 59 == 31)
  {
    uint64_t v8 = (_OWORD *)swift_slowAlloc(32 * v7, -1LL);
    *uint64_t v8 = 0u;
    v8[1] = 0u;
    *(void *)(v2 + 64) = v8;
    sub_10011804C();
    if (v1) {
      swift_release(v2);
    }
    return (void *)v2;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_10011804C()
{
  if (!v1)
  {
    *(_DWORD *)(v0 + 56) = v2;
    *(_BYTE *)(v0 + 16) = 0;
    v3.ident = 0LL;
    *(_DWORD *)&v3.filter = 2490358;
    memset(&v3.fflags, 0, 20);
    sub_1001264D4(&v3, 1LL);
  }

void MultiThreadedEventLoopGroup.__allocating_init(numberOfThreads:)(uint64_t a1)
{
}

uint64_t sub_1001180D8()
{
  uint64_t v0 = sub_1000175B0(&qword_1002A8EE0);
  uint64_t v1 = swift_bufferAllocate(v0, 24LL, 7LL);
  sub_100006F60((void *)(v1 + 16), 0LL);
  uint64_t result = swift_dynamicCastClassUnconditional(v1, v0, 0LL, 0LL, 0LL);
  qword_1002B1350 = result;
  return result;
}

uint64_t sub_10011813C()
{
  uint64_t v0 = sub_1000175B0(&qword_1002B14E8);
  uint64_t v1 = swift_allocObject(v0, 24LL, 7LL);
  uint64_t v2 = sub_1000175B0(&qword_1002B14F0);
  swift_allocObject(v2, 24LL, 7LL);
  uint64_t result = sub_1000434B4((void (__cdecl *)(void *))j_j__swift_release);
  *(void *)(v1 + 16) = result;
  qword_1002B1358 = v1;
  return result;
}

uint64_t sub_1001181A4( uint64_t a1, char a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(void), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, dispatch_group_s *a10)
{
  uint64_t v13 = a5();
  uint64_t v14 = a3(v13);
  uint64_t v15 = type metadata accessor for SelectableEventLoop();
  swift_allocObject(v15, 232LL, 7LL);
  uint64_t v16 = swift_retain();
  uint64_t v17 = sub_10003E454(v16, v14, a2 & 1);
  if (qword_1002A8D10 != -1) {
    swift_once(&qword_1002A8D10, sub_10011813C);
  }
  uint64_t v18 = swift_retain();
  sub_100042F48(v18);
  sub_100118778(v17, a8, a9, a10);
  sub_10003ED98();
  sub_100042F48(0LL);

  swift_release(a9);
  swift_release(a8);
  return swift_release(v17);
}

uint64_t sub_100118398( uint64_t a1, char a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(void), uint64_t a6, void (*a7)(uint64_t))
{
  uint64_t v10 = a5();
  uint64_t v11 = a3(v10);
  uint64_t v12 = type metadata accessor for SelectableEventLoop();
  swift_allocObject(v12, 232LL, 7LL);
  uint64_t v13 = swift_retain();
  uint64_t v14 = sub_10003E454(v13, v11, a2 & 1);
  if (qword_1002A8D10 != -1) {
    swift_once(&qword_1002A8D10, sub_10011813C);
  }
  uint64_t v15 = swift_retain();
  sub_100042F48(v15);
  a7(v14);
  sub_10003ED98();
  sub_100042F48(0LL);
  return swift_release();
}

uint64_t sub_100118558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = type metadata accessor for Lock();
  swift_allocObject(v10, 24LL, 7LL);
  uint64_t v11 = Lock.init()();
  uint64_t v12 = dispatch_group_create();
  uint64_t v13 = swift_allocObject(&unk_100286010, 24LL, 7LL);
  *(void *)(v13 + 16) = 0LL;
  dispatch_group_enter(v12);
  type metadata accessor for NIOThread();
  uint64_t v14 = (void *)swift_allocObject(&unk_100286038, 72LL, 7LL);
  void v14[2] = a3;
  uint64_t v14[3] = a4;
  v14[4] = a5;
  void v14[5] = a6;
  v14[6] = v11;
  v14[7] = v13;
  _BYTE v14[8] = v12;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v15 = v12;
  sub_1000A8DEC(a1, a2, 0, (uint64_t)sub_10011A500, (uint64_t)v14);
  swift_release(v14);
  OS_dispatch_group.wait()();
  Lock.lock()();
  uint64_t result = swift_beginAccess(v13 + 16, v20, 0LL, 0LL);
  uint64_t v17 = *(void *)(v13 + 16);
  if (v17)
  {
    swift_retain();
    Lock.unlock()();
    swift_release(v13);

    swift_release(v11);
    return v17;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1001186D4( uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t (*a4)(void), uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v16 = type metadata accessor for MultiThreadedEventLoopGroup();
  swift_retain();
  swift_retain();
  return sub_1001181A4(a1, 0, a2, a3, a4, a5, v16, a6, a7, (dispatch_group_s *)a8);
}

void sub_100118778(uint64_t a1, uint64_t a2, uint64_t a3, dispatch_group_s *a4)
{
  uint64_t v7 = a3 + 16;
  Lock.lock()();
  swift_beginAccess(v7, v9, 1LL, 0LL);
  uint64_t v8 = *(void *)(a3 + 16);
  *(void *)(a3 + 16) = a1;
  swift_retain();
  swift_release(v8);
  Lock.unlock()();
  dispatch_group_leave(a4);
}

void *sub_1001187F8()
{
  return sub_100119AE0();
}

void sub_10011880C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = sub_1000B9604((uint64_t)debugOnly(_:), 0LL, a1);
    sub_100019310(v3, 57LL);
    sub_100118874((uint64_t)v6, a2, a3);
    sub_1000193B8();
  }

uint64_t sub_100118874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_1000175B0(&qword_1002A8EE0);
  uint64_t v9 = swift_bufferAllocate(v8, 24LL, 7LL);
  sub_100006F60((void *)(v9 + 16), 0LL);
  *(void *)(v4 + 24) = swift_dynamicCastClassUnconditional(v9, v8, 0LL, 0LL, 0LL);
  uint64_t v10 = type metadata accessor for Lock();
  sub_100019310(v10, 24LL);
  *(void *)(v4 + 4sub_1001A93A0(0LL, 0) = Lock.init()();
  *(void *)(v4 + 48) = 0LL;
  *(_BYTE *)(v4 + 56) = 2;
  if (qword_1002A8D08 != -1) {
    swift_once(&qword_1002A8D08, sub_1001180D8);
  }
  sub_10002A4C8();
  unint64_t v11 = sub_10011A784();
  sub_10001EDD8();
  *(void *)(v4 + 16) = v11;
  uint64_t v23 = *(void *)(a1 + 16);
  if (v23)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v23);
    uint64_t v22 = a2;
    uint64_t v12 = 0LL;
    do
    {
      uint64_t v13 = v12 + 1;
      uint64_t v14 = sub_100019310((uint64_t)&unk_100285FE8, 32LL);
      __int128 v15 = *(_OWORD *)(a1 + 32 + 16 * v12);
      *(_OWORD *)(v14 + 16) = v15;
      swift_retain_n(*((void *)&v15 + 1), 2LL);
      v24._uint64_t countAndFlagsBits = sub_10011A74C();
      sub_10011A790(v24);
      sub_10003561C();
      v16._uint64_t countAndFlagsBits = 9005LL;
      v16._object = (void *)0xE200000000000000LL;
      String.append(_:)(v16);
      v25._uint64_t countAndFlagsBits = sub_10011A74C();
      sub_10011A790(v25);
      sub_10003561C();
      uint64_t v17 = sub_100118558(0x2D544C452D4F494ELL, 0xE800000000000000LL, v22, a3, (uint64_t)sub_10011A3EC, v14);
      sub_10001EDD8();
      sub_10003561C();
      uint64_t v18 = swift_release(v14);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v18);
      uint64_t v19 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v19);
      uint64_t v20 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v17);
      specialized ContiguousArray._endMutation()(v20);
      uint64_t v12 = v13;
    }

    while (v23 != v13);
  }

  swift_release(a3);
  swift_bridgeObjectRelease(a1);
  *(void *)(v4 + 32) = _swiftEmptyArrayStorage;
  return v4;
}

void MultiThreadedEventLoopGroup.makeIterator()()
{
}

uint64_t MultiThreadedEventLoopGroup.next()()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_100041B5C();
  uint64_t v2 = sub_10011A784();
  uint64_t result = swift_release();
  if (!((unint64_t)v1 >> 62))
  {
    uint64_t v4 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v4) {
      goto LABEL_3;
    }
LABEL_16:
    __break(1u);
    return specialized _ArrayBuffer._getElementSlowPath(_:)(v2, v1);
  }

  if (v1 < 0) {
    uint64_t v6 = v1;
  }
  else {
    uint64_t v6 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_100019320();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v6);
  uint64_t result = sub_100019390();
  if (!v4) {
    goto LABEL_16;
  }
LABEL_3:
  if (v2 != 0x8000000000000000LL || v4 != -1)
  {
    if (v2 % v4 >= 0) {
      v2 %= v4;
    }
    else {
      uint64_t v2 = -(v2 % v4);
    }
    sub_10011A330(v2, (v1 & 0xC000000000000001LL) == 0, v1);
    if ((v1 & 0xC000000000000001LL) == 0) {
      return swift_retain();
    }
    return specialized _ArrayBuffer._getElementSlowPath(_:)(v2, v1);
  }

  __break(1u);
  return result;
}

void MultiThreadedEventLoopGroup.shutdownGracefully(queue:_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v49 = *(void *)(v3 - 8);
  uint64_t v50 = v3;
  sub_100043FD8();
  __chkstk_darwin(v4);
  sub_10001DAD0();
  uint64_t v48 = v6 - v5;
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10001DAD0();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  sub_100043FD8();
  __chkstk_darwin(v13);
  sub_10001DAD0();
  uint64_t v16 = v15 - v14;
  uint64_t v17 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v46 = *(void *)(v17 - 8);
  uint64_t v47 = v17;
  sub_100043FD8();
  __chkstk_darwin(v18);
  sub_10001DAD0();
  uint64_t v21 = v20 - v19;
  dispatch_group_t v22 = dispatch_group_create();
  unint64_t v51 = sub_1000435C0();
  static DispatchQoS.unspecified.getter(v51);
  aBlock[0] = _swiftEmptyArrayStorage;
  uint64_t v23 = sub_1000D924C( (unint64_t *)&qword_1002AAFB0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (const char *)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v24 = sub_1000175B0((uint64_t *)&unk_1002B6F80);
  uint64_t v25 = sub_100043668((unint64_t *)&qword_1002AAFB8, (uint64_t *)&unk_1002B6F80);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v24, v25, v12, v23);
  (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))( v11,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v7);
  id v26 = a1;
  uint64_t v45 = v21;
  unint64_t v27 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001BLL,  0x800000010021CF20LL,  v21,  v16,  v11,  a1);
  uint64_t v28 = *(void *)(v53 + 40);
  swift_retain();
  id v29 = v27;
  sub_100041B5C();
  if ((sub_1001388A4(v28, v53, v29, a2, a3) & 1) == 0)
  {

    return;
  }

  uint64_t v56 = v29;
  uint64_t v30 = sub_100019310((uint64_t)&unk_100285C40, 25LL);
  *(void *)(v30 + 16) = 0LL;
  *(_BYTE *)(v30 + 24) = 0;
  uint64_t v31 = *(void *)(v53 + 32);
  if ((unint64_t)v31 >> 62)
  {
    if (v31 < 0) {
      uint64_t v44 = *(void *)(v53 + 32);
    }
    else {
      uint64_t v44 = v31 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_100019320();
    uint64_t v32 = _CocoaArrayWrapper.endIndex.getter(v44);
    if (v32) {
      goto LABEL_4;
    }
LABEL_10:
    sub_100019390();
    unint64_t v37 = (void *)sub_100019310((uint64_t)&unk_100285C90, 56LL);
    v37[2] = v53;
    v37[3] = v30;
    v37[4] = v26;
    v37[5] = a2;
    v37[6] = a3;
    aBlock[4] = sub_100119EF8;
    void aBlock[5] = v37;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000169C8;
    aBlock[3] = &unk_100285CA8;
    uint64_t v38 = _Block_copy(aBlock);
    id v39 = v26;
    swift_retain();
    swift_retain();
    uint64_t v40 = sub_100041B5C();
    static DispatchQoS.unspecified.getter(v40);
    uint64_t v57 = _swiftEmptyArrayStorage;
    uint64_t v41 = sub_1000D924C( (unint64_t *)&qword_1002B6F20,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (const char *)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v42 = sub_1000175B0(&qword_1002A9118);
    uint64_t v43 = sub_100043668((unint64_t *)&qword_1002B6F30, &qword_1002A9118);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v57, v42, v43, v50, v41);
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v45, v48, v56, v38);

    _Block_release(v38);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
    swift_release(v30);
    sub_10001EDD8();
    return;
  }

  uint64_t v32 = *(void *)((v31 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  sub_100019320();
  if (!v32) {
    goto LABEL_10;
  }
LABEL_4:
  if (v32 >= 1)
  {
    uint64_t v33 = 0LL;
    do
    {
      if ((v31 & 0xC000000000000001LL) != 0)
      {
        uint64_t v34 = specialized _ArrayBuffer._getElementSlowPath(_:)(v33, v31);
      }

      else
      {
        uint64_t v34 = *(void *)(v31 + 8 * v33 + 32);
        swift_retain();
      }

      ++v33;
      dispatch_group_enter(v22);
      uint64_t v35 = sub_100019310((uint64_t)&unk_100285C68, 32LL);
      *(void *)(v35 + 16) = v30;
      *(void *)(v35 + 24) = v22;
      sub_100041B5C();
      unint64_t v36 = v22;
      sub_10003F914();
      swift_release(v34);
      swift_release(v35);
    }

    while (v32 != v33);
    goto LABEL_10;
  }

  __break(1u);
}

uint64_t sub_1001190AC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v37 = *(void *)(v8 - 8);
  sub_100043FD8();
  __chkstk_darwin(v9);
  sub_10001DAD0();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_10001DAD0();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = *(void *)(a1 + 48);
  if (*(_BYTE *)(a1 + 56))
  {
    if (*(_BYTE *)(a1 + 56) == 1)
    {
      uint64_t v36 = v15;
      uint64_t v20 = (void *)sub_100019310((uint64_t)&unk_100285F70, 40LL);
      v20[2] = a3;
      v20[3] = a4;
      v20[4] = v19;
      aBlock[4] = sub_10010CF60;
      uint64_t v41 = v20;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1000169C8;
      aBlock[3] = &unk_100285F88;
      uint64_t v35 = _Block_copy(aBlock);
      sub_10011A7B4();
      sub_10011A7B4();
      uint64_t v21 = sub_10002A4C8();
      static DispatchQoS.unspecified.getter(v21);
      uint64_t v42 = _swiftEmptyArrayStorage;
      uint64_t v22 = sub_1000D924C( (unint64_t *)&qword_1002B6F20,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (const char *)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v23 = sub_1000175B0(&qword_1002A9118);
      uint64_t v24 = sub_100043668((unint64_t *)&qword_1002B6F30, &qword_1002A9118);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v42, v23, v24, v8, v22);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v18, v12, v35);
      _Block_release(v35);
      sub_100119F44(v19, 1);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v12, v8);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v18, v36);
      uint64_t result = swift_release(v41);
      char v26 = 0;
    }

    else
    {
      *(void *)(a1 + 48) = _swiftEmptyArrayStorage;
      *(_BYTE *)(a1 + 56) = 0;
      uint64_t result = sub_100119F44(v19, 2);
      char v26 = 1;
    }
  }

  else
  {
    uint64_t v27 = sub_100019310((uint64_t)&unk_100285FC0, 32LL);
    *(void *)(v27 + 16) = a3;
    *(void *)(v27 + 24) = a4;
    sub_10011A010(v19, 0);
    id v28 = a2;
    sub_10002A4C8();
    if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
    {
      sub_10011A7A8();
      uint64_t v19 = v33;
    }

    unint64_t v29 = *(void *)(v19 + 16);
    if (v29 >= *(void *)(v19 + 24) >> 1)
    {
      sub_10011A7A8();
      uint64_t v19 = v34;
    }

    *(void *)(v19 + 16) = v29 + 1;
    uint64_t v30 = (void *)(v19 + 24 * v29);
    v30[4] = v28;
    v30[5] = sub_10011A484;
    void v30[6] = v27;
    uint64_t v31 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v19;
    char v32 = *(_BYTE *)(a1 + 56);
    *(_BYTE *)(a1 + 56) = 0;
    uint64_t result = sub_100119F44(v31, v32);
    char v26 = 0;
  }

  *a5 = v26;
  return result;
}

void sub_1001193B0(uint64_t a1, char a2, uint64_t a3, dispatch_group_t group)
{
  if ((a2 & 1) != 0)
  {
    swift_beginAccess(a3 + 16, v9, 1LL, 0LL);
    uint64_t v7 = *(void *)(a3 + 16);
    char v8 = *(_BYTE *)(a3 + 24);
    *(void *)(a3 + 16) = a1;
    *(_BYTE *)(a3 + 24) = 1;
    swift_errorRetain(a1);
    sub_100034F08(v7, v8);
  }

  dispatch_group_leave(group);
}

void sub_100119434(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, uint64_t), uint64_t a5)
{
  uint64_t v64 = a5;
  uint64_t v65 = a3;
  uint64_t v62 = a4;
  uint64_t v58 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v63 = *(void (**)(char *, uint64_t))(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v59 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v66 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v61 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(a1 + 32);
  if ((unint64_t)v10 >> 62)
  {
    if (v10 < 0) {
      uint64_t v55 = *(void *)(a1 + 32);
    }
    else {
      uint64_t v55 = v10 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*(void *)(a1 + 32));
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v55);
    if (!v11) {
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(*(void *)(a1 + 32));
    if (!v11) {
      goto LABEL_9;
    }
  }

  if (v11 < 1)
  {
    __break(1u);
    goto LABEL_25;
  }

  for (uint64_t i = 0LL; i != v11; ++i)
  {
    if ((v10 & 0xC000000000000001LL) != 0)
    {
      uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v10);
    }

    else
    {
      uint64_t v13 = *(void *)(v10 + 8 * i + 32);
      swift_retain(v13);
    }

    sub_10003FF2C(1);
    swift_release(v13);
  }

uint64_t sub_10011996C(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  swift_errorRetain(v5);
  a1(v5);
  return swift_errorRelease(v5);
}

uint64_t sub_1001199D0(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 16);
  swift_errorRetain(v6);
  a2(v6);
  return swift_errorRelease(v6);
}

uint64_t static MultiThreadedEventLoopGroup.withCurrentThreadAsEventLoop(_:)(uint64_t a1, uint64_t a2)
{
  pthread_t v4 = pthread_self();
  uint64_t v5 = type metadata accessor for NIOThread();
  uint64_t v6 = (void *)sub_100019310(v5, 40LL);
  void v6[3] = 0LL;
  v6[4] = v4;
  _OWORD v6[2] = 0LL;
  uint64_t v7 = sub_100019310((uint64_t)&unk_100285CE0, 32LL);
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  sub_10002A4C8();
  sub_100118398( (uint64_t)v6,  1,  (uint64_t (*)(uint64_t))sub_1001187F8,  0LL,  (uint64_t (*)(void))debugOnly(_:),  0LL,  sub_100119F20);
  swift_release();
  return swift_release();
}

void *sub_100119AE0()
{
  uint64_t v0 = sub_1000175B0(&qword_1002B14E0);
  sub_100019310(v0, 80LL);
  return sub_100117F5C();
}

void *MultiThreadedEventLoopGroup._preconditionSafeToSyncShutdown(file:line:)()
{
  uint64_t result = static MultiThreadedEventLoopGroup.currentEventLoop.getter();
  if (result)
  {
    uint64_t result = (void *)swift_unknownObjectRelease(result);
    __break(1u);
  }

  return result;
}

uint64_t MultiThreadedEventLoopGroup.deinit()
{
  return v0;
}

uint64_t MultiThreadedEventLoopGroup.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 57LL, 7LL);
}

uint64_t sub_100119B8C()
{
  return MultiThreadedEventLoopGroup.next()();
}

void sub_100119BAC()
{
}

uint64_t MultiThreadedEventLoopGroup.description.getter()
{
  v0._object = (void *)0x800000010021CF40LL;
  v0._uint64_t countAndFlagsBits = 0xD000000000000036LL;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v1);
  sub_100019390();
  v2._uint64_t countAndFlagsBits = 0x7D202A232DLL;
  v2._object = (void *)0xE500000000000000LL;
  String.append(_:)(v2);
  return 0LL;
}

uint64_t sub_100119C74()
{
  return MultiThreadedEventLoopGroup.description.getter();
}

uint64_t ScheduledTask._readyTime.getter()
{
  return *(void *)(v0 + 48);
}

void *ScheduledTask.init(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a1;
  v5[3] = a2;
  v5[4] = a3;
  v5[5] = a4;
  v5[6] = a5;
  return v5;
}

uint64_t ScheduledTask.deinit()
{
  return v0;
}

uint64_t ScheduledTask.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t ScheduledTask.description.getter()
{
  v1._object = (void *)0x800000010021CF80LL;
  v1._uint64_t countAndFlagsBits = 0xD000000000000019LL;
  String.append(_:)(v1);
  sub_100117D20(*(void *)(v0 + 48));
  v2._uint64_t countAndFlagsBits = 41LL;
  v2._object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  return 0LL;
}

uint64_t sub_100119D6C()
{
  return ScheduledTask.description.getter();
}

uint64_t static ScheduledTask.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 48);
  if ((v2 & 0x8000000000000000LL) == 0)
  {
    unint64_t v3 = *(void *)(a2 + 48);
    if ((v3 & 0x8000000000000000LL) == 0) {
      return v2 < v3;
    }
  }

  sub_100083070();
  uint64_t result = sub_100083058( (uint64_t)"Fatal error",  v5,  v6,  (uint64_t)"Negative value is not representable",  v7,  v8,  (uint64_t)"Swift/Integers.swift");
  __break(1u);
  return result;
}

uint64_t sub_100119DE0(uint64_t *a1, uint64_t *a2)
{
  return static ScheduledTask.< infix(_:_:)(*a1, *a2) & 1;
}

BOOL sub_100119E00(uint64_t *a1, uint64_t *a2)
{
  return sub_1001A8EFC(*a1, *a2);
}

BOOL sub_100119E0C(uint64_t *a1, uint64_t *a2)
{
  return sub_10006BAAC(*a1, *a2);
}

uint64_t sub_100119E18(uint64_t *a1, uint64_t *a2)
{
  return sub_100068D70(*a1, *a2);
}

BOOL sub_100119E24(uint64_t *a1, uint64_t *a2)
{
  return static ChannelOptions.Types.SocketOption.__derived_struct_equals(_:_:)(*a1, *a2);
}

unint64_t sub_100119E44(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (*(void *)(a3 + 16) > result)
    {
      return result;
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_100119E68()
{
  return swift_deallocObject(v0, 25LL, 7LL);
}

uint64_t sub_100119E90()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100119EB8(uint64_t a1, char a2)
{
}

uint64_t sub_100119EC4()
{
  swift_release();
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_100119EF8()
{
}

uint64_t sub_100119F08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1001A93A0(0LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100119F18(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_100119F20(uint64_t a1)
{
}

uint64_t sub_100119F44(uint64_t result, char a2)
{
  if (a2 == 1) {
    return swift_errorRelease(result);
  }
  if (!a2) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t sub_100119F60(uint64_t a1, uint64_t a2)
{
  return sub_1000D924C( &qword_1002B1360,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for ScheduledTask,  protocol conformance descriptor for ScheduledTask);
}

uint64_t type metadata accessor for ScheduledTask()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService13ScheduledTask);
}

uint64_t type metadata accessor for MultiThreadedEventLoopGroup()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService27MultiThreadedEventLoopGroup);
}

uint64_t initializeBufferWithCopyOfBuffer for MultiThreadedEventLoopGroup.RunState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  sub_10011A010(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_10011A010(uint64_t result, char a2)
{
  if (a2 == 1) {
    return swift_errorRetain(result);
  }
  if (!a2) {
    return swift_bridgeObjectRetain(result);
  }
  return result;
}

uint64_t destroy for MultiThreadedEventLoopGroup.RunState(uint64_t a1)
{
  return sub_100119F44(*(void *)a1, *(_BYTE *)(a1 + 8));
}

void assignWithCopy for MultiThreadedEventLoopGroup.RunState(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t assignWithTake for MultiThreadedEventLoopGroup.RunState(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_100119F44(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for MultiThreadedEventLoopGroup.RunState(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MultiThreadedEventLoopGroup.RunState( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10011A110(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_10011A128(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }

  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MultiThreadedEventLoopGroup.RunState()
{
  return &type metadata for MultiThreadedEventLoopGroup.RunState;
}

void sub_10011A154(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = sub_10011A76C(a1, a2);
  Scheduled._promise.getter(v6);
  *(void *)uint64_t v2 = v3;
  *(_BYTE *)(v2 + 8) = v4;
  *(_BYTE *)(v2 + 9) = *(_BYTE *)(a2 + 9);
  *(_DWORD *)(v2 + 12) = *(_DWORD *)(a2 + 12);
  sub_1000193B8();
}

uint64_t *assignWithCopy for NIORegistration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((_BYTE *)a2 + 8);
  Scheduled._promise.getter(*a2);
  uint64_t v6 = *a1;
  *a1 = v4;
  *((_BYTE *)a1 + 8) = v5;
  j__swift_release(v6);
  *((_BYTE *)a1 + 9) = *((_BYTE *)a2 + 9);
  *((_DWORD *)a1 + 3) = *((_DWORD *)a2 + 3);
  return a1;
}

uint64_t *assignWithTake for NIORegistration(uint64_t *a1, uint64_t *a2)
{
  char v4 = *((_BYTE *)a2 + 8);
  uint64_t v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  j__swift_release(v5);
  *((_BYTE *)a1 + 9) = *((_BYTE *)a2 + 9);
  *((_DWORD *)a1 + 3) = *((_DWORD *)a2 + 3);
  return a1;
}

uint64_t getEnumTagSinglePayload for NIORegistration(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x3FFD && *(_BYTE *)(a1 + 16))
    {
      unsigned int v2 = *(_DWORD *)a1 + 16380;
    }

    else
    {
      unsigned int v2 = ((*(unsigned __int8 *)(a1 + 8) >> 6) | (4
                                                 * ((*(void *)a1 >> 57) & 0x78 | *(void *)a1 & 7 | (((*(unsigned __int8 *)(a1 + 8) >> 1) & 0x1F) << 7)))) ^ 0x3FFF;
      if (v2 >> 2 >= 0xFFF) {
        unsigned int v2 = -1;
      }
    }
  }

  else
  {
    unsigned int v2 = -1;
  }

  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for NIORegistration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3FFC)
  {
    *(void *)uint64_t result = a2 - 16381;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x3FFD) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x3FFD) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0xFFF | ((-a2 & 0x3FFF) << 12);
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007LL;
      *(_BYTE *)(result + 8) = (v3 >> 6) & 0xFE;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NIORegistration()
{
  return &type metadata for NIORegistration;
}

unint64_t sub_10011A330(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (*(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10) > result)
    {
      return result;
    }

    __break(1u);
  }

  return result;
}

unint64_t sub_10011A354()
{
  unint64_t result = qword_1002B14D8;
  if (!qword_1002B14D8)
  {
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_1002B14D8);
  }

  return result;
}

uint64_t sub_10011A390()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10011A3B4()
{
  return sub_10011A450((void (*)(void))&_swift_release);
}

uint64_t sub_10011A3C0()
{
  return sub_10011996C(*(void (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10011A3CC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10011A3EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t sub_10011A408()
{
  swift_release();
  sub_100041B9C();
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10011A438()
{
  return sub_1001199D0( *(void *)(v0 + 16),  *(void (**)(uint64_t))(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40));
}

uint64_t sub_10011A444()
{
  return sub_10011A450((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10011A450(void (*a1)(void))
{
  return swift_deallocObject(v1, 40LL, 7LL);
}

void sub_10011A484(void *a1)
{
}

uint64_t sub_10011A4A4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10011A4C4()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_10011A500(uint64_t a1)
{
  return sub_1001186D4( a1,  *(uint64_t (**)(uint64_t))(v1 + 16),  *(void *)(v1 + 24),  *(uint64_t (**)(void))(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56),  *(void **)(v1 + 64));
}

uint64_t initializeBufferWithCopyOfBuffer for NIORegistration.ChannelType(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((_BYTE *)a2 + 8);
  Scheduled._promise.getter(*a2);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for NIORegistration.ChannelType(void *a1)
{
  return j__swift_release(*a1);
}

void assignWithCopy for NIORegistration.ChannelType(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10011A57C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v9 = sub_10011A76C(a1, a2);
  v10(v9);
  uint64_t v11 = *v5;
  *uint64_t v5 = v6;
  uint64_t v12 = *((unsigned __int8 *)v5 + 8);
  *((_BYTE *)v5 + 8) = v7;
  a5(v11, v12);
  sub_1000193B8();
}

uint64_t *assignWithTake for NIORegistration.ChannelType(uint64_t *a1, uint64_t *a2)
{
  char v3 = *((_BYTE *)a2 + 8);
  uint64_t v4 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v3;
  j__swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NIORegistration.ChannelType(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x3FFD && *(_BYTE *)(a1 + 9))
    {
      unsigned int v2 = *(_DWORD *)a1 + 16380;
    }

    else
    {
      unsigned int v2 = ((*(unsigned __int8 *)(a1 + 8) >> 6) | (4
                                                 * ((*(void *)a1 >> 57) & 0x78 | *(void *)a1 & 7 | (((*(unsigned __int8 *)(a1 + 8) >> 1) & 0x1F) << 7)))) ^ 0x3FFF;
      if (v2 >> 2 >= 0xFFF) {
        unsigned int v2 = -1;
      }
    }
  }

  else
  {
    unsigned int v2 = -1;
  }

  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for NIORegistration.ChannelType( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3FFC)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 16381;
    if (a3 >= 0x3FFD) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0x3FFD) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0xFFF | ((-a2 & 0x3FFF) << 12);
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007LL;
      *(_BYTE *)(result + 8) = (v3 >> 6) & 0xFE;
    }
  }

  return result;
}

uint64_t sub_10011A6D0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8) >> 6;
}

uint64_t sub_10011A6DC(uint64_t result)
{
  *(_BYTE *)(result + 8) &= 0x3Fu;
  return result;
}

uint64_t sub_10011A6EC(uint64_t result, char a2)
{
  char v2 = *(_BYTE *)(result + 8) & 1 | (a2 << 6);
  *(void *)result &= 0xFFFFFFFFFFFFFF8uLL;
  *(_BYTE *)(result + 8) = v2;
  return result;
}

ValueMetadata *type metadata accessor for NIORegistration.ChannelType()
{
  return &type metadata for NIORegistration.ChannelType;
}

uint64_t sub_10011A74C()
{
  return dispatch thunk of CustomStringConvertible.description.getter(v1, v0);
}

uint64_t sub_10011A75C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = *(uint64_t (**)(uint64_t *))(v10 + 16);
  a10 = a1;
  return v11(&a10);
}

uint64_t sub_10011A76C(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

unint64_t sub_10011A784()
{
  return sub_100006F14(v0, 1LL);
}

void sub_10011A790(Swift::String a1)
{
}

  ;
}

void sub_10011A7A8()
{
}

uint64_t sub_10011A7B4()
{
  return sub_10011A010(v0, 1);
}

uint64_t sub_10011A7C8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10011A800
                                                                     + 4 * asc_100200910[a1]))( 0xD000000000000019LL,  0x800000010021D170LL);
}

uint64_t sub_10011A800(uint64_t a1)
{
  return a1 + 6;
}

uint64_t sub_10011A838()
{
  return sub_10011A7C8(*v0);
}

uint64_t sub_10011A84C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10011A88C + 4 * byte_100200914[a1]))( 0xD00000000000003FLL,  0x800000010021D220LL);
}

uint64_t sub_10011A88C()
{
  return v0 + 37;
}

unint64_t sub_10011A8B4()
{
  return 0xD000000000000019LL;
}

uint64_t sub_10011A8D0()
{
  return sub_10011A84C(*v0);
}

ValueMetadata *type metadata accessor for ConfigurationError()
{
  return &type metadata for ConfigurationError;
}

uint64_t _s25ASOctaneSupportXPCService18ConfigurationErrorOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10011A93C + 4 * byte_10020091D[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10011A970 + 4 * byte_100200918[v4]))();
}

uint64_t sub_10011A970(uint64_t result)
{
  *(_BYTE *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_10011A978(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x10011A980LL);
  }
  return result;
}

uint64_t sub_10011A98C(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x10011A994LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10011A998(uint64_t result)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_10011A9A0(uint64_t result)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TransactionError()
{
  return &type metadata for TransactionError;
}

unint64_t sub_10011A9C0()
{
  unint64_t result = qword_1002B14F8;
  if (!qword_1002B14F8)
  {
    unint64_t result = swift_getWitnessTable(byte_100200AF4, &type metadata for TransactionError);
    atomic_store(result, (unint64_t *)&qword_1002B14F8);
  }

  return result;
}

unint64_t sub_10011AA00()
{
  unint64_t result = qword_1002B1500;
  if (!qword_1002B1500)
  {
    unint64_t result = swift_getWitnessTable(byte_100200B5C, &type metadata for ConfigurationError);
    atomic_store(result, (unint64_t *)&qword_1002B1500);
  }

  return result;
}

void sub_10011AA40()
{
  uint64_t v0 = sub_10011D048();
  sub_10011BCE8(v0);
  sub_1000193DC();
}

uint64_t sub_10011AA84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_10011D020();
  sub_10011C7A0(a1, a2, a3, a4, a5);
  return v10;
}

void sub_10011AAFC()
{
  uint64_t v0 = sub_10011D048();
  sub_10011C07C(v0);
  sub_10002A580();
}

BOOL sub_10011AB40(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100272C18, v2);
  sub_100019390();
  return v3 != 0;
}

uint64_t sub_10011AB80()
{
  return 0x7A69726F68747561LL;
}

unint64_t sub_10011ABA4(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100272C50, v2);
  sub_100019390();
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10011ABE8(char a1)
{
  if (!a1) {
    return 7959874LL;
  }
  if (a1 == 1) {
    return 0x6C65636E6143LL;
  }
  return 27503LL;
}

BOOL sub_10011AC34@<W0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = sub_10011AB40(*a1);
  *a2 = result;
  return result;
}

void sub_10011AC68(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t sub_10011AC90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10011CB1C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10011ACEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10011CB1C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_10011AD38(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_10011AD44()
{
}

uint64_t sub_10011AD4C(uint64_t a1)
{
  return sub_1000B2400(a1, *v1);
}

void sub_10011AD54(uint64_t a1)
{
}

unint64_t sub_10011AD5C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10011ABA4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10011AD88@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10011ABE8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10011ADB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10011CAE0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10011AE0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10011CAE0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

id sub_10011AE58()
{
  id result = sub_10011AE74();
  qword_1002EB980 = (uint64_t)result;
  return result;
}

id sub_10011AE74()
{
  uint64_t v0 = type metadata accessor for Locale(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v4 = [objc_allocWithZone(NSNumberFormatter) init];
  [v4 setNumberStyle:5];
  Locale.init(identifier:)(0x53555F6E65LL, 0xE500000000000000LL);
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  [v4 setLocale:isa];

  return v4;
}

uint64_t sub_10011AF50()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CharacterSet(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v6 = (void *)(v0 + 40);
  swift_beginAccess(v0 + 40, v14, 0LL, 0LL);
  uint64_t result = *(void *)(v0 + 48);
  if (result)
  {
    v13[0] = *v6;
    v13[1] = result;
    uint64_t v8 = swift_bridgeObjectRetain();
    static CharacterSet.whitespacesAndNewlines.getter(v8);
    unint64_t v9 = sub_10001B4A0();
    StringProtocol.trimmingCharacters(in:)(v5, &type metadata for String, v9);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    swift_bridgeObjectRelease();
    v10._object = (void *)0x800000010021D950LL;
    v10._uint64_t countAndFlagsBits = 0xD000000000000014LL;
    Swift::Bool v11 = String.hasSuffix(_:)(v10);
    uint64_t result = swift_bridgeObjectRelease();
    if (!v11)
    {
      swift_beginAccess(v6, v13, 33LL, 0LL);
      if (*(void *)(v1 + 48))
      {
        v12._uint64_t countAndFlagsBits = 0xD000000000000016LL;
        v12._object = (void *)0x800000010021AB60LL;
        String.append(_:)(v12);
      }

      return swift_endAccess(v13);
    }
  }

  return result;
}

uint64_t sub_10011B0B0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 4sub_1001A93A0(0LL, 0) = a1;
  *(void *)(v2 + 48) = a2;
  swift_bridgeObjectRelease();
  return sub_10011AF50();
}

unint64_t sub_10011B104(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100272CB8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xC) {
    return 12LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10011B150(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10011B17C + 4 * byte_100200B90[a1]))( 1684957547LL,  0xE400000000000000LL);
}

uint64_t sub_10011B17C()
{
  return 0x65776F6C6C612D6DLL;
}

uint64_t sub_10011B198()
{
  return 0x6567617373656DLL;
}

uint64_t sub_10011B1B0()
{
  return 0x74616E616C707865LL;
}

uint64_t sub_10011B1D0()
{
  return 0x42746C7561666564LL;
}

uint64_t sub_10011B1F4()
{
  return 0x6E6F747475426B6FLL;
}

unint64_t sub_10011B228()
{
  return 0xD000000000000012LL;
}

void sub_10011B254()
{
}

uint64_t sub_10011B2A4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10011B2D0 + 4 * byte_100200B9C[a1]))( 1684957547LL,  0xE400000000000000LL);
}

uint64_t sub_10011B2D0()
{
  return 0x65776F6C6C612D6DLL;
}

uint64_t sub_10011B2EC()
{
  return 0x6567617373656DLL;
}

uint64_t sub_10011B304()
{
  return 0x74616E616C707865LL;
}

uint64_t sub_10011B324()
{
  return 0x42746C7561666564LL;
}

uint64_t sub_10011B348()
{
  return 0x6E6F747475426B6FLL;
}

unint64_t sub_10011B37C()
{
  return 0xD000000000000012LL;
}

unint64_t sub_10011B3A4()
{
  return 0xD000000000000014LL;
}

void sub_10011B3F0(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_10011B3FC()
{
}

uint64_t sub_10011B404(uint64_t a1)
{
  return sub_1000B11F4(a1, *v1);
}

void sub_10011B40C(uint64_t a1)
{
}

unint64_t sub_10011B414@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10011B104(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10011B440@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10011B150(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10011B468()
{
  return sub_10011B2A4(*v0);
}

uint64_t sub_10011B470@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10011B14C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10011B494(uint64_t a1)
{
  unint64_t v2 = sub_10011CCB4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10011B4BC(uint64_t a1)
{
  unint64_t v2 = sub_10011CCB4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t *sub_10011B4E4()
{
  return v0;
}

uint64_t sub_10011B56C()
{
  return swift_deallocClassInstance(v0, 448LL, 7LL);
}

uint64_t type metadata accessor for Dialog()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService6Dialog);
}

uint64_t sub_10011B5AC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000175B0(&qword_1002B35C8);
  __chkstk_darwin(v5);
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100019F58(a1, v6);
  unint64_t v8 = sub_10011CCB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for Dialog.CodingKeys,  &type metadata for Dialog.CodingKeys,  v8,  v6,  v7);
  LOBYTE(v29) = *(_BYTE *)(v3 + 16);
  v28[0] = 0;
  unint64_t v9 = sub_10011CCF0();
  sub_10011CFC8((uint64_t)&v29, (uint64_t)v28, v5, (uint64_t)&type metadata for DialogKind, v9);
  if (v2) {
    return sub_10011D088();
  }
  uint64_t v10 = *(unsigned __int8 *)(v3 + 17);
  LOBYTE(v29) = 1;
  KeyedEncodingContainer.encode(_:forKey:)(v10, &v29, v5);
  uint64_t v12 = *(void *)(v3 + 24);
  sub_10011D014(2);
  sub_10011CF70();
  if (!v12)
  {
    sub_100023EF4();
    swift_beginAccess(v3 + 40, v35, 0LL, 0LL);
    uint64_t v13 = *(void *)(v3 + 40);
    sub_10011D014(3);
    sub_10011CF70();
    if (!v13)
    {
      sub_100023EF4();
      LOBYTE(v29) = *(_BYTE *)(v3 + 56);
      v28[0] = 4;
      unint64_t v14 = sub_10011CD2C();
      sub_10011CFC8((uint64_t)&v29, (uint64_t)v28, v5, (uint64_t)&type metadata for DefaultButton, v14);
      uint64_t v15 = *(void *)(v3 + 64);
      sub_10011D014(5);
      sub_10011CF70();
      if (!v15)
      {
        sub_100023EF4();
        uint64_t v16 = *(void *)(v3 + 128);
        __int16 v17 = *(_WORD *)(v3 + 136);
        __int128 v18 = *(_OWORD *)(v3 + 96);
        __int128 v29 = *(_OWORD *)(v3 + 80);
        __int128 v30 = v18;
        __int128 v31 = *(_OWORD *)(v3 + 112);
        uint64_t v32 = v16;
        __int16 v33 = v17;
        v28[0] = 6;
        unint64_t v19 = sub_10011CD68();
        sub_10011CFC8((uint64_t)&v29, (uint64_t)v28, v5, (uint64_t)&unk_100281FE8, v19);
        unint64_t v36 = v19;
        uint64_t v20 = *(void *)(v3 + 144);
        sub_10011D014(7);
        sub_10011CF70();
        if (!v20)
        {
          sub_100023EF4();
          uint64_t v21 = *(void *)(v3 + 208);
          __int16 v22 = *(_WORD *)(v3 + 216);
          __int128 v23 = *(_OWORD *)(v3 + 176);
          __int128 v29 = *(_OWORD *)(v3 + 160);
          __int128 v30 = v23;
          __int128 v31 = *(_OWORD *)(v3 + 192);
          uint64_t v32 = v21;
          __int16 v33 = v22;
          v28[0] = 8;
          sub_10011CFC8((uint64_t)&v29, (uint64_t)v28, v5, (uint64_t)&unk_100281FE8, v36);
          uint64_t v24 = *(unsigned __int8 *)(v3 + 218);
          LOBYTE(v29) = 9;
          sub_10011D098(v24, (uint64_t)&v29);
          uint64_t v25 = *(unsigned __int8 *)(v3 + 219);
          char v34 = 10;
          sub_10011D098(v25, (uint64_t)&v34);
          sub_1000390C8(v3 + 224, (uint64_t)&v29, &qword_1002B35C0);
          sub_1000390C8((uint64_t)&v29, (uint64_t)v28, &qword_1002B35C0);
          char v27 = 11;
          unint64_t v26 = sub_10011CDA4();
          sub_10011CFC8((uint64_t)v28, (uint64_t)&v27, v5, (uint64_t)&unk_10028CD00, v26);
          return sub_10011D088();
        }
      }
    }
  }

  sub_10011D088();
  return sub_100023EF4();
}

uint64_t sub_10011B8D4()
{
  *(_WORD *)(v0 + 16) = 1;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 4sub_1001A93A0(0LL, 0) = 0u;
  *(_BYTE *)(v0 + 56) = 3;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 8sub_1001A93A0(0LL, 0) = 0u;
  *(void *)(v0 + 96) = 1LL;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 12sub_1001A93A0(0LL, 0) = 0u;
  *(_WORD *)(v0 + 136) = 0;
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 16sub_1001A93A0(0LL, 0) = 0u;
  *(void *)(v0 + 176) = 1LL;
  *(_OWORD *)(v0 + 184) = 0u;
  *(_OWORD *)(v0 + 20sub_1001A93A0(0LL, 0) = 0u;
  *(_DWORD *)(v0 + 216) = 33619968;
  sub_10011CB58(v2);
  sub_1000390C8((uint64_t)v2, v0 + 224, &qword_1002B35C0);
  return v0;
}

uint64_t sub_10011B960(void *a1)
{
  return sub_10011B5AC(a1);
}

void *sub_10011B980(uint64_t *a1)
{
  uint64_t v2 = v1;
  unint64_t v4 = 0xD000000000000010LL;
  sub_10011B8D4();
  sub_1000390C8((uint64_t)(a1 + 24), (uint64_t)v28, &qword_1002B35F8);
  sub_1000390C8((uint64_t)v28, (uint64_t)v30, &qword_1002B35F8);
  if (v30[0])
  {
    unint64_t v5 = 0x800000010021DAC0LL;
  }

  else
  {
    uint64_t v6 = sub_10011D100();
    uint64_t v7 = sub_10011D114(v6);
    if (v7) {
      unint64_t v4 = 0xD000000000000012LL;
    }
    else {
      unint64_t v4 = 0xD00000000000001CLL;
    }
    unint64_t v5 = 0x800000010021DAA0LL;
    if (!v7) {
      unint64_t v5 = 0x800000010021DA80LL;
    }
  }

  v1[3] = v4;
  v1[4] = v5;
  sub_10002A4C8();
  sub_10001EDA0();
  uint64_t v8 = sub_100081444();
  sub_10011D040(v8, v9);
  sub_1000390C8((uint64_t)v28, (uint64_t)v29, &qword_1002B35F8);
  if (v29[0])
  {
    __n128 v10 = (__n128)xmmword_1001FEDB0;
  }

  else
  {
    uint64_t v11 = sub_10011D100();
    int32x2_t v12 = vdup_n_s32(sub_10011D114(v11) == 0);
    v13.i64[0] = v12.u32[0];
    v13.i64[1] = v12.u32[1];
    __n128 v10 = (__n128)vbslq_s8( (int8x16_t)vcltzq_s64(vshlq_n_s64(v13, 0x3FuLL)),  (int8x16_t)xmmword_100201190,  (int8x16_t)xmmword_100201180);
  }

  sub_10011D0B8(v1[9], v10);
  uint64_t v15 = a1[9];
  uint64_t v14 = a1[10];
  uint64_t v16 = a1[11];
  uint64_t v17 = *(void *)(v16 + 80);
  uint64_t v18 = *(void *)(v16 + 88);
  char v27 = a1;
  uint64_t v19 = v2[10];
  uint64_t v20 = v2[11];
  uint64_t v21 = v2[12];
  uint64_t v22 = v2[13];
  uint64_t v23 = v2[14];
  uint64_t v24 = v2[15];
  uint64_t v25 = v2[16];
  v2[10] = 1LL;
  v2[11] = v15;
  v2[12] = v14;
  v2[13] = v17;
  v2[14] = v18;
  v2[15] = 0LL;
  v2[16] = 0LL;
  *((_WORD *)v2 + 68) = 513;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000E52B4(v19, v20, v21, v22, v23, v24, v25);
  *((_BYTE *)v2 + 56) = 0;
  sub_10011D10C(v2[19], (__n128)xmmword_1001FEDA0);
  sub_1000A39D4(v27);
  sub_10001EDD8();
  return v2;
}

uint64_t type metadata accessor for ConfirmDialog()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService13ConfirmDialog);
}

uint64_t sub_10011BB88()
{
  *(_BYTE *)(v0 + 219) = 1;
  sub_10011D000(0x1000000000000011LL);
  sub_100019390();
  sub_10001DBF4();
  sub_10011D150(29LL, v1);
  *(_BYTE *)(v0 + 56) = 2;
  *(_OWORD *)(v0 + 64) = xmmword_1001FEDB0;
  sub_100024F0C();
  sub_100019390();
  return v0;
}

uint64_t type metadata accessor for AllSetDialog()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService12AllSetDialog);
}

void sub_10011BC20()
{
  *(_BYTE *)(v0 + 219) = 1;
  sub_10011D000(0x100000000000004ALL);
  sub_10003561C();
  sub_10001DBF4();
  sub_10011D150(21LL, v1);
  *(_BYTE *)(v0 + 56) = 2;
  *(_OWORD *)(v0 + 64) = xmmword_1001FEDB0;
  uint64_t v2 = swift_bridgeObjectRelease();
  sub_10011CF8C(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
  sub_10011CFDC();
  sub_10001EDD8();
  *(_OWORD *)(v0 + 144) = xmmword_1001FEDA0;
  sub_100024F0C();
  sub_100019390();
  sub_100092B84();
}

uint64_t type metadata accessor for AlreadyOwnNonConsumableDialog()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService29AlreadyOwnNonConsumableDialog);
}

#error "10011BDBC: call analysis failed (funcsize=120)"
uint64_t sub_10011BEE4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v5 = sub_10001B408(a3, 0xBu);
  v6._uint64_t countAndFlagsBits = a1;
  v6._object = a2;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = 0x3D7070613FLL;
  v7._object = (void *)0xE500000000000000LL;
  String.append(_:)(v7);
  sub_100019390();
  return v5;
}

uint64_t type metadata accessor for AlreadyOwnSubscriptionDialog()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService28AlreadyOwnSubscriptionDialog);
}

uint64_t sub_10011BF98()
{
  *(void *)(v0 + 24) = 0xD000000000000012LL;
  *(void *)(v0 + 32) = 0x800000010021D8F0LL;
  sub_10002A4C8();
  sub_10001EDA0();
  _StringGuts.grow(_:)(64LL);
  sub_10011D0A8(0xD00000000000003ELL, (uint64_t)"This offer can't be redeemed with your current subscription.\n\n");
  sub_10011D0A8(0xD000000000000014LL, (uint64_t)"[Environment: Xcode]");
  sub_10011D040(0LL, 0xE000000000000000LL);
  *(_BYTE *)(v0 + 56) = 2;
  *(_OWORD *)(v0 + 64) = xmmword_1001FEDB0;
  sub_10001EDD8();
  sub_10001EDA0();
  return v0;
}

uint64_t type metadata accessor for CannotRedeemOfferCodeDialog()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService27CannotRedeemOfferCodeDialog);
}

#error "10011C118: call analysis failed (funcsize=95)"
uint64_t type metadata accessor for AskToBuyDialog()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService14AskToBuyDialog);
}

void sub_10011C228()
{
  *(_BYTE *)(v0 + 56) = 2;
  *(_OWORD *)(v0 + 64) = xmmword_100201190;
  uint64_t v2 = swift_bridgeObjectRelease();
  sub_10011CF8C(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
  sub_10011CFDC();
  sub_10001EDD8();
  *(_OWORD *)(v0 + 144) = xmmword_1001FEDA0;
  sub_100024F0C();
  sub_100019390();
  sub_100092B84();
}

uint64_t type metadata accessor for PreviouslyPurchasedNonRenewingSubscriptionDialog()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService48PreviouslyPurchasedNonRenewingSubscriptionDialog);
}

uint64_t sub_10011C2E8()
{
  return sub_10011CFD4(18LL, 0x800000010021D8A0LL, 0xD00000000000002BLL, 0x800000010021D8C0LL);
}

uint64_t type metadata accessor for UnableToPurchaseDialog()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService22UnableToPurchaseDialog);
}

uint64_t sub_10011C33C()
{
  return sub_10011CFD4(22LL, 0x800000010021DA10LL, 0xD00000000000004CLL, 0x800000010021DA30LL);
}

uint64_t type metadata accessor for IneligibleForOfferDialog()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService24IneligibleForOfferDialog);
}

uint64_t sub_10011C390()
{
  *(void *)(v0 + 24) = 0xD00000000000001CLL;
  *(void *)(v0 + 32) = 0x800000010021D7E0LL;
  sub_10002A4C8();
  sub_10001EDA0();
  _StringGuts.grow(_:)(52LL);
  sub_10011D0F0(v1, 0x800000010021D800LL);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v2);
  sub_10001A3F8();
  sub_10011D030(0xD00000000000001ALL, (uint64_t)" of this item at one time.");
  sub_10011D040(0LL, 0xE000000000000000LL);
  *(_BYTE *)(v0 + 56) = 2;
  *(_OWORD *)(v0 + 64) = xmmword_1001FEDB0;
  sub_10001EDD8();
  sub_10001EDA0();
  return v0;
}

uint64_t type metadata accessor for InvalidQuantityDialog()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService21InvalidQuantityDialog);
}

uint64_t sub_10011C4A8()
{
  return sub_10011C534(0xD000000000000033LL, 0x800000010021D780LL, 0xD00000000000001ELL, 0x800000010021D7C0LL);
}

uint64_t type metadata accessor for MultipleQuantitiesNotAllowedDialog()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService34MultipleQuantitiesNotAllowedDialog);
}

uint64_t sub_10011C500()
{
  return sub_10011CFD4(27LL, 0x800000010021D840LL, 0xD00000000000003ELL, 0x800000010021D860LL);
}

uint64_t sub_10011C534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 24) = v6;
  *(void *)(v4 + 32) = v5;
  swift_retain();
  swift_bridgeObjectRelease();
  sub_10011B0B0(a3, a4);
  *(_BYTE *)(v4 + 56) = 2;
  *(_OWORD *)(v4 + 64) = xmmword_1001FEDB0;
  sub_100024F0C();
  sub_100019390();
  return v4;
}

uint64_t type metadata accessor for InvalidAppAccountTokenDialog()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService28InvalidAppAccountTokenDialog);
}

uint64_t sub_10011C5D0(uint64_t a1, void *a2, double a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10011BB88();
  swift_retain();
  Date.init(timeIntervalSinceReferenceDate:)(a3);
  if (qword_1002A8CA8 != -1) {
    swift_once(&qword_1002A8CA8, sub_100043918);
  }
  int32x2_t v12 = (void *)qword_1002AAFE8;
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v14 = [v12 stringFromDate:isa];

  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  uint64_t v17 = v16;

  uint64_t v23 = 0LL;
  uint64_t v24 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(47LL);
  swift_bridgeObjectRelease();
  uint64_t v23 = 0xD000000000000026LL;
  uint64_t v24 = 0x800000010021D9E0LL;
  v18._uint64_t countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  sub_100056ADC();
  v19._uint64_t countAndFlagsBits = 544497952LL;
  v19._object = (void *)0xE400000000000000LL;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = a1;
  v20._object = a2;
  String.append(_:)(v20);
  sub_10003561C();
  v21._uint64_t countAndFlagsBits = 46LL;
  v21._object = (void *)0xE100000000000000LL;
  String.append(_:)(v21);
  sub_10011D040(v23, v24);
  sub_10001EDD8();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v4;
}

uint64_t type metadata accessor for DidConsentToPriceIncreaseDialog()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService31DidConsentToPriceIncreaseDialog);
}

void sub_10011C7A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = v5;
  sub_10011D158();
  *(void *)(v5 + 24) = 0xD000000000000020LL;
  *(void *)(v5 + 32) = 0x800000010021C820LL;
  sub_10002A4C8();
  sub_10001EDA0();
  sub_10001DBF4();
  sub_10011D040(v12, v13);
  uint64_t v14 = sub_10011D0D0();
  sub_10011D0B8(v14, (__n128)xmmword_1001FEDB0);
  if (a5)
  {
    type metadata accessor for ConfirmPurchaseEngagementUIRoute();
    swift_unknownObjectRetain(a5);
    swift_bridgeObjectRetain();
    sub_10005F318(a3, a4);
    sub_10001A3F8();
    uint64_t v15 = sub_1000D95A4();
    uint64_t v17 = v16;
    swift_bridgeObjectRelease();
    sub_10011D148(a5);
    uint64_t v18 = sub_10011D134();
    *(void *)(v8 + 8sub_1001A93A0(0LL, 0) = 2LL;
    *(void *)(v8 + 88) = a3;
    *(void *)(v8 + 96) = a4;
    *(void *)(v8 + 104) = v7;
    *(void *)(v8 + 112) = v6;
    *(void *)(v8 + 12sub_1001A93A0(0LL, 0) = v15;
    *(void *)(v8 + 128) = v17;
    *(_WORD *)(v8 + 136) = 256;
    sub_1000E52B4(v18, v19, v20, v21, v22, v23, v24);
  }

  else
  {
    sub_100023EEC();
    sub_10001A3F8();
  }

  *(_BYTE *)(v8 + 218) = 1;
  sub_10001EDD8();
  sub_10002A580();
}

uint64_t type metadata accessor for PurchaseEngagementDialog()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService24PurchaseEngagementDialog);
}

uint64_t storeEnumTagSinglePayload for DefaultButton(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10011C944 + 4 * byte_100200BAD[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10011C978 + 4 * byte_100200BA8[v4]))();
}

uint64_t sub_10011C978(uint64_t result)
{
  *(_BYTE *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_10011C980(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x10011C988LL);
  }
  return result;
}

uint64_t sub_10011C994(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x10011C99CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10011C9A0(uint64_t result)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_10011C9A8(uint64_t result)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DefaultButton()
{
  return &type metadata for DefaultButton;
}

uint64_t storeEnumTagSinglePayload for DialogKind(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10011CA04 + 4 * byte_100200BB2[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10011CA24 + 4 * byte_100200BB7[v4]))();
  }
}

_BYTE *sub_10011CA04(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_10011CA24(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10011CA2C(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10011CA34(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10011CA3C(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10011CA44(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DialogKind()
{
  return &type metadata for DialogKind;
}

unint64_t sub_10011CA64()
{
  unint64_t result = qword_1002B35A0;
  if (!qword_1002B35A0)
  {
    unint64_t result = swift_getWitnessTable(byte_100200EEC, &type metadata for DialogKind);
    atomic_store(result, (unint64_t *)&qword_1002B35A0);
  }

  return result;
}

unint64_t sub_10011CAA4()
{
  unint64_t result = qword_1002B35A8;
  if (!qword_1002B35A8)
  {
    unint64_t result = swift_getWitnessTable("-U\b", &type metadata for DefaultButton);
    atomic_store(result, (unint64_t *)&qword_1002B35A8);
  }

  return result;
}

unint64_t sub_10011CAE0()
{
  unint64_t result = qword_1002B35B0;
  if (!qword_1002B35B0)
  {
    unint64_t result = swift_getWitnessTable("]U\b", &type metadata for DefaultButton);
    atomic_store(result, (unint64_t *)&qword_1002B35B0);
  }

  return result;
}

unint64_t sub_10011CB1C()
{
  unint64_t result = qword_1002B35B8;
  if (!qword_1002B35B8)
  {
    unint64_t result = swift_getWitnessTable("MV\b", &type metadata for DialogKind);
    atomic_store(result, (unint64_t *)&qword_1002B35B8);
  }

  return result;
}

void sub_10011CB58(void *a1)
{
}

uint64_t *sub_10011CB60(uint64_t *a1)
{
  return a1;
}

uint64_t sub_10011CBD0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  if (a3)
  {
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a9);
    swift_bridgeObjectRelease(a11);
    swift_bridgeObjectRelease(a13);
    swift_bridgeObjectRelease(a17);
    swift_bridgeObjectRelease(a19);
    swift_bridgeObjectRelease(a21);
    swift_bridgeObjectRelease(a23);
    swift_bridgeObjectRelease(a25);
    swift_bridgeObjectRelease(a27);
    return swift_bridgeObjectRelease(a28);
  }

  return result;
}

unint64_t sub_10011CCB4()
{
  unint64_t result = qword_1002B35D0;
  if (!qword_1002B35D0)
  {
    unint64_t result = swift_getWitnessTable(byte_100201128, &type metadata for Dialog.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B35D0);
  }

  return result;
}

unint64_t sub_10011CCF0()
{
  unint64_t result = qword_1002B35D8;
  if (!qword_1002B35D8)
  {
    unint64_t result = swift_getWitnessTable("}V\b", &type metadata for DialogKind);
    atomic_store(result, (unint64_t *)&qword_1002B35D8);
  }

  return result;
}

unint64_t sub_10011CD2C()
{
  unint64_t result = qword_1002B35E0;
  if (!qword_1002B35E0)
  {
    unint64_t result = swift_getWitnessTable(byte_100200F14, &type metadata for DefaultButton);
    atomic_store(result, (unint64_t *)&qword_1002B35E0);
  }

  return result;
}

unint64_t sub_10011CD68()
{
  unint64_t result = qword_1002B35E8;
  if (!qword_1002B35E8)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FF038, &unk_100281FE8);
    atomic_store(result, (unint64_t *)&qword_1002B35E8);
  }

  return result;
}

unint64_t sub_10011CDA4()
{
  unint64_t result = qword_1002B35F0;
  if (!qword_1002B35F0)
  {
    unint64_t result = swift_getWitnessTable(byte_100207624, &unk_10028CD00);
    atomic_store(result, (unint64_t *)&qword_1002B35F0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for Dialog.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF4) {
    return ((uint64_t (*)(void))((char *)&loc_10011CE2C + 4 * byte_100200BC1[v4]))();
  }
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_10011CE60 + 4 * byte_100200BBC[v4]))();
}

uint64_t sub_10011CE60(uint64_t result)
{
  *(_BYTE *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_10011CE68(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x10011CE70LL);
  }
  return result;
}

uint64_t sub_10011CE7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x10011CE84LL);
  }
  *(_BYTE *)unint64_t result = a2 + 11;
  return result;
}

uint64_t sub_10011CE88(uint64_t result)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_10011CE90(uint64_t result)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Dialog.CodingKeys()
{
  return &type metadata for Dialog.CodingKeys;
}

unint64_t sub_10011CEB0()
{
  unint64_t result = qword_1002B3600;
  if (!qword_1002B3600)
  {
    unint64_t result = swift_getWitnessTable("\tT\b", &type metadata for Dialog.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B3600);
  }

  return result;
}

unint64_t sub_10011CEF0()
{
  unint64_t result = qword_1002B3608;
  if (!qword_1002B3608)
  {
    unint64_t result = swift_getWitnessTable(byte_100201038, &type metadata for Dialog.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B3608);
  }

  return result;
}

unint64_t sub_10011CF30()
{
  unint64_t result = qword_1002B3610;
  if (!qword_1002B3610)
  {
    unint64_t result = swift_getWitnessTable(byte_100201060, &type metadata for Dialog.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B3610);
  }

  return result;
}

uint64_t sub_10011CF70()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v1, v3, v0 + 240, v2);
}

uint64_t sub_10011CF8C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14 = *(void *)(v10 + 80);
  uint64_t v13 = *(void *)(v10 + 88);
  *(void *)(v11 + 8sub_1001A93A0(0LL, 0) = 1LL;
  *(void *)(v11 + 88) = v12;
  *(void *)(v11 + 96) = a10;
  *(void *)(v11 + 104) = v14;
  *(void *)(v11 + 112) = v13;
  *(void *)(v11 + 12sub_1001A93A0(0LL, 0) = 0LL;
  *(void *)(v11 + 128) = 0LL;
  *(_WORD *)(v11 + 136) = 513;
  return swift_bridgeObjectRetain(v13);
}

uint64_t sub_10011CFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_10011CFD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10011C534(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL, a2, a3, a4);
}

uint64_t sub_10011CFDC()
{
  return sub_1000E52B4(v1, v2, v3, v4, v5, v6, v0);
}

uint64_t sub_10011D000@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = (v1 - 32) | 0x8000000000000000LL;
  return swift_retain(v2);
}

uint64_t sub_10011D014@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v1 + 24sub_1001A93A0(0LL, 0) = a1;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10011D020()
{
  return swift_allocObject(v0, 448LL, 7LL);
}

void sub_10011D030(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (a2 - 32) | 0x8000000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_10011D040(uint64_t a1, uint64_t a2)
{
  return sub_10011B0B0(a1, a2);
}

uint64_t sub_10011D048()
{
  return v0;
}

  ;
}

uint64_t sub_10011D088()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10011D098(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v2);
}

void sub_10011D0A8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (a2 - 32) | 0x8000000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_10011D0B8(uint64_t a1, __n128 a2)
{
  v2[4] = a2;
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_10011D0C0()
{
  return sub_10011B8D4();
}

uint64_t sub_10011D0D0()
{
  *(_BYTE *)(v0 + 56) = 2;
  return *(void *)(v0 + 72);
}

void sub_10011D0E0( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  v13._uint64_t countAndFlagsBits = v12;
  v13._object = v11;
  String.append(_:)(v13);
}

void sub_10011D0F0(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0xD000000000000018LL;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

uint64_t sub_10011D100()
{
  return type metadata accessor for OctaneSubscription();
}

uint64_t sub_10011D10C(uint64_t a1, __n128 a2)
{
  v2[9] = a2;
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_10011D114(uint64_t a1)
{
  return swift_dynamicCastClass(v1, a1);
}

uint64_t sub_10011D120()
{
  return *(void *)(v0 + 160);
}

uint64_t sub_10011D134()
{
  return *(void *)(v0 + 80);
}

uint64_t sub_10011D148(uint64_t a1)
{
  return swift_unknownObjectRelease_n(a1, 2LL);
}

uint64_t sub_10011D150(uint64_t a1, uint64_t a2)
{
  return sub_10011B0B0(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL, a2);
}

uint64_t sub_10011D158()
{
  return sub_10011B8D4();
}

void sub_10011D164(uint64_t a1)
{
  v1._uint64_t countAndFlagsBits = a1 & 0xFFFF0000FFFFFFFFLL | 0x2000000000LL;
  v1._object = (void *)0xE500000000000000LL;
  String.append(_:)(v1);
}

uint64_t sub_10011D170(unsigned int *a1)
{
  return sub_10011D188(a1, (uint64_t (*)(void))sub_10000C008);
}

uint64_t sub_10011D17C(unsigned int *a1)
{
  return sub_10011D188(a1, (uint64_t (*)(void))sub_10000C020);
}

uint64_t sub_10011D188(unsigned int *a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2();
  uint64_t v4 = *a1;
  uint64_t result = sub_10000C038(0LL);
  if (!__OFSUB__(v4, result)) {
    return v3;
  }
  __break(1u);
  return result;
}

void sub_10011D1D8(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = 0LL;
  uint64_t v18 = 0LL;
  int v20 = 0;
  uint64_t v19 = 0LL;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  uint64_t v5 = sub_1001719C4(a1, a2);
  uint64_t v6 = v2;
  if (!v2)
  {
    uint64_t v7 = S_IFSOCK.getter(v5);
    if ((unsigned __int16)(v7 & WORD2(v17)) == (unsigned __int16)S_IFSOCK.getter(v7))
    {
      sub_100171A9C(a1, a2);
      return;
    }

    unint64_t v8 = sub_10011D36C();
    uint64_t v6 = sub_1000252D0((uint64_t)&type metadata for UnixDomainSocketPathWrongType, v8);
    swift_willThrow(v6);
  }

  uint64_t v16 = v6;
  swift_errorRetain(v6);
  uint64_t v9 = sub_1000175B0(&qword_1002A9710);
  if (swift_dynamicCast(&v17, &v16, v9, &type metadata for IOError, 0LL))
  {
    swift_errorRelease(v6);
    uint64_t v10 = v18;
    int v11 = v19;
    if ((_DWORD)v19 == 2)
    {
      swift_bridgeObjectRelease();
      swift_errorRelease(v16);
      return;
    }

    uint64_t v12 = v17;
    unint64_t v13 = sub_100025100();
    uint64_t v14 = sub_1000252D0((uint64_t)&type metadata for IOError, v13);
    *(void *)uint64_t v15 = v12;
    *(void *)(v15 + 8) = v10;
    *(_DWORD *)(v15 + 16) = v11;
    swift_willThrow(v14);
  }

  swift_errorRelease(v16);
}

unint64_t sub_10011D36C()
{
  unint64_t result = qword_1002B3618;
  if (!qword_1002B3618)
  {
    unint64_t result = swift_getWitnessTable("\tS\b", &type metadata for UnixDomainSocketPathWrongType);
    atomic_store(result, (unint64_t *)&qword_1002B3618);
  }

  return result;
}

_UNKNOWN **sub_10011D3A8()
{
  return &off_100271990;
}

uint64_t sub_10011D3B4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10011D3E4 + 4 * byte_1002011B0[a1]))( 0x6E6F69746361LL,  0xE600000000000000LL);
}

uint64_t sub_10011D3E4()
{
  return 0x746174735F627461LL;
}

uint64_t sub_10011D404()
{
  return 0x695F656C646E7562LL;
}

uint64_t sub_10011D420()
{
  return 0x645F6C65636E6163LL;
}

uint64_t sub_10011D440()
{
  return 0x6974617269707865LL;
}

uint64_t sub_10011D464()
{
  return 0x64656873696E6966LL;
}

unint64_t sub_10011D47C()
{
  return 0xD000000000000012LL;
}

uint64_t sub_10011D760(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_100271FC0, a1, a2, &unk_1002A8E78);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x24) {
    return 36LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10011D7B0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10011D7EC + 4 * byte_1002011D4[a1]))( 0x6E65725F6F747561LL,  0xEB00000000737765LL);
}

uint64_t sub_10011D7EC()
{
  return 0x666F5F6F6D6F7270LL;
}

unint64_t sub_10011D818()
{
  return 0xD000000000000017LL;
}

unint64_t sub_10011D838()
{
  return 0xD000000000000013LL;
}

void sub_10011D854(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_10011D860()
{
}

uint64_t sub_10011D868(uint64_t a1)
{
  return sub_1000B1F54(a1, *v1);
}

void sub_10011D870(uint64_t a1)
{
}

uint64_t sub_10011D878@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10011D760(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_10011D8A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10011D3B4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10011D8CC(void *a1@<X8>)
{
  *a1 = &off_100271990;
}

uint64_t sub_10011D8DC(uint64_t a1, void *a2)
{
  uint64_t v2 = v46[0];
  unint64_t v3 = v46[4];
  uint64_t v37 = v46[1];
  int64_t v38 = (unint64_t)(v46[2] + 64LL) >> 6;
  int64_t v39 = v46[3];
  swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v4 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  unint64_t v5 = v4 | (v39 << 6);
  while (1)
  {
    unsigned __int8 v13 = *(_BYTE *)(*(void *)(v2 + 48) + v5);
    sub_10002C010(*(void *)(v2 + 56) + 32 * v5, (uint64_t)v44 + 8);
    LOBYTE(v44[0]) = v13;
    v42[0] = v44[0];
    v42[1] = v44[1];
    uint64_t v43 = v45;
    sub_10002C010((uint64_t)v42 + 8, (uint64_t)v40 + 8);
    sub_100034728((_OWORD *)((char *)v40 + 8), v41);
    uint64_t v14 = sub_10011D3B4(v13);
    uint64_t v16 = v15;
    sub_10002C010((uint64_t)v41, (uint64_t)v40);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    unint64_t v18 = sub_10011E1EC();
    uint64_t v20 = _swiftEmptyDictionarySingleton[2];
    BOOL v21 = (v19 & 1) == 0;
    Swift::Int v22 = v20 + v21;
    if (__OFADD__(v20, v21)) {
      break;
    }
    unint64_t v23 = v18;
    char v24 = v19;
    sub_1000175B0(&qword_1002B3648);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v22))
    {
      unint64_t v25 = sub_10011E1EC();
      if ((v24 & 1) != (v26 & 1)) {
        goto LABEL_39;
      }
      unint64_t v23 = v25;
    }

    if ((v24 & 1) != 0)
    {
      __int128 v27 = (void *)(_swiftEmptyDictionarySingleton[7] + 32 * v23);
      sub_100019F7C(v27);
      sub_100034728(v40, v27);
    }

    else
    {
      _swiftEmptyDictionarySingleton[(v23 >> 6) + 8] |= 1LL << v23;
      id v28 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v23);
      *id v28 = v14;
      v28[1] = v16;
      sub_100034728(v40, (_OWORD *)(_swiftEmptyDictionarySingleton[7] + 32 * v23));
      uint64_t v29 = _swiftEmptyDictionarySingleton[2];
      BOOL v10 = __OFADD__(v29, 1LL);
      uint64_t v30 = v29 + 1;
      if (v10) {
        goto LABEL_37;
      }
      _swiftEmptyDictionarySingleton[2] = v30;
      swift_bridgeObjectRetain();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100019F7C(v41);
    sub_10011DF80((uint64_t)v42);
    if (v3) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v6 = v39 + 1;
    if (__OFADD__(v39, 1LL)) {
      goto LABEL_38;
    }
    if (v6 >= v38) {
      goto LABEL_35;
    }
    unint64_t v7 = *(void *)(v37 + 8 * v6);
    int64_t v8 = v39 + 1;
    if (!v7)
    {
      sub_10011E1E0();
      if (v9 == v10) {
        goto LABEL_35;
      }
      sub_10011E1D4();
      if (!v7)
      {
        sub_10011E1E0();
        if (v9 == v10) {
          goto LABEL_35;
        }
        sub_10011E1D4();
        if (!v7)
        {
          sub_10011E1E0();
          if (v9 == v10) {
            goto LABEL_35;
          }
          sub_10011E1D4();
          if (!v7)
          {
            sub_10011E1E0();
            if (v9 == v10) {
              goto LABEL_35;
            }
            sub_10011E1D4();
            if (!v7)
            {
              int64_t v8 = v11 + 5;
              if (v11 + 5 >= v38) {
                goto LABEL_35;
              }
              unint64_t v7 = *(void *)(v37 + 8 * v8);
              if (!v7)
              {
                int64_t v12 = v39 + 7;
                while (v12 < v38)
                {
                  unint64_t v7 = *(void *)(v37 + 8 * v12++);
                  if (v7)
                  {
                    int64_t v8 = v12 - 1;
                    goto LABEL_24;
                  }
                }

unint64_t sub_10011DC88()
{
  return 0xD000000000000012LL;
}

id sub_10011DCF4(uint64_t a1, void *a2)
{
  id v4 = objc_allocWithZone(v2);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  sub_10001A3F8();
  id v6 = [v4 initWithPropertyValues:isa onConnection:a2];

  return v6;
}

void sub_10011DD7C(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  sub_10001A3F8();
  v5.receiver = v2;
  v5.super_class = (Class)type metadata accessor for TransactionEntity();
  objc_msgSendSuper2(&v5, "initWithPropertyValues:onConnection:", isa, a2);

  sub_10001DBAC();
}

void sub_10011DE5C(uint64_t a1, void *a2)
{
  v5.receiver = v2;
  v5.super_class = (Class)type metadata accessor for TransactionEntity();
  objc_msgSendSuper2(&v5, "initWithPersistentID:onConnection:", a1, a2);

  sub_10001DBAC();
}

id sub_10011DEDC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TransactionEntity();
  return objc_msgSendSuper2(&v2, "init");
}

id sub_10011DF2C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TransactionEntity();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TransactionEntity()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService17TransactionEntity);
}

uint64_t sub_10011DF80(uint64_t a1)
{
  uint64_t v2 = sub_1000175B0(&qword_1002B3650);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10011DFC0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1LL;
  uint64_t v3 = -1LL << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1LL << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0LL;
  a2[4] = v2 & v5;
  return result;
}

uint64_t getEnumTagSinglePayload for TransactionEntity.Key(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xDD)
  {
    if (a2 + 35 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 35) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 36;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for TransactionEntity.Key(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 35 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 35) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xDD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xDC) {
    return ((uint64_t (*)(void))((char *)&loc_10011E0CC + 4 * byte_1002011DE[v4]))();
  }
  *a1 = a2 + 35;
  return ((uint64_t (*)(void))((char *)sub_10011E100 + 4 * byte_1002011D9[v4]))();
}

uint64_t sub_10011E100(uint64_t result)
{
  *(_BYTE *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_10011E108(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x10011E110LL);
  }
  return result;
}

uint64_t sub_10011E11C(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x10011E124LL);
  }
  *(_BYTE *)uint64_t result = a2 + 35;
  return result;
}

uint64_t sub_10011E128(uint64_t result)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_10011E130(uint64_t result)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TransactionEntity.Key()
{
  return &type metadata for TransactionEntity.Key;
}

unint64_t sub_10011E150()
{
  unint64_t result = qword_1002B3658;
  if (!qword_1002B3658)
  {
    uint64_t v1 = sub_100018EC0(&qword_1002B3660);
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002B3658);
  }

  return result;
}

unint64_t sub_10011E198()
{
  unint64_t result = qword_1002B3668;
  if (!qword_1002B3668)
  {
    unint64_t result = swift_getWitnessTable(byte_100201298, &type metadata for TransactionEntity.Key);
    atomic_store(result, (unint64_t *)&qword_1002B3668);
  }

  return result;
}

  ;
}

  ;
}

unint64_t sub_10011E1EC()
{
  return sub_1000F168C(v0, v1);
}

void *sub_10011E1F8(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v66 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v66 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    char v9 = (char *)a1 + v8;
    BOOL v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date(0LL);
    int64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = (void *)((char *)v4 + v13);
    uint64_t v16 = (void *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    unint64_t v18 = (void *)((char *)v4 + v14);
    char v19 = (void *)((char *)a2 + v14);
    uint64_t v20 = v19[1];
    *unint64_t v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = a3[8];
    uint64_t v22 = a3[9];
    unint64_t v23 = (void *)((char *)v4 + v21);
    char v24 = (void *)((char *)a2 + v21);
    uint64_t v25 = v24[1];
    *unint64_t v23 = *v24;
    v23[1] = v25;
    char v26 = (char *)v4 + v22;
    __int128 v27 = (char *)a2 + v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v26, v27, v11);
    uint64_t v28 = a3[10];
    uint64_t v29 = a3[11];
    uint64_t v30 = (void *)((char *)v4 + v28);
    id v31 = (void *)((char *)a2 + v28);
    uint64_t v32 = v31[1];
    *uint64_t v30 = *v31;
    v30[1] = v32;
    *((_BYTE *)v4 + v29) = *((_BYTE *)a2 + v29);
    uint64_t v33 = a3[12];
    uint64_t v34 = a3[13];
    uint64_t v35 = (void *)((char *)v4 + v33);
    unint64_t v36 = (void *)((char *)a2 + v33);
    uint64_t v37 = v36[1];
    *uint64_t v35 = *v36;
    v35[1] = v37;
    int64_t v38 = (char *)v4 + v34;
    int64_t v39 = (char *)a2 + v34;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v131 = v12;
    v12(v38, v39, v11);
    uint64_t v40 = a3[15];
    *(void *)((char *)v4 + a3[14]) = *(void *)((char *)a2 + a3[14]);
    uint64_t v41 = (void *)((char *)v4 + v40);
    uint64_t v42 = (void *)((char *)a2 + v40);
    uint64_t v43 = v42[1];
    *uint64_t v41 = *v42;
    v41[1] = v43;
    uint64_t v44 = a3[17];
    *(void *)((char *)v4 + a3[16]) = *(void *)((char *)a2 + a3[16]);
    *((_BYTE *)v4 + v44) = *((_BYTE *)a2 + v44);
    uint64_t v45 = a3[18];
    uint64_t v46 = a3[19];
    id v47 = (void *)((char *)v4 + v45);
    id v48 = (void *)((char *)a2 + v45);
    uint64_t v49 = v48[1];
    *id v47 = *v48;
    v47[1] = v49;
    uint64_t v50 = (void *)((char *)v4 + v46);
    unint64_t v51 = (void *)((char *)a2 + v46);
    uint64_t v52 = v51[1];
    *uint64_t v50 = *v51;
    v50[1] = v52;
    uint64_t v53 = a3[20];
    uint64_t v54 = a3[21];
    uint64_t v55 = (void *)((char *)v4 + v53);
    uint64_t v56 = (void *)((char *)a2 + v53);
    uint64_t v57 = v56[1];
    *uint64_t v55 = *v56;
    v55[1] = v57;
    uint64_t v58 = (void *)((char *)v4 + v54);
    uint64_t v59 = (void *)((char *)a2 + v54);
    uint64_t v60 = v59[1];
    *uint64_t v58 = *v59;
    v58[1] = v60;
    uint64_t v61 = a3[22];
    uint64_t v62 = (char *)v4 + v61;
    uint64_t v63 = (char *)a2 + v61;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (sub_10001D158((uint64_t)v63, 1LL, v11))
    {
      uint64_t v64 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
      memcpy(v62, v63, *(void *)(*(void *)(v64 - 8) + 64LL));
      uint64_t v65 = v131;
    }

    else
    {
      uint64_t v65 = v131;
      v131(v62, v63, v11);
      sub_10001762C((uint64_t)v62, 0LL, 1LL, v11);
    }

    uint64_t v67 = a3[23];
    uint64_t v68 = a3[24];
    uint64_t v69 = (void *)((char *)v4 + v67);
    uint64_t v70 = (void *)((char *)a2 + v67);
    uint64_t v71 = v70[1];
    void *v69 = *v70;
    v69[1] = v71;
    uint64_t v72 = (void *)((char *)v4 + v68);
    uint64_t v73 = (void *)((char *)a2 + v68);
    uint64_t v74 = v73[1];
    *uint64_t v72 = *v73;
    v72[1] = v74;
    uint64_t v75 = a3[25];
    uint64_t v76 = a3[26];
    uint64_t v77 = (void *)((char *)v4 + v75);
    uint64_t v78 = (void *)((char *)a2 + v75);
    uint64_t v79 = v78[1];
    *uint64_t v77 = *v78;
    v77[1] = v79;
    uint64_t v80 = (char *)v4 + v76;
    uint64_t v81 = (char *)a2 + v76;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (sub_10001D158((uint64_t)v81, 1LL, v11))
    {
      uint64_t v82 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
      memcpy(v80, v81, *(void *)(*(void *)(v82 - 8) + 64LL));
    }

    else
    {
      v65(v80, v81, v11);
      sub_10001762C((uint64_t)v80, 0LL, 1LL, v11);
    }

    uint64_t v83 = a3[28];
    *((_BYTE *)v4 + a3[27]) = *((_BYTE *)a2 + a3[27]);
    uint64_t v84 = (void *)((char *)v4 + v83);
    uint64_t v85 = (void *)((char *)a2 + v83);
    uint64_t v86 = v85[1];
    *uint64_t v84 = *v85;
    v84[1] = v86;
    uint64_t v87 = a3[30];
    *((_BYTE *)v4 + a3[29]) = *((_BYTE *)a2 + a3[29]);
    *((_BYTE *)v4 + v87) = *((_BYTE *)a2 + v87);
    uint64_t v88 = a3[32];
    *((_BYTE *)v4 + a3[31]) = *((_BYTE *)a2 + a3[31]);
    char v89 = (void *)((char *)v4 + v88);
    uint64_t v90 = (void *)((char *)a2 + v88);
    uint64_t v132 = v90[1];
    *char v89 = *v90;
    v89[1] = v132;
    uint64_t v91 = a3[33];
    uint64_t v92 = a3[34];
    uint64_t v93 = (void *)((char *)v4 + v91);
    uint64_t v94 = (void *)((char *)a2 + v91);
    uint64_t v95 = v94[1];
    *uint64_t v93 = *v94;
    v93[1] = v95;
    uint64_t v96 = (void *)((char *)v4 + v92);
    uint64_t v97 = (void *)((char *)a2 + v92);
    uint64_t v130 = v97[1];
    void *v96 = *v97;
    v96[1] = v130;
    uint64_t v98 = a3[35];
    uint64_t v99 = a3[36];
    uint64_t v100 = (void *)((char *)v4 + v98);
    uint64_t v101 = (void *)((char *)a2 + v98);
    uint64_t v102 = v101[1];
    *uint64_t v100 = *v101;
    v100[1] = v102;
    uint64_t v103 = (void *)((char *)v4 + v99);
    uint64_t v104 = (void *)((char *)a2 + v99);
    uint64_t v105 = v104[1];
    *uint64_t v103 = *v104;
    v103[1] = v105;
    uint64_t v106 = a3[37];
    uint64_t v107 = a3[38];
    uint64_t v108 = (void *)((char *)v4 + v106);
    uint64_t v109 = (void *)((char *)a2 + v106);
    uint64_t v110 = v109[1];
    *uint64_t v108 = *v109;
    v108[1] = v110;
    char v111 = (void *)((char *)v4 + v107);
    uint64_t v112 = (void *)((char *)a2 + v107);
    uint64_t v113 = v112[1];
    *char v111 = *v112;
    v111[1] = v113;
    uint64_t v114 = a3[39];
    uint64_t v115 = a3[40];
    uint64_t v116 = (void *)((char *)v4 + v114);
    uint64_t v117 = (void *)((char *)a2 + v114);
    uint64_t v118 = v117[1];
    *uint64_t v116 = *v117;
    v116[1] = v118;
    uint64_t v119 = (void *)((char *)v4 + v115);
    unsigned __int8 v120 = (void *)((char *)a2 + v115);
    uint64_t v121 = v120[1];
    *uint64_t v119 = *v120;
    v119[1] = v121;
    uint64_t v122 = a3[41];
    uint64_t v123 = a3[42];
    uint64_t v124 = (char *)v4 + v122;
    uint64_t v125 = (char *)a2 + v122;
    *(void *)uint64_t v124 = *(void *)v125;
    v124[8] = v125[8];
    uint64_t v126 = (void *)((char *)v4 + v123);
    uint64_t v127 = (void *)((char *)a2 + v123);
    uint64_t v128 = v127[1];
    *uint64_t v126 = *v127;
    v126[1] = v128;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  return v4;
}

uint64_t sub_10011E690(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for Date(0LL);
  unsigned int v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v6(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6(a1 + a2[9], v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6(a1 + a2[13], v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + a2[22];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + a2[26];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *sub_10011E8DC(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  char v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v12);
  uint64_t v15 = (void *)((char *)a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = (void *)((char *)a1 + v13);
  unint64_t v18 = (void *)((char *)a2 + v13);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = a3[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = (void *)((char *)a1 + v20);
  unint64_t v23 = (void *)((char *)a2 + v20);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = (char *)a1 + v21;
  char v26 = (char *)a2 + v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v25, v26, v10);
  uint64_t v27 = a3[10];
  uint64_t v28 = a3[11];
  uint64_t v29 = (void *)((char *)a1 + v27);
  uint64_t v30 = (void *)((char *)a2 + v27);
  uint64_t v31 = v30[1];
  *uint64_t v29 = *v30;
  v29[1] = v31;
  *((_BYTE *)a1 + v28) = *((_BYTE *)a2 + v28);
  uint64_t v32 = a3[12];
  uint64_t v33 = a3[13];
  uint64_t v34 = (void *)((char *)a1 + v32);
  uint64_t v35 = (void *)((char *)a2 + v32);
  uint64_t v36 = v35[1];
  *uint64_t v34 = *v35;
  v34[1] = v36;
  uint64_t v37 = (char *)a1 + v33;
  int64_t v38 = (char *)a2 + v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  BOOL v129 = v11;
  v11(v37, v38, v10);
  uint64_t v39 = a3[15];
  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  uint64_t v40 = (void *)((char *)a1 + v39);
  uint64_t v41 = (void *)((char *)a2 + v39);
  uint64_t v42 = v41[1];
  *uint64_t v40 = *v41;
  v40[1] = v42;
  uint64_t v43 = a3[17];
  *(void *)((char *)a1 + a3[16]) = *(void *)((char *)a2 + a3[16]);
  *((_BYTE *)a1 + v43) = *((_BYTE *)a2 + v43);
  uint64_t v44 = a3[18];
  uint64_t v45 = a3[19];
  uint64_t v46 = (void *)((char *)a1 + v44);
  id v47 = (void *)((char *)a2 + v44);
  uint64_t v48 = v47[1];
  *uint64_t v46 = *v47;
  v46[1] = v48;
  uint64_t v49 = (void *)((char *)a1 + v45);
  uint64_t v50 = (void *)((char *)a2 + v45);
  uint64_t v51 = v50[1];
  *uint64_t v49 = *v50;
  v49[1] = v51;
  uint64_t v52 = a3[20];
  uint64_t v53 = a3[21];
  uint64_t v54 = (void *)((char *)a1 + v52);
  uint64_t v55 = (void *)((char *)a2 + v52);
  uint64_t v56 = v55[1];
  *uint64_t v54 = *v55;
  v54[1] = v56;
  uint64_t v57 = (void *)((char *)a1 + v53);
  uint64_t v58 = (void *)((char *)a2 + v53);
  uint64_t v59 = v58[1];
  *uint64_t v57 = *v58;
  v57[1] = v59;
  uint64_t v60 = a3[22];
  uint64_t v61 = (char *)a1 + v60;
  uint64_t v62 = (char *)a2 + v60;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (sub_10001D158((uint64_t)v62, 1LL, v10))
  {
    uint64_t v63 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64LL));
    uint64_t v64 = v129;
  }

  else
  {
    uint64_t v64 = v129;
    v129(v61, v62, v10);
    sub_10001762C((uint64_t)v61, 0LL, 1LL, v10);
  }

  uint64_t v65 = a3[23];
  uint64_t v66 = a3[24];
  uint64_t v67 = (void *)((char *)a1 + v65);
  uint64_t v68 = (void *)((char *)a2 + v65);
  uint64_t v69 = v68[1];
  *uint64_t v67 = *v68;
  v67[1] = v69;
  uint64_t v70 = (void *)((char *)a1 + v66);
  uint64_t v71 = (void *)((char *)a2 + v66);
  uint64_t v72 = v71[1];
  void *v70 = *v71;
  v70[1] = v72;
  uint64_t v73 = a3[25];
  uint64_t v74 = a3[26];
  uint64_t v75 = (void *)((char *)a1 + v73);
  uint64_t v76 = (void *)((char *)a2 + v73);
  uint64_t v77 = v76[1];
  void *v75 = *v76;
  v75[1] = v77;
  uint64_t v78 = (char *)a1 + v74;
  uint64_t v79 = (char *)a2 + v74;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (sub_10001D158((uint64_t)v79, 1LL, v10))
  {
    uint64_t v80 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v78, v79, *(void *)(*(void *)(v80 - 8) + 64LL));
  }

  else
  {
    v64(v78, v79, v10);
    sub_10001762C((uint64_t)v78, 0LL, 1LL, v10);
  }

  uint64_t v81 = a3[28];
  *((_BYTE *)a1 + a3[27]) = *((_BYTE *)a2 + a3[27]);
  uint64_t v82 = (void *)((char *)a1 + v81);
  uint64_t v83 = (void *)((char *)a2 + v81);
  uint64_t v84 = v83[1];
  *uint64_t v82 = *v83;
  v82[1] = v84;
  uint64_t v85 = a3[30];
  *((_BYTE *)a1 + a3[29]) = *((_BYTE *)a2 + a3[29]);
  *((_BYTE *)a1 + v85) = *((_BYTE *)a2 + v85);
  uint64_t v86 = a3[32];
  *((_BYTE *)a1 + a3[31]) = *((_BYTE *)a2 + a3[31]);
  uint64_t v87 = (void *)((char *)a1 + v86);
  uint64_t v88 = (void *)((char *)a2 + v86);
  uint64_t v130 = v88[1];
  void *v87 = *v88;
  v87[1] = v130;
  uint64_t v89 = a3[33];
  uint64_t v90 = a3[34];
  uint64_t v91 = (void *)((char *)a1 + v89);
  uint64_t v92 = (void *)((char *)a2 + v89);
  uint64_t v93 = v92[1];
  *uint64_t v91 = *v92;
  v91[1] = v93;
  uint64_t v94 = (void *)((char *)a1 + v90);
  uint64_t v95 = (void *)((char *)a2 + v90);
  uint64_t v128 = v95[1];
  *uint64_t v94 = *v95;
  v94[1] = v128;
  uint64_t v96 = a3[35];
  uint64_t v97 = a3[36];
  uint64_t v98 = (void *)((char *)a1 + v96);
  uint64_t v99 = (void *)((char *)a2 + v96);
  uint64_t v100 = v99[1];
  *uint64_t v98 = *v99;
  v98[1] = v100;
  uint64_t v101 = (void *)((char *)a1 + v97);
  uint64_t v102 = (void *)((char *)a2 + v97);
  uint64_t v103 = v102[1];
  *uint64_t v101 = *v102;
  v101[1] = v103;
  uint64_t v104 = a3[37];
  uint64_t v105 = a3[38];
  uint64_t v106 = (void *)((char *)a1 + v104);
  uint64_t v107 = (void *)((char *)a2 + v104);
  uint64_t v108 = v107[1];
  *uint64_t v106 = *v107;
  v106[1] = v108;
  uint64_t v109 = (void *)((char *)a1 + v105);
  uint64_t v110 = (void *)((char *)a2 + v105);
  uint64_t v111 = v110[1];
  *uint64_t v109 = *v110;
  v109[1] = v111;
  uint64_t v112 = a3[39];
  uint64_t v113 = a3[40];
  uint64_t v114 = (void *)((char *)a1 + v112);
  uint64_t v115 = (void *)((char *)a2 + v112);
  uint64_t v116 = v115[1];
  *uint64_t v114 = *v115;
  v114[1] = v116;
  uint64_t v117 = (void *)((char *)a1 + v113);
  uint64_t v118 = (void *)((char *)a2 + v113);
  uint64_t v119 = v118[1];
  *uint64_t v117 = *v118;
  v117[1] = v119;
  uint64_t v120 = a3[41];
  uint64_t v121 = a3[42];
  uint64_t v122 = (char *)a1 + v120;
  uint64_t v123 = (char *)a2 + v120;
  *(void *)uint64_t v122 = *(void *)v123;
  v122[8] = v123[8];
  uint64_t v124 = (void *)((char *)a1 + v121);
  uint64_t v125 = (void *)((char *)a2 + v121);
  uint64_t v126 = v125[1];
  *uint64_t v124 = *v125;
  v124[1] = v126;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_10011ED48(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + sub_1001A93A0(v0, 1) = *((void *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + sub_1001A93A0(v0, 1) = *((void *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[7];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + sub_1001A93A0(v0, 1) = *((void *)v17 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  *((void *)v19 + sub_1001A93A0(v0, 1) = *((void *)v20 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11(&a1[a3[9]], &a2[a3[9]], v9);
  uint64_t v21 = a3[10];
  uint64_t v22 = &a1[v21];
  unint64_t v23 = &a2[v21];
  *(void *)uint64_t v22 = *(void *)v23;
  *((void *)v22 + sub_1001A93A0(v0, 1) = *((void *)v23 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[a3[11]] = a2[a3[11]];
  uint64_t v24 = a3[12];
  uint64_t v25 = &a1[v24];
  char v26 = &a2[v24];
  *(void *)uint64_t v25 = *(void *)v26;
  *((void *)v25 + sub_1001A93A0(v0, 1) = *((void *)v26 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11(&a1[a3[13]], &a2[a3[13]], v9);
  *(void *)&a1[a3[14]] = *(void *)&a2[a3[14]];
  uint64_t v27 = a3[15];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  *(void *)uint64_t v28 = *(void *)v29;
  *((void *)v28 + sub_1001A93A0(v0, 1) = *((void *)v29 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[16]] = *(void *)&a2[a3[16]];
  a1[a3[17]] = a2[a3[17]];
  uint64_t v30 = a3[18];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  *(void *)uint64_t v31 = *(void *)v32;
  *((void *)v31 + sub_1001A93A0(v0, 1) = *((void *)v32 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[19];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  *(void *)uint64_t v34 = *(void *)v35;
  *((void *)v34 + sub_1001A93A0(v0, 1) = *((void *)v35 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[20];
  uint64_t v37 = &a1[v36];
  int64_t v38 = &a2[v36];
  *(void *)uint64_t v37 = *(void *)v38;
  *((void *)v37 + sub_1001A93A0(v0, 1) = *((void *)v38 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v39 = a3[21];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  *(void *)uint64_t v40 = *(void *)v41;
  *((void *)v40 + sub_1001A93A0(v0, 1) = *((void *)v41 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v42 = a3[22];
  uint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  int v45 = sub_10001D158((uint64_t)&a1[v42], 1LL, v9);
  int v46 = sub_10001D158((uint64_t)v44, 1LL, v9);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v43, v44, v9);
      sub_10001762C((uint64_t)v43, 0LL, 1LL, v9);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v46)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v43, v9);
LABEL_6:
    uint64_t v47 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64LL));
    goto LABEL_7;
  }

  v11(v43, v44, v9);
LABEL_7:
  uint64_t v48 = a3[23];
  uint64_t v49 = &a1[v48];
  uint64_t v50 = &a2[v48];
  *(void *)uint64_t v49 = *(void *)v50;
  *((void *)v49 + sub_1001A93A0(v0, 1) = *((void *)v50 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v51 = a3[24];
  uint64_t v52 = &a1[v51];
  uint64_t v53 = &a2[v51];
  *(void *)uint64_t v52 = *(void *)v53;
  *((void *)v52 + sub_1001A93A0(v0, 1) = *((void *)v53 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = a3[25];
  uint64_t v55 = &a1[v54];
  uint64_t v56 = &a2[v54];
  *(void *)uint64_t v55 = *(void *)v56;
  *((void *)v55 + sub_1001A93A0(v0, 1) = *((void *)v56 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v57 = a3[26];
  uint64_t v58 = &a1[v57];
  uint64_t v59 = &a2[v57];
  int v60 = sub_10001D158((uint64_t)&a1[v57], 1LL, v9);
  int v61 = sub_10001D158((uint64_t)v59, 1LL, v9);
  if (!v60)
  {
    if (!v61)
    {
      v11(v58, v59, v9);
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v58, v9);
    goto LABEL_12;
  }

  if (v61)
  {
LABEL_12:
    uint64_t v62 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v58, v59, v9);
  sub_10001762C((uint64_t)v58, 0LL, 1LL, v9);
LABEL_13:
  a1[a3[27]] = a2[a3[27]];
  uint64_t v63 = a3[28];
  uint64_t v64 = &a1[v63];
  uint64_t v65 = &a2[v63];
  *(void *)uint64_t v64 = *(void *)v65;
  *((void *)v64 + sub_1001A93A0(v0, 1) = *((void *)v65 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[a3[29]] = a2[a3[29]];
  a1[a3[30]] = a2[a3[30]];
  a1[a3[31]] = a2[a3[31]];
  uint64_t v66 = a3[32];
  uint64_t v67 = &a1[v66];
  uint64_t v68 = &a2[v66];
  *(void *)uint64_t v67 = *(void *)v68;
  *((void *)v67 + sub_1001A93A0(v0, 1) = *((void *)v68 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v69 = a3[33];
  uint64_t v70 = &a1[v69];
  uint64_t v71 = &a2[v69];
  *(void *)uint64_t v70 = *(void *)v71;
  *((void *)v70 + sub_1001A93A0(v0, 1) = *((void *)v71 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v72 = a3[34];
  uint64_t v73 = &a1[v72];
  uint64_t v74 = &a2[v72];
  *(void *)uint64_t v73 = *(void *)v74;
  *((void *)v73 + sub_1001A93A0(v0, 1) = *((void *)v74 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v75 = a3[35];
  uint64_t v76 = &a1[v75];
  uint64_t v77 = &a2[v75];
  *(void *)uint64_t v76 = *(void *)v77;
  *((void *)v76 + sub_1001A93A0(v0, 1) = *((void *)v77 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v78 = a3[36];
  uint64_t v79 = &a1[v78];
  uint64_t v80 = &a2[v78];
  *(void *)uint64_t v79 = *(void *)v80;
  *((void *)v79 + sub_1001A93A0(v0, 1) = *((void *)v80 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v81 = a3[37];
  uint64_t v82 = &a1[v81];
  uint64_t v83 = &a2[v81];
  *(void *)uint64_t v82 = *(void *)v83;
  *((void *)v82 + sub_1001A93A0(v0, 1) = *((void *)v83 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v84 = a3[38];
  uint64_t v85 = &a1[v84];
  uint64_t v86 = &a2[v84];
  *(void *)uint64_t v85 = *(void *)v86;
  *((void *)v85 + sub_1001A93A0(v0, 1) = *((void *)v86 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v87 = a3[39];
  uint64_t v88 = &a1[v87];
  uint64_t v89 = &a2[v87];
  *(void *)uint64_t v88 = *(void *)v89;
  *((void *)v88 + sub_1001A93A0(v0, 1) = *((void *)v89 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v90 = a3[40];
  uint64_t v91 = &a1[v90];
  uint64_t v92 = &a2[v90];
  *(void *)uint64_t v91 = *(void *)v92;
  *((void *)v91 + sub_1001A93A0(v0, 1) = *((void *)v92 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v93 = a3[41];
  uint64_t v94 = &a1[v93];
  uint64_t v95 = &a2[v93];
  uint64_t v96 = *(void *)v95;
  v94[8] = v95[8];
  *(void *)uint64_t v94 = v96;
  uint64_t v97 = a3[42];
  uint64_t v98 = &a1[v97];
  uint64_t v99 = &a2[v97];
  *(void *)uint64_t v98 = *(void *)v99;
  *((void *)v98 + sub_1001A93A0(v0, 1) = *((void *)v99 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_10011F3FC(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  uint64_t v12 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  v10(&a1[v12], &a2[v12], v9);
  uint64_t v13 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  a1[v13] = a2[v13];
  uint64_t v14 = a3[13];
  *(_OWORD *)&a1[a3[12]] = *(_OWORD *)&a2[a3[12]];
  v10(&a1[v14], &a2[v14], v9);
  uint64_t v15 = a3[15];
  *(void *)&a1[a3[14]] = *(void *)&a2[a3[14]];
  *(_OWORD *)&a1[v15] = *(_OWORD *)&a2[v15];
  uint64_t v16 = a3[17];
  *(void *)&a1[a3[16]] = *(void *)&a2[a3[16]];
  a1[v16] = a2[v16];
  uint64_t v17 = a3[19];
  *(_OWORD *)&a1[a3[18]] = *(_OWORD *)&a2[a3[18]];
  *(_OWORD *)&a1[v17] = *(_OWORD *)&a2[v17];
  uint64_t v18 = a3[21];
  *(_OWORD *)&a1[a3[20]] = *(_OWORD *)&a2[a3[20]];
  *(_OWORD *)&a1[v18] = *(_OWORD *)&a2[v18];
  uint64_t v19 = a3[22];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  if (sub_10001D158((uint64_t)&a2[v19], 1LL, v9))
  {
    uint64_t v22 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64LL));
  }

  else
  {
    v10(v20, v21, v9);
    sub_10001762C((uint64_t)v20, 0LL, 1LL, v9);
  }

  uint64_t v23 = a3[24];
  *(_OWORD *)&a1[a3[23]] = *(_OWORD *)&a2[a3[23]];
  *(_OWORD *)&a1[v23] = *(_OWORD *)&a2[v23];
  uint64_t v24 = a3[26];
  *(_OWORD *)&a1[a3[25]] = *(_OWORD *)&a2[a3[25]];
  uint64_t v25 = &a1[v24];
  char v26 = &a2[v24];
  if (sub_10001D158((uint64_t)&a2[v24], 1LL, v9))
  {
    uint64_t v27 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64LL));
  }

  else
  {
    v10(v25, v26, v9);
    sub_10001762C((uint64_t)v25, 0LL, 1LL, v9);
  }

  uint64_t v28 = a3[28];
  a1[a3[27]] = a2[a3[27]];
  *(_OWORD *)&a1[v28] = *(_OWORD *)&a2[v28];
  uint64_t v29 = a3[30];
  a1[a3[29]] = a2[a3[29]];
  a1[v29] = a2[v29];
  uint64_t v30 = a3[32];
  a1[a3[31]] = a2[a3[31]];
  *(_OWORD *)&a1[v30] = *(_OWORD *)&a2[v30];
  uint64_t v31 = a3[34];
  *(_OWORD *)&a1[a3[33]] = *(_OWORD *)&a2[a3[33]];
  *(_OWORD *)&a1[v31] = *(_OWORD *)&a2[v31];
  uint64_t v32 = a3[36];
  *(_OWORD *)&a1[a3[35]] = *(_OWORD *)&a2[a3[35]];
  *(_OWORD *)&a1[v32] = *(_OWORD *)&a2[v32];
  uint64_t v33 = a3[38];
  *(_OWORD *)&a1[a3[37]] = *(_OWORD *)&a2[a3[37]];
  *(_OWORD *)&a1[v33] = *(_OWORD *)&a2[v33];
  uint64_t v34 = a3[40];
  *(_OWORD *)&a1[a3[39]] = *(_OWORD *)&a2[a3[39]];
  *(_OWORD *)&a1[v34] = *(_OWORD *)&a2[v34];
  uint64_t v35 = a3[41];
  uint64_t v36 = a3[42];
  uint64_t v37 = &a1[v35];
  int64_t v38 = &a2[v35];
  *(void *)uint64_t v37 = *(void *)v38;
  v37[8] = v38[8];
  *(_OWORD *)&a1[v36] = *(_OWORD *)&a2[v36];
  return a1;
}

char *sub_10011F6C0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + sub_1001A93A0(v0, 1) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = &a1[v7];
  uint64_t v9 = &a2[v7];
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = (uint64_t *)&a2[v13];
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *(void *)uint64_t v14 = v17;
  *((void *)v14 + sub_1001A93A0(v0, 1) = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = (uint64_t *)&a2[v18];
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  *(void *)uint64_t v19 = v22;
  *((void *)v19 + sub_1001A93A0(v0, 1) = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[8];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = (uint64_t *)&a2[v23];
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  *(void *)uint64_t v24 = v27;
  *((void *)v24 + sub_1001A93A0(v0, 1) = v26;
  swift_bridgeObjectRelease();
  v12(&a1[a3[9]], &a2[a3[9]], v10);
  uint64_t v28 = a3[10];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = (uint64_t *)&a2[v28];
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  *(void *)uint64_t v29 = v32;
  *((void *)v29 + sub_1001A93A0(v0, 1) = v31;
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = (uint64_t *)&a2[v33];
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  *(void *)uint64_t v34 = v37;
  *((void *)v34 + sub_1001A93A0(v0, 1) = v36;
  swift_bridgeObjectRelease();
  v12(&a1[a3[13]], &a2[a3[13]], v10);
  uint64_t v38 = a3[15];
  *(void *)&a1[a3[14]] = *(void *)&a2[a3[14]];
  uint64_t v39 = &a1[v38];
  uint64_t v40 = (uint64_t *)&a2[v38];
  uint64_t v42 = *v40;
  uint64_t v41 = v40[1];
  *(void *)uint64_t v39 = v42;
  *((void *)v39 + sub_1001A93A0(v0, 1) = v41;
  swift_bridgeObjectRelease();
  uint64_t v43 = a3[17];
  *(void *)&a1[a3[16]] = *(void *)&a2[a3[16]];
  a1[v43] = a2[v43];
  uint64_t v44 = a3[18];
  int v45 = &a1[v44];
  int v46 = (uint64_t *)&a2[v44];
  uint64_t v48 = *v46;
  uint64_t v47 = v46[1];
  *(void *)int v45 = v48;
  *((void *)v45 + sub_1001A93A0(v0, 1) = v47;
  swift_bridgeObjectRelease();
  uint64_t v49 = a3[19];
  uint64_t v50 = &a1[v49];
  uint64_t v51 = (uint64_t *)&a2[v49];
  uint64_t v53 = *v51;
  uint64_t v52 = v51[1];
  *(void *)uint64_t v50 = v53;
  *((void *)v50 + sub_1001A93A0(v0, 1) = v52;
  swift_bridgeObjectRelease();
  uint64_t v54 = a3[20];
  uint64_t v55 = &a1[v54];
  uint64_t v56 = (uint64_t *)&a2[v54];
  uint64_t v58 = *v56;
  uint64_t v57 = v56[1];
  *(void *)uint64_t v55 = v58;
  *((void *)v55 + sub_1001A93A0(v0, 1) = v57;
  swift_bridgeObjectRelease();
  uint64_t v59 = a3[21];
  int v60 = &a1[v59];
  int v61 = (uint64_t *)&a2[v59];
  uint64_t v63 = *v61;
  uint64_t v62 = v61[1];
  *(void *)int v60 = v63;
  *((void *)v60 + sub_1001A93A0(v0, 1) = v62;
  swift_bridgeObjectRelease();
  uint64_t v64 = a3[22];
  uint64_t v65 = &a1[v64];
  uint64_t v66 = &a2[v64];
  int v67 = sub_10001D158((uint64_t)&a1[v64], 1LL, v10);
  int v68 = sub_10001D158((uint64_t)v66, 1LL, v10);
  if (v67)
  {
    if (!v68)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v65, v66, v10);
      sub_10001762C((uint64_t)v65, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v68)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v65, v10);
LABEL_6:
    uint64_t v69 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v65, v66, *(void *)(*(void *)(v69 - 8) + 64LL));
    goto LABEL_7;
  }

  v12(v65, v66, v10);
LABEL_7:
  uint64_t v70 = a3[23];
  uint64_t v71 = &a1[v70];
  uint64_t v72 = (uint64_t *)&a2[v70];
  uint64_t v74 = *v72;
  uint64_t v73 = v72[1];
  *(void *)uint64_t v71 = v74;
  *((void *)v71 + sub_1001A93A0(v0, 1) = v73;
  swift_bridgeObjectRelease();
  uint64_t v75 = a3[24];
  uint64_t v76 = &a1[v75];
  uint64_t v77 = (uint64_t *)&a2[v75];
  uint64_t v79 = *v77;
  uint64_t v78 = v77[1];
  *(void *)uint64_t v76 = v79;
  *((void *)v76 + sub_1001A93A0(v0, 1) = v78;
  swift_bridgeObjectRelease();
  uint64_t v80 = a3[25];
  uint64_t v81 = &a1[v80];
  uint64_t v82 = (uint64_t *)&a2[v80];
  uint64_t v84 = *v82;
  uint64_t v83 = v82[1];
  *(void *)uint64_t v81 = v84;
  *((void *)v81 + sub_1001A93A0(v0, 1) = v83;
  swift_bridgeObjectRelease();
  uint64_t v85 = a3[26];
  uint64_t v86 = &a1[v85];
  uint64_t v87 = &a2[v85];
  int v88 = sub_10001D158((uint64_t)&a1[v85], 1LL, v10);
  int v89 = sub_10001D158((uint64_t)v87, 1LL, v10);
  if (!v88)
  {
    if (!v89)
    {
      v12(v86, v87, v10);
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v86, v10);
    goto LABEL_12;
  }

  if (v89)
  {
LABEL_12:
    uint64_t v90 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v86, v87, *(void *)(*(void *)(v90 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v86, v87, v10);
  sub_10001762C((uint64_t)v86, 0LL, 1LL, v10);
LABEL_13:
  uint64_t v91 = a3[28];
  a1[a3[27]] = a2[a3[27]];
  uint64_t v92 = &a1[v91];
  uint64_t v93 = (uint64_t *)&a2[v91];
  uint64_t v95 = *v93;
  uint64_t v94 = v93[1];
  *(void *)uint64_t v92 = v95;
  *((void *)v92 + sub_1001A93A0(v0, 1) = v94;
  swift_bridgeObjectRelease();
  uint64_t v96 = a3[30];
  a1[a3[29]] = a2[a3[29]];
  a1[v96] = a2[v96];
  uint64_t v97 = a3[32];
  a1[a3[31]] = a2[a3[31]];
  uint64_t v98 = &a1[v97];
  uint64_t v99 = (uint64_t *)&a2[v97];
  uint64_t v101 = *v99;
  uint64_t v100 = v99[1];
  *(void *)uint64_t v98 = v101;
  *((void *)v98 + sub_1001A93A0(v0, 1) = v100;
  swift_bridgeObjectRelease();
  uint64_t v102 = a3[33];
  uint64_t v103 = &a1[v102];
  uint64_t v104 = (uint64_t *)&a2[v102];
  uint64_t v106 = *v104;
  uint64_t v105 = v104[1];
  *(void *)uint64_t v103 = v106;
  *((void *)v103 + sub_1001A93A0(v0, 1) = v105;
  swift_bridgeObjectRelease();
  uint64_t v107 = a3[34];
  uint64_t v108 = &a1[v107];
  uint64_t v109 = (uint64_t *)&a2[v107];
  uint64_t v111 = *v109;
  uint64_t v110 = v109[1];
  *(void *)uint64_t v108 = v111;
  *((void *)v108 + sub_1001A93A0(v0, 1) = v110;
  swift_bridgeObjectRelease();
  uint64_t v112 = a3[35];
  uint64_t v113 = &a1[v112];
  uint64_t v114 = (uint64_t *)&a2[v112];
  uint64_t v116 = *v114;
  uint64_t v115 = v114[1];
  *(void *)uint64_t v113 = v116;
  *((void *)v113 + sub_1001A93A0(v0, 1) = v115;
  swift_bridgeObjectRelease();
  uint64_t v117 = a3[36];
  uint64_t v118 = &a1[v117];
  uint64_t v119 = (uint64_t *)&a2[v117];
  uint64_t v121 = *v119;
  uint64_t v120 = v119[1];
  *(void *)uint64_t v118 = v121;
  *((void *)v118 + sub_1001A93A0(v0, 1) = v120;
  swift_bridgeObjectRelease();
  uint64_t v122 = a3[37];
  uint64_t v123 = &a1[v122];
  uint64_t v124 = (uint64_t *)&a2[v122];
  uint64_t v126 = *v124;
  uint64_t v125 = v124[1];
  *(void *)uint64_t v123 = v126;
  *((void *)v123 + sub_1001A93A0(v0, 1) = v125;
  swift_bridgeObjectRelease();
  uint64_t v127 = a3[38];
  uint64_t v128 = &a1[v127];
  BOOL v129 = (uint64_t *)&a2[v127];
  uint64_t v131 = *v129;
  uint64_t v130 = v129[1];
  *(void *)uint64_t v128 = v131;
  *((void *)v128 + sub_1001A93A0(v0, 1) = v130;
  swift_bridgeObjectRelease();
  uint64_t v132 = a3[39];
  char v133 = &a1[v132];
  unint64_t v134 = (uint64_t *)&a2[v132];
  uint64_t v136 = *v134;
  uint64_t v135 = v134[1];
  *(void *)char v133 = v136;
  *((void *)v133 + sub_1001A93A0(v0, 1) = v135;
  swift_bridgeObjectRelease();
  uint64_t v137 = a3[40];
  uint64_t v138 = &a1[v137];
  uint64_t v139 = (uint64_t *)&a2[v137];
  uint64_t v141 = *v139;
  uint64_t v140 = v139[1];
  *(void *)uint64_t v138 = v141;
  *((void *)v138 + sub_1001A93A0(v0, 1) = v140;
  swift_bridgeObjectRelease();
  uint64_t v142 = a3[41];
  uint64_t v143 = a3[42];
  uint64_t v144 = &a1[v142];
  uint64_t v145 = &a2[v142];
  *(void *)uint64_t v144 = *(void *)v145;
  v144[8] = v145[8];
  uint64_t v146 = &a1[v143];
  char v147 = (uint64_t *)&a2[v143];
  uint64_t v149 = *v147;
  uint64_t v148 = v147[1];
  *(void *)uint64_t v146 = v149;
  *((void *)v146 + sub_1001A93A0(v0, 1) = v148;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10011FBC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10011FBD4);
}

uint64_t sub_10011FBD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_100092A18();
    if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == (_DWORD)a2)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(int *)(a3 + 20);
    }

    else
    {
      uint64_t v9 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
      uint64_t v10 = *(int *)(a3 + 88);
    }

    return sub_10001D158(a1 + v10, a2, v9);
  }

uint64_t sub_10011FC6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10011FC78);
}

uint64_t sub_10011FC78(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = sub_100092A18();
    if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(int *)(a4 + 20);
    }

    else
    {
      uint64_t v9 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
      uint64_t v10 = *(int *)(a4 + 88);
    }

    return sub_10001762C(v5 + v10, a2, a2, v9);
  }

  return result;
}

uint64_t type metadata accessor for CheddarTransaction(uint64_t a1)
{
  uint64_t result = qword_1002B36C8;
  if (!qword_1002B36C8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CheddarTransaction);
  }
  return result;
}

void sub_10011FD44(uint64_t a1)
{
  uint64_t v6 = &unk_100201398;
  uint64_t v2 = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v7 = *(void *)(v2 - 8) + 64LL;
    uint64_t v8 = &unk_100201398;
    uint64_t v9 = &unk_100201398;
    uint64_t v10 = &unk_100201398;
    uint64_t v11 = v7;
    uint64_t v12 = &unk_100201398;
    uint64_t v13 = &unk_1002013B0;
    uint64_t v14 = &unk_100201398;
    uint64_t v15 = v7;
    uint64_t v16 = (char *)&value witness table for Builtin.Int64 + 64;
    uint64_t v17 = &unk_100201398;
    uint64_t v18 = (char *)&value witness table for Builtin.Int64 + 64;
    uint64_t v19 = &unk_1002013B0;
    uint64_t v20 = &unk_100201398;
    uint64_t v21 = &unk_100201398;
    uint64_t v22 = &unk_100201398;
    uint64_t v23 = &unk_100201398;
    sub_1000A4384(319LL);
    if (v5 <= 0x3F)
    {
      uint64_t v24 = *(void *)(v4 - 8) + 64LL;
      uint64_t v25 = &unk_1002013C8;
      uint64_t v26 = &unk_1002013C8;
      uint64_t v27 = &unk_1002013C8;
      uint64_t v28 = v24;
      uint64_t v29 = &unk_1002013E0;
      uint64_t v30 = &unk_1002013C8;
      uint64_t v31 = &unk_1002013F8;
      uint64_t v32 = &unk_100201410;
      uint64_t v33 = &unk_1002013E0;
      uint64_t v34 = &unk_1002013C8;
      uint64_t v35 = &unk_1002013C8;
      uint64_t v36 = &unk_1002013C8;
      uint64_t v37 = &unk_1002013C8;
      uint64_t v38 = &unk_1002013C8;
      uint64_t v39 = &unk_1002013C8;
      uint64_t v40 = &unk_1002013C8;
      uint64_t v41 = &unk_1002013C8;
      uint64_t v42 = &unk_1002013C8;
      uint64_t v43 = &unk_100201428;
      uint64_t v44 = &unk_1002013C8;
      swift_initStructMetadata(a1, 256LL, 39LL, &v6, a1 + 16);
    }
  }

void sub_10011FE60(uint64_t a1)
{
  *(void *)(a1 + 8) = v2;
}

void sub_10011FE9C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_10001DAD0();
  uint64_t v10 = v9 - v8;
  sub_1000175B0(&qword_1002AC060);
  sub_100043FD8();
  __chkstk_darwin(v11);
  sub_1000BBB14();
  uint64_t v12 = (int *)type metadata accessor for CheddarTransaction(0LL);
  uint64_t v13 = (uint64_t *)((char *)a2 + v12[8]);
  *uint64_t v13 = 0x65646F6358LL;
  v13[1] = 0xE500000000000000LL;
  sub_1000B62D0(v2);
  if (sub_10001D158(v2, 1LL, v6))
  {
    sub_100034F14(v2, &qword_1002AC060);
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, v2, v6);
    sub_100034F14(v2, &qword_1002AC060);
    uint64_t v17 = UUID.uuidString.getter(v16);
    uint64_t v19 = v18;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
    *(void *)&v55[0] = v17;
    *((void *)&v55[0] + sub_1001A93A0(v0, 1) = v19;
    unint64_t v20 = sub_10001B4A0();
    uint64_t v14 = StringProtocol.localizedLowercase.getter(&type metadata for String, v20);
    uint64_t v15 = v21;
    swift_bridgeObjectRelease();
  }

  uint64_t v22 = (uint64_t *)((char *)a2 + v12[25]);
  *uint64_t v22 = v14;
  v22[1] = v15;
  *a2 = sub_1000B3DEC();
  a2[1] = v23;
  uint64_t v24 = sub_1000B85C8(3u);
  if ((v25 & 1) != 0 || (double v26 = *(double *)&v24, (sub_1000B3D80() & 1) == 0))
  {
    sub_100056B38((uint64_t)a2 + v12[26], 1LL);
    char v27 = 2;
  }

  else
  {
    sub_100123044(v26);
    sub_100056B38(a1, 0LL);
    char v27 = sub_1000B3D9C();
  }

  *((_BYTE *)a2 + v12[27]) = v27;
  uint64_t v28 = sub_1000B85C8(4u);
  if ((v29 & 1) != 0)
  {
    uint64_t v30 = (uint64_t)a2 + v12[22];
    uint64_t v31 = 1LL;
  }

  else
  {
    sub_100123044(*(double *)&v28);
    uint64_t v30 = a1;
    uint64_t v31 = 0LL;
  }

  sub_100056B38(v30, v31);
  sub_1000B8508(0xFu);
  if (!v33)
  {
    *((_BYTE *)a2 + v12[31]) = 2;
    uint64_t v37 = sub_100122FEC(v32, v12[29]);
    *((_BYTE *)a2 + v12[30]) = 3;
    uint64_t v38 = (uint64_t *)((char *)a2 + v12[23]);
    *uint64_t v38 = v37;
    v38[1] = 0LL;
    uint64_t v39 = (uint64_t *)((char *)a2 + v12[24]);
    *uint64_t v39 = v37;
    v39[1] = 0LL;
    goto LABEL_28;
  }

  sub_100122F54(v32, v33, v12[23]);
  sub_1000B9094();
  *((_BYTE *)a2 + v12[31]) = v34 & 1;
  uint64_t v35 = sub_1000B85BC(0x19u);
  if ((v36 & 1) != 0) {
    *(void *)&v55[0] = -1LL;
  }
  else {
    *(void *)&v55[0] = v35;
  }
  uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  sub_100122F54(v40, v41, v12[24]);
  if (sub_1000B5BEC())
  {
    *((_BYTE *)a2 + v12[29]) = 0;
    sub_100122EF4(v12[28]);
  }

  else
  {
    sub_1000B5D6C();
    if (v43)
    {
      uint64_t v44 = v12[29];
      char v45 = 1;
    }

    else
    {
      sub_1000B8508(0x1Cu);
      if (v43)
      {
        uint64_t v44 = v12[29];
        char v45 = 2;
      }

      else
      {
        sub_1000B5DE0();
        uint64_t v44 = v12[29];
        if (!v43)
        {
          sub_100122FEC(v42, v44);
          goto LABEL_25;
        }

        char v45 = 3;
      }
    }

    *((_BYTE *)a2 + v44) = v45;
    int v46 = (uint64_t *)((char *)a2 + v12[28]);
    *int v46 = v42;
    v46[1] = v43;
  }

uint64_t sub_10012077C(char a1)
{
  return 0x2010003u >> (8 * a1);
}

uint64_t sub_100120794(Swift::String a1)
{
  v1._rawValue = &off_100272DF8;
  return sub_1001207F4(a1, v1);
}

uint64_t sub_1001207A0(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x535F594C494D4146LL;
  }
  else {
    return 0x4553414843525550LL;
  }
}

uint64_t sub_1001207E8(Swift::String a1)
{
  v1._rawValue = &off_100272E48;
  return sub_1001207F4(a1, v1);
}

uint64_t sub_1001207F4(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v4._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  _findStringSwitchCase(cases:string:)(cases, v4);
  sub_100019344();
  if (v2 == 1) {
    unsigned int v6 = 1;
  }
  else {
    unsigned int v6 = 2;
  }
  if (v2) {
    return v6;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100120838(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x4C4157454E4552LL;
  }
  else {
    return 0x4553414843525550LL;
  }
}

unint64_t sub_100120870(Swift::String string)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100272E98, v3);
  sub_100019344();
  if (v1 >= 3) {
    return 3LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_1001208B0(char a1)
{
  if (!a1) {
    return 0x4952545F45455246LL;
  }
  if (a1 == 1) {
    return 0x595F53415F594150LL;
  }
  return 0x465F50555F594150LL;
}

void sub_100120920(char *a1, unsigned __int8 *a2)
{
}

void sub_10012092C()
{
}

uint64_t sub_100120934(uint64_t a1)
{
  return sub_1000B1EE8(a1, *v1);
}

void sub_10012093C(uint64_t a1)
{
}

uint64_t sub_100120944@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_100272DF8;
  uint64_t result = sub_1001207F4(*a1, v3);
  *a2 = result;
  return result;
}

void sub_100120978()
{
  char v1 = sub_100052340();
  *uint64_t v0 = sub_1001207A0(v1);
  v0[1] = v2;
  sub_10001945C();
}

uint64_t sub_100120998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100122DC4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001209F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100122DC4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_100120A40()
{
  unsigned __int8 v1 = sub_100052340();
  *uint64_t v0 = MessageType.rawValue.getter(v1);
  sub_10001945C();
}

uint64_t sub_100120A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100122D4C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100120ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100122D4C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_100120B08(char *a1, unsigned __int8 *a2)
{
}

void sub_100120B14()
{
}

uint64_t sub_100120B1C(uint64_t a1)
{
  return sub_1000B1E24(a1, *v1);
}

void sub_100120B24(uint64_t a1)
{
}

uint64_t sub_100120B2C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_100272E48;
  uint64_t result = sub_1001207F4(*a1, v3);
  *a2 = result;
  return result;
}

void sub_100120B60()
{
  char v1 = sub_100052340();
  *uint64_t v0 = sub_100120838(v1);
  v0[1] = v2;
  sub_10001945C();
}

uint64_t sub_100120B80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100122E00();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100120BDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100122E00();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_100120C28(unsigned __int8 *a1, char *a2)
{
}

void sub_100120C34()
{
}

uint64_t sub_100120C3C(uint64_t a1)
{
  return sub_1000B1E74(a1, *v1);
}

void sub_100120C44(uint64_t a1)
{
}

unint64_t sub_100120C4C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100120870(*a1);
  *a2 = result;
  return result;
}

void sub_100120C78()
{
  char v1 = sub_100052340();
  *uint64_t v0 = sub_1001208B0(v1);
  v0[1] = v2;
  sub_10001945C();
}

uint64_t sub_100120C98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100122D88();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100120CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100122D88();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100120D40(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_100272F00, a1, a2, &unk_1002A8E98);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x27) {
    return 39LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_100120D94()
{
  return 39LL;
}

uint64_t sub_100120D9C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100120DDC + 4 * byte_100201308[a1]))( 0x6843746E756F6D61LL,  0xED00006465677261LL);
}

uint64_t sub_100120DDC()
{
  return 0x756F636341707061LL;
}

uint64_t sub_100120E00()
{
  return 0x6449656C646E7562LL;
}

uint64_t sub_100120E18()
{
  return 0x6F43656772616863LL;
}

uint64_t sub_100120E3C()
{
  return 0x614464656E676973LL;
}

uint64_t sub_100120E5C()
{
  return 0x79636E6572727563LL;
}

uint64_t sub_100121024()
{
  return 0x6573616863727570LL;
}

unint64_t sub_100121044()
{
  return 0xD000000000000012LL;
}

uint64_t sub_10012105C()
{
  return 0x797469746E617571LL;
}

uint64_t sub_100121090()
{
  return 0x697461636F766572LL;
}

unint64_t sub_1001210B4()
{
  return 0xD000000000000010LL;
}

uint64_t sub_1001210CC()
{
  return 0x6F726665726F7473LL;
}

unint64_t sub_1001210F8()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_100121114()
{
  return 0x65646F43786174LL;
}

uint64_t sub_100121140()
{
  return 0x746361736E617274LL;
}

uint64_t sub_100121164()
{
  return 1701869940LL;
}

void sub_100121190()
{
}

void sub_1001211B4(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_1001211C0()
{
}

uint64_t sub_1001211C8(uint64_t a1)
{
  return sub_1000B1F48(a1, *v1);
}

void sub_1001211D0(uint64_t a1)
{
}

uint64_t sub_1001211D8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100120D40(*a1, a1[1]);
  *a2 = result;
  return result;
}

void sub_100121204()
{
  unsigned __int8 v1 = sub_100052340();
  *uint64_t v0 = sub_100120D9C(v1);
  v0[1] = v2;
  sub_10001945C();
}

uint64_t sub_100121224()
{
  return sub_1001211B0(*v0);
}

uint64_t sub_10012122C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100120D90(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100121250@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_100120D94();
  *a1 = result;
  return result;
}

uint64_t sub_100121274(uint64_t a1)
{
  unint64_t v2 = sub_100122624();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10012129C(uint64_t a1)
{
  unint64_t v2 = sub_100122624();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1001212C4(uint64_t a1)
{
  Swift::String v4 = v1;
  uint64_t v6 = sub_1000175B0(&qword_1002B37B8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_1000BBB14();
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  unint64_t v10 = sub_100123028();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for CheddarTransaction.CodingKeys,  &type metadata for CheddarTransaction.CodingKeys,  v10,  v8,  v9);
  uint64_t v11 = (int *)type metadata accessor for CheddarTransaction(0LL);
  uint64_t v12 = sub_10001DB50(v11[32]);
  char v86 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v86, v6);
  if (!v2)
  {
    uint64_t v14 = sub_10001DB50(v11[25]);
    sub_100122E3C(v14, v15, 1);
    sub_100122E54(*v4, v4[1], 2);
    uint64_t v16 = sub_10001DB50(v11[33]);
    sub_100122E3C(v16, v17, 3);
    uint64_t v18 = (uint64_t)v4 + v11[5];
    char v86 = 4;
    uint64_t v19 = type metadata accessor for Date(0LL);
    sub_100046F3C( (unint64_t *)&qword_1002A93C8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (const char *)&protocol conformance descriptor for Date);
    uint64_t v21 = v20;
    sub_100122EAC(v18, (uint64_t)&v86);
    uint64_t v22 = sub_10001DB50(v11[34]);
    sub_100122E3C(v22, v23, 5);
    uint64_t v24 = sub_10001DB50(v11[35]);
    sub_100122E3C(v24, v25, 6);
    uint64_t v26 = sub_10001DB50(v11[6]);
    sub_100122E54(v26, v27, 7);
    uint64_t v28 = sub_10001DB50(v11[7]);
    sub_100122E54(v28, v29, 8);
    uint64_t v30 = sub_10001DB50(v11[8]);
    sub_100122E54(v30, v31, 9);
    uint64_t v32 = sub_10001DB50(v11[36]);
    sub_100122E3C(v32, v33, 10);
    uint64_t v34 = (uint64_t)v4 + v11[22];
    char v86 = 11;
    sub_100122F20(v34, (uint64_t)&v86, v6, v19, v21);
    sub_100122F2C(12);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v35, v36, v37);
    uint64_t v38 = (uint64_t)v4 + v11[9];
    char v86 = 13;
    sub_100122EAC(v38, (uint64_t)&v86);
    uint64_t v39 = sub_10001DB50(v11[10]);
    sub_100122E54(v39, v40, 14);
    uint64_t v41 = sub_10001DB50(v11[28]);
    sub_100122E3C(v41, v42, 15);
    sub_100123010(v11[29]);
    char v85 = 16;
    unint64_t v43 = sub_100115D64();
    sub_100122EDC(v43, v44, v45, (uint64_t)&unk_100286840, v43);
    sub_100123010(v11[30]);
    char v85 = 17;
    unint64_t v46 = sub_100115DA0();
    sub_100122EDC(v46, v47, v48, (uint64_t)&unk_1002867B0, v46);
    sub_100123010(v11[11]);
    char v85 = 18;
    unint64_t v49 = sub_100122758();
    sub_100122F14((uint64_t)&v86, (uint64_t)&v85, v6, (uint64_t)&unk_100286960, v49);
    uint64_t v50 = sub_10001DB50(v11[37]);
    sub_100122E3C(v50, v51, 19);
    uint64_t v52 = sub_10001DB50(v11[38]);
    sub_100122E3C(v52, v53, 20);
    uint64_t v54 = sub_10001DB50(v11[12]);
    sub_100122E54(v54, v55, 21);
    sub_100122F2C(22);
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v56 = sub_10001DB50(v11[15]);
    sub_100122E54(v56, v57, 23);
    uint64_t v58 = (uint64_t)v4 + v11[13];
    char v86 = 24;
    sub_100122EAC(v58, (uint64_t)&v86);
    uint64_t v59 = sub_10001DB50(v11[39]);
    sub_100122E3C(v59, v60, 25);
    sub_100122F2C(26);
    KeyedEncodingContainer.encode(_:forKey:)();
    sub_100123010(v11[17]);
    char v85 = 27;
    unint64_t v61 = sub_100122794();
    sub_100122F14((uint64_t)&v86, (uint64_t)&v85, v6, (uint64_t)&unk_1002868D0, v61);
    uint64_t v62 = (uint64_t)v4 + v11[26];
    char v86 = 28;
    sub_100122F20(v62, (uint64_t)&v86, v6, v19, v21);
    sub_100123010(v11[27]);
    char v85 = 29;
    unint64_t v63 = sub_1000574C4();
    sub_100122EDC(v63, v64, v65, (uint64_t)&unk_10027FD78, v63);
    uint64_t v66 = sub_10001DB50(v11[18]);
    sub_100122E54(v66, v67, 30);
    uint64_t v68 = sub_10001DB50(v11[19]);
    sub_100122E54(v68, v69, 31);
    uint64_t v70 = sub_10001DB50(v11[23]);
    sub_100122E3C(v70, v71, 32);
    uint64_t v72 = sub_10001DB50(v11[40]);
    sub_100122E3C(v72, v73, 33);
    uint64_t v74 = (char *)v4 + v11[41];
    uint64_t v75 = *(void *)v74;
    uint64_t v76 = v74[8];
    char v86 = 34;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v75, v76, &v86, v6);
    uint64_t v77 = sub_10001DB50(v11[20]);
    sub_100122E54(v77, v78, 35);
    uint64_t v79 = sub_10001DB50(v11[21]);
    sub_100122E54(v79, v80, 36);
    uint64_t v81 = sub_10001DB50(v11[42]);
    sub_100122E3C(v81, v82, 37);
    uint64_t v83 = sub_10001DB50(v11[24]);
    sub_100122E3C(v83, v84, 38);
  }

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
  sub_10001DAB8();
}

void sub_100121830(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v159 = a2;
  sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  sub_100043FD8();
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v158 = (uint64_t)&v144 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v144 - v6;
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v167 = v8;
  uint64_t v168 = v9;
  sub_100043FD8();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v144 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v144 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v144 - v17;
  uint64_t v161 = sub_1000175B0(&qword_1002B3798);
  __chkstk_darwin(v161);
  sub_10001DAD0();
  uint64_t v21 = v20 - v19;
  type metadata accessor for CheddarTransaction(0LL);
  sub_100043FD8();
  __chkstk_darwin(v22);
  sub_10001DAD0();
  uint64_t v165 = (char *)(v25 - v24);
  uint64_t v166 = v23;
  uint64_t v26 = (void *)(v25 - v24 + v23[8]);
  *uint64_t v26 = 0x65646F6358LL;
  v26[1] = 0xE500000000000000LL;
  unsigned __int16 v162 = a1;
  unsigned __int16 v163 = v26;
  uint64_t v27 = a1[3];
  uint64_t v28 = a1[4];
  unint64_t v29 = sub_100123028();
  uint64_t v160 = v21;
  uint64_t v30 = v164;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for CheddarTransaction.CodingKeys,  &type metadata for CheddarTransaction.CodingKeys,  v29,  v27,  v28);
  if (v30)
  {
    unsigned __int16 v164 = v30;
    LODWORD(v16sub_1001A93A0(v0, 1) = 0;
    unint64_t v36 = 16LL;
  }

  else
  {
    uint64_t v31 = v18;
    uint64_t v32 = (uint64_t)v7;
    uint64_t v33 = v16;
    uint64_t v157 = (uint64_t)v13;
    char v171 = 0;
    uint64_t v34 = v161;
    uint64_t v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v171, v161);
    uint64_t v42 = v165;
    unint64_t v43 = v166;
    sub_100122F64(v35, v44, v166[32]);
    uint64_t v45 = sub_100122FDC(1);
    sub_100122F64(v45, v46, v43[25]);
    char v171 = 2;
    *(void *)uint64_t v42 = KeyedDecodingContainer.decode(_:forKey:)(&v171, v34);
    *((void *)v42 + sub_1001A93A0(v0, 1) = v47;
    uint64_t v48 = sub_100122FDC(3);
    sub_100122F64(v48, v49, v43[33]);
    char v171 = 4;
    sub_100046F3C( &qword_1002A93E8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (const char *)&protocol conformance descriptor for Date);
    unsigned __int16 v164 = v31;
    uint64_t v50 = v167;
    uint64_t v156 = v51;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v167, &v171, v34, v167);
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v168 + 32);
    v52(&v42[v43[5]], v164, v50);
    char v171 = 5;
    uint64_t v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v171, v161);
    sub_100122F64(v53, v54, v43[34]);
    char v171 = 6;
    uint64_t v55 = v161;
    uint64_t v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v171, v161);
    sub_100122F64(v56, v57, v43[35]);
    uint64_t v58 = sub_100122FB4(7);
    sub_100122F64(v58, v59, v43[6]);
    uint64_t v60 = sub_100122FB4(8);
    sub_100122F64(v60, v61, v43[7]);
    char v171 = 10;
    uint64_t v62 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v171, v55);
    unsigned __int16 v164 = 0LL;
    sub_100122EA0(v62, v63, v166[36]);
    sub_10012301C(11);
    sub_100122F88(v64, v65);
    unsigned __int16 v164 = 0LL;
    sub_10004DB28(v32, (uint64_t)&v165[v166[22]], (uint64_t *)&unk_1002AFCD0);
    uint64_t v66 = sub_100122F00(12);
    char v68 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v66, v67);
    unsigned __int16 v164 = 0LL;
    v165[v166[31]] = v68;
    sub_10012301C(13);
    uint64_t v69 = v164;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v167, v70, v161, v167);
    unsigned __int16 v164 = v69;
    if (!v69)
    {
      v52(&v165[v166[9]], v33, v167);
      uint64_t v71 = sub_100122E8C(14);
      unsigned __int16 v164 = 0LL;
      sub_100122EA0(v71, v72, v166[10]);
      uint64_t v73 = sub_100122E78(15);
      unsigned __int16 v164 = 0LL;
      sub_100122EA0(v73, v74, v166[28]);
      char v170 = 16;
      unint64_t v75 = sub_100115BB8();
      sub_100122EC4((uint64_t)&unk_100286840, v76, v77, v78, v75);
      unsigned __int16 v164 = 0LL;
      sub_100123004();
      *(_BYTE *)(v81 + *(int *)(v79 + 1swift_errorRelease(*(void *)(v0 + 16)) = v80;
      char v170 = 17;
      unint64_t v82 = sub_100115BF4();
      sub_100122EC4((uint64_t)&unk_1002867B0, v83, v84, v85, v82);
      unsigned __int16 v164 = 0LL;
      sub_100123004();
      *(_BYTE *)(v88 + *(int *)(v86 + 120)) = v87;
      char v170 = 18;
      sub_100122660();
      sub_100122F44((uint64_t)&unk_100286960, (uint64_t)&v170);
      unsigned __int16 v164 = 0LL;
      sub_100123004();
      *(_BYTE *)(v91 + *(int *)(v89 + 44)) = v90;
      uint64_t v92 = sub_100122E78(19);
      unsigned __int16 v164 = 0LL;
      sub_100122EA0(v92, v93, v166[37]);
      uint64_t v94 = sub_100122E78(20);
      unsigned __int16 v164 = 0LL;
      sub_100122EA0(v94, v95, v166[38]);
      uint64_t v96 = sub_100122E8C(21);
      unsigned __int16 v164 = 0LL;
      sub_100122EA0(v96, v97, v166[12]);
      uint64_t v98 = sub_100122F00(22);
      uint64_t v99 = KeyedDecodingContainer.decode(_:forKey:)(v98);
      unsigned __int16 v164 = 0LL;
      *(void *)&v165[v166[14]] = v99;
      uint64_t v100 = sub_100122E8C(23);
      unsigned __int16 v164 = 0LL;
      sub_100122EA0(v100, v101, v166[15]);
      sub_10012301C(24);
      sub_100122F44(v167, v102);
      unsigned __int16 v164 = 0LL;
      v52(&v165[v166[13]], (char *)v157, v167);
      uint64_t v103 = sub_100122E78(25);
      unsigned __int16 v164 = 0LL;
      sub_100122EA0(v103, v104, v166[39]);
      uint64_t v105 = sub_100122F00(26);
      uint64_t v106 = KeyedDecodingContainer.decode(_:forKey:)(v105);
      unsigned __int16 v164 = 0LL;
      *(void *)&v165[v166[16]] = v106;
      char v170 = 27;
      sub_10012269C();
      sub_100122F44((uint64_t)&unk_1002868D0, (uint64_t)&v170);
      unsigned __int16 v164 = 0LL;
      sub_100123004();
      *(_BYTE *)(v109 + *(int *)(v107 + 68)) = v108;
      sub_10012301C(28);
      sub_100122F88(v110, v111);
      unsigned __int16 v164 = 0LL;
      sub_10004DB28(v158, (uint64_t)&v165[v166[26]], (uint64_t *)&unk_1002AFCD0);
      char v170 = 29;
      unint64_t v112 = sub_100057488();
      sub_100122EC4((uint64_t)&unk_10027FD78, v113, v114, v115, v112);
      unsigned __int16 v164 = 0LL;
      sub_100123004();
      *(_BYTE *)(v118 + *(int *)(v116 + 108)) = v117;
      uint64_t v119 = sub_100122E8C(30);
      unsigned __int16 v164 = 0LL;
      sub_100122EA0(v119, v120, v166[18]);
      uint64_t v121 = sub_100122E8C(31);
      unsigned __int16 v164 = 0LL;
      sub_100122EA0(v121, v122, v166[19]);
      uint64_t v123 = sub_100122E78(32);
      unsigned __int16 v164 = 0LL;
      sub_100122EA0(v123, v124, v166[23]);
      uint64_t v125 = sub_100122E78(33);
      unsigned __int16 v164 = 0LL;
      sub_100122EA0(v125, v126, v166[40]);
      uint64_t v127 = sub_100122F00(34);
      uint64_t v129 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v127, v128);
      unsigned __int16 v164 = 0LL;
      uint64_t v130 = &v165[v166[41]];
      *(void *)uint64_t v130 = v129;
      v130[8] = v131 & 1;
      uint64_t v132 = sub_100122E8C(35);
      LODWORD(v158) = 1;
      unsigned __int16 v164 = 0LL;
      sub_100122EA0(v132, v133, v166[20]);
      uint64_t v134 = sub_100122E8C(36);
      unsigned __int16 v164 = 0LL;
      sub_100122EA0(v134, v135, v166[21]);
      uint64_t v136 = sub_100122E78(37);
      unsigned __int16 v164 = 0LL;
      sub_100122EA0(v136, v137, v166[42]);
      uint64_t v138 = sub_100122E78(38);
      unsigned __int16 v164 = 0LL;
      uint64_t v139 = v138;
      uint64_t v141 = v140;
      sub_100122E6C();
      uint64_t v142 = (uint64_t)v165;
      uint64_t v143 = (uint64_t *)&v165[v166[24]];
      *uint64_t v143 = v139;
      v143[1] = v141;
      sub_1001226D8(v142, v159);
      sub_100019F7C(v162);
      sub_10012271C(v142);
      goto LABEL_62;
    }

    unint64_t v36 = 0x1F024001FuLL;
    sub_100122E6C();
    LODWORD(v16sub_1001A93A0(v0, 1) = 0;
  }

  uint64_t v37 = v165;
  uint64_t v38 = v166;
  sub_100019F7C(v162);
  uint64_t v39 = (v36 >> 6) & 1;
  uint64_t v40 = (v36 >> 8) & 1;
  uint64_t v41 = (v36 >> 9) & 1;
  uint64_t v144 = (v36 >> 11) & 1;
  uint64_t v145 = (v36 >> 14) & 1;
  uint64_t v146 = (v36 >> 15) & 1;
  uint64_t v147 = (v36 >> 18) & 1;
  uint64_t v148 = (v36 >> 19) & 1;
  uint64_t v149 = (v36 >> 21) & 1;
  uint64_t v150 = (v36 >> 22) & 1;
  uint64_t v151 = (v36 >> 24) & 1;
  uint64_t v152 = (v36 >> 28) & 1;
  uint64_t v153 = (v36 >> 29) & 1;
  uint64_t v154 = (v36 >> 30) & 1;
  uint64_t v155 = (v36 >> 31) & 1;
  uint64_t v156 = HIDWORD(v36) & 1;
  uint64_t v157 = (v36 >> 33) & 1;
  uint64_t v159 = (v36 >> 34) & 1;
  unsigned __int16 v162 = (void *)((v36 >> 35) & 1);
  if ((v36 & 1) != 0)
  {
    LODWORD(v158) = 0;
    int v169 = 0;
    LODWORD(v16sub_1001A93A0(0LL, 0) = 0;
    swift_bridgeObjectRelease();
    if (((v36 >> 1) & 1) == 0)
    {
LABEL_6:
      if (((v36 >> 2) & 1) != 0) {
        goto LABEL_7;
      }
LABEL_11:
      if (((v36 >> 3) & 1) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }

  else
  {
    LODWORD(v16sub_1001A93A0(0LL, 0) = 0;
    int v169 = 0;
    LODWORD(v158) = 0;
    if ((v36 & 2) == 0) {
      goto LABEL_6;
    }
  }

  (*(void (**)(char *, uint64_t))(v168 + 8))(&v37[v38[5]], v167);
  if (((v36 >> 2) & 1) == 0) {
    goto LABEL_11;
  }
LABEL_7:
  sub_10001DA90(v38[6]);
  if (((v36 >> 3) & 1) != 0) {
LABEL_12:
  }
    sub_10001DA90(v38[7]);
LABEL_13:
  swift_bridgeObjectRelease();
  if (((v36 >> 5) & 1) != 0)
  {
    sub_100122FC8(v38[9]);
    if (!(_DWORD)v39) {
      goto LABEL_15;
    }
  }

  else if (!(_DWORD)v39)
  {
LABEL_15:
    if ((_DWORD)v40) {
      goto LABEL_16;
    }
    goto LABEL_20;
  }

  sub_10001DA90(v38[10]);
  if ((_DWORD)v40)
  {
LABEL_16:
    sub_10001DA90(v38[12]);
    if (!(_DWORD)v41) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }

void sub_1001225FC(void *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_100122610(uint64_t a1)
{
}

unint64_t sub_100122624()
{
  unint64_t result = qword_1002B37A0;
  if (!qword_1002B37A0)
  {
    unint64_t result = swift_getWitnessTable("qP\b", &type metadata for CheddarTransaction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B37A0);
  }

  return result;
}

unint64_t sub_100122660()
{
  unint64_t result = qword_1002B37A8;
  if (!qword_1002B37A8)
  {
    unint64_t result = swift_getWitnessTable("aP\b", &unk_100286960);
    atomic_store(result, (unint64_t *)&qword_1002B37A8);
  }

  return result;
}

unint64_t sub_10012269C()
{
  unint64_t result = qword_1002B37B0;
  if (!qword_1002B37B0)
  {
    unint64_t result = swift_getWitnessTable(byte_100201900, &unk_1002868D0);
    atomic_store(result, (unint64_t *)&qword_1002B37B0);
  }

  return result;
}

uint64_t sub_1001226D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CheddarTransaction(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012271C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CheddarTransaction(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_100122758()
{
  unint64_t result = qword_1002B37C0;
  if (!qword_1002B37C0)
  {
    unint64_t result = swift_getWitnessTable(byte_100201888, &unk_100286960);
    atomic_store(result, (unint64_t *)&qword_1002B37C0);
  }

  return result;
}

unint64_t sub_100122794()
{
  unint64_t result = qword_1002B37C8;
  if (!qword_1002B37C8)
  {
    unint64_t result = swift_getWitnessTable(byte_100201860, &unk_1002868D0);
    atomic_store(result, (unint64_t *)&qword_1002B37C8);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for CheddarTransaction.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xDA)
  {
    if (a2 + 38 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 38) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 39;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for CheddarTransaction.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 38 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 38) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xDA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xD9) {
    return ((uint64_t (*)(void))((char *)&loc_1001228A4 + 4 * byte_100201334[v4]))();
  }
  *a1 = a2 + 38;
  return ((uint64_t (*)(void))((char *)sub_1001228D8 + 4 * byte_10020132F[v4]))();
}

uint64_t sub_1001228D8(uint64_t result)
{
  *(_BYTE *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_1001228E0(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x1001228E8LL);
  }
  return result;
}

uint64_t sub_1001228F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001228FCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 38;
  return result;
}

uint64_t sub_100122900(uint64_t result)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_100122908(uint64_t result)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CheddarTransaction.CodingKeys()
{
  return &type metadata for CheddarTransaction.CodingKeys;
}

uint64_t sub_100122924(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100122970 + 4 * byte_10020133E[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001229A4 + 4 * byte_100201339[v4]))();
}

uint64_t sub_1001229A4(uint64_t result)
{
  *(_BYTE *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_1001229AC(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x1001229B4LL);
  }
  return result;
}

uint64_t sub_1001229C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001229C8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1001229CC(uint64_t result)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_1001229D4(uint64_t result)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

void type metadata accessor for CheddarTransaction.OfferPaymentMode()
{
}

uint64_t sub_1001229EC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100122A38 + 4 * byte_100201348[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100122A6C + 4 * byte_100201343[v4]))();
}

uint64_t sub_100122A6C(uint64_t result)
{
  *(_BYTE *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_100122A74(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x100122A7CLL);
  }
  return result;
}

uint64_t sub_100122A88(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x100122A90LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100122A94(uint64_t result)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_100122A9C(uint64_t result)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

void type metadata accessor for CheddarTransaction.OfferType()
{
}

void type metadata accessor for CheddarTransaction.Reason()
{
}

uint64_t sub_100122AC4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100122B10 + 4 * byte_100201352[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100122B44 + 4 * byte_10020134D[v4]))();
}

uint64_t sub_100122B44(uint64_t result)
{
  *(_BYTE *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_100122B4C(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x100122B54LL);
  }
  return result;
}

uint64_t sub_100122B60(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x100122B68LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100122B6C(uint64_t result)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_100122B74(uint64_t result)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

void type metadata accessor for CheddarTransaction.OwnershipType()
{
}

unint64_t sub_100122B90()
{
  unint64_t result = qword_1002B37D0;
  if (!qword_1002B37D0)
  {
    unint64_t result = swift_getWitnessTable("yT\b", &unk_100286960);
    atomic_store(result, (unint64_t *)&qword_1002B37D0);
  }

  return result;
}

unint64_t sub_100122BD0()
{
  unint64_t result = qword_1002B37D8;
  if (!qword_1002B37D8)
  {
    unint64_t result = swift_getWitnessTable(byte_100201608, &unk_1002868D0);
    atomic_store(result, (unint64_t *)&qword_1002B37D8);
  }

  return result;
}

unint64_t sub_100122C10()
{
  unint64_t result = qword_1002B37E0;
  if (!qword_1002B37E0)
  {
    unint64_t result = swift_getWitnessTable("9S\b", &unk_100286840);
    atomic_store(result, (unint64_t *)&qword_1002B37E0);
  }

  return result;
}

unint64_t sub_100122C50()
{
  unint64_t result = qword_1002B37E8;
  if (!qword_1002B37E8)
  {
    unint64_t result = swift_getWitnessTable(byte_100201748, &unk_1002867B0);
    atomic_store(result, (unint64_t *)&qword_1002B37E8);
  }

  return result;
}

unint64_t sub_100122C90()
{
  unint64_t result = qword_1002B37F0;
  if (!qword_1002B37F0)
  {
    unint64_t result = swift_getWitnessTable(byte_100201838, &type metadata for CheddarTransaction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B37F0);
  }

  return result;
}

unint64_t sub_100122CD0()
{
  unint64_t result = qword_1002B37F8;
  if (!qword_1002B37F8)
  {
    unint64_t result = swift_getWitnessTable(byte_100201770, &type metadata for CheddarTransaction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B37F8);
  }

  return result;
}

unint64_t sub_100122D10()
{
  unint64_t result = qword_1002B3800;
  if (!qword_1002B3800)
  {
    unint64_t result = swift_getWitnessTable("iR\b", &type metadata for CheddarTransaction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B3800);
  }

  return result;
}

unint64_t sub_100122D4C()
{
  unint64_t result = qword_1002B3808;
  if (!qword_1002B3808)
  {
    unint64_t result = swift_getWitnessTable("iS\b", &unk_100286840);
    atomic_store(result, (unint64_t *)&qword_1002B3808);
  }

  return result;
}

unint64_t sub_100122D88()
{
  unint64_t result = qword_1002B3810;
  if (!qword_1002B3810)
  {
    unint64_t result = swift_getWitnessTable(byte_1002016D0, &unk_1002867B0);
    atomic_store(result, (unint64_t *)&qword_1002B3810);
  }

  return result;
}

unint64_t sub_100122DC4()
{
  unint64_t result = qword_1002B3818;
  if (!qword_1002B3818)
  {
    unint64_t result = swift_getWitnessTable(byte_1002014F0, &unk_100286960);
    atomic_store(result, (unint64_t *)&qword_1002B3818);
  }

  return result;
}

unint64_t sub_100122E00()
{
  unint64_t result = qword_1002B3820;
  if (!qword_1002B3820)
  {
    unint64_t result = swift_getWitnessTable("\tT\b", &unk_1002868D0);
    atomic_store(result, (unint64_t *)&qword_1002B3820);
  }

  return result;
}

uint64_t sub_100122E3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(_BYTE *)(v4 - 65) = a3;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v4 - 65, v3);
}

uint64_t sub_100122E54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(_BYTE *)(v4 - 65) = a3;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v4 - 65, v3);
}

uint64_t sub_100122E6C()
{
  return (*(uint64_t (**)(void, void))(v0 + 8))(*(void *)(v1 - 160), *(void *)(v1 - 152));
}

uint64_t sub_100122E78@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v1 - 65) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v1 - 65, *(void *)(v1 - 152));
}

uint64_t sub_100122E8C@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v1 - 65) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v1 - 65, *(void *)(v1 - 152));
}

uint64_t sub_100122EA0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (void *)(v3 + a3);
  *uint64_t v4 = result;
  v4[1] = a2;
  return result;
}

uint64_t sub_100122EAC(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, v2, v3, v4);
}

uint64_t sub_100122EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, v5 - 66, *(void *)(v5 - 152), a1, a5);
}

uint64_t sub_100122EDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v6 - 65, v6 - 66, v5, a4, a5);
}

void sub_100122EF4(uint64_t a1@<X8>)
{
  uint64_t v2 = (void *)(v1 + a1);
  *uint64_t v2 = 0LL;
  v2[1] = 0LL;
}

uint64_t sub_100122F00@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v1 - 65) = a1;
  return v1 - 65;
}

uint64_t sub_100122F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_100122F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

void sub_100122F2C(char a1@<W8>)
{
  *(_BYTE *)(v1 - 65) = a1;
}

uint64_t sub_100122F44(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, *(void *)(v2 - 152), a1);
}

uint64_t sub_100122F54@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (void *)(v3 + a3);
  *uint64_t v4 = result;
  v4[1] = a2;
  return result;
}

uint64_t sub_100122F64@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (void *)(v3 + a3);
  *uint64_t v4 = result;
  v4[1] = a2;
  return result;
}

uint64_t sub_100122F70@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 48) + 16LL))(v2 + a1, v4, v3);
}

uint64_t sub_100122F88(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( *(void *)(v2 - 104),  a2,  *(void *)(v2 - 152),  *(void *)(v2 - 104),  *(void *)(v2 - 192));
}

uint64_t sub_100122FA0()
{
  *(void *)(v3 - 128) = v0;
  return (*(uint64_t (**)(void, uint64_t))(v2 + 8))(*(void *)(v3 - 160), v1);
}

uint64_t sub_100122FB4@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v2 - 65) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v2 - 65, v1);
}

uint64_t sub_100122FC8@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 96) + 8LL))(v1 + a1, v2);
}

uint64_t sub_100122FDC@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v2 - 65) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v2 - 65, v1);
}

uint64_t sub_100122FEC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)(v2 + a2) = 4;
  uint64_t v4 = (void *)(v2 + *(int *)(v3 + 112));
  *uint64_t v4 = result;
  v4[1] = 0LL;
  return result;
}

  ;
}

void sub_100123010(uint64_t a1@<X8>)
{
  *(_BYTE *)(v2 - 65) = *(_BYTE *)(v1 + a1);
}

void sub_10012301C(char a1@<W8>)
{
  *(_BYTE *)(v1 - 65) = a1;
}

unint64_t sub_100123028()
{
  return sub_100122624();
}

uint64_t sub_100123044(double a1)
{
  return Date.init(timeIntervalSinceReferenceDate:)(a1);
}

void sub_100123050(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

unint64_t sub_100123060()
{
  unint64_t result = qword_1002B3828;
  if (!qword_1002B3828)
  {
    unint64_t result = swift_getWitnessTable("]Q\b", &type metadata for HTTPMethod);
    atomic_store(result, (unint64_t *)&qword_1002B3828);
  }

  return result;
}

uint64_t sub_10012309C( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void *a6, uint64_t a7, unint64_t a8, uint64_t *a9)
{
  uint64_t v12 = a1;
  if (a1 >> 62) {
    goto LABEL_35;
  }
  uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    if (!v13)
    {
      a6 = _swiftEmptyArrayStorage;
LABEL_29:
      swift_unknownObjectRelease(a2);
      swift_bridgeObjectRelease();
      sub_10005A704(a7, a8);
      return (uint64_t)a6;
    }

    uint64_t v28 = a6;
    unint64_t v29 = v12 & 0xC000000000000001LL;
    a6 = _swiftEmptyArrayStorage;
    uint64_t v14 = 4LL;
    uint64_t v27 = v12;
    while (1)
    {
      a4 = v14 - 4;
      if (v29)
      {
        uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v14 - 4, v12);
      }

      else
      {
        uint64_t v12 = *(void *)(v12 + 8 * v14);
        swift_retain();
      }

      uint64_t v15 = v14 - 3;
      if (__OFADD__(a4, 1LL)) {
        break;
      }
      uint64_t v16 = *a9;
      swift_unknownObjectRetain(a2);
      swift_bridgeObjectRetain();
      a4 = sub_100123CF4(a2, a3, v28, a5, a7, a8, v16);
      swift_release();
      swift_unknownObjectRelease(a2);
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)(a4 + 16);
      uint64_t v17 = a6[2];
      if (__OFADD__(v17, v12)) {
        goto LABEL_31;
      }
      if (!swift_isUniquelyReferenced_nonNull_native(a6) || v17 + v12 > a6[3] >> 1)
      {
        sub_10002F1D4();
        a6 = v18;
      }

      if (*(void *)(a4 + 16))
      {
        uint64_t v19 = a6[2];
        if ((a6[3] >> 1) - v19 < v12) {
          goto LABEL_33;
        }
        unint64_t v20 = (unint64_t)&a6[6 * v19 + 4];
        if (a4 + 32 < v20 + 48 * v12 && v20 < a4 + 32 + 48 * v12) {
          goto LABEL_41;
        }
        sub_1000175B0(&qword_1002AA3E8);
        swift_arrayInitWithCopy(v20);
        if (v12)
        {
          uint64_t v22 = a6[2];
          BOOL v23 = __OFADD__(v22, v12);
          uint64_t v24 = v22 + v12;
          if (v23) {
            goto LABEL_34;
          }
          a6[2] = v24;
        }
      }

      else if (v12)
      {
        goto LABEL_32;
      }

      swift_bridgeObjectRelease();
      ++v14;
      uint64_t v12 = v27;
      if (v15 == v13) {
        goto LABEL_29;
      }
    }

    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    if (v12 < 0) {
      uint64_t v26 = v12;
    }
    else {
      uint64_t v26 = v12 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v26);
  }

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL);
  __break(1u);
  return result;
}

void sub_100123374(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = type metadata accessor for URLComponents(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v45 - v11;
  uint64_t v13 = (void *)a1[4];
  uint64_t v14 = v13[4];
  uint64_t v15 = v13[5];
  sub_100023E9C();
  URLComponents.init(string:)(v14, v15);
  sub_10001DC10();
  if (sub_10001D158(v2, 1LL, v6) == 1)
  {
    sub_100043F40(v2, &qword_1002B3958);
    sub_1000ACB64(0x6C727520646142LL, 0xE700000000000000LL, 6u, (uint64_t)&aBlock);
    sub_100125BEC();
    uint64_t v16 = sub_100125BDC();
    uint64_t v17 = sub_100019310(v16, 44LL);
    *(void *)(v17 + 16) = 0LL;
    *(void *)(v17 + 24) = 0LL;
    uint64_t v18 = sub_100125C64(v17, 21LL);
  }

  else
  {
    uint64_t v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 32))(v12, v2, v6);
    aBlock = (void **)URLComponents.path.getter(v20);
    uint64_t v52 = v21;
    uint64_t v49 = 47LL;
    unint64_t v50 = 0xE100000000000000LL;
    unint64_t v22 = sub_10001B4A0();
    uint64_t v23 = StringProtocol.components<A>(separatedBy:)( &v49,  &type metadata for String,  &type metadata for String,  v22,  v22);
    swift_bridgeObjectRelease();
    uint64_t v24 = sub_1000B79A0(v23);
    unint64_t v26 = v25;
    swift_bridgeObjectRelease();
    uint64_t v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
    if (!v26)
    {
      uint64_t v24 = URLComponents.path.getter(v27);
      unint64_t v26 = v28;
    }

    unint64_t v29 = *(void (**)(char *, uint64_t))(v7 + 8);
    v29(v10, v6);
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v30 = type metadata accessor for Logger(0LL);
    sub_100018F68(v30, (uint64_t)qword_1002EB9D0);
    sub_100125C84();
    sub_100023E9C();
    sub_100125C84();
    uint64_t v31 = sub_100023E9C();
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v33 = static os_log_type_t.debug.getter();
    int v34 = v33;
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v35 = swift_slowAlloc(22LL, -1LL);
      int v46 = v34;
      uint64_t v36 = v35;
      uint64_t v47 = (void **)swift_slowAlloc(64LL, -1LL);
      aBlock = v47;
      *(_DWORD *)uint64_t v36 = 136446466;
      uint64_t v48 = v24;
      HTTPMethod.rawValue.getter(v13[2], v13[3]);
      os_log_t v45 = v32;
      uint64_t v49 = sub_1000CF360(v37, v38, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v36 + 4);
      swift_bridgeObjectRelease();
      sub_100125C18();
      sub_100125C18();
      *(_WORD *)(v36 + 12) = 2082;
      sub_100023E9C();
      uint64_t v49 = sub_1000CF360(v48, v26, (uint64_t *)&aBlock);
      uint64_t v24 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v36 + 14);
      swift_bridgeObjectRelease_n(v26, 3LL);
      os_log_t v39 = v45;
      _os_log_impl( (void *)&_mh_execute_header,  v45,  (os_log_type_t)v46,  "Request received: Method: %{public}s Endpoint: /%{public}s",  (uint8_t *)v36,  0x16u);
      uint64_t v40 = (uint64_t)v47;
      swift_arrayDestroy(v47, 2LL);
      sub_10001A408(v40);
      sub_10001A408(v36);
    }

    else
    {
      sub_100125C18();
      sub_100125C18();

      swift_bridgeObjectRelease_n(v26, 2LL);
    }

    uint64_t v41 = (void *)sub_100019310((uint64_t)&unk_100286A78, 136LL);
    _OWORD v41[2] = v24;
    v41[3] = v26;
    memcpy(v41 + 4, a1, 0x68uLL);
    sub_100125C84();
    NSString v42 = String._bridgeToObjectiveC()();
    uint64_t v43 = sub_100019310((uint64_t)&unk_100286AA0, 32LL);
    *(void *)(v43 + 16) = sub_10012493C;
    *(void *)(v43 + 24) = v41;
    uint64_t v55 = sub_1000A3384;
    uint64_t v56 = v43;
    aBlock = _NSConcreteStackBlock;
    uint64_t v52 = 1107296256LL;
    uint64_t v53 = sub_100124868;
    uint64_t v54 = &unk_100286AB8;
    uint64_t v44 = _Block_copy(&aBlock);
    ChannelPipeline.syncOperations.getter();
    swift_release();
    AnalyticsSendEventLazy(v42, v44);
    _Block_release(v44);
    sub_100024F0C();

    if (qword_1002A8D20 != -1) {
      swift_once(&qword_1002A8D20, sub_100124678);
    }
    ChannelPipeline.syncOperations.getter();
    sub_100123914((uint64_t)a1, (uint64_t)&aBlock);
    sub_100024F0C();
    v29(v12, v6);
    LODWORD(sub_10010E448(v12, v13, v14, 812LL, v15) = v57;
    uint64_t v18 = (uint64_t)aBlock;
    char v19 = (char)v53;
  }

  sub_100125C44(v18, v19);
  *(_DWORD *)(a2 + 56) = v15;
  sub_100125C30();
  sub_10002A580();
}

uint64_t sub_10012388C(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  *(_BYTE *)(v3 + 32) = a3;
  uint64_t v4 = sub_1000175B0(&qword_1002B9420);
  sub_100124984();
  *(void *)(v3 + 4sub_1001A93A0(0LL, 0) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for HTTPMethod, v4);
  uint64_t v5 = type metadata accessor for Router.Node();
  *(void *)(v3 + 48) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v5);
  *(void *)(v3 + 56) = _swiftEmptyArrayStorage;
  return v3;
}

void sub_100123914(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  char v8 = *(_BYTE *)(a1 + 48);
  uint64_t v9 = v6[4];
  sub_100023E9C();
  URL.init(string:)(v9);
  sub_10001DC10();
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v34 = v7;
  char v33 = v8;
  if (sub_10001D158(v2, 1LL, v10) == 1)
  {
    sub_100043F40(v2, &qword_1002A9720);
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v11 = (void *)URL.pathComponents.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(v2, v10);
  }

  unint64_t v12 = (2LL * v11[2]) | 1;
  uint64_t v13 = v6[2];
  unint64_t v14 = v6[3];
  sub_10005A6F0(v13, v14);
  uint64_t v15 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for String);
  uint64_t v16 = sub_100123CF4(v11, (uint64_t)(v11 + 4), 0LL, v12, v13, v14, v15);
  swift_bridgeObjectRelease();
  sub_10005A704(v13, v14);
  swift_bridgeObjectRelease();
  sub_10008316C((uint64_t)v16, &v43);
  swift_bridgeObjectRelease();
  if (*((void *)&v44 + 1))
  {
    uint64_t v32 = v46;
    sub_10002A118(&v43, (uint64_t)v36);
    uint64_t v31 = v37;
    uint64_t v30 = v38;
    sub_100019F58(v36, v37);
    uint64_t v17 = *(void *)a1;
    uint64_t v28 = *(void *)a1;
    unint64_t v27 = *(void *)(a1 + 8);
    uint64_t v18 = *(void *)(a1 + 56);
    uint64_t v19 = *(void *)(a1 + 72);
    uint64_t v29 = *(void *)(a1 + 64);
    unint64_t v12 = *(void *)(a1 + 80);
    int v20 = *(_DWORD *)(a1 + 88);
    char v21 = *(_BYTE *)(a1 + 94);
    __int16 v22 = *(_WORD *)(a1 + 92);
    uint64_t v42 = *(void *)(a1 + 96);
    __int128 v35 = *(_OWORD *)(a1 + 16);
    sub_100055528((uint64_t *)a1);
    sub_10004DBFC(&v42);
    *(void *)&__int128 v43 = v17;
    *((void *)&v43 + sub_1001A93A0(v0, 1) = v27;
    __int128 v44 = v35;
    os_log_t v45 = v6;
    uint64_t v46 = v34;
    char v47 = v33;
    uint64_t v48 = v18;
    uint64_t v49 = v29;
    uint64_t v50 = v19;
    unint64_t v51 = v12;
    char v54 = v21;
    __int16 v53 = v22;
    int v52 = v20;
    uint64_t v55 = v32;
    (*(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t))(v30 + 24))(&v39, &v43, v31);
    sub_10003907C(v28, v27);
    swift_bridgeObjectRelease();
    swift_release();
    swift_unknownObjectRelease(v35);
    sub_100039090(v18, v29, v19);
    swift_bridgeObjectRelease();
    sub_100019F7C(v36);
    LODWORD(v12) = v41;
    uint64_t v23 = v39;
    char v24 = v40;
  }

  else
  {
    sub_100043F40((uint64_t)&v43, &qword_1002B3978);
    sub_1000ACB64(0x6E756F6620746F4ELL, 0xE900000000000064LL, 6u, (uint64_t)&v43);
    sub_100125BEC();
    uint64_t v25 = sub_100125BDC();
    uint64_t v26 = sub_100019310(v25, 44LL);
    *(void *)(v26 + 16) = 0LL;
    *(void *)(v26 + 24) = 0LL;
    uint64_t v23 = sub_100125C64(v26, 25LL);
  }

  sub_100125C44(v23, v24);
  sub_100125C30();
  *(_DWORD *)(a2 + 56) = v12;
  sub_10002A580();
}

void *sub_100123CF4( void *result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v8 = a4 >> 1;
  if (a4 >> 1 == a3) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v10 = v7;
  unint64_t v12 = a6;
  uint64_t v13 = a5;
  uint64_t v16 = a2;
  uint64_t v51 = a7;
  uint64_t v44 = (uint64_t)result;
  if (*(_BYTE *)(v7 + 32) == 1)
  {
    if (v8 <= a3)
    {
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }

    uint64_t v17 = *(void *)(v7 + 24);
    uint64_t v42 = *(void *)(v7 + 16);
    sub_10001FFF0();
    sub_10001ED74();
    swift_bridgeObjectRetain();
    swift_isUniquelyReferenced_nonNull_native(a7);
    v50[0] = a7;
    uint64_t v19 = sub_100125C0C();
    unint64_t v12 = a6;
    uint64_t v13 = a5;
    uint64_t v16 = a2;
    sub_1001B8590(v19, v20, v42, v17, v21);
    uint64_t v51 = a7;
    swift_bridgeObjectRelease();
    uint64_t result = (void *)swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t result = (void *)sub_10001ED74();
  }

  if (__OFSUB__(v8, a3))
  {
    __break(1u);
    goto LABEL_25;
  }

  if (v8 - a3 == 1)
  {
    sub_1000487CC(v7 + 40, (uint64_t)&v49);
    uint64_t v22 = *(void *)(v7 + 40);
    sub_100125C58();
    sub_100019320();
    sub_10012A3B8(v22, (uint64_t)&v47);
    sub_100019390();
    sub_10005A704(v13, v12);
    if (!v48)
    {
      sub_100043F40((uint64_t)&v47, &qword_1002B9450);
      swift_bridgeObjectRelease();
      return _swiftEmptyArrayStorage;
    }

    sub_10002A118(&v47, (uint64_t)v50);
    uint64_t v23 = sub_1000175B0(&qword_1002AA3E0);
    uint64_t v9 = sub_100019310(v23, 80LL);
    *(_OWORD *)(v9 + 16) = xmmword_1001F3C00;
    sub_100023BAC((uint64_t)v50, v9 + 32);
    *(void *)(v9 + 72) = a7;
    sub_10001ED74();
    sub_100019F7C(v50);
LABEL_22:
    swift_bridgeObjectRelease();
    return (void *)v9;
  }

  uint64_t v24 = a3 + 1;
  if (__OFADD__(a3, 1LL)) {
    goto LABEL_26;
  }
  if (v24 >= a3 && v24 < v8)
  {
    unint64_t v43 = v12;
    uint64_t v26 = *(void *)(v16 + 16 * v24);
    sub_1000487CC(v7 + 48, (uint64_t)v50);
    sub_10001FFF0();
    sub_100023E9C();
    uint64_t v27 = sub_10012A3C4(v26);
    swift_bridgeObjectRelease();
    sub_10001DC10();
    if (v27)
    {
      uint64_t v28 = v44;
      uint64_t v29 = sub_100124A3C(a3 + 1, v8, v44, a2, a3, a4);
      uint64_t v31 = v30;
      uint64_t v33 = v32;
      uint64_t v35 = v34;
      sub_10001ED74();
      uint64_t v36 = v31;
      uint64_t v37 = v33;
      uint64_t v38 = a5;
      unint64_t v12 = v43;
      uint64_t v39 = (void *)sub_100123CF4(v29, v36, v37, v35, a5, v43, a7);
      swift_unknownObjectRelease(v29);
      swift_bridgeObjectRelease();
      char v40 = (void *)(a3 + 1);
      swift_release();
    }

    else
    {
      uint64_t v39 = _swiftEmptyArrayStorage;
      uint64_t v38 = a5;
      char v40 = (void *)(a3 + 1);
      uint64_t v28 = v44;
    }

    sub_1000487CC(v10 + 56, (uint64_t)&v47);
    sub_100125C58();
    sub_100125BD4();
    unint64_t v41 = sub_100019320();
    sub_10012309C(v41, v28, a2, a3, a4, v40, v38, v12, &v51);
    sub_100019390();
    uint64_t v49 = v39;
    sub_100188A14();
    uint64_t v9 = (uint64_t)v49;
    goto LABEL_22;
  }

uint64_t sub_100124030(void *a1, uint64_t a2, char *a3, int64_t a4, unint64_t a5)
{
  unint64_t v12 = (char *)&v100 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t result = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a2)
  {
    uint64_t v18 = a2;
    goto LABEL_17;
  }

  uint64_t v19 = a1[3];
  uint64_t v20 = a1[4];
  sub_100019F58(a1, v19);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v19, v20);
  uint64_t v23 = v22;
  URL.init(string:)(v21);
  swift_bridgeObjectRelease(v23);
  if (sub_10001D158((uint64_t)v12, 1LL, v13) == 1)
  {
    sub_100043F40((uint64_t)v12, &qword_1002A9720);
    sub_100125C20();
    uint64_t v24 = sub_100125C0C();
    uint64_t v26 = v25(v24);
    uint64_t v28 = v27;
    unint64_t v29 = sub_1001249FC();
    uint64_t v30 = sub_1000252D0((uint64_t)&type metadata for Router.RouterError, v29);
    *(void *)uint64_t v31 = v26;
    *(void *)(v31 + 8) = v28;
    *(void *)(v31 + 16) = 0LL;
    *(void *)(v31 + 24) = 0LL;
    *(_BYTE *)(v31 + 32) = 0;
    return swift_willThrow(v30);
  }

  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v12, v13);
  uint64_t v32 = (void *)sub_100125C8C();
  uint64_t v33 = v32;
  if (v32[2])
  {
    uint64_t v35 = v32[4];
    uint64_t v34 = v32[5];
    sub_100019320();
    swift_bridgeObjectRelease(v33);
    if (v35 == 47 && v34 == 0xE100000000000000LL)
    {
      swift_bridgeObjectRelease(0xE100000000000000LL);
LABEL_15:
      a4 = 0LL;
      uint64_t v39 = sub_100125C8C();
      a3 = (char *)(v39 + 32);
      a5 = (2LL * *(void *)(v39 + 16)) | 1;
      goto LABEL_16;
    }

    char v37 = sub_100048720(v35, v34, 47LL, 0xE100000000000000LL);
    sub_100019390();
    if ((v37 & 1) != 0) {
      goto LABEL_15;
    }
  }

  else
  {
    swift_bridgeObjectRelease(v32);
  }

  uint64_t v38 = (void *)sub_100125C8C();
  uint64_t v105 = &off_100270008;
  uint64_t v106 = (char *)&unk_100270028;
  int64_t v107 = 0LL;
  uint64_t v108 = 3LL;
  sub_100124C74(v38);
  uint64_t v39 = (uint64_t)v105;
  a3 = v106;
  a4 = v107;
  a5 = v108;
LABEL_16:
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  uint64_t v18 = v39;
LABEL_17:
  if (a4 == a5 >> 1)
  {
    unint64_t v40 = sub_1001249FC();
    sub_1000252D0((uint64_t)&type metadata for Router.RouterError, v40);
    *(_OWORD *)uint64_t v41 = 0u;
    *(_OWORD *)(v41 + 16) = 0u;
    *(_BYTE *)(v41 + 32) = 2;
    uint64_t v42 = sub_100125BD4();
LABEL_19:
    swift_willThrow(v42);
LABEL_20:
    uint64_t v43 = v18;
    return swift_unknownObjectRelease(v43);
  }

  uint64_t v44 = a5 >> 1;
  if (a4 >= (uint64_t)(a5 >> 1))
  {
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }

  uint64_t v104 = a3;
  os_log_t v45 = (uint64_t *)&a3[16 * a4];
  uint64_t v47 = *v45;
  uint64_t v46 = v45[1];
  uint64_t v49 = *(void *)(v110 + 16);
  uint64_t v48 = *(void *)(v110 + 24);
  if (*v45 != v49 || v46 != v48)
  {
    uint64_t v103 = a2;
    uint64_t v51 = a1;
    uint64_t v52 = v18;
    uint64_t v53 = v44;
    uint64_t result = sub_100048720(v47, v46, v49, v48);
    uint64_t v44 = v53;
    uint64_t v18 = v52;
    a1 = v51;
    if ((result & 1) == 0 && (*(_BYTE *)(v110 + 32) & 1) == 0)
    {
      unint64_t v90 = sub_1001249FC();
      sub_1000252D0((uint64_t)&type metadata for Router.RouterError, v90);
      *(void *)uint64_t v91 = v49;
      *(void *)(v91 + 8) = v48;
      *(void *)(v91 + 16) = v47;
      *(void *)(v91 + 24) = v46;
      *(_BYTE *)(v91 + 32) = 1;
      swift_bridgeObjectRetain(v46);
      sub_100125BD4();
      uint64_t v42 = sub_100019320();
      goto LABEL_19;
    }
  }

  if (__OFSUB__(v44, a4)) {
    goto LABEL_51;
  }
  if (v44 - a4 != 1)
  {
    uint64_t v103 = v44;
    if (a4 + 1 < v44)
    {
      uint64_t v102 = a4 + 1;
      uint64_t v60 = (uint64_t *)&v104[16 * a4 + 16];
      uint64_t v61 = *v60;
      unint64_t v62 = v60[1];
      sub_100125BD4();
      sub_10001FFF0();
      sub_100083094(v61, v62);
      uint64_t v64 = v63;
      uint64_t v66 = v65;
      sub_100023EEC();
      if (!v66) {
        goto LABEL_41;
      }
      if (v64 == 58 && v66 == 0xE100000000000000LL)
      {
        sub_100019390();
      }

      else
      {
        char v68 = sub_100048720(v64, v66, 58LL, 0xE100000000000000LL);
        sub_100019390();
        if ((v68 & 1) == 0)
        {
LABEL_41:
          uint64_t v101 = v18;
          uint64_t v69 = v110;
          uint64_t v70 = v110 + 48;
          swift_beginAccess(v110 + 48, &v105, 0LL, 0LL);
          uint64_t v71 = *(void *)(v69 + 48);
          sub_10001FFF0();
          swift_bridgeObjectRetain(v71);
          uint64_t v72 = sub_100125C0C();
          uint64_t v73 = sub_10012A3C4(v72);
          sub_100023EEC();
          swift_bridgeObjectRelease(v71);
          if (v73)
          {
            uint64_t v74 = v102;
            uint64_t v75 = v103;
            uint64_t v76 = v101;
          }

          else
          {
            uint64_t v92 = *v60;
            uint64_t v93 = v60[1];
            uint64_t v94 = type metadata accessor for Router.Node();
            sub_100056B74(v94);
            swift_bridgeObjectRetain_n(v93, 2LL);
            uint64_t v95 = sub_100125C0C();
            uint64_t v97 = sub_10012388C(v95, v96, 0);
            sub_100035224(v70, (uint64_t)v109);
            sub_1001B822C(v97, v92, v93);
            swift_endAccess(v109);
            sub_100023EEC();
            uint64_t v98 = *v60;
            sub_100019320();
            sub_10001FFF0();
            uint64_t v73 = sub_10012A3C4(v98);
            sub_100019390();
            sub_100023EEC();
            uint64_t v76 = v101;
            if (!v73)
            {
              uint64_t v59 = v101;
              return swift_unknownObjectRelease(v59);
            }

            uint64_t v74 = v102;
            uint64_t v75 = v103;
          }

          sub_100125BFC(v74, v75, v76);
          uint64_t v99 = sub_100125BAC();
          sub_100124030(v99);
          sub_100125C78();
          swift_release(v73);
          uint64_t v43 = v76;
          return swift_unknownObjectRelease(v43);
        }
      }

      uint64_t v78 = *v60;
      unint64_t v77 = v60[1];
      sub_100019320();
      unint64_t v79 = sub_10005B078(1uLL, v78, v77);
      uint64_t v80 = static String._fromSubstring(_:)(v79);
      uint64_t v82 = v81;
      sub_100019390();
      uint64_t v83 = type metadata accessor for Router.Node();
      sub_100056B74(v83);
      uint64_t v84 = sub_10012388C(v80, v82, 1);
      uint64_t v85 = v110;
      sub_100035224(v110 + 56, (uint64_t)&v105);
      uint64_t v86 = swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v86);
      uint64_t v87 = *(void *)((*(void *)(v85 + 56) & 0xFFFFFFFFFFFFF8LL) + 0x10);
      sub_10002E9EC(v87);
      uint64_t v88 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v87, v84);
      specialized Array._endMutation()(v88);
      swift_endAccess(&v105);
      sub_100125BFC(v102, v103, v18);
      uint64_t v89 = sub_100125BAC();
      sub_100124030(v89);
      sub_100125C78();
      swift_release(v84);
      goto LABEL_20;
    }

uint64_t sub_100124678()
{
  uint64_t v0 = type metadata accessor for Router.Node();
  sub_100019310(v0, 64LL);
  uint64_t result = sub_10012388C(47LL, 0xE100000000000000LL, 0);
  qword_1002EB988 = result;
  return result;
}

void *sub_1001246B8()
{
  return v0;
}

uint64_t sub_1001246EC()
{
  return swift_deallocClassInstance(v0, 64LL, 7LL);
}

uint64_t sub_10012470C()
{
  uint64_t v0 = sub_1000175B0(&qword_1002B3968);
  uint64_t inited = swift_initStackObject(v0, &v6);
  *(_OWORD *)(inited + 16) = xmmword_1001F3DD0;
  *(void *)(inited + 32) = 0x746E696F70646E65LL;
  *(void *)(inited + 4sub_1001A93A0(0LL, 0) = 0xE800000000000000LL;
  *(void *)(inited + 48) = String._bridgeToObjectiveC()();
  *(void *)(inited + 56) = 0x6973726556697061LL;
  *(void *)(inited + 64) = 0xEA00000000006E6FLL;
  v2._object = (void *)0x800000010021C450LL;
  v2._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  HTTPHeaders.first(name:)(v2);
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 72) = v3;
  unint64_t v4 = sub_1001249C0();
  return Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v4);
}

void sub_100124820()
{
}

uint64_t sub_100124828(uint64_t a1)
{
  return sub_1000B2980(a1, *(void *)v1, *(void *)(v1 + 8));
}

void sub_100124830(uint64_t a1)
{
}

uint64_t type metadata accessor for Router.Node()
{
  return objc_opt_self(&OBJC_CLASS____TtCV25ASOctaneSupportXPCService6Router4Node);
}

ValueMetadata *type metadata accessor for Router()
{
  return &type metadata for Router;
}

Class sub_100124868(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = ChannelPipeline.syncOperations.getter();
  uint64_t v3 = v1(v2);
  sub_100024F0C();
  if (v3)
  {
    sub_1001249C0();
    v4.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    sub_100019390();
  }

  else
  {
    v4.super.Class isa = 0LL;
  }

  return v4.super.isa;
}

uint64_t sub_1001248D0()
{
  unint64_t v1 = v0[5];
  if (v1 >= 2) {
    swift_bridgeObjectRelease(v1);
  }
  swift_unknownObjectRelease(v0[6]);
  swift_release(v0[8]);
  swift_bridgeObjectRelease(v0[9]);
  if (v0[13])
  {
    swift_bridgeObjectRelease(v0[12]);
    swift_release(v0[13]);
  }

  swift_bridgeObjectRelease(v0[16]);
  return swift_deallocObject(v0, 136LL, 7LL);
}

uint64_t sub_10012493C()
{
  return sub_10012470C();
}

uint64_t sub_100124948()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10012496C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1001A93A0(0LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10012497C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_100124984()
{
  unint64_t result = qword_1002B9460;
  if (!qword_1002B9460)
  {
    unint64_t result = swift_getWitnessTable(protocol conformance descriptor for HTTPMethod, &type metadata for HTTPMethod);
    atomic_store(result, (unint64_t *)&qword_1002B9460);
  }

  return result;
}

unint64_t sub_1001249C0()
{
  unint64_t result = qword_1002B3960;
  if (!qword_1002B3960)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSObject);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002B3960);
  }

  return result;
}

unint64_t sub_1001249FC()
{
  unint64_t result = qword_1002B3970;
  if (!qword_1002B3970)
  {
    unint64_t result = swift_getWitnessTable("\tQ\b", &type metadata for Router.RouterError);
    atomic_store(result, (unint64_t *)&qword_1002B3970);
  }

  return result;
}

uint64_t sub_100124A3C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if ((a2 & 0x8000000000000000LL) == 0) {
    return swift_unknownObjectRetain(a3);
  }
LABEL_12:
  __break(1u);
  return result;
}

size_t sub_100124AB4(size_t result)
{
  int64_t v2 = result;
  unint64_t v3 = v1[3];
  NSDictionary v4 = (void *)*v1;
  int64_t v5 = v3 >> 1;
  if ((v3 & 1) == 0 || (result = swift_isUniquelyReferenced_nonNull(*v1), *uint64_t v1 = v4, (result & 1) == 0))
  {
    uint64_t v13 = v4;
    goto LABEL_9;
  }

  uint64_t v6 = v1[2];
  int64_t v7 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  uint64_t v8 = v1[1];
  uint64_t v9 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
  uint64_t v10 = swift_unknownObjectRetain(v4);
  uint64_t v11 = (void *)swift_dynamicCastClass(v10, v9);
  if (!v11)
  {
    swift_unknownObjectRelease(v4);
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  uint64_t v12 = v11[2];
  if ((void *)(v8 + 16 * v6 + 16 * v7) != &v11[2 * v12 + 4])
  {
    unint64_t result = swift_release(v11);
LABEL_24:
    if (v7 >= v2) {
      goto LABEL_22;
    }
    uint64_t v13 = (void *)*v1;
LABEL_9:
    uint64_t v14 = v1[2];
    int64_t v15 = v5 - v14;
    if (__OFSUB__(v5, v14))
    {
      __break(1u);
    }

    else
    {
      uint64_t v16 = v1[1];
      if (v15 <= v2) {
        int64_t v17 = v2;
      }
      else {
        int64_t v17 = v5 - v14;
      }
      if (v17)
      {
        uint64_t v18 = sub_1000175B0(&qword_1002A9098);
        NSDictionary v4 = (void *)swift_allocObject(v18, 16 * v17 + 32, 7LL);
        unint64_t result = j__malloc_size(v4);
        v4[2] = v15;
        v4[3] = 2 * ((uint64_t)(result - 32) / 16);
      }

      else
      {
        NSDictionary v4 = _swiftEmptyArrayStorage;
      }

      if (v5 >= v14)
      {
        unint64_t result = sub_10018E56C(v16 + 16 * v14, v5 - v14, v4 + 4);
        if (!__OFSUB__(0LL, v14))
        {
          uint64_t v19 = v4[2];
          uint64_t v20 = v14 + v19;
          if (!__OFADD__(v14, v19))
          {
            if (v20 >= v14)
            {
              unint64_t result = swift_unknownObjectRelease(v13);
              if ((v20 & 0x8000000000000000LL) == 0)
              {
                v1[1] = &v4[-2 * v14 + 4];
                v1[2] = v14;
                v1[3] = (2 * v20) | 1;
LABEL_22:
                *uint64_t v1 = v4;
                return result;
              }

              goto LABEL_31;
            }

void *sub_100124C74(void *a1)
{
  uint64_t v3 = a1[2];
  unint64_t result = (void *)sub_10012503C(v3);
  uint64_t v6 = v1[2];
  unint64_t v5 = v1[3];
  uint64_t v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v8 = v1[1] + 16 * v6 + 16 * v7;
  if ((v5 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v9 = *v1;
  uint64_t v10 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
  uint64_t v11 = swift_unknownObjectRetain(v9);
  uint64_t v12 = (void *)swift_dynamicCastClass(v11, v10);
  if (!v12)
  {
    swift_unknownObjectRelease(v9);
    uint64_t v12 = _swiftEmptyArrayStorage;
  }

  uint64_t v13 = v12[2];
  if ((void *)v8 != &v12[2 * v13 + 4])
  {
    unint64_t result = (void *)swift_release(v12);
LABEL_7:
    uint64_t v14 = v7;
    goto LABEL_9;
  }

  unint64_t v15 = v12[3];
  unint64_t result = (void *)swift_release(v12);
  uint64_t v16 = (v15 >> 1) - v13;
  BOOL v17 = __OFADD__(v7, v16);
  uint64_t v14 = v7 + v16;
  if (v17)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

uint64_t sub_100124DC0(uint64_t result, uint64_t a2)
{
  if (__OFSUB__(0LL, a2))
  {
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v2 = *(void *)(result + 16);
  BOOL v3 = __OFADD__(a2, v2);
  uint64_t v4 = a2 + v2;
  if (v3)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (v4 < a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0) {
LABEL_9:
  }
    __break(1u);
  return result;
}

uint64_t sub_100124E08(uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v5 = v4[2];
  unint64_t v6 = (unint64_t)v4[3] >> 1;
  int64_t v7 = v6 - v5;
  if (__OFSUB__(v6, v5))
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v9 = *(void *)result;
  uint64_t v10 = *(void *)(*(void *)result + 16LL);
  BOOL v11 = __OFSUB__(v10, a2);
  uint64_t v12 = v10 - a2;
  if (v11)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v13 = v12 - a3;
  if (__OFSUB__(v12, a3))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v14 = (char *)(v7 - a2);
  if (__OFSUB__(v7, a2))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  BOOL v11 = __OFSUB__(v14, v13);
  unint64_t v15 = &v14[-v13];
  if (v11)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v16 = v4;
  uint64_t v35 = v15;
  uint64_t v18 = v9 + 32;
  uint64_t v19 = v9 + 32 + 16 * a2;
  uint64_t v37 = v19 + 16 * a3;
  unint64_t result = sub_10012570C((void *)v7);
  if (result)
  {
    uint64_t v20 = result;
    uint64_t v34 = v4[2];
    uint64_t v32 = a4;
    uint64_t v33 = v13;
    uint64_t v21 = v4[1] + 16 * v34;
    uint64_t v22 = result + 32;
    swift_arrayDestroy(result + 32, (v21 - (result + 32)) / 16);
    sub_1000314B8(v21, a2, v18);
    swift_arrayDestroy(v21 + 16 * a2, v35);
    v32(v19, a3);
    sub_1000314B8(v21 + 16 * a2 + 16LL * (void)v35, v33, v37);
    uint64_t v23 = v22 + 16LL * *(void *)(v20 + 16);
    uint64_t v24 = v34;
    swift_arrayDestroy(v21 + 16 * v7, (v23 - (v21 + 16 * v7)) / 16);
    *(void *)(v20 + 16) = 0LL;
    swift_release(v20);
LABEL_15:
    uint64_t v28 = *v4;
    swift_retain();
    swift_unknownObjectRelease(v28);
    unint64_t result = sub_100124DC0(v9, v24);
    *uint64_t v16 = result;
    v16[1] = v29;
    void v16[2] = v30;
    void v16[3] = v31;
    return result;
  }

  uint64_t v24 = v4[2];
  uint64_t v25 = v24 + a2;
  if (__OFADD__(v24, a2)) {
    goto LABEL_21;
  }
  if (v25 < v24)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if (__OFSUB__(v25, v24))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  swift_arrayInitWithCopy(v9 + 32);
  unint64_t result = ((uint64_t (*)(uint64_t, uint64_t))a4)(v18 + 16 * a2, a3);
  uint64_t v26 = &v35[v25];
  if (__OFADD__(v25, v35))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  int64_t v27 = (unint64_t)v4[3] >> 1;
  if (v27 < (uint64_t)v26)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  if (!__OFSUB__(v27, v26))
  {
    swift_arrayInitWithCopy(v37);
    goto LABEL_15;
  }

uint64_t sub_10012503C(uint64_t result)
{
  uint64_t v3 = v1[2];
  unint64_t v2 = v1[3];
  uint64_t v4 = (v2 >> 1) - v3;
  if (__OFSUB__(v2 >> 1, v3))
  {
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v5 = result;
  if ((v2 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v6 = *v1;
  uint64_t v7 = v1[1];
  uint64_t v8 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
  uint64_t v9 = swift_unknownObjectRetain(v6);
  uint64_t v10 = (void *)swift_dynamicCastClass(v9, v8);
  if (!v10)
  {
    swift_unknownObjectRelease(v6);
    uint64_t v10 = _swiftEmptyArrayStorage;
  }

  uint64_t v11 = v10[2];
  if ((void *)(v7 + 16 * v3 + 16 * v4) != &v10[2 * v11 + 4])
  {
    swift_release(v10);
LABEL_7:
    uint64_t v12 = v4;
    goto LABEL_9;
  }

  unint64_t v13 = v10[3];
  unint64_t result = swift_release(v10);
  uint64_t v14 = (v13 >> 1) - v11;
  BOOL v15 = __OFADD__(v4, v14);
  uint64_t v12 = v4 + v14;
  if (!v15)
  {
LABEL_9:
    unint64_t result = v4 + v5;
    if (!__OFADD__(v4, v5))
    {
      if (v12 >= result) {
        return sub_100124AB4(result);
      }
      if (v12 + 0x4000000000000000LL >= 0)
      {
        uint64_t v16 = 2 * v12;
        if (v16 > result) {
          unint64_t result = v16;
        }
        return sub_100124AB4(result);
      }

      goto LABEL_17;
    }

void *sub_100125130(void *result)
{
  uint64_t v2 = v1[2];
  unint64_t v3 = v1[3];
  unint64_t v4 = v3 >> 1;
  BOOL v5 = __OFSUB__(v3 >> 1, v2);
  uint64_t v6 = (v3 >> 1) - v2;
  if (v5)
  {
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v7 = (char *)result - v6;
  if (__OFSUB__(result, v6))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!v7) {
    return result;
  }
  uint64_t v8 = *v1;
  uint64_t v9 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
  uint64_t v10 = swift_unknownObjectRetain(v8);
  unint64_t result = (void *)swift_dynamicCastClass(v10, v9);
  if (!result)
  {
    swift_unknownObjectRelease(v8);
    unint64_t result = &_swiftEmptyArrayStorage;
  }

  uint64_t v11 = result[2];
  BOOL v5 = __OFADD__(v11, v7);
  uint64_t v12 = &v7[v11];
  if (v5) {
    goto LABEL_13;
  }
  result[2] = v12;
  unint64_t result = (void *)swift_release(result);
  unint64_t v13 = &v7[v4];
  if (__OFADD__(v4, v7))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  if (((unint64_t)v13 & 0x8000000000000000LL) != 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }

  v1[3] = v3 & 1 | (2LL * (void)v13);
  return result;
}

void *sub_1001251E4(void *result, unint64_t a2)
{
  uint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  uint64_t v5 = (v3 >> 1) - v4;
  if (__OFSUB__(v3 >> 1, v4)) {
    goto LABEL_47;
  }
  unint64_t v6 = result[2];
  if (v6 == a2)
  {
LABEL_37:
    swift_bridgeObjectRelease(result);
    return (void *)swift_bridgeObjectRelease(0LL);
  }

  if (v6 <= a2) {
    goto LABEL_48;
  }
  uint64_t v7 = &result[2 * a2];
  uint64_t v46 = result;
  unint64_t v47 = a2 + 1;
  uint64_t v8 = v7[4];
  unint64_t v9 = result[2];
  uint64_t v10 = v7[5];
  unint64_t result = (void *)swift_bridgeObjectRetain(v10);
  unint64_t v40 = 1 - v9;
  unint64_t v41 = v9;
  while (!__OFADD__(v5, 1LL))
  {
    uint64_t v11 = sub_100125500((void *)v5, v5 + 1, *v2, v2[1], v4, v3);
    uint64_t v48 = v11;
    uint64_t v12 = sub_1001256FC();
    uint64_t v14 = v13;
    sub_100124E08((uint64_t)&v48, v5, 0LL, (void (*)(uint64_t, uint64_t))v12);
    swift_release(v14);
    unint64_t result = (void *)swift_release(v11);
    uint64_t v4 = v2[2];
    unint64_t v15 = v2[3];
    uint64_t v16 = (v15 >> 1) - v4;
    if (__OFSUB__(v15 >> 1, v4)) {
      goto LABEL_40;
    }
    unint64_t v43 = v15 >> 1;
    unint64_t v44 = v2[3];
    uint64_t v18 = *v2;
    uint64_t v17 = v2[1];
    uint64_t v45 = *v2;
    if ((v15 & 1) == 0) {
      goto LABEL_12;
    }
    uint64_t v19 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
    uint64_t v20 = swift_unknownObjectRetain(v18);
    uint64_t v21 = (void *)swift_dynamicCastClass(v20, v19);
    if (!v21)
    {
      swift_unknownObjectRelease(v45);
      uint64_t v21 = _swiftEmptyArrayStorage;
    }

    uint64_t v22 = v21[2];
    if ((void *)(v17 + 16 * v4 + 16 * v16) != &v21[2 * v22 + 4])
    {
      unint64_t result = (void *)swift_release(v21);
LABEL_12:
      uint64_t v23 = v16;
      goto LABEL_14;
    }

    unint64_t v24 = v21[3];
    unint64_t result = (void *)swift_release(v21);
    uint64_t v25 = (v24 >> 1) - v22;
    uint64_t v23 = v16 + v25;
    if (__OFADD__(v16, v25)) {
      goto LABEL_45;
    }
LABEL_14:
    if (v5 < v23)
    {
      uint64_t v26 = (void *)(v17 + 16 * v4 + 16 * v5);
      *uint64_t v26 = v8;
      v26[1] = v10;
      if (v47 == v41)
      {
        uint64_t v8 = 0LL;
        uint64_t v10 = 0LL;
        ++v5;
        unint64_t v47 = v41;
      }

      else
      {
        if ((v47 & 0x8000000000000000LL) != 0) {
          goto LABEL_46;
        }
        uint64_t v42 = v4;
        if (v47 >= v46[2])
        {
LABEL_38:
          __break(1u);
          break;
        }

        uint64_t v27 = 0LL;
        uint64_t v28 = 0LL;
        uint64_t v29 = &v46[2 * v47];
        uint64_t v30 = v17 + 16 * v5 + 16 * v42;
        while (1)
        {
          uint64_t v8 = v29[v27 + 4];
          uint64_t v31 = v29[v27 + 5];
          if (v5 + v28 + 1 >= v23)
          {
            v47 += v28 + 1;
            uint64_t v10 = v29[v27 + 5];
            goto LABEL_26;
          }

          uint64_t v32 = v30 + v27 * 8;
          *(void *)(v32 + 16) = v8;
          *(void *)(v32 + 24) = v31;
          if (!(v40 + v47 + v28)) {
            break;
          }
          unint64_t result = (void *)swift_bridgeObjectRetain(v31);
          ++v28;
          v27 += 2LL;
          if (v47 + v28 >= v46[2]) {
            goto LABEL_38;
          }
        }

        uint64_t v8 = 0LL;
        uint64_t v10 = 0LL;
        uint64_t v23 = v5 + v28 + 2;
        unint64_t v47 = v41;
LABEL_26:
        unint64_t result = (void *)swift_bridgeObjectRetain(v31);
        uint64_t v5 = v23;
        uint64_t v4 = v42;
      }
    }

    uint64_t v33 = v5 - v16;
    unint64_t v3 = v44;
    if (__OFSUB__(v5, v16)) {
      goto LABEL_41;
    }
    if (v33)
    {
      uint64_t v34 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
      uint64_t v35 = swift_unknownObjectRetain(v45);
      unint64_t result = (void *)swift_dynamicCastClass(v35, v34);
      if (!result)
      {
        swift_unknownObjectRelease(v45);
        unint64_t result = _swiftEmptyArrayStorage;
      }

      uint64_t v36 = result[2];
      BOOL v37 = __OFADD__(v36, v33);
      uint64_t v38 = v36 + v33;
      if (v37) {
        goto LABEL_42;
      }
      result[2] = v38;
      unint64_t result = (void *)swift_release(result);
      unint64_t v39 = v43 + v33;
      if (__OFADD__(v43, v33)) {
        goto LABEL_43;
      }
      if ((v39 & 0x8000000000000000LL) != 0) {
        goto LABEL_44;
      }
      unint64_t v3 = v44 & 1 | (2 * v39);
      v2[3] = v3;
    }

    if (!v10)
    {
      unint64_t result = v46;
      goto LABEL_37;
    }
  }

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

void *sub_100125500(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_32:
    if (v8 >= v7) {
      goto LABEL_21;
    }
LABEL_18:
    if (v8 + 0x4000000000000000LL >= 0)
    {
      v8 *= 2LL;
      goto LABEL_21;
    }

    __break(1u);
    goto LABEL_35;
  }

  uint64_t v7 = a2;
  unint64_t v6 = result;
  if ((a6 & 1) == 0) {
    goto LABEL_32;
  }
  uint64_t v12 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
  uint64_t v13 = swift_unknownObjectRetain(a3);
  uint64_t v14 = (void *)swift_dynamicCastClass(v13, v12);
  if (!v14)
  {
    swift_unknownObjectRelease(a3);
    uint64_t v14 = _swiftEmptyArrayStorage;
  }

  uint64_t v15 = v14[2];
  uint64_t v16 = a4 + 16 * a5 + 16 * v8;
  if ((void *)v16 == &v14[2 * v15 + 4])
  {
    unint64_t v18 = v14[3];
    unint64_t result = (void *)swift_release(v14);
    uint64_t v19 = (v18 >> 1) - v15;
    uint64_t v17 = v8 + v19;
    if (__OFADD__(v8, v19))
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
  }

  else
  {
    swift_release(v14);
    uint64_t v17 = v8;
  }

  uint64_t v20 = swift_unknownObjectRetain(a3);
  uint64_t v21 = (void *)swift_dynamicCastClass(v20, v12);
  if (v17 < v7)
  {
    if (!v21)
    {
      swift_unknownObjectRelease(a3);
      uint64_t v21 = _swiftEmptyArrayStorage;
    }

    uint64_t v22 = v21[2];
    if ((void *)v16 == &v21[2 * v22 + 4])
    {
      unint64_t v24 = v21[3];
      unint64_t result = (void *)swift_release(v21);
      uint64_t v25 = (v24 >> 1) - v22;
      BOOL v26 = __OFADD__(v8, v25);
      v8 += v25;
      if (v26)
      {
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
    }

    else
    {
      unint64_t result = (void *)swift_release(v21);
    }

    goto LABEL_18;
  }

  if (!v21)
  {
    swift_unknownObjectRelease(a3);
    uint64_t v21 = _swiftEmptyArrayStorage;
  }

  uint64_t v23 = v21[2];
  if ((void *)v16 == &v21[2 * v23 + 4])
  {
    unint64_t v27 = v21[3];
    unint64_t result = (void *)swift_release(v21);
    uint64_t v28 = (v27 >> 1) - v23;
    BOOL v26 = __OFADD__(v8, v28);
    v8 += v28;
    if (!v26) {
      goto LABEL_21;
    }
LABEL_37:
    __break(1u);
    return result;
  }

  swift_release(v21);
LABEL_21:
  if (v8 <= v7) {
    uint64_t v29 = v7;
  }
  else {
    uint64_t v29 = v8;
  }
  else {
    uint64_t v30 = v29;
  }
  if (!v30) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v31 = sub_1000175B0(&qword_1002A9098);
  uint64_t v32 = (void *)swift_allocObject(v31, 16 * v30 + 32, 7LL);
  size_t v33 = j__malloc_size(v32);
  __int128 v32[2] = v6;
  v32[3] = 2 * ((uint64_t)(v33 - 32) / 16);
  return v32;
}

uint64_t (*sub_1001256FC())()
{
  return debugOnly(_:);
}

uint64_t sub_10012570C(void *a1)
{
  uint64_t isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull(*v1);
  if (!(_DWORD)isUniquelyReferenced_nonNull) {
    return 0LL;
  }
  uint64_t v6 = v1[2];
  unint64_t v5 = v1[3];
  uint64_t v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v8 = v1[1];
  if ((v5 & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v9 = *v1;
  uint64_t v10 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
  uint64_t v11 = swift_unknownObjectRetain(v9);
  uint64_t v12 = (void *)swift_dynamicCastClass(v11, v10);
  if (!v12)
  {
    swift_unknownObjectRelease(v9);
    uint64_t v12 = _swiftEmptyArrayStorage;
  }

  uint64_t v13 = v12[2];
  if ((void *)(v8 + 16 * v6 + 16 * v7) != &v12[2 * v13 + 4])
  {
    swift_release(v12);
LABEL_8:
    uint64_t v14 = v7;
    goto LABEL_10;
  }

  unint64_t v15 = v12[3];
  uint64_t result = swift_release(v12);
  uint64_t v17 = (v15 >> 1) - v13;
  BOOL v18 = __OFADD__(v7, v17);
  uint64_t v14 = v7 + v17;
  if (!v18)
  {
LABEL_10:
    uint64_t v19 = *v1;
    uint64_t v20 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
    uint64_t v21 = swift_unknownObjectRetain(v19);
    a1 = (void *)swift_dynamicCastClass(v21, v20);
    if (!a1)
    {
      swift_unknownObjectRelease(v19);
      a1 = _swiftEmptyArrayStorage;
    }

    uint64_t v22 = (v8 + 16 * v6 - (uint64_t)a1 - 32) / 16;
    uint64_t isUniquelyReferenced_nonNull = v7 + v22;
    if (!__OFADD__(v7, v22))
    {
      uint64_t v4 = a1[2];
      if (isUniquelyReferenced_nonNull >= v4) {
        return (uint64_t)a1;
      }
LABEL_19:
      sub_100125874(isUniquelyReferenced_nonNull, v4, 0LL);
      return (uint64_t)a1;
    }

uint64_t sub_100125874(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v7 = *v3;
  uint64_t v8 = v7 + 32 + 16 * result;
  uint64_t result = swift_arrayDestroy(v8, v4);
  BOOL v9 = __OFSUB__(a3, v4);
  uint64_t v10 = a3 - v4;
  if (v9)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if (!v10) {
    goto LABEL_7;
  }
  uint64_t v11 = *(void *)(v7 + 16);
  if (__OFSUB__(v11, a2)) {
    goto LABEL_11;
  }
  uint64_t result = sub_1000314B8(v7 + 32 + 16 * a2, v11 - a2, v8 + 16 * a3);
  uint64_t v12 = *(void *)(v7 + 16);
  BOOL v9 = __OFADD__(v12, v10);
  uint64_t v13 = v12 + v10;
  if (v9)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  *(void *)(v7 + 16) = v13;
LABEL_7:
  if (a3 > 0) {
LABEL_13:
  }
    __break(1u);
  return result;
}

uint64_t sub_10012591C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a5) {
    return swift_bridgeObjectRetain(a2);
  }
  if (a5 == 1)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }

  return result;
}

uint64_t destroy for Router.RouterError(uint64_t a1)
{
  return sub_10012597C( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(_BYTE *)(a1 + 32));
}

uint64_t sub_10012597C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a5) {
    return swift_bridgeObjectRelease(a2);
  }
  if (a5 == 1)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }

  return result;
}

uint64_t initializeWithCopy for Router.RouterError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(_BYTE *)(a2 + 32);
  sub_10012591C(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for Router.RouterError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(_BYTE *)(a2 + 32);
  sub_10012591C(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  char v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_10012597C(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for Router.RouterError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  __int128 v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  char v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_10012597C(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for Router.RouterError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 33))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Router.RouterError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 33) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 32) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_100125B68(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_100125B80(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    *(void *)(result + 8) = 0LL;
    LOBYTE(a2) = 2;
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
  }

  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Router.RouterError()
{
  return &type metadata for Router.RouterError;
}

uint64_t sub_100125BAC()
{
  return v0;
}

uint64_t sub_100125BD4()
{
  return swift_unknownObjectRetain(v0);
}

uint64_t sub_100125BDC()
{
  return type metadata accessor for HTTPResponseHead._Storage();
}

ASOctaneSupportXPCService::HTTPVersion sub_100125BEC()
{
  return HTTPVersion.init(major:minor:)(1LL, 1LL);
}

uint64_t sub_100125BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100124A3C(a1, a2, a3, *(void *)(v5 - 160), v3, v4);
}

uint64_t sub_100125C0C()
{
  return v0;
}

uint64_t *sub_100125C18()
{
  return sub_100038FD4(v0);
}

void *sub_100125C20()
{
  return sub_100019F58(v0, v0[3]);
}

void sub_100125C30()
{
  *(_BYTE *)(v0 + 62) = BYTE6(v1);
  *(_WORD *)(v0 + 6sub_1001A93A0(0LL, 0) = WORD2(v1);
}

uint64_t sub_100125C44@<X0>(uint64_t result@<X0>, char a2@<W8>)
{
  *(void *)uint64_t v3 = result;
  *(void *)(v3 + 8) = v2;
  *(_BYTE *)(v3 + 16) = a2;
  *(void *)(v3 + 24) = v4;
  *(void *)(v3 + 32) = v5;
  *(void *)(v3 + 4sub_1001A93A0(0LL, 0) = v6;
  *(void *)(v3 + 48) = v7;
  return result;
}

uint64_t sub_100125C58()
{
  return sub_10005A6F0(v1, v0);
}

uint64_t sub_100125C64@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(result + 32) = a2;
  *(_WORD *)(result + 4sub_1001A93A0(0LL, 0) = v2;
  *(_WORD *)(result + 42) = v3;
  return result;
}

uint64_t sub_100125C78()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t *sub_100125C84()
{
  return sub_100055528(v0);
}

uint64_t sub_100125C8C()
{
  return URL.pathComponents.getter();
}

uint64_t sub_100125C94(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 88);
}

uint64_t sub_100125C9C@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = debugOnly(_:)(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100125CC4@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000D61C8(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_100125CF0(unsigned __int8 *a1)
{
  return sub_1000D68D4(*a1);
}

uint64_t sub_100125CF8(char a1)
{
  return a1 & 0xC;
}

void sub_100125D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_100125D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

uint64_t sub_100125D98( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_OWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))
{
  return a6(v8, &v9, a1, a4, a2, a3, a5, &v7);
}

void sub_100125E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

uint64_t sub_100125E68( kevent *a1, uint64_t a2, unsigned __int8 a3, unsigned __int8 a4, unsigned int a5, unsigned int a6, uint64_t a7, void *a8)
{
  if (!a1)
  {
    swift_release(a7);
    __break(1u);
    goto LABEL_25;
  }

  int v11 = a4 ^ a3;
  if ((~v11 & 4) != 0)
  {
    uint64_t v13 = 0LL;
  }

  else
  {
    if ((~a4 & 4) != 0) {
      __int16 v12 = 2;
    }
    else {
      __int16 v12 = 1;
    }
    if ((a5 & 0x80000000) != 0) {
      goto LABEL_25;
    }
    a1->ident = a5;
    a1->filter = -1;
    a1->flags = v12;
    a1->fflags = 0;
    a1->data = 0LL;
    a1->udata = (void *)a6;
    uint64_t v13 = 1LL;
  }

  if ((~v11 & 8) == 0)
  {
    if ((~a4 & 8) != 0) {
      __int16 v14 = 2;
    }
    else {
      __int16 v14 = 1;
    }
    if ((a5 & 0x80000000) != 0) {
      goto LABEL_25;
    }
    a1[v13].ident = a5;
    unint64_t v15 = &a1[v13];
    v15->filter = -2;
    v15->flags = v14;
    v15->fflags = 0;
    v15->data = 0LL;
    v15->udata = (void *)a6;
    ++v13;
  }

  if ((~v11 & 2) != 0) {
    goto LABEL_21;
  }
  if ((~a4 & 2) != 0) {
    __int16 v16 = 2;
  }
  else {
    __int16 v16 = 1;
  }
  if ((a5 & 0x80000000) != 0)
  {
LABEL_25:
    swift_release(a7);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL);
    __break(1u);
    return result;
  }

  a1[v13].ident = a5;
  uint64_t v17 = &a1[v13];
  v17->filter = -15;
  v17->flags = v16;
  v17->fflags = 1;
  v17->data = 0x7FFFFFFFFFFFFFFFLL;
  v17->udata = (void *)a6;
  ++v13;
LABEL_21:
  sub_1001264D4(a1, v13);
  uint64_t result = swift_release(a7);
  if (v8) {
    *a8 = v8;
  }
  return result;
}

uint64_t sub_10012608C( kevent *a1, uint64_t a2, unsigned __int8 a3, unsigned __int8 a4, unsigned int a5, unsigned int a6, uint64_t a7, void *a8)
{
  if (!a1)
  {
    swift_release();
    __break(1u);
    goto LABEL_25;
  }

  int v10 = a4 ^ a3;
  if ((~v10 & 4) != 0)
  {
    uint64_t v12 = 0LL;
  }

  else
  {
    if ((~a4 & 4) != 0) {
      __int16 v11 = 2;
    }
    else {
      __int16 v11 = 1;
    }
    if ((a5 & 0x80000000) != 0) {
      goto LABEL_25;
    }
    a1->ident = a5;
    a1->filter = -1;
    a1->flags = v11;
    a1->fflags = 0;
    a1->data = 0LL;
    a1->udata = (void *)a6;
    uint64_t v12 = 1LL;
  }

  if ((~v10 & 8) == 0)
  {
    if ((~a4 & 8) != 0) {
      __int16 v13 = 2;
    }
    else {
      __int16 v13 = 1;
    }
    if ((a5 & 0x80000000) != 0) {
      goto LABEL_25;
    }
    a1[v12].ident = a5;
    __int16 v14 = &a1[v12];
    v14->filter = -2;
    v14->flags = v13;
    v14->fflags = 0;
    v14->data = 0LL;
    v14->udata = (void *)a6;
    ++v12;
  }

  if ((~v10 & 2) != 0) {
    goto LABEL_21;
  }
  if ((~a4 & 2) != 0) {
    __int16 v15 = 2;
  }
  else {
    __int16 v15 = 1;
  }
  if ((a5 & 0x80000000) != 0)
  {
LABEL_25:
    swift_release();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL);
    __break(1u);
    return result;
  }

  a1[v12].ident = a5;
  __int16 v16 = &a1[v12];
  v16->filter = -15;
  v16->flags = v15;
  v16->fflags = 1;
  v16->data = 0x7FFFFFFFFFFFFFFFLL;
  v16->udata = (void *)a6;
  ++v12;
LABEL_21:
  sub_1001264D4(a1, v12);
  uint64_t result = swift_release();
  if (v8) {
    *a8 = v8;
  }
  return result;
}

uint64_t sub_1001262B0( kevent *a1, uint64_t a2, unsigned __int8 a3, unsigned __int8 a4, unsigned int a5, unsigned int a6, uint64_t a7, void *a8)
{
  if (!a1)
  {
    swift_release();
    __break(1u);
    goto LABEL_25;
  }

  int v10 = a4 ^ a3;
  if ((~v10 & 4) != 0)
  {
    uint64_t v12 = 0LL;
  }

  else
  {
    if ((~a4 & 4) != 0) {
      __int16 v11 = 2;
    }
    else {
      __int16 v11 = 1;
    }
    if ((a5 & 0x80000000) != 0) {
      goto LABEL_25;
    }
    a1->ident = a5;
    a1->filter = -1;
    a1->flags = v11;
    a1->fflags = 0;
    a1->data = 0LL;
    a1->udata = (void *)a6;
    uint64_t v12 = 1LL;
  }

  if ((~v10 & 8) == 0)
  {
    if ((~a4 & 8) != 0) {
      __int16 v13 = 2;
    }
    else {
      __int16 v13 = 1;
    }
    if ((a5 & 0x80000000) != 0) {
      goto LABEL_25;
    }
    a1[v12].ident = a5;
    __int16 v14 = &a1[v12];
    v14->filter = -2;
    v14->flags = v13;
    v14->fflags = 0;
    v14->data = 0LL;
    v14->udata = (void *)a6;
    ++v12;
  }

  if ((~v10 & 2) != 0) {
    goto LABEL_21;
  }
  if ((~a4 & 2) != 0) {
    __int16 v15 = 2;
  }
  else {
    __int16 v15 = 1;
  }
  if ((a5 & 0x80000000) != 0)
  {
LABEL_25:
    swift_release();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL);
    __break(1u);
    return result;
  }

  a1[v12].ident = a5;
  __int16 v16 = &a1[v12];
  v16->filter = -15;
  v16->flags = v15;
  v16->fflags = 1;
  v16->data = 0x7FFFFFFFFFFFFFFFLL;
  v16->udata = (void *)a6;
  ++v12;
LABEL_21:
  sub_1001264D4(a1, v12);
  uint64_t result = swift_release();
  if (v8) {
    *a8 = v8;
  }
  return result;
}

const kevent *sub_1001264D4(const kevent *result, uint64_t a2)
{
  if (a2 < 1) {
    return result;
  }
  if (!result)
  {
LABEL_12:
    __break(1u);
    return result;
  }

  if ((unint64_t)a2 >> 31)
  {
    __break(1u);
    goto LABEL_12;
  }

  uint64_t result = (const kevent *)sub_100171B58(*(_DWORD *)(v2 + 56), result, a2, 0LL, 0, 0LL);
  if (v3)
  {
    uint64_t v13 = v3;
    swift_errorRetain(v3);
    uint64_t v4 = sub_1000175B0(&qword_1002A9710);
    if ((swift_dynamicCast(&v10, &v13, v4, &type metadata for IOError, 0LL) & 1) != 0)
    {
      swift_errorRelease(v3);
      uint64_t v5 = v11;
      int v6 = v12;
      if (v12 == 4)
      {
        swift_bridgeObjectRelease(v11);
        return (const kevent *)swift_errorRelease(v13);
      }

      uint64_t v7 = v10;
      unint64_t v8 = sub_100025100();
      swift_allocError(&type metadata for IOError, v8, 0LL, 0LL);
      *(void *)uint64_t v9 = v7;
      *(void *)(v9 + 8) = v5;
      *(_DWORD *)(v9 + 16) = v6;
      swift_willThrow();
    }

    return (const kevent *)swift_errorRelease(v13);
  }

  return result;
}

void *NIOBSDSocket.OptionLevel.socket.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.OptionLevel.socket;
}

void *NIOBSDSocket.Option.so_error.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.Option.so_error;
}

void *NIOBSDSocket.AddressFamily.inet.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.AddressFamily.inet;
}

void *NIOBSDSocket.AddressFamily.inet6.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.AddressFamily.inet6;
}

void *NIOBSDSocket.ProtocolFamily.unix.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.ProtocolFamily.unix;
}

void *NIOBSDSocket.Option.so_reuseaddr.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.Option.so_reuseaddr;
}

void *NIOBSDSocket.ProtocolFamily.inet.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.ProtocolFamily.inet;
}

void *NIOBSDSocket.ProtocolFamily.inet6.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.ProtocolFamily.inet6;
}

void *NIOBSDSocket.AddressFamily.unix.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.AddressFamily.unix;
}

uint64_t sub_100126658(int a1, const char *a2, void *a3)
{
  uint64_t result = inet_pton(a1, a2, a3);
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 1) {
      return result;
    }
    int v4 = errno.getter();
  }

  else
  {
    int v4 = 22;
  }

  unint64_t v5 = sub_100025100();
  sub_1000252D0((uint64_t)&type metadata for IOError, v5);
  sub_1001269F8(v6, (uint64_t)"inet_pton(addressFamily:addressDescription:address:)");
  *(_DWORD *)(v7 + 16) = v4;
  return swift_willThrow(v8);
}

const char *sub_1001266CC(int a1, const void *a2, char *a3, socklen_t a4)
{
  int v4 = inet_ntop(a1, a2, a3, a4);
  if (!v4)
  {
    int v5 = errno.getter();
    unint64_t v6 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v6);
    sub_1001269F8(v7, (uint64_t)"inet_ntop(addressFamily:addressBytes:addressDescription:addressDescriptionLength:)");
    *(_DWORD *)(v8 + 16) = v5;
    swift_willThrow(v9);
  }

  return v4;
}

void *NIOBSDSocket.OptionLevel.ipv6.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.OptionLevel.ipv6;
}

void *NIOBSDSocket.Option.ipv6_v6only.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.Option.ipv6_v6only;
}

void *NIOBSDSocket.OptionLevel.tcp.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.OptionLevel.tcp;
}

void *NIOBSDSocket.Option.tcp_nodelay.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.Option.tcp_nodelay;
}

uint64_t sub_100126774()
{
  return sub_100185FA8(*v0);
}

void sub_10012677C(int a1)
{
}

uint64_t sub_100126784(uint64_t a1)
{
  return sub_1000B35B4(a1, *v1);
}

uint64_t static NIOBSDSocket.ProtocolFamily.inet6.getter()
{
  return 30LL;
}

void *NIOBSDSocket.ProtocolFamily.local.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.ProtocolFamily.local;
}

void *NIOBSDSocket.OptionLevel.ip.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.OptionLevel.ip;
}

uint64_t static NIOBSDSocket.OptionLevel.ipv6.getter()
{
  return 41LL;
}

uint64_t static NIOBSDSocket.OptionLevel.socket.getter()
{
  return 0xFFFFLL;
}

void *NIOBSDSocket.Option.ip_add_membership.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.Option.ip_add_membership;
}

void *NIOBSDSocket.Option.ip_drop_membership.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.Option.ip_drop_membership;
}

uint64_t static NIOBSDSocket.Option.ip_drop_membership.getter()
{
  return 13LL;
}

void *NIOBSDSocket.Option.ip_multicast_if.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.Option.ip_multicast_if;
}

void *NIOBSDSocket.Option.ip_multicast_loop.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.Option.ip_multicast_loop;
}

void *NIOBSDSocket.Option.ip_multicast_ttl.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.Option.ip_multicast_ttl;
}

uint64_t static NIOBSDSocket.Option.ipv6_multicast_hops.getter()
{
  return 10LL;
}

void *NIOBSDSocket.Option.ipv6_join_group.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.Option.ipv6_join_group;
}

void *NIOBSDSocket.Option.ipv6_leave_group.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.Option.ipv6_leave_group;
}

void *NIOBSDSocket.Option.ipv6_multicast_hops.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.Option.ipv6_multicast_hops;
}

void *NIOBSDSocket.Option.ipv6_multicast_if.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.Option.ipv6_multicast_if;
}

void *NIOBSDSocket.Option.ipv6_multicast_loop.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.Option.ipv6_multicast_loop;
}

void *NIOBSDSocket.Option.tcp_connection_info.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.Option.tcp_connection_info;
}

uint64_t static NIOBSDSocket.Option.tcp_connection_info.getter()
{
  return 262LL;
}

uint64_t static NIOBSDSocket.Option.so_error.getter()
{
  return 4103LL;
}

void *NIOBSDSocket.Option.so_keepalive.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.Option.so_keepalive;
}

void *NIOBSDSocket.Option.so_linger.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.Option.so_linger;
}

uint64_t static NIOBSDSocket.Option.so_linger.getter()
{
  return 128LL;
}

void *NIOBSDSocket.Option.so_rcvbuf.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.Option.so_rcvbuf;
}

uint64_t static NIOBSDSocket.Option.so_rcvbuf.getter()
{
  return 4098LL;
}

void *NIOBSDSocket.Option.so_rcvtimeo.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.Option.so_rcvtimeo;
}

uint64_t static NIOBSDSocket.Option.so_rcvtimeo.getter()
{
  return 4102LL;
}

void *NIOBSDSocket.Option.so_timestamp.unsafeMutableAddressor()
{
  return &static NIOBSDSocket.Option.so_timestamp;
}

uint64_t static NIOBSDSocket.Option.so_timestamp.getter()
{
  return 1024LL;
}

unint64_t sub_1001268C0()
{
  unint64_t result = qword_1002B39D8;
  if (!qword_1002B39D8)
  {
    unint64_t result = swift_getWitnessTable( protocol conformance descriptor for NIOBSDSocket.AddressFamily,  &type metadata for NIOBSDSocket.AddressFamily);
    atomic_store(result, (unint64_t *)&qword_1002B39D8);
  }

  return result;
}

unint64_t sub_100126900()
{
  unint64_t result = qword_1002B39E0;
  if (!qword_1002B39E0)
  {
    unint64_t result = swift_getWitnessTable("eP\b", &type metadata for NIOBSDSocket.ProtocolFamily);
    atomic_store(result, (unint64_t *)&qword_1002B39E0);
  }

  return result;
}

unint64_t sub_100126940()
{
  unint64_t result = qword_1002B39E8;
  if (!qword_1002B39E8)
  {
    unint64_t result = swift_getWitnessTable( protocol conformance descriptor for NIOBSDSocket.OptionLevel,  &type metadata for NIOBSDSocket.OptionLevel);
    atomic_store(result, (unint64_t *)&qword_1002B39E8);
  }

  return result;
}

unint64_t sub_100126980()
{
  unint64_t result = qword_1002B39F0[0];
  if (!qword_1002B39F0[0])
  {
    unint64_t result = swift_getWitnessTable("%O\b", &type metadata for NIOBSDSocket.Option);
    atomic_store(result, qword_1002B39F0);
  }

  return result;
}

void type metadata accessor for NIOBSDSocket()
{
}

void type metadata accessor for NIOBSDSocket.AddressFamily()
{
}

void type metadata accessor for NIOBSDSocket.ProtocolFamily()
{
}

void type metadata accessor for NIOBSDSocket.OptionLevel()
{
}

void type metadata accessor for NIOBSDSocket.Option()
{
}

void sub_1001269F8(unint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  *a1 = v2 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
  a1[1] = (a2 - 32) | 0x8000000000000000LL;
}

uint64_t sub_100126A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 48LL);
}

uint64_t sub_100126A14(uint64_t a1)
{
  v4[0] = &unk_100201E88;
  v4[1] = &unk_100201E88;
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 24));
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 0LL, 3LL, v4, a1 + 48);
    return 0LL;
  }

  return result;
}

uint64_t *sub_100126A8C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 32) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain(v9);
  }

  else
  {
    uint64_t v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    uint64_t v11 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    int v12 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    *uint64_t v11 = *v12;
    uint64_t v13 = v12[1];
    v11[1] = v13;
    uint64_t v14 = ((unint64_t)v11 + v6 + 16) & ~v6;
    uint64_t v15 = ((unint64_t)v12 + v6 + 16) & ~v6;
    __int16 v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v13);
    v16(v14, v15, v4);
  }

  return a1;
}

uint64_t sub_100126B78(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (a1 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  swift_bridgeObjectRelease(*(void *)(v4 + 8));
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 24) - 8LL) + 8LL))((v4 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8LL) + 80LL) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8LL) + 80LL));
}

void *sub_100126BCC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v6 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v5 = *v6;
  uint64_t v7 = v6[1];
  v5[1] = v7;
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = ((unint64_t)v5 + v10 + 16) & ~v10;
  uint64_t v12 = ((unint64_t)v6 + v10 + 16) & ~v10;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v7);
  v13(v11, v12, v8);
  return a1;
}

void *sub_100126C64(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v9 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v8 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v12 + 24))( ((unint64_t)v8 + *(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80),  ((unint64_t)v9 + *(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

_OWORD *sub_100126D14(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v5 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))( ((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80),  ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

void *sub_100126D7C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v9 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v8 = *v9;
  uint64_t v10 = v8[1];
  v8[1] = v9[1];
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v11 + 40))( ((unint64_t)v8 + *(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80),  ((unint64_t)v9 + *(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t sub_100126E0C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  int v9 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_22;
  }
  uint64_t v10 = ((v8 + 32) & ~v8) + *(void *)(v5 + 64);
  char v11 = 8 * v10;
  if (v10 <= 3)
  {
    unsigned int v14 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      int v12 = *(_DWORD *)(a1 + v10);
      if (!v12) {
        goto LABEL_22;
      }
      goto LABEL_15;
    }

    if (v14 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)(a1 + v10);
      if (!*(_WORD *)(a1 + v10)) {
        goto LABEL_22;
      }
      goto LABEL_15;
    }

    if (v14 < 2)
    {
LABEL_22:
      if ((v6 & 0x80000000) != 0) {
        return sub_10001D158((((a1 + 23) & 0xFFFFFFFFFFFFFFF8LL) + v8 + 16) & ~v8, v6, v4);
      }
      unint64_t v16 = *(void *)(a1 + 8);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
  }

  int v12 = *(unsigned __int8 *)(a1 + v10);
  if (!*(_BYTE *)(a1 + v10)) {
    goto LABEL_22;
  }
LABEL_15:
  int v15 = (v12 - 1) << v11;
  if (!(_DWORD)v10) {
    return v7 + v15 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_100126EE0 + 4 * byte_100201E50[(v10 - 1)]))();
}

void sub_100126F54(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  char v8 = 8 * v7;
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      unsigned int v11 = ((a3 - v6 + ~(-1 << v8)) >> v8) + 1;
      if (HIWORD(v11))
      {
        unsigned int v9 = &dword_100000004;
      }

      else if (v11 >= 0x100)
      {
        unsigned int v9 = 2;
      }

      else
      {
        unsigned int v9 = v11 > 1;
      }
    }

    else
    {
      unsigned int v9 = &_mh_execute_header.magic + 1;
    }
  }

  else
  {
    unsigned int v9 = 0;
  }

  if (v6 < a2)
  {
    int v10 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        int v12 = v10 & ~(-1 << v8);
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }

        else if ((_DWORD)v7 == 2)
        {
          *a1 = v12;
        }

        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }

    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X12 }

uint64_t type metadata accessor for AppStoreConnectResponse.Item(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for AppStoreConnectResponse.Item);
}

uint64_t sub_100127158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32LL);
}

uint64_t sub_100127160(void *a1)
{
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t sub_100127190(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v6 = a2[2];
  uint64_t v5 = a2[3];
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v5;
  uint64_t v7 = a2[4];
  *(void *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 4sub_1001A93A0(0LL, 0) = *(_OWORD *)(a2 + 5);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t *sub_1001271EC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[5] = a2[5];
  a1[6] = a2[6];
  return a1;
}

uint64_t *sub_100127280(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a2[2];
  uint64_t v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a2[4];
  uint64_t v8 = a1[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease(v8);
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
  return a1;
}

uint64_t getEnumTagSinglePayload for PendingDatagramWritesState(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PendingDatagramWritesState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 4sub_1001A93A0(0LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata accessor for AppStoreConnectResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AppStoreConnectResponse);
}

uint64_t sub_100127374(uint64_t a1, unint64_t a2)
{
  if (a1 == 1635017060 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1635017060LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x736B6E696CLL && a2 == 0xE500000000000000LL)
  {
    unint64_t v8 = 0xE500000000000000LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736B6E696CLL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 1635018093 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    return 2LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(1635018093LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_100127494(char a1)
{
  uint64_t result = 1635017060LL;
  if (a1)
  {
    if (a1 == 1) {
      return 0x736B6E696CLL;
    }
    else {
      return 1635018093LL;
    }
  }

  return result;
}

void sub_1001274D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  unint64_t v58 = v20;
  uint64_t v59 = v21;
  BOOL v26 = v25;
  uint64_t v28 = *(void *)(v27 + 16);
  uint64_t v29 = *(void *)(v27 + 24);
  uint64_t v31 = type metadata accessor for AppStoreConnectResponse.CodingKeys(255LL, v28, v29, v30);
  uint64_t WitnessTable = swift_getWitnessTable("AO\b", v31);
  uint64_t v33 = sub_100128A5C(WitnessTable);
  uint64_t v57 = *(void *)(v33 - 8);
  sub_100067F88();
  __chkstk_darwin(v34);
  uint64_t v36 = (char *)&v57 - v35;
  uint64_t v38 = v26[3];
  uint64_t v37 = v26[4];
  sub_100019F58(v26, v38);
  uint64_t v39 = v22;
  unint64_t v40 = v58;
  dispatch thunk of Encoder.container<A>(keyedBy:)(v31, v31, v39, v38, v37);
  a10 = *v40;
  char v63 = 0;
  *(void *)&__int128 v61 = v28;
  *((void *)&v61 + sub_1001A93A0(v0, 1) = v28;
  *(void *)&__int128 v62 = v29;
  *((void *)&v62 + sub_1001A93A0(v0, 1) = v29;
  uint64_t v41 = type metadata accessor for AppStoreConnectResponse.Item(255LL, (uint64_t)&v61);
  uint64_t v42 = type metadata accessor for Array(0LL, v41);
  uint64_t v60 = sub_100128A84(byte_100201F10);
  uint64_t v43 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v42, &v60);
  uint64_t v44 = v59;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&a10, &v63, v33, v42, v43);
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v57 + 8))(v36, v33);
  }

  else
  {
    uint64_t v45 = v57;
    __int128 v46 = *(_OWORD *)(v40 + 3);
    __int128 v61 = *(_OWORD *)(v40 + 1);
    __int128 v62 = v46;
    uint64_t v47 = sub_100128A8C(1);
    type metadata accessor for AppStoreConnectResponse.Links(v47, v48, v49, v50);
    uint64_t v51 = sub_100128A84(byte_1002021C8);
    sub_100128A28(v51);
    __int128 v61 = *(_OWORD *)(v40 + 5);
    uint64_t v52 = sub_100128A8C(2);
    type metadata accessor for AppStoreConnectResponse.Meta(v52, v53, v54, v55);
    uint64_t v56 = sub_100128A84(")O\b");
    sub_100128A28(v56);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v36, v33);
  }

  sub_10001DAB8();
}

uint64_t sub_10012769C()
{
  return sub_100127494(*v0);
}

uint64_t sub_1001276A8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100127374(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001276D4()
{
  return variable initialization expression of MarkedCircularBuffer._markedIndexOffset();
}

uint64_t sub_1001276F4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = static NIOHTTPObjectAggregatorError.unexpectedMessageHead.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100127720(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable("AO\b", a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_100127754(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable("AO\b", a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

#error "100127790: call analysis failed (funcsize=5)"
uint64_t sub_10012779C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  char v10;
  if (a1 == 1701869940 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 25705 && a2 == 0xE200000000000000LL)
  {
    unint64_t v8 = 0xE200000000000000LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705LL, 0xE200000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x7475626972747461LL && a2 == 0xEA00000000007365LL)
  {
    swift_bridgeObjectRelease(0xEA00000000007365LL);
    return 2LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7475626972747461LL, 0xEA00000000007365LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_1001278CC(char a1)
{
  if (!a1) {
    return 1701869940LL;
  }
  if (a1 == 1) {
    return 25705LL;
  }
  return 0x7475626972747461LL;
}

void sub_100127914()
{
  uint64_t v28 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 40);
  uint64_t v29 = *(void *)(v3 + 16);
  __int128 v26 = *(_OWORD *)(v3 + 24);
  __int128 v30 = v26;
  uint64_t v27 = v7;
  uint64_t v31 = v7;
  uint64_t v8 = type metadata accessor for AppStoreConnectResponse.Item.CodingKeys(255LL, (uint64_t)&v29);
  uint64_t WitnessTable = swift_getWitnessTable(byte_100202150, v8);
  uint64_t v10 = sub_100128A5C(WitnessTable);
  uint64_t v11 = *(void *)(v10 - 8);
  sub_100067F88();
  __chkstk_darwin(v12);
  unsigned int v14 = (char *)&v26 - v13;
  uint64_t v15 = v6[3];
  uint64_t v16 = v6[4];
  sub_100019F58(v6, v15);
  uint64_t v17 = v8;
  uint64_t v18 = v8;
  uint64_t v19 = v28;
  dispatch thunk of Encoder.container<A>(keyedBy:)(v17, v18, v2, v15, v16);
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  LOBYTE(v29) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v29, v10);
  if (!v1)
  {
    uint64_t v22 = v27;
    uint64_t v23 = v19[2];
    uint64_t v24 = v19[3];
    LOBYTE(v29) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v23, v24, &v29, v10);
    uint64_t v25 = (char *)v19 + *(int *)(v4 + 56);
    LOBYTE(v29) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v29, v10, v26, v22);
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  sub_10001DAB8();
}

uint64_t sub_100127A80(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002732C8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100127AD4(char a1)
{
  if ((a1 & 1) != 0) {
    return 1954047342LL;
  }
  else {
    return 1718379891LL;
  }
}

void sub_100127AF4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  a22 = v25;
  a23 = v26;
  uint64_t v48 = v27;
  uint64_t v49 = v24;
  uint64_t v46 = v28;
  uint64_t v47 = v29;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v36 = type metadata accessor for AppStoreConnectResponse.Links.CodingKeys(255LL, v34, v35, v28);
  uint64_t WitnessTable = swift_getWitnessTable(byte_1002024A8, v36);
  uint64_t v38 = sub_100128A48(WitnessTable);
  uint64_t v39 = *(void *)(v38 - 8);
  sub_100067F88();
  __chkstk_darwin(v40);
  uint64_t v42 = (char *)&v46 - v41;
  uint64_t v43 = v33[3];
  uint64_t v44 = v33[4];
  sub_100019F58(v33, v43);
  dispatch thunk of Encoder.container<A>(keyedBy:)(v36, v36, v23, v43, v44);
  a13 = 0;
  uint64_t v45 = v49;
  KeyedEncodingContainer.encode(_:forKey:)(v31, v48, &a13, v38);
  if (!v45)
  {
    a12 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v46, v47, &a12, v38);
  }

  (*(void (**)(char *, uint64_t))(v39 + 8))(v42, v38);
  sub_10001DAB8();
}

uint64_t sub_100127C04(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x676E69676170LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x676E69676170LL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

uint64_t sub_100127C80()
{
  return 0x676E69676170LL;
}

void sub_100127C94()
{
  uint64_t v25 = v3;
  uint64_t v26 = v2;
  uint64_t v5 = v4;
  uint64_t v27 = v6;
  uint64_t v7 = sub_100128A70();
  uint64_t v11 = type metadata accessor for AppStoreConnectResponse.Meta.CodingKeys(v7, v8, v9, v10);
  uint64_t WitnessTable = swift_getWitnessTable(byte_100202458, v11);
  uint64_t v13 = sub_100128A48(WitnessTable);
  uint64_t v14 = *(void *)(v13 - 8);
  sub_100067F88();
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v24 - v16;
  uint64_t v18 = v1[3];
  uint64_t v19 = v1[4];
  sub_100019F58(v1, v18);
  dispatch thunk of Encoder.container<A>(keyedBy:)(v11, v11, v0, v18, v19);
  v28[0] = v26;
  v28[1] = v27;
  uint64_t v21 = type metadata accessor for AppStoreConnectResponse.Meta.Paging(0LL, v5, v25, v20);
  uint64_t v22 = swift_getWitnessTable(byte_100202430, v21);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v28, v23, v13, v21, v22);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  sub_10001DAB8();
}

uint64_t sub_100127DA0(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6C61746F74LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v5 = 0xE500000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C61746F74LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x74696D696CLL && a2 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease(0xE500000000000000LL);
    return 1LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74696D696CLL, 0xE500000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_100127E84(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x74696D696CLL;
  }
  else {
    return 0x6C61746F74LL;
  }
}

void sub_100127EAC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  a22 = v25;
  a23 = v26;
  uint64_t v44 = v27;
  uint64_t v45 = v24;
  uint64_t v29 = v28;
  uint64_t v30 = sub_100128A70();
  uint64_t v34 = type metadata accessor for AppStoreConnectResponse.Meta.Paging.CodingKeys(v30, v31, v32, v33);
  uint64_t WitnessTable = swift_getWitnessTable("qK\b", v34);
  uint64_t v36 = type metadata accessor for KeyedEncodingContainer(0LL, v34, WitnessTable);
  uint64_t v37 = *(void *)(v36 - 8);
  sub_100067F88();
  __chkstk_darwin(v38);
  uint64_t v40 = (char *)&v44 - v39;
  uint64_t v42 = v23[3];
  uint64_t v41 = v23[4];
  sub_100019F58(v23, v42);
  dispatch thunk of Encoder.container<A>(keyedBy:)(v34, v34, WitnessTable, v42, v41);
  a13 = 0;
  uint64_t v43 = v45;
  KeyedEncodingContainer.encode(_:forKey:)(v29, &a13, v36);
  if (!v43)
  {
    a12 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v44, &a12, v36);
  }

  (*(void (**)(char *, uint64_t))(v37 + 8))(v40, v36);
  sub_10001DAB8();
}

BOOL sub_100127FBC(char *a1, char *a2)
{
  return static CloseMode.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_100127FD4()
{
  return CloseMode.hashValue.getter(*v0);
}

void sub_100127FE4(uint64_t a1)
{
}

Swift::Int sub_100127FF4()
{
  return Hasher._finalize()();
}

uint64_t sub_10012803C()
{
  return sub_1001278CC(*v0);
}

uint64_t sub_10012804C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10012779C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10012807C()
{
  return variable initialization expression of MarkedCircularBuffer._markedIndexOffset();
}

uint64_t sub_1001280A0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = static NIOHTTPObjectAggregatorError.unexpectedMessageHead.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1001280D0(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(byte_100202150, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_100128104(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(byte_100202150, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

void sub_100128138()
{
}

uint64_t type metadata accessor for AppStoreConnectResponse.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AppStoreConnectResponse.CodingKeys);
}

uint64_t type metadata accessor for AppStoreConnectResponse.Links( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AppStoreConnectResponse.Links);
}

uint64_t type metadata accessor for AppStoreConnectResponse.Meta( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AppStoreConnectResponse.Meta);
}

uint64_t type metadata accessor for AppStoreConnectResponse.Item.CodingKeys(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for AppStoreConnectResponse.Item.CodingKeys);
}

uint64_t sub_100128180(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1001281CC + 4 * byte_100201E63[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100128200 + 4 * byte_100201E5E[v4]))();
}

uint64_t sub_100128200(uint64_t result)
{
  *(_BYTE *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_100128208(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x100128210LL);
  }
  return result;
}

uint64_t sub_10012821C(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x100128224LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100128228(uint64_t result)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_100128230(uint64_t result)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_10012823C(uint64_t a1)
{
  return swift_getWitnessTable(byte_100202070, a1);
}

uint64_t sub_10012824C(uint64_t a1)
{
  return swift_getWitnessTable(byte_100202128, a1);
}

uint64_t sub_10012825C(uint64_t a1)
{
  return swift_getWitnessTable("AP\b", a1);
}

uint64_t sub_10012826C(uint64_t a1)
{
  return swift_getWitnessTable(")P\b", a1);
}

uint64_t sub_10012827C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(byte_1002022D8, a3);
  return == infix<A>(_:_:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_1001282D0(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(byte_1002022D8, a1);
  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, &protocol witness table for String);
}

uint64_t sub_10012831C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(byte_1002022D8);
  return RawRepresentable<>.hash(into:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_10012836C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(byte_1002022D8);
  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_1001283BC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  int v3 = (void *)a1[1];
  v5._uint64_t countAndFlagsBits = *a1;
  v5._object = v3;
  uint64_t result = sub_100127A80(v5);
  *a2 = result;
  return result;
}

uint64_t sub_1001283F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100127AD4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100128420()
{
  return sub_100127AD4(*v0);
}

uint64_t sub_100128430@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100127AD0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10012845C(uint64_t a1, uint64_t a2)
{
  return sub_100128810( a1,  a2,  (uint64_t (*)(void, void, void))j___s25ASOctaneSupportXPCService20MarkedCircularBufferV18_markedIndexOffsetSiSgvpfi);
}

uint64_t sub_100128468(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(byte_1002024A8, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_10012849C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(byte_1002024A8, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

#error "1001284E8: call analysis failed (funcsize=9)"
uint64_t sub_1001284F4()
{
  return static System.hasAsyncAwaitSupport.getter();
}

Swift::Int sub_1001284FC()
{
  return NonBlockingFileIO.Error.hashValue.getter();
}

void sub_100128508()
{
}

Swift::Int sub_100128514()
{
  return Hasher._finalize()();
}

uint64_t sub_100128554()
{
  return sub_100127C80();
}

uint64_t sub_100128560@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100127C04(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100128590()
{
  return variable initialization expression of MarkedCircularBuffer._markedIndexOffset();
}

uint64_t sub_1001285B0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = static System.hasAsyncAwaitSupport.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1001285E0(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(byte_100202458, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_100128614(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(byte_100202458, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

void sub_100128648()
{
}

uint64_t sub_100128668(uint64_t a1)
{
  return swift_getWitnessTable(byte_100201FE0, a1);
}

uint64_t sub_100128678(uint64_t a1)
{
  return swift_getWitnessTable(byte_100202008, a1);
}

uint64_t type metadata accessor for AppStoreConnectResponse.Links.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AppStoreConnectResponse.Links.CodingKeys);
}

uint64_t type metadata accessor for AppStoreConnectResponse.Meta.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AppStoreConnectResponse.Meta.CodingKeys);
}

uint64_t type metadata accessor for AppStoreConnectResponse.Meta.Paging( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AppStoreConnectResponse.Meta.Paging);
}

uint64_t sub_1001286AC(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1001286EC + 4 * byte_100201E68[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10012870C + 4 * byte_100201E6D[v4]))();
  }
}

_BYTE *sub_1001286EC(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_10012870C(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_100128714(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10012871C(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_100128724(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10012872C(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_10012873C(uint64_t a1)
{
  return swift_getWitnessTable(byte_100202350, a1);
}

uint64_t sub_10012874C(uint64_t a1)
{
  return swift_getWitnessTable(byte_100202408, a1);
}

BOOL sub_10012875C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static NIOHTTPObjectAggregatorEvent.__derived_struct_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_100128770()
{
  return ChannelPipelineError.hashValue.getter(*v0);
}

void sub_100128780(uint64_t a1)
{
}

Swift::Int sub_100128790()
{
  return Hasher._finalize()();
}

uint64_t sub_1001287D4()
{
  return sub_100127E84(*v0);
}

uint64_t sub_1001287E4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100127DA0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100128810(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void))
{
  return a3(*v3, *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t sub_100128838@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = static NIOHTTPObjectAggregatorError.endingIgnoredMessage.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100128864(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable("qK\b", a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_100128898(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable("qK\b", a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

#error "1001288E0: call analysis failed (funcsize=8)"
uint64_t sub_1001288EC(uint64_t a1)
{
  return swift_getWitnessTable("aM\b", a1);
}

uint64_t sub_1001288FC(uint64_t a1)
{
  return swift_getWitnessTable("IM\b", a1);
}

uint64_t sub_10012890C(uint64_t a1)
{
  return swift_getWitnessTable("QN\b", a1);
}

uint64_t sub_10012891C(uint64_t a1)
{
  return swift_getWitnessTable("9N\b", a1);
}

uint64_t type metadata accessor for AppStoreConnectResponse.Meta.Paging.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for AppStoreConnectResponse.Meta.Paging.CodingKeys);
}

uint64_t sub_100128938(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100128984 + 4 * byte_100201E77[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001289B8 + 4 * byte_100201E72[v4]))();
}

uint64_t sub_1001289B8(uint64_t result)
{
  *(_BYTE *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_1001289C0(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x1001289C8LL);
  }
  return result;
}

uint64_t sub_1001289D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001289DCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1001289E0(uint64_t result)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_1001289E8(uint64_t result)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_1001289F4(uint64_t a1)
{
  return swift_getWitnessTable(byte_100202598, a1);
}

uint64_t sub_100128A04(uint64_t a1)
{
  return swift_getWitnessTable(byte_100202508, a1);
}

uint64_t sub_100128A14(uint64_t a1)
{
  return swift_getWitnessTable(byte_100202530, a1);
}

uint64_t sub_100128A28(uint64_t a1)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 128, v3 - 72, v2, v1, a1);
}

uint64_t sub_100128A48(uint64_t a1)
{
  return type metadata accessor for KeyedEncodingContainer(0LL, v1, a1);
}

uint64_t sub_100128A5C(uint64_t a1)
{
  return type metadata accessor for KeyedEncodingContainer(0LL, v1, a1);
}

uint64_t sub_100128A70()
{
  return 255LL;
}

uint64_t sub_100128A84(const char *a1)
{
  return swift_getWitnessTable(a1, v1);
}

uint64_t sub_100128A8C@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v1 - 72) = a1;
  return 0LL;
}

void sub_100128AA0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v5)
  {
    while (1)
    {
      uint64_t v18 = _swiftEmptyArrayStorage;
      sub_100032354();
      if (v5 < 0) {
        break;
      }
      uint64_t v6 = 0LL;
      uint64_t v7 = v18;
      while (v5 != v6)
      {
        if ((a1 & 0xC000000000000001LL) != 0)
        {
          uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
        }

        else
        {
          uint64_t v8 = *(void *)(a1 + 8 * v6 + 32);
          swift_retain();
        }

        sub_100129C70(v8, a3, (uint64_t)a4, (uint64_t *)v17);
        swift_release();
        uint64_t v18 = v7;
        unint64_t v9 = v7[2];
        if (v9 >= v7[3] >> 1)
        {
          sub_100032354();
          uint64_t v7 = v18;
        }

        ++v6;
        _OWORD v7[2] = v9 + 1;
        uint64_t v10 = &v7[8 * v9];
        __int128 v11 = v17[0];
        __int128 v12 = v17[1];
        __int128 v13 = v17[3];
        v10[4] = v17[2];
        v10[5] = v13;
        v10[2] = v11;
        void v10[3] = v12;
        if (v5 == v6) {
          goto LABEL_18;
        }
      }

      __break(1u);
LABEL_14:
      if (a1 < 0) {
        uint64_t v14 = a1;
      }
      else {
        uint64_t v14 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v14);
      swift_bridgeObjectRelease();
      if (!v5) {
        goto LABEL_18;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_18:
    swift_release();
    swift_release();
    sub_10001B4DC(a4);
  }

void *sub_100128C4C()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = (void *)v1;
  if (v1 == 1)
  {
    uint64_t v2 = sub_1000A4EA8(0xD000000000000013LL, 0x800000010021DD20LL, 1819112552LL, 0xE400000000000000LL);
    uint64_t v3 = *(void *)(v0 + 128);
    *(void *)(v0 + 128) = v2;
    *(void *)(v0 + 136) = v4;
    swift_bridgeObjectRetain();
    sub_10001E95C(v3);
  }

  sub_10001E9A0(v1);
  return v2;
}

void sub_100128CEC(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t inited = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10001DAD0();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  uint64_t v10 = __chkstk_darwin(v9);
  __int128 v12 = (char *)&v150 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v150 - v13;
  uint64_t v15 = type metadata accessor for DateComponents(0LL);
  unint64_t v169 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  sub_10001DAD0();
  uint64_t v168 = v17 - v16;
  sub_10012A314(0x444970756F7267LL, 0xE700000000000000LL, a1[12]);
  if (!v19) {
    goto LABEL_27;
  }
  uint64_t v20 = v18;
  uint64_t v21 = v19;
  uint64_t v166 = v15;
  uint64_t v167 = v12;
  uint64_t v22 = sub_1001BCBC8();
  LODWORD(asub_1001A93A0(v0, 1) = v22;
  sub_10012A314(7368801LL, 0xE300000000000000LL, v22);
  uint64_t v24 = v23;
  uint64_t v15 = v25;
  sub_10001EDA0();
  if (!v15)
  {
    sub_10001DC10();
LABEL_27:
    sub_10001ED94();
    uint64_t v54 = sub_100049C88();
    sub_10001ED7C(v54);
    *(double *)&__int128 v56 = sub_100020050();
    uint64_t v34 = _swiftEmptyArrayStorage;
    uint64_t v57 = 21LL;
    goto LABEL_38;
  }

  unsigned __int16 v163 = v14;
  uint64_t v161 = v8;
  uint64_t v26 = v170;
  sub_100019F58(v170 + 6, v170[9]);
  sub_100075EE8(v24, v15);
  a1 = v27;
  sub_1000D8854(v20, v21);
  if (!v28)
  {
    swift_release();
    sub_10001DC10();
    sub_10001A420();
    sub_10001ED94();
    uint64_t v58 = sub_100049C88();
    sub_10001ED7C(v58);
    *(double *)&__int128 v56 = sub_100020050();
    uint64_t v34 = _swiftEmptyArrayStorage;
    uint64_t v57 = 25LL;
    goto LABEL_38;
  }

  object = v26 + 6;
  uint64_t v165 = v28;
  uint64_t v29 = (uint64_t)a1;
  uint64_t v157 = inited;
  uint64_t v158 = v4;
  uint64_t v30 = sub_100019F58(v26 + 11, v26[14]);
  uint64_t v31 = sub_1000175B0(&qword_1002A9098);
  uint64_t inited = swift_initStackObject(v31, v173);
  __int128 v162 = xmmword_1001F3C00;
  *(_OWORD *)(inited + 16) = xmmword_1001F3C00;
  *(void *)(inited + 32) = v20;
  *(void *)(inited + 4sub_1001A93A0(0LL, 0) = v21;
  uint64_t v32 = *v30;
  swift_retain();
  sub_100077D1C();
  sub_100023E9C();
  uint64_t v164 = v24;
  uint64_t v33 = v24;
  uint64_t v34 = 0LL;
  sub_1000D962C(inited, v32, v33, v15);
  uint64_t v4 = v35;
  swift_setDeallocating(inited);
  sub_1001B7630();
  if ((unint64_t)v4 >> 62)
  {
LABEL_61:
    if (v4 < 0) {
      uint64_t v147 = v4;
    }
    else {
      uint64_t v147 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter(v147);
    sub_100023EEC();
  }

  else
  {
    uint64_t v36 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v37 = v29;
  uint64_t v38 = v165;
  if (!v36)
  {
    sub_100023EEC();
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v59 = type metadata accessor for Logger(0LL);
    sub_100018F68(v59, (uint64_t)qword_1002EB9D0);
    sub_10012A2CC();
    uint64_t v60 = sub_100023E9C();
    a1 = (uint64_t *)Logger.logObject.getter(v60);
    os_log_type_t v62 = static os_log_type_t.error.getter(a1, v61);
    uint64_t v4 = v62;
    if (os_log_type_enabled((os_log_t)a1, v62))
    {
      uint64_t v34 = (void *)sub_100019464(22LL);
      *(void *)&__int128 v171 = sub_100019464(64LL);
      uint64_t v174 = v171;
      *(_DWORD *)uint64_t v34 = 136315394;
      sub_100023E9C();
      *(void *)&__int128 v176 = sub_1000CF360(v20, v21, &v174);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, (char *)&v176 + 8, (char *)v34 + 4);
      swift_bridgeObjectRelease_n(v21, 3LL);
      *((_WORD *)v34 + 6) = 2080;
      uint64_t inited = (uint64_t)v34 + 14;
      sub_100077D1C();
      uint64_t v63 = v164;
      *(void *)&__int128 v176 = sub_1000CF360(v164, v15, &v174);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, (char *)&v176 + 8, (char *)v34 + 14);
      sub_10012A2E4();
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)a1,  (os_log_type_t)v4,  "no transaction for %s and %s",  (uint8_t *)v34,  0x16u);
      uint64_t v4 = v171;
      swift_arrayDestroy(v171, 2LL);
      sub_10001A408(v4);
      sub_10001A408((uint64_t)v34);
    }

    else
    {

      sub_10012A2C0();
      swift_bridgeObjectRelease_n(v21, 2LL);
      uint64_t v63 = v164;
    }

    uint64_t v64 = sub_1000175B0(&qword_1002A92A8);
    uint64_t v65 = sub_100019310(v64, 64LL);
    sub_10012A284(v65);
    swift_bridgeObjectRelease();
    uint64_t v174 = 0xD000000000000018LL;
    unint64_t v175 = 0x800000010021DD00LL;
    v66._uint64_t countAndFlagsBits = v63;
    v66._object = (void *)v15;
    String.append(_:)(v66);
    sub_10001A420();
    unint64_t v67 = v175;
    v34[6] = v174;
    v34[7] = v67;
    goto LABEL_37;
  }

  uint64_t v155 = v34;
  uint64_t v159 = v37;
  sub_100119E64(0LL, (v4 & 0xC000000000000001LL) == 0, v4);
  uint64_t v34 = (void *)v15;
  if ((v4 & 0xC000000000000001LL) != 0) {
    id v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v4);
  }
  else {
    id v39 = *(id *)(v4 + 32);
  }
  uint64_t v40 = v39;
  sub_10001DC10();
  sub_100023EEC();
  uint64_t v15 = v38[7];
  *(void *)&__int128 v171 = v40;
  uint64_t v160 = a2;
  if (!((unint64_t)v15 >> 62))
  {
    uint64_t v4 = *(void *)((v15 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    sub_10012A2CC();
    id v41 = v40;
    if (v4) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }

  if (v15 < 0) {
    uint64_t v148 = v15;
  }
  else {
    uint64_t v148 = v15 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_10012A2CC();
  id v149 = v40;
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v148);
  if (!v4)
  {
LABEL_22:
    uint64_t v46 = (void *)v171;

    sub_10012A2C0();
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v47 = type metadata accessor for Logger(0LL);
    LODWORD(asub_1001A93A0(v0, 1) = sub_100018F68(v47, (uint64_t)qword_1002EB9D0);
    uint64_t v15 = (uint64_t)v34;
    swift_bridgeObjectRetain_n(v34, 2LL);
    uint64_t v4 = v46;
    uint64_t v34 = (void *)Logger.logObject.getter(v4);
    os_log_type_t v49 = static os_log_type_t.error.getter(v34, v48);
    if (os_log_type_enabled((os_log_t)v34, v49))
    {
      uint64_t inited = sub_100019464(22LL);
      uint64_t v50 = sub_100019464(64LL);
      uint64_t v174 = v50;
      *(_DWORD *)uint64_t inited = 136315394;
      uint64_t v51 = sub_1000B3DDC();
      *(void *)&__int128 v176 = sub_1000CF360(v51, v52, &v174);
      a2 = (char *)&v176 + 8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, (char *)&v176 + 8, inited + 4);

      sub_10001EDA0();
      *(_WORD *)(inited + 12) = 2080;
      LODWORD(asub_1001A93A0(v0, 1) = inited + 14;
      sub_1000931C8();
      uint64_t v53 = v164;
      *(void *)&__int128 v176 = sub_1000CF360(v164, v15, &v174);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, (char *)&v176 + 8, inited + 14);
      sub_10012A2E4();
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v34,  v49,  "no subscription for %s and %s",  (uint8_t *)inited,  0x16u);
      swift_arrayDestroy(v50, 2LL);
      sub_10001A408(v50);
      sub_10001A408(inited);

      sub_10012A2F0();
    }

    else
    {

      sub_10012A2C0();
      sub_10012A2F0();
      uint64_t v53 = v164;
    }

    uint64_t v68 = sub_1000175B0(&qword_1002A92A8);
    uint64_t v69 = sub_100019310(v68, 64LL);
    sub_10012A284(v69);
    swift_bridgeObjectRelease();
    uint64_t v174 = 0xD000000000000018LL;
    unint64_t v175 = 0x800000010021DD00LL;
    v70._uint64_t countAndFlagsBits = v53;
    v70._object = (void *)v15;
    String.append(_:)(v70);
    sub_10001A420();
    unint64_t v71 = v175;
    v34[6] = v174;
    v34[7] = v71;

LABEL_37:
    swift_release();
    swift_release();
    sub_10001ED94();
    uint64_t v72 = sub_100049C88();
    sub_10001ED7C(v72);
    *(double *)&__int128 v56 = sub_100020050();
    uint64_t v57 = 16LL;
    goto LABEL_38;
  }

void sub_100129C70(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = type metadata accessor for DateComponents(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10001DAD0();
  uint64_t v11 = v10 - v9;
  uint64_t v29 = sub_100129DFC();
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(a1 + 176);
  char v15 = *(_BYTE *)(a1 + 184);
  id v16 = [objc_allocWithZone(NSDateComponentsFormatter) init];
  [v16 setUnitsStyle:3];
  [v16 setAllowedUnits:4124];
  sub_1001BE220(v14, v15);
  Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
  id v18 = [v16 stringFromDateComponents:isa];

  if (v18)
  {
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    unint64_t v21 = v20;
  }

  else
  {

    uint64_t v19 = 0LL;
    unint64_t v21 = 0xE000000000000000LL;
  }

  uint64_t v22 = *(void *)(a1 + 16);
  uint64_t v23 = *(void *)(a1 + 24);
  swift_bridgeObjectRetain();
  uint64_t v24 = sub_100043978(v22, v23, a3, a2);
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = *(void *)(a1 + 80);
  uint64_t v28 = swift_bridgeObjectRetain();
  *a4 = v29;
  a4[1] = v13;
  a4[2] = v19;
  a4[3] = v21;
  a4[4] = v24;
  a4[5] = v26;
  a4[6] = v27;
  a4[7] = v28;
  sub_10002A580();
}

uint64_t sub_100129DFC()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = sub_1000CC010(v0);
  sub_100023EEC();
  if (!v1) {
    return sub_1001BA868();
  }
  uint64_t v2 = *(void *)(v1 + 32);
  sub_10001DBCC();
  swift_release();
  return v2;
}

uint64_t type metadata accessor for EditSubscriptionUIRoute()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService23EditSubscriptionUIRoute);
}

uint64_t sub_100129E8C()
{
  return swift_deallocObject(v0, 144LL, 7LL);
}

ValueMetadata *type metadata accessor for EditSubscriptionUIRoute.ViewProperties.Option()
{
  return &type metadata for EditSubscriptionUIRoute.ViewProperties.Option;
}

uint64_t destroy for EditSubscriptionUIRoute.ViewProperties(void *a1)
{
  return swift_bridgeObjectRelease(a1[15]);
}

void *initializeWithCopy for EditSubscriptionUIRoute.ViewProperties(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  uint64_t v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  uint64_t v10 = a2[15];
  a1[14] = a2[14];
  a1[15] = v10;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

void *assignWithCopy for EditSubscriptionUIRoute.ViewProperties(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[8] = a2[8];
  uint64_t v12 = a2[9];
  uint64_t v13 = a1[9];
  a1[9] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[10] = a2[10];
  uint64_t v14 = a2[11];
  uint64_t v15 = a1[11];
  a1[11] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[12] = a2[12];
  uint64_t v16 = a2[13];
  uint64_t v17 = a1[13];
  a1[13] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  a1[14] = a2[14];
  uint64_t v18 = a2[15];
  uint64_t v19 = a1[15];
  a1[15] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  return a1;
}

void *assignWithTake for EditSubscriptionUIRoute.ViewProperties(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[6] = a2[6];
  a1[7] = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a2[9];
  uint64_t v13 = a1[9];
  a1[8] = a2[8];
  a1[9] = v12;
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = a2[11];
  uint64_t v15 = a1[11];
  a1[10] = a2[10];
  a1[11] = v14;
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = a2[13];
  uint64_t v17 = a1[13];
  a1[12] = a2[12];
  a1[13] = v16;
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = a2[15];
  uint64_t v19 = a1[15];
  a1[14] = a2[14];
  a1[15] = v18;
  swift_bridgeObjectRelease(v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for EditSubscriptionUIRoute.ViewProperties(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 128))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EditSubscriptionUIRoute.ViewProperties(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 12sub_1001A93A0(0LL, 0) = 0LL;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4sub_1001A93A0(0LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 128) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for EditSubscriptionUIRoute.ViewProperties()
{
  return &type metadata for EditSubscriptionUIRoute.ViewProperties;
}

void sub_10012A284(uint64_t a1)
{
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 - 384);
  *(void *)(a1 + 32) = 0x6E6F697461636F4CLL;
  *(void *)(a1 + 4sub_1001A93A0(0LL, 0) = 0xE800000000000000LL;
  *(void *)(v1 - 208) = 0LL;
  *(void *)(v1 - 20sub_1001A93A0(0LL, 0) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(26LL);
}

uint64_t sub_10012A2C0()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_10012A2CC()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

void sub_10012A2D8()
{
}

uint64_t sub_10012A2E4()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

  ;
}

ValueMetadata *type metadata accessor for OctaneStorefront()
{
  return &type metadata for OctaneStorefront;
}

void sub_10012A314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    unint64_t v3 = sub_10012AC28(a1, a2);
    if ((v4 & 1) != 0) {
      sub_10012AC14(v3);
    }
  }

  sub_10001945C();
}

void sub_10012A350(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    unint64_t v3 = sub_1000F1730(a1);
    if ((v4 & 1) != 0) {
      Scheduled._promise.getter(*(void *)(*(void *)(a2 + 56) + 16 * v3));
    }
  }

  sub_10001945C();
}

void sub_10012A3B8(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
}

void sub_10012A3C8(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v5 = sub_1000F17B4(a1), (v6 & 1) != 0))
  {
    sub_10012AC30(*(void *)(a2 + 56) + 32 * v5, (uint64_t)a3);
  }

  else
  {
    *a3 = 0u;
    a3[1] = 0u;
    sub_10001945C();
  }

void sub_10012A410(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
}

void sub_10012A41C(uint64_t a1@<X2>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  if (*(void *)(a1 + 16) && (uint64_t v5 = a2(), (v6 & 1) != 0))
  {
    sub_1000E4EAC(*(void *)(a1 + 56) + 40 * v5, a3);
  }

  else
  {
    *(void *)(a3 + 32) = 0LL;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }

  sub_10001945C();
}

void sub_10012A46C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    uint64_t v2 = sub_1000F1818();
    if ((v3 & 1) != 0)
    {
      sub_10012AC38(v2);
      swift_bridgeObjectRetain();
    }
  }

  sub_10001945C();
}

void sub_10012A4A4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    uint64_t v2 = sub_1000F1818();
    if ((v3 & 1) != 0) {
      sub_10012AC38(v2);
    }
  }

  sub_10001945C();
}

void sub_10012A4E0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    uint64_t v2 = sub_1000F1818();
    if ((v3 & 1) != 0) {
      sub_10012AC14(v2);
    }
  }

  sub_10001945C();
}

void sub_10012A520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    unint64_t v3 = sub_10012AC28(a1, a2);
    if ((v4 & 1) != 0)
    {
      sub_10012AC38(v3);
      swift_retain();
    }
  }

  sub_10001945C();
}

void sub_10012A554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    unint64_t v3 = sub_10012AC28(a1, a2);
    if ((v4 & 1) != 0) {
      sub_10012AC38(v3);
    }
  }

  sub_10001945C();
}

void sub_10012A58C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = sub_10012AC28(a1, a2), (v7 & 1) != 0))
  {
    sub_10012AC30(*(void *)(v4 + 56) + 32 * v6, (uint64_t)a4);
  }

  else
  {
    *a4 = 0u;
    a4[1] = 0u;
    sub_10001945C();
  }

void *sub_10012A5D0()
{
  uint64_t result = sub_10012A5EC();
  qword_1002EB990 = (uint64_t)result;
  return result;
}

void *sub_10012A5EC()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unint64_t v3 = (char *)&v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OctaneConfiguration();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v4);
  id v6 = [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  NSString v7 = String._bridgeToObjectiveC()();
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [v6 pathForResource:v7 ofType:v8];

  if (v9)
  {
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    uint64_t v12 = v11;

    URL.init(fileURLWithPath:)(v10, v12);
    swift_bridgeObjectRelease(v12);
    uint64_t v13 = Data.init(contentsOf:options:)(v3, 0LL);
    unint64_t v15 = v14;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    uint64_t v16 = type metadata accessor for PropertyListDecoder(0LL);
    swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    uint64_t v17 = PropertyListDecoder.init()();
    uint64_t v18 = sub_1000175B0(&qword_1002B0048);
    sub_1000CC61C();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v18, v13, v15, v18);
    sub_10003A9EC(v13, v15);
    swift_release(v17);
    uint64_t v55 = v62;
  }

  else
  {
    uint64_t v55 = _swiftEmptyArrayStorage;
  }

  uint64_t v19 = v55[2];
  if (!v19)
  {
    unint64_t v21 = _swiftEmptyArrayStorage;
    goto LABEL_32;
  }

  swift_bridgeObjectRetain(v55);
  uint64_t v20 = 0LL;
  unint64_t v21 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v22 = v55[v20 + 4];
    if (!*(void *)(v22 + 16)) {
      goto LABEL_26;
    }
    swift_bridgeObjectRetain(v55[v20 + 4]);
    unint64_t v23 = sub_1000F168C(0x437972746E756F63LL, 0xEB0000000065646FLL);
    if ((v24 & 1) == 0 || !*(void *)(v22 + 16)) {
      goto LABEL_24;
    }
    uint64_t v25 = (uint64_t *)(*(void *)(v22 + 56) + 16 * v23);
    uint64_t v27 = *v25;
    uint64_t v26 = v25[1];
    swift_bridgeObjectRetain(v26);
    unint64_t v28 = sub_1000F168C(0x79636E6572727563LL, 0xEC00000065646F43LL);
    if ((v29 & 1) == 0)
    {
      swift_bridgeObjectRelease(v22);
      uint64_t v51 = v26;
      goto LABEL_25;
    }

    if (!*(void *)(v22 + 16)) {
      goto LABEL_23;
    }
    uint64_t v30 = (uint64_t *)(*(void *)(v22 + 56) + 16 * v28);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    swift_bridgeObjectRetain(v31);
    unint64_t v33 = sub_1000F168C(0x696669746E656469LL, 0xEA00000000007265LL);
    if ((v34 & 1) == 0)
    {
      swift_bridgeObjectRelease(v31);
LABEL_23:
      swift_bridgeObjectRelease(v26);
LABEL_24:
      uint64_t v51 = v22;
LABEL_25:
      swift_bridgeObjectRelease(v51);
      goto LABEL_26;
    }

    uint64_t v35 = v21;
    uint64_t v36 = (uint64_t *)(*(void *)(v22 + 56) + 16 * v33);
    uint64_t v60 = *v36;
    uint64_t v61 = v32;
    uint64_t v37 = v36[1];
    uint64_t v38 = *(void *)(v22 + 16);
    swift_bridgeObjectRetain(v37);
    if (v38 && (unint64_t v39 = sub_1000F168C(0x746E756F434F5349LL, 0xEE0065646F437972LL), (v40 & 1) != 0))
    {
      unint64_t v21 = v35;
      if (!*(void *)(v22 + 16)) {
        goto LABEL_30;
      }
      id v41 = (uint64_t *)(*(void *)(v22 + 56) + 16 * v39);
      uint64_t v42 = v41[1];
      uint64_t v59 = *v41;
      swift_bridgeObjectRetain(v42);
      unint64_t v43 = sub_1000F168C(1701667182LL, 0xE400000000000000LL);
      if ((v44 & 1) == 0)
      {
        swift_bridgeObjectRelease(v42);
LABEL_30:
        swift_bridgeObjectRelease(v22);
        swift_bridgeObjectRelease(v26);
        swift_bridgeObjectRelease(v31);
        uint64_t v51 = v37;
        goto LABEL_25;
      }

      uint64_t v45 = (uint64_t *)(*(void *)(v22 + 56) + 16 * v43);
      uint64_t v46 = *v45;
      uint64_t v57 = v45[1];
      uint64_t v58 = v46;
      swift_bridgeObjectRetain(v57);
      swift_bridgeObjectRelease(v22);
      if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
      {
        sub_10002ECDC();
        unint64_t v21 = v52;
      }

      unint64_t v47 = v21[2];
      unint64_t v48 = v47 + 1;
      if (v47 >= v21[3] >> 1)
      {
        unint64_t v56 = v47 + 1;
        sub_10002ECDC();
        unint64_t v48 = v56;
        unint64_t v21 = v53;
      }

      void v21[2] = v48;
      os_log_type_t v49 = &v21[10 * v47];
      v49[4] = v27;
      v49[5] = v26;
      v49[6] = v61;
      v49[7] = v31;
      v49[8] = v60;
      v49[9] = v37;
      v49[10] = v59;
      v49[11] = v42;
      uint64_t v50 = v57;
      v49[12] = v58;
      v49[13] = v50;
    }

    else
    {
      swift_bridgeObjectRelease(v31);
      swift_bridgeObjectRelease(v26);
      swift_bridgeObjectRelease(v22);
      swift_bridgeObjectRelease(v37);
      unint64_t v21 = v35;
    }

uint64_t sub_10012AAD0()
{
  uint64_t v1 = sub_1000175B0(&qword_1002A92A8);
  uint64_t inited = swift_initStackObject(v1, &v7);
  *(_OWORD *)(inited + 16) = xmmword_100202670;
  __int128 v3 = *v0;
  __int128 v11 = v0[1];
  __int128 v4 = v11;
  __int128 v12 = v3;
  *(_OWORD *)(inited + 48) = v3;
  *(_OWORD *)(inited + 8sub_1001A93A0(0LL, 0) = v4;
  __int128 v5 = v0[3];
  __int128 v10 = v0[2];
  *(_OWORD *)(inited + 112) = v10;
  *(void *)(inited + 32) = 0x437972746E756F63LL;
  *(void *)(inited + 4sub_1001A93A0(0LL, 0) = 0xEB0000000065646FLL;
  strcpy((char *)(inited + 64), "currencyCode");
  *(_BYTE *)(inited + 77) = 0;
  *(_WORD *)(inited + 78) = -5120;
  *(void *)(inited + 96) = 0x696669746E656469LL;
  *(void *)(inited + 104) = 0xEA00000000007265LL;
  strcpy((char *)(inited + 128), "ISOCountryCode");
  *(_BYTE *)(inited + 143) = -18;
  *(_OWORD *)(inited + 144) = v5;
  *(void *)(inited + 16sub_1001A93A0(0LL, 0) = 1701667182LL;
  *(void *)(inited + 168) = 0xE400000000000000LL;
  __int128 v8 = v0[4];
  __int128 v9 = v5;
  *(_OWORD *)(inited + 176) = v8;
  sub_100047A90((uint64_t)&v12);
  sub_100047A90((uint64_t)&v11);
  sub_100047A90((uint64_t)&v10);
  sub_100047A90((uint64_t)&v9);
  sub_100047A90((uint64_t)&v8);
  return Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, &type metadata for String);
}

uint64_t sub_10012AC14(uint64_t a1)
{
  return swift_bridgeObjectRetain(*(void *)(*(void *)(v1 + 56) + 16 * a1 + 8));
}

unint64_t sub_10012AC28(uint64_t a1, uint64_t a2)
{
  return sub_1000F168C(a1, a2);
}

uint64_t sub_10012AC30(uint64_t a1, uint64_t a2)
{
  return sub_10002C010(a1, a2);
}

uint64_t sub_10012AC38(uint64_t a1)
{
  return *(void *)(*(void *)(v1 + 56) + 8 * a1);
}

uint64_t NIOClientTCPBootstrap.channelOption<A>(_:value:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  id v6 = v5;
  uint64_t v12 = v6[3];
  uint64_t v13 = v6[4];
  sub_100019F58(v6, v12);
  unint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 24);
  a5[3] = v12;
  a5[4] = v13;
  sub_10005F580(a5);
  v14(a1, a2, a3, a4, v12, v13);
  uint64_t v15 = v6[6];
  a5[5] = v6[5];
  a5[6] = v15;
  return swift_retain();
}

uint64_t NIOClientTCPBootstrap.underlyingBootstrap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100023BAC(v1, a1);
}

uint64_t NIOClientTCPBootstrap.init<A, B>(_:tls:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  a7[3] = a3;
  a7[4] = a5;
  unint64_t v14 = sub_10005F580(a7);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32LL))(v14, a1, a3);
  uint64_t v15 = *(void *)(a4 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = (v16 + 48) & ~v16;
  uint64_t v18 = (char *)swift_allocObject(&unk_100287398, v17 + *(void *)(v15 + 64), v16 | 7);
  *((void *)v18 + 2) = a3;
  *((void *)v18 + 3) = a4;
  *((void *)v18 + 4) = a5;
  *((void *)v18 + 5) = a6;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 32))(&v18[v17], a2, a4);
  a7[5] = sub_10012AEF8;
  a7[6] = v18;
  return result;
}

uint64_t sub_10012ADB8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, void *a6@<X8>)
{
  uint64_t v11 = *(void *)(a2 - 8);
  uint64_t v12 = __chkstk_darwin(a1);
  unint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_100023BAC(v12, (uint64_t)v19);
  uint64_t v15 = sub_1000175B0(&qword_1002B4098);
  swift_dynamicCast(v14, v19, v15, a2, 7LL);
  uint64_t v16 = *(void (**)(_BYTE *, uint64_t, uint64_t))(a5 + 16);
  a6[3] = a2;
  a6[4] = a4;
  sub_10005F580(a6);
  v16(v14, a3, a5);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v14, a2);
}

uint64_t sub_10012AEA0()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) - 8LL);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10012AEF8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_10012ADB8(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t NIOClientTCPBootstrap.channelInitializer(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = v4[3];
  uint64_t v9 = v4[4];
  sub_100019F58(v4, v8);
  __int128 v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8);
  a3[3] = v8;
  a3[4] = v9;
  sub_10005F580(a3);
  v10(a1, a2, v8, v9);
  uint64_t v11 = v4[6];
  a3[5] = v4[5];
  a3[6] = v11;
  return sub_10012B32C(v11);
}

uint64_t NIOClientTCPBootstrap.connectTimeout(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = v3[3];
  uint64_t v7 = v3[4];
  sub_100019F58(v3, v6);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  a2[3] = v6;
  a2[4] = v7;
  sub_10005F580(a2);
  v8(a1, v6, v7);
  uint64_t v9 = v3[6];
  a2[5] = v3[5];
  a2[6] = v9;
  return sub_10012B32C(v9);
}

void NIOClientTCPBootstrap.connect(host:port:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  sub_100019F58(v3, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 48))(a1, a2, a3, v7, v8);
  sub_10002A3D4();
}

uint64_t NIOClientTCPBootstrap.connect(to:)(uint64_t a1)
{
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  sub_100019F58(v1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, v3, v4);
}

void NIOClientTCPBootstrap.connect(unixDomainSocketPath:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  sub_100019F58(v2, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 64))(a1, a2, v5, v6);
  sub_10002A3D4();
}

uint64_t NIOClientTCPBootstrap.enableTLS()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v5 = *(void (**)(uint64_t))(v1 + 40);
  uint64_t v4 = *(void *)(v1 + 48);
  v5(v2);
  *(void *)(a1 + 4sub_1001A93A0(0LL, 0) = v5;
  *(void *)(a1 + 48) = v4;
  return swift_retain(v4);
}

void NIOInsecureNoTLS.enableTLS(_:)()
{
}

void sub_10012B184()
{
}

uint64_t destroy for NIOClientTCPBootstrap(void *a1)
{
  return swift_release(a1[6]);
}

uint64_t initializeWithCopy for NIOClientTCPBootstrap(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 4sub_1001A93A0(0LL, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_retain(v5);
  return a1;
}

void *assignWithCopy for NIOClientTCPBootstrap(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for NIOClientTCPBootstrap(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 4sub_1001A93A0(0LL, 0) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for NIOClientTCPBootstrap(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NIOClientTCPBootstrap(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 4sub_1001A93A0(0LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NIOClientTCPBootstrap()
{
  return &type metadata for NIOClientTCPBootstrap;
}

uint64_t type metadata accessor for NIOInsecureNoTLS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NIOInsecureNoTLS);
}

uint64_t sub_10012B32C(uint64_t a1)
{
  return swift_retain(a1);
}

uint64_t destroy for HTTPResponse(void *a1)
{
  uint64_t result = a1[5];
  if (result)
  {
    uint64_t v3 = a1[4];
    swift_release(result);
    return swift_bridgeObjectRelease(v3);
  }

  return result;
}

uint64_t initializeWithCopy for HTTPResponse(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  uint64_t v6 = a2[5];
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  if (v6)
  {
    uint64_t v7 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 4sub_1001A93A0(0LL, 0) = v6;
    *(void *)(a1 + 48) = a2[6];
    *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 14);
    *(_DWORD *)(a1 + 59) = *(_DWORD *)((char *)a2 + 59);
    swift_bridgeObjectRetain(v7);
    swift_retain(v6);
  }

  else
  {
    __int128 v8 = *(_OWORD *)(a2 + 5);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 4sub_1001A93A0(0LL, 0) = v8;
    *(void *)(a1 + 55) = *(uint64_t *)((char *)a2 + 55);
  }

  return a1;
}

uint64_t assignWithCopy for HTTPResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v4 = (_OWORD *)(a1 + 24);
  uint64_t v5 = (_OWORD *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v6)
    {
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 4sub_1001A93A0(0LL, 0) = *(void *)(a2 + 40);
      swift_retain();
      swift_release();
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
      *(_WORD *)(a1 + 6sub_1001A93A0(0LL, 0) = *(_WORD *)(a2 + 60);
      *(_BYTE *)(a1 + 62) = *(_BYTE *)(a2 + 62);
    }

    else
    {
      sub_10012B580(a1 + 24);
      uint64_t v8 = *(void *)(a2 + 55);
      __int128 v9 = *(_OWORD *)(a2 + 40);
      *uint64_t v4 = *v5;
      *(_OWORD *)(a1 + 4sub_1001A93A0(0LL, 0) = v9;
      *(void *)(a1 + 55) = v8;
    }
  }

  else if (v6)
  {
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 4sub_1001A93A0(0LL, 0) = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
    int v7 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a1 + 59) = *(_DWORD *)(a2 + 59);
    *(_DWORD *)(a1 + 56) = v7;
    swift_bridgeObjectRetain();
    swift_retain();
  }

  else
  {
    __int128 v10 = *v5;
    __int128 v11 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 55) = *(void *)(a2 + 55);
    *uint64_t v4 = v10;
    *(_OWORD *)(a1 + 4sub_1001A93A0(0LL, 0) = v11;
  }

  return a1;
}

uint64_t sub_10012B580(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for HTTPResponse(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 47) = *(_OWORD *)(a2 + 47);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for HTTPResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  if (!*(void *)(a1 + 40)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 40);
  if (!v4)
  {
    sub_10012B580(a1 + 24);
LABEL_5:
    __int128 v6 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 4sub_1001A93A0(0LL, 0) = v6;
    *(void *)(a1 + 55) = *(void *)(a2 + 55);
    return a1;
  }

  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 4sub_1001A93A0(0LL, 0) = v4;
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 6sub_1001A93A0(0LL, 0) = *(_WORD *)(a2 + 60);
  *(_BYTE *)(a1 + 62) = *(_BYTE *)(a2 + 62);
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPResponse(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 63))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 4sub_1001A93A0(0LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 62) = 0;
    *(_WORD *)(result + 6sub_1001A93A0(0LL, 0) = 0;
    *(_DWORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 63) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 63) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for HTTPResponse()
{
  return &type metadata for HTTPResponse;
}

uint64_t sub_10012B744(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t))
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v3 + 584LL))();
  if ((result & 1) != 0)
  {
    uint64_t v8 = a2();
    uint64_t v10 = v9;
    __int16 v12 = v11;
    uint64_t ObjectType = swift_getObjectType(v8);
    EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  166LL,  ObjectType,  v10);
    sub_10001ED6C();
    uint64_t result = sub_10002A338();
    if ((v12 & 0xFB00) != 0)
    {
      if (a1)
      {
        unint64_t v14 = sub_100029C98();
        uint64_t v15 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v14);
        uint64_t v17 = v15;
        uint64_t v18 = 12LL;
LABEL_7:
        *(void *)uint64_t v16 = v18;
        *(_BYTE *)(v16 + 8) = 3;
LABEL_8:
        swift_errorRetain(v15);
        sub_100098A70(v17, 1LL, a1);
        swift_errorRelease(v17);
        return swift_errorRelease(v17);
      }
    }

    else if (*(_BYTE *)(*(void *)(v3 + 48) + 88LL))
    {
      uint64_t v20 = a3(result);
      unint64_t v21 = sub_100029E1C();
      uint64_t v22 = sub_1000252D0((uint64_t)&type metadata for EventLoopError, v21);
      *unint64_t v23 = 2;
      uint64_t v24 = *(void *)(v20 + 56);
      uint64_t v25 = sub_10002A444();
      EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  1189LL,  v25,  v24);
      if (sub_100095918())
      {
        sub_10009663C(v22);
        sub_100024F0C();
      }

      swift_errorRelease(v22);
      sub_10002A524();
      uint64_t v26 = sub_1000252D0((uint64_t)&type metadata for EventLoopError, v21);
      *uint64_t v27 = 2;
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v3 + 760LL))(v26, 2LL, 0LL);
      uint64_t result = swift_errorRelease(v26);
      if (a1)
      {
        uint64_t v15 = sub_1000252D0((uint64_t)&type metadata for EventLoopError, v21);
        uint64_t v17 = v15;
        *unint64_t v28 = 2;
        goto LABEL_8;
      }
    }

    else
    {
      sub_10002A718(v3 + 224, (uint64_t)v33, 1LL);
      sub_10002A444();
      uint64_t result = sub_100132AA8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNI O/BaseSocketChannel.swift",  119LL,  2LL,  91LL);
      if (*(_BYTE *)(v3 + 249))
      {
        __break(1u);
      }

      else
      {
        *(_BYTE *)(v3 + 249) = 1;
        uint64_t v29 = sub_100132AA8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO /BaseSocketChannel.swift",  119LL,  2LL,  44LL);
        uint64_t v30 = a3(v29);
        if (a1) {
          sub_100132A04();
        }
        uint64_t v31 = *(void *)(v30 + 56);
        uint64_t v32 = sub_10002A444();
        EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  1125LL,  v32,  v31);
        if (sub_100095918())
        {
          sub_100041B5C();
          sub_10009617C();
          sub_10002A780(v30);
        }

        return swift_release();
      }
    }
  }

  else if (a1)
  {
    unint64_t v19 = sub_100029C98();
    uint64_t v15 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v19);
    uint64_t v17 = v15;
    uint64_t v18 = 2LL;
    goto LABEL_7;
  }

  return result;
}

uint64_t sub_10012BA2C(uint64_t a1)
{
  uint64_t v3 = sub_10003D72C( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSo cketChannel.swift",  119LL,  2LL,  884LL);
  sub_10012B744(v3, (uint64_t (*)(void))sub_10014E854, (uint64_t (*)(uint64_t))sub_10014E96C);
  swift_retain_n(v3, 3LL);
  swift_retain_n(v1, 2LL);
  sub_1000FEE04();
  swift_release();
  swift_release_n(v3, 2LL);
  swift_retain();
  sub_100028DB0(a1);
  uint64_t v4 = swift_release();
  uint64_t v5 = sub_10014E854(v4);
  uint64_t v7 = v6;
  __int16 v9 = v8;
  uint64_t ObjectType = swift_getObjectType(v5);
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  166LL,  ObjectType,  v7);
  swift_release();
  swift_unknownObjectRelease(v5);
  if ((v9 & 0xFB00) != 0)
  {
    sub_1001500C0();
    uint64_t v12 = sub_10014E854(v11);
    uint64_t v14 = v13;
    unsigned int v16 = v15;
    uint64_t v17 = swift_getObjectType(v12);
    EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  176LL,  v17,  v14);
    if (v16 <= 4 && ((1 << v16) & 0x13) != 0)
    {
      swift_release();
      swift_release();
      return swift_unknownObjectRelease(v12);
    }

    swift_release();
    swift_unknownObjectRelease(v12);
    sub_100150170(a1);
  }

  return swift_release();
}

uint64_t sub_10012BC34(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return swift_release();
}

uint64_t sub_10012BC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = v4[4];
  uint64_t v10 = v4[5];
  uint64_t v11 = swift_allocObject(*v4, 72LL, 7LL);
  uint64_t ObjectType = swift_getObjectType(v9);
  uint64_t v13 = sub_10010C7B4(v9, 0LL, 255, a1, a2, a3, a4, v11, ObjectType, v10);
  swift_retain_n(v13, 2LL);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain(v9);
  sub_1000FF5A8();
  swift_release();
  return v13;
}

void sub_10012BD50( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = a6(a2, a3, a4, a5);
  sub_10014E96C();
  sub_100041B5C();
  ChannelPipeline.bind(to:promise:)(a1, v7);
  sub_10002A51C();
  sub_100024F0C();
  sub_1000193B8();
}

void sub_10012BDA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = v9();
  uint64_t v11 = (void *)sub_100019310(a4, 40LL);
  void v11[2] = v10;
  void v11[3] = v6;
  v11[4] = v5;
  sub_10001EDE0();
  sub_10002A674();
  SelectableEventLoop.execute(_:)(a5, (uint64_t)v11);
  sub_10002A51C();
  sub_10002A3D4();
}

Class ServerBootstrap.__allocating_init(group:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100132A98(a1);
  return sub_100131A44(v3, v2, v5, a2);
}

void ServerBootstrap.serverChannelOption<A>(_:value:)()
{
  uint64_t v1 = sub_1001328AC();
  sub_1000356C4(v1);
  sub_10002A4C8();
  sub_100019398();
}

void ServerBootstrap.childChannelOption<A>(_:value:)()
{
  uint64_t v1 = sub_1001328AC();
  sub_1000356C4(v1);
  sub_10002A4C8();
  sub_100019398();
}

uint64_t ServerBootstrap.childChannelInitializer(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  sub_100034E8C(v5, v4);
  sub_10002A4C8();
  return sub_100132894(v2);
}

uint64_t ServerBootstrap.bind(host:port:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012FC0C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10012C4A8);
}

void sub_10012BF24(uint64_t a1)
{
  if (*(void *)(v1 + 32) == a1)
  {
    sub_10002A4C8();
  }

  else
  {
    uint64_t v2 = sub_100132ACC(a1);
    uint64_t v3 = sub_100132AC0( (uint64_t)&type metadata for () + 8,  (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Even tLoopFuture.swift",  117LL,  2LL,  1379LL,  v2);
    uint64_t v4 = sub_100132AA0(v3);
    sub_10002C4B8(v4);
    sub_10002A51C();
  }

  sub_1000193B8();
}

void sub_10012BF98(uint64_t a1)
{
  if (*(void *)(v1 + 40) == a1)
  {
    sub_10002A4C8();
  }

  else
  {
    uint64_t v2 = sub_100132ACC(a1);
    uint64_t v3 = sub_1000175B0(&qword_1002B0E98);
    uint64_t v4 = sub_100132AC0( v3,  (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Even tLoopFuture.swift",  117LL,  2LL,  1379LL,  v2);
    uint64_t v5 = sub_100132AA0(v4);
    sub_10002C4F8(v5);
    sub_10002A51C();
  }

  sub_1000193B8();
}

void ServerBootstrap._serverChannelOptions.getter()
{
}

void ServerBootstrap._serverChannelOptions.setter(uint64_t a1)
{
  *(void *)(v1 + 8sub_1001A93A0(0LL, 0) = a1;
  swift_bridgeObjectRelease();
  sub_100013868();
}

void ServerBootstrap._serverChannelOptions.modify(uint64_t a1)
{
}

void ServerBootstrap._childChannelOptions.getter()
{
}

void ServerBootstrap._childChannelOptions.setter(uint64_t a1)
{
  *(void *)(v1 + 88) = a1;
  swift_bridgeObjectRelease();
  sub_100013868();
}

void EmbeddedChannelCore.pendingOutboundBuffer.modify(uint64_t a1)
{
}

void ServerBootstrap.__allocating_init(group:childGroup:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  Class = (__objc2_class *)object_getClass(a1);
  if (Class != &OBJC_CLASS____TtC25ASOctaneSupportXPCService27MultiThreadedEventLoopGroup
    && Class != &OBJC_CLASS____TtC25ASOctaneSupportXPCService19SelectableEventLoop
    || a1 == 0LL)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v12 = (__objc2_class *)sub_1001329D8();
  if (v12 != &OBJC_CLASS____TtC25ASOctaneSupportXPCService27MultiThreadedEventLoopGroup
    && v12 != &OBJC_CLASS____TtC25ASOctaneSupportXPCService19SelectableEventLoop
    || a3 == 0LL)
  {
    goto LABEL_18;
  }

  sub_100019310((uint64_t)v4, 96LL);
  uint64_t v15 = sub_100132B60();
  swift_unknownObjectRetain(a1);
  sub_10009B6E0();
  if (sub_100131AEC(a1, a3, a4, v4, v15, a2))
  {
    swift_unknownObjectRelease(a1);
    sub_10009B6D8();
    sub_100023E74();
    return;
  }

void *ServerBootstrap.__allocating_init(validatingGroup:childGroup:)()
{
  uint64_t v1 = (void *)sub_1001329BC();
  return sub_100132974(v1, v2, v3, v4, v5, v6);
}

void *ServerBootstrap.init(validatingGroup:childGroup:)(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1001329BC();
  return sub_100132974(v1, v2, v3, v4, v5, v6);
}

uint64_t sub_10012C278(uint64_t a1, int a2)
{
  uint64_t v16 = a1;
  int v15 = a2;
  char v14 = 0;
  _OWORD v6[2] = &v16;
  void v6[3] = &v14;
  v6[4] = &v15;
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_100132AF8((void (*)(void *__return_ptr, uint64_t))sub_1001324E8, (uint64_t)v6);
  sub_100019390();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = v3;
  if ((v14 & 1) == 0)
  {
    uint64_t v12 = &type metadata for ChannelOptions.Types.SocketOption;
    *(void *)&__int128 v11 = v16;
    uint64_t v10 = &type metadata for Int32;
    LODWORD(v9) = v15;
    sub_100034728(&v11, v7);
    sub_100034728(&v9, v8);
    sub_100034728(v7, __src);
    sub_100132AEC();
    *(void *)&__src[4] = sub_100131764;
    *((void *)&__src[4] + sub_1001A93A0(v0, 1) = 0LL;
    sub_10002E8BC();
    sub_100132A4C();
    uint64_t v5 = (void *)sub_1001329A0();
    uint64_t result = (uint64_t)memcpy(v5, __src, 0x50uLL);
    *uint64_t v2 = __src;
  }

  return result;
}

uint64_t sub_10012C380(int a1)
{
  int v14 = a1;
  char v13 = 0;
  v5[3] = &v13;
  v5[4] = &v14;
  swift_bridgeObjectRetain();
  uint64_t v2 = sub_100132AF8((void (*)(void *__return_ptr, uint64_t))sub_10013212C, (uint64_t)v5);
  sub_100019390();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = v2;
  if ((v13 & 1) == 0)
  {
    __int128 v11 = &type metadata for ChannelOptions.Types.BacklogOption;
    __int128 v9 = &type metadata for Int32;
    LODWORD(v8) = v14;
    sub_100034728(&v10, v6);
    sub_100034728(&v8, v7);
    sub_100034728(v6, __src);
    sub_100132AEC();
    *(void *)&__src[4] = sub_100131780;
    *((void *)&__src[4] + sub_1001A93A0(v0, 1) = 0LL;
    sub_10002E8BC();
    sub_100132A4C();
    uint64_t v4 = (void *)sub_1001329A0();
    uint64_t result = (uint64_t)memcpy(v4, __src, 0x50uLL);
    *uint64_t v1 = __src;
  }

  return result;
}

uint64_t ServerBootstrap.serverChannelInitializer(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 48);
  uint64_t v4 = *(void *)(v2 + 56);
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  sub_100034E8C(v5, v4);
  sub_10002A4C8();
  return sub_100132894(v2);
}

void sub_10012C4A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = static SocketAddress.makeAddressResolvingHost(_:port:)(a2, a3, a4);
  _OWORD v6[2] = __chkstk_darwin(v4);
  uint64_t v5 = sub_100019310((uint64_t)&unk_100288228, 24LL);
  *(void *)(v5 + 16) = v4;
  sub_10002A674();
  sub_10012C86C(sub_1001327C4, (uint64_t)v6, (uint64_t)sub_100132874, v5);
  sub_100019390();
  sub_10002A5A4();
  sub_10002A524();
  sub_10002A3D4();
}

uint64_t sub_10012C5BC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = SocketAddress.init(unixDomainSocketPath:)(a2, a3);
  void v9[2] = __chkstk_darwin(v5);
  uint64_t v6 = swift_allocObject(&unk_100288020, 24LL, 7LL);
  *(void *)(v6 + 16) = v5;
  swift_retain();
  uint64_t v7 = sub_10012C86C(sub_1001327C4, (uint64_t)v9, (uint64_t)sub_100132874, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v7;
}

void ServerBootstrap.bind(to:)(uint64_t a1)
{
}

uint64_t ServerBootstrap.bind(unixDomainSocketPath:)(uint64_t a1, uint64_t a2)
{
  return sub_10012C5BC(v3, v4, v2);
}

uint64_t ServerBootstrap.bind(unixDomainSocketPath:cleanupExistingSocketFile:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013001C(a1, a2, a3, 238LL, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10012C5BC);
}

void ServerBootstrap.withBoundSocket(descriptor:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ServerBootstrap.withBoundSocket(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t sub_10012C7E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001521BC(a4, a1, a2, a3);
}

void sub_10012C85C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_10012C86C( uint64_t (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = v4;
  uint64_t v6 = sub_10002A444();
  uint64_t v7 = sub_100132910(v6);
  uint64_t v9 = v8;
  uint64_t v10 = v4[5];
  uint64_t v35 = v5[4];
  sub_10002A718((uint64_t)(v5 + 10), (uint64_t)v39, 0LL);
  uint64_t v11 = v5[10];
  uint64_t v13 = v5[6];
  uint64_t v12 = v5[7];
  uint64_t v37 = v9;
  if (v13)
  {
    uint64_t v14 = sub_100019310((uint64_t)&unk_1002880C0, 32LL);
    *(void *)(v14 + 16) = v13;
    *(void *)(v14 + 24) = v12;
    int v15 = sub_100131DF4;
  }

  else
  {
    uint64_t v14 = sub_100019310((uint64_t)&unk_100288048, 32LL);
    *(void *)(v14 + 16) = v7;
    *(void *)(v14 + 24) = v9;
    sub_10009B6E0();
    int v15 = (uint64_t (*)())sub_100132514;
  }

  uint64_t v16 = sub_100019310((uint64_t)&unk_100288070, 32LL);
  *(void *)(v16 + 16) = v15;
  *(void *)(v16 + 24) = v14;
  uint64_t v17 = v5[8];
  uint64_t v18 = v5[9];
  sub_10002A718((uint64_t)(v5 + 11), (uint64_t)v38, 0LL);
  uint64_t v19 = v5[11];
  if (sub_1001329D8() == (Class)&OBJC_CLASS____TtC25ASOctaneSupportXPCService19SelectableEventLoop) {
    uint64_t v20 = v7;
  }
  else {
    uint64_t v20 = 0LL;
  }
  sub_10009B6E0();
  swift_bridgeObjectRetain();
  sub_100034E9C(v13, v12);
  sub_100132AE4(v17);
  sub_10003574C();
  uint64_t v21 = a1(v20, v35, v10);
  sub_10009B6D8();
  uint64_t v22 = sub_10009B6D0();
  unint64_t v23 = (void *)sub_100019310((uint64_t)&unk_100288098, 104LL);
  void v23[2] = v11;
  v23[3] = v21;
  v23[4] = sub_100131DA0;
  void v23[5] = v16;
  v23[6] = v17;
  v23[7] = v18;
  v23[8] = v19;
  v23[9] = a3;
  v23[10] = a4;
  v23[11] = v7;
  v23[12] = v37;
  uint64_t v24 = *(uint64_t (**)(uint64_t (*)(), void *, uint64_t, uint64_t, uint64_t))(v37 + 32);
  sub_10009B6E0();
  sub_100132AE4(v17);
  sub_10002A674();
  sub_10009B678();
  ChannelPipeline.syncOperations.getter();
  uint64_t v25 = sub_1000175B0(&qword_1002B0FE8);
  uint64_t v26 = v24(sub_1001325A4, v23, v25, v22, v37);
  sub_10001ED6C();
  sub_10013287C();
  sub_1000F2E9C(v27, v28, v29, 321LL, v26);
  uint64_t v31 = v30;
  sub_10002A7BC();
  sub_10002A5A4();
  sub_100034E8C(v17, v18);
  sub_10009B6D8();
  sub_10002A51C();
  return v31;
}

uint64_t sub_10012CB00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001522E4(a1, a2, a3);
}

uint64_t sub_10012CB84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = swift_allocObject(&unk_1002881D8, 24LL, 7LL);
  *(void *)(v5 + 16) = a4;
  swift_retain();
  sub_10012CC6C((uint64_t)sub_1001326F0, v5, (uint64_t)sub_1001A8C10, (uint64_t)&unk_100288200, (uint64_t)sub_100132428);
  uint64_t v7 = v6;
  swift_release();
  return v7;
}

void sub_10012CC08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = swift_getObjectType(a1);
  ChannelOutboundInvoker.bind(to:file:line:)( a3,  (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  286LL,  ObjectType,  *(void *)(a2 + 8));
}

void sub_10012CC6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_100132B04();
  uint64_t v12 = v11(v10);
  uint64_t v13 = (void *)sub_100019310(a4, 40LL);
  void v13[2] = v5;
  void v13[3] = v7;
  v13[4] = v6;
  swift_retain();
  ChannelPipeline.syncOperations.getter();
  sub_10002A674();
  uint64_t v14 = sub_100132B04();
  sub_1000F2E10(v14, v15, v16, v17, v12, a5, (uint64_t)v13);
  sub_10002A7BC();
  sub_10002A51C();
  sub_100023E74();
}

void sub_10012CCF8(uint64_t a1@<X1>, void *a2@<X8>)
{
  *a2 = v3;
}

uint64_t sub_10012CD5C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v19 = sub_10003D72C( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelOption.swift",  115LL,  2LL,  368LL);
  uint64_t v20 = swift_allocObject(&unk_1002877D8, 32LL, 7LL);
  *(void *)(v20 + 16) = a1;
  *(void *)(v20 + 24) = 0LL;
  swift_bridgeObjectRetain();
  sub_100131820( v20,  v19,  a2,  (uint64_t)&unk_100288188,  (uint64_t)&unk_1002881B0,  (uint64_t)sub_1001327A8,  (uint64_t)sub_10007D75C);
  swift_release();
  uint64_t v21 = (void *)swift_allocObject(&unk_1002880E8, 40LL, 7LL);
  void v21[2] = a3;
  void v21[3] = a4;
  v21[4] = a2;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000F2E10( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  307LL,  v19,  (uint64_t)sub_1001327D8,  (uint64_t)v21);
  uint64_t v23 = v22;
  swift_release();
  swift_release();
  uint64_t v24 = (void *)swift_allocObject(&unk_100288110, 48LL, 7LL);
  v24[2] = a2;
  void v24[3] = a5;
  v24[4] = a6;
  v24[5] = a7;
  swift_retain();
  swift_retain();
  sub_100034E9C(a5, a6);
  swift_bridgeObjectRetain();
  sub_1000F2E10( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  309LL,  v23,  (uint64_t)sub_100132654,  (uint64_t)v24);
  uint64_t v26 = v25;
  swift_release();
  swift_release();
  uint64_t v27 = (void *)swift_allocObject(&unk_100288138, 56LL, 7LL);
  void v27[2] = a8;
  void v27[3] = a10;
  v27[4] = a11;
  void v27[5] = a12;
  v27[6] = a2;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain(a11);
  sub_1000F2E10( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  313LL,  v26,  (uint64_t)sub_100132680,  (uint64_t)v27);
  swift_release();
  swift_release();
  uint64_t v28 = swift_allocObject(&unk_100288160, 32LL, 7LL);
  *(void *)(v28 + 16) = sub_1001321D8;
  *(void *)(v28 + 24) = a2;
  swift_retain();
  uint64_t v29 = sub_100172174( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  315LL,  (uint64_t)sub_1001321F4,  v28);
  swift_release();
  swift_release();
  swift_retain();
  swift_unknownObjectRetain(a11);
  sub_1000F6B74( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  317LL,  v29,  a2,  a11,  a12);
  uint64_t v31 = v30;
  uint64_t result = swift_release();
  *a9 = v31;
  return result;
}

uint64_t sub_10012D070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_10014E96C();
  uint64_t v8 = type metadata accessor for ServerBootstrap.AcceptHandler();
  uint64_t v9 = (void *)swift_allocObject(v8, 40LL, 7LL);
  void v9[2] = a2;
  void v9[3] = a3;
  v9[4] = a4;
  sub_100034E9C(a2, a3);
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_1000D17F4((uint64_t)v9, 0x6148747065636341LL, 0xED000072656C646ELL, 1LL, 0x8000000000000000LL, v7);
  swift_release();
  swift_release();
  return v10;
}

void sub_10012D130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType = swift_getObjectType(a3);
  uint64_t v8 = sub_1000175B0(&qword_1002AA4B0);
  EventLoop.makeFailedFuture<A>(_:file:line:)( a1,  "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  319LL,  ObjectType,  v8,  a4);
  sub_1000193B8();
}

uint64_t sub_10012D1A8(void *a1)
{
  return swift_retain(*a1);
}

void sub_10012D1B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002C010(a2, (uint64_t)v9);
  if (swift_dynamicCast( v4,  v9,  (char *)&type metadata for Any + 8,  &type metadata for ChannelShouldQuiesceEvent,  6LL))
  {
    uint64_t v5 = sub_100094338();
    uint64_t v7 = v6;
    uint64_t ObjectType = swift_getObjectType(v5);
    v9[0] = v5;
    ChannelOutboundInvoker.close(mode:file:line:)( 2LL,  (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  339LL,  ObjectType,  *(void *)(v7 + 8));
    swift_unknownObjectRelease(v5);
    swift_retain();
    swift_retain_n(a1, 2LL);
    sub_1000FEE04();
    swift_release();
    swift_release();
  }

  ChannelHandlerContext.fireUserInboundEventTriggered(_:)(a2);
}

uint64_t sub_10012D2A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  type metadata accessor for SocketChannel(0LL);
  uint64_t v29 = a2;
  sub_10002D540();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(v8 + 48);
  uint64_t v30 = *(void *)(v8 + 56);
  uint64_t v10 = *(void *)(v6 + 48);
  uint64_t v12 = v3[2];
  uint64_t v11 = v3[3];
  if (v12)
  {
    uint64_t v13 = swift_allocObject(&unk_100287878, 32LL, 7LL);
    *(void *)(v13 + 16) = v12;
    *(void *)(v13 + 24) = v11;
    uint64_t v14 = sub_100131DF4;
  }

  else
  {
    uint64_t v13 = swift_allocObject(&unk_100287710, 32LL, 7LL);
    *(void *)(v13 + 16) = v10;
    *(void *)(v13 + 24) = &protocol witness table for SelectableEventLoop;
    swift_retain();
    uint64_t v14 = (uint64_t (*)())sub_100131ED8;
  }

  uint64_t v15 = swift_allocObject(&unk_100287738, 32LL, 7LL);
  *(void *)(v15 + 16) = v14;
  *(void *)(v15 + 24) = v13;
  uint64_t ObjectType = swift_getObjectType(v9);
  if (v10 == v9)
  {
    uint64_t v20 = v3[4];
    uint64_t v21 = sub_10003D72C( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Cha nnelOption.swift",  115LL,  2LL,  368LL);
    uint64_t v22 = swift_allocObject(&unk_1002877D8, 32LL, 7LL);
    *(void *)(v22 + 16) = v20;
    *(void *)(v22 + 24) = 0LL;
    swift_retain_n(v9, 2LL);
    sub_100034E9C(v12, v11);
    swift_bridgeObjectRetain();
    sub_100131820( v22,  v21,  v7,  (uint64_t)&unk_1002878A0,  (uint64_t)&unk_1002878C8,  (uint64_t)sub_100132078,  (uint64_t)sub_10007D590);
    swift_release();
    uint64_t v23 = (void *)swift_allocObject(&unk_100287800, 56LL, 7LL);
    void v23[2] = v9;
    v23[3] = &protocol witness table for SelectableEventLoop;
    v23[4] = sub_100131DA0;
    void v23[5] = v15;
    v23[6] = v7;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1000F2E10( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  354LL,  v21,  (uint64_t)sub_100131F58,  (uint64_t)v23);
    swift_release();
    swift_release();
    EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  362LL,  ObjectType,  v30);
    sub_10002B550(v29, (uint64_t)&v31);
    uint64_t v24 = swift_allocObject(&unk_100287828, 97LL, 7LL);
    *(void *)(v24 + 16) = v9;
    *(void *)(v24 + 24) = v30;
    *(void *)(v24 + 32) = a1;
    __int128 v25 = v32;
    *(_OWORD *)(v24 + 4sub_1001A93A0(0LL, 0) = v31;
    *(_OWORD *)(v24 + 56) = v25;
    *(_OWORD *)(v24 + 72) = v33[0];
    *(_OWORD *)(v24 + 8sub_1001A93A0(v0, 1) = *(_OWORD *)((char *)v33 + 9);
    swift_retain();
    swift_retain();
    sub_10012BC68( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  363LL);
    swift_release();
    uint64_t v26 = (void *)swift_allocObject(&unk_100287850, 56LL, 7LL);
    void v26[2] = v9;
    v26[3] = v30;
    v26[4] = v3;
    void v26[5] = a1;
    v26[6] = v7;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1000FEE04();
    swift_release();
    swift_release_n(v9, 2LL);
  }

  else
  {
    uint64_t v16 = (void *)swift_allocObject(&unk_100287760, 64LL, 7LL);
    void v16[2] = v3;
    void v16[3] = v7;
    v16[4] = v10;
    void v16[5] = &protocol witness table for SelectableEventLoop;
    void v16[6] = sub_100131DA0;
    v16[7] = v15;
    swift_retain_n(v10, 2LL);
    swift_unknownObjectRetain(v9);
    sub_100034E9C(v12, v11);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_10012DC18((uint64_t)sub_100131F0C, (uint64_t)v16);
    swift_release();
    sub_10012BF24(v9);
    swift_release();
    EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  362LL,  ObjectType,  v30);
    sub_10002B550(v29, (uint64_t)&v31);
    uint64_t v17 = swift_allocObject(&unk_100287788, 97LL, 7LL);
    *(void *)(v17 + 16) = v9;
    *(void *)(v17 + 24) = v30;
    *(void *)(v17 + 32) = a1;
    __int128 v18 = v32;
    *(_OWORD *)(v17 + 4sub_1001A93A0(0LL, 0) = v31;
    *(_OWORD *)(v17 + 56) = v18;
    *(_OWORD *)(v17 + 72) = v33[0];
    *(_OWORD *)(v17 + 8sub_1001A93A0(v0, 1) = *(_OWORD *)((char *)v33 + 9);
    swift_unknownObjectRetain(v9);
    swift_retain();
    sub_10012BC68( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  363LL);
    swift_release();
    uint64_t v19 = (void *)swift_allocObject(&unk_1002877B0, 56LL, 7LL);
    uint64_t v19[2] = v9;
    void v19[3] = v30;
    v19[4] = v3;
    void v19[5] = a1;
    v19[6] = v7;
    swift_unknownObjectRetain(v9);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1000FEE04();
    swift_release();
    swift_release();
    swift_unknownObjectRelease(v9);
  }

  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void sub_10012D804(uint64_t a1@<X1>, void *a2@<X8>)
{
  *a2 = v3;
}

uint64_t sub_10012D868( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, _UNKNOWN **), uint64_t a4, uint64_t a5)
{
  uint64_t ObjectType = swift_getObjectType(a1);
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  355LL,  ObjectType,  a2);
  return a3(a5, &off_1002768E8);
}

uint64_t sub_10012D8E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType = swift_getObjectType(a2);
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  364LL,  ObjectType,  a3);
  uint64_t v7 = *(void *)(a4 + 32);
  uint64_t v8 = sub_100094338();
  uint64_t v10 = v9;
  uint64_t v11 = swift_getObjectType(v8);
  LOBYTE(v1sub_1001A93A0(0LL, 0) = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 88))(v11, v10);
  swift_unknownObjectRelease(v8);
  if ((v10 & 1) != 0)
  {
    ChannelHandlerContext.fireChannelRead(_:)();
    uint64_t v12 = *(void *)(v7 + 48);
    swift_getObjectType(v12);
    swift_unknownObjectRetain(v12);
    EventLoop.makeSucceededFuture<A>(_:file:line:)();
    uint64_t v14 = v13;
    swift_unknownObjectRelease(v12);
  }

  else
  {
    uint64_t v15 = *(void *)(v7 + 56);
    uint64_t v16 = swift_getObjectType(*(void *)(v7 + 48));
    unint64_t v17 = sub_100029C98();
    uint64_t v18 = swift_allocError(&type metadata for ChannelError, v17, 0LL, 0LL);
    *(void *)uint64_t v19 = 2LL;
    *(_BYTE *)(v19 + 8) = 3;
    uint64_t v14 = EventLoop.makeFailedFuture<A>(_:file:line:)( v18,  "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  366LL,  v16,  &type metadata for ()[8],  v15);
    swift_errorRelease(v18);
  }

  return v14;
}

void sub_10012DA54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t ObjectType = swift_getObjectType(a2);
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  371LL,  ObjectType,  a3);
  sub_10012DD70(a5, a6, a1);
}

uint64_t sub_10012DAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = sub_10003D72C( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelOption.swift",  115LL,  2LL,  368LL);
  uint64_t v13 = swift_allocObject(&unk_1002877D8, 32LL, 7LL);
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = 0LL;
  swift_bridgeObjectRetain();
  sub_100131820( v13,  v12,  a2,  (uint64_t)&unk_1002878A0,  (uint64_t)&unk_1002878C8,  (uint64_t)sub_100132078,  (uint64_t)sub_10007D590);
  swift_release();
  uint64_t v14 = (void *)swift_allocObject(&unk_100287968, 56LL, 7LL);
  void v14[2] = a3;
  uint64_t v14[3] = a4;
  v14[4] = a5;
  void v14[5] = a6;
  v14[6] = a2;
  swift_retain();
  swift_unknownObjectRetain(a3);
  swift_retain();
  swift_retain();
  sub_1000F2E10( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  354LL,  v12,  (uint64_t)sub_100131F58,  (uint64_t)v14);
  uint64_t v16 = v15;
  swift_release();
  swift_release();
  return v16;
}

uint64_t sub_10012DC18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject(&unk_100287918, 32LL, 7LL);
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_retain();
  sub_10012BDA8((uint64_t)sub_1001320B0, v4, (uint64_t)sub_10003D738, (uint64_t)&unk_100287940, (uint64_t)sub_1001320D0);
  uint64_t v6 = v5;
  swift_release();
  uint64_t v7 = sub_1000F2E1C( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoop.swift",  111LL,  2LL,  582LL,  v6);
  swift_release();
  return v7;
}

uint64_t sub_10012DCC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject(&unk_100287E90, 32LL, 7LL);
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_retain();
  sub_10012BDA8((uint64_t)sub_1001320B0, v4, (uint64_t)sub_10003D744, (uint64_t)&unk_100287EB8, (uint64_t)sub_100132464);
  uint64_t v6 = v5;
  swift_release();
  sub_1000F2EA8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/EventLoop.swift",  111LL,  2LL,  582LL,  v6);
  uint64_t v8 = v7;
  swift_release();
  return v8;
}

void sub_10012DD70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t ObjectType = swift_getObjectType(v6);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 16);
  swift_unknownObjectRetain(v6);
  LOBYTE(v7) = v9(ObjectType, v7);
  swift_unknownObjectRelease(v6);
  if ((v7 & 1) != 0)
  {
    ChannelHandlerContext.fireErrorCaught(_:)();
  }

  else
  {
    uint64_t v10 = *(void *)(v5 + 48);
    uint64_t v11 = *(void *)(v5 + 56);
    uint64_t v12 = swift_getObjectType(v10);
    uint64_t v13 = swift_allocObject(&unk_1002876E8, 32LL, 7LL);
    *(void *)(v13 + 16) = a1;
    *(void *)(v13 + 24) = a3;
    uint64_t v14 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v11 + 24);
    swift_unknownObjectRetain(v10);
    swift_retain();
    swift_errorRetain(a3);
    v14(sub_100131EB8, v13, v12, v11);
    swift_unknownObjectRelease(v10);
    swift_release();
  }

uint64_t sub_10012DE94()
{
  return v0;
}

uint64_t sub_10012DEB8()
{
  uint64_t v0 = sub_10012DE94();
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t *ServerBootstrap.deinit()
{
  return v0;
}

uint64_t ServerBootstrap.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 96LL, 7LL);
}

uint64_t (*sub_10012DF38())(uint64_t a1, uint64_t a2)
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  if (v1)
  {
    uint64_t v3 = (void *)swift_allocObject(&unk_100287D50, 40LL, 7LL);
    v3[2] = v0;
    v3[3] = v1;
    v3[4] = v2;
    swift_retain();
    uint64_t v4 = sub_100132360;
  }

  else
  {
    uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))v0[6];
    swift_retain();
  }

  sub_100034E9C(v1, v2);
  return v4;
}

uint64_t sub_10012DFBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 48);
  swift_retain();
  uint64_t v10 = v9(a1, a2);
  swift_release();
  uint64_t v11 = (void *)swift_allocObject(&unk_100287D78, 48LL, 7LL);
  void v11[2] = a1;
  void v11[3] = a2;
  v11[4] = a4;
  v11[5] = a5;
  swift_retain();
  swift_unknownObjectRetain(a1);
  swift_retain();
  sub_1000F2E10( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  445LL,  v10,  (uint64_t)sub_100132388,  (uint64_t)v11);
  uint64_t v13 = v12;
  swift_release();
  swift_release();
  return v13;
}

uint64_t sub_10012E08C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t ObjectType = swift_getObjectType(a1);
  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(ObjectType, a2);
  uint64_t v6 = a3();
  uint64_t v7 = ChannelPipeline.addHandlers(_:position:)(v6, 0LL, 0x8000000000000000LL);
  swift_release();
  swift_bridgeObjectRelease();
  return v7;
}

void ClientBootstrap._channelOptions.getter()
{
}

void ClientBootstrap._channelOptions.setter(uint64_t a1)
{
  *(void *)(v1 + 64) = a1;
  swift_bridgeObjectRelease();
  sub_100013868();
}

void ClientBootstrap._channelOptions.modify(uint64_t a1)
{
}

void ClientBootstrap.__allocating_init(group:)(void *a1, uint64_t a2)
{
}

void ClientBootstrap.__allocating_init(validatingGroup:)(void *a1, uint64_t a2)
{
}

void ClientBootstrap.init(validatingGroup:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  void v3[9] = 10000000000LL;
  Class = (__objc2_class *)object_getClass(a1);
  if (Class != &OBJC_CLASS____TtC25ASOctaneSupportXPCService27MultiThreadedEventLoopGroup
    && Class != &OBJC_CLASS____TtC25ASOctaneSupportXPCService19SelectableEventLoop
    || a1 == 0LL)
  {
    swift_unknownObjectRelease(a1);
    swift_deallocPartialClassInstance(v3, v6, 128LL, 7LL);
  }

  else
  {
    v3[2] = a1;
    v3[3] = a2;
    sub_10010E590();
    v3[8] = sub_100132A70();
    sub_10002A718((uint64_t)(v3 + 8), (uint64_t)v11, 33LL);
    uint64_t v10 = sub_10012C278(0x100000006LL, 1);
    sub_1000356C4(v10);
    swift_unknownObjectRelease(a1);
    v3[6] = sub_10012E2D8;
    v3[7] = 0LL;
    v3[4] = 0LL;
    v3[5] = 0LL;
    *((_OWORD *)v3 + 5) = 0u;
    *((_OWORD *)v3 + 6) = 0u;
    v3[14] = 0LL;
    v3[15] = 0xF000000000000007LL;
  }

  sub_100013858();
}

void sub_10012E2D8(uint64_t a1, uint64_t a2)
{
}

uint64_t ClientBootstrap.channelInitializer(_:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  swift_retain();
  sub_10001EDD8();
  return sub_100132894(v2);
}

uint64_t ClientBootstrap.protocolHandlers(_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(v2 + 32))
  {
    uint64_t v8 = *(void *)(v2 + 32);
    uint64_t v9 = *(void *)(v2 + 40);
    uint64_t v10 = sub_100019310((uint64_t)&unk_1002874F0, 32LL);
    *(void *)(v10 + 16) = v8;
    *(void *)(v10 + 24) = v9;
    sub_100034E9C(v8, v9);
    uint64_t result = sub_100034E8C((uint64_t)sub_100131CB8, v10);
    __break(1u);
  }

  else
  {
    sub_100034E9C(0LL, *(void *)(v2 + 40));
    sub_100034E8C(0LL, 0LL);
    uint64_t v5 = *(void *)(v2 + 32);
    uint64_t v6 = *(void *)(v2 + 40);
    *(void *)(v2 + 32) = a1;
    *(void *)(v2 + 4sub_1001A93A0(0LL, 0) = a2;
    sub_100034E8C(v5, v6);
    sub_10002A4C8();
    return swift_retain();
  }

  return result;
}

void ClientBootstrap.channelOption<A>(_:value:)()
{
  uint64_t v1 = sub_1001328AC();
  sub_1000356C4(v1);
  sub_10002A4C8();
  sub_100019398();
}

uint64_t ClientBootstrap.connectTimeout(_:)(uint64_t a1)
{
  *(void *)(v1 + 72) = a1;
  return ChannelPipeline.syncOperations.getter();
}

void ClientBootstrap.resolver(_:)(uint64_t a1)
{
  uint64_t v3 = sub_100131CD8(a1, v1 + 80);
  sub_1000356C4(v3);
  ChannelPipeline.syncOperations.getter();
  sub_100013858();
}

uint64_t ClientBootstrap.bind(to:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 120);
  *(void *)(v1 + 12sub_1001A93A0(0LL, 0) = a1;
  sub_100029DF4(v3);
  swift_retain();
  return sub_100132894(v1);
}

uint64_t ClientBootstrap.connect(host:port:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3;
  sub_10013291C();
  uint64_t v8 = sub_10002A444();
  uint64_t v9 = sub_100132910(v8);
  uint64_t v11 = v10;
  sub_10002A718(v3 + 80, (uint64_t)v21, 0LL);
  sub_100132034(v3 + 80, (uint64_t)&v19, &qword_1002B40A0);
  if (v20)
  {
    sub_10002A118(&v19, (uint64_t)v22);
  }

  else
  {
    uint64_t v12 = type metadata accessor for GetaddrinfoResolver();
    sub_100019310(v12, 40LL);
    uint64_t v13 = sub_10009B6E0();
    uint64_t v14 = sub_1000429D8(v13, v11, 1, 6);
    v22[3] = v12;
    v22[4] = &off_100277E78;
    v22[0] = v14;
    sub_100034F14((uint64_t)&v19, &qword_1002B40A0);
  }

  sub_100023BAC((uint64_t)v22, (uint64_t)&v19);
  uint64_t v15 = *(void *)(v3 + 72);
  uint64_t v16 = type metadata accessor for HappyEyeballsConnector();
  sub_100019310(v16, 264LL);
  sub_10009B6E0();
  swift_bridgeObjectRetain();
  sub_10001EDE0();
  sub_100163530(&v19, v9, v11, v5, v4, a3, v15, 50000000LL, 250000000LL, (uint64_t)sub_100131D20, v6);
  uint64_t v17 = sub_10016369C();
  sub_100024F0C();
  sub_10009B6D8();
  sub_100019F7C(v22);
  return v17;
}

uint64_t sub_10012E5EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012E6A0(a1, a2, a3, sub_10012E618, 0LL);
}

void sub_10012E618(uint64_t a1, uint64_t a2)
{
}

void sub_10012E620(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100132A98(a1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)(a2 + 8) + 80LL))(v3);
  swift_getObjectType(v4);
  EventLoop.makeSucceededFuture<A>(_:file:line:)();
  sub_10002A338();
  sub_10001DBAC();
}

#error "10012E788: call analysis failed (funcsize=68)"
uint64_t sub_10012E7BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t (*v22)(uint64_t, uint64_t (*)(), void *, char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v4 = v3;
  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 80);
  uint64_t v10 = v9(ObjectType, v8);
  uint64_t v12 = v11;
  uint64_t v13 = swift_getObjectType(v10);
  uint64_t v14 = EventLoop.makePromise<A>(of:file:line:)( (uint64_t)&type metadata for ()[8],  (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  598LL,  v13,  (uint64_t)&type metadata for ()[8],  v12);
  swift_unknownObjectRelease(v10);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 24);
  swift_retain();
  v15(a3, v14, ObjectType, v8);
  swift_release();
  uint64_t v16 = v9(ObjectType, v8);
  uint64_t v18 = v17;
  __int128 v19 = swift_getObjectType(v16);
  uint64_t v20 = *(void *)(v4 + 72);
  uint64_t v21 = (void *)swift_allocObject(&unk_100287F58, 48LL, 7LL);
  void v21[2] = v14;
  void v21[3] = v4;
  v21[4] = a1;
  void v21[5] = a2;
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t (*)(), void *, char *, uint64_t, uint64_t))(v18 + 48);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain(a1);
  uint64_t v23 = v22(v20, sub_1001324C4, v21, &type metadata for ()[8], v19, v18);
  swift_release();
  swift_unknownObjectRelease(v16);
  swift_retain_n(v14, 2LL);
  swift_retain_n(v23, 2LL);
  sub_1000FEED0();
  swift_release();
  swift_release_n(v23, 2LL);
  return v14;
}

uint64_t sub_10012E988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 + 72);
  unint64_t v8 = sub_100029C98();
  uint64_t v9 = swift_allocError(&type metadata for ChannelError, v8, 0LL, 0LL);
  *(void *)uint64_t v10 = v7;
  *(_BYTE *)(v10 + 8) = 0;
  swift_errorRetain(v9);
  sub_100098A70(v9, 1LL, a1);
  swift_errorRelease(v9);
  swift_errorRelease(v9);
  uint64_t ObjectType = swift_getObjectType(a3);
  uint64_t v12 = static NIOHTTPObjectAggregatorError.endingIgnoredMessage.getter();
  return Channel.close(mode:promise:)(v12, 0LL, ObjectType, a4);
}

uint64_t sub_10012EA3C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = sub_100029E1C();
  uint64_t v4 = swift_allocError(&type metadata for EventLoopError, v3, 0LL, 0LL);
  *uint64_t v5 = 1;
  swift_errorRetain(v4);
  sub_100098A70(v4, 1LL, a2);
  swift_errorRelease(v4);
  return swift_errorRelease(v4);
}

void sub_10012EAA0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v25;
  a24 = v26;
  uint64_t v27 = v24;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  char v34 = sub_10012DF38();
  uint64_t v36 = v35;
  sub_10002A718(v24 + 64, (uint64_t)&a10, 0LL);
  uint64_t v37 = *(void *)(v24 + 64);
  uint64_t v38 = *(void *)(v33 + 48);
  sub_10003574C();
  sub_10002A4C8();
  if (sub_1000A8B90())
  {
    uint64_t v39 = sub_10003D72C( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Cha nnelOption.swift",  115LL,  2LL,  368LL);
    uint64_t v40 = sub_100019310((uint64_t)&unk_1002877D8, 32LL);
    *(void *)(v40 + 16) = v37;
    *(void *)(v40 + 24) = 0LL;
    sub_10003574C();
    sub_100131820( v40,  v39,  v33,  (uint64_t)&unk_1002878A0,  (uint64_t)&unk_1002878C8,  (uint64_t)sub_100132078,  (uint64_t)sub_10007D590);
    sub_100056B1C();
    id v41 = (void *)sub_100019310((uint64_t)&unk_100287DC8, 48LL);
    _OWORD v41[2] = v27;
    v41[3] = v33;
    v41[4] = v34;
    v41[5] = v36;
    swift_retain();
    sub_100041B08();
    sub_10002A674();
    sub_100041B5C();
    sub_10013287C();
    sub_1000F2E10(v42, v43, v44, 716LL, v39, v45, (uint64_t)v41);
    uint64_t v47 = v46;
    sub_100024F0C();
    sub_100056B1C();
    unint64_t v48 = (void *)sub_100019310((uint64_t)&unk_100287DF0, 56LL);
    v48[2] = v38;
    v48[3] = &protocol witness table for SelectableEventLoop;
    v48[4] = v33;
    uint64_t v48[5] = v31;
    v48[6] = v29;
    sub_10002A4C8();
    sub_10002A674();
    ChannelPipeline.syncOperations.getter();
    sub_10001EDE0();
    sub_10013287C();
    sub_100132A24(v49, v50, v51, 724LL, v47, v52);
    sub_10009B770();
    sub_100024F0C();
    uint64_t v53 = sub_100019310((uint64_t)&unk_100287E18, 32LL);
    *(void *)(v53 + 16) = sub_1001321D8;
    *(void *)(v53 + 24) = v33;
    sub_10002A674();
    sub_10013287C();
    sub_100132AD8(v54, v55, v56, 727LL, v57);
    sub_10001ED6C();
    sub_10002A7BC();
    sub_10002A674();
    sub_10013287C();
    sub_1000F6B68();
    sub_10002A51C();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v58 = (void *)sub_100019310((uint64_t)&unk_100287DA0, 88LL);
    v58[2] = v38;
    v58[3] = &protocol witness table for SelectableEventLoop;
    __int128 v58[4] = v37;
    v58[5] = v33;
    v58[6] = v24;
    v58[7] = v34;
    v58[8] = v36;
    v58[9] = v31;
    v58[10] = v29;
    sub_10002A4C8();
    sub_100041B08();
    sub_10002A674();
    sub_100041B5C();
    sub_10001EDE0();
    sub_10012DCC4((uint64_t)sub_1001323D4, (uint64_t)v58);
    sub_10002A51C();
  }

  sub_10001EDD8();
  sub_100056B1C();
  sub_1000193DC();
}

void ClientBootstrap.connect(to:)(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = sub_10002A444();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v5, v4);
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned int *)((char *)&unk_100202948 + ((a1 >> 60) & 0xC));
  uint64_t v10 = sub_100019310((uint64_t)&unk_100287518, 32LL);
  *(void *)(v10 + 16) = v2;
  *(void *)(v10 + 24) = a1;
  swift_retain();
  sub_10002A4C8();
  sub_10012E6A0(v6, v8, v9, sub_100131D2C, v10);
  swift_unknownObjectRelease(v6);
  sub_10001ED6C();
  sub_10002A3D4();
}

void ClientBootstrap.connect(unixDomainSocketPath:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = SocketAddress.init(unixDomainSocketPath:)(v3, v2);
  ClientBootstrap.connect(to:)(v4);
  swift_release();
  sub_10001DBAC();
}

#error "10012EF80: call analysis failed (funcsize=92)"
void sub_10012F000( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  char a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23,  uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  sub_10009B384();
  a23 = v28;
  a24 = v29;
  sub_100132948(v30);
  sub_10013287C();
  sub_100132B24(v31, v32, v33, 672LL, v34);
  sub_10002A718(v27 + 64, (uint64_t)&a10, 0LL);
  sub_100132928((uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO"
                         "/ChannelOption.swift");
  uint64_t v35 = sub_100019310((uint64_t)&unk_1002877D8, 32LL);
  uint64_t v36 = sub_100132984(v35);
  sub_100132A2C( v36,  v37,  v38,  (uint64_t)&unk_1002878A0,  (uint64_t)&unk_1002878C8,  (uint64_t)sub_100132078,  (uint64_t)sub_10007D590);
  sub_100023EF4();
  sub_10009B770();
  uint64_t v39 = (void *)sub_100019310((uint64_t)&unk_100287CD8, 40LL);
  sub_100132A3C(v39);
  sub_10001EDE0();
  sub_10002A4C8();
  sub_10013287C();
  sub_100132A80(v40, v41, v42, 673LL, v43, v44);
  uint64_t v46 = v45;
  sub_100024F0C();
  sub_10009B4FC();
  uint64_t v47 = (void *)sub_100019310((uint64_t)&unk_100287D00, 40LL);
  v47[2] = v25;
  v47[3] = v26;
  v47[4] = v24;
  sub_10002A4C8();
  ChannelPipeline.syncOperations.getter();
  swift_unknownObjectRetain(v25);
  sub_10013287C();
  sub_100132A24(v48, v49, v50, 675LL, v46, v51);
  sub_10001ED6C();
  sub_100024F0C();
  uint64_t v52 = sub_100019310((uint64_t)&unk_100287D28, 32LL);
  *(void *)(v52 + 16) = sub_1001321D8;
  *(void *)(v52 + 24) = v24;
  sub_10002A4C8();
  sub_10013287C();
  sub_100132B18(v53, v54, v55, 680LL, v56);
  sub_10002A5A4();
  sub_10002A524();
  sub_10002A4C8();
  sub_10013287C();
  sub_1000F6C18();
  sub_100024F0C();
  sub_1000193DC();
}

uint64_t sub_10012F1A8(uint64_t a1)
{
  return swift_unknownObjectRetain(a1);
}

void sub_10012F1D0()
{
  uint64_t v0 = sub_1000175B0(&qword_1002B0FE8);
  uint64_t v1 = sub_100019310(v0, 80LL);
  sub_1001328C4(v1, (uint64_t)&protocol witness table for SelectableEventLoop);
  ChannelPipeline.syncOperations.getter();
  sub_1000193B8();
}

uint64_t sub_10012F21C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, _UNKNOWN **), uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 120);
  if ((~v7 & 0xF000000000000007LL) == 0) {
    return a3(a2, &off_1002768E8);
  }
  swift_retain();
  sub_10012BD50( v7,  (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  718LL,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10002CE2C);
  uint64_t v10 = v9;
  uint64_t v11 = (void *)swift_allocObject(&unk_100287E68, 40LL, 7LL);
  void v11[2] = a3;
  void v11[3] = a4;
  v11[4] = a2;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000F2E10( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  718LL,  v10,  (uint64_t)sub_1001322F4,  (uint64_t)v11);
  uint64_t v13 = v12;
  swift_release();
  swift_release();
  sub_100029DF4(v7);
  return v13;
}

void sub_10012F32C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectType = swift_getObjectType(a1);
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  725LL,  ObjectType,  a2);
  sub_10012CC6C(a4, a5, (uint64_t)sub_1001A8C10, (uint64_t)&unk_100287E40, (uint64_t)sub_100132428);
}

uint64_t sub_10012F3B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t ObjectType = swift_getObjectType(a1);
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  715LL,  ObjectType,  a2);
  uint64_t v17 = sub_10003D72C( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelOption.swift",  115LL,  2LL,  368LL);
  uint64_t v18 = swift_allocObject(&unk_1002877D8, 32LL, 7LL);
  *(void *)(v18 + 16) = a3;
  *(void *)(v18 + 24) = 0LL;
  swift_bridgeObjectRetain();
  sub_100131820( v18,  v17,  a4,  (uint64_t)&unk_1002878A0,  (uint64_t)&unk_1002878C8,  (uint64_t)sub_100132078,  (uint64_t)sub_10007D590);
  swift_release();
  __int128 v19 = (void *)swift_allocObject(&unk_100287EE0, 48LL, 7LL);
  uint64_t v19[2] = a5;
  void v19[3] = a4;
  v19[4] = a6;
  void v19[5] = a7;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000F2E10( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  716LL,  v17,  (uint64_t)sub_1001327AC,  (uint64_t)v19);
  uint64_t v21 = v20;
  swift_release();
  swift_release();
  uint64_t v22 = (void *)swift_allocObject(&unk_100287F08, 56LL, 7LL);
  void v22[2] = a1;
  v22[3] = a2;
  v22[4] = a4;
  void v22[5] = a8;
  v22[6] = a9;
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain(a1);
  swift_retain();
  sub_1000F2E10( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  724LL,  v21,  (uint64_t)sub_100132410,  (uint64_t)v22);
  swift_release();
  swift_release();
  uint64_t v23 = swift_allocObject(&unk_100287F30, 32LL, 7LL);
  *(void *)(v23 + 16) = sub_1001321D8;
  *(void *)(v23 + 24) = a4;
  swift_retain();
  sub_100172174( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  727LL,  (uint64_t)sub_1001321F4,  v23);
  swift_release();
  swift_release();
  swift_retain();
  sub_1000F6B68();
  uint64_t v25 = v24;
  swift_release();
  return v25;
}

uint64_t *ClientBootstrap.deinit()
{
  return v0;
}

uint64_t ClientBootstrap.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 128LL, 7LL);
}

uint64_t sub_10012F6B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *v3;
  uint64_t result = ClientBootstrap.channelInitializer(_:)(a1, a2);
  *a3 = v5;
  return result;
}

uint64_t sub_10012F6E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *v3;
  uint64_t result = ClientBootstrap.protocolHandlers(_:)(a1, a2);
  *a3 = v5;
  return result;
}

void sub_10012F708(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  ClientBootstrap.channelOption<A>(_:value:)();
  *a1 = v3;
}

uint64_t sub_10012F730@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t result = ClientBootstrap.connectTimeout(_:)(a1);
  *a2 = v4;
  return result;
}

uint64_t sub_10012F758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ClientBootstrap.connect(host:port:)(a1, a2, a3);
}

void sub_10012F778(unint64_t a1)
{
}

void sub_10012F798(uint64_t a1, uint64_t a2)
{
}

void DatagramBootstrap._channelOptions.modify(uint64_t a1)
{
}

void DatagramBootstrap.__allocating_init(group:)(void *a1, uint64_t a2, uint64_t a3)
{
}

void sub_10012F800(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  Class = (__objc2_class *)object_getClass(a1);
  if (Class != &OBJC_CLASS____TtC25ASOctaneSupportXPCService27MultiThreadedEventLoopGroup
    && Class != &OBJC_CLASS____TtC25ASOctaneSupportXPCService19SelectableEventLoop
    || a1 == 0LL)
  {
    __break(1u);
  }

  else
  {
    sub_100019310(v4, a3);
    uint64_t v12 = sub_10009B6E0();
    if (a4(v12, a2))
    {
      sub_100132888();
      sub_10002A3D4();
      return;
    }
  }

  __break(1u);
}

void DatagramBootstrap.withBoundSocket(descriptor:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void DatagramBootstrap.withBoundSocket(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t sub_10012F8E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = swift_retain();
  return sub_10015238C(v3, a2);
}

void sub_10012F934(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10012F944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t ObjectType = swift_getObjectType(v8);
  EventLoop.makePromise<A>(of:file:line:)( (uint64_t)&type metadata for ()[8],  (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  v5,  ObjectType,  (uint64_t)&type metadata for ()[8],  v6);
  uint64_t v10 = swift_retain();
  a5(v10);
  sub_10002A5A4();
  sub_10002A3D4();
}

uint64_t sub_10012F9B8(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = sub_10002A444();
  uint64_t v9 = sub_100132910(v8);
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v4 + 32);
  uint64_t v13 = *(void *)(v5 + 40);
  uint64_t v27 = a4;
  if (v12)
  {
    uint64_t v14 = sub_100019310((uint64_t)&unk_100287BE8, 32LL);
    *(void *)(v14 + 16) = v12;
    *(void *)(v14 + 24) = v13;
    uint64_t v15 = sub_100131DF4;
  }

  else
  {
    uint64_t v14 = sub_100019310((uint64_t)&unk_100287B70, 32LL);
    *(void *)(v14 + 16) = v9;
    *(void *)(v14 + 24) = v11;
    sub_10009B6E0();
    uint64_t v15 = (uint64_t (*)())sub_100132268;
  }

  uint64_t v16 = sub_100019310((uint64_t)&unk_100287B98, 32LL);
  *(void *)(v16 + 16) = v15;
  *(void *)(v16 + 24) = v14;
  sub_10002A718(v5 + 48, (uint64_t)v28, 0LL);
  uint64_t v17 = *(void *)(v5 + 48);
  if (sub_1001329D8() == (Class)&OBJC_CLASS____TtC25ASOctaneSupportXPCService19SelectableEventLoop) {
    uint64_t v18 = v9;
  }
  else {
    uint64_t v18 = 0LL;
  }
  sub_10009B6E0();
  sub_100132AE4(v12);
  swift_bridgeObjectRetain();
  uint64_t v19 = a1(v18);
  sub_10009B6D8();
  sub_10009B6D0();
  uint64_t v20 = *(uint64_t (**)(uint64_t))(v11 + 16);
  sub_100041B08();
  uint64_t v21 = sub_100132A14();
  if ((v20(v21) & 1) != 0)
  {
    sub_1001302BC(v9, v11, v17, v19, (uint64_t)sub_100131DA0, v16, a3, v27);
    sub_100132888();
    swift_bridgeObjectRelease();
    sub_10002A7BC();
    sub_10002A780(v19);
  }

  else
  {
    uint64_t v22 = (void *)sub_100019310((uint64_t)&unk_100287BC0, 80LL);
    void v22[2] = v9;
    v22[3] = v11;
    v22[4] = v17;
    void v22[5] = v19;
    v22[6] = sub_100131DA0;
    v22[7] = v16;
    _BYTE v22[8] = a3;
    v22[9] = v27;
    sub_10009B6E0();
    sub_10009B678();
    ChannelPipeline.syncOperations.getter();
    uint64_t v23 = sub_1000175B0(&qword_1002AA4B0);
    sub_100132938((uint64_t)sub_1001322A8, (uint64_t)v22, v24, v23);
    sub_100132888();
    sub_10001ED6C();
    sub_10002A7BC();
    sub_10009B4FC();
  }

  return v27;
}

uint64_t DatagramBootstrap.bind(host:port:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012FC0C(a1, a2, a3, sub_10012FC60);
}

uint64_t sub_10012FC0C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  return a4(v4, a1, a2, a3);
}

uint64_t sub_10012FC60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = static SocketAddress.makeAddressResolvingHost(_:port:)(a2, a3, a4);
  v8[2] = __chkstk_darwin(v4);
  uint64_t v5 = swift_allocObject(&unk_100287B48, 24LL, 7LL);
  *(void *)(v5 + 16) = v4;
  swift_retain();
  uint64_t v6 = sub_10012F9B8(sub_100132794, (uint64_t)v8, (uint64_t)sub_100132870, v5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v6;
}

uint64_t sub_10012FDC8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = SocketAddress.init(unixDomainSocketPath:)(a2, a3);
  void v9[2] = __chkstk_darwin(v5);
  uint64_t v6 = swift_allocObject(&unk_100287AF8, 24LL, 7LL);
  *(void *)(v6 + 16) = v5;
  swift_retain();
  uint64_t v7 = sub_10012F9B8(sub_100132794, (uint64_t)v9, (uint64_t)sub_100132870, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v7;
}

void DatagramBootstrap.bind(to:)(uint64_t a1)
{
}

void sub_10012FF5C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, void *, uint64_t, uint64_t))
{
  uint64_t v8 = a1;
  v10[2] = a1;
  uint64_t v9 = sub_100019310(a2, 24LL);
  *(void *)(v9 + 16) = v8;
  v8 &= 0x3FFFFFFFFFFFFFFFuLL;
  swift_retain_n(v8, 3LL);
  a5(a3, v10, a4, v9);
  sub_10002A780(v8);
  sub_10001ED6C();
  sub_100019398();
}

uint64_t DatagramBootstrap.bind(unixDomainSocketPath:)(uint64_t a1, uint64_t a2)
{
  return sub_10012FDC8(v3, v4, v2);
}

uint64_t DatagramBootstrap.bind(unixDomainSocketPath:cleanupExistingSocketFile:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013001C(a1, a2, a3, 891LL, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10012FDC8);
}

uint64_t sub_10013001C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if ((v8 & 1) != 0) {
    sub_10011D1D8(v7, v6);
  }
  swift_bridgeObjectRetain();
  return a5(v5, v7, v6);
}

uint64_t sub_1001300EC(uint64_t a1, unint64_t a2)
{
  int v2 = *(_DWORD *)((char *)&unk_100202948 + ((a2 >> 60) & 0xC));
  uint64_t v3 = type metadata accessor for DatagramChannel(0LL);
  swift_allocObject(v3, 377LL, 7LL);
  uint64_t v4 = swift_retain();
  return sub_100153880(v4, v2);
}

uint64_t sub_100130158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = v6;
  uint64_t v8 = swift_allocObject(&unk_100287B20, 32LL, 7LL);
  *(void *)(v8 + 16) = a3;
  *(void *)(v8 + 24) = a4;
  swift_retain();
  swift_retain();
  sub_1000F2E10( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  910LL,  v7,  (uint64_t)sub_100132244,  v8);
  uint64_t v10 = v9;
  swift_release();
  swift_release();
  return v10;
}

void sub_100130214(uint64_t a1, uint64_t a2)
{
}

void sub_100130258(uint64_t a1@<X1>, void *a2@<X8>)
{
  *a2 = v3;
}

void sub_1001302BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v19 = sub_100132928((uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/Sw"
                               "iftNIO/ChannelOption.swift");
  uint64_t v20 = sub_100019310((uint64_t)&unk_1002877D8, 32LL);
  *(void *)(v20 + 16) = a3;
  *(void *)(v20 + 24) = 0LL;
  swift_bridgeObjectRetain();
  sub_100131820( v20,  v19,  a4,  (uint64_t)&unk_100287C88,  (uint64_t)&unk_100287CB0,  (uint64_t)sub_1001327A8,  (uint64_t)sub_10007D75C);
  sub_10002A7BC();
  uint64_t v21 = (void *)sub_100019310((uint64_t)&unk_100287C10, 40LL);
  void v21[2] = a5;
  void v21[3] = a6;
  v21[4] = a4;
  swift_retain();
  sub_100041B08();
  sub_10002A75C();
  sub_10013287C();
  sub_1000F2E10(v22, v23, v24, 930LL, v19, v25, (uint64_t)v21);
  uint64_t v27 = v26;
  sub_100024F0C();
  sub_10002A7BC();
  uint64_t v28 = (void *)sub_100019310((uint64_t)&unk_100287C38, 56LL);
  void v28[2] = v8;
  void v28[3] = a2;
  v28[4] = a7;
  v28[5] = a8;
  v28[6] = a4;
  sub_10002A75C();
  ChannelPipeline.syncOperations.getter();
  sub_10010E590();
  sub_10001EDE0();
  sub_10013287C();
  sub_100132A24(v29, v30, v31, 932LL, v27, v32);
  sub_10009B4FC();
  sub_100024F0C();
  uint64_t v33 = sub_100019310((uint64_t)&unk_100287C60, 32LL);
  *(void *)(v33 + 16) = sub_1001321D8;
  *(void *)(v33 + 24) = a4;
  sub_10002A75C();
  sub_10013287C();
  sub_100132AD8(v34, v35, v36, 935LL, v37);
  sub_10001ED6C();
  sub_10002A7BC();
  sub_10010E590();
  sub_10013287C();
  sub_1000F6C24();
  sub_100024F0C();
  sub_100092B84();
}

uint64_t sub_1001304B4( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t ObjectType = swift_getObjectType(a1);
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  933LL,  ObjectType,  a2);
  return a3(a1, a2, a5);
}

void sub_100130528(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_10013289C();
  sub_100132AB4(v2, v3, v4, v5, 938LL, v6, v7);
  sub_1000193B8();
}

void _s25ASOctaneSupportXPCService17DatagramBootstrapC15_channelOptionsAA07ChannelG0V7StorageVvg_0()
{
}

void _s25ASOctaneSupportXPCService17DatagramBootstrapC15_channelOptionsAA07ChannelG0V7StorageVvs_0( uint64_t a1)
{
  *(void *)(v1 + 48) = a1;
  swift_bridgeObjectRelease();
  sub_100013868();
}

void NIOPipeBootstrap.__allocating_init(validatingGroup:)(uint64_t a1, uint64_t a2)
{
}

void _s25ASOctaneSupportXPCService17DatagramBootstrapC15validatingGroupACSgAA09EventLoopG0_p_tcfc_0( void *a1, uint64_t a2)
{
  Class = (__objc2_class *)object_getClass(a1);
  if (Class != &OBJC_CLASS____TtC25ASOctaneSupportXPCService27MultiThreadedEventLoopGroup
    && Class != &OBJC_CLASS____TtC25ASOctaneSupportXPCService19SelectableEventLoop
    || a1 == 0LL)
  {
    uint64_t v8 = *v2;
    sub_10009B6D8();
    swift_deallocPartialClassInstance(v2, v8, 56LL, 7LL);
  }

  else
  {
    uint64_t v9 = sub_100132A70();
    v2[5] = 0LL;
    v2[6] = v9;
    v2[2] = (uint64_t)a1;
    v2[3] = a2;
    v2[4] = 0LL;
  }

  sub_1000193B8();
}

uint64_t _s25ASOctaneSupportXPCService17DatagramBootstrapC18channelInitializeryACXDAA15EventLoopFutureCyytGAA7Channel_pcF_0( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 32);
  uint64_t v4 = *(void *)(v2 + 40);
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 4sub_1001A93A0(0LL, 0) = a2;
  sub_100034E8C(v5, v4);
  sub_10002A4C8();
  return sub_100132894(v2);
}

void _s25ASOctaneSupportXPCService17DatagramBootstrapC13channelOption_5valueACXDx_5ValueQztAA07ChannelG0RzlF_0()
{
  uint64_t v1 = sub_1001328AC();
  sub_1000356C4(v1);
  sub_10002A4C8();
  sub_100019398();
}

void sub_100130724()
{
  uint64_t v1 = static MultiThreadedEventLoopGroup.currentEventLoop.getter();
  swift_unknownObjectRelease(v1);
  if (v1) {
    __break(1u);
  }
  sub_100171CD0();
  if (!v0)
  {
    S_IFMT.getter();
    if (!(unsigned __int16)S_IFREG.getter()
      || !(unsigned __int16)S_IFDIR.getter()
      || !(unsigned __int16)S_IFLNK.getter()
      || !(unsigned __int16)S_IFBLK.getter())
    {
      unint64_t v2 = sub_100029C98();
      uint64_t v3 = swift_allocError(&type metadata for ChannelError, v2, 0LL, 0LL);
      *(void *)uint64_t v4 = 1LL;
      *(_BYTE *)(v4 + 8) = 3;
      swift_willThrow(v3);
    }
  }

void NIOPipeBootstrap.withInputOutputDescriptor(_:)(uint64_t a1)
{
  uint64_t v2 = dup(a1);
  uint64_t v3 = NIOPipeBootstrap.withPipes(inputDescriptor:outputDescriptor:)(a1, v2);
  sub_10013287C();
  sub_1000F33A8(v4, v5, v6, 1055LL, v3, v2);
  sub_10001EDD8();
  sub_1000193B8();
}

#error "100130AF0: call analysis failed (funcsize=157)"
uint64_t sub_100130B78(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v4 = sub_100024FB4(a2);
  if (v2)
  {
    uint64_t result = swift_unexpectedError(v2, "ASOctaneSupportXPCService/Bootstrap.swift", 41LL, 1LL, 1056LL);
    __break(1u);
  }

  else
  {
    swift_willThrow(v4);
    return swift_errorRetain(a1);
  }

  return result;
}

void sub_100130BD4(uint64_t a1@<X1>, void *a2@<X8>)
{
  *a2 = v3;
}

void sub_100130C38( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v28;
  a24 = v29;
  sub_100132948(v30);
  sub_10013287C();
  sub_100132B24(v31, v32, v33, 1102LL, v34);
  sub_10002A718(v27 + 48, (uint64_t)&a10, 0LL);
  sub_100132928((uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO"
                         "/ChannelOption.swift");
  uint64_t v35 = sub_100019310((uint64_t)&unk_1002877D8, 32LL);
  uint64_t v36 = sub_100132984(v35);
  sub_100132A2C( v36,  v37,  v38,  (uint64_t)&unk_100287AA8,  (uint64_t)&unk_100287AD0,  (uint64_t)sub_1001327A8,  (uint64_t)sub_10007D75C);
  sub_100023EF4();
  sub_10009B770();
  uint64_t v39 = (void *)sub_100019310((uint64_t)&unk_100287A30, 40LL);
  sub_100132A3C(v39);
  sub_10001EDE0();
  sub_10002A4C8();
  sub_10013287C();
  sub_100132A80(v40, v41, v42, 1103LL, v43, v44);
  uint64_t v46 = v45;
  sub_100024F0C();
  sub_10009B4FC();
  uint64_t v47 = (void *)sub_100019310((uint64_t)&unk_100287A58, 40LL);
  v47[2] = v25;
  v47[3] = v26;
  v47[4] = v24;
  sub_10002A4C8();
  ChannelPipeline.syncOperations.getter();
  swift_unknownObjectRetain(v25);
  sub_10013287C();
  sub_100132A24(v48, v49, v50, 1105LL, v46, v51);
  sub_10001ED6C();
  sub_100024F0C();
  uint64_t v52 = sub_100019310((uint64_t)&unk_100287A80, 32LL);
  *(void *)(v52 + 16) = sub_1001321D8;
  *(void *)(v52 + 24) = v24;
  sub_10002A4C8();
  sub_10013287C();
  sub_100132B18(v53, v54, v55, 1110LL, v56);
  sub_10002A5A4();
  sub_10002A524();
  sub_10002A4C8();
  sub_10013287C();
  sub_1000F6CB0();
  sub_100024F0C();
  sub_1000193DC();
}

void sub_100130DE0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  uint64_t ObjectType = swift_getObjectType(a1);
  sub_10013287C();
  EventLoop.assertInEventLoop(file:line:)(v11, v12, v13, a4, ObjectType, a2);
  uint64_t v14 = EventLoop.makePromise<A>(of:file:line:)( (uint64_t)&type metadata for ()[8],  (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Bootstrap.swift",  111LL,  2LL,  a5,  ObjectType,  (uint64_t)&type metadata for ()[8],  a2);
  uint64_t v15 = sub_100132AA0(v14);
  a6(v15);
  sub_10002A51C();
  sub_100023E74();
}

void sub_100130E84()
{
  uint64_t v0 = sub_1000175B0(&qword_1002B0FE8);
  uint64_t v1 = sub_100019310(v0, 80LL);
  sub_1001328C4(v1, (uint64_t)&protocol witness table for SelectableEventLoop);
  ChannelPipeline.syncOperations.getter();
  sub_1000193B8();
}

uint64_t _s25ASOctaneSupportXPCService17DatagramBootstrapCfd_0()
{
  return v0;
}

uint64_t NIOPipeBootstrap.__deallocating_deinit()
{
  uint64_t v0 = sub_10009B654();
  return swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_100130F20( uint64_t a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3, void (*a4)(uint64_t, void, uint64_t))
{
  uint64_t v6 = v9;
  uint64_t v7 = ChannelPipeline.syncOperations.getter();
  a4(v7, 0LL, a1);
  return sub_10002A780(v6);
}

uint64_t (*sub_100130FB4(uint64_t a1, uint64_t a2))(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject(&unk_100287FA8, 32LL, 7LL);
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_unknownObjectRetain(a1);
  return sub_100132508;
}

uint64_t (*sub_100131010(uint64_t a1, uint64_t a2))(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject(&unk_1002879B8, 32LL, 7LL);
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_unknownObjectRetain(a1);
  return sub_10013214C;
}

uint64_t sub_10013106C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType = swift_getObjectType(a3);
  sub_10002C010(a1, (uint64_t)v14);
  swift_dynamicCast( v13,  v14,  (char *)&type metadata for Any + 8,  &type metadata for ChannelOptions.Types.SocketOption,  7LL);
  sub_10002C010(a2, (uint64_t)v12);
  swift_dynamicCast(v11, v12, (char *)&type metadata for Any + 8, &type metadata for Int32, 7LL);
  uint64_t v8 = *(uint64_t (**)(_BYTE *, _BYTE *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a4 + 64);
  unint64_t v9 = sub_10006056C();
  return v8(v13, v11, &type metadata for ChannelOptions.Types.SocketOption, v9, ObjectType, a4);
}

uint64_t sub_10013113C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType = swift_getObjectType(a3);
  uint64_t v8 = sub_10002C010(a1, (uint64_t)v14);
  swift_dynamicCast( v8,  v14,  (char *)&type metadata for Any + 8,  &type metadata for ChannelOptions.Types.BacklogOption,  7LL);
  sub_10002C010(a2, (uint64_t)v13);
  swift_dynamicCast(v12, v13, (char *)&type metadata for Any + 8, &type metadata for Int32, 7LL);
  unint64_t v9 = *(uint64_t (**)(unint64_t, _BYTE *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a4 + 64);
  unint64_t v10 = sub_100132154();
  return v9(v10, v12, &type metadata for ChannelOptions.Types.BacklogOption, v10, ObjectType, a4);
}

_OWORD *sub_100131204@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v39 = a4;
  uint64_t v9 = a1 + 32;
  sub_10002C010(a1, (uint64_t)v35);
  sub_10002C010(v9, (uint64_t)v36);
  uint64_t v10 = *(void *)(a1 + 72);
  uint64_t v37 = *(void *)(a1 + 64);
  uint64_t v11 = v37;
  uint64_t v38 = v10;
  sub_100034728(v35, v31);
  sub_100034728(v36, v32);
  uint64_t v12 = swift_allocObject(&unk_100287FD0, 32LL, 7LL);
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = v10;
  uint64_t v33 = sub_100132860;
  uint64_t v34 = v12;
  sub_10002C010((uint64_t)v31, (uint64_t)v26);
  sub_10002C010((uint64_t)v32, (uint64_t)v27);
  uint64_t v28 = sub_100132860;
  uint64_t v29 = v12;
  sub_100034728(v26, v30);
  swift_retain();
  sub_100019F7C(v27);
  sub_10002C010((uint64_t)v30, (uint64_t)v26);
  if (!swift_dynamicCast( &v21,  v26,  (char *)&type metadata for Any + 8,  &type metadata for ChannelOptions.Types.SocketOption,  6LL))
  {
    *(void *)&__int128 v21 = 0LL;
    BYTE8(v2sub_1001A93A0(v0, 1) = 1;
    sub_100019F7C(v30);
    goto LABEL_8;
  }

  uint64_t v13 = a3;
  int v14 = v39;
  if ((_DWORD)v21 != (_DWORD)a2 || DWORD1(v21) != HIDWORD(a2))
  {
    sub_100019F7C(v30);
LABEL_8:
    sub_100034728(v31, v26);
    sub_100034728(v32, v27);
    uint64_t v16 = v33;
    uint64_t v17 = v34;
    uint64_t v28 = v33;
    uint64_t v29 = v34;
    sub_100034728(v26, &v21);
    sub_100034728(v27, v23);
    uint64_t v24 = v16;
    uint64_t v25 = v17;
    sub_100034728(&v21, (_OWORD *)a5);
    sub_100034728(v23, (_OWORD *)(a5 + 32));
    uint64_t result = (_OWORD *)swift_allocObject(&unk_100287FF8, 32LL, 7LL);
    *((void *)result + 2) = v16;
    *((void *)result + 3) = v17;
    *(void *)(a5 + 64) = sub_100132864;
    *(void *)(a5 + 72) = result;
    return result;
  }

  *uint64_t v13 = 1;
  uint64_t v22 = &type metadata for ChannelOptions.Types.SocketOption;
  *(void *)&__int128 v21 = a2;
  uint64_t v20 = &type metadata for Int32;
  LODWORD(v19) = v14;
  sub_100019F7C(v30);
  sub_100034F14((uint64_t)v31, &qword_1002AA520);
  sub_100034728(&v21, v26);
  sub_100034728(&v19, v27);
  sub_100034728(v26, (_OWORD *)a5);
  uint64_t result = sub_100034728(v27, (_OWORD *)(a5 + 32));
  *(void *)(a5 + 64) = sub_100131764;
  *(void *)(a5 + 72) = 0LL;
  return result;
}

uint64_t sub_100131494@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 32;
  sub_10002C010(a1, (uint64_t)v32);
  sub_10002C010(v8, (uint64_t)v33);
  uint64_t v9 = *(void *)(a1 + 72);
  uint64_t v34 = *(void *)(a1 + 64);
  uint64_t v10 = v34;
  uint64_t v35 = v9;
  sub_100034728(v32, v28);
  sub_100034728(v33, v29);
  uint64_t v11 = swift_allocObject(&unk_1002879E0, 32LL, 7LL);
  *(void *)(v11 + 16) = v10;
  *(void *)(v11 + 24) = v9;
  uint64_t v30 = sub_100132190;
  uint64_t v31 = v11;
  sub_10002C010((uint64_t)v28, (uint64_t)v23);
  sub_10002C010((uint64_t)v29, (uint64_t)v24);
  uint64_t v25 = sub_100132190;
  uint64_t v26 = v11;
  sub_100034728(v23, v27);
  swift_retain();
  sub_100019F7C(v24);
  sub_10002C010((uint64_t)v27, (uint64_t)v23);
  if (swift_dynamicCast( &v18,  v23,  (char *)&type metadata for Any + 8,  &type metadata for ChannelOptions.Types.BacklogOption,  6LL))
  {
    *a2 = 1;
    __int128 v19 = &type metadata for ChannelOptions.Types.BacklogOption;
    uint64_t v17 = &type metadata for Int32;
    LODWORD(v16) = a3;
    sub_100019F7C(v27);
    sub_100034F14((uint64_t)v28, &qword_1002AA520);
    sub_100034728(&v18, v23);
    sub_100034728(&v16, v24);
    sub_100034728(v23, (_OWORD *)a4);
    sub_100034728(v24, (_OWORD *)(a4 + 32));
    uint64_t result = 0LL;
    uint64_t v13 = sub_100131780;
  }

  else
  {
    LOBYTE(v18) = 1;
    sub_100019F7C(v27);
    sub_100034728(v28, v23);
    sub_100034728(v29, v24);
    int v14 = v30;
    uint64_t v15 = v31;
    uint64_t v25 = v30;
    uint64_t v26 = v31;
    sub_100034728(v23, &v18);
    sub_100034728(v24, v20);
    __int128 v21 = v14;
    uint64_t v22 = v15;
    sub_100034728(&v18, (_OWORD *)a4);
    sub_100034728(v20, (_OWORD *)(a4 + 32));
    uint64_t result = swift_allocObject(&unk_100287A08, 32LL, 7LL);
    *(void *)(result + 16) = v14;
    *(void *)(result + 24) = v15;
    uint64_t v13 = sub_100132198;
  }

  *(void *)(a4 + 64) = v13;
  *(void *)(a4 + 72) = result;
  return result;
}

void (*sub_1001316E0(uint64_t a1, uint64_t a2, void (*a3)(__int128 *__return_ptr, void *)))()
{
  v6[0] = a1;
  v6[1] = a2;
  a3(&v5, v6);
  uint64_t v3 = sub_100019310((uint64_t)&unk_1002878F0, 32LL);
  *(_OWORD *)(v3 + 16) = v5;
  return sub_100132084;
}

void sub_100131738(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
}

uint64_t sub_100131764@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10013179C( a1,  (uint64_t (*)(void, void))sub_100130FB4,  (uint64_t)&unk_100287F80,  (uint64_t)sub_10013285C,  a2);
}

uint64_t sub_100131780@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10013179C( a1,  (uint64_t (*)(void, void))sub_100131010,  (uint64_t)&unk_100287990,  (uint64_t)sub_100131CB8,  a2);
}

uint64_t sub_10013179C@<X0>( void *a1@<X0>, uint64_t (*a2)(void, void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v8 = a2(*a1, a1[1]);
  uint64_t v10 = v9;
  uint64_t result = sub_100019310(a3, 32LL);
  *(void *)(result + 16) = v8;
  *(void *)(result + 24) = v10;
  *a5 = a4;
  a5[1] = result;
  return result;
}

void sub_1001317FC(uint64_t (*a1)(void)@<X2>, void *a2@<X8>)
{
  *a2 = a1();
  sub_10001945C();
}

uint64_t sub_100131820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void (*v18)(_OWORD *__return_ptr, __int128 *);
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[2];
  _OWORD v24[3];
  _OWORD v25[2];
  _OWORD v26[3];
  _BYTE v27[24];
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  void (*v31)(_OWORD *__return_ptr, __int128 *);
  uint64_t v32;
  _OWORD v33[2];
  _OWORD v34[2];
  uint64_t result = sub_10002A718(a1 + 16, (uint64_t)v27, 1LL);
  uint64_t v15 = *(void *)(a1 + 16);
  unint64_t v16 = *(void *)(a1 + 24);
  unint64_t v17 = *(void *)(v15 + 16);
  if (v16 != v17)
  {
    if (v16 >= v17)
    {
      __break(1u);
      return result;
    }

    sub_100132034(v15 + 80 * v16 + 32, (uint64_t)&v28, &qword_1002AA520);
    *(void *)(a1 + 24) = v16 + 1;
    if (v29)
    {
      sub_100034728(&v28, v23);
      sub_100034728(&v30, v24);
      uint64_t v22 = a7;
      __int128 v18 = v31;
      __int128 v19 = v32;
      sub_100034728(v23, v25);
      sub_100034728(v24, v26);
      sub_100034728(v25, v34);
      sub_100034728(v26, v33);
      *(void *)&uint64_t v28 = a3;
      *((void *)&v28 + sub_1001A93A0(v0, 1) = &off_1002768E8;
      sub_100041B08();
      sub_10002A75C();
      v18(v25, &v28);
      sub_10002A524();
      (*(void (**)(__int128 *__return_ptr, _OWORD *, _OWORD *))&v25[0])(&v28, v34, v33);
      sub_100024F0C();
      uint64_t v20 = (void *)sub_100019310(a4, 48LL);
      _OWORD v20[2] = a1;
      v20[3] = a2;
      v20[4] = a3;
      void v20[5] = &off_1002768E8;
      __int128 v21 = sub_100019310(a5, 32LL);
      *(void *)(v21 + 16) = a6;
      *(void *)(v21 + 24) = v20;
      sub_10002A75C();
      sub_10002A674();
      sub_10002A4C8();
      sub_100172010( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelOption.swift",  115LL,  2LL,  378LL,  v22,  v21);
      sub_100024F0C();
      sub_10002A7BC();
      sub_100028DB0(a2);
      sub_10002A51C();
      sub_10002A780(v19);
      sub_100019F7C(v33);
      return sub_100019F7C(v34);
    }
  }

  return sub_100132A04();
}

_OWORD *sub_100131A10@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X2>, int *a4@<X3>, uint64_t a5@<X8>)
{
  return sub_100131204(a1, *a2, a3, *a4, a5);
}

Class sub_100131A44(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Class result = object_getClass(a1);
  if (result != (Class)&OBJC_CLASS____TtC25ASOctaneSupportXPCService27MultiThreadedEventLoopGroup
    && result != (Class)&OBJC_CLASS____TtC25ASOctaneSupportXPCService19SelectableEventLoop
    || a1 == 0LL)
  {
    __break(1u);
  }

  else
  {
    uint64_t v11 = (void *)swift_allocObject(a2, 96LL, 7LL);
    uint64_t v12 = (void *)swift_unknownObjectRetain_n(a1, 2LL);
    Class result = (Class)sub_100131AEC(v12, a1, a4, v11, a3, a4);
    if (result)
    {
      Class v13 = result;
      swift_unknownObjectRelease(a1);
      return v13;
    }
  }

  __break(1u);
  return result;
}

void *sub_100131AEC(id a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a4;
  uint64_t v10 = *a4;
  if (a2)
  {
    id v12 = a2;
  }

  else
  {
    swift_unknownObjectRetain(a1);
    id v12 = a1;
    a3 = a6;
  }

  Class = (__objc2_class *)object_getClass(a1);
  BOOL v15 = Class != &OBJC_CLASS____TtC25ASOctaneSupportXPCService27MultiThreadedEventLoopGroup
     && Class != &OBJC_CLASS____TtC25ASOctaneSupportXPCService19SelectableEventLoop
     || a1 == 0LL;
  if (v15
    || ((unint64_t v16 = (__objc2_class *)object_getClass(v12),
         v16 != &OBJC_CLASS____TtC25ASOctaneSupportXPCService27MultiThreadedEventLoopGroup)
      ? (BOOL v17 = v16 == &OBJC_CLASS____TtC25ASOctaneSupportXPCService19SelectableEventLoop)
      : (BOOL v17 = 1),
        v17 ? (BOOL v18 = v12 == 0LL) : (BOOL v18 = 1),
        v18))
  {
    swift_unknownObjectRelease(v12);
    swift_unknownObjectRelease(a1);
    swift_deallocPartialClassInstance(v7, v10, 96LL, 7LL);
    return 0LL;
  }

  else
  {
    _OWORD v7[2] = a1;
    _OWORD v7[3] = a6;
    v7[4] = v12;
    v7[5] = a3;
    swift_unknownObjectRetain(a1);
    swift_unknownObjectRetain(a2);
    swift_unknownObjectRetain(v12);
    v7[10] = sub_10002FA94(0LL, 2LL, 0LL);
    v7[11] = sub_10002FA94(0LL, 2LL, 0LL);
    *((_OWORD *)v7 + 3) = 0u;
    *((_OWORD *)v7 + 4) = 0u;
    swift_beginAccess(v7 + 10, v20, 33LL, 0LL);
    sub_10012C278(0x100000006LL, 1);
    swift_endAccess(v20);
    swift_unknownObjectRelease(v12);
    swift_unknownObjectRelease(a1);
    swift_unknownObjectRelease(a2);
  }

  return v7;
}

uint64_t sub_100131C7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012CB00(a1, a2, a3);
}

uint64_t sub_100131C98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012CB84(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_100131CA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012C7E8(a1, a2, a3, *(unsigned int *)(v3 + 16));
}

void sub_100131CB8()
{
  *uint64_t v0 = v1();
  sub_10001945C();
}

uint64_t sub_100131CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002B40A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100131D20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10012E5EC(a1, a2, a3);
}

void sub_100131D2C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100131D50()
{
  return sub_100131DE0((uint64_t (*)(void, void, void, void, void, void))sub_10012F000);
}

uint64_t sub_100131D5C(uint64_t a1)
{
  return sub_10012F8E4(a1, *(unsigned int *)(v1 + 16));
}

uint64_t sub_100131D74(uint64_t a1)
{
  return sub_1001300EC(a1, *(void *)(v1 + 16));
}

uint64_t sub_100131D90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100130158(a1, a2, a3, *(void *)(v3 + 16));
}

void sub_100131D98(void *a1@<X8>)
{
}

uint64_t sub_100131DA8()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100131DD4()
{
  return sub_100131DE0((uint64_t (*)(void, void, void, void, void, void))sub_100130C38);
}

uint64_t sub_100131DE0(uint64_t (*a1)(void, void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t type metadata accessor for ServerBootstrap()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService15ServerBootstrap);
}

uint64_t type metadata accessor for ServerBootstrap.AcceptHandler()
{
  return objc_opt_self(&OBJC_CLASS____TtCC25ASOctaneSupportXPCService15ServerBootstrapP33_61B05CC9B5147AEDAF47ED9B9F6C143B13AcceptHandler);
}

uint64_t type metadata accessor for ClientBootstrap()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService15ClientBootstrap);
}

uint64_t type metadata accessor for DatagramBootstrap()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService17DatagramBootstrap);
}

uint64_t type metadata accessor for NIOPipeBootstrap()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService16NIOPipeBootstrap);
}

uint64_t sub_100131E98()
{
  uint64_t v1 = sub_10010E20C();
  return swift_deallocObject(v1, v2, v3);
}

void sub_100131EB8()
{
}

void sub_100131ED8(void *a1@<X8>)
{
}

uint64_t sub_100131EE0()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100131F0C()
{
  return sub_10012DAD4(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

uint64_t sub_100131F20(uint64_t a1)
{
  return sub_10012D8E0(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100131F38()
{
  uint64_t v0 = sub_10010E20C();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100131F58()
{
  return sub_1001324AC((uint64_t (*)(void, void, void, void, void))sub_10012D868);
}

uint64_t sub_100131F68()
{
  int v1 = *(unsigned __int8 *)(v0 + 96);
  if (v1 == 2)
  {
    sub_100019F7C((void *)(v0 + 40));
  }

  else if (v1 == 1)
  {
    sub_100085134(*(void *)(v0 + 40));
    sub_10010DAC8();
    if (*(_BYTE *)(v0 + 72) != 4LL)
    {
      uint64_t v2 = *(void *)(v0 + 80);
      if ((~v2 & 0xF000000000000007LL) != 0) {
        sub_100085134(v2);
      }
    }
  }

  else if (!*(_BYTE *)(v0 + 96))
  {
    sub_100018F04(*(void *)(v0 + 40));
  }

  return swift_deallocObject(v0, 97LL, 7LL);
}

uint64_t sub_100132000()
{
  uint64_t v0 = sub_10009B654();
  return swift_deallocObject(v0, v1, v2);
}

void sub_100132024(uint64_t a1)
{
}

void sub_100132034(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000175B0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  sub_10001945C();
}

uint64_t sub_100132078()
{
  return sub_100169E2C();
}

void sub_100132084()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v1);
  sub_1000078BC();
}

uint64_t sub_1001320B0()
{
  return sub_100132430();
}

uint64_t sub_1001320C4()
{
  return sub_100132704((void (*)(void))&_swift_release);
}

uint64_t sub_1001320D0()
{
  void (*v1)(uint64_t *__return_ptr);
  uint64_t v2;
  uint64_t v0 = sub_100132B6C();
  return sub_100130F20(v0, v1, v2, (void (*)(uint64_t, void, uint64_t))sub_100098BD0);
}

uint64_t sub_1001320F8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X2>, int *a3@<X3>, uint64_t a4@<X8>)
{
  return sub_100131494(a1, a2, *a3, a4);
}

uint64_t sub_10013212C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001320F8(a1, *(_BYTE **)(v2 + 24), *(int **)(v2 + 32), a2);
}

uint64_t sub_10013214C(uint64_t a1, uint64_t a2)
{
  return sub_10013113C(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

unint64_t sub_100132154()
{
  unint64_t result = qword_1002B44B0;
  if (!qword_1002B44B0)
  {
    unint64_t result = swift_getWitnessTable( protocol conformance descriptor for ChannelOptions.Types.BacklogOption,  &type metadata for ChannelOptions.Types.BacklogOption);
    atomic_store(result, (unint64_t *)&qword_1002B44B0);
  }

  return result;
}

void (*sub_100132190(uint64_t a1, uint64_t a2))()
{
  return sub_1001316E0(a1, a2, *(void (**)(__int128 *__return_ptr, void *))(v2 + 16));
}

uint64_t sub_100132198@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100169DD0(a1, *(uint64_t (**)(void, void))(v2 + 16), a2);
}

uint64_t sub_1001321A4()
{
  return sub_100132704((void (*)(void))&_swift_unknownObjectRelease);
}

void sub_1001321B0()
{
  uint64_t v0 = sub_100132B6C();
  sub_100130DE0(v0, v1, v2, 1106LL, 1107LL, (void (*)(uint64_t))sub_10012BA2C);
}

uint64_t sub_1001321DC()
{
  uint64_t v0 = sub_10010E20C();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1001321F8(uint64_t a1)
{
  return sub_10012BC34(a1, v1, (void (*)(void))sub_10014E96C);
}

uint64_t sub_100132224()
{
  uint64_t v1 = sub_10010E20C();
  return swift_deallocObject(v1, v2, v3);
}

void sub_100132244()
{
}

uint64_t sub_100132250()
{
  uint64_t v0 = sub_10010E20C();
  return swift_deallocObject(v0, v1, v2);
}

void sub_100132268(void *a1@<X8>)
{
}

uint64_t sub_100132270()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

void sub_1001322A8()
{
  uint64_t v0 = sub_100132A5C();
  sub_1001302BC(v0, v1, v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1001322C0()
{
  uint64_t v0 = sub_10009B654();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1001322E0()
{
  return sub_1001324AC((uint64_t (*)(void, void, void, void, void))sub_1001304B4);
}

void sub_1001322F4()
{
}

uint64_t sub_100132320()
{
  return sub_100132704((void (*)(void))&_swift_unknownObjectRelease);
}

void sub_10013232C()
{
  uint64_t v0 = sub_100132B6C();
  sub_100130DE0(v0, v1, v2, 676LL, 677LL, (void (*)(uint64_t))sub_10012BA2C);
}

uint64_t sub_100132354()
{
  return sub_100132704((void (*)(void))&_swift_release);
}

uint64_t sub_100132360(uint64_t a1, uint64_t a2)
{
  return sub_10012DFBC(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_10013236C()
{
  uint64_t v0 = sub_100041B64();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100132388()
{
  return sub_10012E08C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(uint64_t (**)(void))(v0 + 32));
}

uint64_t sub_100132394()
{
  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t sub_1001323D4()
{
  uint64_t v1 = sub_100132A5C();
  return sub_10012F3B8(v1, v2, v3, v4, v5, v6, v7, v8, *(void *)(v0 + 80));
}

uint64_t sub_100132400()
{
  return sub_10012F21C( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(uint64_t (**)(uint64_t, _UNKNOWN **))(v0 + 32),  *(void *)(v0 + 40));
}

uint64_t sub_100132410()
{
  return sub_1001324AC((uint64_t (*)(void, void, void, void, void))sub_10012F32C);
}

uint64_t sub_10013241C()
{
  return sub_100132704((void (*)(void))&_swift_release);
}

uint64_t sub_100132430()
{
  uint64_t result = v2();
  if (!v1) {
    *uint64_t v0 = result;
  }
  return result;
}

uint64_t sub_100132458()
{
  return sub_100132704((void (*)(void))&_swift_release);
}

uint64_t sub_100132464()
{
  void (*v1)(uint64_t *__return_ptr);
  uint64_t v2;
  uint64_t v0 = sub_100132B6C();
  return sub_100130F20(v0, v1, v2, (void (*)(uint64_t, void, uint64_t))sub_1000993F4);
}

uint64_t sub_10013248C()
{
  uint64_t v0 = sub_10009B654();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1001324AC(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1001324C4()
{
  return sub_10012E988(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1001324E0(uint64_t a1)
{
  return sub_10012EA3C(a1, v1);
}

_OWORD *sub_1001324E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100131A10(a1, *(uint64_t **)(v2 + 16), *(_BYTE **)(v2 + 24), *(int **)(v2 + 32), a2);
}

uint64_t sub_100132508(uint64_t a1, uint64_t a2)
{
  return sub_10013106C(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

void sub_100132514(void *a1@<X8>)
{
}

uint64_t sub_10013251C(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t *__return_ptr, void *);
  uint64_t v5;
  void v6[2];
  uint64_t v3 = *(void (**)(uint64_t *__return_ptr, void *))(v2 + 16);
  v6[0] = a1;
  v6[1] = a2;
  v3(&v5, v6);
  return v5;
}

uint64_t sub_100132554()
{
  if (*(void *)(v0 + 48)) {
    sub_10010DCD0();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease(*(void *)(v0 + 88));
  return swift_deallocObject(v0, 104LL, 7LL);
}

uint64_t sub_1001325A4()
{
  uint64_t v1 = sub_100132A5C();
  return sub_10012CD5C(v1, v2, v3, v4, v5, v6, v7, v8, v9, v0[10], v0[11], v0[12]);
}

void sub_1001325D4(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = (*(uint64_t (**)(void, void))(v2 + 16))(*a1, a1[1]);
  sub_10001945C();
}

uint64_t sub_100132604()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100132628()
{
  if (*(void *)(v0 + 24)) {
    sub_10009B434();
  }
  swift_bridgeObjectRelease();
  uint64_t v1 = sub_100041B64();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100132654()
{
  return sub_10012D070(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100132660()
{
  uint64_t v0 = sub_10009B654();
  return swift_deallocObject(v0, v1, v2);
}

void sub_100132680()
{
}

void sub_1001326A8()
{
  *uint64_t v0 = v1();
  v0[1] = v2;
  sub_10001945C();
}

uint64_t sub_1001326CC()
{
  uint64_t v0 = sub_100041B64();
  return swift_deallocObject(v0, v1, v2);
}

void sub_1001326F0(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1001326F8()
{
  return sub_100132704((void (*)(void))&_swift_release);
}

uint64_t sub_100132704(void (*a1)(void))
{
  return swift_deallocObject(v1, 40LL, 7LL);
}

void sub_100132730()
{
}

uint64_t sub_10013275C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100132780(uint64_t a1)
{
  return sub_100131D5C(a1);
}

uint64_t sub_100132794(uint64_t a1)
{
  return sub_100131D74(a1);
}

uint64_t sub_1001327B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100131CA0(a1, a2, a3);
}

uint64_t sub_1001327C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100131C7C(a1, a2, a3);
}

  ;
}

uint64_t sub_100132888()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_100132894(uint64_t a1)
{
  return swift_retain(a1);
}

uint64_t sub_10013289C()
{
  return v0;
}

uint64_t sub_1001328AC()
{
  return ChannelOptions.Storage.append<A>(key:value:)(v3, v2, v1, v0);
}

uint64_t sub_1001328C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 4sub_1001A93A0(0LL, 0) = v3;
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = 0LL;
  *(_BYTE *)(a1 + 32) = 1;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  return swift_errorRetain(v2);
}

uint64_t sub_1001328E4()
{
  return sub_10012F1A8(v0);
}

  ;
}

uint64_t sub_100132900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return EventLoop.makeFailedFuture<A>(_:file:line:)(a1, a2, a3, a4, a5, v7, a7, v8);
}

uint64_t sub_100132910(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(a1, v1);
}

  ;
}

uint64_t sub_100132928(uint64_t a1)
{
  return sub_10003D72C(a1, 115LL, 2LL, 368LL);
}

void sub_100132938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_100132948(uint64_t a1)
{
  return swift_getObjectType(a1);
}

uint64_t sub_100132964(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

void *sub_100132974(id a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  return sub_100131AEC(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_100132984(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  *(void *)(a1 + 24) = 0LL;
  return swift_bridgeObjectRetain_n(v1, 2LL);
}

void sub_100132998(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
}

uint64_t sub_1001329A0()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 16) = v0 + 1;
  return v2 + 80 * v0 + 32;
}

uint64_t sub_1001329BC()
{
  return v0;
}

Class sub_1001329D8()
{
  return object_getClass(v0);
}

void sub_1001329E0()
{
}

uint64_t sub_1001329F4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(a1, v1);
}

uint64_t sub_100132A04()
{
  return sub_100098A70(0LL, 0LL, v0);
}

uint64_t sub_100132A14()
{
  return v0;
}

void sub_100132A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

uint64_t sub_100132A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100131820(v9, v8, v7, a4, a5, a6, a7);
}

uint64_t sub_100132A3C(void *a1)
{
  a1[2] = v3;
  a1[3] = v2;
  a1[4] = v1;
  return swift_retain(a1);
}

void sub_100132A4C()
{
}

uint64_t sub_100132A5C()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_100132A70()
{
  return sub_10002FA94(0LL, 2LL, 0LL);
}

void sub_100132A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

uint64_t sub_100132A8C()
{
  return swift_getObjectType(*(void *)(v0 + 16));
}

uint64_t sub_100132A98(uint64_t a1)
{
  return swift_getObjectType(a1);
}

uint64_t sub_100132AA0(uint64_t a1)
{
  return swift_retain(a1);
}

uint64_t sub_100132AA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, a2, a3, a4, v5, v4);
}

uint64_t sub_100132AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return EventLoop.makeFailedFuture<A>(_:file:line:)(a1, a2, a3, a4, a5, v8, a7, v7);
}

uint64_t sub_100132AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return EventLoop.makePromise<A>(of:file:line:)(a1, a2, a3, a4, a5, a6, a1, v6);
}

uint64_t sub_100132ACC(uint64_t a1)
{
  return swift_getObjectType(a1);
}

uint64_t sub_100132AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100172174(a1, a2, a3, a4, a5, v5);
}

uint64_t sub_100132AE4(uint64_t a1)
{
  return sub_100034E9C(a1, v1);
}

_OWORD *sub_100132AEC()
{
  return sub_100034728(v0, (_OWORD *)(v1 + 32));
}

void *sub_100132AF8(void (*a1)(void *__return_ptr, uint64_t), uint64_t a2)
{
  return sub_1001693EC(a1, a2, v2);
}

uint64_t sub_100132B04()
{
  return v0;
}

uint64_t sub_100132B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100172174(a1, a2, a3, a4, a5, v5);
}

uint64_t sub_100132B24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, a2, a3, a4, a5, v5);
}

uint64_t sub_100132B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return EventLoop.makeFailedFuture<A>(_:file:line:)(a1, a2, a3, a4, a5, v8, a7, v7);
}

uint64_t sub_100132B3C( uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10012F9B8(a1, (uint64_t)&a9, a3, 0LL);
}

uint64_t sub_100132B48( uint64_t (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10012C86C(a1, (uint64_t)&a9, a3, 0LL);
}

  ;
}

uint64_t sub_100132B60()
{
  return swift_getObjectType(v0);
}

uint64_t sub_100132B6C()
{
  return *(void *)(v0 + 16);
}

void sub_100132B78(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if (!*(void *)(a1 + 16) || (unint64_t v8 = sub_1000F168C(0xD000000000000013LL, 0x800000010021E150LL), (v9 & 1) == 0))
  {
    sub_100056ADC();
    sub_10001A3F8();
LABEL_6:
    swift_bridgeObjectRelease();
    sub_100133834(__dst);
    goto LABEL_7;
  }

  uint64_t v10 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  swift_bridgeObjectRetain_n(v11, 2LL);
  sub_10003A3E4(0xD000000000000011LL, 0x800000010021E170LL);
  if (v14)
  {
    unint64_t v15 = sub_100134700(v13, v14);
    uint64_t v17 = sub_100134720((uint64_t)__dst, (uint64_t)&type metadata for String, v16, v15);
    sub_100023EEC();
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  sub_10001DBCC();
  sub_10003A3E4(0xD00000000000001CLL, 0x800000010021E190LL);
  if (v19)
  {
    unint64_t v20 = sub_100134700(v18, v19);
    uint64_t v22 = sub_100134720((uint64_t)__dst, (uint64_t)&type metadata for String, v21, v20);
    sub_100023EEC();
  }

  else
  {
    uint64_t v22 = 0LL;
  }

  if (!(v17 | v22))
  {
    swift_bridgeObjectRelease_n(v11, 2LL);
    sub_100023EF4();
    sub_100056ADC();
    goto LABEL_6;
  }

  uint64_t v63 = v17;
  sub_10003574C();
  sub_10003A3E4(108LL, 0xE100000000000000LL);
  uint64_t v58 = v23;
  uint64_t v61 = v24;
  swift_bridgeObjectRetain();
  sub_10012A314(0x6F726665726F7473LL, 0xEA0000000000746ELL, a3);
  uint64_t v57 = v25;
  uint64_t v27 = v26;
  sub_100056ADC();
  uint64_t v60 = v27;
  swift_bridgeObjectRetain();
  sub_10003A3E4(0x6D726F6674616C70LL, 0xE800000000000000LL);
  uint64_t v56 = v28;
  uint64_t v59 = v29;
  swift_bridgeObjectRetain();
  sub_10003A3E4(0x646E65747865LL, 0xE600000000000000LL);
  if (v31)
  {
    uint64_t v69 = v30;
    uint64_t v70 = v31;
    __dst[0] = 44LL;
    __dst[1] = 0xE100000000000000LL;
    unint64_t v32 = sub_10001B4A0();
    uint64_t v34 = (void *)sub_100134720((uint64_t)__dst, (uint64_t)&type metadata for String, v33, v32);
    sub_100023EEC();
  }

  else
  {
    uint64_t v34 = _swiftEmptyArrayStorage;
  }

  uint64_t v62 = v22;
  uint64_t v64 = v12;
  uint64_t v35 = v34[2];
  if (v35)
  {
    uint64_t v54 = v11;
    uint64_t v55 = a4;
    sub_10001DBCC();
    uint64_t v36 = (void **)(v34 + 5);
    uint64_t v37 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v38 = (uint64_t)*(v36 - 1);
      int v39 = *v36;
      sub_10003574C();
      v40._uint64_t countAndFlagsBits = v38;
      v40._object = v39;
      unint64_t v41 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100270D58, v40);
      swift_bridgeObjectRelease();
      if (v41 <= 4)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0)
        {
          sub_100134768();
          uint64_t v37 = v43;
        }

        unint64_t v42 = v37[2];
        if (v42 >= v37[3] >> 1)
        {
          sub_100134768();
          uint64_t v37 = v44;
        }

        v37[2] = v42 + 1;
        *((_BYTE *)v37 + v42 + 32) = v41;
      }

      v36 += 2;
      --v35;
    }

    while (v35);
    sub_10001EDA0();
    uint64_t v11 = v54;
    a4 = v55;
  }

  else
  {
    uint64_t v37 = _swiftEmptyArrayStorage;
  }

  sub_10001EDA0();
  sub_100187134((uint64_t)v37);
  uint64_t v67 = v45;
  sub_10003A3E4(1752459639LL, 0xE400000000000000LL);
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  sub_100023EF4();
  if (v49)
  {
    uint64_t v69 = v47;
    uint64_t v70 = v49;
    __dst[0] = 0x66664F636F486461LL;
    __dst[1] = 0xEB00000000737265LL;
    unint64_t v50 = sub_10001B4A0();
    uint64_t v51 = sub_100134730(v50, (uint64_t)&type metadata for String);
    if ((v51 & 1) != 0) {
      uint64_t v51 = sub_1001A0DD0((uint64_t)&v69, 2LL);
    }
    uint64_t v69 = v47;
    uint64_t v70 = v49;
    strcpy((char *)__dst, "winbackOffers");
    HIWORD(__dst[1]) = -4864;
    char v52 = sub_100134730(v51, (uint64_t)&type metadata for String);
    sub_100056ADC();
    if ((v52 & 1) != 0) {
      sub_1001A0DD0((uint64_t)&v69, 3LL);
    }
  }

  uint64_t v53 = v67;
  sub_10001DBCC();
  sub_1000CDD90(a2, (uint64_t)v65);
  debugOnly(_:)(v65);
  __src[0] = v64;
  __src[1] = v11;
  void __src[2] = v58;
  __src[3] = v61;
  __src[4] = v57;
  _OWORD __src[5] = v60;
  __src[6] = v63;
  memset(&__src[7], 0, 24);
  LOBYTE(__src[10]) = 1;
  __src[11] = 0LL;
  LOBYTE(__src[12]) = 1;
  __src[13] = v56;
  __src[14] = v59;
  __src[15] = v53;
  __src[16] = v62;
  sub_1000390C8((uint64_t)v65, (uint64_t)&__src[17], &qword_1002AA7C0);
  sub_10003C27C((uint64_t)__src);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001A3F8();
  sub_100023EF4();
  sub_10001EDA0();
  sub_100023EEC();
  sub_10003C49C((uint64_t)__src);
  memcpy(__dst, __src, 0x1C1uLL);
  debugOnly(_:)(__dst);
LABEL_7:
  sub_1000390C8((uint64_t)__dst, (uint64_t)&v69, &qword_1002AA988);
  sub_1000390C8((uint64_t)&v69, a4, &qword_1002AA988);
  sub_10002A580();
}

void sub_100133070(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(void *)(a1 + 16) || (unint64_t v6 = sub_1000F168C(6580578LL, 0xE300000000000000LL), (v7 & 1) == 0))
  {
    sub_100023EF4();
LABEL_15:
    sub_100023EEC();
    sub_100133834(&v100);
    sub_1000390C8((uint64_t)&v100, (uint64_t)&v123, &qword_1002AA988);
LABEL_16:
    sub_1000390C8((uint64_t)&v123, a3, &qword_1002AA988);
    sub_10002A580();
    return;
  }

  unint64_t v8 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v6);
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  sub_10003574C();
  sub_10003A3E4(0x6D614E726566666FLL, 0xEA00000000007365LL);
  if (!v12)
  {
    sub_100023EF4();
    sub_100023EEC();
    goto LABEL_15;
  }

  uint64_t v94 = v9;
  uint64_t v117 = v9;
  unint64_t v118 = v10;
  uint64_t v123 = v11;
  uint64_t v124 = v12;
  uint64_t v100 = 44LL;
  unint64_t v101 = 0xE100000000000000LL;
  unint64_t v13 = sub_10001B4A0();
  sub_10003574C();
  uint64_t v14 = StringProtocol.components<A>(separatedBy:)( &v100,  &type metadata for String,  &type metadata for String,  v13,  v13);
  sub_10001A3F8();
  *(void *)&__int128 v119 = v14;
  swift_bridgeObjectRetain();
  sub_10003A3E4(1936881250LL, 0xE400000000000000LL);
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  *((void *)&v119 + sub_1001A93A0(v0, 1) = v15;
  uint64_t v120 = v17;
  swift_bridgeObjectRetain();
  sub_10003A3E4(0x7256747845707061LL, 0xEB00000000644973LL);
  uint64_t v95 = a3;
  uint64_t v93 = v18;
  uint64_t v91 = v16;
  if (!v20)
  {
LABEL_66:
    uint64_t v42 = 0LL;
    int v41 = 1;
    goto LABEL_67;
  }

  uint64_t v21 = v20;
  uint64_t v22 = HIBYTE(v20) & 0xF;
  uint64_t v23 = v19 & 0xFFFFFFFFFFFFLL;
  if ((v21 & 0x2000000000000000LL) != 0) {
    uint64_t v24 = v22;
  }
  else {
    uint64_t v24 = v19 & 0xFFFFFFFFFFFFLL;
  }
  if (!v24)
  {
    swift_bridgeObjectRelease();
    goto LABEL_66;
  }

  if ((v21 & 0x1000000000000000LL) != 0)
  {
    uint64_t v26 = sub_100161AEC(v19, v21, 10LL);
    LOBYTE(v16) = v80;
LABEL_41:
    swift_bridgeObjectRelease();
    int v41 = v16 & 1;
    if (v41) {
      uint64_t v42 = 0LL;
    }
    else {
      uint64_t v42 = v26;
    }
LABEL_67:
    sub_10003A3E4(0x496D616441707061LL, 0xE900000000000064LL);
    uint64_t v89 = v42;
    HIDWORD(v87) = v41;
    uint64_t v85 = v14;
    if (v50)
    {
      sub_100160A5C();
      uint64_t v52 = v51;
      char v54 = v53 & 1;
    }

    else
    {
      uint64_t v52 = 0LL;
      char v54 = 1;
    }

    sub_10003A3E4(0x6C61636F4C756369LL, 0xE900000000000065LL);
    uint64_t v56 = v55;
    uint64_t v83 = v55;
    uint64_t v58 = v57;
    swift_bridgeObjectRetain();
    sub_10003A3E4(1682531955LL, 0xE400000000000000LL);
    uint64_t v60 = v59;
    uint64_t v81 = v59;
    uint64_t v62 = v61;
    sub_100023EF4();
    swift_bridgeObjectRetain();
    sub_1000CDD90(a2, (uint64_t)__src);
    memcpy(__dst, __src, 0x139uLL);
    debugOnly(_:)(__dst);
    sub_1000390C8((uint64_t)v121, (uint64_t)v97, &qword_1002AA7C0);
    sub_10013383C(__src);
    uint64_t v63 = sub_1000A3B50((uint64_t)v97);
    v98[0] = v94;
    v98[1] = v10;
    v98[2] = v56;
    v98[3] = v58;
    v98[4] = v60;
    v98[5] = v62;
    v98[6] = v85;
    v98[7] = v91;
    v98[8] = v93;
    v98[9] = v52;
    LOBYTE(v98[10]) = v54;
    LOBYTE(v56) = v54;
    uint64_t v64 = v52;
    uint64_t v65 = v89;
    v98[11] = v89;
    char v66 = BYTE4(v87) & 1;
    LOBYTE(v98[12]) = BYTE4(v87) & 1;
    v98[14] = 0LL;
    v98[13] = 0LL;
    v98[15] = &_swiftEmptySetSingleton;
    v98[16] = 0LL;
    sub_10013475C(v63, (uint64_t)&v98[17], v67, v68, v69, v70, v71, v72, v81, v83, v85, v87, v89, v91);
    sub_10003C27C((uint64_t)v98);
    sub_1000A75C8(__src);
    sub_100023EEC();
    sub_10001EDA0();
    swift_bridgeObjectRelease();
    sub_100056ADC();
    swift_bridgeObjectRelease();
    memcpy(v99, v98, 0x1C1uLL);
    uint64_t v73 = debugOnly(_:)(v99);
    uint64_t v100 = v117;
    unint64_t v101 = v118;
    uint64_t v102 = v84;
    uint64_t v103 = v58;
    uint64_t v104 = v82;
    uint64_t v105 = v62;
    __int128 v106 = v119;
    uint64_t v107 = v120;
    uint64_t v108 = v64;
    char v109 = v56;
    uint64_t v110 = v65;
    char v111 = v66;
    uint64_t v113 = 0LL;
    uint64_t v112 = 0LL;
    uint64_t v114 = &_swiftEmptySetSingleton;
    uint64_t v115 = 0LL;
    sub_10013475C(v73, (uint64_t)&v116, v74, v75, v76, v77, v78, v79, v82, v84, v86, v88, v90, v92);
    sub_10003C49C((uint64_t)&v100);
    sub_1000390C8((uint64_t)v99, (uint64_t)&v123, &qword_1002AA988);
    a3 = v95;
    goto LABEL_16;
  }

  if ((v21 & 0x2000000000000000LL) == 0)
  {
    if ((v19 & 0x1000000000000000LL) != 0) {
      uint64_t v25 = (unsigned __int8 *)((v21 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v25 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v19);
    }
    uint64_t v26 = (uint64_t)sub_100161AC4(v25, v23);
    LOBYTE(v16) = v27 & 1;
    goto LABEL_41;
  }

  uint64_t v123 = v19;
  uint64_t v124 = v21 & 0xFFFFFFFFFFFFFFLL;
  if (v19 == 43)
  {
    if (!v22) {
      goto LABEL_74;
    }
    if (v22 == 1) {
      goto LABEL_40;
    }
    sub_10005768C();
    if (!v32 & v31) {
      goto LABEL_40;
    }
    uint64_t v35 = v34;
    if (v33 == 2)
    {
LABEL_45:
      LOBYTE(v16) = 0;
      uint64_t v26 = v35;
      goto LABEL_41;
    }

    sub_10005768C();
    if (!v32 & v31) {
      goto LABEL_40;
    }
    uint64_t v26 = 10LL * v38 + v37;
    if (v36 != 3)
    {
      while (1)
      {
        sub_100024EAC();
        if (!v32 & v31) {
          goto LABEL_40;
        }
        sub_100134748();
        if (!v32) {
          goto LABEL_40;
        }
        uint64_t v26 = v40 + v39;
        if (__OFADD__(v40, v39)) {
          goto LABEL_40;
        }
        sub_100024EFC();
        if (v32) {
          goto LABEL_41;
        }
      }
    }

LABEL_57:
    LOBYTE(v16) = 0;
    goto LABEL_41;
  }

  if (v19 != 45)
  {
    uint64_t v35 = (v19 - 48);
    if (v22 == 1) {
      goto LABEL_45;
    }
    sub_10005768C();
    if (!v32 & v31) {
      goto LABEL_40;
    }
    uint64_t v26 = 10LL * v45 + v44;
    if (v43 != 2)
    {
      while (1)
      {
        sub_100024EAC();
        if (!v32 & v31) {
          goto LABEL_40;
        }
        sub_100134748();
        if (!v32) {
          goto LABEL_40;
        }
        uint64_t v26 = v47 + v46;
        if (__OFADD__(v47, v46)) {
          goto LABEL_40;
        }
        sub_100024EFC();
        if (v32) {
          goto LABEL_41;
        }
      }
    }

    goto LABEL_57;
  }

  if (v22)
  {
    if (v22 != 1)
    {
      sub_10005768C();
      if (!(!v32 & v31))
      {
        if (v29 == 2)
        {
          LOBYTE(v16) = 0;
          uint64_t v26 = -(uint64_t)v30;
          goto LABEL_41;
        }

        if ((v28 - 48) <= 9u)
        {
          uint64_t v26 = -10LL * v30 - (v28 - 48);
          if (v29 == 3) {
            goto LABEL_57;
          }
          while (1)
          {
            sub_100024EAC();
            if (!v32 & v31) {
              break;
            }
            sub_100134748();
            if (!v32) {
              break;
            }
            uint64_t v26 = v49 - v48;
            if (__OFSUB__(v49, v48)) {
              break;
            }
            sub_100024EFC();
            if (v32) {
              goto LABEL_41;
            }
          }
        }
      }
    }

                uint64_t v36 = "Negative value is not representable";
                unsigned __int8 v37 = 35LL;
                goto LABEL_59;
              }

            unsigned __int8 v39 = 0LL;
LABEL_58:
            LOBYTE(v28) = 1;
            goto LABEL_74;
          }

          unsigned __int8 v39 = (v28 - 48);
          if (v35 != 1)
          {
            unsigned __int8 v39 = 10LL * (v28 - 48) + (BYTE1(v28) - 48);
            if (v35 != 2)
            {
              while (1)
              {
                sub_100196538();
                if (!v32 && v42) {
                  goto LABEL_57;
                }
                sub_100196528();
                if (!v32) {
                  goto LABEL_57;
                }
                uint64_t v42 = __CFADD__(10 * v39, v47);
                unsigned __int8 v39 = 10 * v39 + v47;
                if (v42) {
                  goto LABEL_57;
                }
                sub_1001964F8();
                if (v32) {
                  goto LABEL_74;
                }
              }
            }
          }
        }

        uint64_t v124 = v29;
        _Block_release(v1);
        if ((v124 & 1) != 0)
        {
LABEL_58:
          uint64_t v2 = 1LL;
          goto LABEL_59;
        }

  swift_bridgeObjectRetain();
  sub_1001B833C(v21, v20, v24);
  swift_bridgeObjectRelease();
  sub_10012A554(v21, v20, *a5);
  char v53 = v52;
  uint64_t v55 = v54;
  swift_bridgeObjectRelease();
  if ((v55 & 1) == 0)
  {
    sub_10002E93C();
    uint64_t v56 = *(void *)(*a6 + 16);
    sub_10002EB18();
    uint64_t v57 = *a6;
    *(void *)(v57 + 16) = v56 + 1;
    uint64_t v58 = v57 + 16 * v56;
    *(void *)(v58 + 32) = v28;
    *(void *)(v58 + 4sub_1001A93A0(0LL, 0) = v53;
    *a6 = v57;
    goto LABEL_30;
  }

  __break(1u);
}

unint64_t sub_1001336AC(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100273318, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5) {
    return 5LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1001336F4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100133734 + 4 * byte_100202960[a1]))( 0x6F43646574736F68LL,  0xED0000746E65746ELL);
}

uint64_t sub_100133734()
{
  return 1684957547LL;
}

uint64_t sub_100133744()
{
  return 0x66664F636F486461LL;
}

uint64_t sub_100133764()
{
  return 0x4F6B6361626E6977LL;
}

uint64_t sub_100133788()
{
  return 0x6C61636F4C756369LL;
}

void sub_1001337A4(char *a1)
{
}

unint64_t sub_1001337B0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1001336AC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001337DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1001336F4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100133804()
{
}

void sub_10013380C(uint64_t a1)
{
}

void sub_100133814(uint64_t a1)
{
}

void sub_10013381C(void *a1)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  a1[3] = 1LL;
  bzero(a1 + 4, 0x119uLL);
}

void sub_100133834(void *a1)
{
}

void *sub_10013383C(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[6];
  uint64_t v4 = a1[8];
  uint64_t v5 = a1[10];
  uint64_t v6 = a1[12];
  uint64_t v7 = a1[14];
  uint64_t v8 = a1[16];
  uint64_t v9 = a1[18];
  uint64_t v10 = a1[19];
  uint64_t v12 = a1[21];
  uint64_t v13 = a1[24];
  uint64_t v14 = a1[28];
  uint64_t v15 = a1[30];
  uint64_t v16 = a1[32];
  uint64_t v17 = a1[34];
  uint64_t v18 = a1[36];
  swift_bridgeObjectRetain(a1[38]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  return a1;
}

uint64_t storeEnumTagSinglePayload for FetchSoftwareAddOnsRequest.Extension( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1001339A4 + 4 * byte_10020296A[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001339D8 + 4 * byte_100202965[v4]))();
}

uint64_t sub_1001339D8(uint64_t result)
{
  *(_BYTE *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_1001339E0(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x1001339E8LL);
  }
  return result;
}

uint64_t sub_1001339F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001339FCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_100133A00(uint64_t result)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_100133A08(uint64_t result)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FetchSoftwareAddOnsRequest.Extension()
{
  return &type metadata for FetchSoftwareAddOnsRequest.Extension;
}

uint64_t destroy for FetchSoftwareAddOnsRequest(void *a1)
{
  uint64_t result = a1[20];
  if (result != 1)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[23]);
    swift_bridgeObjectRelease(a1[25]);
    swift_bridgeObjectRelease(a1[27]);
    swift_bridgeObjectRelease(a1[29]);
    swift_bridgeObjectRelease(a1[31]);
    swift_bridgeObjectRelease(a1[33]);
    swift_bridgeObjectRelease(a1[35]);
    swift_bridgeObjectRelease(a1[36]);
    swift_bridgeObjectRelease(a1[38]);
    swift_bridgeObjectRelease(a1[41]);
    swift_bridgeObjectRelease(a1[45]);
    swift_bridgeObjectRelease(a1[47]);
    swift_bridgeObjectRelease(a1[49]);
    swift_bridgeObjectRelease(a1[51]);
    swift_bridgeObjectRelease(a1[53]);
    return swift_bridgeObjectRelease(a1[55]);
  }

  return result;
}

uint64_t initializeWithCopy for FetchSoftwareAddOnsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1001A93A0(0LL, 0) = v6;
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v7;
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v9 = *(void *)(a2 + 72);
  *(_BYTE *)(a1 + 8sub_1001A93A0(0LL, 0) = *(_BYTE *)(a2 + 80);
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v9;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v11 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v11;
  uint64_t v12 = *(void *)(a2 + 120);
  uint64_t v13 = *(void *)(a2 + 128);
  *(void *)(a1 + 12sub_1001A93A0(0LL, 0) = v12;
  *(void *)(a1 + 128) = v13;
  unsigned int v38 = (_BYTE *)(a2 + 136);
  uint64_t v40 = (void *)(a1 + 136);
  uint64_t v14 = *(void *)(a2 + 160);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  if (v14 == 1)
  {
    memcpy(v40, v38, 0x139uLL);
  }

  else
  {
    uint64_t v15 = v14;
    *uint64_t v40 = *(void *)v38;
    *(_BYTE *)(a1 + 144) = v38[8];
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 16sub_1001A93A0(0LL, 0) = v14;
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
    uint64_t v16 = *(void *)(a2 + 192);
    uint64_t v37 = *(void *)(a2 + 184);
    *(void *)(a1 + 184) = v37;
    *(void *)(a1 + 192) = v16;
    uint64_t v17 = *(void *)(a2 + 208);
    uint64_t v36 = *(void *)(a2 + 200);
    *(void *)(a1 + 20sub_1001A93A0(0LL, 0) = v36;
    *(void *)(a1 + 208) = v17;
    uint64_t v18 = *(void *)(a2 + 224);
    uint64_t v35 = *(void *)(a2 + 216);
    *(void *)(a1 + 216) = v35;
    *(void *)(a1 + 224) = v18;
    uint64_t v19 = *(void *)(a2 + 240);
    uint64_t v34 = *(void *)(a2 + 232);
    *(void *)(a1 + 232) = v34;
    *(void *)(a1 + 24sub_1001A93A0(0LL, 0) = v19;
    uint64_t v21 = *(void *)(a2 + 248);
    uint64_t v20 = *(void *)(a2 + 256);
    *(void *)(a1 + 248) = v21;
    *(void *)(a1 + 256) = v20;
    uint64_t v23 = *(void *)(a2 + 264);
    uint64_t v22 = *(void *)(a2 + 272);
    *(void *)(a1 + 264) = v23;
    *(void *)(a1 + 272) = v22;
    uint64_t v24 = *(void *)(a2 + 288);
    uint64_t v32 = *(void *)(a2 + 280);
    uint64_t v33 = v23;
    *(void *)(a1 + 28sub_1001A93A0(0LL, 0) = v32;
    *(void *)(a1 + 288) = v24;
    uint64_t v41 = *(void *)(a2 + 304);
    *(void *)(a1 + 296) = *(void *)(a2 + 296);
    *(void *)(a1 + 304) = v41;
    *(_WORD *)(a1 + 312) = *(_WORD *)(a2 + 312);
    uint64_t v39 = *(void *)(a2 + 328);
    *(void *)(a1 + 32sub_1001A93A0(0LL, 0) = *(void *)(a2 + 320);
    *(void *)(a1 + 328) = v39;
    *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
    *(void *)(a1 + 336) = *(void *)(a2 + 336);
    uint64_t v25 = *(void *)(a2 + 360);
    *(void *)(a1 + 352) = *(void *)(a2 + 352);
    *(void *)(a1 + 36sub_1001A93A0(0LL, 0) = v25;
    uint64_t v26 = *(void *)(a2 + 376);
    *(void *)(a1 + 368) = *(void *)(a2 + 368);
    *(void *)(a1 + 376) = v26;
    uint64_t v27 = *(void *)(a2 + 392);
    *(void *)(a1 + 384) = *(void *)(a2 + 384);
    *(void *)(a1 + 392) = v27;
    uint64_t v28 = *(void *)(a2 + 408);
    *(void *)(a1 + 40sub_1001A93A0(0LL, 0) = *(void *)(a2 + 400);
    *(void *)(a1 + 408) = v28;
    uint64_t v29 = *(void *)(a2 + 424);
    *(void *)(a1 + 416) = *(void *)(a2 + 416);
    *(void *)(a1 + 424) = v29;
    uint64_t v30 = *(void *)(a2 + 440);
    *(void *)(a1 + 432) = *(void *)(a2 + 432);
    *(void *)(a1 + 44sub_1001A93A0(0LL, 0) = v30;
    *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
  }

  return a1;
}

uint64_t assignWithCopy for FetchSoftwareAddOnsRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1001A93A0(0LL, 0) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 72);
  *(_BYTE *)(a1 + 8sub_1001A93A0(0LL, 0) = *(_BYTE *)(a2 + 80);
  *(void *)(a1 + 72) = v4;
  uint64_t v5 = *(void *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(void *)(a1 + 88) = v5;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 12sub_1001A93A0(0LL, 0) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (void *)(a1 + 136);
  uint64_t v7 = (uint64_t *)(a2 + 136);
  uint64_t v8 = *(void *)(a2 + 160);
  if (*(void *)(a1 + 160) != 1LL)
  {
    if (v8 != 1)
    {
      uint64_t v12 = *v7;
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      *uint64_t v6 = v12;
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 16sub_1001A93A0(0LL, 0) = *(void *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v13 = *(void *)(a2 + 168);
      *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
      *(void *)(a1 + 168) = v13;
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      *(void *)(a1 + 20sub_1001A93A0(0LL, 0) = *(void *)(a2 + 200);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 24sub_1001A93A0(0LL, 0) = *(void *)(a2 + 240);
      *(void *)(a1 + 248) = *(void *)(a2 + 248);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 256) = *(void *)(a2 + 256);
      *(void *)(a1 + 264) = *(void *)(a2 + 264);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      *(void *)(a1 + 28sub_1001A93A0(0LL, 0) = *(void *)(a2 + 280);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      *(void *)(a1 + 304) = *(void *)(a2 + 304);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
      *(_BYTE *)(a1 + 313) = *(_BYTE *)(a2 + 313);
      *(void *)(a1 + 32sub_1001A93A0(0LL, 0) = *(void *)(a2 + 320);
      *(void *)(a1 + 328) = *(void *)(a2 + 328);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v14 = *(void *)(a2 + 336);
      *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
      *(void *)(a1 + 336) = v14;
      *(void *)(a1 + 352) = *(void *)(a2 + 352);
      *(void *)(a1 + 36sub_1001A93A0(0LL, 0) = *(void *)(a2 + 360);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 368) = *(void *)(a2 + 368);
      *(void *)(a1 + 376) = *(void *)(a2 + 376);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 384) = *(void *)(a2 + 384);
      *(void *)(a1 + 392) = *(void *)(a2 + 392);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 40sub_1001A93A0(0LL, 0) = *(void *)(a2 + 400);
      *(void *)(a1 + 408) = *(void *)(a2 + 408);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 416) = *(void *)(a2 + 416);
      *(void *)(a1 + 424) = *(void *)(a2 + 424);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 432) = *(void *)(a2 + 432);
      *(void *)(a1 + 44sub_1001A93A0(0LL, 0) = *(void *)(a2 + 440);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
      return a1;
    }

    sub_10003A024((void *)(a1 + 136));
    goto LABEL_6;
  }

  if (v8 == 1)
  {
LABEL_6:
    memcpy((void *)(a1 + 136), (const void *)(a2 + 136), 0x139uLL);
    return a1;
  }

  uint64_t v9 = *v7;
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *uint64_t v6 = v9;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 16sub_1001A93A0(0LL, 0) = *(void *)(a2 + 160);
  uint64_t v10 = *(void *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(void *)(a1 + 168) = v10;
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 20sub_1001A93A0(0LL, 0) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 24sub_1001A93A0(0LL, 0) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 28sub_1001A93A0(0LL, 0) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_BYTE *)(a1 + 313) = *(_BYTE *)(a2 + 313);
  *(void *)(a1 + 32sub_1001A93A0(0LL, 0) = *(void *)(a2 + 320);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  uint64_t v11 = *(void *)(a2 + 336);
  *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
  *(void *)(a1 + 336) = v11;
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(void *)(a1 + 36sub_1001A93A0(0LL, 0) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(void *)(a1 + 40sub_1001A93A0(0LL, 0) = *(void *)(a2 + 400);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  *(void *)(a1 + 44sub_1001A93A0(0LL, 0) = *(void *)(a2 + 440);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *initializeWithTake for FetchSoftwareAddOnsRequest(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1C1uLL);
}

uint64_t assignWithTake for FetchSoftwareAddOnsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1001A93A0(0LL, 0) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_BYTE *)(a1 + 8sub_1001A93A0(0LL, 0) = *(_BYTE *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 12sub_1001A93A0(0LL, 0) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 160) != 1LL)
  {
    uint64_t v9 = *(void *)(a2 + 160);
    if (v9 != 1)
    {
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 16sub_1001A93A0(0LL, 0) = v9;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      swift_bridgeObjectRelease();
      uint64_t v10 = *(void *)(a2 + 200);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      *(void *)(a1 + 20sub_1001A93A0(0LL, 0) = v10;
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void *)(a2 + 216);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(void *)(a1 + 216) = v11;
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)(a2 + 232);
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      *(void *)(a1 + 232) = v12;
      swift_bridgeObjectRelease();
      uint64_t v13 = *(void *)(a2 + 248);
      *(void *)(a1 + 24sub_1001A93A0(0LL, 0) = *(void *)(a2 + 240);
      *(void *)(a1 + 248) = v13;
      swift_bridgeObjectRelease();
      uint64_t v14 = *(void *)(a2 + 264);
      *(void *)(a1 + 256) = *(void *)(a2 + 256);
      *(void *)(a1 + 264) = v14;
      swift_bridgeObjectRelease();
      uint64_t v15 = *(void *)(a2 + 280);
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      *(void *)(a1 + 28sub_1001A93A0(0LL, 0) = v15;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      swift_bridgeObjectRelease();
      uint64_t v16 = *(void *)(a2 + 304);
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      *(void *)(a1 + 304) = v16;
      swift_bridgeObjectRelease();
      *(_WORD *)(a1 + 312) = *(_WORD *)(a2 + 312);
      uint64_t v17 = *(void *)(a2 + 328);
      *(void *)(a1 + 32sub_1001A93A0(0LL, 0) = *(void *)(a2 + 320);
      *(void *)(a1 + 328) = v17;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 336) = *(void *)(a2 + 336);
      *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
      uint64_t v18 = *(void *)(a2 + 360);
      *(void *)(a1 + 352) = *(void *)(a2 + 352);
      *(void *)(a1 + 36sub_1001A93A0(0LL, 0) = v18;
      swift_bridgeObjectRelease();
      uint64_t v19 = *(void *)(a2 + 376);
      *(void *)(a1 + 368) = *(void *)(a2 + 368);
      *(void *)(a1 + 376) = v19;
      swift_bridgeObjectRelease();
      uint64_t v20 = *(void *)(a2 + 392);
      *(void *)(a1 + 384) = *(void *)(a2 + 384);
      *(void *)(a1 + 392) = v20;
      swift_bridgeObjectRelease();
      uint64_t v21 = *(void *)(a2 + 408);
      *(void *)(a1 + 40sub_1001A93A0(0LL, 0) = *(void *)(a2 + 400);
      *(void *)(a1 + 408) = v21;
      swift_bridgeObjectRelease();
      uint64_t v22 = *(void *)(a2 + 424);
      *(void *)(a1 + 416) = *(void *)(a2 + 416);
      *(void *)(a1 + 424) = v22;
      swift_bridgeObjectRelease();
      uint64_t v23 = *(void *)(a2 + 440);
      *(void *)(a1 + 432) = *(void *)(a2 + 432);
      *(void *)(a1 + 44sub_1001A93A0(0LL, 0) = v23;
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
      return a1;
    }

    sub_10003A024((void *)(a1 + 136));
  }

  memcpy((void *)(a1 + 136), (const void *)(a2 + 136), 0x139uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchSoftwareAddOnsRequest(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 449))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FetchSoftwareAddOnsRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 44sub_1001A93A0(0LL, 0) = 0LL;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 20sub_1001A93A0(0LL, 0) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12sub_1001A93A0(0LL, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4sub_1001A93A0(0LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_BYTE *)(result + 448) = 0;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 36sub_1001A93A0(0LL, 0) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 28sub_1001A93A0(0LL, 0) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 449) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 449) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for FetchSoftwareAddOnsRequest()
{
  return &type metadata for FetchSoftwareAddOnsRequest;
}

unint64_t sub_1001346C4()
{
  unint64_t result = qword_1002B44B8;
  if (!qword_1002B44B8)
  {
    unint64_t result = swift_getWitnessTable(byte_100202A04, &type metadata for FetchSoftwareAddOnsRequest.Extension);
    atomic_store(result, (unint64_t *)&qword_1002B44B8);
  }

  return result;
}

unint64_t sub_100134700(unint64_t a1, unint64_t a2)
{
  STACK[0x540] = a1;
  STACK[0x548] = a2;
  STACK[0x378] = 44LL;
  STACK[0x380] = 0xE100000000000000LL;
  return sub_10001B4A0();
}

uint64_t sub_100134720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return StringProtocol.components<A>(separatedBy:)(a1, a2, a2, a4, a4);
}

uint64_t sub_100134730(uint64_t a1, uint64_t a2)
{
  return StringProtocol.contains<A>(_:)(&STACK[0x378], a2, a2, v2, v2);
}

  ;
}

uint64_t sub_10013475C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  return sub_1000390C8((uint64_t)va, a2, v14);
}

void sub_100134768()
{
}

uint64_t sub_100134774()
{
  uint64_t v1 = swift_bridgeObjectRetain();
  uint64_t v2 = sub_1000CC010(v1);
  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 32);
    swift_bridgeObjectRetain();
    swift_release(v2);
  }

  else
  {
    uint64_t v3 = *(void *)(v0 + 40);
    swift_bridgeObjectRetain();
  }

  return v3;
}

uint64_t sub_1001347E8(uint64_t a1, unint64_t a2)
{
  if (a1 == 25705 && a2 == 0xE200000000000000LL)
  {
    unint64_t v5 = 0xE200000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705LL, 0xE200000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x617A696C61636F6CLL && a2 == 0xED0000736E6F6974LL)
  {
    unint64_t v8 = 0xED0000736E6F6974LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x617A696C61636F6CLL, 0xED0000736E6F6974LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 1701667182 && a2 == 0xE400000000000000LL)
  {
    unint64_t v10 = 0xE400000000000000LL;
    goto LABEL_24;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2LL;
  }

  if (a1 == 0x7069726373627573LL && a2 == 0xED0000736E6F6974LL)
  {
    swift_bridgeObjectRelease(0xED0000736E6F6974LL);
    return 3LL;
  }

  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7069726373627573LL, 0xED0000736E6F6974LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_1001349AC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001349D4 + 4 * byte_100202A70[a1]))( 25705LL,  0xE200000000000000LL);
}

uint64_t sub_1001349D4()
{
  return 0x617A696C61636F6CLL;
}

uint64_t sub_100134A1C()
{
  return sub_1001349AC(*v0);
}

uint64_t sub_100134A24@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001347E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100134A48(uint64_t a1)
{
  unint64_t v2 = sub_100134FE0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100134A70(uint64_t a1)
{
  unint64_t v2 = sub_100134FE0();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100134A98()
{
  return v0;
}

uint64_t sub_100134ACC()
{
  return swift_deallocClassInstance(v0, 64LL, 7LL);
}

uint64_t type metadata accessor for OctaneSubscriptionGroup()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService23OctaneSubscriptionGroup);
}

uint64_t sub_100134B0C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000175B0(&qword_1002B4640);
  __chkstk_darwin(v5);
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100019F58(a1, v6);
  unint64_t v8 = sub_100134FE0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for OctaneSubscriptionGroup.CodingKeys,  &type metadata for OctaneSubscriptionGroup.CodingKeys,  v8,  v6,  v7);
  uint64_t v9 = v3[2];
  uint64_t v10 = v3[3];
  LOBYTE(v16) = 0;
  sub_100023EB4(v9, v10, (uint64_t)&v16);
  if (v2) {
    return sub_1000227A0();
  }
  uint64_t v16 = v3[4];
  sub_1000175B0(&qword_1002B4610);
  sub_10013501C(&qword_1002B4648);
  sub_100135284(v11);
  uint64_t v13 = v3[5];
  uint64_t v14 = v3[6];
  LOBYTE(v16) = 2;
  swift_bridgeObjectRetain();
  sub_100023EB4(v13, v14, (uint64_t)&v16);
  if (!v13)
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = v3[7];
    sub_1000175B0(&qword_1002B4628);
    sub_100135078(&qword_1002B4658);
    sub_100135284(v15);
    return sub_1000227A0();
  }

  sub_1000227A0();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100134CC8(void *a1)
{
  uint64_t v3 = swift_allocObject(v1, 64LL, 7LL);
  sub_100134D14(a1);
  return v3;
}

void *sub_100134D14(void *a1)
{
  uint64_t v4 = sub_1000175B0(&qword_1002B4600);
  __chkstk_darwin(v4);
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100019F58(a1, v5);
  unint64_t v7 = sub_100134FE0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for OctaneSubscriptionGroup.CodingKeys,  &type metadata for OctaneSubscriptionGroup.CodingKeys,  v7,  v5,  v6);
  if (v2)
  {
    uint64_t v10 = type metadata accessor for OctaneSubscriptionGroup();
    swift_deallocPartialClassInstance(v1, v10, 64LL, 7LL);
  }

  else
  {
    LOBYTE(v12) = 0;
    v1[2] = KeyedDecodingContainer.decode(_:forKey:)(&v12, v4);
    v1[3] = v8;
    sub_1000175B0(&qword_1002B4610);
    sub_10013501C(&qword_1002B4618);
    sub_100135260();
    v1[4] = v12;
    LOBYTE(v12) = 2;
    v1[5] = KeyedDecodingContainer.decode(_:forKey:)(&v12, v4);
    v1[6] = v9;
    sub_1000175B0(&qword_1002B4628);
    sub_100135078(&qword_1002B4630);
    sub_100135260();
    sub_100023E48();
    v1[7] = v12;
  }

  sub_100019F7C(a1);
  return v1;
}

uint64_t sub_100134F48@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100134CC8(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100134F70(void *a1)
{
  return sub_100134B0C(a1);
}

uint64_t sub_100134F90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  if (v4 == v6 && v5 == v7) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0LL);
  }
}

uint64_t sub_100134FC0(uint64_t *a1, uint64_t *a2)
{
  return sub_100134F90(*a1, *a2) & 1;
}

unint64_t sub_100134FE0()
{
  unint64_t result = qword_1002B4608;
  if (!qword_1002B4608)
  {
    unint64_t result = swift_getWitnessTable(byte_100202C14, &type metadata for OctaneSubscriptionGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4608);
  }

  return result;
}

void sub_10013501C(unint64_t *a1)
{
  if (!*a1)
  {
    uint64_t v2 = sub_100018EC0(&qword_1002B4610);
    uint64_t v3 = sub_1001352A4(v2, (uint64_t (*)(uint64_t))type metadata accessor for OctaneLocalization);
    atomic_store(sub_1000D94C8(v3, v4, v5, v6, v7, v8, v9, v10, v11, v12), a1);
  }

  sub_100041AF4();
}

void sub_100135078(unint64_t *a1)
{
  if (!*a1)
  {
    uint64_t v2 = sub_100018EC0(&qword_1002B4628);
    uint64_t v3 = sub_1001352A4(v2, (uint64_t (*)(uint64_t))type metadata accessor for OctaneSubscription);
    atomic_store(sub_1000D94C8(v3, v4, v5, v6, v7, v8, v9, v10, v11, v12), a1);
  }

  sub_100041AF4();
}

uint64_t storeEnumTagSinglePayload for OctaneSubscriptionGroup.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100135120 + 4 * byte_100202A79[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100135154 + 4 * byte_100202A74[v4]))();
}

uint64_t sub_100135154(uint64_t result)
{
  *(_BYTE *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_10013515C(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x100135164LL);
  }
  return result;
}

uint64_t sub_100135170(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x100135178LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10013517C(uint64_t result)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_100135184(uint64_t result)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OctaneSubscriptionGroup.CodingKeys()
{
  return &type metadata for OctaneSubscriptionGroup.CodingKeys;
}

unint64_t sub_1001351A4()
{
  unint64_t result = qword_1002B4668;
  if (!qword_1002B4668)
  {
    unint64_t result = swift_getWitnessTable(byte_100202BEC, &type metadata for OctaneSubscriptionGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4668);
  }

  return result;
}

unint64_t sub_1001351E4()
{
  unint64_t result = qword_1002B4670;
  if (!qword_1002B4670)
  {
    unint64_t result = swift_getWitnessTable("uY\b", &type metadata for OctaneSubscriptionGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4670);
  }

  return result;
}

unint64_t sub_100135224()
{
  unint64_t result = qword_1002B4678;
  if (!qword_1002B4678)
  {
    unint64_t result = swift_getWitnessTable("]Y\b", &type metadata for OctaneSubscriptionGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B4678);
  }

  return result;
}

uint64_t sub_100135260()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(v0, v2 - 81, v1, v0);
}

uint64_t sub_100135284(uint64_t a1)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 72, v3 - 73, v1, v2, a1);
}

uint64_t sub_1001352A4(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  return sub_1000221A8(v3, a2, v2);
}

uint64_t EventLoop.makePromise<A>(of:file:line:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = EventLoopPromise.init(eventLoop:file:line:)(v8, a8, a2, a3, a4, a5);
  sub_10009B28C();
  return v9;
}

BOOL sub_1001352F0()
{
  BOOL result = sub_1000A8B90();
  if (!result) {
    __break(1u);
  }
  return result;
}

uint64_t EventLoop.preconditionInEventLoop(file:line:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = sub_1001386C8(a1, a2, a3, a4, a5, a6);
  if ((result & 1) == 0) {
    __break(1u);
  }
  return result;
}

void EventLoop.makeSucceededFuture<A>(_:file:line:)()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  __chkstk_darwin(v7);
  sub_10001DAD0();
  uint64_t v14 = v13 - v12;
  if (v15 == (char *)&type metadata for () + 8)
  {
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 72))(v11, v3);
    uint64_t v20 = type metadata accessor for EventLoopFuture(0LL, (uint64_t)&type metadata for () + 8, v18, v19);
    swift_dynamicCastClassUnconditional(v17, v20, 0LL, 0LL, 0LL);
  }

  else
  {
    uint64_t v16 = v8;
    type metadata accessor for EventLoopFuture(0LL, v5, v9, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v14, v16, v5);
    EventLoopFuture.__allocating_init(eventLoop:value:file:line:)();
    swift_unknownObjectRetain(v1);
    sub_10002A580();
  }

#error "1001354C4: call analysis failed (funcsize=34)"
uint64_t sub_1001354E8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v2 = sub_100137AA4(a1, a2);
  swift_bridgeObjectRelease();
  return v2;
}

void EventLoopGroup.shutdownGracefully(_:)()
{
  uint64_t v4 = v3;
  sub_1001386F0();
  uint64_t v5 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10001DAD0();
  uint64_t v9 = v8 - v7;
  sub_1000435C0();
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v9, enum case for DispatchQoS.QoSClass.default(_:), v5);
  uint64_t v10 = (void *)static OS_dispatch_queue.global(qos:)(v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 16))(v10, v2, v1, v0, v4);
}

void Scheduled.init(promise:cancellationTask:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100019310((uint64_t)&unk_100288560, 32LL);
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  sub_100041B5C();
  swift_retain();
  EventLoopFuture.whenFailure(_:)((uint64_t)sub_100135F94, v6);
  swift_release(a1);
  swift_release(v6);
  swift_release(a3);
  sub_1000193B8();
}

void static NIODeadline.now()()
{
  uint64_t v0 = type metadata accessor for DispatchTime(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_10001DAD0();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = static DispatchTime.now()();
  DispatchTime.uptimeNanoseconds.getter(v5);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
  sub_1000193B8();
}

uint64_t static NIODeadline.+ infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    sub_100083070();
    uint64_t result = sub_100083058( (uint64_t)"Fatal error",  v3,  v4,  (uint64_t)"Negative value is not representable",  v5,  v6,  (uint64_t)"Swift/Integers.swift");
    __break(1u);
  }

  else if (__OFADD__(a1, a2))
  {
    return 0x7FFFFFFFFFFFFFFFLL;
  }

  else
  {
    return (a1 + a2) & ~((a1 + a2) >> 63);
  }

  return result;
}

void EventLoop.submit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = EventLoop.makePromise<A>(of:file:line:)(v12, v13, v14, v15, 559LL, v16, a4, a5);
  uint64_t v18 = (void *)sub_100019310((uint64_t)&unk_100288588, 64LL);
  v18[2] = v5;
  v18[3] = a4;
  v18[4] = a5;
  void v18[5] = v17;
  v18[6] = v7;
  v18[7] = v6;
  uint64_t v19 = *(void (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(a5 + 24);
  sub_10009B678();
  sub_10002A75C();
  v19(sub_1001373F4, v18, v5, a5);
  sub_10009B4FC();
  sub_100023E74();
}

BOOL sub_1001357D8()
{
  BOOL result = sub_1000A8B90();
  if (result) {
    __break(1u);
  }
  return result;
}

uint64_t EventLoop.preconditionNotInEventLoop(file:line:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = sub_1001386C8(a1, a2, a3, a4, a5, a6);
  if ((result & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100135820()
{
  return swift_unknownObjectRetain(v0);
}

uint64_t sub_10013584C()
{
  return swift_unknownObjectRetain(v0);
}

uint64_t EventLoop.next()()
{
  return swift_unknownObjectRetain(v0);
}

void sub_1001358A0()
{
}

void sub_1001358BC(uint64_t a1)
{
  uint64_t v3 = sub_1000175B0(&qword_1002AA540);
  uint64_t v4 = sub_100019310(v3, 48LL);
  *(_OWORD *)(v4 + 16) = xmmword_1001F3C00;
  *(void *)(v4 + 32) = v1;
  *(void *)(v4 + 4sub_1001A93A0(0LL, 0) = a1;
  swift_retain();
  sub_1000193B8();
}

void EventLoop.makeIterator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002AA540);
  uint64_t v5 = sub_100019310(v4, 48LL);
  *(_OWORD *)(v5 + 16) = xmmword_1001F3C00;
  *(void *)(v5 + 32) = v2;
  *(void *)(v5 + 4sub_1001A93A0(0LL, 0) = a2;
  sub_10009B28C();
  sub_1000193B8();
}

void EventLoop.makeCompletedFuture<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v20;
  a20 = v21;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v26 = *(void *)(v22 - 8);
  __chkstk_darwin(v24);
  sub_10001DAD0();
  uint64_t v29 = v28 - v27;
  sub_100018EC0(&qword_1002A9710);
  uint64_t v30 = type metadata accessor for Result(0LL, v23);
  __chkstk_darwin(v30);
  uint64_t v32 = (uint64_t *)((char *)&a9 - v31);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))((char *)&a9 - v31, v25, v30);
  if (swift_getEnumCaseMultiPayload(v32, v30) == 1)
  {
    uint64_t v34 = *v32;
    sub_100138758();
    EventLoop.makeFailedFuture<A>(_:file:line:)();
    swift_errorRelease(v34);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v26 + 32))(v29, v32, v23);
    sub_100138758();
    EventLoop.makeSucceededFuture<A>(_:file:line:)();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v29, v23);
  }

  sub_10002A580();
}

uint64_t static TimeAmount.seconds(_:)(uint64_t a1)
{
  uint64_t result = 1000000000 * a1;
  return result;
}

Swift::Void __swiftcall Scheduled.cancel()()
{
  unint64_t v0 = sub_100029E1C();
  uint64_t v1 = swift_allocError(&type metadata for EventLoopError, v0, 0LL, 0LL);
  *uint64_t v2 = 1;
  EventLoopPromise.fail(_:)(v1);
  swift_errorRelease(v1);
}

void *NIODeadline.distantPast.unsafeMutableAddressor()
{
  return &static NIODeadline.distantPast;
}

uint64_t static NIODeadline.- infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0x8000000000000000LL) == 0 && (a2 & 0x8000000000000000LL) == 0) {
    return a1 - a2;
  }
  sub_100083070();
  uint64_t result = sub_100083058( (uint64_t)"Fatal error",  v3,  v4,  (uint64_t)"Negative value is not representable",  v5,  v6,  (uint64_t)"Swift/Integers.swift");
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> EventLoopGroup.syncShutdownGracefully()()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags(0LL);
  __chkstk_darwin(v0);
  sub_10001DAD0();
  uint64_t v3 = v2 - v1;
  sub_10013287C();
  v4();
  uint64_t v5 = type metadata accessor for Lock();
  sub_100019310(v5, 24LL);
  uint64_t v6 = Lock.init()();
  uint64_t v7 = sub_100019310((uint64_t)&unk_1002885B0, 24LL);
  *(void *)(v7 + 16) = 0LL;
  aBlock[4] = debugOnly(_:);
  void aBlock[5] = 0LL;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000169C8;
  aBlock[3] = &unk_1002885C8;
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v18 = _swiftEmptyArrayStorage;
  unint64_t v9 = sub_100025C10();
  uint64_t v10 = sub_1000175B0(&qword_1002A9118);
  unint64_t v11 = sub_100025C50();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v10, v11, v0, v9);
  uint64_t v12 = type metadata accessor for DispatchWorkItem(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  uint64_t v13 = DispatchWorkItem.init(flags:block:)(v3, v8);
  uint64_t v14 = (void *)sub_100019310((uint64_t)&unk_100288600, 40LL);
  void v14[2] = v6;
  uint64_t v14[3] = v7;
  v14[4] = v13;
  sub_10002A674();
  swift_retain();
  swift_retain();
  EventLoopGroup.shutdownGracefully(_:)();
  uint64_t v15 = swift_release();
  dispatch thunk of DispatchWorkItem.wait()(v15);
  Lock.lock()();
  swift_beginAccess(v7 + 16, aBlock, 0LL, 0LL);
  if (*(void *)(v7 + 16))
  {
    uint64_t v16 = swift_errorRetain(*(void *)(v7 + 16));
    swift_willThrow(v16);
  }

  Lock.unlock()();
  swift_release();
  swift_release();
  swift_release();
}

uint64_t static NIODeadline.< infix(_:_:)(unint64_t a1, unint64_t a2)
{
  if ((a1 & 0x8000000000000000LL) == 0 && (a2 & 0x8000000000000000LL) == 0) {
    return a1 < a2;
  }
  sub_100083070();
  uint64_t result = sub_100083058( (uint64_t)"Fatal error",  v3,  v4,  (uint64_t)"Negative value is not representable",  v5,  v6,  (uint64_t)"Swift/Integers.swift");
  __break(1u);
  return result;
}

void EventLoop.flatSubmit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)sub_100019310((uint64_t)&unk_100288628, 56LL);
  v10[2] = v5;
  void v10[3] = a4;
  void v10[4] = a5;
  v10[5] = v7;
  v10[6] = v6;
  unint64_t v11 = *(void (**)(uint64_t (*)@<X0>(uint64_t *@<X8>), void *, uint64_t, uint64_t, uint64_t))(a5 + 32);
  uint64_t v14 = type metadata accessor for EventLoopFuture(0LL, a4, v12, v13);
  sub_10002A75C();
  v11(sub_100137A34, v10, v14, v5, a5);
  sub_100138764();
  uint64_t v15 = (void *)sub_100019310((uint64_t)&unk_100288650, 40LL);
  uint64_t v15[2] = v5;
  v15[3] = a4;
  v15[4] = a5;
  sub_10013287C();
  EventLoopFuture.flatMap<A>(file:line:_:)();
  sub_100024F0C();
  sub_10002A524();
  sub_100023E74();
}

uint64_t sub_100135F10(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v6 = a1;
  swift_errorRetain(a1);
  uint64_t v3 = sub_1000175B0(&qword_1002A9710);
  uint64_t result = swift_dynamicCast(&v5, &v6, v3, &type metadata for EventLoopError, 6LL);
  if ((result & 1) != 0 && v5 == 1) {
    return a2();
  }
  return result;
}

uint64_t sub_100135F7C()
{
  uint64_t v0 = sub_10010E20C();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100135F94(uint64_t a1)
{
  return sub_100135F10(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_100135F9C()
{
  uint64_t v4 = sub_100138644();
  if ((sub_10009B22C(v4) & 1) != 0) {
    return sub_100136024(v3);
  }
  uint64_t v6 = sub_100019310((uint64_t)&unk_1002889A8, 32LL);
  *(void *)(v6 + 16) = v1;
  *(void *)(v6 + 24) = v3;
  uint64_t v7 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v0 + 24);
  sub_100041B5C();
  v7(sub_100138400, v6, v2, v0);
  return swift_release();
}

uint64_t sub_100136024(uint64_t result)
{
  uint64_t v2 = v1;
  uint64_t v3 = v1[7];
  if (v3)
  {
    uint64_t v4 = result;
    uint64_t ObjectType = swift_getObjectType(v2[3]);
    uint64_t v6 = v2[4];
    uint64_t v7 = v2[8];
    uint64_t v8 = (void *)swift_allocObject(&unk_1002889D0, 40LL, 7LL);
    v8[2] = v3;
    _OWORD v8[3] = v7;
    void v8[4] = v2;
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t (*)@<X0>(uint64_t *@<X8>), void *, uint64_t, uint64_t, uint64_t))(v6 + 48);
    sub_100034E9C(v3, v7);
    sub_100034E9C(v3, v7);
    swift_retain();
    uint64_t v10 = sub_1000175B0(&qword_1002AAD98);
    uint64_t v11 = v9(v4, sub_100138448, v8, v10, ObjectType, v6);
    swift_release();
    v2[6] = v11;
    swift_release();
    sub_10013613C();
    return sub_100034E8C(v3, v7);
  }

  return result;
}

uint64_t sub_10013613C()
{
  uint64_t v1 = *(void *)(v0 + 48);
  if (v1)
  {
    swift_retain_n(*(void *)(v0 + 48), 4LL);
    swift_retain_n(v0, 2LL);
    sub_1000FFFDC();
    swift_release();
    swift_release_n(v1, 2LL);
    swift_retain_n(v1, 3LL);
    swift_retain_n(v0, 2LL);
    sub_1001000A8();
    swift_release();
    return swift_release_n(v1, 3LL);
  }

  return result;
}

uint64_t RepeatedTask.cancel(promise:)()
{
  uint64_t v4 = sub_100138644();
  if ((sub_10009B22C(v4) & 1) != 0) {
    return sub_10013627C(v3);
  }
  uint64_t v6 = sub_100019310((uint64_t)&unk_100288678, 32LL);
  *(void *)(v6 + 16) = v1;
  *(void *)(v6 + 24) = v3;
  uint64_t v7 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v0 + 24);
  sub_10002A75C();
  sub_100041B5C();
  v7(sub_100137A50, v6, v2, v0);
  return swift_release();
}

#error "1001362F4: call analysis failed (funcsize=77)"
uint64_t sub_1001363BC(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v3 = *(void *)(result + 40);
  if (v3) {
    uint64_t result = sub_100098A70(0LL, 0LL, v3);
  }
  if (a2) {
    return sub_100098A70(0LL, 0LL, a2);
  }
  return result;
}

uint64_t sub_100136408(uint64_t a1, uint64_t a2)
{
  return swift_release();
}

void sub_100136468()
{
  if (v0[7])
  {
    uint64_t v1 = v0;
    uint64_t ObjectType = swift_getObjectType(v0[3]);
    uint64_t v3 = v0[4];
    uint64_t v4 = v0[2];
    char v5 = *(uint64_t (**)(uint64_t, void (*)(uint64_t *@<X8>), void *, uint64_t, uint64_t, uint64_t))(v3 + 48);
    swift_retain();
    uint64_t v6 = sub_1000175B0(&qword_1002AAD98);
    uint64_t v7 = v5(v4, sub_10013849C, v0, v6, ObjectType, v3);
    swift_release();
    v1[6] = v7;
    swift_release();
    sub_10013613C();
  }

void sub_100136518(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (uint64_t (*)(void *))a1[7];
  if (v4)
  {
    uint64_t v5 = a1[8];
    swift_retain();
    uint64_t v6 = v4(a1);
    sub_100034E8C((uint64_t)v4, v5);
  }

  else
  {
    swift_getObjectType(a1[3]);
    EventLoop.makeSucceededFuture<A>(_:file:line:)();
    uint64_t v6 = v7;
  }

  *a2 = v6;
}

void *RepeatedTask.deinit()
{
  return v0;
}

uint64_t RepeatedTask.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

uint64_t EventLoopIterator.next()()
{
  unint64_t v1 = v0[1];
  unint64_t v2 = *(void *)(*v0 + 16LL);
  if (v1 == v2) {
    return 0LL;
  }
  if (v1 >= v2)
  {
    __break(1u);
  }

  else
  {
    uint64_t v4 = *(void *)(*v0 + 16 * v1 + 32);
    v0[1] = v1 + 1;
    return swift_unknownObjectRetain(v4);
  }

  return result;
}

void sub_100136668(void *a1@<X8>)
{
  *a1 = debugOnly(_:)(*v1);
  a1[1] = v3;
  sub_10001945C();
}

uint64_t sub_10013668C()
{
  return static NIODeadline.distantPast.getter();
}

uint64_t sub_100136694()
{
  return sub_1001354E8(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t sub_10013669C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000680FC(a1, a2, a3, *v3, v3[1]);
}

void sub_1001366A4(uint64_t *a1@<X8>)
{
  *a1 = EventLoopIterator.next()();
  a1[1] = v2;
  sub_10001945C();
}

uint64_t sub_1001366C4()
{
  uint64_t v1 = sub_1000175B0(&qword_1002AAD98);
  uint64_t v2 = swift_allocObject(v1, 72LL, 7LL);
  *(void *)(v2 + 32) = v0;
  *(void *)(v2 + 4sub_1001A93A0(0LL, 0) = &protocol witness table for EmbeddedEventLoop;
  *(void *)(v2 + 16) = 0LL;
  *(_BYTE *)(v2 + 24) = 0;
  *(void *)(v2 + 56) = 0LL;
  *(void *)(v2 + 64) = 0LL;
  *(void *)(v2 + 48) = 0LL;
  swift_retain();
  return v2;
}

uint64_t EventLoop.makeSucceededVoidFuture()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  sub_10009B28C();
  return v4;
}

uint64_t EventLoop._preconditionSafeToWait(file:line:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 64))();
}

double EventLoop._promiseCompleted(futureIdentifier:)@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

uint64_t EventLoopGroup.description.getter(uint64_t a1)
{
  return String.init<A>(describing:)(&v3, a1);
}

uint64_t static TimeAmount.microseconds(_:)(uint64_t a1)
{
  uint64_t result = 1000 * a1;
  return result;
}

uint64_t static TimeAmount.milliseconds(_:)(uint64_t a1)
{
  uint64_t result = 1000000 * a1;
  return result;
}

uint64_t static TimeAmount.minutes(_:)(uint64_t a1)
{
  uint64_t result = 60000000000LL * a1;
  return result;
}

uint64_t static TimeAmount.hours(_:)(uint64_t a1)
{
  uint64_t result = 3600000000000LL * a1;
  return result;
}

void TimeAmount.hash(into:)(int a1, Swift::UInt64 a2)
{
}

uint64_t sub_100136874()
{
  return NIODeadline.hashValue.getter(*v0);
}

void sub_10013687C(int a1)
{
}

BOOL static HTTPHeaders.Index.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 < a2;
}

BOOL sub_100136894(uint64_t *a1, uint64_t *a2)
{
  return static HTTPHeaders.Index.< infix(_:_:)(*a1, *a2);
}

BOOL sub_1001368A0(uint64_t *a1, uint64_t *a2)
{
  return sub_1001A8F34(*a1, *a2);
}

BOOL sub_1001368AC(uint64_t *a1, uint64_t *a2)
{
  return sub_10006BAD8(*a1, *a2);
}

BOOL sub_1001368B8(uint64_t *a1, uint64_t *a2)
{
  return sub_100068D94(*a1, *a2);
}

uint64_t static TimeAmount.+ infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v2) {
    __break(1u);
  }
  return result;
}

void *static TimeAmount.+= infix(_:_:)(void *result, uint64_t a2)
{
  if (__OFADD__(*result, a2)) {
    __break(1u);
  }
  else {
    *result += a2;
  }
  return result;
}

uint64_t static TimeAmount.- infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = __OFSUB__(a1, a2);
  uint64_t result = a1 - a2;
  if (v2) {
    __break(1u);
  }
  return result;
}

void *static TimeAmount.-= infix(_:_:)(void *result, uint64_t a2)
{
  if (__OFSUB__(*result, a2)) {
    __break(1u);
  }
  else {
    *result -= a2;
  }
  return result;
}

void static TimeAmount.* infix<A>(_:_:)()
{
  uint64_t v6 = v5;
  uint64_t v61 = v7;
  sub_100138700( v8,  *(void *)(*(void *)(v5 + 24) + 16LL),  v9,  (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral,  (uint64_t)&associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  sub_1001386D8();
  __chkstk_darwin(v10);
  sub_10013860C(v11, v57[0]);
  __chkstk_darwin(v12);
  v57[4] = (uint64_t)v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100092978();
  __chkstk_darwin(v14);
  uint64_t v58 = (char *)v57 - v15;
  sub_100092978();
  __chkstk_darwin(v16);
  uint64_t v60 = (uint64_t)v57 - v17;
  sub_100092978();
  __chkstk_darwin(v18);
  sub_100093194();
  __chkstk_darwin(v19);
  uint64_t v59 = (char *)v57 - v20;
  sub_100092978();
  __chkstk_darwin(v21);
  sub_100138738();
  __chkstk_darwin(v22);
  sub_100138724();
  uint64_t v24 = __chkstk_darwin(v23);
  sub_10013857C(v24, v25, v26, v27, v28, v29, v30, v31, v57[0]);
  char v32 = sub_1000C8C38();
  sub_100138558(v0);
  if ((v32 & 1) == 0)
  {
    sub_1000C8BE8(v0);
    goto LABEL_20;
  }

  sub_100138508();
  sub_10013865C();
  if (v0 <= 64)
  {
LABEL_20:
    uint64_t v46 = sub_100138508();
    sub_100138558(v3);
    if (v46 < 65)
    {
      uint64_t v47 = sub_100138508();
      sub_1000C8BE8(v3);
      if (v47 != 64 || (sub_1000C8C38() & 1) != 0) {
        goto LABEL_31;
      }
    }

    else
    {
      sub_1000C8BE8(v3);
    }

    uint64_t v2 = v60;
    sub_100138558(v60);
    int64_t v63 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v48 = sub_1000C8C38();
    uint64_t v49 = sub_100138508();
    if ((v48 & 1) != 0)
    {
      if (v49 > 64)
      {
        unint64_t v50 = sub_100137F8C();
        sub_100138514(v50, (uint64_t)&type metadata for Int64, v50);
        char v51 = sub_10013862C();
        sub_1000C8BE8(v48);
        uint64_t v52 = v2;
        goto LABEL_30;
      }
    }

    else if (v49 > 63)
    {
      sub_10013859C();
      unint64_t v53 = sub_100137F8C();
      uint64_t v2 = (uint64_t)v58;
      sub_100138548((uint64_t)&v62, (uint64_t)&type metadata for Int64, v53);
      char v51 = sub_100138570(v2, v54, v55, *(void *)(*(void *)(v6 + 32) + 8LL));
      sub_1000C8BE8(v2);
      uint64_t v52 = v48;
LABEL_30:
      sub_1000C8BE8(v52);
      if ((v51 & 1) != 0)
      {
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56[6];
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  sub_1000353E0();
  uint64_t v6 = v5;
  uint64_t v60 = v7;
  sub_100138700( v7,  *(void *)(*(void *)(v5 + 24) + 16LL),  v8,  (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral,  (uint64_t)&associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  sub_1001386D8();
  __chkstk_darwin(v9);
  sub_10013860C(v10, v56[0]);
  __chkstk_darwin(v11);
  v56[4] = (uint64_t)v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100092978();
  __chkstk_darwin(v13);
  uint64_t v57 = (char *)v56 - v14;
  sub_100092978();
  __chkstk_darwin(v15);
  uint64_t v59 = (uint64_t)v56 - v16;
  sub_100092978();
  __chkstk_darwin(v17);
  sub_100093194();
  __chkstk_darwin(v18);
  uint64_t v58 = (char *)v56 - v19;
  sub_100092978();
  __chkstk_darwin(v20);
  sub_100138738();
  __chkstk_darwin(v21);
  sub_100138724();
  uint64_t v23 = __chkstk_darwin(v22);
  sub_10013857C(v23, v24, v25, v26, v27, v28, v29, v30, v56[0]);
  uint64_t v31 = sub_1000C8C38();
  sub_100138558(v0);
  if ((v31 & 1) == 0)
  {
    sub_1000C8BE8(v0);
    goto LABEL_20;
  }

  sub_100138508();
  sub_10013865C();
  if (v0 <= 64)
  {
LABEL_20:
    uint64_t v45 = sub_100138508();
    sub_100138558(v3);
    if (v45 < 65)
    {
      uint64_t v46 = sub_100138508();
      sub_1000C8BE8(v3);
      if (v46 != 64 || (sub_1000C8C38() & 1) != 0) {
        goto LABEL_31;
      }
    }

    else
    {
      sub_1000C8BE8(v3);
    }

    uint64_t v2 = v59;
    sub_100138558(v59);
    uint64_t v62 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v47 = sub_1000C8C38();
    uint64_t v48 = sub_100138508();
    if ((v47 & 1) != 0)
    {
      if (v48 > 64)
      {
        uint64_t v49 = sub_100137F8C();
        sub_100138514(v49, (uint64_t)&type metadata for Int64, v49);
        unint64_t v50 = sub_10013862C();
        sub_1000C8BE8(v47);
        char v51 = v2;
        goto LABEL_30;
      }
    }

    else if (v48 > 63)
    {
      sub_10013859C();
      uint64_t v52 = sub_100137F8C();
      uint64_t v2 = (uint64_t)v57;
      sub_100138548((uint64_t)&v61, (uint64_t)&type metadata for Int64, v52);
      unint64_t v50 = sub_100138570(v2, v53, v54, *(void *)(*(void *)(v6 + 32) + 8LL));
      sub_1000C8BE8(v2);
      char v51 = v47;
LABEL_30:
      sub_1000C8BE8(v51);
      if ((v50 & 1) != 0)
      {
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }

uint64_t sub_10013709C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = static TimeAmount.+ infix(_:_:)(*a1, *a2);
  *a3 = result;
  return result;
}

void *sub_1001370C8(void *a1, uint64_t *a2)
{
  return static TimeAmount.+= infix(_:_:)(a1, *a2);
}

uint64_t sub_1001370D0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = static TimeAmount.- infix(_:_:)(*a1, *a2);
  *a3 = result;
  return result;
}

void *sub_1001370FC(void *a1, uint64_t *a2)
{
  return static TimeAmount.-= infix(_:_:)(a1, *a2);
}

uint64_t NIODeadline.uptimeNanoseconds.getter(uint64_t result)
{
  if (result < 0)
  {
    sub_100083070();
    uint64_t result = sub_100083058( (uint64_t)"Fatal error",  v1,  v2,  (uint64_t)"Negative value is not representable",  v3,  v4,  (uint64_t)"Swift/Integers.swift");
    __break(1u);
  }

  return result;
}

void *NIODeadline.distantFuture.unsafeMutableAddressor()
{
  return &static NIODeadline.distantFuture;
}

uint64_t static NIODeadline.distantFuture.getter()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

unint64_t static NIODeadline.uptimeNanoseconds(_:)(unint64_t result)
{
  if (result >= 0x7FFFFFFFFFFFFFFFLL) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  return result;
}

void _s25ASOctaneSupportXPCService11NIODeadlineV9hashValueSivg_0(uint64_t a1)
{
  int v1 = sub_100060600(a1);
  sub_10013874C(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  sub_100035698();
  sub_1000354B8();
}

void sub_100137188()
{
  int v0 = Hasher.init(_seed:)(v9);
  sub_10013874C(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9[0]);
  sub_100035698();
  sub_1000354B8();
}

uint64_t static NIODeadline.> infix(_:_:)(unint64_t a1, unint64_t a2)
{
  if ((a1 & 0x8000000000000000LL) == 0 && (a2 & 0x8000000000000000LL) == 0) {
    return a2 < a1;
  }
  sub_100083070();
  uint64_t result = sub_100083058( (uint64_t)"Fatal error",  v3,  v4,  (uint64_t)"Negative value is not representable",  v5,  v6,  (uint64_t)"Swift/Integers.swift");
  __break(1u);
  return result;
}

uint64_t sub_100137200(unint64_t *a1, unint64_t *a2)
{
  return static NIODeadline.< infix(_:_:)(*a1, *a2);
}

uint64_t sub_10013720C(void *a1, void *a2)
{
  return sub_1001A8F30(*a1, *a2);
}

uint64_t sub_100137218(unint64_t *a1, unint64_t *a2)
{
  return sub_10006BAD4(*a1, *a2);
}

uint64_t sub_100137224(unint64_t *a1, unint64_t *a2)
{
  return static NIODeadline.> infix(_:_:)(*a1, *a2);
}

uint64_t NIODeadline.description.getter(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_100083070();
    uint64_t result = sub_100083058( (uint64_t)"Fatal error",  v3,  v4,  (uint64_t)"Negative value is not representable",  v5,  v6,  (uint64_t)"Swift/Integers.swift");
    __break(1u);
  }

  else
  {
    unint64_t v1 = sub_10011A354();
    return BinaryInteger.description.getter(&type metadata for UInt64, v1);
  }

  return result;
}

uint64_t sub_100137294()
{
  return NIODeadline.description.getter(*v0);
}

uint64_t static NIODeadline.- infix(_:_:)(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    if ((a1 & 0x8000000000000000LL) == 0)
    {
      if (a1 - a2 >= 0x7FFFFFFFFFFFFFFFLL) {
        return 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        return a1 - a2;
      }
    }

uint64_t sub_100137318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a5 - 8);
  uint64_t v8 = __chkstk_darwin(a1);
  char v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v11(v8);
  EventLoopPromise.succeed(_:)((uint64_t)v10, a1, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, a5);
}

uint64_t sub_1001373CC()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1001373F4()
{
  return sub_100137318(v0[5], v0[6], v0[7], v0[2], v0[3]);
}

void EventLoop.flatScheduleTask<A>(deadline:file:line:_:)()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  sub_100138694(v8, v10, v11, v12, v13, v6, v4, v2);
  sub_100138758();
  uint64_t v20 = sub_1001386A8(v14, v15, v16, v17, v18, v19);
  uint64_t v21 = (void *)sub_100019310((uint64_t)&unk_1002886A0, 56LL);
  void v21[2] = v3;
  void v21[3] = v0;
  v21[4] = v1;
  void v21[5] = v7;
  v21[6] = v5;
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t (*)@<X0>(uint64_t *@<X8>), void *, uint64_t, uint64_t, uint64_t))(v1 + 40);
  uint64_t v26 = sub_10013870C((uint64_t)v21, v23, v24, v25);
  sub_10009B678();
  uint64_t v27 = v22(v9, sub_100137A34, v21, v26, v3, v1);
  swift_release();
  uint64_t v28 = (void *)sub_100019310((uint64_t)&unk_1002886C8, 40LL);
  _OWORD v28[2] = v3;
  void v28[3] = v0;
  v28[4] = v1;
  sub_10009B678();
  sub_10013287C();
  EventLoopFuture.flatMap<A>(file:line:_:)();
  sub_100138764();
  sub_10009B4FC();
  uint64_t v29 = sub_10002A75C();
  EventLoopFuture.cascade(to:)(v29);
  sub_100024F0C();
  sub_10002A524();
  uint64_t v30 = (void *)sub_100019310((uint64_t)&unk_1002886F0, 48LL);
  _OWORD v30[2] = v3;
  v30[3] = v0;
  v30[4] = v1;
  v30[5] = v27;
  Scheduled.init(promise:cancellationTask:)(v20, (uint64_t)sub_1001384E8, (uint64_t)v30);
}

void EventLoop.flatScheduleTask<A>(in:file:line:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = sub_100138694(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v19 = sub_1001386A8(v16, a2, a3, a4, v17, v18);
  uint64_t v20 = (void *)sub_100019310((uint64_t)&unk_100288718, 56LL);
  _OWORD v20[2] = a8;
  v20[3] = v8;
  v20[4] = v9;
  void v20[5] = a6;
  v20[6] = a7;
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t (*)@<X0>(uint64_t *@<X8>), void *, uint64_t, uint64_t, uint64_t))(v9 + 48);
  uint64_t v25 = sub_10013870C((uint64_t)v20, v22, v23, v24);
  sub_10001EDE0();
  uint64_t v26 = v21(a1, sub_100137A34, v20, v25, a8, v9);
  sub_10009B4FC();
  uint64_t v27 = (void *)sub_100019310((uint64_t)&unk_100288740, 40LL);
  _OWORD v27[2] = a8;
  void v27[3] = v8;
  v27[4] = v9;
  sub_10001EDE0();
  sub_10013287C();
  EventLoopFuture.flatMap<A>(file:line:_:)();
  swift_release();
  swift_release();
  uint64_t v28 = sub_10002A75C();
  EventLoopFuture.cascade(to:)(v28);
  sub_100024F0C();
  sub_10002A524();
  uint64_t v29 = (void *)sub_100019310((uint64_t)&unk_100288768, 48LL);
  _OWORD v29[2] = a8;
  v29[3] = v8;
  v29[4] = v9;
  v29[5] = v26;
  Scheduled.init(promise:cancellationTask:)(v19, (uint64_t)sub_10013801C, (uint64_t)v29);
}

void sub_1001376A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void EventLoop.scheduleRepeatedTask(initialDelay:delay:notifying:_:)()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v15 = (void *)sub_100019310((uint64_t)&unk_100288790, 56LL);
  uint64_t v15[2] = v4;
  v15[3] = v2;
  v15[4] = v8;
  uint64_t v15[5] = v6;
  v15[6] = v0;
  sub_10002A674();
  sub_10009B28C();
  EventLoop.scheduleRepeatedAsyncTask(initialDelay:delay:notifying:_:)( v14,  v12,  v10,  (uint64_t)sub_100138060,  (uint64_t)v15,  v16,  v2);
  swift_release();
  sub_10002A580();
}

void sub_100137768(uint64_t a1, void (*a2)(void))
{
}

void EventLoop.scheduleRepeatedAsyncTask(initialDelay:delay:notifying:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for RepeatedTask();
  uint64_t v14 = (void *)sub_100019310(v13, 72LL);
  void v14[2] = a2;
  uint64_t v14[3] = v7;
  v14[4] = a7;
  void v14[5] = a3;
  v14[7] = a4;
  _BYTE v14[8] = a5;
  v14[6] = 0LL;
  sub_10002A75C();
  sub_100041B5C();
  sub_10009B28C();
  sub_100135F9C();
  sub_100023E74();
}

uint64_t sub_100137888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = a1;
    uint64_t v5 = a3 + 16;
    swift_errorRetain(a1);
    Lock.lock()();
    swift_beginAccess(v5, v8, 1LL, 0LL);
    uint64_t v6 = *(void *)(a3 + 16);
    *(void *)(a3 + 16) = v4;
    swift_errorRetain(v4);
    swift_errorRelease(v6);
    Lock.unlock()();
    a1 = swift_errorRelease(v4);
  }

  return dispatch thunk of DispatchWorkItem.perform()(a1);
}

void sub_100137918()
{
}

uint64_t EventLoopError.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10013795C + 4 * byte_100202C70[a1]))( 0xD000000000000049LL,  0x800000010021E2C0LL);
}

uint64_t sub_10013795C()
{
  return v0 + 6;
}

uint64_t sub_1001379A0()
{
  return EventLoopError.description.getter(*v0);
}

uint64_t sub_1001379A8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001379CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1001A93A0(0LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001379DC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1001379E4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100137A10()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100137A34@<X0>(uint64_t *a1@<X8>)
{
  return sub_100137FEC(a1);
}

void sub_100137A50()
{
}

void sub_100137A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_100137A88()
{
}

uint64_t sub_100137AA4(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v4 == a2)
  {
    uint64_t v7 = 0LL;
LABEL_23:
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v20 = v6[3];
    if (v20 < 2) {
      return (uint64_t)v6;
    }
    unint64_t v21 = v20 >> 1;
    BOOL v19 = __OFSUB__(v21, v7);
    uint64_t v22 = v21 - v7;
    if (!v19)
    {
      void v6[2] = v22;
      return (uint64_t)v6;
    }
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = &_swiftEmptyArrayStorage[4];
    while (a2 < v4)
    {
      __int128 v9 = *(_OWORD *)(a1 + 32 + 16 * a2);
      __int128 v23 = v9;
      if (v7)
      {
        uint64_t result = swift_unknownObjectRetain(v9);
      }

      else
      {
        unint64_t v10 = v6[3];
        int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
        if (v11 <= 1) {
          uint64_t v12 = 1LL;
        }
        else {
          uint64_t v12 = v11;
        }
        uint64_t v13 = sub_1000175B0(&qword_1002AA540);
        uint64_t v14 = (void *)swift_allocObject(v13, 16 * v12 + 32, 7LL);
        uint64_t v15 = (uint64_t)(j__malloc_size(v14) - 32) / 16;
        void v14[2] = v12;
        uint64_t v14[3] = 2 * v15;
        uint64_t v16 = v14 + 4;
        uint64_t v17 = v6[3] >> 1;
        uint64_t v8 = &v14[2 * v17 + 4];
        uint64_t v7 = (v15 & 0x7FFFFFFFFFFFFFFFLL) - v17;
        if (v6[2])
        {
          if (v14 != v6 || v16 >= &v6[2 * v17 + 4]) {
            memmove(v16, v6 + 4, 16 * v17);
          }
          swift_unknownObjectRetain(v23);
          void v6[2] = 0LL;
        }

        else
        {
          swift_unknownObjectRetain(v23);
        }

        uint64_t result = swift_release();
        uint64_t v6 = v14;
      }

      BOOL v19 = __OFSUB__(v7--, 1LL);
      if (v19) {
        goto LABEL_28;
      }
      ++a2;
      *v8++ = v23;
      if (v4 == a2) {
        goto LABEL_23;
      }
    }

    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_100137C48(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v3 = a1;
    swift_retain();
    uint64_t v4 = 0LL;
    uint64_t v5 = &_swiftEmptyArrayStorage[4];
    while (1)
    {
      uint64_t v7 = v3 + 32;
      uint64_t v6 = *(void *)(v3 + 32);
      uint64_t v8 = v1 - 1;
      if (v1 == 1 || v6 == *(void *)(v7 + 8 * v8))
      {
        sub_10002A674();
        uint64_t v34 = v3;
        if ((sub_100138778() & 1) == 0)
        {
          uint64_t v3 = sub_100138770();
          uint64_t v34 = v3;
        }

        uint64_t v13 = *(void *)(v3 + 16);
        if (!v13) {
          goto LABEL_51;
        }
        uint64_t v14 = v13 - 1;
        uint64_t v15 = *(void *)(v3 + 8 * v14 + 32);
        *(void *)(v3 + 16) = v14;
        sub_10013868C();
        uint64_t v16 = v15;
      }

      else
      {
        type metadata accessor for ScheduledTask();
        char v9 = sub_100138718();
        uint64_t v10 = *(void *)(v7 + 8 * v8);
        if ((v9 & 1) != 0)
        {
          sub_10002A674();
          sub_10001EDE0();
          uint64_t v34 = v3;
          if ((sub_100138778() & 1) == 0)
          {
            uint64_t v3 = sub_100138770();
            uint64_t v34 = v3;
          }

          if (!*(void *)(v3 + 16)) {
            goto LABEL_53;
          }
          swift_release(*(void *)(v3 + 32));
          *(void *)(v3 + 32) = v10;
          sub_10013868C();
          uint64_t v11 = v34;
          if (!*(void *)(v34 + 16)) {
            goto LABEL_55;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
          {
            uint64_t v11 = sub_1000F2BE4(v34);
            uint64_t v34 = v11;
          }

          uint64_t v12 = *(void *)(v11 + 16);
          if (!v12) {
            goto LABEL_57;
          }
          sub_100138674(v12);
          sub_10002A524();
          sub_1001A9A2C(0LL);
          if (v4) {
            goto LABEL_33;
          }
          goto LABEL_20;
        }

        if ((sub_100138718() & 1) != 0) {
          goto LABEL_60;
        }
        sub_10002A674();
        sub_10001EDE0();
        uint64_t v34 = v3;
        if ((sub_100138778() & 1) == 0)
        {
          uint64_t v3 = sub_100138770();
          uint64_t v34 = v3;
        }

        if (!*(void *)(v3 + 16)) {
          goto LABEL_54;
        }
        sub_10001EDE0();
        sub_100024F0C();
        *(void *)(v3 + 32) = v10;
        sub_10013868C();
        swift_release(v10);
        uint64_t v28 = v34;
        if (!*(void *)(v34 + 16)) {
          goto LABEL_56;
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
        {
          uint64_t v28 = sub_1000F2BE4(v34);
          uint64_t v34 = v28;
        }

        uint64_t v29 = *(void *)(v28 + 16);
        if (!v29) {
          goto LABEL_58;
        }
        sub_100138674(v29);
        uint64_t v16 = v7;
      }

      swift_release(v16);
      if (v4) {
        goto LABEL_33;
      }
LABEL_20:
      unint64_t v17 = v2[3];
      int64_t v18 = v17 & 0xFFFFFFFFFFFFFFFELL;
      if (v18 <= 1) {
        uint64_t v19 = 1LL;
      }
      else {
        uint64_t v19 = v18;
      }
      uint64_t v20 = sub_1000175B0((uint64_t *)&unk_1002AFCE0);
      unint64_t v21 = (void *)sub_100019310(v20, 8 * v19 + 32);
      uint64_t v22 = (uint64_t)(j__malloc_size(v21) - 32) / 8;
      void v21[2] = v19;
      void v21[3] = (2 * v22) | 1;
      unint64_t v23 = (unint64_t)(v21 + 4);
      unint64_t v24 = v2[3];
      unint64_t v25 = v24 >> 1;
      if (v2[2])
      {
        v2[2] = 0LL;
      }

      uint64_t v5 = (void *)(v23 + 8 * v25);
      uint64_t v4 = (v22 & 0x7FFFFFFFFFFFFFFFLL) - (v24 >> 1);
      swift_release(v2);
      uint64_t v2 = v21;
LABEL_33:
      BOOL v27 = __OFSUB__(v4--, 1LL);
      if (v27)
      {
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000033LL,  0x80000001002193E0LL,  "ASOctaneSupportXPCService/Heap.swift",  36LL,  2LL);
        __break(1u);
        return result;
      }

      *v5++ = v6;
      uint64_t v3 = v34;
      uint64_t v1 = *(void *)(v34 + 16);
      if (!v1)
      {
        sub_10009B4FC();
        goto LABEL_46;
      }
    }
  }

  uint64_t v4 = 0LL;
LABEL_46:
  unint64_t v30 = v2[3];
  if (v30 >= 2)
  {
    unint64_t v31 = v30 >> 1;
    BOOL v27 = __OFSUB__(v31, v4);
    unint64_t v32 = v31 - v4;
    if (v27) {
      goto LABEL_59;
    }
    v2[2] = v32;
  }

  return (uint64_t)v2;
}

unint64_t sub_100137F8C()
{
  unint64_t result = qword_1002B4680;
  if (!qword_1002B4680)
  {
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for Int64, &type metadata for Int64);
    atomic_store(result, (unint64_t *)&qword_1002B4680);
  }

  return result;
}

uint64_t sub_100137FCC()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100137FEC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 40))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

void sub_10013801C()
{
}

uint64_t sub_100138038()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_100138060(uint64_t a1)
{
}

uint64_t type metadata accessor for RepeatedTask()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService12RepeatedTask);
}

unint64_t sub_100138094()
{
  unint64_t result = qword_1002B4688;
  if (!qword_1002B4688)
  {
    unint64_t result = swift_getWitnessTable("q]\b", &type metadata for EventLoopIterator);
    atomic_store(result, (unint64_t *)&qword_1002B4688);
  }

  return result;
}

unint64_t sub_1001380D4()
{
  unint64_t result = qword_1002B4690;
  if (!qword_1002B4690)
  {
    unint64_t result = swift_getWitnessTable("A]\b", &type metadata for TimeAmount);
    atomic_store(result, (unint64_t *)&qword_1002B4690);
  }

  return result;
}

unint64_t sub_100138114()
{
  unint64_t result = qword_1002B4698;
  if (!qword_1002B4698)
  {
    unint64_t result = swift_getWitnessTable(protocol conformance descriptor for NIODeadline, &type metadata for NIODeadline);
    atomic_store(result, (unint64_t *)&qword_1002B4698);
  }

  return result;
}

unint64_t sub_100138154()
{
  unint64_t result = qword_1002B46A0[0];
  if (!qword_1002B46A0[0])
  {
    unint64_t result = swift_getWitnessTable( protocol conformance descriptor for EventLoopError,  &type metadata for EventLoopError);
    atomic_store(result, qword_1002B46A0);
  }

  return result;
}

uint64_t type metadata accessor for Scheduled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Scheduled);
}

void type metadata accessor for EventLoopIterator()
{
}

void type metadata accessor for TimeAmount()
{
}

void type metadata accessor for NIODeadline()
{
}

__int128 *initializeBufferWithCopyOfBuffer for NIOEventLoopGroupProvider(__int128 *a1, __int128 *a2)
{
  __int128 v3 = *a2;
  *a1 = *a2;
  swift_unknownObjectRetain(v3);
  return a1;
}

uint64_t destroy for NIOEventLoopGroupProvider(void *a1)
{
  return swift_unknownObjectRelease(*a1);
}

uint64_t *assignWithCopy for NIOEventLoopGroupProvider(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v3);
  swift_unknownObjectRelease(v5);
  a1[1] = v4;
  return a1;
}

void *assignWithTake for NIOEventLoopGroupProvider(void *a1, _OWORD *a2)
{
  *(_OWORD *)a1 = *a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for NIOEventLoopGroupProvider(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for NIOEventLoopGroupProvider( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }

  return result;
}

void type metadata accessor for NIOEventLoopGroupProvider()
{
}

uint64_t storeEnumTagSinglePayload for EventLoopError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10013836C + 4 * byte_100202C79[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1001383A0 + 4 * byte_100202C74[v4]))();
}

uint64_t sub_1001383A0(uint64_t result)
{
  *(_BYTE *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_1001383A8(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x1001383B0LL);
  }
  return result;
}

uint64_t sub_1001383BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001383C4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1001383C8(uint64_t result)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_1001383D0(uint64_t result)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

void type metadata accessor for EventLoopError()
{
}

uint64_t sub_1001383E8()
{
  uint64_t v0 = sub_10010E20C();
  return swift_deallocObject(v0, v1, v2);
}

void sub_100138400()
{
}

uint64_t sub_100138420()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100138448@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))(*(void *)(v1 + 32));
  *a1 = result;
  return result;
}

uint64_t sub_100138488(uint64_t a1)
{
  return sub_100136408(a1, v1);
}

uint64_t sub_100138490()
{
  return sub_10013627C(0LL);
}

void sub_10013849C(uint64_t *a1@<X8>)
{
}

uint64_t sub_1001384B8()
{
  uint64_t v0 = sub_10010E20C();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1001384D4()
{
  return sub_1001363BC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100138508()
{
  return dispatch thunk of BinaryInteger.bitWidth.getter(v0, v1);
}

uint64_t sub_100138514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v5 - 88, a2, a3, v3, v4);
}

uint64_t sub_100138530()
{
  return dispatch thunk of static Comparable.< infix(_:_:)(v3, v1, v0, *(void *)(*(void *)(v2 + 32) + 8LL));
}

uint64_t sub_100138548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(a1, a2, a3, v3, v4);
}

uint64_t sub_100138558(uint64_t a1)
{
  return v3(a1, v2, v1);
}

uint64_t sub_100138564(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 168))(a1, v1);
}

uint64_t sub_100138570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return dispatch thunk of static Comparable.< infix(_:_:)(a1, v5, v4, a4);
}

uint64_t sub_10013857C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&a9 - v9, v11, v10);
}

uint64_t sub_10013859C()
{
  *(void *)(v3 - 96) = 0x7FFFFFFFFFFFFFFFLL;
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(v2 + 32))(*(void *)(v3 - 120), v1, v0);
}

uint64_t sub_1001385BC()
{
  return dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v1, v0, *(void *)(v2 - 136));
}

uint64_t sub_1001385D8()
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(v2 - 160) + 32LL))( *(void *)(v2 - 144),  v1,  v0);
}

uint64_t sub_1001385F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(a1, 256LL, v4, a4);
}

void sub_10013860C(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 152) = (char *)&a2 - a1;
}

uint64_t sub_10013862C()
{
  return dispatch thunk of static Comparable.< infix(_:_:)(v1, v3, v0, *(void *)(*(void *)(v2 + 32) + 8LL));
}

uint64_t sub_100138644()
{
  return swift_getObjectType(*(void *)(v0 + 24));
}

uint64_t sub_10013865C()
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  *(void *)(v3 - 168) = v4;
  *(void *)(v3 - 16sub_1001A93A0(0LL, 0) = v2;
  return v4(v1, v0);
}

uint64_t sub_100138674@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 16) = a1 - 1;
  return specialized ContiguousArray._endMutation()();
}

uint64_t sub_10013868C()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t sub_100138694( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return EmbeddedChannel.WrongTypeError.actual.getter(a8, *(void *)(v8 + 16));
}

uint64_t sub_1001386A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return EventLoop.makePromise<A>(of:file:line:)(a1, a2, a3, a4, v8, a6, v6, v7);
}

uint64_t sub_1001386B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return swift_getAssociatedConformanceWitness(*(void *)(v7 - 136), v5, v6, a4, a5);
}

uint64_t sub_1001386C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
}

  ;
}

  ;
}

uint64_t sub_100138700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 - 136) = a2;
  return swift_getAssociatedTypeWitness(0LL, a2, a3, a4, a5);
}

uint64_t sub_10013870C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for EventLoopFuture(0LL, v4, a3, a4);
}

uint64_t sub_100138718()
{
  return static ScheduledTask.< infix(_:_:)(v0, v1);
}

  ;
}

  ;
}

void sub_10013874C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

  ;
}

uint64_t sub_100138764()
{
  return swift_release(v0);
}

uint64_t sub_100138770()
{
  return sub_1000F2BE4(v0);
}

uint64_t sub_100138778()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

void Lock.__allocating_init()()
{
}

uint64_t sub_1001387A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned __int8 *)(a2 + 89) > 1u)
  {
    uint64_t v7 = sub_1000175B0(&qword_1002AFD20);
    uint64_t v8 = swift_allocObject(v7, 64LL, 7LL);
    *(_OWORD *)(v8 + 16) = xmmword_1001F3C00;
    *(void *)(v8 + 56) = &type metadata for String;
    *(void *)(v8 + 32) = 0xD00000000000008DLL;
    *(void *)(v8 + 4sub_1001A93A0(0LL, 0) = 0x800000010021E420LL;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease(v8);
    char v6 = 0;
  }

  else
  {
    uint64_t v5 = *(void *)(a2 + 72);
    swift_retain(a2);
    swift_retain(a3);
    char v6 = sub_100138948(v5, a2, a3);
  }

  Lock.unlock()();
  sub_10002A524();
  sub_10002A5A4();
  return v6 & 1;
}

uint64_t sub_1001388A4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (v6)
  {
    sub_10002A524();

    swift_release(a2);
  }

  else
  {
    swift_release(a2);
    char v5 = v12;
    sub_10002A524();
  }

  return v5 & 1;
}

uint64_t sub_100138948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(a2 + 32);
  if ((v5 & 1) == 0) {
    *(_BYTE *)(a2 + 32) = 1;
  }
  uint64_t v6 = v5 ^ 1u;
  Lock.unlock()();
  swift_release(a3);
  swift_release(a2);
  return v6;
}

unint64_t sub_100138A04()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 32032LL;
  v1._object = (void *)0xE200000000000000LL;
  String.append(_:)(v1);
  Lock.unlock()();
  sub_10002A5A4();
  return 0xD000000000000018LL;
}

uint64_t sub_100138ADC()
{
  uint64_t v2 = sub_10013948C();
  sub_10019D2E4(v2, v3, v4, v5);
  Lock.unlock()();
  if (v1)
  {
    sub_10002A5A4();
    sub_10002A524();
  }

  else
  {
    sub_10002A524();
    uint64_t v0 = v7;
    sub_10002A5A4();
  }

  return v0;
}

uint64_t sub_100138B64(uint64_t a1, uint64_t a2, void *a3)
{
  if (v4)
  {

    sub_10002A524();
  }

  else
  {
    sub_10002A524();
    uint64_t v3 = v8;
  }

  return v3;
}

void Lock.withLock<A>(_:)()
{
}

void Lock.withLockVoid(_:)()
{
}

void ConditionLock.__allocating_init(value:)(uint64_t a1)
{
}

Swift::Void __swiftcall ConditionLock.lock()()
{
}

void ConditionLock.unlock(withValue:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 96);
  swift_beginAccess(v4, v5, 33LL, 0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8LL) + 24LL))(v4, a1);
  swift_endAccess(v5);
  ConditionLock.unlock()();
  else {
    sub_100013858();
  }
}

uint64_t ConditionLock.lock(whenValue:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*(void *)(*v1 + 80) - 8LL);
  __chkstk_darwin(a1);
  sub_1000BBB14();
  ConditionLock.lock()();
  uint64_t v6 = *(void *)(*v1 + 104);
  uint64_t v7 = *(void *)(*v1 + 112);
  sub_1000487CC((uint64_t)v1 + *(void *)(*v1 + 96), (uint64_t)v14);
  uint64_t v8 = *(void (**)(uint64_t))(v5 + 16);
  while (1)
  {
    uint64_t v9 = sub_10013948C();
    v8(v9);
    char v11 = sub_1001394B0(v2, a1, v10, *(void *)(v4 + 88));
    uint64_t result = sub_10009B62C(v2, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    if ((v11 & 1) != 0) {
      break;
    }
    uint64_t result = pthread_cond_wait( *(pthread_cond_t **)((char *)v3 + v7),  *(pthread_mutex_t **)(*(uint64_t *)((char *)v3 + v6) + 16));
    if ((_DWORD)result)
    {
      __break(1u);
      return result;
    }
  }

  return result;
}

Swift::Void __swiftcall ConditionLock.unlock()()
{
}

uint64_t Lock.init()()
{
  uint64_t v1 = (pthread_mutex_t *)swift_slowAlloc(64LL, -1LL);
  *(void *)(v0 + 16) = v1;
  v3.__sig = 0LL;
  *(void *)v3.__opaque = 0LL;
  pthread_mutexattr_init(&v3);
  pthread_mutexattr_settype(&v3, 1);
  if (pthread_mutex_init(v1, &v3)) {
    __break(1u);
  }
  return v0;
}

void Lock.deinit()
{
  if (pthread_mutex_destroy(*(pthread_mutex_t **)(v0 + 16)))
  {
    __break(1u);
  }

  else
  {
    sub_10013947C();
    sub_10001945C();
  }

uint64_t Lock.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

Swift::Void __swiftcall Lock.lock()()
{
}

Swift::Void __swiftcall Lock.unlock()()
{
}

uint64_t sub_100138F50(uint64_t (*a1)(void))
{
  uint64_t result = a1(*(void *)(v1 + 16));
  if ((_DWORD)result) {
    __break(1u);
  }
  return result;
}

uint64_t ConditionLock.init(value:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)v1;
  uint64_t v5 = *(void *)(v4 + 112);
  *(void *)&v2[v5] = swift_slowAlloc(48LL, -1LL);
  uint64_t v6 = *(void *)(*(void *)(v4 + 80) - 8LL);
  (*(void (**)(char *, uint64_t, void))(v6 + 16))( &v2[*(void *)(*(void *)v2 + 96LL)],  a1,  *(void *)(v4 + 80));
  uint64_t v7 = type metadata accessor for Lock();
  uint64_t v8 = sub_1000D6B98(v7);
  Lock.init()();
  *(void *)&v2[*(void *)(*(void *)v2 + 104LL)] = v8;
  LODWORD(v8) = pthread_cond_init(*(pthread_cond_t **)&v2[*(void *)(*(void *)v2 + 112LL)], 0LL);
  uint64_t result = sub_10009B62C(a1, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  if (!(_DWORD)v8) {
    return (uint64_t)v2;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for Lock()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService4Lock);
}

uint64_t ConditionLock.deinit()
{
  uint64_t v1 = *v0;
  uint64_t result = pthread_cond_destroy(*(pthread_cond_t **)((char *)v0 + *(void *)(*v0 + 112)));
  if ((_DWORD)result)
  {
    __break(1u);
  }

  else
  {
    sub_10013947C();
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 96));
    swift_release();
    return (uint64_t)v0;
  }

  return result;
}

uint64_t ConditionLock.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

void ConditionLock.value.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  ConditionLock.lock()();
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 96);
  sub_1000487CC(v4, (uint64_t)v5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8LL) + 16LL))(a1, v4);
  ConditionLock.unlock()();
  sub_100013858();
}

uint64_t ConditionLock.lock(whenValue:timeoutSeconds:)(uint64_t a1, double a2)
{
  uint64_t v22 = *v2;
  uint64_t v5 = *(void *)(*(void *)(*v2 + 80) - 8LL);
  __chkstk_darwin(a1);
  sub_1000BBB14();
  if (v6 < 0.0)
  {
    __break(1u);
    goto LABEL_14;
  }

  ConditionLock.lock()();
  double v7 = a2 * 1000000000.0;
  if ((~*(void *)&v7 & 0x7FF0000000000000LL) == 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  if (v7 <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if (v7 >= 9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  v25.tv_sec = 0LL;
  v25.tv_usec = 0;
  gettimeofday(&v25, 0LL);
  uint64_t v8 = 1000LL * v25.tv_usec;
  BOOL v9 = __OFADD__((uint64_t)v7, v8);
  uint64_t v10 = (uint64_t)v7 + v8;
  if (v9)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }

  if (__OFADD__(v25.tv_sec, v10 / 1000000000)) {
    goto LABEL_18;
  }
  v24.tv_sec = v25.tv_sec + v10 / 1000000000;
  v24.tv_nsec = v10 % 1000000000;
  uint64_t v11 = *(void *)(*v2 + 104);
  uint64_t v12 = *(void *)(*v2 + 112);
  sub_1000487CC((uint64_t)v2 + *(void *)(*v2 + 96), (uint64_t)v26);
  uint64_t v13 = *(void (**)(uint64_t))(v5 + 16);
  do
  {
    uint64_t v14 = sub_10013948C();
    v13(v14);
    char v16 = sub_1001394B0(v3, a1, v15, *(void *)(v22 + 88));
    sub_10009B62C(v3, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    if ((v16 & 1) != 0) {
      return v16 & 1;
    }
    int v17 = pthread_cond_timedwait( *(pthread_cond_t **)((char *)v2 + v12),  *(pthread_mutex_t **)(*(uint64_t *)((char *)v2 + v11) + 16),  &v24);
  }

  while (!v17);
  if (v17 == 60)
  {
    ConditionLock.unlock()();
    return v16 & 1;
  }

  _StringGuts.grow(_:)(51LL);
  v19._uint64_t countAndFlagsBits = 0x6520746867756163LL;
  v19._object = (void *)0xED000020726F7272LL;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._object = (void *)0x800000010021E3B0LL;
  v21._uint64_t countAndFlagsBits = 0xD000000000000024LL;
  String.append(_:)(v21);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "ASOctaneSupportXPCService/lock.swift",  36LL,  2LL);
  __break(1u);
  return result;
}

uint64_t sub_1001393DC(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.RawPointer + 64;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 3LL, v4, a1 + 96);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for ConditionLock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConditionLock);
}

void sub_100139474()
{
}

uint64_t sub_10013947C()
{
  return swift_slowDealloc(v0, -1LL, -1LL);
}

uint64_t sub_10013948C()
{
  return v0;
}

  ;
}

uint64_t sub_1001394B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, a4);
}

void SocketOptionProvider.setSoLinger(_:)(uint64_t a1)
{
  uint64_t v2 = a1;
  type metadata accessor for linger(0LL);
  sub_100139754(0xFFFFLL, 128LL, (uint64_t)&v2, v1);
  sub_10001DBAC();
}

uint64_t SocketOptionProvider.getSoLinger()(uint64_t a1, uint64_t a2)
{
  return sub_1001396DC(a1, a2, (uint64_t (*)(void))type metadata accessor for linger, 0xFFFFLL, 128LL);
}

void SocketOptionProvider.setIPMulticastIF(_:)(int a1)
{
  int v2 = a1;
  type metadata accessor for in_addr(0LL);
  sub_100139754(0LL, 9LL, (uint64_t)&v2, v1);
  sub_10001DBAC();
}

uint64_t SocketOptionProvider.getIPMulticastIF()(uint64_t a1, uint64_t a2)
{
  return sub_1001396DC(a1, a2, (uint64_t (*)(void))type metadata accessor for in_addr, 0LL, 9LL);
}

uint64_t SocketOptionProvider.setIPMulticastTTL(_:)(char a1, uint64_t a2, uint64_t a3)
{
  return sub_1001395A0(a1, a2, a3, 10LL);
}

uint64_t SocketOptionProvider.getIPMulticastTTL()(uint64_t a1, uint64_t a2)
{
  return sub_10013974C( 0LL,  a2,  (uint64_t)&type metadata for UInt8,  a1,  a2,  *(uint64_t (**)(uint64_t, uint64_t))(a2 + 40));
}

uint64_t SocketOptionProvider.setIPMulticastLoop(_:)(char a1, uint64_t a2, uint64_t a3)
{
  return sub_1001395A0(a1, a2, a3, 11LL);
}

uint64_t sub_1001395A0(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5 = a1;
  return (*(uint64_t (**)(void, uint64_t, char *, void *, uint64_t, uint64_t))(a3 + 24))( 0LL,  a4,  &v5,  &type metadata for UInt8,  a2,  a3);
}

uint64_t SocketOptionProvider.getIPMulticastLoop()(uint64_t a1, uint64_t a2)
{
  return sub_100139744( 0LL,  a2,  (uint64_t)&type metadata for UInt8,  a1,  a2,  *(uint64_t (**)(uint64_t, uint64_t))(a2 + 40));
}

uint64_t SocketOptionProvider.setIPv6MulticastIF(_:)(int a1, uint64_t a2, uint64_t a3)
{
  return sub_10013966C(a1, a2, a3, 9LL, (uint64_t)&type metadata for UInt32);
}

uint64_t SocketOptionProvider.getIPv6MulticastIF()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(a2 + 40))( 41LL,  9LL,  &type metadata for UInt32,  a1,  a2);
}

uint64_t SocketOptionProvider.setIPv6MulticastHops(_:)(int a1, uint64_t a2, uint64_t a3)
{
  return sub_10013966C(a1, a2, a3, 10LL, (uint64_t)&type metadata for Int32);
}

uint64_t SocketOptionProvider.getIPv6MulticastHops()(uint64_t a1, uint64_t a2)
{
  return sub_10013974C( 41LL,  a2,  (uint64_t)&type metadata for Int32,  a1,  a2,  *(uint64_t (**)(uint64_t, uint64_t))(a2 + 40));
}

uint64_t SocketOptionProvider.setIPv6MulticastLoop(_:)(int a1, uint64_t a2, uint64_t a3)
{
  return sub_10013966C(a1, a2, a3, 11LL, (uint64_t)&type metadata for UInt32);
}

uint64_t sub_10013966C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = a1;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, uint64_t))(a3 + 24))( 41LL,  a4,  &v6,  a5,  a2,  a3);
}

uint64_t SocketOptionProvider.getIPv6MulticastLoop()(uint64_t a1, uint64_t a2)
{
  return sub_100139744( 41LL,  a2,  (uint64_t)&type metadata for UInt32,  a1,  a2,  *(uint64_t (**)(uint64_t, uint64_t))(a2 + 40));
}

uint64_t SocketOptionProvider.getTCPConnectionInfo()(uint64_t a1, uint64_t a2)
{
  return sub_1001396DC( a1,  a2,  (uint64_t (*)(void))type metadata accessor for tcp_connection_info,  6LL,  262LL);
}

uint64_t sub_1001396DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 40);
  uint64_t v9 = a3(0LL);
  return v11(a4, a5, v9, a1, a2);
}

uint64_t sub_100139744( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  return a6(a1, 11LL);
}

uint64_t sub_10013974C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  return a6(a1, 10LL);
}

uint64_t sub_100139754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return v6(a1, a2, a3, a4, v5, v4);
}

uint64_t sub_100139760(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10013978C + 4 * byte_100203170[a1]))( 1701736302LL,  0xE400000000000000LL);
}

uint64_t sub_10013978C()
{
  return 1701147238LL;
}

uint64_t sub_100139798()
{
  return 0x756F597341796170LL;
}

uint64_t sub_1001397B4()
{
  return 0x6F72467055796170LL;
}

uint64_t sub_1001397D4(char a1)
{
  if (!a1) {
    return 7824750LL;
  }
  if (a1 == 1) {
    return 0x676E697473697865LL;
  }
  return 0x64657269707865LL;
}

void sub_100139824(uint64_t a1)
{
  v2._rawValue = &off_1002707C0;
  sub_100052314(v2, a1);
  sub_100019344();
  sub_10001945C();
}

void sub_10013985C(uint64_t a1)
{
  v2._rawValue = &off_1002733B0;
  sub_100052314(v2, a1);
  sub_100019344();
  sub_10001945C();
}

void sub_100139894(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_1001398A0()
{
}

uint64_t sub_1001398A8(uint64_t a1)
{
  return sub_1000B1B1C(a1, *v1);
}

void sub_1001398B0(uint64_t a1)
{
}

void sub_1001398B8(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = v3;
}

void sub_1001398E4()
{
  char v1 = sub_100052340();
  *uint64_t v0 = sub_1001397D4(v1);
  v0[1] = v2;
  sub_10001945C();
}

uint64_t sub_100139904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10013B8C4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100139960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10013B8C4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_1001399AC(char *a1)
{
}

void sub_1001399B8()
{
}

void sub_1001399C0(uint64_t a1)
{
}

void sub_1001399C8(uint64_t a1)
{
}

void sub_1001399D0(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = v3;
}

void sub_1001399FC()
{
  unsigned __int8 v1 = sub_100052340();
  *uint64_t v0 = sub_100139760(v1);
  v0[1] = v2;
  sub_10001945C();
}

uint64_t sub_100139A1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10013B900();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100139A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10013B900();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100139AC4()
{
  uint64_t v1 = sub_1000175B0(&qword_1002AAFF0);
  __chkstk_darwin(v1);
  char v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = *(void *)(v0 + 40);
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v6 = type metadata accessor for Locale(0LL);
  sub_10001762C((uint64_t)v3, 1LL, 1LL, v6);
  swift_bridgeObjectRetain();
  uint64_t v7 = NSDecimal.init(string:locale:)(v5, v4, v3);
  swift_bridgeObjectRelease();
  sub_10013BBC0((uint64_t)v3);
  return v7;
}

uint64_t sub_100139BB8()
{
  uint64_t v1 = *(void **)(v0 + 72);
  if (!v1) {
    return 1LL;
  }
  uint64_t v2 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain(v1);
  uint64_t result = sub_1001BD94C(v2, v1);
  if (v4 == 7) {
    return 1LL;
  }
  return result;
}

uint64_t sub_100139C04(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6C616E7265746E69LL && a2 == 0xEA00000000004449LL)
  {
    unint64_t v5 = 0xEA00000000004449LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C616E7265746E69LL, 0xEA00000000004449LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x5079616C70736964LL && a2 == 0xEC00000065636972LL)
  {
    unint64_t v8 = 0xEC00000065636972LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5079616C70736964LL, 0xEC00000065636972LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x664F7265626D756ELL && a2 == 0xEF73646F69726550LL)
  {
    unint64_t v10 = 0xEF73646F69726550LL;
    goto LABEL_24;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x664F7265626D756ELL, 0xEF73646F69726550LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2LL;
  }

  if (a1 == 0x4D746E656D796170LL && a2 == 0xEB0000000065646FLL)
  {
    unint64_t v12 = 0xEB0000000065646FLL;
    goto LABEL_32;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4D746E656D796170LL, 0xEB0000000065646FLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3LL;
  }

  if (a1 == 0xD000000000000012LL && a2 == 0x800000010021E520LL)
  {
    swift_bridgeObjectRelease(0x800000010021E520LL);
    return 4LL;
  }

  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x800000010021E520LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

uint64_t sub_100139E70(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100139EA8 + 4 * byte_100203174[a1]))( 0x6C616E7265746E69LL,  0xEA00000000004449LL);
}

uint64_t sub_100139EA8()
{
  return 0x5079616C70736964LL;
}

uint64_t sub_100139EC8()
{
  return 0x664F7265626D756ELL;
}

uint64_t sub_100139EEC()
{
  return 0x4D746E656D796170LL;
}

unint64_t sub_100139F0C()
{
  return 0xD000000000000012LL;
}

uint64_t sub_100139F28()
{
  return sub_100139E70(*v0);
}

uint64_t sub_100139F30@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100139C04(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100139F54@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = static NIOHTTPObjectAggregatorError.unexpectedMessageEnd.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100139F78(uint64_t a1)
{
  unint64_t v2 = sub_10013B9B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100139FA0(uint64_t a1)
{
  unint64_t v2 = sub_10013B9B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100139FC8()
{
  return v0;
}

uint64_t sub_100139FF4()
{
  return swift_deallocClassInstance(v0, 80LL, 7LL);
}

uint64_t _s8DiscountCMa()
{
  return objc_opt_self(&OBJC_CLASS____TtCC25ASOctaneSupportXPCService18OctaneSubscription8Discount);
}

uint64_t sub_10013A034(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000175B0(&qword_1002B52B8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100019F58(a1, v9);
  unint64_t v11 = sub_10013B9B4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &_s8DiscountC10CodingKeysON,  &_s8DiscountC10CodingKeysON,  v11,  v9,  v10);
  uint64_t v12 = *(void *)(v3 + 16);
  uint64_t v13 = *(void *)(v3 + 24);
  char v28 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v28, v5);
  if (v2) {
    return sub_10002A788((uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  }
  uint64_t v15 = *(void *)(v3 + 32);
  uint64_t v16 = *(void *)(v3 + 40);
  char v27 = 1;
  swift_bridgeObjectRetain();
  sub_100044D1C(v15, v16, (uint64_t)&v27);
  if (!v15)
  {
    swift_bridgeObjectRelease();
    uint64_t v17 = *(void *)(v3 + 48);
    uint64_t v18 = *(unsigned __int8 *)(v3 + 56);
    char v26 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v26, v5);
    char v25 = *(_BYTE *)(v3 + 57);
    char v24 = 3;
    unint64_t v19 = sub_10013BB84();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v25, &v24, v5, &unk_100288D50, v19);
    uint64_t v20 = *(void *)(v3 + 64);
    uint64_t v21 = *(void *)(v3 + 72);
    char v23 = 4;
    swift_bridgeObjectRetain();
    sub_100044D1C(v20, v21, (uint64_t)&v23);
  }

  sub_10002A788((uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  return swift_bridgeObjectRelease();
}

#error "10013A22C: call analysis failed (funcsize=10)"
void sub_10013A23C( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  __int16 a10,  char a11,  char a12,  char a13,  char a14,  char a15,  char a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23,  uint64_t a24,  uint64_t a25,  uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  sub_1000C75A0();
  a25 = v28;
  a26 = v29;
  unint64_t v30 = v26;
  unint64_t v32 = v31;
  uint64_t v33 = sub_1000175B0(&qword_1002B5240);
  sub_10005A010();
  __chkstk_darwin(v34);
  sub_1000C78A4();
  *(void *)(v26 + 32) = 0LL;
  *(void *)(v26 + 4sub_1001A93A0(0LL, 0) = 0LL;
  *(void *)(v26 + 48) = 0LL;
  *(_BYTE *)(v26 + 56) = 1;
  *(void *)(v26 + 64) = 0LL;
  *(void *)(v26 + 72) = 0LL;
  sub_10013C3E0(v32);
  uint64_t v35 = sub_10013B9B4();
  sub_10013C368((uint64_t)&_s8DiscountC10CodingKeysON, (uint64_t)&_s8DiscountC10CodingKeysON, v35);
  if (v27)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL v39 = _s8DiscountCMa();
    sub_10013C354(v26, v39, 80LL);
  }

  else
  {
    a16 = 0;
    *(void *)(v26 + 16) = sub_10013C3C0((uint64_t)&a16);
    *(void *)(v26 + 24) = v36;
    a15 = 1;
    *(void *)(v26 + 32) = sub_10013C3B0((uint64_t)&a15);
    *(void *)(v26 + 4sub_1001A93A0(0LL, 0) = v37;
    swift_bridgeObjectRelease();
    a14 = 2;
    *(void *)(v26 + 48) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&a14, v33);
    *(_BYTE *)(v26 + 56) = v38 & 1;
    a12 = 3;
    sub_10013B9F0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&unk_100288D50, &a12, v33, &unk_100288D50);
    *(_BYTE *)(v26 + 57) = a13;
    a11 = 4;
    uint64_t v40 = sub_10013C3B0((uint64_t)&a11);
    uint64_t v42 = v41;
    sub_100023E48();
    *(void *)(v30 + 64) = v40;
    *(void *)(v30 + 72) = v42;
    swift_bridgeObjectRelease();
  }

  sub_10001A400();
  sub_10001DAB8();
}

uint64_t sub_10013A408@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 272))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_10013A434()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 264LL))();
}

void sub_10013A45C()
{
  uint64_t v0 = sub_10013C244();
  sub_10013A484(v0);
  sub_10005EDFC();
}

#error "10013A4AC: call analysis failed (funcsize=19)"
uint64_t _s17IntroductoryOfferCMa()
{
  return objc_opt_self(&OBJC_CLASS____TtCC25ASOctaneSupportXPCService18OctaneSubscription17IntroductoryOffer);
}

void sub_10013A4F0()
{
  uint64_t v0 = sub_10013C2E0();
  sub_100019310(v0, 96LL);
  uint64_t v1 = sub_10013C244();
  sub_10013A520(v1);
  sub_10005EDFC();
}

#error "10013A614: call analysis failed (funcsize=68)"
void sub_10013A638()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  sub_1000C75A0();
  uint64_t v2 = v1;
  sub_1000175B0(&qword_1002B52B0);
  sub_10005A010();
  __chkstk_darwin(v3);
  sub_100019F58(v2, v2[3]);
  char v4 = sub_10013B978();
  sub_10013C254((uint64_t)&_s17ReferencableOfferC10CodingKeysON, v5, v4);
  uint64_t v6 = *(void *)(v0 + 80);
  uint64_t v7 = swift_bridgeObjectRetain();
  sub_10013C328(v7, v8, v9);
  if (v6)
  {
    sub_10013C264();
    sub_100023EF4();
  }

  else
  {
    sub_100023EF4();
    sub_10013A034(v2);
    sub_10013C264();
  }

  sub_10013C42C();
  sub_10001DAB8();
}

BOOL sub_10013A704(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100273418, v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

BOOL sub_10013A748(Swift::String a1)
{
  return sub_10013A704(a1);
}

uint64_t sub_10013A760()
{
  return 0x636E657265666572LL;
}

BOOL sub_10013A790@<W0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = sub_10013A704(*a1);
  *a2 = result;
  return result;
}

void sub_10013A7C0(uint64_t *a1@<X8>)
{
  *a1 = sub_10013A760();
  a1[1] = v2;
  sub_10001945C();
}

BOOL sub_10013A7E4@<W0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  BOOL result = sub_10013A748(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10013A80C(uint64_t a1)
{
  unint64_t v2 = sub_10013B978();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10013A834(uint64_t a1)
{
  unint64_t v2 = sub_10013B978();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10013A85C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 88));
}

uint64_t sub_10013A864()
{
  return swift_deallocClassInstance(v0, 96LL, 7LL);
}

uint64_t _s17ReferencableOfferCMa()
{
  return objc_opt_self(&OBJC_CLASS____TtCC25ASOctaneSupportXPCService18OctaneSubscription17ReferencableOffer);
}

void sub_10013A8A8()
{
  uint64_t v0 = sub_10013C2E0();
  sub_100019310(v0, 112LL);
  uint64_t v1 = sub_10013C244();
  sub_10013A8D8(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  sub_10005EDFC();
}

void sub_10013A8D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (v11)
  {
    sub_10001EDD8();
    sub_10013C308();
    sub_10013C354(v10, a10, 112LL);
  }

  else
  {
    *(void *)(v10 + 96) = sub_10013C310();
    *(void *)(v10 + 104) = v13;
    sub_10001EDD8();
    sub_10013C35C();
    sub_10013C290();
    sub_10013C218();
    sub_10013C308();
  }

  sub_10013C390();
  sub_10001DAB8();
}

void sub_10013A9B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  a22 = v24;
  a23 = v25;
  char v27 = v26;
  sub_1000175B0(&qword_1002B5298);
  sub_10005A010();
  __chkstk_darwin(v28);
  sub_10013C3E0(v27);
  unint64_t v29 = sub_10013BB48();
  sub_10013C254((uint64_t)&_s10AdHocOfferC10CodingKeysON, v30, v29);
  uint64_t v31 = sub_10013C3D0();
  sub_10013C328(v31, v32, (uint64_t)&a13);
  if (v23)
  {
    sub_10013C264();
    sub_100023EF4();
  }

  else
  {
    sub_100023EF4();
    sub_10013C340();
    sub_10013C264();
  }

  sub_10013C42C();
  sub_10001DAB8();
}

void sub_10013AA6C(uint64_t a1, uint64_t a2)
{
  v2._rawValue = &off_100273450;
  sub_10013B2E4(a1, a2, v2);
}

uint64_t sub_10013AA88(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x636E657265666572LL;
  }
  else {
    return 0x4449726566666FLL;
  }
}

void sub_10013AACC(char *a1, unsigned __int8 *a2)
{
}

void sub_10013AAD8()
{
}

uint64_t sub_10013AAE0(uint64_t a1)
{
  return sub_1000B1CC8(a1, *v1);
}

void sub_10013AAE8(uint64_t a1)
{
}

void sub_10013AAF0(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_100273450;
  sub_10013B2E4(*a1, a1[1], v3);
  *a2 = v4;
}

void sub_10013AB24()
{
  char v1 = sub_100052340();
  *uint64_t v0 = sub_10013AA88(v1);
  v0[1] = v2;
  sub_10001945C();
}

uint64_t sub_10013AB44()
{
  return sub_10013AA88(*v0);
}

void sub_10013AB4C(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  *a3 = v4;
}

uint64_t sub_10013AB70(uint64_t a1)
{
  unint64_t v2 = sub_10013BB48();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10013AB98(uint64_t a1)
{
  unint64_t v2 = sub_10013BB48();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10013ABC0()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 104));
}

uint64_t sub_10013ABCC()
{
  return swift_deallocClassInstance(v0, 112LL, 7LL);
}

uint64_t _s10AdHocOfferCMa()
{
  return objc_opt_self(&OBJC_CLASS____TtCC25ASOctaneSupportXPCService18OctaneSubscription10AdHocOffer);
}

#error "10013AC2C: call analysis failed (funcsize=12)"
void sub_10013AC3C( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  int a10,  __int16 a11,  char a12,  char a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23)
{
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  sub_1000C75A0();
  a22 = v26;
  a23 = v27;
  uint64_t v28 = v23;
  uint64_t v31 = *v23;
  sub_1000175B0(&qword_1002B5280);
  sub_10013C2CC();
  __chkstk_darwin(v29);
  sub_10013C2AC();
  sub_10013BA2C();
  sub_10013C2A0();
  sub_10013C228((uint64_t)&unk_100288E70);
  if (v24)
  {
    sub_10001EDD8();
    sub_10013C308();
    sub_10013C354((uint64_t)v23, v31, 105LL);
  }

  else
  {
    uint64_t v30 = sub_1000175B0(&qword_1002B5268);
    a13 = 0;
    sub_10013BAA4( &qword_1002B5288,  (uint64_t (*)(void))sub_10013BB0C,  (const char *)&protocol conformance descriptor for <> Set<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v30, &a13, v25, v30);
    v28[12] = v32;
    *((_BYTE *)v28 + 104) = sub_10013C274() & 1;
    sub_10001EDD8();
    sub_10013C35C();
    sub_10013C290();
    sub_10013C218();
    sub_10013C308();
  }

  sub_10013C390();
  sub_10001DAB8();
}

void sub_10013ADB8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  uint64_t v25 = v20;
  char v27 = v26;
  uint64_t v28 = sub_1000175B0(&qword_1002B5258);
  sub_10005A010();
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&v37 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10013C3E0(v27);
  unint64_t v32 = sub_10013BA2C();
  sub_10013C254((uint64_t)&unk_100288E70, v33, v32);
  a10 = *(void *)(v20 + 96);
  char v39 = 0;
  uint64_t v34 = sub_1000175B0(&qword_1002B5268);
  uint64_t v35 = sub_10013BAA4( &qword_1002B5270,  (uint64_t (*)(void))sub_10013BA68,  (const char *)&protocol conformance descriptor for <> Set<A>);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&a10, &v39, v28, v34, v35);
  if (!v21)
  {
    uint64_t v36 = *(unsigned __int8 *)(v25 + 104);
    char v38 = 1;
    sub_10013C3A0(v36, (uint64_t)&v38);
    sub_10013C340();
  }

  sub_10002A788((uint64_t)v31, *(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
  sub_10013C42C();
  sub_10001DAB8();
}

void sub_10013AED4(uint64_t a1, uint64_t a2)
{
  v2._rawValue = &off_1002734A0;
  sub_10013B2E4(a1, a2, v2);
}

void sub_10013AEE0(uint64_t a1, uint64_t a2)
{
  v2._rawValue = &off_1002734A0;
  sub_10013B2E4(a1, a2, v2);
}

uint64_t sub_10013AEFC(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x616B636174537369LL;
  }
  else {
    return 0x6C69626967696C65LL;
  }
}

void sub_10013AF44(char *a1, unsigned __int8 *a2)
{
}

void sub_10013AF50()
{
}

uint64_t sub_10013AF58(uint64_t a1)
{
  return sub_1000B1A30(a1, *v1);
}

void sub_10013AF60(uint64_t a1)
{
}

void sub_10013AF68(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_1002734A0;
  sub_10013B2E4(*a1, a1[1], v3);
  *a2 = v4;
}

void sub_10013AF9C()
{
  char v1 = sub_100052340();
  *uint64_t v0 = sub_10013AEFC(v1);
  v0[1] = v2;
  sub_10001945C();
}

uint64_t sub_10013AFBC()
{
  return sub_10013AEFC(*v0);
}

void sub_10013AFC4(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  *a3 = v4;
}

uint64_t sub_10013AFE8(uint64_t a1)
{
  unint64_t v2 = sub_10013BA2C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10013B010(uint64_t a1)
{
  unint64_t v2 = sub_10013BA2C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10013B038()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 96));
}

uint64_t sub_10013B040()
{
  return v0;
}

uint64_t sub_10013B064()
{
  return swift_deallocClassInstance(v0, 105LL, 7LL);
}

uint64_t _s9CodeOfferCMa()
{
  return objc_opt_self(&OBJC_CLASS____TtCC25ASOctaneSupportXPCService18OctaneSubscription9CodeOffer);
}

void sub_10013B0A4()
{
  uint64_t v0 = sub_10013C2E0();
  sub_100019310(v0, 113LL);
  uint64_t v1 = sub_10013C244();
  sub_10013B0D4(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  sub_10005EDFC();
}

void sub_10013B0D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (v11)
  {
    sub_10001EDD8();
    sub_10013C308();
    sub_10013C354(v10, a10, 113LL);
  }

  else
  {
    *(void *)(v10 + 96) = sub_10013C310();
    *(void *)(v10 + 104) = v13;
    *(_BYTE *)(v10 + 112) = sub_10013C274() & 1;
    sub_10001EDD8();
    sub_10013C35C();
    sub_10013C290();
    sub_10013C218();
    sub_10013C308();
  }

  sub_10013C390();
  sub_10001DAB8();
}

void sub_10013B1EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  a22 = v26;
  a23 = v27;
  uint64_t v29 = v28;
  uint64_t v30 = sub_1000175B0(&qword_1002B5218);
  sub_10005A010();
  __chkstk_darwin(v31);
  uint64_t v33 = (char *)&a9 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = v29[3];
  sub_10013C3E0(v29);
  unint64_t v35 = sub_10013B93C();
  sub_10013C254((uint64_t)&_s12WinbackOfferC10CodingKeysON, v36, v35);
  sub_10013C3D0();
  KeyedEncodingContainer.encode(_:forKey:)(v24, v34, &a13, v30);
  if (v24)
  {
    sub_10002A788((uint64_t)v33, *(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
    sub_100023EF4();
  }

  else
  {
    sub_100023EF4();
    uint64_t v37 = *(unsigned __int8 *)(v23 + 112);
    a12 = 1;
    sub_10013C3A0(v37, (uint64_t)&a12);
    sub_10013C340();
    sub_10002A788((uint64_t)v33, *(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
  }

  sub_10013C42C();
  sub_10001DAB8();
}

void sub_10013B2E4(uint64_t a1, uint64_t a2, Swift::OpaquePointer a3)
{
}

void sub_10013B320(uint64_t a1, uint64_t a2)
{
  v2._rawValue = &off_1002734F0;
  sub_10013B2E4(a1, a2, v2);
}

uint64_t sub_10013B33C(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x626967696C457369LL;
  }
  else {
    return 0x4449726566666FLL;
  }
}

void sub_10013B378(char *a1, unsigned __int8 *a2)
{
}

void sub_10013B384()
{
}

uint64_t sub_10013B38C(uint64_t a1)
{
  return sub_1000B1BA4(a1, *v1);
}

void sub_10013B394(uint64_t a1)
{
}

void sub_10013B39C(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_1002734F0;
  sub_10013B2E4(*a1, a1[1], v3);
  *a2 = v4;
}

void sub_10013B3D0()
{
  char v1 = sub_100052340();
  *uint64_t v0 = sub_10013B33C(v1);
  v0[1] = v2;
  sub_10001945C();
}

uint64_t sub_10013B3F0()
{
  return sub_10013B33C(*v0);
}

void sub_10013B3F8(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  *a3 = v4;
}

uint64_t sub_10013B41C(uint64_t a1)
{
  unint64_t v2 = sub_10013B93C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10013B444(uint64_t a1)
{
  unint64_t v2 = sub_10013B93C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10013B46C()
{
  return v0;
}

uint64_t sub_10013B490()
{
  return swift_deallocClassInstance(v0, 113LL, 7LL);
}

uint64_t _s12WinbackOfferCMa()
{
  return objc_opt_self(&OBJC_CLASS____TtCC25ASOctaneSupportXPCService18OctaneSubscription12WinbackOffer);
}

uint64_t sub_10013B4D0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10013B51C + 4 * byte_10020317E[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10013B550 + 4 * byte_100203179[v4]))();
}

uint64_t sub_10013B550(uint64_t result)
{
  *(_BYTE *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_10013B558(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x10013B560LL);
  }
  return result;
}

uint64_t sub_10013B56C(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x10013B574LL);
  }
  *(_BYTE *)BOOL result = a2 + 2;
  return result;
}

uint64_t sub_10013B578(uint64_t result)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_10013B580(uint64_t result)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

void _s8DiscountC11EligibilityOMa()
{
}

uint64_t sub_10013B598(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10013B5E4 + 4 * byte_100203188[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10013B618 + 4 * byte_100203183[v4]))();
}

uint64_t sub_10013B618(uint64_t result)
{
  *(_BYTE *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_10013B620(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x10013B628LL);
  }
  return result;
}

uint64_t sub_10013B634(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x10013B63CLL);
  }
  *(_BYTE *)BOOL result = a2 + 3;
  return result;
}

uint64_t sub_10013B640(uint64_t result)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_10013B648(uint64_t result)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

void _s8DiscountC11PaymentModeOMa()
{
}

unint64_t sub_10013B664()
{
  unint64_t result = qword_1002B51F8;
  if (!qword_1002B51F8)
  {
    unint64_t result = swift_getWitnessTable("A]\b", &unk_100288D50);
    atomic_store(result, (unint64_t *)&qword_1002B51F8);
  }

  return result;
}

unint64_t sub_10013B6A4()
{
  unint64_t result = qword_1002B5200;
  if (!qword_1002B5200)
  {
    unint64_t result = swift_getWitnessTable("Q\\\b", &unk_100288CC0);
    atomic_store(result, (unint64_t *)&qword_1002B5200);
  }

  return result;
}

void sub_10013B6E0()
{
  if (v2)
  {
    if (!v3) {
      goto LABEL_24;
    }
    uint64_t v4 = *(void *)(v1 + 32);
    uint64_t v5 = *(void *)(v0 + 32);
    if (v4 != v5 || v2 != v3)
    {
      sub_100048720(v4, v2, v5, v3);
      sub_10013C438();
      if ((v7 & 1) == 0) {
        goto LABEL_24;
      }
    }
  }

  else if (v3)
  {
    goto LABEL_24;
  }

  if ((*(_BYTE *)(v1 + 56) & 1) != 0)
  {
    if (!*(_BYTE *)(v0 + 56)) {
      goto LABEL_24;
    }
  }

  else
  {
    sub_10013C418();
    if ((v8 & 1) != 0) {
      goto LABEL_24;
    }
  }

  sub_10013C40C();
  if ((v9 & 1) == 0) {
    goto LABEL_24;
  }
  uint64_t v10 = *(void *)(v1 + 72);
  uint64_t v11 = *(void *)(v0 + 72);
  if (!v10)
  {
    if (!v11) {
      goto LABEL_25;
    }
LABEL_24:
    sub_10001945C();
    return;
  }

  if (!v11) {
    goto LABEL_24;
  }
  uint64_t v12 = *(void *)(v1 + 64);
  uint64_t v13 = *(void *)(v0 + 64);
  if (v12 != v13 || v10 != v11)
  {
    sub_100048720(v12, v10, v13, v11);
    sub_10013C438();
    if ((v15 & 1) == 0) {
      goto LABEL_24;
    }
  }

uint64_t sub_10013B7D0()
{
  return v0 & 1;
}

void sub_10013B7F0()
{
  if (v2)
  {
    if (!v3) {
      goto LABEL_22;
    }
    uint64_t v4 = *(void *)(v1 + 32);
    uint64_t v5 = *(void *)(v0 + 32);
    if (v4 != v5 || v2 != v3)
    {
      sub_100048720(v4, v2, v5, v3);
      sub_10013C438();
      if ((v7 & 1) == 0) {
        goto LABEL_22;
      }
    }
  }

  else if (v3)
  {
    goto LABEL_22;
  }

  if ((*(_BYTE *)(v1 + 56) & 1) != 0)
  {
    if (!*(_BYTE *)(v0 + 56)) {
      goto LABEL_22;
    }
  }

  else
  {
    sub_10013C418();
    if ((v8 & 1) != 0) {
      goto LABEL_22;
    }
  }

  sub_10013C40C();
  if ((v9 & 1) != 0)
  {
    uint64_t v10 = *(void *)(v1 + 72);
    uint64_t v11 = *(void *)(v0 + 72);
    if (v10)
    {
      if (v11)
      {
        uint64_t v12 = *(void *)(v1 + 64);
        uint64_t v13 = *(void *)(v0 + 64);
        if (v12 != v13 || v10 != v11)
        {
          sub_10013C34C(v12, v10, v13, v11, 0LL);
          return;
        }
      }
    }
  }

uint64_t sub_10013B8A4()
{
  return v0 & 1;
}

unint64_t sub_10013B8C4()
{
  unint64_t result = qword_1002B5208;
  if (!qword_1002B5208)
  {
    unint64_t result = swift_getWitnessTable(byte_1002033D8, &unk_100288CC0);
    atomic_store(result, (unint64_t *)&qword_1002B5208);
  }

  return result;
}

unint64_t sub_10013B900()
{
  unint64_t result = qword_1002B5210;
  if (!qword_1002B5210)
  {
    unint64_t result = swift_getWitnessTable("q]\b", &unk_100288D50);
    atomic_store(result, (unint64_t *)&qword_1002B5210);
  }

  return result;
}

unint64_t sub_10013B93C()
{
  unint64_t result = qword_1002B5220;
  if (!qword_1002B5220)
  {
    unint64_t result = swift_getWitnessTable(byte_100203ADC, &_s12WinbackOfferC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1002B5220);
  }

  return result;
}

unint64_t sub_10013B978()
{
  unint64_t result = qword_1002B5238;
  if (!qword_1002B5238)
  {
    unint64_t result = swift_getWitnessTable("EV\b", &_s17ReferencableOfferC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1002B5238);
  }

  return result;
}

unint64_t sub_10013B9B4()
{
  unint64_t result = qword_1002B5248;
  if (!qword_1002B5248)
  {
    unint64_t result = swift_getWitnessTable(byte_100203A3C, &_s8DiscountC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1002B5248);
  }

  return result;
}

unint64_t sub_10013B9F0()
{
  unint64_t result = qword_1002B5250;
  if (!qword_1002B5250)
  {
    unint64_t result = swift_getWitnessTable(byte_1002032C0, &unk_100288D50);
    atomic_store(result, (unint64_t *)&qword_1002B5250);
  }

  return result;
}

unint64_t sub_10013BA2C()
{
  unint64_t result = qword_1002B5260;
  if (!qword_1002B5260)
  {
    unint64_t result = swift_getWitnessTable(byte_1002039EC, &unk_100288E70);
    atomic_store(result, (unint64_t *)&qword_1002B5260);
  }

  return result;
}

unint64_t sub_10013BA68()
{
  unint64_t result = qword_1002B5278;
  if (!qword_1002B5278)
  {
    unint64_t result = swift_getWitnessTable(byte_100203388, &unk_100288CC0);
    atomic_store(result, (unint64_t *)&qword_1002B5278);
  }

  return result;
}

uint64_t sub_10013BAA4(unint64_t *a1, uint64_t (*a2)(void), const char *a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_100018EC0(&qword_1002B5268);
    uint64_t v8 = a2();
    uint64_t result = swift_getWitnessTable(a3, v7, &v8);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_10013BB0C()
{
  unint64_t result = qword_1002B5290;
  if (!qword_1002B5290)
  {
    unint64_t result = swift_getWitnessTable(byte_1002033B0, &unk_100288CC0);
    atomic_store(result, (unint64_t *)&qword_1002B5290);
  }

  return result;
}

unint64_t sub_10013BB48()
{
  unint64_t result = qword_1002B52A0;
  if (!qword_1002B52A0)
  {
    unint64_t result = swift_getWitnessTable("5W\b", &_s10AdHocOfferC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1002B52A0);
  }

  return result;
}

unint64_t sub_10013BB84()
{
  unint64_t result = qword_1002B52C0;
  if (!qword_1002B52C0)
  {
    unint64_t result = swift_getWitnessTable(byte_100203298, &unk_100288D50);
    atomic_store(result, (unint64_t *)&qword_1002B52C0);
  }

  return result;
}

uint64_t sub_10013BBC0(uint64_t a1)
{
  uint64_t v2 = sub_1000175B0(&qword_1002AAFF0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

ValueMetadata *_s10AdHocOfferC10CodingKeysOMa()
{
  return &_s10AdHocOfferC10CodingKeysON;
}

void _s9CodeOfferC10CodingKeysOMa()
{
}

uint64_t _s8DiscountC10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10013BC6C + 4 * byte_100203192[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10013BCA0 + 4 * byte_10020318D[v4]))();
}

uint64_t sub_10013BCA0(uint64_t result)
{
  *(_BYTE *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_10013BCA8(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x10013BCB0LL);
  }
  return result;
}

uint64_t sub_10013BCBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x10013BCC4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10013BCC8(uint64_t result)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_10013BCD0(uint64_t result)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

ValueMetadata *_s8DiscountC10CodingKeysOMa()
{
  return &_s8DiscountC10CodingKeysON;
}

uint64_t _s17ReferencableOfferC10CodingKeysOwst(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10013BD2C + 4 * byte_100203197[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10013BD4C + 4 * byte_10020319C[v4]))();
  }
}

_BYTE *sub_10013BD2C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10013BD4C(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10013BD54(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10013BD5C(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10013BD64(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10013BD6C(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *_s17ReferencableOfferC10CodingKeysOMa()
{
  return &_s17ReferencableOfferC10CodingKeysON;
}

uint64_t _s10AdHocOfferC10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10013BDD4 + 4 * byte_1002031A6[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10013BE08 + 4 * byte_1002031A1[v4]))();
}

uint64_t sub_10013BE08(uint64_t result)
{
  *(_BYTE *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_10013BE10(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x10013BE18LL);
  }
  return result;
}

uint64_t sub_10013BE24(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x10013BE2CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10013BE30(uint64_t result)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_10013BE38(uint64_t result)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

ValueMetadata *_s12WinbackOfferC10CodingKeysOMa()
{
  return &_s12WinbackOfferC10CodingKeysON;
}

unint64_t sub_10013BE58()
{
  unint64_t result = qword_1002B52C8;
  if (!qword_1002B52C8)
  {
    unint64_t result = swift_getWitnessTable(byte_1002035EC, &_s12WinbackOfferC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1002B52C8);
  }

  return result;
}

unint64_t sub_10013BE98()
{
  unint64_t result = qword_1002B52D0;
  if (!qword_1002B52D0)
  {
    unint64_t result = swift_getWitnessTable(byte_1002036DC, &_s17ReferencableOfferC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1002B52D0);
  }

  return result;
}

unint64_t sub_10013BED8()
{
  unint64_t result = qword_1002B52D8;
  if (!qword_1002B52D8)
  {
    unint64_t result = swift_getWitnessTable("\rY\b", &_s8DiscountC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1002B52D8);
  }

  return result;
}

unint64_t sub_10013BF18()
{
  unint64_t result = qword_1002B52E0;
  if (!qword_1002B52E0)
  {
    unint64_t result = swift_getWitnessTable(byte_100203884, &unk_100288E70);
    atomic_store(result, (unint64_t *)&qword_1002B52E0);
  }

  return result;
}

unint64_t sub_10013BF58()
{
  unint64_t result = qword_1002B52E8;
  if (!qword_1002B52E8)
  {
    unint64_t result = swift_getWitnessTable("-W\b", &_s10AdHocOfferC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1002B52E8);
  }

  return result;
}

unint64_t sub_10013BF98()
{
  unint64_t result = qword_1002B52F0;
  if (!qword_1002B52F0)
  {
    unint64_t result = swift_getWitnessTable(byte_1002038AC, &_s10AdHocOfferC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1002B52F0);
  }

  return result;
}

unint64_t sub_10013BFD8()
{
  unint64_t result = qword_1002B52F8;
  if (!qword_1002B52F8)
  {
    unint64_t result = swift_getWitnessTable(byte_1002038D4, &_s10AdHocOfferC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1002B52F8);
  }

  return result;
}

unint64_t sub_10013C018()
{
  unint64_t result = qword_1002B5300;
  if (!qword_1002B5300)
  {
    unint64_t result = swift_getWitnessTable(byte_1002037BC, &unk_100288E70);
    atomic_store(result, (unint64_t *)&qword_1002B5300);
  }

  return result;
}

unint64_t sub_10013C058()
{
  unint64_t result = qword_1002B5308;
  if (!qword_1002B5308)
  {
    unint64_t result = swift_getWitnessTable(byte_1002037E4, &unk_100288E70);
    atomic_store(result, (unint64_t *)&qword_1002B5308);
  }

  return result;
}

unint64_t sub_10013C098()
{
  unint64_t result = qword_1002B5310;
  if (!qword_1002B5310)
  {
    unint64_t result = swift_getWitnessTable(byte_100203704, &_s8DiscountC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1002B5310);
  }

  return result;
}

unint64_t sub_10013C0D8()
{
  unint64_t result = qword_1002B5318;
  if (!qword_1002B5318)
  {
    unint64_t result = swift_getWitnessTable(byte_10020372C, &_s8DiscountC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1002B5318);
  }

  return result;
}

unint64_t sub_10013C118()
{
  unint64_t result = qword_1002B5320;
  if (!qword_1002B5320)
  {
    unint64_t result = swift_getWitnessTable(byte_100203614, &_s17ReferencableOfferC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1002B5320);
  }

  return result;
}

unint64_t sub_10013C158()
{
  unint64_t result = qword_1002B5328;
  if (!qword_1002B5328)
  {
    unint64_t result = swift_getWitnessTable(byte_10020363C, &_s17ReferencableOfferC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1002B5328);
  }

  return result;
}

unint64_t sub_10013C198()
{
  unint64_t result = qword_1002B5330;
  if (!qword_1002B5330)
  {
    unint64_t result = swift_getWitnessTable(byte_100203524, &_s12WinbackOfferC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1002B5330);
  }

  return result;
}

unint64_t sub_10013C1D8()
{
  unint64_t result = qword_1002B5338;
  if (!qword_1002B5338)
  {
    unint64_t result = swift_getWitnessTable("u[\b", &_s12WinbackOfferC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1002B5338);
  }

  return result;
}

uint64_t sub_10013C218()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_10013C228(uint64_t a1)
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a1, v1, v2, v3);
}

uint64_t sub_10013C244()
{
  return v0;
}

uint64_t sub_10013C254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

uint64_t sub_10013C264()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10013C274()
{
  *(_BYTE *)(v1 - 12sub_1001A93A0(0LL, 0) = 1;
  return KeyedDecodingContainer.decode(_:forKey:)(v1 - 120, v0);
}

uint64_t sub_10013C290()
{
  return sub_10013A520(v0 - 120);
}

uint64_t sub_10013C2A0()
{
  return swift_retain(v0);
}

void *sub_10013C2AC()
{
  return sub_100019F58(v0, v0[3]);
}

  ;
}

uint64_t sub_10013C2E0()
{
  return v0;
}

uint64_t sub_10013C2F0()
{
  return swift_allocObject(v0, 80LL, 7LL);
}

uint64_t sub_10013C308()
{
  return sub_100019F7C(v0);
}

uint64_t sub_10013C310()
{
  *(_BYTE *)(v1 - 12sub_1001A93A0(0LL, 0) = 0;
  return KeyedDecodingContainer.decode(_:forKey:)(v1 - 120, v0);
}

uint64_t sub_10013C328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encode(_:forKey:)(v4, v5, a3, v3);
}

void sub_10013C340()
{
}

uint64_t sub_10013C34C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, a5);
}

uint64_t sub_10013C354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocPartialClassInstance(a1, a2, a3, 7LL);
}

uint64_t sub_10013C35C()
{
  return sub_100023BAC(v0, v1 - 120);
}

uint64_t sub_10013C368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a2, a3, v3, v4);
}

void sub_10013C378()
{
  *(void *)(v1 - 72) = *v0;
}

uint64_t sub_10013C390()
{
  return v0;
}

uint64_t sub_10013C3A0(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v2);
}

uint64_t sub_10013C3B0(uint64_t a1)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, v1);
}

uint64_t sub_10013C3C0(uint64_t a1)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t sub_10013C3D0()
{
  uint64_t v2 = *(void *)(v0 + 104);
  *(_BYTE *)(v1 - 65) = 0;
  return swift_bridgeObjectRetain(v2);
}

void *sub_10013C3E0(void *a1)
{
  return sub_100019F58(a1, v1);
}

  ;
}

void sub_10013C40C()
{
}

  ;
}

  ;
}

uint64_t sub_10013C438()
{
  return 0LL;
}

uint64_t sub_10013C444(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100270E80, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10013C494(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x6C65636E6163LL;
  }
  else {
    return 7041889LL;
  }
}

void sub_10013C4C0(char *a1, unsigned __int8 *a2)
{
}

void sub_10013C4CC()
{
}

uint64_t sub_10013C4D4(uint64_t a1)
{
  return sub_1000B142C(a1, *v1);
}

void sub_10013C4DC(uint64_t a1)
{
}

uint64_t sub_10013C4E4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10013C444(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10013C510@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10013C494(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10013C538(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Locale(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_1000175B0(&qword_1002B5420);
  __chkstk_darwin(v7);
  char v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(a1 + 96);
  swift_bridgeObjectRetain();
  sub_1001BCBC8();
  sub_10012A314(0x6E6F69746361LL, 0xE600000000000000LL, v10);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  if (v14
    && (v35._countAndFlagsBits = v12, v35._object = v14, char v15 = sub_10013C444(v35), v15 != 2)
    && (char v16 = v15, sub_10013DBF8(6580596LL), v18))
  {
    uint64_t v19 = v17;
    uint64_t v20 = v18;
    uint64_t v29 = a2;
    static Locale.autoupdatingCurrent.getter();
    unint64_t v21 = sub_10013CFE4();
    IntegerFormatStyle.init(locale:)(v6, &type metadata for UInt, v21);
    BinaryInteger.init(_:format:lenient:)(v34, v19, v20, v9, 1LL, &type metadata for UInt, v21);
    uint64_t v22 = v34[0];
    sub_10013DBF8(6580578LL);
    uint64_t v24 = v23;
    uint64_t v26 = v25;
    sub_10001A420();
    a2 = v29;
    if (v26)
    {
      swift_bridgeObjectRetain();
      uint64_t v27 = swift_bridgeObjectRetain();
      sub_1000CDD90(v27, (uint64_t)v30);
      sub_10003A3EC();
      swift_bridgeObjectRelease();
      memcpy(v31, v30, 0x139uLL);
      debugOnly(_:)(v31);
      LOBYTE(v32[0]) = v16;
      v32[1] = v22;
      _OWORD v32[2] = v24;
      v32[3] = v26;
      sub_1000390C8((uint64_t)v31, (uint64_t)&v32[4], &qword_1002AA7C0);
      memcpy(v33, v32, 0x159uLL);
      debugOnly(_:)(v33);
      goto LABEL_7;
    }

    sub_10003A3EC();
  }

  else
  {
    sub_10003A3EC();
    sub_10001A420();
  }

  sub_10013CFDC(v33);
LABEL_7:
  sub_1000390C8((uint64_t)v33, (uint64_t)v34, &qword_1002B5418);
  sub_1000390C8((uint64_t)v34, a2, &qword_1002B5418);
  sub_10002A580();
}

void sub_10013C7B8(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = v2;
  uint64_t v7 = (__n128 *)a1;
  sub_100055528(a1);
  sub_10013C538((uint64_t)v7, (uint64_t)v88);
  sub_1000390C8((uint64_t)v88, (uint64_t)v93, &qword_1002B5418);
  if (sub_1000C4E08((uint64_t)v93) == 1)
  {
    sub_1000ACB64(0x7571657220646142LL, 0xEB00000000747365LL, 6u, (uint64_t)__dst);
    unsigned int v9 = sub_10013DBB0();
    Swift::UInt16 v10 = v9;
    unsigned int v11 = HIWORD(v9);
    uint64_t v12 = sub_100020008();
    uint64_t v13 = sub_10001ED7C(v12);
    *(void *)(v13 + 16) = 0LL;
    *(void *)(v13 + 24) = 0LL;
    uint64_t v14 = 21LL;
  }

  else
  {
    char v15 = v93[0];
    uint64_t v3 = v94;
    uint64_t v4 = v95;
    uint64_t v5 = v2 + 88;
    sub_100019F58((void *)(v2 + 88), *(void *)(v2 + 112));
    uint64_t v16 = sub_1000891E0();
    if (v16)
    {
      uint64_t v24 = (void *)v16;
      uint64_t v25 = type metadata accessor for AllSetDialog();
      swift_allocObject(v25, 448LL, 7LL);
      id v26 = v24;
      uint64_t v27 = sub_10011BB88();
      uint64_t v65 = 0LL;
      uint64_t v66 = 0LL;
      uint64_t v67 = _swiftEmptyArrayStorage;
      LOWORD(v68) = 0;
      uint64_t v69 = 0x3233363232333731LL;
      uint64_t v70 = 0xEB00000000373231LL;
      uint64_t v71 = 0LL;
      LOBYTE(v72) = 1;
      uint64_t v73 = 0LL;
      uint64_t v74 = 0LL;
      uint64_t v75 = 0xF000000000000000LL;
      uint64_t v76 = 0LL;
      uint64_t v77 = 0LL;
      uint64_t v78 = 1LL;
      __int128 v79 = 0u;
      __int128 v80 = 0u;
      __int128 v81 = 0u;
      __int128 v82 = 0u;
      LOBYTE(v83) = 22;
      uint64_t v84 = 0LL;
      uint64_t v85 = 0LL;
      uint64_t v86 = v27;
      LOBYTE(v87) = 2;
      if ((v15 & 1) != 0)
      {
        sub_100019F58((void *)(v6 + 88), *(void *)(v6 + 112));
        uint64_t v40 = sub_100087858();
        if (v40 != 4)
        {

          sub_10013DBE0( v53,  v54,  v55,  v56,  v57,  v58,  v59,  v60,  v63,  *(uint64_t *)__src,  *(uint64_t *)&__src[8],  *(uint64_t *)&__src[16],  *(uint64_t *)&__src[24],  *(uint64_t *)&__src[32],  *(uint64_t *)&__src[40],  *(uint64_t *)&__src[48],  *(uint64_t *)&__src[56],  *(uint64_t *)&__src[64],  *(uint64_t *)&__src[72],  *(uint64_t *)&__src[80],  *(uint64_t *)&__src[88],  *(uint64_t *)&__src[96],  *(uint64_t *)&__src[104],  *(uint64_t *)&__src[112],  *(uint64_t *)&__src[120],  *(uint64_t *)&__src[128],  *(uint64_t *)&__src[136],  *(uint64_t *)&__src[144],  *(uint64_t *)&__src[152],  *(uint64_t *)&__src[160],  *(uint64_t *)&__src[168],  *(uint64_t *)&__src[176],  *(uint64_t *)&__src[184],  *(uint64_t *)&__src[192],  *(uint64_t *)&__src[200],  *(uint64_t *)&__src[208],  v65,  v66,  (uint64_t)v67,  v68,  v69,  v70,  v71,  v72,  v73,  v74,  v75,  v76,  v77,
            v78,
            v79,
            *((uint64_t *)&v79 + 1),
            v80,
            *((uint64_t *)&v80 + 1),
            v81,
            *((uint64_t *)&v81 + 1),
            v82,
            *((uint64_t *)&v82 + 1),
            v83,
            v84,
            v85,
            v86,
            v87);

          unsigned int v61 = sub_10001ED94();
          Swift::UInt16 v10 = v61;
          unsigned int v11 = HIWORD(v61);
          sub_1000536E8((uint64_t)&v65);
          uint64_t v62 = sub_100020008();
          uint64_t v13 = sub_10001ED7C(v62);
          uint64_t v7 = 0LL;
          uint64_t v6 = 0LL;
          uint64_t v4 = 0LL;
          uint64_t v5 = 0LL;
          uint64_t v3 = 0LL;
          *(void *)(v13 + 16) = 0LL;
          *(void *)(v13 + 24) = 0LL;
          uint64_t v14 = 49LL;
          goto LABEL_11;
        }

        sub_10013DBE0( v40,  v41,  v42,  v43,  v44,  v45,  v46,  v47,  v63,  *(uint64_t *)__src,  *(uint64_t *)&__src[8],  *(uint64_t *)&__src[16],  *(uint64_t *)&__src[24],  *(uint64_t *)&__src[32],  *(uint64_t *)&__src[40],  *(uint64_t *)&__src[48],  *(uint64_t *)&__src[56],  *(uint64_t *)&__src[64],  *(uint64_t *)&__src[72],  *(uint64_t *)&__src[80],  *(uint64_t *)&__src[88],  *(uint64_t *)&__src[96],  *(uint64_t *)&__src[104],  *(uint64_t *)&__src[112],  *(uint64_t *)&__src[120],  *(uint64_t *)&__src[128],  *(uint64_t *)&__src[136],  *(uint64_t *)&__src[144],  *(uint64_t *)&__src[152],  *(uint64_t *)&__src[160],  *(uint64_t *)&__src[168],  *(uint64_t *)&__src[176],  *(uint64_t *)&__src[184],  *(uint64_t *)&__src[192],  *(uint64_t *)&__src[200],  *(uint64_t *)&__src[208],  v65,  v66,  (uint64_t)v67,  v68,  v69,  v70,  v71,  v72,  v73,  v74,  v75,  v76,  v77,
          v78,
          v79,
          *((uint64_t *)&v79 + 1),
          v80,
          *((uint64_t *)&v80 + 1),
          v81,
          *((uint64_t *)&v81 + 1),
          v82,
          *((uint64_t *)&v82 + 1),
          v83,
          v84,
          v85,
          v86,
          v87);
        swift_release();
        uint64_t v27 = 0LL;
        char v36 = 7;
        char v37 = 1;
      }

      else
      {
        uint64_t v28 = sub_10013CB58(v26);
        sub_10013DBE0( v28,  v29,  v30,  v31,  v32,  v33,  v34,  v35,  v63,  *(uint64_t *)__src,  *(uint64_t *)&__src[8],  *(uint64_t *)&__src[16],  *(uint64_t *)&__src[24],  *(uint64_t *)&__src[32],  *(uint64_t *)&__src[40],  *(uint64_t *)&__src[48],  *(uint64_t *)&__src[56],  *(uint64_t *)&__src[64],  *(uint64_t *)&__src[72],  *(uint64_t *)&__src[80],  *(uint64_t *)&__src[88],  *(uint64_t *)&__src[96],  *(uint64_t *)&__src[104],  *(uint64_t *)&__src[112],  *(uint64_t *)&__src[120],  *(uint64_t *)&__src[128],  *(uint64_t *)&__src[136],  *(uint64_t *)&__src[144],  *(uint64_t *)&__src[152],  *(uint64_t *)&__src[160],  *(uint64_t *)&__src[168],  *(uint64_t *)&__src[176],  *(uint64_t *)&__src[184],  *(uint64_t *)&__src[192],  *(uint64_t *)&__src[200],  *(uint64_t *)&__src[208],  v65,  v66,  (uint64_t)v67,  v68,  v69,  v70,  v71,  v72,  v73,  v74,  v75,  v76,  v77,
          v78,
          v79,
          *((uint64_t *)&v79 + 1),
          v80,
          *((uint64_t *)&v80 + 1),
          v81,
          *((uint64_t *)&v81 + 1),
          v82,
          *((uint64_t *)&v82 + 1),
          v83,
          v84,
          v85,
          v86,
          v87);
        char v36 = 22;
        char v37 = 2;
      }

      *(void *)__src = 0LL;
      *(void *)&__src[8] = 0LL;
      *(void *)&__src[16] = _swiftEmptyArrayStorage;
      *(_WORD *)&__src[24] = 0;
      strcpy(&__src[32], "17322632127");
      *(_DWORD *)&__src[44] = -352321536;
      *(void *)&__src[48] = 0LL;
      __src[56] = 1;
      *(void *)&__src[64] = 0LL;
      *(void *)&__src[72] = 0LL;
      *(void *)&__src[80] = 0xF000000000000000LL;
      *(void *)&__src[88] = 0LL;
      *(void *)&__src[96] = 0LL;
      *(void *)&__src[104] = 1LL;
      memset(&__src[112], 0, 64);
      __src[176] = v36;
      *(void *)&__src[184] = 0LL;
      *(void *)&__src[192] = 0LL;
      *(void *)&__src[200] = v27;
      __src[208] = v37;
      memcpy(__dst, __src, 0xD1uLL);
      sub_100053590((uint64_t)__src);
      sub_100178920((uint64_t)__dst, v7, (uint64_t)v89);
      uint64_t v7 = (__n128 *)v89[0];
      uint64_t v6 = v89[1];
      uint64_t v4 = v89[2];
      uint64_t v5 = v89[3];
      uint64_t v48 = v90;
      uint64_t v49 = v91;
      uint64_t v50 = v92;
      sub_1000536E8((uint64_t)__src);

      uint64_t v3 = v48 | (v49 << 32) | (v50 << 48);
      unsigned int v51 = sub_10001ED94();
      Swift::UInt16 v10 = v51;
      unsigned int v11 = HIWORD(v51);
      sub_1000536E8((uint64_t)__src);
      uint64_t v52 = sub_100020008();
      uint64_t v13 = sub_10001ED7C(v52);
      *(void *)(v13 + 16) = 0LL;
      *(void *)(v13 + 24) = 0LL;
      uint64_t v14 = 3LL;
    }

    else
    {
      sub_10013DBE0( 0LL,  v17,  v18,  v19,  v20,  v21,  v22,  v23,  v63,  *(uint64_t *)__src,  *(uint64_t *)&__src[8],  *(uint64_t *)&__src[16],  *(uint64_t *)&__src[24],  *(uint64_t *)&__src[32],  *(uint64_t *)&__src[40],  *(uint64_t *)&__src[48],  *(uint64_t *)&__src[56],  *(uint64_t *)&__src[64],  *(uint64_t *)&__src[72],  *(uint64_t *)&__src[80],  *(uint64_t *)&__src[88],  *(uint64_t *)&__src[96],  *(uint64_t *)&__src[104],  *(uint64_t *)&__src[112],  *(uint64_t *)&__src[120],  *(uint64_t *)&__src[128],  *(uint64_t *)&__src[136],  *(uint64_t *)&__src[144],  *(uint64_t *)&__src[152],  *(uint64_t *)&__src[160],  *(uint64_t *)&__src[168],  *(uint64_t *)&__src[176],  *(uint64_t *)&__src[184],  *(uint64_t *)&__src[192],  *(uint64_t *)&__src[200],  *(uint64_t *)&__src[208],  v65,  v66,  (uint64_t)v67,  v68,  v69,  v70,  v71,  v72,  v73,  v74,  v75,  v76,  v77,
        v78,
        v79,
        *((uint64_t *)&v79 + 1),
        v80,
        *((uint64_t *)&v80 + 1),
        v81,
        *((uint64_t *)&v81 + 1),
        v82,
        *((uint64_t *)&v82 + 1),
        v83,
        v84,
        v85,
        v86,
        v87);
      sub_1000ACB64(0xD000000000000014LL, 0x800000010021E710LL, 6u, (uint64_t)__dst);
      unsigned int v38 = sub_10013DBB0();
      Swift::UInt16 v10 = v38;
      unsigned int v11 = HIWORD(v38);
      uint64_t v39 = sub_100020008();
      uint64_t v13 = sub_10001ED7C(v39);
      *(void *)(v13 + 16) = 0LL;
      *(void *)(v13 + 24) = 0LL;
      uint64_t v14 = 25LL;
    }
  }

uint64_t sub_10013CB58(void *a1)
{
  return sub_100089348(a1, 1);
}

uint64_t type metadata accessor for AskToBuyPermissionRoute()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService23AskToBuyPermissionRoute);
}

uint64_t sub_10013CBD0(uint64_t a1)
{
  __int128 v7 = *(_OWORD *)(a1 + 304);
  __int128 v8 = *(_OWORD *)(a1 + 320);
  __int128 v5 = *(_OWORD *)(a1 + 272);
  __int128 v6 = *(_OWORD *)(a1 + 288);
  __int128 v3 = *(_OWORD *)(a1 + 240);
  __int128 v4 = *(_OWORD *)(a1 + 256);
  sub_10013CC68( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 128),  *(void *)(a1 + 136),  *(void *)(a1 + 144),  *(void *)(a1 + 152),  *(void *)(a1 + 160),  *(void *)(a1 + 168),  *(void *)(a1 + 176),  *(void *)(a1 + 184),  *(void *)(a1 + 192),  *(void *)(a1 + 200),  *(void *)(a1 + 208),  *(void *)(a1 + 216),  *(void *)(a1 + 224),  *(void *)(a1 + 232),  v3,  *((uint64_t *)&v3 + 1),  v4,  *((uint64_t *)&v4 + 1),  v5,  *((uint64_t *)&v5 + 1),  v6,  *((uint64_t *)&v6 + 1),  v7,  *((uint64_t *)&v7 + 1),  v8,  *((uint64_t *)&v8 + 1),  *(void *)(a1 + 336));
  return a1;
}

uint64_t sub_10013CC68( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43)
{
  if (a4)
  {
    swift_bridgeObjectRelease();
    return sub_100039578( a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43);
  }

  return result;
}

uint64_t sub_10013CEA4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char a5)
{
  if ((a5 & 1) != 0) {
    uint64_t v8 = 0x6C65636E6163LL;
  }
  else {
    uint64_t v8 = 7041889LL;
  }
  if ((a5 & 1) != 0) {
    unint64_t v9 = 0xE600000000000000LL;
  }
  else {
    unint64_t v9 = 0xE300000000000000LL;
  }
  unint64_t v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  sub_10013DBE8(29759LL);
  v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  sub_10013DBE8(25126LL);
  v12._uint64_t countAndFlagsBits = a3;
  v12._object = a4;
  String.append(_:)(v12);
  sub_1001828C8(0x7975426F546B7361LL, (void *)0xE90000000000002FLL);
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  return v14;
}

void sub_10013CFDC(void *a1)
{
}

unint64_t sub_10013CFE4()
{
  unint64_t result = qword_1002B5428;
  if (!qword_1002B5428)
  {
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for UInt, &type metadata for UInt);
    atomic_store(result, (unint64_t *)&qword_1002B5428);
  }

  return result;
}

uint64_t destroy for AskToBuyPermissionRequest(void *a1)
{
  uint64_t result = a1[7];
  if (result != 1)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[10]);
    swift_bridgeObjectRelease(a1[12]);
    swift_bridgeObjectRelease(a1[14]);
    swift_bridgeObjectRelease(a1[16]);
    swift_bridgeObjectRelease(a1[18]);
    swift_bridgeObjectRelease(a1[20]);
    swift_bridgeObjectRelease(a1[22]);
    swift_bridgeObjectRelease(a1[23]);
    swift_bridgeObjectRelease(a1[25]);
    swift_bridgeObjectRelease(a1[28]);
    swift_bridgeObjectRelease(a1[32]);
    swift_bridgeObjectRelease(a1[34]);
    swift_bridgeObjectRelease(a1[36]);
    swift_bridgeObjectRelease(a1[38]);
    swift_bridgeObjectRelease(a1[40]);
    return swift_bridgeObjectRelease(a1[42]);
  }

  return result;
}

uint64_t initializeWithCopy for AskToBuyPermissionRequest(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  __int128 v5 = (_BYTE *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 56);
  swift_bridgeObjectRetain(v4);
  if (v6 == 1)
  {
    memcpy((void *)(a1 + 32), v5, 0x139uLL);
  }

  else
  {
    *(void *)(a1 + 32) = *(void *)v5;
    *(_BYTE *)(a1 + 4sub_1001A93A0(0LL, 0) = v5[8];
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = v6;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    uint64_t v7 = *(void *)(a2 + 88);
    uint64_t v26 = *(void *)(a2 + 80);
    *(void *)(a1 + 8sub_1001A93A0(0LL, 0) = v26;
    *(void *)(a1 + 88) = v7;
    uint64_t v8 = *(void *)(a2 + 104);
    uint64_t v25 = *(void *)(a2 + 96);
    *(void *)(a1 + 96) = v25;
    *(void *)(a1 + 104) = v8;
    uint64_t v9 = *(void *)(a2 + 120);
    uint64_t v24 = *(void *)(a2 + 112);
    *(void *)(a1 + 112) = v24;
    *(void *)(a1 + 12sub_1001A93A0(0LL, 0) = v9;
    uint64_t v10 = *(void *)(a2 + 136);
    uint64_t v23 = *(void *)(a2 + 128);
    *(void *)(a1 + 128) = v23;
    *(void *)(a1 + 136) = v10;
    uint64_t v12 = *(void *)(a2 + 144);
    uint64_t v11 = *(void *)(a2 + 152);
    *(void *)(a1 + 144) = v12;
    *(void *)(a1 + 152) = v11;
    uint64_t v13 = *(void *)(a2 + 168);
    uint64_t v22 = *(void *)(a2 + 160);
    *(void *)(a1 + 16sub_1001A93A0(0LL, 0) = v22;
    *(void *)(a1 + 168) = v13;
    uint64_t v21 = *(void *)(a2 + 176);
    uint64_t v29 = *(void *)(a2 + 184);
    *(void *)(a1 + 176) = v21;
    *(void *)(a1 + 184) = v29;
    uint64_t v28 = *(void *)(a2 + 200);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(void *)(a1 + 20sub_1001A93A0(0LL, 0) = v28;
    *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
    uint64_t v27 = *(void *)(a2 + 224);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(void *)(a1 + 224) = v27;
    *(_BYTE *)(a1 + 24sub_1001A93A0(0LL, 0) = *(_BYTE *)(a2 + 240);
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    uint64_t v14 = *(void *)(a2 + 256);
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(void *)(a1 + 256) = v14;
    uint64_t v15 = *(void *)(a2 + 272);
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    *(void *)(a1 + 272) = v15;
    uint64_t v16 = *(void *)(a2 + 288);
    *(void *)(a1 + 28sub_1001A93A0(0LL, 0) = *(void *)(a2 + 280);
    *(void *)(a1 + 288) = v16;
    uint64_t v17 = *(void *)(a2 + 304);
    *(void *)(a1 + 296) = *(void *)(a2 + 296);
    *(void *)(a1 + 304) = v17;
    uint64_t v18 = *(void *)(a2 + 320);
    *(void *)(a1 + 312) = *(void *)(a2 + 312);
    *(void *)(a1 + 32sub_1001A93A0(0LL, 0) = v18;
    uint64_t v19 = *(void *)(a2 + 336);
    *(void *)(a1 + 328) = *(void *)(a2 + 328);
    *(void *)(a1 + 336) = v19;
    *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
  }

  return a1;
}

uint64_t assignWithCopy for AskToBuyPermissionRequest(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)(a1 + 32);
  __int128 v5 = (uint64_t *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56) != 1LL)
  {
    if (v6 != 1)
    {
      uint64_t v10 = *v5;
      *(_BYTE *)(a1 + 4sub_1001A93A0(0LL, 0) = *(_BYTE *)(a2 + 40);
      *uint64_t v4 = v10;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void *)(a2 + 64);
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(void *)(a1 + 64) = v11;
      *(void *)(a1 + 8sub_1001A93A0(0LL, 0) = *(void *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 12sub_1001A93A0(0LL, 0) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 16sub_1001A93A0(0LL, 0) = *(void *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      *(void *)(a1 + 20sub_1001A93A0(0LL, 0) = *(void *)(a2 + 200);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
      *(_BYTE *)(a1 + 209) = *(_BYTE *)(a2 + 209);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)(a2 + 232);
      *(_BYTE *)(a1 + 24sub_1001A93A0(0LL, 0) = *(_BYTE *)(a2 + 240);
      *(void *)(a1 + 232) = v12;
      *(void *)(a1 + 248) = *(void *)(a2 + 248);
      *(void *)(a1 + 256) = *(void *)(a2 + 256);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 264) = *(void *)(a2 + 264);
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 28sub_1001A93A0(0LL, 0) = *(void *)(a2 + 280);
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      *(void *)(a1 + 304) = *(void *)(a2 + 304);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 312) = *(void *)(a2 + 312);
      *(void *)(a1 + 32sub_1001A93A0(0LL, 0) = *(void *)(a2 + 320);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 328) = *(void *)(a2 + 328);
      *(void *)(a1 + 336) = *(void *)(a2 + 336);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
      return a1;
    }

    sub_10003A024((void *)(a1 + 32));
    goto LABEL_6;
  }

  if (v6 == 1)
  {
LABEL_6:
    memcpy((void *)(a1 + 32), (const void *)(a2 + 32), 0x139uLL);
    return a1;
  }

  uint64_t v7 = *v5;
  *(_BYTE *)(a1 + 4sub_1001A93A0(0LL, 0) = *(_BYTE *)(a2 + 40);
  *uint64_t v4 = v7;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 8sub_1001A93A0(0LL, 0) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 12sub_1001A93A0(0LL, 0) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 16sub_1001A93A0(0LL, 0) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 20sub_1001A93A0(0LL, 0) = *(void *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_BYTE *)(a1 + 209) = *(_BYTE *)(a2 + 209);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  uint64_t v9 = *(void *)(a2 + 232);
  *(_BYTE *)(a1 + 24sub_1001A93A0(0LL, 0) = *(_BYTE *)(a2 + 240);
  *(void *)(a1 + 232) = v9;
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 28sub_1001A93A0(0LL, 0) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(void *)(a1 + 32sub_1001A93A0(0LL, 0) = *(void *)(a2 + 320);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *initializeWithTake for AskToBuyPermissionRequest(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x159uLL);
}

uint64_t assignWithTake for AskToBuyPermissionRequest(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 56) != 1LL)
  {
    uint64_t v4 = *(void *)(a2 + 56);
    if (v4 != 1)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(_BYTE *)(a1 + 4sub_1001A93A0(0LL, 0) = *(_BYTE *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v4;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(void *)(a1 + 8sub_1001A93A0(0LL, 0) = *(void *)(a2 + 80);
      swift_bridgeObjectRelease();
      uint64_t v5 = *(void *)(a2 + 96);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = v5;
      swift_bridgeObjectRelease();
      uint64_t v6 = *(void *)(a2 + 112);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = v6;
      swift_bridgeObjectRelease();
      uint64_t v7 = *(void *)(a2 + 128);
      *(void *)(a1 + 12sub_1001A93A0(0LL, 0) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = v7;
      swift_bridgeObjectRelease();
      uint64_t v8 = *(void *)(a2 + 144);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = v8;
      swift_bridgeObjectRelease();
      uint64_t v9 = *(void *)(a2 + 160);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 16sub_1001A93A0(0LL, 0) = v9;
      swift_bridgeObjectRelease();
      uint64_t v10 = *(void *)(a2 + 176);
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = v10;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void *)(a2 + 200);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      *(void *)(a1 + 20sub_1001A93A0(0LL, 0) = v11;
      swift_bridgeObjectRelease();
      *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
      uint64_t v12 = *(void *)(a2 + 224);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      *(void *)(a1 + 224) = v12;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      *(_BYTE *)(a1 + 24sub_1001A93A0(0LL, 0) = *(_BYTE *)(a2 + 240);
      uint64_t v13 = *(void *)(a2 + 256);
      *(void *)(a1 + 248) = *(void *)(a2 + 248);
      *(void *)(a1 + 256) = v13;
      swift_bridgeObjectRelease();
      uint64_t v14 = *(void *)(a2 + 272);
      *(void *)(a1 + 264) = *(void *)(a2 + 264);
      *(void *)(a1 + 272) = v14;
      swift_bridgeObjectRelease();
      uint64_t v15 = *(void *)(a2 + 288);
      *(void *)(a1 + 28sub_1001A93A0(0LL, 0) = *(void *)(a2 + 280);
      *(void *)(a1 + 288) = v15;
      swift_bridgeObjectRelease();
      uint64_t v16 = *(void *)(a2 + 304);
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      *(void *)(a1 + 304) = v16;
      swift_bridgeObjectRelease();
      uint64_t v17 = *(void *)(a2 + 320);
      *(void *)(a1 + 312) = *(void *)(a2 + 312);
      *(void *)(a1 + 32sub_1001A93A0(0LL, 0) = v17;
      swift_bridgeObjectRelease();
      uint64_t v18 = *(void *)(a2 + 336);
      *(void *)(a1 + 328) = *(void *)(a2 + 328);
      *(void *)(a1 + 336) = v18;
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
      return a1;
    }

    sub_10003A024((void *)(a1 + 32));
  }

  memcpy((void *)(a1 + 32), (const void *)(a2 + 32), 0x139uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for AskToBuyPermissionRequest(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 345))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AskToBuyPermissionRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 20sub_1001A93A0(0LL, 0) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12sub_1001A93A0(0LL, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4sub_1001A93A0(0LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 344) = 0;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 28sub_1001A93A0(0LL, 0) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 345) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 345) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AskToBuyPermissionRequest()
{
  return &type metadata for AskToBuyPermissionRequest;
}

uint64_t storeEnumTagSinglePayload for AskToBuyPermissionRequest.Action( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10013DAF0 + 4 * byte_100203B35[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10013DB24 + 4 * byte_100203B30[v4]))();
}

uint64_t sub_10013DB24(uint64_t result)
{
  *(_BYTE *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_10013DB2C(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x10013DB34LL);
  }
  return result;
}

uint64_t sub_10013DB40(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x10013DB48LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10013DB4C(uint64_t result)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_10013DB54(uint64_t result)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AskToBuyPermissionRequest.Action()
{
  return &type metadata for AskToBuyPermissionRequest.Action;
}

unint64_t sub_10013DB74()
{
  unint64_t result = qword_1002B5430;
  if (!qword_1002B5430)
  {
    unint64_t result = swift_getWitnessTable("uV\b", &type metadata for AskToBuyPermissionRequest.Action);
    atomic_store(result, (unint64_t *)&qword_1002B5430);
  }

  return result;
}

ASOctaneSupportXPCService::HTTPVersion sub_10013DBB0()
{
  return HTTPVersion.init(major:minor:)(1LL, 1LL);
}

uint64_t sub_10013DBE0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  return sub_10013CBD0((uint64_t)&a64);
}

void sub_10013DBE8(uint64_t a1)
{
  v1._uint64_t countAndFlagsBits = a1 & 0xFFFF00000000FFFFLL | 0x3D64690000LL;
  v1._object = (void *)0xE500000000000000LL;
  String.append(_:)(v1);
}

void sub_10013DBF8(uint64_t a1)
{
}

char *sub_10013DC04(char *a1, char *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *(void *)a2;
    *(void *)uint64_t v4 = *(void *)a2;
    uint64_t v4 = (char *)(v23 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v23);
  }

  else
  {
    uint64_t v7 = *((void *)a2 + 1);
    *(void *)a1 = *(void *)a2;
    *((void *)a1 + sub_1001A93A0(v0, 1) = v7;
    uint64_t v8 = *((void *)a2 + 3);
    *((void *)a1 + 2) = *((void *)a2 + 2);
    *((void *)a1 + 3) = v8;
    uint64_t v9 = *((void *)a2 + 5);
    *((void *)a1 + 4) = *((void *)a2 + 4);
    *((void *)a1 + 5) = v9;
    uint64_t v10 = *((void *)a2 + 7);
    uint64_t v11 = a3[8];
    uint64_t v25 = &a1[v11];
    uint64_t v12 = &a2[v11];
    *((void *)a1 + 6) = *((void *)a2 + 6);
    *((void *)a1 + 7) = v10;
    uint64_t v13 = type metadata accessor for Date(0LL);
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    v14(v25, v12, v13);
    v14(&v4[a3[9]], &a2[a3[9]], v13);
    v14(&v4[a3[10]], &a2[a3[10]], v13);
    uint64_t v15 = a3[11];
    uint64_t v16 = a3[12];
    uint64_t v17 = &v4[v15];
    uint64_t v18 = &a2[v15];
    uint64_t v19 = *((void *)v18 + 1);
    *(void *)uint64_t v17 = *(void *)v18;
    *((void *)v17 + sub_1001A93A0(v0, 1) = v19;
    uint64_t v20 = &v4[v16];
    uint64_t v21 = &a2[v16];
    uint64_t v22 = *((void *)v21 + 1);
    *(void *)uint64_t v20 = *(void *)v21;
    *((void *)v20 + sub_1001A93A0(v0, 1) = v22;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v22);
  }

  return v4;
}

uint64_t sub_10013DD4C(char *a1, int *a2)
{
  uint64_t v4 = &a1[a2[8]];
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v6(v4, v5);
  v6(&a1[a2[9]], v5);
  v6(&a1[a2[10]], v5);
  swift_bridgeObjectRelease(*(void *)&a1[a2[11] + 8]);
  return swift_bridgeObjectRelease(*(void *)&a1[a2[12] + 8]);
}

char *sub_10013DE00(char *a1, char *a2, int *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + sub_1001A93A0(v0, 1) = v6;
  uint64_t v7 = *((void *)a2 + 3);
  *((void *)a1 + 2) = *((void *)a2 + 2);
  *((void *)a1 + 3) = v7;
  uint64_t v8 = *((void *)a2 + 5);
  *((void *)a1 + 4) = *((void *)a2 + 4);
  *((void *)a1 + 5) = v8;
  uint64_t v9 = *((void *)a2 + 7);
  uint64_t v10 = a3[8];
  uint64_t v23 = &a1[v10];
  uint64_t v11 = &a2[v10];
  *((void *)a1 + 6) = *((void *)a2 + 6);
  *((void *)a1 + 7) = v9;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  v13(v23, v11, v12);
  v13(&a1[a3[9]], &a2[a3[9]], v12);
  v13(&a1[a3[10]], &a2[a3[10]], v12);
  uint64_t v14 = a3[11];
  uint64_t v15 = a3[12];
  uint64_t v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  uint64_t v18 = *((void *)v17 + 1);
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + sub_1001A93A0(v0, 1) = v18;
  uint64_t v19 = &a1[v15];
  uint64_t v20 = &a2[v15];
  uint64_t v21 = *((void *)v20 + 1);
  *(void *)uint64_t v19 = *(void *)v20;
  *((void *)v19 + sub_1001A93A0(v0, 1) = v21;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v21);
  return a1;
}

char *sub_10013DF1C(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *((void *)a2 + 1);
  uint64_t v7 = *((void *)a1 + 1);
  *((void *)a1 + sub_1001A93A0(v0, 1) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *((void *)a1 + 2) = *((void *)a2 + 2);
  uint64_t v8 = *((void *)a2 + 3);
  uint64_t v9 = *((void *)a1 + 3);
  *((void *)a1 + 3) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *((void *)a1 + 4) = *((void *)a2 + 4);
  uint64_t v10 = *((void *)a2 + 5);
  uint64_t v11 = *((void *)a1 + 5);
  *((void *)a1 + 5) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *((void *)a1 + 6) = *((void *)a2 + 6);
  uint64_t v12 = *((void *)a2 + 7);
  uint64_t v13 = *((void *)a1 + 7);
  *((void *)a1 + 7) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = a3[8];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24LL);
  v18(v15, v16, v17);
  v18(&a1[a3[9]], &a2[a3[9]], v17);
  v18(&a1[a3[10]], &a2[a3[10]], v17);
  uint64_t v19 = a3[11];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  *(void *)uint64_t v20 = *(void *)v21;
  uint64_t v22 = *((void *)v21 + 1);
  uint64_t v23 = *((void *)v20 + 1);
  *((void *)v20 + sub_1001A93A0(v0, 1) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = a3[12];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  *(void *)uint64_t v25 = *(void *)v26;
  uint64_t v27 = *((void *)v26 + 1);
  uint64_t v28 = *((void *)v25 + 1);
  *((void *)v25 + sub_1001A93A0(v0, 1) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  return a1;
}

char *sub_10013E08C(char *a1, char *a2, int *a3)
{
  __int128 v6 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + sub_1001A93A0(v0, 1) = v6;
  __int128 v7 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 3) = v7;
  uint64_t v8 = a3[8];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL);
  v12(v9, v10, v11);
  v12(&a1[a3[9]], &a2[a3[9]], v11);
  v12(&a1[a3[10]], &a2[a3[10]], v11);
  uint64_t v13 = a3[12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  *(_OWORD *)&a1[v13] = *(_OWORD *)&a2[v13];
  return a1;
}

char *sub_10013E148(char *a1, char *a2, int *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  uint64_t v7 = *((void *)a1 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + sub_1001A93A0(v0, 1) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *((void *)a2 + 3);
  uint64_t v9 = *((void *)a1 + 3);
  *((void *)a1 + 2) = *((void *)a2 + 2);
  *((void *)a1 + 3) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *((void *)a2 + 5);
  uint64_t v11 = *((void *)a1 + 5);
  *((void *)a1 + 4) = *((void *)a2 + 4);
  *((void *)a1 + 5) = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *((void *)a2 + 7);
  uint64_t v13 = *((void *)a1 + 7);
  *((void *)a1 + 6) = *((void *)a2 + 6);
  *((void *)a1 + 7) = v12;
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = a3[8];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 40LL);
  v18(v15, v16, v17);
  v18(&a1[a3[9]], &a2[a3[9]], v17);
  v18(&a1[a3[10]], &a2[a3[10]], v17);
  uint64_t v19 = a3[11];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = (uint64_t *)&a2[v19];
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  uint64_t v24 = *((void *)v20 + 1);
  *(void *)uint64_t v20 = v23;
  *((void *)v20 + sub_1001A93A0(v0, 1) = v22;
  swift_bridgeObjectRelease(v24);
  uint64_t v25 = a3[12];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = (uint64_t *)&a2[v25];
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  uint64_t v30 = *((void *)v26 + 1);
  *(void *)uint64_t v26 = v29;
  *((void *)v26 + sub_1001A93A0(v0, 1) = v28;
  swift_bridgeObjectRelease(v30);
  return a1;
}

uint64_t sub_10013E258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013E264);
}

uint64_t sub_10013E264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    return sub_10001D158(a1 + *(int *)(a3 + 32), a2, v8);
  }

uint64_t sub_10013E2D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013E2E4);
}

uint64_t sub_10013E2E4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    return sub_10001762C(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }

  return result;
}

uint64_t type metadata accessor for AppTransaction(uint64_t a1)
{
  uint64_t result = qword_1002B5490;
  if (!qword_1002B5490) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppTransaction);
  }
  return result;
}

uint64_t sub_10013E388(uint64_t a1)
{
  v4[0] = &unk_100203CB8;
  v4[1] = &unk_100203CB8;
  v4[2] = &unk_100203CB8;
  void v4[3] = &unk_100203CB8;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(result - 8) + 64LL;
    uint64_t v6 = v5;
    uint64_t v7 = v5;
    uint64_t v8 = &unk_100203CB8;
    uint64_t v9 = &unk_100203CB8;
    swift_initStructMetadata(a1, 256LL, 9LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_10013E408(uint64_t a1)
{
  uint64_t result = sub_1000221A8(&qword_1002B54E8, type metadata accessor for AppTransaction, (uint64_t)&unk_100203CEC);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10013E444(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100273540, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 9) {
    return 9LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10013E490(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10013E4C4 + 4 * byte_100203C60[a1]))( 0x6449656C646E7562LL,  0xE800000000000000LL);
}

unint64_t sub_10013E4C4()
{
  return 0xD000000000000012LL;
}

unint64_t sub_10013E4EC()
{
  return 0xD000000000000017LL;
}

uint64_t sub_10013E578()
{
  return 0x4474736575716572LL;
}

uint64_t sub_10013E59C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10013E5D0 + 4 * byte_100203C69[a1]))( 0x6449656C646E7562LL,  0xE800000000000000LL);
}

unint64_t sub_10013E5D0()
{
  return 0xD000000000000012LL;
}

unint64_t sub_10013E5F8()
{
  return 0xD000000000000017LL;
}

uint64_t sub_10013E684()
{
  return 0x4474736575716572LL;
}

void sub_10013E6A8(void *a1)
{
  unint64_t v4 = v1;
  uint64_t v6 = sub_1000175B0(&qword_1002B5500);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_1000728A4();
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100019F58(a1, v8);
  unint64_t v10 = sub_10013EEE8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AppTransaction.CodingKeys,  &type metadata for AppTransaction.CodingKeys,  v10,  v8,  v9);
  uint64_t v11 = v4[2];
  uint64_t v12 = v4[3];
  char v37 = 0;
  sub_100023EB4(v11, v12, (uint64_t)&v37);
  if (!v2)
  {
    uint64_t v13 = v4[4];
    uint64_t v14 = v4[5];
    char v36 = 1;
    sub_100023EB4(v13, v14, (uint64_t)&v36);
    uint64_t v15 = (int *)type metadata accessor for AppTransaction(0LL);
    uint64_t v16 = (uint64_t *)((char *)v4 + v15[11]);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    char v35 = 2;
    sub_100023EB4(v17, v18, (uint64_t)&v35);
    uint64_t v19 = (uint64_t *)((char *)v4 + v15[12]);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    char v34 = 3;
    sub_100023EB4(v20, v21, (uint64_t)&v34);
    uint64_t v22 = *v4;
    uint64_t v23 = v4[1];
    char v33 = 4;
    sub_100023EB4(v22, v23, (uint64_t)&v33);
    uint64_t v24 = v4[6];
    uint64_t v25 = v4[7];
    char v32 = 5;
    sub_100023EB4(v24, v25, (uint64_t)&v32);
    uint64_t v26 = (uint64_t)v4 + v15[10];
    char v31 = 6;
    type metadata accessor for Date(0LL);
    sub_1000221A8( (unint64_t *)&qword_1002A93C8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    sub_10013F130(v26, (uint64_t)&v31);
    uint64_t v27 = (uint64_t)v4 + v15[8];
    char v30 = 7;
    sub_10013F130(v27, (uint64_t)&v30);
    uint64_t v28 = (uint64_t)v4 + v15[9];
    char v29 = 8;
    sub_10013F130(v28, (uint64_t)&v29);
  }

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
  sub_10001DAB8();
}

void sub_10013E8A4(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = a2;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v51 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  unint64_t v10 = (char *)&v41 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v41 - v11;
  uint64_t v46 = sub_1000175B0(&qword_1002B54F0);
  __chkstk_darwin(v46);
  sub_1000728A4();
  uint64_t v52 = type metadata accessor for AppTransaction(0LL);
  __chkstk_darwin(v52);
  uint64_t v14 = (uint64_t *)((char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  *uint64_t v14 = 0x65646F6358LL;
  v14[1] = 0xE500000000000000LL;
  uint64_t v48 = v14;
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  uint64_t v50 = a1;
  sub_100019F58(a1, v15);
  unint64_t v17 = sub_10013EEE8();
  uint64_t v45 = v2;
  uint64_t v18 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AppTransaction.CodingKeys,  &type metadata for AppTransaction.CodingKeys,  v17,  v15,  v16);
  uint64_t v47 = v4;
  if (v18)
  {
    uint64_t v49 = v18;
    sub_100019F7C(v50);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v43 = v7;
    char v60 = 0;
    uint64_t v19 = v46;
    uint64_t v20 = sub_10013F1A0((uint64_t)&v60);
    uint64_t v21 = v48;
    v48[2] = v20;
    void v21[3] = v22;
    char v59 = 1;
    v21[4] = sub_10013F1A0((uint64_t)&v59);
    void v21[5] = v23;
    char v58 = 2;
    uint64_t v24 = sub_10013F1A0((uint64_t)&v58);
    uint64_t v25 = v19;
    uint64_t v26 = v52;
    uint64_t v27 = (void *)((char *)v21 + *(int *)(v52 + 44));
    *uint64_t v27 = v24;
    v27[1] = v28;
    char v57 = 3;
    uint64_t v29 = KeyedDecodingContainer.decode(_:forKey:)(&v57, v25);
    char v30 = (void *)((char *)v21 + *(int *)(v26 + 48));
    *char v30 = v29;
    v30[1] = v31;
    char v56 = 5;
    uint64_t v32 = v46;
    v21[6] = sub_10013F1A0((uint64_t)&v56);
    v21[7] = v33;
    char v55 = 6;
    uint64_t v34 = sub_1000221A8( &qword_1002A93E8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v42 = (void (*)(void, void, void))v12;
    uint64_t v49 = v34;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v4, &v55, v32, v4);
    uint64_t v35 = (uint64_t)v21;
    uint64_t v36 = v32;
    uint64_t v37 = v52;
    uint64_t v38 = v35 + *(int *)(v52 + 40);
    uint64_t v39 = v42;
    uint64_t v42 = *(void (**)(void, void, void))(v51 + 32);
    v42(v38, v39, v4);
    char v54 = 7;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v4, &v54, v36, v4);
    uint64_t v40 = (void (*)(uint64_t, char *, uint64_t))v42;
    v42(v35 + *(int *)(v37 + 32), v10, v4);
    char v53 = 8;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v4, &v53, v46, v4);
    uint64_t v49 = 0LL;
    sub_10013F170();
    v40(v35 + *(int *)(v37 + 36), v43, v4);
    sub_10013EF24(v35, v44);
    sub_100019F7C(v50);
    sub_10013EF68(v35);
  }

  sub_10001DAB8();
}

void sub_10013EDA8(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_10013EDB4()
{
}

uint64_t sub_10013EDBC(uint64_t a1)
{
  return sub_1000B22E0(a1, *v1);
}

void sub_10013EDC4(uint64_t a1)
{
}

unint64_t sub_10013EDCC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10013E444(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10013EDF8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10013E490(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10013EE20()
{
  return sub_10013E59C(*v0);
}

uint64_t sub_10013EE28@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10013E48C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10013EE4C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = static NIOBSDSocket.Option.ipv6_multicast_if.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10013EE70(uint64_t a1)
{
  unint64_t v2 = sub_10013EEE8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10013EE98(uint64_t a1)
{
  unint64_t v2 = sub_10013EEE8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10013EEC0(void *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_10013EED4(void *a1)
{
}

unint64_t sub_10013EEE8()
{
  unint64_t result = qword_1002B54F8;
  if (!qword_1002B54F8)
  {
    unint64_t result = swift_getWitnessTable(byte_100203E38, &type metadata for AppTransaction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B54F8);
  }

  return result;
}

uint64_t sub_10013EF24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppTransaction(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013EF68(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AppTransaction(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for AppTransaction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_10013EFF0 + 4 * byte_100203C77[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_10013F024 + 4 * byte_100203C72[v4]))();
}

uint64_t sub_10013F024(uint64_t result)
{
  *(_BYTE *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_10013F02C(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x10013F034LL);
  }
  return result;
}

uint64_t sub_10013F040(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x10013F048LL);
  }
  *(_BYTE *)unint64_t result = a2 + 8;
  return result;
}

uint64_t sub_10013F04C(uint64_t result)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_10013F054(uint64_t result)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppTransaction.CodingKeys()
{
  return &type metadata for AppTransaction.CodingKeys;
}

unint64_t sub_10013F074()
{
  unint64_t result = qword_1002B5508;
  if (!qword_1002B5508)
  {
    unint64_t result = swift_getWitnessTable(byte_100203E10, &type metadata for AppTransaction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B5508);
  }

  return result;
}

unint64_t sub_10013F0B4()
{
  unint64_t result = qword_1002B5510;
  if (!qword_1002B5510)
  {
    unint64_t result = swift_getWitnessTable("AV\b", &type metadata for AppTransaction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B5510);
  }

  return result;
}

unint64_t sub_10013F0F4()
{
  unint64_t result = qword_1002B5518;
  if (!qword_1002B5518)
  {
    unint64_t result = swift_getWitnessTable(")V\b", &type metadata for AppTransaction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002B5518);
  }

  return result;
}

uint64_t sub_10013F130(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, v2, v3, v4);
}

uint64_t sub_10013F148@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

  ;
}

uint64_t sub_10013F170()
{
  return (*(uint64_t (**)(void, void))(v0 + 8))(*(void *)(v1 - 144), *(void *)(v1 - 136));
}

uint64_t sub_10013F17C@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 96) + 8LL))(v1 + a1, v2);
}

  ;
}

uint64_t sub_10013F1A0(uint64_t a1)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

void static NIONetworkInterface.== infix(_:_:)(uint64_t a1)
{
  uint64_t v4 = sub_10014080C(a1);
  BOOL v8 = v8 && v5 == v7;
  if ((v8 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0LL) & 1) != 0)
    && static SocketAddress.== infix(_:_:)(*(void *)(v2 + 32), *(void *)(v1 + 32)))
  {
    sub_100140760();
    if (v8)
    {
      if (v10 != v9) {
        goto LABEL_26;
      }
    }

    else
    {
      if (v10 == v9) {
        goto LABEL_26;
      }
      sub_1001406E4();
      sub_100140718();
      if ((v3 & 1) == 0) {
        goto LABEL_26;
      }
    }

    sub_100140760();
    if (v8)
    {
      if (v12 != v11) {
        goto LABEL_26;
      }
    }

    else
    {
      if (v12 == v11) {
        goto LABEL_26;
      }
      sub_1001406E4();
      sub_100140718();
      if ((v3 & 1) == 0) {
        goto LABEL_26;
      }
    }

    sub_100140760();
    if (v8)
    {
      if (v14 != v13) {
        goto LABEL_26;
      }
      goto LABEL_25;
    }

    if (v14 != v13)
    {
      sub_1001406E4();
      sub_100140718();
      if ((v3 & 1) != 0) {
LABEL_25:
      }
        sub_1001408A4();
    }
  }

void NIONetworkInterface.name.getter()
{
}

void NIONetworkInterface.address.getter()
{
}

void NIONetworkInterface.netmask.getter()
{
}

void NIONetworkInterface.broadcastAddress.getter()
{
}

void NIONetworkInterface.pointToPointDestinationAddress.getter()
{
}

uint64_t NIONetworkInterface.multicastSupported.getter()
{
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t NIONetworkInterface.interfaceIndex.getter()
{
  return *(void *)(v0 + 72);
}

uint64_t sub_10013F340(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  if (v2)
  {
    uint64_t v3 = result;
    v1[1].i64[0] = String.init(cString:)(*(void *)(result + 8));
    v1[1].i64[1] = v4;
    uint64_t v5 = *(void *)(v3 + 24);
    if (!v5 || (unint64_t v6 = sub_1000CD1B0(v5), (~v6 & 0xF000000000000007LL) == 0))
    {
      swift_bridgeObjectRelease();
LABEL_24:
      sub_1001407EC();
      return 0LL;
    }

    uint64_t v7 = v6;
    v1[2].i64[0] = v6;
    sub_100140684(v3 + 32, (uint64_t)v14);
    sub_100140684((uint64_t)v14, (uint64_t)&v15);
    uint64_t v8 = v15;
    if (v15)
    {
      sub_10014085C();
      v1[2].i64[1] = sub_1000CD1B0(v8);
      int v9 = *(_DWORD *)(v3 + 16);
      if ((v9 & 2) != 0)
      {
LABEL_13:
        sub_100140684(v3 + 40, (uint64_t)v13);
        sub_100140684((uint64_t)v13, (uint64_t)&v16);
        if (v16)
        {
          v1[3].i64[0] = sub_1000CD1B0(v16);
          v1[3].i64[1] = 0xF000000000000007LL;
          goto LABEL_18;
        }

        int v9 = *(_DWORD *)(v3 + 16);
        if ((v9 & 0x10) == 0)
        {
LABEL_21:
          v1[3] = vdupq_n_s64(0xF000000000000007LL);
          if ((v9 & 0x8000) == 0) {
            goto LABEL_19;
          }
          goto LABEL_22;
        }

uint64_t *NIONetworkInterface.deinit()
{
  return v0;
}

uint64_t NIONetworkInterface.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 80LL, 7LL);
}

uint64_t NIONetworkInterface.debugDescription.getter()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(24LL);
  swift_bridgeObjectRelease();
  sub_100140898();
  sub_1001408CC();
  sub_10003561C();
  v2._uint64_t countAndFlagsBits = sub_100140884();
  String.append(_:)(v2);
  unint64_t v3 = *(void *)(v0 + 32);
  swift_retain();
  v4._uint64_t countAndFlagsBits = SocketAddress.description.getter(v3);
  String.append(_:)(v4);
  swift_release();
  sub_10003561C();
  unint64_t v5 = *(void *)(v1 + 40);
  sub_100140800();
  if (!v6)
  {
    sub_100140828();
    sub_1001407DC();
    v7._uint64_t countAndFlagsBits = SocketAddress.description.getter(v5);
    String.append(_:)(v7);
    sub_100019390();
    sub_100140758();
  }

  sub_10001FFF0();
  sub_1001408C0();
  sub_100023EEC();
  sub_100019390();
  return 0x6361667265746E49LL;
}

uint64_t sub_10013F670()
{
  return NIONetworkInterface.debugDescription.getter();
}

uint64_t sub_10013F690(uint64_t *a1)
{
  static NIONetworkInterface.== infix(_:_:)(*a1);
  return v1 & 1;
}

void NIONetworkDevice.name.getter()
{
}

uint64_t NIONetworkDevice.name.setter(uint64_t a1, uint64_t a2)
{
  if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0)
  {
    uint64_t v5 = sub_100140734();
    sub_1001406CC(v5);
    uint64_t v6 = ChannelPipeline.syncOperations.getter();
    Swift::String v7 = sub_1001400D4(v6);
    sub_100140708((uint64_t)v7);
  }

  uint64_t v8 = *v2;
  uint64_t v9 = *(void *)(*v2 + 24LL);
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  return sub_1001407BC(v9);
}

uint64_t type metadata accessor for NIONetworkDevice.Backing()
{
  return objc_opt_self(&OBJC_CLASS____TtCV25ASOctaneSupportXPCService16NIONetworkDeviceP33_29C64E3DA1EF74C33863A90C71015B717Backing);
}

void NIONetworkDevice.name.modify(void *a1)
{
  a1[2] = v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 24LL);
  *a1 = *(void *)(*(void *)v1 + 16LL);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  sub_10001945C();
}

uint64_t sub_10013F794(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  Swift::String v4 = (void *)a1[2];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native(*v4) & 1) == 0)
    {
      uint64_t v5 = sub_100140734();
      sub_1001406CC(v5);
      uint64_t v6 = sub_10014073C();
      Swift::String v7 = sub_100140788(v6);
      sub_100140844((uint64_t)v7);
    }

    uint64_t v8 = *v4;
    uint64_t v9 = *(void *)(*v4 + 24LL);
    *(void *)(v8 + 16) = v3;
    *(void *)(v8 + 24) = v2;
    sub_100019390();
    return sub_1001407BC(v9);
  }

  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*v4) & 1) == 0)
    {
      uint64_t v11 = sub_100140734();
      sub_1001406CC(v11);
      uint64_t v12 = sub_10014073C();
      uint64_t v13 = sub_100140788(v12);
      sub_100140844((uint64_t)v13);
    }

    uint64_t v14 = *v4;
    uint64_t v15 = *(void *)(*v4 + 24LL);
    *(void *)(v14 + 16) = v3;
    *(void *)(v14 + 24) = v2;
    return sub_1001407BC(v15);
  }

void NIONetworkDevice.address.getter()
{
}

uint64_t NIONetworkDevice.address.setter()
{
  if ((sub_100140748() & 1) == 0)
  {
    uint64_t v2 = sub_100140734();
    sub_1001406CC(v2);
    uint64_t v3 = ChannelPipeline.syncOperations.getter();
    Swift::String v4 = sub_1001407E4(v3);
    sub_10004BD48((uint64_t)v4);
  }

  uint64_t v5 = *(void *)(*(void *)v1 + 32LL);
  *(void *)(*(void *)v1 + 3_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000023LL,  0x800000010021DD80LL,  "ASOctaneSupportXPCService/UniversalBootstrapSupport.swift",  57LL, 2LL) = v0;
  return sub_1001406D8(v5);
}

void NIONetworkDevice.address.modify(uint64_t a1)
{
}

uint64_t sub_10013F8C0(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if ((a2 & 1) != 0)
  {
    if ((sub_100140790() & 1) == 0)
    {
      uint64_t v4 = sub_100140734();
      sub_1001406CC(v4);
      uint64_t v5 = sub_10014073C();
      uint64_t v6 = sub_100140788(v5);
      sub_100140708((uint64_t)v6);
    }

    uint64_t v7 = *(void *)(*(void *)v3 + 32LL);
    *(void *)(*(void *)v3 + 3_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000023LL,  0x800000010021DD80LL,  "ASOctaneSupportXPCService/UniversalBootstrapSupport.swift",  57LL, 2LL) = v2;
    sub_100029DF4(v7);
  }

  else
  {
    if ((sub_1001407A8() & 1) == 0)
    {
      uint64_t v8 = sub_100140734();
      sub_1001406CC(v8);
      uint64_t v9 = sub_10014073C();
      uint64_t v10 = sub_100140788(v9);
      sub_100140708((uint64_t)v10);
    }

    uint64_t v11 = *(void *)(*(void *)v3 + 32LL);
    *(void *)(*(void *)v3 + 3_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000023LL,  0x800000010021DD80LL,  "ASOctaneSupportXPCService/UniversalBootstrapSupport.swift",  57LL, 2LL) = v2;
    uint64_t v2 = v11;
  }

  return sub_1001406D8(v2);
}

void NIONetworkDevice.netmask.getter()
{
}

uint64_t NIONetworkDevice.netmask.setter()
{
  if ((sub_100140748() & 1) == 0)
  {
    uint64_t v2 = sub_100140734();
    sub_1001406CC(v2);
    uint64_t v3 = ChannelPipeline.syncOperations.getter();
    uint64_t v4 = sub_1001407E4(v3);
    sub_10004BD48((uint64_t)v4);
  }

  uint64_t v5 = *(void *)(*(void *)v1 + 40LL);
  *(void *)(*(void *)v1 + 4sub_10002A718(v0 + 48, (uint64_t)v1, 0LL) = v0;
  return sub_1001406D8(v5);
}

void NIONetworkDevice.netmask.modify(uint64_t a1)
{
}

uint64_t sub_10013F9D8(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if ((a2 & 1) != 0)
  {
    if ((sub_100140790() & 1) == 0)
    {
      uint64_t v4 = sub_100140734();
      sub_1001406CC(v4);
      uint64_t v5 = sub_10014073C();
      uint64_t v6 = sub_100140788(v5);
      sub_100140708((uint64_t)v6);
    }

    uint64_t v7 = *(void *)(*(void *)v3 + 40LL);
    *(void *)(*(void *)v3 + 4sub_10002A718(v0 + 48, (uint64_t)v1, 0LL) = v2;
    sub_100029DF4(v7);
  }

  else
  {
    if ((sub_1001407A8() & 1) == 0)
    {
      uint64_t v8 = sub_100140734();
      sub_1001406CC(v8);
      uint64_t v9 = sub_10014073C();
      uint64_t v10 = sub_100140788(v9);
      sub_100140708((uint64_t)v10);
    }

    uint64_t v11 = *(void *)(*(void *)v3 + 40LL);
    *(void *)(*(void *)v3 + 4sub_10002A718(v0 + 48, (uint64_t)v1, 0LL) = v2;
    uint64_t v2 = v11;
  }

  return sub_1001406D8(v2);
}

void NIONetworkDevice.broadcastAddress.getter()
{
}

uint64_t NIONetworkDevice.broadcastAddress.setter()
{
  if ((sub_100140748() & 1) == 0)
  {
    uint64_t v2 = sub_100140734();
    sub_1001406CC(v2);
    uint64_t v3 = ChannelPipeline.syncOperations.getter();
    uint64_t v4 = sub_1001407E4(v3);
    sub_10004BD48((uint64_t)v4);
  }

  uint64_t v5 = *(void *)(*(void *)v1 + 48LL);
  *(void *)(*(void *)v1 + 48LL) = v0;
  return sub_1001406D8(v5);
}

void NIONetworkDevice.broadcastAddress.modify(uint64_t a1)
{
}

uint64_t sub_10013FAF0(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if ((a2 & 1) != 0)
  {
    if ((sub_100140790() & 1) == 0)
    {
      uint64_t v4 = sub_100140734();
      sub_1001406CC(v4);
      uint64_t v5 = sub_10014073C();
      uint64_t v6 = sub_100140788(v5);
      sub_100140708((uint64_t)v6);
    }

    uint64_t v7 = *(void *)(*(void *)v3 + 48LL);
    *(void *)(*(void *)v3 + 48LL) = v2;
    sub_100029DF4(v7);
  }

  else
  {
    if ((sub_1001407A8() & 1) == 0)
    {
      uint64_t v8 = sub_100140734();
      sub_1001406CC(v8);
      uint64_t v9 = sub_10014073C();
      uint64_t v10 = sub_100140788(v9);
      sub_100140708((uint64_t)v10);
    }

    uint64_t v11 = *(void *)(*(void *)v3 + 48LL);
    *(void *)(*(void *)v3 + 48LL) = v2;
    uint64_t v2 = v11;
  }

  return sub_1001406D8(v2);
}

void NIONetworkDevice.pointToPointDestinationAddress.getter()
{
}

uint64_t NIONetworkDevice.pointToPointDestinationAddress.setter()
{
  if ((sub_100140748() & 1) == 0)
  {
    uint64_t v2 = sub_100140734();
    sub_1001406CC(v2);
    uint64_t v3 = ChannelPipeline.syncOperations.getter();
    uint64_t v4 = sub_1001407E4(v3);
    sub_10004BD48((uint64_t)v4);
  }

  uint64_t v5 = *(void *)(*(void *)v1 + 56LL);
  *(void *)(*(void *)v1 + sub_100019310(v2, 56LL) = v0;
  return sub_1001406D8(v5);
}

void NIONetworkDevice.pointToPointDestinationAddress.modify(uint64_t a1)
{
}

uint64_t sub_10013FC08(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if ((a2 & 1) != 0)
  {
    if ((sub_100140790() & 1) == 0)
    {
      uint64_t v4 = sub_100140734();
      sub_1001406CC(v4);
      uint64_t v5 = sub_10014073C();
      uint64_t v6 = sub_100140788(v5);
      sub_100140708((uint64_t)v6);
    }

    uint64_t v7 = *(void *)(*(void *)v3 + 56LL);
    *(void *)(*(void *)v3 + sub_100019310(v2, 56LL) = v2;
    sub_100029DF4(v7);
  }

  else
  {
    if ((sub_1001407A8() & 1) == 0)
    {
      uint64_t v8 = sub_100140734();
      sub_1001406CC(v8);
      uint64_t v9 = sub_10014073C();
      uint64_t v10 = sub_100140788(v9);
      sub_100140708((uint64_t)v10);
    }

    uint64_t v11 = *(void *)(*(void *)v3 + 56LL);
    *(void *)(*(void *)v3 + sub_100019310(v2, 56LL) = v2;
    uint64_t v2 = v11;
  }

  return sub_1001406D8(v2);
}

uint64_t NIONetworkDevice.multicastSupported.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

void NIONetworkDevice.multicastSupported.setter(char a1)
{
  if ((swift_isUniquelyReferenced_nonNull_native(*v1) & 1) == 0)
  {
    uint64_t v3 = sub_100140734();
    sub_1001406CC(v3);
    uint64_t v4 = ChannelPipeline.syncOperations.getter();
    uint64_t v5 = sub_1001407E4(v4);
    sub_10004BD48((uint64_t)v5);
  }

  *(_BYTE *)(*v1 + 64LL) = a1 & 1;
  sub_1000193B8();
}

void (*NIONetworkDevice.multicastSupported.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(*(void *)v1 + 64LL);
  return sub_10013FD0C;
}

void sub_10013FD0C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  char v2 = *(_BYTE *)(a1 + 8);
  if ((swift_isUniquelyReferenced_nonNull_native(**(void **)a1) & 1) == 0)
  {
    uint64_t v3 = sub_100140734();
    sub_1001406CC(v3);
    uint64_t v4 = sub_1001408D8();
    uint64_t v5 = sub_1001400D4(v4);
    sub_10004BD48((uint64_t)v5);
  }

  *(_BYTE *)(*v1 + 64LL) = v2;
  sub_1000193B8();
}

uint64_t NIONetworkDevice.interfaceIndex.getter(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void NIONetworkDevice.interfaceIndex.setter()
{
  if ((sub_100140748() & 1) == 0)
  {
    uint64_t v2 = sub_100140734();
    sub_1001406CC(v2);
    uint64_t v3 = ChannelPipeline.syncOperations.getter();
    uint64_t v4 = sub_1001407E4(v3);
    sub_10004BD48((uint64_t)v4);
  }

  *(void *)(*(void *)v1 + 7_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000023LL,  0x800000010021DD80LL,  "ASOctaneSupportXPCService/UniversalBootstrapSupport.swift",  57LL, 2LL) = v0;
  sub_1000193B8();
}

void (*NIONetworkDevice.interfaceIndex.modify(void *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = *(void *)(*(void *)v1 + 72LL);
  return sub_10013FDC4;
}

void sub_10013FDC4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = (void *)a1[1];
  if ((swift_isUniquelyReferenced_nonNull_native(*v1) & 1) == 0)
  {
    uint64_t v3 = sub_100140734();
    sub_1001406CC(v3);
    uint64_t v4 = sub_1001408D8();
    uint64_t v5 = sub_1001400D4(v4);
    sub_10004BD48((uint64_t)v5);
  }

  *(void *)(*v1 + 7_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000023LL,  0x800000010021DD80LL,  "ASOctaneSupportXPCService/UniversalBootstrapSupport.swift",  57LL, 2LL) = v2;
  sub_1000193B8();
}

uint64_t NIONetworkDevice.init(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  char v7 = *(_BYTE *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v9 = sub_100140734();
  sub_1001406CC(v9);
  sub_10014085C();
  swift_bridgeObjectRetain();
  sub_100029DDC(v4);
  sub_100029DDC(v5);
  sub_100029DDC(v6);
  uint64_t v10 = sub_10014018C(v1, v2, v3, v4, v5, v6, v7, v8);
  swift_release();
  return v10;
}

uint64_t NIONetworkDevice.init(name:address:netmask:broadcastAddress:pointToPointDestinationAddress:multicastSupported:interfaceIndex:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v16 = sub_100140734();
  sub_1001406CC(v16);
  return sub_10014018C(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_10013FF48(uint64_t result)
{
  int64x2_t v2 = vdupq_n_s64(0xF000000000000007LL);
  v1[2] = v2;
  v1[3] = v2;
  uint64_t v3 = *(void *)(result + 8);
  if (v3)
  {
    uint64_t v4 = result;
    v1[1].i64[0] = String.init(cString:)(*(void *)(result + 8));
    v1[1].i64[1] = v5;
    uint64_t v6 = *(void *)(v4 + 24);
    if (v6) {
      unint64_t v7 = sub_1000CD1B0(v6);
    }
    else {
      unint64_t v7 = 0xF000000000000007LL;
    }
    uint64_t v8 = v1[2].i64[0];
    v1[2].i64[0] = v7;
    sub_1001408B8(v8);
    uint64_t v9 = *(void *)(v4 + 32);
    if (v9) {
      unint64_t v10 = sub_1000CD1B0(v9);
    }
    else {
      unint64_t v10 = 0xF000000000000007LL;
    }
    uint64_t v11 = v1[2].i64[1];
    v1[2].i64[1] = v10;
    sub_1001408B8(v11);
    int v12 = *(_DWORD *)(v4 + 16);
    if ((v12 & 2) != 0 && (sub_100140684(v4 + 40, (uint64_t)v21), sub_100140684((uint64_t)v21, (uint64_t)&v22), v22))
    {
      unint64_t v13 = sub_1000CD1B0(v22);
      uint64_t v14 = v1[3].i64[0];
      v1[3].i64[0] = v13;
      sub_1001408B8(v14);
      unint64_t v15 = 0xF000000000000007LL;
    }

    else if ((v12 & 0x10) != 0 {
           && (sub_100140684(v4 + 40, (uint64_t)v20), sub_100140684((uint64_t)v20, (uint64_t)&v23), (uint64_t v16 = v23) != 0))
    }
    {
      uint64_t v17 = v1[3].i64[0];
      v1[3].i64[0] = 0xF000000000000007LL;
      sub_100029DF4(v17);
      unint64_t v15 = sub_1000CD1B0(v16);
    }

    else
    {
      uint64_t v18 = v1[3].i64[0];
      unint64_t v15 = 0xF000000000000007LL;
      v1[3].i64[0] = 0xF000000000000007LL;
      sub_100029DF4(v18);
    }

    uint64_t v19 = v1[3].i64[1];
    v1[3].i64[1] = v15;
    sub_100029DF4(v19);
    sub_100140874((v12 & 0x8000) != 0);
    swift_errorRelease(v3);
    sub_1001408F0();
    sub_100029DF4(v1[2].i64[0]);
    sub_100029DF4(v1[2].i64[1]);
    sub_100029DF4(v1[3].i64[0]);
    sub_100029DF4(v1[3].i64[1]);
    sub_1001407EC();
    return 0LL;
  }

  else
  {
    __break(1u);
  }

  return result;
}

int64x2_t *sub_1001400D4(uint64_t a1)
{
  int64x2_t v3 = vdupq_n_s64(0xF000000000000007LL);
  v1[2] = v3;
  v1[3] = v3;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  v1[1].i64[0] = v5;
  v1[1].i64[1] = v4;
  uint64_t v6 = *(void *)(a1 + 32);
  v1[2].i64[0] = v6;
  swift_bridgeObjectRetain();
  sub_100029DDC(v6);
  sub_100029DF4(0xF000000000000007LL);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = v1[2].i64[1];
  v1[2].i64[1] = v7;
  sub_100029DDC(v7);
  sub_100029DF4(v8);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = v1[3].i64[0];
  v1[3].i64[0] = v9;
  sub_100029DDC(v9);
  sub_100029DF4(v10);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = v1[3].i64[1];
  v1[3].i64[1] = v11;
  sub_100029DDC(v11);
  sub_100029DF4(v12);
  v1[4].i8[0] = *(_BYTE *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 72);
  swift_release();
  v1[4].i64[1] = v13;
  return v1;
}

uint64_t sub_10014018C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(int64x2_t *)(v8 + 4sub_1001A93A0(0LL, 0) = vdupq_n_s64(0xF000000000000007LL);
  *(void *)(v8 + 56) = 0xF000000000000007LL;
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 32) = a3;
  sub_100029DF4(0xF000000000000007LL);
  uint64_t v14 = *(void *)(v8 + 40);
  *(void *)(v8 + 4sub_1001A93A0(0LL, 0) = a4;
  sub_100029DF4(v14);
  uint64_t v15 = *(void *)(v8 + 48);
  *(void *)(v8 + 48) = a5;
  sub_100029DF4(v15);
  uint64_t v16 = *(void *)(v8 + 56);
  *(void *)(v8 + 56) = a6;
  sub_100029DF4(v16);
  *(_BYTE *)(v8 + 64) = a7;
  *(void *)(v8 + 72) = a8;
  return v8;
}

uint64_t *sub_100140218()
{
  return v0;
}

uint64_t sub_100140254()
{
  uint64_t v0 = sub_100140218();
  return swift_deallocClassInstance(v0, 80LL, 7LL);
}

uint64_t NIONetworkDevice.debugDescription.getter(uint64_t a1)
{
  uint64_t v14 = 0x20656369766544LL;
  unint64_t v15 = 0xE700000000000000LL;
  sub_100140898();
  sub_1001408CC();
  sub_10003561C();
  v2._uint64_t countAndFlagsBits = sub_100140884();
  v2._object = (void *)0xEA00000000002073LL;
  String.append(_:)(v2);
  uint64_t v13 = *(void *)(a1 + 32);
  sub_100029DDC(v13);
  uint64_t v3 = sub_1000175B0(&qword_1002AF5D0);
  v4._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v13, v3);
  String.append(_:)(v4);
  sub_100023EEC();
  uint64_t v6 = v14;
  unint64_t v5 = v15;
  unint64_t v7 = *(void *)(a1 + 40);
  sub_100140800();
  if (!v8)
  {
    sub_100140828();
    uint64_t v14 = v9;
    unint64_t v15 = v10;
    sub_1001407DC();
    v11._uint64_t countAndFlagsBits = SocketAddress.description.getter(v7);
    String.append(_:)(v11);
    sub_100019390();
    sub_100140758();
  }

  uint64_t v14 = v6;
  unint64_t v15 = v5;
  sub_10001FFF0();
  sub_1001408C0();
  sub_100023EEC();
  sub_100019390();
  return v14;
}

uint64_t sub_100140390()
{
  return NIONetworkDevice.debugDescription.getter(*v0);
}

void static NIONetworkDevice.== infix(_:_:)(uint64_t a1)
{
  uint64_t v2 = sub_10014080C(a1);
  BOOL v6 = v6 && v3 == v5;
  if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, v4, v5, 0LL) & 1) != 0)
  {
    sub_100140760();
    if (v6)
    {
      if (v8 != v7) {
        goto LABEL_31;
      }
    }

    else
    {
      if (v8 == v7) {
        goto LABEL_31;
      }
      sub_1001406E4();
      sub_100140718();
      if ((v1 & 1) == 0) {
        goto LABEL_31;
      }
    }

    sub_100140760();
    if (v6)
    {
      if (v10 != v9) {
        goto LABEL_31;
      }
    }

    else
    {
      if (v10 == v9) {
        goto LABEL_31;
      }
      sub_1001406E4();
      sub_100140718();
      if ((v1 & 1) == 0) {
        goto LABEL_31;
      }
    }

    sub_100140760();
    if (v6)
    {
      if (v12 != v11) {
        goto LABEL_31;
      }
    }

    else
    {
      if (v12 == v11) {
        goto LABEL_31;
      }
      sub_1001406E4();
      sub_100140718();
      if ((v1 & 1) == 0) {
        goto LABEL_31;
      }
    }

    sub_100140760();
    if (v6)
    {
      if (v14 != v13) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }

    if (v14 != v13)
    {
      sub_1001406E4();
      sub_100140718();
      if ((v1 & 1) != 0) {
LABEL_30:
      }
        sub_1001408A4();
    }
  }

void sub_1001404A0(uint64_t *a1)
{
  static NIONetworkDevice.== infix(_:_:)(*a1);
}

void NIONetworkDevice.hash(into:)(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  sub_10001FFF0();
  String.hash(into:)(a1, v4, v5);
  sub_100023EEC();
  sub_100140800();
  if (v6)
  {
    sub_100140864();
  }

  else
  {
    sub_100140854();
    sub_1001407DC();
    sub_1001407B0();
    sub_100140758();
  }

  sub_100140800();
  if (v6)
  {
    sub_100140864();
  }

  else
  {
    sub_100140854();
    sub_1001407DC();
    sub_1001407B0();
    sub_100140758();
  }

  sub_100140800();
  if (v6)
  {
    sub_100140864();
  }

  else
  {
    sub_100140854();
    sub_1001407DC();
    sub_1001407B0();
    sub_100140758();
  }

  sub_100140800();
  if (v6)
  {
    sub_100140864();
  }

  else
  {
    sub_100140854();
    sub_1001407DC();
    sub_1001407B0();
    sub_100140758();
  }

  Hasher._combine(_:)(a2[9]);
  sub_1000193B8();
}

Swift::Int NIONetworkDevice.hashValue.getter(void *a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1001405C4()
{
  return NIONetworkDevice.hashValue.getter(*v0);
}

void sub_1001405CC(uint64_t a1)
{
}

Swift::Int sub_1001405D4()
{
  char v1 = *v0;
  Hasher.init(_seed:)(v3);
  NIONetworkDevice.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

unint64_t sub_100140618()
{
  unint64_t result = qword_1002B5520;
  if (!qword_1002B5520)
  {
    unint64_t result = swift_getWitnessTable("iU\b", &type metadata for NIONetworkDevice);
    atomic_store(result, (unint64_t *)&qword_1002B5520);
  }

  return result;
}

uint64_t type metadata accessor for NIONetworkInterface()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService19NIONetworkInterface);
}

ValueMetadata *type metadata accessor for NIONetworkDevice()
{
  return &type metadata for NIONetworkDevice;
}

uint64_t sub_100140684(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002B56D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001406CC(uint64_t a1)
{
  return swift_allocObject(a1, 80LL, 7LL);
}

uint64_t sub_1001406D8(uint64_t result)
{
  return sub_100029DF4(result);
}

BOOL sub_1001406E4()
{
  return static SocketAddress.== infix(_:_:)(v0, v1);
}

uint64_t sub_100140708(uint64_t a1)
{
  uint64_t v2 = *v1;
  *unint64_t v1 = a1;
  return swift_release(v2);
}

uint64_t sub_100140718()
{
  return sub_100029DF4(v0);
}

uint64_t sub_100140734()
{
  return type metadata accessor for NIONetworkDevice.Backing();
}

uint64_t sub_10014073C()
{
  return swift_retain(v0);
}

uint64_t sub_100140748()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_100140758()
{
  return sub_100029DF4(v0);
}

  ;
}

uint64_t sub_100140770()
{
  return v0;
}

int64x2_t *sub_100140788(uint64_t a1)
{
  return sub_1001400D4(a1);
}

uint64_t sub_100140790()
{
  return swift_isUniquelyReferenced_nonNull_native(*v1);
}

uint64_t sub_1001407A8()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

void sub_1001407B0()
{
}

uint64_t sub_1001407BC(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_1001407CC(uint64_t result)
{
  *(void *)(result + 8) = v1;
  return result;
}

uint64_t sub_1001407DC()
{
  return swift_retain(v0 & 0x3FFFFFFFFFFFFFFFLL);
}

int64x2_t *sub_1001407E4(uint64_t a1)
{
  return sub_1001400D4(a1);
}

uint64_t sub_1001407EC()
{
  return swift_deallocPartialClassInstance(v1, v0, 80LL, 7LL);
}

  ;
}

uint64_t sub_10014080C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

  ;
}

uint64_t sub_100140844(uint64_t a1)
{
  uint64_t v2 = *v1;
  *uint64_t v1 = a1;
  return swift_release(v2);
}

void sub_100140854()
{
}

uint64_t sub_10014085C()
{
  return swift_retain(v0 & 0x3FFFFFFFFFFFFFFFLL);
}

void sub_100140864()
{
}

uint64_t sub_10014086C(uint64_t result)
{
  *uint64_t v1 = result;
  return sub_100029DDC(result);
}

uint64_t sub_100140874@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v1 + 64) = a1;
  return sub_1000251F4(v2);
}

uint64_t sub_100140884()
{
  return 0x736572646461203ALL;
}

uint64_t sub_100140898()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 24));
}

BOOL sub_1001408A4()
{
  return *(void *)(v1 + 72) == *(void *)(v0 + 72);
}

uint64_t sub_1001408B8@<X0>(uint64_t a1@<X8>)
{
  return sub_100029DF4(a1);
}

void sub_1001408C0()
{
  v2._uint64_t countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

void sub_1001408CC()
{
  v2._uint64_t countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t sub_1001408D8()
{
  return swift_retain(v0);
}

uint64_t sub_1001408E4()
{
  return swift_release(*(void *)(v0 + 32) & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1001408F0()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 24));
}

void *ByteBuffer.LengthPrefixError.messageLengthDoesNotFitExactlyIntoRequiredIntegerFormat.unsafeMutableAddressor()
{
  return &static ByteBuffer.LengthPrefixError.messageLengthDoesNotFitExactlyIntoRequiredIntegerFormat;
}

void *ByteBuffer.LengthPrefixError.messageCouldNotBeReadSuccessfully.unsafeMutableAddressor()
{
  return &static ByteBuffer.LengthPrefixError.messageCouldNotBeReadSuccessfully;
}

uint64_t ByteBuffer.writeLengthPrefixed<A>(endianness:as:writeMessage:)( char a1, uint64_t a2, uint64_t (*a3)(uint64_t), void (*a4)(char *, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v37 = a3;
  uint64_t v36 = a4;
  int v9 = a1 & 1;
  uint64_t v10 = type metadata accessor for Optional(0LL, a5);
  uint64_t v31 = *(void *)(v10 - 8);
  uint64_t v32 = v10;
  sub_1000706E4();
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v34 = (char *)v30 - v13;
  uint64_t v14 = *(void *)(a5 - 8);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)v30 - v18;
  v30[1] = *(unsigned int *)(v6 + 12);
  uint64_t v20 = *(void *)(*(void *)(a6 + 8) + 24LL);
  dispatch thunk of static AdditiveArithmetic.zero.getter(a5, *(void *)(v20 + 8));
  int v35 = v9;
  uint64_t v33 = a6;
  uint64_t v21 = ByteBuffer.writeInteger<A>(_:endianness:as:)();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v19, a5);
  uint64_t v23 = v38;
  uint64_t result = v37(v6);
  if (v23) {
    return (uint64_t)v22;
  }
  uint64_t v37 = (uint64_t (*)(uint64_t))v6;
  uint64_t v38 = v20;
  uint64_t v36 = v22;
  uint64_t v25 = (uint64_t)v34;
  uint64_t v22 = (void (*)(char *, uint64_t))(v21 + result);
  if (!__OFADD__(v21, result))
  {
    uint64_t v39 = result;
    unint64_t v26 = sub_1000C88C8();
    dispatch thunk of Numeric.init<A>(exactly:)(&v39, &type metadata for Int, v26, a5, v38);
    if (sub_10001D158(v25, 1LL, a5) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v25, v32);
      unint64_t v27 = sub_100140B40();
      uint64_t v28 = sub_1000252D0((uint64_t)&type metadata for ByteBuffer.LengthPrefixError, v27);
      *uint64_t v29 = 0;
      swift_willThrow(v28);
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v14 + 32))(v17, v25, a5);
      ByteBuffer.setInteger<A>(_:at:endianness:as:)();
      v36(v17, a5);
    }

    return (uint64_t)v22;
  }

  __break(1u);
  return result;
}

unint64_t sub_100140B40()
{
  unint64_t result = qword_1002B56E0;
  if (!qword_1002B56E0)
  {
    unint64_t result = swift_getWitnessTable("]U\b", &type metadata for ByteBuffer.LengthPrefixError);
    atomic_store(result, (unint64_t *)&qword_1002B56E0);
  }

  return result;
}

uint64_t ByteBuffer.readLengthPrefixed<A, B>(endianness:as:readMessage:)@<X0>( char a1@<W0>, void (*a2)(void)@<X2>, uint64_t a3@<X3>, void *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  v23[1] = a3;
  uint64_t v24 = a2;
  char v12 = a1 & 1;
  v23[0] = type metadata accessor for Optional(0LL, a5);
  uint64_t v13 = *(void *)(v23[0] - 8LL);
  __chkstk_darwin(v23[0]);
  uint64_t v15 = (char *)v23 - v14;
  if (ByteBuffer.readLengthPrefixedSlice<A>(endianness:as:)(v12, v16, a4, a6))
  {
    v24();
    if (v7) {
      return swift_release();
    }
    if (sub_10001D158((uint64_t)v15, 1LL, a5) == 1)
    {
      (*(void (**)(char *, void))(v13 + 8))(v15, v23[0]);
      unint64_t v17 = sub_100140B40();
      uint64_t v18 = sub_1000252D0((uint64_t)&type metadata for ByteBuffer.LengthPrefixError, v17);
      *uint64_t v19 = 1;
      swift_willThrow(v18);
      return swift_release();
    }

    swift_release();
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(a5 - 8) + 32LL))(a7, v15, a5);
    uint64_t v21 = a7;
    uint64_t v22 = 0LL;
  }

  else
  {
    uint64_t v21 = a7;
    uint64_t v22 = 1LL;
  }

  return sub_10001762C(v21, v22, 1LL, a5);
}

uint64_t ByteBuffer.readLengthPrefixedSlice<A>(endianness:as:)(char a1, uint64_t a2, void *a3, uint64_t a4)
{
  char v7 = a1 & 1;
  uint64_t v8 = *(void *)v4;
  uint64_t v9 = *(unsigned int *)(v4 + 8);
  unint64_t v10 = v9 | ((unint64_t)*(unsigned int *)(v4 + 12) << 32);
  unint64_t v11 = *(unsigned int *)(v4 + 16) | ((unint64_t)*(unsigned __int16 *)(v4 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v4 + 22) << 48);
  swift_retain();
  uint64_t v13 = ByteBuffer.getLengthPrefixedSlice<A>(at:endianness:as:)(v9, v7, v12, v8, v10, v11, a3, a4);
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  swift_release();
  if (!v13) {
    return 0LL;
  }
  v20[0] = v13;
  v20[1] = v15;
  int v21 = v17;
  __int16 v22 = WORD2(v17);
  char v23 = BYTE6(v17);
  sub_100141474((uint64_t)v20, v4, (uint64_t)a3, (uint64_t)&v19);
  swift_release();
  return v19;
}

uint64_t ByteBuffer.getLengthPrefixedSlice<A>(at:endianness:as:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v104 = a6;
  LODWORD(v103) = a2 & 1;
  uint64_t v100 = *(void *)(a8 + 8);
  uint64_t v92 = *(void *)(*(void *)(v100 + 24) + 16LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v92,  a7,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  sub_1000706E4();
  __chkstk_darwin(v12);
  uint64_t v88 = (char *)&v88 - v13;
  uint64_t v14 = type metadata accessor for Optional(0LL, a7);
  uint64_t v98 = *(char **)(v14 - 8);
  uint64_t v99 = (char *)v14;
  sub_1000706E4();
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v88 - v17;
  uint64_t v19 = *(a7 - 1);
  __chkstk_darwin(v16);
  uint64_t v90 = (uint64_t)&v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100141648();
  __chkstk_darwin(v21);
  sub_100092E80();
  uint64_t v91 = v22;
  sub_100141648();
  __chkstk_darwin(v23);
  sub_100092E80();
  uint64_t v101 = v24;
  sub_100141648();
  __chkstk_darwin(v25);
  sub_100092E80();
  uint64_t v97 = v26;
  sub_100141648();
  __chkstk_darwin(v27);
  sub_100092E80();
  uint64_t v93 = v28;
  sub_100141648();
  __chkstk_darwin(v29);
  sub_100092E80();
  uint64_t v102 = v30;
  sub_100141648();
  uint64_t v32 = __chkstk_darwin(v31);
  uint64_t v34 = (char *)&v88 - v33;
  uint64_t v35 = __chkstk_darwin(v32);
  uint64_t v37 = (char *)&v88 - v36;
  uint64_t v96 = v38;
  __chkstk_darwin(v35);
  uint64_t v40 = (char *)&v88 - v39;
  uint64_t v94 = v104 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v95 = a4;
  unint64_t v103 = a5;
  uint64_t v104 = a1;
  ByteBuffer.getInteger<A>(at:endianness:as:)(a1, a4, a5, v94, a7, (uint64_t)v18);
  if (sub_10001D158((uint64_t)v18, 1LL, (uint64_t)a7) == 1)
  {
    (*((void (**)(char *, char *))v98 + 1))(v18, v99);
    return 0LL;
  }

  sub_100141668((uint64_t)v40, (uint64_t)v18);
  (*(void (**)(char *, char *, void *))(v19 + 16))(v37, v40, a7);
  char v41 = dispatch thunk of static BinaryInteger.isSigned.getter(a7, v100);
  sub_100141614((uint64_t)v34);
  uint64_t v99 = v40;
  BOOL v42 = (v41 & 1) != 0 && sub_100141620() > 64;
  sub_10014160C((uint64_t)v34);
  uint64_t v43 = v102;
  sub_100141614(v102);
  if (!v42)
  {
    sub_10014160C(v43);
    uint64_t v45 = v101;
    goto LABEL_11;
  }

  v106[0] = 0x8000000000000000LL;
  char v44 = sub_1000C8C28();
  uint64_t v45 = v101;
  if ((v44 & 1) != 0)
  {
    if (sub_100141620() >= 64)
    {
      unint64_t v46 = sub_1000C88C8();
      uint64_t v47 = v43;
      uint64_t v48 = v93;
      sub_10014162C((uint64_t)v106, (uint64_t)&type metadata for Int, v46);
      sub_10014165C();
      goto LABEL_23;
    }

    goto LABEL_32;
  }

  uint64_t v98 = v37;
  char v64 = sub_1000C8C28();
  uint64_t v65 = sub_100141620();
  if ((v64 & 1) == 0)
  {
    uint64_t v37 = v98;
    if (v65 < 64)
    {
      uint64_t v43 = v102;
LABEL_32:
      uint64_t v68 = sub_10014163C();
      sub_10014160C(v43);
      BOOL v69 = v68 < v106[0];
LABEL_33:
      uint64_t v51 = v97;
      if (v69) {
        goto LABEL_42;
      }
      goto LABEL_12;
    }

    sub_10014160C(v102);
LABEL_11:
    uint64_t v51 = v97;
    goto LABEL_12;
  }

  uint64_t v37 = v98;
  if (v65 <= 64)
  {
    uint64_t v78 = AssociatedTypeWitness;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v92,  a7,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    __int128 v80 = v88;
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_1001FDDA0,  256LL,  v78,  AssociatedConformanceWitness);
    uint64_t v81 = v93;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v80, a7, v92);
    sub_10014165C();
    uint64_t v82 = v102;
    LOBYTE(v78) = sub_100141654(v102, v81, v83, v84);
    sub_10014160C(v81);
    uint64_t v85 = v90;
    sub_100141668(v90, v82);
    if ((v78 & 1) != 0)
    {
      sub_10014160C(v85);
      goto LABEL_42;
    }

    uint64_t v86 = v106[0];
    uint64_t v87 = sub_10014163C();
    sub_10014160C(v85);
    BOOL v69 = v87 < v86;
    uint64_t v37 = v98;
    goto LABEL_33;
  }

  unint64_t v66 = sub_1000C88C8();
  uint64_t v48 = v93;
  sub_10014162C((uint64_t)v106, (uint64_t)&type metadata for Int, v66);
  sub_10014165C();
  uint64_t v47 = v102;
LABEL_23:
  char v67 = sub_100141654(v47, v48, v49, v50);
  sub_10014160C(v48);
  sub_10014160C(v47);
  uint64_t v51 = v97;
  if ((v67 & 1) != 0) {
    goto LABEL_42;
  }
LABEL_12:
  uint64_t v52 = sub_100141620();
  sub_100141614(v51);
  if (v52 >= 65)
  {
    sub_10014160C(v51);
    sub_100141614(v45);
    goto LABEL_14;
  }

  uint64_t v62 = sub_100141620();
  sub_10014160C(v51);
  if (v62 != 64)
  {
    sub_100141614(v45);
LABEL_28:
    sub_10014160C(v45);
    goto LABEL_38;
  }

  char v63 = sub_1000C8C28();
  sub_100141614(v45);
  if ((v63 & 1) != 0) {
    goto LABEL_28;
  }
LABEL_14:
  char v53 = v37;
  v106[0] = 0x7FFFFFFFFFFFFFFFLL;
  char v54 = sub_1000C8C28();
  uint64_t v55 = sub_100141620();
  if ((v54 & 1) != 0)
  {
    if (v55 > 64)
    {
      unint64_t v56 = sub_1000C88C8();
      uint64_t v57 = v93;
      sub_10014162C((uint64_t)v106, (uint64_t)&type metadata for Int, v56);
      sub_10014165C();
      char v60 = sub_100141654(v57, v45, v58, v59);
      sub_10014160C(v57);
      uint64_t v61 = v45;
      goto LABEL_37;
    }

uint64_t sub_100141474@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v4 = *(_DWORD *)(result + 8);
  uint64_t v5 = *(void *)(result + 12);
  unsigned int v6 = v5 - v4;
  if (v5 < v4)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v7 = *(void *)(*(void *)(a3 - 8) + 64LL);
  BOOL v8 = __OFADD__(v7, v6);
  int v9 = v7 + v6;
  if (v8) {
    goto LABEL_6;
  }
  int v10 = *(_DWORD *)(a2 + 8);
  BOOL v11 = __CFADD__(v10, v9);
  int v12 = v10 + v9;
  if (!v11)
  {
    uint64_t v13 = *(void *)result;
    __int16 v14 = *(_WORD *)(result + 20);
    char v15 = *(_BYTE *)(result + 22);
    *(_DWORD *)(a2 + 8) = v12;
    *(void *)a4 = v13;
    *(_DWORD *)(a4 + 8) = v4;
    *(void *)(a4 + 12) = v5;
    *(_WORD *)(a4 + 2sub_1001A93A0(0LL, 0) = v14;
    *(_BYTE *)(a4 + 22) = v15;
    return swift_retain(v13);
  }

ValueMetadata *type metadata accessor for ByteBuffer.LengthPrefixError()
{
  return &type metadata for ByteBuffer.LengthPrefixError;
}

uint64_t _s17LengthPrefixErrorV9BaseErrorOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10014154C + 4 * byte_100204055[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100141580 + 4 * asc_100204050[v4]))();
}

uint64_t sub_100141580(uint64_t result)
{
  *(_BYTE *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_100141588(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x100141590LL);
  }
  return result;
}

uint64_t sub_10014159C(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001415A4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1001415A8(uint64_t result)
{
  *(_DWORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

uint64_t sub_1001415B0(uint64_t result)
{
  *(_WORD *)(result + sub_1001A93A0(v0, 1) = v1;
  return result;
}

ValueMetadata *_s17LengthPrefixErrorV9BaseErrorOMa()
{
  return &_s17LengthPrefixErrorV9BaseErrorON;
}

unint64_t sub_1001415D0()
{
  unint64_t result = qword_1002B56E8;
  if (!qword_1002B56E8)
  {
    unint64_t result = swift_getWitnessTable(byte_1002040FC, &_s17LengthPrefixErrorV9BaseErrorON);
    atomic_store(result, (unint64_t *)&qword_1002B56E8);
  }

  return result;
}

uint64_t sub_10014160C(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_100141614(uint64_t a1)
{
  return v3(a1, v2, v1);
}

uint64_t sub_100141620()
{
  return dispatch thunk of BinaryInteger.bitWidth.getter(v0, v1);
}

uint64_t sub_10014162C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(a1, a2, a3, v3, v4);
}

uint64_t sub_10014163C()
{
  return dispatch thunk of BinaryInteger._lowWord.getter(v0, v1);
}

  ;
}

uint64_t sub_100141654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return dispatch thunk of static Comparable.< infix(_:_:)(a1, a2, v4, a4);
}

  ;
}

uint64_t sub_100141668(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

unsigned __int8 *sub_100141670(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = Data.count.getter(a3, a4);
  if ((v7 & 0x8000000000000000LL) != 0)
  {
    sub_100034FD0();
    int v10 = "Negative value is not representable";
    uint64_t v11 = 35LL;
  }

  else
  {
    CC_LONG v8 = v7;
    if (!HIDWORD(v7))
    {
      sub_100187AFC(0LL);
      return CC_SHA256(a1, v8, (unsigned __int8 *)(*(void *)a5 + 32LL));
    }

    sub_100034FD0();
    int v10 = "Not enough bits to represent the passed value";
    uint64_t v11 = 45LL;
  }

  unint64_t result = (unsigned __int8 *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v10,  v11,  2LL,  "Swift/Integers.swift",  20LL);
  __break(1u);
  return result;
}

void static _IntegerBitPacking.packUU<A, B, C>(_:_:type:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v32 = a6;
  uint64_t v33 = a2;
  uint64_t v36 = a7;
  uint64_t v34 = a8;
  uint64_t v14 = *(void *)(a4 - 8);
  __chkstk_darwin(a1);
  sub_1000C05A0();
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = *(void *)(v18 - 8);
  sub_100043FD8();
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v32 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v32 - v26;
  (*(void (**)(char *))(v28 + 16))(v17);
  uint64_t v29 = *(void *)(a10 + 8);
  sub_100141C64((uint64_t)v17, a3, *(void *)(v32 + 8));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v10, v33, a4);
  uint64_t v30 = v34;
  sub_100141C64(v10, a4, *(void *)(v34 + 8));
  uint64_t v37 = dispatch thunk of static FixedWidthInteger.bitWidth.getter(a4, v30);
  unint64_t v31 = sub_1000C88C8();
  dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)(v27, &v37, &type metadata for Int, v31, a5, v29);
  dispatch thunk of static BinaryInteger.| infix(_:_:)(v22, v25, a5, v29);
  sub_100141C74((uint64_t)v22);
  sub_100141C74((uint64_t)v25);
  sub_100141C74((uint64_t)v27);
  sub_10002A580();
}