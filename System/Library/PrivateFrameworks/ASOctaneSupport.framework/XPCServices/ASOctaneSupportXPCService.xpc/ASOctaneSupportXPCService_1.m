double sub_1000632F8@<D0>(Swift::Int a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  _OWORD v5[2];
  uint64_t v6;
  ByteBufferView.init(arrayLiteral:)(a1, (char *)v5);
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(void *)(a2 + 32) = v6;
  return result;
}

uint64_t sub_100063338(uint64_t a1, uint64_t a2)
{
  return sub_100060E24( a1,  a2,  *(uint64_t (**)(uint64_t, uint64_t))(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40));
}

void *sub_100063354(void *a1)
{
  return a1;
}

uint64_t sub_10006337C(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(a1, v3);
}

uint64_t sub_1000633A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return 0LL;
  }
  uint64_t v6 = a4 - a3;
  if (a4 == a3)
  {
    return 0LL;
  }

  else
  {
    v7 = (uint64_t (*)(char *))result;
    uint64_t v8 = a4 - a3;
    while (!__OFSUB__(v8--, 1LL))
    {
      if (v8 < 0 || v8 >= v6) {
        goto LABEL_15;
      }
      char v10 = *(_BYTE *)(a3 + v8);
      result = v7(&v10);
      if (v4 || (result & 1) != 0 || !v8) {
        return v8;
      }
    }

    __break(1u);
LABEL_15:
    __break(1u);
  }

  return result;
}

BOOL sub_100063440(char *a1, char *a2)
{
  return static CloseMode.__derived_enum_equals(_:_:)(*a1, *a2);
}

BOOL sub_100063460(char *a1)
{
  return sub_100063440(a1, *(char **)(v1 + 16));
}

unint64_t sub_100063480()
{
  unint64_t result = qword_1002AC3E8;
  if (!qword_1002AC3E8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ByteBufferView,  &type metadata for ByteBufferView);
    atomic_store(result, (unint64_t *)&qword_1002AC3E8);
  }

  return result;
}

uint64_t sub_1000634BC()
{
  return sub_100063630(&qword_1002AC3F0, (const char *)&protocol conformance descriptor for <> Range<A>);
}

unint64_t sub_1000634E0()
{
  unint64_t result = qword_1002AC400;
  if (!qword_1002AC400)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1002AC400);
  }

  return result;
}

unint64_t sub_100063520()
{
  unint64_t result = qword_1002AC408;
  if (!qword_1002AC408)
  {
    unint64_t result = swift_getWitnessTable("a!\b", &type metadata for ByteBufferView);
    atomic_store(result, (unint64_t *)&qword_1002AC408);
  }

  return result;
}

unint64_t sub_100063560()
{
  unint64_t result = qword_1002AC410;
  if (!qword_1002AC410)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ByteBufferView,  &type metadata for ByteBufferView);
    atomic_store(result, (unint64_t *)&qword_1002AC410);
  }

  return result;
}

uint64_t sub_10006359C()
{
  return sub_100063630(&qword_1002AC418, (const char *)&protocol conformance descriptor for <> Range<A>);
}

unint64_t sub_1000635C4()
{
  unint64_t result = qword_1002AC420;
  if (!qword_1002AC420)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ByteBufferView,  &type metadata for ByteBufferView);
    atomic_store(result, (unint64_t *)&qword_1002AC420);
  }

  return result;
}

void *sub_100063600()
{
  return &protocol witness table for Int;
}

uint64_t sub_10006360C()
{
  return sub_100063630(&qword_1002AC428, (const char *)&protocol conformance descriptor for <> Range<A>);
}

uint64_t sub_100063630(unint64_t *a1, const char *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = sub_100018EC0(&qword_1002AC3F8);
    v6[0] = &protocol witness table for Int;
    v6[1] = sub_1000634E0();
    uint64_t result = swift_getWitnessTable(a2, v5, v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1000636A0()
{
  unint64_t result = qword_1002AC430;
  if (!qword_1002AC430)
  {
    uint64_t v1 = sub_100018EC0(&qword_1002AC438);
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for IndexingIterator<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1002AC430);
  }

  return result;
}

unint64_t sub_1000636E8()
{
  unint64_t result = qword_1002AC440;
  if (!qword_1002AC440)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ByteBufferView,  &type metadata for ByteBufferView);
    atomic_store(result, (unint64_t *)&qword_1002AC440);
  }

  return result;
}

unint64_t sub_100063728()
{
  unint64_t result = qword_1002AC448;
  if (!qword_1002AC448)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ByteBufferView,  &type metadata for ByteBufferView);
    atomic_store(result, (unint64_t *)&qword_1002AC448);
  }

  return result;
}

unint64_t sub_100063768()
{
  unint64_t result = qword_1002AC450;
  if (!qword_1002AC450)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ByteBufferView,  &type metadata for ByteBufferView);
    atomic_store(result, (unint64_t *)&qword_1002AC450);
  }

  return result;
}

uint64_t initializeWithCopy for ByteBufferView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = a2[1];
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(_DWORD *)(a1 + 19) = *(_DWORD *)((char *)a2 + 19);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  swift_retain(v3);
  return a1;
}

uint64_t *assignWithCopy for ByteBufferView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a1 + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
  *((_WORD *)a1 + 10) = *((_WORD *)a2 + 10);
  *((_BYTE *)a1 + 22) = *((_BYTE *)a2 + 22);
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

uint64_t *assignWithTake for ByteBufferView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
  *((_WORD *)a1 + 10) = *((_WORD *)a2 + 10);
  *((_BYTE *)a1 + 22) = *((_BYTE *)a2 + 22);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  return a1;
}

uint64_t getEnumTagSinglePayload for ByteBufferView(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ByteBufferView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ByteBufferView()
{
  return &type metadata for ByteBufferView;
}

__n128 sub_100063968()
{
  return *(__n128 *)v0;
}

uint64_t sub_100063980()
{
  return dispatch thunk of Collection.count.getter(v0, v1);
}

  ;
}

__n128 sub_10006399C()
{
  return *(__n128 *)v0;
}

void sub_1000639C0(void *a1)
{
}

void *sub_1000639D0()
{
  __int128 v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v0 + 40) = *(_OWORD *)v1;
  *(_OWORD *)(v0 + 56) = v2;
  *(void *)(v0 + 72) = *(void *)(v1 + 32);
  return sub_100018F0C((void *)(v0 + 40));
}

uint64_t sub_1000639EC()
{
  return ByteBuffer.setBytes<A>(_:at:)(v2, v3, v0, *(void *)(v1 + 8));
}

  ;
}

  ;
}

Swift::Int sub_100063A3C(uint64_t a1, Swift::Int a2, Swift::Int a3)
{
  return ByteBuffer.copyBytes(at:to:length:)(v3, a2, a3);
}

void sub_100063A4C()
{
}

  ;
}

  ;
}

uint64_t sub_100063A84@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = result;
  *(_DWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 12) = v4;
  *(_DWORD *)(a4 + 16) = a3;
  *(_WORD *)(a4 + 20) = v5;
  *(_BYTE *)(a4 + 22) = BYTE6(a3);
  *(void *)(a4 + 24) = a2;
  *(void *)(a4 + 32) = v4;
  return result;
}

void *sub_100063AA8(uint64_t *a1)
{
  return ByteBufferView.subscript.setter(a1, v2, v1);
}

uint64_t sub_100063AB4()
{
  return v0;
}

uint64_t sub_100063AC8(uint64_t a1, unint64_t a2)
{
  *(void *)&__int128 v17 = a1;
  *((void *)&v17 + 1) = a2;
  swift_bridgeObjectRetain();
  uint64_t v2 = sub_1000175B0(&qword_1002AC518);
  if (!swift_dynamicCast(v15, &v17, &type metadata for String.UTF8View, v2, 6LL))
  {
    uint64_t v16 = 0LL;
    memset(v15, 0, sizeof(v15));
    sub_100064AF4((uint64_t)v15);
    if ((a2 & 0x1000000000000000LL) != 0) {
      goto LABEL_20;
    }
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      v18[0] = a1;
      v18[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      __int16 v5 = (char *)v18 + (HIBYTE(a2) & 0xF);
      uint64_t v6 = v18;
    }

    else
    {
      if ((a1 & 0x1000000000000000LL) != 0)
      {
        uint64_t v3 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v3 = _StringObject.sharedUTF8.getter(a1);
      }

      if (v3) {
        __int16 v5 = (char *)(v3 + v4);
      }
      else {
        __int16 v5 = 0LL;
      }
      uint64_t v6 = (void *)v3;
    }

    uint64_t v7 = Data._Representation.init(_:)(v6, v5);
    unint64_t v9 = v8;
    if (v8 >> 60 != 15)
    {
      sub_100064C74();
      *(void *)&v15[0] = v7;
      *((void *)&v15[0] + 1) = v9;
      return *(void *)&v15[0];
    }

    if ((a2 & 0x1000000000000000LL) != 0)
    {
LABEL_20:
      Swift::Int v10 = String.UTF8View._foreignCount()();
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      Swift::Int v10 = HIBYTE(a2) & 0xF;
    }

    else
    {
      Swift::Int v10 = a1 & 0xFFFFFFFFFFFFLL;
    }

    *(void *)&v15[0] = Data._Representation.init(count:)(v10);
    *((void *)&v15[0] + 1) = v11;
    __chkstk_darwin(*(void *)&v15[0]);
    sub_100064568();
    __asm { BR              X12 }
  }

  sub_10002A118(v15, (uint64_t)v18);
  sub_100019F58(v18, v18[3]);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)(sub_100064808);
  sub_100064C74();
  v15[0] = v17;
  sub_100019F7C(v18);
  return *(void *)&v15[0];
}

uint64_t sub_100063F54(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SHA384Digest(0LL);
  uint64_t v8 = v2;
  uint64_t v9 = sub_1000221A8( &qword_1002AC510,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA384Digest,  (uint64_t)&protocol conformance descriptor for SHA384Digest);
  uint64_t v3 = sub_10005F580(v7);
  uint64_t v4 = *(void *)(v2 - 8);
  (*(void (**)(void *, uint64_t, uint64_t))(v4 + 16))(v3, a1, v2);
  sub_100019F58(v7, v8);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)(sub_100064808);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v2);
  sub_100019F7C(v7);
  return v6;
}

uint64_t sub_100064034(uint64_t a1)
{
  uint64_t v9 = sub_1000175B0(&qword_1002AC528);
  unint64_t v10 = sub_100064BDC();
  v8[0] = a1;
  uint64_t v2 = sub_100019F58(v8, v9);
  uint64_t v3 = *v2 + 32LL;
  uint64_t v4 = v3 + *(void *)(*v2 + 16LL);
  swift_bridgeObjectRetain();
  sub_100064808(v3, v4, &v7);
  swift_bridgeObjectRelease();
  uint64_t v5 = v7;
  sub_100019F7C(v8);
  return v5;
}

uint64_t ECDSASignatureVerifier.__allocating_init(publicKey:)(uint64_t a1)
{
  uint64_t v3 = swift_allocObject(v1, 32LL, 7LL);
  ECDSASignatureVerifier.init(publicKey:)(a1);
  return v3;
}

uint64_t ECDSASignatureVerifier.init(publicKey:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  *(void *)(v1 + 24) = kSecKeyAlgorithmECDSASignatureDigestX962SHA256;
  uint64_t v2 = (id)kSecKeyAlgorithmECDSASignatureDigestX962SHA256;
  return v1;
}

void ECDSASignatureVerifier.verify(data:signature:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static Array._allocateBufferUninitialized(minimumCapacity:)(32LL, &type metadata for UInt8);
  *(void *)(v3 + 16) = 32LL;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  __asm { BR              X10 }

BOOL sub_1000641BC()
{
  uint64_t v3 = sub_100064034((uint64_t)v18[0]);
  unint64_t v5 = v4;
  v18[0] = 0LL;
  uint64_t v7 = *(__SecKey **)(v0 + 16);
  uint64_t v6 = *(const __CFString **)(v0 + 24);
  isa = (const __CFData *)Data._bridgeToObjectiveC()().super.isa;
  uint64_t v9 = (const __CFData *)Data._bridgeToObjectiveC()().super.isa;
  int v10 = SecKeyVerifySignature(v7, v6, isa, v9, v18);

  CFErrorRef v11 = v18[0];
  if (v18[0])
  {
    type metadata accessor for CFError(0LL);
    uint64_t v13 = v12;
    uint64_t v14 = sub_1000221A8( &qword_1002AC458,  (uint64_t (*)(uint64_t))type metadata accessor for CFError,  (uint64_t)&protocol conformance descriptor for CFErrorRef);
    uint64_t v15 = swift_allocError(v13, v14, 0LL, 0LL);
    *uint64_t v16 = v11;
    swift_willThrow(v15);
  }

  sub_10003A9EC(v3, v5);
  return v10 != 0;
}

uint64_t ECDSASignatureVerifier.deinit()
{
  return v0;
}

uint64_t ECDSASignatureVerifier.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

void *sub_1000643E8( uint64_t a1, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  unint64_t result = a2(&v6, a1, a1 + a4);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

uint64_t sub_10006442C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v9 = a1;
  __int16 v10 = a2;
  char v11 = BYTE2(a2);
  char v12 = BYTE3(a2);
  char v13 = BYTE4(a2);
  char v14 = BYTE5(a2);
  sub_100141670(&v9, (uint64_t)&v9 + a3, a4, a5, a6);
  return sub_10003A9EC(a4, a5);
}

void *sub_100064520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a3;
  v6[1] = a4;
  v5[2] = v6;
  return sub_1000648FC( (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_100064BC0,  (uint64_t)v5,  a1,  a2);
}

void sub_100064568()
{
  __asm { BR              X11 }

void *sub_1000645C8@<X0>(uint64_t a1@<X8>)
{
  void *(*v3)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v4;
  void *result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t v7 = v4;
  LOWORD(v8) = a1;
  BYTE2(v8) = BYTE2(a1);
  HIBYTE(v8) = BYTE3(a1);
  uint64_t v9 = BYTE4(a1);
  __int16 v10 = BYTE5(a1);
  char v11 = BYTE6(a1);
  unint64_t result = sub_1000643E8((uint64_t)&v7, v3, v2, BYTE6(a1));
  uint64_t v6 = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  *uint64_t v1 = v7;
  v1[1] = v6;
  return result;
}

uint64_t sub_100064808@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    unint64_t result = 0LL;
LABEL_4:
    unint64_t v5 = 0xC000000000000000LL;
    goto LABEL_5;
  }

  if (v4 <= 14)
  {
    unint64_t result = Data.InlineData.init(_:)();
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }

  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    unint64_t result = Data.LargeSlice.init(_:)();
    unint64_t v5 = v8 | 0x8000000000000000LL;
  }

  else
  {
    unint64_t result = Data.InlineSlice.init(_:)();
    unint64_t v5 = v6 | 0x4000000000000000LL;
  }

uint64_t sub_10006487C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    uint64_t v7 = result;
    swift_bridgeObjectRetain(a4);
    unint64_t result = _StringGuts.copyUTF8(into:)(v7, a2, a3, a4);
    if ((v8 & 1) == 0)
    {
      swift_bridgeObjectRelease(a4);
      return 0LL;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void *sub_1000648FC( void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v6 = a4 - a3;
    uint64_t v7 = a3;
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v6 = 0LL;
  }

  unint64_t result = a1(&v9, v7, v6);
  if (!v4) {
    return (void *)v9;
  }
  return result;
}

char *sub_10006495C(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  unint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  char v8 = result;
  unint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }

  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  unint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

uint64_t sub_100064A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v12 = (char *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v12 += a1 - result;
  }

  BOOL v13 = __OFSUB__(a2, a1);
  uint64_t v14 = a2 - a1;
  if (v13)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v15 = __DataStorage._length.getter();
  if (v15 >= v14) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = v15;
  }
  __int128 v17 = &v12[v16];
  if (v12) {
    uint64_t v18 = (uint64_t)v17;
  }
  else {
    uint64_t v18 = 0LL;
  }
  sub_100141670(v12, v18, a4, a5, a6);
  return sub_10003A9EC(a4, a5);
}

uint64_t type metadata accessor for ECDSASignatureVerifier()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService22ECDSASignatureVerifier);
}

uint64_t sub_100064AF4(uint64_t a1)
{
  uint64_t v2 = sub_1000175B0(&qword_1002AC520);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *sub_100064B34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t result = sub_100064520(a1, a2, *a3, a3[1]);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }

  return result;
}

void *sub_100064B68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_100064B34(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

uint64_t sub_100064B80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = sub_10006487C(a1, a2, *a3, a3[1]);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }

  return result;
}

uint64_t sub_100064BC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_100064B80(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

unint64_t sub_100064BDC()
{
  unint64_t result = qword_1002AC530;
  if (!qword_1002AC530)
  {
    uint64_t v1 = sub_100018EC0(&qword_1002AC528);
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002AC530);
  }

  return result;
}

double sub_100064C20()
{
  __int16 v1 = *(_WORD *)(v0 - 148);
  double result = *(double *)(v0 - 160);
  *(double *)(v0 - 136) = result;
  *(_DWORD *)(v0 - 128) = *(_DWORD *)(v0 - 152);
  *(_WORD *)(v0 - 124) = v1;
  return result;
}

uint64_t sub_100064C3C()
{
  return sub_1000CF8B0(v2, v1, v0);
}

uint64_t sub_100064C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100064A08(a1, a2, a3, v6, v7, a6);
}

uint64_t sub_100064C5C()
{
  return sub_10003AACC(v0, v1);
}

uint64_t sub_100064C68()
{
  return sub_10003AA88(v0, v1);
}

uint64_t sub_100064C74()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 216));
}

void sub_100064C7C(char a1)
{
  if ((a1 & 1) != 0)
  {
    sub_10002E308();
  }

  else
  {
    swift_release(*v1);
    *unint64_t v1 = _swiftEmptyArrayStorage;
    sub_100032230();
    uint64_t v2 = *v1;
    unint64_t v3 = *(void *)(*v1 + 16LL);
    if (v3 >= *(void *)(*v1 + 24LL) >> 1)
    {
      sub_100032230();
      uint64_t v2 = *v1;
    }

    *(void *)(v2 + 16) = v3 + 1;
    uint64_t v4 = (void *)(v2 + 24 * v3);
    v4[4] = 0LL;
    v4[5] = 0LL;
    *(void *)((char *)v4 + 47) = 0LL;
    *unint64_t v1 = v2;
  }

  v1[1] = 0LL;
  v1[2] = 0LL;
}

uint64_t sub_100064D34()
{
  return DecodingState.hashValue.getter(*v0);
}

BOOL ByteToMessageDecoder.shouldReclaimBytes(buffer:)(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x7FFuLL) {
    return 1LL;
  }
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  return v2 >= 0x401 && v2 - a2 < a2;
}

void ByteToMessageDecoder.wrapInboundOut(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a3,  a2,  &protocol requirements base descriptor for ByteToMessageDecoder,  &associated type descriptor for ByteToMessageDecoder.InboundOut);
  __chkstk_darwin(AssociatedTypeWitness);
  unint64_t v5 = (char *)&v7 - v4;
  sub_100067F14(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
  NIOAny.init<A>(_:)((uint64_t)v5, AssociatedTypeWitness);
}

uint64_t ByteToMessageDecoder.decodeLast(context:buffer:seenEOF:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 16);
  do
    char v11 = v10(a1, a2, a4, a5);
  while (!v5 && (v11 & 1) == 0);
  return 1LL;
}

void _s25ASOctaneSupportXPCService13DecodingStateO9hashValueSivg_0(char a1)
{
}

void sub_100064E94()
{
}

uint64_t sub_100064EAC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2;
  uint64_t v6 = result;
  uint64_t v7 = a3 - a2;
  if (a3 < a2) {
    v7 += *(void *)(result + 16);
  }
  if (v7 >= 1)
  {
    if (a2 < 0) {
      goto LABEL_42;
    }
    if (!HIDWORD(a2))
    {
      if (a3 < 0) {
        goto LABEL_42;
      }
      if (!HIDWORD(a3))
      {
        uint64_t v8 = a2;
        uint64_t v9 = a3;
        Swift::Int v10 = *(unsigned int *)(v3 + 12);
        uint64_t v11 = v6 + 32;
        BOOL v12 = 1;
        unint64_t v13 = a2;
        do
        {
          unint64_t v14 = *(void *)(v6 + 16);
          if (v14 <= v13)
          {
            __break(1u);
LABEL_34:
            __break(1u);
            goto LABEL_35;
          }

          uint64_t v15 = (void *)(v11 + 24 * v13);
          if (!*v15) {
            goto LABEL_38;
          }
          uint64_t v16 = (v14 + 0x1FFFFFFFFLL) & (v13 + 1);
          if (HIDWORD(v16)) {
            goto LABEL_40;
          }
          uint64_t v17 = v15[1];
          unsigned int v18 = HIDWORD(v17) - v17;
          unint64_t v13 = v16;
          BOOL v12 = v16 >= a2;
          BOOL v19 = __OFADD__(v10, v18);
          v10 += v18;
        }

        while (!v19);
        __break(1u);
LABEL_18:
        ByteBuffer.reserveCapacity(_:)(v10);
        swift_retain();
        uint64_t v40 = a3;
        if (v8 == v9 && a3 >= v5) {
          return swift_release(v6);
        }
        LODWORD(v21) = v5;
        uint64_t v42 = a3;
        uint64_t v43 = v6;
        uint64_t v41 = v6 + 32;
        while (1)
        {
          unint64_t v22 = *(void *)(v6 + 16);
          v23 = (uint64_t *)(v11 + 24LL * v21);
          uint64_t v24 = *v23;
          if (!*v23) {
            goto LABEL_39;
          }
          uint64_t v21 = (v22 - 1) & (v21 + 1LL);
          if (HIDWORD(v21)) {
            goto LABEL_40;
          }
          uint64_t v25 = v5;
          uint64_t v26 = v23[1];
          int v27 = *((unsigned __int8 *)v23 + 22);
          int v28 = *((unsigned __int16 *)v23 + 10);
          uint64_t v29 = *((unsigned int *)v23 + 4);
          Swift::UInt32 v30 = *(_DWORD *)(v3 + 12);
          v31 = (void *)(v24 + 24);
          swift_beginAccess(v24 + 24, v44, 0LL, 0LL);
          unint64_t v32 = v29 | ((unint64_t)(v28 | (v27 << 16)) << 32);
          uint64_t v33 = *v31 + ((v32 >> 24) & 0xFFFF00 | BYTE6(v32)) + v26;
          int v34 = ByteBuffer._setBytes(_:at:)(v33, v33 + (HIDWORD(v26) - v26), v30);
          int v35 = *(_DWORD *)(v3 + 12);
          BOOL v36 = __CFADD__(v35, v34);
          int v37 = v35 + v34;
          if (v36) {
            goto LABEL_37;
          }
          uint64_t v5 = v25;
          uint64_t v6 = v43;
          *(_DWORD *)(v3 + 12) = v37;
          uint64_t v11 = v41;
        }

LABEL_40:
    v38 = "Not enough bits to represent the passed value";
    for (uint64_t i = 45LL; ; uint64_t i = 35LL)
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11LL, 2LL, v38, i, 2LL, "Swift/Integers.swift", 20LL);
      __break(1u);
LABEL_42:
      v38 = "Negative value is not representable";
    }
  }

  return result;
}

  __break(1u);
  return result;
}

    uint64_t v26 = 0LL;
    LOBYTE(v16) = 1;
    goto LABEL_41;
  }

  __break(1u);
LABEL_74:
  __break(1u);
}

  __break(1u);
LABEL_41:
  sub_100034FD0();
  sub_100035144();
  double result = _assertionFailure(_:_:file:line:flags:)(v68, v69, v70, v71, v72, 2LL, v73, 20LL);
  __break(1u);
  return result;
}

  sub_100034FD0();
  v45 = "Range requires lowerBound <= upperBound";
  v46 = "Swift/Range.swift";
  v47 = 39LL;
  v48 = 17LL;
LABEL_42:
  double result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11LL, 2LL, v45, v47, 2LL, v46, v48);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    v133 = v61[23];
    v134 = &v58[v133];
    v135 = &v59[v133];
    v137 = *(void *)v135;
    v136 = *((void *)v135 + 1);
    *(void *)v134 = v137;
    *((void *)v134 + 1) = v136;
    swift_bridgeObjectRelease();
    v138 = v61[24];
    v139 = &v58[v138];
    v140 = &v59[v138];
    v142 = *(void *)v140;
    v141 = *((void *)v140 + 1);
    *(void *)v139 = v142;
    *((void *)v139 + 1) = v141;
    swift_bridgeObjectRelease();
    v143 = v61[25];
    v144 = &v58[v143];
    v145 = &v59[v143];
    v147 = *(void *)v145;
    v146 = *((void *)v145 + 1);
    *(void *)v144 = v147;
    *((void *)v144 + 1) = v146;
    swift_bridgeObjectRelease();
    v148 = v61[26];
    v149 = &v59[v148];
    v223 = (uint64_t)&v58[v148];
    v150 = sub_10001D158((uint64_t)&v58[v148], 1LL, v16);
    v151 = sub_10001D158((uint64_t)v149, 1LL, v16);
    if (v150)
    {
      if (!v151)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v221 + 32))(v223, v149, v16);
        sub_10001762C(v223, 0LL, 1LL, v16);
        goto LABEL_48;
      }

      v152 = *(void *)(*(void *)(sub_1000175B0((uint64_t *)&unk_1002AFCD0) - 8) + 64LL);
      v153 = (void *)v223;
    }

    else
    {
      if (!v151)
      {
        v220(v223, v149, v16);
        goto LABEL_48;
      }

      (*(void (**)(uint64_t, uint64_t))(v221 + 8))(v223, v16);
      v152 = *(void *)(*(void *)(sub_1000175B0((uint64_t *)&unk_1002AFCD0) - 8) + 64LL);
      v153 = (void *)v223;
    }

    memcpy(v153, v149, v152);
LABEL_48:
    v58[v61[27]] = v59[v61[27]];
    v154 = v61[28];
    v155 = &v58[v154];
    v156 = &v59[v154];
    v158 = *(void *)v156;
    v157 = *((void *)v156 + 1);
    *(void *)v155 = v158;
    *((void *)v155 + 1) = v157;
    swift_bridgeObjectRelease();
    v58[v61[29]] = v59[v61[29]];
    v58[v61[30]] = v59[v61[30]];
    v58[v61[31]] = v59[v61[31]];
    v159 = v61[32];
    v160 = &v58[v159];
    v161 = &v59[v159];
    v163 = *(void *)v161;
    v162 = *((void *)v161 + 1);
    *(void *)v160 = v163;
    *((void *)v160 + 1) = v162;
    swift_bridgeObjectRelease();
    v164 = v61[33];
    v165 = &v58[v164];
    v166 = &v59[v164];
    v168 = *(void *)v166;
    v167 = *((void *)v166 + 1);
    *(void *)v165 = v168;
    *((void *)v165 + 1) = v167;
    swift_bridgeObjectRelease();
    v169 = v61[34];
    v170 = &v58[v169];
    v171 = &v59[v169];
    v173 = *(void *)v171;
    v172 = *((void *)v171 + 1);
    *(void *)v170 = v173;
    *((void *)v170 + 1) = v172;
    swift_bridgeObjectRelease();
    v174 = v61[35];
    v175 = &v58[v174];
    v176 = &v59[v174];
    v178 = *(void *)v176;
    v177 = *((void *)v176 + 1);
    *(void *)v175 = v178;
    *((void *)v175 + 1) = v177;
    swift_bridgeObjectRelease();
    v179 = v61[36];
    v180 = &v58[v179];
    v181 = &v59[v179];
    v183 = *(void *)v181;
    v182 = *((void *)v181 + 1);
    *(void *)v180 = v183;
    *((void *)v180 + 1) = v182;
    swift_bridgeObjectRelease();
    v184 = v61[37];
    v185 = &v58[v184];
    v186 = &v59[v184];
    v188 = *(void *)v186;
    v187 = *((void *)v186 + 1);
    *(void *)v185 = v188;
    *((void *)v185 + 1) = v187;
    swift_bridgeObjectRelease();
    v189 = v61[38];
    v190 = &v58[v189];
    v191 = &v59[v189];
    v193 = *(void *)v191;
    v192 = *((void *)v191 + 1);
    *(void *)v190 = v193;
    *((void *)v190 + 1) = v192;
    swift_bridgeObjectRelease();
    v194 = v61[39];
    v195 = &v58[v194];
    v196 = &v59[v194];
    v198 = *(void *)v196;
    v197 = *((void *)v196 + 1);
    *(void *)v195 = v198;
    *((void *)v195 + 1) = v197;
    swift_bridgeObjectRelease();
    v199 = v61[40];
    v200 = &v58[v199];
    v201 = &v59[v199];
    v203 = *(void *)v201;
    v202 = *((void *)v201 + 1);
    *(void *)v200 = v203;
    *((void *)v200 + 1) = v202;
    swift_bridgeObjectRelease();
    v204 = v61[41];
    v205 = &v58[v204];
    v206 = &v59[v204];
    *(void *)v205 = *(void *)v206;
    v205[8] = v206[8];
    v207 = v61[42];
    v208 = &v58[v207];
    v209 = &v59[v207];
    v211 = *(void *)v209;
    v210 = *((void *)v209 + 1);
    *(void *)v208 = v211;
    *((void *)v208 + 1) = v210;
    swift_bridgeObjectRelease();
    v212 = v40[10];
    v213 = (char *)v38 + v212;
    v214 = (char *)v39 + v212;
    v215 = type metadata accessor for P256.Signing.PrivateKey(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v215 - 8) + 40LL))(v213, v214, v215);
    v216 = v40[11];
    v217 = (char *)v38 + v216;
    v218 = (char *)v39 + v216;
    *(void *)v217 = *(void *)v218;
    v217[8] = v218[8];
    *((_BYTE *)v38 + v40[12]) = *((_BYTE *)v39 + v40[12]);
    return a1;
  }

  if (v42)
  {
LABEL_24:
    v52 = sub_1000175B0(&qword_1002AB750);
    memcpy(v38, v39, *(void *)(*(void *)(v52 - 8) + 64LL));
    return a1;
  }

  memcpy(v38, v39, 0x48uLL);
  __src = v40;
  uint64_t v43 = v40[9];
  v44 = (char *)v38 + v43;
  v45 = (char *)v39 + v43;
  *(_OWORD *)((char *)v38 + v43) = *(_OWORD *)((char *)v39 + v43);
  v46 = (int *)type metadata accessor for CheddarTransaction(0LL);
  v47 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32LL);
  v47(&v44[v46[5]], &v45[v46[5]], v16);
  *(_OWORD *)&v44[v46[6]] = *(_OWORD *)&v45[v46[6]];
  *(_OWORD *)&v44[v46[7]] = *(_OWORD *)&v45[v46[7]];
  *(_OWORD *)&v44[v46[8]] = *(_OWORD *)&v45[v46[8]];
  v47(&v44[v46[9]], &v45[v46[9]], v16);
  *(_OWORD *)&v44[v46[10]] = *(_OWORD *)&v45[v46[10]];
  v44[v46[11]] = v45[v46[11]];
  *(_OWORD *)&v44[v46[12]] = *(_OWORD *)&v45[v46[12]];
  v47(&v44[v46[13]], &v45[v46[13]], v16);
  *(void *)&v44[v46[14]] = *(void *)&v45[v46[14]];
  *(_OWORD *)&v44[v46[15]] = *(_OWORD *)&v45[v46[15]];
  *(void *)&v44[v46[16]] = *(void *)&v45[v46[16]];
  v44[v46[17]] = v45[v46[17]];
  *(_OWORD *)&v44[v46[18]] = *(_OWORD *)&v45[v46[18]];
  *(_OWORD *)&v44[v46[19]] = *(_OWORD *)&v45[v46[19]];
  *(_OWORD *)&v44[v46[20]] = *(_OWORD *)&v45[v46[20]];
  *(_OWORD *)&v44[v46[21]] = *(_OWORD *)&v45[v46[21]];
  v48 = v46[22];
  v49 = &v44[v48];
  v50 = &v45[v48];
  if (sub_10001D158((uint64_t)&v45[v48], 1LL, v16))
  {
    v51 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64LL));
  }

  else
  {
    v47(v49, v50, v16);
    sub_10001762C((uint64_t)v49, 0LL, 1LL, v16);
  }

  *(_OWORD *)&v44[v46[23]] = *(_OWORD *)&v45[v46[23]];
  *(_OWORD *)&v44[v46[24]] = *(_OWORD *)&v45[v46[24]];
  *(_OWORD *)&v44[v46[25]] = *(_OWORD *)&v45[v46[25]];
  v119 = v46[26];
  v120 = &v44[v119];
  v121 = &v45[v119];
  if (sub_10001D158((uint64_t)&v45[v119], 1LL, v16))
  {
    v122 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v120, v121, *(void *)(*(void *)(v122 - 8) + 64LL));
  }

  else
  {
    v47(v120, v121, v16);
    sub_10001762C((uint64_t)v120, 0LL, 1LL, v16);
  }

  v44[v46[27]] = v45[v46[27]];
  *(_OWORD *)&v44[v46[28]] = *(_OWORD *)&v45[v46[28]];
  v44[v46[29]] = v45[v46[29]];
  v44[v46[30]] = v45[v46[30]];
  v44[v46[31]] = v45[v46[31]];
  *(_OWORD *)&v44[v46[32]] = *(_OWORD *)&v45[v46[32]];
  *(_OWORD *)&v44[v46[33]] = *(_OWORD *)&v45[v46[33]];
  *(_OWORD *)&v44[v46[34]] = *(_OWORD *)&v45[v46[34]];
  *(_OWORD *)&v44[v46[35]] = *(_OWORD *)&v45[v46[35]];
  *(_OWORD *)&v44[v46[36]] = *(_OWORD *)&v45[v46[36]];
  *(_OWORD *)&v44[v46[37]] = *(_OWORD *)&v45[v46[37]];
  *(_OWORD *)&v44[v46[38]] = *(_OWORD *)&v45[v46[38]];
  *(_OWORD *)&v44[v46[39]] = *(_OWORD *)&v45[v46[39]];
  *(_OWORD *)&v44[v46[40]] = *(_OWORD *)&v45[v46[40]];
  v123 = v46[41];
  v124 = &v44[v123];
  v125 = &v45[v123];
  *(void *)v124 = *(void *)v125;
  v124[8] = v125[8];
  *(_OWORD *)&v44[v46[42]] = *(_OWORD *)&v45[v46[42]];
  v126 = __src[10];
  v127 = (char *)v38 + v126;
  v128 = (char *)v39 + v126;
  v129 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v129 - 8) + 32LL))(v127, v128, v129);
  v130 = __src[11];
  v131 = (char *)v38 + v130;
  v132 = (char *)v39 + v130;
  *(void *)v131 = *(void *)v132;
  v131[8] = v132[8];
  *((_BYTE *)v38 + __src[12]) = *((_BYTE *)v39 + __src[12]);
  sub_10001762C((uint64_t)v38, 0LL, 1LL, (uint64_t)__src);
  return a1;
}

  __break(1u);
  return result;
}

uint64_t sub_100065164(uint64_t result)
{
  *(_BYTE *)uint64_t v1 = 1;
  uint64_t v2 = *(unsigned int *)(result + 8);
  uint64_t v3 = *(unsigned int *)(result + 12);
  if (v3 < v2)
  {
    __break(1u);
    return result;
  }

  uint64_t v4 = (uint64_t *)result;
  if ((_DWORD)v3 != (_DWORD)v2)
  {
    uint64_t v5 = *(void *)result;
    uint64_t v6 = v2 | (v3 << 32);
    unint64_t v7 = *(unsigned int *)(result + 16) | ((unint64_t)*(unsigned __int16 *)(result + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(result + 22) << 48);
    uint64_t v8 = swift_retain();
    sub_100065260(v8, v6, v7);
    return swift_release(v5);
  }

  if (*(void *)(v1 + 16) != *(void *)(v1 + 24))
  {
    ByteBuffer.discardReadBytes()();
    uint64_t v9 = *(void *)(v1 + 8);
    sub_100064EAC(v9, *(void *)(v1 + 16), *(void *)(v1 + 24));
    sub_100064C7C(*(void *)(v9 + 16) < 0x10uLL);
    uint64_t v5 = *v4;
    swift_retain();
    sub_10002B628();
    return swift_release(v5);
  }

  return result;
}

void sub_100065260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = v3[1] - 1LL;
  unint64_t v9 = (*(void *)(*v3 + 16LL) - 1LL) & v8;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
  {
    sub_1000F23D0();
    uint64_t v7 = v10;
  }

  if ((v9 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v9 >= *(void *)(v7 + 16))
  {
LABEL_9:
    __break(1u);
    return;
  }

  uint64_t v11 = v7 + 24 * v9;
  swift_release(*(void *)(v11 + 32));
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = a2;
  *(_BYTE *)(v11 + 54) = BYTE6(a3);
  *(_WORD *)(v11 + 52) = WORD2(a3);
  *(_DWORD *)(v11 + 48) = a3;
  *uint64_t v3 = v7;
  uint64_t v12 = (*(void *)(v7 + 16) - 1LL) & v8;
  v3[1] = v12;
  if (v12 == v3[2]) {
    sub_1000F3914();
  }
}

BOOL sub_100065344(char *a1, char *a2)
{
  return static CloseMode.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_100065358()
{
  return CloseMode.hashValue.getter(*v0);
}

void sub_100065364(uint64_t a1)
{
}

Swift::Int sub_100065370()
{
  return Hasher._finalize()();
}

unint64_t sub_1000653B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120LL);
  unint64_t v3 = *(void *)(v1 + v2);
  *(void *)(v1 + sub_10006142C(v1, v0, v2) = a1;
  return sub_1000671F0(v3);
}

uint64_t ByteToMessageHandler.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 80);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(a1);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100067F14(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
  ByteToMessageHandler.__allocating_init(_:maximumBufferSize:)((uint64_t)v6, 0LL, 1);
  uint64_t v8 = v7;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return v8;
}

void ByteToMessageHandler.__allocating_init(_:maximumBufferSize:)(uint64_t a1, uint64_t a2, char a3)
{
  char v5 = a3 & 1;
  sub_100067EF4();
  ByteToMessageHandler.init(_:maximumBufferSize:)(a1, a2, v5);
  sub_1000193B8();
}

uint64_t *ByteToMessageHandler.init(_:maximumBufferSize:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(*v3 + 80);
  uint64_t v9 = type metadata accessor for Optional(0LL, v8);
  uint64_t v10 = *(void *)(v9 - 8);
  sub_100067F88();
  __chkstk_darwin(v11);
  unint64_t v13 = &v24[-v12 - 8];
  uint64_t v14 = (uint64_t)v3 + *(void *)(v7 + 96);
  sub_100067F5C(v14, 1LL);
  uint64_t v15 = (uint64_t *)((char *)v3 + *(void *)(*v3 + 112));
  sub_10002AF70(1uLL);
  *uint64_t v15 = v16;
  v15[1] = v17;
  __int128 v15[2] = v18;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 + 120)) = 0LL;
  *((_BYTE *)v3 + *(void *)(*v3 + 128)) = 0;
  uint64_t v19 = (uint64_t)v3 + *(void *)(*v3 + 136);
  *(_OWORD *)uint64_t v19 = 0u;
  *(_OWORD *)(v19 + 16) = 0u;
  *(_OWORD *)(v19 + 32) = 0u;
  *(void *)(v19 + 47) = 0LL;
  *((_BYTE *)v3 + *(void *)(*v3 + 144)) = 0;
  uint64_t v20 = (uint64_t)v3 + *(void *)(*v3 + 152);
  *(void *)(v20 + 32) = 0LL;
  *(_OWORD *)uint64_t v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL))(v13, a1, v8);
  sub_100067F5C((uint64_t)v13, 0LL);
  sub_100035224(v14, (uint64_t)v24);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v10 + 40))(v14, v13, v9);
  swift_endAccess(v24);
  uint64_t v21 = (uint64_t)v3 + *(void *)(*v3 + 104);
  *(void *)uint64_t v21 = a2;
  *(_BYTE *)(v21 + 8) = a3 & 1;
  return v3;
}

void ByteToMessageHandler.deinit()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 96LL);
  uint64_t v2 = type metadata accessor for Optional(0LL, *(void *)(*(void *)v0 + 80LL));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  sub_100067F24();
  sub_1000671F0(*(void *)(v0 + *(void *)(*(void *)v0 + 120LL)));
  uint64_t v3 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 136LL));
  sub_100067200(*v3, v3[1], v3[2], v3[3], v3[4]);
  sub_100067230(v0 + *(void *)(*(void *)v0 + 152LL));
  sub_10001945C();
}

uint64_t ByteToMessageHandler.__deallocating_deinit()
{
  return sub_100066DB0(ByteToMessageHandler.deinit);
}

uint64_t sub_1000656B4(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a1,  v4,  &protocol requirements base descriptor for WriteObservingByteToMessageDecoder,  &associated type descriptor for WriteObservingByteToMessageDecoder.OutboundIn);
  uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v6 = (char *)&v24 - v5;
  uint64_t v7 = (uint64_t *)((char *)v1 + *(void *)(v3 + 112));
  uint64_t v8 = *(void *)(v3 + 96);
  uint64_t v26 = v1;
  uint64_t v9 = (uint64_t)v1 + v8;
  for (uint64_t result = swift_beginAccess(v7, v34, 0LL, 0LL);
        ;
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v6, AssociatedTypeWitness))
  {
    uint64_t v11 = v7[1];
    uint64_t v12 = v7[2];
    BOOL v13 = __OFSUB__(v12, v11);
    uint64_t v14 = v12 - v11;
    if (v14 < 0 != v13) {
      v14 += *(void *)(*v7 + 16LL);
    }
    if (v14 < 1) {
      break;
    }
    swift_beginAccess(v7, v31, 33LL, 0LL);
    unint64_t v15 = v7[1];
    uint64_t v16 = v7[2];
    if (v16 == v15)
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      unint64_t v22 = "Not enough bits to represent the passed value";
      uint64_t v23 = 45LL;
LABEL_28:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v22,  v23,  2LL,  "Swift/Integers.swift",  20LL);
      __break(1u);
      return result;
    }

    if ((v15 & 0x8000000000000000LL) != 0)
    {
      unint64_t v22 = "Negative value is not representable";
      uint64_t v23 = 35LL;
      goto LABEL_28;
    }

    if (HIDWORD(v15)) {
      goto LABEL_26;
    }
    uint64_t v17 = *v7;
    if (v15 >= *(void *)(*v7 + 16LL)) {
      goto LABEL_21;
    }
    sub_100067DA4(v17 + (v15 << 6) + 32, (uint64_t)&v28, &qword_1002AA490);
    if (v30[24] == 255) {
      goto LABEL_24;
    }
    v32[0] = v28;
    v32[1] = v29;
    v33[0] = *(_OWORD *)v30;
    *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)&v30[9];
    uint64_t v18 = v16 - v15;
    if (v18 < 1) {
      goto LABEL_22;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
    *uint64_t v7 = v17;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1000F23F0();
      uint64_t v17 = v20;
    }

    memset(v30, 0, 24);
    __int128 v29 = 0u;
    __int128 v28 = 0u;
    v30[24] = -1;
    *uint64_t v7 = v17;
    if (v15 >= *(void *)(v17 + 16)) {
      goto LABEL_23;
    }
    sub_100067D3C((uint64_t)&v28, v17 + (v15 << 6) + 32, &qword_1002AA490);
    v7[1] = (*(void *)(*v7 + 16LL) - 1LL) & (v15 + 1);
    swift_endAccess(v31);
    uint64_t v27 = a1;
    uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for <> ByteToMessageHandler<A>, v3, &v27);
    ChannelOutboundHandler.unwrapOutboundIn(_:)((uint64_t)v32, v3, WitnessTable, (uint64_t)v6);
    sub_1000324E8((uint64_t)v32);
    swift_beginAccess(v9, v32, 33LL, 0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(a1 + 24))(v6, v4, a1);
    swift_endAccess(v32);
  }

  return result;
}

uint64_t sub_100065A24(uint64_t a1, uint64_t a2)
{
  return sub_1000656B4(*(void *)(a2 - 8));
}

uint64_t sub_100065A48(uint64_t a1, uint64_t *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v8 = *a2;
  uint64_t v9 = (uint64_t)a2 + *(void *)(*a2 + 96);
  swift_beginAccess(v9, v24, 33LL, 0LL);
  uint64_t v10 = *(void *)(v8 + 80);
  uint64_t v11 = type metadata accessor for Optional(0LL, v10);
  swap<A>(_:_:)(a1, v9, v11);
  uint64_t result = swift_endAccess(v24);
  uint64_t v13 = *(unsigned int *)(a3 + 8);
  uint64_t v14 = *(unsigned int *)(a3 + 12);
  if (v14 < v13)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if ((_DWORD)v14 == (_DWORD)v13 || *a4 != 1)
  {
LABEL_7:
    uint64_t v20 = (uint64_t)a2 + *(void *)(*a2 + 136);
    uint64_t result = swift_beginAccess(v20, v24, 33LL, 0LL);
    if (*(void *)(v20 + 8))
    {
      sub_100065164(a3);
      return swift_endAccess(v24);
    }

    goto LABEL_10;
  }

  uint64_t v15 = *(void *)a3;
  uint64_t v23 = *(unsigned int *)(a3 + 16);
  uint64_t v22 = *(unsigned __int16 *)(a3 + 20);
  uint64_t v21 = *(unsigned __int8 *)(a3 + 22);
  swift_beginAccess(v9, v24, 33LL, 0LL);
  uint64_t result = sub_10001D158(v9, 1LL, v10);
  if ((_DWORD)result != 1)
  {
    uint64_t v16 = *(void *)(v8 + 88);
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 48);
    uint64_t v18 = swift_retain();
    char v19 = v17(v18, v13 | (v14 << 32), v23 | (v22 << 32) | (v21 << 48), v10, v16);
    swift_endAccess(v24);
    swift_release(v15);
    if ((v19 & 1) != 0) {
      ByteBuffer.discardReadBytes()();
    }
    goto LABEL_7;
  }

uint64_t sub_100065BE4(uint64_t result)
{
  if (!*(void *)(v1 + *(void *)(*(void *)v1 + 120LL)))
  {
    else {
      return sub_1000653B4(2LL);
    }
  }

  return result;
}

uint64_t sub_100065C90(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v58 = a1;
  int v4 = a2 & 1;
  uint64_t v5 = (void *)*v2;
  uint64_t v62 = *(void *)(*v2 + 80);
  uint64_t v67 = type metadata accessor for Optional(0LL, v62);
  uint64_t v59 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v61 = (uint64_t)&v56 - v6;
  char v82 = v4;
  uint64_t v57 = v5[16];
  uint64_t v7 = (char *)v2 + v5[17];
  v60 = (char *)v2 + v5[12];
  uint64_t v68 = v5[15];
  v65 = (uint64_t *)((char *)v2 + v5[14]);
  swift_beginAccess(v65, v79, 0LL, 0LL);
  v71 = v7 + 8;
  v63 = v7 + 16;
  v64 = v2;
  int v66 = v4;
  while (1)
  {
    if (*(uint64_t *)((char *)v3 + v68))
    {
      if (!v4) {
        return 0LL;
      }
    }

    else if (*((_BYTE *)v3 + v57) != 1 && v4 == 0)
    {
      return 0LL;
    }

    char v9 = v82;
    swift_beginAccess(v7, v78, 33LL, 0LL);
    uint64_t v10 = *((void *)v7 + 1);
    if (!v10) {
      goto LABEL_58;
    }
    if (*v7 != 1)
    {
      swift_endAccess(v78);
      return 2LL;
    }

    unint64_t v12 = *((void *)v7 + 2);
    uint64_t v11 = *((void *)v7 + 3);
    uint64_t v13 = v11 - v12;
    if (v13 < 1)
    {
      if ((v9 & 1) != 0)
      {
        *uint64_t v7 = 0;
        uint64_t v31 = *((void *)v7 + 4);
        unsigned int v32 = *((_DWORD *)v7 + 10);
        unsigned int v33 = *((_DWORD *)v7 + 11);
        int v34 = *((_DWORD *)v7 + 12);
        __int16 v35 = *((_WORD *)v7 + 26);
        char v36 = v7[54];
        swift_retain();
        goto LABEL_38;
      }

      swift_endAccess(v78);
LABEL_44:
      uint64_t v49 = v65[1];
      uint64_t v50 = v65[2];
      BOOL v51 = __OFSUB__(v50, v49);
      uint64_t v52 = v50 - v49;
      if (v52 < 0 != v51) {
        v52 += *(void *)(*v65 + 16LL);
      }
      if (v52 < 1) {
        return 1LL;
      }
      goto LABEL_48;
    }

    if (v11 == v12)
    {
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      v54 = "Negative value is not representable";
      uint64_t v55 = 35LL;
      goto LABEL_63;
    }

    if ((v12 & 0x8000000000000000LL) != 0) {
      goto LABEL_61;
    }
    if (HIDWORD(v12)) {
      break;
    }
    unint64_t v14 = *(void *)(v10 + 16);
    if (v12 >= v14) {
      goto LABEL_54;
    }
    uint64_t v15 = v10 + 24 * v12;
    uint64_t v18 = *(void *)(v15 + 32);
    uint64_t v16 = v15 + 32;
    uint64_t v17 = v18;
    if (!v18) {
      goto LABEL_59;
    }
    BOOL v19 = v11 < (uint64_t)v12;
    uint64_t v20 = v11 - v12;
    if (!v19) {
      unint64_t v14 = 0LL;
    }
    int v21 = *(unsigned __int8 *)(v16 + 22);
    int v22 = *(unsigned __int16 *)(v16 + 20);
    int v80 = *(_DWORD *)(v16 + 16);
    unsigned int v23 = *(_DWORD *)(v16 + 8);
    unsigned int v70 = *(_DWORD *)(v16 + 12);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
    void *v71 = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1000F23D0();
      uint64_t v10 = v25;
    }

    void *v71 = v10;
    if (v12 >= *(void *)(v10 + 16)) {
      goto LABEL_56;
    }
    int v26 = v22 | (v21 << 16);
    uint64_t v27 = (void *)(v10 + 24 * v12);
    swift_release(v27[4]);
    *(void *)((char *)v27 + 47) = 0LL;
    v27[4] = 0LL;
    v27[5] = 0LL;
    uint64_t v28 = *((void *)v7 + 1);
    unint64_t v29 = *(void *)(v28 + 16);
    uint64_t v30 = (v29 - 1) & (v12 + 1);
    *((void *)v7 + 2) = v30;
    uint64_t v72 = v17;
    unsigned int v73 = v23;
    unsigned int v74 = v70;
    int v75 = v80;
    __int16 v76 = v26;
    char v77 = BYTE2(v26);
    sub_100064EAC(v28, v30, *((void *)v7 + 3));
    if (v29 > 0xF)
    {
      int v37 = v71;
      swift_release(*v71);
      *int v37 = _swiftEmptyArrayStorage;
      sub_100032230();
      uint64_t v38 = *v37;
      unint64_t v39 = *(void *)(*v37 + 16LL);
      uint64_t v3 = v64;
      if (v39 >= *(void *)(*v37 + 24LL) >> 1)
      {
        sub_100032230();
        uint64_t v38 = *v37;
      }

      *(void *)(v38 + 16) = v39 + 1;
      uint64_t v40 = (void *)(v38 + 24 * v39);
      v40[4] = 0LL;
      v40[5] = 0LL;
      *(void *)((char *)v40 + 47) = 0LL;
    }

    else
    {
      uint64_t v3 = v64;
      sub_10002E308();
    }

    uint64_t v41 = v63;
    void *v63 = 0LL;
    v41[1] = 0LL;
    unsigned int v32 = v73;
    unsigned int v33 = v74;
    if (v74 < v73) {
      goto LABEL_57;
    }
    if (v74 == v73) {
      char v42 = v9;
    }
    else {
      char v42 = 1;
    }
    if ((v42 & 1) == 0)
    {
      swift_release(v72);
      swift_endAccess(v78);
      int v4 = v66;
      goto LABEL_44;
    }

    *uint64_t v7 = 0;
    uint64_t v31 = v72;
    int v34 = v75;
    __int16 v35 = v76;
    char v36 = v77;
LABEL_38:
    swift_endAccess(v78);
    uint64_t v72 = v31;
    unsigned int v73 = v32;
    unsigned int v74 = v33;
    int v75 = v34;
    __int16 v76 = v35;
    char v77 = v36;
    char v81 = 0;
    uint64_t v44 = v61;
    uint64_t v43 = v62;
    sub_10001762C(v61, 1LL, 1LL, v62);
    v45 = v60;
    swift_beginAccess(v60, v78, 33LL, 0LL);
    swap<A>(_:_:)(v44, v45, v67);
    swift_endAccess(v78);
    int v4 = v66;
    uint64_t v46 = v69;
    char v47 = sub_100066314(v44, (uint64_t)&v72, v66, v3, v58, &v82);
    uint64_t v69 = v46;
    if (v46)
    {
      sub_100065A48(v44, v3, (uint64_t)&v72, &v81);
      swift_release(v72);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 8))(v44, v67);
    }

    char v48 = v47;
    char v81 = v47 & 1;
    sub_100065A48(v44, v3, (uint64_t)&v72, &v81);
    swift_release(v72);
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v44, v67);
    if ((v48 & 1) != 0) {
      goto LABEL_44;
    }
LABEL_48:
    sub_100066240();
  }

  v54 = "Not enough bits to represent the passed value";
  uint64_t v55 = 45LL;
LABEL_63:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v54,  v55,  2LL,  "Swift/Integers.swift",  20LL);
  __break(1u);
  return result;
}

void sub_100066240()
{
  uint64_t v1 = (void *)(v0 + *(void *)(*(void *)v0 + 112LL));
  swift_beginAccess(v1, v13, 0LL, 0LL);
  uint64_t v2 = v1[1];
  uint64_t v3 = v1[2];
  BOOL v4 = __OFSUB__(v3, v2);
  uint64_t v5 = v3 - v2;
  if (v5 < 0 != v4) {
    v5 += *(void *)(*v1 + 16LL);
  }
  if (v5 >= 1)
  {
    uint64_t v6 = v0 + *(void *)(*(void *)v0 + 152LL);
    swift_beginAccess(v6, v12, 0LL, 0LL);
    sub_100067DA4(v6, (uint64_t)v9, &qword_1002AC538);
    uint64_t v7 = v10;
    if (v10)
    {
      uint64_t v8 = v11;
      sub_100019F58(v9, v10);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
      sub_100019F7C(v9);
    }

    else
    {
      __break(1u);
    }
  }

uint64_t sub_100066314(uint64_t a1, uint64_t a2, char a3, uint64_t *a4, uint64_t a5, _BYTE *a6)
{
  uint64_t v10 = *a4;
  uint64_t v11 = *(void *)(*a4 + 80);
  uint64_t v12 = *(void *)(v10 + 88);
  if ((a3 & 1) != 0)
  {
    *a6 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v12 + 24))( a5,  a2,  *((unsigned __int8 *)a4 + *(void *)(*a4 + 144)),  v11);
  }

  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 16))(a5, a2, v11, v12);
  }

  if (!v6)
  {
    if ((result & 1) == 0) {
      return 0LL;
    }
    uint64_t v14 = (uint64_t)a4 + *(void *)(*a4 + 104);
    if ((*(_BYTE *)(v14 + 8) & 1) != 0) {
      return 1LL;
    }
    unsigned int v15 = *(_DWORD *)(a2 + 8);
    unsigned int v16 = *(_DWORD *)(a2 + 12);
    BOOL v17 = v16 >= v15;
    unsigned int v18 = v16 - v15;
    if (!v17)
    {
      __break(1u);
      return result;
    }

    if (*(void *)v14 >= (uint64_t)v18)
    {
      return 1LL;
    }

    else
    {
      unint64_t v19 = sub_100067D68();
      uint64_t v20 = swift_allocError(&type metadata for ByteToMessageDecoderError.PayloadTooLargeError, v19, 0LL, 0LL);
      return swift_willThrow(v20);
    }
  }

  return result;
}

uint64_t ByteToMessageHandler.handlerAdded(context:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 128);
  if (*((_BYTE *)v1 + v4))
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = v1;
    uint64_t v32 = *(void *)(v3 + 80);
    uint64_t v29 = *(void *)(v3 + 88);
    uint64_t v30 = a1;
    *((_BYTE *)v1 + v4) = 1;
    uint64_t v5 = sub_100094338();
    uint64_t v7 = v6;
    uint64_t ObjectType = swift_getObjectType(v5);
    (*(void (**)(uint64_t, uint64_t))(v7 + 16))(ObjectType, v7);
    swift_unknownObjectRelease(v5);
    if (qword_1002A8CC8 == -1) {
      goto LABEL_3;
    }
  }

  swift_once(&qword_1002A8CC8, sub_10005B580);
LABEL_3:
  uint64_t v10 = static ByteBufferAllocator.zeroCapacityWithDefaultAllocator;
  uint64_t v9 = qword_1002EB928;
  int v11 = dword_1002EB930;
  __int16 v31 = word_1002EB934;
  char v12 = byte_1002EB936;
  swift_retain();
  sub_10002B12C(4uLL);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v19 = (uint64_t)v2 + *(void *)(*v2 + 136);
  sub_10002A718(v19, (uint64_t)v37, 1LL);
  uint64_t v20 = *(void *)v19;
  uint64_t v21 = *(void *)(v19 + 8);
  uint64_t v22 = *(void *)(v19 + 16);
  uint64_t v23 = *(void *)(v19 + 24);
  uint64_t v24 = *(void *)(v19 + 32);
  *(void *)uint64_t v19 = 1LL;
  *(void *)(v19 + 8) = v14;
  *(void *)(v19 + 16) = v16;
  *(void *)(v19 + 24) = v18;
  *(void *)(v19 + 32) = v10;
  *(void *)(v19 + 40) = v9;
  *(_DWORD *)(v19 + 48) = v11;
  *(_BYTE *)(v19 + 54) = v12;
  *(_WORD *)(v19 + 52) = v31;
  sub_100067200(v20, v21, v22, v23, v24);
  char v36 = v2;
  swift_retain();
  uint64_t v25 = sub_1000175B0(&qword_1002AC540);
  if ((swift_dynamicCast(v34, &v36, v3, v25, 6LL) & 1) == 0)
  {
    uint64_t v35 = 0LL;
    memset(v34, 0, sizeof(v34));
  }

  uint64_t v26 = (uint64_t)v2 + *(void *)(*v2 + 152);
  sub_100035224(v26, (uint64_t)v33);
  sub_100067D3C((uint64_t)v34, v26, &qword_1002AC538);
  swift_endAccess(v33);
  uint64_t v27 = (uint64_t)v2 + *(void *)(*v2 + 96);
  sub_100035224(v27, (uint64_t)v34);
  uint64_t result = sub_10001D158(v27, 1LL, v32);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t))(v29 + 40))(v30, v32);
    return swift_endAccess(v34);
  }

  return result;
}

uint64_t ByteToMessageHandler.handlerRemoved(context:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  *((_BYTE *)v1 + *(void *)(*v1 + 128)) = 4;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 80);
  uint64_t v6 = *(void *)(v3 + 88);
  if (*(unint64_t *)((char *)v1 + *(void *)(*v1 + 120)) <= 1)
  {
    sub_1000653B4(2LL);
    uint64_t v4 = *v1;
  }

  uint64_t v12 = 0LL;
  memset(v11, 0, sizeof(v11));
  uint64_t v7 = (uint64_t)v1 + *(void *)(v4 + 152);
  sub_100035224(v7, (uint64_t)v10);
  sub_100067D3C((uint64_t)v11, v7, &qword_1002AC538);
  swift_endAccess(v10);
  uint64_t v8 = (uint64_t)v1 + *(void *)(*v1 + 96);
  sub_100035224(v8, (uint64_t)v11);
  uint64_t result = sub_10001D158(v8, 1LL, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, v5, v6);
    return swift_endAccess(v11);
  }

  return result;
}

uint64_t ByteToMessageHandler.channelRead(context:data:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  uint64_t WitnessTable = swift_getWitnessTable("\r&\b", v5);
  ChannelInboundHandler.unwrapInboundIn(_:)(a2, v5, WitnessTable, (uint64_t)&v22);
  uint64_t v7 = v22;
  uint64_t v9 = v23;
  uint64_t v8 = v24;
  int v10 = v25;
  __int16 v11 = v26;
  char v12 = v27;
  uint64_t v13 = *(void *)(*v3 + 120);
  unint64_t v14 = *(uint64_t *)((char *)v3 + v13);
  if (v14 >= 3)
  {
    unint64_t v18 = sub_100067270();
    uint64_t v19 = swift_allocError(&type metadata for ByteToMessageDecoderError, v18, 0LL, 0LL);
    *(void *)uint64_t v20 = v14;
    *(void *)(v20 + 8) = v7;
    *(void *)(v20 + 16) = v9 | (v8 << 32);
    *(_BYTE *)(v20 + 30) = v12;
    *(_WORD *)(v20 + 28) = v11;
    *(_DWORD *)(v20 + 24) = v10;
    sub_1000672AC(v14);
    sub_1000672AC(v14);
    swift_retain();
    ChannelHandlerContext.fireErrorCaught(_:)();
    swift_errorRelease(v19);
    sub_1000671F0(v14);
    return swift_release(v7);
  }

  uint64_t v15 = (uint64_t)v3 + *(void *)(*v3 + 136);
  uint64_t result = sub_100035224(v15, (uint64_t)&v22);
  if (!*(void *)(v15 + 8)) {
    goto LABEL_14;
  }
  if (v8 < v9)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  if ((_DWORD)v8 != (_DWORD)v9) {
    sub_10002B628();
  }
  swift_endAccess(&v22);
  char v17 = sub_100065C90(a1, 0);
  uint64_t result = sub_100065C90(a1, 1);
  if (result != 2)
  {
    sub_1000653B4(2LL);
    return swift_release(v7);
  }

void ByteToMessageHandler.channelInactive(context:)()
{
}

void ByteToMessageHandler.userInboundEventTriggered(context:event:)(uint64_t a1, uint64_t a2)
{
  if (swift_dynamicCast( &v4,  v5,  (char *)&type metadata for Any + 8,  &type metadata for ChannelEvent,  6LL)
    && (v4 & 1) == 0)
  {
    sub_100067F68();
    sub_100065BE4(a1);
  }

  ChannelHandlerContext.fireUserInboundEventTriggered(_:)(a2);
}

void ByteToMessageHandler<>.write(context:data:promise:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a3;
  unsigned int v24 = a2;
  uint64_t v22 = a1;
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(*v4 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a4,  v7,  &protocol requirements base descriptor for WriteObservingByteToMessageDecoder,  &associated type descriptor for WriteObservingByteToMessageDecoder.OutboundIn);
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v21 = AssociatedTypeWitness;
  sub_100067F88();
  __chkstk_darwin(v9);
  __int16 v11 = (char *)&v20 - v10;
  uint64_t v12 = type metadata accessor for Optional(0LL, v7);
  uint64_t v13 = *(void *)(v12 - 8);
  sub_100067F88();
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v20 - v15;
  uint64_t v17 = (uint64_t)v4 + *(void *)(v6 + 96);
  sub_10002A718(v17, (uint64_t)v27, 0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v17, v12);
  int v18 = sub_100067F7C((uint64_t)v16);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  if (v18 == 1)
  {
    sub_100035224((uint64_t)v4 + *(void *)(*v4 + 112), (uint64_t)v26);
    sub_10002B894(v24);
    swift_endAccess(v26);
LABEL_5:
    ChannelHandlerContext.write(_:promise:)();
    sub_10002A580();
    return;
  }

  uint64_t v25 = a4;
  uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for <> ByteToMessageHandler<A>, v6, &v25);
  ChannelOutboundHandler.unwrapOutboundIn(_:)((uint64_t)v24, v6, WitnessTable, (uint64_t)v11);
  sub_100035224(v17, (uint64_t)v26);
  if (sub_100067F7C(v17) != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(a4 + 24))(v11, v7, a4);
    swift_endAccess(v26);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v11, v21);
    goto LABEL_5;
  }

  __break(1u);
}

void sub_100066BA8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

uint64_t ByteToMessageHandler.removeHandler(context:removalToken:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)v2 + 128LL);
  if (*(_BYTE *)(v2 + v3) == 1)
  {
    uint64_t v5 = result;
    *(_BYTE *)(v2 + v3) = 2;
    uint64_t v6 = *(void *)(result + 32);
    uint64_t v7 = *(void *)(v6 + 48);
    uint64_t v8 = *(void *)(v6 + 56);
    uint64_t ObjectType = swift_getObjectType(v7);
    uint64_t v10 = (void *)swift_allocObject(&unk_10027A4B0, 40LL, 7LL);
    v10[2] = v2;
    v10[3] = v5;
    v10[4] = a2;
    __int16 v11 = *(void (**)(void (*)(), void *, uint64_t, uint64_t))(v8 + 24);
    swift_retain();
    swift_unknownObjectRetain(v7);
    swift_retain();
    swift_retain();
    v11(sub_1000672F0, v10, ObjectType, v8);
    swift_unknownObjectRelease(v7);
    return swift_release(v10);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_100066C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)a1 + 128LL);
  if (*(_BYTE *)(a1 + v5) == 2) {
    *(_BYTE *)(a1 + v5) = 3;
  }
  ChannelHandlerContext.leavePipeline(removalToken:)(a3);
}

void MessageToByteHandler.__allocating_init(_:)(uint64_t a1)
{
}

char *MessageToByteHandler.init(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)v1;
  *((void *)v1 + 2) = 0LL;
  uint64_t v3 = &v1[*(void *)(v2 + 112)];
  *(void *)uint64_t v3 = 0LL;
  *((void *)v3 + 1) = 0LL;
  *(void *)(v3 + 15) = 0LL;
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v2 + 80) - 8LL) + 32LL))( &v1[*(void *)(*(void *)v1 + 104LL)],  a1);
  return v1;
}

void MessageToByteHandler.deinit()
{
  unint64_t v1 = *v0;
  sub_1000671F0(v0[2]);
  (*(void (**)(char *))(*(void *)(*(void *)(v1 + 80) - 8LL) + 8LL))((char *)v0 + *(void *)(*v0 + 104));
  sub_100067F24();
  sub_10001945C();
}

uint64_t MessageToByteHandler.__deallocating_deinit()
{
  return sub_100066DB0(MessageToByteHandler.deinit);
}

uint64_t sub_100066DB0(void (*a1)(void))
{
  return swift_deallocClassInstance( v1,  *(unsigned int *)(*(void *)v1 + 48LL),  *(unsigned __int16 *)(*(void *)v1 + 52LL));
}

void MessageToByteHandler.write(context:data:promise:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4 = v3;
  uint64_t v31 = a3;
  uint64_t v7 = *v4;
  uint64_t v8 = *(void *)(*v4 + 80);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(a1);
  __int16 v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(v7 + 88);
  swift_getAssociatedTypeWitness( 0LL,  v12,  v8,  &protocol requirements base descriptor for MessageToByteEncoder,  &associated type descriptor for MessageToByteEncoder.OutboundIn);
  sub_100067F88();
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v27 - v16;
  unint64_t v18 = v4[2];
  switch(v18)
  {
    case 1uLL:
      uint64_t v28 = v15;
      uint64_t v29 = v14;
      uint64_t v30 = a1;
      uint64_t WitnessTable = swift_getWitnessTable(protocol conformance descriptor for MessageToByteHandler<A>, v7);
      ChannelOutboundHandler.unwrapOutboundIn(_:)(a2, v7, WitnessTable, (uint64_t)v17);
      uint64_t v20 = (uint64_t *)((char *)v4 + *(void *)(*v4 + 112));
      sub_100035224((uint64_t)v20, (uint64_t)v36);
      if (!*v20)
      {
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
        return;
      }

      if ((swift_isUniquelyReferenced_nonNull_native(*v20) & 1) == 0)
      {
        sub_10005B858(*(_DWORD *)(*v20 + 16LL));
        uint64_t v21 = *v20;
        *uint64_t v20 = v22;
        swift_release(v21);
      }

      *((_DWORD *)v20 + 4) = *(_DWORD *)(*v20 + 16LL);
      *((_WORD *)v20 + 10) = 0;
      *((_BYTE *)v20 + 22) = 0;
      v20[1] = 0LL;
      swift_endAccess(v36);
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, (char *)v4 + *(void *)(*v4 + 104), v8);
      sub_100035224((uint64_t)v20, (uint64_t)v36);
      if (!*v20) {
        goto LABEL_18;
      }
      (*(void (**)(char *, void *, uint64_t, uint64_t))(v12 + 16))(v17, v20, v8, v12);
      swift_endAccess(v36);
      sub_100067F04();
      if (!*v20) {
        goto LABEL_19;
      }
      char v23 = *((_BYTE *)v20 + 22);
      __int16 v24 = *((_WORD *)v20 + 10);
      int v25 = *((_DWORD *)v20 + 4);
      uint64_t v26 = v20[1];
      v32[0] = *v20;
      v32[1] = v26;
      int v33 = v25;
      __int16 v34 = v24;
      char v35 = v23;
      _EmittingChannelHandler.wrapOutboundOut(_:)( (uint64_t)v32,  v7,  (uint64_t)&protocol witness table for MessageToByteHandler<A>);
      ChannelHandlerContext.write(_:promise:)();
      sub_1000324E8((uint64_t)v36);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v17, v29);
LABEL_15:
      sub_10002A580();
      return;
    case 2uLL:
      goto LABEL_15;
    case 0uLL:
      __break(1u);
      goto LABEL_17;
  }

  if (v31)
  {
    sub_10002A710();
    sub_100067F4C();
  }

  else
  {
    sub_10002A710();
  }

  sub_100067FA0();
  sub_1000671F0(v18);
}

uint64_t MessageToByteHandler.handlerAdded(context:)()
{
  uint64_t v1 = v0;
  if (*(void *)(v0 + 16))
  {
    __break(1u);
  }

  else
  {
    *(void *)(v0 + 16) = 1LL;
    sub_1000671F0(0LL);
    uint64_t v2 = sub_100094338();
    uint64_t v4 = v3;
    uint64_t ObjectType = swift_getObjectType(v2);
    uint64_t v6 = (uint64_t (*)(void))(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(ObjectType, v4);
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    uint64_t v12 = v11;
    swift_unknownObjectRelease(v2);
    type metadata accessor for ByteBuffer._Storage();
    static ByteBuffer._Storage.reallocated(minimumCapacity:allocator:)(256, v6, v8, v10, v12);
    uint64_t v14 = v13;
    LODWORD(v6) = *(_DWORD *)(v13 + 16);
    uint64_t v15 = v1 + *(void *)(*(void *)v1 + 112LL);
    sub_10002A718(v15, (uint64_t)v18, 1LL);
    uint64_t v16 = *(void *)v15;
    *(void *)uint64_t v15 = v14;
    *(void *)(v15 + 8) = 0LL;
    *(_BYTE *)(v15 + 22) = 0;
    *(_WORD *)(v15 + 20) = 0;
    *(_DWORD *)(v15 + 16) = (_DWORD)v6;
    return swift_release(v16);
  }

  return result;
}

uint64_t MessageToByteHandler.handlerRemoved(context:)()
{
  unint64_t v1 = v0[2];
  v0[2] = 2LL;
  sub_1000671F0(v1);
  uint64_t v2 = (void *)((char *)v0 + *(void *)(*v0 + 112LL));
  sub_10002A718((uint64_t)v2, (uint64_t)v5, 1LL);
  uint64_t v3 = *v2;
  *uint64_t v2 = 0LL;
  v2[1] = 0LL;
  *(uint64_t *)((char *)v2 + 15) = 0LL;
  return swift_release(v3);
}

unint64_t sub_1000671F0(unint64_t result)
{
  if (result >= 3) {
    return swift_errorRelease(result);
  }
  return result;
}

uint64_t sub_100067200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    swift_release(a2);
    return swift_release(a5);
  }

  return result;
}

uint64_t sub_100067230(uint64_t a1)
{
  uint64_t v2 = sub_1000175B0(&qword_1002AC538);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_100067270()
{
  unint64_t result = qword_1002AC548;
  if (!qword_1002AC548)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ByteToMessageDecoderError,  &type metadata for ByteToMessageDecoderError);
    atomic_store(result, (unint64_t *)&qword_1002AC548);
  }

  return result;
}

unint64_t sub_1000672AC(unint64_t result)
{
  if (result >= 3) {
    return swift_errorRetain(result);
  }
  return result;
}

uint64_t sub_1000672BC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1000672F0()
{
}

unint64_t sub_100067300()
{
  unint64_t result = qword_1002AC550;
  if (!qword_1002AC550)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DecodingState, &type metadata for DecodingState);
    atomic_store(result, (unint64_t *)&qword_1002AC550);
  }

  return result;
}

uint64_t sub_10006733C(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> ByteToMessageHandler<A>, a2);
  *(void *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for DecodingState()
{
}

uint64_t sub_10006738C(uint64_t a1, uint64_t a2)
{
  if (a1 < 0) {
    a2 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    swift_errorRetain(a1);
  }
  return swift_retain(a2);
}

uint64_t destroy for ByteToMessageDecoderError(uint64_t *a1)
{
  return sub_1000673E0(*a1, a1[1]);
}

uint64_t sub_1000673E0(uint64_t a1, uint64_t a2)
{
  if (a1 < 0) {
    a2 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    swift_errorRelease(a1);
  }
  return swift_release(a2);
}

uint64_t initializeWithCopy for ByteToMessageDecoderError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  int v7 = *(_DWORD *)(a2 + 24);
  uint64_t v6 = a2 + 24;
  char v8 = *(_BYTE *)(v6 + 6);
  __int16 v9 = *(_WORD *)(v6 + 4);
  sub_10006738C(v3, v4);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 30) = v8;
  *(_WORD *)(a1 + 28) = v9;
  *(_DWORD *)(a1 + 24) = v7;
  return a1;
}

uint64_t assignWithCopy for ByteToMessageDecoderError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  int v7 = *(_DWORD *)(a2 + 24);
  uint64_t v6 = a2 + 24;
  char v8 = *(_BYTE *)(v6 + 6);
  __int16 v9 = *(_WORD *)(v6 + 4);
  sub_10006738C(v3, v4);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 30) = v8;
  *(_WORD *)(a1 + 28) = v9;
  sub_1000673E0(v10, v11);
  return a1;
}

__n128 initializeWithTake for ByteToMessageDecoderError(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 15) = *(_OWORD *)(a2 + 15);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ByteToMessageDecoderError(uint64_t a1, __int128 *a2)
{
  uint64_t v3 = *((void *)a2 + 2);
  __int128 v4 = *a2;
  int v7 = *((_DWORD *)a2 + 6);
  uint64_t v5 = (uint64_t)a2 + 24;
  int v6 = v7;
  LOWORD(v7) = *(_WORD *)(v5 + 4);
  char v8 = *(_BYTE *)(v5 + 6);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 24) = v6;
  *(_WORD *)(a1 + 28) = v7;
  *(_BYTE *)(a1 + 30) = v8;
  sub_1000673E0(v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ByteToMessageDecoderError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7F && *(_BYTE *)(a1 + 31))
    {
      unsigned int v2 = *(_DWORD *)a1 + 126;
    }

    else
    {
      unsigned int v2 = (((*(void *)a1 >> 57) >> 6) | (2 * ((*(void *)a1 >> 57) & 0x38 | *(void *)a1 & 7))) ^ 0x7F;
      if (v2 >= 0x7E) {
        unsigned int v2 = -1;
      }
    }
  }

  else
  {
    unsigned int v2 = -1;
  }

  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for ByteToMessageDecoderError( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_BYTE *)(result + 30) = 0;
    *(_WORD *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 127;
    if (a3 >= 0x7F) {
      *(_BYTE *)(result + 31) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7F) {
      *(_BYTE *)(result + 31) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(void *)(result + 8) = 0LL;
      *(void *)(result + 16) = 0LL;
      *(void *)__n128 result = (v3 | (v3 << 57)) & 0xF000000000000007LL;
      *(void *)(result + 23) = 0LL;
    }
  }

  return result;
}

void type metadata accessor for ByteToMessageDecoderError()
{
}

void type metadata accessor for ByteToMessageDecoderError.PayloadTooLargeError()
{
}

uint64_t sub_100067678(uint64_t a1)
{
  uint64_t result = type metadata accessor for Optional(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "\t";
    v4[2] = &unk_1001F87C0;
    v4[3] = &unk_1001F87D8;
    v4[4] = &unk_1001F87F0;
    v4[5] = &unk_1001F8808;
    v4[6] = &unk_1001F8820;
    v4[7] = &unk_1001F8838;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 8LL, v4, a1 + 96);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for ByteToMessageHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ByteToMessageHandler);
}

uint64_t sub_100067738(uint64_t a1)
{
  v4[0] = &unk_1001F87D8;
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    v4[2] = &unk_1001F88A8;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 3LL, v4, a1 + 96);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for MessageToByteHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MessageToByteHandler);
}

uint64_t sub_1000677C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16LL);
}

void *initializeWithTake for SocketAddress(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t type metadata accessor for MessageToByteHandler.State( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MessageToByteHandler.State);
}

uint64_t destroy for B2MDBuffer(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 32));
}

uint64_t initializeWithCopy for B2MDBuffer(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 51) = *(_DWORD *)(a2 + 51);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t assignWithCopy for B2MDBuffer(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_retain(v4);
  swift_release(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v6;
  swift_retain(v6);
  swift_release(v7);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(_BYTE *)(a1 + 54) = *(_BYTE *)(a2 + 54);
  return a1;
}

__n128 initializeWithTake for B2MDBuffer(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 47) = *(void *)(a2 + 47);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for B2MDBuffer(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release(v4);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release(v5);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(_BYTE *)(a1 + 54) = *(_BYTE *)(a2 + 54);
  return a1;
}

uint64_t getEnumTagSinglePayload for B2MDBuffer(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 55))
    {
      LODWORD(sub_10006142C(v1, v0, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(sub_10006142C(v1, v0, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(sub_10006142C(v1, v0, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for B2MDBuffer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 54) = 0;
    *(_WORD *)(result + 52) = 0;
    *(_DWORD *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 55) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 55) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for B2MDBuffer()
{
  return &type metadata for B2MDBuffer;
}

uint64_t sub_100067A58(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_100067AA4 + 4 * byte_1001F84B5[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100067AD8 + 4 * asc_1001F84B0[v4]))();
}

uint64_t sub_100067AD8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100067AE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100067AE8LL);
  }
  return result;
}

uint64_t sub_100067AF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100067AFCLL);
  }
  *(_BYTE *)__n128 result = a2 + 4;
  return result;
}

uint64_t sub_100067B00(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100067B08(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for ByteToMessageHandler.RemovalState( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ByteToMessageHandler.RemovalState);
}

void *sub_100067B20(void *a1, void *a2)
{
  uint64_t v3 = *a2;
  if (*a2 >= 0xFFFFFFFFuLL) {
    swift_errorRetain(*a2);
  }
  *a1 = v3;
  return a1;
}

unint64_t sub_100067B5C(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_errorRelease(result);
  }
  return result;
}

void sub_100067B74(uint64_t a1)
{
  if (v6)
  {
    sub_100067F94();
    if (v6)
    {
      swift_errorRetain(v2);
      uint64_t v5 = *v1;
      *__int16 v1 = v2;
      swift_errorRelease(v5);
    }

    else
    {
      uint64_t v7 = v4;
      swift_errorRelease(v3);
      *__int16 v1 = *v7;
    }
  }

  else
  {
    sub_100067F94();
    if (v6) {
      swift_errorRetain(v2);
    }
    *__int16 v1 = v2;
  }

  sub_1000193B8();
}

void sub_100067BE0(uint64_t a1)
{
  if (!v3)
  {
    sub_100067F94();
LABEL_6:
    *__int16 v1 = v2;
    goto LABEL_7;
  }

  sub_100067F94();
  if (!v3)
  {
    swift_errorRelease(v4);
    goto LABEL_6;
  }

  *__int16 v1 = v2;
  swift_errorRelease(v4);
LABEL_7:
  sub_10001945C();
}

uint64_t sub_100067C24(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFD && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  uint64_t v3 = *a1;
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100067C80(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 2;
    }
  }

  return result;
}

uint64_t sub_100067CD0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  return (v1 + 1);
}

void *sub_100067CE8(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }

  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }

  *unint64_t result = v2;
  return result;
}

uint64_t type metadata accessor for ByteToMessageHandler.State( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ByteToMessageHandler.State);
}

uint64_t sub_100067D14(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1001F8950, a1);
}

BOOL sub_100067D24(uint64_t a1, unsigned int a2)
{
  return ByteToMessageDecoder.shouldReclaimBytes(buffer:)(a1, a2);
}

void sub_100067D3C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_100035374(a1, a2, a3);
  sub_1000354AC(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 40LL));
  sub_10001945C();
}

unint64_t sub_100067D68()
{
  unint64_t result = qword_1002AC890;
  if (!qword_1002AC890)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ByteToMessageDecoderError.PayloadTooLargeError,  &type metadata for ByteToMessageDecoderError.PayloadTooLargeError);
    atomic_store(result, (unint64_t *)&qword_1002AC890);
  }

  return result;
}

void sub_100067DA4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_100035374(a1, a2, a3);
  sub_1000354AC(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  sub_10001945C();
}

uint64_t _s25ASOctaneSupportXPCService13DecodingStateOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100067E1C + 4 * byte_1001F84BF[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100067E50 + 4 * byte_1001F84BA[v4]))();
}

uint64_t sub_100067E50(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100067E58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100067E60LL);
  }
  return result;
}

uint64_t sub_100067E6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100067E74LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100067E78(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100067E80(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for B2MDBuffer.State()
{
  return &type metadata for B2MDBuffer.State;
}

unint64_t sub_100067EA0()
{
  unint64_t result = qword_1002AC898;
  if (!qword_1002AC898)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F89B8, &type metadata for B2MDBuffer.State);
    atomic_store(result, (unint64_t *)&qword_1002AC898);
  }

  return result;
}

uint64_t sub_100067EF4()
{
  return swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
}

uint64_t sub_100067F04()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_100067F14@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v3, v1, v2);
}

uint64_t sub_100067F24()
{
  return swift_release(*(void *)(v0 + *(void *)(*(void *)v0 + 112LL)));
}

uint64_t sub_100067F34(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_100067F4C()
{
  return sub_100098A70(v1, 1LL, v0);
}

uint64_t sub_100067F5C(uint64_t a1, uint64_t a2)
{
  return sub_10001762C(a1, a2, 1LL, v2);
}

void sub_100067F68()
{
  *(_BYTE *)(v0 + *(void *)(*(void *)v0 + 144LL)) = 1;
}

uint64_t sub_100067F7C(uint64_t a1)
{
  return sub_10001D158(a1, 1LL, v1);
}

  ;
}

  ;
}

void sub_100067FA0()
{
}

uint64_t sub_100067FAC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100067FCC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 24) = v3;
  return result;
}

void type metadata accessor for UnsafeControlMessageStorage()
{
}

void sub_100068004()
{
}

BOOL sub_100068030()
{
  return *(void *)(v0 + 24) == *(void *)(v0 + 32);
}

BOOL sub_100068040()
{
  __int128 v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  v3[2] = v0[2];
  return sub_10000BF90((uint64_t)v3) == 0;
}

uint64_t sub_1000680A4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - a2;
  if (!a2) {
    uint64_t v3 = 0LL;
  }
  if (result)
  {
    if (result != -1 || v3 != 0x8000000000000000LL) {
      return v3 / result == 0;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

BOOL sub_1000680DC(uint64_t a1)
{
  return *(void *)(a1 + 16) == 0LL;
}

unint64_t sub_100068100(uint64_t a1)
{
  unint64_t result = sub_10000C040(4LL);
  if ((result - 0x2000000000000000LL) >> 62 == 3)
  {
    uint64_t v3 = 4 * result;
    if ((unsigned __int128)((uint64_t)(4 * result) * (__int128)a1) >> 64 == (uint64_t)(4 * result * a1) >> 63)
    {
      swift_slowAlloc(4 * result * a1, -1LL);
      return v3;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_100068174(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result >= a2)
  {
    BOOL v4 = __OFSUB__(result, a3);
    BOOL v3 = result - a3 < 0;
  }

  else
  {
    BOOL v4 = 0;
    BOOL v3 = 0;
  }

  if (v3 == v4) {
    __break(1u);
  }
  return result;
}

unint64_t sub_100068188(unint64_t result, unint64_t a2, unint64_t a3)
{
  if (!result) {
    goto LABEL_9;
  }
  if (!a2)
  {
LABEL_10:
    __break(1u);
    return result;
  }

  if (result < a2)
  {
    __break(1u);
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if (a3 && result >= a3) {
    goto LABEL_8;
  }
  return result;
}

unint64_t sub_1000681B8( unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if (result)
  {
    if (!a3)
    {
LABEL_10:
      __break(1u);
      goto LABEL_11;
    }

    if (result < a3)
    {
      __break(1u);
LABEL_9:
      __break(1u);
      goto LABEL_10;
    }
  }

  if (!a4) {
    return result;
  }
  if (!a2)
  {
LABEL_11:
    __break(1u);
    return result;
  }

  if (a4 < a2) {
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1000681EC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result < a3 || a4 < a2) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100068200()
{
  __int128 v1 = v0[1];
  __int128 v8 = *v0;
  __int128 v9 = v1;
  __int128 v10 = v0[2];
  uint64_t v2 = sub_10000BF90((uint64_t)&v8);
  if (!v2) {
    return 0LL;
  }
  BOOL v3 = (unsigned int *)v2;
  uint64_t v4 = 0LL;
  do
  {
    uint64_t v5 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      __break(1u);
    }
    __int128 v6 = v0[1];
    __int128 v8 = *v0;
    __int128 v9 = v6;
    __int128 v10 = v0[2];
    BOOL v3 = (unsigned int *)sub_10000BFC0((uint64_t)&v8, v3);
    ++v4;
  }

  while (v3);
  return v5;
}

void *sub_1000682B4()
{
  return sub_100017028(v0);
}

void sub_1000682C0()
{
}

void sub_1000682EC(uint64_t a1)
{
}

uint64_t sub_100068318(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result * a2;
  if ((unsigned __int128)(result * (__int128)a2) >> 64 != (result * a2) >> 63)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v4 = result + 1;
  if (__OFADD__(result, 1LL))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if ((unsigned __int128)(v4 * (__int128)a2) >> 64 != (v4 * a2) >> 63)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (v4 * a2 < v3)
  {
LABEL_11:
    __break(1u);
    return result;
  }

  uint64_t v5 = a3 + v3;
  if (a3) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100068370(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - a2;
  if (!a2) {
    uint64_t v3 = 0LL;
  }
  if (result)
  {
    if (result != -1 || v3 != 0x8000000000000000LL) {
      return v3 / result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void sub_1000683A0(void *a1@<X8>)
{
  *a1 = 0LL;
}

void sub_1000683A8(uint64_t *a1@<X8>)
{
  *a1 = sub_100068370(*v1, v1[1], v1[2]);
  sub_10001945C();
}

void (*sub_1000683D0(void *a1, uint64_t *a2))(void *a1)
{
  uint64_t v5 = malloc(0x38uLL);
  *a1 = v5;
  __int128 v6 = sub_100068458((uint64_t)v5, *a2, *v2);
  v5[4] = v7;
  v5 += 4;
  v5[1] = v8;
  v5[2] = v6;
  return sub_10006842C;
}

void sub_10006842C(void *a1)
{
  __int128 v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 48LL))(*a1);
  free(v1);
}

uint64_t (*sub_100068458(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  if ((unsigned __int128)(a2 * (__int128)a3) >> 64 != (a2 * a3) >> 63)
  {
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v3 = a2 + 1;
  if (__OFADD__(a2, 1LL))
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if ((unsigned __int128)(v3 * (__int128)a3) >> 64 != (v3 * a3) >> 63)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if (v3 * a3 >= a2 * a3) {
    return debugOnly(_:);
  }
LABEL_9:
  __break(1u);
  return result;
}

double sub_1000684B8@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  double result = *(double *)v6;
  __int128 v5 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v5;
  *(void *)(a2 + 32) = v7;
  return result;
}

unint64_t sub_100068508@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v7 = v3[1];
  v10[0] = *v3;
  v10[1] = v7;
  v10[2] = v3[2];
  unint64_t result = sub_10000BF90((uint64_t)v10);
  if (!a1) {
    goto LABEL_4;
  }
  if (result)
  {
    if (result > a1) {
      __break(1u);
    }
LABEL_4:
    __int128 v9 = v3[1];
    *(_OWORD *)(a3 + 16) = *v3;
    *(_OWORD *)(a3 + 32) = v9;
    *(_OWORD *)(a3 + 48) = v3[2];
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = a2;
    return result;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000685AC@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v6 = a5 - a4;
  if (!a4) {
    uint64_t v6 = 0LL;
  }
  if (!a3)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (a3 == -1 && v6 == 0x8000000000000000LL) {
    goto LABEL_16;
  }
  uint64_t v8 = v6 / a3;
  if (v8 < 0) {
    goto LABEL_13;
  }
  if ((result & 0x8000000000000000LL) == 0)
  {
    if (v8 >= a2)
    {
      *a6 = result;
      a6[1] = a2;
      a6[2] = a3;
      a6[3] = a4;
      a6[4] = a5;
      return result;
    }

    goto LABEL_15;
  }

uint64_t sub_100068604(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < 0 || *(void *)(a3 + 16) < a2)
  {
    __break(1u);
  }

  else
  {
    uint64_t v3 = result;
    swift_bridgeObjectRetain(a3);
    return v3;
  }

  return result;
}

double sub_100068660@<D0>(uint64_t a1@<X8>)
{
  double result = *(double *)v5;
  __int128 v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v6;
  return result;
}

uint64_t sub_1000686A8@<X0>(uint64_t a1@<X8>)
{
  __int128 v3 = v1[1];
  *(_OWORD *)a1 = *v1;
  *(_OWORD *)(a1 + 16) = v3;
  __int128 v5 = *v1;
  __int128 v4 = v1[1];
  *(_OWORD *)(a1 + 32) = v1[2];
  v7[0] = v5;
  v7[1] = v4;
  v7[2] = v1[2];
  uint64_t result = sub_10000BF90((uint64_t)v7);
  *(void *)(a1 + 48) = result;
  *(void *)(a1 + 56) = 0LL;
  return result;
}

uint64_t sub_100068724@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4 = a3 - a2;
  if (!a2) {
    uint64_t v4 = 0LL;
  }
  if (result)
  {
    if (result != -1 || v4 != 0x8000000000000000LL)
    {
      *a4 = result;
      a4[1] = a2;
      a4[2] = a3;
      a4[3] = 0LL;
      a4[4] = v4 / result;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_100068760(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_100068790()
{
  return sub_1000680A4(*v0, v0[1], v0[2]);
}

uint64_t sub_10006879C()
{
  return sub_10005B9D4(*v0, v0[1], v0[2]);
}

void sub_1000687A8(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t sub_1000687B8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_1000687E8(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000687E8(uint64_t result, uint64_t a2)
{
  if (a2 < 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }

  if (a2)
  {
    unint64_t v2 = result ^ 0x7FFFFFFFFFFFFFFFLL;
    unint64_t v3 = a2 - 1;
    while (v2 > v3)
    {
      ++result;
      if (!--a2) {
        return result;
      }
    }

    __break(1u);
    goto LABEL_8;
  }

  return result;
}

unsigned int *sub_100068818(unsigned int *a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (v3)
  {
    while (1)
    {
      __int128 v5 = v2[1];
      v7[0] = *v2;
      v7[1] = v5;
      v7[2] = v2[2];
      if (!a1) {
        break;
      }
      a1 = (unsigned int *)sub_10000BFC0((uint64_t)v7, a1);
      if (!--v3) {
        return a1;
      }
    }

uint64_t sub_1000688A8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_1000689AC(*a1, a2, *a3);
  *(void *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

unsigned int *sub_1000688E4(unsigned int *a1, uint64_t a2, unsigned int *a3)
{
  if (a2 < 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
  }

  for (uint64_t i = a2; i; --i)
  {
    if (a1)
    {
      if (a3 && a1 == a3) {
        return 0LL;
      }
    }

    else if (!a3)
    {
      return 0LL;
    }

    __int128 v7 = v3[1];
    v9[0] = *v3;
    v9[1] = v7;
    v9[2] = v3[2];
    if (!a1) {
      goto LABEL_14;
    }
    a1 = (unsigned int *)sub_10000BFC0((uint64_t)v9, a1);
  }

  return a1;
}

uint64_t sub_1000689AC(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 < 0)
  {
LABEL_10:
    __break(1u);
    return result;
  }

  if (a2)
  {
    while (1)
    {
      if (a3 == result) {
        return 0LL;
      }
      if (result == 0x7FFFFFFFFFFFFFFFLL) {
        break;
      }
      ++result;
      if (!--a2) {
        return result;
      }
    }

    __break(1u);
    goto LABEL_10;
  }

  return result;
}

uint64_t sub_1000689F8(uint64_t *a1, uint64_t *a2)
{
  return sub_100068B1C(*a1, *a2);
}

unsigned int *sub_100068A0C(unsigned int *result, char *a2)
{
  uint64_t v4 = result;
  if (!a2) {
    goto LABEL_15;
  }
  if (result)
  {
    if (a2 < (char *)result)
    {
      __break(1u);
LABEL_19:
      __break(1u);
    }

    if (result != (unsigned int *)a2)
    {
      do
      {
        uint64_t v5 = v2[5];
        uint64_t v6 = v2[4];
        int v7 = *((_DWORD *)v2 + 6);
        uint64_t v8 = v2[2];
        int v9 = *((_DWORD *)v2 + 2);
        uint64_t v10 = 1LL;
        unint64_t v2 = (uint64_t *)*v2;
        do
        {
          uint64_t v13 = v2;
          int v14 = v9;
          uint64_t v15 = v8;
          int v16 = v7;
          uint64_t v17 = v6;
          uint64_t v18 = v5;
          if (!v4) {
            goto LABEL_19;
          }
          uint64_t v11 = sub_10000BFC0((uint64_t)&v13, v4);
          uint64_t v4 = (unsigned int *)v11;
          if (v11)
          {
            if (a2 && v11 == a2) {
              return (unsigned int *)v10;
            }
          }

          else if (!a2)
          {
            return (unsigned int *)v10;
          }
        }

        while (!__OFADD__(v10++, 1LL));
        __break(1u);
LABEL_15:
        ;
      }

      while (v4);
    }

    return 0LL;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100068B1C(uint64_t result, uint64_t a2)
{
  if (a2 < result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (a2 == result) {
    return static NIODeadline.distantPast.getter();
  }
  uint64_t v2 = result;
  uint64_t v3 = a2 - result;
  if (a2 > result)
  {
    uint64_t result = 0LL;
    unint64_t v4 = ~v2 + a2;
    while (v4 <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (v3 == ++result) {
        return result;
      }
    }

    __break(1u);
    goto LABEL_10;
  }

uint64_t sub_100068B6C(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_100068B84( a1,  a2,  a3,  a4,  (uint64_t (*)(void, void, void, void, void, void))sub_100068174);
}

uint64_t sub_100068B78(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_100068B84( a1,  a2,  a3,  a4,  (uint64_t (*)(void, void, void, void, void, void))sub_100061E90);
}

uint64_t sub_100068B84( void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5(*a1, *a2, a2[1], *v5, v5[1], v5[2]);
}

uint64_t sub_100068BA0(uint64_t *a1, uint64_t *a2)
{
  return sub_1000681EC(*a1, a1[1], *a2, a2[1]);
}

__n128 sub_100068BBC@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v2 = v1[1].n128_u64[0];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u64[1] = 0LL;
  return result;
}

uint64_t sub_100068BD0()
{
  return sub_1000682BC(*v0, v0[1], v0[2]);
}

uint64_t sub_100068BDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000680F0(a1, a2, a3, *v3, v3[1], v3[2]);
}

unint64_t sub_100068BEC()
{
  unint64_t result = qword_1002AC8B0;
  if (!qword_1002AC8B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F8A2C, &unk_10027AC80);
    atomic_store(result, (unint64_t *)&qword_1002AC8B0);
  }

  return result;
}

void sub_100068C28()
{
}

void sub_100068C54()
{
}

void sub_100068C80()
{
}

BOOL sub_100068CAC(unint64_t a1, unint64_t a2)
{
  if (a2) {
    BOOL v2 = a1 < a2;
  }
  else {
    BOOL v2 = 1;
  }
  return a1 && v2;
}

uint64_t sub_100068CCC(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2 && a1 == a2) {
      return 1LL;
    }
  }

  else if (!a2)
  {
    return 1LL;
  }

  return 0LL;
}

uint64_t sub_100068CF0(uint64_t *a1, uint64_t *a2)
{
  return sub_100068CCC(*a1, *a2);
}

BOOL sub_100068CFC(unint64_t *a1, unint64_t *a2)
{
  return sub_100068CAC(*a1, *a2);
}

uint64_t sub_100068D08(unint64_t *a1, unint64_t *a2)
{
  return sub_1001A8EA8(*a1, *a2);
}

uint64_t sub_100068D14(unint64_t *a1, unint64_t *a2)
{
  return sub_10006BA40(*a1, *a2);
}

BOOL sub_100068D20(unint64_t *a1, unint64_t *a2)
{
  return sub_100068D2C(*a1, *a2);
}

BOOL sub_100068D2C(unint64_t a1, unint64_t a2)
{
  if (a1) {
    BOOL v2 = a2 < a1;
  }
  else {
    BOOL v2 = 1;
  }
  return a2 && v2;
}

uint64_t sub_100068D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_100069A4C(a1, a2);
  sub_1001AA2D4(v2, v3);
  return v4 & 1;
}

uint64_t sub_100068D70(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_100069A4C(a1, a2);
  return static ScheduledTask.< infix(_:_:)(v2, v3) & 1;
}

BOOL sub_100068D94(uint64_t a1, uint64_t a2)
{
  return a2 < a1;
}

void sub_100068DA0()
{
}

void sub_100068DE8()
{
  if (!v0) {
    __break(1u);
  }
  sub_10000BFC0((uint64_t)&v1, v0);
  sub_100069A2C();
}

uint64_t sub_100068E3C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 4);
    sub_10011D170((unsigned int *)result);
    return v1;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_100068E84(void *a1@<X8>)
{
  *a1 = v2;
  sub_10001945C();
}

uint64_t (*sub_100068EA4(uint64_t a1, uint64_t *a2))(void)
{
  *(void *)a1 = sub_100068E3C(*a2);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5 & 1;
  return debugOnly(_:);
}

unint64_t sub_100068EE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100068508(*(void *)a1, *(void *)(a1 + 8), a2);
}

uint64_t sub_100068F28@<X0>(uint64_t a1@<X8>)
{
  return sub_1000686A8(a1);
}

BOOL sub_100068F60()
{
  return sub_100068040();
}

void sub_100068F9C()
{
}

unsigned int *sub_100068FC0@<X0>(unsigned int **a1@<X0>, uint64_t a2@<X1>, unsigned int **a3@<X8>)
{
  unint64_t result = sub_100068818(*a1, a2);
  *a3 = result;
  return result;
}

unsigned int *sub_100069004@<X0>( unsigned int **a1@<X0>, uint64_t a2@<X1>, unsigned int **a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = sub_1000688E4(*a1, a2, *a3);
  *(void *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

void sub_100069054()
{
}

unint64_t sub_100069080(unint64_t *a1, unint64_t *a2)
{
  return sub_100068188(*a1, *a2, a2[1]);
}

unint64_t sub_1000690C4(unint64_t *a1, unint64_t *a2)
{
  return sub_100061EA4(*a1, *a2, a2[1]);
}

unint64_t sub_100069108(unint64_t *a1, unint64_t *a2)
{
  return sub_1000681B8(*a1, a1[1], *a2, a2[1]);
}

void sub_100069150(void *a1@<X8>)
{
  *a1 = v2;
  sub_10001945C();
}

char *sub_100069174(unsigned int **a1)
{
  int v2 = *((_DWORD *)v1 + 2);
  uint64_t v3 = v1[2];
  int v4 = *((_DWORD *)v1 + 6);
  uint64_t v5 = v1[4];
  char v6 = *a1;
  uint64_t v9 = *v1;
  int v10 = v2;
  uint64_t v11 = v3;
  int v12 = v4;
  uint64_t v13 = v5;
  uint64_t v14 = v1[5];
  if (!v6) {
    __break(1u);
  }
  unint64_t result = sub_10000BFC0((uint64_t)&v9, v6);
  *a1 = (unsigned int *)result;
  return result;
}

uint64_t sub_10006920C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  int v4 = *((_DWORD *)v1 + 2);
  uint64_t v5 = v1[2];
  int v6 = *((_DWORD *)v1 + 6);
  uint64_t v7 = v1[4];
  int v9 = *((_DWORD *)v1 + 10);
  int v8 = *((_DWORD *)v1 + 11);
  uint64_t v11 = v3;
  int v12 = v4;
  uint64_t v13 = v5;
  int v14 = v6;
  uint64_t v15 = v7;
  int v16 = v9;
  int v17 = v8;
  uint64_t result = sub_10000BF90((uint64_t)&v11);
  *(void *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(_DWORD *)(a1 + 40) = v9;
  *(_DWORD *)(a1 + 44) = v8;
  *(void *)(a1 + 48) = result;
  return result;
}

uint64_t sub_1000692C8()
{
  return sub_100068200();
}

void *sub_100069300()
{
  return sub_1000682B4();
}

void sub_100069338()
{
}

unint64_t sub_100069360()
{
  unint64_t result = qword_1002AC8E8;
  if (!qword_1002AC8E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F8B74, &unk_10027ADB0);
    atomic_store(result, (unint64_t *)&qword_1002AC8E8);
  }

  return result;
}

unint64_t sub_1000693A0()
{
  unint64_t result = qword_1002AC8F0;
  if (!qword_1002AC8F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F8CBC, &unk_10027ACA8);
    atomic_store(result, (unint64_t *)&qword_1002AC8F0);
  }

  return result;
}

void sub_1000693DC()
{
}

void sub_100069408()
{
}

void sub_100069434(unint64_t *a1, uint64_t *a2, const char *a3)
{
  if (!*a1)
  {
    uint64_t v5 = sub_100018EC0(a2);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }

  sub_10001945C();
}

unint64_t sub_100069474()
{
  unint64_t result = qword_1002AC918;
  if (!qword_1002AC918)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F8D04, &unk_10027ACA8);
    atomic_store(result, (unint64_t *)&qword_1002AC918);
  }

  return result;
}

uint64_t sub_1000694B0(__int128 *a1)
{
  __int128 v1 = a1[1];
  __int128 v27 = *a1;
  __int128 v28 = v1;
  __int128 v29 = a1[2];
  __int128 __dst = v27;
  __int128 v25 = v1;
  __int128 v26 = v29;
  uint64_t v2 = sub_10000BF90((uint64_t)&__dst);
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = (unsigned int *)v2;
  uint64_t v4 = 0LL;
  unint64_t v23 = 0xF000000000000007LL;
  while (1)
  {
    unsigned int v5 = v3[1];
    unsigned int v6 = v3[2];
    uint64_t v7 = (_DWORD *)sub_10000C008((uint64_t)v3);
    uint64_t v8 = *v3;
    uint64_t v9 = sub_10000C038(0LL);
    BOOL v10 = __OFSUB__(v8, v9);
    int64_t v11 = v8 - v9;
    if (v10)
    {
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
    }

    __int128 __dst = v27;
    __int128 v25 = v28;
    __int128 v26 = v29;
    uint64_t v3 = (unsigned int *)sub_10000BFC0((uint64_t)&__dst, v3);
    if (v5) {
      break;
    }
    if (v6 == 27)
    {
      if (!v7 || v11 < 1) {
        goto LABEL_45;
      }
      int v16 = *(unsigned __int8 *)v7;
      goto LABEL_25;
    }

    if (qword_1002A8D70 != -1) {
      swift_once(&qword_1002A8D70, debugOnly(_:));
    }
    if (v6 == dword_1002EB9C0)
    {
      if (!v7) {
        goto LABEL_48;
      }
      int v19 = v7[2];
      uint64_t v20 = sub_1000175B0(&qword_1002AAFA8);
      uint64_t v21 = swift_allocObject(v20, 48LL, 7LL);
      *(_DWORD *)(v21 + 16) = 512;
      *(_DWORD *)(v21 + 20) = v19;
      *(void *)(v21 + 24) = 0LL;
      *(void *)(v21 + 32) = 0LL;
      *(void *)(v21 + 40) = 0xE000000000000000LL;
      sub_100029DF4(v23);
      unint64_t v23 = v21;
    }

void sub_100069878(char a1)
{
  __asm { BR              X10 }

uint64_t sub_10006989C()
{
  if (qword_1002A8D40 != -1) {
    swift_once(&qword_1002A8D40, sub_100171D64);
  }
  return dword_1002EB9A8;
}

void sub_100069974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if (a3 < 0) {
      __break(1u);
    }
  }

  else
  {
    _s25ASOctaneSupportXPCService17EventLoopIteratorVyACSayAA0dE0_pGcfC_0();
  }

void type metadata accessor for UnsafeControlMessageCollection.Index()
{
}

uint64_t sub_1000699A4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000699C4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 25) = v3;
  return result;
}

void type metadata accessor for UnsafeControlMessage()
{
}

void type metadata accessor for UnsafeControlMessageCollection()
{
}

__n128 sub_100069A14()
{
  return v0[2];
}

  ;
}

__n128 sub_100069A34@<Q0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 8) = a1;
  return v1[2];
}

uint64_t sub_100069A4C(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_100069A60(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_10006B910();
    sub_100032194();
    char v3 = v19;
    uint64_t v4 = (void **)(v1 + 48);
    do
    {
      uint64_t v5 = (uint64_t)*(v4 - 1);
      unsigned int v6 = *v4;
      v17[0] = *(v4 - 2);
      v17[1] = v5;
      v17[2] = v6;
      id v7 = v6;
      sub_10006BA14();
      id v8 = v7;
      uint64_t v9 = sub_1000175B0(&qword_1002AA470);
      uint64_t v10 = sub_1000175B0(&qword_1002AC968);
      sub_10006B934((uint64_t)v18, (uint64_t)v17, v9, v10);
      uint64_t v11 = v18[0];
      uint64_t v12 = v18[1];
      uint64_t v13 = v18[2];

      swift_bridgeObjectRelease();
      if ((sub_10006B92C() & 1) == 0)
      {
        sub_10006B9D8();
        sub_100032194();
        char v3 = v19;
      }

      unint64_t v14 = v3[2];
      if (v14 >= v3[3] >> 1)
      {
        sub_100032194();
        char v3 = v19;
      }

      v4 += 3;
      v3[2] = v14 + 1;
      uint64_t v15 = &v3[3 * v14];
      v15[4] = v11;
      v15[5] = v12;
      v15[6] = v13;
      --v2;
    }

    while (v2);
  }

  return v3;
}

void *sub_100069BA4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v12 = _swiftEmptyArrayStorage;
    sub_1000322E8();
    uint64_t v4 = (uint64_t *)(a1 + 32);
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v10 = *v4;
      sub_10006BA14();
      uint64_t v5 = sub_10006B9D0();
      uint64_t v6 = sub_1000175B0(&qword_1002AC960);
      sub_10006B934((uint64_t)&v11, (uint64_t)&v10, v5, v6);
      uint64_t v7 = v11;
      swift_bridgeObjectRelease();
      if ((sub_10006B92C() & 1) == 0)
      {
        sub_10006B9D8();
        sub_1000322E8();
        uint64_t v2 = v12;
      }

      unint64_t v8 = v2[2];
      if (v8 >= v2[3] >> 1)
      {
        sub_1000322E8();
        uint64_t v2 = v12;
      }

      v2[2] = v8 + 1;
      v2[v8 + 4] = v7;
      ++v4;
      --v1;
    }

    while (v1);
  }

  return v2;
}

void *sub_100069CCC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    sub_100032574();
    uint64_t v4 = (__int128 *)(a1 + 32);
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      __int128 v11 = *v4;
      uint64_t v5 = v11;
      swift_unknownObjectRetain_n(v11, 2LL);
      uint64_t v6 = sub_1000175B0(&qword_1002AA570);
      uint64_t v7 = sub_1000175B0(&qword_1002AC970);
      swift_dynamicCast(&v12, &v11, v6, v7, 7LL);
      __int128 v10 = v12;
      swift_unknownObjectRelease(v5);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_100032574();
        uint64_t v2 = v13;
      }

      unint64_t v8 = v2[2];
      if (v8 >= v2[3] >> 1)
      {
        sub_100032574();
        uint64_t v2 = v13;
      }

      v2[2] = v8 + 1;
      *(_OWORD *)&v2[2 * v8 + 4] = v10;
      ++v4;
      --v1;
    }

    while (v1);
  }

  return v2;
}

void sub_100069E18(unint64_t a1)
{
  if (a1 >> 62)
  {
    sub_10006B984();
    _CocoaArrayWrapper.endIndex.getter(v1);
    sub_10006BA20();
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (!v2)
  {
LABEL_14:
    sub_10006B958();
    return;
  }

  __int128 v11 = _swiftEmptyArrayStorage;
  sub_1000325C4();
  if ((v2 & 0x8000000000000000LL) == 0)
  {
    for (uint64_t i = 0LL; i != v2; ++i)
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v5 = (id)sub_10006BA08();
      }
      else {
        id v5 = *(id *)(a1 + 8 * i + 32);
      }
      id v9 = v5;
      unint64_t v6 = sub_10006B7FC();
      sub_10006B934((uint64_t)v10, (uint64_t)&v9, v6, (uint64_t)&type metadata for Any + 8);
      uint64_t v7 = v11;
      if ((sub_10006B92C() & 1) == 0)
      {
        sub_10006B9F4();
        uint64_t v7 = v11;
      }

      unint64_t v8 = v7[2];
      if (v8 >= v7[3] >> 1)
      {
        sub_10006B9F4();
        uint64_t v7 = v11;
      }

      v7[2] = v8 + 1;
      sub_100034728(v10, &v7[4 * v8 + 4]);
    }

    goto LABEL_14;
  }

  __break(1u);
}

void sub_100069F54(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    sub_10006B910();
    sub_1000325F8();
    uint64_t v4 = v1 + 40;
    do
    {
      sub_10006B9FC();
      sub_10006B9D0();
      uint64_t v5 = sub_10006B978();
      sub_10006B934((uint64_t)v11, (uint64_t)v10, v2, v5);
      if ((sub_10006B92C() & 1) == 0) {
        sub_10006B970();
      }
      sub_10006B948();
      if (v9) {
        sub_10006B970();
      }
      v4 += 16LL;
      sub_10006B9AC(v6, v7, v8);
      --v3;
    }

    while (v3);
  }

  sub_10006B8D0();
}

void sub_10006A024(uint64_t a1)
{
}

void sub_10006A030(uint64_t a1)
{
}

void sub_10006A03C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    __int128 v12 = _swiftEmptyArrayStorage;
    sub_1000325F8();
    uint64_t v5 = (char *)(a1 + 32);
    uint64_t v6 = _swiftEmptyArrayStorage;
    do
    {
      char v7 = *v5++;
      char v10 = v7;
      sub_10006B9D0();
      uint64_t v8 = sub_10006B978();
      sub_10006B934((uint64_t)v11, (uint64_t)&v10, v1, v8);
      if ((sub_10006B92C() & 1) == 0)
      {
        sub_10006B970();
        uint64_t v6 = v12;
      }

      sub_10006B948();
      if (v9)
      {
        sub_10006B970();
        uint64_t v6 = v12;
      }

      _OWORD v6[2] = v1;
      sub_10006B838((uint64_t)v11, (uint64_t)&v6[4 * v2 + 4]);
      --v3;
    }

    while (v3);
  }

  sub_10006B958();
}

void sub_10006A130(uint64_t a1)
{
}

void sub_10006A13C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    int v16 = _swiftEmptyArrayStorage;
    sub_1000325F8();
    uint64_t v6 = (_BYTE *)(a1 + 40);
    do
    {
      char v7 = *v6;
      uint64_t v13 = *((void *)v6 - 1);
      char v14 = v7;
      sub_1000175B0(a2);
      uint64_t v8 = sub_10006B978();
      sub_10006B934((uint64_t)v15, (uint64_t)&v13, v2, v8);
      if ((sub_10006B92C() & 1) == 0) {
        sub_10006B970();
      }
      sub_10006B948();
      if (v12) {
        sub_10006B970();
      }
      sub_10006B9AC(v9, v10, v11);
      v6 += 16;
      --v3;
    }

    while (v3);
  }

  sub_10006B8D0();
}

void sub_10006A22C(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    sub_10006B910();
    sub_1000325C4();
    uint64_t v5 = v10;
    uint64_t v6 = v1 + 40;
    do
    {
      sub_10006B9FC();
      sub_10006B934((uint64_t)v9, (uint64_t)v8, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Any + 8);
      if ((sub_10006B92C() & 1) == 0)
      {
        sub_10006B9F4();
        uint64_t v5 = v10;
      }

      sub_10006B948();
      if (v7)
      {
        sub_10006B9F4();
        uint64_t v5 = v10;
      }

      v6 += 16LL;
      *(void *)(v5 + 16) = v2;
      sub_100034728(v9, (_OWORD *)(v5 + 32 * v3 + 32));
      --v4;
    }

    while (v4);
  }

  sub_10006B8D0();
}

void *sub_10006A308(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    int v16 = _swiftEmptyArrayStorage;
    sub_100032674(0LL, v1, 0);
    uint64_t v4 = (char *)(a1 + 32);
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      char v5 = *v4++;
      char v14 = v5;
      uint64_t v6 = sub_10006B9D0();
      sub_10006B934((uint64_t)&v15, (uint64_t)&v14, (uint64_t)&unk_10027FA80, v6);
      char v7 = v15;
      if ((sub_10006B92C() & 1) == 0)
      {
        uint64_t v8 = (char *)sub_10006B9D8();
        sub_100032674(v8, v9, v10);
        uint64_t v2 = v16;
      }

      unint64_t v12 = v2[2];
      unint64_t v11 = v2[3];
      if (v12 >= v11 >> 1)
      {
        sub_100032674((char *)(v11 > 1), v12 + 1, 1);
        uint64_t v2 = v16;
      }

      v2[2] = v12 + 1;
      *((_BYTE *)v2 + v12 + 32) = v7;
      --v1;
    }

    while (v1);
  }

  return v2;
}

void sub_10006A414(unint64_t a1)
{
  if (a1 >> 62)
  {
    sub_10006B984();
    _CocoaArrayWrapper.endIndex.getter(v1);
    sub_10006BA20();
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v2)
  {
    sub_1000326F8();
    if (v2 < 0)
    {
      __break(1u);
    }

    else
    {
      uint64_t v4 = 0LL;
      do
      {
        if ((a1 & 0xC000000000000001LL) != 0)
        {
          uint64_t v5 = sub_10006BA08();
        }

        else
        {
          uint64_t v5 = *(void *)(a1 + 8 * v4 + 32);
          sub_10002A75C();
        }

        unint64_t v6 = _swiftEmptyArrayStorage[2];
        if (v6 >= _swiftEmptyArrayStorage[3] >> 1) {
          sub_1000326F8();
        }
        ++v4;
        _swiftEmptyArrayStorage[2] = v6 + 1;
        char v7 = &_swiftEmptyArrayStorage[2 * v6];
        v7[4] = v5;
        v7[5] = &protocol witness table for SelectableEventLoop;
      }

      while (v2 != v4);
    }
  }

void *sub_10006A52C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 1) == 0) {
    goto LABEL_2;
  }
  uint64_t v10 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
  uint64_t v11 = swift_unknownObjectRetain_n(a1, 2LL);
  unint64_t v12 = (void *)swift_dynamicCastClass(v11, v10);
  if (!v12)
  {
    swift_unknownObjectRelease(a1);
    unint64_t v12 = _swiftEmptyArrayStorage;
  }

  uint64_t v13 = v12[2];
  uint64_t v14 = swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v14 = a1;
  if (v13 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease(v14);
LABEL_2:
    sub_100017638(a1, a2, a3, a4);
    int64_t v9 = v8;
    goto LABEL_9;
  }

  int64_t v9 = (void *)swift_dynamicCastClass(a1, v10);
  if (!v9)
  {
    swift_unknownObjectRelease(a1);
    int64_t v9 = _swiftEmptyArrayStorage;
  }

uint64_t sub_10006A610(uint64_t a1)
{
  return sub_10006A634(a1, (uint64_t (*)(void))sub_100032524);
}

uint64_t sub_10006A61C(uint64_t a1)
{
  return sub_10006A634(a1, (uint64_t (*)(void))sub_1000325C4);
}

uint64_t sub_10006A628(uint64_t a1)
{
  return sub_10006A634(a1, (uint64_t (*)(void))sub_1000325F8);
}

uint64_t sub_10006A634(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v2);
  *uint64_t v2 = v4;
  if (!(_DWORD)result || a1 > *(void *)(v4 + 24) >> 1) {
    return a2();
  }
  return result;
}

uint64_t sub_10006A6AC(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v3 + 16) = 0LL;
  sub_10002AF70(1uLL);
  *(void *)(v3 + 40) = v7;
  *(void *)(v3 + 48) = v8;
  *(void *)(v3 + 56) = v9;
  *(void *)(v3 + 64) = 0LL;
  *(_BYTE *)(v3 + 72) = 0;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  swift_beginAccess(v3 + 16, v12, 1LL, 0LL);
  uint64_t v10 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = a1;
  swift_release(v10);
  *(void *)(v3 + 24) = a2;
  *(_BYTE *)(v3 + 32) = a3 & 1;
  return v3;
}

void ChannelPipeline.addHTTPClientHandlers(position:leftOverBytesStrategy:)()
{
}

void ChannelPipeline.addHTTPClientHandlers(position:leftOverBytesStrategy:withClientUpgrade:)()
{
  uint64_t v9 = sub_10006B8E8();
  if ((sub_10006B9E4(v9) & 1) != 0)
  {
    sub_100041B08();
    sub_10006B8AC();
    sub_10006A920(v1, v7, v6, v8, v5, v4, v3);
    sub_10006BA2C();
    sub_10006B998( v10,  v11,  v12,  v13,  (uint64_t)type metadata for (),  v17,  v18,  v20,  v21,  v22,  v23,  v24,  v25,  v26,  v27,  v28,  v29);
    sub_10006B9C0();
  }

  else
  {
    uint64_t v14 = sub_100019310((uint64_t)&unk_10027AF30, 72LL);
    char v15 = v8;
    uint64_t v16 = v14;
    *(void *)(v14 + 16) = v1;
    *(void *)(v14 + 24) = v7;
    *(void *)(v14 + 32) = v6;
    *(_BYTE *)(v14 + 40) = v15;
    *(void *)(v14 + 48) = v5;
    *(void *)(v14 + 56) = v4;
    *(void *)(v14 + 64) = v3;
    int v19 = *(void (**)(uint64_t (*)(), uint64_t, char *, uint64_t, uint64_t))(v0 + 32);
    sub_100041B08();
    sub_10006B8AC();
    v19(sub_10006AC04, v16, &type metadata for ()[8], v2, v0);
    swift_release(v16);
  }

  sub_1000193DC();
}

uint64_t ChannelPipeline.SynchronousOperations.addHTTPClientHandlers(position:leftOverBytesStrategy:withClientUpgrade:)( uint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a4) {
    return sub_10006B3F4(a1, a2, a3, a7);
  }
  sub_10006B624(a4, a5, a6);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10006B154(a1, a2, a3, a4, a5, a6, a7);
  swift_bridgeObjectRelease();
  swift_release(a6);
  return sub_10006B880(a4, a5, a6);
}

uint64_t sub_10006A920( uint64_t a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a5)
  {
    sub_10006B624(a5, a6, a7);
    sub_10006B624(a5, a6, a7);
    swift_retain();
    sub_10006B154(a2, a3, a4, a5, a6, a7, a1);
    swift_bridgeObjectRelease();
    swift_release(a7);
    sub_10006B880(a5, a6, a7);
    swift_release(a1);
  }

  else
  {
    sub_10006B3F4(a2, a3, a4, a1);
  }

  swift_release(a1);
  sub_10006ABF8(a2, a3);
  sub_10006B880(a5, a6, a7);
  return 0LL;
}

uint64_t sub_10006AA4C( uint64_t a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  return 0LL;
}

uint64_t sub_10006AAF8( uint64_t a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a5)
  {
    sub_10006B624(a5, a6, a7);
    sub_10006B624(a5, a6, a7);
    swift_retain();
    sub_10006B154(a2, a3, a4, a5, a6, a7, a1);
    swift_bridgeObjectRelease();
    swift_release(a7);
    sub_10006B880(a5, a6, a7);
  }

  else
  {
    swift_retain();
    sub_10006B3F4(a2, a3, a4, a1);
  }

  return swift_release(a1);
}

uint64_t sub_10006ABF0()
{
  return sub_10006B5AC(72LL);
}

uint64_t sub_10006ABF8(uint64_t result, uint64_t a2)
{
  if ((a2 & 0x8000000000000000LL) == 0) {
    return swift_unknownObjectRelease(result);
  }
  return result;
}

uint64_t sub_10006AC04()
{
  return sub_10006AAF8( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(_BYTE *)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56),  *(void *)(v0 + 64));
}

uint64_t sub_10006AC2C(uint64_t result, uint64_t a2)
{
  if ((a2 & 0x8000000000000000LL) == 0) {
    return swift_unknownObjectRetain(result);
  }
  return result;
}

void ChannelPipeline.configureHTTPServerPipeline(position:withPipeliningAssistance:withServerUpgrade:withErrorHandling:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  HIDWORD(v25) = a7;
  uint64_t v16 = sub_10006B8E8();
  if ((sub_10006B9E4(v16) & 1) != 0)
  {
    sub_100041B08();
    sub_10006B8AC();
    sub_10006AA4C(v8, v14, v13, v15 & 1, v12, v11, v10, BYTE4(v25) & 1);
    sub_10006BA2C();
    sub_10006B998( v17,  v18,  v19,  v20,  (uint64_t)type metadata for (),  v23,  v25,  v26,  v27,  v28,  v29,  v30,  v31,  v32,  v33,  v34,  v35);
    sub_10006B9C0();
  }

  else
  {
    uint64_t v24 = v9;
    uint64_t v21 = sub_100019310((uint64_t)&unk_10027AF58, 73LL);
    *(void *)(v21 + 16) = v8;
    *(void *)(v21 + 24) = v14;
    *(void *)(v21 + 32) = v13;
    *(_BYTE *)(v21 + 40) = v15 & 1;
    *(void *)(v21 + 48) = v12;
    *(void *)(v21 + 56) = v11;
    *(void *)(v21 + 64) = v10;
    *(_BYTE *)(v21 + 72) = BYTE4(v25) & 1;
    uint64_t v22 = *(void (**)(uint64_t (*)(), uint64_t, char *, uint64_t, uint64_t))(v7 + 32);
    sub_100041B08();
    sub_10006B8AC();
    v22(sub_10006B5F8, v21, &type metadata for ()[8], v24, v7);
    swift_release();
  }

  sub_1000193DC();
}

uint64_t ChannelPipeline.SynchronousOperations.configureHTTPServerPipeline(position:withPipeliningAssistance:withServerUpgrade:withErrorHandling:)( uint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  BOOL v11 = a4 == 0;
  uint64_t v12 = *(void *)(a8 + 56);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a8 + 48));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/HTTPPipelineSetup.swift",  119LL,  2LL,  215LL,  ObjectType,  v12);
  uint64_t v14 = type metadata accessor for HTTPResponseEncoder();
  uint64_t v15 = sub_100019310(v14, 17LL);
  *(_BYTE *)(v15 + 16) = 0;
  uint64_t v16 = sub_1000175B0(&qword_1002AC920);
  sub_100019310(v16, 115LL);
  sub_10006B650(2 * v11, 0);
  uint64_t v17 = sub_1000175B0(&qword_1002A9100);
  uint64_t v18 = sub_100019310(v17, 64LL);
  *(_OWORD *)(v18 + 16) = xmmword_1001F3DD0;
  *(void *)(v18 + 32) = v15;
  *(void *)(v18 + 40) = &protocol witness table for HTTPResponseEncoder;
  uint64_t v19 = sub_1000175B0(&qword_1002AC928);
  sub_100019310(v19, 176LL);
  sub_10002A75C();
  uint64_t v20 = swift_retain();
  *(void *)(v18 + 48) = sub_10006A6AC(v20, 0LL, 1);
  *(void *)(v18 + 56) = &protocol witness table for ByteToMessageHandler<A>;
  if ((a3 & 1) != 0)
  {
    uint64_t v21 = type metadata accessor for HTTPServerPipelineHandler();
    sub_100019310(v21, 51LL);
    HTTPServerPipelineHandler.init()();
    uint64_t v23 = v22;
    unint64_t v24 = *(void *)(v18 + 16);
    if (v24 >= *(void *)(v18 + 24) >> 1)
    {
      sub_10006B93C();
      uint64_t v18 = v49;
    }

    *(void *)(v18 + 16) = v24 + 1;
    uint64_t v25 = v18 + 16 * v24;
    *(void *)(v25 + 32) = v23;
    *(void *)(v25 + 40) = &protocol witness table for HTTPServerPipelineHandler;
    if ((a7 & 1) == 0)
    {
LABEL_3:
      if (!a4) {
        goto LABEL_16;
      }
      goto LABEL_11;
    }
  }

  else if ((a7 & 1) == 0)
  {
    goto LABEL_3;
  }

  uint64_t v26 = type metadata accessor for HTTPServerProtocolErrorHandler();
  uint64_t v27 = sub_100019310(v26, 17LL);
  *(_BYTE *)(v27 + 16) = 0;
  unint64_t v28 = *(void *)(v18 + 16);
  if (v28 >= *(void *)(v18 + 24) >> 1)
  {
    sub_10006B93C();
    uint64_t v18 = v50;
  }

  *(void *)(v18 + 16) = v28 + 1;
  uint64_t v29 = v18 + 16 * v28;
  *(void *)(v29 + 32) = v27;
  *(void *)(v29 + 40) = &protocol witness table for HTTPServerProtocolErrorHandler;
  if (a4)
  {
LABEL_11:
    uint64_t v30 = sub_10005B1B8(1LL, v18);
    uint64_t v32 = v31;
    uint64_t v34 = v33;
    unint64_t v36 = v35;
    sub_10002A75C();
    sub_10006B624(a4, a5, a6);
    swift_bridgeObjectRetain();
    int v37 = sub_10006A52C(v30, v32, v34, v36);
    uint64_t v38 = type metadata accessor for HTTPServerUpgradeHandler();
    sub_100019310(v38, 104LL);
    swift_retain();
    uint64_t v39 = HTTPServerUpgradeHandler.init(upgraders:httpEncoder:extraHTTPHandlers:upgradeCompletionHandler:)( a4,  v15,  (uint64_t)v37,  a5,  a6);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
    {
      sub_10006B93C();
      uint64_t v18 = v47;
    }

    unint64_t v40 = *(void *)(v18 + 16);
    if (v40 >= *(void *)(v18 + 24) >> 1)
    {
      sub_10006B93C();
      uint64_t v18 = v48;
    }

    *(void *)(v18 + 16) = v40 + 1;
    uint64_t v41 = v18 + 16 * v40;
    *(void *)(v41 + 32) = v39;
    *(void *)(v41 + 40) = &protocol witness table for HTTPServerUpgradeHandler;
    swift_release();
    swift_release();
  }

uint64_t sub_10006B0CC( uint64_t a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  return swift_release();
}

uint64_t sub_10006B154( uint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = *(void *)(a7 + 56);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a7 + 48));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/HTTPPipelineSetup.swift",  119LL,  2LL,  172LL,  ObjectType,  v8);
  uint64_t v10 = type metadata accessor for HTTPRequestEncoder();
  uint64_t v11 = swift_allocObject(v10, 17LL, 7LL);
  *(_BYTE *)(v11 + 16) = 0;
  uint64_t v12 = sub_1000175B0(&qword_1002AC978);
  swift_allocObject(v12, 115LL, 7LL);
  uint64_t v13 = sub_10006B650(a3, 1);
  uint64_t v14 = sub_1000175B0(&qword_1002A9100);
  uint64_t v15 = swift_allocObject(v14, 64LL, 7LL);
  *(_OWORD *)(v15 + 16) = xmmword_1001F3DD0;
  *(void *)(v15 + 32) = v11;
  *(void *)(v15 + 40) = &protocol witness table for HTTPRequestEncoder;
  uint64_t v16 = sub_1000175B0(&qword_1002AC980);
  swift_allocObject(v16, 176LL, 7LL);
  swift_retain();
  uint64_t v17 = swift_retain();
  *(void *)(v15 + 48) = sub_10006A6AC(v17, 0LL, 1);
  *(void *)(v15 + 56) = &protocol witness table for ByteToMessageHandler<A>;
  uint64_t v18 = type metadata accessor for NIOHTTPClientUpgradeHandler();
  swift_allocObject(v18, 96LL, 7LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  NIOHTTPClientUpgradeHandler.init(upgraders:httpHandlers:upgradeCompletionHandler:)();
  uint64_t v20 = v19;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
  {
    sub_10002F7A8();
    uint64_t v15 = v28;
  }

  unint64_t v21 = *(void *)(v15 + 16);
  if (v21 >= *(void *)(v15 + 24) >> 1)
  {
    sub_10002F7A8();
    uint64_t v15 = v29;
  }

  *(void *)(v15 + 16) = v21 + 1;
  uint64_t v22 = v15 + 16 * v21;
  *(void *)(v22 + 32) = v20;
  *(void *)(v22 + 40) = &protocol witness table for NIOHTTPClientUpgradeHandler;
  uint64_t v23 = sub_100069CCC(v15);
  swift_bridgeObjectRelease();
  uint64_t v24 = sub_1000969B0((uint64_t)v23, a1, a2);
  if ((v25 & 1) != 0)
  {
    uint64_t v32 = v24;
    uint64_t v27 = sub_1000175B0(&qword_1002A9710);
    swift_willThrowTypedImpl(&v32, v27, &protocol self-conformance witness table for Error);
    swift_release(v20);
    swift_bridgeObjectRelease();
    swift_release(v13);
    return swift_release(v11);
  }

  else
  {
    swift_release(v20);
    swift_bridgeObjectRelease();
    swift_release(v13);
    return swift_release(v11);
  }

uint64_t sub_10006B3F4(uint64_t a1, unint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 56);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a4 + 48));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/HTTPPipelineSetup.swift",  119LL,  2LL,  162LL,  ObjectType,  v7);
  uint64_t v9 = type metadata accessor for HTTPRequestEncoder();
  uint64_t v10 = swift_allocObject(v9, 17LL, 7LL);
  *(_BYTE *)(v10 + 16) = 0;
  uint64_t v11 = sub_1000175B0(&qword_1002AC978);
  swift_allocObject(v11, 115LL, 7LL);
  uint64_t v12 = sub_10006B650(a3, 1);
  uint64_t v13 = sub_1000175B0(&qword_1002AA578);
  uint64_t inited = swift_initStackObject(v13, v22);
  *(_OWORD *)(inited + 16) = xmmword_1001F3DD0;
  *(void *)(inited + 32) = v10;
  *(void *)(inited + 40) = &protocol witness table for HTTPRequestEncoder;
  uint64_t v15 = sub_1000175B0(&qword_1002AC980);
  swift_allocObject(v15, 176LL, 7LL);
  swift_retain();
  uint64_t v16 = swift_retain();
  *(void *)(inited + 48) = sub_10006A6AC(v16, 0LL, 1);
  *(void *)(inited + 56) = &protocol witness table for ByteToMessageHandler<A>;
  uint64_t v17 = sub_1000969B0(inited, a1, a2);
  if ((v18 & 1) != 0)
  {
    uint64_t v21 = v17;
    uint64_t v20 = sub_1000175B0(&qword_1002A9710);
    swift_willThrowTypedImpl(&v21, v20, &protocol self-conformance witness table for Error);
    swift_release(v12);
    swift_bridgeObjectRelease();
    return swift_release(v10);
  }

  else
  {
    swift_release(v12);
    swift_bridgeObjectRelease();
    return swift_release(v10);
  }

uint64_t sub_10006B5A4()
{
  return sub_10006B5AC(73LL);
}

uint64_t sub_10006B5AC(uint64_t a1)
{
  if (v1[6])
  {
    swift_bridgeObjectRelease();
    swift_release(v1[8]);
  }

  return swift_deallocObject(v1, a1, 7LL);
}

uint64_t sub_10006B5F8()
{
  return sub_10006B0CC( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(_BYTE *)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56),  *(void *)(v0 + 64),  *(_BYTE *)(v0 + 72));
}

uint64_t sub_10006B624(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRetain(result);
    return swift_retain(a3);
  }

  return result;
}

uint64_t sub_10006B650(char a1, char a2)
{
  *(void *)(v2 + 16) = _swiftEmptyArrayStorage;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(void *)(v2 + 56) = 0LL;
  *(_BYTE *)(v2 + 64) = 2;
  *(void *)(v2 + 96) = 0LL;
  *(_BYTE *)(v2 + 114) = 0;
  *(void *)(v2 + 72) = 0LL;
  *(void *)(v2 + 80) = 0LL;
  *(void *)(v2 + 87) = 0LL;
  swift_beginAccess(v2 + 16, v7, 33LL, 0LL);
  sub_100187AF0(16LL);
  swift_endAccess(v7);
  *(_BYTE *)(v2 + 113) = a2;
  uint64_t v5 = type metadata accessor for BetterHTTPParser();
  sub_100019310(v5, 280LL);
  *(void *)(v2 + 104) = sub_100193280(a2);
  *(_BYTE *)(v2 + 112) = a1;
  return v2;
}

uint64_t sub_10006B708()
{
  return sub_10006B720((uint64_t (*)(uint64_t))sub_1000325C4);
}

uint64_t sub_10006B714()
{
  return sub_10006B720((uint64_t (*)(uint64_t))sub_1000325F8);
}

uint64_t sub_10006B720(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v1);
  *uint64_t v1 = v2;
  if ((result & 1) == 0)
  {
    uint64_t v4 = sub_10006B9D8();
    return a1(v4);
  }

  return result;
}

uint64_t sub_10006B778(uint64_t a1)
{
  return sub_10006B790(a1, (uint64_t (*)(BOOL))sub_1000325C4);
}

uint64_t sub_10006B784(uint64_t a1)
{
  return sub_10006B790(a1, (uint64_t (*)(BOOL))sub_1000325F8);
}

uint64_t sub_10006B790(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24LL);
  return result;
}

_OWORD *sub_10006B7BC(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 16) = a1 + 1;
  return sub_100034728(a2, (_OWORD *)(v3 + 32 * a1 + 32));
}

uint64_t sub_10006B7DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 16) = a1 + 1;
  return sub_10006B838(a2, v3 + 32 * a1 + 32);
}

unint64_t sub_10006B7FC()
{
  unint64_t result = qword_1002AC930;
  if (!qword_1002AC930)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___SQLitePredicate);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002AC930);
  }

  return result;
}

uint64_t sub_10006B838(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0((uint64_t *)&unk_1002B9380);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006B880(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return swift_release(a3);
  }

  return result;
}

uint64_t sub_10006B8AC()
{
  return sub_10006B624(v2, v1, v0);
}

  ;
}

uint64_t sub_10006B8E8()
{
  return swift_getObjectType(*(void *)(v0 + 48));
}

uint64_t sub_10006B910()
{
  return 0LL;
}

uint64_t sub_10006B92C()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_10006B934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 7LL);
}

void sub_10006B93C()
{
}

  ;
}

  ;
}

void sub_10006B970()
{
}

uint64_t sub_10006B978()
{
  return sub_1000175B0(v0);
}

uint64_t sub_10006B984()
{
  return swift_bridgeObjectRetain(v0);
}

void sub_10006B998( uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

uint64_t sub_10006B9AC(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  *(void *)(v3 + 16) = v4;
  return sub_10006B838((uint64_t)va, v3 + 32 * v5 + 32);
}

uint64_t sub_10006B9C0()
{
  return sub_100034F08(v0, v1);
}

uint64_t sub_10006B9D0()
{
  return sub_1000175B0(v0);
}

uint64_t sub_10006B9D8()
{
  return 0LL;
}

uint64_t sub_10006B9E4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(a1, v1);
}

void sub_10006B9F4()
{
}

uint64_t sub_10006B9FC()
{
  return swift_bridgeObjectRetain(*v0);
}

uint64_t sub_10006BA08()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

uint64_t sub_10006BA14()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t sub_10006BA20()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

uint64_t sub_10006BA40(unint64_t a1, unint64_t a2)
{
  BOOL v2 = a1 >= a2;
  if (!a2) {
    BOOL v2 = 0;
  }
  return !a1 || v2;
}

BOOL sub_10006BA60(char a1, char a2)
{
  return !sub_1001C28C4(a1 & 1, a2 & 1);
}

BOOL sub_10006BA84(uint64_t a1, uint64_t a2)
{
  return (v2 & 1) == 0;
}

BOOL sub_10006BAAC(uint64_t a1, uint64_t a2)
{
  return (static ScheduledTask.< infix(_:_:)(a1, a2) & 1) == 0;
}

BOOL sub_10006BAD8(uint64_t a1, uint64_t a2)
{
  return a1 >= a2;
}

uint64_t sub_10006BAE4(unint64_t a1, unint64_t a2)
{
  if ((a1 & 0x8000000000000000LL) == 0 && (a2 & 0x8000000000000000LL) == 0) {
    return a1 >= a2;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL);
  __break(1u);
  return result;
}

uint64_t static AcceptBackoffHandler.defaultBackoffProvider(error:)()
{
  return 1000000000LL;
}

uint64_t AcceptBackoffHandler.__allocating_init(backoffProvider:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100019310(v2, 56LL);
  *(void *)(result + 32) = a1;
  *(void *)(result + 40) = a2;
  *(void *)(result + 16) = 0LL;
  *(_BYTE *)(result + 24) = 1;
  *(void *)(result + 48) = 0LL;
  return result;
}

uint64_t AcceptBackoffHandler.init(backoffProvider:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  *(void *)(v2 + 16) = 0LL;
  *(_BYTE *)(v2 + 24) = 1;
  *(void *)(v2 + 48) = 0LL;
  return HTTPServerProtocolErrorHandler.deinit();
}

void AcceptBackoffHandler.read(context:)(uint64_t a1)
{
  if (*(void *)(v1 + 48)) {
    goto LABEL_4;
  }
  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
  {
    ChannelHandlerContext.read()();
LABEL_4:
    sub_1000193B8();
    return;
  }

  unint64_t v3 = *(void *)(v1 + 16);
  static NIODeadline.now()();
  if ((sub_10006BAE4(v4, v3) & 1) != 0) {
    sub_10006BC38();
  }
  else {
    sub_10006BC74(v3, a1);
  }
}

void sub_10006BC38()
{
  *(void *)(v0 + 16) = 0LL;
  *(_BYTE *)(v0 + 24) = 1;
  uint64_t v1 = *(void *)(v0 + 48);
  *(void *)(v0 + 48) = 0LL;
  swift_release(v1);
  ChannelHandlerContext.read()();
}

uint64_t sub_10006BC74(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(v6 + 56);
  uint64_t ObjectType = swift_getObjectType(v7);
  uint64_t v10 = swift_allocObject(&unk_10027B608, 32LL, 7LL);
  *(void *)(v10 + 16) = v3;
  *(void *)(v10 + 24) = a2;
  uint64_t v11 = *(uint64_t (**)(uint64_t, void (*)(), uint64_t, char *, uint64_t, uint64_t))(v8 + 40);
  swift_unknownObjectRetain(v7);
  swift_retain();
  swift_retain();
  uint64_t v12 = v11(a1, sub_10006D298, v10, &type metadata for ()[8], ObjectType, v8);
  swift_release(v10);
  swift_unknownObjectRelease(v7);
  uint64_t v13 = *(void *)(v3 + 48);
  *(void *)(v3 + 48) = v12;
  return swift_release(v13);
}

void AcceptBackoffHandler.errorCaught(context:error:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v16 = a2;
  swift_errorRetain(a2);
  uint64_t v5 = sub_1000175B0(&qword_1002A9710);
  if ((swift_dynamicCast(v14, &v16, v5, &type metadata for IOError, 6LL) & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v6 = (*(uint64_t (**)(void, void, void))(v2 + 32))(v14[0], v14[1], v15);
  char v8 = v7;
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0) {
    goto LABEL_6;
  }
  static NIODeadline.now()();
  *(void *)(v3 + 16) = static NIODeadline.+ infix(_:_:)(v9, v6);
  *(_BYTE *)(v3 + 24) = 0;
  uint64_t v10 = *(void *)(v3 + 48);
  if (!v10) {
    goto LABEL_6;
  }
  unint64_t v11 = sub_100029E1C();
  uint64_t v12 = sub_1000252D0((uint64_t)&type metadata for EventLoopError, v11);
  *uint64_t v13 = 1;
  swift_errorRetain(v12);
  swift_retain();
  sub_100098A70(v12, 1LL, v10);
  swift_errorRelease(v12);
  swift_errorRelease(v12);
  if ((*(_BYTE *)(v3 + 24) & 1) == 0)
  {
    sub_10006BC74(*(void *)(v3 + 16), a1);
    swift_release(v10);
LABEL_6:
    ChannelHandlerContext.fireErrorCaught(_:)();
    return;
  }

  __break(1u);
}

void AcceptBackoffHandler.channelInactive(context:)()
{
  uint64_t v2 = *(void *)(v0 + 48);
  if (v2)
  {
    unint64_t v3 = sub_100029E1C();
    uint64_t v4 = sub_1000252D0((uint64_t)&type metadata for EventLoopError, v3);
    sub_10006D318(v4, v5);
    swift_errorRetain(v1);
    sub_10006D334();
    sub_10006D32C();
    sub_10006D32C();
    swift_release(v2);
    uint64_t v6 = *(void *)(v0 + 48);
    *(void *)(v0 + 48) = 0LL;
    swift_release(v6);
  }

  *(void *)(v0 + 16) = 0LL;
  *(_BYTE *)(v0 + 24) = 1;
  ChannelHandlerContext.fireChannelInactive()();
  sub_1000193B8();
}

void AcceptBackoffHandler.handlerRemoved(context:)()
{
  uint64_t v2 = *(void *)(v0 + 48);
  if (v2)
  {
    unint64_t v3 = sub_100029E1C();
    uint64_t v4 = sub_1000252D0((uint64_t)&type metadata for EventLoopError, v3);
    sub_10006D318(v4, v5);
    swift_errorRetain(v1);
    sub_10006D334();
    sub_10006D32C();
    sub_10006D32C();
    uint64_t v6 = *(void *)(v0 + 48);
    *(void *)(v0 + 48) = 0LL;
    swift_release(v6);
    ChannelHandlerContext.read()();
    swift_release(v2);
  }

  *(void *)(v0 + 16) = 0LL;
  *(_BYTE *)(v0 + 24) = 1;
  sub_1000193B8();
}

uint64_t AcceptBackoffHandler.deinit()
{
  return v0;
}

uint64_t AcceptBackoffHandler.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t BackPressureHandler.__allocating_init()()
{
  uint64_t result = sub_100019310(v0, 18LL);
  *(_WORD *)(result + 16) = 256;
  return result;
}

uint64_t BackPressureHandler.init()()
{
  uint64_t result = v0;
  *(_WORD *)(v0 + 16) = 256;
  return result;
}

void BackPressureHandler.read(context:)()
{
  if (*(_BYTE *)(v0 + 17) == 1) {
    ChannelHandlerContext.read()();
  }
  else {
    *(_BYTE *)(v0 + 16) = 1;
  }
  sub_10001945C();
}

void BackPressureHandler.channelWritabilityChanged(context:)()
{
  uint64_t v2 = sub_100094338();
  uint64_t v3 = sub_10006D350(v2);
  char v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 80))(v3, v1);
  sub_10002A338();
  *(_BYTE *)(v0 + 17) = v4 & 1;
  if ((v4 & 1) != 0) {
    _s25ASOctaneSupportXPCService19BackPressureHandlerC14handlerRemoved7contextyAA07ChannelF7ContextC_tF_0();
  }
  else {
    ChannelHandlerContext.flush()();
  }
  ChannelHandlerContext.fireChannelWritabilityChanged()();
}

void _s25ASOctaneSupportXPCService19BackPressureHandlerC14handlerRemoved7contextyAA07ChannelF7ContextC_tF_0()
{
  if (*(_BYTE *)(v0 + 16) == 1)
  {
    *(_BYTE *)(v0 + 16) = 0;
    ChannelHandlerContext.read()();
  }

uint64_t BackPressureHandler.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 18LL, 7LL);
}

uint64_t IdleStateHandler.readTimeout.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t IdleStateHandler.writeTimeout.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t IdleStateHandler.allTimeout.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t IdleStateHandler.__allocating_init(readTimeout:writeTimeout:allTimeout:)( uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  char v10 = a2 & 1;
  char v11 = a4 & 1;
  char v12 = a6 & 1;
  uint64_t v13 = sub_100019310(v6, 104LL);
  IdleStateHandler.init(readTimeout:writeTimeout:allTimeout:)(a1, v10, a3, v11, a5, v12);
  return v13;
}

uint64_t IdleStateHandler.init(readTimeout:writeTimeout:allTimeout:)( uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  *(_BYTE *)(v6 + 57) = 0;
  *(void *)(v6 + 64) = 0LL;
  *(void *)(v6 + 72) = 0LL;
  *(void *)(v6 + 16) = a1;
  *(_BYTE *)(v6 + 24) = a2 & 1;
  *(void *)(v6 + 32) = a3;
  *(_BYTE *)(v6 + 40) = a4 & 1;
  *(void *)(v6 + 48) = a5;
  *(_BYTE *)(v6 + 56) = a6 & 1;
  *(void *)(v6 + 88) = 0LL;
  *(void *)(v6 + 96) = 0LL;
  *(void *)(v6 + 80) = 0LL;
  return HTTPServerProtocolErrorHandler.deinit();
}

void IdleStateHandler.handlerAdded(context:)(uint64_t a1)
{
  uint64_t v3 = sub_100094338();
  uint64_t v4 = sub_10006D350(v3);
  char v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 88))(v4, v1);
  sub_10002A338();
  if ((v5 & 1) != 0) {
    sub_10006C220(a1);
  }
  else {
    sub_1000193B8();
  }
}

uint64_t sub_10006C220(uint64_t a1)
{
  *(void *)(v1 + 64) = v3;
  *(void *)(v1 + 72) = v3;
  uint64_t v4 = *(void *)(v1 + 16);
  char v5 = *(_BYTE *)(v1 + 24);
  swift_retain();
  uint64_t v6 = sub_10006CEE0( a1,  v4,  v5,  v1,  v1,  (uint64_t)&unk_10027B4C8,  (uint64_t)&unk_10027B4F0,  (uint64_t)sub_10006D240,  (uint64_t)sub_10006D2EC);
  uint64_t v7 = *(void *)(v1 + 80);
  *(void *)(v1 + 80) = v6;
  swift_release(v7);
  uint64_t v8 = *(void *)(v1 + 32);
  char v9 = *(_BYTE *)(v1 + 40);
  swift_retain();
  uint64_t v10 = sub_10006CEE0( a1,  v8,  v9,  v1,  v1,  (uint64_t)&unk_10027B3D8,  (uint64_t)&unk_10027B400,  (uint64_t)sub_10006D228,  (uint64_t)sub_10006D2EC);
  uint64_t v11 = *(void *)(v1 + 88);
  *(void *)(v1 + 88) = v10;
  swift_release(v11);
  uint64_t v12 = *(void *)(v1 + 48);
  char v13 = *(_BYTE *)(v1 + 56);
  swift_retain();
  uint64_t v14 = sub_10006CEE0( a1,  v12,  v13,  v1,  v1,  (uint64_t)&unk_10027B298,  (uint64_t)&unk_10027B2C0,  (uint64_t)sub_10006D1D0,  (uint64_t)sub_10006D1DC);
  uint64_t v15 = *(void *)(v1 + 96);
  *(void *)(v1 + 96) = v14;
  return swift_release(v15);
}

uint64_t sub_10006C368()
{
  uint64_t v1 = v0[10];
  if (v1)
  {
    unint64_t v2 = sub_100029E1C();
    uint64_t v3 = swift_allocError(&type metadata for EventLoopError, v2, 0LL, 0LL);
    *uint64_t v4 = 1;
    swift_retain();
    swift_errorRetain(v3);
    sub_100098A70(v3, 1LL, v1);
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    swift_release(v1);
  }

  uint64_t v5 = v0[11];
  if (v5)
  {
    unint64_t v6 = sub_100029E1C();
    uint64_t v7 = swift_allocError(&type metadata for EventLoopError, v6, 0LL, 0LL);
    *uint64_t v8 = 1;
    swift_retain();
    swift_errorRetain(v7);
    sub_100098A70(v7, 1LL, v5);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_release(v5);
  }

  uint64_t v9 = v0[12];
  if (v9)
  {
    unint64_t v10 = sub_100029E1C();
    uint64_t v11 = swift_allocError(&type metadata for EventLoopError, v10, 0LL, 0LL);
    *uint64_t v12 = 1;
    swift_retain();
    swift_errorRetain(v11);
    sub_100098A70(v11, 1LL, v9);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    swift_release(v9);
  }

  uint64_t v13 = v0[10];
  v0[10] = 0LL;
  swift_release(v13);
  uint64_t v14 = v0[11];
  v0[11] = 0LL;
  swift_release(v14);
  uint64_t v15 = v0[12];
  v0[12] = 0LL;
  return swift_release(v15);
}

void IdleStateHandler.channelActive(context:)(uint64_t a1)
{
}

void IdleStateHandler.channelRead(context:data:)()
{
  if (v0[24] != 1 || (v0[56] & 1) == 0) {
    v0[57] = 1;
  }
  ChannelHandlerContext.fireChannelRead(_:)();
  sub_10001945C();
}

void IdleStateHandler.channelReadComplete(context:)()
{
  if ((*(_BYTE *)(v0 + 24) != 1 || (*(_BYTE *)(v0 + 56) & 1) == 0) && *(_BYTE *)(v0 + 57) == 1)
  {
    static NIODeadline.now()();
    *(void *)(v0 + 64) = v1;
    *(_BYTE *)(v0 + 57) = 0;
  }

  ChannelHandlerContext.fireChannelReadComplete()();
  sub_10001945C();
}

void IdleStateHandler.write(context:data:promise:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(v3 + 40) == 1 && *(_BYTE *)(v3 + 56) == 1)
  {
    ChannelHandlerContext.write(_:promise:)();
  }

  else
  {
    if (a3)
    {
      uint64_t v4 = a3;
    }

    else
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(v5 + 56);
      uint64_t ObjectType = swift_getObjectType(*(void *)(v5 + 48));
      EmbeddedChannel.WrongTypeError.actual.getter(ObjectType, (uint64_t)&type metadata for ()[8]);
      uint64_t v4 = EventLoop.makePromise<A>(of:file:line:)( (uint64_t)&type metadata for ()[8],  (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Ch annelHandlers.swift",  117LL,  2LL,  228LL,  ObjectType,  (uint64_t)&type metadata for ()[8],  v6);
    }

    swift_retain_n(v4, 3LL);
    swift_retain_n(v3, 2LL);
    swift_retain();
    sub_1000FEED0();
    swift_release(v3);
    sub_10006D344();
    swift_retain();
    ChannelHandlerContext.write(_:promise:)();
    sub_10006D344();
  }

uint64_t sub_10006C6C0()
{
  uint64_t v0 = sub_100094338();
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType(v0);
  LOBYTE(sub_1000680EC(v0, v1, v2) = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(ObjectType, v2);
  swift_unknownObjectRelease(v0);
  return v2 & 1;
}

uint64_t sub_10006C708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_10006C6C0();
  if ((result & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 57) == 1)
    {
      uint64_t v7 = *(void *)(a2 + 32);
      uint64_t v8 = *(void *)(v7 + 48);
      uint64_t v9 = *(void *)(v7 + 56);
      uint64_t ObjectType = swift_getObjectType(v8);
      uint64_t v11 = (void *)swift_allocObject(&unk_10027B5B8, 40LL, 7LL);
      _OWORD v11[2] = a1;
      v11[3] = a2;
      v11[4] = a3;
      uint64_t v12 = swift_allocObject(&unk_10027B5E0, 32LL, 7LL);
      *(void *)(v12 + 16) = sub_10006D308;
      *(void *)(v12 + 24) = v11;
      uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t (*)(), uint64_t, char *, uint64_t, uint64_t))(v9 + 48);
      swift_unknownObjectRetain(v8);
      swift_retain();
      swift_retain();
      uint64_t v14 = v13(a3, sub_10006D2EC, v12, &type metadata for ()[8], ObjectType, v9);
      uint64_t v15 = v12;
LABEL_6:
      swift_release(v15);
      swift_unknownObjectRelease(v8);
      uint64_t v26 = *(void *)(a1 + 80);
      *(void *)(a1 + 80) = v14;
      return swift_release(v26);
    }

    static NIODeadline.now()();
    uint64_t v16 = *(void *)(a1 + 64);
    uint64_t v18 = static NIODeadline.- infix(_:_:)(v17, v16);
    uint64_t v19 = *(void *)(a2 + 32);
    uint64_t v8 = *(void *)(v19 + 48);
    uint64_t v20 = *(void *)(v19 + 56);
    uint64_t v21 = swift_getObjectType(v8);
    if (v18 < a3)
    {
      uint64_t v22 = static NIODeadline.+ infix(_:_:)(v16, a3);
      uint64_t v23 = (void *)swift_allocObject(&unk_10027B568, 40LL, 7LL);
      v23[2] = a1;
      v23[3] = a2;
      v23[4] = a3;
      uint64_t v24 = swift_allocObject(&unk_10027B590, 32LL, 7LL);
      *(void *)(v24 + 16) = sub_10006D308;
      *(void *)(v24 + 24) = v23;
      char v25 = *(uint64_t (**)(uint64_t, uint64_t (*)(), uint64_t, char *, uint64_t, uint64_t))(v20 + 40);
      swift_retain();
      swift_retain();
      swift_unknownObjectRetain(v8);
      uint64_t v14 = v25(v22, sub_10006D2EC, v24, &type metadata for ()[8], v21, v20);
      uint64_t v15 = v24;
      goto LABEL_6;
    }

    uint64_t v27 = (void *)swift_allocObject(&unk_10027B518, 40LL, 7LL);
    v27[2] = a1;
    v27[3] = a2;
    v27[4] = a3;
    uint64_t v28 = swift_allocObject(&unk_10027B540, 32LL, 7LL);
    *(void *)(v28 + 16) = sub_10006D308;
    *(void *)(v28 + 24) = v27;
    uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t (*)(), uint64_t, char *, uint64_t, uint64_t))(v20 + 48);
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain(v8);
    uint64_t v30 = v29(a3, sub_10006D2EC, v28, &type metadata for ()[8], v21, v20);
    swift_release(v28);
    swift_unknownObjectRelease(v8);
    uint64_t v31 = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = v30;
    swift_release(v31);
    v32[3] = &type metadata for IdleStateHandler.IdleStateEvent;
    LOBYTE(v32[0]) = 1;
    ChannelHandlerContext.fireUserInboundEventTriggered(_:)((uint64_t)v32);
    return sub_100019F7C(v32);
  }

  return result;
}

uint64_t sub_10006C9E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_10006C6C0();
  if ((result & 1) != 0)
  {
    uint64_t v7 = *(void *)(a1 + 72);
    static NIODeadline.now()();
    uint64_t v9 = static NIODeadline.- infix(_:_:)(v8, v7);
    uint64_t v10 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(v10 + 48);
    uint64_t v12 = *(void *)(v10 + 56);
    uint64_t ObjectType = swift_getObjectType(v11);
    if (v9 >= a3)
    {
      uint64_t v20 = (void *)swift_allocObject(&unk_10027B428, 40LL, 7LL);
      v20[2] = a1;
      v20[3] = a2;
      v20[4] = a3;
      uint64_t v21 = swift_allocObject(&unk_10027B450, 32LL, 7LL);
      *(void *)(v21 + 16) = sub_10006D304;
      *(void *)(v21 + 24) = v20;
      uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t (*)(), uint64_t, char *, uint64_t, uint64_t))(v12 + 48);
      swift_unknownObjectRetain(v11);
      swift_retain();
      swift_retain();
      uint64_t v23 = v22(a3, sub_10006D2EC, v21, &type metadata for ()[8], ObjectType, v12);
      swift_release(v21);
      swift_unknownObjectRelease(v11);
      uint64_t v24 = *(void *)(a1 + 88);
      *(void *)(a1 + 88) = v23;
      swift_release(v24);
      v25[3] = &type metadata for IdleStateHandler.IdleStateEvent;
      LOBYTE(v25[0]) = 0;
      ChannelHandlerContext.fireUserInboundEventTriggered(_:)((uint64_t)v25);
      return sub_100019F7C(v25);
    }

    else
    {
      uint64_t v14 = static NIODeadline.+ infix(_:_:)(*(void *)(a1 + 72), a3);
      uint64_t v15 = (void *)swift_allocObject(&unk_10027B478, 40LL, 7LL);
      __int128 v15[2] = a1;
      v15[3] = a2;
      v15[4] = a3;
      uint64_t v16 = swift_allocObject(&unk_10027B4A0, 32LL, 7LL);
      *(void *)(v16 + 16) = sub_10006D304;
      *(void *)(v16 + 24) = v15;
      uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t (*)(), uint64_t, char *, uint64_t, uint64_t))(v12 + 40);
      swift_retain();
      swift_retain();
      swift_unknownObjectRetain(v11);
      uint64_t v18 = v17(v14, sub_10006D2EC, v16, &type metadata for ()[8], ObjectType, v12);
      swift_release(v16);
      swift_unknownObjectRelease(v11);
      uint64_t v19 = *(void *)(a1 + 88);
      *(void *)(a1 + 88) = v18;
      return swift_release(v19);
    }
  }

  return result;
}

uint64_t sub_10006CC00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_10006C6C0();
  if ((result & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 57) == 1)
    {
      uint64_t v7 = *(void *)(a2 + 32);
      uint64_t v8 = *(void *)(v7 + 48);
      uint64_t v9 = *(void *)(v7 + 56);
      uint64_t ObjectType = swift_getObjectType(v8);
      uint64_t v11 = (void *)swift_allocObject(&unk_10027B388, 40LL, 7LL);
      _OWORD v11[2] = a1;
      v11[3] = a2;
      v11[4] = a3;
      uint64_t v12 = swift_allocObject(&unk_10027B3B0, 32LL, 7LL);
      *(void *)(v12 + 16) = sub_10006D300;
      *(void *)(v12 + 24) = v11;
      uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t (*)(), uint64_t, char *, uint64_t, uint64_t))(v9 + 48);
      swift_unknownObjectRetain(v8);
      swift_retain();
      swift_retain();
      uint64_t v14 = v13(a3, sub_10006D2EC, v12, &type metadata for ()[8], ObjectType, v9);
      uint64_t v15 = v12;
LABEL_6:
      swift_release(v15);
      swift_unknownObjectRelease(v8);
      uint64_t v27 = *(void *)(a1 + 80);
      *(void *)(a1 + 80) = v14;
      return swift_release(v27);
    }

    sub_1001A8F8C(*(void *)(a1 + 64), *(void *)(a1 + 72));
    uint64_t v17 = v16;
    static NIODeadline.now()();
    uint64_t v19 = static NIODeadline.- infix(_:_:)(v18, v17);
    uint64_t v20 = *(void *)(a2 + 32);
    uint64_t v8 = *(void *)(v20 + 48);
    uint64_t v21 = *(void *)(v20 + 56);
    uint64_t v22 = swift_getObjectType(v8);
    if (v19 < a3)
    {
      uint64_t v23 = static NIODeadline.+ infix(_:_:)(v17, a3);
      uint64_t v24 = (void *)swift_allocObject(&unk_10027B338, 40LL, 7LL);
      v24[2] = a1;
      v24[3] = a2;
      v24[4] = a3;
      uint64_t v25 = swift_allocObject(&unk_10027B360, 32LL, 7LL);
      *(void *)(v25 + 16) = sub_10006D300;
      *(void *)(v25 + 24) = v24;
      uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t (*)(), uint64_t, char *, uint64_t, uint64_t))(v21 + 40);
      swift_retain();
      swift_retain();
      swift_unknownObjectRetain(v8);
      uint64_t v14 = v26(v23, sub_10006D2EC, v25, &type metadata for ()[8], v22, v21);
      uint64_t v15 = v25;
      goto LABEL_6;
    }

    uint64_t v28 = (void *)swift_allocObject(&unk_10027B2E8, 40LL, 7LL);
    v28[2] = a1;
    v28[3] = a2;
    v28[4] = a3;
    uint64_t v29 = swift_allocObject(&unk_10027B310, 32LL, 7LL);
    *(void *)(v29 + 16) = sub_10006D300;
    *(void *)(v29 + 24) = v28;
    uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t (*)(), uint64_t, char *, uint64_t, uint64_t))(v21 + 48);
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain(v8);
    uint64_t v31 = v30(a3, sub_10006D2EC, v29, &type metadata for ()[8], v22, v21);
    swift_release(v29);
    swift_unknownObjectRelease(v8);
    uint64_t v32 = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = v31;
    swift_release(v32);
    v33[3] = &type metadata for IdleStateHandler.IdleStateEvent;
    LOBYTE(v33[0]) = 2;
    ChannelHandlerContext.fireUserInboundEventTriggered(_:)((uint64_t)v33);
    return sub_100019F7C(v33);
  }

  return result;
}

uint64_t sub_10006CEE0( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((a3 & 1) != 0)
  {
    swift_release(a5);
    return 0LL;
  }

  else
  {
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = *(void *)(v15 + 48);
    uint64_t v17 = *(void *)(v15 + 56);
    uint64_t ObjectType = swift_getObjectType(v16);
    uint64_t v19 = (void *)sub_100019310(a6, 40LL);
    v19[2] = a5;
    v19[3] = a1;
    v19[4] = a2;
    uint64_t v20 = sub_100019310(a7, 32LL);
    *(void *)(v20 + 16) = a8;
    *(void *)(v20 + 24) = v19;
    uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(v17 + 48);
    swift_unknownObjectRetain(v16);
    swift_retain();
    swift_retain();
    uint64_t v22 = v21(a2, a9, v20, &type metadata for ()[8], ObjectType, v17);
    swift_release(a5);
    sub_10002A338();
    swift_release(v20);
  }

  return v22;
}

void *IdleStateHandler.deinit()
{
  return v0;
}

uint64_t IdleStateHandler.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 104LL, 7LL);
}

void sub_10006D048()
{
  *(void *)(v0 + 72) = v1;
}

unint64_t sub_10006D064()
{
  unint64_t result = qword_1002ACA78;
  if (!qword_1002ACA78)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for IdleStateHandler.IdleStateEvent,  &type metadata for IdleStateHandler.IdleStateEvent);
    atomic_store(result, (unint64_t *)&qword_1002ACA78);
  }

  return result;
}

uint64_t type metadata accessor for AcceptBackoffHandler()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService20AcceptBackoffHandler);
}

uint64_t type metadata accessor for BackPressureHandler()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService19BackPressureHandler);
}

uint64_t type metadata accessor for IdleStateHandler()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService16IdleStateHandler);
}

uint64_t storeEnumTagSinglePayload for IdleStateHandler.IdleStateEvent( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10006D14C + 4 * byte_1001F8D85[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10006D180 + 4 * asc_1001F8D80[v4]))();
}

uint64_t sub_10006D180(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006D188(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10006D190LL);
  }
  return result;
}

uint64_t sub_10006D19C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10006D1A4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10006D1A8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006D1B0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IdleStateHandler.IdleStateEvent()
{
  return &type metadata for IdleStateHandler.IdleStateEvent;
}

uint64_t sub_10006D1D0()
{
  return sub_10006CC00(v0[2], v0[3], v0[4]);
}

uint64_t sub_10006D1DC()
{
  return sub_1001A8FD8(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_10006D1FC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10006D228()
{
  return sub_10006C9E0(v0[2], v0[3], v0[4]);
}

uint64_t sub_10006D240()
{
  return sub_10006C708(v0[2], v0[3], v0[4]);
}

uint64_t sub_10006D258()
{
  return sub_10006D260(32LL);
}

uint64_t sub_10006D260(uint64_t a1)
{
  return swift_deallocObject(v1, a1, 7LL);
}

void sub_10006D298()
{
}

uint64_t sub_10006D2EC()
{
  return sub_10006D1DC();
}

uint64_t sub_10006D310()
{
  return sub_10006D260(40LL);
}

uint64_t sub_10006D318(uint64_t a1, _BYTE *a2)
{
  *a2 = 1;
  return swift_retain(v2);
}

uint64_t sub_10006D32C()
{
  return swift_errorRelease(v0);
}

uint64_t sub_10006D334()
{
  return sub_100098A70(v1, 1LL, v0);
}

uint64_t sub_10006D344()
{
  return swift_release_n(v0, 2LL);
}

uint64_t sub_10006D350(uint64_t a1)
{
  return swift_getObjectType(a1);
}

uint64_t sub_10006D35C(uint64_t a1, void *a2)
{
  id v3 =  [(id)objc_opt_self(NSXPCInterface) interfaceWithProtocol:&OBJC_PROTOCOL___ASOctaneSupportXPCServiceProtocol];
  sub_10006D50C((uint64_t)v3, "setExportedInterface:");
  id v4 = [objc_allocWithZone((Class)type metadata accessor for OctaneXPCService()) init];
  [a2 setExportedObject:v4];

  sub_10006D50C(v5, "setRemoteObjectInterface:");
  [a2 resume];

  return 1LL;
}

id sub_10006D46C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for OctaneXPCServiceDelegate();
  return objc_msgSendSuper2(&v2, "init");
}

id sub_10006D4BC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for OctaneXPCServiceDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for OctaneXPCServiceDelegate()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService24OctaneXPCServiceDelegate);
}

id sub_10006D50C(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_10006D518(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for InAppPendingTransactionsResponse();
  swift_allocObject(v2, 88LL, 7LL);
  uint64_t v3 = sub_1000AD540();
  *(_BYTE *)(v3 + 24) = 2;
  *(void *)(v3 + 32) = *(void *)(a1 + 16);
  *(_BYTE *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = a1;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t type metadata accessor for InAppPendingTransactionsResponse()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService32InAppPendingTransactionsResponse);
}

uint64_t *sub_10006D594(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v11);
  }

  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for URL(0LL);
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }

  return v3;
}

uint64_t sub_10006D630(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

void *sub_10006D678(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

void *sub_10006D6E8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  return a1;
}

_OWORD *sub_10006D764(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

void *sub_10006D7C0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  return a1;
}

uint64_t sub_10006D82C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006D838);
}

uint64_t sub_10006D838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for URL(0LL);
    return sub_10001D158(a1 + *(int *)(a3 + 20), a2, v8);
  }

uint64_t sub_10006D8AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006D8B8);
}

uint64_t sub_10006D8B8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for URL(0LL);
    return sub_10001762C(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }

  return result;
}

uint64_t type metadata accessor for OctaneAsset(uint64_t a1)
{
  uint64_t result = qword_1002AD010;
  if (!qword_1002AD010) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OctaneAsset);
  }
  return result;
}

uint64_t sub_10006D95C(uint64_t a1)
{
  v4[0] = &unk_1001F90E8;
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_10006D9D0()
{
  uint64_t v0 = URL.lastPathComponent.getter();
  unint64_t v2 = v1;
  v16[0] = 46LL;
  v16[1] = 0xE100000000000000LL;
  __int128 v15[2] = v16;
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_10018DFF4(1LL, 1u, sub_10006E2CC, (uint64_t)v15, v0, v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    v16[0] = _swiftEmptyArrayStorage;
    sub_100032050();
    uint64_t v5 = (void *)v16[0];
    uint64_t v6 = v3 + 56;
    do
    {
      uint64_t v7 = *(void *)(v6 - 24);
      swift_bridgeObjectRetain();
      uint64_t v8 = static String._fromSubstring(_:)(v7);
      uint64_t v10 = v9;
      swift_bridgeObjectRelease();
      v16[0] = v5;
      unint64_t v11 = v5[2];
      if (v11 >= v5[3] >> 1)
      {
        sub_100032050();
        uint64_t v5 = (void *)v16[0];
      }

      _OWORD v5[2] = v11 + 1;
      uint64_t v12 = &v5[2 * v11];
      v12[4] = v8;
      v12[5] = v10;
      v6 += 32LL;
      --v4;
    }

    while (v4);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = _swiftEmptyArrayStorage;
  }

  if (v5[2] == 2LL)
  {
    uint64_t v13 = v5[6];
    swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_10006DB7C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = URL.lastPathComponent.getter();
  unint64_t v6 = v5;
  v32[0] = 46LL;
  v32[1] = 0xE100000000000000LL;
  uint64_t v31 = v32;
  swift_bridgeObjectRetain(v5);
  uint64_t v7 = sub_10018DFF4(1LL, 1u, sub_10006E270, (uint64_t)v30, v4, v6);
  sub_10001EDA0();
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v33 = a1;
    v32[0] = _swiftEmptyArrayStorage;
    sub_100032050();
    uint64_t v9 = (void *)v32[0];
    uint64_t v10 = (void *)(v7 + 56);
    do
    {
      uint64_t v11 = *(v10 - 3);
      uint64_t v12 = *v10;
      swift_bridgeObjectRetain(*v10);
      uint64_t v13 = static String._fromSubstring(_:)(v11);
      uint64_t v15 = v14;
      swift_bridgeObjectRelease(v12);
      v32[0] = v9;
      unint64_t v16 = v9[2];
      if (v16 >= v9[3] >> 1)
      {
        sub_100032050();
        uint64_t v9 = (void *)v32[0];
      }

      _OWORD v9[2] = v16 + 1;
      uint64_t v17 = &v9[2 * v16];
      v17[4] = v13;
      v17[5] = v15;
      v10 += 4;
      --v8;
    }

    while (v8);
    swift_bridgeObjectRelease(v7);
    a1 = v33;
  }

  else
  {
    swift_bridgeObjectRelease(v7);
    uint64_t v9 = _swiftEmptyArrayStorage;
  }

  if (v9[2])
  {
    uint64_t v18 = v9[4];
    uint64_t v19 = v9[5];
    swift_bridgeObjectRetain(v19);
    sub_10001EDA0();
    *a2 = v18;
    a2[1] = v19;
    uint64_t v20 = (char *)a2 + *(int *)(type metadata accessor for OctaneAsset(0LL) + 20);
    uint64_t v21 = sub_10006E2F0();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32LL))(v20, a1, v21);
  }

  else
  {
    sub_10001EDA0();
    uint64_t v23 = type metadata accessor for OctaneError(0LL);
    unint64_t v24 = sub_10006E28C();
    swift_allocError(v23, v24, 0LL, 0LL);
    uint64_t v26 = v25;
    uint64_t v27 = sub_10006E2F0();
    uint64_t v28 = *(void *)(v27 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v26, a1, v27);
    uint64_t v29 = swift_storeEnumTagMultiPayload(v26, v23, 1LL);
    swift_willThrow(v29);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(a1, v27);
  }

void *sub_10006DDCC(void *a1)
{
  uint64_t v3 = sub_10006E2F0();
  uint64_t v41 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_10001DAD0();
  uint64_t v40 = v5 - v4;
  uint64_t v6 = type metadata accessor for OctaneAsset(0LL);
  uint64_t v39 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_10001DAD0();
  uint64_t v9 = (void *)(v8 - v7);
  uint64_t v10 = sub_1000175B0(&qword_1002A9720);
  __chkstk_darwin(v10);
  sub_10001DAD0();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = (void *)objc_opt_self(&OBJC_CLASS___NSFileManager);
  id v15 = [v14 defaultManager];
  int v16 = NSFileManager.fileExists(at:)();

  if ((~v16 & 0x101) != 0) {
    return _swiftEmptyArrayStorage;
  }
  id v17 = [v14 defaultManager];
  URL.path(percentEncoded:)(0);
  NSString v18 = String._bridgeToObjectiveC()();
  sub_10001EDA0();
  id v42 = 0LL;
  id v19 = [v17 contentsOfDirectoryAtPath:v18 error:&v42];

  id v20 = v42;
  if (v19)
  {
    uint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, &type metadata for String);
    id v22 = v20;

    __chkstk_darwin(v23);
    *(&v35 - 2) = (uint64_t)a1;
    unint64_t v24 = sub_100169278((void (*)(void *))sub_10006E254, (uint64_t)(&v35 - 4), v21);
    swift_bridgeObjectRelease(v21);
    uint64_t v25 = v24[2];
    unint64_t v36 = v24;
    if (v25)
    {
      uint64_t v26 = (char *)v24 + ((*(unsigned __int8 *)(v41 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80));
      uint64_t v27 = *(void (**)(uint64_t, char *, uint64_t))(v41 + 16);
      uint64_t v37 = *(void *)(v41 + 72);
      uint64_t v38 = v27;
      a1 = _swiftEmptyArrayStorage;
      while (1)
      {
        v38(v13, v26, v3);
        sub_100049CA8(v13, 0LL);
        uint64_t v28 = v40;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32))(v40, v13, v3);
        sub_10006DB7C(v28, v9);
        if (v1)
        {
          swift_bridgeObjectRelease(a1);
          swift_bridgeObjectRelease(v36);
          return a1;
        }

        if ((swift_isUniquelyReferenced_nonNull_native(a1) & 1) == 0)
        {
          sub_10006E2E4();
          a1 = v30;
        }

        unint64_t v29 = a1[2];
        if (v29 >= a1[3] >> 1)
        {
          sub_10006E2E4();
          a1 = v31;
        }

        a1[2] = v29 + 1;
        sub_100055654( (uint64_t)v9,  (uint64_t)a1 + ((*(unsigned __int8 *)(v39 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))
        + *(void *)(v39 + 72) * v29);
        v26 += v37;
        if (!--v25) {
          goto LABEL_16;
        }
      }
    }

    else
    {
      a1 = _swiftEmptyArrayStorage;
LABEL_16:
      sub_100049CA8(v13, 1LL);
    }

    swift_bridgeObjectRelease(v36);
  }

  else
  {
    id v32 = v42;
    _convertNSErrorToError(_:)(v20);

    swift_willThrow(v33);
  }

  return a1;
}

uint64_t sub_10006E17C(void *a1)
{
  uint64_t v2 = type metadata accessor for URL.DirectoryHint(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = a1[1];
  v9[0] = *a1;
  v9[1] = v6;
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for URL.DirectoryHint.inferFromPath(_:),  v2);
  unint64_t v7 = sub_10001B4A0();
  URL.appending<A>(path:directoryHint:)(v9, v5, &type metadata for String, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_10006E254(void *a1)
{
  return sub_10006E17C(a1);
}

uint64_t sub_10006E270(uint64_t *a1)
{
  return sub_100190440(a1, *(uint64_t **)(v1 + 16)) & 1;
}

unint64_t sub_10006E28C()
{
  unint64_t result = qword_1002AD048;
  if (!qword_1002AD048)
  {
    uint64_t v1 = type metadata accessor for OctaneError(255LL);
    unint64_t result = swift_getWitnessTable("}-\b", v1);
    atomic_store(result, (unint64_t *)&qword_1002AD048);
  }

  return result;
}

uint64_t sub_10006E2CC(uint64_t *a1)
{
  return sub_10006E270(a1) & 1;
}

void sub_10006E2E4()
{
}

uint64_t sub_10006E2F0()
{
  return type metadata accessor for URL(0LL);
}

void sub_10006E2F8(void (*a1)(uint64_t *__return_ptr))
{
}

void sub_10006E36C(void (*a1)(uint64_t *__return_ptr))
{
}

uint64_t sub_10006E3E4(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) == 0)
  {
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v6 = *(void *)(a4 + 72);
    if (v6 >= (uint64_t)0xFFFFFFFF80000000LL)
    {
      if (v6 <= 0x7FFFFFFF)
      {
        int v7 = *(_DWORD *)(a4 + 56);
        uint64_t v8 = *(kevent **)(a4 + 64);
        uint64_t v9 = (const timespec *)v12;
        goto LABEL_8;
      }

      goto LABEL_13;
    }

    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }

  uint64_t v6 = *(void *)(a4 + 72);
  if (v6 > 0x7FFFFFFF) {
    goto LABEL_14;
  }
  int v7 = *(_DWORD *)(a4 + 56);
  uint64_t v8 = *(kevent **)(a4 + 64);
  uint64_t v9 = 0LL;
LABEL_8:
  int v10 = sub_100171B58(v7, 0LL, 0, v8, v6, v9);
  uint64_t result = swift_release(a4);
  if (!v4) {
    return v10;
  }
  return result;
}

_BYTE *sub_10006E4DC@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_10006E4E8(_BYTE *a1@<X8>)
{
  *a1 = static _UInt24.min.getter();
  sub_10001945C();
}

BOOL sub_10006E508(unsigned __int8 *a1)
{
  return sub_10002A32C(*a1, *v1);
}

uint64_t sub_10006E514@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100027DA0(*a1, *v2);
  *a2 = result;
  return result;
}

void sub_10006E540(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = sub_1000D61C8(*a1, *v2);
  sub_10001945C();
}

void sub_10006E568(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = sub_1000B548C(*a1, *v2);
  sub_10001945C();
}

BOOL sub_10006E590(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000D61F8(a1, *a2);
}

uint64_t sub_10006E598@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000B5490(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_10006E5C8@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000B54E0(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_10006E5F8(unsigned __int8 *a1)
{
  return sub_1000D61B4(*a1);
}

uint64_t sub_10006E600(unsigned __int8 *a1)
{
  return sub_1000D6238(*a1);
}

uint64_t sub_10006E608(unsigned __int8 *a1)
{
  return sub_1000B552C(*a1);
}

uint64_t sub_10006E610@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000B418C(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_10006E63C(char *a1)
{
  return sub_100029D78(*a1, *v1);
}

BOOL sub_10006E648(unsigned __int8 *a1)
{
  return sub_1000B553C(*a1, *v1);
}

BOOL sub_10006E654(unsigned __int8 *a1)
{
  return sub_100029D94(*a1, *v1);
}

BOOL sub_10006E660()
{
  return sub_1000B5564(*v0);
}

uint64_t sub_10006E668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10006E680(unsigned __int8 *a1)
{
  return sub_1000B419C(*a1);
}

unsigned __int8 *sub_10006E688@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_10006E698(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_10006E6A4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_1000B40F0();
  *a1 = result;
  return result;
}

uint64_t static SelectorRegistrationID.initialRegistrationID.getter()
{
  return 0xFFFFFFFFLL;
}

uint64_t *sub_10006E6D0(uint64_t a1)
{
  uint64_t v2 = *v1;
  debugOnly(_:)(a1);
  type metadata accessor for Selector(0LL, *(void *)(v2 + 80), *(void *)(v2 + 88), v3);
  sub_10006E730(v1[8], v1[9]);
  swift_bridgeObjectRelease();
  swift_release(v1[5]);
  swift_release(v1[6]);
  return v1;
}

void sub_10006E730(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10006E77C(uint64_t a1)
{
  return swift_deallocClassInstance(v1, 80LL, 7LL);
}

ASOctaneSupportXPCService::SelectorRegistrationID __swiftcall SelectorRegistrationID.nextRegistrationID()()
{
  return (ASOctaneSupportXPCService::SelectorRegistrationID)(*v0)++;
}

void sub_10006E7AC()
{
  uint64_t v1 = pthread_self();
  if (pthread_equal(v1, *(pthread_t *)(*(void *)(v0 + 40) + 32LL))) {
    sub_10006E81C();
  }
  else {
    sub_10006E2F8((void (*)(uint64_t *__return_ptr))sub_10006ED20);
  }
}

unint64_t sub_10006E81C()
{
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 32032LL;
  v2._object = (void *)0xE200000000000000LL;
  String.append(_:)(v2);
  return 0xD000000000000018LL;
}

void sub_10006E8C0()
{
}

uint64_t sub_10006E8E0(uint64_t a1)
{
  uint64_t v9 = a1;
  swift_errorRetain(a1);
  uint64_t v2 = sub_1000175B0(&qword_1002A9710);
  if ((swift_dynamicCast(&v7, &v9, v2, &type metadata for ChannelError, 6LL) & 1) == 0
    || ((uint64_t v3 = v7, v4 = v8, result = sub_100038470(v7, v8), v4 == 3) ? (v6 = v3 == 3) : (v6 = 0), !v6))
  {
    swift_willThrow();
    return swift_errorRetain(a1);
  }

  return result;
}

BOOL static SelectorRegistrationID.== infix(_:_:)(int a1, int a2)
{
  return a1 == a2;
}

void SelectorRegistrationID.hash(into:)(int a1, Swift::UInt32 a2)
{
}

void SelectorRegistrationID.hashValue.getter(uint64_t a1)
{
  Swift::UInt32 v1 = a1;
  sub_100060600(a1);
  Hasher._combine(_:)(v1);
  Hasher._finalize()();
  sub_1000354B8();
}

void sub_10006E9DC()
{
}

void sub_10006E9E4(int a1)
{
}

Swift::Int sub_10006E9EC()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t sub_10006EA30()
{
  unint64_t result = qword_1002AD050[0];
  if (!qword_1002AD050[0])
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SelectorRegistrationID,  &type metadata for SelectorRegistrationID);
    atomic_store(result, qword_1002AD050);
  }

  return result;
}

uint64_t sub_10006EA6C(uint64_t a1)
{
  v2[0] = &unk_1001F9210;
  v2[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[2] = (char *)&value witness table for Builtin.Int32 + 64;
  v2[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[5] = (char *)&value witness table for Builtin.Int32 + 64;
  v2[6] = (char *)&value witness table for Builtin.RawPointer + 64;
  v2[7] = (char *)&value witness table for Builtin.Int64 + 64;
  return swift_initClassMetadata2(a1, 0LL, 8LL, v2, a1 + 96);
}

uint64_t type metadata accessor for Selector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Selector);
}

void type metadata accessor for SelectorRegistrationID()
{
}

uint64_t sub_10006EB0C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10006EB58 + 4 * byte_1001F9105[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10006EB8C + 4 * byte_1001F9100[v4]))();
}

uint64_t sub_10006EB8C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006EB94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10006EB9CLL);
  }
  return result;
}

uint64_t sub_10006EBA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10006EBB0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10006EBB4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006EBBC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for SelectorLifecycleState()
{
}

void type metadata accessor for SelectorEventSet()
{
}

unint64_t sub_10006EBE4()
{
  unint64_t result = qword_1002AD0D8;
  if (!qword_1002AD0D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F93D4, &unk_10027B820);
    atomic_store(result, (unint64_t *)&qword_1002AD0D8);
  }

  return result;
}

unint64_t sub_10006EC24()
{
  unint64_t result = qword_1002AD0E0;
  if (!qword_1002AD0E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F92A4, &unk_10027B820);
    atomic_store(result, (unint64_t *)&qword_1002AD0E0);
  }

  return result;
}

unint64_t sub_10006EC64()
{
  unint64_t result = qword_1002AD0E8;
  if (!qword_1002AD0E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F92D4, &unk_10027B820);
    atomic_store(result, (unint64_t *)&qword_1002AD0E8);
  }

  return result;
}

unint64_t sub_10006ECA4()
{
  unint64_t result = qword_1002AD0F0;
  if (!qword_1002AD0F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F930C, &unk_10027B820);
    atomic_store(result, (unint64_t *)&qword_1002AD0F0);
  }

  return result;
}

unint64_t sub_10006ECE4()
{
  unint64_t result = qword_1002AD0F8[0];
  if (!qword_1002AD0F8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F9474, &unk_10027B800);
    atomic_store(result, qword_1002AD0F8);
  }

  return result;
}

unint64_t sub_10006ED20@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10006E81C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10006ED50(uint64_t a1)
{
  uint64_t v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  sub_10006ED8C(a1);
  return v3;
}

uint64_t sub_10006ED8C(uint64_t a1)
{
  return v1;
}

uint64_t sub_10006EDBC()
{
  return v0;
}

uint64_t sub_10006EDE8()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t static System.coreCount.getter()
{
  return sysconf(58);
}

void static System.enumerateInterfaces()()
{
  uint64_t v1 = sub_10006F1DC();
  LODWORD(v9) = sub_10006F1CC(v1, v2, v3, v4, v5, v6, v7, v8, (uint64_t)_swiftEmptyArrayStorage, v22);
  if (v0)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    if (v23)
    {
      type metadata accessor for NIONetworkInterface();
      id v17 = v23;
      do
      {
        sub_10006F174();
        uint64_t v9 = sub_10013F340((uint64_t)v24);
        if (v9)
        {
          uint64_t v18 = v9;
          uint64_t v19 = swift_retain();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v19);
          unint64_t v20 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= v20 >> 1) {
            sub_10006F19C(v20);
          }
          sub_10006F1E4();
          sub_10006F1DC();
          LODWORD(v9) = swift_release(v18);
        }

        id v17 = (void *)*v17;
      }

      while (v17);
    }

    sub_10006F1F4(v9, v10, v11, v12, v13, v14, v15, v16, v21);
  }

  sub_10006F1B4();
}

void static System.enumerateDevices()()
{
  uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  12LL,  0LL,  _swiftEmptyArrayStorage);
  uint64_t v1 = sub_10006F1DC();
  LODWORD(v9) = sub_10006F1CC(v1, v2, v3, v4, v5, v6, v7, v8, v21, v23);
  if (v0)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    if (v24)
    {
      type metadata accessor for NIONetworkDevice.Backing();
      id v17 = v24;
      do
      {
        sub_10006F174();
        uint64_t v9 = sub_10013FF48((uint64_t)v25);
        if (v9)
        {
          uint64_t v18 = v9;
          uint64_t v19 = swift_retain();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v19);
          unint64_t v20 = *(void *)(v22 + 24);
          if (*(void *)(v22 + 16) >= v20 >> 1) {
            sub_10006F19C(v20);
          }
          sub_10006F1E4();
          sub_10006F1DC();
          LODWORD(v9) = swift_release(v18);
        }

        id v17 = (void *)*v17;
      }

      while (v17);
    }

    sub_10006F1F4(v9, v10, v11, v12, v13, v14, v15, v16, v22);
  }

  sub_10006F1B4();
}

uint64_t sub_10006F02C(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 1LL, &v4, a1 + 88);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for Box(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Box);
}

ValueMetadata *type metadata accessor for System()
{
  return &type metadata for System;
}

uint64_t sub_10006F0B8(uint64_t a1, char a2)
{
  uint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *uint64_t v2 = v5;
  uint64_t v7 = 0LL;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000LL) == 0 && (v5 & 0x4000000000000000LL) == 0)
  {
    if (a1 <= *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      return result;
    }
    uint64_t v7 = 1LL;
  }

  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v5);
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v8 <= a1) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v7,  v9,  a2 & 1,  v5);
  *uint64_t v2 = result;
  return result;
}

uint64_t sub_10006F174()
{
  return swift_allocObject(v0, 80LL, 7LL);
}

uint64_t sub_10006F19C@<X0>(unint64_t a1@<X8>)
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(a1 > 1);
}

  ;
}

uint64_t sub_10006F1CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ifaddrs *a10)
{
  a10 = 0LL;
  return sub_100025218(&a10);
}

uint64_t sub_10006F1DC()
{
  return specialized Array._endMutation()();
}

uint64_t sub_10006F1E4()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v1, v0);
}

void sub_10006F1F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
}

void ByteBufferFoundationError.hashValue.getter(uint64_t a1)
{
}

void ByteBuffer.readData(length:)(int a1)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(unsigned int *)(v1 + 8);
  uint64_t v5 = *(unsigned int *)(v1 + 12);
  sub_1000706D4();
  unint64_t v9 = v6 | (v7 << 32) | (v8 << 48);
  sub_10001EDE0();
  uint64_t v10 = sub_1000706C8();
  ByteBuffer.getData(at:length:byteTransferStrategy:)(v10, v11, 2, v3, v4 | (v5 << 32), v9);
  sub_100070700();
  if (v9 >> 60 == 15) {
    goto LABEL_5;
  }
  unsigned int v12 = v4 + a1;
  if (__CFADD__((_DWORD)v4, a1))
  {
    __break(1u);
  }

  else if (v5 >= v12)
  {
    *(_DWORD *)(v1 + 8) = v12;
LABEL_5:
    sub_1000706F4();
    sub_100023E74();
    return;
  }

  __break(1u);
}

void ByteBuffer.readData(length:byteTransferStrategy:)(int a1, char a2)
{
  uint64_t v5 = *(void *)v2;
  uint64_t v6 = *(unsigned int *)(v2 + 8);
  uint64_t v7 = *(unsigned int *)(v2 + 12);
  sub_1000706D4();
  unint64_t v11 = v8 | (v9 << 32) | (v10 << 48);
  sub_10001EDE0();
  uint64_t v12 = sub_1000706C8();
  ByteBuffer.getData(at:length:byteTransferStrategy:)(v12, v13, a2, v5, v6 | (v7 << 32), v11);
  sub_100070700();
  unsigned int v14 = v6 + a1;
  if (__CFADD__((_DWORD)v6, a1))
  {
    __break(1u);
  }

  else if (v7 >= v14)
  {
    *(_DWORD *)(v2 + 8) = v14;
LABEL_5:
    sub_1000706F4();
    sub_100023E74();
    return;
  }

  __break(1u);
}

void ByteBuffer.getData(at:length:byteTransferStrategy:)( uint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v12 = type metadata accessor for Data.Deallocator(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  int v15 = (uint64_t (**)())&v25[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  BOOL v16 = __OFSUB__(a1, a5);
  int64_t v17 = a1 - a5;
  if (v16)
  {
    __break(1u);
  }

  else
  {
    if (v17 < 0 || (a2 & 0x8000000000000000LL) != 0)
    {
LABEL_14:
      sub_10002A580();
      return;
    }

    if (HIDWORD(a5) >= a5)
    {
      if ((uint64_t)((HIDWORD(a5) - a5) - a2) >= v17)
      {
        if (a3) {
          BOOL v18 = a3 != 1 && a2 <= 0x40000;
        }
        else {
          BOOL v18 = 1;
        }
        swift_beginAccess(a4 + 24, v25, 0LL, 0LL);
        uint64_t v19 = *(void *)(a4 + 24) + ((a6 >> 24) & 0xFFFF00 | BYTE6(a6)) + a5;
        uint64_t v20 = v19 + v17;
        if (v18)
        {
          Data.init(bytes:count:)(v19 + v17, a2);
        }

        else
        {
          uint64_t v21 = swift_allocObject(&unk_10027BA78, 24LL, 7LL);
          *(void *)(v21 + 16) = a4;
          *int v15 = sub_100070254;
          v15[1] = (uint64_t (*)())v21;
          uint64_t v22 = enum case for Data.Deallocator.custom(_:);
          uint64_t v23 = *(void (**)(uint64_t (**)(), uint64_t, uint64_t))(v13 + 104);
          swift_unknownObjectRetain(a4);
          v23(v15, v22, v12);
          Data.init(bytesNoCopy:count:deallocator:)(v20, a2, v15);
        }
      }

      goto LABEL_14;
    }
  }

  __break(1u);
}

void ByteBuffer.getData(at:length:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void ByteBuffer.getString(at:length:encoding:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v11);
  ByteBuffer.getData(at:length:byteTransferStrategy:)(a1, a2, 2, a4, a5, a6 & 0xFFFFFFFFFFFFFFLL);
  if (v12 >> 60 != 15)
  {
    uint64_t v13 = sub_1000706C8();
    v14(v13);
    uint64_t v15 = sub_1000706F4();
    String.init(data:encoding:)(v15);
    uint64_t v16 = sub_1000706F4();
    sub_10003AACC(v16, v17);
  }

  sub_10002A580();
}

void ByteBuffer.readString(length:encoding:)(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(v1 + 8);
  unsigned int v3 = *(_DWORD *)(v1 + 12);
  if (v3 < v2)
  {
    __break(1u);
    goto LABEL_9;
  }

  int v4 = a1;
  if (v3 - v2 >= a1)
  {
    sub_1000706D4();
    uint64_t v5 = sub_1000706C8();
    ByteBuffer.getString(at:length:encoding:)(v5, v6, v7, v8, v9, v10);
    if (v11)
    {
      unsigned int v12 = v2 + v4;
      if (!__CFADD__(v2, v4))
      {
        if (v3 >= v12)
        {
          *(_DWORD *)(v1 + 8) = v12;
          return;
        }

uint64_t ByteBuffer.writeString(_:encoding:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = ByteBuffer.setString(_:encoding:at:)(a1, a2, a3);
  if (!v4)
  {
    int v6 = *(_DWORD *)(v3 + 12);
    BOOL v7 = __CFADD__(v6, (_DWORD)result);
    unsigned int v8 = v6 + result;
    if (v7)
    {
      __break(1u);
LABEL_9:
      __break(1u);
      goto LABEL_10;
    }

    unsigned int v9 = *(_DWORD *)(v3 + 16);
    unsigned int v10 = *(unsigned __int8 *)(v3 + 22) | (*(unsigned __int16 *)(v3 + 20) << 8);
    BOOL v7 = v9 >= v10;
    unsigned int v11 = v9 - v10;
    if (!v7) {
      goto LABEL_9;
    }
    if (v11 < v8)
    {
LABEL_10:
      __break(1u);
      return result;
    }

    *(_DWORD *)(v3 + 12) = v8;
  }

  return result;
}

uint64_t ByteBuffer.setString(_:encoding:at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = String.data(using:allowLossyConversion:)(a3, 0LL, a1, a2);
  if (v4 >> 60 != 15)
  {
    __chkstk_darwin(v3);
    __asm { BR              X10 }
  }

  unint64_t v5 = sub_10007025C();
  uint64_t v6 = swift_allocError(&type metadata for ByteBufferFoundationError, v5, 0LL, 0LL);
  return swift_willThrow(v6);
}

void sub_10006F848()
{
  *(void *)(v4 - 72) = v3;
  if (v0 >> 32 >= (int)v0)
  {
    sub_10003AA74(v0, v2);
    uint64_t v5 = sub_100070718((int)v0, v0 >> 32);
    if (!v1)
    {
      uint64_t v6 = v5;
      sub_1000706BC();
      if ((v6 & 0x100000000LL) == 0) {
        JUMPOUT(0x10006F820LL);
      }
      JUMPOUT(0x10006F80CLL);
    }

    sub_1000706BC();
    __break(1u);
    JUMPOUT(0x10006F8C4LL);
  }

  __break(1u);
  JUMPOUT(0x10006F8A8LL);
}

uint64_t ByteBuffer.init(data:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  sub_100070710(a1);
  return v4;
}

void ByteBufferAllocator.buffer(data:)( uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = Data.count.getter(a1, a2);
  if ((v11 & 0x8000000000000000LL) == 0)
  {
    int v12 = v11;
    if (v11)
    {
      type metadata accessor for ByteBuffer._Storage();
      static ByteBuffer._Storage.reallocated(minimumCapacity:allocator:)(v12, a3, a4, a5, a6);
    }

    else
    {
      if (qword_1002A8CC8 != -1) {
        swift_once(&qword_1002A8CC8, sub_10005B580);
      }
      uint64_t v13 = swift_retain();
    }

    __chkstk_darwin(v13);
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x10006FB94LL);
}

Swift::Int ByteBuffer.writeContiguousBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006FC48( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, uint64_t, uint64_t))ByteBuffer.setContiguousBytes<A>(_:at:));
}

uint64_t ByteBuffer.setContiguousBytes<A>(_:at:)()
{
  return v1;
}

Swift::Int ByteBuffer.writeData<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006FC48(a1, a2, a3, ByteBuffer.setData<A>(_:at:));
}

Swift::Int sub_10006FC48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, uint64_t, uint64_t))
{
  Swift::Int v5 = a4(a1, *(unsigned int *)(v4 + 12), a2, a3);
  ByteBuffer.moveWriterIndex(forwardBy:)(v5);
  return v5;
}

uint64_t ByteBuffer.setData<A>(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v40 = a2;
  uint64_t v6 = sub_100070748(255LL, a4, a3, a4, (uint64_t)&associated type descriptor for DataProtocol.Regions);
  uint64_t v7 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness( a4,  a3,  v6,  &protocol requirements base descriptor for DataProtocol,  &associated conformance descriptor for DataProtocol.DataProtocol.Regions: BidirectionalCollection)
                             + 8)
                 + 8LL);
  uint64_t v38 = v7;
  uint64_t v9 = sub_100070748(0LL, v7, v6, v8, (uint64_t)&associated type descriptor for Sequence.Element);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  int v12 = (char *)&v34 - v11;
  type metadata accessor for Optional(0LL, v9);
  sub_1000706E4();
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v34 - v14;
  uint64_t v36 = swift_checkMetadataState(0LL, v6);
  sub_1000706E4();
  __chkstk_darwin(v16);
  uint64_t v37 = sub_100070748(0LL, v7, v17, v18, (uint64_t)&associated type descriptor for Sequence.Iterator);
  uint64_t v35 = *(void *)(v37 - 8);
  sub_1000706E4();
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v34 - v20;
  Swift::Int v22 = dispatch thunk of Collection.count.getter(a3, *(void *)(*(void *)(*(void *)(a4 + 8) + 8LL) + 8LL));
  ByteBuffer.reserveCapacity(minimumWritableBytes:)(v22);
  uint64_t v39 = a3;
  dispatch thunk of DataProtocol.regions.getter(a3, a4);
  uint64_t v23 = v21;
  uint64_t v24 = v36;
  uint64_t v25 = v38;
  dispatch thunk of Sequence.makeIterator()(v36, v38);
  uint64_t v26 = v25;
  uint64_t v27 = v37;
  swift_getAssociatedConformanceWitness( v26,  v24,  v37,  &protocol requirements base descriptor for Sequence,  &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v28 = 0LL;
  while (1)
  {
    uint64_t v29 = sub_1000706C8();
    dispatch thunk of IteratorProtocol.next()(v29, v30);
    uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
    if (__OFADD__(v40, v28)) {
      break;
    }
    swift_getAssociatedConformanceWitness( a4,  v39,  v9,  &protocol requirements base descriptor for DataProtocol,  &associated conformance descriptor for DataProtocol.DataProtocol.Regions.Sequence.Element: ContiguousBytes);
    uint64_t v32 = ByteBuffer.setContiguousBytes<A>(_:at:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    BOOL v33 = __OFADD__(v28, v32);
    v28 += v32;
    if (v33)
    {
      __break(1u);
LABEL_7:
      (*(void (**)(char *, uint64_t))(v35 + 8))(v23, v27);
      return v28;
    }
  }

  __break(1u);
  return result;
}

void sub_10006FF40(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void *ByteBufferView.regions.getter@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = v1;
  uint64_t v4 = *v1;
  int v5 = *((_DWORD *)v2 + 4);
  __int16 v6 = *((_WORD *)v2 + 10);
  char v7 = *((_BYTE *)v2 + 22);
  uint64_t v8 = v2[3];
  uint64_t v9 = v2[4];
  uint64_t v10 = v2[1];
  uint64_t result = sub_100018F0C(v2);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v10;
  *(_DWORD *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 2sub_10006F0B8(12LL, 0) = v6;
  *(_BYTE *)(a1 + 22) = v7;
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  return result;
}

void *sub_10006FFEC@<X0>(uint64_t a1@<X8>)
{
  return ByteBufferView.regions.getter(a1);
}

uint64_t sub_100070024( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return DataProtocol.firstRange<A, B>(of:in:)(a1, a2, a7, a3, a4, a8, a5, a6);
}

uint64_t sub_100070048( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return DataProtocol.lastRange<A, B>(of:in:)(a1, a2, a7, a3, a4, a8, a5, a6);
}

uint64_t sub_100070070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return DataProtocol.copyBytes<A>(to:count:)(a1, a2, a3, a5, a4);
}

uint64_t sub_100070080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return DataProtocol.copyBytes<A>(to:from:)(a1, a2, a3, a6, a4, a7, a5);
}

uint64_t sub_100070098( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return DataProtocol.copyBytes<A, B>(to:from:)(a1, a2, a3, a7, a4, a5, a8, a6);
}

uint64_t sub_1000700B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MutableDataProtocol.resetBytes<A>(in:)(a1, a4, a2, a5, a3);
}

void Data.init(buffer:byteTransferStrategy:)(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  int v4 = a2;
  unint64_t v5 = HIDWORD(a2);
  int v6 = HIDWORD(a2) - a2;
  if (HIDWORD(a2) < a2)
  {
    __break(1u);
    goto LABEL_7;
  }

  ByteBuffer.getData(at:length:byteTransferStrategy:)( a2,  (HIDWORD(a2) - a2),  a4,  a1,  a2,  a3 & 0xFFFFFFFFFFFFFFLL);
  if (v7 >> 60 != 15)
  {
    swift_release();
    if (!__CFADD__(v4, v6))
    {
      if (v5 >= (v4 + v6))
      {
        sub_1000706F4();
        return;
      }

      goto LABEL_8;
    }

void *sub_100070164( uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(unsigned int *__return_ptr, uint64_t *, uint64_t))
{
  uint64_t v7 = a1;
  __int16 v8 = a2;
  char v9 = BYTE2(a2);
  char v10 = BYTE3(a2);
  char v11 = BYTE4(a2);
  char v12 = BYTE5(a2);
  uint64_t result = a4(&v6, &v7, a3);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

uint64_t sub_100070244()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100070254()
{
  return swift_unknownObjectRelease(*(void *)(v0 + 16));
}

unint64_t sub_10007025C()
{
  unint64_t result = qword_1002AD180;
  if (!qword_1002AD180)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ByteBufferFoundationError,  &type metadata for ByteBufferFoundationError);
    atomic_store(result, (unint64_t *)&qword_1002AD180);
  }

  return result;
}

void sub_100070298(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
}

uint64_t sub_1000702B4(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v6 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_14:
      __break(1u);
      return result;
    }

    v6 += a1 - result;
  }

  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_14;
  }

  __DataStorage._length.getter();
  if (v6)
  {
    uint64_t result = sub_10007073C();
    if (v2) {
      return result;
    }
    return v8;
  }

  else
  {
    uint64_t result = sub_10007073C();
    if (v2) {
      return result;
    }
    return v9;
  }

void *sub_100070384@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *(*a3)(uint64_t *__return_ptr, uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_10010EE94(a1, a2, a3);
  if (!v4)
  {
    *(_DWORD *)a4 = (_DWORD)result;
    *(_BYTE *)(a4 + 4) = BYTE4(result) & 1;
  }

  return result;
}

uint64_t sub_1000703B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = ByteBuffer._setBytes(_:at:)(a1, a2, *(_DWORD *)(v3 + 24));
  *a3 = result;
  return result;
}

unint64_t sub_1000703FC()
{
  unint64_t result = qword_1002AD188;
  if (!qword_1002AD188)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ByteBufferFoundationError,  &type metadata for ByteBufferFoundationError);
    atomic_store(result, (unint64_t *)&qword_1002AD188);
  }

  return result;
}

unint64_t sub_10007043C()
{
  unint64_t result = qword_1002AD190;
  if (!qword_1002AD190)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ByteBuffer.ByteTransferStrategy,  &type metadata for ByteBuffer.ByteTransferStrategy);
    atomic_store(result, (unint64_t *)&qword_1002AD190);
  }

  return result;
}

unint64_t sub_10007047C()
{
  unint64_t result = qword_1002AD198;
  if (!qword_1002AD198)
  {
    uint64_t v1 = sub_100018EC0(&qword_1002AD1A0);
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for CollectionOfOne<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1002AD198);
  }

  return result;
}

unint64_t sub_1000704C4()
{
  unint64_t result = qword_1002AD1A8;
  if (!qword_1002AD1A8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ByteBufferView,  &type metadata for ByteBufferView);
    atomic_store(result, (unint64_t *)&qword_1002AD1A8);
  }

  return result;
}

unint64_t sub_100070504()
{
  unint64_t result = qword_1002AD1B0;
  if (!qword_1002AD1B0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ByteBufferView,  &type metadata for ByteBufferView);
    atomic_store(result, (unint64_t *)&qword_1002AD1B0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for ByteBufferFoundationError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100070580 + 4 * asc_1001F9520[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000705A0 + 4 * byte_1001F9525[v4]))();
  }
}

_BYTE *sub_100070580(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1000705A0(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000705A8(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000705B0(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000705B8(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000705C0(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ByteBufferFoundationError()
{
  return &type metadata for ByteBufferFoundationError;
}

uint64_t _s20ByteTransferStrategyOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100070628 + 4 * byte_1001F952F[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10007065C + 4 * byte_1001F952A[v4]))();
}

uint64_t sub_10007065C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100070664(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10007066CLL);
  }
  return result;
}

uint64_t sub_100070678(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100070680LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100070684(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007068C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ByteBuffer.ByteTransferStrategy()
{
  return &type metadata for ByteBuffer.ByteTransferStrategy;
}

void sub_1000706A8(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
}

uint64_t sub_1000706BC()
{
  return sub_10003AACC(v0, v1);
}

uint64_t sub_1000706C8()
{
  return v0;
}

  ;
}

  ;
}

uint64_t sub_1000706F4()
{
  return v0;
}

uint64_t sub_100070700()
{
  return swift_release(v0);
}

uint64_t sub_100070710(uint64_t a1)
{
  return sub_10003A9EC(a1, v1);
}

uint64_t sub_100070718(uint64_t a1, uint64_t a2)
{
  return sub_1000702B4(a1, a2);
}

uint64_t sub_100070724(uint64_t a1, uint64_t a2)
{
  return sub_1000702B4(a1, a2);
}

void *sub_100070730( uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(unsigned int *__return_ptr, uint64_t *, uint64_t))
{
  return sub_100070164(a1, a2, a3, a4);
}

uint64_t sub_10007073C()
{
  return v0();
}

uint64_t sub_100070748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return swift_getAssociatedTypeWitness(a1, a2, a3, v5, a5);
}

uint64_t destroy for LegacyCreateAppReceiptResponse(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 24);
  if (v1 >> 60 != 15) {
    return sub_10003A9EC(*(void *)(result + 16), v1);
  }
  return result;
}

uint64_t initializeWithCopy for LegacyCreateAppReceiptResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  int v3 = (uint64_t *)(a2 + 16);
  unint64_t v4 = *(void *)(a2 + 24);
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v3;
  }

  else
  {
    uint64_t v5 = *v3;
    sub_10003AA88(*v3, *(void *)(a2 + 24));
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v4;
  }

  return a1;
}

uint64_t assignWithCopy for LegacyCreateAppReceiptResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  int v3 = (_OWORD *)(a1 + 16);
  unint64_t v4 = (uint64_t *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) >> 60 != 15LL)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      sub_10003AA88(*v4, *(void *)(a2 + 24));
      uint64_t v8 = *(void *)(a1 + 16);
      unint64_t v9 = *(void *)(a1 + 24);
      *(void *)(a1 + 16) = v7;
      *(void *)(a1 + 24) = v5;
      sub_10003A9EC(v8, v9);
      return a1;
    }

    sub_100047E84(a1 + 16);
    goto LABEL_6;
  }

  if (v5 >> 60 == 15)
  {
LABEL_6:
    *int v3 = *(_OWORD *)v4;
    return a1;
  }

  uint64_t v6 = *v4;
  sub_10003AA88(*v4, *(void *)(a2 + 24));
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v5;
  return a1;
}

uint64_t assignWithTake for LegacyCreateAppReceiptResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  unint64_t v4 = (_OWORD *)(a1 + 16);
  unint64_t v5 = (void *)(a2 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  if (v6 >> 60 != 15)
  {
    unint64_t v7 = *(void *)(a2 + 24);
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = *v5;
      *(void *)(a1 + 24) = v7;
      sub_10003A9EC(v8, v6);
      return a1;
    }

    sub_100047E84(a1 + 16);
  }

  *unint64_t v4 = *(_OWORD *)v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for LegacyCreateAppReceiptResponse(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 32))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      BOOL v4 = v3 >= 2;
      int v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LegacyCreateAppReceiptResponse( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 32) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LegacyCreateAppReceiptResponse()
{
  return &type metadata for LegacyCreateAppReceiptResponse;
}

void *sub_1000709B8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *unsigned int v3 = *a2;
    unsigned int v3 = (void *)(v10 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain();
  }

  else
  {
    *(void *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    uint64_t v5 = *(int *)(a3 + 24);
    unint64_t v6 = (void *)(a1 + v5);
    unint64_t v7 = (uint64_t *)((char *)a2 + v5);
    uint64_t v8 = (int *)sub_1000175B0(&qword_1002AD1B8);
    if (sub_10001D158((uint64_t)v7, 1LL, (uint64_t)v8))
    {
      uint64_t v9 = sub_1000175B0(&qword_1002AD1C0);
      memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64LL));
    }

    else
    {
      uint64_t v11 = v7[1];
      *unint64_t v6 = *v7;
      v6[1] = v11;
      uint64_t v12 = v7[3];
      _OWORD v6[2] = v7[2];
      v6[3] = v12;
      uint64_t v13 = v7[5];
      v6[4] = v7[4];
      v6[5] = v13;
      uint64_t v14 = v7[7];
      v6[6] = v7[6];
      v6[7] = v14;
      v6[8] = v7[8];
      uint64_t v15 = v8[9];
      uint64_t v16 = (char *)v6 + v15;
      uint64_t v17 = (char *)v7 + v15;
      uint64_t v18 = *(void *)((char *)v7 + v15 + 8);
      *(void *)uint64_t v16 = *(void *)((char *)v7 + v15);
      *((void *)v16 + 1) = v18;
      uint64_t v19 = *(void *)((char *)v7 + v15 + 24);
      *((void *)v16 + 2) = *(void *)((char *)v7 + v15 + 16);
      *((void *)v16 + 3) = v19;
      uint64_t v20 = *(void *)((char *)v7 + v15 + 40);
      *((void *)v16 + 4) = *(void *)((char *)v7 + v15 + 32);
      *((void *)v16 + 5) = v20;
      uint64_t v21 = *(void *)((char *)v7 + v15 + 56);
      *((void *)v16 + 6) = *(void *)((char *)v7 + v15 + 48);
      *((void *)v16 + 7) = v21;
      Swift::Int v22 = (int *)type metadata accessor for AppTransaction(0LL);
      uint64_t v23 = v22[8];
      uint64_t v43 = &v17[v23];
      char v44 = &v16[v23];
      uint64_t v24 = type metadata accessor for Date(0LL);
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16LL);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v25(v44, v43, v24);
      v25(&v16[v22[9]], &v17[v22[9]], v24);
      v25(&v16[v22[10]], &v17[v22[10]], v24);
      uint64_t v26 = v22[11];
      uint64_t v27 = &v16[v26];
      uint64_t v28 = &v17[v26];
      uint64_t v29 = *((void *)v28 + 1);
      *(void *)uint64_t v27 = *(void *)v28;
      *((void *)v27 + 1) = v29;
      uint64_t v30 = v22[12];
      uint64_t v31 = &v16[v30];
      uint64_t v32 = &v17[v30];
      uint64_t v33 = *((void *)v32 + 1);
      *(void *)uint64_t v31 = *(void *)v32;
      *((void *)v31 + 1) = v33;
      uint64_t v34 = v8[10];
      uint64_t v35 = (char *)v6 + v34;
      uint64_t v36 = (char *)v7 + v34;
      uint64_t v37 = type metadata accessor for P256.Signing.PrivateKey(0LL);
      uint64_t v38 = *(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16LL);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38(v35, v36, v37);
      uint64_t v39 = v8[11];
      uint64_t v40 = (char *)v6 + v39;
      uint64_t v41 = (char *)v7 + v39;
      *(void *)uint64_t v40 = *(void *)v41;
      v40[8] = v41[8];
      *((_BYTE *)v6 + v8[12]) = *((_BYTE *)v7 + v8[12]);
      sub_10001762C((uint64_t)v6, 0LL, 1LL, (uint64_t)v8);
    }
  }

  return v3;
}

uint64_t sub_100070C50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  uint64_t v3 = sub_1000175B0(&qword_1002AD1B8);
  uint64_t result = sub_10001D158(v2, 1LL, v3);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = v2 + *(int *)(v3 + 36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v6 = (int *)type metadata accessor for AppTransaction(0LL);
    uint64_t v7 = v5 + v6[8];
    uint64_t v8 = type metadata accessor for Date(0LL);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
    v9(v7, v8);
    v9(v5 + v6[9], v8);
    v9(v5 + v6[10], v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = v2 + *(int *)(v3 + 40);
    uint64_t v11 = type metadata accessor for P256.Signing.PrivateKey(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  }

  return result;
}

uint64_t sub_100070DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (void *)(a1 + v4);
  unint64_t v6 = (void *)(a2 + v4);
  uint64_t v7 = (int *)sub_1000175B0(&qword_1002AD1B8);
  if (sub_10001D158((uint64_t)v6, 1LL, (uint64_t)v7))
  {
    uint64_t v8 = sub_1000175B0(&qword_1002AD1C0);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64LL));
  }

  else
  {
    uint64_t v9 = v6[1];
    *uint64_t v5 = *v6;
    v5[1] = v9;
    uint64_t v10 = v6[3];
    _OWORD v5[2] = v6[2];
    void v5[3] = v10;
    uint64_t v11 = v6[5];
    v5[4] = v6[4];
    v5[5] = v11;
    uint64_t v12 = v6[7];
    v5[6] = v6[6];
    v5[7] = v12;
    v5[8] = v6[8];
    uint64_t v13 = v7[9];
    uint64_t v14 = (char *)v5 + v13;
    uint64_t v15 = (char *)v6 + v13;
    uint64_t v16 = *(void *)((char *)v6 + v13 + 8);
    *(void *)uint64_t v14 = *(void *)((char *)v6 + v13);
    *((void *)v14 + 1) = v16;
    uint64_t v17 = *(void *)((char *)v6 + v13 + 24);
    *((void *)v14 + 2) = *(void *)((char *)v6 + v13 + 16);
    *((void *)v14 + 3) = v17;
    uint64_t v18 = *(void *)((char *)v6 + v13 + 40);
    *((void *)v14 + 4) = *(void *)((char *)v6 + v13 + 32);
    *((void *)v14 + 5) = v18;
    uint64_t v19 = *(void *)((char *)v6 + v13 + 56);
    *((void *)v14 + 6) = *(void *)((char *)v6 + v13 + 48);
    *((void *)v14 + 7) = v19;
    uint64_t v20 = (int *)type metadata accessor for AppTransaction(0LL);
    uint64_t v21 = v20[8];
    uint64_t v41 = &v15[v21];
    id v42 = &v14[v21];
    uint64_t v22 = type metadata accessor for Date(0LL);
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16LL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23(v42, v41, v22);
    v23(&v14[v20[9]], &v15[v20[9]], v22);
    v23(&v14[v20[10]], &v15[v20[10]], v22);
    uint64_t v24 = v20[11];
    uint64_t v25 = &v14[v24];
    uint64_t v26 = &v15[v24];
    uint64_t v27 = *((void *)v26 + 1);
    *(void *)uint64_t v25 = *(void *)v26;
    *((void *)v25 + 1) = v27;
    uint64_t v28 = v20[12];
    uint64_t v29 = &v14[v28];
    uint64_t v30 = &v15[v28];
    uint64_t v31 = *((void *)v30 + 1);
    *(void *)uint64_t v29 = *(void *)v30;
    *((void *)v29 + 1) = v31;
    uint64_t v32 = v7[10];
    uint64_t v33 = (char *)v5 + v32;
    uint64_t v34 = (char *)v6 + v32;
    uint64_t v35 = type metadata accessor for P256.Signing.PrivateKey(0LL);
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16LL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36(v33, v34, v35);
    uint64_t v37 = v7[11];
    uint64_t v38 = (char *)v5 + v37;
    uint64_t v39 = (char *)v6 + v37;
    *(void *)uint64_t v38 = *(void *)v39;
    v38[8] = v39[8];
    *((_BYTE *)v5 + v7[12]) = *((_BYTE *)v6 + v7[12]);
    sub_10001762C((uint64_t)v5, 0LL, 1LL, (uint64_t)v7);
  }

  return a1;
}

uint64_t sub_100071014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (void *)(a1 + v4);
  unint64_t v6 = (void *)(a2 + v4);
  uint64_t v7 = (int *)sub_1000175B0(&qword_1002AD1B8);
  int v8 = sub_10001D158((uint64_t)v5, 1LL, (uint64_t)v7);
  int v9 = sub_10001D158((uint64_t)v6, 1LL, (uint64_t)v7);
  if (!v8)
  {
    if (!v9)
    {
      *uint64_t v5 = *v6;
      v5[1] = v6[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      _OWORD v5[2] = v6[2];
      void v5[3] = v6[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v5[4] = v6[4];
      v5[5] = v6[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v5[6] = v6[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v5[7] = v6[7];
      v5[8] = v6[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v34 = v7[9];
      uint64_t v35 = (char *)v5 + v34;
      uint64_t v36 = (char *)v6 + v34;
      *(void *)uint64_t v35 = *(void *)((char *)v6 + v34);
      *((void *)v35 + 1) = *(void *)((char *)v6 + v34 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v35 + 2) = *((void *)v36 + 2);
      *((void *)v35 + 3) = *((void *)v36 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v35 + 4) = *((void *)v36 + 4);
      *((void *)v35 + 5) = *((void *)v36 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v35 + 6) = *((void *)v36 + 6);
      *((void *)v35 + 7) = *((void *)v36 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v37 = (int *)type metadata accessor for AppTransaction(0LL);
      uint64_t v38 = v37[8];
      uint64_t v58 = &v35[v38];
      uint64_t v39 = &v36[v38];
      uint64_t v40 = type metadata accessor for Date(0LL);
      uint64_t v41 = *(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 24LL);
      v41(v58, v39, v40);
      v41(&v35[v37[9]], &v36[v37[9]], v40);
      v41(&v35[v37[10]], &v36[v37[10]], v40);
      uint64_t v42 = v37[11];
      uint64_t v43 = &v35[v42];
      char v44 = &v36[v42];
      *(void *)uint64_t v43 = *(void *)v44;
      *((void *)v43 + 1) = *((void *)v44 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v45 = v37[12];
      uint64_t v46 = &v35[v45];
      uint64_t v47 = &v36[v45];
      *(void *)uint64_t v46 = *(void *)v47;
      *((void *)v46 + 1) = *((void *)v47 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v48 = v7[10];
      uint64_t v49 = (char *)v5 + v48;
      uint64_t v50 = (char *)v6 + v48;
      uint64_t v51 = type metadata accessor for P256.Signing.PrivateKey(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 24LL))(v49, v50, v51);
      uint64_t v52 = v7[11];
      v53 = (char *)v5 + v52;
      v54 = (char *)v6 + v52;
      uint64_t v55 = *(void *)v54;
      v53[8] = v54[8];
      *(void *)v53 = v55;
      *((_BYTE *)v5 + v7[12]) = *((_BYTE *)v6 + v7[12]);
      return a1;
    }

    sub_100071534((uint64_t)v5);
    goto LABEL_6;
  }

  if (v9)
  {
LABEL_6:
    uint64_t v32 = sub_1000175B0(&qword_1002AD1C0);
    memcpy(v5, v6, *(void *)(*(void *)(v32 - 8) + 64LL));
    return a1;
  }

  *uint64_t v5 = *v6;
  v5[1] = v6[1];
  _OWORD v5[2] = v6[2];
  void v5[3] = v6[3];
  v5[4] = v6[4];
  v5[5] = v6[5];
  v5[6] = v6[6];
  v5[7] = v6[7];
  v5[8] = v6[8];
  uint64_t v10 = v7[9];
  uint64_t v11 = (char *)v5 + v10;
  uint64_t v12 = (char *)v6 + v10;
  *(void *)uint64_t v11 = *(void *)((char *)v6 + v10);
  *((void *)v11 + 1) = *(void *)((char *)v6 + v10 + 8);
  *((void *)v11 + 2) = *(void *)((char *)v6 + v10 + 16);
  *((void *)v11 + 3) = *(void *)((char *)v6 + v10 + 24);
  *((void *)v11 + 4) = *(void *)((char *)v6 + v10 + 32);
  *((void *)v11 + 5) = *(void *)((char *)v6 + v10 + 40);
  *((void *)v11 + 6) = *(void *)((char *)v6 + v10 + 48);
  *((void *)v11 + 7) = *(void *)((char *)v6 + v10 + 56);
  uint64_t v13 = (int *)type metadata accessor for AppTransaction(0LL);
  uint64_t v14 = v13[8];
  uint64_t v56 = &v12[v14];
  uint64_t v57 = &v11[v14];
  uint64_t v15 = type metadata accessor for Date(0LL);
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(v57, v56, v15);
  v16(&v11[v13[9]], &v12[v13[9]], v15);
  v16(&v11[v13[10]], &v12[v13[10]], v15);
  uint64_t v17 = v13[11];
  uint64_t v18 = &v11[v17];
  uint64_t v19 = &v12[v17];
  *(void *)uint64_t v18 = *(void *)v19;
  *((void *)v18 + 1) = *((void *)v19 + 1);
  uint64_t v20 = v13[12];
  uint64_t v21 = &v11[v20];
  uint64_t v22 = &v12[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  *((void *)v21 + 1) = *((void *)v22 + 1);
  uint64_t v23 = v7[10];
  uint64_t v24 = (char *)v5 + v23;
  uint64_t v25 = (char *)v6 + v23;
  uint64_t v26 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27(v24, v25, v26);
  uint64_t v28 = v7[11];
  uint64_t v29 = (char *)v5 + v28;
  uint64_t v30 = (char *)v6 + v28;
  uint64_t v31 = *(void *)v30;
  v29[8] = v30[8];
  *(void *)uint64_t v29 = v31;
  *((_BYTE *)v5 + v7[12]) = *((_BYTE *)v6 + v7[12]);
  sub_10001762C((uint64_t)v5, 0LL, 1LL, (uint64_t)v7);
  return a1;
}

uint64_t sub_100071534(uint64_t a1)
{
  uint64_t v2 = sub_1000175B0(&qword_1002AD1B8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100071574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)(a1 + v4);
  unint64_t v6 = (char *)(a2 + v4);
  uint64_t v7 = (int *)sub_1000175B0(&qword_1002AD1B8);
  if (sub_10001D158((uint64_t)v6, 1LL, (uint64_t)v7))
  {
    uint64_t v8 = sub_1000175B0(&qword_1002AD1C0);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64LL));
  }

  else
  {
    memcpy(v5, v6, 0x48uLL);
    uint64_t v9 = v7[9];
    uint64_t v10 = &v5[v9];
    uint64_t v11 = &v6[v9];
    __int128 v12 = *(_OWORD *)&v6[v9 + 16];
    *(_OWORD *)uint64_t v10 = *(_OWORD *)&v6[v9];
    *((_OWORD *)v10 + 1) = v12;
    __int128 v13 = *(_OWORD *)&v6[v9 + 48];
    *((_OWORD *)v10 + 2) = *(_OWORD *)&v6[v9 + 32];
    *((_OWORD *)v10 + 3) = v13;
    uint64_t v14 = (int *)type metadata accessor for AppTransaction(0LL);
    uint64_t v15 = v14[8];
    uint64_t v27 = &v10[v15];
    uint64_t v16 = &v11[v15];
    uint64_t v17 = type metadata accessor for Date(0LL);
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32LL);
    v18(v27, v16, v17);
    v18(&v10[v14[9]], &v11[v14[9]], v17);
    v18(&v10[v14[10]], &v11[v14[10]], v17);
    *(_OWORD *)&v10[v14[11]] = *(_OWORD *)&v11[v14[11]];
    *(_OWORD *)&v10[v14[12]] = *(_OWORD *)&v11[v14[12]];
    uint64_t v19 = v7[10];
    uint64_t v20 = &v5[v19];
    uint64_t v21 = &v6[v19];
    uint64_t v22 = type metadata accessor for P256.Signing.PrivateKey(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32LL))(v20, v21, v22);
    uint64_t v23 = v7[11];
    uint64_t v24 = &v5[v23];
    uint64_t v25 = &v6[v23];
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    v5[v7[12]] = v6[v7[12]];
    sub_10001762C((uint64_t)v5, 0LL, 1LL, (uint64_t)v7);
  }

  return a1;
}

uint64_t sub_100071734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (void *)(a1 + v4);
  unint64_t v6 = (void *)(a2 + v4);
  uint64_t v7 = (int *)sub_1000175B0(&qword_1002AD1B8);
  int v8 = sub_10001D158((uint64_t)v5, 1LL, (uint64_t)v7);
  int v9 = sub_10001D158((uint64_t)v6, 1LL, (uint64_t)v7);
  if (!v8)
  {
    if (!v9)
    {
      uint64_t v30 = v6[1];
      *uint64_t v5 = *v6;
      v5[1] = v30;
      swift_bridgeObjectRelease();
      uint64_t v31 = v6[3];
      _OWORD v5[2] = v6[2];
      void v5[3] = v31;
      swift_bridgeObjectRelease();
      uint64_t v32 = v6[5];
      v5[4] = v6[4];
      v5[5] = v32;
      swift_bridgeObjectRelease();
      v5[6] = v6[6];
      swift_bridgeObjectRelease();
      uint64_t v33 = v6[8];
      v5[7] = v6[7];
      v5[8] = v33;
      swift_bridgeObjectRelease();
      uint64_t v34 = v7[9];
      uint64_t v35 = (char *)v5 + v34;
      uint64_t v36 = (char *)v6 + v34;
      uint64_t v37 = *(void *)((char *)v6 + v34 + 8);
      *(void *)uint64_t v35 = *(void *)((char *)v6 + v34);
      *((void *)v35 + 1) = v37;
      swift_bridgeObjectRelease();
      uint64_t v38 = *((void *)v36 + 3);
      *((void *)v35 + 2) = *((void *)v36 + 2);
      *((void *)v35 + 3) = v38;
      swift_bridgeObjectRelease();
      uint64_t v39 = *((void *)v36 + 5);
      *((void *)v35 + 4) = *((void *)v36 + 4);
      *((void *)v35 + 5) = v39;
      swift_bridgeObjectRelease();
      uint64_t v40 = *((void *)v36 + 7);
      *((void *)v35 + 6) = *((void *)v36 + 6);
      *((void *)v35 + 7) = v40;
      swift_bridgeObjectRelease();
      uint64_t v41 = (int *)type metadata accessor for AppTransaction(0LL);
      uint64_t v42 = v41[8];
      v64 = &v35[v42];
      uint64_t v43 = &v36[v42];
      uint64_t v44 = type metadata accessor for Date(0LL);
      uint64_t v45 = *(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 40LL);
      v45(v64, v43, v44);
      v45(&v35[v41[9]], &v36[v41[9]], v44);
      v45(&v35[v41[10]], &v36[v41[10]], v44);
      uint64_t v46 = v41[11];
      uint64_t v47 = &v35[v46];
      uint64_t v48 = (uint64_t *)&v36[v46];
      uint64_t v50 = *v48;
      uint64_t v49 = v48[1];
      *(void *)uint64_t v47 = v50;
      *((void *)v47 + 1) = v49;
      swift_bridgeObjectRelease();
      uint64_t v51 = v41[12];
      uint64_t v52 = &v35[v51];
      v53 = (uint64_t *)&v36[v51];
      uint64_t v55 = *v53;
      uint64_t v54 = v53[1];
      *(void *)uint64_t v52 = v55;
      *((void *)v52 + 1) = v54;
      swift_bridgeObjectRelease();
      uint64_t v56 = v7[10];
      uint64_t v57 = (char *)v5 + v56;
      uint64_t v58 = (char *)v6 + v56;
      uint64_t v59 = type metadata accessor for P256.Signing.PrivateKey(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 40LL))(v57, v58, v59);
      uint64_t v60 = v7[11];
      uint64_t v61 = (char *)v5 + v60;
      uint64_t v62 = (char *)v6 + v60;
      *(void *)uint64_t v61 = *(void *)v62;
      v61[8] = v62[8];
      *((_BYTE *)v5 + v7[12]) = *((_BYTE *)v6 + v7[12]);
      return v3;
    }

    sub_100071534((uint64_t)v5);
    goto LABEL_6;
  }

  if (v9)
  {
LABEL_6:
    uint64_t v28 = sub_1000175B0(&qword_1002AD1C0);
    memcpy(v5, v6, *(void *)(*(void *)(v28 - 8) + 64LL));
    return v3;
  }

  memcpy(v5, v6, 0x48uLL);
  uint64_t v10 = v7[9];
  uint64_t v11 = (char *)v5 + v10;
  __int128 v12 = (char *)v6 + v10;
  __int128 v13 = *(_OWORD *)((char *)v6 + v10 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)((char *)v6 + v10);
  *((_OWORD *)v11 + 1) = v13;
  __int128 v14 = *(_OWORD *)((char *)v6 + v10 + 48);
  *((_OWORD *)v11 + 2) = *(_OWORD *)((char *)v6 + v10 + 32);
  *((_OWORD *)v11 + 3) = v14;
  uint64_t v15 = (int *)type metadata accessor for AppTransaction(0LL);
  uint64_t v16 = v15[8];
  uint64_t v17 = &v11[v16];
  uint64_t v18 = &v12[v16];
  uint64_t v19 = type metadata accessor for Date(0LL);
  uint64_t v63 = v3;
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32LL);
  v20(v17, v18, v19);
  v20(&v11[v15[9]], &v12[v15[9]], v19);
  v20(&v11[v15[10]], &v12[v15[10]], v19);
  uint64_t v3 = v63;
  *(_OWORD *)&v11[v15[11]] = *(_OWORD *)&v12[v15[11]];
  *(_OWORD *)&v11[v15[12]] = *(_OWORD *)&v12[v15[12]];
  uint64_t v21 = v7[10];
  uint64_t v22 = (char *)v5 + v21;
  uint64_t v23 = (char *)v6 + v21;
  uint64_t v24 = type metadata accessor for P256.Signing.PrivateKey(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32LL))(v22, v23, v24);
  uint64_t v25 = v7[11];
  uint64_t v26 = (char *)v5 + v25;
  uint64_t v27 = (char *)v6 + v25;
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  *((_BYTE *)v5 + v7[12]) = *((_BYTE *)v6 + v7[12]);
  sub_10001762C((uint64_t)v5, 0LL, 1LL, (uint64_t)v7);
  return v3;
}

uint64_t sub_100071AB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100071ABC);
}

uint64_t sub_100071ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v10 = sub_1000175B0(&qword_1002AD1C0);
    return sub_10001D158(a1 + *(int *)(a3 + 24), a2, v10);
  }

uint64_t sub_100071B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100071B40);
}

uint64_t sub_100071B40(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = a2 + 1;
  }

  else
  {
    uint64_t v7 = sub_1000175B0(&qword_1002AD1C0);
    return sub_10001762C(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }

  return result;
}

uint64_t type metadata accessor for CreateAppReceiptResponse(uint64_t a1)
{
  uint64_t result = qword_1002AD220;
  if (!qword_1002AD220) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CreateAppReceiptResponse);
  }
  return result;
}

void sub_100071BE4(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = &unk_1001F9810;
  sub_100071C64(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(v2 - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
  }

void sub_100071C64(uint64_t a1)
{
  if (!qword_1002AD230)
  {
    uint64_t v2 = sub_100018EC0(&qword_1002AD1B8);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1002AD230);
    }
  }

uint64_t sub_100071CBC(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x737574617473LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v5 = 0xE600000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737574617473LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x64656B6F766572LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v8 = 0xE700000000000000LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64656B6F766572LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x655264656E676973LL && a2 == 0xED00007470696563LL)
  {
    swift_bridgeObjectRelease(0xED00007470696563LL);
    return 2LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x655264656E676973LL, 0xED00007470696563LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_100071E24(char a1)
{
  if (!a1) {
    return 0x737574617473LL;
  }
  if (a1 == 1) {
    return 0x64656B6F766572LL;
  }
  return 0x655264656E676973LL;
}

uint64_t sub_100071E84(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_1000175B0(&qword_1002AD278);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_1000728A4();
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100019F58(a1, v7);
  unint64_t v9 = sub_1000725B4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for CreateAppReceiptResponse.CodingKeys,  &type metadata for CreateAppReceiptResponse.CodingKeys,  v9,  v7,  v8);
  uint64_t v10 = *v3;
  char v18 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v10, &v18, v5);
  if (!v2)
  {
    uint64_t v11 = *((unsigned __int8 *)v3 + 8);
    char v17 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v11, &v17, v5);
    uint64_t v12 = (uint64_t)v3 + *(int *)(type metadata accessor for CreateAppReceiptResponse(0LL) + 24);
    char v16 = 2;
    uint64_t v13 = sub_1000175B0(&qword_1002AD1B8);
    unint64_t v14 = sub_1000725F0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v12, &v16, v5, v13, v14);
  }

  return sub_1000522F8(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
}

uint64_t sub_100071FD4(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x737574617473LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v5 = 0xE600000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737574617473LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x64656B6F766572LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v8 = 0xE700000000000000LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64656B6F766572LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x74706965636572LL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
    return 2LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74706965636572LL, 0xE700000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_100072120(char a1)
{
  if (!a1) {
    return 0x737574617473LL;
  }
  if (a1 == 1) {
    return 0x64656B6F766572LL;
  }
  return 0x74706965636572LL;
}

uint64_t sub_100072174(void *a1)
{
  uint64_t v3 = sub_1000175B0(&qword_1002AD268);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_1000728A4();
  uint64_t v6 = a1[3];
  uint64_t v5 = a1[4];
  sub_100019F58(a1, v6);
  unint64_t v7 = sub_100072578();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for LegacyCreateAppReceiptResponse.CodingKeys,  &type metadata for LegacyCreateAppReceiptResponse.CodingKeys,  v7,  v6,  v5);
  sub_100072894();
  KeyedEncodingContainer.encode(_:forKey:)(v8, v9, v10);
  if (!v1)
  {
    sub_100072894();
    KeyedEncodingContainer.encode(_:forKey:)(v11, v12, v13);
    sub_100048400();
    sub_100072894();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v14, v15, v16, v17, v18);
  }

  return sub_1000522F8(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
}

uint64_t sub_1000722B4(void *a1)
{
  uint64_t v3 = sub_1000175B0(&qword_1002AD290);
  __chkstk_darwin(v3);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100019F58(a1, v4);
  unint64_t v6 = sub_100072578();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for LegacyCreateAppReceiptResponse.CodingKeys,  &type metadata for LegacyCreateAppReceiptResponse.CodingKeys,  v6,  v4,  v5);
  if (v1)
  {
    sub_100019F7C(a1);
  }

  else
  {
    uint64_t v7 = sub_1000728BC();
    uint64_t v4 = KeyedDecodingContainer.decode(_:forKey:)(v7);
    v12[1] = 1;
    uint64_t v8 = sub_1000728BC();
    KeyedDecodingContainer.decode(_:forKey:)(v8, v9);
    v12[0] = 2;
    unint64_t v11 = sub_10004843C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, v12, v3, &type metadata for Data, v11);
    sub_10001DBBC();
    sub_100019F7C(a1);
  }

  return v4;
}

uint64_t sub_100072418()
{
  return sub_100071E24(*v0);
}

uint64_t sub_100072420@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100071CBC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100072444(uint64_t a1)
{
  unint64_t v2 = sub_1000725B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007246C(uint64_t a1)
{
  unint64_t v2 = sub_1000725B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100072494(void *a1)
{
  return sub_100071E84(a1);
}

uint64_t sub_1000724A8()
{
  return sub_100072120(*v0);
}

uint64_t sub_1000724B0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100071FD4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000724D4(uint64_t a1)
{
  unint64_t v2 = sub_100072578();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000724FC(uint64_t a1)
{
  unint64_t v2 = sub_100072578();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100072524@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000722B4(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5 & 1;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v7;
  }

  return result;
}

uint64_t sub_100072558(void *a1)
{
  return sub_100072174(a1);
}

unint64_t sub_100072578()
{
  unint64_t result = qword_1002AD270;
  if (!qword_1002AD270)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F9A6C, &type metadata for LegacyCreateAppReceiptResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AD270);
  }

  return result;
}

unint64_t sub_1000725B4()
{
  unint64_t result = qword_1002AD280;
  if (!qword_1002AD280)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F9A1C, &type metadata for CreateAppReceiptResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AD280);
  }

  return result;
}

unint64_t sub_1000725F0()
{
  unint64_t result = qword_1002AD288;
  if (!qword_1002AD288)
  {
    uint64_t v1 = sub_100018EC0(&qword_1002AD1B8);
    unint64_t result = swift_getWitnessTable(byte_100204D48, v1);
    atomic_store(result, (unint64_t *)&qword_1002AD288);
  }

  return result;
}

ValueMetadata *type metadata accessor for CreateAppReceiptResponse.CodingKeys()
{
  return &type metadata for CreateAppReceiptResponse.CodingKeys;
}

uint64_t _s25ASOctaneSupportXPCService24CreateAppReceiptResponseV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100072694 + 4 * byte_1001F97A5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000726C8 + 4 * asc_1001F97A0[v4]))();
}

uint64_t sub_1000726C8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000726D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000726D8LL);
  }
  return result;
}

uint64_t sub_1000726E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000726ECLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000726F0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000726F8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LegacyCreateAppReceiptResponse.CodingKeys()
{
  return &type metadata for LegacyCreateAppReceiptResponse.CodingKeys;
}

unint64_t sub_100072718()
{
  unint64_t result = qword_1002AD298;
  if (!qword_1002AD298)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F993C, &type metadata for LegacyCreateAppReceiptResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AD298);
  }

  return result;
}

unint64_t sub_100072758()
{
  unint64_t result = qword_1002AD2A0;
  if (!qword_1002AD2A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F99F4, &type metadata for CreateAppReceiptResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AD2A0);
  }

  return result;
}

unint64_t sub_100072798()
{
  unint64_t result = qword_1002AD2A8;
  if (!qword_1002AD2A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F9964, &type metadata for CreateAppReceiptResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AD2A8);
  }

  return result;
}

unint64_t sub_1000727D8()
{
  unint64_t result = qword_1002AD2B0;
  if (!qword_1002AD2B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F998C, &type metadata for CreateAppReceiptResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AD2B0);
  }

  return result;
}

unint64_t sub_100072818()
{
  unint64_t result = qword_1002AD2B8;
  if (!qword_1002AD2B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F98AC, &type metadata for LegacyCreateAppReceiptResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AD2B8);
  }

  return result;
}

unint64_t sub_100072858()
{
  unint64_t result = qword_1002AD2C0;
  if (!qword_1002AD2C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F98D4, &type metadata for LegacyCreateAppReceiptResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AD2C0);
  }

  return result;
}

  ;
}

  ;
}

uint64_t sub_1000728BC()
{
  return v0 - 80;
}

void *initializeWithCopy for DatagramVectorReadManager(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x48uLL);
}

uint64_t getEnumTagSinglePayload for DatagramVectorReadManager(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for DatagramVectorReadManager(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 4sub_10006F0B8(12LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 72) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DatagramVectorReadManager()
{
  return &type metadata for DatagramVectorReadManager;
}

uint64_t sub_100072944(int a1, uint64_t a2, char a3)
{
  uint64_t v5 = v3;
  type metadata accessor for BaseSocket();
  uint64_t v9 = sub_1000CC820(a1, a2, a3);
  if (!v4) {
    return sub_1000CCA40(v9);
  }
  uint64_t v10 = type metadata accessor for Socket();
  return swift_deallocPartialClassInstance(v5, v10, 20LL, 7LL);
}

uint64_t sub_1000729E0(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1000CCA40(a1);
  if (!v2 && (a2 & 1) != 0)
  {
    if (sub_1000CCD30())
    {
      sub_1001718CC();
    }

    else
    {
      unint64_t v5 = sub_100025100();
      sub_1000252D0((uint64_t)&type metadata for IOError, v5);
      sub_100073658();
      sub_100052668(v6, v7);
      swift_release();
    }
  }

  return v4;
}

uint64_t sub_100072A6C(unint64_t a1)
{
  if (a1 >> 62)
  {
    if (a1 >> 62 == 1)
    {
      swift_retain();
      char v1 = sub_100072BF0();
    }

    else
    {
      memcpy(__dst, (const void *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 16), sizeof(__dst));
      swift_retain();
      char v1 = sub_100072C4C(__dst);
    }
  }

  else
  {
    swift_retain();
    char v1 = sub_100072B64();
  }

  swift_release();
  return v1 & 1;
}

uint64_t sub_100072B64()
{
  return sub_1001507B0() & 1;
}

uint64_t sub_100072BF0()
{
  return sub_1001507B0() & 1;
}

uint64_t sub_100072C4C(void *__src)
{
  return sub_1001507B0() & 1;
}

uint64_t sub_100072CA0(uint64_t a1, const void *a2)
{
  return sub_100170F3C(a1, (uint64_t)__dst, 0x6Au) & 1;
}

uint64_t sub_100072D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  v6[0] = a2;
  _OWORD v6[2] = a4;
  v6[1] = a3;
  int v7 = a5;
  return sub_100170F3C(a1, (uint64_t)v6, 0x1Cu) & 1;
}

uint64_t sub_100072D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a2;
  v4[1] = a3;
  return sub_100170F3C(a1, (uint64_t)v4, 0x10u) & 1;
}

uint64_t sub_100072E40()
{
  if (!sub_1000CCD30())
  {
    unint64_t v9 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v9);
    sub_100073658();
    *(void *)uint64_t v6 = v10;
    unint64_t v8 = 0x80000001002194A0LL;
    int v3 = 9;
    goto LABEL_6;
  }

  uint64_t result = sub_100151F30(*(unsigned int *)(v0 + 16), 0xFFFFLL, 4103LL);
  if (!v1)
  {
    int v3 = result;
    if ((_DWORD)result)
    {
      unint64_t v4 = sub_100025100();
      sub_1000252D0((uint64_t)&type metadata for IOError, v4);
      sub_100073658();
      *(void *)uint64_t v6 = v7 + 8;
      unint64_t v8 = 0x800000010021A4D0LL;
LABEL_6:
      *(void *)(v6 + 8) = v8;
      *(_DWORD *)(v6 + 16) = v3;
      return swift_willThrow(v5);
    }
  }

  return result;
}

void sub_100072F00()
{
  if (!sub_100073674())
  {
    unint64_t v1 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v1);
    sub_100073658();
    sub_100052668(v2, v3);
    goto LABEL_5;
  }

  if (v0)
  {
    sub_100073684();
    sub_1001709F8();
LABEL_5:
    sub_100073668();
    return;
  }

  __break(1u);
}

void sub_100072F68(uint64_t a1, uint64_t a2)
{
  if (sub_1000CCD30())
  {
    sub_10017087C(*(unsigned int *)(v2 + 16), a1, a2);
  }

  else
  {
    unint64_t v5 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v5);
    sub_100073658();
    sub_100052668(v6, v7);
  }

  sub_100073668();
}

void sub_100072FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a1) {
    __break(1u);
  }
  v7[0] = a1;
  v7[1] = a2 - a1;
  sub_1000CCA94(v6, (uint64_t)v7, a3, a4, a5, a6);
}

void sub_100073050()
{
  if (!sub_100073674())
  {
    unint64_t v1 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v1);
    sub_100073658();
    sub_100052668(v2, v3);
    goto LABEL_5;
  }

  if (v0)
  {
    sub_100073684();
    sub_10017094C();
LABEL_5:
    sub_100073668();
    return;
  }

  __break(1u);
}

void sub_1000730B8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (!a1) {
    uint64_t v5 = 0LL;
  }
  v7[0] = a1;
  v7[1] = v5;
  sub_100073150(a3, a4, (uint64_t)v7, a5, (uint64_t)&v6);
}

void sub_100073150( uint64_t a1@<X0>, unsigned int *a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  unsigned int v9 = *a2;
  uint64_t v10 = *a4;
  if (*a4)
  {
    uint64_t v11 = a4[1] - v10;
    a1 = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL);
    __break(1u);
  }

  LODWORD(v11) = 0;
LABEL_5:
  uint64_t v17 = a1;
  unsigned int v18 = v9;
  uint64_t v19 = a3;
  *(void *)&__int128 v20 = v10;
  *((void *)&v20 + 1) = v11;
  if (!sub_1000CCD30())
  {
    unint64_t v14 = sub_100025100();
    uint64_t v15 = swift_allocError(&type metadata for IOError, v14, 0LL, 0LL);
    *(void *)uint64_t v16 = 0xD00000000000001FLL;
    *(void *)(v16 + 8) = 0x80000001002194A0LL;
    *(_DWORD *)(v16 + 16) = 9;
    swift_willThrow(v15);
    goto LABEL_11;
  }

  sub_10017131C();
  if (v5)
  {
LABEL_11:
    *a2 = v18;
    return;
  }

  if ((v13 & 1) != 0)
  {
    a4[2] = v17;
    a4[3] = v18;
    a4[4] = v19;
    a4[5] = 1LL;
    *((_OWORD *)a4 + 3) = v20;
    *((_BYTE *)a4 + 64) = 0;
  }

  *(void *)a5 = v12;
  *(_BYTE *)(a5 + 8) = v13 & 1;
  *a2 = v18;
}

off_t sub_100073300(int a1, off_t a2, off_t a3)
{
  if (sub_1000CCD30()) {
    return sub_10017172C(*(_DWORD *)(v3 + 16), a1, a2, a3);
  }
  unint64_t v8 = sub_100025100();
  sub_1000252D0((uint64_t)&type metadata for IOError, v8);
  sub_100073658();
  return sub_100052668(v9, v10);
}

void sub_100073388(unsigned __int8 a1)
{
  if (sub_1000CCD30())
  {
    sub_100171540(*(_DWORD *)(v1 + 16), a1);
  }

  else
  {
    unint64_t v3 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v3);
    sub_100073658();
    sub_100052668(v4, v5);
  }

uint64_t sub_1000733F0()
{
  return swift_deallocClassInstance(v0, 20LL, 7LL);
}

uint64_t type metadata accessor for Socket()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService6Socket);
}

uint64_t sub_100073420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100073474(a1, a2, a3, a4, (uint64_t (*)(void))sub_100072F00);
}

uint64_t sub_10007343C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100073474(a1, a2, a3, a4, (uint64_t (*)(void))sub_100072F68);
}

uint64_t sub_100073458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100073474(a1, a2, a3, a4, (uint64_t (*)(void))sub_100073050);
}

uint64_t sub_100073474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5();
  if (v5) {
    return v7;
  }
  return result;
}

off_t sub_1000734A0(int a1, off_t a2, off_t a3)
{
  off_t result = sub_100073300(a1, a2, a3);
  if (v3) {
    return v5;
  }
  return result;
}

void sub_1000734CC(unsigned __int8 a1)
{
}

unint64_t sub_1000734EC(uint64_t a1)
{
  unint64_t result = sub_100073510();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100073510()
{
  unint64_t result = qword_1002AD438;
  if (!qword_1002AD438)
  {
    uint64_t v1 = type metadata accessor for Socket();
    unint64_t result = swift_getWitnessTable(byte_1001FE174, v1);
    atomic_store(result, (unint64_t *)&qword_1002AD438);
  }

  return result;
}

uint64_t sub_10007354C@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100072CA0(a1, __dst);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

uint64_t sub_1000735A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100072D18(a1, *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(_DWORD *)(a2 + 24));
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

uint64_t sub_1000735E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100072D94(a1, *a2, a2[1]);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

uint64_t sub_100073610@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000735E0(a1, *(uint64_t **)(v2 + 16), a2);
}

uint64_t sub_100073628@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1000735A8(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_100073640@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10007354C(a1, *(const void **)(v2 + 16), a2);
}

  ;
}

  ;
}

BOOL sub_100073674()
{
  return sub_1000CCD30();
}

uint64_t sub_100073684()
{
  return *(unsigned int *)(v0 + 16);
}

void *sub_100073698@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X8>)
{
  uint64_t v11 = *(void *)(a1 + 80);
  uint64_t v10 = *(void *)(a1 + 88);
  swift_bridgeObjectRetain_n(v10, 2LL);
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v67 = a2;
  char v13 = (void *)sub_1000CC010(v12);
  sub_100019390();
  char v65 = a4;
  uint64_t v63 = v13;
  if (v13)
  {
    uint64_t v14 = v13[3];
    unint64_t v15 = v13[5];
    uint64_t v60 = v13[2];
    uint64_t v61 = v13[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v60 = 0LL;
    uint64_t v61 = 0LL;
    unint64_t v15 = 0LL;
    uint64_t v14 = 0LL;
  }

  char v59 = *(_BYTE *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  swift_bridgeObjectRetain();
  sub_10001DBCC();
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_100073BB8(v16, v17);
  if ((v19 & 1) != 0) {
    uint64_t v20 = 0LL;
  }
  else {
    uint64_t v20 = v18;
  }
  uint64_t v21 = *(void *)(a1 + 16);
  uint64_t v22 = *(void *)(a1 + 24);
  sub_10001DBCC();
  v64 = (void *)a3;
  uint64_t v23 = sub_100043978(v21, v22, a3, v67);
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  uint64_t v26 = sub_1000175B0(&qword_1002AD4D0);
  uint64_t inited = swift_initStackObject(v26, v69);
  *(_OWORD *)(inited + 16) = xmmword_1001F3C00;
  uint64_t v28 = *(void *)(a1 + 72);
  *(void *)(inited + 32) = *(void *)(a1 + 64);
  *(void *)(inited + 4sub_10006F0B8(12LL, 0) = v28;
  *(void *)(inited + 48) = v20;
  *(_BYTE *)(inited + 56) = 0;
  *(void *)(inited + 64) = v23;
  *(void *)(inited + 72) = v25;
  *(void *)(inited + 8sub_10006F0B8(12LL, 0) = 0LL;
  *(_BYTE *)(inited + 88) = 1;
  *(void *)(inited + 96) = 0LL;
  *(_WORD *)(inited + 104) = 1;
  *(_BYTE *)(inited + 106) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v29 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, &unk_100279808);
  uint64_t v30 = type metadata accessor for OctaneSubscription();
  uint64_t v31 = swift_dynamicCastClass(a1, v30);
  __int128 __dst = a5;
  uint64_t v62 = v29;
  if (!v31)
  {
    swift_bridgeObjectRetain();
    uint64_t v39 = 0LL;
    uint64_t v57 = 0LL;
    uint64_t v58 = 0LL;
    uint64_t v55 = 0LL;
    uint64_t v56 = 0LL;
    uint64_t v32 = a1;
    goto LABEL_32;
  }

  uint64_t v32 = v31;
  uint64_t v54 = v14;
  uint64_t v33 = *(void *)(v31 + 176);
  uint64_t v34 = *(unsigned __int8 *)(v31 + 184);
  swift_bridgeObjectRetain();
  uint64_t v53 = a1;
  swift_retain();
  uint64_t v35 = sub_1001BDFBC(v33, v34);
  uint64_t v57 = v36;
  uint64_t v58 = v35;
  uint64_t v55 = *(void *)(v32 + 200);
  uint64_t v56 = *(void *)(v32 + 192);
  uint64_t v37 = *(void *)(v32 + 144);
  if ((unint64_t)v37 >> 62)
  {
    if (v37 < 0) {
      uint64_t v33 = *(void *)(v32 + 144);
    }
    else {
      uint64_t v33 = v37 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v33);
    if (v14) {
      goto LABEL_10;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    uint64_t v39 = _swiftEmptyArrayStorage;
    goto LABEL_25;
  }

  uint64_t v14 = *(void *)((v37 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v14) {
    goto LABEL_24;
  }
LABEL_10:
  *(void *)&v68[0] = _swiftEmptyArrayStorage;
  sub_1000325A8(0LL, v14 & ~(v14 >> 63), 0);
  if (v14 < 0)
  {
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v38 = 0LL;
  uint64_t v39 = *(void **)&v68[0];
  do
  {
    if ((v37 & 0xC000000000000001LL) != 0) {
      uint64_t v40 = specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v37);
    }
    else {
      uint64_t v40 = swift_retain();
    }
    sub_1000D1F6C(v40);
    *(void *)&v68[0] = v39;
    unint64_t v42 = v39[2];
    unint64_t v41 = v39[3];
    if (v42 >= v41 >> 1)
    {
      sub_1000325A8((char *)(v41 > 1), v42 + 1, 1);
      uint64_t v39 = *(void **)&v68[0];
    }

    ++v38;
    v39[2] = v42 + 1;
    memcpy(&v39[14 * v42 + 4], __src, 0x69uLL);
  }

  while (v14 != v38);
  swift_bridgeObjectRelease();
LABEL_25:
  uint64_t v33 = *(void *)(v32 + 136);
  uint64_t v14 = v54;
  if (v33)
  {
    uint64_t v43 = swift_retain_n(*(void *)(v32 + 136), 2LL);
    sub_1000D1F6C(v43);
    uint64_t v32 = v53;
    if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) != 0)
    {
LABEL_27:
      unint64_t v44 = v39[2];
      if (v44 >= v39[3] >> 1)
      {
        sub_100075CD4();
        uint64_t v39 = v52;
      }

      v39[2] = v44 + 1;
      memcpy(&v39[14 * v44 + 4], v71, 0x69uLL);
      swift_release(v32);
      uint64_t v45 = v33;
      goto LABEL_31;
    }

uint64_t sub_100073BB8(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0LL;
  uint64_t v9 = &v11;
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL))
  {
    _StringGuts._slowWithCString<A>(_:)(v10, sub_10007532C, v8, a1, a2, &type metadata for Bool);
    sub_100019390();
    char v5 = v10[0];
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    v10[0] = a1;
    v10[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    char v5 = (a1 > 0x20u || ((0x100003E01uLL >> a1) & 1) == 0)
      && (uint64_t v6 = (_BYTE *)_swift_stdlib_strtod_clocale(v10, &v11, a1)) != 0LL
      && *v6 == 0;
    sub_100019390();
  }

  else
  {
    if ((a1 & 0x1000000000000000LL) != 0)
    {
      uint64_t v3 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v3 = _StringObject.sharedUTF8.getter(a1);
    }

    char v5 = sub_1000752D8(v3, v4, (void (*)(uint64_t *__return_ptr))sub_100075344);
    sub_100019390();
  }

  if ((v5 & 1) != 0) {
    return v11;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100073D14(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_100271660, a1, a2, &unk_1002A8E68);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x11) {
    return 17LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_100073D68()
{
  return 17LL;
}

uint64_t sub_100073D70(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100073DA4 + 4 * byte_1001F9B40[a1]))( 0x64692D6D657469LL,  0xE700000000000000LL);
}

uint64_t sub_100073DA4()
{
  return 7107189LL;
}

uint64_t sub_100073DB4()
{
  return 0x32656C746974LL;
}

unint64_t sub_100073DC8()
{
  return 0xD000000000000018LL;
}

uint64_t sub_100073F08()
{
  return 0x746E756F63736964LL;
}

uint64_t sub_100073F28()
{
  return 1684957547LL;
}

uint64_t sub_100073F3C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000175B0(&qword_1002AD488);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100019F58(a1, v9);
  unint64_t v11 = sub_100074E2C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for Product.CodingKeys,  &type metadata for Product.CodingKeys,  v11,  v9,  v10);
  v22[0] = 0;
  sub_100075CA0();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    sub_100075B24(*(void *)(v3 + 16), *(void *)(v3 + 24), 1);
    sub_100075B24(*(void *)(v3 + 32), *(void *)(v3 + 40), 2);
    sub_100075B24(*(void *)(v3 + 48), *(void *)(v3 + 56), 3);
    sub_100054254(v3 + 64, (uint64_t)v25);
    sub_100054254((uint64_t)v25, (uint64_t)v22);
    char v21 = 4;
    sub_1000175B0(&qword_1002AD450);
    uint64_t v12 = sub_1000750E0( &qword_1002AD498,  (uint64_t (*)(void))sub_100075154,  (uint64_t)&protocol witness table for String,  (const char *)&protocol conformance descriptor for <> [A : B]);
    sub_100075BE4(v12);
    v22[0] = 5;
    sub_100075CA0();
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, v15, v16);
    sub_100075B24(*(void *)(v3 + 88), *(void *)(v3 + 96), 6);
    sub_100075B24(*(void *)(v3 + 104), *(void *)(v3 + 112), 7);
    sub_100075B24(*(void *)(v3 + 120), *(void *)(v3 + 128), 8);
    sub_100075B24(*(void *)(v3 + 136), *(void *)(v3 + 144), 9);
    sub_100075C30(*(unsigned __int8 *)(v3 + 152), 10);
    sub_100075C30(*(unsigned __int8 *)(v3 + 153), 11);
    sub_100075B24(*(void *)(v3 + 160), *(void *)(v3 + 168), 12);
    sub_100075B24(*(void *)(v3 + 176), *(void *)(v3 + 184), 13);
    sub_100075B24(*(void *)(v3 + 192), *(void *)(v3 + 200), 14);
    sub_100054254(v3 + 208, (uint64_t)v24);
    sub_100054254((uint64_t)v24, (uint64_t)v22);
    char v21 = 15;
    sub_1000175B0(&qword_1002AD468);
    uint64_t v17 = sub_100075190( &qword_1002AD4B0,  (uint64_t (*)(void))sub_1000751F8,  (const char *)&protocol conformance descriptor for <A> [A]);
    sub_100075BE4(v17);
    sub_100054254(v3 + 216, (uint64_t)&v23);
    sub_100054254((uint64_t)&v23, (uint64_t)v22);
    char v21 = 16;
    unint64_t v18 = sub_100075234();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v22, &v21, v5, &type metadata for OctaneIAPType, v18);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void *sub_10007424C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v67 = sub_1000175B0(&qword_1002AD440);
  uint64_t v6 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  unint64_t v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v117 = 1;
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100019F58(a1, v9);
  unint64_t v11 = sub_100074E2C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for Product.CodingKeys,  &type metadata for Product.CodingKeys,  v11,  v9,  v10);
  unsigned int v70 = a1;
  if (v2)
  {
    unint64_t v83 = v2;
    sub_100075B58();
    uint64_t v13 = 0LL;
LABEL_4:
    sub_100019F7C(v70);
    uint64_t v90 = v13;
    char v91 = v117;
    *(_DWORD *)v92 = *(_DWORD *)v116;
    *(_DWORD *)&v92[3] = *(_DWORD *)&v116[3];
    uint64_t v93 = v9;
    uint64_t v94 = v118;
    uint64_t v95 = v10;
    uint64_t v96 = v86;
    uint64_t v97 = v3;
    uint64_t v98 = v85;
    uint64_t v99 = v69;
    unint64_t v100 = 0xD000000000000013LL;
    unint64_t v101 = 0x800000010021A500LL;
    uint64_t v102 = v6;
    uint64_t v103 = v84;
    v104 = v8;
    uint64_t v105 = v82;
    v106 = a1;
    uint64_t v107 = v80;
    uint64_t v108 = v81;
    uint64_t v109 = v68;
    sub_100075CEC();
    int v110 = v115;
    sub_100075C0C();
    uint64_t v111 = v77;
    uint64_t v112 = v74;
    uint64_t v113 = v75;
    uint64_t v114 = v71;
    return sub_100075CB4(4);
  }

  int v66 = a2;
  LOBYTE(v9sub_10006F0B8(12LL, 0) = 0;
  uint64_t v12 = v67;
  uint64_t v65 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v90, v67);
  char v117 = v15 & 1;
  LOBYTE(v9sub_10006F0B8(12LL, 0) = 1;
  int v16 = v15;
  uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v90, v12);
  uint64_t v19 = v18;
  LODWORD(v63) = v16;
  uint64_t v64 = v17;
  LOBYTE(v9sub_10006F0B8(12LL, 0) = 2;
  sub_100075D08(v17, v18);
  uint64_t v20 = sub_100075BA0();
  uint64_t v118 = v19;
  uint64_t v62 = v20;
  LOBYTE(v9sub_10006F0B8(12LL, 0) = 3;
  uint64_t v22 = v21;
  sub_100075D08(v20, v21);
  uint64_t v23 = sub_100075BA0();
  uint64_t v86 = v22;
  uint64_t v61 = v23;
  uint64_t v25 = v24;
  uint64_t v26 = sub_1000175B0(&qword_1002AD450);
  v87[0] = 4;
  uint64_t v27 = sub_1000750E0( &qword_1002AD458,  (uint64_t (*)(void))sub_100074F4C,  (uint64_t)&protocol witness table for String,  (const char *)&protocol conformance descriptor for <> [A : B]);
  uint64_t v85 = v25;
  sub_10001DBCC();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v26, v87, v12, v26, v27);
  uint64_t v28 = v90;
  LOBYTE(v9sub_10006F0B8(12LL, 0) = 6;
  swift_bridgeObjectRetain();
  uint64_t v29 = sub_100075BA0();
  uint64_t v69 = v28;
  uint64_t v60 = v29;
  sub_100075C78(v30, 7);
  uint64_t v31 = sub_100075BA0();
  uint64_t v84 = v28;
  char v59 = (char *)v31;
  sub_100075C78(v32, 8);
  uint64_t v33 = sub_100075BA0();
  uint64_t v82 = v28;
  uint64_t v58 = (void *)v33;
  LOBYTE(v9sub_10006F0B8(12LL, 0) = 9;
  uint64_t v35 = v34;
  swift_bridgeObjectRetain();
  uint64_t v36 = sub_100075BA0();
  uint64_t v80 = v35;
  uint64_t v81 = v36;
  unint64_t v83 = 0LL;
  uint64_t v37 = v82;
  LOBYTE(v9sub_10006F0B8(12LL, 0) = 10;
  uint64_t v39 = v38;
  sub_100075D08(v36, v38);
  char v40 = sub_100075CE0();
  unint64_t v83 = 0LL;
  uint64_t v68 = v39;
  int v73 = v40 & 1;
  LOBYTE(v9sub_10006F0B8(12LL, 0) = 11;
  char v41 = sub_100075CE0();
  unint64_t v83 = 0LL;
  int v72 = v41 & 1;
  LOBYTE(v9sub_10006F0B8(12LL, 0) = 12;
  uint64_t v78 = sub_100075BD0();
  uint64_t v79 = v42;
  unint64_t v83 = 0LL;
  LOBYTE(v9sub_10006F0B8(12LL, 0) = 13;
  swift_bridgeObjectRetain();
  uint64_t v76 = sub_100075BD0();
  uint64_t v77 = v43;
  unint64_t v83 = 0LL;
  LOBYTE(v9sub_10006F0B8(12LL, 0) = 14;
  swift_bridgeObjectRetain();
  uint64_t v74 = sub_100075BD0();
  uint64_t v75 = v44;
  unint64_t v83 = 0LL;
  uint64_t v45 = sub_1000175B0(&qword_1002AD468);
  v87[0] = 15;
  uint64_t v46 = sub_100075190( &qword_1002AD470,  (uint64_t (*)(void))sub_100074F88,  (const char *)&protocol conformance descriptor for <A> [A]);
  swift_bridgeObjectRetain();
  sub_100075C88(v45, (uint64_t)v87, v67, v45);
  unint64_t v83 = v46;
  if (v46)
  {
    sub_100075B3C();
    sub_100075BB0();
    sub_100075BC0();
    sub_100075BB8();
    sub_10001A420();
    sub_100075BC8();
    sub_10001DC10();
    sub_100075C04();
    sub_100023EF4();
    sub_100075C98();
    sub_100075D00();
    swift_bridgeObjectRelease();
    uint64_t v71 = 0LL;
LABEL_5:
    uint64_t v9 = v64;
    uint64_t v13 = v65;
    uint64_t v3 = v61;
    uint64_t v10 = v62;
    unint64_t v8 = v59;
    uint64_t v6 = v60;
    a1 = v58;
    goto LABEL_4;
  }

  uint64_t v47 = v90;
  char v88 = 16;
  unint64_t v48 = sub_100074FC4();
  uint64_t v71 = v47;
  sub_10001DBCC();
  sub_100075C88( (uint64_t)&type metadata for OctaneIAPType,  (uint64_t)&v88,  v67,  (uint64_t)&type metadata for OctaneIAPType);
  unint64_t v83 = v48;
  if (v48)
  {
    sub_100075B3C();
    sub_100075BB0();
    sub_100075BC0();
    sub_100075BB8();
    sub_10001A420();
    sub_100075BC8();
    sub_10001DC10();
    sub_100075C04();
    sub_100023EF4();
    sub_100075C98();
    sub_100075D00();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }

  sub_100075B3C();
  LODWORD(v67) = v89;
  *(void *)v87 = v65;
  v87[8] = v63 & 1;
  *(void *)&v87[16] = v64;
  *(void *)&v87[24] = v118;
  *(void *)&v87[32] = v62;
  *(void *)&v87[40] = v86;
  *(void *)&v87[48] = v61;
  *(void *)&v87[56] = v85;
  *(void *)&v87[64] = v28;
  *(void *)&v87[72] = 0xD000000000000013LL;
  unint64_t v63 = 0x800000010021A500LL;
  *(void *)&v87[80] = 0x800000010021A500LL;
  *(void *)&v87[88] = v60;
  uint64_t v49 = v84;
  *(void *)&v87[96] = v84;
  *(void *)&v87[104] = v59;
  *(void *)&v87[112] = v37;
  *(void *)&v87[120] = v58;
  *(void *)&v87[128] = v80;
  *(void *)&v87[136] = v81;
  *(void *)&v87[144] = v39;
  v87[152] = v73;
  v87[153] = v72;
  uint64_t v50 = v77;
  *(void *)&v87[160] = v78;
  *(void *)&v87[168] = v79;
  uint64_t v51 = v75;
  *(void *)&v87[176] = v76;
  *(void *)&v87[184] = v77;
  *(void *)&v87[192] = v74;
  *(void *)&v87[200] = v75;
  *(void *)&v87[208] = v71;
  v87[216] = v89;
  sub_100075000(v87);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v52 = v69;
  swift_bridgeObjectRelease();
  sub_10001A420();
  uint64_t v53 = v82;
  swift_bridgeObjectRelease();
  uint64_t v54 = v80;
  swift_bridgeObjectRelease();
  sub_100023EF4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001DC10();
  uint64_t v55 = v71;
  swift_bridgeObjectRelease();
  sub_100019F7C(v70);
  uint64_t v90 = v65;
  char v91 = v117;
  *(_DWORD *)v92 = *(_DWORD *)v116;
  *(_DWORD *)&v92[3] = *(_DWORD *)&v116[3];
  uint64_t v93 = v64;
  uint64_t v94 = v118;
  uint64_t v95 = v62;
  uint64_t v96 = v86;
  uint64_t v97 = v61;
  uint64_t v98 = v85;
  uint64_t v99 = v52;
  unint64_t v100 = 0xD000000000000013LL;
  unint64_t v101 = v63;
  uint64_t v102 = v60;
  uint64_t v103 = v49;
  v104 = v59;
  uint64_t v105 = v53;
  v106 = v58;
  uint64_t v107 = v54;
  uint64_t v108 = v81;
  uint64_t v109 = v39;
  sub_100075CEC();
  *(_DWORD *)(v56 + 154) = *(_DWORD *)(v56 + 218);
  sub_100075C0C();
  uint64_t v111 = v50;
  uint64_t v112 = v74;
  uint64_t v113 = v51;
  uint64_t v114 = v55;
  sub_100075CB4(v67);
  return memcpy(v66, v87, 0xD9uLL);
}

void sub_100074C7C(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_100074C88()
{
}

uint64_t sub_100074C90(uint64_t a1)
{
  return sub_1000B10D0(a1, *v1);
}

void sub_100074C98(uint64_t a1)
{
}

uint64_t sub_100074CA0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100073D14(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_100074CCC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100073D70(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100074CF4()
{
  return sub_100073F38(*v0);
}

uint64_t sub_100074CFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100073D64(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100074D20@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_100073D68();
  *a1 = result;
  return result;
}

uint64_t sub_100074D44(uint64_t a1)
{
  unint64_t v2 = sub_100074E2C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100074D6C(uint64_t a1)
{
  unint64_t v2 = sub_100074E2C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100074D94@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10007424C(a1, v5);
  if (!v2) {
    return memcpy(a2, v5, 0xD9uLL);
  }
  return result;
}

uint64_t sub_100074DDC(void *a1)
{
  return sub_100073F3C(a1);
}

unint64_t sub_100074E2C()
{
  unint64_t result = qword_1002AD448;
  if (!qword_1002AD448)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F9CD4, &type metadata for Product.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AD448);
  }

  return result;
}

void *sub_100074E68(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[7];
  uint64_t v5 = a1[8];
  uint64_t v6 = a1[12];
  uint64_t v7 = a1[14];
  uint64_t v8 = a1[16];
  uint64_t v9 = a1[18];
  uint64_t v10 = a1[21];
  uint64_t v12 = a1[23];
  uint64_t v13 = a1[25];
  uint64_t v14 = a1[26];
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v14);
  return a1;
}

unint64_t sub_100074F4C()
{
  unint64_t result = qword_1002AD460;
  if (!qword_1002AD460)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F7604, &unk_100279808);
    atomic_store(result, (unint64_t *)&qword_1002AD460);
  }

  return result;
}

unint64_t sub_100074F88()
{
  unint64_t result = qword_1002AD478;
  if (!qword_1002AD478)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001FE578, &type metadata for Discount);
    atomic_store(result, (unint64_t *)&qword_1002AD478);
  }

  return result;
}

unint64_t sub_100074FC4()
{
  unint64_t result = qword_1002AD480;
  if (!qword_1002AD480)
  {
    unint64_t result = swift_getWitnessTable(&unk_10020BF3C, &type metadata for OctaneIAPType);
    atomic_store(result, (unint64_t *)&qword_1002AD480);
  }

  return result;
}

void *sub_100075000(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[7];
  uint64_t v5 = a1[8];
  uint64_t v6 = a1[10];
  uint64_t v7 = a1[12];
  uint64_t v8 = a1[14];
  uint64_t v9 = a1[16];
  uint64_t v10 = a1[18];
  uint64_t v12 = a1[21];
  uint64_t v13 = a1[23];
  uint64_t v14 = a1[25];
  swift_bridgeObjectRetain(a1[26]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  return a1;
}

uint64_t sub_1000750E0(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, const char *a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v9 = sub_100018EC0(&qword_1002AD450);
    v10[0] = a3;
    v10[1] = a2();
    uint64_t result = swift_getWitnessTable(a4, v9, v10);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_100075154()
{
  unint64_t result = qword_1002AD4A0;
  if (!qword_1002AD4A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F75DC, &unk_100279808);
    atomic_store(result, (unint64_t *)&qword_1002AD4A0);
  }

  return result;
}

uint64_t sub_100075190(unint64_t *a1, uint64_t (*a2)(void), const char *a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_100018EC0(&qword_1002AD468);
    uint64_t v8 = a2();
    uint64_t result = swift_getWitnessTable(a3, v7, &v8);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1000751F8()
{
  unint64_t result = qword_1002AD4B8;
  if (!qword_1002AD4B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001FE550, &type metadata for Discount);
    atomic_store(result, (unint64_t *)&qword_1002AD4B8);
  }

  return result;
}

unint64_t sub_100075234()
{
  unint64_t result = qword_1002AD4C8;
  if (!qword_1002AD4C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10020BF14, &type metadata for OctaneIAPType);
    atomic_store(result, (unint64_t *)&qword_1002AD4C8);
  }

  return result;
}

_BYTE *sub_100075270@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1LL << v3) & 0x100003E01LL;
  BOOL v6 = v4 || v5 == 0;
  v7 = v6 && (unint64_t result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0LL && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t sub_1000752D8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }

  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0LL, 0LL);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }

  return v4 & 1;
}

_BYTE *sub_10007532C@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_100075270(a1, a2);
}

void *sub_100075344@<X0>(_BYTE *a1@<X8>)
{
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Product.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF0)
  {
    if (a2 + 16 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 16) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 17;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for Product.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 16 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 16) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF0) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xEF) {
    return ((uint64_t (*)(void))((char *)&loc_100075454 + 4 * byte_1001F9B56[v4]))();
  }
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_100075488 + 4 * byte_1001F9B51[v4]))();
}

uint64_t sub_100075488(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100075490(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100075498LL);
  }
  return result;
}

uint64_t sub_1000754A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000754ACLL);
  }
  *(_BYTE *)unint64_t result = a2 + 16;
  return result;
}

uint64_t sub_1000754B0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000754B8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Product.CodingKeys()
{
  return &type metadata for Product.CodingKeys;
}

uint64_t destroy for Product(void *a1)
{
  return swift_bridgeObjectRelease(a1[26]);
}

uint64_t initializeWithCopy for Product(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10006F0B8(12LL, 0) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  uint64_t v20 = *(void *)(a2 + 64);
  *(void *)(a1 + 64) = v20;
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  uint64_t v19 = *(void *)(a2 + 80);
  *(void *)(a1 + 8sub_10006F0B8(12LL, 0) = v19;
  *(void *)(a1 + 88) = v7;
  uint64_t v9 = *(void *)(a2 + 96);
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v9;
  *(void *)(a1 + 104) = v8;
  uint64_t v11 = *(void *)(a2 + 112);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = v11;
  *(void *)(a1 + 12sub_10006F0B8(12LL, 0) = v10;
  uint64_t v13 = *(void *)(a2 + 128);
  uint64_t v12 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = v13;
  *(void *)(a1 + 136) = v12;
  uint64_t v14 = *(void *)(a2 + 144);
  *(void *)(a1 + 144) = v14;
  *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
  uint64_t v15 = *(void *)(a2 + 168);
  *(void *)(a1 + 16sub_10006F0B8(12LL, 0) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v15;
  uint64_t v16 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v16;
  uint64_t v17 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 20sub_10006F0B8(12LL, 0) = v17;
  uint64_t v21 = *(void *)(a2 + 208);
  *(void *)(a1 + 208) = v21;
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v21);
  return a1;
}

uint64_t assignWithCopy for Product(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  uint64_t v5 = a2[3];
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  *(void *)(a1 + 32) = a2[4];
  uint64_t v7 = a2[5];
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)(a1 + 4sub_10006F0B8(12LL, 0) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(void *)(a1 + 48) = a2[6];
  uint64_t v9 = a2[7];
  uint64_t v10 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v12 = a2[8];
  *(void *)(a1 + 64) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 72) = a2[9];
  uint64_t v13 = a2[10];
  uint64_t v14 = *(void *)(a1 + 80);
  *(void *)(a1 + 8sub_10006F0B8(12LL, 0) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *(void *)(a1 + 88) = a2[11];
  uint64_t v15 = a2[12];
  uint64_t v16 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(void *)(a1 + 104) = a2[13];
  uint64_t v17 = a2[14];
  uint64_t v18 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(void *)(a1 + 12sub_10006F0B8(12LL, 0) = a2[15];
  uint64_t v19 = a2[16];
  uint64_t v20 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  *(void *)(a1 + 136) = a2[17];
  uint64_t v21 = a2[18];
  uint64_t v22 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
  *(_BYTE *)(a1 + 153) = *((_BYTE *)a2 + 153);
  *(void *)(a1 + 16sub_10006F0B8(12LL, 0) = a2[20];
  uint64_t v23 = a2[21];
  uint64_t v24 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  *(void *)(a1 + 176) = a2[22];
  uint64_t v25 = a2[23];
  uint64_t v26 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  *(void *)(a1 + 192) = a2[24];
  uint64_t v27 = a2[25];
  uint64_t v28 = *(void *)(a1 + 200);
  *(void *)(a1 + 20sub_10006F0B8(12LL, 0) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  uint64_t v29 = *(void *)(a1 + 208);
  uint64_t v30 = a2[26];
  *(void *)(a1 + 208) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v29);
  *(_BYTE *)(a1 + 216) = *((_BYTE *)a2 + 216);
  return a1;
}

void *initializeWithTake for Product(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xD9uLL);
}

uint64_t assignWithTake for Product(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10006F0B8(12LL, 0) = v6;
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease(*(void *)(a1 + 56));
  uint64_t v8 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void *)(a2 + 80);
  uint64_t v10 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 8sub_10006F0B8(12LL, 0) = v9;
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a2 + 96);
  uint64_t v12 = *(void *)(a1 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v11;
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = *(void *)(a2 + 112);
  uint64_t v14 = *(void *)(a1 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v13;
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = *(void *)(a2 + 128);
  uint64_t v16 = *(void *)(a1 + 128);
  *(void *)(a1 + 12sub_10006F0B8(12LL, 0) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v15;
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = *(void *)(a2 + 144);
  uint64_t v18 = *(void *)(a1 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v17;
  swift_bridgeObjectRelease(v18);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  uint64_t v19 = *(void *)(a2 + 168);
  uint64_t v20 = *(void *)(a1 + 168);
  *(void *)(a1 + 16sub_10006F0B8(12LL, 0) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v19;
  swift_bridgeObjectRelease(v20);
  uint64_t v21 = *(void *)(a2 + 184);
  uint64_t v22 = *(void *)(a1 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v21;
  swift_bridgeObjectRelease(v22);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRelease(*(void *)(a1 + 200));
  uint64_t v23 = *(void *)(a1 + 208);
  *(_OWORD *)(a1 + 20sub_10006F0B8(12LL, 0) = *(_OWORD *)(a2 + 200);
  swift_bridgeObjectRelease(v23);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  return a1;
}

uint64_t getEnumTagSinglePayload for Product(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 217))
    {
      LODWORD(sub_1000680EC(v0, v1, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 80);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(sub_1000680EC(v0, v1, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(sub_1000680EC(v0, v1, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Product(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 20sub_10006F0B8(12LL, 0) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12sub_10006F0B8(12LL, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4sub_10006F0B8(12LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 216) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 217) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8sub_10006F0B8(12LL, 0) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 217) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Product()
{
  return &type metadata for Product;
}

unint64_t sub_100075A68()
{
  unint64_t result = qword_1002AD4D8;
  if (!qword_1002AD4D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F9CAC, &type metadata for Product.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AD4D8);
  }

  return result;
}

unint64_t sub_100075AA8()
{
  unint64_t result = qword_1002AD4E0;
  if (!qword_1002AD4E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F9BE4, &type metadata for Product.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AD4E0);
  }

  return result;
}

unint64_t sub_100075AE8()
{
  unint64_t result = qword_1002AD4E8;
  if (!qword_1002AD4E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001F9C0C, &type metadata for Product.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AD4E8);
  }

  return result;
}

uint64_t sub_100075B24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(_BYTE *)(v4 - 96) = a3;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v4 - 96, v3);
}

uint64_t sub_100075B3C()
{
  return (*(uint64_t (**)(uint64_t, void))(v1 + 8))(v2, *(void *)(v0 + 80));
}

uint64_t sub_100075B4C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

void sub_100075B58()
{
  v0[15] = 0LL;
  v0[16] = 0LL;
  v0[18] = 0LL;
  v0[19] = 0LL;
  v0[20] = 0LL;
  v0[21] = 0LL;
  v0[11] = 0LL;
  v0[12] = 0LL;
  v0[22] = 0LL;
  v0[23] = 0LL;
  v0[24] = 0LL;
  v0[26] = 0LL;
  v0[27] = 0LL;
  v0[17] = 0LL;
  v0[14] = 0LL;
  v0[28] = 0LL;
  *(void *)(v1 - 72) = 0LL;
}

uint64_t sub_100075BA0()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v0 + 456, v1);
}

uint64_t sub_100075BB0()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 72));
}

uint64_t sub_100075BB8()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 216));
}

uint64_t sub_100075BC0()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 224));
}

uint64_t sub_100075BC8()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 208));
}

uint64_t sub_100075BD0()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v0 + 456, *(void *)(v0 + 80));
}

uint64_t sub_100075BE4(uint64_t a1)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3 - 96, v3 - 97, v1, v2, a1);
}

uint64_t sub_100075C04()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 176));
}

void sub_100075C0C()
{
  *(_WORD *)(v0 + 614) = *(_WORD *)(v1 - 106);
  *(void *)(v0 + 616) = *(void *)(v0 + 160);
  *(void *)(v0 + 624) = *(void *)(v0 + 168);
  *(void *)(v0 + 632) = *(void *)(v0 + 144);
}

uint64_t sub_100075C30@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  *(_BYTE *)(v3 - 96) = a2;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, v3 - 96, v2);
}

void sub_100075C48()
{
  *(void *)(v0 + 136) = 0LL;
  *(void *)(v0 + 112) = 0LL;
}

void sub_100075C5C()
{
  v0[15] = 0LL;
  v0[16] = 0LL;
  v0[18] = 0LL;
  v0[19] = 0LL;
  v0[20] = 0LL;
  v0[21] = 0LL;
  v0[11] = 0LL;
  v0[22] = 0LL;
  v0[23] = 0LL;
}

uint64_t sub_100075C78@<X0>(uint64_t a1@<X1>, char a2@<W8>)
{
  *(_BYTE *)(v2 + 456) = a2;
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_100075C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, v4);
}

uint64_t sub_100075C98()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 168));
}

  ;
}

void *sub_100075CB4@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v1 + 672) = a1;
  return sub_100074E68((void *)(v1 + 456));
}

void sub_100075CC0()
{
  v0[15] = 0LL;
  v0[16] = 0LL;
  v0[18] = 0LL;
  v0[19] = 0LL;
  v0[20] = 0LL;
  v0[21] = 0LL;
  v0[11] = 0LL;
}

void sub_100075CD4()
{
}

uint64_t sub_100075CE0()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

void sub_100075CEC()
{
  *(_BYTE *)(v0 + 608) = *(_DWORD *)(v0 + 124);
  *(_BYTE *)(v0 + 609) = *(_DWORD *)(v0 + 120);
}

uint64_t sub_100075D00()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 152));
}

uint64_t sub_100075D08(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_100075D10@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1[3] + 16LL);
  ChannelPipeline.syncOperations.getter();
  os_unfair_lock_lock(v3);
  uint64_t v5 = v1[6];
  uint64_t v4 = v1[7];
  uint64_t v7 = v1[8];
  uint64_t v6 = v1[9];
  uint64_t v8 = v1[11];
  uint64_t v9 = v1[13];
  uint64_t v13 = v1[12];
  uint64_t v14 = v1[10];
  uint64_t v10 = v1[15];
  uint64_t v12 = v1[14];
  sub_10001FFF0();
  sub_10003574C();
  sub_100077D1C();
  sub_100023E9C();
  sub_10005231C();
  os_unfair_lock_unlock(v3);
  uint64_t result = sub_100024F0C();
  *a1 = v5;
  a1[1] = v4;
  a1[2] = v7;
  a1[3] = v6;
  a1[4] = v14;
  a1[5] = v8;
  a1[6] = v13;
  a1[7] = v9;
  a1[8] = v12;
  a1[9] = v10;
  return result;
}

uint64_t sub_100075DC4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(v2 + 24))
  {
    uint64_t v3 = *(void *)(v2 + 16);
    sub_100019320();
  }

  else
  {
    uint64_t v3 = 0x656D614E20707041LL;
  }

  sub_100024F0C();
  return v3;
}

uint64_t sub_100075E20(uint64_t a1)
{
  uint64_t v1 = sub_100077C8C();
  uint64_t v3 = sub_1001B7C1C(v1, v2);
  sub_1000356C4(v3);
  uint64_t v4 = sub_10001EDA0();
  sub_100077BE0(v4, (uint64_t)v11);
  uint64_t v5 = sub_100077D24();
  sub_1000356C4(v5);
  uint64_t v6 = swift_release();
  sub_100077BE0(v6, (uint64_t)v11);
  uint64_t v7 = sub_100077C8C();
  uint64_t v9 = sub_1001B7D94(v7, v8);
  sub_1000356C4(v9);
  return swift_release();
}

BOOL sub_100075EC8()
{
  return EmbeddedChannel.LeftOverState.hasLeftOvers.getter(v7);
}

void sub_100075EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100077C8C();
  sub_1000AC3EC(v5, v6, v2, a1, a2);
  sub_100041AF4();
}

BOOL sub_100075F44()
{
  return EmbeddedChannel.LeftOverState.hasLeftOvers.getter(v7);
}

void sub_100075F64( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 == 10)
  {
    if (qword_1002A8CF8 != -1) {
      swift_once(&qword_1002A8CF8, sub_10010EF80);
    }
    sub_100110C9C(a2, a3, a3, a4, a5, a6, a7, a8);
  }

  else
  {
    sub_1000762CC(a1, a2, a3);
    ChannelPipeline.syncOperations.getter();
    sub_100019320();
    uint64_t v11 = sub_100077C8C();
    sub_1000AC460(v11, v12, v13, v8, a2);
  }

  sub_100041AF4();
}

uint64_t sub_100076018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[0] = sub_100076870(a1, a2, a3);
  v10[1] = v7;
  uint64_t v8 = *(void *)(v3 + 24);
  ChannelPipeline.syncOperations.getter();
  sub_100019320();
  sub_1000AC530(v8, v3, a2, a3, a1, v10);
  return v10[0];
}

void sub_10007608C()
{
  uint64_t v2 = sub_100076018(4LL, v0, v1);
  uint64_t v4 = v3;
  uint64_t v5 = sub_100077D00();
  uint64_t v6 = sub_1000CB708(v2, v4);
  sub_10001A3F8();
  if (v6) {
    sub_1000193B8();
  }
  else {
    swift_initStaticObject(v5, &unk_1002A8DE8);
  }
}

BOOL sub_1000760F8()
{
  return EmbeddedChannel.LeftOverState.hasLeftOvers.getter(v7);
}

void sub_100076118( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12 = a2 & 1;
  if (a3 == 10)
  {
    if (qword_1002A8CF8 != -1) {
      swift_once(&qword_1002A8CF8, sub_10010EF80);
    }
    if (v12) {
      BOOL v13 = 0;
    }
    else {
      BOOL v13 = a1 == 1;
    }
    uint64_t v14 = v13;
    sub_100110D68(a4, a5, v14, a4, a5, a6, a7, a8);
  }

  else
  {
    uint64_t v16 = *(void *)(v8 + 24);
    ChannelPipeline.syncOperations.getter();
    sub_100019320();
    sub_1000AC5EC(v16, a3, v8, a1, v12, a4, a5);
  }

uint64_t sub_1000761E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 == 8)
  {
    unint64_t v4 = sub_100048C8C();
    uint64_t v5 = swift_allocError(&type metadata for ConfigurationError, v4, 0LL, 0LL);
    *uint64_t v6 = 2;
  }

  else
  {
    uint64_t v8 = *(void *)(v3 + 24);
    swift_bridgeObjectRetain();
    ChannelPipeline.syncOperations.getter();
    sub_100019320();
    uint64_t v9 = sub_100077C28();
    uint64_t v5 = sub_1000AC214(v9, v10, v11, v12, v13, v14, a3);
    if ((a3 | 2) == 6)
    {
      sub_100077D44();
      uint64_t v16 = v15;
      ChannelPipeline.syncOperations.getter();
      sub_100019320();
      swift_retain();
      sub_100077CB0(v8, v16);
      swift_release();
    }
  }

  return v5;
}

uint64_t sub_1000762CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch(v4)
  {
    case 0LL:
      sub_100077B20();
      sub_10001EDD8();
      char v7 = sub_10007D810();
      goto LABEL_16;
    case 1LL:
      sub_100077B20();
      sub_10001EDD8();
      char v7 = sub_10007D818();
      goto LABEL_16;
    case 2LL:
      sub_100077B20();
      sub_10001EDD8();
      char v7 = sub_10007D830();
      goto LABEL_16;
    case 3LL:
    case 16LL:
      sub_100077B20();
      uint64_t v6 = 1LL;
      goto LABEL_44;
    case 5LL:
      sub_100077B3C();
      sub_100077BF0(1LL);
      sub_100077B2C();
      if ((v5 & 1) != 0) {
        goto LABEL_48;
      }
      unsigned __int8 v8 = sub_1001B0D40(v3);
      sub_10001EDD8();
      if (v8 == 5) {
        return 0;
      }
      else {
        return v8;
      }
    case 7LL:
      sub_100077B20();
      sub_10001EDD8();
      uint64_t v10 = sub_10007DFDC();
      sub_100024F0C();
      return v10;
    case 11LL:
      sub_100077B20();
      sub_10001EDD8();
      char v7 = sub_10007D820();
      goto LABEL_16;
    case 12LL:
      sub_100077B20();
      sub_10001EDD8();
      char v7 = sub_10007D828();
LABEL_16:
      char v12 = v7;
      sub_100024F0C();
      return v12 & 1;
    case 13LL:
      sub_100077B3C();
      sub_100077BF0(0LL);
      sub_100077B2C();
      if ((v5 & 1) == 0) {
        goto LABEL_3;
      }
      sub_100077B20();
      uint64_t v13 = 0LL;
      goto LABEL_41;
    case 14LL:
      sub_100077B20();
      uint64_t v6 = 0LL;
      goto LABEL_44;
    case 15LL:
      sub_100077B3C();
      sub_100077BF0(1LL);
      sub_100077B2C();
      if ((v5 & 1) == 0) {
        goto LABEL_3;
      }
      sub_100077B20();
      uint64_t v13 = 1LL;
      goto LABEL_41;
    case 17LL:
      sub_100077B3C();
      sub_100077BF0(2LL);
      sub_100077B2C();
      if ((v5 & 1) == 0) {
        goto LABEL_3;
      }
      sub_100077B20();
      uint64_t v13 = 2LL;
      goto LABEL_41;
    case 18LL:
      sub_100077B20();
      uint64_t v6 = 2LL;
      goto LABEL_44;
    case 19LL:
      sub_100077B3C();
      sub_100077BF0(3LL);
      sub_100077B2C();
      if ((v5 & 1) == 0) {
        goto LABEL_3;
      }
      sub_100077B20();
      uint64_t v13 = 3LL;
      goto LABEL_41;
    case 20LL:
      sub_100077B20();
      uint64_t v6 = 3LL;
      goto LABEL_44;
    case 21LL:
      sub_100077B3C();
      sub_100077BF0(4LL);
      sub_100077B2C();
      if ((v5 & 1) == 0) {
        goto LABEL_3;
      }
      sub_100077B20();
      uint64_t v13 = 4LL;
      goto LABEL_41;
    case 22LL:
      sub_100077B20();
      uint64_t v6 = 4LL;
      goto LABEL_44;
    case 23LL:
      sub_100077B3C();
      sub_100077BF0(5LL);
      sub_100077B2C();
      if ((v5 & 1) == 0) {
        goto LABEL_3;
      }
      sub_100077B20();
      uint64_t v13 = 5LL;
      goto LABEL_41;
    case 24LL:
      sub_100077B20();
      uint64_t v6 = 5LL;
      goto LABEL_44;
    case 25LL:
      sub_100077B3C();
      sub_100077BF0(6LL);
      sub_100077B2C();
      if ((v5 & 1) == 0) {
        goto LABEL_3;
      }
      sub_100077B20();
      uint64_t v13 = 6LL;
      goto LABEL_41;
    case 26LL:
      sub_100077B20();
      uint64_t v6 = 6LL;
      goto LABEL_44;
    case 27LL:
      sub_100077B3C();
      sub_100077BF0(7LL);
      sub_100077B2C();
      if ((v5 & 1) == 0) {
        goto LABEL_3;
      }
      sub_100077B20();
      uint64_t v13 = 7LL;
      goto LABEL_41;
    case 28LL:
      sub_100077B20();
      uint64_t v6 = 7LL;
      goto LABEL_44;
    case 29LL:
      sub_100077B3C();
      sub_100077BF0(8LL);
      sub_100077B2C();
      if ((v5 & 1) == 0) {
        goto LABEL_3;
      }
      sub_100077B20();
      uint64_t v13 = 8LL;
LABEL_41:
      uint64_t v14 = sub_10007DEC4(v13);
      sub_100024F0C();
      sub_10001EDD8();
      return v14;
    case 30LL:
      sub_100077B20();
      uint64_t v6 = 8LL;
LABEL_44:
      sub_10007D8BC(v6, (uint64_t)v16);
      sub_100077A0C((uint64_t)v16, (uint64_t)v17);
      if (v18)
      {
        char v15 = v19;
        sub_100077A54(v16);
        sub_100024F0C();
        sub_10001EDD8();
        if ((v15 & 1) != 0) {
          return 1LL;
        }
      }

      else
      {
        sub_100024F0C();
LABEL_48:
        sub_10001EDD8();
      }

      return 0LL;
    case 32LL:
      goto LABEL_48;
    default:
      uint64_t v3 = NSNotFound.getter();
LABEL_3:
      sub_10001EDD8();
      return v3;
  }

void sub_1000765E4( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 >= 9)
  {
    type metadata accessor for ASOctaneSimulatedErrorCategory(0LL);
    unint64_t v19 = a1;
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v18, &v19, v18);
    __break(1u);
  }

  else
  {
    sub_100075F64(2 * a1 + 14, a2, a3, a4, a5, a6, a7, a8);
    if (v11)
    {
      uint64_t v12 = sub_1001166CC(a1);
      sub_100075F64(v12, a2, a3, v13, v14, v15, v16, v17);
    }
  }

void sub_10007667C(uint64_t a1, char a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_100116690(a3);
  if ((a2 & 1) != 0)
  {
    uint64_t v14 = 0LL;
  }

  else
  {
    sub_100076118(1LL, 0, v10, a4, a5, v11, v12, v13);
    uint64_t v10 = sub_1001166CC(a3);
    uint64_t v14 = a1;
  }

  sub_100076118(v14, 0, v10, a4, a5, v11, v12, v13);
}

uint64_t sub_100076700()
{
  unsigned __int8 v8 = v7;
  uint64_t v11 = sub_100076018(6LL, v9, v10);
  uint64_t v13 = v12;
  uint64_t v23 = v12;
  if (qword_1002A8D28 != -1)
  {
    uint64_t v19 = v11;
    swift_once(&qword_1002A8D28, sub_10012A5D0);
    uint64_t v11 = v19;
    uint64_t v13 = v23;
  }

  uint64_t v14 = 4281173LL;
  uint64_t v15 = *(void *)(qword_1002EB990 + 16);
  if (v15)
  {
    uint64_t v20 = v8;
    uint64_t v16 = (uint64_t *)(qword_1002EB990 + 56);
    while (1)
    {
      uint64_t v14 = *(v16 - 3);
      uint64_t v4 = *(v16 - 2);
      uint64_t v2 = *v16;
      uint64_t v24 = *(v16 - 1);
      uint64_t v6 = v16[2];
      uint64_t v5 = v16[4];
      uint64_t v21 = v16[3];
      uint64_t v22 = v16[1];
      uint64_t v1 = v16[5];
      uint64_t v0 = v16[6];
      if (v14 == v11 && v4 == v13) {
        break;
      }
      uint64_t v3 = v11;
      if ((sub_100077D50(v14, v4, v11) & 1) != 0) {
        goto LABEL_14;
      }
      v16 += 10;
      --v15;
      uint64_t v13 = v23;
      uint64_t v11 = v3;
      if (!v15)
      {
        uint64_t v14 = 4281173LL;
        sub_100077B94();
        unsigned __int8 v8 = v20;
        goto LABEL_15;
      }
    }

    uint64_t v14 = v11;
    uint64_t v4 = v13;
LABEL_14:
    sub_100023E9C();
    sub_10003574C();
    uint64_t v15 = v6;
    uint64_t v6 = v2;
    sub_100019320();
    sub_10005231C();
    uint64_t v2 = v0;
    sub_10001DBCC();
    unsigned __int8 v8 = v20;
    uint64_t v3 = v21;
    uint64_t v0 = v22;
  }

  else
  {
    sub_100077B94();
  }

uint64_t sub_100076870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch(v3)
  {
    case 4LL:
      uint64_t v6 = sub_10007D838();
      uint64_t v8 = v7;
      sub_100077D00();
      uint64_t v9 = sub_1000CB708(v6, v8);
      sub_10001A3F8();
      sub_10001EDD8();
      if (v9)
      {
        uint64_t v4 = *(void *)(v9 + 16);
        sub_10001ED74();
        swift_release(v9);
      }

      else
      {
        uint64_t v4 = *(void *)aEnUs;
        sub_10001ED74();
      }

      break;
    case 6LL:
      uint64_t v10 = sub_10007D87C();
      uint64_t v12 = v11;
      uint64_t v18 = v11;
      if (qword_1002A8D28 != -1)
      {
        swift_once(&qword_1002A8D28, sub_10012A5D0);
        uint64_t v12 = v18;
      }

      uint64_t v13 = *(void *)(qword_1002EB990 + 16);
      if (v13)
      {
        uint64_t v14 = qword_1002EB990 + 56;
        while (1)
        {
          uint64_t v4 = *(void *)(v14 - 24);
          if (v4 == v10 && *(void *)(v14 - 16) == v12) {
            break;
          }
          if ((sub_100077D50(*(void *)(v14 - 24), *(void *)(v14 - 16), v10) & 1) != 0) {
            goto LABEL_24;
          }
          v14 += 80LL;
          --v13;
          uint64_t v12 = v18;
          if (!v13) {
            goto LABEL_16;
          }
        }

        uint64_t v4 = v10;
LABEL_24:
        sub_10001ED74();
        sub_100077D1C();
        sub_10003574C();
        sub_100023E9C();
        sub_10005231C();
        sub_10001EDD8();
        swift_bridgeObjectRelease();
      }

      else
      {
LABEL_16:
        swift_bridgeObjectRelease();
        sub_10001EDD8();
        uint64_t v4 = 4281173LL;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 8LL:
      if (qword_1002A8D30 != -1) {
        swift_once(&qword_1002A8D30, sub_10014BE60);
      }
      uint64_t v4 = sub_10014BE9C();
      uint64_t v17 = v16;
      sub_10001EDD8();
      if (!v17) {
        uint64_t v4 = 0LL;
      }
      break;
    default:
      sub_10001EDD8();
      uint64_t v4 = 0LL;
      break;
  }

  return v4;
}

uint64_t sub_100076ABC()
{
  LODWORD(result) = sub_10019ED58(v7);
  else {
    return 0LL;
  }
}

uint64_t sub_100076AE8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  ChannelPipeline.syncOperations.getter();
  sub_100019320();
  sub_10001ED74();
  uint64_t v2 = sub_100077C28();
  sub_1000AC740(v2, v3, v4, v5, v6, v7, v8);
  sub_100077D44();
  uint64_t v10 = v9;
  ChannelPipeline.syncOperations.getter();
  sub_100019320();
  swift_retain();
  sub_100077CB0(v1, v10);
  swift_release();
  return 0LL;
}

uint64_t sub_100076B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  uint64_t v11 = a1 + 16;
  sub_10002A718(a1 + 16, (uint64_t)v59, 0LL);
  uint64_t v12 = *(void *)(a1 + 16);
  sub_10001FFF0();
  sub_100019320();
  uint64_t v13 = sub_100077C8C();
  sub_10012A314(v13, v14, v12);
  uint64_t v16 = v15;
  sub_100023EEC();
  swift_bridgeObjectRelease();
  sub_10001EDA0();
  if (v16)
  {
    uint64_t v55 = a6;
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    sub_100018F68(v17, (uint64_t)qword_1002EB9D0);
    sub_100023E64(a3);
    uint64_t v18 = sub_100023E64(a5);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      sub_100077D10();
      uint64_t v54 = v11;
      uint64_t v21 = sub_100077C70();
      v58[0] = v21;
      *(_DWORD *)uint64_t v12 = 136380931;
      uint64_t v22 = sub_100023E9C();
      uint64_t v60 = sub_100077CF0(v22, v23, v24, v25, v26, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v12 + 4);
      sub_100077CA8(a5);
      *(_WORD *)(v12 + 12) = 2080;
      uint64_t v28 = sub_10001FFF0();
      uint64_t v60 = sub_100077CE0(v28, v29, v30, v31, v32, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v12 + 14);
      sub_100077CA8(a3);
      sub_100077D5C((void *)&_mh_execute_header, v19, v20, "Updated configuration file at %{private}s for %s");
      swift_arrayDestroy(v21, 2LL);
      uint64_t v34 = v21;
      uint64_t v11 = v54;
      sub_10001A408(v34);
      sub_10001A408(v12);
    }

    else
    {

      sub_10001EDE8(a3);
      sub_10001EDE8(a5);
    }

    *uint64_t v55 = 1;
  }

  else
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v35 = type metadata accessor for Logger(0LL);
    sub_100018F68(v35, (uint64_t)qword_1002EB9D0);
    sub_100023E64(a3);
    uint64_t v36 = sub_100023E64(a5);
    uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.default.getter();
    uint64_t v39 = v38;
    if (os_log_type_enabled(v37, v38))
    {
      sub_100077D10();
      uint64_t v56 = sub_100077C70();
      v58[0] = v56;
      *(_DWORD *)uint64_t v39 = 136315395;
      uint64_t v40 = sub_10001FFF0();
      uint64_t v60 = sub_100077CE0(v40, v41, v42, v43, v44, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v39 + 4);
      sub_100077CA8(a3);
      *(_WORD *)(v39 + 12) = 2081;
      uint64_t v46 = sub_100023E9C();
      uint64_t v60 = sub_100077CF0(v46, v47, v48, v49, v50, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v39 + 14);
      sub_100077CA8(a5);
      sub_100077D5C( (void *)&_mh_execute_header,  v37,  (os_log_type_t)v39,  "%s is using StoreKit Testing in Xcode.\nConfiguration at: %{private}s");
      swift_arrayDestroy(v56, 2LL);
      sub_10001A408(v56);
      sub_10001A408(v39);
    }

    else
    {

      sub_10001EDE8(a5);
      sub_10001EDE8(a3);
    }
  }

  sub_10002A718(v11, (uint64_t)v58, 33LL);
  sub_10001FFF0();
  sub_100023E9C();
  sub_1001B8090(a4, a5, a2, a3);
  swift_endAccess(v58);
  uint64_t v52 = sub_100023EEC();
  sub_100077BE0(v52, (uint64_t)v58);
  sub_10001FFF0();
  sub_100077D24();
  swift_endAccess(v58);
  sub_100023EEC();
  return swift_release();
}

void sub_100076F60()
{
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + 24) + 16LL);
  ChannelPipeline.syncOperations.getter();
  os_unfair_lock_lock(v1);
  os_unfair_lock_unlock(v1);
  sub_100024F0C();
  sub_1000193B8();
}

BOOL sub_100076FA0()
{
  return EmbeddedChannel.LeftOverState.hasLeftOvers.getter(v7);
}

BOOL sub_100076FC0()
{
  return EmbeddedChannel.LeftOverState.hasLeftOvers.getter(v7);
}

uint64_t sub_100076FE0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 24);
  ChannelPipeline.syncOperations.getter();
  sub_100019320();
  uint64_t v6 = sub_1000AC03C(v5, v2, a1, a2);
  if (v6)
  {
    uint64_t v7 = v6;
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v8 = sub_100077D08();
    sub_100018F68(v8, (uint64_t)qword_1002EB9D0);
    uint64_t v9 = sub_100077CD0();
    uint64_t v10 = (void *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (sub_100077C98(v11))
    {
      uint64_t v12 = (_DWORD *)sub_100019464(12LL);
      uint64_t v45 = sub_100019464(32LL);
      *uint64_t v12 = 136315138;
      uint64_t v13 = sub_100019320();
      sub_100077C04(v13, v14, v15, v16, v17, v18);
      sub_100077D30();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v19, v20, v12 + 1);
      sub_100077C58();
      sub_100077C14((void *)&_mh_execute_header, v21, v22, "Using cached configuration for %s");
      swift_arrayDestroy(v45, 1LL);
      sub_10001A408(v45);
      sub_10001A408((uint64_t)v12);
    }

    else
    {

      sub_100077C64();
    }
  }

  else
  {
    sub_1000774AC();
    if (v23)
    {
      uint64_t v24 = v23;
      type metadata accessor for OctaneConfiguration();
      sub_1000D6D18();
      uint64_t v7 = v41;
      swift_bridgeObjectRelease(v24);
      swift_retain();
      sub_100019320();
      swift_retain();
      sub_1000AC348(v5, v2, a1, a2);
    }

    else
    {
      if (qword_1002A8D90 != -1) {
        swift_once(&qword_1002A8D90, sub_100183E34);
      }
      uint64_t v25 = sub_100077D08();
      sub_100018F68(v25, (uint64_t)qword_1002EB9D0);
      uint64_t v26 = sub_100077CD0();
      uint64_t v27 = (void *)Logger.logObject.getter(v26);
      os_log_type_t v29 = static os_log_type_t.error.getter(v27, v28);
      if (sub_100077C98(v29))
      {
        uint64_t v30 = (_DWORD *)sub_100019464(12LL);
        uint64_t v46 = sub_100019464(32LL);
        *uint64_t v30 = 136315138;
        uint64_t v31 = sub_100019320();
        sub_100077C04(v31, v32, v33, v34, v35, v36);
        sub_100077D30();
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v37, v38, v30 + 1);
        sub_100077C58();
        sub_100077C14( (void *)&_mh_execute_header,  v39,  v40,  "Tried to get configuration file for %s but the app is not using StoreKit Testing in Xcode.");
        swift_arrayDestroy(v46, 1LL);
        sub_10001A408(v46);
        sub_10001A408((uint64_t)v30);
      }

      else
      {

        sub_100077C64();
      }

      uint64_t v42 = type metadata accessor for OctaneConfiguration();
      sub_100019310(v42, 144LL);
      sub_1000D6EC0();
      return v43;
    }
  }

  return v7;
}

uint64_t sub_1000774AC()
{
  return sub_1000AC0EC();
}

uint64_t sub_100077518(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v55 = sub_10007D87C();
  uint64_t v59 = v10;
  uint64_t v11 = sub_10007D838();
  uint64_t v13 = v12;
  sub_10002A718((uint64_t)(a2 + 4), (uint64_t)v58, 0LL);
  uint64_t v14 = a2[4];
  sub_100023E9C();
  sub_10001DBCC();
  uint64_t v15 = sub_10012A3C4(a3);
  swift_bridgeObjectRelease(a4);
  sub_10001EDA0();
  if (v15)
  {
    sub_10002A718(v15 + 24, (uint64_t)v57, 0LL);
    sub_10012A4E0(6LL, *(void *)(v15 + 24));
    if (v17)
    {
      uint64_t v18 = v16;
      uint64_t v19 = v17;
      swift_bridgeObjectRelease(v59);
      uint64_t v55 = v18;
      uint64_t v59 = v19;
    }

    sub_10012A4E0(4LL, *(void *)(v15 + 24));
    uint64_t v14 = v20;
    uint64_t v22 = v21;
    swift_release(v15);
    if (v22)
    {
      sub_100023EEC();
      uint64_t v11 = v14;
      uint64_t v13 = v22;
    }
  }

  uint64_t v23 = a2[6];
  uint64_t v24 = a2[7];
  uint64_t v25 = v59;
  if (v55 != v23 || v59 != v24)
  {
    char v27 = sub_100048720(v55, v59, v23, v24);
    uint64_t v28 = v55;
    uint64_t v25 = v59;
    if ((v27 & 1) == 0) {
      goto LABEL_17;
    }
  }

  uint64_t v29 = a2[16];
  uint64_t v30 = *(void *)(v29 + 16);
  uint64_t v31 = *(void *)(v29 + 24);
  BOOL v32 = v11 == v30 && v13 == v31;
  if (v32 || (v33 = sub_100048720(v11, v13, v30, v31), v28 = v55, uint64_t v25 = v59, (v33 & 1) != 0))
  {
    swift_bridgeObjectRelease(v25);
  }

  else
  {
LABEL_17:
    uint64_t v49 = a2;
    if (qword_1002A8D28 != -1)
    {
      swift_once(&qword_1002A8D28, sub_10012A5D0);
      uint64_t v28 = v55;
      uint64_t v25 = v59;
    }

    uint64_t v34 = *(void *)(qword_1002EB990 + 16);
    uint64_t v50 = v13;
    uint64_t v48 = v11;
    if (v34)
    {
      uint64_t v4 = (void *)(qword_1002EB990 + 56);
      while (1)
      {
        uint64_t v35 = *(v4 - 3);
        uint64_t v13 = *(v4 - 2);
        uint64_t v6 = (void *)*v4;
        uint64_t v15 = v4[2];
        uint64_t v52 = (void *)v4[1];
        uint64_t v54 = *(v4 - 1);
        uint64_t v36 = v4[4];
        uint64_t v51 = v4[3];
        uint64_t v5 = v4[5];
        uint64_t v14 = v4[6];
        if (v35 == v28 && v13 == v25) {
          break;
        }
        char v38 = sub_100048720(v35, v13, v28, v25);
        uint64_t v25 = v59;
        if ((v38 & 1) != 0) {
          goto LABEL_30;
        }
        v4 += 10;
        --v34;
        uint64_t v28 = v55;
        if (!v34)
        {
          uint64_t v39 = 4281173LL;
          sub_100077B48();
          goto LABEL_31;
        }
      }

      uint64_t v35 = v28;
      uint64_t v13 = v25;
LABEL_30:
      sub_10001FFF0();
      uint64_t v4 = v6;
      swift_bridgeObjectRetain(v6);
      uint64_t v46 = v15;
      sub_100019320();
      uint64_t v47 = v36;
      sub_100077D1C();
      uint64_t v15 = v14;
      sub_10001DBCC();
      uint64_t v39 = v35;
      uint64_t v14 = v51;
      uint64_t v6 = v52;
    }

    else
    {
      sub_100077B48();
      uint64_t v39 = 4281173LL;
    }

uint64_t sub_100077880()
{
  return v0;
}

uint64_t sub_100077908()
{
  return swift_deallocClassInstance(v0, 144LL, 7LL);
}

uint64_t type metadata accessor for OctaneConfigurationManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService26OctaneConfigurationManager);
}

void sub_100077948()
{
  *(void *)(v0 + 16) = &_swiftEmptyDictionarySingleton;
  uint64_t v1 = type metadata accessor for UnfairLock();
  uint64_t v2 = sub_100019310(v1, 24LL);
  uint64_t v3 = (_DWORD *)sub_100019464(4LL);
  *(void *)(v2 + 16) = v3;
  *uint64_t v3 = 0;
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = &_swiftEmptyDictionarySingleton;
  *(void *)(v0 + 4sub_10006F0B8(12LL, 0) = &_swiftEmptyDictionarySingleton;
  *(void *)(v0 + 48) = 4281173LL;
  *(void *)(v0 + 56) = 0xE300000000000000LL;
  *(void *)(v0 + 64) = 4477781LL;
  *(void *)(v0 + 72) = 0xE300000000000000LL;
  *(void *)(v0 + 8sub_10006F0B8(12LL, 0) = 0x313434333431LL;
  *(void *)(v0 + 88) = 0xE600000000000000LL;
  *(void *)(v0 + 96) = 21333LL;
  *(void *)(v0 + 104) = 0xE200000000000000LL;
  strcpy((char *)(v0 + 112), "United States");
  *(_WORD *)(v0 + 126) = -4864;
  uint64_t v4 = sub_100077D00();
  *(void *)(v0 + 128) = swift_initStaticObject(v4, &unk_1002A8DE8);
  *(void *)(v0 + 136) = 0LL;
  sub_1000193B8();
}

uint64_t sub_100077A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002AD740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t *sub_100077A54(uint64_t *a1)
{
  return a1;
}

uint64_t sub_100077A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a3);
    return sub_100077AF0(a4, a5, a6);
  }

  return result;
}

uint64_t sub_100077AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a3);
  }

  return result;
}

uint64_t sub_100077B20()
{
  return swift_retain(*(void *)(v0 + 48));
}

uint64_t sub_100077B2C()
{
  return swift_release(v0);
}

uint64_t sub_100077B3C()
{
  return swift_retain(*(void *)(v0 + 48));
}

  ;
}

  ;
}

uint64_t sub_100077BE0(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(v2, a2, 33LL, 0LL);
}

uint64_t sub_100077BF0(uint64_t a1)
{
  return sub_10007DDCC(a1);
}

  ;
}

uint64_t sub_100077C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return sub_1000CF360(v7, v6, (uint64_t *)va);
}

void sub_100077C14(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_100077C28()
{
  return v0;
}

uint64_t sub_100077C44( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  a14 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a14, v15, v14);
}

uint64_t sub_100077C58()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

uint64_t sub_100077C64()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_100077C70()
{
  return swift_slowAlloc(64LL, -1LL);
}

BOOL EmbeddedChannel.LeftOverState.hasLeftOvers.getter(uint64_t a1)
{
  return a1 != 0;
}

uint64_t sub_100077C8C()
{
  return v0;
}

BOOL sub_100077C98(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100077CA8(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 3LL);
}

uint64_t sub_100077CB0(uint64_t a1, uint64_t a2)
{
  return sub_1000AC3EC(a1, a2, v3, v4, v2);
}

void sub_100077CC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100077CD0()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t sub_100077CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return sub_1000CF360(v7, v6, (uint64_t *)va);
}

uint64_t sub_100077CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return sub_1000CF360(a6, v6, (uint64_t *)va);
}

uint64_t sub_100077D00()
{
  return type metadata accessor for OctaneLocale();
}

uint64_t sub_100077D08()
{
  return type metadata accessor for Logger(0LL);
}

uint64_t sub_100077D10()
{
  return swift_slowAlloc(22LL, -1LL);
}

uint64_t sub_100077D1C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100077D24()
{
  return sub_1001B7DA8(v1, v0);
}

  ;
}

void sub_100077D44()
{
}

uint64_t sub_100077D50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, v3, 0LL);
}

void sub_100077D5C(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

void ByteBuffer.writeBuffer(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v23;
  a22 = v24;
  uint64_t v26 = v25;
  uint64_t v27 = *(unsigned int *)(v25 + 8);
  unsigned int v28 = *(_DWORD *)(v25 + 12);
  uint64_t v29 = *(unsigned __int16 *)(v25 + 20);
  uint64_t v30 = *(unsigned __int8 *)(v25 + 22);
  Swift::UInt32 v31 = *(_DWORD *)(v22 + 12);
  BOOL v32 = (void *)(*(void *)v25 + 24LL);
  sub_1000487CC((uint64_t)v32, (uint64_t)&a10);
  if (v28 < v27)
  {
    __break(1u);
    goto LABEL_6;
  }

  uint64_t v33 = *v32 + (v30 | (v29 << 8)) + v27;
  ByteBuffer._setBytes(_:at:)(v33, v33 + v28 - v27, v31);
  sub_100079E94();
  if (v36)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  *(_DWORD *)(v22 + 12) = v35;
  if (!__CFADD__((_DWORD)v27, v34))
  {
    *(_DWORD *)(v26 + 8) = v27 + v34;
    sub_10002A568();
    return;
  }

uint64_t ByteBuffer.init()()
{
  if (qword_1002A8CC8 != -1) {
    swift_once(&qword_1002A8CC8, sub_10005B580);
  }
  return swift_retain();
}

void ByteBuffer.writeBytes<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (v5) {
    __break(1u);
  }
  else {
    *(_DWORD *)(v3 + 12) = v4;
  }
}

Swift::OpaquePointer_optional __swiftcall ByteBuffer.getBytes(at:length:)(Swift::Int at, Swift::Int length)
{
  uint64_t v12 = v2;
  uint64_t v13 = v7;
  int64_t v8 = (int64_t)v3 - v6;
  if (__OFSUB__(v3, v6))
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v3 = 0LL;
  if (v8 < 0 || v4 < 0) {
    goto LABEL_9;
  }
  if ((HIDWORD(v6) - v6) - v4 >= v8)
  {
    if (!__OFADD__(v8, v4))
    {
      if (v8 + v4 >= v8)
      {
        sub_1000487CC(v5 + 24, (uint64_t)v11);
        uint64_t v9 = sub_100079E34();
        sub_1000176E0(v9, v10);
        goto LABEL_9;
      }

Swift::OpaquePointer_optional __swiftcall ByteBuffer.readBytes(length:)(Swift::Int length)
{
  int v2 = length;
  unsigned int v3 = *(_DWORD *)(v1 + 8);
  Swift::OpaquePointer_optional result = ByteBuffer.getBytes(at:length:)(v3, length);
  if (result.value._rawValue)
  {
    if (__CFADD__(v3, v2)) {
      __break(1u);
    }
    else {
      *(_DWORD *)(v1 + 8) = v3 + v2;
    }
  }

  return result;
}

void ByteBuffer.writeStaticString(_:)(uint64_t a1, uint64_t a2, char a3)
{
  if (v5) {
    __break(1u);
  }
  else {
    *(_DWORD *)(v3 + 12) = v4;
  }
}

uint64_t ByteBuffer.setStaticString(_:at:)(uint64_t result, uint64_t a2, char a3, Swift::UInt32 a4)
{
  if ((a3 & 1) != 0)
  {
    __break(1u);
  }

  else if (result)
  {
    return ByteBuffer._setBytes(_:at:)(result, result + a2, a4);
  }

  __break(1u);
  return result;
}

Swift::Int __swiftcall ByteBuffer.writeString(_:)(Swift::String a1)
{
  Swift::UInt32 v2 = *(_DWORD *)(v1 + 12);
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_10007A010();
  int v5 = sub_100079E58(v3, v4, v1, v2);
  char v7 = v6;
  Swift::Int result = sub_100019390();
  if ((v7 & 1) != 0)
  {
    Swift::Int result = sub_100079F74();
    int v5 = result;
  }

  int v9 = *(_DWORD *)(v1 + 12);
  BOOL v10 = __CFADD__(v9, v5);
  int v11 = v9 + v5;
  if (v10)
  {
    __break(1u);
  }

  else
  {
    *(_DWORD *)(v1 + 12) = v11;
    sub_100041AF4();
  }

  return result;
}

Swift::Int __swiftcall ByteBuffer.setString(_:at:)(Swift::String _, Swift::Int at)
{
  object = _._object;
  sub_100079FF0(_._countAndFlagsBits, (uint64_t)_._object);
  sub_100079E58(v3, (unint64_t)object, v2, at);
  char v7 = v6;
  sub_100023EEC();
  if ((v7 & 1) != 0)
  {
    v9._countAndFlagsBits = v3;
    v9._object = object;
    return ByteBuffer._setStringSlowpath(_:at:)(v9, at);
  }

  else
  {
    sub_100041AF4();
  }

  return result;
}

Swift::Int __swiftcall ByteBuffer._setStringSlowpath(_:at:)(Swift::String _, Swift::Int at)
{
  Swift::UInt32 v4 = at;
  object = _._object;
  sub_100079FF0(_._countAndFlagsBits, (uint64_t)_._object);
  Swift::Int v6 = sub_100079E58(v3, (unint64_t)object, v2, v4);
  char v8 = v7;
  sub_100019390();
  if ((v8 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    sub_10007817C(v3, (unint64_t)object, v2, v4);
    if ((v9 & 0x100000000LL) != 0) {
      sub_10005C578(v3, (unint64_t)object, v4);
    }
    unsigned int v10 = v9;
    sub_100019390();
    return v10;
  }

  return v6;
}

void sub_10007817C(uint64_t a1, unint64_t a2, uint64_t a3, Swift::UInt32 a4)
{
  if ((a2 & 0x1000000000000000LL) == 0)
  {
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      v8[0] = a1;
      v8[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      ByteBuffer._setBytes(_:at:)((uint64_t)v8, (uint64_t)v8 + (HIBYTE(a2) & 0xF), a4);
    }

    else
    {
      if ((a1 & 0x1000000000000000LL) != 0)
      {
        uint64_t v6 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v6 = _StringObject.sharedUTF8.getter(a1);
      }

      sub_10005CFCC(v6, v7, a4, &v9);
    }
  }

uint64_t sub_100078244(uint64_t a1, unint64_t a2, uint64_t a3, Swift::UInt32 a4)
{
  return sub_100078258(a1, a2, a3, a4);
}

uint64_t sub_100078258(uint64_t a1, unint64_t a2, uint64_t a3, Swift::UInt32 a4)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    return 0LL;
  }
  if ((a2 & 0x2000000000000000LL) != 0)
  {
    v11[0] = a1;
    v11[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    LODWORD(result) = ByteBuffer._setBytes(_:at:)((uint64_t)v11, (uint64_t)v11 + (HIBYTE(a2) & 0xF), a4);
    return result;
  }

  if ((a1 & 0x1000000000000000LL) != 0)
  {
    uint64_t v7 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v7 = _StringObject.sharedUTF8.getter(a1);
  }

  if (v7) {
    uint64_t v9 = v7 + v8;
  }
  else {
    uint64_t v9 = 0LL;
  }
  uint64_t result = ByteBuffer._setBytes(_:at:)(v7, v9, a4);
  if (!v4) {
    return result;
  }
  return result;
}

Swift::String_optional __swiftcall ByteBuffer.getString(at:length:)(Swift::Int at, Swift::Int length)
{
  uint64_t v13 = v2;
  uint64_t v14 = v7;
  int64_t v8 = v3 - v6;
  if (__OFSUB__(v3, v6))
  {
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v3 = 0LL;
  if (v8 < 0 || v4 < 0) {
    goto LABEL_11;
  }
  if (__OFADD__(v8, v4)) {
    goto LABEL_14;
  }
  if (v8 + v4 < v8)
  {
LABEL_15:
    __break(1u);
    goto _$s25ASOctaneSupportXPCService10ByteBufferV9getString2at6lengthSSSgSi_SitF;
  }

  sub_1000487CC(v5 + 24, (uint64_t)v12);
  uint64_t v9 = sub_100079E34();
  static String._fromUTF8Repairing(_:)(v9, v10);
LABEL_11:
  sub_100019398();
_$s25ASOctaneSupportXPCService10ByteBufferV9getString2at6lengthSSSgSi_SitF:
  result.value._object = (void *)v4;
  result.value._countAndFlagsBits = v3;
  return result;
}

Swift::String_optional __swiftcall ByteBuffer.readString(length:)(Swift::Int length)
{
  uint64_t v16 = v2;
  uint64_t v17 = v4;
  if ((v3 & 0x8000000000000000LL) == 0)
  {
    uint64_t v6 = *((unsigned int *)v1 + 2);
    unsigned int v5 = *((_DWORD *)v1 + 3);
    BOOL v7 = v5 >= v6;
    unint64_t v8 = v5 - v6;
    if (!v7)
    {
      __break(1u);
LABEL_9:
      __break(1u);
      goto _$s25ASOctaneSupportXPCService10ByteBufferV10readString6lengthSSSgSi_tF;
    }

    unint64_t v9 = v3;
    if (v8 >= v3)
    {
      uint64_t v10 = *v1;
      uint64_t v11 = *((unsigned __int16 *)v1 + 10);
      uint64_t v12 = *((unsigned __int8 *)v1 + 22);
      sub_1000487CC(*v1 + 24, (uint64_t)v15);
      uint64_t v13 = *(void *)(v10 + 24) + (v12 | (v11 << 8)) + v6;
      swift_retain();
      static String._fromUTF8Repairing(_:)(v13, v9);
      unint64_t v3 = swift_release(v10);
      if (__CFADD__((_DWORD)v6, (_DWORD)v9)) {
        goto LABEL_9;
      }
      *((_DWORD *)v1 + 2) = v6 + v9;
    }
  }

  sub_100019398();
_$s25ASOctaneSupportXPCService10ByteBufferV10readString6lengthSSSgSi_tF:
  result.value._object = v4;
  result.value._countAndFlagsBits = v3;
  return result;
}

void ByteBuffer.writeSubstring(_:)(uint64_t a1)
{
  Swift::Int v2 = *(unsigned int *)(v1 + 12);
  uint64_t v3 = static String._fromSubstring(_:)(a1);
  unsigned int v5 = (void *)v4;
  int v6 = sub_100079E58(v3, v4, v1, v2);
  if ((v7 & 1) != 0)
  {
    v8._countAndFlagsBits = v3;
    v8._object = v5;
    int v6 = ByteBuffer._setStringSlowpath(_:at:)(v8, v2);
  }

  int v9 = v6;
  sub_100019390();
  int v10 = *(_DWORD *)(v1 + 12);
  BOOL v11 = __CFADD__(v10, v9);
  int v12 = v10 + v9;
  if (v11)
  {
    __break(1u);
  }

  else
  {
    *(_DWORD *)(v1 + 12) = v12;
    sub_100041AF4();
  }

void ByteBuffer.setSubstring(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Int a5)
{
  uint64_t v7 = static String._fromSubstring(_:)(a1);
  int v9 = (void *)v8;
  sub_100079E58(v7, v8, v5, a5);
  if ((v10 & 1) != 0)
  {
    v11._countAndFlagsBits = v7;
    v11._object = v9;
    ByteBuffer._setStringSlowpath(_:at:)(v11, a5);
  }

  sub_100023EEC();
  sub_100041AF4();
}

#error "10007854C: call analysis failed (funcsize=10)"
void ByteBuffer.setDispatchData(_:at:)( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  char a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22)
{
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int v33;
  unsigned int v34;
  unint64_t v35;
  BOOL v36;
  sub_100079D70();
  a21 = v23;
  a22 = v24;
  uint64_t v25 = v22;
  uint64_t v27 = v26;
  unsigned int v28 = sub_100079F20();
  uint64_t v29 = v27 + v28;
  if (__OFADD__(v27, v28))
  {
    __break(1u);
    goto LABEL_13;
  }

  ByteBuffer.reserveCapacity(_:)(v27 + v28);
  ByteBuffer._copyStorageAndRebaseIfNeeded()();
  uint64_t v30 = *v22;
  Swift::UInt32 v31 = *((_DWORD *)v25 + 4);
  BOOL v32 = *((unsigned __int16 *)v25 + 10);
  uint64_t v33 = *((unsigned __int8 *)v25 + 22);
  sub_1000487CC(v30 + 24, (uint64_t)&a10);
  int v34 = v33 | (v32 << 8);
  int v35 = v31 - v34;
  if (v31 < v34)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if ((uint64_t)v29 < (uint64_t)v27)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  char v36 = __OFSUB__(v29, v27);
  if ((v27 & 0x8000000000000000LL) != 0) {
    goto LABEL_15;
  }
  if (v35 < v27)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  if (v29 > v35)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (!v36)
  {
    DispatchData.copyBytes(to:count:)(*(void *)(v30 + 24) + v34 + v27, *(void *)(v30 + 24) + v34 + v29);
    sub_10002A568();
    return;
  }

void ByteBuffer.getDispatchData(at:length:)()
{
  uint64_t v19 = v0;
  uint64_t v20 = v7;
  int64_t v9 = v8 - v3;
  if (__OFSUB__(v8, v3))
  {
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v10 = v6;
  if (v9 < 0 || v1 < 0) {
    goto LABEL_6;
  }
  if (v4 < v3) {
    goto LABEL_11;
  }
  if (v4 - v3 - v1 < v9)
  {
LABEL_6:
    uint64_t v11 = sub_100079F84();
    sub_10001762C(v10, 1LL, 1LL, v11);
    return;
  }

  int64_t v12 = v9 + v1;
  if (__OFADD__(v9, v1)) {
    goto LABEL_12;
  }
  if (v12 >= v9)
  {
    unint64_t v13 = v5;
    uint64_t v14 = v2;
    uint64_t v15 = v3;
    sub_1000487CC(v2 + 24, (uint64_t)&v18);
    uint64_t v16 = *(void *)(v14 + 24) + ((v13 >> 24) & 0xFFFF00 | BYTE6(v13)) + v15;
    ((void (*)(uint64_t, uint64_t))DispatchData.init(bytes:))(v16 + v9, v16 + v12);
    uint64_t v17 = sub_100079F84();
    sub_10001762C(v10, 0LL, 1LL, v17);
    return;
  }

uint64_t ByteBuffer.readDispatchData(length:)@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v6 = sub_1000175B0(&qword_1002AD748);
  uint64_t v7 = __chkstk_darwin(v6);
  int64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v17 - v10;
  sub_100079FC8();
  int v12 = *(_DWORD *)(v2 + 8);
  swift_retain();
  ByteBuffer.getDispatchData(at:length:)();
  swift_release(v3);
  sub_100079C94((uint64_t)v11, (uint64_t)v9);
  uint64_t v13 = sub_100079F84();
  if (sub_10001D158((uint64_t)v9, 1LL, v13) == 1)
  {
    uint64_t v14 = a2;
    uint64_t v15 = 1LL;
LABEL_5:
    sub_10001762C(v14, v15, 1LL, v13);
    return sub_100079CDC((uint64_t)v11);
  }

  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v13 - 8) + 32LL))(a2, v9, v13);
  if (!__CFADD__(v12, a1))
  {
    *(_DWORD *)(v2 + 8) = v12 + a1;
    uint64_t v14 = a2;
    uint64_t v15 = 0LL;
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

uint64_t ByteBuffer.readWithUnsafeReadableBytes(_:)(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v4 = *(unsigned int *)(v1 + 8);
  unsigned int v5 = *(_DWORD *)(v1 + 12);
  uint64_t v6 = *(unsigned __int16 *)(v1 + 20);
  uint64_t v7 = *(unsigned __int8 *)(v1 + 22);
  uint64_t v8 = (void *)(*(void *)v1 + 24LL);
  uint64_t result = swift_beginAccess(v8, v11, 0LL, 0LL);
  if (v5 < v4)
  {
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v10 = *v8 + (v7 | (v6 << 8)) + v4;
  uint64_t result = a1(v10, v10 + v5 - v4);
  if (v2) {
    return result;
  }
  if (__CFADD__((_DWORD)v4, (_DWORD)result))
  {
LABEL_7:
    __break(1u);
    return result;
  }

  *(_DWORD *)(v1 + 8) = v4 + result;
  return result;
}

void ByteBuffer.readWithUnsafeReadableBytes<A>(_:)()
{
  int64_t v9 = (int *)((char *)&v17 - v8);
  ByteBuffer.withUnsafeReadableBytes<A>(_:)( (uint64_t)sub_100079D1C,  (uint64_t)&v17,  *(void *)v1,  *(void *)(v1 + 8),  *(unsigned int *)(v1 + 16) | ((unint64_t)*(unsigned __int16 *)(v1 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v1 + 22) << 48),  v3,  v10,  v11,  v17,  v18,  v0,  v5,  v4,  v19,  v20,  v21,  v22,  v23,  v24,  v25,  v26,  v27);
  if (v2) {
    goto LABEL_4;
  }
  int v13 = *v9;
  sub_100079F0C(v12, (uint64_t)v9 + *(int *)(v3 + 48));
  int v14 = *(_DWORD *)(v1 + 8);
  BOOL v15 = __CFADD__(v14, v13);
  int v16 = v14 + v13;
  if (!v15)
  {
    *(_DWORD *)(v1 + 8) = v16;
LABEL_4:
    sub_100079EF8();
    return;
  }

  __break(1u);
}

uint64_t ByteBuffer.readWithUnsafeMutableReadableBytes(_:)()
{
  uint64_t result = sub_10005D13C();
  if (!v1)
  {
    int v3 = *(_DWORD *)(v0 + 8);
    BOOL v4 = __CFADD__(v3, (_DWORD)result);
    int v5 = v3 + result;
    if (v4) {
      __break(1u);
    }
    else {
      *(_DWORD *)(v0 + 8) = v5;
    }
  }

  return result;
}

void ByteBuffer.readWithUnsafeMutableReadableBytes<A>(_:)()
{
  int64_t v9 = (int *)&v15[-v8];
  uint64_t v16 = v0;
  uint64_t v17 = v5;
  uint64_t v18 = v4;
  ByteBuffer.withUnsafeMutableReadableBytes<A>(_:)();
  if (v2) {
    goto LABEL_4;
  }
  int v11 = *v9;
  sub_100079F0C(v10, (uint64_t)v9 + *(int *)(v3 + 48));
  int v12 = *(_DWORD *)(v1 + 8);
  BOOL v13 = __CFADD__(v12, v11);
  int v14 = v12 + v11;
  if (!v13)
  {
    *(_DWORD *)(v1 + 8) = v14;
LABEL_4:
    sub_100079EF8();
    return;
  }

  __break(1u);
}

uint64_t sub_100078AE4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(char *, uint64_t, uint64_t)@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v10 = sub_100079EEC(0LL, (uint64_t)&type metadata for Int, a4);
  uint64_t result = a3((char *)a5 + *(int *)(v10 + 48), a1, a2);
  if (!v5) {
    *a5 = result;
  }
  return result;
}

void ByteBuffer.set(buffer:at:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v20;
  a20 = v21;
  unsigned int v23 = v22;
  unint64_t v24 = HIDWORD(v22);
  sub_1000487CC(v25 + 24, (uint64_t)&a10);
  if (v24 < v23)
  {
    __break(1u);
  }

  else
  {
    sub_100079DF0(v24 - v23);
    sub_100019398();
  }

void ByteBuffer.writeBytes(_:)(uint64_t a1, uint64_t a2)
{
  if (v4) {
    __break(1u);
  }
  else {
    *(_DWORD *)(v2 + 12) = v3;
  }
}

Swift::Int __swiftcall ByteBuffer.writeRepeatingByte(_:count:)(Swift::UInt8 _, Swift::Int count)
{
  int v3 = count;
  Swift::Int result = ByteBuffer.setRepeatingByte(_:count:at:)(_, count, *(unsigned int *)(v2 + 12));
  int v5 = *(_DWORD *)(v2 + 12);
  BOOL v6 = __CFADD__(v5, v3);
  int v7 = v5 + v3;
  if (v6)
  {
    __break(1u);
  }

  else
  {
    *(_DWORD *)(v2 + 12) = v7;
    sub_10001945C();
  }

  return result;
}

Swift::Int __swiftcall ByteBuffer.setRepeatingByte(_:count:at:)(Swift::UInt8 _, Swift::Int count, Swift::Int at)
{
  uint64_t v16 = v4;
  uint64_t v17 = v8;
  if (v6 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v9 = v7;
  uint64_t v10 = v7 + v6;
  if (__OFADD__(v7, v6))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  int v11 = result;
  ByteBuffer.reserveCapacity(_:)(v7 + v6);
  ByteBuffer._copyStorageAndRebaseIfNeeded()();
  uint64_t v12 = *(unsigned __int16 *)(v3 + 20);
  uint64_t v13 = *(unsigned __int8 *)(v3 + 22);
  int v14 = (void *)(*(void *)v3 + 24LL);
  Swift::Int result = sub_1000487CC((uint64_t)v14, (uint64_t)v15);
  if (v10 < v9)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (v10 - v9 < 0)
  {
LABEL_11:
    __break(1u);
    return result;
  }

  if (v10 != v9) {
    memset((void *)(*v14 + (v13 | (v12 << 8)) + v9), v11, v10 - v9);
  }
  sub_10002A568();
  return result;
}

_BYTE *sub_100078CA8(_BYTE *__c, _BYTE *__b, _BYTE *a3)
{
  if (!__b) {
    return __b;
  }
  if (a3 - __b >= 0)
  {
    if (a3 != __b) {
      memset(__b, (int)__c, a3 - __b);
    }
    return __b;
  }

  __break(1u);
  return __c;
}

uint64_t ByteBuffer.slice()(uint64_t result, unint64_t a2, uint64_t a3)
{
  BOOL v4 = HIDWORD(a2) >= a2;
  uint64_t v5 = (HIDWORD(a2) - a2);
  if (v4)
  {
    Swift::Int result = ByteBuffer.getSlice(at:length:)(a2, v5, result, a2, a3 & 0xFFFFFFFFFFFFFFLL);
    if (result) {
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t ByteBuffer.readSlice(length:)(uint64_t a1)
{
  uint64_t v4 = *(unsigned int *)(v1 + 8);
  unint64_t v6 = v4 | (v5 << 32);
  uint64_t v10 = v7 | (v8 << 32) | (v9 << 48);
  swift_retain();
  uint64_t v11 = ByteBuffer.getSlice(at:length:)(v4, a1, v2, v6, v10);
  uint64_t result = swift_release();
  if (!v11) {
    return v11;
  }
  if (!__CFADD__((_DWORD)v4, (_DWORD)a1))
  {
    *(_DWORD *)(v1 + 8) = v4 + a1;
    return v11;
  }

  __break(1u);
  return result;
}

void ByteBuffer.writeImmutableBuffer(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v21;
  a20 = v22;
  unint64_t v24 = v23;
  unsigned int v26 = v25;
  unint64_t v27 = HIDWORD(v25);
  Swift::UInt32 v28 = *(_DWORD *)(v20 + 12);
  uint64_t v30 = (void *)(v29 + 24);
  sub_1000487CC(v29 + 24, (uint64_t)&a10);
  if (v27 < v26)
  {
    __break(1u);
  }

  else
  {
    uint64_t v31 = *v30 + ((v24 >> 24) & 0xFFFF00 | BYTE6(v24)) + v26;
    ByteBuffer._setBytes(_:at:)(v31, v31 + v27 - v26, v28);
    sub_100079E94();
    if (!v33)
    {
      *(_DWORD *)(v20 + 12) = v32;
      sub_100019398();
      return;
    }
  }

  __break(1u);
}

void ByteBuffer.init(string:)()
{
}

#error "100078FC0: call analysis failed (funcsize=74)"
void ByteBuffer.init(substring:)( unint64_t a1,  unint64_t a2,  unint64_t a3,  unint64_t a4)
{
  ByteBufferAllocator.buffer(substring:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void))j_j__malloc,  (uint64_t)j_j__realloc,  (uint64_t)j_j__free);
  sub_100019390();
  sub_1000193B8();
}

uint64_t ByteBufferAllocator.buffer(substring:)( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t (*a5)(void), uint64_t a6, uint64_t a7)
{
  if (v11 < 0)
  {
    __break(1u);
    goto LABEL_11;
  }

  int v12 = v11;
  if (!v11)
  {
    if (qword_1002A8CC8 != -1) {
      goto LABEL_12;
    }
    goto LABEL_5;
  }

  sub_100079D88();
  sub_100079D90(v12, a5, a6, a7);
  int v14 = 0;
  Swift::UInt32 v15 = 0;
  __int16 v16 = 0;
  char v17 = 0;
  int v18 = *(_DWORD *)(v13 + 16);
  while (1)
  {
    uint64_t v35 = v13;
    int v36 = v14;
    Swift::UInt32 v37 = v15;
    int v38 = v18;
    __int16 v39 = v16;
    char v40 = v17;
    uint64_t v19 = static String._fromSubstring(_:)(a1);
    int v21 = sub_100079E58(v19, v20, (uint64_t)&v35, v15);
    if ((v22 & 1) != 0)
    {
      v23._countAndFlagsBits = sub_10007A010();
      int v21 = ByteBuffer._setStringSlowpath(_:at:)(v23, v15);
    }

    int v24 = v21;
    uint64_t v25 = sub_100019390();
    if (!__CFADD__(v37, v24)) {
      break;
    }
LABEL_11:
    __break(1u);
LABEL_12:
    swift_once(&qword_1002A8CC8, sub_10005B580);
LABEL_5:
    int v14 = qword_1002EB928;
    Swift::UInt32 v15 = HIDWORD(qword_1002EB928);
    int v18 = dword_1002EB930;
    __int16 v16 = word_1002EB934;
    char v17 = byte_1002EB936;
    uint64_t v13 = swift_retain();
  }

  return sub_100079D4C(v25, v26, v27, v28, v29, v30, v31, v32, v34, v35);
}

uint64_t ByteBuffer.init(staticString:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ByteBufferAllocator.buffer(staticString:)(a1, a2, a3, j_j__malloc, j_j__realloc, j_j__free, sub_10005B53C);
}

#error "1000792B4: call analysis failed (funcsize=63)"
uint64_t ByteBuffer.init<A>(bytes:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  ByteBufferAllocator.buffer<A>(bytes:)( a1,  (uint64_t (*)(void))j_j__malloc,  (uint64_t)j_j__realloc,  (uint64_t)j_j__free,  (uint64_t)sub_10005B53C,  a2,  a3);
  sub_100079E14();
  return v3;
}

uint64_t ByteBufferAllocator.buffer<A>(bytes:)( uint64_t *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = dispatch thunk of Sequence.underestimatedCount.getter(a6, a7);
  if (v14 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  int v16 = v14;
  if (!v14)
  {
    if (qword_1002A8CC8 == -1)
    {
LABEL_5:
      *(void *)&__int128 v15 = qword_1002EB928;
      __int128 v27 = v15;
      uint64_t v17 = swift_retain();
      goto LABEL_6;
    }

uint64_t ByteBuffer.init<A>(integer:endianness:as:)(uint64_t a1)
{
  return v1;
}

#error "1000795CC: call analysis failed (funcsize=63)"
#error "100079678: call analysis failed (funcsize=41)"
#error "100079734: call analysis failed (funcsize=44)"
#error "100079840: call analysis failed (funcsize=56)"
#error "10007992C: call analysis failed (funcsize=56)"
#error "1000799D0: call analysis failed (funcsize=52)"
#error "100079ABC: call analysis failed (funcsize=46)"
void Optional<A>.setOrWriteImmutableBuffer(_:)( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  char a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  Swift::UInt32 v32;
  void *v33;
  uint64_t v34;
  int v35;
  char v36;
  sub_100079D70();
  a21 = v23;
  a22 = v27;
  uint64_t v28 = BYTE6(v26);
  uint64_t v29 = v25;
  uint64_t v30 = HIDWORD(v25);
  uint64_t v31 = HIDWORD(v26);
  if (*(void *)v22)
  {
    uint64_t v32 = *(_DWORD *)(v22 + 12);
    char v33 = (void *)(v24 + 24);
    sub_1000487CC(v24 + 24, (uint64_t)&a10);
    if (v30 < v29)
    {
      __break(1u);
    }

    else
    {
      uint64_t v34 = *v33 + (v28 | ((unint64_t)(unsigned __int16)v31 << 8)) + v29;
      ByteBuffer._setBytes(_:at:)(v34, v34 + v30 - v29, v32);
      sub_100079E94();
      if (!v36)
      {
        *(_DWORD *)(v22 + 12) = v35;
LABEL_7:
        sub_10002A568();
        return;
      }
    }

    __break(1u);
  }

  else if (HIDWORD(v25) >= v25)
  {
    *(void *)uint64_t v22 = v24;
    *(void *)(v22 + 8) = v25;
    *(_DWORD *)(v22 + 16) = v26;
    *(_BYTE *)(v22 + 22) = BYTE6(v26);
    *(_WORD *)(v22 + 2sub_10006F0B8(12LL, 0) = WORD2(v26);
    swift_retain();
    goto LABEL_7;
  }

  __break(1u);
}

void Optional<A>.setOrWriteBuffer(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  if (*(void *)v22)
  {
    ByteBuffer.writeBuffer(_:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22);
  }

  else
  {
    uint64_t v24 = *(unsigned int *)(a1 + 8);
    uint64_t v23 = *(unsigned int *)(a1 + 12);
    if (v23 < v24)
    {
      __break(1u);
    }

    else
    {
      int v25 = *(_DWORD *)(a1 + 16);
      __int16 v26 = *(_WORD *)(a1 + 20);
      char v27 = *(_BYTE *)(a1 + 22);
      *(void *)uint64_t v22 = *(void *)a1;
      *(void *)(v22 + 8) = v24 | (v23 << 32);
      *(_BYTE *)(v22 + 22) = v27;
      *(_WORD *)(v22 + 2sub_10006F0B8(12LL, 0) = v26;
      *(_DWORD *)(v22 + 16) = v25;
      *(_DWORD *)(a1 + 8) = v23;
      swift_retain();
      sub_10001945C();
    }
  }

void sub_100079C28(int __c, size_t __len, void *__b)
{
  if ((__len & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    if (__len) {
      memset(__b, __c, __len);
    }
    sub_10001945C();
  }

uint64_t sub_100079C60(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 - a3;
  if (!a3) {
    uint64_t v4 = 0LL;
  }
  if (result < 0 || v4 < result)
  {
    __break(1u);
  }

  else if ((a2 & 0x8000000000000000LL) == 0 && v4 >= a2)
  {
    return a2 - result;
  }

  __break(1u);
  return result;
}

uint64_t sub_100079C94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002AD748);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100079CDC(uint64_t a1)
{
  uint64_t v2 = sub_1000175B0(&qword_1002AD748);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100079D1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_100078AE4(a1, a2, *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 24), *(void *)(v3 + 16), a3);
}

uint64_t sub_100079D38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_100079D1C(a1, a2, a3);
}

uint64_t sub_100079D4C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return a10;
}

  ;
}

uint64_t sub_100079D88()
{
  return type metadata accessor for ByteBuffer._Storage();
}

void sub_100079D90(int a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
}

Swift::Int sub_100079D9C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, int a13, __int16 a14, char a15)
{
  return ByteBuffer.setRepeatingByte(_:count:at:)(v17, v15, v16);
}

void sub_100079DC4(int a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_100079DCC( char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  LODWORD(a12) = v25;
  WORD2(a12) = v27;
  BYTE6(a12) = v26;
  ByteBuffer.setDispatchData(_:at:)( v22,  v23,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a1,  __SPAIR64__(v23, v24),  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22);
}

uint64_t sub_100079DF0@<X0>(unsigned int a1@<W8>)
{
  uint64_t v5 = *v4 + ((v3 >> 24) & 0xFFFF00 | BYTE6(v3)) + v2;
  return ByteBuffer._setBytes(_:at:)(v5, v5 + a1, v1);
}

uint64_t sub_100079E14()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v0 - 8) + 8LL))(v1, v0);
}

uint64_t sub_100079E34()
{
  return *(void *)(v1 + 24) + ((v0 >> 24) & 0xFFFF00 | BYTE6(v0)) + v3 + v2;
}

uint64_t sub_100079E58(uint64_t a1, unint64_t a2, uint64_t a3, Swift::UInt32 a4)
{
  return sub_100078258(a1, a2, a3, a4);
}

uint64_t sub_100079E60(uint64_t a1)
{
  return swift_retain(a1);
}

uint64_t sub_100079E70( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return a12;
}

  ;
}

uint64_t sub_100079EA0@<X0>(void *a1@<X8>)
{
  return swift_retain(*a1);
}

uint64_t sub_100079EB8@<X0>(void *a1@<X8>)
{
  return swift_retain(*a1);
}

  ;
}

uint64_t sub_100079EEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getTupleTypeMetadata2(a1, a2, a3, 0LL, 0LL);
}

  ;
}

uint64_t sub_100079F0C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32LL))(v3, a2, v2);
}

uint64_t sub_100079F20()
{
  return DispatchData.count.getter();
}

  ;
}

uint64_t sub_100079F40( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return a12;
}

  ;
}

Swift::Int sub_100079F74()
{
  v3._countAndFlagsBits = v1;
  v3._object = v0;
  return ByteBuffer._setStringSlowpath(_:at:)(v3, v2);
}

uint64_t sub_100079F84()
{
  return type metadata accessor for DispatchData(0LL);
}

  ;
}

  ;
}

uint64_t sub_100079FBC(uint64_t a1, uint64_t a2)
{
  return ByteBuffer._setBytes(_:at:)(a1, a2, v2);
}

  ;
}

  ;
}

uint64_t sub_100079FF0(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

  ;
}

uint64_t sub_10007A010()
{
  return v0;
}

uint64_t AddressedEnvelope.init(remoteAddress:data:metadata:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v14 = type metadata accessor for AddressedEnvelope(0LL, a6, a3, a4);
  Swift::Int v15 = (uint64_t *)&a7[*(int *)(v14 + 32)];
  *(void *)a7 = a1;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32LL))( &a7[*(int *)(v14 + 28)],  a2,  a6);
  *Swift::Int v15 = a3;
  v15[1] = a4;
  __int128 v15[2] = a5;
  return result;
}

uint64_t type metadata accessor for AddressedEnvelope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AddressedEnvelope);
}

void AddressedEnvelope.remoteAddress.getter()
{
}

void AddressedEnvelope.remoteAddress.setter()
{
  *uint64_t v1 = v0;
  sub_10001945C();
}

uint64_t AddressedEnvelope.data.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 28));
}

uint64_t AddressedEnvelope.data.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8LL) + 40LL))( v2 + *(int *)(a2 + 28),  a1);
}

uint64_t (*AddressedEnvelope.data.modify())()
{
  return debugOnly(_:);
}

uint64_t AddressedEnvelope.metadata.getter(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 32));
  uint64_t v3 = *v2;
  sub_100034980(*v2, v2[1]);
  return v3;
}

void AddressedEnvelope.metadata.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t *)(v4 + *(int *)(a4 + 32));
  sub_100034738(*v8, v8[1]);
  *uint64_t v8 = a1;
  v8[1] = a2;
  v8[2] = a3;
  sub_1000193B8();
}

uint64_t (*AddressedEnvelope.metadata.modify())()
{
  return debugOnly(_:);
}

uint64_t AddressedEnvelope.init(remoteAddress:data:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v9 = type metadata accessor for AddressedEnvelope(0LL, a3, a3, a4);
  uint64_t v10 = &a5[*(int *)(v9 + 32)];
  *((void *)v10 + 1) = 0LL;
  *((void *)v10 + 2) = 0LL;
  *(void *)uint64_t v10 = 4LL;
  *(void *)a5 = a1;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32LL))( &a5[*(int *)(v9 + 28)],  a2,  a3);
}

uint64_t AddressedEnvelope.Metadata.ecnState.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t AddressedEnvelope.Metadata.packetInfo.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

void AddressedEnvelope.Metadata.packetInfo.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  sub_1000193B8();
}

  ;
}

void AddressedEnvelope.Metadata.hash(into:)( uint64_t a1, unsigned __int8 a2, unint64_t a3, Swift::UInt a4)
{
  if ((~a3 & 0xF000000000000007LL) != 0)
  {
    Hasher._combine(_:)(1u);
    swift_retain();
    SocketAddress.hash(into:)(v4, a3);
    Hasher._combine(_:)(a4);
    sub_100029DF4(a3);
  }

  else
  {
    Hasher._combine(_:)(0);
    sub_1000193B8();
  }

BOOL static AddressedEnvelope.Metadata.__derived_struct_equals(_:_:)( char a1, unint64_t a2, uint64_t a3, char a4, unint64_t a5, uint64_t a6)
{
  if (a1 != a4) {
    return 0LL;
  }
  unint64_t v8 = a5 & 0xF000000000000007LL;
  if ((~a2 & 0xF000000000000007LL) != 0)
  {
    if (v8 != 0xF000000000000007LL)
    {
      sub_100029DDC(a5);
      sub_100029DDC(a2);
      BOOL v12 = static SocketAddress.== infix(_:_:)(a2, a5);
      sub_100029DF4(a5);
      sub_100029DF4(a2);
      if (v12 && a3 == a6) {
        return 1LL;
      }
    }

    return 0LL;
  }

  return v8 == 0xF000000000000007LL;
}

void AddressedEnvelope.Metadata.hashValue.getter(uint64_t a1, unint64_t a2, Swift::UInt a3)
{
  unsigned __int8 v5 = a1;
  sub_100060600(a1);
  AddressedEnvelope.Metadata.hash(into:)((uint64_t)v6, v5, a2, a3);
  sub_100035698();
  sub_10007B61C();
}

void sub_10007A440()
{
}

void sub_10007A44C(uint64_t a1)
{
}

Swift::Int sub_10007A458()
{
  return Hasher._finalize()();
}

BOOL sub_10007A498(uint64_t a1, uint64_t a2)
{
  return static AddressedEnvelope.Metadata.__derived_struct_equals(_:_:)( *(_BYTE *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(_BYTE *)a2,  *(void *)(a2 + 8),  *(void *)(a2 + 16));
}

uint64_t AddressedEnvelope.description.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  _StringGuts.grow(_:)(49LL);
  v4._object = (void *)0x800000010021A640LL;
  v4._countAndFlagsBits = 0xD000000000000023LL;
  String.append(_:)(v4);
  unint64_t v5 = *v1;
  swift_retain();
  v6._countAndFlagsBits = SocketAddress.description.getter(v5);
  String.append(_:)(v6);
  swift_release(v5 & 0x3FFFFFFFFFFFFFFFLL);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x203A61746164202CLL;
  v7._object = (void *)0xE800000000000000LL;
  String.append(_:)(v7);
  DefaultStringInterpolation.appendInterpolation<A>(_:)((char *)v2 + *(int *)(a1 + 28), *(void *)(a1 + 16));
  v8._countAndFlagsBits = 32032LL;
  v8._object = (void *)0xE200000000000000LL;
  String.append(_:)(v8);
  return 0LL;
}

void NIOExplicitCongestionNotificationState.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int NIOExplicitCongestionNotificationState.hashValue.getter(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  sub_100060600(a1);
  Hasher._combine(_:)(v1);
  return sub_100035698();
}

Swift::Int sub_10007A5F0()
{
  return NIOExplicitCongestionNotificationState.hashValue.getter(*v0);
}

void sub_10007A5F8(uint64_t a1)
{
}

void SingleConnectionFailure.target.getter()
{
}

uint64_t CircularBuffer.headBackingIndex.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

void NIOPacketInfo.hash(into:)(uint64_t a1, unint64_t a2, Swift::UInt a3)
{
  uint64_t v6 = a2 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  SocketAddress.hash(into:)(a1, a2);
  swift_release(v6);
  Hasher._combine(_:)(a3);
  sub_1000193B8();
}

uint64_t static NIOPacketInfo.__derived_struct_equals(_:_:)( unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return static SocketAddress.== infix(_:_:)(a1, a3) & (a2 == a4);
}

void NIOPacketInfo.hashValue.getter(unint64_t a1, Swift::UInt a2)
{
}

void sub_10007A708()
{
}

void sub_10007A710(uint64_t a1)
{
}

Swift::Int sub_10007A718()
{
  unint64_t v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)(v4);
  swift_retain();
  SocketAddress.hash(into:)((uint64_t)v4, v1);
  swift_release(v1 & 0x3FFFFFFFFFFFFFFFLL);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10007A780(uint64_t a1, uint64_t a2)
{
  return static NIOPacketInfo.__derived_struct_equals(_:_:)( *(void *)a1,  *(void *)(a1 + 8),  *(void *)a2,  *(void *)(a2 + 8));
}

uint64_t sub_10007A794(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for AddressedEnvelope<A>.Metadata, a1);
}

unint64_t sub_10007A7A8()
{
  unint64_t result = qword_1002AD750;
  if (!qword_1002AD750)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NIOExplicitCongestionNotificationState,  &type metadata for NIOExplicitCongestionNotificationState);
    atomic_store(result, (unint64_t *)&qword_1002AD750);
  }

  return result;
}

unint64_t sub_10007A7E8()
{
  unint64_t result = qword_1002AD758[0];
  if (!qword_1002AD758[0])
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NIOPacketInfo, &type metadata for NIOPacketInfo);
    atomic_store(result, qword_1002AD758);
  }

  return result;
}

uint64_t sub_10007A824(uint64_t a1)
{
  v4[0] = "\b";
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = &unk_1001F9FF0;
    swift_initStructMetadata(a1, 0LL, 3LL, v4, a1 + 24);
    return 0LL;
  }

  return result;
}

uint64_t *sub_10007A8A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64) + 7LL;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v7 + ((v6 + 8) & ~v6)) & 0xFFFFFFFFFFFFFFF8LL) != 0
    && ((v7 + ((v6 + 8) & ~v6)) & 0xFFFFFFFFFFFFFFF8LL) < 0xFFFFFFFFFFFFFFE8LL)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
LABEL_15:
    swift_retain(v10);
    return a1;
  }

  uint64_t v11 = *a2 & 0x3FFFFFFFFFFFFFFFLL;
  *a1 = *a2;
  uint64_t v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_retain(v11);
  v14(v12, v13, v4);
  unint64_t v15 = (v7 + v12) & 0xFFFFFFFFFFFFFFF8LL;
  unsigned int v16 = (unsigned __int8 *)((v7 + v13) & 0xFFFFFFFFFFFFFFF8LL);
  unsigned int v17 = *v16;
  if (v17 > 3)
  {
    __int128 v19 = *(_OWORD *)v16;
    *(void *)(v15 + 16) = *((void *)v16 + 2);
    *(_OWORD *)unint64_t v15 = v19;
    return a1;
  }

  *(_BYTE *)unint64_t v15 = v17;
  uint64_t v18 = *((void *)v16 + 1);
  if ((~v18 & 0xF000000000000007LL) != 0)
  {
    uint64_t v10 = v18 & 0x3FFFFFFFFFFFFFFFLL;
    *(void *)(v15 + 8) = v18;
    *(void *)(v15 + 16) = *((void *)v16 + 2);
    goto LABEL_15;
  }

  *(_OWORD *)(v15 + 8) = *(_OWORD *)(v16 + 8);
  return a1;
}

uint64_t sub_10007A9E0(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8LL);
  unint64_t v5 = ((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t))(v4 + 8))(v5);
  uint64_t v7 = (unsigned __int8 *)((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  if (*v7 <= 3u)
  {
    uint64_t v8 = *((void *)v7 + 1);
    if ((~v8 & 0xF000000000000007LL) != 0) {
      return swift_release(v8 & 0x3FFFFFFFFFFFFFFFLL);
    }
  }

  return result;
}

void *sub_10007AA78(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *a2 & 0x3FFFFFFFFFFFFFFFLL;
  *a1 = *a2;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_retain(v4);
  v10(v8, v9, v5);
  uint64_t v11 = *(void *)(v6 + 64) + 7LL;
  unint64_t v12 = (v11 + v8) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v13 = (unsigned __int8 *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8LL);
  unsigned int v14 = *v13;
  if (v14 > 3)
  {
    __int128 v16 = *(_OWORD *)v13;
    *(void *)(v12 + 16) = *((void *)v13 + 2);
    *(_OWORD *)unint64_t v12 = v16;
  }

  else
  {
    *(_BYTE *)unint64_t v12 = v14;
    uint64_t v15 = *((void *)v13 + 1);
    if ((~v15 & 0xF000000000000007LL) != 0)
    {
      *(void *)(v12 + 8) = v15;
      *(void *)(v12 + 16) = *((void *)v13 + 2);
      swift_retain(v15 & 0x3FFFFFFFFFFFFFFFLL);
    }

    else
    {
      *(_OWORD *)(v12 + 8) = *(_OWORD *)(v13 + 8);
    }
  }

  return a1;
}

uint64_t *sub_10007AB60(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  uint64_t v7 = v6 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  swift_release(v7);
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = ((unint64_t)a1 + v9 + 8) & ~v9;
  uint64_t v11 = ((unint64_t)a2 + v9 + 8) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 64) + 7LL;
  uint64_t v13 = (unsigned __int8 *)((v12 + v10) & 0xFFFFFFFFFFFFFFF8LL);
  unsigned int v14 = (unsigned __int8 *)((v12 + v11) & 0xFFFFFFFFFFFFFFF8LL);
  unsigned int v15 = *v14;
  if (*v13 <= 3u)
  {
    if (v15 <= 3)
    {
      *uint64_t v13 = v15;
      uint64_t v16 = *((void *)v13 + 1);
      uint64_t v17 = *((void *)v14 + 1);
      unint64_t v18 = v17 & 0xF000000000000007LL;
      if ((~v16 & 0xF000000000000007LL) != 0)
      {
        if (v18 != 0xF000000000000007LL)
        {
          *((void *)v13 + 1) = v17;
          uint64_t v21 = v16 & 0x3FFFFFFFFFFFFFFFLL;
          swift_retain();
          swift_release(v21);
          *((void *)v13 + 2) = *((void *)v14 + 2);
          return a1;
        }

        sub_10007ACF8((void *)v13 + 1);
        goto LABEL_15;
      }

      if (v18 == 0xF000000000000007LL)
      {
LABEL_15:
        *(_OWORD *)(v13 + 8) = *(_OWORD *)(v14 + 8);
        return a1;
      }

      goto LABEL_12;
    }

    uint64_t v19 = *((void *)v13 + 1);
    if ((~v19 & 0xF000000000000007LL) != 0) {
      swift_release(v19 & 0x3FFFFFFFFFFFFFFFLL);
    }
    goto LABEL_11;
  }

  if (v15 > 3)
  {
LABEL_11:
    __int128 v20 = *(_OWORD *)v14;
    *((void *)v13 + 2) = *((void *)v14 + 2);
    *(_OWORD *)uint64_t v13 = v20;
    return a1;
  }

  *uint64_t v13 = v15;
  uint64_t v17 = *((void *)v14 + 1);
  if ((~v17 & 0xF000000000000007LL) != 0)
  {
LABEL_12:
    *((void *)v13 + 1) = v17;
    *((void *)v13 + 2) = *((void *)v14 + 2);
    swift_retain();
    return a1;
  }

  *(_OWORD *)(v13 + 8) = *(_OWORD *)(v14 + 8);
  return a1;
}

void *sub_10007ACF8(void *a1)
{
  return a1;
}

void *sub_10007AD24(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = ((unint64_t)a1 + v5 + 8) & ~v5;
  uint64_t v7 = ((unint64_t)a2 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  uint64_t v8 = *(void *)(v4 + 64) + 7LL;
  unint64_t v9 = (v8 + v6) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v10 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v11 = *(void *)(v10 + 16);
  *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
  *(void *)(v9 + 16) = v11;
  return a1;
}

uint64_t *sub_10007ADAC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_release(v6 & 0x3FFFFFFFFFFFFFFFLL);
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 64) + 7LL;
  uint64_t v12 = (unsigned __int8 *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v13 = (unsigned __int8 *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8LL);
  if (*v12 > 3u)
  {
LABEL_9:
    __int128 v18 = *(_OWORD *)v13;
    *((void *)v12 + 2) = *((void *)v13 + 2);
    *(_OWORD *)uint64_t v12 = v18;
    return a1;
  }

  unsigned int v14 = *v13;
  if (v14 > 3)
  {
    uint64_t v17 = *((void *)v12 + 1);
    if ((~v17 & 0xF000000000000007LL) != 0) {
      swift_release(v17 & 0x3FFFFFFFFFFFFFFFLL);
    }
    goto LABEL_9;
  }

  uint64_t v15 = *((void *)v12 + 1);
  *uint64_t v12 = v14;
  uint64_t v16 = *((void *)v13 + 1);
  if ((~v15 & 0xF000000000000007LL) != 0)
  {
    if ((~v16 & 0xF000000000000007LL) != 0)
    {
      *((void *)v12 + 1) = v16;
      swift_release(v15 & 0x3FFFFFFFFFFFFFFFLL);
      *((void *)v12 + 2) = *((void *)v13 + 2);
      return a1;
    }

    sub_10007ACF8((void *)v12 + 1);
  }

  *(_OWORD *)(v12 + 8) = *(_OWORD *)(v13 + 8);
  return a1;
}

uint64_t sub_10007AED4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = *(void *)(v5 + 64) + 7LL;
  if (v7 >= a2)
  {
    uint64_t v14 = (a1 + v8 + 8) & ~v8;
    if (v6 < 0xFB)
    {
      unsigned int v15 = *(unsigned __int8 *)((v9 + v14) & 0xFFFFFFFFFFFFF8LL);
      BOOL v16 = v15 >= 4;
      unsigned int v17 = v15 - 4;
      if (!v16) {
        unsigned int v17 = -1;
      }
      if (v17 + 1 >= 2) {
        return v17;
      }
      else {
        return 0LL;
      }
    }

    else
    {
      return sub_10001D158(v14, v6, v4);
    }
  }

  else
  {
    if (((((v9 + ((v8 + 8) & ~v8)) & 0xFFFFFFFFFFFFFFF8LL) + 24) & 0xFFFFFFF8) != 0) {
      unsigned int v10 = 2;
    }
    else {
      unsigned int v10 = a2 - v7 + 1;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_10007AF60 + 4 * byte_1001F9E20[v12]))();
  }

void sub_10007AFEC(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0xFBu) {
    unsigned int v6 = 251;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    int v10 = 0;
  }

  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 8) & ~(_DWORD)v7)) & 0xFFFFFFF8) == 0xFFFFFFE8) {
      unsigned int v8 = a3 - v6 + 1;
    }
    else {
      unsigned int v8 = 2;
    }
    if (v8 >= 0x10000) {
      int v9 = 4;
    }
    else {
      int v9 = 2;
    }
    if (v8 < 0x100) {
      int v9 = 1;
    }
    if (v8 >= 2) {
      int v10 = v9;
    }
    else {
      int v10 = 0;
    }
  }

  if (a2 > v6)
  {
    if (((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 8) & ~(_DWORD)v7)) & 0xFFFFFFF8) != 0xFFFFFFE8)
    {
      unsigned int v11 = ~v6 + a2;
      bzero(a1, ((*(void *)(v5 + 64) + 7LL + ((v7 + 8) & ~v7)) & 0xFFFFFFFFFFFFFFF8LL) + 24);
      *a1 = v11;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X13 }

void sub_10007B0EC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(_BYTE *)(v6 + v7) = 0;
  if ((_DWORD)a1)
  {
    uint64_t v8 = (v6 + v5 + 8) & a4;
    if (a2 < 0xFB)
    {
      int v9 = (void *)((v4 + v8) & 0xFFFFFFFFFFFFFFF8LL);
      if (a1 > 0xFB)
      {
        *int v9 = 0LL;
        v9[1] = 0LL;
        void v9[2] = 0LL;
        *(_DWORD *)int v9 = a1 - 252;
      }

      else
      {
        *(_BYTE *)int v9 = a1 + 4;
      }
    }

    else
    {
      sub_10001762C(v8, a1, a2, a3);
    }
  }

uint64_t sub_10007B18C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if ((~v1 & 0xF000000000000007LL) != 0) {
    return swift_release(v1 & 0x3FFFFFFFFFFFFFFFLL);
  }
  return result;
}

void sub_10007B1A8(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v2 = *(void *)(a2 + 8);
  if ((~v2 & 0xF000000000000007LL) != 0)
  {
    uint64_t v3 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v2;
    *(void *)(a1 + 16) = v3;
    swift_retain();
  }

  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }

  sub_10001945C();
}

uint64_t sub_10007B200(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v5 = (_OWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v7 = (_OWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v8 = v6 & 0xF000000000000007LL;
  if ((~v4 & 0xF000000000000007LL) != 0)
  {
    if (v8 != 0xF000000000000007LL)
    {
      *(void *)(a1 + 8) = v6;
      uint64_t v9 = v4 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      swift_release(v9);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      return a1;
    }

    sub_10007ACF8((void *)(a1 + 8));
    goto LABEL_6;
  }

  if (v8 == 0xF000000000000007LL)
  {
LABEL_6:
    *uint64_t v5 = *v7;
    return a1;
  }

  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t sub_10007B2B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 8);
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = (_OWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if ((~v3 & 0xF000000000000007LL) != 0)
  {
    if ((~v5 & 0xF000000000000007LL) != 0)
    {
      *(void *)(a1 + 8) = v5;
      swift_release(v3 & 0x3FFFFFFFFFFFFFFFLL);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      return a1;
    }

    sub_10007ACF8((void *)(a1 + 8));
  }

  *uint64_t v4 = *v6;
  return a1;
}

uint64_t sub_10007B330(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && a1[24])
    {
      int v2 = *(_DWORD *)a1 + 252;
    }

    else
    {
      unsigned int v3 = *a1;
      BOOL v4 = v3 >= 4;
      int v2 = v3 - 4;
      if (!v4) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_10007B36C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)uint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(_BYTE *)uint64_t result = a2 + 3;
    }
  }

  return result;
}

uint64_t type metadata accessor for AddressedEnvelope.Metadata( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AddressedEnvelope.Metadata);
}

uint64_t storeEnumTagSinglePayload for NIOExplicitCongestionNotificationState( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10007B408 + 4 * byte_1001F9E34[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10007B43C + 4 * byte_1001F9E2F[v4]))();
}

uint64_t sub_10007B43C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007B444(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10007B44CLL);
  }
  return result;
}

uint64_t sub_10007B458(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10007B460LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10007B464(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007B46C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NIOExplicitCongestionNotificationState()
{
  return &type metadata for NIOExplicitCongestionNotificationState;
}

__int128 *initializeBufferWithCopyOfBuffer for NIOPacketInfo(__int128 *a1, __int128 *a2)
{
  __int128 v3 = *a2;
  *a1 = *a2;
  swift_retain(v3 & 0x3FFFFFFFFFFFFFFFLL);
  return a1;
}

uint64_t destroy for SocketAddress(void *a1)
{
  return swift_release(*a1 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t *assignWithCopy for NIOPacketInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2 & 0x3FFFFFFFFFFFFFFFLL;
  uint64_t v5 = *a1;
  *a1 = *a2;
  uint64_t v6 = v5 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain(v4);
  swift_release(v6);
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for NIOPacketInfo(void *a1, _OWORD *a2)
{
  *(_OWORD *)a1 = *a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for NIOPacketInfo(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7E && *(_BYTE *)(a1 + 16))
    {
      unsigned int v2 = *(_DWORD *)a1 + 125;
    }

    else
    {
      unsigned int v2 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
      if (v2 >= 0x7D) {
        unsigned int v2 = -1;
      }
    }
  }

  else
  {
    unsigned int v2 = -1;
  }

  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for NIOPacketInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)uint64_t result = a2 - 126;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7E) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7E) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007LL;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NIOPacketInfo()
{
  return &type metadata for NIOPacketInfo;
}

uint64_t sub_10007B60C()
{
  return swift_release(*v0 & 0x3FFFFFFFFFFFFFFFLL);
}

  ;
}

void sub_10007B62C(uint64_t a1, unsigned __int8 a2)
{
}

void *sub_10007B638(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    uint64_t v5 = a1 + 40;
    do
    {
      uint64_t v6 = *(void *)(v5 - 8);
      swift_unknownObjectRetain(v6);
      ChannelPipeline.removeHandler(_:)();
      uint64_t v8 = v7;
      uint64_t v9 = swift_unknownObjectRelease(v6);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v9);
      uint64_t v10 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
      uint64_t v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v8);
      specialized ContiguousArray._endMutation()(v11);
      v5 += 16LL;
      --v3;
    }

    while (v3);
    swift_release(a2);
  }

  else
  {
    swift_release(a2);
  }

  return _swiftEmptyArrayStorage;
}

void NIOHTTPClientUpgradeHandler.__allocating_init(upgraders:httpHandlers:upgradeCompletionHandler:)()
{
}

void *NIOHTTPClientUpgradeError.responseProtocolNotFound.unsafeMutableAddressor()
{
  return &static NIOHTTPClientUpgradeError.responseProtocolNotFound;
}

void *NIOHTTPClientUpgradeError.invalidHTTPOrdering.unsafeMutableAddressor()
{
  return &static NIOHTTPClientUpgradeError.invalidHTTPOrdering;
}

void *NIOHTTPClientUpgradeError.upgraderDeniedUpgrade.unsafeMutableAddressor()
{
  return &static NIOHTTPClientUpgradeError.upgraderDeniedUpgrade;
}

void *NIOHTTPClientUpgradeError.writingToHandlerDuringUpgrade.unsafeMutableAddressor()
{
  return &static NIOHTTPClientUpgradeError.writingToHandlerDuringUpgrade;
}

void *NIOHTTPClientUpgradeError.writingToHandlerAfterUpgradeCompleted.unsafeMutableAddressor()
{
  return &static NIOHTTPClientUpgradeError.writingToHandlerAfterUpgradeCompleted;
}

void *NIOHTTPClientUpgradeError.writingToHandlerAfterUpgradeFailed.unsafeMutableAddressor()
{
  return &static NIOHTTPClientUpgradeError.writingToHandlerAfterUpgradeFailed;
}

void *NIOHTTPClientUpgradeError.receivedResponseBeforeRequestSent.unsafeMutableAddressor()
{
  return &static NIOHTTPClientUpgradeError.receivedResponseBeforeRequestSent;
}

void *NIOHTTPClientUpgradeError.receivedResponseAfterUpgradeCompleted.unsafeMutableAddressor()
{
  return &static NIOHTTPClientUpgradeError.receivedResponseAfterUpgradeCompleted;
}

uint64_t NIOHTTPClientUpgradeError.description.getter(char a1)
{
  char v2 = a1;
  return String.init<A>(describing:)(&v2, &type metadata for NIOHTTPClientUpgradeError.Code);
}

uint64_t sub_10007B7FC()
{
  return NIOHTTPClientUpgradeError.description.getter(*v0);
}

void NIOHTTPClientUpgradeHandler.init(upgraders:httpHandlers:upgradeCompletionHandler:)()
{
  *(_BYTE *)(v1 + 48) = 0;
  *(void *)(v1 + 56) = 0LL;
  *(void *)(v1 + 64) = 0LL;
  sub_10002AF70(0x10uLL);
  *(void *)(v1 + 72) = v5;
  *(void *)(v1 + 8sub_10006F0B8(12LL, 0) = v6;
  *(void *)(v1 + 88) = v7;
  if (*(void *)(v4 + 16))
  {
    *(void *)(v1 + 16) = v4;
    *(void *)(v1 + 24) = v3;
    *(void *)(v1 + 32) = v2;
    *(void *)(v1 + 4sub_10006F0B8(12LL, 0) = v0;
    sub_10002A3D4();
  }

  else
  {
    __break(1u);
  }

void NIOHTTPClientUpgradeHandler.write(context:data:promise:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  switch(*(void *)(v3 + 56))
  {
    case 0LL:
      sub_10007B9D0(a2, (uint64_t)v15);
      sub_10007D78C();
      sub_1000324E8((uint64_t)v15);
      break;
    case 1LL:
    case 3LL:
      sub_10007D78C();
      break;
    case 4LL:
    case 5LL:
      if (a3)
      {
        unint64_t v4 = sub_10007B994();
        uint64_t v5 = sub_1000252D0((uint64_t)&type metadata for NIOHTTPClientUpgradeError, v4);
        *uint64_t v6 = 4;
        swift_errorRetain(v5);
        sub_10007D77C();
        sub_10002A620();
        sub_10002A620();
      }

      unint64_t v7 = sub_10007B994();
      uint64_t v9 = sub_1000252D0((uint64_t)&type metadata for NIOHTTPClientUpgradeError, v7);
      char v10 = 4;
      goto LABEL_11;
    default:
      if (a3)
      {
        unint64_t v11 = sub_10007B994();
        uint64_t v12 = sub_1000252D0((uint64_t)&type metadata for NIOHTTPClientUpgradeError, v11);
        *uint64_t v13 = 3;
        swift_errorRetain(v12);
        sub_10007D77C();
        sub_10002A620();
        sub_10002A620();
      }

      unint64_t v14 = sub_10007B994();
      uint64_t v9 = sub_1000252D0((uint64_t)&type metadata for NIOHTTPClientUpgradeError, v14);
      char v10 = 3;
LABEL_11:
      *uint64_t v8 = v10;
      ChannelHandlerContext.fireErrorCaught(_:)();
      sub_10007D774(v9);
      break;
  }

unint64_t sub_10007B994()
{
  unint64_t result = qword_1002AD860;
  if (!qword_1002AD860)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NIOHTTPClientUpgradeError,  &type metadata for NIOHTTPClientUpgradeError);
    atomic_store(result, (unint64_t *)&qword_1002AD860);
  }

  return result;
}

uint64_t sub_10007B9D0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1000175B0(&qword_1002AA498);
  uint64_t v7 = sub_10002D698();
  uint64_t v10 = v7;
  uint64_t v11 = v8;
  uint64_t v12 = v9;
  if (HIBYTE(v9))
  {
    sub_100032488(v7, v8, v9, SHIBYTE(v9));
    return sub_10002B550(a1, a2);
  }

  else
  {
    *(void *)&__int128 v17 = v7;
    *((void *)&v17 + 1) = v8;
    unsigned __int8 v18 = v9;
    unint64_t v14 = *(void *)(v3 + 56);
    uint64_t v15 = *(void *)(v3 + 64);
    *(_OWORD *)(v3 + 56) = xmmword_1001FA330;
    swift_retain();
    swift_bridgeObjectRetain();
    sub_10007D084(v14, v15);
    sub_10007BAE4((uint64_t)&v17);
    sub_10007BDC8((uint64_t)&v17);
    int v16 = v18;
    *(void *)(a2 + 24) = v6;
    *(_OWORD *)a2 = v17;
    *(_DWORD *)(a2 + 16) = v16;
    *(_DWORD *)(a2 + 2sub_10006F0B8(12LL, 0) = 0;
    *(_BYTE *)(a2 + 56) = 2;
    return sub_100032488(v10, v11, v12, 0);
  }

uint64_t sub_10007BAE4(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = v3 + 32;
    swift_bridgeObjectRetain();
    uint64_t v6 = _swiftEmptyArrayStorage;
    while (1)
    {
      sub_100023BAC(v5, (uint64_t)v29);
      uint64_t v7 = v30;
      uint64_t v8 = v31;
      sub_100019F58(v29, v30);
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v7, v8);
      sub_100019F7C(v29);
      uint64_t v10 = *(void *)(v9 + 16);
      uint64_t v11 = v6[2];
      if (__OFADD__(v11, v10)) {
        break;
      }
      if (!swift_isUniquelyReferenced_nonNull_native(v6) || v11 + v10 > v6[3] >> 1)
      {
        sub_10002EC18();
        uint64_t v6 = v12;
      }

      if (*(void *)(v9 + 16))
      {
        uint64_t v13 = v6[2];
        if ((v6[3] >> 1) - v13 < v10) {
          goto LABEL_26;
        }
        unint64_t v14 = (unint64_t)&v6[2 * v13 + 4];
        if (v9 + 32 < v14 + 16 * v10 && v14 < v9 + 32 + 16 * v10) {
          goto LABEL_29;
        }
        swift_arrayInitWithCopy(v14);
        if (v10)
        {
          uint64_t v16 = v6[2];
          BOOL v17 = __OFADD__(v16, v10);
          uint64_t v18 = v16 + v10;
          if (v17) {
            goto LABEL_27;
          }
          _OWORD v6[2] = v18;
        }
      }

      else if (v10)
      {
        goto LABEL_25;
      }

      swift_bridgeObjectRelease();
      v5 += 40LL;
      if (!--v4)
      {
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }

    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }

  else
  {
LABEL_20:
    v29[0] = &off_100270FB0;
    sub_100188FA0();
    uint64_t v19 = sub_1000175B0(&qword_1002A93B8);
    unint64_t v20 = sub_10007D714();
    uint64_t v21 = BidirectionalCollection<>.joined(separator:)(44LL, 0xE100000000000000LL, v19, v20);
    uint64_t v23 = v22;
    swift_bridgeObjectRelease();
    if ((sub_10002ACF8(0x697463656E6E6F43uLL, 0xEA00000000006E6FLL) & 1) == 0)
    {
      swift_bridgeObjectRetain();
      sub_10002E88C();
      uint64_t v24 = *(void *)(*(void *)(a1 + 8) + 16LL);
      sub_10002EA58();
      uint64_t v25 = *(void *)(a1 + 8);
      *(void *)(v25 + 16) = v24 + 1;
      char v26 = (void *)(v25 + 32 * v24);
      v26[4] = 0x697463656E6E6F43LL;
      v26[5] = 0xEA00000000006E6FLL;
      v26[6] = v21;
      v26[7] = v23;
      *(void *)(a1 + 8) = v25;
      char v27 = sub_10002D0E0();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v27 & 1) != 0) {
        *(_BYTE *)(a1 + 16) = 2;
      }
      return result;
    }
  }

  __break(1u);
LABEL_29:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_10007BDC8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v4 + 16);
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    uint64_t v32 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_100032050();
    uint64_t v7 = v4 + 32;
    uint64_t v8 = a1;
    do
    {
      sub_100023BAC(v7, (uint64_t)v29);
      uint64_t v9 = v30;
      uint64_t v10 = v31;
      sub_100019F58(v29, v30);
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
      Swift::String v11 = String.lowercased()();
      swift_bridgeObjectRelease();
      sub_100019F7C(v29);
      uint64_t v6 = v32;
      if ((swift_isUniquelyReferenced_nonNull_native(v32) & 1) == 0)
      {
        sub_100032050();
        uint64_t v6 = v32;
      }

      unint64_t v12 = v6[2];
      if (v12 >= v6[3] >> 1)
      {
        sub_100032050();
        uint64_t v6 = v32;
      }

      _OWORD v6[2] = v12 + 1;
      *(Swift::String *)&v6[2 * v12 + 4] = v11;
      v7 += 40LL;
      --v5;
    }

    while (v5);
    a1 = v8;
    swift_bridgeObjectRelease();
    uint64_t v2 = v1;
  }

  v29[0] = v6;
  uint64_t v13 = sub_1000175B0(&qword_1002A93B8);
  unint64_t v14 = sub_10007D714();
  uint64_t v15 = BidirectionalCollection<>.joined(separator:)(44LL, 0xE100000000000000LL, v13, v14);
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  uint64_t result = sub_10002ACF8(0x65646172677055uLL, 0xE700000000000000LL);
  if ((result & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v19 = a1 + 8;
    swift_bridgeObjectRetain();
    sub_10002E88C();
    uint64_t v20 = *(void *)(*(void *)(a1 + 8) + 16LL);
    sub_10002EA58();
    uint64_t v21 = *(void *)(a1 + 8);
    *(void *)(v21 + 16) = v20 + 1;
    uint64_t v22 = (void *)(v21 + 32 * v20);
    v22[4] = 0x65646172677055LL;
    v22[5] = 0xE700000000000000LL;
    v22[6] = v15;
    v22[7] = v17;
    *(void *)(a1 + 8) = v21;
    char v23 = sub_10002D0E0();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v23 & 1) != 0) {
      *(_BYTE *)(a1 + 16) = 2;
    }
    uint64_t v24 = *(void *)(v2 + 16);
    uint64_t v25 = *(void *)(v24 + 16);
    if (v25)
    {
      uint64_t v26 = v24 + 32;
      swift_bridgeObjectRetain();
      do
      {
        sub_100023BAC(v26, (uint64_t)v29);
        uint64_t v27 = v30;
        uint64_t v28 = v31;
        sub_100019F58(v29, v30);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 24))(v19, v27, v28);
        sub_100019F7C(v29);
        v26 += 40LL;
        --v25;
      }

      while (v25);
      return swift_bridgeObjectRelease();
    }
  }

  return result;
}

uint64_t NIOHTTPClientUpgradeHandler.channelRead(context:data:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  if ((*(_BYTE *)(v3 + 48) & 1) != 0)
  {
    swift_beginAccess(v3 + 72, v27, 33LL, 0LL);
    sub_10002B894(a2);
    return swift_endAccess(v27);
  }

  else
  {
    sub_1000175B0(&qword_1002AA4A8);
    uint64_t v9 = sub_10002D844();
    unint64_t v10 = HIBYTE(v8);
    Swift::String v11 = *(void (**)(uint64_t))(v3 + 56);
    switch((unint64_t)v11)
    {
      case 0uLL:
        unint64_t v12 = sub_10007B994();
        uint64_t v14 = sub_1000252D0((uint64_t)&type metadata for NIOHTTPClientUpgradeError, v12);
        char v15 = 6;
        goto LABEL_14;
      case 1uLL:
        sub_10007C264(a1, v9, v7, v8);
        goto LABEL_12;
      case 2uLL:
      case 3uLL:
        if ((_DWORD)v10 != 2) {
          goto LABEL_12;
        }
        uint64_t result = sub_10007D760();
        *(_BYTE *)(v3 + 48) = 1;
        break;
      case 4uLL:
        unint64_t v22 = sub_10007B994();
        uint64_t v14 = sub_1000252D0((uint64_t)&type metadata for NIOHTTPClientUpgradeError, v22);
        char v15 = 7;
LABEL_14:
        *uint64_t v13 = v15;
        ChannelHandlerContext.fireErrorCaught(_:)();
        uint64_t v23 = sub_10007D798();
        sub_100034F80(v23, v24, v25, v26);
        return sub_10007D774(v14);
      case 5uLL:
        ChannelHandlerContext.fireChannelRead(_:)();
        goto LABEL_12;
      default:
        if ((_DWORD)v10 == 2)
        {
          uint64_t v16 = *(void *)(v3 + 64);
          *(_BYTE *)(v3 + 48) = 1;
          uint64_t v17 = swift_retain();
          v11(v17);
          sub_10007D760();
          uint64_t result = sub_10007D084((unint64_t)v11, v16);
        }

        else
        {
LABEL_12:
          uint64_t v18 = sub_10007D798();
          uint64_t result = sub_100034F80(v18, v19, v20, v21);
        }

        break;
    }
  }

  return result;
}

void sub_10007C264(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (HIBYTE(a4))
  {
    sub_10007C3EC(a1, a2, a3, a4, 1u);
  }

  else
  {
    if (*(void *)(a2 + 32) == 1LL)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      unint64_t v8 = sub_10007C4FC(a1, a2, a3, a4);
      uint64_t v10 = v9;
      sub_10007C634((uint64_t (*)(uint64_t))v8, v9);
      swift_release(v10);
    }

    else
    {
      swift_retain();
      swift_bridgeObjectRetain();
      sub_10007C3EC(a1, a2, a3, a4, 8u);
    }

    swift_bridgeObjectRelease();
    swift_release(a2);
  }

void sub_10007C3EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  int v10 = a5;
  unint64_t v11 = *(void *)(v5 + 56);
  uint64_t v12 = *(void *)(v5 + 64);
  *(_OWORD *)(v5 + 56) = xmmword_1001FA340;
  sub_10007D084(v11, v12);
  if (v10 != 8)
  {
    unint64_t v13 = sub_10007B994();
    uint64_t v14 = swift_allocError(&type metadata for NIOHTTPClientUpgradeError, v13, 0LL, 0LL);
    *char v15 = a5;
    ChannelHandlerContext.fireErrorCaught(_:)();
    swift_errorRelease(v14);
  }

  v16[3] = sub_1000175B0(&qword_1002AA4A8);
  v16[0] = a2;
  v16[1] = a3;
  void v16[2] = a4;
  char v17 = 2;
  sub_10007D6D0(a2, a3, a4, SHIBYTE(a4));
  ChannelHandlerContext.fireChannelRead(_:)();
  sub_1000324E8((uint64_t)v16);
  ChannelPipeline.removeHandler(context:promise:)();
}

uint64_t (*sub_10007C4FC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4))()
{
  if (*(void *)(v10 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    Swift::String v11 = Substring.lowercased()();
    swift_bridgeObjectRelease();
    uint64_t v12 = sub_10007C684(a1, v11._countAndFlagsBits, v11._object, a2, a3, a4);
    if (!v5) {
      uint64_t v4 = v12;
    }
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    unint64_t v13 = sub_10007B994();
    uint64_t v14 = swift_allocError(&type metadata for NIOHTTPClientUpgradeError, v13, 0LL, 0LL);
    *char v15 = 0;
    swift_willThrow(v14);
  }

  return v4;
}

uint64_t sub_10007C634(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  unint64_t v5 = *(void *)(v2 + 56);
  uint64_t v6 = *(void *)(v2 + 64);
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = a2;
  sub_10007D084(v5, v6);
  int v7 = *(unsigned __int8 *)(v2 + 48);
  uint64_t result = swift_retain();
  if (v7 == 1) {
    return a1(result);
  }
  return result;
}

uint64_t (*sub_10007C684(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6))()
{
  uint64_t v40 = a4;
  uint64_t v8 = *(void *)(v6 + 16);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v12 = v8 + 32;
    swift_bridgeObjectRetain_n(v8, 2LL);
    while (1)
    {
      sub_100023BAC(v12, (uint64_t)&v35);
      uint64_t v13 = v36;
      uint64_t v14 = v37;
      sub_100019F58(&v35, v36);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
      Swift::String v15 = String.lowercased()();
      swift_bridgeObjectRelease();
      if (v15._countAndFlagsBits == a2 && v15._object == a3) {
        break;
      }
      char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v15._countAndFlagsBits, v15._object, a2, a3, 0LL);
      swift_bridgeObjectRelease();
      if ((v17 & 1) != 0) {
        goto LABEL_13;
      }
      sub_100019F7C(&v35);
      v12 += 40LL;
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
    }

    swift_bridgeObjectRelease();
LABEL_13:
    swift_bridgeObjectRelease();
    sub_10002A118(&v35, (uint64_t)v38);
    swift_bridgeObjectRelease();
    uint64_t v18 = v40;
    uint64_t v19 = a6;
  }

  else
  {
    swift_bridgeObjectRetain();
LABEL_11:
    uint64_t v18 = v40;
    uint64_t v19 = a6;
    uint64_t v39 = 0LL;
    memset(v38, 0, sizeof(v38));
    swift_bridgeObjectRelease();
  }

  sub_10007D644((uint64_t)v38, (uint64_t)&v33, &qword_1002AD9B8);
  if (v34)
  {
    sub_10002A118(&v33, (uint64_t)&v35);
    uint64_t v20 = v36;
    uint64_t v21 = v37;
    sub_100019F58(&v35, v36);
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 32))(v18, a5, v19, v20, v21) & 1) != 0)
    {
      sub_10007D4F0((uint64_t)v38);
      sub_100023BAC((uint64_t)&v35, (uint64_t)&v33);
      uint64_t v22 = swift_allocObject(&unk_10027C7D0, 89LL, 7LL);
      *(void *)(v22 + 16) = v31;
      *(void *)(v22 + 24) = a1;
      sub_10002A118(&v33, v22 + 32);
      *(void *)(v22 + 72) = v18;
      *(void *)(v22 + 8sub_10006F0B8(12LL, 0) = a5;
      *(_BYTE *)(v22 + 88) = v19;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      sub_100019F7C(&v35);
      return sub_10007D570;
    }

    else
    {
      unint64_t v27 = sub_10007B994();
      uint64_t v28 = swift_allocError(&type metadata for NIOHTTPClientUpgradeError, v27, 0LL, 0LL);
      *uint64_t v29 = 2;
      swift_willThrow(v28);
      sub_10007D4F0((uint64_t)v38);
      return (uint64_t (*)())sub_100019F7C(&v35);
    }
  }

  else
  {
    sub_10007D4F0((uint64_t)&v33);
    unint64_t v24 = sub_10007B994();
    uint64_t v25 = swift_allocError(&type metadata for NIOHTTPClientUpgradeError, v24, 0LL, 0LL);
    *char v26 = 0;
    swift_willThrow(v25);
    return (uint64_t (*)())sub_10007D4F0((uint64_t)v38);
  }

uint64_t sub_10007C960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  unint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = xmmword_1001FA350;
  sub_10007D084(v12, v13);
  uint64_t v14 = sub_10007CBC4(a2);
  uint64_t v15 = swift_allocObject(&unk_10027C7F8, 32LL, 7LL);
  *(void *)(v15 + 16) = a1;
  *(void *)(v15 + 24) = a2;
  uint64_t v16 = swift_allocObject(&unk_10027C820, 32LL, 7LL);
  *(void *)(v16 + 16) = sub_10007D588;
  *(void *)(v16 + 24) = v15;
  swift_retain();
  swift_retain();
  uint64_t v17 = sub_100172010( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/NIOHT TPClientUpgradeHandler.swift",  129LL,  2LL,  303LL,  (uint64_t)sub_10007D590,  v16);
  swift_release(v14);
  swift_release(v16);
  sub_100023BAC(a3, (uint64_t)v25);
  uint64_t v18 = swift_allocObject(&unk_10027C848, 81LL, 7LL);
  sub_10002A118(v25, v18 + 16);
  *(void *)(v18 + 56) = a2;
  *(void *)(v18 + 64) = a4;
  *(void *)(v18 + 72) = a5;
  *(_BYTE *)(v18 + 8sub_10006F0B8(12LL, 0) = a6;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1000F2E10( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/NIOHTTPClie ntUpgradeHandler.swift",  129LL,  2LL,  308LL,  v17,  (uint64_t)sub_10007D5D4,  v18);
  uint64_t v20 = v19;
  swift_release(v17);
  swift_release(v18);
  uint64_t v21 = swift_allocObject(&unk_10027C870, 32LL, 7LL);
  *(void *)(v21 + 16) = a1;
  *(void *)(v21 + 24) = a2;
  uint64_t v22 = swift_allocObject(&unk_10027C898, 32LL, 7LL);
  *(void *)(v22 + 16) = sub_10007D614;
  *(void *)(v22 + 24) = v21;
  swift_retain();
  swift_retain();
  uint64_t v23 = sub_100172010( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/NIOHT TPClientUpgradeHandler.swift",  129LL,  2LL,  311LL,  (uint64_t)sub_10007D75C,  v22);
  swift_release(v20);
  swift_release(v22);
  swift_retain_n(a2, 2LL);
  swift_retain();
  sub_1000FEED0();
  swift_release(v23);
  return swift_release(a2);
}

uint64_t sub_10007CBC4(uint64_t a1)
{
  if (*(void *)(*(void *)(v1 + 24) + 16LL))
  {
    swift_retain();
    uint64_t v3 = swift_bridgeObjectRetain();
    uint64_t v4 = sub_10007B638(v3, a1);
    swift_bridgeObjectRelease();
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(v5 + 48);
    uint64_t v6 = *(void *)(v5 + 56);
    uint64_t ObjectType = swift_getObjectType(v7);
    uint64_t v9 = EventLoop.makePromise<A>(of:file:line:)( (uint64_t)&type metadata for ()[8],  (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/Even tLoopFuture.swift",  117LL,  2LL,  1084LL,  ObjectType,  (uint64_t)&type metadata for ()[8],  v6);
    swift_unknownObjectRetain(v7);
    sub_1000F15B8((uint64_t)v4, v9);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 48LL);
    swift_getObjectType(v7);
    swift_unknownObjectRetain(v7);
    EventLoop.makeSucceededFuture<A>(_:file:line:)();
    uint64_t v9 = v10;
  }

  swift_unknownObjectRelease(v7);
  return v9;
}

unint64_t sub_10007CCE4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = xmmword_1001FA360;
  return sub_10007D084(v3, v4);
}

uint64_t sub_10007CD1C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100019F58(a1, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 40))( a2,  a3,  a4,  a5,  v9,  v10);
}

unint64_t sub_10007CD88(void *a1)
{
  uint64_t v2 = a1 + 9;
  swift_beginAccess(a1 + 9, v25, 0LL, 0LL);
  uint64_t v3 = a1[10];
  uint64_t v4 = a1[11];
  uint64_t v5 = v4 - v3;
  if (v4 < v3) {
    v5 += *(void *)(*v2 + 16LL);
  }
  while (1)
  {
    BOOL v6 = __OFSUB__(v4, v3);
    uint64_t v7 = v4 - v3;
    if (v7 < 0 != v6) {
      v7 += *(void *)(*v2 + 16LL);
    }
    if (v7 < 1) {
      break;
    }
    swift_beginAccess(v2, v22, 33LL, 0LL);
    unint64_t v8 = a1[10];
    uint64_t v9 = a1[11];
    if (v9 == v8)
    {
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      uint64_t v17 = "Negative value is not representable";
      uint64_t v18 = 35LL;
LABEL_29:
      unint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v17,  v18,  2LL,  "Swift/Integers.swift",  20LL);
      __break(1u);
      return result;
    }

    if ((v8 & 0x8000000000000000LL) != 0) {
      goto LABEL_27;
    }
    if (HIDWORD(v8))
    {
      uint64_t v17 = "Not enough bits to represent the passed value";
      uint64_t v18 = 45LL;
      goto LABEL_29;
    }

    uint64_t v10 = a1[9];
    if (v8 >= *(void *)(v10 + 16)) {
      goto LABEL_23;
    }
    sub_10007D644(v10 + (v8 << 6) + 32, (uint64_t)&v19, &qword_1002AA490);
    if (v21[24] == 255) {
      goto LABEL_26;
    }
    v23[0] = v19;
    v23[1] = v20;
    v24[0] = *(_OWORD *)v21;
    *(_OWORD *)((char *)v24 + 9) = *(_OWORD *)&v21[9];
    uint64_t v11 = v9 - v8;
    if (v11 < 1) {
      goto LABEL_24;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
    *uint64_t v2 = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1000F23F0();
      uint64_t v10 = v13;
    }

    __int128 v20 = 0u;
    memset(v21, 0, 24);
    __int128 v19 = 0u;
    v21[24] = -1;
    *uint64_t v2 = v10;
    if (v8 >= *(void *)(v10 + 16)) {
      goto LABEL_25;
    }
    sub_10007D688((uint64_t)&v19, v10 + (v8 << 6) + 32);
    a1[10] = (*(void *)(a1[9] + 16LL) - 1LL) & (v8 + 1);
    swift_endAccess(v22);
    ChannelHandlerContext.fireChannelRead(_:)();
    sub_1000324E8((uint64_t)v23);
    uint64_t v3 = a1[10];
    uint64_t v4 = a1[11];
  }

  if (v5 >= 1) {
    ChannelHandlerContext.fireChannelReadComplete()();
  }
  unint64_t v14 = a1[7];
  uint64_t v15 = a1[8];
  *(_OWORD *)(a1 + 7) = xmmword_1001FA370;
  return sub_10007D084(v14, v15);
}

void sub_10007CFF8()
{
}

void *NIOHTTPClientUpgradeHandler.deinit()
{
  return v0;
}

uint64_t NIOHTTPClientUpgradeHandler.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 96LL, 7LL);
}

unint64_t sub_10007D084(unint64_t result, uint64_t a2)
{
  if (result >= 6) {
    return swift_release(a2);
  }
  return result;
}

unint64_t sub_10007D09C()
{
  unint64_t result = qword_1002AD868;
  if (!qword_1002AD868)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NIOHTTPClientUpgradeError,  &type metadata for NIOHTTPClientUpgradeError);
    atomic_store(result, (unint64_t *)&qword_1002AD868);
  }

  return result;
}

ValueMetadata *type metadata accessor for NIOHTTPClientUpgradeError()
{
  return &type metadata for NIOHTTPClientUpgradeError;
}

uint64_t type metadata accessor for NIOHTTPClientUpgradeHandler()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService27NIOHTTPClientUpgradeHandler);
}

void *destroy for NIOHTTPClientUpgradeHandler.UpgradeState(void *result)
{
  if (*result >= 0xFFFFFFFFuLL) {
    return (void *)swift_release(result[1]);
  }
  return result;
}

uint64_t _s25ASOctaneSupportXPCService27NIOHTTPClientUpgradeHandlerC12UpgradeStateOwCP_0( uint64_t a1, uint64_t a2)
{
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_retain(v3);
  }

  return a1;
}

unint64_t *assignWithCopy for NIOHTTPClientUpgradeHandler.UpgradeState( unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      unint64_t v7 = a2[1];
      *a1 = v4;
      a1[1] = v7;
      swift_retain(v7);
      return a1;
    }

unint64_t *assignWithTake for NIOHTTPClientUpgradeHandler.UpgradeState( unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      unint64_t v7 = a2[1];
      *a1 = v4;
      a1[1] = v7;
      return a1;
    }

uint64_t getEnumTagSinglePayload for NIOHTTPClientUpgradeHandler.UpgradeState(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 > 0x7FFFFFF9 && *((_BYTE *)a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483642);
  }
  uint64_t v3 = *a1;
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 5;
  if (v4 >= 7) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for NIOHTTPClientUpgradeHandler.UpgradeState( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFA)
  {
    *(void *)unint64_t result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483642;
    if (a3 >= 0x7FFFFFFA) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFA) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 5;
    }
  }

  return result;
}

void *sub_10007D32C(void *result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    result[1] = 0LL;
  }

  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }

  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for NIOHTTPClientUpgradeHandler.UpgradeState()
{
  return &type metadata for NIOHTTPClientUpgradeHandler.UpgradeState;
}

uint64_t getEnumTagSinglePayload for InAppBuyRouteError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 7) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 8;
    return (v5 + 1);
  }

uint64_t _s25ASOctaneSupportXPCService25NIOHTTPClientUpgradeErrorV4CodeOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_10007D430 + 4 * byte_1001FA0A1[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10007D464 + 4 * byte_1001FA09C[v4]))();
}

uint64_t sub_10007D464(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007D46C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10007D474LL);
  }
  return result;
}

uint64_t sub_10007D480(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10007D488LL);
  }
  *(_BYTE *)unint64_t result = a2 + 7;
  return result;
}

uint64_t sub_10007D48C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007D494(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NIOHTTPClientUpgradeError.Code()
{
  return &type metadata for NIOHTTPClientUpgradeError.Code;
}

unint64_t sub_10007D4B4()
{
  unint64_t result = qword_1002AD9B0;
  if (!qword_1002AD9B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001FA300, &type metadata for NIOHTTPClientUpgradeError.Code);
    atomic_store(result, (unint64_t *)&qword_1002AD9B0);
  }

  return result;
}

uint64_t sub_10007D4F0(uint64_t a1)
{
  uint64_t v2 = sub_1000175B0(&qword_1002AD9B8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10007D530()
{
  return swift_deallocObject(v0, 89LL, 7LL);
}

uint64_t sub_10007D570()
{
  return sub_10007C960( *(void *)(v0 + 16),  *(void *)(v0 + 24),  v0 + 32,  *(void *)(v0 + 72),  *(void *)(v0 + 80),  *(_BYTE *)(v0 + 88));
}

unint64_t sub_10007D588()
{
  return sub_10007CCE4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10007D590(uint64_t a1)
{
  return sub_100162C74(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_10007D598()
{
  return swift_deallocObject(v0, 81LL, 7LL);
}

uint64_t sub_10007D5D4()
{
  return sub_10007CD1C( (void *)(v0 + 16),  *(void *)(v0 + 56),  *(void *)(v0 + 64),  *(void *)(v0 + 72),  *(unsigned __int8 *)(v0 + 80));
}

uint64_t sub_10007D5EC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_10007D614()
{
  return sub_10007CD88(*(void **)(v0 + 16));
}

uint64_t sub_10007D61C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10007D63C()
{
}

uint64_t sub_10007D644(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000175B0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_10007D688(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002AA490);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007D6D0(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 2) {
    return swift_bridgeObjectRetain(result);
  }
  if (a4 != 1)
  {
    if (a4) {
      return result;
    }
    swift_retain(result);
    unint64_t result = a2;
    return swift_bridgeObjectRetain(result);
  }

  return swift_retain(result);
}

unint64_t sub_10007D714()
{
  unint64_t result = qword_1002AD9C0;
  if (!qword_1002AD9C0)
  {
    uint64_t v1 = sub_100018EC0(&qword_1002A93B8);
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002AD9C0);
  }

  return result;
}

uint64_t sub_10007D760()
{
  return sub_100034F80(v2, v1, v0, 2);
}

uint64_t sub_10007D774(uint64_t a1)
{
  return swift_errorRelease(a1);
}

uint64_t sub_10007D77C()
{
  return sub_100098A70(v0, 1LL, v1);
}

void sub_10007D78C()
{
}

uint64_t sub_10007D798()
{
  return v0;
}

uint64_t sub_10007D7AC()
{
  *(void *)(v0 + 48) = 0LL;
  *(void *)(v0 + 56) = 0LL;
  *(void *)(v0 + 6sub_100019F7C(v0 + 4) = 0LL;
  *(_BYTE *)(v0 + 7sub_100019F7C(v0 + 2) = 1;
  *(_DWORD *)(v0 + 16) = 33686018;
  *(_BYTE *)(v0 + 2sub_10006F0B8(12LL, 0) = 2;
  *(void *)(v0 + 2sub_100019F7C(v0 + 4) = 0LL;
  *(void *)(v0 + 3sub_100019F7C(v0 + 2) = 0LL;
  swift_bridgeObjectRelease(0LL);
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 4sub_10006F0B8(12LL, 0) = &_swiftEmptyArrayStorage;
  *(void *)(v0 + 48) = 0LL;
  *(void *)(v0 + 56) = 0LL;
  swift_bridgeObjectRelease(v1);
  *(void *)(v0 + 6sub_100019F7C(v0 + 4) = 0LL;
  *(_BYTE *)(v0 + 7sub_100019F7C(v0 + 2) = 1;
  return v0;
}

uint64_t sub_10007D810()
{
  return sub_10007F058(*(_BYTE *)(v0 + 16));
}

uint64_t sub_10007D818()
{
  return sub_10007F058(*(_BYTE *)(v0 + 17));
}

uint64_t sub_10007D820()
{
  return sub_10007F058(*(_BYTE *)(v0 + 18));
}

uint64_t sub_10007D828()
{
  return sub_10007F058(*(_BYTE *)(v0 + 19));
}

uint64_t sub_10007D830()
{
  return sub_10007F058(*(_BYTE *)(v0 + 20));
}

uint64_t sub_10007D838()
{
  return sub_10007F0D0();
}

uint64_t sub_10007D87C()
{
  return sub_10007F0D0();
}

void sub_10007D8BC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v11 = *(void *)(v2 + 40);
  uint64_t v12 = *(void *)(v11 + 16);
  if (v12)
  {
    uint64_t v20 = a2;
    swift_bridgeObjectRetain_n(v11, 2LL);
    uint64_t v13 = 0LL;
    uint64_t v21 = v11;
    while (1)
    {
      uint64_t v23 = v12;
      uint64_t v6 = *(void *)(v11 + v13 + 32);
      uint64_t v12 = *(void *)(v11 + v13 + 40);
      uint64_t v8 = *(void *)(v11 + v13 + 48);
      uint64_t v3 = *(void *)(v11 + v13 + 56);
      uint64_t v4 = *(void *)(v11 + v13 + 64);
      uint64_t v5 = *(void *)(v11 + v13 + 72);
      uint64_t v7 = *(void *)(v11 + v13 + 80);
      char v22 = *(_BYTE *)(v11 + v13 + 88);
      sub_10007F0DC();
      switch(a1)
      {
        case 0LL:
          break;
        case 1LL:
          sub_10007F0BC();
          break;
        case 2LL:
          sub_10007F09C();
          break;
        case 3LL:
          sub_10007F110();
          break;
        case 4LL:
          unint64_t v15 = 0x800000010021A860LL;
          unint64_t v14 = 0xD000000000000013LL;
          break;
        case 5LL:
          sub_10007F124();
          break;
        case 6LL:
          unint64_t v14 = 0xD00000000000001ALL;
          uint64_t v16 = "Refund Request Sheet";
          goto LABEL_13;
        case 7LL:
          unint64_t v14 = 0xD000000000000014LL;
          uint64_t v16 = "Offer Code Redeem Sheet";
          goto LABEL_13;
        case 8LL:
          unint64_t v14 = 0xD000000000000017LL;
          uint64_t v16 = "7OctaneConfigurationSettings";
LABEL_13:
          unint64_t v15 = (unint64_t)v16 | 0x8000000000000000LL;
          break;
        default:
          unint64_t v14 = 0LL;
          unint64_t v15 = 0xE000000000000000LL;
          break;
      }

      if (v6 == v14 && v12 == v15)
      {
        sub_10001ED74();
        swift_bridgeObjectRetain(v8);
        sub_10007F044();
        sub_10007F0F8();
        sub_10001A3F8();
        goto LABEL_24;
      }

      unint64_t v18 = v15;
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v12, v14, v15, 0LL);
      sub_10001ED74();
      swift_bridgeObjectRetain(v8);
      sub_10007F044();
      swift_bridgeObjectRelease(v18);
      if ((v24 & 1) != 0) {
        break;
      }
      swift_bridgeObjectRelease(v8);
      sub_10001A3F8();
      sub_100077AF0(v3, v4, v5);
      v13 += 64LL;
      uint64_t v12 = v23 - 1;
      uint64_t v11 = v21;
      if (v23 == 1)
      {
        sub_10007F0F8();
        sub_10007F00C();
        a2 = v20;
        goto LABEL_25;
      }
    }

    swift_bridgeObjectRelease_n(v21, 2LL);
LABEL_24:
    a2 = v20;
    char v19 = v22;
  }

  else
  {
    sub_10007F00C();
  }

uint64_t sub_10007DB48(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4) {
    return 0LL;
  }
  sub_10001ED74();
  uint64_t v5 = 0LL;
  for (uint64_t i = (uint64_t *)(v3 + 40); ; i += 8)
  {
    uint64_t v7 = *i;
    unint64_t v8 = 0xED00007374637564LL;
    sub_10007F0DC();
    switch(a1)
    {
      case 0LL:
        break;
      case 1LL:
        unint64_t v8 = 0xE800000000000000LL;
        sub_10007F0BC();
        break;
      case 2LL:
        unint64_t v8 = 0xEC0000006E6F6974LL;
        sub_10007F09C();
        break;
      case 3LL:
        unint64_t v8 = 0xEE00636E79532065LL;
        sub_10007F110();
        break;
      case 4LL:
        unint64_t v8 = 0x800000010021A860LL;
        unint64_t v10 = 0xD000000000000013LL;
        break;
      case 5LL:
        unint64_t v8 = 0xEF6E6F6974636173LL;
        sub_10007F124();
        break;
      case 6LL:
        unint64_t v10 = 0xD00000000000001ALL;
        uint64_t v11 = "Refund Request Sheet";
        goto LABEL_12;
      case 7LL:
        unint64_t v10 = 0xD000000000000014LL;
        uint64_t v11 = "Offer Code Redeem Sheet";
LABEL_12:
        unint64_t v8 = (unint64_t)v11 | 0x8000000000000000LL;
        break;
      case 8LL:
        unint64_t v10 = 0xD000000000000017LL;
        unint64_t v8 = 0x800000010021A800LL;
        break;
      default:
        unint64_t v10 = 0LL;
        unint64_t v8 = 0xE000000000000000LL;
        break;
    }

    if (v9 == v10 && v7 == v8) {
      break;
    }
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v7, v10, v8, 0LL);
    swift_bridgeObjectRelease();
    if ((v13 & 1) != 0) {
      goto LABEL_23;
    }
    if (v4 == ++v5)
    {
      sub_10001A3F8();
      return 0LL;
    }
  }

  sub_10001A3F8();
LABEL_23:
  swift_bridgeObjectRelease();
  return v5;
}

void sub_10007DD38(char a1, uint64_t a2)
{
  uint64_t v5 = sub_10007DB48(a2);
  if ((v6 & 1) != 0) {
    goto LABEL_6;
  }
  unint64_t v7 = v5;
  sub_10002A718(v2 + 40, (uint64_t)v10, 33LL);
  char v8 = sub_10007F104();
  *(void *)(v2 + 4sub_10006F0B8(12LL, 0) = v3;
  if ((v8 & 1) != 0)
  {
    if ((v7 & 0x8000000000000000LL) == 0) {
      goto LABEL_4;
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  sub_100165124();
  uint64_t v3 = v9;
  *(void *)(v2 + 4sub_10006F0B8(12LL, 0) = v9;
  if ((v7 & 0x8000000000000000LL) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v7 < *(void *)(v3 + 16))
  {
    *(_BYTE *)(v3 + (v7 << 6) + 88) = a1 & 1;
    swift_endAccess(v10);
LABEL_6:
    sub_100019398();
    return;
  }

uint64_t sub_10007DDCC(uint64_t a1)
{
  if (!*((void *)&v13 + 1)) {
    return 0LL;
  }
  __int128 v15[2] = v13;
  __int128 v16 = v14;
  v17[0] = v15[0];
  *(_OWORD *)((char *)v17 + 9) = *(_OWORD *)((char *)v15 + 9);
  sub_10007ED3C((uint64_t)&v16 + 8, (uint64_t)v18, &qword_1002ADCE8);
  uint64_t result = sub_10007ED3C((uint64_t)v18, (uint64_t)v19, &qword_1002ADCE8);
  if (!v20)
  {
    uint64_t v11 = 0LL;
    goto LABEL_8;
  }

  if ((v22 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (v22 < *(void *)(v21 + 16))
  {
    swift_bridgeObjectRetain(*(void *)(v21 + 16 * v22 + 40));
    uint64_t v9 = sub_10007F0D0();
    uint64_t v11 = sub_100116BB0(v9, v10);
LABEL_8:
    sub_100077A54(v12);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_10007DEC4(uint64_t a1)
{
  if (!*((void *)&v13 + 1)) {
    return 1LL;
  }
  __int128 v15[2] = v13;
  _OWORD v15[3] = v14;
  v16[0] = v15[0];
  *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)((char *)v15 + 9);
  uint64_t v8 = sub_1001AED38();
  char v10 = v9;
  sub_100077A54(v12);
  if ((v10 & 1) != 0) {
    return 1LL;
  }
  return v8;
}

void sub_10007DF3C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v7 = sub_10007DB48(a3);
  if ((v8 & 1) != 0) {
    goto LABEL_6;
  }
  unint64_t v9 = v7;
  sub_10002A718(v3 + 40, (uint64_t)v12, 33LL);
  char v10 = sub_10007F104();
  *(void *)(v3 + 4sub_10006F0B8(12LL, 0) = v4;
  if ((v10 & 1) != 0)
  {
    if ((v9 & 0x8000000000000000LL) == 0) {
      goto LABEL_4;
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  sub_100165124();
  uint64_t v4 = v11;
  *(void *)(v3 + 4sub_10006F0B8(12LL, 0) = v11;
  if ((v9 & 0x8000000000000000LL) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v9 < *(void *)(v4 + 16))
  {
    sub_1001AEE10(a1, a2 & 1);
    swift_endAccess(v12);
LABEL_6:
    sub_100019398();
    return;
  }

uint64_t sub_10007DFDC()
{
  if (*(_BYTE *)(v0 + 72)) {
    return 0LL;
  }
  else {
    return *(void *)(v0 + 64);
  }
}

unint64_t sub_10007DFF0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100271818, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xB) {
    return 11LL;
  }
  else {
    return v3;
  }
}

uint64_t static NIOBSDSocket.Option.ipv6_multicast_loop.getter()
{
  return 11LL;
}

uint64_t sub_10007E044(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10007E07C + 4 * byte_1001FA392[a1]))( 0xD000000000000010LL,  0x8000000100217350LL);
}

uint64_t sub_10007E07C(uint64_t a1)
{
  return a1 + 5;
}

uint64_t sub_10007E0E8()
{
  return 0x656C61636F6C5FLL;
}

uint64_t sub_10007E100()
{
  return 0x694B65726F74735FLL;
}

uint64_t sub_10007E174(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10007E1AC + 4 * byte_1001FA39D[a1]))( 0xD000000000000010LL,  0x8000000100217350LL);
}

uint64_t sub_10007E1AC(uint64_t a1)
{
  return a1 + 5;
}

uint64_t sub_10007E218()
{
  return 0x656C61636F6C5FLL;
}

uint64_t sub_10007E230()
{
  return 0x694B65726F74735FLL;
}

void sub_10007E2A4(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_10007E2B0()
{
}

uint64_t sub_10007E2B8(uint64_t a1)
{
  return sub_1000B1224(a1, *v1);
}

void sub_10007E2C0(uint64_t a1)
{
}

unint64_t sub_10007E2C8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10007DFF0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10007E2F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10007E044(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10007E31C()
{
  return sub_10007E174(*v0);
}

uint64_t sub_10007E324@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10007E038(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10007E348@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = static NIOBSDSocket.Option.ipv6_multicast_loop.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10007E36C(uint64_t a1)
{
  unint64_t v2 = sub_10007EBAC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007E394(uint64_t a1)
{
  unint64_t v2 = sub_10007EBAC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007E3BC(void *a1)
{
  uint64_t v3 = swift_allocObject(v1, 73LL, 7LL);
  sub_10007E408(a1);
  return v3;
}

uint64_t sub_10007E408(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1000175B0(&qword_1002ADCB0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(_DWORD *)(v1 + 16) = 33686018;
  *(_BYTE *)(v1 + 2sub_10006F0B8(12LL, 0) = 2;
  *(void *)(v1 + 2sub_100019F7C(v0 + 4) = 0LL;
  *(void *)(v1 + 3sub_100019F7C(v0 + 2) = 0LL;
  *(void *)(v1 + 56) = 0LL;
  *(void *)(v1 + 6sub_100019F7C(v0 + 4) = 0LL;
  *(void *)(v1 + 48) = 0LL;
  *(_BYTE *)(v1 + 7sub_100019F7C(v0 + 2) = 1;
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100019F58(a1, v8);
  unint64_t v10 = sub_10007EBAC();
  uint64_t v11 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for OctaneConfigurationSettings.CodingKeys,  &type metadata for OctaneConfigurationSettings.CodingKeys,  v10,  v8,  v9);
  if (v11)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v12 = type metadata accessor for OctaneConfigurationSettings();
    swift_deallocPartialClassInstance(v1, v12, 73LL, 7LL);
    sub_100019F7C(a1);
    return v1;
  }

  else
  {
    uint64_t v29 = a1;
    LOBYTE(v3sub_10006F0B8(12LL, 0) = 0;
    __int128 v14 = v7;
    uint64_t v13 = v1;
    *(_BYTE *)(v1 + 16) = KeyedDecodingContainer.decode(_:forKey:)(&v30, v4) & 1;
    LOBYTE(v3sub_10006F0B8(12LL, 0) = 1;
    *(_BYTE *)(v1 + 17) = KeyedDecodingContainer.decode(_:forKey:)(&v30, v4) & 1;
    *(_BYTE *)(v1 + 18) = sub_10007EFD4(2) & 1;
    *(_BYTE *)(v1 + 19) = sub_10007EFD4(3) & 1;
    *(_BYTE *)(v1 + 2sub_10006F0B8(12LL, 0) = sub_10007EFD4(4) & 1;
    LOBYTE(v3sub_10006F0B8(12LL, 0) = 6;
    *(void *)(v1 + 2sub_100019F7C(v0 + 4) = KeyedDecodingContainer.decode(_:forKey:)(&v30, v4);
    *(void *)(v1 + 3sub_100019F7C(v0 + 2) = v15;
    swift_bridgeObjectRelease();
    uint64_t v16 = sub_10007F094();
    char v32 = 8;
    sub_10007EC24( &qword_1002ADCC0,  &qword_1002ADCB8,  sub_10007EC88,  (const char *)&protocol conformance descriptor for <A> A?);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, &v32, v4, v16);
    uint64_t v17 = v30;
    if (!v30)
    {
      if (qword_1002A8DB8 != -1) {
        swift_once(&qword_1002A8DB8, sub_1001AFD58);
      }
      uint64_t v17 = qword_1002EB9F8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }

    *(void *)(v2 + 4sub_10006F0B8(12LL, 0) = v17;
    uint64_t v18 = sub_10007F060(9);
    *(void *)(v2 + 48) = KeyedDecodingContainer.decode(_:forKey:)(v18, v19);
    *(void *)(v2 + 56) = v20;
    swift_bridgeObjectRelease();
    uint64_t v21 = sub_10007F060(10);
    *(void *)(v2 + 6sub_100019F7C(v0 + 4) = KeyedDecodingContainer.decode(_:forKey:)(v21);
    *(_BYTE *)(v2 + 7sub_100019F7C(v0 + 2) = 0;
    sub_10007DDCC(1LL);
    if ((v22 & 1) != 0)
    {
      sub_10007F094();
      char v32 = 5;
      sub_10007ECE8(&qword_1002ADCD8, &qword_1002AC940, (uint64_t)&protocol witness table for Bool);
      sub_10007EFE8();
      if ((v30 & 1) != 0)
      {
        sub_10007F094();
        char v32 = 7;
        sub_10007ECE8(&qword_1002ADCE0, &qword_1002AC950, (uint64_t)&protocol witness table for Int);
        sub_10007EFE8();
        if ((v31 & 1) == 0)
        {
          uint64_t v25 = v30;
          sub_10007DD38(1, 1LL);
          uint64_t v26 = sub_1001AEE74(v25);
          sub_10007DF3C(v26, v27 & 1, 1LL);
        }
      }
    }

    uint64_t v23 = v29;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
    sub_100019F7C(v23);
  }

  return v13;
}

uint64_t sub_10007E86C(void *a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = sub_1000175B0(&qword_1002ADC88);
  __chkstk_darwin(v6);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100019F58(a1, v7);
  unint64_t v9 = sub_10007EBAC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for OctaneConfigurationSettings.CodingKeys,  &type metadata for OctaneConfigurationSettings.CodingKeys,  v9,  v7,  v8);
  int v10 = *(unsigned __int8 *)(v4 + 16);
  if (v10 == 2 || (v27[0] = 0, sub_10007EFC0(v10 & 1), (uint64_t v3 = v2) == 0))
  {
    int v11 = *(unsigned __int8 *)(v4 + 17);
    if (v11 == 2 || (v27[0] = 1, sub_10007EFC0(v11 & 1), (uint64_t v3 = v2) == 0))
    {
      int v12 = *(unsigned __int8 *)(v4 + 18);
      if (v12 == 2 || (v27[0] = 2, sub_10007EFC0(v12 & 1), (uint64_t v3 = v2) == 0))
      {
        int v13 = *(unsigned __int8 *)(v4 + 19);
        if (v13 == 2 || (v27[0] = 3, sub_10007EFC0(v13 & 1), (uint64_t v3 = v2) == 0))
        {
          int v14 = *(unsigned __int8 *)(v4 + 20);
          if (v14 == 2 || (v27[0] = 4, sub_10007EFC0(v14 & 1), (uint64_t v3 = v2) == 0))
          {
            if (*(void *)(v4 + 32))
            {
              uint64_t v15 = *(void *)(v4 + 24);
              v27[0] = 6;
              uint64_t v16 = swift_bridgeObjectRetain();
              sub_10007F02C(v16, v17, (uint64_t)v27);
              uint64_t v3 = v15;
              if (v15)
              {
LABEL_13:
                sub_10007F084();
                return sub_10001DC10();
              }

              sub_10001DC10();
            }

            swift_beginAccess(v4 + 40, v27, 0LL, 0LL);
            uint64_t v26 = *(void *)(v4 + 40);
            char v25 = 8;
            uint64_t v19 = sub_10007F094();
            uint64_t v20 = sub_10007EC24( &qword_1002ADCA0,  &qword_1002ADC98,  (uint64_t (*)(void))sub_10007EBE8,  (const char *)&protocol conformance descriptor for <A> [A]);
            KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v25, v6, v19, v20);
            if (!v3)
            {
              if (*(void *)(v4 + 56))
              {
                uint64_t v21 = *(void *)(v4 + 48);
                LOBYTE(v26) = 9;
                uint64_t v22 = swift_bridgeObjectRetain();
                sub_10007F02C(v22, v23, (uint64_t)&v26);
                if (v21) {
                  goto LABEL_13;
                }
                sub_10001DC10();
              }

              if (*(_BYTE *)(v4 + 72) != 1)
              {
                uint64_t v24 = *(void *)(v4 + 64);
                LOBYTE(v26) = 10;
                KeyedEncodingContainer.encode(_:forKey:)(v24, &v26, v6);
              }
            }
          }
        }
      }
    }
  }

  return sub_10007F084();
}

void *sub_10007EAF8()
{
  return v0;
}

uint64_t sub_10007EB24()
{
  return swift_deallocClassInstance(v0, 73LL, 7LL);
}

uint64_t type metadata accessor for OctaneConfigurationSettings()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService27OctaneConfigurationSettings);
}

uint64_t sub_10007EB64@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10007E3BC(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10007EB8C(void *a1)
{
  return sub_10007E86C(a1);
}

unint64_t sub_10007EBAC()
{
  unint64_t result = qword_1002ADC90;
  if (!qword_1002ADC90)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001FA588, &type metadata for OctaneConfigurationSettings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ADC90);
  }

  return result;
}

unint64_t sub_10007EBE8()
{
  unint64_t result = qword_1002ADCA8;
  if (!qword_1002ADCA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10020B394, &type metadata for OctaneSimulatedError);
    atomic_store(result, (unint64_t *)&qword_1002ADCA8);
  }

  return result;
}

uint64_t sub_10007EC24(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), const char *a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v8 = sub_100018EC0(a2);
    uint64_t v9 = a3();
    uint64_t result = swift_getWitnessTable(a4, v8, &v9);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10007EC88()
{
  return sub_10007EC24( &qword_1002ADCC8,  &qword_1002ADC98,  (uint64_t (*)(void))sub_10007ECAC,  (const char *)&protocol conformance descriptor for <A> [A]);
}

unint64_t sub_10007ECAC()
{
  unint64_t result = qword_1002ADCD0;
  if (!qword_1002ADCD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10020B3BC, &type metadata for OctaneSimulatedError);
    atomic_store(result, (unint64_t *)&qword_1002ADCD0);
  }

  return result;
}

uint64_t sub_10007ECE8(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_100018EC0(a2);
    uint64_t v7 = a3;
    uint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v6, &v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10007ED3C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = sub_10007F0D0();
  v5(v4);
  return a2;
}

uint64_t sub_10007ED7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a3);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for OctaneConfigurationSettings.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF6)
  {
    if (a2 + 10 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 10) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 11;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for OctaneConfigurationSettings.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    LODWORD(vsub_100019F7C(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100019F7C(v0 + 4) = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF5) {
    return ((uint64_t (*)(void))((char *)&loc_10007EE80 + 4 * byte_1001FA3AD[v4]))();
  }
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_10007EEB4 + 4 * byte_1001FA3A8[v4]))();
}

uint64_t sub_10007EEB4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007EEBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10007EEC4LL);
  }
  return result;
}

uint64_t sub_10007EED0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10007EED8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 10;
  return result;
}

uint64_t sub_10007EEDC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007EEE4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OctaneConfigurationSettings.CodingKeys()
{
  return &type metadata for OctaneConfigurationSettings.CodingKeys;
}

unint64_t sub_10007EF04()
{
  unint64_t result = qword_1002ADCF0;
  if (!qword_1002ADCF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001FA560, &type metadata for OctaneConfigurationSettings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ADCF0);
  }

  return result;
}

unint64_t sub_10007EF44()
{
  unint64_t result = qword_1002ADCF8;
  if (!qword_1002ADCF8)
  {
    unint64_t result = swift_getWitnessTable("q%\b", &type metadata for OctaneConfigurationSettings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ADCF8);
  }

  return result;
}

unint64_t sub_10007EF84()
{
  unint64_t result = qword_1002ADD00;
  if (!qword_1002ADD00)
  {
    unint64_t result = swift_getWitnessTable("Y%\b", &type metadata for OctaneConfigurationSettings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002ADD00);
  }

  return result;
}

uint64_t sub_10007EFC0(uint64_t a1)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, v2 - 88, v1);
}

uint64_t sub_10007EFD4@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v2 - 96) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v2 - 96, v1);
}

uint64_t sub_10007EFE8()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(v0, v2 - 65, v1, v0);
}

  ;
}

uint64_t sub_10007F02C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encode(_:forKey:)(v3, v5, a3, v4);
}

uint64_t sub_10007F044()
{
  return sub_10007ED7C(v0, v1, v2);
}

uint64_t sub_10007F058@<X0>(char a1@<W8>)
{
  return a1 & 1;
}

uint64_t sub_10007F060@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v1 - 96) = a1;
  return v1 - 96;
}

  ;
}

uint64_t sub_10007F084()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10007F094()
{
  return sub_1000175B0(v0);
}

  ;
}

uint64_t sub_10007F0B0( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  return sub_10007ED3C((uint64_t)&a9, (uint64_t)&a17, a3);
}

  ;
}

uint64_t sub_10007F0D0()
{
  return v0;
}

  ;
}

uint64_t sub_10007F0F0()
{
  return swift_errorRelease(v0);
}

uint64_t sub_10007F0F8()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_10007F104()
{
  return swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 + 40));
}

  ;
}

  ;
}

void *sub_10007F138()
{
  return v0;
}

__n128 sub_10007F164@<Q0>(uint64_t a1@<X8>)
{
  __n128 v13 = v14;
  uint64_t v2 = v15;
  uint64_t v3 = v16;
  int v4 = v17;
  __int16 v5 = v18;
  char v6 = v19;
  unsigned int v7 = HTTPVersion.init(major:minor:)(1LL, 1LL);
  Swift::UInt16 v8 = v7;
  unsigned int v9 = HIWORD(v7);
  uint64_t v10 = type metadata accessor for HTTPResponseHead._Storage();
  uint64_t v11 = swift_allocObject(v10, 44LL, 7LL);
  *(void *)(v11 + 1sub_100019F7C(v0 + 6) = 0LL;
  *(void *)(v11 + 2sub_100019F7C(v0 + 4) = 0LL;
  *(void *)(v11 + 3sub_100019F7C(v0 + 2) = 25LL;
  *(_WORD *)(v11 + 4sub_10006F0B8(12LL, 0) = v8;
  *(_WORD *)(v11 + 4sub_100019F7C(v0 + 2) = v9;
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = _swiftEmptyArrayStorage;
  *(_BYTE *)(a1 + 1sub_100019F7C(v0 + 6) = 2;
  __n128 result = v13;
  *(__n128 *)(a1 + 2sub_100019F7C(v0 + 4) = v13;
  *(void *)(a1 + 4sub_10006F0B8(12LL, 0) = v2;
  *(void *)(a1 + 48) = v3;
  *(_BYTE *)(a1 + 6sub_100019F7C(v0 + 2) = v6;
  *(_WORD *)(a1 + 6sub_10006F0B8(12LL, 0) = v5;
  *(_DWORD *)(a1 + 5sub_100019F7C(v0 + 6) = v4;
  return result;
}

uint64_t sub_10007F24C()
{
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

uint64_t type metadata accessor for ConfigurationBasedRoute()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService23ConfigurationBasedRoute);
}

double sub_10007F28C@<D0>(_OWORD *a1@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr))(**(void **)v1 + 112LL))(v5);
  __int128 v3 = v5[1];
  *a1 = v5[0];
  a1[1] = v3;
  a1[2] = v6[0];
  double result = *(double *)((char *)v6 + 15);
  *(_OWORD *)((char *)a1 + 47) = *(_OWORD *)((char *)v6 + 15);
  return result;
}

uint64_t sub_10007F2DC()
{
  return sub_100019F7C((void *)(v0 + 88));
}

uint64_t sub_10007F2E4()
{
  return swift_deallocClassInstance(v0, 128LL, 7LL);
}

uint64_t type metadata accessor for TransactionBasedRoute()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService21TransactionBasedRoute);
}

void UnsafeEmbeddedAtomic.init(value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v5 = (void (*)(uint64_t))sub_100080DB0(a2, a3, *(uint64_t (**)(uint64_t, uint64_t))(a3 + 8));
  v5(a1);
  sub_100024F0C();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
  sub_1000193B8();
}

uint64_t UnsafeEmbeddedAtomic.compareAndExchange(expected:desired:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = sub_100080DD4();
  char v9 = v8(v7, a1, a2);
  sub_100024F0C();
  return v9 & 1;
}

uint64_t UnsafeEmbeddedAtomic.add(_:)()
{
  __int128 v3 = (uint64_t (*)(uint64_t, uint64_t))sub_100080DA0( v1,  v2,  *(uint64_t (**)(uint64_t, uint64_t))(v2 + 32));
  sub_100080D88(v3);
  return sub_10002A598(v0);
}

uint64_t UnsafeEmbeddedAtomic.sub(_:)()
{
  __int128 v3 = (uint64_t (*)(uint64_t, uint64_t))sub_100080DA0( v1,  v2,  *(uint64_t (**)(uint64_t, uint64_t))(v2 + 40));
  sub_100080D88(v3);
  return sub_10002A598(v0);
}

uint64_t UnsafeEmbeddedAtomic.exchange(with:)()
{
  __int128 v3 = (uint64_t (*)(uint64_t, uint64_t))sub_100080DA0( v1,  v2,  *(uint64_t (**)(uint64_t, uint64_t))(v2 + 48));
  sub_100080D88(v3);
  return sub_10002A598(v0);
}

uint64_t UnsafeEmbeddedAtomic.load()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = (void (*)(uint64_t))sub_100080DB0(a2, a3, *(uint64_t (**)(uint64_t, uint64_t))(a3 + 56));
  uint64_t v6 = v5;
  v4(a1);
  return sub_10002A598(v6);
}

uint64_t UnsafeEmbeddedAtomic.store(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_100080DD4();
  v7(v6, a1);
  return sub_10002A598(v4);
}

Swift::Void __swiftcall UnsafeEmbeddedAtomic.destroy()()
{
  uint64_t v2 = sub_100080DD4();
  v3(v2);
  swift_release();
}

uint64_t Atomic.embedded.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t Atomic.__allocating_init(value:)()
{
  uint64_t v1 = sub_100080DC0();
  Atomic.init(value:)(v0);
  return v1;
}

void Atomic.init(value:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 80LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  UnsafeEmbeddedAtomic.init(value:)((uint64_t)v7, v4, *(void *)(v3 + 88));
  uint64_t v9 = v8;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v1[2] = v9;
  sub_10002A3D4();
}

uint64_t Atomic.compareAndExchange(expected:desired:)(uint64_t a1, uint64_t a2)
{
  return UnsafeEmbeddedAtomic.compareAndExchange(expected:desired:)( a1,  a2,  v2[2],  *(void *)(*v2 + 80),  *(void *)(*v2 + 88));
}

uint64_t Atomic.add(_:)(uint64_t a1)
{
  return sub_10007F60C(a1, (uint64_t (*)(uint64_t, void, void, void))UnsafeEmbeddedAtomic.add(_:));
}

uint64_t Atomic.sub(_:)(uint64_t a1)
{
  return sub_10007F60C(a1, (uint64_t (*)(uint64_t, void, void, void))UnsafeEmbeddedAtomic.sub(_:));
}

uint64_t Atomic.exchange(with:)(uint64_t a1)
{
  return sub_10007F60C( a1,  (uint64_t (*)(uint64_t, void, void, void))UnsafeEmbeddedAtomic.exchange(with:));
}

uint64_t sub_10007F60C(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void))
{
  return a2(a1, v2[2], *(void *)(*v2 + 80LL), *(void *)(*v2 + 88LL));
}

uint64_t Atomic.load()()
{
  return UnsafeEmbeddedAtomic.load()(v0[2], *(void *)(*v0 + 80), *(void *)(*v0 + 88));
}

uint64_t Atomic.store(_:)(uint64_t a1)
{
  return UnsafeEmbeddedAtomic.store(_:)(a1, v1[2], *(void *)(*v1 + 80), *(void *)(*v1 + 88));
}

uint64_t Atomic.deinit()
{
  return v0;
}

uint64_t Atomic.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

_BYTE *sub_10007F684(char a1)
{
  return sub_100006C44(a1 & 1);
}

uint64_t (**Bool.atomic_create.unsafeMutableAddressor())()
{
  return &static Bool.atomic_create;
}

void static Bool.atomic_create.getter()
{
}

void (__cdecl **Bool.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static Bool.atomic_destroy;
}

void static UInt64.atomic_destroy.getter()
{
}

uint64_t sub_10007F6C0(unsigned __int8 *a1, char a2, char a3)
{
  return sub_100006C70(a1, a2 & 1, a3 & 1);
}

uint64_t (**Bool.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static Bool.atomic_compare_and_exchange;
}

void static Bool.nio_atomic_compare_and_exchange.getter()
{
}

uint64_t sub_10007F6F4(unsigned __int8 *a1, char a2)
{
  return sub_100006C9C(a1, a2 & 1);
}

uint64_t (**Bool.atomic_add.unsafeMutableAddressor())()
{
  return &static Bool.atomic_add;
}

void static Bool.nio_atomic_add.getter()
{
}

uint64_t sub_10007F724(unsigned __int8 *a1, char a2)
{
  return sub_100006CB4(a1, a2 & 1);
}

uint64_t (**Bool.atomic_sub.unsafeMutableAddressor())()
{
  return &static Bool.atomic_sub;
}

void static Bool.nio_atomic_sub.getter()
{
}

uint64_t sub_10007F754(unsigned __int8 *a1, char a2)
{
  return sub_100006CCC(a1, a2 & 1);
}

uint64_t (**Bool.atomic_exchange.unsafeMutableAddressor())()
{
  return &static Bool.atomic_exchange;
}

void static Bool.nio_atomic_exchange.getter()
{
}

uint64_t sub_10007F784(_BYTE *a1)
{
  return sub_100006CE4(a1);
}

uint64_t (**Bool.atomic_load.unsafeMutableAddressor())()
{
  return &static Bool.atomic_load;
}

void static Bool.nio_atomic_load.getter()
{
}

_BYTE *sub_10007F7B0(_BYTE *a1, char a2)
{
  return sub_100006CF0(a1, a2 & 1);
}

uint64_t (**Bool.atomic_store.unsafeMutableAddressor())()
{
  return &static Bool.atomic_store;
}

void static Bool.nio_atomic_create_with_existing_storage.getter()
{
}

_BYTE *(*sub_10007F7D0())(char *a1)
{
  return sub_10007F7E0;
}

_BYTE *sub_10007F7E0(char *a1)
{
  return sub_10007F684(*a1);
}

void (__cdecl *sub_10007F7E8())(void *)
{
  return j_j__free_0;
}

uint64_t (*sub_10007F7F8())(unsigned __int8 *a1, char *a2, char *a3)
{
  return sub_10007F808;
}

uint64_t sub_10007F808(unsigned __int8 *a1, char *a2, char *a3)
{
  return sub_10007F6C0(a1, *a2, *a3);
}

uint64_t (*sub_10007F814())@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_10007F824;
}

uint64_t sub_10007F824@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10007F6F4(a1, *a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10007F850@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10007F724(a1, *a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10007F87C@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10007F754(a1, *a2);
  *a3 = result & 1;
  return result;
}

uint64_t (*sub_10007F8A8())@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_10007F850;
}

uint64_t (*sub_10007F8B8())@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_10007F87C;
}

uint64_t (*sub_10007F8C8())@<X0>(_BYTE *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10007F8D8;
}

uint64_t sub_10007F8D8@<X0>(_BYTE *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10007F784(a1);
  *a2 = result & 1;
  return result;
}

_BYTE *(*sub_10007F900())(_BYTE *a1, char *a2)
{
  return sub_10007F910;
}

_BYTE *sub_10007F910(_BYTE *a1, char *a2)
{
  return sub_10007F7B0(a1, *a2);
}

_BYTE *sub_10007F918(char a1)
{
  return sub_100006C44(a1);
}

uint64_t (**Int8.atomic_create.unsafeMutableAddressor())()
{
  return &static Int8.atomic_create;
}

void static Int8.atomic_create.getter()
{
}

void (__cdecl **Int8.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static Int8.atomic_destroy;
}

uint64_t sub_10007F944(unsigned __int8 *a1, unsigned __int8 a2, unsigned __int8 a3)
{
  return sub_100006CF8(a1, a2, a3);
}

uint64_t (**Int8.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static Int8.atomic_compare_and_exchange;
}

void static Int8.nio_atomic_compare_and_exchange.getter()
{
}

uint64_t sub_10007F978(unsigned __int8 *a1, char a2)
{
  return sub_100006D24(a1, a2);
}

uint64_t (**Int8.atomic_add.unsafeMutableAddressor())()
{
  return &static Int8.atomic_add;
}

void static Int8.nio_atomic_add.getter()
{
}

uint64_t sub_10007F9A8(unsigned __int8 *a1, char a2)
{
  return sub_100006D3C(a1, a2);
}

uint64_t (**Int8.atomic_sub.unsafeMutableAddressor())()
{
  return &static Int8.atomic_sub;
}

void static Int8.nio_atomic_sub.getter()
{
}

uint64_t sub_10007F9D8(unsigned __int8 *a1, unsigned __int8 a2)
{
  return sub_100006D54(a1, a2);
}

uint64_t (**Int8.atomic_exchange.unsafeMutableAddressor())()
{
  return &static Int8.atomic_exchange;
}

void static Int8.nio_atomic_exchange.getter()
{
}

uint64_t sub_10007FA08(char *a1)
{
  return sub_100006D68(a1);
}

uint64_t (**Int8.atomic_load.unsafeMutableAddressor())()
{
  return &static Int8.atomic_load;
}

void static Int8.nio_atomic_load.getter()
{
}

_BYTE *sub_10007FA34(_BYTE *a1, char a2)
{
  return sub_100006CF0(a1, a2);
}

uint64_t (**Int8.atomic_store.unsafeMutableAddressor())()
{
  return &static Int8.atomic_store;
}

void static Int8.nio_atomic_create_with_existing_storage.getter()
{
}

_BYTE *(*sub_10007FA54())(char *a1)
{
  return sub_10007FA64;
}

_BYTE *sub_10007FA64(char *a1)
{
  return sub_10007F918(*a1);
}

uint64_t (*sub_10007FA6C())(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return sub_10007FA7C;
}

uint64_t sub_10007FA7C(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return sub_10007F944(a1, *a2, *a3);
}

uint64_t (*sub_10007FA88())@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_10007FA98;
}

uint64_t sub_10007FA98@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10007F978(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_10007FAC0@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10007F9A8(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_10007FAE8@<X0>(unsigned __int8 *a1@<X0>, unsigned __int8 *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10007F9D8(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t (*sub_10007FB10())@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_10007FAC0;
}

uint64_t (*sub_10007FB20())@<X0>(unsigned __int8 *a1@<X0>, unsigned __int8 *a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_10007FAE8;
}

uint64_t (*sub_10007FB30())@<X0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10007FB40;
}

uint64_t sub_10007FB40@<X0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10007FA08(a1);
  *a2 = result;
  return result;
}

_BYTE *(*sub_10007FB64())(_BYTE *a1, char *a2)
{
  return sub_10007FB74;
}

_BYTE *sub_10007FB74(_BYTE *a1, char *a2)
{
  return sub_10007FA34(a1, *a2);
}

_BYTE *sub_10007FB7C(char a1)
{
  return sub_100006C44(a1);
}

uint64_t (**UInt8.atomic_create.unsafeMutableAddressor())()
{
  return &static UInt8.atomic_create;
}

void static UInt8.atomic_create.getter()
{
}

void (__cdecl **UInt8.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static UInt8.atomic_destroy;
}

uint64_t sub_10007FBA8(unsigned __int8 *a1, unsigned __int8 a2, unsigned __int8 a3)
{
  return sub_100006C70(a1, a2, a3);
}

uint64_t (**UInt8.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static UInt8.atomic_compare_and_exchange;
}

void static UInt8.nio_atomic_compare_and_exchange.getter()
{
}

uint64_t sub_10007FBDC(unsigned __int8 *a1, char a2)
{
  return sub_100006F68(a1, a2);
}

uint64_t (**UInt8.atomic_add.unsafeMutableAddressor())()
{
  return &static UInt8.atomic_add;
}

void static UInt8.nio_atomic_add.getter()
{
}

uint64_t sub_10007FC0C(unsigned __int8 *a1, char a2)
{
  return sub_100006F80(a1, a2);
}

uint64_t (**UInt8.atomic_sub.unsafeMutableAddressor())()
{
  return &static UInt8.atomic_sub;
}

void static UInt8.nio_atomic_sub.getter()
{
}

uint64_t sub_10007FC3C(unsigned __int8 *a1, unsigned __int8 a2)
{
  return sub_100006F98(a1, a2);
}

uint64_t (**UInt8.atomic_exchange.unsafeMutableAddressor())()
{
  return &static UInt8.atomic_exchange;
}

void static UInt8.nio_atomic_exchange.getter()
{
}

uint64_t sub_10007FC6C(unsigned __int8 *a1)
{
  return sub_100006FB0(a1);
}

uint64_t (**UInt8.atomic_load.unsafeMutableAddressor())()
{
  return &static UInt8.atomic_load;
}

void static UInt8.nio_atomic_load.getter()
{
}

_BYTE *sub_10007FC98(_BYTE *a1, char a2)
{
  return sub_100006CF0(a1, a2);
}

uint64_t (**UInt8.atomic_store.unsafeMutableAddressor())()
{
  return &static UInt8.atomic_store;
}

void static UInt8.nio_atomic_create_with_existing_storage.getter()
{
}

_BYTE *(*sub_10007FCB8())(char *a1)
{
  return sub_10007FCC8;
}

_BYTE *sub_10007FCC8(char *a1)
{
  return sub_10007FB7C(*a1);
}

uint64_t (*sub_10007FCD0())(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return sub_10007FCE0;
}

uint64_t sub_10007FCE0(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return sub_10007FBA8(a1, *a2, *a3);
}

uint64_t (*sub_10007FCEC())@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_10007FCFC;
}

uint64_t sub_10007FCFC@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10007FBDC(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_10007FD24@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10007FC0C(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_10007FD4C@<X0>(unsigned __int8 *a1@<X0>, unsigned __int8 *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10007FC3C(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t (*sub_10007FD74())@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_10007FD24;
}

uint64_t (*sub_10007FD84())@<X0>(unsigned __int8 *a1@<X0>, unsigned __int8 *a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_10007FD4C;
}

uint64_t (*sub_10007FD94())@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10007FDA4;
}

uint64_t sub_10007FDA4@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10007FC6C(a1);
  *a2 = result;
  return result;
}

_BYTE *(*sub_10007FDC8())(_BYTE *a1, char *a2)
{
  return sub_10007FDD8;
}

_BYTE *sub_10007FDD8(_BYTE *a1, char *a2)
{
  return sub_10007FC98(a1, *a2);
}

_WORD *sub_10007FDE0(__int16 a1)
{
  return sub_100006D74(a1);
}

uint64_t (**Int16.atomic_create.unsafeMutableAddressor())()
{
  return &static Int16.atomic_create;
}

void static Int16.atomic_create.getter()
{
}

void (__cdecl **Int16.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static Int16.atomic_destroy;
}

uint64_t sub_10007FE0C(unsigned __int16 *a1, unsigned __int16 a2, unsigned __int16 a3)
{
  return sub_100006D9C(a1, a2, a3);
}

uint64_t (**Int16.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static Int16.atomic_compare_and_exchange;
}

void static Int16.nio_atomic_compare_and_exchange.getter()
{
}

uint64_t sub_10007FE40(unsigned __int16 *a1, __int16 a2)
{
  return sub_100006DC8(a1, a2);
}

uint64_t (**Int16.atomic_add.unsafeMutableAddressor())()
{
  return &static Int16.atomic_add;
}

void static Int16.nio_atomic_add.getter()
{
}

uint64_t sub_10007FE70(unsigned __int16 *a1, __int16 a2)
{
  return sub_100006DE0(a1, a2);
}

uint64_t (**Int16.atomic_sub.unsafeMutableAddressor())()
{
  return &static Int16.atomic_sub;
}

void static Int16.nio_atomic_sub.getter()
{
}

uint64_t sub_10007FEA0(unsigned __int16 *a1, unsigned __int16 a2)
{
  return sub_100006DF8(a1, a2);
}

uint64_t (**Int16.atomic_exchange.unsafeMutableAddressor())()
{
  return &static Int16.atomic_exchange;
}

void static Int16.nio_atomic_exchange.getter()
{
}

uint64_t sub_10007FED0(__int16 *a1)
{
  return sub_100006E0C(a1);
}

uint64_t (**Int16.atomic_load.unsafeMutableAddressor())()
{
  return &static Int16.atomic_load;
}

void static Int16.nio_atomic_load.getter()
{
}

_WORD *sub_10007FEFC(_WORD *a1, __int16 a2)
{
  return sub_100006E18(a1, a2);
}

uint64_t (**Int16.atomic_store.unsafeMutableAddressor())()
{
  return &static Int16.atomic_store;
}

void static Int16.nio_atomic_create_with_existing_storage.getter()
{
}

_WORD *(*sub_10007FF1C())(__int16 *a1)
{
  return sub_10007FF2C;
}

_WORD *sub_10007FF2C(__int16 *a1)
{
  return sub_10007FDE0(*a1);
}

uint64_t (*sub_10007FF34())(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  return sub_10007FF44;
}

uint64_t sub_10007FF44(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  return sub_10007FE0C(a1, *a2, *a3);
}

uint64_t (*sub_10007FF50())@<X0>(unsigned __int16 *a1@<X0>, __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  return sub_10007FF60;
}

uint64_t sub_10007FF60@<X0>(unsigned __int16 *a1@<X0>, __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  uint64_t result = sub_10007FE40(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_10007FF88@<X0>(unsigned __int16 *a1@<X0>, __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  uint64_t result = sub_10007FE70(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_10007FFB0@<X0>(unsigned __int16 *a1@<X0>, unsigned __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  uint64_t result = sub_10007FEA0(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t (*sub_10007FFD8())@<X0>(unsigned __int16 *a1@<X0>, __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  return sub_10007FF88;
}

uint64_t (*sub_10007FFE8())@<X0>(unsigned __int16 *a1@<X0>, unsigned __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  return sub_10007FFB0;
}

uint64_t (*sub_10007FFF8())@<X0>(__int16 *a1@<X0>, _WORD *a2@<X8>)
{
  return sub_100080008;
}

uint64_t sub_100080008@<X0>(__int16 *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t result = sub_10007FED0(a1);
  *a2 = result;
  return result;
}

_WORD *(*sub_10008002C())(_WORD *a1, __int16 *a2)
{
  return sub_10008003C;
}

_WORD *sub_10008003C(_WORD *a1, __int16 *a2)
{
  return sub_10007FEFC(a1, *a2);
}

_WORD *sub_100080044(__int16 a1)
{
  return sub_100006D74(a1);
}

uint64_t (**UInt16.atomic_create.unsafeMutableAddressor())()
{
  return &static UInt16.atomic_create;
}

void static UInt16.atomic_create.getter()
{
}

void (__cdecl **UInt16.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static UInt16.atomic_destroy;
}

uint64_t sub_100080070(unsigned __int16 *a1, unsigned __int16 a2, unsigned __int16 a3)
{
  return sub_100006FB8(a1, a2, a3);
}

uint64_t (**UInt16.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static UInt16.atomic_compare_and_exchange;
}

void static UInt16.nio_atomic_compare_and_exchange.getter()
{
}

uint64_t sub_1000800A4(unsigned __int16 *a1, __int16 a2)
{
  return sub_100006FE4(a1, a2);
}

uint64_t (**UInt16.atomic_add.unsafeMutableAddressor())()
{
  return &static UInt16.atomic_add;
}

void static UInt16.nio_atomic_add.getter()
{
}

uint64_t sub_1000800D4(unsigned __int16 *a1, __int16 a2)
{
  return sub_100006FFC(a1, a2);
}

uint64_t (**UInt16.atomic_sub.unsafeMutableAddressor())()
{
  return &static UInt16.atomic_sub;
}

void static UInt16.nio_atomic_sub.getter()
{
}

uint64_t sub_100080104(unsigned __int16 *a1, unsigned __int16 a2)
{
  return sub_100007014(a1, a2);
}

uint64_t (**UInt16.atomic_exchange.unsafeMutableAddressor())()
{
  return &static UInt16.atomic_exchange;
}

void static UInt16.nio_atomic_exchange.getter()
{
}

uint64_t sub_100080134(unsigned __int16 *a1)
{
  return sub_10000702C(a1);
}

uint64_t (**UInt16.atomic_load.unsafeMutableAddressor())()
{
  return &static UInt16.atomic_load;
}

void static UInt16.nio_atomic_load.getter()
{
}

_WORD *sub_100080160(_WORD *a1, __int16 a2)
{
  return sub_100006E18(a1, a2);
}

uint64_t (**UInt16.atomic_store.unsafeMutableAddressor())()
{
  return &static UInt16.atomic_store;
}

void static UInt16.nio_atomic_create_with_existing_storage.getter()
{
}

_WORD *(*sub_100080180())(__int16 *a1)
{
  return sub_100080190;
}

_WORD *sub_100080190(__int16 *a1)
{
  return sub_100080044(*a1);
}

uint64_t (*sub_100080198())(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  return sub_1000801A8;
}

uint64_t sub_1000801A8(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  return sub_100080070(a1, *a2, *a3);
}

uint64_t (*sub_1000801B4())@<X0>(unsigned __int16 *a1@<X0>, __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  return sub_1000801C4;
}

uint64_t sub_1000801C4@<X0>(unsigned __int16 *a1@<X0>, __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  uint64_t result = sub_1000800A4(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000801EC@<X0>(unsigned __int16 *a1@<X0>, __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  uint64_t result = sub_1000800D4(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_100080214@<X0>(unsigned __int16 *a1@<X0>, unsigned __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  uint64_t result = sub_100080104(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t (*sub_10008023C())@<X0>(unsigned __int16 *a1@<X0>, __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  return sub_1000801EC;
}

uint64_t (*sub_10008024C())@<X0>(unsigned __int16 *a1@<X0>, unsigned __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  return sub_100080214;
}

uint64_t (*sub_10008025C())@<X0>(unsigned __int16 *a1@<X0>, _WORD *a2@<X8>)
{
  return sub_10008026C;
}

uint64_t sub_10008026C@<X0>(unsigned __int16 *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t result = sub_100080134(a1);
  *a2 = result;
  return result;
}

_WORD *(*sub_100080290())(_WORD *a1, __int16 *a2)
{
  return sub_1000802A0;
}

_WORD *sub_1000802A0(_WORD *a1, __int16 *a2)
{
  return sub_100080160(a1, *a2);
}

_DWORD *(**Int32.atomic_create.unsafeMutableAddressor())(int)
{
  return &static Int32.atomic_create;
}

void static UInt32.atomic_create.getter()
{
}

void (__cdecl **Int32.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static Int32.atomic_destroy;
}

uint64_t sub_1000802D0(unsigned int *a1, int a2, unsigned int a3)
{
  return sub_100006E48(a1, a2, a3);
}

uint64_t (**Int32.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static Int32.atomic_compare_and_exchange;
}

void static UInt32.nio_atomic_compare_and_exchange.getter()
{
}

uint64_t (**Int32.atomic_add.unsafeMutableAddressor())(unsigned int *, int)
{
  return &static Int32.atomic_add;
}

void static UInt32.nio_atomic_add.getter()
{
}

uint64_t (**Int32.atomic_sub.unsafeMutableAddressor())(unsigned int *, int)
{
  return &static Int32.atomic_sub;
}

void static UInt32.nio_atomic_sub.getter()
{
}

uint64_t (**Int32.atomic_exchange.unsafeMutableAddressor())(unsigned int *, unsigned int)
{
  return &static Int32.atomic_exchange;
}

void static UInt32.nio_atomic_exchange.getter()
{
}

uint64_t (**Int32.atomic_load.unsafeMutableAddressor())(unsigned int *)
{
  return &static Int32.atomic_load;
}

void static UInt32.nio_atomic_load.getter()
{
}

_DWORD *(**Int32.atomic_store.unsafeMutableAddressor())(_DWORD *result, int)
{
  return &static Int32.atomic_store;
}

void static UInt32.nio_atomic_create_with_existing_storage.getter()
{
}

_DWORD *(*sub_100080388())(int *a1)
{
  return sub_100080398;
}

_DWORD *sub_100080398(int *a1)
{
  return sub_1000802A8(*a1);
}

uint64_t (*sub_1000803A0())(unsigned int *a1, int *a2, unsigned int *a3)
{
  return sub_1000803B0;
}

uint64_t sub_1000803B0(unsigned int *a1, int *a2, unsigned int *a3)
{
  return sub_1000802D0(a1, *a2, *a3);
}

uint64_t (*sub_1000803BC())@<X0>(unsigned int *a1@<X0>, int *a2@<X1>, _DWORD *a3@<X8>)
{
  return sub_1000803CC;
}

uint64_t sub_1000803CC@<X0>(unsigned int *a1@<X0>, int *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t result = sub_1000802FC(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000803F4@<X0>(unsigned int *a1@<X0>, int *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t result = sub_100080318(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_10008041C@<X0>(unsigned int *a1@<X0>, unsigned int *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t result = sub_100080334(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t (*sub_100080444())@<X0>(unsigned int *a1@<X0>, int *a2@<X1>, _DWORD *a3@<X8>)
{
  return sub_1000803F4;
}

uint64_t (*sub_100080454())@<X0>(unsigned int *a1@<X0>, unsigned int *a2@<X1>, _DWORD *a3@<X8>)
{
  return sub_10008041C;
}

uint64_t (*sub_100080464())@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_100080474;
}

uint64_t sub_100080474@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = sub_100080350(a1);
  *a2 = result;
  return result;
}

_DWORD *(*sub_100080498())(_DWORD *a1, int *a2)
{
  return sub_1000804A8;
}

_DWORD *sub_1000804A8(_DWORD *a1, int *a2)
{
  return sub_10008036C(a1, *a2);
}

_DWORD *(**UInt32.atomic_create.unsafeMutableAddressor())(int)
{
  return &static UInt32.atomic_create;
}

void (__cdecl **UInt32.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static UInt32.atomic_destroy;
}

uint64_t (**UInt32.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static UInt32.atomic_compare_and_exchange;
}

uint64_t (**UInt32.atomic_add.unsafeMutableAddressor())(unsigned int *, int)
{
  return &static UInt32.atomic_add;
}

uint64_t (**UInt32.atomic_sub.unsafeMutableAddressor())(unsigned int *, int)
{
  return &static UInt32.atomic_sub;
}

uint64_t (**UInt32.atomic_exchange.unsafeMutableAddressor())(unsigned int *, unsigned int)
{
  return &static UInt32.atomic_exchange;
}

uint64_t (**UInt32.atomic_load.unsafeMutableAddressor())(unsigned int *)
{
  return &static UInt32.atomic_load;
}

_DWORD *(**UInt32.atomic_store.unsafeMutableAddressor())(_DWORD *result, int)
{
  return &static UInt32.atomic_store;
}

void *(**Int64.atomic_create.unsafeMutableAddressor())(uint64_t)
{
  return &static Int64.atomic_create;
}

void static UInt64.atomic_create.getter()
{
}

void (__cdecl **Int64.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static Int64.atomic_destroy;
}

uint64_t sub_100080538(unint64_t *a1, uint64_t a2, unint64_t a3)
{
  return sub_100006EEC(a1, a2, a3);
}

uint64_t (**Int64.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static Int64.atomic_compare_and_exchange;
}

void static UInt64.nio_atomic_compare_and_exchange.getter()
{
}

unint64_t (**Int64.atomic_add.unsafeMutableAddressor())(unint64_t *, uint64_t)
{
  return &static Int64.atomic_add;
}

void static UInt64.nio_atomic_add.getter()
{
}

unint64_t (**Int64.atomic_sub.unsafeMutableAddressor())(unint64_t *, uint64_t)
{
  return &static Int64.atomic_sub;
}

void static UInt64.nio_atomic_sub.getter()
{
}

unint64_t (**Int64.atomic_exchange.unsafeMutableAddressor())(unint64_t *, unint64_t)
{
  return &static Int64.atomic_exchange;
}

void static UInt64.nio_atomic_exchange.getter()
{
}

uint64_t (**Int64.atomic_load.unsafeMutableAddressor())(uint64_t)
{
  return &static Int64.atomic_load;
}

void static UInt64.nio_atomic_load.getter()
{
}

void *(**Int64.atomic_store.unsafeMutableAddressor())(void *result, uint64_t)
{
  return &static Int64.atomic_store;
}

void static UInt64.nio_atomic_create_with_existing_storage.getter()
{
}

void *(*sub_1000805F0())(uint64_t *a1)
{
  return sub_100080600;
}

void *sub_100080600(uint64_t *a1)
{
  return sub_100080510(*a1);
}

uint64_t (*sub_100080608())(unint64_t *a1, uint64_t *a2, unint64_t *a3)
{
  return sub_100080618;
}

uint64_t sub_100080618(unint64_t *a1, uint64_t *a2, unint64_t *a3)
{
  return sub_100080538(a1, *a2, *a3);
}

unint64_t (*sub_100080624())@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  return sub_100080634;
}

unint64_t sub_100080634@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = sub_100080564(a1, *a2);
  *a3 = result;
  return result;
}

unint64_t sub_10008065C@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = sub_100080580(a1, *a2);
  *a3 = result;
  return result;
}

unint64_t sub_100080684@<X0>( unint64_t *a1@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = sub_10008059C(a1, *a2);
  *a3 = result;
  return result;
}

unint64_t (*sub_1000806AC())@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  return sub_10008065C;
}

unint64_t (*sub_1000806BC())@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  return sub_100080684;
}

uint64_t (*sub_1000806CC())@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000806DC;
}

uint64_t sub_1000806DC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000805B8(a1);
  *a2 = result;
  return result;
}

void *(*sub_100080700())(void *a1, uint64_t *a2)
{
  return sub_100080710;
}

void *sub_100080710(void *a1, uint64_t *a2)
{
  return sub_1000805D4(a1, *a2);
}

void *(**UInt64.atomic_create.unsafeMutableAddressor())(uint64_t)
{
  return &static UInt64.atomic_create;
}

void (__cdecl **UInt64.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static UInt64.atomic_destroy;
}

uint64_t (**UInt64.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static UInt64.atomic_compare_and_exchange;
}

unint64_t (**UInt64.atomic_add.unsafeMutableAddressor())(unint64_t *, uint64_t)
{
  return &static UInt64.atomic_add;
}

unint64_t (**UInt64.atomic_sub.unsafeMutableAddressor())(unint64_t *, uint64_t)
{
  return &static UInt64.atomic_sub;
}

unint64_t (**UInt64.atomic_exchange.unsafeMutableAddressor())(unint64_t *, unint64_t)
{
  return &static UInt64.atomic_exchange;
}

uint64_t (**UInt64.atomic_load.unsafeMutableAddressor())(uint64_t)
{
  return &static UInt64.atomic_load;
}

void *(**UInt64.atomic_store.unsafeMutableAddressor())(void *result, uint64_t)
{
  return &static UInt64.atomic_store;
}

void *(**Int.atomic_create.unsafeMutableAddressor())(uint64_t)
{
  return &static Int.atomic_create;
}

void (__cdecl **Int.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static Int.atomic_destroy;
}

uint64_t (**Int.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static Int.atomic_compare_and_exchange;
}

unint64_t (**Int.atomic_add.unsafeMutableAddressor())(unint64_t *, uint64_t)
{
  return &static Int.atomic_add;
}

unint64_t (**Int.atomic_sub.unsafeMutableAddressor())(unint64_t *, uint64_t)
{
  return &static Int.atomic_sub;
}

unint64_t (**Int.atomic_exchange.unsafeMutableAddressor())(unint64_t *, unint64_t)
{
  return &static Int.atomic_exchange;
}

uint64_t (**Int.atomic_load.unsafeMutableAddressor())(uint64_t)
{
  return &static Int.atomic_load;
}

void *(**Int.atomic_store.unsafeMutableAddressor())(void *result, uint64_t)
{
  return &static Int.atomic_store;
}

void *(**UInt.atomic_create.unsafeMutableAddressor())(uint64_t)
{
  return &static UInt.atomic_create;
}

void (__cdecl **UInt.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static UInt.atomic_destroy;
}

uint64_t (**UInt.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static UInt.atomic_compare_and_exchange;
}

unint64_t (**UInt.atomic_add.unsafeMutableAddressor())(unint64_t *, uint64_t)
{
  return &static UInt.atomic_add;
}

unint64_t (**UInt.atomic_sub.unsafeMutableAddressor())(unint64_t *, uint64_t)
{
  return &static UInt.atomic_sub;
}

unint64_t (**UInt.atomic_exchange.unsafeMutableAddressor())(unint64_t *, unint64_t)
{
  return &static UInt.atomic_exchange;
}

uint64_t (**UInt.atomic_load.unsafeMutableAddressor())(uint64_t)
{
  return &static UInt.atomic_load;
}

void *(**UInt.atomic_store.unsafeMutableAddressor())(void *result, uint64_t)
{
  return &static UInt.atomic_store;
}

uint64_t AtomicBox.__allocating_init(value:)()
{
  uint64_t v1 = sub_100080DC0();
  AtomicBox.init(value:)(v0);
  return v1;
}

void AtomicBox.init(value:)(uint64_t a1)
{
  uint64_t v3 = sub_1000175B0(qword_1002ADE98);
  swift_unknownObjectRetain(a1);
  uint64_t v4 = swift_bufferAllocate(v3, 24LL, 7LL);
  sub_100006F60((void *)(v4 + 16), a1);
  swift_unknownObjectRelease(a1);
  *(void *)(v1 + 1sub_100019F7C(v0 + 6) = swift_dynamicCastClassUnconditional(v4, v3, 0LL, 0LL, 0LL);
  sub_1000193B8();
}

void AtomicBox.deinit()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  unint64_t v2 = sub_100006F44((unint64_t *)(v1 + 16), 0xDEADBEEuLL);
  swift_release();
  if (v2)
  {
    swift_unknownObjectRelease(v2);
    swift_release();
    sub_1000193B8();
  }

  else
  {
    __break(1u);
  }

uint64_t AtomicBox.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t AtomicBox.compareAndExchange(expected:desired:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *v8;
  uint64_t v12 = a2;
  void v11[2] = a1;
  v11[3] = a2;
  sub_100080A98( (uint64_t)&v12,  (uint64_t)sub_100080C44,  (uint64_t)v11,  *(void *)(v9 + 80),  (uint64_t)&type metadata for Never,  (uint64_t)&type metadata for Bool,  (uint64_t)&protocol witness table for Never,  a8);
  return v13;
}

uint64_t sub_1000809CC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v7 = *(void *)(a3 + 16);
  while (1)
  {
    swift_retain();
    char v8 = sub_100006EEC((unint64_t *)(v7 + 16), a1, a2);
    uint64_t result = swift_release();
    if ((v8 & 1) != 0) {
      break;
    }
    swift_retain();
    uint64_t v10 = sub_100006F58(v7 + 16);
    uint64_t result = swift_release();
    if (v10 && v10 != a1)
    {
      char v11 = 0;
      goto LABEL_10;
    }

    pthread_yield_np();
  }

  if (a2 != a1)
  {
    swift_unknownObjectRetain(a2);
    uint64_t result = swift_unknownObjectRelease(a1);
  }

  char v11 = 1;
LABEL_10:
  *a4 = v11;
  return result;
}

uint64_t sub_100080A98( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  __chkstk_darwin();
  unsigned __int8 v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = v14(v13);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v13, a5);
  }
  return result;
}

void AtomicBox.exchange(with:)(unint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_unknownObjectRetain(a1);
  do
  {
    while (1)
    {
      swift_retain();
      uint64_t v4 = sub_100006F58(v3 + 16);
      sub_100024F0C();
      if (v4) {
        break;
      }
      pthread_yield_np();
    }

    swift_retain();
    char v5 = sub_100006EEC((unint64_t *)(v3 + 16), v4, a1);
    sub_100024F0C();
  }

  while ((v5 & 1) == 0);
  sub_10002A3D4();
}

void AtomicBox.load()()
{
  uint64_t v1 = (unint64_t *)(*(void *)(v0 + 16) + 16LL);
  do
  {
    while (1)
    {
      sub_10002A4C8();
      uint64_t v2 = sub_100006F58((uint64_t)v1);
      sub_10001EDD8();
      if (v2) {
        break;
      }
      pthread_yield_np();
    }

    sub_10002A4C8();
    char v3 = sub_100006EEC(v1, v2, 0LL);
    sub_10001EDD8();
  }

  while ((v3 & 1) == 0);
  sub_10002A4C8();
  swift_unknownObjectRetain(v2);
  int v4 = sub_100006EEC(v1, 0LL, v2);
  sub_10001EDD8();
  if (v4) {
    sub_1000193B8();
  }
  else {
    __break(1u);
  }
}

uint64_t AtomicBox.store(_:)(unint64_t a1)
{
  return swift_unknownObjectRelease(v1);
}

uint64_t sub_100080C44@<X0>(char *a1@<X8>)
{
  return sub_1000809CC(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_100080C64(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 == 1 || !*(_BYTE *)(a1 + 8))
    {
      if (*(void *)a1) {
        int v2 = -1;
      }
      else {
        int v2 = 0;
      }
    }

    else
    {
      int v2 = *(_DWORD *)a1 + 1;
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_100080CA0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)uint64_t result = a2 - 2;
    if (a3 >= 2) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 2) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for UnsafeEmbeddedAtomic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnsafeEmbeddedAtomic);
}

uint64_t sub_100080CE8(uint64_t a1)
{
  int v2 = (char *)&value witness table for Builtin.RawPointer + 64;
  return swift_initClassMetadata2(a1, 0LL, 1LL, &v2, a1 + 96);
}

uint64_t type metadata accessor for Atomic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Atomic);
}

uint64_t sub_100080D38(uint64_t a1)
{
  int v2 = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2(a1, 0LL, 1LL, &v2, a1 + 88);
}

uint64_t type metadata accessor for AtomicBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AtomicBox);
}

uint64_t sub_100080D88(uint64_t (*a1)(uint64_t, uint64_t))
{
  return a1(v1, v2);
}

uint64_t sub_100080DA0@<X0>( uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t (*a3)(uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2);
}

uint64_t sub_100080DB0@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t (*a3)(uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2);
}

uint64_t sub_100080DC0()
{
  return swift_allocObject(v0, 24LL, 7LL);
}

uint64_t sub_100080DD4()
{
  return v0;
}

  ;
}

uint64_t sub_100080DF4()
{
  unint64_t v0 = sub_100029C98();
  uint64_t v1 = swift_allocError(&type metadata for ChannelError, v0, 0LL, 0LL);
  sub_100081418(v1, v2);
  return swift_willThrow(v3);
}

uint64_t sub_100080E3C(uint64_t result)
{
  if (result)
  {
    unint64_t v2 = sub_100029C98();
    uint64_t v3 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v2);
    sub_10008142C(v3, v4);
    sub_10002A3E4();
    swift_errorRelease(v1);
    return sub_10002A5D4(v1);
  }

  return result;
}

void sub_100080E84(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    unint64_t v3 = sub_100029C98();
    uint64_t v4 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v3);
    sub_10008142C(v4, v5);
    sub_10002A3E4();
    swift_errorRelease(v2);
    sub_10002A5D4(v2);
  }

void sub_100080ECC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    unint64_t v3 = sub_100029C98();
    uint64_t v4 = swift_allocError(&type metadata for ChannelError, v3, 0LL, 0LL);
    *(void *)uint64_t v5 = 2LL;
    *(_BYTE *)(v5 + 8) = 3;
    swift_errorRetain(v4);
    sub_100098A70(v4, 1LL, a2);
    swift_errorRelease(v4);
    swift_errorRelease(v4);
  }

void sub_100080F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    unint64_t v4 = sub_100029C98();
    uint64_t v5 = swift_allocError(&type metadata for ChannelError, v4, 0LL, 0LL);
    *(void *)uint64_t v6 = 3LL;
    *(_BYTE *)(v6 + 8) = 3;
    swift_errorRetain(v5);
    sub_100098A70(v5, 1LL, a3);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
  }

void sub_100080FC0()
{
}

void sub_100081038()
{
}

uint64_t NIOCloseOnErrorHandler.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t type metadata accessor for DeadChannelCore()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCServiceP33_D2196584F17729B2C98B9A4CA319743815DeadChannelCore);
}

uint64_t sub_1000810E0()
{
  return sub_100080DF4();
}

uint64_t sub_1000810F4(uint64_t a1)
{
  return sub_100080E3C(a1);
}

void sub_100081108(uint64_t a1, uint64_t a2)
{
}

void sub_10008112C()
{
}

uint64_t sub_100081180(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DeadChannelCore();
  *(void *)(v1 + 4sub_10006F0B8(12LL, 0) = 0LL;
  *(void *)(v1 + 48) = 0LL;
  *(_WORD *)(v1 + 5sub_100019F7C(v0 + 6) = 0;
  *(void *)(v1 + 6sub_100019F7C(v0 + 4) = swift_allocObject(v3, 16LL, 7LL);
  *(void *)(v1 + 7sub_100019F7C(v0 + 2) = &off_10027D660;
  *(void *)(v1 + 3sub_100019F7C(v0 + 2) = a1;
  __int128 v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 1sub_100019F7C(v0 + 6) = v4;
  swift_unknownObjectRetain(v4);
  return v1;
}

uint64_t sub_1000811DC()
{
  unint64_t v1 = sub_100029C98();
  uint64_t v2 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v1);
  sub_100081418(v2, v3);
  uint64_t v4 = EventLoop.makeFailedFuture<A>(_:file:line:)();
  swift_errorRelease(v2);
  return v4;
}

uint64_t sub_100081268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v6 = *(void *)(v3 + 24);
  uint64_t ObjectType = swift_getObjectType(v7);
  unint64_t v9 = sub_100029C98();
  uint64_t v10 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v9);
  sub_100081418(v10, v11);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a3,  a2,  &protocol requirements base descriptor for ChannelOption,  &associated type descriptor for ChannelOption.Value);
  uint64_t v13 = EventLoop.makeFailedFuture<A>(_:file:line:)( v10,  "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/DeadChannel.swift",  113LL,  2LL,  111LL,  ObjectType,  AssociatedTypeWitness,  v6);
  swift_errorRelease(v10);
  return v13;
}

void *sub_100081320()
{
  return v0;
}

uint64_t sub_100081354()
{
  return swift_deallocClassInstance(v0, 80LL, 7LL);
}

uint64_t type metadata accessor for DeadChannel()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService11DeadChannel);
}

uint64_t ChannelHandlerContext.pipeline.getter()
{
  return swift_retain(*(void *)(v0 + 32));
}

uint64_t sub_1000813A0()
{
  return swift_unknownObjectRetain(*(void *)(v0 + 40));
}

uint64_t sub_1000813CC()
{
  return swift_unknownObjectRetain(*(void *)(v0 + 64));
}

uint64_t sub_1000813F0()
{
  return swift_unknownObjectRetain(*(void *)(*(void *)v0 + 16LL));
}

void sub_100081418(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = 2LL;
  *(_BYTE *)(a2 + 8) = 3;
}

uint64_t sub_10008142C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = 2LL;
  *(_BYTE *)(a2 + 8) = 3;
  return swift_errorRetain(a1);
}

uint64_t sub_100081444()
{
  unint64_t v1 = v0;
  uint64_t v2 = (void *)v0[24];
  if (!v2)
  {
    uint64_t v16 = v0[11];
    uint64_t v17 = type metadata accessor for OctaneSubscription();
    uint64_t v18 = swift_dynamicCastClass(v16, v17);
    if (v18)
    {
      uint64_t v19 = v18;
      *(void *)__int128 __dst = 0LL;
      unint64_t v144 = 0xE000000000000000LL;
      swift_retain();
      _StringGuts.grow(_:)(78LL);
      v20._countAndFlagsBits = 0x6269726373627553LL;
      v20._object = (void *)0xAE00A0C26F742065LL;
      String.append(_:)(v20);
      uint64_t v21 = v0[13];
      uint64_t v22 = sub_100077D1C();
      uint64_t v23 = sub_1000CC010(v22);
      sub_10001A420();
      if (v23)
      {
        sub_1000819D0();
        if (v24)
        {
          sub_100077D1C();
          int v25 = sub_100024F0C();
LABEL_13:
          sub_1000819F0( v25,  v26,  v27,  v28,  v29,  v30,  v31,  v32,  v96,  v99,  v102,  v105,  v108,  v111,  v114,  v117,  v120,  v124,  v128,  v132,  v136,  0);
          sub_10001A420();
          v40._object = (void *)0x800000010021AB80LL;
          v40._countAndFlagsBits = 0x1000000000000034LL;
          String.append(_:)(v40);
          v157._countAndFlagsBits = sub_1001BE548(*(_BYTE *)(v19 + 184));
          sub_1000819E8(v157);
          swift_bridgeObjectRelease();
          sub_1000819A8();
          sub_1001BA8BC();
          uint64_t v42 = v41;
          uint64_t v44 = v43;
          if (*(_BYTE *)(v16 + 112) == 3) {
            uint64_t v45 = 1LL;
          }
          else {
            uint64_t v45 = v1[38];
          }
          if (v45 <= 1) {
            Swift::Int v46 = 1LL;
          }
          else {
            Swift::Int v46 = v45;
          }
          NSDecimal.init(_:)((NSDecimal *)v45, v46);
          uint64_t v47 = sub_100081A08();
          uint64_t v51 = static NSDecimal.* infix(_:_:)(v47, v42, v44, v48, v49, v50);
          uint64_t v53 = v52;
          unsigned int v55 = v54;
          sub_1000819C0( v51,  v52,  v54,  v56,  v57,  v58,  v59,  v60,  v97,  v100,  v103,  v106,  v109,  v112,  v115,  v118,  v122,  v126,  v130,  v134,  v138,  v140,  0xE000000000000000LL,  __dst[0]);
          v158._countAndFlagsBits = sub_100043804(v51, v53, v55, (uint64_t)__dst, v21);
          sub_1000819E8(v158);
          swift_bridgeObjectRelease();
          sub_100081A00(46LL);
          swift_release();
LABEL_33:
          uint64_t v15 = *(void *)v141;
          goto LABEL_34;
        }

        sub_100024F0C();
      }

      int v25 = sub_1001BA868();
      goto LABEL_13;
    }

    if (qword_1002A8D18 != -1) {
      swift_once(&qword_1002A8D18, sub_10011AE58);
    }
    __int128 v33 = (void *)qword_1002EB980;
    uint64_t v34 = v1[38];
    id v35 = [objc_allocWithZone(NSNumber) initWithInteger:v34];
    id v36 = [v33 stringFromNumber:v35];

    if (v36)
    {
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      uint64_t v39 = v38;
    }

    else
    {
      uint64_t v39 = (void *)0xE300000000000000LL;
      uint64_t v37 = 6647407LL;
    }

    *(void *)__int128 __dst = 0LL;
    unint64_t v144 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(32LL);
    swift_bridgeObjectRelease();
    v61._countAndFlagsBits = v37;
    v61._object = v39;
    String.append(_:)(v61);
    swift_bridgeObjectRelease();
    sub_100081A00(32LL);
    uint64_t v62 = v1[13];
    uint64_t v63 = sub_100077D1C();
    uint64_t v64 = sub_1000CC010(v63);
    sub_10001A420();
    if (v64)
    {
      sub_1000819D0();
      if (v65)
      {
        sub_100077D1C();
        int v66 = sub_100024F0C();
LABEL_26:
        sub_1000819F0( v66,  v67,  v68,  v69,  v70,  v71,  v72,  v73,  v96,  v99,  v102,  v105,  v108,  v111,  v114,  v117,  v120,  v124,  v128,  v132,  v136,  19);
        sub_10001A420();
        sub_1000819A8();
        sub_1001BA8BC();
        uint64_t v75 = v74;
        uint64_t v77 = v76;
        uint64_t v78 = (NSDecimal *)*(unsigned __int8 *)(v16 + 112);
        if (v34 <= 1) {
          uint64_t v79 = 1LL;
        }
        else {
          uint64_t v79 = v34;
        }
        if ((_DWORD)v78 == 3) {
          Swift::Int v80 = 1LL;
        }
        else {
          Swift::Int v80 = v79;
        }
        NSDecimal.init(_:)(v78, v80);
        uint64_t v81 = sub_100081A08();
        uint64_t v85 = static NSDecimal.* infix(_:_:)(v81, v75, v77, v82, v83, v84);
        uint64_t v87 = v86;
        unsigned int v89 = v88;
        sub_1000819C0( v85,  v86,  v88,  v90,  v91,  v92,  v93,  v94,  v98,  v101,  v104,  v107,  v110,  v113,  v116,  v119,  v123,  v127,  v131,  v135,  v139,  v142,  0x800000010021AB40LL,  __dst[0]);
        v159._countAndFlagsBits = sub_100043804(v85, v87, v89, (uint64_t)__dst, v62);
        sub_1000819E8(v159);
        swift_bridgeObjectRelease();
        sub_100081A00(63LL);
        goto LABEL_33;
      }

      sub_100024F0C();
    }

    int v66 = sub_1001BA868();
    goto LABEL_26;
  }

  uint64_t v3 = v0[37];
  uint64_t v4 = v0[35];
  uint64_t v121 = v0[36];
  uint64_t v125 = v0[34];
  uint64_t v5 = v0[32];
  uint64_t v6 = v0[33];
  uint64_t v7 = v0[31];
  uint64_t v137 = v1[30];
  uint64_t v8 = v1[29];
  uint64_t v129 = v5;
  uint64_t v133 = v1[28];
  uint64_t v10 = v1[26];
  uint64_t v9 = v1[27];
  unint64_t v11 = v1[25];
  *(void *)__int128 __dst = v2;
  unint64_t v144 = v11;
  uint64_t v145 = v10;
  uint64_t v146 = v9;
  uint64_t v147 = v133;
  uint64_t v148 = v8;
  uint64_t v149 = v137;
  uint64_t v150 = v7;
  uint64_t v151 = v5;
  uint64_t v152 = v6;
  uint64_t v153 = v125;
  uint64_t v154 = v4;
  uint64_t v155 = v121;
  uint64_t v156 = v3;
  id v12 = v2;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100077D1C();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_1001688D4();
  uint64_t v14 = v11;
  uint64_t v15 = v13;
  sub_100081910(v2, v14, v10, v9, v133, v8, v137, v7, v129, v6, v125, v4, v121, v3);
LABEL_34:
  _StringGuts.grow(_:)(24LL);
  swift_bridgeObjectRelease();
  v160._countAndFlagsBits = 0xD000000000000016LL;
  v160._object = (void *)0x800000010021AB60LL;
  sub_1000819E8(v160);
  return v15;
}

void *sub_100081910( void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (result)
  {

    swift_release(a2);
    swift_release(a3);
    swift_release(a4);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a10);
    swift_bridgeObjectRelease(a12);
    return (void *)swift_bridgeObjectRelease(a14);
  }

  return result;
}

void sub_1000819A8()
{
  v0._countAndFlagsBits = 0x20726F6620LL;
  v0._object = (void *)0xE500000000000000LL;
  String.append(_:)(v0);
}

void *sub_1000819C0( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char __dst)
{
  return memcpy(&__dst, (const void *)(v24 + 112), 0x50uLL);
}

  ;
}

void sub_1000819E8(Swift::String a1)
{
}

void sub_1000819F0( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22)
{
  v24._countAndFlagsBits = v23;
  v24._object = v22;
  String.append(_:)(v24);
}

void sub_100081A00(uint64_t a1)
{
  unint64_t v1 = 0xE100000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_100081A08()
{
  return v0;
}

uint64_t sub_100081A1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for BagResponse(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v32[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (void *)((char *)&v32[-1] - v8);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1 + 88);
  if (Strong)
  {
    uint64_t v11 = Strong;
    uint64_t v12 = *(void *)(v1 + 104);
    uint64_t v13 = *(void **)(v1 + 112);
    uint64_t v14 = *(os_unfair_lock_s **)(*(void *)(Strong + 48) + 16LL);
    swift_unknownObjectRetain(Strong);
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v14);
    uint64_t v15 = *(void *)(v11 + 40);
    os_unfair_lock_unlock(v14);
    swift_unknownObjectRelease(v11);
    sub_100019F58((void *)(v2 + 48), *(void *)(v2 + 72));
    sub_100075D10(v32);
    uint64_t v16 = sub_100019F58((void *)(v2 + 48), *(void *)(v2 + 72));
    uint64_t v17 = *v16;
    uint64_t v18 = *(os_unfair_lock_s **)(*(void *)(*v16 + 24LL) + 16LL);
    swift_retain();
    os_unfair_lock_lock(v18);
    uint64_t v19 = *(void *)(v17 + 128);
    swift_retain();
    os_unfair_lock_unlock(v18);
    swift_release();
    sub_10001A8E0(v12, v13, v15, (uint64_t)v32, v19, v9);
    sub_10001D3F0((uint64_t)v9, (uint64_t)v7);
    sub_1001C2060((uint64_t)v7);
    uint64_t v20 = v36;
    uint64_t v21 = v37;
    uint64_t v22 = v38;
    uint64_t v23 = v39;
    uint64_t v1 = v40;
    uint64_t v24 = v41;
    uint64_t v25 = v42;
    swift_unknownObjectRelease(v11);
    unint64_t v26 = v1 | (v24 << 32) | (v25 << 48);
    sub_10001D434((uint64_t)v9);
    sub_10001ED94();
    uint64_t v27 = sub_100049C88();
    uint64_t result = sub_10001ED7C(v27);
    uint64_t v29 = 3LL;
  }

  else
  {
    sub_1000ACB64(0xD000000000000017LL, 0x800000010021ABF0LL, 6u, (uint64_t)v32);
    uint64_t v20 = v32[0];
    uint64_t v21 = v32[1];
    uint64_t v22 = v32[2];
    uint64_t v23 = v32[3];
    unint64_t v26 = v33 | ((unint64_t)v34 << 32) | ((unint64_t)v35 << 48);
    sub_10001ED94();
    uint64_t v30 = sub_100049C88();
    uint64_t result = sub_10001ED7C(v30);
    uint64_t v29 = 49LL;
  }

  *(void *)(result + 1sub_100019F7C(v0 + 6) = 0LL;
  *(void *)(result + 2sub_100019F7C(v0 + 4) = 0LL;
  *(void *)(result + 3sub_100019F7C(v0 + 2) = v29;
  *(_DWORD *)(result + 4sub_10006F0B8(12LL, 0) = v1;
  *(void *)a1 = result;
  *(void *)(a1 + 8) = _swiftEmptyArrayStorage;
  *(_BYTE *)(a1 + 1sub_100019F7C(v0 + 6) = 2;
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = v20;
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = v21;
  *(void *)(a1 + 4sub_10006F0B8(12LL, 0) = v22;
  *(void *)(a1 + 48) = v23;
  *(_BYTE *)(a1 + 6sub_100019F7C(v0 + 2) = BYTE6(v26);
  *(_WORD *)(a1 + 6sub_10006F0B8(12LL, 0) = WORD2(v26);
  *(_DWORD *)(a1 + 5sub_100019F7C(v0 + 6) = v26;
  return result;
}

uint64_t sub_100081C60()
{
  return swift_bridgeObjectRelease();
}

void *sub_100081C7C()
{
  uint64_t v0 = sub_10007F138();
  sub_100081CEC((uint64_t)(v0 + 11));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100081CB0()
{
  uint64_t v0 = sub_100081C7C();
  return swift_deallocClassInstance(v0, 120LL, 7LL);
}

uint64_t type metadata accessor for BagRoute()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService8BagRoute);
}

uint64_t sub_100081CEC(uint64_t a1)
{
  return a1;
}

_BYTE *sub_100081D10@<X0>( _BYTE *result@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  if (a4 != a2) {
    goto LABEL_8;
  }
  if ((a4 & 0x8000000000000000LL) == 0)
  {
    if (!a4)
    {
LABEL_9:
      char v11 = 1;
      goto LABEL_10;
    }

    if (((*result ^ *a3) & 0xDF) == 0)
    {
      uint64_t v5 = a3 + 1;
      uint64_t v6 = result + 1;
      uint64_t v7 = a4 - 1;
      while (v7)
      {
        int v9 = *v5++;
        int v8 = v9;
        int v10 = *v6++;
        --v7;
        if (((v10 ^ v8) & 0xDF) != 0) {
          goto LABEL_8;
        }
      }

      goto LABEL_9;
    }

uint64_t sub_100081D78(uint64_t a1)
{
  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_100018F68(v3, (uint64_t)qword_1002EB9D0);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v7 = static os_log_type_t.error.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    int v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v13 = v9;
    *(_DWORD *)int v8 = 136315138;
    uint64_t v10 = sub_100116708(a1);
    uint64_t v12 = sub_1000CF360(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v8 + 4);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v7,  "Received unsupported ASOctaneSimulatedError %s for FailureType",  v8,  0xCu);
    swift_arrayDestroy(v9, 1LL);
    sub_10001A408(v9);
    sub_10001A408((uint64_t)v8);
  }

  return 0LL;
}

uint64_t sub_100081EF8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100081F34 + 4 * byte_1001FA900[a1]))( 0xD000000000000012LL,  0x800000010021AE50LL);
}

uint64_t sub_100081F34()
{
  return 1701736270LL;
}

uint64_t sub_100081F44()
{
  return v0 - 4;
}

unint64_t sub_100082078()
{
  return 0xD000000000000015LL;
}

uint64_t sub_100082084()
{
  return 0x6E776F6E6B6E55LL;
}

uint64_t sub_1000820B8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_100270138, a1, a2, &unk_1002A8E18);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x16) {
    return 22LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_100082108(unsigned __int8 a1)
{
  return ((uint64_t (*)())((char *)sub_100082128 + 4 * byte_1001FA916[a1]))();
}

uint64_t sub_100082128()
{
  return 808529970LL;
}

uint64_t sub_100082138()
{
  return 942878771LL;
}

uint64_t sub_100082148()
{
  return 858862899LL;
}

uint64_t sub_100082158()
{
  return 842216755LL;
}

uint64_t sub_100082168()
{
  return 892352307LL;
}

uint64_t sub_100082178()
{
  return 808597299LL;
}

uint64_t sub_100082188()
{
  return 3616825LL;
}

uint64_t sub_100082198()
{
  return 3223861LL;
}

uint64_t sub_1000821A8()
{
  return 3617589LL;
}

uint64_t sub_1000821EC()
{
  return 808792113LL;
}

uint64_t sub_1000821FC()
{
  return 875575603LL;
}

uint64_t sub_10008220C()
{
  return 808466739LL;
}

uint64_t sub_10008221C()
{
  return 825243955LL;
}

uint64_t sub_10008222C()
{
  return 842021171LL;
}

uint64_t sub_10008223C()
{
  return 858798387LL;
}

uint64_t sub_10008224C()
{
  return 892416309LL;
}

uint64_t sub_10008225C()
{
  return 960051513LL;
}

uint64_t sub_10008226C()
{
  return 0x3039393939LL;
}

void sub_100082280(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_10008228C()
{
}

uint64_t sub_100082294(uint64_t a1)
{
  return sub_1000B2844(a1, *v1);
}

void sub_10008229C(uint64_t a1)
{
}

uint64_t sub_1000822A4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000820B8(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_1000822D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100082108(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000822F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100082A7C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100082354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100082A7C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t *sub_1000823A0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v13);
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v14 = type metadata accessor for URL(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 16LL))(a1, a2, v14);
      uint64_t v10 = a1;
      uint64_t v11 = a3;
      uint64_t v12 = 1LL;
    }

    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(v5 + 64));
        return a1;
      }

      uint64_t v9 = type metadata accessor for URL(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16LL))(a1, a2, v9);
      uint64_t v10 = a1;
      uint64_t v11 = a3;
      uint64_t v12 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }

  return a1;
}

uint64_t sub_100082488(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if (result <= 1)
  {
    uint64_t v4 = type metadata accessor for URL(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  }

  return result;
}

void *sub_1000824D4(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v11 = type metadata accessor for URL(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
    int v8 = a1;
    uint64_t v9 = a3;
    uint64_t v10 = 1LL;
  }

  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      return a1;
    }

    uint64_t v7 = type metadata accessor for URL(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    int v8 = a1;
    uint64_t v9 = a3;
    uint64_t v10 = 0LL;
  }

  swift_storeEnumTagMultiPayload(v8, v9, v10);
  return a1;
}

void *sub_100082594(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100082664((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = type metadata accessor for URL(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
      int v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 1LL;
    }

    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        return a1;
      }

      uint64_t v7 = type metadata accessor for URL(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      int v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }

  return a1;
}

uint64_t sub_100082664(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OctaneError(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for OctaneError(uint64_t a1)
{
  uint64_t result = qword_1002AE2E0;
  if (!qword_1002AE2E0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OctaneError);
  }
  return result;
}

void *sub_1000826D8(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v11 = type metadata accessor for URL(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32LL))(a1, a2, v11);
    int v8 = a1;
    uint64_t v9 = a3;
    uint64_t v10 = 1LL;
  }

  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      return a1;
    }

    uint64_t v7 = type metadata accessor for URL(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
    int v8 = a1;
    uint64_t v9 = a3;
    uint64_t v10 = 0LL;
  }

  swift_storeEnumTagMultiPayload(v8, v9, v10);
  return a1;
}

void *sub_100082798(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100082664((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = type metadata accessor for URL(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32LL))(a1, a2, v11);
      int v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 1LL;
    }

    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        return a1;
      }

      uint64_t v7 = type metadata accessor for URL(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
      int v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }

  return a1;
}

uint64_t sub_100082874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_100082884(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = v4[0];
    swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v4);
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for FailureType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xEB)
  {
    if (a2 + 21 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 21) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 22;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for FailureType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 21 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 21) >> 8 < 0xFF) {
    LODWORD(vsub_100019F7C(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100019F7C(v0 + 4) = v3;
  }
  if (a3 >= 0xEB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xEA) {
    return ((uint64_t (*)(void))((char *)&loc_1000829BC + 4 * byte_1001FA931[v4]))();
  }
  *a1 = a2 + 21;
  return ((uint64_t (*)(void))((char *)sub_1000829F0 + 4 * byte_1001FA92C[v4]))();
}

uint64_t sub_1000829F0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000829F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100082A00LL);
  }
  return result;
}

uint64_t sub_100082A0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100082A14LL);
  }
  *(_BYTE *)uint64_t result = a2 + 21;
  return result;
}

uint64_t sub_100082A18(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100082A20(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FailureType()
{
  return &type metadata for FailureType;
}

unint64_t sub_100082A40()
{
  unint64_t result = qword_1002AE318;
  if (!qword_1002AE318)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FAA14, &type metadata for FailureType);
    atomic_store(result, (unint64_t *)&qword_1002AE318);
  }

  return result;
}

unint64_t sub_100082A7C()
{
  unint64_t result = qword_1002AE320;
  if (!qword_1002AE320)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FA99C, &type metadata for FailureType);
    atomic_store(result, (unint64_t *)&qword_1002AE320);
  }

  return result;
}

BOOL static FileRegion.== infix(_:_:)( BOOL result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (result != a4 || ((a6 ^ a3) & 0xFFFFFFFFFFFFFFLL) != 0) {
    return 0LL;
  }
  if (((a5 | a2) & 0x8000000000000000LL) == 0) {
    return a2 == a5;
  }
  __break(1u);
  return result;
}

uint64_t FileRegion.readableBytes.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a2 & 0x8000000000000000LL) == 0) {
    return a2 - (a3 & 0xFFFFFFFFFFFFFFLL);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall FileRegion.moveReaderIndex(forwardBy:)(Swift::Int forwardBy)
{
  unint64_t v2 = ((unint64_t)*(unsigned __int8 *)(v1 + 22) << 48) | ((unint64_t)*(unsigned __int16 *)(v1 + 20) << 32) | *(unsigned int *)(v1 + 16);
  BOOL v3 = __OFADD__(v2, forwardBy);
  uint64_t v4 = v2 + forwardBy;
  if (v3)
  {
    __break(1u);
  }

  else if ((v4 & 0x8000000000000000LL) == 0)
  {
    uint64_t v5 = static IntegerBitPacking.unpackUInt32UInt16UInt8(_:)(v4);
    ByteBuffer._slice.setter(v5);
    return;
  }

  sub_100083070();
  sub_100083058( (uint64_t)"Fatal error",  v6,  v7,  (uint64_t)"Negative value is not representable",  v8,  v9,  (uint64_t)"Swift/Integers.swift");
  __break(1u);
}

uint64_t sub_100082B6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = FileRegion.readerIndex.getter( a1,  a2,  *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int16 *)(a1 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 22) << 48));
  *a3 = result;
  return result;
}

uint64_t sub_100082BA4(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_100083070();
    uint64_t result = sub_100083058( (uint64_t)"Fatal error",  v3,  v4,  (uint64_t)"Negative value is not representable",  v5,  v6,  (uint64_t)"Swift/Integers.swift");
    __break(1u);
  }

  else
  {
    uint64_t v1 = static IntegerBitPacking.unpackUInt32UInt16UInt8(_:)(a1);
    return ByteBuffer._slice.setter(v1);
  }

  return result;
}

uint64_t FileRegion.endIndex.getter(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x8000000000000000LL) == 0) {
    return a2;
  }
  __break(1u);
  return result;
}

uint64_t FileRegion.init(fileHandle:readerIndex:endIndex:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < a2)
  {
    __break(1u);
  }

  else if ((a2 & 0x8000000000000000LL) == 0)
  {
    static IntegerBitPacking.unpackUInt32UInt16UInt8(_:)(a2);
    return a1;
  }

  sub_100083070();
  uint64_t result = sub_100083058( (uint64_t)"Fatal error",  v5,  v6,  (uint64_t)"Negative value is not representable",  v7,  v8,  (uint64_t)"Swift/Integers.swift");
  __break(1u);
  return result;
}

uint64_t FileRegion.init(fileHandle:)(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16) == 1)
  {
    int v3 = *(_DWORD *)(a1 + 20);
    off_t v4 = sub_10002513C(v3, 0LL, 2);
    if (!v1)
    {
      uint64_t v5 = v4;
      sub_10002513C(v3, 0LL, 0);
      return FileRegion.init(fileHandle:readerIndex:endIndex:)(a1, 0LL, v5);
    }
  }

  else
  {
    unint64_t v7 = sub_100025100();
    uint64_t v8 = swift_allocError(&type metadata for IOError, v7, 0LL, 0LL);
    *(void *)uint64_t v9 = 0xD00000000000001FLL;
    *(void *)(v9 + 8) = 0x80000001002194A0LL;
    *(_DWORD *)(v9 + 1sub_100019F7C(v0 + 6) = 9;
    swift_willThrow(v8);
  }

  return swift_release();
}

BOOL sub_100082D6C(uint64_t a1, uint64_t a2)
{
  return static FileRegion.== infix(_:_:)( *(void *)a1,  *(void *)(a1 + 8),  *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int16 *)(a1 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 22) << 48),  *(void *)a2,  *(void *)(a2 + 8),  *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned __int16 *)(a2 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 22) << 48));
}

void FileRegion.description.getter(uint64_t a1, uint64_t a2)
{
  v4._object = (void *)0x800000010021AE70LL;
  v4._countAndFlagsBits = 0xD000000000000015LL;
  String.append(_:)(v4);
  swift_retain();
  v8._countAndFlagsBits = NIOFileHandle.description.getter();
  sub_100083088(v8);
  swift_release(a1);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x726564616572202CLL;
  v5._object = (void *)0xEF203A7865646E49LL;
  String.append(_:)(v5);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  sub_100083088(v9);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x646E49646E65202CLL;
  v6._object = (void *)0xEC000000203A7865LL;
  String.append(_:)(v6);
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    sub_100083088(v10);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = 32032LL;
    v7._object = (void *)0xE200000000000000LL;
    String.append(_:)(v7);
  }

void sub_100082F0C()
{
}

uint64_t sub_100082F2C(uint64_t *a1)
{
  return sub_100082BA4(*a1);
}

uint64_t sub_100082F54(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 1sub_100019F7C(v0 + 6) = *((_DWORD *)a2 + 4);
  *(_DWORD *)(a1 + 19) = *(_DWORD *)((char *)a2 + 19);
  swift_retain(v3);
  return a1;
}

uint64_t *assignWithCopy for FileRegion(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  a1[1] = a2[1];
  *((_DWORD *)a1 + sub_100019F7C(v0 + 4) = *((_DWORD *)a2 + 4);
  *((_WORD *)a1 + 1sub_10006F0B8(12LL, 0) = *((_WORD *)a2 + 10);
  *((_BYTE *)a1 + 2sub_100019F7C(v0 + 2) = *((_BYTE *)a2 + 22);
  return a1;
}

uint64_t *assignWithTake for FileRegion(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  *((_DWORD *)a1 + sub_100019F7C(v0 + 4) = *((_DWORD *)a2 + 4);
  *((_WORD *)a1 + 1sub_10006F0B8(12LL, 0) = *((_WORD *)a2 + 10);
  *((_BYTE *)a1 + 2sub_100019F7C(v0 + 2) = *((_BYTE *)a2 + 22);
  return a1;
}

ValueMetadata *type metadata accessor for FileRegion()
{
  return &type metadata for FileRegion;
}

uint64_t sub_100083058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, 35LL, 2LL, a7, 20LL);
}

  ;
}

void sub_100083088(Swift::String a1)
{
}

void sub_100083094(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2) {
    String.subscript.getter(15LL, a1, a2);
  }
  else {
    _s25ASOctaneSupportXPCService17EventLoopIteratorVyACSayAA0dE0_pGcfC_0();
  }
}

void sub_1000830D0(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  swift_unknownObjectRetain(v3);
  swift_unknownObjectRetain(v5);
  LOBYTE(sub_100079EEC(0LL, (uint64_t)&type metadata for Int, v6) = static AnyIndex.== infix(_:_:)(v3, v4, v5, v6);
  swift_unknownObjectRelease(v5);
  if ((v6 & 1) != 0)
  {
    swift_unknownObjectRelease(v3);
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
    sub_10002A3D4();
  }

  else
  {
    dispatch thunk of _AnyCollectionBox.subscript.getter(v3, v4);
    swift_unknownObjectRelease(v3);
  }

double sub_10008316C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  if (*(void *)(a1 + 16))
  {
    sub_10008500C(a1 + 32, (uint64_t)a2);
  }

  else
  {
    double result = 0.0;
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
  }

  return result;
}

uint64_t sub_100083190(uint64_t a1)
{
  if (*(void *)(a1 + 16)) {
    return swift_retain(*(void *)(a1 + 32));
  }
  else {
    return 0LL;
  }
}

void sub_1000831B8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  if (v1 != v2)
  {
    if (v1 < v2)
    {
      if ((sub_100060EBC( *(void *)(v0 + 24),  0LL,  *(void *)v0,  *(void *)(v0 + 8),  *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int16 *)(v0 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 22) << 48)) & 0x100) == 0) {
        return;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

uint64_t sub_100083238@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for IAPTransaction(0LL);
  uint64_t v6 = v5;
  if (v4)
  {
    uint64_t v7 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL);
    sub_100084FC8(a1 + ((v7 + 32) & ~v7), a2);
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v8 = 1LL;
  }

  return sub_10001762C(a2, v8, 1LL, v6);
}

void NIOAny.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (char *)v9 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100085164((uint64_t)v8, a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  NIOAny._NIOAny.init<A>(_:)((uint64_t)v8, a2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, a2);
  sub_100083804(v9, v2);
  sub_10002A3D4();
}

uint64_t NIOAny.forceAs<A>(type:)@<X0>(ValueMetadata *a1@<X1>, uint64_t a2@<X8>)
{
  if (a1 == &type metadata for ByteBuffer)
  {
    NIOAny.forceAsByteBuffer()();
    uint64_t v23 = v5;
    uint64_t v24 = v6;
    int v25 = v7;
    __int16 v26 = v8;
    char v27 = v9;
    Swift::String v10 = &type metadata for ByteBuffer;
LABEL_9:
    uint64_t v21 = a2;
    uint64_t v22 = (uint64_t)v10;
    return sub_10006B934(v21, (uint64_t)&v23, (uint64_t)v10, v22);
  }

  if (a1 == &type metadata for FileRegion)
  {
    NIOAny.forceAsFileRegion()();
    uint64_t v23 = v11;
    uint64_t v24 = v12;
    int v25 = v13;
    __int16 v26 = v14;
    char v27 = v15;
    Swift::String v10 = &type metadata for FileRegion;
    goto LABEL_9;
  }

  if (a1 == &type metadata for IOData)
  {
    NIOAny.forceAsIOData()();
    uint64_t v23 = v16;
    uint64_t v24 = v17;
    int v25 = v18;
    char v27 = v19;
    __int16 v26 = v20;
    Swift::String v10 = &type metadata for IOData;
    goto LABEL_9;
  }

  if ((ValueMetadata *)sub_1000175B0(&qword_1002AA4B8) != a1) {
    return NIOAny.forceAsOther<A>(type:)((uint64_t)a1, a2);
  }
  NIOAny.forceAsByteEnvelope()((uint64_t)&v23);
  uint64_t v21 = a2;
  Swift::String v10 = a1;
  uint64_t v22 = (uint64_t)a1;
  return sub_10006B934(v21, (uint64_t)&v23, (uint64_t)v10, v22);
}

uint64_t NIOAny.tryAs<A>(type:)@<X0>( uint64_t a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  if (a2 != &type metadata for ByteBuffer)
  {
    if (a2 == &type metadata for FileRegion)
    {
      NIOAny.tryAsFileRegion()(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      if (!v24)
      {
        int v31 = &type metadata for FileRegion;
        return sub_10001762C(a9, 1LL, 1LL, (uint64_t)v31);
      }

      *(void *)&__int128 v36 = v24;
      *((void *)&v36 + 1) = v25;
      LODWORD(v37) = v26;
      WORD2(v37) = WORD2(v26);
      BYTE6(v37) = BYTE6(v26);
      char v27 = &type metadata for FileRegion;
    }

    else
    {
      if (a2 != &type metadata for IOData)
      {
        if ((ValueMetadata *)sub_1000175B0(&qword_1002AA4B8) != a2) {
          return NIOAny.tryAsOther<A>(type:)((uint64_t)a2, a9);
        }
        NIOAny.tryAsByteEnvelope()((uint64_t)v43);
        sub_100084258((uint64_t)v43, (uint64_t)&v36);
        if (*((void *)&v36 + 1))
        {
          v41[0] = v36;
          v41[1] = v37;
          v41[2] = v38;
          uint64_t v42 = v39;
          sub_10006B934(a9, (uint64_t)v41, (uint64_t)a2, (uint64_t)a2);
          uint64_t v22 = a9;
          uint64_t v23 = 0LL;
        }

        else
        {
          uint64_t v22 = a9;
          uint64_t v23 = 1LL;
        }

        uint64_t v21 = a2;
        return sub_10001762C(v22, v23, 1LL, (uint64_t)v21);
      }

      NIOAny.tryAsIOData()(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      if ((~v28 & 0xF000000000000007LL) == 0)
      {
        int v31 = &type metadata for IOData;
        return sub_10001762C(a9, 1LL, 1LL, (uint64_t)v31);
      }

      *(void *)&__int128 v36 = v28;
      *((void *)&v36 + 1) = v29;
      LODWORD(v37) = v30;
      BYTE6(v37) = BYTE6(v30);
      WORD2(v37) = WORD2(v30);
      char v27 = &type metadata for IOData;
    }

    unsigned __int8 v35 = &v36;
    goto LABEL_21;
  }

  uint64_t v13 = sub_1000346EC(v9, (uint64_t)&v36);
  if (v40)
  {
    sub_10008512C(v13, v14, v15, v16, v17, v18, v19, v20, v36);
  }

  else
  {
    uint64_t v32 = sub_100085070(v13, v14, v15, v16, v17, v18, v19, v20, v36);
    if ((v32 & 0x8000000000000000LL) == 0)
    {
      v43[0] = v32;
      v43[1] = v33;
      int v44 = v34;
      __int16 v45 = WORD2(v34);
      char v46 = BYTE6(v34);
      char v27 = &type metadata for ByteBuffer;
      unsigned __int8 v35 = (__int128 *)v43;
LABEL_21:
      sub_10006B934(a9, (uint64_t)v35, (uint64_t)v27, (uint64_t)v27);
      uint64_t v22 = a9;
      uint64_t v23 = 0LL;
      uint64_t v21 = v27;
      return sub_10001762C(v22, v23, 1LL, (uint64_t)v21);
    }

    sub_100018F04(v32);
  }

  uint64_t v21 = &type metadata for ByteBuffer;
  uint64_t v22 = a9;
  uint64_t v23 = 1LL;
  return sub_10001762C(v22, v23, 1LL, (uint64_t)v21);
}

uint64_t NIOAny._storage.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000346EC(v1, a1);
}

void NIOAny._NIOAny.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  __int16 v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100085164((uint64_t)v8, a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  uint64_t v12 = sub_10008508C(v9, v10, v11, (uint64_t)&type metadata for ByteBuffer);
  if ((_DWORD)v12)
  {
    sub_100085054();
    sub_10008516C();
LABEL_5:
    *(void *)uint64_t v2 = v15;
    *(void *)(v2 + 8) = v16;
    *(_BYTE *)(v2 + 2sub_100019F7C(v0 + 2) = v19;
    *(_WORD *)(v2 + 2sub_10006F0B8(12LL, 0) = v18;
    *(_DWORD *)(v2 + 1sub_100019F7C(v0 + 6) = v17;
LABEL_6:
    *(_BYTE *)(v2 + 5sub_100019F7C(v0 + 6) = 0;
    goto LABEL_7;
  }

  uint64_t v20 = sub_10008508C(v12, v13, v14, (uint64_t)&type metadata for FileRegion);
  if ((_DWORD)v20)
  {
    sub_100085054();
    sub_10008516C();
    unint64_t v15 = v23 | 0x8000000000000000LL;
    goto LABEL_5;
  }

  if (sub_10008508C(v20, v21, v22, (uint64_t)&type metadata for IOData))
  {
    sub_100085054();
    __int16 v24 = WORD2(v37);
    int v25 = v37;
    *(_OWORD *)uint64_t v2 = v36;
    *(_WORD *)(v2 + 2sub_10006F0B8(12LL, 0) = v24;
    *(_DWORD *)(v2 + 1sub_100019F7C(v0 + 6) = v25;
    *(_BYTE *)(v2 + 2sub_100019F7C(v0 + 2) = BYTE6(v37);
    goto LABEL_6;
  }

  uint64_t v26 = sub_1000175B0(&qword_1002AA4B8);
  if (sub_10008508C(v26, v27, v28, v26))
  {
    sub_100085054();
    sub_10008513C();
    *(void *)uint64_t v2 = v29;
    *(void *)(v2 + 8) = v30;
    *(void *)(v2 + 1sub_100019F7C(v0 + 6) = v37;
    *(_DWORD *)(v2 + 2sub_100019F7C(v0 + 4) = v31;
    *(_WORD *)(v2 + 28) = v32;
    *(_BYTE *)(v2 + 3sub_10006F0B8(12LL, 0) = v33;
    *(_OWORD *)(v2 + 3sub_100019F7C(v0 + 2) = v38;
    *(void *)(v2 + 48) = v34;
    *(_BYTE *)(v2 + 5sub_100019F7C(v0 + 6) = 1;
  }

  else
  {
    *(void *)(v2 + 2sub_100019F7C(v0 + 4) = a2;
    unsigned __int8 v35 = sub_10005F580((void *)v2);
    sub_100085164((uint64_t)v35, a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
    *(_BYTE *)(v2 + 5sub_100019F7C(v0 + 6) = 2;
  }

_OWORD *sub_100083804(__int128 *a1, _OWORD *a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  __int128 v4 = a1[2];
  *(_OWORD *)((char *)a2 + 41) = *(__int128 *)((char *)a1 + 41);
  a2[1] = v3;
  a2[2] = v4;
  *a2 = v2;
  return a2;
}

void NIOAny.tryAsByteBuffer()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = sub_100085120(a1, a2, a3, a4, a5, a6, a7, a8, v17);
  if (v19)
  {
    sub_10008512C(v8, v9, v10, v11, v12, v13, v14, v15, v18);
  }

  else
  {
    uint64_t v16 = sub_100085070(v8, v9, v10, v11, v12, v13, v14, v15, v18);
    if (v16 < 0) {
      sub_100018F04(v16);
    }
  }

  sub_100069A2C();
}

void NIOAny.forceAsByteBuffer()()
{
  if (v11)
  {
    sub_10008515C();
    goto LABEL_6;
  }

  uint64_t v3 = sub_1000850D0();
  if (v3 < 0)
  {
    sub_100018F04(v3);
LABEL_6:
    sub_100085114();
    sub_1000354D8();
    sub_100085194();
    sub_1000850B8((uint64_t)"tried to decode as type ");
    v4._countAndFlagsBits = 0x6666754265747942LL;
    v4._object = (void *)0xEA00000000007265LL;
    String.append(_:)(v4);
    sub_1000350DC();
    uint64_t v5 = sub_1000850EC((uint64_t)&unk_10027D8F8);
    sub_1000355AC(v5);
    sub_1000850F8();
    sub_10003557C();
    sub_100085054();
    sub_100035594();
    sub_100024F0C();
    if (!v10) {
      __break(1u);
    }
    sub_100085154();
    sub_100035368();
    sub_100035574();
    sub_100035324(v0);
    v12._countAndFlagsBits = sub_1000353B4();
    sub_1000356B8(v12);
    sub_100019390();
    sub_100035084();
    sub_1000356AC();
    sub_100085104();
    sub_1000351EC((uint64_t)"Fatal error", v6, v7, v8, v9, (uint64_t)"ASOctaneSupportXPCService/NIOAny.swift");
    sub_10003566C();
  }

  sub_10002A3D4();
}

void NIOAny.tryAsIOData()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = sub_100085120(a1, a2, a3, a4, a5, a6, a7, a8, v16);
  if (v18) {
    sub_10008512C(v8, v9, v10, v11, v12, v13, v14, v15, v17);
  }
  else {
    sub_100085070(v8, v9, v10, v11, v12, v13, v14, v15, v17);
  }
  sub_100069A2C();
}

void NIOAny.forceAsIOData()()
{
  if (v10)
  {
    sub_10008515C();
    sub_100085114();
    sub_1000354D8();
    sub_100085194();
    sub_1000850B8((uint64_t)"tried to decode as type ");
    v3._countAndFlagsBits = 0x617461444F49LL;
    v3._object = (void *)0xE600000000000000LL;
    String.append(_:)(v3);
    sub_1000350DC();
    uint64_t v4 = sub_1000850EC((uint64_t)&unk_10027D8F8);
    sub_1000355AC(v4);
    sub_1000850F8();
    sub_10003557C();
    sub_100085054();
    sub_100035594();
    sub_100024F0C();
    if (!v9) {
      __break(1u);
    }
    sub_100085154();
    sub_100035368();
    sub_100035574();
    sub_100035324(v0);
    v11._countAndFlagsBits = sub_1000353B4();
    sub_1000356B8(v11);
    sub_100019390();
    sub_100035084();
    sub_1000356AC();
    sub_100085104();
    sub_1000351EC((uint64_t)"Fatal error", v5, v6, v7, v8, (uint64_t)"ASOctaneSupportXPCService/NIOAny.swift");
    sub_10003566C();
  }

  sub_1000850D0();
  sub_10002A3D4();
}

void NIOAny.tryAsFileRegion()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = sub_100085120(a1, a2, a3, a4, a5, a6, a7, a8, v17);
  if (v19)
  {
    sub_10008512C(v8, v9, v10, v11, v12, v13, v14, v15, v18);
  }

  else
  {
    uint64_t v16 = sub_100085070(v8, v9, v10, v11, v12, v13, v14, v15, v18);
    if ((v16 & 0x8000000000000000LL) == 0) {
      sub_100018F04(v16);
    }
  }

  sub_100069A2C();
}

void NIOAny.forceAsFileRegion()()
{
  if (v11)
  {
    sub_10008515C();
    goto LABEL_6;
  }

  uint64_t v3 = sub_1000850D0();
  if ((v3 & 0x8000000000000000LL) == 0)
  {
    sub_100018F04(v3);
LABEL_6:
    sub_100085114();
    sub_1000354D8();
    sub_100085194();
    sub_1000850B8((uint64_t)"tried to decode as type ");
    v4._countAndFlagsBits = 0x69676552656C6946LL;
    v4._object = (void *)0xEA00000000006E6FLL;
    String.append(_:)(v4);
    sub_1000350DC();
    uint64_t v5 = sub_1000850EC((uint64_t)&unk_10027D8F8);
    sub_1000355AC(v5);
    sub_1000850F8();
    sub_10003557C();
    sub_100085054();
    sub_100035594();
    sub_100024F0C();
    if (!v10) {
      __break(1u);
    }
    sub_100085154();
    sub_100035368();
    sub_100035574();
    sub_100035324(v0);
    v12._countAndFlagsBits = sub_1000353B4();
    sub_1000356B8(v12);
    sub_100019390();
    sub_100035084();
    sub_1000356AC();
    sub_100085104();
    sub_1000351EC((uint64_t)"Fatal error", v6, v7, v8, v9, (uint64_t)"ASOctaneSupportXPCService/NIOAny.swift");
    sub_10003566C();
  }

  sub_10002A3D4();
}

uint64_t NIOAny.tryAsByteEnvelope()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_1000346EC(v1, (uint64_t)v17);
  if (v23 == 1)
  {
    uint64_t v11 = v17[0];
    uint64_t v12 = v17[1];
    uint64_t v13 = v17[2];
    __int128 v14 = v21;
    uint64_t v15 = v22;
    unint64_t v16 = v18 | ((unint64_t)v19 << 32) | ((unint64_t)v20 << 48);
  }

  else
  {
    uint64_t result = sub_10008512C(result, v4, v5, v6, v7, v8, v9, v10, v17[0]);
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    unint64_t v16 = 0LL;
    uint64_t v15 = 0LL;
    __int128 v14 = 0uLL;
  }

  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v12;
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = v13;
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = v16;
  *(_OWORD *)(a1 + 3sub_100019F7C(v0 + 2) = v14;
  *(void *)(a1 + 48) = v15;
  return result;
}

double NIOAny.forceAsByteEnvelope()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1000355E4();
  __chkstk_darwin(v4);
  sub_10003518C();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v24 - v6;
  sub_1000346EC(v2, (uint64_t)v25);
  if (v28 != 1)
  {
    sub_10008515C();
    sub_10002B550(v2, (uint64_t)v25);
    sub_1000354D8();
    sub_100085194();
    sub_100035384(v17, 0x8000000100218E30LL);
    v18._countAndFlagsBits = 0xD00000000000001DLL;
    v18._object = (void *)0x800000010021AE90LL;
    String.append(_:)(v18);
    sub_1000350DC();
    v24[3] = &type metadata for NIOAny._NIOAny;
    uint64_t v19 = sub_1000850EC((uint64_t)&unk_10027D8F8);
    sub_1000355AC(v19);
    sub_1000850F8();
    sub_10003557C();
    sub_100085064();
    sub_100035594();
    sub_100024F0C();
    if (!v24[5]) {
      __break(1u);
    }
    sub_100085154();
    sub_100035368();
    sub_100035574();
    sub_100035324((uint64_t)v7);
    v29._countAndFlagsBits = sub_1000353B4();
    sub_1000356B8(v29);
    sub_100019390();
    sub_100035084();
    sub_1000356AC();
    sub_100085104();
    v24[0] = 173LL;
    sub_1000351EC((uint64_t)"Fatal error", v20, v21, v22, v23, (uint64_t)"ASOctaneSupportXPCService/NIOAny.swift");
    sub_10003566C();
  }

  sub_10008513C();
  uint64_t v8 = v26;
  __int128 v9 = v27;
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v11;
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = v8;
  *(_DWORD *)(a1 + 2sub_100019F7C(v0 + 4) = v12;
  *(_WORD *)(a1 + 28) = v13;
  *(_BYTE *)(a1 + 3sub_10006F0B8(12LL, 0) = v14;
  *(_OWORD *)(a1 + 3sub_100019F7C(v0 + 2) = v9;
  *(void *)(a1 + 48) = v15;
  sub_10002A3D4();
  return result;
}

uint64_t NIOAny.tryAsOther<A>(type:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  sub_1000346EC(v3, (uint64_t)&v16);
  if (v23)
  {
    if (v23 == 1)
    {
      __int128 v9 = v16;
      uint64_t v10 = v17;
      int v11 = v18;
      __int16 v12 = v19;
      char v13 = v20;
      __int128 v14 = v21;
      uint64_t v15 = v22;
      uint64_t v6 = (ValueMetadata *)sub_1000175B0(&qword_1002AA4B8);
    }

    else
    {
      sub_100034728(&v16, &v9);
      uint64_t v6 = (ValueMetadata *)((char *)&type metadata for Any + 8);
    }
  }

  else
  {
    __int128 v9 = v16;
    BYTE6(v1sub_10006F0B8(12LL, 0) = BYTE6(v17);
    WORD2(v1sub_10006F0B8(12LL, 0) = WORD2(v17);
    LODWORD(v1sub_10006F0B8(12LL, 0) = v17;
    uint64_t v6 = &type metadata for IOData;
  }

  int v7 = swift_dynamicCast(a2, &v9, v6, a1, 6LL);
  return sub_10001762C(a2, v7 ^ 1u, 1LL, a1);
}

uint64_t NIOAny.forceAsOther<A>(type:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_1000355E4();
  __chkstk_darwin(v5);
  sub_10003518C();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v20 - v7;
  uint64_t v9 = type metadata accessor for Optional(0LL, a1);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  __int16 v12 = (char *)&v20 - v11;
  NIOAny.tryAsOther<A>(type:)(a1, (uint64_t)&v20 - v11);
  if (sub_10001D158((uint64_t)v12, 1LL, a1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    sub_10002B550(v2, (uint64_t)v24);
    *(void *)&__int128 v20 = 0LL;
    *((void *)&v20 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(56LL);
    __int128 v23 = v20;
    sub_100035384(v14, 0x8000000100218E30LL);
    v15._countAndFlagsBits = _typeName(_:qualified:)(a1, 0LL);
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    sub_1000350DC();
    __int128 v21 = &type metadata for NIOAny._NIOAny;
    *(void *)&__int128 v20 = sub_1000850EC((uint64_t)&unk_10027D8F8);
    sub_1000346EC(v24, v20 + 16);
    Mirror.init(reflecting:)(&v20);
    __int128 v16 = (void *)sub_10003557C();
    sub_100085064();
    sub_1000830D0(v16, &v20);
    sub_100024F0C();
    if (!v22) {
      __break(1u);
    }
    swift_bridgeObjectRelease();
    sub_100035368();
    sub_100035574();
    sub_100035324((uint64_t)v8);
    v17._countAndFlagsBits = sub_1000353B4();
    String.append(_:)(v17);
    sub_100019390();
    sub_100035084();
    _print_unlocked<A, B>(_:_:)(v24, &v23);
    sub_1000351EC( (uint64_t)"Fatal error",  v18,  v19,  v23,  *((uint64_t *)&v23 + 1),  (uint64_t)"ASOctaneSupportXPCService/NIOAny.swift");
    sub_10003566C();
  }

  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(a1 - 8) + 32LL))(a2, v12, a1);
}

uint64_t sub_100084258(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002AE328);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000842A0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000842CC()
{
  int v1 = *(unsigned __int8 *)(v0 + 72);
  if (v1 == 2)
  {
    sub_100019F7C((void *)(v0 + 16));
  }

  else if (v1 == 1)
  {
    sub_100085134(*(void *)(v0 + 16));
    swift_release();
    if (*(_BYTE *)(v0 + 48) != 4LL)
    {
      uint64_t v2 = *(void *)(v0 + 56);
      if ((~v2 & 0xF000000000000007LL) != 0) {
        sub_100085134(v2);
      }
    }
  }

  else if (!*(_BYTE *)(v0 + 72))
  {
    sub_100018F04(*(void *)(v0 + 16));
  }

  return swift_deallocObject(v0, 73LL, 7LL);
}

_OWORD *NIOAny.asAny()@<X0>(uint64_t a1@<X8>)
{
  double result = (_OWORD *)sub_1000346EC(v1, (uint64_t)&v12);
  if (v19)
  {
    if (v19 == 1)
    {
      __int128 v4 = v12;
      int v5 = v14;
      __int16 v6 = v15;
      char v7 = v16;
      __int128 v11 = v17;
      uint64_t v8 = v18;
      *(void *)(a1 + 2sub_100019F7C(v0 + 4) = sub_1000175B0(&qword_1002AA4B8);
      double result = (_OWORD *)swift_allocObject(&unk_10027D920, 72LL, 7LL);
      *(void *)a1 = result;
      result[1] = v4;
      *((void *)result + sub_100019F7C(v0 + 4) = v13;
      *((_DWORD *)result + 1sub_10006F0B8(12LL, 0) = v5;
      *((_WORD *)result + 2sub_100019F7C(v0 + 2) = v6;
      *((_BYTE *)result + 4sub_100019F7C(v0 + 6) = v7;
      result[3] = v11;
      *((void *)result + 8) = v8;
    }

    else
    {
      return sub_100034728(&v12, (_OWORD *)a1);
    }
  }

  else
  {
    __int128 v9 = v12;
    unint64_t v10 = v13 | ((unint64_t)(WORD2(v13) | (BYTE6(v13) << 16)) << 32);
    if ((v12 & 0x8000000000000000LL) != 0)
    {
      *(void *)(a1 + 2sub_100019F7C(v0 + 4) = &type metadata for FileRegion;
      *(void *)a1 = v9 & 0x7FFFFFFFFFFFFFFFLL;
    }

    else
    {
      *(void *)(a1 + 2sub_100019F7C(v0 + 4) = &type metadata for ByteBuffer;
      *(void *)a1 = v9;
    }

    *(void *)(a1 + 8) = *((void *)&v9 + 1);
    *(_DWORD *)(a1 + 1sub_100019F7C(v0 + 6) = v10;
    *(_WORD *)(a1 + 2sub_10006F0B8(12LL, 0) = WORD2(v10);
    *(_BYTE *)(a1 + 2sub_100019F7C(v0 + 2) = BYTE6(v10);
  }

  return result;
}

uint64_t sub_1000844A4()
{
  if (*(_BYTE *)(v0 + 48) != 4LL)
  {
    uint64_t v1 = *(void *)(v0 + 56);
    if ((~v1 & 0xF000000000000007LL) != 0) {
      sub_100085134(v1);
    }
  }

  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t NIOAny.description.getter()
{
  v4[0] = 0LL;
  v4[1] = 0xE000000000000000LL;
  v0._countAndFlagsBits = 0x7B20796E414F494ELL;
  v0._object = (void *)0xE900000000000020LL;
  String.append(_:)(v0);
  NIOAny.asAny()((uint64_t)v3);
  _print_unlocked<A, B>(_:_:)(v3, v4);
  sub_100019F7C(v3);
  v1._countAndFlagsBits = 32032LL;
  v1._object = (void *)0xE200000000000000LL;
  String.append(_:)(v1);
  return v4[0];
}

uint64_t destroy for NIOAny(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(unsigned __int8 *)(result + 56);
  if (v2 == 2) {
    return sub_100019F7C((void *)result);
  }
  if (v2 == 1)
  {
    swift_release(*(void *)result & 0x3FFFFFFFFFFFFFFFLL);
    double result = swift_release(*(void *)(v1 + 8));
    if (*(_BYTE *)(v1 + 32) != 4LL)
    {
      uint64_t v3 = *(void *)(v1 + 40);
      if ((~v3 & 0xF000000000000007LL) != 0) {
        return swift_release(v3 & 0x3FFFFFFFFFFFFFFFLL);
      }
    }
  }

  else if (!*(_BYTE *)(result + 56))
  {
    return sub_100018F04(*(void *)result);
  }

  return result;
}

uint64_t initializeWithCopy for NIOAny(uint64_t a1, uint64_t *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 56);
  if (v4 == 2)
  {
    uint64_t v8 = a2[3];
    *(void *)(a1 + 2sub_100019F7C(v0 + 4) = v8;
    (**(void (***)(uint64_t, uint64_t *))(v8 - 8))(a1, a2);
  }

  else if (v4 == 1)
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 1sub_100019F7C(v0 + 6) = a2[2];
    *(_DWORD *)(a1 + 2sub_100019F7C(v0 + 4) = *((_DWORD *)a2 + 6);
    *(_DWORD *)(a1 + 27) = *(_DWORD *)((char *)a2 + 27);
    __int16 v6 = a2 + 4;
    uint64_t v7 = *((unsigned __int8 *)a2 + 32);
    swift_retain();
    swift_retain();
    if (v7 == 4)
    {
      *(_OWORD *)(a1 + 3sub_100019F7C(v0 + 2) = *v6;
      *(void *)(a1 + 48) = a2[6];
    }

    else
    {
      *(_BYTE *)(a1 + 3sub_100019F7C(v0 + 2) = v7;
      uint64_t v14 = a2[5];
      if ((~v14 & 0xF000000000000007LL) != 0)
      {
        uint64_t v15 = a2[6];
        *(void *)(a1 + 4sub_10006F0B8(12LL, 0) = v14;
        *(void *)(a1 + 48) = v15;
        swift_retain();
      }

      else
      {
        *(_OWORD *)(a1 + 4sub_10006F0B8(12LL, 0) = *(_OWORD *)(a2 + 5);
      }
    }
  }

  else
  {
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
    int v11 = *((_DWORD *)a2 + 4);
    char v12 = *((_BYTE *)a2 + 22);
    __int16 v13 = *((_WORD *)a2 + 10);
    sub_100033ED4(*a2);
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v10;
    *(_BYTE *)(a1 + 2sub_100019F7C(v0 + 2) = v12;
    *(_WORD *)(a1 + 2sub_10006F0B8(12LL, 0) = v13;
    *(_DWORD *)(a1 + 1sub_100019F7C(v0 + 6) = v11;
  }

  *(_BYTE *)(a1 + 5sub_100019F7C(v0 + 6) = v4;
  return a1;
}

uint64_t assignWithCopy for NIOAny(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1000842A0(a1);
    int v4 = *(unsigned __int8 *)(a2 + 56);
    if (v4 == 2)
    {
      uint64_t v9 = *(void *)(a2 + 24);
      *(void *)(a1 + 2sub_100019F7C(v0 + 4) = v9;
      (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1, a2);
    }

    else if (v4 == 1)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 1sub_100019F7C(v0 + 6) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 2sub_10006F0B8(12LL, 0) = *(_DWORD *)(a2 + 20);
      int v5 = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a1 + 27) = *(_DWORD *)(a2 + 27);
      *(_DWORD *)(a1 + 2sub_100019F7C(v0 + 4) = v5;
      uint64_t v6 = *(unsigned __int8 *)(a2 + 32);
      swift_retain();
      swift_retain();
      if (v6 == 4)
      {
        uint64_t v7 = (_OWORD *)(a1 + 32);
        __int128 v8 = *(_OWORD *)(a2 + 32);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
      }

      else
      {
        *(_BYTE *)(a1 + 3sub_100019F7C(v0 + 2) = v6;
        uint64_t v15 = *(void *)(a2 + 40);
        if ((~v15 & 0xF000000000000007LL) != 0)
        {
          *(void *)(a1 + 4sub_10006F0B8(12LL, 0) = v15;
          *(void *)(a1 + 48) = *(void *)(a2 + 48);
          swift_retain();
          goto LABEL_12;
        }

        uint64_t v7 = (_OWORD *)(a1 + 40);
        __int128 v8 = *(_OWORD *)(a2 + 40);
      }

      *uint64_t v7 = v8;
    }

    else
    {
      uint64_t v10 = *(void *)a2;
      uint64_t v11 = *(void *)(a2 + 8);
      int v14 = *(_DWORD *)(a2 + 16);
      uint64_t v12 = a2 + 16;
      int v13 = v14;
      LOWORD(v1sub_100019F7C(v0 + 4) = *(_WORD *)(v12 + 4);
      LOBYTE(v1sub_100019F7C(v0 + 2) = *(_BYTE *)(v12 + 6);
      sub_100033ED4(v10);
      *(void *)a1 = v10;
      *(void *)(a1 + 8) = v11;
      *(_BYTE *)(a1 + 2sub_100019F7C(v0 + 2) = v12;
      *(_WORD *)(a1 + 2sub_10006F0B8(12LL, 0) = v14;
      *(_DWORD *)(a1 + 1sub_100019F7C(v0 + 6) = v13;
    }

__n128 initializeWithTake for NIOAny._NIOAny(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 1sub_100019F7C(v0 + 6) = v3;
  *(_OWORD *)(a1 + 3sub_100019F7C(v0 + 2) = v4;
  *(__n128 *)a1 = result;
  return result;
}

_OWORD *assignWithTake for NIOAny(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    sub_1000842A0((uint64_t)a1);
    __int128 v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    a1[2] = a2[2];
    *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for NIOAny(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 57))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 56);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NIOAny(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 4sub_10006F0B8(12LL, 0) = 0u;
    *(_OWORD *)(result + 2sub_100019F7C(v0 + 4) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 5sub_100019F7C(v0 + 6) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 57) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 57) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 5sub_100019F7C(v0 + 6) = -(char)a2;
    }
  }

  return result;
}

void type metadata accessor for NIOAny()
{
}

uint64_t destroy for NIOAny._NIOAny(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 56);
  if (v2 >= 3) {
    unsigned int v2 = *(_DWORD *)a1 + 3;
  }
  if (v2 == 2) {
    return sub_100019F7C((void *)a1);
  }
  if (v2 != 1) {
    return sub_100018F04(*(void *)a1);
  }
  swift_release(*(void *)a1 & 0x3FFFFFFFFFFFFFFFLL);
  uint64_t result = swift_release(*(void *)(a1 + 8));
  if (*(_BYTE *)(a1 + 32) != 4LL)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if ((~v4 & 0xF000000000000007LL) != 0) {
      return swift_release(v4 & 0x3FFFFFFFFFFFFFFFLL);
    }
  }

  return result;
}

uint64_t initializeWithCopy for NIOAny._NIOAny(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = *((unsigned __int8 *)a2 + 56);
  if (v4 >= 3) {
    unsigned int v4 = *(_DWORD *)a2 + 3;
  }
  if (v4 == 2)
  {
    uint64_t v8 = a2[3];
    *(void *)(a1 + 2sub_100019F7C(v0 + 4) = v8;
    (**(void (***)(uint64_t, uint64_t *))(v8 - 8))(a1, a2);
    char v9 = 2;
  }

  else if (v4 == 1)
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 1sub_100019F7C(v0 + 6) = a2[2];
    *(_DWORD *)(a1 + 2sub_100019F7C(v0 + 4) = *((_DWORD *)a2 + 6);
    *(_DWORD *)(a1 + 27) = *(_DWORD *)((char *)a2 + 27);
    uint64_t v6 = a2 + 4;
    uint64_t v7 = *((unsigned __int8 *)a2 + 32);
    swift_retain();
    swift_retain();
    if (v7 == 4)
    {
      *(_OWORD *)(a1 + 3sub_100019F7C(v0 + 2) = *v6;
      *(void *)(a1 + 48) = a2[6];
    }

    else
    {
      *(_BYTE *)(a1 + 3sub_100019F7C(v0 + 2) = v7;
      uint64_t v15 = a2[5];
      if ((~v15 & 0xF000000000000007LL) != 0)
      {
        uint64_t v16 = a2[6];
        *(void *)(a1 + 4sub_10006F0B8(12LL, 0) = v15;
        *(void *)(a1 + 48) = v16;
        swift_retain();
      }

      else
      {
        *(_OWORD *)(a1 + 4sub_10006F0B8(12LL, 0) = *(_OWORD *)(a2 + 5);
      }
    }

    char v9 = 1;
  }

  else
  {
    uint64_t v10 = *a2;
    uint64_t v11 = a2[1];
    int v12 = *((_DWORD *)a2 + 4);
    char v13 = *((_BYTE *)a2 + 22);
    __int16 v14 = *((_WORD *)a2 + 10);
    sub_100033ED4(*a2);
    char v9 = 0;
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v11;
    *(_BYTE *)(a1 + 2sub_100019F7C(v0 + 2) = v13;
    *(_WORD *)(a1 + 2sub_10006F0B8(12LL, 0) = v14;
    *(_DWORD *)(a1 + 1sub_100019F7C(v0 + 6) = v12;
  }

  *(_BYTE *)(a1 + 5sub_100019F7C(v0 + 6) = v9;
  return a1;
}

uint64_t assignWithCopy for NIOAny._NIOAny(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 56);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    if (v4 == 2)
    {
      sub_100019F7C((void *)a1);
    }

    else if (v4 == 1)
    {
      swift_release();
      swift_release();
      if (*(_BYTE *)(a1 + 32) != 4LL && (~*(void *)(a1 + 40) & 0xF000000000000007LL) != 0) {
        swift_release();
      }
    }

    else
    {
      sub_100018F04(*(void *)a1);
    }

    unsigned int v5 = *(unsigned __int8 *)(a2 + 56);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      uint64_t v10 = *(void *)(a2 + 24);
      *(void *)(a1 + 2sub_100019F7C(v0 + 4) = v10;
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1, a2);
      char v11 = 2;
    }

    else
    {
      if (v5 == 1)
      {
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(_DWORD *)(a1 + 1sub_100019F7C(v0 + 6) = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a1 + 2sub_10006F0B8(12LL, 0) = *(_DWORD *)(a2 + 20);
        int v6 = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(a1 + 27) = *(_DWORD *)(a2 + 27);
        *(_DWORD *)(a1 + 2sub_100019F7C(v0 + 4) = v6;
        uint64_t v7 = *(unsigned __int8 *)(a2 + 32);
        swift_retain();
        swift_retain();
        if (v7 == 4)
        {
          uint64_t v8 = (_OWORD *)(a1 + 32);
          __int128 v9 = *(_OWORD *)(a2 + 32);
          *(void *)(a1 + 48) = *(void *)(a2 + 48);
        }

        else
        {
          *(_BYTE *)(a1 + 3sub_100019F7C(v0 + 2) = v7;
          uint64_t v17 = *(void *)(a2 + 40);
          if ((~v17 & 0xF000000000000007LL) != 0)
          {
            *(void *)(a1 + 4sub_10006F0B8(12LL, 0) = v17;
            *(void *)(a1 + 48) = *(void *)(a2 + 48);
            swift_retain();
            goto LABEL_23;
          }

          uint64_t v8 = (_OWORD *)(a1 + 40);
          __int128 v9 = *(_OWORD *)(a2 + 40);
        }

        *uint64_t v8 = v9;
LABEL_23:
        char v11 = 1;
        goto LABEL_24;
      }

      uint64_t v12 = *(void *)a2;
      uint64_t v13 = *(void *)(a2 + 8);
      int v16 = *(_DWORD *)(a2 + 16);
      uint64_t v14 = a2 + 16;
      int v15 = v16;
      LOWORD(v1sub_100019F7C(v0 + 6) = *(_WORD *)(v14 + 4);
      LOBYTE(v1sub_100019F7C(v0 + 4) = *(_BYTE *)(v14 + 6);
      sub_100033ED4(v12);
      char v11 = 0;
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v13;
      *(_BYTE *)(a1 + 2sub_100019F7C(v0 + 2) = v14;
      *(_WORD *)(a1 + 2sub_10006F0B8(12LL, 0) = v16;
      *(_DWORD *)(a1 + 1sub_100019F7C(v0 + 6) = v15;
    }

uint64_t assignWithTake for NIOAny._NIOAny(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 56);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    if (v4 == 2)
    {
      sub_100019F7C((void *)a1);
    }

    else if (v4 == 1)
    {
      swift_release();
      swift_release();
      if (*(_BYTE *)(a1 + 32) != 4LL && (~*(void *)(a1 + 40) & 0xF000000000000007LL) != 0) {
        swift_release();
      }
    }

    else
    {
      sub_100018F04(*(void *)a1);
    }

    unsigned int v5 = *(unsigned __int8 *)(a2 + 56);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      __int128 v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 1sub_100019F7C(v0 + 6) = v7;
    }

    else if (v5 == 1)
    {
      __int128 v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 1sub_100019F7C(v0 + 6) = v6;
      *(_OWORD *)(a1 + 3sub_100019F7C(v0 + 2) = *(_OWORD *)(a2 + 32);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      LOBYTE(v5) = 1;
    }

    else
    {
      LOBYTE(v5) = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 15) = *(void *)(a2 + 15);
    }

    *(_BYTE *)(a1 + 5sub_100019F7C(v0 + 6) = v5;
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for NIOAny._NIOAny(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 >= 3) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for NIOAny._NIOAny(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 41) = 0u;
    *(_OWORD *)(result + 1sub_100019F7C(v0 + 6) = 0u;
    *(_OWORD *)(result + 3sub_100019F7C(v0 + 2) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_DWORD *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 57) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 57) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 5sub_100019F7C(v0 + 6) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_100084F74(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 56);
  return result;
}

uint64_t sub_100084F90(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(void *)(result + 48) = 0LL;
    *(_OWORD *)(result + 1sub_100019F7C(v0 + 6) = 0u;
    *(_OWORD *)(result + 3sub_100019F7C(v0 + 2) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_DWORD *)uint64_t result = a2 - 3;
    LOBYTE(asub_100019F7C(v0 + 2) = 3;
  }

  *(_BYTE *)(result + 5sub_100019F7C(v0 + 6) = a2;
  return result;
}

void type metadata accessor for NIOAny._NIOAny()
{
}

uint64_t sub_100084FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IAPTransaction(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008500C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002AA3E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100085054()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100085064()
{
  return v2(v1, v0);
}

uint64_t sub_100085070( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return a9;
}

uint64_t sub_10008508C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v6 - 112, v5, v4, a4, 0LL);
}

uint64_t sub_1000850A0()
{
  return sub_1000346EC(v0, v1 - 112);
}

void sub_1000850B8(uint64_t a1@<X8>)
{
  v1._object = (void *)((a1 - 32) | 0x8000000000000000LL);
  v1._countAndFlagsBits = 0xD000000000000018LL;
  String.append(_:)(v1);
}

uint64_t sub_1000850D0()
{
  return *(void *)(v0 - 112);
}

uint64_t sub_1000850EC(uint64_t a1)
{
  return swift_allocObject(a1, 73LL, 7LL);
}

uint64_t sub_1000850F8()
{
  return Mirror.init(reflecting:)(v0 - 176);
}

  ;
}

uint64_t sub_100085114()
{
  return sub_10002B550(v0, v1 - 112);
}

uint64_t sub_100085120( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1000346EC(v9, (uint64_t)&a9);
}

uint64_t sub_10008512C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1000842A0((uint64_t)&a9);
}

uint64_t sub_100085134@<X0>(uint64_t a1@<X8>)
{
  return swift_release(a1 & 0x3FFFFFFFFFFFFFFFLL);
}

  ;
}

uint64_t sub_100085154()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 168));
}

uint64_t sub_10008515C()
{
  return sub_1000842A0(v0 - 112);
}

uint64_t sub_100085164@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

  ;
}

  ;
}

void sub_100085194()
{
  uint64_t v1 = *(void *)(v0 - 168);
  *(void *)(v0 - 128) = *(void *)(v0 - 176);
  *(void *)(v0 - 12sub_10006F0B8(12LL, 0) = v1;
}

uint64_t sub_1000851A0(unint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v17))
  {
    uint64_t v19 = v3;
    uint64_t v20 = v2;
    unint64_t v21 = v2 & 0xC000000000000001LL;
    uint64_t v4 = 4LL;
    while (1)
    {
      if (v21)
      {
        uint64_t v5 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v2);
      }

      else
      {
        uint64_t v5 = *(void **)(v2 + 8 * v4);
        swift_retain();
      }

      uint64_t v6 = v4 - 3;
      if (__OFADD__(v4 - 4, 1LL)) {
        break;
      }
      uint64_t v7 = v5[2];
      uint64_t v8 = v5[3];
      uint64_t v23 = v5[4];
      id v9 = a2;
      sub_1000B52F0();
      uint64_t v11 = v10;
      uint64_t v12 = sub_1000B3DEC();
      uint64_t v14 = v13;

      if (v7 == v11)
      {
        BOOL v15 = v8 == v12 && v23 == v14;
        uint64_t v2 = v20;
        if (v15)
        {

          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v3 = 1LL;
          goto LABEL_25;
        }

        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v23, v12, v14, 0LL);
        swift_release();
        swift_bridgeObjectRelease();
        if ((v16 & 1) != 0)
        {

          uint64_t v3 = 1LL;
          goto LABEL_25;
        }
      }

      else
      {
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v2 = v20;
      }

      ++v4;
      if (v6 == v19)
      {

        uint64_t v3 = 0LL;
        goto LABEL_25;
      }
    }

    __break(1u);
LABEL_20:
    if (v2 < 0) {
      uint64_t v17 = v2;
    }
    else {
      uint64_t v17 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
  }

LABEL_25:
  swift_bridgeObjectRelease();
  return v3;
}

void *sub_100085368(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v24 = (unint64_t)a1;
  uint64_t v4 = a1;
  _OWORD v23[2] = a2;
  uint64_t v5 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v21))
  {
    uint64_t v6 = 4LL;
    while (1)
    {
      id v7 = (a3 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, a3)
         : *(id *)(a3 + 8 * v6);
      uint64_t v4 = v7;
      uint64_t v8 = v6 - 3;
      if (__OFADD__(v6 - 4, 1LL)) {
        break;
      }
      uint64_t v9 = v5;
      sub_10008C420();
      char v11 = v10;
      id v13 = v12;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
      unint64_t v15 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v14 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v15 >= v14 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1);
      }
      uint64_t v16 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v13);
      specialized Array._endMutation()(v16);
      if ((v11 & 1) != 0)
      {
        id v17 = v13;
        uint64_t v18 = sub_1000B3DEC();
        uint64_t v20 = v19;

        sub_1001A0924(v23, v18, v20);
        swift_bridgeObjectRelease();
      }

      else
      {
      }

      ++v6;
      uint64_t v5 = v9;
      if (v8 == v9)
      {
        swift_bridgeObjectRelease();
        uint64_t v4 = (void *)v24;
        goto LABEL_21;
      }
    }

    __break(1u);
LABEL_16:
    if (a3 < 0) {
      uint64_t v21 = a3;
    }
    else {
      uint64_t v21 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
  }

  swift_bridgeObjectRelease();
LABEL_21:
  swift_release();
  return v4;
}

uint64_t sub_100085540(unint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (v3)
  {
    uint64_t v19 = v3;
    uint64_t v4 = 0LL;
    uint64_t v20 = v2;
    unint64_t v21 = v2 & 0xC000000000000001LL;
    while (1)
    {
      if (v21)
      {
        uint64_t v5 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v2);
      }

      else
      {
        uint64_t v5 = *(void **)(v2 + 8 * v4 + 32);
        swift_retain();
      }

      uint64_t v7 = v5[2];
      uint64_t v6 = v5[3];
      uint64_t v8 = v5[4];
      id v9 = a2;
      sub_1000B52F0();
      uint64_t v11 = v10;
      uint64_t v2 = sub_1000B3DEC();
      uint64_t v13 = v12;

      if (v7 == v11)
      {
        if (v6 == v2 && v8 == v13)
        {

          swift_release();
          swift_bridgeObjectRelease();
          return v4;
        }

        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v2, v13, 0LL);
        swift_release();
        swift_bridgeObjectRelease();
        if ((v15 & 1) != 0)
        {

          return v4;
        }
      }

      else
      {
        swift_release();
        swift_bridgeObjectRelease();
      }

      uint64_t v16 = v4 + 1;
      if (__OFADD__(v4, 1LL)) {
        break;
      }
      ++v4;
      uint64_t v2 = v20;
      if (v16 == v19)
      {

        return 0LL;
      }
    }

    __break(1u);
LABEL_20:
    if (v2 < 0) {
      uint64_t v17 = v2;
    }
    else {
      uint64_t v17 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease();
  }

  return 0LL;
}

uint64_t sub_1000856F4(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (v4)
  {
    uint64_t v5 = 0LL;
    while (1)
    {
      if ((a1 & 0xC000000000000001LL) != 0)
      {
        uint64_t v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
      }

      else
      {
        uint64_t v6 = *(void **)(a1 + 8 * v5 + 32);
        swift_retain(v6);
      }

      if (v6[2] == a2[2])
      {
        uint64_t v7 = v6[3];
        uint64_t v8 = v6[4];
        uint64_t v9 = a2[3];
        uint64_t v10 = a2[4];
        if (v7 == v9 && v8 == v10)
        {
          swift_release(a2);
          unint64_t v14 = v6;
          goto LABEL_19;
        }

        char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v9, v10, 0LL);
        swift_release(v6);
        if ((v12 & 1) != 0)
        {
          unint64_t v14 = a2;
LABEL_19:
          swift_release(v14);
          return v5;
        }
      }

      else
      {
        swift_release(v6);
      }

      uint64_t v13 = v5 + 1;
      if (__OFADD__(v5, 1LL)) {
        break;
      }
      ++v5;
      if (v13 == v4) {
        goto LABEL_17;
      }
    }

    __break(1u);
LABEL_22:
    if (a1 < 0) {
      uint64_t v16 = a1;
    }
    else {
      uint64_t v16 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }

uint64_t sub_10008583C(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
LABEL_13:
    if (a1 < 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v3 = 0LL;
  if (v2)
  {
    while (1)
    {
      uint64_t v4 = (a1 & 0xC000000000000001LL) != 0
         ? specialized _ArrayBuffer._getElementSlowPath(_:)(v3, a1)
         : swift_retain(*(void *)(a1 + 8 * v3 + 32));
      char v5 = *(_BYTE *)(v4
                    + OBJC_IVAR____TtCC25ASOctaneSupportXPCServiceP33_4168D9B03AF8124BE3111952AAE62D6930SubscriptionRenewalCoordinator11RenewalTask_isComplete);
      swift_release(v4);
      if ((v5 & 1) != 0) {
        break;
      }
      uint64_t v6 = v3 + 1;
      if (__OFADD__(v3, 1LL))
      {
        __break(1u);
        goto LABEL_13;
      }

      ++v3;
      if (v6 == v2) {
        return 0LL;
      }
    }
  }

  return v3;
}

uint64_t sub_100085920()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10008594C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100085978()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 152);
  unint64_t v3 = *(void *)(v0 + 160);
  uint64_t v4 = v2;
  if (v3 >> 60 == 11)
  {
    swift_unownedRetain(v1);
    uint64_t v4 = sub_100085A14();
    unint64_t v6 = v5;
    swift_unownedRelease(v1);
    uint64_t v7 = *(void *)(v1 + 152);
    unint64_t v8 = *(void *)(v1 + 160);
    *(void *)(v1 + 15sub_100019F7C(v0 + 2) = v4;
    *(void *)(v1 + 16sub_10006F0B8(12LL, 0) = v6;
    sub_10003AA74(v4, v6);
    sub_1000928D0(v7, v8);
  }

  sub_1000928E4(v2, v3);
  return v4;
}

uint64_t sub_100085A14()
{
  uint64_t v0 = sub_1000175B0(&qword_1002A9720);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = type metadata accessor for OctaneConfiguration();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v10);
  id v12 = [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  id v13 = sub_1000922E0(0xD000000000000010LL, 0x800000010021B260LL, 3289456LL, 0xE300000000000000LL, v12);

  if (!v13)
  {
    sub_10001762C((uint64_t)v2, 1LL, 1LL, v3);
    goto LABEL_5;
  }

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v13);

  unint64_t v14 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
  v14(v2, v7, v3);
  sub_10001762C((uint64_t)v2, 0LL, 1LL, v3);
  if (sub_10001D158((uint64_t)v2, 1LL, v3) == 1)
  {
LABEL_5:
    sub_100034F14((uint64_t)v2, &qword_1002A9720);
    return 0LL;
  }

  v14(v9, v2, v3);
  uint64_t v15 = Data.init(contentsOf:options:)(v9, 0LL);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  return v15;
}

uint64_t sub_100085DB4(void *a1, uint64_t a2)
{
  uint64_t v3 = sub_1000BED98();
  uint64_t v5 = v4;
  sub_10004BDB4(a2 + 96, (uint64_t)v10);
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a2 + 9sub_100019F7C(v0 + 6) = v3;
  swift_bridgeObjectRelease(v6);
  sub_10004BDB4(a2 + 104, (uint64_t)&v9);
  uint64_t v7 = *(void *)(a2 + 104);
  *(void *)(a2 + 10sub_100019F7C(v0 + 4) = v5;
  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_100085E24(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v18 = 0;
  sub_100092930();
  sub_100092AFC();
  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v4 = sub_100077D08();
  sub_100018F68(v4, (uint64_t)qword_1002EB9D0);
  uint64_t v5 = sub_100023E64(a2);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = sub_100019464(22LL);
    uint64_t v9 = sub_100019464(64LL);
    v17[0] = v9;
    *(_DWORD *)uint64_t v8 = 136315394;
    sub_10001ED74();
    uint64_t v15 = sub_100092EE4(a1, v10, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v8 + 4);
    sub_100077CA8(a2);
    *(_WORD *)(v8 + 1sub_100019F7C(v0 + 2) = 2080;
    sub_1000487CC((uint64_t)&v18, (uint64_t)&v15);
    if (v18) {
      uint64_t v12 = 7561576LL;
    }
    else {
      uint64_t v12 = 0x2074276E73656F64LL;
    }
    uint64_t v14 = sub_100092EE4(v12, v11, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v8 + 14);
    sub_10001A3F8();
    sub_100092A58((void *)&_mh_execute_header, v6, v7, "%s %s transaction(s) in billing error", (uint8_t *)v8);
    sub_100093110(v9);
    sub_10001A408(v9);
    sub_10001A408(v8);
  }

  else
  {

    sub_10001EDE8(a2);
  }

  sub_1000487CC((uint64_t)&v18, (uint64_t)v17);
  return v18;
}

void sub_10008602C(void *a1, BOOL *a2)
{
  id v3 = sub_1000BF670();
  id v4 = v3;
  if (v3) {

  }
  *a2 = v4 != 0LL;
}

uint64_t sub_100086088(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  v41[0] = _swiftEmptyArrayStorage;
  sub_100019F58((void *)(v4 + 56), *(void *)(v4 + 80));
  sub_1001B2E60();
  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v6 = sub_100077D08();
  __int128 v36 = (os_log_s *)sub_100018F68(v6, (uint64_t)qword_1002EB9D0);
  Logger.logObject.getter(v36);
  LOBYTE(v7) = sub_100092CFC();
  if (!sub_1000930D8((os_log_type_t)v7)) {
    goto LABEL_7;
  }
  id v3 = (uint8_t *)sub_100019464(12LL);
  *(_DWORD *)id v3 = 134217984;
  sub_1000487CC((uint64_t)v41, (uint64_t)v37);
  a2 = v41[0];
  if (v41[0] >> 62) {
    goto LABEL_29;
  }
  uint64_t v8 = *(void *)((v41[0] & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    uint64_t v39 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v3 + 4);
    sub_100092A00( (void *)&_mh_execute_header,  v36,  (os_log_type_t)v7,  "Resolving %ld transactions in billing error",  v3);
    sub_10001A408((uint64_t)v3);
LABEL_7:

    sub_1000487CC((uint64_t)v41, (uint64_t)&v39);
    uint64_t v7 = v41[0];
    if (v41[0] >> 62)
    {
      if (v41[0] < 0LL) {
        a2 = v41[0];
      }
      else {
        a2 = v41[0] & 0xFFFFFFFFFFFFFF8LL;
      }
      sub_10001FFF0();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(a2);
      if (!v9) {
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v9 = *(void *)((v41[0] & 0xFFFFFFFFFFFFF8LL) + 0x10);
      sub_10001FFF0();
      if (!v9) {
        goto LABEL_22;
      }
    }

    if (v9 >= 1) {
      break;
    }
    __break(1u);
LABEL_29:
    if (a2 < 0) {
      uint64_t v33 = a2;
    }
    else {
      uint64_t v33 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_100019320();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v33);
    sub_100019390();
  }

  uint64_t v10 = 0LL;
  unint64_t v11 = v7 & 0xC000000000000001LL;
  uint64_t v34 = v7;
  unint64_t v35 = v7 & 0xC000000000000001LL;
  do
  {
    if (v11) {
      uint64_t v12 = (void *)sub_1000931D0();
    }
    else {
      uint64_t v12 = sub_100092C94(v7 + 8 * v10);
    }
    id v13 = v12;
    sub_100088F7C(v12);
    sub_10009305C();
    if (v15)
    {
    }

    else
    {
      char v16 = v14;
      id v17 = v13;
      unsigned __int8 v18 = (os_log_s *)Logger.logObject.getter(v17);
      os_log_type_t v20 = static os_log_type_t.error.getter(v18, v19);
      if (os_log_type_enabled(v18, v20))
      {
        uint64_t v22 = v9;
        uint64_t v23 = v4;
        uint64_t v24 = sub_100019464(22LL);
        uint64_t v25 = sub_100019464(64LL);
        uint64_t v38 = v25;
        *(_DWORD *)uint64_t v24 = 136315394;
        uint64_t v26 = sub_1000B3DDC();
        *(void *)(v24 + sub_100019F7C(v0 + 4) = sub_100092A38(v26, v27);
        sub_10001EDA0();

        *(_WORD *)(v24 + 1sub_100019F7C(v0 + 2) = 2080;
        v37[31] = v16;
        unint64_t v28 = sub_1000588D4();
        uint64_t v29 = Error.localizedDescription.getter(&type metadata for TransactionError, v28);
        *(void *)(v24 + 1sub_100019F7C(v0 + 4) = sub_100092A38(v29, v30);
        sub_10001EDA0();
        sub_100092A58( (void *)&_mh_execute_header,  v18,  v20,  "Failed to resolve billing error for %s: %s",  (uint8_t *)v24);
        swift_arrayDestroy(v25, 2LL);
        sub_10001A408(v25);
        uint64_t v31 = v24;
        uint64_t v4 = v23;
        uint64_t v9 = v22;
        uint64_t v7 = v34;
        sub_10001A408(v31);
      }

      else
      {
      }

      unint64_t v11 = v35;
    }

    ++v10;
  }

  while (v9 != v10);
LABEL_22:
  sub_100023EEC();
  return swift_bridgeObjectRelease(v41[0]);
}

uint64_t sub_1000863E4(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = v4;
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_100086438()
{
  return 0LL;
}

void sub_1000864C4( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v11 = v10;
  void v14[2] = a8;
  uint64_t v12 = sub_100176598((uint64_t (*)(id *))sub_1000928F8, (uint64_t)v14, v10);
  swift_bridgeObjectRelease(v11);
  id v13 = *a9;
  *a9 = v12;
}

void sub_100086588()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = sub_100092A18();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100092B28();
  sub_100019F58(v4, v4[3]);
  static Date.distantFuture.getter();
  sub_1000BE628();
  uint64_t v8 = v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0, v5);
  uint64_t v9 = *v2;
  *uint64_t v2 = v8;

  sub_10002A580();
}

void *sub_100086638(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = v4;
  sub_10001A420();
  sub_1000B5570();
  uint64_t v6 = sub_1000B85BC(8u);
  if ((v7 & 1) != 0) {
    sub_1000B52F0();
  }
  sub_1000B55E4(v6, 0);
  double v8 = COERCE_DOUBLE(sub_1000B85C8(0xCu));
  if ((v9 & 1) != 0) {
    double v8 = sub_1000B4050();
  }
  sub_1000B55F4(*(uint64_t *)&v8, 0);
  sub_100092B18(v5, 0);
  sub_1000B5658(1);
  sub_100092AA0(a3);
  return v5;
}

void sub_100086710()
{
  uint64_t v41 = v2;
  uint64_t v42 = v3;
  int v35 = v4;
  uint64_t v6 = v5;
  uint64_t v36 = v7;
  uint64_t v9 = v8;
  uint64_t v38 = v11;
  uint64_t v39 = v10;
  sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  sub_1000226C8();
  __chkstk_darwin(v12);
  sub_100092B28();
  uint64_t v13 = sub_100092A18();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_10009291C();
  v33[1] = v15;
  sub_100092978();
  __chkstk_darwin(v16);
  unsigned __int8 v18 = (char *)v33 - v17;
  uint64_t v34 = *(void *)(v0 + 128);
  uint64_t v19 = *(os_unfair_lock_s **)(v34 + 16);
  ChannelPipeline.syncOperations.getter();
  os_unfair_lock_lock(v19);
  uint64_t KeyPath = swift_getKeyPath(&unk_1001FAE80);
  sub_10008EA70(KeyPath);
  uint64_t v37 = v21;
  sub_10002A524();
  os_unfair_lock_unlock(v19);
  sub_100024F0C();
  sub_100067DA4(v6, v1, (uint64_t *)&unk_1002AFCD0);
  uint64_t v22 = sub_10001D158(v1, 1LL, v13);
  if ((_DWORD)v22 == 1)
  {
    uint64_t v23 = static Date.now.getter(v22);
    sub_100093290(v23, (uint64_t *)&unk_1002AFCD0);
  }

  else
  {
    uint64_t v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 32))(v18, v1, v13);
  }

  double v25 = Date.timeIntervalSinceReferenceDate.getter(v24);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v14 + 8);
  _OWORD v33[2] = v13;
  v33[0] = v26;
  v26(v18, v13);
  uint64_t v27 = sub_1000175B0(&qword_1002AE8C0);
  uint64_t inited = swift_initStackObject(v27, &v40);
  *(_OWORD *)(inited + 1sub_100019F7C(v0 + 6) = xmmword_1001FAC40;
  *(_BYTE *)(inited + 3sub_100019F7C(v0 + 2) = 0;
  *(void *)(inited + 6sub_100019F7C(v0 + 4) = &type metadata for String;
  *(void *)(inited + 4sub_10006F0B8(12LL, 0) = 7959874LL;
  *(void *)(inited + 48) = 0xE300000000000000LL;
  *(_BYTE *)(inited + 7sub_100019F7C(v0 + 2) = 2;
  *(void *)(inited + 10sub_100019F7C(v0 + 4) = &type metadata for String;
  uint64_t v29 = v39;
  *(void *)(inited + 8sub_10006F0B8(12LL, 0) = v38;
  *(void *)(inited + sub_100081CEC(v0 + 88) = v9;
  *(_BYTE *)(inited + 11sub_100019F7C(v0 + 2) = 7;
  *(void *)(inited + 14sub_100019F7C(v0 + 4) = &type metadata for UInt;
  *(void *)(inited + 12sub_10006F0B8(12LL, 0) = v37;
  *(_BYTE *)(inited + 15sub_100019F7C(v0 + 2) = 9;
  uint64_t v30 = *(void *)(v29 + 80);
  uint64_t v31 = *(void *)(v29 + 88);
  *(void *)(inited + 18sub_100019F7C(v0 + 4) = &type metadata for String;
  *(void *)(inited + 16sub_10006F0B8(12LL, 0) = v30;
  *(void *)(inited + 168) = v31;
  *(_BYTE *)(inited + 19sub_100019F7C(v0 + 2) = 11;
  *(void *)(inited + 22sub_100019F7C(v0 + 4) = &type metadata for Double;
  *(double *)(inited + 20sub_10006F0B8(12LL, 0) = v25;
  *(_BYTE *)(inited + 23sub_100019F7C(v0 + 2) = 13;
  *(void *)(inited + 26sub_100019F7C(v0 + 4) = &type metadata for Int;
  *(void *)(inited + 24sub_10006F0B8(12LL, 0) = v36;
  *(_BYTE *)(inited + 27sub_100019F7C(v0 + 2) = 16;
  sub_100093250();
  __asm { BR              X11 }

uint64_t sub_100086964()
{
  *(void *)(v1 + 30sub_100019F7C(v0 + 4) = v4;
  *(void *)(v1 + 28sub_10006F0B8(12LL, 0) = v7;
  *(void *)(v1 + 2sub_100081CEC(v0 + 88) = v6;
  *(_BYTE *)(v1 + 31sub_100019F7C(v0 + 2) = 20;
  sub_100092F60((void *)(v3 + 16), *(void *)(v3 + 40));
  *(void *)(v0 + 5sub_100019F7C(v0 + 6) = v2;
  sub_100077D1C();
  sub_10001ED74();
  sub_100075D10((void *)(v5 - 184));
  uint64_t v9 = *(void *)(v5 - 184);
  uint64_t v8 = *(void *)(v5 - 176);
  sub_10001DBCC();
  sub_10001B4DC((void *)(v5 - 184));
  *(void *)(v1 + 34sub_100019F7C(v0 + 4) = v4;
  *(void *)(v1 + 32sub_10006F0B8(12LL, 0) = v9;
  *(void *)(v1 + 328) = v8;
  *(_BYTE *)(v1 + 35sub_100019F7C(v0 + 2) = 21;
  uint64_t v10 = sub_1001BA8BC();
  LOWORD(v9) = v11;
  __int16 v13 = v12;
  uint64_t v14 = v3;
  unint64_t v15 = v11 >> 16;
  unint64_t v16 = HIDWORD(v11);
  *(void *)(v0 + 2sub_100019F7C(v0 + 4) = HIWORD(v11);
  *(_DWORD *)(v0 + 3sub_100019F7C(v0 + 6) = HIWORD(v12);
  sub_100093180();
  *(void *)(v1 + 38sub_100019F7C(v0 + 4) = v17;
  *(void *)(v1 + 36sub_10006F0B8(12LL, 0) = v10;
  *(_WORD *)(v1 + 368) = v9;
  *(_WORD *)(v1 + 37sub_10006F0B8(12LL, 0) = v15;
  *(_WORD *)(v1 + 37sub_100019F7C(v0 + 2) = v16;
  *(_WORD *)(v1 + 37sub_100019F7C(v0 + 4) = *(void *)(v0 + 24);
  *(_WORD *)(v1 + 37sub_100019F7C(v0 + 6) = v13;
  *(_WORD *)(v1 + 378) = *(_DWORD *)(v0 + 36);
  sub_100092564();
  *(void *)(v5 - 19sub_100019F7C(v0 + 2) = Dictionary.init(dictionaryLiteral:)( v1,  &type metadata for TransactionEntity.Key,  (char *)&type metadata for Any + 8);
  unsigned __int8 v18 = *(os_unfair_lock_s **)(*(void *)(v0 + 40) + 16LL);
  swift_retain();
  os_unfair_lock_lock(v18);
  uint64_t v19 = 3157553LL;
  if (*(_BYTE *)(v14 + 112)) {
    uint64_t v19 = 3157554LL;
  }
  *(void *)(v0 + 11sub_100019F7C(v0 + 2) = &type metadata for String;
  *(void *)(v0 + sub_100081CEC(v0 + 88) = v19;
  *(void *)(v0 + 9sub_100019F7C(v0 + 6) = 0xE300000000000000LL;
  uint64_t v20 = sub_100093188();
  sub_1001B1CF8(v20, 26LL);
  os_unfair_lock_unlock(v18);
  swift_release();
  return ((uint64_t (*)(uint64_t))((char *)&loc_100086AE0
                                          + *((int *)qword_100086E98 + *(unsigned __int8 *)(*(void *)(v0 + 80) + 112LL))))(0x62616D75736E6F43LL);
}

void sub_100086B10()
{
  char v5 = sub_100048720(0x75736E6F436E6F4ELL, 0xED0000656C62616DLL, v2 + 2, 0x80000001002169F0LL);
  uint64_t v6 = sub_100023EEC();
  uint64_t v7 = *(void *)(v0 + 56);
  if ((v5 & 1) != 0)
  {
    *(void *)(v0 + 11sub_100019F7C(v0 + 2) = &type metadata for UInt;
    *(void *)(v0 + sub_100081CEC(v0 + 88) = *(void *)(v0 + 64);
    sub_100092F0C();
    *(void *)(v0 + 11sub_100019F7C(v0 + 2) = &type metadata for Double;
    *(void *)(v0 + sub_100081CEC(v0 + 88) = v4;
    sub_1001B1CF8(v0 + 88, 12LL);
    *(void *)(v0 + sub_100081CEC(v0 + 88) = 0LL;
    uint64_t v8 = sub_100019F58((void *)(v1 + 56), *(void *)(v1 + 80));
    __chkstk_darwin(v8);
    sub_100092E9C();
    *(void *)(v9 - 1sub_100019F7C(v0 + 6) = v0 + 88;
    *(void *)(v9 - 8) = v3 - 192;
    sub_1001B2FD0();
    if ((*(_DWORD *)(v0 + 52) & 1) != 0)
    {
      if (qword_1002A8CF8 != -1) {
        swift_once(&qword_1002A8CF8, sub_10010EF80);
      }
      uint64_t v10 = sub_1000175B0(&qword_1002A9098);
      uint64_t v11 = sub_100092954(v10);
      *(_OWORD *)(v11 + 1sub_100019F7C(v0 + 6) = xmmword_1001F3C00;
      *(void *)(v11 + 3sub_100019F7C(v0 + 2) = *(void *)(v0 + 72);
      *(void *)(v11 + 4sub_10006F0B8(12LL, 0) = v7;
      sub_100077D1C();
      sub_1000E23DC(0, v11, v2 + 51, 0x800000010021B210LL);
      sub_10001A3F8();
    }

    if (qword_1002A8CF8 != -1) {
      swift_once(&qword_1002A8CF8, sub_10010EF80);
    }
    unsigned int v12 = *(void **)(v0 + 88);
    if (!v12)
    {
      __break(1u);
      JUMPOUT(0x100086E88LL);
    }

    id v13 = v12;
    sub_1001101BC();

    swift_bridgeObjectRelease();
    sub_100092BA0();
  }

  else
  {
    ((void (*)(uint64_t))((char *)&loc_100086CD4
                                  + *((int *)qword_100086EA8 + *(unsigned __int8 *)(*(void *)(v0 + 80) + 112LL))))(v6);
  }

void sub_100086EB8()
{
  uint64_t v4 = v3 - v2;
  uint64_t v5 = sub_100049CA8(v3 - v2, 1LL);
  static Date.now.getter(v5);
  sub_10008CD68();
  uint64_t v7 = v6;
  char v9 = v8;
  uint64_t v10 = sub_100077C8C();
  v11(v10);
  sub_100034F14(v4, (uint64_t *)&unk_1002AFCD0);
  if ((v9 & 1) != 0)
  {
    if (qword_1002A8CF8 != -1) {
      swift_once(&qword_1002A8CF8, sub_10010EF80);
    }
    uint64_t v12 = sub_1000175B0(&qword_1002A9098);
    id v13 = (__n128 *)sub_100092954(v12);
    uint64_t v14 = sub_100092A60(v13, (__n128)xmmword_1001F3C00);
    char v16 = sub_100092FF0(v14, v15);
    sub_100092C70(v16, v17, 44LL, v18);
    sub_10003561C();
  }

  if (v7)
  {
    if (qword_1002A8CF8 != -1) {
      swift_once(&qword_1002A8CF8, sub_10010EF80);
    }
    uint64_t v19 = sub_1000175B0(&qword_1002A9098);
    uint64_t v20 = (__n128 *)sub_100092954(v19);
    uint64_t v21 = sub_100092A60(v20, (__n128)xmmword_1001F3C00);
    char v23 = sub_100093008(v21, v22);
    sub_100092C70(v23, v24, 44LL, v25);
    sub_10003561C();
  }

  sub_10002A580();
}

void sub_100087044()
{
  uint64_t v102 = v2;
  uint64_t v103 = v3;
  uint64_t v4 = v0;
  int v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  sub_1000226C8();
  __chkstk_darwin(v15);
  sub_10009291C();
  uint64_t v87 = v16;
  sub_100092978();
  __chkstk_darwin(v17);
  sub_100092AF0();
  v84[2] = v18;
  sub_100092978();
  __chkstk_darwin(v19);
  sub_100092AF0();
  uint64_t v89 = v20;
  sub_100092978();
  __chkstk_darwin(v21);
  sub_100092E80();
  v84[1] = v22;
  int v93 = (void (*)(uint64_t, uint64_t))sub_100092A18();
  uint64_t v91 = *((void *)v93 - 1);
  __chkstk_darwin(v93);
  sub_10009291C();
  uint64_t v85 = v23;
  sub_100092978();
  __chkstk_darwin(v24);
  sub_100092AF0();
  uint64_t v88 = v25;
  sub_100092978();
  __chkstk_darwin(v26);
  sub_100093194();
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)v84 - v28;
  sub_100086710();
  uint64_t v31 = v30;
  id v101 = 0LL;
  sub_100092930();
  uint64_t v96 = &v101;
  uint64_t v97 = v14;
  uint64_t v94 = v12;
  uint64_t v95 = v10;
  uint64_t v98 = v12;
  uint64_t v99 = v10;
  uint64_t v86 = v8;
  uint64_t v100 = v8;
  sub_1001B2E60();
  uint64_t v32 = (uint64_t)v31;
  double v33 = sub_1000B4050();
  int v92 = v29;
  Date.init(timeIntervalSinceReferenceDate:)(v33);
  int v90 = v6;
  if (v101)
  {
    id v34 = v101;
    *(double *)&uint64_t v35 = COERCE_DOUBLE(sub_100092C38());
    char v37 = v36;

    double v38 = *(double *)&v35;
    if ((v37 & 1) != 0) {
      double v38 = 0.0;
    }
  }

  else
  {
    double v38 = 0.0;
  }

  uint64_t v39 = (uint64_t)v93;
  uint64_t v40 = v91;
  uint64_t v41 = v89;
  uint64_t v42 = OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___purchaseDate;
  double v43 = *(double *)&v31[OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___purchaseDate] - v38;
  Date.init(timeIntervalSinceReferenceDate:)(v38);
  sub_100092F60(v4 + 2, v4[5]);
  unsigned __int8 v44 = sub_100076ABC();
  double v45 = sub_100089698(v1, v44);
  int v93 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
  v93(v1, v39);
  uint64_t v89 = v42;
  if (v43 >= v45)
  {
    uint64_t v47 = sub_1000931A8();
    uint64_t v49 = (uint64_t)v92;
  }

  else
  {
    if (v101)
    {
      id v46 = v101;
      sub_1000B5344(v41);
    }

    else
    {
      sub_100093044(v41, 1LL);
    }

    uint64_t v32 = v88;
    sub_10002A828(v88, (uint64_t)v92, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 16));
    if (sub_10001D158(v41, 1LL, v39) == 1)
    {
      uint64_t v50 = sub_1000931A8();
      uint64_t v53 = sub_10002A828(v50, v51, v52);
      sub_100093290(v53, (uint64_t *)&unk_1002AFCD0);
      goto LABEL_15;
    }

    v93(v32, v39);
    uint64_t v47 = sub_1000931A8();
    uint64_t v49 = v41;
  }

  sub_10002A828(v47, v49, v48);
LABEL_15:
  sub_100093044(v32, 0LL);
  sub_1000B571C();
  sub_1000B57E4();
  int v54 = *(os_unfair_lock_s **)(v4[16] + 16LL);
  sub_10002A4C8();
  os_unfair_lock_lock(v54);
  uint64_t KeyPath = swift_getKeyPath(&unk_1001FAEA8);
  sub_10008EA70(KeyPath);
  uint64_t v57 = v56;
  sub_10002A524();
  os_unfair_lock_unlock(v54);
  swift_release(v4);
  sub_1000B58E0(v57, 0);
  uint64_t v58 = *(void *)(v14 + 80);
  uint64_t v59 = *(void *)(v14 + 88);
  sub_10001FFF0();
  sub_1000B534C(v58, v59);
  sub_100023EEC();
  sub_100019F58(v4 + 2, v4[5]);
  sub_1000B3DEC();
  LODWORD(v58) = sub_100076ABC();
  sub_10003561C();
  uint64_t v60 = *(void *)(v14 + 176);
  int v61 = *(unsigned __int8 *)(v14 + 184);
  uint64_t v62 = *(void *)(v14 + 136);
  LODWORD(vsub_100081CEC(v0 + 88) = v58;
  if (v62)
  {
    swift_retain();
    if ((sub_100087F40() & 1) == 0)
    {
      uint64_t v60 = sub_100139BB8();
      int v61 = v63;
    }

    swift_release(v62);
  }

  uint64_t v64 = sub_10001FFF0();
  static Date.now.getter(v64);
  uint64_t v65 = (void *)sub_100086438();
  sub_100023EEC();
  int v66 = (void (*)(void *, uint64_t))v93;
  v93(v1, v39);
  if (v65)
  {
    LODWORD(v95) = v61;
    uint64_t v67 = v60;
    int v68 = v65;
    double v69 = sub_1000B4050();
    uint64_t v70 = v87;
    sub_100067DA4(v86, v87, (uint64_t *)&unk_1002AFCD0);
    uint64_t v71 = sub_10001D158(v70, 1LL, v39);
    if ((_DWORD)v71 == 1)
    {
      int v68 = v85;
      static Date.now.getter(v71);
      sub_100034F14(v70, (uint64_t *)&unk_1002AFCD0);
    }

    else
    {
      uint64_t v73 = sub_1000931A8();
      uint64_t v72 = sub_10002A828(v73, v70, v74);
    }

    double v75 = Date.timeIntervalSinceReferenceDate.getter(v72);
    v66(v68, v39);
    if (v69 < v75)
    {
      uint64_t v76 = sub_1000B85C8(4u);
      char v78 = v77;

      char v79 = v78 & 1;
      goto LABEL_27;
    }

    uint64_t v60 = v67;

    int v61 = v95;
  }

  Date.init(timeIntervalSinceReferenceDate:)(*(double *)&v31[v89]);
  double v80 = sub_100043A60(v60, v61, v1, v88);
  v66((void *)v1, v39);
  char v79 = 0;
  uint64_t v76 = *(void *)&v80;
LABEL_27:
  sub_1000B58F0(v76, v79);
  uint64_t v81 = *(void *)(v14 + 192);
  uint64_t v82 = *(void *)(v14 + 200);
  sub_10001FFF0();
  sub_1000B58F8(v81, v82);
  sub_100092B18(v31, v90 & 1);
  uint64_t v83 = (char *)sub_1000875DC + 4 * byte_1001FAC60[sub_1000B594C()];
  __asm { BR              X10 }

void sub_1000875DC()
{
  char v3 = sub_100048720(0x77656E6552LL, 0xE500000000000000LL, 0x6F6C6E776F646552LL, 0xEA00000000006461LL);
  sub_10001EDA0();
  if ((v3 & 1) == 0) {
    sub_10008EFB0(v1);
  }
  (*(void (**)(void, uint64_t))(v2 - 200))(*(void *)(v2 - 208), v0);

  sub_100092BA0();
}

void sub_100087670(void *a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v22[0] = a4;
  v22[1] = a5;
  uint64_t v10 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100019F58(a1, a1[3]);
  uint64_t v17 = *(void *)(a3 + 200);
  sub_100067DA4(a6, (uint64_t)v12, (uint64_t *)&unk_1002AFCD0);
  if (sub_10001D158((uint64_t)v12, 1LL, v13) == 1)
  {
    uint64_t v18 = swift_bridgeObjectRetain(v17);
    static Date.now.getter(v18);
    sub_100034F14((uint64_t)v12, (uint64_t *)&unk_1002AFCD0);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    swift_bridgeObjectRetain(v17);
  }

  sub_1000BE628();
  uint64_t v20 = v19;
  swift_bridgeObjectRelease(v17);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  uint64_t v21 = *a2;
  *a2 = v20;
}

void sub_1000877F4(uint64_t a1, char a2)
{
  if (sub_1000B5980())
  {
    sub_1000193B8();
  }

  else
  {
    if ((a2 & 1) != 0) {
      unsigned __int8 v3 = 2;
    }
    else {
      unsigned __int8 v3 = 1;
    }
    sub_1000B59B8(v3);
    if ((a2 & 1) != 0) {
      sub_1000B5A64(1u);
    }
    uint64_t v4 = (void *)sub_100093104();
    sub_100089348(v4, v5);
  }

uint64_t sub_100087858()
{
  uint64_t v1 = v0;
  unsigned __int8 v24 = 4;
  v23[1] = (uint64_t)&_swiftEmptySetSingleton;
  sub_100092930();
  sub_1001B2FD0();
  sub_1000B52F0();
  sub_1001A0CD8(v23, v2);
  if (qword_1002A8CF8 != -1) {
    swift_once(&qword_1002A8CF8, sub_10010EF80);
  }
  sub_10001DBCC();
  sub_10001735C();
  sub_10001EDA0();
  sub_1000B3DEC();
  uint64_t v3 = sub_100092ECC();
  sub_100110964(v3);
  sub_10001A420();
  sub_10002A524();
  sub_1001100C8();
  sub_100092B50();
  if (v5)
  {
    uint64_t v6 = v4;
    uint64_t v7 = v5;
    uint64_t v8 = sub_1000175B0(&qword_1002A9098);
    uint64_t inited = swift_initStackObject(v8, v22);
    *(_OWORD *)(inited + 1sub_100019F7C(v0 + 6) = xmmword_1001F3C00;
    *(void *)(inited + 3sub_100019F7C(v0 + 2) = v6;
    *(void *)(inited + 4sub_10006F0B8(12LL, 0) = v7;
    uint64_t v10 = sub_1000B3DEC();
    uint64_t v12 = v11;
    sub_10002A4C8();
    sub_100077D1C();
    sub_1000930BC(inited, v1, v10, v12);
    unint64_t v14 = v13;
    sub_10001A420();
    swift_setDeallocating(inited);
    sub_1001B7630();
    if (v14 >> 62)
    {
      sub_10001ED74();
      uint64_t v19 = sub_100019448();
      sub_10001A3F8();
      if (v19) {
        goto LABEL_6;
      }
    }

    else if (*(void *)((v14 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
LABEL_6:
      sub_100092D0C();
      uint64_t v15 = (void *)sub_100093148(0LL);
      sub_10001A3F8();
      double v16 = sub_1000B4050();
      if (v16 < sub_1000B4050())
      {
        uint64_t v17 = variable initialization expression of ClientOverride.requestBundleVersion();
        sub_1000B534C(v17, v18);
        sub_100092AA0(v15);
      }

      goto LABEL_11;
    }

    sub_10001A3F8();
  }

BOOL sub_100087A80(void *a1, char *a2, void *a3, uint64_t *a4)
{
  char v8 = sub_10019FC58(a3);
  *a2 = v8;
  if (v8 == 4)
  {
    sub_100019F58(a1, a1[3]);
    uint64_t v9 = sub_1000B3DEC();
    uint64_t v11 = v10;
    sub_1000B52F0();
    uint64_t v13 = sub_10019F928(v9, v11, v12);
    swift_bridgeObjectRelease();
    *a4 = v13;
    swift_bridgeObjectRelease();
    char v8 = *a2;
  }

  return v8 == 4;
}

void sub_100087B44()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_100089290();
  uint64_t v6 = v5;
  unint64_t v7 = v5 >> 62;
  if (v5 >> 62)
  {
    sub_100077D1C();
    uint64_t v8 = sub_100019448();
    sub_10001A420();
  }

  else
  {
    uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v32 = v2;
  uint64_t v31 = v0;
  if (v8)
  {
    sub_100032624();
    if (v8 < 0)
    {
      __break(1u);
      goto LABEL_34;
    }

    for (uint64_t i = 0LL; i != v8; ++i)
    {
      if ((v6 & 0xC000000000000001LL) != 0) {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v6);
      }
      else {
        id v10 = sub_100092C94(v6 + 8 * i);
      }
      uint64_t v11 = v10;
      sub_1000B52F0();
      uint64_t v13 = v12;

      unint64_t v15 = _swiftEmptyArrayStorage[2];
      unint64_t v14 = _swiftEmptyArrayStorage[3];
      if (v15 >= v14 >> 1)
      {
        sub_100092FE4(v14);
        sub_100032624();
      }

      _swiftEmptyArrayStorage[2] = v15 + 1;
      _swiftEmptyArrayStorage[v15 + 4] = v13;
    }
  }

  if (v7)
  {
    sub_100077D1C();
    uint64_t v16 = sub_100019448();
    if (v16)
    {
LABEL_14:
      if (v16 >= 1)
      {
        uint64_t v17 = 0LL;
        uint64_t v18 = _swiftEmptyArrayStorage;
        do
        {
          if ((v6 & 0xC000000000000001LL) != 0) {
            id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v6);
          }
          else {
            id v19 = sub_100092C94(v6 + 8 * v17);
          }
          uint64_t v20 = v19;
          uint64_t v21 = sub_1000B85BC(0x19u);
          char v23 = v22;

          if ((v23 & 1) == 0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
            {
              sub_10009302C();
              uint64_t v18 = v26;
            }

            unint64_t v25 = v18[2];
            unint64_t v24 = v18[3];
            if (v25 >= v24 >> 1)
            {
              sub_100092FE4(v24);
              sub_10009302C();
              uint64_t v18 = v27;
            }

            v18[2] = v25 + 1;
            v18[v25 + 4] = v21;
          }

          ++v17;
        }

        while (v16 != v17);
        goto LABEL_29;
      }

unint64_t sub_100087E18(void *a1, uint64_t a2, unint64_t a3)
{
  return (unint64_t)sub_10019F568(a2, a3) & 1;
}

uint64_t sub_100087E5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(*(void *)(a1 + 96) + 16LL))
  {
    uint64_t v6 = *(void *)(a2 + 16);
    if (v6)
    {
      sub_100077D1C();
      for (uint64_t i = 0LL; i != v6; ++i)
      {
        uint64_t v8 = *(void *)(a2 + 8 * i + 32);
        sub_100111244(v8);
      }

      swift_bridgeObjectRelease();
    }
  }

  uint64_t v9 = swift_endAccess(v14);
  sub_100092DEC(v9);
  if (*(void *)(*(void *)(a1 + 104) + 16LL))
  {
    uint64_t v10 = *(void *)(a3 + 16);
    if (v10)
    {
      sub_10001FFF0();
      for (uint64_t j = 0LL; j != v10; ++j)
      {
        uint64_t v12 = *(void *)(a3 + 8 * j + 32);
        sub_100111244(v12);
      }

      swift_bridgeObjectRelease();
    }
  }

  return swift_endAccess(v14);
}

uint64_t sub_100087F40()
{
  return 0LL;
}

uint64_t sub_100087F94(void *a1, _BYTE *a2)
{
  uint64_t result = sub_1000BC48C();
  *a2 = result & 1;
  return result;
}

void sub_100087FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = sub_100092A18();
  sub_100092E30();
  __chkstk_darwin(v9);
  sub_10001DAD0();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = sub_1000175B0(&qword_1002A9098);
  uint64_t inited = swift_initStackObject(v13, v22);
  *(_OWORD *)(inited + 1sub_100019F7C(v0 + 6) = xmmword_1001F3C00;
  uint64_t v15 = *(void *)(a1 + 192);
  uint64_t v16 = *(void *)(a1 + 200);
  *(void *)(inited + 3sub_100019F7C(v0 + 2) = v15;
  *(void *)(inited + 4sub_10006F0B8(12LL, 0) = v16;
  ChannelPipeline.syncOperations.getter();
  sub_10001ED74();
  sub_100077D1C();
  sub_1000930BC(inited, v3, a2, a3);
  unint64_t v18 = v17;
  swift_setDeallocating(inited);
  sub_1001B7630();
  if (v18 >> 62)
  {
    sub_10001ED74();
    uint64_t v21 = sub_100019448();
    sub_10001A3F8();
    if (v21) {
      goto LABEL_3;
    }
LABEL_5:
    sub_10001A3F8();
    goto LABEL_6;
  }

  if (!*(void *)((v18 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
    goto LABEL_5;
  }
LABEL_3:
  sub_100092D0C();
  id v19 = (void *)sub_100093148(0LL);
  uint64_t v20 = sub_10001A3F8();
  static Date.now.getter(v20);
  sub_1000B5190();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v12, v8);
LABEL_6:
  sub_100023E74();
}

uint64_t sub_100088140()
{
  return 0LL;
}

void sub_1000881AC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6)
{
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  void v12[2] = a5;
  uint64_t v10 = sub_100176598((uint64_t (*)(id *))sub_100092824, (uint64_t)v12, v9);
  swift_bridgeObjectRelease();
  uint64_t v11 = *a6;
  *a6 = v10;
}

uint64_t sub_100088268()
{
  uint64_t v9 = 0LL;
  sub_100092D6C();
  sub_100075EE8(v2, v0);
  uint64_t v3 = sub_100077C8C();
  uint64_t v5 = sub_1000D868C(v3, v4);
  sub_100024F0C();
  uint64_t v6 = sub_100019F58((void *)(v1 + 56), *(void *)(v1 + 80));
  __chkstk_darwin(v6);
  if (v5)
  {
    sub_100092E8C();
    *(void *)(v7 - 3sub_100019F7C(v0 + 2) = &v9;
    *(void *)(v7 - 2sub_100019F7C(v0 + 4) = v2;
    *(void *)(v7 - 1sub_100019F7C(v0 + 6) = v0;
    *(void *)(v7 - 8) = v5;
    sub_1001B2E60();
    swift_release();
  }

  else
  {
    sub_1001B2E60();
  }

  return v9;
}

void sub_10008837C(void *a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a5 + 192);
  uint64_t v9 = *(void *)(a5 + 200);
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_1000BC720(a3, a4, v10, v9, 1LL);
  swift_bridgeObjectRelease();
  uint64_t v12 = *a2;
  *a2 = (void *)v11;
}

void sub_1000883F8(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  *a2 = v4;
}

void sub_10008845C()
{
}

uint64_t sub_100088468(void *a1, void *a2)
{
  *a2 = v3;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000884B8()
{
  uint64_t v82 = v2;
  uint64_t v83 = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v75 = v12;
  uint64_t v14 = v13;
  uint64_t v15 = sub_100085978();
  if (v16 >> 60 != 15)
  {
    uint64_t v22 = v15;
    uint64_t v23 = v16;
    uint64_t v74 = v14;
    uint64_t v24 = sub_10008EB04();
    if (!v24)
    {
      if (qword_1002A8D90 != -1) {
        swift_once(&qword_1002A8D90, sub_100183E34);
      }
      uint64_t v50 = sub_100077D08();
      sub_100092ADC(v50, (uint64_t)qword_1002EB9D0);
      os_log_type_t v51 = sub_100092B20();
      if (sub_100092998(v51))
      {
        uint64_t v52 = (_WORD *)sub_100019464(2LL);
        sub_100093200(v52);
        sub_100092AAC((void *)&_mh_execute_header, v53, v54, "Unable to find a signing identity for the provided data");
        sub_10001A408(v14);
      }

      uint64_t v55 = sub_1000931DC();
      sub_10003AACC(v55, v56);
      goto LABEL_28;
    }

    unint64_t v25 = (void *)v24;
    uint64_t v72 = v11;
    uint64_t v73 = v9;
    uint64_t v81 = 0LL;
    uint64_t v26 = sub_100092930();
    __chkstk_darwin(v26);
    sub_100092E8C();
    *(void *)(v27 - 3sub_100019F7C(v0 + 2) = &v81;
    *(void *)(v27 - 2sub_100019F7C(v0 + 4) = v74;
    *(void *)(v27 - 1sub_100019F7C(v0 + 6) = v75;
    id v29 = *v28;
    sub_1001B2E60();
    uint64_t v30 = v81;
    if (!v81)
    {
      __break(1u);
      JUMPOUT(0x100088D78LL);
    }

    uint64_t v70 = v22;
    uint64_t v71 = v7;
    if ((unint64_t)v81 >> 62)
    {
      if (v81 >= 0) {
        uint64_t v69 = v81 & 0xFFFFFFFFFFFFFF8LL;
      }
      else {
        uint64_t v69 = v81;
      }
      sub_10001FFF0();
      uint64_t v31 = _CocoaArrayWrapper.endIndex.getter(v69);
    }

    else
    {
      uint64_t v31 = *(void *)((v81 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      sub_10001FFF0();
    }

    if (v31)
    {
      if (v31 < 1)
      {
        __break(1u);
        goto LABEL_42;
      }

      for (uint64_t i = 0LL; i != v31; ++i)
      {
        if ((v30 & 0xC000000000000001LL) != 0) {
          id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v30);
        }
        else {
          id v33 = sub_100092C94(v30 + 8 * i);
        }
        id v34 = v33;
        sub_1000B5ADC();
        if ((v35 & 1) != 0)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"quantity");
          sub_100092FB4();
          sub_1000B5B90();
          sub_100092A8C();
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"productID");
          sub_100092FB4();
          sub_1000B3DDC();
          sub_100092A8C();
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"transactionID");
          sub_100092FB4();
          sub_1000B52F0();
          id v78 = (id)dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
          uint64_t v79 = v36;
          sub_100092A8C();
          uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"originalTransactionDate");
          uint64_t v39 = v38;
          sub_1000B4050();
          double v80 = (void *)sub_100092A18();
          sub_10005F580(&v78);
          sub_100092B5C();
          sub_1001B1C84((uint64_t)&v78, v37, v39);
          uint64_t v40 = sub_1000B85BC(8u);
          if ((v41 & 1) == 0)
          {
            uint64_t v42 = (void *)v40;
            sub_100092EC4(0xCu);
            if ((v43 & 1) == 0)
            {
              uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"originalTransactionID");
              uint64_t v46 = v45;
              id v78 = v42;
              uint64_t v47 = (void *)dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
              double v80 = &type metadata for String;
              id v78 = v47;
              uint64_t v79 = v48;
              sub_1001B1C84((uint64_t)&v78, v44, v46);
              static String._unconditionallyBridgeFromObjectiveC(_:)(@"purchaseDate");
              sub_100092B04();
              sub_100092B5C();
              sub_100092C44((uint64_t)&v78);
            }
          }

          sub_1000B5BB8();
          sub_100092BD8();
          __asm { BR              X9 }
        }
      }
    }

    sub_100023EEC();
    sub_100077D1C();
    sub_10001FFF0();
    sub_10001ED74();
    sub_100069BA4((uint64_t)_swiftEmptyArrayStorage);
    sub_10003561C();
    id v57 = objc_allocWithZone((Class)&OBJC_CLASS___ASOctaneReceiptEncoder);
    id v1 = sub_100091668();
    id v78 = 0LL;
    id v58 = objc_msgSend(v1, "encodeAndSignWithIdentity:error:", v25, &v78, v70, v23, v71, v5, v72, v73);
    uint64_t v30 = (uint64_t)v78;
    id v0 = v78;
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v58);

    if (!v0)
    {

      sub_100092AC0();
LABEL_35:

      swift_bridgeObjectRelease();
      return sub_100092F80();
    }

    uint64_t v59 = qword_1002A8D90;
    id v29 = v0;
    if (v59 == -1)
    {
LABEL_31:
      uint64_t v60 = sub_100077D08();
      int v61 = (os_log_s *)sub_100018F68(v60, (uint64_t)qword_1002EB9D0);
      id v62 = v29;
      Logger.logObject.getter(v62);
      os_log_type_t v63 = sub_100092F58();
      char v77 = v61;
      if (os_log_type_enabled(v61, v63))
      {
        uint64_t v64 = (uint8_t *)sub_100019464(12LL);
        id v76 = v0;
        uint64_t v65 = (void *)sub_100019464(8LL);
        *(_DWORD *)uint64_t v64 = 138412290;
        id v78 = v62;
        id v66 = v62;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v64 + 4);
        void *v65 = v30;

        sub_100092A00((void *)&_mh_execute_header, v77, v63, "Error encoding and signing receipt: %@", v64);
        sub_1000175B0(&qword_1002B6F90);
        sub_10009293C((uint64_t)v65);
        uint64_t v67 = (uint64_t)v65;
        id v0 = v76;
        sub_10001A408(v67);
        sub_10001A408((uint64_t)v64);
        sub_100093264();

        sub_100092AC0();
      }

      else
      {
        sub_100093264();

        sub_100092AC0();
      }

      goto LABEL_35;
    }

LABEL_42:
    swift_once(&qword_1002A8D90, sub_100183E34);
    goto LABEL_31;
  }

  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v17 = sub_100077D08();
  sub_100092ADC(v17, (uint64_t)qword_1002EB9D0);
  os_log_type_t v18 = sub_100092B20();
  if (sub_100092998(v18))
  {
    id v19 = (_WORD *)sub_100019464(2LL);
    sub_100093200(v19);
    sub_100092AAC((void *)&_mh_execute_header, v20, v21, "Failed to find bundled signing key data");
    sub_10001A408(v14);
  }

LABEL_28:
  return sub_100092F80();
}

        __break(1u);
        goto LABEL_29;
      }
    }

    __break(1u);
    goto LABEL_28;
  }

  uint64_t v21 = v11[3];
  uint64_t result = swift_release(v11);
  uint64_t v22 = (v21 >> 1) - v12;
  uint64_t v23 = __OFADD__(v7, v22);
  v7 += v22;
  if (!v23) {
    goto LABEL_24;
  }
LABEL_33:
  __break(1u);
  return result;
}

        a3 = sub_10002F128(0LL, *(void *)(a3 + 16) + 1LL, 1LL, a3);
        goto LABEL_14;
      }
    }

    __break(1u);
    goto LABEL_28;
  }

  sub_100173274(v29, v5, v30);
LABEL_22:
  swift_release();
  return swift_bridgeObjectRelease();
}

    uint64_t v6 = (v12 - 1) & v12;
    uint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    uint64_t v8 = v13;
  }

  uint64_t v17 = v16 + 4;
  if (v17 >= v32)
  {
LABEL_40:
    sub_10002A51C();
    sub_100018F04(a1);
    return;
  }

  uint64_t v12 = *(void *)(v33 + 8 * v17);
  if (v12)
  {
    uint64_t v13 = v17;
    goto LABEL_28;
  }

  while (!__OFADD__(v17, 1LL))
  {
    sub_1001B9AFC();
    if (v14 == v15) {
      goto LABEL_40;
    }
    sub_1001B9AF0();
    uint64_t v17 = v18 + 1;
    if (v12) {
      goto LABEL_28;
    }
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_100088D88(void *a1, void *a2)
{
  *a2 = v3;
  return swift_bridgeObjectRelease();
}

void sub_100088DDC(void *a1, char a2, char a3)
{
  char v5 = a3 & 1;
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_10001DAD0();
  uint64_t v10 = v9 - v8;
  uint64_t v12 = Date.init()(v11);
  uint64_t v13 = Date.timeIntervalSinceReferenceDate.getter(v12);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  sub_1000B5C60(v5);
  sub_1000B5CB4(v13, 0);
  sub_1000B5D10(1);
  sub_100089348(a1, 1);
  sub_10009305C();
  if (v15)
  {
    if ((a2 & 1) != 0)
    {
      if (qword_1002A8CF8 != -1) {
        swift_once(&qword_1002A8CF8, sub_10010EF80);
      }
      uint64_t v16 = sub_1000175B0(&qword_1002A9098);
      uint64_t v17 = swift_allocObject(v16, 48LL, 7LL);
      *(_OWORD *)(v17 + 1sub_100019F7C(v0 + 6) = xmmword_1001F3C00;
      *(void *)(v17 + 3sub_100019F7C(v0 + 2) = sub_1000B3DDC();
      *(void *)(v17 + 4sub_10006F0B8(12LL, 0) = v18;
      uint64_t v19 = sub_1000B3DEC();
      sub_10010FC00(v17, v19, v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }

  else
  {
    char v21 = v14;
    unint64_t v22 = sub_1000588D4();
    uint64_t v23 = sub_1000252D0((uint64_t)&type metadata for TransactionError, v22);
    *uint64_t v24 = v21;
    swift_willThrow(v23);
  }

void sub_100088F7C(void *a1)
{
  os_log_type_t v2 = v1;
  if ((sub_1000B5D50() & 1) != 0)
  {
    sub_10008E8A8(a1);
  }

  else
  {
    sub_10009312C();
    if ((v5 & 1) != 0)
    {
      sub_10008E68C();
    }

    else
    {
      if (qword_1002A8D90 != -1) {
        swift_once(&qword_1002A8D90, sub_100183E34);
      }
      uint64_t v6 = sub_100077D08();
      sub_100092ADC(v6, (uint64_t)qword_1002EB9D0);
      os_log_type_t v7 = sub_100092F58();
      if (sub_100024E9C(v7))
      {
        uint64_t v8 = (uint8_t *)sub_100019464(2LL);
        *(_WORD *)uint64_t v8 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)a1,  v2,  "Trying to resolve billing issue for transaction with no issues",  v8,  2u);
        sub_10001A408((uint64_t)v8);
      }
    }
  }

  if (qword_1002A8CF8 != -1) {
    swift_once(&qword_1002A8CF8, sub_10010EF80);
  }
  uint64_t v9 = sub_1000B3DEC();
  sub_10010F5E4(v9, v10);
  sub_100019390();
  sub_1000193B8();
}

void sub_1000890AC()
{
}

uint64_t sub_100089104(void *a1, void *a2)
{
  *a2 = v3;
  return swift_bridgeObjectRelease();
}

uint64_t sub_100089154()
{
  return 0LL;
}

void sub_10008919C(void *a1, void **a2, uint64_t a3)
{
  uint64_t v5 = sub_1000BDF50(a3);
  uint64_t v6 = *a2;
  *a2 = (void *)v5;
}

uint64_t sub_1000891E0()
{
  return 0LL;
}

void sub_100089234(void *a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_1000BDDFC(a3, a4, a5);
  uint64_t v10 = *a2;
  *a2 = (void *)v9;
}

void sub_100089290()
{
}

void sub_10008929C()
{
}

uint64_t sub_1000892F4(void *a1, void *a2)
{
  *a2 = v3;
  return swift_bridgeObjectRelease();
}

uint64_t sub_100089348(void *a1, char a2)
{
  uint64_t v4 = OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels;
  if ((*((_BYTE *)a1 + OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels) & 1) != 0)
  {
    if (qword_1002A8CF8 != -1) {
      swift_once(&qword_1002A8CF8, sub_10010EF80);
    }
    uint64_t v5 = sub_1000175B0(&qword_1002A9098);
    uint64_t v6 = (__n128 *)sub_100092954(v5);
    v6[2].n128_u64[0] = sub_100092A60(v6, (__n128)xmmword_1001F3C00);
    v6[2].n128_u64[1] = v7;
    sub_1000E23DC(1, (uint64_t)v6, 0xD000000000000021LL, 0x800000010021B1B0LL);
    sub_10001A420();
    sub_10008EFB0(a1);
  }

  if ((a2 & 1) != 0 && (*((_BYTE *)a1 + v4) & 2) != 0)
  {
    sub_1000B5E54();
    if ((v8 & 1) != 0)
    {
      if (qword_1002A8CF8 != -1) {
        swift_once(&qword_1002A8CF8, sub_10010EF80);
      }
      uint64_t v9 = sub_1000175B0(&qword_1002A9098);
      uint64_t v10 = (__n128 *)sub_100092954(v9);
      v10[2].n128_u64[0] = sub_100092A60(v10, (__n128)xmmword_1001F3C00);
      v10[2].n128_u64[1] = v11;
      sub_1000E23DC(0, (uint64_t)v10, 0xD000000000000021LL, 0x800000010021B1B0LL);
      sub_100023EEC();
    }
  }

  if (qword_1002A8CF8 != -1) {
    swift_once(&qword_1002A8CF8, sub_10010EF80);
  }
  sub_1001101BC();
  return 4LL;
}

BOOL sub_10008951C(void *a1, _BYTE *a2, void *a3)
{
  char v5 = sub_10019FD54(a3);
  *a2 = v5;
  return v5 == 4;
}

void *sub_100089568()
{
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100089604(void *a1, uint64_t *a2, _BYTE *a3)
{
  uint64_t v5 = sub_1000BE148();
  char v7 = v6;
  *a2 = v5;
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v7 & 1;
  return result;
}

double sub_100089698(uint64_t a1, unsigned __int8 a2)
{
  unsigned int v3 = a2;
  uint64_t v4 = sub_100092A18();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100092F38();
  uint64_t v8 = v6 - v7;
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v21 - v10;
  int v12 = a2 >> 6;
  if (v3 > 0x3F)
  {
    if (v12 != 2)
    {
      sub_100092D20();
      sub_10019EE34(5);
      double v14 = v19 + v19;
      goto LABEL_9;
    }
  }

  else if (a2)
  {
    sub_100092D20();
    double v13 = (double)sub_1001BE830(v8, 2LL, 5);
    double v14 = sub_10019EDE8(a2) * v13;
LABEL_9:
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
    return v14;
  }

  uint64_t v15 = sub_100077C8C();
  v16(v15);
  double v17 = sub_10019EC88(60LL, 3, a2, (uint64_t)v11);
  double v18 = 1.0;
  if (v12 == 2) {
    double v18 = 2.0;
  }
  return v18 * v17;
}

void sub_1000897D0()
{
  uint64_t v104 = v3;
  uint64_t v105 = v5;
  uint64_t v99 = v0;
  uint64_t v7 = v6;
  sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  sub_1000226C8();
  __chkstk_darwin(v8);
  sub_10009291C();
  uint64_t v97 = v9;
  sub_100092978();
  __chkstk_darwin(v10);
  int v12 = (char *)&v91 - v11;
  uint64_t v13 = sub_100092A18();
  double v14 = *(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v13 - 8);
  __chkstk_darwin(v13);
  sub_10009291C();
  uint64_t v95 = v15;
  sub_100092978();
  __chkstk_darwin(v16);
  sub_100092AF0();
  uint64_t v94 = v17;
  sub_100092978();
  __chkstk_darwin(v18);
  sub_100092AF0();
  uint64_t v96 = v19;
  sub_100092978();
  __chkstk_darwin(v20);
  sub_100092AF0();
  uint64_t v98 = v21;
  sub_100092978();
  __chkstk_darwin(v22);
  sub_100092E80();
  uint64_t v100 = v23;
  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v24 = sub_100077D08();
  uint64_t v25 = sub_100018F68(v24, (uint64_t)qword_1002EB9D0);
  id v26 = v7;
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (sub_100092944(v28))
  {
    uint64_t v1 = (uint64_t)v14;
    uint64_t v29 = v13;
    uint64_t v30 = (uint8_t *)sub_100019464(12LL);
    *(_DWORD *)uint64_t v30 = 134217984;
    sub_1000B52F0();
    uint64_t v102 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v30 + 4);

    sub_100092A00((void *)&_mh_execute_header, v27, v2, "Beginning billing retry for transaction: %lu", v30);
    uint64_t v32 = (uint64_t)v30;
    uint64_t v13 = v29;
    sub_10001A408(v32);
  }

  else
  {
  }

  uint64_t v33 = sub_1000B85C8(4u);
  if ((v34 & 1) != 0)
  {
    uint64_t v35 = sub_100093038((uint64_t)v12, 1LL);
    goto LABEL_17;
  }

  Date.init(timeIntervalSinceReferenceDate:)(*(double *)&v33);
  sub_100093038((uint64_t)v12, 0LL);
  uint64_t v35 = sub_100092E40();
  if ((_DWORD)v35 == 1)
  {
LABEL_17:
    sub_100092CB4(v35, (uint64_t *)&unk_1002AFCD0);
    Logger.logObject.getter(v68);
    os_log_type_t v69 = sub_100092B20();
    if (sub_100092998(v69))
    {
      uint64_t v70 = (_WORD *)sub_100019464(2LL);
      sub_100093200(v70);
      sub_100092AAC( (void *)&_mh_execute_header,  v71,  v72,  "Can't start billing retry on transaction without expiration date");
      sub_10001A408(v1);
    }

    return;
  }

  uint64_t v92 = v25;
  uint64_t v36 = sub_100092D78(v100, (uint64_t)v12, v14[4]);
  sub_100093074(v36, *(void *)(v99 + 40));
  uint64_t v37 = v14;
  uint64_t v38 = sub_1000B3DDC();
  uint64_t v40 = v39;
  uint64_t v41 = sub_1000B3DEC();
  uint64_t v42 = v26;
  sub_100075EE8(v41, v43);
  uint64_t v44 = sub_1000D868C(v38, v40);
  sub_100024F0C();
  sub_100023EF4();
  uint64_t v45 = sub_10001DC10();
  int v93 = v37;
  if (v44)
  {
    uint64_t v46 = v99;
    sub_100093074(v45, *(void *)(v99 + 40));
    uint64_t v47 = v44;
    sub_100093160();
    unsigned __int8 v48 = sub_100076ABC();
    uint64_t v49 = sub_10003561C();
    sub_100093074(v49, *(void *)(v46 + 40));
    sub_100093160();
    BOOL v50 = sub_100076FA0();
    uint64_t v51 = sub_100023EEC();
    uint64_t v52 = *(void *)(v47 + 176);
    int v53 = *(unsigned __int8 *)(v47 + 184);
    uint64_t v54 = v98;
    static Date.now.getter(v51);
    uint64_t v55 = sub_1001BE830(v54, v52, v53);
    unint64_t v56 = v37[1];
    sub_1000932A0(v54);
    uint64_t v57 = v100;
    unsigned __int8 v58 = v48;
    unsigned __int8 v59 = v48;
    uint64_t v60 = v56;
    double v61 = sub_100089698(v100, v59);
    uint64_t v62 = v97;
    static Date.+ infix(_:_:)(v57, v61);
    sub_10001762C(v62, 0LL, 1LL, v13);
    sub_1000B5FC4();
    if (!v50)
    {
LABEL_40:
      sub_100089348(v42, 0);
      swift_release();
      ((void (*)(uint64_t, uint64_t))v60)(v100, v13);
      return;
    }

    uint64_t v92 = v47;
    if (!v58 || (int v63 = v58 >> 6, v63 == 2))
    {
      if (v55 <= 7) {
        uint64_t v81 = 6LL;
      }
      else {
        uint64_t v81 = 16LL;
      }
      uint64_t v82 = v93[2];
      uint64_t v83 = v98;
      uint64_t v84 = v100;
      v82(v98, v100, v13);
      double v85 = sub_10019EC88(v81, 3, v58, v83);
      uint64_t v86 = v96;
      static Date.+ infix(_:_:)(v84, v85);
      v82(v62, v86, v13);
      sub_100092CD4();
      ((void (*)(uint64_t, uint64_t))v60)(v86, v13);
      goto LABEL_40;
    }

    uint64_t v64 = v93[2];
    if (v55 > 7)
    {
      uint64_t v65 = v95;
      sub_100092D78(v95, v100, v64);
      if (v58 >> 6)
      {
        if (v63 != 1)
        {
          sub_100092BBC();
          double v67 = dbl_1001FAED8[v58 & 0x3F];
          goto LABEL_34;
        }

        sub_10019EE34(5);
        double v67 = v66;
      }

      else
      {
        sub_1001BE830(v65, 1LL, 5);
        double v67 = sub_1000930F8() * v4;
      }

      sub_100092BBC();
LABEL_34:
      double v90 = v67 * 0.5;
LABEL_39:
      static Date.+ infix(_:_:)(v100, v90);
      sub_100092CD4();
      goto LABEL_40;
    }

    uint64_t v87 = v94;
    sub_100092D78(v94, v100, v64);
    if (v58 >> 6)
    {
      if (v63 != 1)
      {
        sub_100092BBC();
        double v89 = dbl_1001FAED8[v58 & 0x3F];
        goto LABEL_38;
      }

      sub_10019EE34(4);
      double v89 = v88;
    }

    else
    {
      sub_1001BE830(v87, 1LL, 4);
      double v89 = sub_1000930F8() * v4;
    }

    sub_100092BBC();
LABEL_38:
    double v90 = v89 * 6.0 / 7.0;
    goto LABEL_39;
  }

  id v73 = v26;
  uint64_t v74 = (os_log_s *)Logger.logObject.getter(v73);
  os_log_type_t v76 = static os_log_type_t.error.getter(v74, v75);
  if (os_log_type_enabled(v74, v76))
  {
    char v77 = (uint8_t *)sub_100019464(12LL);
    uint64_t v78 = sub_100019464(32LL);
    uint64_t v102 = v78;
    *(_DWORD *)char v77 = 136315138;
    uint64_t v79 = sub_1000B3DDC();
    uint64_t v101 = sub_1000CF360(v79, v80, &v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v77 + 4);
    sub_10001EDA0();

    sub_100092A00((void *)&_mh_execute_header, v74, v76, "Can't start billing retry because %s is unavailable", v77);
    sub_10009293C(v78);
    sub_10001A408(v78);
    sub_10001A408((uint64_t)v77);
  }

  else
  {
  }

  sub_100092E08(v100, (uint64_t (*)(uint64_t, uint64_t))v93[1]);
}

uint64_t sub_100089E70()
{
  uint64_t v24 = v0;
  uint64_t v25 = v1;
  char v3 = v2;
  uint64_t v5 = v4;
  if ((v2 & 1) != 0) {
    char v6 = 0;
  }
  else {
    char v6 = 3;
  }
  uint64_t result = sub_1000B4EE8();
  if (((1 << result) & 0x36) != 0) {
    goto LABEL_5;
  }
  if ((_BYTE)result) {
    uint64_t v20 = 10LL;
  }
  else {
    uint64_t v20 = result;
  }
  uint64_t v21 = 10LL;
  if ((v3 & 1) != 0) {
    uint64_t v21 = 0LL;
  }
  if (v20 != v21)
  {
LABEL_5:
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v8 = sub_100077D08();
    sub_100018F68(v8, (uint64_t)qword_1002EB9D0);
    id v9 = v5;
    uint64_t v10 = (void *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (sub_100092944(v11))
    {
      uint64_t v12 = sub_100019464(22LL);
      uint64_t v13 = sub_100019464(32LL);
      uint64_t v23 = v13;
      sub_1000929A8(3.8521e-34);
      sub_1000931B4();
      sub_100092A20(v14, v15);

      *(_WORD *)(v12 + 1sub_100019F7C(v0 + 2) = 2080;
      LOBYTE(v2sub_100019F7C(v0 + 2) = v6;
      uint64_t v16 = String.init<A>(describing:)(&v22, &unk_10027FA80);
      uint64_t v22 = sub_1000CF360(v16, v17, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v12 + 14);
      swift_bridgeObjectRelease();
      sub_100092A44((void *)&_mh_execute_header, v18, v19, "putting transaction %lu into price increase %s");
      sub_10009293C(v13);
      sub_10001A408(v13);
      sub_10001A408(v12);
    }

    else
    {
    }

    sub_1000B53F0(v6);
    return sub_100092AA0(v9);
  }

  return result;
}

uint64_t sub_10008A040(void *a1, char a2)
{
  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_100018F68(v4, (uint64_t)qword_1002EB9D0);
  id v5 = a1;
  char v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc(18LL, -1LL);
    *(_DWORD *)uint64_t v8 = 134218240;
    sub_1000B52F0();
    uint64_t v24 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v8 + 4);

    *(_WORD *)(v8 + 1sub_100019F7C(v0 + 2) = 1024;
    LODWORD(v2sub_100019F7C(v0 + 4) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, (char *)&v24 + 4, v8 + 14);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "resolving price increase for %lu with response: %{BOOL}d",  (uint8_t *)v8,  0x12u);
    sub_10001A408(v8);
  }

  else
  {
  }

  int v10 = sub_1000B4EE8();
  if (!v10)
  {
    if ((a2 & 1) == 0)
    {
      sub_1000B53F0(2);
      uint64_t v18 = variable initialization expression of ClientOverride.requestBundleVersion();
      sub_1000B534C(v18, v19);
      return sub_100089348(v5, 1);
    }

    char v11 = 1;
LABEL_11:
    sub_1000B53F0(v11);
    return sub_100089348(v5, 1);
  }

  if (v10 == 3)
  {
    char v11 = 4;
    goto LABEL_11;
  }

  id v12 = v5;
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v15 = static os_log_type_t.error.getter(v13, v14);
  if (os_log_type_enabled(v13, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v16 = 134217984;
    sub_1000B52F0();
    uint64_t v24 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v16 + 4);

    _os_log_impl( (void *)&_mh_execute_header,  v13,  v15,  "cannot resolve price increase on transaction %lu which does not need consent or notice",  v16,  0xCu);
    sub_10001A408((uint64_t)v16);
  }

  else
  {

    uint64_t v13 = (os_log_s *)v12;
  }

  unint64_t v21 = sub_1000588D4();
  uint64_t v22 = sub_1000252D0((uint64_t)&type metadata for TransactionError, v21);
  _BYTE *v23 = 0;
  return swift_willThrow(v22);
}

uint64_t sub_10008A2FC()
{
  char v86 = 1;
  char v3 = (void *)sub_10008A880(v1);
  if (v3)
  {
    id v4 = v3;
    sub_100092B50();
    if (!v5)
    {
      if (qword_1002A8D90 != -1) {
        swift_once(&qword_1002A8D90, sub_100183E34);
      }
      uint64_t v18 = sub_100077D08();
      id v19 = sub_100092D58(v18, (uint64_t)qword_1002EB9D0);
      sub_100023E58();
      id v20 = v19;
      sub_100092BFC();
      os_log_type_t v21 = sub_100092DA8();
      if (sub_100092944(v21))
      {
        uint64_t v22 = sub_100019464(22LL);
        uint64_t v23 = sub_100019464(32LL);
        uint64_t v85 = v23;
        sub_1000929A8(3.8521e-34);
        sub_100092DC4();
        uint64_t v84 = v1;
        sub_100092960((uint64_t)&v84);

        uint64_t v24 = sub_100092984();
        uint64_t v84 = sub_10009296C(v24, v25, &v85);
        sub_100092960((uint64_t)&v84);
        sub_100077C58();
        sub_100092A44( (void *)&_mh_execute_header,  v26,  v27,  "transaction %lu for %s has a pending message but has no subscription group ID");
        uint64_t v28 = v23;
        uint64_t v29 = 1LL;
LABEL_32:
        swift_arrayDestroy(v28, v29);
        sub_10001A408(v23);
        sub_10001A408(v22);

        return sub_1000931DC();
      }

      goto LABEL_33;
    }

    if (v86 == 3)
    {
      type metadata accessor for BillingErrorHelperRoute();
      uint64_t v6 = sub_100092D34();
      sub_100019E68(v6, v7, v8, v9);
      sub_10001DC10();

      return sub_1000931DC();
    }

    type metadata accessor for PriceIncreaseUIRoute();
    uint64_t v30 = sub_100092D34();
    sub_100049804(v30, v31, v32, v33);
    char v2 = v34;
    sub_10001DC10();
    sub_1000B4EE8();
    sub_100093050();
    if (v36)
    {
      char v38 = 4;
    }

    else
    {
      sub_1000AA0C4(v35);
      char v38 = v37;
    }

    uint64_t v39 = (uint64_t)v4;
    sub_1000B4EE8();
    sub_100093050();
    if (v36)
    {
      if (v38 == 4) {
        goto LABEL_22;
      }
    }

    else
    {
      sub_1000AA1A4(v40);
      if (v38 == 4)
      {
LABEL_22:
        sub_10003561C();
        if (qword_1002A8D90 != -1) {
          swift_once(&qword_1002A8D90, sub_100183E34);
        }
        uint64_t v42 = sub_100077D08();
        id v19 = sub_100092D58(v42, (uint64_t)qword_1002EB9D0);
        sub_100023E58();
        id v43 = v19;
        sub_100092BFC();
        os_log_type_t v44 = sub_100092DA8();
        if (sub_100092944(v44))
        {
          uint64_t v22 = sub_100019464(32LL);
          uint64_t v23 = sub_100019464(64LL);
          uint64_t v85 = v23;
          sub_1000929A8(3.8522e-34);
          sub_100092DC4();
          uint64_t v84 = v39;
          sub_100092960((uint64_t)&v84);

          uint64_t v45 = sub_100092984();
          uint64_t v84 = sub_10009296C(v45, v46, &v85);
          sub_100092960((uint64_t)&v84);
          sub_100077C58();
          sub_100093118();
          uint64_t v49 = sub_1000930C4(v47, (uint64_t)&type metadata for MessageReason, v48);
          uint64_t v53 = sub_100093270(v49, v50, v51, v52);
          sub_100092CBC(v53, v54, v55, v56, v57, v58, v59, v60, v83, v84);
          sub_10001EDA0();
          uint64_t v62 = "transaction %lu for %s has a pending message incompatible type for message %s";
LABEL_31:
          sub_100092E50((void *)&_mh_execute_header, (os_log_s *)v2, v61, v62);
          uint64_t v28 = v23;
          uint64_t v29 = 2LL;
          goto LABEL_32;
        }

        goto LABEL_33;
      }

      uint64_t v39 = v41;
      if (v41 != 2)
      {

        return sub_1000931DC();
      }
    }

    sub_10003561C();
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v63 = sub_100077D08();
    id v19 = sub_100092D58(v63, (uint64_t)qword_1002EB9D0);
    sub_100023E58();
    id v64 = v19;
    sub_100092BFC();
    os_log_type_t v65 = sub_100092DA8();
    if (sub_100092944(v65))
    {
      uint64_t v22 = sub_100019464(32LL);
      uint64_t v23 = sub_100019464(64LL);
      uint64_t v85 = v23;
      sub_1000929A8(3.8522e-34);
      sub_100092DC4();
      uint64_t v84 = v39;
      sub_100092960((uint64_t)&v84);

      uint64_t v66 = sub_100092984();
      uint64_t v84 = sub_10009296C(v66, v67, &v85);
      sub_100092960((uint64_t)&v84);
      sub_100077C58();
      sub_100093118();
      uint64_t v70 = sub_1000930C4(v68, (uint64_t)&type metadata for MessageReason, v69);
      uint64_t v74 = sub_100093270(v70, v71, v72, v73);
      sub_100092CBC(v74, v75, v76, v77, v78, v79, v80, v81, v83, v84);
      sub_10001EDA0();
      uint64_t v62 = "transaction %lu for %s has a pending message (%s incompatible type for message control";
      goto LABEL_31;
    }

uint64_t sub_10008A880(uint64_t a1)
{
  return 0LL;
}

void sub_10008A8EC(void *a1, void **a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v10 = sub_1000BF32C(&off_100271BB8, a3, a4);
  char v11 = *a2;
  *a2 = (void *)v10;

  *a5 = 1;
  if (!*a2)
  {
    sub_100019F58(a1, a1[3]);
    id v12 = sub_1000BF670();
    if (v12)
    {
      os_log_type_t v13 = *a2;
      *a2 = v12;

      *a5 = 3;
    }
  }

void sub_10008A998()
{
  uint64_t v92 = v1;
  uint64_t v93 = v2;
  id v4 = v3;
  uint64_t v6 = v5;
  char v8 = v7;
  uint64_t v9 = (void *)sub_10008AF40(v0);
  if (v9)
  {
    id v10 = v9;
    sub_1000B8508(0xFu);
    if (v12)
    {
      uint64_t v13 = v11;
      uint64_t v14 = v12;
      type metadata accessor for PriceIncreaseUIRoute();
      sub_100049804(v13, v14, v6, v4);
      sub_100023EF4();
      sub_1000B4EE8();
      sub_100093050();
      if (v63 || (sub_1000AA0C4(v15), sub_10009305C(), v63))
      {
        sub_10001DC10();
        if (qword_1002A8D90 != -1) {
          swift_once(&qword_1002A8D90, sub_100183E34);
        }
        uint64_t v17 = sub_100077D08();
        id v18 = sub_10009316C(v17, (uint64_t)qword_1002EB9D0);
        sub_100023E58();
        id v10 = v18;
        id v19 = (os_log_s *)Logger.logObject.getter(v10);
        os_log_type_t v21 = static os_log_type_t.error.getter(v19, v20);
        if (sub_100092FC4(v21))
        {
          uint64_t v22 = sub_100019464(32LL);
          uint64_t v23 = sub_100019464(32LL);
          v91[0] = v23;
          sub_100092E60(3.8522e-34);
          uint64_t v25 = v24;

          sub_100092A7C(v26, v27, v28, v22 + 12, v29, v30, v31, v32, v25);
          *(_WORD *)(v22 + 1sub_100019F7C(v0 + 2) = 2080;
          uint64_t v33 = sub_100019320();
          uint64_t v35 = sub_10009296C(v33, v34, v91);
          sub_100092A7C(v35, v36, v37, v22 + 22, v38, v39, v40, v41, v35);
          sub_100077C58();
          sub_100093090();
          sub_100092C9C(v42, v43, v90);
          os_log_type_t v44 = "transaction %lu for %s in %ld has a pending message incompatible type for message";
LABEL_26:
          _os_log_impl((void *)&_mh_execute_header, v19, (os_log_type_t)v14, v44, (uint8_t *)v22, 0x20u);
          sub_10009293C(v23);
          sub_10001A408(v23);
          sub_10001A408(v22);

          goto LABEL_29;
        }
      }

      else
      {
        LOBYTE(v1sub_100019F7C(v0 + 4) = v16;
        sub_1000B4EE8();
        sub_100093050();
        if (!v63)
        {
          sub_1000AA1A4(v64);
          if (v65 != 2)
          {

            goto LABEL_29;
          }
        }

        sub_10001DC10();
        if (qword_1002A8D90 != -1) {
          swift_once(&qword_1002A8D90, sub_100183E34);
        }
        uint64_t v66 = sub_100077D08();
        id v67 = sub_10009316C(v66, (uint64_t)qword_1002EB9D0);
        sub_100023E58();
        id v10 = v67;
        id v19 = (os_log_s *)Logger.logObject.getter(v10);
        os_log_type_t v69 = static os_log_type_t.error.getter(v19, v68);
        if (sub_100092FC4(v69))
        {
          uint64_t v22 = sub_100019464(32LL);
          uint64_t v23 = sub_100019464(32LL);
          v91[0] = v23;
          sub_100092E60(3.8522e-34);
          uint64_t v71 = v70;

          sub_100092A7C(v72, v73, v74, v22 + 12, v75, v76, v77, v78, v71);
          *(_WORD *)(v22 + 1sub_100019F7C(v0 + 2) = 2080;
          uint64_t v79 = sub_100019320();
          uint64_t v81 = sub_10009296C(v79, v80, v91);
          sub_100092A7C(v81, v82, v83, v22 + 22, v84, v85, v86, v87, v81);
          sub_100077C58();
          sub_100093090();
          sub_100092C9C(v88, v89, v90);
          os_log_type_t v44 = "transaction %lu for %s in %ld has a pending message incompatible type for message control";
          goto LABEL_26;
        }
      }

      sub_10001EDE8((uint64_t)v4);
LABEL_28:

      goto LABEL_29;
    }

    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v53 = sub_100077D08();
    id v54 = sub_10009316C(v53, (uint64_t)qword_1002EB9D0);
    sub_100023E58();
    id v55 = v54;
    sub_100092BFC();
    os_log_type_t v56 = sub_100092DA8();
    if (sub_100092944(v56))
    {
      uint64_t v57 = sub_100019464(22LL);
      uint64_t v58 = sub_100019464(32LL);
      v91[0] = v58;
      sub_1000929A8(3.8521e-34);
      sub_100092DC4();
      uint64_t v90 = (uint64_t)v10;
      sub_100092960((uint64_t)&v90);

      uint64_t v59 = sub_100092984();
      uint64_t v90 = sub_10009296C(v59, v60, v91);
      sub_100092960((uint64_t)&v90);
      sub_100077C58();
      sub_100092A44( (void *)&_mh_execute_header,  v61,  v62,  "transaction %lu for %s has a pending message but has no subscription group ID");
      sub_10009293C(v58);
      sub_10001A408(v58);
      sub_10001A408(v57);

      goto LABEL_28;
    }

    sub_10001EDE8((uint64_t)v4);
  }

  else
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v45 = sub_100077D08();
    uint64_t v46 = (os_log_s *)sub_100018F68(v45, (uint64_t)qword_1002EB9D0);
    uint64_t v47 = sub_100023E58();
    Logger.logObject.getter(v47);
    os_log_type_t v48 = sub_100092CFC();
    if (os_log_type_enabled(v46, v48))
    {
      uint64_t v49 = sub_100019464(22LL);
      uint64_t v50 = sub_100019464(32LL);
      v91[0] = v50;
      *(_DWORD *)uint64_t v49 = 136315394;
      uint64_t v51 = sub_100019320();
      uint64_t v90 = sub_10009296C(v51, v52, v91);
      sub_100093220((uint64_t)&v90, (uint64_t)v91);
      sub_100077C58();
      *(_WORD *)(v49 + 1sub_100019F7C(v0 + 2) = 2048;
      uint64_t v90 = qword_1001FAF08[v8];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91, v49 + 14);
      sub_100092A58( (void *)&_mh_execute_header,  v46,  v48,  "no transactions for %s in state %ld have pending messages",  (uint8_t *)v49);
      sub_10009293C(v50);
      sub_10001A408(v50);
      sub_10001A408(v49);
    }

    else
    {

      sub_10001EDE8((uint64_t)v4);
    }
  }

uint64_t sub_10008AF40(uint64_t a1)
{
  return 0LL;
}

void sub_10008AFB0(void *a1, void **a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_1000175B0(&qword_1002AE8E0);
  uint64_t inited = swift_initStackObject(v9, v13);
  *(_OWORD *)(inited + 1sub_100019F7C(v0 + 6) = xmmword_1001F3C00;
  *(_BYTE *)(inited + 3sub_100019F7C(v0 + 2) = a3;
  uint64_t v11 = sub_1000BF32C(inited, a4, a5);
  swift_setDeallocating(inited);
  uint64_t v12 = *a2;
  *a2 = (void *)v11;
}

void sub_10008B054()
{
  uint64_t v34 = v4;
  uint64_t v35 = v5;
  sub_100092F74();
  uint64_t v6 = (void *)sub_10008B318(v1);
  if (v6)
  {
    id v7 = v6;
    sub_100092B50();
    if (v9)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v9;
      type metadata accessor for BillingErrorHelperRoute();
      sub_100019E68(v10, v11, v2, v0);
      sub_10003561C();
    }

    else
    {
      if (qword_1002A8D90 != -1) {
        swift_once(&qword_1002A8D90, sub_100183E34);
      }
      uint64_t v22 = sub_100077D08();
      id v23 = sub_100092D58(v22, (uint64_t)qword_1002EB9D0);
      sub_100023E58();
      id v24 = v23;
      sub_100092BFC();
      os_log_type_t v25 = sub_100092DA8();
      if (sub_100092944(v25))
      {
        uint64_t v26 = sub_100019464(22LL);
        uint64_t v27 = sub_100019464(32LL);
        v33[0] = v27;
        sub_1000929A8(3.8521e-34);
        sub_100092DC4();
        uint64_t v32 = v1;
        sub_100092960((uint64_t)&v32);

        uint64_t v28 = sub_100092984();
        uint64_t v32 = sub_10009296C(v28, v29, v33);
        sub_100092960((uint64_t)&v32);
        sub_100077C58();
        sub_100092A44( (void *)&_mh_execute_header,  v30,  v31,  "Transaction %lu for %s has a pending billing error message but has no subscription group ID");
        sub_10009293C(v27);
        sub_10001A408(v27);
        sub_10001A408(v26);
      }

      else
      {

        sub_10001EDE8((uint64_t)v0);
      }
    }
  }

  else
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v12 = sub_100077D08();
    uint64_t v13 = (os_log_s *)sub_100018F68(v12, (uint64_t)qword_1002EB9D0);
    uint64_t v14 = sub_100023E58();
    Logger.logObject.getter(v14);
    os_log_type_t v15 = sub_100092CFC();
    if (sub_100092AD4(v13))
    {
      char v16 = (uint8_t *)sub_100019464(12LL);
      uint64_t v17 = sub_100019464(32LL);
      v33[0] = v17;
      *(_DWORD *)char v16 = 136315138;
      uint64_t v18 = sub_100019320();
      sub_10009296C(v18, v19, v33);
      sub_1000931B4();
      sub_100092C54(v20, v21);
      sub_100077C58();
      sub_100092A00((void *)&_mh_execute_header, v13, v15, "No transactions for %s are in billing error state", v16);
      sub_10009293C(v17);
      sub_10001A408(v17);
      sub_10001A408((uint64_t)v16);
    }

    else
    {

      sub_10001EDE8((uint64_t)v0);
    }
  }

  sub_100092B84();
}

uint64_t sub_10008B318(uint64_t a1)
{
  return 0LL;
}

void sub_10008B378(void *a1, void **a2)
{
  id v3 = sub_1000BF670();
  uint64_t v4 = *a2;
  *a2 = v3;
}

void sub_10008B3C4(char a1)
{
  __asm { BR              X10 }

uint64_t sub_10008B3F4()
{
  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v2 = sub_100077D08();
  sub_100092ADC(v2, (uint64_t)qword_1002EB9D0);
  os_log_type_t v3 = sub_100092B20();
  if (sub_100092998(v3))
  {
    uint64_t v4 = (uint8_t *)sub_100019464(12LL);
    *(_DWORD *)uint64_t v4 = 134217984;
    uint64_t v6 = 1LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v6, &v7, v4 + 4);
    sub_100092A00((void *)&_mh_execute_header, v0, v1, "Message info not handled: %ld", v4);
    sub_10001A408((uint64_t)v4);
  }

  return variable initialization expression of ClientOverride.requestBundleVersion();
}

uint64_t sub_10008B4E0(void *a1, void **p_cache)
{
  uint64_t v65 = (uint64_t)_swiftEmptyArrayStorage;
  v66[0] = _swiftEmptyArrayStorage;
  sub_100092930();
  sub_1001B2E60();
  if (qword_1002A8D90 == -1) {
    goto LABEL_2;
  }
LABEL_59:
  swift_once(&qword_1002A8D90, sub_100183E34);
LABEL_2:
  uint64_t v5 = sub_100077D08();
  unint64_t v6 = sub_100018F68(v5, (uint64_t)qword_1002EB9D0);
  sub_100023E64((uint64_t)p_cache);
  uint64_t v7 = sub_100092D50();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (sub_1000930D8(v8))
  {
    uint64_t v9 = sub_100019464(32LL);
    uint64_t v2 = sub_100019464(32LL);
    v59[0] = v2;
    *(_DWORD *)uint64_t v9 = 134218498;
    sub_1000487CC((uint64_t)v66, (uint64_t)v58);
    if (v66[0] >> 62)
    {
      if (v66[0] < 0LL) {
        uint64_t v54 = v66[0];
      }
      else {
        uint64_t v54 = v66[0] & 0xFFFFFFFFFFFFFF8LL;
      }
      sub_1000931C8();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v54);
      sub_100024E84();
    }

    else
    {
      uint64_t v10 = *(void *)((v66[0] & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    uint64_t v63 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v9 + 4);
    *(_WORD *)(v9 + 1sub_100019F7C(v0 + 2) = 2080;
    sub_10001FFF0();
    uint64_t v63 = sub_1000CF360((uint64_t)a1, (unint64_t)p_cache, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v9 + 14);
    sub_100077CA8((uint64_t)p_cache);
    *(_WORD *)(v9 + 2sub_100019F7C(v0 + 2) = 2048;
    sub_1000487CC((uint64_t)&v65, (uint64_t)v57);
    if ((unint64_t)v65 >> 62)
    {
      if (v65 < 0) {
        uint64_t v55 = v65;
      }
      else {
        uint64_t v55 = v65 & 0xFFFFFFFFFFFFFF8LL;
      }
      sub_10001FFF0();
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v55);
      sub_100023EEC();
    }

    else
    {
      uint64_t v11 = *(void *)((v65 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    uint64_t v63 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v9 + 24);
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v7,  v8,  "Will start renewing %ld active subscriptions for %s. %ld subscriptions expired and need to be caught up.",  (uint8_t *)v9,  0x20u);
    sub_10009293C(v2);
    sub_10001A408(v2);
    sub_10001A408(v9);
  }

  else
  {
    sub_10001EDE8((uint64_t)p_cache);
  }

  sub_1000487CC((uint64_t)v66, (uint64_t)&v63);
  uint64_t v12 = v66[0];
  if (v66[0] >> 62)
  {
    if (v66[0] < 0LL) {
      uint64_t v7 = v66[0];
    }
    else {
      uint64_t v7 = v66[0] & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_10001FFF0();
    uint64_t v13 = sub_100019448();
    if (!v13) {
      goto LABEL_17;
    }
  }

  else
  {
    uint64_t v13 = *(void *)((v66[0] & 0xFFFFFFFFFFFFF8LL) + 0x10);
    sub_10001FFF0();
    if (!v13) {
      goto LABEL_17;
    }
  }

  if (v13 < 1)
  {
    __break(1u);
LABEL_71:
    if (v7 < 0) {
      uint64_t v53 = v7;
    }
    else {
      uint64_t v53 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_10001ED74();
    sub_10001DBCC();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter(v53);
    sub_10001EDA0();
    goto LABEL_23;
  }

  for (uint64_t i = 0LL; i != v13; ++i)
  {
    if ((v12 & 0xC000000000000001LL) != 0) {
      os_log_type_t v15 = (void *)sub_1000931D0();
    }
    else {
      os_log_type_t v15 = sub_100092C94(v12 + 8 * i);
    }
    char v16 = v15;
    sub_10008EFB0(v15);
  }

void sub_10008BC48(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v33 = *(void *)(v8 - 8);
  uint64_t v34 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100019F58(a1, a1[3]);
  sub_1000BCBE8();
  uint64_t v12 = v11;
  if ((unint64_t)v11 >> 62)
  {
    if (v11 >= 0) {
      v11 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v11);
    if (v13) {
      goto LABEL_3;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    return;
  }

  uint64_t v13 = *(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v13) {
    goto LABEL_15;
  }
LABEL_3:
  if (v13 >= 1)
  {
    uint64_t v32 = a5;
    uint64_t v14 = 0LL;
    while (1)
    {
      if ((v12 & 0xC000000000000001LL) != 0) {
        id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v12);
      }
      else {
        id v15 = *(id *)(v12 + 8 * v14 + 32);
      }
      char v16 = v15;
      static Date.now.getter(v15);
      sub_1000B5190();
      char v18 = v17;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v34);
      if ((v18 & 1) != 0 || (sub_1000B5088(), (v19 & 1) != 0))
      {
        id v20 = v16;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
        unint64_t v22 = *(void *)((*a4 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v21 = *(void *)((*a4 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v22 >= v21 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1);
        }
        unint64_t v23 = v22;
        id v24 = v20;
      }

      else
      {
        sub_1000B6170();
        if ((v26 & 1) == 0) {
          goto LABEL_14;
        }
        id v27 = v16;
        uint64_t v28 = v32;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v27);
        unint64_t v30 = *(void *)((*v28 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v29 = *(void *)((*v28 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v30 >= v29 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1);
        }
        unint64_t v23 = v30;
        id v24 = v27;
      }

      uint64_t v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v24);
      specialized Array._endMutation()(v25);
LABEL_14:
      ++v14;

      if (v13 == v14) {
        goto LABEL_15;
      }
    }
  }

  __break(1u);
}

uint64_t sub_10008BE7C()
{
  return 0LL;
}

void sub_10008BEFC( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _BYTE *a8)
{
  id v20 = a8;
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v21 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100019F58(a1, a1[3]);
  sub_1000BE9B8();
  if (v12)
  {
    uint64_t v13 = v12;
    double v14 = sub_1000B4050();
    Date.init(timeIntervalSinceReferenceDate:)(v14);
    char v15 = sub_10008C068((uint64_t)v11);
    char v16 = *(void (**)(char *, uint64_t))(v21 + 8);
    v16(v11, v9);
    if ((v15 & 1) != 0)
    {

LABEL_6:
      *id v20 = 1;
      return;
    }

    uint64_t v17 = sub_1000B85C8(4u);
    if ((v18 & 1) == 0)
    {
      Date.init(timeIntervalSinceReferenceDate:)(*(double *)&v17);
      char v19 = sub_10008C068((uint64_t)v11);

      v16(v11, v9);
      if ((v19 & 1) == 0) {
        return;
      }
      goto LABEL_6;
    }
  }

uint64_t sub_10008C068(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1000175B0(&qword_1002AE8B8);
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100046F3C((unint64_t *)&qword_1002AE8D0, v11, (const char *)&protocol conformance descriptor for Date);
  uint64_t v13 = v12;
  char v14 = dispatch thunk of static Comparable.>= infix(_:_:)(a1, v2, v7, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  sub_100067DA4(v2, (uint64_t)v6, &qword_1002AE8B8);
  if ((v14 & 1) != 0) {
    char v15 = dispatch thunk of static Comparable.<= infix(_:_:)(v10, &v6[*(int *)(v4 + 36)], v7, v13);
  }
  else {
    char v15 = 0;
  }
  sub_100034F14((uint64_t)v6, &qword_1002AE8B8);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v15 & 1;
}

void sub_10008C1CC()
{
  sub_10002A580();
}

void sub_10008C2D0(void *a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = sub_1000BC720(a3, a4, a5, a6, 0LL);
  uint64_t v12 = *a2;
  *a2 = (void *)v11;
}

uint64_t sub_10008C338(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100019F58(a1, a1[3]);
  sub_1000B52F0();
  uint64_t v15 = v14;
  double v16 = sub_1000B4050();
  Date.init(timeIntervalSinceReferenceDate:)(v16);
  sub_10019FF68(a2, a3, a4, a5, v15, (uint64_t)v13);
  LOBYTE(a5) = v17;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return a5 & 1;
}

void sub_10008C420()
{
  uint64_t v114 = v3;
  uint64_t v115 = v4;
  uint64_t v5 = v0;
  uint64_t v7 = v6;
  sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  sub_1000226C8();
  __chkstk_darwin(v8);
  sub_100092F38();
  uint64_t v11 = v9 - v10;
  __chkstk_darwin(v12);
  sub_100092AF0();
  uint64_t v109 = v13;
  sub_100092978();
  __chkstk_darwin(v14);
  double v16 = &v101[-v15];
  uint64_t v17 = sub_100092A18();
  sub_100092E30();
  __chkstk_darwin(v18);
  sub_100092F38();
  uint64_t v21 = v19 - v20;
  __chkstk_darwin(v22);
  sub_100093194();
  __chkstk_darwin(v23);
  uint64_t v25 = &v101[-v24];
  uint64_t v26 = sub_1000B85C8(4u);
  if ((v27 & 1) != 0)
  {
    sub_100049CA8((uint64_t)v16, 1LL);
    goto LABEL_8;
  }

  Date.init(timeIntervalSinceReferenceDate:)(*(double *)&v26);
  sub_100049CA8((uint64_t)v16, 0LL);
  if (sub_10001D158((uint64_t)v16, 1LL, v17) == 1)
  {
LABEL_8:
    sub_100034F14((uint64_t)v16, (uint64_t *)&unk_1002AFCD0);
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v45 = sub_100077D08();
    sub_100018F68(v45, (uint64_t)qword_1002EB9D0);
    id v46 = v7;
    int64_t v47 = (os_log_s *)sub_100092D50();
    os_log_type_t v48 = static os_log_type_t.fault.getter();
    if (sub_100092AD4(v47))
    {
      uint64_t v49 = (uint8_t *)sub_100019464(12LL);
      uint64_t v50 = sub_100019464(32LL);
      uint64_t v112 = v50;
      *(_DWORD *)uint64_t v49 = 136315138;
      uint64_t v51 = sub_1000B3DDC();
      uint64_t v110 = sub_100092A38(v51, v52);
      sub_100092C54((uint64_t)&v110, (uint64_t)v111);
      sub_10001EDA0();

      sub_100092A00( (void *)&_mh_execute_header,  v47,  v48,  "Can't catch up transaction for %s because it has no expiration date.",  v49);
      sub_10009293C(v50);
      sub_10001A408(v50);
      sub_10001A408((uint64_t)v49);
    }

    else
    {
    }

    v46;
    goto LABEL_35;
  }

  uint64_t v28 = sub_100092F80();
  v29(v28);
  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v30 = sub_100077D08();
  uint64_t v31 = sub_100018F68(v30, (uint64_t)qword_1002EB9D0);
  uint64_t v32 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v1 + 16);
  uint64_t v107 = v25;
  v32(v2, v25, v17);
  id v33 = v7;
  uint64_t v104 = v31;
  double v34 = COERCE_DOUBLE(sub_100092D50());
  os_log_type_t v35 = static os_log_type_t.info.getter();
  int v36 = v35;
  BOOL v37 = os_log_type_enabled(*(os_log_t *)&v34, v35);
  uint64_t v105 = v11;
  if (v37)
  {
    uint64_t v38 = sub_100019464(22LL);
    uint64_t v103 = sub_100019464(64LL);
    uint64_t v112 = v103;
    *(_DWORD *)uint64_t v38 = 136315394;
    uint64_t v106 = v5;
    uint64_t v39 = sub_1000B3DDC();
    uint64_t v110 = sub_100092A38(v39, v40);
    int v102 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, v111, v38 + 4);
    sub_10001EDA0();

    *(_WORD *)(v38 + 1sub_100019F7C(v0 + 2) = 2080;
    sub_100046F3C( &qword_1002AE8D8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (const char *)&protocol conformance descriptor for Date);
    uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter(v17, v41);
    uint64_t v110 = sub_100092A38(v42, v43);
    uint64_t v5 = v106;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, v111, v38 + 14);
    sub_10001EDA0();
    sub_100092E10();
    sub_100092A58( (void *)&_mh_execute_header,  *(os_log_s **)&v34,  (os_log_type_t)v102,  "Catching up %s, latest transaction expired: %s",  (uint8_t *)v38);
    uint64_t v44 = v103;
    sub_100093110(v103);
    sub_10001A408(v44);
    sub_10001A408(v38);
  }

  else
  {

    sub_100092E10();
  }

  uint64_t v53 = v109;
  uint64_t v54 = sub_100093104();
  sub_100049CA8(v54, v55);
  uint64_t v56 = sub_100019F58(v5 + 7, v5[10]);
  __chkstk_darwin(v56);
  sub_100092E8C();
  uint64_t v57 = v107;
  *(void *)(v58 - 3sub_100019F7C(v0 + 2) = v33;
  *(void *)(v58 - 2sub_100019F7C(v0 + 4) = v57;
  *(void *)(v58 - 1sub_100019F7C(v0 + 6) = v53;
  uint64_t v60 = *v59;
  sub_1001B2E60();
  id v113 = v33;
  id v61 = v33;
  sub_100092C38();
  sub_1000931F4();
  int v63 = 0;
  if ((v101 & 1) == 0)
  {
    do
    {
      double v64 = v34;
      if (static Date.timeIntervalSinceReferenceDate.getter(v62) <= v34) {
        break;
      }
      id v65 = v60;
      sub_1000B6170();
      char v67 = v66;

      if ((v67 & 1) == 0) {
        break;
      }
      sub_100093298(v68, v5[5]);
      id v69 = v65;
      sub_1000B3DEC();

      BOOL v70 = sub_100076FC0();
      sub_10003561C();
      double v34 = COERCE_DOUBLE(v69);
      if (v70)
      {
        sub_1000897D0();

        sub_100093068();
        sub_100034F14(v109, (uint64_t *)&unk_1002AFCD0);
        goto LABEL_35;
      }

      Date.init(timeIntervalSinceReferenceDate:)(v64);
      sub_10008CD68();
      uint64_t v60 = v71;
      int v73 = v72;

      v108(v21, v17);
      if (!v60)
      {
        uint64_t v106 = v5;
        uint64_t v75 = v105;
        sub_100067DA4(v109, v105, (uint64_t *)&unk_1002AFCD0);
        uint64_t v76 = sub_100093104();
        int v78 = sub_10001D158(v76, v77, v17);
        sub_100034F14(v75, (uint64_t *)&unk_1002AFCD0);
        id v79 = sub_1000930A4();
        uint64_t v80 = (os_log_s *)Logger.logObject.getter(v79);
        if (v78 == 1)
        {
          os_log_type_t v81 = static os_log_type_t.fault.getter();
          if (sub_100092AD4(v80))
          {
            uint64_t v82 = (uint8_t *)sub_100019464(12LL);
            uint64_t v83 = sub_100019464(32LL);
            uint64_t v112 = v83;
            uint64_t v84 = sub_100092DD8(4.8149e-34);
            uint64_t v86 = sub_100092A38(v84, v85);
            sub_100092B68(v86);
            sub_10001EDA0();

            sub_100092A00( (void *)&_mh_execute_header,  v80,  v81,  "Failed to create renewal transaction when catching up %s",  v82);
            sub_10009293C(v83);
            sub_10001A408(v83);
            sub_10001A408((uint64_t)v82);
          }

          else
          {
          }
        }

        else
        {
          os_log_type_t v87 = static os_log_type_t.debug.getter();
          if (sub_100092AD4(v80))
          {
            uint64_t v88 = (uint8_t *)sub_100019464(12LL);
            uint64_t v89 = sub_100019464(32LL);
            uint64_t v112 = v89;
            uint64_t v90 = sub_100092DD8(4.8149e-34);
            uint64_t v92 = sub_100092A38(v90, v91);
            sub_100092B68(v92);
            sub_10001EDA0();

            sub_100092A00( (void *)&_mh_execute_header,  v80,  v87,  "Auto-cancelling latest transaction for %s because it would overlap an existing transaction.",  v88);
            sub_10009293C(v89);
            sub_10001A408(v89);
            sub_10001A408((uint64_t)v88);
          }

          else
          {
          }

          sub_1000487CC((uint64_t)&v113, (uint64_t)&v110);
          id v93 = sub_1000930A4();
          uint64_t v94 = variable initialization expression of ClientOverride.requestBundleVersion();
          sub_1000B534C(v94, v95);

          id v96 = v93;
          sub_100089348(v96, 0);
        }

        break;
      }

      sub_100056B6C();
      id v113 = v60;
      v63 |= v73;
      id v74 = v60;
      sub_100092C38();
      sub_1000931F4();
    }

    while (!v70);
  }

  sub_1000487CC((uint64_t)&v113, (uint64_t)&v112);
  id v97 = sub_1000930A4();
  sub_1000B6170();
  char v99 = v98;

  if ((v99 & 1) != 0)
  {
    id v100 = v97;
    sub_10008EFB0(v100);
  }

  sub_100093068();
  sub_100034F14(v109, (uint64_t *)&unk_1002AFCD0);
LABEL_35:
  sub_100092BA0();
}

void sub_10008CC00(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000B8508(0xFu);
  if (v9)
  {
    sub_100019F58(a1, a1[3]);
    sub_1000B3DEC();
    sub_1000B52F0();
    sub_1000BE9B8();
    uint64_t v11 = v10;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v11)
    {
      id v12 = v11;
      double v13 = sub_1000B4050();

      Date.init(timeIntervalSinceReferenceDate:)(v13);
      uint64_t v14 = type metadata accessor for Date(0LL);
      sub_10001762C((uint64_t)v8, 0LL, 1LL, v14);
    }

    else
    {
      uint64_t v15 = type metadata accessor for Date(0LL);
      sub_10001762C((uint64_t)v8, 1LL, 1LL, v15);
    }

    sub_100092694((uint64_t)v8, a4);
  }

void sub_10008CD68()
{
  uint64_t v72 = v1;
  uint64_t v73 = v2;
  uint64_t v60 = v3;
  uint64_t v5 = v4;
  int v55 = v6;
  int v67 = v7;
  v54[12] = *v0;
  v54[9] = sub_1000175B0(&qword_1002AE8B0);
  sub_1000226C8();
  __chkstk_darwin(v8);
  sub_10009291C();
  v54[10] = v9;
  sub_100092978();
  __chkstk_darwin(v10);
  sub_100092E80();
  v54[6] = v11;
  v54[7] = sub_1000175B0(&qword_1002AE8B8);
  sub_1000226C8();
  __chkstk_darwin(v12);
  sub_10009291C();
  v54[8] = v13;
  sub_100092978();
  __chkstk_darwin(v14);
  sub_100092E80();
  v54[11] = v15;
  sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  sub_1000226C8();
  __chkstk_darwin(v16);
  sub_10009291C();
  uint64_t v59 = v17;
  sub_100092978();
  __chkstk_darwin(v18);
  sub_100092E80();
  uint64_t v62 = v19;
  uint64_t v64 = type metadata accessor for UUID(0LL);
  v54[14] = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  sub_1000227D0();
  v54[13] = v20;
  sub_1000175B0(&qword_1002AC060);
  sub_1000226C8();
  __chkstk_darwin(v21);
  sub_1000227D0();
  uint64_t v61 = v22;
  uint64_t v23 = sub_100092A18();
  uint64_t v69 = *(void *)(v23 - 8);
  uint64_t v70 = v23;
  __chkstk_darwin(v23);
  sub_10009291C();
  uint64_t v56 = v24;
  sub_100092978();
  __chkstk_darwin(v25);
  sub_100092AF0();
  uint64_t v57 = v26;
  sub_100092978();
  __chkstk_darwin(v27);
  sub_100092AF0();
  uint64_t v68 = v28;
  sub_100092978();
  __chkstk_darwin(v29);
  sub_100092AF0();
  uint64_t v58 = v30;
  sub_100092978();
  __chkstk_darwin(v31);
  id v33 = (char *)v54 - v32;
  uint64_t KeyPath = swift_getKeyPath(&unk_1001FAE80);
  sub_10008EA70(KeyPath);
  uint64_t v36 = v35;
  sub_10002A5A4();
  uint64_t v37 = sub_1000B3DEC();
  uint64_t v39 = v38;
  char v66 = v0;
  sub_100092F60(v66 + 2, v66[5]);
  sub_100075EE8(v37, v39);
  uint64_t v71 = v40;
  id v65 = v33;
  sub_1000B6230(v5, (uint64_t)v33);
  uint64_t v41 = sub_1000175B0(&qword_1002AE8C0);
  uint64_t v42 = swift_allocObject(v41, 552LL, 7LL);
  *(_OWORD *)(v42 + 1sub_100019F7C(v0 + 6) = xmmword_1001FAC50;
  *(_BYTE *)(v42 + 3sub_100019F7C(v0 + 2) = 0;
  *(void *)(v42 + 6sub_100019F7C(v0 + 4) = &type metadata for String;
  *(void *)(v42 + 4sub_10006F0B8(12LL, 0) = 0x77656E6552LL;
  *(void *)(v42 + 48) = 0xE500000000000000LL;
  *(_BYTE *)(v42 + 7sub_100019F7C(v0 + 2) = 2;
  *(void *)(v42 + 10sub_100019F7C(v0 + 4) = &type metadata for String;
  v54[15] = v37;
  *(void *)(v42 + 8sub_10006F0B8(12LL, 0) = v37;
  *(void *)(v42 + sub_100081CEC(v0 + 88) = v39;
  *(_BYTE *)(v42 + 11sub_100019F7C(v0 + 2) = 7;
  *(void *)(v42 + 14sub_100019F7C(v0 + 4) = &type metadata for UInt;
  *(void *)(v42 + 12sub_10006F0B8(12LL, 0) = v36;
  *(_BYTE *)(v42 + 15sub_100019F7C(v0 + 2) = 8;
  uint64_t v63 = v39;
  swift_bridgeObjectRetain(v39);
  uint64_t v43 = sub_1000B85BC(8u);
  *(void *)(v42 + 18sub_100019F7C(v0 + 4) = &type metadata for UInt;
  if ((v44 & 1) != 0) {
    sub_1000B52F0();
  }
  *(void *)(v42 + 16sub_10006F0B8(12LL, 0) = v43;
  *(_BYTE *)(v42 + 19sub_100019F7C(v0 + 2) = 11;
  double v45 = Date.timeIntervalSinceReferenceDate.getter(v43);
  *(void *)(v42 + 22sub_100019F7C(v0 + 4) = &type metadata for Double;
  *(double *)(v42 + 20sub_10006F0B8(12LL, 0) = v45;
  *(_BYTE *)(v42 + 23sub_100019F7C(v0 + 2) = 9;
  uint64_t v46 = sub_100092F9C();
  *(void *)(v42 + 26sub_100019F7C(v0 + 4) = &type metadata for String;
  *(void *)(v42 + 24sub_10006F0B8(12LL, 0) = v46;
  *(void *)(v42 + 248) = v47;
  *(_BYTE *)(v42 + 27sub_100019F7C(v0 + 2) = 12;
  double v48 = COERCE_DOUBLE(sub_1000B85C8(0xCu));
  *(void *)(v42 + 30sub_100019F7C(v0 + 4) = &type metadata for Double;
  char v49 = v67;
  if ((v50 & 1) != 0) {
    double v48 = sub_1000B4050();
  }
  *(double *)(v42 + 28sub_10006F0B8(12LL, 0) = v48;
  *(_BYTE *)(v42 + 31sub_100019F7C(v0 + 2) = 13;
  uint64_t v51 = sub_1000B5B90();
  *(void *)(v42 + 34sub_100019F7C(v0 + 4) = &type metadata for Int;
  *(void *)(v42 + 32sub_10006F0B8(12LL, 0) = v51;
  *(_BYTE *)(v42 + 35sub_100019F7C(v0 + 2) = 14;
  uint64_t v52 = 3LL;
  if ((v49 & 1) == 0) {
    uint64_t v52 = 1LL;
  }
  *(void *)(v42 + 38sub_100019F7C(v0 + 4) = &type metadata for Int;
  *(void *)(v42 + 36sub_10006F0B8(12LL, 0) = v52;
  *(_BYTE *)(v42 + 39sub_100019F7C(v0 + 2) = 16;
  sub_1000B5BB8();
  sub_100093250();
  __asm { BR              X12 }

void sub_10008D144()
{
  *(void *)(v5 + 42sub_100019F7C(v0 + 4) = &type metadata for String;
  *(void *)(v5 + 40sub_10006F0B8(12LL, 0) = v8;
  *(void *)(v5 + 408) = v7;
  *(_BYTE *)(v5 + 43sub_100019F7C(v0 + 2) = 17;
  *(void *)(v5 + 46sub_100019F7C(v0 + 4) = &type metadata for Bool;
  *(_BYTE *)(v5 + 44sub_10006F0B8(12LL, 0) = 0;
  *(_BYTE *)(v5 + 47sub_100019F7C(v0 + 2) = 20;
  sub_100092F60(v1, *(void *)(*(void *)(v0 + 216) + 40LL));
  sub_100075D10((void *)(v0 + 320));
  uint64_t v10 = *(void *)(v0 + 320);
  uint64_t v9 = *(void *)(v0 + 328);
  sub_10001DBCC();
  sub_10001B4DC((void *)(v0 + 320));
  *(void *)(v5 + 50sub_100019F7C(v0 + 4) = &type metadata for String;
  *(void *)(v5 + 48sub_10006F0B8(12LL, 0) = v10;
  *(void *)(v5 + 4sub_100081CEC(v0 + 88) = v9;
  *(_BYTE *)(v5 + 51sub_100019F7C(v0 + 2) = 26;
  char v11 = sub_1000B62A4();
  uint64_t v12 = 3157553LL;
  if ((v11 & 1) != 0) {
    uint64_t v12 = 3157554LL;
  }
  *(void *)(v5 + 54sub_100019F7C(v0 + 4) = &type metadata for String;
  *(void *)(v5 + 52sub_10006F0B8(12LL, 0) = v12;
  *(void *)(v5 + 528) = 0xE300000000000000LL;
  sub_100092564();
  *(void *)(v0 + 31sub_100019F7C(v0 + 2) = Dictionary.init(dictionaryLiteral:)( v5,  &type metadata for TransactionEntity.Key,  (char *)&type metadata for Any + 8);
  if ((v3 & 1) != 0)
  {
    uint64_t v13 = sub_1000B85BC(0x19u);
    uint64_t v14 = *(void *)(v0 + 248);
    uint64_t v15 = *(void *)(v0 + 232);
    if ((v16 & 1) != 0)
    {
      uint64_t v13 = 0LL;
      *(void *)(v6 - 21sub_100019F7C(v0 + 6) = 0LL;
      *(void *)(v6 - 208) = 0LL;
      *(void *)(v6 - 20sub_10006F0B8(12LL, 0) = 0LL;
    }

    else
    {
      *(void *)(v6 - 20sub_10006F0B8(12LL, 0) = v4;
    }

    uint64_t v21 = *(void *)(v0 + 200);
    uint64_t v22 = *(void *)(v0 + 176);
    *(void *)(v6 - 22sub_100019F7C(v0 + 4) = v13;
    sub_100092F28();
    uint64_t v20 = v14;
  }

  else
  {
    uint64_t KeyPath = swift_getKeyPath(&unk_1001FAEA8);
    sub_10008EA70(KeyPath);
    uint64_t v19 = v18;
    sub_10002A5A4();
    *(void *)(v6 - 20sub_10006F0B8(12LL, 0) = v4;
    *(void *)(v6 - 22sub_100019F7C(v0 + 4) = v19;
    sub_100092F28();
    uint64_t v20 = *(void *)(v0 + 248);
    uint64_t v15 = *(void *)(v0 + 232);
    uint64_t v21 = *(void *)(v0 + 200);
    uint64_t v22 = *(void *)(v0 + 176);
  }

  sub_1000B62D0(v22);
  uint64_t v23 = sub_10001D158(v22, 1LL, v21);
  if ((_DWORD)v23)
  {
    sub_100092CB4(v23, &qword_1002AC060);
  }

  else
  {
    uint64_t v25 = *(void *)(v0 + 104);
    uint64_t v24 = *(void *)(v0 + 112);
    uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v25, v22, v21);
    sub_100092CB4(v26, &qword_1002AC060);
    uint64_t v28 = UUID.uuidString.getter(v27);
    uint64_t v30 = v29;
    sub_100093288(v25, *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8));
    *(void *)(v6 - 20sub_10006F0B8(12LL, 0) = &type metadata for String;
    *(void *)(v6 - 22sub_100019F7C(v0 + 4) = v28;
    *(void *)(v6 - 21sub_100019F7C(v0 + 6) = v30;
    uint64_t v31 = sub_100092F1C();
    sub_1001B1CF8(v31, 22LL);
  }

  uint64_t v32 = sub_100092F9C();
  uint64_t v34 = sub_100093158(v32, v33);
  sub_10003561C();
  *(void *)(v0 + 20sub_10006F0B8(12LL, 0) = v2;
  if (v34)
  {
    sub_10002A674();
    uint64_t v35 = sub_1001BA8BC();
    uint64_t v37 = v36;
    unsigned int v39 = v38;
    sub_10002A5A4();
    *(_DWORD *)(v0 + 17sub_100019F7C(v0 + 6) = HIWORD(v39);
    sub_100093180();
    *(void *)(v6 - 20sub_10006F0B8(12LL, 0) = v40;
    *(void *)(v6 - 22sub_100019F7C(v0 + 4) = v35;
    LODWORD(sub_10006AC2C(v4, v3) = *(_DWORD *)(v0 + 224);
    *(_DWORD *)(v6 - 21sub_100019F7C(v0 + 6) = v37;
    *(_WORD *)(v6 - 21sub_100019F7C(v0 + 2) = WORD2(v37);
    uint64_t v15 = *(void *)(v0 + 232);
    uint64_t v20 = *(void *)(v0 + 248);
    *(_WORD *)(v6 - 21sub_10006F0B8(12LL, 0) = HIWORD(v37);
    uint64_t v2 = *(void **)(v0 + 200);
    *(_WORD *)(v6 - 208) = v39;
    *(_WORD *)(v6 - 20sub_100019F7C(v0 + 6) = *(_DWORD *)(v0 + 176);
    uint64_t v41 = sub_100092F1C();
    sub_1001B1CF8(v41, 21LL);
    sub_10002A5A4();
  }

  uint64_t v42 = *(void *)(v0 + 184);
  sub_1000B5344(v42);
  uint64_t v43 = sub_100092E40();
  if ((_DWORD)v43)
  {
    sub_100092CB4(v43, (uint64_t *)&unk_1002AFCD0);
    *(void *)(v6 - 208) = 0LL;
    *(void *)(v6 - 20sub_10006F0B8(12LL, 0) = 0LL;
    double v44 = 0.0;
    *(void *)(v6 - 21sub_100019F7C(v0 + 6) = 0LL;
  }

  else
  {
    uint64_t v45 = *(void *)(v0 + 240);
    uint64_t v46 = *(void *)(v0 + 152);
    uint64_t v47 = sub_100092D78(v46, v42, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 16));
    sub_100092CB4(v47, (uint64_t *)&unk_1002AFCD0);
    double v44 = Date.timeIntervalSinceReferenceDate.getter(v48);
    sub_100092E08(v46, *(uint64_t (**)(uint64_t, uint64_t))(v45 + 8));
    *(void *)(v6 - 20sub_10006F0B8(12LL, 0) = &type metadata for Double;
  }

  *(double *)(v6 - 22sub_100019F7C(v0 + 4) = v44;
  uint64_t v49 = sub_100092F1C();
  sub_1001B1CF8(v49, 33LL);
  sub_1000B6324();
  if (v50)
  {
    uint64_t v51 = v50;
    if (*(void *)(v50 + 16))
    {
      *(void *)(v0 + 40sub_10006F0B8(12LL, 0) = _swiftEmptyArrayStorage;
      sub_100032050();
      *(void *)(v0 + 18sub_100019F7C(v0 + 4) = v51;
      ((void (*)(void))((char *)&loc_10008D4C8 + dword_10008E3FC[*(unsigned __int8 *)(v51 + 64)]))();
      return;
    }

    sub_10001A3F8();
    *(void *)(v6 - 20sub_10006F0B8(12LL, 0) = sub_1000175B0(&qword_1002A93B8);
    *(void *)(v6 - 22sub_100019F7C(v0 + 4) = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v52 = (_OWORD *)(v6 - 224);
    *uint64_t v52 = 0u;
    v52[1] = 0u;
  }

  sub_100092D9C(v6 - 224);
  sub_1000B8508(0xFu);
  if (v54)
  {
    *(void *)(v6 - 20sub_10006F0B8(12LL, 0) = &type metadata for String;
    *(void *)(v6 - 22sub_100019F7C(v0 + 4) = v53;
    *(void *)(v6 - 21sub_100019F7C(v0 + 6) = v54;
  }

  else
  {
    int v55 = (_OWORD *)(v6 - 224);
    *int v55 = 0u;
    v55[1] = 0u;
  }

  uint64_t v56 = sub_100092F1C();
  sub_1001B1CF8(v56, 15LL);
  if ((v3 & 1) != 0) {
    goto LABEL_26;
  }
  sub_1000B64EC(*(void *)(v0 + 256), v0 + 400);
  sub_1000925C4(v0 + 400, v6 - 224, &qword_1002AE8C8);
  uint64_t v63 = *(void *)(v6 - 176);
  if (!v63)
  {
    if ((*(_DWORD *)(v0 + 132) & 1) == 0)
    {
LABEL_32:
      uint64_t v62 = 0LL;
      uint64_t v60 = 0LL;
      int v61 = 7;
      goto LABEL_42;
    }

LABEL_62:
    char v116 = 0;
    *(void *)(v0 + 29sub_100019F7C(v0 + 6) = &type metadata for Double;
    *(double *)(v0 + 27sub_100019F7C(v0 + 2) = v112;
LABEL_63:
    uint64_t v121 = sub_100092E24();
    sub_1001B1CF8(v121, 4LL);
    uint64_t v122 = *(void *)(v0 + 160);
    sub_100067DA4(*(void *)(v0 + 168), v122, (uint64_t *)&unk_1002AFCD0);
    uint64_t v123 = sub_100093104();
    if (sub_10001D158(v123, v124, v20) == 1)
    {
      sub_100034F14(v122, (uint64_t *)&unk_1002AFCD0);
      goto LABEL_68;
    }

    uint64_t v125 = sub_100092D78(v15, v122, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v114 + 32));
    if ((v116 & 1) != 0 || (*(_DWORD *)(v0 + 132) & 1) != 0)
    {
      sub_100092E08(v15, *(uint64_t (**)(uint64_t, uint64_t))(v114 + 8));
      goto LABEL_68;
    }

    double v164 = Date.timeIntervalSinceReferenceDate.getter(v125);
    sub_1000932A0(v15);
    if (v164 < v112) {
      break;
    }
LABEL_68:
    *(void *)(v0 + 27sub_100019F7C(v0 + 2) = 0LL;
    uint64_t v126 = sub_100019F58((void *)(v113 + 56), *(void *)(v113 + 80));
    __chkstk_darwin(v126);
    sub_100092E9C();
    *(void *)(v127 - 1sub_100019F7C(v0 + 6) = v0 + 272;
    *(void *)(v127 - 8) = v0 + 312;
    sub_1001B2FD0();
    uint64_t v128 = *(void **)(v0 + 272);
    if (!v128)
    {
      __break(1u);
LABEL_90:
      __break(1u);
      goto LABEL_91;
    }

    id v129 = v128;
    uint64_t v130 = v129;
    uint64_t v131 = sub_1000B3DDC();
    uint64_t v133 = sub_100093158(v131, v132);
    sub_10001A420();

    if (!v133)
    {
      sub_10001A3F8();
      goto LABEL_79;
    }

    id v134 = v129;
    uint64_t v135 = sub_100092C38();
    char v137 = v136;

    if ((v137 & 1) != 0)
    {
      sub_10001A3F8();
      sub_10002A5A4();
LABEL_79:
      uint64_t v161 = *(void *)(v0 + 240);
      if (qword_1002A8CF8 != -1) {
        swift_once(&qword_1002A8CF8, sub_10010EF80);
      }
      v162 = *(void **)(v0 + 272);
      if (v162)
      {
        id v163 = v162;
        sub_1001101BC();
        sub_1000930AC();

        sub_100092E08(*(void *)(v0 + 208), *(uint64_t (**)(uint64_t, uint64_t))(v161 + 8));
        sub_1000930D0();
        goto LABEL_85;
      }

      goto LABEL_90;
    }

    id v138 = v130;
    double v139 = sub_1000B4050();

    uint64_t v140 = *(void *)(v0 + 144);
    Date.init(timeIntervalSinceReferenceDate:)(v139);
    uint64_t v141 = v20;
    uint64_t v142 = *(void *)(v0 + 136);
    Date.init(timeIntervalSinceReferenceDate:)(*(double *)&v135);
    uint64_t v2 = *(void **)(v133 + 192);
    uint64_t v62 = *(void *)(v133 + 200);
    sub_100046F3C( (unint64_t *)&qword_1002AE8D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (const char *)&protocol conformance descriptor for Date);
    uint64_t v60 = v143;
    sub_10001ED74();
    if ((dispatch thunk of static Comparable.<= infix(_:_:)(v140, v142, v141, v60) & 1) != 0)
    {
      *(void *)(v0 + 168) = v2;
      *(void *)(v0 + 17sub_100019F7C(v0 + 6) = v62;
      *(void *)(v0 + 18sub_100019F7C(v0 + 4) = v133;
      uint64_t v144 = *(void *)(v0 + 72);
      uint64_t v145 = *(void *)(v0 + 48);
      uint64_t v146 = v145 + *(int *)(v144 + 48);
      uint64_t v147 = *(void *)(v0 + 240);
      sub_100092E78(v145, v140);
      *(void *)(v0 + 22sub_100019F7C(v0 + 4) = v146;
      sub_100092E78(v146, v142);
      uint64_t v148 = *(void *)(v0 + 80);
      uint64_t v149 = v148 + *(int *)(v144 + 48);
      sub_100092E78(v148, v145);
      sub_100092E78(v149, v146);
      uint64_t v150 = *(void *)(v0 + 64);
      sub_100092E70(v150, v148);
      uint64_t v151 = *(void (**)(uint64_t, uint64_t))(v147 + 8);
      v151(v149, v141);
      uint64_t v152 = v148 + *(int *)(v144 + 48);
      sub_100092E70(v148, v145);
      sub_100092E70(v152, *(void *)(v0 + 224));
      sub_100092E70(v150 + *(int *)(*(void *)(v0 + 56) + 36LL), v152);
      v151(v148, v141);
      sub_1000925C4(v150, *(void *)(v0 + 88), &qword_1002AE8B8);
      uint64_t v153 = *(void **)(v0 + 272);
      if (!v153)
      {
LABEL_91:
        __break(1u);
        goto LABEL_92;
      }

      id v154 = v153;
      sub_1000B52F0();

      LOBYTE(v15sub_100019F7C(v0 + 4) = sub_10008BE7C();
      sub_10001A420();
      uint64_t v155 = sub_100023EEC();
      sub_100093290(v155, &qword_1002AE8B8);
      if ((v154 & 1) != 0)
      {
        uint64_t v156 = *(void **)(v0 + 272);
        uint64_t v158 = *(void *)(v0 + 136);
        uint64_t v157 = *(void *)(v0 + 144);
        if (v156)
        {
          id v159 = v156;
          sub_100087858();
          sub_1000930AC();

          sub_10002A5A4();
          sub_100092E00(v158);
          sub_100092E00(v157);
          sub_100092E00(*(void *)(v0 + 208));

          sub_1000930D0();
          id v160 = *(id *)(v0 + 200);
          goto LABEL_85;
        }

LABEL_92:
        __break(1u);
        JUMPOUT(0x10008E3ECLL);
      }

      swift_release();
      sub_100092E00(*(void *)(v0 + 136));
      sub_100092E00(*(void *)(v0 + 144));
      goto LABEL_79;
    }

LABEL_87:
    __break(1u);
LABEL_88:
    swift_once(&qword_1002A8D90, sub_100183E34);
  }

  sub_1000932A0(*(void *)(v0 + 208));
  sub_1000930AC();
  swift_bridgeObjectRelease();
  sub_1000930D0();
LABEL_85:
  sub_100092BA0();
}

          v210 = v192[10];
          v211 = v192[11];
          v195 = v186;
          sub_100023E9C();
          sub_1000B534C(v210, v211);
          sub_10001DC10();
          sub_1000B53F0(5);
          sub_1000B57E4();
          if ((v258 | v256 & v257 ^ 1) == 1)
          {
            sub_10009B678();
            sub_1000A4954();
            sub_10002A7BC();
          }

          v196 = (uint64_t)v305;
          sub_1000A473C(v289, v305[14]);

          sub_10002A524();
          v167 = v192[11];
          v283 = (char *)v192[10];
          sub_100077D1C();
          LODWORD(v28sub_10006F0B8(12LL, 0) = 0;
          LODWORD(v19sub_10006F0B8(12LL, 0) = 0;
          goto LABEL_90;
        }

        if (!(_DWORD)v258) {
          goto LABEL_87;
        }
        v195 = v186;
        sub_1000A49E0(2u);
        v208 = type metadata accessor for CannotRedeemOfferCodeDialog();
        sub_100019310(v208, 448LL);
        v209 = sub_10011BF98();
        sub_10001ED6C();
        sub_10002A524();

        v283 = 0LL;
        v167 = 0LL;
        LODWORD(v28sub_10006F0B8(12LL, 0) = 0;
        LODWORD(v19sub_10006F0B8(12LL, 0) = 0;
        LODWORD(v303) = 1;
        LODWORD(v307) = 15;
        v293 = v209;
LABEL_96:
        v196 = (uint64_t)v305;
LABEL_97:
        v287 = sub_100019310((uint64_t)&unk_10027E910, 17LL);
        *(_BYTE *)(v287 + 1sub_100019F7C(v0 + 6) = -8;
        v217 = v288;
        if ((_DWORD)v190)
        {
          if ((_DWORD)v258)
          {
            v192 = v259;
            sub_10002A674();
            sub_1000A4954();
            sub_1000A4D38();
          }

          if ((v256 & 1) == 0)
          {
            sub_10009B678();
            sub_1000A4954();
            sub_10002A7BC();
          }

          if ((v257 & 1) == 0)
          {
            v192 = v261;
            sub_10002A674();
            sub_1000A4954();
            sub_1000A4D38();
          }

          v218 = sub_1000A0BE4(v287, v196);
          sub_1000B7404(v296, v218);
          sub_1000A473C(v289, *(void *)(v196 + 112));
        }

        if ((v280 & 1) != 0 && v192[17])
        {
          sub_10009B678();
          sub_1000B6E74();
          v219 = sub_1000A0BE4(v287, v196);
          sub_1000B7404(v296, v219);
          sub_1000A473C(v289, *(void *)(v196 + 112));
          sub_10002A7BC();
        }

        sub_1000A33A4((uint64_t)v286, v217);
        v220 = sub_1000A4D9C(v217);
        if ((_DWORD)v220 == 1)
        {
          sub_1000379E8();
          sub_1000A4ADC();
          sub_1000A4CD4();
          v221 = sub_1000A4AB4();
          sub_1000A4DCC(v221, (uint64_t *)&unk_1002AFCD0);
        }

        else
        {
          sub_1000A4DCC(v220, (uint64_t *)&unk_1002AFCD0);
          v222 = sub_1000B85C8(4u);
          if ((v223 & 1) == 0)
          {
            v299 = (void *)v167;
            v224 = *(double *)&v222;
            v225 = sub_1000B4050();
            v226 = v282;
            Date.init(timeIntervalSinceReferenceDate:)(v225);
            v227 = v281;
            Date.init(timeIntervalSinceReferenceDate:)(v224);
            sub_100023BAC((uint64_t)v289, (uint64_t)&v364);
            v228 = sub_1000A4D70();
            v229 = v192[25];
            *(void *)&v280 = v192[24];
            v230 = v309[1];
            v277 = *v309;
            v257 = v228;
            v258 = v230;
            v231 = sub_1000A33FC();
            v288 = v229;
            sub_10001DBCC();
            v232 = v297;
            v233 = dispatch thunk of static Comparable.<= infix(_:_:)(v226, v227, v297, v231);
            v286 = v195;
            if ((v233 & 1) == 0)
            {
              __break(1u);
              JUMPOUT(0x1000A0508LL);
            }

            v234 = v271;
            v235 = v268;
            v236 = v268 + *(int *)(v271 + 48);
            sub_1000A491C(v268, v226);
            sub_1000A491C(v236, v227);
            v237 = v272;
            v238 = v272 + *(int *)(v234 + 48);
            sub_1000A491C(v272, v235);
            sub_1000A491C(v238, v236);
            v239 = v270;
            sub_1000A491C(v270, v237);
            v255((void *)v238, v232);
            v240 = v237 + *(int *)(v234 + 48);
            sub_1000A491C(v237, v235);
            sub_1000A491C(v240, v236);
            sub_1000A491C(v239 + *(int *)(v269 + 36), v240);
            sub_1000A4AA0(v237);
            v241 = v273;
            sub_10004DB28(v239, v273, &qword_1002AE8B8);
            sub_1000B52F0();
            LOBYTE(v23sub_100019F7C(v0 + 6) = sub_10008BE7C();
            sub_10001A3F8();
            sub_10004DB00(v241, &qword_1002AE8B8);
            sub_100019F7C(&v364);
            if ((v236 & 1) != 0)
            {
              sub_100019F58(v289, v305[14]);
              sub_100087858();
              sub_1000379E8();
              sub_1000A4ADC();
              sub_1000A4CD4();
              sub_1000A4AB4();
              sub_1000A4AA0(v281);
              sub_1000A4AA0(v282);
              sub_1000A4C44();
              LODWORD(v307) = 21;
            }

            else
            {
              sub_1000379E8();
              sub_1000A4ADC();
              sub_1000A4CD4();
              sub_1000A4AB4();
              sub_1000A4AA0(v281);
              sub_1000A4AA0(v282);
              sub_1000A4C44();
            }

            unint64_t v91 = (uint64_t)v304;
            v169 = v295;
            v167 = (uint64_t)v299;
LABEL_118:
            v242 = v264;
            sub_1000A4CDC((uint64_t)&v310, v168, &qword_1002AA7C0);
            v243 = sub_1000A3034((uint64_t)&v364);
            v299 = (void *)v167;
            if (v243 != 1)
            {
              sub_1000B6E24(v388);
              sub_1000A4D08(v244, v245, &qword_1002AA7C0);
              if ((v363 & 1) == 0)
              {
                v242 = *(void *)(v91 + 344);
                v262 = *(void *)(v91 + 336);
              }

              v246 = v285;
              if (v242)
              {
                UUID.init(uuidString:)(v262);
                if (sub_10001D158(v246, 1LL, v169) == 1)
                {
                  sub_10004DB00(v246, &qword_1002AC060);
                }

                else
                {
                  v247 = v276;
                  v248 = v275;
                  v249 = sub_1000A4CBC();
                  v250(v249);
                  v251 = v274;
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(v247 + 16))(v274, v248, v169);
                  sub_10001762C(v251, 0LL, 1LL, v169);
                  sub_1000B7680();
                  (*(void (**)(uint64_t, uint64_t))(v247 + 8))(v248, v169);
                }
              }
            }

            sub_1000B5BB8();
            __asm { BR              X10 }
          }

          sub_1000A4C44();
          sub_1000379E8();
          sub_1000A4AB4();
          sub_1000A4ADC();
        }

        swift_release();
        v169 = v295;
        goto LABEL_118;
      }
    }

    else
    {
      sub_100019F7C(&v364);
      v190 = (uint64_t)v309;
      v191 = v306;
    }

    v192 = v299;
    v196 = (uint64_t)v305;
    sub_1000A4DA8();
    sub_100087044();
    v195 = v197;
    v198 = *(unsigned __int8 *)(v190 + v308);
    v199 = v283;
    sub_1000A494C();
    if (v198 != 1)
    {
      sub_1000A486C();
      sub_1000A46BC();
      goto LABEL_97;
    }

    v200 = v277;
    sub_1000A33A4((uint64_t)&v199[*(int *)(v191 + 44)], v277);
    sub_1000A486C();
    LODWORD(v19sub_10006F0B8(12LL, 0) = 1;
    v201 = sub_1000A4D9C(v200);
    sub_10004DB00(v200, (uint64_t *)&unk_1002AFCD0);
    if (v201 == 1)
    {
      v283 = 0LL;
      v167 = 0LL;
      LODWORD(v303) = 2;
      LODWORD(v307) = 22;
      v192 = v299;
      goto LABEL_97;
    }

    sub_1000A4DA8();
    v192 = v299;
    v190 = *v309;
    sub_10003574C();
    sub_10008C1CC();
    v203 = v202;
    sub_10003561C();
    if (v203)
    {
      v204 = v203;
      sub_1000B52F0();
      v190 = v205;
      sub_1000B52F0();
      v207 = v206;

      unint64_t v91 = (uint64_t)v304;
      if (v190 == v207)
      {

        sub_1000A46BC();
        v195 = v204;
      }

      else
      {

        sub_1000A46BC();
      }
    }

    else
    {
      sub_1000A46BC();
      unint64_t v91 = (uint64_t)v304;
    }

    goto LABEL_96;
  }

  v170 = (uint64_t *)v280;
  v171 = v306;
  sub_1000A494C();
  if (*((_BYTE *)v78 + v308) == 1)
  {
    sub_1000A486C();
    v172 = (uint8_t *)v299;
LABEL_55:
    sub_1000A1F00(v160, v159, v172);
    v166 = v212;
    v261 = 0LL;
    goto LABEL_56;
  }

  v173 = v170;
  v172 = (uint8_t *)v299;
  LOBYTE(v291) = sub_1000A0B68((uint64_t)v92, v160, v159, v173, (uint64_t)v299, v91);
  LODWORD(v291) = v291;
  sub_1000A486C();
  if ((_DWORD)v291 == 22) {
    goto LABEL_55;
  }
  if ((v78[2] & 1) == 0)
  {
    v213 = type metadata accessor for UnableToPurchaseDialog();
    sub_100019310(v213, 448LL);
    v214 = sub_10011C2E8();
    sub_10001ED6C();
    uint64_t v80 = v214;
  }

  v342[1] = 0LL;
  v342[0] = 0LL;
  v342[2] = _swiftEmptyArrayStorage;
  v343 = 0;
  sub_1000A4C64();
  sub_1000A481C();
  v344 = v171;
  v345 = v80;
  v346 = 0LL;
  v347 = 1;
  v349 = 0LL;
  v348 = 0LL;
  v350 = 0xF000000000000000LL;
  v351 = 0LL;
  v352 = 0LL;
  v353 = 1LL;
  v354 = 0u;
  v355 = 0u;
  v356 = 0u;
  v357 = 0u;
  v358 = 18;
  v360 = 0LL;
  v359 = 0LL;
  v361 = v80;
  v362 = 1;
  *(void *)(v91 + 3sub_100019F7C(v0 + 2) = sub_1000A4A8C((uint64_t)&type metadata for LegacyInAppBuyResponse);
  v215 = sub_100019310((uint64_t)&unk_10027E870, 225LL);
  v216 = (void *)(v215 + 16);
  *(void *)unint64_t v91 = v215;
  sub_100053590((uint64_t)v342);
  sub_100034E8C((uint64_t)v267, v266);
  sub_1000379E8();
  swift_release();
  sub_1000A49E8(v216, v342);
  v365 = 0LL;
  v364 = 0LL;
  v366 = _swiftEmptyArrayStorage;
  v367 = v394;
  v368 = 0;
  v369 = v171;
  v370 = v80;
  v371 = 0LL;
  v372 = v391;
  v374 = 0LL;
  v373 = 0LL;
  v375 = 0xF000000000000000LL;
  v376 = 0LL;
  v377 = 0LL;
  v378 = 1LL;
  v382 = 0u;
  v381 = 0u;
  v380 = 0u;
  v379 = 0u;
  v383 = 18;
  v384 = 0LL;
  v385 = 0LL;
  v386 = v80;
  v387 = 1;
  char v137 = (void ***)&v364;
LABEL_37:
  sub_1000536E8((uint64_t)v137);
  return 0LL;
}

uint64_t sub_10008E444@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess(*a1 + 96, v6, 0LL, 0LL);
  uint64_t v4 = *(void *)(v3 + 96);
  *a2 = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_10008E48C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess(*a2 + 96, v6, 1LL, 0LL);
  uint64_t v4 = *(void *)(v3 + 96);
  *(void *)(v3 + 9sub_100019F7C(v0 + 6) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_10008E4E8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess(*a1 + 104, v6, 0LL, 0LL);
  uint64_t v4 = *(void *)(v3 + 104);
  *a2 = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_10008E530(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess(*a2 + 104, v6, 1LL, 0LL);
  uint64_t v4 = *(void *)(v3 + 104);
  *(void *)(v3 + 10sub_100019F7C(v0 + 4) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_10008E58C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return sub_100139BB8();
  }
  else {
    return *(void *)(a1 + 176);
  }
}

void sub_10008E5C0(void *a1, void **a2)
{
  id v3 = sub_10019F490();
  sub_100019390();
  uint64_t v4 = *a2;
  *a2 = v3;

  sub_1000193B8();
}

uint64_t sub_10008E610(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v7 = sub_100076ABC();
  sub_10003561C();
  double v8 = sub_100043A60(a3, a4, a2, v7);
  return Date.init(timeIntervalSinceReferenceDate:)(v8);
}

void sub_10008E68C()
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_100092A18();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_100092B28();
  sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  sub_1000226C8();
  __chkstk_darwin(v5);
  sub_10001DAD0();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = sub_100092BC8(v7 - v6);
  static Date.now.getter(v9);
  sub_10008CD68();
  char v11 = v10;
  char v13 = v12;
  sub_100093288(v0, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_100034F14(v8, (uint64_t *)&unk_1002AFCD0);
  if (v11)
  {
    id v14 = v11;
    sub_10008EFB0(v14);
  }

  sub_10009312C();
  if ((v15 & 1) != 0)
  {
    sub_10001762C(v8, 1LL, 1LL, v3);
    sub_1000B5FCC();
    sub_100092BC8(v8);
    sub_1000B5FC4();
    sub_100089348(v2, 1);
  }

  else if ((v13 & 1) != 0)
  {
    if (qword_1002A8CF8 != -1) {
      swift_once(&qword_1002A8CF8, sub_10010EF80);
    }
    uint64_t v16 = sub_1000175B0(&qword_1002A9098);
    uint64_t v17 = (__n128 *)sub_100092954(v16);
    uint64_t v18 = sub_100092A60(v17, (__n128)xmmword_1001F3C00);
    char v20 = sub_100092FF0(v18, v19);
    sub_100092C70(v20, v21, 33LL, v22);
    sub_10003561C();
  }

  if (qword_1002A8CF8 != -1) {
    swift_once(&qword_1002A8CF8, sub_10010EF80);
  }
  uint64_t v23 = sub_1000B3DEC();
  sub_10010F5E4(v23, v24);
  sub_10003561C();
  uint64_t v25 = sub_1000175B0(&qword_1002A9098);
  uint64_t v26 = (__n128 *)sub_100092954(v25);
  uint64_t v27 = sub_100092A60(v26, (__n128)xmmword_1001F3C00);
  char v29 = sub_100093008(v27, v28);
  sub_100092C70(v29, v30, 33LL, v31);
  sub_10003561C();

  sub_10002A580();
}

void sub_10008E8A8(void *a1)
{
  if (v5)
  {
    sub_100019F58((void *)(v1 + 16), *(void *)(v1 + 40));
    uint64_t v6 = sub_1000B3DDC();
    uint64_t v8 = v7;
    uint64_t v9 = sub_1000B3DEC();
    sub_100075EE8(v9, v10);
    sub_1000D7FA8(v6, v8);
    uint64_t v12 = v11;
    sub_100024F0C();
    sub_100023EF4();
    sub_10001DC10();
    if (v12)
    {
      uint64_t v13 = type metadata accessor for OctaneSubscription();
      if (swift_dynamicCastClass(v12, v13))
      {
        sub_10002A674();
        sub_1000B85BC(8u);
        if ((v14 & 1) == 0)
        {
          sub_100086EB8();
          uint64_t v16 = v15;
          sub_10002A5A4();
          if (!v16)
          {
            sub_10002A5A4();
            goto LABEL_13;
          }

          goto LABEL_12;
        }

        sub_1000930B4();
        uint64_t v19 = sub_100092A18();
        sub_100092DB0(v19);
        sub_100087044();
        uint64_t v16 = v20;
        sub_10001DC10();
        sub_10002A5A4();
      }

      else
      {
        sub_1000930B4();
        uint64_t v17 = sub_100092A18();
        sub_100092DB0(v17);
        sub_100086710();
        uint64_t v16 = v18;
        sub_10001A420();
      }

      sub_100034F14(v2, (uint64_t *)&unk_1002AFCD0);
LABEL_12:
      sub_1000B5A64(1u);
      sub_100092AA0(v16);

      sub_10002A5A4();
    }
  }

void sub_10008EA70(uint64_t a1)
{
  uint64_t v4 = v3;
  sub_10001A3F8();
  uint64_t v7 = v1;
  ChannelPipeline.syncOperations.getter();
  char v5 = (void (*)(void *, void))swift_modifyAtReferenceWritableKeyPath(v6, &v7, a1);
  sub_1001A0CD8((uint64_t *)&v8, v4);
  v5(v6, 0LL);
  swift_release(v7);
  sub_100092C28();
}

uint64_t sub_10008EB04()
{
  uint64_t v1 = *(void **)(v0 + 144);
  uint64_t v2 = v1;
  if (v1) {
    goto LABEL_25;
  }
  sub_100092F74();
  id v50 = 0LL;
  uint64_t v3 = sub_1000175B0(&qword_1002AE8A0);
  uint64_t inited = swift_initStackObject(v3, v49);
  *(_OWORD *)(inited + 1sub_100019F7C(v0 + 6) = xmmword_1001F3DD0;
  *(void *)(inited + 3sub_100019F7C(v0 + 2) = kSecImportExportPassphrase;
  *(void *)(inited + 4sub_10006F0B8(12LL, 0) = 0x74694B65726F7453LL;
  *(void *)(inited + 48) = 0xE800000000000000LL;
  *(void *)(inited + 6sub_100019F7C(v0 + 4) = &type metadata for String;
  *(void *)(inited + 7sub_100019F7C(v0 + 2) = kSecAttrAccessible;
  type metadata accessor for CFString(0LL);
  *(void *)(inited + 10sub_100019F7C(v0 + 4) = v5;
  *(void *)(inited + 8sub_10006F0B8(12LL, 0) = kSecAttrAccessibleAlways;
  sub_100046F3C(&qword_1002A9170, (uint64_t (*)(uint64_t))type metadata accessor for CFString, a5_2);
  uint64_t v6 = (id)kSecImportExportPassphrase;
  uint64_t v7 = (id)kSecAttrAccessible;
  uint64_t v8 = (id)kSecAttrAccessibleAlways;
  uint64_t v9 = sub_10009307C();
  Dictionary.init(dictionaryLiteral:)(v9, v10, v11);
  v12.super.isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10009307C();
  v13.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  sub_100023EEC();
  char v14 = (const __CFData *)sub_100092F80();
  uint64_t v17 = (objc_class *)SecPKCS12Import(v14, v15, v16);

  if ((_DWORD)v17)
  {
    CFStringRef v18 = SecCopyErrorMessageString((OSStatus)v17, 0LL);
    if (v18)
    {
      uint64_t v19 = (__CFString *)v18;
      if (qword_1002A8D90 != -1) {
        swift_once(&qword_1002A8D90, sub_100183E34);
      }
      uint64_t v20 = sub_100077D08();
      sub_100018F68(v20, (uint64_t)qword_1002EB9D0);
      uint64_t v21 = v19;
      sub_100092BFC();
      os_log_type_t v22 = sub_100092B20();
      if (sub_100092AD4((os_log_s *)v12.super.isa))
      {
        uint64_t v23 = (uint8_t *)sub_100019464(12LL);
        uint64_t v24 = (void *)sub_100019464(8LL);
        *(_DWORD *)uint64_t v23 = 138412290;
        *(void *)&v48[0] = v17;
        uint64_t v25 = v17;
        sub_100092C54((uint64_t)v48, (uint64_t)v48 + 8);
        *uint64_t v24 = v19;

        sub_100092A00((void *)&_mh_execute_header, (os_log_s *)v12.super.isa, v22, "Error importing .p12 data: %@", v23);
        sub_1000175B0(&qword_1002B6F90);
        sub_10009293C((uint64_t)v24);
        sub_10001A408((uint64_t)v24);
        sub_10001A408((uint64_t)v23);
      }

      else
      {

        v12.super.isa = v17;
      }

      goto LABEL_24;
    }

    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v34 = sub_100077D08();
    sub_100092ADC(v34, (uint64_t)qword_1002EB9D0);
    os_log_type_t v35 = sub_100092B20();
    if (!sub_100092998(v35)) {
      goto LABEL_24;
    }
    v13.super.isa = (Class)sub_100019464(8LL);
    LODWORD(v13.super.isa->isa) = 67109120;
    LODWORD(v48[0]) = (_DWORD)v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v48, (char *)v48 + 4, (char *)&v13.super.isa->isa + 4);
    uint64_t v36 = "Error importing .p12 data: %d";
    isa = (os_log_s *)v12.super.isa;
    os_log_type_t v38 = v0;
    unsigned int v39 = (uint8_t *)v13.super.isa;
    uint32_t v40 = 8;
LABEL_23:
    _os_log_impl((void *)&_mh_execute_header, isa, v38, v36, v39, v40);
    sub_10001A408((uint64_t)v13.super.isa);
LABEL_24:

    sub_100056B6C();
    uint64_t v2 = 0LL;
    goto LABEL_25;
  }

  if (!v50
    || (*(void *)&v48[0] = 0LL,
        id v26 = v50,
        uint64_t v27 = sub_1000175B0(&qword_1002AE8A8),
        static Array._conditionallyBridgeFromObjectiveC(_:result:)(v26, v48, v27),
        v26,
        (v12.super.isa = *(Class *)&v48[0]) == 0LL))
  {
LABEL_19:
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v41 = sub_100077D08();
    sub_100092ADC(v41, (uint64_t)qword_1002EB9D0);
    os_log_type_t v42 = sub_100092B20();
    if (!sub_100092998(v42)) {
      goto LABEL_24;
    }
    uint64_t v43 = (_WORD *)sub_100019464(2LL);
    sub_100093200(v43);
    uint64_t v36 = "No identities found after import";
    isa = (os_log_s *)v12.super.isa;
    os_log_type_t v38 = v0;
    unsigned int v39 = (uint8_t *)v13.super.isa;
    uint32_t v40 = 2;
    goto LABEL_23;
  }

  if (!*(void *)(*(void *)&v48[0] + 16LL))
  {
    sub_100019390();
    goto LABEL_19;
  }

  uint64_t v28 = *(void *)(*(void *)&v48[0] + 32LL);
  sub_10001ED74();
  sub_100019390();
  char v29 = (id)kSecImportItemIdentity;
  sub_10012A3C8((uint64_t)v29, v28, &v46);

  uint64_t result = sub_10001A3F8();
  if (v47)
  {
    sub_100034728(&v46, v48);
    type metadata accessor for SecIdentity(0LL);
    swift_dynamicCast(&v45, v48, (char *)&type metadata for Any + 8, v31, 7LL);
    uint64_t v2 = v45;
    uint64_t v32 = *(void **)(v0 + 144);
    *(void *)(v0 + 14sub_100019F7C(v0 + 4) = v45;
    id v33 = v2;

    sub_100056B6C();
LABEL_25:
    id v44 = v1;
    return (uint64_t)v2;
  }

  __break(1u);
  return result;
}

uint64_t sub_10008EFB0(void *a1)
{
  uint64_t v5 = type metadata accessor for TaskPriority(0LL);
  sub_10001762C(v2, 0LL, 1LL, v5);
  uint64_t v6 = (void *)sub_100092954((uint64_t)&unk_10027DC38);
  _OWORD v6[2] = 0LL;
  void v6[3] = 0LL;
  void v6[4] = v1;
  v6[5] = a1;
  ChannelPipeline.syncOperations.getter();
  id v7 = a1;
  uint64_t v8 = sub_100157664(v2, (uint64_t)&unk_1002AE860, (uint64_t)v6);
  return swift_release(v8);
}

uint64_t sub_10008F054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 1sub_100019F7C(v0 + 6) = a4;
  *(void *)(v5 + 2sub_100019F7C(v0 + 4) = a5;
  return swift_task_switch(sub_10008F06C, 0LL, 0LL);
}

uint64_t sub_10008F06C()
{
  uint64_t v1 = v0[2];
  v0[4] = sub_100092D6C();
  uint64_t v2 = *(void *)(v1 + 120);
  v0[5] = v2;
  ChannelPipeline.syncOperations.getter();
  return sub_100037A30((uint64_t)sub_10008F0B0, v2, 0LL);
}

uint64_t sub_10008F0B0()
{
  return sub_10003786C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10008F0E4()
{
  sub_1000928D0(*(void *)(v0 + 152), *(void *)(v0 + 160));
  return v0;
}

uint64_t sub_10008F140()
{
  return swift_deallocClassInstance(v0, 176LL, 7LL);
}

uint64_t type metadata accessor for OctaneTransactionManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService24OctaneTransactionManager);
}

void sub_10008F180(id a1, uint64_t a2, void *a3)
{
  int64_t v4 = v3;
  uint64_t v8 = type metadata accessor for ContinuousClock.Instant(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  NSData v12 = &v52[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v10);
  char v14 = &v52[-v13];
  sub_1000B6170();
  if ((v15 & 1) == 0)
  {
    sub_10008F8E4(a1);
    return;
  }

  uint64_t v56 = v12;
  uint64_t v57 = v9;
  uint64_t v58 = v8;
  uint64_t v16 = (uint64_t *)(v3 + 112);
  swift_beginAccess(v3 + 112, v62, 33LL, 0LL);
  int64_t v17 = sub_100091B7C((uint64_t *)(v3 + 112));
  int64_t v18 = *(void *)(v4 + 112);
  if ((unint64_t)v18 >> 62)
  {
    if (v18 < 0) {
      uint64_t v50 = *(void *)(v4 + 112);
    }
    else {
      uint64_t v50 = v18 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v50);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v19 < v17)
  {
    __break(1u);
  }

  else
  {
    uint64_t v59 = (uint64_t)v14;
    sub_100034AF8();
    swift_endAccess(v62);
    sub_1000B52F0();
    uint64_t v21 = v20;
    uint64_t v22 = sub_1000B3DEC();
    int64_t v18 = v23;
    uint64_t v24 = swift_allocObject(&unk_10027DC60, 24LL, 7LL);
    swift_weakInit(v24 + 16, v4);
    uint64_t v25 = (void *)swift_allocObject(&unk_10027DC88, 64LL, 7LL);
    __int128 v25[2] = v24;
    v25[3] = v21;
    uint64_t v54 = v21;
    uint64_t v55 = v22;
    void v25[4] = v22;
    v25[5] = v18;
    v25[6] = a2;
    v25[7] = a3;
    uint64_t v26 = type metadata accessor for SubscriptionRenewalCoordinator.RenewalTask(0LL);
    swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
    swift_retain();
    a1 = a1;
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v27 = sub_100090904(a1, (uint64_t)&unk_1002AE870, (uint64_t)v25);
    if (!v27)
    {
      swift_bridgeObjectRelease();
      return;
    }

    a3 = v27;
    swift_beginAccess(v16, v62, 33LL, 0LL);
    swift_retain_n(a3, 2LL);
    int64_t v4 = sub_100091E78(v16, a3);
    int64_t v17 = *v16;
    if (!((unint64_t)*v16 >> 62))
    {
      uint64_t v28 = *(void *)((v17 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      goto LABEL_8;
    }
  }

  if (v17 < 0) {
    uint64_t v51 = v17;
  }
  else {
    uint64_t v51 = v17 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t v28 = _CocoaArrayWrapper.endIndex.getter(v51);
  swift_bridgeObjectRelease();
LABEL_8:
  uint64_t v29 = v59;
  if (v28 < v4)
  {
    __break(1u);
  }

  else
  {
    sub_100034AF8();
    uint64_t v30 = swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v30);
    uint64_t v31 = *(void *)((*v16 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    sub_10002E9EC(v31);
    uint64_t v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, a3);
    specialized Array._endMutation()(v32);
    swift_endAccess(v62);
    if (qword_1002A8D90 == -1) {
      goto LABEL_10;
    }
  }

  swift_once(&qword_1002A8D90, sub_100183E34);
LABEL_10:
  uint64_t v33 = type metadata accessor for Logger(0LL);
  sub_100018F68(v33, (uint64_t)qword_1002EB9D0);
  id v34 = a1;
  swift_retain_n(a3, 2LL);
  id v35 = v34;
  uint64_t v36 = swift_bridgeObjectRetain();
  uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v38 = static os_log_type_t.debug.getter();
  int v39 = v38;
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v40 = swift_slowAlloc(42LL, -1LL);
    uint64_t v59 = swift_slowAlloc(96LL, -1LL);
    v62[0] = v59;
    *(_DWORD *)uint64_t v40 = 136315906;
    uint64_t v41 = sub_1000B3DDC();
    uint64_t v60 = sub_1000CF360(v41, v42, v62);
    int v53 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v40 + 4);
    swift_bridgeObjectRelease();

    *(_WORD *)(v40 + 1sub_100019F7C(v0 + 2) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v60 = sub_1000CF360(v55, v18, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v40 + 14);
    swift_bridgeObjectRelease_n(v18, 3LL);
    *(_WORD *)(v40 + 2sub_100019F7C(v0 + 2) = 2048;
    uint64_t v60 = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v40 + 24);
    *(_WORD *)(v40 + 3sub_100019F7C(v0 + 2) = 2080;
    uint64_t v43 = sub_10008F82C();
    id v44 = v56;
    static ContinuousClock.Instant.now.getter(v43);
    ContinuousClock.Instant.duration(to:)(v44);
    uint64_t v45 = *(void (**)(_BYTE *, uint64_t))(v57 + 8);
    __int128 v46 = v44;
    uint64_t v47 = v58;
    v45(v46, v58);
    v45((_BYTE *)v29, v47);
    Swift::String v48 = Duration.formatted()();
    uint64_t v60 = sub_1000CF360(v48._countAndFlagsBits, (unint64_t)v48._object, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v40 + 34);
    swift_bridgeObjectRelease();
    swift_release_n(a3, 2LL);
    _os_log_impl( (void *)&_mh_execute_header,  v37,  (os_log_type_t)v53,  "Scheduled subscription renewal of %s for %s (transactionID: %lu). The renewal will occur in %s.",  (uint8_t *)v40,  0x2Au);
    uint64_t v49 = v59;
    swift_arrayDestroy(v59, 3LL);
    swift_slowDealloc(v49, -1LL, -1LL);
    swift_slowDealloc(v40, -1LL, -1LL);

    swift_release_n(a3, 2LL);
  }

  else
  {
    swift_release_n(a3, 4LL);

    swift_bridgeObjectRelease_n(v18, 2LL);
  }

uint64_t sub_10008F718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[9] = a5;
  v6[10] = a6;
  v6[7] = a3;
  v6[8] = a4;
  v6[5] = a1;
  v6[6] = a2;
  return swift_task_switch(sub_10008F738, 0LL, 0LL);
}

uint64_t sub_10008F738()
{
  uint64_t v1 = *(void *)(v0 + 40) + 16LL;
  sub_1000487CC(v1, v0 + 16);
  uint64_t Strong = swift_weakLoadStrong(v1);
  *(void *)(v0 + sub_100081CEC(v0 + 88) = Strong;
  if (!Strong) {
    return sub_10003786C(*(uint64_t (**)(void))(v0 + 8));
  }
  int64_t v3 = (void *)swift_task_alloc(dword_1002AE89C);
  *(void *)(v0 + 9sub_100019F7C(v0 + 6) = v3;
  *int64_t v3 = v0;
  v3[1] = sub_10008F7C0;
  return sub_10008FBAC( *(void *)(v0 + 48),  *(void *)(v0 + 56),  *(void *)(v0 + 64),  *(void *)(v0 + 72),  *(void *)(v0 + 80));
}

uint64_t sub_10008F7C0()
{
  return sub_10003786C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10008F7F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 != a4) {
    return 0LL;
  }
  if (a2 == a5 && a3 == a6) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, a5, a6, 0LL);
  }
}

uint64_t sub_10008F82C()
{
  uint64_t v0 = type metadata accessor for ContinuousClock.Instant(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin();
  int64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  double v5 = Date.timeIntervalSinceReferenceDate.getter(v2);
  double v6 = v5 - static Date.timeIntervalSinceReferenceDate.getter();
  uint64_t v7 = static ContinuousClock.Instant.now.getter();
  uint64_t v8 = static Duration.seconds(_:)(v7, v6);
  ContinuousClock.Instant.advanced(by:)(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

void sub_10008F8E4(void *a1)
{
  id v3 = a1;
  uint64_t v4 = sub_100091774((uint64_t *)(v1 + 112), v3);
  uint64_t v5 = *(void *)(v1 + 112);
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0) {
      uint64_t v19 = *(void *)(v1 + 112);
    }
    else {
      uint64_t v19 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v6 < v4)
  {
    __break(1u);
  }

  else
  {
    sub_100034AF8();
    swift_endAccess(v22);
    if (qword_1002A8D90 == -1) {
      goto LABEL_5;
    }
  }

  swift_once(&qword_1002A8D90, sub_100183E34);
LABEL_5:
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_100018F68(v7, (uint64_t)qword_1002EB9D0);
  id v8 = v3;
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    uint64_t v12 = swift_slowAlloc(64LL, -1LL);
    v22[0] = v12;
    *(_DWORD *)uint64_t v11 = 136315650;
    uint64_t v13 = sub_1000B3DDC();
    uint64_t v20 = sub_1000CF360(v13, v14, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v11 + 4);

    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 1sub_100019F7C(v0 + 2) = 2080;
    uint64_t v15 = sub_1000B3DEC();
    uint64_t v20 = sub_1000CF360(v15, v16, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v11 + 14);

    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 2sub_100019F7C(v0 + 2) = 2048;
    sub_1000B52F0();
    uint64_t v18 = v17;

    uint64_t v20 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v11 + 24);

    _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "Cancelled subscription renewal of %s for %s (transactionID: %lu)",  (uint8_t *)v11,  0x20u);
    swift_arrayDestroy(v12, 2LL);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
  }

uint64_t sub_10008FBAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE v6[24] = a5;
  v6[25] = v5;
  v6[22] = a3;
  v6[23] = a4;
  v6[20] = a1;
  v6[21] = a2;
  uint64_t v7 = type metadata accessor for Date(0LL);
  v6[26] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[27] = v8;
  v6[28] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  v6[29] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10008FC38, v5, 0LL);
}

uint64_t sub_10008FC38()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 160;
  uint64_t v3 = v2 - 40;
  uint64_t v4 = v2 - 16;
  uint64_t v21 = v2 - 48;
  uint64_t v22 = v2 - 8;
  if (sub_1000891E0())
  {
    sub_1000B5BB8();
    sub_100092BD8();
    __asm { BR              X10 }
  }

  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v6 = *(void *)(v1 + 176);
  uint64_t v7 = sub_100077D08();
  uint64_t v8 = (os_log_s *)sub_100018F68(v7, (uint64_t)qword_1002EB9D0);
  uint64_t v9 = sub_100023E64(v6);
  os_log_type_t v10 = v8;
  Logger.logObject.getter(v9);
  os_log_type_t v11 = sub_100092F58();
  BOOL v12 = os_log_type_enabled(v8, v11);
  uint64_t v13 = *(void *)(v1 + 176);
  if (v12)
  {
    uint64_t v15 = *(void *)(v1 + 160);
    uint64_t v14 = *(void *)(v1 + 168);
    uint64_t v16 = sub_100019464(22LL);
    uint64_t v17 = sub_100019464(32LL);
    uint64_t v23 = v17;
    sub_100092EAC(3.9123e-34);
    *(void *)(v1 + 11sub_100019F7C(v0 + 2) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v21, v3, v18);
    *(_WORD *)(v16 + 1sub_100019F7C(v0 + 2) = 2082;
    sub_10001ED74();
    *(void *)(v1 + 14sub_100019F7C(v0 + 4) = sub_100092EE4(v14, v19, &v23);
    sub_100093220(v4, v22);
    sub_100077CA8(v13);
    sub_100092A58( (void *)&_mh_execute_header,  v10,  v11,  "No auto-renewable transaction found with id %{public}lu for %{public}s, cannot process renewal.",  (uint8_t *)v16);
    sub_10009293C(v17);
    sub_10001A408(v17);
    sub_10001A408(v16);
  }

  else
  {

    sub_10001EDE8(v13);
  }

  swift_task_dealloc(*(void *)(v1 + 232));
  sub_100092EBC();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t type metadata accessor for SubscriptionRenewalCoordinator()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCServiceP33_4168D9B03AF8124BE3111952AAE62D6930SubscriptionRenewalCoordinator);
}

uint64_t sub_10009079C(uint64_t a1, Swift::UInt a2, uint64_t a3, uint64_t a4)
{
  return swift_bridgeObjectRelease(a4);
}

Swift::Int sub_1000907EC(Swift::UInt a1, uint64_t a2, uint64_t a3)
{
  return Hasher._finalize()();
}

Swift::Int sub_100090864()
{
  return sub_1000907EC(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

uint64_t sub_100090870(uint64_t a1)
{
  return sub_10009079C(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16));
}

Swift::Int sub_10009087C()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Hasher.init(_seed:)(v5);
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000908E8(uint64_t *a1, uint64_t *a2)
{
  return sub_10008F7F0(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

void *sub_100090904(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v59 = a2;
  uint64_t v60 = *v4;
  uint64_t v61 = a3;
  uint64_t v6 = sub_1000175B0(&qword_1002AA6C8);
  __chkstk_darwin(v6);
  uint64_t v58 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  uint64_t v9 = __chkstk_darwin(v8);
  os_log_type_t v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v56 - v12;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v57 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v56 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v56 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v56 - v20;
  *((_BYTE *)v4
  + OBJC_IVAR____TtCC25ASOctaneSupportXPCServiceP33_4168D9B03AF8124BE3111952AAE62D6930SubscriptionRenewalCoordinator11RenewalTask_isComplete) = 0;
  *(void *)((char *)v4
            + OBJC_IVAR____TtCC25ASOctaneSupportXPCServiceP33_4168D9B03AF8124BE3111952AAE62D6930SubscriptionRenewalCoordinator11RenewalTask_task) = 0LL;
  id v22 = a1;
  sub_1000B52F0();
  uint64_t v24 = v23;
  uint64_t v25 = sub_1000B3DEC();
  uint64_t v27 = v26;

  void v4[2] = v24;
  void v4[3] = v25;
  v4[4] = v27;
  uint64_t v28 = sub_1000B85C8(4u);
  if ((v29 & 1) != 0)
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v31 = type metadata accessor for Logger(0LL);
    sub_100018F68(v31, (uint64_t)qword_1002EB9D0);
    uint64_t v32 = (char *)v22;
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v34 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = swift_slowAlloc(32LL, -1LL);
      uint64_t v36 = swift_slowAlloc(64LL, -1LL);
      uint64_t v63 = v36;
      *(_DWORD *)uint64_t v35 = 136446722;
      uint64_t v37 = sub_1000B3DDC();
      uint64_t v62 = sub_1000CF360(v37, v38, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v35 + 4);

      swift_bridgeObjectRelease();
      *(_WORD *)(v35 + 1sub_100019F7C(v0 + 2) = 2050;
      uint64_t v39 = *(void *)&v32[OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___id];

      uint64_t v62 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v35 + 14);

      *(_WORD *)(v35 + 2sub_100019F7C(v0 + 2) = 2082;
      uint64_t v40 = sub_1000B3DEC();
      uint64_t v62 = sub_1000CF360(v40, v41, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v35 + 24);

      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v33,  v34,  "No expiration date for %{public}s transaction %{public}lu in %{public}s. Cannot schedule renewal!",  (uint8_t *)v35,  0x20u);
      swift_arrayDestroy(v36, 2LL);
      swift_slowDealloc(v36, -1LL, -1LL);
      swift_slowDealloc(v35, -1LL, -1LL);

      swift_release();
    }

    else
    {

      swift_release();
    }

    swift_bridgeObjectRelease();
    swift_release();
    swift_deallocPartialClassInstance(v4, v60, *(unsigned int *)(*v4 + 48LL), *(unsigned __int16 *)(*v4 + 52LL));
    return 0LL;
  }

  else
  {
    Date.init(timeIntervalSinceReferenceDate:)(*(double *)&v28);
    sub_1000B6DC0((uint64_t)v13);
    if (sub_10001D158((uint64_t)v13, 1LL, v14) == 1)
    {
      sub_100034F14((uint64_t)v13, (uint64_t *)&unk_1002AFCD0);
      uint64_t v30 = v57;
    }

    else
    {
      uint64_t v30 = v57;
      unint64_t v42 = *(void (**)(char *, char *, uint64_t))(v57 + 32);
      v42(v19, v13, v14);
      char v43 = static Date.< infix(_:_:)(v19, v21);
      id v44 = *(void (**)(char *, uint64_t))(v30 + 8);
      if ((v43 & 1) != 0)
      {
        v44(v21, v14);
        v42(v21, v19, v14);
      }

      else
      {
        v44(v19, v14);
      }
    }

    uint64_t v45 = v56;
    sub_1000B6E1C((uint64_t)v11);
    if (sub_10001D158((uint64_t)v11, 1LL, v14) == 1)
    {
      sub_100034F14((uint64_t)v11, (uint64_t *)&unk_1002AFCD0);
    }

    else
    {
      __int128 v46 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
      v46(v45, v11, v14);
      char v47 = static Date.< infix(_:_:)(v45, v21);
      Swift::String v48 = *(void (**)(char *, uint64_t))(v30 + 8);
      if ((v47 & 1) != 0)
      {
        v48(v21, v14);
        v46(v21, v45, v14);
      }

      else
      {
        v48(v45, v14);
      }
    }

    uint64_t v49 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v30 + 16))( (uint64_t)v4 + OBJC_IVAR____TtCC25ASOctaneSupportXPCServiceP33_4168D9B03AF8124BE3111952AAE62D6930SubscriptionRenewalCoordinator11RenewalTask_expirationDate,  v21,  v14);
    uint64_t v50 = (uint64_t)v58;
    static TaskPriority.background.getter(v49);
    uint64_t v51 = type metadata accessor for TaskPriority(0LL);
    sub_10001762C(v50, 0LL, 1LL, v51);
    uint64_t v52 = (void *)swift_allocObject(&unk_10027DCB0, 56LL, 7LL);
    v52[2] = 0LL;
    v52[3] = 0LL;
    uint64_t v53 = v59;
    _BYTE v52[4] = v4;
    v52[5] = v53;
    v52[6] = v61;
    swift_retain();
    uint64_t v54 = sub_1000911C8(v50, (uint64_t)&unk_1002AE880, (uint64_t)v52);

    (*(void (**)(char *, uint64_t))(v30 + 8))(v21, v14);
    *(void *)((char *)v4
              + OBJC_IVAR____TtCC25ASOctaneSupportXPCServiceP33_4168D9B03AF8124BE3111952AAE62D6930SubscriptionRenewalCoordinator11RenewalTask_task) = v54;
    swift_release();
  }

  return v4;
}

uint64_t sub_100090ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  uint64_t v7 = type metadata accessor for ContinuousClock(0LL);
  v6[8] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[9] = v8;
  v6[10] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for ContinuousClock.Instant(0LL);
  v6[11] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[12] = v10;
  v6[13] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100090F64, 0LL, 0LL);
}

uint64_t sub_100090F64()
{
  uint64_t v1 = sub_10008F82C();
  *(void *)(v0 + 1sub_100019F7C(v0 + 6) = static Duration.zero.getter(v1);
  *(void *)(v0 + 2sub_100019F7C(v0 + 4) = v2;
  *(_BYTE *)(v0 + 3sub_100019F7C(v0 + 2) = 0;
  ContinuousClock.init()();
  Swift::UInt v3 = (void *)swift_task_alloc(async function pointer to static Task<>.sleep<A>(until:tolerance:clock:)[1]);
  *(void *)(v0 + 11sub_100019F7C(v0 + 2) = v3;
  sub_100046F3C( &qword_1002AE888,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock,  (const char *)&protocol conformance descriptor for ContinuousClock);
  *Swift::UInt v3 = v0;
  v3[1] = sub_10009100C;
  return static Task<>.sleep<A>(until:tolerance:clock:)( *(void *)(v0 + 104),  v0 + 16,  *(void *)(v0 + 80),  *(void *)(v0 + 64),  v4);
}

uint64_t sub_10009100C()
{
  uint64_t v3 = v2[14];
  uint64_t v5 = v2[9];
  uint64_t v4 = v2[10];
  uint64_t v6 = v2[8];
  *uint64_t v7 = *v1;
  v2[15] = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v8 = sub_100092F80();
  v9(v8);
  if (v0) {
    uint64_t v10 = sub_100091190;
  }
  else {
    uint64_t v10 = sub_1000910A8;
  }
  return swift_task_switch(v10, 0LL, 0LL);
}

uint64_t sub_1000910A8()
{
  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    uint64_t v1 = sub_100092F8C();
    sub_100092DCC(v1, v2);
    sub_100092EBC();
    return sub_10003786C(*(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    uint64_t v4 = *(int **)(v0 + 48);
    uint64_t v6 = (uint64_t (*)(void))((char *)v4 + *v4);
    uint64_t v5 = (void *)swift_task_alloc(v4[1]);
    *(void *)(v0 + 128) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_100091120;
    return sub_10003786C(v6);
  }

uint64_t sub_100091120()
{
  return sub_100037A30((uint64_t)sub_100091158, 0LL, 0LL);
}

uint64_t sub_100091158()
{
  uint64_t v1 = sub_100092F8C();
  sub_100092DCC(v1, v2);
  sub_100092EBC();
  return sub_10003786C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100091190()
{
  uint64_t v1 = sub_100092F8C();
  sub_100092DCC(v1, v2);
  sub_100092EBC();
  return sub_10003786C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000911C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = sub_10001D158(a1, 1LL, v6);
  if ((_DWORD)v7 == 1)
  {
    sub_100034F14(a1, &qword_1002AA6C8);
    uint64_t v8 = 7168LL;
  }

  else
  {
    unsigned __int8 v9 = TaskPriority.rawValue.getter(v7);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v8 = v9 | 0x1C00LL;
  }

  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    uint64_t v11 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v10);
    uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
    uint64_t v15 = v14;
    swift_unknownObjectRelease(v10);
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v15 = 0LL;
  }

  if (v15 | v13)
  {
    v18[0] = 0LL;
    v18[1] = 0LL;
    uint64_t v16 = v18;
    v18[2] = v13;
    void v18[3] = v15;
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  return swift_task_create(v8, v16, &type metadata for ()[8], a2, a3);
}

uint64_t sub_1000912F0()
{
  if (*(void *)(v0
                 + OBJC_IVAR____TtCC25ASOctaneSupportXPCServiceP33_4168D9B03AF8124BE3111952AAE62D6930SubscriptionRenewalCoordinator11RenewalTask_task))
  {
    swift_retain();
    sub_1000175B0(&qword_1002A9710);
    Task.cancel()();
    swift_release();
  }

  swift_bridgeObjectRelease();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCC25ASOctaneSupportXPCServiceP33_4168D9B03AF8124BE3111952AAE62D6930SubscriptionRenewalCoordinator11RenewalTask_expirationDate;
  uint64_t v2 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_release();
  return v0;
}

uint64_t sub_100091398()
{
  uint64_t v0 = sub_1000912F0();
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1000913B8()
{
  return type metadata accessor for SubscriptionRenewalCoordinator.RenewalTask(0LL);
}

uint64_t type metadata accessor for SubscriptionRenewalCoordinator.RenewalTask(uint64_t a1)
{
  uint64_t result = qword_1002AE7A8;
  if (!qword_1002AE7A8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SubscriptionRenewalCoordinator.RenewalTask);
  }
  return result;
}

uint64_t sub_1000913F8(uint64_t a1)
{
  v4[0] = &unk_1001FAD58;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = &unk_1001FAD70;
    void v4[3] = &unk_1001FAD88;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 4LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SubscriptionRenewalCoordinator.RenewalTask.ID( uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for SubscriptionRenewalCoordinator.RenewalTask.ID(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

void *assignWithCopy for SubscriptionRenewalCoordinator.RenewalTask.ID(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v3 = a2[2];
  uint64_t v4 = a1[2];
  a1[2] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for SubscriptionRenewalCoordinator.RenewalTask.ID(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for SubscriptionRenewalCoordinator.RenewalTask.ID(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(sub_1000680EC(v0, v1, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(sub_1000680EC(v0, v1, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(sub_1000680EC(v0, v1, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SubscriptionRenewalCoordinator.RenewalTask.ID( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 1sub_100019F7C(v0 + 6) = 0LL;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 2sub_100019F7C(v0 + 4) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 1sub_100019F7C(v0 + 6) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 2sub_100019F7C(v0 + 4) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SubscriptionRenewalCoordinator.RenewalTask.ID()
{
  return &type metadata for SubscriptionRenewalCoordinator.RenewalTask.ID;
}

unint64_t sub_1000915D4()
{
  unint64_t result = qword_1002AE848;
  if (!qword_1002AE848)
  {
    unint64_t result = swift_getWitnessTable("-/\b", &type metadata for SubscriptionRenewalCoordinator.RenewalTask.ID);
    atomic_store(result, (unint64_t *)&qword_1002AE848);
  }

  return result;
}

unint64_t sub_100091614()
{
  unint64_t result = qword_1002AE850;
  if (!qword_1002AE850)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FADCC, &type metadata for SubscriptionRenewalCoordinator.RenewalTask.ID);
    atomic_store(result, &qword_1002AE850);
  }

  return result;
}

uint64_t sub_100091650@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32LL);
  *(_OWORD *)a1 = *(_OWORD *)(*(void *)v1 + 16LL);
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = v2;
  return swift_bridgeObjectRetain(v2);
}

id sub_100091668()
{
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_1000175B0(&qword_1002AC960);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v5 = [v0 initWithBundleID:v1 bundleVersion:v2 deviceID:v3 transactions:isa];

  return v5;
}

uint64_t sub_10009174C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_100091774(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  id v6 = a2;
  unint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = sub_100085540(v7, v6);
  if (v2)
  {

    swift_bridgeObjectRelease();
    return v3;
  }

  uint64_t v3 = v8;
  char v10 = v9;
  char v43 = a1;
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0)
  {
    uint64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1LL)) {
      goto LABEL_72;
    }
    uint64_t v5 = *v43;
    if ((unint64_t)*v43 >> 62)
    {
LABEL_73:
      if (v5 < 0) {
        uint64_t v38 = v5;
      }
      else {
        uint64_t v38 = v5 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v38);
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v12 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    if (v11 != v12)
    {
      uint64_t v13 = v3 + 5;
      uint64_t v14 = v43;
      id v42 = v6;
      while (1)
      {
        unint64_t v15 = v13 - 4;
        uint64_t v16 = *v14;
        unint64_t v45 = v3;
        unint64_t v44 = v13 - 4;
        if ((*v14 & 0xC000000000000001LL) != 0)
        {
          os_log_type_t v34 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v16);
        }

        else
        {
          if ((v15 & 0x8000000000000000LL) != 0)
          {
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
LABEL_70:
            __break(1u);
LABEL_71:
            __break(1u);
LABEL_72:
            __break(1u);
            goto LABEL_73;
          }

          if (v15 >= *(void *)((v16 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
            goto LABEL_63;
          }
          os_log_type_t v34 = *(void **)(v16 + 8 * v13);
          swift_retain();
        }

        uint64_t v17 = v34[2];
        uint64_t v5 = v34[3];
        uint64_t v18 = v34[4];
        id v19 = v6;
        sub_1000B52F0();
        uint64_t v21 = v20;
        uint64_t v22 = sub_1000B3DEC();
        uint64_t v24 = v23;
        unint64_t v41 = v19;

        if (v17 == v21)
        {
          if (v5 == v22 && v18 == v24)
          {
            swift_release();
            swift_bridgeObjectRelease();
            id v6 = v42;
            uint64_t v14 = v43;
LABEL_46:
            uint64_t v3 = v45;
            uint64_t v11 = v13 - 4;
            goto LABEL_47;
          }

          uint64_t v5 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v18, v22, v24, 0LL);
          swift_release();
          swift_bridgeObjectRelease();
          id v6 = v42;
          uint64_t v14 = v43;
          if ((v5 & 1) != 0) {
            goto LABEL_46;
          }
        }

        else
        {
          swift_release();
          swift_bridgeObjectRelease();
          id v6 = v42;
          uint64_t v14 = v43;
        }

        uint64_t v3 = v45;
        uint64_t v11 = v13 - 4;
        if (v44 != v45)
        {
          uint64_t v5 = *v14;
          if ((*v14 & 0xC000000000000001LL) != 0)
          {
            uint64_t v26 = specialized _ArrayBuffer._getElementSlowPath(_:)(v45, *v14);
            uint64_t v5 = *v14;
          }

          else
          {
            if ((v45 & 0x8000000000000000LL) != 0) {
              goto LABEL_66;
            }
            if (v45 >= *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
              goto LABEL_67;
            }
            uint64_t v26 = *(void *)(v5 + 8 * v45 + 32);
            swift_retain();
          }

          if ((v5 & 0xC000000000000001LL) != 0)
          {
            uint64_t v27 = specialized _ArrayBuffer._getElementSlowPath(_:)(v44, v5);
            uint64_t v5 = *v14;
          }

          else
          {
            if ((v44 & 0x8000000000000000LL) != 0) {
              goto LABEL_68;
            }
            if (v44 >= *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
              goto LABEL_69;
            }
            uint64_t v27 = *(void *)(v5 + 8 * v13);
            swift_retain();
          }

          int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v5);
          *uint64_t v14 = v5;
          if (!isUniquelyReferenced_nonNull_bridgeObject || v5 < 0 || (v5 & 0x4000000000000000LL) != 0)
          {
            uint64_t v5 = sub_100165138(v5);
            *uint64_t v14 = v5;
          }

          *(void *)((v5 & 0xFFFFFFFFFFFFFF8LL) + 8 * v45 + 0x2sub_10006F0B8(12LL, 0) = v27;
          uint64_t v29 = swift_release();
          specialized Array._endMutation()(v29);
          uint64_t v5 = *v14;
          int v30 = swift_isUniquelyReferenced_nonNull_bridgeObject(*v14);
          *uint64_t v14 = v5;
          if (!v30 || v5 < 0 || (v5 & 0x4000000000000000LL) != 0)
          {
            uint64_t v5 = sub_100165138(v5);
            *uint64_t v14 = v5;
          }

          if ((v44 & 0x8000000000000000LL) != 0) {
            goto LABEL_70;
          }
          if (v44 >= *(void *)((v5 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
            goto LABEL_71;
          }
          *(void *)((v5 & 0xFFFFFFFFFFFFFF8LL) + 8 * sub_10007F0B0( v1,  v2,  &qword_1002AD740,  v3,  v4,  v5,  v6,  v7,  v12[0],  v12[1],  v12[2],  v12[3],  v12[4],  v12[5],  v12[6],  v12[7], v13) = v26;
          uint64_t v31 = swift_release();
          specialized Array._endMutation()(v31);
        }

        uint64_t v3 = v45 + 1;
        if (__OFADD__(v45, 1LL)) {
          goto LABEL_65;
        }
LABEL_47:
        if (__OFADD__(v11++, 1LL)) {
          goto LABEL_64;
        }
        uint64_t v5 = *v14;
        if ((unint64_t)*v14 >> 62)
        {
          if (v5 < 0) {
            uint64_t v35 = *v14;
          }
          else {
            uint64_t v35 = v5 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain();
          uint64_t v33 = _CocoaArrayWrapper.endIndex.getter(v35);
          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v33 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        }

        ++v13;
        if (v11 == v33)
        {

          return v3;
        }
      }
    }

LABEL_60:
    return v3;
  }

  uint64_t v36 = *a1;
  if (!((unint64_t)*a1 >> 62))
  {
    uint64_t v3 = *(void *)((v36 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    goto LABEL_60;
  }

  if (v36 < 0) {
    uint64_t v39 = *a1;
  }
  else {
    uint64_t v39 = v36 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t v40 = _CocoaArrayWrapper.endIndex.getter(v39);

  swift_bridgeObjectRelease();
  return v40;
}

    sub_100160A58(v2, v1);
  }

    LOBYTE(v25) = 0;
    goto LABEL_61;
  }

unint64_t sub_100091B7C(uint64_t *a1)
{
  uint64_t v3 = swift_bridgeObjectRetain();
  unint64_t v4 = sub_10008583C(v3);
  unint64_t v6 = v5;
  swift_bridgeObjectRelease();
  if (!v1)
  {
    if ((v6 & 1) != 0)
    {
      uint64_t v23 = *a1;
      if ((unint64_t)v23 >> 62)
      {
        if (v23 < 0) {
          uint64_t v26 = v23;
        }
        else {
          uint64_t v26 = v23 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain();
        unint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v26);
        swift_bridgeObjectRelease();
      }

      else
      {
        return *(void *)((v23 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }
    }

    else
    {
      uint64_t v7 = v4 + 1;
      if (__OFADD__(v4, 1LL)) {
        goto LABEL_59;
      }
      unint64_t v6 = *a1;
      if ((unint64_t)*a1 >> 62)
      {
LABEL_60:
        if ((v6 & 0x8000000000000000LL) != 0LL) {
          uint64_t v25 = v6;
        }
        else {
          uint64_t v25 = v6 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain();
        uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v25);
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      if (v7 != v8)
      {
        unint64_t v9 = v4 + 5;
        do
        {
          unint64_t v6 = v9 - 4;
          uint64_t v10 = *a1;
          if ((*a1 & 0xC000000000000001LL) != 0)
          {
            uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, v10);
          }

          else
          {
            if ((v6 & 0x8000000000000000LL) != 0)
            {
              __break(1u);
LABEL_50:
              __break(1u);
LABEL_51:
              __break(1u);
LABEL_52:
              __break(1u);
LABEL_53:
              __break(1u);
LABEL_54:
              __break(1u);
LABEL_55:
              __break(1u);
LABEL_56:
              __break(1u);
LABEL_57:
              __break(1u);
LABEL_58:
              __break(1u);
LABEL_59:
              __break(1u);
              goto LABEL_60;
            }

            if (v6 >= *(void *)((v10 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
              goto LABEL_50;
            }
            uint64_t v11 = swift_retain();
          }

          char v12 = *(_BYTE *)(v11
                         + OBJC_IVAR____TtCC25ASOctaneSupportXPCServiceP33_4168D9B03AF8124BE3111952AAE62D6930SubscriptionRenewalCoordinator11RenewalTask_isComplete);
          swift_release();
          if ((v12 & 1) == 0)
          {
            if (v6 != v4)
            {
              uint64_t v7 = *a1;
              if ((*a1 & 0xC000000000000001LL) != 0)
              {
                uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, *a1);
                uint64_t v7 = *a1;
              }

              else
              {
                if ((v4 & 0x8000000000000000LL) != 0) {
                  goto LABEL_53;
                }
                if (v4 >= *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
                  goto LABEL_54;
                }
                uint64_t v13 = *(void *)(v7 + 8 * v4 + 32);
                swift_retain();
              }

              if ((v7 & 0xC000000000000001LL) != 0)
              {
                uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, v7);
                uint64_t v7 = *a1;
              }

              else
              {
                if ((v6 & 0x8000000000000000LL) != 0) {
                  goto LABEL_55;
                }
                if (v6 >= *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
                  goto LABEL_56;
                }
                uint64_t v14 = *(void *)(v7 + 8 * v9);
                swift_retain();
              }

              int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v7);
              *a1 = v7;
              if (!isUniquelyReferenced_nonNull_bridgeObject || v7 < 0 || (v7 & 0x4000000000000000LL) != 0)
              {
                uint64_t v7 = sub_100165138(v7);
                *a1 = v7;
              }

              *(void *)((v7 & 0xFFFFFFFFFFFFFF8LL) + 8 * v4 + 0x2sub_10006F0B8(12LL, 0) = v14;
              uint64_t v16 = swift_release();
              specialized Array._endMutation()(v16);
              uint64_t v7 = *a1;
              int v17 = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
              *a1 = v7;
              if (!v17 || v7 < 0 || (v7 & 0x4000000000000000LL) != 0)
              {
                uint64_t v7 = sub_100165138(v7);
                *a1 = v7;
              }

              if ((v6 & 0x8000000000000000LL) != 0) {
                goto LABEL_57;
              }
              if (v6 >= *(void *)((v7 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
                goto LABEL_58;
              }
              *(void *)((v7 & 0xFFFFFFFFFFFFFF8LL) + 8 * v9) = v13;
              uint64_t v18 = swift_release();
              specialized Array._endMutation()(v18);
            }

            if (__OFADD__(v4++, 1LL)) {
              goto LABEL_52;
            }
          }

          uint64_t v7 = v9 - 3;
          if (__OFADD__(v6, 1LL)) {
            goto LABEL_51;
          }
          uint64_t v20 = *a1;
          if ((unint64_t)*a1 >> 62)
          {
            if (v20 < 0) {
              uint64_t v22 = *a1;
            }
            else {
              uint64_t v22 = v20 & 0xFFFFFFFFFFFFFF8LL;
            }
            swift_bridgeObjectRetain();
            uint64_t v21 = _CocoaArrayWrapper.endIndex.getter(v22);
            swift_bridgeObjectRelease();
          }

          else
          {
            uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFF8LL) + 0x10);
          }

          ++v9;
        }

        while (v7 != v21);
      }
    }
  }

  return v4;
}

unint64_t sub_100091E78(uint64_t *a1, void *a2)
{
  unint64_t v6 = *a1;
  swift_retain();
  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = sub_1000856F4(v7, a2);
  if (v2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return v3;
  }

  unint64_t v3 = v8;
  char v10 = v9;
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0)
  {
    uint64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1LL)) {
      goto LABEL_71;
    }
    unint64_t v6 = *a1;
    if ((unint64_t)*a1 >> 62)
    {
LABEL_72:
      if ((v6 & 0x8000000000000000LL) != 0LL) {
        uint64_t v33 = v6;
      }
      else {
        uint64_t v33 = v6 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v33);
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v12 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    if (v11 != v12)
    {
      unint64_t v13 = v3 + 5;
      while (1)
      {
        unint64_t v6 = v13 - 4;
        unint64_t v14 = *a1;
        if ((*a1 & 0xC000000000000001LL) != 0)
        {
          unint64_t v15 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, v14);
        }

        else
        {
          if ((v6 & 0x8000000000000000LL) != 0)
          {
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
LABEL_70:
            __break(1u);
LABEL_71:
            __break(1u);
            goto LABEL_72;
          }

          if (v6 >= *(void *)((v14 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
            goto LABEL_62;
          }
          unint64_t v15 = *(void **)(v14 + 8 * v13);
          swift_retain();
        }

        if (v15[2] != a2[2]) {
          break;
        }
        uint64_t v16 = v15[3];
        uint64_t v17 = v15[4];
        uint64_t v18 = a2[3];
        uint64_t v19 = a2[4];
        if (v16 == v18 && v17 == v19)
        {
          swift_release();
          goto LABEL_45;
        }

        uint64_t v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v18, v19, 0LL);
        swift_release();
        if ((v11 & 1) == 0) {
          goto LABEL_21;
        }
LABEL_45:
        uint64_t v11 = v13 - 3;
        if (__OFADD__(v6, 1LL)) {
          goto LABEL_63;
        }
        uint64_t v28 = *a1;
        if ((unint64_t)*a1 >> 62)
        {
          if (v28 < 0) {
            uint64_t v30 = *a1;
          }
          else {
            uint64_t v30 = v28 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain();
          uint64_t v29 = _CocoaArrayWrapper.endIndex.getter(v30);
          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        }

        ++v13;
        if (v11 == v29) {
          goto LABEL_59;
        }
      }

      swift_release();
LABEL_21:
      if (v6 != v3)
      {
        uint64_t v11 = *a1;
        if ((*a1 & 0xC000000000000001LL) != 0)
        {
          uint64_t v21 = specialized _ArrayBuffer._getElementSlowPath(_:)(v3, *a1);
          uint64_t v11 = *a1;
        }

        else
        {
          if ((v3 & 0x8000000000000000LL) != 0) {
            goto LABEL_65;
          }
          if (v3 >= *(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
            goto LABEL_66;
          }
          uint64_t v21 = *(void *)(v11 + 8 * v3 + 32);
          swift_retain();
        }

        if ((v11 & 0xC000000000000001LL) != 0)
        {
          uint64_t v22 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, v11);
          uint64_t v11 = *a1;
        }

        else
        {
          if ((v6 & 0x8000000000000000LL) != 0) {
            goto LABEL_67;
          }
          if (v6 >= *(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
            goto LABEL_68;
          }
          uint64_t v22 = *(void *)(v11 + 8 * v13);
          swift_retain();
        }

        int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v11);
        *a1 = v11;
        if (!isUniquelyReferenced_nonNull_bridgeObject || v11 < 0 || (v11 & 0x4000000000000000LL) != 0)
        {
          uint64_t v11 = sub_100165138(v11);
          *a1 = v11;
        }

        *(void *)((v11 & 0xFFFFFFFFFFFFFF8LL) + 8 * v3 + 0x2sub_10006F0B8(12LL, 0) = v22;
        uint64_t v24 = swift_release();
        specialized Array._endMutation()(v24);
        uint64_t v11 = *a1;
        int v25 = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
        *a1 = v11;
        if (!v25 || v11 < 0 || (v11 & 0x4000000000000000LL) != 0)
        {
          uint64_t v11 = sub_100165138(v11);
          *a1 = v11;
        }

        if ((v6 & 0x8000000000000000LL) != 0) {
          goto LABEL_69;
        }
        if (v6 >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_70;
        }
        *(void *)((v11 & 0xFFFFFFFFFFFFFF8LL) + 8 * sub_10007F0B0( v1,  v2,  &qword_1002AD740,  v3,  v4,  v5,  v6,  v7,  v12[0],  v12[1],  v12[2],  v12[3],  v12[4],  v12[5],  v12[6],  v12[7], v13) = v21;
        uint64_t v26 = swift_release();
        specialized Array._endMutation()(v26);
      }

      if (__OFADD__(v3++, 1LL)) {
        goto LABEL_64;
      }
      goto LABEL_45;
    }

LABEL_59:
    swift_release();
    return v3;
  }

  uint64_t v31 = *a1;
  if (!((unint64_t)v31 >> 62))
  {
    unint64_t v3 = *(void *)((v31 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    goto LABEL_59;
  }

  if (v31 < 0) {
    uint64_t v34 = v31;
  }
  else {
    uint64_t v34 = v31 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  unint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v34);
  swift_release();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1000921F0()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100092224()
{
  uint64_t v2 = *(void *)(v0 + 40);
  unint64_t v3 = (void *)swift_task_alloc(dword_1002AE85C);
  *(void *)(v1 + 1sub_100019F7C(v0 + 6) = v3;
  uint64_t v4 = sub_100092D80(v3);
  return sub_10008F054(v4, v5, v6, v7, v2);
}

uint64_t sub_100092288()
{
  return sub_10003786C(v0[1]);
}

uint64_t sub_1000922BC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

id sub_1000922E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  id v10 = [a5 URLForResource:v8 withExtension:v9];

  return v10;
}

uint64_t sub_100092370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v12 = *a5;
  unint64_t v13 = (void *)swift_task_alloc(dword_1002AE894);
  *(void *)(v6 + 1sub_100019F7C(v0 + 6) = v13;
  *unint64_t v13 = v6;
  v13[1] = sub_100092910;
  return sub_10008F718(a1, a2, a3, a4, v12, a6);
}

uint64_t sub_1000923F4()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100092430()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1002AE86C);
  *(void *)(v0 + 1sub_100019F7C(v0 + 6) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100092910;
  uint64_t v2 = sub_100092F80();
  return v3(v2);
}

uint64_t sub_1000924BC()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1000924F0()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = (void *)swift_task_alloc(dword_1002AE87C);
  *(void *)(v1 + 1sub_100019F7C(v0 + 6) = v4;
  uint64_t v5 = sub_100092D80(v4);
  return sub_100090ED8(v5, v6, v7, v8, v2, v3);
}

unint64_t sub_100092564()
{
  unint64_t result = qword_1002B9480;
  if (!qword_1002B9480)
  {
    unint64_t result = swift_getWitnessTable(byte_1002012C0, &type metadata for TransactionEntity.Key);
    atomic_store(result, (unint64_t *)&qword_1002B9480);
  }

  return result;
}

uint64_t sub_1000925A8(void *a1)
{
  return v2 & 1;
}

void sub_1000925C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_100035374(a1, a2, a3);
  sub_1000354AC(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  sub_10001945C();
}

uint64_t sub_1000925F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result = a2;
  if (a5 - 1 < 3)
  {
    swift_bridgeObjectRetain(a2);
    uint64_t result = a4;
    return swift_bridgeObjectRetain(result);
  }

  if (!a5 || a5 == 4) {
    return swift_bridgeObjectRetain(result);
  }
  return result;
}

uint64_t sub_10009263C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result = a2;
  if (a5 - 1 < 3)
  {
    swift_bridgeObjectRelease(a2);
    uint64_t result = a4;
    return swift_bridgeObjectRelease(result);
  }

  if (!a5 || a5 == 4) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

void sub_100092688(void *a1)
{
}

uint64_t sub_100092694(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000926DC(uint64_t a1)
{
  return sub_1000927F4(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_10008C2D0);
}

uint64_t sub_1000926E8(void *a1)
{
  return sub_10008C338(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

void sub_1000926F8(void *a1)
{
}

void sub_10009270C(void *a1)
{
}

unint64_t sub_100092718()
{
  unint64_t result = qword_1002A9090;
  if (!qword_1002A9090)
  {
    uint64_t v1 = sub_100018EC0(&qword_1002A9088);
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002A9090);
  }

  return result;
}

void sub_10009275C(void *a1)
{
}

void sub_100092768(void *a1)
{
}

void sub_100092778(void *a1)
{
}

uint64_t sub_100092784(void *a1)
{
  return sub_100089604(a1, *(uint64_t **)(v1 + 16), *(_BYTE **)(v1 + 24));
}

BOOL sub_10009279C(void *a1)
{
  return sub_10008951C(a1, *(_BYTE **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1000927A4(void *a1)
{
  return sub_1000892F4(a1, *(void **)(v1 + 16));
}

void sub_1000927B0(void *a1)
{
}

void sub_1000927BC(void *a1)
{
}

uint64_t sub_1000927C4(void *a1)
{
  return sub_100089104(a1, *(void **)(v1 + 16));
}

uint64_t sub_1000927D0(void *a1)
{
  return sub_100088D88(a1, *(void **)(v1 + 16));
}

uint64_t sub_1000927DC(void *a1)
{
  return sub_100088468(a1, *(void **)(v1 + 16));
}

uint64_t sub_1000927E8(uint64_t a1)
{
  return sub_1000927F4(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1000883F8);
}

uint64_t sub_1000927F4(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

void sub_100092808(void *a1)
{
}

void sub_100092814(void *a1)
{
}

uint64_t sub_100092824()
{
  return v0 & 1;
}

uint64_t sub_100092858(void *a1)
{
  return sub_100087F94(a1, *(_BYTE **)(v1 + 16));
}

unint64_t sub_100092864(void *a1)
{
  return sub_100087E18(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

BOOL sub_10009286C(void *a1)
{
  return sub_100087A80(a1, *(char **)(v1 + 16), *(void **)(v1 + 24), *(uint64_t **)(v1 + 32));
}

void sub_100092878(void *a1)
{
}

void sub_100092888(void *a1)
{
}

uint64_t sub_1000928B8(void *a1)
{
  return sub_1000863E4(a1, *(uint64_t **)(v1 + 16));
}

void sub_1000928C4(void *a1)
{
}

uint64_t sub_1000928D0(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 11) {
    return sub_10003AACC(result, a2);
  }
  return result;
}

uint64_t sub_1000928E4(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 11) {
    return sub_10003AA74(result, a2);
  }
  return result;
}

uint64_t sub_1000928F8()
{
  return sub_100092824() & 1;
}

  ;
}

void *sub_100092930()
{
  return sub_100019F58((void *)(v0 + 56), *(void *)(v0 + 80));
}

uint64_t sub_10009293C(uint64_t a1)
{
  return swift_arrayDestroy(a1, 1LL);
}

BOOL sub_100092944(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100092954(uint64_t a1)
{
  return swift_allocObject(a1, 48LL, 7LL);
}

uint64_t sub_100092960(uint64_t a1)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v1, v2);
}

uint64_t sub_10009296C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1000CF360(v4, v3, a3);
}

  ;
}

uint64_t sub_100092984()
{
  *(_WORD *)(v1 + 1sub_100019F7C(v0 + 2) = 2080;
  return swift_bridgeObjectRetain(v0);
}

BOOL sub_100092998(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_1000929A8(float a1)
{
  *uint64_t v1 = a1;
  sub_1000B52F0();
}

uint64_t sub_1000929B8@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 28sub_10006F0B8(12LL, 0) = a1;
  return v2;
}

uint64_t sub_1000929D0@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 21sub_100019F7C(v0 + 6) = a1;
  return v1;
}

  ;
}

void sub_100092A00(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

void sub_100092A08()
{
  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

uint64_t sub_100092A18()
{
  return type metadata accessor for Date(0LL);
}

uint64_t sub_100092A20(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

void sub_100092A28()
{
  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t sub_100092A38(uint64_t a1, unint64_t a2)
{
  return sub_1000CF360(a1, a2, (uint64_t *)(v2 - 128));
}

void sub_100092A44(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

void sub_100092A58(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_100092A60(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return sub_1000B3DEC();
}

uint64_t sub_100092A6C(uint64_t a1)
{
  *(void *)(v2 - 8) = *v1;
  return swift_task_dealloc(a1);
}

uint64_t sub_100092A7C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a9, v9, v10);
}

void sub_100092A8C()
{
}

uint64_t sub_100092AA0(void *a1)
{
  return sub_100089348(a1, 1);
}

void sub_100092AAC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_100092AC0()
{
  return sub_10003AACC(*(void *)(v0 - 336), *(void *)(v0 - 328));
}

BOOL sub_100092AD4(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_100092ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_100018F68(a1, a2);
  return Logger.logObject.getter(v2);
}

  ;
}

void sub_100092AFC()
{
}

void *sub_100092B04()
{
  *(void *)(v1 - 128) = v0;
  return sub_10005F580((void *)(v1 - 152));
}

uint64_t sub_100092B18(void *a1, char a2)
{
  return sub_100089348(a1, a2);
}

uint64_t sub_100092B20()
{
  return static os_log_type_t.error.getter();
}

  ;
}

void sub_100092B40()
{
}

void sub_100092B50()
{
}

uint64_t sub_100092B5C()
{
  return Date.init(timeIntervalSinceReferenceDate:)(v0);
}

uint64_t sub_100092B68(uint64_t a1)
{
  *(void *)(v2 - 15sub_100019F7C(v0 + 2) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 152, v2 - 144, v1);
}

  ;
}

  ;
}

uint64_t sub_100092BBC()
{
  return v2(v0, v1);
}

uint64_t sub_100092BC8(uint64_t a1)
{
  return sub_10001762C(a1, 1LL, 1LL, v1);
}

uint64_t sub_100092BD8()
{
  return 0x62616D75736E6F43LL;
}

uint64_t sub_100092BFC()
{
  return Logger.logObject.getter();
}

uint64_t sub_100092C04()
{
  return 0x75736E6F436E6F4ELL;
}

  ;
}

uint64_t sub_100092C38()
{
  return sub_1000B85C8(4u);
}

void sub_100092C44(uint64_t a1)
{
}

uint64_t sub_100092C54(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

void sub_100092C60()
{
  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

void sub_100092C70(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100092C7C(uint64_t a1@<X8>)
{
  *(void *)(v2 + 29sub_100019F7C(v0 + 6) = v1;
  *(void *)(v2 + 27sub_100019F7C(v0 + 2) = a1;
  sub_1001B1CF8(v2 + 272, 34LL);
}

id sub_100092C94@<X0>(uint64_t a1@<X8>)
{
  return *(id *)(a1 + 32);
}

uint64_t sub_100092C9C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>, uint64_t a3)
{
  a3 = *(void *)(v3 + 8 * a2);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a3, v4, a1);
}

void sub_100092CB4(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_100092CBC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a10 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a10, v11 + 8, v10);
}

void sub_100092CD4()
{
}

uint64_t sub_100092CFC()
{
  return static os_log_type_t.default.getter();
}

void sub_100092D04(uint64_t a1)
{
  uint64_t v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_100092D0C()
{
  return sub_100119E64(0LL, (v0 & 0xC000000000000001LL) == 0, v0);
}

uint64_t sub_100092D20()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v0);
}

uint64_t sub_100092D34()
{
  return v0;
}

uint64_t sub_100092D50()
{
  return Logger.logObject.getter();
}

id sub_100092D58(uint64_t a1, uint64_t a2)
{
  return v2;
}

void *sub_100092D6C()
{
  return sub_100019F58((void *)(v0 + 16), *(void *)(v0 + 40));
}

uint64_t sub_100092D78@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_100092D80(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

void sub_100092D9C(uint64_t a1)
{
}

uint64_t sub_100092DA8()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_100092DB0(uint64_t a1)
{
  return sub_10001762C(v1, 1LL, 1LL, a1);
}

void sub_100092DC4()
{
}

uint64_t sub_100092DCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)(a2 + sub_1000680EC(v0, v1, v2) = 1;
  return swift_task_dealloc(a1);
}

uint64_t sub_100092DD8(float a1)
{
  *uint64_t v1 = a1;
  return sub_1000B3DDC();
}

uint64_t sub_100092DEC(uint64_t a1, ...)
{
  return swift_beginAccess(v1, va, 33LL, 0LL);
}

uint64_t sub_100092E00(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_100092E08@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_100092E10()
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8);
  *(void *)(v3 - 168) = v4;
  return v4(v2, v0);
}

uint64_t sub_100092E24()
{
  return v0 + 272;
}

  ;
}

uint64_t sub_100092E40()
{
  return sub_10001D158(v0, 1LL, v1);
}

void sub_100092E50(void *a1, os_log_s *a2, uint64_t a3, const char *a4)
{
}

void sub_100092E60(float a1)
{
  *uint64_t v1 = a1;
  sub_1000B52F0();
}

uint64_t sub_100092E70(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

uint64_t sub_100092E78(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

  ;
}

  ;
}

  ;
}

void sub_100092EAC(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t sub_100092EBC()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_100092EC4(unsigned __int8 a1)
{
  return sub_1000B85C8(a1);
}

uint64_t sub_100092ECC()
{
  return v0;
}

uint64_t sub_100092EE4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1000CF360(a1, v3, a3);
}

void sub_100092EEC(char a1, uint64_t a2)
{
}

void sub_100092EFC()
{
  *(void *)(v1 - 8) = *v0;
}

void sub_100092F0C()
{
}

uint64_t sub_100092F1C()
{
  return v0 - 224;
}

void sub_100092F28()
{
}

  ;
}

  ;
}

uint64_t sub_100092F58()
{
  return static os_log_type_t.error.getter();
}

void *sub_100092F60(void *a1, uint64_t a2)
{
  return sub_100019F58(a1, a2);
}

  ;
}

uint64_t sub_100092F80()
{
  return v0;
}

uint64_t sub_100092F8C()
{
  return *(void *)(v0 + 104);
}

uint64_t sub_100092F9C()
{
  return sub_1000B3DDC();
}

uint64_t sub_100092FA4()
{
  return sub_10009263C( *(void *)v0,  *(void *)(v0 + 8),  *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(_DWORD *)(v0 + 36));
}

  ;
}

BOOL sub_100092FC4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_100092FD4(char a1, uint64_t a2)
{
}

BOOL sub_100092FE4@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_100092FF0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 3sub_100019F7C(v0 + 2) = a1;
  *(void *)(v2 + 4sub_10006F0B8(12LL, 0) = a2;
  return 1LL;
}

uint64_t sub_100093008(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 3sub_100019F7C(v0 + 2) = a1;
  *(void *)(v2 + 4sub_10006F0B8(12LL, 0) = a2;
  return 0LL;
}

void sub_100093020()
{
}

void sub_10009302C()
{
}

uint64_t sub_100093038(uint64_t a1, uint64_t a2)
{
  return sub_10001762C(a1, a2, 1LL, v2);
}

uint64_t sub_100093044(uint64_t a1, uint64_t a2)
{
  return sub_10001762C(a1, a2, 1LL, v2);
}

  ;
}

  ;
}

uint64_t sub_100093068()
{
  return (*(uint64_t (**)(void, uint64_t))(v1 - 168))(*(void *)(v1 - 176), v0);
}

void *sub_100093074(uint64_t a1, uint64_t a2)
{
  return sub_100019F58(v2, a2);
}

uint64_t sub_10009307C()
{
  return v0;
}

void sub_100093090()
{
  *(_WORD *)(v0 + 2sub_100019F7C(v0 + 2) = 2048;
}

id sub_1000930A4()
{
  return *(id *)(v0 - 104);
}

uint64_t sub_1000930AC()
{
  return swift_release(*(void *)(v0 + 256));
}

uint64_t sub_1000930B4()
{
  return sub_1000B3DEC();
}

void sub_1000930BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1000930C4(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return String.init<A>(describing:)(va, a2);
}

uint64_t sub_1000930D0()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 312));
}

BOOL sub_1000930D8(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

  ;
}

double sub_1000930F8()
{
  return sub_10019EDE8(v0);
}

uint64_t sub_100093104()
{
  return v0;
}

uint64_t sub_100093110(uint64_t a1)
{
  return swift_arrayDestroy(a1, 2LL);
}

void sub_100093118()
{
  *(_WORD *)(v0 + 2sub_100019F7C(v0 + 2) = 2080;
}

void sub_10009312C()
{
}

  ;
}

uint64_t sub_100093148(uint64_t a1)
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(a1, v1);
}

uint64_t sub_100093150@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(a1 | 0x8000000000000000LL);
}

uint64_t sub_100093158(uint64_t a1, uint64_t a2)
{
  return sub_1000D868C(a1, a2);
}

uint64_t sub_100093160()
{
  return sub_1000B3DEC();
}

id sub_10009316C(uint64_t a1, uint64_t a2)
{
  return v2;
}

void sub_100093180()
{
}

uint64_t sub_100093188()
{
  return v0 + 88;
}

  ;
}

uint64_t sub_1000931A8()
{
  return *(void *)(v0 - 256);
}

  ;
}

uint64_t sub_1000931C8()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000931D0()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

uint64_t sub_1000931DC()
{
  return v0;
}

void sub_1000931E8()
{
}

void sub_1000931F4()
{
}

_WORD *sub_100093200(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

  ;
}

uint64_t sub_100093220(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

  ;
}

  ;
}

  ;
}

void sub_100093264()
{
}

uint64_t sub_100093270(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  return sub_1000CF360(a1, a2, (uint64_t *)va);
}

uint64_t sub_10009327C( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  return sub_1000CF360(a1, a2, (uint64_t *)va);
}

uint64_t sub_100093288@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

void sub_100093290(uint64_t a1, uint64_t *a2)
{
}

void *sub_100093298(uint64_t a1, uint64_t a2)
{
  return sub_100019F58(v2, a2);
}

uint64_t sub_1000932A0(uint64_t a1)
{
  return v1(a1, v2);
}

Swift::Void __swiftcall ChannelPipeline.SynchronousOperations.fireChannelRegistered()()
{
}

Swift::Void __swiftcall ChannelPipeline.SynchronousOperations.fireChannelActive()()
{
}

Swift::Void __swiftcall ChannelPipeline.SynchronousOperations.fireChannelInactive()()
{
}

Swift::Void __swiftcall ChannelPipeline.SynchronousOperations.fireChannelUnregistered()()
{
}

uint64_t ChannelPipeline.__allocating_init(channel:)(uint64_t a1)
{
  uint64_t v1 = sub_10009B72C();
  return sub_100099754(v1, v2, v3, v4);
}

Swift::Void __swiftcall ChannelPipeline.SynchronousOperations.fireChannelWritabilityChanged()()
{
}

Swift::Void __swiftcall ChannelPipeline.fireChannelReadComplete()()
{
}

Swift::Void __swiftcall ChannelPipeline.SynchronousOperations.read()()
{
}

void ChannelPipeline.SynchronousOperations.fireErrorCaught(_:)()
{
  uint64_t v4 = sub_10009B504();
  if (v4)
  {
    uint64_t v5 = v4;
    sub_10009B5E4();
    sub_10002A598(v5);
  }

  else
  {
    sub_1000193B8();
  }

Swift::Void __swiftcall ChannelPipeline.SynchronousOperations.fireChannelReadComplete()()
{
}

void ChannelHandlerContext.close(mode:promise:)()
{
  if (v1)
  {
    uint64_t v3 = v2;
    ChannelPipeline.syncOperations.getter();
    sub_100095940(v3, v0);
    sub_10002A598(v1);
  }

  else if (v0)
  {
    unint64_t v4 = sub_100029C98();
    uint64_t v5 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v4);
    *(void *)uint64_t v6 = 3LL;
    *(_BYTE *)(v6 + 8) = 3;
    swift_errorRetain(v5);
    sub_10002A3E4();
    sub_10002A620();
    sub_10009B1A8(v5);
  }

  else
  {
    sub_1000193B8();
  }

void ChannelHandlerContext.fireChannelRead(_:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    ChannelPipeline.syncOperations.getter();
    sub_10009B6E8();
    sub_1000352E0(v1);
  }

  else
  {
    sub_10001945C();
  }

void ChannelHandlerContext.fireErrorCaught(_:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    ChannelPipeline.syncOperations.getter();
    sub_10009B5E4();
    sub_1000352E0(v1);
  }

  else
  {
    sub_10001945C();
  }

void ChannelHandlerContext.fireUserInboundEventTriggered(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    ChannelPipeline.syncOperations.getter();
    sub_10009655C(a1);
    sub_1000352E0(v2);
  }

  else
  {
    sub_10001945C();
  }

void ChannelHandlerContext.write(_:promise:)()
{
}

Swift::Void __swiftcall ChannelHandlerContext.read()()
{
}

Swift::Void __swiftcall ChannelHandlerContext.fireChannelInactive()()
{
}

Swift::Void __swiftcall ChannelHandlerContext.fireChannelReadComplete()()
{
}

void ChannelHandlerContext.writeAndFlush(_:promise:)()
{
}

void sub_10009354C()
{
  if (v1)
  {
    ChannelPipeline.syncOperations.getter();
    sub_10009B330();
    sub_10002A598(v1);
  }

  else if (v0)
  {
    unint64_t v2 = sub_100029C98();
    uint64_t v3 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v2);
    sub_10008142C(v3, v4);
    sub_10002A3E4();
    sub_10002A620();
    sub_10009B1A8(0LL);
  }

  else
  {
    sub_1000193B8();
  }

uint64_t ChannelPipeline.addHandler(_:name:position:)()
{
  return sub_100099A08();
}

void ChannelPipeline.removeHandler(_:)()
{
}

void ChannelPipeline.removeHandler(name:)()
{
}

void sub_100093640()
{
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v0 + 56);
  sub_10002A444();
  sub_10009B648();
  uint64_t v15 = EventLoop.makePromise<A>(of:file:line:)(v10, v11, v12, v13, v4, v14, v10, v9);
  swift_retain();
  v2(v8, v6, v15);
  sub_10002A51C();
  sub_100023E74();
}

void ChannelPipeline.removeHandler(context:)()
{
}

void ChannelPipeline.context(handler:)()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v6 = sub_10002A444();
  type metadata accessor for ChannelHandlerContext();
  sub_10009B648();
  uint64_t v11 = sub_10009B4C8(v7, v8, v9, v10, 441LL, v6);
  if ((sub_10009B62C(v6, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16)) & 1) != 0)
  {
    sub_10009B634();
    sub_100099954();
    uint64_t v14 = sub_100098D08(v13, v12 & 1, v11);
    sub_10009B790(v14, v15, (uint64_t (*)(void))&_swift_release);
  }

  else
  {
    uint64_t v16 = (void *)sub_100019310((uint64_t)&unk_10027DD50, 48LL);
    _OWORD v16[2] = v11;
    v16[3] = v0;
    v16[4] = v4;
    v16[5] = v2;
    uint64_t v17 = *(void (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(v5 + 24);
    sub_10002A4C8();
    sub_10002A75C();
    swift_unknownObjectRetain(v4);
    v17(sub_100099B94, v16, v6, v5);
    sub_10009B4FC();
  }

  sub_100023E74();
}

void ChannelPipeline.context(name:)()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v7 = sub_10002A444();
  type metadata accessor for ChannelHandlerContext();
  sub_10009B648();
  uint64_t v12 = EventLoop.makePromise<A>(of:file:line:)(v8, v9, v10, v11, 470LL, v7, v8, v6);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v7, v6) & 1) != 0)
  {
    sub_10009B404((uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftN"
                           "IO/ChannelPipeline.swift");
    uint64_t v13 = *(void *)(v0 + 16);
    if (v13)
    {
      uint64_t v14 = *(void **)(v13 + 16);
      sub_10001EDCC();
      ChannelPipeline.syncOperations.getter();
      if (v14)
      {
        while (1)
        {
          uint64_t v15 = *(void **)(v1 + 24);
          if (v15 && v14 == v15) {
            break;
          }
          uint64_t v17 = v14[5];
          uint64_t v18 = v14[6];
          BOOL v19 = v17 == v5 && v18 == v3;
          if (v19 || (sub_10009B57C(v17, v18) & 1) != 0)
          {
            sub_10009B720();
            char v22 = 0;
            goto LABEL_20;
          }

          uint64_t v20 = (void *)v14[2];
          sub_10001EDE0();
          sub_100024F0C();
          uint64_t v14 = v20;
          if (!v20) {
            goto LABEL_14;
          }
        }

        sub_10001A3F8();
        sub_100024F0C();
      }

      else
      {
LABEL_14:
        sub_10001A3F8();
      }
    }

    else
    {
      sub_10001ED74();
    }

    unint64_t v23 = sub_100099BC0();
    uint64_t v14 = (void *)sub_1000252D0((uint64_t)&type metadata for ChannelPipelineError, v23);
    char v22 = 1;
    *uint64_t v24 = 1;
    sub_10001A3F8();
LABEL_20:
    sub_100098D08((uint64_t)v14, v22, v12);
    sub_10009AD58((uint64_t)v14, v22, (uint64_t (*)(void))&_swift_release);
  }

  else
  {
    uint64_t v21 = (void *)sub_100019310((uint64_t)&unk_10027DD78, 48LL);
    v21[2] = v12;
    v21[3] = v0;
    v21[4] = v5;
    v21[5] = v3;
    sub_10001ED74();
    sub_10002A4C8();
    sub_10002A674();
    sub_10009B5BC((uint64_t)sub_100099BB4);
    sub_10009B4FC();
  }

  sub_100023E74();
}

uint64_t ChannelPipeline.addHandlers(_:position:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = *(void *)(v3 + 56);
  uint64_t v8 = sub_10009B6D0();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(v8, v7) & 1) != 0)
  {
    uint64_t v9 = sub_1000969B0(a1, a2, a3);
    char v11 = v10 & 1;
    LOBYTE(v2sub_100019F7C(v0 + 2) = v10 & 1;
    EventLoop.makeCompletedFuture<A>(_:)( (uint64_t)&v21,  v8,  (uint64_t)&type metadata for ()[8],  v7,  v12,  v13,  v14,  v15,  v9,  v22,  v23,  v24,  v25,  v26,  v27,  v28,  v29,  v30,  v31,  v32);
    uint64_t v17 = v16;
    sub_100034F08(v9, v11);
  }

  else
  {
    uint64_t v18 = (void *)sub_100019310((uint64_t)&unk_10027DDC8, 48LL);
    v18[2] = v3;
    void v18[3] = a1;
    void v18[4] = a2;
    v18[5] = a3;
    BOOL v19 = *(uint64_t (**)(uint64_t (*)(), void *, char *, uint64_t, uint64_t))(v7 + 32);
    sub_10009B678();
    swift_bridgeObjectRetain();
    sub_10006AC2C(a2, a3);
    uint64_t v17 = v19(sub_100099C54, v18, &type metadata for ()[8], v8, v7);
    sub_10009B770();
  }

  return v17;
}

void ChannelPipeline.bind(to:promise:)(uint64_t a1, uint64_t a2)
{
}

void ChannelPipeline.connect(to:promise:)(uint64_t a1, uint64_t a2)
{
}

void sub_100093C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(v5 + 56);
  uint64_t v11 = sub_10002A444();
  if ((sub_10009B1B4(v11) & 1) != 0)
  {
    sub_100095734();
    sub_10002A580();
  }

  else
  {
    uint64_t v12 = (void *)sub_100019310(a4, 40LL);
    void v12[2] = v5;
    v12[3] = a1;
    void v12[4] = a2;
    uint64_t v13 = *(void (**)(uint64_t, void *, uint64_t, uint64_t))(v10 + 24);
    sub_10001EDE0();
    sub_10002A674();
    sub_10009B678();
    v13(a5, v12, v11, v10);
    swift_release(v12);
  }

void ChannelPipeline.write(_:promise:)(uint64_t *a1, uint64_t a2)
{
}

Swift::Void __swiftcall ChannelPipeline.flush()()
{
}

void ChannelPipeline.writeAndFlush(_:promise:)(uint64_t *a1, uint64_t a2)
{
}

void sub_100093D40(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(v5 + 56);
  uint64_t v11 = sub_10002A444();
  if ((sub_10009B62C(v11, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 16)) & 1) != 0)
  {
    sub_100095734();
  }

  else
  {
    sub_10002B550(a1, (uint64_t)v22);
    uint64_t v12 = sub_100019310(a4, 96LL);
    sub_10009B33C(v12, v13, v14, v15, v16, v17, v18, v19, v22[0], v22[1], v23, v24, v25, v26);
    *(void *)(v20 + sub_100081CEC(v0 + 88) = a2;
    uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 24);
    sub_10002A75C();
    sub_100041B5C();
    v21(a5, v12, v11, v10);
    sub_10002A7BC();
  }

Swift::Void __swiftcall ChannelPipeline.read()()
{
}

uint64_t ChannelPipeline.close(mode:promise:)()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = sub_10002A444();
  if ((sub_10009B22C(v5) & 1) != 0) {
    return sub_100095648(v4, v2);
  }
  uint64_t v7 = sub_100019310((uint64_t)&unk_10027DE90, 40LL);
  *(void *)(v7 + 1sub_100019F7C(v0 + 6) = v0;
  *(_BYTE *)(v7 + 2sub_100019F7C(v0 + 4) = v4;
  *(void *)(v7 + 3sub_100019F7C(v0 + 2) = v2;
  sub_10002A75C();
  sub_100041B5C();
  sub_10009B4BC((uint64_t)sub_100099E3C, v7);
  return sub_10009B144(v7);
}

uint64_t ChannelPipeline.register(promise:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_10002A444();
  if ((sub_10009B22C(v3) & 1) != 0) {
    return sub_100095798(v2);
  }
  uint64_t v5 = sub_100019310((uint64_t)&unk_10027DEB8, 32LL);
  *(void *)(v5 + 1sub_100019F7C(v0 + 6) = v0;
  *(void *)(v5 + 2sub_100019F7C(v0 + 4) = v2;
  sub_10002A75C();
  sub_100041B5C();
  sub_10009B4B0((uint64_t)sub_100099E70, v5);
  return sub_10009B144(v5);
}

uint64_t ChannelPipeline.triggerUserOutboundEvent(_:promise:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002A444();
  if ((sub_10009B22C(v4) & 1) != 0) {
    return sub_100095838(a1, a2);
  }
  sub_10002C010(a1, (uint64_t)&v14);
  uint64_t v6 = sub_100019310((uint64_t)&unk_10027DEE0, 64LL);
  sub_10009B58C(v6, v7, v8, v9, v10, v11, v12, v13, v14);
  *(void *)(v6 + 5sub_100019F7C(v0 + 6) = a2;
  sub_10002A75C();
  sub_100041B5C();
  sub_10009B4B0((uint64_t)sub_100099EBC, v6);
  return sub_10001ED6C();
}

uint64_t sub_10009401C()
{
  uint64_t v5 = *(void *)(v0 + 16);
  if (!v5)
  {
    uint64_t v10 = 0LL;
    goto LABEL_7;
  }

  uint64_t v6 = *(void *)(v5 + 16);
  sub_100041B5C();
  if (!v6) {
    goto LABEL_5;
  }
  do
  {
    uint64_t v7 = sub_10002A674();
    sub_10009B778(v7);
    uint64_t result = sub_10002A5A4();
  }

  while (*(void *)(v5 + 16));
  if (*(void *)(v0 + 16))
  {
LABEL_5:
    uint64_t v9 = sub_10002A75C();
    sub_10009B778(v9);
    sub_10002A51C();
    sub_10002A524();
    uint64_t v10 = *(void *)(v0 + 16);
LABEL_7:
    *(void *)(v0 + 1sub_100019F7C(v0 + 6) = 0LL;
    swift_release(v10);
    uint64_t v11 = *(void *)(v0 + 24);
    *(void *)(v0 + 2sub_100019F7C(v0 + 4) = 0LL;
    swift_release(v11);
    *(_BYTE *)(v0 + 4sub_10006F0B8(12LL, 0) = 1;
    uint64_t v12 = *(void *)(v0 + 64);
    *(void *)(v0 + 6sub_100019F7C(v0 + 4) = 0LL;
    *(void *)(v0 + 7sub_100019F7C(v0 + 2) = 0LL;
    return sub_10009B124(v12);
  }

  __break(1u);
  return result;
}

void ChannelHandlerContext.channel.getter()
{
}

void ChannelHandlerContext.eventLoop.getter()
{
}

void ChannelHandlerContext.leavePipeline(removalToken:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)(v1 + 32) + 56LL);
  uint64_t v4 = sub_10002A444();
  sub_10009B28C();
  sub_10002A6F4();
  EventLoop.preconditionInEventLoop(file:line:)(v5, v6, v7, 1858LL, v4, v3);
  sub_10002A338();
  sub_1000950E8(v1, a1);
  sub_10002A3D4();
}

void ChannelPipeline.SynchronousOperations.eventLoop.getter()
{
}

uint64_t ChannelPipeline.SynchronousOperations.addHandlers(_:position:)( uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_100096D3C(a1, a2, a3);
}

Swift::Void __swiftcall ChannelHandlerContext.flush()()
{
}

void sub_1000941C0(void (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(v1 + 24);
  if (v2)
  {
    uint64_t v4 = ChannelPipeline.syncOperations.getter();
    a1(v4);
    sub_1000352E0(v2);
  }

  else
  {
    sub_10001945C();
  }

Swift::Void __swiftcall ChannelHandlerContext.fireChannelWritabilityChanged()()
{
}

Swift::Void __swiftcall ChannelHandlerContext.fireChannelActive()()
{
}

void ChannelPipeline.removeHandler(context:promise:)()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  ChannelHandlerContext.handler.getter();
  uint64_t v7 = v6;
  uint64_t ObjectType = swift_getObjectType(v6);
  uint64_t v9 = sub_100099EE4(v7, ObjectType, (uint64_t)&protocol descriptor for RemovableChannelHandler);
  sub_10002A338();
  if (!v9)
  {
    if (v3)
    {
      unint64_t v12 = sub_100029C98();
      uint64_t v13 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v12);
      *(void *)uint64_t v14 = 13LL;
      *(_BYTE *)(v14 + 8) = 3;
      swift_errorRetain(v13);
      sub_10002A3E4();
      sub_10002A620();
      sub_10009B23C(v13);
      return;
    }

    goto LABEL_6;
  }

  uint64_t v10 = *(void *)(v1 + 56);
  uint64_t v11 = sub_10002A444();
  if ((sub_10009B62C(v11, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 16)) & 1) != 0)
  {
    sub_100094C68();
LABEL_6:
    sub_100023E74();
    return;
  }

  uint64_t v15 = sub_100019310((uint64_t)&unk_10027DF08, 32LL);
  *(void *)(v15 + 1sub_100019F7C(v0 + 6) = v5;
  *(void *)(v15 + 2sub_100019F7C(v0 + 4) = v3;
  uint64_t v16 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v10 + 24);
  sub_10002A4C8();
  sub_100041B5C();
  v16(sub_100099F24, v15, v11, v10);
  sub_10009B144(v15);
}

void ChannelPipeline.eventLoop.getter()
{
}

uint64_t sub_100094338()
{
  uint64_t v5 = *(void *)(v0 + 64);
  if (v5)
  {
    uint64_t v6 = *(void *)(v0 + 64);
  }

  else
  {
    uint64_t v7 = type metadata accessor for DeadChannel();
    sub_100019310(v7, 80LL);
    uint64_t v6 = sub_100081180(v0);
    sub_10002A4C8();
    uint64_t v5 = 0LL;
  }

  swift_unknownObjectRetain(v5);
  return v6;
}

void sub_1000943CC()
{
  if ((v7 & 1) != 0)
  {
    uint64_t v8 = sub_1000175B0(&qword_1002A9710);
    sub_10009B3F4(v8, v8, (uint64_t)&protocol self-conformance witness table for Error, v9);
  }

  sub_10009B46C();
}

uint64_t sub_100094450@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = a1[3];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(a2, v3, v7);
  return swift_willThrowTypedImpl(a2, v7, a1[4]);
}

uint64_t sub_1000944E4(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = a2;
  ChannelPipeline.syncOperations.getter();
  sub_10002A5A4();
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = v8;
  ChannelPipeline.syncOperations.getter();
  sub_100041B5C();
  sub_10002A5A4();
  *(void *)(a2 + 1sub_100019F7C(v0 + 6) = a1;
  swift_release();
  if (!v8) {
    return sub_10009B448(a1);
  }
  *(void *)(v8 + 2sub_100019F7C(v0 + 4) = a1;
  sub_10009B59C(a1);
  sub_10002A51C();
  return sub_10002A598(v8);
}

void sub_100094580(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10009459C(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *(void *)(a2 + 24);
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = v8;
  sub_10009B59C(v8);
  sub_10002A5A4();
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = a2;
  swift_release();
  *(void *)(a2 + 2sub_100019F7C(v0 + 4) = a1;
  sub_100041B5C();
  sub_10002A5A4();
  if (!v8) {
    return sub_10009B448(a1);
  }
  *(void *)(v8 + 1sub_100019F7C(v0 + 6) = a1;
  sub_10009B59C(a1);
  sub_10002A51C();
  return sub_10002A598(v8);
}

void sub_100094638(uint64_t a1, uint64_t a2)
{
}

void ChannelHandlerContext.handler.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  if (v1) {
    goto LABEL_4;
  }
  if (*(void *)(v0 + 72))
  {
    sub_10009B6E0();
    uint64_t v1 = 0LL;
LABEL_4:
    swift_unknownObjectRetain(v1);
    sub_10001945C();
    return;
  }

  __break(1u);
}

uint64_t sub_1000946A8(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  swift_retain(v4);
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = *(void *)(v1 + 24);
      if (v5 && v4 == v5) {
        break;
      }
      uint64_t v7 = swift_retain(v4);
      char v8 = a1(v7);
      swift_release(v4);
      if ((v8 & 1) == 0)
      {
        uint64_t v9 = *(void *)(v4 + 16);
        swift_retain(v9);
        swift_release(v4);
        uint64_t v4 = v9;
        if (v9) {
          continue;
        }
      }

      return v4;
    }

    swift_release(v4);
    return 0LL;
  }

  return v4;
}

uint64_t sub_100094750()
{
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v5);
  uint64_t result = sub_10001A3F8();
  uint64_t v7 = *(void *)(v0 + 32);
  BOOL v8 = __OFADD__(v7, 1LL);
  uint64_t v9 = v7 + 1;
  if (v8)
  {
    __break(1u);
  }

  else
  {
    uint64_t result = 0x72656C646E6168LL;
    *(void *)(v0 + 3sub_100019F7C(v0 + 2) = v9;
  }

  return result;
}

uint64_t sub_100094800()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 32) + 56LL);
  sub_10002A444();
  sub_10002A6F4();
  sub_10002A618(v2, v3, v4, 1826LL, v5);
  ChannelHandlerContext.handler.getter();
  uint64_t v7 = sub_10009B3B0(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 8))(v0, v7, v1);
  return sub_10009B19C(v0);
}

uint64_t ChannelPipeline.removeHandler(_:promise:)()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_10002A444();
  if ((sub_10009B22C(v7) & 1) != 0) {
    return sub_100094A5C(v0, v6, v4, v2);
  }
  uint64_t v9 = (void *)sub_100019310((uint64_t)&unk_10027DF30, 48LL);
  void v9[2] = v0;
  _OWORD v9[3] = v6;
  __int128 v9[4] = v4;
  v9[5] = v2;
  sub_10001EDE0();
  sub_10002A75C();
  swift_unknownObjectRetain(v6);
  sub_10009B4B0((uint64_t)sub_100099F98, (uint64_t)v9);
  return sub_10009B144((uint64_t)v9);
}

uint64_t ChannelPipeline.removeHandler(name:promise:)()
{
  uint64_t v3 = v1;
  sub_10009B63C();
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v1 + 56);
  uint64_t v7 = sub_10002A444();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v7, v6) & 1) != 0)
  {
    sub_10009B404((uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftN"
                           "IO/ChannelPipeline.swift");
    uint64_t v8 = *(void *)(v1 + 16);
    if (v8)
    {
      uint64_t v9 = *(void **)(v8 + 16);
      sub_10001EDCC();
      sub_10001EDE0();
      if (v9)
      {
        while (1)
        {
          uint64_t v10 = *(void **)(v3 + 24);
          if (v10 && v9 == v10) {
            break;
          }
          uint64_t v12 = v9[5];
          uint64_t v13 = v9[6];
          BOOL v14 = v12 == v5 && v13 == v2;
          if (v14 || (sub_10009B57C(v12, v13) & 1) != 0)
          {
            sub_10009B720();
            ChannelPipeline.removeHandler(context:promise:)();
            return sub_10009B144((uint64_t)v9);
          }

          uint64_t v15 = (void *)v9[2];
          ChannelPipeline.syncOperations.getter();
          sub_10001ED6C();
          uint64_t v9 = v15;
          if (!v15) {
            goto LABEL_14;
          }
        }

        sub_10001A3F8();
        sub_10001ED6C();
      }

      else
      {
LABEL_14:
        sub_10001A3F8();
      }
    }

    else
    {
      sub_10001ED74();
    }

    unint64_t v18 = sub_100099BC0();
    uint64_t v19 = sub_1000252D0((uint64_t)&type metadata for ChannelPipelineError, v18);
    sub_10009B764(v19, v20);
    sub_10001A3F8();
    if (v0) {
      sub_10002A3E4();
    }
    return sub_10009B23C(v19);
  }

  else
  {
    uint64_t v16 = (void *)sub_100019310((uint64_t)&unk_10027DF58, 48LL);
    _OWORD v16[2] = v1;
    v16[3] = v5;
    v16[4] = v2;
    v16[5] = v0;
    sub_10002A4C8();
    sub_10001ED74();
    sub_10002A674();
    sub_10009B5BC((uint64_t)sub_100099FCC);
    return sub_10009B144((uint64_t)v16);
  }

uint64_t sub_100094A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v5;
  char v8 = v7;
  if ((v7 & 1) != 0)
  {
    if (a4) {
      sub_100098A70(v5, 1LL, a4);
    }
  }

  else
  {
    ChannelPipeline.removeHandler(context:promise:)();
  }

  return sub_10009AD58(v6, v8 & 1, (uint64_t (*)(void))&_swift_release);
}

uint64_t sub_100094AEC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1[7];
  uint64_t ObjectType = swift_getObjectType(a1[6]);
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  531LL,  ObjectType,  v8);
  uint64_t v10 = a1[2];
  if (v10)
  {
    uint64_t v11 = *(void **)(v10 + 16);
    swift_bridgeObjectRetain_n(a3, 2LL);
    swift_retain();
    if (v11)
    {
      while (1)
      {
        uint64_t v12 = (void *)a1[3];
        if (v12 && v11 == v12) {
          break;
        }
        uint64_t v14 = v11[5];
        uint64_t v15 = v11[6];
        BOOL v16 = v14 == a2 && v15 == a3;
        if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a2, a3, 0LL) & 1) != 0)
        {
          swift_bridgeObjectRelease_n(a3, 2LL);
          ChannelPipeline.removeHandler(context:promise:)();
          return swift_release(v11);
        }

        uint64_t v17 = (void *)v11[2];
        swift_retain();
        swift_release(v11);
        uint64_t v11 = v17;
        if (!v17) {
          goto LABEL_13;
        }
      }

      swift_bridgeObjectRelease();
      swift_release(v11);
    }

    else
    {
LABEL_13:
      swift_bridgeObjectRelease();
    }
  }

  else
  {
    swift_bridgeObjectRetain();
  }

  unint64_t v19 = sub_100099BC0();
  uint64_t v20 = swift_allocError(&type metadata for ChannelPipelineError, v19, 0LL, 0LL);
  *uint64_t v21 = 1;
  swift_bridgeObjectRelease();
  if (a4) {
    sub_100098A70(v20, 1LL, a4);
  }
  return swift_errorRelease(v20);
}

void sub_100094C68()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  sub_10002A444();
  sub_10002A6F4();
  sub_10002A65C(v4, v5, v6, 1863LL, v7);
  if ((*(_BYTE *)(v0 + 89) & 1) != 0)
  {
    if (v3)
    {
      unint64_t v8 = sub_10009AEEC();
      uint64_t v9 = sub_1000252D0((uint64_t)&type metadata for NIOAttemptedToRemoveHandlerMultipleTimesError, v8);
      swift_errorRetain(v9);
      sub_10002A3E4();
      sub_10002A620();
      sub_10009B23C(v9);
    }

    else
    {
      sub_100023E74();
    }
  }

  else
  {
    *(_BYTE *)(v0 + 89) = 1;
    ChannelHandlerContext.handler.getter();
    uint64_t v11 = v10;
    uint64_t ObjectType = swift_getObjectType(v10);
    uint64_t v13 = sub_10009AEB4(v11, ObjectType, (uint64_t)&protocol descriptor for RemovableChannelHandler);
    uint64_t v15 = v14;
    uint64_t v16 = swift_getObjectType(v13);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 16);
    sub_10002A4C8();
    v17(v1, v3, v16, v15);
    swift_unknownObjectRelease(v11);
    sub_10009B144(v3);
  }

uint64_t sub_100094D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  char v7 = v6 & 1;
  sub_100098D08(v4, v6 & 1, a1);
  return sub_10009AD58(v5, v7, (uint64_t (*)(void))&_swift_release);
}

BOOL sub_100094DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  swift_unknownObjectRelease(v3);
  return v4 == a2;
}

void ChannelPipeline._contextSync(_:)(uint64_t (*a1)(uint64_t))
{
  if (!sub_1000946A8(a1))
  {
    unint64_t v7 = sub_100099BC0();
    uint64_t v8 = sub_1000252D0((uint64_t)&type metadata for ChannelPipelineError, v7);
    sub_10009B764(v8, v9);
  }

uint64_t sub_100094E8C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a2[7];
  uint64_t ObjectType = swift_getObjectType(a2[6]);
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  531LL,  ObjectType,  v8);
  uint64_t v10 = a2[2];
  if (v10)
  {
    uint64_t v11 = *(void **)(v10 + 16);
    swift_bridgeObjectRetain_n(a4, 2LL);
    swift_retain();
    if (v11)
    {
      while (1)
      {
        uint64_t v12 = (void *)a2[3];
        if (v12 && v11 == v12) {
          break;
        }
        uint64_t v14 = v11[5];
        uint64_t v15 = v11[6];
        BOOL v16 = v14 == a3 && v15 == a4;
        if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a3, a4, 0LL) & 1) != 0)
        {
          swift_bridgeObjectRelease_n(a4, 2LL);
          char v18 = 0;
          goto LABEL_18;
        }

        uint64_t v17 = (void *)v11[2];
        swift_retain();
        swift_release(v11);
        uint64_t v11 = v17;
        if (!v17) {
          goto LABEL_13;
        }
      }

      swift_bridgeObjectRelease();
      swift_release(v11);
    }

    else
    {
LABEL_13:
      swift_bridgeObjectRelease();
    }
  }

  else
  {
    swift_bridgeObjectRetain();
  }

  unint64_t v19 = sub_100099BC0();
  uint64_t v11 = (void *)swift_allocError(&type metadata for ChannelPipelineError, v19, 0LL, 0LL);
  char v18 = 1;
  *uint64_t v20 = 1;
  swift_bridgeObjectRelease();
LABEL_18:
  sub_100098D08((uint64_t)v11, v18, a1);
  return sub_10009AD58((uint64_t)v11, v18, (uint64_t (*)(void))&_swift_release);
}

void ChannelPipeline._contextSync<A>(handlerType:)()
{
}

uint64_t sub_100095024(uint64_t a1)
{
  uint64_t v3 = v2;
  char v5 = v4 & 1;
  sub_100098E30(v2, v4 & 1, a1);
  return sub_10009AD58(v3, v5, (uint64_t (*)(void))&_swift_release);
}

uint64_t sub_100095080(uint64_t a1, uint64_t a2)
{
  v9[0] = v3;
  v9[1] = v4;
  uint64_t v5 = sub_1000175B0(&qword_1002AC970);
  uint64_t v6 = swift_dynamicCast(&v8, v9, v5, a2, 6LL);
  if ((_DWORD)v6) {
    swift_unknownObjectRelease(v8);
  }
  return v6;
}

uint64_t sub_1000950E8(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  if (v9)
  {
    *(void *)(v9 + 1sub_100019F7C(v0 + 6) = v8;
    sub_10009B59C(v8);
    sub_10002A75C();
    sub_100024F0C();
    if (!v8) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  sub_10002A674();
  if (v8)
  {
LABEL_3:
    *(void *)(v8 + 2sub_100019F7C(v0 + 4) = v9;
    sub_10002A75C();
    sub_100024F0C();
  }

LABEL_4:
  sub_1000951A4();
  if (a2) {
    sub_100098A70(0LL, 0LL, a2);
  }
  sub_10002A524();
  sub_10002A5A4();
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = 0LL;
  swift_release(v10);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = 0LL;
  return sub_10009B134(v11);
}

  sub_10001DAB8();
}

  unint64_t v19 = sub_100029C98();
  sub_1000252D0((uint64_t)&type metadata for ChannelError, v19);
  sub_1000ABEFC(v20, 6LL);
  return sub_10002A524();
}

  int v70 = (uint64_t)v310;
  if (*(double *)&v310 != 0.0)
  {
    sub_100069F54((uint64_t)v310);
    sub_10001EDA0();
    sub_10019A9F4();
    v316 = *(double *)&v70;
    uint64_t v71 = sub_10019A8E0();
    sub_1001B8B20(v71, 9LL, v72);
    v304 = v316;
    sub_10019A8C4();
  }

  v309 = (uint64_t)v44;
  v308 = (uint64_t)v49;
  v307 = v54;
  if (a4)
  {
    sub_10006A030(a4);
    swift_bridgeObjectRelease(a4);
    sub_10019A9F4();
    v316 = *(double *)&v70;
    uint64_t v73 = sub_10019A8E0();
    sub_1001B8B20(v73, 11LL, v74);
    v304 = v316;
    sub_10019A8C4();
  }

  v310 = v61;
  if (a5)
  {
    if (*(void *)(a5 + 16))
    {
      sub_10019A9A8((uint64_t)_swiftEmptyArrayStorage);
      v303 = "Consumable";
      v302 = "NonRenewingSubscription";
      sub_100093250();
      __asm { BR              X11 }
    }

    sub_100023EF4();
    sub_10019A9F4();
    v316 = *(double *)&v70;
    unsigned int v77 = sub_10019A8E0();
    sub_1001B8B20(v77, 16LL, v78);
    *(double *)&unint64_t v76 = v316;
    sub_10019A8C4();
  }

  else
  {
    *(double *)&unint64_t v76 = v304;
  }

  uint64_t v79 = v301;
  uint64_t v80 = v300;
  if (v300)
  {
    if (*(void *)(v300 + 16))
    {
      sub_10019A9A8((uint64_t)_swiftEmptyArrayStorage);
      __asm { BR              X11 }
    }

    sub_10003561C();
    sub_10006B92C();
    v316 = *(double *)&v76;
    uint64_t v81 = sub_10019A8E0();
    sub_1001B8B20(v81, 0LL, v82);
    *(double *)&unint64_t v76 = v316;
    sub_10019A8C4();
  }

  if (v79)
  {
    sub_10006A024(v79);
    sub_10001A3F8();
    sub_10006B92C();
    v316 = *(double *)&v76;
    uint64_t v83 = sub_10019A8E0();
    sub_1001B8B20(v83, 8LL, v84);
    *(double *)&unint64_t v76 = v316;
    sub_10019A8C4();
  }

  if (v298)
  {
    sub_10006A030(v298);
    sub_10001A3F8();
    sub_10006B92C();
    v316 = *(double *)&v76;
    uint64_t v85 = sub_10019A8E0();
    sub_1001B8B20(v85, 12LL, v86);
    *(double *)&unint64_t v76 = v316;
    sub_10019A8C4();
  }

  if (a17)
  {
    uint64_t v87 = *(void *)(a17 + 16);
    if (v87)
    {
      sub_10019AA88((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v88 = 0LL;
      uint64_t v89 = v321;
      do
      {
        uint64_t v90 = *(unsigned __int8 *)(a17 + v88 + 32);
        if (v90 == 3) {
          sub_10019A958();
        }
        else {
          sub_10019ABC0(v90 - 1);
        }
        v321 = v89;
        unint64_t v91 = *(void *)(v89 + 16);
        if (v91 >= *(void *)(v89 + 24) >> 1)
        {
          sub_10019A9C0();
          uint64_t v89 = v321;
        }

        ++v88;
        *(void *)(v89 + 1sub_100019F7C(v0 + 6) = v91 + 1;
        sub_10019AC60((uint64_t)&v316, v89 + 32 * v91 + 32);
        uint64_t v61 = v310;
      }

      while (v87 != v88);
    }

    sub_100023EEC();
    sub_10006B92C();
    v316 = *(double *)&v76;
    uint64_t v92 = sub_10019AB94();
    sub_1001B8B20(v92, 1LL, v93);
    *(double *)&unint64_t v76 = v316;
    sub_10019A8C4();
  }

  if (a18)
  {
    sub_10006A030(a18);
    sub_10003561C();
    sub_10006B92C();
    v316 = *(double *)&v76;
    uint64_t v94 = sub_10019AB94();
    sub_1001B8B20(v94, 3LL, v95);
    *(double *)&unint64_t v76 = v316;
    sub_10019A8C4();
  }

  if (a19)
  {
    sub_10006A030(a19);
    uint64_t v97 = v96;
    sub_100019390();
    char v98 = sub_10006B92C();
    v316 = *(double *)&v76;
    *(double *)&unint64_t v76 = COERCE_DOUBLE(&v316);
    sub_1001B8B20(v97, 4LL, v98);
    uint64_t v99 = v316;
    sub_10019A8C4();
  }

  else
  {
    uint64_t v99 = *(double *)&v76;
  }

  uint64_t v100 = a22;
  if (a20)
  {
    sub_10006A03C(a20);
    int v102 = v101;
    sub_10001A3F8();
    os_log_type_t v103 = sub_10019AB28();
    v316 = v99;
    *(double *)&unint64_t v76 = COERCE_DOUBLE(&v316);
    sub_1001B8B20(v102, 5LL, v103);
    uint64_t v99 = v316;
    sub_10019A8C4();
  }

  if (a21)
  {
    sub_10006A03C(a21);
    sub_100019390();
    swift_isUniquelyReferenced_nonNull_native(*(void *)&v99);
    v316 = v99;
    uint64_t v104 = sub_10019AB94();
    sub_1001B8B20(v104, 6LL, v105);
    uint64_t v99 = v316;
    sub_10019A8C4();
  }

  if (*(double *)&a22 == 0.0)
  {
    *(double *)&uint64_t v100 = v99;
  }

  else
  {
    if (*(void *)(a22 + 16))
    {
      sub_10019A9A8((uint64_t)_swiftEmptyArrayStorage);
      __asm { BR              X10 }
    }

    sub_100023EF4();
    sub_10019AB28();
    v316 = v99;
    unint64_t v106 = sub_10019A8E0();
    sub_1001B8B20(v106, 10LL, v107);
    sub_10019A8B8();
  }

  if (a23)
  {
    uint64_t v108 = *(void *)(a23 + 16);
    if (v108)
    {
      sub_10019AA88((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v109 = 0LL;
      do
      {
        uint64_t v110 = *(unsigned __int8 *)(a23 + v109 + 32);
        if (v110 == 5) {
          sub_10019A958();
        }
        else {
          sub_10019ABC0(v110);
        }
        ++v109;
        *(double *)&unint64_t v76 = COERCE_DOUBLE(&v321);
        sub_10006B714();
        sub_10006B784(*(void *)(v321 + 16));
        uint64_t v111 = sub_10019A964();
        debugOnly(_:)(v111);
      }

      while (v108 != v109);
    }

    sub_10003561C();
    sub_100138778();
    double v112 = sub_10019A8CC();
    sub_1001B8B20(v112, 14LL, v113);
    sub_10019A8B8();
  }

  if (a24)
  {
    sub_100069F54(a24);
    sub_10019A97C();
    sub_100138778();
    uint64_t v114 = sub_10019A8CC();
    sub_1001B8B20(v114, 15LL, v115);
    sub_10019A8B8();
  }

  v304 = a27;
  if (a25)
  {
    sub_10006A130(a25);
    sub_10001A3F8();
    sub_100138778();
    char v116 = sub_10019AC1C();
    sub_1001B8B20(v116, 13LL, v117);
    sub_10019A8B8();
  }

  uint64_t v118 = a28;
  if (a26)
  {
    sub_10006A03C(a26);
    sub_100019390();
    sub_100138778();
    v316 = *(double *)&v100;
    uint64_t v119 = sub_10019AB94();
    sub_1001B8B20(v119, 17LL, v120);
    sub_10019A8B8();
  }

  uint64_t v121 = v304;
  if (v304 != 0.0)
  {
    uint64_t v122 = *(void *)(*(void *)&v304 + 16LL);
    if (v122)
    {
      v303 = a28;
      uint64_t v123 = variable initialization expression of SelectableEventLoop.tasksCopy();
      sub_10019A918((uint64_t)v123);
      uint64_t v124 = (unsigned __int8 *)(*(void *)&v121 + 64LL);
      do
      {
        uint64_t v125 = *v124;
        if (v125 == 255)
        {
          sub_10019A958();
        }

        else
        {
          uint64_t v127 = *((void *)v124 - 2);
          uint64_t v126 = *((void *)v124 - 1);
          uint64_t v128 = v100;
          id v129 = *((void *)v124 - 4);
          uint64_t v130 = *((void *)v124 - 3);
          v321 = v129;
          v322 = v130;
          v323 = v127;
          v324 = v126;
          v325[0] = v125;
          sub_100114748(v129, v130, v127, v126, v125);
          *(double *)&unint64_t v76 = COERCE_DOUBLE(&v321);
          sub_1000B8D18();
          v319 = &type metadata for String;
          v316 = v131;
          v317 = v132;
          uint64_t v133 = v130;
          uint64_t v100 = v128;
          uint64_t v61 = v310;
          sub_1000BAFE0(v129, v133, v127, v126, v125);
        }

        sub_10019A9A0();
        sub_10019A908();
        id v134 = sub_10019A964();
        debugOnly(_:)(v134);
        v124 += 40;
        --v122;
      }

      while (v122);
      sub_10019ABE0((uint64_t)&v321);
      uint64_t v118 = v303;
    }

    else
    {
      sub_10019A998();
      sub_10001A3F8();
    }

    sub_100138778();
    uint64_t v135 = sub_10019A8CC();
    sub_1001B8B20(v135, 18LL, v136);
    sub_10019A8B8();
  }

  if (v118)
  {
    char v137 = *((void *)v118 + 2);
    if (v137)
    {
      id v138 = variable initialization expression of SelectableEventLoop.tasksCopy();
      sub_10019A918((uint64_t)v138);
      double v139 = (unint64_t *)(v118 + 40);
      do
      {
        uint64_t v140 = *v139;
        if (*v139)
        {
          uint64_t v141 = *((double *)v139 - 1);
          v319 = &type metadata for String;
          v316 = v141;
          v317 = v140;
          swift_bridgeObjectRetain(v140);
        }

        else
        {
          sub_10019A958();
        }

        sub_10019A9A0();
        sub_10019A908();
        uint64_t v142 = sub_10019A964();
        debugOnly(_:)(v142);
        v139 += 10;
        --v137;
      }

      while (v137);
      sub_10001A420();
    }

    else
    {
      sub_10019A998();
      sub_10001A420();
    }

    sub_100138778();
    uint64_t v143 = sub_10019A8CC();
    sub_1001B8B20(v143, 20LL, v144);
    sub_10019A8B8();
  }

  if (a29)
  {
    sub_10006A030(a29);
    sub_10019A97C();
    sub_100138778();
    uint64_t v145 = sub_10019A8CC();
    sub_1001B8B20(v145, 21LL, v146);
    sub_10019A8B8();
  }

  if (a30)
  {
    uint64_t v147 = *(double *)&v100;
    uint64_t v100 = *(uint64_t *)(a30 + 16);
    if (*(double *)&v100 == 0.0)
    {
      sub_10019A998();
      sub_10001DC10();
    }

    else
    {
      *(void *)&v313 = variable initialization expression of SelectableEventLoop.tasksCopy();
      *(double *)&unint64_t v76 = COERCE_DOUBLE(&v313);
      sub_10006A628(v100);
      sub_10019AA04();
      v310 = (char *)a30;
      uint64_t v149 = a30 + v148;
      uint64_t v151 = *(void *)(v150 + 72);
      do
      {
        sub_10019AB68(v149, (uint64_t)&v322);
        uint64_t v152 = sub_10019AC3C();
        sub_1000925C4(v152, v153, &qword_1002AC060);
        sub_10019AB68((uint64_t)v61, (uint64_t)&v323);
        id v154 = type metadata accessor for UUID(0LL);
        uint64_t v155 = sub_10019A9D8((uint64_t)&v313);
        if (v156)
        {
          sub_10019ABA0((uint64_t)&v313);
          sub_10019A958();
        }

        else
        {
          *(double *)&uint64_t v157 = COERCE_DOUBLE(UUID.uuidString.getter(v155));
          v319 = &type metadata for String;
          v316 = *(double *)&v157;
          v317 = v158;
          sub_10019AAE4((uint64_t)&v313, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v154 - 8) + 8LL));
        }

        sub_10019ABA0((uint64_t)v61);
        sub_10019A9A0();
        sub_10019A908();
        id v159 = sub_10019A964();
        debugOnly(_:)(v159);
        v149 += v151;
        --v100;
      }

      while (*(double *)&v100 != 0.0);
      sub_10019ABE0((uint64_t)&v330);
    }

    sub_10019AB28();
    v316 = v147;
    id v160 = sub_10019A8E0();
    sub_1001B8B20(v160, 22LL, v161);
    sub_10019A8B8();
  }

  if (a31)
  {
    sub_10006A030(a31);
    sub_10019A97C();
    sub_100138778();
    v162 = sub_10019A8CC();
    sub_1001B8B20(v162, 23LL, v163);
    sub_10019A8B8();
  }

  if (a32)
  {
    sub_10006A03C(a32);
    sub_10001A3F8();
    sub_100138778();
    double v164 = sub_10019AC1C();
    sub_1001B8B20(v164, 24LL, v165);
    sub_10019A8B8();
  }

  if (a33)
  {
    sub_10006A024(a33);
    sub_100019390();
    sub_100138778();
    v316 = *(double *)&v100;
    v166 = sub_10019AB94();
    sub_1001B8B20(v166, 25LL, v167);
    sub_10019A8B8();
  }

  if (a34)
  {
    v168 = *(void *)(a34 + 16);
    if (v168)
    {
      v169 = variable initialization expression of SelectableEventLoop.tasksCopy();
      sub_10019A918((uint64_t)v169);
      v170 = 0LL;
      do
      {
        v171 = *(unsigned __int8 *)(a34 + v170 + 32);
        if (v171 == 2)
        {
          sub_10019A958();
        }

        else
        {
          v319 = &type metadata for String;
          if ((v171 & 1) != 0) {
            v172 = 3157554LL;
          }
          else {
            v172 = 3157553LL;
          }
          v316 = *(double *)&v172;
          v317 = 0xE300000000000000LL;
        }

        ++v170;
        sub_10019A9A0();
        sub_10019A908();
        v173 = sub_10019A964();
        debugOnly(_:)(v173);
      }

      while (v168 != v170);
      sub_100023EEC();
    }

    else
    {
      sub_10019A998();
      sub_10019A97C();
    }

    sub_100138778();
    v175 = sub_10019A8CC();
    sub_1001B8B20(v175, 26LL, v176);
    v174 = v316;
    sub_10019A8C4();
  }

  else
  {
    v174 = *(double *)&v100;
  }

  v177 = a37;
  if (a35)
  {
    v178 = *(void *)(a35 + 16);
    if (v178)
    {
      v179 = variable initialization expression of SelectableEventLoop.tasksCopy();
      sub_10019A918((uint64_t)v179);
      v180 = 0LL;
      do
      {
        v181 = *(unsigned __int8 *)(a35 + v180 + 32);
        if (v181 == 2) {
          sub_10019A958();
        }
        else {
          sub_10019ABC0(v181 & 1);
        }
        ++v180;
        sub_10019A9A0();
        sub_10019A908();
        v182 = sub_10019A964();
        debugOnly(_:)(v182);
      }

      while (v178 != v180);
      sub_10003561C();
    }

    else
    {
      sub_10019A998();
      sub_10003561C();
    }

    sub_10019AB34();
    v316 = v174;
    v183 = sub_10019A8E0();
    sub_1001B8B20(v183, 27LL, v184);
    v174 = v316;
    sub_10019A8C4();
  }

  v185 = a38;
  if (a36)
  {
    sub_100069F54(a36);
    sub_10019A97C();
    sub_10019AB34();
    v316 = v174;
    v186 = sub_10019A8E0();
    sub_1001B8B20(v186, 28LL, v187);
    v174 = v316;
    sub_10019A8C4();
  }

  sub_10019AC54(a39);
  if (a37)
  {
    v188 = *(void *)(a37 + 16);
    if (v188)
    {
      v305 = a38;
      v189 = variable initialization expression of SelectableEventLoop.tasksCopy();
      sub_10019AA34((uint64_t)v189);
      sub_10019AA04();
      v191 = a37 + v190;
      v193 = *(void *)(v192 + 72);
      v194 = (uint64_t)v307;
      do
      {
        sub_10019AB58(v191, (uint64_t)&v324);
        sub_1000925C4((uint64_t)v76, v194, (uint64_t *)&unk_1002AFCD0);
        sub_10019AB58(v194, (uint64_t)v325);
        v195 = sub_100092A18();
        v196 = sub_10019A9D8((uint64_t)v76);
        if (v156)
        {
          v197 = sub_10019AC3C();
          sub_100034F14(v197, v198);
          sub_10019A958();
        }

        else
        {
          v199 = Date.timeIntervalSinceReferenceDate.getter(v196);
          v319 = &type metadata for Double;
          v316 = v199;
          sub_10019AAE4((uint64_t)v76, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v195 - 8) + 8LL));
        }

        v194 = (uint64_t)v307;
        sub_100034F14((uint64_t)v307, (uint64_t *)&unk_1002AFCD0);
        sub_10019A9A0();
        sub_10019A908();
        v200 = sub_10019A964();
        debugOnly(_:)(v200);
        v191 += v193;
        --v188;
      }

      while (v188);
      sub_100023EF4();
      v185 = v305;
    }

    else
    {
      sub_10019A998();
      sub_100023EF4();
    }

    sub_10019AB34();
    v316 = v174;
    v201 = sub_10019A8E0();
    sub_1001B8B20(v201, 30LL, v202);
    sub_10019A8B8();
  }

  else
  {
    v177 = *(void *)&v174;
  }

  v203 = (uint64_t)v310;
  if (v185)
  {
    v204 = *(void *)(v185 + 16);
    if (v204)
    {
      v205 = sub_10019AC10();
      sub_10019AA34((uint64_t)v205);
      sub_10019AA04();
      v207 = v185 + v206;
      v209 = *(void *)(v208 + 72);
      v210 = v308;
      do
      {
        sub_10019AB78(v207, (uint64_t)v326);
        v211 = sub_10019AC3C();
        sub_10019AC60(v211, v212);
        sub_10019AB78(v210, (uint64_t)&v327);
        v213 = sub_100092A18();
        v214 = sub_10001D158((uint64_t)v76, 1LL, v213);
        if ((_DWORD)v214 == 1)
        {
          sub_100034F14((uint64_t)v76, (uint64_t *)&unk_1002AFCD0);
          sub_10019A958();
        }

        else
        {
          v215 = Date.timeIntervalSinceReferenceDate.getter(v214);
          v319 = &type metadata for Double;
          v316 = v215;
          v216 = sub_10019AC3C();
          v217(v216);
        }

        v210 = v308;
        sub_100034F14(v308, (uint64_t *)&unk_1002AFCD0);
        sub_10019A9A0();
        v218 = *(void *)(v313 + 16);
        sub_10006B784(v218);
        v219 = sub_10006B7DC(v218, (uint64_t)&v316);
        debugOnly(_:)(v219);
        v207 += v209;
        --v204;
      }

      while (v204);
      sub_10001A420();
      v177 = *(void *)&v304;
      v203 = (uint64_t)v310;
    }

    else
    {
      sub_10019A998();
      sub_10001A420();
    }

    sub_100138778();
    v220 = sub_10019A8CC();
    sub_1001B8B20(v220, 29LL, v221);
    sub_10019A8B8();
  }

  if (v203)
  {
    v222 = *(void *)(v203 + 16);
    if (v222)
    {
      v223 = sub_10019AC10();
      sub_10019AA34((uint64_t)v223);
      sub_10019AA04();
      v225 = v203 + v224;
      v227 = *(void *)(v226 + 72);
      v228 = v309;
      do
      {
        sub_10019AB48(v225, (uint64_t)&v328);
        sub_1000925C4((uint64_t)v76, v228, (uint64_t *)&unk_1002AFCD0);
        sub_10019AB48(v228, (uint64_t)&v329);
        v229 = sub_100092A18();
        v230 = sub_10001D158((uint64_t)v76, 1LL, v229);
        if ((_DWORD)v230 == 1)
        {
          sub_100034F14((uint64_t)v76, (uint64_t *)&unk_1002AFCD0);
          sub_10019A958();
        }

        else
        {
          v231 = Date.timeIntervalSinceReferenceDate.getter(v230);
          v319 = &type metadata for Double;
          v316 = v231;
          (*(void (**)(double *, uint64_t))(*(void *)(v229 - 8) + 8LL))(v76, v229);
        }

        v228 = v309;
        sub_100034F14(v309, (uint64_t *)&unk_1002AFCD0);
        sub_10019A9A0();
        v232 = *(void *)(v313 + 16);
        sub_10006B784(v232);
        v233 = sub_10006B7DC(v232, (uint64_t)&v316);
        debugOnly(_:)(v233);
        v225 += v227;
        --v222;
      }

      while (v222);
      sub_10019ABE0((uint64_t)&v330);
      v177 = *(void *)&v304;
    }

    else
    {
      sub_10019A998();
      sub_10001DC10();
    }

    sub_100138778();
    v234 = sub_10019A8CC();
    sub_1001B8B20(v234, 33LL, v235);
    sub_10019A8B8();
  }

  if (a40)
  {
    v236 = *(void *)(a40 + 16);
    if (v236)
    {
      v237 = variable initialization expression of SelectableEventLoop.tasksCopy();
      sub_10019A918((uint64_t)v237);
      v238 = (_BYTE *)(a40 + 40);
      do
      {
        if ((*v238 & 1) != 0) {
          sub_10019A958();
        }
        else {
          sub_10019ABC0(*((void *)v238 - 1));
        }
        sub_10019A9A0();
        v239 = *(void *)(v313 + 16);
        sub_10006B784(v239);
        v240 = sub_10006B7DC(v239, (uint64_t)&v316);
        debugOnly(_:)(v240);
        v238 += 16;
        --v236;
      }

      while (v236);
      sub_10001A3F8();
    }

    else
    {
      sub_10019A998();
      sub_10001A3F8();
    }

    sub_100138778();
    v241 = sub_10019A8CC();
    sub_1001B8B20(v241, 31LL, v242);
    sub_10019A8B8();
  }

  if (a41)
  {
    if (*(void *)(a41 + 16))
    {
      v243 = variable initialization expression of SelectableEventLoop.tasksCopy();
      sub_10019A918((uint64_t)v243);
      __asm { BR              X9 }
    }

    sub_10019A998();
    sub_10001A420();
    sub_100138778();
    v244 = sub_10019A8CC();
    sub_1001B8B20(v244, 32LL, v245);
    sub_10019A8B8();
  }

  if (a42)
  {
    v246 = *(void *)(a42 + 16);
    if (v246)
    {
      v247 = variable initialization expression of SelectableEventLoop.tasksCopy();
      sub_10019A918((uint64_t)v247);
      v248 = 0LL;
      do
      {
        v249 = *(void *)(a42 + 8 * v248 + 32);
        swift_bridgeObjectRetain(v249);
        if (v249)
        {
          *(double *)&v250 = COERCE_DOUBLE(Array.description.getter(v249, &unk_10027FB38));
          v319 = &type metadata for String;
          v316 = *(double *)&v250;
          v317 = v251;
          sub_10001EDA0();
        }

        else
        {
          sub_10019A958();
        }

        ++v248;
        sub_10019A9A0();
        v252 = *(void *)(v313 + 16);
        sub_10006B784(v252);
        v253 = sub_10006B7DC(v252, (uint64_t)&v316);
        debugOnly(_:)(v253);
      }

      while (v246 != v248);
      sub_100023EEC();
    }

    else
    {
      sub_10019A998();
      sub_10019A97C();
    }

    sub_100138778();
    v254 = sub_10019A8CC();
    sub_1001B8B20(v254, 19LL, v255);
    sub_10019A8B8();
  }

  if (a43)
  {
    sub_10006A130(a43);
    sub_10001A3F8();
    sub_100138778();
    v256 = sub_10019A8CC();
    sub_1001B8B20(v256, 34LL, v257);
    sub_10019A8B8();
  }

  swift_bridgeObjectRetain(v177);
  sub_10018DF30(0LL);
  v259 = v258;
  v260 = sub_1000175B0((uint64_t *)&unk_1002AFCF0);
  v261 = Dictionary.init(dictionaryLiteral:)(v259, &type metadata for TransactionEntity.Key, v260);
  v262 = v177;
  v263 = (void *)v261;
  sub_10011DF7C(v262, &v316);
  v308 = *(void *)&v316;
  v306 = v317;
  v309 = (uint64_t)v319;
  v264 = v320;
  v307 = (char *)((unint64_t)(v318 + 64) >> 6);
  v304 = *(double *)&v262;
  swift_bridgeObjectRetain(v262);
  v265 = (SEL *)&unk_1002A6000;
  if (!v264) {
    goto LABEL_184;
  }
LABEL_183:
  v310 = (char *)((v264 - 1) & v264);
  v266 = __clz(__rbit64(v264)) | (v309 << 6);
  while (1)
  {
    v274 = *(unsigned __int8 *)(*(void *)(v308 + 48) + v266);
    v275 = *(void *)(*(void *)(v308 + 56) + 8 * v266);
    v276 = *(void *)(v275 + 16);
    if (v276)
    {
      v315 = variable initialization expression of SelectableEventLoop.tasksCopy();
      sub_1000356F4();
      sub_10006A61C(v276);
      v277 = v275 + 32;
      do
      {
        sub_100067DA4(v277, (uint64_t)v312, (uint64_t *)&unk_1002B9380);
        sub_100067DA4((uint64_t)v312, (uint64_t)&v313, (uint64_t *)&unk_1002B9380);
        if (v314)
        {
          sub_100034728(&v313, v311);
          sub_100034728(v311, &v313);
        }

        else
        {
          sub_10019ABA0((uint64_t)&v313);
          v278 = [objc_allocWithZone(NSNull) v265[337]];
          v314 = sub_10001672C(0LL, &qword_1002B8968, &OBJC_CLASS___NSNull_ptr);
          *(void *)&v313 = v278;
        }

        sub_10019ABA0((uint64_t)v312);
        sub_10006B708();
        v279 = v315[2];
        sub_10006B778(v279);
        v280 = sub_10006B7BC(v279, &v313);
        debugOnly(_:)(v280);
        v277 += 32LL;
        --v276;
      }

      while (v276);
      v281 = v315;
    }

    else
    {
      sub_1000356F4();
      sub_10018DEB8(0LL);
      v281 = v282;
    }

    v283 = sub_100138778();
    *(void *)&v313 = v263;
    v284 = sub_1000F16E0(v274);
    v286 = v263[2];
    v287 = (v285 & 1) == 0;
    v288 = v286 + v287;
    if (__OFADD__(v286, v287))
    {
      __break(1u);
LABEL_226:
      __break(1u);
LABEL_227:
      __break(1u);
LABEL_228:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for TransactionEntity.Key);
      __break(1u);
      JUMPOUT(0x100199EA8LL);
    }

    v289 = v284;
    v290 = v285;
    sub_1000175B0(&qword_1002B8980);
    v291 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v283, v288);
    v265 = (SEL *)&unk_1002A6000;
    if (v291)
    {
      v292 = sub_1000F16E0(v274);
      if ((v290 & 1) != (v293 & 1)) {
        goto LABEL_228;
      }
      v289 = v292;
    }

    v263 = (void *)v313;
    if ((v290 & 1) != 0)
    {
      v294 = *(void *)(v313 + 56);
      swift_bridgeObjectRelease(*(void *)(v294 + 8 * v289));
      *(void *)(v294 + 8 * v289) = v281;
    }

    else
    {
      *(void *)(v313 + 8 * (v289 >> 6) + 64) |= 1LL << v289;
      *(_BYTE *)(v263[6] + v289) = v274;
      *(void *)(v263[7] + 8 * v289) = v281;
      v295 = v263[2];
      v271 = __OFADD__(v295, 1LL);
      v296 = v295 + 1;
      if (v271) {
        goto LABEL_226;
      }
      v263[2] = v296;
    }

    swift_bridgeObjectRelease(v275);
    sub_10019A8C4();
    v264 = (unint64_t)v310;
LABEL_184:
    v267 = v309 + 1;
    if (__OFADD__(v309, 1LL)) {
      goto LABEL_227;
    }
    v268 = *(void *)(v306 + 8 * v267);
    v269 = v309 + 1;
    if (!v268)
    {
      sub_10019AA78();
      if (v270 == v271) {
        break;
      }
      sub_10019AAA0();
      if (!v268)
      {
        sub_10019AA78();
        if (v270 == v271) {
          break;
        }
        sub_10019AAA0();
        if (!v268)
        {
          sub_10019AA78();
          if (v270 == v271) {
            break;
          }
          sub_10019AAA0();
          if (!v268)
          {
            sub_10019AA78();
            if (v270 == v271) {
              break;
            }
            sub_10019AAA0();
            if (!v268)
            {
              v269 = v272 + 5;
              v268 = *(void *)(v306 + 8 * v269);
              if (!v268)
              {
                v273 = v309 + 7;
                do
                {
                  v268 = *(void *)(v306 + 8 * v273++);
                }

                while (!v268);
                v269 = v273 - 1;
              }
            }
          }
        }
      }
    }

    v310 = (char *)((v268 - 1) & v268);
    v266 = __clz(__rbit64(v268)) + (v269 << 6);
    v309 = v269;
  }

uint64_t sub_1000951A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v2 + 56);
  uint64_t ObjectType = swift_getObjectType(*(void *)(v2 + 48));
  uint64_t result = EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  1832LL,  ObjectType,  v3);
  if ((*(_BYTE *)(v0 + 88) & 1) == 0)
  {
    *(_BYTE *)(v0 + sub_100081CEC(v0 + 88) = 1;
    ChannelHandlerContext.handler.getter();
    uint64_t v7 = v6;
    uint64_t v9 = v8;
    uint64_t v10 = swift_getObjectType(v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v1, v10, v9);
    return swift_unknownObjectRelease(v7);
  }

  return result;
}

Swift::Void __swiftcall ChannelPipeline.fireChannelRegistered()()
{
}

Swift::Void __swiftcall ChannelPipeline.fireChannelUnregistered()()
{
}

Swift::Void __swiftcall ChannelPipeline.fireChannelInactive()()
{
}

Swift::Void __swiftcall ChannelPipeline.fireChannelActive()()
{
}

uint64_t ChannelPipeline.fireChannelRead(_:)(uint64_t *a1)
{
  uint64_t v2 = sub_10002A444();
  if ((sub_10009B22C(v2) & 1) != 0)
  {
    uint64_t result = sub_10009B504();
    if (result)
    {
      sub_1000963AC((uint64_t)a1);
      return swift_release();
    }
  }

  else
  {
    sub_10002B550(a1, (uint64_t)v12);
    uint64_t v4 = sub_100019310((uint64_t)&unk_10027DF80, 81LL);
    sub_10009B33C(v4, v5, v6, v7, v8, v9, v10, v11, v12[0], v12[1], v13, v14, v15, v16);
    sub_100041B5C();
    sub_10009B4BC((uint64_t)sub_10009A0F4, v4);
    return sub_10002A524();
  }

  return result;
}

uint64_t sub_100095370(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100095918();
  if (result)
  {
    sub_1000963AC(a2);
    return swift_release();
  }

  return result;
}

Swift::Void __swiftcall ChannelPipeline.fireChannelWritabilityChanged()()
{
}

void sub_1000953D0()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = v0;
  uint64_t v8 = *(void *)(v0 + 56);
  uint64_t v9 = sub_10002A444();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v9, v8) & 1) == 0)
  {
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 24);
    sub_10002A4C8();
    v11(v2, v0, v9, v8);
    goto LABEL_5;
  }

  uint64_t v10 = v6();
  if (v10)
  {
    uint64_t v7 = v10;
    v4();
LABEL_5:
    sub_10009B144(v7);
    return;
  }

  sub_100023E74();
}

uint64_t ChannelPipeline.fireUserInboundEventTriggered(_:)(uint64_t a1)
{
  uint64_t v2 = sub_10002A444();
  if ((sub_10009B22C(v2) & 1) != 0)
  {
    uint64_t result = sub_10009B504();
    if (result)
    {
      sub_10009655C(a1);
      return swift_release();
    }
  }

  else
  {
    sub_10002C010(a1, (uint64_t)&v12);
    uint64_t v4 = sub_100019310((uint64_t)&unk_10027DFA8, 56LL);
    sub_10009B58C(v4, v5, v6, v7, v8, v9, v10, v11, v12);
    sub_100041B5C();
    sub_10009B4BC((uint64_t)sub_10009A144, v4);
    return sub_10002A524();
  }

  return result;
}

uint64_t sub_10009551C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100095918();
  if (result)
  {
    sub_10009655C(a2);
    return swift_release();
  }

  return result;
}

void ChannelPipeline.fireErrorCaught(_:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = sub_10002A444();
  if ((sub_10009B1B4(v4) & 1) != 0)
  {
    uint64_t v5 = sub_100095918();
    if (v5)
    {
      uint64_t v6 = v5;
      sub_10009B5E4();
      sub_10009B144(v6);
    }

    else
    {
      sub_100023E74();
    }
  }

  else
  {
    uint64_t v7 = sub_100019310((uint64_t)&unk_10027DFD0, 32LL);
    *(void *)(v7 + 1sub_100019F7C(v0 + 6) = v0;
    *(void *)(v7 + 2sub_100019F7C(v0 + 4) = v2;
    uint64_t v8 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v3 + 24);
    sub_10002A75C();
    swift_errorRetain(v2);
    v8(sub_10009A18C, v7, v4, v3);
    sub_10009B144(v7);
  }

uint64_t sub_100095604(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100095918();
  if (result)
  {
    sub_10009663C(a2);
    return swift_release();
  }

  return result;
}

uint64_t sub_100095648(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1000958F0();
  if (result)
  {
    uint64_t v5 = result;
    sub_100095940(a1, a2);
    return swift_release(v5);
  }

  else if (a2)
  {
    unint64_t v6 = sub_100029C98();
    uint64_t v7 = swift_allocError(&type metadata for ChannelError, v6, 0LL, 0LL);
    *(void *)uint64_t v8 = 3LL;
    *(_BYTE *)(v8 + 8) = 3;
    swift_errorRetain(v7);
    sub_100098A70(v7, 1LL, a2);
    swift_errorRelease(v7);
    return swift_errorRelease(v7);
  }

  return result;
}

void sub_1000956FC(uint64_t a1, uint64_t (*a2)(void), void (*a3)(void))
{
  uint64_t v4 = a2();
  if (v4)
  {
    uint64_t v5 = v4;
    a3();
    sub_1000352E0(v5);
  }

  else
  {
    sub_10001945C();
  }

void sub_100095734()
{
  uint64_t v2 = sub_10009B56C();
  if (v2)
  {
    uint64_t v3 = v2;
    sub_10009B330();
    sub_10002A598(v3);
  }

  else if (v0)
  {
    unint64_t v4 = sub_100029C98();
    uint64_t v5 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v4);
    sub_10008142C(v5, v6);
    sub_10002A3E4();
    sub_10002A620();
    sub_10009B1A8(v1);
  }

  else
  {
    sub_1000193B8();
  }

uint64_t sub_100095798(uint64_t a1)
{
  uint64_t result = sub_1000958F0();
  if (result)
  {
    uint64_t v3 = result;
    sub_100095FA0(a1);
    return swift_release(v3);
  }

  else if (a1)
  {
    unint64_t v4 = sub_100029C98();
    uint64_t v5 = swift_allocError(&type metadata for ChannelError, v4, 0LL, 0LL);
    *(void *)uint64_t v6 = 2LL;
    *(_BYTE *)(v6 + 8) = 3;
    swift_errorRetain(v5);
    sub_100098A70(v5, 1LL, a1);
    swift_errorRelease(v5);
    return swift_errorRelease(v5);
  }

  return result;
}

uint64_t sub_100095838(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1000958F0();
  if (result)
  {
    uint64_t v5 = result;
    sub_100096080(a1, a2);
    return swift_release(v5);
  }

  else if (a2)
  {
    unint64_t v6 = sub_100029C98();
    uint64_t v7 = swift_allocError(&type metadata for ChannelError, v6, 0LL, 0LL);
    *(void *)uint64_t v8 = 2LL;
    *(_BYTE *)(v8 + 8) = 3;
    swift_errorRetain(v7);
    sub_100098A70(v7, 1LL, a2);
    swift_errorRelease(v7);
    return swift_errorRelease(v7);
  }

  return result;
}

uint64_t sub_1000958F0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (v1) {
    return swift_retain(*(void *)(v1 + 24));
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100095918()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1) {
    return swift_retain(*(void *)(v1 + 16));
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100095940(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = v2[4];
  uint64_t v7 = *(void *)(v6 + 56);
  uint64_t ObjectType = swift_getObjectType(*(void *)(v6 + 48));
  uint64_t result = EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  1806LL,  ObjectType,  v7);
  uint64_t v10 = v2[9];
  if (v10)
  {
    uint64_t v11 = v3[10];
    uint64_t v12 = swift_getObjectType(v3[9]);
    uint64_t v13 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 64);
    swift_unknownObjectRetain(v10);
    v13(v3, a1, a2, v12, v11);
    return swift_unknownObjectRelease(v10);
  }

  else
  {
    uint64_t v14 = v3[3];
    if (v14)
    {
      swift_retain(v3[3]);
      sub_100095940(a1, a2);
      return swift_release(v14);
    }
  }

  return result;
}

uint64_t sub_100095A3C()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[4];
  uint64_t v3 = *(void *)(v2 + 56);
  uint64_t ObjectType = swift_getObjectType(*(void *)(v2 + 48));
  uint64_t result = EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  1775LL,  ObjectType,  v3);
  uint64_t v6 = v0[9];
  if (v6)
  {
    uint64_t v7 = v1[10];
    uint64_t v8 = swift_getObjectType(v1[9]);
    uint64_t v9 = *(void (**)(void *, uint64_t, uint64_t))(v7 + 48);
    swift_unknownObjectRetain(v6);
    v9(v1, v8, v7);
    return swift_unknownObjectRelease(v6);
  }

  else
  {
    uint64_t v10 = v1[3];
    if (v10)
    {
      uint64_t v11 = swift_retain(v1[3]);
      sub_100095A3C(v11);
      return swift_release(v10);
    }
  }

  return result;
}

void sub_100095B10()
{
  uint64_t v1 = v0;
  sub_10002A444();
  sub_10002A6F4();
  sub_10002A618(v2, v3, v4, 1796LL, v5);
  uint64_t v6 = *(void *)(v0 + 72);
  if (v6)
  {
    sub_10002A444();
    sub_10009B28C();
    sub_10009B1DC();
    sub_10009B124(v6);
  }

  else
  {
    uint64_t v7 = *(void *)(v1 + 24);
    if (v7)
    {
      uint64_t v8 = ChannelPipeline.syncOperations.getter();
      sub_100095B10(v8);
      sub_10009B134(v7);
    }

    else
    {
      sub_10002A3D4();
    }
  }

uint64_t sub_100095B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = v2[4];
  uint64_t v7 = *(void *)(v6 + 56);
  uint64_t ObjectType = swift_getObjectType(*(void *)(v6 + 48));
  uint64_t result = EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  1765LL,  ObjectType,  v7);
  uint64_t v10 = v2[9];
  if (v10)
  {
    uint64_t v11 = v3[10];
    uint64_t v12 = swift_getObjectType(v3[9]);
    uint64_t v13 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 40);
    swift_unknownObjectRetain(v10);
    v13(v3, a1, a2, v12, v11);
    return swift_unknownObjectRelease(v10);
  }

  else
  {
    uint64_t v14 = v3[3];
    if (v14)
    {
      swift_retain(v3[3]);
      sub_100095B9C(a1, a2);
      return swift_release(v14);
    }
  }

  return result;
}

uint64_t sub_100095C98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = v2[4];
  uint64_t v7 = *(void *)(v6 + 56);
  uint64_t ObjectType = swift_getObjectType(*(void *)(v6 + 48));
  uint64_t result = EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  1785LL,  ObjectType,  v7);
  uint64_t v10 = v2[9];
  if (v10)
  {
    uint64_t v11 = v3[10];
    uint64_t v12 = swift_getObjectType(v3[9]);
    uint64_t v13 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 40);
    swift_unknownObjectRetain(v10);
    v13(v3, a1, a2, v12, v11);
    (*(void (**)(void *, uint64_t, uint64_t))(v11 + 48))(v3, v12, v11);
    return swift_unknownObjectRelease(v10);
  }

  else
  {
    uint64_t v14 = v3[3];
    if (v14)
    {
      swift_retain(v3[3]);
      sub_100095C98(a1, a2);
      return swift_release(v14);
    }
  }

  return result;
}

uint64_t sub_100095DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = v2[4];
  uint64_t v7 = *(void *)(v6 + 56);
  uint64_t ObjectType = swift_getObjectType(*(void *)(v6 + 48));
  uint64_t result = EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  1745LL,  ObjectType,  v7);
  uint64_t v10 = v2[9];
  if (v10)
  {
    uint64_t v11 = v3[10];
    uint64_t v12 = swift_getObjectType(v3[9]);
    uint64_t v13 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 24);
    swift_unknownObjectRetain(v10);
    v13(v3, a1, a2, v12, v11);
    return swift_unknownObjectRelease(v10);
  }

  else
  {
    uint64_t v14 = v3[3];
    if (v14)
    {
      swift_retain(v3[3]);
      sub_100095DA8(a1, a2);
      return swift_release(v14);
    }
  }

  return result;
}

uint64_t sub_100095EA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = v2[4];
  uint64_t v7 = *(void *)(v6 + 56);
  uint64_t ObjectType = swift_getObjectType(*(void *)(v6 + 48));
  uint64_t result = EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  1755LL,  ObjectType,  v7);
  uint64_t v10 = v2[9];
  if (v10)
  {
    uint64_t v11 = v3[10];
    uint64_t v12 = swift_getObjectType(v3[9]);
    uint64_t v13 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 32);
    swift_unknownObjectRetain(v10);
    v13(v3, a1, a2, v12, v11);
    return swift_unknownObjectRelease(v10);
  }

  else
  {
    uint64_t v14 = v3[3];
    if (v14)
    {
      swift_retain(v3[3]);
      sub_100095EA4(a1, a2);
      return swift_release(v14);
    }
  }

  return result;
}

uint64_t sub_100095FA0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1[4];
  uint64_t v5 = *(void *)(v4 + 56);
  uint64_t ObjectType = swift_getObjectType(*(void *)(v4 + 48));
  uint64_t result = EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  1735LL,  ObjectType,  v5);
  uint64_t v8 = v1[9];
  if (v8)
  {
    uint64_t v9 = v2[10];
    uint64_t v10 = swift_getObjectType(v2[9]);
    uint64_t v11 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(v9 + 16);
    swift_unknownObjectRetain(v8);
    v11(v2, a1, v10, v9);
    return swift_unknownObjectRelease(v8);
  }

  else
  {
    uint64_t v12 = v2[3];
    if (v12)
    {
      swift_retain(v2[3]);
      sub_100095FA0(a1);
      return swift_release(v12);
    }
  }

  return result;
}

uint64_t sub_100096080(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = v2[4];
  uint64_t v7 = *(void *)(v6 + 56);
  uint64_t ObjectType = swift_getObjectType(*(void *)(v6 + 48));
  uint64_t result = EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  1816LL,  ObjectType,  v7);
  uint64_t v10 = v2[9];
  if (v10)
  {
    uint64_t v11 = v3[10];
    uint64_t v12 = swift_getObjectType(v3[9]);
    uint64_t v13 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 72);
    swift_unknownObjectRetain(v10);
    v13(v3, a1, a2, v12, v11);
    return swift_unknownObjectRelease(v10);
  }

  else
  {
    uint64_t v14 = v3[3];
    if (v14)
    {
      swift_retain(v3[3]);
      sub_100096080(a1, a2);
      return swift_release(v14);
    }
  }

  return result;
}

void sub_10009617C()
{
  uint64_t v1 = v0;
  sub_10002A444();
  sub_10002A6F4();
  sub_10002A618(v2, v3, v4, 1645LL, v5);
  uint64_t v6 = *(void *)(v0 + 56);
  if (v6)
  {
    sub_10002A444();
    sub_10009B28C();
    sub_10009B1DC();
    sub_10009B124(v6);
  }

  else
  {
    uint64_t v7 = *(void *)(v1 + 16);
    if (v7)
    {
      uint64_t v8 = ChannelPipeline.syncOperations.getter();
      sub_10009617C(v8);
      sub_10009B134(v7);
    }

    else
    {
      sub_10002A3D4();
    }
  }

void sub_100096208()
{
  uint64_t v1 = v0;
  sub_10002A444();
  sub_10002A6F4();
  sub_10002A618(v2, v3, v4, 1655LL, v5);
  uint64_t v6 = *(void *)(v0 + 56);
  if (v6)
  {
    sub_10002A444();
    sub_10009B28C();
    sub_10009B1DC();
    sub_10009B124(v6);
  }

  else
  {
    uint64_t v7 = *(void *)(v1 + 16);
    if (v7)
    {
      uint64_t v8 = ChannelPipeline.syncOperations.getter();
      sub_100096208(v8);
      sub_10009B134(v7);
    }

    else
    {
      sub_10002A3D4();
    }
  }

void sub_100096294()
{
  uint64_t v1 = v0;
  sub_10002A444();
  sub_10002A6F4();
  sub_10002A618(v2, v3, v4, 1675LL, v5);
  uint64_t v6 = *(void *)(v0 + 56);
  if (v6)
  {
    sub_10002A444();
    sub_10009B28C();
    sub_10009B1DC();
    sub_10009B124(v6);
  }

  else
  {
    uint64_t v7 = *(void *)(v1 + 16);
    if (v7)
    {
      uint64_t v8 = ChannelPipeline.syncOperations.getter();
      sub_100096294(v8);
      sub_10009B134(v7);
    }

    else
    {
      sub_10002A3D4();
    }
  }

void sub_100096320()
{
  uint64_t v1 = v0;
  sub_10002A444();
  sub_10002A6F4();
  sub_10002A618(v2, v3, v4, 1665LL, v5);
  uint64_t v6 = *(void *)(v0 + 56);
  if (v6)
  {
    sub_10002A444();
    sub_10009B28C();
    sub_10009B1DC();
    sub_10009B124(v6);
  }

  else
  {
    uint64_t v7 = *(void *)(v1 + 16);
    if (v7)
    {
      uint64_t v8 = ChannelPipeline.syncOperations.getter();
      sub_100096320(v8);
      sub_10009B134(v7);
    }

    else
    {
      sub_10002A3D4();
    }
  }

void sub_1000963AC(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_10002A444();
  sub_10002A6F4();
  sub_10002A65C(v4, v5, v6, 1685LL, v7);
  uint64_t v8 = *(void *)(v1 + 56);
  if (v8)
  {
    sub_10002A444();
    sub_10009B28C();
    sub_10009B4D4(v2, a1);
    sub_10009B124(v8);
  }

  else
  {
    uint64_t v9 = *(void *)(v2 + 16);
    if (v9)
    {
      uint64_t v10 = ChannelPipeline.syncOperations.getter();
      sub_10009B6E8(v10);
      sub_10009B134(v9);
    }

    else
    {
      sub_10002A3D4();
    }
  }

void sub_100096444()
{
  uint64_t v1 = v0;
  sub_10002A444();
  sub_10002A6F4();
  sub_10002A618(v2, v3, v4, 1695LL, v5);
  uint64_t v6 = *(void *)(v0 + 56);
  if (v6)
  {
    sub_10002A444();
    sub_10009B28C();
    sub_10009B1DC();
    sub_10009B124(v6);
  }

  else
  {
    uint64_t v7 = *(void *)(v1 + 16);
    if (v7)
    {
      uint64_t v8 = ChannelPipeline.syncOperations.getter();
      sub_100096444(v8);
      sub_10009B134(v7);
    }

    else
    {
      sub_10002A3D4();
    }
  }

void sub_1000964D0()
{
  uint64_t v1 = v0;
  sub_10002A444();
  sub_10002A6F4();
  sub_10002A618(v2, v3, v4, 1705LL, v5);
  uint64_t v6 = *(void *)(v0 + 56);
  if (v6)
  {
    sub_10002A444();
    sub_10009B28C();
    sub_10009B1DC();
    sub_10009B124(v6);
  }

  else
  {
    uint64_t v7 = *(void *)(v1 + 16);
    if (v7)
    {
      uint64_t v8 = ChannelPipeline.syncOperations.getter();
      sub_1000964D0(v8);
      sub_10009B134(v7);
    }

    else
    {
      sub_10002A3D4();
    }
  }

uint64_t sub_10009655C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1[4];
  uint64_t v5 = *(void *)(v4 + 56);
  uint64_t ObjectType = swift_getObjectType(*(void *)(v4 + 48));
  uint64_t result = EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  1725LL,  ObjectType,  v5);
  uint64_t v8 = v1[7];
  if (v8)
  {
    uint64_t v9 = v2[8];
    uint64_t v10 = swift_getObjectType(v2[7]);
    uint64_t v11 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(v9 + 72);
    swift_unknownObjectRetain(v8);
    v11(v2, a1, v10, v9);
    return swift_unknownObjectRelease(v8);
  }

  else
  {
    uint64_t v12 = v2[2];
    if (v12)
    {
      swift_retain(v2[2]);
      sub_10009655C(a1);
      return swift_release(v12);
    }
  }

  return result;
}

void sub_10009663C(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_10002A444();
  sub_10002A6F4();
  sub_10002A65C(v4, v5, v6, 1715LL, v7);
  uint64_t v8 = *(void *)(v1 + 56);
  if (v8)
  {
    sub_10002A444();
    sub_10009B28C();
    sub_10009B4D4(v2, a1);
    sub_10009B124(v8);
  }

  else
  {
    uint64_t v9 = *(void *)(v2 + 16);
    if (v9)
    {
      ChannelPipeline.syncOperations.getter();
      sub_10009B5E4();
      sub_10009B134(v9);
    }

    else
    {
      sub_10002A3D4();
    }
  }

uint64_t ChannelPipeline.init(channel:)(uint64_t a1)
{
  uint64_t v1 = sub_10009B72C();
  return sub_1000997C8(v1, v2, v3, v4);
}

uint64_t ChannelPipeline.deinit()
{
  return v0;
}

uint64_t ChannelPipeline.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 80LL, 7LL);
}

uint64_t sub_100096748()
{
  return ChannelPipeline.register(promise:)();
}

void sub_100096768(uint64_t a1, uint64_t a2)
{
}

void sub_100096788(uint64_t a1, uint64_t a2)
{
}

void sub_1000967A8(uint64_t *a1, uint64_t a2)
{
}

void sub_1000967C8()
{
}

void sub_1000967E8(uint64_t *a1, uint64_t a2)
{
}

void sub_100096808()
{
}

uint64_t sub_100096828()
{
  return ChannelPipeline.close(mode:promise:)();
}

uint64_t sub_100096848(uint64_t a1, uint64_t a2)
{
  return ChannelPipeline.triggerUserOutboundEvent(_:promise:)(a1, a2);
}

uint64_t sub_100096868()
{
  return swift_unknownObjectRetain(*(void *)(*(void *)v0 + 48LL));
}

void sub_100096890()
{
}

void sub_1000968B0()
{
}

void sub_1000968D0()
{
}

void sub_1000968F0()
{
}

uint64_t sub_100096910(uint64_t *a1)
{
  return ChannelPipeline.fireChannelRead(_:)(a1);
}

void sub_100096930()
{
}

void sub_100096950()
{
}

void sub_100096970()
{
}

uint64_t sub_100096990(uint64_t a1)
{
  return ChannelPipeline.fireUserInboundEventTriggered(_:)(a1);
}

uint64_t sub_1000969B0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (!(a3 >> 62) || a3 >> 62 != 1 && a2 | a3 ^ 0x8000000000000000LL) {
    return sub_100096BB4(a1, a2, a3);
  }
  uint64_t v5 = sub_100019320();
  uint64_t v6 = sub_100096AA8(v5, a2, a3);
  sub_100019390();
  return v6;
}

uint64_t sub_100096A38(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result = sub_1000969B0(a2, a3, a4);
  if ((v5 & 1) != 0)
  {
    uint64_t v7 = result;
    uint64_t v6 = sub_1000175B0(&qword_1002A9710);
    return swift_willThrowTypedImpl(&v7, v6, &protocol self-conformance witness table for Error);
  }

  return result;
}

uint64_t sub_100096AA8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(v3 + 56);
  uint64_t ObjectType = swift_getObjectType(*(void *)(v3 + 48));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  1013LL,  ObjectType,  v8);
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    return 0LL;
  }
  swift_bridgeObjectRetain();
  for (uint64_t i = a1 + 16 * v10 + 24; ; i -= 16LL)
  {
    uint64_t v12 = *(void *)(i - 8);
    swift_getObjectType(v12);
    uint64_t v13 = swift_unknownObjectRetain(v12);
    uint64_t v14 = sub_10009A194(v13, 0LL, 0LL, a2, a3, v4);
    char v16 = v15;
    swift_unknownObjectRelease(v12);
    if ((v16 & 1) != 0) {
      break;
    }
    if (!--v10)
    {
      swift_bridgeObjectRelease();
      return 0LL;
    }
  }

  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_100096BB4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(v3 + 56);
  uint64_t ObjectType = swift_getObjectType(*(void *)(v3 + 48));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  1013LL,  ObjectType,  v8);
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    return 0LL;
  }
  swift_bridgeObjectRetain();
  for (uint64_t i = a1 + 40; ; i += 16LL)
  {
    uint64_t v12 = *(void *)(i - 8);
    swift_getObjectType(v12);
    uint64_t v13 = swift_unknownObjectRetain(v12);
    uint64_t v14 = sub_10009A194(v13, 0LL, 0LL, a2, a3, v4);
    char v16 = v15;
    swift_unknownObjectRelease(v12);
    if ((v16 & 1) != 0) {
      break;
    }
    if (!--v10)
    {
      swift_bridgeObjectRelease();
      return 0LL;
    }
  }

  swift_bridgeObjectRelease();
  return v14;
}

void ChannelPipeline.SynchronousOperations.addHandler(_:name:position:)()
{
  if ((v7 & 1) != 0)
  {
    uint64_t v8 = sub_1000175B0(&qword_1002A9710);
    sub_10009B3F4(v8, v8, (uint64_t)&protocol self-conformance witness table for Error, v9);
  }

  sub_10009B46C();
}

uint64_t sub_100096D3C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = sub_1000969B0(a1, a2, a3);
  if ((v4 & 1) != 0)
  {
    uint64_t v5 = sub_1000175B0(&qword_1002A9710);
    return sub_10009B3F4(v5, v5, (uint64_t)&protocol self-conformance witness table for Error, v6);
  }

  return result;
}

uint64_t ChannelPipeline.SynchronousOperations.context(handler:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a3[6];
  uint64_t v6 = a3[7];
  swift_getObjectType(v5);
  sub_10009B604();
  EventLoop.assertInEventLoop(file:line:)(v7, v8, v9, v10, v11, v6);
  uint64_t v12 = a3[2];
  if (!v12)
  {
    sub_10009B6E0();
    goto LABEL_12;
  }

  uint64_t v5 = *(void *)(v12 + 16);
  swift_unknownObjectRetain_n(a1, 2LL);
  ChannelPipeline.syncOperations.getter();
  if (!v5)
  {
LABEL_9:
    sub_10009B6D8();
LABEL_12:
    unint64_t v18 = sub_100099BC0();
    uint64_t v19 = sub_1000252D0((uint64_t)&type metadata for ChannelPipelineError, v18);
    sub_10009B764(v19, v20);
    sub_10009B6D8();
    uint64_t v21 = sub_1000175B0(&qword_1002A9710);
    sub_10009B3F4(v21, v21, (uint64_t)&protocol self-conformance witness table for Error, v22);
    return v5;
  }

  while (1)
  {
    uint64_t v13 = a3[3];
    if (v13) {
      BOOL v14 = v5 == v13;
    }
    else {
      BOOL v14 = 0;
    }
    if (v14)
    {
      sub_10009B6D8();
      sub_100024F0C();
      goto LABEL_12;
    }

    ChannelHandlerContext.handler.getter();
    uint64_t v16 = v15;
    swift_unknownObjectRelease(v15);
    if (v16 == a1) {
      break;
    }
    uint64_t v17 = *(void *)(v5 + 16);
    sub_10001EDE0();
    sub_100024F0C();
    uint64_t v5 = v17;
    if (!v17) {
      goto LABEL_9;
    }
  }

  swift_unknownObjectRelease_n(a1, 2LL);
  return v5;
}

void *ChannelPipeline.SynchronousOperations.context(name:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (void *)a3[6];
  uint64_t v7 = a3[7];
  swift_getObjectType(v6);
  sub_10009B604();
  EventLoop.assertInEventLoop(file:line:)(v8, v9, v10, v11, v12, v7);
  uint64_t v13 = a3[2];
  if (v13)
  {
    uint64_t v6 = *(void **)(v13 + 16);
    swift_bridgeObjectRetain_n(a2, 2LL);
    ChannelPipeline.syncOperations.getter();
    if (v6)
    {
      while (1)
      {
        BOOL v14 = (void *)a3[3];
        if (v14 && v6 == v14) {
          break;
        }
        uint64_t v16 = v6[5];
        uint64_t v17 = v6[6];
        BOOL v18 = v16 == a1 && v17 == a2;
        if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, a1, a2, 0LL) & 1) != 0)
        {
          swift_bridgeObjectRelease_n(a2, 2LL);
          return v6;
        }

        uint64_t v19 = (void *)v6[2];
        sub_10009B678();
        sub_100024F0C();
        uint64_t v6 = v19;
        if (!v19) {
          goto LABEL_13;
        }
      }

      sub_100023EEC();
      sub_100024F0C();
    }

    else
    {
LABEL_13:
      sub_100023EEC();
    }
  }

  else
  {
    swift_bridgeObjectRetain();
  }

  unint64_t v20 = sub_100099BC0();
  uint64_t v21 = sub_1000252D0((uint64_t)&type metadata for ChannelPipelineError, v20);
  sub_10009B764(v21, v22);
  sub_100023EEC();
  uint64_t v23 = sub_1000175B0(&qword_1002A9710);
  sub_10009B3F4(v23, v23, (uint64_t)&protocol self-conformance witness table for Error, v24);
  return v6;
}

uint64_t ChannelPipeline.SynchronousOperations.context<A>(handlerType:)()
{
  uint64_t v1 = v0;
  if ((v2 & 1) != 0)
  {
    uint64_t v3 = sub_1000175B0(&qword_1002A9710);
    sub_10009B3F4(v3, v3, (uint64_t)&protocol self-conformance witness table for Error, v4);
  }

  return v1;
}

uint64_t ChannelPipeline.SynchronousOperations.handler<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[1] = ChannelPipeline._handlerSync<A>(type:)();
  char v9 = v5 & 1;
  sub_100018EC0(&qword_1002A9710);
  uint64_t v6 = (void *)type metadata accessor for Result(0LL, a3);
  uint64_t result = sub_100094450(v6, (uint64_t)v8, (uint64_t)&v10);
  if (!v3) {
    return v10;
  }
  return result;
}

uint64_t ChannelPipeline._handlerSync<A>(type:)()
{
  uint64_t v5 = v1;
  char v6 = v2 & 1;
  uint64_t v3 = sub_1000175B0(&qword_1002AE8F0);
  sub_100098910((void (*)(char *))sub_10009A3B8, v3, v0, (uint64_t)&v7);
  sub_10009AD58(v5, v6, (uint64_t (*)(void))&_swift_release);
  return v7;
}

void ChannelPipeline.SynchronousOperations.fireChannelRead(_:)()
{
  uint64_t v4 = sub_10009B504();
  if (v4)
  {
    uint64_t v5 = v4;
    sub_10009B6E8();
    sub_10002A598(v5);
  }

  else
  {
    sub_1000193B8();
  }

void ChannelPipeline.SynchronousOperations.fireUserInboundEventTriggered(_:)(uint64_t a1)
{
  uint64_t v6 = sub_10009B504();
  if (v6)
  {
    uint64_t v7 = v6;
    sub_10009655C(a1);
    sub_10002A598(v7);
  }

  else
  {
    sub_1000193B8();
  }

void ChannelPipeline.SynchronousOperations.close(mode:promise:)()
{
  uint64_t v2 = v1;
  sub_10002A444();
  sub_10002A6F4();
  sub_10002A52C(v3, v4, v5, 1197LL, v6);
  sub_100095648(v2, v0);
  sub_10002A3D4();
}

Swift::Void __swiftcall ChannelPipeline.SynchronousOperations.flush()()
{
}

void sub_1000972A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), void (*a4)(void))
{
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a1 + 48));
  uint64_t v9 = EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  a2,  ObjectType,  v7);
  uint64_t v10 = a3(v9);
  if (v10)
  {
    uint64_t v11 = v10;
    a4();
    sub_10009B134(v11);
  }

  else
  {
    sub_10002A3D4();
  }

void ChannelPipeline.SynchronousOperations.write(_:promise:)()
{
}

void ChannelPipeline.SynchronousOperations.writeAndFlush(_:promise:)()
{
}

void sub_100097340()
{
  uint64_t v3 = sub_10009B2F4(v0, v1, v2);
  sub_10009B41C( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  v4,  v5,  v6,  v3);
  sub_10009B6BC();
  sub_100095734();
  sub_100023E74();
}

void ChannelPipeline.SynchronousOperations.bind(to:promise:)()
{
}

void ChannelPipeline.SynchronousOperations.connect(to:promise:)()
{
}

void ChannelPipeline.SynchronousOperations.register(promise:)(uint64_t a1)
{
}

void ChannelPipeline.SynchronousOperations.triggerUserOutboundEvent(_:promise:)()
{
  uint64_t v2 = v1;
  sub_10002A444();
  sub_10002A6F4();
  sub_10002A52C(v3, v4, v5, 1261LL, v6);
  sub_100095838(v2, v0);
  sub_10002A3D4();
}

uint64_t sub_100097438()
{
  uint64_t v0 = sub_10009B294();
  uint64_t v1 = sub_10009B3B0(v0);
  uint64_t v2 = sub_10009B498(v1);
  uint64_t v4 = v3;
  sub_10002A338();
  uint64_t v5 = sub_10009B634();
  sub_10009B3A0(v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 24));
  return sub_10009B19C(v2);
}

uint64_t sub_100097480()
{
  uint64_t v0 = sub_10009B294();
  uint64_t v1 = sub_10006D350(v0);
  uint64_t v2 = sub_10009B2D4(v1);
  uint64_t v4 = v3;
  sub_10002A338();
  uint64_t v5 = sub_10009B2EC();
  sub_10009B278(v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 40));
  return sub_10009B124(v2);
}

uint64_t sub_1000974D0()
{
  uint64_t v0 = sub_10009B294();
  uint64_t v1 = sub_10006D350(v0);
  uint64_t v2 = sub_10009B2D4(v1);
  uint64_t v4 = v3;
  sub_10002A338();
  uint64_t v5 = sub_10009B2EC();
  sub_10009B278(v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 48));
  return sub_10009B124(v2);
}

uint64_t sub_100097520()
{
  uint64_t v0 = sub_10009B294();
  uint64_t v1 = sub_10006D350(v0);
  uint64_t v2 = sub_10009B2D4(v1);
  uint64_t v4 = v3;
  sub_10002A338();
  uint64_t v5 = sub_10009B2EC();
  sub_10009B278(v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56));
  return sub_10009B124(v2);
}

uint64_t sub_100097570()
{
  uint64_t v0 = sub_10009B294();
  uint64_t v1 = sub_10009B6F0(v0);
  uint64_t v2 = sub_10009B784(v1);
  uint64_t v4 = v3;
  sub_10002A338();
  uint64_t v5 = sub_10009B6D0();
  sub_10009B714(v5, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 64));
  return sub_10009B19C(v2);
}

uint64_t sub_1000975B0()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = sub_10009B294();
  uint64_t v5 = sub_10006D350(v4);
  uint64_t v6 = sub_10009B2D4(v5);
  uint64_t v8 = v7;
  sub_10002A338();
  uint64_t v9 = qword_1001FB220[(char)v3];
  uint64_t v10 = sub_10009B2EC();
  unint64_t v11 = sub_100029C98();
  uint64_t v12 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v11);
  *(void *)uint64_t v13 = v9;
  *(_BYTE *)(v13 + 8) = 3;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 80))(v12, v3, v1, v10, v8);
  swift_errorRelease(v12);
  return swift_unknownObjectRelease(v6);
}

uint64_t sub_100097660()
{
  uint64_t v0 = sub_10009B294();
  uint64_t v1 = sub_10009B6F0(v0);
  uint64_t v2 = sub_10009B784(v1);
  uint64_t v4 = v3;
  sub_10002A338();
  uint64_t v5 = sub_10009B6D0();
  sub_10009B714(v5, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 72));
  return sub_10009B19C(v2);
}

uint64_t sub_1000976A0()
{
  uint64_t v0 = sub_10009B294();
  uint64_t v1 = sub_10006D350(v0);
  uint64_t v2 = sub_10009B2D4(v1);
  uint64_t v4 = v3;
  sub_10002A338();
  uint64_t v5 = sub_10009B2EC();
  sub_10009B278(v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 88));
  return sub_10009B124(v2);
}

uint64_t sub_1000976F0()
{
  return sub_100097438();
}

uint64_t sub_100097704()
{
  return sub_100097480();
}

uint64_t sub_100097718()
{
  return sub_1000974D0();
}

uint64_t sub_10009772C()
{
  return sub_100097520();
}

uint64_t sub_100097740()
{
  return sub_100097570();
}

uint64_t sub_100097754()
{
  return sub_100097660();
}

uint64_t sub_100097768()
{
  return sub_1000975B0();
}

uint64_t sub_10009777C()
{
  return sub_1000976A0();
}

uint64_t sub_100097790()
{
  uint64_t v0 = sub_10009B294();
  uint64_t v1 = sub_10009B3B0(v0);
  uint64_t v2 = sub_10009B498(v1);
  uint64_t v4 = v3;
  sub_10002A338();
  uint64_t v5 = sub_10009B634();
  sub_10009B3A0(v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104));
  return sub_10009B19C(v2);
}

uint64_t sub_1000977D8()
{
  uint64_t v0 = sub_10009B294();
  uint64_t v1 = sub_10009B3B0(v0);
  uint64_t v2 = sub_10009B498(v1);
  uint64_t v4 = v3;
  sub_10002A338();
  uint64_t v5 = sub_10009B634();
  sub_10009B3A0(v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 96));
  return sub_10009B19C(v2);
}

uint64_t sub_100097820()
{
  return sub_1000977D8();
}

uint64_t sub_100097834()
{
  return sub_100097790();
}

void ChannelHandlerContext.remoteAddress.getter()
{
  uint64_t v2 = sub_10009B624();
  uint64_t v3 = sub_10009B740(v2);
  sub_10009B524(v3);
  sub_10009B5EC();
  uint64_t v4 = sub_10002A444();
  sub_10009B708(v4, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16));
  if (v0)
  {
    sub_10002A338();
    sub_10009B694();
    uint64_t v5 = sub_1000175B0(&qword_1002A9710);
    uint64_t v11 = sub_10009B614(v5, v6, v5, (uint64_t)&type metadata for ChannelError, v7, v8, v9, v10, v31, v33, v35);
    if ((_DWORD)v11)
    {
      if (v34 == 3 && v32 == 2)
      {
        sub_10002A47C();
        sub_10009B624();
        uint64_t v21 = v20;
        uint64_t v22 = sub_10002A444();
        (*(void (**)(uint64_t, uint64_t))(v21 + 48))(v22, v21);
        uint64_t v23 = sub_10002A338();
        sub_10009B5FC(v23, v24, v25, v26, v27, v28, v29, v30, v32, v34, v36);
        goto LABEL_11;
      }

      uint64_t v11 = sub_100038470(v32, v34);
    }

    sub_10009B5FC(v11, v12, v13, v14, v15, v16, v17, v18, v32, v34, v36);
    sub_10002A47C();
  }

  else
  {
    sub_10002A338();
  }

void ChannelHandlerContext.localAddress.getter()
{
  uint64_t v2 = sub_10009B624();
  uint64_t v3 = sub_10009B740(v2);
  sub_10009B524(v3);
  sub_10009B5EC();
  uint64_t v4 = sub_10002A444();
  sub_10009B708(v4, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  if (v0)
  {
    sub_10002A338();
    sub_10009B694();
    uint64_t v5 = sub_1000175B0(&qword_1002A9710);
    uint64_t v11 = sub_10009B614(v5, v6, v5, (uint64_t)&type metadata for ChannelError, v7, v8, v9, v10, v31, v33, v35);
    if ((_DWORD)v11)
    {
      if (v34 == 3 && v32 == 2)
      {
        sub_10002A47C();
        sub_10009B624();
        uint64_t v21 = v20;
        uint64_t v22 = sub_10002A444();
        (*(void (**)(uint64_t, uint64_t))(v21 + 40))(v22, v21);
        uint64_t v23 = sub_10002A338();
        sub_10009B5FC(v23, v24, v25, v26, v27, v28, v29, v30, v32, v34, v36);
        goto LABEL_11;
      }

      uint64_t v11 = sub_100038470(v32, v34);
    }

    sub_10009B5FC(v11, v12, v13, v14, v15, v16, v17, v18, v32, v34, v36);
    sub_10002A47C();
  }

  else
  {
    sub_10002A338();
  }

void ChannelHandlerContext.name.getter()
{
}

Swift::Void __swiftcall ChannelHandlerContext.fireChannelRegistered()()
{
}

Swift::Void __swiftcall ChannelHandlerContext.fireChannelUnregistered()()
{
}

void sub_100097A20(void (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v4 = ChannelPipeline.syncOperations.getter();
    a1(v4);
    sub_1000352E0(v2);
  }

  else
  {
    sub_10001945C();
  }

void ChannelHandlerContext.register(promise:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  if (v3)
  {
    ChannelPipeline.syncOperations.getter();
    sub_100095FA0(a1);
    sub_1000352E0(v3);
  }

  else if (a1)
  {
    unint64_t v4 = sub_100029C98();
    uint64_t v5 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v4);
    sub_10008142C(v5, v6);
    sub_10002A3E4();
    sub_10002A620();
    swift_errorRelease(0LL);
  }

  else
  {
    sub_10001945C();
  }

void ChannelHandlerContext.bind(to:promise:)()
{
}

void ChannelHandlerContext.connect(to:promise:)()
{
}

void ChannelHandlerContext.triggerUserOutboundEvent(_:promise:)()
{
  if (v1)
  {
    uint64_t v3 = v2;
    ChannelPipeline.syncOperations.getter();
    sub_100096080(v3, v0);
    sub_10002A598(v1);
  }

  else if (v0)
  {
    unint64_t v4 = sub_100029C98();
    uint64_t v5 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v4);
    sub_10008142C(v5, v6);
    sub_10002A3E4();
    sub_10002A620();
    sub_10009B1A8(0LL);
  }

  else
  {
    sub_1000193B8();
  }

uint64_t ChannelHandlerContext.deinit()
{
  return v0;
}

uint64_t ChannelHandlerContext.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 90LL, 7LL);
}

void sub_100097BA0(uint64_t a1)
{
}

void sub_100097BC0()
{
}

void sub_100097BE0()
{
}

void sub_100097C00()
{
}

void sub_100097C1C()
{
}

void sub_100097C3C()
{
}

void sub_100097C58()
{
}

void sub_100097C78()
{
}

void sub_100097C94()
{
}

void sub_100097CB4()
{
}

void sub_100097CD0()
{
}

void sub_100097CF0()
{
}

void sub_100097D10()
{
}

void sub_100097D30()
{
}

void sub_100097D50()
{
}

void sub_100097D70()
{
}

void sub_100097D90()
{
}

void sub_100097DB0()
{
}

void sub_100097DD0(uint64_t a1)
{
}

uint64_t ChannelPipeline.debugDescription.getter()
{
  uint64_t v2 = sub_1000175B0(&qword_1002A9098);
  uint64_t v3 = sub_100019310(v2, 48LL);
  *(_OWORD *)(v3 + 1sub_100019F7C(v0 + 6) = xmmword_1001F3C00;
  uint64_t v125 = 0LL;
  unint64_t v126 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(20LL);
  v4._object = (void *)0x800000010021B280LL;
  v4._countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v4);
  uint64_t v124 = v0;
  _print_unlocked<A, B>(_:_:)(&v124, &v125);
  v5._countAndFlagsBits = 14941LL;
  v5._object = (void *)0xE200000000000000LL;
  String.append(_:)(v5);
  unint64_t v6 = v126;
  *(void *)(v3 + 3sub_100019F7C(v0 + 2) = v125;
  *(void *)(v3 + 4sub_10006F0B8(12LL, 0) = v6;
  uint64_t v116 = v3;
  uint64_t v7 = sub_1000986B0();
  unint64_t v8 = v7[2];
  uint64_t v122 = v8;
  if (v8)
  {
    sub_100019320();
    uint64_t v9 = (void **)(v7 + 7);
    uint64_t v10 = _swiftEmptyArrayStorage;
    unint64_t v1 = v8;
    do
    {
      uint64_t v12 = (uint64_t)*(v9 - 1);
      uint64_t v11 = *v9;
      Swift::String v119 = *(Swift::String *)(v9 - 3);
      uint64_t v13 = (uint64_t)*(v9 - 3);
      uint64_t v14 = sub_10002A444();
      if (sub_100099EE4(v13, v14, (uint64_t)&protocol descriptor for _ChannelInboundHandler))
      {
        sub_10009B28C();
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
        uint64_t v125 = (uint64_t)v10;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10009B454();
          uint64_t v10 = (void *)v125;
        }

        unint64_t v17 = v10[2];
        unint64_t v16 = v10[3];
        if (v17 >= v16 >> 1)
        {
          sub_10009B54C(v16);
          sub_1000326C4();
          uint64_t v10 = (void *)v125;
        }

        void v10[2] = v17 + 1;
        uint64_t v18 = (Swift::String *)&v10[4 * v17];
        v18[2] = v119;
        v18[3]._countAndFlagsBits = v12;
        v18[3]._object = v11;
      }

      v9 += 4;
      --v1;
    }

    while (v1);
    sub_100019390();
    unint64_t v8 = v122;
  }

  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }

  uint64_t v19 = v10[2];
  if (v19)
  {
    uint64_t v125 = (uint64_t)_swiftEmptyArrayStorage;
    sub_100032690();
    uint64_t v20 = (void *)v125;
    unint64_t v1 = (unint64_t)(v10 + 7);
    do
    {
      uint64_t v21 = *(void *)(v1 - 24);
      uint64_t ObjectType = swift_getObjectType(v21);
      swift_unknownObjectRetain(v21);
      swift_bridgeObjectRetain();
      uint64_t v23 = sub_10009B3FC(ObjectType);
      uint64_t v25 = String.count.getter(v23, v24);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease(v21);
      swift_bridgeObjectRelease();
      char v26 = swift_isUniquelyReferenced_nonNull_native(v20);
      uint64_t v125 = (uint64_t)v20;
      if ((v26 & 1) == 0)
      {
        sub_10009B3C4();
        uint64_t v20 = (void *)v125;
      }

      unint64_t v28 = v20[2];
      unint64_t v27 = v20[3];
      if (v28 >= v27 >> 1)
      {
        sub_10009B54C(v27);
        sub_100032690();
        uint64_t v20 = (void *)v125;
      }

      v20[2] = v28 + 1;
      v20[v28 + 4] = v25;
      v1 += 32LL;
      --v19;
    }

    while (v19);
    sub_10002A51C();
  }

  else
  {
    sub_10002A51C();
    uint64_t v20 = _swiftEmptyArrayStorage;
  }

  uint64_t v29 = sub_1000987E8(v20);
  unint64_t v31 = v30;
  sub_10001EDA0();
  if ((v31 & 1) != 0) {
    Swift::Int v32 = 0LL;
  }
  else {
    Swift::Int v32 = v29;
  }
  Swift::Int count = v32;
  if (v8)
  {
    sub_100019320();
    uint64_t v33 = (void **)(v7 + 7);
    uint64_t v34 = _swiftEmptyArrayStorage;
    unint64_t v1 = v8;
    do
    {
      uint64_t v36 = (uint64_t)*(v33 - 1);
      char v35 = *v33;
      Swift::String v120 = *(Swift::String *)(v33 - 3);
      uint64_t v37 = (uint64_t)*(v33 - 3);
      uint64_t v38 = sub_10002A444();
      if (sub_100099EE4(v37, v38, (uint64_t)&protocol descriptor for _ChannelOutboundHandler))
      {
        sub_10009B28C();
        swift_bridgeObjectRetain();
        char v39 = swift_isUniquelyReferenced_nonNull_native(v34);
        uint64_t v125 = (uint64_t)v34;
        if ((v39 & 1) == 0)
        {
          sub_10009B454();
          uint64_t v34 = (void *)v125;
        }

        unint64_t v41 = v34[2];
        unint64_t v40 = v34[3];
        unint64_t v31 = v41 + 1;
        if (v41 >= v40 >> 1)
        {
          sub_10009B534(v40);
          sub_1000326C4();
          uint64_t v34 = (void *)v125;
        }

        _OWORD v34[2] = v31;
        id v42 = (Swift::String *)&v34[4 * v41];
        v42[2] = v120;
        v42[3]._countAndFlagsBits = v36;
        v42[3]._object = v35;
      }

      v33 += 4;
      --v1;
    }

    while (v1);
    sub_100019390();
  }

  else
  {
    uint64_t v34 = _swiftEmptyArrayStorage;
  }

  char v43 = (void **)v34[2];
  if (v43)
  {
    uint64_t v125 = (uint64_t)_swiftEmptyArrayStorage;
    sub_100032690();
    uint64_t v44 = v125;
    unint64_t v1 = (unint64_t)(v34 + 7);
    uint64_t v45 = v122;
    do
    {
      uint64_t v46 = *(void *)(v1 - 24);
      uint64_t v47 = sub_10009B2EC();
      swift_unknownObjectRetain(v46);
      swift_bridgeObjectRetain();
      uint64_t v48 = sub_10009B3FC(v47);
      uint64_t v50 = String.count.getter(v48, v49);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease(v46);
      swift_bridgeObjectRelease();
      char v51 = swift_isUniquelyReferenced_nonNull_native(v44);
      uint64_t v125 = v44;
      if ((v51 & 1) == 0)
      {
        sub_10009B3C4();
        uint64_t v44 = v125;
      }

      unint64_t v53 = *(void *)(v44 + 16);
      unint64_t v52 = *(void *)(v44 + 24);
      unint64_t v31 = v53 + 1;
      if (v53 >= v52 >> 1)
      {
        sub_10009B534(v52);
        sub_100032690();
        uint64_t v44 = v125;
      }

      *(void *)(v44 + 1sub_100019F7C(v0 + 6) = v31;
      *(void *)(v44 + 8 * v53 + 3sub_100019F7C(v0 + 2) = v50;
      v1 += 32LL;
      char v43 = (void **)((char *)v43 - 1);
    }

    while (v43);
    sub_10002A51C();
  }

  else
  {
    sub_10002A51C();
    uint64_t v44 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v45 = v122;
  }

  Swift::Int v117 = sub_1000987E8((void *)v44);
  uint64_t v55 = v54;
  uint64_t v56 = sub_10001EDA0();
  if ((v55 & 1) != 0)
  {
    if (!v45)
    {
LABEL_80:
      sub_100019390();
      uint64_t v106 = v116;
      unint64_t v107 = *(void *)(v116 + 16);
      if (v107 >= *(void *)(v116 + 24) >> 1)
      {
        sub_10009B484();
        uint64_t v106 = v114;
      }

      *(void *)(v106 + 1sub_100019F7C(v0 + 6) = v107 + 1;
      uint64_t v108 = v106 + 16 * v107;
      strcpy((char *)(v108 + 32), " <no handlers>");
      *(_BYTE *)(v108 + 47) = -18;
      goto LABEL_83;
    }

    Swift::Int v117 = 0LL;
  }

  else if (!v45)
  {
    goto LABEL_80;
  }

  if (__OFSUB__(count, 2LL))
  {
LABEL_86:
    __break(1u);
  }

  else
  {
    unint64_t v1 = 0xE100000000000000LL;
    uint64_t v125 = sub_10009B6FC(v56, v57, count - 2);
    unint64_t v126 = v58;
    swift_bridgeObjectRetain();
    v59._countAndFlagsBits = 0xE29386E2205D495BLL;
    v59._object = (void *)0xAE005D4F5B209186LL;
    String.append(_:)(v59);
    sub_10001A3F8();
    uint64_t v55 = (void *)v125;
    unint64_t v31 = v126;
    uint64_t v60 = v116;
    char v43 = *(void ***)(v116 + 16);
    uint64_t v44 = (uint64_t)v43 + 1;
    char v115 = v7;
  }

  sub_10009B484();
  uint64_t v60 = v113;
LABEL_51:
  *(void *)(v60 + 1sub_100019F7C(v0 + 6) = v44;
  uint64_t v61 = v60;
  uint64_t v62 = v60 + 16LL * (void)v43;
  *(void *)(v62 + 3sub_100019F7C(v0 + 2) = v55;
  *(void *)(v62 + 4sub_10006F0B8(12LL, 0) = v31;
  char v43 = (void **)(v115 + 7);
  do
  {
    uint64_t v123 = v45;
    uint64_t v45 = (uint64_t)*(v43 - 3);
    uint64_t v55 = *v43;
    uint64_t v121 = (uint64_t)*(v43 - 1);
    swift_unknownObjectRetain(v45);
    sub_10001ED74();
    sub_10002EC18();
    uint64_t v64 = v63;
    unint64_t v31 = *(void *)(v63 + 16);
    uint64_t v44 = v31 + 1;
    if (v31 >= *(void *)(v63 + 24) >> 1)
    {
      sub_10009B1EC();
      uint64_t v64 = v97;
    }

    *(void *)(v64 + 1sub_100019F7C(v0 + 6) = v44;
    unint64_t v65 = v64 + 16 * v31;
    *(void *)(v65 + 3sub_100019F7C(v0 + 2) = 32LL;
    *(void *)(v65 + 4sub_10006F0B8(12LL, 0) = v1;
    uint64_t v66 = sub_10009B5A4();
    if (sub_100099EE4(v45, v66, (uint64_t)&protocol descriptor for _ChannelInboundHandler))
    {
      uint64_t v44 = sub_10009B5A4();
      uint64_t v67 = sub_10009B3FC(v44);
      unint64_t v31 = v68;
      uint64_t v69 = String.count.getter(v67, v68);
      uint64_t v70 = swift_bridgeObjectRelease();
      if (__OFSUB__(count, v69))
      {
        __break(1u);
LABEL_85:
        __break(1u);
        goto LABEL_86;
      }

      sub_10009B6FC(v70, v71, count - v69);
      sub_10009B5CC();
      if (v72)
      {
        sub_10009B204();
        uint64_t v64 = v104;
      }

      sub_10009B3DC();
    }

    else
    {
      v73._countAndFlagsBits = 32LL;
      v73._object = (void *)0xE100000000000000LL;
      String.init(repeating:count:)(v73, count);
    }

    sub_10009B50C();
    if (v72)
    {
      sub_10009B1EC();
      uint64_t v64 = v102;
    }

    sub_10009B4E0();
    if (v72)
    {
      sub_10009B204();
      uint64_t v64 = v98;
    }

    *(void *)(v64 + 1sub_100019F7C(v0 + 6) = v31;
    uint64_t v74 = v64 + 16 * v44;
    *(void *)(v74 + 3sub_100019F7C(v0 + 2) = 0x209186E29386E220LL;
    *(void *)(v74 + 4sub_10006F0B8(12LL, 0) = 0xA800000000000000LL;
    uint64_t v75 = sub_10009B5A4();
    if (sub_100099EE4(v45, v75, (uint64_t)&protocol descriptor for _ChannelOutboundHandler))
    {
      uint64_t v76 = sub_10009B5A4();
      sub_10009B3FC(v76);
      sub_10009B5CC();
      if (v72)
      {
        sub_10009B204();
        uint64_t v64 = v105;
      }

      uint64_t v77 = sub_10009B3DC();
      uint64_t v44 = v78;
      unint64_t v31 = String.count.getter(v77, v78);
      sub_10001EDA0();
      Swift::Int v79 = v117 - v31;
      if (__OFSUB__(v117, v31)) {
        goto LABEL_85;
      }
      uint64_t v80 = 32LL;
      unint64_t v81 = 0xE100000000000000LL;
    }

    else
    {
      uint64_t v80 = 32LL;
      unint64_t v81 = 0xE100000000000000LL;
      Swift::Int v79 = v117;
    }

    String.init(repeating:count:)(*(Swift::String *)&v80, v79);
    sub_10009B50C();
    if (v72)
    {
      sub_10009B1EC();
      uint64_t v64 = v103;
    }

    sub_10009B4E0();
    unint64_t v1 = 0xE100000000000000LL;
    if (v72)
    {
      sub_10009B204();
      uint64_t v64 = v99;
    }

    *(void *)(v64 + 1sub_100019F7C(v0 + 6) = v31;
    uint64_t v82 = v64 + 16 * v44;
    *(void *)(v82 + 3sub_100019F7C(v0 + 2) = 32LL;
    *(void *)(v82 + 4sub_10006F0B8(12LL, 0) = 0xE100000000000000LL;
    uint64_t v125 = 91LL;
    unint64_t v126 = 0xE100000000000000LL;
    sub_10001ED74();
    v83._countAndFlagsBits = v121;
    v83._object = v55;
    String.append(_:)(v83);
    sub_10001A3F8();
    v84._countAndFlagsBits = 93LL;
    v84._object = (void *)0xE100000000000000LL;
    String.append(_:)(v84);
    uint64_t v85 = v125;
    unint64_t v86 = v126;
    unint64_t v87 = *(void *)(v64 + 16);
    if (v87 >= *(void *)(v64 + 24) >> 1)
    {
      sub_10009B1EC();
      uint64_t v64 = v100;
    }

    *(void *)(v64 + 1sub_100019F7C(v0 + 6) = v87 + 1;
    uint64_t v88 = v64 + 16 * v87;
    *(void *)(v88 + 3sub_100019F7C(v0 + 2) = v85;
    *(void *)(v88 + 4sub_10006F0B8(12LL, 0) = v86;
    uint64_t v125 = v64;
    uint64_t v89 = sub_1000175B0(&qword_1002A93B8);
    unint64_t v90 = sub_10007D714();
    uint64_t v91 = BidirectionalCollection<>.joined(separator:)(0LL, 0xE000000000000000LL, v89, v90);
    uint64_t v93 = v92;
    swift_bridgeObjectRelease();
    uint64_t v94 = v61;
    unint64_t v95 = *(void *)(v61 + 16);
    if (v95 >= *(void *)(v61 + 24) >> 1)
    {
      sub_10002EC18();
      uint64_t v94 = v101;
    }

    v43 += 4;
    *(void *)(v94 + 1sub_100019F7C(v0 + 6) = v95 + 1;
    uint64_t v61 = v94;
    unint64_t v96 = v94 + 16 * v95;
    *(void *)(v96 + 3sub_100019F7C(v0 + 2) = v91;
    *(void *)(v96 + 4sub_10006F0B8(12LL, 0) = v93;
    sub_10001A3F8();
    swift_unknownObjectRelease(v45);
    uint64_t v45 = v123 - 1;
  }

  while (v123 != 1);
  swift_bridgeObjectRelease();
  uint64_t v106 = v61;
LABEL_83:
  uint64_t v125 = v106;
  uint64_t v109 = sub_1000175B0(&qword_1002A93B8);
  unint64_t v110 = sub_10007D714();
  uint64_t v111 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v109, v110);
  sub_100019390();
  return v111;
}

void *sub_1000986B0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = v0;
  uint64_t v3 = *(void **)(v1 + 16);
  swift_retain();
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  Swift::String v4 = _swiftEmptyArrayStorage;
  while (1)
  {
    Swift::String v5 = *(void **)(v2 + 24);
    if (v5 && v3 == v5) {
      break;
    }
    ChannelHandlerContext.handler.getter();
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    uint64_t v12 = v3[5];
    uint64_t v11 = v3[6];
    swift_retain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
    {
      sub_10002F928();
      Swift::String v4 = v16;
    }

    unint64_t v13 = v4[2];
    if (v13 >= v4[3] >> 1)
    {
      sub_10002F928();
      Swift::String v4 = v17;
    }

    void v4[2] = v13 + 1;
    uint64_t v14 = &v4[4 * v13];
    void v14[4] = v8;
    v14[5] = v10;
    v14[6] = v12;
    v14[7] = v11;
    swift_release();
    uint64_t v15 = (void *)v3[2];
    swift_retain();
    swift_release();
    uint64_t v3 = v15;
    if (!v15) {
      return v4;
    }
  }

  swift_release();
  return v4;
}

uint64_t sub_1000987E8(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return 0LL;
  }
  uint64_t result = a1[4];
  uint64_t v4 = v1 - 1;
  if (v1 != 1)
  {
    Swift::String v5 = a1 + 5;
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if (result <= v7) {
        uint64_t result = v6;
      }
      --v4;
    }

    while (v4);
  }

  return result;
}

void ChannelPipeline.handler<A>(type:)()
{
  uint64_t v4 = sub_100019310((uint64_t)&unk_10027DFF8, 32LL);
  *(void *)(v4 + 1sub_100019F7C(v0 + 6) = v1;
  *(void *)(v4 + 2sub_100019F7C(v0 + 4) = v0;
  sub_10002A6F4();
  EventLoopFuture.map<A>(file:line:_:)(v5, v6, v7, 1932LL, v8, v4, v1);
  sub_100024F0C();
  sub_10002A5A4();
  sub_1000193B8();
}

uint64_t sub_1000988A0@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  v9[0] = v4;
  v9[1] = v5;
  uint64_t v6 = sub_1000175B0(&qword_1002AC970);
  uint64_t result = swift_dynamicCast(&v8, v9, v6, a1, 6LL);
  if ((result & 1) != 0) {
    *a2 = v8;
  }
  else {
    __break(1u);
  }
  return result;
}

void sub_100098910(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(a1);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v15 + 16))(v14, v16);
  if (swift_getEnumCaseMultiPayload(v14, a2) == 1)
  {
    (*(void (**)(uint64_t, char *, void))(*(void *)(*(void *)(a2 + 24) - 8LL) + 32LL))( a4,  v14,  *(void *)(a2 + 24));
    uint64_t v17 = 1LL;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v14, v8);
    a1(v12);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    uint64_t v17 = 0LL;
  }

  uint64_t v18 = type metadata accessor for Result(0LL, a3);
  swift_storeEnumTagMultiPayload(a4, v18, v17);
  sub_10002A580();
}

uint64_t sub_100098A50()
{
  return ChannelPipeline.debugDescription.getter();
}

#error "100098AF8: call analysis failed (funcsize=46)"
#error "100098BA0: call analysis failed (funcsize=36)"
#error "100098C3C: call analysis failed (funcsize=36)"
void sub_100098C6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  sub_10009B384();
  uint64_t v0 = sub_10002A444();
  if ((sub_10009B1B4(v0) & 1) != 0)
  {
    uint64_t v1 = sub_10009B664();
    sub_1001A9494(v1, v2, v3);
    sub_10009B170();
    uint64_t v4 = sub_10009B180();
    sub_10009B1C0(v4);
  }

  else
  {
    sub_10009B680();
    uint64_t v5 = sub_100019310((uint64_t)&unk_10027E4E0, 41LL);
    uint64_t v6 = sub_10009B2E0(v5);
    sub_10009B6A0(v6, v7, &qword_1002AEBF0, v8);
    uint64_t v9 = sub_10009B6A8();
    sub_10009AD40(v9, v10, v11);
    sub_10002A4C8();
    sub_10009B5AC((uint64_t)sub_10009AD34);
    sub_10009B4FC();
    sub_1000193DC();
  }

uint64_t sub_100098D08(uint64_t a1, char a2, uint64_t a3)
{
  int v5 = a2 & 1;
  uint64_t v6 = *(void *)(a3 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 32));
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(ObjectType, v6) & 1) != 0)
  {
    sub_1001A94D0(a1, v5);
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    CallbackList._run()();
    sub_100034E8C(v9, v11);
    return swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v15 = a1;
    BOOL v16 = v5 != 0;
    uint64_t v13 = swift_allocObject(&unk_10027E5F8, 33LL, 7LL);
    *(void *)(v13 + 1sub_100019F7C(v0 + 6) = a3;
    sub_1000390C8((uint64_t)&v15, v13 + 24, &qword_1002AE8F0);
    uint64_t v14 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v6 + 24);
    sub_10009AF58(a1, v5);
    swift_retain();
    v14(sub_10009AF4C, v13, ObjectType, v6);
    return swift_release(v13);
  }

uint64_t sub_100098E30(uint64_t a1, char a2, uint64_t a3)
{
  int v5 = a2 & 1;
  uint64_t v6 = *(void *)(a3 + 40);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 32));
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(ObjectType, v6) & 1) != 0)
  {
    sub_1001A94D0(a1, v5);
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    CallbackList._run()();
    sub_100034E8C(v9, v11);
    return swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v15 = a1;
    BOOL v16 = v5 != 0;
    uint64_t v13 = swift_allocObject(&unk_10027E5D0, 33LL, 7LL);
    *(void *)(v13 + 1sub_100019F7C(v0 + 6) = a3;
    sub_1000390C8((uint64_t)&v15, v13 + 24, &qword_1002AE8F0);
    uint64_t v14 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v6 + 24);
    sub_10009AF58(a1, v5);
    swift_retain();
    v14(sub_10009AF4C, v13, ObjectType, v6);
    return swift_release(v13);
  }

#error "100098FC4: call analysis failed (funcsize=36)"
void sub_100098FF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  sub_10009B384();
  uint64_t v0 = sub_10002A444();
  if ((sub_10009B1B4(v0) & 1) != 0)
  {
    uint64_t v1 = sub_10009B664();
    sub_1001A94F8(v1, v2, v3);
    sub_10009B170();
    uint64_t v4 = sub_10009B180();
    sub_10009B1C0(v4);
  }

  else
  {
    sub_10009B680();
    int v5 = sub_100019310((uint64_t)&unk_10027E440, 41LL);
    uint64_t v6 = sub_10009B2E0(v5);
    sub_10009B6A0(v6, v7, &qword_1002AEBD0, v8);
    uint64_t v9 = sub_10009B6A8();
    sub_10009A878(v9, v10, v11);
    sub_10002A4C8();
    sub_10009B5AC((uint64_t)sub_10009A86C);
    sub_10009B4FC();
    sub_1000193DC();
  }

void sub_100099090()
{
  unint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = sub_10002A444();
  if ((sub_10009B1B4(v8) & 1) != 0)
  {
    sub_1001A9618(v5, v3, v1 & 0xFFFFFFFFFFFFFFLL | ((HIBYTE(v1) & 1) << 56));
    sub_10009B170();
    uint64_t v9 = sub_10009B180();
    sub_10009B1C0(v9);
  }

  else
  {
    uint64_t v10 = sub_100019310((uint64_t)&unk_10027E580, 48LL);
    uint64_t v11 = sub_10009B2E0(v10);
    sub_10009B6A0(v11, v12, &qword_1002AEC10, v13);
    uint64_t v14 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v7 + 24);
    sub_10009AEA0(v5, v3, v1, HIBYTE(v1) & 1);
    sub_10002A4C8();
    v14(sub_10009AE94, v10, v8, v7);
    sub_10009B770();
    sub_1000193DC();
  }

#error "1000991E4: call analysis failed (funcsize=36)"
uint64_t sub_100099214(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t (*)(), uint64_t, uint64_t, uint64_t);
  void v15[3];
  int v16;
  __int16 v17;
  char v18;
  char v19;
  uint64_t v9 = *(void *)(a5 + 56);
  uint64_t v10 = sub_10002A444();
  if ((sub_10009B1B4(v10) & 1) != 0)
  {
    sub_1001A971C(a1, a2, a3, a4 & 0xFFFFFFFFFFFFFFLL | ((HIBYTE(a4) & 1) << 56));
    sub_10009B170();
    sub_10009B180();
    return swift_bridgeObjectRelease();
  }

  else
  {
    v15[0] = a1;
    v15[1] = a2;
    __int128 v15[2] = a3;
    BOOL v16 = a4;
    uint64_t v18 = BYTE6(a4);
    uint64_t v17 = WORD2(a4);
    uint64_t v19 = HIBYTE(a4) & 1;
    uint64_t v12 = sub_100019310((uint64_t)&unk_10027E530, 56LL);
    sub_10009B2E0(v12);
    sub_1000390C8((uint64_t)v15, v13, &qword_1002AEC00);
    uint64_t v14 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v9 + 24);
    sub_10009ADD8(a1, a2, a3, a4, HIBYTE(a4) & 1);
    sub_10002A4C8();
    v14(sub_10009ADCC, v12, v10, v9);
    return swift_release();
  }

#error "1000993C4: call analysis failed (funcsize=36)"
#error "100099460: call analysis failed (funcsize=36)"
uint64_t sub_100099490(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1000995A8(a1, a2, a3, (void (*)(uint64_t, void))sub_1001A93A0);
}

uint64_t sub_10009949C( uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(uint64_t, uint64_t, void))
{
  uint64_t v5 = sub_10009B180();
  return sub_10009B43C(v5);
}

uint64_t sub_1000994D4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  CallbackList._run()();
  sub_100034E8C(v5, v7);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10009953C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  CallbackList._run()();
  sub_100034E8C(v6, v8);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000995A8(uint64_t a1, uint64_t a2, char a3, void (*a4)(uint64_t, void))
{
  uint64_t v4 = sub_10009B180();
  return sub_10009B43C(v4);
}

uint64_t sub_1000995DC(uint64_t a1, uint64_t a2)
{
  return sub_1000995A8(a1, *(void *)a2, *(_BYTE *)(a2 + 8), (void (*)(uint64_t, void))sub_1001A9480);
}

uint64_t sub_100099604(uint64_t a1, uint64_t a2)
{
  return sub_10009949C( a1,  *(void *)a2,  *(void *)(a2 + 8),  *(_BYTE *)(a2 + 16),  (void (*)(uint64_t, uint64_t, void))sub_1001A9494);
}

uint64_t sub_10009962C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = swift_allocObject(a5, 90LL, 7LL);
  return sub_100099698(a1, a2, a3, a4, v9);
}

uint64_t sub_100099698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_WORD *)(a5 + sub_100081CEC(v0 + 88) = 0;
  *(void *)(a5 + 4sub_10006F0B8(12LL, 0) = a1;
  *(void *)(a5 + 48) = a2;
  *(void *)(a5 + 3sub_100019F7C(v0 + 2) = a4;
  uint64_t ObjectType = swift_getObjectType(a3);
  uint64_t v9 = sub_100099EE4(a3, ObjectType, (uint64_t)&protocol descriptor for _ChannelInboundHandler);
  if (v9)
  {
    uint64_t v10 = v8;
    swift_unknownObjectRetain(a3);
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  *(void *)(a5 + 5sub_100019F7C(v0 + 6) = v9;
  *(void *)(a5 + 6sub_100019F7C(v0 + 4) = v10;
  uint64_t v11 = swift_getObjectType(a3);
  uint64_t result = sub_100099EE4(a3, v11, (uint64_t)&protocol descriptor for _ChannelOutboundHandler);
  if (!result)
  {
    swift_unknownObjectRelease(a3);
    uint64_t result = 0LL;
    uint64_t v13 = 0LL;
  }

  *(void *)(a5 + 7sub_100019F7C(v0 + 2) = result;
  *(void *)(a5 + 8sub_10006F0B8(12LL, 0) = v13;
  *(void *)(a5 + 1sub_100019F7C(v0 + 6) = 0LL;
  *(void *)(a5 + 2sub_100019F7C(v0 + 4) = 0LL;
  if (*(void *)(a5 + 56) | result) {
    return a5;
  }
  __break(1u);
  return result;
}

uint64_t sub_100099754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = swift_allocObject(a2, 80LL, 7LL);
  return sub_1000997C8(a1, v7, a3, a4);
}

void sub_1000997A0()
{
}

uint64_t sub_1000997C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a2 + 3sub_100019F7C(v0 + 2) = 0LL;
  *(_BYTE *)(a2 + 4sub_10006F0B8(12LL, 0) = 0;
  *(void *)(a2 + 6sub_100019F7C(v0 + 4) = a1;
  *(void *)(a2 + 7sub_100019F7C(v0 + 2) = a4;
  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v8 = *(void *)(a4 + 8);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 80);
  swift_unknownObjectRetain(a1);
  *(void *)(a2 + 48) = v9(ObjectType, v8);
  *(void *)(a2 + 5sub_100019F7C(v0 + 6) = v10;
  uint64_t v11 = type metadata accessor for HeadChannelHandler();
  *(void *)(a2 + 1sub_100019F7C(v0 + 6) = 0LL;
  *(void *)(a2 + 2sub_100019F7C(v0 + 4) = 0LL;
  uint64_t inited = swift_initStaticObject(v11, &unk_1002A8E40);
  uint64_t v13 = type metadata accessor for ChannelHandlerContext();
  uint64_t v14 = swift_allocObject(v13, 90LL, 7LL);
  swift_retain();
  *(void *)(a2 + 1sub_100019F7C(v0 + 6) = sub_1001ADBE8(1684104552LL, 0xE400000000000000LL, inited, a2, v14);
  swift_release();
  uint64_t v15 = type metadata accessor for TailChannelHandler();
  uint64_t v16 = swift_initStaticObject(v15, &unk_1002A8E58);
  uint64_t v17 = swift_allocObject(v13, 90LL, 7LL);
  swift_retain();
  uint64_t v18 = sub_1001ADBE8(1818845556LL, 0xE400000000000000LL, v16, a2, v17);
  swift_unknownObjectRelease(a1);
  *(void *)(a2 + 2sub_100019F7C(v0 + 4) = v18;
  swift_release();
  if (*(void *)(a2 + 16))
  {
    *(void *)(*(void *)(a2 + 16) + 16LL) = *(void *)(a2 + 24);
    swift_retain();
    swift_release();
  }

  uint64_t v19 = *(void *)(a2 + 24);
  if (v19)
  {
    *(void *)(v19 + 2sub_100019F7C(v0 + 4) = *(void *)(a2 + 16);
    swift_retain();
    swift_release();
  }

  return a2;
}

void sub_100099954()
{
}

uint64_t sub_100099990(uint64_t a1, uint64_t a2)
{
  return sub_1000995A8(a1, *(void *)a2, *(_BYTE *)(a2 + 8), (void (*)(uint64_t, void))sub_1001A94D0);
}

uint64_t sub_1000999B8(uint64_t a1, uint64_t a2)
{
  return sub_1000995A8(a1, *(void *)a2, *(_BYTE *)(a2 + 8), (void (*)(uint64_t, void))sub_1001A94E4);
}

uint64_t sub_1000999E0(uint64_t a1, uint64_t a2)
{
  return sub_10009949C( a1,  *(void *)a2,  *(void *)(a2 + 8),  *(_BYTE *)(a2 + 16),  (void (*)(uint64_t, uint64_t, void))sub_1001A94F8);
}

uint64_t sub_100099A08()
{
  uint64_t v45 = v0;
  uint64_t v46 = v1;
  uint64_t v3 = v2;
  uint64_t v34 = v4;
  uint64_t v6 = v5;
  unint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(v5 + 56);
  uint64_t v18 = sub_10002A444();
  if ((sub_10009B250(v18) & 1) != 0)
  {
    uint64_t v19 = sub_10009A194(v16, v14, v12, v10, v8, v6);
    char v21 = v20 & 1;
    LOBYTE(v3sub_100019F7C(v0 + 6) = v20 & 1;
    EventLoop.makeCompletedFuture<A>(_:)( (uint64_t)&v35,  v18,  (uint64_t)&type metadata for () + 8,  v17,  v22,  v23,  v24,  v25,  v33,  v34,  v19,  v36,  v37,  v38,  v39,  v40,  v41,  v42,  v43,  v44);
    uint64_t v27 = v26;
    sub_100034F08(v19, v21);
  }

  else
  {
    unint64_t v28 = (void *)sub_100019310((uint64_t)&unk_10027E620, 72LL);
    uint64_t v29 = v3;
    unint64_t v30 = v28;
    v28[2] = v6;
    v28[3] = v16;
    v28[4] = v29;
    v28[5] = v14;
    v28[6] = v12;
    v28[7] = v10;
    v28[8] = v8;
    unint64_t v31 = *(uint64_t (**)(void (*)(), void *, char *, uint64_t, uint64_t))(v17 + 32);
    swift_bridgeObjectRetain();
    sub_10001EDE0();
    swift_unknownObjectRetain(v16);
    sub_10006AC2C(v10, v8);
    uint64_t v27 = v31(sub_10009AFB0, v30, (char *)&type metadata for () + 8, v18, v17);
    sub_10009B4FC();
  }

  return v27;
}

uint64_t type metadata accessor for ChannelHandlerContext()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService21ChannelHandlerContext);
}

uint64_t sub_100099B70()
{
  uint64_t v1 = sub_100041B64();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100099B94()
{
  return sub_100094D58(v0[2], v0[3], v0[4]);
}

uint64_t sub_100099BA0()
{
  return sub_100099F58( (void (*)(void))&_swift_release,  (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100099BB4()
{
  return sub_100094E8C(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

unint64_t sub_100099BC0()
{
  unint64_t result = qword_1002AE8E8;
  if (!qword_1002AE8E8)
  {
    unint64_t result = swift_getWitnessTable( protocol conformance descriptor for ChannelPipelineError,  &type metadata for ChannelPipelineError);
    atomic_store(result, (unint64_t *)&qword_1002AE8E8);
  }

  return result;
}

uint64_t sub_100099BFC()
{
  uint64_t v0 = sub_10009B654();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100099C1C()
{
  return sub_100095024(*(void *)(v0 + 32));
}

uint64_t sub_100099C2C()
{
  uint64_t v1 = sub_100041B64();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100099C54()
{
  return sub_100096A38(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

void sub_100099C74()
{
}

uint64_t sub_100099C84()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_100099CB0()
{
}

void sub_100099CBC()
{
}

void sub_100099CE8()
{
}

void sub_100099D18()
{
}

uint64_t sub_100099D44()
{
  int v1 = *(unsigned __int8 *)(v0 + 80);
  if (v1 == 2)
  {
    sub_10009B564();
  }

  else if (v1 == 1)
  {
    sub_100085134(*(void *)(v0 + 24));
    sub_10009B434();
    if (*(_BYTE *)(v0 + 56) != 4LL)
    {
      uint64_t v2 = *(void *)(v0 + 64);
      if ((~v2 & 0xF000000000000007LL) != 0) {
        sub_100085134(v2);
      }
    }
  }

  else if (!*(_BYTE *)(v0 + 80))
  {
    sub_10009B314();
  }

  swift_release();
  return swift_deallocObject(v0, 96LL, 7LL);
}

void sub_100099DC0()
{
}

void sub_100099DF0()
{
}

uint64_t sub_100099E18()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_100099E3C()
{
}

uint64_t sub_100099E64()
{
  return sub_10009A15C((void (*)(void))&_swift_release);
}

void sub_100099E70()
{
}

uint64_t sub_100099E90()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

void sub_100099EBC()
{
}

uint64_t sub_100099EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (swift_conformsToProtocol2(a2, a3)) {
    return a1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100099F18()
{
  return sub_10009A15C((void (*)(void))&_swift_release);
}

void sub_100099F24()
{
}

uint64_t sub_100099F44()
{
  return sub_100099F58( (void (*)(void))&_swift_unknownObjectRelease,  (void (*)(void))&_swift_release);
}

uint64_t sub_100099F58(void (*a1)(void), void (*a2)(void))
{
  uint64_t v5 = sub_100041B64();
  return swift_deallocObject(v5, v6, v7);
}

uint64_t sub_100099F98()
{
  return sub_100094A5C(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100099FA4()
{
  uint64_t v0 = sub_100041B64();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100099FCC()
{
  return sub_100094AEC(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100099FD8(uint64_t a1)
{
  return sub_100095080(a1, *(void *)(v1 + 16));
}

void sub_100099FE0()
{
}

void sub_10009A008()
{
}

void sub_10009A030()
{
}

void sub_10009A058()
{
}

uint64_t sub_10009A080()
{
  int v1 = *(unsigned __int8 *)(v0 + 80);
  if (v1 == 2)
  {
    sub_10009B564();
  }

  else if (v1 == 1)
  {
    sub_100085134(*(void *)(v0 + 24));
    sub_10009B434();
    if (*(_BYTE *)(v0 + 56) != 4LL)
    {
      uint64_t v2 = *(void *)(v0 + 64);
      if ((~v2 & 0xF000000000000007LL) != 0) {
        sub_100085134(v2);
      }
    }
  }

  else if (!*(_BYTE *)(v0 + 80))
  {
    sub_10009B314();
  }

  return swift_deallocObject(v0, 81LL, 7LL);
}

uint64_t sub_10009A0F4()
{
  return sub_100095370(*(void *)(v0 + 16), v0 + 24);
}

void sub_10009A100()
{
}

uint64_t sub_10009A128()
{
  uint64_t v0 = sub_10009B654();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10009A144()
{
  return sub_10009551C(*(void *)(v0 + 16), v0 + 24);
}

uint64_t sub_10009A150()
{
  return sub_10009A15C((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10009A15C(void (*a1)(void))
{
  return sub_10009B270(v1, 32LL, 7LL);
}

uint64_t sub_10009A18C()
{
  return sub_100095604(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10009A194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(a6 + 56);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a6 + 48));
  uint64_t result = EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  198LL,  ObjectType,  v12);
  if (*(_BYTE *)(a6 + 40) == 1)
  {
    unint64_t v15 = sub_100029C98();
    uint64_t v16 = swift_allocError(&type metadata for ChannelError, v15, 0LL, 0LL);
    *(void *)uint64_t v17 = 2LL;
    *(_BYTE *)(v17 + 8) = 3;
    return v16;
  }

  if (!(a5 >> 62))
  {
    swift_retain();
    sub_10006AC2C(a4, a5);
    uint64_t v18 = (void (*)(uint64_t, uint64_t))sub_10009B110;
    uint64_t v19 = a2;
    uint64_t v20 = a3;
    uint64_t v21 = a1;
    uint64_t v22 = a4;
    uint64_t v23 = a5;
    goto LABEL_7;
  }

  if (a5 >> 62 == 1)
  {
    swift_retain();
    sub_10006AC2C(a4, a5);
    uint64_t v18 = (void (*)(uint64_t, uint64_t))sub_10009AEAC;
    uint64_t v19 = a2;
    uint64_t v20 = a3;
    uint64_t v21 = a1;
    uint64_t v22 = a4;
    uint64_t v23 = a5 & 0x3FFFFFFFFFFFFFFFLL;
LABEL_7:
    uint64_t v16 = sub_10009A8F8(v19, v20, v21, v22, v23, v18, a6, a6);
    swift_release(a6);
    sub_10006ABF8(a4, a5);
    return v16;
  }

  if (a4 | a5 ^ 0x8000000000000000LL)
  {
    uint64_t v24 = *(void *)(a6 + 24);
    if (v24)
    {
      swift_retain();
      swift_retain();
      uint64_t v25 = (void (*)(uint64_t, uint64_t))sub_10009AEB0;
      goto LABEL_13;
    }
  }

  else
  {
    uint64_t v24 = *(void *)(a6 + 16);
    if (v24)
    {
      swift_retain();
      swift_retain();
      uint64_t v25 = (void (*)(uint64_t, uint64_t))sub_10009B114;
LABEL_13:
      uint64_t v16 = sub_10009AAC0(a2, a3, a1, v24, v25, a6, a6);
      swift_release(v24);
      swift_release(a6);
      return v16;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_10009A3B8@<X0>(void *a1@<X8>)
{
  return sub_1000988A0(*(void *)(v1 + 16), a1);
}

uint64_t sub_10009A3D0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_10009A3E4()
{
  unint64_t result = qword_1002AE8F8;
  if (!qword_1002AE8F8)
  {
    unint64_t result = swift_getWitnessTable( protocol conformance descriptor for ChannelPipelineError,  &type metadata for ChannelPipelineError);
    atomic_store(result, (unint64_t *)&qword_1002AE8F8);
  }

  return result;
}

uint64_t type metadata accessor for ChannelPipeline()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService15ChannelPipeline);
}

void type metadata accessor for ChannelPipeline.SynchronousOperations()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for ChannelPipeline.Position(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  sub_10006AC2C(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for ChannelPipeline.Position(uint64_t *a1)
{
  return sub_10006ABF8(*a1, a1[1]);
}

uint64_t *assignWithCopy for ChannelPipeline.Position(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  sub_10006AC2C(*a2, v4);
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_10006ABF8(v5, v6);
  return a1;
}

uint64_t *assignWithTake for ChannelPipeline.Position(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10006ABF8(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ChannelPipeline.Position(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7E && *(_BYTE *)(a1 + 16))
    {
      unsigned int v2 = *(_DWORD *)a1 + 125;
    }

    else
    {
      unsigned int v2 = (((*(void *)(a1 + 8) >> 57) >> 5) | (4
                                                              * ((*(void *)(a1 + 8) >> 57) & 0x18 | *(void *)(a1 + 8) & 7))) ^ 0x7F;
      if (v2 >= 0x7D) {
        unsigned int v2 = -1;
      }
    }
  }

  else
  {
    unsigned int v2 = -1;
  }

  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for ChannelPipeline.Position( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)unint64_t result = a2 - 126;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7E) {
      *(_BYTE *)(result + 1sub_100019F7C(v0 + 6) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7E) {
      *(_BYTE *)(result + 1sub_100019F7C(v0 + 6) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)unint64_t result = 0LL;
      *(void *)(result + 8) = (v3 | (v3 << 57)) & 0xF000000000000007LL;
    }
  }

  return result;
}

uint64_t sub_10009A5B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8) >> 62;
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_10009A5D0(uint64_t result)
{
  *(void *)(result + 8) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

void *sub_10009A5E0(void *result, uint64_t a2)
{
  if (a2 < 2)
  {
    result[1] = result[1] & 0xFFFFFFFFFFFFFF8LL | (a2 << 62);
  }

  else
  {
    *unint64_t result = (a2 - 2);
    result[1] = 0x8000000000000000LL;
  }

  return result;
}

void type metadata accessor for ChannelPipeline.Position()
{
}

uint64_t type metadata accessor for HeadChannelHandler()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService18HeadChannelHandler);
}

uint64_t type metadata accessor for TailChannelHandler()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService18TailChannelHandler);
}

uint64_t storeEnumTagSinglePayload for ChannelPipelineError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(vsub_100019F7C(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100019F7C(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10009A6A0 + 4 * byte_1001FAF35[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10009A6D4 + 4 * byte_1001FAF30[v4]))();
}

uint64_t sub_10009A6D4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009A6DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10009A6E4LL);
  }
  return result;
}

uint64_t sub_10009A6F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10009A6F8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10009A6FC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009A704(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ChannelPipelineError()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for ChannelHandlerContext.RemovalToken(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  swift_retain(v3);
  return a1;
}

uint64_t *assignWithCopy for ChannelHandlerContext.RemovalToken(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v3);
  return a1;
}

uint64_t *assignWithTake for ChannelHandlerContext.RemovalToken(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for ChannelHandlerContext.RemovalToken(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      uint64_t v3 = *a1;
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ChannelHandlerContext.RemovalToken( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }

  return result;
}

void type metadata accessor for ChannelHandlerContext.RemovalToken()
{
}

uint64_t sub_10009A860()
{
  return sub_10009AD00((void (*)(void, void, void))sub_100034DB8);
}

uint64_t sub_10009A86C()
{
  return sub_1000999E0(*(void *)(v0 + 16), v0 + 24);
}

uint64_t sub_10009A878(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_errorRetain(a1);
  }
  else {
    return swift_unknownObjectRetain(a1);
  }
}

uint64_t sub_10009A884()
{
  return sub_10009A8A8((uint64_t (*)(void))&_swift_release);
}

uint64_t sub_10009A890()
{
  return sub_1000995DC(*(void *)(v0 + 16), v0 + 24);
}

uint64_t sub_10009A89C()
{
  return sub_10009A8A8((uint64_t (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10009A8A8(uint64_t (*a1)(void))
{
  return sub_10009B270(v1, 33LL, 7LL);
}

uint64_t sub_10009A8E0()
{
  return sub_1000999B8(*(void *)(v0 + 16), v0 + 24);
}

uint64_t sub_10009A8EC(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRetain(a1);
  }
  else {
    return swift_bridgeObjectRetain(a1);
  }
}

uint64_t sub_10009A8F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t), uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *(void *)(a8 + 56);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a8 + 48));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  248LL,  ObjectType,  v15);
  if (*(_BYTE *)(a8 + 40) == 1)
  {
    unint64_t v17 = sub_100029C98();
    uint64_t v18 = swift_allocError(&type metadata for ChannelError, v17, 0LL, 0LL);
    *(void *)uint64_t v19 = 2LL;
    *(_BYTE *)(v19 + 8) = 3;
    return v18;
  }

  uint64_t v20 = *(void *)(a8 + 16);
  if (!v20)
  {
LABEL_13:
    unint64_t v27 = sub_100099BC0();
    uint64_t v18 = swift_allocError(&type metadata for ChannelPipelineError, v27, 0LL, 0LL);
    *unint64_t v28 = 1;
    return v18;
  }

  uint64_t v21 = *(void *)(v20 + 16);
  swift_unknownObjectRetain(a4);
  swift_retain();
  if (!v21)
  {
LABEL_11:
    swift_unknownObjectRelease(a4);
    goto LABEL_13;
  }

  while (1)
  {
    uint64_t v22 = *(void *)(a8 + 24);
    if (v22) {
      BOOL v23 = v21 == v22;
    }
    else {
      BOOL v23 = 0;
    }
    if (v23)
    {
      swift_unknownObjectRelease(a4);
      swift_release(v21);
      goto LABEL_13;
    }

    ChannelHandlerContext.handler.getter();
    uint64_t v25 = v24;
    swift_unknownObjectRelease(v24);
    if (v25 == a4) {
      break;
    }
    uint64_t v26 = *(void *)(v21 + 16);
    swift_retain();
    swift_release(v21);
    uint64_t v21 = v26;
    if (!v26) {
      goto LABEL_11;
    }
  }

  swift_unknownObjectRelease(a4);
  uint64_t v18 = sub_10009AAC0(a1, a2, a3, v21, a6, a7, a8);
  swift_release(v21);
  return v18;
}

uint64_t sub_10009AAC0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)(a7 + 56);
  uint64_t ObjectType = swift_getObjectType(*(void *)(a7 + 48));
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  280LL,  ObjectType,  v13);
  if (*(_BYTE *)(a7 + 40) == 1)
  {
    unint64_t v15 = sub_100029C98();
    uint64_t result = swift_allocError(&type metadata for ChannelError, v15, 0LL, 0LL);
    *(void *)uint64_t v17 = 2LL;
    *(_BYTE *)(v17 + 8) = 3;
  }

  else
  {
    BOOL v23 = a5;
    uint64_t v22 = a4;
    if (a2)
    {
      uint64_t v18 = a2;
    }

    else
    {
      a1 = sub_100094750();
      uint64_t v18 = v19;
    }

    uint64_t v20 = type metadata accessor for ChannelHandlerContext();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain(a3);
    swift_retain();
    uint64_t v21 = sub_10009962C(a1, v18, a3, a7, v20);
    v23(v21, v22);
    sub_100094800();
    swift_release(v21);
    return 0LL;
  }

  return result;
}

uint64_t sub_10009AC18(uint64_t a1, uint64_t a2)
{
  return sub_1000994D4( a1,  *(void *)a2,  *(void *)(a2 + 8),  *(unsigned int *)(a2 + 16) | ((unint64_t)(*(unsigned __int16 *)(a2 + 20) | (*(unsigned __int8 *)(a2 + 22) << 16)) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 23) << 56));
}

uint64_t sub_10009AC50(uint64_t a1, uint64_t a2)
{
  return sub_1000995A8(a1, *(void *)a2, *(_BYTE *)(a2 + 8), (void (*)(uint64_t, void))sub_1001A94A8);
}

uint64_t sub_10009AC78(uint64_t a1, uint64_t a2)
{
  return sub_10009953C( a1,  *(void *)a2,  *(void *)(a2 + 8),  *(void *)(a2 + 16),  *(unsigned int *)(a2 + 24) | ((unint64_t)(*(unsigned __int16 *)(a2 + 28) | (*(unsigned __int8 *)(a2 + 30) << 16)) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 31) << 56));
}

uint64_t sub_10009ACB4(uint64_t a1, uint64_t a2)
{
  return sub_1000995A8(a1, *(void *)a2, *(_BYTE *)(a2 + 8), (void (*)(uint64_t, void))sub_1001A9804);
}

uint64_t sub_10009ACDC()
{
  return sub_10009A8A8((uint64_t (*)(void))&_swift_release);
}

uint64_t sub_10009ACE8()
{
  return sub_10009ACB4(*(void *)(v0 + 16), v0 + 24);
}

uint64_t sub_10009ACF4()
{
  return sub_10009AD00((void (*)(void, void, void))sub_100034EB4);
}

uint64_t sub_10009AD00(void (*a1)(void, void, void))
{
  return sub_10009B270(v1, 41LL, 7LL);
}

uint64_t sub_10009AD34()
{
  return sub_100099604(*(void *)(v0 + 16), v0 + 24);
}

uint64_t sub_10009AD40(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_errorRetain(a1);
  }
  else {
    return sub_100034E9C(a1, a2);
  }
}

uint64_t sub_10009AD4C()
{
  return sub_10009A8A8((uint64_t (*)(void))&_swift_release);
}

uint64_t sub_10009AD58(uint64_t a1, char a2, uint64_t (*a3)(void))
{
  if ((a2 & 1) != 0) {
    return swift_errorRelease(a1);
  }
  else {
    return a3();
  }
}

uint64_t sub_10009AD64()
{
  uint64_t v1 = sub_10009B654();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10009ADA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0) {
    return swift_errorRelease(a1);
  }
  swift_release(a1);
  return swift_release(a2);
}

uint64_t sub_10009ADCC()
{
  return sub_10009AC78(*(void *)(v0 + 16), v0 + 24);
}

uint64_t sub_10009ADD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0) {
    return swift_errorRetain(a1);
  }
  swift_retain(a1);
  return swift_retain(a2);
}

uint64_t sub_10009AE04()
{
  return sub_10009AE10((void (*)(void, void))sub_100034F08);
}

uint64_t sub_10009AE10(void (*a1)(void, void))
{
  return sub_10009B270(v1, 33LL, 7LL);
}

uint64_t sub_10009AE44()
{
  return sub_10009AC50(*(void *)(v0 + 16), v0 + 24);
}

uint64_t sub_10009AE50()
{
  uint64_t v1 = sub_100041B64();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10009AE88(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0) {
    return swift_errorRelease(a1);
  }
  else {
    return swift_release(a1);
  }
}

uint64_t sub_10009AE94()
{
  return sub_10009AC18(*(void *)(v0 + 16), v0 + 24);
}

uint64_t sub_10009AEA0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0) {
    return swift_errorRetain(a1);
  }
  else {
    return swift_retain(a1);
  }
}

uint64_t sub_10009AEB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_conformsToProtocol2(a2, a3);
  if (result) {
    return a1;
  }
  __break(1u);
  return result;
}

unint64_t sub_10009AEEC()
{
  unint64_t result = qword_1002AEC18;
  if (!qword_1002AEC18)
  {
    unint64_t result = swift_getWitnessTable( protocol conformance descriptor for NIOAttemptedToRemoveHandlerMultipleTimesError,  &type metadata for NIOAttemptedToRemoveHandlerMultipleTimesError);
    atomic_store(result, (unint64_t *)&qword_1002AEC18);
  }

  return result;
}

uint64_t sub_10009AF28()
{
  return sub_10009AE10((void (*)(void, void))sub_100034F08);
}

uint64_t sub_10009AF34()
{
  return sub_10010C954(*(void *)(v0 + 16), v0 + 24);
}

uint64_t sub_10009AF40()
{
  return sub_10009A8A8((uint64_t (*)(void))&_swift_release);
}

uint64_t sub_10009AF4C()
{
  return sub_100099990(*(void *)(v0 + 16), v0 + 24);
}

uint64_t sub_10009AF58(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRetain(a1);
  }
  else {
    return swift_retain(a1);
  }
}

uint64_t sub_10009AF64()
{
  return sub_10009A8A8((uint64_t (*)(void))&_swift_release);
}

BOOL sub_10009AF70(uint64_t a1)
{
  return sub_100094DCC(a1, *(void *)(v1 + 16));
}

uint64_t sub_10009AF78()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

void sub_10009AFB0()
{
}

uint64_t sub_10009AFD4()
{
  return sub_10009AE10((void (*)(void, void))sub_100034F08);
}

uint64_t destroy for ChannelPipeline.ChannelHandlerDebugInfo(void *a1)
{
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t initializeWithCopy for ChannelPipeline.ChannelHandlerDebugInfo(uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  *(_OWORD *)a1 = *a2;
  uint64_t v4 = *((void *)a2 + 3);
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = *((void *)a2 + 2);
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = v4;
  swift_unknownObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *assignWithCopy for ChannelPipeline.ChannelHandlerDebugInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v6);
  a1[1] = v5;
  a1[2] = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = a1[3];
  a1[3] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

void *assignWithTake for ChannelPipeline.ChannelHandlerDebugInfo(void *a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = a1[3];
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v4;
  swift_bridgeObjectRelease(v5);
  return a1;
}

ValueMetadata *type metadata accessor for ChannelPipeline.ChannelHandlerDebugInfo()
{
  return &type metadata for ChannelPipeline.ChannelHandlerDebugInfo;
}

uint64_t sub_10009B124(uint64_t a1)
{
  return swift_unknownObjectRelease(a1);
}

uint64_t sub_10009B134(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_10009B144(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_10009B158(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

void sub_10009B170()
{
}

uint64_t sub_10009B180()
{
  return v2;
}

uint64_t sub_10009B19C(uint64_t a1)
{
  return swift_unknownObjectRelease(a1);
}

uint64_t sub_10009B1A8(uint64_t a1)
{
  return swift_errorRelease(a1);
}

uint64_t sub_10009B1B4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(a1, v1);
}

uint64_t sub_10009B1C0(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_10009B1DC()
{
  return v3(v0, v2, v1);
}

void sub_10009B1EC()
{
}

void sub_10009B204()
{
}

uint64_t sub_10009B21C(uint64_t a1)
{
  return v4(a1, v3, v2, v1);
}

uint64_t sub_10009B22C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(a1, v1);
}

uint64_t sub_10009B23C(uint64_t a1)
{
  return swift_errorRelease(a1);
}

uint64_t sub_10009B250(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(a1, v1);
}

  ;
}

uint64_t sub_10009B270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_10009B278@<X0>( uint64_t a1@<X2>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(v3, v2, a1, v4);
}

uint64_t sub_10009B28C()
{
  return swift_unknownObjectRetain(v0);
}

uint64_t sub_10009B294()
{
  return sub_100094338();
}

uint64_t sub_10009B29C(uint64_t result)
{
  *(void *)(result + 1sub_100019F7C(v0 + 6) = v1;
  return result;
}

  ;
}

uint64_t sub_10009B2C4()
{
  return v0;
}

uint64_t sub_10009B2D4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 96))(a1, v1);
}

uint64_t sub_10009B2E0(uint64_t result)
{
  *(void *)(result + 1sub_100019F7C(v0 + 6) = v1;
  return result;
}

uint64_t sub_10009B2EC()
{
  return swift_getObjectType(v0);
}

uint64_t sub_10009B2F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getObjectType(*(void *)(a3 + 48));
}

uint64_t sub_10009B314()
{
  return sub_100018F04(*(void *)(v0 + 24));
}

uint64_t sub_10009B330()
{
  return v1(v2, v0);
}

__n128 sub_10009B33C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  v16[24] = a14;
  *(void *)&v16[16] = a13;
  *(void *)&uint64_t v16[8] = a12;
  *(void *)uint64_t v16 = a11;
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = v14;
  *(_OWORD *)(a1 + 2sub_100019F7C(v0 + 4) = a9;
  *(_OWORD *)(a1 + 4sub_10006F0B8(12LL, 0) = a10;
  *(_OWORD *)(a1 + 5sub_100019F7C(v0 + 6) = *(_OWORD *)v16;
  __n128 result = *(__n128 *)&v16[9];
  *(_OWORD *)(a1 + 65) = *(_OWORD *)&v16[9];
  return result;
}

  ;
}

  ;
}

uint64_t sub_10009B3A0@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(v2, a1, v3);
}

uint64_t sub_10009B3B0(uint64_t a1)
{
  return swift_getObjectType(a1);
}

uint64_t sub_10009B3BC( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1000390C8((uint64_t)&a9, a2, a3);
}

void sub_10009B3C4()
{
}

uint64_t sub_10009B3DC()
{
  *(void *)(v2 + 1sub_100019F7C(v0 + 6) = v1;
  uint64_t v6 = v2 + 16 * v3;
  *(void *)(v6 + 3sub_100019F7C(v0 + 2) = v4;
  *(void *)(v6 + 4sub_10006F0B8(12LL, 0) = v5;
  return _typeName(_:qualified:)(v0, 0LL);
}

uint64_t sub_10009B3F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  return swift_willThrowTypedImpl(va, a2, a3);
}

uint64_t sub_10009B3FC(uint64_t a1)
{
  return _typeName(_:qualified:)(a1, 0LL);
}

uint64_t sub_10009B404(uint64_t a1)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, 117LL, 2LL, 531LL, v2, v1);
}

uint64_t sub_10009B41C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, 117LL, 2LL, v5, a5, v6);
}

uint64_t sub_10009B434()
{
  return swift_release(*(void *)(v0 + 32));
}

uint64_t sub_10009B43C(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_10009B448(uint64_t a1)
{
  return swift_retain(a1);
}

void sub_10009B454()
{
}

  ;
}

void sub_10009B484()
{
}

uint64_t sub_10009B498(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 96))(a1, v1);
}

uint64_t sub_10009B4A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, a2, a3, a4, a5, v5);
}

uint64_t sub_10009B4B0(uint64_t a1, uint64_t a2)
{
  return v4(a1, a2, v3, v2);
}

uint64_t sub_10009B4BC(uint64_t a1, uint64_t a2)
{
  return v4(a1, a2, v3, v2);
}

uint64_t sub_10009B4C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return EventLoop.makePromise<A>(of:file:line:)(a1, a2, a3, a4, a5, a6, a1, v6);
}

uint64_t sub_10009B4D4(uint64_t a1, uint64_t a2)
{
  return v4(a1, a2, v3, v2);
}

void sub_10009B4E0()
{
  *(void *)(v2 + 1sub_100019F7C(v0 + 6) = v0;
  uint64_t v5 = v2 + 16 * v1;
  *(void *)(v5 + 3sub_100019F7C(v0 + 2) = v4;
  *(void *)(v5 + 4sub_10006F0B8(12LL, 0) = v3;
}

uint64_t sub_10009B4FC()
{
  return swift_release(v0);
}

uint64_t sub_10009B504()
{
  return sub_100095918();
}

  ;
}

uint64_t sub_10009B524(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 96))(a1, v1);
}

BOOL sub_10009B534@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

BOOL sub_10009B54C@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_10009B564()
{
  return sub_100019F7C((void *)(v0 + 24));
}

uint64_t sub_10009B56C()
{
  return sub_1000958F0();
}

uint64_t sub_10009B57C(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

_OWORD *sub_10009B58C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = v9;
  return sub_100034728(&a9, (_OWORD *)(a1 + 24));
}

uint64_t sub_10009B59C(uint64_t a1)
{
  return swift_retain_n(a1, 2LL);
}

uint64_t sub_10009B5A4()
{
  return swift_getObjectType(v0);
}

uint64_t sub_10009B5AC(uint64_t a1)
{
  return v4(a1, v3, v2, v1);
}

uint64_t sub_10009B5BC(uint64_t a1)
{
  return v1(a1, v4, v3, v2);
}

  ;
}

uint64_t sub_10009B5E4()
{
  return sub_10009663C(v0);
}

uint64_t sub_10009B5EC()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_10009B5FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return swift_errorRelease(a11);
}

  ;
}

uint64_t sub_10009B614( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  return swift_dynamicCast(&a9, &a11, a3, a4, 0LL);
}

uint64_t sub_10009B624()
{
  return sub_100094338();
}

uint64_t sub_10009B62C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_10009B634()
{
  return swift_getObjectType(v0);
}

  ;
}

  ;
}

uint64_t sub_10009B654()
{
  return v0;
}

uint64_t sub_10009B664()
{
  return v0;
}

uint64_t sub_10009B678()
{
  return swift_retain(v0);
}

  ;
}

uint64_t sub_10009B694()
{
  return swift_errorRetain(v0);
}

uint64_t sub_10009B6A0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, ...)
{
  return sub_1000390C8((uint64_t)va, a2, a3);
}

uint64_t sub_10009B6A8()
{
  return v0;
}

uint64_t sub_10009B6BC()
{
  return v0;
}

uint64_t sub_10009B6D0()
{
  return swift_getObjectType(v0);
}

uint64_t sub_10009B6D8()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_10009B6E0()
{
  return swift_unknownObjectRetain(v0);
}

void sub_10009B6E8()
{
}

uint64_t sub_10009B6F0(uint64_t a1)
{
  return swift_getObjectType(a1);
}

uint64_t sub_10009B6FC(uint64_t a1, uint64_t a2, Swift::Int a3)
{
  v3._countAndFlagsBits = 32LL;
  v3._object = (void *)0xE100000000000000LL;
  return String.init(repeating:count:)(v3, a3)._countAndFlagsBits;
}

uint64_t sub_10009B708@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_10009B714@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_10009B720()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_10009B72C()
{
  return v0;
}

uint64_t sub_10009B740(uint64_t a1)
{
  return swift_getObjectType(a1);
}

uint64_t sub_10009B74C(uint64_t a1)
{
  return swift_getObjectType(a1);
}

  ;
}

void sub_10009B764(uint64_t a1, _BYTE *a2)
{
  *a2 = 1;
}

uint64_t sub_10009B770()
{
  return swift_release(v0);
}

uint64_t sub_10009B778(uint64_t a1)
{
  return sub_1000950E8(a1, 0LL);
}

uint64_t sub_10009B784(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 96))(a1, v1);
}

uint64_t sub_10009B790(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return sub_10009AD58(v3, v4, a3);
}

uint64_t sub_10009B79C(uint64_t a1)
{
  uint64_t v2 = "\b";
  return swift_initClassMetadata2(a1, 0LL, 1LL, &v2, a1 + 160);
}

uint64_t sub_10009B7DC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v7 = a4;
  uint64_t v12 = (int *)type metadata accessor for InAppBuyRoute.AdditionalBuyOptions(0LL, a5, a6, a4);
  uint64_t v13 = a7 + v12[11];
  uint64_t v14 = type metadata accessor for Date(0LL);
  sub_10001762C(v13, 1LL, 1LL, v14);
  *(void *)a7 = a1;
  *(void *)(a7 + 8) = a2;
  *(_BYTE *)(a7 + 1sub_100019F7C(v0 + 6) = v7;
  *(void *)(a7 + 2sub_100019F7C(v0 + 4) = a3;
  swift_retain();
  sub_10004DB00(v13, (uint64_t *)&unk_1002AFCD0);
  sub_10001762C(v13, 1LL, 1LL, v14);
  uint64_t v15 = type metadata accessor for OctaneSubscription();
  BOOL v16 = swift_dynamicCastClass(a3, v15) != 0;
  uint64_t result = swift_release();
  *(_BYTE *)(a7 + v12[12]) = v16;
  *(_BYTE *)(a7 + v12[13]) = 0;
  return result;
}

uint64_t sub_10009B8C8@<X0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  if (sub_1000A2510((uint64_t)v37) == 1)
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v5 = sub_100077D08();
    sub_100092ADC(v5, (uint64_t)qword_1002EB9D0);
    os_log_type_t v6 = sub_100092F58();
    if (sub_100024E9C(v6))
    {
      char v7 = (_WORD *)sub_10001A414();
      sub_1000A48D4(v7);
      sub_1000A46DC((void *)&_mh_execute_header, v8, v9, "Failed to decode in-app buy request");
      sub_10001A408((uint64_t)a1);
    }

    sub_1000A4D1C(0x7571657220646142LL, 0xEB00000000747365LL, (uint64_t)v38);
    uint64_t v10 = v38[0];
    uint64_t v11 = v38[1];
    uint64_t v12 = v38[2];
    uint64_t v13 = v38[3];
    unint64_t v14 = v39 | ((unint64_t)v40 << 32) | ((unint64_t)v41 << 48);
    sub_10001ED94();
    uint64_t v15 = sub_10003C654();
    uint64_t v16 = sub_100019310(v15, 44LL);
    *(void *)(v16 + 1sub_100019F7C(v0 + 6) = 0LL;
    *(void *)(v16 + 2sub_100019F7C(v0 + 4) = 0LL;
    uint64_t result = sub_1000A4B24(v16, 21LL);
  }

  else
  {
    sub_1000A4B7C(v38, v37);
    sub_10009BF7C(v38, v17, v29);
    sub_1000A497C();
    uint64_t v18 = v30;
    uint64_t v19 = v31;
    uint64_t v20 = sub_100019F58(v29, v30);
    v28[3] = v18;
    uint64_t v21 = *(void *)(v19 + 8);
    v28[4] = v21;
    uint64_t v22 = sub_10005F580(v28);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 16LL))(v22, v20, v18);
    sub_1001BD3A0((uint64_t)v22, a1, v18, v21, (uint64_t)v33);
    uint64_t v10 = v33[0];
    uint64_t v11 = v33[1];
    uint64_t v12 = v33[2];
    uint64_t v13 = v33[3];
    uint64_t v23 = v34;
    uint64_t v24 = v35;
    uint64_t v25 = v36;
    sub_100019F7C(v28);
    unint64_t v14 = v23 | (v24 << 32) | (v25 << 48);
    sub_10001ED94();
    uint64_t v26 = sub_10003C654();
    uint64_t v16 = sub_100019310(v26, 44LL);
    *(void *)(v16 + 1sub_100019F7C(v0 + 6) = 0LL;
    *(void *)(v16 + 2sub_100019F7C(v0 + 4) = 0LL;
    sub_1000A4B24(v16, 3LL);
    uint64_t result = sub_100019F7C(v29);
  }

  *(void *)a2 = v16;
  *(void *)(a2 + 8) = _swiftEmptyArrayStorage;
  *(_BYTE *)(a2 + 1sub_100019F7C(v0 + 6) = 2;
  *(void *)(a2 + 2sub_100019F7C(v0 + 4) = v10;
  *(void *)(a2 + 3sub_100019F7C(v0 + 2) = v11;
  *(void *)(a2 + 4sub_10006F0B8(12LL, 0) = v12;
  *(void *)(a2 + 48) = v13;
  *(_BYTE *)(a2 + 6sub_100019F7C(v0 + 2) = BYTE6(v14);
  *(_WORD *)(a2 + 6sub_10006F0B8(12LL, 0) = WORD2(v14);
  *(_DWORD *)(a2 + 5sub_100019F7C(v0 + 6) = v14;
  return result;
}

void sub_10009BF7C(void *a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v132 = a3;
  uint64_t v5 = *(void *)(*v3 + 152LL);
  uint64_t v131 = *(void *)(*v3 + 144LL);
  uint64_t v6 = type metadata accessor for InAppBuyRoute.AdditionalBuyOptions(0LL, v131, v5, a2);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (os_log_s *)((char *)&v115 - v8);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3 + 16);
  if (!Strong)
  {
    unint64_t v50 = sub_1000A2EB4();
    uint64_t v51 = sub_1000252D0((uint64_t)&type metadata for InAppBuyRouteError, v50);
    *unint64_t v52 = 0;
    swift_willThrow(v51);
    goto LABEL_29;
  }

  uint64_t v11 = Strong;
  uint64_t v123 = v5;
  uint64_t v124 = v9;
  uint64_t v125 = v7;
  uint64_t v126 = v6;
  sub_100019F58(v3 + 6, v3[9]);
  uint64_t v13 = a1[8];
  uint64_t v12 = a1[9];
  BOOL v127 = sub_100075F44();
  uint64_t v128 = v3;
  sub_100092F60(v3 + 6, v3[9]);
  uint64_t v129 = v12;
  uint64_t v130 = v13;
  sub_100075EE8(v13, v12);
  uint64_t v15 = v14;
  sub_1000A46B4((uint64_t)(a1 + 66), (uint64_t)&v145);
  sub_1000A46B4((uint64_t)&v145, (uint64_t)&v146);
  char v16 = v146;
  uint64_t p_cache = (uint64_t)&OBJC_CLASS____TtC25ASOctaneSupportXPCService24OctaneXPCServiceDelegate.cache;
  if (v146 != 2)
  {
    uint64_t v18 = a1[68];
    if (v18)
    {
      uint64_t v122 = v15;
      uint64_t v19 = a1[67];
      if (qword_1002A8D90 != -1) {
        swift_once(&qword_1002A8D90, sub_100183E34);
      }
      uint64_t v20 = sub_100077D08();
      uint64_t v21 = (os_log_s *)sub_100018F68(v20, (uint64_t)qword_1002EB9D0);
      sub_10005231C();
      sub_1000A46F0();
      sub_10005231C();
      uint64_t v22 = sub_1000A46F0();
      Logger.logObject.getter(v22);
      os_log_type_t v23 = sub_100092CFC();
      if (sub_1000A4ACC(v23))
      {
        uint64_t v24 = sub_100019464(22LL);
        LODWORD(v131) = &OBJC_CLASS____TtC25ASOctaneSupportXPCService24OctaneXPCServiceDelegate.cache;
        uint64_t v25 = v24;
        uint64_t v126 = sub_100019464(64LL);
        *(void *)&__int128 v138 = v126;
        *(_DWORD *)uint64_t v25 = 136315394;
        sub_10005231C();
        uint64_t v136 = sub_1000A4A64(v19, v26, (uint64_t *)&v138);
        uint64_t v121 = v11;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, v137, v25 + 4);
        sub_100077CA8(v18);
        *(_WORD *)(v25 + 1sub_100019F7C(v0 + 2) = 2080;
        uint64_t v124 = v21;
        uint64_t v27 = (uint64_t)a1;
        unint64_t v28 = v129;
        sub_1000356F4();
        uint64_t v125 = v19;
        uint64_t v29 = v130;
        uint64_t v136 = sub_1000CF360(v130, v28, (uint64_t *)&v138);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, v137, v25 + 14);
        sub_100056ADC();
        sub_1000A343C(v27);
        sub_1000A343C(v27);
        uint64_t v30 = v124;
        sub_1000A4960( (void *)&_mh_execute_header,  v124,  (os_log_type_t)v131,  "Handling did consent to price increase for subscription group: %s; app: %s.");
        uint64_t v31 = v126;
        sub_100093110(v126);
        sub_10001A408(v31);
        sub_10001A408(v25);
      }

      else
      {
        sub_10001EDE8(v18);
        sub_1000A4678();
        sub_1000A4678();

        unint64_t v28 = v129;
        uint64_t v29 = v130;
      }

      sub_1000A1628(v16 & 1, v29, v28, v127, v132);
      sub_10002A764();
      goto LABEL_21;
    }
  }

  uint64_t v32 = a1[18];
  if (!v32) {
    goto LABEL_18;
  }
  uint64_t v33 = a1[17];
  sub_100077D1C();
  uint64_t v120 = v33;
  sub_1000D7FA8(v33, v32);
  if (!v34)
  {
    sub_10001A420();
LABEL_18:
    unint64_t v53 = sub_1000A2EB4();
    sub_1000252D0((uint64_t)&type metadata for InAppBuyRouteError, v53);
    sub_1000A47C0(v54, 1);
    sub_10002A764();
    goto LABEL_21;
  }

  uint64_t v35 = v34;
  sub_1000A46B4((uint64_t)(a1 + 12), (uint64_t)&v144);
  sub_1000A46B4((uint64_t)&v144, (uint64_t)&v147);
  uint64_t v122 = v15;
  if (v147 == 2 || (v147 & 1) == 0)
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v119 = v35;
    uint64_t v36 = sub_100077D08();
    uint64_t v37 = (os_log_s *)sub_100018F68(v36, (uint64_t)qword_1002EB9D0);
    sub_1000A46F0();
    sub_1000A46F0();
    uint64_t v38 = sub_100077D1C();
    Logger.logObject.getter(v38);
    os_log_type_t v39 = sub_100092CFC();
    if (os_log_type_enabled(v37, v39))
    {
      uint64_t p_cache = sub_100019464(22LL);
      uint64_t v118 = sub_100019464(64LL);
      uint64_t v136 = v118;
      *(_DWORD *)uint64_t p_cache = 136315394;
      uint64_t v121 = v11;
      uint64_t v11 = p_cache + 4;
      uint64_t v40 = sub_100077D1C();
      uint64_t v42 = sub_1000A48C8(v40, v41, &v136);
      sub_1000A4924(v42);
      sub_100077CA8(v32);
      sub_1000A4B6C();
      uint64_t v43 = v129;
      sub_100077D1C();
      uint64_t v44 = v130;
      uint64_t v46 = sub_1000A4914(v130, v45, &v136);
      uint64_t v47 = sub_1000A4CEC(v46);
      sub_1000A4CC8(v47, v48);
      sub_10001A420();
      sub_1000A4678();
      sub_1000A4678();
      sub_1000A4960((void *)&_mh_execute_header, v37, v39, "Received confirmed in-app buy request of %s for %s");
      uint64_t v49 = v118;
      sub_100093110(v118);
      sub_10001A408(v49);
      sub_10001A408(p_cache);
    }

    else
    {
      sub_10001EDE8(v32);
      sub_1000A4678();
      sub_1000A4678();

      uint64_t v43 = v129;
      uint64_t v44 = v130;
    }

    sub_100077D1C();
    sub_1000A4C58();
    BOOL v55 = v127;
    uint64_t v56 = (uint64_t *)v124;
    sub_10009B7DC(v44, v43, v33, v127, v131, v123, (uint64_t)v124);
    swift_unknownObjectRetain(v11);
    uint64_t v57 = (void *)sub_1000A4C4C(&v136, a1, v56, v11);
    sub_10002A764();

    (*(void (**)(uint64_t *, uint64_t))(v125 + 8))(v56, v126);
    sub_1000A4AA8();
    goto LABEL_24;
  }

  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v62 = sub_100077D08();
  uint64_t v63 = (os_log_s *)sub_100018F68(v62, (uint64_t)qword_1002EB9D0);
  sub_1000A46F0();
  sub_100077D1C();
  sub_1000A46F0();
  uint64_t v64 = sub_100077D1C();
  uint64_t v118 = (uint64_t)v63;
  Logger.logObject.getter(v64);
  os_log_type_t v65 = sub_100092CFC();
  if (sub_1000A4ACC(v65))
  {
    uint64_t v66 = sub_100019464(22LL);
    unsigned int v117 = &OBJC_CLASS____TtC25ASOctaneSupportXPCService24OctaneXPCServiceDelegate.cache;
    uint64_t v67 = (_DWORD *)v66;
    uint64_t v116 = sub_100019464(64LL);
    uint64_t v136 = v116;
    *uint64_t v67 = 136315394;
    uint64_t v121 = v11;
    uint64_t v11 = (uint64_t)(v67 + 1);
    uint64_t v68 = sub_100077D1C();
    uint64_t v135 = sub_1000A48C8(v68, v69, &v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, &v136, v67 + 1);
    sub_100077CA8(v32);
    sub_1000A4B6C();
    uint64_t v70 = v35;
    unint64_t v71 = v129;
    sub_10005231C();
    uint64_t v135 = sub_1000A4A64(v130, v72, &v136);
    unint64_t v73 = v71;
    uint64_t v35 = v70;
    uint64_t v74 = v73;
    sub_1000A4CC8((uint64_t)&v135, (uint64_t)&v136);
    swift_bridgeObjectRelease();
    sub_1000A4678();
    sub_1000A4678();
    sub_1000A4960( (void *)&_mh_execute_header,  v63,  (os_log_type_t)v117,  "Received initial in-app buy request of %s for %s");
    uint64_t v75 = v116;
    sub_100093110(v116);
    sub_10001A408(v75);
    sub_10001A408((uint64_t)v67);
  }

  else
  {
    sub_10001EDE8(v32);
    sub_1000A4678();
    sub_1000A4678();

    uint64_t v74 = v129;
  }

  uint64_t v76 = v133;
  BOOL v55 = v127;
  uint64_t p_cache = (uint64_t)v128;
  uint64_t v77 = v128;
  sub_10009D2C0((uint64_t)a1, v11, v130, v74, v35, v127, &v136);
  if (v76)
  {
    uint64_t v136 = v76;
    swift_errorRetain(v76);
    uint64_t v78 = sub_1000175B0(&qword_1002A9710);
    if (swift_dynamicCast(&v143, &v136, v78, &type metadata for InAppBuyRouteError, 0LL))
    {
      if (v143 == 7)
      {
        swift_errorRelease(v76);
        sub_1000A46F0();
        sub_1000A46F0();
        sub_1000A46F0();
        sub_100077D1C();
        sub_1000A46F0();
        sub_100077D1C();
        sub_1000A4D94();
        os_log_type_t v83 = sub_100092CFC();
        if (sub_1000A496C(v83))
        {
          unsigned int v117 = v76;
          uint64_t v133 = v32;
          uint64_t v121 = v11;
          uint64_t v80 = sub_100019464(32LL);
          uint64_t v116 = sub_100019464(96LL);
          uint64_t v135 = v116;
          *(_DWORD *)uint64_t v80 = 136315650;
          uint64_t v84 = a1[51];
          uint64_t v119 = v35;
          if (v84) {
            uint64_t v76 = a1[50];
          }
          else {
            uint64_t v76 = 45LL;
          }
          swift_bridgeObjectRetain();
          uint64_t v134 = sub_1000A4914(v76, v92, &v135);
          sub_1000A485C();
          sub_10001A420();
          sub_1000A4678();
          sub_1000A4678();
          *(_WORD *)(v80 + 1sub_100019F7C(v0 + 2) = 2080;
          uint64_t v32 = v133;
          uint64_t v93 = sub_100077D1C();
          uint64_t v95 = sub_1000A48C8(v93, v94, &v135);
          sub_1000A4A2C(v95);
          sub_100077CA8(v32);
          *(_WORD *)(v80 + 2sub_100019F7C(v0 + 2) = 2080;
          sub_10005231C();
          uint64_t v134 = sub_1000A4A64(v130, v96, &v135);
          sub_1000A485C();
          sub_100023EF4();
          sub_1000A4678();
          sub_1000A4678();
          os_log_type_t v90 = v117;
          uint64_t v91 = "Handling request for ineligible winback offer %s for %s and app %s.";
          goto LABEL_52;
        }

LABEL_47:
        sub_1000A4678();
        sub_1000A4678();
        sub_10001EDE8(v32);
        sub_1000A4678();
        sub_1000A4678();

LABEL_53:
        sub_1000A1530(v55, &v138);
        swift_errorRelease(v136);
        goto LABEL_54;
      }

      if (v143 == 4)
      {
        swift_errorRelease(v76);
        sub_1000A46F0();
        sub_1000A46F0();
        sub_1000A46F0();
        sub_100077D1C();
        sub_1000A46F0();
        sub_100077D1C();
        sub_1000A4D94();
        os_log_type_t v79 = sub_100092CFC();
        if (sub_1000A496C(v79))
        {
          unsigned int v117 = v76;
          uint64_t v133 = v32;
          uint64_t v121 = v11;
          uint64_t v80 = sub_100019464(32LL);
          uint64_t v116 = sub_100019464(96LL);
          uint64_t v135 = v116;
          *(_DWORD *)uint64_t v80 = 136315650;
          uint64_t v81 = a1[51];
          uint64_t v119 = v35;
          if (v81) {
            uint64_t v76 = a1[50];
          }
          else {
            uint64_t v76 = 7104878LL;
          }
          swift_bridgeObjectRetain();
          uint64_t v134 = sub_1000A4914(v76, v85, &v135);
          sub_1000A485C();
          sub_10001A420();
          sub_1000A4678();
          sub_1000A4678();
          *(_WORD *)(v80 + 1sub_100019F7C(v0 + 2) = 2080;
          uint64_t v32 = v133;
          uint64_t v86 = sub_100077D1C();
          uint64_t v88 = sub_1000A48C8(v86, v87, &v135);
          sub_1000A4A2C(v88);
          sub_100077CA8(v32);
          *(_WORD *)(v80 + 2sub_100019F7C(v0 + 2) = 2080;
          sub_10005231C();
          uint64_t v134 = sub_1000A4A64(v130, v89, &v135);
          sub_1000A485C();
          sub_100023EF4();
          sub_1000A4678();
          sub_1000A4678();
          os_log_type_t v90 = v117;
          uint64_t v91 = "Handling request for in-eligible ad-hoc offer %s for %s and app %s.";
LABEL_52:
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v77, v90, v91, (uint8_t *)v80, 0x20u);
          uint64_t v97 = v116;
          sub_1000A4D44();
          sub_10001A408(v97);
          sub_10001A408(v80);

          uint64_t v11 = v121;
          uint64_t p_cache = (uint64_t)v128;
          BOOL v55 = v127;
          uint64_t v35 = v119;
          goto LABEL_53;
        }

        goto LABEL_47;
      }
    }

    sub_10001A420();
    uint64_t v82 = swift_errorRelease(v136);
    swift_willThrow(v82);
    swift_release();
    sub_10002A764();
LABEL_21:
    swift_release();
    goto LABEL_29;
  }

  sub_1000A4AA8();
LABEL_54:
  if (v55)
  {
    int v98 = *((unsigned __int8 *)sub_100019F58(&v138, v139) + 176);
    if (v98 != 22)
    {
      uint64_t v119 = v35;
      uint64_t p_cache = 892416309LL;
      uint64_t v99 = sub_100082108(v98);
      if (v99 == 892416309 && v100 == 0xE400000000000000LL)
      {
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t p_cache = _stringCompareWithSmolCheck(_:_:expecting:)(v99, v100, 892416309LL, 0xE400000000000000LL, 0LL);
        sub_10001EDA0();
        if ((p_cache & 1) == 0)
        {
          sub_10001A420();
          uint64_t p_cache = (uint64_t)v128;
          BOOL v55 = v127;
          goto LABEL_24;
        }
      }

      sub_1000A46F0();
      sub_1000A46F0();
      sub_100077D1C();
      uint64_t v102 = (os_log_s *)sub_1000A4D94();
      os_log_type_t v103 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v102, v103))
      {
        uint64_t p_cache = sub_100019464(22LL);
        uint64_t v118 = sub_100019464(64LL);
        uint64_t v136 = v118;
        *(_DWORD *)uint64_t p_cache = 136315394;
        uint64_t v133 = 0LL;
        uint64_t v121 = v11;
        uint64_t v104 = sub_100077D1C();
        uint64_t v106 = sub_1000A48C8(v104, v105, &v136);
        sub_1000A4924(v106);
        sub_100077CA8(v32);
        sub_1000A4B6C();
        swift_bridgeObjectRetain();
        uint64_t v107 = v130;
        uint64_t v108 = sub_1000CF360(v130, v129, &v136);
        uint64_t v109 = sub_1000A4CEC(v108);
        uint64_t v110 = v129;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v109, v111, p_cache + 4);
        sub_10001EDA0();
        sub_1000A4678();
        sub_1000A4678();
        sub_1000A4960( (void *)&_mh_execute_header,  v102,  v103,  "Simulating confirmed in-app buy request of %s for %s because dialogs are disabled.");
        uint64_t v112 = v118;
        sub_100093110(v118);
        sub_10001A408(v112);
        sub_10001A408(p_cache);

        uint64_t v113 = v107;
      }

      else
      {
        sub_10001EDE8(v32);
        sub_1000A4678();
        sub_1000A4678();

        uint64_t v110 = v129;
        uint64_t v113 = v130;
      }

      BOOL v55 = v127;
      sub_10001DBCC();
      sub_1000A4C58();
      uint64_t v114 = (uint64_t *)v124;
      sub_10009B7DC(v113, v110, v76, 1LL, v131, v123, (uint64_t)v124);

      (*(void (**)(uint64_t *, uint64_t))(v125 + 8))(v114, v126);
      sub_100019F7C(&v138);
      sub_1000A4AA8();
      goto LABEL_24;
    }
  }

  sub_10001A420();
LABEL_24:
  sub_1000A46B4((uint64_t)(a1 + 70), (uint64_t)v141);
  sub_1000A46B4((uint64_t)v141, (uint64_t)v142);
  if (sub_1000A3034((uint64_t)v142) != 1)
  {
    char v58 = v142[312];
    sub_100092F60((void *)(p_cache + 88), *(void *)(p_cache + 112));
    Swift::String v59 = (os_unfair_lock_s *)*((void *)off_1002AA840 + 2);
    ChannelPipeline.syncOperations.getter();
    os_unfair_lock_lock(v59);
    LOBYTE(OBJC_CLASS____TtC25ASOctaneSupportXPCService29InAppPendingTransactionsRoute.info) = v58 & 1;
    os_unfair_lock_unlock(v59);
    sub_100024F0C();
  }

  if (v55)
  {
    uint64_t v60 = v139;
    uint64_t v61 = v140;
    sub_100043F18((uint64_t)&v138, v139);
    (*(void (**)(void, uint64_t, uint64_t))(v61 + 112))(0LL, v60, v61);
  }

  swift_release();
  sub_10002A764();
  sub_10009B4FC();
  sub_10002A118(&v138, (uint64_t)v132);
LABEL_29:
  sub_10001DAB8();
}

        uint64_t v7 = 0;
        goto LABEL_48;
      }

      swift_bridgeObjectRetain_n(v1, 2LL);
      sub_100161B20(v2, v1, 10LL);
      uint64_t v38 = v37;
      sub_100019390();
      if ((v38 & 1) == 0) {
        goto LABEL_49;
      }
    }

    else
    {
      swift_bridgeObjectRetain();
    }

      uint64_t v33 = 0LL;
      LOBYTE(v25) = 1;
      goto LABEL_61;
    }

    uint64_t v33 = (v25 - 48);
    if (v29 != 1)
    {
      sub_10005768C();
      if (!v65 & v37) {
        goto LABEL_47;
      }
      uint64_t v33 = 10LL * (v25 - 48) + v54;
      if (v53 != 2)
      {
        while (1)
        {
          sub_100024EAC();
          if (!v65 & v37) {
            goto LABEL_47;
          }
          sub_100173D98();
          if (!v65) {
            goto LABEL_47;
          }
          uint64_t v33 = v56 + v55;
          if (__OFADD__(v56, v55)) {
            goto LABEL_47;
          }
          sub_1001964F8();
          if (v65) {
            goto LABEL_61;
          }
        }
      }
    }

    goto LABEL_60;
  }

  if (v29)
  {
    if (v29 == 1) {
      goto LABEL_47;
    }
    sub_10005768C();
    if (!v65 & v37) {
      goto LABEL_47;
    }
    uint64_t v33 = v48;
    if (v47 != 2)
    {
      sub_10005768C();
      if (!v65 & v37) {
        goto LABEL_47;
      }
      uint64_t v33 = 10LL * v33 + v50;
      if (v49 != 3)
      {
        while (1)
        {
          sub_100024EAC();
          if (!v65 & v37) {
            goto LABEL_47;
          }
          sub_100173D98();
          if (!v65) {
            goto LABEL_47;
          }
          uint64_t v33 = v52 + v51;
          if (__OFADD__(v52, v51)) {
            goto LABEL_47;
          }
          sub_1001964F8();
          if (v65) {
            goto LABEL_61;
          }
        }
      }
    }

void sub_10009CCC0( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v94 = sub_100075DC4(a4, a5);
  uint64_t v97 = v14;
  sub_100019F58(v7 + 6, v7[9]);
  sub_10007608C();
  uint64_t v98 = v15;
  uint64_t v116 = v7;
  uint64_t v16 = a5;
  uint64_t v93 = v7 + 6;
  sub_100092F60(v7 + 6, v7[9]);
  sub_100076700();
  uint64_t v91 = v102;
  uint64_t v92 = v101;
  uint64_t v89 = v104;
  uint64_t v90 = v103;
  uint64_t v87 = v106;
  uint64_t v88 = v105;
  uint64_t v85 = v108;
  uint64_t v86 = v107;
  uint64_t v83 = v110;
  uint64_t v84 = v109;
  uint64_t v17 = type metadata accessor for OctaneSubscription();
  uint64_t v18 = swift_dynamicCastClass(a6, v17);
  uint64_t v96 = a1;
  if (!v18)
  {
    uint64_t v78 = a4;
    BOOL v72 = 0;
    uint64_t v81 = 0LL;
    uint64_t v74 = 0LL;
    uint64_t v76 = 0LL;
    uint64_t v33 = 0LL;
    uint64_t v24 = v116;
    uint64_t v34 = a2;
LABEL_30:
    sub_10009B678();
    sub_100077D1C();
    swift_unknownObjectRetain(v34);
    uint64_t v62 = sub_10016AC94();
    uint64_t v64 = v63;
    sub_1000A4BF4();
    sub_10016B0A4();
    uint64_t v116 = v65;
    sub_100092F60(v93, v24[9]);
    char v66 = sub_100076ABC();
    swift_release();
    *(void *)a7 = v34;
    *(void *)(a7 + 8) = a3;
    *(void *)(a7 + 1sub_100019F7C(v0 + 6) = v76;
    *(void *)(a7 + 2sub_100019F7C(v0 + 4) = v33;
    *(void *)(a7 + 3sub_100019F7C(v0 + 2) = v81;
    *(void *)(a7 + 4sub_10006F0B8(12LL, 0) = v94;
    *(void *)(a7 + 48) = v97;
    *(void *)(a7 + 5sub_100019F7C(v0 + 6) = v78;
    *(void *)(a7 + 6sub_100019F7C(v0 + 4) = v16;
    *(void *)(a7 + 7sub_100019F7C(v0 + 2) = v62;
    *(void *)(a7 + 8sub_10006F0B8(12LL, 0) = v64;
    *(void *)(a7 + sub_100081CEC(v0 + 88) = a6;
    *(void *)(a7 + 9sub_100019F7C(v0 + 6) = v74;
    *(void *)(a7 + 10sub_100019F7C(v0 + 4) = v98;
    *(void *)(a7 + 11sub_100019F7C(v0 + 2) = v92;
    *(void *)(a7 + 12sub_10006F0B8(12LL, 0) = v91;
    *(void *)(a7 + 128) = v90;
    *(void *)(a7 + 13sub_100019F7C(v0 + 6) = v89;
    *(void *)(a7 + 14sub_100019F7C(v0 + 4) = v88;
    *(void *)(a7 + 15sub_100019F7C(v0 + 2) = v87;
    *(void *)(a7 + 16sub_10006F0B8(12LL, 0) = v86;
    *(void *)(a7 + 168) = v85;
    *(void *)(a7 + 17sub_100019F7C(v0 + 6) = v84;
    *(void *)(a7 + 18sub_100019F7C(v0 + 4) = v83;
    *(_OWORD *)(a7 + 27sub_100019F7C(v0 + 2) = 0u;
    *(_OWORD *)(a7 + 2sub_100081CEC(v0 + 88) = 0u;
    *(_OWORD *)(a7 + 24sub_10006F0B8(12LL, 0) = 0u;
    *(_OWORD *)(a7 + 25sub_100019F7C(v0 + 6) = 0u;
    *(_OWORD *)(a7 + 208) = 0u;
    *(_OWORD *)(a7 + 22sub_100019F7C(v0 + 4) = 0u;
    *(_OWORD *)(a7 + 19sub_100019F7C(v0 + 2) = 0u;
    *(void *)(a7 + 30sub_100019F7C(v0 + 4) = v116;
    *(_BYTE *)(a7 + 31sub_100019F7C(v0 + 2) = v66;
    *(_BYTE *)(a7 + 313) = v72;
    goto LABEL_31;
  }

  uint64_t v19 = (void *)v18;
  sub_1000A46B4(a1 + 400, (uint64_t)v112);
  sub_1000A46B4((uint64_t)v112, (uint64_t)&v113);
  uint64_t v20 = v114;
  if (!v114)
  {
    sub_1000A4BF4();
    uint64_t v81 = 0LL;
    uint64_t v35 = v8;
    uint64_t v22 = a4;
    uint64_t v24 = v116;
    goto LABEL_9;
  }

  uint64_t v21 = v113;
  uint64_t v79 = a6;
  sub_1000A4BF4();
  uint64_t v22 = a4;
  uint64_t v23 = a4;
  uint64_t v24 = v116;
  uint64_t v25 = sub_1000A1B38(v21, v20, (uint64_t)v19, v23, v16);
  if (!v8)
  {
    if (v25)
    {
      uint64_t v81 = v25;
      uint64_t v20 = 0LL;
      uint64_t v35 = 0LL;
    }

    else
    {
      sub_1000A4C94();
      sub_1000A1F00(v51, v52, v53);
      uint64_t v35 = 0LL;
      uint64_t v20 = v67;
      uint64_t v81 = 0LL;
    }

void sub_10009D1EC(uint64_t a1@<X8>)
{
  if (sub_1000A2510((uint64_t)v8) != 1)
  {
    uint64_t v2 = swift_bridgeObjectRetain();
    sub_1000CDD90(v2, (uint64_t)v4);
    debugOnly(_:)(v4);
    sub_1000A4944((uint64_t)v6, (uint64_t)v3);
    sub_1000A3B50((uint64_t)v3);
    sub_1000A4944((uint64_t)v4, (uint64_t)v6);
  }

  sub_1000A46B4((uint64_t)v5, (uint64_t)v3);
  sub_1000A46B4((uint64_t)v3, a1);
  sub_1000A4BB4();
}

void sub_10009D2C0( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t v10 = v8;
  LODWORD(v165) = a6;
  uint64_t v172 = a3;
  uint64_t v173 = a4;
  unint64_t v14 = *v7;
  uint64_t v168 = a2;
  unint64_t v169 = v14;
  sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  sub_1000226C8();
  __chkstk_darwin(v15);
  sub_100092B28();
  v167 = (void *)type metadata accessor for Date(0LL);
  uint64_t v16 = *(v167 - 1);
  __chkstk_darwin(v167);
  uint64_t v18 = (char *)&v142 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v170 = a1;
  sub_10016B2F0();
  if ((v19 & 1) != 0)
  {
    double v164 = a7;
    uint64_t v20 = type metadata accessor for OctaneSubscription();
    uint64_t v21 = swift_dynamicCastClass(a5, v20);
    if (v21)
    {
      uint64_t v163 = v21;
      uint64_t v166 = v8;
      uint64_t v22 = v171 + 11;
      uint64_t v23 = sub_1000A4C28(v21, v171[14]);
      static Date.now.getter(v23);
      uint64_t v24 = (void *)sub_100088140();
      v162 = *(void (**)(char *, void *))(v16 + 8);
      v162(v18, v167);
      if (v24)
      {
        uint64_t v25 = sub_1000B85C8(4u);
        uint64_t v26 = v171;
        if ((v27 & 1) != 0)
        {
          sub_10002A524();
        }

        else
        {
          double v161 = *(double *)&v25;
          char v144 = v24;
          uint64_t v28 = v170;
          sub_1000A46B4(v170 + 400, (uint64_t)v287);
          sub_1000A46B4((uint64_t)v287, (uint64_t)v289);
          if (!v289[1])
          {
            sub_1000A46B4(v28 + 512, (uint64_t)v286);
            sub_1000A46B4((uint64_t)v286, (uint64_t)v290);
            if (!v290[1])
            {
              sub_1000B4F18();
              if (v97)
              {
                uint64_t v98 = *(void *)(v163 + 80);
                uint64_t v99 = *(void *)(v163 + 88);
                if (v96 == v98 && v97 == v99)
                {
                  sub_10001EDA0();
                  goto LABEL_42;
                }

                LODWORD(v16sub_10006F0B8(12LL, 0) = _stringCompareWithSmolCheck(_:_:expecting:)(v96, v97, v98, v99, 0LL);
                sub_10001EDA0();
                if ((v160 & 1) != 0)
                {
LABEL_42:
                  double v101 = v161;
                  sub_1000A46B4(v28 + 560, (uint64_t)v177);
                  sub_1000A46B4((uint64_t)v177, (uint64_t)v178);
                  int v102 = sub_1000A3034((uint64_t)v178);
                  uint64_t v103 = (uint64_t)v167;
                  if (v102 == 1) {
                    goto LABEL_48;
                  }
                  if ((BYTE8(v178[19]) & 1) != 0)
                  {
                    char v104 = sub_1000A4898(3157554LL, 0xE300000000000000LL, 3157553LL);
                    sub_1000A490C();
                    if ((v104 & 1) == 0)
                    {
LABEL_48:
                      double v161 = *(double *)&a5;
                      Date.init(timeIntervalSinceReferenceDate:)(v101);
                      if (qword_1002A8CA8 != -1) {
                        swift_once(&qword_1002A8CA8, sub_100043918);
                      }
                      uint64_t v111 = (void *)qword_1002AAFE8;
                      Class isa = Date._bridgeToObjectiveC()().super.isa;
                      id v113 = [v111 stringFromDate:isa];

                      uint64_t v159 = static String._unconditionallyBridgeFromObjectiveC(_:)(v113);
                      uint64_t v160 = v114;

                      sub_1000A4BCC();
                      uint64_t v115 = v168;
                      uint64_t v116 = v166;
                      sub_10009CCC0(v170, v168, *(void *)(v169 + 152), v172, v173, v163, (uint64_t)v179);
                      if (v116)
                      {
                        sub_1000A4B4C();
                        sub_1000A4A98();
                        swift_bridgeObjectRelease();
                        goto LABEL_33;
                      }

                      uint64_t v166 = 0LL;
                      uint64_t v117 = v179[11];
                      uint64_t v118 = sub_1001BA8BC();
                      uint64_t v120 = v119;
                      uint64_t v122 = v121;
                      uint64_t v123 = (NSDecimal *)*(unsigned __int8 *)(v117 + 112);
                      uint64_t v124 = v181;
                      if (v181 <= 1) {
                        uint64_t v124 = 1LL;
                      }
                      if ((_DWORD)v123 == 3) {
                        Swift::Int v125 = 1LL;
                      }
                      else {
                        Swift::Int v125 = v124;
                      }
                      NSDecimal.init(_:)(v123, v125);
                      uint64_t v129 = static NSDecimal.* infix(_:_:)(v118, v120, v122, v126, v127, v128);
                      uint64_t v131 = v130;
                      unsigned int v133 = v132;
                      memcpy(v285, v180, sizeof(v285));
                      sub_100043804(v129, v131, v133, (uint64_t)v285, v179[13]);
                      uint64_t v134 = sub_1000A39D4(v179);
                      sub_1000A4DC0((uint64_t)v134, v135, &qword_1002AA7C0);
                      BOOL v136 = sub_1000A3034((uint64_t)&v175) != 1;
                      char v137 = v136 & v176;
                      swift_retain();
                      swift_unknownObjectRetain(v115);
                      sub_10001DBCC();
                      sub_10005272C(v165 & 1, v182, v115, v137);
                      char v46 = v204;
                      v167 = v201;
                      uint64_t v168 = v203;
                      uint64_t v165 = v202;
                      LODWORD(v163) = v200;
                      v162 = v190;
                      uint64_t v159 = v192;
                      uint64_t v160 = v191;
                      uint64_t v157 = v194;
                      uint64_t v158 = v193;
                      uint64_t v155 = v196;
                      uint64_t v156 = v195;
                      uint64_t v153 = v198;
                      uint64_t v154 = v197;
                      uint64_t v151 = v189;
                      uint64_t v152 = v199;
                      unint64_t v169 = v188;
                      uint64_t v149 = v186;
                      uint64_t v150 = v185;
                      LODWORD(v148) = v184;
                      char v47 = v183;
                      uint64_t v146 = v182[1];
                      uint64_t v147 = v182[0];
                      uint64_t v48 = v187;
                      uint64_t v145 = v182[2];
                      sub_10004DB28((uint64_t)v177, (uint64_t)v174, &qword_1002AA7C0);
                      if (sub_1000A3034((uint64_t)v174) == 1)
                      {
                        swift_release();
                        sub_1000A4A98();
                        uint64_t v45 = v170;
                        goto LABEL_24;
                      }

                      uint64_t v45 = v170;
                      if ((v174[312] & 1) != 0)
                      {
                        char v138 = sub_1000A4898(3157554LL, 0xE300000000000000LL, 3157553LL);
                        sub_1000A490C();
                        if ((v138 & 1) == 0)
                        {
                          sub_1000A4B4C();
                          sub_1000A4A98();
                          goto LABEL_24;
                        }
                      }

                      else
                      {
                        sub_1000A490C();
                      }

                      uint64_t v139 = sub_1000A1468(v45);
                      unint64_t v141 = v140;
                      sub_1000A4B4C();
                      sub_1000A4A98();
                      sub_10003AACC(v48, v169);
                      uint64_t v48 = v139;
                      unint64_t v169 = v141;
LABEL_24:
                      sub_1000A46B4(v45 + 560, (uint64_t)v284);
                      sub_1000A46B4((uint64_t)v284, (uint64_t)v291);
                      if (sub_1000A3034((uint64_t)v291) != 1)
                      {
                        if ((v291[312] & 1) != 0)
                        {
                          sub_1000A490C();
                        }

                        else
                        {
                          char v79 = sub_1000A4898(3157553LL, 0xE300000000000000LL, 3157554LL);
                          sub_1000A490C();
                          if ((v79 & 1) == 0) {
                            goto LABEL_31;
                          }
                        }

                        sub_1000A46B4(v45 + 480, (uint64_t)v283);
                        sub_1000A46B4((uint64_t)v283, (uint64_t)&v292);
                        if (v293)
                        {
                          sub_1000A19B0(v292, v293);
                          uint64_t v81 = v80;
                          uint64_t v82 = (void (*)(void *))sub_1000A2F58;
LABEL_32:
                          uint64_t v83 = sub_1000A13DC(v172, v173, v82, v81);
                          sub_100023EF4();
                          uint64_t v84 = *(void *)(v83 + 16);
                          LOBYTE(v178[0]) = v47;
                          v177[0] = 0;
                          uint64_t v85 = v164;
                          v164[3] = (uint64_t)&type metadata for LegacyInAppBuyResponse;
                          v85[4] = sub_1000A2F64();
                          uint64_t v86 = sub_1000A4A80((uint64_t)&unk_10027E870);
                          *uint64_t v85 = v86;
                          sub_100034E8C((uint64_t)v82, v81);
                          uint64_t v87 = v146;
                          *(void *)(v86 + 1sub_100019F7C(v0 + 6) = v147;
                          *(void *)(v86 + 2sub_100019F7C(v0 + 4) = v87;
                          *(void *)(v86 + 3sub_100019F7C(v0 + 2) = v145;
                          *(_BYTE *)(v86 + 4sub_10006F0B8(12LL, 0) = v178[0];
                          *(_BYTE *)(v86 + 41) = v148;
                          uint64_t v88 = v149;
                          *(void *)(v86 + 48) = v150;
                          *(void *)(v86 + 5sub_100019F7C(v0 + 6) = v88;
                          *(void *)(v86 + 6sub_100019F7C(v0 + 4) = v84;
                          *(_BYTE *)(v86 + 7sub_100019F7C(v0 + 2) = v177[0];
                          *(void *)(v86 + 8sub_10006F0B8(12LL, 0) = v83;
                          *(void *)(v86 + sub_100081CEC(v0 + 88) = v48;
                          uint64_t v89 = v151;
                          *(void *)(v86 + 9sub_100019F7C(v0 + 6) = v169;
                          *(void *)(v86 + 10sub_100019F7C(v0 + 4) = v89;
                          uint64_t v90 = v160;
                          *(void *)(v86 + 11sub_100019F7C(v0 + 2) = v162;
                          *(void *)(v86 + 12sub_10006F0B8(12LL, 0) = v90;
                          uint64_t v91 = v158;
                          *(void *)(v86 + 128) = v159;
                          *(void *)(v86 + 13sub_100019F7C(v0 + 6) = v91;
                          uint64_t v92 = v156;
                          *(void *)(v86 + 14sub_100019F7C(v0 + 4) = v157;
                          *(void *)(v86 + 15sub_100019F7C(v0 + 2) = v92;
                          uint64_t v93 = v154;
                          *(void *)(v86 + 16sub_10006F0B8(12LL, 0) = v155;
                          *(void *)(v86 + 168) = v93;
                          uint64_t v94 = v152;
                          *(void *)(v86 + 17sub_100019F7C(v0 + 6) = v153;
                          *(void *)(v86 + 18sub_100019F7C(v0 + 4) = v94;
                          *(_BYTE *)(v86 + 19sub_100019F7C(v0 + 2) = v163;
                          uint64_t v95 = v165;
                          *(void *)(v86 + 20sub_10006F0B8(12LL, 0) = v167;
                          *(void *)(v86 + 208) = v95;
                          *(void *)(v86 + 21sub_100019F7C(v0 + 6) = v168;
                          *(_BYTE *)(v86 + 22sub_100019F7C(v0 + 4) = v46;
                          goto LABEL_33;
                        }
                      }

uint64_t sub_10009E0D8(uint64_t *a1, const void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v284 = a4;
  v304 = a2;
  v298 = a1;
  uint64_t v7 = *v4;
  uint64_t v8 = type metadata accessor for IAPTransaction(0LL);
  uint64_t v278 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_1000227D0();
  uint64_t v279 = v9;
  uint64_t v295 = sub_100048814();
  uint64_t v276 = *(void *)(v295 - 8);
  __chkstk_darwin(v295);
  sub_1000227D0();
  uint64_t v275 = v10;
  uint64_t v271 = sub_1000175B0(&qword_1002AE8B0);
  sub_1000226C8();
  __chkstk_darwin(v11);
  sub_10009291C();
  uint64_t v272 = v12;
  sub_100092978();
  __chkstk_darwin(v13);
  sub_100092E80();
  uint64_t v268 = v14;
  uint64_t v269 = sub_1000175B0(&qword_1002AE8B8);
  sub_1000226C8();
  __chkstk_darwin(v15);
  sub_10009291C();
  uint64_t v270 = v16;
  sub_100092978();
  __chkstk_darwin(v17);
  sub_100092E80();
  uint64_t v273 = v18;
  sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  sub_1000226C8();
  __chkstk_darwin(v19);
  sub_10009291C();
  uint64_t v290 = v20;
  sub_100092978();
  __chkstk_darwin(v21);
  sub_100092AF0();
  uint64_t v288 = v22;
  sub_100092978();
  __chkstk_darwin(v23);
  sub_100092AF0();
  uint64_t v277 = v24;
  sub_100092978();
  __chkstk_darwin(v25);
  sub_100092E80();
  uint64_t v287 = v26;
  sub_1000175B0(&qword_1002AC060);
  sub_1000226C8();
  __chkstk_darwin(v27);
  sub_10009291C();
  uint64_t v274 = v28;
  sub_100092978();
  __chkstk_darwin(v29);
  sub_100092AF0();
  uint64_t v285 = v30;
  sub_100092978();
  __chkstk_darwin(v31);
  sub_100092E80();
  uint64_t v296 = v32;
  uint64_t v297 = type metadata accessor for Date(0LL);
  uint64_t v294 = *(void *)(v297 - 8);
  __chkstk_darwin(v297);
  sub_10009291C();
  *(void *)&__int128 v281 = v33;
  sub_100092978();
  __chkstk_darwin(v34);
  sub_100092AF0();
  uint64_t v282 = v35;
  sub_100092978();
  __chkstk_darwin(v36);
  sub_100092AF0();
  v289 = v37;
  sub_100092978();
  __chkstk_darwin(v38);
  sub_100092E80();
  uint64_t v291 = v39;
  uint64_t v40 = *(void *)(v7 + 152);
  uint64_t v300 = *(void *)(v7 + 144);
  uint64_t v301 = v40;
  uint64_t v42 = type metadata accessor for InAppBuyRoute.AdditionalBuyOptions(0LL, v300, v40, v41);
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = *(void *)(v43 + 64);
  uint64_t v45 = __chkstk_darwin(v42);
  __chkstk_darwin(v45);
  sub_100092E80();
  v286 = (char *)v46;
  __chkstk_darwin(v47);
  sub_100092E80();
  *(void *)&__int128 v280 = v48;
  __chkstk_darwin(v49);
  sub_100092E80();
  v299 = (void *)v50;
  uint64_t v52 = __chkstk_darwin(v51);
  uint64_t v54 = (char *)&v254 - v53;
  uint64_t v55 = __chkstk_darwin(v52);
  uint64_t v56 = __chkstk_darwin(v55);
  uint64_t v58 = (char *)&v254 - v57;
  uint64_t v308 = *(int *)(v56 + 52);
  LOBYTE(sub_10009B4A4(v4, v5, v6, 563LL, v7) = *((_BYTE *)a3 + v308);
  uint64_t v59 = *(void (**)(void, void))(v43 + 16);
  v309 = a3;
  uint64_t v306 = v60;
  v307 = v59;
  v59((char *)&v254 - v57, a3);
  v305 = v5;
  if ((v7 & 1) != 0)
  {
    BOOL v302 = 0;
  }

  else
  {
    sub_100019F58(v5 + 6, v5[9]);
    BOOL v302 = sub_100075EC8();
  }

  v283 = (char *)&v254 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v61 = v58;
  uint64_t v62 = v306;
  v303 = *(void (**)(char *, uint64_t))(v43 + 8);
  v303(v61, v306);
  char v63 = *((_BYTE *)v309 + v308);
  sub_1000A494C();
  if ((v63 & 1) != 0)
  {
    BOOL v64 = 0;
  }

  else
  {
    sub_100019F58(v305 + 6, v305[9]);
    BOOL v64 = sub_1000760F8();
  }

  sub_1000A486C();
  sub_1000A494C();
  uint64_t v65 = *(unsigned __int8 *)(v43 + 80);
  uint64_t v66 = v62;
  uint64_t v67 = (v65 + 32) & ~v65;
  uint64_t v68 = v67 + v44;
  unint64_t v69 = (v68 + 9) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v70 = swift_allocObject(&unk_10027E898, v69 + 873, v65 | 7);
  uint64_t v71 = v301;
  *(void *)(v70 + 1sub_100019F7C(v0 + 6) = v300;
  *(void *)(v70 + 2sub_100019F7C(v0 + 4) = v71;
  (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v70 + v67, v54, v66);
  uint64_t v72 = (_BYTE *)(v70 + v68);
  *uint64_t v72 = v302;
  BOOL v292 = v64;
  v72[1] = v64;
  uint64_t v73 = (uint64_t)v304;
  sub_1000A4B7C((void *)(v70 + v69), v304);
  sub_1000A2B6C(v73);
  NSString v74 = String._bridgeToObjectiveC()();
  uint64_t v75 = sub_100019310((uint64_t)&unk_10027E8C0, 32LL);
  *(void *)(v75 + 1sub_100019F7C(v0 + 6) = sub_1000A32F0;
  *(void *)(v75 + 2sub_100019F7C(v0 + 4) = v70;
  uint64_t v406 = (uint64_t)sub_1000A3384;
  unint64_t v407 = v75;
  v402 = _NSConcreteStackBlock;
  uint64_t v403 = 1107296256LL;
  v404 = sub_100124868;
  v405 = &unk_10027E8D8;
  uint64_t v76 = _Block_copy(&v402);
  ChannelPipeline.syncOperations.getter();
  sub_10009B4FC();
  AnalyticsSendEventLazy(v74, v76);
  uint64_t v77 = v76;
  uint64_t v78 = v309;
  _Block_release(v77);
  sub_100024F0C();

  uint64_t v79 = type metadata accessor for AllSetDialog();
  sub_100019310(v79, 448LL);
  uint64_t v80 = sub_10011BB88();
  char v400 = 0;
  char v397 = 1;
  unsigned __int8 v394 = 0;
  int v392 = v398;
  __int16 v393 = v399;
  char v391 = 1;
  v390[0] = *(_DWORD *)v396;
  *(_DWORD *)((char *)v390 + 3) = *(_DWORD *)&v396[3];
  *(_DWORD *)((char *)v389 + 3) = *(_DWORD *)&v395[3];
  v389[0] = *(_DWORD *)v395;
  uint64_t v81 = (uint64_t)v299;
  if (*((_BYTE *)v78 + v308) == 1 && *(_BYTE *)(v78[3] + 112) == 1)
  {
    sub_100019F58(v305 + 11, v305[14]);
    uint64_t v82 = sub_10001EDE0();
    uint64_t v83 = v291;
    static Date.now.getter(v82);
    uint64_t v84 = (void *)sub_100088140();
    (*(void (**)(uint64_t, uint64_t))(v294 + 8))(v83, v297);
    if (v84)
    {
      uint64_t v311 = 0LL;
      uint64_t v310 = 0LL;
      v312 = _swiftEmptyArrayStorage;
      __int16 v313 = 0;
      sub_1000A4CA8();
      uint64_t v314 = v85;
      unint64_t v315 = 0xEB00000000373231LL;
      uint64_t v316 = 0LL;
      char v317 = 1;
      uint64_t v319 = 0LL;
      uint64_t v318 = 0LL;
      unint64_t v320 = 0xF000000000000000LL;
      sub_1000A4680();
      BYTE8(v325) = 4;
      uint64_t v327 = 0LL;
      uint64_t v326 = 0LL;
      uint64_t v328 = v80;
      char v329 = 2;
      sub_1000A4D14();
      sub_10001ED6C();
      uint64_t v86 = v298;
      v298[3] = (uint64_t)&type metadata for LegacyInAppBuyResponse;
      v86[4] = sub_1000A2F64();
      uint64_t v87 = sub_100019310((uint64_t)&unk_10027E870, 225LL);
      uint64_t v88 = (void *)(v87 + 16);
      *uint64_t v86 = v87;

      sub_1000A49E8(v88, &v310);
      uint64_t v403 = 0LL;
      v402 = 0LL;
      v404 = (Class (*)(uint64_t))_swiftEmptyArrayStorage;
      LOWORD(v405) = v394;
      sub_1000A4CA8();
      uint64_t v406 = v89;
      unint64_t v407 = 0xEB00000000373231LL;
      uint64_t v408 = 0LL;
      char v409 = v90;
      sub_1000A47E8();
      char v420 = 4;
      uint64_t v421 = 0LL;
      uint64_t v422 = 0LL;
      uint64_t v423 = v80;
      char v424 = 2;
LABEL_36:
      char v137 = &v402;
      goto LABEL_37;
    }

    sub_10001ED6C();
  }

  uint64_t v91 = (uint64_t)v304;
  uint64_t v92 = v305;
  uint64_t v93 = v296;
  if ((v78[2] & 1) == 0)
  {
    if (!*((void *)v304 + 33) || (sub_10001DBCC(), !sub_1000A4D50().value))
    {
      sub_1000A494C();
      uint64_t v94 = v78[3];
      int v95 = *(unsigned __int8 *)(v94 + 112);
      if (v95 == 1)
      {
        if (sub_1000A4DD4())
        {
          sub_1000A486C();
          sub_1000A4CDC(v91 + 560, v96, &qword_1002AA7C0);
          sub_1000A45E0();
          sub_1000A4AE4();
          char v97 = *(_BYTE *)(v91 + 200);
          uint64_t v98 = v91;
          uint64_t v99 = *(void *)(v91 + 184);
          uint64_t v100 = *(void *)(v98 + 192);
          *(void *)&double v101 = sub_1000A49A0(v98).n128_u64[0];
          char v103 = *(_BYTE *)(v102 + 96);
          uint64_t v293 = v80;
          unint64_t v104 = *(void *)(v102 + 80);
          uint64_t v105 = *(void *)(v102 + 88);
          sub_1000A4874(v102, v101, v106);
          sub_10001EDA0();
          sub_1000A46F8();
          unint64_t v320 = v104;
          uint64_t v321 = v105;
          char v322 = v103;
          __n128 v323 = sub_1000A4A44();
          __int128 v324 = v280;
          __int128 v325 = v281;
          uint64_t v326 = v99;
          uint64_t v327 = v100;
          LOBYTE(v328) = v97;
          sub_1000A48E0();
          uint64_t v107 = sub_1000A44E4((__n128)xmmword_1001FB240);
          sub_10004DB28(v107, v108, &qword_1002AA7C0);
          sub_1000A4B7C(&v402, &v310);
          sub_10002A674();
          sub_10016AC94();
          sub_1000A4C0C();
          uint64_t v109 = sub_1000A4D5C();
          sub_100052934(v109, v110, v111, v112);
LABEL_22:
          uint64_t v131 = v298;
          v298[3] = (uint64_t)&type metadata for LegacyInAppBuyResponse;
          v131[4] = sub_1000A2F64();
          uint64_t v132 = sub_100019310((uint64_t)&unk_10027E870, 225LL);
          *uint64_t v131 = v132;
          sub_1000A49E8((void *)(v132 + 16), v342);
          v330[1] = 0LL;
          v330[0] = 0LL;
          sub_1000A4B9C((uint64_t)_swiftEmptyArrayStorage);
          int v331 = v133;
          sub_1000A4780();
          int v332 = *(_DWORD *)((char *)v390 + 3);
          *(_DWORD *)(v135 + 57) = v134;
          sub_1000A4B54();
          uint64_t v333 = 0LL;
          uint64_t v334 = 1LL;
          __int128 v335 = 0u;
          __int128 v336 = 0u;
          __int128 v337 = 0u;
          __int128 v338 = 0u;
          char v339 = 22;
          int v340 = v389[0];
          sub_1000A4B34(*(_DWORD *)(v136 + 3));
          char v341 = 2;
          char v137 = (void ***)v330;
          goto LABEL_37;
        }

        int v95 = *(unsigned __int8 *)(v94 + 112);
      }

      if (v95 == 2)
      {
        BOOL v113 = sub_1000A4DD4();
        sub_1000A486C();
        if (v113)
        {
          sub_1000A4CDC(v91 + 560, v114, &qword_1002AA7C0);
          sub_1000A45E0();
          uint64_t v293 = v80;
          sub_1000A4AE4();
          char v115 = *(_BYTE *)(v91 + 200);
          uint64_t v116 = v91;
          uint64_t v117 = *(void *)(v91 + 184);
          uint64_t v118 = *(void *)(v91 + 192);
          *(void *)&double v119 = sub_1000A49A0(v116).n128_u64[0];
          char v121 = *(_BYTE *)(v120 + 96);
          unint64_t v123 = *(void *)(v120 + 80);
          uint64_t v122 = *(void *)(v120 + 88);
          sub_1000A4874(v120, v119, v124);
          sub_10001EDA0();
          sub_1000A46F8();
          unint64_t v320 = v123;
          uint64_t v321 = v122;
          char v322 = v121;
          __n128 v323 = sub_1000A4A44();
          __int128 v324 = v280;
          __int128 v325 = v281;
          uint64_t v326 = v117;
          uint64_t v327 = v118;
          LOBYTE(v328) = v115;
          sub_1000A48E0();
          uint64_t v125 = sub_1000A44E4((__n128)xmmword_1001FB240);
          sub_10004DB28(v125, v126, &qword_1002AA7C0);
          sub_1000A4B7C(&v402, &v310);
          sub_10002A674();
          sub_10016AC94();
          sub_1000A4C0C();
          uint64_t v127 = sub_1000A4D5C();
          sub_100052948(v127, v128, v129, v130);
          goto LABEL_22;
        }
      }

      else
      {
        sub_1000A486C();
      }
    }
  }

  int v138 = *(unsigned __int8 *)(v78[3] + 112);
  sub_10016B0A4();
  if (v138 == 3)
  {
    if (v139 >= 2)
    {
      uint64_t v140 = type metadata accessor for MultipleQuantitiesNotAllowedDialog();
      sub_100019310(v140, 448LL);
      uint64_t v141 = sub_10011C4A8();
LABEL_29:
      uint64_t v143 = v141;
      swift_retain();
      sub_10001ED6C();
      if (*((_BYTE *)v78 + v308)) {
        char v144 = 3;
      }
      else {
        char v144 = 0;
      }
      uint64_t v311 = 0LL;
      uint64_t v310 = 0LL;
      v312 = _swiftEmptyArrayStorage;
      __int16 v313 = 1;
      uint64_t v314 = 0x3233363232333731LL;
      unint64_t v315 = 0xEB00000000373231LL;
      sub_1000A4D24();
      unint64_t v320 = 0xF000000000000000LL;
      sub_1000A4680();
      BYTE8(v325) = v144;
      uint64_t v327 = 0LL;
      uint64_t v326 = 0LL;
      uint64_t v328 = v143;
      char v329 = 1;
      sub_1000A4D14();
      sub_100024F0C();
      *(void *)(v91 + 3sub_100019F7C(v0 + 2) = sub_1000A4A8C((uint64_t)&type metadata for LegacyInAppBuyResponse);
      uint64_t v145 = sub_100019310((uint64_t)&unk_10027E870, 225LL);
      *(void *)uint64_t v91 = v145;
      sub_1000A49E8((void *)(v145 + 16), &v310);
      uint64_t v403 = 0LL;
      v402 = 0LL;
      v404 = (Class (*)(uint64_t))_swiftEmptyArrayStorage;
      LOWORD(v405) = 1;
      uint64_t v406 = 0x3233363232333731LL;
      unint64_t v407 = 0xEB00000000373231LL;
      uint64_t v408 = 0LL;
      char v409 = v391;
      sub_1000A47E8();
      char v420 = v144;
      uint64_t v422 = 0LL;
      uint64_t v421 = 0LL;
      uint64_t v423 = v143;
      char v424 = 1;
      goto LABEL_36;
    }
  }

  else if (v139 >= 11)
  {
    uint64_t v142 = type metadata accessor for InvalidQuantityDialog();
    sub_100019310(v142, 448LL);
    uint64_t v141 = sub_10011C390();
    goto LABEL_29;
  }

  uint64_t v147 = *(void *)(v91 + 496);
  uint64_t v146 = *(void *)(v91 + 504);
  if (v146)
  {
    UUID.init(uuidString:)(*(void *)(v91 + 496));
    if (sub_10001D158(v93, 1LL, v295) == 1)
    {
      sub_10004DB00(v93, &qword_1002AC060);
      uint64_t v148 = type metadata accessor for InvalidAppAccountTokenDialog();
      sub_100019310(v148, 448LL);
      uint64_t v149 = sub_10011C500();
      swift_retain();
      sub_10001ED6C();
      uint64_t v311 = 0LL;
      uint64_t v310 = 0LL;
      v312 = _swiftEmptyArrayStorage;
      __int16 v313 = 1;
      sub_1000A4C64();
      sub_1000A481C();
      uint64_t v314 = v81;
      unint64_t v315 = v80;
      sub_1000A4D24();
      unint64_t v320 = 0xF000000000000000LL;
      sub_1000A4680();
      BYTE8(v325) = 0;
      uint64_t v327 = 0LL;
      uint64_t v326 = 0LL;
      uint64_t v328 = v149;
      char v329 = 2;
      sub_1000A4D14();
      sub_100024F0C();
      *(void *)(v91 + 3sub_100019F7C(v0 + 2) = sub_1000A4A8C((uint64_t)&type metadata for LegacyInAppBuyResponse);
      uint64_t v150 = sub_100019310((uint64_t)&unk_10027E870, 225LL);
      *(void *)uint64_t v91 = v150;
      sub_1000A49E8((void *)(v150 + 16), &v310);
      uint64_t v403 = 0LL;
      v402 = 0LL;
      v404 = (Class (*)(uint64_t))_swiftEmptyArrayStorage;
      LOWORD(v405) = 1;
      uint64_t v406 = v81;
      unint64_t v407 = v80;
      uint64_t v408 = 0LL;
      char v409 = v391;
      uint64_t v411 = 0LL;
      uint64_t v410 = 0LL;
      unint64_t v412 = 0xF000000000000000LL;
      uint64_t v413 = 0LL;
      uint64_t v414 = 0LL;
      uint64_t v415 = 1LL;
      char v420 = 0;
      __int128 v419 = 0u;
      __int128 v418 = 0u;
      __int128 v417 = 0u;
      __int128 v416 = 0u;
      uint64_t v422 = 0LL;
      uint64_t v421 = 0LL;
      uint64_t v423 = v149;
      char v424 = 2;
      goto LABEL_36;
    }

    sub_10004DB00(v93, &qword_1002AC060);
  }

  uint64_t v151 = v92[9];
  uint64_t v264 = v146;
  uint64_t v265 = v92 + 6;
  sub_100019F58(v92 + 6, v151);
  sub_100075EE8(*v78, v78[1]);
  uint64_t v296 = v152;
  sub_1000A46B4(v91 + 560, (uint64_t)&v310);
  sub_1000A46B4((uint64_t)&v310, (uint64_t)&v402);
  int v153 = sub_1000A3034((uint64_t)&v402);
  uint64_t v262 = v147;
  if (v153 == 1) {
    goto LABEL_45;
  }
  if (v425 == 1)
  {
    sub_1000A490C();
  }

  else
  {
    char v154 = sub_100048720(3157553LL, 0xE300000000000000LL, 3157554LL, 0xE300000000000000LL);
    sub_1000A490C();
    if ((v154 & 1) == 0) {
      goto LABEL_45;
    }
  }

  sub_1000A46B4(v91 + 480, (uint64_t)v401);
  sub_1000A46B4((uint64_t)v401, (uint64_t)&v426);
  if (v427)
  {
    sub_1000A19B0(v426, v427);
    uint64_t v266 = v155;
    uint64_t v267 = sub_1000A2F58;
    goto LABEL_46;
  }

LABEL_45:
  uint64_t v266 = 0LL;
  uint64_t v267 = 0LL;
LABEL_46:
  uint64_t v156 = v78[3];
  uint64_t v157 = type metadata accessor for OctaneSubscription();
  uint64_t v158 = swift_dynamicCastClass(v156, v157);
  uint64_t v293 = v80;
  if (!v158)
  {
    sub_1000A4DB4();
    sub_10016B0A4();
    sub_100086710();
    LODWORD(v291) = 0;
    v283 = 0LL;
    uint64_t v167 = 0LL;
    sub_1000A47D4();
    uint64_t v169 = v295;
    goto LABEL_118;
  }

  v299 = (void *)v158;
  uint64_t v263 = v156;
  uint64_t v159 = *(void *)(v91 + 408);
  if (!v159)
  {
    swift_retain();
    char v261 = 0LL;
    uint64_t v166 = 0LL;
LABEL_56:
    LODWORD(v257) = 1;
    uint64_t v165 = v289;
    goto LABEL_57;
  }

  uint64_t v160 = *(void *)(v91 + 400);
  uint64_t v364 = v160;
  uint64_t v365 = v159;
  swift_retain();
  sub_10001DBCC();
  double v161 = (uint64_t *)sub_1000A4BDC();
  sub_1000A0B1C(v161, v162, v163, v164);
  sub_10001EDA0();
  char v261 = (void *)v342[0];
  uint64_t v165 = v289;
  if (v342[0])
  {
    LODWORD(v257) = 0;
    uint64_t v166 = 0LL;
LABEL_57:
    v174 = *(void **)(v91 + 520);
    uint64_t v260 = v166;
    if (v174
      && (uint64_t v364 = *(void *)(v91 + 512),
          uint64_t v365 = (uint64_t)v174,
          sub_10001DBCC(),
          uint64_t v175 = (uint64_t *)sub_1000A4BDC(),
          sub_1000A0B98(v175, v176, v177, v178),
          sub_10001EDA0(),
          (v174 = (void *)v342[0]) != 0LL))
    {
      LODWORD(v291) = *((unsigned __int8 *)v78 + v308) ^ 1;
      if (v166)
      {
        int v179 = 0;
        LODWORD(v258) = 1;
LABEL_62:
        int v256 = v179;
        v259 = v174;
        uint64_t v180 = v306;
        sub_1000A494C();
        LODWORD(v28sub_10006F0B8(12LL, 0) = 0;
        goto LABEL_68;
      }

      int v181 = *(unsigned __int8 *)(v342[0] + 104LL);
      int v179 = 1;
      LODWORD(v258) = 1;
      if (v181 != 1) {
        goto LABEL_62;
      }
    }

    else
    {
      LODWORD(v258) = 0;
      LODWORD(v291) = 0;
      int v179 = 0;
      if (v166) {
        goto LABEL_62;
      }
    }

    sub_1000A494C();
    v259 = v174;
    if ((_DWORD)v257)
    {
      sub_1000A4DB4();
      LODWORD(v28sub_10006F0B8(12LL, 0) = sub_100087F40() ^ 1;
    }

    else
    {
      LODWORD(v28sub_10006F0B8(12LL, 0) = 0;
    }

    int v256 = 1;
    uint64_t v180 = v306;
LABEL_68:
    sub_1000A486C();
    v289 = v92 + 11;
    sub_100023BAC((uint64_t)(v92 + 11), (uint64_t)&v364);
    sub_1000A4D70();
    v286 = (char *)v78 + *(int *)(v180 + 44);
    uint64_t v182 = v287;
    sub_1000A33A4((uint64_t)v286, v287);
    uint64_t v167 = v297;
    uint64_t v183 = sub_10001D158(v182, 1LL, v297);
    if ((_DWORD)v183 == 1)
    {
      static Date.now.getter(v183);
      sub_10004DB00(v182, (uint64_t *)&unk_1002AFCD0);
      uint64_t v184 = v294;
    }

    else
    {
      uint64_t v184 = v294;
      (*(void (**)(void *, uint64_t, uint64_t))(v294 + 32))(v165, v182, v167);
    }

    sub_1000DA370();
    uint64_t v186 = v185;
    v255 = *(void (**)(void *, uint64_t))(v184 + 8);
    v255(v165, v167);
    if (v186)
    {
      sub_100019F7C(&v364);
      uint64_t v187 = sub_1000B3DDC();
      uint64_t v189 = sub_1000D868C(v187, v188);
      sub_10001A3F8();
      uint64_t v190 = (uint64_t)v309;
      uint64_t v191 = v306;
      uint64_t v167 = v293;
      if (v189)
      {
        uint64_t v192 = v299;
        int v193 = sub_100023660((uint64_t)v299);
        if (v193)
        {
          if (v193 == 2)
          {
            uint64_t v194 = v305;
            sub_100019F58(v289, v305[14]);
            uint64_t v195 = (char *)sub_100086638(v189, (uint64_t)v192, v186);
            sub_10002A524();

            uint64_t v196 = (uint64_t)v194;
            v283 = 0LL;
            uint64_t v167 = 0LL;
            LODWORD(v28sub_10006F0B8(12LL, 0) = 0;
            LODWORD(v19sub_10006F0B8(12LL, 0) = 1;
LABEL_90:
            sub_1000A47D4();
            goto LABEL_97;
          }

  uint64_t v278 = 0LL;
  *(void *)&uint64_t v279 = 0LL;
LABEL_46:
  uint64_t v162 = *(void *)(v68 + 24);
  uint64_t v163 = type metadata accessor for OctaneSubscription();
  *(void *)&v305 = swift_dynamicCastClass(v162, v163);
  if (!(void)v305)
  {
    sub_100019F58(v79 + 11, v79[14]);
    sub_10016B0A4();
    sub_100086710();
    LODWORD(v29sub_100019F7C(v0 + 4) = 0;
    *(void *)&uint64_t v295 = 0LL;
    uint64_t v170 = 0LL;
    LODWORD(v299) = 2;
    LODWORD(v301) = 22;
    uint64_t v171 = v307;
    goto LABEL_119;
  }

  uint64_t v276 = v162;
  double v164 = v78[51];
  if (!v164)
  {
    swift_retain();
    v178 = 0LL;
    uint64_t v274 = 0LL;
    goto LABEL_55;
  }

  uint64_t v165 = v78[50];
  uint64_t v166 = *(void *)v68;
  uint64_t v167 = *(void *)(v68 + 8);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v168 = v305;
  uint64_t v184 = sub_1000DE5A4(v165, v164, v305, v166, v167);
  swift_bridgeObjectRelease();
  if (v184)
  {
    uint64_t v274 = v184;
    v178 = 0LL;
LABEL_55:
    int v179 = v78[65];
    if (v179)
    {
      uint64_t v272 = v178;
      uint64_t v180 = v151;
      int v181 = v78[64];
      uint64_t v182 = *(void *)v68;
      uint64_t v183 = *(void *)(v68 + 8);
      swift_bridgeObjectRetain();
      uint64_t v185 = sub_1000DEC00(v181, v179, v305, v182, v183);
      swift_bridgeObjectRelease();
      LODWORD(v29sub_100019F7C(v0 + 4) = *(unsigned __int8 *)(v68 + v315) ^ 1;
      uint64_t v151 = v180;
      v178 = v272;
    }

    else
    {
      LODWORD(v29sub_100019F7C(v0 + 4) = 0;
      uint64_t v185 = 0LL;
    }

    uint64_t v275 = (uint64_t)v185;
    uint64_t v186 = v298;
    uint64_t v271 = v151;
    if (v178 || v185 && *((_BYTE *)v185 + 104) != 1)
    {
      sub_100067DA4(v68, v298, &qword_1002B0A48);
    }

    else
    {
      sub_100067DA4(v68, v298, &qword_1002B0A48);
      if (!v274)
      {
        sub_100019F58(v79 + 11, v79[14]);
        LODWORD(v27sub_100019F7C(v0 + 2) = sub_100087F40() ^ 1;
LABEL_63:
        sub_10004DB00(v186, &qword_1002B0A48);
        *(void *)&v298 = v314 + 11;
        sub_1000E4EAC((uint64_t)(v314 + 11), (uint64_t)v346);
        sub_100019F58(v346, v347);
        uint64_t v187 = v68 + *(int *)(v308 + 44);
        uint64_t v188 = v299;
        sub_100067DA4(v187, v299, (uint64_t *)&unk_1002AFCD0);
        uint64_t v189 = sub_10001D158(v188, 1LL, v311);
        if ((_DWORD)v189 == 1)
        {
          uint64_t v190 = v301;
          static Date.now.getter(v189);
          sub_10004DB00(v188, (uint64_t *)&unk_1002AFCD0);
          uint64_t v191 = v306;
        }

        else
        {
          uint64_t v191 = v306;
          uint64_t v190 = v301;
          (*(void (**)(void, uint64_t, uint64_t))(v306 + 32))(v301, v188, v311);
        }

        sub_1000DA370();
        uint64_t v192 = v190;
        uint64_t v194 = v193;
        uint64_t v270 = *(void (**)(uint64_t, uint64_t))(v191 + 8);
        v270(v192, v311);
        if (v194)
        {
          sub_100019F7C(v346);
          uint64_t v195 = sub_1000B3DDC();
          uint64_t v197 = sub_1000D868C(v195, v196);
          swift_bridgeObjectRelease();
          if (v197)
          {
            int v198 = sub_100023660(v305);
            if (v198)
            {
              uint64_t v199 = v314;
              if (v198 == 2)
              {
                sub_100019F58((void *)v298, v314[14]);
                uint64_t v200 = sub_100086638(v197, v305, v194);
                swift_release();

                *(void *)&uint64_t v295 = 0LL;
                uint64_t v170 = 0LL;
                LODWORD(v27sub_100019F7C(v0 + 2) = 0;
                goto LABEL_96;
              }
            }

            else
            {
              uint64_t v199 = v314;
              if (v275)
              {
                uint64_t v200 = v194;
                sub_1000B5A64(2u);
                char v223 = type metadata accessor for CannotRedeemOfferCodeDialog();
                swift_allocObject(v223, 448LL, 7LL);
                double v224 = sub_10011BF98();
                swift_release();
                swift_release();

                *(void *)&uint64_t v295 = 0LL;
                uint64_t v170 = 0LL;
                LODWORD(v27sub_100019F7C(v0 + 2) = 0;
                uint64_t v207 = 0;
                LODWORD(v299) = 1;
                LODWORD(v301) = 15;
                v309 = (char *)v224;
                goto LABEL_97;
              }
            }

            double v225 = *(void *)(v305 + 80);
            uint64_t v226 = *(void *)(v305 + 88);
            uint64_t v200 = v194;
            swift_bridgeObjectRetain();
            sub_1000B534C(v225, v226);
            swift_bridgeObjectRelease();
            sub_1000B53F0(5);
            sub_1000B57E4();
            if (v275 | v178 || v274)
            {
              swift_retain();
              sub_1000B6E74();
              swift_release();
            }

            sub_100019F58((void *)v298, v199[14]);
            sub_100089348(v200, v294 & 1);

            swift_release();
            uint64_t v170 = *(void *)(v305 + 88);
            *(void *)&uint64_t v295 = *(void *)(v305 + 80);
            swift_bridgeObjectRetain();
            LODWORD(v27sub_100019F7C(v0 + 2) = 0;
            uint64_t v207 = 0;
            goto LABEL_93;
          }
        }

        else
        {
          sub_100019F7C(v346);
        }

        sub_100019F58((void *)v298, v314[14]);
        int v201 = v316;
        sub_100087044();
        uint64_t v200 = v202;
        uint64_t v203 = *((unsigned __int8 *)v201 + v315);
        char v204 = v295;
        sub_100067DA4((uint64_t)v201, v295, &qword_1002B0A48);
        if (v203 == 1)
        {
          uint64_t v205 = v178;
          uint64_t v206 = v289;
          sub_100067DA4(v204 + *(int *)(v308 + 44), v289, (uint64_t *)&unk_1002AFCD0);
          sub_10004DB00(v204, &qword_1002B0A48);
          uint64_t v207 = 1;
          uint64_t v208 = sub_10001D158(v206, 1LL, v311);
          sub_10004DB00(v206, (uint64_t *)&unk_1002AFCD0);
          if (v208 == 1)
          {
            *(void *)&uint64_t v295 = 0LL;
            uint64_t v170 = 0LL;
            LODWORD(v299) = 2;
            LODWORD(v301) = 22;
            v178 = v205;
            goto LABEL_97;
          }

          sub_100019F58((void *)v298, v314[14]);
          swift_bridgeObjectRetain();
          sub_10008C1CC();
          uint64_t v211 = v210;
          swift_bridgeObjectRelease();
          v178 = v205;
          if (!v211)
          {
            *(void *)&uint64_t v295 = 0LL;
            uint64_t v170 = 0LL;
            uint64_t v207 = 1;
            LODWORD(v299) = 2;
            LODWORD(v301) = 22;
            uint64_t v78 = v313;
            goto LABEL_97;
          }

          uint64_t v212 = v211;
          sub_1000B52F0();
          uint64_t v214 = v213;
          sub_1000B52F0();
          uint64_t v216 = v215;

          uint64_t v78 = v313;
          if (v214 == v216)
          {

            *(void *)&uint64_t v295 = 0LL;
            uint64_t v207 = 1;
            LODWORD(v299) = 2;
            LODWORD(v301) = 22;
            uint64_t v200 = v212;
            uint64_t v170 = 0LL;
            goto LABEL_97;
          }

          *(void *)&uint64_t v295 = 0LL;
          uint64_t v170 = 0LL;
LABEL_96:
          uint64_t v207 = 1;
          LODWORD(v299) = 2;
          LODWORD(v301) = 22;
LABEL_97:
          uint64_t v227 = swift_allocObject(&unk_100281CB8, 17LL, 7LL);
          *(_BYTE *)(v227 + 1sub_100019F7C(v0 + 6) = -8;
          if (v207)
          {
            if (v275)
            {
              swift_retain();
              sub_1000B6E74();
              swift_release();
            }

            if (v178)
            {
              swift_retain();
              sub_1000B6E74();
              swift_release();
            }

            if (v274)
            {
              swift_retain();
              sub_1000B6E74();
              swift_release();
            }

            uint64_t v228 = v314;
            uint64_t v229 = sub_1000A0BE4(v227, (uint64_t)v314);
            sub_1000B7404(v304, v229);
            sub_100019F58((void *)v298, v228[14]);
            sub_100089348(v200, v294 & 1);
          }

          if ((v272 & 1) != 0 && *(void *)(v305 + 136))
          {
            swift_retain();
            sub_1000B6E74();
            uint64_t v230 = v314;
            unint64_t v231 = sub_1000A0BE4(v227, (uint64_t)v314);
            sub_1000B7404(v304, v231);
            sub_100019F58((void *)v298, v230[14]);
            sub_100089348(v200, v294 & 1);
            swift_release();
          }

          uint64_t v232 = v300;
          sub_100067DA4(v187, v300, (uint64_t *)&unk_1002AFCD0);
          if (sub_10001D158(v232, 1LL, v311) == 1)
          {
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            sub_10004DB00(v232, (uint64_t *)&unk_1002AFCD0);
          }

          else
          {
            sub_10004DB00(v232, (uint64_t *)&unk_1002AFCD0);
            char v233 = sub_1000B85C8(4u);
            if ((v234 & 1) == 0)
            {
              *(void *)&v289 = v227;
              uint64_t v272 = v178;
              *(void *)&uint64_t v300 = v170;
              uint64_t v235 = *(double *)&v233;
              uint64_t v236 = sub_1000B4050();
              uint64_t v237 = v293;
              Date.init(timeIntervalSinceReferenceDate:)(v236);
              uint64_t v238 = v292;
              Date.init(timeIntervalSinceReferenceDate:)(v235);
              sub_1000E4EAC(v298, (uint64_t)v346);
              uint64_t v239 = sub_100019F58(v346, v347);
              uint64_t v240 = *(void *)(v305 + 192);
              uint64_t v241 = *(void *)(v305 + 200);
              uint64_t v242 = v316[1];
              v269[3] = *v316;
              v269[4] = v240;
              v269[1] = v239;
              v269[2] = v242;
              sub_100046F3C( (unint64_t *)&qword_1002AE8D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (const char *)&protocol conformance descriptor for Date);
              uint64_t v244 = v243;
              *(void *)&v305 = v241;
              swift_bridgeObjectRetain();
              uint64_t v245 = v311;
              uint64_t v246 = dispatch thunk of static Comparable.<= infix(_:_:)(v237, v238, v311, v244);
              v269[0] = v200;
              if ((v246 & 1) == 0)
              {
                __break(1u);
                JUMPOUT(0x1000DD454LL);
              }

              uint64_t v247 = v283;
              uint64_t v248 = v280;
              uint64_t v249 = v280 + *(int *)(v283 + 48);
              uint64_t v250 = v306;
              uint64_t v251 = *(void (**)(uint64_t, uint64_t, uint64_t))(v306 + 16);
              v251(v280, v237, v245);
              v251(v249, (uint64_t)v238, v245);
              uint64_t v252 = v284;
              uint64_t v253 = v284 + *(int *)(v247 + 48);
              v251(v284, v248, v245);
              v251(v253, v249, v245);
              uint64_t v254 = *(void (**)(uint64_t, uint64_t, uint64_t))(v250 + 32);
              v255 = v282;
              v254(v282, v252, v245);
              int v256 = v270;
              v270(v253, v245);
              uint64_t v257 = v252 + *(int *)(v247 + 48);
              v254(v252, v248, v245);
              v254(v257, v249, v245);
              v254(v255 + *(int *)(v281 + 36), v257, v245);
              v256(v252, v245);
              uint64_t v258 = v285;
              sub_1000925C4(v255, v285, &qword_1002AE8B8);
              sub_1000B52F0();
              LOBYTE(v249) = sub_10008BE7C();
              swift_bridgeObjectRelease();
              sub_10004DB00(v258, &qword_1002AE8B8);
              sub_100019F7C(v346);
              if ((v249 & 1) != 0)
              {
                sub_100019F58((void *)v298, v314[14]);
                sub_100087858();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                v256((uint64_t)v292, v245);
                v256(v293, v245);
                swift_release();
                LODWORD(v301) = 21;
              }

              else
              {
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                v256((uint64_t)v292, v245);
                v256(v293, v245);
                swift_release();
              }

              uint64_t v78 = v313;
              uint64_t v171 = v307;
              uint64_t v170 = v300;
              goto LABEL_118;
            }

            swift_release();
            swift_release();
            swift_release();
            swift_release();
          }

          swift_release();
          uint64_t v171 = v307;
LABEL_118:
          uint64_t v151 = v271;
LABEL_119:
          sub_1000925C4((uint64_t)v317, (uint64_t)v346, &qword_1002AA7C0);
          v259 = sub_1000A3034((uint64_t)v346);
          *(void *)&v289 = v259 != 1;
          if (v259 != 1)
          {
            sub_1000B6E24(v367);
            sub_1000925C4((uint64_t)v317, (uint64_t)v344, &qword_1002AA7C0);
            if ((v345 & 1) == 0)
            {
              uint64_t v151 = v78[43];
              uint64_t v273 = v78[42];
            }

            uint64_t v260 = v297;
            if (v151)
            {
              UUID.init(uuidString:)(v273);
              if (sub_10001D158(v260, 1LL, v171) == 1)
              {
                sub_10004DB00(v260, &qword_1002AC060);
              }

              else
              {
                char v261 = v170;
                uint64_t v262 = v288;
                uint64_t v263 = v287;
                (*(void (**)(void, uint64_t, uint64_t))(v288 + 32))(v287, v260, v171);
                uint64_t v264 = v286;
                (*(void (**)(void, uint64_t, uint64_t))(v262 + 16))(v286, v263, v171);
                sub_10001762C(v264, 0LL, 1LL, v171);
                sub_1000B7680();
                uint64_t v265 = *(void (**)(uint64_t, uint64_t))(v262 + 8);
                uint64_t v170 = v261;
                v265(v263, v171);
              }
            }
          }

          sub_1000B5BB8();
          uint64_t v267 = (char *)&loc_1000DC918 + dword_1000DD454[v266];
          *(void *)&uint64_t v300 = v170;
          __asm { BR              X10 }
        }

        sub_10004DB00(v204, &qword_1002B0A48);
        *(void *)&uint64_t v295 = 0LL;
        uint64_t v170 = 0LL;
        uint64_t v207 = 1;
LABEL_93:
        LODWORD(v299) = 2;
        LODWORD(v301) = 22;
        goto LABEL_97;
      }
    }

    LODWORD(v27sub_100019F7C(v0 + 2) = 0;
    goto LABEL_63;
  }

  uint64_t v169 = (uint64_t *)v294;
  sub_100067DA4(v68, v294, &qword_1002B0A48);
  if (*(_BYTE *)(v68 + v315) == 1)
  {
    sub_10004DB00((uint64_t)v169, &qword_1002B0A48);
LABEL_54:
    sub_1000DEA28(v165, v164, v168, *(void *)v68, *(void *)(v68 + 8));
    v178 = v209;
    uint64_t v274 = 0LL;
    goto LABEL_55;
  }

  uint64_t v172 = *v169;
  uint64_t v173 = v169[1];
  v174 = v165;
  uint64_t v275 = v165;
  uint64_t v175 = v169;
  uint64_t v176 = sub_1000DDA6C(v174, v164, v172, v173, v168, (uint64_t)v78);
  v177 = (uint64_t)v175;
  uint64_t v165 = v275;
  sub_10004DB00(v177, &qword_1002B0A48);
  if (v176 == 22) {
    goto LABEL_54;
  }
  if ((*(_BYTE *)(v68 + 16) & 1) == 0)
  {
    uint64_t v217 = type metadata accessor for UnableToPurchaseDialog();
    swift_allocObject(v217, 448LL, 7LL);
    int v218 = sub_10011C2E8();
    swift_release();
    v309 = (char *)v218;
  }

  v344[0] = 0uLL;
  *(void *)&v344[1] = _swiftEmptyArrayStorage;
  WORD4(v344[1]) = 0;
  int v219 = v309;
  *(void *)&v344[2] = 0x3233363232333731LL;
  *((void *)&v344[2] + 1) = 0xEB00000000373231LL;
  *(void *)&v344[3] = 0LL;
  BYTE8(v344[3]) = 1;
  v344[4] = 0uLL;
  v344[5] = 0xF000000000000000LL;
  *(void *)&v344[6] = 0LL;
  *((void *)&v344[6] + 1) = 1LL;
  memset(&v344[7], 0, 64);
  LOBYTE(v344[11]) = 18;
  *(void *)&v344[12] = 0LL;
  *((void *)&v344[11] + 1) = 0LL;
  *((void *)&v344[12] + 1) = v309;
  LOBYTE(v344[13]) = 1;
  uint64_t v220 = v310;
  v310[3] = (uint64_t)&type metadata for LegacyInAppBuyResponse;
  v220[4] = sub_1000A2F64();
  uint64_t v221 = swift_allocObject(&unk_100281C90, 225LL, 7LL);
  uint64_t v222 = (void *)(v221 + 16);
  void *v220 = v221;
  sub_100053590((uint64_t)v344);
  sub_100034E8C((uint64_t)v278, v279);
  swift_release();
  swift_release();
  memcpy(v222, v344, 0xD1uLL);
  v346[1] = 0LL;
  v346[0] = 0LL;
  v346[2] = _swiftEmptyArrayStorage;
  LOWORD(v347) = v373;
  uint64_t v348 = 0x3233363232333731LL;
  uint64_t v349 = 0xEB00000000373231LL;
  unint64_t v350 = 0LL;
  uint64_t v351 = v370;
  uint64_t v353 = 0LL;
  uint64_t v352 = 0LL;
  __int128 v354 = 0xF000000000000000LL;
  __int128 v355 = 0LL;
  __int128 v356 = 0LL;
  __int128 v357 = 1LL;
  uint64_t v360 = 0u;
  uint64_t v361 = 0u;
  char v358 = 0u;
  uint64_t v359 = 0u;
  char v362 = 18;
  char v363 = 0LL;
  uint64_t v364 = 0LL;
  uint64_t v365 = v219;
  v366 = 1;
  uint64_t v139 = v346;
LABEL_37:
  sub_1000536E8((uint64_t)v139);
  return 0LL;
}

uint64_t sub_1000A0518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 24);
  sub_100174CE0();
  uint64_t v7 = v6;
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  swift_isUniquelyReferenced_nonNull_native(v7);
  sub_1001B8C10((uint64_t)isa, 0x7975426F546B7361LL, 0xEF64656C62616E45LL);
  swift_bridgeObjectRelease();
  Class v9 = Bool._bridgeToObjectiveC()().super.super.isa;
  swift_isUniquelyReferenced_nonNull_native(v7);
  sub_1001B8C10((uint64_t)v9, 0x4473676F6C616964LL, 0xEF64656C62617369LL);
  swift_bridgeObjectRelease();
  Class v10 = Bool._bridgeToObjectiveC()().super.super.isa;
  swift_isUniquelyReferenced_nonNull_native(v7);
  sub_1001B8C10((uint64_t)v10, 0xD000000000000015LL, 0x800000010021B4A0LL);
  swift_bridgeObjectRelease();
  Class v11 = Bool._bridgeToObjectiveC()().super.super.isa;
  swift_isUniquelyReferenced_nonNull_native(v7);
  sub_1001B8C10((uint64_t)v11, 0xD000000000000012LL, 0x800000010021B4C0LL);
  swift_bridgeObjectRelease();
  sub_10016B0A4();
  Class v12 = Int._bridgeToObjectiveC()().super.super.isa;
  swift_isUniquelyReferenced_nonNull_native(v7);
  v24[0] = v7;
  sub_1001B8C10((uint64_t)v12, 0x797469746E617571LL, 0xE800000000000000LL);
  uint64_t v13 = v7;
  swift_bridgeObjectRelease();
  sub_10004DB28(a4 + 560, (uint64_t)v23, &qword_1002AA7C0);
  sub_10004DB28((uint64_t)v23, (uint64_t)v24, &qword_1002AA7C0);
  if (sub_1000A3034((uint64_t)v24) != 1)
  {
    if ((v25 & 1) == 0) {
      _stringCompareWithSmolCheck(_:_:expecting:)(3157553LL, 0xE300000000000000LL, 3157554LL, 0xE300000000000000LL, 0LL);
    }
    swift_bridgeObjectRelease();
    Class v14 = Bool._bridgeToObjectiveC()().super.super.isa;
    swift_isUniquelyReferenced_nonNull_native(v7);
    uint64_t v27 = v7;
    sub_1001B8C10((uint64_t)v14, 0x4B65726F74537369LL, 0xEB00000000327469LL);
    uint64_t v13 = v27;
    swift_bridgeObjectRelease();
  }

  uint64_t v15 = type metadata accessor for OctaneSubscription();
  if (swift_dynamicCastClass(v5, v15))
  {
    sub_10004DB28(a4 + 448, (uint64_t)v22, &qword_1002AA990);
    sub_10004DB28((uint64_t)v22, (uint64_t)&v27, &qword_1002AA990);
    Class v16 = Bool._bridgeToObjectiveC()().super.super.isa;
    swift_isUniquelyReferenced_nonNull_native(v13);
    uint64_t v26 = v13;
    sub_1001B8C10((uint64_t)v16, 0x6F6D6F7250736168LL, 0xED0000726566664FLL);
    uint64_t v17 = v26;
    swift_bridgeObjectRelease();
    sub_10004DB28((uint64_t)v22, (uint64_t)&v26, &qword_1002AA990);
    Class v18 = Bool._bridgeToObjectiveC()().super.super.isa;
    swift_isUniquelyReferenced_nonNull_native(v17);
    sub_1001B8C10((uint64_t)v18, 0x61626E6957736168LL, 0xEF726566664F6B63LL);
    uint64_t v13 = v17;
    swift_bridgeObjectRelease();
  }

  sub_10004DB28(a4 + 552, (uint64_t)&v21, &qword_1002AECC8);
  sub_10004DB28((uint64_t)&v21, (uint64_t)&v28, &qword_1002AECC8);
  if ((v28 & 1) != 0)
  {
    sub_1000A3784();
    Class v19 = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
    swift_isUniquelyReferenced_nonNull_native(v13);
    sub_1001B8C10((uint64_t)v19, 0xD000000000000017LL, 0x800000010021B4E0LL);
    swift_bridgeObjectRelease();
  }

  return v13;
}

BOOL sub_1000A0990(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t)(a1 + 11);
  uint64_t v4 = *a1;
  uint64_t v5 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v18[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  Class v11 = (char *)&v18[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100023BAC(v3, (uint64_t)v18);
  sub_100019F58(v18, v18[3]);
  uint64_t v13 = type metadata accessor for InAppBuyRoute.AdditionalBuyOptions( 0LL,  *(void *)(v4 + 144),  *(void *)(v4 + 152),  v12);
  sub_1000A33A4(a2 + *(int *)(v13 + 44), (uint64_t)v7);
  uint64_t v14 = sub_10001D158((uint64_t)v7, 1LL, v8);
  if ((_DWORD)v14 == 1)
  {
    static Date.now.getter(v14);
    sub_10004DB00((uint64_t)v7, (uint64_t *)&unk_1002AFCD0);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
  }

  uint64_t v15 = (void *)sub_100088140();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (v15) {

  }
  sub_100019F7C(v18);
  return v15 != 0LL;
}

uint64_t sub_1000A0B1C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result = sub_1000A1B38(*a1, a1[1], a2, *a3, a3[1]);
  if (v4)
  {
    swift_errorRelease(v4);
    uint64_t result = 0LL;
  }

  *a4 = result;
  return result;
}

uint64_t sub_1000A0B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  return sub_1000A0C5C(a2, a3, *a4, a4[1], a5, a6);
}

os_log_s *sub_1000A0B98@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X3>, os_log_s **a4@<X8>)
{
  uint64_t result = sub_1000A2088(*a1, a1[1], a2, *a3, a3[1]);
  if (v4)
  {
    swift_errorRelease(v4);
    uint64_t result = 0LL;
  }

  *a4 = result;
  return result;
}

uint64_t sub_1000A0BE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (_BYTE *)(a1 + 16);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 >= 0xF8)
  {
    sub_100019F58((void *)(a2 + 48), *(void *)(a2 + 72));
    uint64_t v3 = sub_100076ABC();
    swift_beginAccess(v2, v5, 1LL, 0LL);
    *uint64_t v2 = v3;
  }

  return v3;
}

uint64_t sub_1000A0C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v91 = a5;
  uint64_t v92 = v11;
  uint64_t v12 = *(void *)(a5 + 144);
  uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  sub_1000A4D7C();
  sub_10001ED74();
  for (; v13; uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v83))
  {
    a5 = 4LL;
    while (1)
    {
      if ((v12 & 0xC000000000000001LL) != 0)
      {
        uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(a5 - 4, v12);
      }

      else
      {
        uint64_t v14 = *(void *)(v12 + 8 * a5);
        sub_10001EDE0();
      }

      uint64_t v15 = a5 - 3;
      if (__OFADD__(a5 - 4, 1LL)) {
        break;
      }
      uint64_t v16 = *(void *)(v14 + 96);
      uint64_t v17 = *(void *)(v14 + 104);
      BOOL v18 = v16 == a1 && v17 == a2;
      if (v18 || (sub_100048720(v16, v17, a1, a2) & 1) != 0)
      {
        sub_10001A3F8();
        sub_10001ED6C();
        sub_1000A4D88();
        sub_1000A47CC(a6 + 416, (uint64_t)v102);
        sub_1000A47CC((uint64_t)v102, (uint64_t)&v109);
        uint64_t v25 = v110;
        if (v110)
        {
          uint64_t v26 = v109;
          sub_1000A47CC(a6 + 448, (uint64_t)v101);
          sub_1000A47CC((uint64_t)v101, (uint64_t)&v111);
          a5 = v112;
          if (v112)
          {
            uint64_t v27 = v111;
            sub_1000A47CC(a6 + 464, (uint64_t)v100);
            sub_1000A47CC((uint64_t)v100, (uint64_t)&v113);
            uint64_t v28 = v114;
            if (v114)
            {
              uint64_t v90 = v113;
              sub_1000A47CC(a6 + 432, (uint64_t)v99);
              sub_1000A47CC((uint64_t)v99, (uint64_t)&v115);
              if (*((void *)&v115 + 1))
              {
                __int128 v85 = v115;
                sub_1000A47CC(a6 + 560, (uint64_t)v98);
                sub_1000A47CC((uint64_t)v98, (uint64_t)v116);
                uint64_t v87 = v27;
                uint64_t v88 = a5;
                uint64_t v89 = v26;
                uint64_t v86 = v28;
                if ((v116[312] & 1) == 0)
                {
                  sub_1000A490C();
                  goto LABEL_46;
                }

                char v44 = sub_1000A48A4();
                sub_1000A490C();
                if ((v44 & 1) == 0)
                {
LABEL_48:
                  sub_1000A47CC(a6 + 496, (uint64_t)v97);
                  sub_1000A47CC((uint64_t)v97, (uint64_t)v117);
                  if (v117[1])
                  {
                    uint64_t v47 = v92;
                    UUID.init(uuidString:)(v117[0]);
                    uint64_t v48 = sub_100048814();
                    uint64_t v49 = sub_10001D158(v92, 1LL, v48);
                    uint64_t v50 = v93;
                    if ((_DWORD)v49 != 1)
                    {
                      uint64_t v51 = UUID.uuidString.getter(v49);
                      uint64_t v53 = v52;
                      (*(void (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8LL))(v92, v48);
                      uint64_t v103 = v51;
                      uint64_t v104 = v53;
                      unint64_t v54 = sub_10001B4A0();
                      uint64_t v45 = StringProtocol.localizedLowercase.getter(&type metadata for String, v54);
                      unint64_t v46 = v55;
                      swift_bridgeObjectRelease();
                      goto LABEL_55;
                    }
                  }

                  else
                  {
                    uint64_t v56 = sub_100048814();
                    uint64_t v47 = v92;
                    sub_10001762C(v92, 1LL, 1LL, v56);
                    uint64_t v50 = v93;
                  }

                  sub_10004DB00(v47, &qword_1002AC060);
                  uint64_t v45 = 0LL;
                  unint64_t v46 = 0xE000000000000000LL;
                }

                else
                {
LABEL_46:
                  if (*(void *)(a6 + 344))
                  {
                    uint64_t v45 = *(void *)(a6 + 336);
                    unint64_t v46 = *(void *)(a6 + 344);
                  }

                  else
                  {
                    uint64_t v45 = 0LL;
                    unint64_t v46 = 0xE000000000000000LL;
                  }

                  uint64_t v50 = v93;
                  swift_bridgeObjectRetain();
                }

LABEL_55:
                sub_100019F58((void *)(v50 + 48), *(void *)(v50 + 72));
                sub_100075EE8(a3, a4);
                uint64_t v58 = v57;
                a5 = v57[10];
                if (a5)
                {
                  unint64_t v94 = v46;
                  uint64_t v60 = v57[11];
                  uint64_t v59 = v57[12];
                  uint64_t v61 = v57[13];
                  uint64_t v62 = v57[14];
                  uint64_t v103 = v57[9];
                  uint64_t v104 = a5;
                  uint64_t v105 = v60;
                  uint64_t v106 = v59;
                  uint64_t v107 = v61;
                  uint64_t v108 = v62;
                  BOOL v63 = v103 == v89 && a5 == v25;
                  if (v63 || (uint64_t v64 = sub_1000A4CBC(), (sub_100048720(v64, v65, v66, v25) & 1) != 0))
                  {
                    uint64_t v68 = *(void *)(v91 + 80);
                    uint64_t v67 = *(void *)(v91 + 88);
                    uint64_t v69 = sub_1000A4CBC();
                    sub_1000A3058(v69, v70, v60, v72, v61, v71);
                    sub_100023E9C();
                    *((void *)&v84 + 1) = v94;
                    *(void *)&__int128 v84 = v45;
                    char v73 = sub_100173E00(v87, v88, a3, a4, v68, v67, a1, a2, v84, v85, v90, v86, &v103);
                    sub_10001DC10();
                    sub_10003561C();
                    sub_10009B4FC();
                    swift_bridgeObjectRelease();
                    sub_10001EDA0();
                    swift_bridgeObjectRelease();
                    if ((v73 & 1) != 0) {
                      return 22LL;
                    }
                    else {
                      return 18LL;
                    }
                  }

                  sub_100023E9C();
                  sub_10001DBCC();
                  sub_10001DC10();
                  sub_10001EDA0();
                }

                sub_10003561C();
                if (v58[10])
                {
                  if (qword_1002A8D90 != -1) {
                    swift_once(&qword_1002A8D90, sub_100183E34);
                  }
                  uint64_t v74 = sub_100077D08();
                  sub_100092ADC(v74, (uint64_t)qword_1002EB9D0);
                  os_log_type_t v75 = sub_100092F58();
                  if (sub_100024E9C(v75))
                  {
                    uint64_t v76 = (_WORD *)sub_10001A414();
                    sub_1000A48D4(v76);
                    uint64_t v79 = "Key ID doesn't match stored value";
                    goto LABEL_74;
                  }

                sub_100019F58((void *)(v55 + 48), *(void *)(v55 + 72));
                sub_100075EE8(v97, v98);
                BOOL v63 = v62;
                uint64_t v64 = v62[10];
                if (v64)
                {
                  *(void *)&uint64_t v96 = v50;
                  *((void *)&v96 + 1) = v51;
                  uint64_t v65 = v62[9];
                  uint64_t v67 = v62[11];
                  uint64_t v66 = v62[12];
                  uint64_t v68 = v62[13];
                  uint64_t v69 = v62[14];
                  uint64_t v105 = v65;
                  uint64_t v106 = v64;
                  uint64_t v107 = v67;
                  uint64_t v108 = v66;
                  uint64_t v109 = v68;
                  uint64_t v110 = v69;
                  uint64_t v70 = v93;
                  uint64_t v71 = (void *)v65 == v93 && v64 == v27;
                  if (v71
                    || (uint64_t v93 = v62,
                        uint64_t v72 = v66,
                        char v73 = _stringCompareWithSmolCheck(_:_:expecting:)(v65, v64, v70, v27, 0LL),
                        uint64_t v66 = v72,
                        BOOL v63 = v93,
                        (v73 & 1) != 0))
                  {
                    uint64_t v74 = v69;
                    uint64_t v76 = *(void *)(v95 + 80);
                    os_log_type_t v75 = *(void *)(v95 + 88);
                    sub_1000A3058(v65, v64, v67, v66, v68, v74);
                    swift_bridgeObjectRetain();
                    uint64_t v77 = sub_100173E00(v91, v92, v97, v98, v76, v75, a1, a2, v96, v89, v94, v90, &v105);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_release();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if ((v77 & 1) != 0) {
                      return 22LL;
                    }
                    else {
                      return 18LL;
                    }
                  }

                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }

                swift_bridgeObjectRelease();
                if (v63[10])
                {
                  if (qword_1002A8D90 != -1) {
                    swift_once(&qword_1002A8D90, sub_100183E34);
                  }
                  uint64_t v78 = type metadata accessor for Logger(0LL);
                  uint64_t v79 = sub_100018F68(v78, (uint64_t)qword_1002EB9D0);
                  uint64_t v35 = (os_log_s *)Logger.logObject.getter(v79);
                  os_log_type_t v81 = static os_log_type_t.error.getter(v35, v80);
                  if (os_log_type_enabled(v35, v81))
                  {
                    uint64_t v82 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                    *(_WORD *)uint64_t v82 = 0;
                    uint64_t v83 = "Key ID doesn't match stored value";
                    goto LABEL_74;
                  }

LABEL_75:
                  sub_10009B4FC();
                  return 17LL;
                }

                if (qword_1002A8D90 != -1) {
                  swift_once(&qword_1002A8D90, sub_100183E34);
                }
                uint64_t v80 = sub_100077D08();
                sub_100092ADC(v80, (uint64_t)qword_1002EB9D0);
                os_log_type_t v81 = sub_100092F58();
                if (!sub_100024E9C(v81)) {
                  goto LABEL_75;
                }
                uint64_t v82 = (_WORD *)sub_10001A414();
                sub_1000A48D4(v82);
                uint64_t v79 = "Missing key pair set";
LABEL_74:
                sub_1000A46DC((void *)&_mh_execute_header, v77, v78, v79);
                sub_10001A408(a1);
                sub_10009B4FC();
LABEL_43:

                return 17LL;
              }

              if (qword_1002A8D90 != -1) {
                swift_once(&qword_1002A8D90, sub_100183E34);
              }
              uint64_t v41 = sub_100077D08();
              sub_100092ADC(v41, (uint64_t)qword_1002EB9D0);
              os_log_type_t v42 = sub_100092F58();
              if (!sub_100024E9C(v42)) {
                goto LABEL_43;
              }
              uint64_t v43 = (_WORD *)sub_10001A414();
              sub_1000A48D4(v43);
              uint64_t v34 = "Missing offer nonce";
            }

            else
            {
              if (qword_1002A8D90 != -1) {
                swift_once(&qword_1002A8D90, sub_100183E34);
              }
              uint64_t v38 = sub_100077D08();
              sub_100092ADC(v38, (uint64_t)qword_1002EB9D0);
              os_log_type_t v39 = sub_100092F58();
              if (!sub_100024E9C(v39)) {
                goto LABEL_43;
              }
              uint64_t v40 = (_WORD *)sub_10001A414();
              sub_1000A48D4(v40);
              uint64_t v34 = "Missing timestamp";
            }
          }

          else
          {
            if (qword_1002A8D90 != -1) {
              swift_once(&qword_1002A8D90, sub_100183E34);
            }
            uint64_t v35 = sub_100077D08();
            sub_100092ADC(v35, (uint64_t)qword_1002EB9D0);
            os_log_type_t v36 = sub_100092F58();
            if (!sub_100024E9C(v36)) {
              goto LABEL_43;
            }
            uint64_t v37 = (_WORD *)sub_10001A414();
            sub_1000A48D4(v37);
            uint64_t v34 = "Missing signature";
          }
        }

        else
        {
          if (qword_1002A8D90 != -1) {
            swift_once(&qword_1002A8D90, sub_100183E34);
          }
          uint64_t v29 = sub_100077D08();
          sub_100092ADC(v29, (uint64_t)qword_1002EB9D0);
          os_log_type_t v30 = sub_100092F58();
          if (!sub_100024E9C(v30)) {
            goto LABEL_43;
          }
          uint64_t v31 = (_WORD *)sub_10001A414();
          sub_1000A48D4(v31);
          uint64_t v34 = "Missing offer key ID";
        }

        sub_1000A46DC((void *)&_mh_execute_header, v32, v33, v34);
        sub_10001A408(a1);
        goto LABEL_43;
      }

      sub_10001ED6C();
      ++a5;
      if (v15 == v13) {
        goto LABEL_14;
      }
    }

    __break(1u);
LABEL_77:
    if (v12 < 0) {
      uint64_t v83 = v12;
    }
    else {
      uint64_t v83 = v12 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1000A4D7C();
    sub_10001ED74();
  }

                  swift_release();
                  return 17LL;
                }

                if (qword_1002A8D90 != -1) {
                  swift_once(&qword_1002A8D90, sub_100183E34);
                }
                __int128 v84 = type metadata accessor for Logger(0LL);
                __int128 v85 = sub_100018F68(v84, (uint64_t)qword_1002EB9D0);
                uint64_t v35 = (os_log_s *)Logger.logObject.getter(v85);
                os_log_type_t v81 = static os_log_type_t.error.getter(v35, v86);
                if (!os_log_type_enabled(v35, v81)) {
                  goto LABEL_75;
                }
                uint64_t v82 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                *(_WORD *)uint64_t v82 = 0;
                uint64_t v83 = "Missing key pair set";
LABEL_74:
                _os_log_impl((void *)&_mh_execute_header, v35, v81, v83, v82, 2u);
                swift_slowDealloc(v82, -1LL, -1LL);
                swift_release();
LABEL_43:

                return 17LL;
              }

              if (qword_1002A8D90 != -1) {
                swift_once(&qword_1002A8D90, sub_100183E34);
              }
              unint64_t v46 = type metadata accessor for Logger(0LL);
              uint64_t v47 = sub_100018F68(v46, (uint64_t)qword_1002EB9D0);
              uint64_t v35 = (os_log_s *)Logger.logObject.getter(v47);
              uint64_t v37 = static os_log_type_t.error.getter(v35, v48);
              if (!os_log_type_enabled(v35, v37)) {
                goto LABEL_43;
              }
              uint64_t v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
              *(_WORD *)uint64_t v38 = 0;
              os_log_type_t v39 = "Missing offer nonce";
            }

            else
            {
              if (qword_1002A8D90 != -1) {
                swift_once(&qword_1002A8D90, sub_100183E34);
              }
              uint64_t v43 = type metadata accessor for Logger(0LL);
              char v44 = sub_100018F68(v43, (uint64_t)qword_1002EB9D0);
              uint64_t v35 = (os_log_s *)Logger.logObject.getter(v44);
              uint64_t v37 = static os_log_type_t.error.getter(v35, v45);
              if (!os_log_type_enabled(v35, v37)) {
                goto LABEL_43;
              }
              uint64_t v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
              *(_WORD *)uint64_t v38 = 0;
              os_log_type_t v39 = "Missing timestamp";
            }
          }

          else
          {
            if (qword_1002A8D90 != -1) {
              swift_once(&qword_1002A8D90, sub_100183E34);
            }
            uint64_t v40 = type metadata accessor for Logger(0LL);
            uint64_t v41 = sub_100018F68(v40, (uint64_t)qword_1002EB9D0);
            uint64_t v35 = (os_log_s *)Logger.logObject.getter(v41);
            uint64_t v37 = static os_log_type_t.error.getter(v35, v42);
            if (!os_log_type_enabled(v35, v37)) {
              goto LABEL_43;
            }
            uint64_t v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v38 = 0;
            os_log_type_t v39 = "Missing signature";
          }
        }

        else
        {
          if (qword_1002A8D90 != -1) {
            swift_once(&qword_1002A8D90, sub_100183E34);
          }
          uint64_t v33 = type metadata accessor for Logger(0LL);
          uint64_t v34 = sub_100018F68(v33, (uint64_t)qword_1002EB9D0);
          uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
          uint64_t v37 = static os_log_type_t.error.getter(v35, v36);
          if (!os_log_type_enabled(v35, v37)) {
            goto LABEL_43;
          }
          uint64_t v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v38 = 0;
          os_log_type_t v39 = "Missing offer key ID";
        }

        _os_log_impl((void *)&_mh_execute_header, v35, v37, v39, v38, 2u);
        swift_slowDealloc(v38, -1LL, -1LL);
        goto LABEL_43;
      }

      swift_release();
      ++v14;
      if (v16 == v13) {
        goto LABEL_14;
      }
    }

    __break(1u);
LABEL_77:
    if (v12 < 0) {
      uint64_t v87 = v12;
    }
    else {
      uint64_t v87 = v12 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain_n(v12, 2LL);
    swift_bridgeObjectRetain();
  }

uint64_t sub_1000A13DC(uint64_t a1, uint64_t a2, void (*a3)(void *), uint64_t a4)
{
  uint64_t v8 = v7;
  sub_100034E9C((uint64_t)a3, a4);
  sub_1000D977C(v8, a3, a4);
  uint64_t v10 = v9;
  sub_10001EDA0();
  return v10;
}

uint64_t sub_1000A1468(uint64_t a1)
{
  if (!v6[1] || !*(void *)(a1 + 392)) {
    return 0LL;
  }
  sub_100019F58((void *)(v1 + 88), *(void *)(v1 + 112));
  sub_10001ED74();
  uint64_t v3 = sub_1000884B8();
  sub_10001A3F8();
  return v3;
}

void sub_1000A1530(char a1@<W1>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AllSetDialog();
  swift_initStackObject(v4, v10);
  sub_10011BB88();
  if ((a1 & 1) != 0)
  {
    swift_release();
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v6 = type metadata accessor for IneligibleForOfferDialog();
    sub_100019310(v6, 448LL);
    uint64_t v5 = sub_10011C33C();
    swift_release();
  }

  a2[3] = &type metadata for LegacyInAppBuyResponse;
  a2[4] = sub_1000A2F64();
  uint64_t v7 = (void *)sub_100019310((uint64_t)&unk_10027E870, 225LL);
  *a2 = v7;
  void v7[2] = 0LL;
  _OWORD v7[3] = 0LL;
  v7[4] = _swiftEmptyArrayStorage;
  uint64_t v8 = sub_1000A482C((uint64_t)v7, 0);
  uint64_t v9 = sub_1000A4C80(v8, 1);
  *(void *)(v9 + 11sub_100019F7C(v0 + 2) = 0LL;
  *(void *)(v9 + 12sub_10006F0B8(12LL, 0) = 1LL;
  *(_OWORD *)(v9 + 16sub_10006F0B8(12LL, 0) = 0u;
  *(_OWORD *)(v9 + 17sub_100019F7C(v0 + 6) = 0u;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_OWORD *)(v9 + 14sub_100019F7C(v0 + 4) = 0u;
  *(_BYTE *)(v9 + 19sub_100019F7C(v0 + 2) = 14;
  *(void *)(v9 + 20sub_10006F0B8(12LL, 0) = 0LL;
  *(void *)(v9 + 208) = 0LL;
  *(void *)(v9 + 21sub_100019F7C(v0 + 6) = v5;
  *(_BYTE *)(v9 + 22sub_100019F7C(v0 + 4) = 1;
  sub_1000A4BB4();
}

void sub_1000A1628(char a1@<W0>, uint64_t a2@<X3>, uint64_t a3@<X4>, char a4@<W5>, uint64_t *a5@<X8>)
{
  uint64_t v41 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  sub_100092B28();
  uint64_t v9 = *(void *)(v5 + 112);
  sub_100019F58((void *)(v5 + 88), v9);
  j___s10Foundation4DateV3nowACvgZ_0(v9);
  uint64_t v10 = a2;
  uint64_t v11 = (void *)sub_100086438();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v41);
  if (v11)
  {
    sub_100092F60((void *)(v5 + 88), *(void *)(v5 + 112));
    sub_10008A040(v11, a1 & 1);
    if (v38)
    {
    }

    else
    {
      uint64_t v14 = v5;
      uint64_t v15 = type metadata accessor for AllSetDialog();
      swift_initStackObject(v15, &v43);
      sub_10011BB88();
      swift_release();
      uint64_t v16 = 0LL;
      if ((a1 & 1) != 0 && (a4 & 1) == 0)
      {
        sub_1000B4F18();
        if (v18)
        {
          uint64_t v19 = v17;
          uint64_t v20 = v18;
          sub_100019F58((void *)(v14 + 48), *(void *)(v14 + 72));
          sub_100075EE8(v10, a3);
          uint64_t v21 = sub_1000D868C(v19, v20);
          sub_100024E84();
          sub_100024F0C();
          if (v21)
          {
            uint64_t v22 = *(void *)(v21 + 24);
            uint64_t v40 = *(void *)(v21 + 16);
            sub_1000931C8();
            uint64_t v23 = (void *)(v14 + 48);
          }

          else
          {
            sub_1000B3FEC();
            uint64_t v23 = (void *)(v14 + 48);
            if ((v25 & 0x100000000LL) != 0)
            {
              uint64_t v40 = 0LL;
              uint64_t v22 = 0xE000000000000000LL;
            }

            else
            {
              uint64_t v40 = NSDecimal.description.getter(v24);
              uint64_t v22 = v26;
            }
          }

          sub_100092F60(v23, *(void *)(v14 + 72));
          sub_100076700();
          sub_100019F58(v23, *(void *)(v14 + 72));
          sub_10007608C();
          uint64_t v28 = sub_100043978(v40, v22, (uint64_t)v44, v27);
          os_log_type_t v30 = v29;
          sub_10001B4DC(v44);
          sub_100024F0C();
          sub_100024E84();
          uint64_t v31 = sub_1000B85C8(4u);
          if ((v32 & 1) != 0) {
            double v33 = static Date.timeIntervalSinceReferenceDate.getter(v31);
          }
          else {
            double v33 = *(double *)&v31;
          }
          uint64_t v34 = type metadata accessor for DidConsentToPriceIncreaseDialog();
          swift_allocObject(v34, 448LL, 7LL);
          uint64_t v16 = sub_10011C5D0(v28, v30, v33);
          swift_release();
        }

        else
        {
          uint64_t v16 = 0LL;
        }
      }

      a5[3] = (uint64_t)&type metadata for LegacyInAppBuyResponse;
      a5[4] = sub_1000A2F64();
      uint64_t v35 = sub_1000A4A80((uint64_t)&unk_10027E870);
      *a5 = v35;

      *(void *)(v35 + 1sub_100019F7C(v0 + 6) = 0LL;
      *(void *)(v35 + 2sub_100019F7C(v0 + 4) = 0LL;
      *(void *)(v35 + 3sub_100019F7C(v0 + 2) = _swiftEmptyArrayStorage;
      *(_BYTE *)(v35 + 4sub_10006F0B8(12LL, 0) = 0;
      *(_BYTE *)(v35 + 41) = 0;
      *(void *)(v35 + 48) = 0x3233363232333731LL;
      *(void *)(v35 + 5sub_100019F7C(v0 + 6) = 0xEB00000000373231LL;
      *(void *)(v35 + 6sub_100019F7C(v0 + 4) = 0LL;
      *(_BYTE *)(v35 + 7sub_100019F7C(v0 + 2) = 1;
      *(void *)(v35 + 8sub_10006F0B8(12LL, 0) = 0LL;
      *(void *)(v35 + sub_100081CEC(v0 + 88) = 0LL;
      *(void *)(v35 + 9sub_100019F7C(v0 + 6) = 0xF000000000000000LL;
      *(void *)(v35 + 10sub_100019F7C(v0 + 4) = 0LL;
      *(void *)(v35 + 11sub_100019F7C(v0 + 2) = 0LL;
      *(void *)(v35 + 12sub_10006F0B8(12LL, 0) = 1LL;
      *(_OWORD *)(v35 + 16sub_10006F0B8(12LL, 0) = 0u;
      *(_OWORD *)(v35 + 17sub_100019F7C(v0 + 6) = 0u;
      *(_OWORD *)(v35 + 128) = 0u;
      *(_OWORD *)(v35 + 14sub_100019F7C(v0 + 4) = 0u;
      *(_BYTE *)(v35 + 19sub_100019F7C(v0 + 2) = 22;
      *(void *)(v35 + 20sub_10006F0B8(12LL, 0) = 0LL;
      *(void *)(v35 + 208) = 0LL;
      *(void *)(v35 + 21sub_100019F7C(v0 + 6) = v16;
      *(_BYTE *)(v35 + 22sub_100019F7C(v0 + 4) = 2;
    }
  }

  else
  {
    unint64_t v12 = sub_1000A2EB4();
    sub_1000252D0((uint64_t)&type metadata for InAppBuyRouteError, v12);
    sub_1000A47C0(v13, 6);
  }

  sub_1000A4984();
}

void (*sub_1000A19B0(uint64_t a1, uint64_t a2))(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = (void *)sub_100019310((uint64_t)&unk_10027E848, 40LL);
  _OWORD v5[2] = v2;
  void v5[3] = a1;
  v5[4] = a2;
  ChannelPipeline.syncOperations.getter();
  swift_bridgeObjectRetain();
  return sub_1000A2F58;
}

void sub_1000A1A10(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CheddarTransaction(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (uint64_t *)((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = sub_1000B3DEC();
  uint64_t v11 = v10;
  sub_100019F58(a2 + 6, a2[9]);
  sub_1000765E4(2uLL, v9, v11, v12, v13, v14, v15, v16);
  uint64_t v18 = v17;
  LOBYTE(v9) = v19;
  swift_bridgeObjectRelease();
  id v20 = a1;
  swift_bridgeObjectRetain();
  sub_10011FE9C((uint64_t)v20, v8);
  sub_100019F58(a2 + 11, a2[14]);
  sub_1001C21DC((uint64_t)v8, v18, v9 & 1, a3);
  sub_10004DBAC((uint64_t)v8, type metadata accessor for CheddarTransaction);
}

uint64_t sub_1000A1B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = v5 + 88;
  sub_100019F58((void *)(v5 + 88), *(void *)(v5 + 112));
  sub_1000A4C1C(a3);
  if (!v12)
  {
    sub_1000A490C();
LABEL_7:
    unint64_t v15 = sub_1000A2EB4();
    sub_1000252D0((uint64_t)&type metadata for InAppBuyRouteError, v15);
    sub_1000A47C0(v16, 7);
    return v6;
  }

  if (v12 == 1)
  {
    uint64_t v13 = 0xE800000000000000LL;
    uint64_t v14 = sub_1000A4A18();
  }

  else
  {
    uint64_t v13 = 0xE700000000000000LL;
    uint64_t v14 = sub_1000A4A04();
  }

  uint64_t v6 = sub_1000A4898(v14, v13, 7824750LL);
  sub_10001EDA0();
  if ((v6 & 1) != 0) {
    goto LABEL_7;
  }
  uint64_t v18 = sub_1000931DC();
  sub_100023578(v18, v19);
  if (v20)
  {
    uint64_t v6 = v20;
    if ((*(_BYTE *)(v20 + 112) & 1) == 0)
    {
      unint64_t v43 = sub_1000A2EB4();
      sub_1000252D0((uint64_t)&type metadata for InAppBuyRouteError, v43);
      sub_1000A47C0(v44, 7);
      sub_10002A5A4();
      return v6;
    }

    sub_100023BAC(v11, (uint64_t)v49);
    sub_100019F58(v49, v49[3]);
    uint64_t v21 = sub_1000175B0(&qword_1002A9098);
    uint64_t inited = swift_initStackObject(v21, v48);
    *(_OWORD *)(inited + 1sub_100019F7C(v0 + 6) = xmmword_1001F3C00;
    uint64_t v23 = *(void *)(a3 + 200);
    *(void *)(inited + 3sub_100019F7C(v0 + 2) = *(void *)(a3 + 192);
    *(void *)(inited + 4sub_10006F0B8(12LL, 0) = v23;
    ChannelPipeline.syncOperations.getter();
    sub_100023E9C();
    sub_10001ED74();
    uint64_t v24 = sub_1000A4CBC();
    sub_1000D962C(v24, v25, a4, a5);
    uint64_t v27 = v26;
    swift_setDeallocating(inited);
    sub_1001B7630();
    if ((unint64_t)v27 >> 62)
    {
      if (v27 < 0) {
        uint64_t v45 = v27;
      }
      else {
        uint64_t v45 = v27 & 0xFFFFFFFFFFFFFF8LL;
      }
      sub_10003574C();
      id v28 = (id)_CocoaArrayWrapper.endIndex.getter(v45);
      sub_10003561C();
      if (v28)
      {
LABEL_13:
        sub_100119E64(0LL, (v27 & 0xC000000000000001LL) == 0, v27);
        if ((v27 & 0xC000000000000001LL) != 0) {
          id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v27);
        }
        else {
          id v29 = *(id *)(v27 + 32);
        }
        os_log_type_t v30 = v29;
        sub_10003561C();
        sub_100019F7C(v49);
        id v28 = v30;
        if (sub_1000B7788())
        {
          sub_1000B4F18();
          uint64_t v32 = v31;

          sub_10003561C();
          if (!v32)
          {

            return v6;
          }
        }

        else
        {
        }

void sub_1000A1F00(uint64_t a1, uint64_t a2, uint8_t *a3)
{
  if (!v5)
  {
    sub_1000A490C();
LABEL_7:
    char v9 = 4;
LABEL_8:
    unint64_t v10 = sub_1000A2EB4();
    uint64_t v11 = sub_1000252D0((uint64_t)&type metadata for InAppBuyRouteError, v10);
    *char v12 = v9;
    swift_willThrow(v11);
    return;
  }

  if (v5 == 1)
  {
    uint64_t v6 = 0xE800000000000000LL;
    uint64_t v7 = sub_1000A4A18();
  }

  else
  {
    uint64_t v6 = 0xE700000000000000LL;
    uint64_t v7 = sub_1000A4A04();
  }

  char v8 = sub_1000A4898(v7, v6, 7824750LL);
  sub_10001EDA0();
  if ((v8 & 1) != 0) {
    goto LABEL_7;
  }
  uint64_t v13 = sub_1000931DC();
  sub_1000232FC(v13, v14);
  if (!v15)
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v16 = sub_100077D08();
    uint64_t v17 = sub_100018F68(v16, (uint64_t)qword_1002EB9D0);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v20 = static os_log_type_t.error.getter(v18, v19);
    if (os_log_type_enabled(v18, v20))
    {
      uint64_t v21 = (_WORD *)sub_100019464(2LL);
      sub_1000A48D4(v21);
      _os_log_impl( (void *)&_mh_execute_header,  v18,  v20,  "Requested offer for invalid ad-hoc offer identifier. This may be a client error in the StoreKit framework.",  a3,  2u);
      sub_10001A408((uint64_t)a3);
    }

    char v9 = 3;
    goto LABEL_8;
  }

os_log_s *sub_1000A2088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = sub_100023514(a1, a2);
  if (v12)
  {
    uint64_t v13 = (os_log_s *)v12;
    sub_100092F60((void *)(v5 + 88), *(void *)(v5 + 112));
    sub_100087FF0(a3, a4, a5);
    char v15 = v14;
    uint64_t v16 = *((void *)v13 + 12);
    sub_10001DBCC();
    char v17 = sub_1000B3B04(v15, v16);
    sub_10001EDA0();
    if ((v17 & 1) == 0)
    {
      if (qword_1002A8D90 != -1) {
        swift_once(&qword_1002A8D90, sub_100183E34);
      }
      uint64_t v18 = sub_100077D08();
      sub_100018F68(v18, (uint64_t)qword_1002EB9D0);
      sub_1000A4BFC();
      uint64_t v19 = swift_retain_n(v13, 2LL);
      os_log_type_t v20 = (os_log_s *)Logger.logObject.getter(v19);
      os_log_type_t v22 = static os_log_type_t.error.getter(v20, v21);
      if (sub_1000A496C(v22))
      {
        HIDWORD(v75) = v6;
        uint64_t v23 = sub_100019464(32LL);
        uint64_t v73 = sub_100019464(96LL);
        uint64_t v78 = v73;
        *(_DWORD *)uint64_t v23 = 136315650;
        uint64_t v24 = sub_10001FFF0();
        sub_1000A4B14(v24, v25, v26, v27, v28);
        sub_1000A4AFC();
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v29, v30, v23 + 4);
        sub_100077CA8(a2);
        *(_WORD *)(v23 + 1sub_100019F7C(v0 + 2) = 2080;
        unint64_t v31 = sub_1000A2EF0();
        uint64_t v32 = sub_1000931C8();
        uint64_t v33 = Set.description.getter(v32, &unk_100288CC0, v31);
        sub_100024E84();
        uint64_t v35 = sub_1000A4A64(v33, v34, &v78);
        sub_1000A4A6C(v35, v36, v37, v23 + 22, v38, v39, v40, v41, v71, v73, v75, v77);
        sub_10002A780((uint64_t)v13);
        sub_100023EF4();
        *(_WORD *)(v23 + 2sub_100019F7C(v0 + 2) = 2080;
        if (v15)
        {
          if (v15 == 1)
          {
            unint64_t v42 = 0xE800000000000000LL;
            uint64_t v43 = sub_1000A4A18();
          }

          else
          {
            unint64_t v42 = 0xE700000000000000LL;
            uint64_t v43 = sub_1000A4A04();
          }
        }

        else
        {
          unint64_t v42 = 0xE300000000000000LL;
          uint64_t v43 = 7824750LL;
        }

        uint64_t v77 = sub_1000CF360(v43, v42, &v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, a1, v23 + 24);
        swift_bridgeObjectRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v20,  v76,  " Currently ineligible for offer code  %s: %s does not  contain %s",  (uint8_t *)v23,  0x20u);
        sub_1000A4D44();
        sub_10001A408(v74);
        sub_10001A408(v23);
      }

      else
      {

        sub_10002A780((uint64_t)v13);
        sub_10001EDE8(a2);
      }

      unint64_t v68 = sub_1000A2EB4();
      sub_1000252D0((uint64_t)&type metadata for InAppBuyRouteError, v68);
      sub_1000A47C0(v69, 5);
      swift_release();
    }
  }

  else
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v44 = sub_100077D08();
    sub_100018F68(v44, (uint64_t)qword_1002EB9D0);
    sub_1000A4BFC();
    uint64_t v45 = swift_retain_n(a3, 2LL);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v47 = static os_log_type_t.error.getter(v13, v46);
    if (os_log_type_enabled(v13, v47))
    {
      uint64_t v48 = sub_100019464(22LL);
      uint64_t v49 = sub_100019464(64LL);
      uint64_t v78 = v49;
      *(_DWORD *)uint64_t v48 = 136315394;
      uint64_t v50 = sub_10001FFF0();
      sub_1000A4B14(v50, v51, v52, v53, v54);
      sub_1000A4AFC();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v55, v56, v48 + 4);
      sub_100077CA8(a2);
      *(_WORD *)(v48 + 1sub_100019F7C(v0 + 2) = 2080;
      uint64_t v57 = *(void *)(a3 + 80);
      unint64_t v58 = *(void *)(a3 + 88);
      sub_1000356F4();
      uint64_t v59 = sub_1000CF360(v57, v58, &v78);
      sub_1000A4A6C(v59, v60, v61, v48 + 22, v62, v63, v64, v65, v71, v72, v75, v77);
      sub_10002A780(a3);
      sub_100056ADC();
      _os_log_impl( (void *)&_mh_execute_header,  v13,  v47,  "Internal ID %s did not correspond to a configured offer for codes for %s",  (uint8_t *)v48,  0x16u);
      sub_100093110(v49);
      sub_10001A408(v49);
      sub_10001A408(v48);
    }

    else
    {

      sub_10002A780(a3);
      sub_10001EDE8(a2);
    }

    unint64_t v66 = sub_1000A2EB4();
    sub_1000252D0((uint64_t)&type metadata for InAppBuyRouteError, v66);
    sub_1000A47C0(v67, 2);
  }

  return v13;
}

uint64_t sub_1000A24B0()
{
  return swift_unknownObjectWeakDestroy(v0 + 128);
}

void sub_1000A24B8()
{
  uint64_t v0 = sub_10007F138();
  sub_100019F7C(v0 + 11);
  swift_unknownObjectWeakDestroy(v0 + 16);
  sub_10001945C();
}

uint64_t sub_1000A24E8()
{
  return swift_deallocClassInstance(v0, 136LL, 7LL);
}

uint64_t type metadata accessor for InAppBuyRoute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InAppBuyRoute);
}

uint64_t sub_1000A2510(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(sub_100034E8C(v0, v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_1000A2528(uint64_t a1)
{
  __int128 v18 = *(_OWORD *)(a1 + 480);
  __int128 v16 = *(_OWORD *)(a1 + 448);
  __int128 v17 = *(_OWORD *)(a1 + 464);
  __int128 v14 = *(_OWORD *)(a1 + 416);
  __int128 v15 = *(_OWORD *)(a1 + 432);
  __int128 v12 = *(_OWORD *)(a1 + 384);
  __int128 v13 = *(_OWORD *)(a1 + 400);
  __int128 v10 = *(_OWORD *)(a1 + 352);
  __int128 v11 = *(_OWORD *)(a1 + 368);
  __int128 v9 = *(_OWORD *)(a1 + 336);
  __int128 v8 = *(_OWORD *)(a1 + 320);
  __int128 v7 = *(_OWORD *)(a1 + 304);
  __int128 v6 = *(_OWORD *)(a1 + 288);
  __int128 v5 = *(_OWORD *)(a1 + 272);
  __int128 v4 = *(_OWORD *)(a1 + 256);
  __int128 v3 = *(_OWORD *)(a1 + 240);
  sub_1000A2718( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 128),  *(void *)(a1 + 136),  *(void *)(a1 + 144),  *(void *)(a1 + 152),  *(void *)(a1 + 160),  *(void *)(a1 + 168),  *(void *)(a1 + 176),  *(void *)(a1 + 184),  *(void *)(a1 + 192),  *(void *)(a1 + 200),  *(void *)(a1 + 208),  *(void *)(a1 + 216),  *(void *)(a1 + 224),  *(void *)(a1 + 232),  v3,  *((uint64_t *)&v3 + 1),  v4,  *((uint64_t *)&v4 + 1),  v5,  *((uint64_t *)&v5 + 1),  v6,  *((uint64_t *)&v6 + 1),  v7,  *((uint64_t *)&v7 + 1),  v8,  *((uint64_t *)&v8 + 1),  v9,  *((uint64_t *)&v9 + 1),  v10,  *((uint64_t *)&v10 + 1),  v11,  *((uint64_t *)&v11 + 1),  v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    *(void *)(a1 + 496));
  return a1;
}

uint64_t sub_1000A2718( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t result = a10;
  if (a10)
  {
    uint64_t v105 = STACK[0x578];
    uint64_t v106 = STACK[0x580];
    uint64_t v103 = STACK[0x568];
    uint64_t v104 = STACK[0x570];
    uint64_t v101 = STACK[0x558];
    uint64_t v102 = STACK[0x560];
    uint64_t v99 = STACK[0x548];
    uint64_t v100 = STACK[0x550];
    uint64_t v97 = STACK[0x538];
    uint64_t v98 = STACK[0x540];
    uint64_t v95 = STACK[0x528];
    uint64_t v96 = STACK[0x530];
    uint64_t v93 = STACK[0x518];
    uint64_t v94 = STACK[0x520];
    uint64_t v91 = STACK[0x508];
    uint64_t v92 = STACK[0x510];
    uint64_t v90 = STACK[0x500];
    uint64_t v89 = STACK[0x4F8];
    uint64_t v88 = STACK[0x4F0];
    uint64_t v87 = STACK[0x4E8];
    uint64_t v86 = STACK[0x4E0];
    uint64_t v85 = STACK[0x4D8];
    uint64_t v84 = STACK[0x4D0];
    uint64_t v83 = STACK[0x4C8];
    uint64_t v82 = STACK[0x4C0];
    uint64_t v81 = STACK[0x4B8];
    uint64_t v80 = STACK[0x4B0];
    uint64_t v79 = STACK[0x4A8];
    uint64_t v78 = STACK[0x4A0];
    uint64_t v77 = STACK[0x498];
    uint64_t v76 = STACK[0x490];
    uint64_t v108 = STACK[0x480];
    uint64_t v109 = STACK[0x488];
    uint64_t v107 = STACK[0x478];
    uint64_t v75 = STACK[0x470];
    uint64_t v74 = STACK[0x468];
    uint64_t v73 = STACK[0x460];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_100039578( a71,  a72,  v73,  v74,  v75,  v107,  v108,  v109,  v76,  v77,  v78,  v79,  v80,  v81,  v82,  v83,  v84,  v85,  v86,  v87,  v88,  v89,  v90,  v91,  v92,  v93,  v94,  v95,  v96,  v97,  v98,  v99,  v100,  v101,  v102,  v103,  v104,  v105,  v106);
  }

  return result;
}

uint64_t sub_1000A2B6C(uint64_t a1)
{
  __int128 v25 = *(_OWORD *)(a1 + 640);
  __int128 v26 = *(_OWORD *)(a1 + 624);
  __int128 v23 = *(_OWORD *)(a1 + 672);
  __int128 v24 = *(_OWORD *)(a1 + 656);
  __int128 v21 = *(_OWORD *)(a1 + 704);
  __int128 v22 = *(_OWORD *)(a1 + 688);
  __int128 v18 = *(_OWORD *)(a1 + 720);
  __int128 v13 = *(_OWORD *)(a1 + 736);
  __int128 v10 = *(_OWORD *)(a1 + 752);
  __int128 v9 = *(_OWORD *)(a1 + 768);
  __int128 v7 = *(_OWORD *)(a1 + 800);
  __int128 v8 = *(_OWORD *)(a1 + 784);
  __int128 v6 = *(_OWORD *)(a1 + 816);
  __int128 v4 = *(_OWORD *)(a1 + 848);
  __int128 v5 = *(_OWORD *)(a1 + 832);
  uint64_t v11 = *(void *)(a1 + 560);
  uint64_t v12 = *(void *)(a1 + 568);
  uint64_t v14 = *(void *)(a1 + 576);
  uint64_t v15 = *(void *)(a1 + 584);
  uint64_t v16 = *(void *)(a1 + 592);
  uint64_t v17 = *(void *)(a1 + 600);
  uint64_t v19 = *(void *)(a1 + 608);
  uint64_t v20 = *(void *)(a1 + 616);
  uint64_t v3 = *(void *)(a1 + 864);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000392B0( v11,  v12,  v14,  v15,  v16,  v17,  v19,  v20,  v26,  *((uint64_t *)&v26 + 1),  v25,  *((uint64_t *)&v25 + 1),  v24,  *((uint64_t *)&v24 + 1),  v23,  *((uint64_t *)&v23 + 1),  v22,  *((uint64_t *)&v22 + 1),  v21,  *((uint64_t *)&v21 + 1),  v18,  *((uint64_t *)&v18 + 1),  v13,  *((uint64_t *)&v13 + 1),  v10,  *((uint64_t *)&v10 + 1),  v9,  *((uint64_t *)&v9 + 1),  v8,  *((uint64_t *)&v8 + 1),  v7,  *((uint64_t *)&v7 + 1),  v6,  *((uint64_t *)&v6 + 1),  v5,  *((uint64_t *)&v5 + 1),  v4,  *((uint64_t *)&v4 + 1),  v3);
  return a1;
}

unint64_t sub_1000A2EB4()
{
  unint64_t result = qword_1002AECB0;
  if (!qword_1002AECB0)
  {
    unint64_t result = swift_getWitnessTable("}6\b", &type metadata for InAppBuyRouteError);
    atomic_store(result, (unint64_t *)&qword_1002AECB0);
  }

  return result;
}

unint64_t sub_1000A2EF0()
{
  unint64_t result = qword_1002AECB8;
  if (!qword_1002AECB8)
  {
    unint64_t result = swift_getWitnessTable("i\\\b", &unk_100288CC0);
    atomic_store(result, (unint64_t *)&qword_1002AECB8);
  }

  return result;
}

uint64_t sub_1000A2F2C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1000A2F58(void *a1@<X0>, uint64_t a2@<X8>)
{
}

unint64_t sub_1000A2F64()
{
  unint64_t result = qword_1002AECC0;
  if (!qword_1002AECC0)
  {
    unint64_t result = swift_getWitnessTable(asc_1001F71D8, &type metadata for LegacyInAppBuyResponse);
    atomic_store(result, (unint64_t *)&qword_1002AECC0);
  }

  return result;
}

uint64_t sub_1000A2FA0()
{
  unint64_t v1 = v0[12];
  if (v1 >> 60 != 15) {
    sub_10003A9EC(v0[11], v1);
  }
  if (v0[15] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, 225LL, 7LL);
}

uint64_t sub_1000A3034(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(sub_100034E8C(v0, v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000A3058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }

  return result;
}

uint64_t type metadata accessor for InAppBuyRoute.AdditionalBuyOptions( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InAppBuyRoute.AdditionalBuyOptions);
}

uint64_t sub_1000A30A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = type metadata accessor for InAppBuyRoute.AdditionalBuyOptions( 0LL,  *(void *)(v4 + 16),  *(void *)(v4 + 24),  a4);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v7 + 32) & ~v7;
  unint64_t v9 = (*(void *)(v6 + 64) + v8 + 9) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v10 = v4 + v8;
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v11 = v10 + *(int *)(v5 + 44);
  uint64_t v12 = type metadata accessor for Date(0LL);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v4 + v9 + 584) != 1LL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject(v4, v9 + 873, v7 | 7);
}

uint64_t sub_1000A32F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(type metadata accessor for InAppBuyRoute.AdditionalBuyOptions( 0LL,  *(void *)(v4 + 16),  *(void *)(v4 + 24),  a4)
                 - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_1000A0518( v4 + v6,  *(unsigned __int8 *)(v4 + v6 + *(void *)(v5 + 64)),  *(unsigned __int8 *)(v4 + v6 + *(void *)(v5 + 64) + 1),  v4 + ((v6 + *(void *)(v5 + 64) + 9) & 0xFFFFFFFFFFFFFFF8LL));
}

uint64_t sub_1000A3360()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000A3384()
{
  return sub_1000CF2D4(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1000A338C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10006F0B8(12LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000A339C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000A33A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A33EC()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

unint64_t sub_1000A33FC()
{
  unint64_t result = qword_1002AE8D0;
  if (!qword_1002AE8D0)
  {
    uint64_t v1 = type metadata accessor for Date(255LL);
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_1002AE8D0);
  }

  return result;
}

uint64_t sub_1000A343C(uint64_t a1)
{
  __int128 v25 = *(_OWORD *)(a1 + 640);
  __int128 v26 = *(_OWORD *)(a1 + 624);
  __int128 v23 = *(_OWORD *)(a1 + 672);
  __int128 v24 = *(_OWORD *)(a1 + 656);
  __int128 v21 = *(_OWORD *)(a1 + 704);
  __int128 v22 = *(_OWORD *)(a1 + 688);
  __int128 v18 = *(_OWORD *)(a1 + 720);
  __int128 v13 = *(_OWORD *)(a1 + 736);
  __int128 v9 = *(_OWORD *)(a1 + 768);
  __int128 v10 = *(_OWORD *)(a1 + 752);
  __int128 v8 = *(_OWORD *)(a1 + 784);
  __int128 v7 = *(_OWORD *)(a1 + 800);
  __int128 v5 = *(_OWORD *)(a1 + 832);
  __int128 v6 = *(_OWORD *)(a1 + 816);
  __int128 v4 = *(_OWORD *)(a1 + 848);
  uint64_t v11 = *(void *)(a1 + 560);
  uint64_t v12 = *(void *)(a1 + 568);
  uint64_t v14 = *(void *)(a1 + 576);
  uint64_t v15 = *(void *)(a1 + 584);
  uint64_t v16 = *(void *)(a1 + 592);
  uint64_t v17 = *(void *)(a1 + 600);
  uint64_t v19 = *(void *)(a1 + 608);
  uint64_t v20 = *(void *)(a1 + 616);
  uint64_t v3 = *(void *)(a1 + 864);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100039578( v11,  v12,  v14,  v15,  v16,  v17,  v19,  v20,  v26,  *((uint64_t *)&v26 + 1),  v25,  *((uint64_t *)&v25 + 1),  v24,  *((uint64_t *)&v24 + 1),  v23,  *((uint64_t *)&v23 + 1),  v22,  *((uint64_t *)&v22 + 1),  v21,  *((uint64_t *)&v21 + 1),  v18,  *((uint64_t *)&v18 + 1),  v13,  *((uint64_t *)&v13 + 1),  v10,  *((uint64_t *)&v10 + 1),  v9,  *((uint64_t *)&v9 + 1),  v8,  *((uint64_t *)&v8 + 1),  v7,  *((uint64_t *)&v7 + 1),  v6,  *((uint64_t *)&v6 + 1),  v5,  *((uint64_t *)&v5 + 1),  v4,  *((uint64_t *)&v4 + 1),  v3);
  return a1;
}

unint64_t sub_1000A3784()
{
  unint64_t result = qword_1002AECD0[0];
  if (!qword_1002AECD0[0])
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSNumber);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, qword_1002AECD0);
  }

  return result;
}

uint64_t *sub_1000A37C0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v14 = a1[25];
  uint64_t v15 = (void *)a1[24];
  uint64_t v12 = a1[27];
  uint64_t v13 = a1[26];
  uint64_t v10 = a1[29];
  uint64_t v11 = a1[28];
  uint64_t v9 = a1[30];
  uint64_t v8 = a1[31];
  __int128 v7 = *((_OWORD *)a1 + 16);
  __int128 v6 = *((_OWORD *)a1 + 17);
  uint64_t v4 = a1[37];
  uint64_t v5 = a1[36];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain(v2);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000A393C(v15, v14, v13, v12, v11, v10, v9, v8, v7, *((uint64_t *)&v7 + 1), v6, *((uint64_t *)&v6 + 1), v5, v4);
  return a1;
}

void *sub_1000A393C( void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (result)
  {
    id v19 = result;
    swift_retain(a2);
    swift_retain(a3);
    swift_retain(a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a12);
    return (void *)swift_bridgeObjectRetain(a14);
  }

  return result;
}

uint64_t *sub_1000A39D4(uint64_t *a1)
{
  uint64_t v6 = *a1;
  uint64_t v14 = a1[25];
  uint64_t v15 = (void *)a1[24];
  uint64_t v12 = a1[27];
  uint64_t v13 = a1[26];
  uint64_t v10 = a1[29];
  uint64_t v11 = a1[28];
  uint64_t v9 = a1[30];
  uint64_t v8 = a1[31];
  __int128 v7 = *((_OWORD *)a1 + 16);
  __int128 v5 = *((_OWORD *)a1 + 17);
  uint64_t v3 = a1[37];
  uint64_t v4 = a1[36];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease(v6);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100081910(v15, v14, v13, v12, v11, v10, v9, v8, v7, *((uint64_t *)&v7 + 1), v5, *((uint64_t *)&v5 + 1), v4, v3);
  return a1;
}

uint64_t sub_1000A3B50(uint64_t a1)
{
  __int128 v5 = *(_OWORD *)(a1 + 272);
  __int128 v6 = *(_OWORD *)(a1 + 288);
  __int128 v3 = *(_OWORD *)(a1 + 240);
  __int128 v4 = *(_OWORD *)(a1 + 256);
  sub_100039578( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 128),  *(void *)(a1 + 136),  *(void *)(a1 + 144),  *(void *)(a1 + 152),  *(void *)(a1 + 160),  *(void *)(a1 + 168),  *(void *)(a1 + 176),  *(void *)(a1 + 184),  *(void *)(a1 + 192),  *(void *)(a1 + 200),  *(void *)(a1 + 208),  *(void *)(a1 + 216),  *(void *)(a1 + 224),  *(void *)(a1 + 232),  v3,  *((uint64_t *)&v3 + 1),  v4,  *((uint64_t *)&v4 + 1),  v5,  *((uint64_t *)&v5 + 1),  v6,  *((uint64_t *)&v6 + 1),  *(void *)(a1 + 304));
  return a1;
}

uint64_t sub_1000A3BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40LL);
}

void sub_1000A3BE8(uint64_t a1)
{
  v4[0] = &unk_1001FB2F8;
  v4[1] = &unk_1001FB310;
  void v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_1000A4384(319LL);
  if (v3 <= 0x3F)
  {
    void v4[3] = *(void *)(v2 - 8) + 64LL;
    void v4[4] = &unk_1001FB310;
    v4[5] = &unk_1001FB310;
    swift_initStructMetadata(a1, 0LL, 6LL, v4, a1 + 32);
  }

void *sub_1000A3C78(uint64_t a1, uint64_t *a2, int *a3)
{
  __int128 v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *__int128 v4 = *a2;
    __int128 v4 = (void *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 1sub_100019F7C(v0 + 6) = *((_BYTE *)a2 + 16);
    *(void *)(a1 + 2sub_100019F7C(v0 + 4) = a2[3];
    uint64_t v8 = a3[11];
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date(0LL);
    swift_bridgeObjectRetain();
    swift_retain();
    if (sub_10001D158((uint64_t)v10, 1LL, v11))
    {
      uint64_t v12 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
      sub_10001762C((uint64_t)v9, 0LL, 1LL, v11);
    }

    uint64_t v14 = a3[13];
    *((_BYTE *)v4 + a3[12]) = *((_BYTE *)a2 + a3[12]);
    *((_BYTE *)v4 + v1sub_100019F7C(v0 + 4) = *((_BYTE *)a2 + v14);
  }

  return v4;
}

uint64_t sub_1000A3D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t result = sub_10001D158(v4, 1LL, v5);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  }
  return result;
}

uint64_t sub_1000A3E10(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 1sub_100019F7C(v0 + 6) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = *(void *)(a2 + 24);
  uint64_t v7 = a3[11];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date(0LL);
  swift_bridgeObjectRetain();
  swift_retain();
  if (sub_10001D158((uint64_t)v9, 1LL, v10))
  {
    uint64_t v11 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
    sub_10001762C((uint64_t)v8, 0LL, 1LL, v10);
  }

  uint64_t v12 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v1sub_100019F7C(v0 + 2) = *(_BYTE *)(a2 + v12);
  return a1;
}

uint64_t sub_1000A3F08(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 1sub_100019F7C(v0 + 6) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  uint64_t v6 = a3[11];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date(0LL);
  int v10 = sub_10001D158((uint64_t)v7, 1LL, v9);
  int v11 = sub_10001D158((uint64_t)v8, 1LL, v9);
  if (!v10)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(v12 + 24))(v7, v8, v9);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }

  if (v11)
  {
LABEL_6:
    uint64_t v13 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
  sub_10001762C((uint64_t)v7, 0LL, 1LL, v9);
LABEL_7:
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_1000A4064(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 1sub_100019F7C(v0 + 6) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = *(void *)(a2 + 24);
  uint64_t v6 = a3[11];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date(0LL);
  if (sub_10001D158((uint64_t)v8, 1LL, v9))
  {
    uint64_t v10 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
    sub_10001762C((uint64_t)v7, 0LL, 1LL, v9);
  }

  uint64_t v11 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  return a1;
}

uint64_t sub_1000A4144(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 1sub_100019F7C(v0 + 6) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = *(void *)(a2 + 24);
  swift_release();
  uint64_t v7 = a3[11];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date(0LL);
  int v11 = sub_10001D158((uint64_t)v8, 1LL, v10);
  int v12 = sub_10001D158((uint64_t)v9, 1LL, v10);
  if (!v11)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }

  if (v12)
  {
LABEL_6:
    uint64_t v14 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  sub_10001762C((uint64_t)v8, 0LL, 1LL, v10);
LABEL_7:
  uint64_t v15 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  return a1;
}

uint64_t sub_1000A4284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A4290);
}

uint64_t sub_1000A4290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(vsub_100019F7C(v0 + 4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    return sub_10001D158(a1 + *(int *)(a3 + 44), a2, v8);
  }

uint64_t sub_1000A4308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A4314);
}

uint64_t sub_1000A4314(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
    return sub_10001762C(v5 + *(int *)(a4 + 44), a2, a2, v7);
  }

  return result;
}

void sub_1000A4384(uint64_t a1)
{
  if (!qword_1002AED58)
  {
    uint64_t v2 = type metadata accessor for Date(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1002AED58);
    }
  }

uint64_t storeEnumTagSinglePayload for InAppBuyRouteError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(vsub_100019F7C(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100019F7C(v0 + 4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_1000A4424 + 4 * byte_1001FB255[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1000A4458 + 4 * byte_1001FB250[v4]))();
}

uint64_t sub_1000A4458(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A4460(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000A4468LL);
  }
  return result;
}

uint64_t sub_1000A4474(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000A447CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 7;
  return result;
}

uint64_t sub_1000A4480(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A4488(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InAppBuyRouteError()
{
  return &type metadata for InAppBuyRouteError;
}

unint64_t sub_1000A44A8()
{
  unint64_t result = qword_1002AED60;
  if (!qword_1002AED60)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FB394, &type metadata for InAppBuyRouteError);
    atomic_store(result, (unint64_t *)&qword_1002AED60);
  }

  return result;
}

uint64_t sub_1000A44E4(__n128 a1)
{
  *(__n128 *)(v1 + 95sub_100019F7C(v0 + 2) = a1;
  *(_OWORD *)(v1 + 968) = *(_OWORD *)(v1 + 368);
  *(_OWORD *)(v1 + 98sub_100019F7C(v0 + 4) = *(_OWORD *)(v1 + 384);
  *(_OWORD *)(v1 + 100sub_10006F0B8(12LL, 0) = *(_OWORD *)(v1 + 400);
  *(_OWORD *)(v1 + 101sub_100019F7C(v0 + 6) = *(_OWORD *)(v1 + 416);
  *(_OWORD *)(v1 + 103sub_100019F7C(v0 + 2) = *(_OWORD *)(v1 + 432);
  *(_OWORD *)(v1 + 1048) = *(_OWORD *)(v1 + 448);
  *(_OWORD *)(v1 + 106sub_100019F7C(v0 + 4) = *(_OWORD *)(v1 + 464);
  *(_OWORD *)(v1 + 108sub_10006F0B8(12LL, 0) = *(_OWORD *)(v1 + 496);
  *(_OWORD *)(v1 + 109sub_100019F7C(v0 + 6) = *(_OWORD *)(v1 + 512);
  *(_OWORD *)(v1 + 111sub_100019F7C(v0 + 2) = *(_OWORD *)(v1 + 528);
  *(_OWORD *)(v1 + 1128) = *(_OWORD *)(v1 + 544);
  *(_OWORD *)(v1 + 114sub_100019F7C(v0 + 4) = *(_OWORD *)(v1 + 576);
  *(_OWORD *)(v1 + 116sub_10006F0B8(12LL, 0) = *(_OWORD *)(v1 + 592);
  *(_OWORD *)(v1 + 117sub_100019F7C(v0 + 6) = *(_OWORD *)(v1 + 608);
  *(_OWORD *)(v1 + 119sub_100019F7C(v0 + 2) = *(_OWORD *)(v1 + 624);
  *(void *)(v1 + 1208) = *(void *)(v1 + 656);
  *(void *)(v1 + 121sub_100019F7C(v0 + 6) = *(void *)(v1 + 640);
  *(_BYTE *)(v1 + 122sub_100019F7C(v0 + 4) = *(_DWORD *)(v1 + 664);
  *(void *)(v1 + 123sub_100019F7C(v0 + 2) = *(void *)(v1 + 680);
  *(void *)(v1 + 124sub_10006F0B8(12LL, 0) = *(void *)(v1 + 672);
  *(_BYTE *)(v1 + 1248) = *(_DWORD *)(v1 + 688);
  return v1 + 2136;
}

__n128 sub_1000A45E0()
{
  *(_DWORD *)(v0 + 6sub_100081CEC(v0 + 88) = *(unsigned __int8 *)(v1 + 552);
  *(void *)(v0 + 68sub_10006F0B8(12LL, 0) = *(void *)(v1 + 536);
  *(void *)(v0 + 67sub_100019F7C(v0 + 2) = *(void *)(v1 + 544);
  *(_DWORD *)(v0 + 66sub_100019F7C(v0 + 4) = *(unsigned __int8 *)(v1 + 528);
  *(void *)(v0 + 65sub_100019F7C(v0 + 6) = *(void *)(v1 + 512);
  *(void *)(v0 + 64sub_10006F0B8(12LL, 0) = *(void *)(v1 + 520);
  __int128 v2 = *(_OWORD *)(v1 + 496);
  *(_OWORD *)(v0 + 608) = *(_OWORD *)(v1 + 480);
  *(_OWORD *)(v0 + 62sub_100019F7C(v0 + 4) = v2;
  __int128 v3 = *(_OWORD *)(v1 + 464);
  *(_OWORD *)(v0 + 57sub_100019F7C(v0 + 6) = *(_OWORD *)(v1 + 448);
  *(_OWORD *)(v0 + 59sub_100019F7C(v0 + 2) = v3;
  __int128 v4 = *(_OWORD *)(v1 + 432);
  *(_OWORD *)(v0 + 528) = *(_OWORD *)(v1 + 416);
  *(_OWORD *)(v0 + 54sub_100019F7C(v0 + 4) = v4;
  __int128 v5 = *(_OWORD *)(v1 + 400);
  *(_OWORD *)(v0 + 49sub_100019F7C(v0 + 6) = *(_OWORD *)(v1 + 384);
  *(_OWORD *)(v0 + 51sub_100019F7C(v0 + 2) = v5;
  __int128 v6 = *(_OWORD *)(v1 + 368);
  *(_OWORD *)(v0 + 448) = *(_OWORD *)(v1 + 352);
  *(_OWORD *)(v0 + 46sub_100019F7C(v0 + 4) = v6;
  __int128 v7 = *(_OWORD *)(v1 + 336);
  *(_OWORD *)(v0 + 41sub_100019F7C(v0 + 6) = *(_OWORD *)(v1 + 320);
  *(_OWORD *)(v0 + 43sub_100019F7C(v0 + 2) = v7;
  __int128 v8 = *(_OWORD *)(v1 + 304);
  *(_OWORD *)(v0 + 38sub_100019F7C(v0 + 4) = *(_OWORD *)(v1 + 288);
  *(_OWORD *)(v0 + 40sub_10006F0B8(12LL, 0) = v8;
  __n128 result = *(__n128 *)(v1 + 272);
  *(__n128 *)(v0 + 368) = result;
  *(void *)(v0 + 35sub_100019F7C(v0 + 2) = *(void *)(v1 + 240);
  return result;
}

uint64_t sub_1000A4678()
{
  return sub_1000A343C(v0);
}

double sub_1000A4680()
{
  *(void *)(v0 + 78sub_100019F7C(v0 + 4) = 0LL;
  *(void *)(v0 + 79sub_100019F7C(v0 + 2) = 0LL;
  *(void *)(v0 + 80sub_10006F0B8(12LL, 0) = v1;
  double result = 0.0;
  *(_OWORD *)(v0 + 808) = 0u;
  *(_OWORD *)(v0 + 82sub_100019F7C(v0 + 4) = 0u;
  *(_OWORD *)(v0 + 84sub_10006F0B8(12LL, 0) = 0u;
  *(_OWORD *)(v0 + 85sub_100019F7C(v0 + 6) = 0u;
  return result;
}

void sub_1000A46B4(uint64_t a1, uint64_t a2)
{
}

void sub_1000A46BC()
{
  *(void *)(v0 + 32sub_10006F0B8(12LL, 0) = 0LL;
  *(_DWORD *)(v0 + 64sub_10006F0B8(12LL, 0) = 2;
  *(_DWORD *)(v0 + 67sub_100019F7C(v0 + 2) = 22;
}

void sub_1000A46DC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_1000A46F0()
{
  return sub_1000A2B6C(v0);
}

__n128 sub_1000A46F8()
{
  *(_OWORD *)(v0 + 69sub_100019F7C(v0 + 6) = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v0 + 71sub_100019F7C(v0 + 2) = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v0 + 728) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v0 + 74sub_100019F7C(v0 + 4) = *(_OWORD *)(v0 + 192);
  __n128 result = *(__n128 *)(v0 + 208);
  *(__n128 *)(v0 + 76sub_10006F0B8(12LL, 0) = result;
  return result;
}

uint64_t sub_1000A473C(void *a1, uint64_t a2)
{
  return sub_100089348(v3, *(_DWORD *)(v2 + 448) & 1);
}

void sub_1000A475C()
{
  *(void *)(v0 + 41sub_100019F7C(v0 + 6) = 0x3233363232333731LL;
}

void sub_1000A4780()
{
  *(_WORD *)(v0 + 161sub_100019F7C(v0 + 4) = *(_WORD *)(v0 + 2484);
  *(void *)(v0 + 161sub_100019F7C(v0 + 6) = 0x3233363232333731LL;
  *(void *)(v0 + 162sub_100019F7C(v0 + 4) = 0xEB00000000373231LL;
  *(void *)(v0 + 163sub_100019F7C(v0 + 2) = 0LL;
  *(_BYTE *)(v0 + 164sub_10006F0B8(12LL, 0) = *(_BYTE *)(v0 + 2472);
}

uint64_t sub_1000A47C0@<X0>(_BYTE *a1@<X1>, char a2@<W8>)
{
  *a1 = a2;
  return swift_willThrow();
}

void sub_1000A47CC(uint64_t a1, uint64_t a2)
{
}

void sub_1000A47D4()
{
  *(_DWORD *)(v0 + 64sub_10006F0B8(12LL, 0) = 2;
  *(_DWORD *)(v0 + 67sub_100019F7C(v0 + 2) = 22;
}

double sub_1000A47E8()
{
  *(void *)(v0 + 261sub_100019F7C(v0 + 6) = 0LL;
  *(void *)(v0 + 2608) = 0LL;
  *(void *)(v0 + 262sub_100019F7C(v0 + 4) = v2;
  *(void *)(v0 + 263sub_100019F7C(v0 + 2) = 0LL;
  *(void *)(v0 + 264sub_10006F0B8(12LL, 0) = 0LL;
  *(void *)(v0 + 2648) = v1;
  double result = 0.0;
  *(_OWORD *)(v0 + 270sub_100019F7C(v0 + 4) = 0u;
  *(_OWORD *)(v0 + 26sub_100081CEC(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 267sub_100019F7C(v0 + 2) = 0u;
  *(_OWORD *)(v0 + 265sub_100019F7C(v0 + 6) = 0u;
  return result;
}

  ;
}

uint64_t sub_1000A482C@<X0>(uint64_t result@<X0>, char a2@<W8>)
{
  *(_BYTE *)(result + 4sub_10006F0B8(12LL, 0) = a2;
  *(_BYTE *)(result + 41) = 0;
  *(void *)(result + 48) = 0x3233363232333731LL;
  *(void *)(result + 5sub_100019F7C(v0 + 6) = 0xEB00000000373231LL;
  *(void *)(result + 6sub_100019F7C(v0 + 4) = 0LL;
  return result;
}

uint64_t sub_1000A485C()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v1, v2);
}

uint64_t sub_1000A486C()
{
  return (*(uint64_t (**)(void))(v0 + 640))();
}

uint64_t sub_1000A4874(uint64_t a1, double a2, __n128 a3)
{
  *(_OWORD *)(v3 + 208) = *(_OWORD *)(a1 + 64);
  *(__n128 *)(v3 + 22sub_100019F7C(v0 + 4) = a3;
  __int128 v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v3 + 17sub_100019F7C(v0 + 6) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v3 + 19sub_100019F7C(v0 + 2) = v4;
  __int128 v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v3 + 14sub_100019F7C(v0 + 4) = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 16sub_10006F0B8(12LL, 0) = v5;
  return sub_1000A2B6C(a1);
}

uint64_t sub_1000A4898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, 0xE300000000000000LL, 0LL);
}

uint64_t sub_1000A48A4()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)( 3157554LL,  0xE300000000000000LL,  3157553LL,  0xE300000000000000LL,  0LL);
}

uint64_t sub_1000A48C8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1000CF360(*(void *)(v3 + 40), v4, a3);
}

_WORD *sub_1000A48D4(_WORD *result)
{
  *double result = 0;
  return result;
}

__n128 sub_1000A48E0()
{
  *(_OWORD *)(v0 + 90sub_100019F7C(v0 + 4) = *(_OWORD *)(v0 + 304);
  __n128 result = *(__n128 *)(v0 + 320);
  *(__n128 *)(v0 + 92sub_10006F0B8(12LL, 0) = result;
  *(void *)(v0 + 93sub_100019F7C(v0 + 6) = *(void *)(v0 + 352);
  *(void *)(v0 + 94sub_100019F7C(v0 + 4) = *(void *)(v0 + 336);
  return result;
}

uint64_t sub_1000A490C()
{
  return swift_bridgeObjectRelease(0xE300000000000000LL);
}

uint64_t sub_1000A4914(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1000CF360(a1, v3, a3);
}

uint64_t sub_1000A491C(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

uint64_t sub_1000A4924(uint64_t a1)
{
  *(void *)(v1 + 16sub_10006F0B8(12LL, 0) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 160, v1 + 168, v2);
}

void sub_1000A4944(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000A494C()
{
  return (*(uint64_t (**)(void))(v0 + 672))();
}

void sub_1000A4954()
{
}

void sub_1000A4960(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

BOOL sub_1000A496C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000A497C()
{
  return sub_1000A2528((uint64_t)&STACK[0x3A8]);
}

  ;
}

__n128 sub_1000A49A0(uint64_t a1)
{
  __int128 v2 = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(v1 + 27sub_100019F7C(v0 + 2) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v1 + 2sub_100081CEC(v0 + 88) = v2;
  __int128 v3 = *(_OWORD *)(a1 + 136);
  __n128 result = *(__n128 *)(a1 + 120);
  *(__n128 *)(v1 + 24sub_10006F0B8(12LL, 0) = result;
  *(_OWORD *)(v1 + 25sub_100019F7C(v0 + 6) = v3;
  return result;
}

  ;
}

void sub_1000A49E0(unsigned __int8 a1)
{
}

void *sub_1000A49E8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xD1uLL);
}

void sub_1000A49F0()
{
  *(void *)(v0 + 608) = 0LL;
  *(void *)(v0 + 62sub_100019F7C(v0 + 4) = 0LL;
}

uint64_t sub_1000A4A04()
{
  return 0x64657269707865LL;
}

uint64_t sub_1000A4A18()
{
  return 0x676E697473697865LL;
}

uint64_t sub_1000A4A2C(uint64_t a1)
{
  *(void *)(v1 + 15sub_100019F7C(v0 + 2) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 152, v2, v3);
}

__n128 sub_1000A4A44()
{
  *(_OWORD *)(v0 + 80sub_10006F0B8(12LL, 0) = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 81sub_100019F7C(v0 + 6) = *(_OWORD *)(v0 + 240);
  return *(__n128 *)(v0 + 256);
}

uint64_t sub_1000A4A64(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1000CF360(a1, v3, a3);
}

uint64_t sub_1000A4A6C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  a12 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a12, v13, v12);
}

uint64_t sub_1000A4A80(uint64_t a1)
{
  return swift_allocObject(a1, 225LL, 7LL);
}

unint64_t sub_1000A4A8C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(*(void *)(v1 + 568) + 24LL) = a1;
  return sub_1000A2F64();
}

void sub_1000A4A98()
{
}

uint64_t sub_1000A4AA0(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_1000A4AA8()
{
  return sub_10002A118((__int128 *)(v0 + 168), v0 + 208);
}

uint64_t sub_1000A4AB4()
{
  return swift_release(*(void *)(v0 + 48));
}

void *sub_1000A4ABC()
{
  return sub_100019F58(*(void **)(v0 + 88), *(void *)(*(void *)(v0 + 656) + 72LL));
}

BOOL sub_1000A4ACC(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000A4ADC()
{
  return swift_release(*(void *)(v0 + 56));
}

__n128 sub_1000A4AE4()
{
  *(void *)(v0 + 33sub_100019F7C(v0 + 6) = *(void *)(v1 + 248);
  __int128 v2 = *(_OWORD *)(v1 + 224);
  __n128 result = *(__n128 *)(v1 + 208);
  *(__n128 *)(v0 + 30sub_100019F7C(v0 + 4) = result;
  *(_OWORD *)(v0 + 32sub_10006F0B8(12LL, 0) = v2;
  return result;
}

  ;
}

uint64_t sub_1000A4B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return sub_1000CF360(v6, v5, (uint64_t *)va);
}

uint64_t sub_1000A4B24@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(result + 3sub_100019F7C(v0 + 2) = a2;
  *(_WORD *)(result + 4sub_10006F0B8(12LL, 0) = v2;
  *(_WORD *)(result + 4sub_100019F7C(v0 + 2) = v3;
  return result;
}

void sub_1000A4B34(int a1@<W8>)
{
  *(_DWORD *)(v1 + 176sub_100019F7C(v0 + 4) = a1;
  *(void *)(v1 + 1768) = 0LL;
  *(void *)(v1 + 177sub_100019F7C(v0 + 6) = 0LL;
  *(void *)(v1 + 178sub_100019F7C(v0 + 4) = *(void *)(v1 + 488);
}

uint64_t sub_1000A4B4C()
{
  return swift_release(*(void *)(v0 + 152));
}

void sub_1000A4B54()
{
  v0[206] = 0LL;
  v0[207] = 0LL;
  v0[208] = 0xF000000000000000LL;
  v0[209] = 0LL;
}

void sub_1000A4B6C()
{
  *(_WORD *)(v0 + 1sub_100019F7C(v0 + 2) = 2080;
}

void *sub_1000A4B7C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x369uLL);
}

double sub_1000A4B84(__n128 a1)
{
  *(__n128 *)(v1 + 59sub_100019F7C(v0 + 2) = a1;
  double result = 0.0;
  *(_OWORD *)(v1 + 51sub_100019F7C(v0 + 2) = 0u;
  *(_DWORD *)(v1 + 64sub_10006F0B8(12LL, 0) = 1;
  return result;
}

void sub_1000A4B9C(uint64_t a1@<X8>)
{
  *(void *)(v1 + 160sub_10006F0B8(12LL, 0) = a1;
  *(_BYTE *)(v1 + 1608) = *(_BYTE *)(v1 + 2488);
  *(_BYTE *)(v1 + 1609) = 0;
}

  ;
}

uint64_t sub_1000A4BC4()
{
  return swift_release(*(void *)(v0 + 488));
}

uint64_t sub_1000A4BCC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 160))(v2, v1);
}

uint64_t sub_1000A4BDC()
{
  return v0 + 2136;
}

uint64_t sub_1000A4BF4()
{
  return swift_retain(v0);
}

uint64_t sub_1000A4BFC()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t sub_1000A4C0C()
{
  return sub_1000A343C(v0 + 696);
}

void sub_1000A4C1C(uint64_t a1)
{
}

uint64_t sub_1000A4C28(uint64_t a1, uint64_t a2)
{
  return swift_retain();
}

uint64_t sub_1000A4C44()
{
  return swift_release(*(void *)(v0 + 384));
}

uint64_t sub_1000A4C4C(uint64_t *a1, const void *a2, uint64_t *a3, uint64_t a4)
{
  return sub_10009E0D8(a1, a2, a3, a4);
}

uint64_t sub_1000A4C58()
{
  return swift_retain(*(void *)(v0 + 32));
}

  ;
}

uint64_t sub_1000A4C78( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31)
{
  return swift_bridgeObjectRelease(a31);
}

uint64_t sub_1000A4C80@<X0>(uint64_t result@<X0>, char a2@<W8>)
{
  *(_BYTE *)(result + 7sub_100019F7C(v0 + 2) = a2;
  *(void *)(result + 8sub_10006F0B8(12LL, 0) = 0LL;
  *(void *)(result + sub_100081CEC(v0 + 88) = 0LL;
  *(void *)(result + 9sub_100019F7C(v0 + 6) = 0xF000000000000000LL;
  *(void *)(result + 10sub_100019F7C(v0 + 4) = 0LL;
  return result;
}

  ;
}

  ;
}

uint64_t sub_1000A4CBC()
{
  return v0;
}

uint64_t sub_1000A4CC8(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_1000A4CD4()
{
  return swift_release(*(void *)(v0 + 40));
}

void sub_1000A4CDC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_1000A4CE4()
{
  return swift_errorRelease(STACK[0x718]);
}

uint64_t sub_1000A4CEC(uint64_t a1)
{
  *(void *)(v1 + 16sub_10006F0B8(12LL, 0) = a1;
  return v1 + 160;
}

uint64_t sub_1000A4D00()
{
  return sub_1000B774C();
}

void sub_1000A4D08(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_1000A4D14()
{
  return sub_100053590(v0 + 696);
}

uint64_t sub_1000A4D1C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1000ACB64(a1, a2, 6u, a3);
}

void sub_1000A4D24()
{
  *(void *)(v0 + 74sub_100019F7C(v0 + 4) = 0LL;
  *(_BYTE *)(v0 + 75sub_100019F7C(v0 + 2) = v1;
  *(void *)(v0 + 768) = 0LL;
  *(void *)(v0 + 76sub_10006F0B8(12LL, 0) = 0LL;
}

uint64_t sub_1000A4D38()
{
  return swift_release(v0);
}

uint64_t sub_1000A4D44()
{
  return swift_arrayDestroy(v0, 3LL);
}

Swift::Bool_optional sub_1000A4D50()
{
  v2._countAndFlagsBits = v1;
  v2._object = v0;
  return Bool.init(_:)(v2);
}

uint64_t sub_1000A4D5C()
{
  return v0;
}

void *sub_1000A4D70()
{
  return sub_100019F58((void *)(v0 + 2136), *(void *)(v0 + 2160));
}

uint64_t sub_1000A4D7C()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t sub_1000A4D88()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_1000A4D94()
{
  return Logger.logObject.getter();
}

uint64_t sub_1000A4D9C(uint64_t a1)
{
  return sub_10001D158(a1, 1LL, *(void *)(v1 + 544));
}

void *sub_1000A4DA8()
{
  return sub_100019F58(*(void **)(v0 + 416), *(void *)(v1 + 112));
}

void *sub_1000A4DB4()
{
  return sub_100019F58((void *)(v0 + 88), *(void *)(v0 + 112));
}

void sub_1000A4DC0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void sub_1000A4DCC(uint64_t a1, uint64_t *a2)
{
}

BOOL sub_1000A4DD4()
{
  return sub_1000A0990(v1, v0);
}

uint64_t *initializeBufferWithCopyOfBuffer for EventLoopIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for HTTPHeaders(void *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t *assignWithCopy for EventLoopIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  return a1;
}

uint64_t *assignWithTake for EventLoopIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  a1[1] = a2[1];
  return a1;
}

void type metadata accessor for Template()
{
}

void *sub_1000A4EA8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_1000175B0(&qword_1002A9720);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v50 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v50 - v15;
  __chkstk_darwin(v14);
  uint64_t v52 = (char *)&v50 - v17;
  uint64_t v18 = type metadata accessor for OctaneConfiguration();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v18);
  id v20 = [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  uint64_t v51 = a1;
  NSString v21 = String._bridgeToObjectiveC()();
  if (a4)
  {
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v22 = 0LL;
  }

  id v23 = [v20 URLForResource:v21 withExtension:v22];

  if (v23)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v23);

    uint64_t v24 = v11;
    __int128 v25 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v25(v9, v16, v10);
    sub_1000A6D8C((uint64_t)v9, 0LL);
    if (sub_10001D158((uint64_t)v9, 1LL, v10) != 1)
    {
      swift_bridgeObjectRelease();
      __int128 v26 = v52;
      v25(v52, v9, v10);
      uint64_t v37 = String.init(contentsOf:)(v26);
      unint64_t v39 = v38;
      uint64_t v40 = sub_1000AE66C(v37, v38);
      uint64_t v53 = 0LL;
      os_log_type_t v47 = sub_1000AF1F0((uint64_t)v40, &v53, v41, v42, v43, v44, v45, v46);
      swift_bridgeObjectRelease();
      uint64_t v48 = String.utf8CString.getter(v37, v39);
      sub_100023EEC();
      swift_release(v48);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v10);
      return v47;
    }
  }

  else
  {
    sub_1000A6D8C((uint64_t)v9, 1LL);
  }

  sub_1000220E8((uint64_t)v9);
  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v27 = type metadata accessor for Logger(0LL);
  sub_100018F68(v27, (uint64_t)qword_1002EB9D0);
  uint64_t v28 = swift_bridgeObjectRetain();
  uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
  os_log_type_t v31 = static os_log_type_t.error.getter(v29, v30);
  if (os_log_type_enabled(v29, v31))
  {
    uint64_t v32 = (uint8_t *)sub_100019464(12LL);
    uint64_t v33 = sub_100019464(32LL);
    uint64_t v53 = v33;
    *(_DWORD *)uint64_t v32 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v34 = sub_1000CF360(v51, a2, &v53);
    uint64_t v35 = sub_1000A6D6C(v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v35, v36, v32 + 4);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v29, v31, "No url found for resource: %s", v32, 0xCu);
    swift_arrayDestroy(v33, 1LL);
    sub_10001A408(v33);
    sub_10001A408((uint64_t)v32);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  return 0LL;
}

uint64_t sub_1000A5464(uint64_t a1, uint64_t a2, Swift::Int a3)
{
  uint64_t v5 = sub_1000542B0(v10);
  uint64_t v8 = v5;
  if (v7 != 3)
  {
    sub_100054B00(v5, v6, v7);
    uint64_t v8 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, &_s5ValueON);
  }

  v10[0] = 0LL;
  v10[1] = 0xE000000000000000LL;
  String.reserveCapacity(_:)(a3);
  sub_1000A5774(v8, a2);
  sub_100023EEC();
  return v10[0];
}

void sub_1000A5510( __int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = sub_1000A6D80(a1, a2, a3, a4, a5, a6, a7, a8, v24, v25, v26, *((uint64_t *)&v26 + 1), v27, v28, v29, v30, v31);
  if ((v34 & 1) != 0)
  {
    uint64_t v10 = v31;
    sub_1000A6CF0(v8, &v26);
    uint64_t v11 = v26;
    uint64_t v12 = v10;
    goto LABEL_18;
  }

  uint64_t v13 = v32;
  uint64_t v14 = v33;
  sub_1000A6D44((uint64_t)v9, &v26);
  if ((v15 & 1) == 0)
  {
    sub_1000A6D0C();
    BOOL v21 = v21 && v13 == v18;
    BOOL v22 = v21 && v16 == v19;
    BOOL v23 = v22 && v17 == v20;
    if (v23 || (sub_1000A6D5C() & 1) != 0)
    {
      uint64_t v12 = v14;
      uint64_t v11 = (uint64_t)v8;
LABEL_18:
      sub_10018C1BC(v12, v11);
    }
  }

void sub_1000A55B8( __int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __asm { BR              X10 }

void sub_1000A55F0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19)
{
  unint64_t v19 = a16;
  unint64_t v20 = a17;
  uint64_t v21 = a18;
  uint64_t v22 = a19;
  sub_1000A6D44(a1, &a11);
  if (!v23
    && (v21 != a12 || v22 != a13 || v19 >> 16 != (unint64_t)a11 >> 16 || v20 >> 16 != *((void *)&a11 + 1) >> 16))
  {
    _stringCompareInternal(_:_:_:_:expecting:)(v21, v22);
  }

  sub_1000A6D30();
}

uint64_t sub_1000A56F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000A571C( a1,  a2,  a3,  a4,  (void (*)(uint64_t, _BYTE *))sub_1000A6CF0,  (uint64_t (*)(_BYTE *, _BYTE *))sub_1000A5510);
}

uint64_t sub_1000A5708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000A571C( a1,  a2,  a3,  a4,  (void (*)(uint64_t, _BYTE *))sub_1000A6CF0,  (uint64_t (*)(_BYTE *, _BYTE *))sub_1000A55B8);
}

uint64_t sub_1000A571C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, _BYTE *), uint64_t (*a6)(_BYTE *, _BYTE *))
{
  return a6(v10, v11) & 1;
}

void sub_1000A5774(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    uint64_t v2 = a2 + 32;
    swift_bridgeObjectRetain();
    __asm { BR              X9 }
  }

uint64_t sub_1000A6374(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  if (a6 < 2u) {
    return swift_bridgeObjectRelease(a4);
  }
  if (a6 == 3)
  {
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a5);
  }

  else if (a6 == 2)
  {
    return swift_bridgeObjectRelease(result);
  }

  return result;
}

uint64_t sub_1000A63C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_1000175B0(&qword_1002ABAC8);
  char v41 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    unint64_t v39 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v38 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0LL;
    uint64_t v40 = v5;
    if (!v11) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v15 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v14 << 6))
    {
      unint64_t v20 = (uint64_t *)(*(void *)(v5 + 48) + 16 * i);
      uint64_t v21 = *v20;
      uint64_t v22 = v20[1];
      uint64_t v23 = *(void *)(v5 + 56) + 24 * i;
      uint64_t v25 = *(void *)v23;
      uint64_t v24 = *(void *)(v23 + 8);
      char v26 = *(_BYTE *)(v23 + 16);
      if ((v41 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_100054B2C(v25, v24, v26);
      }

      Hasher.init(_seed:)(v42);
      String.hash(into:)(v42, v21, v22);
      uint64_t result = Hasher._finalize()();
      uint64_t v27 = -1LL << *(_BYTE *)(v8 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1LL << v28) & ~*(void *)(v12 + 8 * (v28 >> 6))) == 0)
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v27) >> 6;
        while (++v29 != v32 || (v31 & 1) == 0)
        {
          BOOL v33 = v29 == v32;
          if (v29 == v32) {
            unint64_t v29 = 0LL;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v12 + 8 * v29);
          if (v34 != -1)
          {
            unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        return result;
      }

      unint64_t v30 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v12 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v30;
      uint64_t v35 = (void *)(*(void *)(v8 + 48) + 16 * v30);
      *uint64_t v35 = v21;
      v35[1] = v22;
      uint64_t v36 = *(void *)(v8 + 56) + 24 * v30;
      *(void *)uint64_t v36 = v25;
      *(void *)(v36 + 8) = v24;
      *(_BYTE *)(v36 + 1sub_100019F7C(v0 + 6) = v26;
      ++*(void *)(v8 + 16);
      uint64_t v5 = v40;
      if (v11) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v17 = v14 + 1;
      if (__OFADD__(v14, 1LL)) {
        goto LABEL_42;
      }
      if (v17 >= v38) {
        goto LABEL_35;
      }
      unint64_t v18 = v39[v17];
      ++v14;
      if (!v18)
      {
        int64_t v14 = v17 + 1;
        if (v17 + 1 >= v38) {
          goto LABEL_35;
        }
        unint64_t v18 = v39[v14];
        if (!v18)
        {
          int64_t v19 = v17 + 2;
          if (v19 >= v38)
          {
LABEL_35:
            swift_release(v5);
            uint64_t v3 = v2;
            if ((v41 & 1) != 0)
            {
              uint64_t v37 = 1LL << *(_BYTE *)(v5 + 32);
              if (v37 >= 64) {
                sub_1001A2AC0(0LL, (unint64_t)(v37 + 63) >> 6, v39);
              }
              else {
                *unint64_t v39 = -1LL << v37;
              }
              *(void *)(v5 + 1sub_100019F7C(v0 + 6) = 0LL;
            }

            break;
          }

          unint64_t v18 = v39[v19];
          if (!v18)
          {
            while (1)
            {
              int64_t v14 = v19 + 1;
              if (__OFADD__(v19, 1LL)) {
                goto LABEL_43;
              }
              if (v14 >= v38) {
                goto LABEL_35;
              }
              unint64_t v18 = v39[v14];
              ++v19;
              if (v18) {
                goto LABEL_21;
              }
            }
          }

          int64_t v14 = v19;
        }
      }

uint64_t sub_1000A66E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(void *)a1 = a4;
  *(void *)(a1 + 8) = a5;
  *(_BYTE *)(a1 + 1sub_100019F7C(v0 + 6) = a6;
  swift_bridgeObjectRetain();
  sub_100054B2C(a4, a5, a6);
  return a2;
}

__n128 sub_1000A674C@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3 = sub_1000A66E8( (uint64_t)&v7,  *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(_BYTE *)(a1 + 32));
  unsigned __int8 v4 = v8;
  __n128 result = v7;
  a2->n128_u64[0] = v3;
  a2->n128_u64[1] = v6;
  a2[1] = result;
  a2[2].n128_u8[0] = v4;
  return result;
}

uint64_t sub_1000A6798@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  *a4 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v8 = -1LL;
  }
  a4[3] = 0LL;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t sub_1000A67D4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  if (a6 < 2u) {
    return swift_bridgeObjectRetain(a4);
  }
  if (a6 == 3)
  {
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a5);
  }

  else if (a6 == 2)
  {
    return swift_bridgeObjectRetain(result);
  }

  return result;
}

uint64_t sub_1000A6828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a6 & 1) == 0)
  {
    swift_bridgeObjectRelease(a4);
    a1 = a5;
  }

  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_1000A6854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a6 & 1) == 0)
  {
    swift_bridgeObjectRetain(a4);
    a1 = a5;
  }

  return swift_bridgeObjectRetain(a1);
}

unint64_t sub_1000A6880()
{
  unint64_t result = qword_1002B9370;
  if (!qword_1002B9370)
  {
    uint64_t v1 = type metadata accessor for URL(255LL);
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for URL, v1);
    atomic_store(result, (unint64_t *)&qword_1002B9370);
  }

  return result;
}

uint64_t sub_1000A68C0(uint64_t a1)
{
  return sub_1000A6828( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(_BYTE *)(a1 + 40));
}

uint64_t sub_1000A68D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(_BYTE *)(a2 + 40);
  sub_1000A6854(*(void *)a2, v4, v5, v6, v7, v8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = v5;
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = v6;
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = v7;
  *(_BYTE *)(a1 + 4sub_10006F0B8(12LL, 0) = v8;
  return a1;
}

uint64_t sub_1000A694C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(_BYTE *)(a2 + 40);
  sub_1000A6854(*(void *)a2, v4, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 32);
  char v14 = *(_BYTE *)(a1 + 40);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = v5;
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = v6;
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = v7;
  *(_BYTE *)(a1 + 4sub_10006F0B8(12LL, 0) = v8;
  sub_1000A6828(v9, v10, v11, v12, v13, v14);
  return a1;
}

__n128 sub_1000A69D4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 1sub_100019F7C(v0 + 6) = v3;
  return result;
}

uint64_t sub_1000A69E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  char v4 = *(_BYTE *)(a2 + 40);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  char v10 = *(_BYTE *)(a1 + 40);
  __int128 v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1sub_100019F7C(v0 + 6) = v11;
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = v3;
  *(_BYTE *)(a1 + 4sub_10006F0B8(12LL, 0) = v4;
  sub_1000A6828(v5, v7, v6, v8, v9, v10);
  return a1;
}

uint64_t sub_1000A6A38(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_1000A6A78(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 2sub_100019F7C(v0 + 4) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 4sub_10006F0B8(12LL, 0) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 41) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 41) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 4sub_10006F0B8(12LL, 0) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000A6AC8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_1000A6AD0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 4sub_10006F0B8(12LL, 0) = a2 & 1;
  return result;
}

void type metadata accessor for Template.Component.Condition()
{
}

uint64_t sub_1000A6AE8(uint64_t a1)
{
  return sub_1000A6374( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(_BYTE *)(a1 + 40));
}

uint64_t sub_1000A6B00(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  unsigned __int8 v8 = *(_BYTE *)(a2 + 40);
  sub_1000A67D4(*(void *)a2, v4, v5, v6, v7, v8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = v5;
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = v6;
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = v7;
  *(_BYTE *)(a1 + 4sub_10006F0B8(12LL, 0) = v8;
  return a1;
}

uint64_t sub_1000A6B74(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  unsigned __int8 v8 = *(_BYTE *)(a2 + 40);
  sub_1000A67D4(*(void *)a2, v4, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = v5;
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = v6;
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = v7;
  unsigned __int8 v14 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 4sub_10006F0B8(12LL, 0) = v8;
  sub_1000A6374(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t sub_1000A6BFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  char v4 = *(_BYTE *)(a2 + 40);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  __int128 v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1sub_100019F7C(v0 + 6) = v10;
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = v3;
  unsigned __int8 v11 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 4sub_10006F0B8(12LL, 0) = v4;
  sub_1000A6374(v5, v7, v6, v8, v9, v11);
  return a1;
}

uint64_t sub_1000A6C4C(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && *(_BYTE *)(a1 + 41))
    {
      int v2 = *(_DWORD *)a1 + 252;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
      if (v3 <= 3) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_1000A6C8C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 2sub_100019F7C(v0 + 4) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 4sub_10006F0B8(12LL, 0) = 0;
    *(void *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 41) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 41) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 4sub_10006F0B8(12LL, 0) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000A6CDC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 4sub_10006F0B8(12LL, 0) = a2;
  return result;
}

void type metadata accessor for Template.Component()
{
}

_OWORD *sub_1000A6CF0(__int128 *a1, _OWORD *a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(__int128 *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

  ;
}

  ;
}

_OWORD *sub_1000A6D44(uint64_t a1, _OWORD *a2)
{
  return sub_1000A6CF0(v2, a2);
}

uint64_t sub_1000A6D5C()
{
  return _stringCompareInternal(_:_:_:_:expecting:)(v0, v1);
}

uint64_t sub_1000A6D6C(uint64_t a1)
{
  *(void *)(v1 - 9sub_100019F7C(v0 + 6) = a1;
  return v1 - 96;
}

_OWORD *sub_1000A6D80( __int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17)
{
  return sub_1000A6CF0(a1, &a17);
}

uint64_t sub_1000A6D8C(uint64_t a1, uint64_t a2)
{
  return sub_10001762C(a1, a2, 1LL, v2);
}

uint64_t sub_1000A6D98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AppReceiptResponse = type metadata accessor for CreateAppReceiptResponse(0LL);
  sub_1000226C8();
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  unsigned __int8 v11 = (char *)&v82 - v10;
  sub_1000175B0(&qword_1002AD1C0);
  sub_1000226C8();
  __chkstk_darwin(v12);
  unsigned __int8 v14 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v15 = type metadata accessor for AppTransaction(0LL);
  sub_1000226C8();
  __chkstk_darwin(v16);
  unint64_t v18 = (uint64_t *)((char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10003A968(a1 + 56, (uint64_t)v118);
  sub_10003A968((uint64_t)v118, (uint64_t)&v121);
  if (*(void *)&v122[0])
  {
    uint64_t v95 = v9;
    uint64_t v96 = v14;
    uint64_t v97 = v11;
    uint64_t v98 = v2;
    __int128 v119 = v121;
    *(_OWORD *)uint64_t v120 = v122[0];
    *(void *)&v120[15] = *(void *)((char *)v122 + 15);
    uint64_t v19 = sub_1000ACD2C();
    unint64_t v21 = v20;
    uint64_t v22 = type metadata accessor for PropertyListDecoder(0LL);
    swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    PropertyListDecoder.init()();
    sub_1000A758C();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( &type metadata for CreateAppReceiptRequest,  v19,  v21,  &type metadata for CreateAppReceiptRequest);
    uint64_t v93 = v19;
    unint64_t v94 = v21;
    swift_release();
    uint64_t v88 = v99;
    uint64_t v89 = v101;
    uint64_t v27 = *((void *)&v102 + 1);
    unint64_t v90 = v102;
    uint64_t v91 = v100;
    uint64_t v28 = v103;
    uint64_t v29 = v105;
    uint64_t v92 = v106;
    uint64_t v30 = v108;
    uint64_t v87 = v107;
    uint64_t v31 = swift_bridgeObjectRetain();
    sub_1000CDD90(v31, (uint64_t)&v99);
    if ((v109 & 1) != 0)
    {
      uint64_t v86 = v27;
      char v32 = _stringCompareWithSmolCheck(_:_:expecting:)( 3157554LL,  0xE300000000000000LL,  3157553LL,  0xE300000000000000LL,  0LL);
      swift_bridgeObjectRelease();
      sub_1000A75C8(&v99);
      if ((v32 & 1) == 0)
      {
        if (v28)
        {
          sub_100019F58(v98 + 6, v98[9]);
          uint64_t v84 = v29;
          swift_bridgeObjectRetain();
          uint64_t v83 = v28;
          char v26 = 2;
          uint64_t v33 = v88;
          uint64_t v34 = v91;
          sub_1000765E4(2uLL, v88, v91, v35, v36, v37, v38, v39);
          uint64_t v87 = v40;
          int v85 = v41 & 1;
          *unint64_t v18 = 0x65646F6358LL;
          v18[1] = 0xE500000000000000LL;
          v18[2] = v33;
          void v18[3] = v34;
          uint64_t v42 = v89;
          unint64_t v43 = v90;
          void v18[4] = v89;
          void v18[5] = v43;
          v18[6] = v42;
          v18[7] = v43;
          swift_bridgeObjectRetain_n(v43, 2LL);
          uint64_t v44 = swift_bridgeObjectRetain();
          uint64_t v45 = static Date.now.getter(v44);
          uint64_t v46 = static Date.now.getter(v45);
          static Date.distantPast.getter(v46);
          uint64_t v47 = v83;
          sub_10005A734(v86, v83);
          uint64_t v86 = v48;
          uint64_t v82 = v49;
          uint64_t v88 = v51;
          uint64_t v89 = v50;
          sub_100056ADC();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n(v47, 2LL);
          swift_bridgeObjectRelease();
          sub_1000A7818();
          swift_bridgeObjectRelease();
          uint64_t v52 = (void *)((char *)v18 + *(int *)(v15 + 48));
          uint64_t v53 = v82;
          *uint64_t v52 = v86;
          v52[1] = v53;
          uint64_t v54 = (void *)((char *)v18 + *(int *)(v15 + 44));
          uint64_t v55 = v88;
          void *v54 = v89;
          v54[1] = v55;
          sub_100019F58(v98 + 11, v98[14]);
          uint64_t v56 = (uint64_t)v96;
          sub_1001C2204((uint64_t)v18, v87, v85, (uint64_t)v96);
          uint64_t v57 = (uint64_t)v97;
          sub_1000A76E4(v56, (uint64_t)&v97[*(int *)(AppReceiptResponse + 24)]);
          *(void *)uint64_t v57 = 0LL;
          *(_BYTE *)(v57 + 8) = 0;
          uint64_t v30 = (uint64_t)v95;
          sub_1000A772C(v57, (uint64_t)v95);
          sub_1001C1E18(v30);
          sub_1000A77EC();
          sub_1000A77B0(v57, type metadata accessor for CreateAppReceiptResponse);
          sub_1000A7770(v56);
          sub_1000A77B0((uint64_t)v18, type metadata accessor for AppTransaction);
LABEL_12:
          unsigned int v64 = HIWORD(*(unsigned int *)&sub_10001ED94());
          uint64_t v65 = type metadata accessor for HTTPResponseHead._Storage();
          uint64_t v66 = sub_10001ED7C(v65);
          uint64_t result = sub_1000A7838(v66);
          *(_WORD *)(result + 4sub_100019F7C(v0 + 2) = v64;
          uint64_t v25 = _swiftEmptyArrayStorage;
          goto LABEL_4;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000A7818();
        swift_bridgeObjectRelease();
        if (qword_1002A8D90 != -1) {
          swift_once(&qword_1002A8D90, sub_100183E34);
        }
        uint64_t v77 = type metadata accessor for Logger(0LL);
        uint64_t v78 = sub_100018F68(v77, (uint64_t)qword_1002EB9D0);
        uint64_t v69 = (os_log_s *)Logger.logObject.getter(v78);
        os_log_type_t v80 = static os_log_type_t.error.getter(v69, v79);
        BOOL v81 = sub_100024E9C(v80);
        uint64_t v74 = v93;
        unint64_t v73 = v94;
        if (v81)
        {
          uint64_t v75 = (uint8_t *)sub_10001A414();
          *(_WORD *)uint64_t v75 = 0;
          uint64_t v76 = "Unable to create app receipt, no device verification provided";
          goto LABEL_21;
        }

        goto LABEL_22;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      sub_1000A75C8(&v99);
    }

    if (v30)
    {
      unint64_t v58 = sub_1000A784C();
      uint64_t v59 = *v58;
      uint64_t v60 = *(os_unfair_lock_s **)(*(void *)(*v58 + 128LL) + 16LL);
      swift_retain();
      swift_bridgeObjectRetain();
      os_unfair_lock_lock(v60);
      *(_BYTE *)(v59 + 11sub_100019F7C(v0 + 2) = 0;
      os_unfair_lock_unlock(v60);
      swift_release();
      sub_1000A784C();
      unint64_t v15 = v90;
      uint64_t AppReceiptResponse = v91;
      uint64_t v61 = sub_1000884B8();
      unint64_t v63 = v62;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v26 = 2;
      swift_bridgeObjectRelease_n(v30, 2LL);
      sub_100056ADC();
      swift_bridgeObjectRelease();
      sub_1000A7818();
      sub_1000A7820();
      sub_1000A7820();
      sub_100196558(0LL, 0LL, v61, v63);
      sub_1000A77EC();
      sub_1000A782C();
      sub_1000A782C();
      goto LABEL_12;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100056ADC();
    swift_bridgeObjectRelease();
    sub_1000A7818();
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v67 = type metadata accessor for Logger(0LL);
    uint64_t v68 = sub_100018F68(v67, (uint64_t)qword_1002EB9D0);
    uint64_t v69 = (os_log_s *)Logger.logObject.getter(v68);
    os_log_type_t v71 = static os_log_type_t.error.getter(v69, v70);
    BOOL v72 = sub_100024E9C(v71);
    uint64_t v74 = v93;
    unint64_t v73 = v94;
    if (v72)
    {
      uint64_t v75 = (uint8_t *)sub_10001A414();
      *(_WORD *)uint64_t v75 = 0;
      uint64_t v76 = "Unable to create app receipt, no device identifier provided";
LABEL_21:
      _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v30, v76, v75, 2u);
      swift_slowDealloc(v75, -1LL, -1LL);
    }

__n128 sub_1000A74B4@<Q0>(uint64_t a1@<X8>)
{
  unsigned int v2 = HIWORD(*(unsigned int *)&sub_10001ED94());
  uint64_t v3 = type metadata accessor for HTTPResponseHead._Storage();
  uint64_t v4 = sub_10001ED7C(v3);
  uint64_t v5 = sub_1000A7838(v4);
  *(_WORD *)(v5 + 4sub_100019F7C(v0 + 2) = v2;
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = _swiftEmptyArrayStorage;
  *(_BYTE *)(a1 + 1sub_100019F7C(v0 + 6) = 2;
  __n128 result = v7;
  *(__n128 *)(a1 + 2sub_100019F7C(v0 + 4) = v7;
  *(void *)(a1 + 4sub_10006F0B8(12LL, 0) = v8;
  *(void *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 6sub_100019F7C(v0 + 2) = v12;
  *(_WORD *)(a1 + 6sub_10006F0B8(12LL, 0) = v11;
  *(_DWORD *)(a1 + 5sub_100019F7C(v0 + 6) = v10;
  return result;
}

uint64_t type metadata accessor for CreateAppReceiptRoute()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService21CreateAppReceiptRoute);
}

unint64_t sub_1000A758C()
{
  unint64_t result = qword_1002AEE48;
  if (!qword_1002AEE48)
  {
    unint64_t result = swift_getWitnessTable("q!\b", &type metadata for CreateAppReceiptRequest);
    atomic_store(result, (unint64_t *)&qword_1002AEE48);
  }

  return result;
}

void *sub_1000A75C8(void *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = a1[8];
  uint64_t v4 = a1[10];
  uint64_t v5 = a1[12];
  uint64_t v6 = a1[14];
  uint64_t v7 = a1[16];
  uint64_t v8 = a1[18];
  uint64_t v9 = a1[19];
  uint64_t v10 = a1[21];
  uint64_t v12 = a1[24];
  uint64_t v13 = a1[28];
  uint64_t v14 = a1[30];
  uint64_t v15 = a1[32];
  uint64_t v16 = a1[34];
  uint64_t v17 = a1[36];
  uint64_t v18 = a1[38];
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v18);
  return a1;
}

uint64_t sub_1000A76E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002AD1C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A772C(uint64_t a1, uint64_t a2)
{
  uint64_t AppReceiptResponse = type metadata accessor for CreateAppReceiptResponse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AppReceiptResponse - 8) + 16LL))( a2,  a1,  AppReceiptResponse);
  return a2;
}

uint64_t sub_1000A7770(uint64_t a1)
{
  uint64_t v2 = sub_1000175B0(&qword_1002AD1C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000A77B0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_1000A77EC()
{
  *(_OWORD *)(v0 + 128) = *(_OWORD *)(v0 + 480);
  return sub_10003A9EC(*(void *)(v0 + 88), *(void *)(v0 + 96));
}

uint64_t sub_1000A7818()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 80));
}

uint64_t sub_1000A7820()
{
  return sub_10003AA74(v0, v1);
}

uint64_t sub_1000A782C()
{
  return sub_10003AACC(v0, v1);
}

uint64_t sub_1000A7838(uint64_t result)
{
  *(void *)(result + 1sub_100019F7C(v0 + 6) = 0LL;
  *(void *)(result + 2sub_100019F7C(v0 + 4) = 0LL;
  *(void *)(result + 3sub_100019F7C(v0 + 2) = 3LL;
  *(_WORD *)(result + 4sub_10006F0B8(12LL, 0) = v1;
  return result;
}

void *sub_1000A784C()
{
  return sub_100019F58(v1, *(void *)(v0 + 112));
}

void *sub_1000A7858(uint64_t a1, void (*a2)(void))
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1000175B0(&qword_1002AB750);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = sub_1000175B0(&qword_1002AA328);
  uint64_t v25 = *(void *)(v29 - 8);
  uint64_t v9 = __chkstk_darwin(v29);
  uint64_t v28 = (uint64_t)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v24 = (uint64_t)&v23 - v11;
  uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  for (; v12; uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v21))
  {
    unint64_t v27 = a1 & 0xC000000000000001LL;
    uint64_t v13 = _swiftEmptyArrayStorage;
    uint64_t v14 = 4LL;
    __int128 v23 = a2;
    uint64_t v26 = a1;
    while (1)
    {
      id v15 = v27 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14 - 4, a1) : *(id *)(a1 + 8 * v14);
      a1 = (uint64_t)v15;
      uint64_t v16 = v14 - 3;
      if (__OFADD__(v14 - 4, 1LL)) {
        break;
      }
      a2(v15);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v13;
      }

      if (sub_10001D158((uint64_t)v8, 1LL, v29) == 1)
      {
        sub_1000A8398((uint64_t)v8);
      }

      else
      {
        uint64_t v17 = v24;
        sub_1000390C8((uint64_t)v8, v24, &qword_1002AA328);
        sub_1000390C8(v17, v28, &qword_1002AA328);
        if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
        {
          sub_10002F568();
          uint64_t v13 = v19;
        }

        unint64_t v18 = v13[2];
        if (v18 >= v13[3] >> 1)
        {
          sub_10002F568();
          uint64_t v13 = v20;
        }

        v13[2] = v18 + 1;
        sub_1000390C8( v28,  (uint64_t)v13 + ((*(unsigned __int8 *)(v25 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))
        + *(void *)(v25 + 72) * v18,
          &qword_1002AA328);
        a2 = v23;
      }

      ++v14;
      a1 = v26;
      if (v16 == v12)
      {
        swift_bridgeObjectRelease();
        return v13;
      }
    }

    __break(1u);
LABEL_20:
    if (a1 < 0) {
      uint64_t v21 = a1;
    }
    else {
      uint64_t v21 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
  }

  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void sub_1000A7B20( void *a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = a1[3];
  if (!v10)
  {
    sub_10001DC10();
    sub_1000A8330(a1);
    sub_1000A89E0();
    goto LABEL_38;
  }

  uint64_t v59 = a1[2];
  uint64_t v12 = swift_bridgeObjectRetain();
  sub_100160DD8(v12, v13, v14, v15, v16);
  uint64_t v58 = v17;
  char v56 = v18;
  if (a2 >> 62)
  {
    sub_1000A8964();
    uint64_t v19 = sub_100019448();
    if (v19)
    {
LABEL_4:
      BOOL v20 = __OFSUB__(v19, 1LL);
      uint64_t v21 = v19 - 1;
      if (v20)
      {
        __break(1u);
      }

      else
      {
        sub_100119E64(v21, (a2 & 0xC000000000000001LL) == 0, a2);
        if ((a2 & 0xC000000000000001LL) == 0)
        {
          id v22 = *(id *)(a2 + 8 * v21 + 32);
LABEL_7:
          __int128 v23 = v22;
          sub_10001DC10();
          double v54 = sub_1000B79DC();

          goto LABEL_13;
        }
      }

      id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, a2);
      goto LABEL_7;
    }
  }

  else
  {
    uint64_t v19 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain();
    if (v19) {
      goto LABEL_4;
    }
  }

  sub_10001DC10();
  sub_1000390C8((uint64_t)(a1 + 8), (uint64_t)v62, &qword_1002AEE50);
  sub_1000390C8((uint64_t)v62, (uint64_t)v63, &qword_1002AEE50);
  double v28 = v63[0];
  if (v64) {
    double v28 = 0.0;
  }
  double v54 = v28;
LABEL_13:
  uint64_t v29 = swift_bridgeObjectRetain();
  sub_100160FB4(v29, v30, v31, v32, v33);
  uint64_t v55 = v34;
  char v36 = v35;
  sub_1000A8330(a1);
  uint64_t v37 = sub_1000A7858(a2, a4);
  char v53 = v36;
  if (a2 >> 62)
  {
    sub_1000A8964();
    swift_bridgeObjectRetain();
    uint64_t v38 = sub_100019448();
  }

  else
  {
    uint64_t v38 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  uint64_t v61 = v10;
  uint64_t v60 = (uint64_t)v37;
  if (!v38)
  {
    uint64_t v40 = _swiftEmptyArrayStorage;
LABEL_32:
    sub_10001DC10();
    if (a2 >> 62)
    {
      sub_1000A8964();
      swift_bridgeObjectRetain();
      uint64_t v5 = sub_100019448();
      sub_10001DC10();
    }

    else
    {
      uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain();
    }

    uint64_t v10 = v60;
    uint64_t v6 = v61;
    sub_10001DC10();
    if (v5 == *(void *)(v60 + 16))
    {
      uint64_t v5 = v56 & 1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001EDE8(v61);
      char v50 = a3 & 1;
      int64x2_t v51 = vdupq_n_s64(4uLL);
      *(double *)v51.i64 = v54;
      int64x2_t v52 = vdupq_n_s64(0x65646F6358uLL);
      v52.i64[0] = v53 & 1;
      unint64_t v24 = 0xE500000000000000LL;
      uint64_t v26 = v58;
      uint64_t v25 = v59;
      uint64_t v27 = v55;
LABEL_39:
      *(void *)a5 = v26;
      *(void *)(a5 + 8) = v5;
      *(int64x2_t *)(a5 + 1sub_100019F7C(v0 + 6) = v51;
      *(void *)(a5 + 3sub_100019F7C(v0 + 2) = v25;
      *(void *)(a5 + 4sub_10006F0B8(12LL, 0) = v6;
      *(void *)(a5 + 48) = v27;
      *(int64x2_t *)(a5 + 5sub_100019F7C(v0 + 6) = v52;
      *(void *)(a5 + 7sub_100019F7C(v0 + 2) = v24;
      *(void *)(a5 + 8sub_10006F0B8(12LL, 0) = v10;
      *(void *)(a5 + sub_100081CEC(v0 + 88) = v40;
      *(_BYTE *)(a5 + 9sub_100019F7C(v0 + 6) = v50;
      return;
    }

    sub_10001EDE8(v61);
    sub_10001EDE8(v60);
    sub_10001EDE8((uint64_t)v40);
    sub_1000A89E0();
    uint64_t v10 = 0LL;
LABEL_38:
    uint64_t v40 = 0LL;
    char v50 = 0;
    int64x2_t v51 = 0uLL;
    int64x2_t v52 = 0uLL;
    goto LABEL_39;
  }

  if (v38 >= 1)
  {
    uint64_t v39 = 0LL;
    uint64_t v40 = _swiftEmptyArrayStorage;
    do
    {
      if ((a2 & 0xC000000000000001LL) != 0) {
        id v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v39, a2);
      }
      else {
        id v41 = *(id *)(a2 + 8 * v39 + 32);
      }
      uint64_t v42 = v41;
      if ((sub_1000B5AC0() & 1) != 0)
      {
      }

      else
      {
        sub_1000B52F0();
        uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
        uint64_t v45 = v44;

        if ((swift_isUniquelyReferenced_nonNull_native(v40) & 1) == 0)
        {
          sub_1000A8A10();
          uint64_t v40 = v48;
        }

        unint64_t v46 = v40[2];
        if (v46 >= v40[3] >> 1)
        {
          sub_1000A8A10();
          uint64_t v40 = v49;
        }

        v40[2] = v46 + 1;
        uint64_t v47 = &v40[2 * v46];
        v47[4] = v43;
        v47[5] = v45;
      }

      ++v39;
    }

    while (v38 != v39);
    goto LABEL_32;
  }

  __break(1u);
}

unint64_t sub_1000A7EF4(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100271C58, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 8) {
    return 8LL;
  }
  else {
    return v3;
  }
}

uint64_t static NIOBSDSocket.Option.so_keepalive.getter()
{
  return 8LL;
}

uint64_t sub_1000A7F48(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000A7F74 + 4 * byte_1001FB4E0[a1]))( 1684632420LL,  0xE400000000000000LL);
}

void sub_1000A7F88()
{
}

unint64_t sub_1000A7FA0()
{
  return 0xD000000000000010LL;
}

uint64_t sub_1000A7FBC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000A7FE8 + 4 * byte_1001FB4E8[a1]))( 1684632420LL,  0xE400000000000000LL);
}

void sub_1000A7FFC()
{
}

unint64_t sub_1000A8014()
{
  return 0xD000000000000010LL;
}

uint64_t sub_1000A8030(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000175B0(&qword_1002AEE58);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100019F58(a1, v9);
  unint64_t v11 = sub_1000A86B8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for TransactionHistoryResponse.CodingKeys,  &type metadata for TransactionHistoryResponse.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *(void *)v3;
  uint64_t v13 = *(unsigned __int8 *)(v3 + 8);
  LOBYTE(v23) = 0;
  sub_1000A89FC(v12, v13);
  if (!v2)
  {
    __int128 v23 = *(_OWORD *)(v3 + 16);
    char v22 = 1;
    unint64_t v14 = sub_1000A86F4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v5, &type metadata for Revision, v14);
    sub_1000A89B0(*(void *)(v3 + 32), *(void *)(v3 + 40), 2);
    uint64_t v15 = *(void *)(v3 + 48);
    uint64_t v16 = *(unsigned __int8 *)(v3 + 56);
    LOBYTE(v23) = 3;
    sub_1000A89FC(v15, v16);
    sub_1000A89B0(*(void *)(v3 + 64), *(void *)(v3 + 72), 4);
    uint64_t v17 = *(unsigned __int8 *)(v3 + 96);
    LOBYTE(v23) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v23, v5);
    *(void *)&__int128 v23 = *(void *)(v3 + 80);
    char v22 = 6;
    sub_1000175B0(&qword_1002AEE70);
    unint64_t v18 = sub_1000A8730();
    sub_1000A8978(v18);
    *(void *)&__int128 v23 = *(void *)(v3 + 88);
    char v22 = 7;
    sub_1000175B0(&qword_1002A93B8);
    unint64_t v19 = sub_1000533C8();
    sub_1000A8978(v19);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_1000A821C()
{
}

void sub_1000A8228()
{
}

void sub_1000A8230()
{
}

void sub_1000A8238(uint64_t a1)
{
}

unint64_t sub_1000A8240@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000A7EF4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000A826C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000A7F48(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000A8294()
{
  return sub_1000A7FBC(*v0);
}

uint64_t sub_1000A829C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000A7F3C(a1);
  *a2 = result;
  return result;
}

void sub_1000A82C0(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_1000A82CC(uint64_t a1)
{
  unint64_t v2 = sub_1000A86B8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A82F4(uint64_t a1)
{
  unint64_t v2 = sub_1000A86B8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A831C(void *a1)
{
  return sub_1000A8030(a1);
}

void *sub_1000A8330(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[12];
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t sub_1000A8398(uint64_t a1)
{
  uint64_t v2 = sub_1000175B0(&qword_1002AB750);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t destroy for TransactionHistoryResponse(void *a1)
{
  return swift_bridgeObjectRelease(a1[11]);
}

uint64_t initializeWithCopy for TransactionHistoryResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 1sub_100019F7C(v0 + 6) = *(_OWORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10006F0B8(12LL, 0) = v3;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 5sub_100019F7C(v0 + 6) = *(_BYTE *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 72);
  *(void *)(a1 + 6sub_100019F7C(v0 + 4) = *(void *)(a2 + 64);
  *(void *)(a1 + 7sub_100019F7C(v0 + 2) = v4;
  uint64_t v5 = *(void *)(a2 + 80);
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 8sub_10006F0B8(12LL, 0) = v5;
  *(void *)(a1 + sub_100081CEC(v0 + 88) = v6;
  *(_BYTE *)(a1 + 9sub_100019F7C(v0 + 6) = *(_BYTE *)(a2 + 96);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for TransactionHistoryResponse(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = a2[2];
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = a2[3];
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = a2[4];
  uint64_t v5 = a2[5];
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 4sub_10006F0B8(12LL, 0) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a2[6];
  *(_BYTE *)(a1 + 5sub_100019F7C(v0 + 6) = *((_BYTE *)a2 + 56);
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 6sub_100019F7C(v0 + 4) = a2[8];
  uint64_t v8 = a2[9];
  uint64_t v9 = *(void *)(a1 + 72);
  *(void *)(a1 + 7sub_100019F7C(v0 + 2) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[10];
  uint64_t v11 = *(void *)(a1 + 80);
  *(void *)(a1 + 8sub_10006F0B8(12LL, 0) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a2[11];
  uint64_t v13 = *(void *)(a1 + 88);
  *(void *)(a1 + sub_100081CEC(v0 + 88) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 9sub_100019F7C(v0 + 6) = *((_BYTE *)a2 + 96);
  return a1;
}

uint64_t assignWithTake for TransactionHistoryResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 2sub_100019F7C(v0 + 4) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a1 + 40);
  *(void *)(a1 + 4sub_10006F0B8(12LL, 0) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease(v4);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 5sub_100019F7C(v0 + 6) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 6sub_100019F7C(v0 + 4) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease(*(void *)(a1 + 72));
  uint64_t v5 = *(void *)(a1 + 80);
  *(_OWORD *)(a1 + 7sub_100019F7C(v0 + 2) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a1 + 88);
  *(void *)(a1 + sub_100081CEC(v0 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 9sub_100019F7C(v0 + 6) = *(_BYTE *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransactionHistoryResponse(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 97))
    {
      LODWORD(sub_1000680EC(v0, v1, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 40);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(sub_1000680EC(v0, v1, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(sub_1000680EC(v0, v1, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TransactionHistoryResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + sub_100081CEC(v0 + 88) = 0LL;
    *(_OWORD *)(result + 7sub_100019F7C(v0 + 2) = 0u;
    *(_OWORD *)(result + 5sub_100019F7C(v0 + 6) = 0u;
    *(_OWORD *)(result + 4sub_10006F0B8(12LL, 0) = 0u;
    *(_OWORD *)(result + 2sub_100019F7C(v0 + 4) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 9sub_100019F7C(v0 + 6) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 97) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 4sub_10006F0B8(12LL, 0) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 97) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for TransactionHistoryResponse()
{
  return &type metadata for TransactionHistoryResponse;
}

unint64_t sub_1000A86B8()
{
  unint64_t result = qword_1002AEE60;
  if (!qword_1002AEE60)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FB660, &type metadata for TransactionHistoryResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AEE60);
  }

  return result;
}

unint64_t sub_1000A86F4()
{
  unint64_t result = qword_1002AEE68;
  if (!qword_1002AEE68)
  {
    unint64_t result = swift_getWitnessTable("%V\b", &type metadata for Revision);
    atomic_store(result, (unint64_t *)&qword_1002AEE68);
  }

  return result;
}

unint64_t sub_1000A8730()
{
  unint64_t result = qword_1002AEE78;
  if (!qword_1002AEE78)
  {
    uint64_t v1 = sub_100018EC0(&qword_1002AEE70);
    unint64_t v2 = sub_1000A8794();
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1002AEE78);
  }

  return result;
}

unint64_t sub_1000A8794()
{
  unint64_t result = qword_1002AB868;
  if (!qword_1002AB868)
  {
    uint64_t v1 = sub_100018EC0(&qword_1002AA328);
    unint64_t result = swift_getWitnessTable(byte_100204D48, v1);
    atomic_store(result, (unint64_t *)&qword_1002AB868);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for TransactionHistoryResponse.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(vsub_100019F7C(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100019F7C(v0 + 4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_1000A8824 + 4 * byte_1001FB4F5[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1000A8858 + 4 * byte_1001FB4F0[v4]))();
}

uint64_t sub_1000A8858(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A8860(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000A8868LL);
  }
  return result;
}

uint64_t sub_1000A8874(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000A887CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 7;
  return result;
}

uint64_t sub_1000A8880(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000A8888(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TransactionHistoryResponse.CodingKeys()
{
  return &type metadata for TransactionHistoryResponse.CodingKeys;
}

unint64_t sub_1000A88A8()
{
  unint64_t result = qword_1002AEE80;
  if (!qword_1002AEE80)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FB638, &type metadata for TransactionHistoryResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AEE80);
  }

  return result;
}

unint64_t sub_1000A88E8()
{
  unint64_t result = qword_1002AEE88;
  if (!qword_1002AEE88)
  {
    unint64_t result = swift_getWitnessTable("18\b", &type metadata for TransactionHistoryResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AEE88);
  }

  return result;
}

unint64_t sub_1000A8928()
{
  unint64_t result = qword_1002AEE90;
  if (!qword_1002AEE90)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FB598, &type metadata for TransactionHistoryResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AEE90);
  }

  return result;
}

uint64_t sub_1000A8964()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000A8978(uint64_t a1)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 80, v3 - 81, v1, v2, a1);
}

uint64_t sub_1000A8998()
{
  return 0x6E6F697369766572LL;
}

uint64_t sub_1000A89B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(_BYTE *)(v4 - 8sub_10006F0B8(12LL, 0) = a3;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v4 - 80, v3);
}

uint64_t sub_1000A89C8()
{
  return 0x65726F4D736168LL;
}

  ;
}

uint64_t sub_1000A89FC(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v3 - 80, v2);
}

void sub_1000A8A10()
{
}

uint64_t sub_1000A8A1C@<X0>( void (*a1)(uint64_t, uint64_t)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v25 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  sub_10001DAD0();
  uint64_t v9 = v8 - v7;
  uint64_t v11 = *(void *)(v10 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v13);
  sub_10001DAD0();
  uint64_t v16 = v15 - v14;
  __chkstk_darwin(v17);
  sub_10001DAD0();
  uint64_t v20 = v19 - v18;
  (*(void (**)(uint64_t, uint64_t))(v21 + 16))(v19 - v18, v22);
  uint64_t v23 = 1LL;
  if (sub_10001D158(v20, 1LL, v11) != 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v16, v20, v11);
    a1(v16, v9);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v16, v11);
    if (v5) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(a4, v9, a2);
    }
    uint64_t v23 = 0LL;
  }

  return sub_10001762C(a5, v23, 1LL, a3);
}

BOOL sub_1000A8B90()
{
  uint64_t v1 = *(_opaque_pthread_t **)(v0 + 32);
  uint64_t v2 = pthread_self();
  return pthread_equal(v1, v2) != 0;
}

void ThreadSpecificVariable.__allocating_init()()
{
  uint64_t v1 = sub_100019310(v0, 24LL);
  ThreadSpecificVariable.init()(v1, v2, v3, v4);
  sub_10001945C();
}

void *ThreadSpecificVariable.currentValue.getter()
{
  uint64_t v1 = *v0;
  unint64_t result = sub_1000A9198();
  if (result)
  {
    uint64_t v4 = result[3];
    swift_unknownObjectRetain(v4);
    swift_dynamicCast(&v3, &v4, (char *)&type metadata for Swift.AnyObject + 8, *(void *)(v1 + 80), 7LL);
    return (void *)v3;
  }

  return result;
}

uint64_t ThreadSpecificVariable.currentValue.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  if (sub_1000A9198()) {
    swift_release();
  }
  type metadata accessor for Optional(0LL, *(void *)(v3 + 80));
  sub_1000A8A1C( (void (*)(uint64_t, uint64_t))sub_1000A92B0,  (uint64_t)&type metadata for Never,  (uint64_t)&type metadata for UnsafeMutableRawPointer,  v4,  (uint64_t)&v6);
  sub_100043560(v6);
  return swift_unknownObjectRelease(a1);
}

BOOL sub_1000A8CFC(uint64_t a1, uint64_t a2)
{
  return pthread_equal(*(pthread_t *)(a1 + 32), *(pthread_t *)(a2 + 32)) != 0;
}

uint64_t sub_1000A8D20()
{
  uint64_t v1 = *(_opaque_pthread_t **)(v0 + 32);
  uint64_t v2 = static Array._allocateBufferUninitialized(minimumCapacity:)(64LL, &type metadata for Int8);
  *(void *)(v2 + 1sub_100019F7C(v0 + 6) = 64LL;
  *(_OWORD *)(v2 + 3sub_100019F7C(v0 + 2) = 0u;
  uint64_t v3 = (_BYTE *)(v2 + 32);
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 6sub_100019F7C(v0 + 4) = 0u;
  *(_OWORD *)(v2 + 8sub_10006F0B8(12LL, 0) = 0u;
  if (pthread_getname_np(v1, (char *)(v2 + 32), 0x40uLL))
  {
    uint64_t v4 = 0LL;
  }

  else
  {
    if (*v3)
    {
      uint64_t v5 = 0LL;
      uint64_t v6 = 64LL;
      while (*(_BYTE *)(v2 + 33 + v5))
      {
        if (++v5 == 63) {
          goto LABEL_10;
        }
      }

      uint64_t v6 = v5 + 1;
    }

    else
    {
      uint64_t v6 = 0LL;
    }

uint64_t sub_1000A8DEC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  pthread_t v15 = 0LL;
  uint64_t v10 = sub_100019310((uint64_t)&unk_10027EFF8, 32LL);
  *(void *)(v10 + 1sub_100019F7C(v0 + 6) = a4;
  *(void *)(v10 + 2sub_100019F7C(v0 + 4) = a5;
  uint64_t v11 = sub_1000175B0(&qword_1002AF040);
  uint64_t v12 = (void *)sub_100019310(v11, 48LL);
  __int128 v12[2] = sub_1000A9454;
  v12[3] = v10;
  void v12[4] = a1;
  v12[5] = a2;
  swift_bridgeObjectRetain(a2);
  swift_retain();
  swift_retain();
  if ((a3 & 1) == 0) {
    return sub_100024F0C();
  }
  uint64_t result = (uint64_t)v15;
  if (!v15)
  {
    __break(1u);
    return result;
  }

  int v14 = pthread_detach(v15);
  uint64_t result = sub_100024F0C();
  if (v14)
  {
    __break(1u);
    return sub_100024F0C();
  }

  return result;
}

uint64_t sub_1000A8F00()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t sub_1000A8F24()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void **)(v0 + 24);
  uint64_t v3 = sub_1000A8D20();
  uint64_t v5 = v3;
  uint64_t v6 = v4;
  if (!v1)
  {
    if (!v4) {
      return 0x61657268544F494ELL;
    }
    _StringGuts.grow(_:)(26LL);
    sub_1000A9488(v16, v17, v18, v19, v20, v21, v22, v23, 0LL, 0xE000000000000000LL);
    unint64_t v45 = 0xD000000000000017LL;
    goto LABEL_15;
  }

  if (!v4)
  {
    sub_1000A9478();
    _StringGuts.grow(_:)(27LL);
    sub_1000A9488(v24, v25, v26, v27, v28, v29, v30, v31, v44, v46);
    unint64_t v45 = 0xD000000000000018LL;
    goto LABEL_12;
  }

  BOOL v7 = v2 == v3 && v1 == v4;
  if (!v7 && (_stringCompareWithSmolCheck(_:_:expecting:)(v2, v1, v3, v4, 0LL) & 1) == 0)
  {
    sub_1000A9478();
    _StringGuts.grow(_:)(44LL);
    sub_1000A9488(v33, v34, v35, v36, v37, v38, v39, v40, v44, v46);
    unint64_t v45 = 0xD000000000000018LL;
    sub_1000A9490();
    swift_bridgeObjectRelease();
    v41._countAndFlagsBits = 0x6C6175746361202CLL;
    v41._object = (void *)0xEF203D20656D614ELL;
    String.append(_:)(v41);
LABEL_15:
    v42._countAndFlagsBits = v5;
    v42._object = v6;
    String.append(_:)(v42);
    goto LABEL_16;
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(20LL);
  sub_1000A9488(v8, v9, v10, v11, v12, v13, v14, v15, 0LL, 0xE000000000000000LL);
  unint64_t v45 = 0xD000000000000011LL;
LABEL_12:
  sub_1000A9490();
LABEL_16:
  swift_bridgeObjectRelease();
  v43._countAndFlagsBits = 41LL;
  v43._object = (void *)0xE100000000000000LL;
  String.append(_:)(v43);
  return v45;
}

uint64_t sub_1000A9100()
{
  return sub_1000A8F24();
}

void sub_1000A9120(void (__cdecl *a1)(void *))
{
}

uint64_t sub_1000A9154()
{
  uint64_t result = pthread_key_delete(*(void *)(v0 + 16));
  if (!(_DWORD)result) {
    return v0;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A9178()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

void *sub_1000A9198()
{
  return pthread_getspecific(*(void *)(v0 + 16));
}

void ThreadSpecificVariable.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[2] = v5;
  sub_10001945C();
}

void ThreadSpecificVariable.__allocating_init(value:)(uint64_t a1)
{
  uint64_t v2 = swift_unknownObjectRetain(a1);
  ThreadSpecificVariable.currentValue.setter(v2);
  sub_100024F0C();
  swift_unknownObjectRelease(a1);
  sub_10001945C();
}

uint64_t sub_1000A9224@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255LL, *a2, *(void *)(*a2 + 80LL), 0LL, 0LL);
  type metadata accessor for Box(0LL, TupleTypeMetadata2, v7, v8);
  v10[0] = a2;
  v10[1] = v5;
  *a3 = sub_10006ED50((uint64_t)v10);
  swift_retain();
  return swift_unknownObjectRetain(v5);
}

uint64_t sub_1000A92B0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000A9224(a1, v2, a2);
}

uint64_t type metadata accessor for ThreadSpecificVariable.Key( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ThreadSpecificVariable.Key);
}

uint64_t (*ThreadSpecificVariable.currentValue.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = ThreadSpecificVariable.currentValue.getter();
  return sub_1000A930C;
}

uint64_t sub_1000A930C(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if ((a2 & 1) == 0) {
    return ThreadSpecificVariable.currentValue.setter(*a1);
  }
  uint64_t v3 = swift_unknownObjectRetain(*a1);
  ThreadSpecificVariable.currentValue.setter(v3);
  return swift_unknownObjectRelease(v2);
}

uint64_t ThreadSpecificVariable.deinit()
{
  return v0;
}

uint64_t ThreadSpecificVariable.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t type metadata accessor for NIOThread()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService9NIOThread);
}

uint64_t sub_1000A93AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A93D8(a1, a2, a3, (uint64_t)&value witness table for Builtin.NativeObject + 64);
}

uint64_t type metadata accessor for ThreadSpecificVariable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A160(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ThreadSpecificVariable);
}

uint64_t sub_1000A93C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A93D8(a1, a2, a3, (uint64_t)&value witness table for Builtin.Int64 + 64);
}

uint64_t sub_1000A93D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4;
  return swift_initClassMetadata2(a1, 0LL, 1LL, &v5, a1 + 88);
}

BOOL sub_1000A9410(uint64_t *a1, uint64_t *a2)
{
  return sub_1000A8CFC(*a1, *a2);
}

uint64_t sub_1000A9430()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000A9454(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_1000A9478()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000A9488( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_bridgeObjectRelease(a10);
}

void sub_1000A9490()
{
  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

unint64_t sub_1000A94A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  *(void *)(v2 + 1sub_100019F7C(v0 + 6) = a1;
  *(void *)(v2 + 2sub_100019F7C(v0 + 4) = a2;
  swift_retain();
  sub_10001EDE0();
  sub_1000A971C();
  if (v3)
  {
    swift_release();
LABEL_3:
    sub_10002A5A4();
  }

  else
  {
    uint64_t v7 = sub_1000175B0((uint64_t *)&unk_1002AFCE0);
    uint64_t inited = swift_initStackObject(v7, v20);
    *(_OWORD *)(inited + 1sub_100019F7C(v0 + 6) = xmmword_1001FB800;
    *(void *)(inited + 3sub_100019F7C(v0 + 2) = a1;
    *(void *)(inited + 4sub_10006F0B8(12LL, 0) = a2;
    v19[0] = inited;
    specialized Array._endMutation()(inited);
    unint64_t v9 = v19[0] & 0xC000000000000001LL;
    uint64_t v17 = v19[0] & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v18 = v19[0];
    uint64_t v10 = v19[0] + 32;
    sub_10002A674();
    sub_10001EDE0();
    char v11 = 0;
    unint64_t result = 0LL;
    while (1)
    {
      char v13 = v11;
      if (v9)
      {
        uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(result, v18);
      }

      else
      {
        if (result >= *(void *)(v17 + 16))
        {
          __break(1u);
          return result;
        }

        uint64_t v14 = *(void *)(v10 + 8 * result);
        swift_retain();
      }

      sub_1000487CC(v14 + 16, (uint64_t)v19);
      if (*(_BYTE *)(v14 + 16) != 1) {
        break;
      }
      sub_1001707E0();
      sub_1001707E0();
      swift_release();
      char v11 = 1;
      unint64_t result = 1LL;
      if ((v13 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_3;
      }
    }

    unint64_t v15 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v15);
    sub_100052668(v16, 0xD00000000000001FLL);
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }

  swift_release();
  return v4;
}

uint64_t sub_1000A971C()
{
  uint64_t v2 = sub_1000175B0(&qword_1002AF160);
  uint64_t inited = swift_initStackObject(v2, v26);
  *(_OWORD *)(inited + 1sub_100019F7C(v0 + 6) = xmmword_1001F3DD0;
  *(void *)(inited + 3sub_100019F7C(v0 + 2) = *(void *)(v0 + 16);
  *(void *)(inited + 4sub_10006F0B8(12LL, 0) = *(void *)(v0 + 24);
  v25[0] = inited;
  specialized Array._endMutation()(inited);
  uint64_t v4 = v25[0];
  uint64_t v5 = v25[0] + 32;
  swift_retain();
  uint64_t result = sub_10001EDE0();
  char v7 = 0;
  for (unint64_t i = 0LL; ; unint64_t i = 1LL)
  {
    char v9 = v7;
    if (i >= *(void *)(v4 + 16)) {
      break;
    }
    uint64_t v10 = *(void *)(v5 + 8 * i);
    sub_1000487CC(v10 + 16, (uint64_t)v25);
    sub_1000AA09C();
    if (!v11)
    {
      unint64_t v13 = sub_100025100();
      sub_1000252D0((uint64_t)&type metadata for IOError, v13);
      *(void *)uint64_t v14 = 0xD00000000000001FLL;
      *(void *)(v14 + 8) = 0x80000001002194A0LL;
      *(_DWORD *)(v14 + 1sub_100019F7C(v0 + 6) = 9;
      uint64_t v15 = swift_retain();
      swift_willThrow(v15);
LABEL_14:
      swift_release();
      return swift_bridgeObjectRelease();
    }

    int v12 = *(_DWORD *)(v10 + 20);
    swift_retain();
    sub_1001707E0();
    if (v1)
    {
      uint64_t v27 = v1;
      swift_errorRetain(v1);
      uint64_t v16 = sub_1000175B0(&qword_1002A9710);
      if (swift_dynamicCast(v23, &v27, v16, &type metadata for IOError, 0LL))
      {
        swift_errorRelease(v1);
        uint64_t v17 = v23[1];
        int v18 = v24;
        if (v24 == 22)
        {
          swift_bridgeObjectRelease();
          unint64_t v19 = sub_1000AA014();
          sub_1000252D0((uint64_t)&type metadata for NIOFcntlFailedError, v19);
        }

        else
        {
          uint64_t v20 = v23[0];
          sub_100024FB4(v12);
          unint64_t v21 = sub_100025100();
          sub_1000252D0((uint64_t)&type metadata for IOError, v21);
          *(void *)uint64_t v22 = v20;
          *(void *)(v22 + 8) = v17;
          *(_DWORD *)(v22 + 1sub_100019F7C(v0 + 6) = v18;
        }

        sub_1000AA06C();
      }

      swift_errorRelease(v27);
      goto LABEL_14;
    }

    uint64_t result = swift_release();
    char v7 = 1;
    if ((v9 & 1) != 0) {
      return swift_bridgeObjectRelease();
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1000A993C()
{
  v0._countAndFlagsBits = 0x7269615065706950LL;
  v0._object = (void *)0xEE003D6E69207B20LL;
  String.append(_:)(v0);
  sub_1000AA084(v1);
  v2._countAndFlagsBits = 0x3D74756F202CLL;
  v2._object = (void *)0xE600000000000000LL;
  String.append(_:)(v2);
  sub_1000AA084(v3);
  v4._countAndFlagsBits = 32032LL;
  v4._object = (void *)0xE200000000000000LL;
  String.append(_:)(v4);
  return 0LL;
}

void sub_1000A9A10(uint64_t a1)
{
  if (!v3)
  {
    unint64_t v4 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v4);
    sub_100073658();
    sub_100052668(v5, v6);
LABEL_5:
    sub_1000AA074();
    return;
  }

  if (a1)
  {
    sub_1000AA0A8();
    sub_1001709F8();
    goto LABEL_5;
  }

  __break(1u);
}

void sub_1000A9A98(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 24);
  sub_1000487CC(v5 + 16, (uint64_t)v10);
  sub_1000AA09C();
  if (v6)
  {
    sub_10017087C(*(unsigned int *)(v5 + 20), a1, a2);
  }

  else
  {
    unint64_t v7 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v7);
    sub_100073658();
    sub_100052668(v8, v9);
  }

  sub_1000AA074();
}

void sub_1000A9B24(uint64_t a1)
{
  if (!v3)
  {
    unint64_t v4 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v4);
    sub_100073658();
    sub_100052668(v5, v6);
LABEL_5:
    sub_1000AA074();
    return;
  }

  if (a1)
  {
    sub_1000AA0A8();
    sub_10017094C();
    goto LABEL_5;
  }

  __break(1u);
}

uint64_t sub_1000A9BAC()
{
  unint64_t v0 = sub_100029C98();
  uint64_t v1 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v0);
  return sub_1000AA050(v1, v2);
}

void sub_1000A9BE0(unsigned __int8 a1)
{
  if (a1 > 1u) {
    sub_1000A9C1C();
  }
  else {
    NIOFileHandle.close()();
  }
  sub_10002A814();
}

uint64_t sub_1000A9C1C()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v0 + 16) + 16LL;
  sub_1000487CC(v3, (uint64_t)v18);
  if ((*(_BYTE *)v3 & 1) != 0) {
    goto LABEL_4;
  }
  uint64_t v4 = *(void *)(v0 + 24);
  sub_1000487CC(v4 + 16, (uint64_t)v17);
  if (*(_BYTE *)(v4 + 16) != 1)
  {
    unint64_t v13 = sub_100029C98();
    sub_1000252D0((uint64_t)&type metadata for ChannelError, v13);
    *(void *)uint64_t v14 = 3LL;
    *(_BYTE *)(v14 + 8) = 3;
    return sub_1000AA06C();
  }

  if (*(_BYTE *)v3 == 1)
  {
LABEL_4:
    sub_10002A674();
    NIOFileHandle.close()();
    if (v5) {
      uint64_t v3 = v5;
    }
    else {
      uint64_t v3 = 1LL;
    }
    BOOL v6 = v5 != 0;
    uint64_t v2 = 0LL;
  }

  else
  {
    sub_10002A674();
    BOOL v6 = 0;
  }

  sub_10002A5A4();
  uint64_t v7 = *(void *)(v0 + 24);
  sub_1000487CC(v7 + 16, (uint64_t)v16);
  int v8 = *(unsigned __int8 *)(v7 + 16);
  sub_10002A674();
  if (v8 != 1 || (NIOFileHandle.close()(), (uint64_t v2 = v9) == 0))
  {
    uint64_t result = sub_10002A5A4();
    if (!v6) {
      return result;
    }
    char v10 = 0;
    goto LABEL_14;
  }

  sub_10002A5A4();
  if (v6)
  {
    char v10 = 1;
LABEL_14:
    uint64_t v19 = v3;
    uint64_t v12 = sub_1000175B0(&qword_1002A9710);
    swift_willThrowTypedImpl(&v19, v12, &protocol self-conformance witness table for Error);
    return sub_100034F08(v2, v10);
  }

  uint64_t v19 = v9;
  uint64_t v15 = sub_1000175B0(&qword_1002A9710);
  return swift_willThrowTypedImpl(&v19, v15, &protocol self-conformance witness table for Error);
}

uint64_t sub_1000A9DA4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_1000487CC(v1 + 16, (uint64_t)v5);
  if ((*(_BYTE *)(v1 + 16) & 1) != 0) {
    return 1LL;
  }
  uint64_t v3 = *(void *)(v0 + 24);
  sub_1000487CC(v3 + 16, (uint64_t)&v4);
  return *(unsigned __int8 *)(v3 + 16);
}

void sub_1000A9DF8()
{
  unint64_t v0 = sub_100029C98();
  uint64_t v1 = sub_1000252D0((uint64_t)&type metadata for ChannelError, v0);
  sub_1000AA050(v1, v2);
  sub_1000AA0BC();
}

uint64_t sub_1000A9E28()
{
  return sub_1000A9BAC();
}

uint64_t sub_1000A9E3C()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for PipePair()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService8PipePair);
}

ValueMetadata *type metadata accessor for SelectableFileHandle()
{
  return &type metadata for SelectableFileHandle;
}

uint64_t sub_1000A9E8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100073474(a1, a2, a3, a4, (uint64_t (*)(void))sub_1000A9A10);
}

uint64_t sub_1000A9EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100073474(a1, a2, a3, a4, (uint64_t (*)(void))sub_1000A9A98);
}

uint64_t sub_1000A9EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100073474(a1, a2, a3, a4, (uint64_t (*)(void))sub_1000A9B24);
}

uint64_t sub_1000A9EE0()
{
  return sub_1000A9BAC();
}

void sub_1000A9EF8(unsigned __int8 a1)
{
}

void sub_1000A9F14()
{
}

void sub_1000A9F30()
{
}

uint64_t sub_1000A9F44()
{
  return sub_1000A993C();
}

_UNKNOWN **sub_1000A9F64()
{
  return &off_10027F0C8;
}

uint64_t sub_1000A9F70(uint64_t a1)
{
  uint64_t result = sub_1000A9FD8(&qword_1002AF148, "q8\b");
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000A9FA4(uint64_t a1)
{
  uint64_t result = sub_1000A9FD8(&qword_1002AF150, "Y8\b");
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000A9FD8(unint64_t *a1, const char *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for PipePair();
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1000AA014()
{
  unint64_t result = qword_1002AF158;
  if (!qword_1002AF158)
  {
    unint64_t result = swift_getWitnessTable( protocol conformance descriptor for NIOFcntlFailedError,  &type metadata for NIOFcntlFailedError);
    atomic_store(result, (unint64_t *)&qword_1002AF158);
  }

  return result;
}

uint64_t sub_1000AA050(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = 1LL;
  *(_BYTE *)(a2 + 8) = 3;
  return swift_willThrow();
}

uint64_t sub_1000AA06C()
{
  return swift_willThrow();
}

  ;
}

uint64_t sub_1000AA084(uint64_t a1, ...)
{
  uint64_t v2 = va_arg(va1, void);
  return _print_unlocked<A, B>(_:_:)((uint64_t *)va, va1);
}

  ;
}

uint64_t sub_1000AA0A8()
{
  return *(unsigned int *)(v0 + 20);
}

  ;
}

void sub_1000AA0C4(char a1)
{
  if (a1 != 3 && a1)
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v1 = sub_100077D08();
    uint64_t v2 = (void *)sub_100018F68(v1, (uint64_t)qword_1002EB9D0);
    Logger.logObject.getter(v2);
    os_log_type_t v3 = sub_100092F58();
    if (sub_100024E9C(v3))
    {
      uint64_t v4 = (_DWORD *)sub_100019464(12LL);
      *uint64_t v4 = 134217984;
      sub_1000AA9E0((uint64_t)v4, (uint64_t)&unk_1001FB9C0, v7);
      sub_1000AAA00((void *)&_mh_execute_header, v5, v6, "no message reason info for %ld");
      sub_10001A408((uint64_t)v4);
    }

    sub_100041AF4();
  }

void sub_1000AA1A4(char a1)
{
  if (a1 != 3 && a1)
  {
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v1 = sub_100077D08();
    uint64_t v2 = (void *)sub_100018F68(v1, (uint64_t)qword_1002EB9D0);
    Logger.logObject.getter(v2);
    os_log_type_t v3 = sub_100092F58();
    if (sub_100024E9C(v3))
    {
      uint64_t v4 = (_DWORD *)sub_100019464(12LL);
      *uint64_t v4 = 134217984;
      sub_1000AA9E0((uint64_t)v4, (uint64_t)&unk_1001FB9C0, v7);
      sub_1000AAA00((void *)&_mh_execute_header, v5, v6, "no developer control info for %ld");
      sub_10001A408((uint64_t)v4);
    }

    sub_100041AF4();
  }

uint64_t MessageType.rawValue.getter(unsigned __int8 a1)
{
  return a1 + 1LL;
}

uint64_t sub_1000AA290(char a1)
{
  if (!a1) {
    return 7107189LL;
  }
  if (a1 == 1) {
    return 0xD00000000000001BLL;
  }
  return 0x526567617373656DLL;
}

uint64_t sub_1000AA2F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5, int a6)
{
  LODWORD(sub_10002A52C(v2, v3, v4, v5, v6) = a6;
  uint64_t v47 = a2;
  uint64_t v11 = sub_1000175B0(&qword_1002A9720);
  __chkstk_darwin(v11);
  unint64_t v13 = &v41[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = type metadata accessor for URL(0LL);
  uint64_t v46 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  unint64_t v45 = &v41[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v48 = 0LL;
  unint64_t v49 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(21LL);
  swift_bridgeObjectRelease();
  uint64_t v48 = 0xD000000000000011LL;
  unint64_t v49 = 0x800000010021B650LL;
  uint64_t v51 = a1;
  v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v17._countAndFlagsBits = a4;
  v17._object = a5;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  uint64_t v18 = v48;
  unint64_t v19 = v49;
  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v20 = sub_100077D08();
  uint64_t v21 = sub_100018F68(v20, (uint64_t)qword_1002EB9D0);
  sub_100023E64(a3);
  uint64_t v22 = sub_100023E64(v19);
  Swift::String v43 = (os_log_s *)v21;
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = sub_100019464(22LL);
    uint64_t v44 = v18;
    uint64_t v26 = v25;
    uint64_t v27 = sub_100019464(64LL);
    int v42 = v6;
    uint64_t v6 = v27;
    uint64_t v48 = v27;
    *(_DWORD *)uint64_t v26 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v51 = sub_1000CF360(v47, a3, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v26 + 4);
    sub_100077CA8(a3);
    *(_WORD *)(v26 + 1sub_100019F7C(v0 + 2) = 2080;
    sub_10005231C();
    uint64_t v51 = sub_1000CF360(v44, v19, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v26 + 14);
    sub_100077CA8(v19);
    sub_1000AAA24((void *)&_mh_execute_header, v23, v24, "message for %s at %s");
    swift_arrayDestroy(v6, 2LL);
    uint64_t v28 = v6;
    LOWORD(sub_10002A52C(v2, v3, v4, v5, v6) = v42;
    sub_10001A408(v28);
    uint64_t v29 = v26;
    uint64_t v18 = v44;
    sub_10001A408(v29);
  }

  else
  {

    sub_10001EDE8(v19);
    sub_10001EDE8(a3);
  }

  URL.init(string:)(v18);
  if (sub_10001D158((uint64_t)v13, 1LL, v14) == 1)
  {
    sub_1000220E8((uint64_t)v13);
    sub_100023E64(a3);
    uint64_t v30 = sub_10005231C();
    uint64_t v31 = v43;
    Logger.logObject.getter(v30);
    os_log_type_t v32 = sub_100092F58();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = v18;
      uint64_t v34 = sub_100019464(22LL);
      uint64_t v35 = sub_100019464(64LL);
      uint64_t v48 = v35;
      *(_DWORD *)uint64_t v34 = 136315394;
      sub_10005231C();
      uint64_t v51 = sub_1000CF360(v33, v19, &v48);
      sub_1000AAA14();
      sub_100077CA8(v19);
      *(_WORD *)(v34 + 1sub_100019F7C(v0 + 2) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v51 = sub_1000CF360(v47, a3, &v48);
      sub_1000AAA14();
      sub_100077CA8(a3);
      sub_1000AAA24((void *)&_mh_execute_header, v31, v32, "%s is not a URL, cannot send form message for %s");
      swift_arrayDestroy(v35, 2LL);
      sub_10001A408(v35);
      sub_10001A408(v34);
    }

    else
    {

      sub_10001EDE8(a3);
      sub_10001EDE8(v19);
    }

    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v37 = v45;
    uint64_t v36 = v46;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v46 + 32))(v45, v13, v14);
    uint64_t v38 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8);
    char v50 = (void *)v14;
    uint64_t v51 = v38;
    uint64_t v39 = sub_10005F580(&v48);
    (*(void (**)(void *, _BYTE *, uint64_t))(v36 + 16))(v39, v37, v14);
    sub_1001B1C84((uint64_t)&v48, 7107189LL, 0xE300000000000000LL);
    char v50 = &type metadata for Bool;
    LOBYTE(v48) = v6 & 1;
    sub_1001B1C84((uint64_t)&v48, 0xD00000000000001BLL, 0x800000010021B670LL);
    char v50 = &type metadata for Int;
    uint64_t v48 = BYTE1(v6) + 1;
    sub_1001B1C84((uint64_t)&v48, 0x526567617373656DLL, 0xED00006E6F736165LL);
    (*(void (**)(_BYTE *, uint64_t))(v36 + 8))(v37, v14);
    return v51;
  }

uint64_t sub_1000AA848(unint64_t a1)
{
  if (a1 >= 5) {
    return 4LL;
  }
  else {
    return (0x302010004uLL >> (8 * a1));
  }
}

uint64_t sub_1000AA86C()
{
  return sub_100185D40(*v0);
}

uint64_t sub_1000AA874(uint64_t a1)
{
  return sub_1000BB954(a1, *v1);
}

uint64_t sub_1000AA87C(uint64_t a1)
{
  return sub_1000B30E0(a1, *v1);
}

uint64_t sub_1000AA884@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000AA848(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000AA8AC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MessageType.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for MessageReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(vsub_100019F7C(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100019F7C(v0 + 4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000AA920 + 4 * byte_1001FB8E5[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000AA954 + 4 * byte_1001FB8E0[v4]))();
}

uint64_t sub_1000AA954(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AA95C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000AA964LL);
  }
  return result;
}

uint64_t sub_1000AA970(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000AA978LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000AA97C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AA984(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MessageReason()
{
  return &type metadata for MessageReason;
}

unint64_t sub_1000AA9A4()
{
  unint64_t result = qword_1002AF168;
  if (!qword_1002AF168)
  {
    unint64_t result = swift_getWitnessTable("I8\b", &type metadata for MessageReason);
    atomic_store(result, (unint64_t *)&qword_1002AF168);
  }

  return result;
}

uint64_t sub_1000AA9E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, ...)
{
  uint64_t v5 = va_arg(va1, void);
  uint64_t v5 = *(void *)(a2 + 8LL * v3 - 8);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)((uint64_t *)va, va1, a1 + 4);
}

void sub_1000AAA00(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_1000AAA14()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 88, v1, v0);
}

void sub_1000AAA24(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t sub_1000AAA34()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_retain();
  BOOL v2 = sub_1000A8B90();
  sub_10002A51C();
  if (v2)
  {
    sub_1000ABFC8();
  }

  else
  {
    sub_10002A4C8();
    Lock.lock()();
    sub_1000ABFC8();
    Lock.unlock()();
    sub_10001EDD8();
  }

  return v1;
}

uint64_t sub_1000AAAA0()
{
  uint64_t v2 = v0;
  uint64_t v3 = sub_10014E854();
  uint64_t v5 = v4;
  unsigned int v7 = v6;
  uint64_t ObjectType = swift_getObjectType(v3);
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  176LL,  ObjectType,  v5);
  if (v7 <= 4 && ((1 << v7) & 0x13) != 0)
  {
    sub_10002A51C();
    return swift_unknownObjectRelease(v3);
  }

  else
  {
    sub_10002A51C();
    sub_10002A338();
    sub_10014F094(*(_BYTE *)(v2 + 216) & 0xFD);
    while (1)
    {
      uint64_t v10 = sub_1000ABF74();
      uint64_t v11 = sub_1000ABEC0(v10);
      sub_1000ABE98( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSoc ketChannel.swift",  v12,  v13,  v14,  v11);
      sub_10002A524();
      uint64_t result = sub_10002A338();
      if ((v1 & 0xFF00) != 0x300) {
        break;
      }
      uint64_t result = sub_1000AAD04();
      if ((result & 0xFE) == 2) {
        break;
      }
      if ((result & 1) == 0)
      {
        __break(1u);
        return result;
      }
    }
  }

  return result;
}

uint64_t sub_1000AABA0()
{
  return sub_1000AABC4(sub_10014E854, (uint64_t (*)(void))sub_10014F094);
}

uint64_t sub_1000AABC4(uint64_t (*a1)(void), uint64_t (*a2)(void))
{
  uint64_t v5 = v2;
  uint64_t v6 = a1();
  uint64_t v8 = v7;
  unsigned int v10 = v9;
  uint64_t ObjectType = swift_getObjectType(v6);
  EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  119LL,  2LL,  176LL,  ObjectType,  v8);
  if (v10 <= 4 && ((1 << v10) & 0x13) != 0)
  {
    sub_10002A7BC();
    return swift_unknownObjectRelease(v6);
  }

  else
  {
    sub_10002A7BC();
    sub_10002A338();
    uint64_t v13 = a2(*(_BYTE *)(v5 + 216) & 0xFD);
    uint64_t v14 = ((uint64_t (*)(uint64_t))a1)(v13);
    uint64_t v15 = sub_1000ABE64(v14);
    sub_1000ABEAC( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  v16,  v17,  v18,  v15);
    sub_10009B4FC();
    return sub_10002A338();
  }

uint64_t sub_1000AAD04()
{
  void (*v36)(uint64_t *__return_ptr, unint64_t, ValueMetadata *, unint64_t);
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v3 = sub_1000ABF5C();
  if (!v1)
  {
    uint64_t v16 = v3 & 1;
    uint64_t v17 = sub_1000ABF74();
    uint64_t v18 = sub_1000ABEC0(v17);
    sub_1000ABE98( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  v19,  v20,  v21,  v18);
    sub_10002A524();
    uint64_t v22 = sub_10002A338();
    if ((v2 & 0xFF00) == 0x300)
    {
      uint64_t v23 = sub_1000ABF6C();
      uint64_t v24 = sub_10002A444();
      sub_1000ABED4( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  v25,  v26,  v27,  v24);
      if (sub_100095918())
      {
        sub_1000ABE5C();
        swift_release(v23);
      }

      uint64_t v22 = swift_release(v23);
    }

    (*(void (**)(uint64_t))(*(void *)v0 + 720LL))(v22);
    goto LABEL_19;
  }

  uint64_t v4 = v1;
  sub_10009B694();
  uint64_t v5 = sub_1000175B0(&qword_1002A9710);
  if (v54 != 3 || v53 != 6)
  {
    sub_100038470(v53, v54);
LABEL_8:
    sub_1000ABF6C();
    uint64_t v12 = sub_10002A444();
    sub_1000ABEE8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  v13,  v14,  v15,  v12);
    if (!sub_1000ABFA0())
    {
      uint64_t v16 = 3LL;
      goto LABEL_17;
    }

    sub_10009663C(v1);
    uint64_t v16 = 3LL;
    goto LABEL_10;
  }

  uint64_t v29 = sub_1000ABF74();
  __int16 v31 = v30;
  uint64_t ObjectType = swift_getObjectType(v29);
  sub_10002A5C0( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  v33,  v34,  v35,  ObjectType);
  sub_10002A524();
  sub_10002A338();
  if ((v31 & 0xFF00) != 0x300
    || (uint64_t v36 = *(void (**)(uint64_t *__return_ptr, unint64_t, ValueMetadata *, unint64_t))(*(void *)v0 + 712LL),
        uint64_t v37 = sub_100060530(),
        v36(&v53, v37, &type metadata for ChannelOptions.Types.AllowRemoteHalfClosureOption, v37),
        (v53 & 1) == 0))
  {
    int v42 = sub_1000ABF74();
    uint64_t v44 = v43;
    unint64_t v45 = swift_getObjectType(v42);
    uint64_t v16 = 2LL;
    sub_1000ABE84( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  v46,  v47,  v48,  v45);
    sub_10001ED6C();
    sub_10002A338();
    if ((v44 & 0xFF00) != 0x300) {
      goto LABEL_18;
    }
    sub_1000ABF6C();
    unint64_t v49 = sub_10002A444();
    sub_1000ABE48( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  v50,  v51,  v52,  v49);
    if (!sub_1000ABFA0())
    {
LABEL_17:
      sub_10002A524();
LABEL_18:
      sub_1000ABF7C(v4, 2LL, *(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v0 + 760LL));
      swift_errorRelease(v4);
LABEL_19:
      if ((sub_1000ABFA8() & 1) != 0 && (v0[88] & 1) == 0) {
        sub_10014F1B0();
      }
      return v16;
    }

    sub_1000ABE5C();
LABEL_10:
    sub_10002A524();
    goto LABEL_17;
  }

  sub_1000ABF6C();
  uint64_t v38 = sub_10002A444();
  sub_1000ABED4( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  v39,  v40,  v41,  v38);
  if (sub_100095918())
  {
    sub_1000ABE5C();
    sub_10002A51C();
  }

  sub_10002A51C();
  sub_1000ABF7C(v1, 1LL, *(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v0 + 760LL));
  swift_errorRelease(v1);
  v0[88] = 0;
  if ((sub_1000ABFA8() & 1) != 0 && (v0[88] & 1) == 0) {
    sub_10014F1B0();
  }
  return 2LL;
}

uint64_t sub_1000AB000()
{
  return sub_1000AB01C((uint64_t)sub_10014E854, (uint64_t)sub_10014E96C, (void (*)(void))sub_10014F1B0);
}

uint64_t sub_1000AB01C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  void (*v42)(uint64_t *__return_ptr, unint64_t, ValueMetadata *, unint64_t);
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v7 = sub_1000ABF5C();
  if (!v4)
  {
    uint64_t v20 = v7 & 1;
    uint64_t v21 = sub_1000ABFB4();
    __int16 v23 = v22;
    uint64_t ObjectType = swift_getObjectType(v21);
    sub_1000ABE84( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  v25,  v26,  v27,  ObjectType);
    sub_10002A7BC();
    uint64_t v28 = sub_10002A338();
    if ((v23 & 0xFF00) == 0x300)
    {
      sub_1000ABF34();
      uint64_t v29 = sub_10002A444();
      sub_1000ABE48( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  v30,  v31,  v32,  v29);
      if (sub_1000ABFA0())
      {
        sub_1000ABE5C();
        sub_10002A524();
      }

      uint64_t v28 = sub_10002A524();
    }

    uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 720LL))(v28);
    char v34 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 584LL))(v33);
    goto LABEL_21;
  }

  uint64_t v8 = v4;
  sub_10009B694();
  uint64_t v9 = sub_1000175B0(&qword_1002A9710);
  if (v57 != 3 || v56 != 6)
  {
    sub_100038470(v56, v57);
LABEL_8:
    sub_1000ABF34();
    uint64_t v16 = sub_10002A444();
    sub_1000ABEE8( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  v17,  v18,  v19,  v16);
    if (!sub_100095918())
    {
      uint64_t v20 = 3LL;
      goto LABEL_17;
    }

    sub_10009663C(v4);
    uint64_t v20 = 3LL;
    goto LABEL_10;
  }

  uint64_t v37 = sub_1000ABFB4();
  uint64_t v38 = sub_1000ABE64(v37);
  sub_10002A5C0( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  v39,  v40,  v41,  v38);
  sub_10009B4FC();
  sub_10002A338();
  if ((v5 & 0xFF00) != 0x300
    || (int v42 = *(void (**)(uint64_t *__return_ptr, unint64_t, ValueMetadata *, unint64_t))(*(void *)v3 + 712LL),
        Swift::String v43 = sub_100060530(),
        v42(&v56, v43, &type metadata for ChannelOptions.Types.AllowRemoteHalfClosureOption, v43),
        (v56 & 1) == 0))
  {
    unint64_t v49 = sub_1000ABFB4();
    char v50 = sub_1000ABE64(v49);
    uint64_t v20 = 2LL;
    sub_1000ABEAC( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/BaseSocketChannel.swift",  v51,  v52,  v53,  v50);
    sub_10009B4FC();
    sub_10002A338();
    if ((v5 & 0xFF00) != 0x300) {
      goto LABEL_18;
    }
    double v54 = *(void *)(sub_1000ABF34() + 56);
    uint64_t v55 = sub_10002A444();
    EventLoop.assertInEventLoop(file:line:)( "/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  117LL,  2LL,  1165LL,  v55,  v54);
    if (!sub_100095918())
    {
LABEL_17:
      sub_10001ED6C();
LABEL_18:
      if ((sub_1000ABE70() & 1) != 0) {
        sub_1000ABF88(v8, 2LL, *(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v3 + 760LL));
      }
      uint64_t v35 = swift_errorRelease(v8);
      char v34 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 584LL))(v35);
LABEL_21:
      if ((v34 & 1) != 0 && (v3[88] & 1) == 0) {
        a3();
      }
      return v20;
    }

    sub_1000ABE5C();
LABEL_10:
    sub_10001ED6C();
    goto LABEL_17;
  }

  sub_1000ABF34();
  uint64_t v44 = sub_10002A444();
  sub_1000ABE48( (uint64_t)"/Library/Caches/com.apple.xbs/Sources/StoreKit/ASOctaneSupportXPCService/Octane Server/SwiftNIO/ChannelPipeline.swift",  v45,  v46,  v47,  v44);
  if (sub_100095918())
  {
    sub_1000ABE5C();
    sub_10002A51C();
  }

  sub_10002A51C();
  if ((sub_1000ABE70() & 1) != 0) {
    sub_1000ABF88(v4, 1LL, *(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v3 + 760LL));
  }
  uint64_t v48 = swift_errorRelease(v4);
  v3[88] = 0;
  return 2LL;
}

uint64_t sub_1000AB368(void *a1, uint64_t a2, uint64_t a3)
{
  __int16 v5 = v3;
  uint64_t v9 = *v3;
  uint64_t v10 = type metadata accessor for PipePair();
  uint64_t v11 = swift_allocObject(v10, 32LL, 7LL);
  swift_retain();
  sub_10001EDE0();
  sub_10002A4C8();
  unint64_t v12 = sub_1000A94A0(a2, a3);
  if (v4)
  {
    sub_10002A5A4();
    swift_release();
    sub_10001ED6C();
    sub_10001EDD8();
    swift_deallocPartialClassInstance(v5, v9, 320LL, 7LL);
  }

  else
  {
    v5[39] = v12;
    sub_10002A5A4();
    AdaptiveRecvByteBufferAllocator.init(minimum:initial:maximum:)(&v18, 64LL, 2048LL, 0x10000LL);
    uint64_t v17[3] = &type metadata for AdaptiveRecvByteBufferAllocator;
    v17[4] = &protocol witness table for AdaptiveRecvByteBufferAllocator;
    uint64_t v13 = swift_allocObject(&unk_10027F1F8, 56LL, 7LL);
    v17[0] = v13;
    __int128 v14 = *(_OWORD *)&v18.initial;
    *(_OWORD *)(v13 + 1sub_100019F7C(v0 + 6) = *(_OWORD *)&v18.minimum;
    *(_OWORD *)(v13 + 3sub_100019F7C(v0 + 2) = v14;
    *(_BYTE *)(v13 + 48) = v18.decreaseNow;
    uint64_t v15 = swift_retain();
    uint64_t v11 = sub_10015174C(v15, 0LL, 0LL, a1, v17);
    sub_10001ED6C();
    sub_10001EDD8();
  }

  return v11;
}

uint64_t sub_1000AB4C4()
{
  unint64_t v0 = sub_100029C98();
  sub_1000252D0((uint64_t)&type metadata for ChannelError, v0);
  sub_1000ABEFC(v1, 1LL);
  return 0LL;
}

uint64_t sub_1000AB504()
{
  unint64_t v0 = sub_100029C98();
  sub_1000252D0((uint64_t)&type metadata for ChannelError, v0);
  return sub_1000ABEFC(v1, 12LL);
}

uint64_t sub_1000AB540()
{
  uint64_t v2 = *(void *)(*(void *)(v0 + 312) + 16LL);
  sub_10001EDE0();
  sub_10002A4C8();
  sub_100150A9C(v2);
  sub_10001EDD8();
  uint64_t result = sub_10001ED6C();
  if (!v1)
  {
    __chkstk_darwin(result);
    sub_10002A4C8();
    uint64_t v4 = sub_10001EDE0();
    sub_100150A9C(v4);
    sub_10001EDD8();
    return sub_10001ED6C();
  }

  return result;
}

uint64_t sub_1000AB63C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_1000AB678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void sub_1000AB6B8(uint64_t a1, unsigned __int8 a2)
{
  if (a2 - 1 >= 2)
  {
    if (a2) {
      return;
    }
    goto LABEL_7;
  }

  uint64_t v5 = *(void *)(*(void *)(v2 + 312) + 16LL);
  sub_1000487CC(v5 + 16, (uint64_t)&v9);
  if (*(_BYTE *)(v5 + 16) != 1 || (uint64_t v6 = sub_10001EDE0(), sub_10015116C(v6), sub_10001ED6C(), !v3))
  {
    if (a2 == 2)
    {
LABEL_7:
      uint64_t v7 = *(void *)(*(void *)(v2 + 312) + 24LL);
      sub_1000487CC(v7 + 16, (uint64_t)v10);
      if (*(_BYTE *)(v7 + 16) == 1)
      {
        uint64_t v8 = swift_retain();
        sub_10015116C(v8);
        sub_10002A5A4();
      }
    }
  }

uint64_t sub_1000AB790()
{
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v3 = *(void *)(v2 + 16);
  sub_1000487CC(v3 + 16, (uint64_t)v9);
  if (*(_BYTE *)(v3 + 16) != 1 || (uint64_t v4 = sub_1000ABFBC(), sub_1000ABF24(v4), result = sub_1000ABFE4(), !v1))
  {
    uint64_t v6 = *(void *)(v2 + 24);
    uint64_t result = sub_1000487CC(v6 + 16, (uint64_t)&v8);
    if (*(_BYTE *)(v6 + 16) == 1)
    {
      uint64_t v7 = sub_1000ABFBC();
      sub_1000ABF24(v7);
      return sub_1000ABFE4();
    }
  }

  return result;
}

uint64_t sub_1000AB830()
{
  *(_BYTE *)(v0 + 248) = 1;
  sub_1000AAAA0();
  uint64_t v2 = *(void *)(*(void *)(v0 + 312) + 16LL);
  uint64_t result = sub_1000487CC(v2 + 16, (uint64_t)v10);
  if (*(_BYTE *)(v2 + 16) == 1)
  {
    sub_1000ABF94(v0, 1u);
    if (v1)
    {
      uint64_t v5 = sub_1000ABE38();
      uint64_t v9 = 88LL;
    }

    else
    {
      sub_10002A4C8();
      NIOFileHandle.close()();
      uint64_t result = sub_10001EDD8();
      if (!v4) {
        return result;
      }
      uint64_t v5 = sub_1000ABE38();
      uint64_t v9 = 89LL;
    }

    uint64_t result = swift_unexpectedError(v5, v6, v7, v8, v9);
    __break(1u);
  }

  return result;
}

uint64_t sub_1000AB8EC()
{
  uint64_t v2 = *(void *)(*(void *)(v0 + 312) + 24LL);
  uint64_t result = sub_1000487CC(v2 + 16, (uint64_t)v10);
  if (*(_BYTE *)(v2 + 16) == 1)
  {
    sub_1000ABF94(v0, 0);
    if (v1)
    {
      uint64_t v5 = sub_1000ABE38();
      uint64_t v9 = 96LL;
    }

    else
    {
      sub_10002A4C8();
      NIOFileHandle.close()();
      uint64_t result = sub_10001EDD8();
      if (!v4) {
        return result;
      }
      uint64_t v5 = sub_1000ABE38();
      uint64_t v9 = 97LL;
    }

    uint64_t result = swift_unexpectedError(v5, v6, v7, v8, v9);
    __break(1u);
  }

  return result;
}

void sub_1000AB988(char a1)
{
  if (!a1)
  {
    sub_10015000C(v1, 0);
    if (v2)
    {
      uint64_t v4 = sub_1000ABE38();
      uint64_t v8 = 105LL;
      goto LABEL_8;
    }

uint64_t sub_1000ABA20()
{
  return swift_release(*(void *)(v0 + 312));
}

uint64_t sub_1000ABA28()
{
  uint64_t v0 = sub_100151924();
  swift_release(*(void *)(v0 + 312));
  return swift_deallocClassInstance(v0, 320LL, 7LL);
}

uint64_t type metadata accessor for PipeChannel(uint64_t a1)
{
  uint64_t result = qword_1002AF198;
  if (!qword_1002AF198) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PipeChannel);
  }
  return result;
}

uint64_t sub_1000ABA94(uint64_t a1)
{
  uint64_t v2 = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2(a1, 256LL, 1LL, &v2, a1 + 1024);
}

uint64_t sub_1000ABAD8()
{
  v1._countAndFlagsBits = 0x6E61684365706950LL;
  v1._object = (void *)0xEE00207B206C656ELL;
  String.append(_:)(v1);
  int v2 = swift_bridgeObjectRetain();
  sub_1000ABF3C(v2, v3, v4, v5, v6, v7, v8, v9, v38, v40, 0);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x657669746361202CLL;
  v10._object = (void *)0xEB00000000203D20LL;
  String.append(_:)(v10);
  uint64_t v11 = *(void *)(v0 + 64);
  swift_retain();
  int v12 = sub_100006CE4((_BYTE *)(v11 + 16));
  swift_release();
  if (v12) {
    uint64_t v13 = 1702195828LL;
  }
  else {
    uint64_t v13 = 0x65736C6166LL;
  }
  if (v12) {
    unint64_t v14 = 0xE400000000000000LL;
  }
  else {
    unint64_t v14 = 0xE500000000000000LL;
  }
  unint64_t v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  v16._object = (void *)0x800000010021B6D0LL;
  v16._countAndFlagsBits = 0xD000000000000011LL;
  String.append(_:)(v16);
  uint64_t v17 = sub_1000AAA34();
  sub_100029DF4(v18);
  uint64_t v19 = sub_1000175B0(&qword_1002AF5D0);
  uint64_t v20 = ((uint64_t (*)(void))Optional.debugDescription.getter)();
  __int16 v22 = v21;
  sub_100029DF4(v17);
  v23._countAndFlagsBits = v20;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 0xD000000000000012LL;
  v24._object = (void *)0x800000010021B6F0LL;
  String.append(_:)(v24);
  uint64_t v25 = sub_1000AAA34();
  uint64_t v27 = v26;
  sub_100029DF4(v25);
  Optional.debugDescription.getter(v19);
  int v28 = sub_100029DF4(v27);
  sub_1000ABF3C(v28, v29, v30, v31, v32, v33, v34, v35, v39, v27, v41);
  swift_bridgeObjectRelease();
  v36._countAndFlagsBits = 32032LL;
  v36._object = (void *)0xE200000000000000LL;
  String.append(_:)(v36);
  return *(void *)v42;
}

uint64_t sub_1000ABCE0()
{
  return sub_1000ABAD8();
}

uint64_t sub_1000ABD00(uint64_t a1, uint64_t a2)
{
  return sub_1000AB63C(a1, a2, v2);
}

void sub_1000ABD08(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000ABD10(uint64_t a1, uint64_t a2)
{
  return sub_1000AB678(a1, a2, v2);
}

uint64_t sub_1000ABD18()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t storeEnumTagSinglePayload for PipeChannel.Direction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(vsub_100019F7C(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100019F7C(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000ABD74 + 4 * byte_1001FB9E5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000ABDA8 + 4 * byte_1001FB9E0[v4]))();
}

uint64_t sub_1000ABDA8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000ABDB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000ABDB8LL);
  }
  return result;
}

uint64_t sub_1000ABDC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000ABDCCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000ABDD0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000ABDD8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PipeChannel.Direction()
{
  return &type metadata for PipeChannel.Direction;
}

unint64_t sub_1000ABDF8()
{
  unint64_t result = qword_1002AF5D8;
  if (!qword_1002AF5D8)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FBA9C, &type metadata for PipeChannel.Direction);
    atomic_store(result, (unint64_t *)&qword_1002AF5D8);
  }

  return result;
}

uint64_t sub_1000ABE38()
{
  return v0;
}

uint64_t sub_1000ABE48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, 117LL, 2LL, 1165LL, a5, v5);
}

void sub_1000ABE5C()
{
}

uint64_t sub_1000ABE64(uint64_t a1)
{
  return swift_getObjectType(a1);
}

uint64_t sub_1000ABE70()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)v0 + 800LL))(v1);
}

uint64_t sub_1000ABE84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, 119LL, 2LL, 161LL, a5, v5);
}

uint64_t sub_1000ABE98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, 119LL, 2LL, 161LL, a5, v5);
}

uint64_t sub_1000ABEAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, 119LL, 2LL, 161LL, a5, v5);
}

uint64_t sub_1000ABEC0(uint64_t a1)
{
  return swift_getObjectType(a1);
}

uint64_t sub_1000ABED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, 117LL, 2LL, 1165LL, a5, v5);
}

uint64_t sub_1000ABEE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EventLoop.assertInEventLoop(file:line:)(a1, 117LL, 2LL, 1189LL, a5, v5);
}

uint64_t sub_1000ABEFC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 3;
  return swift_willThrow();
}

uint64_t sub_1000ABF10(uint64_t a1, uint64_t a2)
{
  return swift_unexpectedError(v2, a2, 49LL, 1LL, 1069LL);
}

void sub_1000ABF24(uint64_t a1)
{
}

uint64_t sub_1000ABF34()
{
  return v0();
}

void sub_1000ABF3C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
}

uint64_t sub_1000ABF4C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  return swift_dynamicCast(&a9, &a11, a3, a4, 6LL);
}

uint64_t sub_1000ABF5C()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624LL))();
}

uint64_t sub_1000ABF6C()
{
  return sub_10014E96C();
}

uint64_t sub_1000ABF74()
{
  return sub_10014E854();
}

uint64_t sub_1000ABF7C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, void)@<X8>)
{
  return a3(a1, a2, 0LL);
}

uint64_t sub_1000ABF88@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, void)@<X8>)
{
  return a3(a1, a2, 0LL);
}

void sub_1000ABF94(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t sub_1000ABFA0()
{
  return sub_100095918();
}

uint64_t sub_1000ABFA8()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584LL))();
}

uint64_t sub_1000ABFB4()
{
  return v0();
}

uint64_t sub_1000ABFBC()
{
  return swift_retain(v0);
}

uint64_t sub_1000ABFC8()
{
  uint64_t v1 = *(void *)(v0 + 176);
  sub_100029DDC(*(void *)(v0 + 168));
  return sub_100029DDC(v1);
}

uint64_t sub_1000ABFE4()
{
  return swift_release(v0);
}

uint64_t sub_1000ABFF0()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t type metadata accessor for UnfairLock()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService10UnfairLock);
}

uint64_t sub_1000AC03C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 + 40);
  if (*(void *)(v7 + 16))
  {
    sub_10003574C();
    sub_10001DBCC();
    unint64_t v8 = sub_1000F168C(a3, a4);
    if ((v9 & 1) != 0)
    {
      uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v8);
      swift_retain();
    }

    else
    {
      uint64_t v10 = 0LL;
    }

    sub_10003561C();
    sub_10001EDA0();
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  sub_1000AC8FC();
  sub_10003561C();
  sub_10002A5A4();
  return v10;
}

uint64_t sub_1000AC0EC()
{
  uint64_t v2 = *(void *)(v0 + 16);
  if (!*(void *)(v2 + 16)) {
    goto LABEL_5;
  }
  sub_10003574C();
  sub_10001DBCC();
  unint64_t v3 = sub_1000AC904();
  if ((v4 & 1) == 0)
  {
    sub_10003561C();
    sub_10001EDA0();
LABEL_5:
    uint64_t v9 = 0LL;
    goto LABEL_6;
  }

  uint64_t v5 = *(void *)(*(void *)(v2 + 56) + 16 * v3 + 8);
  swift_bridgeObjectRetain(v5);
  sub_10003561C();
  sub_10001EDA0();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 stringByAppendingPathComponent:v7];

  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
LABEL_6:
  sub_1000AC920();
  sub_10001A420();
  sub_10003561C();
  sub_10002A5A4();
  return v9;
}

uint64_t sub_1000AC214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = sub_10012A3C4(a3);
  sub_10001A420();
  sub_100023EEC();
  if (!v12)
  {
    uint64_t v13 = type metadata accessor for OctaneConfigurationOverrides();
    uint64_t v14 = sub_1000AC93C(v13);
    *(void *)(v14 + 1sub_100019F7C(v0 + 6) = _swiftEmptyDictionarySingleton;
    *(void *)(v14 + 2sub_100019F7C(v0 + 4) = _swiftEmptyDictionarySingleton;
  }

  uint64_t v15 = sub_100048920(a5, a6, a7);
  sub_10002A718(a2 + 32, (uint64_t)v19, 33LL);
  swift_bridgeObjectRetain();
  uint64_t v16 = swift_retain();
  sub_1001B81F0(v16, a3, a4);
  swift_endAccess(v19);
  swift_release();
  sub_10001A420();
  sub_1000AC920();
  sub_10001A420();
  sub_10002A524();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1000AC348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = swift_retain();
  sub_1001B8204(v7, a3, a4);
  swift_endAccess(v9);
  sub_10003561C();
  sub_1000AC920();
  sub_10002A5A4();
  sub_10003561C();
  return swift_release(a2);
}

uint64_t sub_1000AC3EC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  return swift_release(a2);
}

void sub_1000AC460(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (a2 == 9) {
    *a3 = *(void *)(a4 + 136);
  }
  sub_1000487CC(a4 + 32, (uint64_t)v16);
  if (*(void *)(*(void *)(a4 + 32) + 16LL))
  {
    sub_10003574C();
    sub_10001DBCC();
    unint64_t v9 = sub_1000AC904();
    if ((v10 & 1) != 0)
    {
      sub_1000AC910(v9);
      sub_10003561C();
      sub_10001EDA0();
      sub_1000487CC(a5 + 16, (uint64_t)&v15);
      sub_10012A4A4(a2, *(void *)(a5 + 16));
      uint64_t v12 = v11;
      char v14 = v13;
      swift_release(a5);
      if ((v14 & 1) == 0) {
        *a3 = v12;
      }
    }

    else
    {
      sub_10003561C();
      sub_10001EDA0();
    }
  }

  sub_1000AC8FC();
  sub_10003561C();
  sub_10002A5A4();
  sub_1000AC8E4();
}

void sub_1000AC530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (*(void *)(*(void *)(v6 + 32) + 16LL))
  {
    sub_10003574C();
    sub_10001DBCC();
    unint64_t v11 = sub_1000AC904();
    if ((v12 & 1) == 0)
    {
      sub_10003561C();
      goto LABEL_6;
    }

    sub_1000AC910(v11);
    sub_10003561C();
    sub_10001EDA0();
    sub_1000487CC(v8 + 24, (uint64_t)&v17);
    sub_10012A4E0(v7, *(void *)(v8 + 24));
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    swift_release(v8);
    if (v16)
    {
      *a6 = v14;
      a6[1] = v16;
LABEL_6:
      swift_bridgeObjectRelease();
    }
  }

  sub_1000AC8FC();
  sub_10003561C();
  sub_10002A5A4();
  sub_1000AC8E4();
}

uint64_t sub_1000AC5EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  int v13 = a5 & 1;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(a1 + 16));
  if (a2 == 9)
  {
    if (v13) {
      uint64_t v14 = 0LL;
    }
    else {
      uint64_t v14 = a4;
    }
    *(void *)(a3 + 13sub_100019F7C(v0 + 6) = v14;
  }

  else
  {
    uint64_t v22 = v7;
    sub_1000487CC(a3 + 32, (uint64_t)v21);
    sub_10003574C();
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_10012A3C4(a6);
    sub_10003561C();
    swift_bridgeObjectRelease();
    if (!v15)
    {
      uint64_t v16 = type metadata accessor for OctaneConfigurationOverrides();
      uint64_t v17 = sub_1000AC93C(v16);
      *(void *)(v17 + 1sub_100019F7C(v0 + 6) = _swiftEmptyDictionarySingleton;
      *(void *)(v17 + 2sub_100019F7C(v0 + 4) = _swiftEmptyDictionarySingleton;
    }

    sub_10004881C(a4, v13, a2);
    sub_10002A718(a3 + 32, (uint64_t)v20, 33LL);
    sub_10003574C();
    uint64_t v18 = swift_retain();
    sub_1001B81F0(v18, a6, a7);
    swift_endAccess(v20);
    swift_release();
    sub_10003561C();
  }

  sub_1000AC8FC();
  sub_10003561C();
  return sub_10002A5A4();
}

uint64_t sub_1000AC740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  int v13 = *(os_unfair_lock_s **)(a1 + 16);
  os_unfair_lock_lock(v13);
  sub_100076B7C(a2, a3, a4, a5, a6, a7);
  os_unfair_lock_unlock(v13);
  sub_100023EEC();
  sub_10001A420();
  return swift_release();
}

uint64_t sub_1000AC7D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A524();
}

uint64_t sub_1000AC840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002A524();
}

void sub_1000AC8CC(uint64_t a1)
{
}

void sub_1000AC8D8(uint64_t a1)
{
}

  ;
}

void sub_1000AC8FC()
{
}

unint64_t sub_1000AC904()
{
  return sub_1000F168C(v1, v0);
}

uint64_t sub_1000AC910(uint64_t a1)
{
  return swift_retain(*(void *)(*(void *)(v1 + 56) + 8 * a1));
}

void sub_1000AC920()
{
}

  ;
}

uint64_t sub_1000AC93C(uint64_t a1)
{
  return swift_allocObject(a1, 32LL, 7LL);
}

uint64_t destroy for HTTPBody(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 16));
}

uint64_t initializeWithCopy for HTTPBody(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = v4;
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 3sub_100019F7C(v0 + 2) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 35) = *(_DWORD *)(a2 + 35);
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t assignWithCopy for HTTPBody(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = v6;
  swift_retain(v6);
  swift_release(v7);
  *(_DWORD *)(a1 + 2sub_100019F7C(v0 + 4) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 3sub_100019F7C(v0 + 2) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 3sub_100019F7C(v0 + 6) = *(_WORD *)(a2 + 36);
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 38);
  return a1;
}

__n128 initializeWithTake for HTTPBody(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 31) = *(void *)(a2 + 31);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 1sub_100019F7C(v0 + 6) = v3;
  return result;
}

uint64_t assignWithTake for HTTPBody(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease(*(void *)(a1 + 8));
  uint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 3sub_100019F7C(v0 + 2) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 3sub_100019F7C(v0 + 6) = *(_WORD *)(a2 + 36);
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 38);
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPBody(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 39))
    {
      LODWORD(sub_1000680EC(v0, v1, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(sub_1000680EC(v0, v1, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(sub_1000680EC(v0, v1, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPBody(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 1sub_100019F7C(v0 + 6) = 0LL;
    *(void *)(result + 2sub_100019F7C(v0 + 4) = 0LL;
    *(_BYTE *)(result + 38) = 0;
    *(_WORD *)(result + 3sub_100019F7C(v0 + 6) = 0;
    *(_DWORD *)(result + 3sub_100019F7C(v0 + 2) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 39) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 1sub_100019F7C(v0 + 6) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 39) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for HTTPBody()
{
  return &type metadata for HTTPBody;
}

uint64_t sub_1000ACB64@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X8>)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v16 = String.UTF8View._foreignCount()();
    if (v16 < 0) {
      __break(1u);
    }
    if (v16) {
      goto LABEL_6;
    }
LABEL_10:
    if (qword_1002A8CC8 != -1) {
      goto LABEL_17;
    }
    goto LABEL_11;
  }

  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v8 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8) {
    goto LABEL_10;
  }
LABEL_6:
  uint64_t v9 = type metadata accessor for ByteBuffer._Storage();
  sub_1000AD534( v9,  (uint64_t (*)(void))j_j__malloc,  (uint64_t)j_j__realloc,  (uint64_t)j_j__free,  (uint64_t)sub_10005B53C);
  int v11 = 0;
  Swift::UInt32 v12 = 0;
  __int16 v13 = 0;
  char v14 = 0;
  int v15 = *(_DWORD *)(v10 + 16);
  while (1)
  {
    uint64_t v30 = v10;
    int v31 = v11;
    Swift::UInt32 v32 = v12;
    int v33 = v15;
    __int16 v34 = v13;
    Swift::Int v17 = v12;
    char v35 = v14;
    swift_bridgeObjectRetain();
    int v18 = sub_100078244(a1, a2, (uint64_t)&v30, v12);
    char v20 = v19;
    swift_bridgeObjectRelease();
    if ((v20 & 1) != 0)
    {
      v21._countAndFlagsBits = a1;
      v21._object = (void *)a2;
      int v18 = ByteBuffer._setStringSlowpath(_:at:)(v21, v17);
    }

    swift_bridgeObjectRelease();
    Swift::UInt32 v22 = v32 + v18;
    if (!__CFADD__(v32, v18)) {
      break;
    }
    __break(1u);
LABEL_17:
    swift_once(&qword_1002A8CC8, sub_10005B580);
LABEL_11:
    int v11 = qword_1002EB928;
    Swift::UInt32 v12 = HIDWORD(qword_1002EB928);
    int v15 = dword_1002EB930;
    __int16 v13 = word_1002EB934;
    char v14 = byte_1002EB936;
    uint64_t v10 = swift_retain();
  }

  uint64_t result = sub_1000AD338(a3);
  uint64_t v24 = v30;
  int v25 = v31;
  int v26 = v33;
  __int16 v27 = v34;
  char v28 = v35;
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v29;
  *(void *)(a4 + 1sub_100019F7C(v0 + 6) = v24;
  *(_DWORD *)(a4 + 2sub_100019F7C(v0 + 4) = v25;
  *(_DWORD *)(a4 + 28) = v22;
  *(_DWORD *)(a4 + 3sub_100019F7C(v0 + 2) = v26;
  *(_WORD *)(a4 + 3sub_100019F7C(v0 + 6) = v27;
  *(_BYTE *)(a4 + 38) = v28;
  return result;
}

uint64_t sub_1000ACD2C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned int *)(v0 + 24);
  unsigned int v3 = *(_DWORD *)(v0 + 28);
  uint64_t v4 = *(unsigned __int16 *)(v0 + 36);
  uint64_t v5 = *(unsigned __int8 *)(v0 + 38);
  uint64_t v6 = (void *)(v1 + 24);
  uint64_t result = swift_beginAccess(v1 + 24, v8, 0LL, 0LL);
  __break(1u);
  return result;
}

uint64_t sub_1000ACDA4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7633012 && a2 == 0xE300000000000000LL;
  if (v2 || (sub_1000AD508(7633012LL, 0xE300000000000000LL) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6LL;
  }

  else
  {
    BOOL v6 = a1 == 0x7473696C70LL && a2 == 0xE500000000000000LL;
    if (v6 || (sub_1000AD508(0x7473696C70LL, 0xE500000000000000LL) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 3LL;
    }

    else
    {
      BOOL v7 = a1 == 1852797802 && a2 == 0xE400000000000000LL;
      if (v7 || (sub_1000AD508(1852797802LL, 0xE400000000000000LL) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 5LL;
      }

      else
      {
        BOOL v8 = a1 == 1734701162 && a2 == 0xE400000000000000LL;
        if (v8
          || (sub_1000AD508(1734701162LL, 0xE400000000000000LL) & 1) != 0
          || (a1 == 6778986 ? (BOOL v9 = a2 == 0xE300000000000000LL) : (BOOL v9 = 0),
              v9 || (sub_1000AD508(6778986LL, 0xE300000000000000LL) & 1) != 0))
        {
          swift_bridgeObjectRelease();
          return 4LL;
        }

        else
        {
          BOOL v10 = a1 == 1819112552 && a2 == 0xE400000000000000LL;
          if (v10 || (sub_1000AD508(1819112552LL, 0xE400000000000000LL) & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 1LL;
          }

          else
          {
            BOOL v11 = a1 == 7566179 && a2 == 0xE300000000000000LL;
            if (v11 || (sub_1000AD508(7566179LL, 0xE300000000000000LL) & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 0LL;
            }

            else
            {
              BOOL v12 = a1 == 29546 && a2 == 0xE200000000000000LL;
              if (v12 || (sub_1000AD508(29546LL, 0xE200000000000000LL) & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 2LL;
              }

              else
              {
                BOOL v13 = a1 == 6778480 && a2 == 0xE300000000000000LL;
                if (v13 || (sub_1000AD508(6778480LL, 0xE300000000000000LL) & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 7LL;
                }

                else if (a1 == 6780531 && a2 == 0xE300000000000000LL)
                {
                  swift_bridgeObjectRelease();
                  return 8LL;
                }

                else
                {
                  char v15 = sub_1000AD508(6780531LL, 0xE300000000000000LL);
                  swift_bridgeObjectRelease();
                  if ((v15 & 1) != 0) {
                    return 8LL;
                  }
                  else {
                    return 9LL;
                  }
                }
              }
            }
          }
        }
      }
    }
  }

void sub_1000AD058(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15) {
    uint64_t v2 = 0LL;
  }
  else {
    uint64_t v2 = a1;
  }
  if (a2 >> 60 == 15) {
    unint64_t v3 = 0xC000000000000000LL;
  }
  else {
    unint64_t v3 = a2;
  }
  sub_10003AA74(a1, a2);
  uint64_t v4 = Data.count.getter(v2, v3);
  if ((v4 & 0x8000000000000000LL) == 0)
  {
    if (v4)
    {
      uint64_t v5 = type metadata accessor for ByteBuffer._Storage();
      sub_1000AD534( v5,  (uint64_t (*)(void))j_j__malloc,  (uint64_t)j_j__realloc,  (uint64_t)j_j__free,  (uint64_t)sub_10005B53C);
    }

    else
    {
      if (qword_1002A8CC8 != -1) {
        swift_once(&qword_1002A8CC8, sub_10005B580);
      }
      uint64_t v6 = swift_retain();
    }

    __chkstk_darwin(v6);
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000AD300LL);
}

uint64_t sub_1000AD338(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000AD36C + 4 * a8[a1]))( 0x7373632F74786574LL,  0xE800000000000000LL);
}

uint64_t sub_1000AD36C()
{
  return 0x6D74682F74786574LL;
}

unint64_t sub_1000AD38C()
{
  return 0xD000000000000016LL;
}

uint64_t sub_1000AD3C4()
{
  return 0x706A2F6567616D69LL;
}

uint64_t sub_1000AD42C()
{
  return 0x76732F6567616D69LL;
}

uint64_t sub_1000AD450(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (a2)
    {
      uint64_t v3 = result;
      if (a2 <= 14)
      {
        return Data.InlineData.init(_:)(result, result + a2);
      }

      else
      {
        uint64_t v4 = type metadata accessor for __DataStorage(0LL);
        swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
        __DataStorage.init(bytes:length:)(v3, a2);
        if ((unint64_t)a2 >= 0x7FFFFFFF)
        {
          uint64_t v5 = type metadata accessor for Data.RangeReference(0LL);
          uint64_t result = swift_allocObject(v5, 32LL, 7LL);
          *(void *)(result + 1sub_100019F7C(v0 + 6) = 0LL;
          *(void *)(result + 2sub_100019F7C(v0 + 4) = a2;
        }

        else
        {
          return a2 << 32;
        }
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000AD508(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_1000AD518()
{
  return sub_10003A9EC(v0, v1);
}

uint64_t sub_1000AD524(uint64_t a1, uint64_t a2)
{
  return sub_1000702B4(a1, a2);
}

void sub_1000AD534(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
}

uint64_t sub_1000AD540()
{
  uint64_t result = v0;
  *(void *)(v0 + 1sub_100019F7C(v0 + 6) = &_swiftEmptyArrayStorage;
  *(_BYTE *)(v0 + 2sub_100019F7C(v0 + 4) = 4;
  *(void *)(v0 + 3sub_100019F7C(v0 + 2) = 0LL;
  *(_BYTE *)(v0 + 4sub_10006F0B8(12LL, 0) = 1;
  *(void *)(v0 + 48) = 0LL;
  *(void *)(v0 + 5sub_100019F7C(v0 + 6) = 0LL;
  *(void *)(v0 + 7sub_100019F7C(v0 + 2) = 0LL;
  *(void *)(v0 + 8sub_10006F0B8(12LL, 0) = 0LL;
  *(void *)(v0 + 6sub_100019F7C(v0 + 4) = 0xF000000000000000LL;
  return result;
}

uint64_t sub_1000AD578()
{
  return v0;
}

uint64_t sub_1000AD5AC(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 80);
    *(_OWORD *)(v2 + 7sub_100019F7C(v0 + 2) = xmmword_1001FBB50;
    return swift_bridgeObjectRelease(v7);
  }

  else
  {
    uint64_t v3 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    uint64_t v4 = *(void *)(v2 + 80);
    *(void *)(v2 + 7sub_100019F7C(v0 + 2) = v3;
    *(void *)(v2 + 8sub_10006F0B8(12LL, 0) = v5;
    return swift_bridgeObjectRelease(v4);
  }

BOOL sub_1000AD620(Swift::String string)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100271D38, v3);
  sub_100019344();
  return v1 != 0;
}

uint64_t sub_1000AD65C()
{
  return 0x6375537070416E69LL;
}

unint64_t sub_1000AD67C(Swift::String string)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100271D70, v3);
  sub_100019344();
  if (v1 >= 4) {
    return 4LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000AD6BC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000AD6F0 + 4 * byte_1001FBB60[a1]))( 0x7975427070416E69LL,  0xE800000000000000LL);
}

unint64_t sub_1000AD6F0()
{
  return 0xD000000000000014LL;
}

unint64_t sub_1000AD70C()
{
  return 0xD000000000000018LL;
}

BOOL sub_1000AD750@<W0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = sub_1000AD620(*a1);
  *a2 = result;
  return result;
}

void sub_1000AD784(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 1sub_100019F7C(v0 + 4) = -5120;
}

uint64_t sub_1000AD7A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000AE18C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000AD804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000AE18C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_1000AD850(char *a1)
{
}

void sub_1000AD85C()
{
}

void sub_1000AD864(uint64_t a1)
{
}

void sub_1000AD86C(uint64_t a1)
{
}

unint64_t sub_1000AD874@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000AD67C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000AD8A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000AD6BC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000AD8C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000AE150();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000AD924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000AE150();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000AD970()
{
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

uint64_t type metadata accessor for GenericStoreKitResponse()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService23GenericStoreKitResponse);
}

uint64_t storeEnumTagSinglePayload for JingleAction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(vsub_100019F7C(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100019F7C(v0 + 4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000AD9FC + 4 * byte_1001FBB69[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000ADA30 + 4 * byte_1001FBB64[v4]))();
}

uint64_t sub_1000ADA30(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000ADA38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000ADA40LL);
  }
  return result;
}

uint64_t sub_1000ADA4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000ADA54LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000ADA58(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000ADA60(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for JingleAction()
{
  return &type metadata for JingleAction;
}

uint64_t storeEnumTagSinglePayload for JingleDocType(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(vsub_100019F7C(v0 + 4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1000ADABC + 4 * byte_1001FBB6E[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000ADADC + 4 * byte_1001FBB73[v4]))();
  }
}

_BYTE *sub_1000ADABC(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_1000ADADC(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1000ADAE4(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1000ADAEC(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1000ADAF4(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1000ADAFC(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for JingleDocType()
{
  return &type metadata for JingleDocType;
}

unint64_t sub_1000ADB1C()
{
  unint64_t result = qword_1002AF830;
  if (!qword_1002AF830)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FBCEC, &type metadata for JingleDocType);
    atomic_store(result, (unint64_t *)&qword_1002AF830);
  }

  return result;
}

unint64_t sub_1000ADB5C()
{
  unint64_t result = qword_1002AF838;
  if (!qword_1002AF838)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FBDDC, &type metadata for JingleAction);
    atomic_store(result, (unint64_t *)&qword_1002AF838);
  }

  return result;
}

unint64_t sub_1000ADB98(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100271DF0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7) {
    return 7LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000ADBE4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000ADC14 + 4 * byte_1001FBB78[a1]))( 0x73676E6970LL,  0xE500000000000000LL);
}

uint64_t sub_1000ADC14()
{
  return 0x6F44656C676E696ALL;
}

unint64_t sub_1000ADC38()
{
  return 0xD000000000000019LL;
}

uint64_t sub_1000ADC54()
{
  return 0x6341656C676E696ALL;
}

uint64_t sub_1000ADC74()
{
  return 1684632420LL;
}

uint64_t sub_1000ADC84()
{
  return 0x7473696C2D707061LL;
}

uint64_t sub_1000ADC9C()
{
  return 0x2D74706965636572LL;
}

uint64_t sub_1000ADCBC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000ADCEC + 4 * byte_1001FBB7F[a1]))( 0x73676E6970LL,  0xE500000000000000LL);
}

uint64_t sub_1000ADCEC()
{
  return 0x6F44656C676E696ALL;
}

unint64_t sub_1000ADD10()
{
  return 0xD000000000000019LL;
}

uint64_t sub_1000ADD2C()
{
  return 0x6341656C676E696ALL;
}

uint64_t sub_1000ADD4C()
{
  return 1684632420LL;
}

uint64_t sub_1000ADD5C()
{
  return 0x7473696C2D707061LL;
}

uint64_t sub_1000ADD74()
{
  return 0x2D74706965636572LL;
}

uint64_t sub_1000ADD94(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000175B0(&qword_1002AF840);
  __chkstk_darwin(v5);
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100019F58(a1, v6);
  unint64_t v8 = sub_1000AE0D4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for GenericStoreKitResponse.CodingKeys,  &type metadata for GenericStoreKitResponse.CodingKeys,  v8,  v6,  v7);
  *(void *)&__int128 v31 = *(void *)(v3 + 16);
  char v32 = 0;
  sub_1000175B0(&qword_1002A93B8);
  sub_1000533C8();
  uint64_t v9 = sub_1000AE36C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v9, v10, v11, v12, v13);
  if (!v2)
  {
    LOBYTE(v31) = 1;
    unint64_t v14 = sub_100053424();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v31, v5, &type metadata for JingleDocType, v14);
    uint64_t v15 = *(void *)(v3 + 32);
    uint64_t v16 = *(unsigned __int8 *)(v3 + 40);
    LOBYTE(v31) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v31, v5);
    LOBYTE(v31) = *(_BYTE *)(v3 + 24);
    char v32 = 3;
    unint64_t v17 = sub_100053460();
    sub_1000AE354(v17, v18, v19, (uint64_t)&type metadata for JingleAction, v17);
    uint64_t v21 = *(void *)(v3 + 72);
    uint64_t v22 = *(void *)(v3 + 80);
    LOBYTE(v31) = 4;
    swift_bridgeObjectRetain();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v31, v5);
    swift_bridgeObjectRelease();
    *(void *)&__int128 v31 = *(void *)(v3 + 48);
    char v32 = 5;
    sub_1000175B0(&qword_1002ABA48);
    sub_10005349C();
    uint64_t v23 = sub_1000AE36C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v23, v24, v25, v26, v27);
    __int128 v31 = *(_OWORD *)(v3 + 56);
    char v32 = 6;
    unint64_t v28 = sub_100048400();
    sub_1000AE354(v28, v29, v30, (uint64_t)&type metadata for Data, v28);
  }

  return sub_1000227A0();
}

void sub_1000ADFC0(char *a1)
{
}

void sub_1000ADFCC()
{
}

void sub_1000ADFD4(uint64_t a1)
{
}

void sub_1000ADFDC(uint64_t a1)
{
}

unint64_t sub_1000ADFE4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000ADB98(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000AE010@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000ADBE4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000AE038()
{
  return sub_1000ADCBC(*v0);
}

uint64_t sub_1000AE040@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000ADBE0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000AE064(uint64_t a1)
{
  unint64_t v2 = sub_1000AE0D4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000AE08C(uint64_t a1)
{
  unint64_t v2 = sub_1000AE0D4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000AE0B4(void *a1)
{
  return sub_1000ADD94(a1);
}

unint64_t sub_1000AE0D4()
{
  unint64_t result = qword_1002AF848;
  if (!qword_1002AF848)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FBF28, &type metadata for GenericStoreKitResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AF848);
  }

  return result;
}

unint64_t sub_1000AE110()
{
  unint64_t result = qword_1002ABA58;
  if (!qword_1002ABA58)
  {
    uint64_t v1 = type metadata accessor for IAPTransaction(255LL);
    unint64_t result = swift_getWitnessTable("IM\b", v1);
    atomic_store(result, (unint64_t *)&qword_1002ABA58);
  }

  return result;
}

unint64_t sub_1000AE150()
{
  unint64_t result = qword_1002AF850;
  if (!qword_1002AF850)
  {
    unint64_t result = swift_getWitnessTable("-8\b", &type metadata for JingleAction);
    atomic_store(result, (unint64_t *)&qword_1002AF850);
  }

  return result;
}

unint64_t sub_1000AE18C()
{
  unint64_t result = qword_1002AF858;
  if (!qword_1002AF858)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FBC74, &type metadata for JingleDocType);
    atomic_store(result, (unint64_t *)&qword_1002AF858);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for GenericStoreKitResponse.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(vsub_100019F7C(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100019F7C(v0 + 4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_1000AE214 + 4 * byte_1001FBB8B[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1000AE248 + 4 * byte_1001FBB86[v4]))();
}

uint64_t sub_1000AE248(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AE250(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000AE258LL);
  }
  return result;
}

uint64_t sub_1000AE264(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000AE26CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_1000AE270(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AE278(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GenericStoreKitResponse.CodingKeys()
{
  return &type metadata for GenericStoreKitResponse.CodingKeys;
}

unint64_t sub_1000AE298()
{
  unint64_t result = qword_1002AF860;
  if (!qword_1002AF860)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FBF00, &type metadata for GenericStoreKitResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AF860);
  }

  return result;
}

unint64_t sub_1000AE2D8()
{
  unint64_t result = qword_1002AF868;
  if (!qword_1002AF868)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FBE38, &type metadata for GenericStoreKitResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AF868);
  }

  return result;
}

unint64_t sub_1000AE318()
{
  unint64_t result = qword_1002AF870;
  if (!qword_1002AF870)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FBE60, &type metadata for GenericStoreKitResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AF870);
  }

  return result;
}

uint64_t sub_1000AE354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v6 - 96, v6 - 65, v5, a4, a5);
}

uint64_t sub_1000AE36C()
{
  return v0 - 96;
}

void sub_1000AE38C(__int128 *a1)
{
  __asm { BR              X10 }

uint64_t sub_1000AE3D0(uint64_t a1)
{
  uint64_t v1 = v13[8];
  sub_1000AFD8C(a1, (uint64_t)v13);
  if (v2)
  {
    char v11 = 0;
  }

  else
  {
    sub_1000AFD74();
    BOOL v8 = v8 && v1 == v5;
    if (v8 && v3 == v6 && v4 == v7) {
      char v11 = 1;
    }
    else {
      char v11 = sub_1000AFD64();
    }
  }

  return v11 & 1;
}

uint64_t sub_1000AE4E0(__int128 *a1)
{
  int v2 = v21 >> 6;
  if (!v2)
  {
    sub_1000AFDA4();
    if (v4 <= 0x3F) {
      goto LABEL_6;
    }
LABEL_19:
    char v13 = 0;
    return v13 & 1;
  }

  if (v2 != 1)
  {
    v21 &= 0x3Fu;
    uint64_t v14 = sub_1000AF7D4(v20, (uint64_t)&v22);
    sub_1000AFD8C(v14, (uint64_t)v17);
    if ((v15 & 0xC0) == 0x80)
    {
      char v18 = v15 & 0x3F;
      sub_1000AF7D4(v17, (uint64_t)v19);
      sub_1000AE38C(&v22);
      return v13 & 1;
    }

    goto LABEL_19;
  }

  sub_1000AFDA4();
  if ((v3 & 0xC0) != 0x40) {
    goto LABEL_19;
  }
  char v23 = v3 & 0x3F;
LABEL_6:
  sub_1000AFD74();
  BOOL v10 = v10 && v1 == v7;
  if (v10 && v5 == v8 && v6 == v9) {
    char v13 = 1;
  }
  else {
    char v13 = sub_1000AFD64();
  }
  return v13 & 1;
}

uint64_t sub_1000AE5DC(__int128 *a1, __int128 *a2)
{
  return v3 & 1;
}

uint64_t sub_1000AE624(__int128 *a1, __int128 *a2)
{
  return sub_1000AE4E0(v4) & 1;
}

void *sub_1000AE66C(uint64_t a1, unint64_t a2)
{
  uint64_t v130 = 15LL;
  uint64_t v131 = _swiftEmptyArrayStorage;
  unint64_t v129 = 15LL;
  sub_10002A718((uint64_t)&v130, (uint64_t)v128, 1LL);
  sub_10002A718((uint64_t)&v129, (uint64_t)v127, 1LL);
  uint64_t v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    unint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    unint64_t v124 = 0LL;
    unint64_t v125 = 4 * v4;
    char v123 = 5;
    unint64_t v7 = 15LL;
    unint64_t v8 = 15LL;
    char v9 = 1;
    do
    {
      uint64_t v10 = sub_1000AFC20(v8);
      uint64_t v12 = v11;
      if ((Character.isWhitespace.getter(v10) & 1) != 0
        || (v10 == qword_1002AF878 ? (BOOL v13 = v12 == qword_1002AF880) : (BOOL v13 = 0),
            v13
         || (sub_100048720(v10, v12, qword_1002AF878, qword_1002AF880) & 1) != 0
         || (v10 == qword_1002AF888 ? (BOOL v14 = v12 == qword_1002AF890) : (BOOL v14 = 0),
             v14
          || (sub_100048720(v10, v12, qword_1002AF888, qword_1002AF890) & 1) != 0
          || (v10 == qword_1002AF898 ? (BOOL v15 = v12 == qword_1002AF8A0) : (BOOL v15 = 0), v15))))
      {
        sub_10001A420();
      }

      else
      {
        char v16 = sub_100048720(v10, v12, qword_1002AF898, qword_1002AF8A0);
        sub_10001A420();
        unint64_t v17 = v124;
        if ((v16 & 1) == 0) {
          unint64_t v17 = v8;
        }
        unint64_t v124 = v17;
        v9 &= v16;
      }

      unint64_t v18 = sub_1000AFB80(v8);
      unint64_t v19 = v18 >> 14;
      if ((_BYTE)v6)
      {
        unint64_t v20 = v124 >> 14;
        if (v6 != 1)
        {
          if ((v9 & 1) == 0)
          {
            char v9 = v123;
            uint64_t v46 = sub_1000AFC20(v8);
            uint64_t v47 = v46;
            uint64_t v49 = v48;
            if (v123 == 5)
            {
              if ((Character.isWhitespace.getter(v46) & 1) != 0
                || ((sub_1000AFDE0(), v13) ? (BOOL v53 = v49 == v52) : (BOOL v53 = 0),
                    v53
                 || (sub_1000AFBD0(v47, v50, v51, v52) & 1) != 0
                 || ((sub_1000AFDE0(), v13) ? (BOOL v57 = v49 == v56) : (BOOL v57 = 0),
                     v57
                  || (sub_1000AFBD0(v47, v54, v55, v56) & 1) != 0
                  || ((sub_1000AFDE0(), v13) ? (BOOL v61 = v49 == v60) : (BOOL v61 = 0), v61))))
              {
                sub_100023EF4();
              }

              else
              {
                char v62 = sub_1000AFBD0(v47, v58, v59, v60);
                sub_100023EF4();
                if ((v62 & 1) == 0)
                {
                  if (v20 < v7 >> 14)
                  {
                    __break(1u);
                    JUMPOUT(0x1000AF0E0LL);
                  }

                  sub_100019320();
                  uint64_t v63 = sub_1000AFB80(v124);
                  unint64_t v64 = sub_1000AFBDC(v63);
                  unint64_t v66 = v65;
                  uint64_t v68 = v67;
                  uint64_t v70 = v69;
                  swift_bridgeObjectRelease();
                  unint64_t v71 = v64 >> 16;
                  unint64_t v72 = v66 >> 16;
                  BOOL v73 = v68 == 26217 && v70 == 0xE200000000000000LL;
                  if (v73 && !v71 && v72 == 2 {
                    || (LOBYTE(v12sub_100019F7C(v0 + 2) = 0, (sub_1000AFC2C(26217LL, 0xE200000000000000LL) & 1) != 0))
                  }
                  {
                    swift_bridgeObjectRelease();
                    char v113 = 0;
                  }

                  else
                  {
                    BOOL v114 = v68 == 1718185061 && v70 == 0xE400000000000000LL;
                    if (v114 && !v71 && v72 == 4 {
                      || (LOBYTE(v12sub_100019F7C(v0 + 2) = 0, (sub_1000AFC2C(1718185061LL, 0xE400000000000000LL) & 1) != 0))
                    }
                    {
                      swift_bridgeObjectRelease();
                      char v113 = 1;
                    }

                    else
                    {
                      BOOL v115 = v68 == 1702063205 && v70 == 0xE400000000000000LL;
                      if (v115 && !v71 && v72 == 4 {
                        || (LOBYTE(v12sub_100019F7C(v0 + 2) = 0, (sub_1000AFC2C(1702063205LL, 0xE400000000000000LL) & 1) != 0))
                      }
                      {
                        swift_bridgeObjectRelease();
                        char v113 = 2;
                      }

                      else
                      {
                        BOOL v116 = v68 == 7499622 && v70 == 0xE300000000000000LL;
                        if (v116 && !v71 && v72 == 3 {
                          || (LOBYTE(v12sub_100019F7C(v0 + 2) = 0, (sub_1000AFC2C(7499622LL, 0xE300000000000000LL) & 1) != 0))
                        }
                        {
                          swift_bridgeObjectRelease();
                          char v113 = 3;
                        }

                        else
                        {
                          char v119 = sub_1000AF6A8(6581861LL, 0xE300000000000000LL, v64, v66, v68, v70);
                          sub_10001A420();
                          if ((v119 & 1) != 0) {
                            char v113 = 4;
                          }
                          else {
                            char v113 = 5;
                          }
                        }
                      }
                    }
                  }

                  uint64_t v120 = sub_1000AFB80(v8);
                  unint64_t v8 = v120;
                  unint64_t v129 = v120;
                  if (v113 != 5)
                  {
                    uint64_t v130 = v120;
                    char v123 = v113;
                    if (v113 == 2 || v113 == 4LL)
                    {
                      char v9 = 0;
                    }

                    else
                    {
                      unint64_t v124 = 0LL;
                      char v9 = 1;
                    }

                    uint64_t v6 = 2LL;
                    unint64_t v7 = v120;
                    goto LABEL_116;
                  }

                  char v9 = 0;
LABEL_107:
                  char v123 = 5;
LABEL_125:
                  uint64_t v6 = 2LL;
                  goto LABEL_116;
                }
              }

              sub_1000AFB80(v8);
              sub_1000AFD34();
              goto LABEL_107;
            }

            sub_1000AFDE0();
            if (v13 && v49 == v90)
            {
              sub_100023EF4();
              if (v125 <= v18 >> 14)
              {
LABEL_124:
                sub_1000AFB80(v8);
                sub_1000AFD34();
                goto LABEL_125;
              }
            }

            else
            {
              char v92 = sub_1000AFBD0(v47, v88, v89, v90);
              sub_100023EF4();
              if ((v92 & 1) == 0 || v19 >= v125) {
                goto LABEL_124;
              }
            }

            sub_1000AFC20(v18);
            sub_1000AFD14();
            if (v13 && v100 == v102)
            {
              sub_100023EF4();
LABEL_136:
              __asm { BR              X9 }
            }

            char v104 = sub_1000AFBD0(v99, v100, v101, v102);
            sub_100023EF4();
            if ((v104 & 1) != 0) {
              goto LABEL_136;
            }
            goto LABEL_124;
          }

          uint64_t v21 = sub_1000AFB80(v8);
          unint64_t v7 = v21;
          unint64_t v129 = v21;
          uint64_t v130 = v21;
          char v9 = 1;
          goto LABEL_37;
        }

        if ((v9 & 1) != 0)
        {
          uint64_t v21 = sub_1000AFB80(v8);
          unint64_t v7 = v21;
          unint64_t v129 = v21;
          uint64_t v130 = v21;
          uint64_t v6 = 1LL;
          goto LABEL_97;
        }

        sub_1000AFC20(v8);
        sub_1000AFD14();
        if (v13 && v29 == v31)
        {
          sub_100023EF4();
          if (v125 <= v18 >> 14)
          {
LABEL_87:
            sub_1000AFB80(v8);
            sub_1000AFD34();
            uint64_t v6 = 1LL;
            goto LABEL_116;
          }
        }

        else
        {
          uint64_t v6 = sub_1000AFBD0(v28, v29, v30, v31);
          sub_100023EF4();
          if ((v6 & 1) == 0 || v19 >= v125) {
            goto LABEL_87;
          }
        }

        sub_1000AFC20(v18);
        sub_1000AFD14();
        if (v13 && v75 == v77)
        {
          sub_100023EF4();
LABEL_109:
          if (v20 < v7 >> 14) {
            goto LABEL_179;
          }
          sub_100019320();
          uint64_t v93 = sub_1000AFB80(v124);
          sub_1000AFBDC(v93);
          uint64_t v94 = sub_1000AFBF0();
          sub_1000AFB8C(v94, v95, v96, v97);
          if ((sub_1000AFC64() & 1) == 0)
          {
            sub_1000AFBB8();
            uint64_t v6 = v117;
          }

          sub_1000AFC70();
          if (v87)
          {
            sub_1000AFBA0();
            uint64_t v6 = v118;
          }

          sub_1000AFC4C();
          *(_BYTE *)(v98 + 6sub_100019F7C(v0 + 4) = 64;
          uint64_t v131 = (void *)v6;
          swift_endAccess(v126);
          unint64_t v7 = sub_1000AFB80(v18);
          uint64_t v6 = 0LL;
          uint64_t v21 = sub_1000AFD44(v7);
          goto LABEL_115;
        }

        uint64_t v6 = sub_1000AFBD0(v74, v75, v76, v77);
        sub_100023EF4();
        if ((v6 & 1) != 0) {
          goto LABEL_109;
        }
        goto LABEL_87;
      }

      sub_1000AFC20(v8);
      sub_1000AFD14();
      if (v13 && v23 == v25)
      {
        sub_100023EF4();
        if (v125 > v18 >> 14) {
          goto LABEL_46;
        }
      }

      else
      {
        char v27 = sub_1000AFBD0(v22, v23, v24, v25);
        sub_100023EF4();
        if ((v27 & 1) != 0 && v19 < v125)
        {
LABEL_46:
          sub_1000AFC20(v18);
          sub_1000AFD14();
          BOOL v37 = v13 && v34 == v36;
          unint64_t v38 = v7 >> 14;
          if (v37)
          {
            sub_100023EF4();
LABEL_89:
            if (v5 != v7 >> 14)
            {
              if (v5 < v38)
              {
                __break(1u);
LABEL_179:
                __break(1u);
LABEL_180:
                __break(1u);
                JUMPOUT(0x1000AF0D0LL);
              }

              uint64_t v79 = sub_1000AFC40(v7, v8);
              sub_1000AFB8C(v79, v80, v81, v82);
              if ((sub_1000AFC64() & 1) == 0) {
                sub_1000AFBB8();
              }
              sub_1000AFC70();
              if (v87) {
                sub_1000AFBA0();
              }
              sub_1000AFC80(v83, v84, v85, v86, v122);
            }

            uint64_t v21 = sub_1000AFB80(v18);
            unint64_t v7 = v21;
            uint64_t v130 = v21;
            unint64_t v129 = v21;
            uint64_t v6 = 1LL;
            char v123 = 5;
            unint64_t v124 = 0LL;
LABEL_97:
            char v9 = 1;
LABEL_115:
            unint64_t v8 = v21;
            goto LABEL_116;
          }

          char v39 = sub_1000AFBD0(v33, v34, v35, v36);
          sub_100023EF4();
          if ((v39 & 1) != 0) {
            goto LABEL_89;
          }
          sub_1000AFC20(v18);
          sub_1000AFD14();
          if (v13 && v41 == v43)
          {
            sub_100023EF4();
LABEL_127:
            if (v5 != v7 >> 14)
            {
              if (v5 < v38) {
                goto LABEL_180;
              }
              uint64_t v105 = sub_1000AFC40(v7, v8);
              sub_1000AFB8C(v105, v106, v107, v108);
              if ((sub_1000AFC64() & 1) == 0) {
                sub_1000AFBB8();
              }
              sub_1000AFC70();
              if (v87) {
                sub_1000AFBA0();
              }
              sub_1000AFC80(v109, v110, v111, v112, v122);
            }

            unint64_t v7 = sub_1000AFB80(v18);
            uint64_t v21 = sub_1000AFD44(v7);
LABEL_37:
            uint64_t v6 = 2LL;
            goto LABEL_115;
          }

          char v45 = sub_1000AFBD0(v40, v41, v42, v43);
          sub_100023EF4();
          if ((v45 & 1) != 0) {
            goto LABEL_127;
          }
        }
      }

      unint64_t v8 = sub_1000AFB80(v8);
      uint64_t v6 = 0LL;
      unint64_t v129 = v8;
LABEL_116:
      unint64_t v5 = v8 >> 14;
    }

    while (v8 >> 14 < v125);
  }

  sub_1000AF0F4(&v129, (unint64_t *)&v130, (uint64_t *)&v131, a1, a2);
  sub_10002A718((uint64_t)&v131, (uint64_t)v126, 0LL);
  return v131;
}

unint64_t sub_1000AF0F4( unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = *a1;
  swift_beginAccess(a2, v23, 0LL, 0LL);
  unint64_t result = *a2;
  if (v10 >> 14 != *a2 >> 14)
  {
    if (v10 >> 14 < result >> 14)
    {
      __break(1u);
    }

    else
    {
      uint64_t v12 = String.subscript.getter(result, v10, a4, a5);
      uint64_t v14 = v13;
      uint64_t v16 = v15;
      uint64_t v18 = v17;
      swift_beginAccess(a3, v22, 33LL, 0LL);
      sub_10002E7F8();
      uint64_t v19 = *(void *)(*a3 + 16);
      sub_10002E9F0();
      uint64_t v20 = *a3;
      *(void *)(v20 + 1sub_100019F7C(v0 + 6) = v19 + 1;
      uint64_t v21 = v20 + 40 * v19;
      *(void *)(v21 + 3sub_100019F7C(v0 + 2) = v12;
      *(void *)(v21 + 4sub_10006F0B8(12LL, 0) = v14;
      *(void *)(v21 + 48) = v16;
      *(void *)(v21 + 5sub_100019F7C(v0 + 6) = v18;
      *(_BYTE *)(v21 + 6sub_100019F7C(v0 + 4) = 0;
      return swift_endAccess(v22);
    }
  }

  return result;
}

void *sub_1000AF1F0( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  int64_t v9 = *(void *)(a1 + 16);
  if (*a2 >= v9) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t v10 = a2;
  uint64_t v11 = a1;
  uint64_t v128 = a1 + 32;
  uint64_t v131 = _swiftEmptyArrayStorage;
  uint64_t v119 = a1;
  uint64_t v122 = a2;
  uint64_t v125 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v12 = v128 + 40 * v8;
    uint64_t v13 = *(void *)v12;
    uint64_t v14 = *(void *)(v12 + 8);
    uint64_t v16 = *(void *)(v12 + 16);
    uint64_t v15 = *(void *)(v12 + 24);
    unsigned int v17 = *(unsigned __int8 *)(v12 + 32);
    if (!(v17 >> 6))
    {
      uint64_t v36 = swift_bridgeObjectRetain();
      if ((sub_1000AFD5C(v36, v37, v38, v39, v40, v41, v42, v43, v116, v119, (uint64_t)v122, v125, v128, (uint64_t)v131) & 1) == 0)
      {
        sub_1000AFC08();
        uint64_t v133 = v103;
      }

      sub_1000AFDCC();
      if (v34)
      {
        sub_1000AFCB8();
        sub_1000AFCDC(v104, v105, v106, v107, v108, v109, v110, v111, v118, v121, v124, v127, v130, v104);
      }

      else
      {
        sub_1000AFCDC(v44, v45, v46, v47, v48, v49, v50, v51, v118, v121, v124, v127, v130, v133);
      }

      *(_BYTE *)(v52 + 7sub_100019F7C(v0 + 2) = 0;
      goto LABEL_53;
    }

    if (v17 >> 6 != 1) {
      break;
    }
    uint64_t v18 = swift_bridgeObjectRetain();
    if ((sub_1000AFD5C(v18, v19, v20, v21, v22, v23, v24, v25, v116, v119, (uint64_t)v122, v125, v128, (uint64_t)v131) & 1) == 0)
    {
      sub_1000AFC08();
      uint64_t v132 = v94;
    }

    sub_1000AFDCC();
    if (v34)
    {
      sub_1000AFCB8();
      sub_1000AFCDC(v95, v96, v97, v98, v99, v100, v101, v102, v117, v120, v123, v126, v129, v95);
    }

    else
    {
      sub_1000AFCDC(v26, v27, v28, v29, v30, v31, v32, v33, v117, v120, v123, v126, v129, v132);
    }

    *(_BYTE *)(v35 + 7sub_100019F7C(v0 + 2) = 1;
LABEL_53:
    uint64_t v8 = *v10 + 1;
    if (__OFADD__(*v10, 1LL)) {
      goto LABEL_65;
    }
    *unint64_t v10 = v8;
    if (v8 >= v9) {
      return v131;
    }
  }

  int v53 = v17 & 0x3F;
  if (v53 != 3)
  {
    if (v53 == 1) {
      return v131;
    }
LABEL_24:
    uint64_t v55 = _swiftEmptyArrayStorage;
LABEL_25:
    if (v8 >= v9) {
      goto LABEL_46;
    }
    if (v8 >= (unint64_t)v9)
    {
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
      JUMPOUT(0x1000AF698LL);
    }

    int v56 = v128;
    BOOL v57 = (void *)(v128 + 40 * v8);
    int v58 = *((char *)v57 + 32);
    if (v58 < 0) {
      int v56 = v58 & 0x3F;
    }
    while (1)
    {
      int v59 = v56;
      if ((v58 & 0xC0) != 0x80) {
        goto LABEL_46;
      }
      uint64_t v61 = *v57;
      uint64_t v60 = v57[1];
      int64_t v9 = v57[2];
      uint64_t v62 = v57[3];
      *unint64_t v10 = v8 + 1;
      uint64_t v63 = sub_1000AFCA4();
      sub_1000AF7BC(v63, v64, v65, v66, v67);
      uint64_t v68 = (void *)sub_1000AF1F0(v11, v10);
      BOOL v57 = v68;
      switch(v59)
      {
        case 0:
          uint64_t v69 = sub_1000AFCA4();
          unsigned __int8 v73 = 0;
          goto LABEL_35;
        case 1:
          uint64_t v69 = sub_1000AFCA4();
          unsigned __int8 v73 = 1;
LABEL_35:
          sub_1000AF7BC(v69, v70, v71, v72, v73);
          if ((swift_isUniquelyReferenced_nonNull_native(v55) & 1) == 0)
          {
            sub_1000AFCD0();
            uint64_t v55 = v76;
          }

          unint64_t v74 = v55[2];
          if (v74 >= v55[3] >> 1)
          {
            sub_1000AFCD0();
            uint64_t v55 = v77;
          }

          v55[2] = v74 + 1;
          uint64_t v75 = &v55[6 * v74];
          v75[4] = v61;
          v75[5] = v60;
          v75[6] = v9;
          v75[7] = v62;
          v75[8] = v57;
          *((_BYTE *)v75 + 7sub_100019F7C(v0 + 2) = 0;
          a1 = sub_1000AFCFC();
          uint64_t v11 = v119;
          unint64_t v10 = v122;
          int64_t v9 = v125;
          uint64_t v8 = *v122;
          goto LABEL_25;
        case 2:
          uint64_t v78 = sub_1000AFCA4();
          uint64_t v82 = sub_1000AF7BC(v78, v79, v80, v81, 2u);
          if ((sub_1000AFD5C( v82,  v83,  v84,  v85,  v86,  v87,  v88,  v89,  v116,  v119,  (uint64_t)v122,  v125,  v128,  (uint64_t)v131) & 1) == 0)
          {
            sub_1000AFC08();
            uint64_t v131 = v112;
          }

          unint64_t v90 = v131[2];
          if (v90 >= v131[3] >> 1)
          {
            sub_1000AFCB8();
            uint64_t v131 = v113;
          }

          v131[2] = v90 + 1;
          uint64_t v91 = &v131[6 * v90];
          v91[4] = v61;
          v91[5] = v60;
          v91[6] = v9;
          v91[7] = v62;
          v91[8] = v57;
          *((_BYTE *)v91 + 7sub_100019F7C(v0 + 2) = 3;
          a1 = sub_1000AFCFC();
          unint64_t v10 = v122;
          int64_t v9 = v125;
          goto LABEL_46;
        default:
          if (v68[2] | v68[1] | *v68 | v68[3])
          {
            a1 = sub_1000AFD20(1LL);
LABEL_46:
            if (v55[2])
            {
              a1 = sub_1000AFD5C( a1,  (uint64_t)a2,  a3,  a4,  a5,  a6,  a7,  a8,  v116,  v119,  (uint64_t)v122,  v125,  v128,  (uint64_t)v131);
              if ((a1 & 1) == 0)
              {
                sub_1000AFC08();
                uint64_t v131 = (void *)a1;
              }

              unint64_t v92 = v131[2];
              if (v92 >= v131[3] >> 1)
              {
                sub_1000AFCB8();
                uint64_t v131 = (void *)a1;
              }

              v131[2] = v92 + 1;
              uint64_t v93 = &v131[6 * v92];
              v93[4] = v55;
              *(_OWORD *)(v93 + 5) = 0u;
              *(_OWORD *)(v93 + 7) = 0u;
              *((_BYTE *)v93 + 7sub_100019F7C(v0 + 2) = 2;
            }

            else
            {
              a1 = swift_bridgeObjectRelease();
            }

            goto LABEL_53;
          }

          a1 = sub_1000AFD20(0LL);
          LOBYTE(v58) = *((_BYTE *)v57 + 32);
          break;
      }
    }
  }

  if (!(v16 | v14 | v13 | v15))
  {
    uint64_t v115 = 0LL;
    goto LABEL_62;
  }

  if (v13 != 1 || (v16 | v14 | v15) != 0) {
    goto LABEL_24;
  }
  uint64_t v115 = 1LL;
LABEL_62:
  sub_1000AF7BC(v115, 0LL, 0LL, 0LL, 3u);
  return v131;
}

uint64_t sub_1000AF6A8( uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v7 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  BOOL v8 = a1 == a5 && a2 == a6;
  if (v8 && !(a3 >> 16) && v7 == a4 >> 16) {
    return 1LL;
  }
  else {
    return _stringCompareInternal(_:_:_:_:expecting:)(a1, a2) & 1;
  }
}

uint64_t sub_1000AF70C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v5 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if ((a4 & 0x2000000000000000LL) != 0) {
    uint64_t v6 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v6 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (a1 == a3 && a2 == a4 && v5 == v6) {
    return 1LL;
  }
  else {
    return _stringCompareInternal(_:_:_:_:expecting:)(a1, a2) & 1;
  }
}

uint64_t sub_1000AF778(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  unsigned int v5 = a5 >> 6;
  if (v5 == 2) {
    return sub_1000AF7A4(result, a2, a3, a4, a5 & 0x3F);
  }
  if (v5 <= 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000AF7A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 <= 2u) {
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_1000AF7BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 <= 2u) {
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_1000AF7D4(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(_BYTE *)(a2 + 3sub_100019F7C(v0 + 2) = *((_BYTE *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 1sub_100019F7C(v0 + 6) = v3;
  return a2;
}

uint64_t sub_1000AF7EC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  unsigned int v5 = a5 >> 6;
  if (v5 == 2) {
    return sub_1000AF7BC(result, a2, a3, a4, a5 & 0x3F);
  }
  if (v5 <= 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t _s6ParsedOwxx(uint64_t a1, uint64_t a2)
{
  return sub_1000AF940(a1, a2, (uint64_t (*)(void, void, void, void, void))sub_1000AF778);
}

uint64_t _s6ParsedOwcp(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1000AF964(a1, a2, a3, (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000AF7EC);
}

uint64_t *_s6ParsedOwca(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1000AF9DC( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000AF7EC,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000AF778);
}

uint64_t *_s6ParsedOwta(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000AFA68(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000AF778);
}

uint64_t _s6ParsedOwet(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x3E && *(_BYTE *)(a1 + 33))
    {
      unsigned int v2 = *(_DWORD *)a1 + 61;
    }

    else
    {
      unsigned int v2 = (*(_BYTE *)(a1 + 32) & 0x3C | (*(unsigned __int8 *)(a1 + 32) >> 6)) ^ 0x3F;
      if (v2 >= 0x3D) {
        unsigned int v2 = -1;
      }
    }
  }

  else
  {
    unsigned int v2 = -1;
  }

  return v2 + 1;
}

uint64_t _s6ParsedOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3D)
  {
    *(void *)(result + 1sub_100019F7C(v0 + 6) = 0LL;
    *(void *)(result + 2sub_100019F7C(v0 + 4) = 0LL;
    *(_BYTE *)(result + 3sub_100019F7C(v0 + 2) = 0;
    *(void *)uint64_t result = a2 - 62;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x3E) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if (a3 >= 0x3E) {
      *(_BYTE *)(result + 33) = 0;
    }
    if (a2)
    {
      *(_OWORD *)uint64_t result = 0u;
      *(_OWORD *)(result + 1sub_100019F7C(v0 + 6) = 0u;
      *(_BYTE *)(result + 3sub_100019F7C(v0 + 2) = 4 * (((-a2 >> 2) & 0xF) - 16 * a2);
    }
  }

  return result;
}

uint64_t sub_1000AF8F4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32) >> 6;
}

uint64_t sub_1000AF900(uint64_t result)
{
  *(_BYTE *)(result + 32) &= 0x3Fu;
  return result;
}

uint64_t sub_1000AF910(uint64_t result, char a2)
{
  *(_BYTE *)(result + 3sub_100019F7C(v0 + 2) = *(_BYTE *)(result + 32) & 3 | (a2 << 6);
  return result;
}

ValueMetadata *_s6ParsedOMa()
{
  return &_s6ParsedON;
}

uint64_t _s6ParsedO7ControlOwxx(uint64_t a1, uint64_t a2)
{
  return sub_1000AF940(a1, a2, (uint64_t (*)(void, void, void, void, void))sub_1000AF7A4);
}

uint64_t sub_1000AF940( uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, void))
{
  return a3( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(unsigned __int8 *)(a1 + 32));
}

uint64_t _s6ParsedO7ControlOwcp(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1000AF964(a1, a2, a3, (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000AF7BC);
}

uint64_t sub_1000AF964( uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = *((unsigned __int8 *)a2 + 32);
  a4(*a2, v6, v7, v8, v9);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = v7;
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = v8;
  *(_BYTE *)(a1 + 3sub_100019F7C(v0 + 2) = v9;
  return a1;
}

uint64_t *_s6ParsedO7ControlOwca(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1000AF9DC( a1,  a2,  a3,  (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000AF7BC,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000AF7A4);
}

uint64_t *sub_1000AF9DC( uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  uint64_t v11 = *((unsigned __int8 *)a2 + 32);
  a4(*a2, v8, v9, v10, v11);
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  uint64_t v14 = a1[2];
  uint64_t v15 = a1[3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v9;
  a1[3] = v10;
  uint64_t v16 = *((unsigned __int8 *)a1 + 32);
  *((_BYTE *)a1 + 3sub_100019F7C(v0 + 2) = v11;
  a5(v12, v13, v14, v15, v16);
  return a1;
}

uint64_t *_s6ParsedO7ControlOwta(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000AFA68(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000AF7A4);
}

uint64_t *sub_1000AFA68( uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  char v6 = *(_BYTE *)(a2 + 32);
  uint64_t v7 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v10 = a1[3];
  __int128 v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v11;
  uint64_t v12 = *((unsigned __int8 *)a1 + 32);
  *((_BYTE *)a1 + 3sub_100019F7C(v0 + 2) = v6;
  a4(v7, v9, v8, v10, v12);
  return a1;
}

uint64_t _s6ParsedO7ControlOwet(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && *(_BYTE *)(a1 + 33))
    {
      int v2 = *(_DWORD *)a1 + 252;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
      if (v3 <= 3) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t _s6ParsedO7ControlOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 1sub_100019F7C(v0 + 6) = 0LL;
    *(void *)(result + 2sub_100019F7C(v0 + 4) = 0LL;
    *(_BYTE *)(result + 3sub_100019F7C(v0 + 2) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 33) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 3sub_100019F7C(v0 + 2) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000AFB3C(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_1000AFB54(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)uint64_t result = a2 - 3;
    *(void *)(result + 8) = 0LL;
    LOBYTE(asub_100019F7C(v0 + 2) = 3;
    *(void *)(result + 1sub_100019F7C(v0 + 6) = 0LL;
    *(void *)(result + 2sub_100019F7C(v0 + 4) = 0LL;
  }

  *(_BYTE *)(result + 3sub_100019F7C(v0 + 2) = a2;
  return result;
}

ValueMetadata *_s6ParsedO7ControlOMa()
{
  return &_s6ParsedO7ControlON;
}

uint64_t sub_1000AFB80(uint64_t a1)
{
  return String.index(after:)(a1, v2, v1);
}

uint64_t sub_1000AFB8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  return swift_beginAccess(v4 - 88, va, 33LL, 0LL);
}

void sub_1000AFBA0()
{
}

void sub_1000AFBB8()
{
}

uint64_t sub_1000AFBD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, v4, a3, a4, 0LL);
}

uint64_t sub_1000AFBDC(uint64_t a1)
{
  return String.subscript.getter(v3, a1, v2, v1);
}

uint64_t sub_1000AFBF0()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_1000AFC08()
{
}

uint64_t sub_1000AFC20(uint64_t a1)
{
  return String.subscript.getter(a1, v2, v1);
}

uint64_t sub_1000AFC2C(uint64_t a1, uint64_t a2)
{
  return _stringCompareInternal(_:_:_:_:expecting:)(a1, a2);
}

uint64_t sub_1000AFC40(uint64_t a1, uint64_t a2)
{
  return String.subscript.getter(a1, a2, v3, v2);
}

void sub_1000AFC4C()
{
  *(void *)(v5 + 1sub_100019F7C(v0 + 6) = v6;
  uint64_t v7 = (void *)(v5 + 40 * v0);
  v7[4] = v1;
  v7[5] = v2;
  v7[6] = v3;
  v7[7] = v4;
}

uint64_t sub_1000AFC64()
{
  return swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 - 88));
}

  ;
}

uint64_t sub_1000AFC80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  *(void *)(v9 + 1sub_100019F7C(v0 + 6) = v10;
  uint64_t v12 = v9 + 40 * v4;
  *(void *)(v12 + 3sub_100019F7C(v0 + 2) = v5;
  *(void *)(v12 + 4sub_10006F0B8(12LL, 0) = v6;
  *(void *)(v12 + 48) = v7;
  *(void *)(v12 + 5sub_100019F7C(v0 + 6) = v8;
  *(_BYTE *)(v12 + 6sub_100019F7C(v0 + 4) = 0;
  *(void *)(v11 - sub_100081CEC(v0 + 88) = v9;
  return swift_endAccess(va);
}

uint64_t sub_1000AFCA4()
{
  return v0;
}

void sub_1000AFCB8()
{
}

void sub_1000AFCC4()
{
}

void sub_1000AFCD0()
{
}

void sub_1000AFCDC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(void *)(a14 + 1sub_100019F7C(v0 + 6) = v16;
  uint64_t v20 = (void *)(a14 + 48 * v14);
  v20[4] = v17;
  v20[5] = v18;
  v20[6] = v19;
  v20[7] = v15;
  v20[8] = 0LL;
}

uint64_t sub_1000AFCFC()
{
  return sub_1000AF778(v4, v0, v3, v2, v1);
}

  ;
}

uint64_t sub_1000AFD20(uint64_t a1)
{
  return sub_1000AF778(a1, 0LL, 0LL, 0LL, v1);
}

  ;
}

uint64_t sub_1000AFD44(uint64_t result)
{
  *(void *)(v1 - 9sub_100019F7C(v0 + 6) = result;
  return result;
}

uint64_t sub_1000AFD5C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_isUniquelyReferenced_nonNull_native(a14);
}

uint64_t sub_1000AFD64()
{
  return _stringCompareInternal(_:_:_:_:expecting:)(v0, v1);
}

  ;
}

uint64_t sub_1000AFD8C(uint64_t a1, uint64_t a2)
{
  return sub_1000AF7D4(v2, a2);
}

uint64_t sub_1000AFDA4()
{
  return sub_1000AF7D4(v0, v1 - 88);
}

  ;
}

  ;
}

uint64_t sub_1000AFDEC()
{
  return swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 - 88));
}

uint64_t sub_1000AFDF8(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100271EB8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0LL;
  }
}

_UNKNOWN **sub_1000AFE4C()
{
  return &off_100271F08;
}

uint64_t sub_1000AFE58(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x73656963696C6F70LL;
  }
  else {
    return 1634497893LL;
  }
}

void sub_1000AFE88(char *a1, unsigned __int8 *a2)
{
}

void sub_1000AFE94()
{
}

uint64_t sub_1000AFE9C(uint64_t a1)
{
  return sub_1000B200C(a1, *v1);
}

void sub_1000AFEA4(uint64_t a1)
{
}

uint64_t sub_1000AFEAC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000AFDF8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000AFED8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000AFE58(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000AFF00()
{
  return sub_1000AFE58(*v0);
}

uint64_t sub_1000AFF08@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000AFE48(a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_1000AFF2C@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1000AFE4C();
  *a1 = result;
  return result;
}

uint64_t sub_1000AFF50(uint64_t a1)
{
  unint64_t v2 = sub_1000B09B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000AFF78(uint64_t a1)
{
  unint64_t v2 = sub_1000B09B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000AFFA0(void *a1)
{
}

void sub_1000AFFE4(void *a1)
{
  Swift::Int v3 = v1;
  uint64_t v5 = *v1;
  uint64_t v9 = sub_1000175B0(&qword_1002AFA50);
  __chkstk_darwin(v9);
  sub_100092B28();
  sub_100019F58(a1, a1[3]);
  unint64_t v6 = sub_1000B09B4();
  sub_1000B0EC4( (uint64_t)&type metadata for OctaneAppPolicies.CodingKeys,  (uint64_t)&type metadata for OctaneAppPolicies.CodingKeys,  v6);
  if (v2)
  {
    swift_deallocPartialClassInstance(v1, v5, 40LL, 7LL);
  }

  else
  {
    char v12 = 0;
    v1[2] = KeyedDecodingContainer.decode(_:forKey:)(&v12, v9);
    v1[3] = v7;
    uint64_t v8 = sub_1000175B0(&qword_1002AFA18);
    char v11 = 1;
    sub_1000B0A2C( &qword_1002AFA58,  &qword_1002AFA60,  (uint64_t)&unk_1001FC090,  (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v8, &v11, v9, v8);
    sub_1000B0EA8();
    void v3[4] = v10;
  }

  sub_100019F7C(a1);
  sub_10001DAB8();
}

void sub_1000B0160(void *a1)
{
  uint64_t v4 = v2;
  sub_1000175B0(&qword_1002AFA08);
  sub_1000487F0();
  __chkstk_darwin(v6);
  sub_100019F58(a1, a1[3]);
  unint64_t v7 = sub_1000B09B4();
  sub_100048764((uint64_t)&type metadata for OctaneAppPolicies.CodingKeys, v8, v7);
  uint64_t v9 = v4[2];
  uint64_t v10 = v4[3];
  char v15 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v9, v10, &v15, v1);
  if (!v3)
  {
    uint64_t v14 = v4[4];
    char v13 = 1;
    uint64_t v11 = sub_1000175B0(&qword_1002AFA18);
    uint64_t v12 = sub_1000B0A2C( &qword_1002AFA20,  &qword_1002AFA28,  (uint64_t)"18\b",  (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v14, &v13, v1, v11, v12);
  }

  sub_1000227A0();
  sub_1000226D8();
}

uint64_t sub_1000B0280()
{
  return v0;
}

uint64_t sub_1000B02A4()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for OctaneAppPolicies()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService17OctaneAppPolicies);
}

unint64_t sub_1000B02E4(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100271F30, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

_UNKNOWN **sub_1000B0330()
{
  return &off_100271F98;
}

uint64_t sub_1000B033C(char a1)
{
  if (!a1) {
    return 0x656C61636F6CLL;
  }
  if (a1 == 1) {
    return 0x52557963696C6F70LL;
  }
  return 0x65547963696C6F70LL;
}

void sub_1000B0398(void *a1@<X0>, void *a2@<X8>)
{
  if (!v2) {
    *a2 = v4;
  }
}

void sub_1000B03C0(void *a1)
{
}

void sub_1000B03E0(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_1000B03EC()
{
}

uint64_t sub_1000B03F4(uint64_t a1)
{
  return sub_1000B1FA4(a1, *v1);
}

void sub_1000B03FC(uint64_t a1)
{
}

unint64_t sub_1000B0404@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000B02E4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000B0430@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000B033C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000B0458()
{
  return sub_1000B033C(*v0);
}

uint64_t sub_1000B0460@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000B032C(a1);
  *a2 = result;
  return result;
}

_UNKNOWN **sub_1000B0484@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1000B0330();
  *a1 = result;
  return result;
}

uint64_t sub_1000B04A8(uint64_t a1)
{
  unint64_t v2 = sub_1000B09F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B04D0(uint64_t a1)
{
  unint64_t v2 = sub_1000B09F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000B04F8(void *a1)
{
}

void sub_1000B053C(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = *v1;
  uint64_t v6 = sub_1000175B0(&qword_1002AFA40);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100092B28();
  sub_100019F58(a1, a1[3]);
  unint64_t v8 = sub_1000B09F0();
  sub_1000B0EC4( (uint64_t)&type metadata for OctaneAppPolicies.Policy.CodingKeys,  (uint64_t)&type metadata for OctaneAppPolicies.Policy.CodingKeys,  v8);
  if (!v26)
  {
    uint64_t v27 = v7;
    LOBYTE(v28) = 0;
    uint64_t v9 = sub_1000B0EB8((uint64_t)&v28, v6);
    uint64_t v11 = v10;
    type metadata accessor for OctaneLocale();
    uint64_t v12 = sub_1000CB708(v9, (uint64_t)v11);
    if (v12)
    {
      uint64_t v13 = v12;
      swift_bridgeObjectRelease();
      v3[2] = v13;
      LOBYTE(v28) = 1;
      swift_retain();
      _OWORD v3[3] = sub_1000B0EB8((uint64_t)&v28, v6);
      void v3[4] = v21;
      LOBYTE(v28) = 2;
      uint64_t v22 = KeyedDecodingContainer.decode(_:forKey:)(&v28, v6);
      uint64_t v23 = v13;
      uint64_t v25 = v24;
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v23, v6);
      sub_10009B770();
      v3[5] = v22;
      v3[6] = v25;
      goto LABEL_4;
    }

    char v30 = 0;
    unint64_t v28 = 0LL;
    unint64_t v29 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(42LL);
    swift_bridgeObjectRelease();
    unint64_t v28 = 0xD000000000000014LL;
    unint64_t v29 = 0x800000010021B900LL;
    v14._countAndFlagsBits = v9;
    v14._object = v11;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._object = (void *)0x800000010021B920LL;
    v15._countAndFlagsBits = 0xD000000000000014LL;
    String.append(_:)(v15);
    unint64_t v16 = v28;
    unint64_t v17 = v29;
    uint64_t v18 = type metadata accessor for DecodingError(0LL);
    swift_allocError(v18, &protocol witness table for DecodingError, 0LL, 0LL);
    uint64_t v19 = sub_1000B0D0C(&qword_1002AFA48, &qword_1002AFA40);
    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)(&v30, v2, v16, v17, v6, v19);
    uint64_t v20 = swift_bridgeObjectRelease();
    swift_willThrow(v20);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v2, v6);
  }

  swift_deallocPartialClassInstance(v3, v5, 56LL, 7LL);
LABEL_4:
  sub_100019F7C(a1);
  sub_10001DAB8();
}

void sub_1000B07F4(void *a1)
{
  uint64_t v2 = v1;
  sub_1000175B0(&qword_1002AFA30);
  sub_1000487F0();
  __chkstk_darwin(v4);
  sub_100019F58(a1, a1[3]);
  unint64_t v5 = sub_1000B09F0();
  sub_100048764((uint64_t)&type metadata for OctaneAppPolicies.Policy.CodingKeys, v6, v5);
  uint64_t v7 = v2[2];
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = *(void *)(v7 + 24);
  char v16 = 0;
  swift_bridgeObjectRetain();
  sub_1000B0E84(v8, v9, (uint64_t)&v16);
  if (v8)
  {
    sub_1000227A0();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = v2[3];
    uint64_t v11 = v2[4];
    char v15 = 1;
    sub_1000B0E84(v10, v11, (uint64_t)&v15);
    uint64_t v12 = v2[5];
    uint64_t v13 = v2[6];
    char v14 = 2;
    sub_1000B0E84(v12, v13, (uint64_t)&v14);
    sub_1000227A0();
  }

  sub_1000226D8();
}

void *sub_1000B0900()
{
  return v0;
}

uint64_t sub_1000B092C()
{
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t type metadata accessor for OctaneAppPolicies.Policy()
{
  return objc_opt_self(&OBJC_CLASS____TtCC25ASOctaneSupportXPCService17OctaneAppPolicies6Policy);
}

void sub_1000B096C(void *a1@<X0>, void *a2@<X8>)
{
  if (!v2) {
    *a2 = v4;
  }
}

void sub_1000B0994(void *a1)
{
}

unint64_t sub_1000B09B4()
{
  unint64_t result = qword_1002AFA10;
  if (!qword_1002AFA10)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FC3B4, &type metadata for OctaneAppPolicies.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFA10);
  }

  return result;
}

unint64_t sub_1000B09F0()
{
  unint64_t result = qword_1002AFA38;
  if (!qword_1002AFA38)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FC364, &type metadata for OctaneAppPolicies.Policy.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFA38);
  }

  return result;
}

uint64_t sub_1000B0A2C(unint64_t *a1, unint64_t *a2, uint64_t a3, const char *a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v8 = sub_100018EC0(&qword_1002AFA18);
    uint64_t v9 = sub_1000B0AA8(a2);
    uint64_t result = swift_getWitnessTable(a4, v8, &v9);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1000B0AA8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v3 = type metadata accessor for OctaneAppPolicies.Policy();
    uint64_t result = sub_10001951C(v3);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for OctaneAppPolicies.Policy.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(vsub_100019F7C(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100019F7C(v0 + 4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000B0B28 + 4 * byte_1001FBFE5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000B0B5C + 4 * byte_1001FBFE0[v4]))();
}

uint64_t sub_1000B0B5C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B0B64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000B0B6CLL);
  }
  return result;
}

uint64_t sub_1000B0B78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000B0B80LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000B0B84(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B0B8C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OctaneAppPolicies.Policy.CodingKeys()
{
  return &type metadata for OctaneAppPolicies.Policy.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for OctaneAppPolicies.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(vsub_100019F7C(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100019F7C(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000B0BF4 + 4 * byte_1001FBFEF[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000B0C28 + 4 * byte_1001FBFEA[v4]))();
}

uint64_t sub_1000B0C28(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B0C30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000B0C38LL);
  }
  return result;
}

uint64_t sub_1000B0C44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000B0C4CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000B0C50(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B0C58(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OctaneAppPolicies.CodingKeys()
{
  return &type metadata for OctaneAppPolicies.CodingKeys;
}

uint64_t sub_1000B0C74()
{
  return sub_1000B0D0C(&qword_1002AFA68, &qword_1002AFA70);
}

unint64_t sub_1000B0CA4()
{
  unint64_t result = qword_1002AFA78;
  if (!qword_1002AFA78)
  {
    unint64_t result = swift_getWitnessTable("-7\b", &type metadata for OctaneAppPolicies.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFA78);
  }

  return result;
}

uint64_t sub_1000B0CE0()
{
  return sub_1000B0D0C(&qword_1002AFA80, &qword_1002AFA88);
}

uint64_t sub_1000B0D0C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_100018EC0(a2);
    uint64_t result = sub_10001951C(v4);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1000B0D48()
{
  unint64_t result = qword_1002AFA90;
  if (!qword_1002AFA90)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FC33C, &type metadata for OctaneAppPolicies.Policy.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFA90);
  }

  return result;
}

unint64_t sub_1000B0D88()
{
  unint64_t result = qword_1002AFA98;
  if (!qword_1002AFA98)
  {
    unint64_t result = swift_getWitnessTable("}6\b", &type metadata for OctaneAppPolicies.Policy.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFA98);
  }

  return result;
}

unint64_t sub_1000B0DC8()
{
  unint64_t result = qword_1002AFAA0;
  if (!qword_1002AFAA0)
  {
    unint64_t result = swift_getWitnessTable("e6\b", &type metadata for OctaneAppPolicies.Policy.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFAA0);
  }

  return result;
}

unint64_t sub_1000B0E08()
{
  unint64_t result = qword_1002AFAA8;
  if (!qword_1002AFAA8)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FC114, &type metadata for OctaneAppPolicies.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFAA8);
  }

  return result;
}

unint64_t sub_1000B0E48()
{
  unint64_t result = qword_1002AFAB0;
  if (!qword_1002AFAB0)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FC13C, &type metadata for OctaneAppPolicies.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFAB0);
  }

  return result;
}

uint64_t sub_1000B0E84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_1000B0E94()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 104) + 8LL))(v0, v1);
}

uint64_t sub_1000B0EA8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000B0EB8(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

uint64_t sub_1000B0EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a2, a3, v3, v4);
}

void sub_1000B0ED0(int a1, Swift::UInt a2)
{
}

uint64_t sub_1000B0EE8(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x2E746E756F636361LL;
  }
  else {
    uint64_t v3 = 0xD00000000000001BLL;
  }
  if (v2) {
    uint64_t v4 = 0x80000001002178F0LL;
  }
  else {
    uint64_t v4 = 0xEF676E696C6C6962LL;
  }
  sub_1000BB99C(a1, v3);
  return sub_1000BB994(v4);
}

void sub_1000B0F48(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1000B0F90(uint64_t a1)
{
  return sub_1000BB994(0xEF656C6261657261LL);
}

void sub_1000B1058(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1000B108C()
{
  return sub_1000BB994(v0);
}

uint64_t sub_1000B10D0(uint64_t a1, uint64_t a2)
{
  return sub_1000B28E0(a1, a2, (uint64_t (*)(uint64_t))sub_100073D70);
}

uint64_t sub_1000B10DC(uint64_t a1)
{
  return sub_1000BBF08(a1, 0x676F6C616964LL);
}

uint64_t sub_1000B10EC(uint64_t a1, uint64_t a2)
{
  return sub_1000B28E0(a1, a2, (uint64_t (*)(uint64_t))sub_10016F38C);
}

void sub_1000B10F8(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1000B1138(uint64_t a1)
{
  return sub_1000BB994(0xE700000000000000LL);
}

uint64_t sub_1000B11E8(uint64_t a1)
{
  return sub_1000BBABC(a1, 1852399981LL);
}

uint64_t sub_1000B11F4(uint64_t a1, uint64_t a2)
{
  return sub_1000B28E0(a1, a2, (uint64_t (*)(uint64_t))sub_10011B150);
}

uint64_t sub_1000B1200(uint64_t a1)
{
  return String.hash(into:)(a1, 0x65646F6358LL, 0xE500000000000000LL);
}

uint64_t sub_1000B1214(uint64_t a1)
{
  return sub_1000BBABC(a1, 1954047348LL);
}

uint64_t sub_1000B1224(uint64_t a1, uint64_t a2)
{
  return sub_1000B28E0(a1, a2, (uint64_t (*)(uint64_t))sub_10007E044);
}

uint64_t sub_1000B1230(uint64_t a1, char a2)
{
  if (a2)
  {
    sub_1000BBEB8();
    if (v7) {
      uint64_t v2 = v5;
    }
    else {
      uint64_t v2 = v6;
    }
  }

  else
  {
    sub_1000BBC70();
  }

  sub_1000BB99C(v3, v4);
  return sub_1000BB994(v2);
}

void sub_1000B1288()
{
  __asm { BR              X10 }

uint64_t sub_1000B12B0()
{
  return sub_1000BB994(v0);
}

void sub_1000B1328(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1000B1374(uint64_t a1)
{
  return sub_1000BB994(0xE400000000000000LL);
}

void sub_1000B13BC()
{
  __asm { BR              X10 }

uint64_t sub_1000B13E4()
{
  return sub_1000BB994(v0);
}

uint64_t sub_1000B142C(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x6C65636E6163LL;
  }
  else {
    uint64_t v3 = 7041889LL;
  }
  if (v2) {
    uint64_t v4 = 0xE300000000000000LL;
  }
  else {
    uint64_t v4 = 0xE600000000000000LL;
  }
  sub_1000BB99C(a1, v3);
  return sub_1000BB994(v4);
}

void sub_1000B1470(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1000B14AC(uint64_t a1)
{
  return sub_1000BB994(v1);
}

uint64_t sub_1000B151C(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x736E6F6974706FLL;
  }
  else {
    uint64_t v3 = 1701869940LL;
  }
  if (v2) {
    uint64_t v4 = 0xE400000000000000LL;
  }
  else {
    uint64_t v4 = 0xE700000000000000LL;
  }
  sub_1000BB99C(a1, v3);
  return sub_1000BB994(v4);
}

uint64_t sub_1000B1564(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0xD000000000000010LL;
  }
  else {
    uint64_t v3 = 1701667182LL;
  }
  if (v2) {
    uint64_t v4 = 0xE400000000000000LL;
  }
  else {
    uint64_t v4 = 0x8000000100218370LL;
  }
  sub_1000BB99C(a1, v3);
  return sub_1000BB994(v4);
}

void sub_1000B15B0(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1000B15EC(uint64_t a1)
{
  return sub_1000BB994(0xED00006570795463LL);
}

void sub_1000B169C(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1000B16E0(uint64_t a1)
{
  return sub_1000BB994(0xEA00000000006469LL);
}

uint64_t sub_1000B1740(uint64_t a1, uint64_t a2)
{
  return sub_1000B28E0(a1, a2, (uint64_t (*)(uint64_t))sub_100052B78);
}

void sub_1000B174C(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1000B1784(uint64_t a1)
{
  return sub_1000BB994(0xE400000000000000LL);
}

uint64_t sub_1000B17C0(uint64_t a1)
{
  return sub_1000BBABC(a1, 1936684660LL);
}

uint64_t sub_1000B17CC(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0xD000000000000012LL;
  }
  else {
    uint64_t v3 = 1634497893LL;
  }
  if (v2) {
    uint64_t v4 = 0xE400000000000000LL;
  }
  else {
    uint64_t v4 = 0x80000001002170C0LL;
  }
  sub_1000BB99C(a1, v3);
  return sub_1000BB994(v4);
}

uint64_t sub_1000B1818(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    uint64_t v2 = 3157554LL;
  }
  else {
    uint64_t v2 = 3157553LL;
  }
  String.hash(into:)(a1, v2, 0xE300000000000000LL);
  return swift_bridgeObjectRelease(0xE300000000000000LL);
}

uint64_t sub_1000B1844(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 1634497893LL;
  }
  else {
    uint64_t v3 = 0xD000000000000010LL;
  }
  if (v2) {
    uint64_t v4 = 0x8000000100217090LL;
  }
  else {
    uint64_t v4 = 0xE400000000000000LL;
  }
  sub_1000BB99C(a1, v3);
  return sub_1000BB994(v4);
}

uint64_t sub_1000B1890(uint64_t a1, char a2)
{
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v2 = 0x746E6572727563LL;
    }
    else {
      uint64_t v2 = 0x64656C62616E65LL;
    }
    uint64_t v3 = 0xE700000000000000LL;
  }

  else
  {
    uint64_t v3 = 0xE400000000000000LL;
    uint64_t v2 = 1701667182LL;
  }

  sub_1000BB99C(a1, v2);
  return sub_1000BB994(v3);
}

uint64_t sub_1000B18F8(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x7865646E69LL;
  }
  else {
    uint64_t v3 = 1701869940LL;
  }
  if (v2) {
    uint64_t v4 = 0xE400000000000000LL;
  }
  else {
    uint64_t v4 = 0xE500000000000000LL;
  }
  sub_1000BB99C(a1, v3);
  return sub_1000BB994(v4);
}

void sub_1000B193C(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1000B197C()
{
  return sub_1000BB994(v0);
}

uint64_t sub_1000B1A30(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x616B636174537369LL;
  }
  else {
    uint64_t v3 = 0x6C69626967696C65LL;
  }
  if (v2) {
    uint64_t v4 = 0xEB00000000797469LL;
  }
  else {
    uint64_t v4 = 0xEB00000000656C62LL;
  }
  sub_1000BB99C(a1, v3);
  return sub_1000BB994(v4);
}

void sub_1000B1A90(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1000B1AC8(uint64_t a1)
{
  return sub_1000BB994(v1);
}

uint64_t sub_1000B1B1C(uint64_t a1, unsigned __int8 a2)
{
  int v2 = a2;
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v3 = 0x676E697473697865LL;
    }
    else {
      uint64_t v3 = 0x64657269707865LL;
    }
    if (v2 == 1) {
      uint64_t v4 = 0xE800000000000000LL;
    }
    else {
      uint64_t v4 = 0xE700000000000000LL;
    }
  }

  else
  {
    uint64_t v4 = 0xE300000000000000LL;
    uint64_t v3 = 7824750LL;
  }

  sub_1000BB99C(a1, v3);
  return sub_1000BB994(v4);
}

uint64_t sub_1000B1B84(uint64_t a1)
{
  return sub_1000BBF18(a1, 0x636E657265666572LL, 0x656D614E65LL);
}

uint64_t sub_1000B1BA4(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x626967696C457369LL;
  }
  else {
    uint64_t v3 = 0x4449726566666FLL;
  }
  if (v2) {
    uint64_t v4 = 0xE700000000000000LL;
  }
  else {
    uint64_t v4 = 0xEA0000000000656CLL;
  }
  sub_1000BB99C(a1, v3);
  return sub_1000BB994(v4);
}

void sub_1000B1BF8()
{
  __asm { BR              X10 }

uint64_t sub_1000B1C28(uint64_t a1)
{
  return sub_1000BB994(0xEA00000000007372LL);
}

uint64_t sub_1000B1CC8(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x636E657265666572LL;
  }
  else {
    uint64_t v3 = 0x4449726566666FLL;
  }
  if (v2) {
    uint64_t v4 = 0xE700000000000000LL;
  }
  else {
    uint64_t v4 = 0xED0000656D614E65LL;
  }
  sub_1000BB99C(a1, v3);
  return sub_1000BB994(v4);
}

void sub_1000B1D24()
{
  __asm { BR              X10 }

uint64_t sub_1000B1D54()
{
  return sub_1000BB994(v0);
}

uint64_t sub_1000B1E00(uint64_t a1, uint64_t a2)
{
  return sub_1000B28E0(a1, a2, (uint64_t (*)(uint64_t))sub_1000C367C);
}

uint64_t sub_1000B1E0C(uint64_t a1)
{
  return String.hash(into:)(a1, 0x737070612D6E69LL, 0xE700000000000000LL);
}

uint64_t sub_1000B1E24(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x4C4157454E4552LL;
  }
  else {
    uint64_t v3 = 0x4553414843525550LL;
  }
  if (v2) {
    uint64_t v4 = 0xE800000000000000LL;
  }
  else {
    uint64_t v4 = 0xE700000000000000LL;
  }
  sub_1000BB99C(a1, v3);
  return sub_1000BB994(v4);
}

uint64_t sub_1000B1E74(uint64_t a1, unsigned __int8 a2)
{
  int v3 = a2;
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v4 = 0x595F53415F594150LL;
    }
    else {
      uint64_t v4 = 0x465F50555F594150LL;
    }
    if (v3 == 1) {
      uint64_t v2 = 0xED00004F475F554FLL;
    }
    else {
      uint64_t v2 = 0xEC000000544E4F52LL;
    }
  }

  else
  {
    sub_1000BBED4();
  }

  sub_1000BB99C(a1, v4);
  return sub_1000BB994(v2);
}

uint64_t sub_1000B1EE8(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x535F594C494D4146LL;
  }
  else {
    uint64_t v3 = 0x4553414843525550LL;
  }
  if (v2) {
    uint64_t v4 = 0xE900000000000044LL;
  }
  else {
    uint64_t v4 = 0xED00004445524148LL;
  }
  sub_1000BB99C(a1, v3);
  return sub_1000BB994(v4);
}

uint64_t sub_1000B1F48(uint64_t a1, uint64_t a2)
{
  return sub_1000B28E0(a1, a2, (uint64_t (*)(uint64_t))sub_100120D9C);
}

uint64_t sub_1000B1F54(uint64_t a1, uint64_t a2)
{
  return sub_1000B28E0(a1, a2, (uint64_t (*)(uint64_t))sub_10011D3B4);
}

uint64_t sub_1000B1F60(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x4C4452445453LL;
  }
  else {
    uint64_t v3 = 1363432531LL;
  }
  if (v2) {
    uint64_t v4 = 0xE400000000000000LL;
  }
  else {
    uint64_t v4 = 0xE600000000000000LL;
  }
  sub_1000BB99C(a1, v3);
  return sub_1000BB994(v4);
}

uint64_t sub_1000B1FA4(uint64_t a1, unsigned __int8 a2)
{
  int v3 = a2;
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v4 = 0x52557963696C6F70LL;
    }
    else {
      uint64_t v4 = 0x65547963696C6F70LL;
    }
    if (v3 == 1) {
      uint64_t v2 = 0xE90000000000004CLL;
    }
    else {
      uint64_t v2 = 0xEA00000000007478LL;
    }
  }

  else
  {
    sub_1000BC158();
  }

  sub_1000BB99C(a1, v4);
  return sub_1000BB994(v2);
}

uint64_t sub_1000B200C(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x73656963696C6F70LL;
  }
  else {
    uint64_t v3 = 1634497893LL;
  }
  if (v2) {
    uint64_t v4 = 0xE400000000000000LL;
  }
  else {
    uint64_t v4 = 0xE800000000000000LL;
  }
  sub_1000BB99C(a1, v3);
  return sub_1000BB994(v4);
}

uint64_t sub_1000B2054(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x6269726373627553LL;
  }
  else {
    uint64_t v3 = 7954768LL;
  }
  if (v2) {
    uint64_t v4 = 0xE300000000000000LL;
  }
  else {
    uint64_t v4 = 0xE900000000000065LL;
  }
  sub_1000BB99C(a1, v3);
  return sub_1000BB994(v4);
}

void sub_1000B20A0()
{
}

uint64_t sub_1000B20C0(uint64_t a1, uint64_t a2)
{
  return sub_1000B28E0(a1, a2, (uint64_t (*)(uint64_t))sub_10017FFAC);
}

void sub_1000B20CC(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1000B2110()
{
  return sub_1000BB994(v0);
}

uint64_t sub_1000B2158(uint64_t a1, uint64_t a2)
{
  return sub_1000B28E0(a1, a2, (uint64_t (*)(uint64_t))sub_10016B7C0);
}

void sub_1000B2164(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1000B21A0()
{
  return sub_1000BB994(v0);
}

uint64_t sub_1000B21E4()
{
  BOOL v4 = (v3 & 1) == 0;
  if ((v3 & 1) != 0) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v1;
  }
  if (v4) {
    uint64_t v6 = 0x80000001002171C0LL;
  }
  else {
    uint64_t v6 = 0x80000001002171E0LL;
  }
  sub_1000BB99C(v0, v5);
  return sub_1000BB994(v6);
}

void sub_1000B2230()
{
  __asm { BR              X10 }

uint64_t sub_1000B2258()
{
  return sub_1000BB994(v0);
}

void sub_1000B2288()
{
}

void sub_1000B22A8()
{
}

uint64_t sub_1000B22C8(uint64_t a1, uint64_t a2)
{
  return sub_1000B28E0(a1, a2, (uint64_t (*)(uint64_t))sub_1001A7FEC);
}

uint64_t sub_1000B22D4(uint64_t a1)
{
  return sub_1000BBABC(a1, 1766222167LL);
}

uint64_t sub_1000B22E0(uint64_t a1, uint64_t a2)
{
  return sub_1000B28E0(a1, a2, (uint64_t (*)(uint64_t))sub_10013E490);
}

void sub_1000B22EC()
{
  __asm { BR              X10 }

uint64_t sub_1000B2314()
{
  return sub_1000BB994(v0);
}

void sub_1000B2340(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1000B2384(uint64_t a1)
{
  return sub_1000BB994(0xED0000656C62616DLL);
}

uint64_t sub_1000B23E0(uint64_t a1)
{
  return String.hash(into:)(a1, 0x6375537070416E69LL, 0xEC00000073736563LL);
}

uint64_t sub_1000B2400(uint64_t a1, unsigned __int8 a2)
{
  int v3 = a2;
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v4 = 0x6C65636E6143LL;
    }
    else {
      uint64_t v4 = 27503LL;
    }
    if (v3 == 1) {
      uint64_t v2 = 0xE600000000000000LL;
    }
    else {
      uint64_t v2 = 0xE200000000000000LL;
    }
  }

  else
  {
    sub_1000BBD8C();
  }

  sub_1000BB99C(a1, v4);
  return sub_1000BB994(v2);
}

void sub_1000B2450(int a1, Swift::UInt32 a2)
{
}

void sub_1000B2468(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1000B24A8()
{
  return sub_1000BB994(v0);
}

void sub_1000B24F8(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1000B2530(uint64_t a1)
{
  return sub_1000BB994(0xE900000000000073LL);
}

void sub_1000B25B4()
{
  __asm { BR              X10 }

uint64_t sub_1000B25E4(uint64_t a1)
{
  return sub_1000BB994(0xE500000000000000LL);
}

void sub_1000B2638(uint64_t a1, char a2)
{
}

void sub_1000B2664()
{
}

void sub_1000B2684()
{
}

uint64_t sub_1000B26A4(uint64_t a1, uint64_t a2)
{
  return sub_1000B28E0(a1, a2, (uint64_t (*)(uint64_t))sub_100113768);
}

uint64_t sub_1000B26B0(uint64_t a1)
{
  return sub_1000BBF08(a1, 0x6D756964656DLL);
}

uint64_t sub_1000B26C0(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 2036429415LL;
  }
  else {
    uint64_t v3 = 0x6B63616C62LL;
  }
  if (v2) {
    uint64_t v4 = 0xE500000000000000LL;
  }
  else {
    uint64_t v4 = 0xE400000000000000LL;
  }
  sub_1000BB99C(a1, v3);
  return sub_1000BB994(v4);
}

uint64_t sub_1000B2704(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x656772616CLL;
  }
  else {
    uint64_t v3 = 0x6C616D726F6ELL;
  }
  if (v2) {
    uint64_t v4 = 0xE600000000000000LL;
  }
  else {
    uint64_t v4 = 0xE500000000000000LL;
  }
  sub_1000BB99C(a1, v3);
  return sub_1000BB994(v4);
}

void sub_1000B274C(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1000B2790()
{
  return sub_1000BB994(v0);
}

uint64_t sub_1000B27DC(uint64_t a1, unsigned __int8 a2)
{
  int v3 = a2;
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v4 = 0x65756C6176LL;
    }
    else {
      uint64_t v4 = 0x7475626972747461LL;
    }
    if (v3 == 1) {
      uint64_t v2 = 0xE500000000000000LL;
    }
    else {
      uint64_t v2 = 0xEE007473694C6465LL;
    }
  }

  else
  {
    sub_1000BC16C();
  }

  sub_1000BB99C(a1, v4);
  return sub_1000BB994(v2);
}

uint64_t sub_1000B2844(uint64_t a1, uint64_t a2)
{
  return sub_1000B28E0(a1, a2, (uint64_t (*)(uint64_t))sub_100082108);
}

uint64_t sub_1000B2850(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000023LL, 0x8000000100216E00LL);
}

uint64_t sub_1000B286C(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x657070616D2D3276LL;
  }
  else {
    uint64_t v3 = 0x702D6C72752D3276LL;
  }
  if (v2) {
    uint64_t v4 = 0xEF736E7265747461LL;
  }
  else {
    uint64_t v4 = 0xEE00736C72752D64LL;
  }
  sub_1000BB99C(a1, v3);
  return sub_1000BB994(v4);
}

uint64_t sub_1000B28D4(uint64_t a1, uint64_t a2)
{
  return sub_1000B28E0(a1, a2, (uint64_t (*)(uint64_t))sub_10001B030);
}

uint64_t sub_1000B28E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = a3(a2);
  sub_1000BBE7C(v4, v5);
  return sub_1000BB994(v3);
}

void sub_1000B2908()
{
  __asm { BR              X10 }

uint64_t sub_1000B2938()
{
  return sub_1000BB994(v0);
}

uint64_t sub_1000B2980(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1000BB994(v3);
}

uint64_t sub_1000B29AC(uint64_t a1)
{
  return sub_1000BBF18(a1, 0x7A69726F68747561LL, 0x6E6F697461LL);
}

void sub_1000B29D0(uint64_t a1, Swift::UInt a2)
{
}

void sub_1000B2A00(uint64_t a1)
{
  if ((v1 & 1) != 0) {
    uint64_t v2 = 0x2E746E756F636361LL;
  }
  else {
    uint64_t v2 = 0xD00000000000001BLL;
  }
  sub_1000BB99C((uint64_t)v3, v2);
  sub_100019390();
  sub_100035698();
  sub_1000354B8();
}

void sub_1000B2A70(uint64_t a1, uint64_t a2)
{
}

void sub_1000B2A7C(uint64_t a1, uint64_t a2)
{
}

void sub_1000B2A88(uint64_t a1, uint64_t a2)
{
}

void sub_1000B2A94(uint64_t a1)
{
}

void sub_1000B2AA4(uint64_t a1, uint64_t a2)
{
}

void sub_1000B2AB0(uint64_t a1, uint64_t a2)
{
}

void sub_1000B2ABC(uint64_t a1)
{
}

void sub_1000B2AC8(uint64_t a1, uint64_t a2)
{
}

void sub_1000B2AD4(uint64_t a1)
{
}

void sub_1000B2AE8(uint64_t a1)
{
}

void sub_1000B2AF4(uint64_t a1, uint64_t a2)
{
}

void sub_1000B2B00(uint64_t a1, uint64_t a2)
{
}

void sub_1000B2B0C(uint64_t a1)
{
  if (v1) {
    sub_1000BBEB8();
  }
  else {
    sub_1000BBC70();
  }
  sub_1000BB99C((uint64_t)v3, v2);
  sub_100019390();
  sub_100035698();
  sub_1000354B8();
}

void sub_1000B2B74(uint64_t a1, uint64_t a2)
{
}

void sub_1000B2B80(uint64_t a1, uint64_t a2)
{
}

void sub_1000B2B8C(uint64_t a1, uint64_t a2)
{
}

void sub_1000B2B98(uint64_t a1)
{
  if ((v1 & 1) != 0) {
    uint64_t v2 = 0x6C65636E6163LL;
  }
  else {
    uint64_t v2 = 7041889LL;
  }
  sub_1000BB99C((uint64_t)v3, v2);
  sub_100019390();
  sub_100035698();
  sub_1000354B8();
}

void sub_1000B2BEC(uint64_t a1, uint64_t a2)
{
}

void sub_1000B2BF8(uint64_t a1)
{
  if ((v1 & 1) != 0) {
    uint64_t v2 = 0x736E6F6974706FLL;
  }
  else {
    uint64_t v2 = 1701869940LL;
  }
  sub_1000BB99C((uint64_t)v3, v2);
  sub_100019390();
  sub_100035698();
  sub_1000354B8();
}

void sub_1000B2C50(uint64_t a1)
{
  if ((v1 & 1) != 0) {
    uint64_t v2 = 0xD000000000000010LL;
  }
  else {
    uint64_t v2 = 1701667182LL;
  }
  sub_1000BB99C((uint64_t)v3, v2);
  sub_100019390();
  sub_100035698();
  sub_1000354B8();
}

void sub_1000B2CAC(uint64_t a1, uint64_t a2)
{
}

void sub_1000B2CB8(uint64_t a1, uint64_t a2)
{
}

void sub_1000B2CC4(uint64_t a1, uint64_t a2)
{
}

void sub_1000B2CD0(uint64_t a1, uint64_t a2)
{
}

void sub_1000B2CDC(uint64_t a1)
{
}

void sub_1000B2CE8(uint64_t a1)
{
  if ((v1 & 1) != 0) {
    uint64_t v2 = 0xD000000000000012LL;
  }
  else {
    uint64_t v2 = 1634497893LL;
  }
  sub_1000BB99C((uint64_t)v3, v2);
  sub_100019390();
  sub_100035698();
  sub_1000354B8();
}

void sub_1000B2D44(uint64_t a1)
{
  if ((v1 & 1) != 0) {
    uint64_t v2 = 3157554LL;
  }
  else {
    uint64_t v2 = 3157553LL;
  }
  String.hash(into:)(v3, v2, 0xE300000000000000LL);
  swift_bridgeObjectRelease();
  sub_100035698();
  sub_1000354B8();
}

void sub_1000B2D88(uint64_t a1)
{
  if ((v1 & 1) != 0) {
    uint64_t v2 = 1634497893LL;
  }
  else {
    uint64_t v2 = 0xD000000000000010LL;
  }
  sub_1000BB99C((uint64_t)v3, v2);
  sub_100019390();
  sub_100035698();
  sub_1000354B8();
}

void sub_1000B2DE4(uint64_t a1)
{
  if (v1)
  {
    if (v1 == 1) {
      uint64_t v2 = 0x746E6572727563LL;
    }
    else {
      uint64_t v2 = 0x64656C62616E65LL;
    }
  }

  else
  {
    uint64_t v2 = 1701667182LL;
  }

  sub_1000BB99C((uint64_t)v3, v2);
  sub_100019390();
  sub_100035698();
  sub_1000354B8();
}

void sub_1000B2E5C(uint64_t a1)
{
  if ((v1 & 1) != 0) {
    uint64_t v2 = 0x7865646E69LL;
  }
  else {
    uint64_t v2 = 1701869940LL;
  }
  sub_1000BB99C((uint64_t)v3, v2);
  sub_100019390();
  sub_100035698();
  sub_1000354B8();
}

void sub_1000B2EB0(uint64_t a1, uint64_t a2)
{
}

void sub_1000B2EC0(uint64_t a1)
{
  if ((v1 & 1) != 0) {
    uint64_t v2 = 0x616B636174537369LL;
  }
  else {
    uint64_t v2 = 0x6C69626967696C65LL;
  }
  sub_1000BB99C((uint64_t)v3, v2);
  sub_100019390();
  sub_100035698();
  sub_1000354B8();
}

void sub_1000B2F30(uint64_t a1, uint64_t a2)
{
}

void sub_1000B2F3C(uint64_t a1)
{
  if (v1)
  {
    if (v1 == 1) {
      uint64_t v2 = 0x676E697473697865LL;
    }
    else {
      uint64_t v2 = 0x64657269707865LL;
    }
  }

  else
  {
    uint64_t v2 = 7824750LL;
  }

  sub_1000BB99C((uint64_t)v3, v2);
  sub_100019390();
  sub_100035698();
  sub_1000354B8();
}

void sub_1000B2FB4(uint64_t a1)
{
}

void sub_1000B2FD4(uint64_t a1)
{
  if ((v1 & 1) != 0) {
    uint64_t v2 = 0x626967696C457369LL;
  }
  else {
    uint64_t v2 = 0x4449726566666FLL;
  }
  sub_1000BB99C((uint64_t)v3, v2);
  sub_100019390();
  sub_100035698();
  sub_1000354B8();
}

void sub_1000B3038(uint64_t a1, uint64_t a2)
{
}

void sub_1000B3044(uint64_t a1)
{
  if ((v1 & 1) != 0) {
    uint64_t v2 = 0x636E657265666572LL;
  }
  else {
    uint64_t v2 = 0x4449726566666FLL;
  }
  sub_1000BB99C((uint64_t)v3, v2);
  sub_100019390();
  sub_100035698();
  sub_1000354B8();
}

void sub_1000B30B0(uint64_t a1, uint64_t a2)
{
}

void sub_1000B30BC(uint64_t a1, uint64_t a2)
{
}

void sub_1000B30C8(uint64_t a1)
{
}

void sub_1000B30E4(uint64_t a1)
{
  if ((v1 & 1) != 0) {
    uint64_t v2 = 0x4C4157454E4552LL;
  }
  else {
    uint64_t v2 = 0x4553414843525550LL;
  }
  sub_1000BB99C((uint64_t)v3, v2);
  sub_100019390();
  sub_100035698();
  sub_1000354B8();
}

void sub_1000B3144(uint64_t a1)
{
  if (v1)
  {
    if (v1 == 1) {
      uint64_t v2 = 0x595F53415F594150LL;
    }
    else {
      uint64_t v2 = 0x465F50555F594150LL;
    }
  }

  else
  {
    sub_1000BBED4();
  }

  sub_1000BB99C((uint64_t)v3, v2);
  sub_100019390();
  sub_100035698();
  sub_1000354B8();
}

void sub_1000B31C8(uint64_t a1)
{
  if ((v1 & 1) != 0) {
    uint64_t v2 = 0x535F594C494D4146LL;
  }
  else {
    uint64_t v2 = 0x4553414843525550LL;
  }
  sub_1000BB99C((uint64_t)v3, v2);
  sub_100019390();
  sub_100035698();
  sub_1000354B8();
}

void sub_1000B3238(uint64_t a1, uint64_t a2)
{
}

void sub_1000B3244(uint64_t a1, uint64_t a2)
{
}

void sub_1000B3250(uint64_t a1)
{
  if ((v1 & 1) != 0) {
    uint64_t v2 = 0x4C4452445453LL;
  }
  else {
    uint64_t v2 = 1363432531LL;
  }
  sub_1000BB99C((uint64_t)v3, v2);
  sub_100019390();
  sub_100035698();
  sub_1000354B8();
}

void sub_1000B32A4(uint64_t a1)
{
  if (v1)
  {
    if (v1 == 1) {
      uint64_t v2 = 0x52557963696C6F70LL;
    }
    else {
      uint64_t v2 = 0x65547963696C6F70LL;
    }
  }

  else
  {
    sub_1000BC158();
  }

  sub_1000BB99C((uint64_t)v3, v2);
  sub_100019390();
  sub_100035698();
  sub_1000354B8();
}

void sub_1000B331C(uint64_t a1)
{
  if ((v1 & 1) != 0) {
    uint64_t v2 = 0x73656963696C6F70LL;
  }
  else {
    uint64_t v2 = 1634497893LL;
  }
  sub_1000BB99C((uint64_t)v3, v2);
  sub_100019390();
  sub_100035698();
  sub_1000354B8();
}

void sub_1000B3374(uint64_t a1)
{
  if ((v1 & 1) != 0) {
    uint64_t v2 = 0x6269726373627553LL;
  }
  else {
    uint64_t v2 = 7954768LL;
  }
  sub_1000BB99C((uint64_t)v3, v2);
  sub_100019390();
  sub_100035698();
  sub_1000354B8();
}

void sub_1000B33D0(uint64_t a1)
{
}

void sub_1000B33FC(uint64_t a1, uint64_t a2)
{
}

void sub_1000B3408(uint64_t a1, uint64_t a2)
{
}

void sub_1000B3414(uint64_t a1, uint64_t a2)
{
}

void sub_1000B3424(uint64_t a1, uint64_t a2)
{
}

void sub_1000B3430(uint64_t a1)
{
  if ((v1 & 1) != 0) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = v2;
  }
  sub_1000BB99C((uint64_t)v5, v4);
  sub_100019390();
  sub_100035698();
  sub_1000354B8();
}

void sub_1000B348C(uint64_t a1, uint64_t a2)
{
}

void sub_1000B3498(uint64_t a1, unsigned __int8 a2)
{
}

void sub_1000B34C8(uint64_t a1, unsigned __int8 a2)
{
}

void sub_1000B34F8(uint64_t a1, uint64_t a2)
{
}

void sub_1000B3504(uint64_t a1)
{
}

void sub_1000B3510(uint64_t a1, uint64_t a2)
{
}

void sub_1000B351C(uint64_t a1, uint64_t a2)
{
}

void sub_1000B3528(uint64_t a1, uint64_t a2)
{
}

void sub_1000B3534(uint64_t a1)
{
}

void sub_1000B3554(uint64_t a1)
{
  if (v1)
  {
    if (v1 == 1) {
      uint64_t v2 = 0x6C65636E6143LL;
    }
    else {
      uint64_t v2 = 27503LL;
    }
  }

  else
  {
    sub_1000BBD8C();
  }

  sub_1000BB99C((uint64_t)v3, v2);
  sub_100019390();
  sub_100035698();
  sub_1000354B8();
}

void sub_1000B35B8(uint64_t a1)
{
}

void sub_1000B35E4(uint64_t a1, uint64_t a2)
{
}

void sub_1000B35F0(uint64_t a1, uint64_t a2)
{
}

void sub_1000B35FC(uint64_t a1, uint64_t a2)
{
}

void sub_1000B3608(uint64_t a1, unsigned __int8 a2)
{
}

void sub_1000B3634(uint64_t a1, char a2)
{
}

void sub_1000B366C(uint64_t a1, unsigned __int8 a2)
{
}

void sub_1000B369C(uint64_t a1, unsigned __int8 a2)
{
}

void sub_1000B36CC(uint64_t a1, uint64_t a2)
{
}

void sub_1000B36D8(uint64_t a1, char a2)
{
}

void sub_1000B3704(uint64_t a1)
{
}

void sub_1000B3714(uint64_t a1)
{
  if ((v1 & 1) != 0) {
    uint64_t v2 = 2036429415LL;
  }
  else {
    uint64_t v2 = 0x6B63616C62LL;
  }
  sub_1000BB99C((uint64_t)v3, v2);
  sub_100019390();
  sub_100035698();
  sub_1000354B8();
}

void sub_1000B3768(uint64_t a1)
{
  if ((v1 & 1) != 0) {
    uint64_t v2 = 0x656772616CLL;
  }
  else {
    uint64_t v2 = 0x6C616D726F6ELL;
  }
  sub_1000BB99C((uint64_t)v3, v2);
  sub_100019390();
  sub_100035698();
  sub_1000354B8();
}

void sub_1000B37C0(uint64_t a1, uint64_t a2)
{
}

void sub_1000B37CC(uint64_t a1)
{
  if (v1)
  {
    if (v1 == 1) {
      uint64_t v2 = 0x65756C6176LL;
    }
    else {
      uint64_t v2 = 0x7475626972747461LL;
    }
  }

  else
  {
    sub_1000BC16C();
  }

  sub_1000BB99C((uint64_t)v3, v2);
  sub_100019390();
  sub_100035698();
  sub_1000354B8();
}

void sub_1000B3844(uint64_t a1, uint64_t a2)
{
}

void sub_1000B3850(uint64_t a1)
{
}

void sub_1000B386C(uint64_t a1)
{
  if ((v1 & 1) != 0) {
    uint64_t v2 = 0x657070616D2D3276LL;
  }
  else {
    uint64_t v2 = 0x702D6C72752D3276LL;
  }
  sub_1000BB99C((uint64_t)v3, v2);
  sub_100019390();
  sub_100035698();
  sub_1000354B8();
}

void sub_1000B38E4(uint64_t a1, uint64_t a2)
{
}

void sub_1000B38F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = a3(a2);
  sub_1000BB99C((uint64_t)v6, v5);
  sub_100019390();
  sub_100035698();
  sub_1000354B8();
}

void sub_1000B3938(uint64_t a1, uint64_t a2)
{
}

void sub_1000B3944(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, uint64_t))
{
}

void sub_1000B3978(uint64_t a1, uint64_t a2, unint64_t a3)
{
}

void sub_1000B39C4(uint64_t a1)
{
}

void sub_1000B39E4(uint64_t a1, uint64_t a2)
{
}

BOOL sub_1000B3A18(unsigned __int8 a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0LL;
  }
  Swift::UInt v3 = a1;
  Hasher.init(_seed:)(v13);
  Hasher._combine(_:)(v3);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0) {
    return 0LL;
  }
  do
  {
    int v12 = *(unsigned __int8 *)(v8 + v11);
    BOOL result = v12 == (_DWORD)v3;
    if (v12 == (_DWORD)v3) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }

  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_1000B3B04(char a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)
    && (sub_1000B2F3C(*(void *)(a2 + 40)),
        uint64_t v4 = -1LL << *(_BYTE *)(a2 + 32),
        unint64_t v6 = v5 & ~v4,
        ((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0))
  {
    uint64_t v7 = ~v4;
    while (1)
    {
      if (*(_BYTE *)(*(void *)(a2 + 48) + v6))
      {
        if (*(_BYTE *)(*(void *)(a2 + 48) + v6) == 1)
        {
          uint64_t v8 = 0xE800000000000000LL;
          uint64_t v9 = 0x676E697473697865LL;
        }

        else
        {
          uint64_t v8 = 0xE700000000000000LL;
          uint64_t v9 = 0x64657269707865LL;
        }
      }

      else
      {
        uint64_t v8 = 0xE300000000000000LL;
        uint64_t v9 = 7824750LL;
      }

      if (a1)
      {
        uint64_t v10 = a1 == 1 ? 0x676E697473697865LL : 0x64657269707865LL;
        uint64_t v11 = a1 == 1 ? 0xE800000000000000LL : 0xE700000000000000LL;
      }

      else
      {
        uint64_t v11 = 0xE300000000000000LL;
        uint64_t v10 = 7824750LL;
      }

      if (v9 == v10 && v8 == v11) {
        break;
      }
      char v13 = sub_100048720(v9, v8, v10, v11);
      sub_10001A3F8();
      sub_10003561C();
      if ((v13 & 1) == 0)
      {
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0) {
          continue;
        }
      }

      return v13 & 1;
    }

    swift_bridgeObjectRelease_n(v8, 2LL);
    char v13 = 1;
  }

  else
  {
    char v13 = 0;
  }

  return v13 & 1;
}

void sub_1000B3C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    sub_1000BB9B0(*(void *)(a3 + 40));
    sub_1000BB99C((uint64_t)v21, a1);
    Swift::Int v6 = sub_100035698();
    uint64_t v7 = -1LL << *(_BYTE *)(a3 + 32);
    Swift::Int v8 = v6 & ~v7;
    sub_1000BBDE8();
    if ((v9 & 1) != 0)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (uint64_t *)(v10 + 16 * v8);
      uint64_t v12 = v11[1];
      if ((*v11 != a1 || v12 != a2) && (sub_100048720(*v11, v12, a1, a2) & 1) == 0)
      {
        uint64_t v14 = ~v7;
        uint64_t v15 = (v8 + 1) & v14;
        sub_1000BBDE8();
        if ((v16 & 1) != 0)
        {
          do
          {
            unint64_t v17 = (uint64_t *)(v10 + 16 * v15);
            uint64_t v18 = v17[1];
            if (*v17 == a1 && v18 == a2) {
              break;
            }
            if ((sub_100048720(*v17, v18, a1, a2) & 1) != 0) {
              break;
            }
            uint64_t v15 = (v15 + 1) & v14;
            sub_1000BBDE8();
          }

          while ((v20 & 1) != 0);
        }
      }
    }
  }

uint64_t sub_1000B3D80()
{
  return sub_1000B843C(0x11u) & 1;
}

uint64_t sub_1000B3D9C()
{
  uint64_t v0 = sub_1000B85D4(0x1Bu, (uint64_t)&type metadata for Int);
  if (v0 == 1) {
    unsigned int v2 = 1;
  }
  else {
    unsigned int v2 = 2;
  }
  if (!v0) {
    unsigned int v2 = 0;
  }
  if ((v1 & 1) != 0) {
    return 2LL;
  }
  else {
    return v2;
  }
}

uint64_t sub_1000B3DDC()
{
  return sub_1000B3DFC(&OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___productID, 9u);
}

uint64_t sub_1000B3DEC()
{
  return sub_1000B3DFC(&OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___bundleID, 2u);
}

uint64_t sub_1000B3DFC(void *a1, unsigned __int8 a2)
{
  Swift::UInt v3 = (void *)(v2 + *a1);
  uint64_t v4 = v3[1];
  if (!v4)
  {
    sub_1000B8508(a2);
    if (v6) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = 0LL;
    }
    if (v6) {
      unint64_t v8 = v6;
    }
    else {
      unint64_t v8 = 0xE000000000000000LL;
    }
    *Swift::UInt v3 = v7;
    v3[1] = v8;
    sub_10001DBCC();
    sub_10001A3F8();
    uint64_t v4 = 0LL;
  }

  swift_bridgeObjectRetain(v4);
  return sub_10007F0D0();
}

void sub_1000B3E6C()
{
  unint64_t v6 = v5;
  sub_1000B8508(0x14u);
  uint64_t v9 = v8;
  if (!v8)
  {
    uint64_t v2 = 0LL;
    uint64_t v11 = 0LL;
    uint64_t v4 = 0LL;
LABEL_15:
    sub_1000BC124();
    goto LABEL_19;
  }

  uint64_t v10 = v7;
  if (qword_1002A8D28 != -1)
  {
    uint64_t v22 = v8;
    swift_once(&qword_1002A8D28, sub_10012A5D0);
    uint64_t v9 = v22;
  }

  uint64_t v11 = *(void *)(qword_1002EB990 + 16);
  if (!v11)
  {
    swift_bridgeObjectRelease(v9);
    sub_1000BC13C();
    goto LABEL_15;
  }

  uint64_t v23 = v6;
  uint64_t v12 = (uint64_t *)(qword_1002EB990 + 56);
  while (1)
  {
    uint64_t v2 = *(v12 - 3);
    uint64_t v4 = *(v12 - 2);
    uint64_t v1 = *v12;
    uint64_t v3 = v12[2];
    uint64_t v26 = v12[1];
    uint64_t v27 = *(v12 - 1);
    uint64_t v13 = v12[4];
    uint64_t v0 = v12[6];
    uint64_t v24 = v12[5];
    uint64_t v25 = v12[3];
    if (v2 == v10 && v9 == v4)
    {
      uint64_t v11 = v9;
      uint64_t v2 = v10;
      unint64_t v6 = v23;
      goto LABEL_18;
    }

    uint64_t v15 = v10;
    uint64_t v16 = v10;
    uint64_t v17 = v9;
    if ((sub_100048720(v2, v4, v16, v9) & 1) != 0) {
      break;
    }
    v12 += 10;
    --v11;
    uint64_t v9 = v17;
    uint64_t v10 = v15;
    if (!v11)
    {
      swift_bridgeObjectRelease(v9);
      sub_1000BC13C();
      sub_1000BC124();
      unint64_t v6 = v23;
      goto LABEL_19;
    }
  }

  uint64_t v11 = v4;
  unint64_t v6 = v23;
LABEL_18:
  swift_bridgeObjectRetain(v4);
  uint64_t v4 = v1;
  sub_10001FFF0();
  uint64_t v1 = v3;
  swift_bridgeObjectRetain(v3);
  uint64_t v3 = v13;
  sub_10001DBCC();
  swift_bridgeObjectRetain(v0);
  sub_10001DC10();
  uint64_t v19 = v26;
  uint64_t v18 = v27;
  uint64_t v21 = v24;
  uint64_t v20 = v25;
LABEL_19:
  *unint64_t v6 = v2;
  v6[1] = v11;
  void v6[2] = v18;
  void v6[3] = v4;
  void v6[4] = v19;
  v6[5] = v1;
  v6[6] = v20;
  v6[7] = v3;
  v6[8] = v21;
  v6[9] = v0;
  sub_100019328();
}

void sub_1000B3FEC()
{
  uint64_t v0 = sub_1000B85D4(0x15u, (uint64_t)&type metadata for Double);
  if ((v2 & 1) == 0) {
    NSDecimal.init(_:)(v1, *(Swift::Double *)&v0);
  }
}

double sub_1000B4050()
{
  uint64_t v3 = (_BYTE *)(v0 + OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___purchaseDate);
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___purchaseDate + 8) & 1) == 0) {
    return *(double *)v3;
  }
  uint64_t v4 = sub_1000B85D4(0xBu, (uint64_t)&type metadata for Double);
  if ((v5 & 1) != 0)
  {
    uint64_t v6 = static Date.now.getter(v4);
    sub_1000BC29C(v6);
    sub_1000BBF40();
  }

  else
  {
    double v1 = *(double *)&v4;
  }

  *(double *)uint64_t v3 = v1;
  v3[8] = 0;
  return v1;
}

void sub_1000B40F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 0LL;
    uint64_t v3 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v5 = *v3++;
      uint64_t v4 = v5;
      if ((v5 & ~v2) == 0) {
        uint64_t v4 = 0LL;
      }
      v2 |= v4;
      --v1;
    }

    while (v1);
  }

  swift_bridgeObjectRelease();
  sub_10001945C();
}

void sub_1000B4140(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    int v2 = 0;
    uint64_t v3 = (unsigned __int8 *)(a1 + 32);
    do
    {
      int v5 = *v3++;
      int v4 = v5;
      if ((v5 & ~v2) == 0) {
        int v4 = 0;
      }
      v2 |= v4;
      --v1;
    }

    while (v1);
  }

  swift_bridgeObjectRelease();
  sub_10001945C();
}

uint64_t sub_1000B418C(int a1, int a2)
{
  return a2 & ~a1;
}

uint64_t sub_1000B4194(uint64_t a1, uint64_t a2)
{
  return a2 & ~a1;
}

uint64_t sub_1000B419C(uint64_t result)
{
  *v1 &= ~(_BYTE)result;
  return result;
}

uint64_t sub_1000B41AC(uint64_t result)
{
  *v1 &= ~result;
  return result;
}

void sub_1000B41BC()
{
  uint64_t v0 = sub_100092A18();
  __chkstk_darwin(v0);
  sub_1000227D0();
  sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  sub_1000226C8();
  __chkstk_darwin(v1);
  sub_100092F38();
  uint64_t v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  uint64_t v4 = sub_1000175B0((uint64_t *)&unk_1002B8BB0);
  uint64_t v5 = sub_100019310(v4, 512LL);
  *(_OWORD *)(v5 + 1sub_100019F7C(v0 + 6) = xmmword_1001FCE60;
  *(void *)(v5 + 3sub_100019F7C(v0 + 2) = 0x6E6F69746361LL;
  *(void *)(v5 + 4sub_10006F0B8(12LL, 0) = 0xE600000000000000LL;
  sub_1000B594C();
  sub_1000BC230();
  __asm { BR              X12 }

uint64_t sub_1000B42D0()
{
  *(void *)(v0 + 48) = v2;
  *(void *)(v0 + 5sub_100019F7C(v0 + 6) = v1;
  *(void *)(v0 + 7sub_100019F7C(v0 + 2) = &type metadata for String;
  *(void *)(v0 + 8sub_10006F0B8(12LL, 0) = 25705LL;
  *(void *)(v0 + sub_100081CEC(v0 + 88) = 0xE200000000000000LL;
  sub_1000B52F0();
  *(void *)(v0 + 9sub_100019F7C(v0 + 6) = v3;
  *(void *)(v0 + 12sub_10006F0B8(12LL, 0) = &type metadata for UInt;
  *(void *)(v0 + 128) = 0x64656873696E6966LL;
  *(void *)(v0 + 13sub_100019F7C(v0 + 6) = 0xE800000000000000LL;
  *(_BYTE *)(v0 + 14sub_100019F7C(v0 + 4) = sub_1000B5AC0() & 1;
  sub_1000BC1A0();
  *(void *)(v0 + 168) = v5;
  *(void *)(v0 + 17sub_100019F7C(v0 + 6) = v4;
  *(void *)(v0 + 18sub_100019F7C(v0 + 4) = 0xE900000000000044LL;
  *(void *)(v0 + 19sub_100019F7C(v0 + 2) = sub_1000BBB58(&OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___productID);
  *(void *)(v0 + 20sub_10006F0B8(12LL, 0) = v6;
  sub_1000BC18C();
  *(void *)(v0 + 21sub_100019F7C(v0 + 6) = &type metadata for String;
  *(void *)(v0 + 22sub_100019F7C(v0 + 4) = v7;
  *(void *)(v0 + 23sub_100019F7C(v0 + 2) = 0xEC00000065746144LL;
  *(double *)(v0 + 24sub_10006F0B8(12LL, 0) = sub_1000B4050();
  *(void *)(v0 + 26sub_100019F7C(v0 + 4) = &type metadata for Double;
  *(void *)(v0 + 27sub_100019F7C(v0 + 2) = 0x6574617473LL;
  *(void *)(v0 + 28sub_10006F0B8(12LL, 0) = 0xE500000000000000LL;
  *(void *)(v0 + 2sub_100081CEC(v0 + 88) = sub_1000B774C();
  *(void *)(v0 + 31sub_100019F7C(v0 + 2) = &type metadata for Int;
  *(void *)(v0 + 32sub_10006F0B8(12LL, 0) = 1701869940LL;
  *(void *)(v0 + 328) = 0xE400000000000000LL;
  sub_1000B5BB8();
  return ((uint64_t (*)())((char *)sub_1000B4414 + 4 * byte_1001FC49D[v8]))();
}

uint64_t sub_1000B4414()
{
  *(_WORD *)(v2 + 35sub_10006F0B8(12LL, 0) = -4864;
  sub_1000BBD9C();
  v4 -= 3LL;
  *(void *)(v2 + 36sub_10006F0B8(12LL, 0) = v3;
  *(void *)(v2 + 368) = v4;
  v0[1] = v4;
  sub_1000BB9EC();
  *(void *)(v2 + 37sub_100019F7C(v0 + 6) = v5;
  *(_BYTE *)(v2 + 38sub_100019F7C(v0 + 4) = sub_1000B5D50() & 1;
  sub_1000BC38C();
  *(void *)(v2 + 408) = &type metadata for Bool;
  *(void *)(v2 + 41sub_100019F7C(v0 + 6) = v6;
  *(void *)(v2 + 42sub_100019F7C(v0 + 4) = v1 + 32;
  *(_BYTE *)(v2 + 43sub_100019F7C(v0 + 2) = sub_1000B3D80() & 1;
  sub_1000BC340();
  *(void *)(v2 + 45sub_100019F7C(v0 + 6) = &type metadata for Bool;
  *(void *)(v2 + 46sub_100019F7C(v0 + 4) = v7;
  *(void *)(v2 + 47sub_100019F7C(v0 + 2) = 0xE800000000000000LL;
  uint64_t v8 = sub_1000B5B90();
  *(void *)(v2 + 50sub_100019F7C(v0 + 4) = &type metadata for Int;
  *(void *)(v2 + 48sub_10006F0B8(12LL, 0) = v8;
  v0[10] = Dictionary.init(dictionaryLiteral:)(v2, v3, (char *)&type metadata for Any + 8);
  unsigned __int8 v9 = sub_1000B5980();
  if (v9 != 3)
  {
    v0[29] = &type metadata for Int;
    v0[26] = v9 - 1LL;
    uint64_t v10 = sub_1000BBD24();
    sub_1000BC2CC(v10, 0x7975426F546B7361LL, 0x737574617453LL);
  }

  uint64_t v11 = sub_1000BC290(8u);
  if ((v12 & 1) == 0)
  {
    v0[29] = &type metadata for UInt;
    v0[26] = v11;
    uint64_t v13 = sub_1000BBD24();
    sub_1001B1C84(v13, 0x6C616E696769726FLL, 0xEA00000000004449LL);
  }

  uint64_t v14 = sub_1000BC290(0xCu);
  if ((v15 & 1) == 0)
  {
    v0[29] = &type metadata for Double;
    v0[26] = v14;
    sub_1000BBD9C();
    sub_1000BBADC(v16 + 1, (uint64_t)"originalPurchaseDate");
  }

  v0[4] = OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___type;
  uint64_t v17 = sub_1000BBBC4();
  return v18(v17);
}

uint64_t sub_1000B4600()
{
  char v9 = sub_100048720(v6, v1, v7, v8);
  sub_10001EDA0();
  if ((v9 & 1) != 0)
  {
    uint64_t v10 = sub_1000B85D4(4u, (uint64_t)&type metadata for Double);
    if ((v11 & 1) == 0)
    {
      *(void *)(v0 + 23sub_100019F7C(v0 + 2) = &type metadata for Double;
      *(void *)(v0 + 208) = v10;
      uint64_t v12 = sub_1000BBD24();
      sub_1000BC2CC(v12, 0x6974617269707865LL, 0x657461446E6FLL);
    }

    sub_1000B8508(0xFu);
    if (v14)
    {
      *(void *)(v0 + 23sub_100019F7C(v0 + 2) = &type metadata for String;
      *(void *)(v0 + 208) = v13;
      *(void *)(v0 + 21sub_100019F7C(v0 + 6) = v14;
    }

    else
    {
      *(_OWORD *)(v0 + 208) = 0u;
      *(_OWORD *)(v0 + 22sub_100019F7C(v0 + 4) = 0u;
    }

    sub_1000BB9F8((uint64_t)"subscriptionGroupID");
    sub_1000B9094();
    *(void *)(v0 + 23sub_100019F7C(v0 + 2) = &type metadata for Bool;
    *(_BYTE *)(v0 + 208) = v15 & 1;
    uint64_t v16 = sub_1000BBD24();
    sub_1001B1C84(v16, 0x6461726770557369LL, v17);
    sub_1000B6DC0(v2);
    uint64_t v18 = sub_1000BBEFC(v2);
    if ((_DWORD)v18)
    {
      sub_100092CB4(v18, (uint64_t *)&unk_1002AFCD0);
      sub_1000BC044();
    }

    else
    {
      uint64_t v19 = sub_1000BC034();
      uint64_t v21 = sub_1000BC150(v19, v2, v20);
      sub_100092CB4(v21, (uint64_t *)&unk_1002AFCD0);
      Date.timeIntervalSinceReferenceDate.getter(v22);
      sub_1000BBBB0();
      *(void *)(v0 + 23sub_100019F7C(v0 + 2) = &type metadata for Double;
    }

    *(void *)(v0 + 208) = v5;
    sub_1000BBADC(0xD000000000000015LL, (uint64_t)"gracePeriodExpiration");
    sub_1000B6E1C(v3);
    if (sub_1000BBEFC(v3))
    {
      sub_100034F14(v3, (uint64_t *)&unk_1002AFCD0);
      sub_1000BC044();
    }

    else
    {
      uint64_t v23 = sub_1000BC034();
      sub_1000BC150(v23, v3, v24);
      sub_100034F14(v3, (uint64_t *)&unk_1002AFCD0);
      Date.timeIntervalSinceReferenceDate.getter(v25);
      sub_1000BBBB0();
      *(void *)(v0 + 23sub_100019F7C(v0 + 2) = &type metadata for Double;
    }

    *(void *)(v0 + 208) = v5;
    uint64_t v26 = sub_1000BBD24();
    sub_1001B1C84(v26, 0x52676E696C6C6962LL, 0xEF646E4579727465LL);
    unsigned __int8 v27 = sub_1000B4EE8();
    return ((uint64_t (*)(void))((char *)&loc_1000B4824 + 4 * word_1001FC4A6[v27]))();
  }

  else
  {
    uint64_t v29 = sub_1000BC02C(3u);
    if ((v30 & 1) == 0)
    {
      *(void *)(v0 + 23sub_100019F7C(v0 + 2) = &type metadata for Double;
      *(void *)(v0 + 208) = v29;
      uint64_t v31 = sub_1000BBD24();
      sub_1001B1C84(v31, 0x61446C65636E6163LL, v32);
      unsigned __int8 v33 = sub_1000B3D9C();
      if (v33 == 2)
      {
        *(_OWORD *)(v0 + 208) = 0u;
        *(_OWORD *)(v0 + 22sub_100019F7C(v0 + 4) = 0u;
      }

      else
      {
        *(void *)(v0 + 23sub_100019F7C(v0 + 2) = &type metadata for Int;
        *(void *)(v0 + 208) = v33;
      }

      uint64_t v34 = sub_1000BBD24();
      sub_1001B1C84(v34, *(void *)(v0 + 8), v35);
    }

    unsigned __int8 v36 = sub_1000B87AC();
    if (v36 != 22)
    {
      uint64_t v37 = sub_100081EF8(v36);
      *(void *)(v0 + 23sub_100019F7C(v0 + 2) = &type metadata for String;
      *(void *)(v0 + 208) = v37;
      *(void *)(v0 + 21sub_100019F7C(v0 + 6) = v38;
      sub_1000BB9F8((uint64_t)"offerSignatureError");
    }

    sub_1000BC2A4();
    if (v39)
    {
      uint64_t v40 = v39;
      if (*(void *)(v39 + 16))
      {
        *(void *)(v0 + 128) = _swiftEmptyArrayStorage;
        sub_1000BBEB0();
        *(void *)(v0 + 2sub_100019F7C(v0 + 4) = v40;
        return ((uint64_t (*)(void))((char *)&loc_1000B4A3C + 4 * byte_1001FC4B2[*(unsigned __int8 *)(v40 + 64)]))();
      }

      sub_100023EEC();
      *(void *)(v0 + 23sub_100019F7C(v0 + 2) = sub_1000175B0(&qword_1002A93B8);
      *(void *)(v0 + 208) = _swiftEmptyArrayStorage;
      uint64_t v41 = sub_1000BBD30();
      sub_1000BC2CC(v41, v43, v42 & 0xFFFF0000FFFFFFFFLL | 0x734400000000LL);
    }

    sub_1000BC280();
    if (v45)
    {
      *(void *)(v0 + 23sub_100019F7C(v0 + 2) = &type metadata for String;
      *(void *)(v0 + 208) = v44;
      *(void *)(v0 + 21sub_100019F7C(v0 + 6) = v45;
      uint64_t v46 = sub_1000BBD30();
      sub_1001B1C84(v46, v48, v47 | 0xED00004400000000LL);
    }

    sub_1000B87D4();
    sub_1000925C4(v0 + 88, v4 - 184, &qword_1002AFB88);
    if (*(unsigned __int8 *)(v4 - 152) != 255)
    {
      sub_1000AF7D4((__int128 *)(v4 - 184), v4 - 144);
      sub_1000B8D18();
      uint64_t v50 = v49;
      uint64_t v52 = v51;
      sub_1000BAFF4(v0 + 88, (void (*)(void, void, void, void, void))sub_1000BAFE0);
      *(void *)(v0 + 23sub_100019F7C(v0 + 2) = &type metadata for String;
      *(void *)(v0 + 208) = v50;
      *(void *)(v0 + 21sub_100019F7C(v0 + 6) = v52;
      uint64_t v53 = sub_1000BBD24();
      sub_1001B1C84(v53, 0x4449726566666FLL, 0xE700000000000000LL);
    }

    uint64_t v54 = sub_1000BBBC4();
    return v55(v54);
  }

uint64_t sub_1000B4CD0()
{
  char v8 = sub_100048720(v5, 0xED0000656C62616DLL, v6, v7);
  swift_bridgeObjectRelease(0xED0000656C62616DLL);
  if ((v8 & 1) != 0)
  {
    sub_1000BC280();
    uint64_t v10 = v9;
    uint64_t v12 = v11;
    uint64_t v13 = sub_1000BBB58(&OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___productID);
    if (v12)
    {
      if (v10 == v13 && v12 == v14) {
        char v16 = 1;
      }
      else {
        char v16 = sub_100048720(v10, v12, v13, v14);
      }
      sub_100023EEC();
    }

    else
    {
      char v16 = 0;
    }

    sub_10001EDA0();
    *(void *)(v0 + 23sub_100019F7C(v0 + 2) = &type metadata for Bool;
    *(_BYTE *)(v0 + 208) = v16 & 1;
    sub_1000BB9F8((uint64_t)"autoRenewingEnabled");
  }

  sub_1000B3E6C();
  sub_1000925C4(v0 + 128, v0 + 208, &qword_1002A9E48);
  uint64_t v17 = *(void *)(v0 + 216);
  if (v17)
  {
    uint64_t v18 = *(void *)(v0 + 208);
    *(void *)(v0 + 7sub_100019F7C(v0 + 2) = &type metadata for String;
    *(void *)(v0 + 48) = v18;
    *(void *)(v0 + 5sub_100019F7C(v0 + 6) = v17;
    swift_bridgeObjectRetain(v17);
    uint64_t v19 = sub_1000BC2DC();
    sub_1001B1C84(v19, v20, v21);
    sub_1000BB028((uint64_t *)(v0 + 128));
  }

  sub_1000B3FEC();
  if ((v24 & 0x100000000LL) == 0)
  {
    int v25 = v22;
    __int16 v26 = v23;
    __int16 v27 = v24;
    unint64_t v28 = HIDWORD(v22);
    sub_1000BBD54();
    *(void *)(v0 + 7sub_100019F7C(v0 + 2) = v29;
    *(_DWORD *)(v0 + 48) = v25;
    *(_WORD *)(v0 + 5sub_100019F7C(v0 + 2) = v28;
    *(_WORD *)(v0 + 5sub_100019F7C(v0 + 4) = v1;
    *(_WORD *)(v0 + 5sub_100019F7C(v0 + 6) = v26;
    *(_WORD *)(v0 + 58) = v2;
    *(_WORD *)(v0 + 6sub_10006F0B8(12LL, 0) = v3;
    *(_WORD *)(v0 + 6sub_100019F7C(v0 + 2) = v4;
    *(_WORD *)(v0 + 6sub_100019F7C(v0 + 4) = v27;
    *(_WORD *)(v0 + 6sub_100019F7C(v0 + 6) = 24941;
    sub_1001B1C84(v0 + 48, 0x6563697270LL, 0xE500000000000000LL);
  }

  char v30 = sub_1000B62A4();
  uint64_t v31 = 3157553LL;
  if (v30) {
    uint64_t v31 = 3157554LL;
  }
  *(void *)(v0 + 7sub_100019F7C(v0 + 2) = &type metadata for String;
  *(void *)(v0 + 48) = v31;
  *(void *)(v0 + 5sub_100019F7C(v0 + 6) = 0xE300000000000000LL;
  uint64_t v32 = sub_1000BC2DC();
  sub_1001B1C84(v32, 0xD000000000000013LL, v33);
  return *(void *)(v0 + 80);
}

void sub_1000B4EDC()
{
  *(_OWORD *)(v0 + 208) = 0u;
  *(_OWORD *)(v0 + 22sub_100019F7C(v0 + 4) = 0u;
  JUMPOUT(0x1000B4850LL);
}

uint64_t sub_1000B4EE8()
{
  unint64_t v0 = sub_1000B85D4(0x20u, (uint64_t)&type metadata for Int);
  if ((v1 & 1) != 0) {
    return 5LL;
  }
  else {
    return sub_1000B7AC0(v0);
  }
}

void sub_1000B4F18()
{
  if (v0)
  {
    sub_1000B78A8(v0, (uint64_t)v16);
    uint64_t v1 = sub_100019390();
    sub_1000BBB60(v1, v2, &qword_1002AFB88, v3, v4, v5, v6, v7, v16[0], v16[1], v16[2], v16[3], v16[4], v17);
    sub_1000BBF34();
    if (!v8)
    {
      sub_1000AF7D4(&v17, (uint64_t)v18);
      uint64_t v9 = sub_1000AF7D4(v18, (uint64_t)&v19);
      if (v20 != 4) {
        sub_1000BBCF0( v9,  (void (*)(void, void, void, void, void))sub_1000BAFE0,  v10,  v11,  v12,  v13,  v14,  v15,  v16[0]);
      }
    }
  }

  sub_1000BBF28();
}

void sub_1000B4F9C(uint64_t a1)
{
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100092A18();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_1000BBB14();
  sub_1000B5088();
  if ((v8 & 1) != 0)
  {
    sub_1000B6DC0((uint64_t)v5);
    uint64_t v9 = sub_10001D158((uint64_t)v5, 1LL, v6);
    if ((_DWORD)v9 == 1)
    {
      sub_100092CB4(v9, (uint64_t *)&unk_1002AFCD0);
    }

    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v1, v5, v6);
      static Date.< infix(_:_:)(a1, v1);
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v6);
    }
  }

  sub_10002A3D4();
}

void sub_1000B5088()
{
  uint64_t v2 = sub_100092A18();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100092F38();
  uint64_t v6 = v4 - v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v11 - v8;
  sub_1000B6E1C(v0);
  if (sub_10001D158(v0, 1LL, v2) == 1)
  {
    sub_100034F14(v0, (uint64_t *)&unk_1002AFCD0);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v9, v0, v2);
    sub_1000BC054();
    static Date.< infix(_:_:)(v6, v9);
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v10(v6, v2);
    v10((uint64_t)v9, v2);
  }

  sub_10002A3D4();
}

void sub_1000B5190()
{
  __asm { BR              X10 }

uint64_t sub_1000B51CC()
{
  return 0LL;
}

void sub_1000B52F0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___id;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___id + 8) == 1)
  {
    uint64_t v2 = sub_1000B85D4(7u, (uint64_t)&type metadata for UInt);
    if ((v3 & 1) != 0) {
      uint64_t v2 = 0LL;
    }
    *(void *)uint64_t v1 = v2;
    *(_BYTE *)(v1 + 8) = 0;
  }

  sub_10001945C();
}

uint64_t sub_1000B5344@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B6DC8(0x21u, a1);
}

uint64_t sub_1000B534C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = sub_1000175B0(&qword_1002AA308);
    uint64_t inited = swift_initStackObject(v4, v9);
    *(_OWORD *)(inited + 1sub_100019F7C(v0 + 6) = xmmword_1001F3C00;
    *(void *)(inited + 3sub_100019F7C(v0 + 2) = a1;
    *(void *)(inited + 4sub_10006F0B8(12LL, 0) = a2;
    *(void *)(inited + 48) = 0LL;
    *(void *)(inited + 5sub_100019F7C(v0 + 6) = 0LL;
    *(_BYTE *)(inited + 6sub_100019F7C(v0 + 4) = 4;
    swift_bridgeObjectRetain(a2);
    return sub_1000B9138();
  }

  else
  {
    sub_1000B6324();
    uint64_t v8 = v7;
    uint64_t result = swift_bridgeObjectRelease(v7);
    if (v8) {
      return sub_1000B9138();
    }
  }

  return result;
}

void sub_1000B53F0(char a1)
{
  __asm { BR              X10 }

#error "1000B5458: call analysis failed (funcsize=19)"
void sub_1000B547C()
{
  sub_1000BBC94();
  JUMPOUT(0x1000B5444LL);
}

uint64_t sub_1000B5484(uint64_t a1, uint64_t a2)
{
  return a2 ^ a1;
}

uint64_t sub_1000B5494(uint64_t a1)
{
  uint64_t result = *v1 & a1;
  if (result) {
    *v1 &= ~a1;
  }
  return result;
}

uint64_t sub_1000B54B8(unsigned __int8 a1)
{
  char v2 = *v1;
  return sub_1000BC1BC((v2 & a1));
}

uint64_t sub_1000B54E4(uint64_t a1)
{
  uint64_t v2 = *v1;
  *v1 |= a1;
  return v2 & a1;
}

uint64_t sub_1000B54FC(char a1)
{
  char v2 = *v1;
  *v1 |= a1;
  return sub_1000BC1BC((v2 & a1));
}

uint64_t sub_1000B551C(uint64_t result)
{
  *v1 ^= result;
  return result;
}

uint64_t sub_1000B552C(uint64_t result)
{
  *v1 ^= result;
  return result;
}

BOOL sub_1000B553C(unsigned __int8 a1, unsigned __int8 a2)
{
  return (a2 & a1) == 0;
}

BOOL sub_1000B554C(uint64_t a1, uint64_t a2)
{
  return (a2 & a1) == 0;
}

BOOL EmbeddedChannel.LeftOverState.isClean.getter(uint64_t a1)
{
  return a1 == 0;
}

BOOL sub_1000B5564(char a1)
{
  return a1 == 0;
}

void sub_1000B5570()
{
  __asm { BR              X12 }

#error "1000B55D8: call analysis failed (funcsize=13)"
void sub_1000B55E4(uint64_t a1, char a2)
{
  sub_1000B5604(a1, a2, (uint64_t)&type metadata for UInt, 8u);
}

void sub_1000B55F4(uint64_t a1, char a2)
{
}

void sub_1000B5604(uint64_t a1, char a2, uint64_t a3, unsigned __int8 a4)
{
  if ((a2 & 1) != 0) {
    a1 = sub_1000BBFA4();
  }
  else {
    v12[3] = a3;
  }
  v12[0] = a1;
  sub_100197620((uint64_t)v12, a4);
  sub_1000BBA28(v5, (uint64_t *)&unk_1002B9380, v6, v7, v8, v9, v10, v11, v12[0]);
  if ((*(void *)(v4 + OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels) & 2) == 0) {
    sub_1000BC180(OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels);
  }
  sub_1000078BC();
}

void sub_1000B5658(char a1)
{
  _OWORD v9[3] = (uint64_t)&type metadata for Bool;
  LOBYTE(v9[0]) = a1;
  sub_100197620((uint64_t)v9, 0x18u);
  sub_1000BBA28(v2, (uint64_t *)&unk_1002B9380, v3, v4, v5, v6, v7, v8, v9[0]);
  if ((*(void *)(v1 + OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels) & 2) == 0) {
    sub_1000BC180(OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels);
  }
  sub_1000078BC();
}

uint64_t sub_1000B56A8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000B56D4 + 4 * byte_1001FC4C9[a1]))( 7959874LL,  0xE300000000000000LL);
}

uint64_t sub_1000B56D4()
{
  return 0x77656E6552LL;
}

uint64_t sub_1000B56E8()
{
  return 0x6F6C6E776F646552LL;
}

uint64_t sub_1000B5704()
{
  return 0x65646172677055LL;
}

void sub_1000B571C()
{
  uint64_t v4 = sub_100092A18();
  uint64_t v5 = sub_1000BC1E4(v4);
  if (v6)
  {
    sub_100034F14(v0, (uint64_t *)&unk_1002AFCD0);
    __int128 v9 = 0u;
    __int128 v10 = 0u;
  }

  else
  {
    *((void *)&v10 + Hasher._combine(_:)(v0 + 1) = &type metadata for Double;
    *(void *)&__int128 v9 = Date.timeIntervalSinceReferenceDate.getter(v5);
    sub_1000BBE94();
  }

  sub_1000BC288((uint64_t)&v9, 0x21u);
  sub_100034F14((uint64_t)&v9, (uint64_t *)&unk_1002B9380);
  uint64_t v8 = *(void *)(v1 + OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels);
  if ((v8 & 1) == 0) {
    *(void *)(v1 + OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels) = v8 | 1;
  }
  sub_1000BC0DC(v7, (uint64_t *)&unk_1002AFCD0);
  sub_1000193B8();
}

void sub_1000B57E4()
{
  __asm { BR              X10 }

#error "1000B58D4: call analysis failed (funcsize=28)"
void sub_1000B58E0(uint64_t a1, char a2)
{
  sub_1000B5604(a1, a2, (uint64_t)&type metadata for UInt, 0x19u);
}

void sub_1000B58F0(uint64_t a1, char a2)
{
}

void sub_1000B58F8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    _OWORD v9[3] = (uint64_t)&type metadata for String;
    v9[0] = a1;
    v9[1] = a2;
  }

  else
  {
    sub_1000BBC94();
  }

  sub_100197620((uint64_t)v9, 0xFu);
  sub_1000BBA28(v2, (uint64_t *)&unk_1002B9380, v3, v4, v5, v6, v7, v8, v9[0]);
  sub_1000BBFE4(OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels);
  sub_1000078BC();
}

uint64_t sub_1000B594C()
{
  if (!v0._object) {
    return 0LL;
  }
  sub_1000B7A60(v0);
  else {
    return result;
  }
}

uint64_t sub_1000B5980()
{
  uint64_t v0 = sub_1000B85D4(1u, (uint64_t)&type metadata for Int);
  else {
    unsigned int v2 = 3;
  }
  if ((v1 & 1) != 0) {
    return 3LL;
  }
  else {
    return v2;
  }
}

uint64_t sub_1000B59B8(unsigned __int8 a1)
{
  if (a1 == 3)
  {
    sub_1000BBC94();
  }

  else
  {
    _OWORD v15[3] = (uint64_t)&type metadata for Int;
    v15[0] = a1 - 1LL;
  }

  sub_100197620((uint64_t)v15, 1u);
  sub_1000BBA28(v2, (uint64_t *)&unk_1002B9380, v3, v4, v5, v6, v7, v8, v15[0]);
  uint64_t v9 = OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels;
  uint64_t v10 = *(void *)(v1 + OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels);
  if ((v10 & 2) == 0) {
    *(void *)(v1 + OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels) = v10 | 2;
  }
  sub_1000B8508(0xFu);
  uint64_t v12 = v11;
  uint64_t result = swift_bridgeObjectRelease();
  if (v12)
  {
    uint64_t v14 = *(void *)(v1 + v9);
    if ((v14 & 1) == 0) {
      *(void *)(v1 + sub_1000BBBD8(v3, v9) = v14 | 1;
    }
  }

  return result;
}

void sub_1000B5A64(unsigned __int8 a1)
{
  _OWORD v9[3] = (uint64_t)&type metadata for Int;
  v9[0] = a1;
  sub_100197620((uint64_t)v9, 0xEu);
  sub_1000BBA28(v2, (uint64_t *)&unk_1002B9380, v3, v4, v5, v6, v7, v8, v9[0]);
  if ((*(void *)(v1 + OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels) & 2) == 0) {
    sub_1000BC180(OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels);
  }
  sub_1000078BC();
}

void sub_1000B5AB8(char a1)
{
}

uint64_t sub_1000B5AC0()
{
  return sub_1000B843C(5u) & 1;
}

void sub_1000B5ADC()
{
  __asm { BR              X10 }

void sub_1000B5B14()
{
  if ((sub_1000B5AC0() & 1) != 0) {
    sub_1000193B8();
  }
  else {
    sub_1000B5E54();
  }
}

uint64_t sub_1000B5B90()
{
  uint64_t result = sub_1000B85D4(0xDu, (uint64_t)&type metadata for Int);
  if ((v1 & 1) != 0) {
    return 0LL;
  }
  return result;
}

void sub_1000B5BB8()
{
  uint64_t v1 = OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___type;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___type) == 4) {
    *(_BYTE *)(v0 + sub_100034E8C(v0, v1) = sub_1000B876C();
  }
  sub_10001945C();
}

BOOL sub_1000B5BEC()
{
  if (v7) {
    return 0LL;
  }
  sub_1000AF7D4(&v23, (uint64_t)v24);
  uint64_t v8 = sub_1000AF7D4(v24, (uint64_t)v25);
  BOOL v9 = v25[32] == 0;
  sub_1000BBCF0( v8,  (void (*)(void, void, void, void, void))sub_1000BAFE0,  v10,  v11,  v12,  v13,  v14,  v15,  v18);
  return v9;
}

void sub_1000B5C60(char a1)
{
  if (a1 == 2)
  {
    sub_1000BBC94();
  }

  else
  {
    void v8[3] = (uint64_t)&type metadata for Int;
    v8[0] = a1 & 1;
  }

  sub_100197620((uint64_t)v8, 0x1Bu);
  sub_1000BBA28(v1, (uint64_t *)&unk_1002B9380, v2, v3, v4, v5, v6, v7, v8[0]);
  sub_1000078BC();
}

void sub_1000B5CB4(uint64_t a1, char a2)
{
}

void sub_1000B5CBC(uint64_t a1, char a2, unsigned __int8 a3)
{
  if ((a2 & 1) != 0) {
    a1 = sub_1000BBFA4();
  }
  else {
    void v10[3] = (uint64_t)&type metadata for Double;
  }
  v10[0] = a1;
  sub_100197620((uint64_t)v10, a3);
  sub_1000BBA28(v3, (uint64_t *)&unk_1002B9380, v4, v5, v6, v7, v8, v9, v10[0]);
  sub_1000BBFE4(OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels);
  sub_1000078BC();
}

void sub_1000B5D10(char a1)
{
}

void sub_1000B5D18(char a1, unsigned __int8 a2)
{
  _OWORD v9[3] = (uint64_t)&type metadata for Bool;
  LOBYTE(v9[0]) = a1;
  sub_100197620((uint64_t)v9, a2);
  sub_1000BBA28(v2, (uint64_t *)&unk_1002B9380, v3, v4, v5, v6, v7, v8, v9[0]);
  sub_1000078BC();
}

uint64_t sub_1000B5D50()
{
  return sub_1000B843C(6u) & 1;
}

void sub_1000B5D6C()
{
  if (!v7)
  {
    sub_1000AF7D4(&v21, (uint64_t)v22);
    uint64_t v8 = sub_1000AF7D4(v22, (uint64_t)v23);
    if (v23[32] == 1) {
      sub_1000BC2C0();
    }
    else {
      sub_1000BBCF0( v8,  (void (*)(void, void, void, void, void))sub_1000BAFE0,  v9,  v10,  v11,  v12,  v13,  v14,  v16);
    }
  }

  sub_10007F0D0();
  sub_1000BBF28();
}

void sub_1000B5DE0()
{
  if (!v7)
  {
    sub_1000AF7D4(&v21, (uint64_t)v22);
    uint64_t v8 = sub_1000AF7D4(v22, (uint64_t)v23);
    if (v23[32] == 3) {
      sub_1000BC2C0();
    }
    else {
      sub_1000BBCF0( v8,  (void (*)(void, void, void, void, void))sub_1000BAFE0,  v9,  v10,  v11,  v12,  v13,  v14,  v16);
    }
  }

  sub_10007F0D0();
  sub_1000BBF28();
}

void sub_1000B5E54()
{
  if (sub_1000B774C() == 1)
  {
    sub_1000B5BB8();
    sub_1000BC09C();
    __asm { BR              X10 }
  }

  sub_1000193B8();
}

void sub_1000B5FC4()
{
}

void sub_1000B5FCC()
{
}

void sub_1000B5FD4()
{
  __asm { BR              X10 }

void sub_1000B6034()
{
  uint64_t v6 = sub_100092C04();
  char v7 = sub_100048720(v6, v1, 0xD000000000000015LL, 0x8000000100216A10LL);
  uint64_t v8 = sub_10001EDA0();
  if ((v7 & 1) != 0)
  {
    sub_100067DA4(v0, v4, (uint64_t *)&unk_1002AFCD0);
    uint64_t v9 = sub_100092A18();
    uint64_t v10 = sub_10001D158(v4, 1LL, v9);
    if ((_DWORD)v10 == 1)
    {
      sub_100034F14(v4, (uint64_t *)&unk_1002AFCD0);
      *(_OWORD *)(v5 - 8sub_10006F0B8(12LL, 0) = 0u;
      *(_OWORD *)(v5 - 6sub_100019F7C(v0 + 4) = 0u;
    }

    else
    {
      double v11 = Date.timeIntervalSinceReferenceDate.getter(v10);
      *(void *)(v5 - 5sub_100019F7C(v0 + 6) = &type metadata for Double;
      *(double *)(v5 - 8sub_10006F0B8(12LL, 0) = v11;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v4, v9);
    }

    sub_1000BC288(v5 - 80, v3);
    sub_100034F14(v5 - 80, (uint64_t *)&unk_1002B9380);
    uint64_t v12 = *(void *)(v2 + OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels);
    if ((v12 & 1) == 0) {
      *(void *)(v2 + OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels) = v12 | 1;
    }
  }

  sub_1000BC0DC(v8, (uint64_t *)&unk_1002AFCD0);
}

uint64_t sub_1000B615C(char a1)
{
  return qword_1001FCE20[a1];
}

void sub_1000B6170()
{
  uint64_t v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000B6324();
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 16);
    swift_bridgeObjectRelease();
    if (v4)
    {
      sub_1000B6E1C((uint64_t)v2);
      uint64_t v5 = sub_100092A18();
      uint64_t v6 = sub_10001D158((uint64_t)v2, 1LL, v5);
      int v7 = v6;
      sub_1000BC0DC(v6, (uint64_t *)&unk_1002AFCD0);
    }
  }

  sub_1000193B8();
}

uint64_t sub_1000B6230@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((v4 & 1) != 0)
  {
    uint64_t v5 = sub_1000B85D4(4u, (uint64_t)&type metadata for Double);
    if ((v6 & 1) == 0) {
      return Date.init(timeIntervalSinceReferenceDate:)(*(double *)&v5);
    }
  }

  uint64_t v8 = sub_100092A18();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL))(a2, a1, v8);
}

uint64_t sub_1000B62A4()
{
  if (v1) {
    return sub_1000CEDE4(v0, v1) & 1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000B62D0@<X0>(uint64_t a1@<X8>)
{
  if (v2)
  {
    uint64_t v3 = v2;
    UUID.init(uuidString:)();
    return sub_1000BB994(v3);
  }

  else
  {
    uint64_t v5 = type metadata accessor for UUID(0LL);
    return sub_1000BBF60(a1, 1LL, 1LL, v5);
  }

void sub_1000B6324()
{
  __asm { BR              X10 }

#error "1000B6418: call analysis failed (funcsize=88)"
void sub_1000B64EC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  sub_1000B6324();
  uint64_t v8 = v7;
  if (v7)
  {
    uint64_t v9 = sub_1000BBB58(&OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___productID);
    uint64_t v3 = v10;
    uint64_t v2 = a1;
    double v11 = sub_1000D868C(v9, v10);
    sub_10003561C();
    if (v11)
    {
      uint64_t v12 = *(void *)(v11 + 192);
      uint64_t v3 = *(void *)(v11 + 200);
      swift_bridgeObjectRetain();
      sub_1000D8854(v12, v3);
      uint64_t v2 = v13;
      sub_10003561C();
      if (v2)
      {
        uint64_t v14 = *(void *)(v8 + 16);
        if (v14)
        {
          uint64_t v16 = *(void *)(v8 + 32);
          uint64_t v15 = *(void *)(v8 + 40);
          uint64_t v17 = *(void *)(v8 + 48);
          uint64_t v18 = *(void *)(v8 + 56);
          uint64_t v19 = *(unsigned __int8 *)(v8 + 64);
          sub_1000BBE64();
          sub_1000BBE64();
          if (!swift_isUniquelyReferenced_nonNull_native(v8)
            || (unint64_t)(v14 - 1) > *(void *)(v8 + 24) >> 1)
          {
            sub_10002ED8C();
            uint64_t v8 = v20;
          }

          swift_arrayDestroy(v8 + 32, 1LL);
          __int128 v21 = *(void *)(v8 + 16);
          if (v21)
          {
            memmove((void *)(v8 + 32), (const void *)(v8 + 72), 40 * v21 - 40);
            *(void *)(v8 + 1sub_100019F7C(v0 + 6) = v21 - 1;
            sub_10009263C(v16, v15, v17, v18, v19);
            __asm { BR              X8 }
          }

          sub_100034FD0();
          _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL);
          __break(1u);
          JUMPOUT(0x1000B6B34LL);
        }

        __int128 v23 = swift_release();
        sub_1000BBD70(v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, a2, v36, v2);
        sub_10001A3F8();
        sub_1000BBD78();
        a2 = v35;
      }

      else
      {
        swift_release();
        sub_10001A3F8();
        uint64_t v3 = 0LL;
        a1 = 0LL;
        char v4 = 0LL;
      }
    }

    else
    {
      sub_10001A3F8();
      sub_1000BBD78();
    }

    uint64_t v22 = 0uLL;
  }

  else
  {
    sub_1000BBD78();
  }

  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 1sub_100019F7C(v0 + 6) = a1;
  *(_OWORD *)(a2 + 2sub_100019F7C(v0 + 4) = v22;
  *(void *)(a2 + 4sub_10006F0B8(12LL, 0) = v4;
  *(void *)(a2 + 48) = v2;
  *(void *)(a2 + 5sub_100019F7C(v0 + 6) = 0LL;
}

void sub_1000B6B48()
{
  __asm { BR              X10 }

uint64_t sub_1000B6B78()
{
  uint64_t v1 = sub_1000BB9C8();
  char v2 = sub_100048720(v1, v0, 0xD000000000000015LL, 0x8000000100216A10LL);
  sub_100019390();
  if ((v2 & 1) != 0) {
    return sub_1000B85D4(0x22u, (uint64_t)&type metadata for Int);
  }
  else {
    return 0LL;
  }
}

void sub_1000B6BF8(char a1)
{
}

BOOL sub_1000B6C00()
{
  return sub_1000B7790(3u);
}

uint64_t sub_1000B6C08()
{
  return sub_1000B6C18(0x1Du);
}

uint64_t sub_1000B6C10()
{
  return sub_1000B6C18(0x1Eu);
}

uint64_t sub_1000B6C18(unsigned __int8 a1)
{
  uint64_t v4 = sub_100092A18();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100092F38();
  uint64_t v8 = v6 - v7;
  __chkstk_darwin(v9);
  double v11 = (char *)&v17 - v10;
  sub_1000B6DC8(a1, v1);
  if (sub_10001D158(v1, 1LL, v4) == 1)
  {
    sub_100034F14(v1, (uint64_t *)&unk_1002AFCD0);
    char v12 = 0;
  }

  else
  {
    uint64_t v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 32))(v11, v1, v4);
    static Date.now.getter(v13);
    unint64_t v14 = sub_1000A33FC();
    char v12 = dispatch thunk of static Comparable.< infix(_:_:)(v8, v11, v4, v14) ^ 1;
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15((uint64_t)v11, v4);
  }

  return v12 & 1;
}

uint64_t sub_1000B6D50()
{
  uint64_t result = sub_1000B85D4(0x1Fu, (uint64_t)&type metadata for Int);
  if ((v1 & 1) != 0) {
    return 0LL;
  }
  return result;
}

void sub_1000B6D78(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    a1 = sub_1000BBFA4();
  }
  else {
    _OWORD v9[3] = (uint64_t)&type metadata for Int;
  }
  v9[0] = a1;
  sub_100197620((uint64_t)v9, 0x1Fu);
  sub_1000BBA28(v2, (uint64_t *)&unk_1002B9380, v3, v4, v5, v6, v7, v8, v9[0]);
  sub_1000078BC();
}

uint64_t sub_1000B6DC0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B6DC8(0x1Du, a1);
}

uint64_t sub_1000B6DC8@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_1000B85D4(a1, (uint64_t)&type metadata for Double);
  if ((v4 & 1) != 0)
  {
    uint64_t v5 = 1LL;
  }

  else
  {
    Date.init(timeIntervalSinceReferenceDate:)(*(double *)&v3);
    uint64_t v5 = 0LL;
  }

  uint64_t v6 = sub_100092A18();
  return sub_1000BBF60(a2, v5, 1LL, v6);
}

uint64_t sub_1000B6E1C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B6DC8(0x1Eu, a1);
}

void sub_1000B6E24(char a1)
{
  uint64_t v1 = 3157553LL;
  if ((a1 & 1) != 0) {
    uint64_t v1 = 3157554LL;
  }
  _OWORD v9[3] = (uint64_t)&type metadata for String;
  v9[0] = v1;
  v9[1] = 0xE300000000000000LL;
  sub_100197620((uint64_t)v9, 0x1Au);
  sub_1000BBA28(v2, (uint64_t *)&unk_1002B9380, v3, v4, v5, v6, v7, v8, v9[0]);
  sub_1000078BC();
}

void sub_1000B6E74()
{
  uint64_t v6 = *v5;
  if (*v5 == &OBJC_CLASS____TtCC25ASOctaneSupportXPCService18OctaneSubscription17IntroductoryOffer)
  {
    char v15 = v4;
    char v53 = v3;
    uint64_t v1 = sub_1000BBB58(&OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___productID);
    uint64_t v2 = v16;
    uint64_t v17 = sub_1000175B0(&qword_1002AA308);
    uint64_t inited = swift_initStackObject(v17, v54);
    *(_OWORD *)(inited + 1sub_100019F7C(v0 + 6) = xmmword_1001F3C00;
    *(void *)(inited + 3sub_100019F7C(v0 + 2) = sub_1000BBB58(&OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___productID);
    *(void *)(inited + 4sub_10006F0B8(12LL, 0) = v19;
    *(void *)(inited + 48) = 0LL;
    *(void *)(inited + 5sub_100019F7C(v0 + 6) = 0LL;
    *(_BYTE *)(inited + 6sub_100019F7C(v0 + 4) = 4;
    if ((v15 & 1) != 0)
    {
      sub_1000B87D4();
      uint64_t v20 = v57[0];
      uint64_t v21 = v57[1];
      uint64_t v23 = v57[2];
      uint64_t v22 = v57[3];
      char v52 = v58;
      sub_1000925C4((uint64_t)v57, (uint64_t)v59, &qword_1002AFB88);
      if (v59[32] == 255)
      {
        uint64_t v24 = _swiftEmptyArrayStorage;
      }

      else
      {
        uint64_t v24 = (void *)sub_100019310(v17, 72LL);
        *((_OWORD *)v24 + Hasher._combine(_:)(v0 + 1) = xmmword_1001F3C00;
        v24[4] = v20;
        v24[5] = v21;
        void v24[6] = v23;
        v24[7] = v22;
        *((_BYTE *)v24 + 6sub_100019F7C(v0 + 4) = v52;
      }

      sub_1000BC2A4();
      if (v37) {
        sub_10001DC10();
      }
      v64[0] = (uint64_t)v24;
      sub_100188AAC();
    }

    sub_1000BC278();
    uint64_t v30 = 0LL;
    uint64_t v29 = 0LL;
    char v27 = 0;
  }

  else
  {
    if (v6 == &OBJC_CLASS____TtCC25ASOctaneSupportXPCService18OctaneSubscription10AdHocOffer)
    {
      char v53 = v3;
      sub_10002A4C8();
      sub_1000BBB58(&OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___productID);
      sub_1000BC208();
      char v27 = 1;
    }

    else if (v6 == &OBJC_CLASS____TtCC25ASOctaneSupportXPCService18OctaneSubscription9CodeOffer)
    {
      char v53 = v3;
      sub_10002A4C8();
      uint64_t v1 = sub_1000BBB58(&OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___productID);
      uint64_t v2 = v28;
      int v25 = (uint64_t *)(v0 + 16);
      __int16 v26 = (uint64_t *)(v0 + 24);
      char v27 = 2;
    }

    else
    {
      if (v6 != &OBJC_CLASS____TtCC25ASOctaneSupportXPCService18OctaneSubscription12WinbackOffer)
      {
        if (qword_1002A8D90 == -1) {
          goto LABEL_6;
        }
        goto LABEL_38;
      }

      char v53 = v3;
      sub_10002A4C8();
      sub_1000BBB58(&OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___productID);
      sub_1000BC208();
      char v27 = 3;
    }

    uint64_t v29 = *v26;
    uint64_t v30 = *v25;
    swift_bridgeObjectRetain();
    sub_10001EDD8();
    sub_1000BC280();
    if (v32)
    {
      uint64_t v33 = v31;
      uint64_t v34 = v32;
      uint64_t v35 = sub_1000175B0(&qword_1002AA308);
      uint64_t v36 = swift_initStackObject(v35, v55);
      *(_OWORD *)(v36 + 1sub_100019F7C(v0 + 6) = xmmword_1001F3C00;
      *(void *)(v36 + 3sub_100019F7C(v0 + 2) = v33;
      *(void *)(v36 + 4sub_10006F0B8(12LL, 0) = v34;
      *(void *)(v36 + 48) = 0LL;
      *(void *)(v36 + 5sub_100019F7C(v0 + 6) = 0LL;
      *(_BYTE *)(v36 + 6sub_100019F7C(v0 + 4) = 4;
    }

    sub_1000BC278();
  }

  *(void *)&__int128 v60 = v1;
  *((void *)&v60 + Hasher._combine(_:)(v0 + 1) = v2;
  uint64_t v61 = v30;
  uint64_t v62 = v29;
  char v63 = v27;
  if ((*(_BYTE *)(v0 + 56) & 1) != 0)
  {
    uint64_t v38 = 1LL;
    if ((v53 & 1) == 0) {
      goto LABEL_33;
    }
LABEL_28:
    if (!__OFSUB__(v38, 1LL))
    {
      v64[0] = v1;
      v64[1] = v2;
      v64[2] = v30;
      v64[3] = v29;
      char v65 = v27;
      uint64_t v39 = sub_1000BC0FC();
      sub_1000925F0(v39, v40, v41, v42, v43);
      sub_1000B8BD8();
      sub_1000B8E94();
      if (*(__objc2_class **)v0 == &OBJC_CLASS____TtCC25ASOctaneSupportXPCService18OctaneSubscription9CodeOffer)
      {
        uint64_t v44 = *(void *)(v0 + 80);
        uint64_t v45 = *(void *)(v0 + 88);
        swift_bridgeObjectRetain();
      }

      else
      {
        uint64_t v44 = 0LL;
        uint64_t v45 = 0LL;
      }

      sub_1000B90F0(v44, v45);
      __asm { BR              X10 }
    }

    __break(1u);
LABEL_38:
    swift_once(&qword_1002A8D90, sub_100183E34);
LABEL_6:
    uint64_t v7 = type metadata accessor for Logger(0LL);
    sub_100018F68(v7, (uint64_t)qword_1002EB9D0);
    uint64_t v8 = sub_10002A4C8();
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v9, v10))
    {
      double v11 = (uint8_t *)sub_100019464(12LL);
      uint64_t v12 = sub_100019464(32LL);
      v64[0] = v12;
      *(_DWORD *)double v11 = 136315138;
      uint64_t v13 = *(void *)(v0 + 16);
      unint64_t v14 = *(void *)(v0 + 24);
      swift_bridgeObjectRetain();
      *(void *)&__int128 v60 = sub_1000CF360(v13, v14, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, (char *)&v60 + 8, v11 + 4);
      sub_10001EDD8();
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "Unknown offer type with id: %s, cannot add offer to transaction",  v11,  0xCu);
      swift_arrayDestroy(v12, 1LL);
      sub_10001A408(v12);
      sub_10001A408((uint64_t)v11);
    }

    else
    {

      swift_release();
    }

    return;
  }

  uint64_t v38 = *(void *)(v0 + 48);
  if ((v53 & 1) != 0) {
    goto LABEL_28;
  }
LABEL_33:
  sub_1000BC2A4();
  uint64_t v56 = v46;
  if (v46)
  {
    sub_1000B9764(&v60, v38);
    sub_100034780();
  }

  else
  {
    uint64_t v47 = sub_1000BC0FC();
    sub_10009263C(v47, v48, v49, v50, v51);
  }

  sub_1000BC278();
}

uint64_t sub_1000B7404(uint64_t a1, int a2)
{
  char v4 = v2;
  uint64_t v6 = sub_100092A18();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_1000BBB14();
  if (sub_1000B94CC())
  {
    uint64_t v8 = sub_100139BB8();
    int v10 = v9;
LABEL_5:
    sub_100024F0C();
    double v14 = sub_1000B4050();
    Date.init(timeIntervalSinceReferenceDate:)(v14);
    uint64_t v15 = sub_100043A60(v8, v10, v3, a2);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
    sub_1000B5CBC(v15, 0, 4u);
    return sub_1000B85D4(4u, (uint64_t)&type metadata for Double);
  }

  uint64_t v11 = sub_1000BBB58(&OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___productID);
  uint64_t v13 = sub_1000D868C(v11, v12);
  sub_10001DC10();
  if (v13)
  {
    uint64_t v8 = *(void *)(v13 + 176);
    int v10 = *(unsigned __int8 *)(v13 + 184);
    goto LABEL_5;
  }

  if (qword_1002A8D90 != -1) {
    swift_once(&qword_1002A8D90, sub_100183E34);
  }
  uint64_t v17 = type metadata accessor for Logger(0LL);
  sub_100018F68(v17, (uint64_t)qword_1002EB9D0);
  id v18 = v4;
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v21 = static os_log_type_t.error.getter(v19, v20);
  if (os_log_type_enabled(v19, v21))
  {
    uint64_t v22 = (uint8_t *)sub_100019464(12LL);
    uint64_t v23 = sub_100019464(32LL);
    uint64_t v27 = v23;
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v24 = sub_1000BBB58(&OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___productID);
    uint64_t v26 = sub_1000CF360(v24, v25, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v22 + 4);

    sub_10001EDA0();
    _os_log_impl( (void *)&_mh_execute_header,  v19,  v21,  "missing subscription for id: %s, cannot compute expiration",  v22,  0xCu);
    swift_arrayDestroy(v23, 1LL);
    sub_10001A408(v23);
    sub_10001A408((uint64_t)v22);
  }

  else
  {
  }

  return 0LL;
}

void sub_1000B7680()
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = sub_1000BC1E4(v4);
  if (v6)
  {
    sub_100034F14(v0, &qword_1002AC060);
    __int128 v10 = 0u;
    __int128 v11 = 0u;
  }

  else
  {
    *((void *)&v11 + Hasher._combine(_:)(v0 + 1) = &type metadata for String;
    *(void *)&__int128 v10 = UUID.uuidString.getter(v5);
    *((void *)&v10 + Hasher._combine(_:)(v0 + 1) = v7;
    sub_1000BBE94();
  }

  sub_1000BC288((uint64_t)&v10, 0x16u);
  sub_100034F14((uint64_t)&v10, (uint64_t *)&unk_1002B9380);
  uint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels);
  if ((v9 & 2) == 0) {
    *(void *)(v1 + OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels) = v9 | 2;
  }
  sub_1000BC0DC(v8, &qword_1002AC060);
  sub_1000193B8();
}

uint64_t sub_1000B774C()
{
  unint64_t v0 = sub_1000B85D4(0xEu, (uint64_t)&type metadata for Int);
  if ((v1 & 1) != 0) {
    return 0LL;
  }
  LODWORD(result) = sub_1000B7A50(v0);
  else {
    return result;
  }
}

BOOL sub_1000B7788()
{
  return sub_1000B7790(4u);
}

BOOL sub_1000B7790(unsigned __int8 a1)
{
  uint64_t v4 = sub_1000B85D4(a1, (uint64_t)&type metadata for Double);
  if ((v5 & 1) != 0) {
    return 0LL;
  }
  double v6 = *(double *)&v4;
  uint64_t v7 = Date.init()(v4);
  sub_1000BC29C(v7);
  sub_1000BBF40();
  return v1 > v6;
}

uint64_t sub_1000B7818()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  if (v1 == v2)
  {
    LOBYTE(result) = 0;
    return result | ((v1 == v2) << 8);
  }

  uint64_t result = v2 - 1;
  if (__OFSUB__(v2, 1LL))
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  if (result < v1 || v2 - 1 >= v2) {
    goto LABEL_12;
  }
  uint64_t result = sub_100060EBC( result,  0LL,  *(void *)v0,  *(void *)(v0 + 8),  *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int16 *)(v0 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 22) << 48));
  if ((result & 0x100) == 0) {
    return result | ((v1 == v2) << 8);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1000B78A8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v4 = result + 40 * v3;
    uint64_t v5 = *(void *)(v4 - 8);
    uint64_t v6 = *(void *)v4;
    uint64_t v7 = *(void *)(v4 + 8);
    uint64_t v8 = *(void *)(v4 + 16);
    unsigned __int8 v9 = *(_BYTE *)(v4 + 24);
    uint64_t result = sub_1000925F0(v5, *(void *)v4, v7, v8, v9);
  }

  else
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    unsigned __int8 v9 = -1;
  }

  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 1sub_100019F7C(v0 + 6) = v7;
  *(void *)(a2 + 2sub_100019F7C(v0 + 4) = v8;
  *(_BYTE *)(a2 + 3sub_100019F7C(v0 + 2) = v9;
  return result;
}

void sub_1000B792C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    uint64_t v5 = 7LL;
    if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v5 = 11LL;
    }
    uint64_t v6 = String.index(before:)(v5 | (v2 << 16));
    String.subscript.getter(v6, a1, a2);
  }

  else
  {
    _s25ASOctaneSupportXPCService17EventLoopIteratorVyACSayAA0dE0_pGcfC_0();
  }

uint64_t sub_1000B79A0(uint64_t a1)
{
  if (*(void *)(a1 + 16)) {
    sub_10001DBCC();
  }
  return sub_10007F0D0();
}

double sub_1000B79DC()
{
  uint64_t v0 = sub_1000B85D4(0x17u, (uint64_t)&type metadata for Double);
  if ((v1 & 1) != 0) {
    return sub_1000B4050();
  }
  else {
    return *(double *)&v0;
  }
}

Swift::Int sub_1000B7A0C()
{
  Swift::Int result = sub_1000BAE80((uint64_t)&off_100270368);
  qword_1002AFAB8 = result;
  return result;
}

uint64_t sub_1000B7A30(uint64_t a1)
{
  else {
    return 3LL;
  }
}

uint64_t sub_1000B7A44(unsigned __int8 a1)
{
  return a1 - 1LL;
}

unint64_t sub_1000B7A50(unint64_t result)
{
  if (result >= 5) {
    return 5LL;
  }
  return result;
}

void sub_1000B7A60(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002700B8, v2);
  sub_100019390();
  sub_10001945C();
}

uint64_t sub_1000B7AA0(uint64_t a1)
{
  if (a1 == 1) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if (a1) {
    return v1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000B7AB8(char a1)
{
  return a1 & 1;
}

uint64_t sub_1000B7AC0(unint64_t a1)
{
  if (a1 > 0xB) {
    return 5LL;
  }
  else {
    return byte_1001FCE48[a1];
  }
}

void sub_1000B7AE0()
{
}

void sub_1000B7AE8()
{
}

void sub_1000B7AF0(uint64_t a1)
{
}

uint64_t sub_1000B7AF8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000B7A30(*a1);
  *a2 = result;
  return result;
}

void sub_1000B7B20()
{
  unsigned __int8 v1 = sub_100052340();
  *uint64_t v0 = sub_1000B7A44(v1);
  sub_10001945C();
}

uint64_t sub_1000B7B40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000BB8D0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000B7B9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000BB8D0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_1000B7BE8(uint64_t a1)
{
}

unint64_t sub_1000B7C00@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000B7A50(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000B7C28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000BB894();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000B7C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000BB894();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_1000B7CD0(char *a1)
{
}

void sub_1000B7CDC()
{
}

void sub_1000B7CE4()
{
}

void sub_1000B7CEC(uint64_t a1)
{
}

void sub_1000B7D0C(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = v3;
}

void sub_1000B7D38()
{
  unsigned __int8 v1 = sub_100052340();
  *uint64_t v0 = sub_1000B56A8(v1);
  v0[1] = v2;
  sub_10001945C();
}

uint64_t sub_1000B7D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000BB90C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000B7DB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000BB90C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

BOOL sub_1000B7E00(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return j___s25ASOctaneSupportXPCService28NIOHTTPObjectAggregatorEventV23__derived_struct_equalsySbAC_ACtFZ(*a1, *a2);
}

uint64_t sub_1000B7E0C()
{
  return sub_100185DD0(*v0);
}

void sub_1000B7E14(uint64_t a1)
{
}

uint64_t sub_1000B7E2C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000B7AA0(*a1);
  *a2 = result;
  return result;
}

void sub_1000B7E54()
{
  char v1 = sub_100052340();
  *uint64_t v0 = sub_1000B7AB8(v1);
  sub_10001945C();
}

uint64_t sub_1000B7E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000BB81C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000B7ED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000BB81C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

BOOL sub_1000B7F1C(char *a1, char *a2)
{
  return sub_1000D5BE4(*a1, *a2);
}

void sub_1000B7F28()
{
}

void sub_1000B7F30(uint64_t a1)
{
}

void sub_1000B7F38(uint64_t a1)
{
}

uint64_t sub_1000B7F40@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000B7AC0(*a1);
  *a2 = result;
  return result;
}

void sub_1000B7F68()
{
  char v1 = sub_100052340();
  *uint64_t v0 = sub_1000B615C(v1);
  sub_10001945C();
}

uint64_t sub_1000B7F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000BB858();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000B7FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000BB858();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

BOOL sub_1000B8030(uint64_t *a1)
{
  return sub_10002A328(*a1, *v1);
}

uint64_t sub_1000B803C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100027DA8(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_1000B8068(uint64_t *a1)
{
  return sub_10002A330(*a1, *v1);
}

uint64_t sub_1000B8074@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = variable initialization expression of MessageToByteHandler.state();
  *a1 = result;
  return result;
}

uint64_t sub_1000B8098@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000B5484(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_1000B80C4(void *a1, uint64_t *a2)
{
  return sub_1000D61CC(a1, *a2);
}

uint64_t sub_1000B80CC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000B5494(*a1);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1000B80FC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000B54E4(*a1);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1000B812C(uint64_t *a1)
{
  return sub_1000D61A4(*a1);
}

uint64_t sub_1000B8134(uint64_t *a1)
{
  return sub_1000D6228(*a1);
}

uint64_t sub_1000B813C(uint64_t *a1)
{
  return sub_1000B551C(*a1);
}

uint64_t sub_1000B8144@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000B4194(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_1000B8170(uint64_t *a1)
{
  return sub_100029D6C(*a1, *v1);
}

BOOL sub_1000B817C(uint64_t *a1)
{
  return sub_1000B554C(*a1, *v1);
}

BOOL sub_1000B8188(uint64_t *a1)
{
  return sub_100029D88(*a1, *v1);
}

BOOL sub_1000B8194()
{
  return EmbeddedChannel.LeftOverState.isClean.getter(*v0);
}

uint64_t sub_1000B819C(uint64_t *a1)
{
  return sub_1000B41AC(*a1);
}

void *sub_1000B81A4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_1000B81B4(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = v3;
}

char *sub_1000B81D8(char *a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = sub_1000BC2D4((uint64_t)v3, "databaseID");
  id v5 = sub_1000BC2D4((uint64_t)v4, "propertyValues");
  sub_1000BC00C((uint64_t)v5);

  Class isa = sub_1000BBFFC().super.isa;
  uint64_t v7 = swift_bridgeObjectRelease();
  id v8 = sub_1000BC2D4(v7, "externalPropertyValues");
  sub_1000BC00C((uint64_t)v8);

  Class v9 = sub_1000BBFFC().super.isa;
  swift_bridgeObjectRelease();
  __int128 v10 = (char *)[v3 initWithDatabaseID:v4 propertyValues:isa externalPropertyValues:v9];

  uint64_t v11 = *(void *)&a1[OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels];
  *(void *)&v10[OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels] = v11;
  return v10;
}

uint64_t sub_1000B8300()
{
  return type metadata accessor for TransactionEntity();
}

void *sub_1000B831C()
{
  uint64_t v0 = sub_10011D3A8();
  char v1 = (char *)v0[2];
  if (v1)
  {
    sub_1000BBEB0();
    uint64_t v2 = 0LL;
    do
    {
      uint64_t v3 = sub_10011D3B4(v2[(void)v0 + 32]);
      uint64_t v5 = v4;
      unint64_t v6 = _swiftEmptyArrayStorage[2];
      if (v6 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_1000BBEA8();
      }
      ++v2;
      _swiftEmptyArrayStorage[2] = v6 + 1;
      uint64_t v7 = &_swiftEmptyArrayStorage[2 * v6];
      v7[4] = v3;
      v7[5] = v5;
    }

    while (v1 != v2);
  }

  sub_100019390();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000B843C(unsigned __int8 a1)
{
  uint64_t v3 = v2;
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  id v5 = [v1 valueForProperty:v4];

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(v8, v5);
    swift_unknownObjectRelease(v5);
    sub_100034728(v8, v9);
  }

  else
  {
    memset(v9, 0, sizeof(v9));
  }

  uint64_t v6 = sub_1000175B0((uint64_t *)&unk_1002B9380);
  else {
    return 2LL;
  }
}

void sub_1000B8508(unsigned __int8 a1)
{
  NSString v2 = String._bridgeToObjectiveC()();
  sub_100019390();
  id v3 = [v1 valueForProperty:v2];

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)(&v13, v3);
    uint64_t v4 = swift_unknownObjectRelease(v3);
    sub_1000BC26C(v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16[0]);
  }

  else
  {
    memset(v16, 0, sizeof(v16));
  }

  uint64_t v12 = sub_1000175B0((uint64_t *)&unk_1002B9380);
  swift_dynamicCast(&v13, v16, v12, &type metadata for String, 6LL);
  sub_1000BC0CC();
}

uint64_t sub_1000B85BC(unsigned __int8 a1)
{
  return sub_1000B85D4(a1, (uint64_t)&type metadata for UInt);
}

uint64_t sub_1000B85C8(unsigned __int8 a1)
{
  return sub_1000B85D4(a1, (uint64_t)&type metadata for Double);
}

uint64_t sub_1000B85D4(unsigned __int8 a1, uint64_t a2)
{
  NSString v4 = String._bridgeToObjectiveC()();
  sub_10001A3F8();
  id v5 = [v2 valueForProperty:v4];

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(&v18, v5);
    uint64_t v6 = swift_unknownObjectRelease(v5);
    sub_1000BC26C(v6, v7, v8, v9, v10, v11, v12, v13, v18, v19, v20, v21[0]);
  }

  else
  {
    memset(v21, 0, sizeof(v21));
  }

  uint64_t v14 = sub_1000175B0((uint64_t *)&unk_1002B9380);
  int v15 = swift_dynamicCast(&v18, v21, v14, a2, 6LL);
  uint64_t v16 = v18;
  if (!v15) {
    return 0LL;
  }
  return v16;
}

uint64_t sub_1000B8698(unsigned __int8 a1)
{
  uint64_t v3 = v2;
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  id v5 = [v1 valueForProperty:v4];

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(v9, v5);
    swift_unknownObjectRelease(v5);
    sub_100034728(v9, v10);
  }

  else
  {
    memset(v10, 0, sizeof(v10));
  }

  uint64_t v6 = sub_1000175B0((uint64_t *)&unk_1002B9380);
  uint64_t v7 = sub_1000175B0(&qword_1002A93B8);
  else {
    return 0LL;
  }
}

uint64_t sub_1000B876C()
{
  if (!v0._object) {
    return 0LL;
  }
  LODWORD(result) = sub_1001BAA14(v0);
  else {
    return result;
  }
}

uint64_t sub_1000B87AC()
{
  if (v1) {
    return sub_1000820B8(v0, v1);
  }
  else {
    return 22LL;
  }
}

void sub_1000B87D4()
{
  __asm { BR              X10 }

#error "1000B8884: call analysis failed (funcsize=30)"
void sub_1000B88BC( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t *a11,  uint64_t a12,  uint64_t a13,  unint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23,  uint64_t a24,  uint64_t a25,  uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v50;
  BOOL v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  BOOL v58;
  BOOL v59;
  BOOL v60;
  sub_10001948C();
  a25 = v26;
  a26 = v27;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  a13 = 58LL;
  a14 = 0xE100000000000000LL;
  a11 = &a13;
  swift_bridgeObjectRetain(v28);
  uint64_t v34 = sub_10018DFF4(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10006E270, (uint64_t)&a9, v31, v29);
  sub_10001EDA0();
  uint64_t v35 = *(void *)(v34 + 16);
  if (v35)
  {
    a13 = (uint64_t)_swiftEmptyArrayStorage;
    sub_1000BBEB0();
    uint64_t v36 = (void *)a13;
    uint64_t v37 = (void *)(v34 + 56);
    do
    {
      uint64_t v38 = *(v37 - 3);
      uint64_t v39 = *v37;
      swift_bridgeObjectRetain(*v37);
      uint64_t v40 = static String._fromSubstring(_:)(v38);
      uint64_t v42 = v41;
      swift_bridgeObjectRelease(v39);
      a13 = (uint64_t)v36;
      unsigned __int8 v43 = v36[2];
      if (v43 >= v36[3] >> 1)
      {
        sub_1000BBEA8();
        uint64_t v36 = (void *)a13;
      }

      v36[2] = v43 + 1;
      uint64_t v44 = &v36[2 * v43];
      v44[4] = v40;
      v44[5] = v42;
      v37 += 4;
      --v35;
    }

    while (v35);
    sub_10001A3F8();
  }

  else
  {
    sub_10001A3F8();
    uint64_t v36 = _swiftEmptyArrayStorage;
  }

  uint64_t v45 = 0x6F72746E69LL;
  uint64_t v46 = v36[2];
  if (v46 != 3)
  {
    if (v46 < 2) {
      goto LABEL_22;
    }
LABEL_23:
    uint64_t v54 = v36[4];
    uint64_t v55 = v36[5];
    uint64_t v56 = v54 == 0x6F72746E69LL && v55 == 0xE500000000000000LL;
    if (v56 || (sub_100048720(v36[4], v36[5], 0x6F72746E69LL, 0xE500000000000000LL) & 1) != 0)
    {
      uint64_t v50 = 0LL;
      char v53 = 0LL;
      char v52 = 0;
      uint64_t v45 = v36[6];
      BOOL v57 = v36[7];
    }

    else
    {
      char v58 = v54 == 6583411 && v55 == 0xE300000000000000LL;
      if (!v58 && (sub_100048720(v54, v55, 6583411LL, 0xE300000000000000LL) & 1) == 0) {
        goto LABEL_22;
      }
      uint64_t v50 = 0LL;
      char v53 = 0LL;
      uint64_t v45 = v36[6];
      BOOL v57 = v36[7];
      char v52 = 4;
    }

    uint64_t v47 = v57;
    goto LABEL_36;
  }

  uint64_t v47 = v36[4];
  uint64_t v48 = v36[5];
  if (v47 == 0x6F72746E69LL && v48 == 0xE500000000000000LL) {
    goto LABEL_23;
  }
  uint64_t v50 = 0xE500000000000000LL;
  if ((sub_100048720(v36[4], v36[5], 0x6F72746E69LL, 0xE500000000000000LL) & 1) != 0) {
    goto LABEL_23;
  }
  unsigned __int8 v51 = v47 == 0x636F686461LL && v48 == 0xE500000000000000LL;
  if (v51 || (sub_100048720(0x636F686461LL, 0xE500000000000000LL, v47, v48) & 1) != 0)
  {
    sub_1000BBC2C();
    char v52 = 1;
LABEL_20:
    char v53 = v48;
LABEL_36:
    sub_10001FFF0();
    goto LABEL_37;
  }

  int v59 = v47 == 1701080931 && v48 == 0xE400000000000000LL;
  if (v59 || (sub_100048720(1701080931LL, 0xE400000000000000LL, v47, v48) & 1) != 0)
  {
    sub_1000BBC2C();
    char v52 = 2;
    goto LABEL_20;
  }

  __int128 v60 = v47 == 0x6B6361626E6977LL && v48 == 0xE700000000000000LL;
  if (v60 || (sub_100048720(0x6B6361626E6977LL, 0xE700000000000000LL, v47, v48) & 1) != 0)
  {
    sub_1000BBC2C();
    char v52 = 3;
    goto LABEL_20;
  }

void sub_1000B8BD8()
{
  __asm { BR              X10 }

void sub_1000B8C0C()
{
  uint64_t v3 = sub_100092C04();
  char v4 = sub_100048720(v3, v1, 0xD000000000000015LL, 0x8000000100216A10LL);
  sub_10001EDA0();
  if ((v4 & 1) != 0)
  {
    sub_1000925C4(v2, (uint64_t)v17, &qword_1002AFB88);
    if (v18 == 255)
    {
      sub_1000BBC94();
    }

    else
    {
      sub_1000AF7D4(v17, (uint64_t)&v19);
      sub_1000B8D18();
      uint64_t v6 = v5;
      uint64_t v8 = v7;
      sub_1000BAFF4(v2, (void (*)(void, void, void, void, void))sub_1000BAFE0);
      v16[3] = (uint64_t)&type metadata for String;
      v16[0] = v6;
      v16[1] = v8;
    }

    sub_100197620((uint64_t)v16, 0x12u);
    sub_1000BBA28(v9, (uint64_t *)&unk_1002B9380, v10, v11, v12, v13, v14, v15, v16[0]);
    *(void *)(v0 + OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels) |= 3uLL;
  }

  else
  {
    sub_1000BAFF4(v2, (void (*)(void, void, void, void, void))sub_1000BAFE0);
  }

void sub_1000B8D18()
{
  __asm { BR              X10 }

void sub_1000B8D54()
{
}

void sub_1000B8DE8()
{
  __asm { BR              X10 }

void sub_1000B8E18()
{
  uint64_t v1 = sub_1000BB9C8();
  char v2 = sub_100048720(v1, v0, 0xD000000000000015LL, 0x8000000100216A10LL);
  sub_100019390();
  if ((v2 & 1) != 0 && (sub_1000B8508(0x23u), v4)) {
    sub_100139824(v3);
  }
  else {
    sub_1000193B8();
  }
}

void sub_1000B8E94()
{
  __asm { BR              X10 }

void sub_1000B8EE4()
{
  uint64_t v2 = sub_1000BBCF8();
  char v3 = sub_100048720(v2, v1, 0xD000000000000015LL, 0x8000000100216A10LL);
  uint64_t v4 = sub_10001A3F8();
  if ((v3 & 1) != 0) {
    ((void (*)(uint64_t))((char *)&loc_1000B8F64 + 4 * byte_1001FC4FE[v0]))(v4);
  }
  else {
    sub_100019398();
  }
}

void sub_1000B8FE0(unint64_t a1, __int16 a2, uint64_t a3)
{
  if ((a3 & 0x100000000LL) != 0)
  {
    sub_1000BBC94();
  }

  else
  {
    __int16 v9 = a3;
    int v11 = a1;
    unint64_t v12 = HIDWORD(a1);
    sub_1000BBD54();
    uint64_t v28 = v13;
    LODWORD(v2Hasher._combine(_:)(v0 + 1) = v11;
    WORD2(v2Hasher._combine(_:)(v0 + 1) = v12;
    HIWORD(v2Hasher._combine(_:)(v0 + 1) = v4;
    __int16 v22 = a2;
    __int16 v23 = v5;
    __int16 v24 = v6;
    __int16 v25 = v7;
    __int16 v26 = v9;
    __int16 v27 = v8;
  }

  sub_100197620((uint64_t)&v21, 0x15u);
  sub_1000BBA28(v14, (uint64_t *)&unk_1002B9380, v15, v16, v17, v18, v19, v20, v21);
  if ((*(void *)(v3 + OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels) & 2) == 0) {
    sub_1000BC180(OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels);
  }
}

void sub_1000B9094()
{
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 BOOLValueForProperty:v1];

  sub_1000B843C(0x18u);
  sub_10001945C();
}

void sub_1000B90F0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    _OWORD v9[3] = (uint64_t)&type metadata for String;
    v9[0] = a1;
    v9[1] = a2;
  }

  else
  {
    sub_1000BBC94();
  }

  sub_100197620((uint64_t)v9, 0x1Cu);
  sub_1000BBA28(v2, (uint64_t *)&unk_1002B9380, v3, v4, v5, v6, v7, v8, v9[0]);
  sub_1000078BC();
}

uint64_t sub_1000B9138()
{
  uint64_t v0 = sub_100092BD8();
  return ((uint64_t (*)(uint64_t))((char *)sub_1000B916C + 4 * byte_1001FC503[v1]))(v0);
}

void sub_1000B916C()
{
  uint64_t v3 = sub_100092C04();
  char v4 = sub_100048720(v3, v1, 0xD000000000000015LL, 0x8000000100216A10LL);
  sub_10001EDA0();
  if ((v4 & 1) != 0)
  {
    if (v2)
    {
      if (*(void *)(v2 + 16))
      {
        sub_1000BBEB0();
        __asm { BR              X9 }
      }

      sub_10001A3F8();
      *((void *)&v7 + Hasher._combine(_:)(v0 + 1) = sub_1000175B0(&qword_1002A93B8);
      *(void *)&__int128 v6 = _swiftEmptyArrayStorage;
    }

    else
    {
      __int128 v6 = 0u;
      __int128 v7 = 0u;
    }

    sub_100197620((uint64_t)&v6, 0x13u);
    sub_100034F14((uint64_t)&v6, (uint64_t *)&unk_1002B9380);
    uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels);
    if ((v5 & 1) == 0) {
      *(void *)(v0 + OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels) = v5 | 1;
    }
    sub_100019328();
  }

  else
  {
    swift_bridgeObjectRelease(v2);
  }

uint64_t sub_1000B9428()
{
  if (!v0) {
    return 0LL;
  }
  sub_1000B78A8(v0, (uint64_t)v18);
  uint64_t v1 = sub_10001EDA0();
  sub_1000BBB60(v1, v2, &qword_1002AFB88, v3, v4, v5, v6, v7, v18[0], v18[1], v18[2], v18[3], v18[4], v19);
  sub_1000BBF34();
  if (v8) {
    return 0LL;
  }
  sub_1000AF7D4(&v19, (uint64_t)v20);
  uint64_t v9 = sub_1000AF7D4(v20, (uint64_t)v21);
  if (v22 == 4)
  {
    uint64_t v9 = sub_1000D868C(v21[0], v21[1]);
    uint64_t v16 = v9;
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  sub_1000BBCF0( v9,  (void (*)(void, void, void, void, void))sub_1000BAFE0,  v10,  v11,  v12,  v13,  v14,  v15,  v18[0]);
  return v16;
}

uint64_t sub_1000B94CC()
{
  if (!v7)
  {
    sub_1000AF7D4(&v14, (uint64_t)v15);
    sub_1000AF7D4(v15, (uint64_t)&v16);
    __asm { BR              X10 }
  }

  return 0LL;
}

void *sub_1000B9604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    sub_100034FD0();
    uint64_t result = (void *)sub_1000BBB6C( (uint64_t)"Fatal error",  v12,  v13,  (uint64_t)"Can't construct Array with count < 0",  v14,  v15,  (uint64_t)"Swift/Array.swift");
    __break(1u);
  }

  else
  {
    if (a3)
    {
      uint64_t v6 = sub_1000175B0(&qword_1002AFBC0);
      char v7 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(a3, v6);
      char v8 = v7;
      void v7[2] = a3;
      v7[4] = a1;
      v7[5] = a2;
      if (a3 != 1)
      {
        v7[6] = a1;
        v7[7] = a2;
        uint64_t v9 = a3 - 2;
        if (v9)
        {
          uint64_t v10 = v7 + 9;
          do
          {
            *(v10 - Hasher._combine(_:)(v0 + 1) = a1;
            *uint64_t v10 = a2;
            sub_10002A4C8();
            v10 += 2;
            --v9;
          }

          while (v9);
        }

        sub_10002A4C8();
      }
    }

    else
    {
      sub_10001EDD8();
      return _swiftEmptyArrayStorage;
    }

    return v8;
  }

  return result;
}

void sub_1000B96D8(int a1, size_t a2)
{
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    sub_100034FD0();
    sub_1000BBB6C( (uint64_t)"Fatal error",  v5,  v6,  (uint64_t)"Can't construct Array with count < 0",  v7,  v8,  (uint64_t)"Swift/Array.swift");
    __break(1u);
  }

  else
  {
    if (a2)
    {
      uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)(a2, &type metadata for Int8);
      *(void *)(v4 + 1sub_100019F7C(v0 + 6) = a2;
      memset((void *)(v4 + 32), a1, a2);
    }

    sub_100013858();
  }

uint64_t sub_1000B9764(__int128 *a1, uint64_t a2)
{
  if ((a2 & 0x8000000000000000LL) == 0)
  {
    if (a2)
    {
      uint64_t v4 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(a2, &unk_10027FB38);
      __int128 v4[2] = a2;
      sub_1000AF7D4(a1, (uint64_t)(v4 + 4));
      if (a2 == 1) {
        return (uint64_t)v4;
      }
      sub_1000AF7D4(a1, (uint64_t)(v4 + 9));
      uint64_t v5 = a2 - 2;
      if (a2 == 2)
      {
        uint64_t v6 = sub_1000925F0;
      }

      else
      {
        uint64_t v7 = (uint64_t)(v4 + 14);
        uint64_t v6 = sub_1000925F0;
        do
        {
          sub_1000BAFF4((uint64_t)a1, (void (*)(void, void, void, void, void))sub_1000925F0);
          sub_1000AF7D4(a1, v7);
          v7 += 40LL;
          --v5;
        }

        while (v5);
      }
    }

    else
    {
      uint64_t v4 = _swiftEmptyArrayStorage;
      uint64_t v6 = sub_10009263C;
    }

    sub_1000BAFF4((uint64_t)a1, (void (*)(void, void, void, void, void))v6);
    return (uint64_t)v4;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL);
  __break(1u);
  return result;
}

void sub_1000B988C(char a1, size_t a2)
{
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    sub_100034FD0();
    sub_1000BBB6C( (uint64_t)"Fatal error",  v5,  v6,  (uint64_t)"Can't construct Array with count < 0",  v7,  v8,  (uint64_t)"Swift/Array.swift");
    __break(1u);
  }

  else
  {
    if (a2)
    {
      uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)(a2, &type metadata for Bool);
      *(void *)(v4 + 1sub_100019F7C(v0 + 6) = a2;
      memset((void *)(v4 + 32), a1 & 1, a2);
    }

    sub_100013858();
  }

void sub_1000B9918()
{
}

void sub_1000B994C()
{
  Class v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = v5;
  if (v2)
  {
    Class isa = v2[2].isa;
    if (isa)
    {
      uint64_t v14 = v1;
      swift_bridgeObjectRetain();
      sub_1000BBEB0();
      uint64_t v8 = 0LL;
      do
      {
        uint64_t v9 = sub_10011D3B4(*((_BYTE *)&v8[4].isa + (void)v3));
        uint64_t v11 = v10;
        unint64_t v12 = _swiftEmptyArrayStorage[2];
        if (v12 >= _swiftEmptyArrayStorage[3] >> 1) {
          sub_1000BBEA8();
        }
        uint64_t v8 = (objc_class *)((char *)v8 + 1);
        _swiftEmptyArrayStorage[2] = v12 + 1;
        uint64_t v13 = &_swiftEmptyArrayStorage[2 * v12];
        v13[4] = v9;
        v13[5] = v11;
      }

      while (isa != v8);
      sub_10003561C();
      uint64_t v4 = v14;
    }

    Class v3 = Array._bridgeToObjectiveC()().super.isa;
    sub_10001EDA0();
  }

  [(id)swift_getObjCClassFromMetadata(v0) queryOnConnection:v6 predicate:v4 orderingProperties:v3];

  sub_100092B84();
}

uint64_t sub_1000B9A68@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = (objc_class *)sub_10002A444();
  v10.receiver = v2;
  v10.super_class = v5;
  id v6 = objc_msgSendSuper2(&v10, "copyWithZone:", a1);
  _bridgeAnyObjectToAny(_:)(v11, v6);
  swift_unknownObjectRelease(v6);
  uint64_t result = swift_dynamicCast(&v9, v11, (char *)&type metadata for Any + 8, v5, 7LL);
  uint64_t v8 = v9;
  *(void *)(v9 + OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels) = *(void *)&v2[OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels];
  a2[3] = v5;
  *a2 = v8;
  return result;
}

void sub_1000B9B6C()
{
  uint64_t v13 = v1;
  uint64_t v14 = v2;
  uint64_t v4 = v3;
  uint64_t v5 = (objc_class *)sub_10002A444();
  *(void *)&v0[OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels] = 0LL;
  id v6 = &v0[OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___bundleID];
  *id v6 = 0LL;
  v6[1] = 0LL;
  uint64_t v7 = &v0[OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___id];
  *(void *)uint64_t v7 = 0LL;
  v7[8] = 1;
  uint64_t v8 = &v0[OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___productID];
  *uint64_t v8 = 0LL;
  v8[1] = 0LL;
  uint64_t v9 = &v0[OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___purchaseDate];
  *(void *)uint64_t v9 = 0LL;
  v9[8] = 1;
  v0[OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___type] = 4;
  Class isa = sub_1000BC01C().super.isa;
  sub_10003561C();
  Class v11 = sub_1000BC01C().super.isa;
  sub_10001A3F8();
  v12.receiver = v0;
  v12.super_class = v5;
  objc_msgSendSuper2(&v12, "initWithDatabaseID:propertyValues:externalPropertyValues:", v4, isa, v11);

  sub_100092B84();
}

id sub_1000B9D0C()
{
  v2.receiver = v0;
  v2.super_class = (Class)sub_10002A444();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for Transaction()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService11Transaction);
}

void type metadata accessor for Transaction.UpdatedModels()
{
}

unint64_t sub_1000B9DA8()
{
  unint64_t result = qword_1002AFB18;
  if (!qword_1002AFB18)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FC5A4, &unk_10027F998);
    atomic_store(result, (unint64_t *)&qword_1002AFB18);
  }

  return result;
}

unint64_t sub_1000B9DE8()
{
  unint64_t result = qword_1002AFB20;
  if (!qword_1002AFB20)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FC574, &unk_10027F998);
    atomic_store(result, (unint64_t *)&qword_1002AFB20);
  }

  return result;
}

unint64_t sub_1000B9E28()
{
  unint64_t result = qword_1002AFB28;
  if (!qword_1002AFB28)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FC5CC, &unk_10027F998);
    atomic_store(result, (unint64_t *)&qword_1002AFB28);
  }

  return result;
}

unint64_t sub_1000B9E68()
{
  unint64_t result = qword_1002AFB30;
  if (!qword_1002AFB30)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FC604, &unk_10027F998);
    atomic_store(result, (unint64_t *)&qword_1002AFB30);
  }

  return result;
}

uint64_t sub_1000B9EA4()
{
  uint64_t v136 = v1;
  uint64_t v137 = v2;
  uint64_t v132 = sub_10002A444();
  uint64_t v131 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v129 = *(void *)(v131 - 8);
  __chkstk_darwin(v131);
  sub_1000227D0();
  uint64_t v130 = v3;
  sub_1000175B0(&qword_1002AFB78);
  sub_1000226C8();
  __chkstk_darwin(v4);
  sub_1000227D0();
  uint64_t v128 = v5;
  uint64_t v6 = sub_100092A18();
  __chkstk_darwin(v6);
  sub_1000227D0();
  uint64_t v127 = v7;
  uint64_t v133 = v0;
  uint64_t v8 = sub_1000175B0((uint64_t *)&unk_1002B8BB0);
  uint64_t v9 = sub_100019310(v8, 2528LL);
  *(_OWORD *)(v9 + 1sub_100019F7C(v0 + 6) = xmmword_1001FCE70;
  *(void *)(v9 + 3sub_100019F7C(v0 + 2) = 0x4449656C646E7562LL;
  *(void *)(v9 + 4sub_10006F0B8(12LL, 0) = 0xE800000000000000LL;
  objc_super v10 = v0;
  *(void *)(v9 + 48) = sub_1000B3DFC( &OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___bundleID,  2u);
  *(void *)(v9 + 5sub_100019F7C(v0 + 6) = v11;
  *(void *)(v9 + 7sub_100019F7C(v0 + 2) = &type metadata for String;
  *(void *)(v9 + 8sub_10006F0B8(12LL, 0) = 25705LL;
  *(void *)(v9 + sub_100081CEC(v0 + 88) = 0xE200000000000000LL;
  sub_1000B52F0();
  *(void *)(v9 + 9sub_100019F7C(v0 + 6) = v12;
  sub_1000BC1A0();
  *(void *)(v9 + 12sub_10006F0B8(12LL, 0) = &type metadata for UInt;
  *(void *)(v9 + 128) = v13;
  *(void *)(v9 + 13sub_100019F7C(v0 + 6) = 0xE900000000000044LL;
  *(void *)(v9 + 14sub_100019F7C(v0 + 4) = sub_1000BBB58(&OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction____lazy_storage___productID);
  *(void *)(v9 + 15sub_100019F7C(v0 + 2) = v14;
  sub_1000BC18C();
  *(void *)(v9 + 168) = &type metadata for String;
  *(void *)(v9 + 17sub_100019F7C(v0 + 6) = v15;
  *(void *)(v9 + 18sub_100019F7C(v0 + 4) = 0xEC00000065746144LL;
  sub_1000B4050();
  *(void *)(v9 + 21sub_100019F7C(v0 + 6) = v6;
  sub_1000BC244();
  sub_100092B5C();
  *(void *)(v9 + 22sub_100019F7C(v0 + 4) = 1701869940LL;
  *(void *)(v9 + 23sub_100019F7C(v0 + 2) = 0xE400000000000000LL;
  sub_1000B5BB8();
  *(_BYTE *)(v9 + 24sub_10006F0B8(12LL, 0) = v16;
  *(void *)(v9 + 26sub_100019F7C(v0 + 4) = &type metadata for OctaneIAPType;
  *(void *)(v9 + 27sub_100019F7C(v0 + 2) = 0x6E6F69746361LL;
  *(void *)(v9 + 28sub_10006F0B8(12LL, 0) = 0xE600000000000000LL;
  *(_BYTE *)(v9 + 2sub_100081CEC(v0 + 88) = sub_1000B594C();
  *(void *)(v9 + 31sub_100019F7C(v0 + 2) = &unk_10027FCE8;
  *(void *)(v9 + 32sub_10006F0B8(12LL, 0) = 0x6C616E696769726FLL;
  *(void *)(v9 + 328) = 0xEA00000000004449LL;
  uint64_t v17 = sub_1000B85D4(8u, (uint64_t)&type metadata for UInt);
  char v19 = v18;
  uint64_t v20 = sub_1000175B0(&qword_1002AC948);
  *(void *)(v9 + 33sub_100019F7C(v0 + 6) = v17;
  *(_BYTE *)(v9 + 34sub_100019F7C(v0 + 4) = v19 & 1;
  uint64_t v125 = v20;
  *(void *)(v9 + 36sub_10006F0B8(12LL, 0) = v20;
  *(void *)(v9 + 368) = 0xD000000000000014LL;
  sub_1000BB9EC();
  *(void *)(v9 + 37sub_100019F7C(v0 + 6) = v21;
  uint64_t v22 = sub_1000B85D4(0xCu, (uint64_t)&type metadata for Double);
  char v24 = v23;
  uint64_t v25 = sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  *(void *)(v9 + 408) = v25;
  __int16 v26 = sub_10005F580((void *)(v9 + 384));
  if ((v24 & 1) != 0)
  {
    uint64_t v27 = 1LL;
  }

  else
  {
    Date.init(timeIntervalSinceReferenceDate:)(*(double *)&v22);
    uint64_t v27 = 0LL;
  }

  uint64_t v28 = 1LL;
  sub_100056B44((uint64_t)v26, v27);
  strcpy((char *)(v9 + 416), "askToBuyStatus");
  *(_BYTE *)(v9 + 43Hasher._combine(_:)(v0 + 1) = -18;
  char v29 = sub_1000B5980();
  uint64_t v30 = sub_1000175B0(&qword_1002AFB80);
  *(_BYTE *)(v9 + 43sub_100019F7C(v0 + 2) = v29;
  *(void *)(v9 + 45sub_100019F7C(v0 + 6) = v30;
  *(void *)(v9 + 46sub_100019F7C(v0 + 4) = 0x61446C65636E6163LL;
  *(void *)(v9 + 47sub_100019F7C(v0 + 2) = 0xEA00000000006574LL;
  uint64_t v31 = sub_1000BC02C(3u);
  char v33 = v32;
  uint64_t v34 = sub_1000175B0(&qword_1002AC938);
  *(void *)(v9 + 48sub_10006F0B8(12LL, 0) = v31;
  *(_BYTE *)(v9 + 4sub_100081CEC(v0 + 88) = v33 & 1;
  *(void *)(v9 + 50sub_100019F7C(v0 + 4) = v34;
  strcpy((char *)(v9 + 512), "expirationDate");
  *(_BYTE *)(v9 + 527) = -18;
  uint64_t v35 = sub_1000BC02C(4u);
  char v37 = v36;
  uint64_t v126 = v25;
  *(void *)(v9 + 55sub_100019F7C(v0 + 2) = v25;
  uint64_t v38 = sub_10005F580((void *)(v9 + 528));
  if ((v37 & 1) == 0)
  {
    Date.init(timeIntervalSinceReferenceDate:)(*(double *)&v35);
    uint64_t v28 = 0LL;
  }

  sub_100056B44((uint64_t)v38, v28);
  *(void *)(v9 + 56sub_10006F0B8(12LL, 0) = 0x64656873696E6966LL;
  *(void *)(v9 + 568) = 0xE800000000000000LL;
  char v39 = sub_1000B5AC0();
  *(void *)(v9 + 60sub_10006F0B8(12LL, 0) = &type metadata for Bool;
  *(_BYTE *)(v9 + 57sub_100019F7C(v0 + 6) = v39 & 1;
  sub_1000BBD9C();
  uint64_t v41 = v40 - 3;
  *(void *)(v9 + 608) = v40 - 3;
  sub_1000BB9EC();
  *(void *)(v9 + 61sub_100019F7C(v0 + 6) = v42;
  char v43 = sub_1000B5D50();
  *(void *)(v9 + 648) = &type metadata for Bool;
  *(_BYTE *)(v9 + 62sub_100019F7C(v0 + 4) = v43 & 1;
  *(void *)(v9 + 65sub_100019F7C(v0 + 6) = 0xD000000000000013LL;
  sub_1000BB9EC();
  *(void *)(v9 + 66sub_100019F7C(v0 + 4) = v44;
  char v45 = sub_1000B87AC();
  *(void *)(v9 + 69sub_100019F7C(v0 + 6) = sub_1000175B0(&qword_1002ABA78);
  *(_BYTE *)(v9 + 67sub_100019F7C(v0 + 2) = v45;
  *(void *)(v9 + 70sub_100019F7C(v0 + 4) = 0x6574617473LL;
  *(void *)(v9 + 71sub_100019F7C(v0 + 2) = 0xE500000000000000LL;
  char v46 = sub_1000B774C();
  *(void *)(v9 + 74sub_100019F7C(v0 + 4) = &unk_10027FBC8;
  *(_BYTE *)(v9 + 72sub_10006F0B8(12LL, 0) = v46;
  *(void *)(v9 + 75sub_100019F7C(v0 + 2) = 0xD000000000000013LL;
  sub_1000BB9EC();
  *(void *)(v9 + 76sub_10006F0B8(12LL, 0) = v47;
  sub_1000B8508(0xFu);
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  uint64_t v52 = sub_1000175B0(&qword_1002AA990);
  *(void *)(v9 + 79sub_100019F7C(v0 + 2) = v52;
  *(void *)(v9 + 768) = v49;
  *(void *)(v9 + 77sub_100019F7C(v0 + 6) = v51;
  sub_1000BC340();
  *(void *)(v9 + 80sub_10006F0B8(12LL, 0) = v53;
  *(void *)(v9 + 808) = 0xE800000000000000LL;
  uint64_t v54 = sub_1000B5B90();
  *(void *)(v9 + 84sub_10006F0B8(12LL, 0) = &type metadata for Int;
  *(void *)(v9 + 81sub_100019F7C(v0 + 6) = v54;
  sub_1000BC38C();
  *(void *)(v9 + 848) = v55;
  sub_1000BC24C();
  *(void *)(v9 + 85sub_100019F7C(v0 + 6) = v56;
  char v57 = sub_1000B3D80();
  *(void *)(v9 + 8sub_100081CEC(v0 + 88) = &type metadata for Bool;
  *(_BYTE *)(v9 + 86sub_100019F7C(v0 + 4) = v57 & 1;
  *(void *)(v9 + 89sub_100019F7C(v0 + 6) = 0x726566666FLL;
  *(void *)(v9 + 90sub_100019F7C(v0 + 4) = 0xE500000000000000LL;
  sub_1000B87D4();
  *(void *)(v9 + 93sub_100019F7C(v0 + 6) = sub_1000175B0(&qword_1002AFB88);
  uint64_t v58 = sub_100019310((uint64_t)&unk_10027F9C0, 49LL);
  *(void *)(v9 + 91sub_100019F7C(v0 + 2) = v58;
  sub_1000925C4((uint64_t)&v134, v58 + 16, &qword_1002AFB88);
  *(void *)(v9 + 94sub_100019F7C(v0 + 4) = v41;
  sub_1000BB9EC();
  *(void *)(v9 + 95sub_100019F7C(v0 + 2) = v59;
  sub_1000B8DE8();
  LOBYTE(v49) = v60;
  *(void *)(v9 + 98sub_100019F7C(v0 + 4) = sub_1000175B0(&qword_1002AFB90);
  *(_BYTE *)(v9 + 96sub_10006F0B8(12LL, 0) = v49;
  *(void *)(v9 + 99sub_100019F7C(v0 + 2) = 0x6F726665726F7473LL;
  *(void *)(v9 + 100sub_10006F0B8(12LL, 0) = 0xEA0000000000746ELL;
  sub_1000B3E6C();
  *(void *)(v9 + 103sub_100019F7C(v0 + 2) = sub_1000175B0(&qword_1002A9E48);
  uint64_t v61 = sub_100019310((uint64_t)&unk_10027F9E8, 96LL);
  *(void *)(v9 + 1008) = v61;
  sub_1000925C4((uint64_t)&v135, v61 + 16, &qword_1002A9E48);
  *(void *)(v9 + 104sub_10006F0B8(12LL, 0) = 0x6563697270LL;
  *(void *)(v9 + 1048) = 0xE500000000000000LL;
  sub_1000B3FEC();
  uint64_t v63 = v62;
  uint64_t v65 = v64;
  uint64_t v67 = v66;
  *(void *)(v9 + 108sub_10006F0B8(12LL, 0) = sub_1000175B0(&qword_1002AFB98);
  *(void *)(v9 + 105sub_100019F7C(v0 + 6) = v63;
  *(void *)(v9 + 106sub_100019F7C(v0 + 4) = v65;
  *(_DWORD *)(v9 + 107sub_100019F7C(v0 + 2) = v67;
  *(_BYTE *)(v9 + 107sub_100019F7C(v0 + 6) = BYTE4(v67) & 1;
  *(void *)(v9 + 10sub_100081CEC(v0 + 88) = 0x756F636341707061LL;
  *(void *)(v9 + 109sub_100019F7C(v0 + 6) = 0xEF6E656B6F54746ELL;
  *(void *)(v9 + 1128) = sub_1000175B0(&qword_1002AC060);
  uint64_t v68 = sub_1000BC244();
  sub_1000B62D0((uint64_t)v68);
  *(void *)(v9 + 113sub_100019F7C(v0 + 6) = 0x616470557473616CLL;
  *(void *)(v9 + 114sub_100019F7C(v0 + 4) = 0xEB00000000646574LL;
  sub_1000B79DC();
  *(void *)(v9 + 117sub_100019F7C(v0 + 6) = v6;
  sub_1000BC244();
  sub_100092B5C();
  *(void *)(v9 + 118sub_100019F7C(v0 + 4) = 0x6461726770557369LL;
  *(void *)(v9 + 119sub_100019F7C(v0 + 2) = 0xEA00000000006465LL;
  sub_1000B9094();
  *(void *)(v9 + 122sub_100019F7C(v0 + 4) = &type metadata for Bool;
  *(_BYTE *)(v9 + 120sub_10006F0B8(12LL, 0) = v69 & 1;
  *(void *)(v9 + 123sub_100019F7C(v0 + 2) = 0xD000000000000012LL;
  sub_1000BB9EC();
  *(void *)(v9 + 124sub_10006F0B8(12LL, 0) = v70;
  uint64_t v71 = sub_1000B85D4(0x19u, (uint64_t)&type metadata for UInt);
  *(void *)(v9 + 127sub_100019F7C(v0 + 2) = v125;
  *(void *)(v9 + 1248) = v71;
  *(_BYTE *)(v9 + 125sub_100019F7C(v0 + 6) = v72 & 1;
  *(void *)(v9 + 128sub_10006F0B8(12LL, 0) = 0xD000000000000013LL;
  sub_1000BB9EC();
  *(void *)(v9 + 12sub_100081CEC(v0 + 88) = v73;
  char v74 = sub_1000B62A4();
  *(void *)(v9 + 132sub_10006F0B8(12LL, 0) = &unk_1002810C0;
  *(_BYTE *)(v9 + 129sub_100019F7C(v0 + 6) = v74;
  *(void *)(v9 + 1328) = v41;
  sub_1000BB9EC();
  *(void *)(v9 + 133sub_100019F7C(v0 + 6) = v75;
  LOBYTE(v63) = sub_1000B3D9C();
  *(void *)(v9 + 1368) = sub_1000175B0(&qword_1002AFBA0);
  *(_BYTE *)(v9 + 134sub_100019F7C(v0 + 4) = v63;
  *(void *)(v9 + 137sub_100019F7C(v0 + 6) = 0xD000000000000016LL;
  sub_1000BB9EC();
  *(void *)(v9 + 138sub_100019F7C(v0 + 4) = v76;
  sub_1000B8508(0x1Cu);
  *(void *)(v9 + 141sub_100019F7C(v0 + 6) = v52;
  *(void *)(v9 + 139sub_100019F7C(v0 + 2) = v77;
  *(void *)(v9 + 140sub_10006F0B8(12LL, 0) = v78;
  *(void *)(v9 + 142sub_100019F7C(v0 + 4) = 0x52676E696C6C6962LL;
  *(void *)(v9 + 143sub_100019F7C(v0 + 2) = 0xEF646E4579727465LL;
  *(void *)(v9 + 146sub_100019F7C(v0 + 4) = v126;
  uint64_t v79 = sub_10005F580((void *)(v9 + 1440));
  sub_1000B6E1C((uint64_t)v79);
  *(void *)(v9 + 147sub_100019F7C(v0 + 2) = 0xD00000000000001CLL;
  sub_1000BB9EC();
  *(void *)(v9 + 148sub_10006F0B8(12LL, 0) = v80;
  *(void *)(v9 + 151sub_100019F7C(v0 + 2) = v126;
  uint64_t v82 = sub_10005F580(v81);
  sub_1000B6DC0((uint64_t)v82);
  *(void *)(v9 + 152sub_10006F0B8(12LL, 0) = 0x6553736568737570LL;
  *(void *)(v9 + 1528) = 0xEA0000000000746ELL;
  uint64_t v83 = sub_1000B6D50();
  LOBYTE(v65) = v84;
  *(void *)(v9 + 156sub_10006F0B8(12LL, 0) = sub_1000175B0(&qword_1002AFBA8);
  *(void *)(v9 + 153sub_100019F7C(v0 + 6) = v83;
  *(_BYTE *)(v9 + 154sub_100019F7C(v0 + 4) = v65 & 1;
  *(void *)(v9 + 1568) = 0xD000000000000013LL;
  sub_1000BB9EC();
  *(void *)(v9 + 157sub_100019F7C(v0 + 6) = v85;
  LOBYTE(v83) = sub_1000B4EE8();
  *(void *)(v9 + 1608) = sub_1000175B0(&qword_1002AC958);
  *(_BYTE *)(v9 + 158sub_100019F7C(v0 + 4) = v83;
  *(void *)(v9 + 161sub_100019F7C(v0 + 6) = 0xD00000000000001BLL;
  sub_1000BB9EC();
  *(void *)(v9 + 162sub_100019F7C(v0 + 4) = v86;
  *(void *)(v9 + 165sub_100019F7C(v0 + 6) = v126;
  uint64_t v88 = sub_10005F580(v87);
  sub_1000B6DC8(0x21u, (uint64_t)v88);
  *(void *)(v9 + 166sub_100019F7C(v0 + 4) = 0xD000000000000012LL;
  sub_1000BB9EC();
  *(void *)(v9 + 167sub_100019F7C(v0 + 2) = v89;
  sub_1000B6B48();
  uint64_t v91 = v90;
  LOBYTE(v65) = v92;
  *(void *)(v9 + 170sub_100019F7C(v0 + 4) = sub_1000175B0(&qword_1002AC950);
  *(void *)(v9 + 168sub_10006F0B8(12LL, 0) = v91;
  *(_BYTE *)(v9 + 16sub_100081CEC(v0 + 88) = v65 & 1;
  strcpy((char *)(v9 + 1712), "adHocOfferID");
  *(_BYTE *)(v9 + 1725) = 0;
  *(_WORD *)(v9 + 172sub_100019F7C(v0 + 6) = -5120;
  sub_1000B5D6C();
  *(void *)(v9 + 175sub_100019F7C(v0 + 2) = v52;
  *(void *)(v9 + 1728) = v93;
  *(void *)(v9 + 173sub_100019F7C(v0 + 6) = v94;
  strcpy((char *)(v9 + 1760), "winbackOfferID");
  *(_BYTE *)(v9 + 1775) = -18;
  sub_1000B5DE0();
  *(void *)(v9 + 180sub_10006F0B8(12LL, 0) = v52;
  *(void *)(v9 + 177sub_100019F7C(v0 + 6) = v95;
  *(void *)(v9 + 178sub_100019F7C(v0 + 4) = v96;
  strcpy((char *)(v9 + 1808), "nextRenewalIDs");
  *(_BYTE *)(v9 + 1823) = -18;
  sub_1000B6324();
  uint64_t v98 = v97;
  *(void *)(v9 + 1848) = sub_1000175B0(&qword_1002AFBB0);
  *(void *)(v9 + 182sub_100019F7C(v0 + 4) = v98;
  *(void *)(v9 + 185sub_100019F7C(v0 + 6) = 0x7541646C756F6873LL;
  *(void *)(v9 + 186sub_100019F7C(v0 + 4) = 0xEF77656E65726F74LL;
  sub_1000B6170();
  *(void *)(v9 + 189sub_100019F7C(v0 + 6) = &type metadata for Bool;
  *(_BYTE *)(v9 + 187sub_100019F7C(v0 + 2) = v99 & 1;
  strcpy((char *)(v9 + 1904), "hasIntroOffer");
  *(_WORD *)(v9 + 1918) = -4864;
  BOOL v100 = sub_1000B5BEC();
  *(void *)(v9 + 194sub_100019F7C(v0 + 4) = &type metadata for Bool;
  *(_BYTE *)(v9 + 192sub_10006F0B8(12LL, 0) = v100;
  *(void *)(v9 + 195sub_100019F7C(v0 + 2) = 0xD000000000000012LL;
  sub_1000BB9EC();
  *(void *)(v9 + 196sub_10006F0B8(12LL, 0) = v101;
  sub_1000B4F18();
  *(void *)(v9 + 199sub_100019F7C(v0 + 2) = v52;
  *(void *)(v9 + 1968) = v102;
  *(void *)(v9 + 197sub_100019F7C(v0 + 6) = v103;
  *(void *)(v9 + 200sub_10006F0B8(12LL, 0) = 0x6572697078457369LL;
  sub_1000BC24C();
  *(void *)(v9 + 2008) = v104;
  BOOL v105 = sub_1000B7790(4u);
  *(void *)(v9 + 204sub_10006F0B8(12LL, 0) = &type metadata for Bool;
  *(_BYTE *)(v9 + 201sub_100019F7C(v0 + 6) = v105;
  *(void *)(v9 + 2048) = 0x6C65636E61437369LL;
  *(void *)(v9 + 205sub_100019F7C(v0 + 6) = 0xEB0000000064656CLL;
  BOOL v106 = sub_1000B7790(3u);
  *(void *)(v9 + 20sub_100081CEC(v0 + 88) = &type metadata for Bool;
  *(_BYTE *)(v9 + 206sub_100019F7C(v0 + 4) = v106;
  *(void *)(v9 + 209sub_100019F7C(v0 + 6) = v41;
  sub_1000BB9EC();
  *(void *)(v9 + 210sub_100019F7C(v0 + 4) = v107;
  sub_1000B5088();
  *(void *)(v9 + 213sub_100019F7C(v0 + 6) = &type metadata for Bool;
  *(_BYTE *)(v9 + 211sub_100019F7C(v0 + 2) = v108 & 1;
  *(void *)(v9 + 214sub_100019F7C(v0 + 4) = 0xD000000000000016LL;
  sub_1000BB9EC();
  *(void *)(v9 + 215sub_100019F7C(v0 + 2) = v109;
  sub_1000BC054();
  sub_1000B4F9C(v127);
  LOBYTE(v5sub_100019F7C(v0 + 2) = v110;
  sub_1000BC1B4(v127);
  *(void *)(v9 + 218sub_100019F7C(v0 + 4) = &type metadata for Bool;
  *(_BYTE *)(v9 + 216sub_10006F0B8(12LL, 0) = v52 & 1;
  *(void *)(v9 + 219sub_100019F7C(v0 + 2) = 0xD000000000000011LL;
  sub_1000BB9EC();
  *(void *)(v9 + 220sub_10006F0B8(12LL, 0) = v111;
  char v112 = sub_1000B6C18(0x1Eu);
  *(void *)(v9 + 223sub_100019F7C(v0 + 2) = &type metadata for Bool;
  *(_BYTE *)(v9 + 2208) = v112 & 1;
  *(void *)(v9 + 224sub_10006F0B8(12LL, 0) = 0xD00000000000001CLL;
  sub_1000BB9EC();
  *(void *)(v9 + 2248) = v113;
  char v114 = sub_1000B6C18(0x1Du);
  *(void *)(v9 + 228sub_10006F0B8(12LL, 0) = &type metadata for Bool;
  *(_BYTE *)(v9 + 225sub_100019F7C(v0 + 6) = v114 & 1;
  *(void *)(v9 + 22sub_100081CEC(v0 + 88) = 0xD000000000000013LL;
  sub_1000BB9EC();
  *(void *)(v9 + 229sub_100019F7C(v0 + 6) = v115;
  sub_1000B5E54();
  *(void *)(v9 + 2328) = &type metadata for Bool;
  *(_BYTE *)(v9 + 230sub_100019F7C(v0 + 4) = v116 & 1;
  *(void *)(v9 + 233sub_100019F7C(v0 + 6) = 0xD00000000000001ALL;
  sub_1000BB9EC();
  *(void *)(v9 + 234sub_100019F7C(v0 + 4) = v117;
  sub_1000B5ADC();
  *(void *)(v9 + 237sub_100019F7C(v0 + 6) = &type metadata for Bool;
  *(_BYTE *)(v9 + 235sub_100019F7C(v0 + 2) = v118 & 1;
  *(void *)(v9 + 238sub_100019F7C(v0 + 4) = 0x6576697463417369LL;
  *(void *)(v9 + 239sub_100019F7C(v0 + 2) = 0xE800000000000000LL;
  sub_1000BC054();
  sub_1000B5190();
  LOBYTE(v5sub_100019F7C(v0 + 2) = v119;
  sub_1000BC1B4(v127);
  *(void *)(v9 + 242sub_100019F7C(v0 + 4) = &type metadata for Bool;
  *(_BYTE *)(v9 + 240sub_10006F0B8(12LL, 0) = v52 & 1;
  *(void *)(v9 + 243sub_100019F7C(v0 + 2) = 0xD000000000000017LL;
  sub_1000BB9EC();
  *(void *)(v9 + 244sub_10006F0B8(12LL, 0) = v120;
  sub_1000BC054();
  *(void *)(v9 + 247sub_100019F7C(v0 + 2) = v6;
  uint64_t v121 = sub_10005F580((void *)(v9 + 2448));
  sub_1000B6230(v127, (uint64_t)v121);
  sub_1000BC1B4(v127);
  strcpy((char *)(v9 + 2480), "updatedModels");
  *(_WORD *)(v9 + 249sub_100019F7C(v0 + 4) = -4864;
  uint64_t v122 = *(void *)&v10[OBJC_IVAR____TtC25ASOctaneSupportXPCService11Transaction_updatedModels];
  *(void *)(v9 + 252sub_10006F0B8(12LL, 0) = &unk_10027F998;
  *(void *)(v9 + 249sub_100019F7C(v0 + 6) = v122;
  uint64_t v123 = type metadata accessor for Mirror.DisplayStyle(0LL);
  sub_10001762C(v128, 1LL, 1LL, v123);
  (*(void (**)(uint64_t, void, uint64_t))(v129 + 104))( v130,  enum case for Mirror.AncestorRepresentation.generated(_:),  v131);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)(&v133, v9, v128, v130, v132);
}

uint64_t sub_1000BAC2C()
{
  return sub_1000B9EA4();
}

_UNKNOWN **sub_1000BAC4C()
{
  return &off_1002AFB58;
}

_UNKNOWN **sub_1000BAC58()
{
  return &off_1002AFB38;
}

uint64_t sub_1000BAC64()
{
  int v1 = *(unsigned __int8 *)(v0 + 48);
  if (v1 != 255) {
    sub_10009263C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), v1);
  }
  return swift_deallocObject(v0, 49LL, 7LL);
}

uint64_t sub_1000BAC98()
{
  uint64_t v1 = v0[3];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[5]);
    swift_bridgeObjectRelease(v0[7]);
    swift_bridgeObjectRelease(v0[9]);
    swift_bridgeObjectRelease(v0[11]);
  }

  return swift_deallocObject(v0, 96LL, 7LL);
}

void sub_1000BACE0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2
    || (sub_1000175B0((uint64_t *)&unk_1002B8BD0),
        uint64_t v3 = static _SetStorage.allocate(capacity:)(v2),
        uint64_t v4 = v3,
        (uint64_t v28 = *(void *)(a1 + 16)) == 0))
  {
LABEL_23:
    sub_100019390();
    sub_1000BBCD4();
    return;
  }

  unint64_t v5 = 0LL;
  uint64_t v6 = v3 + 56;
  while (v5 < *(void *)(a1 + 16))
  {
    uint64_t v7 = (uint64_t *)(a1 + 32 + 16 * v5);
    uint64_t v9 = *v7;
    uint64_t v8 = v7[1];
    Hasher.init(_seed:)(v29);
    sub_10001FFF0();
    String.hash(into:)(v29, v9, v8);
    Swift::Int v10 = Hasher._finalize()();
    uint64_t v11 = -1LL << *(_BYTE *)(v4 + 32);
    unint64_t v12 = v10 & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = *(void *)(v6 + 8 * (v12 >> 6));
    uint64_t v15 = 1LL << v12;
    if (((1LL << v12) & v14) != 0)
    {
      uint64_t v16 = *(void *)(v4 + 48);
      uint64_t v17 = (uint64_t *)(v16 + 16 * v12);
      uint64_t v18 = v17[1];
      BOOL v19 = *v17 == v9 && v18 == v8;
      if (v19 || (sub_100048720(*v17, v18, v9, v8) & 1) != 0)
      {
LABEL_11:
        sub_100023EEC();
        goto LABEL_22;
      }

      uint64_t v20 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v20;
        unint64_t v13 = v12 >> 6;
        uint64_t v14 = *(void *)(v6 + 8 * (v12 >> 6));
        uint64_t v15 = 1LL << v12;
        if ((v14 & (1LL << v12)) == 0) {
          break;
        }
        uint64_t v21 = (uint64_t *)(v16 + 16 * v12);
        uint64_t v22 = v21[1];
        BOOL v23 = *v21 == v9 && v22 == v8;
        if (v23 || (sub_100048720(*v21, v22, v9, v8) & 1) != 0) {
          goto LABEL_11;
        }
      }
    }

    *(void *)(v6 + 8 * sub_10007F0B0( v1,  v2,  &qword_1002AD740,  v3,  v4,  v5,  v6,  v7,  v12[0],  v12[1],  v12[2],  v12[3],  v12[4],  v12[5],  v12[6],  v12[7], v13) = v15 | v14;
    char v24 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v12);
    *char v24 = v9;
    v24[1] = v8;
    uint64_t v25 = *(void *)(v4 + 16);
    BOOL v26 = __OFADD__(v25, 1LL);
    uint64_t v27 = v25 + 1;
    if (v26) {
      goto LABEL_25;
    }
    *(void *)(v4 + 1sub_100019F7C(v0 + 6) = v27;
LABEL_22:
    if (++v5 == v28) {
      goto LABEL_23;
    }
  }

  __break(1u);
LABEL_25:
  __break(1u);
}

Swift::Int sub_1000BAE80(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptySetSingleton;
    goto LABEL_16;
  }

  sub_1000175B0(&qword_1002AFBB8);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v2);
  uint64_t v4 = (_BYTE *)result;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_16:
    swift_bridgeObjectRelease(a1);
    return (Swift::Int)v4;
  }

  unint64_t v6 = 0LL;
  Swift::Int v7 = result + 56;
  while (v6 < *(void *)(a1 + 16))
  {
    Swift::UInt v8 = *(unsigned __int8 *)(a1 + 32 + v6);
    Hasher.init(_seed:)(v19);
    Hasher._combine(_:)(v8);
    Swift::Int result = Hasher._finalize()();
    uint64_t v9 = -1LL << v4[32];
    unint64_t v10 = result & ~v9;
    unint64_t v11 = v10 >> 6;
    uint64_t v12 = *(void *)(v7 + 8 * (v10 >> 6));
    uint64_t v13 = 1LL << v10;
    uint64_t v14 = *((void *)v4 + 6);
    if (((1LL << v10) & v12) != 0)
    {
      uint64_t v15 = ~v9;
      while (1)
      {
        unint64_t v10 = (v10 + 1) & v15;
        unint64_t v11 = v10 >> 6;
        uint64_t v12 = *(void *)(v7 + 8 * (v10 >> 6));
        uint64_t v13 = 1LL << v10;
        if ((v12 & (1LL << v10)) == 0) {
          break;
        }
      }
    }

    *(void *)(v7 + 8 * v1Hasher._combine(_:)(v0 + 1) = v13 | v12;
    *(_BYTE *)(v14 + v1sub_10006F0B8(12LL, 0) = v8;
    uint64_t v16 = *((void *)v4 + 2);
    BOOL v17 = __OFADD__(v16, 1LL);
    uint64_t v18 = v16 + 1;
    if (v17) {
      goto LABEL_18;
    }
    *((void *)v4 + sub_100019F7C(v0 + 2) = v18;
LABEL_13:
    if (++v6 == v5) {
      goto LABEL_16;
    }
  }

  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1000BAFE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 0xFF) {
    return sub_10009263C(a1, a2, a3, a4, a5);
  }
  return a1;
}

void sub_1000BAFF4(uint64_t a1, void (*a2)(void, void, void, void, void))
{
}

uint64_t *sub_1000BB028(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1000BB070( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a8);
    return swift_bridgeObjectRelease(a10);
  }

  return result;
}

void type metadata accessor for Transaction.PriceIncreaseStatus()
{
}

void type metadata accessor for Transaction.TimeBasedEvents()
{
}

uint64_t sub_1000BB0EC(uint64_t a1)
{
  return sub_10009263C( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(_BYTE *)(a1 + 32));
}

uint64_t sub_1000BB100(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(_BYTE *)(a2 + 32);
  sub_1000925F0(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = v5;
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = v6;
  *(_BYTE *)(a1 + 3sub_100019F7C(v0 + 2) = v7;
  return a1;
}

uint64_t sub_1000BB160(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(_BYTE *)(a2 + 32);
  sub_1000925F0(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = v5;
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = v6;
  unsigned __int8 v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 3sub_100019F7C(v0 + 2) = v7;
  sub_10009263C(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t sub_1000BB1D0(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  __int128 v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1sub_100019F7C(v0 + 6) = v8;
  unsigned __int8 v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 3sub_100019F7C(v0 + 2) = v3;
  sub_10009263C(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t sub_1000BB218(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFC && *(_BYTE *)(a1 + 33))
    {
      int v2 = *(_DWORD *)a1 + 251;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
      if (v3 <= 4) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_1000BB258(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 1sub_100019F7C(v0 + 6) = 0LL;
    *(void *)(result + 2sub_100019F7C(v0 + 4) = 0LL;
    *(_BYTE *)(result + 3sub_100019F7C(v0 + 2) = 0;
    *(void *)uint64_t result = a2 - 252;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 33) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 3sub_100019F7C(v0 + 2) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000BB2A0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_1000BB2A8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 3sub_100019F7C(v0 + 2) = a2;
  return result;
}

void type metadata accessor for Transaction.RenewalType()
{
}

uint64_t sub_1000BB2BC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(vsub_100019F7C(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100019F7C(v0 + 4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1000BB308 + 4 * byte_1001FC516[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000BB33C + 4 * byte_1001FC511[v4]))();
}

uint64_t sub_1000BB33C(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 + 1) = v1;
  return result;
}

uint64_t sub_1000BB344(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000BB34CLL);
  }
  return result;
}

uint64_t sub_1000BB358(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000BB360LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1000BB364(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 + 1) = v1;
  return result;
}

uint64_t sub_1000BB36C(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 + 1) = v1;
  return result;
}

void type metadata accessor for Transaction.State()
{
}

uint64_t sub_1000BB384(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(vsub_100019F7C(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100019F7C(v0 + 4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000BB3D0 + 4 * byte_1001FC520[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000BB404 + 4 * byte_1001FC51B[v4]))();
}

uint64_t sub_1000BB404(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 + 1) = v1;
  return result;
}

uint64_t sub_1000BB40C(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000BB414LL);
  }
  return result;
}

uint64_t sub_1000BB420(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000BB428LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000BB42C(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 + 1) = v1;
  return result;
}

uint64_t sub_1000BB434(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 + 1) = v1;
  return result;
}

void type metadata accessor for Transaction.AskToBuyStatus()
{
}

uint64_t sub_1000BB44C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(vsub_100019F7C(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100019F7C(v0 + 4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000BB498 + 4 * byte_1001FC52A[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000BB4CC + 4 * byte_1001FC525[v4]))();
}

uint64_t sub_1000BB4CC(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 + 1) = v1;
  return result;
}

uint64_t sub_1000BB4D4(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000BB4DCLL);
  }
  return result;
}

uint64_t sub_1000BB4E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000BB4F0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000BB4F4(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 + 1) = v1;
  return result;
}

uint64_t sub_1000BB4FC(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 + 1) = v1;
  return result;
}

void type metadata accessor for Transaction.Action()
{
}

uint64_t sub_1000BB514(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(vsub_100019F7C(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100019F7C(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000BB560 + 4 * byte_1001FC534[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000BB594 + 4 * byte_1001FC52F[v4]))();
}

uint64_t sub_1000BB594(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 + 1) = v1;
  return result;
}

uint64_t sub_1000BB59C(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000BB5A4LL);
  }
  return result;
}

uint64_t sub_1000BB5B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000BB5B8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000BB5BC(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 + 1) = v1;
  return result;
}

uint64_t sub_1000BB5C4(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 + 1) = v1;
  return result;
}

void type metadata accessor for Transaction.RevocationReason()
{
}

unint64_t sub_1000BB5E0()
{
  unint64_t result = qword_1002AFBC8;
  if (!qword_1002AFBC8)
  {
    unint64_t result = swift_getWitnessTable("u5\b", &unk_10027FD78);
    atomic_store(result, (unint64_t *)&qword_1002AFBC8);
  }

  return result;
}

unint64_t sub_1000BB620()
{
  unint64_t result = qword_1002AFBD0;
  if (!qword_1002AFBD0)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FC91C, &unk_10027FCE8);
    atomic_store(result, (unint64_t *)&qword_1002AFBD0);
  }

  return result;
}

unint64_t sub_1000BB660()
{
  unint64_t result = qword_1002AFBD8;
  if (!qword_1002AFBD8)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FCA0C, &unk_10027FC58);
    atomic_store(result, (unint64_t *)&qword_1002AFBD8);
  }

  return result;
}

unint64_t sub_1000BB6A0()
{
  unint64_t result = qword_1002AFBE0;
  if (!qword_1002AFBE0)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FCAFC, &unk_10027FBC8);
    atomic_store(result, (unint64_t *)&qword_1002AFBE0);
  }

  return result;
}

unint64_t sub_1000BB6E0()
{
  unint64_t result = qword_1002AFBE8;
  if (!qword_1002AFBE8)
  {
    unint64_t result = swift_getWitnessTable("%2\b", &unk_10027FAA0);
    atomic_store(result, (unint64_t *)&qword_1002AFBE8);
  }

  return result;
}

unint64_t sub_1000BB720()
{
  unint64_t result = qword_1002AFBF0;
  if (!qword_1002AFBF0)
  {
    unint64_t result = swift_getWitnessTable("=2\b", &unk_10027FAA0);
    atomic_store(result, (unint64_t *)&qword_1002AFBF0);
  }

  return result;
}

unint64_t sub_1000BB760()
{
  unint64_t result = qword_1002AFBF8;
  if (!qword_1002AFBF8)
  {
    unint64_t result = swift_getWitnessTable("\r2\b", &unk_10027FAA0);
    atomic_store(result, (unint64_t *)&qword_1002AFBF8);
  }

  return result;
}

unint64_t sub_1000BB7A0()
{
  unint64_t result = qword_1002AFC00;
  if (!qword_1002AFC00)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FCBDC, &unk_10027FAA0);
    atomic_store(result, (unint64_t *)&qword_1002AFC00);
  }

  return result;
}

unint64_t sub_1000BB7E0()
{
  unint64_t result = qword_1002AFC08;
  if (!qword_1002AFC08)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FCDA4, &unk_10027FA80);
    atomic_store(result, (unint64_t *)&qword_1002AFC08);
  }

  return result;
}

unint64_t sub_1000BB81C()
{
  unint64_t result = qword_1002AFC10;
  if (!qword_1002AFC10)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FC7B4, &unk_10027FD78);
    atomic_store(result, (unint64_t *)&qword_1002AFC10);
  }

  return result;
}

unint64_t sub_1000BB858()
{
  unint64_t result = qword_1002AFC18;
  if (!qword_1002AFC18)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FCD2C, &unk_10027FA80);
    atomic_store(result, (unint64_t *)&qword_1002AFC18);
  }

  return result;
}

unint64_t sub_1000BB894()
{
  unint64_t result = qword_1002AFC20;
  if (!qword_1002AFC20)
  {
    unint64_t result = swift_getWitnessTable("-3\b", &unk_10027FBC8);
    atomic_store(result, (unint64_t *)&qword_1002AFC20);
  }

  return result;
}

unint64_t sub_1000BB8D0()
{
  unint64_t result = qword_1002AFC28;
  if (!qword_1002AFC28)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FC994, &unk_10027FC58);
    atomic_store(result, (unint64_t *)&qword_1002AFC28);
  }

  return result;
}

unint64_t sub_1000BB90C()
{
  unint64_t result = qword_1002AFC30;
  if (!qword_1002AFC30)
  {
    unint64_t result = swift_getWitnessTable("\r5\b", &unk_10027FCE8);
    atomic_store(result, (unint64_t *)&qword_1002AFC30);
  }

  return result;
}

uint64_t sub_1000BB994(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_1000BB99C(uint64_t a1, uint64_t a2)
{
  return String.hash(into:)(a1, a2, v2);
}

void *sub_1000BB9A4(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va);
}

void *sub_1000BB9B0(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va);
}

unint64_t sub_1000BB9B8()
{
  return 0xD000000000000017LL;
}

uint64_t sub_1000BB9C8()
{
  return 0x75736E6F436E6F4ELL;
}

  ;
}

void sub_1000BB9F8(uint64_t a1@<X8>)
{
}

uint64_t sub_1000BBA14()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

void sub_1000BBA28( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000BBA30@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease((a1 - 32) | 0x8000000000000000LL);
}

uint64_t sub_1000BBA3C()
{
  return v0;
}

uint64_t sub_1000BBA54@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 21sub_100019F7C(v0 + 6) = a1;
  return v2;
}

  ;
}

uint64_t sub_1000BBA88()
{
  return 0x62616D75736E6F43LL;
}

void sub_1000BBAAC()
{
  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

uint64_t sub_1000BBABC(uint64_t a1, uint64_t a2)
{
  return String.hash(into:)(a1, a2, 0xE400000000000000LL);
}

void sub_1000BBAC4(uint64_t a1, uint64_t a2)
{
}

void sub_1000BBACC( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  v13._countAndFlagsBits = v12;
  v13._object = v11;
  String.append(_:)(v13);
}

void sub_1000BBADC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000BBB58(void *a1)
{
  return sub_1000B3DFC(a1, 9u);
}

void sub_1000BBB60( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t sub_1000BBB6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, 36LL, 2LL, a7, 17LL);
}

uint64_t sub_1000BBB84()
{
  return swift_retain(*(void *)(v1 + 8 * v0));
}

uint64_t sub_1000BBB90()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v0, v1);
}

uint64_t sub_1000BBB9C()
{
  return sub_1000D868C(*(void *)(v0 - 88), *(void *)(v0 - 80));
}

uint64_t sub_1000BBBB0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_1000BBBC4()
{
  return 0x62616D75736E6F43LL;
}

void sub_1000BBBD8(uint64_t a1@<X8>, uint64_t a2)
{
}

uint64_t sub_1000BBBFC()
{
  return v0;
}

void sub_1000BBC10(int a1, Swift::UInt32 a2)
{
}

  ;
}

uint64_t sub_1000BBC2C()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 56));
}

  ;
}

void sub_1000BBC60()
{
  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

  ;
}

double sub_1000BBC94()
{
  return 0.0;
}

void sub_1000BBCA0( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  v13._countAndFlagsBits = v12;
  v13._object = v11;
  String.append(_:)(v13);
}

  ;
}

  ;
}

void sub_1000BBCF0( uint64_t a1, void (*a2)(void, void, void, void, void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000BBCF8()
{
  return 0x75736E6F436E6F4ELL;
}

void sub_1000BBD1C(Swift::UInt a1)
{
}

uint64_t sub_1000BBD24()
{
  return v0 + 208;
}

uint64_t sub_1000BBD30()
{
  return v0 + 208;
}

void sub_1000BBD54()
{
}

uint64_t sub_1000BBD70( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return swift_release(a15);
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000BBE50()
{
  return v0;
}

uint64_t sub_1000BBE64()
{
  return sub_1000925F0(v3, v2, v1, v4, v0);
}

uint64_t sub_1000BBE7C(uint64_t a1, uint64_t a2)
{
  return String.hash(into:)(v2, a1, a2);
}

uint64_t sub_1000BBE94()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))(v0, v1);
}

void sub_1000BBEA8()
{
}

void sub_1000BBEB0()
{
}

  ;
}

  ;
}

void sub_1000BBEF0()
{
}

uint64_t sub_1000BBEFC(uint64_t a1)
{
  return sub_10001D158(a1, 1LL, v1);
}

uint64_t sub_1000BBF08(uint64_t a1, uint64_t a2)
{
  return String.hash(into:)(a1, a2, 0xE600000000000000LL);
}

void sub_1000BBF10(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000BBF18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return String.hash(into:)(a1, a2, a3 & 0xFFFFFFFFFFFFLL | 0xED00000000000000LL);
}

void sub_1000BBF20(uint64_t a1, uint64_t a2)
{
}

  ;
}

  ;
}

uint64_t sub_1000BBF40()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

  ;
}

uint64_t sub_1000BBF60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10001762C(a1, a2, a3, a4);
}

  ;
}

  ;
}

uint64_t sub_1000BBF8C()
{
  return *(void *)(v0 + 80);
}

  ;
}

uint64_t sub_1000BBFA4()
{
  return 0LL;
}

  ;
}

  ;
}

  ;
}

void sub_1000BBFE4(uint64_t a1@<X8>)
{
  *(void *)(v1 + a1) |= 3uLL;
}

void sub_1000BBFF4()
{
}

NSDictionary sub_1000BBFFC()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_1000BC00C(uint64_t a1)
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a1, v2, v1, v3);
}

NSDictionary sub_1000BC01C()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_1000BC02C(unsigned __int8 a1)
{
  return sub_1000B85D4(a1, v1);
}

uint64_t sub_1000BC034()
{
  return *(void *)(v0 + 24);
}

void sub_1000BC044()
{
  v0[28] = 0LL;
  v0[29] = 0LL;
  v0[27] = 0LL;
}

uint64_t sub_1000BC054()
{
  return static Date.now.getter();
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000BC09C()
{
  return 0x62616D75736E6F43LL;
}

  ;
}

  ;
}

void sub_1000BC0DC(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_1000BC0E4()
{
  return v0;
}

uint64_t sub_1000BC0FC()
{
  return v0;
}

uint64_t sub_1000BC114()
{
  return v0;
}

  ;
}

  ;
}

uint64_t sub_1000BC150@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

  ;
}

  ;
}

void sub_1000BC180(uint64_t a1@<X8>)
{
  *(void *)(v2 + aHasher._combine(_:)(v0 + 1) = v1 | 2;
}

  ;
}

  ;
}

uint64_t sub_1000BC1B4(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_1000BC1BC@<X0>(int a1@<W8>)
{
  return a1 | (v1 << 8);
}

uint64_t sub_1000BC1C8(unsigned int a1, int a2)
{
  return a2 ^ a1;
}

  ;
}

uint64_t sub_1000BC1E4(uint64_t a1)
{
  return sub_10001D158(v1, 1LL, a1);
}

  ;
}

  ;
}

  ;
}

void *sub_1000BC244()
{
  return sub_10005F580(v0);
}

  ;
}

uint64_t sub_1000BC258(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1 & 0xFFFFFFFFFFFFLL | 0xEA00000000000000LL);
}

uint64_t sub_1000BC260()
{
  return swift_bridgeObjectRelease((v0 - 32) | 0x8000000000000000LL);
}

_OWORD *sub_1000BC26C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, __int128 a12)
{
  return sub_100034728(&a9, &a12);
}

uint64_t sub_1000BC278()
{
  return sub_1000B9138();
}

void sub_1000BC280()
{
}

void sub_1000BC288(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t sub_1000BC290(unsigned __int8 a1)
{
  return sub_1000B85D4(a1, v1);
}

double sub_1000BC29C(uint64_t a1)
{
  return Date.timeIntervalSinceReferenceDate.getter(a1);
}

void sub_1000BC2A4()
{
}

uint64_t sub_1000BC2AC()
{
  return 0x75736E6F436E6F4ELL;
}

uint64_t sub_1000BC2C0()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 48));
}

void sub_1000BC2CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

id sub_1000BC2D4(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_1000BC2DC()
{
  return v0 + 48;
}

  ;
}

  ;
}

  ;
}

unint64_t sub_1000BC32C()
{
  return 0xD000000000000015LL;
}

  ;
}

  ;
}

void sub_1000BC360(int a1, Swift::UInt a2)
{
}

  ;
}

  ;
}

  ;
}

id sub_1000BC3C0()
{
  return *(id *)(v0 + OBJC_IVAR____TtC25ASOctaneSupportXPCService15DatabaseSession_connection);
}

void sub_1000BC418(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC25ASOctaneSupportXPCService15DatabaseSession_connection);
  *(void *)(v1 + OBJC_IVAR____TtC25ASOctaneSupportXPCService15DatabaseSession_connection) = a1;
}

id sub_1000BC42C(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR____TtC25ASOctaneSupportXPCService15DatabaseSession_connection] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for DatabaseSession();
  return objc_msgSendSuper2(&v3, "init");
}

uint64_t sub_1000BC48C()
{
  uint64_t v78 = v5;
  uint64_t v79 = v6;
  uint64_t v46 = v7;
  uint64_t v47 = v0;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  sub_1000226C8();
  __chkstk_darwin(v12);
  sub_1000C05F0();
  __chkstk_darwin(v13);
  sub_1000C060C();
  __chkstk_darwin(v14);
  sub_1000C0818();
  sub_1000175B0(&qword_1002AC060);
  sub_1000226C8();
  __chkstk_darwin(v15);
  sub_1000C06EC();
  uint64_t v45 = sub_1000C0368(v16, (unint64_t *)&qword_1002AC930, &off_10026E2E8);
  uint64_t v17 = *(void *)(v11 + 192);
  uint64_t v18 = *(void *)(v11 + 200);
  __int128 v71 = 0u;
  __int128 v72 = 0u;
  char v73 = -1;
  sub_100048814();
  sub_1000C09E8();
  uint64_t v22 = sub_1000C0260(v4, v19, v20, v21);
  sub_1000C08D0(v3);
  sub_1000C08D0(v2);
  sub_1000C08D0(v1);
  sub_1000931C8();
  sub_10001DBCC();
  sub_1000C04B0();
  __int16 v58 = v23;
  sub_1000C05B8();
  sub_1000C0768();
  sub_1000C0244( v46,  v9,  v24,  v25,  v26,  v27,  v28,  v29,  v44,  SHIBYTE(v44),  v45,  v46,  v47,  v48[0],  v48[1],  v49,  v50,  v51,  v52,  v53,  v54,  v55,  v56,  v17,  v18,  0LL,  v58,  SHIBYTE(v58),  (uint64_t)&v71,  &v76,  0LL,  v61,  v62,  v63,  v64[0],  v64[1],  v65,  v66,  v67,  v68,  v69,  v70,  v71,  *((uint64_t *)&v71 + 1),  v72,  *((uint64_t *)&v72 + 1),  v73,  v74,  v75,
    v76,
    v77);
  sub_1000C0A5C();
  sub_1000175B0((uint64_t *)&unk_1002AFCF0);
  sub_1000C0760();
  uint64_t v30 = sub_1000C0758((uint64_t)_swiftEmptyArrayStorage, (uint64_t)&type metadata for TransactionEntity.Key);
  uint64_t v31 = (void *)sub_1001983A0(v22, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)&off_1002719D8, v30);
  sub_10001A3F8();
  sub_10001A420();
  sub_1000C0A28();
  uint64_t v35 = sub_1000BFBB8(v32, v33, v34);
  for (uint64_t i = *(void *)((v35 & 0xFFFFFFFFFFFFF8LL) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter(v43))
  {
    uint64_t v37 = 4LL;
    while (1)
    {
      id v38 = (v35 & 0xC000000000000001LL) != 0 ? (id)sub_1000C0A80() : *(id *)(v35 + 8 * v37);
      char v39 = v38;
      uint64_t v40 = v37 - 3;
      if (__OFADD__(v37 - 4, 1LL)) {
        break;
      }
      sub_1000B87D4();

      sub_1000C01A4((uint64_t)v48, (uint64_t)&v57);
      if (v59 != 255)
      {
        sub_1000AF7D4(&v57, (uint64_t)&v60);
        sub_1000AF7D4(&v60, (uint64_t)v64);
        if (!(_BYTE)v70)
        {

          sub_1000C01EC((uint64_t)v48);
          uint64_t v41 = 1LL;
          goto LABEL_14;
        }

        sub_1000C01EC((uint64_t)v48);
      }

      ++v37;
      if (v40 == i) {
        goto LABEL_12;
      }
    }

    __break(1u);
LABEL_16:
    if (v35 < 0) {
      uint64_t v43 = v35;
    }
    else {
      uint64_t v43 = v35 & 0xFFFFFFFFFFFFFF8LL;
    }
  }

#error "1000BC84C: call analysis failed (funcsize=93)"
void sub_1000BC8AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  _BYTE v37[3];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[10];
  sub_1000353E0();
  uint64_t v40 = v4;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  sub_1000226C8();
  __chkstk_darwin(v11);
  sub_1000C05D4();
  __chkstk_darwin(v12);
  sub_1000C0744();
  __chkstk_darwin(v13);
  sub_1000C096C();
  sub_1000175B0(&qword_1002AC060);
  sub_1000226C8();
  __chkstk_darwin(v14);
  sub_1000C05A0();
  sub_1000C0368(v15, (unint64_t *)&qword_1002AC930, &off_10026E2E8);
  sub_1000C0588();
  sub_1000C0A00();
  uint64_t v19 = sub_1000C0260(v3, v16, v17, v18);
  sub_1000C0418(v19);
  sub_10001FFF0();
  sub_1000C0880();
  uint64_t v32 = v20;
  sub_1000C0704();
  sub_1000C0850();
  sub_1000C035C( v10,  v8,  0LL,  1,  v40,  v6,  v21,  v22,  v23,  v24,  0LL,  1,  v27,  v28,  HIBYTE(v28),  v29,  1,  v30,  v31,  SBYTE1(v31),  SBYTE2(v31),  HIBYTE(v31),  1u,  v32,  *((uint64_t *)&v32 + 1),  0LL,  1,  0,  (uint64_t)&v41,  v42,  0LL,  1,  v33,  v34,  v35,  SHIBYTE(v35),  v36,  v37[0],  v37[1],  v37[2],  v38,  v39,  v2,  v1,  v0,  0LL,  1,  5,  0LL,
    0LL,
    1u);
  sub_1000C0AF4();
  sub_1000175B0((uint64_t *)&unk_1002AFCF0);
  sub_1000C0760();
  uint64_t v25 = sub_1000C0758((uint64_t)_swiftEmptyArrayStorage, (uint64_t)&type metadata for TransactionEntity.Key);
  uint64_t v26 = sub_1000C0910(v25);
  sub_100019390();
  sub_100023EEC();
  sub_1000BFA00(v26);
  sub_1000C09D0();
  sub_1000C09C4();
  sub_10002A580();
}

void sub_1000BCA40()
{
  uint64_t v79 = v2;
  uint64_t v80 = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  sub_1000226C8();
  __chkstk_darwin(v8);
  sub_1000C097C();
  __chkstk_darwin(v9);
  sub_1000C0AC0();
  __chkstk_darwin(v10);
  sub_1000C0A18();
  sub_1000175B0(&qword_1002AC060);
  sub_1000226C8();
  __chkstk_darwin(v11);
  sub_100092B28();
  sub_1000C0368(v12, (unint64_t *)&qword_1002AC930, &off_10026E2E8);
  sub_1000C0588();
  sub_1000C0A00();
  uint64_t v16 = sub_1000C0260(v1, v13, v14, v15);
  sub_10001762C(v0, 1LL, 1LL, v16);
  sub_1000C03E8();
  sub_10001DBCC();
  sub_1000C04F8();
  uint64_t v64 = (uint64_t *)&v51;
  uint64_t v65 = 0LL;
  uint64_t v63 = v44;
  sub_1000C0790();
  sub_1000C0828();
  sub_1000C0244( v7,  v5,  v17,  v18,  v19,  v20,  v21,  v22,  v44[0],  v44[1],  v45,  v46,  v47,  v48,  v49,  v50,  v51,  v52,  v53,  v54,  v55,  v56,  v57,  v58,  v59,  v60,  v61,  v62,  (uint64_t)v63,  v64,  v65,  v66,  v67,  v68,  v69,  v70,  v71,  v72,  v73,  v74,  v75,  v76,  v77,  v78,  v79,  v80,  v81,  v82,  v83,
    v84,
    v85);
  uint64_t v24 = v23;
  sub_1000C0338( 0.0,  v32,  v33,  v34,  v35,  v36,  v37,  v38,  v23,  v25,  v26,  v27,  v28,  v29,  v30,  v31,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  (uint64_t)&off_100271A50,  0LL,  0LL,  0LL,  0.0,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL);
  uint64_t v40 = (void *)sub_1001983A0(v24, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, v39);
  sub_10001A3F8();
  sub_10003561C();
  sub_1000C0A28();
  sub_1000BFBB8(v41, v42, v43);

  sub_1000C09C4();
  sub_10002A580();
}

void sub_1000BCBE8()
{
  uint64_t v88 = v3;
  uint64_t v89 = v4;
  uint64_t v6 = v5;
  uint64_t v64 = v7;
  sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  sub_1000226C8();
  __chkstk_darwin(v8);
  sub_1000C05F0();
  __chkstk_darwin(v9);
  sub_1000C060C();
  __chkstk_darwin(v10);
  sub_1000C0818();
  sub_1000175B0(&qword_1002AC060);
  sub_1000226C8();
  __chkstk_darwin(v11);
  sub_1000C06EC();
  uint64_t v12 = *(void **)(v0 + OBJC_IVAR____TtC25ASOctaneSupportXPCService15DatabaseSession_connection);
  uint64_t v13 = sub_1000175B0((uint64_t *)&unk_1002AFCE0);
  uint64_t inited = swift_initStackObject(v13, (char *)&v71 + 8);
  *(_OWORD *)(inited + 1sub_100019F7C(v0 + 6) = xmmword_1001FB800;
  uint64_t v63 = sub_1000C0368(inited, (unint64_t *)&qword_1002AC930, &off_10026E2E8);
  __int128 v77 = 0u;
  __int128 v78 = 0u;
  LOBYTE(v79) = -1;
  sub_100048814();
  *(double *)&__int128 v15 = sub_1000C0AA0();
  __int128 v83 = v15;
  __int128 v84 = v15;
  __int128 v85 = v15;
  __int128 v86 = v15;
  __int128 v87 = v15;
  uint64_t v19 = sub_1000C0260(v2, v16, v17, v18);
  sub_1000C07B8();
  sub_10001762C(v1, 1LL, 1LL, v19);
  sub_1000931C8();
  id v20 = v12;
  *(double *)&__int128 v21 = sub_1000C04B0();
  uint64_t v75 = (uint64_t *)&v83;
  uint64_t v76 = 0LL;
  char v74 = &v77;
  __int16 v73 = v22;
  uint64_t v72 = 0LL;
  __int128 v71 = v21;
  sub_1000C0A68();
  LOBYTE(v6sub_100019F7C(v0 + 4) = 1;
  sub_1000C098C();
  sub_1000C0244( v64,  v6,  v23,  v24,  v25,  v26,  v27,  v28,  v62,  SHIBYTE(v62),  v63,  1,  v65,  v66,  BYTE1(v66),  (uint64_t)v67,  1,  0LL,  1,  2,  2,  0x16u,  1u,  v71,  *((uint64_t *)&v71 + 1),  v72,  v73,  SHIBYTE(v73),  (uint64_t)v74,  v75,  v76,  v77,  *((uint64_t *)&v77 + 1),  v78,  SBYTE8(v78),  SBYTE9(v78),  v79,  v80,  v81,  v82,  v83,  *((uint64_t *)&v83 + 1),  v84,  *((uint64_t *)&v84 + 1),  v85,  *((uint64_t *)&v85 + 1),  v86,  SBYTE1(v86),  *((uint64_t *)&v86 + 1),
    v87,
    BYTE8(v87));
  uint64_t v30 = v29;
  double v31 = sub_1000C0800();
  sub_1000C0338( v31,  v41,  v42,  v43,  v44,  v45,  v46,  v47,  v32,  v33,  v34,  v35,  v36,  v37,  v38,  v39,  *(uint64_t *)&v31,  (uint64_t)v40,  *(uint64_t *)&v31,  (uint64_t)v40,  *(uint64_t *)&v31,  (uint64_t)v40,  *(uint64_t *)&v31,  (uint64_t)v40,  *(uint64_t *)&v31,  (uint64_t)v40,  v31,  v40,  *(uint64_t *)&v31,  (uint64_t)v40,  0LL,  (uint64_t)&off_100271C08,  *(uint64_t *)&v31,  (uint64_t)v40,  v90,  v91,  v92,  v93,  v94,  v95,  v96,  v97,  v98);
  uint64_t v49 = sub_1001983A0(v30, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)&off_100271BE0, v48);
  sub_100023EEC();
  uint64_t v50 = sub_10001A420();
  *(void *)(inited + 3sub_100019F7C(v0 + 2) = v49;
  sub_1000C0368(v50, &qword_1002AFD00, off_10026E2D0);
  uint64_t v68 = &type metadata for String;
  unint64_t v66 = 0xEA00000000006461LL;
  id v51 = sub_100199F5C(0, &v65, 1u);
  *(void *)(inited + 4sub_10006F0B8(12LL, 0) = v51;
  uint64_t v65 = inited;
  specialized Array._endMutation()(v51);
  if (v65 < 0 || (v65 & 0x4000000000000000LL) != 0)
  {
    sub_10001ED74();
    sub_100017760();
    sub_10001A3F8();
  }

  else
  {
    sub_10001ED74();
  }

  uint64_t v52 = sub_1000C0AB8();
  sub_1000C0368(v52, &qword_1002AFD08, off_10026E2D8);
  sub_1000C08C8();
  uint64_t v54 = v53;
  sub_100024F0C();
  sub_10019A014(v54);
  unsigned __int8 v56 = v55;
  sub_10001A3F8();
  sub_1000B994C();
  uint64_t v58 = v57;

  *(void *)&__int128 v71 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String, v52);
  uint64_t v59 = sub_100019310((uint64_t)&unk_1002801B0, 24LL);
  *(void *)(v59 + 1sub_100019F7C(v0 + 6) = &v71;
  uint64_t v60 = sub_1000AC93C((uint64_t)&unk_1002801D8);
  *(void *)(v60 + 1sub_100019F7C(v0 + 6) = sub_1000C0198;
  *(void *)(v60 + 2sub_100019F7C(v0 + 4) = v59;
  char v69 = sub_1000C0230;
  uint64_t v70 = v60;
  uint64_t v65 = (uint64_t)_NSConcreteStackBlock;
  unint64_t v66 = 1107296256LL;
  uint64_t v67 = sub_10019F444;
  uint64_t v68 = &unk_1002801F0;
  char v61 = _Block_copy(&v65);
  swift_retain();
  swift_release();
  [v58 enumerateMemoryEntitiesUsingBlock:v61];
  _Block_release(v61);
  LOBYTE(v6Hasher._combine(_:)(v0 + 1) = sub_1000C09B8(v60, (uint64_t)"", 117LL, 96LL);
  swift_release();
  if ((v61 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    sub_10001ED74();
    sub_100017818();

    sub_10001A3F8();
    sub_10001EDD8();
    sub_10001EDA0();
    sub_10002A580();
  }

void sub_1000BD038(void *a1)
{
  uint64_t v2 = type metadata accessor for Transaction();
  uint64_t v3 = swift_dynamicCastClass(a1, v2);
  if (v3)
  {
    uint64_t v4 = v3;
    id v10 = a1;
    sub_1000B8508(0xFu);
    if (v6)
    {
      uint64_t v7 = v5;
      uint64_t v8 = v6;
      id v9 = v10;
      sub_1001B8218(v4, v7, v8);

      swift_bridgeObjectRelease();
    }

    else
    {
    }
  }

void sub_1000BD104()
{
  uint64_t v4 = v3;
  uint64_t v82 = v6;
  uint64_t v83 = v5;
  uint64_t v81 = v7;
  sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  sub_1000226C8();
  __chkstk_darwin(v8);
  sub_100092F38();
  uint64_t v11 = v9 - v10;
  __chkstk_darwin(v12);
  sub_1000C097C();
  __chkstk_darwin(v13);
  sub_1000C0818();
  sub_1000175B0(&qword_1002AC060);
  sub_1000226C8();
  __chkstk_darwin(v14);
  sub_1000C05A0();
  uint64_t v84 = sub_1000175B0((uint64_t *)&unk_1002AFCE0);
  uint64_t inited = swift_initStackObject(v84, v89);
  *(_OWORD *)(inited + 1sub_100019F7C(v0 + 6) = xmmword_1001FCE80;
  sub_1000C0368(inited, (unint64_t *)&qword_1002AC930, &off_10026E2E8);
  __int128 v90 = 0u;
  __int128 v91 = 0u;
  char v92 = -1;
  sub_100048814();
  *(double *)&__int128 v16 = sub_1000C0AA0();
  v93[0] = v16;
  v93[1] = v16;
  v93[2] = v16;
  v93[3] = v16;
  v93[4] = v16;
  sub_1000C0260(v2, v17, v18, v19);
  sub_1000C08F0(v1);
  sub_1000C08F0(v0);
  sub_1000C08F0(v11);
  swift_bridgeObjectRetain();
  sub_1000356F4();
  sub_1000C06B8();
  sub_1000C0880();
  __int16 v70 = v20;
  __int128 v69 = v21;
  sub_1000C0850();
  sub_1000C098C();
  sub_1000C035C( v82,  v4,  0LL,  1,  v83,  v81,  v22,  v23,  v64,  SHIBYTE(v64),  v65,  1,  v66,  v67,  HIBYTE(v67),  v68,  1,  0LL,  1,  2,  2,  0x16u,  1u,  v69,  *((uint64_t *)&v69 + 1),  0LL,  v70,  SHIBYTE(v70),  (uint64_t)&v90,  (uint64_t *)v93,  0LL,  1,  v71,  v72,  v73,  SHIBYTE(v73),  v74,  v75[0],  v75[1],  v75[2],  v76,  v77,  v1,  v0,  v11,  0LL,  v78,  SHIBYTE(v78),  v79,
    v80,
    1u);
  uint64_t v25 = v24;
  double v26 = sub_1000C0800();
  sub_1000C0338( v26,  v36,  v37,  v38,  v39,  v40,  v41,  v42,  v27,  v28,  v29,  v30,  v31,  v32,  v33,  v34,  *(uint64_t *)&v26,  (uint64_t)v35,  *(uint64_t *)&v26,  (uint64_t)v35,  *(uint64_t *)&v26,  (uint64_t)v35,  *(uint64_t *)&v26,  (uint64_t)v35,  *(uint64_t *)&v26,  (uint64_t)v35,  v26,  v35,  *(uint64_t *)&v26,  (uint64_t)v35,  0LL,  (uint64_t)&off_100271A00,  *(uint64_t *)&v26,  (uint64_t)v35,  v89[1],  v89[2],  v89[3],  v89[4],  v89[5],  v89[6],  v90,  *((uint64_t *)&v90 + 1),  v91);
  uint64_t v44 = sub_1001983A0(v25, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, v43);
  sub_10001A3F8();
  uint64_t v45 = sub_10003561C();
  *(void *)(inited + 3sub_100019F7C(v0 + 2) = v44;
  Date.timeIntervalSinceReferenceDate.getter(v45);
  sub_1000C0368(v46, &qword_1002AFD00, off_10026E2D0);
  *(void *)(inited + 4sub_10006F0B8(12LL, 0) = sub_1000C0878(0xBu, (void *)&v87 + 1, 2u);
  uint64_t v47 = swift_initStackObject(v85, (char *)&v86 + 8);
  *(_OWORD *)(v47 + 1sub_100019F7C(v0 + 6) = xmmword_1001FB800;
  sub_100199F44(4u);
  *(void *)(v47 + 3sub_100019F7C(v0 + 2) = v48;
  Date.timeIntervalSinceReferenceDate.getter(v48);
  uint64_t v88 = &type metadata for Double;
  id v50 = sub_1000C0868(v49, (void *)&v87 + 1);
  *(void *)(v47 + 4sub_10006F0B8(12LL, 0) = v50;
  *((void *)&v87 + Hasher._combine(_:)(v0 + 1) = v47;
  specialized Array._endMutation()(v50);
  if ((*((void *)&v87 + 1) & 0x8000000000000000LL) != 0 || (*((void *)&v87 + 1) & 0x4000000000000000LL) != 0)
  {
    sub_10003574C();
    sub_100017760();
    uint64_t v51 = sub_10003561C();
  }

  else
  {
    uint64_t v51 = sub_10003574C();
  }

  sub_1000C0368(v51, &qword_1002AFD08, off_10026E2D8);
  sub_1000C08C8();
  uint64_t v53 = v52;
  sub_100024F0C();
  sub_100199F50(v53);
  uint64_t v55 = v54;
  uint64_t v56 = sub_10003561C();
  *(void *)(inited + 48) = v55;
  *((void *)&v87 + Hasher._combine(_:)(v0 + 1) = inited;
  specialized Array._endMutation()(v56);
  if ((*((void *)&v87 + 1) & 0x8000000000000000LL) != 0 || (*((void *)&v87 + 1) & 0x4000000000000000LL) != 0)
  {
    sub_10001FFF0();
    sub_100017760();
    sub_100023EEC();
  }

  else
  {
    sub_10001FFF0();
  }

  sub_1000C08C8();
  uint64_t v58 = v57;
  sub_100024F0C();
  sub_10019A014(v58);
  uint64_t v60 = v59;
  sub_100023EEC();
  sub_1000C0A28();
  sub_1000BFBB8(v61, v62, v63);

  sub_100092BA0();
}

void sub_1000BD498()
{
  uint64_t v101 = v2;
  uint64_t v102 = v3;
  uint64_t v98 = v4;
  uint64_t v6 = v5;
  uint64_t v100 = v7;
  uint64_t v9 = v8;
  uint64_t v99 = v10;
  sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  sub_1000226C8();
  __chkstk_darwin(v11);
  sub_100092F38();
  uint64_t v14 = v12 - v13;
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v97 - v17;
  __chkstk_darwin(v16);
  sub_1000C0A18();
  sub_1000175B0(&qword_1002AC060);
  sub_1000226C8();
  __chkstk_darwin(v19);
  sub_10004878C();
  uint64_t v20 = sub_1000175B0((uint64_t *)&unk_1002AFCE0);
  uint64_t v21 = sub_100019310(v20, 56LL);
  *(_OWORD *)(v21 + 1sub_100019F7C(v0 + 6) = xmmword_1001FCE80;
  sub_1000C0368(v21, (unint64_t *)&qword_1002AC930, &off_10026E2E8);
  memset(v106, 0, 32);
  v106[32] = -1;
  uint64_t v22 = sub_100048814();
  memset(v107, 0, 80);
  sub_1000C0260(v0, v23, v24, v22);
  sub_100092BC8(v1);
  sub_100092BC8((uint64_t)v18);
  sub_100092BC8(v14);
  sub_1000356F4();
  sub_10001DBCC();
  sub_1000C06B8();
  sub_1000C08A4();
  __int16 v77 = v25;
  uint64_t v76 = v99;
  sub_1000C0704();
  sub_1000C0A68();
  sub_1000C098C();
  sub_1000C0244( v100,  v6,  v26,  v27,  v28,  v29,  v30,  v31,  v69,  SHIBYTE(v69),  v70,  1,  v71,  v72,  HIBYTE(v72),  v73,  1,  v74,  v75,  SBYTE1(v75),  SBYTE2(v75),  HIBYTE(v75),  1u,  v76,  v9,  0LL,  v77,  SHIBYTE(v77),  (uint64_t)v106,  v107,  0LL,  1,  v78,  v79,  v81,  SHIBYTE(v81),  v83,  v85[0],  v85[1],  v85[2],  v87,  v89,  v1,  (uint64_t)v18,  v14,  0LL,  v94,  SHIBYTE(v94),  v95,
    v96,
    1u);
  sub_1000C0AF4();
  double v32 = sub_1000C0800();
  sub_1000C0338( v32,  v42,  v43,  v44,  v45,  v46,  v47,  v48,  v33,  v34,  v35,  v36,  v37,  v38,  v39,  v40,  *(uint64_t *)&v32,  (uint64_t)v41,  *(uint64_t *)&v32,  (uint64_t)v41,  *(uint64_t *)&v32,  (uint64_t)v41,  *(uint64_t *)&v32,  (uint64_t)v41,  *(uint64_t *)&v32,  (uint64_t)v41,  v32,  v41,  *(uint64_t *)&v32,  (uint64_t)v41,  0LL,  (uint64_t)&off_100271968,  *(uint64_t *)&v32,  (uint64_t)v41,  v80,  v82,  v84,  v86,  v88,  v90,  v91,  v92,  v93);
  uint64_t v50 = sub_1001983A0(v14, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, v49);
  sub_100019390();
  uint64_t v51 = sub_10001A3F8();
  *(void *)(v21 + 3sub_100019F7C(v0 + 2) = v50;
  double v52 = Date.timeIntervalSinceReferenceDate.getter(v51);
  sub_1000C0368(v53, &qword_1002AFD00, off_10026E2D0);
  uint64_t v104 = &type metadata for Double;
  *(double *)uint64_t v103 = v52;
  id v54 = sub_1000C0878(0xBu, v103, 2u);
  *(void *)(v21 + 4sub_10006F0B8(12LL, 0) = v54;
  double v55 = Date.timeIntervalSinceReferenceDate.getter(v54);
  uint64_t v104 = &type metadata for Double;
  *(double *)uint64_t v103 = v55;
  id v57 = sub_1000C0868(v56, v103);
  *(void *)(v21 + 48) = v57;
  v103[0] = v21;
  specialized Array._endMutation()(v57);
  uint64_t v58 = v103[0];
  uint64_t v105 = v103[0];
  if (v102)
  {
    uint64_t v104 = &type metadata for String;
    v103[0] = v98;
    v103[1] = v102;
    swift_bridgeObjectRetain(v102);
    id v59 = sub_1000C0878(9u, v103, 1u);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v59);
    unint64_t v61 = *(void *)((v105 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v60 = *(void *)((v105 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v61 >= v60 >> 1) {
      sub_1000C09D8(v60);
    }
    uint64_t v62 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v61, v59);
    specialized Array._endMutation()(v62);
    uint64_t v58 = v105;
  }

  if (v58 < 0 || (v58 & 0x4000000000000000LL) != 0)
  {
    sub_100019320();
    sub_100017760();
    uint64_t v63 = sub_100019390();
  }

  else
  {
    uint64_t v63 = sub_100019320();
  }

  sub_1000C0368(v63, &qword_1002AFD08, off_10026E2D8);
  sub_1000C08C8();
  uint64_t v65 = v64;
  sub_100024F0C();
  sub_10019A014(v65);
  sub_100019390();
  sub_1000C0A28();
  sub_1000BFBB8(v66, v67, v68);
  sub_1000C09D0();
  sub_100092BA0();
}

void sub_1000BD858()
{
  uint64_t v139 = v5;
  uint64_t v140 = v6;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v11);
  sub_10004878C();
  sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  sub_1000226C8();
  __chkstk_darwin(v12);
  sub_1000C05D4();
  __chkstk_darwin(v13);
  sub_1000C0744();
  __chkstk_darwin(v14);
  sub_1000C096C();
  sub_1000175B0(&qword_1002AC060);
  sub_1000226C8();
  __chkstk_darwin(v15);
  sub_1000C05A0();
  sub_1000C0368(v16, (unint64_t *)&qword_1002AC930, &off_10026E2E8);
  __int128 v127 = 0u;
  __int128 v128 = 0u;
  LOBYTE(v129) = -1;
  uint64_t v17 = sub_100048814();
  __int128 v131 = 0u;
  __int128 v132 = 0u;
  __int128 v133 = 0u;
  __int128 v134 = 0u;
  __int128 v135 = 0u;
  sub_10001762C(v4, 1LL, 1LL, v17);
  sub_10001762C(v3, 1LL, 1LL, v11);
  sub_10001762C(v2, 1LL, 1LL, v11);
  sub_10001762C(v1, 1LL, 1LL, v11);
  swift_bridgeObjectRetain();
  sub_1000C092C();
  __int128 v115 = v18;
  sub_1000C0768();
  sub_1000C0244( v10,  v8,  v19,  v20,  v21,  v22,  v23,  v24,  v108,  SHIBYTE(v108),  v109,  v110,  v111,  v112,  HIBYTE(v112),  v113,  v114,  0LL,  1,  1,  2,  0x16u,  1u,  v115,  *((uint64_t *)&v115 + 1),  0LL,  1,  2,  (uint64_t)&v127,  (uint64_t *)&v131,  0LL,  1,  v4,  0LL,  v116,  SHIBYTE(v116),  v117,  v118[0],  v118[1],  v118[2],  v119,  v120,  v3,  v2,  v1,  0LL,  1,  5,  0LL,
    0LL,
    1u);
  uint64_t v26 = v25;
  double v27 = sub_1000C06CC();
  sub_1000C03D8( 0LL,  0LL,  0LL,  0LL,  (uint64_t)&off_100271AA0,  v27,  v32,  v33,  v34,  v35,  v36,  v37,  v38,  v28,  v29,  v30,  *(uint64_t *)&v27,  v31,  *(uint64_t *)&v27,  v31,  *(uint64_t *)&v27,  v31,  *(uint64_t *)&v27,  v31,  *(uint64_t *)&v27,  v31,  *(double *)&v128,  *((const char **)&v128 + 1),  v129,  v130,  v131,  *((uint64_t *)&v131 + 1),  v132,  *((uint64_t *)&v132 + 1),  v133,  *((uint64_t *)&v133 + 1),  v134,  *((uint64_t *)&v134 + 1),  v135,  *((uint64_t *)&v135 + 1),  v136,  v137,  v138);
  uint64_t v122 = (void *)sub_1001983A0(v26, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, v39);
  sub_100023EEC();
  sub_10001A420();
  sub_1000C0370();
  *(double *)&uint64_t v40 = sub_1000C0468();
  sub_1000C0244( v124,  v26,  v41,  v42,  v43,  v44,  v45,  v46,  4,  4,  0LL,  1,  0LL,  1,  3u,  0LL,  1,  0LL,  1,  1,  2,  0x16u,  5u,  v40,  v47,  0LL,  1,  0,  (uint64_t)&v127,  (uint64_t *)&v131,  0LL,  v141,  v142,  v143,  v144,  v145,  v146,  v147,  v148,  v149,  v150,  v151,  v152,  v153,  v154,  v155,  v156,  v157,  v158,
    v159,
    v160);
  uint64_t v49 = v48;
  double v50 = sub_1000C06CC();
  sub_1000C03D8( 0LL,  0LL,  0LL,  0LL,  (uint64_t)&off_100271AF0,  v50,  v55,  v56,  v57,  v58,  v59,  v60,  v61,  v51,  v52,  v53,  *(uint64_t *)&v50,  v54,  *(uint64_t *)&v50,  v54,  *(uint64_t *)&v50,  v54,  *(uint64_t *)&v50,  v54,  *(uint64_t *)&v50,  v54,  v161,  v162,  v163,  v164,  v165,  v166,  v167,  v168,  v169,  v170,  v171,  v172,  v173,  v174,  v175,  v176,  v177);
  uint64_t v63 = v62;
  uint64_t v121 = (void *)sub_1001983A0(v49, (uint64_t)&off_100271AC8, (uint64_t)_swiftEmptyArrayStorage, v62);
  sub_10001A420();
  sub_100023EEC();
  sub_1000C0370();
  sub_1000C0468();
  uint64_t v190 = (uint64_t *)&v131;
  uint64_t v191 = 0LL;
  uint64_t v189 = &v127;
  sub_1000C0790();
  sub_1000C0244( v124,  v63,  v64,  v65,  v66,  v67,  v68,  v69,  4,  4,  0LL,  1,  0LL,  1,  3u,  0LL,  1,  v178,  v179,  v180,  v181,  v182,  v183,  v184,  v185,  v186,  v187,  v188,  (uint64_t)v189,  v190,  v191,  v192,  v193,  v194,  v195,  v196,  v197,  v198,  v199,  v200,  v201,  v202,  v203,  v204,  v205,  v206,  v207,  v208,  v209,
    v210,
    v211);
  uint64_t v71 = v70;
  double v72 = sub_1000C06CC();
  sub_1000C03D8( 0LL,  0LL,  0LL,  0LL,  (uint64_t)&off_100271B18,  v72,  v77,  v78,  v79,  v80,  v81,  v82,  v83,  v73,  v74,  v75,  *(uint64_t *)&v72,  v76,  *(uint64_t *)&v72,  v76,  *(uint64_t *)&v72,  v76,  *(uint64_t *)&v72,  v76,  *(uint64_t *)&v72,  v76,  v212,  v213,  v214,  v215,  v216,  v217,  v218,  v219,  v220,  v221,  v222,  v223,  v224,  v225,  v226,  v227,  v228);
  uint64_t v85 = (void *)sub_1001983A0(v71, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, v84);
  sub_100023EEC();
  uint64_t v86 = sub_10003561C();
  uint64_t v87 = sub_1000C0368(v86, &qword_1002AFD08, off_10026E2D8);
  uint64_t v88 = sub_1000175B0(&qword_1002AFD20);
  uint64_t v89 = sub_100019310(v88, 128LL);
  *(_OWORD *)(v89 + 1sub_100019F7C(v0 + 6) = xmmword_1001FCE90;
  *(void *)(v89 + 3sub_100019F7C(v0 + 2) = v122;
  *(void *)(v89 + 5sub_100019F7C(v0 + 6) = v87;
  *(void *)(v89 + 6sub_100019F7C(v0 + 4) = v121;
  *(void *)(v89 + 12sub_10006F0B8(12LL, 0) = v87;
  *(void *)(v89 + sub_100081CEC(v0 + 88) = v87;
  *(void *)(v89 + 9sub_100019F7C(v0 + 6) = v85;
  id v90 = v122;
  id v91 = v121;
  id v125 = v85;
  sub_100199F50(v89);
  uint64_t v93 = v92;
  sub_1000C0A28();
  unint64_t v97 = sub_1000BFBB8(v94, v95, v96);
  if (!(v97 >> 62))
  {
    uint64_t v98 = *(void *)((v97 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    sub_1000356F4();
    if (v98) {
      goto LABEL_3;
    }
LABEL_17:
    sub_100056ADC();
LABEL_18:
    sub_100056ADC();

    sub_1000C09C4();
    sub_10002A580();
    return;
  }

  sub_1000356F4();
  uint64_t v98 = sub_100019448();
  if (!v98) {
    goto LABEL_17;
  }
LABEL_3:
  if (v98 >= 1)
  {
    id v123 = v91;
    for (uint64_t i = 0LL; i != v98; ++i)
    {
      if ((v97 & 0xC000000000000001LL) != 0) {
        id v100 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v97);
      }
      else {
        id v100 = *(id *)(v97 + 8 * i + 32);
      }
      uint64_t v101 = v100;
      sub_1000B5BB8();
      if (v102 < 3u
        || (static Date.now.getter(v102),
            sub_1000B5190(),
            char v104 = v103,
            uint64_t v102 = (*(uint64_t (**)(uint64_t, uint64_t))(v126 + 8))(v0, v11),
            (v104 & 1) != 0))
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v102);
        unint64_t v106 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v105 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v106 >= v105 >> 1) {
          sub_1000C09D8(v105);
        }
        uint64_t v107 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v106, v101);
        specialized Array._endMutation()(v107);
      }

      else
      {
      }
    }

    sub_100056ADC();
    id v91 = v123;
    goto LABEL_18;
  }

  __break(1u);
}

#error "1000BDEE4: call analysis failed (funcsize=79)"
uint64_t sub_1000BDF50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  void v6[4];
  uint64_t v2 = v1;
  sub_1000C0368(a1, &qword_1002AFD00, off_10026E2D0);
  void v6[3] = &type metadata for UInt;
  v6[0] = a1;
  uint64_t v4 = sub_100199F5C(7u, v6, 0);
  sub_1000BFA00((uint64_t)v4);
  sub_1000C09D0();
  return v2;
}

void sub_1000BDFD0()
{
  uint64_t v47 = v3;
  uint64_t v30 = v0;
  char v5 = v4;
  uint64_t v7 = v6;
  sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  sub_1000226C8();
  __chkstk_darwin(v8);
  sub_1000C05F0();
  __chkstk_darwin(v9);
  sub_1000C060C();
  __chkstk_darwin(v10);
  sub_1000C0818();
  sub_1000175B0(&qword_1002AC060);
  sub_1000226C8();
  __chkstk_darwin(v11);
  sub_1000C06EC();
  sub_1000C0368(v12, (unint64_t *)&qword_1002AC930, &off_10026E2E8);
  uint64_t v13 = sub_1000C0588();
  uint64_t v16 = sub_1000C0260(v1, v14, v15, v13);
  sub_1000C061C(v16);
  sub_10001DBCC();
  uint64_t v17 = sub_1000C028C();
  sub_1000C0244( v17,  v7,  v18,  v19,  v20,  v21,  v22,  v23,  v29,  SHIBYTE(v29),  v30,  v31,  v32,  v33,  HIBYTE(v33),  v34,  v35,  v36,  0,  0,  0,  0,  0,  0LL,  0LL,  0LL,  0,  0,  0LL,  0LL,  0LL,  0,  0LL,  v37,  v38,  SHIBYTE(v38),  v39,  v40[0],  v40[1],  v40[2],  v41,  v42,  v43,  v44,  v45,  v46,  v2,  SHIBYTE(v2),  v47,
    v48,
    v49);
  uint64_t v25 = v24;
  sub_1000175B0((uint64_t *)&unk_1002AFCF0);
  sub_1000C0760();
  uint64_t v26 = sub_1000C0758((uint64_t)_swiftEmptyArrayStorage, (uint64_t)&type metadata for TransactionEntity.Key);
  double v27 = (void *)sub_1001983A0(v25, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, v26);
  sub_100023EEC();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0) {
    uint64_t v28 = &off_100271A78;
  }
  else {
    uint64_t v28 = 0LL;
  }
  sub_1000BFA84((uint64_t)v27, (uint64_t)v28, 0x7FFFFFFFFFFFFFFFLL);

  sub_10001A3F8();
  sub_1000C09C4();
  sub_10002A580();
}

uint64_t sub_1000BE148()
{
  uint64_t v89 = v3;
  uint64_t v90 = v4;
  __int16 v51 = v1;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  HIDWORD(v53) = v9;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  sub_1000226C8();
  __chkstk_darwin(v14);
  sub_1000C05D4();
  __chkstk_darwin(v15);
  sub_1000C0744();
  __chkstk_darwin(v16);
  sub_1000C096C();
  sub_1000175B0(&qword_1002AC060);
  sub_1000226C8();
  __chkstk_darwin(v17);
  sub_1000C05A0();
  sub_1000C0368(v18, (unint64_t *)&qword_1002AC930, &off_10026E2E8);
  LOBYTE(v67) = -1;
  sub_100048814();
  sub_1000C07E8();
  uint64_t v22 = sub_1000C0260(v2, v19, v20, v21);
  sub_1000C0418(v22);
  sub_1000C0540();
  sub_1000C094C();
  sub_1000C0680();
  sub_1000C0244( v13,  v11,  v23,  v24,  v25,  v26,  v27,  v28,  v51,  SHIBYTE(v51),  v53,  (char)v55,  v56,  (char)v57,  BYTE1(v57),  (uint64_t)v58,  (char)v59,  v60,  v61,  v62,  v63,  v64,  1u,  (uint64_t)v66,  0LL,  0LL,  0,  0,  0LL,  v67,  v68,  v69,  v70,  v71,  v72,  v73,  v74,  v75,  v76,  v77,  v78,  v79,  v80,  v81,  v82,  v83,  v84,  v85,  v86,
    v87,
    v88);
  sub_1000C0AF4();
  sub_1000175B0((uint64_t *)&unk_1002AFCF0);
  sub_1000C0760();
  uint64_t v29 = sub_1000C0758((uint64_t)_swiftEmptyArrayStorage, (uint64_t)&type metadata for TransactionEntity.Key);
  uint64_t v30 = (void *)sub_1001983A0(v0, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, v29);
  sub_100019390();
  uint64_t v31 = swift_bridgeObjectRelease();
  uint64_t v32 = sub_1000C0368(v31, &qword_1002AFD00, off_10026E2D0);
  double v58 = &type metadata for Double;
  double v55 = v8;
  id v33 = sub_100199F5C(0x17u, &v55, 4u);
  uint64_t v34 = sub_1000C0368((uint64_t)v33, &qword_1002AFD08, off_10026E2D8);
  uint64_t v35 = sub_1000175B0(&qword_1002AFD20);
  uint64_t v36 = sub_100019310(v35, 96LL);
  *(_OWORD *)(v36 + 1sub_100019F7C(v0 + 6) = xmmword_1001F3DD0;
  *(void *)(v36 + 3sub_100019F7C(v0 + 2) = v30;
  *(void *)(v36 + sub_100081CEC(v0 + 88) = v32;
  *(void *)(v36 + 5sub_100019F7C(v0 + 6) = v34;
  *(void *)(v36 + 6sub_100019F7C(v0 + 4) = v33;
  id v37 = v30;
  id v38 = v33;
  sub_10019A014(v36);
  uint64_t v40 = v39;
  sub_1000C0AB8();
  id v41 = *(id *)(v52 + OBJC_IVAR____TtC25ASOctaneSupportXPCService15DatabaseSession_connection);
  sub_1000B994C();
  uint64_t v43 = v42;

  uint64_t v66 = _swiftEmptyArrayStorage;
  char v65 = 0;
  uint64_t v44 = sub_10006F028(v6, 0);
  specialized Array._endMutation()(v44);
  uint64_t v45 = sub_100019310((uint64_t)&unk_100280138, 41LL);
  *(void *)(v45 + 1sub_100019F7C(v0 + 6) = &v66;
  *(void *)(v45 + 2sub_100019F7C(v0 + 4) = v6;
  *(void *)(v45 + 3sub_100019F7C(v0 + 2) = &v65;
  *(_BYTE *)(v45 + 4sub_10006F0B8(12LL, 0) = v54;
  uint64_t v46 = sub_1000AC93C((uint64_t)&unk_100280160);
  *(void *)(v46 + 1sub_100019F7C(v0 + 6) = sub_1000C0178;
  *(void *)(v46 + 2sub_100019F7C(v0 + 4) = v45;
  double v59 = sub_1000C0230;
  uint64_t v60 = v46;
  double v55 = _NSConcreteStackBlock;
  uint64_t v56 = 1107296256LL;
  double v57 = sub_10019F444;
  double v58 = &unk_100280178;
  uint64_t v47 = _Block_copy(&v55);
  swift_retain();
  uint64_t v48 = swift_release();
  sub_1000C0AE8(v48, "enumerateMemoryEntitiesUsingBlock:");

  _Block_release(v47);
  LOBYTE(v47) = sub_1000C09B8(v46, (uint64_t)"", 117LL, 316LL);
  uint64_t result = sub_10001EDD8();
  if ((v47 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    double v50 = v66;
    sub_100024F0C();
    return (uint64_t)v50;
  }

  return result;
}

void sub_1000BE4E8(void *a1, uint64_t a2, _BYTE *a3, uint64_t *a4, uint64_t a5, _BYTE *a6, char a7)
{
  uint64_t v13 = *a4;
  if ((unint64_t)*a4 >> 62)
  {
    if (v13 < 0) {
      uint64_t v22 = *a4;
    }
    else {
      uint64_t v22 = v13 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v14 >= a5)
  {
    *a3 = 1;
    *a6 = 1;
  }

  else
  {
    uint64_t v15 = type metadata accessor for Transaction();
    uint64_t v16 = swift_dynamicCastClass(a1, v15);
    if (v16)
    {
      uint64_t v17 = v16;
      id v23 = a1;
      if ((a7 & 1) != 0)
      {
        sub_1000B5E54();
        if ((v18 & 1) == 0) {
          goto LABEL_12;
        }
      }

      else
      {
        sub_1000B5ADC();
        if ((v19 & 1) == 0)
        {
LABEL_12:

          return;
        }
      }

      id v23 = v23;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
      uint64_t v20 = *(void *)((*a4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      sub_10002E9EC(v20);
      uint64_t v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v17);
      specialized Array._endMutation()(v21);
      goto LABEL_12;
    }
  }

void sub_1000BE628()
{
  uint64_t v81 = v1;
  uint64_t v82 = v0;
  uint64_t v77 = v2;
  uint64_t v79 = v3;
  uint64_t v80 = v4;
  uint64_t v6 = v5;
  sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  sub_1000226C8();
  __chkstk_darwin(v7);
  sub_100092F38();
  uint64_t v10 = v8 - v9;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v76 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v76 - v15;
  sub_1000175B0(&qword_1002AC060);
  sub_1000226C8();
  __chkstk_darwin(v17);
  char v19 = (char *)&v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_1000175B0((uint64_t *)&unk_1002AFCE0);
  uint64_t inited = swift_initStackObject(v20, &v85);
  *(_OWORD *)(inited + 1sub_100019F7C(v0 + 6) = xmmword_1001FB800;
  uint64_t v78 = sub_1000C0368(inited, (unint64_t *)&qword_1002AC930, &off_10026E2E8);
  memset(v86, 0, 32);
  v86[32] = -1;
  sub_100048814();
  *(double *)&__int128 v22 = sub_1000C0AA0();
  v87[0] = v22;
  v87[1] = v22;
  v87[2] = v22;
  v87[3] = v22;
  v87[4] = v22;
  sub_1000C0260((uint64_t)v19, v23, v24, v25);
  sub_1000C0900((uint64_t)v16);
  sub_1000C0900((uint64_t)v14);
  sub_1000C0900(v10);
  swift_bridgeObjectRetain(v6);
  uint64_t v26 = v77;
  swift_bridgeObjectRetain(v77);
  sub_1000C06B8();
  sub_1000C092C();
  __int16 v67 = v27;
  uint64_t v66 = v79;
  uint64_t v28 = sub_1000C0718();
  sub_1000C0244( v28,  v26,  v29,  v30,  v31,  v32,  v33,  v34,  v59,  SHIBYTE(v59),  v60,  v61,  v62,  v63,  HIBYTE(v63),  v64,  v65,  0LL,  1,  2,  2,  0x16u,  1u,  v66,  v6,  0LL,  v67,  SHIBYTE(v67),  (uint64_t)v86,  (uint64_t *)v87,  0LL,  1,  (uint64_t)v19,  0LL,  v68,  SHIBYTE(v68),  v69,  v70[0],  v70[1],  v70[2],  v71,  v72,  (uint64_t)v16,  (uint64_t)v14,  v10,  0LL,  v73,  SHIBYTE(v73),  v74,
    v75,
    1u);
  sub_1000C0A5C();
  sub_1000175B0((uint64_t *)&unk_1002AFCF0);
  sub_1000C0760();
  sub_1000C0758((uint64_t)_swiftEmptyArrayStorage, (uint64_t)&type metadata for TransactionEntity.Key);
  uint64_t v35 = sub_1000C0A34();
  uint64_t v39 = sub_1001983A0(v35, v36, v37, v38);
  sub_10001A3F8();
  uint64_t v40 = sub_10001A420();
  *(void *)(inited + 3sub_100019F7C(v0 + 2) = v39;
  double v41 = Date.timeIntervalSinceReferenceDate.getter(v40);
  sub_1000C0368(v42, &qword_1002AFD00, off_10026E2D0);
  void v84[3] = &type metadata for Double;
  *(double *)char v84 = v41;
  id v43 = sub_100199F5C(0xBu, v84, 2u);
  *(void *)(inited + 4sub_10006F0B8(12LL, 0) = v43;
  v84[0] = inited;
  specialized Array._endMutation()(v43);
  unint64_t v44 = v84[0];
  if ((v84[0] & 0x8000000000000000LL) != 0 || (v84[0] & 0x4000000000000000LL) != 0)
  {
    sub_10001ED74();
    sub_100017760();
    uint64_t v45 = sub_10001A3F8();
  }

  else
  {
    uint64_t v45 = sub_10001ED74();
  }

  sub_1000C0368(v45, &qword_1002AFD08, off_10026E2D8);
  sub_1000C08C8();
  sub_100024F0C();
  sub_1000C0998();
  uint64_t v47 = v46;
  sub_10001A3F8();
  uint64_t v48 = sub_1000175B0((uint64_t *)&unk_1002AFD10);
  uint64_t v49 = swift_initStackObject(v48, &v83);
  *(_OWORD *)(v49 + 1sub_100019F7C(v0 + 6) = xmmword_1001F3C00;
  *(_BYTE *)(v49 + 3sub_100019F7C(v0 + 2) = 11;
  uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"DESC");
  uint64_t v52 = sub_1000C0AD4(v50, v51);
  sub_1000BFBB8(v52, v53, v54);
  sub_1000C0A8C();
  sub_1001B7658();

  if (v44 >> 62)
  {
    sub_10001ED74();
    uint64_t v55 = sub_100019448();
    sub_10001A3F8();
    if (!v55) {
      goto LABEL_9;
    }
LABEL_6:
    BOOL v56 = __OFSUB__(v55, 1LL);
    uint64_t v57 = v55 - 1;
    if (v56)
    {
      __break(1u);
    }

    else
    {
      sub_100119E64(v57, (v44 & 0xC000000000000001LL) == 0, v44);
      if ((v44 & 0xC000000000000001LL) == 0)
      {
        id v58 = *(id *)(v44 + 8 * v57 + 32);
        goto LABEL_9;
      }
    }

    sub_1000C0A80();
    goto LABEL_9;
  }

  uint64_t v55 = *(void *)((v44 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v55) {
    goto LABEL_6;
  }
LABEL_9:
  sub_10001A3F8();
  sub_100092BA0();
}

void sub_1000BE9B8()
{
  uint64_t v80 = v0;
  int v79 = v3;
  uint64_t v77 = v4;
  uint64_t v78 = v5;
  uint64_t v73 = v6;
  uint64_t v75 = v7;
  uint64_t v76 = v8;
  uint64_t v10 = v9;
  sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  sub_1000226C8();
  __chkstk_darwin(v11);
  sub_100092F38();
  uint64_t v14 = v12 - v13;
  __chkstk_darwin(v15);
  sub_1000C097C();
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v72 - v17;
  sub_1000175B0(&qword_1002AC060);
  sub_1000226C8();
  __chkstk_darwin(v19);
  sub_100092B28();
  uint64_t v20 = sub_1000175B0((uint64_t *)&unk_1002AFCE0);
  uint64_t inited = swift_initStackObject(v20, &v85);
  *(_OWORD *)(inited + 1sub_100019F7C(v0 + 6) = xmmword_1001FCEA0;
  uint64_t v74 = sub_1000C0368(inited, (unint64_t *)&qword_1002AC930, &off_10026E2E8);
  memset(v86, 0, 32);
  v86[32] = -1;
  sub_100048814();
  *(double *)&__int128 v22 = sub_1000C0AA0();
  v87[0] = v22;
  v87[1] = v22;
  v87[2] = v22;
  v87[3] = v22;
  v87[4] = v22;
  uint64_t v26 = sub_1000C0260(v2, v23, v24, v25);
  sub_1000C03E8();
  sub_10001762C(v14, 1LL, 1LL, v26);
  sub_1000931C8();
  uint64_t v27 = v73;
  sub_1000356F4();
  *(double *)&__int128 v28 = sub_1000C06B8();
  __int128 v68 = v28;
  uint64_t v67 = v75;
  sub_1000C05B8();
  uint64_t v29 = sub_1000C0718();
  sub_1000C0244( v29,  v27,  v30,  v31,  v32,  v33,  v34,  v35,  v58,  SHIBYTE(v58),  v59,  v60,  v61,  v62,  HIBYTE(v62),  v63,  v64,  v65,  v66[0],  v66[1],  v66[2],  v66[3],  v66[4],  v67,  v10,  0LL,  1,  2,  (uint64_t)v86,  (uint64_t *)v87,  0LL,  1,  v2,  0LL,  1,  2,  0LL,  1,  2,  2,  v68,  *((uint64_t *)&v68 + 1),  (uint64_t)v18,  v1,  v14,  0LL,  v69,  SHIBYTE(v69),  v70,
    v71,
    1u);
  uint64_t v37 = v36;
  sub_1000175B0((uint64_t *)&unk_1002AFCF0);
  sub_1000C0760();
  uint64_t v38 = sub_1000C0758((uint64_t)_swiftEmptyArrayStorage, (uint64_t)&type metadata for TransactionEntity.Key);
  uint64_t v39 = sub_1001983A0(v37, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, v38);
  sub_100023EEC();
  uint64_t v40 = sub_10001A420();
  *(void *)(inited + 3sub_100019F7C(v0 + 2) = v39;
  sub_1000C0368(v40, &qword_1002AFD00, off_10026E2D0);
  char v84 = &type metadata for Int;
  uint64_t v82 = 3LL;
  id v41 = sub_1000C0878(0xEu, &v82, 1u);
  *(void *)(inited + 4sub_10006F0B8(12LL, 0) = v41;
  *(double *)&uint64_t v42 = Date.timeIntervalSinceReferenceDate.getter(v41);
  char v84 = &type metadata for Double;
  uint64_t v82 = v42;
  *(void *)(inited + 48) = sub_1000C0868(v43, &v82);
  char v84 = (void *)sub_1000175B0(&qword_1002AC948);
  uint64_t v82 = v78;
  char v83 = v79 & 1;
  id v44 = sub_100199F5C(7u, &v82, 1u);
  *(void *)(inited + 5sub_100019F7C(v0 + 6) = v44;
  uint64_t v82 = inited;
  specialized Array._endMutation()(v44);
  unint64_t v45 = v82;
  if (v82 < 0 || (v82 & 0x4000000000000000LL) != 0)
  {
    sub_10001ED74();
    sub_100017760();
    uint64_t v46 = sub_10001A3F8();
  }

  else
  {
    uint64_t v46 = sub_10001ED74();
  }

  sub_1000C0368(v46, &qword_1002AFD08, off_10026E2D8);
  sub_1000C08C8();
  sub_100024F0C();
  sub_1000C0998();
  uint64_t v48 = v47;
  sub_10001A3F8();
  uint64_t v49 = sub_1000175B0((uint64_t *)&unk_1002AFD10);
  uint64_t v50 = swift_initStackObject(v49, &v81);
  *(_OWORD *)(v50 + 1sub_100019F7C(v0 + 6) = xmmword_1001F3C00;
  *(_BYTE *)(v50 + 3sub_100019F7C(v0 + 2) = 11;
  uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"ASC");
  uint64_t v53 = sub_1000C0AD4(v51, v52);
  sub_1000BFBB8(v53, v54, v55);
  sub_1000C0A8C();
  sub_1001B7658();

  if (v45 >> 62)
  {
    sub_10001ED74();
    uint64_t v57 = sub_100019448();
    sub_10001A3F8();
    if (!v57) {
      goto LABEL_8;
    }
  }

  else if (!*(void *)((v45 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    goto LABEL_8;
  }

  sub_100119E64(0LL, (v45 & 0xC000000000000001LL) == 0, v45);
  if ((v45 & 0xC000000000000001LL) != 0) {
    specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v45);
  }
  else {
    id v56 = *(id *)(v45 + 32);
  }
LABEL_8:
  sub_10001A3F8();
  sub_10002A580();
}

uint64_t sub_1000BED98()
{
  uint64_t v11 = &_swiftEmptySetSingleton;
  uint64_t v12 = &_swiftEmptySetSingleton;
  id v1 = *(id *)(v0 + OBJC_IVAR____TtC25ASOctaneSupportXPCService15DatabaseSession_connection);
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t v3 = sub_1000AC93C((uint64_t)&unk_100280048);
  *(void *)(v3 + 1sub_100019F7C(v0 + 6) = &v12;
  *(void *)(v3 + 2sub_100019F7C(v0 + 4) = &v11;
  uint64_t v4 = sub_1000AC93C((uint64_t)&unk_100280070);
  *(void *)(v4 + 1sub_100019F7C(v0 + 6) = sub_1000C0140;
  *(void *)(v4 + 2sub_100019F7C(v0 + 4) = v3;
  uint64_t v9[4] = sub_1000C014C;
  uint64_t v10 = v4;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256LL;
  _OWORD v9[2] = sub_1001B220C;
  _OWORD v9[3] = &unk_100280088;
  uint64_t v5 = _Block_copy(v9);
  uint64_t v6 = v10;
  swift_retain();
  swift_release(v6);
  [v1 executeQuery:v2 withResults:v5];

  _Block_release(v5);
  LOBYTE(sub_100034E8C(v0, v1) = swift_isEscapingClosureAtFileLocation(v4, "", 117LL, 386LL, 94LL, 1LL);
  uint64_t result = swift_release(v4);
  if ((v1 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = v12;
    sub_10001EDD8();
    return (uint64_t)v8;
  }

  return result;
}

void sub_1000BEF04(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_1002A8D90 != -1) {
      swift_once(&qword_1002A8D90, sub_100183E34);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    sub_100018F68(v5, (uint64_t)qword_1002EB9D0);
    swift_errorRetain(a2);
    uint64_t v6 = swift_errorRetain(a2);
    oslog = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.error.getter(oslog, v7);
    if (os_log_type_enabled(oslog, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v10 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v10;
      *(_DWORD *)uint64_t v9 = 136315138;
      swift_getErrorValue(a2, v25, v24);
      uint64_t v11 = Error.localizedDescription.getter(v24[1], v24[2]);
      unint64_t v13 = v12;
      uint64_t v23 = sub_1000CF360(v11, v12, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v9 + 4);
      swift_bridgeObjectRelease(v13);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, oslog, v8, "Error fetching used IDs: %s", v9, 0xCu);
      swift_arrayDestroy(v10, 1LL);
      swift_slowDealloc(v10, -1LL, -1LL);
      swift_slowDealloc(v9, -1LL, -1LL);

      swift_errorRelease(a2);
    }

    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }
  }

  else if (a1)
  {
    uint64_t v17 = swift_allocObject(&unk_1002800C0, 32LL, 7LL);
    *(void *)(v17 + 1sub_100019F7C(v0 + 6) = a3;
    *(void *)(v17 + 2sub_100019F7C(v0 + 4) = a4;
    uint64_t v18 = swift_allocObject(&unk_1002800E8, 32LL, 7LL);
    *(void *)(v18 + 1sub_100019F7C(v0 + 6) = sub_1000C0158;
    *(void *)(v18 + 2sub_100019F7C(v0 + 4) = v17;
    aBlock[4] = (uint64_t)sub_1000C0164;
    uint64_t v27 = v18;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1001B2190;
    aBlock[3] = (uint64_t)&unk_100280100;
    uint64_t v19 = _Block_copy(aBlock);
    uint64_t v20 = v27;
    id v21 = a1;
    swift_retain();
    swift_release(v20);
    [v21 enumerateRowsUsingBlock:v19];

    _Block_release(v19);
    LOBYTE(v2Hasher._combine(_:)(v0 + 1) = swift_isEscapingClosureAtFileLocation(v18, "", 117LL, 391LL, 39LL, 1LL);
    swift_release(v17);
    swift_release(v18);
  }

void sub_1000BF208(void *a1)
{
  if (a1)
  {
    id v5 = a1;
    NSString v1 = String._bridgeToObjectiveC()();
    id v2 = [v5 numberForColumnName:v1];

    if (v2)
    {
      sub_1001A0CD8(&v6, (uint64_t)[v2 unsignedIntegerValue]);
    }

    NSString v3 = String._bridgeToObjectiveC()();
    id v4 = [v5 numberForColumnName:v3];

    if (v4)
    {
      sub_1001A0CD8(&v6, (uint64_t)[v4 unsignedIntegerValue]);
    }

    else
    {
    }
  }

#error "1000BF41C: call analysis failed (funcsize=198)"
id sub_1000BF670()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  sub_1000BF6EC();
  NSString v1 = v0;
  if (v0 >> 62)
  {
    id v2 = sub_1000C0A4C();
    if (v2) {
      goto LABEL_3;
    }
LABEL_7:
    sub_100019390();
    return 0LL;
  }

  id v2 = *(void *)((v0 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v2) {
    goto LABEL_7;
  }
LABEL_3:
  sub_1000C0AAC(v2, (v1 & 0xC000000000000001LL) == 0);
  if ((v1 & 0xC000000000000001LL) != 0) {
    NSString v3 = (id)sub_1000C0A98(0LL);
  }
  else {
    NSString v3 = *(id *)(v1 + 32);
  }
  id v4 = v3;
  sub_100019390();
  return v4;
}

void sub_1000BF6EC()
{
  uint64_t v64 = v2;
  uint64_t v65 = v0;
  uint64_t v4 = v3;
  uint64_t v63 = v5;
  sub_1000175B0((uint64_t *)&unk_1002AFCD0);
  sub_1000226C8();
  __chkstk_darwin(v6);
  sub_100092F38();
  uint64_t v9 = v7 - v8;
  uint64_t v11 = __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v62 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v62 - v14;
  sub_1000175B0(&qword_1002AC060);
  sub_1000226C8();
  __chkstk_darwin(v16);
  sub_10004878C();
  uint64_t v17 = sub_1000175B0((uint64_t *)&unk_1002AFCE0);
  uint64_t inited = swift_initStackObject(v17, &v68);
  *(_OWORD *)(inited + 1sub_100019F7C(v0 + 6) = xmmword_1001FCE80;
  sub_1000C0368(inited, (unint64_t *)&qword_1002AC930, &off_10026E2E8);
  memset(v69, 0, 32);
  v69[32] = -1;
  sub_100048814();
  sub_1000C07E8();
  sub_1000C0260(v1, v19, v20, v21);
  sub_1000C08E0((uint64_t)v15);
  sub_1000C08E0((uint64_t)v13);
  sub_1000C08E0(v9);
  swift_bridgeObjectRetain(v4);
  sub_1000C06B8();
  sub_1000C08A4();
  __int16 v51 = v22;
  __int128 v50 = v23;
  sub_1000C05B8();
  sub_1000C0850();
  sub_1000C098C();
  sub_1000C0244( v63,  v4,  v24,  v25,  v26,  v27,  v28,  v29,  v43,  SHIBYTE(v43),  v44,  1,  v45,  v46,  HIBYTE(v46),  v47,  1,  v48,  v49[0],  v49[1],  v49[2],  v49[3],  v49[4],  v50,  *((uint64_t *)&v50 + 1),  0LL,  v51,  SHIBYTE(v51),  (uint64_t)v69,  v70,  0LL,  1,  v52,  v53,  v54,  SHIBYTE(v54),  v55,  v56[0],  v56[1],  v56[2],  v57,  v58,  (uint64_t)v15,  (uint64_t)v13,  v9,  0LL,  v59,  SHIBYTE(v59),  v60,
    v61,
    1u);
  sub_1000C0A5C();
  uint64_t v30 = sub_1000175B0((uint64_t *)&unk_1002AFCF0);
  sub_100092564();
  uint64_t v31 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for TransactionEntity.Key, v30);
  uint64_t v32 = sub_1001983A0(v1, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)&off_100271940, v31);
  sub_10001A3F8();
  sub_100023EEC();
  *(void *)(inited + 3sub_100019F7C(v0 + 2) = v32;
  sub_10019A080(0x1Eu);
  *(void *)(inited + 4sub_10006F0B8(12LL, 0) = v33;
  double v34 = static Date.timeIntervalSinceReferenceDate.getter(v33);
  sub_1000C0368(v35, &qword_1002AFD00, off_10026E2D0);
  v67[3] = &type metadata for Double;
  *(double *)uint64_t v67 = v34;
  id v36 = sub_100199F5C(0x1Eu, v67, 4u);
  *(void *)(inited + 48) = v36;
  v67[0] = inited;
  specialized Array._endMutation()(v36);
  if ((v67[0] & 0x8000000000000000LL) != 0 || (v67[0] & 0x4000000000000000LL) != 0)
  {
    sub_10001ED74();
    sub_100017760();
    uint64_t v37 = sub_10001A3F8();
  }

  else
  {
    uint64_t v37 = sub_10001ED74();
  }

  sub_1000C0368(v37, &qword_1002AFD08, off_10026E2D8);
  sub_1000C08C8();
  sub_100024F0C();
  sub_1000C0998();
  uint64_t v39 = v38;
  sub_10001A3F8();
  uint64_t v40 = sub_1000175B0((uint64_t *)&unk_1002AFD10);
  uint64_t v41 = swift_initStackObject(v40, &v66);
  *(_OWORD *)(v41 + 1sub_100019F7C(v0 + 6) = xmmword_1001F3C00;
  *(_BYTE *)(v41 + 3sub_100019F7C(v0 + 2) = 30;
  *(void *)(v41 + 4sub_10006F0B8(12LL, 0) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"DESC");
  *(void *)(v41 + 48) = v42;
  sub_1000BFBB8((uint64_t)v39, (objc_class *)v41, v64);
  swift_setDeallocating(v41);
  sub_1001B7658();

  sub_100092BA0();
}

id sub_1000BFA00(uint64_t a1)
{
  unint64_t v1 = sub_1000BFA84(a1, (uint64_t)&off_100271A28, 1LL);
  if (v1 >> 62)
  {
    uint64_t v2 = sub_1000C0A4C();
    if (v2) {
      goto LABEL_3;
    }
LABEL_7:
    sub_100019390();
    return 0LL;
  }

  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v2) {
    goto LABEL_7;
  }
LABEL_3:
  sub_1000C0AAC(v2, (v1 & 0xC000000000000001LL) == 0);
  if ((v1 & 0xC000000000000001LL) != 0) {
    id v3 = (id)sub_1000C0A98(0LL);
  }
  else {
    id v3 = *(id *)(v1 + 32);
  }
  id v4 = v3;
  sub_100019390();
  return v4;
}

uint64_t sub_1000BFA84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    int64_t v4 = *(void *)(a2 + 16);
    uint64_t v5 = (objc_class *)_swiftEmptyArrayStorage;
    if (v4)
    {
      uint64_t v16 = a1;
      uint64_t v17 = a3;
      sub_10003574C();
      sub_100032658(0LL, v4, 0);
      uint64_t v6 = 0LL;
      uint64_t v5 = (objc_class *)v18;
      do
      {
        char v7 = *(_BYTE *)(a2 + v6 + 32);
        uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"ASC");
        uint64_t v10 = v9;
        unint64_t v12 = *(void *)(v18 + 16);
        unint64_t v11 = *(void *)(v18 + 24);
        if (v12 >= v11 >> 1) {
          sub_100032658((char *)(v11 > 1), v12 + 1, 1);
        }
        *(void *)(v18 + 1sub_100019F7C(v0 + 6) = v12 + 1;
        uint64_t v13 = v18 + 24 * v12;
        *(_BYTE *)(v13 + 3sub_100019F7C(v0 + 2) = v7;
        ++v6;
        *(void *)(v13 + 4sub_10006F0B8(12LL, 0) = v8;
        *(void *)(v13 + 48) = v10;
      }

      while (v4 != v6);
      sub_10003561C();
      a3 = v17;
      a1 = v16;
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  uint64_t v14 = sub_1000BFBB8(a1, v5, a3);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_1000BFBB8(uint64_t a1, objc_class *a2, uint64_t a3)
{
  Class v5 = a2;
  uint64_t v42 = _swiftEmptyArrayStorage;
  char v7 = *(void **)(v3 + OBJC_IVAR____TtC25ASOctaneSupportXPCService15DatabaseSession_connection);
  if (a2)
  {
    Class isa = a2[2].isa;
    uint64_t v39 = *(void **)(v3 + OBJC_IVAR____TtC25ASOctaneSupportXPCService15DatabaseSession_connection);
    if (isa)
    {
      aBlock[0] = _swiftEmptyArrayStorage;
      id v9 = v7;
      sub_10003574C();
      sub_100032050();
      uint64_t v10 = 4LL;
      unint64_t v11 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v12 = sub_10011D3B4(v5[v10].isa);
        uint64_t v14 = v13;
        aBlock[0] = v11;
        unint64_t v15 = v11[2];
        if (v15 >= v11[3] >> 1)
        {
          sub_1000C09A4();
          unint64_t v11 = (void *)aBlock[0];
        }

        void v11[2] = v15 + 1;
        uint64_t v16 = &v11[2 * v15];
        uint64_t v16[4] = v12;
        uint64_t v16[5] = v14;
        v10 += 3LL;
        Class isa = (Class)((char *)isa - 1);
      }

      while (isa);
      sub_10003561C();
    }

    else
    {
      id v19 = v7;
    }

    Class v18 = Array._bridgeToObjectiveC()().super.isa;
    sub_10001EDA0();
    Class v20 = v5[2].isa;
    if (v20)
    {
      uint64_t v37 = a1;
      uint64_t v38 = a3;
      aBlock[0] = _swiftEmptyArrayStorage;
      sub_10003574C();
      sub_100032050();
      uint64_t v21 = _swiftEmptyArrayStorage;
      __int16 v22 = v5 + 6;
      do
      {
        Class v23 = v22[-1].isa;
        Class v24 = v22->isa;
        aBlock[0] = v21;
        unint64_t v26 = v21[2];
        unint64_t v25 = v21[3];
        swift_bridgeObjectRetain(v24);
        if (v26 >= v25 >> 1)
        {
          sub_1000C09A4();
          uint64_t v21 = (void *)aBlock[0];
        }

        __int128 v21[2] = v26 + 1;
        uint64_t v27 = &v21[2 * v26];
        v27[4] = v23;
        v27[5] = v24;
        v22 += 3;
        Class v20 = (Class)((char *)v20 - 1);
      }

      while (v20);
      sub_10003561C();
      a1 = v37;
      a3 = v38;
    }

    Class v5 = Array._bridgeToObjectiveC()().super.isa;
    sub_10001EDA0();
    char v7 = v39;
  }

  else
  {
    id v17 = v7;
    Class v18 = 0LL;
  }

  uint64_t v28 = sub_1000C0AB8();
  id v29 =  [(id)swift_getObjCClassFromMetadata(v28) queryOnConnection:v7 predicate:a1 orderingProperties:v18 orderingDirections:v5];

  uint64_t v30 = sub_1000AC93C((uint64_t)&unk_10027FFD0);
  *(void *)(v30 + 1sub_100019F7C(v0 + 6) = &v42;
  *(void *)(v30 + 2sub_100019F7C(v0 + 4) = a3;
  uint64_t v31 = sub_1000AC93C((uint64_t)&unk_10027FFF8);
  *(void *)(v31 + 1sub_100019F7C(v0 + 6) = sub_1000C0004;
  *(void *)(v31 + 2sub_100019F7C(v0 + 4) = v30;
  aBlock[4] = sub_1000C0010;
  uint64_t v41 = v31;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10019F444;
  aBlock[3] = &unk_100280010;
  uint64_t v32 = _Block_copy(aBlock);
  uint64_t v33 = v41;
  swift_retain();
  uint64_t v34 = swift_release(v33);
  sub_1000C0AE8(v34, "enumerateMemoryEntitiesUsingBlock:");

  _Block_release(v32);
  LOBYTE(v3sub_100019F7C(v0 + 2) = sub_1000C09B8(v31, (uint64_t)"", 117LL, 493LL);
  uint64_t result = sub_10001EDD8();
  if ((v32 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    id v36 = v42;
    sub_100024F0C();
    return (uint64_t)v36;
  }

  return result;
}

uint64_t sub_1000BFE98(void *a1, uint64_t a2, _BYTE *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for Transaction();
  uint64_t result = swift_dynamicCastClass(a1, v9);
  if (result)
  {
    uint64_t v11 = result;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(a1);
    uint64_t v12 = *(void *)((*a4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    sub_10002E9EC(v12);
    uint64_t v13 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v11);
    uint64_t result = specialized Array._endMutation()(v13);
    uint64_t v14 = *a4;
    if ((unint64_t)v14 >> 62)
    {
      if (v14 < 0) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = v14 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v14);
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter(v16);
      uint64_t result = swift_bridgeObjectRelease(v14);
    }

    else
    {
      uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    if (v15 >= a5) {
      *a3 = 1;
    }
  }

  return result;
}

void sub_1000BFF68()
{
}

id sub_1000BFFA0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DatabaseSession();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DatabaseSession()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService15DatabaseSession);
}

uint64_t sub_1000C0004(void *a1, uint64_t a2, _BYTE *a3)
{
  return sub_1000BFE98(a1, a2, a3, *(uint64_t **)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_1000C0010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10019F424(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_1000C0018(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10006F0B8(12LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C0028(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

id sub_1000C0030(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = a2 & 0xC000000000000001LL;
  sub_100119E64(a1, (a2 & 0xC000000000000001LL) == 0, a2);
  if (v4) {
    return (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a1, a2);
  }
  else {
    return *(id *)(a2 + 8 * a1 + 32);
  }
}

void *sub_1000C0090( void *(*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0) {
    return 0LL;
  }
  uint64_t v6 = a3;
  uint64_t result = a1(&v7, &v6);
  if (!v4) {
    return (void *)v7;
  }
  return result;
}

id sub_1000C00E4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  id result = sub_1000C0030(*a1, *a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

id sub_1000C0120@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1000C00E4(a1, *(uint64_t **)(v2 + 16), a2);
}

void sub_1000C0140(void *a1, uint64_t a2)
{
}

void sub_1000C014C(uint64_t a1, uint64_t a2)
{
}

void sub_1000C0158(void *a1)
{
}

void sub_1000C0164(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1000C016C()
{
  return sub_1000C0330(v0, 41LL);
}

void sub_1000C0178(void *a1, uint64_t a2, _BYTE *a3)
{
}

uint64_t sub_1000C018C()
{
  return sub_1000C0330(v0, 24LL);
}

void sub_1000C0198(void *a1)
{
}

uint64_t sub_1000C01A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000175B0(&qword_1002AFB88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C01EC(uint64_t a1)
{
  return a1;
}

void sub_1000C0244( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, unsigned __int8 a15, uint64_t a16, char a17, uint64_t a18, char a19, char a20, char a21, unsigned __int8 a22, unsigned __int8 a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, char a28, uint64_t a29, uint64_t *a30, uint64_t a31, char a32, uint64_t a33, uint64_t a34, char a35, char a36, uint64_t a37, char a38, char a39, char a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47, char a48, uint64_t a49, uint64_t a50,unsigned __int8 a51)
{
  sub_10019772C( a1,  a2,  0LL,  1,  0LL,  0LL,  0LL,  1,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43,  a44,  a45,  a46,  a47,  a48,  a49,
    a50,
    a51);
}

uint64_t sub_1000C0260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for Date(0LL);
}

uint64_t sub_1000C027C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000C028C()
{
  return v0;
}

uint64_t sub_1000C0330(uint64_t a1, uint64_t a2)
{
  return swift_deallocObject(a1, a2, 7LL);
}

void sub_1000C0338( double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, double a27, const char *a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43)
{
}

void sub_1000C035C( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, unsigned __int8 a15, uint64_t a16, char a17, uint64_t a18, char a19, char a20, char a21, unsigned __int8 a22, unsigned __int8 a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, char a28, uint64_t a29, uint64_t *a30, uint64_t a31, char a32, uint64_t a33, uint64_t a34, char a35, char a36, uint64_t a37, char a38, char a39, char a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47, char a48, uint64_t a49, uint64_t a50,unsigned __int8 a51)
{
  sub_10019772C( a1,  a2,  a3,  a4,  a5,  a6,  0LL,  1,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43,  a44,  a45,  a46,  a47,  a48,  a49,
    a50,
    a51);
}

uint64_t sub_1000C0368(uint64_t a1, unint64_t *a2, void *a3)
{
  return sub_10001672C(0LL, a2, a3);
}

uint64_t sub_1000C0370()
{
  return swift_bridgeObjectRetain();
}

void sub_1000C03D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, double a27, const char *a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43)
{
}

uint64_t sub_1000C03E8()
{
  return sub_10001762C(v0, 1LL, 1LL, v2);
}

uint64_t sub_1000C0418(uint64_t a1)
{
  return swift_bridgeObjectRetain();
}

double sub_1000C0468()
{
  return 0.0;
}

double sub_1000C04B0()
{
  return 0.0;
}

double sub_1000C04F8()
{
  return 0.0;
}

double sub_1000C0540()
{
  return 0.0;
}

uint64_t sub_1000C0588()
{
  *(_OWORD *)(v0 - 208) = 0u;
  *(_OWORD *)(v0 - 19sub_100019F7C(v0 + 2) = 0u;
  *(_BYTE *)(v0 - 17sub_100019F7C(v0 + 6) = -1;
  return type metadata accessor for UUID(0LL);
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000C061C(uint64_t a1)
{
  return sub_10001762C(v1, 1LL, 1LL, a1);
}

  ;
}

  ;
}

double sub_1000C06B8()
{
  return 0.0;
}

double sub_1000C06CC()
{
  return 0.0;
}

  ;
}

  ;
}

uint64_t sub_1000C0718()
{
  return *(void *)(v0 + 32);
}

  ;
}

uint64_t sub_1000C0758(uint64_t a1, uint64_t a2)
{
  return Dictionary.init(dictionaryLiteral:)(a1, a2, v2);
}

unint64_t sub_1000C0760()
{
  return sub_100092564();
}

  ;
}

  ;
}

uint64_t sub_1000C07B8()
{
  return sub_10001762C(v1, 1LL, 1LL, v0);
}

double sub_1000C07E8()
{
  double result = 0.0;
  *(_OWORD *)(v0 - 19sub_100019F7C(v0 + 2) = 0u;
  *(_OWORD *)(v0 - 17sub_100019F7C(v0 + 6) = 0u;
  *(_OWORD *)(v0 - 16sub_10006F0B8(12LL, 0) = 0u;
  *(_OWORD *)(v0 - 14sub_100019F7C(v0 + 4) = 0u;
  *(_OWORD *)(v0 - 128) = 0u;
  return result;
}

double sub_1000C0800()
{
  return 0.0;
}

  ;
}

  ;
}

  ;
}

id sub_1000C0868(uint64_t a1, void *a2)
{
  return sub_100199F5C(4u, a2, 4u);
}

id sub_1000C0878(unsigned __int8 a1, void *a2, unsigned __int8 a3)
{
  return sub_100199F5C(a1, a2, a3);
}

  ;
}

  ;
}

void sub_1000C08C8()
{
}

uint64_t sub_1000C08D0(uint64_t a1)
{
  return sub_10001762C(a1, 1LL, 1LL, v1);
}

uint64_t sub_1000C08E0(uint64_t a1)
{
  return sub_10001762C(a1, 1LL, 1LL, v1);
}

uint64_t sub_1000C08F0(uint64_t a1)
{
  return sub_10001762C(a1, 1LL, 1LL, v1);
}

uint64_t sub_1000C0900(uint64_t a1)
{
  return sub_10001762C(a1, 1LL, 1LL, v1);
}

uint64_t sub_1000C0910(uint64_t a1)
{
  return sub_1001983A0(v1, v2, v2, a1);
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

void sub_1000C0998()
{
}

void sub_1000C09A4()
{
}

uint64_t sub_1000C09B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_isEscapingClosureAtFileLocation(a1, a2, a3, a4, 39LL, 1LL);
}

uint64_t sub_1000C09C4()
{
  return v0;
}

void sub_1000C09D0()
{
}

uint64_t sub_1000C09D8@<X0>(unint64_t a1@<X8>)
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(a1 > 1);
}

double sub_1000C09E8()
{
  double result = 0.0;
  *(_OWORD *)(v0 - 17sub_100019F7C(v0 + 6) = 0u;
  *(_OWORD *)(v0 - 16sub_10006F0B8(12LL, 0) = 0u;
  *(_OWORD *)(v0 - 14sub_100019F7C(v0 + 4) = 0u;
  *(_OWORD *)(v0 - 128) = 0u;
  *(_OWORD *)(v0 - 11sub_100019F7C(v0 + 2) = 0u;
  return result;
}

double sub_1000C0A00()
{
  double result = 0.0;
  *(_OWORD *)(v0 - 16sub_10006F0B8(12LL, 0) = 0u;
  *(_OWORD *)(v0 - 14sub_100019F7C(v0 + 4) = 0u;
  *(_OWORD *)(v0 - 128) = 0u;
  *(_OWORD *)(v0 - 11sub_100019F7C(v0 + 2) = 0u;
  *(_OWORD *)(v0 - 9sub_100019F7C(v0 + 6) = 0u;
  return result;
}

  ;
}

  ;
}

uint64_t sub_1000C0A34()
{
  return v0;
}

uint64_t sub_1000C0A4C()
{
  if (v0 < 0) {
    return _CocoaArrayWrapper.endIndex.getter(v0);
  }
  else {
    return _CocoaArrayWrapper.endIndex.getter(v0 & 0xFFFFFFFFFFFFFF8LL);
  }
}

  ;
}

  ;
}

uint64_t sub_1000C0A80()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v0, v1);
}

uint64_t sub_1000C0A8C()
{
  return swift_setDeallocating(v0);
}

uint64_t sub_1000C0A98(uint64_t a1)
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(a1, v1);
}

double sub_1000C0AA0()
{
  return 0.0;
}

uint64_t sub_1000C0AAC(uint64_t a1, uint64_t a2)
{
  return sub_100119E64(0LL, a2, v2);
}

uint64_t sub_1000C0AB8()
{
  return type metadata accessor for Transaction();
}

  ;
}

uint64_t sub_1000C0AD4(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 4sub_10006F0B8(12LL, 0) = a1;
  *(void *)(v3 + 48) = a2;
  return v2;
}

id sub_1000C0AE8(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

  ;
}

uint64_t sub_1000C0B00(unint64_t a1, uint64_t a2)
{
  return sub_100155C30(a1, 0LL, a2);
}

uint64_t MulticastChannel.joinGroup(_:promise:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C0F44(a1, a2, a2, a3, a4, *(uint64_t (**)(uint64_t, void))(a4 + 32));
}

void MulticastChannel.joinGroup(_:)()
{
  uint64_t v3 = sub_1000C0ED0(v0, v1, v2);
  sub_1000C0F4C(v3);
  sub_1000C0F38();
  sub_1000C0F64(v4, v5, v6, v7, 91LL, v8);
  sub_1000C0F58();
  swift_retain();
  sub_1000C0F20();
  swift_release();
  sub_10002A44C();
}

void MulticastChannel.joinGroup(_:interface:)()
{
  uint64_t v4 = sub_1000C0E84(v0, v1, v2, v3);
  sub_1000C0EFC(v4);
  sub_1000C0F38();
  sub_1000C0F14(v5, v6, v7, v8, 99LL, v9);
  sub_1000C0F08();
  sub_10009B678();
  sub_1000C0EB4();
  sub_10002A7BC();
  sub_10002A44C();
}

void MulticastChannel.joinGroup(_:device:)()
{
  uint64_t v4 = sub_1000C0E84(v0, v1, v2, v3);
  sub_1000C0EFC(v4);
  sub_1000C0F38();
  sub_1000C0F14(v5, v6, v7, v8, 106LL, v9);
  sub_1000C0F08();
  sub_10009B678();
  sub_1000C0EB4();
  sub_10002A7BC();
  sub_10002A44C();
}

uint64_t sub_1000C0C48(unint64_t a1, uint64_t a2)
{
  return sub_100155C78(a1, 0LL, a2);
}

uint64_t MulticastChannel.leaveGroup(_:promise:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C0F44(a1, a2, a2, a3, a4, *(uint64_t (**)(uint64_t, void))(a4 + 56));
}

void MulticastChannel.leaveGroup(_:)()
{
  uint64_t v3 = sub_1000C0ED0(v0, v1, v2);
  sub_1000C0F4C(v3);
  sub_1000C0F38();
  sub_1000C0F64(v4, v5, v6, v7, 116LL, v8);
  sub_1000C0F58();
  swift_retain();
  sub_1000C0F20();
  swift_release();
  sub_10002A44C();
}

void MulticastChannel.leaveGroup(_:interface:)()
{
  uint64_t v4 = sub_1000C0E84(v0, v1, v2, v3);
  sub_1000C0EFC(v4);
  sub_1000C0F38();
  sub_1000C0F14(v5, v6, v7, v8, 124LL, v9);
  sub_1000C0F08();
  sub_10009B678();
  sub_1000C0EB4();
  sub_10002A7BC();
  sub_10002A44C();
}

void MulticastChannel.leaveGroup(_:device:)()
{
  uint64_t v4 = sub_1000C0E84(v0, v1, v2, v3);
  sub_1000C0EFC(v4);
  sub_1000C0F38();
  sub_1000C0F14(v5, v6, v7, v8, 131LL, v9);
  sub_1000C0F08();
  sub_10009B678();
  sub_1000C0EB4();
  sub_10002A7BC();
  sub_10002A44C();
}

unint64_t sub_1000C0D94()
{
  unint64_t result = qword_1002AFD28;
  if (!qword_1002AFD28)
  {
    unint64_t result = swift_getWitnessTable("93\b", &type metadata for NIOMulticastNotImplementedError);
    atomic_store(result, (unint64_t *)&qword_1002AFD28);
  }

  return result;
}

void _s25ASOctaneSupportXPCService16MulticastChannelPAAE9joinGroup_6device7promiseyAA13SocketAddressO_AA16NIONetworkDeviceVSgAA16EventLoopPromiseVyytGSgtF_0( uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    unint64_t v4 = sub_1000C0D94();
    uint64_t v5 = swift_allocError(&type metadata for NIOMulticastNotImplementedError, v4, 0LL, 0LL);
    swift_errorRetain(v5);
    sub_100098A70(v5, 1LL, a3);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
  }

uint64_t NIOMulticastNotSupportedError.device.setter(uint64_t a1)
{
  uint64_t result = swift_release(*v1);
  *uint64_t v1 = a1;
  return result;
}

ValueMetadata *type metadata accessor for NIOMulticastNotSupportedError()
{
  return &type metadata for NIOMulticastNotSupportedError;
}

ValueMetadata *type metadata accessor for NIOMulticastNotImplementedError()
{
  return &type metadata for NIOMulticastNotImplementedError;
}

uint64_t sub_1000C0E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a4 + 8) + 8LL) + 80LL))(a3);
}

uint64_t sub_1000C0EB4()
{
  return v5(v3, v2, v4, v1, v0);
}

uint64_t sub_1000C0ED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a3 + 8) + 8LL) + 80LL))(a2);
}

uint64_t sub_1000C0EFC(uint64_t a1)
{
  return swift_getObjectType(a1);
}

uint64_t sub_1000C0F08()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1000C0F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return EventLoop.makePromise<A>(of:file:line:)(a1, a2, a3, a4, a5, a6, a1, v6);
}

uint64_t sub_1000C0F20()
{
  return v4(v2, v3, v1, v0);
}

  ;
}

uint64_t sub_1000C0F44( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, void))
{
  return a6(a1, 0LL);
}

uint64_t sub_1000C0F4C(uint64_t a1)
{
  return swift_getObjectType(a1);
}

uint64_t sub_1000C0F58()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1000C0F64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return EventLoop.makePromise<A>(of:file:line:)(a1, a2, a3, a4, a5, a6, a1, v6);
}

void __swiftcall AdaptiveRecvByteBufferAllocator.init()( ASOctaneSupportXPCService::AdaptiveRecvByteBufferAllocator *__return_ptr retstr)
{
  *(_OWORD *)&retstr->minimum = xmmword_1001FD000;
  *(int64x2_t *)&retstr->initial = vdupq_n_s64(0x800uLL);
  retstr->decreaseNow = 0;
}

ASOctaneSupportXPCService::FixedSizeRecvByteBufferAllocator __swiftcall FixedSizeRecvByteBufferAllocator.init(capacity:)( ASOctaneSupportXPCService::FixedSizeRecvByteBufferAllocator capacity)
{
  if (capacity.capacity < 1) {
    __break(1u);
  }
  return capacity;
}

void FixedSizeRecvByteBufferAllocator.buffer(allocator:)( uint64_t (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  int v5 = a5;
  if (!a5)
  {
    if (qword_1002A8CC8 == -1)
    {
LABEL_5:
      sub_1000C132C(&static ByteBufferAllocator.zeroCapacityWithDefaultAllocator);
      goto LABEL_6;
    }

void sub_1000C1040(uint64_t (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t AdaptiveRecvByteBufferAllocator.minimum.getter()
{
  return *(void *)v0;
}

uint64_t AdaptiveRecvByteBufferAllocator.maximum.getter()
{
  return *(void *)(v0 + 8);
}

void __swiftcall AdaptiveRecvByteBufferAllocator.init(minimum:initial:maximum:)( ASOctaneSupportXPCService::AdaptiveRecvByteBufferAllocator *__return_ptr retstr, Swift::Int minimum, Swift::Int initial, Swift::Int maximum)
{
  if (minimum < 0 || (initial >= minimum ? (BOOL v4 = maximum < initial) : (BOOL v4 = 1), v4))
  {
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v5 = 0x40000000LL;
  Swift::Int v6 = 0x40000000LL;
  if (initial <= 0x40000000)
  {
    if (!initial)
    {
      Swift::Int v7 = 0LL;
      goto LABEL_13;
    }

    Swift::Int v6 = initial;
  }

  Swift::Int v7 = 1LL << (63 - __clz(v6));
LABEL_13:
  Swift::Int v8 = 0x40000000LL;
  if (maximum <= 0x40000000)
  {
    if (!maximum)
    {
      Swift::Int v12 = 1LL;
LABEL_20:
      retstr->minimum = v5;
      retstr->maximum = v12;
      retstr->initial = v7;
      retstr->nextReceiveBufferSize = v7;
      retstr->decreaseNow = 0;
      return;
    }

    Swift::Int v8 = maximum;
  }

  BOOL v9 = __OFSUB__(v8, 1LL);
  unint64_t v10 = v8 - 1;
  if (!v9)
  {
    unint64_t v11 = __clz(v10);
    if (v11) {
      Swift::Int v12 = 1LL << -(char)v11;
    }
    else {
      Swift::Int v12 = 0LL;
    }
    goto LABEL_20;
  }

void AdaptiveRecvByteBufferAllocator.buffer(allocator:)( uint64_t (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(v4 + 24);
  if (v5 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  if (!v5)
  {
    if (qword_1002A8CC8 == -1)
    {
LABEL_5:
      sub_1000C132C(&static ByteBufferAllocator.zeroCapacityWithDefaultAllocator);
      goto LABEL_6;
    }

Swift::Bool __swiftcall AdaptiveRecvByteBufferAllocator.record(actualReadBytes:)(Swift::Int actualReadBytes)
{
  Swift::Int v2 = *(void *)(v1 + 24);
  if ((v2 & 1) != 0)
  {
    __break(1u);
    goto LABEL_25;
  }

  if (v2 < *(void *)v1)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  Swift::Int v3 = *(void *)(v1 + 8);
  if (v3 < v2)
  {
LABEL_26:
    __break(1u);
    return actualReadBytes;
  }

  Swift::Int v4 = v2 >> 1;
  uint64_t v5 = 2 * v2;
  if (2 * v2 <= 0) {
    uint64_t v5 = *(void *)(v1 + 24);
  }
  if (v4 >= actualReadBytes && v4 >= *(void *)v1)
  {
    if (*(_BYTE *)(v1 + 32) != 1)
    {
      LOBYTE(actualReadBytes) = 0;
      *(_BYTE *)(v1 + 3sub_100019F7C(v0 + 2) = 1;
      return actualReadBytes;
    }

    LOBYTE(actualReadBytes) = 0;
    *(void *)(v1 + 2sub_100019F7C(v0 + 4) = v4;
    goto LABEL_22;
  }

  if (v2 == v5 || v2 > actualReadBytes || v3 < v5)
  {
    LOBYTE(actualReadBytes) = 0;
LABEL_22:
    *(_BYTE *)(v1 + 3sub_100019F7C(v0 + 2) = 0;
    return actualReadBytes;
  }

  *(void *)(v1 + 2sub_100019F7C(v0 + 4) = v5;
  *(_BYTE *)(v1 + 3sub_100019F7C(v0 + 2) = 0;
  LOBYTE(actualReadBytes) = 1;
  return actualReadBytes;
}

void sub_1000C125C(uint64_t (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4)
{
}

ValueMetadata *type metadata accessor for FixedSizeRecvByteBufferAllocator()
{
  return &type metadata for FixedSizeRecvByteBufferAllocator;
}

uint64_t getEnumTagSinglePayload for AdaptiveRecvByteBufferAllocator(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
      BOOL v4 = v3 >= 2;
      int v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AdaptiveRecvByteBufferAllocator( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 1sub_100019F7C(v0 + 6) = 0LL;
    *(void *)(result + 2sub_100019F7C(v0 + 4) = 0LL;
    *(_BYTE *)(result + 3sub_100019F7C(v0 + 2) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 33) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 3sub_100019F7C(v0 + 2) = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AdaptiveRecvByteBufferAllocator()
{
  return &type metadata for AdaptiveRecvByteBufferAllocator;
}

uint64_t sub_1000C132C@<X0>(void *a1@<X8>)
{
  return swift_retain(*a1);
}

  ;
}

  ;
}

uint64_t sub_1000C1370(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x647261646E617473LL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease(0xE800000000000000LL);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x647261646E617473LL, 0xE800000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

uint64_t sub_1000C13F4()
{
  return 0x647261646E617473LL;
}

void sub_1000C140C()
{
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  Swift::Int v8 = v7;
  sub_1000175B0(&qword_1002AFF10);
  sub_1000C798C();
  __chkstk_darwin(v9);
  sub_1000C78A4();
  uint64_t v10 = v8[3];
  uint64_t v11 = v8[4];
  sub_100019F58(v8, v10);
  unint64_t v12 = sub_1000C71B0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for MediaFetchResponse.Datum.ProductAttributes.Description.CodingKeys,  &type metadata for MediaFetchResponse.Datum.ProductAttributes.Description.CodingKeys,  v12,  v10,  v11);
  KeyedEncodingContainer.encode(_:forKey:)(v6, v4, v13, v0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
  sub_10001DAB8();
}

uint64_t sub_1000C14C4()
{
  uint64_t v2 = sub_1000175B0(&qword_1002AFEF0);
  sub_100022760();
  __chkstk_darwin(v3);
  sub_1000C76B0();
  unint64_t v4 = sub_1000C71B0();
  uint64_t v6 = sub_1000C772C( (uint64_t)&type metadata for MediaFetchResponse.Datum.ProductAttributes.Description.CodingKeys,  v5,  v4);
  if (!v1)
  {
    uint64_t v0 = KeyedDecodingContainer.decode(_:forKey:)(v6, v2);
    sub_1000258E8();
  }

  sub_10001DC08();
  return v0;
}

uint64_t sub_1000C1590(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6E6F6973726576LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v5 = 0xE700000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 1702521203 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    return 1LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1702521203LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1000C166C(char a1)
{
  if ((a1 & 1) != 0) {
    return 1702521203LL;
  }
  else {
    return 0x6E6F6973726576LL;
  }
}

void sub_1000C169C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  a22 = v24;
  a23 = v25;
  uint64_t v38 = v26;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v33 = sub_1000175B0(&qword_1002AFF18);
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  sub_1000BBB14();
  uint64_t v35 = v32[3];
  uint64_t v36 = v32[4];
  sub_100019F58(v32, v35);
  unint64_t v37 = sub_1000C71EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for MediaFetchResponse.Datum.ProductAttributes.HostedContent.CodingKeys,  &type metadata for MediaFetchResponse.Datum.ProductAttributes.HostedContent.CodingKeys,  v37,  v35,  v36);
  a13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v30, v28, &a13, v33);
  if (!v23)
  {
    a12 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v38, &a12, v33);
  }

  sub_1000C795C(*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8));
  sub_10001DAB8();
}

uint64_t sub_1000C1790()
{
  uint64_t v18 = v2;
  uint64_t v19 = v3;
  unint64_t v5 = v4;
  uint64_t v6 = sub_1000175B0(&qword_1002AFF00);
  sub_100022760();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = v5[3];
  uint64_t v11 = v5[4];
  sub_1000C76B0();
  unint64_t v12 = sub_1000C71EC();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for MediaFetchResponse.Datum.ProductAttributes.HostedContent.CodingKeys,  &type metadata for MediaFetchResponse.Datum.ProductAttributes.HostedContent.CodingKeys,  v12,  v10,  v11);
  if (v0)
  {
    sub_10001DC08();
  }

  else
  {
    char v17 = 0;
    uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v6);
    char v16 = 1;
    sub_100075D08(v11, v14);
    KeyedDecodingContainer.decode(_:forKey:)(&v16);
    sub_100093288((uint64_t)v9, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    sub_100019F7C(v5);
    sub_10001DC10();
  }

  return v11;
}

void sub_1000C18E8(uint64_t a1)
{
}

uint64_t sub_1000C1904@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000C1370(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1000C192C(uint64_t a1)
{
  unint64_t v2 = sub_1000C71B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000C1954(uint64_t a1)
{
  unint64_t v2 = sub_1000C71B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C197C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000C14C4();
  if (!v1)
  {
    *a1 = result;
    a1[1] = v4;
  }

  return result;
}

void sub_1000C19A4()
{
}

uint64_t sub_1000C19BC()
{
  return sub_1000C166C(*v0);
}

uint64_t sub_1000C19C4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000C1590(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000C19E8(uint64_t a1)
{
  unint64_t v2 = sub_1000C71EC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000C1A10(uint64_t a1)
{
  unint64_t v2 = sub_1000C71EC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C1A38@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000C1790();
  if (!v1)
  {
    *a1 = result;
    a1[1] = v4;
    a1[2] = v5;
  }

  return result;
}

#error "1000C1A74: call analysis failed (funcsize=7)"
uint64_t sub_1000C1A80@<X0>( uint64_t a1@<X0>,  void *a2@<X1>,  uint64_t a3@<X2>,  char a4@<W3>,  unsigned __int8 a5@<W4>,  uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  unsigned __int8 v30;
  uint64_t v31;
  void *v32;
  __objc2_class **v33;
  unint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE __src[136];
  _BYTE v53[136];
  _BYTE v54[136];
  _BYTE v55[144];
  uint64_t v10 = sub_1001BA8BC();
  uint64_t v49 = NSDecimal.description.getter(v10);
  unint64_t v12 = v11;
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 24);
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_100043978(v13, v14, (uint64_t)a2, a3);
  char v17 = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = a2[3];
  uint64_t v48 = a2[2];
  uint64_t v19 = type metadata accessor for OctaneSubscription();
  Class v20 = swift_dynamicCastClass(a1, v19);
  if (!v20)
  {
    sub_10001FFF0();
    swift_release(a1);
    sub_100056B1C();
    uint64_t result = (uint64_t)sub_10001B4DC(a2);
    uint64_t v32 = 0LL;
    uint64_t v38 = 0LL;
    uint64_t v39 = 0LL;
    uint64_t v40 = v48;
    unint64_t v37 = v49;
LABEL_26:
    v53[0] = 1;
    *(void *)a6 = 0LL;
    *(void *)(a6 + 8) = 0LL;
    *(void *)(a6 + 1sub_100019F7C(v0 + 6) = v37;
    *(void *)(a6 + 2sub_100019F7C(v0 + 4) = v12;
    *(void *)(a6 + 3sub_100019F7C(v0 + 2) = v15;
    *(void *)(a6 + 4sub_10006F0B8(12LL, 0) = v17;
    *(void *)(a6 + 48) = v40;
    *(void *)(a6 + 5sub_100019F7C(v0 + 6) = v18;
    *(void *)(a6 + 6sub_100019F7C(v0 + 4) = v38;
    *(void *)(a6 + 7sub_100019F7C(v0 + 2) = v39;
    *(void *)(a6 + 8sub_10006F0B8(12LL, 0) = 0LL;
    *(_BYTE *)(a6 + sub_100081CEC(v0 + 88) = 1;
    *(_OWORD *)(a6 + 9sub_100019F7C(v0 + 6) = 0u;
    *(_OWORD *)(a6 + 11sub_100019F7C(v0 + 2) = 0u;
    *(void *)(a6 + 128) = v32;
    return result;
  }

  __int16 v46 = v18;
  uint64_t v47 = v17;
  uint64_t v21 = *(void *)(v20 + 176);
  __int16 v22 = a1;
  uint64_t v23 = *(unsigned __int8 *)(v20 + 184);
  sub_10001FFF0();
  uint64_t v45 = v22;
  swift_retain();
  uint64_t v24 = sub_1001BDFBC(v21, v23);
  __int16 v43 = v25;
  uint64_t v44 = v24;
  uint64_t v26 = sub_1000227E4();
  uint64_t v27 = v26;
  if ((unint64_t)v26 >> 62)
  {
    if (v26 < 0) {
      uint64_t v41 = v26;
    }
    else {
      uint64_t v41 = v26 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(v41);
    uint64_t v28 = result;
  }

  else
  {
    uint64_t v28 = *(void *)((v26 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }

  uint64_t v30 = a5;
  if (!v28)
  {
    sub_100056B1C();
    sub_10001EDA0();
    uint64_t v32 = _swiftEmptyArrayStorage;
    unint64_t v37 = v49;
LABEL_25:
    sub_10001B4DC(a2);
    sub_10001EDA0();
    uint64_t result = swift_release_n(v45, 2LL);
    char v17 = v47;
    uint64_t v40 = v48;
    uint64_t v18 = v46;
    uint64_t v39 = v43;
    uint64_t v38 = v44;
    goto LABEL_26;
  }

  if (v28 >= 1)
  {
    uint64_t v42 = v12;
    uint64_t v31 = 0LL;
    uint64_t v32 = _swiftEmptyArrayStorage;
    do
    {
      if ((v27 & 0xC000000000000001LL) != 0)
      {
        uint64_t v33 = (__objc2_class **)specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v27);
      }

      else
      {
        uint64_t v33 = *(__objc2_class ***)(v27 + 8 * v31 + 32);
        swift_retain();
      }

      if ((a4 & 1) != 0 && *v33 == &OBJC_CLASS____TtCC25ASOctaneSupportXPCService18OctaneSubscription10AdHocOffer
        || (v30 & (*v33 == &OBJC_CLASS____TtCC25ASOctaneSupportXPCService18OctaneSubscription12WinbackOffer)) != 0
        || *v33 == &OBJC_CLASS____TtCC25ASOctaneSupportXPCService18OctaneSubscription17IntroductoryOffer)
      {
        swift_retain();
        sub_10003C434(a2);
        sub_1000C1DDC((uint64_t)v33, a2, (uint64_t)v54);
        sub_1000C7914((uint64_t)v54, (uint64_t)v53);
        sub_1000C7914((uint64_t)v54, (uint64_t)v55);
        if (sub_1000C4E08((uint64_t)v55) != 1)
        {
          if ((swift_isUniquelyReferenced_nonNull_native(v32) & 1) == 0)
          {
            sub_1000C79B4();
            uint64_t v32 = v35;
          }

          uint64_t v34 = v32[2];
          if (v34 >= v32[3] >> 1)
          {
            sub_1000C79B4();
            uint64_t v32 = v36;
          }

          sub_1000C7914((uint64_t)v53, (uint64_t)__src);
          void v32[2] = v34 + 1;
          memcpy(&v32[17 * v34 + 4], __src, 0x88uLL);
          uint64_t v30 = a5;
        }
      }

      else
      {
        sub_10002A51C();
      }

      ++v31;
    }

    while (v28 != v31);
    sub_100056B1C();
    sub_10001EDA0();
    unint64_t v12 = v42;
    unint64_t v37 = v49;
    goto LABEL_25;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000C1DDC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = *(__objc2_class **)a1;
  if (*(__objc2_class **)a1 == &OBJC_CLASS____TtCC25ASOctaneSupportXPCService18OctaneSubscription10AdHocOffer)
  {
    sub_1000C786C();
LABEL_8:
    uint64_t v34 = *(void *)(a1 + 104);
    uint64_t v36 = *(void *)(a1 + 96);
    swift_bridgeObjectRetain();
    goto LABEL_9;
  }

  if (v8 != &OBJC_CLASS____TtCC25ASOctaneSupportXPCService18OctaneSubscription17IntroductoryOffer)
  {
    if (v8 != &OBJC_CLASS____TtCC25ASOctaneSupportXPCService18OctaneSubscription12WinbackOffer)
    {
      sub_10002A51C();
      sub_100024F0C();
      sub_10001B4DC(a2);
      sub_1000C4E20(&v41);
      sub_1000C792C( v9,  v10,  &qword_1002AFD30,  v11,  v12,  v13,  v14,  v15,  v30,  v31,  v32,  v33,  v35,  v37,  v40,  v41,  v42,  v43,  v44,  v45,  v46,  v47,  v48,  v49,  v50,  v51,  v52,  v53,  v54,  v55,  v56,  v57,  v58[0]);
      return sub_1000390C8((uint64_t)v58, a3, &qword_1002AFD30);
    }

    uint64_t v30 = 0xE700000000000000LL;
    uint64_t v31 = 0x6B6361626E6957LL;
    goto LABEL_8;
  }

  uint64_t v34 = 0LL;
  uint64_t v36 = 0LL;
  sub_1000C786C();
LABEL_9:
  uint64_t v38 = a3;
  if (*(void *)(a1 + 40)) {
    __asm { BR              X10 }
  }

  sub_1000C7908(808463920LL, 0xE400000000000000LL);
  sub_1000C7820();
  uint64_t v17 = *(void *)(a1 + 64);
  uint64_t v16 = *(void *)(a1 + 72);
  if (*(_BYTE *)(a1 + 56)) {
    uint64_t v18 = 1LL;
  }
  else {
    uint64_t v18 = *(void *)(a1 + 48);
  }
  uint64_t v19 = *(char *)(a1 + 57);
  uint64_t v20 = *(void *)&aNone_2[8 * v19];
  uint64_t v21 = *(void *)&aFreetriapayasy[8 * v19 + 24];
  sub_10003574C();
  sub_10002A51C();
  sub_100024F0C();
  LOBYTE(v4sub_10006F0B8(12LL, 0) = 0;
  uint64_t v41 = v31;
  uint64_t v42 = v30;
  uint64_t v43 = 808463920LL;
  uint64_t v44 = 0xE400000000000000LL;
  uint64_t v45 = v3;
  uint64_t v46 = v4;
  uint64_t v47 = 0LL;
  uint64_t v48 = 0LL;
  uint64_t v49 = v17;
  uint64_t v50 = v16;
  uint64_t v51 = v18;
  LOBYTE(v5sub_100019F7C(v0 + 2) = 0;
  uint64_t v53 = v20;
  uint64_t v54 = v21;
  uint64_t v55 = v36;
  uint64_t v56 = v34;
  uint64_t v57 = 0LL;
  uint64_t v22 = debugOnly(_:)(&v41);
  sub_1000C792C( v22,  v23,  &qword_1002AFD30,  v24,  v25,  v26,  v27,  v28,  v30,  v31,  808463920LL,  v34,  v36,  v38,  v40,  v41,  v42,  v43,  v44,  v45,  v46,  v47,  v48,  v49,  v50,  v51,  v52,  v53,  v54,  v55,  v56,  v57,  v58[0]);
  a3 = v39;
  return sub_1000390C8((uint64_t)v58, a3, &qword_1002AFD30);
}

void sub_1000C2084(uint64_t a1)
{
  v2._rawValue = &off_100272340;
  sub_100052314(v2, a1);
  sub_100019344();
  sub_10001945C();
}

uint64_t static NIOBSDSocket.Option.ipv6_multicast_if.getter()
{
  return 9LL;
}

uint64_t sub_1000C20C8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000C20F4 + 4 * byte_1001FD0D4[a1]))( 1701869940LL,  0xE400000000000000LL);
}

unint64_t sub_1000C2100()
{
  return sub_1000C77BC();
}

uint64_t sub_1000C2118()
{
  return 0x6570795465646F6DLL;
}

uint64_t sub_1000C2130(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000C215C + 4 * byte_1001FD0DD[a1]))( 1701869940LL,  0xE400000000000000LL);
}

unint64_t sub_1000C2168()
{
  return sub_1000C77BC();
}

uint64_t sub_1000C2180()
{
  return 0x6570795465646F6DLL;
}

void sub_1000C2198()
{
  uint64_t v2 = sub_1000175B0(&qword_1002AFE40);
  sub_100022760();
  __chkstk_darwin(v3);
  sub_100022724();
  unint64_t v4 = sub_1000C67E4();
  sub_1000226FC((uint64_t)&unk_100280680, v5, v4);
  uint64_t v6 = *(void *)v0;
  uint64_t v7 = *(void *)(v0 + 8);
  char v26 = 0;
  sub_1000C7548(v6, v7);
  if (!v1)
  {
    uint64_t v8 = *(void *)(v0 + 16);
    uint64_t v9 = *(void *)(v0 + 24);
    char v26 = 1;
    sub_100023EB4(v8, v9, (uint64_t)&v26);
    uint64_t v10 = *(void *)(v0 + 32);
    uint64_t v11 = *(void *)(v0 + 40);
    char v26 = 2;
    sub_100023EB4(v10, v11, (uint64_t)&v26);
    uint64_t v12 = *(void *)(v0 + 48);
    uint64_t v13 = *(void *)(v0 + 56);
    char v26 = 3;
    sub_1000C7548(v12, v13);
    uint64_t v14 = *(void *)(v0 + 64);
    uint64_t v15 = *(void *)(v0 + 72);
    char v26 = 4;
    sub_1000C7548(v14, v15);
    uint64_t v16 = *(void *)(v0 + 80);
    uint64_t v17 = *(unsigned __int8 *)(v0 + 88);
    char v26 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v26, v2);
    sub_100054254(v0 + 128, (uint64_t)&v27);
    sub_100054254((uint64_t)&v27, (uint64_t)&v26);
    char v25 = 6;
    uint64_t v18 = sub_10007F094();
    uint64_t v20 = sub_1000C7830( &qword_1002AFE10,  v19,  (uint64_t (*)(void))sub_1000C676C,  (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v26, &v25, v2, v18, v20);
    uint64_t v21 = *(void *)(v0 + 112);
    uint64_t v22 = *(void *)(v0 + 120);
    char v26 = 7;
    sub_1000C7548(v21, v22);
    uint64_t v23 = *(void *)(v0 + 96);
    uint64_t v24 = *(void *)(v0 + 104);
    char v26 = 8;
    sub_1000C7548(v23, v24);
  }

  sub_1000227A0();
  sub_1000226D8();
}

void sub_1000C2370()
{
  uint64_t v2 = v1;
  unint64_t v4 = v3;
  uint64_t v5 = sub_1000175B0(&qword_1002AFE30);
  sub_100022760();
  __chkstk_darwin(v6);
  sub_1000C78A4();
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  sub_100019F58(v2, v7);
  unint64_t v9 = sub_1000C67E4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_100280680, &unk_100280680, v9, v7, v8);
  if (v0)
  {
    sub_1000C7970();
  }

  else
  {
    uint64_t v10 = sub_1000C755C();
    uint64_t v12 = v11;
    sub_100075D08(v10, v11);
    uint64_t v43 = v12;
    uint64_t v38 = sub_1000C77F8();
    uint64_t v14 = v13;
    sub_100075D08(v38, v13);
    uint64_t v42 = v14;
    uint64_t v37 = sub_1000C77F8();
    uint64_t v16 = v15;
    swift_bridgeObjectRetain();
    uint64_t v41 = v16;
    uint64_t v17 = sub_1000C755C();
    uint64_t v40 = v18;
    swift_bridgeObjectRetain();
    uint64_t v35 = sub_1000C755C();
    uint64_t v36 = v17;
    LOBYTE(v45[0]) = 5;
    uint64_t v20 = v19;
    sub_100075D08(v35, v19);
    uint64_t v39 = v20;
    uint64_t v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v45, v5);
    char v55 = v21 & 1;
    LOBYTE(v2sub_10006F0B8(12LL, 0) = v21;
    uint64_t v22 = sub_1000175B0(&qword_1002AFDD0);
    LOBYTE(v44[0]) = 6;
    uint64_t v23 = sub_10007EC24( &qword_1002AFDD8,  &qword_1002AFDD0,  (uint64_t (*)(void))sub_1000C64BC,  (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v22, v44, v5, v22, v23);
    char v33 = v20;
    uint64_t v24 = v45[0];
    LOBYTE(v45[0]) = 7;
    swift_bridgeObjectRetain();
    uint64_t v32 = sub_1000C755C();
    uint64_t v25 = v24;
    char v53 = 8;
    uint64_t v27 = v26;
    sub_100075D08(v32, v26);
    uint64_t v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v53, v5);
    uint64_t v31 = v29;
    uint64_t v30 = v28;
    sub_1000C7538();
    v44[0] = v10;
    v44[1] = v43;
    v44[2] = v38;
    v44[3] = v42;
    v44[4] = v37;
    v44[5] = v41;
    v44[6] = v36;
    v44[7] = v40;
    char v44[8] = v35;
    v44[9] = v39;
    v44[10] = v34;
    LOBYTE(v44[11]) = v33 & 1;
    v44[12] = v30;
    v44[13] = v31;
    v44[14] = v32;
    v44[15] = v27;
    v44[16] = v25;
    sub_10003574C();
    sub_1000C6820(v44);
    sub_10001A420();
    sub_1000C767C();
    sub_10001DC10();
    sub_100023EF4();
    sub_10001EDA0();
    sub_10003561C();
    sub_100024E84();
    sub_10001A420();
    sub_1000C7970();
    v45[0] = v10;
    v45[1] = v43;
    v45[2] = v38;
    v45[3] = v42;
    v45[4] = v37;
    v45[5] = v41;
    v45[6] = v36;
    v45[7] = v40;
    v45[8] = v35;
    v45[9] = v39;
    v45[10] = v34;
    char v46 = v55;
    *(_DWORD *)uint64_t v47 = *(_DWORD *)v54;
    *(_DWORD *)&v47[3] = *(_DWORD *)&v54[3];
    uint64_t v48 = v30;
    uint64_t v49 = v31;
    uint64_t v50 = v32;
    uint64_t v51 = v27;
    uint64_t v52 = v25;
    sub_1000C68B0(v45);
    memcpy(v4, v44, 0x88uLL);
  }

  sub_10001DAB8();
}

void sub_1000C28A0(char *a1)
{
}

void sub_1000C28AC()
{
}

void sub_1000C28B4()
{
}

void sub_1000C28BC(uint64_t a1)
{
}

void sub_1000C28C4(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = v3;
}

uint64_t sub_1000C28F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000C20C8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000C2918()
{
  return sub_1000C2130(*v0);
}

uint64_t sub_1000C2920@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_1000C20BC();
  *a1 = result;
  return result;
}

void sub_1000C2944(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_1000C2950(uint64_t a1)
{
  unint64_t v2 = sub_1000C67E4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000C2978(uint64_t a1)
{
  unint64_t v2 = sub_1000C67E4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000C29A0(void *a1@<X8>)
{
  if (!v1) {
    memcpy(a1, __src, 0x88uLL);
  }
}

void sub_1000C29E8()
{
}

uint64_t sub_1000C2A38(uint64_t a1, unint64_t a2)
{
  if (a1 == 7107189 && a2 == 0xE300000000000000LL)
  {
    unint64_t v5 = 0xE300000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7107189LL, 0xE300000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x726F6C6F436762LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v8 = 0xE700000000000000LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F6C6F436762LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x6874646977LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v10 = 0xE500000000000000LL;
    goto LABEL_24;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6874646977LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2LL;
  }

  if (a1 == 0x746867696568LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    return 3LL;
  }

  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746867696568LL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_1000C2BC4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000C2BF0 + 4 * byte_1001FD0E6[a1]))( 7107189LL,  0xE300000000000000LL);
}

uint64_t sub_1000C2BF0()
{
  return 0x726F6C6F436762LL;
}

uint64_t sub_1000C2C08()
{
  return 0x6874646977LL;
}

uint64_t sub_1000C2C1C()
{
  return 0x746867696568LL;
}

void sub_1000C2C30()
{
  uint64_t v2 = sub_1000175B0(&qword_1002AFDA8);
  sub_100022760();
  __chkstk_darwin(v3);
  sub_100022724();
  unint64_t v4 = sub_1000C63CC();
  sub_1000226FC((uint64_t)&type metadata for MediaFetchResponse.Datum.ProductAttributes.Image.CodingKeys, v5, v4);
  uint64_t v6 = *v0;
  uint64_t v7 = v0[1];
  char v15 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v6, v7, &v15, v2);
  if (!v1)
  {
    uint64_t v8 = v0[2];
    uint64_t v9 = v0[3];
    char v14 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v8, v9, &v14, v2);
    uint64_t v10 = v0[4];
    char v13 = 2;
    sub_1000C78BC(v10, (uint64_t)&v13);
    uint64_t v11 = v0[5];
    char v12 = 3;
    sub_1000C78BC(v11, (uint64_t)&v12);
  }

  sub_1000227A0();
  sub_1000226D8();
}

void sub_1000C2D38( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v26;
  a24 = v27;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  sub_1000175B0(&qword_1002AFD98);
  sub_1000C798C();
  __chkstk_darwin(v32);
  sub_100092B28();
  uint64_t v33 = *(void *)(v29 + 24);
  uint64_t v34 = *(void *)(v29 + 32);
  sub_1000C76B0();
  unint64_t v35 = sub_1000C63CC();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for MediaFetchResponse.Datum.ProductAttributes.Image.CodingKeys,  &type metadata for MediaFetchResponse.Datum.ProductAttributes.Image.CodingKeys,  v35,  v33,  v34);
  if (v24)
  {
    sub_10001DC08();
  }

  else
  {
    a14 = 0;
    sub_1000C7884();
    uint64_t v38 = KeyedDecodingContainer.decode(_:forKey:)(v36, v37);
    uint64_t v40 = v39;
    a13 = 1;
    sub_100075D08(v38, v39);
    sub_1000C7884();
    uint64_t v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v41, v42);
    uint64_t v45 = v44;
    uint64_t v49 = v43;
    a12 = 2;
    sub_100075D08(v43, v44);
    uint64_t v50 = v45;
    uint64_t v48 = KeyedDecodingContainer.decode(_:forKey:)(&a12);
    sub_1000C7884();
    uint64_t v47 = KeyedDecodingContainer.decode(_:forKey:)(v46);
    sub_1000C752C(*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
    sub_10001DC08();
    swift_bridgeObjectRelease();
    sub_10001DC10();
    uint64_t *v31 = v38;
    v31[1] = v40;
    v31[2] = v49;
    v31[3] = v50;
    v31[4] = v48;
    v31[5] = v47;
  }

  sub_10001DAB8();
}

uint64_t sub_1000C2ED8()
{
  return sub_1000C2BC4(*v0);
}

uint64_t sub_1000C2EE0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000C2A38(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000C2F04(uint64_t a1)
{
  unint64_t v2 = sub_1000C63CC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000C2F2C(uint64_t a1)
{
  unint64_t v2 = sub_1000C63CC();
  return CodingKey.debugDescription.getter(a1, v2);
}

#error "1000C2F6C: call analysis failed (funcsize=16)"
void sub_1000C2F94()
{
  sub_1000C2C30();
}

void *sub_1000C2FA8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v58 = a7;
  uint64_t v59 = a8;
  uint64_t v80 = a2;
  uint64_t v14 = a1;
  uint64_t v76 = *(void *)(a1 + 88);
  uint64_t v77 = *(void *)(a1 + 80);
  swift_bridgeObjectRetain();
  uint64_t v16 = swift_bridgeObjectRetain();
  sub_1000CC010(v16);
  uint64_t v17 = sub_100019344();
  uint64_t v72 = (uint64_t)a5;
  if (a5)
  {
    uint64_t v25 = a5[3];
    uint64_t v74 = a5[2];
    uint64_t v75 = a5[4];
    uint64_t v71 = a5[5];
    swift_bridgeObjectRetain();
    uint64_t v73 = v25;
    uint64_t v17 = swift_bridgeObjectRetain();
  }

  else
  {
    uint64_t v74 = 0LL;
    uint64_t v75 = 0LL;
    uint64_t v73 = 0xE000000000000000LL;
    uint64_t v71 = 0xE000000000000000LL;
  }

  HIDWORD(v7sub_10006F0B8(12LL, 0) = *(unsigned __int8 *)(v14 + 32);
  uint64_t v81 = a4;
  uint64_t v82 = (uint64_t)a5;
  uint64_t v83 = v14;
  if (*(void *)(a6 + 16))
  {
    sub_1000C77B0( v17,  v18,  v19,  v20,  v21,  v22,  v23,  v24,  v56,  v58,  v59,  v60,  v62,  v64,  v66,  v68,  v70,  v71,  (uint64_t)a5,  v73,  v74,  v75,  v76,  v77,  v78,  v80,  (uint64_t)a4,  (uint64_t)a5,  v14,  v84,  __src[0]);
    String.hash(into:)(__src, 1684957547LL, 0xE400000000000000LL);
    sub_1000C7900();
    sub_1000C78EC();
    if (((*(void *)(a6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) != 0)
    {
      sub_1000C7794();
      __asm { BR              X9 }
    }

    uint64_t v67 = 0LL;
    uint64_t v69 = 0LL;
    uint64_t v14 = v83;
  }

  else
  {
    uint64_t v67 = 0LL;
    uint64_t v69 = 0LL;
  }

  uint64_t v27 = type metadata accessor for OctaneSubscription();
  uint64_t v28 = (void *)swift_dynamicCastClass(v14, v27);
  uint64_t v57 = (uint64_t)v28;
  if (v28)
  {
    uint64_t v63 = v28[24];
    uint64_t v65 = v28[21];
    uint64_t v61 = v28[25];
    swift_bridgeObjectRetain();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v80 = 0LL;
    a3 = 0LL;
    uint64_t v63 = 0LL;
    uint64_t v65 = 0LL;
    uint64_t v61 = 0LL;
  }

  uint64_t v29 = sub_1000175B0(&qword_1002AA440);
  uint64_t v30 = swift_allocObject(v29, 168LL, 7LL);
  uint64_t v38 = v30;
  *(_OWORD *)(v30 + 1sub_100019F7C(v0 + 6) = xmmword_1001F3C00;
  uint64_t v79 = a3;
  if (*(void *)(a6 + 16))
  {
    sub_1000C77B0( v30,  v31,  v32,  v33,  v34,  v35,  v36,  v37,  v57,  v58,  v59,  v61,  v63,  v65,  0LL,  0LL,  v70,  v71,  v72,  v73,  v74,  v75,  v76,  v77,  a3,  v80,  (uint64_t)v81,  v82,  v83,  v84,  __src[0]);
    swift_retain();
    sub_10003C434(a4);
    swift_retain();
    String.hash(into:)(__src, 0x66664F636F486461LL, 0xEB00000000737265LL);
    sub_1000C7900();
    sub_1000C78EC();
    if (((*(void *)(a6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) != 0)
    {
      sub_1000C7794();
      __asm { BR              X9 }
    }
  }

  else
  {
    swift_retain();
    sub_10003C434(a4);
    uint64_t v39 = swift_retain();
  }

  if (*(void *)(a6 + 16))
  {
    sub_1000C77B0( v39,  v40,  v41,  v42,  v43,  v44,  v45,  v46,  v57,  v58,  v59,  v61,  v63,  v65,  v67,  v69,  v70,  v71,  v72,  v73,  v74,  v75,  v76,  v77,  v79,  v80,  (uint64_t)v81,  v82,  v83,  v84,  __src[0]);
    String.hash(into:)(__src, 0x4F6B6361626E6977LL, 0xED00007372656666LL);
    unint64_t v48 = sub_1000C7900() & ~(-1LL << *(_BYTE *)(a6 + 32));
    if (((*(void *)(a6 + 56 + ((v48 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v48) & 1) != 0)
    {
      sub_1000C7794();
      __asm { BR              X9 }
    }
  }

  sub_10001A420();
  sub_1000C1A80(v83, v81, v82, 0, 0, (uint64_t)__src);
  memcpy((void *)(v38 + 32), __src, 0x88uLL);
  uint64_t v50 = sub_1000CC2F8((uint64_t)v81);
  uint64_t v52 = v51;
  swift_release(v83);
  sub_100024F0C();
  swift_release(v72);
  uint64_t result = sub_10001B4DC(v81);
  if (v59) {
    uint64_t v54 = v58;
  }
  else {
    uint64_t v54 = 0LL;
  }
  unint64_t v55 = (unint64_t)(v59 != 0) << 10;
  *(void *)a9 = v77;
  *(void *)(a9 + 8) = v76;
  *(void *)(a9 + 1sub_100019F7C(v0 + 6) = v75;
  *(void *)(a9 + 2sub_100019F7C(v0 + 4) = v71;
  *(void *)(a9 + 3sub_100019F7C(v0 + 2) = v74;
  *(void *)(a9 + 4sub_10006F0B8(12LL, 0) = v73;
  *(void *)(a9 + 5sub_100019F7C(v0 + 6) = 0LL;
  *(void *)(a9 + 6sub_100019F7C(v0 + 4) = 0LL;
  *(void *)(a9 + 48) = 0LL;
  *(_BYTE *)(a9 + 7sub_100019F7C(v0 + 2) = BYTE4(v70);
  *(void *)(a9 + 8sub_10006F0B8(12LL, 0) = v69;
  *(void *)(a9 + sub_100081CEC(v0 + 88) = v67;
  *(void *)(a9 + 9sub_100019F7C(v0 + 6) = v63;
  *(void *)(a9 + 10sub_100019F7C(v0 + 4) = v61;
  *(void *)(a9 + 11sub_100019F7C(v0 + 2) = v38;
  *(void *)(a9 + 12sub_10006F0B8(12LL, 0) = v50;
  *(void *)(a9 + 128) = v52;
  *(void *)(a9 + 13sub_100019F7C(v0 + 6) = v65;
  *(_BYTE *)(a9 + 14sub_100019F7C(v0 + 4) = v57 == 0;
  *(void *)(a9 + 15sub_100019F7C(v0 + 2) = v80;
  *(void *)(a9 + 16sub_10006F0B8(12LL, 0) = v79;
  *(void *)(a9 + 168) = v54;
  *(void *)(a9 + 17sub_100019F7C(v0 + 6) = v59;
  *(void *)(a9 + 18sub_100019F7C(v0 + 4) = 0LL;
  *(void *)(a9 + 19sub_100019F7C(v0 + 2) = 0LL;
  *(void *)(a9 + 20sub_10006F0B8(12LL, 0) = v55;
  *(void *)(a9 + 208) = v55;
  return result;
}

void sub_1000C360C()
{
}

void sub_1000C3624()
{
}

void sub_1000C3640(uint64_t a1)
{
  v2._rawValue = &off_100272438;
  sub_100052314(v2, a1);
  sub_100019344();
  sub_10001945C();
}

uint64_t sub_1000C367C()
{
  uint64_t v0 = sub_1000C7938();
  return ((uint64_t (*)(uint64_t))((char *)sub_1000C36A0 + 4 * byte_1001FD0FD[v1]))(v0);
}

void sub_1000C36AC()
{
}

uint64_t sub_1000C3700()
{
  return 0x6B726F77747261LL;
}

uint64_t sub_1000C3718()
{
  uint64_t v0 = sub_1000C7938();
  return ((uint64_t (*)(uint64_t))((char *)sub_1000C373C + 4 * byte_1001FD109[v1]))(v0);
}

void sub_1000C3748()
{
}

uint64_t sub_1000C379C()
{
  return 0x6B726F77747261LL;
}

void sub_1000C37B4()
{
  uint64_t v3 = sub_1000175B0(&qword_1002AFDF0);
  sub_100022760();
  __chkstk_darwin(v4);
  sub_1000BBB14();
  sub_100022724();
  unint64_t v5 = sub_1000C6408();
  sub_1000226FC((uint64_t)&unk_100280710, v6, v5);
  uint64_t v7 = *(void *)v0;
  uint64_t v8 = *(void *)(v0 + 8);
  LOBYTE(v26[0]) = 0;
  sub_1000C75E4(v7, v8);
  if (!v1)
  {
    uint64_t v9 = *(void *)(v0 + 16);
    uint64_t v10 = *(void *)(v0 + 24);
    LOBYTE(v26[0]) = 1;
    sub_1000C75E4(v9, v10);
    v26[0] = *(_OWORD *)(v0 + 32);
    char v27 = 2;
    unint64_t v11 = sub_1000C66F4();
    sub_10001DB44((uint64_t)v26, (uint64_t)&v27, v3, (uint64_t)&unk_100280A48, v11);
    sub_100054254(v0 + 48, (uint64_t)v29);
    sub_100054254((uint64_t)v29, (uint64_t)v26);
    char v27 = 3;
    unint64_t v12 = sub_1000C6730();
    sub_1000C7768(v12, v13, v14, (uint64_t)&unk_1002809C8, v12);
    uint64_t v15 = *(unsigned __int8 *)(v0 + 72);
    LOBYTE(v26[0]) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v26, v3);
    sub_1000C7570(*(void *)(v0 + 80), *(void *)(v0 + 88), 5);
    sub_1000C7570(*(void *)(v0 + 152), *(void *)(v0 + 160), 6);
    sub_1000C7570(*(void *)(v0 + 96), *(void *)(v0 + 104), 7);
    uint64_t v16 = *(void *)(v0 + 136);
    uint64_t v17 = *(unsigned __int8 *)(v0 + 144);
    LOBYTE(v26[0]) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, v26, v3);
    *(void *)&v26[0] = *(void *)(v0 + 112);
    char v27 = 9;
    uint64_t v18 = sub_10007F094();
    uint64_t v20 = sub_1000C7830( &qword_1002AFE10,  v19,  (uint64_t (*)(void))sub_1000C676C,  (const char *)&protocol conformance descriptor for <A> [A]);
    sub_10001DB44((uint64_t)v26, (uint64_t)&v27, v3, v18, v20);
    uint64_t v21 = *(void *)(v0 + 120);
    uint64_t v22 = *(void *)(v0 + 128);
    LOBYTE(v26[0]) = 10;
    sub_1000C75E4(v21, v22);
    sub_100054254(v0 + 168, (uint64_t)v28);
    sub_100054254((uint64_t)v28, (uint64_t)v26);
    char v27 = 11;
    unint64_t v23 = sub_1000C67A8();
    sub_1000C7768(v23, v24, v25, (uint64_t)&unk_100280470, v23);
  }

  sub_1000C795C(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1000226D8();
}

void sub_1000C3A1C()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = sub_1000175B0(&qword_1002AFDB0);
  sub_100022760();
  __chkstk_darwin(v6);
  sub_100092B28();
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  sub_100019F58(v2, v7);
  unint64_t v9 = sub_1000C6408();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_100280710, &unk_100280710, v9, v7, v8);
  if (v0)
  {
    unsigned int v10 = 0;
  }

  else
  {
    uint64_t v64 = v4;
    uint64_t v11 = sub_1000C7848();
    LOBYTE(v9sub_100019F7C(v0 + 2) = 1;
    uint64_t v13 = v12;
    sub_100075D08(v11, v12);
    uint64_t v72 = v13;
    uint64_t v14 = sub_1000C7848();
    uint64_t v16 = v15;
    uint64_t v63 = v14;
    LOBYTE(v73[0]) = 2;
    unint64_t v17 = sub_1000C6444();
    sub_10003574C();
    sub_1000C76DC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v18, v19, v20, v21);
    uint64_t v71 = v16;
    if (v17)
    {
      sub_1000C751C();
      sub_100075BC8();
      sub_10003561C();
      unsigned int v10 = 3;
    }

    else
    {
      LOBYTE(v73[0]) = 3;
      unint64_t v22 = sub_1000C6480();
      sub_10003574C();
      sub_1000C76DC();
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v23, v24, v25, v26, v27);
      uint64_t v70 = v93;
      if (!v22)
      {
        uint64_t v62 = v92;
        sub_10001FFF0();
        uint64_t v28 = sub_1000C7838();
        uint64_t v69 = v93;
        char v59 = KeyedDecodingContainer.decode(_:forKey:)(v28, v29);
        uint64_t v61 = v94;
        uint64_t v30 = sub_1000C76CC();
        uint64_t v58 = v92;
        uint64_t v32 = v31;
        sub_100075D08(v30, v31);
        uint64_t v68 = v32;
        uint64_t v57 = sub_1000C76CC();
        uint64_t v34 = v33;
        sub_100075D08(v57, v33);
        uint64_t v67 = v34;
        uint64_t v56 = sub_1000C76CC();
        LOBYTE(v9sub_100019F7C(v0 + 2) = 8;
        uint64_t v36 = v35;
        sub_100075D08(v56, v35);
        uint64_t v37 = sub_1000C7838();
        uint64_t v55 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v37, v38);
        char v54 = v39;
        char v129 = v39 & 1;
        uint64_t v40 = sub_1000175B0(&qword_1002AFDD0);
        LOBYTE(v73[0]) = 9;
        sub_10007EC24( &qword_1002AFDD8,  &qword_1002AFDD0,  (uint64_t (*)(void))sub_1000C64BC,  (const char *)&protocol conformance descriptor for <A> [A]);
        KeyedDecodingContainer.decode<A>(_:forKey:)(v40, v73, v5, v40);
        uint64_t v41 = v92;
        LOBYTE(v9sub_100019F7C(v0 + 2) = 10;
        uint64_t v66 = v41;
        swift_bridgeObjectRetain();
        uint64_t v42 = sub_1000C7838();
        uint64_t v44 = KeyedDecodingContainer.decode(_:forKey:)(v42, v43);
        uint64_t v65 = v45;
        uint64_t v46 = v44;
        char v121 = 11;
        unint64_t v47 = sub_1000C64F8();
        swift_bridgeObjectRetain();
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&unk_100280470, &v121, v5, &unk_100280470, v47);
        LOBYTE(v4sub_10006F0B8(12LL, 0) = v59 & 1;
        char v48 = v59 & 1;
        sub_1000C751C();
        uint64_t v60 = v123;
        uint64_t v52 = v125;
        uint64_t v53 = v124;
        uint64_t v51 = v126;
        uint64_t v49 = v122;
        uint64_t v50 = v127;
        v73[0] = v11;
        v73[1] = v72;
        v73[2] = v63;
        v73[3] = v71;
        v73[4] = v62;
        v73[5] = v70;
        v73[6] = v58;
        v73[7] = v69;
        v73[8] = v61;
        char v74 = v40;
        uint64_t v75 = v30;
        uint64_t v76 = v68;
        uint64_t v77 = v56;
        uint64_t v78 = v36;
        uint64_t v79 = v66;
        uint64_t v80 = v46;
        uint64_t v81 = v65;
        uint64_t v82 = v55;
        char v83 = v54 & 1;
        uint64_t v84 = v57;
        uint64_t v85 = v67;
        uint64_t v86 = v122;
        uint64_t v87 = v123;
        uint64_t v88 = v124;
        uint64_t v89 = v125;
        uint64_t v90 = v126;
        uint64_t v91 = v127;
        sub_1000C6534(v73);
        sub_10001A420();
        swift_bridgeObjectRelease();
        sub_100023EF4();
        sub_10001DC10();
        sub_10001A420();
        sub_100023EEC();
        sub_10001EDA0();
        sub_10001EDA0();
        sub_10003561C();
        sub_1000C7924();
        uint64_t v92 = v11;
        uint64_t v93 = v72;
        uint64_t v94 = v63;
        uint64_t v95 = v71;
        uint64_t v96 = v62;
        uint64_t v97 = v70;
        uint64_t v98 = v58;
        uint64_t v99 = v69;
        uint64_t v100 = v61;
        char v101 = v48;
        *(_DWORD *)uint64_t v102 = v130[0];
        *(_DWORD *)&v102[3] = *(_DWORD *)((char *)v130 + 3);
        uint64_t v103 = v30;
        uint64_t v104 = v68;
        uint64_t v105 = v56;
        uint64_t v106 = v36;
        uint64_t v107 = v66;
        uint64_t v108 = v46;
        uint64_t v109 = v65;
        uint64_t v110 = v55;
        char v111 = v129;
        *(_DWORD *)__int16 v112 = *(_DWORD *)v128;
        *(_DWORD *)&v112[3] = *(_DWORD *)&v128[3];
        uint64_t v113 = v57;
        uint64_t v114 = v67;
        uint64_t v115 = v49;
        uint64_t v116 = v60;
        uint64_t v117 = v53;
        uint64_t v118 = v52;
        uint64_t v119 = v51;
        uint64_t v120 = v50;
        sub_1000C6614(&v92);
        sub_1000C77A8(v64, v73);
        goto LABEL_14;
      }

      sub_1000C751C();
      sub_100075BC8();
      sub_1000C7588();
      sub_10003561C();
      unsigned int v10 = 7;
    }
  }

  sub_1000C7924();
  if ((v10 & 1) != 0)
  {
    sub_100075BC8();
    if (((v10 >> 1) & 1) == 0)
    {
LABEL_6:
      if (((v10 >> 2) & 1) != 0) {
        goto LABEL_7;
      }
      goto LABEL_12;
    }
  }

  else if ((v10 & 2) == 0)
  {
    goto LABEL_6;
  }

  sub_1000C7588();
  if (((v10 >> 2) & 1) != 0)
  {
LABEL_7:
    sub_1000C75B8();
    if (((v10 >> 3) & 1) == 0) {
      goto LABEL_8;
    }
LABEL_13:
    sub_1000C768C();
    if (((v10 >> 5) & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_9;
  }

void sub_1000C4158(uint64_t a1)
{
  v2._rawValue = &off_100272578;
  sub_100052314(v2, a1);
  sub_100019344();
  sub_10001945C();
}

uint64_t sub_1000C418C()
{
  return 0x737070612D6E69LL;
}

void sub_1000C41A4(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_1000C41B0()
{
}

uint64_t sub_1000C41B8(uint64_t a1)
{
  return sub_1000B1E00(a1, *v1);
}

void sub_1000C41C0(uint64_t a1)
{
}

void sub_1000C41C8(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = v3;
}

uint64_t sub_1000C41F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000C367C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000C421C()
{
  return sub_1000C3718();
}

uint64_t sub_1000C4224@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_1000C3678();
  *a1 = result;
  return result;
}

void sub_1000C4248(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

uint64_t sub_1000C4254(uint64_t a1)
{
  unint64_t v2 = sub_1000C6408();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000C427C(uint64_t a1)
{
  unint64_t v2 = sub_1000C6408();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000C42A4(void *a1@<X8>)
{
  if (!v1) {
    memcpy(a1, __src, 0xD8uLL);
  }
}

void sub_1000C42EC()
{
}

void sub_1000C4348(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  *a2 = v3 != 0;
}

void sub_1000C437C(void *a1@<X8>)
{
  *a1 = 0x737070612D6E69LL;
  a1[1] = 0xE700000000000000LL;
}

uint64_t sub_1000C4398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000C7174();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000C43F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000C7174();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000C4440(uint64_t a1, unint64_t a2)
{
  if (a1 == 25705 && a2 == 0xE200000000000000LL)
  {
    unint64_t v5 = 0xE200000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705LL, 0xE200000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 1701869940 && a2 == 0xE400000000000000LL)
  {
    unint64_t v8 = 0xE400000000000000LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 1717924456 && a2 == 0xE400000000000000LL)
  {
    unint64_t v10 = 0xE400000000000000LL;
    goto LABEL_24;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1717924456LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2LL;
  }

  if (a1 == 0x7475626972747461LL && a2 == 0xEA00000000007365LL)
  {
    swift_bridgeObjectRelease(0xEA00000000007365LL);
    return 3LL;
  }

  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7475626972747461LL, 0xEA00000000007365LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

void EventLoopError.hashValue.getter(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  sub_100060600(a1);
  Hasher._combine(_:)(v1);
  sub_100035698();
  sub_1000354B8();
}

uint64_t sub_1000C45F8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000C4620 + 4 * byte_1001FD115[a1]))( 25705LL,  0xE200000000000000LL);
}

uint64_t sub_1000C4620()
{
  return 1701869940LL;
}

uint64_t sub_1000C4630()
{
  return 1717924456LL;
}

uint64_t sub_1000C4640()
{
  return 0x7475626972747461LL;
}

void sub_1000C465C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  a22 = v25;
  a23 = v26;
  uint64_t v27 = sub_1000175B0(&qword_1002AFD80);
  sub_100022760();
  __chkstk_darwin(v28);
  sub_100022724();
  unint64_t v29 = sub_1000C6048();
  sub_1000226FC((uint64_t)&type metadata for MediaFetchResponse.Datum.CodingKeys, v30, v29);
  uint64_t v31 = *v23;
  uint64_t v32 = v23[1];
  v37[0] = 0;
  sub_100023EB4(v31, v32, (uint64_t)v37);
  if (!v24)
  {
    v37[0] = 1;
    unint64_t v33 = sub_1000C6354();
    sub_100052298(v33, (uint64_t)v37, v27, (uint64_t)&unk_100280950, v33);
    uint64_t v34 = v23[2];
    uint64_t v35 = v23[3];
    v37[0] = 2;
    sub_100023EB4(v34, v35, (uint64_t)v37);
    sub_1000C77A8(v37, v23 + 4);
    a13 = 3;
    unint64_t v36 = sub_1000C6390();
    sub_100052298((uint64_t)v37, (uint64_t)&a13, v27, (uint64_t)&unk_1002804F8, v36);
  }

  sub_1000227A0();
  sub_10001DAB8();
}

void sub_1000C4788( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  a22 = v24;
  a23 = v25;
  uint64_t v27 = v26;
  unint64_t v29 = v28;
  uint64_t v45 = sub_1000175B0(&qword_1002AFD60);
  __chkstk_darwin(v45);
  uint64_t v30 = v27[3];
  uint64_t v31 = v27[4];
  sub_100019F58(v27, v30);
  unint64_t v32 = sub_1000C6048();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for MediaFetchResponse.Datum.CodingKeys,  &type metadata for MediaFetchResponse.Datum.CodingKeys,  v32,  v30,  v31);
  if (v23)
  {
    sub_100019F7C(v27);
  }

  else
  {
    uint64_t v43 = v29;
    uint64_t v44 = v27;
    LOBYTE(v47[0]) = 0;
    uint64_t v33 = sub_1000C7894((uint64_t)v47);
    uint64_t v35 = v34;
    LOBYTE(v47[0]) = 1;
    unint64_t v36 = sub_1000C6084();
    swift_bridgeObjectRetain();
    sub_1000C76FC((uint64_t)&unk_100280950, (uint64_t)v47);
    if (v36)
    {
      sub_1000C7590();
      sub_10001DC10();
      int v38 = 0;
    }

    else
    {
      LOBYTE(v47[0]) = 2;
      uint64_t v37 = sub_1000C7894((uint64_t)v47);
      uint64_t v40 = v39;
      uint64_t v42 = v37;
      a13 = 3;
      unint64_t v41 = sub_1000C60C0();
      sub_10001FFF0();
      sub_1000C76FC((uint64_t)&unk_1002804F8, (uint64_t)&a13);
      if (!v41)
      {
        sub_1000C7590();
        sub_1000C77A8(&v46[4], v49);
        sub_1000C77A8(v50, v49);
        v46[0] = v33;
        v46[1] = v35;
        v46[2] = v42;
        v46[3] = v40;
        sub_1000C60FC(v46);
        sub_10001DC10();
        sub_100023EEC();
        sub_100019F7C(v44);
        v47[0] = v33;
        v47[1] = v35;
        v47[2] = v42;
        v47[3] = v40;
        sub_1000C77A8(&v48, v50);
        sub_1000C6228(v47);
        memcpy(v43, v46, 0xF8uLL);
        goto LABEL_4;
      }

      sub_1000C7590();
      sub_10001DC10();
      sub_100023EEC();
      int v38 = 1;
    }

    sub_100019F7C(v44);
    sub_10001DC10();
    if (v38) {
      sub_100023EEC();
    }
  }

void sub_1000C49A8()
{
}

uint64_t sub_1000C49C0()
{
  return sub_1000C45F8(*v0);
}

uint64_t sub_1000C49C8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000C4440(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000C49EC(uint64_t a1)
{
  unint64_t v2 = sub_1000C6048();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000C4A14(uint64_t a1)
{
  unint64_t v2 = sub_1000C6048();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000C4A3C( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  if (!v9) {
    memcpy(a9, __src, 0xF8uLL);
  }
}

#error "1000C4A94: call analysis failed (funcsize=5)"
uint64_t sub_1000C4AA0(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  if (a1 == 1635017060 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    unint64_t v5 = 0;
  }

  else
  {
    uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)(1635017060LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    unint64_t v5 = v4 ^ 1;
  }

  return v5 & 1;
}

void sub_1000C4B14(uint64_t a1)
{
}

uint64_t sub_1000C4B38()
{
  return 1635017060LL;
}

void sub_1000C4B48()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000175B0(&qword_1002AFD38);
  sub_100022760();
  __chkstk_darwin(v3);
  sub_100022724();
  unint64_t v4 = sub_1000C5FD0();
  sub_1000226FC((uint64_t)&type metadata for MediaFetchResponse.CodingKeys, v5, v4);
  uint64_t v10 = v1;
  uint64_t v6 = sub_10007F094();
  uint64_t v8 = sub_1000C7830( &qword_1002AFD50,  v7,  (uint64_t (*)(void))sub_1000C600C,  (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v10, v9, v2, v6, v8);
  sub_1000258E8();
  sub_1000226D8();
}

uint64_t sub_1000C4C20()
{
  uint64_t v2 = sub_1000175B0(&qword_1002AFE50);
  sub_100022760();
  __chkstk_darwin(v3);
  sub_1000C76B0();
  unint64_t v4 = sub_1000C5FD0();
  sub_1000C772C((uint64_t)&type metadata for MediaFetchResponse.CodingKeys, v5, v4);
  if (v1)
  {
    sub_10001DC08();
  }

  else
  {
    uint64_t v6 = sub_10007F094();
    sub_1000C7830( &qword_1002AFE58,  v7,  (uint64_t (*)(void))sub_1000C6940,  (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v6, v8, v2, v6);
    sub_1000258E8();
    uint64_t v0 = v10;
    sub_10001DC08();
  }

  return v0;
}

void sub_1000C4D24()
{
}

uint64_t sub_1000C4D50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000C4AA0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1000C4D78(uint64_t a1)
{
  unint64_t v2 = sub_1000C5FD0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000C4DA0(uint64_t a1)
{
  unint64_t v2 = sub_1000C5FD0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C4DC8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000C4C20();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

void sub_1000C4DF0()
{
}

uint64_t sub_1000C4E08(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(sub_100034E8C(v0, v1) = -1;
  }
  return (v1 + 1);
}

void sub_1000C4E20(void *a1)
{
}

uint64_t sub_1000C4E28(void *a1)
{
  uint64_t result = a1[26];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a1[28]);
  }

  return result;
}

uint64_t sub_1000C4EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v20 = *(void *)(a2 + 24);
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = *(void *)(a2 + 16);
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = v20;
  uint64_t v19 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10006F0B8(12LL, 0) = v19;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 5sub_100019F7C(v0 + 6) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 6sub_100019F7C(v0 + 4) = *(void *)(a2 + 64);
  *(void *)(a1 + 7sub_100019F7C(v0 + 2) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 8sub_10006F0B8(12LL, 0) = *(void *)(a2 + 80);
  *(void *)(a1 + sub_100081CEC(v0 + 88) = v7;
  *(void *)(a1 + 9sub_100019F7C(v0 + 6) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 10sub_100019F7C(v0 + 4) = *(_BYTE *)(a2 + 104);
  uint64_t v8 = *(void *)(a2 + 120);
  *(void *)(a1 + 11sub_100019F7C(v0 + 2) = *(void *)(a2 + 112);
  *(void *)(a1 + 12sub_10006F0B8(12LL, 0) = v8;
  uint64_t v9 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 13sub_100019F7C(v0 + 6) = v9;
  uint64_t v11 = *(void *)(a2 + 144);
  uint64_t v10 = *(void *)(a2 + 152);
  *(void *)(a1 + 14sub_100019F7C(v0 + 4) = v11;
  *(void *)(a1 + 15sub_100019F7C(v0 + 2) = v10;
  *(_BYTE *)(a1 + 17sub_100019F7C(v0 + 6) = *(_BYTE *)(a2 + 176);
  uint64_t v13 = *(void *)(a2 + 160);
  uint64_t v12 = *(void *)(a2 + 168);
  *(void *)(a1 + 16sub_10006F0B8(12LL, 0) = v13;
  *(void *)(a1 + 168) = v12;
  uint64_t v14 = *(void *)(a2 + 192);
  *(void *)(a1 + 18sub_100019F7C(v0 + 4) = *(void *)(a2 + 184);
  *(void *)(a1 + 19sub_100019F7C(v0 + 2) = v14;
  uint64_t v18 = *(void *)(a2 + 208);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  if (v18)
  {
    *(void *)(a1 + 20sub_10006F0B8(12LL, 0) = *(void *)(a2 + 200);
    *(void *)(a1 + 208) = v18;
    uint64_t v15 = *(void *)(a2 + 224);
    *(void *)(a1 + 21sub_100019F7C(v0 + 6) = *(void *)(a2 + 216);
    *(void *)(a1 + 22sub_100019F7C(v0 + 4) = v15;
    *(_OWORD *)(a1 + 23sub_100019F7C(v0 + 2) = *(_OWORD *)(a2 + 232);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v15);
  }

  else
  {
    __int128 v16 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 20sub_10006F0B8(12LL, 0) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 21sub_100019F7C(v0 + 6) = v16;
    *(_OWORD *)(a1 + 23sub_100019F7C(v0 + 2) = *(_OWORD *)(a2 + 232);
  }

  return a1;
}

uint64_t sub_1000C5020(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = *(void *)(a2 + 16);
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10006F0B8(12LL, 0) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 5sub_100019F7C(v0 + 6) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 6sub_100019F7C(v0 + 4) = *(void *)(a2 + 64);
  *(void *)(a1 + 7sub_100019F7C(v0 + 2) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8sub_10006F0B8(12LL, 0) = *(void *)(a2 + 80);
  *(void *)(a1 + sub_100081CEC(v0 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 9sub_100019F7C(v0 + 6) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 10sub_100019F7C(v0 + 4) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 11sub_100019F7C(v0 + 2) = *(void *)(a2 + 112);
  *(void *)(a1 + 12sub_10006F0B8(12LL, 0) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 13sub_100019F7C(v0 + 6) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 14sub_100019F7C(v0 + 4) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 15sub_100019F7C(v0 + 2) = *(void *)(a2 + 152);
  *(void *)(a1 + 16sub_10006F0B8(12LL, 0) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 168);
  *(_BYTE *)(a1 + 17sub_100019F7C(v0 + 6) = *(_BYTE *)(a2 + 176);
  *(void *)(a1 + 168) = v4;
  *(void *)(a1 + 18sub_100019F7C(v0 + 4) = *(void *)(a2 + 184);
  *(void *)(a1 + 19sub_100019F7C(v0 + 2) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (_OWORD *)(a1 + 200);
  uint64_t v6 = (_OWORD *)(a2 + 200);
  uint64_t v7 = *(void *)(a2 + 208);
  if (*(void *)(a1 + 208))
  {
    if (v7)
    {
      *(void *)(a1 + 20sub_10006F0B8(12LL, 0) = *(void *)(a2 + 200);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 21sub_100019F7C(v0 + 6) = *(void *)(a2 + 216);
      *(void *)(a1 + 22sub_100019F7C(v0 + 4) = *(void *)(a2 + 224);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 23sub_100019F7C(v0 + 2) = *(void *)(a2 + 232);
      *(void *)(a1 + 24sub_10006F0B8(12LL, 0) = *(void *)(a2 + 240);
    }

    else
    {
      sub_1000C52A4(a1 + 200);
      __int128 v9 = *(_OWORD *)(a2 + 216);
      __int128 v8 = *(_OWORD *)(a2 + 232);
      *uint64_t v5 = *v6;
      *(_OWORD *)(a1 + 21sub_100019F7C(v0 + 6) = v9;
      *(_OWORD *)(a1 + 23sub_100019F7C(v0 + 2) = v8;
    }
  }

  else if (v7)
  {
    *(void *)(a1 + 20sub_10006F0B8(12LL, 0) = *(void *)(a2 + 200);
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(void *)(a1 + 21sub_100019F7C(v0 + 6) = *(void *)(a2 + 216);
    *(void *)(a1 + 22sub_100019F7C(v0 + 4) = *(void *)(a2 + 224);
    *(void *)(a1 + 23sub_100019F7C(v0 + 2) = *(void *)(a2 + 232);
    *(void *)(a1 + 24sub_10006F0B8(12LL, 0) = *(void *)(a2 + 240);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v10 = *v6;
    __int128 v11 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 21sub_100019F7C(v0 + 6) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 23sub_100019F7C(v0 + 2) = v11;
    *uint64_t v5 = v10;
  }

  return a1;
}

uint64_t sub_1000C52A4(uint64_t a1)
{
  return a1;
}

void *sub_1000C52D0(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xF8uLL);
}

uint64_t sub_1000C52D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = *(void *)(a2 + 16);
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10006F0B8(12LL, 0) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 5sub_100019F7C(v0 + 6) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 6sub_100019F7C(v0 + 4) = *(void *)(a2 + 64);
  *(void *)(a1 + 7sub_100019F7C(v0 + 2) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 8sub_10006F0B8(12LL, 0) = *(void *)(a2 + 80);
  *(void *)(a1 + sub_100081CEC(v0 + 88) = v9;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 9sub_100019F7C(v0 + 6) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 10sub_100019F7C(v0 + 4) = *(_BYTE *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 11sub_100019F7C(v0 + 2) = *(void *)(a2 + 112);
  *(void *)(a1 + 12sub_10006F0B8(12LL, 0) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 13sub_100019F7C(v0 + 6) = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 14sub_100019F7C(v0 + 4) = *(void *)(a2 + 144);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 160);
  *(void *)(a1 + 15sub_100019F7C(v0 + 2) = *(void *)(a2 + 152);
  *(void *)(a1 + 16sub_10006F0B8(12LL, 0) = v12;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(_BYTE *)(a1 + 17sub_100019F7C(v0 + 6) = *(_BYTE *)(a2 + 176);
  uint64_t v13 = *(void *)(a2 + 192);
  *(void *)(a1 + 18sub_100019F7C(v0 + 4) = *(void *)(a2 + 184);
  *(void *)(a1 + 19sub_100019F7C(v0 + 2) = v13;
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 208)) {
    goto LABEL_5;
  }
  uint64_t v14 = *(void *)(a2 + 208);
  if (!v14)
  {
    sub_1000C52A4(a1 + 200);
LABEL_5:
    __int128 v16 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 20sub_10006F0B8(12LL, 0) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 21sub_100019F7C(v0 + 6) = v16;
    *(_OWORD *)(a1 + 23sub_100019F7C(v0 + 2) = *(_OWORD *)(a2 + 232);
    return a1;
  }

  *(void *)(a1 + 20sub_10006F0B8(12LL, 0) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a2 + 224);
  *(void *)(a1 + 21sub_100019F7C(v0 + 6) = *(void *)(a2 + 216);
  *(void *)(a1 + 22sub_100019F7C(v0 + 4) = v15;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 23sub_100019F7C(v0 + 2) = *(_OWORD *)(a2 + 232);
  return a1;
}

uint64_t sub_1000C542C(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 248))
    {
      LODWORD(sub_10001762C(v1, 1LL, 1LL, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(sub_10001762C(v1, 1LL, 1LL, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(sub_10001762C(v1, 1LL, 1LL, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_1000C546C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 23sub_100019F7C(v0 + 2) = 0u;
    *(_OWORD *)(result + 21sub_100019F7C(v0 + 6) = 0u;
    *(_OWORD *)(result + 20sub_10006F0B8(12LL, 0) = 0u;
    *(_OWORD *)(result + 18sub_100019F7C(v0 + 4) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 15sub_100019F7C(v0 + 2) = 0u;
    *(_OWORD *)(result + 13sub_100019F7C(v0 + 6) = 0u;
    *(_OWORD *)(result + 12sub_10006F0B8(12LL, 0) = 0u;
    *(_OWORD *)(result + 10sub_100019F7C(v0 + 4) = 0u;
    *(_OWORD *)(result + sub_100081CEC(v0 + 88) = 0u;
    *(_OWORD *)(result + 7sub_100019F7C(v0 + 2) = 0u;
    *(_OWORD *)(result + 5sub_100019F7C(v0 + 6) = 0u;
    *(_OWORD *)(result + 4sub_10006F0B8(12LL, 0) = 0u;
    *(_OWORD *)(result + 2sub_100019F7C(v0 + 4) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 248) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 248) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for MediaFetchResponse.Datum()
{
}

uint64_t sub_1000C54F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = *(void *)(a2 + 16);
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = v4;
  *(_OWORD *)(a1 + 3sub_100019F7C(v0 + 2) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *sub_1000C5538(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1;
}

uint64_t sub_1000C55B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = *(void *)(a2 + 16);
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = v6;
  swift_bridgeObjectRelease(v7);
  *(_OWORD *)(a1 + 3sub_100019F7C(v0 + 2) = *(_OWORD *)(a2 + 32);
  return a1;
}

void type metadata accessor for MediaFetchResponse.Datum.ProductAttributes.Image()
{
}

uint64_t sub_1000C560C(void *a1)
{
  uint64_t result = a1[22];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a1[24]);
  }

  return result;
}

uint64_t sub_1000C568C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = *(void *)(a2 + 16);
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10006F0B8(12LL, 0) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 5sub_100019F7C(v0 + 6) = v7;
  *(void *)(a1 + 6sub_100019F7C(v0 + 4) = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 7sub_100019F7C(v0 + 2) = *(_BYTE *)(a2 + 72);
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 8sub_10006F0B8(12LL, 0) = *(void *)(a2 + 80);
  *(void *)(a1 + sub_100081CEC(v0 + 88) = v8;
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 9sub_100019F7C(v0 + 6) = *(void *)(a2 + 96);
  *(void *)(a1 + 10sub_100019F7C(v0 + 4) = v9;
  uint64_t v11 = *(void *)(a2 + 112);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 11sub_100019F7C(v0 + 2) = v11;
  *(void *)(a1 + 12sub_10006F0B8(12LL, 0) = v10;
  uint64_t v13 = *(void *)(a2 + 128);
  uint64_t v12 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = v13;
  *(void *)(a1 + 13sub_100019F7C(v0 + 6) = v12;
  *(_BYTE *)(a1 + 14sub_100019F7C(v0 + 4) = *(_BYTE *)(a2 + 144);
  uint64_t v14 = *(void *)(a2 + 160);
  *(void *)(a1 + 15sub_100019F7C(v0 + 2) = *(void *)(a2 + 152);
  *(void *)(a1 + 16sub_10006F0B8(12LL, 0) = v14;
  uint64_t v18 = *(void *)(a2 + 176);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  if (v18)
  {
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 17sub_100019F7C(v0 + 6) = v18;
    uint64_t v15 = *(void *)(a2 + 192);
    *(void *)(a1 + 18sub_100019F7C(v0 + 4) = *(void *)(a2 + 184);
    *(void *)(a1 + 19sub_100019F7C(v0 + 2) = v15;
    *(_OWORD *)(a1 + 20sub_10006F0B8(12LL, 0) = *(_OWORD *)(a2 + 200);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v15);
  }

  else
  {
    __int128 v16 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 18sub_100019F7C(v0 + 4) = v16;
    *(_OWORD *)(a1 + 20sub_10006F0B8(12LL, 0) = *(_OWORD *)(a2 + 200);
  }

  return a1;
}

uint64_t sub_1000C57CC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = *(void *)(a2 + 16);
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10006F0B8(12LL, 0) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 5sub_100019F7C(v0 + 6) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 6sub_100019F7C(v0 + 4) = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 7sub_100019F7C(v0 + 2) = *(_BYTE *)(a2 + 72);
  *(void *)(a1 + 8sub_10006F0B8(12LL, 0) = *(void *)(a2 + 80);
  *(void *)(a1 + sub_100081CEC(v0 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 9sub_100019F7C(v0 + 6) = *(void *)(a2 + 96);
  *(void *)(a1 + 10sub_100019F7C(v0 + 4) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 11sub_100019F7C(v0 + 2) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 12sub_10006F0B8(12LL, 0) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 136);
  *(_BYTE *)(a1 + 14sub_100019F7C(v0 + 4) = *(_BYTE *)(a2 + 144);
  *(void *)(a1 + 13sub_100019F7C(v0 + 6) = v4;
  *(void *)(a1 + 15sub_100019F7C(v0 + 2) = *(void *)(a2 + 152);
  *(void *)(a1 + 16sub_10006F0B8(12LL, 0) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (_OWORD *)(a1 + 168);
  uint64_t v6 = (_OWORD *)(a2 + 168);
  uint64_t v7 = *(void *)(a2 + 176);
  if (*(void *)(a1 + 176))
  {
    if (v7)
    {
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 17sub_100019F7C(v0 + 6) = *(void *)(a2 + 176);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 18sub_100019F7C(v0 + 4) = *(void *)(a2 + 184);
      *(void *)(a1 + 19sub_100019F7C(v0 + 2) = *(void *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 20sub_10006F0B8(12LL, 0) = *(void *)(a2 + 200);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
    }

    else
    {
      sub_1000C52A4(a1 + 168);
      __int128 v9 = *(_OWORD *)(a2 + 184);
      __int128 v8 = *(_OWORD *)(a2 + 200);
      *uint64_t v5 = *v6;
      *(_OWORD *)(a1 + 18sub_100019F7C(v0 + 4) = v9;
      *(_OWORD *)(a1 + 20sub_10006F0B8(12LL, 0) = v8;
    }
  }

  else if (v7)
  {
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 17sub_100019F7C(v0 + 6) = *(void *)(a2 + 176);
    *(void *)(a1 + 18sub_100019F7C(v0 + 4) = *(void *)(a2 + 184);
    *(void *)(a1 + 19sub_100019F7C(v0 + 2) = *(void *)(a2 + 192);
    *(void *)(a1 + 20sub_10006F0B8(12LL, 0) = *(void *)(a2 + 200);
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v10 = *v6;
    __int128 v11 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 18sub_100019F7C(v0 + 4) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 20sub_10006F0B8(12LL, 0) = v11;
    *uint64_t v5 = v10;
  }

  return a1;
}

void *sub_1000C5A10(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xD8uLL);
}

uint64_t sub_1000C5A18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = *(void *)(a2 + 16);
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10006F0B8(12LL, 0) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 5sub_100019F7C(v0 + 6) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 6sub_100019F7C(v0 + 4) = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 7sub_100019F7C(v0 + 2) = *(_BYTE *)(a2 + 72);
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 8sub_10006F0B8(12LL, 0) = *(void *)(a2 + 80);
  *(void *)(a1 + sub_100081CEC(v0 + 88) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 9sub_100019F7C(v0 + 6) = *(void *)(a2 + 96);
  *(void *)(a1 + 10sub_100019F7C(v0 + 4) = v9;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 11sub_100019F7C(v0 + 2) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 128);
  *(void *)(a1 + 12sub_10006F0B8(12LL, 0) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 13sub_100019F7C(v0 + 6) = *(void *)(a2 + 136);
  *(_BYTE *)(a1 + 14sub_100019F7C(v0 + 4) = *(_BYTE *)(a2 + 144);
  uint64_t v11 = *(void *)(a2 + 160);
  *(void *)(a1 + 15sub_100019F7C(v0 + 2) = *(void *)(a2 + 152);
  *(void *)(a1 + 16sub_10006F0B8(12LL, 0) = v11;
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 176)) {
    goto LABEL_5;
  }
  uint64_t v12 = *(void *)(a2 + 176);
  if (!v12)
  {
    sub_1000C52A4(a1 + 168);
LABEL_5:
    __int128 v14 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 18sub_100019F7C(v0 + 4) = v14;
    *(_OWORD *)(a1 + 20sub_10006F0B8(12LL, 0) = *(_OWORD *)(a2 + 200);
    return a1;
  }

  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 17sub_100019F7C(v0 + 6) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 192);
  *(void *)(a1 + 18sub_100019F7C(v0 + 4) = *(void *)(a2 + 184);
  *(void *)(a1 + 19sub_100019F7C(v0 + 2) = v13;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 20sub_10006F0B8(12LL, 0) = *(_OWORD *)(a2 + 200);
  return a1;
}

uint64_t sub_1000C5B4C(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 216))
    {
      LODWORD(sub_10001762C(v1, 1LL, 1LL, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(sub_10001762C(v1, 1LL, 1LL, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(sub_10001762C(v1, 1LL, 1LL, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_1000C5B8C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 20sub_10006F0B8(12LL, 0) = 0u;
    *(_OWORD *)(result + 18sub_100019F7C(v0 + 4) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 15sub_100019F7C(v0 + 2) = 0u;
    *(_OWORD *)(result + 13sub_100019F7C(v0 + 6) = 0u;
    *(_OWORD *)(result + 12sub_10006F0B8(12LL, 0) = 0u;
    *(_OWORD *)(result + 10sub_100019F7C(v0 + 4) = 0u;
    *(_OWORD *)(result + sub_100081CEC(v0 + 88) = 0u;
    *(_OWORD *)(result + 7sub_100019F7C(v0 + 2) = 0u;
    *(_OWORD *)(result + 5sub_100019F7C(v0 + 6) = 0u;
    *(_OWORD *)(result + 4sub_10006F0B8(12LL, 0) = 0u;
    *(_OWORD *)(result + 2sub_100019F7C(v0 + 4) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 21sub_100019F7C(v0 + 6) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 21sub_100019F7C(v0 + 6) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for MediaFetchResponse.Datum.ProductAttributes()
{
}

uint64_t sub_1000C5C0C(void *a1)
{
  return swift_bridgeObjectRelease(a1[16]);
}

uint64_t sub_1000C5C64(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = *(void *)(a2 + 16);
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10006F0B8(12LL, 0) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 5sub_100019F7C(v0 + 6) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 6sub_100019F7C(v0 + 4) = *(void *)(a2 + 64);
  *(void *)(a1 + 7sub_100019F7C(v0 + 2) = v7;
  *(_BYTE *)(a1 + sub_100081CEC(v0 + 88) = *(_BYTE *)(a2 + 88);
  *(void *)(a1 + 8sub_10006F0B8(12LL, 0) = *(void *)(a2 + 80);
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 9sub_100019F7C(v0 + 6) = *(void *)(a2 + 96);
  *(void *)(a1 + 10sub_100019F7C(v0 + 4) = v8;
  uint64_t v9 = *(void *)(a2 + 120);
  *(void *)(a1 + 11sub_100019F7C(v0 + 2) = *(void *)(a2 + 112);
  *(void *)(a1 + 12sub_10006F0B8(12LL, 0) = v9;
  uint64_t v10 = *(void *)(a2 + 128);
  *(void *)(a1 + 128) = v10;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_1000C5D28(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 4sub_10006F0B8(12LL, 0) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 5sub_100019F7C(v0 + 6) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 6sub_100019F7C(v0 + 4) = *(void *)(a2 + 64);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 7sub_100019F7C(v0 + 2) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + sub_100081CEC(v0 + 88) = *(_BYTE *)(a2 + 88);
  *(void *)(a1 + 8sub_10006F0B8(12LL, 0) = v14;
  *(void *)(a1 + 9sub_100019F7C(v0 + 6) = *(void *)(a2 + 96);
  uint64_t v15 = *(void *)(a2 + 104);
  uint64_t v16 = *(void *)(a1 + 104);
  *(void *)(a1 + 10sub_100019F7C(v0 + 4) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(void *)(a1 + 11sub_100019F7C(v0 + 2) = *(void *)(a2 + 112);
  uint64_t v17 = *(void *)(a2 + 120);
  uint64_t v18 = *(void *)(a1 + 120);
  *(void *)(a1 + 12sub_10006F0B8(12LL, 0) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  uint64_t v19 = *(void *)(a1 + 128);
  uint64_t v20 = *(void *)(a2 + 128);
  *(void *)(a1 + 128) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v19);
  return a1;
}

void *sub_1000C5E5C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x88uLL);
}

uint64_t sub_1000C5E64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = *(void *)(a2 + 16);
  *(void *)(a1 + 2sub_100019F7C(v0 + 4) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 3sub_100019F7C(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10006F0B8(12LL, 0) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 5sub_100019F7C(v0 + 6) = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 6sub_100019F7C(v0 + 4) = *(void *)(a2 + 64);
  *(void *)(a1 + 7sub_100019F7C(v0 + 2) = v12;
  swift_bridgeObjectRelease(v13);
  *(void *)(a1 + 8sub_10006F0B8(12LL, 0) = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + sub_100081CEC(v0 + 88) = *(_BYTE *)(a2 + 88);
  uint64_t v14 = *(void *)(a2 + 104);
  uint64_t v15 = *(void *)(a1 + 104);
  *(void *)(a1 + 9sub_100019F7C(v0 + 6) = *(void *)(a2 + 96);
  *(void *)(a1 + 10sub_100019F7C(v0 + 4) = v14;
  swift_bridgeObjectRelease(v15);
  *(void *)(a1 + 11sub_100019F7C(v0 + 2) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease(*(void *)(a1 + 120));
  uint64_t v16 = *(void *)(a1 + 128);
  *(_OWORD *)(a1 + 12sub_10006F0B8(12LL, 0) = *(_OWORD *)(a2 + 120);
  swift_bridgeObjectRelease(v16);
  return a1;
}

uint64_t sub_1000C5F18(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 136))
    {
      LODWORD(sub_10001762C(v1, 1LL, 1LL, v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(sub_10001762C(v1, 1LL, 1LL, v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(sub_10001762C(v1, 1LL, 1LL, v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_1000C5F58(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 10sub_100019F7C(v0 + 4) = 0u;
    *(_OWORD *)(result + sub_100081CEC(v0 + 88) = 0u;
    *(_OWORD *)(result + 7sub_100019F7C(v0 + 2) = 0u;
    *(_OWORD *)(result + 5sub_100019F7C(v0 + 6) = 0u;
    *(_OWORD *)(result + 4sub_10006F0B8(12LL, 0) = 0u;
    *(_OWORD *)(result + 2sub_100019F7C(v0 + 4) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 12sub_10006F0B8(12LL, 0) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 13sub_100019F7C(v0 + 6) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 2sub_100019F7C(v0 + 4) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 13sub_100019F7C(v0 + 6) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for MediaFetchResponse.Datum.ProductAttributes.Offer()
{
}

void type metadata accessor for MediaFetchResponse()
{
}

unint64_t sub_1000C5FD0()
{
  unint64_t result = qword_1002AFD40;
  if (!qword_1002AFD40)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FDA4C, &type metadata for MediaFetchResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFD40);
  }

  return result;
}

unint64_t sub_1000C600C()
{
  unint64_t result = qword_1002AFD58;
  if (!qword_1002AFD58)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FD2CC, &unk_1002803E8);
    atomic_store(result, (unint64_t *)&qword_1002AFD58);
  }

  return result;
}

unint64_t sub_1000C6048()
{
  unint64_t result = qword_1002AFD68;
  if (!qword_1002AFD68)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FD9FC, &type metadata for MediaFetchResponse.Datum.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFD68);
  }

  return result;
}

unint64_t sub_1000C6084()
{
  unint64_t result = qword_1002AFD70;
  if (!qword_1002AFD70)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FD9D4, &unk_100280950);
    atomic_store(result, (unint64_t *)&qword_1002AFD70);
  }

  return result;
}

unint64_t sub_1000C60C0()
{
  unint64_t result = qword_1002AFD78;
  if (!qword_1002AFD78)
  {
    unint64_t result = swift_getWitnessTable("-9\b", &unk_1002804F8);
    atomic_store(result, (unint64_t *)&qword_1002AFD78);
  }

  return result;
}

void *sub_1000C60FC(void *a1)
{
  uint64_t v5 = a1[26];
  uint64_t v6 = a1[25];
  uint64_t v3 = a1[28];
  uint64_t v4 = a1[27];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000C61F8(v6, v5, v4, v3);
  return a1;
}

uint64_t sub_1000C61F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a2);
  }

  return result;
}

void *sub_1000C6228(void *a1)
{
  uint64_t v5 = a1[26];
  uint64_t v6 = a1[25];
  uint64_t v3 = a1[28];
  uint64_t v4 = a1[27];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000C6324(v6, v5, v4, v3);
  return a1;
}

uint64_t sub_1000C6324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }

  return result;
}

unint64_t sub_1000C6354()
{
  unint64_t result = qword_1002AFD88;
  if (!qword_1002AFD88)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FD9AC, &unk_100280950);
    atomic_store(result, (unint64_t *)&qword_1002AFD88);
  }

  return result;
}

unint64_t sub_1000C6390()
{
  unint64_t result = qword_1002AFD90;
  if (!qword_1002AFD90)
  {
    unint64_t result = swift_getWitnessTable("e9\b", &unk_1002804F8);
    atomic_store(result, (unint64_t *)&qword_1002AFD90);
  }

  return result;
}

unint64_t sub_1000C63CC()
{
  unint64_t result = qword_1002AFDA0;
  if (!qword_1002AFDA0)
  {
    unint64_t result = swift_getWitnessTable( byte_1001FD95C,  &type metadata for MediaFetchResponse.Datum.ProductAttributes.Image.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFDA0);
  }

  return result;
}

unint64_t sub_1000C6408()
{
  unint64_t result = qword_1002AFDB8;
  if (!qword_1002AFDB8)
  {
    unint64_t result = swift_getWitnessTable("\r3\b", &unk_100280710);
    atomic_store(result, (unint64_t *)&qword_1002AFDB8);
  }

  return result;
}

unint64_t sub_1000C6444()
{
  unint64_t result = qword_1002AFDC0;
  if (!qword_1002AFDC0)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FD8E4, &unk_100280A48);
    atomic_store(result, (unint64_t *)&qword_1002AFDC0);
  }

  return result;
}

unint64_t sub_1000C6480()
{
  unint64_t result = qword_1002AFDC8;
  if (!qword_1002AFDC8)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FD8BC, &unk_1002809C8);
    atomic_store(result, (unint64_t *)&qword_1002AFDC8);
  }

  return result;
}

unint64_t sub_1000C64BC()
{
  unint64_t result = qword_1002AFDE0;
  if (!qword_1002AFDE0)
  {
    unint64_t result = swift_getWitnessTable("}9\b", &unk_1002805A0);
    atomic_store(result, (unint64_t *)&qword_1002AFDE0);
  }

  return result;
}

unint64_t sub_1000C64F8()
{
  unint64_t result = qword_1002AFDE8;
  if (!qword_1002AFDE8)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FD2A4, &unk_100280470);
    atomic_store(result, (unint64_t *)&qword_1002AFDE8);
  }

  return result;
}

void *sub_1000C6534(void *a1)
{
  uint64_t v2 = a1[21];
  uint64_t v5 = a1[23];
  uint64_t v6 = a1[22];
  uint64_t v4 = a1[24];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000C61F8(v2, v6, v5, v4);
  return a1;
}

void *sub_1000C6614(void *a1)
{
  uint64_t v2 = a1[21];
  uint64_t v5 = a1[23];
  uint64_t v6 = a1[22];
  uint64_t v4 = a1[24];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000C6324(v2, v6, v5, v4);
  return a1;
}

unint64_t sub_1000C66F4()
{
  unint64_t result = qword_1002AFDF8;
  if (!qword_1002AFDF8)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FD894, &unk_100280A48);
    atomic_store(result, (unint64_t *)&qword_1002AFDF8);
  }

  return result;
}

unint64_t sub_1000C6730()
{
  unint64_t result = qword_1002AFE08;
  if (!qword_1002AFE08)
  {
    unint64_t result = swift_getWitnessTable("%3\b", &unk_1002809C8);
    atomic_store(result, (unint64_t *)&qword_1002AFE08);
  }

  return result;
}

unint64_t sub_1000C676C()
{
  unint64_t result = qword_1002AFE18;
  if (!qword_1002AFE18)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FD1DC, &unk_1002805A0);
    atomic_store(result, (unint64_t *)&qword_1002AFE18);
  }

  return result;
}

unint64_t sub_1000C67A8()
{
  unint64_t result = qword_1002AFE28;
  if (!qword_1002AFE28)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FD27C, &unk_100280470);
    atomic_store(result, (unint64_t *)&qword_1002AFE28);
  }

  return result;
}

unint64_t sub_1000C67E4()
{
  unint64_t result = qword_1002AFE38;
  if (!qword_1002AFE38)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FD81C, &unk_100280680);
    atomic_store(result, (unint64_t *)&qword_1002AFE38);
  }

  return result;
}

void *sub_1000C6820(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[7];
  uint64_t v6 = a1[9];
  uint64_t v7 = a1[13];
  uint64_t v8 = a1[15];
  swift_bridgeObjectRetain(a1[16]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

void *sub_1000C68B0(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[7];
  uint64_t v5 = a1[9];
  uint64_t v6 = a1[13];
  uint64_t v7 = a1[15];
  uint64_t v8 = a1[16];
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

unint64_t sub_1000C6940()
{
  unint64_t result = qword_1002AFE60;
  if (!qword_1002AFE60)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FD2F4, &unk_1002803E8);
    atomic_store(result, (unint64_t *)&qword_1002AFE60);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for AppTransaction.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF8)
  {
    if (a2 + 8 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 8) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 9;
    return (v5 + 1);
  }

uint64_t sub_1000C6A04(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(vsub_100019F7C(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100019F7C(v0 + 4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_1000C6A50 + 4 * byte_1001FD11E[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1000C6A84 + 4 * byte_1001FD119[v4]))();
}

uint64_t sub_1000C6A84(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 + 1) = v1;
  return result;
}

uint64_t sub_1000C6A8C(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000C6A94LL);
  }
  return result;
}

uint64_t sub_1000C6AA0(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000C6AA8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 8;
  return result;
}

uint64_t sub_1000C6AAC(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 + 1) = v1;
  return result;
}

uint64_t sub_1000C6AB4(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 + 1) = v1;
  return result;
}

void type metadata accessor for MediaFetchResponse.Datum.ProductAttributes.Offer.CodingKeys()
{
}

uint64_t sub_1000C6ACC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    LODWORD(vsub_100019F7C(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100019F7C(v0 + 4) = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF4) {
    return ((uint64_t (*)(void))((char *)&loc_1000C6B18 + 4 * byte_1001FD128[v4]))();
  }
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1000C6B4C + 4 * byte_1001FD123[v4]))();
}

uint64_t sub_1000C6B4C(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 + 1) = v1;
  return result;
}

uint64_t sub_1000C6B54(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000C6B5CLL);
  }
  return result;
}

uint64_t sub_1000C6B68(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000C6B70LL);
  }
  *(_BYTE *)unint64_t result = a2 + 11;
  return result;
}

uint64_t sub_1000C6B74(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 + 1) = v1;
  return result;
}

uint64_t sub_1000C6B7C(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 + 1) = v1;
  return result;
}

void type metadata accessor for MediaFetchResponse.Datum.ProductAttributes.CodingKeys()
{
}

ValueMetadata *type metadata accessor for MediaFetchResponse.Datum.ProductAttributes.Image.CodingKeys()
{
  return &type metadata for MediaFetchResponse.Datum.ProductAttributes.Image.CodingKeys;
}

uint64_t _s25ASOctaneSupportXPCService18MediaFetchResponseV5DatumV17ProductAttributesV5ImageV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(vsub_100019F7C(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100019F7C(v0 + 4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000C6BF4 + 4 * byte_1001FD132[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000C6C28 + 4 * byte_1001FD12D[v4]))();
}

uint64_t sub_1000C6C28(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 + 1) = v1;
  return result;
}

uint64_t sub_1000C6C30(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000C6C38LL);
  }
  return result;
}

uint64_t sub_1000C6C44(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000C6C4CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000C6C50(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 + 1) = v1;
  return result;
}

uint64_t sub_1000C6C58(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MediaFetchResponse.Datum.CodingKeys()
{
  return &type metadata for MediaFetchResponse.Datum.CodingKeys;
}

ValueMetadata *type metadata accessor for MediaFetchResponse.CodingKeys()
{
  return &type metadata for MediaFetchResponse.CodingKeys;
}

void type metadata accessor for MediaFetchResponse.Datum.DatumType()
{
}

void *sub_1000C6C98(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain(v3);
  return a1;
}

void *sub_1000C6CCC(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

void *sub_1000C6D20(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

void type metadata accessor for MediaFetchResponse.Datum.ProductAttributes.HostedContent()
{
}

void type metadata accessor for MediaFetchResponse.Datum.ProductAttributes.Description()
{
}

unint64_t sub_1000C6D78()
{
  unint64_t result = qword_1002AFE68;
  if (!qword_1002AFE68)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FD3EC, &unk_100280950);
    atomic_store(result, (unint64_t *)&qword_1002AFE68);
  }

  return result;
}

unint64_t sub_1000C6DB8()
{
  unint64_t result = qword_1002AFE70;
  if (!qword_1002AFE70)
  {
    unint64_t result = swift_getWitnessTable("E7\b", &type metadata for MediaFetchResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFE70);
  }

  return result;
}

unint64_t sub_1000C6DF8()
{
  unint64_t result = qword_1002AFE78;
  if (!qword_1002AFE78)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FD55C, &type metadata for MediaFetchResponse.Datum.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFE78);
  }

  return result;
}

unint64_t sub_1000C6E38()
{
  unint64_t result = qword_1002AFE80;
  if (!qword_1002AFE80)
  {
    unint64_t result = swift_getWitnessTable( byte_1001FD614,  &type metadata for MediaFetchResponse.Datum.ProductAttributes.Image.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFE80);
  }

  return result;
}

unint64_t sub_1000C6E78()
{
  unint64_t result = qword_1002AFE88;
  if (!qword_1002AFE88)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FD704, &unk_100280710);
    atomic_store(result, (unint64_t *)&qword_1002AFE88);
  }

  return result;
}

unint64_t sub_1000C6EB8()
{
  unint64_t result = qword_1002AFE90;
  if (!qword_1002AFE90)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FD7F4, &unk_100280680);
    atomic_store(result, (unint64_t *)&qword_1002AFE90);
  }

  return result;
}

unint64_t sub_1000C6EF8()
{
  unint64_t result = qword_1002AFE98;
  if (!qword_1002AFE98)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FD72C, &unk_100280680);
    atomic_store(result, (unint64_t *)&qword_1002AFE98);
  }

  return result;
}

unint64_t sub_1000C6F38()
{
  unint64_t result = qword_1002AFEA0;
  if (!qword_1002AFEA0)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FD754, &unk_100280680);
    atomic_store(result, (unint64_t *)&qword_1002AFEA0);
  }

  return result;
}

unint64_t sub_1000C6F78()
{
  unint64_t result = qword_1002AFEA8;
  if (!qword_1002AFEA8)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FD63C, &unk_100280710);
    atomic_store(result, (unint64_t *)&qword_1002AFEA8);
  }

  return result;
}

unint64_t sub_1000C6FB8()
{
  unint64_t result = qword_1002AFEB0;
  if (!qword_1002AFEB0)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FD664, &unk_100280710);
    atomic_store(result, (unint64_t *)&qword_1002AFEB0);
  }

  return result;
}

unint64_t sub_1000C6FF8()
{
  unint64_t result = qword_1002AFEB8;
  if (!qword_1002AFEB8)
  {
    unint64_t result = swift_getWitnessTable( "u6\b",  &type metadata for MediaFetchResponse.Datum.ProductAttributes.Image.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFEB8);
  }

  return result;
}

unint64_t sub_1000C7038()
{
  unint64_t result = qword_1002AFEC0;
  if (!qword_1002AFEC0)
  {
    unint64_t result = swift_getWitnessTable( "]6\b",  &type metadata for MediaFetchResponse.Datum.ProductAttributes.Image.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFEC0);
  }

  return result;
}

unint64_t sub_1000C7078()
{
  unint64_t result = qword_1002AFEC8;
  if (!qword_1002AFEC8)
  {
    unint64_t result = swift_getWitnessTable("-7\b", &type metadata for MediaFetchResponse.Datum.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFEC8);
  }

  return result;
}

unint64_t sub_1000C70B8()
{
  unint64_t result = qword_1002AFED0;
  if (!qword_1002AFED0)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FD4F4, &type metadata for MediaFetchResponse.Datum.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFED0);
  }

  return result;
}

unint64_t sub_1000C70F8()
{
  unint64_t result = qword_1002AFED8;
  if (!qword_1002AFED8)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FD414, &type metadata for MediaFetchResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFED8);
  }

  return result;
}

unint64_t sub_1000C7138()
{
  unint64_t result = qword_1002AFEE0;
  if (!qword_1002AFEE0)
  {
    unint64_t result = swift_getWitnessTable(byte_1001FD43C, &type metadata for MediaFetchResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFEE0);
  }

  return result;
}

unint64_t sub_1000C7174()
{
  unint64_t result = qword_1002AFEE8;
  if (!qword_1002AFEE8)
  {
    unint64_t result = swift_getWitnessTable("-8\b", &unk_100280950);
    atomic_store(result, (unint64_t *)&qword_1002AFEE8);
  }

  return result;
}

unint64_t sub_1000C71B0()
{
  unint64_t result = qword_1002AFEF8;
  if (!qword_1002AFEF8)
  {
    unint64_t result = swift_getWitnessTable( byte_1001FDC5C,  &type metadata for MediaFetchResponse.Datum.ProductAttributes.Description.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFEF8);
  }

  return result;
}

unint64_t sub_1000C71EC()
{
  unint64_t result = qword_1002AFF08;
  if (!qword_1002AFF08)
  {
    unint64_t result = swift_getWitnessTable( "\r0\b",  &type metadata for MediaFetchResponse.Datum.ProductAttributes.HostedContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFF08);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for MediaFetchResponse.Datum.ProductAttributes.HostedContent.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(vsub_100019F7C(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100019F7C(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000C7274 + 4 * byte_1001FD13C[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000C72A8 + 4 * byte_1001FD137[v4]))();
}

uint64_t sub_1000C72A8(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 + 1) = v1;
  return result;
}

uint64_t sub_1000C72B0(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000C72B8LL);
  }
  return result;
}

uint64_t sub_1000C72C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000C72CCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000C72D0(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 + 1) = v1;
  return result;
}

uint64_t sub_1000C72D8(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MediaFetchResponse.Datum.ProductAttributes.HostedContent.CodingKeys()
{
  return &type metadata for MediaFetchResponse.Datum.ProductAttributes.HostedContent.CodingKeys;
}

uint64_t _s25ASOctaneSupportXPCService18MediaFetchResponseV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(vsub_100019F7C(v0 + 4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1000C7334 + 4 * byte_1001FD141[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000C7354 + 4 * byte_1001FD146[v4]))();
  }
}

_BYTE *sub_1000C7334(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1000C7354(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000C735C(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000C7364(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000C736C(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000C7374(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MediaFetchResponse.Datum.ProductAttributes.Description.CodingKeys()
{
  return &type metadata for MediaFetchResponse.Datum.ProductAttributes.Description.CodingKeys;
}

unint64_t sub_1000C7394()
{
  unint64_t result = qword_1002AFF20;
  if (!qword_1002AFF20)
  {
    unint64_t result = swift_getWitnessTable( byte_1001FDB2C,  &type metadata for MediaFetchResponse.Datum.ProductAttributes.Description.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFF20);
  }

  return result;
}

unint64_t sub_1000C73D4()
{
  unint64_t result = qword_1002AFF28;
  if (!qword_1002AFF28)
  {
    unint64_t result = swift_getWitnessTable( byte_1001FDBE4,  &type metadata for MediaFetchResponse.Datum.ProductAttributes.HostedContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFF28);
  }

  return result;
}

unint64_t sub_1000C7414()
{
  unint64_t result = qword_1002AFF30;
  if (!qword_1002AFF30)
  {
    unint64_t result = swift_getWitnessTable( byte_1001FDB54,  &type metadata for MediaFetchResponse.Datum.ProductAttributes.HostedContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFF30);
  }

  return result;
}

unint64_t sub_1000C7454()
{
  unint64_t result = qword_1002AFF38;
  if (!qword_1002AFF38)
  {
    unint64_t result = swift_getWitnessTable( byte_1001FDB7C,  &type metadata for MediaFetchResponse.Datum.ProductAttributes.HostedContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFF38);
  }

  return result;
}

unint64_t sub_1000C7494()
{
  unint64_t result = qword_1002AFF40;
  if (!qword_1002AFF40)
  {
    unint64_t result = swift_getWitnessTable( "]1\b",  &type metadata for MediaFetchResponse.Datum.ProductAttributes.Description.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFF40);
  }

  return result;
}

unint64_t sub_1000C74D4()
{
  unint64_t result = qword_1002AFF48;
  if (!qword_1002AFF48)
  {
    unint64_t result = swift_getWitnessTable( "E1\b",  &type metadata for MediaFetchResponse.Datum.ProductAttributes.Description.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002AFF48);
  }

  return result;
}

uint64_t sub_1000C751C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000C752C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_1000C7538()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_1000C7548(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v3 - 80, v2);
}

uint64_t sub_1000C755C()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v1 - 240, v0);
}

uint64_t sub_1000C7570@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(_BYTE *)(v4 - 19sub_100019F7C(v0 + 2) = a3;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v4 - 192, v3);
}

uint64_t sub_1000C7588()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 200));
}

uint64_t sub_1000C7590()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

  ;
}

uint64_t sub_1000C75B8()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 192));
}

uint64_t sub_1000C75C0()
{
  return 0x726F466563697270LL;
}

uint64_t sub_1000C75E4(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v3 - 192, v2);
}

uint64_t sub_1000C75F8()
{
  return 0x6F43646574736F68LL;
}

uint64_t sub_1000C761C()
{
  return 0x726550664F6D756ELL;
}

uint64_t sub_1000C763C()
{
  return 0x7470697263736564LL;
}

uint64_t sub_1000C765C()
{
  return 0x79636E6572727563LL;
}

uint64_t sub_1000C767C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 120));
}

uint64_t sub_1000C7684()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 128));
}

uint64_t sub_1000C768C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 184));
}

uint64_t sub_1000C7694()
{
  return 0x746E756F63736964LL;
}

void *sub_1000C76B0()
{
  return sub_100019F58(v0, v1);
}

uint64_t sub_1000C76CC()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v0 + 440, v1);
}

  ;
}

uint64_t sub_1000C76FC(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_1000C7714()
{
  return 0x6449726566666FLL;
}

uint64_t sub_1000C772C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

  ;
}

uint64_t sub_1000C7758()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 104));
}

uint64_t sub_1000C7760()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 112));
}

uint64_t sub_1000C7768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v6 - 192, v6 - 137, v5, a4, a5);
}

uint64_t sub_1000C7780()
{
  return 0x6C61636F4C756369LL;
}

uint64_t sub_1000C7794()
{
  return 0x6F43646574736F68LL;
}

void *sub_1000C77A8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xD8uLL);
}

void *sub_1000C77B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31)
{
  return Hasher.init(_seed:)(&a31);
}

unint64_t sub_1000C77BC()
{
  return 0xD00000000000001BLL;
}

unint64_t sub_1000C77D0()
{
  return 0xD000000000000016LL;
}

uint64_t sub_1000C77E4()
{
  return 0x6563697270LL;
}

uint64_t sub_1000C77F8()
{
  return KeyedDecodingContainer.decode(_:forKey:)(v1 - 240, v0);
}

uint64_t sub_1000C780C()
{
  return 0x73726566666FLL;
}

void *sub_1000C7820()
{
  return sub_10001B4DC(v0);
}

uint64_t sub_1000C7830(unint64_t *a1, uint64_t a2, uint64_t (*a3)(void), const char *a4)
{
  return sub_10007EC24(a1, v4, a3, a4);
}

uint64_t sub_1000C7838()
{
  return v0 + 440;
}

uint64_t sub_1000C7848()
{
  return KeyedDecodingContainer.decode(_:forKey:)(v0 + 440, v1);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000C7894(uint64_t a1)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

  ;
}

uint64_t sub_1000C78BC(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v2);
}

uint64_t sub_1000C78CC()
{
  return 1684957547LL;
}

uint64_t sub_1000C78DC()
{
  return 1701667182LL;
}

  ;
}

Swift::Int sub_1000C7900()
{
  return Hasher._finalize()();
}

uint64_t sub_1000C7908(uint64_t a1, uint64_t a2)
{
  return sub_100043978(a1, a2, v3, v2);
}

uint64_t sub_1000C7914(uint64_t a1, uint64_t a2)
{
  return sub_1000390C8(a1, a2, v2);
}

uint64_t sub_1000C791C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 160));
}

uint64_t sub_1000C7924()
{
  return sub_100019F7C(*(void **)(v0 + 216));
}

uint64_t sub_1000C792C( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
  return sub_1000390C8((uint64_t)&a16, (uint64_t)&a33, a3);
}

uint64_t sub_1000C7938()
{
  return 0x6D614E726566666FLL;
}

uint64_t sub_1000C795C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_1000C7968()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 96));
}

uint64_t sub_1000C7970()
{
  return sub_100019F7C(*(void **)(v0 - 72));
}

uint64_t sub_1000C7978()
{
  return 0x4F6B6361626E6977LL;
}

  ;
}

uint64_t sub_1000C79A0()
{
  return 0x66664F636F486461LL;
}

void sub_1000C79B4()
{
}

uint64_t sub_1000C79C0(int a1)
{
  if (!a1) {
    return 1LL;
  }
  unsigned int v1 = (a1 - 1) | ((a1 - 1) >> 1) | (((a1 - 1) | ((a1 - 1) >> 1)) >> 2);
  unsigned int v2 = v1 | (v1 >> 4) | ((v1 | (v1 >> 4)) >> 8);
  int v3 = v2 | HIWORD(v2);
  BOOL v4 = __CFADD__(v3, 1);
  unsigned int v5 = v3 + 1;
  if (v4) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v5;
  }
}

void ByteBuffer.getInteger<A>(at:endianness:as:)( uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, unint64_t a4@<X5>, void *a5@<X6>, uint64_t a6@<X8>)
{
  int64_t v8 = a1 - a3;
  if (__OFSUB__(a1, a3))
  {
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if (v8 < 0) {
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(*(a5 - 1) + 64LL);
  if (v9 < 0) {
    goto LABEL_6;
  }
  if ((HIDWORD(a3) - a3) - v9 < v8)
  {
LABEL_6:
    sub_10001762C(a6, 1LL, 1LL, (uint64_t)a5);
    return;
  }

  if (__OFADD__(v8, v9)) {
    goto LABEL_15;
  }
  if (v8 + v9 < v8)
  {
LABEL_16:
    __break(1u);
    return;
  }

  if (a5 == (void *)&type metadata for UInt8)
  {
    __chkstk_darwin(a1);
    ByteBuffer.withUnsafeReadableBytes<A>(_:)( (uint64_t)sub_1000C8764,  (uint64_t)&v31,  a2,  a3,  a4 & 0xFFFFFFFFFFFFFFLL,  (uint64_t)&type metadata for UInt8,  v23,  v24,  v31,  v32,  (uint64_t)&type metadata for UInt8,  v24,  v25,  v26,  v36,  v37,  v38,  v39,  v40,  v41,  v42,  v43);
    sub_10001762C(a6, 0LL, 1LL, (uint64_t)&type metadata for UInt8);
  }

  else
  {
    __int16 v12 = __chkstk_darwin(HIDWORD(a4));
    uint64_t v29 = v13;
    uint64_t v30 = v14;
    uint64_t v31 = v15;
    uint64_t v32 = v16;
    uint64_t v33 = __PAIR64__(v17, a3);
    LODWORD(v3sub_100019F7C(v0 + 4) = a4;
    WORD2(v3sub_100019F7C(v0 + 4) = v12;
    BYTE6(v3sub_100019F7C(v0 + 4) = v18;
    HIBYTE(v3sub_100019F7C(v0 + 4) = v19;
    uint64_t v20 = type metadata accessor for Optional(0LL, v13);
    ByteBuffer.withUnsafeReadableBytes<A>(_:)( (uint64_t)sub_1000C8720,  (uint64_t)&v27,  a2,  a3,  a4 & 0xFFFFFFFFFFFFFFLL,  v20,  v21,  v22,  v27,  v28,  v29,  v30,  v31,  v32,  a2,  v33,  v34,  v35,  v36,  v37,  v38,  v39);
  }

uint64_t ByteBuffer.setInteger<A>(_:at:endianness:as:)()
{
  uint64_t v26 = v1;
  uint64_t v27 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  char v12 = v11 & 1;
  uint64_t v13 = *(void *)(v5 - 8);
  __chkstk_darwin(v9);
  uint64_t v15 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *v0;
  swift_retain();
  ByteBuffer._toEndianness<A>(value:endianness:)(v10, v12, v17, v18, v19, v6, v4);
  swift_release(v16);
  uint64_t v24 = v0;
  uint64_t v25 = v8;
  sub_1000C8830( (uint64_t)v15,  (uint64_t)sub_1000C87E0,  (uint64_t)&v23,  v6,  (uint64_t)&type metadata for Never,  (uint64_t)&type metadata for Int,  (uint64_t)&protocol witness table for Never,  v20);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v6);
  return v22[1];
}

uint64_t ByteBuffer.writeInteger<A>(_:endianness:as:)()
{
  uint64_t result = ByteBuffer.setInteger<A>(_:at:endianness:as:)();
  int v2 = *(_DWORD *)(v0 + 12);
  BOOL v3 = __CFADD__(v2, (_DWORD)result);
  int v4 = v2 + result;
  if (v3) {
    __break(1u);
  }
  else {
    *(_DWORD *)(v0 + 1sub_100019F7C(v0 + 2) = v4;
  }
  return result;
}

void FixedWidthInteger.previousPowerOf2()()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v47 = v6;
  uint64_t v7 = *(void **)(v6 + 8);
  uint64_t v49 = *(void *)(v7[3] + 16LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v49,  v2,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  uint64_t v9 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v10 = *(void *)(v3 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v45 - v14;
  char v16 = sub_1000C8C38();
  uint64_t v48 = v5;
  if ((v16 & 1) != 0)
  {
    if (sub_1000C8C18() < 64)
    {
      uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
      uint64_t v18 = (uint64_t)v15;
      goto LABEL_12;
    }

    unint64_t v31 = sub_1000C8C10();
    sub_1000C8BB8(v31, (uint64_t)&type metadata for Int, v31);
    uint64_t v32 = *(void *)(v7[2] + 8LL);
    goto LABEL_15;
  }

  char v19 = sub_1000C8C38();
  uint64_t v46 = v0;
  uint64_t v20 = sub_1000C8C18();
  if ((v19 & 1) != 0)
  {
    if (v20 <= 64)
    {
      uint64_t v23 = sub_1000C8B58( v20,  v21,  v22,  (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral,  (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      sub_1000C8C04((uint64_t)&unk_1001FDDA0, 256LL, v24, v23);
      sub_1000C8B6C();
      uint64_t v25 = v46;
      char v26 = dispatch thunk of static Comparable.>= infix(_:_:)(v46, v15, v3, *(void *)(v7[4] + 8LL));
      sub_1000C8B90();
      sub_100085164((uint64_t)v13, v25, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16));
      if ((v26 & 1) == 0)
      {
        uint64_t v28 = sub_1000C8BE8((uint64_t)v13);
        goto LABEL_18;
      }

      uint64_t v27 = sub_1000C8C74();
      uint64_t v28 = sub_1000C8BE8((uint64_t)v13);
      if (v27) {
        goto LABEL_18;
      }
LABEL_16:
      uint64_t v36 = sub_1000C8B58( v28,  v29,  v30,  (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral,  (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      sub_1000C8C04((uint64_t)&unk_1001FDDA0, 256LL, v37, v36);
      sub_1000C8B6C();
LABEL_21:
      sub_10002A580();
      return;
    }

    goto LABEL_14;
  }

  if (v20 >= 64)
  {
LABEL_14:
    unint64_t v34 = sub_1000C8C10();
    sub_1000C8BB8(v34, (uint64_t)&type metadata for Int, v34);
    uint64_t v32 = *(void *)(v7[2] + 8LL);
    uint64_t v1 = v46;
LABEL_15:
    char v35 = dispatch thunk of static Equatable.== infix(_:_:)(v1, v15, v3, v32);
    uint64_t v28 = sub_1000C8B90();
    if ((v35 & 1) == 0) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }

  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  uint64_t v18 = (uint64_t)v15;
  uint64_t v1 = v46;
LABEL_12:
  sub_100085164(v18, v1, v17);
  uint64_t v33 = sub_1000C8C74();
  uint64_t v28 = sub_1000C8B90();
  if (!v33) {
    goto LABEL_16;
  }
LABEL_18:
  uint64_t v38 = sub_1000C8B58( v28,  v29,  v30,  (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral,  (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  sub_1000C8C04((uint64_t)&unk_1001FDD98, 512LL, v39, v38);
  sub_1000C8B6C();
  uint64_t v40 = v47;
  uint64_t v41 = dispatch thunk of static FixedWidthInteger.bitWidth.getter(v3, v47);
  uint64_t v42 = v41 - 1;
  if (__OFSUB__(v41, 1LL))
  {
    __break(1u);
  }

  else
  {
    uint64_t v43 = dispatch thunk of FixedWidthInteger.leadingZeroBitCount.getter(v3, v40);
    if (!__OFSUB__(v42, v43))
    {
      uint64_t v50 = v42 - v43;
      unint64_t v44 = sub_1000C88C8();
      dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)(v15, &v50, &type metadata for Int, v44, v3, v7);
      sub_1000C8BE8((uint64_t)v15);
      goto LABEL_21;
    }
  }

  __break(1u);
}

void FixedWidthInteger.nextPowerOf2()()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v59 = v4;
  uint64_t v6 = *(void *)(v5 + 8);
  uint64_t v56 = *(void *)(v6 + 24);
  uint64_t v57 = v5;
  uint64_t v7 = *(void *)(v56 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v7,  v2,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  __chkstk_darwin(AssociatedTypeWitness);
  sub_10009291C();
  uint64_t v54 = v9;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v12 = *(void *)(v3 - 8);
  __chkstk_darwin(v11);
  sub_10009291C();
  uint64_t v53 = v13;
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v55 = (char *)&v51 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  char v19 = (char *)&v51 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v51 - v20;
  char v22 = sub_1000C8C28();
  uint64_t v58 = v6;
  if ((v22 & 1) == 0)
  {
    uint64_t v52 = v7;
    char v27 = sub_1000C8C28();
    uint64_t v28 = sub_1000C8C58();
    if ((v27 & 1) != 0)
    {
      if (v28 <= 64)
      {
        uint64_t v7 = v52;
        uint64_t v31 = sub_1000C8B80( v28,  v29,  v30,  (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral,  (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        sub_1000C8C68((uint64_t)&unk_1001FDDA0, 256LL, v32, v31);
        sub_1000C8B44();
        char v33 = dispatch thunk of static Comparable.>= infix(_:_:)(v0, v21, v3, *(void *)(*(void *)(v6 + 32) + 8LL));
        sub_1000C8B34();
        sub_100085164((uint64_t)v19, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16));
        if ((v33 & 1) != 0)
        {
          uint64_t v34 = dispatch thunk of BinaryInteger._lowWord.getter(v3, v58);
          uint64_t v24 = sub_100035324((uint64_t)v19);
          if (!v34) {
            goto LABEL_16;
          }
        }

        else
        {
          uint64_t v24 = sub_100035324((uint64_t)v19);
        }

        goto LABEL_18;
      }
    }

    else if (v28 < 64)
    {
      sub_100085164((uint64_t)v21, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16));
      uint64_t v37 = sub_1000C8C48();
      uint64_t v24 = sub_1000C8B34();
      uint64_t v7 = v52;
      if (!v37) {
        goto LABEL_16;
      }
      goto LABEL_18;
    }

    unint64_t v38 = sub_1000C8C10();
    sub_1000C8BD0(v38, (uint64_t)&type metadata for Int, v38);
    char v39 = sub_1000C8BA0();
    uint64_t v24 = sub_1000C8B34();
    uint64_t v7 = v52;
    if ((v39 & 1) == 0) {
      goto LABEL_18;
    }
LABEL_16:
    uint64_t v40 = sub_1000C8B80( v24,  v25,  v26,  (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral,  (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    sub_1000C8C68((uint64_t)&unk_1001FDD98, 512LL, v41, v40);
    sub_1000C8B44();
LABEL_20:
    sub_10002A580();
    return;
  }

  if (sub_1000C8C58() >= 64)
  {
    unint64_t v35 = sub_1000C8C10();
    sub_1000C8BD0(v35, (uint64_t)&type metadata for Int, v35);
    char v36 = sub_1000C8BA0();
    uint64_t v24 = sub_1000C8B34();
    if ((v36 & 1) == 0) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }

  sub_100085164((uint64_t)v21, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16));
  uint64_t v23 = sub_1000C8C48();
  uint64_t v24 = sub_1000C8B34();
  if (!v23) {
    goto LABEL_16;
  }
LABEL_18:
  sub_1000C8B80( v24,  v25,  v26,  (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral,  (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  uint64_t v42 = v7;
  sub_1000C8BF0((uint64_t)&unk_1001FDD98);
  sub_1000C8B44();
  uint64_t v43 = (uint64_t)v21;
  uint64_t v44 = v1;
  uint64_t v45 = v57;
  uint64_t v52 = dispatch thunk of static FixedWidthInteger.bitWidth.getter(v3, v57);
  uint64_t v46 = v54;
  sub_1000C8BF0((uint64_t)&unk_1001FDD98);
  uint64_t v47 = v53;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v46, v3, v42);
  uint64_t v48 = (uint64_t)v55;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)(v44, v47, v3, *(void *)(v56 + 8));
  sub_100035324(v47);
  uint64_t v49 = dispatch thunk of FixedWidthInteger.leadingZeroBitCount.getter(v3, v45);
  sub_100035324(v48);
  if (!__OFSUB__(v52, v49))
  {
    uint64_t v60 = v52 - v49;
    unint64_t v50 = sub_1000C88C8();
    dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)(v43, &v60, &type metadata for Int, v50, v3, v58);
    sub_100035324(v43);
    goto LABEL_20;
  }

  __break(1u);
}

uint64_t ByteBuffer._toEndianness<A>(value:endianness:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((a2 & 1) != 0) {
    return dispatch thunk of FixedWidthInteger.littleEndian.getter(a6, a7);
  }
  else {
    return dispatch thunk of FixedWidthInteger.bigEndian.getter(a6, a7);
  }
}

void ByteBuffer.readInteger<A>(endianness:as:)()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v17 = v5;
  v16[1] = v6 & 1;
  uint64_t v7 = type metadata accessor for Optional(0LL, v3);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v16 - v9;
  uint64_t v11 = *(void *)v0;
  uint64_t v12 = *(unsigned int *)(v0 + 8);
  unint64_t v13 = v12 | ((unint64_t)*(unsigned int *)(v0 + 12) << 32);
  unint64_t v14 = *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int16 *)(v0 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 22) << 48);
  swift_retain();
  ByteBuffer.getInteger<A>(at:endianness:as:)(v12, v11, v13, v14, v4, (uint64_t)v10);
  swift_release();
  uint64_t v18 = v4;
  uint64_t v19 = v2;
  uint64_t v20 = v0;
  sub_1000A8A1C( (void (*)(uint64_t, uint64_t))sub_1000C8904,  (uint64_t)&type metadata for Never,  (uint64_t)v4,  v15,  v17);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  sub_10002A580();
}

uint64_t sub_1000C852C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8)
{
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  int v27 = a5 & 1;
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a8 + 8) + 24LL) + 16LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v9,  a7,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  uint64_t v11 = __chkstk_darwin(AssociatedTypeWitness);
  unint64_t v13 = (char *)&v23 - v12;
  uint64_t v14 = *(void *)(a7 - 8);
  __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v9,  a7,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_1001FDDA0,  256LL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v13, a7, v9);
  uint64_t v29 = v23;
  uint64_t v30 = v24;
  uint64_t v31 = v25;
  uint64_t v32 = v26;
  sub_1000C8830( (uint64_t)v16,  (uint64_t)sub_1000C8AF0,  (uint64_t)v28,  a7,  (uint64_t)&type metadata for Never,  (uint64_t)&type metadata for ()[8],  (uint64_t)&protocol witness table for Never,  v18);
  ByteBuffer._toEndianness<A>(value:endianness:)((uint64_t)v16, v27, v19, v20, v21, a7, a8);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, a7);
  return sub_10001762C(a6, 0LL, 1LL, a7);
}

uint64_t sub_1000C8720@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1000C852C( a1,  a2,  *(void *)(v3 + 32),  *(void *)(v3 + 40),  *(_BYTE *)(v3 + 71),  a3,  *(void *)(v3 + 16),  *(void *)(v3 + 24));
}

void sub_1000C8764(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 16);
  char v4 = *(_BYTE *)(a1 + *(void *)(v2 + 32));
  swift_dynamicCast(a2, &v4, &type metadata for UInt8, v3, 7LL);
  sub_1000AA0BC();
}

void sub_1000C87A8(uint64_t a1@<X0>, uint64_t a2@<X1>, Swift::UInt32 a3@<W3>, void *a4@<X8>)
{
  *a4 = ByteBuffer._setBytes(_:at:)(a1, a2, a3);
  sub_10005EDFC();
}

void sub_1000C87E0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = ByteBuffer._setBytes(_:at:)(a1, a2, *(_DWORD *)(v3 + 24));
  sub_10005EDFC();
}

uint64_t sub_1000C881C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1000C8830(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1000C8830( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = __chkstk_darwin();
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = v16(v12, v12 + *(void *)(*(void *)(v15 - 8) + 64LL), v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

unint64_t sub_1000C88C8()
{
  unint64_t result = qword_1002AFF50;
  if (!qword_1002AFF50)
  {
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1002AFF50);
  }

  return result;
}

void sub_1000C8904(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 32);
  uint64_t v4 = *(void *)(*(void *)(v2 + 16) - 8LL);
  int v5 = *(_DWORD *)(v4 + 64);
  int v6 = *(_DWORD *)(v3 + 8);
  BOOL v7 = __CFADD__(v6, v5);
  int v8 = v6 + v5;
  if (v7)
  {
    __break(1u);
  }

  else
  {
    *(_DWORD *)(v3 + 8) = v8;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(a2, a1);
    sub_1000AA0BC();
  }

void sub_1000C8954()
{
  static Endianness.host = 1;
}

char *Endianness.host.unsafeMutableAddressor()
{
  if (qword_1002A8CD8 != -1) {
    swift_once(&qword_1002A8CD8, sub_1000C8954);
  }
  return &static Endianness.host;
}

uint64_t static Endianness.host.getter()
{
  if (qword_1002A8CD8 != -1) {
    swift_once(&qword_1002A8CD8, sub_1000C8954);
  }
  return static Endianness.host;
}

unint64_t sub_1000C89E8()
{
  unint64_t result = qword_1002AFF58;
  if (!qword_1002AFF58)
  {
    unint64_t result = swift_getWitnessTable(protocol conformance descriptor for Endianness, &type metadata for Endianness);
    atomic_store(result, (unint64_t *)&qword_1002AFF58);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for Endianness(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(vsub_100019F7C(v0 + 4) = 1;
  }
  else {
    LODWORD(vsub_100019F7C(v0 + 4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000C8A70 + 4 * byte_1001FDCF5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000C8AA4 + 4 * byte_1001FDCF0[v4]))();
}

uint64_t sub_1000C8AA4(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 + 1) = v1;
  return result;
}

uint64_t sub_1000C8AAC(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000C8AB4LL);
  }
  return result;
}

uint64_t sub_1000C8AC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000C8AC8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000C8ACC(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 + 1) = v1;
  return result;
}

uint64_t sub_1000C8AD4(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Endianness()
{
  return &type metadata for Endianness;
}

void sub_1000C8AF0(uint64_t a1)
{
  uint64_t v3 = v1[2];
  if (v3) {
    uint64_t v4 = v3 + v1[5];
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (v3) {
    uint64_t v5 = v3 + v1[4];
  }
  else {
    uint64_t v5 = 0LL;
  }
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v5, v4, a1);
  sub_1000AA0BC();
}

uint64_t sub_1000C8B34()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_1000C8B44()
{
  return dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v1, v0, v2);
}

uint64_t sub_1000C8B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return swift_getAssociatedConformanceWitness(*(void *)(v7 - 96), v5, v6, a4, a5);
}

uint64_t sub_1000C8B6C()
{
  return dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v2, v0, v1);
}

uint64_t sub_1000C8B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return swift_getAssociatedConformanceWitness(v7, v5, v6, a4, a5);
}

uint64_t sub_1000C8B90()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_1000C8BA0()
{
  return dispatch thunk of static Equatable.== infix(_:_:)(v1, v3, v0, *(void *)(*(void *)(v2 + 16) + 8LL));
}

uint64_t sub_1000C8BB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v5 - 88, a2, a3, v3, v4);
}

uint64_t sub_1000C8BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v5 - 88, a2, a3, v3, v4);
}

uint64_t sub_1000C8BE8(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_1000C8BF0(uint64_t a1)
{
  return dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(a1, 512LL, v2, v1);
}

uint64_t sub_1000C8C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(a1, a2, v4, a4);
}

unint64_t sub_1000C8C10()
{
  *(void *)(v0 - sub_100081CEC(v0 + 88) = 0LL;
  return sub_1000C88C8();
}

uint64_t sub_1000C8C18()
{
  return dispatch thunk of BinaryInteger.bitWidth.getter(v0, v1);
}

uint64_t sub_1000C8C28()
{
  return dispatch thunk of static BinaryInteger.isSigned.getter(v0, v1);
}

uint64_t sub_1000C8C38()
{
  return dispatch thunk of static BinaryInteger.isSigned.getter(v0, v1);
}

uint64_t sub_1000C8C48()
{
  return dispatch thunk of BinaryInteger._lowWord.getter(v0, v1);
}

uint64_t sub_1000C8C58()
{
  return dispatch thunk of BinaryInteger.bitWidth.getter(v0, v1);
}

uint64_t sub_1000C8C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(a1, a2, v4, a4);
}

uint64_t sub_1000C8C74()
{
  return dispatch thunk of BinaryInteger._lowWord.getter(v0, v1);
}

BOOL static SocketAddress.== infix(_:_:)(unint64_t a1, unint64_t a2)
{
  if (a1 >> 62)
  {
    if (a1 >> 62 == 1)
    {
      if (a2 >> 62 == 1)
      {
        sub_1000CB550();
        if (v6
          && *(unsigned __int16 *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x12) == *(unsigned __int16 *)((v3 & 0x3FFFFFFFFFFFFFFFLL)
                                                                                              + 0x12)
          && *(_DWORD *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x14) == *(_DWORD *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x14)
          && *(_DWORD *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28) == *(_DWORD *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x28))
        {
          uint64_t v4 = *(void *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
          __s1[0] = *(void *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
          __s1[1] = v4;
          uint64_t v5 = *(void *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
          __s2[0] = *(void *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
          __s2[1] = v5;
          return memcmp(__s1, __s2, 0x10uLL) == 0;
        }
      }
    }

    else if (a2 >> 62 == 2)
    {
      sub_1000CB550();
      if (v6)
      {
        uint64_t v12 = v11 & 0x3FFFFFFFFFFFFFFFLL;
        __int128 v13 = *(_OWORD *)((v10 & 0x3FFFFFFFFFFFFFFFLL) + 0x22);
        v19[0] = *(_OWORD *)((v10 & 0x3FFFFFFFFFFFFFFFLL) + 0x12);
        v19[1] = v13;
        __int128 v14 = *(_OWORD *)((v10 & 0x3FFFFFFFFFFFFFFFLL) + 0x42);
        __int128 v15 = *(_OWORD *)((v10 & 0x3FFFFFFFFFFFFFFFLL) + 0x52);
        __int128 v16 = *(_OWORD *)((v10 & 0x3FFFFFFFFFFFFFFFLL) + 0x62);
        uint64_t v17 = *(void *)((v10 & 0x3FFFFFFFFFFFFFFFLL) + 0x72);
        v19[2] = *(_OWORD *)((v10 & 0x3FFFFFFFFFFFFFFFLL) + 0x32);
        uint64_t v19[3] = v14;
        v19[4] = v15;
        v19[5] = v16;
        uint64_t v20 = v17;
        swift_retain();
        return sub_1000C9BD4((uint64_t)v19, v12, 0x68uLL);
      }
    }

    return 0;
  }

  if (a2 >> 62) {
    return 0;
  }
  sub_1000CB550();
  return *(_DWORD *)(v7 + 20) == *(_DWORD *)(v8 + 20);
}

uint64_t SocketAddress.init(_:host:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4 = a2;
  char v5 = a1;
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 16;
  unint64_t v8 = HIDWORD(a1);
  unint64_t v9 = a2 >> 8;
  unint64_t v10 = a2 >> 16;
  unint64_t v11 = a2 >> 24;
  unint64_t v12 = HIDWORD(a2);
  unint64_t v13 = a2 >> 40;
  unint64_t v16 = HIWORD(a2);
  unint64_t v17 = HIBYTE(a2);
  uint64_t v14 = sub_1000175B0(&qword_1002AAFA8);
  uint64_t result = sub_100019310(v14, 48LL);
  *(_BYTE *)(result + 1sub_100019F7C(v0 + 6) = v5;
  *(_BYTE *)(result + 17) = v6;
  *(_WORD *)(result + 18) = v7;
  *(_DWORD *)(result + 2sub_10006F0B8(12LL, 0) = v8;
  *(_BYTE *)(result + 2sub_100019F7C(v0 + 4) = v4;
  *(_BYTE *)(result + 25) = v9;
  *(_BYTE *)(result + 2sub_100019F7C(v0 + 6) = v10;
  *(_BYTE *)(result + 27) = v11;
  *(_BYTE *)(result + 28) = v12;
  *(_BYTE *)(result + 29) = v13;
  *(_BYTE *)(result + 3sub_10006F0B8(12LL, 0) = v16;
  *(_BYTE *)(result + 3Hasher._combine(_:)(v0 + 1) = v17;
  *(void *)(result + 3sub_100019F7C(v0 + 2) = a3;
  *(void *)(result + 4sub_10006F0B8(12LL, 0) = a4;
  return result;
}

uint64_t SocketAddress.init(_:host:)( unint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  char v11 = a1;
  unint64_t v12 = a1 >> 8;
  unint64_t v13 = a1 >> 16;
  unint64_t v14 = HIDWORD(a1);
  uint64_t v15 = sub_1000175B0(&qword_1002AAFA0);
  uint64_t v16 = sub_100019310(v15, 64LL);
  *(_BYTE *)(v16 + 1sub_100019F7C(v0 + 6) = v11;
  *(_BYTE *)(v16 + 17) = v12;
  *(_WORD *)(v16 + 18) = v13;
  *(_DWORD *)(v16 + 2sub_10006F0B8(12LL, 0) = v14;
  *(void *)(v16 + 2sub_100019F7C(v0 + 4) = a2;
  *(void *)(v16 + 3sub_100019F7C(v0 + 2) = a3;
  *(_DWORD *)(v16 + 4sub_10006F0B8(12LL, 0) = a4;
  *(void *)(v16 + 48) = a5;
  *(void *)(v16 + 5sub_100019F7C(v0 + 6) = a6;
  return v16 | 0x4000000000000000LL;
}

uint64_t static SocketAddress.makeAddressResolvingHost(_:port:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v33 = 0LL;
  uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  uint64_t v8 = v7;
  unint64_t v9 = (const char *)(String.utf8CString.getter(a1, a2) + 32);
  uint64_t v10 = String.utf8CString.getter(v6, v8);
  swift_bridgeObjectRelease();
  LODWORD(v8) = getaddrinfo(v9, (const char *)(v10 + 32), 0LL, &v33);
  swift_release();
  uint64_t result = sub_100024F0C();
  if ((_DWORD)v8)
  {
    unint64_t v12 = sub_100043584();
    sub_1000252D0((uint64_t)&type metadata for SocketAddressError, v12);
    *(void *)uint64_t v13 = a1;
    *(void *)(v13 + 8) = a2;
    *(void *)(v13 + 1sub_100019F7C(v0 + 6) = a3;
    *(_BYTE *)(v13 + 2sub_100019F7C(v0 + 4) = 0;
    uint64_t v14 = swift_bridgeObjectRetain();
    swift_willThrow(v14);
    return a3;
  }

  uint64_t v15 = v33;
  if (!v33) {
    goto LABEL_9;
  }
  int ai_family = v33->ai_family;
  if (ai_family != 30)
  {
    if (ai_family == 2)
    {
      ai_addr = v33->ai_addr;
      if (ai_addr)
      {
        int v18 = *(_DWORD *)&ai_addr->sa_len;
        int v19 = *(_DWORD *)&ai_addr->sa_data[2];
        uint64_t v20 = sub_1000175B0(&qword_1002AAFA8);
        a3 = sub_100019310(v20, 48LL);
        uint64_t v21 = *(void *)&ai_addr->sa_data[6];
        *(_DWORD *)(a3 + 1sub_100019F7C(v0 + 6) = v18;
        *(_DWORD *)(a3 + 2sub_10006F0B8(12LL, 0) = v19;
        *(void *)(a3 + 2sub_100019F7C(v0 + 4) = v21;
        *(void *)(a3 + 3sub_100019F7C(v0 + 2) = a1;
        *(void *)(a3 + 4sub_10006F0B8(12LL, 0) = a2;
LABEL_13:
        swift_bridgeObjectRetain();
        freeaddrinfo(v15);
        return a3;
      }

      __break(1u);
      goto LABEL_15;
    }

uint64_t SocketAddress.pathname.getter(uint64_t a1)
{
  if ((a1 & 0x8000000000000000LL) == 0) {
    return 0LL;
  }
  __int128 v2 = *(_OWORD *)(a1 + 34);
  __int128 v3 = *(_OWORD *)(a1 + 50);
  __int128 v4 = *(_OWORD *)(a1 + 66);
  __int128 v5 = *(_OWORD *)(a1 + 82);
  __int128 v6 = *(_OWORD *)(a1 + 98);
  v8[0] = *(_OWORD *)(a1 + 18);
  v8[1] = v2;
  uint64_t v7 = *(void *)(a1 + 114);
  _OWORD v8[2] = v3;
  void v8[3] = v4;
  uint64_t v8[4] = v5;
  v8[5] = v6;
  uint64_t v9 = v7;
  return String.init(cString:)(v8);
}

uint64_t sub_1000C91FC(void (*a1)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v3 = *(unsigned __int16 *)(v1 + 20);
  uint64_t v4 = *(unsigned __int8 *)(v1 + 22);
  __int128 v5 = (void *)(*(void *)v1 + 24LL);
  uint64_t result = swift_beginAccess(v5, v9, 0LL, 0LL);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = *(void *)(v1 + 32);
  if (__OFSUB__(v8, v7))
  {
    __break(1u);
  }

  else
  {
    a1(&v10, *v5 + (v4 | (v3 << 8)) + v7, v8 - v7);
    return 0LL;
  }

  return result;
}

uint64_t SocketAddress.IPv4Address.address.getter(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t SocketAddress.IPv6Address.address.getter(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

__n128 SocketAddress.UnixSocketAddress.address.getter@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v2 = *(_WORD *)(a1 + 120);
  __int128 v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 1sub_100019F7C(v0 + 6) = v3;
  __n128 result = *(__n128 *)(a1 + 48);
  __int128 v5 = *(_OWORD *)(a1 + 64);
  __int128 v6 = *(_OWORD *)(a1 + 80);
  __int128 v7 = *(_OWORD *)(a1 + 96);
  uint64_t v8 = *(void *)(a1 + 112);
  *(__n128 *)(a2 + 3sub_100019F7C(v0 + 2) = result;
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 6sub_100019F7C(v0 + 4) = v6;
  *(_OWORD *)(a2 + 8sub_10006F0B8(12LL, 0) = v7;
  *(void *)(a2 + 9sub_100019F7C(v0 + 6) = v8;
  *(_WORD *)(a2 + 10sub_100019F7C(v0 + 4) = v2;
  return result;
}

uint64_t SocketAddressError.FailedToParseIPByteBuffer.address.getter(uint64_t a1)
{
  return swift_retain(a1);
}

  ;
}

uint64_t static SocketAddressError.FailedToParseIPByteBuffer.__derived_struct_equals(_:_:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (HIDWORD(a2) < a2)
  {
    __break(1u);
    goto LABEL_12;
  }

  if (HIDWORD(a5) < a5)
  {
LABEL_12:
    __break(1u);
    return result;
  }

  __n128 result = HIDWORD(a2) - (_DWORD)a2 == HIDWORD(a5) - (_DWORD)a5
        && ((a3 & 0xFFFFFFFFFFFFFFLL) == (a6 & 0xFFFFFFFFFFFFFFLL) ? (BOOL v6 = result == a4) : (BOOL v6 = 0),
            v6 || (ChannelPipeline.syncOperations.getter(), (sub_10005D4E4() & 1) != 0));
  return result;
}

uint64_t sub_1000C93C0(uint64_t a1, uint64_t a2)
{
  return static SocketAddressError.FailedToParseIPByteBuffer.__derived_struct_equals(_:_:)( *(void *)a1,  *(void *)(a1 + 8),  *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int16 *)(a1 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 22) << 48),  *(void *)a2,  *(void *)(a2 + 8),  *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned __int16 *)(a2 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 22) << 48));
}

uint64_t SocketAddress.IPv4Address.host.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  swift_bridgeObjectRetain(*(void *)(a1 + 40));
  return v1;
}

uint64_t SocketAddress.IPv6Address.host.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  swift_bridgeObjectRetain(*(void *)(a1 + 56));
  return v1;
}

uint64_t SocketAddress.description.getter(unint64_t a1)
{
  if (a1 >> 62)
  {
    if (a1 >> 62 != 1)
    {
      uint64_t v39 = 0x5D5344555BLL;
      unint64_t v40 = 0xE500000000000000LL;
      uint64_t v7 = SocketAddress.pathname.getter(a1);
      if (!v8) {
        uint64_t v7 = 0LL;
      }
      sub_1000CB560(v7);
      goto LABEL_22;
    }

    uint64_t v4 = *(void *)(a1 + 48);
    unint64_t v3 = *(void *)(a1 + 56);
    sub_1000CB574();
    if (v5)
    {
      sub_100019320();
    }

    else
    {
      uint64_t v4 = 0LL;
      unint64_t v3 = 0LL;
    }

    unint64_t v9 = *(void *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
    uint64_t v39 = *(void *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
    unint64_t v40 = v9;
    uint64_t v10 = swift_retain();
    uint64_t v11 = sub_1000CB4F4(v10, &v39);
    if (v1) {
      goto LABEL_25;
    }
    uint64_t v13 = v11;
    uint64_t v14 = v12;
    uint64_t v37 = 0LL;
    unint64_t v38 = 0xE000000000000000LL;
    uint64_t v15 = SocketAddress.port.getter(a1);
    if ((v16 & 1) == 0)
    {
      uint64_t v36 = v15;
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      String.append(_:)(v17);
      swift_release(a1 & 0x3FFFFFFFFFFFFFFFLL);
      swift_bridgeObjectRelease();
      uint64_t v18 = v37;
      int v19 = (void *)v38;
      uint64_t v20 = 913723465LL;
LABEL_18:
      uint64_t v39 = 91LL;
      unint64_t v40 = 0xE100000000000000LL;
      unint64_t v27 = 0xE400000000000000LL;
      String.append(_:)(*(Swift::String *)&v20);
      swift_bridgeObjectRelease();
      sub_100081A00(93LL);
      if (v3)
      {
        uint64_t v37 = v4;
        unint64_t v38 = v3;
        sub_100019320();
        sub_100081A00(47LL);
        v28._countAndFlagsBits = v13;
        v28._object = v14;
        String.append(_:)(v28);
        sub_100081A00(58LL);
        swift_bridgeObjectRelease();
        sub_100019390();
      }

      else
      {
        uint64_t v37 = v13;
        unint64_t v38 = (unint64_t)v14;
        sub_100081A00(58LL);
      }

      sub_1000CB560(v37);
      sub_100019390();
      v29._countAndFlagsBits = v18;
      v29._object = v19;
      String.append(_:)(v29);
LABEL_22:
      swift_bridgeObjectRelease();
      return v39;
    }

    sub_100019390();
    __break(1u);
  }

  else
  {
    uint64_t v4 = *(void *)(a1 + 32);
    unint64_t v3 = *(void *)(a1 + 40);
    sub_1000CB574();
    if (v6)
    {
      sub_100019320();
    }

    else
    {
      uint64_t v4 = 0LL;
      unint64_t v3 = 0LL;
    }

    LODWORD(v3sub_100019F7C(v0 + 6) = *(_DWORD *)(a1 + 20);
    uint64_t v21 = swift_retain();
    uint64_t v22 = sub_1000CB520(v21, &v36);
    if (v1)
    {
      sub_100019390();
      uint64_t v31 = sub_1000CB4E4();
      uint64_t v35 = 106LL;
      goto LABEL_27;
    }

    uint64_t v13 = v22;
    uint64_t v14 = v23;
    uint64_t v39 = 0LL;
    unint64_t v40 = 0xE000000000000000LL;
    uint64_t v24 = SocketAddress.port.getter(a1);
    if ((v25 & 1) == 0)
    {
      uint64_t v37 = v24;
      v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      swift_release(a1 & 0x3FFFFFFFFFFFFFFFLL);
      uint64_t v18 = v39;
      int v19 = (void *)v40;
      uint64_t v20 = 880169033LL;
      goto LABEL_18;
    }
  }

  sub_100019390();
  __break(1u);
LABEL_25:
  sub_100019390();
  uint64_t v31 = sub_1000CB4E4();
  uint64_t v35 = 114LL;
LABEL_27:
  uint64_t result = swift_unexpectedError(v31, v32, v33, v34, v35);
  __break(1u);
  return result;
}

uint64_t sub_1000C9728(int a1, const void *a2, size_t a3)
{
  unint64_t v4 = a3;
  sub_1000B96D8(0, a3);
  uint64_t v8 = v7;
  if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) != 0)
  {
    if ((v4 & 0x8000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    sub_100034FD0();
    sub_100035154();
LABEL_10:
    uint64_t result = sub_100035124(v11, v12, v13, v14, v15, v16, v17);
    __break(1u);
    return result;
  }

  sub_1001650E8();
  uint64_t v8 = v10;
  if ((v4 & 0x8000000000000000LL) != 0) {
    goto LABEL_8;
  }
LABEL_3:
  if (HIDWORD(v4))
  {
    sub_100034FD0();
    sub_100035144();
    goto LABEL_10;
  }

  sub_1001266CC(a1, a2, (char *)(v8 + 32), v4);
  if (!v3) {
    unint64_t v4 = String.init(cString:)(v8 + 32);
  }
  sub_100019390();
  return v4;
}

uint64_t SocketAddress.port.getter(unint64_t a1)
{
  if (!(a1 >> 62))
  {
    uint64_t v1 = (unsigned __int16 *)(a1 + 18);
    return bswap32(*v1) >> 16;
  }

  if (a1 >> 62 == 1)
  {
    uint64_t v1 = (unsigned __int16 *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 18);
    return bswap32(*v1) >> 16;
  }

  return 0LL;
}

uint64_t SocketAddress.protocol.getter(unint64_t a1)
{
  return *(unsigned int *)((char *)&unk_1001FE044 + ((a1 >> 60) & 0xC));
}

uint64_t SocketAddress.ipAddress.getter(unint64_t a1)
{
  if (a1 >> 62)
  {
    uint64_t v2 = 0LL;
    if (a1 >> 62 != 1) {
      return v2;
    }
    uint64_t v3 = *(void *)(a1 + 32);
    v14[0] = *(void *)(a1 + 24);
    v14[1] = v3;
    uint64_t v4 = swift_retain();
    uint64_t v5 = sub_1000CB4F4(v4, v14);
    if (!v1)
    {
      uint64_t v2 = v5;
LABEL_7:
      swift_release();
      return v2;
    }

    uint64_t v9 = sub_1000CB4E4();
    uint64_t v13 = 153LL;
  }

  else
  {
    LODWORD(v14[0]) = *(_DWORD *)(a1 + 20);
    uint64_t v6 = ChannelPipeline.syncOperations.getter();
    uint64_t v7 = sub_1000CB520(v6, v14);
    if (!v1)
    {
      uint64_t v2 = v7;
      goto LABEL_7;
    }

    uint64_t v9 = sub_1000CB4E4();
    uint64_t v13 = 149LL;
  }

  uint64_t result = swift_unexpectedError(v9, v10, v11, v12, v13);
  __break(1u);
  return result;
}

unint64_t SocketAddress.port.setter(unint64_t result, char a2)
{
  unint64_t v8 = *v2;
  unint64_t v9 = *v2 >> 62;
  if (!(_DWORD)v9)
  {
    char v10 = *(_BYTE *)(v8 + 16);
    char v11 = *(_BYTE *)(v8 + 17);
    int v12 = *(_DWORD *)(v8 + 20);
    uint64_t v13 = *(void *)(v8 + 24);
    if ((a2 & 1) != 0)
    {
      LODWORD(result) = 0;
    }

    else
    {
      if ((result & 0x8000000000000000LL) != 0) {
        goto LABEL_19;
      }
      if (result >= 0x10000)
      {
LABEL_10:
        sub_100034FD0();
        sub_100035144();
LABEL_20:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)(v14, v15, v16, v17, v18, 2LL, v19, 20LL);
        __break(1u);
        return result;
      }
    }

    unsigned int v25 = bswap32(result) >> 16;
    uint64_t v27 = *(void *)(v8 + 32);
    uint64_t v26 = *(void *)(v8 + 40);
    sub_100019320();
    swift_release();
    uint64_t v28 = sub_1000175B0(&qword_1002AAFA8);
    uint64_t result = sub_100019310(v28, 48LL);
    *(_BYTE *)(result + 1sub_100019F7C(v0 + 6) = v10;
    *(_BYTE *)(result + 17) = v11;
    *(_WORD *)(result + 18) = v25;
    *(_DWORD *)(result + 2sub_10006F0B8(12LL, 0) = v12;
    *(void *)(result + 2sub_100019F7C(v0 + 4) = v13;
    *(void *)(result + 3sub_100019F7C(v0 + 2) = v27;
    *(void *)(result + 4sub_10006F0B8(12LL, 0) = v26;
    goto LABEL_17;
  }

  if ((_DWORD)v9 == 1)
  {
    char v7 = *(_BYTE *)(v8 + 16);
    int v3 = *(_DWORD *)(v8 + 20);
    uint64_t v5 = *(void *)(v8 + 24);
    uint64_t v4 = *(void *)(v8 + 32);
    int v6 = *(_DWORD *)(v8 + 40);
    char v29 = *(_BYTE *)(v8 + 17);
    if ((a2 & 1) == 0)
    {
      if ((result & 0x8000000000000000LL) == 0)
      {
        if (result >= 0x10000) {
          goto LABEL_10;
        }
        goto LABEL_14;
      }

unint64_t (*SocketAddress.port.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = v1;
  uint64_t v2 = *v1;
  unint64_t v3 = (unint64_t)*v1 >> 62;
  if ((_DWORD)v3)
  {
    if ((_DWORD)v3 != 1)
    {
      uint64_t v6 = 0LL;
      char v5 = 1;
      goto LABEL_6;
    }

    v2 &= 0x3FFFFFFFFFFFFFFFuLL;
  }

  uint64_t v4 = (unsigned __int16 *)(v2 + 18);
  char v5 = 0;
  uint64_t v6 = bswap32(*v4) >> 16;
LABEL_6:
  *(void *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v5;
  return sub_1000C9BA8;
}

unint64_t sub_1000C9BA8(uint64_t a1)
{
  return SocketAddress.port.setter(*(void *)a1, *(_BYTE *)(a1 + 8));
}

BOOL sub_1000C9BD4(uint64_t a1, uint64_t a2, size_t a3)
{
  __int128 v5 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v5;
  __int128 v6 = *(_OWORD *)(a1 + 48);
  __int128 v7 = *(_OWORD *)(a1 + 64);
  __int128 v8 = *(_OWORD *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 96);
  __int128 v12[2] = *(_OWORD *)(a1 + 32);
  v12[3] = v6;
  uint64_t v12[4] = v7;
  v12[5] = v8;
  uint64_t v13 = v9;
  sub_1000CABC8((const char *)v12, a2, a3, &v14);
  swift_release(a2);
  if (!v3) {
    return v14;
  }
  return v10;
}

uint64_t SocketAddress.withSockAddr<A>(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 62)
  {
    if (a3 >> 62 == 1)
    {
      __chkstk_darwin(a1);
      sub_1000CB504();
      sub_1000CB588();
      sub_1000C9E7C();
    }

    else
    {
      __chkstk_darwin(a1);
      sub_1000CB504();
      sub_1000CB588();
      sub_1000C9F38();
    }
  }

  else
  {
    __chkstk_darwin(a1);
    swift_retain();
    sub_1000C9DCC();
  }

  return swift_release();
}

uint64_t sub_1000C9DCC()
{
  int v1 = *(_DWORD *)(v0 + 4);
  v10[0] = *(_DWORD *)v0;
  v10[1] = v1;
  uint64_t v11 = *(void *)(v0 + 8);
  uint64_t v13 = v3;
  uint64_t v14 = v2;
  uint64_t v15 = v4;
  type metadata accessor for sockaddr_in(0LL);
  uint64_t v5 = sub_1000175B0(&qword_1002A9710);
  return sub_1000CB4CC( (uint64_t)v10,  (uint64_t)sub_1000CB494,  (uint64_t)v12,  v6,  v5,  v7,  (uint64_t)&protocol self-conformance witness table for Error,  v8);
}

uint64_t sub_1000C9E7C()
{
  int v1 = *(_DWORD *)(v0 + 4);
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  int v4 = *(_DWORD *)(v0 + 24);
  v17[0] = *(_DWORD *)v0;
  v17[1] = v1;
  uint64_t v19 = v3;
  uint64_t v18 = v2;
  int v20 = v4;
  uint64_t v14 = v6;
  uint64_t v15 = v5;
  uint64_t v16 = v7;
  type metadata accessor for sockaddr_in6(0LL);
  uint64_t v8 = sub_1000175B0(&qword_1002A9710);
  return sub_1000CB4CC( (uint64_t)v17,  (uint64_t)sub_1000CB4B8,  (uint64_t)v13,  v9,  v8,  v10,  (uint64_t)&protocol self-conformance witness table for Error,  v11);
}

uint64_t sub_1000C9F38()
{
  __int16 v1 = *(_WORD *)(v0 + 104);
  __int128 v2 = *(_OWORD *)(v0 + 16);
  v15[0] = *(_OWORD *)v0;
  v15[1] = v2;
  __int128 v3 = *(_OWORD *)(v0 + 48);
  __int128 v4 = *(_OWORD *)(v0 + 64);
  __int128 v5 = *(_OWORD *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 96);
  __int128 v15[2] = *(_OWORD *)(v0 + 32);
  _OWORD v15[3] = v3;
  uint64_t v15[4] = v4;
  v15[5] = v5;
  uint64_t v16 = v6;
  __int16 v17 = v1;
  uint64_t v19 = v8;
  uint64_t v20 = v7;
  uint64_t v21 = v9;
  type metadata accessor for sockaddr_un(0LL);
  uint64_t v10 = sub_1000175B0(&qword_1002A9710);
  return sub_1000CB4CC( (uint64_t)v15,  (uint64_t)sub_1000CB4B8,  (uint64_t)v18,  v11,  v10,  v12,  (uint64_t)&protocol self-conformance witness table for Error,  v13);
}

uint64_t SocketAddress.init(_:)(unint64_t a1, unint64_t a2)
{
  char v3 = a2;
  char v4 = a1;
  unint64_t v5 = a1 >> 8;
  unint64_t v6 = a1 >> 16;
  unint64_t v7 = HIDWORD(a1);
  unint64_t v8 = a2 >> 8;
  int v25 = HIDWORD(a1);
  unint64_t v9 = a2 >> 16;
  unint64_t v26 = a2;
  unint64_t v10 = a2 >> 24;
  unint64_t v11 = a2 >> 40;
  unint64_t v22 = HIDWORD(a2);
  unint64_t v23 = HIWORD(a2);
  unint64_t v24 = HIBYTE(a2);
  uint64_t v12 = sub_1000CB520(a1, &v25);
  uint64_t v20 = v13;
  uint64_t v21 = v12;
  if (v2)
  {
    uint64_t v16 = sub_1000CB4E4();
    uint64_t result = swift_unexpectedError(v16, v17, v18, v19, 584LL);
    __break(1u);
  }

  else
  {
    uint64_t v14 = sub_1000175B0(&qword_1002AAFA8);
    uint64_t result = sub_100019310(v14, 48LL);
    *(_BYTE *)(result + 1sub_100019F7C(v0 + 6) = v4;
    *(_BYTE *)(result + 17) = v5;
    *(_WORD *)(result + 18) = v6;
    *(_DWORD *)(result + 2sub_10006F0B8(12LL, 0) = v7;
    *(_BYTE *)(result + 2sub_100019F7C(v0 + 4) = v3;
    *(_BYTE *)(result + 25) = v8;
    *(_BYTE *)(result + 2sub_100019F7C(v0 + 6) = v9;
    *(_BYTE *)(result + 27) = v10;
    *(_BYTE *)(result + 28) = v22;
    *(_BYTE *)(result + 29) = v11;
    *(_BYTE *)(result + 3sub_10006F0B8(12LL, 0) = v23;
    *(_BYTE *)(result + 3Hasher._combine(_:)(v0 + 1) = v24;
    *(void *)(result + 3sub_100019F7C(v0 + 2) = v21;
    *(void *)(result + 4sub_10006F0B8(12LL, 0) = v20;
  }

  return result;
}

uint64_t SocketAddress.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v20[0] = a2;
  v20[1] = a3;
  uint64_t v9 = sub_1000CB4F4(a1, v20);
  if (v4)
  {
    uint64_t v16 = sub_1000CB4E4();
    uint64_t result = swift_unexpectedError(v16, v17, v18, v19, 601LL);
    __break(1u);
  }

  else
  {
    uint64_t v11 = v9;
    uint64_t v12 = v10;
    uint64_t v13 = sub_1000175B0(&qword_1002AAFA0);
    uint64_t v14 = sub_100019310(v13, 64LL);
    *(void *)(v14 + 1sub_100019F7C(v0 + 6) = a1;
    *(void *)(v14 + 2sub_100019F7C(v0 + 4) = a2;
    *(void *)(v14 + 3sub_100019F7C(v0 + 2) = a3;
    *(_DWORD *)(v14 + 4sub_10006F0B8(12LL, 0) = a4;
    *(void *)(v14 + 48) = v11;
    *(void *)(v14 + 5sub_100019F7C(v0 + 6) = v12;
    return v14 | 0x4000000000000000LL;
  }

  return result;
}

unint64_t SocketAddress.init(_:)(const void *a1)
{
  uint64_t v2 = sub_1000175B0(&qword_1002AFF60);
  uint64_t v3 = sub_100019310(v2, 122LL);
  memcpy((void *)(v3 + 16), a1, 0x6AuLL);
  return v3 | 0x8000000000000000LL;
}

unint64_t SocketAddress.init(unixDomainSocketPath:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v4 = String.UTF8View._foreignCount()();
  }

  else
  {
    if ((a2 & 0x2000000000000000LL) != 0) {
      goto LABEL_6;
    }
    Swift::Int v4 = a1 & 0xFFFFFFFFFFFFLL;
  }

  if (v4 > 103)
  {
    swift_bridgeObjectRelease();
    unint64_t v5 = sub_100043584();
    uint64_t v6 = sub_1000252D0((uint64_t)&type metadata for SocketAddressError, v5);
    v7[1] = 0LL;
    void v7[2] = 0LL;
    *unint64_t v7 = 1LL;
    return sub_1000CB530(v6, (uint64_t)v7);
  }

Swift::Int sub_1000CA3FC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int result = String.UTF8View._foreignCount()();
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    Swift::Int result = HIBYTE(a2) & 0xF;
  }

  else
  {
    Swift::Int result = a1 & 0xFFFFFFFFFFFFLL;
  }

  if (__OFADD__(v3, result))
  {
    __break(1u);
  }

  else
  {
    sub_10002FA78();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    sub_1001890C4();
    swift_bridgeObjectRetain();
    sub_100189034();
    return v6;
  }

  return result;
}

void *SocketAddress.init(ipAddress:port:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v11 = a3;
  uint64_t v12 = a1;
  uint64_t v13 = a2;
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL))
  {
    _StringGuts._slowWithCString<A>(_:)(&v16, sub_1000CAF60, v10, a1, a2, &type metadata for SocketAddress);
    sub_100019390();
    if (!v3) {
      return (void *)v16;
    }
  }

  else
  {
    Swift::Int v4 = v9;
    _OWORD v9[2] = sub_1000CAF60;
    _OWORD v9[3] = v10;
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      v15[0] = a1;
      v15[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      sub_1000CA604((const char *)v15, a3, (uint64_t *)&v14);
      if (v3)
      {
        sub_100019390();
      }

      else
      {
        Swift::Int v4 = v14;
        sub_100019390();
      }
    }

    else
    {
      if ((a1 & 0x1000000000000000LL) != 0)
      {
        uint64_t v6 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v6 = _StringObject.sharedUTF8.getter(a1);
      }

      Swift::Int v4 = (void *)sub_1000CAEB8(v6, v7, (uint64_t (*)(void))sub_1000CAF7C);
      sub_100019390();
    }
  }

  return v4;
}

uint64_t sub_1000CA604@<X0>(const char *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  LODWORD(v1sub_100019F7C(v0 + 6) = 0;
  sub_100126658(2, a1, &v16);
  if (v3)
  {
    swift_errorRelease(v3);
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    sub_100126658(30, a1, &v16);
    if ((a2 & 0x8000000000000000LL) == 0)
    {
      if (a2 < 0x10000)
      {
        unsigned int v10 = bswap32(a2) >> 16;
        uint64_t v11 = v16;
        uint64_t v12 = v17;
        uint64_t v13 = sub_1000175B0(&qword_1002AAFA0);
        uint64_t result = swift_allocObject(v13, 64LL, 7LL);
        *(_WORD *)(result + 1sub_100019F7C(v0 + 6) = 7680;
        *(_WORD *)(result + 18) = v10;
        *(_DWORD *)(result + 2sub_10006F0B8(12LL, 0) = 0;
        *(void *)(result + 2sub_100019F7C(v0 + 4) = v11;
        *(void *)(result + 3sub_100019F7C(v0 + 2) = v12;
        *(_DWORD *)(result + 4sub_10006F0B8(12LL, 0) = 0;
        *(void *)(result + 48) = 0LL;
        *(void *)(result + 5sub_100019F7C(v0 + 6) = 0xE000000000000000LL;
        *a3 = result | 0x4000000000000000LL;
        return result;
      }

      goto LABEL_10;
    }
  }

  else if ((a2 & 0x8000000000000000LL) == 0)
  {
    if (a2 < 0x10000)
    {
      int v7 = v16;
      uint64_t v8 = sub_1000175B0(&qword_1002AAFA8);
      uint64_t result = swift_allocObject(v8, 48LL, 7LL);
      *(_WORD *)(result + 1sub_100019F7C(v0 + 6) = 512;
      *(_WORD *)(result + 18) = bswap32(a2) >> 16;
      *(_DWORD *)(result + 2sub_10006F0B8(12LL, 0) = v7;
      *(void *)(result + 2sub_100019F7C(v0 + 4) = 0LL;
      *(void *)(result + 3sub_100019F7C(v0 + 2) = 0LL;
      *(void *)(result + 4sub_10006F0B8(12LL, 0) = 0xE000000000000000LL;
      *a3 = result;
      return result;
    }

void *SocketAddress.init(packedIPAddress:port:)( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  ByteBufferView.init(_:)(a1, a2, a3 & 0xFFFFFFFFFFFFFFLL, (uint64_t)v37);
  int v9 = v8 - v6;
  if (v9 == 16)
  {
    __int128 v38 = 0uLL;
    if ((a4 & 0x8000000000000000LL) == 0)
    {
      if (a4 < 0x10000)
      {
        ChannelPipeline.syncOperations.getter();
        uint64_t v18 = sub_1000CAA80((uint64_t)v37, &v38);
        __int128 v19 = v38;
        sub_1000CB56C(v18, v20, v21);
        sub_100024F0C();
        uint64_t v22 = sub_1000175B0(&qword_1002AAFA0);
        uint64_t v23 = sub_100019310(v22, 64LL);
        *(_WORD *)(v23 + 1sub_100019F7C(v0 + 6) = 7680;
        *(_WORD *)(v23 + 18) = bswap32(a4) >> 16;
        *(_DWORD *)(v23 + 2sub_10006F0B8(12LL, 0) = 0;
        *(_OWORD *)(v23 + 2sub_100019F7C(v0 + 4) = v19;
        *(_DWORD *)(v23 + 4sub_10006F0B8(12LL, 0) = 0;
        uint64_t result = (void *)(v23 | 0x4000000000000000LL);
        *(void *)(v23 + 48) = 0LL;
        *(void *)(v23 + 5sub_100019F7C(v0 + 6) = 0xE000000000000000LL;
        return result;
      }

      goto LABEL_13;
    }
  }

  else
  {
    if (v9 != 4)
    {
      unint64_t v24 = sub_1000CAFB8();
      sub_1000252D0((uint64_t)&type metadata for SocketAddressError.FailedToParseIPByteBuffer, v24);
      *(void *)uint64_t v25 = a1;
      *(_DWORD *)(v25 + 8) = v6;
      *(_DWORD *)(v25 + 1sub_100019F7C(v0 + 2) = v8;
      *(_DWORD *)(v25 + 1sub_100019F7C(v0 + 6) = a3;
      *(_WORD *)(v25 + 2sub_10006F0B8(12LL, 0) = WORD2(a3);
      *(_BYTE *)(v25 + 2sub_100019F7C(v0 + 2) = BYTE6(a3);
      uint64_t v26 = ChannelPipeline.syncOperations.getter();
      uint64_t v27 = swift_willThrow(v26);
      return sub_1000CB56C(v27, v28, v29);
    }

    LOWORD(v38) = 512;
    *(void *)((char *)&v38 + sub_100019F7C(v0 + 4) = 0LL;
    HIDWORD(v38) = 0;
    if ((a4 & 0x8000000000000000LL) == 0)
    {
      if (a4 < 0x10000)
      {
        WORD1(v38) = bswap32(a4) >> 16;
        ChannelPipeline.syncOperations.getter();
        uint64_t v10 = sub_1000CAA80((uint64_t)v37, (_BYTE *)&v38 + 4);
        int v11 = v38;
        int v12 = DWORD1(v38);
        uint64_t v13 = *((void *)&v38 + 1);
        sub_1000CB56C(v10, v14, v15);
        sub_100024F0C();
        uint64_t v16 = sub_1000175B0(&qword_1002AAFA8);
        uint64_t result = (void *)sub_100019310(v16, 48LL);
        *((_DWORD *)result + sub_100019F7C(v0 + 4) = v11;
        *((_DWORD *)result + 5) = v12;
        result[3] = v13;
        result[4] = 0LL;
        result[5] = 0xE000000000000000LL;
        return result;
      }

uint64_t sub_1000CAA80(uint64_t result, _BYTE *a2)
{
  __int128 v2 = *(_OWORD *)(result + 16);
  __int128 v15 = *(_OWORD *)result;
  __int128 v16 = v2;
  uint64_t v17 = *(void *)(result + 32);
  if (a2)
  {
    uint64_t v3 = a2;
    __int128 v4 = *(_OWORD *)(result + 16);
    __int128 v18 = *(_OWORD *)result;
    __int128 v19 = v4;
    uint64_t v20 = *(void *)(result + 32);
    uint64_t result = sub_1000C91FC((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1000CB478);
    if ((result & 1) != 0)
    {
      uint64_t v5 = *((void *)&v16 + 1);
      uint64_t v6 = v17;
      if (*((void *)&v16 + 1) != v17)
      {
        uint64_t v7 = DWORD2(v15);
        unint64_t v8 = (HIDWORD(v15) - DWORD2(v15));
        if (HIDWORD(v15) >= DWORD2(v15))
        {
          uint64_t v9 = WORD2(v16);
          uint64_t v10 = BYTE6(v16);
          int v11 = (void *)(v15 + 24);
          uint64_t result = swift_beginAccess(v15 + 24, v14, 0LL, 0LL);
          if (v5 >= v6)
          {
LABEL_16:
            __break(1u);
            return result;
          }

          uint64_t v12 = *v11 + (v10 | (v9 << 8)) + v7;
          while (1)
          {
            unint64_t v13 = v5 - v7;
            if (__OFSUB__(v5, v7)) {
              break;
            }
            if (v13 >= v8) {
              goto LABEL_13;
            }
            if (v13 == 0x7FFFFFFFFFFFFFFFLL) {
              goto LABEL_14;
            }
            ++v5;
            *v3++ = *(_BYTE *)(v12 + v13);
            if (v6 == v5) {
              return result;
            }
          }

          __break(1u);
LABEL_13:
          __break(1u);
LABEL_14:
          __break(1u);
        }

        __break(1u);
        goto LABEL_16;
      }
    }
  }

  return result;
}

uint64_t sub_1000CABC0()
{
  return SocketAddress.description.getter(*v0);
}

uint64_t sub_1000CABC8@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, size_t a3@<X2>, BOOL *a4@<X8>)
{
  __int128 v5 = *(_OWORD *)(a2 + 34);
  v11[0] = *(_OWORD *)(a2 + 18);
  v11[1] = v5;
  __int128 v6 = *(_OWORD *)(a2 + 66);
  __int128 v7 = *(_OWORD *)(a2 + 82);
  __int128 v8 = *(_OWORD *)(a2 + 98);
  uint64_t v9 = *(void *)(a2 + 114);
  void v11[2] = *(_OWORD *)(a2 + 50);
  v11[3] = v6;
  void v11[4] = v7;
  v11[5] = v8;
  uint64_t v12 = v9;
  uint64_t result = strncmp(a1, (const char *)v11, a3);
  *a4 = (_DWORD)result == 0;
  return result;
}

BOOL sub_1000CAC60(unint64_t *a1, unint64_t *a2)
{
  return static SocketAddress.== infix(_:_:)(*a1, *a2);
}

void SocketAddress.hash(into:)(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
  {
    if (a2 >> 62 == 1)
    {
      Hasher._combine(_:)(2uLL);
      sub_1000CB59C();
      Hasher._combine(_:)(*(_WORD *)(a2 + 18));
      Hasher._combine(_:)(*(_DWORD *)(a2 + 20));
      Hasher._combine(_:)(*(_DWORD *)(a2 + 40));
      uint64_t v3 = *(void *)(a2 + 32);
      *(void *)&__int128 v11 = *(void *)(a2 + 24);
      *((void *)&v11 + Hasher._combine(_:)(v0 + 1) = v3;
      __int128 v4 = (char *)v12;
    }

    else
    {
      Hasher._combine(_:)(0LL);
      sub_1000CB59C();
      __int128 v5 = *(_OWORD *)(a2 + 34);
      __int128 v6 = *(_OWORD *)(a2 + 50);
      __int128 v7 = *(_OWORD *)(a2 + 66);
      __int128 v8 = *(_OWORD *)(a2 + 82);
      __int128 v9 = *(_OWORD *)(a2 + 98);
      __int128 v11 = *(_OWORD *)(a2 + 18);
      v12[0] = v5;
      uint64_t v10 = *(void *)(a2 + 114);
      v12[1] = v6;
      __int128 v12[2] = v7;
      v12[3] = v8;
      uint64_t v12[4] = v9;
      uint64_t v13 = v10;
      __int128 v4 = (char *)&v12[-1] + strnlen((const char *)&v11, 0x68uLL);
    }

    Hasher.combine(bytes:)(&v11, v4);
  }

  else
  {
    Hasher._combine(_:)(1uLL);
    sub_1000CB59C();
    Hasher._combine(_:)(*(_WORD *)(a2 + 18));
    Hasher._combine(_:)(*(_DWORD *)(a2 + 20));
  }

Swift::Int SocketAddress.hashValue.getter(unint64_t a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000CADC0()
{
  return SocketAddress.hashValue.getter(*v0);
}

void sub_1000CADC8(uint64_t a1)
{
}

Swift::Int sub_1000CADD0()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)(v3);
  SocketAddress.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

BOOL SocketAddress.isMulticast.getter(unint64_t a1)
{
  if (a1 >> 62)
  {
    if (a1 >> 62 != 1) {
      return 0LL;
    }
    return *(unsigned __int8 *)(a1 + 24) == 255;
  }

  else
  {
    return (*(_DWORD *)(a1 + 20) & 0xF0) == 224;
  }

uint64_t sub_1000CAE48( uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5, void *a6)
{
  if (result)
  {
    uint64_t result = a3(result, a2 - result);
    if (v6) {
      *a6 = v6;
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000CAE84()
{
  return sub_1000CAE98();
}

uint64_t sub_1000CAE98()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t sub_1000CAEB8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result = a3();
  if (!v3) {
    return v5;
  }
  return result;
}

void *sub_1000CAEF0(void *__src, size_t __len, int a3, int a4, int a5, void *__dst)
{
  if (__src)
  {
    if ((__len & 0x8000000000000000LL) != 0)
    {
      __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.copyMemory with negative count",  54LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1549LL,  0);
      __break(1u);
    }

    else
    {
      return memmove(__dst, __src, __len);
    }
  }

  return __src;
}

uint64_t sub_1000CAF60@<X0>(const char *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000CA604(a1, *(void *)(v2 + 16), a2);
}

void *sub_1000CAF7C@<X0>(void *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

unint64_t sub_1000CAFB8()
{
  unint64_t result = qword_1002AFF68;
  if (!qword_1002AFF68)
  {
    unint64_t result = swift_getWitnessTable("a1\b", &type metadata for SocketAddressError.FailedToParseIPByteBuffer);
    atomic_store(result, (unint64_t *)&qword_1002AFF68);
  }

  return result;
}

unint64_t sub_1000CAFF8()
{
  unint64_t result = qword_1002AFF70;
  if (!qword_1002AFF70)
  {
    unint64_t result = swift_getWitnessTable("11\b", &type metadata for SocketAddressError.FailedToParseIPByteBuffer);
    atomic_store(result, (unint64_t *)&qword_1002AFF70);
  }

  return result;
}

unint64_t sub_1000CB038()
{
  unint64_t result = qword_1002AFF78;
  if (!qword_1002AFF78)
  {
    unint64_t result = swift_getWitnessTable(protocol conformance descriptor for SocketAddress, &type metadata for SocketAddress);
    atomic_store(result, (unint64_t *)&qword_1002AFF78);
  }

  return result;
}

uint64_t sub_1000CB074(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 1u) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t destroy for SocketAddressError(uint64_t a1)
{
  return sub_1000CB0A0(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t sub_1000CB0A0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 1u) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t initializeWithCopy for SocketAddressError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(_BYTE *)(a2 + 24);
  sub_1000CB074(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = v5;
  *(_BYTE *)(a1 + 2sub_100019F7C(v0 + 4) = v6;
  return a1;
}

uint64_t assignWithCopy for SocketAddressError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(_BYTE *)(a2 + 24);
  sub_1000CB074(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = v5;
  unsigned __int8 v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 2sub_100019F7C(v0 + 4) = v6;
  sub_1000CB0A0(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for SocketAddressError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(_BYTE *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 1sub_100019F7C(v0 + 6) = v3;
  unsigned __int8 v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 2sub_100019F7C(v0 + 4) = v4;
  sub_1000CB0A0(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for SocketAddressError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 25))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SocketAddressError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 1sub_100019F7C(v0 + 6) = 0LL;
    *(_BYTE *)(result + 2sub_100019F7C(v0 + 4) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 25) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 2sub_100019F7C(v0 + 4) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000CB254(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1000CB26C(uint64_t result, unsigned int a2)
{
  uint64_t v2 = a2 - 2;
  if (a2 >= 2)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 1sub_100019F7C(v0 + 6) = 0LL;
    LOBYTE(asub_100019F7C(v0 + 2) = 2;
    *(void *)uint64_t result = v2;
  }

  *(_BYTE *)(result + 2sub_100019F7C(v0 + 4) = a2;
  return result;
}

void type metadata accessor for SocketAddressError()
{
}

void type metadata accessor for SocketAddressError.FailedToParseIPByteBuffer()
{
}

void *initializeBufferWithCopyOfBuffer for SocketAddress(void *a1, void *a2)
{
  uint64_t v3 = *a2 & 0x3FFFFFFFFFFFFFFFLL;
  *a1 = *a2;
  swift_retain(v3);
  return a1;
}

uint64_t *assignWithCopy for SocketAddress(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2 & 0x3FFFFFFFFFFFFFFFLL;
  uint64_t v4 = *a1;
  *a1 = *a2;
  uint64_t v5 = v4 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain(v3);
  swift_release(v5);
  return a1;
}

uint64_t *assignWithTake for SocketAddress(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  swift_release(v3 & 0x3FFFFFFFFFFFFFFFLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for SocketAddress(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7E && *(_BYTE *)(a1 + 8))
    {
      unsigned int v2 = *(_DWORD *)a1 + 125;
    }

    else
    {
      unsigned int v2 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
      if (v2 >= 0x7D) {
        unsigned int v2 = -1;
      }
    }
  }

  else
  {
    unsigned int v2 = -1;
  }

  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for SocketAddress(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)uint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7E) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007LL;
    }
  }

  return result;
}

uint64_t sub_1000CB3E8(void *a1)
{
  return *a1 >> 62;
}

void *sub_1000CB3F4(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t *sub_1000CB404(uint64_t *result, uint64_t a2)
{
  *uint64_t result = *result & 0xFFFFFFFFFFFFFF8LL | (a2 << 62);
  return result;
}

void type metadata accessor for SocketAddress()
{
}

void type metadata accessor for SocketAddress.IPv4Address()
{
}

void type metadata accessor for SocketAddress.IPv6Address()
{
}

void type metadata accessor for SocketAddress.UnixSocketAddress()
{
}

void *sub_1000CB448(void *a1, size_t a2, uint64_t a3, int a4, int a5, void *a6)
{
  __int128 v6 = *(_OWORD *)(a3 + 16);
  v8[0] = *(_OWORD *)a3;
  v8[1] = v6;
  uint64_t v9 = *(void *)(a3 + 32);
  return sub_1000CAEF0(a1, a2, (int)v8, a4, a5, a6);
}

void *sub_1000CB478(void *a1, size_t a2)
{
  return sub_1000CB448(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void **)(v2 + 40));
}

uint64_t sub_1000CB494(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1000CAE48( a1,  a2,  *(uint64_t (**)(uint64_t, uint64_t))(v3 + 24),  *(void *)(v3 + 32),  *(void *)(v3 + 16),  a3);
}

uint64_t sub_1000CB4B8(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1000CB494(a1, a2, a3);
}

uint64_t sub_1000CB4CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  return sub_1000C881C(a1, a2, a3, v8, a5, v9, a7, (uint64_t)va);
}

uint64_t sub_1000CB4E4()
{
  return v0;
}

uint64_t sub_1000CB4F4(uint64_t a1, const void *a2)
{
  return sub_1000C9728(30, a2, 0x2EuLL);
}

uint64_t sub_1000CB504()
{
  return swift_retain(v0);
}

uint64_t sub_1000CB520(uint64_t a1, const void *a2)
{
  return sub_1000C9728(2, a2, 0x10uLL);
}

uint64_t sub_1000CB530(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 2sub_100019F7C(v0 + 4) = 2;
  return swift_willThrow();
}

  ;
}

  ;
}

void sub_1000CB560(uint64_t a1)
{
  uint64_t v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

void *sub_1000CB56C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return sub_100063354((uint64_t *)va);
}

  ;
}

  ;
}

void sub_1000CB59C()
{
}

uint64_t sub_1000CB5A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    uint64_t v8 = 4LL;
    while (1)
    {
      if ((a1 & 0xC000000000000001LL) != 0)
      {
        uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, a1);
      }

      else
      {
        uint64_t v9 = *(void *)(a1 + 8 * v8);
        swift_retain();
      }

      uint64_t v10 = v8 - 3;
      if (__OFADD__(v8 - 4, 1LL)) {
        break;
      }
      uint64_t v11 = *(void *)(v9 + 16);
      uint64_t v12 = *(void *)(v9 + 24);
      swift_bridgeObjectRetain(v12);
      char v13 = sub_1000CC43C(a2, a3, a4, a5, v11, v12);
      swift_bridgeObjectRelease(v12);
      if ((v13 & 1) != 0)
      {
        swift_bridgeObjectRelease(a5);
        swift_bridgeObjectRelease(a1);
        return v9;
      }

      swift_release(v9);
      ++v8;
      if (v10 == v7) {
        goto LABEL_17;
      }
    }

    __break(1u);
LABEL_13:
    if (a1 < 0) {
      uint64_t v14 = a1;
    }
    else {
      uint64_t v14 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

uint64_t sub_1000CB708(uint64_t a1, uint64_t a2)
{
  v19[2] = a1;
  uint64_t v19[3] = a2;
  v19[0] = 45LL;
  v19[1] = 0xE100000000000000LL;
  v18[0] = 95LL;
  v18[1] = 0xE100000000000000LL;
  sub_10001B4A0();
  uint64_t v2 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v19,  v18,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String);
  unint64_t v4 = v3;
  if (qword_1002A8CE0 != -1) {
    swift_once(&qword_1002A8CE0, sub_1000CBA74);
  }
  sub_100019320();
  uint64_t v5 = sub_10003574C();
  uint64_t v6 = sub_1000233E4(v5, v2, v4);
  sub_10003561C();
  if (!v6)
  {
    unint64_t v7 = sub_1000CB870(95LL, 0xE100000000000000LL, v2, v4);
    if ((v8 & 1) != 0)
    {
      uint64_t v6 = 0LL;
    }

    else
    {
      uint64_t v9 = String.subscript.getter(15LL, v7, v2, v4);
      unint64_t v11 = v10;
      uint64_t v13 = v12;
      uint64_t v15 = v14;
      sub_100019390();
      swift_bridgeObjectRetain(v15);
      uint64_t v16 = sub_100019320();
      uint64_t v6 = sub_1000CB5A4(v16, v9, v11, v13, v15);
      swift_bridgeObjectRelease(v15);
    }
  }

  sub_100019390();
  return v6;
}

unint64_t sub_1000CB870(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return 0LL;
  }
  uint64_t v9 = 4 * v4;
  unint64_t v10 = 15LL;
  while (1)
  {
    uint64_t v11 = String.subscript.getter(v10, a3, a4);
    if (v11 == a1 && v12 == a2) {
      break;
    }
    uint64_t v14 = v12;
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, a1, a2, 0LL);
    swift_bridgeObjectRelease(v14);
    if ((v15 & 1) != 0) {
      return v10;
    }
    unint64_t v10 = String.index(after:)(v10, a3, a4);
    if (v9 == v10 >> 14) {
      return 0LL;
    }
  }

  swift_bridgeObjectRelease(a2);
  return v10;
}

uint64_t sub_1000CB954(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return variable initialization expression of MarkedCircularBuffer._markedIndexOffset();
  }
  if (*(void *)(a2 + 32) == a1) {
    return sub_1000CC6DC();
  }
  uint64_t result = 0LL;
  uint64_t v5 = v2 - 1;
  while (v5 != result)
  {
    uint64_t v6 = *(void *)(a2 + 40 + 8 * result++);
    if (v6 == a1) {
      return result;
    }
  }

  return 0LL;
}

uint64_t sub_1000CB9A8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0LL;
  }
  uint64_t v7 = a3[4];
  uint64_t v8 = a3[5];
  BOOL v9 = v7 == a1 && v8 == a2;
  if (v9 || (sub_1000AD508(v7, v8) & 1) != 0) {
    return 0LL;
  }
  uint64_t v11 = 0LL;
  uint64_t v12 = a3 + 7;
  uint64_t v13 = 1LL;
  while (1)
  {
    if (v3 == v13) {
      return 0LL;
    }
    ++v11;
    uint64_t v14 = *(v12 - 1);
    uint64_t v15 = *v12;
    if (v14 == a1 && v15 == a2) {
      break;
    }
    char v17 = sub_1000AD508(v14, v15);
    uint64_t result = v13++;
    v12 += 2;
    if ((v17 & 1) != 0) {
      return result;
    }
  }

  return v11;
}

void *sub_1000CBA74()
{
  uint64_t result = sub_1000CBAA0();
  qword_1002EB950 = (uint64_t)result;
  return result;
}

void *sub_1000CBAA0()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OctaneConfiguration();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v4);
  id v6 = [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  NSString v7 = String._bridgeToObjectiveC()();
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [v6 pathForResource:v7 ofType:v8];

  unint64_t v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    uint64_t v13 = v12;

    URL.init(fileURLWithPath:)(v11, v13);
    swift_bridgeObjectRelease(v13);
    uint64_t v14 = Data.init(contentsOf:options:)(v3, 0LL);
    unint64_t v16 = v15;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    uint64_t v17 = type metadata accessor for PropertyListDecoder(0LL);
    swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    uint64_t v18 = PropertyListDecoder.init()();
    uint64_t v19 = sub_1000175B0(&qword_1002B0048);
    sub_1000CC61C();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v19, v14, v16, v19);
    sub_10003A9EC(v14, v16);
    swift_release(v18);
    uint64_t v29 = (void *)v31;
  }

  else
  {
    uint64_t v29 = _swiftEmptyArrayStorage;
  }

  unint64_t v31 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v20 = v29[2];
  if (v20)
  {
    type metadata accessor for OctaneLocale();
    swift_bridgeObjectRetain(v29);
    for (uint64_t i = 0LL; i != v20; ++i)
    {
      uint64_t v22 = swift_bridgeObjectRetain(v29[i + 4]);
      uint64_t v23 = sub_1000CBF60(v22);
      if (v23)
      {
        unint64_t v24 = v23;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
        unint64_t v26 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v25 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v26 >= v25 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1);
        }
        uint64_t v27 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v26, v24);
        specialized Array._endMutation()(v27);
      }
    }

    swift_bridgeObjectRelease(v29);
    unint64_t v10 = (void *)v31;
  }

  swift_bridgeObjectRelease(v29);
  return v10;
}

uint64_t sub_1000CBD68(void *a1)
{
  uint64_t v3 = swift_allocObject(v1, 48LL, 7LL);
  sub_1000CBDB4(a1);
  return v3;
}

void *sub_1000CBDB4(void *a1)
{
  uint64_t v3 = v1;
  sub_100019F58(a1, a1[3]);
  uint64_t v5 = sub_1000CC6E8();
  dispatch thunk of Decoder.singleValueContainer()(v5);
  if (v2)
  {
    uint64_t v7 = type metadata accessor for OctaneLocale();
    swift_deallocPartialClassInstance(v1, v7, 48LL, 7LL);
  }

  else
  {
    sub_100019F58(v18, v18[3]);
    uint64_t v6 = sub_1000CC6E8();
    uint64_t v9 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v6);
    uint64_t v11 = v10;
    uint64_t v12 = type metadata accessor for OctaneLocale();
    uint64_t inited = (void *)sub_1000CB708(v9, v11);
    swift_bridgeObjectRelease();
    if (!inited) {
      uint64_t inited = (void *)swift_initStaticObject(v12, &unk_1002A8DE8);
    }
    uint64_t v14 = inited[5];
    void v3[4] = inited[4];
    v3[5] = v14;
    uint64_t v16 = inited[2];
    uint64_t v15 = inited[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v17 = swift_release();
    v3[2] = v16;
    _OWORD v3[3] = v15;
    sub_1000CC6FC(v17);
  }

  sub_100019F7C(a1);
  return v3;
}

uint64_t sub_1000CBEC8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100019F58(a1, v3);
  dispatch thunk of Encoder.singleValueContainer()(v11, v3, v4);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = v12;
  uint64_t v8 = v13;
  sub_100043F18((uint64_t)v11, v12);
  uint64_t v9 = dispatch thunk of SingleValueEncodingContainer.encode(_:)(v5, v6, v7, v8);
  return sub_1000CC6FC(v9);
}

void *sub_1000CBF60(uint64_t a1)
{
  if (*(void *)(a1 + 16) && (unint64_t v2 = sub_1000F168C(1701667182LL, 0xE400000000000000LL), (v3 & 1) != 0))
  {
    uint64_t v4 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v2);
    uint64_t v6 = *v4;
    uint64_t v5 = v4[1];
    sub_100019320();
    sub_10012A314(1701080931LL, 0xE400000000000000LL, a1);
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    swift_bridgeObjectRelease(a1);
    if (v10)
    {
      uint64_t v11 = type metadata accessor for OctaneLocale();
      uint64_t result = (void *)swift_allocObject(v11, 48LL, 7LL);
      result[4] = v6;
      result[5] = v5;
      result[2] = v8;
      result[3] = v10;
      return result;
    }

    uint64_t v13 = v5;
  }

  else
  {
    uint64_t v13 = a1;
  }

  swift_bridgeObjectRelease(v13);
  return 0LL;
}

uint64_t sub_1000CC010(uint64_t a1)
{
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
    return 0LL;
  }

uint64_t sub_1000CC284(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  BOOL v8 = v4 == v6 && v5 == v7;
  if (v8 || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0LL), uint64_t result = 0LL, (v9 & 1) != 0))
  {
    uint64_t v11 = a1[4];
    uint64_t v12 = a1[5];
    uint64_t v13 = a2[4];
    uint64_t v14 = a2[5];
    if (v11 == v13 && v12 == v14) {
      return 1LL;
    }
    else {
      return _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v13, v14, 0LL);
    }
  }

  return result;
}

uint64_t sub_1000CC2F8(uint64_t a1)
{
  uint64_t v8 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = 0x636E657272756340LL;
  v3._object = (void *)0xEA00000000003D79LL;
  String.append(_:)(v3);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void **)(a1 + 24);
  sub_100019320();
  v6._countAndFlagsBits = v5;
  v6._object = v4;
  String.append(_:)(v6);
  sub_100019390();
  return v8;
}

uint64_t sub_1000CC370()
{
  return v0;
}

uint64_t sub_1000CC394()
{
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t type metadata accessor for OctaneLocale()
{
  return objc_opt_self(&OBJC_CLASS____TtC25ASOctaneSupportXPCService12OctaneLocale);
}

uint64_t sub_1000CC3D4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000CBD68(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1000CC3FC(void *a1)
{
  return sub_1000CBEC8(a1);
}

uint64_t sub_1000CC41C(void **a1, void **a2)
{
  return sub_1000CC284(*a1, *a2) & 1;
}

uint64_t sub_1000CC43C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Swift::String_optional v11 = String.Iterator.next()();
  uint64_t v12 = a1;
  if (v11.value._object)
  {
    uint64_t countAndFlagsBits = v11.value._countAndFlagsBits;
    object = v11.value._object;
    uint64_t v12 = a1;
    while ((v12 ^ a2) >= 0x4000)
    {
      uint64_t v15 = Substring.subscript.getter(v12, a1, a2, a3, a4);
      uint64_t v17 = v16;
      uint64_t v12 = Substring.index(after:)(v12, a1, a2, a3, a4);
      if (countAndFlagsBits == v15 && object == v17)
      {
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(v17);
      }

      else
      {
        char v19 = _stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, v15, v17, 0LL);
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(v17);
        if ((v19 & 1) == 0)
        {
          swift_bridgeObjectRelease(a4);
          uint64_t v25 = a6;
          goto LABEL_17;
        }
      }

      Swift::String_optional v20 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v20.value._countAndFlagsBits;
      object = v20.value._object;
      if (!v20.value._object) {
        goto LABEL_12;
      }
    }

    swift_bridgeObjectRelease(object);
    swift_bridgeObjectRelease(a4);
    uint64_t v21 = a6;
    goto LABEL_16;
  }

unint64_t sub_1000CC61C()
{
  unint64_t result = qword_1002B0050;
  if (!qword_1002B0050)
  {
    uint64_t v1 = sub_100018EC0(&qword_1002B0048);
    unint64_t v2 = sub_1000CC680();
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1002B0050);
  }

  return result;
}

unint64_t sub_1000CC680()
{
  unint64_t result = qword_1002A9438;
  if (!qword_1002A9438)
  {
    uint64_t v1 = sub_100018EC0(&qword_1002A9420);
    v2[0] = &protocol witness table for String;
    v2[1] = &protocol witness table for String;
    unint64_t result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> [A : B], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1002A9438);
  }

  return result;
}

uint64_t sub_1000CC6DC()
{
  return 0LL;
}

uint64_t sub_1000CC6E8()
{
  return v0;
}

uint64_t sub_1000CC6FC(uint64_t a1, ...)
{
  return sub_100019F7C((uint64_t *)va);
}

void sub_1000CC704(int a1)
{
  if (v1)
  {
    uint64_t v13 = v1;
    swift_errorRetain(v1);
    uint64_t v3 = sub_1000175B0(&qword_1002A9710);
    if (swift_dynamicCast(v11, &v13, v3, &type metadata for IOError, 0LL))
    {
      swift_errorRelease(v1);
      uint64_t v4 = v11[1];
      int v5 = v12;
      if (v12 == 22)
      {
        swift_bridgeObjectRelease();
        unint64_t v6 = sub_1000AA014();
        uint64_t v7 = swift_allocError(&type metadata for NIOFcntlFailedError, v6, 0LL, 0LL);
      }

      else
      {
        uint64_t v8 = v11[0];
        sub_100024FB4(a1);
        unint64_t v9 = sub_100025100();
        uint64_t v7 = swift_allocError(&type metadata for IOError, v9, 0LL, 0LL);
        *(void *)uint64_t v10 = v8;
        *(void *)(v10 + 8) = v4;
        *(_DWORD *)(v10 + 1sub_100019F7C(v0 + 6) = v5;
      }

      swift_willThrow(v7);
    }

    swift_errorRelease(v13);
  }

uint64_t sub_1000CC820(int a1, uint64_t a2, char a3)
{
  uint64_t v7 = v6;
  if (!v3)
  {
    if ((a3 & 1) != 0) {
      sub_1001718CC();
    }
    if (a1 == 30)
    {
      int v9 = 0;
      sub_100171484(v7, 41LL, 27LL, (uint64_t)&v9, 4u);
    }
  }

  return v7;
}

uint64_t sub_1000CCA40(uint64_t result)
{
  if ((result & 0x80000000) != 0)
  {
    __break(1u);
  }

  else
  {
    *(_DWORD *)(v1 + 1sub_100019F7C(v0 + 6) = result;
    sub_1000CC704(result);
    if (v2)
    {
      *(_DWORD *)(v1 + 1sub_100019F7C(v0 + 6) = -1;
      uint64_t v3 = swift_release();
      swift_willThrow(v3);
    }

    return v1;
  }

  return result;
}

void sub_1000CCA94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((*(_DWORD *)(a1 + 16) & 0x80000000) != 0) {
    goto LABEL_5;
  }
  if (a5 && a6 - a5 >= (uint64_t)&_mh_execute_header)
  {
    sub_100034FD0();
    sub_100035124( (uint64_t)"Fatal error",  11LL,  2LL,  (uint64_t)"Not enough bits to represent the passed value",  45LL,  v6,  (uint64_t)"Swift/Integers.swift");
    __break(1u);
LABEL_5:
    unint64_t v7 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v7);
    sub_100073658();
    sub_100052668(v8, v9);
    return;
  }

  sub_1001713D0();
}

void sub_1000CCB98(uint64_t a1, msghdr *a2, unint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 < 0)
  {
    unint64_t v4 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v4);
    sub_100073658();
    sub_100052668(v5, v6);
    return;
  }

  if (a2)
  {
    if ((a3 & 0x8000000000000000LL) == 0)
    {
      if (!HIDWORD(a3))
      {
        sub_100171660(v3, a2, a3, 0);
        return;
      }

      sub_100034FD0();
      uint64_t v8 = "Not enough bits to represent the passed value";
      uint64_t v9 = 45LL;
      goto LABEL_10;
    }
  }

  else
  {
    __break(1u);
  }

  sub_100034FD0();
  uint64_t v8 = "Negative value is not representable";
  uint64_t v9 = 35LL;
LABEL_10:
  sub_100035124((uint64_t)"Fatal error", 11LL, 2LL, (uint64_t)v8, v9, v7, (uint64_t)"Swift/Integers.swift");
  __break(1u);
}

uint64_t sub_1000CCC78(uint64_t (*a1)(void))
{
  if ((*(_DWORD *)(v1 + 16) & 0x80000000) == 0) {
    return a1();
  }
  unint64_t v3 = sub_100025100();
  sub_1000252D0((uint64_t)&type metadata for IOError, v3);
  sub_100073658();
  return sub_100052668(v4, v5);
}

uint64_t sub_1000CCCD4()
{
  int v1 = *(_DWORD *)(v0 + 16);
  if (v1 < 0)
  {
    unint64_t v3 = sub_100025100();
    sub_1000252D0((uint64_t)&type metadata for IOError, v3);
    sub_100073658();
    return sub_100052668(v4, v5);
  }

  else
  {
    *(_DWORD *)(v0 + 1sub_100019F7C(v0 + 6) = -1;
    return sub_100024FB4(v1);
  }

BOOL sub_1000CCD30()
{
  return *(_DWORD *)(v0 + 16) >= 0;
}

unint64_t sub_1000CCD40()
{
  return sub_1000CCD80((uint64_t (*)(void))sub_1000CD348);
}